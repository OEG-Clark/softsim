{"home.repos.pwc.inspect_result.ggsding_bi-srnet.None.train_SCD.main": [[51, 67], ["models.SSCDl.SSCDl.cuda", "datasets.RS_ST.Data", "torch.utils.data.DataLoader", "datasets.RS_ST.Data", "torch.utils.data.DataLoader", "utils.loss.CrossEntropyLoss2d().cuda", "torch.optim.SGD", "torch.optim.lr_scheduler.StepLR", "train_SCD.train", "writer.close", "print", "filter", "models.SSCDl.SSCDl", "utils.loss.CrossEntropyLoss2d", "Net().cuda.parameters"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.None.train_SCD.train"], ["def", "main", "(", ")", ":", "\n", "    ", "net", "=", "Net", "(", "3", ",", "num_classes", "=", "RS", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "#net.load_state_dict(torch.load(args['load_path']), strict=False)", "\n", "\n", "train_set", "=", "RS", ".", "Data", "(", "'train'", ",", "random_flip", "=", "True", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", "[", "'train_batch_size'", "]", ",", "num_workers", "=", "4", ",", "shuffle", "=", "True", ")", "\n", "val_set", "=", "RS", ".", "Data", "(", "'val'", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_set", ",", "batch_size", "=", "args", "[", "'val_batch_size'", "]", ",", "num_workers", "=", "4", ",", "shuffle", "=", "False", ")", "\n", "\n", "criterion", "=", "CrossEntropyLoss2d", "(", "ignore_index", "=", "0", ")", ".", "cuda", "(", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "net", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "weight_decay", "=", "args", "[", "'weight_decay'", "]", ",", "momentum", "=", "args", "[", "'momentum'", "]", ",", "nesterov", "=", "True", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "1", ",", "gamma", "=", "0.95", ",", "last_epoch", "=", "-", "1", ")", "\n", "\n", "train", "(", "train_loader", ",", "net", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "val_loader", ")", "\n", "writer", ".", "close", "(", ")", "\n", "print", "(", "'Training finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.train_SCD.train": [[68, 155], ["time.time", "float", "utils.loss.ChangeSimilarity().cuda", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "net.train", "time.time", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "enumerate", "train_SCD.validate", "print", "len", "utils.loss.ChangeSimilarity", "len", "train_SCD.adjust_lr", "optimizer.zero_grad", "net", "utils.loss.weighted_BCE_logits", "ChangeSimilarity().cuda.", "loss.backward", "optimizer.step", "labels_A.cuda().long.cpu().detach().numpy", "labels_B.cuda().long.cpu().detach().numpy", "outputs_A.cpu().detach.cpu().detach", "outputs_B.cpu().detach.cpu().detach", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "utils.utils.AverageMeter", "zip", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "torch.save", "torch.save", "torch.save", "imgs_A.cuda().float.cuda().float", "imgs_B.cuda().float.cuda().float", "labels_A.cuda().long.cuda().long", "labels_B.cuda().long.cuda().long", "torch.sigmoid().cpu().detach", "utils.utils.accuracy", "utils.utils.accuracy", "utils.utils.AverageMeter.update", "loss_seg.cpu().detach().numpy", "utils.loss.weighted_BCE_logits.cpu().detach().numpy", "criterion_sc.cpu().detach().numpy", "time.time", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "net.state_dict", "os.path.join", "outputs_A.cpu().detach.size", "criterion", "criterion", "labels_A.cuda().long.cpu().detach", "labels_B.cuda().long.cpu().detach", "outputs_A.cpu().detach.cpu", "outputs_B.cpu().detach.cpu", "imgs_A.cuda().float.cuda", "imgs_B.cuda().float.cuda", "labels_A.cuda().long.cuda", "labels_B.cuda().long.cuda", "torch.sigmoid().cpu", "change_mask.squeeze().long", "change_mask.squeeze().long", "loss_seg.cpu().detach", "utils.loss.weighted_BCE_logits.cpu().detach", "criterion_sc.cpu().detach", "time.time", "labels_A.cuda().long.cpu", "labels_B.cuda().long.cpu", "len", "torch.sigmoid", "change_mask.squeeze", "change_mask.squeeze", "loss_seg.cpu", "utils.loss.weighted_BCE_logits.cpu", "criterion_sc.cpu"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.None.train_SCD.train", "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.train_SCD.validate", "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.train_SCD.adjust_lr", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.weighted_BCE_logits", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc.PolyLR.step", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.accuracy", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.accuracy", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.update"], ["", "def", "train", "(", "train_loader", ",", "net", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "val_loader", ")", ":", "\n", "    ", "bestaccT", "=", "0", "\n", "bestscoreV", "=", "0.0", "\n", "bestloss", "=", "1.0", "\n", "begin_time", "=", "time", ".", "time", "(", ")", "\n", "all_iters", "=", "float", "(", "len", "(", "train_loader", ")", "*", "args", "[", "'epochs'", "]", ")", "\n", "criterion_sc", "=", "ChangeSimilarity", "(", ")", ".", "cuda", "(", ")", "\n", "curr_epoch", "=", "0", "\n", "while", "True", ":", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "net", ".", "train", "(", ")", "\n", "#freeze_model(net.FCN)", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "acc_meter", "=", "AverageMeter", "(", ")", "\n", "train_seg_loss", "=", "AverageMeter", "(", ")", "\n", "train_bn_loss", "=", "AverageMeter", "(", ")", "\n", "train_sc_loss", "=", "AverageMeter", "(", ")", "\n", "\n", "curr_iter", "=", "curr_epoch", "*", "len", "(", "train_loader", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "running_iter", "=", "curr_iter", "+", "i", "+", "1", "\n", "adjust_lr", "(", "optimizer", ",", "running_iter", ",", "all_iters", ")", "\n", "imgs_A", ",", "imgs_B", ",", "labels_A", ",", "labels_B", "=", "data", "\n", "if", "args", "[", "'gpu'", "]", ":", "\n", "                ", "imgs_A", "=", "imgs_A", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "imgs_B", "=", "imgs_B", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "labels_bn", "=", "(", "labels_A", ">", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "labels_A", "=", "labels_A", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "labels_B", "=", "labels_B", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "out_change", ",", "outputs_A", ",", "outputs_B", "=", "net", "(", "imgs_A", ",", "imgs_B", ")", "\n", "\n", "assert", "outputs_A", ".", "size", "(", ")", "[", "1", "]", "==", "RS", ".", "num_classes", "\n", "\n", "loss_seg", "=", "criterion", "(", "outputs_A", ",", "labels_A", ")", "*", "0.5", "+", "criterion", "(", "outputs_B", ",", "labels_B", ")", "*", "0.5", "\n", "loss_bn", "=", "weighted_BCE_logits", "(", "out_change", ",", "labels_bn", ")", "\n", "loss_sc", "=", "criterion_sc", "(", "outputs_A", "[", ":", ",", "1", ":", "]", ",", "outputs_B", "[", ":", ",", "1", ":", "]", ",", "labels_bn", ")", "\n", "loss", "=", "loss_seg", "+", "loss_bn", "+", "loss_sc", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "labels_A", "=", "labels_A", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "labels_B", "=", "labels_B", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "outputs_A", "=", "outputs_A", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "outputs_B", "=", "outputs_B", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "change_mask", "=", "F", ".", "sigmoid", "(", "out_change", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ">", "0.5", "\n", "preds_A", "=", "torch", ".", "argmax", "(", "outputs_A", ",", "dim", "=", "1", ")", "\n", "preds_B", "=", "torch", ".", "argmax", "(", "outputs_B", ",", "dim", "=", "1", ")", "\n", "preds_A", "=", "(", "preds_A", "*", "change_mask", ".", "squeeze", "(", ")", ".", "long", "(", ")", ")", ".", "numpy", "(", ")", "\n", "preds_B", "=", "(", "preds_B", "*", "change_mask", ".", "squeeze", "(", ")", ".", "long", "(", ")", ")", ".", "numpy", "(", ")", "\n", "# batch_valid_sum = 0", "\n", "acc_curr_meter", "=", "AverageMeter", "(", ")", "\n", "for", "(", "pred_A", ",", "pred_B", ",", "label_A", ",", "label_B", ")", "in", "zip", "(", "preds_A", ",", "preds_B", ",", "labels_A", ",", "labels_B", ")", ":", "\n", "                ", "acc_A", ",", "valid_sum_A", "=", "accuracy", "(", "pred_A", ",", "label_A", ")", "\n", "acc_B", ",", "valid_sum_B", "=", "accuracy", "(", "pred_B", ",", "label_B", ")", "\n", "acc", "=", "(", "acc_A", "+", "acc_B", ")", "*", "0.5", "\n", "acc_curr_meter", ".", "update", "(", "acc", ")", "\n", "", "acc_meter", ".", "update", "(", "acc_curr_meter", ".", "avg", ")", "\n", "train_seg_loss", ".", "update", "(", "loss_seg", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "train_bn_loss", ".", "update", "(", "loss_bn", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "train_sc_loss", ".", "update", "(", "loss_sc", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "curr_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "args", "[", "'print_freq'", "]", "==", "0", ":", "\n", "                ", "print", "(", "'[epoch %d] [iter %d / %d %.1fs] [lr %f] [train seg_loss %.4f bn_loss %.4f acc %.2f]'", "%", "(", "\n", "curr_epoch", ",", "i", "+", "1", ",", "len", "(", "train_loader", ")", ",", "curr_time", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "train_seg_loss", ".", "val", ",", "train_bn_loss", ".", "val", ",", "acc_meter", ".", "val", "*", "100", ")", ")", "#sc_loss %.4f, train_sc_loss.val, ", "\n", "writer", ".", "add_scalar", "(", "'train seg_loss'", ",", "train_seg_loss", ".", "val", ",", "running_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'train sc_loss'", ",", "train_sc_loss", ".", "val", ",", "running_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'train accuracy'", ",", "acc_meter", ".", "val", ",", "running_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'lr'", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "running_iter", ")", "\n", "\n", "", "", "score_v", ",", "mIoU_v", ",", "Sek_v", ",", "acc_v", ",", "loss_v", "=", "validate", "(", "val_loader", ",", "net", ",", "criterion", ",", "curr_epoch", ")", "\n", "if", "acc_meter", ".", "avg", ">", "bestaccT", ":", "bestaccT", "=", "acc_meter", ".", "avg", "\n", "if", "score_v", ">", "bestscoreV", ":", "\n", "            ", "bestscoreV", "=", "score_v", "\n", "bestaccV", "=", "acc_v", "\n", "bestloss", "=", "loss_v", "\n", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", "[", "'chkpt_dir'", "]", ",", "NET_NAME", "+", "'_%de_mIoU%.2f_Sek%.2f_score%.2f_OA%.2f.pth'", "%", "(", "curr_epoch", ",", "mIoU_v", "*", "100", ",", "Sek_v", "*", "100", ",", "score_v", "*", "100", ",", "acc_v", "*", "100", ")", ")", ")", "\n", "", "print", "(", "'Total time: %.1fs Best rec: Train acc %.2f, Val score %.2f acc %.2f loss %.4f'", "%", "(", "time", ".", "time", "(", ")", "-", "begin_time", ",", "bestaccT", "*", "100", ",", "bestscoreV", "*", "100", ",", "bestaccV", "*", "100", ",", "bestloss", ")", ")", "\n", "curr_epoch", "+=", "1", "\n", "#scheduler.step()", "\n", "if", "curr_epoch", ">=", "args", "[", "'epochs'", "]", ":", "\n", "            ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.train_SCD.validate": [[156, 219], ["net.eval", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "time.time", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "enumerate", "utils.utils.SCDD_eval_all", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "utils.utils.AverageMeter.update", "labels_A.cuda().long.cpu().detach().numpy", "labels_B.cuda().long.cpu().detach().numpy", "outputs_A.cpu().detach.cpu().detach", "outputs_B.cpu().detach.cpu().detach", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "zip", "time.time", "utils.utils.AverageMeter.average", "utils.utils.AverageMeter.average", "imgs_A.cuda().float.cuda().float", "imgs_B.cuda().float.cuda().float", "labels_A.cuda().long.cuda().long", "labels_B.cuda().long.cuda().long", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "criterion", "criterion", "loss.cpu().detach().numpy", "torch.sigmoid().cpu().detach", "utils.utils.accuracy", "utils.utils.accuracy", "preds_all.append", "preds_all.append", "labels_all.append", "labels_all.append", "utils.utils.AverageMeter.update", "datasets.RS_ST.Index2Color", "datasets.RS_ST.Index2Color", "skimage.io.imsave", "skimage.io.imsave", "print", "labels_A.cuda().long.cpu().detach", "labels_B.cuda().long.cpu().detach", "outputs_A.cpu().detach.cpu", "outputs_B.cpu().detach.cpu", "os.path.join", "os.path.join", "utils.utils.AverageMeter.average", "imgs_A.cuda().float.cuda", "imgs_B.cuda().float.cuda", "labels_A.cuda().long.cuda", "labels_B.cuda().long.cuda", "loss.cpu().detach", "torch.sigmoid().cpu", "change_mask.squeeze().long", "change_mask.squeeze().long", "utils.utils.AverageMeter.average", "labels_A.cuda().long.cpu", "labels_B.cuda().long.cpu", "loss.cpu", "torch.sigmoid", "change_mask.squeeze", "change_mask.squeeze"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.SCDD_eval_all", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.accuracy", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.accuracy", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Index2Color", "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Index2Color", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.average", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.average"], ["", "", "", "def", "validate", "(", "val_loader", ",", "net", ",", "criterion", ",", "curr_epoch", ")", ":", "\n", "# the following code is written assuming that batch size is 1", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "val_loss", "=", "AverageMeter", "(", ")", "\n", "acc_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "preds_all", "=", "[", "]", "\n", "labels_all", "=", "[", "]", "\n", "for", "vi", ",", "data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "imgs_A", ",", "imgs_B", ",", "labels_A", ",", "labels_B", "=", "data", "\n", "if", "args", "[", "'gpu'", "]", ":", "\n", "            ", "imgs_A", "=", "imgs_A", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "imgs_B", "=", "imgs_B", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "labels_A", "=", "labels_A", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "labels_B", "=", "labels_B", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "out_change", ",", "outputs_A", ",", "outputs_B", "=", "net", "(", "imgs_A", ",", "imgs_B", ")", "\n", "loss_A", "=", "criterion", "(", "outputs_A", ",", "labels_A", ")", "\n", "loss_B", "=", "criterion", "(", "outputs_B", ",", "labels_B", ")", "\n", "loss", "=", "loss_A", "*", "0.5", "+", "loss_B", "*", "0.5", "\n", "", "val_loss", ".", "update", "(", "loss", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "labels_A", "=", "labels_A", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "labels_B", "=", "labels_B", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "outputs_A", "=", "outputs_A", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "outputs_B", "=", "outputs_B", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "change_mask", "=", "F", ".", "sigmoid", "(", "out_change", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ">", "0.5", "\n", "preds_A", "=", "torch", ".", "argmax", "(", "outputs_A", ",", "dim", "=", "1", ")", "\n", "preds_B", "=", "torch", ".", "argmax", "(", "outputs_B", ",", "dim", "=", "1", ")", "\n", "preds_A", "=", "(", "preds_A", "*", "change_mask", ".", "squeeze", "(", ")", ".", "long", "(", ")", ")", ".", "numpy", "(", ")", "\n", "preds_B", "=", "(", "preds_B", "*", "change_mask", ".", "squeeze", "(", ")", ".", "long", "(", ")", ")", ".", "numpy", "(", ")", "\n", "for", "(", "pred_A", ",", "pred_B", ",", "label_A", ",", "label_B", ")", "in", "zip", "(", "preds_A", ",", "preds_B", ",", "labels_A", ",", "labels_B", ")", ":", "\n", "            ", "acc_A", ",", "valid_sum_A", "=", "accuracy", "(", "pred_A", ",", "label_A", ")", "\n", "acc_B", ",", "valid_sum_B", "=", "accuracy", "(", "pred_B", ",", "label_B", ")", "\n", "preds_all", ".", "append", "(", "pred_A", ")", "\n", "preds_all", ".", "append", "(", "pred_B", ")", "\n", "labels_all", ".", "append", "(", "label_A", ")", "\n", "labels_all", ".", "append", "(", "label_B", ")", "\n", "acc", "=", "(", "acc_A", "+", "acc_B", ")", "*", "0.5", "\n", "acc_meter", ".", "update", "(", "acc", ")", "\n", "\n", "", "if", "curr_epoch", "%", "args", "[", "'predict_step'", "]", "==", "0", "and", "vi", "==", "0", ":", "\n", "            ", "pred_A_color", "=", "RS", ".", "Index2Color", "(", "preds_A", "[", "0", "]", ")", "\n", "pred_B_color", "=", "RS", ".", "Index2Color", "(", "preds_B", "[", "0", "]", ")", "\n", "io", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "args", "[", "'pred_dir'", "]", ",", "NET_NAME", "+", "'_A.png'", ")", ",", "pred_A_color", ")", "\n", "io", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "args", "[", "'pred_dir'", "]", ",", "NET_NAME", "+", "'_B.png'", ")", ",", "pred_B_color", ")", "\n", "print", "(", "'Prediction saved!'", ")", "\n", "\n", "", "", "score", ",", "IoU_mean", ",", "Sek", "=", "SCDD_eval_all", "(", "preds_all", ",", "labels_all", ",", "RS", ".", "num_classes", ")", "\n", "\n", "curr_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "print", "(", "'%.1fs Val loss: %.2f Score: %.2f IoU: %.2f Sek: %.2f Accuracy: %.2f'", "%", "(", "curr_time", ",", "val_loss", ".", "average", "(", ")", ",", "score", "*", "100", ",", "IoU_mean", "*", "100", ",", "Sek", "*", "100", ",", "acc_meter", ".", "average", "(", ")", "*", "100", ")", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'val_loss'", ",", "val_loss", ".", "average", "(", ")", ",", "curr_epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'val_Score'", ",", "score", ",", "curr_epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'val_Accuracy'", ",", "acc_meter", ".", "average", "(", ")", ",", "curr_epoch", ")", "\n", "\n", "return", "score", ",", "IoU_mean", ",", "Sek", ",", "acc_meter", ".", "avg", ",", "val_loss", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.train_SCD.freeze_model": [[220, 226], ["model.parameters", "model.modules", "isinstance", "module.eval"], "function", ["None"], ["", "def", "freeze_model", "(", "model", ")", ":", "\n", "    ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "module", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.train_SCD.adjust_lr": [[227, 233], ["float"], "function", ["None"], ["", "", "", "def", "adjust_lr", "(", "optimizer", ",", "curr_iter", ",", "all_iter", ",", "init_lr", "=", "args", "[", "'lr'", "]", ")", ":", "\n", "    ", "scale_running_lr", "=", "(", "(", "1.", "-", "float", "(", "curr_iter", ")", "/", "all_iter", ")", "**", "args", "[", "'lr_decay_power'", "]", ")", "\n", "running_lr", "=", "init_lr", "*", "scale_running_lr", "\n", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "running_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.pred_SCD.PredOptions.__init__": [[17, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the class; indicates the class hasn't been initailized\"\"\"", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.pred_SCD.PredOptions.initialize": [[21, 29], ["os.path.dirname", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "os.path.abspath"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "working_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--pred_batch_size'", ",", "required", "=", "False", ",", "default", "=", "1", ",", "help", "=", "'prediction batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_dir'", ",", "required", "=", "False", ",", "default", "=", "'/TEST_DIR/'", ",", "help", "=", "'directory to test images'", ")", "\n", "parser", ".", "add_argument", "(", "'--pred_dir'", ",", "required", "=", "False", ",", "default", "=", "'/PRED_DIR/'", "+", "DATA_DIR", ",", "help", "=", "'directory to output masks'", ")", "\n", "parser", ".", "add_argument", "(", "'--chkpt_path'", ",", "required", "=", "False", ",", "default", "=", "working_path", "+", "'/checkpoints/ST/xxx.pth'", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.pred_SCD.PredOptions.gather_options": [[30, 36], ["pred_SCD.PredOptions.parse_args", "argparse.ArgumentParser", "pred_SCD.PredOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.initialize"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "# check if it has been initialized", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "", "self", ".", "parser", "=", "parser", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.pred_SCD.PredOptions.parse": [[37, 40], ["pred_SCD.PredOptions.gather_options"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.None.pred_SCD.PredOptions.gather_options"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "self", ".", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "return", "self", ".", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.pred_SCD.compare_models": [[41, 54], ["zip", "model_1.state_dict().items", "model_2.state_dict().items", "torch.equal", "print", "model_1.state_dict", "model_2.state_dict", "print"], "function", ["None"], ["", "", "def", "compare_models", "(", "model_1", ",", "model_2", ")", ":", "\n", "    ", "models_differ", "=", "0", "\n", "for", "key_item_1", ",", "key_item_2", "in", "zip", "(", "model_1", ".", "state_dict", "(", ")", ".", "items", "(", ")", ",", "model_2", ".", "state_dict", "(", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "torch", ".", "equal", "(", "key_item_1", "[", "1", "]", ",", "key_item_2", "[", "1", "]", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "models_differ", "+=", "1", "\n", "if", "(", "key_item_1", "[", "0", "]", "==", "key_item_2", "[", "0", "]", ")", ":", "\n", "                ", "print", "(", "'Mismtach found at'", ",", "key_item_1", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "\n", "", "", "", "if", "models_differ", "==", "0", ":", "\n", "        ", "print", "(", "'Models match perfectly! :)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.pred_SCD.main": [[55, 68], ["time.time", "pred_SCD.PredOptions.parse", "models.SSCDl.SSCDl.cuda", "Net().cuda.load_state_dict", "Net().cuda.eval", "datasets.RS_ST.Data_test", "torch.utils.data.DataLoader", "pred_SCD.predict", "print", "torch.load", "time.time", "pred_SCD.PredOptions", "models.SSCDl.SSCDl"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.None.pred_SCD.PredOptions.parse", "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.pred_SCD.predict"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "begin_time", "=", "time", ".", "time", "(", ")", "\n", "opt", "=", "PredOptions", "(", ")", ".", "parse", "(", ")", "\n", "net", "=", "Net", "(", "3", ",", "RS", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "opt", ".", "chkpt_path", ")", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "test_set", "=", "RS", ".", "Data_test", "(", "opt", ".", "test_dir", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "opt", ".", "pred_batch_size", ")", "\n", "predict", "(", "net", ",", "test_set", ",", "test_loader", ",", "opt", ".", "pred_dir", ",", "flip", "=", "False", ",", "index_map", "=", "True", ",", "intermediate", "=", "False", ")", "\n", "#predict_direct(net, test_set, test_loader, opt.pred_dir, flip=False, index_map=True)", "\n", "time_use", "=", "time", ".", "time", "(", ")", "-", "begin_time", "\n", "print", "(", "'Total time: %.2fs'", "%", "time_use", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.pred_SCD.predict": [[71, 160], ["os.path.join", "os.path.join", "enumerate", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "imgs_A.cuda().float.cuda().float", "imgs_B.cuda().float.cuda().float", "pred_set.get_mask_name", "F.softmax.cpu().detach", "F.softmax.cpu().detach", "change_mask.squeeze.squeeze", "torch.argmax().squeeze", "torch.argmax().squeeze", "os.path.join", "os.path.join", "skimage.io.imsave", "skimage.io.imsave", "print", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "torch.no_grad", "net", "torch.nn.functional.sigmoid", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.flip", "torch.flip", "net", "torch.flip", "torch.flip", "torch.flip", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.sigmoid", "torch.flip", "torch.flip", "net", "torch.flip", "torch.flip", "torch.flip", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.sigmoid", "torch.flip", "torch.flip", "net", "torch.flip", "torch.flip", "torch.flip", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.sigmoid", "F.sigmoid.cpu().detach", "os.path.join", "os.path.join", "os.path.join", "skimage.io.imsave", "skimage.io.imsave", "skimage.exposure.rescale_intensity", "skimage.io.imsave", "datasets.RS_ST.Index2Color", "datasets.RS_ST.Index2Color", "os.path.join", "os.path.join", "skimage.io.imsave", "skimage.io.imsave", "imgs_A.cuda().float.cuda", "imgs_B.cuda().float.cuda", "F.softmax.cpu", "F.softmax.cpu", "torch.argmax", "torch.argmax", "datasets.RS_ST.Index2Color", "datasets.RS_ST.Index2Color", "change_mask.squeeze.numpy", "torch.argmax().squeeze.astype", "torch.argmax().squeeze.astype", "F.sigmoid.cpu", "torch.argmax().squeeze.numpy", "torch.argmax().squeeze.numpy", "change_mask.squeeze.long", "change_mask.squeeze.long"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Data_test.get_mask_name", "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Index2Color", "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Index2Color", "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Index2Color", "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Index2Color"], ["", "def", "predict", "(", "net", ",", "pred_set", ",", "pred_loader", ",", "pred_dir", ",", "flip", "=", "False", ",", "index_map", "=", "False", ",", "intermediate", "=", "False", ")", ":", "\n", "    ", "pred_A_dir_rgb", "=", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "'im1_rgb'", ")", "\n", "pred_B_dir_rgb", "=", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "'im2_rgb'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pred_A_dir_rgb", ")", ":", "os", ".", "makedirs", "(", "pred_A_dir_rgb", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pred_B_dir_rgb", ")", ":", "os", ".", "makedirs", "(", "pred_B_dir_rgb", ")", "\n", "if", "index_map", ":", "\n", "        ", "pred_A_dir", "=", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "'im1'", ")", "\n", "pred_B_dir", "=", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "'im2'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pred_A_dir", ")", ":", "os", ".", "makedirs", "(", "pred_A_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pred_B_dir", ")", ":", "os", ".", "makedirs", "(", "pred_B_dir", ")", "\n", "", "if", "intermediate", ":", "\n", "        ", "pred_mA_dir", "=", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "'im1_semantic'", ")", "\n", "pred_mB_dir", "=", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "'im2_semantic'", ")", "\n", "pred_change_dir", "=", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "'change'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pred_mA_dir", ")", ":", "os", ".", "makedirs", "(", "pred_mA_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pred_mB_dir", ")", ":", "os", ".", "makedirs", "(", "pred_mB_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pred_change_dir", ")", ":", "os", ".", "makedirs", "(", "pred_change_dir", ")", "\n", "\n", "", "for", "vi", ",", "data", "in", "enumerate", "(", "pred_loader", ")", ":", "\n", "        ", "imgs_A", ",", "imgs_B", "=", "data", "\n", "#imgs = torch.cat([imgs_A, imgs_B], 1)", "\n", "imgs_A", "=", "imgs_A", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "imgs_B", "=", "imgs_B", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "mask_name", "=", "pred_set", ".", "get_mask_name", "(", "vi", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "out_change", ",", "outputs_A", ",", "outputs_B", "=", "net", "(", "imgs_A", ",", "imgs_B", ")", "#,aux", "\n", "out_change", "=", "F", ".", "sigmoid", "(", "out_change", ")", "\n", "", "if", "flip", ":", "\n", "            ", "outputs_A", "=", "F", ".", "softmax", "(", "outputs_A", ",", "dim", "=", "1", ")", "\n", "outputs_B", "=", "F", ".", "softmax", "(", "outputs_B", ",", "dim", "=", "1", ")", "\n", "\n", "imgs_A_v", "=", "torch", ".", "flip", "(", "imgs_A", ",", "[", "2", "]", ")", "\n", "imgs_B_v", "=", "torch", ".", "flip", "(", "imgs_B", ",", "[", "2", "]", ")", "\n", "out_change_v", ",", "outputs_A_v", ",", "outputs_B_v", "=", "net", "(", "imgs_A_v", ",", "imgs_B_v", ")", "\n", "outputs_A_v", "=", "torch", ".", "flip", "(", "outputs_A_v", ",", "[", "2", "]", ")", "\n", "outputs_B_v", "=", "torch", ".", "flip", "(", "outputs_B_v", ",", "[", "2", "]", ")", "\n", "out_change_v", "=", "torch", ".", "flip", "(", "out_change_v", ",", "[", "2", "]", ")", "\n", "outputs_A", "+=", "F", ".", "softmax", "(", "outputs_A_v", ",", "dim", "=", "1", ")", "\n", "outputs_B", "+=", "F", ".", "softmax", "(", "outputs_B_v", ",", "dim", "=", "1", ")", "\n", "out_change", "+=", "F", ".", "sigmoid", "(", "out_change_v", ")", "\n", "\n", "imgs_A_h", "=", "torch", ".", "flip", "(", "imgs_A", ",", "[", "3", "]", ")", "\n", "imgs_B_h", "=", "torch", ".", "flip", "(", "imgs_B", ",", "[", "3", "]", ")", "\n", "out_change_h", ",", "outputs_A_h", ",", "outputs_B_h", "=", "net", "(", "imgs_A_h", ",", "imgs_B_h", ")", "\n", "outputs_A_h", "=", "torch", ".", "flip", "(", "outputs_A_h", ",", "[", "3", "]", ")", "\n", "outputs_B_h", "=", "torch", ".", "flip", "(", "outputs_B_h", ",", "[", "3", "]", ")", "\n", "out_change_h", "=", "torch", ".", "flip", "(", "out_change_h", ",", "[", "3", "]", ")", "\n", "outputs_A", "+=", "F", ".", "softmax", "(", "outputs_A_h", ",", "dim", "=", "1", ")", "\n", "outputs_B", "+=", "F", ".", "softmax", "(", "outputs_B_h", ",", "dim", "=", "1", ")", "\n", "out_change", "+=", "F", ".", "sigmoid", "(", "out_change_h", ")", "\n", "\n", "imgs_A_hv", "=", "torch", ".", "flip", "(", "imgs_A", ",", "[", "2", ",", "3", "]", ")", "\n", "imgs_B_hv", "=", "torch", ".", "flip", "(", "imgs_B", ",", "[", "2", ",", "3", "]", ")", "\n", "out_change_hv", ",", "outputs_A_hv", ",", "outputs_B_hv", "=", "net", "(", "imgs_A_hv", ",", "imgs_B_hv", ")", "\n", "outputs_A_hv", "=", "torch", ".", "flip", "(", "outputs_A_hv", ",", "[", "2", ",", "3", "]", ")", "\n", "outputs_B_hv", "=", "torch", ".", "flip", "(", "outputs_B_hv", ",", "[", "2", ",", "3", "]", ")", "\n", "out_change_hv", "=", "torch", ".", "flip", "(", "out_change_hv", ",", "[", "2", ",", "3", "]", ")", "\n", "outputs_A", "+=", "F", ".", "softmax", "(", "outputs_A_hv", ",", "dim", "=", "1", ")", "\n", "outputs_B", "+=", "F", ".", "softmax", "(", "outputs_B_hv", ",", "dim", "=", "1", ")", "\n", "out_change", "+=", "F", ".", "sigmoid", "(", "out_change_hv", ")", "\n", "out_change", "=", "out_change", "/", "4", "\n", "\n", "", "outputs_A", "=", "outputs_A", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "outputs_B", "=", "outputs_B", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "change_mask", "=", "out_change", ".", "cpu", "(", ")", ".", "detach", "(", ")", ">", "0.5", "\n", "change_mask", "=", "change_mask", ".", "squeeze", "(", ")", "\n", "pred_A", "=", "torch", ".", "argmax", "(", "outputs_A", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "pred_B", "=", "torch", ".", "argmax", "(", "outputs_B", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "intermediate", ":", "\n", "            ", "pred_A_path", "=", "os", ".", "path", ".", "join", "(", "pred_mA_dir", ",", "mask_name", ")", "\n", "pred_B_path", "=", "os", ".", "path", ".", "join", "(", "pred_mB_dir", ",", "mask_name", ")", "\n", "pred_change_path", "=", "os", ".", "path", ".", "join", "(", "pred_change_dir", ",", "mask_name", ")", "\n", "io", ".", "imsave", "(", "pred_A_path", ",", "RS", ".", "Index2Color", "(", "pred_A", ".", "numpy", "(", ")", ")", ")", "\n", "io", ".", "imsave", "(", "pred_B_path", ",", "RS", ".", "Index2Color", "(", "pred_B", ".", "numpy", "(", ")", ")", ")", "\n", "change_map", "=", "exposure", ".", "rescale_intensity", "(", "change_mask", ".", "numpy", "(", ")", ",", "'image'", ",", "'dtype'", ")", "\n", "io", ".", "imsave", "(", "pred_change_path", ",", "change_map", ")", "\n", "", "pred_A", "=", "(", "pred_A", "*", "change_mask", ".", "long", "(", ")", ")", ".", "numpy", "(", ")", "\n", "pred_B", "=", "(", "pred_B", "*", "change_mask", ".", "long", "(", ")", ")", ".", "numpy", "(", ")", "\n", "pred_A_path", "=", "os", ".", "path", ".", "join", "(", "pred_A_dir_rgb", ",", "mask_name", ")", "\n", "pred_B_path", "=", "os", ".", "path", ".", "join", "(", "pred_B_dir_rgb", ",", "mask_name", ")", "\n", "io", ".", "imsave", "(", "pred_A_path", ",", "RS", ".", "Index2Color", "(", "pred_A", ")", ")", "\n", "io", ".", "imsave", "(", "pred_B_path", ",", "RS", ".", "Index2Color", "(", "pred_B", ")", ")", "\n", "print", "(", "pred_A_path", ")", "\n", "if", "index_map", ":", "\n", "            ", "pred_A_path", "=", "os", ".", "path", ".", "join", "(", "pred_A_dir", ",", "mask_name", ")", "\n", "pred_B_path", "=", "os", ".", "path", ".", "join", "(", "pred_B_dir", ",", "mask_name", ")", "\n", "io", ".", "imsave", "(", "pred_A_path", ",", "pred_A", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "io", ".", "imsave", "(", "pred_B_path", ",", "pred_B", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.pred_SCD.predict_direct": [[163, 230], ["os.path.join", "os.path.join", "enumerate", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "imgs_A.cuda().float.cuda().float", "imgs_B.cuda().float.cuda().float", "pred_set.get_mask_name", "F.softmax.cpu().detach", "F.softmax.cpu().detach", "torch.argmax", "torch.argmax", "pred_A.squeeze().numpy().astype.squeeze().numpy().astype", "pred_B.squeeze().numpy().astype.squeeze().numpy().astype", "os.path.join", "os.path.join", "skimage.io.imsave", "skimage.io.imsave", "print", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "torch.no_grad", "net", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.flip", "torch.flip", "net", "torch.flip", "torch.flip", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.flip", "torch.flip", "net", "torch.flip", "torch.flip", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.flip", "torch.flip", "net", "torch.flip", "torch.flip", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "datasets.RS_ST.Index2Color", "datasets.RS_ST.Index2Color", "os.path.join", "os.path.join", "skimage.io.imsave", "skimage.io.imsave", "imgs_A.cuda().float.cuda", "imgs_B.cuda().float.cuda", "F.softmax.cpu", "F.softmax.cpu", "pred_A.squeeze().numpy().astype.squeeze().numpy", "pred_B.squeeze().numpy().astype.squeeze().numpy", "pred_A.squeeze().numpy().astype.astype", "pred_B.squeeze().numpy().astype.astype", "pred_A.squeeze().numpy().astype.squeeze", "pred_B.squeeze().numpy().astype.squeeze"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Data_test.get_mask_name", "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Index2Color", "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Index2Color"], ["", "", "", "def", "predict_direct", "(", "net", ",", "pred_set", ",", "pred_loader", ",", "pred_dir", ",", "flip", "=", "False", ",", "index_map", "=", "False", ",", ")", ":", "\n", "    ", "pred_A_dir_rgb", "=", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "'im1_rgb'", ")", "\n", "pred_B_dir_rgb", "=", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "'im2_rgb'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pred_A_dir_rgb", ")", ":", "os", ".", "makedirs", "(", "pred_A_dir_rgb", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pred_B_dir_rgb", ")", ":", "os", ".", "makedirs", "(", "pred_B_dir_rgb", ")", "\n", "if", "index_map", ":", "\n", "        ", "pred_A_dir", "=", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "'im1'", ")", "\n", "pred_B_dir", "=", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "'im2'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pred_A_dir", ")", ":", "os", ".", "makedirs", "(", "pred_A_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pred_B_dir", ")", ":", "os", ".", "makedirs", "(", "pred_B_dir", ")", "\n", "\n", "", "for", "vi", ",", "data", "in", "enumerate", "(", "pred_loader", ")", ":", "\n", "        ", "imgs_A", ",", "imgs_B", "=", "data", "\n", "#imgs = torch.cat([imgs_A, imgs_B], 1)", "\n", "imgs_A", "=", "imgs_A", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "imgs_B", "=", "imgs_B", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "mask_name", "=", "pred_set", ".", "get_mask_name", "(", "vi", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs_A", ",", "outputs_B", "=", "net", "(", "imgs_A", ",", "imgs_B", ")", "#,aux", "\n", "", "if", "flip", ":", "\n", "            ", "outputs_A", "=", "F", ".", "softmax", "(", "outputs_A", ",", "dim", "=", "1", ")", "\n", "outputs_B", "=", "F", ".", "softmax", "(", "outputs_B", ",", "dim", "=", "1", ")", "\n", "\n", "imgs_A_v", "=", "torch", ".", "flip", "(", "imgs_A", ",", "[", "2", "]", ")", "\n", "imgs_B_v", "=", "torch", ".", "flip", "(", "imgs_B", ",", "[", "2", "]", ")", "\n", "outputs_A_v", ",", "outputs_B_v", "=", "net", "(", "imgs_A_v", ",", "imgs_B_v", ")", "\n", "outputs_A_v", "=", "torch", ".", "flip", "(", "outputs_A_v", ",", "[", "2", "]", ")", "\n", "outputs_B_v", "=", "torch", ".", "flip", "(", "outputs_B_v", ",", "[", "2", "]", ")", "\n", "outputs_A", "+=", "F", ".", "softmax", "(", "outputs_A_v", ",", "dim", "=", "1", ")", "\n", "outputs_B", "+=", "F", ".", "softmax", "(", "outputs_B_v", ",", "dim", "=", "1", ")", "\n", "\n", "imgs_A_h", "=", "torch", ".", "flip", "(", "imgs_A", ",", "[", "3", "]", ")", "\n", "imgs_B_h", "=", "torch", ".", "flip", "(", "imgs_B", ",", "[", "3", "]", ")", "\n", "outputs_A_h", ",", "outputs_B_h", "=", "net", "(", "imgs_A_h", ",", "imgs_B_h", ")", "\n", "outputs_A_h", "=", "torch", ".", "flip", "(", "outputs_A_h", ",", "[", "3", "]", ")", "\n", "outputs_B_h", "=", "torch", ".", "flip", "(", "outputs_B_h", ",", "[", "3", "]", ")", "\n", "outputs_A", "+=", "F", ".", "softmax", "(", "outputs_A_h", ",", "dim", "=", "1", ")", "\n", "outputs_B", "+=", "F", ".", "softmax", "(", "outputs_B_h", ",", "dim", "=", "1", ")", "\n", "\n", "imgs_A_hv", "=", "torch", ".", "flip", "(", "imgs_A", ",", "[", "2", ",", "3", "]", ")", "\n", "imgs_B_hv", "=", "torch", ".", "flip", "(", "imgs_B", ",", "[", "2", ",", "3", "]", ")", "\n", "outputs_A_hv", ",", "outputs_B_hv", "=", "net", "(", "imgs_A_hv", ",", "imgs_B_hv", ")", "\n", "outputs_A_hv", "=", "torch", ".", "flip", "(", "outputs_A_hv", ",", "[", "2", ",", "3", "]", ")", "\n", "outputs_B_hv", "=", "torch", ".", "flip", "(", "outputs_B_hv", ",", "[", "2", ",", "3", "]", ")", "\n", "outputs_A", "+=", "F", ".", "softmax", "(", "outputs_A_hv", ",", "dim", "=", "1", ")", "\n", "outputs_B", "+=", "F", ".", "softmax", "(", "outputs_B_hv", ",", "dim", "=", "1", ")", "\n", "\n", "", "outputs_A", "=", "outputs_A", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "outputs_B", "=", "outputs_B", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "pred_A", "=", "torch", ".", "argmax", "(", "outputs_A", ",", "dim", "=", "1", ")", "\n", "pred_B", "=", "torch", ".", "argmax", "(", "outputs_B", ",", "dim", "=", "1", ")", "\n", "pred_A", "=", "pred_A", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "pred_B", "=", "pred_B", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "pred_A_path", "=", "os", ".", "path", ".", "join", "(", "pred_A_dir_rgb", ",", "mask_name", ")", "\n", "pred_B_path", "=", "os", ".", "path", ".", "join", "(", "pred_B_dir_rgb", ",", "mask_name", ")", "\n", "io", ".", "imsave", "(", "pred_A_path", ",", "RS", ".", "Index2Color", "(", "pred_A", ")", ")", "\n", "io", ".", "imsave", "(", "pred_B_path", ",", "RS", ".", "Index2Color", "(", "pred_B", ")", ")", "\n", "print", "(", "pred_A_path", ")", "\n", "if", "index_map", ":", "\n", "            ", "pred_A_path", "=", "os", ".", "path", ".", "join", "(", "pred_A_dir", ",", "mask_name", ")", "\n", "pred_B_path", "=", "os", ".", "path", ".", "join", "(", "pred_B_dir", ",", "mask_name", ")", "\n", "io", ".", "imsave", "(", "pred_A_path", ",", "pred_A", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "io", ".", "imsave", "(", "pred_B_path", ",", "pred_B", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "'''\n        change_path = os.path.join(pred_dir, 'change', mask_name)\n        io.imsave(change_path, (change_mask*255).astype(np.uint8))'''", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.FCN.__init__": [[15, 35], ["torch.Module.__init__", "torchvision.models.resnet34", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.weight.data[].copy_", "torch.Sequential", "torch.Sequential", "BiSRNet.FCN.layer3.named_modules", "BiSRNet.FCN.layer4.named_modules", "torch.Conv2d.weight.data[].copy_"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "FCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet", "=", "models", ".", "resnet34", "(", "pretrained", ")", "\n", "newconv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "newconv1", ".", "weight", ".", "data", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ".", "copy_", "(", "resnet", ".", "conv1", ".", "weight", ".", "data", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "if", "in_channels", ">", "3", ":", "\n", "          ", "newconv1", ".", "weight", ".", "data", "[", ":", ",", "3", ":", "in_channels", ",", ":", ",", ":", "]", ".", "copy_", "(", "resnet", ".", "conv1", ".", "weight", ".", "data", "[", ":", ",", "0", ":", "in_channels", "-", "3", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "newconv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ")", "\n", "self", ".", "maxpool", "=", "resnet", ".", "maxpool", "\n", "self", ".", "layer1", "=", "resnet", ".", "layer1", "\n", "self", ".", "layer2", "=", "resnet", ".", "layer2", "\n", "self", ".", "layer3", "=", "resnet", ".", "layer3", "\n", "self", ".", "layer4", "=", "resnet", ".", "layer4", "\n", "for", "n", ",", "m", "in", "self", ".", "layer3", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'conv1'", "in", "n", "or", "'downsample.0'", "in", "n", ":", "\n", "                ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "for", "n", ",", "m", "in", "self", ".", "layer4", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'conv1'", "in", "n", "or", "'downsample.0'", "in", "n", ":", "\n", "                ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.FCN._make_layer": [[36, 49], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "BiSRNet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "inplanes", ",", "planes", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.ResBlock.__init__": [[52, 61], ["torch.Module.__init__", "BiSRNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "BiSRNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.conv3x3", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.ResBlock.forward": [[62, 79], ["BiSRNet.ResBlock.conv1", "BiSRNet.ResBlock.bn1", "BiSRNet.ResBlock.relu", "BiSRNet.ResBlock.conv2", "BiSRNet.ResBlock.bn2", "BiSRNet.ResBlock.relu", "BiSRNet.ResBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.DecoderBlock.__init__": [[81, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "n_filters", ")", ":", "\n", "        ", "super", "(", "DecoderBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", "//", "4", ",", "1", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", "//", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "//", "4", ",", "in_channels", "//", "4", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", "//", "4", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "//", "4", ",", "n_filters", ",", "1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "BatchNorm2d", "(", "n_filters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.DecoderBlock.forward": [[94, 105], ["BiSRNet.DecoderBlock.conv1", "BiSRNet.DecoderBlock.norm1", "BiSRNet.DecoderBlock.relu", "BiSRNet.DecoderBlock.deconv2", "BiSRNet.DecoderBlock.norm2", "BiSRNet.DecoderBlock.relu", "BiSRNet.DecoderBlock.conv3", "BiSRNet.DecoderBlock.norm3", "BiSRNet.DecoderBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "deconv2", "(", "x", ")", "\n", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "norm3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.SR.__init__": [[109, 119], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "SR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "\n", "self", ".", "query_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "key_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "value_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.SR.forward": [[120, 138], ["x.size", "BiSRNet.SR.query_conv().view().permute", "BiSRNet.SR.key_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "BiSRNet.SR.softmax", "BiSRNet.SR.value_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "BiSRNet.SR.permute", "BiSRNet.SR.query_conv().view", "BiSRNet.SR.key_conv", "BiSRNet.SR.value_conv", "BiSRNet.SR.query_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "''' inputs :\n                x : input feature maps( B X C X H X W)\n            returns :\n                out : attention value + input feature\n                attention: B X (HxW) X (HxW) '''", "\n", "m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "self", ".", "query_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "proj_key", "=", "self", ".", "key_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "attention", "=", "self", ".", "softmax", "(", "energy", ")", "\n", "proj_value", "=", "self", ".", "value_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "proj_value", ",", "attention", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "C", ",", "height", ",", "width", ")", "\n", "out", "=", "x", "+", "self", ".", "gamma", "*", "out", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.CotSR.__init__": [[141, 157], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "CotSR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "\n", "self", ".", "query_conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "key_conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "value_conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "query_conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "key_conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "value_conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "gamma1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "gamma2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.CotSR.forward": [[158, 189], ["x1.size", "BiSRNet.CotSR.query_conv1().view().permute", "BiSRNet.CotSR.key_conv1().view", "BiSRNet.CotSR.value_conv1().view", "BiSRNet.CotSR.query_conv2().view().permute", "BiSRNet.CotSR.key_conv2().view", "BiSRNet.CotSR.value_conv2().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "BiSRNet.CotSR.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out1.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "BiSRNet.CotSR.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out2.view.view.view", "BiSRNet.CotSR.permute", "BiSRNet.CotSR.permute", "BiSRNet.CotSR.query_conv1().view", "BiSRNet.CotSR.key_conv1", "BiSRNet.CotSR.value_conv1", "BiSRNet.CotSR.query_conv2().view", "BiSRNet.CotSR.key_conv2", "BiSRNet.CotSR.value_conv2", "BiSRNet.CotSR.query_conv1", "BiSRNet.CotSR.query_conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "''' inputs :\n                x1 : input feature maps( B X C X H X W)\n                x2 : input feature maps( B X C X H X W)\n            returns :\n                out : attention value + input feature\n                attention: B X (HxW) X (HxW) '''", "\n", "m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x1", ".", "size", "(", ")", "\n", "\n", "q1", "=", "self", ".", "query_conv1", "(", "x1", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "k1", "=", "self", ".", "key_conv1", "(", "x1", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "v1", "=", "self", ".", "value_conv1", "(", "x1", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "\n", "q2", "=", "self", ".", "query_conv2", "(", "x2", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "k2", "=", "self", ".", "key_conv2", "(", "x2", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "v2", "=", "self", ".", "value_conv2", "(", "x2", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "\n", "energy1", "=", "torch", ".", "bmm", "(", "q1", ",", "k2", ")", "\n", "attention1", "=", "self", ".", "softmax", "(", "energy1", ")", "\n", "out1", "=", "torch", ".", "bmm", "(", "v2", ",", "attention1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "out1", "=", "out1", ".", "view", "(", "m_batchsize", ",", "C", ",", "height", ",", "width", ")", "\n", "\n", "energy2", "=", "torch", ".", "bmm", "(", "q2", ",", "k1", ")", "\n", "attention2", "=", "self", ".", "softmax", "(", "energy2", ")", "\n", "out2", "=", "torch", ".", "bmm", "(", "v1", ",", "attention2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "out2", "=", "out2", ".", "view", "(", "m_batchsize", ",", "C", ",", "height", ",", "width", ")", "\n", "\n", "out1", "=", "x1", "+", "self", ".", "gamma1", "*", "out1", "\n", "out2", "=", "x2", "+", "self", ".", "gamma2", "*", "out2", "\n", "\n", "return", "out1", ",", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.BiSRNet.__init__": [[191, 205], ["torch.Module.__init__", "BiSRNet.FCN", "BiSRNet.SR", "BiSRNet.CotSR", "torch.Sequential", "torch.Sequential", "BiSRNet.BiSRNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "utils.misc.initialize_weights", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl._make_layer", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "num_classes", "=", "7", ")", ":", "\n", "        ", "super", "(", "BiSRNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "FCN", "=", "FCN", "(", "in_channels", ",", "pretrained", "=", "True", ")", "\n", "self", ".", "SiamSR", "=", "SR", "(", "128", ")", "\n", "self", ".", "CotSR", "=", "CotSR", "(", "128", ")", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "res1", "=", "self", ".", "_make_layer", "(", "ResBlock", ",", "256", ",", "128", ",", "6", ",", "stride", "=", "1", ")", "\n", "self", ".", "classifier1", "=", "nn", ".", "Conv2d", "(", "128", ",", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "classifier2", "=", "nn", ".", "Conv2d", "(", "128", ",", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "CD", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "kernel_size", "=", "1", ")", ")", "\n", "initialize_weights", "(", "self", ".", "head", ",", "self", ".", "SiamSR", ",", "self", ".", "res1", ",", "self", ".", "CD", ",", "self", ".", "CotSR", ",", "self", ".", "classifier1", ",", "self", ".", "classifier2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.BiSRNet._make_layer": [[206, 220], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "BiSRNet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.conv1x1"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "inplanes", ",", "planes", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.BiSRNet.base_forward": [[221, 233], ["BiSRNet.BiSRNet.FCN.layer0", "BiSRNet.BiSRNet.FCN.maxpool", "BiSRNet.BiSRNet.FCN.layer1", "BiSRNet.BiSRNet.FCN.layer2", "BiSRNet.BiSRNet.FCN.layer3", "BiSRNet.BiSRNet.FCN.layer4", "BiSRNet.BiSRNet.head", "BiSRNet.BiSRNet.SiamSR"], "methods", ["None"], ["", "def", "base_forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "FCN", ".", "layer0", "(", "x", ")", "#size:1/4", "\n", "x", "=", "self", ".", "FCN", ".", "maxpool", "(", "x", ")", "#size:1/4", "\n", "x", "=", "self", ".", "FCN", ".", "layer1", "(", "x", ")", "#size:1/4", "\n", "x", "=", "self", ".", "FCN", ".", "layer2", "(", "x", ")", "#size:1/8", "\n", "x", "=", "self", ".", "FCN", ".", "layer3", "(", "x", ")", "#size:1/16", "\n", "x", "=", "self", ".", "FCN", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "x", "=", "self", ".", "SiamSR", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.BiSRNet.CD_forward": [[234, 240], ["x1.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "BiSRNet.BiSRNet.res1", "BiSRNet.BiSRNet.CD"], "methods", ["None"], ["", "def", "CD_forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x1", ".", "size", "(", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "res1", "(", "x", ")", "\n", "change", "=", "self", ".", "CD", "(", "x", ")", "\n", "return", "change", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.BiSRNet.forward": [[241, 252], ["BiSRNet.BiSRNet.size", "BiSRNet.BiSRNet.base_forward", "BiSRNet.BiSRNet.base_forward", "BiSRNet.BiSRNet.CD_forward", "BiSRNet.BiSRNet.CotSR", "BiSRNet.BiSRNet.classifier1", "BiSRNet.BiSRNet.classifier2", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.base_forward", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.base_forward", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.CD_forward"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x_size", "=", "x1", ".", "size", "(", ")", "\n", "x1", "=", "self", ".", "base_forward", "(", "x1", ")", "\n", "x2", "=", "self", ".", "base_forward", "(", "x2", ")", "\n", "change", "=", "self", ".", "CD_forward", "(", "x1", ",", "x2", ")", "\n", "\n", "x1", ",", "x2", "=", "self", ".", "CotSR", "(", "x1", ",", "x2", ")", "\n", "out1", "=", "self", ".", "classifier1", "(", "x1", ")", "\n", "out2", "=", "self", ".", "classifier2", "(", "x2", ")", "\n", "\n", "return", "F", ".", "upsample", "(", "change", ",", "x_size", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ",", "F", ".", "upsample", "(", "out1", ",", "x_size", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ",", "F", ".", "upsample", "(", "out2", ",", "x_size", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.conv1x1": [[8, 10], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.None.BiSRNet.conv3x3": [[11, 13], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.crf.dense_crf": [[4, 26], ["numpy.expand_dims", "numpy.append", "pydensecrf.DenseCRF2D", "np.ascontiguousarray.reshape", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "dcrf.DenseCRF2D.setUnaryEnergy", "dcrf.DenseCRF2D.addPairwiseGaussian", "dcrf.DenseCRF2D.addPairwiseBilateral", "dcrf.DenseCRF2D.inference", "numpy.argmax().reshape", "numpy.log", "numpy.argmax", "numpy.array"], "function", ["None"], ["def", "dense_crf", "(", "img", ",", "output_probs", ")", ":", "\n", "    ", "h", "=", "output_probs", ".", "shape", "[", "0", "]", "\n", "w", "=", "output_probs", ".", "shape", "[", "1", "]", "\n", "\n", "output_probs", "=", "np", ".", "expand_dims", "(", "output_probs", ",", "0", ")", "\n", "output_probs", "=", "np", ".", "append", "(", "1", "-", "output_probs", ",", "output_probs", ",", "axis", "=", "0", ")", "\n", "\n", "d", "=", "dcrf", ".", "DenseCRF2D", "(", "w", ",", "h", ",", "2", ")", "\n", "U", "=", "-", "np", ".", "log", "(", "output_probs", ")", "\n", "U", "=", "U", ".", "reshape", "(", "(", "2", ",", "-", "1", ")", ")", "\n", "U", "=", "np", ".", "ascontiguousarray", "(", "U", ")", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ")", "\n", "\n", "d", ".", "setUnaryEnergy", "(", "U", ")", "\n", "\n", "d", ".", "addPairwiseGaussian", "(", "sxy", "=", "20", ",", "compat", "=", "3", ")", "\n", "d", ".", "addPairwiseBilateral", "(", "sxy", "=", "30", ",", "srgb", "=", "20", ",", "rgbim", "=", "img", ",", "compat", "=", "10", ")", "\n", "\n", "Q", "=", "d", ".", "inference", "(", "5", ")", "\n", "Q", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "Q", ")", ",", "axis", "=", "0", ")", ".", "reshape", "(", "(", "h", ",", "w", ")", ")", "\n", "\n", "return", "Q", "\n", "", ""]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval.eval_net": [[8, 35], ["net.eval", "len", "enumerate", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().long", "torch.from_numpy().unsqueeze().long", "torch.from_numpy().unsqueeze().long", "net", "torch.CrossEntropyLoss", "loss.", "loss.item", "img.cuda.cuda", "label.cuda.cuda", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["def", "eval_net", "(", "net", ",", "dataset", ",", "gpu", "=", "True", ")", ":", "\n", "    ", "\"\"\"Evaluation without the densecrf with the dice coefficient\"\"\"", "\n", "net", ".", "eval", "(", ")", "\n", "tot", "=", "0", "\n", "n", "=", "len", "(", "dataset", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "dataset", ")", ":", "\n", "# img = b[0]", "\n", "# true_mask = b[1]", "\n", "# img = torch.from_numpy(img).unsqueeze(0)", "\n", "# true_mask = torch.from_numpy(true_mask).unsqueeze(0)", "\n", "#", "\n", "# if gpu:", "\n", "#     img = img.cuda()", "\n", "#     true_mask = true_mask.cuda()", "\n", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "b", "[", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "b", "[", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "long", "(", ")", "\n", "if", "gpu", ":", "\n", "            ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "cuda", "(", ")", "\n", "\n", "", "pred", "=", "net", "(", "img", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss", "(", "pred", ",", "label", ")", "\n", "\n", "tot", "+=", "loss", ".", "item", "(", ")", "\n", "", "return", "tot", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval.eval_net_BCE": [[36, 65], ["net.eval", "len", "enumerate", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze().float", "net", "net.view", "labels.view", "torch.BCEWithLogitsLoss", "loss.", "loss.item", "img.cuda.cuda", "label.cuda.cuda", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "eval_net_BCE", "(", "net", ",", "dataset", ",", "gpu", "=", "True", ")", ":", "\n", "    ", "\"\"\"Evaluation without the densecrf with the dice coefficient\"\"\"", "\n", "net", ".", "eval", "(", ")", "\n", "tot", "=", "0", "\n", "n", "=", "len", "(", "dataset", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "dataset", ")", ":", "\n", "# img = b[0]", "\n", "# true_mask = b[1]", "\n", "# img = torch.from_numpy(img).unsqueeze(0)", "\n", "# true_mask = torch.from_numpy(true_mask).unsqueeze(0)", "\n", "#", "\n", "# if gpu:", "\n", "#     img = img.cuda()", "\n", "#     true_mask = true_mask.cuda()", "\n", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "b", "[", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "b", "[", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", "\n", "if", "gpu", ":", "\n", "            ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "cuda", "(", ")", "\n", "\n", "", "pred", "=", "net", "(", "img", ")", "\n", "pred_flat", "=", "pred", ".", "view", "(", "-", "1", ")", "\n", "labels_flat", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "loss", "=", "loss", "(", "pred_flat", ",", "labels_flat", ")", "\n", "\n", "tot", "+=", "loss", ".", "item", "(", ")", "\n", "", "return", "tot", "/", "n", "\n", "", ""]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.get_ids": [[23, 26], ["os.listdir"], "function", ["None"], ["", "def", "get_ids", "(", "dir", ")", ":", "\n", "    ", "\"\"\"Returns a list of the ids in the directory\"\"\"", "\n", "return", "(", "f", "[", ":", "-", "4", "]", "for", "f", "in", "os", ".", "listdir", "(", "dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.split_ids": [[28, 31], ["range"], "function", ["None"], ["", "def", "split_ids", "(", "ids", ",", "n", "=", "2", ")", ":", "\n", "    ", "\"\"\"Split each id in n, creating n tuples (id, k) for each id\"\"\"", "\n", "return", "(", "(", "id", ",", "i", ")", "for", "i", "in", "range", "(", "n", ")", "for", "id", "in", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.to_cropped_imgs": [[33, 38], ["utils.resize_and_crop", "PIL.Image.open", "utils.get_square"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.resize_and_crop", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.get_square"], ["", "def", "to_cropped_imgs", "(", "ids", ",", "dir", ",", "suffix", ",", "scale", ")", ":", "\n", "    ", "\"\"\"From a list of tuples, returns the correct cropped img\"\"\"", "\n", "for", "id", ",", "pos", "in", "ids", ":", "\n", "        ", "im", "=", "resize_and_crop", "(", "Image", ".", "open", "(", "dir", "+", "id", "+", "suffix", ")", ",", "scale", "=", "scale", ")", "\n", "yield", "get_square", "(", "im", ",", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.get_imgs_and_masks": [[39, 65], ["print", "load.DataAug", "print", "list", "data.append", "labels.append", "imgs_switched.append", "labels_index.append", "zip", "numpy.array", "numpy.array", "len", "len", "utils.hwc_to_chw", "load.Color2Index0", "PIL.Image.open", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.DataAug", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.hwc_to_chw", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.Color2Index0"], ["", "", "def", "get_imgs_and_masks", "(", "ids", ",", "dir_img", ",", "dir_label", ",", "crop_size", ")", ":", "\n", "    ", "\"\"\"Return all the couples (img, mask)\"\"\"", "\n", "data", ",", "labels", "=", "[", "]", ",", "[", "]", "\n", "for", "id", ",", "pos", "in", "ids", ":", "\n", "        ", "fPath", "=", "dir_img", "+", "id", "+", "'.png'", "\n", "lPath", "=", "dir_label", "+", "id", "+", "'.png'", "\n", "data", ".", "append", "(", "np", ".", "array", "(", "Image", ".", "open", "(", "fPath", ")", ")", ")", "\n", "labels", ".", "append", "(", "np", ".", "array", "(", "Image", ".", "open", "(", "lPath", ")", ")", ")", "\n", "", "print", "(", "'%d images loaded.'", "%", "len", "(", "data", ")", ")", "\n", "\n", "data", ",", "labels", "=", "DataAug", "(", "data", ",", "labels", ",", "crop_size", ")", "\n", "print", "(", "'Image augment done. %d Images created.'", "%", "len", "(", "data", ")", ")", "\n", "# need to transform from HWC to CHW", "\n", "# imgs_switched = map(hwc_to_chw, data)", "\n", "imgs_switched", "=", "[", "]", "\n", "for", "im", "in", "data", ":", "\n", "        ", "imgs_switched", ".", "append", "(", "hwc_to_chw", "(", "im", ")", ")", "\n", "# for i in range(data.shape[0]):", "\n", "#     print(data[i].shape)", "\n", "# imgs_normalized = map(normalize, imgs_switched)", "\n", "\n", "", "labels_index", "=", "[", "]", "\n", "for", "label", "in", "labels", ":", "\n", "        ", "labels_index", ".", "append", "(", "Color2Index0", "(", "label", ",", "colormap2label", ")", ")", "\n", "\n", "", "return", "list", "(", "zip", "(", "imgs_switched", ",", "labels_index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.get_binary_imgs_and_masks": [[66, 88], ["print", "load.DataAug_1C", "print", "list", "data.append", "labels.append", "imgs_switched.append", "labels_index.append", "zip", "numpy.array", "numpy.asarray", "len", "len", "numpy.expand_dims", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.DataAug_1C"], ["", "def", "get_binary_imgs_and_masks", "(", "ids", ",", "dir_img", ",", "dir_label", ",", "crop_size", ")", ":", "\n", "    ", "\"\"\"Return all the couples (img, mask)\"\"\"", "\n", "data", ",", "labels", "=", "[", "]", ",", "[", "]", "\n", "for", "id", ",", "pos", "in", "ids", ":", "\n", "        ", "fPath", "=", "dir_img", "+", "id", "+", "'.png'", "\n", "lPath", "=", "dir_label", "+", "id", "+", "'.png'", "\n", "data", ".", "append", "(", "np", ".", "array", "(", "Image", ".", "open", "(", "fPath", ")", ".", "convert", "(", "\"L\"", ")", ")", ")", "\n", "labels", ".", "append", "(", "np", ".", "asarray", "(", "Image", ".", "open", "(", "lPath", ")", ".", "convert", "(", "\"L\"", ")", ")", ")", "\n", "", "print", "(", "'%d images loaded.'", "%", "len", "(", "data", ")", ")", "\n", "\n", "data", ",", "labels", "=", "DataAug_1C", "(", "data", ",", "labels", ",", "crop_size", ")", "\n", "print", "(", "'Image augment done. %d Images created.'", "%", "len", "(", "data", ")", ")", "\n", "\n", "imgs_switched", "=", "[", "]", "\n", "for", "im", "in", "data", ":", "\n", "        ", "imgs_switched", ".", "append", "(", "np", ".", "expand_dims", "(", "im", ",", "0", ")", ")", "\n", "\n", "", "labels_index", "=", "[", "]", "\n", "for", "label", "in", "labels", ":", "\n", "        ", "labels_index", ".", "append", "(", "label", "/", "255", ")", "\n", "\n", "", "return", "list", "(", "zip", "(", "imgs_switched", ",", "labels_index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.read_images": [[89, 98], ["len", "PIL.Image.open", "PIL.Image.open"], "function", ["None"], ["", "def", "read_images", "(", "ids", ",", "dir_img", ",", "dir_label", ")", ":", "\n", "    ", "n", "=", "len", "(", "Img_fileList", ")", "\n", "data", ",", "label", "=", "[", "None", "]", "*", "n", ",", "[", "None", "]", "*", "n", "\n", "for", "id", ",", "pos", "in", "ids", ":", "\n", "        ", "fPath", "=", "dir_img", "+", "id", "+", "suffix", "\n", "lPath", "=", "dir_label", "+", "id", "+", "suffix", "\n", "data", "[", "i", "]", "=", "Image", ".", "open", "(", "fPath", ")", "\n", "label", "[", "i", "]", "=", "Image", ".", "open", "(", "lPath", ")", "\n", "", "return", "data", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.DataAug": [[99, 127], ["load.create_crops", "load.create_crops", "range", "len", "numpy.concatenate", "numpy.concatenate", "load.create_crops", "load.create_crops"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.create_crops", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.create_crops", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.create_crops", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.create_crops"], ["", "def", "DataAug", "(", "data", ",", "labels", ",", "size", ")", ":", "\n", "    ", "crop_imgs", "=", "create_crops", "(", "data", "[", "0", "]", ",", "size", ")", "\n", "crop_labels", "=", "create_crops", "(", "labels", "[", "0", "]", ",", "size", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "data", ")", ")", ":", "\n", "        ", "crop_imgs", "=", "np", ".", "concatenate", "(", "(", "crop_imgs", ",", "create_crops", "(", "data", "[", "i", "]", ",", "size", ")", ")", ",", "axis", "=", "0", ")", "\n", "crop_labels", "=", "np", ".", "concatenate", "(", "(", "crop_labels", ",", "create_crops", "(", "labels", "[", "i", "]", ",", "size", ")", ")", ",", "axis", "=", "0", ")", "\n", "# crop_imgs = []", "\n", "# crop_labels = []", "\n", "# aug_times = []", "\n", "# ten_crop_imgs = []", "\n", "# ten_crop_labels = []", "\n", "# for i in range(len(data)):", "\n", "#     h_rate = data[i].shape[0]/size[0]", "\n", "#     w_rate = data[i].shape[1]/size[1]", "\n", "#     aug_time = min(h_rate,w_rate)*2", "\n", "#     print(aug_time)", "\n", "#     if (aug_time<1.5): aug_time=8", "\n", "#     elif (aug_time<2): aug_time=10", "\n", "#     else: aug_time=18", "\n", "#     aug_times.append(aug_time)", "\n", "#     ten_crop_imgs.append(ten_crop(data[i], size))", "\n", "#     ten_crop_labels.append(ten_crop(labels[i], size))", "\n", "# for t in range(max(aug_times)):", "\n", "#     for i in range(len(data)):", "\n", "#         if(aug_times[i]>t):", "\n", "#             crop_imgs.append(ten_crop_imgs[i][t])", "\n", "#             crop_labels.append(ten_crop_labels[i][t])", "\n", "", "return", "crop_imgs", ",", "crop_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.DataAug_1C": [[128, 156], ["load.create_crops_1C", "load.create_crops_1C", "range", "len", "numpy.concatenate", "numpy.concatenate", "load.create_crops_1C", "load.create_crops_1C"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.create_crops_1C", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.create_crops_1C", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.create_crops_1C", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.create_crops_1C"], ["", "def", "DataAug_1C", "(", "data", ",", "labels", ",", "size", ")", ":", "\n", "    ", "crop_imgs", "=", "create_crops_1C", "(", "data", "[", "0", "]", ",", "size", ")", "\n", "crop_labels", "=", "create_crops_1C", "(", "labels", "[", "0", "]", ",", "size", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "data", ")", ")", ":", "\n", "        ", "crop_imgs", "=", "np", ".", "concatenate", "(", "(", "crop_imgs", ",", "create_crops_1C", "(", "data", "[", "i", "]", ",", "size", ")", ")", ",", "axis", "=", "0", ")", "\n", "crop_labels", "=", "np", ".", "concatenate", "(", "(", "crop_labels", ",", "create_crops_1C", "(", "labels", "[", "i", "]", ",", "size", ")", ")", ",", "axis", "=", "0", ")", "\n", "# crop_imgs = []", "\n", "# crop_labels = []", "\n", "# aug_times = []", "\n", "# ten_crop_imgs = []", "\n", "# ten_crop_labels = []", "\n", "# for i in range(len(data)):", "\n", "#     h_rate = data[i].shape[0]/size[0]", "\n", "#     w_rate = data[i].shape[1]/size[1]", "\n", "#     aug_time = min(h_rate,w_rate)*2", "\n", "#     print(aug_time)", "\n", "#     if (aug_time<1.5): aug_time=8", "\n", "#     elif (aug_time<2): aug_time=10", "\n", "#     else: aug_time=18", "\n", "#     aug_times.append(aug_time)", "\n", "#     ten_crop_imgs.append(ten_crop(data[i], size))", "\n", "#     ten_crop_labels.append(ten_crop(labels[i], size))", "\n", "# for t in range(max(aug_times)):", "\n", "#     for i in range(len(data)):", "\n", "#         if(aug_times[i]>t):", "\n", "#             crop_imgs.append(ten_crop_imgs[i][t])", "\n", "#             crop_labels.append(ten_crop_labels[i][t])", "\n", "", "return", "crop_imgs", ",", "crop_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.Color2Index": [[157, 165], ["numpy.zeros", "enumerate", "data.astype.astype"], "function", ["None"], ["", "def", "Color2Index", "(", "ColorLabels", ",", "colormap2label", ")", ":", "\n", "    ", "IndexLabels", "=", "np", ".", "zeros", "(", "ColorLabels", ".", "shape", "[", "0", "]", ",", "ColorLabels", ".", "shape", "[", "1", "]", ",", "\n", "ColorLabels", ".", "shape", "[", "2", "]", ",", "1", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "ColorLabels", ")", ":", "\n", "        ", "data", "=", "data", ".", "astype", "(", "'int32'", ")", "\n", "idx", "=", "(", "data", "[", ":", ",", ":", ",", "0", "]", "*", "256", "+", "data", "[", ":", ",", ":", ",", "1", "]", ")", "*", "256", "+", "data", "[", ":", ",", ":", ",", "2", "]", "\n", "IndexLabels", "[", "i", "]", "=", "colormap2label", "[", "idx", "]", "\n", "", "return", "IndexLabels", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.Color2Index0": [[166, 170], ["ColorLabel.astype"], "function", ["None"], ["", "def", "Color2Index0", "(", "ColorLabel", ",", "colormap2label", ")", ":", "\n", "    ", "data", "=", "ColorLabel", ".", "astype", "(", "'int32'", ")", "\n", "idx", "=", "(", "data", "[", ":", ",", ":", ",", "0", "]", "*", "256", "+", "data", "[", ":", ",", ":", ",", "1", "]", ")", "*", "256", "+", "data", "[", ":", ",", ":", ",", "2", "]", "\n", "return", "colormap2label", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.Index2Color": [[171, 174], ["pred.astype"], "function", ["None"], ["", "def", "Index2Color", "(", "pred", ",", "colormap2label", ")", ":", "\n", "    ", "x", "=", "pred", ".", "astype", "(", "'int32'", ")", "\n", "return", "colormap2label", "[", "x", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.ten_crop": [[175, 237], ["cv2.flip", "cv2.flip", "cv2.flip", "cv2.flip", "cv2.flip", "print", "print", "print", "print", "numpy.stack", "ValueError", "str"], "function", ["None"], ["", "def", "ten_crop", "(", "src", ",", "size", ")", ":", "\n", "    ", "\"\"\"Crop 10 regions from an array.\n    This is performed same as:\n    http://chainercv.readthedocs.io/en/stable/reference/transforms.html#ten-crop\n\n    This method crops 10 regions. All regions will be in shape\n    :obj`size`. These regions consist of 1 center crop and 4 corner\n    crops and horizontal flips of them.\n    The crops are ordered in this order.\n    * center crop\n    * top-left crop\n    * bottom-right crop\n    * top-right crop\n    * bottom-left crop\n    * center crop (flipped horizontally)\n    * top-left crop (flipped horizontally)\n    * bottom-left crop (flipped horizontally)\n    * top-right crop (flipped horizontally)\n    * bottom-right crop (flipped horizontally)\n\n    Parameters\n    ----------\n    src : Numpy array\n        Input image.\n    size : tuple\n        Tuple of length 2, as (width, height) of the cropped areas.\n\n    Returns\n    -------\n    mxnet.nd.NDArray\n        The cropped images with shape (10, size[1], size[0], C)\n\n    \"\"\"", "\n", "h", ",", "w", ",", "_", "=", "src", ".", "shape", "\n", "ow", ",", "oh", "=", "size", "\n", "\n", "if", "h", "<", "oh", "or", "w", "<", "ow", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Cannot crop area {} from image with size ({}, {})\"", ".", "format", "(", "str", "(", "size", ")", ",", "h", ",", "w", ")", ")", "\n", "\n", "# h=int(h)", "\n", "# w = int(w)", "\n", "# ow = int(ow)", "\n", "# oh = int(oh)", "\n", "\n", "", "tl", "=", "src", "[", "0", ":", "oh", ",", "0", ":", "ow", ",", ":", "]", "\n", "bl", "=", "src", "[", "h", "-", "oh", ":", "h", ",", "0", ":", "ow", ",", ":", "]", "\n", "tr", "=", "src", "[", "0", ":", "oh", ",", "w", "-", "ow", ":", "w", ",", ":", "]", "\n", "br", "=", "src", "[", "h", "-", "oh", ":", "h", ",", "w", "-", "ow", ":", "w", ",", ":", "]", "\n", "center", "=", "src", "[", "(", "h", "-", "oh", ")", "//", "2", ":", "(", "h", "+", "oh", ")", "//", "2", ",", "(", "w", "-", "ow", ")", "//", "2", ":", "(", "w", "+", "ow", ")", "//", "2", ",", ":", "]", "\n", "\n", "tl_f", "=", "cv2", ".", "flip", "(", "tl", ",", "-", "1", ")", "\n", "bl_f", "=", "cv2", ".", "flip", "(", "bl", ",", "-", "1", ")", "\n", "tr_f", "=", "cv2", ".", "flip", "(", "tr", ",", "-", "1", ")", "\n", "br_f", "=", "cv2", ".", "flip", "(", "br", ",", "-", "1", ")", "\n", "center_f", "=", "cv2", ".", "flip", "(", "center", ",", "-", "1", ")", "\n", "print", "(", "center_f", ".", "shape", ")", "\n", "print", "(", "center_rf", ".", "shape", ")", "\n", "print", "(", "center_tf", ".", "shape", ")", "\n", "print", "(", "center_bf", ".", "shape", ")", "\n", "crops", "=", "np", ".", "stack", "(", "[", "tl", ",", "br", ",", "tr", ",", "bl", ",", "tl_f", ",", "br_f", ",", "tr_f", ",", "bl_f", ",", "center", ",", "center_f", "]", ",", "axis", "=", "0", ")", "\n", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.create_crops": [[238, 274], ["math.ceil", "math.ceil", "math.ceil", "math.ceil", "range", "numpy.concatenate", "ValueError", "range", "crop_imgs_f.append", "int", "int", "crop_imgs.append", "cv2.flip", "numpy.array", "numpy.array", "str"], "function", ["None"], ["", "def", "create_crops", "(", "img", ",", "size", ")", ":", "\n", "# print(img.shape)", "\n", "    ", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "c_h", "=", "size", "[", "0", "]", "\n", "c_w", "=", "size", "[", "1", "]", "\n", "if", "h", "<", "c_h", "or", "w", "<", "c_w", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Cannot crop area {} from image with size ({}, {})\"", ".", "format", "(", "str", "(", "size", ")", ",", "h", ",", "w", ")", ")", "\n", "\n", "", "h_rate", "=", "h", "/", "c_h", "\n", "w_rate", "=", "w", "/", "c_w", "\n", "h_times", "=", "math", ".", "ceil", "(", "h_rate", ")", "\n", "w_times", "=", "math", ".", "ceil", "(", "w_rate", ")", "\n", "stride_h", "=", "math", ".", "ceil", "(", "c_h", "*", "(", "h_times", "-", "h_rate", ")", "/", "(", "h_times", "-", "1", ")", ")", "\n", "stride_w", "=", "math", ".", "ceil", "(", "c_w", "*", "(", "w_times", "-", "w_rate", ")", "/", "(", "w_times", "-", "1", ")", ")", "\n", "crop_imgs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "h_times", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "w_times", ")", ":", "\n", "            ", "s_h", "=", "int", "(", "j", "*", "c_h", "-", "j", "*", "stride_h", ")", "\n", "if", "(", "j", "==", "(", "h_times", "-", "1", ")", ")", ":", "s_h", "=", "h", "-", "c_h", "\n", "e_h", "=", "s_h", "+", "c_h", "\n", "s_w", "=", "int", "(", "i", "*", "c_w", "-", "i", "*", "stride_w", ")", "\n", "if", "(", "i", "==", "(", "w_times", "-", "1", ")", ")", ":", "s_w", "=", "w", "-", "c_w", "\n", "e_w", "=", "s_w", "+", "c_w", "\n", "# print('%d %d %d %d'%(s_h, e_h, s_w, e_w))", "\n", "crop_im", "=", "img", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", "\n", "crop_imgs", ".", "append", "(", "crop_im", ")", "\n", "\n", "", "", "crop_imgs_f", "=", "[", "]", "\n", "for", "im", "in", "crop_imgs", ":", "\n", "        ", "crop_imgs_f", ".", "append", "(", "cv2", ".", "flip", "(", "im", ",", "-", "1", ")", ")", "\n", "\n", "", "crops", "=", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "crop_imgs", ")", ",", "np", ".", "array", "(", "crop_imgs_f", ")", ")", ",", "axis", "=", "0", ")", "\n", "# print(crops.shape)", "\n", "return", "crops", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.load.create_crops_1C": [[275, 311], ["math.ceil", "math.ceil", "math.ceil", "math.ceil", "range", "numpy.concatenate", "ValueError", "range", "crop_imgs_f.append", "int", "int", "crop_imgs.append", "cv2.flip", "numpy.array", "numpy.array", "str"], "function", ["None"], ["", "def", "create_crops_1C", "(", "img", ",", "size", ")", ":", "\n", "# print(img.shape)", "\n", "    ", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "c_h", "=", "size", "[", "0", "]", "\n", "c_w", "=", "size", "[", "1", "]", "\n", "if", "h", "<", "c_h", "or", "w", "<", "c_w", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Cannot crop area {} from image with size ({}, {})\"", ".", "format", "(", "str", "(", "size", ")", ",", "h", ",", "w", ")", ")", "\n", "\n", "", "h_rate", "=", "h", "/", "c_h", "\n", "w_rate", "=", "w", "/", "c_w", "\n", "h_times", "=", "math", ".", "ceil", "(", "h_rate", ")", "\n", "w_times", "=", "math", ".", "ceil", "(", "w_rate", ")", "\n", "stride_h", "=", "math", ".", "ceil", "(", "c_h", "*", "(", "h_times", "-", "h_rate", ")", "/", "(", "h_times", "-", "1", ")", ")", "\n", "stride_w", "=", "math", ".", "ceil", "(", "c_w", "*", "(", "w_times", "-", "w_rate", ")", "/", "(", "w_times", "-", "1", ")", ")", "\n", "crop_imgs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "h_times", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "w_times", ")", ":", "\n", "            ", "s_h", "=", "int", "(", "j", "*", "c_h", "-", "j", "*", "stride_h", ")", "\n", "if", "(", "j", "==", "(", "h_times", "-", "1", ")", ")", ":", "s_h", "=", "h", "-", "c_h", "\n", "e_h", "=", "s_h", "+", "c_h", "\n", "s_w", "=", "int", "(", "i", "*", "c_w", "-", "i", "*", "stride_w", ")", "\n", "if", "(", "i", "==", "(", "w_times", "-", "1", ")", ")", ":", "s_w", "=", "w", "-", "c_w", "\n", "e_w", "=", "s_w", "+", "c_w", "\n", "# print('%d %d %d %d'%(s_h, e_h, s_w, e_w))", "\n", "crop_im", "=", "img", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", "]", "\n", "crop_imgs", ".", "append", "(", "crop_im", ")", "\n", "\n", "", "", "crop_imgs_f", "=", "[", "]", "\n", "for", "im", "in", "crop_imgs", ":", "\n", "        ", "crop_imgs_f", ".", "append", "(", "cv2", ".", "flip", "(", "im", ",", "-", "1", ")", ")", "\n", "\n", "", "crops", "=", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "crop_imgs", ")", ",", "np", ".", "array", "(", "crop_imgs_f", ")", ")", ",", "axis", "=", "0", ")", "\n", "# print(crops.shape)", "\n", "return", "crops", "\n", "", ""]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.EvalSegErr.__init__": [[179, 181], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.EvalSegErr.__str__": [[182, 184], ["repr"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "value", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.pixel_accuracy": [[12, 38], ["eval_segm.check_size", "eval_segm.extract_classes", "eval_segm.extract_both_masks", "enumerate", "numpy.sum", "numpy.sum", "numpy.logical_and"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.check_size", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.extract_classes", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.extract_both_masks"], ["def", "pixel_accuracy", "(", "eval_segm", ",", "gt_segm", ")", ":", "\n", "    ", "'''\n    sum_i(n_ii) / sum_i(t_i)\n    '''", "\n", "\n", "check_size", "(", "eval_segm", ",", "gt_segm", ")", "\n", "\n", "cl", ",", "n_cl", "=", "extract_classes", "(", "gt_segm", ")", "\n", "eval_mask", ",", "gt_mask", "=", "extract_both_masks", "(", "eval_segm", ",", "gt_segm", ",", "cl", ",", "n_cl", ")", "\n", "\n", "sum_n_ii", "=", "0", "\n", "sum_t_i", "=", "0", "\n", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "cl", ")", ":", "\n", "        ", "curr_eval_mask", "=", "eval_mask", "[", "i", ",", ":", ",", ":", "]", "\n", "curr_gt_mask", "=", "gt_mask", "[", "i", ",", ":", ",", ":", "]", "\n", "\n", "sum_n_ii", "+=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "curr_eval_mask", ",", "curr_gt_mask", ")", ")", "\n", "sum_t_i", "+=", "np", ".", "sum", "(", "curr_gt_mask", ")", "\n", "\n", "", "if", "(", "sum_t_i", "==", "0", ")", ":", "\n", "        ", "pixel_accuracy_", "=", "0", "\n", "", "else", ":", "\n", "        ", "pixel_accuracy_", "=", "sum_n_ii", "/", "sum_t_i", "\n", "\n", "", "return", "pixel_accuracy_", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.mean_accuracy": [[39, 63], ["eval_segm.check_size", "eval_segm.extract_classes", "eval_segm.extract_both_masks", "enumerate", "numpy.mean", "list", "numpy.sum", "numpy.sum", "numpy.logical_and"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.check_size", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.extract_classes", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.extract_both_masks"], ["", "def", "mean_accuracy", "(", "eval_segm", ",", "gt_segm", ")", ":", "\n", "    ", "'''\n    (1/n_cl) sum_i(n_ii/t_i)\n    '''", "\n", "\n", "check_size", "(", "eval_segm", ",", "gt_segm", ")", "\n", "\n", "cl", ",", "n_cl", "=", "extract_classes", "(", "gt_segm", ")", "\n", "eval_mask", ",", "gt_mask", "=", "extract_both_masks", "(", "eval_segm", ",", "gt_segm", ",", "cl", ",", "n_cl", ")", "\n", "\n", "accuracy", "=", "list", "(", "[", "0", "]", ")", "*", "n_cl", "\n", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "cl", ")", ":", "\n", "        ", "curr_eval_mask", "=", "eval_mask", "[", "i", ",", ":", ",", ":", "]", "\n", "curr_gt_mask", "=", "gt_mask", "[", "i", ",", ":", ",", ":", "]", "\n", "\n", "n_ii", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "curr_eval_mask", ",", "curr_gt_mask", ")", ")", "\n", "t_i", "=", "np", ".", "sum", "(", "curr_gt_mask", ")", "\n", "\n", "if", "(", "t_i", "!=", "0", ")", ":", "\n", "            ", "accuracy", "[", "i", "]", "=", "n_ii", "/", "t_i", "\n", "\n", "", "", "mean_accuracy_", "=", "np", ".", "mean", "(", "accuracy", ")", "\n", "return", "mean_accuracy_", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.mean_IU": [[64, 92], ["eval_segm.check_size", "eval_segm.union_classes", "eval_segm.extract_classes", "eval_segm.extract_both_masks", "enumerate", "list", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.check_size", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.union_classes", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.extract_classes", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.extract_both_masks"], ["", "def", "mean_IU", "(", "eval_segm", ",", "gt_segm", ")", ":", "\n", "    ", "'''\n    (1/n_cl) * sum_i(n_ii / (t_i + sum_j(n_ji) - n_ii))\n    '''", "\n", "\n", "check_size", "(", "eval_segm", ",", "gt_segm", ")", "\n", "\n", "cl", ",", "n_cl", "=", "union_classes", "(", "eval_segm", ",", "gt_segm", ")", "\n", "_", ",", "n_cl_gt", "=", "extract_classes", "(", "gt_segm", ")", "\n", "eval_mask", ",", "gt_mask", "=", "extract_both_masks", "(", "eval_segm", ",", "gt_segm", ",", "cl", ",", "n_cl", ")", "\n", "\n", "IU", "=", "list", "(", "[", "0", "]", ")", "*", "n_cl", "\n", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "cl", ")", ":", "\n", "        ", "curr_eval_mask", "=", "eval_mask", "[", "i", ",", ":", ",", ":", "]", "\n", "curr_gt_mask", "=", "gt_mask", "[", "i", ",", ":", ",", ":", "]", "\n", "\n", "if", "(", "np", ".", "sum", "(", "curr_eval_mask", ")", "==", "0", ")", "or", "(", "np", ".", "sum", "(", "curr_gt_mask", ")", "==", "0", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "n_ii", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "curr_eval_mask", ",", "curr_gt_mask", ")", ")", "\n", "t_i", "=", "np", ".", "sum", "(", "curr_gt_mask", ")", "\n", "n_ij", "=", "np", ".", "sum", "(", "curr_eval_mask", ")", "\n", "\n", "IU", "[", "i", "]", "=", "n_ii", "/", "(", "t_i", "+", "n_ij", "-", "n_ii", ")", "\n", "\n", "", "mean_IU_", "=", "np", ".", "sum", "(", "IU", ")", "/", "n_cl_gt", "\n", "return", "mean_IU_", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.frequency_weighted_IU": [[93, 122], ["eval_segm.check_size", "eval_segm.union_classes", "eval_segm.extract_both_masks", "enumerate", "eval_segm.get_pixel_area", "list", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.logical_and", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.check_size", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.union_classes", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.extract_both_masks", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.get_pixel_area"], ["", "def", "frequency_weighted_IU", "(", "eval_segm", ",", "gt_segm", ")", ":", "\n", "    ", "'''\n    sum_k(t_k)^(-1) * sum_i((t_i*n_ii)/(t_i + sum_j(n_ji) - n_ii))\n    '''", "\n", "\n", "check_size", "(", "eval_segm", ",", "gt_segm", ")", "\n", "\n", "cl", ",", "n_cl", "=", "union_classes", "(", "eval_segm", ",", "gt_segm", ")", "\n", "eval_mask", ",", "gt_mask", "=", "extract_both_masks", "(", "eval_segm", ",", "gt_segm", ",", "cl", ",", "n_cl", ")", "\n", "\n", "frequency_weighted_IU_", "=", "list", "(", "[", "0", "]", ")", "*", "n_cl", "\n", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "cl", ")", ":", "\n", "        ", "curr_eval_mask", "=", "eval_mask", "[", "i", ",", ":", ",", ":", "]", "\n", "curr_gt_mask", "=", "gt_mask", "[", "i", ",", ":", ",", ":", "]", "\n", "\n", "if", "(", "np", ".", "sum", "(", "curr_eval_mask", ")", "==", "0", ")", "or", "(", "np", ".", "sum", "(", "curr_gt_mask", ")", "==", "0", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "n_ii", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "curr_eval_mask", ",", "curr_gt_mask", ")", ")", "\n", "t_i", "=", "np", ".", "sum", "(", "curr_gt_mask", ")", "\n", "n_ij", "=", "np", ".", "sum", "(", "curr_eval_mask", ")", "\n", "\n", "frequency_weighted_IU_", "[", "i", "]", "=", "(", "t_i", "*", "n_ii", ")", "/", "(", "t_i", "+", "n_ij", "-", "n_ii", ")", "\n", "\n", "", "sum_k_t_k", "=", "get_pixel_area", "(", "eval_segm", ")", "\n", "\n", "frequency_weighted_IU_", "=", "np", ".", "sum", "(", "frequency_weighted_IU_", ")", "/", "sum_k_t_k", "\n", "return", "frequency_weighted_IU_", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.get_pixel_area": [[126, 128], ["None"], "function", ["None"], ["def", "get_pixel_area", "(", "segm", ")", ":", "\n", "    ", "return", "segm", ".", "shape", "[", "0", "]", "*", "segm", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.extract_both_masks": [[129, 134], ["eval_segm.extract_masks", "eval_segm.extract_masks"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.extract_masks", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.extract_masks"], ["", "def", "extract_both_masks", "(", "eval_segm", ",", "gt_segm", ",", "cl", ",", "n_cl", ")", ":", "\n", "    ", "eval_mask", "=", "extract_masks", "(", "eval_segm", ",", "cl", ",", "n_cl", ")", "\n", "gt_mask", "=", "extract_masks", "(", "gt_segm", ",", "cl", ",", "n_cl", ")", "\n", "\n", "return", "eval_mask", ",", "gt_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.extract_classes": [[135, 140], ["numpy.unique", "len"], "function", ["None"], ["", "def", "extract_classes", "(", "segm", ")", ":", "\n", "    ", "cl", "=", "np", ".", "unique", "(", "segm", ")", "\n", "n_cl", "=", "len", "(", "cl", ")", "\n", "\n", "return", "cl", ",", "n_cl", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.union_classes": [[141, 149], ["eval_segm.extract_classes", "eval_segm.extract_classes", "numpy.union1d", "len"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.extract_classes", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.extract_classes"], ["", "def", "union_classes", "(", "eval_segm", ",", "gt_segm", ")", ":", "\n", "    ", "eval_cl", ",", "_", "=", "extract_classes", "(", "eval_segm", ")", "\n", "gt_cl", ",", "_", "=", "extract_classes", "(", "gt_segm", ")", "\n", "\n", "cl", "=", "np", ".", "union1d", "(", "eval_cl", ",", "gt_cl", ")", "\n", "n_cl", "=", "len", "(", "cl", ")", "\n", "\n", "return", "cl", ",", "n_cl", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.extract_masks": [[150, 158], ["eval_segm.segm_size", "numpy.zeros", "enumerate"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.segm_size"], ["", "def", "extract_masks", "(", "segm", ",", "cl", ",", "n_cl", ")", ":", "\n", "    ", "h", ",", "w", "=", "segm_size", "(", "segm", ")", "\n", "masks", "=", "np", ".", "zeros", "(", "(", "n_cl", ",", "h", ",", "w", ")", ")", "\n", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "cl", ")", ":", "\n", "        ", "masks", "[", "i", ",", ":", ",", ":", "]", "=", "segm", "==", "c", "\n", "\n", "", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.segm_size": [[159, 167], ["None"], "function", ["None"], ["", "def", "segm_size", "(", "segm", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "height", "=", "segm", ".", "shape", "[", "0", "]", "\n", "width", "=", "segm", ".", "shape", "[", "1", "]", "\n", "", "except", "IndexError", ":", "\n", "        ", "raise", "\n", "\n", "", "return", "height", ",", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.check_size": [[168, 174], ["eval_segm.segm_size", "eval_segm.segm_size", "eval_segm.EvalSegErr"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.segm_size", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.segm_size"], ["", "def", "check_size", "(", "eval_segm", ",", "gt_segm", ")", ":", "\n", "    ", "h_e", ",", "w_e", "=", "segm_size", "(", "eval_segm", ")", "\n", "h_g", ",", "w_g", "=", "segm_size", "(", "gt_segm", ")", "\n", "\n", "if", "(", "h_e", "!=", "h_g", ")", "or", "(", "w_e", "!=", "w_g", ")", ":", "\n", "        ", "raise", "EvalSegErr", "(", "\"DiffDim: Different dimensions of matrices!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.CrossEntropyLoss2d.__init__": [[7, 11], ["torch.Module.__init__", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nll_loss", "=", "nn", ".", "NLLLoss", "(", "weight", "=", "weight", ",", "ignore_index", "=", "ignore_index", ",", "\n", "reduction", "=", "'elementwise_mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.CrossEntropyLoss2d.forward": [[12, 14], ["loss.CrossEntropyLoss2d.nll_loss", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "return", "self", ".", "nll_loss", "(", "F", ".", "log_softmax", "(", "inputs", ",", "dim", "=", "1", ")", ",", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.FocalLoss.__init__": [[60, 67], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.5", ",", "gamma", "=", "2", ",", "weight", "=", "None", ",", "ignore_index", "=", "255", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "ce_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "self", ".", "weight", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.FocalLoss.forward": [[68, 73], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "loss.FocalLoss.ce_fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "preds", ",", "labels", ")", ":", "\n", "        ", "logpt", "=", "-", "self", ".", "ce_fn", "(", "preds", ",", "labels", ")", "\n", "pt", "=", "torch", ".", "exp", "(", "logpt", ")", "\n", "loss", "=", "-", "(", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", ")", "*", "self", ".", "alpha", "*", "logpt", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.FocalLoss2d.__init__": [[75, 81], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "0", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "FocalLoss2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.FocalLoss2d.forward": [[82, 109], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "input.contiguous().view().squeeze.contiguous().view().squeeze.dim", "input.contiguous().view().squeeze.contiguous().view().squeeze.contiguous().view", "input.contiguous().view().squeeze.contiguous().view().squeeze.transpose", "input.contiguous().view().squeeze.contiguous().view().squeeze.contiguous().view().squeeze", "target.view.view.dim", "target.view.view.contiguous().view", "target.view.view.transpose", "target.view.view.contiguous().view().squeeze", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "loss.mean", "loss.sum", "input.contiguous().view().squeeze.contiguous().view().squeeze.size", "input.contiguous().view().squeeze.contiguous().view().squeeze.size", "target.view.view.size", "target.view.view.size", "target.view.view.dim", "target.view.view.view", "target.view.view.view", "input.contiguous().view().squeeze.contiguous().view().squeeze.contiguous", "input.contiguous().view().squeeze.contiguous().view().squeeze.contiguous().view", "target.view.view.contiguous", "target.view.view.contiguous().view", "input.contiguous().view().squeeze.contiguous().view().squeeze.size", "target.view.view.size", "input.contiguous().view().squeeze.contiguous().view().squeeze.contiguous", "target.view.view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "", "if", "target", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "target", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "target", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "transpose", "(", "1", ",", "2", ")", "\n", "target", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "target", ".", "size", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "", "elif", "target", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# compute the negative likelyhood", "\n", "", "weight", "=", "Variable", "(", "self", ".", "weight", ")", "\n", "logpt", "=", "-", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "pt", "=", "torch", ".", "exp", "(", "logpt", ")", "\n", "\n", "# compute the loss", "\n", "loss", "=", "-", "(", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", ")", "*", "logpt", "\n", "\n", "# averaging (or not) loss", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.ChangeSimilarity.__init__": [[114, 117], ["torch.Module.__init__", "torch.CosineEmbeddingLoss", "torch.CosineEmbeddingLoss", "torch.CosineEmbeddingLoss"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["def", "__init__", "(", "self", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "ChangeSimilarity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_f", "=", "nn", ".", "CosineEmbeddingLoss", "(", "margin", "=", "0.", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.ChangeSimilarity.forward": [[118, 134], ["torch.reshape.size", "torch.reshape.size", "torch.reshape.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.reshape.permute", "torch.reshape.permute", "torch.reshape.permute", "torch.reshape.permute", "torch.reshape.permute", "torch.reshape.permute", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "label_unchange.float", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "loss.ChangeSimilarity.ChangeSimilarity.loss_f", "label_change.bool", "label_change.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "label_change", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x1", ".", "size", "(", ")", "\n", "x1", "=", "F", ".", "softmax", "(", "x1", ",", "dim", "=", "1", ")", "\n", "x2", "=", "F", ".", "softmax", "(", "x2", ",", "dim", "=", "1", ")", "\n", "x1", "=", "x1", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "x2", "=", "x2", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "x1", "=", "torch", ".", "reshape", "(", "x1", ",", "[", "b", "*", "h", "*", "w", ",", "c", "]", ")", "\n", "x2", "=", "torch", ".", "reshape", "(", "x2", ",", "[", "b", "*", "h", "*", "w", ",", "c", "]", ")", "\n", "\n", "label_unchange", "=", "~", "label_change", ".", "bool", "(", ")", "\n", "target", "=", "label_unchange", ".", "float", "(", ")", "\n", "target", "=", "target", "-", "label_change", ".", "float", "(", ")", "\n", "target", "=", "torch", ".", "reshape", "(", "target", ",", "[", "b", "*", "h", "*", "w", "]", ")", "\n", "\n", "loss", "=", "self", ".", "loss_f", "(", "x1", ",", "x2", ",", "target", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.ChangeSalience.__init__": [[139, 142], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["def", "__init__", "(", "self", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "ChangeSimilarity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_f", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.ChangeSalience.forward": [[143, 150], ["x1.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "loss.ChangeSalience.loss_f", "loss.ChangeSalience.loss_f", "x2.detach", "x1.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "label_change", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x1", ".", "size", "(", ")", "\n", "x1", "=", "F", ".", "softmax", "(", "x1", ",", "dim", "=", "1", ")", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "x2", "=", "F", ".", "softmax", "(", "x2", ",", "dim", "=", "1", ")", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "loss", "=", "self", ".", "loss_f", "(", "x1", ",", "x2", ".", "detach", "(", ")", ")", "+", "self", ".", "loss_f", "(", "x2", ",", "x1", ".", "detach", "(", ")", ")", "\n", "return", "loss", "*", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.BinaryDiceLoss.__init__": [[201, 206], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["def", "__init__", "(", "self", ",", "smooth", "=", "1", ",", "p", "=", "2", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "BinaryDiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "smooth", "=", "smooth", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.BinaryDiceLoss.forward": [[207, 225], ["predict.contiguous().view.contiguous().view.contiguous().view", "target.contiguous().view.contiguous().view.contiguous().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "loss.mean", "predict.contiguous().view.contiguous().view.contiguous", "target.contiguous().view.contiguous().view.contiguous", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "loss.sum", "predict.contiguous().view.contiguous().view.pow", "target.contiguous().view.contiguous().view.pow", "Exception"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ")", ":", "\n", "        ", "assert", "predict", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", ",", "\"predict & target batch size don't match\"", "\n", "predict", "=", "predict", ".", "contiguous", "(", ")", ".", "view", "(", "predict", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "target", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "num", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "predict", ",", "target", ")", ",", "dim", "=", "1", ")", "+", "self", ".", "smooth", "\n", "den", "=", "torch", ".", "sum", "(", "predict", ".", "pow", "(", "self", ".", "p", ")", "+", "target", ".", "pow", "(", "self", ".", "p", ")", ",", "dim", "=", "1", ")", "+", "self", ".", "smooth", "\n", "\n", "loss", "=", "1", "-", "num", "/", "den", "\n", "\n", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'none'", ":", "\n", "            ", "return", "loss", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unexpected reduction {}'", ".", "format", "(", "self", ".", "reduction", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.DiceLoss.__init__": [[238, 243], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "ignore_index", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.DiceLoss.forward": [[244, 260], ["loss.BinaryDiceLoss", "torch.softmax", "torch.softmax", "torch.softmax", "range", "BinaryDiceLoss."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ")", ":", "\n", "        ", "assert", "predict", ".", "shape", "==", "target", ".", "shape", ",", "'predict & target shape do not match'", "\n", "dice", "=", "BinaryDiceLoss", "(", "**", "self", ".", "kwargs", ")", "\n", "total_loss", "=", "0", "\n", "predict", "=", "F", ".", "softmax", "(", "predict", ",", "dim", "=", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "target", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "i", "!=", "self", ".", "ignore_index", ":", "\n", "                ", "dice_loss", "=", "dice", "(", "predict", "[", ":", ",", "i", "]", ",", "target", "[", ":", ",", "i", "]", ")", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "assert", "self", ".", "weight", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "1", "]", ",", "'Expect weight shape [{}], get[{}]'", ".", "format", "(", "target", ".", "shape", "[", "1", "]", ",", "self", ".", "weight", ".", "shape", "[", "0", "]", ")", "\n", "dice_loss", "*=", "self", ".", "weights", "[", "i", "]", "\n", "", "total_loss", "+=", "dice_loss", "\n", "\n", "", "", "return", "total_loss", "/", "target", ".", "shape", "[", "1", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.CrossEntropy2d": [[17, 32], ["input[].view.size", "input[].view.transpose().transpose().contiguous", "input[].view", "torch.cross_entropy", "input[].view.transpose().transpose", "target_mask.sum", "input[].view.transpose", "target.view().repeat", "target.view"], "function", ["None"], ["", "", "def", "CrossEntropy2d", "(", "input", ",", "target", ",", "weight", "=", "None", ",", "size_average", "=", "False", ")", ":", "\n", "# input:(n, c, h, w) target:(n, h, w)", "\n", "    ", "n", ",", "c", ",", "h", ",", "w", "=", "input", ".", "size", "(", ")", "\n", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "input", "=", "input", "[", "target", ".", "view", "(", "n", ",", "h", ",", "w", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "c", ")", ">=", "0", "]", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "\n", "target_mask", "=", "target", ">=", "0", "\n", "target", "=", "target", "[", "target_mask", "]", "\n", "#loss = F.nll_loss(F.log_softmax(input), target, weight=weight, size_average=False)", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "weight", "=", "weight", ",", "size_average", "=", "False", ")", "\n", "if", "size_average", ":", "\n", "        ", "loss", "/=", "target_mask", ".", "sum", "(", ")", ".", "data", "[", "0", "]", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.weighted_BCE": [[33, 43], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.neg", "torch.neg", "torch.neg", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "def", "weighted_BCE", "(", "output", ",", "target", ",", "weight_pos", "=", "None", ",", "weight_neg", "=", "None", ")", ":", "\n", "    ", "output", "=", "torch", ".", "clamp", "(", "output", ",", "min", "=", "1e-8", ",", "max", "=", "1", "-", "1e-8", ")", "\n", "\n", "if", "weight_pos", "is", "not", "None", ":", "\n", "        ", "loss", "=", "weight_pos", "*", "(", "target", "*", "torch", ".", "log", "(", "output", ")", ")", "+", "weight_neg", "*", "(", "(", "1", "-", "target", ")", "*", "torch", ".", "log", "(", "1", "-", "output", ")", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "target", "*", "torch", ".", "log", "(", "output", ")", "+", "(", "1", "-", "target", ")", "*", "torch", ".", "log", "(", "1", "-", "output", ")", "\n", "\n", "", "return", "torch", ".", "neg", "(", "torch", ".", "mean", "(", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.weighted_BCE_logits": [[44, 58], ["logit_pixel.view", "truth_pixel.view", "torch.binary_cross_entropy_with_logits", "pos.sum().item", "neg.sum().item", "pos.sum", "neg.sum"], "function", ["None"], ["", "def", "weighted_BCE_logits", "(", "logit_pixel", ",", "truth_pixel", ",", "weight_pos", "=", "0.25", ",", "weight_neg", "=", "0.75", ")", ":", "\n", "    ", "logit", "=", "logit_pixel", ".", "view", "(", "-", "1", ")", "\n", "truth", "=", "truth_pixel", ".", "view", "(", "-", "1", ")", "\n", "assert", "(", "logit", ".", "shape", "==", "truth", ".", "shape", ")", "\n", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "logit", ",", "truth", ",", "reduction", "=", "'none'", ")", "\n", "\n", "pos", "=", "(", "truth", ">", "0.5", ")", ".", "float", "(", ")", "\n", "neg", "=", "(", "truth", "<", "0.5", ")", ".", "float", "(", ")", "\n", "pos_num", "=", "pos", ".", "sum", "(", ")", ".", "item", "(", ")", "+", "1e-12", "\n", "neg_num", "=", "neg", ".", "sum", "(", ")", ".", "item", "(", ")", "+", "1e-12", "\n", "loss", "=", "(", "weight_pos", "*", "pos", "*", "loss", "/", "pos_num", "+", "weight_neg", "*", "neg", "*", "loss", "/", "neg_num", ")", ".", "sum", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.pix_loss": [[152, 169], ["output.size", "torch.log_softmax", "logp.gather.gather", "target.view", "weighted_logp.sum", "pix_weight.view().sum", "weighted_loss.mean", "pix_weight.view"], "function", ["None"], ["", "", "def", "pix_loss", "(", "output", ",", "target", ",", "pix_weight", ",", "ignore_index", "=", "None", ")", ":", "\n", "# Calculate log probabilities", "\n", "    ", "if", "ignore_index", "is", "not", "None", ":", "\n", "        ", "active_pos", "=", "1", "-", "(", "target", "==", "ignore_index", ")", ".", "unsqueeze", "(", "1", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "pix_weight", "*=", "active_pos", "\n", "\n", "", "batch_size", ",", "_", ",", "H", ",", "W", "=", "output", ".", "size", "(", ")", "\n", "logp", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "# Gather log probabilities with respect to target", "\n", "logp", "=", "logp", ".", "gather", "(", "1", ",", "target", ".", "view", "(", "batch_size", ",", "1", ",", "H", ",", "W", ")", ")", "\n", "# Multiply with weights", "\n", "weighted_logp", "=", "(", "logp", "*", "pix_weight", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "# Rescale so that loss is in approx. same interval", "\n", "weighted_loss", "=", "weighted_logp", ".", "sum", "(", "1", ")", "/", "pix_weight", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "\n", "# Average over mini-batch", "\n", "weighted_loss", "=", "-", "1.0", "*", "weighted_loss", ".", "mean", "(", ")", "\n", "return", "weighted_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.loss.make_one_hot": [[170, 185], ["np.array", "tuple", "torch.zeros", "torch.zeros", "torch.zeros", "result.scatter_.scatter_", "input.cpu"], "function", ["None"], ["", "def", "make_one_hot", "(", "input", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Convert class index tensor to one hot encoding tensor.\n    Args:\n         input: A tensor of shape [N, 1, *]\n         num_classes: An int of number of class\n    Returns:\n        A tensor of shape [N, num_classes, *]\n    \"\"\"", "\n", "shape", "=", "np", ".", "array", "(", "input", ".", "shape", ")", "\n", "shape", "[", "1", "]", "=", "num_classes", "\n", "shape", "=", "tuple", "(", "shape", ")", "\n", "result", "=", "torch", ".", "zeros", "(", "shape", ")", "\n", "result", "=", "result", ".", "scatter_", "(", "1", ",", "input", ".", "cpu", "(", ")", ",", "1", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.showIMG": [[12, 16], ["matplotlib.imshow", "matplotlib.show"], "function", ["None"], ["def", "showIMG", "(", "img", ")", ":", "\n", "    ", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_flip": [[17, 28], ["random.random", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "img[].copy", "label[].copy", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip"], "function", ["None"], ["", "def", "rand_flip", "(", "img", ",", "label", ")", ":", "\n", "    ", "r", "=", "random", ".", "random", "(", ")", "\n", "# showIMG(img.transpose((1, 2, 0)))", "\n", "if", "r", "<", "0.25", ":", "\n", "        ", "return", "img", ",", "label", "\n", "", "elif", "r", "<", "0.5", ":", "\n", "        ", "return", "np", ".", "flip", "(", "img", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "", "elif", "r", "<", "0.75", ":", "\n", "        ", "return", "np", ".", "flip", "(", "img", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "img", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", ",", "label", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_flip_2s": [[29, 40], ["random.random", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "img_s[].copy", "label_s[].copy", "img[].copy", "label[].copy", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip"], "function", ["None"], ["", "", "def", "rand_flip_2s", "(", "img_s", ",", "label_s", ",", "img", ",", "label", ")", ":", "\n", "    ", "r", "=", "random", ".", "random", "(", ")", "\n", "# showIMG(img.transpose((1, 2, 0)))", "\n", "if", "r", "<", "0.25", ":", "\n", "        ", "return", "img_s", ",", "label_s", ",", "img", ",", "label", "\n", "", "elif", "r", "<", "0.5", ":", "\n", "        ", "return", "np", ".", "flip", "(", "img_s", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label_s", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "img", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "", "elif", "r", "<", "0.75", ":", "\n", "        ", "return", "np", ".", "flip", "(", "img_s", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label_s", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "img", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "img_s", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", ",", "label_s", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ",", "img", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", ",", "label", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_flip_mix": [[41, 52], ["random.random", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "img[].copy", "label[].copy", "x_s[].copy", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip"], "function", ["None"], ["", "", "def", "rand_flip_mix", "(", "img", ",", "label", ",", "x_s", ")", ":", "\n", "    ", "r", "=", "random", ".", "random", "(", ")", "\n", "# showIMG(img.transpose((1, 2, 0)))", "\n", "if", "r", "<", "0.25", ":", "\n", "        ", "return", "img", ",", "label", ",", "x_s", "\n", "", "elif", "r", "<", "0.5", ":", "\n", "        ", "return", "np", ".", "flip", "(", "img", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "x_s", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "", "elif", "r", "<", "0.75", ":", "\n", "        ", "return", "np", ".", "flip", "(", "img", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "x_s", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "img", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", ",", "label", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ",", "x_s", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_flip_MCD": [[53, 64], ["random.random", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "img1[].copy", "img2[].copy", "label1[].copy", "label2[].copy", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip"], "function", ["None"], ["", "", "def", "rand_flip_MCD", "(", "img1", ",", "img2", ",", "label1", ",", "label2", ")", ":", "\n", "    ", "r", "=", "random", ".", "random", "(", ")", "\n", "# showIMG(img.transpose((1, 2, 0)))", "\n", "if", "r", "<", "0.25", ":", "\n", "        ", "return", "img1", ",", "img2", ",", "label1", ",", "label2", "\n", "", "elif", "r", "<", "0.5", ":", "\n", "        ", "return", "np", ".", "flip", "(", "img1", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "img2", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label1", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label2", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "", "elif", "r", "<", "0.75", ":", "\n", "        ", "return", "np", ".", "flip", "(", "img1", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "img2", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label1", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label2", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "img1", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", ",", "img2", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", ",", "label1", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ",", "label2", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_flip_MCD5": [[65, 76], ["random.random", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip().copy", "img1[].copy", "img2[].copy", "label1[].copy", "label2[].copy", "label3[].copy", "label4[].copy", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip"], "function", ["None"], ["", "", "def", "rand_flip_MCD5", "(", "img1", ",", "img2", ",", "label1", ",", "label2", ",", "label3", ",", "label4", ")", ":", "\n", "    ", "r", "=", "random", ".", "random", "(", ")", "\n", "# showIMG(img.transpose((1, 2, 0)))", "\n", "if", "r", "<", "0.25", ":", "\n", "        ", "return", "img1", ",", "img2", ",", "label1", ",", "label2", ",", "label3", ",", "label4", "\n", "", "elif", "r", "<", "0.5", ":", "\n", "        ", "return", "np", ".", "flip", "(", "img1", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "img2", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label1", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label2", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label3", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label4", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "", "elif", "r", "<", "0.75", ":", "\n", "        ", "return", "np", ".", "flip", "(", "img1", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "img2", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label1", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label2", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label3", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", ",", "np", ".", "flip", "(", "label4", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "img1", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", ",", "img2", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", ",", "label1", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ",", "label2", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ",", "label3", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ",", "label4", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_rot90_MCD": [[77, 84], ["random.random", "numpy.rot90().copy", "numpy.rot90().copy", "numpy.rot90().copy", "numpy.rot90().copy", "numpy.rot90", "numpy.rot90", "numpy.rot90", "numpy.rot90"], "function", ["None"], ["", "", "def", "rand_rot90_MCD", "(", "img1", ",", "img2", ",", "label1", ",", "label2", ")", ":", "\n", "    ", "r", "=", "random", ".", "random", "(", ")", "\n", "# showIMG(img.transpose((1, 2, 0)))", "\n", "if", "r", "<", "0.5", ":", "\n", "        ", "return", "img1", ",", "img2", ",", "label1", ",", "label2", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img1", ")", ".", "copy", "(", ")", ",", "np", ".", "rot90", "(", "img2", ")", ".", "copy", "(", ")", ",", "np", ".", "rot90", "(", "label1", ")", ".", "copy", "(", ")", ",", "np", ".", "rot90", "(", "label2", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_rot90_MCD5": [[85, 92], ["random.random", "numpy.rot90().copy", "numpy.rot90().copy", "numpy.rot90().copy", "numpy.rot90().copy", "numpy.rot90().copy", "numpy.rot90().copy", "numpy.rot90", "numpy.rot90", "numpy.rot90", "numpy.rot90", "numpy.rot90", "numpy.rot90"], "function", ["None"], ["", "", "def", "rand_rot90_MCD5", "(", "img1", ",", "img2", ",", "label1", ",", "label2", ",", "label3", ",", "label4", ")", ":", "\n", "    ", "r", "=", "random", ".", "random", "(", ")", "\n", "# showIMG(img.transpose((1, 2, 0)))", "\n", "if", "r", "<", "0.5", ":", "\n", "        ", "return", "img1", ",", "img2", ",", "label1", ",", "label2", ",", "label3", ",", "label4", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "rot90", "(", "img1", ")", ".", "copy", "(", ")", ",", "np", ".", "rot90", "(", "img2", ")", ".", "copy", "(", ")", ",", "np", ".", "rot90", "(", "label1", ")", ".", "copy", "(", ")", ",", "np", ".", "rot90", "(", "label2", ")", ".", "copy", "(", ")", ",", "np", ".", "rot90", "(", "label3", ")", ".", "copy", "(", ")", ",", "np", ".", "rot90", "(", "label4", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_rot90_flip_MCD": [[93, 96], ["transform.rand_rot90_MCD", "transform.rand_flip_MCD"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_rot90_MCD", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_flip_MCD"], ["", "", "def", "rand_rot90_flip_MCD", "(", "img1", ",", "img2", ",", "label1", ",", "label2", ")", ":", "\n", "    ", "img1", ",", "img2", ",", "label1", ",", "label2", "=", "rand_rot90_MCD", "(", "img1", ",", "img2", ",", "label1", ",", "label2", ")", "\n", "return", "rand_flip_MCD", "(", "img1", ",", "img2", ",", "label1", ",", "label2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_rot90_flip_MCD5": [[97, 100], ["transform.rand_rot90_MCD5", "transform.rand_flip_MCD5"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_rot90_MCD5", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_flip_MCD5"], ["", "def", "rand_rot90_flip_MCD5", "(", "img1", ",", "img2", ",", "label1", ",", "label2", ",", "label3", ",", "label4", ")", ":", "\n", "    ", "img1", ",", "img2", ",", "label1", ",", "label2", ",", "label3", ",", "label4", "=", "rand_rot90_MCD5", "(", "img1", ",", "img2", ",", "label1", ",", "label2", ",", "label3", ",", "label4", ")", "\n", "return", "rand_flip_MCD5", "(", "img1", ",", "img2", ",", "label1", ",", "label2", ",", "label3", ",", "label4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_rotate": [[101, 113], ["random.randint", "numpy.asarray", "numpy.asarray", "skimage.transform.rotate", "skimage.transform.rotate"], "function", ["None"], ["", "def", "rand_rotate", "(", "img", ",", "label", ")", ":", "\n", "    ", "r", "=", "random", ".", "randint", "(", "0", ",", "179", ")", "\n", "# print(r)", "\n", "# showIMG(img.transpose((1, 2, 0)))", "\n", "img_rotate", "=", "np", ".", "asarray", "(", "sktransf", ".", "rotate", "(", "img", ",", "r", ",", "order", "=", "1", ",", "mode", "=", "'symmetric'", ",", "\n", "preserve_range", "=", "True", ")", ",", "np", ".", "float", ")", "\n", "label_rotate", "=", "np", ".", "asarray", "(", "sktransf", ".", "rotate", "(", "label", ",", "r", ",", "order", "=", "0", ",", "mode", "=", "'constant'", ",", "\n", "cval", "=", "0", ",", "preserve_range", "=", "True", ")", ",", "np", ".", "uint8", ")", "\n", "# print(img_rotate[0:10, 0:10, :])", "\n", "# print(label_rotate[0:10, 0:10])", "\n", "# h_s = image", "\n", "return", "img_rotate", ",", "label_rotate", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_rotate_crop": [[114, 126], ["random.randint", "transform.rotate_image", "transform.rotate_image", "transform.largest_rotated_rect", "transform.crop_around_center", "transform.crop_around_center", "math.radians"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rotate_image", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rotate_image", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.largest_rotated_rect", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.crop_around_center", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.crop_around_center"], ["", "def", "rand_rotate_crop", "(", "img", ",", "label", ")", ":", "\n", "    ", "r", "=", "random", ".", "randint", "(", "0", ",", "179", ")", "\n", "image_height", ",", "image_width", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "im_rotated", "=", "rotate_image", "(", "img", ",", "r", ",", "order", "=", "1", ")", "\n", "l_rotated", "=", "rotate_image", "(", "label", ",", "r", ",", "order", "=", "0", ")", "\n", "crop_w", ",", "crop_h", "=", "largest_rotated_rect", "(", "image_width", ",", "image_height", ",", "math", ".", "radians", "(", "r", ")", ")", "\n", "im_rotated_cropped", "=", "crop_around_center", "(", "im_rotated", ",", "crop_w", ",", "crop_h", ")", "\n", "l_rotated_cropped", "=", "crop_around_center", "(", "l_rotated", ",", "crop_w", ",", "crop_h", ")", "\n", "# print(img_rotate[0:10, 0:10, :])", "\n", "# print(label_rotate[0:10, 0:10])", "\n", "# h_s = image", "\n", "return", "im_rotated_cropped", ",", "l_rotated_cropped", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rotate_image": [[127, 199], ["tuple", "numpy.vstack", "numpy.matrix", "max", "min", "max", "min", "int", "int", "numpy.matrix", "cv2.warpAffine", "abs", "abs", "numpy.array", "cv2.getRotationMatrix2D", "numpy.matrix", "numpy.matrix", "int", "int", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "rotate_image", "(", "image", ",", "angle", ",", "order", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Rotates an OpenCV 2 / NumPy image about it's centre by the given angle\n    (in degrees). The returned image will be large enough to hold the entire\n    new image, with a black background\n    \"\"\"", "\n", "\n", "# Get the image size", "\n", "# No that's not an error - NumPy stores image matricies backwards", "\n", "image_size", "=", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", "\n", "image_center", "=", "tuple", "(", "np", ".", "array", "(", "image_size", ")", "/", "2", ")", "\n", "\n", "# Convert the OpenCV 3x2 rotation matrix to 3x3", "\n", "rot_mat", "=", "np", ".", "vstack", "(", "\n", "[", "cv2", ".", "getRotationMatrix2D", "(", "image_center", ",", "angle", ",", "1.0", ")", ",", "[", "0", ",", "0", ",", "1", "]", "]", "\n", ")", "\n", "\n", "rot_mat_notranslate", "=", "np", ".", "matrix", "(", "rot_mat", "[", "0", ":", "2", ",", "0", ":", "2", "]", ")", "\n", "\n", "# Shorthand for below calcs", "\n", "image_w2", "=", "image_size", "[", "0", "]", "*", "0.5", "\n", "image_h2", "=", "image_size", "[", "1", "]", "*", "0.5", "\n", "\n", "# Obtain the rotated coordinates of the image corners", "\n", "rotated_coords", "=", "[", "\n", "(", "np", ".", "array", "(", "[", "-", "image_w2", ",", "image_h2", "]", ")", "*", "rot_mat_notranslate", ")", ".", "A", "[", "0", "]", ",", "\n", "(", "np", ".", "array", "(", "[", "image_w2", ",", "image_h2", "]", ")", "*", "rot_mat_notranslate", ")", ".", "A", "[", "0", "]", ",", "\n", "(", "np", ".", "array", "(", "[", "-", "image_w2", ",", "-", "image_h2", "]", ")", "*", "rot_mat_notranslate", ")", ".", "A", "[", "0", "]", ",", "\n", "(", "np", ".", "array", "(", "[", "image_w2", ",", "-", "image_h2", "]", ")", "*", "rot_mat_notranslate", ")", ".", "A", "[", "0", "]", "\n", "]", "\n", "\n", "# Find the size of the new image", "\n", "x_coords", "=", "[", "pt", "[", "0", "]", "for", "pt", "in", "rotated_coords", "]", "\n", "x_pos", "=", "[", "x", "for", "x", "in", "x_coords", "if", "x", ">", "0", "]", "\n", "x_neg", "=", "[", "x", "for", "x", "in", "x_coords", "if", "x", "<", "0", "]", "\n", "\n", "y_coords", "=", "[", "pt", "[", "1", "]", "for", "pt", "in", "rotated_coords", "]", "\n", "y_pos", "=", "[", "y", "for", "y", "in", "y_coords", "if", "y", ">", "0", "]", "\n", "y_neg", "=", "[", "y", "for", "y", "in", "y_coords", "if", "y", "<", "0", "]", "\n", "\n", "right_bound", "=", "max", "(", "x_pos", ")", "\n", "left_bound", "=", "min", "(", "x_neg", ")", "\n", "top_bound", "=", "max", "(", "y_pos", ")", "\n", "bot_bound", "=", "min", "(", "y_neg", ")", "\n", "\n", "new_w", "=", "int", "(", "abs", "(", "right_bound", "-", "left_bound", ")", ")", "\n", "new_h", "=", "int", "(", "abs", "(", "top_bound", "-", "bot_bound", ")", ")", "\n", "\n", "# We require a translation matrix to keep the image centred", "\n", "trans_mat", "=", "np", ".", "matrix", "(", "[", "\n", "[", "1", ",", "0", ",", "int", "(", "new_w", "*", "0.5", "-", "image_w2", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "int", "(", "new_h", "*", "0.5", "-", "image_h2", ")", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ")", "\n", "\n", "# Compute the tranform for the combined rotation and translation", "\n", "affine_mat", "=", "(", "np", ".", "matrix", "(", "trans_mat", ")", "*", "np", ".", "matrix", "(", "rot_mat", ")", ")", "[", "0", ":", "2", ",", ":", "]", "\n", "\n", "# Apply the transform", "\n", "flag", "=", "cv2", ".", "INTER_NEAREST", "\n", "if", "order", "==", "1", ":", "flag", "=", "cv2", ".", "INTER_LINEAR", "\n", "elif", "order", "==", "2", ":", "flag", "=", "cv2", ".", "INTER_AREA", "\n", "elif", "order", ">", "2", ":", "flag", "=", "cv2", ".", "INTER_CUBIC", "\n", "\n", "result", "=", "cv2", ".", "warpAffine", "(", "\n", "image", ",", "\n", "affine_mat", ",", "\n", "(", "new_w", ",", "new_h", ")", ",", "\n", "flags", "=", "flag", "\n", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_rotate_mix": [[200, 214], ["random.randint", "numpy.asarray", "numpy.asarray", "numpy.asarray", "skimage.transform.rotate", "skimage.transform.rotate", "skimage.transform.rotate"], "function", ["None"], ["", "def", "rand_rotate_mix", "(", "img", ",", "label", ",", "x_s", ")", ":", "\n", "    ", "r", "=", "random", ".", "randint", "(", "0", ",", "179", ")", "\n", "# print(r)", "\n", "# showIMG(img.transpose((1, 2, 0)))", "\n", "img_rotate", "=", "np", ".", "asarray", "(", "sktransf", ".", "rotate", "(", "img", ",", "r", ",", "order", "=", "1", ",", "mode", "=", "'symmetric'", ",", "\n", "preserve_range", "=", "True", ")", ",", "np", ".", "float", ")", "\n", "label_rotate", "=", "np", ".", "asarray", "(", "sktransf", ".", "rotate", "(", "label", ",", "r", ",", "order", "=", "0", ",", "mode", "=", "'constant'", ",", "\n", "cval", "=", "0", ",", "preserve_range", "=", "True", ")", ",", "np", ".", "uint8", ")", "\n", "x_s_rotate", "=", "np", ".", "asarray", "(", "sktransf", ".", "rotate", "(", "x_s", ",", "r", ",", "order", "=", "0", ",", "mode", "=", "'symmetric'", ",", "\n", "cval", "=", "0", ",", "preserve_range", "=", "True", ")", ",", "np", ".", "uint8", ")", "\n", "# print(img_rotate[0:10, 0:10, :])", "\n", "# print(label_rotate[0:10, 0:10])", "\n", "# h_s = image", "\n", "return", "img_rotate", ",", "label_rotate", ",", "x_s_rotate", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.create_crops": [[215, 257], ["len", "zip", "print", "math.ceil", "math.ceil", "range", "print", "crop_imgs.append", "crop_labels.append", "math.ceil", "math.ceil", "range", "len", "int", "int", "crop_imgs.append", "str", "crop_labels.append", "crop_labels.append"], "function", ["None"], ["", "def", "create_crops", "(", "ims", ",", "labels", ",", "size", ")", ":", "\n", "    ", "crop_imgs", "=", "[", "]", "\n", "crop_labels", "=", "[", "]", "\n", "label_dims", "=", "len", "(", "labels", "[", "0", "]", ".", "shape", ")", "\n", "for", "img", ",", "label", "in", "zip", "(", "ims", ",", "labels", ")", ":", "\n", "        ", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "c_h", "=", "size", "[", "0", "]", "\n", "c_w", "=", "size", "[", "1", "]", "\n", "if", "h", "<", "c_h", "or", "w", "<", "c_w", ":", "\n", "            ", "print", "(", "\"Cannot crop area {} from image with size ({}, {})\"", ".", "format", "(", "str", "(", "size", ")", ",", "h", ",", "w", ")", ")", "\n", "crop_imgs", ".", "append", "(", "img", ")", "\n", "crop_labels", ".", "append", "(", "label", ")", "\n", "continue", "\n", "", "h_rate", "=", "h", "/", "c_h", "\n", "w_rate", "=", "w", "/", "c_w", "\n", "h_times", "=", "math", ".", "ceil", "(", "h_rate", ")", "\n", "w_times", "=", "math", ".", "ceil", "(", "w_rate", ")", "\n", "if", "h_times", "==", "1", ":", "stride_h", "=", "0", "\n", "else", ":", "\n", "            ", "stride_h", "=", "math", ".", "ceil", "(", "c_h", "*", "(", "h_times", "-", "h_rate", ")", "/", "(", "h_times", "-", "1", ")", ")", "\n", "", "if", "w_times", "==", "1", ":", "stride_w", "=", "0", "\n", "else", ":", "\n", "            ", "stride_w", "=", "math", ".", "ceil", "(", "c_w", "*", "(", "w_times", "-", "w_rate", ")", "/", "(", "w_times", "-", "1", ")", ")", "\n", "", "for", "j", "in", "range", "(", "h_times", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "w_times", ")", ":", "\n", "                ", "s_h", "=", "int", "(", "j", "*", "c_h", "-", "j", "*", "stride_h", ")", "\n", "if", "(", "j", "==", "(", "h_times", "-", "1", ")", ")", ":", "s_h", "=", "h", "-", "c_h", "\n", "e_h", "=", "s_h", "+", "c_h", "\n", "s_w", "=", "int", "(", "i", "*", "c_w", "-", "i", "*", "stride_w", ")", "\n", "if", "(", "i", "==", "(", "w_times", "-", "1", ")", ")", ":", "s_w", "=", "w", "-", "c_w", "\n", "e_w", "=", "s_w", "+", "c_w", "\n", "# print('%d %d %d %d'%(s_h, e_h, s_w, e_w))", "\n", "# print('%d %d %d %d'%(s_h_s, e_h_s, s_w_s, e_w_s))", "\n", "crop_imgs", ".", "append", "(", "img", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", ")", "\n", "if", "label_dims", "==", "2", ":", "\n", "                    ", "crop_labels", ".", "append", "(", "label", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", "]", ")", "\n", "", "else", ":", "\n", "                    ", "crop_labels", ".", "append", "(", "label", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", ")", "\n", "\n", "", "", "", "", "print", "(", "'Sliding crop finished. %d images created.'", "%", "len", "(", "crop_imgs", ")", ")", "\n", "return", "crop_imgs", ",", "crop_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.create_crops_onlyimgs": [[258, 288], ["print", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "range", "print", "range", "len", "int", "int", "crop_imgs.append", "str"], "function", ["None"], ["", "def", "create_crops_onlyimgs", "(", "ims", ",", "size", ")", ":", "\n", "    ", "crop_imgs", "=", "[", "]", "\n", "for", "img", "in", "ims", ":", "\n", "        ", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "c_h", "=", "size", "[", "0", "]", "\n", "c_w", "=", "size", "[", "1", "]", "\n", "if", "h", "<", "c_h", "or", "w", "<", "c_w", ":", "\n", "            ", "print", "(", "\"Cannot crop area {} from image with size ({}, {})\"", ".", "format", "(", "str", "(", "size", ")", ",", "h", ",", "w", ")", ")", "\n", "continue", "\n", "", "h_rate", "=", "h", "/", "c_h", "\n", "w_rate", "=", "w", "/", "c_w", "\n", "h_times", "=", "math", ".", "ceil", "(", "h_rate", ")", "\n", "w_times", "=", "math", ".", "ceil", "(", "w_rate", ")", "\n", "stride_h", "=", "math", ".", "ceil", "(", "c_h", "*", "(", "h_times", "-", "h_rate", ")", "/", "(", "h_times", "-", "1", ")", ")", "\n", "stride_w", "=", "math", ".", "ceil", "(", "c_w", "*", "(", "w_times", "-", "w_rate", ")", "/", "(", "w_times", "-", "1", ")", ")", "\n", "for", "j", "in", "range", "(", "h_times", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "w_times", ")", ":", "\n", "                ", "s_h", "=", "int", "(", "j", "*", "c_h", "-", "j", "*", "stride_h", ")", "\n", "if", "(", "j", "==", "(", "h_times", "-", "1", ")", ")", ":", "s_h", "=", "h", "-", "c_h", "\n", "e_h", "=", "s_h", "+", "c_h", "\n", "s_w", "=", "int", "(", "i", "*", "c_w", "-", "i", "*", "stride_w", ")", "\n", "if", "(", "i", "==", "(", "w_times", "-", "1", ")", ")", ":", "s_w", "=", "w", "-", "c_w", "\n", "e_w", "=", "s_w", "+", "c_w", "\n", "# print('%d %d %d %d'%(s_h, e_h, s_w, e_w))", "\n", "# print('%d %d %d %d'%(s_h_s, e_h_s, s_w_s, e_w_s))", "\n", "crop_imgs", ".", "append", "(", "img", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", ")", "\n", "\n", "", "", "", "print", "(", "'Sliding crop finished. %d images created.'", "%", "len", "(", "crop_imgs", ")", ")", "\n", "return", "crop_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.center_crop": [[289, 309], ["zip", "print", "int", "int", "crop_imgs.append", "crop_labels.append", "print", "len", "str"], "function", ["None"], ["", "def", "center_crop", "(", "ims", ",", "labels", ",", "size", ")", ":", "\n", "    ", "crop_imgs", "=", "[", "]", "\n", "crop_labels", "=", "[", "]", "\n", "for", "img", ",", "label", "in", "zip", "(", "ims", ",", "labels", ")", ":", "\n", "        ", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "c_h", "=", "size", "[", "0", "]", "\n", "c_w", "=", "size", "[", "1", "]", "\n", "if", "h", "<", "c_h", "or", "w", "<", "c_w", ":", "\n", "            ", "print", "(", "\"Cannot crop area {} from image with size ({}, {})\"", ".", "format", "(", "str", "(", "size", ")", ",", "h", ",", "w", ")", ")", "\n", "continue", "\n", "", "s_h", "=", "int", "(", "h", "/", "2", "-", "c_h", "/", "2", ")", "\n", "e_h", "=", "s_h", "+", "c_h", "\n", "s_w", "=", "int", "(", "w", "/", "2", "-", "c_w", "/", "2", ")", "\n", "e_w", "=", "s_w", "+", "c_w", "\n", "crop_imgs", ".", "append", "(", "img", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", ")", "\n", "crop_labels", ".", "append", "(", "label", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", ")", "\n", "\n", "", "print", "(", "'Center crop finished. %d images created.'", "%", "len", "(", "crop_imgs", ")", ")", "\n", "return", "crop_imgs", ",", "crop_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.five_crop": [[310, 339], ["zip", "print", "int", "int", "crop_imgs.append", "crop_labels.append", "crop_imgs.append", "crop_labels.append", "crop_imgs.append", "crop_labels.append", "crop_imgs.append", "crop_labels.append", "crop_imgs.append", "crop_labels.append", "print", "len", "str"], "function", ["None"], ["", "def", "five_crop", "(", "ims", ",", "labels", ",", "size", ")", ":", "\n", "    ", "crop_imgs", "=", "[", "]", "\n", "crop_labels", "=", "[", "]", "\n", "for", "img", ",", "label", "in", "zip", "(", "ims", ",", "labels", ")", ":", "\n", "        ", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "c_h", "=", "size", "[", "0", "]", "\n", "c_w", "=", "size", "[", "1", "]", "\n", "if", "h", "<", "c_h", "or", "w", "<", "c_w", ":", "\n", "            ", "print", "(", "\"Cannot crop area {} from image with size ({}, {})\"", ".", "format", "(", "str", "(", "size", ")", ",", "h", ",", "w", ")", ")", "\n", "continue", "\n", "", "s_h", "=", "int", "(", "h", "/", "2", "-", "c_h", "/", "2", ")", "\n", "e_h", "=", "s_h", "+", "c_h", "\n", "s_w", "=", "int", "(", "w", "/", "2", "-", "c_w", "/", "2", ")", "\n", "e_w", "=", "s_w", "+", "c_w", "\n", "crop_imgs", ".", "append", "(", "img", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", ")", "\n", "crop_labels", ".", "append", "(", "label", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", ")", "\n", "\n", "crop_imgs", ".", "append", "(", "img", "[", "0", ":", "c_h", ",", "0", ":", "c_w", ",", ":", "]", ")", "\n", "crop_labels", ".", "append", "(", "label", "[", "0", ":", "c_h", ",", "0", ":", "c_w", ",", ":", "]", ")", "\n", "crop_imgs", ".", "append", "(", "img", "[", "h", "-", "c_h", ":", "h", ",", "w", "-", "c_w", ":", "w", ",", ":", "]", ")", "\n", "crop_labels", ".", "append", "(", "label", "[", "h", "-", "c_h", ":", "h", ",", "w", "-", "c_w", ":", "w", ",", ":", "]", ")", "\n", "crop_imgs", ".", "append", "(", "img", "[", "0", ":", "c_h", ",", "w", "-", "c_w", ":", "w", ",", ":", "]", ")", "\n", "crop_labels", ".", "append", "(", "label", "[", "0", ":", "c_h", ",", "w", "-", "c_w", ":", "w", ",", ":", "]", ")", "\n", "crop_imgs", ".", "append", "(", "img", "[", "h", "-", "c_h", ":", "h", ",", "0", ":", "c_w", ",", ":", "]", ")", "\n", "crop_labels", ".", "append", "(", "label", "[", "h", "-", "c_h", ":", "h", ",", "0", ":", "c_w", ",", ":", "]", ")", "\n", "\n", "", "print", "(", "'Five crop finished. %d images created.'", "%", "len", "(", "crop_imgs", ")", ")", "\n", "return", "crop_imgs", ",", "crop_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.data_padding": [[340, 363], ["enumerate", "math.ceil", "math.floor", "math.ceil", "math.floor", "skimage.util.pad", "skimage.util.pad", "print"], "function", ["None"], ["", "def", "data_padding", "(", "imgs", ",", "labels", ",", "scale", "=", "32", ")", ":", "\n", "    ", "for", "idx", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "        ", "label", "=", "labels", "[", "idx", "]", "\n", "shape_before", "=", "img", ".", "shape", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "h_padding", "=", "h", "%", "scale", "\n", "w_padding", "=", "w", "%", "scale", "\n", "need_padding", "=", "h_padding", ">", "0", "and", "w_padding", ">", "0", "\n", "if", "need_padding", ":", "\n", "            ", "h_padding", "=", "(", "scale", "-", "h_padding", ")", "/", "2", "\n", "h_padding1", "=", "math", ".", "ceil", "(", "h_padding", ")", "\n", "h_padding2", "=", "math", ".", "floor", "(", "h_padding", ")", "\n", "\n", "w_padding", "=", "(", "scale", "-", "w_padding", ")", "/", "2", "\n", "w_padding1", "=", "math", ".", "ceil", "(", "w_padding", ")", "\n", "w_padding2", "=", "math", ".", "floor", "(", "w_padding", ")", "\n", "img", "=", "pad", "(", "img", ",", "(", "(", "h_padding1", ",", "h_padding2", ")", ",", "(", "w_padding1", ",", "w_padding2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'symmetric'", ")", "\n", "label", "=", "pad", "(", "label", ",", "(", "(", "h_padding1", ",", "h_padding2", ")", ",", "(", "w_padding1", ",", "w_padding2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ")", "\n", "shape_after", "=", "img", ".", "shape", "\n", "print", "(", "'img padding: [%d, %d]->[%d, %d]'", "%", "(", "shape_before", "[", "0", "]", ",", "shape_before", "[", "1", "]", ",", "shape_after", "[", "0", "]", ",", "shape_after", "[", "1", "]", ")", ")", "\n", "imgs", "[", "idx", "]", "=", "img", "\n", "labels", "[", "idx", "]", "=", "label", "\n", "", "", "return", "imgs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.data_padding_fixsize": [[364, 382], ["enumerate", "math.ceil", "math.floor", "math.ceil", "math.floor", "skimage.util.pad", "skimage.util.pad"], "function", ["None"], ["", "def", "data_padding_fixsize", "(", "imgs", ",", "labels", ",", "size", ")", ":", "\n", "    ", "for", "idx", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "        ", "label", "=", "labels", "[", "idx", "]", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "h_padding", "=", "size", "[", "0", "]", "\n", "w_padding", "=", "size", "[", "1", "]", "\n", "\n", "h_padding1", "=", "math", ".", "ceil", "(", "h_padding", ")", "\n", "h_padding2", "=", "math", ".", "floor", "(", "h_padding", ")", "\n", "\n", "w_padding1", "=", "math", ".", "ceil", "(", "w_padding", ")", "\n", "w_padding2", "=", "math", ".", "floor", "(", "w_padding", ")", "\n", "\n", "img", "=", "pad", "(", "img", ",", "(", "(", "h_padding1", ",", "h_padding2", ")", ",", "(", "w_padding1", ",", "w_padding2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'symmetric'", ")", "\n", "label", "=", "pad", "(", "label", ",", "(", "(", "h_padding1", ",", "h_padding2", ")", ",", "(", "w_padding1", ",", "w_padding2", ")", ")", ",", "'constant'", ")", "\n", "imgs", "[", "idx", "]", "=", "img", "\n", "labels", "[", "idx", "]", "=", "label", "\n", "", "return", "imgs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.five_crop_mix": [[383, 430], ["zip", "print", "int", "int", "int", "int", "int", "int", "crop_xs.append", "crop_imgs.append", "crop_labels.append", "crop_xs.append", "crop_imgs.append", "crop_labels.append", "crop_xs.append", "crop_imgs.append", "crop_labels.append", "crop_xs.append", "crop_imgs.append", "crop_labels.append", "crop_xs.append", "crop_imgs.append", "crop_labels.append", "print", "len", "str"], "function", ["None"], ["", "def", "five_crop_mix", "(", "ims", ",", "labels", ",", "x_s", ",", "size", ",", "scale", "=", "8", ")", ":", "\n", "    ", "crop_imgs", "=", "[", "]", "\n", "crop_labels", "=", "[", "]", "\n", "crop_xs", "=", "[", "]", "\n", "for", "img", ",", "label", ",", "x_s", "in", "zip", "(", "ims", ",", "labels", ",", "x_s", ")", ":", "\n", "        ", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "h_s", "=", "int", "(", "h", "/", "scale", ")", "\n", "w_s", "=", "int", "(", "w", "/", "scale", ")", "\n", "c_h", "=", "size", "[", "0", "]", "\n", "c_w", "=", "size", "[", "1", "]", "\n", "c_h_s", "=", "int", "(", "c_h", "/", "scale", ")", "\n", "c_w_s", "=", "int", "(", "c_w", "/", "scale", ")", "\n", "if", "h", "<", "c_h", "or", "w", "<", "c_w", ":", "\n", "            ", "print", "(", "\"Cannot crop area {} from image with size ({}, {})\"", ".", "format", "(", "str", "(", "size", ")", ",", "h", ",", "w", ")", ")", "\n", "continue", "\n", "", "s_h_s", "=", "int", "(", "h_s", "/", "2", "-", "c_h_s", "/", "2", ")", "\n", "e_h_s", "=", "s_h_s", "+", "c_h_s", "\n", "s_w_s", "=", "int", "(", "w_s", "/", "2", "-", "c_w_s", "/", "2", ")", "\n", "e_w_s", "=", "s_w_s", "+", "c_w_s", "\n", "s_h", "=", "s_h_s", "*", "scale", "\n", "s_w", "=", "s_w_s", "*", "scale", "\n", "e_h", "=", "s_h", "+", "c_h", "\n", "e_w", "=", "s_w", "+", "c_w", "\n", "\n", "crop_xs", ".", "append", "(", "x_s", "[", ":", ",", "s_h_s", ":", "e_h_s", ",", "s_w_s", ":", "e_w_s", "]", ")", "\n", "crop_imgs", ".", "append", "(", "img", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", ")", "\n", "crop_labels", ".", "append", "(", "label", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", ")", "\n", "\n", "crop_xs", ".", "append", "(", "x_s", "[", ":", ",", ":", "c_h_s", ",", ":", "c_w_s", "]", ")", "\n", "crop_imgs", ".", "append", "(", "img", "[", ":", "c_h", ",", ":", "c_w", ",", ":", "]", ")", "\n", "crop_labels", ".", "append", "(", "label", "[", ":", "c_h", ",", ":", "c_w", ",", ":", "]", ")", "\n", "\n", "crop_xs", ".", "append", "(", "x_s", "[", ":", ",", "-", "c_h_s", ":", ",", "-", "c_w_s", ":", "]", ")", "\n", "crop_imgs", ".", "append", "(", "img", "[", "-", "c_h", ":", ",", "-", "c_w", ":", ",", ":", "]", ")", "\n", "crop_labels", ".", "append", "(", "label", "[", "-", "c_h", ":", ",", "-", "c_w", ":", ",", ":", "]", ")", "\n", "\n", "crop_xs", ".", "append", "(", "x_s", "[", ":", ",", ":", "c_h_s", ",", "-", "c_w_s", ":", "]", ")", "\n", "crop_imgs", ".", "append", "(", "img", "[", ":", "c_h", ",", "-", "c_w", ":", ",", ":", "]", ")", "\n", "crop_labels", ".", "append", "(", "label", "[", ":", "c_h", ",", "-", "c_w", ":", ",", ":", "]", ")", "\n", "\n", "crop_xs", ".", "append", "(", "x_s", "[", ":", ",", "-", "c_h_s", ":", ",", ":", "c_w_s", "]", ")", "\n", "crop_imgs", ".", "append", "(", "img", "[", "-", "c_h", ":", ",", ":", "c_w", ",", ":", "]", ")", "\n", "crop_labels", ".", "append", "(", "label", "[", "-", "c_h", ":", ",", ":", "c_w", ",", ":", "]", ")", "\n", "\n", "", "print", "(", "'Five crop finished. %d images created.'", "%", "len", "(", "crop_imgs", ")", ")", "\n", "return", "crop_imgs", ",", "crop_labels", ",", "crop_xs", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.sliding_crop": [[431, 467], ["print", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "range", "range", "str", "int", "int", "crop_imgs.append"], "function", ["None"], ["", "def", "sliding_crop", "(", "img", ",", "size", ")", ":", "\n", "# print(img.shape)", "\n", "    ", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "c_h", "=", "size", "[", "0", "]", "\n", "c_w", "=", "size", "[", "1", "]", "\n", "if", "h", "<", "c_h", "or", "w", "<", "c_w", ":", "\n", "        ", "print", "(", "\"Cannot crop area {} from image with size ({}, {})\"", "\n", ".", "format", "(", "str", "(", "size", ")", ",", "h", ",", "w", ")", ")", "\n", "", "else", ":", "\n", "        ", "h_rate", "=", "h", "/", "c_h", "\n", "w_rate", "=", "w", "/", "c_w", "\n", "h_times", "=", "math", ".", "ceil", "(", "h_rate", ")", "\n", "w_times", "=", "math", ".", "ceil", "(", "w_rate", ")", "\n", "stride_h", "=", "math", ".", "ceil", "(", "c_h", "*", "(", "h_times", "-", "h_rate", ")", "/", "(", "h_times", "-", "1", ")", ")", "\n", "stride_w", "=", "math", ".", "ceil", "(", "c_w", "*", "(", "w_times", "-", "w_rate", ")", "/", "(", "w_times", "-", "1", ")", ")", "\n", "crop_imgs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "h_times", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "w_times", ")", ":", "\n", "                ", "s_h", "=", "int", "(", "j", "*", "c_h", "-", "j", "*", "stride_h", ")", "\n", "if", "(", "j", "==", "(", "h_times", "-", "1", ")", ")", ":", "s_h", "=", "h", "-", "c_h", "\n", "e_h", "=", "s_h", "+", "c_h", "\n", "s_w", "=", "int", "(", "i", "*", "c_w", "-", "i", "*", "stride_w", ")", "\n", "if", "(", "i", "==", "(", "w_times", "-", "1", ")", ")", ":", "s_w", "=", "w", "-", "c_w", "\n", "e_w", "=", "s_w", "+", "c_w", "\n", "# print('%d %d %d %d'%(s_h, e_h, s_w, e_w))", "\n", "crop_im", "=", "img", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", "\n", "crop_imgs", ".", "append", "(", "crop_im", ")", "\n", "\n", "# crop_imgs_f = []", "\n", "# for im in crop_imgs:", "\n", "#     crop_imgs_f.append(cv2.flip(im, -1))", "\n", "\n", "# crops = np.concatenate((np.array(crop_imgs)), axis=0)", "\n", "# print(crops.shape)", "\n", "", "", "return", "crop_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rescale_image": [[468, 476], ["cv2.resize", "int", "int"], "function", ["None"], ["", "", "def", "rescale_image", "(", "img", ",", "scale", "=", "1", "/", "8", ",", "order", "=", "0", ")", ":", "\n", "    ", "flag", "=", "cv2", ".", "INTER_NEAREST", "\n", "if", "order", "==", "1", ":", "flag", "=", "cv2", ".", "INTER_LINEAR", "\n", "elif", "order", "==", "2", ":", "flag", "=", "cv2", ".", "INTER_AREA", "\n", "elif", "order", ">", "2", ":", "flag", "=", "cv2", ".", "INTER_CUBIC", "\n", "im_rescaled", "=", "cv2", ".", "resize", "(", "img", ",", "(", "int", "(", "img", ".", "shape", "[", "0", "]", "*", "scale", ")", ",", "int", "(", "img", ".", "shape", "[", "1", "]", "*", "scale", ")", ")", ",", "\n", "interpolation", "=", "flag", ")", "\n", "return", "im_rescaled", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.random_ResizeCrop": [[477, 485], ["random.uniform", "transform.rescale_image", "transform.rescale_image", "transform.random_crop", "isinstance"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rescale_image", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rescale_image", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.random_crop"], ["", "def", "random_ResizeCrop", "(", "img", ",", "label", ",", "crop_size", "=", "'same'", ",", "ratio_range", "=", "(", "1.0", ",", "2.0", ")", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "if", "crop_size", "==", "'same'", ":", "crop_size", "=", "(", "h", ",", "w", ")", "\n", "elif", "isinstance", "(", "size", ",", "int", ")", ":", "crop_size", "=", "(", "crop_size", ",", "crop_size", ")", "\n", "scale_ratio", "=", "random", ".", "uniform", "(", "ratio_range", "[", "0", "]", ",", "ratio_range", "[", "1", "]", ")", "\n", "img", "=", "rescale_image", "(", "img", ",", "scale", "=", "scale_ratio", ",", "order", "=", "3", ")", "\n", "label", "=", "rescale_image", "(", "label", ",", "scale", "=", "scale_ratio", ",", "order", "=", "0", ")", "\n", "return", "random_crop", "(", "img", ",", "label", ",", "crop_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.random_crop": [[486, 505], ["print", "random.randint", "random.randint", "str"], "function", ["None"], ["", "def", "random_crop", "(", "img", ",", "label", ",", "size", ")", ":", "\n", "# print(img.shape)", "\n", "    ", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "c_h", "=", "size", "[", "0", "]", "\n", "c_w", "=", "size", "[", "1", "]", "\n", "if", "h", "<", "c_h", "or", "w", "<", "c_w", ":", "\n", "        ", "print", "(", "\"Cannot crop area {} from image with size ({}, {})\"", "\n", ".", "format", "(", "str", "(", "size", ")", ",", "h", ",", "w", ")", ")", "\n", "", "else", ":", "\n", "        ", "s_h", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "c_h", ")", "\n", "e_h", "=", "s_h", "+", "c_h", "\n", "s_w", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "c_w", ")", "\n", "e_w", "=", "s_w", "+", "c_w", "\n", "\n", "crop_im", "=", "img", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", "\n", "crop_label", "=", "label", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", "]", "\n", "# print('%d %d %d %d'%(s_h, e_h, s_w, e_w))", "\n", "return", "crop_im", ",", "crop_label", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.random_crop_MCD": [[506, 527], ["print", "random.randint", "random.randint", "str"], "function", ["None"], ["", "", "def", "random_crop_MCD", "(", "img1", ",", "img2", ",", "label1", ",", "label2", ",", "size", ")", ":", "\n", "# print(img.shape)", "\n", "    ", "h", "=", "img1", ".", "shape", "[", "0", "]", "\n", "w", "=", "img1", ".", "shape", "[", "1", "]", "\n", "c_h", "=", "size", "[", "0", "]", "\n", "c_w", "=", "size", "[", "1", "]", "\n", "if", "h", "<", "c_h", "or", "w", "<", "c_w", ":", "\n", "        ", "print", "(", "\"Cannot crop area {} from image with size ({}, {})\"", "\n", ".", "format", "(", "str", "(", "size", ")", ",", "h", ",", "w", ")", ")", "\n", "", "else", ":", "\n", "        ", "s_h", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "c_h", ")", "\n", "e_h", "=", "s_h", "+", "c_h", "\n", "s_w", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "c_w", ")", "\n", "e_w", "=", "s_w", "+", "c_w", "\n", "\n", "crop_im1", "=", "img1", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", "\n", "crop_im2", "=", "img2", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", "\n", "crop_label1", "=", "label1", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", "]", "\n", "crop_label2", "=", "label2", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", "]", "\n", "# print('%d %d %d %d'%(s_h, e_h, s_w, e_w))", "\n", "return", "crop_im1", ",", "crop_im2", ",", "crop_label1", ",", "crop_label2", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.random_crop_2s": [[528, 558], ["int", "int", "print", "random.randint", "random.randint"], "function", ["None"], ["", "", "def", "random_crop_2s", "(", "img_s", ",", "label_s", ",", "img", ",", "label", ",", "crop_size_global", ",", "crop_size_local", ",", "scale", ")", ":", "\n", "# print(img.shape)", "\n", "    ", "h_s", ",", "w_s", "=", "img_s", ".", "shape", "[", ":", "2", "]", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "padding_size", "=", "int", "(", "(", "crop_size_global", "-", "crop_size_local", ")", "/", "scale", ")", "\n", "crop_size_s", "=", "int", "(", "crop_size_global", "/", "scale", ")", "\n", "\n", "if", "h_s", "<", "crop_size_s", "or", "w_s", "<", "crop_size_s", "or", "h", "<", "crop_size_local", "or", "w", "<", "crop_size_local", ":", "\n", "        ", "print", "(", "'Crop failed. Size error.'", ")", "\n", "", "else", ":", "\n", "        ", "h_seed", "=", "random", ".", "randint", "(", "0", ",", "h_s", "-", "crop_size_s", ")", "\n", "w_seed", "=", "random", ".", "randint", "(", "0", ",", "w_s", "-", "crop_size_s", ")", "\n", "\n", "start_h_s", "=", "h_seed", "\n", "end_h_s", "=", "start_h_s", "+", "crop_size_s", "\n", "start_w_s", "=", "w_seed", "\n", "end_w_s", "=", "start_w_s", "+", "crop_size_s", "\n", "crop_im_s", "=", "img_s", "[", "start_h_s", ":", "end_h_s", ",", "start_w_s", ":", "end_w_s", ",", ":", "]", "\n", "crop_label_s", "=", "label_s", "[", "start_h_s", ":", "end_h_s", ",", "start_w_s", ":", "end_w_s", "]", "\n", "#print('start_h_s%d, end_h_s%d, start_w_s%d, end_w_s%d'%(start_h_s,end_h_s,start_w_s,end_w_s))", "\n", "\n", "start_h", "=", "h_seed", "*", "scale", "\n", "end_h", "=", "start_h", "+", "crop_size_local", "\n", "start_w", "=", "w_seed", "*", "scale", "\n", "end_w", "=", "start_w", "+", "crop_size_local", "\n", "#print('start_h%d, end_h%d, start_w%d, end_w%d'%(start_h,end_h,start_w,end_w))", "\n", "crop_im", "=", "img", "[", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", ",", ":", "]", "\n", "crop_label", "=", "label", "[", "start_h", ":", "end_h", ",", "start_w", ":", "end_w", "]", "\n", "\n", "return", "crop_im_s", ",", "crop_label_s", ",", "crop_im", ",", "crop_label", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.random_crop_mix": [[559, 588], ["int", "int", "int", "int", "print", "random.randint", "random.randint", "str"], "function", ["None"], ["", "", "def", "random_crop_mix", "(", "img", ",", "label", ",", "x_s", ",", "size", ",", "scale", "=", "8", ")", ":", "\n", "# print(img.shape)", "\n", "    ", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "c_h", "=", "size", "[", "0", "]", "\n", "c_w", "=", "size", "[", "1", "]", "\n", "c_h_s", "=", "int", "(", "c_h", "/", "scale", ")", "\n", "c_w_s", "=", "int", "(", "c_w", "/", "scale", ")", "\n", "h_times", "=", "int", "(", "h", "/", "scale", "-", "c_h_s", ")", "\n", "w_times", "=", "int", "(", "w", "/", "scale", "-", "c_w_s", ")", "\n", "if", "h", "<", "c_h", "or", "w", "<", "c_w", ":", "\n", "        ", "print", "(", "\"Cannot crop area {} from image with size ({}, {})\"", "\n", ".", "format", "(", "str", "(", "size", ")", ",", "h", ",", "w", ")", ")", "\n", "", "else", ":", "\n", "        ", "s_h_s", "=", "random", ".", "randint", "(", "0", ",", "h_times", ")", "\n", "s_h", "=", "s_h_s", "*", "scale", "\n", "s_w_s", "=", "random", ".", "randint", "(", "0", ",", "w_times", ")", "\n", "s_w", "=", "s_w_s", "*", "scale", "\n", "e_h_s", "=", "s_h_s", "+", "c_h_s", "\n", "e_w_s", "=", "s_w_s", "+", "c_w_s", "\n", "e_h", "=", "s_h", "+", "c_h", "\n", "e_w", "=", "s_w", "+", "c_w", "\n", "\n", "crop_im", "=", "img", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", "\n", "crop_label", "=", "label", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", "]", "\n", "crop_xs", "=", "x_s", "[", ":", ",", "s_h_s", ":", "e_h_s", ",", "s_w_s", ":", "e_w_s", "]", "\n", "# print('%d %d %d %d' % (s_h, e_h, s_w, e_w))", "\n", "# print('%d %d %d %d' % (s_h_s, e_h_s, s_w_s, e_w_s))", "\n", "return", "crop_im", ",", "crop_label", ",", "crop_xs", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.create_crops_mix": [[589, 627], ["zip", "print", "int", "int", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "range", "print", "range", "len", "int", "int", "int", "int", "crop_imgs.append", "crop_labels.append", "crop_x_s.append", "str"], "function", ["None"], ["", "", "def", "create_crops_mix", "(", "ims", ",", "labels", ",", "x_s", ",", "size", ",", "scale", "=", "1", "/", "8", ")", ":", "\n", "    ", "crop_imgs", "=", "[", "]", "\n", "crop_labels", "=", "[", "]", "\n", "crop_x_s", "=", "[", "]", "\n", "for", "img", ",", "label", ",", "x", "in", "zip", "(", "ims", ",", "labels", ",", "x_s", ")", ":", "\n", "        ", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "c_h", "=", "size", "[", "0", "]", "\n", "c_w", "=", "size", "[", "1", "]", "\n", "c_h_s", "=", "int", "(", "c_h", "*", "scale", ")", "\n", "c_w_s", "=", "int", "(", "c_w", "*", "scale", ")", "\n", "if", "h", "<", "c_h", "or", "w", "<", "c_w", ":", "\n", "            ", "print", "(", "\"Cannot crop area {} from image with size ({}, {})\"", ".", "format", "(", "str", "(", "size", ")", ",", "h", ",", "w", ")", ")", "\n", "continue", "\n", "", "h_rate", "=", "h", "/", "c_h", "\n", "w_rate", "=", "w", "/", "c_w", "\n", "h_times", "=", "math", ".", "ceil", "(", "h_rate", ")", "\n", "w_times", "=", "math", ".", "ceil", "(", "w_rate", ")", "\n", "stride_h", "=", "math", ".", "ceil", "(", "c_h", "*", "(", "h_times", "-", "h_rate", ")", "/", "(", "h_times", "-", "1", ")", ")", "\n", "stride_w", "=", "math", ".", "ceil", "(", "c_w", "*", "(", "w_times", "-", "w_rate", ")", "/", "(", "w_times", "-", "1", ")", ")", "\n", "for", "j", "in", "range", "(", "h_times", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "w_times", ")", ":", "\n", "                ", "s_h", "=", "int", "(", "j", "*", "c_h", "-", "j", "*", "stride_h", ")", "\n", "s_h_s", "=", "int", "(", "s_h", "*", "scale", ")", "\n", "if", "(", "j", "==", "(", "h_times", "-", "1", ")", ")", ":", "s_h", "=", "h", "-", "c_h", "\n", "e_h", "=", "s_h", "+", "c_h", "\n", "e_h_s", "=", "s_h_s", "+", "c_h_s", "\n", "s_w", "=", "int", "(", "i", "*", "c_w", "-", "i", "*", "stride_w", ")", "\n", "s_w_s", "=", "int", "(", "s_w", "*", "scale", ")", "\n", "if", "(", "i", "==", "(", "w_times", "-", "1", ")", ")", ":", "s_w", "=", "w", "-", "c_w", "\n", "e_w", "=", "s_w", "+", "c_w", "\n", "e_w_s", "=", "s_w_s", "+", "c_w_s", "\n", "crop_imgs", ".", "append", "(", "img", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", ")", "\n", "crop_labels", ".", "append", "(", "label", "[", "s_h", ":", "e_h", ",", "s_w", ":", "e_w", ",", ":", "]", ")", "\n", "crop_x_s", ".", "append", "(", "x", "[", ":", ",", "s_h_s", ":", "e_h_s", ",", "s_w_s", ":", "e_w_s", "]", ")", "\n", "\n", "", "", "", "print", "(", "'Sliding crop finished. %d images created.'", "%", "len", "(", "crop_imgs", ")", ")", "\n", "return", "crop_imgs", ",", "crop_labels", ",", "crop_x_s", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.crop_around_center": [[628, 649], ["int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "crop_around_center", "(", "image", ",", "width", ",", "height", ")", ":", "\n", "    ", "\"\"\"\n    Given a NumPy / OpenCV 2 image, crops it to the given width and height,\n    around it's centre point\n    \"\"\"", "\n", "\n", "image_size", "=", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", "\n", "image_center", "=", "(", "int", "(", "image_size", "[", "0", "]", "*", "0.5", ")", ",", "int", "(", "image_size", "[", "1", "]", "*", "0.5", ")", ")", "\n", "\n", "if", "(", "width", ">", "image_size", "[", "0", "]", ")", ":", "\n", "        ", "width", "=", "image_size", "[", "0", "]", "\n", "\n", "", "if", "(", "height", ">", "image_size", "[", "1", "]", ")", ":", "\n", "        ", "height", "=", "image_size", "[", "1", "]", "\n", "\n", "", "x1", "=", "int", "(", "image_center", "[", "0", "]", "-", "width", "*", "0.5", ")", "\n", "x2", "=", "int", "(", "image_center", "[", "0", "]", "+", "width", "*", "0.5", ")", "\n", "y1", "=", "int", "(", "image_center", "[", "1", "]", "-", "height", "*", "0.5", ")", "\n", "y2", "=", "int", "(", "image_center", "[", "1", "]", "+", "height", "*", "0.5", ")", "\n", "\n", "return", "image", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.largest_rotated_rect": [[650, 683], ["int", "math.atan2", "math.atan2", "math.cos", "math.sin", "math.cos", "math.tan", "math.floor", "math.cos", "math.sin", "math.sin", "math.cos", "math.sin"], "function", ["None"], ["", "def", "largest_rotated_rect", "(", "w", ",", "h", ",", "angle", ")", ":", "\n", "    ", "\"\"\"\n    Given a rectangle of size wxh that has been rotated by 'angle' (in\n    radians), computes the width and height of the largest possible\n    axis-aligned rectangle within the rotated rectangle.\n\n    Original JS code by 'Andri' and Magnus Hoff from Stack Overflow\n\n    Converted to Python by Aaron Snoswell\n    \"\"\"", "\n", "\n", "quadrant", "=", "int", "(", "math", ".", "floor", "(", "angle", "/", "(", "math", ".", "pi", "/", "2", ")", ")", ")", "&", "3", "\n", "sign_alpha", "=", "angle", "if", "(", "(", "quadrant", "&", "1", ")", "==", "0", ")", "else", "math", ".", "pi", "-", "angle", "\n", "alpha", "=", "(", "sign_alpha", "%", "math", ".", "pi", "+", "math", ".", "pi", ")", "%", "math", ".", "pi", "\n", "\n", "bb_w", "=", "w", "*", "math", ".", "cos", "(", "alpha", ")", "+", "h", "*", "math", ".", "sin", "(", "alpha", ")", "\n", "bb_h", "=", "w", "*", "math", ".", "sin", "(", "alpha", ")", "+", "h", "*", "math", ".", "cos", "(", "alpha", ")", "\n", "\n", "gamma", "=", "math", ".", "atan2", "(", "bb_w", ",", "bb_w", ")", "if", "(", "w", "<", "h", ")", "else", "math", ".", "atan2", "(", "bb_w", ",", "bb_w", ")", "\n", "\n", "delta", "=", "math", ".", "pi", "-", "alpha", "-", "gamma", "\n", "\n", "length", "=", "h", "if", "(", "w", "<", "h", ")", "else", "w", "\n", "\n", "d", "=", "length", "*", "math", ".", "cos", "(", "alpha", ")", "\n", "a", "=", "d", "*", "math", ".", "sin", "(", "alpha", ")", "/", "math", ".", "sin", "(", "delta", ")", "\n", "\n", "y", "=", "a", "*", "math", ".", "cos", "(", "gamma", ")", "\n", "x", "=", "y", "*", "math", ".", "tan", "(", "gamma", ")", "\n", "\n", "return", "(", "\n", "bb_w", "-", "2", "*", "x", ",", "\n", "bb_h", "-", "2", "*", "y", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.Rotate_Aug": [[685, 701], ["range", "print", "len", "range", "print", "transform.rotate_image", "transform.rotate_image", "transform.largest_rotated_rect", "transform.crop_around_center", "transform.crop_around_center", "imgs.append", "labels.append", "len", "math.radians"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rotate_image", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rotate_image", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.largest_rotated_rect", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.crop_around_center", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.crop_around_center"], ["", "def", "Rotate_Aug", "(", "imgs", ",", "labels", ",", "step", "=", "20", ",", "start_angle", "=", "20", ",", "max_angle", "=", "179", ")", ":", "\n", "    ", "for", "idx", "in", "range", "(", "len", "(", "imgs", ")", ")", ":", "\n", "        ", "im", "=", "imgs", "[", "idx", "]", "\n", "l", "=", "labels", "[", "idx", "]", "\n", "image_height", ",", "image_width", "=", "im", ".", "shape", "[", "0", ":", "2", "]", "\n", "for", "i", "in", "range", "(", "start_angle", ",", "max_angle", ",", "step", ")", ":", "\n", "            ", "im_rotated", "=", "rotate_image", "(", "im", ",", "i", ",", "order", "=", "3", ")", "\n", "l_rotated", "=", "rotate_image", "(", "l", ",", "i", ",", "order", "=", "0", ")", "\n", "crop_w", ",", "crop_h", "=", "largest_rotated_rect", "(", "image_width", ",", "image_height", ",", "math", ".", "radians", "(", "i", ")", ")", "\n", "im_rotated_cropped", "=", "crop_around_center", "(", "im_rotated", ",", "crop_w", ",", "crop_h", ")", "\n", "l_rotated_cropped", "=", "crop_around_center", "(", "l_rotated", ",", "crop_w", ",", "crop_h", ")", "\n", "imgs", ".", "append", "(", "im_rotated_cropped", ")", "\n", "labels", ".", "append", "(", "l_rotated_cropped", ")", "\n", "", "print", "(", "'Img %d rotated.'", "%", "idx", ")", "\n", "", "print", "(", "'Rotation finished. %d images in total.'", "%", "len", "(", "imgs", ")", ")", "\n", "return", "imgs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.Rotate_Aug_S": [[702, 716], ["range", "print", "transform.rotate_image", "transform.rotate_image", "transform.largest_rotated_rect", "transform.crop_around_center", "transform.crop_around_center", "imgs.append", "labels.append", "math.radians", "len"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rotate_image", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rotate_image", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.largest_rotated_rect", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.crop_around_center", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.crop_around_center"], ["", "def", "Rotate_Aug_S", "(", "im", ",", "l", ",", "step", "=", "20", ",", "start_angle", "=", "15", ",", "max_angle", "=", "89", ")", ":", "\n", "    ", "imgs", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "image_height", ",", "image_width", "=", "im", ".", "shape", "[", "0", ":", "2", "]", "\n", "for", "i", "in", "range", "(", "start_angle", ",", "max_angle", ",", "step", ")", ":", "\n", "        ", "im_rotated", "=", "rotate_image", "(", "im", ",", "i", ",", "order", "=", "1", ")", "\n", "l_rotated", "=", "rotate_image", "(", "l", ",", "i", ",", "order", "=", "0", ")", "\n", "crop_w", ",", "crop_h", "=", "largest_rotated_rect", "(", "image_width", ",", "image_height", ",", "math", ".", "radians", "(", "i", ")", ")", "\n", "im_rotated_cropped", "=", "crop_around_center", "(", "im_rotated", ",", "crop_w", ",", "crop_h", ")", "\n", "l_rotated_cropped", "=", "crop_around_center", "(", "l_rotated", ",", "crop_w", ",", "crop_h", ")", "\n", "imgs", ".", "append", "(", "im_rotated_cropped", ")", "\n", "labels", ".", "append", "(", "l_rotated_cropped", ")", "\n", "", "print", "(", "'Rotation finished. %d images added.'", "%", "len", "(", "imgs", ")", ")", "\n", "return", "imgs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc.PolyLR.__init__": [[66, 74], ["float", "misc.PolyLR.init_lr_groups.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "curr_iter", ",", "max_iter", ",", "lr_decay", ")", ":", "\n", "        ", "self", ".", "max_iter", "=", "float", "(", "max_iter", ")", "\n", "self", ".", "init_lr_groups", "=", "[", "]", "\n", "for", "p", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "self", ".", "init_lr_groups", ".", "append", "(", "p", "[", "'lr'", "]", ")", "\n", "", "self", ".", "param_groups", "=", "optimizer", ".", "param_groups", "\n", "self", ".", "curr_iter", "=", "curr_iter", "\n", "self", ".", "lr_decay", "=", "lr_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc.PolyLR.step": [[75, 78], ["enumerate"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "for", "idx", ",", "p", "in", "enumerate", "(", "self", ".", "param_groups", ")", ":", "\n", "            ", "p", "[", "'lr'", "]", "=", "self", ".", "init_lr_groups", "[", "idx", "]", "*", "(", "1", "-", "self", ".", "curr_iter", "/", "self", ".", "max_iter", ")", "**", "self", ".", "lr_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc.Conv2dDeformable.__init__": [[82, 93], ["torch.nn.Module.__init__", "isinstance", "torch.nn.Conv2d", "torch.nn.Conv2d", "misc.Conv2dDeformable.offset_filter.weight.data.normal_"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "regular_filter", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv2dDeformable", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "regular_filter", ",", "nn", ".", "Conv2d", ")", "\n", "self", ".", "regular_filter", "=", "regular_filter", "\n", "self", ".", "offset_filter", "=", "nn", ".", "Conv2d", "(", "regular_filter", ".", "in_channels", ",", "2", "*", "regular_filter", ".", "in_channels", ",", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "offset_filter", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.0005", ")", "\n", "self", ".", "input_shape", "=", "None", "\n", "self", ".", "grid_w", "=", "None", "\n", "self", ".", "grid_h", "=", "None", "\n", "self", ".", "cuda", "=", "cuda", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc.Conv2dDeformable.forward": [[94, 117], ["misc.Conv2dDeformable.size", "misc.Conv2dDeformable.offset_filter", "torch.split", "torch.split", "torch.split", "torch.split", "offset_w.contiguous().view.contiguous().view.contiguous().view", "offset_h.contiguous().view.contiguous().view.contiguous().view", "misc.Conv2dDeformable.contiguous().view().unsqueeze", "torch.grid_sample", "torch.grid_sample", "misc.Conv2dDeformable.contiguous().view", "misc.Conv2dDeformable.regular_filter", "int", "int", "int", "int", "numpy.meshgrid", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "int", "int", "int", "offset_w.contiguous().view.contiguous().view.contiguous", "offset_h.contiguous().view.contiguous().view.contiguous", "numpy.linspace", "numpy.linspace", "grid_w.cuda.cuda.cuda", "grid_h.cuda.cuda.cuda", "misc.Conv2dDeformable.contiguous().view", "misc.Conv2dDeformable.contiguous", "int", "int", "misc.Conv2dDeformable.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_shape", "=", "x", ".", "size", "(", ")", "# (b, c, h, w)", "\n", "offset", "=", "self", ".", "offset_filter", "(", "x", ")", "# (b, 2*c, h, w)", "\n", "offset_w", ",", "offset_h", "=", "torch", ".", "split", "(", "offset", ",", "self", ".", "regular_filter", ".", "in_channels", ",", "1", ")", "# (b, c, h, w)", "\n", "offset_w", "=", "offset_w", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "int", "(", "x_shape", "[", "2", "]", ")", ",", "int", "(", "x_shape", "[", "3", "]", ")", ")", "# (b*c, h, w)", "\n", "offset_h", "=", "offset_h", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "int", "(", "x_shape", "[", "2", "]", ")", ",", "int", "(", "x_shape", "[", "3", "]", ")", ")", "# (b*c, h, w)", "\n", "if", "not", "self", ".", "input_shape", "or", "self", ".", "input_shape", "!=", "x_shape", ":", "\n", "            ", "self", ".", "input_shape", "=", "x_shape", "\n", "grid_w", ",", "grid_h", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "x_shape", "[", "3", "]", ")", ",", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "x_shape", "[", "2", "]", ")", ")", "# (h, w)", "\n", "grid_w", "=", "torch", ".", "Tensor", "(", "grid_w", ")", "\n", "grid_h", "=", "torch", ".", "Tensor", "(", "grid_h", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "grid_w", "=", "grid_w", ".", "cuda", "(", ")", "\n", "grid_h", "=", "grid_h", ".", "cuda", "(", ")", "\n", "", "self", ".", "grid_w", "=", "nn", ".", "Parameter", "(", "grid_w", ")", "\n", "self", ".", "grid_h", "=", "nn", ".", "Parameter", "(", "grid_h", ")", "\n", "", "offset_w", "=", "offset_w", "+", "self", ".", "grid_w", "# (b*c, h, w)", "\n", "offset_h", "=", "offset_h", "+", "self", ".", "grid_h", "# (b*c, h, w)", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "int", "(", "x_shape", "[", "2", "]", ")", ",", "int", "(", "x_shape", "[", "3", "]", ")", ")", ".", "unsqueeze", "(", "1", ")", "# (b*c, 1, h, w)", "\n", "x", "=", "F", ".", "grid_sample", "(", "x", ",", "torch", ".", "stack", "(", "(", "offset_h", ",", "offset_w", ")", ",", "3", ")", ")", "# (b*c, h, w)", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "int", "(", "x_shape", "[", "1", "]", ")", ",", "int", "(", "x_shape", "[", "2", "]", ")", ",", "int", "(", "x_shape", "[", "3", "]", ")", ")", "# (b, c, h, w)", "\n", "x", "=", "self", ".", "regular_filter", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc.check_mkdir": [[11, 14], ["os.path.exists", "os.mkdir"], "function", ["None"], ["def", "check_mkdir", "(", "dir_name", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc.initialize_weights": [[16, 26], ["model.modules", "isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "isinstance", "module.bias.data.zero_", "module.weight.data.fill_", "module.bias.data.zero_"], "function", ["None"], ["", "", "def", "initialize_weights", "(", "*", "models", ")", ":", "\n", "    ", "for", "model", "in", "models", ":", "\n", "        ", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc.get_upsampling_weight": [[28, 39], ["numpy.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "abs", "abs", "list", "list", "range", "range"], "function", ["None"], ["", "", "", "", "def", "get_upsampling_weight", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ")", ":", "\n", "    ", "factor", "=", "(", "kernel_size", "+", "1", ")", "//", "2", "\n", "if", "kernel_size", "%", "2", "==", "1", ":", "\n", "        ", "center", "=", "factor", "-", "1", "\n", "", "else", ":", "\n", "        ", "center", "=", "factor", "-", "0.5", "\n", "", "og", "=", "np", ".", "ogrid", "[", ":", "kernel_size", ",", ":", "kernel_size", "]", "\n", "filt", "=", "(", "1", "-", "abs", "(", "og", "[", "0", "]", "-", "center", ")", "/", "factor", ")", "*", "(", "1", "-", "abs", "(", "og", "[", "1", "]", "-", "center", ")", "/", "factor", ")", "\n", "weight", "=", "np", ".", "zeros", "(", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "kernel_size", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "weight", "[", "list", "(", "range", "(", "in_channels", ")", ")", ",", "list", "(", "range", "(", "out_channels", ")", ")", ",", ":", ",", ":", "]", "=", "filt", "\n", "return", "torch", ".", "from_numpy", "(", "weight", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc._fast_hist": [[42, 48], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "function", ["None"], ["", "def", "_fast_hist", "(", "label_pred", ",", "label_true", ",", "num_classes", ")", ":", "\n", "    ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "num_classes", ")", "\n", "hist", "=", "np", ".", "bincount", "(", "\n", "num_classes", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "\n", "label_pred", "[", "mask", "]", ",", "minlength", "=", "num_classes", "**", "2", ")", ".", "reshape", "(", "num_classes", ",", "num_classes", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc.evaluate": [[50, 63], ["numpy.zeros", "zip", "numpy.nanmean", "numpy.nanmean", "misc._fast_hist", "numpy.diag().sum", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "numpy.diag", "np.zeros.sum", "np.zeros.sum", "lp.flatten", "lt.flatten", "numpy.diag", "numpy.diag", "np.zeros.sum", "np.zeros.sum"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc._fast_hist"], ["", "def", "evaluate", "(", "predictions", ",", "gts", ",", "num_classes", ")", ":", "\n", "    ", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "for", "lp", ",", "lt", "in", "zip", "(", "predictions", ",", "gts", ")", ":", "\n", "        ", "hist", "+=", "_fast_hist", "(", "lp", ".", "flatten", "(", ")", ",", "lt", ".", "flatten", "(", ")", ",", "num_classes", ")", "\n", "# axis 0: gt, axis 1: prediction", "\n", "", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "acc_cls", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "acc_cls", "=", "np", ".", "nanmean", "(", "acc_cls", ")", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "axis", "=", "1", ")", "+", "hist", ".", "sum", "(", "axis", "=", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "mean_iu", "=", "np", ".", "nanmean", "(", "iu", ")", "\n", "freq", "=", "hist", ".", "sum", "(", "axis", "=", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "fwavacc", "=", "(", "freq", "[", "freq", ">", "0", "]", "*", "iu", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "return", "acc", ",", "acc_cls", ",", "mean_iu", ",", "fwavacc", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc.sliced_forward": [[119, 221], ["max", "max", "torch.pad", "F.pad.size", "F.pad.size", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.upsample", "torch.autograd.Variable().cuda", "max", "print", "torch.upsample", "max", "torch.autograd.Variable", "torch.autograd.Variable", "int", "int", "F.upsample.size", "F.upsample.size", "torch.zeros", "torch.zeros", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "int", "range", "torch.autograd.Variable().cuda", "misc.sliced_forward._pad"], "function", ["None"], ["", "", "def", "sliced_forward", "(", "single_forward", ")", ":", "\n", "    ", "def", "_pad", "(", "x", ",", "crop_size", ")", ":", "\n", "        ", "h", ",", "w", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "pad_h", "=", "max", "(", "crop_size", "-", "h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "crop_size", "-", "w", ",", "0", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "pad_w", ",", "0", ",", "pad_h", ")", ")", "\n", "return", "x", ",", "pad_h", ",", "pad_w", "\n", "\n", "", "def", "wrapper", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", ",", "_", ",", "ori_h", ",", "ori_w", "=", "x", ".", "size", "(", ")", "\n", "if", "self", ".", "training", "and", "self", ".", "use_aux", ":", "\n", "            ", "outputs_all_scales", "=", "Variable", "(", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "num_classes", ",", "ori_h", ",", "ori_w", ")", ")", ")", ".", "cuda", "(", ")", "\n", "aux_all_scales", "=", "Variable", "(", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "num_classes", ",", "ori_h", ",", "ori_w", ")", ")", ")", ".", "cuda", "(", ")", "\n", "for", "s", "in", "self", ".", "scales", ":", "\n", "                ", "new_size", "=", "(", "int", "(", "ori_h", "*", "s", ")", ",", "int", "(", "ori_w", "*", "s", ")", ")", "\n", "scaled_x", "=", "F", ".", "upsample", "(", "x", ",", "size", "=", "new_size", ",", "mode", "=", "'bilinear'", ")", "\n", "scaled_x", "=", "Variable", "(", "scaled_x", ")", ".", "cuda", "(", ")", "\n", "scaled_h", ",", "scaled_w", "=", "scaled_x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "long_size", "=", "max", "(", "scaled_h", ",", "scaled_w", ")", "\n", "print", "(", "scaled_x", ".", "size", "(", ")", ")", "\n", "\n", "if", "long_size", ">", "self", ".", "crop_size", ":", "\n", "                    ", "count", "=", "torch", ".", "zeros", "(", "(", "scaled_h", ",", "scaled_w", ")", ")", "\n", "outputs", "=", "Variable", "(", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "num_classes", ",", "scaled_h", ",", "scaled_w", ")", ")", ")", ".", "cuda", "(", ")", "\n", "aux_outputs", "=", "Variable", "(", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "num_classes", ",", "scaled_h", ",", "scaled_w", ")", ")", ")", ".", "cuda", "(", ")", "\n", "stride", "=", "int", "(", "ceil", "(", "self", ".", "crop_size", "*", "self", ".", "stride_rate", ")", ")", "\n", "h_step_num", "=", "int", "(", "ceil", "(", "(", "scaled_h", "-", "self", ".", "crop_size", ")", "/", "stride", ")", ")", "+", "1", "\n", "w_step_num", "=", "int", "(", "ceil", "(", "(", "scaled_w", "-", "self", ".", "crop_size", ")", "/", "stride", ")", ")", "+", "1", "\n", "for", "yy", "in", "range", "(", "h_step_num", ")", ":", "\n", "                        ", "for", "xx", "in", "range", "(", "w_step_num", ")", ":", "\n", "                            ", "sy", ",", "sx", "=", "yy", "*", "stride", ",", "xx", "*", "stride", "\n", "ey", ",", "ex", "=", "sy", "+", "self", ".", "crop_size", ",", "sx", "+", "self", ".", "crop_size", "\n", "x_sub", "=", "scaled_x", "[", ":", ",", ":", ",", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "\n", "x_sub", ",", "pad_h", ",", "pad_w", "=", "_pad", "(", "x_sub", ",", "self", ".", "crop_size", ")", "\n", "print", "(", "x_sub", ".", "size", "(", ")", ")", "\n", "outputs_sub", ",", "aux_sub", "=", "single_forward", "(", "self", ",", "x_sub", ")", "\n", "\n", "if", "sy", "+", "self", ".", "crop_size", ">", "scaled_h", ":", "\n", "                                ", "outputs_sub", "=", "outputs_sub", "[", ":", ",", ":", ",", ":", "-", "pad_h", ",", ":", "]", "\n", "aux_sub", "=", "aux_sub", "[", ":", ",", ":", ",", ":", "-", "pad_h", ",", ":", "]", "\n", "\n", "", "if", "sx", "+", "self", ".", "crop_size", ">", "scaled_w", ":", "\n", "                                ", "outputs_sub", "=", "outputs_sub", "[", ":", ",", ":", ",", ":", ",", ":", "-", "pad_w", "]", "\n", "aux_sub", "=", "aux_sub", "[", ":", ",", ":", ",", ":", ",", ":", "-", "pad_w", "]", "\n", "\n", "", "outputs", "[", ":", ",", ":", ",", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "=", "outputs_sub", "\n", "aux_outputs", "[", ":", ",", ":", ",", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "=", "aux_sub", "\n", "\n", "count", "[", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "+=", "1", "\n", "", "", "count", "=", "Variable", "(", "count", ")", ".", "cuda", "(", ")", "\n", "outputs", "=", "(", "outputs", "/", "count", ")", "\n", "aux_outputs", "=", "(", "outputs", "/", "count", ")", "\n", "", "else", ":", "\n", "                    ", "scaled_x", ",", "pad_h", ",", "pad_w", "=", "_pad", "(", "scaled_x", ",", "self", ".", "crop_size", ")", "\n", "outputs", ",", "aux_outputs", "=", "single_forward", "(", "self", ",", "scaled_x", ")", "\n", "outputs", "=", "outputs", "[", ":", ",", ":", ",", ":", "-", "pad_h", ",", ":", "-", "pad_w", "]", "\n", "aux_outputs", "=", "aux_outputs", "[", ":", ",", ":", ",", ":", "-", "pad_h", ",", ":", "-", "pad_w", "]", "\n", "", "outputs_all_scales", "+=", "outputs", "\n", "aux_all_scales", "+=", "aux_outputs", "\n", "", "return", "outputs_all_scales", "/", "len", "(", "self", ".", "scales", ")", ",", "aux_all_scales", "\n", "", "else", ":", "\n", "            ", "outputs_all_scales", "=", "Variable", "(", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "num_classes", ",", "ori_h", ",", "ori_w", ")", ")", ")", ".", "cuda", "(", ")", "\n", "for", "s", "in", "self", ".", "scales", ":", "\n", "                ", "new_size", "=", "(", "int", "(", "ori_h", "*", "s", ")", ",", "int", "(", "ori_w", "*", "s", ")", ")", "\n", "scaled_x", "=", "F", ".", "upsample", "(", "x", ",", "size", "=", "new_size", ",", "mode", "=", "'bilinear'", ")", "\n", "scaled_h", ",", "scaled_w", "=", "scaled_x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "long_size", "=", "max", "(", "scaled_h", ",", "scaled_w", ")", "\n", "\n", "if", "long_size", ">", "self", ".", "crop_size", ":", "\n", "                    ", "count", "=", "torch", ".", "zeros", "(", "(", "scaled_h", ",", "scaled_w", ")", ")", "\n", "outputs", "=", "Variable", "(", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "num_classes", ",", "scaled_h", ",", "scaled_w", ")", ")", ")", ".", "cuda", "(", ")", "\n", "stride", "=", "int", "(", "ceil", "(", "self", ".", "crop_size", "*", "self", ".", "stride_rate", ")", ")", "\n", "h_step_num", "=", "int", "(", "ceil", "(", "(", "scaled_h", "-", "self", ".", "crop_size", ")", "/", "stride", ")", ")", "+", "1", "\n", "w_step_num", "=", "int", "(", "ceil", "(", "(", "scaled_w", "-", "self", ".", "crop_size", ")", "/", "stride", ")", ")", "+", "1", "\n", "for", "yy", "in", "range", "(", "h_step_num", ")", ":", "\n", "                        ", "for", "xx", "in", "range", "(", "w_step_num", ")", ":", "\n", "                            ", "sy", ",", "sx", "=", "yy", "*", "stride", ",", "xx", "*", "stride", "\n", "ey", ",", "ex", "=", "sy", "+", "self", ".", "crop_size", ",", "sx", "+", "self", ".", "crop_size", "\n", "x_sub", "=", "scaled_x", "[", ":", ",", ":", ",", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "\n", "x_sub", ",", "pad_h", ",", "pad_w", "=", "_pad", "(", "x_sub", ",", "self", ".", "crop_size", ")", "\n", "\n", "outputs_sub", "=", "single_forward", "(", "self", ",", "x_sub", ")", "\n", "\n", "if", "sy", "+", "self", ".", "crop_size", ">", "scaled_h", ":", "\n", "                                ", "outputs_sub", "=", "outputs_sub", "[", ":", ",", ":", ",", ":", "-", "pad_h", ",", ":", "]", "\n", "\n", "", "if", "sx", "+", "self", ".", "crop_size", ">", "scaled_w", ":", "\n", "                                ", "outputs_sub", "=", "outputs_sub", "[", ":", ",", ":", ",", ":", ",", ":", "-", "pad_w", "]", "\n", "\n", "", "outputs", "[", ":", ",", ":", ",", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "=", "outputs_sub", "\n", "\n", "count", "[", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "+=", "1", "\n", "", "", "count", "=", "Variable", "(", "count", ")", ".", "cuda", "(", ")", "\n", "outputs", "=", "(", "outputs", "/", "count", ")", "\n", "", "else", ":", "\n", "                    ", "scaled_x", ",", "pad_h", ",", "pad_w", "=", "_pad", "(", "scaled_x", ",", "self", ".", "crop_size", ")", "\n", "outputs", "=", "single_forward", "(", "self", ",", "scaled_x", ")", "\n", "outputs", "=", "outputs", "[", ":", ",", ":", ",", ":", "-", "pad_h", ",", ":", "-", "pad_w", "]", "\n", "", "outputs_all_scales", "+=", "outputs", "\n", "", "return", "outputs_all_scales", "\n", "\n", "", "", "return", "wrapper", "\n", "", ""]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.data_vis.plot_img_and_mask": [[3, 13], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.set_title", "matplotlib.imshow", "plt.figure.add_subplot", "fig.add_subplot.set_title", "matplotlib.imshow", "matplotlib.show"], "function", ["None"], ["def", "plot_img_and_mask", "(", "img", ",", "mask", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "a", "=", "fig", ".", "add_subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "a", ".", "set_title", "(", "'Input image'", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "\n", "b", "=", "fig", ".", "add_subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "b", ".", "set_title", "(", "'Output mask'", ")", "\n", "plt", ".", "imshow", "(", "mask", ")", "\n", "plt", ".", "show", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.__init__": [[117, 123], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "self", ".", "val", "=", "None", "\n", "self", ".", "avg", "=", "None", "\n", "self", ".", "sum", "=", "None", "\n", "self", ".", "count", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.initialize": [[124, 130], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "val", ",", "count", ",", "weight", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "avg", "=", "val", "\n", "self", ".", "count", "=", "count", "\n", "self", ".", "sum", "=", "val", "*", "weight", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.update": [[131, 136], ["utils.AverageMeter.initialize", "utils.AverageMeter.add"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.initialize", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.add"], ["", "def", "update", "(", "self", ",", "val", ",", "count", "=", "1", ",", "weight", "=", "1", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", "val", ",", "count", ",", "weight", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add", "(", "val", ",", "count", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.add": [[137, 142], ["None"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "val", ",", "count", ",", "weight", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "count", "+=", "count", "\n", "self", ".", "sum", "+=", "val", "*", "weight", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.value": [[143, 145], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.AverageMeter.average": [[146, 148], ["None"], "methods", ["None"], ["", "def", "average", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.read_idtxt": [[8, 26], ["open", "open.close", "open.read", "is_number", "id_list.append"], "function", ["None"], ["def", "read_idtxt", "(", "path", ")", ":", "\n", "  ", "id_list", "=", "[", "]", "\n", "#print('start reading')", "\n", "f", "=", "open", "(", "path", ",", "'r'", ")", "\n", "curr_str", "=", "''", "\n", "while", "True", ":", "\n", "      ", "ch", "=", "f", ".", "read", "(", "1", ")", "\n", "if", "is_number", "(", "ch", ")", ":", "\n", "          ", "curr_str", "+=", "ch", "\n", "", "else", ":", "\n", "          ", "id_list", ".", "append", "(", "curr_str", ")", "\n", "#print(curr_str)", "\n", "curr_str", "=", "''", "\n", "", "if", "not", "ch", ":", "\n", "#print('end reading')", "\n", "          ", "break", "\n", "", "", "f", ".", "close", "(", ")", "\n", "return", "id_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.get_square": [[27, 34], ["None"], "function", ["None"], ["", "def", "get_square", "(", "img", ",", "pos", ")", ":", "\n", "    ", "\"\"\"Extract a left or a right square from ndarray shape : (H, W, C))\"\"\"", "\n", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "if", "pos", "==", "0", ":", "\n", "        ", "return", "img", "[", ":", ",", ":", "h", "]", "\n", "", "else", ":", "\n", "        ", "return", "img", "[", ":", ",", "-", "h", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.split_img_into_squares": [[35, 37], ["utils.get_square", "utils.get_square"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.get_square", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.get_square"], ["", "", "def", "split_img_into_squares", "(", "img", ")", ":", "\n", "    ", "return", "get_square", "(", "img", ",", "0", ")", ",", "get_square", "(", "img", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.hwc_to_chw": [[38, 40], ["numpy.transpose"], "function", ["None"], ["", "def", "hwc_to_chw", "(", "img", ")", ":", "\n", "    ", "return", "np", ".", "transpose", "(", "img", ",", "axes", "=", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.resize_and_crop": [[41, 55], ["int", "int", "pilimg.resize", "img.crop.crop", "numpy.array"], "function", ["None"], ["", "def", "resize_and_crop", "(", "pilimg", ",", "scale", "=", "0.5", ",", "final_height", "=", "None", ")", ":", "\n", "    ", "w", "=", "pilimg", ".", "size", "[", "0", "]", "\n", "h", "=", "pilimg", ".", "size", "[", "1", "]", "\n", "newW", "=", "int", "(", "w", "*", "scale", ")", "\n", "newH", "=", "int", "(", "h", "*", "scale", ")", "\n", "\n", "if", "not", "final_height", ":", "\n", "        ", "diff", "=", "0", "\n", "", "else", ":", "\n", "        ", "diff", "=", "newH", "-", "final_height", "\n", "\n", "", "img", "=", "pilimg", ".", "resize", "(", "(", "newW", ",", "newH", ")", ")", "\n", "img", "=", "img", ".", "crop", "(", "(", "0", ",", "diff", "//", "2", ",", "newW", ",", "newH", "-", "diff", "//", "2", ")", ")", "\n", "return", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.batch": [[56, 67], ["enumerate", "b.append", "len"], "function", ["None"], ["", "def", "batch", "(", "iterable", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"Yields lists by batch\"\"\"", "\n", "b", "=", "[", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "iterable", ")", ":", "\n", "        ", "b", ".", "append", "(", "t", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "batch_size", "==", "0", ":", "\n", "            ", "yield", "b", "\n", "b", "=", "[", "]", "\n", "\n", "", "", "if", "len", "(", "b", ")", ">", "0", ":", "\n", "        ", "yield", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.seprate_batch": [[68, 80], ["range", "batches.append", "len", "len", "range"], "function", ["None"], ["", "", "def", "seprate_batch", "(", "dataset", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"Yields lists by batch\"\"\"", "\n", "num_batch", "=", "len", "(", "dataset", ")", "//", "batch_size", "+", "1", "\n", "batch_len", "=", "batch_size", "\n", "# print (len(data))", "\n", "# print (num_batch)", "\n", "batches", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_batch", ")", ":", "\n", "        ", "batches", ".", "append", "(", "[", "dataset", "[", "j", "]", "for", "j", "in", "range", "(", "batch_len", ")", "]", ")", "\n", "# print('current data index: %d' %(i*batch_size+batch_len))", "\n", "if", "(", "i", "+", "2", "==", "num_batch", ")", ":", "batch_len", "=", "len", "(", "dataset", ")", "-", "(", "num_batch", "-", "1", ")", "*", "batch_size", "\n", "", "return", "(", "batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.split_train_val": [[81, 87], ["list", "len", "int", "random.shuffle"], "function", ["None"], ["", "def", "split_train_val", "(", "dataset", ",", "val_percent", "=", "0.05", ")", ":", "\n", "    ", "dataset", "=", "list", "(", "dataset", ")", "\n", "length", "=", "len", "(", "dataset", ")", "\n", "n", "=", "int", "(", "length", "*", "val_percent", ")", "\n", "random", ".", "shuffle", "(", "dataset", ")", "\n", "return", "{", "'train'", ":", "dataset", "[", ":", "-", "n", "]", ",", "'val'", ":", "dataset", "[", "-", "n", ":", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.normalize": [[89, 91], ["None"], "function", ["None"], ["", "def", "normalize", "(", "x", ")", ":", "\n", "    ", "return", "x", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.merge_masks": [[92, 100], ["numpy.zeros"], "function", ["None"], ["", "def", "merge_masks", "(", "img1", ",", "img2", ",", "full_w", ")", ":", "\n", "    ", "h", "=", "img1", ".", "shape", "[", "0", "]", "\n", "\n", "new", "=", "np", ".", "zeros", "(", "(", "h", ",", "full_w", ")", ",", "np", ".", "float32", ")", "\n", "new", "[", ":", ",", ":", "full_w", "//", "2", "+", "1", "]", "=", "img1", "[", ":", ",", ":", "full_w", "//", "2", "+", "1", "]", "\n", "new", "[", ":", ",", "full_w", "//", "2", "+", "1", ":", "]", "=", "img2", "[", ":", ",", "-", "(", "full_w", "//", "2", "-", "1", ")", ":", "]", "\n", "\n", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.rle_encode": [[102, 113], ["mask_image.flatten", "numpy.where"], "function", ["None"], ["", "def", "rle_encode", "(", "mask_image", ")", ":", "\n", "    ", "pixels", "=", "mask_image", ".", "flatten", "(", ")", "\n", "# We avoid issues with '1' at the start or end (at the corners of", "\n", "# the original image) by setting those pixels to '0' explicitly.", "\n", "# We do not expect these to be non-zero for an accurate mask,", "\n", "# so this should not harm the score.", "\n", "pixels", "[", "0", "]", "=", "0", "\n", "pixels", "[", "-", "1", "]", "=", "0", "\n", "runs", "=", "np", ".", "where", "(", "pixels", "[", "1", ":", "]", "!=", "pixels", "[", ":", "-", "1", "]", ")", "[", "0", "]", "+", "2", "\n", "runs", "[", "1", ":", ":", "2", "]", "=", "runs", "[", "1", ":", ":", "2", "]", "-", "runs", "[", ":", "-", "1", ":", "2", "]", "\n", "return", "runs", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.ImageValStretch2D": [[149, 155], ["img.astype"], "function", ["None"], ["", "", "def", "ImageValStretch2D", "(", "img", ")", ":", "\n", "    ", "img", "=", "img", "*", "255", "\n", "#maxval = img.max(axis=0).max(axis=0)", "\n", "#minval = img.min(axis=0).min(axis=0)", "\n", "#img = (img-minval)*255/(maxval-minval)", "\n", "return", "img", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.ConfMap": [[156, 171], ["numpy.zeros", "range", "range", "int", "range"], "function", ["None"], ["", "def", "ConfMap", "(", "output", ",", "pred", ")", ":", "\n", "# print(output.shape)", "\n", "    ", "n", ",", "h", ",", "w", "=", "output", ".", "shape", "\n", "conf", "=", "np", ".", "zeros", "(", "pred", ".", "shape", ",", "float", ")", "\n", "for", "h_idx", "in", "range", "(", "h", ")", ":", "\n", "      ", "for", "w_idx", "in", "range", "(", "w", ")", ":", "\n", "        ", "n_idx", "=", "int", "(", "pred", "[", "h_idx", ",", "w_idx", "]", ")", "\n", "sum", "=", "0", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "          ", "val", "=", "output", "[", "i", ",", "h_idx", ",", "w_idx", "]", "\n", "if", "val", ">", "0", ":", "sum", "+=", "val", "\n", "", "conf", "[", "h_idx", ",", "w_idx", "]", "=", "output", "[", "n_idx", ",", "h_idx", ",", "w_idx", "]", "/", "sum", "\n", "if", "conf", "[", "h_idx", ",", "w_idx", "]", "<", "0", ":", "conf", "[", "h_idx", ",", "w_idx", "]", "=", "0", "\n", "# print(conf)", "\n", "", "", "return", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.accuracy": [[172, 179], ["valid.sum", "float"], "function", ["None"], ["", "def", "accuracy", "(", "pred", ",", "label", ",", "ignore_zero", "=", "False", ")", ":", "\n", "    ", "valid", "=", "(", "label", ">=", "0", ")", "\n", "if", "ignore_zero", ":", "valid", "=", "(", "label", ">", "0", ")", "\n", "acc_sum", "=", "(", "valid", "*", "(", "pred", "==", "label", ")", ")", ".", "sum", "(", ")", "\n", "valid_sum", "=", "valid", ".", "sum", "(", ")", "\n", "acc", "=", "float", "(", "acc_sum", ")", "/", "(", "valid_sum", "+", "1e-10", ")", "\n", "return", "acc", ",", "valid_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.fast_hist": [[180, 183], ["numpy.bincount().reshape", "numpy.bincount", "a[].astype"], "function", ["None"], ["", "def", "fast_hist", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "k", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.get_hist": [[184, 188], ["numpy.zeros", "utils.fast_hist", "image.flatten", "label.flatten"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.fast_hist"], ["", "def", "get_hist", "(", "image", ",", "label", ",", "num_class", ")", ":", "\n", "    ", "hist", "=", "np", ".", "zeros", "(", "(", "num_class", ",", "num_class", ")", ")", "\n", "hist", "+=", "fast_hist", "(", "image", ".", "flatten", "(", ")", ",", "label", ".", "flatten", "(", ")", ",", "num_class", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.cal_kappa": [[189, 202], ["hist.sum", "numpy.diag().sum", "hist.sum", "numpy.matmul", "hist.sum", "hist.sum", "numpy.diag", "hist.sum"], "function", ["None"], ["", "def", "cal_kappa", "(", "hist", ")", ":", "\n", "    ", "if", "hist", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "po", "=", "0", "\n", "pe", "=", "1", "\n", "kappa", "=", "0", "\n", "", "else", ":", "\n", "        ", "po", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "hist", ".", "sum", "(", ")", "\n", "pe", "=", "np", ".", "matmul", "(", "hist", ".", "sum", "(", "1", ")", ",", "hist", ".", "sum", "(", "0", ")", ".", "T", ")", "/", "hist", ".", "sum", "(", ")", "**", "2", "\n", "if", "pe", "==", "1", ":", "\n", "            ", "kappa", "=", "0", "\n", "", "else", ":", "\n", "            ", "kappa", "=", "(", "po", "-", "pe", ")", "/", "(", "1", "-", "pe", ")", "\n", "", "", "return", "kappa", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.SCDD_eval_all": [[203, 228], ["numpy.zeros", "zip", "numpy.zeros", "hist_fg.sum", "np.zeros.copy", "utils.cal_kappa", "numpy.array", "set", "set.issubset", "numpy.array", "utils.get_hist", "numpy.diag", "numpy.unique", "set", "np.zeros.sum", "np.zeros.sum", "numpy.diag", "math.exp", "np.zeros.sum", "np.zeros.sum"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.cal_kappa", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.get_hist"], ["", "def", "SCDD_eval_all", "(", "preds", ",", "labels", ",", "num_class", ")", ":", "\n", "    ", "hist", "=", "np", ".", "zeros", "(", "(", "num_class", ",", "num_class", ")", ")", "\n", "for", "pred", ",", "label", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "        ", "infer_array", "=", "np", ".", "array", "(", "pred", ")", "\n", "unique_set", "=", "set", "(", "np", ".", "unique", "(", "infer_array", ")", ")", "\n", "assert", "unique_set", ".", "issubset", "(", "set", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ")", ")", ",", "\"unrecognized label number\"", "\n", "label_array", "=", "np", ".", "array", "(", "label", ")", "\n", "assert", "infer_array", ".", "shape", "==", "label_array", ".", "shape", ",", "\"The size of prediction and target must be the same\"", "\n", "hist", "+=", "get_hist", "(", "infer_array", ",", "label_array", ",", "num_class", ")", "\n", "\n", "", "hist_fg", "=", "hist", "[", "1", ":", ",", "1", ":", "]", "\n", "c2hist", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", ")", ")", "\n", "c2hist", "[", "0", "]", "[", "0", "]", "=", "hist", "[", "0", "]", "[", "0", "]", "\n", "c2hist", "[", "0", "]", "[", "1", "]", "=", "hist", ".", "sum", "(", "1", ")", "[", "0", "]", "-", "hist", "[", "0", "]", "[", "0", "]", "\n", "c2hist", "[", "1", "]", "[", "0", "]", "=", "hist", ".", "sum", "(", "0", ")", "[", "0", "]", "-", "hist", "[", "0", "]", "[", "0", "]", "\n", "c2hist", "[", "1", "]", "[", "1", "]", "=", "hist_fg", ".", "sum", "(", ")", "\n", "hist_n0", "=", "hist", ".", "copy", "(", ")", "\n", "hist_n0", "[", "0", "]", "[", "0", "]", "=", "0", "\n", "kappa_n0", "=", "cal_kappa", "(", "hist_n0", ")", "\n", "iu", "=", "np", ".", "diag", "(", "c2hist", ")", "/", "(", "c2hist", ".", "sum", "(", "1", ")", "+", "c2hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "c2hist", ")", ")", "\n", "IoU_fg", "=", "iu", "[", "1", "]", "\n", "IoU_mean", "=", "(", "iu", "[", "0", "]", "+", "iu", "[", "1", "]", ")", "/", "2", "\n", "Sek", "=", "(", "kappa_n0", "*", "math", ".", "exp", "(", "IoU_fg", ")", ")", "/", "math", ".", "e", "\n", "Score", "=", "0.3", "*", "IoU_mean", "+", "0.7", "*", "Sek", "\n", "return", "Score", ",", "IoU_mean", ",", "Sek", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.SCDD_eval": [[229, 251], ["numpy.array", "set", "set.issubset", "numpy.array", "utils.get_hist", "numpy.zeros", "hist_fg.sum", "get_hist.copy", "utils.cal_kappa", "numpy.unique", "set", "numpy.diag", "get_hist.sum", "get_hist.sum", "numpy.diag", "math.exp", "np.zeros.sum", "np.zeros.sum"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.get_hist", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.cal_kappa"], ["", "def", "SCDD_eval", "(", "pred", ",", "label", ",", "num_class", ")", ":", "\n", "    ", "infer_array", "=", "np", ".", "array", "(", "pred", ")", "\n", "unique_set", "=", "set", "(", "np", ".", "unique", "(", "infer_array", ")", ")", "\n", "assert", "unique_set", ".", "issubset", "(", "set", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ")", ")", ",", "\"unrecognized label number\"", "\n", "label_array", "=", "np", ".", "array", "(", "label", ")", "\n", "assert", "infer_array", ".", "shape", "==", "label_array", ".", "shape", ",", "\"The size of prediction and target must be the same\"", "\n", "hist", "=", "get_hist", "(", "infer_array", ",", "label_array", ",", "num_class", ")", "\n", "hist_fg", "=", "hist", "[", "1", ":", ",", "1", ":", "]", "\n", "c2hist", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", ")", ")", "\n", "c2hist", "[", "0", "]", "[", "0", "]", "=", "hist", "[", "0", "]", "[", "0", "]", "\n", "c2hist", "[", "0", "]", "[", "1", "]", "=", "hist", ".", "sum", "(", "1", ")", "[", "0", "]", "-", "hist", "[", "0", "]", "[", "0", "]", "\n", "c2hist", "[", "1", "]", "[", "0", "]", "=", "hist", ".", "sum", "(", "0", ")", "[", "0", "]", "-", "hist", "[", "0", "]", "[", "0", "]", "\n", "c2hist", "[", "1", "]", "[", "1", "]", "=", "hist_fg", ".", "sum", "(", ")", "\n", "hist_n0", "=", "hist", ".", "copy", "(", ")", "\n", "hist_n0", "[", "0", "]", "[", "0", "]", "=", "0", "\n", "kappa_n0", "=", "cal_kappa", "(", "hist_n0", ")", "\n", "iu", "=", "np", ".", "diag", "(", "c2hist", ")", "/", "(", "c2hist", ".", "sum", "(", "1", ")", "+", "c2hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "c2hist", ")", ")", "\n", "IoU_fg", "=", "iu", "[", "1", "]", "\n", "IoU_mean", "=", "(", "iu", "[", "0", "]", "+", "iu", "[", "1", "]", ")", "/", "2", "\n", "Sek", "=", "(", "kappa_n0", "*", "math", ".", "exp", "(", "IoU_fg", ")", ")", "/", "math", ".", "e", "\n", "Score", "=", "0.3", "*", "IoU_mean", "+", "0.7", "*", "Sek", "\n", "return", "Score", ",", "IoU_mean", ",", "Sek", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.FWIoU": [[252, 261], ["utils.eval_segm.frequency_weighted_IU"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.eval_segm.frequency_weighted_IU"], ["", "def", "FWIoU", "(", "pred", ",", "label", ",", "bn_mode", "=", "False", ",", "ignore_zero", "=", "False", ")", ":", "\n", "    ", "if", "bn_mode", ":", "\n", "        ", "pred", "=", "(", "pred", ">=", "0.5", ")", "\n", "label", "=", "(", "label", ">=", "0.5", ")", "\n", "", "elif", "ignore_zero", ":", "\n", "        ", "pred", "=", "pred", "-", "1", "\n", "label", "=", "label", "-", "1", "\n", "", "FWIoU", "=", "seg_acc", ".", "frequency_weighted_IU", "(", "pred", ",", "label", ")", "\n", "return", "FWIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.binary_accuracy": [[262, 268], ["valid.sum", "float"], "function", ["None"], ["", "def", "binary_accuracy", "(", "pred", ",", "label", ")", ":", "\n", "    ", "valid", "=", "(", "label", "<", "2", ")", "\n", "acc_sum", "=", "(", "valid", "*", "(", "pred", "==", "label", ")", ")", ".", "sum", "(", ")", "\n", "valid_sum", "=", "valid", ".", "sum", "(", ")", "\n", "acc", "=", "float", "(", "acc_sum", ")", "/", "(", "valid_sum", "+", "1e-10", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.intersectionAndUnion": [[269, 293], ["numpy.asarray().copy", "numpy.asarray().copy", "numpy.histogram", "numpy.histogram", "numpy.histogram", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "intersectionAndUnion", "(", "imPred", ",", "imLab", ",", "numClass", ")", ":", "\n", "    ", "imPred", "=", "np", ".", "asarray", "(", "imPred", ")", ".", "copy", "(", ")", "\n", "imLab", "=", "np", ".", "asarray", "(", "imLab", ")", ".", "copy", "(", ")", "\n", "\n", "imPred", "+=", "1", "\n", "imLab", "+=", "1", "\n", "# Remove classes from unlabeled pixels in gt image.", "\n", "# We should not penalize detections in unlabeled portions of the image.", "\n", "imPred", "=", "imPred", "*", "(", "imLab", ">", "0", ")", "\n", "\n", "# Compute area intersection:", "\n", "intersection", "=", "imPred", "*", "(", "imPred", "==", "imLab", ")", "\n", "(", "area_intersection", ",", "_", ")", "=", "np", ".", "histogram", "(", "\n", "intersection", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", "+", "1", ")", ")", "\n", "# print(area_intersection)", "\n", "\n", "# Compute area union:", "\n", "(", "area_pred", ",", "_", ")", "=", "np", ".", "histogram", "(", "imPred", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", "+", "1", ")", ")", "\n", "(", "area_lab", ",", "_", ")", "=", "np", ".", "histogram", "(", "imLab", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", "+", "1", ")", ")", "\n", "area_union", "=", "area_pred", "+", "area_lab", "-", "area_intersection", "\n", "# print(area_pred)", "\n", "# print(area_lab)", "\n", "\n", "return", "(", "area_intersection", ",", "area_union", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.utils.CaclTP": [[294, 328], ["numpy.asarray().copy", "numpy.asarray().copy", "numpy.histogram", "numpy.histogram", "numpy.histogram", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "CaclTP", "(", "imPred", ",", "imLab", ",", "numClass", ")", ":", "\n", "    ", "imPred", "=", "np", ".", "asarray", "(", "imPred", ")", ".", "copy", "(", ")", "\n", "imLab", "=", "np", ".", "asarray", "(", "imLab", ")", ".", "copy", "(", ")", "\n", "\n", "imPred", "+=", "1", "\n", "imLab", "+=", "1", "\n", "# # Remove classes from unlabeled pixels in gt image.", "\n", "# # We should not penalize detections in unlabeled portions of the image.", "\n", "imPred", "=", "imPred", "*", "(", "imLab", ">", "0", ")", "\n", "\n", "# Compute area intersection:", "\n", "TP", "=", "imPred", "*", "(", "imPred", "==", "imLab", ")", "\n", "(", "TP_hist", ",", "_", ")", "=", "np", ".", "histogram", "(", "\n", "TP", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", "+", "1", ")", ")", "\n", "# print(TP.shape)", "\n", "# print(TP_hist)", "\n", "\n", "# Compute area union:", "\n", "(", "pred_hist", ",", "_", ")", "=", "np", ".", "histogram", "(", "imPred", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", "+", "1", ")", ")", "\n", "(", "lab_hist", ",", "_", ")", "=", "np", ".", "histogram", "(", "imLab", ",", "bins", "=", "numClass", ",", "range", "=", "(", "1", ",", "numClass", "+", "1", ")", ")", "\n", "# print(pred_hist)", "\n", "# print(lab_hist)", "\n", "# precision = TP_hist / (lab_hist + 1e-10) + 1e-10", "\n", "# recall = TP_hist / (pred_hist + 1e-10) + 1e-10", "\n", "# # print(precision)", "\n", "# # print(recall)", "\n", "# F1 = [stats.hmean([pre, rec]) for pre, rec in zip(precision, recall)]", "\n", "# print(F1)", "\n", "\n", "\n", "# print(area_pred)", "\n", "# print(area_lab)", "\n", "\n", "return", "(", "TP_hist", ",", "pred_hist", ",", "lab_hist", ")", "", "", ""]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Data.__init__": [[106, 109], ["RS_ST.read_RSimages"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.read_RSimages"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "random_flip", "=", "False", ")", ":", "\n", "        ", "self", ".", "random_flip", "=", "random_flip", "\n", "self", ".", "imgs_list_A", ",", "self", ".", "imgs_list_B", ",", "self", ".", "labels_A", ",", "self", ".", "labels_B", "=", "read_RSimages", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Data.get_mask_name": [[110, 113], ["os.path.split"], "methods", ["None"], ["", "def", "get_mask_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "mask_name", "=", "os", ".", "path", ".", "split", "(", "self", ".", "imgs_list_A", "[", "idx", "]", ")", "[", "-", "1", "]", "\n", "return", "mask_name", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Data.__getitem__": [[114, 124], ["skimage.io.imread", "RS_ST.normalize_image", "skimage.io.imread", "RS_ST.normalize_image", "utils.rand_rot90_flip_MCD", "torchvision.transforms.functional.to_tensor", "torchvision.transforms.functional.to_tensor", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.normalize_image", "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.normalize_image", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.transform.rand_rot90_flip_MCD"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_A", "=", "io", ".", "imread", "(", "self", ".", "imgs_list_A", "[", "idx", "]", ")", "\n", "img_A", "=", "normalize_image", "(", "img_A", ",", "'A'", ")", "\n", "img_B", "=", "io", ".", "imread", "(", "self", ".", "imgs_list_B", "[", "idx", "]", ")", "\n", "img_B", "=", "normalize_image", "(", "img_B", ",", "'B'", ")", "\n", "label_A", "=", "self", ".", "labels_A", "[", "idx", "]", "\n", "label_B", "=", "self", ".", "labels_B", "[", "idx", "]", "\n", "if", "self", ".", "random_flip", ":", "\n", "            ", "img_A", ",", "img_B", ",", "label_A", ",", "label_B", "=", "transform", ".", "rand_rot90_flip_MCD", "(", "img_A", ",", "img_B", ",", "label_A", ",", "label_B", ")", "\n", "", "return", "F", ".", "to_tensor", "(", "img_A", ")", ",", "F", ".", "to_tensor", "(", "img_B", ")", ",", "torch", ".", "from_numpy", "(", "label_A", ")", ",", "torch", ".", "from_numpy", "(", "label_B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Data.__len__": [[125, 127], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs_list_A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Data_test.__init__": [[129, 144], ["os.path.join", "os.path.join", "os.listdir", "len", "os.path.join", "os.path.join", "RS_ST.Data_test.imgs_A.append", "RS_ST.Data_test.imgs_B.append", "RS_ST.Data_test.mask_name_list.append", "skimage.io.imread", "skimage.io.imread"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "test_dir", ")", ":", "\n", "        ", "self", ".", "imgs_A", "=", "[", "]", "\n", "self", ".", "imgs_B", "=", "[", "]", "\n", "self", ".", "mask_name_list", "=", "[", "]", "\n", "imgA_dir", "=", "os", ".", "path", ".", "join", "(", "test_dir", ",", "'im1'", ")", "\n", "imgB_dir", "=", "os", ".", "path", ".", "join", "(", "test_dir", ",", "'im2'", ")", "\n", "data_list", "=", "os", ".", "listdir", "(", "imgA_dir", ")", "\n", "for", "it", "in", "data_list", ":", "\n", "            ", "if", "(", "it", "[", "-", "4", ":", "]", "==", "'.png'", ")", ":", "\n", "                ", "img_A_path", "=", "os", ".", "path", ".", "join", "(", "imgA_dir", ",", "it", ")", "\n", "img_B_path", "=", "os", ".", "path", ".", "join", "(", "imgB_dir", ",", "it", ")", "\n", "self", ".", "imgs_A", ".", "append", "(", "io", ".", "imread", "(", "img_A_path", ")", ")", "\n", "self", ".", "imgs_B", ".", "append", "(", "io", ".", "imread", "(", "img_B_path", ")", ")", "\n", "self", ".", "mask_name_list", ".", "append", "(", "it", ")", "\n", "", "", "self", ".", "len", "=", "len", "(", "self", ".", "imgs_A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Data_test.get_mask_name": [[145, 147], ["None"], "methods", ["None"], ["", "def", "get_mask_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "mask_name_list", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Data_test.__getitem__": [[148, 154], ["RS_ST.normalize_image", "RS_ST.normalize_image", "torchvision.transforms.functional.to_tensor", "torchvision.transforms.functional.to_tensor"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.normalize_image", "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.normalize_image"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_A", "=", "self", ".", "imgs_A", "[", "idx", "]", "\n", "img_B", "=", "self", ".", "imgs_B", "[", "idx", "]", "\n", "img_A", "=", "normalize_image", "(", "img_A", ",", "'A'", ")", "\n", "img_B", "=", "normalize_image", "(", "img_B", ",", "'B'", ")", "\n", "return", "F", ".", "to_tensor", "(", "img_A", ")", ",", "F", ".", "to_tensor", "(", "img_B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Data_test.__len__": [[155, 157], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Colorls2Index": [[28, 34], ["enumerate", "RS_ST.Color2Index", "IndexLabels.append"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Color2Index"], ["", "def", "Colorls2Index", "(", "ColorLabels", ")", ":", "\n", "    ", "IndexLabels", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "ColorLabels", ")", ":", "\n", "        ", "IndexMap", "=", "Color2Index", "(", "data", ")", "\n", "IndexLabels", ".", "append", "(", "IndexMap", ")", "\n", "", "return", "IndexLabels", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Color2Index": [[35, 42], ["ColorLabel.astype", "torch.utils.data"], "function", ["None"], ["", "def", "Color2Index", "(", "ColorLabel", ")", ":", "\n", "    ", "data", "=", "ColorLabel", ".", "astype", "(", "np", ".", "int32", ")", "\n", "idx", "=", "(", "data", "[", ":", ",", ":", ",", "0", "]", "*", "256", "+", "data", "[", ":", ",", ":", ",", "1", "]", ")", "*", "256", "+", "data", "[", ":", ",", ":", ",", "2", "]", "\n", "IndexMap", "=", "colormap2label", "[", "idx", "]", "\n", "#IndexMap = 2*(IndexMap > 1) + 1 * (IndexMap <= 1)", "\n", "IndexMap", "=", "IndexMap", "*", "(", "IndexMap", "<", "num_classes", ")", "\n", "return", "IndexMap", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.Index2Color": [[43, 47], ["numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "Index2Color", "(", "pred", ")", ":", "\n", "    ", "colormap", "=", "np", ".", "asarray", "(", "ST_COLORMAP", ",", "dtype", "=", "'uint8'", ")", "\n", "x", "=", "np", ".", "asarray", "(", "pred", ",", "dtype", "=", "'int32'", ")", "\n", "return", "colormap", "[", "x", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.showIMG": [[48, 52], ["matplotlib.imshow", "matplotlib.show"], "function", ["None"], ["", "def", "showIMG", "(", "img", ")", ":", "\n", "    ", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.normalize_image": [[53, 60], ["None"], "function", ["None"], ["", "def", "normalize_image", "(", "im", ",", "time", "=", "'A'", ")", ":", "\n", "    ", "assert", "time", "in", "[", "'A'", ",", "'B'", "]", "\n", "if", "time", "==", "'A'", ":", "\n", "        ", "im", "=", "(", "im", "-", "MEAN_A", ")", "/", "STD_A", "\n", "", "else", ":", "\n", "        ", "im", "=", "(", "im", "-", "MEAN_B", ")", "/", "STD_B", "\n", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.normalize_images": [[61, 65], ["enumerate", "RS_ST.normalize_image"], "function", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.normalize_image"], ["", "def", "normalize_images", "(", "imgs", ",", "time", "=", "'A'", ")", ":", "\n", "    ", "for", "i", ",", "im", "in", "enumerate", "(", "imgs", ")", ":", "\n", "        ", "imgs", "[", "i", "]", "=", "normalize_image", "(", "im", ",", "time", ")", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.datasets.RS_ST.read_RSimages": [[66, 104], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "print", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "imgs_list_A.append", "imgs_list_B.append", "skimage.io.imread", "skimage.io.imread", "labels_A.append", "labels_B.append", "print", "len", "str", "len"], "function", ["None"], ["", "def", "read_RSimages", "(", "mode", ",", "rescale", "=", "False", ")", ":", "\n", "#assert mode in ['train', 'val', 'test']", "\n", "    ", "img_A_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "mode", ",", "'im1'", ")", "\n", "img_B_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "mode", ",", "'im2'", ")", "\n", "label_A_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "mode", ",", "'label1'", ")", "\n", "label_B_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "mode", ",", "'label2'", ")", "\n", "# To use rgb labels:", "\n", "#label_A_dir = os.path.join(root, mode, 'label1_rgb')", "\n", "#label_B_dir = os.path.join(root, mode, 'label2_rgb')", "\n", "\n", "data_list", "=", "os", ".", "listdir", "(", "img_A_dir", ")", "\n", "imgs_list_A", ",", "imgs_list_B", ",", "labels_A", ",", "labels_B", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "count", "=", "0", "\n", "for", "it", "in", "data_list", ":", "\n", "# print(it)", "\n", "        ", "if", "(", "it", "[", "-", "4", ":", "]", "==", "'.png'", ")", ":", "\n", "            ", "img_A_path", "=", "os", ".", "path", ".", "join", "(", "img_A_dir", ",", "it", ")", "\n", "img_B_path", "=", "os", ".", "path", ".", "join", "(", "img_B_dir", ",", "it", ")", "\n", "label_A_path", "=", "os", ".", "path", ".", "join", "(", "label_A_dir", ",", "it", ")", "\n", "label_B_path", "=", "os", ".", "path", ".", "join", "(", "label_B_dir", ",", "it", ")", "\n", "\n", "imgs_list_A", ".", "append", "(", "img_A_path", ")", "\n", "imgs_list_B", ".", "append", "(", "img_B_path", ")", "\n", "\n", "label_A", "=", "io", ".", "imread", "(", "label_A_path", ")", "\n", "label_B", "=", "io", ".", "imread", "(", "label_B_path", ")", "\n", "#for rgb labels:", "\n", "#label_A = Color2Index(label_A)", "\n", "#label_B = Color2Index(label_B)", "\n", "labels_A", ".", "append", "(", "label_A", ")", "\n", "labels_B", ".", "append", "(", "label_B", ")", "\n", "", "count", "+=", "1", "\n", "if", "not", "count", "%", "500", ":", "print", "(", "'%d/%d images loaded.'", "%", "(", "count", ",", "len", "(", "data_list", ")", ")", ")", "\n", "\n", "", "print", "(", "labels_A", "[", "0", "]", ".", "shape", ")", "\n", "print", "(", "str", "(", "len", "(", "imgs_list_A", ")", ")", "+", "' '", "+", "mode", "+", "' images'", "+", "' loaded.'", ")", "\n", "\n", "return", "imgs_list_A", ",", "imgs_list_B", ",", "labels_A", ",", "labels_B", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.FCN.__init__": [[15, 35], ["torch.Module.__init__", "torchvision.models.resnet34", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.weight.data[].copy_", "torch.Sequential", "torch.Sequential", "BiSRNet.FCN.layer3.named_modules", "BiSRNet.FCN.layer4.named_modules", "torch.Conv2d.weight.data[].copy_"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "FCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet", "=", "models", ".", "resnet34", "(", "pretrained", ")", "\n", "newconv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "newconv1", ".", "weight", ".", "data", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ".", "copy_", "(", "resnet", ".", "conv1", ".", "weight", ".", "data", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "if", "in_channels", ">", "3", ":", "\n", "          ", "newconv1", ".", "weight", ".", "data", "[", ":", ",", "3", ":", "in_channels", ",", ":", ",", ":", "]", ".", "copy_", "(", "resnet", ".", "conv1", ".", "weight", ".", "data", "[", ":", ",", "0", ":", "in_channels", "-", "3", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "newconv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ")", "\n", "self", ".", "maxpool", "=", "resnet", ".", "maxpool", "\n", "self", ".", "layer1", "=", "resnet", ".", "layer1", "\n", "self", ".", "layer2", "=", "resnet", ".", "layer2", "\n", "self", ".", "layer3", "=", "resnet", ".", "layer3", "\n", "self", ".", "layer4", "=", "resnet", ".", "layer4", "\n", "for", "n", ",", "m", "in", "self", ".", "layer3", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'conv1'", "in", "n", "or", "'downsample.0'", "in", "n", ":", "\n", "                ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "for", "n", ",", "m", "in", "self", ".", "layer4", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'conv1'", "in", "n", "or", "'downsample.0'", "in", "n", ":", "\n", "                ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.FCN._make_layer": [[36, 49], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "BiSRNet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "inplanes", ",", "planes", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.ResBlock.__init__": [[52, 61], ["torch.Module.__init__", "BiSRNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "BiSRNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.conv3x3", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.ResBlock.forward": [[62, 79], ["BiSRNet.ResBlock.conv1", "BiSRNet.ResBlock.bn1", "BiSRNet.ResBlock.relu", "BiSRNet.ResBlock.conv2", "BiSRNet.ResBlock.bn2", "BiSRNet.ResBlock.relu", "BiSRNet.ResBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.SR.__init__": [[83, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", "//", "4", ",", "1", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", "//", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "deconv2", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "//", "4", ",", "in_channels", "//", "4", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", "//", "4", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", "//", "4", ",", "n_filters", ",", "1", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "BatchNorm2d", "(", "n_filters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.SR.forward": [[94, 112], ["x.size", "BiSRNet.SR.query_conv().view().permute", "BiSRNet.SR.key_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "BiSRNet.SR.softmax", "BiSRNet.SR.value_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "BiSRNet.SR.permute", "BiSRNet.SR.query_conv().view", "BiSRNet.SR.key_conv", "BiSRNet.SR.value_conv", "BiSRNet.SR.query_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "deconv2", "(", "x", ")", "\n", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "norm3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "", "class", "SR", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "'''Spatial reasoning module'''", "\n", "#codes from DANet 'Dual attention network for scene segmentation'", "\n", "def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "SR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.CotSR.__init__": [[115, 131], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__"], ["self", ".", "value_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "''' inputs :\n                x : input feature maps( B X C X H X W)\n            returns :\n                out : attention value + input feature\n                attention: B X (HxW) X (HxW) '''", "\n", "m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "self", ".", "query_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "proj_key", "=", "self", ".", "key_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "attention", "=", "self", ".", "softmax", "(", "energy", ")", "\n", "proj_value", "=", "self", ".", "value_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.CotSR.forward": [[132, 163], ["x1.size", "BiSRNet.CotSR.query_conv1().view().permute", "BiSRNet.CotSR.key_conv1().view", "BiSRNet.CotSR.value_conv1().view", "BiSRNet.CotSR.query_conv2().view().permute", "BiSRNet.CotSR.key_conv2().view", "BiSRNet.CotSR.value_conv2().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "BiSRNet.CotSR.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out1.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "BiSRNet.CotSR.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out2.view.view.view", "BiSRNet.CotSR.permute", "BiSRNet.CotSR.permute", "BiSRNet.CotSR.query_conv1().view", "BiSRNet.CotSR.key_conv1", "BiSRNet.CotSR.value_conv1", "BiSRNet.CotSR.query_conv2().view", "BiSRNet.CotSR.key_conv2", "BiSRNet.CotSR.value_conv2", "BiSRNet.CotSR.query_conv1", "BiSRNet.CotSR.query_conv2"], "methods", ["None"], ["\n", "out", "=", "torch", ".", "bmm", "(", "proj_value", ",", "attention", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "C", ",", "height", ",", "width", ")", "\n", "out", "=", "x", "+", "self", ".", "gamma", "*", "out", "\n", "\n", "return", "out", "\n", "\n", "", "", "class", "CotSR", "(", "nn", ".", "Module", ")", ":", "\n", "#codes derived from DANet 'Dual attention network for scene segmentation'", "\n", "    ", "def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "CotSR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "\n", "self", ".", "query_conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "key_conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "value_conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "query_conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "key_conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "8", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "value_conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "gamma1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "gamma2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.BiSRNet.__init__": [[165, 177], ["torch.Module.__init__", "BiSRNet.FCN", "BiSRNet.SR", "BiSRNet.CotSR", "BiSRNet.BiSRNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "utils.misc.initialize_weights", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl._make_layer", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc.initialize_weights"], ["m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x1", ".", "size", "(", ")", "\n", "\n", "q1", "=", "self", ".", "query_conv1", "(", "x1", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "k1", "=", "self", ".", "key_conv1", "(", "x1", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "v1", "=", "self", ".", "value_conv1", "(", "x1", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "\n", "q2", "=", "self", ".", "query_conv2", "(", "x2", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "k2", "=", "self", ".", "key_conv2", "(", "x2", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "v2", "=", "self", ".", "value_conv2", "(", "x2", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "\n", "\n", "energy1", "=", "torch", ".", "bmm", "(", "q1", ",", "k2", ")", "\n", "attention1", "=", "self", ".", "softmax", "(", "energy1", ")", "\n", "out1", "=", "torch", ".", "bmm", "(", "v2", ",", "attention1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.BiSRNet._make_layer": [[178, 192], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "BiSRNet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.conv1x1"], ["out1", "=", "out1", ".", "view", "(", "m_batchsize", ",", "C", ",", "height", ",", "width", ")", "\n", "\n", "energy2", "=", "torch", ".", "bmm", "(", "q2", ",", "k1", ")", "\n", "attention2", "=", "self", ".", "softmax", "(", "energy2", ")", "\n", "out2", "=", "torch", ".", "bmm", "(", "v1", ",", "attention2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "out2", "=", "out2", ".", "view", "(", "m_batchsize", ",", "C", ",", "height", ",", "width", ")", "\n", "\n", "out1", "=", "x1", "+", "self", ".", "gamma1", "*", "out1", "\n", "out2", "=", "x2", "+", "self", ".", "gamma2", "*", "out2", "\n", "\n", "return", "out1", ",", "out2", "\n", "\n", "", "", "class", "BiSRNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "num_classes", "=", "7", ")", ":", "\n", "        ", "super", "(", "BiSRNet", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.BiSRNet.base_forward": [[193, 205], ["BiSRNet.BiSRNet.FCN.layer0", "BiSRNet.BiSRNet.FCN.maxpool", "BiSRNet.BiSRNet.FCN.layer1", "BiSRNet.BiSRNet.FCN.layer2", "BiSRNet.BiSRNet.FCN.layer3", "BiSRNet.BiSRNet.FCN.layer4", "BiSRNet.BiSRNet.FCN.head", "BiSRNet.BiSRNet.SiamSR"], "methods", ["None"], ["self", ".", "FCN", "=", "FCN", "(", "in_channels", ",", "pretrained", "=", "True", ")", "\n", "self", ".", "SiamSR", "=", "SR", "(", "128", ")", "\n", "self", ".", "CotSR", "=", "CotSR", "(", "128", ")", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "res1", "=", "self", ".", "_make_layer", "(", "ResBlock", ",", "256", ",", "128", ",", "6", ",", "stride", "=", "1", ")", "\n", "self", ".", "classifier1", "=", "nn", ".", "Conv2d", "(", "128", ",", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "classifier2", "=", "nn", ".", "Conv2d", "(", "128", ",", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "CD", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "kernel_size", "=", "1", ")", ")", "\n", "initialize_weights", "(", "self", ".", "head", ",", "self", ".", "SiamSR", ",", "self", ".", "res1", ",", "self", ".", "CD", ",", "self", ".", "CotSR", ",", "self", ".", "classifier1", ",", "self", ".", "classifier2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.BiSRNet.CD_forward": [[206, 212], ["x1.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "BiSRNet.BiSRNet.resCD", "BiSRNet.BiSRNet.classifierCD"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "inplanes", ",", "planes", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.BiSRNet.forward": [[213, 224], ["BiSRNet.BiSRNet.size", "BiSRNet.BiSRNet.base_forward", "BiSRNet.BiSRNet.base_forward", "BiSRNet.BiSRNet.CD_forward", "BiSRNet.BiSRNet.CotSR", "BiSRNet.BiSRNet.classifier1", "BiSRNet.BiSRNet.classifier2", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.base_forward", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.base_forward", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.CD_forward"], ["", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "base_forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "FCN", ".", "layer0", "(", "x", ")", "#size:1/4", "\n", "x", "=", "self", ".", "FCN", ".", "maxpool", "(", "x", ")", "#size:1/4", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.conv1x1": [[8, 10], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.BiSRNet.conv3x3": [[11, 13], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.FCN.__init__": [[15, 38], ["torch.Module.__init__", "torchvision.models.resnet34", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.weight.data[].copy_", "torch.Sequential", "torch.Sequential", "SSCDl.FCN.layer3.named_modules", "SSCDl.FCN.layer4.named_modules", "torch.Sequential", "torch.Sequential", "utils.misc.initialize_weights", "torch.Conv2d.weight.data[].copy_", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "FCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet", "=", "models", ".", "resnet34", "(", "pretrained", ")", "\n", "newconv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "newconv1", ".", "weight", ".", "data", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ".", "copy_", "(", "resnet", ".", "conv1", ".", "weight", ".", "data", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "if", "in_channels", ">", "3", ":", "\n", "          ", "newconv1", ".", "weight", ".", "data", "[", ":", ",", "3", ":", "in_channels", ",", ":", ",", ":", "]", ".", "copy_", "(", "resnet", ".", "conv1", ".", "weight", ".", "data", "[", ":", ",", "0", ":", "in_channels", "-", "3", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "newconv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ")", "\n", "self", ".", "maxpool", "=", "resnet", ".", "maxpool", "\n", "self", ".", "layer1", "=", "resnet", ".", "layer1", "\n", "self", ".", "layer2", "=", "resnet", ".", "layer2", "\n", "self", ".", "layer3", "=", "resnet", ".", "layer3", "\n", "self", ".", "layer4", "=", "resnet", ".", "layer4", "\n", "for", "n", ",", "m", "in", "self", ".", "layer3", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'conv1'", "in", "n", "or", "'downsample.0'", "in", "n", ":", "\n", "                ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "for", "n", ",", "m", "in", "self", ".", "layer4", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'conv1'", "in", "n", "or", "'downsample.0'", "in", "n", ":", "\n", "                ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "initialize_weights", "(", "self", ".", "head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.FCN._make_layer": [[39, 52], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "SSCDl.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.conv1x1"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "inplanes", ",", "planes", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.ResBlock.__init__": [[55, 64], ["torch.Module.__init__", "SSCDl.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "SSCDl.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.conv3x3", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.ResBlock.forward": [[65, 82], ["SSCDl.ResBlock.conv1", "SSCDl.ResBlock.bn1", "SSCDl.ResBlock.relu", "SSCDl.ResBlock.conv2", "SSCDl.ResBlock.bn2", "SSCDl.ResBlock.relu", "SSCDl.ResBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__": [[84, 94], ["torch.Module.__init__", "SSCDl.FCN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "SSCDl.SSCDl._make_layer", "torch.Sequential", "torch.Sequential", "utils.misc.initialize_weights", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.__init__", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl._make_layer", "home.repos.pwc.inspect_result.ggsding_bi-srnet.utils.misc.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "num_classes", "=", "7", ")", ":", "\n", "        ", "super", "(", "SSCDl", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "FCN", "=", "FCN", "(", "in_channels", ",", "pretrained", "=", "True", ")", "\n", "self", ".", "classifier1", "=", "nn", ".", "Conv2d", "(", "128", ",", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "classifier2", "=", "nn", ".", "Conv2d", "(", "128", ",", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "resCD", "=", "self", ".", "_make_layer", "(", "ResBlock", ",", "256", ",", "128", ",", "6", ",", "stride", "=", "1", ")", "\n", "self", ".", "classifierCD", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "kernel_size", "=", "1", ")", ")", "\n", "\n", "initialize_weights", "(", "self", ".", "classifier1", ",", "self", ".", "classifier2", ",", "self", ".", "resCD", ",", "self", ".", "classifierCD", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl._make_layer": [[95, 109], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "SSCDl.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.conv1x1"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "inplanes", ",", "planes", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.base_forward": [[110, 120], ["SSCDl.SSCDl.FCN.layer0", "SSCDl.SSCDl.FCN.maxpool", "SSCDl.SSCDl.FCN.layer1", "SSCDl.SSCDl.FCN.layer2", "SSCDl.SSCDl.FCN.layer3", "SSCDl.SSCDl.FCN.layer4", "SSCDl.SSCDl.FCN.head"], "methods", ["None"], ["", "def", "base_forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "FCN", ".", "layer0", "(", "x", ")", "#size:1/4", "\n", "x", "=", "self", ".", "FCN", ".", "maxpool", "(", "x", ")", "#size:1/4", "\n", "x", "=", "self", ".", "FCN", ".", "layer1", "(", "x", ")", "#size:1/4", "\n", "x", "=", "self", ".", "FCN", ".", "layer2", "(", "x", ")", "#size:1/8", "\n", "x", "=", "self", ".", "FCN", ".", "layer3", "(", "x", ")", "#size:1/16", "\n", "x", "=", "self", ".", "FCN", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "FCN", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.CD_forward": [[121, 127], ["x1.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SSCDl.SSCDl.resCD", "SSCDl.SSCDl.classifierCD"], "methods", ["None"], ["", "def", "CD_forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x1", ".", "size", "(", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "resCD", "(", "x", ")", "\n", "change", "=", "self", ".", "classifierCD", "(", "x", ")", "\n", "return", "change", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.forward": [[128, 139], ["SSCDl.SSCDl.size", "SSCDl.SSCDl.base_forward", "SSCDl.SSCDl.base_forward", "SSCDl.SSCDl.CD_forward", "SSCDl.SSCDl.classifier1", "SSCDl.SSCDl.classifier2", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample"], "methods", ["home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.base_forward", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.base_forward", "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.SSCDl.CD_forward"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x_size", "=", "x1", ".", "size", "(", ")", "\n", "\n", "x1", "=", "self", ".", "base_forward", "(", "x1", ")", "\n", "x2", "=", "self", ".", "base_forward", "(", "x2", ")", "\n", "change", "=", "self", ".", "CD_forward", "(", "x1", ",", "x2", ")", "\n", "\n", "out1", "=", "self", ".", "classifier1", "(", "x1", ")", "\n", "out2", "=", "self", ".", "classifier2", "(", "x2", ")", "\n", "\n", "return", "F", ".", "upsample", "(", "change", ",", "x_size", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ",", "F", ".", "upsample", "(", "out1", ",", "x_size", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", ",", "F", ".", "upsample", "(", "out2", ",", "x_size", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.conv1x1": [[8, 10], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ggsding_bi-srnet.models.SSCDl.conv3x3": [[11, 13], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]]}