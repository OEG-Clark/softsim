{"home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.segUtils.threshold": [[61, 147], ["os.path.join", "os.path.join", "imnames.sort", "print", "os.path.exists", "os.mkdir", "open", "pickle.load", "os.path.join", "open", "pickle.dump", "print", "os.path.join", "os.path.join", "nibabel.load", "nib.load.get_data", "range", "im.get_data.flatten", "image.flatten.reshape", "x_predict.astype.astype", "pickle.load.predict", "numpy.copy", "numpy.copy", "numpy.copy", "np.copy.reshape", "np.copy.reshape", "np.copy.reshape", "numpy.array", "os.path.join", "nibabel.Nifti1Image", "nibabel.Nifti1Image", "nibabel.Nifti1Image", "nibabel.save", "nibabel.save", "nibabel.save", "print", "range", "os.path.join", "os.path.join", "os.listdir", "os.path.join", "os.path.split", "os.path.split", "os.path.split", "os.listdir", "os.path.exists", "print", "numpy.uint8", "cv2.fastNlMeansDenoising", "numpy.float64", "yv.reshape.astype", "yc.reshape.astype", "skull.reshape.astype", "joblib.Parallel", "len", "segUtils.threshold.apply_thresh"], "function", ["None"], ["def", "threshold", "(", "BASE", ",", "folder", ",", "parallel", ")", ":", "\n", "\t", "'''\n\tClassification of tissue types in CT scan.\n\t'''", "\n", "classifier_name", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "'TissueClassifier.pkl'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Thresholds'", ")", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Thresholds'", ")", ")", "\n", "#load tissue classifier", "\n", "", "with", "open", "(", "classifier_name", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t", "clf", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "fpath", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "folder", ")", "\n", "imnames", "=", "[", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Scans'", ",", "f", ")", "for", "f", "in", "os", ".", "listdir", "(", "fpath", ")", "if", "(", "f", ".", "endswith", "(", "'.nii.gz'", ")", "or", "f", ".", "endswith", "(", "'.nii'", ")", ")", "]", "\n", "imnames", ".", "sort", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'imname_list.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "imnames", ",", "f", ")", "\n", "\n", "# Apply Threshold", "\n", "", "print", "(", "'-------- Applying Threshold --------'", ")", "\n", "def", "apply_thresh", "(", "i", ")", ":", "\n", "\t\t", "imname", "=", "imnames", "[", "i", "]", "\n", "imname_short", "=", "os", ".", "path", ".", "split", "(", "imname", ")", "[", "-", "1", "]", "\n", "print", "(", "imname_short", ")", "\n", "threshold_namev", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Thresholds'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.thresholdedv.nii.gz'", ")", "\n", "threshold_namec", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Thresholds'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.thresholdedc.nii.gz'", ")", "\n", "short_tnamev", "=", "os", ".", "path", ".", "split", "(", "threshold_namev", ")", "[", "-", "1", "]", "\n", "short_tnamec", "=", "os", ".", "path", ".", "split", "(", "threshold_namec", ")", "[", "-", "1", "]", "\n", "if", "short_tnamev", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Thresholds'", ")", ")", ":", "\n", "\t\t\t", "if", "short_tnamec", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Thresholds'", ")", ")", ":", "\n", "\t\t\t\t", "return", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "imname", ")", ":", "\n", "\t\t\t", "print", "(", "'does not exist'", ")", "\n", "return", "\n", "", "im", "=", "nib", ".", "load", "(", "imname", ")", "\n", "image", "=", "im", ".", "get_data", "(", ")", "\n", "image", "[", "np", ".", "where", "(", "image", ">", "127", ")", "]", "=", "127", "\n", "image", "[", "np", ".", "where", "(", "image", "<", "-", "128", ")", "]", "=", "-", "1000", "\n", "#denoising", "\n", "for", "s", "in", "range", "(", "0", ",", "image", ".", "shape", "[", "2", "]", ")", ":", "\n", "\t\t\t", "slic", "=", "image", "[", ":", ",", ":", ",", "s", "]", "\n", "slic", "=", "np", ".", "uint8", "(", "slic", ")", "\n", "slic", "=", "denoising", "(", "slic", ",", "h", "=", "5", ")", "\n", "image", "[", ":", ",", ":", ",", "s", "]", "=", "np", ".", "float64", "(", "slic", ")", "\n", "#done denoising", "\n", "", "affine", "=", "im", ".", "affine", "\n", "header", "=", "im", ".", "header", "\n", "xsize", ",", "ysize", ",", "zsize", "=", "image", ".", "shape", "\n", "x", "=", "image", ".", "flatten", "(", ")", "\n", "x_predict", "=", "x", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "x_predict", "=", "x_predict", ".", "astype", "(", "float", ")", "\n", "y", "=", "clf", ".", "predict", "(", "x_predict", ")", "\n", "skull", "=", "np", ".", "copy", "(", "y", ")", "\n", "yv", "=", "np", ".", "copy", "(", "y", ")", "\n", "yc", "=", "np", ".", "copy", "(", "y", ")", "\n", "yv", "[", "np", ".", "where", "(", "yv", "!=", "1", ")", "[", "0", "]", "]", "=", "0", "\n", "yc", "[", "np", ".", "where", "(", "yc", "!=", "2", ")", "[", "0", "]", "]", "=", "0", "\n", "yc", "[", "np", ".", "where", "(", "yc", "==", "2", ")", "[", "0", "]", "]", "=", "1", "\n", "skull", "[", "np", ".", "where", "(", "skull", "!=", "3", ")", "[", "0", "]", "]", "=", "-", "1", "\n", "skull", "[", "np", ".", "where", "(", "skull", "==", "3", ")", "[", "0", "]", "]", "=", "1", "\n", "threshold_imgv", "=", "yv", ".", "reshape", "(", "image", ".", "shape", ")", "\n", "threshold_imgc", "=", "yc", ".", "reshape", "(", "image", ".", "shape", ")", "\n", "skull_img", "=", "skull", ".", "reshape", "(", "image", ".", "shape", ")", "\n", "structure", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", "]", "]", ")", "\n", "threshold_imgv", "[", "np", ".", "where", "(", "threshold_imgv", "<", "0.5", ")", "]", "=", "-", "1", "\n", "threshold_imgv", "[", "np", ".", "where", "(", "threshold_imgc", ">", "0.5", ")", "]", "=", "-", "1", "\n", "threshold_imgc", "[", "np", ".", "where", "(", "threshold_imgc", "<", "0.5", ")", "]", "=", "-", "1", "\n", "threshold_imgc", "[", "np", ".", "where", "(", "threshold_imgv", ">", "0.5", ")", "]", "=", "-", "1", "\n", "skull_name", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Thresholds'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.skull.nii.gz'", ")", "\n", "nii_imagev", "=", "nib", ".", "Nifti1Image", "(", "threshold_imgv", ".", "astype", "(", "np", ".", "float32", ")", ",", "affine", ",", "header", ")", "\n", "nii_imagec", "=", "nib", ".", "Nifti1Image", "(", "threshold_imgc", ".", "astype", "(", "np", ".", "float32", ")", ",", "affine", ",", "header", ")", "\n", "skull_image", "=", "nib", ".", "Nifti1Image", "(", "skull_img", ".", "astype", "(", "np", ".", "float32", ")", ",", "affine", ",", "header", ")", "\n", "nib", ".", "save", "(", "nii_imagev", ",", "threshold_namev", ")", "\n", "nib", ".", "save", "(", "nii_imagec", ",", "threshold_namec", ")", "\n", "nib", ".", "save", "(", "skull_image", ",", "skull_name", ")", "\n", "print", "(", "'done thresholding: '", "+", "imname", ")", "\n", "\n", "", "if", "parallel", ":", "\n", "\t\t", "Parallel", "(", "n_jobs", "=", "4", ")", "(", "delayed", "(", "apply_thresh", ")", "(", "i", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "imnames", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "0", ",", "len", "(", "imnames", ")", ")", ":", "\n", "\t\t\t", "apply_thresh", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.segUtils.subarachnoid_seg": [[149, 262], ["print", "pickle.load", "pickle.load.sort", "range", "open", "print", "nibabel.load", "nib.load.get_data", "os.path.join", "nibabel.load", "nib.load.get_data", "os.path.join", "os.path.exists", "nibabel.load", "nib.Nifti1Image.get_data", "numpy.copy", "range", "numpy.copy", "nibabel.Nifti1Image", "os.path.join", "nibabel.save", "nibabel.Nifti1Image", "nibabel.Nifti1Image", "nibabel.save", "nibabel.save", "len", "os.path.join", "os.path.split", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "print", "os.path.exists", "print", "range", "range", "scipy.ndimage.binary_fill_holes", "joblib.Parallel", "segUtils.subarachnoid_seg.subseg"], "function", ["None"], ["", "", "", "def", "subarachnoid_seg", "(", "BASE", ",", "seg_model", ",", "parallel", ")", ":", "\n", "\t", "'''\n\tSegments the subarachnoid space after white matter and ventricle segmentation.\n\t'''", "\n", "print", "(", "'---------------- Subarachnoid Segmentation ------------------'", ")", "\n", "imnames", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'imname_list.pkl'", ")", ",", "'rb'", ")", ")", "\n", "imnames", ".", "sort", "(", ")", "\n", "\n", "def", "subseg", "(", "i", ")", ":", "\n", "\t\t", "imname", "=", "imnames", "[", "i", "]", "\n", "imname_short", "=", "os", ".", "path", ".", "split", "(", "imname", ")", "[", "-", "1", "]", "\n", "print", "(", "imname_short", ")", "\n", "if", "seg_model", "==", "'mcv'", ":", "\n", "\t\t\t", "threshold_name", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Thresholds'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.skull.nii.gz'", ")", "\n", "new_name", "=", "threshold_name", "[", ":", "threshold_name", ".", "find", "(", "'.skull.nii.gz'", ")", "]", "+", "'.skull1.nii.gz'", "\n", "", "else", ":", "\n", "\t\t\t", "threshold_name", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "'UNet_Outputs'", ",", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.segmented.nii.gz'", ")", "\n", "new_name", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Thresholds'", ",", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.brain.nii.gz'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "threshold_name", ")", ":", "\n", "\t\t\t", "print", "(", "'skipped due to no threshold'", ")", "\n", "return", "\n", "", "threshold_image", "=", "nib", ".", "load", "(", "threshold_name", ")", "\n", "threshold_array", "=", "threshold_image", ".", "get_data", "(", ")", "\n", "threshold_namev", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Thresholds'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.thresholdedv.nii.gz'", ")", "\n", "threshold_imagev", "=", "nib", ".", "load", "(", "threshold_namev", ")", "\n", "varray", "=", "threshold_imagev", ".", "get_data", "(", ")", "\n", "if", "seg_model", "==", "'unet'", ":", "\n", "\t\t\t", "final_pred", "=", "'UNet_Outputs'", "\n", "", "else", ":", "\n", "\t\t\t", "final_pred", "=", "'Final_Predictions'", "\n", "", "segment_name", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "final_pred", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.segmented.nii.gz'", ")", "\n", "#orig_vname = os.path.join(BASE,", "\n", "#\t\t\t\t\t\t\t'Predictions',", "\n", "#\t\t\t\t\t\t\timname_short[:imname_short.find('.nii.gz')] + '.segmentedv150.nii.gz')", "\n", "new_segname", "=", "segment_name", "[", ":", "segment_name", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'1.nii.gz'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "segment_name", ")", ":", "\n", "\t\t\t", "print", "(", "'skipped due to no segment'", ")", "\n", "return", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "new_segname", ")", ":", "\n", "\t\t\t", "return", "\n", "", "segment_img", "=", "nib", ".", "load", "(", "segment_name", ")", "\n", "segment_array", "=", "segment_img", ".", "get_data", "(", ")", "\n", "#orig_vimg = nib.load(orig_vname)", "\n", "#orig_varray = orig_vimg.get_data()", "\n", "thresh_filled", "=", "np", ".", "copy", "(", "threshold_array", ")", "\n", "thresh_filled", "[", "np", ".", "where", "(", "threshold_array", "<", "0", ")", "]", "=", "0", "\n", "thresh_filled", "[", "np", ".", "where", "(", "segment_array", ">", "0", ")", "]", "=", "1", "\n", "if", "seg_model", "==", "'unet'", ":", "\n", "\t\t\t", "c_matter_z", "=", "np", ".", "where", "(", "segment_array", "==", "2", ")", "[", "2", "]", "\n", "if", "c_matter_z", ".", "size", "==", "0", ":", "\n", "\t\t\t\t", "print", "(", "'skipping due to no vent in segment'", ")", "\n", "return", "\n", "", "r", "=", "range", "(", "c_matter_z", ".", "min", "(", ")", ",", "c_matter_z", ".", "max", "(", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "r", "=", "range", "(", "65", ",", "182", ")", "\n", "", "for", "s", "in", "r", ":", "\n", "\t\t\t", "slic", "=", "thresh_filled", "[", ":", ",", ":", ",", "s", "]", "\n", "slic", "=", "fill_holes", "(", "slic", ")", "\n", "thresh_filled", "[", ":", ",", ":", ",", "s", "]", "=", "slic", "\n", "", "for", "s", "in", "range", "(", "0", ",", "thresh_filled", ".", "shape", "[", "2", "]", ")", ":", "\n", "\t\t\t", "slic", "=", "thresh_filled", "[", ":", ",", ":", ",", "s", "]", "\n", "if", "seg_model", "==", "'unet'", ":", "\n", "\t\t\t\t", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "\t\t\t\t\t", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "slic", "=", "convex_hull_image", "(", "slic", ")", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "segslic", "=", "segment_array", "[", ":", ",", ":", ",", "s", "]", "\n", "seg_inds", "=", "np", ".", "where", "(", "segslic", ">", "0.5", ")", "\n", "if", "len", "(", "seg_inds", "[", "0", "]", ")", "<", "1", ":", "\n", "\t\t\t\t\t", "thresh_filled", "[", ":", ",", ":", ",", "s", "]", "=", "0", "\n", "continue", "\n", "", "x_min", "=", "np", ".", "min", "(", "seg_inds", "[", "0", "]", ")", "\n", "x_max", "=", "np", ".", "max", "(", "seg_inds", "[", "0", "]", ")", "\n", "y_min", "=", "np", ".", "min", "(", "seg_inds", "[", "1", "]", ")", "\n", "y_max", "=", "np", ".", "max", "(", "seg_inds", "[", "1", "]", ")", "\n", "slic", "[", "0", ":", "x_min", ",", ":", "]", "=", "0", "\n", "slic", "[", ":", ",", "0", ":", "y_min", "]", "=", "0", "\n", "", "thresh_filled", "[", ":", ",", ":", ",", "s", "]", "=", "slic", "\n", "", "subarray", "=", "np", ".", "copy", "(", "varray", ")", "\n", "subarray", "[", "np", ".", "where", "(", "segment_array", ">", "0", ")", "]", "=", "0", "\n", "subarray", "[", "np", ".", "where", "(", "thresh_filled", "<", "0.5", ")", "]", "=", "0", "\n", "varray", "[", "np", ".", "where", "(", "segment_array", ">", "0", ")", "]", "=", "-", "1", "\n", "varray", "[", "np", ".", "where", "(", "thresh_filled", "<", "0.5", ")", "]", "=", "-", "1", "\n", "\n", "new_thresholdv", "=", "nib", ".", "Nifti1Image", "(", "varray", ",", "threshold_imagev", ".", "affine", ",", "threshold_imagev", ".", "header", ")", "\n", "new_tnamev", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Thresholds'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.thresholdedv1.nii.gz'", ")", "\n", "nib", ".", "save", "(", "new_thresholdv", ",", "new_tnamev", ")", "\n", "\n", "segment_array", "[", "np", ".", "where", "(", "subarray", ">", "0.5", ")", "]", "=", "3", "\n", "segment_array", "[", "np", ".", "where", "(", "(", "varray", "==", "1", ")", "&", "(", "segment_array", "==", "1", ")", ")", "]", "=", "3", "\n", "\n", "if", "seg_model", "==", "'mcv'", ":", "\n", "\t\t\t", "segment_array", "[", ":", ",", ":", ",", "0", ":", "40", "]", "=", "0", "\n", "\n", "", "segment_img", "=", "nib", ".", "Nifti1Image", "(", "segment_array", ",", "segment_img", ".", "affine", ",", "segment_img", ".", "header", ")", "\n", "filled_image", "=", "nib", ".", "Nifti1Image", "(", "thresh_filled", ",", "threshold_image", ".", "affine", ",", "threshold_image", ".", "header", ")", "\n", "nib", ".", "save", "(", "filled_image", ",", "new_name", ")", "\n", "nib", ".", "save", "(", "segment_img", ",", "new_segname", ")", "\n", "\n", "", "r", "=", "range", "(", "0", ",", "len", "(", "imnames", ")", ")", "\n", "if", "parallel", ":", "\n", "\t\t", "Parallel", "(", "n_jobs", "=", "5", ")", "(", "delayed", "(", "subseg", ")", "(", "i", ")", "for", "i", "in", "r", ")", "\n", "", "else", ":", "\n", "\t\t", "for", "k", "in", "r", ":", "\n", "\t\t\t", "subseg", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.segUtils.combine_thresh": [[264, 307], ["pickle.load", "pickle.load.sort", "os.listdir", "open", "os.path.join", "print", "os.path.join", "os.path.join", "nibabel.load", "nib.load.get_data", "nibabel.load", "nib.load.get_data", "os.path.join", "nibabel.Nifti1Image", "nibabel.save", "os.path.split", "print", "numpy.where", "numpy.where", "numpy.where", "str", "os.path.split", "os.path.split", "imname_short.find", "imname_short.find", "imname_short.find"], "function", ["None"], ["", "", "", "def", "combine_thresh", "(", "BASE", ")", ":", "\n", "\t", "'''\n\tCombines White Matter and CSF threshold masks.\n\t'''", "\n", "imnames", "=", "pickle", ".", "load", "(", "open", "(", "'imname_list1.pkl'", ",", "'rb'", ")", ",", "encoding", "=", "'latin1'", ")", "\n", "imnames", ".", "sort", "(", ")", "\n", "segfiles", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Thresholds'", ")", ")", "\n", "\n", "count", "=", "0", "\n", "for", "imname", "in", "imnames", ":", "\n", "\t\t", "if", "'NAV'", "in", "imname", ":", "\n", "\t\t\t", "continue", "\n", "", "imname_short", "=", "os", ".", "path", ".", "split", "(", "imname", ")", "[", "-", "1", "]", "\n", "print", "(", "str", "(", "count", ")", "+", "': '", "+", "imname_short", ")", "\n", "count", "+=", "1", "\n", "vsegname", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Thresholds'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'_MNI152.nii.gz'", ")", "]", "+", "'.thresholdedv.nii.gz'", ")", "\n", "csegname", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Thresholds'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'_MNI152.nii.gz'", ")", "]", "+", "'.thresholdedc.nii.gz'", ")", "\n", "if", "os", ".", "path", ".", "split", "(", "vsegname", ")", "[", "-", "1", "]", "not", "in", "segfiles", "or", "os", ".", "path", ".", "split", "(", "csegname", ")", "[", "-", "1", "]", "not", "in", "segfiles", ":", "\n", "\t\t\t", "print", "(", "'skipped'", ")", "\n", "continue", "\n", "", "vsegimg", "=", "nib", ".", "load", "(", "vsegname", ")", "\n", "vsegarr", "=", "vsegimg", ".", "get_data", "(", ")", "\n", "vsegheader", "=", "vsegimg", ".", "header", "\n", "vsegaffine", "=", "vsegimg", ".", "affine", "\n", "vsegarr", "[", "np", ".", "where", "(", "vsegarr", "!=", "1", ")", "]", "=", "0", "\n", "\n", "csegimg", "=", "nib", ".", "load", "(", "csegname", ")", "\n", "csegarr", "=", "csegimg", ".", "get_data", "(", ")", "\n", "csegarr", "[", "np", ".", "where", "(", "csegarr", "!=", "1", ")", "]", "=", "0", "\n", "vsegarr", "[", "np", ".", "where", "(", "csegarr", ">", "0", ")", "]", "=", "0", "\n", "\n", "segarr", "=", "vsegarr", "+", "2", "*", "csegarr", "\n", "\n", "segname", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Combined_Thresholds'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.segmented.nii.gz'", ")", "\n", "\n", "segimg", "=", "nib", ".", "Nifti1Image", "(", "segarr", ",", "vsegaffine", ",", "vsegheader", ")", "\n", "nib", ".", "save", "(", "segimg", ",", "segname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.segUtils.combine_segs": [[309, 351], ["pickle.load", "pickle.load.sort", "os.listdir", "os.path.exists", "os.mkdir", "open", "os.path.join", "print", "os.path.join", "os.path.join", "nibabel.load", "nib.load.get_data", "nibabel.load", "nib.load.get_data", "os.path.join", "nibabel.Nifti1Image", "nibabel.save", "os.path.join", "os.path.join", "os.path.join", "os.path.split", "print", "numpy.where", "str", "os.path.split", "os.path.split", "imname_short.find", "imname_short.find", "imname_short.find"], "function", ["None"], ["", "", "def", "combine_segs", "(", "BASE", ")", ":", "\n", "\t", "'''\n\tCombines white matter and ventricle segmentations.\n\t'''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Final_Predictions'", ")", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Final_Predictions'", ")", ")", "\n", "", "imnames", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'imname_list1.pkl'", ")", ",", "'rb'", ")", ")", "\n", "imnames", ".", "sort", "(", ")", "\n", "segfiles", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Predictions'", ")", ")", "\n", "\n", "count", "=", "0", "\n", "for", "imname", "in", "imnames", ":", "\n", "\t\t", "if", "'NAV'", "in", "imname", ":", "\n", "\t\t\t", "continue", "\n", "", "imname_short", "=", "os", ".", "path", ".", "split", "(", "imname", ")", "[", "-", "1", "]", "\n", "print", "(", "str", "(", "count", ")", "+", "': '", "+", "imname_short", ")", "\n", "count", "+=", "1", "\n", "vsegname", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Predictions'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.segmentedv150_1.nii.gz'", ")", "\n", "csegname", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Predictions'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.segmentedc150.nii.gz'", ")", "\n", "if", "os", ".", "path", ".", "split", "(", "vsegname", ")", "[", "-", "1", "]", "not", "in", "segfiles", "or", "os", ".", "path", ".", "split", "(", "csegname", ")", "[", "-", "1", "]", "not", "in", "segfiles", ":", "\n", "\t\t\t", "print", "(", "'skipped'", ")", "\n", "continue", "\n", "", "vsegimg", "=", "nib", ".", "load", "(", "vsegname", ")", "\n", "vsegarr", "=", "vsegimg", ".", "get_data", "(", ")", "\n", "vsegheader", "=", "vsegimg", ".", "header", "\n", "vsegaffine", "=", "vsegimg", ".", "affine", "\n", "\n", "csegimg", "=", "nib", ".", "load", "(", "csegname", ")", "\n", "csegarr", "=", "csegimg", ".", "get_data", "(", ")", "\n", "vsegarr", "[", "np", ".", "where", "(", "csegarr", ">", "0", ")", "]", "=", "0", "\n", "\n", "segarr", "=", "vsegarr", "+", "2", "*", "csegarr", "\n", "\n", "segname", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Final_Predictions'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.segmented.nii.gz'", ")", "\n", "segimg", "=", "nib", ".", "Nifti1Image", "(", "segarr", ",", "vsegaffine", ",", "vsegheader", ")", "\n", "nib", ".", "save", "(", "segimg", ",", "segname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.segUtils.modify_image": [[353, 389], ["nibabel.load", "nib.load.get_data", "nibabel.Nifti1Image", "nibabel.save", "seg_name.find"], "function", ["None"], ["", "", "def", "modify_image", "(", "seg_name", ",", "imname", ",", "segclass", ")", ":", "\n", "\t", "'''\n\tModifies the segmentation in the case of previous stroke.\n\t'''", "\n", "seg_img", "=", "nib", ".", "load", "(", "seg_name", ")", "\n", "segarray", "=", "seg_img", ".", "get_data", "(", ")", "\n", "'''\n\tif segclass == 'v':\n\t\txsize, ysize, zsize = segarray.shape\n\t\tif np.sum(segarray) > 90000:\n\t\t\torig_img = nib.load(imname).get_data()\n\t\t\t#denoising\n\t\t\torig_img[np.where(orig_img > 127)] = 127\n\t\t\torig_img[np.where(orig_img < -128)] = -128\n\t\t\torig_img = orig_img + 128\n\t\t\torig_img = np.uint8(orig_img)\n\t\t\tfor ind in range(0, orig_img.shape[2]):\t\n\t\t\t\tslic = orig_img[:,:,ind]\n\t\t\t\tslic = denoising(slic, h=5)\n\t\t\t\torig_img[:,:,ind] = slic\n\t\t\torig_img = np.float32(orig_img)\n\t\t\torig_img = orig_img - 128\n\t\t\torig_img[np.where(orig_img == -128)] = -1000\n\t\t\t#done denoising\n\t\t\tsegarray[np.where(orig_img>10)] = 0\n\t\t\tsegarray[:,:,120:int(zsize)-1] = 0\n\t\t\tsegarray[:,:,0:65] = 0\n\t\t\t#dilation\n\t\t\tfor z in range(zsize):\n\t\t\t\tslic = segarray[:,:,z]\n\t\t\t\tslic = dilation(slic, iterations=5)\n\t\t\t\tsegarray[:,:,z] == slic\n\t'''", "\n", "new_segimg", "=", "nib", ".", "Nifti1Image", "(", "segarray", ",", "seg_img", ".", "affine", ",", "seg_img", ".", "header", ")", "\n", "new_segname", "=", "seg_name", "[", ":", "seg_name", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'_1.nii.gz'", "\n", "nib", ".", "save", "(", "new_segimg", ",", "new_segname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.segUtils.snake_seg": [[391, 631], ["pickle.load", "pickle.load", "pickle.load", "pickle.load.sort", "print", "print", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "open", "pickle.load", "open", "open", "open", "print", "os.path.join", "os.path.join", "nibabel.load().get_data", "nib.load().get_data.flatten", "image.flatten.reshape", "x_predict.astype.astype", "pickle.load.predict", "numpy.copy", "numpy.copy", "numpy.copy", "np.copy.reshape", "np.copy.reshape", "np.copy.reshape", "numpy.array", "os.path.join", "nibabel.Nifti1Image", "nibabel.Nifti1Image", "nibabel.Nifti1Image", "nibabel.save", "nibabel.save", "nibabel.save", "print", "range", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "segUtils.snake_seg.store_evolution_in"], "function", ["None"], ["", "def", "snake_seg", "(", "BASE", ",", "PARALLEL", "=", "True", ",", "segclass", "=", "'v'", ")", ":", "\n", "\t", "'''\n\tMorphological segmentation based on a-priori seeding of white matter and ventricles in CT Scans.\n\t'''", "\n", "classifier_name", "=", "'TissueClassifier.pkl'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Thresholds'", ")", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Thresholds'", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Predictions'", ")", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Predictions'", ")", ")", "\n", "#load tissue classifier", "\n", "", "with", "open", "(", "classifier_name", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t", "clf", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "affine_dict", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'imname_affine.pkl'", ")", ",", "'rb'", ")", ")", "\n", "header_dict", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'imname_header.pkl'", ")", ",", "'rb'", ")", ")", "\n", "imnames", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'imname_list.pkl'", ")", ",", "'rb'", ")", ")", "\n", "imnames", ".", "sort", "(", ")", "\n", "\n", "# Apply Threshold", "\n", "print", "(", "'-------- Applying Threshold --------'", ")", "\n", "def", "apply_thresh", "(", "i", ")", ":", "\n", "\t\t", "imname", "=", "imnames", "[", "i", "]", "\n", "imname_short", "=", "os", ".", "path", ".", "split", "(", "imname", ")", "[", "-", "1", "]", "\n", "print", "(", "imname_short", ")", "\n", "threshold_namev", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Thresholds'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.thresholdedv.nii.gz'", ")", "\n", "threshold_namec", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Thresholds'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.thresholdedc.nii.gz'", ")", "\n", "short_tnamev", "=", "os", ".", "path", ".", "split", "(", "threshold_namev", ")", "[", "-", "1", "]", "\n", "short_tnamec", "=", "os", ".", "path", ".", "split", "(", "threshold_namec", ")", "[", "-", "1", "]", "\n", "if", "short_tnamev", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Thresholds'", ")", ")", ":", "\n", "\t\t\t", "if", "short_tnamec", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Thresholds'", ")", ")", ":", "\n", "\t\t\t\t", "return", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "imname", ")", ":", "\n", "\t\t\t", "print", "(", "'does not exist'", ")", "\n", "return", "\n", "", "image", "=", "nib", ".", "load", "(", "imname", ")", ".", "get_data", "(", ")", "\n", "image", "[", "np", ".", "where", "(", "image", ">", "127", ")", "]", "=", "127", "\n", "image", "[", "np", ".", "where", "(", "image", "<", "-", "128", ")", "]", "=", "-", "1000", "\n", "affine", "=", "affine_dict", "[", "imname", "]", "\n", "header", "=", "header_dict", "[", "imname", "]", "\n", "xsize", ",", "ysize", ",", "zsize", "=", "image", ".", "shape", "\n", "x", "=", "image", ".", "flatten", "(", ")", "\n", "x_predict", "=", "x", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "x_predict", "=", "x_predict", ".", "astype", "(", "float", ")", "\n", "y", "=", "clf", ".", "predict", "(", "x_predict", ")", "\n", "skull", "=", "np", ".", "copy", "(", "y", ")", "\n", "yv", "=", "np", ".", "copy", "(", "y", ")", "\n", "yc", "=", "np", ".", "copy", "(", "y", ")", "\n", "yv", "[", "np", ".", "where", "(", "yv", "!=", "1", ")", "[", "0", "]", "]", "=", "0", "\n", "yc", "[", "np", ".", "where", "(", "yc", "!=", "2", ")", "[", "0", "]", "]", "=", "0", "\n", "yc", "[", "np", ".", "where", "(", "yc", "==", "2", ")", "[", "0", "]", "]", "=", "1", "\n", "skull", "[", "np", ".", "where", "(", "skull", "!=", "3", ")", "[", "0", "]", "]", "=", "-", "1", "\n", "skull", "[", "np", ".", "where", "(", "skull", "==", "3", ")", "[", "0", "]", "]", "=", "1", "\n", "threshold_imgv", "=", "yv", ".", "reshape", "(", "image", ".", "shape", ")", "\n", "threshold_imgc", "=", "yc", ".", "reshape", "(", "image", ".", "shape", ")", "\n", "skull_img", "=", "skull", ".", "reshape", "(", "image", ".", "shape", ")", "\n", "structure", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", "]", "]", ")", "\n", "threshold_imgv", "[", "np", ".", "where", "(", "threshold_imgv", "<", "0.5", ")", "]", "=", "-", "1", "\n", "threshold_imgv", "[", "np", ".", "where", "(", "threshold_imgc", ">", "0.5", ")", "]", "=", "-", "1", "\n", "threshold_imgc", "[", "np", ".", "where", "(", "threshold_imgc", "<", "0.5", ")", "]", "=", "-", "1", "\n", "threshold_imgc", "[", "np", ".", "where", "(", "threshold_imgv", ">", "0.5", ")", "]", "=", "-", "1", "\n", "skull_name", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Thresholds'", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.skull.nii.gz'", ")", "\n", "nii_imagev", "=", "nib", ".", "Nifti1Image", "(", "threshold_imgv", ".", "astype", "(", "np", ".", "float32", ")", ",", "affine", ",", "header", ")", "\n", "nii_imagec", "=", "nib", ".", "Nifti1Image", "(", "threshold_imgc", ".", "astype", "(", "np", ".", "float32", ")", ",", "affine", ",", "header", ")", "\n", "skull_image", "=", "nib", ".", "Nifti1Image", "(", "skull_img", ".", "astype", "(", "np", ".", "float32", ")", ",", "affine", ",", "header", ")", "\n", "nib", ".", "save", "(", "nii_imagev", ",", "threshold_namev", ")", "\n", "nib", ".", "save", "(", "nii_imagec", ",", "threshold_namec", ")", "\n", "nib", ".", "save", "(", "skull_image", ",", "skull_name", ")", "\n", "print", "(", "'done thresholding: '", "+", "imname", ")", "\n", "\n", "", "if", "PARALLEL", ":", "\n", "\t\t", "Parallel", "(", "n_jobs", "=", "4", ")", "(", "delayed", "(", "apply_thresh", ")", "(", "i", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "imnames", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "0", ",", "len", "(", "imnames", ")", ")", ":", "\n", "\t\t\t", "apply_thresh", "(", "i", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'imname_affine1.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "affine_dict", ",", "f", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'imname_header1.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "header_dict", ",", "f", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'imname_list1.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "imnames", ",", "f", ")", "\n", "\n", "# Active Contour", "\n", "", "print", "(", "'--------- Snake Seg'", "+", "segclass", "+", "' ---------'", ")", "\n", "def", "store_evolution_in", "(", "lst", ")", ":", "\n", "\t\t", "def", "_store", "(", "x", ")", ":", "\n", "\t\t\t", "lst", ".", "append", "(", "np", ".", "copy", "(", "x", ")", ")", "\n", "", "return", "_store", "\n", "\n", "\n", "", "def", "seg_ventricle", "(", "i", ")", ":", "\n", "\t\t", "evolution", "=", "[", "]", "\n", "callback", "=", "store_evolution_in", "(", "evolution", ")", "\n", "imname", "=", "imnames", "[", "i", "]", "\n", "\n", "imname1", "=", "os", ".", "path", ".", "split", "(", "imname", ")", "[", "-", "1", "]", "\n", "threshold_name", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Thresholds'", ",", "\n", "imname1", "[", ":", "imname1", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.thresholded'", "+", "segclass", "+", "'.nii.gz'", ")", "\n", "seg_name", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Predictions'", ",", "\n", "imname1", "[", ":", "imname1", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.segmented'", "+", "segclass", "+", "'0.nii.gz'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "seg_name", ")", ":", "\n", "\t\t\t", "return", "\n", "", "print", "(", "'starting segmentation: '", "+", "imname", ")", "\n", "\n", "timg", "=", "nib", ".", "load", "(", "threshold_name", ")", ".", "get_data", "(", ")", "\n", "\n", "#img = nib.load(imname).get_data()", "\n", "#timg[np.where(timg>0)] = img[np.where(timg>0)]", "\n", "mask_name", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Anatomical_Mask.nii.gz'", ")", "\n", "anatomical_mask", "=", "nib", ".", "load", "(", "mask_name", ")", ".", "get_data", "(", ")", "\n", "affine", "=", "affine_dict", "[", "imname", "]", "\n", "header", "=", "header_dict", "[", "imname", "]", "\n", "xsize", ",", "ysize", ",", "zsize", "=", "timg", ".", "shape", "\n", "initial_ls", "=", "np", ".", "zeros", "(", "timg", ".", "shape", ")", "\n", "radius", "=", "int", "(", "xsize", "*", "0.05", ")", "\n", "radx", "=", "max", "(", "2", ",", "int", "(", "radius", "/", "abs", "(", "affine", "[", "0", ",", "0", "]", ")", ")", ")", "\n", "rady", "=", "max", "(", "2", ",", "int", "(", "radius", "/", "abs", "(", "affine", "[", "1", ",", "1", "]", ")", ")", ")", "\n", "radz", "=", "max", "(", "2", ",", "int", "(", "radius", "/", "abs", "(", "affine", "[", "2", ",", "2", "]", ")", ")", ")", "\n", "# Drawing 3-D ellipses as seeds", "\n", "if", "segclass", "==", "'v'", ":", "\n", "\t\t\t", "timg", "[", "85", ":", "100", ",", "100", ":", "218", ",", "0", ":", "65", "]", "=", "-", "1", "\n", "timg", "[", "90", ":", "94", ",", "0", ":", "80", ",", "60", ":", "90", "]", "=", "-", "1", "\n", "timg", "[", "75", ":", "85", ",", "110", ":", "218", ",", "0", ":", "65", "]", "=", "-", "1", "\n", "timg", "[", "100", ":", "110", ",", "110", ":", "218", ",", "0", ":", "65", "]", "=", "-", "1", "\n", "timg", "[", "7", ":", "110", ",", "60", ":", "97", ",", "0", ":", "65", "]", "=", "-", "1", "\n", "timg", "[", "np", ".", "where", "(", "anatomical_mask", ">", "0.5", ")", "]", "=", "-", "1", "\n", "index", "=", "(", "int", "(", "xsize", "*", ".5", ")", ",", "int", "(", "ysize", "*", ".5", ")", ",", "int", "(", "zsize", "*", ".5", ")", ")", "\n", "rr1", ",", "cc1", "=", "ellipse", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ",", "radx", ",", "rady", ")", "\n", "rr2", ",", "cc2", "=", "ellipse", "(", "index", "[", "0", "]", ",", "index", "[", "2", "]", ",", "radx", ",", "radz", ")", "\n", "rr3", ",", "cc3", "=", "ellipse", "(", "int", "(", "index", "[", "0", "]", "-", "radx", ")", ",", "int", "(", "index", "[", "1", "]", "-", "rady", ")", ",", "radx", ",", "rady", ")", "\n", "rr4", ",", "cc4", "=", "ellipse", "(", "int", "(", "index", "[", "0", "]", "-", "radx", ")", ",", "index", "[", "2", "]", ",", "radx", ",", "radz", ")", "\n", "rr5", ",", "cc5", "=", "ellipse", "(", "int", "(", "index", "[", "0", "]", "-", "radx", ")", ",", "int", "(", "index", "[", "1", "]", "+", "rady", ")", ",", "radx", ",", "rady", ")", "\n", "rr6", ",", "cc6", "=", "ellipse", "(", "int", "(", "index", "[", "0", "]", "+", "radx", ")", ",", "int", "(", "index", "[", "1", "]", "-", "rady", ")", ",", "radx", ",", "rady", ")", "\n", "rr7", ",", "cc7", "=", "ellipse", "(", "int", "(", "index", "[", "0", "]", "+", "radx", ")", ",", "index", "[", "2", "]", ",", "radx", ",", "radz", ")", "\n", "rr8", ",", "cc8", "=", "ellipse", "(", "int", "(", "index", "[", "0", "]", "+", "radx", ")", ",", "int", "(", "index", "[", "1", "]", "+", "rady", ")", ",", "radx", ",", "rady", ")", "\n", "rr9", ",", "cc9", "=", "ellipse", "(", "91", ",", "85", ",", "radx", ",", "rady", ")", "\n", "rr10", ",", "cc10", "=", "ellipse", "(", "91", ",", "75", ",", "radx", ",", "radz", ")", "\n", "\n", "temp", "=", "np", ".", "zeros", "(", "initial_ls", ".", "shape", ")", "\n", "temp2", "=", "np", ".", "zeros", "(", "temp", ".", "shape", ")", "\n", "initial_ls", "[", "rr1", ",", "cc1", ",", ":", "]", "=", "1", "\n", "temp", "[", "rr2", ",", ":", ",", "cc2", "]", "=", "1", "\n", "initial_ls", "=", "np", ".", "multiply", "(", "initial_ls", ",", "temp", ")", "\n", "temp", "[", ":", ",", ":", ",", ":", "]", "=", "0", "\n", "temp", "[", "rr3", ",", "cc3", ",", ":", "]", "=", "1", "\n", "temp2", "[", "rr4", ",", ":", ",", "cc4", "]", "=", "1", "\n", "initial_ls", "+=", "np", ".", "multiply", "(", "temp", ",", "temp2", ")", "\n", "temp", "[", ":", ",", ":", ",", ":", "]", "=", "0", "\n", "temp", "[", "rr5", ",", "cc5", ",", ":", "]", "=", "1", "\n", "initial_ls", "+=", "np", ".", "multiply", "(", "temp", ",", "temp2", ")", "\n", "temp", "[", ":", ",", ":", ",", ":", "]", "=", "0", "\n", "temp2", "[", ":", ",", ":", ",", ":", "]", "=", "0", "\n", "temp", "[", "rr6", ",", "cc6", ",", ":", "]", "=", "1", "\n", "temp2", "[", "rr7", ",", ":", ",", "cc7", "]", "=", "1", "\n", "initial_ls", "+=", "np", ".", "multiply", "(", "temp", ",", "temp2", ")", "\n", "temp", "[", ":", ",", ":", ",", ":", "]", "=", "0", "\n", "temp", "[", "rr8", ",", "cc8", ",", ":", "]", "=", "1", "\n", "initial_ls", "+=", "np", ".", "multiply", "(", "temp", ",", "temp2", ")", "\n", "\n", "temp", "[", ":", ",", ":", ",", ":", "]", "=", "0", "\n", "temp2", "[", ":", ",", ":", ",", ":", "]", "=", "0", "\n", "temp", "[", "rr9", ",", "cc9", ",", ":", "]", "=", "1", "\n", "temp2", "[", "rr10", ",", ":", ",", "cc10", "]", "=", "1", "\n", "initial_ls", "+=", "np", ".", "multiply", "(", "temp", ",", "temp2", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "index", "=", "(", "int", "(", "xsize", "*", ".5", ")", ",", "int", "(", "ysize", "*", ".75", ")", ",", "int", "(", "zsize", "*", ".5", ")", ")", "\n", "index1", "=", "(", "int", "(", "xsize", "*", ".5", ")", ",", "int", "(", "ysize", "*", ".5", ")", ",", "int", "(", "zsize", "*", ".75", ")", ")", "\n", "index2", "=", "(", "int", "(", "xsize", "*", ".5", ")", ",", "int", "(", "ysize", "*", ".25", ")", ",", "int", "(", "zsize", "*", ".5", ")", ")", "\n", "index3", "=", "(", "int", "(", "xsize", "*", ".5", ")", ",", "int", "(", "ysize", "*", ".75", ")", ",", "int", "(", "zsize", "*", ".4", ")", ")", "\n", "rr", ",", "cc", "=", "ellipse", "(", "index", "[", "0", "]", ",", "index", "[", "1", "]", ",", "radx", ",", "rady", ")", "\n", "rr1", ",", "cc1", "=", "ellipse", "(", "index", "[", "0", "]", ",", "index", "[", "2", "]", ",", "radx", ",", "radz", ")", "\n", "rr2", ",", "cc2", "=", "ellipse", "(", "index1", "[", "0", "]", ",", "index1", "[", "1", "]", ",", "radx", ",", "rady", ")", "\n", "rr3", ",", "cc3", "=", "ellipse", "(", "index1", "[", "0", "]", ",", "index1", "[", "2", "]", ",", "radx", ",", "radz", ")", "\n", "rr4", ",", "cc4", "=", "ellipse", "(", "index2", "[", "0", "]", ",", "index2", "[", "1", "]", ",", "radx", ",", "rady", ")", "\n", "rr5", ",", "cc5", "=", "ellipse", "(", "index2", "[", "0", "]", ",", "index2", "[", "2", "]", ",", "radx", ",", "radz", ")", "\n", "rr6", ",", "cc6", "=", "ellipse", "(", "index3", "[", "0", "]", ",", "index3", "[", "1", "]", ",", "radx", ",", "rady", ")", "\n", "rr7", ",", "cc7", "=", "ellipse", "(", "index3", "[", "0", "]", ",", "index3", "[", "2", "]", ",", "radx", ",", "radz", ")", "\n", "temp", "=", "np", ".", "zeros", "(", "initial_ls", ".", "shape", ")", "\n", "temp1", "=", "np", ".", "copy", "(", "temp", ")", "\n", "initial_ls", "[", "rr", ",", "cc", ",", ":", "]", "=", "1", "\n", "temp", "[", "rr1", ",", ":", ",", "cc1", "]", "=", "1", "\n", "temp1", "[", "rr3", ",", ":", ",", "cc3", "]", "=", "1", "\n", "initial_ls", "=", "np", ".", "multiply", "(", "initial_ls", ",", "temp", ")", "\n", "temp", "=", "np", ".", "zeros", "(", "temp", ".", "shape", ")", "\n", "temp", "[", "rr2", ",", "cc2", ",", ":", "]", "=", "1", "\n", "initial_ls", "+=", "np", ".", "multiply", "(", "temp", ",", "temp1", ")", "\n", "temp", "=", "np", ".", "zeros", "(", "temp", ".", "shape", ")", "\n", "temp", "[", "rr4", ",", "cc4", ",", ":", "]", "=", "1", "\n", "temp1", "=", "np", ".", "zeros", "(", "temp1", ".", "shape", ")", "\n", "temp1", "[", "rr5", ",", ":", ",", "cc5", "]", "=", "1", "\n", "initial_ls", "+=", "np", ".", "multiply", "(", "temp", ",", "temp1", ")", "\n", "temp", "=", "np", ".", "zeros", "(", "temp", ".", "shape", ")", "\n", "temp1", "=", "np", ".", "zeros", "(", "temp1", ".", "shape", ")", "\n", "temp", "[", "rr6", ",", "cc6", ",", ":", "]", "=", "1", "\n", "temp1", "[", "rr7", ",", ":", ",", "cc7", "]", "=", "1", "\n", "initial_ls", "+=", "np", ".", "multiply", "(", "temp", ",", "temp1", ")", "\n", "\n", "", "initial_ls", "[", "np", ".", "where", "(", "timg", "<=", "0", ")", "]", "=", "0", "\n", "if", "segclass", "==", "'v'", ":", "\n", "\t\t\t", "numiter", "=", "150", "\n", "", "else", ":", "\n", "\t\t\t", "numiter", "=", "150", "\n", "", "segmentation", "=", "mcv", "(", "timg", ".", "astype", "(", "float", ")", ",", "\n", "iterations", "=", "numiter", ",", "\n", "init_level_set", "=", "initial_ls", ",", "\n", "iter_callback", "=", "callback", ")", "\n", "\n", "segmentation", "[", "np", ".", "where", "(", "timg", "<=", "0", ")", "]", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "evolution", ")", ",", "len", "(", "evolution", ")", "-", "1", ")", ":", "\n", "\t\t\t", "seg_img", "=", "evolution", "[", "i", "]", "\n", "seg_img", "[", "np", ".", "where", "(", "timg", "<=", "0", ")", "]", "=", "0", "\n", "if", "segclass", "==", "'v'", ":", "\n", "\t\t\t\t", "seg_img", "[", ":", ",", ":", ",", "0", ":", "int", "(", "zsize", "*", "0.2", ")", "]", "=", "0", "\n", "", "nii_seg", "=", "nib", ".", "Nifti1Image", "(", "seg_img", ",", "affine", ",", "header", ")", "\n", "seg_name", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Predictions'", ",", "\n", "imname1", "[", ":", "imname1", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.segmented'", "+", "segclass", "+", "str", "(", "i", ")", "+", "'.nii.gz'", ")", "\n", "nib", ".", "save", "(", "nii_seg", ",", "seg_name", ")", "\n", "", "seg_name", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "'Predictions'", ",", "\n", "imname1", "[", ":", "imname1", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.segmented'", "+", "segclass", "+", "str", "(", "len", "(", "evolution", ")", "-", "1", ")", "+", "'.nii.gz'", ")", "\n", "modify_image", "(", "seg_name", ",", "imname", ",", "segclass", ")", "\n", "\n", "print", "(", "'completed segmentation: '", "+", "imname1", ")", "\n", "\n", "\n", "", "if", "PARALLEL", ":", "\n", "\t\t", "Parallel", "(", "n_jobs", "=", "4", ")", "(", "delayed", "(", "seg_ventricle", ")", "(", "i", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "imnames", ")", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "0", ",", "len", "(", "imnames", ")", ")", ":", "\n", "\t\t\t", "seg_ventricle", "(", "i", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.bone_extracted": [[54, 92], ["SimpleITK.ReadImage", "SimpleITK.Image", "SimpleITK.Image", "SimpleITK.GetArrayFromImage", "SimpleITK.GetArrayFromImage", "SimpleITK.GetArrayFromImage", "range", "SimpleITK.GetImageFromArray", "SimpleITK.GetImageFromArray", "sitk.GetImageFromArray.CopyInformation", "sitk.GetImageFromArray.CopyInformation", "SimpleITK.WriteImage", "sitk.ReadImage.GetWidth", "sitk.ReadImage.GetHeight", "sitk.ReadImage.GetDepth", "sitk.ReadImage.GetWidth", "sitk.ReadImage.GetHeight", "sitk.ReadImage.GetDepth", "range", "range", "ct_img_path.find", "ct_img_path.find"], "function", ["None"], ["def", "bone_extracted", "(", "ct_img_path", ")", ":", "\n", "\n", "\t", "ct_img", "=", "sitk", ".", "ReadImage", "(", "ct_img_path", ")", "\n", "\n", "bone_mask_img", "=", "sitk", ".", "Image", "(", "ct_img", ".", "GetWidth", "(", ")", ",", "ct_img", ".", "GetHeight", "(", ")", ",", "ct_img", ".", "GetDepth", "(", ")", ",", "sitk", ".", "sitkFloat32", ")", "\n", "\n", "output_ct_img", "=", "sitk", ".", "Image", "(", "ct_img", ".", "GetWidth", "(", ")", ",", "ct_img", ".", "GetHeight", "(", ")", ",", "ct_img", ".", "GetDepth", "(", ")", ",", "sitk", ".", "sitkFloat32", ")", "\n", "\n", "ct_nda", "=", "sitk", ".", "GetArrayFromImage", "(", "ct_img", ")", "\n", "\n", "bone_mask_nda", "=", "sitk", ".", "GetArrayFromImage", "(", "bone_mask_img", ")", "\n", "\n", "output_ct_nda", "=", "sitk", ".", "GetArrayFromImage", "(", "output_ct_img", ")", "\n", "\n", "bone_pixel", "=", "500", "\n", "\n", "for", "z", "in", "range", "(", "ct_nda", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t", "for", "x", "in", "range", "(", "ct_nda", ".", "shape", "[", "1", "]", ")", ":", "\n", "\t\t\t", "for", "y", "in", "range", "(", "ct_nda", ".", "shape", "[", "2", "]", ")", ":", "\n", "\t\t\t\t", "if", "ct_nda", "[", "z", ",", "x", ",", "y", "]", ">=", "bone_pixel", ":", "\n", "\t\t\t\t\t", "output_ct_nda", "[", "z", ",", "x", ",", "y", "]", "=", "ct_nda", "[", "z", ",", "x", ",", "y", "]", "\n", "bone_mask_nda", "[", "z", ",", "x", ",", "y", "]", "=", "1.0", ";", "\n", "\n", "", "", "", "", "output_ct_image", "=", "sitk", ".", "GetImageFromArray", "(", "output_ct_nda", ")", "\n", "\n", "bone_mask_image", "=", "sitk", ".", "GetImageFromArray", "(", "bone_mask_nda", ")", "\n", "\n", "output_ct_image_name", "=", "ct_img_path", "[", ":", "ct_img_path", ".", "find", "(", "'.nii'", ")", "]", "+", "'_skull.nii'", "\n", "\n", "bone_mask_image_name", "=", "ct_img_path", "[", ":", "ct_img_path", ".", "find", "(", "'.nii'", ")", "]", "+", "'_skullMask.nii'", "\n", "\n", "output_ct_image", ".", "CopyInformation", "(", "ct_img", ")", "\n", "\n", "bone_mask_image", ".", "CopyInformation", "(", "ct_img", ")", "\n", "\n", "sitk", ".", "WriteImage", "(", "output_ct_image", ",", "output_ct_image_name", ")", "\n", "\n", "return", "output_ct_image_name", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.getMaximum3DRegion": [[94, 107], ["skimage.measure.label", "skimage.measure.regionprops", "numpy.float32", "numpy.argmax"], "function", ["None"], ["", "def", "getMaximum3DRegion", "(", "binary", ")", ":", "\n", "\n", "\t", "all_labels", "=", "measure", ".", "label", "(", "binary", ",", "background", "=", "0", ")", "\n", "\n", "props", "=", "measure", ".", "regionprops", "(", "all_labels", ")", "\n", "\n", "areas", "=", "[", "prop", ".", "area", "for", "prop", "in", "props", "]", "\n", "\n", "maxArea_label", "=", "1", "+", "np", ".", "argmax", "(", "areas", ")", "\n", "\n", "max_binary", "=", "np", ".", "float32", "(", "all_labels", "==", "maxArea_label", ")", "\n", "\n", "return", "max_binary", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.normalizeCTscan": [[111, 119], ["numpy.amin", "numpy.amax", "numpy.amin"], "function", ["None"], ["", "def", "normalizeCTscan", "(", "ct_nda", ")", ":", "\n", "\n", "\t", "if", "np", ".", "amin", "(", "ct_nda", ")", "<", "0", ":", "\n", "\t\t", "ct_normalized_nda", "=", "ct_nda", "-", "np", ".", "amin", "(", "ct_nda", ")", "\n", "\n", "", "ct_normalized_nda", "=", "ct_normalized_nda", "/", "np", ".", "amax", "(", "ct_normalized_nda", ")", "\n", "\n", "return", "ct_normalized_nda", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.otsuThreshoulding": [[121, 128], ["skimage.filters.threshold_otsu", "binary.astype"], "function", ["None"], ["", "def", "otsuThreshoulding", "(", "ct_normalized_nda", ")", ":", "\n", "\n", "\t", "thresh", "=", "threshold_otsu", "(", "ct_normalized_nda", ")", "\n", "\n", "binary", "=", "(", "ct_normalized_nda", ">", "thresh", ")", "*", "1", "\n", "\n", "return", "binary", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.get2Maximum2DRegions": [[129, 164], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "skimage.measure.label", "skimage.measure.regionprops", "len", "sorted", "numpy.float32", "xy_areas.index", "xy_areas.index", "xy_areas.index", "numpy.logical_or"], "function", ["None"], ["", "def", "get2Maximum2DRegions", "(", "max_binary", ")", ":", "\n", "\n", "\t", "xy_two_largest_binary", "=", "np", ".", "zeros", "(", "max_binary", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "largest_area", "=", "np", ".", "zeros", "(", "max_binary", ".", "shape", "[", "0", "]", ")", "\n", "\n", "second_largest_area", "=", "np", ".", "zeros", "(", "max_binary", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "max_binary", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t", "xy_binary", "=", "max_binary", "[", "i", ",", ":", ",", ":", "]", "\n", "xy_labels", "=", "measure", ".", "label", "(", "xy_binary", ",", "background", "=", "0", ")", "\n", "xy_props", "=", "measure", ".", "regionprops", "(", "xy_labels", ")", "\n", "xy_areas", "=", "[", "prop", ".", "area", "for", "prop", "in", "xy_props", "]", "\n", "#print xy_areas", "\n", "\n", "if", "xy_areas", "==", "[", "]", ":", "\n", "\t\t\t", "continue", "\n", "\n", "", "elif", "len", "(", "xy_areas", ")", "==", "1", ":", "\n", "\t\t\t", "largest_area", "[", "i", "]", "=", "xy_areas", "[", "0", "]", "\n", "second_largest_area", "[", "i", "]", "=", "0.0", "\n", "largest_label", "=", "xy_areas", ".", "index", "(", "largest_area", "[", "i", "]", ")", "+", "1", "\n", "xy_two_largest_binary", "[", "i", ",", ":", ",", ":", "]", "=", "xy_labels", "==", "largest_label", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "xy_areas_sorted", "=", "sorted", "(", "xy_areas", ")", "\n", "largest_area", "[", "i", "]", "=", "xy_areas_sorted", "[", "-", "1", "]", "\n", "second_largest_area", "[", "i", "]", "=", "xy_areas_sorted", "[", "-", "2", "]", "\n", "largest_label", "=", "xy_areas", ".", "index", "(", "largest_area", "[", "i", "]", ")", "+", "1", "\n", "second_largest_label", "=", "xy_areas", ".", "index", "(", "second_largest_area", "[", "i", "]", ")", "+", "1", "\n", "xy_largest_binary", "=", "xy_labels", "==", "largest_label", "\n", "xy_second_largest_binary", "=", "xy_labels", "==", "second_largest_label", "\n", "xy_two_largest_binary", "[", "i", ",", ":", ",", ":", "]", "=", "np", ".", "float32", "(", "np", ".", "logical_or", "(", "xy_largest_binary", ",", "xy_second_largest_binary", ")", ")", "\n", "\n", "", "", "return", "xy_two_largest_binary", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.get1Maximum2DRegion": [[165, 181], ["numpy.zeros", "range", "skimage.measure.label", "skimage.measure.regionprops", "numpy.float32", "numpy.argmax"], "function", ["None"], ["", "def", "get1Maximum2DRegion", "(", "max_second_binary", ")", ":", "\n", "\n", "\t", "new_binary", "=", "np", ".", "zeros", "(", "max_second_binary", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "max_second_binary", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t", "xy_binary", "=", "max_second_binary", "[", "i", ",", ":", ",", ":", "]", "\n", "xy_labels", "=", "measure", ".", "label", "(", "xy_binary", ")", "\n", "xy_props", "=", "measure", ".", "regionprops", "(", "xy_labels", ")", "\n", "xy_areas", "=", "[", "prop", ".", "area", "for", "prop", "in", "xy_props", "]", "\n", "#print i, xy_areas_1", "\n", "if", "xy_areas", "==", "[", "]", ":", "\n", "\t\t\t", "continue", "\n", "", "else", ":", "\n", "\t\t\t", "max_area_label", "=", "1", "+", "np", ".", "argmax", "(", "xy_areas", ")", "\n", "new_binary", "[", "i", ",", ":", ",", ":", "]", "=", "np", ".", "float32", "(", "xy_labels", "==", "max_area_label", ")", "\n", "\n", "", "", "return", "new_binary", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.imageOpening2D": [[183, 192], ["numpy.ones", "numpy.zeros", "range", "scipy.ndimage.binary_opening().astype", "scipy.ndimage.binary_opening", "max_second_binary[].astype"], "function", ["None"], ["", "def", "imageOpening2D", "(", "max_second_binary", ",", "structure", "=", "np", ".", "ones", "(", "(", "15", ",", "15", ")", ")", ")", ":", "\n", "\n", "\t", "new_max_second_binary", "=", "np", ".", "zeros", "(", "max_second_binary", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "max_second_binary", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "\t\t", "new_max_second_binary", "[", "i", ",", ":", ",", ":", "]", "=", "ndimage", ".", "binary_opening", "(", "max_second_binary", "[", "i", ",", ":", ",", ":", "]", ".", "astype", "(", "int", ")", ",", "structure", "=", "structure", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "return", "new_max_second_binary", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.removeCTscandevice": [[193, 230], ["SimpleITK.ReadImage", "SimpleITK.GetArrayFromImage", "CTtools.normalizeCTscan", "CTtools.otsuThreshoulding", "CTtools.getMaximum3DRegion", "CTtools.get2Maximum2DRegions", "CTtools.getMaximum3DRegion", "CTtools.get1Maximum2DRegion", "CTtools.imageOpening2D", "CTtools.getMaximum3DRegion", "SimpleITK.GetImageFromArray", "sitk.GetImageFromArray.CopyInformation", "SimpleITK.GetImageFromArray", "sitk.GetImageFromArray.CopyInformation", "SimpleITK.WriteImage", "ct_img_path.find", "ct_img_path.find"], "function", ["home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.normalizeCTscan", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.otsuThreshoulding", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.getMaximum3DRegion", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.get2Maximum2DRegions", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.getMaximum3DRegion", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.get1Maximum2DRegion", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.imageOpening2D", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.CTtools.getMaximum3DRegion"], ["", "def", "removeCTscandevice", "(", "ct_img_path", ")", ":", "\n", "\n", "\t", "ct_img", "=", "sitk", ".", "ReadImage", "(", "ct_img_path", ")", "\n", "\n", "ct_nda", "=", "sitk", ".", "GetArrayFromImage", "(", "ct_img", ")", "\n", "\n", "ct_normalized_nda", "=", "normalizeCTscan", "(", "ct_nda", ")", "\n", "\n", "binary", "=", "otsuThreshoulding", "(", "ct_normalized_nda", ")", "\n", "\n", "max_binary", "=", "getMaximum3DRegion", "(", "binary", ")", "\n", "\n", "xy_two_largest_binary", "=", "get2Maximum2DRegions", "(", "max_binary", ")", "\n", "\n", "max_second_binary", "=", "getMaximum3DRegion", "(", "xy_two_largest_binary", ")", "\n", "\n", "new_binary", "=", "get1Maximum2DRegion", "(", "max_second_binary", ")", "\n", "\n", "new_max_second_bindary", "=", "imageOpening2D", "(", "new_binary", ")", "\n", "\n", "new_max_binary", "=", "getMaximum3DRegion", "(", "new_max_second_bindary", ")", "\n", "\n", "woCTscan_mask_image", "=", "sitk", ".", "GetImageFromArray", "(", "new_max_binary", ")", "\n", "\n", "woCTscan_mask_image", ".", "CopyInformation", "(", "ct_img", ")", "\n", "\n", "woCTscan_mask_image_name", "=", "ct_img_path", "[", ":", "ct_img_path", ".", "find", "(", "'.nii'", ")", "]", "+", "'_woCTscanMask.nii'", "\n", "\n", "output_ct_image", "=", "sitk", ".", "GetImageFromArray", "(", "ct_nda", "*", "new_max_binary", ")", "\n", "\n", "output_ct_image", ".", "CopyInformation", "(", "ct_img", ")", "\n", "\n", "output_ct_image_name", "=", "ct_img_path", "[", ":", "ct_img_path", ".", "find", "(", "'.nii'", ")", "]", "+", "'_woCTscan.nii'", "\n", "\n", "sitk", ".", "WriteImage", "(", "output_ct_image", ",", "output_ct_image_name", ")", "\n", "\n", "return", "output_ct_image_name", "\n", "", ""]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.postUtils.get_volumes": [[52, 117], ["print", "pickle.load", "pickle.load.sort", "os.path.exists", "csv.writer", "open.close", "open", "os.path.join", "open", "open", "csv.writer.writerow", "print", "os.path.join", "nibabel.load", "nib.load.get_data", "numpy.abs", "float", "csv.writer.writerow", "os.path.join", "os.path.join", "os.path.split", "os.path.exists", "print", "numpy.sum", "numpy.sum", "numpy.sum", "print", "print", "str", "str", "str", "print", "imname_short.find", "print", "ventricle_volumes.append", "sub_volumes.append", "white_volumes.append", "float", "float", "float"], "function", ["None"], ["def", "get_volumes", "(", "BASE", ",", "seg_model", ",", "save_last", "=", "False", ")", ":", "\n", "\t", "'''\n\tObtains the volumes of the ventricle, subarachnoid space, and white matter given segmentations.\n\tVolumes are output in a csv file.\n\t'''", "\n", "print", "(", "'------------ getting volumes ---------------'", ")", "\n", "imnames", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'imname_list.pkl'", ")", ",", "'rb'", ")", ")", "\n", "imnames", ".", "sort", "(", ")", "\n", "if", "seg_model", "==", "'mcv'", ":", "\n", "\t\t", "volume_csv", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "'volumes_mcv.csv'", ")", "\n", "", "elif", "seg_model", "==", "'unet'", ":", "\n", "\t\t", "volume_csv", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "'volumes_unet.csv'", ")", "\n", "", "csv_exists", "=", "os", ".", "path", ".", "exists", "(", "volume_csv", ")", "\n", "if", "save_last", ":", "\n", "\t\t", "f", "=", "open", "(", "volume_csv", ",", "'a'", ")", "\n", "", "else", ":", "\n", "\t\t", "f", "=", "open", "(", "volume_csv", ",", "'w'", ")", "\n", "", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "if", "not", "csv_exists", "or", "not", "save_last", ":", "\n", "\t\t", "writer", ".", "writerow", "(", "[", "'Scan'", ",", "'Vent'", ",", "'Sub'", ",", "'White'", "]", ")", "\n", "", "ventricle_volumes", "=", "[", "]", "\n", "sub_volumes", "=", "[", "]", "\n", "white_volumes", "=", "[", "]", "\n", "\n", "for", "imname", "in", "imnames", ":", "\n", "\t\t", "imname_short", "=", "os", ".", "path", ".", "split", "(", "imname", ")", "[", "-", "1", "]", "\n", "print", "(", "imname_short", ")", "\n", "if", "seg_model", "==", "'unet'", ":", "\n", "\t\t\t", "final_pred", "=", "'UNet_Outputs'", "\n", "", "else", ":", "\n", "\t\t\t", "final_pred", "=", "'Final_Predictions'", "\n", "", "seg_name", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "\n", "final_pred", ",", "\n", "imname_short", "[", ":", "imname_short", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.segmented1.nii.gz'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "seg_name", ")", ":", "\n", "\t\t\t", "print", "(", "'skipping due to no segmentation'", ")", "\n", "continue", "\n", "", "segimg", "=", "nib", ".", "load", "(", "seg_name", ")", "\n", "segarray", "=", "segimg", ".", "get_data", "(", ")", "\n", "affine", "=", "segimg", ".", "affine", "\n", "vol_per_vox", "=", "np", ".", "abs", "(", "affine", "[", "0", ",", "0", "]", "*", "affine", "[", "1", ",", "1", "]", "*", "affine", "[", "2", ",", "2", "]", ")", "\n", "ventricle", "=", "np", ".", "sum", "(", "segarray", "==", "1", ")", "*", "vol_per_vox", "\n", "white_matter", "=", "np", ".", "sum", "(", "segarray", "==", "2", ")", "*", "vol_per_vox", "\n", "subarachnoid", "=", "np", ".", "sum", "(", "segarray", "==", "3", ")", "*", "vol_per_vox", "\n", "\n", "if", "white_matter", "<=", "5e5", ":", "\n", "\t\t\t", "print", "(", "'invalid scan due to no white matter.'", ")", "\n", "continue", "\n", "", "elif", "ventricle", "<=", "2", ":", "\n", "\t\t\t", "print", "(", "'invalid scan due to no ventricle.'", ")", "\n", "continue", "\n", "", "elif", "subarachnoid", "<=", "2", ":", "\n", "\t\t\t", "print", "(", "'invalid scan due to no subarachnoid.'", ")", "\n", "continue", "\n", "", "elif", "ventricle", ">", "white_matter", ":", "\n", "\t\t\t", "print", "(", "'possible issue due to ventricle being bigger than white matter.'", ")", "\n", "", "else", ":", "\n", "\t\t\t", "ventricle_volumes", ".", "append", "(", "float", "(", "ventricle", ")", ")", "\n", "sub_volumes", ".", "append", "(", "float", "(", "subarachnoid", ")", ")", "\n", "white_volumes", ".", "append", "(", "float", "(", "white_matter", ")", ")", "\n", "\n", "", "whole_brain", "=", "float", "(", "ventricle", "+", "subarachnoid", "+", "white_matter", ")", "\n", "writer", ".", "writerow", "(", "[", "imname_short", ",", "str", "(", "ventricle", ")", ",", "str", "(", "subarachnoid", ")", ",", "str", "(", "white_matter", ")", "]", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.postUtils.make_prediction": [[119, 153], ["print", "pandas.read_csv", "os.path.join", "open", "csv.writer", "pandas.read_csv.iterrows", "open.close", "open", "pickle.load", "os.path.join", "numpy.array().reshape", "sklearn.preprocessing.scale", "print", "csv.writer.writerow", "os.path.join", "pickle.load.predict", "numpy.array"], "function", ["None"], ["", "def", "make_prediction", "(", "BASE", ",", "seg_model", ")", ":", "\n", "\t", "'''\n\tMakes predictions of possible NPH/no NPH given the volume information obtained by get_volumes, output to predictions_$model$.csv.\n\tmodel options: linear_svm, rbf_svm, rf\n\t'''", "\n", "print", "(", "'------------ making prediction -------------'", ")", "\n", "#load classifier", "\n", "if", "seg_model", "==", "'mcv'", ":", "\n", "\t\t", "classifier_name", "=", "'rbf_svm_mcv.pkl'", "\n", "vol_name", "=", "'volumes_mcv.csv'", "\n", "", "else", ":", "\n", "\t\t", "classifier_name", "=", "'rbf_svm_unet.pkl'", "\n", "vol_name", "=", "'volumes_unet.csv'", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'nph_classifiers'", ",", "classifier_name", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t", "clf", "=", "pickle", ".", "load", "(", "f", ")", "\n", "#load and process ratio data from csv file", "\n", "", "dfvol", "=", "pandas", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "vol_name", ")", ")", "\n", "predictions_csv", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "'predictions.csv'", ")", "\n", "f", "=", "open", "(", "predictions_csv", ",", "'w'", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "for", "_", ",", "corresp_row_ratio", "in", "dfvol", ".", "iterrows", "(", ")", ":", "\n", "\t\t", "prediction", "=", "'no NPH'", "\n", "patient", "=", "corresp_row_ratio", "[", "'Scan'", "]", "\n", "vent", "=", "corresp_row_ratio", "[", "'Vent'", "]", "\n", "sub", "=", "corresp_row_ratio", "[", "'Sub'", "]", "\n", "white", "=", "corresp_row_ratio", "[", "'White'", "]", "\n", "x", "=", "np", ".", "array", "(", "[", "[", "vent", ",", "sub", ",", "white", ",", "vent", "+", "sub", "+", "white", "]", "]", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "x", "=", "preprocessing", ".", "scale", "(", "x", ",", "axis", "=", "1", ")", "\n", "predict_num", "=", "clf", ".", "predict", "(", "x", ")", "[", "0", "]", "\n", "if", "predict_num", "==", "1", ":", "\n", "\t\t\t", "prediction", "=", "'possible NPH'", "\n", "", "print", "(", "prediction", ")", "\n", "writer", ".", "writerow", "(", "[", "patient", ",", "prediction", "]", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.postUtils.clean_up": [[155, 164], ["os.path.join", "os.path.exists", "os.remove"], "function", ["None"], ["", "def", "clean_up", "(", "BASE", ")", ":", "\n", "\t", "'''\n\tCleans up files from image processing pipeline.\n\t'''", "\n", "names", "=", "[", "'imname_list.pkl'", ",", "'imname_list1.pkl'", ",", "'imname_affine.pkl'", ",", "'imname_affine1.pkl'", ",", "'imname_header.pkl'", ",", "'imname_header1.pkl'", "]", "\n", "for", "name", "in", "names", ":", "\n", "\t\t", "name", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "name", ")", ":", "\n", "\t\t\t", "os", ".", "remove", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.unetSeg.fxn": [[53, 55], ["warnings.warn"], "function", ["None"], ["def", "fxn", "(", ")", ":", "\n", "\t", "warnings", ".", "warn", "(", "\"deprecated\"", ",", "DeprecationWarning", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.unetSeg.unetPredict": [[57, 247], ["print", "os.path.join", "unetSeg.unetPredict.NPH_data_gen"], "function", ["None"], ["", "def", "unetPredict", "(", "BASE", ",", "gpu", ")", ":", "\n", "\t", "'''\n\tOutputs segmentations based on trained unet model.\n\t'''", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "\t\t", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "fxn", "(", ")", "\n", "\n", "", "print", "(", "'-------- UNet Segmentation --------'", ")", "\n", "dtype", "=", "torch", ".", "FloatTensor", "\n", "if", "gpu", ":", "\n", "\t\t", "dtype", "=", "torch", ".", "cuda", ".", "FloatTensor", "\n", "\n", "", "Scan_Folder", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Scans'", ")", "\n", "scans_all", "=", "[", "s", "for", "s", "in", "os", ".", "listdir", "(", "Scan_Folder", ")", "if", "(", "s", ".", "endswith", "(", "'nii.gz'", ")", "and", "not", "'MNI152'", "in", "s", ")", "]", "\n", "\n", "N", "=", "128", "\n", "batch_size", "=", "1", "\n", "\n", "def", "NPH_data_gen", "(", ")", ":", "\n", "\t\t", "N_pred", "=", "len", "(", "scans_all", ")", "\n", "X", "=", "np", ".", "empty", "(", "[", "batch_size", ",", "1", ",", "N", ",", "N", ",", "N", "]", ")", "\n", "while", "True", ":", "\n", "\t\t\t", "inds", "=", "range", "(", "len", "(", "scans_all", ")", ")", "\n", "i", "=", "0", "\n", "while", "i", "<=", "(", "N_pred", "-", "batch_size", ")", ":", "\n", "\t\t\t\t", "for", "j", "in", "range", "(", "batch_size", ")", ":", "\n", "\t\t\t\t\t", "scanname", "=", "scans_all", "[", "inds", "[", "i", "+", "j", "]", "]", "\n", "img_nib", "=", "nib", ".", "load", "(", "os", ".", "path", ".", "join", "(", "Scan_Folder", ",", "scanname", ")", ")", "\n", "img", "=", "img_nib", ".", "get_data", "(", ")", "\n", "img_info", "=", "(", "img", ".", "shape", ",", "img_nib", ".", "affine", ")", "\n", "img", "[", "np", ".", "where", "(", "img", "<", "-", "1000", ")", "]", "=", "-", "1000", "\n", "temp_img", "=", "resize", "(", "img", ",", "output_shape", "=", "[", "N", ",", "N", ",", "N", "]", ",", "preserve_range", "=", "True", ",", "mode", "=", "'constant'", ",", "order", "=", "1", ",", "anti_aliasing", "=", "True", ")", "\n", "X", "[", "j", ",", "0", "]", "=", "temp_img", "\n", "", "i", "+=", "1", "\n", "X", "-=", "100", "\n", "X", "/=", "100", "\n", "yield", "scanname", ",", "img_info", ",", "torch", ".", "from_numpy", "(", "X", ")", ".", "type", "(", "dtype", ")", "\n", "\n", "", "", "", "data_gen", "=", "NPH_data_gen", "(", ")", "\n", "\n", "\n", "''' Loading unet '''", "\n", "\n", "import", "models", "\n", "from", "models", "import", "criterions", ",", "unet", "\n", "\n", "unet_model", "=", "'unet_ce_hard_per_im_s8841_all'", "\n", "ckpt", "=", "'model_last.tar'", "\n", "\n", "unet", "=", "unet", ".", "Unet", "(", ")", "\n", "unet", ".", "cpu", "(", ")", "\n", "if", "gpu", ":", "\n", "\t\t", "unet", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "model_file", "=", "os", ".", "path", ".", "join", "(", "unet_model", ",", "ckpt", ")", "\n", "if", "gpu", ":", "\n", "\t\t", "device", "=", "'gpu'", "\n", "", "else", ":", "\n", "\t\t", "device", "=", "'cpu'", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "model_file", ",", "map_location", "=", "torch", ".", "device", "(", "device", ")", ")", "\n", "unet", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "'''Unet Definition'''", "\n", "def", "normalization", "(", "planes", ",", "norm", "=", "'gn'", ")", ":", "\n", "\t\t", "if", "norm", "==", "'bn'", ":", "\n", "\t\t\t", "m", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "", "elif", "norm", "==", "'gn'", ":", "\n", "\t\t\t", "m", "=", "nn", ".", "GroupNorm", "(", "4", ",", "planes", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "\t\t\t", "m", "=", "nn", ".", "InstanceNorm3d", "(", "planes", ")", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "'normalization type {} is not supported'", ".", "format", "(", "norm", ")", ")", "\n", "", "return", "m", "\n", "\n", "\n", "", "class", "ConvD", "(", "nn", ".", "Module", ")", ":", "\n", "\t\t", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "dropout", "=", "0.0", ",", "norm", "=", "'gn'", ",", "first", "=", "False", ")", ":", "\n", "\t\t\t", "super", "(", "ConvD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "first", "=", "first", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "2", ",", "2", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t\t", "if", "not", "self", ".", "first", ":", "\n", "\t\t\t\t", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "", "x", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t\t", "y", "=", "F", ".", "dropout3d", "(", "y", ",", "self", ".", "dropout", ")", "\n", "", "y", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "self", ".", "relu", "(", "x", "+", "y", ")", "\n", "\n", "\n", "", "", "class", "ConvU", "(", "nn", ".", "Module", ")", ":", "\n", "\t\t", "def", "__init__", "(", "self", ",", "planes", ",", "norm", "=", "'gn'", ",", "first", "=", "False", ")", ":", "\n", "\t\t\t", "super", "(", "ConvU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "first", "=", "first", "\n", "\n", "if", "not", "self", ".", "first", ":", "\n", "\t\t\t\t", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "2", "*", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", "//", "2", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", "//", "2", ",", "norm", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "prev", ")", ":", "\n", "# final output is the localization layer", "\n", "\t\t\t", "if", "not", "self", ".", "first", ":", "\n", "\t\t\t\t", "x", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n", "", "y", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n", "y", "=", "torch", ".", "cat", "(", "[", "prev", ",", "y", "]", ",", "1", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "y", ")", ")", ")", "\n", "\n", "return", "y", "\n", "\n", "# End Unet definition", "\n", "\n", "", "", "import", "copy", "\n", "net", "=", "copy", ".", "deepcopy", "(", "unet", ")", "\n", "net", ".", "convd1", ".", "conv1", "=", "ConvD", "(", "1", ",", "16", ",", "0.5", ",", "'gn'", ",", "first", "=", "True", ")", "\n", "net", ".", "convd1", ".", "conv1", ".", "weight", "=", "nn", ".", "Parameter", "(", "unet", ".", "convd1", ".", "conv1", ".", "weight", "[", ":", ",", "1", ",", ":", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "net", ".", "seg3", "=", "nn", ".", "Conv3d", "(", "128", ",", "3", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "net", ".", "seg2", "=", "nn", ".", "Conv3d", "(", "64", ",", "3", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "net", ".", "seg1", "=", "nn", ".", "Conv3d", "(", "32", ",", "3", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "net", ".", "seg3", ".", "weight", "=", "nn", ".", "Parameter", "(", "unet", ".", "seg3", ".", "weight", "[", "0", ":", "3", ",", ":", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "net", ".", "seg2", ".", "weight", "=", "nn", ".", "Parameter", "(", "unet", ".", "seg2", ".", "weight", "[", "0", ":", "3", ",", ":", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "net", ".", "seg1", ".", "weight", "=", "nn", ".", "Parameter", "(", "unet", ".", "seg1", ".", "weight", "[", "0", ":", "3", ",", ":", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "\n", "net", ".", "cpu", "(", ")", "\n", "if", "gpu", ":", "\n", "\t\t", "net", ".", "cuda", "(", ")", "\n", "\n", "", "reload_path", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "'unet_model.pt'", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "reload_path", ",", "map_location", "=", "torch", ".", "device", "(", "device", ")", ")", ")", "\n", "\n", "\n", "del", "unet", "\n", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "'UNet_Outputs'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", ":", "\n", "\t\t", "os", ".", "mkdir", "(", "output_path", ")", "\n", "\n", "", "''' Predict '''", "\n", "for", "k", "in", "range", "(", "len", "(", "scans_all", ")", ")", ":", "\n", "\t\t", "name", ",", "info", ",", "inputs", "=", "next", "(", "data_gen", ")", "\n", "print", "(", "name", ")", "\n", "save_name", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "name", "[", ":", "name", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'.segmented.nii.gz'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_name", ")", ":", "\n", "\t\t\t", "continue", "\n", "", "inputs_np", "=", "inputs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "in_mean", "=", "np", ".", "mean", "(", "inputs_np", ")", "\n", "in_std", "=", "np", ".", "std", "(", "inputs_np", ")", "\n", "output", "=", "net", "(", "inputs", ")", "\n", "n", ",", "c", "=", "output", ".", "shape", "[", ":", "2", "]", "\n", "N", "=", "output", ".", "shape", "[", "3", "]", "\n", "output", "=", "output", ".", "view", "(", "n", ",", "c", ",", "-", "1", ")", "\n", "lsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "output", "=", "lsoftmax", "(", "output", ")", "\n", "output", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "if", "n", "==", "1", ":", "\n", "\t\t\t", "output", "=", "output", ".", "view", "(", "N", ",", "N", ",", "N", ")", "\n", "", "else", ":", "\n", "\t\t\t", "output", "=", "output", ".", "view", "(", "n", ",", "N", ",", "N", ",", "N", ")", "\n", "", "output", "=", "output", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "output", "=", "resize", "(", "output", ",", "info", "[", "0", "]", ",", "preserve_range", "=", "True", ",", "mode", "=", "'constant'", ",", "order", "=", "0", ",", "anti_aliasing", "=", "None", ")", "\n", "out_img", "=", "nib", ".", "Nifti1Image", "(", "output", ",", "info", "[", "1", "]", ")", "\n", "nib", ".", "save", "(", "out_img", ",", "save_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.nph_prediction.main": [[50, 74], ["call", "call", "call", "call", "call", "call", "call", "segUtils.subarachnoid_seg", "postUtils.get_volumes", "postUtils.make_prediction", "postUtils.clean_up", "segUtils.threshold", "unetSeg.unetPredict", "imUtils.affine_transform", "segUtils.snake_seg", "segUtils.snake_seg", "segUtils.combine_segs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.segUtils.subarachnoid_seg", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.postUtils.get_volumes", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.postUtils.make_prediction", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.postUtils.clean_up", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.segUtils.threshold", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.unetSeg.unetPredict", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.imUtils.affine_transform", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.segUtils.snake_seg", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.segUtils.snake_seg", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.segUtils.combine_segs"], ["def", "main", "(", "base", ",", "parallel", ",", "seg_model", ",", "gpu", ",", "save_last", ",", "clear_cache", ")", ":", "\n", "\t", "if", "clear_cache", ":", "\n", "\t\t", "from", "subprocess", "import", "call", "\n", "call", "(", "[", "'rm'", ",", "'-r'", ",", "os", ".", "path", ".", "join", "(", "base", ",", "'Thresholds'", ")", "]", ")", "\n", "call", "(", "[", "'rm'", ",", "'-r'", ",", "os", ".", "path", ".", "join", "(", "base", ",", "'UNet_Outputs'", ")", "]", ")", "\n", "call", "(", "[", "'rm'", ",", "'-r'", ",", "os", ".", "path", ".", "join", "(", "base", ",", "'MNI152'", ")", "]", ")", "\n", "call", "(", "[", "'rm'", ",", "'-r'", ",", "os", ".", "path", ".", "join", "(", "base", ",", "'Predictions'", ")", "]", ")", "\n", "call", "(", "[", "'rm'", ",", "'-r'", ",", "os", ".", "path", ".", "join", "(", "base", ",", "'Final_Predictions'", ")", "]", ")", "\n", "call", "(", "[", "'rm'", ",", "'-r'", ",", "os", ".", "path", ".", "join", "(", "base", ",", "'imname_list.pkl'", ")", "]", ")", "\n", "call", "(", "[", "'rm'", ",", "'-r'", ",", "os", ".", "path", ".", "join", "(", "base", ",", "'imname_list1.pkl'", ")", "]", ")", "\n", "\n", "", "else", ":", "\n", "\t\t", "if", "seg_model", "==", "'unet'", ":", "\n", "\t\t\t", "threshold", "(", "base", ",", "'Scans'", ",", "parallel", ")", "\n", "unetPredict", "(", "base", ",", "gpu", ")", "\n", "", "else", ":", "\n", "\t\t\t", "affine_transform", "(", "base", ")", "\n", "snake_seg", "(", "base", ",", "parallel", ",", "'v'", ")", "\n", "snake_seg", "(", "base", ",", "parallel", ",", "'c'", ")", "\n", "combine_segs", "(", "base", ")", "\n", "", "subarachnoid_seg", "(", "base", ",", "seg_model", ",", "parallel", ")", "\n", "get_volumes", "(", "base", ",", "seg_model", ",", "save_last", ")", "\n", "make_prediction", "(", "base", ",", "seg_model", ")", "\n", "clean_up", "(", "base", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.imUtils.affine_transform": [[48, 97], ["print", "os.path.join", "os.path.join", "os.listdir", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "nibabel.load", "nib.load.header.copy", "imnames.append", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "print", "os.listdir", "print", "subprocess.call", "subprocess.call", "subprocess.call", "subprocess.call", "nibabel.load", "os.path.join", "os.path.join", "os.path.join", "scanname.endswith", "numpy.unique", "print", "scanname.find", "nib.load.get_data", "os.path.join.find", "os.path.join.find", "os.path.join.find", "os.path.join.find"], "function", ["None"], ["def", "affine_transform", "(", "BASE", ")", ":", "\n", "\t", "'''\n\tcalculates and applies an affine transform of the CT scans in 'BASE/Scans' to MNI152 space.\n\t'''", "\n", "print", "(", "'--------- Calculating Affine Transforms ---------'", ")", "\n", "numpy_images", "=", "{", "}", "\n", "affine_dict", "=", "{", "}", "\n", "header_dict", "=", "{", "}", "\n", "imnames", "=", "[", "]", "\n", "scanpath", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "'Scans'", ")", "\n", "affinepath", "=", "os", ".", "path", ".", "join", "(", "BASE", ",", "'MNI152'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "affinepath", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "affinepath", ")", "\n", "", "for", "scanname", "in", "os", ".", "listdir", "(", "scanpath", ")", ":", "\n", "\t\t", "if", "'skull'", "in", "scanname", "or", "'MNI152'", "in", "scanname", "or", "not", "scanname", ".", "endswith", "(", "'.nii.gz'", ")", ":", "\n", "\t\t\t", "continue", "\n", "", "affinename", "=", "scanname", "[", ":", "scanname", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'_MNI152.nii.gz'", "\n", "scanimgpath", "=", "os", ".", "path", ".", "join", "(", "scanpath", ",", "scanname", ")", "\n", "new_imname", "=", "os", ".", "path", ".", "join", "(", "affinepath", ",", "affinename", ")", "\n", "scanimg", "=", "nib", ".", "load", "(", "scanimgpath", ")", "\n", "if", "np", ".", "unique", "(", "scanimg", ".", "get_data", "(", ")", ")", ".", "size", "<", "5", ":", "\n", "\t\t\t", "print", "(", "'skipping due to not enough values'", ")", "\n", "continue", "\n", "", "imname", "=", "scanimgpath", "[", ":", "scanimgpath", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'_MNI152.nii.gz'", "\n", "if", "affinename", "not", "in", "os", ".", "listdir", "(", "affinepath", ")", ":", "\n", "\t\t\t", "print", "(", "scanname", ")", "\n", "subprocess", ".", "call", "(", "[", "'python'", ",", "'CT2MNI152Affine.py'", ",", "scanimgpath", "]", ")", "\n", "subprocess", ".", "call", "(", "[", "'mv'", ",", "imname", ",", "new_imname", "]", ")", "\n", "# move affine matrix from Scans to MNI152 directory", "\n", "affine_matrix", "=", "scanimgpath", "[", ":", "scanimgpath", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'_affine.mat'", "\n", "new_affine_matrix", "=", "new_imname", "[", ":", "new_imname", ".", "find", "(", "'_MNI152.nii.gz'", ")", "]", "+", "'_affine.mat'", "\n", "subprocess", ".", "call", "(", "[", "'mv'", ",", "affine_matrix", ",", "new_affine_matrix", "]", ")", "\n", "# remove skull image", "\n", "skull_imname", "=", "scanimgpath", "[", ":", "scanimgpath", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'_skull.nii'", "\n", "subprocess", ".", "call", "(", "[", "'rm'", ",", "skull_imname", "]", ")", "\n", "", "try", ":", "\n", "\t\t\t", "image", "=", "nib", ".", "load", "(", "new_imname", ")", "\n", "", "except", ":", "\n", "\t\t\t", "print", "(", "'transform didnt work'", ")", "\n", "continue", "\n", "", "affine_dict", "[", "new_imname", "]", "=", "image", ".", "affine", "\n", "header_dict", "[", "new_imname", "]", "=", "image", ".", "header", ".", "copy", "(", ")", "\n", "imnames", ".", "append", "(", "new_imname", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'imname_affine.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "affine_dict", ",", "f", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'imname_header.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "header_dict", ",", "f", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "BASE", ",", "'imname_list.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "imnames", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.None.imUtils.reverse_transform": [[99, 120], ["os.path.join", "os.listdir", "scanname.endswith", "print", "os.path.join", "print", "nibabel.load", "subprocess.call", "os.listdir", "nibabel.load", "print", "scanname.find", "os.path.join.find"], "function", ["None"], ["", "", "def", "reverse_transform", "(", "BASE", ")", ":", "\n", "\t", "'''\n\tTransforms registered CT scans back to the original subject space.\n\t'''", "\n", "scanpath", "=", "os", ".", "path", ".", "join", "(", "BASE_FOLDER", ",", "'Scans'", ")", "\n", "for", "scanname", "in", "os", ".", "listdir", "(", "scanpath", ")", ":", "\n", "\t\t", "if", "scanname", ".", "endswith", "(", "'.nii.gz'", ")", "and", "'MNI'", "not", "in", "scanname", ":", "\n", "\t\t\t", "print", "(", "scanname", ")", "\n", "affinename", "=", "scanname", "[", ":", "scanname", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'_MNI152.nii.gz'", "\n", "if", "affinename", "not", "in", "os", ".", "listdir", "(", "scanpath", ")", ":", "\n", "\t\t\t\t", "continue", "\n", "", "scanimgpath", "=", "os", ".", "path", ".", "join", "(", "scanpath", ",", "scanname", ")", "\n", "print", "(", "scanimgpath", ")", "\n", "scanimg", "=", "nib", ".", "load", "(", "scanimgpath", ")", "\n", "subprocess", ".", "call", "(", "[", "'python'", ",", "'MNI2CTAffine.py'", ",", "scanimgpath", "]", ")", "\n", "imname", "=", "scanimgpath", "[", ":", "scanimgpath", ".", "find", "(", "'.nii.gz'", ")", "]", "+", "'_MNI152.nii.gz'", "\n", "try", ":", "\n", "\t\t\t\t", "image", "=", "nib", ".", "load", "(", "imname", ")", "\n", "", "except", ":", "\n", "\t\t\t\t", "print", "(", "'transform didnt work'", ")", "\n", "continue", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.__init__": [[5, 66], ["torch.Module.__init__", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout3d", "torch.Dropout3d", "torch.Upsample", "torch.Upsample", "torch.Softmax", "torch.Softmax", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.lrelu_conv", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.norm_lrelu_conv", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.norm_lrelu_conv", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.norm_lrelu_conv", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.norm_lrelu_conv", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "torch.Conv3d", "torch.Conv3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "munet.Modified3DUNet.conv_norm_lrelu", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "munet.Modified3DUNet.conv_norm_lrelu", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "munet.Modified3DUNet.conv_norm_lrelu", "torch.Conv3d", "torch.Conv3d", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "munet.Modified3DUNet.conv_norm_lrelu", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.DeepMedicNR.__init__", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.lrelu_conv", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.norm_lrelu_conv", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.norm_lrelu_conv", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.norm_lrelu_conv", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.norm_lrelu_conv", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.conv_norm_lrelu", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.conv_norm_lrelu", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.conv_norm_lrelu", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.conv_norm_lrelu"], ["\t", "def", "__init__", "(", "self", ",", "in_channels", ",", "n_classes", ",", "base_n_filter", "=", "8", ")", ":", "\n", "\t\t", "super", "(", "Modified3DUNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "base_n_filter", "=", "base_n_filter", "\n", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "self", ".", "dropout3d", "=", "nn", ".", "Dropout3d", "(", "p", "=", "0.6", ")", "\n", "self", ".", "upsacle", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "# Level 1 context pathway", "\n", "self", ".", "conv3d_c1_1", "=", "nn", ".", "Conv3d", "(", "self", ".", "in_channels", ",", "self", ".", "base_n_filter", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3d_c1_2", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", ",", "self", ".", "base_n_filter", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "lrelu_conv_c1", "=", "self", ".", "lrelu_conv", "(", "self", ".", "base_n_filter", ",", "self", ".", "base_n_filter", ")", "\n", "self", ".", "inorm3d_c1", "=", "nn", ".", "InstanceNorm3d", "(", "self", ".", "base_n_filter", ")", "\n", "\n", "# Level 2 context pathway", "\n", "self", ".", "conv3d_c2", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", ",", "self", ".", "base_n_filter", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_lrelu_conv_c2", "=", "self", ".", "norm_lrelu_conv", "(", "self", ".", "base_n_filter", "*", "2", ",", "self", ".", "base_n_filter", "*", "2", ")", "\n", "self", ".", "inorm3d_c2", "=", "nn", ".", "InstanceNorm3d", "(", "self", ".", "base_n_filter", "*", "2", ")", "\n", "\n", "# Level 3 context pathway", "\n", "self", ".", "conv3d_c3", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "2", ",", "self", ".", "base_n_filter", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_lrelu_conv_c3", "=", "self", ".", "norm_lrelu_conv", "(", "self", ".", "base_n_filter", "*", "4", ",", "self", ".", "base_n_filter", "*", "4", ")", "\n", "self", ".", "inorm3d_c3", "=", "nn", ".", "InstanceNorm3d", "(", "self", ".", "base_n_filter", "*", "4", ")", "\n", "\n", "# Level 4 context pathway", "\n", "self", ".", "conv3d_c4", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "4", ",", "self", ".", "base_n_filter", "*", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_lrelu_conv_c4", "=", "self", ".", "norm_lrelu_conv", "(", "self", ".", "base_n_filter", "*", "8", ",", "self", ".", "base_n_filter", "*", "8", ")", "\n", "self", ".", "inorm3d_c4", "=", "nn", ".", "InstanceNorm3d", "(", "self", ".", "base_n_filter", "*", "8", ")", "\n", "\n", "# Level 5 context pathway, level 0 localization pathway", "\n", "self", ".", "conv3d_c5", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "8", ",", "self", ".", "base_n_filter", "*", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_lrelu_conv_c5", "=", "self", ".", "norm_lrelu_conv", "(", "self", ".", "base_n_filter", "*", "16", ",", "self", ".", "base_n_filter", "*", "16", ")", "\n", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l0", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "16", ",", "self", ".", "base_n_filter", "*", "8", ")", "\n", "\n", "self", ".", "conv3d_l0", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "8", ",", "self", ".", "base_n_filter", "*", "8", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "inorm3d_l0", "=", "nn", ".", "InstanceNorm3d", "(", "self", ".", "base_n_filter", "*", "8", ")", "\n", "\n", "# Level 1 localization pathway", "\n", "self", ".", "conv_norm_lrelu_l1", "=", "self", ".", "conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "16", ",", "self", ".", "base_n_filter", "*", "16", ")", "\n", "self", ".", "conv3d_l1", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "16", ",", "self", ".", "base_n_filter", "*", "8", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l1", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "8", ",", "self", ".", "base_n_filter", "*", "4", ")", "\n", "\n", "# Level 2 localization pathway", "\n", "self", ".", "conv_norm_lrelu_l2", "=", "self", ".", "conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "8", ",", "self", ".", "base_n_filter", "*", "8", ")", "\n", "self", ".", "conv3d_l2", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "8", ",", "self", ".", "base_n_filter", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l2", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "4", ",", "self", ".", "base_n_filter", "*", "2", ")", "\n", "\n", "# Level 3 localization pathway", "\n", "self", ".", "conv_norm_lrelu_l3", "=", "self", ".", "conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "4", ",", "self", ".", "base_n_filter", "*", "4", ")", "\n", "self", ".", "conv3d_l3", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "4", ",", "self", ".", "base_n_filter", "*", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l3", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "2", ",", "self", ".", "base_n_filter", ")", "\n", "\n", "# Level 4 localization pathway", "\n", "self", ".", "conv_norm_lrelu_l4", "=", "self", ".", "conv_norm_lrelu", "(", "self", ".", "base_n_filter", "*", "2", ",", "self", ".", "base_n_filter", "*", "2", ")", "\n", "self", ".", "conv3d_l4", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "2", ",", "self", ".", "n_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "ds2_1x1_conv3d", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "8", ",", "self", ".", "n_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "ds3_1x1_conv3d", "=", "nn", ".", "Conv3d", "(", "self", ".", "base_n_filter", "*", "4", ",", "self", ".", "n_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.conv_norm_lrelu": [[70, 75], ["torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "def", "conv_norm_lrelu", "(", "self", ",", "feat_in", ",", "feat_out", ")", ":", "\n", "\t\t", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "feat_in", ",", "feat_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm3d", "(", "feat_out", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.norm_lrelu_conv": [[76, 81], ["torch.Sequential", "torch.Sequential", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d"], "methods", ["None"], ["", "def", "norm_lrelu_conv", "(", "self", ",", "feat_in", ",", "feat_out", ")", ":", "\n", "\t\t", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "InstanceNorm3d", "(", "feat_in", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "feat_in", ",", "feat_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.lrelu_conv": [[82, 86], ["torch.Sequential", "torch.Sequential", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv3d", "torch.Conv3d"], "methods", ["None"], ["", "def", "lrelu_conv", "(", "self", ",", "feat_in", ",", "feat_out", ")", ":", "\n", "\t\t", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "feat_in", ",", "feat_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu": [[87, 96], ["torch.Sequential", "torch.Sequential", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Upsample", "torch.Upsample", "torch.Conv3d", "torch.Conv3d", "torch.InstanceNorm3d", "torch.InstanceNorm3d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "def", "norm_lrelu_upscale_conv_norm_lrelu", "(", "self", ",", "feat_in", ",", "feat_out", ")", ":", "\n", "\t\t", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "InstanceNorm3d", "(", "feat_in", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "# should be feat_in*2 or feat_in", "\n", "nn", ".", "Conv3d", "(", "feat_in", ",", "feat_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm3d", "(", "feat_out", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.munet.Modified3DUNet.forward": [[97, 190], ["munet.Modified3DUNet.conv3d_c1_1", "munet.Modified3DUNet.lrelu", "munet.Modified3DUNet.conv3d_c1_2", "munet.Modified3DUNet.dropout3d", "munet.Modified3DUNet.lrelu_conv_c1", "munet.Modified3DUNet.lrelu", "munet.Modified3DUNet.inorm3d_c1", "munet.Modified3DUNet.lrelu", "munet.Modified3DUNet.conv3d_c2", "munet.Modified3DUNet.norm_lrelu_conv_c2", "munet.Modified3DUNet.dropout3d", "munet.Modified3DUNet.norm_lrelu_conv_c2", "munet.Modified3DUNet.inorm3d_c2", "munet.Modified3DUNet.lrelu", "munet.Modified3DUNet.conv3d_c3", "munet.Modified3DUNet.norm_lrelu_conv_c3", "munet.Modified3DUNet.dropout3d", "munet.Modified3DUNet.norm_lrelu_conv_c3", "munet.Modified3DUNet.inorm3d_c3", "munet.Modified3DUNet.lrelu", "munet.Modified3DUNet.conv3d_c4", "munet.Modified3DUNet.norm_lrelu_conv_c4", "munet.Modified3DUNet.dropout3d", "munet.Modified3DUNet.norm_lrelu_conv_c4", "munet.Modified3DUNet.inorm3d_c4", "munet.Modified3DUNet.lrelu", "munet.Modified3DUNet.conv3d_c5", "munet.Modified3DUNet.norm_lrelu_conv_c5", "munet.Modified3DUNet.dropout3d", "munet.Modified3DUNet.norm_lrelu_conv_c5", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu_l0", "munet.Modified3DUNet.conv3d_l0", "munet.Modified3DUNet.inorm3d_l0", "munet.Modified3DUNet.lrelu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "munet.Modified3DUNet.conv_norm_lrelu_l1", "munet.Modified3DUNet.conv3d_l1", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu_l1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "munet.Modified3DUNet.conv_norm_lrelu_l2", "munet.Modified3DUNet.conv3d_l2", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu_l2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "munet.Modified3DUNet.conv_norm_lrelu_l3", "munet.Modified3DUNet.conv3d_l3", "munet.Modified3DUNet.norm_lrelu_upscale_conv_norm_lrelu_l3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "munet.Modified3DUNet.conv_norm_lrelu_l4", "munet.Modified3DUNet.conv3d_l4", "munet.Modified3DUNet.ds2_1x1_conv3d", "munet.Modified3DUNet.upsacle", "munet.Modified3DUNet.ds3_1x1_conv3d", "munet.Modified3DUNet.upsacle"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#  Level 1 context pathway", "\n", "\t\t", "out", "=", "self", ".", "conv3d_c1_1", "(", "x", ")", "\n", "residual_1", "=", "out", "\n", "out", "=", "self", ".", "lrelu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3d_c1_2", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout3d", "(", "out", ")", "\n", "out", "=", "self", ".", "lrelu_conv_c1", "(", "out", ")", "\n", "# Element Wise Summation", "\n", "out", "+=", "residual_1", "\n", "context_1", "=", "self", ".", "lrelu", "(", "out", ")", "\n", "out", "=", "self", ".", "inorm3d_c1", "(", "out", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "out", ")", "\n", "\n", "# Level 2 context pathway", "\n", "out", "=", "self", ".", "conv3d_c2", "(", "out", ")", "\n", "residual_2", "=", "out", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c2", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout3d", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c2", "(", "out", ")", "\n", "out", "+=", "residual_2", "\n", "out", "=", "self", ".", "inorm3d_c2", "(", "out", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "out", ")", "\n", "context_2", "=", "out", "\n", "\n", "# Level 3 context pathway", "\n", "out", "=", "self", ".", "conv3d_c3", "(", "out", ")", "\n", "residual_3", "=", "out", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c3", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout3d", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c3", "(", "out", ")", "\n", "out", "+=", "residual_3", "\n", "out", "=", "self", ".", "inorm3d_c3", "(", "out", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "out", ")", "\n", "context_3", "=", "out", "\n", "\n", "# Level 4 context pathway", "\n", "out", "=", "self", ".", "conv3d_c4", "(", "out", ")", "\n", "residual_4", "=", "out", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c4", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout3d", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c4", "(", "out", ")", "\n", "out", "+=", "residual_4", "\n", "out", "=", "self", ".", "inorm3d_c4", "(", "out", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "out", ")", "\n", "context_4", "=", "out", "\n", "\n", "# Level 5", "\n", "out", "=", "self", ".", "conv3d_c5", "(", "out", ")", "\n", "residual_5", "=", "out", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c5", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout3d", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_lrelu_conv_c5", "(", "out", ")", "\n", "out", "+=", "residual_5", "\n", "out", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l0", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3d_l0", "(", "out", ")", "\n", "out", "=", "self", ".", "inorm3d_l0", "(", "out", ")", "\n", "out", "=", "self", ".", "lrelu", "(", "out", ")", "\n", "\n", "# Level 1 localization pathway", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "context_4", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "conv_norm_lrelu_l1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3d_l1", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l1", "(", "out", ")", "\n", "\n", "# Level 2 localization pathway", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "context_3", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "conv_norm_lrelu_l2", "(", "out", ")", "\n", "ds2", "=", "out", "\n", "out", "=", "self", ".", "conv3d_l2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l2", "(", "out", ")", "\n", "\n", "# Level 3 localization pathway", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "context_2", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "conv_norm_lrelu_l3", "(", "out", ")", "\n", "ds3", "=", "out", "\n", "out", "=", "self", ".", "conv3d_l3", "(", "out", ")", "\n", "out", "=", "self", ".", "norm_lrelu_upscale_conv_norm_lrelu_l3", "(", "out", ")", "\n", "\n", "# Level 4 localization pathway", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "context_1", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "conv_norm_lrelu_l4", "(", "out", ")", "\n", "out_pred", "=", "self", ".", "conv3d_l4", "(", "out", ")", "\n", "\n", "ds2_1x1_conv", "=", "self", ".", "ds2_1x1_conv3d", "(", "ds2", ")", "\n", "ds1_ds2_sum_upscale", "=", "self", ".", "upsacle", "(", "ds2_1x1_conv", ")", "\n", "ds3_1x1_conv", "=", "self", ".", "ds3_1x1_conv3d", "(", "ds3", ")", "\n", "ds1_ds2_sum_upscale_ds3_sum", "=", "ds1_ds2_sum_upscale", "+", "ds3_1x1_conv", "\n", "ds1_ds2_sum_upscale_ds3_sum_upscale", "=", "self", ".", "upsacle", "(", "ds1_ds2_sum_upscale_ds3_sum", ")", "\n", "\n", "out", "=", "out_pred", "+", "ds1_ds2_sum_upscale_ds3_sum_upscale", "\n", "return", "out", "\n", "#seg_layer = out", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.unet.ConvD.__init__": [[21, 38], ["torch.Module.__init__", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "unet.normalization", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "unet.normalization", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "unet.normalization"], "methods", ["home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.DeepMedicNR.__init__", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.unet.normalization", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.unet.normalization", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.unet.normalization"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "dropout", "=", "0.0", ",", "norm", "=", "'gn'", ",", "first", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "first", "=", "first", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "2", ",", "2", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.unet.ConvD.forward": [[39, 48], ["unet.ConvD.bn1", "unet.ConvD.relu", "unet.ConvD.bn3", "unet.ConvD.relu", "unet.ConvD.maxpool", "unet.ConvD.conv1", "unet.ConvD.bn2", "torch.dropout3d", "torch.dropout3d", "torch.dropout3d", "unet.ConvD.conv3", "unet.ConvD.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "first", ":", "\n", "            ", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "", "x", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "y", "=", "F", ".", "dropout3d", "(", "y", ",", "self", ".", "dropout", ")", "\n", "", "y", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", "\n", "return", "self", ".", "relu", "(", "x", "+", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.unet.ConvU.__init__": [[51, 67], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "unet.normalization", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "unet.normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "unet.normalization"], "methods", ["home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.DeepMedicNR.__init__", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.unet.normalization", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.unet.normalization", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.unet.normalization"], ["    ", "def", "__init__", "(", "self", ",", "planes", ",", "norm", "=", "'gn'", ",", "first", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "first", "=", "first", "\n", "\n", "if", "not", "self", ".", "first", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "2", "*", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", "//", "2", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", "//", "2", ",", "norm", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.unet.ConvU.forward": [[68, 80], ["torch.upsample", "torch.upsample", "torch.upsample", "unet.ConvU.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.ConvU.relu", "unet.ConvU.relu", "unet.ConvU.bn2", "unet.ConvU.bn3", "unet.ConvU.bn1", "unet.ConvU.conv2", "unet.ConvU.conv3", "unet.ConvU.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "prev", ")", ":", "\n", "# final output is the localization layer", "\n", "        ", "if", "not", "self", ".", "first", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n", "", "y", "=", "F", ".", "upsample", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n", "y", "=", "torch", ".", "cat", "(", "[", "prev", ",", "y", "]", ",", "1", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "y", ")", ")", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.unet.Unet.__init__": [[83, 109], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "unet.ConvD", "unet.ConvD", "unet.ConvD", "unet.ConvD", "unet.ConvD", "unet.ConvU", "unet.ConvU", "unet.ConvU", "unet.ConvU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "unet.Unet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.DeepMedicNR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c", "=", "4", ",", "n", "=", "16", ",", "dropout", "=", "0.5", ",", "norm", "=", "'gn'", ",", "num_classes", "=", "5", ")", ":", "\n", "        ", "super", "(", "Unet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "self", ".", "convd1", "=", "ConvD", "(", "c", ",", "n", ",", "dropout", ",", "norm", ",", "first", "=", "True", ")", "\n", "self", ".", "convd2", "=", "ConvD", "(", "n", ",", "2", "*", "n", ",", "dropout", ",", "norm", ")", "\n", "self", ".", "convd3", "=", "ConvD", "(", "2", "*", "n", ",", "4", "*", "n", ",", "dropout", ",", "norm", ")", "\n", "self", ".", "convd4", "=", "ConvD", "(", "4", "*", "n", ",", "8", "*", "n", ",", "dropout", ",", "norm", ")", "\n", "self", ".", "convd5", "=", "ConvD", "(", "8", "*", "n", ",", "16", "*", "n", ",", "dropout", ",", "norm", ")", "\n", "\n", "self", ".", "convu4", "=", "ConvU", "(", "16", "*", "n", ",", "norm", ",", "True", ")", "\n", "self", ".", "convu3", "=", "ConvU", "(", "8", "*", "n", ",", "norm", ")", "\n", "self", ".", "convu2", "=", "ConvU", "(", "4", "*", "n", ",", "norm", ")", "\n", "self", ".", "convu1", "=", "ConvU", "(", "2", "*", "n", ",", "norm", ")", "\n", "\n", "self", ".", "seg3", "=", "nn", ".", "Conv3d", "(", "8", "*", "n", ",", "num_classes", ",", "1", ")", "\n", "self", ".", "seg2", "=", "nn", ".", "Conv3d", "(", "4", "*", "n", ",", "num_classes", ",", "1", ")", "\n", "self", ".", "seg1", "=", "nn", ".", "Conv3d", "(", "2", "*", "n", ",", "num_classes", ",", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.unet.Unet.forward": [[110, 127], ["unet.Unet.convd1", "unet.Unet.convd2", "unet.Unet.convd3", "unet.Unet.convd4", "unet.Unet.convd5", "unet.Unet.convu4", "unet.Unet.convu3", "unet.Unet.convu2", "unet.Unet.convu1", "unet.Unet.seg3", "unet.Unet.seg2", "unet.Unet.upsample", "unet.Unet.seg1", "unet.Unet.upsample"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "convd1", "(", "x", ")", "\n", "x2", "=", "self", ".", "convd2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "convd3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "convd4", "(", "x3", ")", "\n", "x5", "=", "self", ".", "convd5", "(", "x4", ")", "\n", "\n", "y4", "=", "self", ".", "convu4", "(", "x5", ",", "x4", ")", "\n", "y3", "=", "self", ".", "convu3", "(", "y4", ",", "x3", ")", "\n", "y2", "=", "self", ".", "convu2", "(", "y3", ",", "x2", ")", "\n", "y1", "=", "self", ".", "convu1", "(", "y2", ",", "x1", ")", "\n", "\n", "y3", "=", "self", ".", "seg3", "(", "y3", ")", "\n", "y2", "=", "self", ".", "seg2", "(", "y2", ")", "+", "self", ".", "upsample", "(", "y3", ")", "\n", "y1", "=", "self", ".", "seg1", "(", "y1", ")", "+", "self", ".", "upsample", "(", "y2", ")", "\n", "\n", "return", "y1", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.unet.normalization": [[8, 18], ["torch.BatchNorm3d", "torch.GroupNorm", "torch.InstanceNorm3d", "ValueError"], "function", ["None"], ["def", "normalization", "(", "planes", ",", "norm", "=", "'gn'", ")", ":", "\n", "    ", "if", "norm", "==", "'bn'", ":", "\n", "        ", "m", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "", "elif", "norm", "==", "'gn'", ":", "\n", "        ", "m", "=", "nn", ".", "GroupNorm", "(", "4", ",", "planes", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "        ", "m", "=", "nn", ".", "InstanceNorm3d", "(", "planes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'normalization type {} is not supported'", ".", "format", "(", "norm", ")", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.ResBlock.__init__": [[9, 17], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.DeepMedicNR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.ResBlock.forward": [[18, 25], ["deepmedic.ResBlock.relu", "deepmedic.ResBlock.bn2", "deepmedic.ResBlock.relu", "deepmedic.ResBlock.bn1", "deepmedic.ResBlock.conv2", "deepmedic.ResBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "y", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "2", ":", "-", "2", ",", "2", ":", "-", "2", ",", "2", ":", "-", "2", "]", "\n", "y", "[", ":", ",", ":", "self", ".", "inplanes", "]", "+=", "x", "\n", "y", "=", "self", ".", "relu", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.DeepMedic.__init__": [[41, 77], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deepmedic.DeepMedic.modules", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.ResBlock", "deepmedic.ResBlock", "deepmedic.ResBlock", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "torch.Upsample", "torch.Upsample", "torch.Upsample", "deepmedic.conv3x3", "deepmedic.conv3x3", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.DeepMedicNR.__init__", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "c", "=", "4", ",", "n1", "=", "30", ",", "n2", "=", "40", ",", "n3", "=", "50", ",", "m", "=", "150", ",", "up", "=", "True", ")", ":", "\n", "        ", "super", "(", "DeepMedic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#n1, n2, n3 = 30, 40, 50", "\n", "\n", "n", "=", "2", "*", "n3", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "c", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n1", ")", ",", "\n", "ResBlock", "(", "n1", ",", "n2", ")", ",", "\n", "ResBlock", "(", "n2", ",", "n2", ")", ",", "\n", "ResBlock", "(", "n2", ",", "n3", ")", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "c", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n3", ")", ",", "\n", "conv3x3", "(", "n3", ",", "n3", ")", ")", "\n", "\n", "self", ".", "up3", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "3", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "if", "up", "else", "repeat", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "n", ",", "m", ",", "1", ")", ",", "\n", "conv3x3", "(", "m", ",", "m", ",", "1", ")", ",", "\n", "nn", ".", "Conv3d", "(", "m", ",", "5", ",", "1", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.DeepMedic.forward": [[78, 86], ["deepmedic.DeepMedic.branch1", "deepmedic.DeepMedic.branch2", "deepmedic.DeepMedic.up3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deepmedic.DeepMedic.fc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "inputs", "\n", "x1", "=", "self", ".", "branch1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "branch2", "(", "x2", ")", "\n", "x2", "=", "self", ".", "up3", "(", "x2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.VDeepMedic.__init__": [[88, 127], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deepmedic.VDeepMedic.modules", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.ResBlock", "deepmedic.ResBlock", "deepmedic.ResBlock", "deepmedic.ResBlock", "deepmedic.ResBlock", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "torch.Upsample", "torch.Upsample", "torch.Upsample", "deepmedic.conv3x3", "deepmedic.conv3x3", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.DeepMedicNR.__init__", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "c", "=", "4", ",", "n1", "=", "30", ",", "n2", "=", "40", ",", "n3", "=", "50", ",", "m", "=", "150", ",", "up", "=", "True", ")", ":", "\n", "        ", "super", "(", "VDeepMedic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#n1, n2, n3 = 30, 40, 50", "\n", "# need 29 inputs", "\n", "\n", "n", "=", "2", "*", "n3", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "c", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n1", ")", ",", "\n", "ResBlock", "(", "n1", ",", "n2", ")", ",", "\n", "ResBlock", "(", "n2", ",", "n2", ")", ",", "\n", "ResBlock", "(", "n2", ",", "n2", ")", ",", "\n", "ResBlock", "(", "n2", ",", "n2", ")", ",", "\n", "ResBlock", "(", "n2", ",", "n3", ")", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "c", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n3", ")", ",", "\n", "conv3x3", "(", "n3", ",", "n3", ")", ")", "\n", "\n", "self", ".", "up3", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "3", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "if", "up", "else", "repeat", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "n", ",", "m", ",", "1", ")", ",", "\n", "conv3x3", "(", "m", ",", "m", ",", "1", ")", ",", "\n", "nn", ".", "Conv3d", "(", "m", ",", "5", ",", "1", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.VDeepMedic.forward": [[128, 136], ["deepmedic.VDeepMedic.branch1", "deepmedic.VDeepMedic.branch2", "deepmedic.VDeepMedic.up3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deepmedic.VDeepMedic.fc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "inputs", "\n", "x1", "=", "self", ".", "branch1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "branch2", "(", "x2", ")", "\n", "x2", "=", "self", ".", "up3", "(", "x2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.DeepMedicNR.__init__": [[140, 179], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deepmedic.DeepMedicNR.modules", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "deepmedic.conv3x3", "torch.Upsample", "torch.Upsample", "torch.Upsample", "deepmedic.conv3x3", "deepmedic.conv3x3", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.DeepMedicNR.__init__", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3", "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "c", "=", "4", ",", "n1", "=", "30", ",", "n2", "=", "40", ",", "n3", "=", "50", ",", "m", "=", "150", ",", "up", "=", "True", ")", ":", "\n", "        ", "super", "(", "DeepMedicNR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#n1, n2, n3 = 30, 40, 50", "\n", "\n", "n", "=", "2", "*", "n3", "\n", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "c", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n3", ")", ",", "\n", "conv3x3", "(", "n3", ",", "n3", ")", ")", "\n", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "c", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n1", ")", ",", "\n", "conv3x3", "(", "n1", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n2", ")", ",", "\n", "conv3x3", "(", "n2", ",", "n3", ")", ",", "\n", "conv3x3", "(", "n3", ",", "n3", ")", ")", "\n", "\n", "self", ".", "up3", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "3", ",", "\n", "mode", "=", "'trilinear'", ",", "align_corners", "=", "False", ")", "if", "up", "else", "repeat", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "n", ",", "m", ",", "1", ")", ",", "\n", "conv3x3", "(", "m", ",", "m", ",", "1", ")", ",", "\n", "nn", ".", "Conv3d", "(", "m", ",", "5", ",", "1", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.DeepMedicNR.forward": [[180, 188], ["deepmedic.DeepMedicNR.branch1", "deepmedic.DeepMedicNR.branch2", "deepmedic.DeepMedicNR.up3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deepmedic.DeepMedicNR.fc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "inputs", "\n", "x1", "=", "self", ".", "branch1", "(", "x1", ")", "\n", "x2", "=", "self", ".", "branch2", "(", "x2", ")", "\n", "x2", "=", "self", ".", "up3", "(", "x2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.conv3x3": [[26, 31], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU"], "function", ["None"], ["", "", "def", "conv3x3", "(", "inplanes", ",", "planes", ",", "ksize", "=", "3", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "ksize", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.repeat": [[32, 38], ["x.repeat.unsqueeze().unsqueeze().unsqueeze", "x.repeat.repeat", "x.repeat.view", "x.repeat.unsqueeze().unsqueeze", "x.repeat.unsqueeze"], "function", ["home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.deepmedic.repeat"], ["", "def", "repeat", "(", "x", ",", "n", "=", "3", ")", ":", "\n", "# nc333", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", ",", "t", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "unsqueeze", "(", "5", ")", ".", "unsqueeze", "(", "4", ")", ".", "unsqueeze", "(", "3", ")", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "n", ",", "1", ",", "n", ",", "1", ",", "n", ")", "\n", "return", "x", ".", "view", "(", "b", ",", "c", ",", "n", "*", "h", ",", "n", "*", "w", ",", "n", "*", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.criterions.hard_cross_entropy": [[8, 30], ["torch.cross_entropy", "pos.sum.sum", "min", "pos.sum.numel", "neg.sum.numel", "torch.topk", "torch.topk", "neg.sum.sum", "int"], "function", ["None"], ["def", "hard_cross_entropy", "(", "output", ",", "target", ",", "alpha", "=", "3.0", ")", ":", "\n", "    ", "mtx", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduce", "=", "False", ")", "\n", "\n", "bg", "=", "(", "target", "==", "0", ")", "\n", "\n", "neg", "=", "mtx", "[", "bg", "]", "\n", "pos", "=", "mtx", "[", "1", "-", "bg", "]", "\n", "\n", "Np", ",", "Nn", "=", "pos", ".", "numel", "(", ")", ",", "neg", ".", "numel", "(", ")", "\n", "\n", "pos", "=", "pos", ".", "sum", "(", ")", "\n", "\n", "k", "=", "min", "(", "Np", "*", "alpha", ",", "Nn", ")", "\n", "if", "k", ">", "0", ":", "\n", "        ", "neg", ",", "_", "=", "torch", ".", "topk", "(", "neg", ",", "int", "(", "k", ")", ")", "\n", "neg", "=", "neg", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "neg", "=", "0.0", "\n", "\n", "", "loss", "=", "(", "pos", "+", "neg", ")", "/", "(", "Np", "+", "k", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.criterions.hard_per_im_cross_entropy": [[32, 51], ["output.view.view", "target.view.view", "torch.cross_entropy", "pos.long().sum", "F.cross_entropy.clone().detach", "mtx.clone().detach.sort", "loss_idx.sort", "torch.clamp", "torch.clamp", "mtx[].mean", "pos.long", "F.cross_entropy.clone", "pos.size"], "function", ["None"], ["", "def", "hard_per_im_cross_entropy", "(", "output", ",", "target", ",", "alpha", "=", "3.0", ")", ":", "\n", "    ", "n", ",", "c", "=", "output", ".", "shape", "[", ":", "2", "]", "\n", "output", "=", "output", ".", "view", "(", "n", ",", "c", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "\n", "mtx", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduce", "=", "False", ")", "\n", "\n", "pos", "=", "target", ">", "0", "\n", "num_pos", "=", "pos", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "loss", "=", "mtx", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "loss", "[", "pos", "]", "=", "0", "\n", "_", ",", "loss_idx", "=", "loss", ".", "sort", "(", "1", ",", "descending", "=", "True", ")", "\n", "_", ",", "idx_rank", "=", "loss_idx", ".", "sort", "(", "1", ")", "\n", "\n", "num_neg", "=", "torch", ".", "clamp", "(", "alpha", "*", "num_pos", ",", "max", "=", "pos", ".", "size", "(", "1", ")", "-", "1", ")", "\n", "neg", "=", "idx_rank", "<", "num_neg", "\n", "\n", "return", "mtx", "[", "neg", "+", "pos", "]", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.criterions.focal_loss": [[53, 68], ["target.size", "torch.cross_entropy", "pos.view().sum().view", "torch.clamp", "torch.clamp", "z.detach.detach", "focal.sum", "pos.view().sum", "torch.pow", "torch.pow", "pos.view", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "focal_loss", "(", "output", ",", "target", ",", "alpha", "=", "0.25", ",", "gamma", "=", "2.0", ")", ":", "\n", "    ", "n", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "lsfm", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduce", "=", "False", ")", "\n", "\n", "pos", "=", "(", "target", ">", "0", ")", ".", "float", "(", ")", "\n", "Np", "=", "pos", ".", "view", "(", "n", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "n", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "Np", "=", "torch", ".", "clamp", "(", "Np", ",", "1.0", ")", "\n", "z", "=", "pos", "*", "alpha", "/", "Np", "/", "n", "+", "(", "1.0", "-", "pos", ")", "*", "(", "1.0", "-", "alpha", ")", "/", "Np", "/", "n", "\n", "z", "=", "z", ".", "detach", "(", ")", "\n", "\n", "focal", "=", "torch", ".", "pow", "(", "1.0", "-", "torch", ".", "exp", "(", "-", "lsfm", ")", ",", "gamma", ")", "*", "lsfm", "*", "z", "\n", "\n", "return", "focal", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.criterions.mean_cross_entropy": [[70, 83], ["torch.cross_entropy", "pos.mean", "neg.mean", "pos.numel", "pos.neg"], "function", ["None"], ["", "def", "mean_cross_entropy", "(", "output", ",", "target", ",", "alpha", "=", "3.0", ")", ":", "\n", "    ", "mtx", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduce", "=", "False", ")", "\n", "\n", "bg", "=", "(", "target", "==", "0", ")", "\n", "\n", "neg", "=", "mtx", "[", "bg", "]", "\n", "pos", "=", "mtx", "[", "1", "-", "bg", "]", "\n", "\n", "pos", "=", "pos", ".", "mean", "(", ")", "if", "pos", ".", "numel", "(", ")", ">", "0", "else", "0", "\n", "neg", "=", "neg", ".", "mean", "(", ")", "if", "pos", ".", "neg", "(", ")", ">", "0", "else", "0", "\n", "\n", "loss", "=", "(", "neg", "*", "alpha", "+", "pos", ")", "/", "(", "alpha", "+", "1.0", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.criterions.dice": [[88, 92], ["output.sum", "target.sum"], "function", ["None"], ["def", "dice", "(", "output", ",", "target", ")", ":", "\n", "    ", "num", "=", "2", "*", "(", "output", "*", "target", ")", ".", "sum", "(", ")", "+", "eps", "\n", "den", "=", "output", ".", "sum", "(", ")", "+", "target", ".", "sum", "(", ")", "+", "eps", "\n", "return", "1.0", "-", "num", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.criterions.cross_entropy_dice": [[94, 103], ["torch.softmax", "range", "torch.cross_entropy", "criterions.dice"], "function", ["home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.criterions.dice"], ["", "def", "cross_entropy_dice", "(", "output", ",", "target", ",", "weight", "=", "1.0", ")", ":", "\n", "    ", "loss", "=", "weight", "*", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "for", "c", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "        ", "o", "=", "output", "[", ":", ",", "c", "]", "\n", "t", "=", "(", "target", "==", "c", ")", ".", "float", "(", ")", "\n", "loss", "+=", "0.25", "*", "dice", "(", "o", ",", "t", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.criterions.dice_per_im": [[107, 114], ["output.view.view", "target.view.view", "output.view.sum", "target.view.sum"], "function", ["None"], ["", "def", "dice_per_im", "(", "output", ",", "target", ")", ":", "\n", "    ", "n", "=", "output", ".", "shape", "[", "0", "]", "\n", "output", "=", "output", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "num", "=", "2", "*", "(", "output", "*", "target", ")", ".", "sum", "(", "1", ")", "+", "eps", "\n", "den", "=", "output", ".", "sum", "(", "1", ")", "+", "target", ".", "sum", "(", "1", ")", "+", "eps", "\n", "return", "1.0", "-", "(", "num", "/", "den", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.criterions.cross_entropy_dice_per_im": [[115, 124], ["torch.softmax", "range", "torch.cross_entropy", "criterions.dice_per_im"], "function", ["home.repos.pwc.inspect_result.UCSB-VRL_NPH_Prediction.models.criterions.dice_per_im"], ["", "def", "cross_entropy_dice_per_im", "(", "output", ",", "target", ",", "weight", "=", "1.0", ")", ":", "\n", "    ", "loss", "=", "weight", "*", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "for", "c", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "        ", "o", "=", "output", "[", ":", ",", "c", "]", "\n", "t", "=", "(", "target", "==", "c", ")", ".", "float", "(", ")", "\n", "loss", "+=", "0.25", "*", "dice_per_im", "(", "o", ",", "t", ")", "\n", "\n", "", "return", "loss", "\n", "", ""]]}