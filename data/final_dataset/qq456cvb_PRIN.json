{"home.repos.pwc.inspect_result.qq456cvb_PRIN.None.train.BalancedSampler.__init__": [[31, 34], ["torch.utils.data.Sampler.__init__"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_PRIN.None.model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "BalancedSampler", ",", "self", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.train.BalancedSampler.__iter__": [[35, 40], ["range", "train.BalancedSampler.dataset.balanced_indices_sample", "len"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_PRIN.None.dataset.MyDataset.balanced_indices_sample"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ")", "//", "N_CATS", ")", ":", "\n", "            ", "indices", "=", "self", ".", "dataset", ".", "balanced_indices_sample", "(", ")", "\n", "for", "idx", "in", "indices", ":", "\n", "                ", "yield", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.train.BalancedSampler.__len__": [[41, 43], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.train.load_train_set": [[45, 71], ["h5py.File", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "h5py.File", "range", "print", "dataset.MyDataset", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "ff.close"], "function", ["None"], ["", "", "def", "load_train_set", "(", "rand_rot", "=", "False", ",", "aug", "=", "True", ")", ":", "\n", "\n", "# load data", "\n", "    ", "f0", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'ply_data_train0.h5'", ")", ")", "\n", "f1", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'ply_data_train1.h5'", ")", ")", "\n", "f2", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'ply_data_train2.h5'", ")", ")", "\n", "f3", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'ply_data_train3.h5'", ")", ")", "\n", "f4", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'ply_data_train4.h5'", ")", ")", "\n", "f5", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'ply_data_train5.h5'", ")", ")", "\n", "f6", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'ply_data_val0.h5'", ")", ")", "\n", "f", "=", "[", "f0", ",", "f1", ",", "f2", ",", "f3", ",", "f4", ",", "f5", ",", "f6", "]", "\n", "\n", "data", "=", "f", "[", "0", "]", "[", "'data'", "]", "[", ":", "]", "\n", "label", "=", "f", "[", "0", "]", "[", "'label'", "]", "[", ":", "]", "\n", "seg", "=", "f", "[", "0", "]", "[", "'pid'", "]", "[", ":", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "7", ")", ":", "\n", "        ", "data", "=", "np", ".", "concatenate", "(", "(", "data", ",", "f", "[", "i", "]", "[", "'data'", "]", "[", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "label", "=", "np", ".", "concatenate", "(", "(", "label", ",", "f", "[", "i", "]", "[", "'label'", "]", "[", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "seg", "=", "np", ".", "concatenate", "(", "(", "seg", ",", "f", "[", "i", "]", "[", "'pid'", "]", "[", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "for", "ff", "in", "f", ":", "\n", "        ", "ff", ".", "close", "(", ")", "\n", "\n", "", "print", "(", "data", ".", "shape", ",", "label", ".", "shape", ",", "seg", ".", "shape", ")", "\n", "return", "MyDataset", "(", "data", ",", "label", ",", "seg", ",", "rand_rot", "=", "rand_rot", ",", "aug", "=", "aug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.train.main": [[73, 239], ["copy.deepcopy", "shutil.copy2", "logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.getLogger.addHandler", "logging.FileHandler", "logging.getLogger.addHandler", "logging.getLogger.info", "importlib.machinery.SourceFileLoader", "types.ModuleType", "importlib.machinery.SourceFileLoader.exec_module", "types.ModuleType.Model", "mod.Model.cuda", "logging.getLogger.info", "train.load_train_set", "test.load_test_set", "torch.utils.data.BatchSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.Adam", "torch.optim.Adam", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "locals", "os.path.isdir", "os.mkdir", "os.path.join", "os.path.join", "repr", "os.path.join", "mod.Model.load_state_dict", "train.BalancedSampler", "mod.Model.parameters", "mod.Model.train", "mod.Model.", "prediction.view.view", "target.view.view", "torch.nll_loss", "[].eq().float().cpu().mean", "prediction.view.data.argmax().cpu().numpy", "print", "zip", "numpy.random.seed", "train.main.get_learning_rate"], "function", ["home.repos.pwc.inspect_result.qq456cvb_PRIN.None.train.load_train_set", "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.test.load_test_set"], ["", "def", "main", "(", "log_dir", ",", "model_path", ",", "batch_size", ",", "resume", ",", "num_workers", ")", ":", "\n", "    ", "arguments", "=", "copy", ".", "deepcopy", "(", "locals", "(", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "log_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "log_dir", ")", "\n", "", "shutil", ".", "copy2", "(", "model_path", ",", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"model.py\"", ")", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"train\"", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "handlers", "=", "[", "]", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"log.txt\"", ")", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "logger", ".", "info", "(", "\"%s\"", ",", "repr", "(", "arguments", ")", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Load the model", "\n", "loader", "=", "importlib", ".", "machinery", ".", "SourceFileLoader", "(", "'model'", ",", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"model.py\"", ")", ")", "\n", "mod", "=", "types", ".", "ModuleType", "(", "loader", ".", "name", ")", "\n", "loader", ".", "exec_module", "(", "mod", ")", "\n", "\n", "model", "=", "mod", ".", "Model", "(", "hyper", ".", "N_PARTS", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "if", "resume", ">", "0", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"state%d.pkl\"", "%", "resume", ")", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"{} paramerters in total\"", ".", "format", "(", "sum", "(", "x", ".", "numel", "(", ")", "for", "x", "in", "model", ".", "parameters", "(", ")", ")", ")", ")", "\n", "bw", "=", "model", ".", "bandwidths", "[", "0", "]", "\n", "\n", "train_set", "=", "load_train_set", "(", "False", ",", "True", ")", "\n", "test_set", "=", "load_test_set", "(", "True", ")", "\n", "\n", "sampler", "=", "BatchSampler", "(", "BalancedSampler", "(", "train_set", ")", ",", "batch_size", ",", "False", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_set", ",", "batch_sampler", "=", "sampler", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "\n", "def", "train_step", "(", "data", ",", "target_index", ",", "target", ",", "cat_onehot", ",", "backward", "=", "True", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "data", ",", "target_index", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target_index", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "_", ",", "prediction", "=", "model", "(", "data", ",", "target_index", ",", "cat_onehot", ")", "\n", "\n", "prediction", "=", "prediction", ".", "view", "(", "-", "1", ",", "hyper", ".", "N_PARTS", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "prediction", ",", "target", ")", "\n", "\n", "if", "backward", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# torch.nn.utils.clip_grad_norm(model.parameters(), 1e-4)", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "correct", "=", "prediction", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "eq", "(", "target", ".", "data", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "mean", "(", ")", "\n", "\n", "pred", "=", "prediction", ".", "data", ".", "argmax", "(", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "print", "(", "','", ".", "join", "(", "[", "str", "(", "np", ".", "count_nonzero", "(", "pred", "==", "i", ")", ")", "for", "i", "in", "range", "(", "N_PARTS", ")", "]", ")", ")", "\n", "return", "loss", ".", "item", "(", ")", ",", "correct", ".", "item", "(", ")", "\n", "\n", "", "def", "get_learning_rate", "(", "epoch", ")", ":", "\n", "        ", "limits", "=", "[", "5", ",", "10", ",", "15", ",", "20", ",", "40", "]", "\n", "lrs", "=", "[", "0.01", ",", "0.005", ",", "0.001", ",", "0.0005", ",", "0.0001", ",", "5e-5", "]", "\n", "\n", "assert", "len", "(", "lrs", ")", "==", "len", "(", "limits", ")", "+", "1", "\n", "for", "lim", ",", "lr", "in", "zip", "(", "limits", ",", "lrs", ")", ":", "\n", "            ", "if", "epoch", "<", "lim", ":", "\n", "                ", "return", "lr", "\n", "", "", "return", "lrs", "[", "-", "1", "]", "\n", "\n", "", "for", "epoch", "in", "range", "(", "resume", ",", "300", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "epoch", ")", "\n", "lr", "=", "get_learning_rate", "(", "epoch", ")", "\n", "logger", ".", "info", "(", "\"learning rate = {} and batch size = {}\"", ".", "format", "(", "lr", ",", "train_loader", ".", "batch_size", ")", ")", "\n", "for", "p", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "p", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "total_loss", "=", "0", "\n", "total_correct", "=", "0", "\n", "time_before_load", "=", "time", ".", "perf_counter", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target_index", ",", "target", ",", "_", ",", "category", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# Transform category labels to one_hot.", "\n", "            ", "category_labels", "=", "torch", ".", "LongTensor", "(", "category", ")", "\n", "one_hot_labels", "=", "torch", ".", "zeros", "(", "category", ".", "size", "(", "0", ")", ",", "hyper", ".", "N_CATS", ")", ".", "scatter_", "(", "1", ",", "category_labels", ",", "1", ")", ".", "cuda", "(", ")", "\n", "# print (one_hot_labels)", "\n", "\n", "time_after_load", "=", "time", ".", "perf_counter", "(", ")", "\n", "time_before_step", "=", "time", ".", "perf_counter", "(", ")", "\n", "loss", ",", "correct", "=", "train_step", "(", "data", ",", "target_index", ",", "target", ",", "one_hot_labels", ",", "True", ")", "\n", "\n", "total_loss", "+=", "loss", "\n", "total_correct", "+=", "correct", "\n", "\n", "logger", ".", "info", "(", "\"[{}:{}/{}] LOSS={:.2} <LOSS>={:.2} ACC={:.2} <ACC>={:.2} time={:.2}+{:.2}\"", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "len", "(", "train_loader", ")", ",", "\n", "loss", ",", "total_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "\n", "correct", ",", "total_correct", "/", "(", "batch_idx", "+", "1", ")", ",", "\n", "time_after_load", "-", "time_before_load", ",", "\n", "time", ".", "perf_counter", "(", ")", "-", "time_before_step", ")", ")", "\n", "time_before_load", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "# test", "\n", "", "model", ".", "eval", "(", ")", "\n", "total_correct", "=", "0", "\n", "mean_correct", "=", "0", "\n", "shape_ious", "=", "{", "cat", ":", "[", "]", "for", "cat", "in", "seg_classes", ".", "keys", "(", ")", "}", "\n", "for", "batch_idx", ",", "(", "data", ",", "target_index", ",", "target", ",", "pt_cloud", ",", "category", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "# Transform category labels to one_hot.", "\n", "category_labels", "=", "torch", ".", "LongTensor", "(", "category", ")", "\n", "one_hot_labels", "=", "torch", ".", "zeros", "(", "category", ".", "size", "(", "0", ")", ",", "hyper", ".", "N_CATS", ")", ".", "scatter_", "(", "1", ",", "category_labels", ",", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "data", ",", "target_index", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target_index", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "# print (data.shape)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "_", ",", "prediction", "=", "model", "(", "data", ",", "target_index", ",", "one_hot_labels", ")", "\n", "\n", "", "prediction", "=", "prediction", ".", "view", "(", "-", "1", ",", "hyper", ".", "N_PTCLOUD", ",", "hyper", ".", "N_PARTS", ")", "\n", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ",", "hyper", ".", "N_PTCLOUD", ")", "\n", "\n", "for", "j", "in", "range", "(", "target", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "cat", "=", "seg_label_to_cat", "[", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "j", "]", "[", "0", "]", "]", "\n", "# print( prediction.cpu().numpy()[j].shape)", "\n", "prediction_np", "=", "prediction", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "j", "]", "[", ":", ",", "seg_classes", "[", "cat", "]", "]", ".", "argmax", "(", "1", ")", "+", "seg_classes", "[", "cat", "]", "[", "0", "]", "\n", "target_np", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "j", "]", "\n", "# print(prediction_np.shape, target_np.shape)", "\n", "correct", "=", "np", ".", "mean", "(", "(", "prediction_np", "==", "target_np", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "# pred = prediction.data.argmax(1).cpu().numpy()", "\n", "total_correct", "+=", "correct", "\n", "\n", "segp", "=", "prediction_np", "\n", "segl", "=", "target_np", "\n", "part_ious", "=", "[", "0.0", "for", "_", "in", "range", "(", "len", "(", "seg_classes", "[", "cat", "]", ")", ")", "]", "\n", "for", "l", "in", "seg_classes", "[", "cat", "]", ":", "\n", "                    ", "if", "(", "np", ".", "sum", "(", "segl", "==", "l", ")", "==", "0", ")", "and", "(", "\n", "np", ".", "sum", "(", "segp", "==", "l", ")", "==", "0", ")", ":", "# part is not present, no prediction as well", "\n", "                        ", "part_ious", "[", "l", "-", "seg_classes", "[", "cat", "]", "[", "0", "]", "]", "=", "1.0", "\n", "", "else", ":", "\n", "# print(np.sum(segl == l), np.sum(segp == l))", "\n", "                        ", "part_ious", "[", "l", "-", "seg_classes", "[", "cat", "]", "[", "0", "]", "]", "=", "np", ".", "sum", "(", "(", "segl", "==", "l", ")", "&", "(", "segp", "==", "l", ")", ")", "/", "float", "(", "\n", "np", ".", "sum", "(", "(", "segl", "==", "l", ")", "|", "(", "segp", "==", "l", ")", ")", ")", "\n", "# print(cat, part_ious)", "\n", "", "", "shape_ious", "[", "cat", "]", ".", "append", "(", "np", ".", "mean", "(", "part_ious", ")", ")", "\n", "\n", "", "mean_correct", "=", "total_correct", "/", "(", "batch_size", "*", "(", "batch_idx", "+", "1", ")", ")", "\n", "print", "(", "batch_size", "*", "(", "batch_idx", "+", "1", ")", ",", "mean_correct", ")", "\n", "\n", "", "all_shape_ious", "=", "[", "]", "\n", "for", "cat", "in", "shape_ious", ".", "keys", "(", ")", ":", "\n", "            ", "for", "iou", "in", "shape_ious", "[", "cat", "]", ":", "\n", "                ", "all_shape_ious", ".", "append", "(", "iou", ")", "\n", "", "shape_ious", "[", "cat", "]", "=", "np", ".", "mean", "(", "shape_ious", "[", "cat", "]", ")", "\n", "", "logger", ".", "info", "(", "'epoch %d test acc: %f, all shape mean IoU: %f, mean IoU: %f'", "%", "(", "\n", "epoch", ",", "mean_correct", ",", "np", ".", "mean", "(", "all_shape_ious", ")", ",", "np", ".", "nanmean", "(", "list", "(", "shape_ious", ".", "values", "(", ")", ")", ")", ")", ")", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"state%d.pkl\"", "%", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.dataset.MyDataset.__init__": [[46, 52], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pts", ",", "labels", ",", "segs", ",", "rand_rot", ",", "aug", ")", ":", "\n", "        ", "self", ".", "rand_rot", "=", "rand_rot", "\n", "self", ".", "aug", "=", "aug", "\n", "self", ".", "pts", "=", "pts", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "segs", "=", "segs", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.dataset.MyDataset.__len__": [[53, 55], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "pts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.dataset.MyDataset.balanced_indices_sample": [[56, 66], ["numpy.zeros", "numpy.all", "numpy.random.randint", "results.append", "len"], "methods", ["None"], ["", "def", "balanced_indices_sample", "(", "self", ")", ":", "\n", "        ", "ind", "=", "np", ".", "zeros", "(", "[", "hyper", ".", "N_CATS", "]", ",", "np", ".", "bool", ")", "\n", "results", "=", "[", "]", "\n", "while", "not", "np", ".", "all", "(", "ind", ")", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "pts", ")", ")", "\n", "if", "ind", "[", "self", ".", "labels", "[", "idx", "]", "]", ":", "\n", "                ", "continue", "\n", "", "ind", "[", "self", ".", "labels", "[", "idx", "]", "]", "=", "True", "\n", "results", ".", "append", "(", "idx", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.dataset.MyDataset.__getitem__": [[67, 103], ["numpy.array", "numpy.random.randint", "numpy.array", "numpy.linalg.norm", "numpy.clip", "lie_learn.spaces.S2.change_coordinates", "numpy.stack", "numpy.clip", "numpy.asarray", "dataset.rnd_rot", "numpy.einsum", "numpy.einsum", "dataset.rnd_rot", "numpy.eye", "sampling.compute", "numpy.asarray.astype", "numpy.clip.astype", "numpy.array.astype", "labels.astype", "numpy.linalg.norm", "numpy.sin", "numpy.random.rand", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_PRIN.None.dataset.rnd_rot", "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.dataset.rnd_rot"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "b", "=", "hyper", ".", "BANDWIDTH_IN", "\n", "pts", "=", "np", ".", "array", "(", "self", ".", "pts", "[", "index", "]", ")", "\n", "\n", "# randomly sample points", "\n", "sub_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "pts", ".", "shape", "[", "0", "]", ",", "hyper", ".", "N_PTCLOUD", ")", "\n", "pts", "=", "pts", "[", "sub_idx", "]", "\n", "if", "self", ".", "aug", ":", "\n", "            ", "rot", "=", "rnd_rot", "(", ")", "\n", "pts", "=", "np", ".", "einsum", "(", "'ij,nj->ni'", ",", "rot", ",", "pts", ")", "\n", "pts", "+=", "np", ".", "random", ".", "rand", "(", "3", ")", "[", "None", ",", ":", "]", "*", "0.05", "\n", "pts", "=", "np", ".", "einsum", "(", "'ij,nj->ni'", ",", "rot", ".", "T", ",", "pts", ")", "\n", "", "segs", "=", "np", ".", "array", "(", "self", ".", "segs", "[", "index", "]", ")", "\n", "segs", "=", "segs", "[", "sub_idx", "]", "\n", "labels", "=", "self", ".", "labels", "[", "index", "]", "\n", "\n", "pts_norm", "=", "np", ".", "linalg", ".", "norm", "(", "pts", ",", "axis", "=", "1", ")", "\n", "pts_normed", "=", "pts", "/", "pts_norm", "[", ":", ",", "None", "]", "\n", "rand_rot", "=", "rnd_rot", "(", ")", "if", "self", ".", "rand_rot", "else", "np", ".", "eye", "(", "3", ")", "\n", "rotated_pts_normed", "=", "np", ".", "clip", "(", "pts_normed", "@", "rand_rot", ",", "-", "1", ",", "1", ")", "\n", "\n", "pts_s2", "=", "S2", ".", "change_coordinates", "(", "rotated_pts_normed", ",", "p_from", "=", "'C'", ",", "p_to", "=", "'S'", ")", "\n", "pts_s2", "[", ":", ",", "0", "]", "*=", "2", "*", "b", "/", "np", ".", "pi", "# [0, pi]", "\n", "pts_s2", "[", ":", ",", "1", "]", "*=", "b", "/", "np", ".", "pi", "\n", "pts_s2", "[", ":", ",", "1", "]", "[", "pts_s2", "[", ":", ",", "1", "]", "<", "0", "]", "+=", "2", "*", "b", "\n", "\n", "pts_s2_float", "=", "pts_s2", "\n", "\n", "# N * 3", "\n", "pts_so3", "=", "np", ".", "stack", "(", "[", "pts_norm", "*", "2", "-", "1", ",", "pts_s2_float", "[", ":", ",", "1", "]", "/", "(", "2", "*", "b", "-", "1", ")", "*", "2", "-", "1", ",", "pts_s2_float", "[", ":", ",", "0", "]", "/", "(", "2", "*", "b", "-", "1", ")", "*", "2", "-", "1", "]", ",", "axis", "=", "1", ")", "\n", "pts_so3", "=", "np", ".", "clip", "(", "pts_so3", ",", "-", "1", ",", "1", ")", "\n", "\n", "# one hundred times speed up !", "\n", "features", "=", "np", ".", "asarray", "(", "compute", "(", "pts_s2_float", ",", "np", ".", "linalg", ".", "norm", "(", "pts", ",", "axis", "=", "1", ")", ",", "hyper", ".", "R_IN", ",", "b", ",", "np", ".", "sin", "(", "np", ".", "pi", "*", "(", "2", "*", "np", ".", "arange", "(", "2", "*", "b", ")", "+", "1", ")", "/", "4", "/", "b", ")", ")", ")", "\n", "\n", "return", "features", ".", "astype", "(", "np", ".", "float32", ")", ",", "pts_so3", ".", "astype", "(", "np", ".", "float32", ")", ",", "segs", ".", "astype", "(", "np", ".", "int64", ")", ",", "pts", "@", "rand_rot", ",", "labels", ".", "astype", "(", "np", ".", "int64", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.dataset.rotmat": [[11, 35], ["z().dot().dot", "numpy.array", "numpy.array", "dataset.rotmat.z"], "function", ["None"], ["def", "rotmat", "(", "a", ",", "b", ",", "c", ",", "hom_coord", "=", "False", ")", ":", "# apply to mesh using mesh.apply_transform(rotmat(a,b,c, True))", "\n", "    ", "\"\"\"\n    Create a rotation matrix with an optional fourth homogeneous coordinate\n\n    :param a, b, c: ZYZ-Euler angles\n    \"\"\"", "\n", "\n", "def", "z", "(", "a", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "a", ")", ",", "np", ".", "sin", "(", "a", ")", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "a", ")", ",", "np", ".", "cos", "(", "a", ")", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "", "def", "y", "(", "a", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "a", ")", ",", "0", ",", "-", "np", ".", "sin", "(", "a", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "a", ")", ",", "0", ",", "np", ".", "cos", "(", "a", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "", "r", "=", "z", "(", "a", ")", ".", "dot", "(", "y", "(", "b", ")", ")", ".", "dot", "(", "z", "(", "c", ")", ")", "# pylint: disable=E1101", "\n", "if", "hom_coord", ":", "\n", "        ", "return", "r", "\n", "", "else", ":", "\n", "        ", "return", "r", "[", ":", "3", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.dataset.rnd_rot": [[37, 43], ["dataset.rotmat", "numpy.arccos", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.qq456cvb_PRIN.None.dataset.rotmat"], ["", "", "def", "rnd_rot", "(", ")", ":", "\n", "    ", "a", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "z", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "2", "-", "1", "\n", "c", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "rot", "=", "rotmat", "(", "a", ",", "np", ".", "arccos", "(", "z", ")", ",", "c", ",", "False", ")", "\n", "return", "rot", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.test.load_test_set": [[55, 71], ["h5py.File", "numpy.asarray", "range", "print", "h5py.File.close", "dataset.MyDataset", "os.path.join", "pts.append", "segs.append", "numpy.asarray", "numpy.asarray", "numpy.array", "numpy.array"], "function", ["None"], ["def", "load_test_set", "(", "rand_rot", ",", "aug", "=", "False", ")", ":", "\n", "    ", "f", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'ply_data_test0.h5'", ")", ")", "\n", "\n", "labels", "=", "np", ".", "asarray", "(", "f", "[", "'label'", "]", ")", "\n", "pts", "=", "[", "]", "\n", "segs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "pts", ".", "append", "(", "np", ".", "asarray", "(", "f", "[", "'data%d'", "%", "i", "]", ")", ")", "\n", "segs", ".", "append", "(", "np", ".", "asarray", "(", "f", "[", "'pid%d'", "%", "i", "]", ")", ")", "\n", "", "print", "(", "np", ".", "array", "(", "pts", ")", ".", "shape", ",", "np", ".", "array", "(", "segs", ")", ".", "shape", ")", "\n", "\n", "f", ".", "close", "(", ")", "\n", "\n", "test_set", "=", "MyDataset", "(", "pts", ",", "labels", ",", "segs", ",", "rand_rot", "=", "rand_rot", ",", "aug", "=", "aug", ")", "\n", "\n", "return", "test_set", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.model.Model.__init__": [[10, 40], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "s2cnn.s2_equatorial_grid", "sequence.append", "range", "sequence.append", "sequence.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "s2cnn.S2Convolution", "sequence.append", "sequence.append", "s2cnn.so3_equatorial_grid", "sequence.append", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "s2cnn.SO3Convolution"], "methods", ["home.repos.pwc.inspect_result.qq456cvb_PRIN.None.model.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nclasses", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "features", "=", "[", "hyper", ".", "R_IN", ",", "40", ",", "40", ",", "nclasses", "]", "\n", "self", ".", "bandwidths", "=", "[", "hyper", ".", "BANDWIDTH_IN", ",", "32", ",", "32", ",", "hyper", ".", "BANDWIDTH_OUT", "]", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "nclasses", "+", "hyper", ".", "N_CATS", ",", "50", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "50", ",", "50", ")", "\n", "\n", "sequence", "=", "[", "]", "\n", "\n", "# S2 layer", "\n", "grid", "=", "s2_equatorial_grid", "(", "max_beta", "=", "0", ",", "n_alpha", "=", "2", "*", "self", ".", "bandwidths", "[", "0", "]", ",", "n_beta", "=", "1", ")", "\n", "sequence", ".", "append", "(", "S2Convolution", "(", "self", ".", "features", "[", "0", "]", ",", "self", ".", "features", "[", "1", "]", ",", "self", ".", "bandwidths", "[", "0", "]", ",", "self", ".", "bandwidths", "[", "1", "]", ",", "grid", ")", ")", "\n", "\n", "# SO3 layers", "\n", "for", "l", "in", "range", "(", "1", ",", "len", "(", "self", ".", "features", ")", "-", "1", ")", ":", "\n", "            ", "nfeature_in", "=", "self", ".", "features", "[", "l", "]", "\n", "nfeature_out", "=", "self", ".", "features", "[", "l", "+", "1", "]", "\n", "b_in", "=", "self", ".", "bandwidths", "[", "l", "]", "\n", "b_out", "=", "self", ".", "bandwidths", "[", "l", "+", "1", "]", "\n", "\n", "sequence", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "nfeature_in", ",", "affine", "=", "True", ")", ")", "\n", "sequence", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "grid", "=", "so3_equatorial_grid", "(", "max_beta", "=", "0", ",", "max_gamma", "=", "0", ",", "n_alpha", "=", "2", "*", "b_in", ",", "n_beta", "=", "1", ",", "n_gamma", "=", "1", ")", "\n", "sequence", ".", "append", "(", "SO3Convolution", "(", "nfeature_in", ",", "nfeature_out", ",", "b_in", ",", "b_out", ",", "grid", ")", ")", "\n", "\n", "", "sequence", ".", "append", "(", "nn", ".", "BatchNorm3d", "(", "self", ".", "features", "[", "-", "1", "]", ",", "affine", "=", "True", ")", ")", "\n", "sequence", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "sequential", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qq456cvb_PRIN.None.model.Model.forward": [[41, 60], ["model.Model.sequential", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "features.squeeze().squeeze().permute().contiguous.squeeze().squeeze().permute().contiguous.squeeze().squeeze().permute().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "model.Model.linear2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model.Model.linear1", "features.squeeze().squeeze().permute().contiguous.squeeze().squeeze().permute().contiguous.squeeze().squeeze().permute", "cat_onehot[].repeat", "features.squeeze().squeeze().permute().contiguous.squeeze().squeeze().permute().contiguous.size", "features.squeeze().squeeze().permute().contiguous.squeeze().squeeze().permute().contiguous.squeeze().squeeze", "features.squeeze().squeeze().permute().contiguous.squeeze().squeeze().permute().contiguous.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target_index", ",", "cat_onehot", ")", ":", "# pylint: disable=W0221", "\n", "# concat after SO3 conv", "\n", "# B * C * a * b * c", "\n", "        ", "x", "=", "self", ".", "sequential", "(", "x", ")", "# [batch, feature, beta, alpha, gamma]", "\n", "\n", "# B * C * N * 1 * 1", "\n", "features", "=", "F", ".", "grid_sample", "(", "x", ",", "target_index", "[", ":", ",", ":", ",", "None", ",", "None", ",", ":", "]", ")", "\n", "# B * N * C", "\n", "features", "=", "features", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "3", ")", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", ".", "contiguous", "(", ")", "\n", "\n", "# B * N * (C + 16)", "\n", "prediction", "=", "torch", ".", "cat", "(", "[", "features", ",", "cat_onehot", "[", ":", ",", "None", ",", ":", "]", ".", "repeat", "(", "1", ",", "features", ".", "size", "(", "1", ")", ",", "1", ")", "]", ",", "dim", "=", "2", ")", "\n", "\n", "# B * N * C", "\n", "prediction", "=", "F", ".", "relu", "(", "self", ".", "linear1", "(", "prediction", ")", ")", "\n", "prediction", "=", "self", ".", "linear2", "(", "prediction", ")", "\n", "\n", "prediction", "=", "F", ".", "log_softmax", "(", "prediction", ",", "dim", "=", "2", ")", "\n", "return", "features", ",", "prediction", "\n", "", "", ""]]}