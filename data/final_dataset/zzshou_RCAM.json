{"home.repos.pwc.inspect_result.zzshou_RCAM.GAReader.GAReader.GAReader.__init__": [[47, 68], ["torch.Module.__init__", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "Models.UnOrderedLSTM.LSTM", "Models.UnOrderedLSTM.LSTM", "Models.MLPAttention.MLPAttention", "Models.MLPAttention.MLPAttention", "Models.Linear.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.zzshou_RCAM.Model.Model.MultiChoiceModel.__init__"], ["def", "__init__", "(", "self", ",", "embedding_dim", ",", "output_dim", ",", "hidden_size", ",", "rnn_num_layers", ",", "ga_layers", ",", "bidirectional", ",", "dropout", ",", "word_emb", ")", ":", "\n", "        ", "super", "(", "GAReader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "word_emb", ",", "freeze", "=", "False", ")", "\n", "\n", "self", ".", "rnn", "=", "LSTM", "(", "embedding_dim", ",", "hidden_size", ",", "True", ",", "\n", "rnn_num_layers", ",", "bidirectional", ",", "dropout", ")", "\n", "\n", "self", ".", "ga_rnn", "=", "LSTM", "(", "hidden_size", "*", "2", ",", "hidden_size", ",", "True", ",", "\n", "rnn_num_layers", ",", "bidirectional", ",", "dropout", ")", "\n", "\n", "self", ".", "ga_layers", "=", "ga_layers", "\n", "\n", "self", ".", "mlp_att", "=", "MLPAttention", "(", "hidden_size", "*", "2", ",", "dropout", ")", "\n", "\n", "self", ".", "dot_layer", "=", "MLPAttention", "(", "hidden_size", "*", "2", ",", "dropout", ")", "\n", "\n", "self", ".", "final_liear", "=", "Linear", "(", "hidden_size", "*", "10", ",", "output_dim", ")", "\n", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.GAReader.GAReader.GAReader.forward": [[69, 148], ["GAReader.GAReader.dropout", "GAReader.GAReader.dropout", "GAReader.GAReader.dropout", "GAReader.GAReader.dropout", "GAReader.GAReader.dropout", "GAReader.GAReader.dropout", "GAReader.GAReader.dropout", "GAReader.GAReader.permute", "question_emb.permute.permute.permute", "option0_emb.permute.permute.permute", "option1_emb.permute.permute.permute", "option2_emb.permute.permute.permute", "option3_emb.permute.permute.permute", "option4_emb.permute.permute.permute", "GAReader.GAReader.rnn", "GAReader.GAReader.rnn", "GAReader.GAReader.rnn", "GAReader.GAReader.rnn", "GAReader.GAReader.rnn", "GAReader.GAReader.rnn", "GAReader.GAReader.rnn", "range", "GAReader.GAReader.dropout", "GAReader.GAReader.dropout", "GAReader.GAReader.dropout", "GAReader.GAReader.dropout", "GAReader.GAReader.dropout", "GAReader.GAReader.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "GAReader.GAReader.dropout", "GAReader.GAReader.word_embedding", "GAReader.GAReader.word_embedding", "GAReader.GAReader.word_embedding", "GAReader.GAReader.word_embedding", "GAReader.GAReader.word_embedding", "GAReader.GAReader.word_embedding", "GAReader.GAReader.word_embedding", "GAReader.GAReader.dropout", "GAReader.GAReader.ga_rnn", "GAReader.GAReader.mlp_att", "GAReader.GAReader.dot_layer", "GAReader.GAReader.dot_layer", "GAReader.GAReader.dot_layer", "GAReader.GAReader.dot_layer", "GAReader.GAReader.dot_layer", "GAReader.GAReader.final_liear", "GAReader.gated_attention"], "methods", ["home.repos.pwc.inspect_result.zzshou_RCAM.GAReader.GAReader.gated_attention"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "article", ",", "article_lengths", "=", "batch", ".", "article", "\n", "# article: [article_len, batch_size], article_lengths: [batch_size]", "\n", "\n", "question", ",", "question_lengths", "=", "batch", ".", "question", "\n", "# question: [question_len, batch_size], question_lengths: [batch_size]", "\n", "\n", "option0", ",", "option0_lengths", "=", "batch", ".", "option_0", "\n", "option1", ",", "option1_lengths", "=", "batch", ".", "option_1", "\n", "option2", ",", "option2_lengths", "=", "batch", ".", "option_2", "\n", "option3", ",", "option3_lengths", "=", "batch", ".", "option_3", "\n", "option4", ",", "option4_lengths", "=", "batch", ".", "option_4", "\n", "# option: [option_len, batch_size]", "\n", "\n", "article_emb", "=", "self", ".", "dropout", "(", "self", ".", "word_embedding", "(", "article", ")", ")", "\n", "# article_emb: [article_len, batch_size, emd_dim]", "\n", "\n", "question_emb", "=", "self", ".", "dropout", "(", "self", ".", "word_embedding", "(", "question", ")", ")", "\n", "# question_emb: [question_len, batch_size, emd_dim]", "\n", "\n", "option0_emb", "=", "self", ".", "dropout", "(", "self", ".", "word_embedding", "(", "option0", ")", ")", "\n", "option1_emb", "=", "self", ".", "dropout", "(", "self", ".", "word_embedding", "(", "option1", ")", ")", "\n", "option2_emb", "=", "self", ".", "dropout", "(", "self", ".", "word_embedding", "(", "option2", ")", ")", "\n", "option3_emb", "=", "self", ".", "dropout", "(", "self", ".", "word_embedding", "(", "option3", ")", ")", "\n", "option4_emb", "=", "self", ".", "dropout", "(", "self", ".", "word_embedding", "(", "option4", ")", ")", "\n", "# option: [option_len, batch_size, emd_dim]", "\n", "\n", "article_emb", "=", "article_emb", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# [batch_size, seq_len, dim]", "\n", "question_emb", "=", "question_emb", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "option0_emb", "=", "option0_emb", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "option1_emb", "=", "option1_emb", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "option2_emb", "=", "option2_emb", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "option3_emb", "=", "option3_emb", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "option4_emb", "=", "option4_emb", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "question_hidden", ",", "question_out", "=", "self", ".", "rnn", "(", "question_emb", ",", "question_lengths", ")", "\n", "# question_out: [batch_size, question_len, hidden_size * 2]", "\n", "# question_hidden: [batch_size, hidden_size * 2]", "\n", "\n", "option0_hidden", ",", "option0_out", "=", "self", ".", "rnn", "(", "option0_emb", ",", "option0_lengths", ")", "\n", "option1_hidden", ",", "option1_out", "=", "self", ".", "rnn", "(", "option1_emb", ",", "option1_lengths", ")", "\n", "option2_hidden", ",", "option2_out", "=", "self", ".", "rnn", "(", "option2_emb", ",", "option2_lengths", ")", "\n", "option3_hidden", ",", "option3_out", "=", "self", ".", "rnn", "(", "option3_emb", ",", "option3_lengths", ")", "\n", "option4_hidden", ",", "option4_out", "=", "self", ".", "rnn", "(", "option4_emb", ",", "option4_lengths", ")", "\n", "# option_out: [batch_size, option_len,  hidden_size * 2]", "\n", "\n", "_", ",", "article_out", "=", "self", ".", "rnn", "(", "article_emb", ",", "article_lengths", ")", "\n", "# article_out: [article_len, batch_size, hidden_size * 2]", "\n", "\n", "\n", "for", "layer", "in", "range", "(", "self", ".", "ga_layers", ")", ":", "\n", "\n", "            ", "article_emb", "=", "self", ".", "dropout", "(", "gated_attention", "(", "article_out", ",", "question_out", ")", ")", "\n", "# article_emb: [batch_size, article_len, hidden_size * 2]", "\n", "\n", "_", ",", "article_out", "=", "self", ".", "ga_rnn", "(", "article_emb", ",", "article_lengths", ")", "\n", "# article_out: [batch_size, article_len, hidden_size * 2]", "\n", "\n", "", "ATT_article_question", "=", "self", ".", "dropout", "(", "self", ".", "mlp_att", "(", "question_hidden", ",", "article_out", ",", "article_out", ")", ")", "\n", "# ATT_article_question: [batch_size, hidden_size * 2]", "\n", "\n", "# \u878d\u5408 option \u4fe1\u606f [batch_size, hidden_size * 2]", "\n", "ATT_option0", "=", "self", ".", "dropout", "(", "self", ".", "dot_layer", "(", "\n", "ATT_article_question", ",", "option0_out", ",", "option0_out", ")", ")", "\n", "ATT_option1", "=", "self", ".", "dropout", "(", "self", ".", "dot_layer", "(", "\n", "ATT_article_question", ",", "option1_out", ",", "option1_out", ")", ")", "\n", "ATT_option2", "=", "self", ".", "dropout", "(", "self", ".", "dot_layer", "(", "\n", "ATT_article_question", ",", "option2_out", ",", "option2_out", ")", ")", "\n", "ATT_option3", "=", "self", ".", "dropout", "(", "self", ".", "dot_layer", "(", "\n", "ATT_article_question", ",", "option3_out", ",", "option3_out", ")", ")", "\n", "ATT_option4", "=", "self", ".", "dropout", "(", "self", ".", "dot_layer", "(", "\n", "ATT_article_question", ",", "option4_out", ",", "option4_out", ")", ")", "\n", "\n", "all_infomation", "=", "torch", ".", "cat", "(", "(", "ATT_option0", ",", "ATT_option1", ",", "ATT_option2", ",", "ATT_option3", ",", "ATT_option4", ")", ",", "dim", "=", "1", ")", "\n", "\n", "logit", "=", "self", ".", "dropout", "(", "self", ".", "final_liear", "(", "all_infomation", ")", ")", "\n", "\n", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.GAReader.GAReader.gated_attention": [[11, 35], ["question.permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax().view_as", "torch.bmm", "torch.bmm", "torch.bmm", "torch.mul", "torch.mul", "torch.mul", "torch.softmax", "torch.bmm.view", "torch.bmm.size"], "function", ["None"], ["def", "gated_attention", "(", "article", ",", "question", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        article: [batch_size, article_len , dim]\n        question: [batch_size, question_len, dim]\n    Returns:\n        question_to_article: [batch_size, article_len, dim]\n    \"\"\"", "\n", "question_att", "=", "question", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# question : [batch_size * dim * question_len]", "\n", "\n", "att_matrix", "=", "torch", ".", "bmm", "(", "article", ",", "question_att", ")", "\n", "# att_matrix: [batch_size * article_len * question_len]", "\n", "\n", "att_weights", "=", "F", ".", "softmax", "(", "att_matrix", ".", "view", "(", "-", "1", ",", "att_matrix", ".", "size", "(", "-", "1", ")", ")", ",", "dim", "=", "1", ")", ".", "view_as", "(", "att_matrix", ")", "\n", "# att_weights: [batch_size, article_len, question_len]", "\n", "\n", "question_rep", "=", "torch", ".", "bmm", "(", "att_weights", ",", "question", ")", "\n", "# question_rep : [batch_size, article_len, dim]", "\n", "\n", "question_to_article", "=", "torch", ".", "mul", "(", "article", ",", "question_rep", ")", "\n", "# question_to_article: [batch_size, article_len, dim]", "\n", "\n", "return", "question_to_article", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.GAReader.args.get_args": [[6, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "int"], "function", ["None"], ["def", "get_args", "(", "data_dir", ",", "cache_dir", ",", "embedding_folder", ",", "model_dir", ",", "log_dir", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'ReCAM'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--model_name\"", ",", "default", "=", "\"GAReader\"", ",", "\n", "type", "=", "str", ",", "help", "=", "\"name of the model\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "default", "=", "1234", ",", "type", "=", "int", ",", "help", "=", "\"random seed\"", ")", "\n", "\n", "# data_util", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data_path\"", ",", "default", "=", "data_dir", ",", "type", "=", "str", ",", "help", "=", "\"path of the data\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cache_dir\"", ",", "default", "=", "cache_dir", ",", "type", "=", "str", ",", "help", "=", "\"path of the cache\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sequence_length\"", ",", "default", "=", "800", ",", "type", "=", "int", ",", "help", "=", "\"length of sentence\"", "\n", ")", "\n", "\n", "# \u8f93\u51fa\u6587\u4ef6\u540d", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_dir\"", ",", "default", "=", "model_dir", "+", "\"GAReader/\"", ",", "type", "=", "str", ",", "help", "=", "\"output path of the model\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log_dir\"", ",", "default", "=", "log_dir", "+", "\"GAReader/\"", ",", "type", "=", "str", ",", "help", "=", "\"path of logging file\"", "\n", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--do_train\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to run training.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--print_step\"", ",", "default", "=", "200", ",", "\n", "type", "=", "int", ",", "help", "=", "\"save the model after how many steps\"", ")", "\n", "\n", "# \u6a21\u578b\u53c2\u6570", "\n", "parser", ".", "add_argument", "(", "\"--output_dim\"", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "\n", "# \u4f18\u5316\u53c2\u6570", "\n", "parser", ".", "add_argument", "(", "\"--train_batch_size\"", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--dev_batch_size\"", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_batch_size\"", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--epoch_num\"", ",", "default", "=", "30", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout\"", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "default", "=", "0.001", ",", "type", "=", "float", ",", "help", "=", "\"learning rate\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--clip\"", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "\"\"", ")", "\n", "\n", "# LSTM \u53c2\u6570", "\n", "parser", ".", "add_argument", "(", "\"--hidden_size\"", ",", "default", "=", "128", ",", "type", "=", "int", ",", "help", "=", "\"the number of dimension of hidden size\"", ")", "\n", "parser", ".", "add_argument", "(", "'--rnn_num_layers'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of RNN layer'", ")", "\n", "parser", ".", "add_argument", "(", "\"--bidirectional\"", ",", "default", "=", "True", ",", "type", "=", "bool", ")", "\n", "\n", "# GAReader", "\n", "parser", ".", "add_argument", "(", "'--ga_layers'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'the layer of GAReader'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--gpu_ids\"", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ",", "help", "=", "\"gpu id\"", ")", "\n", "\n", "# word Embedding", "\n", "parser", ".", "add_argument", "(", "\n", "'--glove_word_file'", ",", "\n", "default", "=", "embedding_folder", "+", "'glove.840B.300d.txt'", ",", "\n", "type", "=", "str", ",", "help", "=", "'path of word embedding file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--glove_word_size'", ",", "\n", "default", "=", "int", "(", "2.2e6", ")", ",", "type", "=", "int", ",", "\n", "help", "=", "'Corpus size for Glove'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--glove_word_dim'", ",", "\n", "default", "=", "300", ",", "type", "=", "int", ",", "\n", "help", "=", "'word embedding size (default: 300)'", ")", "\n", "\n", "config", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.Run.InfiniteDataLoader.__init__": [[45, 48], ["iter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "data_iter", "=", "iter", "(", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.Run.InfiniteDataLoader.get_next": [[49, 58], ["next", "iter", "next"], "methods", ["None"], ["", "def", "get_next", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "data", "=", "next", "(", "self", ".", "data_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "# StopIteration is thrown if dataset ends", "\n", "# reinitialize data loader", "\n", "            ", "self", ".", "data_iter", "=", "iter", "(", "self", ".", "data_loader", ")", "\n", "data", "=", "next", "(", "self", ".", "data_iter", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.Run.seed_torch": [[28, 36], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "seed_torch", "(", "seed", "=", "2021", ")", ":", "\n", "    ", "\"\"\"set the random seed\"\"\"", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.Run.accuracy": [[38, 42], ["numpy.argmax", "numpy.sum"], "function", ["None"], ["", "def", "accuracy", "(", "out", ",", "labels", ")", ":", "\n", "    ", "\"\"\" compute the number of correct prediction \"\"\"", "\n", "outputs", "=", "np", ".", "argmax", "(", "out", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "sum", "(", "outputs", "==", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.Run.train": [[60, 182], ["enumerate", "sum", "transformers.get_linear_schedule_with_warmup", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "model.zero_grad", "tqdm.trange", "Run.seed_torch", "torch.utils.data.DataLoader", "train_iters.append", "tr_batches.append", "len", "os.path.join", "tqdm.tqdm", "logger.info", "Run.InfiniteDataLoader", "len", "float", "os.path.exists", "os.makedirs", "open", "writer.write", "range", "time.time", "model.train", "numpy.argmax", "train_iters[].get_next", "tuple", "model", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "criterion.backward", "torch.utils.clip_grad_norm_", "criterion.item", "logits.detach().cpu().numpy.detach().cpu().numpy", "labels.detach().cpu().numpy.detach().cpu().numpy", "Run.accuracy", "batch[].size", "tqdm.tqdm.close", "numpy.random.multinomial", "model.parameters", "optimizer.step", "transformers.get_linear_schedule_with_warmup.step", "model.zero_grad", "tqdm.tqdm.set_description", "tqdm.tqdm.close", "t.to", "time.time", "logits.detach().cpu().numpy.detach().cpu", "labels.detach().cpu().numpy.detach().cpu", "Run.evaluate", "time.strftime", "torch.save", "torch.save", "logger.info", "logits.detach().cpu().numpy.detach", "labels.detach().cpu().numpy.detach", "time.localtime", "os.path.join", "time.time", "model.state_dict", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.zzshou_RCAM.Model.Run.seed_torch", "home.repos.pwc.inspect_result.zzshou_RCAM.Model.Run.train", "home.repos.pwc.inspect_result.zzshou_RCAM.Model.Run.InfiniteDataLoader.get_next", "home.repos.pwc.inspect_result.zzshou_RCAM.Model.Run.accuracy", "home.repos.pwc.inspect_result.zzshou_RCAM.Model.Run.evaluate"], ["", "", "def", "train", "(", "args", ",", "train_datasets", ",", "model", ",", "optimizer", ",", "eval_dataset", ")", ":", "\n", "    ", "\"\"\" train the model \"\"\"", "\n", "\n", "train_iters", "=", "[", "]", "\n", "tr_batches", "=", "[", "]", "\n", "\n", "for", "_", ",", "train_dataset", "in", "enumerate", "(", "train_datasets", ")", ":", "\n", "        ", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "shuffle", "=", "True", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "train_iters", ".", "append", "(", "InfiniteDataLoader", "(", "train_dataloader", ")", ")", "\n", "tr_batches", ".", "append", "(", "len", "(", "train_dataloader", ")", ")", "\n", "\n", "## set sampling proportion", "\n", "", "total_n_tr_batches", "=", "sum", "(", "tr_batches", ")", "\n", "sampling_prob", "=", "[", "float", "(", "n_batches", ")", "/", "total_n_tr_batches", "for", "n_batches", "in", "tr_batches", "]", "\n", "\n", "if", "args", ".", "max_train_steps", ">", "0", ":", "\n", "        ", "total_steps", "=", "args", ".", "max_train_steps", "\n", "args", ".", "n_epoch", "=", "args", ".", "max_train_steps", "//", "(", "total_n_tr_batches", "//", "args", ".", "gradient_accumulation_steps", ")", "+", "1", "\n", "", "else", ":", "\n", "        ", "total_steps", "=", "total_n_tr_batches", "//", "args", ".", "gradient_accumulation_steps", "*", "args", ".", "n_epoch", "\n", "\n", "", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", "=", "total_steps", "//", "10", ",", "num_training_steps", "=", "total_steps", ")", "\n", "\n", "# Train!", "\n", "logger", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "train_dataset", ")", ")", "\n", "logger", ".", "info", "(", "\"  Num Epochs = %d\"", ",", "args", ".", "n_epoch", ")", "\n", "logger", ".", "info", "(", "\"  Gradient Accumulation steps = %d\"", ",", "args", ".", "gradient_accumulation_steps", ")", "\n", "logger", ".", "info", "(", "\"  Total optimization steps = %d\"", ",", "total_steps", ")", "\n", "\n", "global_step", "=", "0", "\n", "tr_loss", "=", "0.0", "\n", "best_eval_accuracy", "=", "0", "\n", "model", ".", "zero_grad", "(", ")", "\n", "train_iterator", "=", "trange", "(", "args", ".", "start_epoch", ",", "args", ".", "start_epoch", "+", "args", ".", "n_epoch", ",", "desc", "=", "\"Epoch\"", ")", "\n", "\n", "if", "args", ".", "do_eval", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "save_path", ")", "\n", "", "output_eval_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "\"eval_results.txt\"", ")", "\n", "with", "open", "(", "output_eval_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "\"***** Eval results per %d training steps *****\\n\"", "%", "args", ".", "evaluate_steps", ")", "\n", "\n", "# added here for reproductibility", "\n", "", "", "seed_torch", "(", "args", ".", "random_seed", ")", "\n", "\n", "for", "epoch", "in", "train_iterator", ":", "\n", "        ", "epoch_iterator", "=", "tqdm", "(", "range", "(", "total_n_tr_batches", ")", ",", "desc", "=", "\"Training\"", ")", "\n", "batch_time_avg", "=", "0.0", "\n", "train_accuracy", "=", "0", ";", "nb_train_examples", "=", "0", "\n", "\n", "for", "step", "in", "epoch_iterator", ":", "\n", "            ", "batch_start", "=", "time", ".", "time", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "# select task id", "\n", "task_id", "=", "np", ".", "argmax", "(", "np", ".", "random", ".", "multinomial", "(", "1", ",", "sampling_prob", ")", ")", "\n", "batch", "=", "train_iters", "[", "task_id", "]", ".", "get_next", "(", ")", "\n", "batch", "=", "tuple", "(", "t", ".", "to", "(", "args", ".", "device", ")", "for", "t", "in", "batch", ")", "\n", "logits", "=", "model", "(", "\n", "input_ids", "=", "batch", "[", "0", "]", ",", "\n", "attention_mask", "=", "batch", "[", "1", "]", ",", "\n", "token_type_ids", "=", "batch", "[", "2", "]", ",", "\n", "lengths", "=", "batch", "[", "3", "]", ",", "\n", ")", "\n", "labels", "=", "batch", "[", "4", "]", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "labels", ")", "\n", "\n", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "                ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "max_norm", "=", "args", ".", "max_grad_norm", ")", "\n", "\n", "tr_loss", "+=", "loss", ".", "item", "(", ")", "\n", "old_global_step", "=", "global_step", "\n", "if", "(", "step", "+", "1", ")", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "# Update learning rate schedule", "\n", "model", ".", "zero_grad", "(", ")", "\n", "global_step", "+=", "1", "\n", "\n", "batch_time_avg", "+=", "time", ".", "time", "(", ")", "-", "batch_start", "\n", "description", "=", "\"Avg. time per gradient updating: {:.4f}s, loss: {:.4f}\"", ".", "format", "(", "batch_time_avg", "/", "(", "step", "+", "1", ")", ",", "tr_loss", "/", "global_step", ")", "\n", "epoch_iterator", ".", "set_description", "(", "description", ")", "\n", "\n", "", "logits", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "tmp_train_accuracy", "=", "accuracy", "(", "logits", ",", "labels", ")", "\n", "train_accuracy", "+=", "tmp_train_accuracy", "\n", "nb_train_examples", "+=", "batch", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "\n", "if", "args", ".", "do_eval", ":", "\n", "                ", "if", "global_step", "!=", "old_global_step", "and", "global_step", "%", "args", ".", "evaluate_steps", "==", "0", ":", "\n", "                    ", "result", "=", "evaluate", "(", "args", ",", "eval_dataset", ",", "model", ",", "output_eval_file", ")", "\n", "\n", "# save the model having the best accuracy on dev dataset.", "\n", "if", "result", "[", "'eval_accuracy'", "]", ">", "best_eval_accuracy", ":", "\n", "                        ", "best_eval_accuracy", "=", "result", "[", "'eval_accuracy'", "]", "\n", "now_time", "=", "time", ".", "strftime", "(", "'%Y-%m-%d'", ",", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "torch", ".", "save", "(", "{", "\"model\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"name\"", ":", "args", ".", "bert_model", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "\"model-\"", "+", "now_time", "+", "\".pt\"", ")", ")", "\n", "logger", ".", "info", "(", "\"***** Better eval accuracy, save model successfully *****\"", ")", "\n", "\n", "", "", "", "if", "args", ".", "max_train_steps", ">", "0", "and", "global_step", ">", "args", ".", "max_train_steps", ":", "\n", "                ", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n", "", "", "train_accuracy", "=", "train_accuracy", "/", "nb_train_examples", "\n", "logger", ".", "info", "(", "\"After epoch {:}, train_accuracy = {:.2%}\"", ".", "format", "(", "epoch", ",", "train_accuracy", ")", ")", "\n", "\n", "if", "args", ".", "max_train_steps", ">", "0", "and", "global_step", ">", "args", ".", "max_train_steps", ":", "\n", "            ", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n", "", "", "return", "global_step", ",", "tr_loss", "/", "global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.Run.evaluate": [[184, 231], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logger.info", "logger.info", "logger.info", "tqdm.tqdm", "len", "model.eval", "tuple", "model.detach().cpu().numpy", "labels.detach().cpu().numpy.detach().cpu().numpy", "Run.accuracy", "batch[].size", "open", "logger.info", "logger.info", "logger.info", "writer.write", "writer.write", "torch.no_grad", "torch.no_grad", "model", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "criterion.item", "t.to", "model.detach().cpu", "labels.detach().cpu().numpy.detach().cpu", "str", "round", "str", "model.detach", "labels.detach().cpu().numpy.detach", "round"], "function", ["home.repos.pwc.inspect_result.zzshou_RCAM.Model.Run.accuracy"], ["", "def", "evaluate", "(", "args", ",", "eval_dataset", ",", "model", ",", "output_eval_file", ")", ":", "\n", "    ", "\"\"\" evaluate the model \"\"\"", "\n", "eval_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "eval_dataset", ",", "shuffle", "=", "False", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "\n", "# Eval!", "\n", "logger", ".", "info", "(", "\"***** Running evaluation *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "eval_dataset", ")", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "batch_size", ")", "\n", "\n", "eval_loss", ",", "eval_accuracy", "=", "0", ",", "0", "\n", "nb_eval_steps", ",", "nb_eval_examples", "=", "0", ",", "0", "\n", "\n", "for", "batch", "in", "tqdm", "(", "eval_dataloader", ",", "desc", "=", "\"Evaluating\"", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "batch", "=", "tuple", "(", "t", ".", "to", "(", "args", ".", "device", ")", "for", "t", "in", "batch", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", "=", "model", "(", "\n", "input_ids", "=", "batch", "[", "0", "]", ",", "\n", "attention_mask", "=", "batch", "[", "1", "]", ",", "\n", "token_type_ids", "=", "batch", "[", "2", "]", ",", "\n", "lengths", "=", "batch", "[", "3", "]", ",", "\n", ")", "\n", "labels", "=", "batch", "[", "4", "]", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "labels", ")", "\n", "eval_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "logits", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "tmp_eval_accuracy", "=", "accuracy", "(", "logits", ",", "labels", ")", "\n", "eval_accuracy", "+=", "tmp_eval_accuracy", "\n", "nb_eval_steps", "+=", "1", "\n", "nb_eval_examples", "+=", "batch", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "\n", "", "eval_loss", "=", "eval_loss", "/", "nb_eval_steps", "\n", "eval_accuracy", "=", "eval_accuracy", "/", "nb_eval_examples", "\n", "result", "=", "{", "\"eval_loss\"", ":", "eval_loss", ",", "\"eval_accuracy\"", ":", "eval_accuracy", "}", "\n", "\n", "# write eval results to txt file.", "\n", "with", "open", "(", "output_eval_file", ",", "\"a\"", ")", "as", "writer", ":", "\n", "        ", "logger", ".", "info", "(", "\"***** Eval results *****\"", ")", "\n", "logger", ".", "info", "(", "\"eval_loss = %.4f\"", ",", "eval_loss", ")", "\n", "logger", ".", "info", "(", "\"eval_accuracy = {:.2%}\"", ".", "format", "(", "eval_accuracy", ")", ")", "\n", "writer", ".", "write", "(", "\"eval_loss = %s\\n\"", "%", "str", "(", "round", "(", "eval_loss", ",", "4", ")", ")", ")", "\n", "writer", ".", "write", "(", "\"eval_accuracy = %s\\n\"", "%", "(", "str", "(", "round", "(", "eval_accuracy", "*", "100", ",", "2", ")", ")", "+", "'%'", ")", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.Run.test": [[233, 261], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logger.info", "logger.info", "logger.info", "tqdm.tqdm", "pandas.DataFrame().to_csv", "len", "model.eval", "tuple", "model.detach().cpu().numpy", "numpy.argmax", "predictions.extend", "os.path.join", "torch.no_grad", "torch.no_grad", "model", "pandas.DataFrame", "t.to", "model.detach().cpu", "model.detach"], "function", ["None"], ["", "def", "test", "(", "args", ",", "test_dataset", ",", "model", ")", ":", "\n", "    ", "\"\"\" test the model \"\"\"", "\n", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "shuffle", "=", "False", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "\n", "# Test!", "\n", "logger", ".", "info", "(", "\"***** Running test *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "test_dataset", ")", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "batch_size", ")", "\n", "\n", "predictions", "=", "[", "]", "\n", "\n", "for", "batch", "in", "tqdm", "(", "test_dataloader", ",", "desc", "=", "\"Testing\"", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "batch", "=", "tuple", "(", "t", ".", "to", "(", "args", ".", "device", ")", "for", "t", "in", "batch", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", "=", "model", "(", "\n", "input_ids", "=", "batch", "[", "0", "]", ",", "\n", "attention_mask", "=", "batch", "[", "1", "]", ",", "\n", "token_type_ids", "=", "batch", "[", "2", "]", ",", "\n", "lengths", "=", "batch", "[", "3", "]", ",", "\n", ")", "\n", "\n", "", "logits", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "prediction", "=", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "1", ")", "\n", "predictions", ".", "extend", "(", "prediction", ")", "\n", "\n", "# write predictions to csv file.", "\n", "", "pd", ".", "DataFrame", "(", "predictions", ")", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "\"test_predictions.csv\"", ")", ",", "header", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.CoAttention.ScaledDotProductAttention.__init__": [[19, 23], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.zzshou_RCAM.Model.Model.MultiChoiceModel.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.CoAttention.ScaledDotProductAttention.forward": [[24, 35], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "CoAttention.ScaledDotProductAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "k.transpose", "attn.masked_fill.masked_fill.masked_fill", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "attn", "=", "torch", ".", "matmul", "(", "q", "/", "self", ".", "temperature", ",", "k", ".", "transpose", "(", "2", ",", "3", ")", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "attn", "=", "attn", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "\n", "", "attn", "=", "self", ".", "dropout", "(", "F", ".", "softmax", "(", "attn", ",", "dim", "=", "-", "1", ")", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "attn", ",", "v", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.CoAttention.MultiHeadAttention.__init__": [[40, 56], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "CoAttention.ScaledDotProductAttention", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.zzshou_RCAM.Model.Model.MultiChoiceModel.__init__"], ["def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ",", "bias", "=", "False", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "d_k", "**", "0.5", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.CoAttention.MultiHeadAttention.forward": [[58, 88], ["CoAttention.MultiHeadAttention.w_qs().view", "CoAttention.MultiHeadAttention.w_ks().view", "CoAttention.MultiHeadAttention.w_vs().view", "CoAttention.MultiHeadAttention.attention", "CoAttention.MultiHeadAttention.transpose().contiguous().view", "CoAttention.MultiHeadAttention.dropout", "CoAttention.MultiHeadAttention.layer_norm", "CoAttention.MultiHeadAttention.size", "CoAttention.MultiHeadAttention.size", "CoAttention.MultiHeadAttention.size", "CoAttention.MultiHeadAttention.size", "CoAttention.MultiHeadAttention.transpose", "CoAttention.MultiHeadAttention.transpose", "CoAttention.MultiHeadAttention.transpose", "mask.unsqueeze.unsqueeze.unsqueeze", "CoAttention.MultiHeadAttention.fc", "CoAttention.MultiHeadAttention.w_qs", "CoAttention.MultiHeadAttention.w_ks", "CoAttention.MultiHeadAttention.w_vs", "CoAttention.MultiHeadAttention.transpose().contiguous", "CoAttention.MultiHeadAttention.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "sz_b", ",", "len_q", ",", "len_k", ",", "len_v", "=", "q", ".", "size", "(", "0", ")", ",", "q", ".", "size", "(", "1", ")", ",", "k", ".", "size", "(", "1", ")", ",", "v", ".", "size", "(", "1", ")", "\n", "\n", "residual", "=", "q", "\n", "\n", "# Pass through the pre-attention projection: b x lq x (n*dv)", "\n", "# Separate different heads: b x lq x n x dv", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "# Transpose for attention dot product: b x n x lq x dv", "\n", "q", ",", "k", ",", "v", "=", "q", ".", "transpose", "(", "1", ",", "2", ")", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ",", "v", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "# For head axis broadcasting.", "\n", "\n", "", "q", ",", "attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "mask", ")", "\n", "\n", "# Transpose to move the head dimension back: b x lq x n x dv", "\n", "# Combine the last two dimensions to concatenate all the heads together: b x lq x (n*dv)", "\n", "q", "=", "q", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "-", "1", ")", "\n", "q", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "q", ")", ")", "\n", "q", "+=", "residual", "\n", "\n", "q", "=", "self", ".", "layer_norm", "(", "q", ")", "\n", "\n", "return", "q", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.DataProcessor.SemEvalExample.__init__": [[18, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "article", ",", "choice_0", ",", "choice_1", ",", "choice_2", ",", "choice_3", ",", "choice_4", ",", "label", "=", "None", ")", ":", "\n", "        ", "self", ".", "article", "=", "article", "\n", "self", ".", "choices", "=", "(", "[", "\n", "choice_0", ",", "\n", "choice_1", ",", "\n", "choice_2", ",", "\n", "choice_3", ",", "\n", "choice_4", ",", "\n", "]", ")", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.DataProcessor.SemEvalExample.__str__": [[29, 31], ["DataProcessor.SemEvalExample.__repr__"], "methods", ["home.repos.pwc.inspect_result.zzshou_RCAM.Model.DataProcessor.SemEvalExample.__repr__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__repr__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.DataProcessor.SemEvalExample.__repr__": [[32, 46], ["attributes.append"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "attributes", "=", "[", "\n", "\"article: {}\"", ".", "format", "(", "self", ".", "article", ")", ",", "\n", "\"choice_0: {}\"", ".", "format", "(", "self", ".", "choices", "[", "0", "]", ")", ",", "\n", "\"choice_1: {}\"", ".", "format", "(", "self", ".", "choices", "[", "1", "]", ")", ",", "\n", "\"choice_2: {}\"", ".", "format", "(", "self", ".", "choices", "[", "2", "]", ")", ",", "\n", "\"choice_3: {}\"", ".", "format", "(", "self", ".", "choices", "[", "3", "]", ")", ",", "\n", "\"choice_4: {}\"", ".", "format", "(", "self", ".", "choices", "[", "4", "]", ")", ",", "\n", "]", "\n", "\n", "if", "self", ".", "label", "is", "not", "None", ":", "\n", "            ", "attributes", ".", "append", "(", "\"label: {}\"", ".", "format", "(", "self", ".", "label", ")", ")", "\n", "\n", "", "return", "\", \"", ".", "join", "(", "attributes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.DataProcessor.InputFeatures.__init__": [[49, 56], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "choices_features", ",", "length", ",", "label", ")", ":", "\n", "        ", "self", ".", "choices_features", "=", "[", "\n", "{", "\"input_ids\"", ":", "input_ids", ",", "\"input_mask\"", ":", "input_mask", ",", "\"segment_ids\"", ":", "segment_ids", "}", "\n", "for", "_", ",", "input_ids", ",", "input_mask", ",", "segment_ids", "in", "choices_features", "\n", "]", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.DataProcessor.read_recam": [[58, 109], ["os.path.exists", "path.replace", "path.replace", "get_wordnet_definition.add_wordnet_definition", "open", "jsonlines.Reader", "open", "jsonlines.Reader", "DataProcessor.SemEvalExample", "examples.append", "DataProcessor.SemEvalExample", "examples.append", "line[].replace", "line[].replace", "line[].replace", "line[].replace", "line[].replace", "int", "int", "line[].replace", "line[].replace", "line[].replace", "line[].replace", "line[].replace"], "function", ["home.repos.pwc.inspect_result.zzshou_RCAM.Model.get_wordnet_definition.add_wordnet_definition"], ["", "", "def", "read_recam", "(", "path", ",", "is_labeling", ",", "add_definition", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Parameters\n    ----------\n    path : str\n        data path.\n        \n    Returns\n    -------\n    examples : list\n        list of object.\n\n    \"\"\"", "\n", "if", "add_definition", ":", "\n", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "path", ".", "replace", "(", "'.jsonl'", ",", "'-wordnet.jsonl'", ")", ")", ":", "\n", "            ", "add_wordnet_definition_path", "=", "path", ".", "replace", "(", "'.jsonl'", ",", "'-wordnet.jsonl'", ")", "\n", "", "else", ":", "\n", "            ", "add_wordnet_definition_path", "=", "add_wordnet_definition", "(", "path", ")", "\n", "\n", "", "with", "open", "(", "add_wordnet_definition_path", ",", "mode", "=", "'r'", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "            ", "reader", "=", "jsonlines", ".", "Reader", "(", "f", ")", "\n", "examples", "=", "[", "]", "\n", "for", "line", "in", "reader", ":", "\n", "                ", "example", "=", "SemEvalExample", "(", "\n", "article", "=", "line", "[", "'article'", "]", ",", "\n", "choice_0", "=", "line", "[", "'question'", "]", ".", "replace", "(", "'@placeholder'", ",", "line", "[", "'option_0'", "]", "[", "'ans'", "]", ")", "+", "'##SEP##'", "+", "line", "[", "'option_0'", "]", "[", "'definitions'", "]", ",", "\n", "choice_1", "=", "line", "[", "'question'", "]", ".", "replace", "(", "'@placeholder'", ",", "line", "[", "'option_1'", "]", "[", "'ans'", "]", ")", "+", "'##SEP##'", "+", "line", "[", "'option_1'", "]", "[", "'definitions'", "]", ",", "\n", "choice_2", "=", "line", "[", "'question'", "]", ".", "replace", "(", "'@placeholder'", ",", "line", "[", "'option_2'", "]", "[", "'ans'", "]", ")", "+", "'##SEP##'", "+", "line", "[", "'option_2'", "]", "[", "'definitions'", "]", ",", "\n", "choice_3", "=", "line", "[", "'question'", "]", ".", "replace", "(", "'@placeholder'", ",", "line", "[", "'option_3'", "]", "[", "'ans'", "]", ")", "+", "'##SEP##'", "+", "line", "[", "'option_3'", "]", "[", "'definitions'", "]", ",", "\n", "choice_4", "=", "line", "[", "'question'", "]", ".", "replace", "(", "'@placeholder'", ",", "line", "[", "'option_4'", "]", "[", "'ans'", "]", ")", "+", "'##SEP##'", "+", "line", "[", "'option_4'", "]", "[", "'definitions'", "]", ",", "\n", "label", "=", "int", "(", "line", "[", "'label'", "]", ")", "if", "is_labeling", "else", "None", ",", "\n", ")", "\n", "examples", ".", "append", "(", "example", ")", "\n", "", "return", "examples", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "path", ",", "mode", "=", "'r'", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "            ", "reader", "=", "jsonlines", ".", "Reader", "(", "f", ")", "\n", "examples", "=", "[", "]", "\n", "for", "line", "in", "reader", ":", "\n", "                ", "example", "=", "SemEvalExample", "(", "\n", "article", "=", "line", "[", "'article'", "]", ",", "\n", "choice_0", "=", "line", "[", "'question'", "]", ".", "replace", "(", "'@placeholder'", ",", "line", "[", "'option_0'", "]", ")", ",", "\n", "choice_1", "=", "line", "[", "'question'", "]", ".", "replace", "(", "'@placeholder'", ",", "line", "[", "'option_1'", "]", ")", ",", "\n", "choice_2", "=", "line", "[", "'question'", "]", ".", "replace", "(", "'@placeholder'", ",", "line", "[", "'option_2'", "]", ")", ",", "\n", "choice_3", "=", "line", "[", "'question'", "]", ".", "replace", "(", "'@placeholder'", ",", "line", "[", "'option_3'", "]", ")", ",", "\n", "choice_4", "=", "line", "[", "'question'", "]", ".", "replace", "(", "'@placeholder'", ",", "line", "[", "'option_4'", "]", ")", ",", "\n", "label", "=", "int", "(", "line", "[", "'label'", "]", ")", "if", "is_labeling", "else", "None", ",", "\n", ")", "\n", "examples", ".", "append", "(", "example", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.DataProcessor.convert_examples_to_features": [[111, 152], ["tqdm.tqdm", "enumerate", "tokenizer.tokenize", "enumerate", "features.append", "tokenizer.tokenize", "tokenizer.tokenize", "DataProcessor._truncate_seq_pair", "tokenizer.convert_tokens_to_ids", "choices_features.append", "DataProcessor.InputFeatures", "len", "choice.split", "len", "len", "len", "len", "len", "choice.split", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.zzshou_RCAM.Model.DataProcessor._truncate_seq_pair"], ["", "", "", "def", "convert_examples_to_features", "(", "examples", ",", "tokenizer", ",", "max_seq_len", ")", ":", "\n", "    ", "\"\"\"Loads a data file into a list of `InputBatch`s.\"\"\"", "\n", "\n", "features", "=", "[", "]", "\n", "for", "example_index", ",", "example", "in", "tqdm", "(", "enumerate", "(", "examples", ")", ")", ":", "\n", "\n", "        ", "article_tokens", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "article", ")", "\n", "choices_features", "=", "[", "]", "\n", "\n", "for", "choice_index", ",", "choice", "in", "enumerate", "(", "example", ".", "choices", ")", ":", "\n", "            ", "if", "len", "(", "choice", ".", "split", "(", "'##SEP##'", ")", ")", ">", "1", ":", "\n", "                ", "choice", ",", "definition", "=", "choice", ".", "split", "(", "'##SEP##'", ")", "\n", "", "else", ":", "\n", "                ", "definition", "=", "''", "\n", "", "choice_tokens", "=", "tokenizer", ".", "tokenize", "(", "choice", ")", "\n", "definition_tokens", "=", "tokenizer", ".", "tokenize", "(", "definition", ")", "\n", "_truncate_seq_pair", "(", "article_tokens", ",", "choice_tokens", ",", "definition_tokens", ",", "max_seq_len", "-", "3", ")", "\n", "\n", "length", "=", "len", "(", "article_tokens", ")", "+", "1", "\n", "tokens", "=", "[", "\"[CLS]\"", "]", "+", "article_tokens", "+", "[", "\"[SEP]\"", "]", "+", "choice_tokens", "+", "definition_tokens", "+", "[", "\"[SEP]\"", "]", "\n", "segment_ids", "=", "[", "0", "]", "*", "(", "length", "+", "1", ")", "+", "[", "1", "]", "*", "(", "len", "(", "choice_tokens", ")", "+", "len", "(", "definition_tokens", ")", "+", "1", ")", "\n", "\n", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "padding", "=", "[", "0", "]", "*", "(", "max_seq_len", "-", "len", "(", "input_ids", ")", ")", "\n", "input_ids", "+=", "padding", "\n", "input_mask", "+=", "padding", "\n", "segment_ids", "+=", "padding", "\n", "\n", "assert", "len", "(", "input_ids", ")", "==", "max_seq_len", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_len", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_len", "\n", "\n", "choices_features", ".", "append", "(", "(", "tokens", ",", "input_ids", ",", "input_mask", ",", "segment_ids", ")", ")", "\n", "\n", "", "label", "=", "example", ".", "label", "\n", "features", ".", "append", "(", "InputFeatures", "(", "choices_features", "=", "choices_features", ",", "length", "=", "length", ",", "label", "=", "label", ")", ")", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.DataProcessor._truncate_seq_pair": [[154, 175], ["len", "len", "len", "definiton_token.pop", "len", "len", "len", "tokens_a.pop", "len", "len", "len", "definiton_token.pop", "tokens_a.pop", "print"], "function", ["None"], ["", "def", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "definiton_token", ",", "max_length", ")", ":", "\n", "    ", "\"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"", "\n", "# This is a simple heuristic which will always truncate the longer sequence", "\n", "# one token at a time. This makes more sense than truncating an equal percent", "\n", "# of tokens from each, since if one sequence is very short then each token", "\n", "# that's truncated likely contains more information than a longer sequence.", "\n", "\n", "while", "True", ":", "\n", "        ", "total_length", "=", "len", "(", "tokens_a", ")", "+", "len", "(", "tokens_b", ")", "+", "len", "(", "definiton_token", ")", "\n", "\n", "if", "total_length", "<=", "max_length", ":", "\n", "            ", "break", "\n", "", "if", "len", "(", "definiton_token", ")", ">", "len", "(", "tokens_b", ")", ":", "\n", "            ", "definiton_token", ".", "pop", "(", ")", "\n", "", "elif", "len", "(", "tokens_a", ")", ">", "(", "len", "(", "definiton_token", ")", "+", "len", "(", "definiton_token", ")", ")", ":", "\n", "            ", "tokens_a", ".", "pop", "(", ")", "\n", "", "elif", "len", "(", "definiton_token", ")", ">", "0", ":", "\n", "            ", "definiton_token", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "            ", "tokens_a", ".", "pop", "(", ")", "\n", "print", "(", "'option is longer than article'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.DataProcessor.select_field": [[177, 179], ["None"], "function", ["None"], ["", "", "", "def", "select_field", "(", "features", ",", "field", ")", ":", "\n", "    ", "return", "[", "[", "choice", "[", "field", "]", "for", "choice", "in", "feature", ".", "choices_features", "]", "for", "feature", "in", "features", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.DataProcessor.convert_features_to_dataset": [[181, 191], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "DataProcessor.select_field", "DataProcessor.select_field", "DataProcessor.select_field", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset"], "function", ["home.repos.pwc.inspect_result.zzshou_RCAM.Model.DataProcessor.select_field", "home.repos.pwc.inspect_result.zzshou_RCAM.Model.DataProcessor.select_field", "home.repos.pwc.inspect_result.zzshou_RCAM.Model.DataProcessor.select_field"], ["", "def", "convert_features_to_dataset", "(", "features", ",", "is_labeling", ")", ":", "\n", "    ", "all_input_ids", "=", "torch", ".", "tensor", "(", "select_field", "(", "features", ",", "\"input_ids\"", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "select_field", "(", "features", ",", "\"input_mask\"", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "select_field", "(", "features", ",", "\"segment_ids\"", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_length", "=", "torch", ".", "tensor", "(", "[", "f", ".", "length", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "is_labeling", ":", "\n", "        ", "all_label", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "TensorDataset", "(", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_length", ",", "all_label", ")", "\n", "", "else", ":", "\n", "        ", "return", "TensorDataset", "(", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.Config.arg_conf": [[12, 56], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "print", "argparse.ArgumentParser.parse_known_args", "vars"], "function", ["None"], ["def", "arg_conf", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'SemEval Task 4'", ")", "\n", "\n", "# parameters of environment", "\n", "parser", ".", "add_argument", "(", "'-cuda'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"which device, default gpu.\"", ")", "\n", "parser", ".", "add_argument", "(", "'-random_seed'", ",", "type", "=", "int", ",", "default", "=", "2021", ",", "help", "=", "'set the random seed so that we can reporduce the result.'", ")", "\n", "\n", "# parameters of data processor", "\n", "parser", ".", "add_argument", "(", "'-train_data_paths'", ",", "nargs", "=", "'+'", ",", "default", "=", "None", ",", "help", "=", "'data paths of multi train datasets(could be used for multi-task learning).'", ")", "\n", "parser", ".", "add_argument", "(", "'-dev_data_path'", ",", "default", "=", "None", ",", "help", "=", "'data path of eval dataset.'", ")", "\n", "parser", ".", "add_argument", "(", "'-test_data_path'", ",", "default", "=", "None", ",", "help", "=", "'data path of test dataset.'", ")", "\n", "parser", ".", "add_argument", "(", "'-n_choice'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of choices.'", ")", "\n", "parser", ".", "add_argument", "(", "'-max_seq_len'", ",", "type", "=", "int", ",", "default", "=", "150", ",", "help", "=", "'max sequence length of article + question + definition.'", ")", "\n", "parser", ".", "add_argument", "(", "'-add_definition'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if add definition from WordNet, default False'", ")", "\n", "\n", "# parameters of model", "\n", "parser", ".", "add_argument", "(", "'-checkpoint'", ",", "default", "=", "None", ",", "help", "=", "'if use fine-tuned bert model, please enter the checkpoint path.'", ")", "\n", "parser", ".", "add_argument", "(", "'-bert_model'", ",", "default", "=", "None", ",", "help", "=", "'model name can be accessed from huggingface'", ")", "\n", "# parameters of co-attention", "\n", "parser", ".", "add_argument", "(", "'-n_layer'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'num of layer in co-attention'", ")", "\n", "parser", ".", "add_argument", "(", "'-n_head'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'num of head in co-attention'", ")", "\n", "parser", ".", "add_argument", "(", "'-d_k'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'dimension of key and query in co-attention'", ")", "\n", "parser", ".", "add_argument", "(", "'-d_v'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'dimension of value in co-attention'", ")", "\n", "parser", ".", "add_argument", "(", "'-dropout'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'dropout in co-attention'", ")", "\n", "\n", "# parameters of training", "\n", "parser", ".", "add_argument", "(", "'-do_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if training, default False'", ")", "\n", "parser", ".", "add_argument", "(", "'-do_eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if evaluating, default False'", ")", "\n", "parser", ".", "add_argument", "(", "'-do_test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if testing, default False'", ")", "\n", "parser", ".", "add_argument", "(", "'-evaluate_steps'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'evaluate on the dev set at every xxx evaluate_steps.'", ")", "\n", "parser", ".", "add_argument", "(", "'-max_train_steps'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'If > 0: set total number of training steps to perform. Override num_train_epochs.'", ")", "\n", "parser", ".", "add_argument", "(", "'-n_epoch'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'-batch_size'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of examples per batch'", ")", "\n", "parser", ".", "add_argument", "(", "'-gradient_accumulation_steps'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'num of gradient_accumulation_steps'", ")", "\n", "parser", ".", "add_argument", "(", "\"-max_grad_norm\"", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "\"Max gradient norm.\"", ")", "\n", "parser", ".", "add_argument", "(", "'-weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'regularize parameters'", ")", "\n", "parser", ".", "add_argument", "(", "'-lr'", ",", "type", "=", "float", ",", "default", "=", "5e-6", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'-save_path'", ",", "default", "=", "None", ",", "help", "=", "'model save path, evaluation save path and prediction save path.'", ")", "\n", "\n", "# args = parser.parse_args()", "\n", "args", "=", "parser", ".", "parse_known_args", "(", ")", "[", "0", "]", "\n", "\n", "print", "(", "vars", "(", "args", ")", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.Model.MultiChoiceModel.__init__": [[16, 35], ["torch.Module.__init__", "Model.MultiChoiceModel.model.parameters", "torch.Dropout", "torch.Dropout", "torch.LayerNorm", "torch.LayerNorm", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "CoAttention.MultiHeadAttention", "range"], "methods", ["home.repos.pwc.inspect_result.zzshou_RCAM.Model.Model.MultiChoiceModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "args", ",", "is_requires_grad", ")", ":", "\n", "        ", "super", "(", "MultiChoiceModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "#bert encoder", "\n", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "is_requires_grad", "\n", "", "self", ".", "d_hid", "=", "model", ".", "config", ".", "hidden_size", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "self", ".", "d_hid", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "[", "\n", "MultiHeadAttention", "(", "\n", "n_head", "=", "self", ".", "args", ".", "n_head", ",", "\n", "d_model", "=", "self", ".", "d_hid", ",", "\n", "d_k", "=", "self", ".", "args", ".", "d_k", ",", "\n", "d_v", "=", "self", ".", "args", ".", "d_v", ",", "\n", "dropout", "=", "self", ".", "args", ".", "dropout", "\n", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "args", ".", "n_layer", ")", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "d_hid", "*", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.Model.MultiChoiceModel.forward": [[36, 116], ["input_ids.view.view.view", "attention_mask.view.view.view", "token_type_ids.view.view.view", "Model.MultiChoiceModel.model", "Model.MultiChoiceModel.dropout", "Model.MultiChoiceModel.layer_norm", "lengths.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "max", "create_a_to_c_mask().to", "create_c_to_a_mask().to", "torch.AvgPool1d", "torch.AvgPool1d", "torch.AvgPool1d.squeeze", "torch.AvgPool1d", "torch.AvgPool1d", "torch.AvgPool1d.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Model.MultiChoiceModel.classifier", "logits.view.view.view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "co_attention_layer", "co_attention_layer", "lengths.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "min", "numpy.zeros", "numpy.ones", "mask.extend", "numpy.zeros", "numpy.ones", "mask.extend", "Model.MultiChoiceModel.forward.create_a_to_c_mask"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "input_ids", "=", "None", ",", "\n", "attention_mask", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "\n", "inputs_embeds", "=", "None", ",", "\n", "lengths", "=", "None", ",", "# record the length of each example article, and use it for mask when doing co-attention ", "\n", ")", ":", "\n", "\n", "        ", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "max_seq_len", ")", "#(batch*n_choice, max_seq_len)", "\n", "attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "max_seq_len", ")", "#(batch*n_choice, max_seq_len)", "\n", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "max_seq_len", ")", "#(batch*n_choice, max_seq_len)", "\n", "\n", "# feed the input to encoder and get the embedding of each token", "\n", "outputs", "=", "self", ".", "model", "(", "\n", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ",", "\n", "output_hidden_states", "=", "False", ",", "\n", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "#(batch*n_choice, max_seq_len, d_hid)", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ")", "\n", "sequence_output", "=", "self", ".", "layer_norm", "(", "sequence_output", ")", "\n", "\n", "lengths", "=", "lengths", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "max_a_len", "=", "max", "(", "lengths", ")", "#maximum length of article", "\n", "max_c_len", "=", "self", ".", "args", ".", "max_seq_len", "-", "min", "(", "lengths", ")", "-", "2", "#maximum length of choice", "\n", "article_output", "=", "sequence_output", "[", ":", ",", ":", "max_a_len", ",", ":", "]", "#take out article_output according to the maximum length of article", "\n", "choice_output", "=", "sequence_output", "[", ":", ",", "-", "(", "max_c_len", "+", "1", ")", ":", "-", "1", ",", ":", "]", "#take out choice_output according to the maximum length of choice", "\n", "\n", "def", "create_a_to_c_mask", "(", "lengths", ",", "n_choice", ")", ":", "\n", "            ", "\"\"\" Generate article_to_choice attention mask according to the length of article in each example  \"\"\"", "\n", "mask", "=", "[", "]", "\n", "for", "i", "in", "lengths", ":", "\n", "                ", "a", "=", "np", ".", "zeros", "(", "(", "max_c_len", ",", "max_a_len", ")", ")", "\n", "a", "[", ":", ",", ":", "i", "]", "=", "np", ".", "ones", "(", "(", "max_c_len", ",", "i", ")", ")", "\n", "a", "=", "[", "a", "]", "*", "n_choice", "\n", "mask", ".", "extend", "(", "a", ")", "\n", "", "return", "torch", ".", "tensor", "(", "mask", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "def", "create_c_to_a_mask", "(", "lengths", ",", "n_choice", ")", ":", "\n", "            ", "\"\"\" Generate choice_to_article attention mask according to the length of article in each example  \"\"\"", "\n", "mask", "=", "[", "]", "\n", "for", "i", "in", "lengths", ":", "\n", "                ", "a", "=", "np", ".", "zeros", "(", "(", "max_a_len", ",", "max_c_len", ")", ")", "\n", "a", "[", ":", ",", "max_c_len", "-", "(", "self", ".", "args", ".", "max_seq_len", "-", "2", "-", "i", ")", ":", "]", "=", "np", ".", "ones", "(", "(", "max_a_len", ",", "self", ".", "args", ".", "max_seq_len", "-", "2", "-", "i", ")", ")", "\n", "a", "=", "[", "a", "]", "*", "n_choice", "\n", "mask", ".", "extend", "(", "a", ")", "\n", "", "return", "torch", ".", "tensor", "(", "mask", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "a_to_c_mask", "=", "create_a_to_c_mask", "(", "lengths", ",", "n_choice", "=", "self", ".", "args", ".", "n_choice", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "#(batch*n_choice, max_c_len, max_a_len)", "\n", "c_to_a_mask", "=", "create_c_to_a_mask", "(", "lengths", ",", "n_choice", "=", "self", ".", "args", ".", "n_choice", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "#(batch*n_choice, max_c_len, max_a_len)", "\n", "\n", "# compute co-attention between article and choice", "\n", "for", "co_attention_layer", "in", "self", ".", "layer_stack", ":", "\n", "            ", "choice_output", ",", "_", "=", "co_attention_layer", "(", "q", "=", "choice_output", ",", "k", "=", "article_output", ",", "v", "=", "article_output", ",", "mask", "=", "a_to_c_mask", ")", "\n", "article_output", ",", "_", "=", "co_attention_layer", "(", "q", "=", "article_output", ",", "k", "=", "choice_output", ",", "v", "=", "choice_output", ",", "mask", "=", "c_to_a_mask", ")", "\n", "\n", "# use mean pooling to pool the sequence output of co-attention", "\n", "", "AvgPooling1", "=", "nn", ".", "AvgPool1d", "(", "choice_output", ".", "shape", "[", "1", "]", ")", "\n", "choice_to_article", "=", "AvgPooling1", "(", "choice_output", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "#(batch*n_choice, d_hid)", "\n", "\n", "AvgPooling2", "=", "nn", ".", "AvgPool1d", "(", "article_output", ".", "shape", "[", "1", "]", ")", "\n", "article_to_choice", "=", "AvgPooling2", "(", "article_output", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "#(batch*n_choice, d_hid)", "\n", "\n", "# concatenate the two pooled output", "\n", "fuze", "=", "torch", ".", "cat", "(", "(", "choice_to_article", ",", "article_to_choice", ")", ",", "1", ")", "#(batch*n_choice, d_hid*2)", "\n", "\n", "# compute the logits", "\n", "logits", "=", "self", ".", "classifier", "(", "fuze", ")", "# (batch*n_choice, 1)", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "n_choice", ")", "# (batch, n_choice)", "\n", "\n", "return", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.get_wordnet_definition.get_wordnet_definition": [[168, 183], ["question.split", "question.split.index", "nltk.pos_tag", "nltk.corpus.wordnet.synsets", "nltk.corpus.wordnet.synsets", "len", "print", "item.definition", "len", "nltk.corpus.wordnet.synsets"], "function", ["None"], ["def", "get_wordnet_definition", "(", "question", ",", "word_str", ")", ":", "\n", "    ", "text", "=", "question", ".", "split", "(", "' '", ")", "\n", "index", "=", "text", ".", "index", "(", "'@placeholder'", ")", "\n", "text", "[", "index", "]", "=", "word_str", "\n", "pos_tag", "=", "nltk", ".", "pos_tag", "(", "text", ")", "[", "index", "]", "\n", "if", "pos_tag", "[", "1", "]", "in", "pos_dir", ":", "\n", "        ", "sys", "=", "wn", ".", "synsets", "(", "word_str", ",", "pos_dir", "[", "pos_tag", "[", "1", "]", "]", ")", "\n", "if", "len", "(", "sys", ")", "==", "0", ":", "\n", "            ", "sys", "=", "wn", ".", "synsets", "(", "word_str", ")", "\n", "", "", "else", ":", "\n", "        ", "sys", "=", "wn", ".", "synsets", "(", "word_str", ")", "\n", "", "if", "len", "(", "sys", ")", "==", "0", ":", "\n", "        ", "print", "(", "question", ",", "word_str", ")", "\n", "", "definitions", "=", "[", "item", ".", "definition", "(", ")", "for", "item", "in", "sys", "]", "\n", "return", "definitions", "\n", "\n"]], "home.repos.pwc.inspect_result.zzshou_RCAM.Model.get_wordnet_definition.add_wordnet_definition": [[185, 208], ["file.replace", "open", "open", "tqdm.tqdm", "json.loads", "get_wordnet_definition.get_wordnet_definition", "get_wordnet_definition.get_wordnet_definition", "get_wordnet_definition.get_wordnet_definition", "get_wordnet_definition.get_wordnet_definition", "get_wordnet_definition.get_wordnet_definition", "wf.write", "json.dumps"], "function", ["home.repos.pwc.inspect_result.zzshou_RCAM.Model.get_wordnet_definition.get_wordnet_definition", "home.repos.pwc.inspect_result.zzshou_RCAM.Model.get_wordnet_definition.get_wordnet_definition", "home.repos.pwc.inspect_result.zzshou_RCAM.Model.get_wordnet_definition.get_wordnet_definition", "home.repos.pwc.inspect_result.zzshou_RCAM.Model.get_wordnet_definition.get_wordnet_definition", "home.repos.pwc.inspect_result.zzshou_RCAM.Model.get_wordnet_definition.get_wordnet_definition"], ["", "def", "add_wordnet_definition", "(", "file", ")", ":", "\n", "    ", "output_file", "=", "file", ".", "replace", "(", "'.jsonl'", ",", "'-wordnet.jsonl'", ")", "\n", "with", "open", "(", "file", ",", "mode", "=", "'r'", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ",", "open", "(", "output_file", ",", "mode", "=", "'w'", ",", "encoding", "=", "\"utf8\"", ")", "as", "wf", ":", "\n", "        ", "for", "line", "in", "tqdm", "(", "f", ")", ":", "\n", "            ", "data", "=", "json", ".", "loads", "(", "line", ")", "\n", "question", "=", "data", "[", "'question'", "]", "\n", "option", "=", "data", "[", "'option_0'", "]", "\n", "definitions", "=", "get_wordnet_definition", "(", "question", ",", "option", ")", "\n", "data", "[", "'option_0'", "]", "=", "{", "'ans'", ":", "option", ",", "'definitions'", ":", "'.'", ".", "join", "(", "definitions", ")", "}", "\n", "option", "=", "data", "[", "'option_1'", "]", "\n", "definitions", "=", "get_wordnet_definition", "(", "question", ",", "option", ")", "\n", "data", "[", "'option_1'", "]", "=", "{", "'ans'", ":", "option", ",", "'definitions'", ":", "'.'", ".", "join", "(", "definitions", ")", "}", "\n", "option", "=", "data", "[", "'option_2'", "]", "\n", "definitions", "=", "get_wordnet_definition", "(", "question", ",", "option", ")", "\n", "data", "[", "'option_2'", "]", "=", "{", "'ans'", ":", "option", ",", "'definitions'", ":", "'.'", ".", "join", "(", "definitions", ")", "}", "\n", "option", "=", "data", "[", "'option_3'", "]", "\n", "definitions", "=", "get_wordnet_definition", "(", "question", ",", "option", ")", "\n", "data", "[", "'option_3'", "]", "=", "{", "'ans'", ":", "option", ",", "'definitions'", ":", "'.'", ".", "join", "(", "definitions", ")", "}", "\n", "option", "=", "data", "[", "'option_4'", "]", "\n", "definitions", "=", "get_wordnet_definition", "(", "question", ",", "option", ")", "\n", "data", "[", "'option_4'", "]", "=", "{", "'ans'", ":", "option", ",", "'definitions'", ":", "'.'", ".", "join", "(", "definitions", ")", "}", "\n", "wf", ".", "write", "(", "json", ".", "dumps", "(", "data", ")", "+", "'\\n'", ")", "\n", "", "", "return", "output_file", "\n", "\n"]]}