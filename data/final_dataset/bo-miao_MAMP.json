{"home.repos.pwc.inspect_result.bo-miao_MAMP.None.parser_parameters.train_argument_parser": [[8, 43], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "train_argument_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MAMP'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--proc_name'", ",", "type", "=", "str", ",", "default", "=", "'VOS'", ",", "\n", "help", "=", "'proc name'", ")", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "type", "=", "str", ",", "default", "=", "'MAMP'", ",", "\n", "help", "=", "'arch name'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_corr_radius'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "\n", "help", "=", "'local corr radius in training'", ")", "\n", "parser", ".", "add_argument", "(", "'--ref_num'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'num of frames in one forward'", ")", "\n", "parser", ".", "add_argument", "(", "'--is_amp'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use mixed precision'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'image size'", ")", "\n", "\n", "# Data options", "\n", "parser", ".", "add_argument", "(", "'--datapath'", ",", "default", "=", "'../dataset/YOUTUBE/all'", ",", "\n", "help", "=", "'Data path for Kinetics'", ")", "\n", "parser", ".", "add_argument", "(", "'--savepath'", ",", "type", "=", "str", ",", "default", "=", "'ckpt'", ",", "\n", "help", "=", "'Path for checkpoints and logs'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Checkpoint file to resume'", ")", "\n", "\n", "# Training options", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "35", ",", "\n", "help", "=", "'number of epochs to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--bsize'", ",", "type", "=", "int", ",", "default", "=", "24", ",", "\n", "help", "=", "'batch size for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--worker'", ",", "type", "=", "int", ",", "default", "=", "24", ",", "\n", "help", "=", "'number of dataloader threads'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.parser_parameters.test_argument_parser": [[45, 67], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "test_argument_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MAMP'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "type", "=", "str", ",", "default", "=", "'MAMP'", ",", "\n", "help", "=", "'arch name'", ")", "\n", "parser", ".", "add_argument", "(", "'--memory_length'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--pad_divisible'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'pad images to be divisible by n'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_corr_radius'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "\n", "help", "=", "'local corr radius in testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--optical_flow_warp'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--datapath'", ",", "help", "=", "'Data path for Davis'", ")", "\n", "parser", ".", "add_argument", "(", "'--savepath'", ",", "type", "=", "str", ",", "default", "=", "'ckpt'", ",", "\n", "help", "=", "'Path for checkpoints and logs'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Checkpoint file to resume'", ")", "\n", "parser", ".", "add_argument", "(", "'--proc_name'", ",", "type", "=", "str", ",", "default", "=", "'VOS'", ",", "\n", "help", "=", "'proc name'", ")", "\n", "parser", ".", "add_argument", "(", "'--is_amp'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use mixed precision'", ")", "\n", "\n", "return", "parser", "\n", "", ""]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.train.main": [[36, 96], ["os.makedirs", "os.makedirs", "functions.setup_logger", "torch.utils.tensorboard.SummaryWriter", "sorted", "setproctitle.setproctitle", "functional.train_dataloader", "torch.utils.data.DataLoader", "models.mamp.MAMP().cuda", "torch.optim.Adam", "functions.setup_logger.info", "GradScaler", "functions.setup_logger.info", "time.time", "nn.DataParallel().cuda", "range", "functions.setup_logger.info", "os.path.join", "os.path.join", "os.path.join", "vars().items", "functions.setup_logger.info", "functional.train_image_folder", "nn.DataParallel().cuda.parameters", "os.path.isfile", "functions.setup_logger.info", "train.train", "functional.train_dataloader", "torch.utils.data.DataLoader", "models.mamp.MAMP", "sum", "functions.setup_logger.info", "torch.load", "nn.DataParallel().cuda.load_state_dict", "torch.optim.Adam.load_state_dict", "functions.setup_logger.info", "functions.setup_logger.info", "functions.setup_logger.info", "nn.DataParallel", "functional.train_image_folder", "vars", "str", "GradScaler.load_state_dict", "str", "p.data.nelement", "time.time", "nn.DataParallel().cuda.parameters"], "function", ["home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.setup_logger", "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TrainLoader.train_dataloader", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.train.train", "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TrainLoader.train_dataloader"], ["def", "main", "(", ")", ":", "\n", "    ", "args", ".", "training", "=", "True", "\n", "proc_name", "=", "args", ".", "proc_name", "\n", "os", ".", "makedirs", "(", "args", ".", "savepath", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "proc_name", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "log", "=", "setup_logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "proc_name", ",", "'training.log'", ")", ")", "\n", "writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "'runs'", ",", "proc_name", ")", ")", "\n", "\n", "for", "key", ",", "value", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "log", ".", "info", "(", "str", "(", "key", ")", "+", "': '", "+", "str", "(", "value", ")", ")", "\n", "", "setproctitle", ".", "setproctitle", "(", "proc_name", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "TrainData", "=", "TrainLoader", ".", "train_dataloader", "(", "args", ".", "datapath", ",", "args", ".", "ref_num", ")", "\n", "TrainImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TrainLoader", ".", "train_image_folder", "(", "args", ".", "datapath", ",", "TrainData", ",", "args", ",", "True", ")", ",", "\n", "batch_size", "=", "args", ".", "bsize", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "worker", ",", "drop_last", "=", "True", "\n", ")", "\n", "\n", "model", "=", "MAMP", "(", "args", ")", ".", "cuda", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "log", ".", "info", "(", "'Number of model parameters: {}'", ".", "format", "(", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", ")", "\n", "\n", "scaler", "=", "GradScaler", "(", "enabled", "=", "args", ".", "is_amp", ")", "\n", "log", ".", "info", "(", "\"AMP SWITCH STATUS IS {}\"", ".", "format", "(", "args", ".", "is_amp", ")", ")", "\n", "\n", "start_epoch", "=", "0", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "if", "args", ".", "is_amp", ":", "\n", "                ", "scaler", ".", "load_state_dict", "(", "checkpoint", "[", "'scaler'", "]", ")", "\n", "", "log", ".", "info", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "\"=> No checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "log", ".", "info", "(", "\"=> Will start from scratch.\"", ")", "\n", "", "", "else", ":", "\n", "        ", "log", ".", "info", "(", "'=> No checkpoint file. Start from scratch.'", ")", "\n", "\n", "", "start_full_time", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "train", "(", "TrainImgLoader", ",", "model", ",", "optimizer", ",", "scaler", ",", "log", ",", "writer", ",", "epoch", ")", "\n", "\n", "TrainData", "=", "TrainLoader", ".", "train_dataloader", "(", "args", ".", "datapath", ",", "args", ".", "ref_num", ")", "\n", "TrainImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TrainLoader", ".", "train_image_folder", "(", "args", ".", "datapath", ",", "TrainData", ",", "args", ",", "True", ")", ",", "\n", "batch_size", "=", "args", ".", "bsize", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "worker", ",", "drop_last", "=", "True", "\n", ")", "\n", "\n", "", "log", ".", "info", "(", "'full training time = {:.2f} Hours'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start_full_time", ")", "/", "3600", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.train.train": [[99, 164], ["functions.AverageMeter", "len", "time.perf_counter", "enumerate", "os.path.join", "log.info", "torch.save", "torch.save", "model.train", "train.adjust_lr", "model.module.dropout2d_lab", "images_lab[].size", "model", "F.interpolate", "F.smooth_l1_loss", "optimizer.zero_grad", "writer.add_scalar", "time.perf_counter", "os.path.join", "lab.clone().cuda", "r.cuda", "F.smooth_l1_loss.backward", "optimizer.step", "scaler.scale().backward", "scaler.unscale_", "scaler.step", "scaler.update", "F.smooth_l1_loss.item", "functions.AverageMeter.update", "F.smooth_l1_loss.item", "time.perf_counter", "log.info", "model.module.state_dict", "optimizer.state_dict", "model.module.state_dict", "F.smooth_l1_loss.item", "scaler.state_dict", "lab.clone", "scaler.scale"], "function", ["home.repos.pwc.inspect_result.bo-miao_MAMP.None.train.train", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.train.adjust_lr", "home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.dropout2d_lab", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.AverageMeter.update", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.AverageMeter.update"], ["def", "train", "(", "dataloader", ",", "model", ",", "optimizer", ",", "scaler", ",", "log", ",", "writer", ",", "epoch", ")", ":", "\n", "    ", "global", "iteration", "\n", "log_loss", "=", "AverageMeter", "(", ")", "\n", "batch_num", "=", "len", "(", "dataloader", ")", "\n", "b_s", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "for", "batch_ind", ",", "(", "images_lab", ",", "images_flow", ",", "meta", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n", "adjust_lr", "(", "optimizer", ",", "epoch", ",", "batch_ind", ",", "batch_num", ")", "\n", "\n", "images_flow", "=", "None", "\n", "images_lab_msk", "=", "[", "lab", ".", "clone", "(", ")", ".", "cuda", "(", ")", "for", "lab", "in", "images_lab", "]", "\n", "images_lab", "=", "[", "r", ".", "cuda", "(", ")", "for", "r", "in", "images_lab", "]", "\n", "\n", "_", ",", "ch", "=", "model", ".", "module", ".", "dropout2d_lab", "(", "images_lab", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "images_lab", "[", "0", "]", ".", "size", "(", ")", "\n", "img_mem", "=", "[", "x", "for", "x", "in", "images_lab", "[", ":", "-", "1", "]", "]", "\n", "img_query", "=", "images_lab", "[", "-", "1", "]", "\n", "msk_mem", "=", "[", "x", "[", ":", ",", "ch", "]", "for", "x", "in", "images_lab_msk", "[", ":", "-", "1", "]", "]", "\n", "msk_query", "=", "images_lab_msk", "[", "-", "1", "]", "[", ":", ",", "ch", "]", "\n", "\n", "results", "=", "model", "(", "img_mem", ",", "msk_mem", ",", "img_query", ",", "None", ")", "\n", "results", "=", "F", ".", "interpolate", "(", "results", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "sum_loss", "=", "F", ".", "smooth_l1_loss", "(", "results", "*", "20", ",", "msk_query", "*", "20", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "if", "not", "args", ".", "is_amp", ":", "\n", "            ", "sum_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "scaler", ".", "scale", "(", "sum_loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "unscale_", "(", "optimizer", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "-", "10000", "<", "sum_loss", ".", "item", "(", ")", "<", "100000", ":", "\n", "            ", "log_loss", ".", "update", "(", "sum_loss", ".", "item", "(", ")", ")", "\n", "", "iteration", "=", "iteration", "+", "1", "\n", "writer", ".", "add_scalar", "(", "\"Training loss\"", ",", "sum_loss", ".", "item", "(", ")", ",", "iteration", ")", "\n", "\n", "info", "=", "'Loss = {:.3f}({:.3f})'", ".", "format", "(", "log_loss", ".", "val", ",", "log_loss", ".", "avg", ")", "\n", "batch_time", "=", "time", ".", "perf_counter", "(", ")", "-", "b_s", "\n", "b_s", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "if", "batch_ind", "%", "20", "==", "0", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "lr_now", "=", "param_group", "[", "'lr'", "]", "\n", "", "log", ".", "info", "(", "'Epoch{} [{}/{}] {} T={:.2f}  LR={:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_ind", ",", "batch_num", ",", "info", ",", "batch_time", ",", "lr_now", ")", ")", "\n", "\n", "", "", "savefilename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "f'{args.proc_name}_ckpt_epoch_{epoch+1}.pt'", ")", "\n", "log", ".", "info", "(", "\"Saving checkpoint {}.\"", ".", "format", "(", "savefilename", ")", ")", "\n", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scaler'", ":", "scaler", ".", "state_dict", "(", ")", "if", "args", ".", "is_amp", "else", "None", ",", "\n", "}", ",", "savefilename", ")", "\n", "\n", "torch", ".", "save", "(", "{", "\n", "'state_dict'", ":", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "f'model.pt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.train.adjust_lr": [[165, 181], ["None"], "function", ["None"], ["", "def", "adjust_lr", "(", "optimizer", ",", "epoch", ",", "batch_ind", ",", "batch_num", ")", ":", "\n", "    ", "iteration", "=", "(", "batch_ind", "+", "epoch", "*", "batch_num", ")", "*", "args", ".", "bsize", "\n", "\n", "if", "iteration", "<=", "400000", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "\n", "", "elif", "iteration", "<=", "600000", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.5", "\n", "", "elif", "iteration", "<=", "800000", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.25", "\n", "", "elif", "iteration", "<=", "1000000", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.125", "\n", "", "else", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.0625", "\n", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.AverageMeter.__init__": [[10, 12], ["functions.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.AverageMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.AverageMeter.update": [[19, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.setup_logger": [[26, 48], ["logging.Formatter", "logging.getLogger", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.set_name", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "os.path.dirname", "os.path.isdir", "os.makedirs", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["", "", "def", "setup_logger", "(", "filepath", ")", ":", "\n", "    ", "file_formatter", "=", "logging", ".", "Formatter", "(", "\n", "\"[%(asctime)s %(filename)s:%(lineno)s] %(levelname)-8s %(message)s\"", ",", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ",", "\n", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'example'", ")", "\n", "handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "handler", ".", "setFormatter", "(", "file_formatter", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "\n", "file_handle_name", "=", "\"file\"", "\n", "if", "file_handle_name", "in", "[", "h", ".", "name", "for", "h", "in", "logger", ".", "handlers", "]", ":", "\n", "        ", "return", "\n", "", "if", "os", ".", "path", ".", "dirname", "(", "filepath", ")", "!=", "''", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "dirname", "(", "filepath", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filepath", ")", ")", "\n", "", "", "file_handle", "=", "logging", ".", "FileHandler", "(", "filename", "=", "filepath", ",", "mode", "=", "\"a\"", ")", "\n", "file_handle", ".", "set_name", "(", "file_handle_name", ")", "\n", "file_handle", ".", "setFormatter", "(", "file_formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handle", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.get_davis_ref_index": [[50, 68], ["sorted", "list", "list", "filter", "list", "set", "sorted", "filter", "list", "list", "range", "filter", "set", "range"], "function", ["None"], ["", "def", "get_davis_ref_index", "(", "i", ",", "mem_gap", ",", "ref", ")", ":", "\n", "    ", "if", "ref", "==", "5", ":", "\n", "        ", "ref_index", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "<=", "i", ",", "[", "0", ",", "5", "]", ")", ")", "+", "list", "(", "\n", "filter", "(", "lambda", "x", ":", "x", ">", "0", ",", "range", "(", "i", ",", "i", "-", "mem_gap", "*", "3", ",", "-", "mem_gap", ")", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "ref_index", "=", "sorted", "(", "list", "(", "set", "(", "ref_index", ")", ")", ")", "\n", "", "elif", "ref", "==", "4", ":", "\n", "        ", "ref_index", "=", "[", "0", "]", "+", "list", "(", "filter", "(", "lambda", "x", ":", "x", ">", "0", ",", "range", "(", "i", ",", "i", "-", "mem_gap", "*", "3", ",", "-", "mem_gap", ")", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "", "elif", "ref", "==", "2", ":", "\n", "        ", "ref_index", "=", "[", "0", "]", "+", "[", "i", "-", "1", "]", "\n", "ref_index", "=", "sorted", "(", "list", "(", "set", "(", "ref_index", ")", ")", ")", "\n", "", "elif", "ref", "==", "1", ":", "\n", "        ", "ref_index", "=", "[", "i", "]", "\n", "", "elif", "ref", "==", "0", ":", "\n", "        ", "ref_index", "=", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "ref_index", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.get_youtube_ref_index": [[70, 83], ["list", "sorted", "set", "len", "list", "sorted", "filter", "filter", "list", "list", "range", "filter", "set"], "function", ["None"], ["", "def", "get_youtube_ref_index", "(", "i", ",", "mem_gap", ",", "ref", ",", "annotation_index", ")", ":", "\n", "    ", "if", "ref", "==", "4", ":", "\n", "        ", "ref_index", "=", "list", "(", "set", "(", "filter", "(", "lambda", "x", ":", "x", "<=", "i", ",", "annotation_index", ")", ")", ")", "\n", "rest", "=", "4", "-", "len", "(", "ref_index", ")", "\n", "ref_index", "+=", "list", "(", "filter", "(", "lambda", "x", ":", "x", ">", "0", ",", "range", "(", "i", ",", "i", "-", "mem_gap", "*", "rest", ",", "-", "mem_gap", ")", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "ref_index", "=", "sorted", "(", "ref_index", ")", "\n", "", "elif", "ref", "==", "2", ":", "\n", "        ", "ref_index", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "<=", "i", ",", "annotation_index", ")", ")", "+", "[", "i", "-", "1", "]", "\n", "ref_index", "=", "sorted", "(", "list", "(", "set", "(", "ref_index", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "ref_index", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.evaluate_ytb.main": [[22, 71], ["os.makedirs", "os.makedirs", "functions.setup_logger", "sorted", "setproctitle.setproctitle", "functional.dataset.TestLoader.dataloader_youtube", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.mamp.MAMP", "functions.setup_logger.info", "functions.setup_logger.info", "nn.DataParallel().cuda", "time.time", "functions.setup_logger.info", "os.path.join", "os.path.join", "vars().items", "functions.setup_logger.info", "functional.dataset.TestLoader.test_image_folder_youtube", "os.path.isfile", "functions.setup_logger.info", "nn.DataParallel", "nn.DataParallel.load_state_dict", "nn.DataParallel.cuda", "nn.DataParallel.eval", "torch.no_grad", "torch.no_grad", "evaluate_ytb.evaluate", "args.proc_name.split", "sum", "functions.setup_logger.info", "torch.load", "torch.load", "nn.DataParallel().cuda.load_state_dict", "functions.setup_logger.info", "functions.setup_logger.info", "functions.setup_logger.info", "nn.DataParallel", "raft_core.raft.RAFT", "torch.load", "torch.load", "args.proc_name.split", "args.proc_name.split", "vars", "str", "str", "p.data.nelement", "time.time", "nn.DataParallel().cuda.parameters"], "function", ["home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.setup_logger", "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.dataloader_youtube", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.evaluate_davis.evaluate"], ["def", "main", "(", ")", ":", "\n", "    ", "args", ".", "training", "=", "False", "\n", "\n", "os", ".", "makedirs", "(", "args", ".", "savepath", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "args", ".", "proc_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ",", "exist_ok", "=", "True", ")", "\n", "log", "=", "setup_logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "args", ".", "proc_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "'benchmark.log'", ")", ")", "\n", "for", "key", ",", "value", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "log", ".", "info", "(", "str", "(", "key", ")", "+", "': '", "+", "str", "(", "value", ")", ")", "\n", "\n", "", "setproctitle", ".", "setproctitle", "(", "args", ".", "proc_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "TestData", "=", "dataloader_youtube", "(", "args", ".", "datapath", ")", "\n", "TestImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_image_folder_youtube", "(", "TestData", ",", "False", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "model", "=", "MAMP", "(", "args", ")", "\n", "log", ".", "info", "(", "'Number of model parameters: {}'", ".", "format", "(", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", ")", "\n", "log", ".", "info", "(", "\"AMP SWITCH STATUS IS {}\"", ".", "format", "(", "args", ".", "is_amp", ")", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "log", ".", "info", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "\"=> No checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "log", ".", "info", "(", "\"=> Will start from scratch.\"", ")", "\n", "", "", "else", ":", "\n", "        ", "log", ".", "info", "(", "'=> No checkpoint file. Start from scratch.'", ")", "\n", "", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# Optical flow", "\n", "if", "args", ".", "optical_flow_warp", ":", "\n", "        ", "args", ".", "small", "=", "False", "# raft-small.pth", "\n", "args", ".", "mixed_precision", "=", "True", "\n", "of_model", "=", "nn", ".", "DataParallel", "(", "RAFT", "(", "args", ")", ")", "\n", "ckpt_name", "=", "'ckpt/raft-small.pth'", "if", "args", ".", "small", "else", "'ckpt/raft-sintel.pth'", "\n", "of_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ckpt_name", ")", ")", "\n", "of_model", ".", "cuda", "(", ")", "\n", "of_model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "        ", "of_model", "=", "None", "\n", "\n", "", "start_full_time", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "evaluate", "(", "TestImgLoader", ",", "model", ",", "log", ",", "of_model", ")", "\n", "", "log", ".", "info", "(", "'full testing time = {:.2f} Hours'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start_full_time", ")", "/", "3600", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.evaluate_ytb.evaluate": [[73, 173], ["model.eval", "os.path.join", "os.makedirs", "functions.AverageMeter", "len", "log.info", "tqdm.tqdm", "os.path.join", "functional.utils.mask_io.zip_folder", "log.info", "shutil.rmtree", "enumerate", "functions.AverageMeter", "len", "range", "log.info", "args.proc_name.split", "len", "x.item", "[].item", "[].item", "[].contiguous", "functions.get_youtube_ref_index", "images[].cuda", "time.time", "functions.AverageMeter.update", "functions.AverageMeter.update", "outputs.append", "os.path.join", "os.makedirs", "os.path.join", "[].cpu().numpy().astype", "functional.utils.mask_io.save_mask", "args.proc_name.split", "raft_core.utils.utils.load_image", "nn.ZeroPad2d", "images[].cuda", "outputs[].cuda", "video_frames[].cuda", "zip", "torch.no_grad", "torch.no_grad", "model", "F.interpolate", "torch.argmax().float", "torch.argmax().float", "output[].cpu", "os.path.join", "[].cpu().numpy().astype", "functional.utils.mask_io.save_mask", "nn.ZeroPad2d.", "nn.ZeroPad2d.", "video_frames[].cuda", "raft_core.utils.utils.clamp_optical_flow", "optical_flows.append", "annotation_index.index", "annotations[].cuda", "time.time", "time.time", "[].cpu().numpy", "nn.ZeroPad2d.", "torch.no_grad", "torch.no_grad", "of_model", "torch.argmax", "torch.argmax", "[].cpu().numpy", "[].cpu", "[].cpu"], "function", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.mask_io.zip_folder", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.get_youtube_ref_index", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.AverageMeter.update", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.AverageMeter.update", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.mask_io.save_mask", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.load_image", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.mask_io.save_mask", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.clamp_optical_flow"], ["", "def", "evaluate", "(", "dataloader", ",", "model", ",", "log", ",", "of_model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "args", ".", "proc_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "'Annotations'", ")", "\n", "try", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "folder", ")", "\n", "", "except", ":", "\n", "        ", "a", "=", "None", "\n", "", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "TotalModelTime", "=", "AverageMeter", "(", ")", "\n", "video_num", "=", "len", "(", "dataloader", ")", "\n", "log", ".", "info", "(", "\"Start testing, number of videos {}.\"", ".", "format", "(", "len", "(", "dataloader", ")", ")", ")", "\n", "for", "video_index", ",", "(", "images", ",", "annotations", ",", "meta", ")", "in", "tqdm", "(", "enumerate", "(", "dataloader", ")", ")", ":", "\n", "        ", "ModelTime", "=", "AverageMeter", "(", ")", "\n", "\n", "video_name", "=", "meta", "[", "\"video_name\"", "]", "[", "0", "]", "\n", "annotation_index", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "meta", "[", "\"annotation_index\"", "]", "]", "\n", "frame_names", "=", "[", "x", "[", "0", "]", "for", "x", "in", "meta", "[", "\"frame_names\"", "]", "]", "\n", "height", ",", "width", "=", "meta", "[", "'height'", "]", "[", "0", "]", ".", "item", "(", ")", ",", "meta", "[", "'width'", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "padded_height", ",", "padded_width", "=", "height", ",", "width", "\n", "abs_frame_path", "=", "[", "x", "[", "0", "]", "for", "x", "in", "meta", "[", "\"abs_frame_path\"", "]", "]", "\n", "video_frames", "=", "None", "\n", "if", "args", ".", "optical_flow_warp", ":", "\n", "            ", "video_frames", "=", "[", "load_image", "(", "x", ")", "for", "x", "in", "abs_frame_path", "]", "\n", "\n", "", "if", "args", ".", "pad_divisible", ">", "1", ":", "\n", "            ", "divisible", "=", "args", ".", "pad_divisible", "\n", "cur_b", ",", "cur_c", ",", "cur_h", ",", "cur_w", "=", "images", "[", "0", "]", ".", "shape", "\n", "pad_h", "=", "0", "if", "(", "cur_h", "%", "divisible", ")", "==", "0", "else", "divisible", "-", "(", "cur_h", "%", "divisible", ")", "\n", "pad_w", "=", "0", "if", "(", "cur_w", "%", "divisible", ")", "==", "0", "else", "divisible", "-", "(", "cur_w", "%", "divisible", ")", "\n", "\n", "if", "(", "pad_h", "+", "pad_w", ")", "!=", "0", ":", "\n", "                ", "pad", "=", "nn", ".", "ZeroPad2d", "(", "padding", "=", "(", "0", ",", "pad_w", ",", "0", ",", "pad_h", ")", ")", "\n", "images", "=", "[", "pad", "(", "x", ")", "for", "x", "in", "images", "]", "\n", "annotations", "=", "[", "pad", "(", "x", ")", "for", "x", "in", "annotations", "]", "\n", "video_frames", "=", "[", "pad", "(", "x", ")", "for", "x", "in", "video_frames", "]", "if", "args", ".", "optical_flow_warp", "else", "None", "\n", "padded_height", "+=", "pad_h", "\n", "padded_width", "+=", "pad_w", "\n", "\n", "", "", "images", "=", "[", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "for", "x", "in", "images", "]", "\n", "outputs", "=", "[", "annotations", "[", "0", "]", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ".", "contiguous", "(", ")", "]", "\n", "video_frames", "=", "[", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "for", "x", "in", "video_frames", "]", "if", "args", ".", "optical_flow_warp", "else", "None", "\n", "N", "=", "len", "(", "images", ")", "\n", "for", "i", "in", "range", "(", "N", "-", "1", ")", ":", "\n", "            ", "ref_index", "=", "get_youtube_ref_index", "(", "i", ",", "2", ",", "args", ".", "memory_length", ",", "annotation_index", ")", "\n", "img_mem", "=", "[", "images", "[", "ind", "]", ".", "cuda", "(", ")", "for", "ind", "in", "ref_index", "]", "\n", "msk_mem", "=", "[", "outputs", "[", "ind", "]", ".", "cuda", "(", ")", "for", "ind", "in", "ref_index", "]", "\n", "img_query", "=", "images", "[", "i", "+", "1", "]", ".", "cuda", "(", ")", "\n", "msk_query", "=", "None", "\n", "\n", "flow_img_mem", ",", "flow_img_query", ",", "optical_flows", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "args", ".", "optical_flow_warp", ":", "\n", "                ", "flow_img_mem", "=", "[", "video_frames", "[", "ind", "]", ".", "cuda", "(", ")", "for", "ind", "in", "ref_index", "]", "\n", "flow_img_query", "=", "video_frames", "[", "i", "+", "1", "]", ".", "cuda", "(", ")", "\n", "\n", "", "s_", "=", "time", ".", "time", "(", ")", "\n", "if", "args", ".", "optical_flow_warp", ":", "\n", "                ", "for", "img", ",", "ind", "in", "zip", "(", "flow_img_mem", ",", "ref_index", ")", ":", "\n", "                    ", "long_gap", "=", "5", "\n", "iter_num", "=", "5", "if", "(", "i", "+", "1", ")", "-", "ind", ">", "long_gap", "else", "2", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "_", ",", "flow_up", "=", "of_model", "(", "flow_img_query", ",", "img", ",", "iters", "=", "iter_num", ",", "test_mode", "=", "True", ",", "up_scale", "=", "2", ")", "\n", "", "flow_up", "=", "clamp_optical_flow", "(", "flow_up", ")", "\n", "optical_flows", ".", "append", "(", "flow_up", ")", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "_output", "=", "model", "(", "img_mem", ",", "msk_mem", ",", "img_query", ",", "optical_flows", ")", "\n", "_output", "=", "F", ".", "interpolate", "(", "_output", ",", "(", "padded_height", ",", "padded_width", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "output", "=", "torch", ".", "argmax", "(", "_output", ",", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "\n", "if", "i", "+", "1", "in", "annotation_index", ":", "\n", "                    ", "extra_anno_idx", "=", "annotation_index", ".", "index", "(", "i", "+", "1", ")", "\n", "extra_anno", "=", "annotations", "[", "extra_anno_idx", "]", ".", "cuda", "(", ")", "\n", "output", "=", "output", "*", "(", "extra_anno", "==", "0", ")", "+", "extra_anno", "\n", "\n", "", "", "ModelTime", ".", "update", "(", "time", ".", "time", "(", ")", "-", "s_", ")", "\n", "TotalModelTime", ".", "update", "(", "time", ".", "time", "(", ")", "-", "s_", ")", "\n", "outputs", ".", "append", "(", "output", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ".", "cpu", "(", ")", ")", "\n", "output_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "video_name", ")", "\n", "os", ".", "makedirs", "(", "output_folder", ",", "exist_ok", "=", "True", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "output_file", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "frame_names", "[", "0", "]", ")", "\n", "out_img", "=", "annotations", "[", "0", "]", "[", "0", ",", "0", "]", "[", ":", "height", ",", ":", "width", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "save_mask", "(", "output_file", ",", "out_img", ")", "\n", "\n", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "frame_names", "[", "i", "+", "1", "]", ")", "\n", "out_img", "=", "output", "[", "0", ",", "0", "]", "[", ":", "height", ",", ":", "width", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "save_mask", "(", "output_file", ",", "out_img", ")", "\n", "\n", "# torch.cuda.empty_cache()", "\n", "\n", "", "performance", "=", "'\\t'", ".", "join", "(", "[", "'Per FPS: ({:.1f}). Total FPS: ({:.1f})'", ".", "format", "(", "1", "/", "ModelTime", ".", "avg", ",", "1", "/", "TotalModelTime", ".", "avg", ")", "]", ")", "\n", "log", ".", "info", "(", "'[{}/{}] {}: {}'", ".", "format", "(", "video_index", "+", "1", ",", "video_num", ",", "video_name", ",", "performance", ")", ")", "\n", "\n", "", "source_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "args", ".", "proc_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "'Annotations'", ")", "\n", "zip_folder", "(", "source_path", ",", "source_path", "+", "'.zip'", ")", "\n", "log", ".", "info", "(", "\"Compress {} into ZIP.\"", ".", "format", "(", "source_path", ")", ")", "\n", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.evaluate_custom.main": [[22, 71], ["os.makedirs", "os.makedirs", "functions.setup_logger", "sorted", "setproctitle.setproctitle", "functional.dataset.TestLoader.dataloader_custom", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.mamp.MAMP", "functions.setup_logger.info", "functions.setup_logger.info", "nn.DataParallel().cuda", "time.time", "functions.setup_logger.info", "os.path.join", "os.path.join", "vars().items", "functions.setup_logger.info", "functional.dataset.TestLoader.test_image_folder_custom", "os.path.isfile", "functions.setup_logger.info", "nn.DataParallel", "nn.DataParallel.load_state_dict", "nn.DataParallel.cuda", "nn.DataParallel.eval", "torch.no_grad", "torch.no_grad", "evaluate_custom.evaluate", "args.proc_name.split", "sum", "functions.setup_logger.info", "torch.load", "torch.load", "nn.DataParallel().cuda.load_state_dict", "functions.setup_logger.info", "functions.setup_logger.info", "functions.setup_logger.info", "nn.DataParallel", "raft_core.raft.RAFT", "torch.load", "torch.load", "args.proc_name.split", "args.proc_name.split", "vars", "str", "str", "p.data.nelement", "time.time", "nn.DataParallel().cuda.parameters"], "function", ["home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.setup_logger", "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.dataloader_custom", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.evaluate_davis.evaluate"], ["def", "main", "(", ")", ":", "\n", "    ", "args", ".", "training", "=", "False", "\n", "\n", "os", ".", "makedirs", "(", "args", ".", "savepath", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "args", ".", "proc_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ",", "exist_ok", "=", "True", ")", "\n", "log", "=", "setup_logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "args", ".", "proc_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "'benchmark.log'", ")", ")", "\n", "for", "key", ",", "value", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "log", ".", "info", "(", "str", "(", "key", ")", "+", "': '", "+", "str", "(", "value", ")", ")", "\n", "\n", "", "setproctitle", ".", "setproctitle", "(", "args", ".", "proc_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "TestData", "=", "dataloader_custom", "(", "args", ".", "datapath", ")", "\n", "TestImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_image_folder_custom", "(", "TestData", ",", "False", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "model", "=", "MAMP", "(", "args", ")", "\n", "log", ".", "info", "(", "'Number of model parameters: {}'", ".", "format", "(", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", ")", "\n", "log", ".", "info", "(", "\"AMP SWITCH STATUS IS {}\"", ".", "format", "(", "args", ".", "is_amp", ")", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "log", ".", "info", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "\"=> No checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "log", ".", "info", "(", "\"=> Will start from scratch.\"", ")", "\n", "", "", "else", ":", "\n", "        ", "log", ".", "info", "(", "'=> No checkpoint file. Start from scratch.'", ")", "\n", "", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# Optical flow", "\n", "if", "args", ".", "optical_flow_warp", ":", "\n", "        ", "args", ".", "small", "=", "False", "# raft-small.pth", "\n", "args", ".", "mixed_precision", "=", "True", "\n", "of_model", "=", "nn", ".", "DataParallel", "(", "RAFT", "(", "args", ")", ")", "\n", "ckpt_name", "=", "'ckpt/raft-small.pth'", "if", "args", ".", "small", "else", "'ckpt/raft-sintel.pth'", "\n", "of_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ckpt_name", ")", ")", "\n", "of_model", ".", "cuda", "(", ")", "\n", "of_model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "        ", "of_model", "=", "None", "\n", "\n", "", "start_full_time", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "evaluate", "(", "TestImgLoader", ",", "model", ",", "log", ",", "of_model", ")", "\n", "", "log", ".", "info", "(", "'full testing time = {:.2f} Hours'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start_full_time", ")", "/", "3600", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.evaluate_custom.evaluate": [[73, 166], ["model.eval", "os.path.join", "os.makedirs", "log.info", "tqdm.tqdm", "log.info", "shutil.rmtree", "enumerate", "functions.AverageMeter", "len", "range", "args.proc_name.split", "len", "x.item", "[].item", "[].item", "[].contiguous", "functions.get_youtube_ref_index", "images[].cuda", "outputs.append", "os.path.join", "os.makedirs", "os.path.join", "[].cpu().numpy().astype", "functional.utils.mask_io.save_mask", "raft_core.utils.utils.load_image", "nn.ZeroPad2d", "images[].cuda", "outputs[].cuda", "video_frames[].cuda", "zip", "torch.no_grad", "torch.no_grad", "time.time", "model", "F.interpolate", "torch.argmax().float", "torch.argmax().float", "functions.AverageMeter.update", "output[].cpu", "os.path.join", "[].cpu().numpy().astype", "functional.utils.mask_io.save_mask", "nn.ZeroPad2d.", "nn.ZeroPad2d.", "video_frames[].cuda", "raft_core.utils.utils.clamp_optical_flow", "optical_flows.append", "annotation_index.index", "annotations[].cuda", "[].cpu().numpy", "nn.ZeroPad2d.", "torch.no_grad", "torch.no_grad", "of_model", "torch.argmax", "torch.argmax", "time.time", "[].cpu().numpy", "[].cpu", "[].cpu"], "function", ["home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.get_youtube_ref_index", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.mask_io.save_mask", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.load_image", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.AverageMeter.update", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.mask_io.save_mask", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.clamp_optical_flow"], ["", "def", "evaluate", "(", "dataloader", ",", "model", ",", "log", ",", "of_model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "args", ".", "proc_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "'Demo'", ")", "\n", "try", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "folder", ")", "\n", "", "except", ":", "\n", "        ", "a", "=", "None", "\n", "", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "log", ".", "info", "(", "\"Start testing, number of videos {}.\"", ".", "format", "(", "len", "(", "dataloader", ")", ")", ")", "\n", "for", "video_index", ",", "(", "images", ",", "annotations", ",", "meta", ")", "in", "tqdm", "(", "enumerate", "(", "dataloader", ")", ")", ":", "\n", "        ", "ModelTime", "=", "AverageMeter", "(", ")", "\n", "\n", "video_name", "=", "meta", "[", "\"video_name\"", "]", "[", "0", "]", "\n", "annotation_index", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "meta", "[", "\"annotation_index\"", "]", "]", "\n", "frame_names", "=", "[", "x", "[", "0", "]", "for", "x", "in", "meta", "[", "\"frame_names\"", "]", "]", "\n", "height", ",", "width", "=", "meta", "[", "'height'", "]", "[", "0", "]", ".", "item", "(", ")", ",", "meta", "[", "'width'", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "padded_height", ",", "padded_width", "=", "height", ",", "width", "\n", "abs_frame_path", "=", "[", "x", "[", "0", "]", "for", "x", "in", "meta", "[", "\"abs_frame_path\"", "]", "]", "\n", "video_frames", "=", "None", "\n", "if", "args", ".", "optical_flow_warp", ":", "\n", "            ", "video_frames", "=", "[", "load_image", "(", "x", ")", "for", "x", "in", "abs_frame_path", "]", "\n", "\n", "", "if", "args", ".", "pad_divisible", ">", "1", ":", "\n", "            ", "divisible", "=", "args", ".", "pad_divisible", "\n", "cur_b", ",", "cur_c", ",", "cur_h", ",", "cur_w", "=", "images", "[", "0", "]", ".", "shape", "\n", "pad_h", "=", "0", "if", "(", "cur_h", "%", "divisible", ")", "==", "0", "else", "divisible", "-", "(", "cur_h", "%", "divisible", ")", "\n", "pad_w", "=", "0", "if", "(", "cur_w", "%", "divisible", ")", "==", "0", "else", "divisible", "-", "(", "cur_w", "%", "divisible", ")", "\n", "\n", "if", "(", "pad_h", "+", "pad_w", ")", "!=", "0", ":", "\n", "                ", "pad", "=", "nn", ".", "ZeroPad2d", "(", "padding", "=", "(", "0", ",", "pad_w", ",", "0", ",", "pad_h", ")", ")", "\n", "images", "=", "[", "pad", "(", "x", ")", "for", "x", "in", "images", "]", "\n", "annotations", "=", "[", "pad", "(", "x", ")", "for", "x", "in", "annotations", "]", "\n", "video_frames", "=", "[", "pad", "(", "x", ")", "for", "x", "in", "video_frames", "]", "if", "args", ".", "optical_flow_warp", "else", "None", "\n", "padded_height", "+=", "pad_h", "\n", "padded_width", "+=", "pad_w", "\n", "\n", "", "", "images", "=", "[", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "for", "x", "in", "images", "]", "\n", "outputs", "=", "[", "annotations", "[", "0", "]", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ".", "contiguous", "(", ")", "]", "\n", "video_frames", "=", "[", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "for", "x", "in", "video_frames", "]", "if", "args", ".", "optical_flow_warp", "else", "None", "\n", "N", "=", "len", "(", "images", ")", "\n", "for", "i", "in", "range", "(", "N", "-", "1", ")", ":", "\n", "            ", "ref_index", "=", "get_youtube_ref_index", "(", "i", ",", "2", ",", "args", ".", "memory_length", ",", "annotation_index", ")", "\n", "img_mem", "=", "[", "images", "[", "ind", "]", ".", "cuda", "(", ")", "for", "ind", "in", "ref_index", "]", "\n", "msk_mem", "=", "[", "outputs", "[", "ind", "]", ".", "cuda", "(", ")", "for", "ind", "in", "ref_index", "]", "\n", "img_query", "=", "images", "[", "i", "+", "1", "]", ".", "cuda", "(", ")", "\n", "msk_query", "=", "None", "\n", "\n", "flow_img_mem", ",", "flow_img_query", ",", "optical_flows", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "args", ".", "optical_flow_warp", ":", "\n", "                ", "flow_img_mem", "=", "[", "video_frames", "[", "ind", "]", ".", "cuda", "(", ")", "for", "ind", "in", "ref_index", "]", "\n", "flow_img_query", "=", "video_frames", "[", "i", "+", "1", "]", ".", "cuda", "(", ")", "\n", "for", "img", ",", "ind", "in", "zip", "(", "flow_img_mem", ",", "ref_index", ")", ":", "\n", "                    ", "long_gap", "=", "5", "\n", "iter_num", "=", "5", "if", "(", "i", "+", "1", ")", "-", "ind", ">", "long_gap", "else", "2", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "_", ",", "flow_up", "=", "of_model", "(", "flow_img_query", ",", "img", ",", "iters", "=", "iter_num", ",", "test_mode", "=", "True", ",", "up_scale", "=", "2", ")", "\n", "", "flow_up", "=", "clamp_optical_flow", "(", "flow_up", ")", "\n", "optical_flows", ".", "append", "(", "flow_up", ")", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "s_", "=", "time", ".", "time", "(", ")", "\n", "_output", "=", "model", "(", "img_mem", ",", "msk_mem", ",", "img_query", ",", "optical_flows", ")", "\n", "_output", "=", "F", ".", "interpolate", "(", "_output", ",", "(", "padded_height", ",", "padded_width", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "output", "=", "torch", ".", "argmax", "(", "_output", ",", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "ModelTime", ".", "update", "(", "time", ".", "time", "(", ")", "-", "s_", ")", "\n", "\n", "if", "i", "+", "1", "in", "annotation_index", ":", "\n", "                    ", "extra_anno_idx", "=", "annotation_index", ".", "index", "(", "i", "+", "1", ")", "\n", "extra_anno", "=", "annotations", "[", "extra_anno_idx", "]", ".", "cuda", "(", ")", "\n", "output", "=", "output", "*", "(", "extra_anno", "==", "0", ")", "+", "extra_anno", "\n", "\n", "", "", "outputs", ".", "append", "(", "output", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ".", "cpu", "(", ")", ")", "\n", "output_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "video_name", ")", "\n", "os", ".", "makedirs", "(", "output_folder", ",", "exist_ok", "=", "True", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "output_file", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "frame_names", "[", "0", "]", ")", "\n", "out_img", "=", "annotations", "[", "0", "]", "[", "0", ",", "0", "]", "[", ":", "height", ",", ":", "width", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "save_mask", "(", "output_file", ",", "out_img", ")", "\n", "\n", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "frame_names", "[", "i", "+", "1", "]", ")", "\n", "out_img", "=", "output", "[", "0", ",", "0", "]", "[", ":", "height", ",", ":", "width", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "save_mask", "(", "output_file", ",", "out_img", ")", "\n", "\n", "# torch.cuda.empty_cache()", "\n", "\n", "", "", "log", ".", "info", "(", "\"The segmentation results of ckpt/DEMO/valid_demo have been saved into {}\"", ".", "format", "(", "folder", ")", ")", "\n", "#zip_folder(source_path, source_path + '.zip')", "\n", "#log.info(\"Compress {} into ZIP.\".format(source_path))", "\n", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.evaluate_davis.main": [[24, 73], ["os.makedirs", "os.makedirs", "functions.setup_logger", "sorted", "setproctitle.setproctitle", "functional.dataset.TestLoader.dataloader_davis", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.mamp.MAMP", "functions.setup_logger.info", "functions.setup_logger.info", "nn.DataParallel().cuda", "time.time", "functions.setup_logger.info", "os.path.join", "os.path.join", "vars().items", "functions.setup_logger.info", "functional.dataset.TestLoader.test_image_folder_davis", "os.path.isfile", "functions.setup_logger.info", "nn.DataParallel", "nn.DataParallel.load_state_dict", "nn.DataParallel.cuda", "nn.DataParallel.eval", "torch.no_grad", "torch.no_grad", "evaluate_davis.evaluate", "args.proc_name.split", "sum", "functions.setup_logger.info", "torch.load", "torch.load", "nn.DataParallel().cuda.load_state_dict", "functions.setup_logger.info", "functions.setup_logger.info", "functions.setup_logger.info", "nn.DataParallel", "raft_core.raft.RAFT", "torch.load", "torch.load", "args.proc_name.split", "args.proc_name.split", "vars", "str", "str", "p.data.nelement", "time.time", "nn.DataParallel().cuda.parameters"], "function", ["home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.setup_logger", "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.dataloader_davis", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.evaluate_davis.evaluate"], ["def", "main", "(", ")", ":", "\n", "    ", "args", ".", "training", "=", "False", "\n", "\n", "os", ".", "makedirs", "(", "args", ".", "savepath", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "args", ".", "proc_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ",", "exist_ok", "=", "True", ")", "\n", "log", "=", "setup_logger", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "args", ".", "proc_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "'benchmark.log'", ")", ")", "\n", "for", "key", ",", "value", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "log", ".", "info", "(", "str", "(", "key", ")", "+", "': '", "+", "str", "(", "value", ")", ")", "\n", "\n", "", "setproctitle", ".", "setproctitle", "(", "args", ".", "proc_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "TestData", "=", "dataloader_davis", "(", "args", ".", "datapath", ")", "\n", "TestImgLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_image_folder_davis", "(", "TestData", ",", "False", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ",", "drop_last", "=", "False", "\n", ")", "\n", "\n", "model", "=", "MAMP", "(", "args", ")", "\n", "log", ".", "info", "(", "'Number of model parameters: {}'", ".", "format", "(", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", ")", "\n", "log", ".", "info", "(", "\"AMP SWITCH STATUS IS {}\"", ".", "format", "(", "args", ".", "is_amp", ")", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "log", ".", "info", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "\"=> No checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "log", ".", "info", "(", "\"=> Will start from scratch.\"", ")", "\n", "", "", "else", ":", "\n", "        ", "log", ".", "info", "(", "'=> No checkpoint file. Start from scratch.'", ")", "\n", "", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# Optical flow", "\n", "if", "args", ".", "optical_flow_warp", ":", "\n", "        ", "args", ".", "small", "=", "False", "# raft-small.pth", "\n", "args", ".", "mixed_precision", "=", "True", "\n", "of_model", "=", "nn", ".", "DataParallel", "(", "RAFT", "(", "args", ")", ")", "\n", "ckpt_name", "=", "'ckpt/raft-small.pth'", "if", "args", ".", "small", "else", "'ckpt/raft-sintel.pth'", "\n", "of_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ckpt_name", ")", ")", "\n", "of_model", ".", "cuda", "(", ")", "\n", "of_model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "        ", "of_model", "=", "None", "\n", "\n", "", "start_full_time", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "evaluate", "(", "TestImgLoader", ",", "model", ",", "log", ",", "of_model", ")", "\n", "", "log", ".", "info", "(", "'full testing time = {:.2f} Hours'", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "start_full_time", ")", "/", "3600", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.None.evaluate_davis.evaluate": [[75, 182], ["model.eval", "functions.AverageMeter", "functions.AverageMeter", "len", "os.path.join", "os.makedirs", "log.info", "tqdm.tqdm", "shutil.rmtree", "enumerate", "functions.AverageMeter", "functions.AverageMeter", "functions.AverageMeter", "log.info", "args.proc_name.split", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "len", "range", "x.item", "[].item", "[].item", "annotations[].contiguous", "functions.get_davis_ref_index", "images[].cuda", "annotations[].cuda", "outputs.append", "annotations[].cuda.max", "range", "os.path.join", "os.makedirs", "os.path.join", "[].cpu().numpy().astype", "functional.utils.mask_io.save_mask", "raft_core.utils.utils.load_image", "nn.ZeroPad2d", "images[].cuda", "outputs[].cuda", "video_frames[].cuda", "zip", "torch.no_grad", "torch.no_grad", "time.time", "model", "F.interpolate", "torch.argmax().float", "torch.argmax().float", "functions.AverageMeter.update", "torch.argmax().float.cpu", "functional.utils.f_boundary.db_eval_boundary", "functional.utils.jaccard.db_eval_iou", "fs.append", "js.append", "functions.AverageMeter.update", "functions.AverageMeter.update", "functions.AverageMeter.update", "functions.AverageMeter.update", "os.path.join", "[].cpu().numpy().astype", "functional.utils.mask_io.save_mask", "nn.ZeroPad2d.", "nn.ZeroPad2d.", "video_frames[].cuda", "raft_core.utils.utils.clamp_optical_flow", "optical_flows.append", "[].cpu().numpy", "nn.ZeroPad2d.", "torch.no_grad", "torch.no_grad", "of_model", "torch.argmax", "torch.argmax", "time.time", "[].cpu().numpy", "[].cpu", "[].cpu"], "function", ["home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.get_davis_ref_index", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.mask_io.save_mask", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.load_image", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.AverageMeter.update", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.f_boundary.db_eval_boundary", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.jaccard.db_eval_iou", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.AverageMeter.update", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.AverageMeter.update", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.AverageMeter.update", "home.repos.pwc.inspect_result.bo-miao_MAMP.None.functions.AverageMeter.update", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.mask_io.save_mask", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.clamp_optical_flow"], ["", "def", "evaluate", "(", "dataloader", ",", "model", ",", "log", ",", "of_model", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "Fs", "=", "AverageMeter", "(", ")", "\n", "Js", "=", "AverageMeter", "(", ")", "\n", "video_num", "=", "len", "(", "dataloader", ")", "\n", "folder", "=", "os", ".", "path", ".", "join", "(", "args", ".", "savepath", ",", "args", ".", "proc_name", ".", "split", "(", "'.'", ")", "[", "0", "]", ",", "'DAVIS'", ")", "\n", "try", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "folder", ")", "\n", "", "except", ":", "\n", "        ", "a", "=", "None", "\n", "", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "log", ".", "info", "(", "\"Start testing.\"", ")", "\n", "for", "video_index", ",", "(", "images", ",", "annotations", ",", "meta", ")", "in", "tqdm", "(", "enumerate", "(", "dataloader", ")", ")", ":", "\n", "        ", "PFs", "=", "AverageMeter", "(", ")", "\n", "PJs", "=", "AverageMeter", "(", ")", "\n", "ModelTime", "=", "AverageMeter", "(", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "args", ".", "is_amp", ")", ":", "\n", "            ", "video_name", "=", "meta", "[", "\"video_name\"", "]", "[", "0", "]", "\n", "annotation_index", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "meta", "[", "\"annotation_index\"", "]", "]", "\n", "frame_names", "=", "[", "x", "[", "0", "]", "for", "x", "in", "meta", "[", "\"frame_names\"", "]", "]", "\n", "height", ",", "width", "=", "meta", "[", "'height'", "]", "[", "0", "]", ".", "item", "(", ")", ",", "meta", "[", "'width'", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "padded_height", ",", "padded_width", "=", "height", ",", "width", "\n", "abs_frame_path", "=", "[", "x", "[", "0", "]", "for", "x", "in", "meta", "[", "\"abs_frame_path\"", "]", "]", "\n", "video_frames", "=", "None", "\n", "if", "args", ".", "optical_flow_warp", ":", "\n", "                ", "video_frames", "=", "[", "load_image", "(", "x", ")", "for", "x", "in", "abs_frame_path", "]", "\n", "\n", "", "if", "args", ".", "pad_divisible", ">", "1", ":", "\n", "                ", "divisible", "=", "args", ".", "pad_divisible", "\n", "cur_b", ",", "cur_c", ",", "cur_h", ",", "cur_w", "=", "images", "[", "0", "]", ".", "shape", "\n", "pad_h", "=", "0", "if", "(", "cur_h", "%", "divisible", ")", "==", "0", "else", "divisible", "-", "(", "cur_h", "%", "divisible", ")", "\n", "pad_w", "=", "0", "if", "(", "cur_w", "%", "divisible", ")", "==", "0", "else", "divisible", "-", "(", "cur_w", "%", "divisible", ")", "\n", "\n", "if", "(", "pad_h", "+", "pad_w", ")", "!=", "0", ":", "\n", "                    ", "pad", "=", "nn", ".", "ZeroPad2d", "(", "padding", "=", "(", "0", ",", "pad_w", ",", "0", ",", "pad_h", ")", ")", "\n", "images", "=", "[", "pad", "(", "x", ")", "for", "x", "in", "images", "]", "\n", "annotations", "=", "[", "pad", "(", "x", ")", "for", "x", "in", "annotations", "]", "\n", "video_frames", "=", "[", "pad", "(", "x", ")", "for", "x", "in", "video_frames", "]", "if", "args", ".", "optical_flow_warp", "else", "None", "\n", "padded_height", "+=", "pad_h", "\n", "padded_width", "+=", "pad_w", "\n", "\n", "", "", "outputs", "=", "[", "annotations", "[", "0", "]", ".", "contiguous", "(", ")", "]", "\n", "N", "=", "len", "(", "images", ")", "\n", "for", "i", "in", "range", "(", "N", "-", "1", ")", ":", "\n", "                ", "ref_index", "=", "get_davis_ref_index", "(", "i", ",", "2", ",", "args", ".", "memory_length", ")", "\n", "img_mem", "=", "[", "images", "[", "ind", "]", ".", "cuda", "(", ")", "for", "ind", "in", "ref_index", "]", "\n", "msk_mem", "=", "[", "outputs", "[", "ind", "]", ".", "cuda", "(", ")", "for", "ind", "in", "ref_index", "]", "\n", "img_query", "=", "images", "[", "i", "+", "1", "]", ".", "cuda", "(", ")", "\n", "msk_query", "=", "annotations", "[", "i", "+", "1", "]", ".", "cuda", "(", ")", "\n", "\n", "flow_img_mem", ",", "flow_img_query", ",", "optical_flows", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "if", "args", ".", "optical_flow_warp", ":", "\n", "                    ", "flow_img_mem", "=", "[", "video_frames", "[", "ind", "]", ".", "cuda", "(", ")", "for", "ind", "in", "ref_index", "]", "\n", "flow_img_query", "=", "video_frames", "[", "i", "+", "1", "]", ".", "cuda", "(", ")", "\n", "for", "img", ",", "ind", "in", "zip", "(", "flow_img_mem", ",", "ref_index", ")", ":", "\n", "                        ", "long_gap", "=", "15", "\n", "iter_num", "=", "5", "if", "(", "i", "+", "1", ")", "-", "ind", ">", "long_gap", "else", "2", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "_", ",", "flow_up", "=", "of_model", "(", "flow_img_query", ",", "img", ",", "iters", "=", "iter_num", ",", "test_mode", "=", "True", ",", "up_scale", "=", "2", ")", "\n", "", "flow_up", "=", "clamp_optical_flow", "(", "flow_up", ")", "\n", "optical_flows", ".", "append", "(", "flow_up", ")", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "s_", "=", "time", ".", "time", "(", ")", "\n", "_output", "=", "model", "(", "img_mem", ",", "msk_mem", ",", "img_query", ",", "optical_flows", ")", "\n", "_output", "=", "F", ".", "interpolate", "(", "_output", ",", "(", "padded_height", ",", "padded_width", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "output", "=", "torch", ".", "argmax", "(", "_output", ",", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "ModelTime", ".", "update", "(", "time", ".", "time", "(", ")", "-", "s_", ")", "\n", "\n", "", "outputs", ".", "append", "(", "output", ".", "cpu", "(", ")", ")", "\n", "max_class", "=", "msk_query", ".", "max", "(", ")", "\n", "js", ",", "fs", "=", "[", "]", ",", "[", "]", "\n", "for", "classid", "in", "range", "(", "1", ",", "max_class", "+", "1", ")", ":", "\n", "                    ", "obj_true", "=", "(", "msk_query", "[", ":", ",", ":", ",", ":", "height", ",", ":", "width", "]", "==", "classid", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", "# unpadding is required", "\n", "obj_pred", "=", "(", "output", "[", ":", ",", ":", ",", ":", "height", ",", ":", "width", "]", "==", "classid", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", "\n", "f", "=", "db_eval_boundary", "(", "obj_true", ",", "obj_pred", ")", "\n", "j", "=", "db_eval_iou", "(", "obj_true", ",", "obj_pred", ")", "\n", "fs", ".", "append", "(", "f", ")", "\n", "js", ".", "append", "(", "j", ")", "\n", "Fs", ".", "update", "(", "f", ")", "\n", "Js", ".", "update", "(", "j", ")", "\n", "PFs", ".", "update", "(", "f", ")", "\n", "PJs", ".", "update", "(", "j", ")", "\n", "\n", "", "output_folder", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "video_name", ")", "\n", "os", ".", "makedirs", "(", "output_folder", ",", "exist_ok", "=", "True", ")", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "output_file", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "frame_names", "[", "0", "]", ")", "\n", "out_img", "=", "annotations", "[", "0", "]", "[", "0", ",", "0", "]", "[", ":", "height", ",", ":", "width", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "save_mask", "(", "output_file", ",", "out_img", ")", "\n", "\n", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "frame_names", "[", "i", "+", "1", "]", ")", "\n", "out_img", "=", "output", "[", "0", ",", "0", "]", "[", ":", "height", ",", ":", "width", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "save_mask", "(", "output_file", ",", "out_img", ")", "\n", "\n", "# torch.cuda.empty_cache()", "\n", "\n", "# J&F accumulated performance; PJ&F performance on one video.", "\n", "", "", "performance", "=", "'\\t'", ".", "join", "(", "[", "\n", "'Js: ({:.3f}). Fs: ({:.3f}). J&F: ({:.4f}),  PJs: ({:.3f}). PFs: ({:.3f}). PJ&F: ({:.4f}). FPS: ({:.1f})'", "\n", ".", "format", "(", "Js", ".", "avg", ",", "Fs", ".", "avg", ",", "(", "Js", ".", "avg", "+", "Fs", ".", "avg", ")", "/", "2", ",", "PJs", ".", "avg", ",", "PFs", ".", "avg", ",", "(", "PJs", ".", "avg", "+", "PFs", ".", "avg", ")", "/", "2", ",", "1", "/", "ModelTime", ".", "avg", ")", "]", ")", "\n", "log", ".", "info", "(", "'[{}/{}] {}: {}'", ".", "format", "(", "video_index", "+", "1", ",", "video_num", ",", "video_name", ",", "performance", ")", ")", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.update.FlowHead.__init__": [[7, 12], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "128", ",", "hidden_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "FlowHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "hidden_dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "2", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.update.FlowHead.forward": [[13, 15], ["update.FlowHead.conv2", "update.FlowHead.relu", "update.FlowHead.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv2", "(", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.update.ConvGRU.__init__": [[17, 22], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", "=", "128", ",", "input_dim", "=", "192", "+", "128", ")", ":", "\n", "        ", "super", "(", "ConvGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convz", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "convr", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "convq", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.update.ConvGRU.forward": [[23, 32], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "update.ConvGRU.convz", "update.ConvGRU.convr", "update.ConvGRU.convq", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "x", ")", ":", "\n", "        ", "hx", "=", "torch", ".", "cat", "(", "[", "h", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "\n", "z", "=", "torch", ".", "sigmoid", "(", "self", ".", "convz", "(", "hx", ")", ")", "\n", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "convr", "(", "hx", ")", ")", "\n", "q", "=", "torch", ".", "tanh", "(", "self", ".", "convq", "(", "torch", ".", "cat", "(", "[", "r", "*", "h", ",", "x", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "\n", "h", "=", "(", "1", "-", "z", ")", "*", "h", "+", "z", "*", "q", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.update.SepConvGRU.__init__": [[34, 43], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", "=", "128", ",", "input_dim", "=", "192", "+", "128", ")", ":", "\n", "        ", "super", "(", "SepConvGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convz1", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "1", ",", "5", ")", ",", "padding", "=", "(", "0", ",", "2", ")", ")", "\n", "self", ".", "convr1", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "1", ",", "5", ")", ",", "padding", "=", "(", "0", ",", "2", ")", ")", "\n", "self", ".", "convq1", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "1", ",", "5", ")", ",", "padding", "=", "(", "0", ",", "2", ")", ")", "\n", "\n", "self", ".", "convz2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "0", ")", ")", "\n", "self", ".", "convr2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "0", ")", ")", "\n", "self", ".", "convq2", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "+", "input_dim", ",", "hidden_dim", ",", "(", "5", ",", "1", ")", ",", "padding", "=", "(", "2", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.update.SepConvGRU.forward": [[45, 61], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "update.SepConvGRU.convz1", "update.SepConvGRU.convr1", "update.SepConvGRU.convq1", "update.SepConvGRU.convz2", "update.SepConvGRU.convr2", "update.SepConvGRU.convq2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "x", ")", ":", "\n", "# horizontal", "\n", "        ", "hx", "=", "torch", ".", "cat", "(", "[", "h", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "z", "=", "torch", ".", "sigmoid", "(", "self", ".", "convz1", "(", "hx", ")", ")", "\n", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "convr1", "(", "hx", ")", ")", "\n", "q", "=", "torch", ".", "tanh", "(", "self", ".", "convq1", "(", "torch", ".", "cat", "(", "[", "r", "*", "h", ",", "x", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "h", "=", "(", "1", "-", "z", ")", "*", "h", "+", "z", "*", "q", "\n", "\n", "# vertical", "\n", "hx", "=", "torch", ".", "cat", "(", "[", "h", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "z", "=", "torch", ".", "sigmoid", "(", "self", ".", "convz2", "(", "hx", ")", ")", "\n", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "convr2", "(", "hx", ")", ")", "\n", "q", "=", "torch", ".", "tanh", "(", "self", ".", "convq2", "(", "torch", ".", "cat", "(", "[", "r", "*", "h", ",", "x", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "h", "=", "(", "1", "-", "z", ")", "*", "h", "+", "z", "*", "q", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.update.SmallMotionEncoder.__init__": [[63, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "SmallMotionEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cor_planes", "=", "args", ".", "corr_levels", "*", "(", "2", "*", "args", ".", "corr_radius", "+", "1", ")", "**", "2", "\n", "self", ".", "convc1", "=", "nn", ".", "Conv2d", "(", "cor_planes", ",", "96", ",", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "convf1", "=", "nn", ".", "Conv2d", "(", "2", ",", "64", ",", "7", ",", "padding", "=", "3", ")", "\n", "self", ".", "convf2", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "128", ",", "80", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.update.SmallMotionEncoder.forward": [[71, 78], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.SmallMotionEncoder.convc1", "update.SmallMotionEncoder.convf1", "update.SmallMotionEncoder.convf2", "update.SmallMotionEncoder.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "flow", ",", "corr", ")", ":", "\n", "        ", "cor", "=", "F", ".", "relu", "(", "self", ".", "convc1", "(", "corr", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "convf1", "(", "flow", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "convf2", "(", "flo", ")", ")", "\n", "cor_flo", "=", "torch", ".", "cat", "(", "[", "cor", ",", "flo", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "cor_flo", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "out", ",", "flow", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.update.BasicMotionEncoder.__init__": [[80, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "BasicMotionEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "cor_planes", "=", "args", ".", "corr_levels", "*", "(", "2", "*", "args", ".", "corr_radius", "+", "1", ")", "**", "2", "\n", "self", ".", "convc1", "=", "nn", ".", "Conv2d", "(", "cor_planes", ",", "256", ",", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "convc2", "=", "nn", ".", "Conv2d", "(", "256", ",", "192", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "convf1", "=", "nn", ".", "Conv2d", "(", "2", ",", "128", ",", "7", ",", "padding", "=", "3", ")", "\n", "self", ".", "convf2", "=", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "64", "+", "192", ",", "128", "-", "2", ",", "3", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.update.BasicMotionEncoder.forward": [[89, 98], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.BasicMotionEncoder.convc1", "update.BasicMotionEncoder.convc2", "update.BasicMotionEncoder.convf1", "update.BasicMotionEncoder.convf2", "update.BasicMotionEncoder.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "flow", ",", "corr", ")", ":", "\n", "        ", "cor", "=", "F", ".", "relu", "(", "self", ".", "convc1", "(", "corr", ")", ")", "\n", "cor", "=", "F", ".", "relu", "(", "self", ".", "convc2", "(", "cor", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "convf1", "(", "flow", ")", ")", "\n", "flo", "=", "F", ".", "relu", "(", "self", ".", "convf2", "(", "flo", ")", ")", "\n", "\n", "cor_flo", "=", "torch", ".", "cat", "(", "[", "cor", ",", "flo", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "cor_flo", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "out", ",", "flow", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.update.SmallUpdateBlock.__init__": [[100, 105], ["torch.Module.__init__", "update.SmallMotionEncoder", "update.ConvGRU", "update.FlowHead"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "hidden_dim", "=", "96", ")", ":", "\n", "        ", "super", "(", "SmallUpdateBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "SmallMotionEncoder", "(", "args", ")", "\n", "self", ".", "gru", "=", "ConvGRU", "(", "hidden_dim", "=", "hidden_dim", ",", "input_dim", "=", "82", "+", "64", ")", "\n", "self", ".", "flow_head", "=", "FlowHead", "(", "hidden_dim", ",", "hidden_dim", "=", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.update.SmallUpdateBlock.forward": [[106, 113], ["update.SmallUpdateBlock.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.SmallUpdateBlock.gru", "update.SmallUpdateBlock.flow_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net", ",", "inp", ",", "corr", ",", "flow", ")", ":", "\n", "        ", "motion_features", "=", "self", ".", "encoder", "(", "flow", ",", "corr", ")", "\n", "inp", "=", "torch", ".", "cat", "(", "[", "inp", ",", "motion_features", "]", ",", "dim", "=", "1", ")", "\n", "net", "=", "self", ".", "gru", "(", "net", ",", "inp", ")", "\n", "delta_flow", "=", "self", ".", "flow_head", "(", "net", ")", "\n", "\n", "return", "net", ",", "None", ",", "delta_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.update.BasicUpdateBlock.__init__": [[115, 126], ["torch.Module.__init__", "update.BasicMotionEncoder", "update.SepConvGRU", "update.FlowHead", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "hidden_dim", "=", "128", ",", "input_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "BasicUpdateBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "encoder", "=", "BasicMotionEncoder", "(", "args", ")", "\n", "self", ".", "gru", "=", "SepConvGRU", "(", "hidden_dim", "=", "hidden_dim", ",", "input_dim", "=", "128", "+", "hidden_dim", ")", "\n", "self", ".", "flow_head", "=", "FlowHead", "(", "hidden_dim", ",", "hidden_dim", "=", "256", ")", "\n", "\n", "self", ".", "mask", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "64", "*", "9", ",", "1", ",", "padding", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.update.BasicUpdateBlock.forward": [[128, 138], ["update.BasicUpdateBlock.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.BasicUpdateBlock.gru", "update.BasicUpdateBlock.flow_head", "update.BasicUpdateBlock.mask"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net", ",", "inp", ",", "corr", ",", "flow", ",", "upsample", "=", "True", ")", ":", "\n", "        ", "motion_features", "=", "self", ".", "encoder", "(", "flow", ",", "corr", ")", "\n", "inp", "=", "torch", ".", "cat", "(", "[", "inp", ",", "motion_features", "]", ",", "dim", "=", "1", ")", "\n", "\n", "net", "=", "self", ".", "gru", "(", "net", ",", "inp", ")", "\n", "delta_flow", "=", "self", ".", "flow_head", "(", "net", ")", "\n", "\n", "# scale mask to balence gradients", "\n", "mask", "=", ".25", "*", "self", ".", "mask", "(", "net", ")", "\n", "return", "net", ",", "mask", ",", "delta_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.corr.CorrBlock.__init__": [[14, 29], ["CorrBlock.corr", "torch.avg_pool2d.reshape", "F.avg_pool2d.CorrBlock.corr_pyramid.append", "range", "torch.avg_pool2d", "torch.avg_pool2d", "F.avg_pool2d.CorrBlock.corr_pyramid.append"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.corr.CorrBlock.corr"], ["    ", "def", "__init__", "(", "self", ",", "fmap1", ",", "fmap2", ",", "num_levels", "=", "4", ",", "radius", "=", "4", ")", ":", "\n", "        ", "self", ".", "num_levels", "=", "num_levels", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "corr_pyramid", "=", "[", "]", "\n", "\n", "# all pairs correlation", "\n", "corr", "=", "CorrBlock", ".", "corr", "(", "fmap1", ",", "fmap2", ")", "\n", "\n", "batch", ",", "h1", ",", "w1", ",", "dim", ",", "h2", ",", "w2", "=", "corr", ".", "shape", "\n", "corr", "=", "corr", ".", "reshape", "(", "batch", "*", "h1", "*", "w1", ",", "dim", ",", "h2", ",", "w2", ")", "\n", "# high to low resolution", "\n", "self", ".", "corr_pyramid", ".", "append", "(", "corr", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", "-", "1", ")", ":", "\n", "            ", "corr", "=", "F", ".", "avg_pool2d", "(", "corr", ",", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "corr_pyramid", ".", "append", "(", "corr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.corr.CorrBlock.__call__": [[30, 55], ["coords.permute.permute.permute", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.permute().contiguous().float", "torch.cat.permute().contiguous().float", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to.view", "torch.stack().to.view", "utils.utils.bilinear_sampler", "corr.view.view.view", "out_pyramid.append", "coords.permute.permute.reshape", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.cat.permute", "torch.cat.permute"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.bilinear_sampler"], ["", "", "def", "__call__", "(", "self", ",", "coords", ")", ":", "\n", "        ", "r", "=", "self", ".", "radius", "\n", "# BxHxWx2", "\n", "coords", "=", "coords", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "batch", ",", "h1", ",", "w1", ",", "_", "=", "coords", ".", "shape", "\n", "\n", "out_pyramid", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "corr", "=", "self", ".", "corr_pyramid", "[", "i", "]", "\n", "dx", "=", "torch", ".", "linspace", "(", "-", "r", ",", "r", ",", "2", "*", "r", "+", "1", ")", "\n", "dy", "=", "torch", ".", "linspace", "(", "-", "r", ",", "r", ",", "2", "*", "r", "+", "1", ")", "\n", "# DYxDXx2 (-r\u5230r\u5750\u6807\u503c)", "\n", "delta", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "dy", ",", "dx", ")", ",", "axis", "=", "-", "1", ")", ".", "to", "(", "coords", ".", "device", ")", "\n", "# Normalize because of different sieze of pyramid corr", "\n", "centroid_lvl", "=", "coords", ".", "reshape", "(", "batch", "*", "h1", "*", "w1", ",", "1", ",", "1", ",", "2", ")", "/", "2", "**", "i", "\n", "delta_lvl", "=", "delta", ".", "view", "(", "1", ",", "2", "*", "r", "+", "1", ",", "2", "*", "r", "+", "1", ",", "2", ")", "\n", "# BHWx1x1x2 (0-N\u5750\u6807\u503c) + DYxDXx2 (-r\u5230r\u5750\u6807\u503c) = (BxHxW, DY, DX, 2) \u6bcf\u4e2a\u7a7a\u95f4\u70b9\u534a\u5f84\u4e3ar\u7684\u5750\u6807", "\n", "coords_lvl", "=", "centroid_lvl", "+", "delta_lvl", "\n", "# \u6839\u636e\u6bcf\u4e2a\u7a7a\u95f4\u70b9\u7684\u5750\u6807patch \u53bbcorr\u641c\u7d22\u5bf9\u5e94\u503c", "\n", "corr", "=", "bilinear_sampler", "(", "corr", ",", "coords_lvl", ")", "\n", "corr", "=", "corr", ".", "view", "(", "batch", ",", "h1", ",", "w1", ",", "-", "1", ")", "\n", "out_pyramid", ".", "append", "(", "corr", ")", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "out_pyramid", ",", "dim", "=", "-", "1", ")", "\n", "return", "out", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.corr.CorrBlock.corr": [[56, 65], ["fmap1.view.view.view", "fmap2.view.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corr.view.view.view", "fmap1.view.view.transpose", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "corr", "(", "fmap1", ",", "fmap2", ")", ":", "\n", "        ", "batch", ",", "dim", ",", "ht", ",", "wd", "=", "fmap1", ".", "shape", "\n", "fmap1", "=", "fmap1", ".", "view", "(", "batch", ",", "dim", ",", "ht", "*", "wd", ")", "\n", "fmap2", "=", "fmap2", ".", "view", "(", "batch", ",", "dim", ",", "ht", "*", "wd", ")", "\n", "\n", "corr", "=", "torch", ".", "matmul", "(", "fmap1", ".", "transpose", "(", "1", ",", "2", ")", ",", "fmap2", ")", "\n", "corr", "=", "corr", ".", "view", "(", "batch", ",", "ht", ",", "wd", ",", "1", ",", "ht", ",", "wd", ")", "\n", "return", "corr", "/", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "dim", ")", ".", "float", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.corr.AlternateCorrBlock.__init__": [[68, 77], ["range", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "corr.AlternateCorrBlock.pyramid.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fmap1", ",", "fmap2", ",", "num_levels", "=", "4", ",", "radius", "=", "4", ")", ":", "\n", "        ", "self", ".", "num_levels", "=", "num_levels", "\n", "self", ".", "radius", "=", "radius", "\n", "\n", "self", ".", "pyramid", "=", "[", "(", "fmap1", ",", "fmap2", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "fmap1", "=", "F", ".", "avg_pool2d", "(", "fmap1", ",", "2", ",", "stride", "=", "2", ")", "\n", "fmap2", "=", "F", ".", "avg_pool2d", "(", "fmap2", ",", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "pyramid", ".", "append", "(", "(", "fmap1", ",", "fmap2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.corr.AlternateCorrBlock.__call__": [[78, 96], ["coords.permute.permute.permute", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "corr.reshape.reshape.reshape", "[].permute().contiguous", "[].permute().contiguous", "alt_cuda_corr.forward", "corr_list.append", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "corr.reshape.reshape.squeeze", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "[].permute", "[].permute", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.forward"], ["", "", "def", "__call__", "(", "self", ",", "coords", ")", ":", "\n", "        ", "coords", "=", "coords", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "B", ",", "H", ",", "W", ",", "_", "=", "coords", ".", "shape", "\n", "dim", "=", "self", ".", "pyramid", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "\n", "corr_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "r", "=", "self", ".", "radius", "\n", "fmap1_i", "=", "self", ".", "pyramid", "[", "0", "]", "[", "0", "]", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "fmap2_i", "=", "self", ".", "pyramid", "[", "i", "]", "[", "1", "]", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "coords_i", "=", "(", "coords", "/", "2", "**", "i", ")", ".", "reshape", "(", "B", ",", "1", ",", "H", ",", "W", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "corr", ",", "=", "alt_cuda_corr", ".", "forward", "(", "fmap1_i", ",", "fmap2_i", ",", "coords_i", ",", "r", ")", "\n", "corr_list", ".", "append", "(", "corr", ".", "squeeze", "(", "1", ")", ")", "\n", "\n", "", "corr", "=", "torch", ".", "stack", "(", "corr_list", ",", "dim", "=", "1", ")", "\n", "corr", "=", "corr", ".", "reshape", "(", "B", ",", "-", "1", ",", "H", ",", "W", ")", "\n", "return", "corr", "/", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "dim", ")", ".", "float", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.ResidualBlock.__init__": [[7, 46], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "norm_fn", "=", "'group'", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "stride", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "num_groups", "=", "planes", "//", "8", "\n", "\n", "if", "norm_fn", "==", "'group'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm3", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'batch'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'instance'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'none'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm3", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "", "if", "stride", "==", "1", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", ",", "self", ".", "norm3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.ResidualBlock.forward": [[48, 57], ["extractor.ResidualBlock.relu", "extractor.ResidualBlock.relu", "extractor.ResidualBlock.relu", "extractor.ResidualBlock.norm1", "extractor.ResidualBlock.norm2", "extractor.ResidualBlock.downsample", "extractor.ResidualBlock.conv1", "extractor.ResidualBlock.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm1", "(", "self", ".", "conv1", "(", "y", ")", ")", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "relu", "(", "x", "+", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.BottleneckBlock.__init__": [[61, 105], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "norm_fn", "=", "'group'", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", "//", "4", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "4", ",", "planes", "//", "4", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "stride", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", "//", "4", ",", "planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "num_groups", "=", "planes", "//", "8", "\n", "\n", "if", "norm_fn", "==", "'group'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", "//", "4", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", "//", "4", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm4", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "num_groups", ",", "num_channels", "=", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'batch'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "planes", "//", "4", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm2d", "(", "planes", "//", "4", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm4", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'instance'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "planes", "//", "4", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "planes", "//", "4", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm4", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "\n", "", "", "elif", "norm_fn", "==", "'none'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "not", "stride", "==", "1", ":", "\n", "                ", "self", ".", "norm4", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "", "if", "stride", "==", "1", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", ",", "self", ".", "norm4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.BottleneckBlock.forward": [[107, 117], ["extractor.BottleneckBlock.relu", "extractor.BottleneckBlock.relu", "extractor.BottleneckBlock.relu", "extractor.BottleneckBlock.relu", "extractor.BottleneckBlock.norm1", "extractor.BottleneckBlock.norm2", "extractor.BottleneckBlock.norm3", "extractor.BottleneckBlock.downsample", "extractor.BottleneckBlock.conv1", "extractor.BottleneckBlock.conv2", "extractor.BottleneckBlock.conv3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm1", "(", "self", ".", "conv1", "(", "y", ")", ")", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "norm3", "(", "self", ".", "conv3", "(", "y", ")", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "relu", "(", "x", "+", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.BasicEncoder.__init__": [[119, 158], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "extractor.BasicEncoder._make_layer", "extractor.BasicEncoder._make_layer", "extractor.BasicEncoder._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "extractor.BasicEncoder.modules", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "isinstance", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__", "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.SmallEncoder._make_layer", "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.SmallEncoder._make_layer", "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.SmallEncoder._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "output_dim", "=", "128", ",", "norm_fn", "=", "'batch'", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_fn", "=", "norm_fn", "\n", "\n", "if", "self", ".", "norm_fn", "==", "'group'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "8", ",", "num_channels", "=", "64", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'batch'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'instance'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "64", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'none'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "64", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "96", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "128", ",", "stride", "=", "2", ")", "\n", "\n", "# output convolution", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "128", ",", "output_dim", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "dropout", "=", "None", "\n", "if", "dropout", ">", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "dropout", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "InstanceNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.BasicEncoder._make_layer": [[159, 166], ["extractor.ResidualBlock", "extractor.ResidualBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "dim", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layer1", "=", "ResidualBlock", "(", "self", ".", "in_planes", ",", "dim", ",", "self", ".", "norm_fn", ",", "stride", "=", "stride", ")", "\n", "layer2", "=", "ResidualBlock", "(", "dim", ",", "dim", ",", "self", ".", "norm_fn", ",", "stride", "=", "1", ")", "\n", "layers", "=", "(", "layer1", ",", "layer2", ")", "\n", "\n", "self", ".", "in_planes", "=", "dim", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.BasicEncoder.forward": [[168, 193], ["extractor.BasicEncoder.conv1", "extractor.BasicEncoder.norm1", "extractor.BasicEncoder.relu1", "extractor.BasicEncoder.layer1", "extractor.BasicEncoder.layer2", "extractor.BasicEncoder.layer3", "extractor.BasicEncoder.conv2", "isinstance", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "extractor.BasicEncoder.dropout", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "# if input is list, combine batch dimension", "\n", "        ", "is_list", "=", "isinstance", "(", "x", ",", "tuple", ")", "or", "isinstance", "(", "x", ",", "list", ")", "\n", "if", "is_list", ":", "\n", "            ", "batch_dim", "=", "x", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", "\n", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "if", "is_list", ":", "\n", "            ", "x", "=", "torch", ".", "split", "(", "x", ",", "[", "batch_dim", ",", "batch_dim", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.SmallEncoder.__init__": [[196, 234], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "extractor.SmallEncoder._make_layer", "extractor.SmallEncoder._make_layer", "extractor.SmallEncoder._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "extractor.SmallEncoder.modules", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "isinstance", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__", "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.SmallEncoder._make_layer", "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.SmallEncoder._make_layer", "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.SmallEncoder._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "output_dim", "=", "128", ",", "norm_fn", "=", "'batch'", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "SmallEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_fn", "=", "norm_fn", "\n", "\n", "if", "self", ".", "norm_fn", "==", "'group'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "8", ",", "num_channels", "=", "32", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'batch'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'instance'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "32", ")", "\n", "\n", "", "elif", "self", ".", "norm_fn", "==", "'none'", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "in_planes", "=", "32", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "32", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "64", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "96", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "dropout", "=", "None", "\n", "if", "dropout", ">", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "dropout", ")", "\n", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "96", ",", "output_dim", ",", "kernel_size", "=", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "InstanceNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.SmallEncoder._make_layer": [[235, 242], ["extractor.BottleneckBlock", "extractor.BottleneckBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "dim", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layer1", "=", "BottleneckBlock", "(", "self", ".", "in_planes", ",", "dim", ",", "self", ".", "norm_fn", ",", "stride", "=", "stride", ")", "\n", "layer2", "=", "BottleneckBlock", "(", "dim", ",", "dim", ",", "self", ".", "norm_fn", ",", "stride", "=", "1", ")", "\n", "layers", "=", "(", "layer1", ",", "layer2", ")", "\n", "\n", "self", ".", "in_planes", "=", "dim", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.extractor.SmallEncoder.forward": [[244, 268], ["extractor.SmallEncoder.conv1", "extractor.SmallEncoder.norm1", "extractor.SmallEncoder.relu1", "extractor.SmallEncoder.layer1", "extractor.SmallEncoder.layer2", "extractor.SmallEncoder.layer3", "extractor.SmallEncoder.conv2", "isinstance", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "extractor.SmallEncoder.dropout", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "# if input is list, combine batch dimension", "\n", "        ", "is_list", "=", "isinstance", "(", "x", ",", "tuple", ")", "or", "isinstance", "(", "x", ",", "list", ")", "\n", "if", "is_list", ":", "\n", "            ", "batch_dim", "=", "x", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "0", ")", "\n", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "if", "is_list", ":", "\n", "            ", "x", "=", "torch", ".", "split", "(", "x", ",", "[", "batch_dim", ",", "batch_dim", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.raft.RAFT.__init__": [[36, 68], ["torch.Module.__init__", "extractor.SmallEncoder", "extractor.SmallEncoder", "update.SmallUpdateBlock", "extractor.BasicEncoder", "extractor.BasicEncoder", "update.BasicUpdateBlock"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "RAFT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "if", "args", ".", "small", ":", "\n", "            ", "self", ".", "hidden_dim", "=", "hdim", "=", "96", "\n", "self", ".", "context_dim", "=", "cdim", "=", "64", "\n", "args", ".", "corr_levels", "=", "4", "\n", "args", ".", "corr_radius", "=", "3", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "hidden_dim", "=", "hdim", "=", "128", "\n", "self", ".", "context_dim", "=", "cdim", "=", "128", "\n", "args", ".", "corr_levels", "=", "4", "\n", "args", ".", "corr_radius", "=", "4", "\n", "\n", "", "if", "'dropout'", "not", "in", "self", ".", "args", ":", "\n", "            ", "self", ".", "args", ".", "dropout", "=", "0", "\n", "\n", "", "if", "'alternate_corr'", "not", "in", "self", ".", "args", ":", "\n", "            ", "self", ".", "args", ".", "alternate_corr", "=", "False", "\n", "\n", "# feature network, context network, and update block", "\n", "", "if", "args", ".", "small", ":", "\n", "            ", "self", ".", "fnet", "=", "SmallEncoder", "(", "output_dim", "=", "128", ",", "norm_fn", "=", "'instance'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "cnet", "=", "SmallEncoder", "(", "output_dim", "=", "hdim", "+", "cdim", ",", "norm_fn", "=", "'none'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "update_block", "=", "SmallUpdateBlock", "(", "self", ".", "args", ",", "hidden_dim", "=", "hdim", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "fnet", "=", "BasicEncoder", "(", "output_dim", "=", "256", ",", "norm_fn", "=", "'instance'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "cnet", "=", "BasicEncoder", "(", "output_dim", "=", "hdim", "+", "cdim", ",", "norm_fn", "=", "'batch'", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "update_block", "=", "BasicUpdateBlock", "(", "self", ".", "args", ",", "hidden_dim", "=", "hdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.raft.RAFT.freeze_bn": [[69, 73], ["raft.RAFT.modules", "isinstance", "m.eval"], "methods", ["None"], ["", "", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.raft.RAFT.initialize_flow": [[74, 82], ["utils.utils.coords_grid().to", "utils.utils.coords_grid().to", "utils.utils.coords_grid", "utils.utils.coords_grid"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.coords_grid", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.coords_grid"], ["", "", "", "def", "initialize_flow", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\" Flow is represented as difference between two coordinate grids flow = coords1 - coords0\"\"\"", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "img", ".", "shape", "\n", "coords0", "=", "coords_grid", "(", "N", ",", "H", "//", "8", ",", "W", "//", "8", ")", ".", "to", "(", "img", ".", "device", ")", "\n", "coords1", "=", "coords_grid", "(", "N", ",", "H", "//", "8", ",", "W", "//", "8", ")", ".", "to", "(", "img", ".", "device", ")", "\n", "\n", "# optical flow computed as difference: flow = coords1 - coords0", "\n", "return", "coords0", ",", "coords1", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.raft.RAFT.upsample_flow": [[83, 95], ["torch.softmax.view", "torch.softmax.view", "torch.softmax.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.unfold", "torch.unfold", "torch.unfold", "up_flow.permute.permute.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "up_flow.permute.permute.permute", "up_flow.permute.permute.reshape"], "methods", ["None"], ["", "def", "upsample_flow", "(", "self", ",", "flow", ",", "mask", ")", ":", "\n", "        ", "\"\"\" Upsample flow field [H/8, W/8, 2] -> [H, W, 2] using convex combination \"\"\"", "\n", "N", ",", "_", ",", "H", ",", "W", "=", "flow", ".", "shape", "\n", "mask", "=", "mask", ".", "view", "(", "N", ",", "1", ",", "9", ",", "8", ",", "8", ",", "H", ",", "W", ")", "\n", "mask", "=", "torch", ".", "softmax", "(", "mask", ",", "dim", "=", "2", ")", "\n", "\n", "up_flow", "=", "F", ".", "unfold", "(", "8", "*", "flow", ",", "[", "3", ",", "3", "]", ",", "padding", "=", "1", ")", "\n", "up_flow", "=", "up_flow", ".", "view", "(", "N", ",", "2", ",", "9", ",", "1", ",", "1", ",", "H", ",", "W", ")", "\n", "\n", "up_flow", "=", "torch", ".", "sum", "(", "mask", "*", "up_flow", ",", "dim", "=", "2", ")", "\n", "up_flow", "=", "up_flow", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "5", ",", "3", ")", "\n", "return", "up_flow", ".", "reshape", "(", "N", ",", "2", ",", "8", "*", "H", ",", "8", "*", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.raft.RAFT.forward": [[97, 152], ["image1.contiguous.contiguous.contiguous", "image2.contiguous.contiguous.contiguous", "fmap1.float.float.float", "fmap2.float.float.float", "raft.RAFT.initialize_flow", "range", "autocast", "raft.RAFT.fnet", "corr_fn.AlternateCorrBlock", "corr_fn.CorrBlock", "autocast", "raft.RAFT.cnet", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "coords1.detach.detach.detach", "corr_fn.CorrBlock.", "utils.utils.upflow", "flow_predictions.append", "autocast", "raft.RAFT.update_block"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.raft.RAFT.initialize_flow", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.upflow"], ["", "def", "forward", "(", "self", ",", "image1", ",", "image2", ",", "iters", "=", "12", ",", "flow_init", "=", "None", ",", "upsample", "=", "True", ",", "test_mode", "=", "False", ",", "up_scale", "=", "8", ")", ":", "\n", "        ", "\"\"\" Estimate optical flow between pair of frames \"\"\"", "\n", "\n", "image1", "=", "2", "*", "(", "image1", "/", "255.0", ")", "-", "1.0", "\n", "image2", "=", "2", "*", "(", "image2", "/", "255.0", ")", "-", "1.0", "\n", "\n", "image1", "=", "image1", ".", "contiguous", "(", ")", "\n", "image2", "=", "image2", ".", "contiguous", "(", ")", "\n", "\n", "hdim", "=", "self", ".", "hidden_dim", "\n", "cdim", "=", "self", ".", "context_dim", "\n", "\n", "# run the feature network", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "mixed_precision", ")", ":", "\n", "            ", "fmap1", ",", "fmap2", "=", "self", ".", "fnet", "(", "[", "image1", ",", "image2", "]", ")", "\n", "\n", "", "fmap1", "=", "fmap1", ".", "float", "(", ")", "\n", "fmap2", "=", "fmap2", ".", "float", "(", ")", "\n", "if", "self", ".", "args", ".", "alternate_corr", ":", "\n", "            ", "corr_fn", "=", "AlternateCorrBlock", "(", "fmap1", ",", "fmap2", ",", "radius", "=", "self", ".", "args", ".", "corr_radius", ")", "\n", "", "else", ":", "\n", "            ", "corr_fn", "=", "CorrBlock", "(", "fmap1", ",", "fmap2", ",", "radius", "=", "self", ".", "args", ".", "corr_radius", ")", "\n", "\n", "# run the context network", "\n", "", "with", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "mixed_precision", ")", ":", "\n", "            ", "cnet", "=", "self", ".", "cnet", "(", "image1", ")", "\n", "net", ",", "inp", "=", "torch", ".", "split", "(", "cnet", ",", "[", "hdim", ",", "cdim", "]", ",", "dim", "=", "1", ")", "\n", "net", "=", "torch", ".", "tanh", "(", "net", ")", "\n", "inp", "=", "torch", ".", "relu", "(", "inp", ")", "\n", "\n", "", "coords0", ",", "coords1", "=", "self", ".", "initialize_flow", "(", "image1", ")", "\n", "\n", "if", "flow_init", "is", "not", "None", ":", "\n", "            ", "coords1", "=", "coords1", "+", "flow_init", "\n", "\n", "", "flow_predictions", "=", "[", "]", "\n", "for", "itr", "in", "range", "(", "iters", ")", ":", "\n", "            ", "coords1", "=", "coords1", ".", "detach", "(", ")", "\n", "corr", "=", "corr_fn", "(", "coords1", ")", "# index correlation volume", "\n", "\n", "flow", "=", "coords1", "-", "coords0", "\n", "with", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "mixed_precision", ")", ":", "\n", "                ", "net", ",", "up_mask", ",", "delta_flow", "=", "self", ".", "update_block", "(", "net", ",", "inp", ",", "corr", ",", "flow", ")", "\n", "\n", "# F(t+1) = F(t) + \\Delta(t)", "\n", "", "coords1", "=", "coords1", "+", "delta_flow", "\n", "\n", "flow_up", "=", "upflow", "(", "coords1", "-", "coords0", ",", "up_scale", ")", "\n", "\n", "flow_predictions", ".", "append", "(", "flow_up", ")", "\n", "\n", "", "if", "test_mode", ":", "\n", "            ", "return", "coords1", "-", "coords0", ",", "flow_up", "\n", "\n", "", "return", "flow_predictions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.datasets.FlowDataset.__init__": [[19, 33], ["utils.augmentor.SparseFlowAugmentor", "utils.augmentor.FlowAugmentor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "sparse", "=", "False", ")", ":", "\n", "        ", "self", ".", "augmentor", "=", "None", "\n", "self", ".", "sparse", "=", "sparse", "\n", "if", "aug_params", "is", "not", "None", ":", "\n", "            ", "if", "sparse", ":", "\n", "                ", "self", ".", "augmentor", "=", "SparseFlowAugmentor", "(", "**", "aug_params", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "augmentor", "=", "FlowAugmentor", "(", "**", "aug_params", ")", "\n", "\n", "", "", "self", ".", "is_test", "=", "False", "\n", "self", ".", "init_seed", "=", "False", "\n", "self", ".", "flow_list", "=", "[", "]", "\n", "self", ".", "image_list", "=", "[", "]", "\n", "self", ".", "extra_info", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.datasets.FlowDataset.__getitem__": [[34, 91], ["utils.frame_utils.read_gen", "utils.frame_utils.read_gen", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "utils.frame_utils.read_gen", "utils.frame_utils.read_gen", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "len", "utils.frame_utils.readFlowKITTI", "utils.frame_utils.read_gen", "len", "numpy.tile", "numpy.tile", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.float", "torch.from_numpy.float", "torch.from_numpy.float", "numpy.array().astype", "numpy.array().astype", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "numpy.array", "numpy.array", "numpy.array", "datasets.FlowDataset.augmentor", "datasets.FlowDataset.augmentor", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "flow[].abs", "flow[].abs", "numpy.array", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.read_gen", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.readFlowKITTI", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.read_gen"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "if", "self", ".", "is_test", ":", "\n", "            ", "img1", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "0", "]", ")", "\n", "img2", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "1", "]", ")", "\n", "img1", "=", "np", ".", "array", "(", "img1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", "...", ",", ":", "3", "]", "\n", "img2", "=", "np", ".", "array", "(", "img2", ")", ".", "astype", "(", "np", ".", "uint8", ")", "[", "...", ",", ":", "3", "]", "\n", "img1", "=", "torch", ".", "from_numpy", "(", "img1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "img2", "=", "torch", ".", "from_numpy", "(", "img2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "return", "img1", ",", "img2", ",", "self", ".", "extra_info", "[", "index", "]", "\n", "\n", "", "if", "not", "self", ".", "init_seed", ":", "\n", "            ", "worker_info", "=", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "\n", "if", "worker_info", "is", "not", "None", ":", "\n", "                ", "torch", ".", "manual_seed", "(", "worker_info", ".", "id", ")", "\n", "np", ".", "random", ".", "seed", "(", "worker_info", ".", "id", ")", "\n", "random", ".", "seed", "(", "worker_info", ".", "id", ")", "\n", "self", ".", "init_seed", "=", "True", "\n", "\n", "", "", "index", "=", "index", "%", "len", "(", "self", ".", "image_list", ")", "\n", "valid", "=", "None", "\n", "if", "self", ".", "sparse", ":", "\n", "            ", "flow", ",", "valid", "=", "frame_utils", ".", "readFlowKITTI", "(", "self", ".", "flow_list", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "            ", "flow", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "flow_list", "[", "index", "]", ")", "\n", "\n", "", "img1", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "0", "]", ")", "\n", "img2", "=", "frame_utils", ".", "read_gen", "(", "self", ".", "image_list", "[", "index", "]", "[", "1", "]", ")", "\n", "\n", "flow", "=", "np", ".", "array", "(", "flow", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img1", "=", "np", ".", "array", "(", "img1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img2", "=", "np", ".", "array", "(", "img2", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# grayscale images", "\n", "if", "len", "(", "img1", ".", "shape", ")", "==", "2", ":", "\n", "            ", "img1", "=", "np", ".", "tile", "(", "img1", "[", "...", ",", "None", "]", ",", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "img2", "=", "np", ".", "tile", "(", "img2", "[", "...", ",", "None", "]", ",", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "            ", "img1", "=", "img1", "[", "...", ",", ":", "3", "]", "\n", "img2", "=", "img2", "[", "...", ",", ":", "3", "]", "\n", "\n", "", "if", "self", ".", "augmentor", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "sparse", ":", "\n", "                ", "img1", ",", "img2", ",", "flow", ",", "valid", "=", "self", ".", "augmentor", "(", "img1", ",", "img2", ",", "flow", ",", "valid", ")", "\n", "", "else", ":", "\n", "                ", "img1", ",", "img2", ",", "flow", "=", "self", ".", "augmentor", "(", "img1", ",", "img2", ",", "flow", ")", "\n", "\n", "", "", "img1", "=", "torch", ".", "from_numpy", "(", "img1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "img2", "=", "torch", ".", "from_numpy", "(", "img2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "flow", "=", "torch", ".", "from_numpy", "(", "flow", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "if", "valid", "is", "not", "None", ":", "\n", "            ", "valid", "=", "torch", ".", "from_numpy", "(", "valid", ")", "\n", "", "else", ":", "\n", "            ", "valid", "=", "(", "flow", "[", "0", "]", ".", "abs", "(", ")", "<", "1000", ")", "&", "(", "flow", "[", "1", "]", ".", "abs", "(", ")", "<", "1000", ")", "\n", "\n", "", "return", "img1", ",", "img2", ",", "flow", ",", "valid", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.datasets.FlowDataset.__rmul__": [[93, 97], ["None"], "methods", ["None"], ["", "def", "__rmul__", "(", "self", ",", "v", ")", ":", "\n", "        ", "self", ".", "flow_list", "=", "v", "*", "self", ".", "flow_list", "\n", "self", ".", "image_list", "=", "v", "*", "self", ".", "image_list", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.datasets.FlowDataset.__len__": [[98, 100], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.datasets.MpiSintel.__init__": [[103, 119], ["datasets.FlowDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "sorted", "range", "glob.glob.glob", "sorted", "os.join", "os.join", "len", "glob.glob.glob", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "split", "=", "'training'", ",", "root", "=", "'datasets/Sintel'", ",", "dstype", "=", "'clean'", ")", ":", "\n", "        ", "super", "(", "MpiSintel", ",", "self", ")", ".", "__init__", "(", "aug_params", ")", "\n", "flow_root", "=", "osp", ".", "join", "(", "root", ",", "split", ",", "'flow'", ")", "\n", "image_root", "=", "osp", ".", "join", "(", "root", ",", "split", ",", "dstype", ")", "\n", "\n", "if", "split", "==", "'test'", ":", "\n", "            ", "self", ".", "is_test", "=", "True", "\n", "\n", "", "for", "scene", "in", "os", ".", "listdir", "(", "image_root", ")", ":", "\n", "            ", "image_list", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "image_root", ",", "scene", ",", "'*.png'", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "image_list", ")", "-", "1", ")", ":", "\n", "                ", "self", ".", "image_list", "+=", "[", "[", "image_list", "[", "i", "]", ",", "image_list", "[", "i", "+", "1", "]", "]", "]", "\n", "self", ".", "extra_info", "+=", "[", "(", "scene", ",", "i", ")", "]", "# scene and frame_id", "\n", "\n", "", "if", "split", "!=", "'test'", ":", "\n", "                ", "self", ".", "flow_list", "+=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "flow_root", ",", "scene", ",", "'*.flo'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.datasets.FlyingChairs.__init__": [[122, 135], ["datasets.FlowDataset.__init__", "sorted", "sorted", "numpy.loadtxt", "range", "glob.glob.glob", "glob.glob.glob", "len", "len", "os.join", "os.join", "os.join", "os.join", "len"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "split", "=", "'train'", ",", "root", "=", "'datasets/FlyingChairs_release/data'", ")", ":", "\n", "        ", "super", "(", "FlyingChairs", ",", "self", ")", ".", "__init__", "(", "aug_params", ")", "\n", "\n", "images", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'*.ppm'", ")", ")", ")", "\n", "flows", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'*.flo'", ")", ")", ")", "\n", "assert", "(", "len", "(", "images", ")", "//", "2", "==", "len", "(", "flows", ")", ")", "\n", "\n", "split_list", "=", "np", ".", "loadtxt", "(", "'chairs_split.txt'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "flows", ")", ")", ":", "\n", "            ", "xid", "=", "split_list", "[", "i", "]", "\n", "if", "(", "split", "==", "'training'", "and", "xid", "==", "1", ")", "or", "(", "split", "==", "'validation'", "and", "xid", "==", "2", ")", ":", "\n", "                ", "self", ".", "flow_list", "+=", "[", "flows", "[", "i", "]", "]", "\n", "self", ".", "image_list", "+=", "[", "[", "images", "[", "2", "*", "i", "]", ",", "images", "[", "2", "*", "i", "+", "1", "]", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.datasets.FlyingThings3D.__init__": [[138, 159], ["datasets.FlowDataset.__init__", "sorted", "sorted", "sorted", "sorted", "zip", "glob.glob.glob", "glob.glob.glob", "sorted", "sorted", "range", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "glob.glob.glob", "glob.glob.glob", "os.join", "os.join", "os.join", "os.join", "len"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "root", "=", "'datasets/FlyingThings3D'", ",", "dstype", "=", "'frames_cleanpass'", ")", ":", "\n", "        ", "super", "(", "FlyingThings3D", ",", "self", ")", ".", "__init__", "(", "aug_params", ")", "\n", "\n", "for", "cam", "in", "[", "'left'", "]", ":", "\n", "            ", "for", "direction", "in", "[", "'into_future'", ",", "'into_past'", "]", ":", "\n", "                ", "image_dirs", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "dstype", ",", "'TRAIN/*/*'", ")", ")", ")", "\n", "image_dirs", "=", "sorted", "(", "[", "osp", ".", "join", "(", "f", ",", "cam", ")", "for", "f", "in", "image_dirs", "]", ")", "\n", "\n", "flow_dirs", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'optical_flow/TRAIN/*/*'", ")", ")", ")", "\n", "flow_dirs", "=", "sorted", "(", "[", "osp", ".", "join", "(", "f", ",", "direction", ",", "cam", ")", "for", "f", "in", "flow_dirs", "]", ")", "\n", "\n", "for", "idir", ",", "fdir", "in", "zip", "(", "image_dirs", ",", "flow_dirs", ")", ":", "\n", "                    ", "images", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "idir", ",", "'*.png'", ")", ")", ")", "\n", "flows", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "fdir", ",", "'*.pfm'", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "flows", ")", "-", "1", ")", ":", "\n", "                        ", "if", "direction", "==", "'into_future'", ":", "\n", "                            ", "self", ".", "image_list", "+=", "[", "[", "images", "[", "i", "]", ",", "images", "[", "i", "+", "1", "]", "]", "]", "\n", "self", ".", "flow_list", "+=", "[", "flows", "[", "i", "]", "]", "\n", "", "elif", "direction", "==", "'into_past'", ":", "\n", "                            ", "self", ".", "image_list", "+=", "[", "[", "images", "[", "i", "+", "1", "]", ",", "images", "[", "i", "]", "]", "]", "\n", "self", ".", "flow_list", "+=", "[", "flows", "[", "i", "+", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.datasets.KITTI.__init__": [[162, 178], ["datasets.FlowDataset.__init__", "os.join", "os.join", "sorted", "sorted", "zip", "glob.glob.glob", "glob.glob.glob", "sorted", "os.join", "os.join", "os.join", "os.join", "img1.split", "glob.glob.glob", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "split", "=", "'training'", ",", "root", "=", "'datasets/KITTI'", ")", ":", "\n", "        ", "super", "(", "KITTI", ",", "self", ")", ".", "__init__", "(", "aug_params", ",", "sparse", "=", "True", ")", "\n", "if", "split", "==", "'testing'", ":", "\n", "            ", "self", ".", "is_test", "=", "True", "\n", "\n", "", "root", "=", "osp", ".", "join", "(", "root", ",", "split", ")", "\n", "images1", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'image_2/*_10.png'", ")", ")", ")", "\n", "images2", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'image_2/*_11.png'", ")", ")", ")", "\n", "\n", "for", "img1", ",", "img2", "in", "zip", "(", "images1", ",", "images2", ")", ":", "\n", "            ", "frame_id", "=", "img1", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "self", ".", "extra_info", "+=", "[", "[", "frame_id", "]", "]", "\n", "self", ".", "image_list", "+=", "[", "[", "img1", ",", "img2", "]", "]", "\n", "\n", "", "if", "split", "==", "'training'", ":", "\n", "            ", "self", ".", "flow_list", "=", "sorted", "(", "glob", "(", "osp", ".", "join", "(", "root", ",", "'flow_occ/*_10.png'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.datasets.HD1K.__init__": [[181, 197], ["datasets.FlowDataset.__init__", "sorted", "sorted", "range", "glob.glob.glob", "glob.glob.glob", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aug_params", "=", "None", ",", "root", "=", "'datasets/HD1k'", ")", ":", "\n", "        ", "super", "(", "HD1K", ",", "self", ")", ".", "__init__", "(", "aug_params", ",", "sparse", "=", "True", ")", "\n", "\n", "seq_ix", "=", "0", "\n", "while", "1", ":", "\n", "            ", "flows", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'hd1k_flow_gt'", ",", "'flow_occ/%06d_*.png'", "%", "seq_ix", ")", ")", ")", "\n", "images", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'hd1k_input'", ",", "'image_2/%06d_*.png'", "%", "seq_ix", ")", ")", ")", "\n", "\n", "if", "len", "(", "flows", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "flows", ")", "-", "1", ")", ":", "\n", "                ", "self", ".", "flow_list", "+=", "[", "flows", "[", "i", "]", "]", "\n", "self", ".", "image_list", "+=", "[", "[", "images", "[", "i", "]", ",", "images", "[", "i", "+", "1", "]", "]", "]", "\n", "\n", "", "seq_ix", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.raft_core.datasets.fetch_dataloader": [[199, 235], ["torch.DataLoader", "print", "datasets.FlyingChairs", "datasets.FlyingThings3D", "datasets.FlyingThings3D", "len", "datasets.FlyingThings3D", "datasets.MpiSintel", "datasets.MpiSintel", "datasets.KITTI", "datasets.HD1K", "datasets.KITTI"], "function", ["None"], ["", "", "", "def", "fetch_dataloader", "(", "args", ",", "TRAIN_DS", "=", "'C+T+K+S+H'", ")", ":", "\n", "    ", "\"\"\" Create the data loader for the corresponding trainign set \"\"\"", "\n", "\n", "if", "args", ".", "stage", "==", "'chairs'", ":", "\n", "        ", "aug_params", "=", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.1", ",", "'max_scale'", ":", "1.0", ",", "'do_flip'", ":", "True", "}", "\n", "train_dataset", "=", "FlyingChairs", "(", "aug_params", ",", "split", "=", "'training'", ")", "\n", "\n", "", "elif", "args", ".", "stage", "==", "'things'", ":", "\n", "        ", "aug_params", "=", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.4", ",", "'max_scale'", ":", "0.8", ",", "'do_flip'", ":", "True", "}", "\n", "clean_dataset", "=", "FlyingThings3D", "(", "aug_params", ",", "dstype", "=", "'frames_cleanpass'", ")", "\n", "final_dataset", "=", "FlyingThings3D", "(", "aug_params", ",", "dstype", "=", "'frames_finalpass'", ")", "\n", "train_dataset", "=", "clean_dataset", "+", "final_dataset", "\n", "\n", "", "elif", "args", ".", "stage", "==", "'sintel'", ":", "\n", "        ", "aug_params", "=", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.2", ",", "'max_scale'", ":", "0.6", ",", "'do_flip'", ":", "True", "}", "\n", "things", "=", "FlyingThings3D", "(", "aug_params", ",", "dstype", "=", "'frames_cleanpass'", ")", "\n", "sintel_clean", "=", "MpiSintel", "(", "aug_params", ",", "split", "=", "'training'", ",", "dstype", "=", "'clean'", ")", "\n", "sintel_final", "=", "MpiSintel", "(", "aug_params", ",", "split", "=", "'training'", ",", "dstype", "=", "'final'", ")", "\n", "\n", "if", "TRAIN_DS", "==", "'C+T+K+S+H'", ":", "\n", "            ", "kitti", "=", "KITTI", "(", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.3", ",", "'max_scale'", ":", "0.5", ",", "'do_flip'", ":", "True", "}", ")", "\n", "hd1k", "=", "HD1K", "(", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.5", ",", "'max_scale'", ":", "0.2", ",", "'do_flip'", ":", "True", "}", ")", "\n", "train_dataset", "=", "100", "*", "sintel_clean", "+", "100", "*", "sintel_final", "+", "200", "*", "kitti", "+", "5", "*", "hd1k", "+", "things", "\n", "\n", "", "elif", "TRAIN_DS", "==", "'C+T+K/S'", ":", "\n", "            ", "train_dataset", "=", "100", "*", "sintel_clean", "+", "100", "*", "sintel_final", "+", "things", "\n", "\n", "", "", "elif", "args", ".", "stage", "==", "'kitti'", ":", "\n", "        ", "aug_params", "=", "{", "'crop_size'", ":", "args", ".", "image_size", ",", "'min_scale'", ":", "-", "0.2", ",", "'max_scale'", ":", "0.4", ",", "'do_flip'", ":", "False", "}", "\n", "train_dataset", "=", "KITTI", "(", "aug_params", ",", "split", "=", "'training'", ")", "\n", "\n", "", "train_loader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "pin_memory", "=", "False", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "drop_last", "=", "True", ")", "\n", "\n", "print", "(", "'Training with %d image pairs'", "%", "len", "(", "train_dataset", ")", ")", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.readFlow": [[12, 32], ["open", "numpy.fromfile", "print", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "numpy.resize", "int", "int", "int", "int"], "function", ["None"], ["def", "readFlow", "(", "fn", ")", ":", "\n", "    ", "\"\"\" Read .flo file in Middlebury format\"\"\"", "\n", "# Code adapted from:", "\n", "# http://stackoverflow.com/questions/28013200/reading-middlebury-flow-files-with-python-bytes-array-numpy", "\n", "\n", "# WARNING: this will work on little-endian architectures (eg Intel x86) only!", "\n", "# print 'fn = %s'%(fn)", "\n", "with", "open", "(", "fn", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "magic", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "1", ")", "\n", "if", "202021.25", "!=", "magic", ":", "\n", "            ", "print", "(", "'Magic number incorrect. Invalid .flo file'", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "            ", "w", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "\n", "h", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "\n", "# print 'Reading %d x %d flo file\\n' % (w, h)", "\n", "data", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "2", "*", "int", "(", "w", ")", "*", "int", "(", "h", ")", ")", "\n", "# Reshape data into 3D array (columns, rows, bands)", "\n", "# The reshape here is for visualization, the original code is (w,h,2)", "\n", "return", "np", ".", "resize", "(", "data", ",", "(", "int", "(", "h", ")", ",", "int", "(", "w", ")", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.readPFM": [[33, 69], ["open", "open.readline().rstrip", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "open.readline", "map", "Exception", "open.readline().rstrip", "open.readline", "Exception", "re.match.groups", "open.readline"], "function", ["None"], ["", "", "", "def", "readPFM", "(", "file", ")", ":", "\n", "    ", "file", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "\n", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", "==", "b'PF'", ":", "\n", "        ", "color", "=", "True", "\n", "", "elif", "header", "==", "b'Pf'", ":", "\n", "        ", "color", "=", "False", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not a PFM file.'", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "rb'^(\\d+)\\s(\\d+)\\s$'", ",", "file", ".", "readline", "(", ")", ")", "\n", "if", "dim_match", ":", "\n", "        ", "width", ",", "height", "=", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Malformed PFM header.'", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "# little-endian", "\n", "        ", "endian", "=", "'<'", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "        ", "endian", "=", "'>'", "# big-endian", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "'f'", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.writeFlow": [[70, 100], ["open", "open.write", "numpy.array().astype().tofile", "numpy.array().astype().tofile", "numpy.zeros", "np.zeros.astype().tofile", "open.close", "numpy.array().astype", "numpy.array().astype", "np.zeros.astype", "numpy.array", "numpy.array", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "writeFlow", "(", "filename", ",", "uv", ",", "v", "=", "None", ")", ":", "\n", "    ", "\"\"\" Write optical flow to file.\n    \n    If v is None, uv is assumed to contain both u and v channels,\n    stacked in depth.\n    Original code by Deqing Sun, adapted from Daniel Scharstein.\n    \"\"\"", "\n", "nBands", "=", "2", "\n", "\n", "if", "v", "is", "None", ":", "\n", "        ", "assert", "(", "uv", ".", "ndim", "==", "3", ")", "\n", "assert", "(", "uv", ".", "shape", "[", "2", "]", "==", "2", ")", "\n", "u", "=", "uv", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "uv", "[", ":", ",", ":", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "u", "=", "uv", "\n", "\n", "", "assert", "(", "u", ".", "shape", "==", "v", ".", "shape", ")", "\n", "height", ",", "width", "=", "u", ".", "shape", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "# write the header", "\n", "f", ".", "write", "(", "TAG_CHAR", ")", "\n", "np", ".", "array", "(", "width", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "np", ".", "array", "(", "height", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tofile", "(", "f", ")", "\n", "# arrange into matrix form", "\n", "tmp", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", "*", "nBands", ")", ")", "\n", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "]", "=", "u", "\n", "tmp", "[", ":", ",", "np", ".", "arange", "(", "width", ")", "*", "2", "+", "1", "]", "=", "v", "\n", "tmp", ".", "astype", "(", "np", ".", "float32", ")", ".", "tofile", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.readFlowKITTI": [[102, 108], ["cv2.imread", "flow[].astype"], "function", ["None"], ["", "def", "readFlowKITTI", "(", "filename", ")", ":", "\n", "    ", "flow", "=", "cv2", ".", "imread", "(", "filename", ",", "cv2", ".", "IMREAD_ANYDEPTH", "|", "cv2", ".", "IMREAD_COLOR", ")", "\n", "flow", "=", "flow", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "flow", ",", "valid", "=", "flow", "[", ":", ",", ":", ",", ":", "2", "]", ",", "flow", "[", ":", ",", ":", ",", "2", "]", "\n", "flow", "=", "(", "flow", "-", "2", "**", "15", ")", "/", "64.0", "\n", "return", "flow", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.readDispKITTI": [[109, 114], ["numpy.stack", "cv2.imread", "numpy.zeros_like"], "function", ["None"], ["", "def", "readDispKITTI", "(", "filename", ")", ":", "\n", "    ", "disp", "=", "cv2", ".", "imread", "(", "filename", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "/", "256.0", "\n", "valid", "=", "disp", ">", "0.0", "\n", "flow", "=", "np", ".", "stack", "(", "[", "-", "disp", ",", "np", ".", "zeros_like", "(", "disp", ")", "]", ",", "-", "1", ")", "\n", "return", "flow", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.writeFlowKITTI": [[116, 121], ["numpy.ones", "numpy.concatenate().astype", "cv2.imwrite", "numpy.concatenate"], "function", ["None"], ["", "def", "writeFlowKITTI", "(", "filename", ",", "uv", ")", ":", "\n", "    ", "uv", "=", "64.0", "*", "uv", "+", "2", "**", "15", "\n", "valid", "=", "np", ".", "ones", "(", "[", "uv", ".", "shape", "[", "0", "]", ",", "uv", ".", "shape", "[", "1", "]", ",", "1", "]", ")", "\n", "uv", "=", "np", ".", "concatenate", "(", "[", "uv", ",", "valid", "]", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "cv2", ".", "imwrite", "(", "filename", ",", "uv", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.read_gen": [[123, 138], ["splitext", "PIL.Image.open", "numpy.load", "readFlow().astype", "readPFM().astype", "frame_utils.readFlow", "len", "frame_utils.readPFM"], "function", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.readFlow", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.frame_utils.readPFM"], ["", "def", "read_gen", "(", "file_name", ",", "pil", "=", "False", ")", ":", "\n", "    ", "ext", "=", "splitext", "(", "file_name", ")", "[", "-", "1", "]", "\n", "if", "ext", "==", "'.png'", "or", "ext", "==", "'.jpeg'", "or", "ext", "==", "'.ppm'", "or", "ext", "==", "'.jpg'", ":", "\n", "        ", "return", "Image", ".", "open", "(", "file_name", ")", "\n", "", "elif", "ext", "==", "'.bin'", "or", "ext", "==", "'.raw'", ":", "\n", "        ", "return", "np", ".", "load", "(", "file_name", ")", "\n", "", "elif", "ext", "==", "'.flo'", ":", "\n", "        ", "return", "readFlow", "(", "file_name", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "ext", "==", "'.pfm'", ":", "\n", "        ", "flow", "=", "readPFM", "(", "file_name", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "len", "(", "flow", ".", "shape", ")", "==", "2", ":", "\n", "            ", "return", "flow", "\n", "", "else", ":", "\n", "            ", "return", "flow", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "", "", "return", "[", "]", "", "", ""]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.FlowAugmentor.__init__": [[16, 35], ["torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "min_scale", "=", "-", "0.2", ",", "max_scale", "=", "0.5", ",", "do_flip", "=", "True", ")", ":", "\n", "\n", "# spatial augmentation params", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "min_scale", "=", "min_scale", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "self", ".", "spatial_aug_prob", "=", "0.8", "\n", "self", ".", "stretch_prob", "=", "0.8", "\n", "self", ".", "max_stretch", "=", "0.2", "\n", "\n", "# flip augmentation params", "\n", "self", ".", "do_flip", "=", "do_flip", "\n", "self", ".", "h_flip_prob", "=", "0.5", "\n", "self", ".", "v_flip_prob", "=", "0.1", "\n", "\n", "# photometric augmentation params", "\n", "self", ".", "photo_aug", "=", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "hue", "=", "0.5", "/", "3.14", ")", "\n", "self", ".", "asymmetric_color_aug_prob", "=", "0.2", "\n", "self", ".", "eraser_aug_prob", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.FlowAugmentor.color_transform": [[36, 51], ["numpy.random.rand", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.array", "numpy.split", "augmentor.FlowAugmentor.photo_aug", "augmentor.FlowAugmentor.photo_aug", "augmentor.FlowAugmentor.photo_aug", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "color_transform", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "\"\"\" Photometric augmentation \"\"\"", "\n", "\n", "# asymmetric", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "asymmetric_color_aug_prob", ":", "\n", "            ", "img1", "=", "np", ".", "array", "(", "self", ".", "photo_aug", "(", "Image", ".", "fromarray", "(", "img1", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img2", "=", "np", ".", "array", "(", "self", ".", "photo_aug", "(", "Image", ".", "fromarray", "(", "img2", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# symmetric", "\n", "", "else", ":", "\n", "            ", "image_stack", "=", "np", ".", "concatenate", "(", "[", "img1", ",", "img2", "]", ",", "axis", "=", "0", ")", "\n", "image_stack", "=", "np", ".", "array", "(", "self", ".", "photo_aug", "(", "Image", ".", "fromarray", "(", "image_stack", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img1", ",", "img2", "=", "np", ".", "split", "(", "image_stack", ",", "2", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.FlowAugmentor.eraser_transform": [[52, 66], ["numpy.random.rand", "numpy.mean", "range", "img2.reshape", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "def", "eraser_transform", "(", "self", ",", "img1", ",", "img2", ",", "bounds", "=", "[", "50", ",", "100", "]", ")", ":", "\n", "        ", "\"\"\" Occlusion augmentation \"\"\"", "\n", "\n", "ht", ",", "wd", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "eraser_aug_prob", ":", "\n", "            ", "mean_color", "=", "np", ".", "mean", "(", "img2", ".", "reshape", "(", "-", "1", ",", "3", ")", ",", "axis", "=", "0", ")", "\n", "for", "_", "in", "range", "(", "np", ".", "random", ".", "randint", "(", "1", ",", "3", ")", ")", ":", "\n", "                ", "x0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "wd", ")", "\n", "y0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "ht", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "bounds", "[", "0", "]", ",", "bounds", "[", "1", "]", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "bounds", "[", "0", "]", ",", "bounds", "[", "1", "]", ")", "\n", "img2", "[", "y0", ":", "y0", "+", "dy", ",", "x0", ":", "x0", "+", "dx", ",", ":", "]", "=", "mean_color", "\n", "\n", "", "", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.FlowAugmentor.spatial_transform": [[67, 110], ["numpy.maximum", "numpy.clip", "numpy.clip", "numpy.random.randint", "numpy.random.randint", "numpy.random.uniform", "numpy.random.rand", "numpy.random.rand", "cv2.resize", "cv2.resize", "cv2.resize", "float", "float", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "spatial_transform", "(", "self", ",", "img1", ",", "img2", ",", "flow", ")", ":", "\n", "# randomly sample scale", "\n", "        ", "ht", ",", "wd", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "min_scale", "=", "np", ".", "maximum", "(", "\n", "(", "self", ".", "crop_size", "[", "0", "]", "+", "8", ")", "/", "float", "(", "ht", ")", ",", "\n", "(", "self", ".", "crop_size", "[", "1", "]", "+", "8", ")", "/", "float", "(", "wd", ")", ")", "\n", "\n", "scale", "=", "2", "**", "np", ".", "random", ".", "uniform", "(", "self", ".", "min_scale", ",", "self", ".", "max_scale", ")", "\n", "scale_x", "=", "scale", "\n", "scale_y", "=", "scale", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "stretch_prob", ":", "\n", "            ", "scale_x", "*=", "2", "**", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "max_stretch", ",", "self", ".", "max_stretch", ")", "\n", "scale_y", "*=", "2", "**", "np", ".", "random", ".", "uniform", "(", "-", "self", ".", "max_stretch", ",", "self", ".", "max_stretch", ")", "\n", "\n", "", "scale_x", "=", "np", ".", "clip", "(", "scale_x", ",", "min_scale", ",", "None", ")", "\n", "scale_y", "=", "np", ".", "clip", "(", "scale_y", ",", "min_scale", ",", "None", ")", "\n", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "spatial_aug_prob", ":", "\n", "# rescale the images", "\n", "            ", "img1", "=", "cv2", ".", "resize", "(", "img1", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "img2", "=", "cv2", ".", "resize", "(", "img2", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "flow", "=", "cv2", ".", "resize", "(", "flow", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "flow", "=", "flow", "*", "[", "scale_x", ",", "scale_y", "]", "\n", "\n", "", "if", "self", ".", "do_flip", ":", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "h_flip_prob", ":", "# h-flip", "\n", "                ", "img1", "=", "img1", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "img2", "=", "img2", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "flow", "=", "flow", "[", ":", ",", ":", ":", "-", "1", "]", "*", "[", "-", "1.0", ",", "1.0", "]", "\n", "\n", "", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "v_flip_prob", ":", "# v-flip", "\n", "                ", "img1", "=", "img1", "[", ":", ":", "-", "1", ",", ":", "]", "\n", "img2", "=", "img2", "[", ":", ":", "-", "1", ",", ":", "]", "\n", "flow", "=", "flow", "[", ":", ":", "-", "1", ",", ":", "]", "*", "[", "1.0", ",", "-", "1.0", "]", "\n", "\n", "", "", "y0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img1", ".", "shape", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "x0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img1", ".", "shape", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "\n", "img1", "=", "img1", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "img2", "=", "img2", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "flow", "=", "flow", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "\n", "return", "img1", ",", "img2", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.FlowAugmentor.__call__": [[111, 121], ["augmentor.FlowAugmentor.color_transform", "augmentor.FlowAugmentor.eraser_transform", "augmentor.FlowAugmentor.spatial_transform", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.SparseFlowAugmentor.color_transform", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.SparseFlowAugmentor.eraser_transform", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.SparseFlowAugmentor.spatial_transform"], ["", "def", "__call__", "(", "self", ",", "img1", ",", "img2", ",", "flow", ")", ":", "\n", "        ", "img1", ",", "img2", "=", "self", ".", "color_transform", "(", "img1", ",", "img2", ")", "\n", "img1", ",", "img2", "=", "self", ".", "eraser_transform", "(", "img1", ",", "img2", ")", "\n", "img1", ",", "img2", ",", "flow", "=", "self", ".", "spatial_transform", "(", "img1", ",", "img2", ",", "flow", ")", "\n", "\n", "img1", "=", "np", ".", "ascontiguousarray", "(", "img1", ")", "\n", "img2", "=", "np", ".", "ascontiguousarray", "(", "img2", ")", "\n", "flow", "=", "np", ".", "ascontiguousarray", "(", "flow", ")", "\n", "\n", "return", "img1", ",", "img2", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.SparseFlowAugmentor.__init__": [[123, 141], ["torchvision.transforms.ColorJitter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "min_scale", "=", "-", "0.2", ",", "max_scale", "=", "0.5", ",", "do_flip", "=", "False", ")", ":", "\n", "# spatial augmentation params", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "min_scale", "=", "min_scale", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "self", ".", "spatial_aug_prob", "=", "0.8", "\n", "self", ".", "stretch_prob", "=", "0.8", "\n", "self", ".", "max_stretch", "=", "0.2", "\n", "\n", "# flip augmentation params", "\n", "self", ".", "do_flip", "=", "do_flip", "\n", "self", ".", "h_flip_prob", "=", "0.5", "\n", "self", ".", "v_flip_prob", "=", "0.1", "\n", "\n", "# photometric augmentation params", "\n", "self", ".", "photo_aug", "=", "ColorJitter", "(", "brightness", "=", "0.3", ",", "contrast", "=", "0.3", ",", "saturation", "=", "0.3", ",", "hue", "=", "0.3", "/", "3.14", ")", "\n", "self", ".", "asymmetric_color_aug_prob", "=", "0.2", "\n", "self", ".", "eraser_aug_prob", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.SparseFlowAugmentor.color_transform": [[142, 147], ["numpy.concatenate", "numpy.array", "numpy.split", "augmentor.SparseFlowAugmentor.photo_aug", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "color_transform", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "image_stack", "=", "np", ".", "concatenate", "(", "[", "img1", ",", "img2", "]", ",", "axis", "=", "0", ")", "\n", "image_stack", "=", "np", ".", "array", "(", "self", ".", "photo_aug", "(", "Image", ".", "fromarray", "(", "image_stack", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img1", ",", "img2", "=", "np", ".", "split", "(", "image_stack", ",", "2", ",", "axis", "=", "0", ")", "\n", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.SparseFlowAugmentor.eraser_transform": [[148, 160], ["numpy.random.rand", "numpy.mean", "range", "img2.reshape", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "def", "eraser_transform", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "ht", ",", "wd", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "eraser_aug_prob", ":", "\n", "            ", "mean_color", "=", "np", ".", "mean", "(", "img2", ".", "reshape", "(", "-", "1", ",", "3", ")", ",", "axis", "=", "0", ")", "\n", "for", "_", "in", "range", "(", "np", ".", "random", ".", "randint", "(", "1", ",", "3", ")", ")", ":", "\n", "                ", "x0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "wd", ")", "\n", "y0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "ht", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "50", ",", "100", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "50", ",", "100", ")", "\n", "img2", "[", "y0", ":", "y0", "+", "dy", ",", "x0", ":", "x0", "+", "dx", ",", ":", "]", "=", "mean_color", "\n", "\n", "", "", "return", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.SparseFlowAugmentor.resize_sparse_flow_map": [[161, 194], ["numpy.meshgrid", "numpy.stack", "coords.reshape().astype.reshape().astype.reshape().astype", "flow.reshape().astype.reshape().astype.reshape().astype", "valid.reshape().astype.reshape().astype.reshape().astype", "int", "int", "numpy.round().astype", "numpy.round().astype", "numpy.zeros", "numpy.zeros", "numpy.arange", "numpy.arange", "round", "round", "coords.reshape().astype.reshape().astype.reshape", "flow.reshape().astype.reshape().astype.reshape", "valid.reshape().astype.reshape().astype.reshape", "numpy.round", "numpy.round"], "methods", ["None"], ["", "def", "resize_sparse_flow_map", "(", "self", ",", "flow", ",", "valid", ",", "fx", "=", "1.0", ",", "fy", "=", "1.0", ")", ":", "\n", "        ", "ht", ",", "wd", "=", "flow", ".", "shape", "[", ":", "2", "]", "\n", "coords", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "wd", ")", ",", "np", ".", "arange", "(", "ht", ")", ")", "\n", "coords", "=", "np", ".", "stack", "(", "coords", ",", "axis", "=", "-", "1", ")", "\n", "\n", "coords", "=", "coords", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "flow", "=", "flow", ".", "reshape", "(", "-", "1", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "valid", "=", "valid", ".", "reshape", "(", "-", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "coords0", "=", "coords", "[", "valid", ">=", "1", "]", "\n", "flow0", "=", "flow", "[", "valid", ">=", "1", "]", "\n", "\n", "ht1", "=", "int", "(", "round", "(", "ht", "*", "fy", ")", ")", "\n", "wd1", "=", "int", "(", "round", "(", "wd", "*", "fx", ")", ")", "\n", "\n", "coords1", "=", "coords0", "*", "[", "fx", ",", "fy", "]", "\n", "flow1", "=", "flow0", "*", "[", "fx", ",", "fy", "]", "\n", "\n", "xx", "=", "np", ".", "round", "(", "coords1", "[", ":", ",", "0", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "yy", "=", "np", ".", "round", "(", "coords1", "[", ":", ",", "1", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "v", "=", "(", "xx", ">", "0", ")", "&", "(", "xx", "<", "wd1", ")", "&", "(", "yy", ">", "0", ")", "&", "(", "yy", "<", "ht1", ")", "\n", "xx", "=", "xx", "[", "v", "]", "\n", "yy", "=", "yy", "[", "v", "]", "\n", "flow1", "=", "flow1", "[", "v", "]", "\n", "\n", "flow_img", "=", "np", ".", "zeros", "(", "[", "ht1", ",", "wd1", ",", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "valid_img", "=", "np", ".", "zeros", "(", "[", "ht1", ",", "wd1", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "flow_img", "[", "yy", ",", "xx", "]", "=", "flow1", "\n", "valid_img", "[", "yy", ",", "xx", "]", "=", "1", "\n", "\n", "return", "flow_img", ",", "valid_img", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.SparseFlowAugmentor.spatial_transform": [[195, 234], ["numpy.maximum", "numpy.clip", "numpy.clip", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.random.uniform", "numpy.random.rand", "cv2.resize", "cv2.resize", "augmentor.SparseFlowAugmentor.resize_sparse_flow_map", "float", "float", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.SparseFlowAugmentor.resize_sparse_flow_map"], ["", "def", "spatial_transform", "(", "self", ",", "img1", ",", "img2", ",", "flow", ",", "valid", ")", ":", "\n", "# randomly sample scale", "\n", "\n", "        ", "ht", ",", "wd", "=", "img1", ".", "shape", "[", ":", "2", "]", "\n", "min_scale", "=", "np", ".", "maximum", "(", "\n", "(", "self", ".", "crop_size", "[", "0", "]", "+", "1", ")", "/", "float", "(", "ht", ")", ",", "\n", "(", "self", ".", "crop_size", "[", "1", "]", "+", "1", ")", "/", "float", "(", "wd", ")", ")", "\n", "\n", "scale", "=", "2", "**", "np", ".", "random", ".", "uniform", "(", "self", ".", "min_scale", ",", "self", ".", "max_scale", ")", "\n", "scale_x", "=", "np", ".", "clip", "(", "scale", ",", "min_scale", ",", "None", ")", "\n", "scale_y", "=", "np", ".", "clip", "(", "scale", ",", "min_scale", ",", "None", ")", "\n", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "spatial_aug_prob", ":", "\n", "# rescale the images", "\n", "            ", "img1", "=", "cv2", ".", "resize", "(", "img1", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "img2", "=", "cv2", ".", "resize", "(", "img2", ",", "None", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "flow", ",", "valid", "=", "self", ".", "resize_sparse_flow_map", "(", "flow", ",", "valid", ",", "fx", "=", "scale_x", ",", "fy", "=", "scale_y", ")", "\n", "\n", "", "if", "self", ".", "do_flip", ":", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "# h-flip", "\n", "                ", "img1", "=", "img1", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "img2", "=", "img2", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "flow", "=", "flow", "[", ":", ",", ":", ":", "-", "1", "]", "*", "[", "-", "1.0", ",", "1.0", "]", "\n", "valid", "=", "valid", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "", "", "margin_y", "=", "20", "\n", "margin_x", "=", "50", "\n", "\n", "y0", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "img1", ".", "shape", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", "+", "margin_y", ")", "\n", "x0", "=", "np", ".", "random", ".", "randint", "(", "-", "margin_x", ",", "img1", ".", "shape", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", "+", "margin_x", ")", "\n", "\n", "y0", "=", "np", ".", "clip", "(", "y0", ",", "0", ",", "img1", ".", "shape", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ")", "\n", "x0", "=", "np", ".", "clip", "(", "x0", ",", "0", ",", "img1", ".", "shape", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ")", "\n", "\n", "img1", "=", "img1", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "img2", "=", "img2", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "flow", "=", "flow", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "valid", "=", "valid", "[", "y0", ":", "y0", "+", "self", ".", "crop_size", "[", "0", "]", ",", "x0", ":", "x0", "+", "self", ".", "crop_size", "[", "1", "]", "]", "\n", "return", "img1", ",", "img2", ",", "flow", ",", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.SparseFlowAugmentor.__call__": [[236, 247], ["augmentor.SparseFlowAugmentor.color_transform", "augmentor.SparseFlowAugmentor.eraser_transform", "augmentor.SparseFlowAugmentor.spatial_transform", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.SparseFlowAugmentor.color_transform", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.SparseFlowAugmentor.eraser_transform", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.augmentor.SparseFlowAugmentor.spatial_transform"], ["", "def", "__call__", "(", "self", ",", "img1", ",", "img2", ",", "flow", ",", "valid", ")", ":", "\n", "        ", "img1", ",", "img2", "=", "self", ".", "color_transform", "(", "img1", ",", "img2", ")", "\n", "img1", ",", "img2", "=", "self", ".", "eraser_transform", "(", "img1", ",", "img2", ")", "\n", "img1", ",", "img2", ",", "flow", ",", "valid", "=", "self", ".", "spatial_transform", "(", "img1", ",", "img2", ",", "flow", ",", "valid", ")", "\n", "\n", "img1", "=", "np", ".", "ascontiguousarray", "(", "img1", ")", "\n", "img2", "=", "np", ".", "ascontiguousarray", "(", "img2", ")", "\n", "flow", "=", "np", ".", "ascontiguousarray", "(", "flow", ")", "\n", "valid", "=", "np", ".", "ascontiguousarray", "(", "valid", ")", "\n", "\n", "return", "img1", ",", "img2", ",", "flow", ",", "valid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.InputPadder.__init__": [[11, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dims", ",", "r", "=", "8", ",", "mode", "=", "'sintel'", ")", ":", "\n", "        ", "self", ".", "ht", ",", "self", ".", "wd", "=", "dims", "[", "-", "2", ":", "]", "\n", "pad_ht", "=", "(", "(", "(", "self", ".", "ht", "//", "r", ")", "+", "1", ")", "*", "r", "-", "self", ".", "ht", ")", "%", "r", "\n", "pad_wd", "=", "(", "(", "(", "self", ".", "wd", "//", "r", ")", "+", "1", ")", "*", "r", "-", "self", ".", "wd", ")", "%", "r", "\n", "if", "mode", "==", "'sintel'", ":", "\n", "            ", "self", ".", "_pad", "=", "[", "pad_wd", "//", "2", ",", "pad_wd", "-", "pad_wd", "//", "2", ",", "pad_ht", "//", "2", ",", "pad_ht", "-", "pad_ht", "//", "2", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_pad", "=", "[", "pad_wd", "//", "2", ",", "pad_wd", "-", "pad_wd", "//", "2", ",", "0", ",", "pad_ht", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.InputPadder.pad": [[20, 22], ["torch.pad", "torch.pad", "torch.pad"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.InputPadder.pad", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.InputPadder.pad"], ["", "", "def", "pad", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "return", "[", "F", ".", "pad", "(", "x", ",", "self", ".", "_pad", ",", "mode", "=", "'replicate'", ")", "for", "x", "in", "inputs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.InputPadder.unpad": [[23, 27], ["None"], "methods", ["None"], ["", "def", "unpad", "(", "self", ",", "x", ")", ":", "\n", "        ", "ht", ",", "wd", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "c", "=", "[", "self", ".", "_pad", "[", "2", "]", ",", "ht", "-", "self", ".", "_pad", "[", "3", "]", ",", "self", ".", "_pad", "[", "0", "]", ",", "wd", "-", "self", ".", "_pad", "[", "1", "]", "]", "\n", "return", "x", "[", "...", ",", "c", "[", "0", "]", ":", "c", "[", "1", "]", ",", "c", "[", "2", "]", ":", "c", "[", "3", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.forward_interpolate": [[28, 57], ["np.stack.detach().cpu().numpy", "numpy.meshgrid", "x1.reshape.reshape", "y1.reshape.reshape", "dx.reshape.reshape", "dy.reshape.reshape", "scipy.interpolate.griddata", "scipy.interpolate.griddata", "numpy.stack", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.arange", "numpy.arange", "np.stack.detach().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "np.stack.detach"], "function", ["None"], ["", "", "def", "forward_interpolate", "(", "flow", ")", ":", "\n", "    ", "flow", "=", "flow", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "dx", ",", "dy", "=", "flow", "[", "0", "]", ",", "flow", "[", "1", "]", "\n", "\n", "ht", ",", "wd", "=", "dx", ".", "shape", "\n", "x0", ",", "y0", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "wd", ")", ",", "np", ".", "arange", "(", "ht", ")", ")", "\n", "\n", "x1", "=", "x0", "+", "dx", "\n", "y1", "=", "y0", "+", "dy", "\n", "\n", "x1", "=", "x1", ".", "reshape", "(", "-", "1", ")", "\n", "y1", "=", "y1", ".", "reshape", "(", "-", "1", ")", "\n", "dx", "=", "dx", ".", "reshape", "(", "-", "1", ")", "\n", "dy", "=", "dy", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "valid", "=", "(", "x1", ">", "0", ")", "&", "(", "x1", "<", "wd", ")", "&", "(", "y1", ">", "0", ")", "&", "(", "y1", "<", "ht", ")", "\n", "x1", "=", "x1", "[", "valid", "]", "\n", "y1", "=", "y1", "[", "valid", "]", "\n", "dx", "=", "dx", "[", "valid", "]", "\n", "dy", "=", "dy", "[", "valid", "]", "\n", "\n", "flow_x", "=", "interpolate", ".", "griddata", "(", "\n", "(", "x1", ",", "y1", ")", ",", "dx", ",", "(", "x0", ",", "y0", ")", ",", "method", "=", "'nearest'", ",", "fill_value", "=", "0", ")", "\n", "\n", "flow_y", "=", "interpolate", ".", "griddata", "(", "\n", "(", "x1", ",", "y1", ")", ",", "dy", ",", "(", "x0", ",", "y0", ")", ",", "method", "=", "'nearest'", ",", "fill_value", "=", "0", ")", "\n", "\n", "flow", "=", "np", ".", "stack", "(", "[", "flow_x", ",", "flow_y", "]", ",", "axis", "=", "0", ")", "\n", "return", "torch", ".", "from_numpy", "(", "flow", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.bilinear_sampler": [[59, 76], ["coords.split", "torch.cat", "torch.cat", "torch.cat", "torch.grid_sample", "mask.float"], "function", ["None"], ["", "def", "bilinear_sampler", "(", "img", ",", "coords", ",", "mode", "=", "'bilinear'", ",", "mask", "=", "False", ")", ":", "\n", "    ", "\"\"\" Wrapper for grid_sample, uses pixel coordinates \"\"\"", "\n", "# (BHW, C, H, W)", "\n", "H", ",", "W", "=", "img", ".", "shape", "[", "-", "2", ":", "]", "\n", "# (BHW, 2r+1, 2r+1, 1), Normalize to -1~1", "\n", "xgrid", ",", "ygrid", "=", "coords", ".", "split", "(", "[", "1", ",", "1", "]", ",", "dim", "=", "-", "1", ")", "\n", "xgrid", "=", "2", "*", "xgrid", "/", "(", "W", "-", "1", ")", "-", "1", "\n", "ygrid", "=", "2", "*", "ygrid", "/", "(", "H", "-", "1", ")", "-", "1", "\n", "# (BHW, 2r+1, 2r+1, 2)", "\n", "grid", "=", "torch", ".", "cat", "(", "[", "xgrid", ",", "ygrid", "]", ",", "dim", "=", "-", "1", ")", "\n", "img", "=", "F", ".", "grid_sample", "(", "img", ",", "grid", ",", "align_corners", "=", "True", ")", "\n", "\n", "if", "mask", ":", "\n", "        ", "mask", "=", "(", "xgrid", ">", "-", "1", ")", "&", "(", "ygrid", ">", "-", "1", ")", "&", "(", "xgrid", "<", "1", ")", "&", "(", "ygrid", "<", "1", ")", "\n", "return", "img", ",", "mask", ".", "float", "(", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.coords_grid": [[78, 82], ["torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack().float", "torch.stack().float", "torch.stack().float", "coords[].repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "coords_grid", "(", "batch", ",", "ht", ",", "wd", ")", ":", "\n", "    ", "coords", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "ht", ")", ",", "torch", ".", "arange", "(", "wd", ")", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "coords", "[", ":", ":", "-", "1", "]", ",", "dim", "=", "0", ")", ".", "float", "(", ")", "\n", "return", "coords", "[", "None", "]", ".", "repeat", "(", "batch", ",", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.upflow8": [[84, 87], ["torch.interpolate"], "function", ["None"], ["", "def", "upflow8", "(", "flow", ",", "mode", "=", "'bilinear'", ")", ":", "\n", "    ", "new_size", "=", "(", "8", "*", "flow", ".", "shape", "[", "2", "]", ",", "8", "*", "flow", ".", "shape", "[", "3", "]", ")", "\n", "return", "8", "*", "F", ".", "interpolate", "(", "flow", ",", "size", "=", "new_size", ",", "mode", "=", "mode", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.upflow2": [[89, 92], ["torch.interpolate"], "function", ["None"], ["", "def", "upflow2", "(", "flow", ",", "mode", "=", "'bilinear'", ")", ":", "\n", "    ", "new_size", "=", "(", "2", "*", "flow", ".", "shape", "[", "2", "]", ",", "2", "*", "flow", ".", "shape", "[", "3", "]", ")", "\n", "return", "2", "*", "F", ".", "interpolate", "(", "flow", ",", "size", "=", "new_size", ",", "mode", "=", "mode", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.upflow": [[94, 100], ["torch.interpolate"], "function", ["None"], ["", "def", "upflow", "(", "flow", ",", "r", "=", "8", ",", "mode", "=", "'bilinear'", ")", ":", "\n", "    ", "if", "r", "==", "1", ":", "\n", "        ", "return", "flow", "\n", "\n", "", "new_size", "=", "(", "r", "*", "flow", ".", "shape", "[", "2", "]", ",", "r", "*", "flow", ".", "shape", "[", "3", "]", ")", "\n", "return", "r", "*", "F", ".", "interpolate", "(", "flow", ",", "size", "=", "new_size", ",", "mode", "=", "mode", ",", "align_corners", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.load_image": [[102, 106], ["numpy.array().astype", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "numpy.array", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "PIL.Image.open", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "load_image", "(", "imfile", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "imfile", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "return", "img", "[", "None", "]", "# N C H W", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.resize_optical_flow": [[108, 117], ["torch.round.clone", "torch.interpolate", "torch.round", "torch.round", "torch.round"], "function", ["None"], ["", "def", "resize_optical_flow", "(", "flow", ",", "h", ",", "w", ",", "mode", "=", "'bilinear'", ")", ":", "\n", "    ", "flow", "=", "flow", ".", "clone", "(", ")", "\n", "_", ",", "_", ",", "flow_h", ",", "flow_w", "=", "flow", ".", "shape", "\n", "scale_h", ",", "scale_w", "=", "h", "/", "flow_h", ",", "w", "/", "flow_w", "\n", "flow", "=", "F", ".", "interpolate", "(", "flow", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "mode", ",", "align_corners", "=", "True", ")", "\n", "flow", "[", ":", ",", "0", "]", "=", "flow", "[", ":", ",", "0", "]", "*", "scale_w", "\n", "flow", "[", ":", ",", "1", "]", "=", "flow", "[", ":", ",", "1", "]", "*", "scale_h", "\n", "flow", "=", "torch", ".", "round", "(", "flow", ")", "\n", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.utils.clamp_optical_flow": [[118, 126], ["torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.round", "torch.round", "torch.round", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "def", "clamp_optical_flow", "(", "flow", ")", ":", "\n", "    ", "_", ",", "_", ",", "h", ",", "w", "=", "flow", ".", "shape", "\n", "res", "=", "torch", ".", "zeros_like", "(", "flow", ")", ".", "to", "(", "flow", ".", "device", ")", "\n", "\n", "res", "[", ":", ",", "0", "]", "=", "torch", ".", "clamp", "(", "flow", "[", ":", ",", "0", "]", ",", "-", "1", "*", "w", ",", "w", ")", "\n", "res", "[", ":", ",", "1", "]", "=", "torch", ".", "clamp", "(", "flow", "[", ":", ",", "1", "]", ",", "-", "1", "*", "h", ",", "h", ")", "\n", "res", "=", "torch", ".", "round", "(", "res", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.mask_io.read_mask": [[44, 48], ["PIL.Image.open", "numpy.array"], "function", ["None"], ["def", "read_mask", "(", "label_path", ")", ":", "\n", "  ", "label", "=", "Image", ".", "open", "(", "label_path", ")", "\n", "label", "=", "np", ".", "array", "(", "label", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.mask_io.save_mask": [[50, 55], ["Image.fromarray().convert.astype", "PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "Image.fromarray().convert.save", "PIL.Image.fromarray"], "function", ["None"], ["", "def", "save_mask", "(", "path", ",", "mask", ")", ":", "\n", "  ", "mask", "=", "mask", ".", "astype", "(", "'uint8'", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ")", ".", "convert", "(", "'P'", ")", "\n", "mask", ".", "putpalette", "(", "_palette", ")", "\n", "mask", ".", "save", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.mask_io.zip_folder": [[57, 66], ["zipfile.ZipFile", "len", "os.walk", "zipfile.ZipFile.close", "os.path.dirname", "os.path.join", "pathfile[].strip", "zipfile.ZipFile.write"], "function", ["None"], ["", "def", "zip_folder", "(", "source_folder", ",", "zip_dir", ")", ":", "\n", "    ", "f", "=", "zipfile", ".", "ZipFile", "(", "zip_dir", ",", "'w'", ",", "zipfile", ".", "ZIP_DEFLATED", ")", "\n", "pre_len", "=", "len", "(", "os", ".", "path", ".", "dirname", "(", "source_folder", ")", ")", "\n", "for", "dirpath", ",", "dirnames", ",", "filenames", "in", "os", ".", "walk", "(", "source_folder", ")", ":", "\n", "        ", "for", "filename", "in", "filenames", ":", "\n", "            ", "pathfile", "=", "os", ".", "path", ".", "join", "(", "dirpath", ",", "filename", ")", "\n", "arcname", "=", "pathfile", "[", "pre_len", ":", "]", ".", "strip", "(", "os", ".", "path", ".", "sep", ")", "\n", "f", ".", "write", "(", "pathfile", ",", "arcname", ")", "\n", "", "", "f", ".", "close", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.f_boundary.db_eval_boundary": [[14, 72], ["f_boundary.seg2bmap", "f_boundary.seg2bmap", "binary_dilation", "binary_dilation", "numpy.sum", "numpy.sum", "numpy.ceil", "disk", "disk", "numpy.atleast_3d", "numpy.linalg.norm", "numpy.sum", "float", "numpy.sum", "float"], "function", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.f_boundary.seg2bmap", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.f_boundary.seg2bmap"], ["def", "db_eval_boundary", "(", "foreground_mask", ",", "gt_mask", ",", "bound_th", "=", "0.008", ")", ":", "\n", "    ", "\"\"\"\n    Compute mean,recall and decay from per-frame evaluation.\n    Calculates precision/recall for boundaries between foreground_mask and\n    gt_mask using morphological operators to speed it up.\n\n    Arguments:\n        foreground_mask (ndarray): binary segmentation image.\n        gt_mask         (ndarray): binary annotated image.\n\n    Returns:\n        F (float): boundaries F-measure\n        P (float): boundaries precision\n        R (float): boundaries recall\n    \"\"\"", "\n", "assert", "np", ".", "atleast_3d", "(", "foreground_mask", ")", ".", "shape", "[", "2", "]", "==", "1", "\n", "\n", "bound_pix", "=", "bound_th", "if", "bound_th", ">=", "1", "else", "np", ".", "ceil", "(", "bound_th", "*", "np", ".", "linalg", ".", "norm", "(", "foreground_mask", ".", "shape", ")", ")", "\n", "\n", "# Get the pixel boundaries of both masks", "\n", "fg_boundary", "=", "seg2bmap", "(", "foreground_mask", ")", ";", "\n", "gt_boundary", "=", "seg2bmap", "(", "gt_mask", ")", ";", "\n", "\n", "from", "skimage", ".", "morphology", "import", "binary_dilation", ",", "disk", "\n", "\n", "fg_dil", "=", "binary_dilation", "(", "fg_boundary", ",", "disk", "(", "bound_pix", ")", ")", "\n", "gt_dil", "=", "binary_dilation", "(", "gt_boundary", ",", "disk", "(", "bound_pix", ")", ")", "\n", "\n", "# Get the intersection", "\n", "gt_match", "=", "gt_boundary", "*", "fg_dil", "\n", "fg_match", "=", "fg_boundary", "*", "gt_dil", "\n", "\n", "# Area of the intersection", "\n", "n_fg", "=", "np", ".", "sum", "(", "fg_boundary", ")", "\n", "n_gt", "=", "np", ".", "sum", "(", "gt_boundary", ")", "\n", "\n", "#% Compute precision and recall", "\n", "if", "n_fg", "==", "0", "and", "n_gt", ">", "0", ":", "\n", "        ", "precision", "=", "1", "\n", "recall", "=", "0", "\n", "", "elif", "n_fg", ">", "0", "and", "n_gt", "==", "0", ":", "\n", "        ", "precision", "=", "0", "\n", "recall", "=", "1", "\n", "", "elif", "n_fg", "==", "0", "and", "n_gt", "==", "0", ":", "\n", "        ", "precision", "=", "1", "\n", "recall", "=", "1", "\n", "", "else", ":", "\n", "        ", "precision", "=", "np", ".", "sum", "(", "fg_match", ")", "/", "float", "(", "n_fg", ")", "\n", "recall", "=", "np", ".", "sum", "(", "gt_match", ")", "/", "float", "(", "n_gt", ")", "\n", "\n", "# Compute F measure", "\n", "", "if", "precision", "+", "recall", "==", "0", ":", "\n", "        ", "F", "=", "0", "\n", "", "else", ":", "\n", "        ", "F", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", ";", "\n", "\n", "", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.f_boundary.seg2bmap": [[73, 132], ["seg.astype.astype", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "float", "float", "float", "float", "numpy.zeros", "range", "range", "numpy.atleast_3d", "abs", "floor", "floor"], "function", ["None"], ["", "def", "seg2bmap", "(", "seg", ",", "width", "=", "None", ",", "height", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    From a segmentation, compute a binary boundary map with 1 pixel wide\n    boundaries.  The boundary pixels are offset by 1/2 pixel towards the\n    origin from the actual segment boundary.\n\n    Arguments:\n        seg     : Segments labeled from 1..k.\n        width\t  :\tWidth of desired bmap  <= seg.shape[1]\n        height  :\tHeight of desired bmap <= seg.shape[0]\n\n    Returns:\n        bmap (ndarray):\tBinary boundary map.\n\n     David Martin <dmartin@eecs.berkeley.edu>\n     January 2003\n \"\"\"", "\n", "\n", "seg", "=", "seg", ".", "astype", "(", "np", ".", "bool", ")", "\n", "seg", "[", "seg", ">", "0", "]", "=", "1", "\n", "\n", "assert", "np", ".", "atleast_3d", "(", "seg", ")", ".", "shape", "[", "2", "]", "==", "1", "\n", "\n", "width", "=", "seg", ".", "shape", "[", "1", "]", "if", "width", "is", "None", "else", "width", "\n", "height", "=", "seg", ".", "shape", "[", "0", "]", "if", "height", "is", "None", "else", "height", "\n", "\n", "h", ",", "w", "=", "seg", ".", "shape", "[", ":", "2", "]", "\n", "\n", "ar1", "=", "float", "(", "width", ")", "/", "float", "(", "height", ")", "\n", "ar2", "=", "float", "(", "w", ")", "/", "float", "(", "h", ")", "\n", "\n", "assert", "not", "(", "width", ">", "w", "|", "height", ">", "h", "|", "abs", "(", "ar1", "-", "ar2", ")", ">", "0.01", ")", ",", "'Can'", "'t convert %dx%d seg to %dx%d bmap.'", "%", "(", "w", ",", "h", ",", "width", ",", "height", ")", "\n", "\n", "e", "=", "np", ".", "zeros_like", "(", "seg", ")", "\n", "s", "=", "np", ".", "zeros_like", "(", "seg", ")", "\n", "se", "=", "np", ".", "zeros_like", "(", "seg", ")", "\n", "\n", "e", "[", ":", ",", ":", "-", "1", "]", "=", "seg", "[", ":", ",", "1", ":", "]", "\n", "s", "[", ":", "-", "1", ",", ":", "]", "=", "seg", "[", "1", ":", ",", ":", "]", "\n", "se", "[", ":", "-", "1", ",", ":", "-", "1", "]", "=", "seg", "[", "1", ":", ",", "1", ":", "]", "\n", "\n", "b", "=", "seg", "^", "e", "|", "seg", "^", "s", "|", "seg", "^", "se", "\n", "b", "[", "-", "1", ",", ":", "]", "=", "seg", "[", "-", "1", ",", ":", "]", "^", "e", "[", "-", "1", ",", ":", "]", "\n", "b", "[", ":", ",", "-", "1", "]", "=", "seg", "[", ":", ",", "-", "1", "]", "^", "s", "[", ":", ",", "-", "1", "]", "\n", "b", "[", "-", "1", ",", "-", "1", "]", "=", "0", "\n", "\n", "if", "w", "==", "width", "and", "h", "==", "height", ":", "\n", "        ", "bmap", "=", "b", "\n", "", "else", ":", "\n", "        ", "bmap", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "\n", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "                ", "if", "b", "[", "y", ",", "x", "]", ":", "\n", "                    ", "j", "=", "1", "+", "floor", "(", "(", "y", "-", "1", ")", "+", "height", "/", "h", ")", "\n", "i", "=", "1", "+", "floor", "(", "(", "x", "-", "1", ")", "+", "width", "/", "h", ")", "\n", "bmap", "[", "j", ",", "i", "]", "=", "1", ";", "\n", "\n", "", "", "", "", "return", "bmap", "", "", ""]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.jaccard.db_eval_iou": [[14, 32], ["annotation.astype.astype", "segmentation.astype.astype", "numpy.isclose", "numpy.isclose", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["def", "db_eval_iou", "(", "annotation", ",", "segmentation", ")", ":", "\n", "\n", "    ", "\"\"\" Compute region similarity as the Jaccard Index.\n    Arguments:\n        annotation   (ndarray): binary annotation   map.\n        segmentation (ndarray): binary segmentation map.\n    Return:\n        jaccard (float): region similarity\n \"\"\"", "\n", "\n", "annotation", "=", "annotation", ".", "astype", "(", "np", ".", "bool", ")", "\n", "segmentation", "=", "segmentation", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "if", "np", ".", "isclose", "(", "np", ".", "sum", "(", "annotation", ")", ",", "0", ")", "and", "np", ".", "isclose", "(", "np", ".", "sum", "(", "segmentation", ")", ",", "0", ")", ":", "\n", "        ", "return", "1", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "sum", "(", "(", "annotation", "&", "segmentation", ")", ")", "/", "np", ".", "sum", "(", "(", "annotation", "|", "segmentation", ")", ",", "dtype", "=", "np", ".", "float32", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.Resize.__init__": [[138, 144], ["isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "assert", "isinstance", "(", "output_size", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "output_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "output_size", "=", "(", "output_size", ",", "output_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.Resize.__call__": [[145, 155], ["cv2.resize"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "images", ")", ":", "\n", "        ", "h", ",", "w", "=", "images", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "\n", "if", "self", ".", "output_size", "==", "(", "h", ",", "w", ")", ":", "\n", "            ", "return", "images", "\n", "", "else", ":", "\n", "            ", "new_h", ",", "new_w", "=", "self", ".", "output_size", "\n", "\n", "", "images", "=", "[", "cv2", ".", "resize", "(", "image", ",", "dsize", "=", "(", "new_w", ",", "new_h", ")", ")", "for", "image", "in", "images", "]", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.ConvertToLAB.__init__": [[158, 160], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "_", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.ConvertToLAB.__call__": [[161, 164], ["cv2.cvtColor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ")", ":", "\n", "        ", "images", "=", "[", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2Lab", ")", "for", "image", "in", "images", "]", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.ToTensor.__call__": [[169, 172], ["custom_transforms.to_tensor"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.to_tensor"], ["def", "__call__", "(", "self", ",", "images", ")", ":", "\n", "        ", "images", "=", "[", "to_tensor", "(", "image", ")", "for", "image", "in", "images", "]", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.Normalize.__init__": [[177, 181], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.Normalize.__call__": [[182, 185], ["custom_transforms.normalize"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.normalize"], ["", "def", "__call__", "(", "self", ",", "images", ")", ":", "\n", "        ", "images", "=", "[", "normalize", "(", "image", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "inplace", ")", "for", "image", "in", "images", "]", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.Compose.__init__": [[188, 190], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.Compose.__call__": [[191, 195], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", "=", "t", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.Compose.__repr__": [[196, 203], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "'\\n'", "\n", "format_string", "+=", "'    {0}'", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "'\\n)'", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.Lambda.__init__": [[210, 213], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "assert", "isinstance", "(", "lambd", ",", "types", ".", "LambdaType", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.Lambda.__call__": [[214, 216], ["custom_transforms.Lambda.lambd"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.Lambda.__repr__": [[217, 219], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.DivNorm.__init__": [[222, 224], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.DivNorm.__call__": [[225, 228], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ")", ":", "\n", "        ", "images", "=", "[", "x", "/", "self", ".", "value", "for", "x", "in", "images", "]", "\n", "return", "images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms._is_pil_image": [[18, 23], ["isinstance", "isinstance"], "function", ["None"], ["def", "_is_pil_image", "(", "img", ")", ":", "\n", "    ", "if", "accimage", "is", "not", "None", ":", "\n", "        ", "return", "isinstance", "(", "img", ",", "(", "Image", ".", "Image", ",", "accimage", ".", "Image", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms._is_tensor_image": [[25, 27], ["torch.is_tensor", "img.ndimension"], "function", ["None"], ["", "", "def", "_is_tensor_image", "(", "img", ")", ":", "\n", "    ", "return", "torch", ".", "is_tensor", "(", "img", ")", "and", "img", ".", "ndimension", "(", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms._is_numpy": [[29, 31], ["isinstance"], "function", ["None"], ["", "def", "_is_numpy", "(", "img", ")", ":", "\n", "    ", "return", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms._is_numpy_image": [[33, 35], ["None"], "function", ["None"], ["", "def", "_is_numpy_image", "(", "img", ")", ":", "\n", "    ", "return", "img", ".", "ndim", "in", "{", "2", ",", "3", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.to_tensor": [[37, 97], ["isinstance", "torch.ByteTensor.view", "torch.ByteTensor.transpose().transpose().contiguous", "isinstance", "TypeError", "custom_transforms._is_numpy", "ValueError", "torch.from_numpy", "isinstance", "isinstance", "numpy.zeros", "pic.copyto", "torch.from_numpy", "torch.from_numpy", "torch.ByteTensor.float().div", "custom_transforms._is_pil_image", "custom_transforms._is_numpy", "custom_transforms._is_numpy_image", "pic.transpose", "torch.ByteTensor.float().div", "numpy.array", "torch.from_numpy", "len", "torch.ByteTensor.transpose().transpose", "type", "numpy.array", "torch.from_numpy", "torch.ByteTensor.float", "torch.ByteTensor.float", "numpy.array", "torch.ByteTensor", "torch.ByteTensor.transpose", "torch.from_numpy", "torch.ByteStorage.from_buffer", "numpy.array", "pic.tobytes"], "function", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms._is_numpy", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms._is_pil_image", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms._is_numpy", "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms._is_numpy_image"], ["", "def", "to_tensor", "(", "pic", ")", ":", "\n", "    ", "\"\"\"Convert a ``PIL Image`` or ``numpy.ndarray`` to tensor.\n\n    See ``ToTensor`` for more details.\n\n    Args:\n        pic (PIL Image or numpy.ndarray): Image to be converted to tensor.\n\n    Returns:\n        Tensor: Converted image.\n    \"\"\"", "\n", "if", "not", "(", "_is_pil_image", "(", "pic", ")", "or", "_is_numpy", "(", "pic", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'pic should be PIL Image or ndarray. Got {}'", ".", "format", "(", "type", "(", "pic", ")", ")", ")", "\n", "\n", "", "if", "_is_numpy", "(", "pic", ")", "and", "not", "_is_numpy_image", "(", "pic", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'pic should be 2/3 dimensional. Got {} dimensions.'", ".", "format", "(", "pic", ".", "ndim", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "        ", "if", "pic", ".", "ndim", "==", "2", ":", "\n", "            ", "pic", "=", "pic", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "pic", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "# HWC->CHW", "\n", "# backward compatibility", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "            ", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n", "", "", "if", "accimage", "is", "not", "None", "and", "isinstance", "(", "pic", ",", "accimage", ".", "Image", ")", ":", "\n", "        ", "nppic", "=", "np", ".", "zeros", "(", "[", "pic", ".", "channels", ",", "pic", ".", "height", ",", "pic", ".", "width", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pic", ".", "copyto", "(", "nppic", ")", "\n", "return", "torch", ".", "from_numpy", "(", "nppic", ")", "\n", "\n", "# handle PIL Image", "\n", "", "if", "pic", ".", "mode", "==", "'I'", ":", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int16", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "'F'", ":", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "float32", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "'1'", ":", "\n", "        ", "img", "=", "255", "*", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "uint8", ",", "copy", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "# PIL image mode: L, LA, P, I, F, RGB, YCbCr, RGBA, CMYK", "\n", "", "if", "pic", ".", "mode", "==", "'YCbCr'", ":", "\n", "        ", "nchannel", "=", "3", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "        ", "nchannel", "=", "1", "\n", "", "else", ":", "\n", "        ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "        ", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "", "else", ":", "\n", "        ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms.normalize": [[99, 127], ["torch.as_tensor", "torch.as_tensor", "tensor.clone.sub_().div_", "custom_transforms._is_tensor_image", "TypeError", "tensor.clone.clone", "tensor.clone.sub_"], "function", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.custom_transforms._is_tensor_image"], ["", "", "def", "normalize", "(", "tensor", ",", "mean", ",", "std", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "\"\"\"Normalize a tensor image with mean and standard deviation.\n\n    .. note::\n        This transform acts out of place by default, i.e., it does not mutates the input tensor.\n\n    See :class:`~torchvision.transforms.Normalize` for more details.\n\n    Args:\n        tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        mean (sequence): Sequence of means for each channel.\n        std (sequence): Sequence of standard deviations for each channel.\n        inplace(bool,optional): Bool to make this operation inplace.\n\n    Returns:\n        Tensor: Normalized Tensor image.\n    \"\"\"", "\n", "if", "not", "_is_tensor_image", "(", "tensor", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'tensor is not a torch image.'", ")", "\n", "\n", "", "if", "not", "inplace", ":", "\n", "        ", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "\n", "", "dtype", "=", "tensor", ".", "dtype", "\n", "mean", "=", "torch", ".", "as_tensor", "(", "mean", ",", "dtype", "=", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "std", "=", "torch", ".", "as_tensor", "(", "std", ",", "dtype", "=", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "tensor", ".", "sub_", "(", "mean", "[", ":", ",", "None", ",", "None", "]", ")", ".", "div_", "(", "std", "[", ":", ",", "None", ",", "None", "]", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.test_image_folder_davis.__init__": [[129, 138], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_data", ",", "training", "=", "False", ")", ":", "\n", "        ", "root_annos", ",", "root_imgs", ",", "annos", ",", "jpegs", ",", "videos", ",", "annos_index", "=", "train_data", "\n", "self", ".", "root_annos", "=", "root_annos", "\n", "self", ".", "root_imgs", "=", "root_imgs", "\n", "self", ".", "annos", "=", "annos", "\n", "self", ".", "jpegs", "=", "jpegs", "\n", "self", ".", "videos", "=", "videos", "\n", "self", ".", "annos_index", "=", "annos_index", "\n", "self", ".", "training", "=", "training", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.test_image_folder_davis.__getitem__": [[139, 152], ["TestLoader.annotation_read", "TestLoader.frame_read", "os.path.join", "os.path.join", "x.replace", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.annotation_read", "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.frame_read"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "annos", "=", "self", ".", "annos", "[", "index", "]", "\n", "jpegs", "=", "self", ".", "jpegs", "[", "index", "]", "\n", "video_name", "=", "self", ".", "videos", "[", "index", "]", "\n", "annos_index", "=", "self", ".", "annos_index", "[", "index", "]", "\n", "\n", "annotations", "=", "[", "annotation_read", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_annos", ",", "video_name", ",", "anno", ")", ")", "for", "anno", "in", "annos", "]", "\n", "images_rgb", "=", "[", "frame_read", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_imgs", ",", "video_name", ",", "jpeg", ")", ")", "for", "jpeg", "in", "jpegs", "]", "\n", "\n", "_", ",", "height", ",", "width", "=", "annotations", "[", "0", "]", ".", "shape", "\n", "meta", "=", "{", "\"video_name\"", ":", "video_name", ",", "\"annotation_index\"", ":", "annos_index", ",", "\"frame_names\"", ":", "[", "x", ".", "replace", "(", "'jpg'", ",", "'png'", ")", "for", "x", "in", "jpegs", "]", ",", "\n", "\"height\"", ":", "height", ",", "\"width\"", ":", "width", ",", "\"abs_frame_path\"", ":", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root_imgs", ",", "video_name", ",", "x", ")", "for", "x", "in", "jpegs", "]", "}", "\n", "return", "images_rgb", ",", "annotations", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.test_image_folder_davis.__len__": [[153, 155], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "annos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.test_image_folder_youtube.__init__": [[158, 168], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_data", ",", "training", "=", "False", ")", ":", "\n", "        ", "root_annos", ",", "root_imgs", ",", "annos", ",", "jpegs", ",", "videos", ",", "annos_index", ",", "obj_num", "=", "train_data", "\n", "self", ".", "root_annos", "=", "root_annos", "\n", "self", ".", "root_imgs", "=", "root_imgs", "\n", "self", ".", "annos", "=", "annos", "\n", "self", ".", "jpegs", "=", "jpegs", "\n", "self", ".", "videos", "=", "videos", "\n", "self", ".", "annos_index", "=", "annos_index", "\n", "self", ".", "obj_num", "=", "obj_num", "\n", "self", ".", "training", "=", "training", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.test_image_folder_youtube.__getitem__": [[169, 185], ["TestLoader.annotation_read", "TestLoader.frame_read", "os.path.join", "os.path.join", "x.replace", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.annotation_read", "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.frame_read"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "annos", "=", "self", ".", "annos", "[", "index", "]", "\n", "jpegs", "=", "self", ".", "jpegs", "[", "index", "]", "\n", "video_name", "=", "self", ".", "videos", "[", "index", "]", "\n", "annos_index", "=", "self", ".", "annos_index", "[", "index", "]", "\n", "object_number", "=", "self", ".", "obj_num", "[", "index", "]", "\n", "\n", "annotations", "=", "[", "annotation_read", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_annos", ",", "video_name", ",", "anno", ")", ")", "for", "anno", "in", "annos", "]", "\n", "images_rgb", "=", "[", "frame_read", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_imgs", ",", "video_name", ",", "jpeg", ")", ")", "for", "jpeg", "in", "jpegs", "]", "\n", "\n", "_", ",", "height", ",", "width", "=", "annotations", "[", "0", "]", ".", "shape", "\n", "\n", "meta", "=", "{", "\"video_name\"", ":", "video_name", ",", "\"annotation_index\"", ":", "annos_index", ",", "\"frame_names\"", ":", "[", "x", ".", "replace", "(", "'jpg'", ",", "'png'", ")", "for", "x", "in", "jpegs", "]", ",", "\n", "\"video_object_number\"", ":", "object_number", ",", "\"height\"", ":", "height", ",", "\"width\"", ":", "width", ",", "\n", "\"abs_frame_path\"", ":", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root_imgs", ",", "video_name", ",", "x", ")", "for", "x", "in", "jpegs", "]", "}", "\n", "return", "images_rgb", ",", "annotations", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.test_image_folder_youtube.__len__": [[186, 188], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "annos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.test_image_folder_custom.__init__": [[191, 200], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_data", ",", "training", "=", "False", ")", ":", "\n", "        ", "root_annos", ",", "root_imgs", ",", "annos", ",", "jpegs", ",", "videos", ",", "annos_index", "=", "train_data", "\n", "self", ".", "root_annos", "=", "root_annos", "\n", "self", ".", "root_imgs", "=", "root_imgs", "\n", "self", ".", "annos", "=", "annos", "\n", "self", ".", "jpegs", "=", "jpegs", "\n", "self", ".", "videos", "=", "videos", "\n", "self", ".", "annos_index", "=", "annos_index", "\n", "self", ".", "training", "=", "training", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.test_image_folder_custom.__getitem__": [[201, 215], ["TestLoader.annotation_read", "TestLoader.frame_read", "os.path.join", "os.path.join", "x.replace", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.annotation_read", "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.frame_read"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "annos", "=", "self", ".", "annos", "[", "index", "]", "\n", "jpegs", "=", "self", ".", "jpegs", "[", "index", "]", "\n", "video_name", "=", "self", ".", "videos", "[", "index", "]", "\n", "annos_index", "=", "self", ".", "annos_index", "[", "index", "]", "\n", "\n", "annotations", "=", "[", "annotation_read", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_annos", ",", "video_name", ",", "anno", ")", ")", "for", "anno", "in", "annos", "]", "\n", "images_rgb", "=", "[", "frame_read", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_imgs", ",", "video_name", ",", "jpeg", ")", ")", "for", "jpeg", "in", "jpegs", "]", "\n", "\n", "_", ",", "height", ",", "width", "=", "annotations", "[", "0", "]", ".", "shape", "\n", "\n", "meta", "=", "{", "\"video_name\"", ":", "video_name", ",", "\"annotation_index\"", ":", "annos_index", ",", "\"frame_names\"", ":", "[", "x", ".", "replace", "(", "'jpg'", ",", "'png'", ")", "for", "x", "in", "jpegs", "]", ",", "\n", "\"height\"", ":", "height", ",", "\"width\"", ":", "width", ",", "\"abs_frame_path\"", ":", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root_imgs", ",", "video_name", ",", "x", ")", "for", "x", "in", "jpegs", "]", "}", "\n", "return", "images_rgb", ",", "annotations", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.test_image_folder_custom.__len__": [[216, 218], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "annos", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.dataloader_davis": [[15, 39], ["sorted", "os.path.join", "os.path.join", "open().readlines", "video_all.append", "annotation_index_all.append", "os.path.join", "sorted", "annotation_all.append", "os.path.join", "sorted", "jpeg_all.append", "video.strip", "os.listdir", "os.listdir", "open", "video.strip", "video.strip"], "function", ["None"], ["def", "dataloader_davis", "(", "filepath", ")", ":", "\n", "    ", "global", "video_names", "\n", "video_txt", "=", "filepath", "+", "'/ImageSets/2017/val.txt'", "\n", "video_names", "=", "sorted", "(", "open", "(", "video_txt", ")", ".", "readlines", "(", ")", ")", "\n", "\n", "annotation_all", "=", "[", "]", "\n", "jpeg_all", "=", "[", "]", "\n", "video_all", "=", "[", "]", "\n", "root_label_path", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'Annotations/480p/'", ")", "\n", "root_img_path", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'JPEGImages/480p/'", ")", "\n", "annotation_index_all", "=", "[", "]", "\n", "for", "video", "in", "video_names", ":", "\n", "        ", "video_all", ".", "append", "(", "video", ".", "strip", "(", ")", ")", "\n", "annotation_index_all", ".", "append", "(", "[", "0", "]", ")", "\n", "\n", "anno_path", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'Annotations/480p/'", "+", "video", ".", "strip", "(", ")", ")", "\n", "cat_annos", "=", "sorted", "(", "os", ".", "listdir", "(", "anno_path", ")", ")", "\n", "annotation_all", ".", "append", "(", "cat_annos", ")", "\n", "\n", "jpeg_path", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'JPEGImages/480p/'", "+", "video", ".", "strip", "(", ")", ")", "\n", "cat_jpegs", "=", "sorted", "(", "os", ".", "listdir", "(", "jpeg_path", ")", ")", "\n", "jpeg_all", ".", "append", "(", "cat_jpegs", ")", "\n", "\n", "", "return", "root_label_path", ",", "root_img_path", ",", "annotation_all", ",", "jpeg_all", ",", "video_all", ",", "annotation_index_all", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.dataloader_youtube": [[41, 82], ["os.path.join", "sorted", "print", "os.path.join", "os.path.join", "enumerate", "json.load", "list", "video_all.append", "list", "sorted", "sorted", "obj_num_all.append", "annotation_all.append", "jpeg_all.append", "annotation_index_all.append", "open", "video_dict.keys", "len", "torch.keys", "max", "map", "sorted.append", "numpy.unique", "numpy.unique", "anno.replace.replace", "anno_idx.append", "int", "list", "sorted.index"], "function", ["None"], ["", "def", "dataloader_youtube", "(", "filepath", ")", ":", "\n", "    ", "global", "video_names", "\n", "label_file", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'valid/meta.json'", ")", "\n", "video_dict", "=", "json", ".", "load", "(", "open", "(", "label_file", ",", "'r'", ")", ")", "[", "'videos'", "]", "\n", "video_names", "=", "sorted", "(", "list", "(", "video_dict", ".", "keys", "(", ")", ")", ")", "\n", "print", "(", "\"TEST DIR: {}, VIDEO NUMBER: {}\"", ".", "format", "(", "label_file", ",", "len", "(", "video_names", ")", ")", ")", "\n", "\n", "annotation_all", "=", "[", "]", "\n", "jpeg_all", "=", "[", "]", "\n", "video_all", "=", "[", "]", "\n", "obj_num_all", "=", "[", "]", "\n", "annotation_index_all", "=", "[", "]", "\n", "root_img_path", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'valid/JPEGImages'", ")", "\n", "root_label_path", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'valid/Annotations'", ")", "\n", "for", "idx", ",", "video", "in", "enumerate", "(", "video_names", ")", ":", "\n", "        ", "video_all", ".", "append", "(", "video", ")", "\n", "data", "=", "video_dict", "[", "video", "]", "[", "'objects'", "]", "\n", "obj_names", "=", "list", "(", "data", ".", "keys", "(", ")", ")", "\n", "\n", "images", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "max_obj_num", "=", "0", "\n", "for", "obj_n", "in", "obj_names", ":", "\n", "            ", "max_obj_num", "=", "max", "(", "max_obj_num", ",", "int", "(", "obj_n", ")", ")", "\n", "images", "+=", "map", "(", "lambda", "x", ":", "x", "+", "'.jpg'", ",", "list", "(", "data", "[", "obj_n", "]", "[", "\"frames\"", "]", ")", ")", "\n", "labels", ".", "append", "(", "data", "[", "obj_n", "]", "[", "\"frames\"", "]", "[", "0", "]", "+", "'.png'", ")", "\n", "\n", "", "images", "=", "sorted", "(", "np", ".", "unique", "(", "images", ")", ")", "\n", "labels", "=", "sorted", "(", "np", ".", "unique", "(", "labels", ")", ")", "\n", "obj_num_all", ".", "append", "(", "max_obj_num", ")", "\n", "\n", "annotation_all", ".", "append", "(", "labels", ")", "\n", "jpeg_all", ".", "append", "(", "images", ")", "\n", "\n", "anno_idx", "=", "[", "]", "\n", "for", "anno", "in", "labels", ":", "\n", "            ", "anno", "=", "anno", ".", "replace", "(", "'png'", ",", "'jpg'", ")", "\n", "anno_idx", ".", "append", "(", "images", ".", "index", "(", "anno", ")", ")", "\n", "", "annotation_index_all", ".", "append", "(", "anno_idx", ")", "\n", "\n", "", "return", "root_label_path", ",", "root_img_path", ",", "annotation_all", ",", "jpeg_all", ",", "video_all", ",", "annotation_index_all", ",", "obj_num_all", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.dataloader_custom": [[84, 111], ["sorted", "os.path.join", "os.path.join", "enumerate", "os.listdir", "video_all.append", "sorted", "sorted", "sorted.index", "annotation_all.append", "jpeg_all.append", "annotation_index_all.append", "os.path.join", "numpy.unique", "numpy.unique", "labels[].replace", "anno.replace.replace", "anno_idx.append", "os.listdir", "os.listdir", "sorted.index", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "dataloader_custom", "(", "filepath", ")", ":", "\n", "    ", "global", "video_names", "\n", "video_names", "=", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "filepath", ",", "'valid_demo/JPEGImages'", ")", ")", ")", "\n", "\n", "annotation_all", "=", "[", "]", "\n", "jpeg_all", "=", "[", "]", "\n", "video_all", "=", "[", "]", "\n", "annotation_index_all", "=", "[", "]", "\n", "root_img_path", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'valid_demo/JPEGImages'", ")", "\n", "root_label_path", "=", "os", ".", "path", ".", "join", "(", "filepath", ",", "'valid_demo/Annotations'", ")", "\n", "for", "idx", ",", "video", "in", "enumerate", "(", "video_names", ")", ":", "\n", "        ", "video_all", ".", "append", "(", "video", ")", "\n", "images", "=", "sorted", "(", "np", ".", "unique", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root_img_path", ",", "video", ")", ")", ")", ")", "\n", "labels", "=", "sorted", "(", "np", ".", "unique", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root_label_path", ",", "video", ")", ")", ")", ")", "\n", "first_frame_idx", "=", "images", ".", "index", "(", "labels", "[", "0", "]", ".", "replace", "(", "'png'", ",", "'jpg'", ")", ")", "\n", "images", "=", "images", "[", "first_frame_idx", ":", "]", "\n", "\n", "annotation_all", ".", "append", "(", "labels", ")", "\n", "jpeg_all", ".", "append", "(", "images", ")", "\n", "\n", "anno_idx", "=", "[", "]", "\n", "for", "anno", "in", "labels", ":", "\n", "            ", "anno", "=", "anno", ".", "replace", "(", "'png'", ",", "'jpg'", ")", "\n", "anno_idx", ".", "append", "(", "images", ".", "index", "(", "anno", ")", ")", "\n", "", "annotation_index_all", ".", "append", "(", "anno_idx", ")", "\n", "\n", "", "return", "root_label_path", ",", "root_img_path", ",", "annotation_all", ",", "jpeg_all", ",", "video_all", ",", "annotation_index_all", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.frame_read": [[113, 120], ["cv2.imread", "cv2.cvtColor", "numpy.float32", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "def", "frame_read", "(", "path", ")", ":", "\n", "    ", "image", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "image", "=", "np", ".", "float32", "(", "image", ")", "/", "255.0", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2Lab", ")", "\n", "image", "=", "transforms", ".", "ToTensor", "(", ")", "(", "image", ")", "\n", "image", "=", "transforms", ".", "Normalize", "(", "[", "50", ",", "0", ",", "0", "]", ",", "[", "50", ",", "127", ",", "127", "]", ")", "(", "image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TestLoader.annotation_read": [[122, 126], ["functional.utils.mask_io.read_mask", "numpy.expand_dims", "torch.Tensor().contiguous().long", "torch.Tensor().contiguous().long", "torch.Tensor().contiguous", "torch.Tensor().contiguous", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.bo-miao_MAMP.utils.mask_io.read_mask"], ["", "def", "annotation_read", "(", "path", ")", ":", "\n", "    ", "anno", "=", "read_mask", "(", "path", ")", "\n", "anno", "=", "np", ".", "expand_dims", "(", "anno", ",", "0", ")", "\n", "return", "torch", ".", "Tensor", "(", "anno", ")", ".", "contiguous", "(", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TrainLoader.train_image_folder.__init__": [[70, 80], ["torchvision.Compose", "functional.Resize", "functional.DivNorm", "functional.ConvertToLAB", "functional.ToTensor", "functional.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "filenames", ",", "args", ",", "training", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "refs", "=", "filenames", "\n", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "Resize", "(", "self", ".", "args", ".", "img_size", ")", ",", "\n", "tr", ".", "DivNorm", "(", "255.0", ")", ",", "\n", "tr", ".", "ConvertToLAB", "(", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", ",", "\n", "tr", ".", "Normalize", "(", "[", "50", ",", "0", ",", "0", "]", ",", "[", "50", ",", "127", ",", "127", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TrainLoader.train_image_folder.__getitem__": [[81, 90], ["TrainLoader.train_image_folder.composed_transforms", "images_path[].split", "TrainLoader.image_loader", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TrainLoader.image_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "images_path", "=", "self", ".", "refs", "[", "index", "]", "\n", "video_name", "=", "images_path", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "0", "]", "\n", "images", "=", "[", "image_loader", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "image", ")", ")", "for", "image", "in", "images_path", "]", "\n", "lab_images", "=", "self", ".", "composed_transforms", "(", "images", ")", "\n", "\n", "of_images", "=", "1", "\n", "meta", "=", "{", "\"video_name\"", ":", "video_name", "}", "\n", "return", "lab_images", ",", "of_images", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TrainLoader.train_image_folder.__len__": [[91, 93], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "refs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TrainLoader.train_dataloader": [[18, 61], ["open().readlines", "print", "numpy.arange", "numpy.random.shuffle", "print", "os.path.join.endswith", "print", "os.listdir", "os.path.join", "[].strip", "int", "int", "len", "numpy.random.choice", "numpy.arange", "divmod", "numpy.split", "train_data.extend", "open", "csv.writer", "open", "len", "[].strip", "[].strip", "len", "image_pairs.append", "len", "os.path.join", "os.listdir", "len", "os.listdir.sort", "int", "csv.writer.writerow", "os.path.join", "os.path.join", "filename.split", "list", "files[].split", "filename.split", "filename.split", "int", "[].split", "x.split"], "function", ["None"], ["def", "train_dataloader", "(", "csv_path", "=", "\"ytvos.csv\"", ",", "ref_num", "=", "1", ")", ":", "\n", "    ", "if", "not", "csv_path", ".", "endswith", "(", "\".csv\"", ")", ":", "\n", "        ", "print", "(", "\"Did not detect .csv file, scan dir {} and generate ytvos.csv\"", ".", "format", "(", "csv_path", ")", ")", "\n", "ld", "=", "os", ".", "listdir", "(", "csv_path", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'ytvos.csv'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "filewriter", "=", "csv", ".", "writer", "(", "f", ")", "\n", "for", "l", "in", "ld", ":", "\n", "                ", "files", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "csv_path", ",", "l", ")", ")", "\n", "n", "=", "len", "(", "files", ")", "\n", "files", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "init", "=", "int", "(", "files", "[", "0", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "filewriter", ".", "writerow", "(", "[", "l", ",", "init", ",", "n", "]", ")", "\n", "", "", "csv_path", "=", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'ytvos.csv'", ")", "\n", "\n", "", "filenames", "=", "open", "(", "csv_path", ")", ".", "readlines", "(", ")", "\n", "print", "(", "\"SELECTED VIDEO NUMBER IS {}\"", ".", "format", "(", "len", "(", "filenames", ")", ")", ")", "\n", "videos", "=", "[", "filename", ".", "split", "(", "','", ")", "[", "0", "]", ".", "strip", "(", ")", "for", "filename", "in", "filenames", "]", "\n", "start_frames", "=", "[", "int", "(", "filename", ".", "split", "(", "','", ")", "[", "1", "]", ".", "strip", "(", ")", ")", "for", "filename", "in", "filenames", "]", "\n", "num_frames", "=", "[", "int", "(", "filename", ".", "split", "(", "','", ")", "[", "2", "]", ".", "strip", "(", ")", ")", "for", "filename", "in", "filenames", "]", "\n", "\n", "all_index", "=", "np", ".", "arange", "(", "len", "(", "videos", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "all_index", ")", "\n", "\n", "train_data", "=", "[", "]", "\n", "total_num", "=", "ref_num", "+", "1", "\n", "for", "index", "in", "all_index", ":", "\n", "        ", "frame_interval", "=", "np", ".", "random", ".", "choice", "(", "[", "2", ",", "5", ",", "8", "]", ",", "p", "=", "[", "0.4", ",", "0.4", ",", "0.2", "]", ")", "\n", "\n", "image_pairs", "=", "[", "]", "\n", "n_frames", "=", "num_frames", "[", "index", "]", "\n", "start_frame", "=", "start_frames", "[", "index", "]", "\n", "frame_indices", "=", "np", ".", "arange", "(", "start_frame", ",", "start_frame", "+", "n_frames", ",", "frame_interval", ")", "\n", "total_batch", ",", "batch_mod", "=", "divmod", "(", "len", "(", "frame_indices", ")", ",", "total_num", ")", "\n", "if", "batch_mod", ">", "0", ":", "\n", "            ", "frame_indices", "=", "frame_indices", "[", ":", "-", "batch_mod", "]", "\n", "", "frame_indices_batches", "=", "np", ".", "split", "(", "frame_indices", ",", "total_batch", ")", "\n", "for", "batches", "in", "frame_indices_batches", ":", "\n", "            ", "image_pair", "=", "[", "os", ".", "path", ".", "join", "(", "videos", "[", "index", "]", ",", "'{:05d}.jpg'", ".", "format", "(", "frame", ")", ")", "\n", "for", "frame", "in", "list", "(", "batches", ")", "]", "\n", "image_pairs", ".", "append", "(", "image_pair", ")", "\n", "", "train_data", ".", "extend", "(", "image_pairs", ")", "\n", "", "print", "(", "\"SELECTED FRAME PAIR NUMBER IS {}\"", ".", "format", "(", "len", "(", "train_data", ")", ")", ")", "\n", "return", "train_data", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.dataset.TrainLoader.image_loader": [[63, 67], ["cv2.imread", "numpy.float32"], "function", ["None"], ["", "def", "image_loader", "(", "path", ")", ":", "\n", "    ", "image", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "image", "=", "np", ".", "float32", "(", "image", ")", "#/ 255.0", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.models.encoder.ResidualBlock.__init__": [[49, 65], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inchannel", ",", "outchannel", ",", "stride", "=", "1", ",", "kernel_size", "=", "3", ",", "activation", "=", "F", ".", "relu", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "left", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inchannel", ",", "outchannel", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outchannel", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "outchannel", ",", "outchannel", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outchannel", ")", "\n", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "inchannel", "!=", "outchannel", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inchannel", ",", "outchannel", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "outchannel", ")", "\n", ")", "\n", "", "self", ".", "activation", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.models.encoder.ResidualBlock.forward": [[66, 71], ["encoder.ResidualBlock.left", "encoder.ResidualBlock.shortcut", "encoder.ResidualBlock.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "left", "(", "x", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "activation", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.models.encoder.ResNet18.__init__": [[74, 87], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "encoder.ResNet18.make_layer", "encoder.ResNet18.make_layer", "encoder.ResNet18.make_layer", "encoder.ResNet18.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__", "home.repos.pwc.inspect_result.bo-miao_MAMP.models.encoder.ResNet18.make_layer", "home.repos.pwc.inspect_result.bo-miao_MAMP.models.encoder.ResNet18.make_layer", "home.repos.pwc.inspect_result.bo-miao_MAMP.models.encoder.ResNet18.make_layer", "home.repos.pwc.inspect_result.bo-miao_MAMP.models.encoder.ResNet18.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "in_ch", "=", "3", ")", ":", "\n", "        ", "super", "(", "ResNet18", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inchannel", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "make_layer", "(", "ResidualBlock", ",", "64", ",", "2", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "make_layer", "(", "ResidualBlock", ",", "128", ",", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "make_layer", "(", "ResidualBlock", ",", "256", ",", "2", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer4", "=", "self", ".", "make_layer", "(", "ResidualBlock", ",", "256", ",", "2", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.models.encoder.ResNet18.make_layer": [[88, 95], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "make_layer", "(", "self", ",", "block", ",", "channels", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inchannel", ",", "channels", ",", "stride", ")", ")", "\n", "self", ".", "inchannel", "=", "channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.models.encoder.ResNet18.forward": [[96, 103], ["encoder.ResNet18.conv1", "encoder.ResNet18.layer1", "encoder.ResNet18.layer2", "encoder.ResNet18.layer3", "encoder.ResNet18.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.models.encoder.warp_optical_flow": [[12, 40], ["x.size", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "torch.arange().view().repeat", "xx.view().repeat.view().repeat", "yy.view().repeat.view().repeat", "torch.cat", "torch.cat", "torch.cat", "grid.to().to.to().to", "vgrid.permute().to.permute().to", "torch.functional.grid_sample", "torch.autograd.Variable().to().to", "torch.autograd.Variable().to().to", "torch.autograd.Variable().to().to", "torch.functional.grid_sample", "torch.autograd.Variable", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "xx.view().repeat.view", "yy.view().repeat.view", "grid.to().to.to", "max", "max", "vgrid.permute().to.permute", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "vgrid[].clone", "vgrid[].clone", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones", "torch.ones", "torch.ones", "x.size"], "function", ["None"], ["", "def", "warp_optical_flow", "(", "x", ",", "flo", ")", ":", "\n", "    ", "\"\"\"\n    warp an image/tensor (im2) back to im1, according to the optical flow\n    x: [B, C, H, W] (im2)\n    flo: [B, 2, H, W] flow\n    \"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "xx", "=", "torch", ".", "arange", "(", "0", ",", "W", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "H", ",", "1", ")", "\n", "yy", "=", "torch", ".", "arange", "(", "0", ",", "H", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "W", ")", "\n", "xx", "=", "xx", ".", "view", "(", "1", ",", "1", ",", "H", ",", "W", ")", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", "\n", "yy", "=", "yy", ".", "view", "(", "1", ",", "1", ",", "H", ",", "W", ")", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "(", "xx", ",", "yy", ")", ",", "1", ")", "\n", "\n", "x", "=", "x", "\n", "grid", "=", "grid", ".", "to", "(", "x", ".", "device", ")", ".", "to", "(", "x", ".", "dtype", ")", "\n", "vgrid", "=", "Variable", "(", "grid", ")", "+", "flo", "# B,2,H,W", "\n", "vgrid", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "2.0", "*", "vgrid", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "/", "max", "(", "W", "-", "1", ",", "1", ")", "-", "1.0", "\n", "vgrid", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "2.0", "*", "vgrid", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "clone", "(", ")", "/", "max", "(", "H", "-", "1", ",", "1", ")", "-", "1.0", "\n", "\n", "vgrid", "=", "vgrid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "to", "(", "x", ".", "dtype", ")", "\n", "output", "=", "nn", ".", "functional", ".", "grid_sample", "(", "x", ",", "vgrid", ",", "align_corners", "=", "True", ")", "\n", "mask", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "ones", "(", "x", ".", "size", "(", ")", ")", ")", ".", "to", "(", "x", ".", "device", ")", ".", "to", "(", "x", ".", "dtype", ")", "\n", "mask", "=", "nn", ".", "functional", ".", "grid_sample", "(", "mask", ",", "vgrid", ",", "align_corners", "=", "True", ")", "\n", "\n", "mask", "[", "mask", "<", "0.9999", "]", "=", "0", "\n", "mask", "[", "mask", ">", "0", "]", "=", "1", "\n", "\n", "return", "output", "*", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.models.encoder.mask_to_one_hot": [[42, 46], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to.scatter_().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().to.scatter_", "labels.size", "labels.size", "labels.size"], "function", ["None"], ["", "def", "mask_to_one_hot", "(", "labels", ",", "C", ")", ":", "\n", "    ", "one_hot", "=", "torch", ".", "zeros", "(", "labels", ".", "size", "(", "0", ")", ",", "C", ",", "labels", ".", "size", "(", "2", ")", ",", "labels", ".", "size", "(", "3", ")", ")", ".", "to", "(", "labels", ".", "device", ")", "\n", "target", "=", "one_hot", ".", "scatter_", "(", "1", ",", "labels", ",", "1", ")", ".", "to", "(", "labels", ".", "device", ")", "\n", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MaskPropagation.__init__": [[22, 35], ["torch.Module.__init__", "spatial_correlation_sampler.SpatialCorrelationSampler"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "downsample_rate", "=", "4", ",", "search_radius", "=", "6", ",", "max_obj_num", "=", "16", ")", ":", "\n", "        ", "super", "(", "MaskPropagation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "D", "=", "downsample_rate", "\n", "self", ".", "R", "=", "search_radius", "# window size", "\n", "self", ".", "C", "=", "max_obj_num", "\n", "self", ".", "P", "=", "self", ".", "R", "*", "2", "+", "1", "\n", "\n", "self", ".", "correlation_sampler", "=", "SpatialCorrelationSampler", "(", "\n", "kernel_size", "=", "1", ",", "\n", "patch_size", "=", "self", ".", "P", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MaskPropagation.downsample_msk": [[36, 42], ["image.float", "encoder.mask_to_one_hot", "encoder.mask_to_one_hot.long", "image.size"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.encoder.mask_to_one_hot"], ["", "def", "downsample_msk", "(", "self", ",", "image", ")", ":", "\n", "        ", "x", "=", "image", ".", "float", "(", ")", "[", ":", ",", ":", ",", ":", ":", "self", ".", "D", ",", ":", ":", "self", ".", "D", "]", "\n", "if", "not", "self", ".", "training", "and", "image", ".", "size", "(", ")", "[", "1", "]", "==", "1", ":", "\n", "            ", "x", "=", "mask_to_one_hot", "(", "x", ".", "long", "(", ")", ",", "self", ".", "C", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MaskPropagation.forward": [[43, 92], ["feat_query.size", "range", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "msk_mem[].size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feat_query.size", "range", "torch.softmax.unsqueeze", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.softmax", "torch.softmax", "torch.softmax", "msk_mem[].size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "top_ind.expand.expand.expand", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "len", "corrs.append", "corrs[].size", "corrs[].reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "mamp.MaskPropagation.downsample_msk", "torch.unfold", "torch.unfold", "torch.unfold", "msk.reshape", "len", "corrs.append", "corrs[].size", "corrs[].reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "mamp.MaskPropagation.downsample_msk", "torch.unfold", "torch.unfold", "torch.unfold", "msk.reshape", "mamp.MaskPropagation.correlation_sampler", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.softmax", "torch.softmax", "torch.softmax", "encoder.warp_optical_flow", "mamp.MaskPropagation.correlation_sampler", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "encoder.warp_optical_flow", "zip", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MaskPropagation.downsample_msk", "home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MaskPropagation.downsample_msk", "home.repos.pwc.inspect_result.bo-miao_MAMP.models.encoder.warp_optical_flow", "home.repos.pwc.inspect_result.bo-miao_MAMP.models.encoder.warp_optical_flow"], ["", "def", "forward", "(", "self", ",", "feat_mem", ",", "feat_query", ",", "msk_mem", ",", "optical_flows", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "b", ",", "c", ",", "h", ",", "w", "=", "feat_query", ".", "size", "(", ")", "\n", "corrs", "=", "[", "]", "\n", "for", "ind", "in", "range", "(", "len", "(", "feat_mem", ")", ")", ":", "\n", "                ", "corrs", ".", "append", "(", "self", ".", "correlation_sampler", "(", "feat_query", ",", "feat_mem", "[", "ind", "]", ")", ")", "\n", "_", ",", "_", ",", "_", ",", "h1", ",", "w1", "=", "corrs", "[", "-", "1", "]", ".", "size", "(", ")", "\n", "corrs", "[", "ind", "]", "=", "corrs", "[", "ind", "]", ".", "reshape", "(", "[", "b", ",", "self", ".", "P", "*", "self", ".", "P", ",", "h1", "*", "w1", "]", ")", "\n", "\n", "", "corr", "=", "torch", ".", "cat", "(", "corrs", ",", "1", ")", "/", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "c", ")", ".", "float", "(", ")", ")", "\n", "corr", "=", "F", ".", "softmax", "(", "corr", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "msk_mem", "=", "[", "self", ".", "downsample_msk", "(", "msk", ")", "for", "msk", "in", "msk_mem", "]", "\n", "obj_num", "=", "msk_mem", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "msk_mem", "=", "[", "F", ".", "unfold", "(", "msk", ",", "kernel_size", "=", "self", ".", "P", ",", "padding", "=", "self", ".", "R", ")", "for", "msk", "in", "msk_mem", "]", "\n", "msk_mem", "=", "[", "msk", ".", "reshape", "(", "[", "b", ",", "obj_num", ",", "self", ".", "P", "*", "self", ".", "P", ",", "h", "*", "w", "]", ")", "for", "msk", "in", "msk_mem", "]", "\n", "msk_mem", "=", "torch", ".", "cat", "(", "msk_mem", ",", "2", ")", "\n", "\n", "out", "=", "(", "corr", "*", "msk_mem", ")", ".", "sum", "(", "2", ")", ".", "reshape", "(", "[", "b", ",", "obj_num", ",", "h", ",", "w", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "b", ",", "c", ",", "h", ",", "w", "=", "feat_query", ".", "size", "(", ")", "\n", "# motion-aware spatio-temporal matching", "\n", "if", "optical_flows", "is", "not", "None", ":", "\n", "                ", "feat_mem", "=", "[", "warp_optical_flow", "(", "fea", ",", "of", ")", "for", "fea", ",", "of", "in", "zip", "(", "feat_mem", ",", "optical_flows", ")", "]", "\n", "", "corrs", "=", "[", "]", "\n", "for", "ind", "in", "range", "(", "len", "(", "feat_mem", ")", ")", ":", "\n", "                ", "corrs", ".", "append", "(", "self", ".", "correlation_sampler", "(", "feat_query", ",", "feat_mem", "[", "ind", "]", ")", ")", "\n", "_", ",", "_", ",", "_", ",", "h1", ",", "w1", "=", "corrs", "[", "-", "1", "]", ".", "size", "(", ")", "\n", "corrs", "[", "ind", "]", "=", "corrs", "[", "ind", "]", ".", "reshape", "(", "[", "b", ",", "self", ".", "P", "*", "self", ".", "P", ",", "h1", "*", "w1", "]", ")", "\n", "\n", "", "corr", "=", "torch", ".", "cat", "(", "corrs", ",", "1", ")", "/", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "c", ")", ".", "float", "(", ")", ")", "\n", "corr", "=", "corr", ".", "unsqueeze", "(", "1", ")", "\n", "corr", ",", "top_ind", "=", "torch", ".", "topk", "(", "corr", ",", "36", ",", "dim", "=", "2", ")", "\n", "corr", "=", "F", ".", "softmax", "(", "corr", ",", "dim", "=", "2", ")", "\n", "\n", "msk_mem", "=", "[", "self", ".", "downsample_msk", "(", "msk", ")", "for", "msk", "in", "msk_mem", "]", "\n", "if", "optical_flows", "is", "not", "None", ":", "\n", "                ", "msk_mem", "=", "[", "warp_optical_flow", "(", "msk", ",", "of", ")", "for", "msk", ",", "of", "in", "zip", "(", "msk_mem", ",", "optical_flows", ")", "]", "\n", "", "obj_num", "=", "msk_mem", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "msk_mem", "=", "[", "F", ".", "unfold", "(", "msk", ",", "kernel_size", "=", "self", ".", "P", ",", "padding", "=", "self", ".", "R", ")", "for", "msk", "in", "msk_mem", "]", "\n", "msk_mem", "=", "[", "msk", ".", "reshape", "(", "[", "b", ",", "obj_num", ",", "self", ".", "P", "*", "self", ".", "P", ",", "h", "*", "w", "]", ")", "for", "msk", "in", "msk_mem", "]", "\n", "msk_mem", "=", "torch", ".", "cat", "(", "msk_mem", ",", "2", ")", "\n", "top_ind", "=", "top_ind", ".", "expand", "(", "-", "1", ",", "obj_num", ",", "-", "1", ",", "-", "1", ")", "\n", "msk_mem", "=", "torch", ".", "gather", "(", "msk_mem", ",", "dim", "=", "2", ",", "index", "=", "top_ind", ")", "\n", "\n", "out", "=", "(", "corr", "*", "msk_mem", ")", ".", "sum", "(", "2", ")", ".", "reshape", "(", "[", "b", ",", "obj_num", ",", "h", ",", "w", "]", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__": [[95, 107], ["torch.Module.__init__", "encoder.ResNet18", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mamp.MaskPropagation"], "methods", ["home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "MAMP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "max_obj_num", "=", "7", "# >= max object number in each video of DAVIS and YOUTUBE", "\n", "self", ".", "feature_extraction", "=", "ResNet18", "(", ")", "\n", "self", ".", "post_convolution", "=", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "downsample_rate", "=", "4", "# according to ResNet18", "\n", "if", "args", ".", "training", ":", "\n", "            ", "self", ".", "search_radius", "=", "args", ".", "train_corr_radius", "\n", "", "else", ":", "\n", "            ", "self", ".", "search_radius", "=", "args", ".", "test_corr_radius", "\n", "", "self", ".", "propagation", "=", "MaskPropagation", "(", "self", ".", "downsample_rate", ",", "self", ".", "search_radius", ",", "self", ".", "max_obj_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.forward": [[108, 115], ["mamp.MAMP.propagation", "autocast", "mamp.MAMP.post_convolution", "mamp.MAMP.post_convolution", "mamp.MAMP.feature_extraction", "mamp.MAMP.feature_extraction"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img_mem", ",", "msk_mem", ",", "img_query", ",", "optical_flows", "=", "None", ")", ":", "\n", "        ", "with", "autocast", "(", "enabled", "=", "self", ".", "args", ".", "is_amp", ")", ":", "\n", "            ", "feat_mem", "=", "[", "self", ".", "post_convolution", "(", "self", ".", "feature_extraction", "(", "img", ")", ")", "for", "img", "in", "img_mem", "]", "\n", "feat_query", "=", "self", ".", "post_convolution", "(", "self", ".", "feature_extraction", "(", "img_query", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "propagation", "(", "feat_mem", ",", "feat_query", ",", "msk_mem", ",", "optical_flows", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.bo-miao_MAMP.models.mamp.MAMP.dropout2d_lab": [[116, 127], ["numpy.random.choice", "numpy.arange"], "methods", ["None"], ["", "def", "dropout2d_lab", "(", "self", ",", "arr", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "arr", "\n", "\n", "", "drop_ch_ind", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "1", ",", "3", ")", ",", "1", ",", "replace", "=", "False", ")", "\n", "for", "a", "in", "arr", ":", "\n", "            ", "for", "dropout_ch", "in", "drop_ch_ind", ":", "\n", "                ", "a", "[", ":", ",", "dropout_ch", "]", "=", "0", "\n", "", "a", "*=", "3", "/", "2", "\n", "\n", "", "return", "arr", ",", "drop_ch_ind", "\n", "", "", ""]]}