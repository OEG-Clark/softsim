{"home.repos.pwc.inspect_result.microsoft_RelationNet2.ops.corner_pool.CornerPoolPack.__init__": [[6, 56], ["torch.nn.Module.__init__", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.Conv2d", "torch.nn.GroupNorm", "torch.nn.ReLU", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dim", ",", "\n", "pool1", ",", "\n", "pool2", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "first_kernel_size", "=", "3", ",", "\n", "kernel_size", "=", "3", ",", "\n", "corner_dim", "=", "128", ",", "\n", ")", ":", "\n", "        ", "super", "(", "CornerPoolPack", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p1_conv1", "=", "ConvModule", "(", "\n", "dim", ",", "\n", "corner_dim", ",", "\n", "first_kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "first_kernel_size", "-", "1", ")", "//", "2", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", ")", "\n", "self", ".", "p2_conv1", "=", "ConvModule", "(", "\n", "dim", ",", "\n", "corner_dim", ",", "\n", "first_kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "first_kernel_size", "-", "1", ")", "//", "2", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", ")", "\n", "\n", "self", ".", "p_conv1", "=", "nn", ".", "Conv2d", "(", "corner_dim", ",", "dim", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "p_gn1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "dim", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "gn1", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "dim", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "ConvModule", "(", "\n", "dim", ",", "\n", "dim", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", ")", "\n", "\n", "self", ".", "pool1", "=", "pool1", "\n", "self", ".", "pool2", "=", "pool2", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.ops.corner_pool.CornerPoolPack.forward": [[57, 76], ["corner_pool.CornerPoolPack.p1_conv1", "corner_pool.CornerPoolPack.pool1", "corner_pool.CornerPoolPack.p2_conv1", "corner_pool.CornerPoolPack.pool2", "corner_pool.CornerPoolPack.p_conv1", "corner_pool.CornerPoolPack.p_gn1", "corner_pool.CornerPoolPack.conv1", "corner_pool.CornerPoolPack.gn1", "corner_pool.CornerPoolPack.relu1", "corner_pool.CornerPoolPack.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# pool 1", "\n", "        ", "p1_conv1", "=", "self", ".", "p1_conv1", "(", "x", ")", "\n", "pool1", "=", "self", ".", "pool1", "(", "p1_conv1", ")", "\n", "\n", "# pool 2", "\n", "p2_conv1", "=", "self", ".", "p2_conv1", "(", "x", ")", "\n", "pool2", "=", "self", ".", "pool2", "(", "p2_conv1", ")", "\n", "\n", "# pool 1 + pool 2", "\n", "p_conv1", "=", "self", ".", "p_conv1", "(", "pool1", "+", "pool2", ")", "\n", "p_gn1", "=", "self", ".", "p_gn1", "(", "p_conv1", ")", "\n", "\n", "conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "gn1", "=", "self", ".", "gn1", "(", "conv1", ")", "\n", "relu1", "=", "self", ".", "relu1", "(", "p_gn1", "+", "gn1", ")", "\n", "\n", "conv2", "=", "self", ".", "conv2", "(", "relu1", ")", "\n", "return", "conv2", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.ops.corner_pool.TLPool.__init__": [[79, 97], ["corner_pool.CornerPoolPack.__init__", "mmcv.ops.CornerPool", "mmcv.ops.CornerPool"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dim", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "first_kernel_size", "=", "3", ",", "\n", "kernel_size", "=", "3", ",", "\n", "corner_dim", "=", "128", ",", "\n", ")", ":", "\n", "        ", "super", "(", "TLPool", ",", "self", ")", ".", "__init__", "(", "\n", "dim", ",", "\n", "CornerPool", "(", "\"top\"", ")", ",", "\n", "CornerPool", "(", "\"left\"", ")", ",", "\n", "conv_cfg", ",", "\n", "norm_cfg", ",", "\n", "first_kernel_size", ",", "\n", "kernel_size", ",", "\n", "corner_dim", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.ops.corner_pool.BRPool.__init__": [[101, 119], ["corner_pool.CornerPoolPack.__init__", "mmcv.ops.CornerPool", "mmcv.ops.CornerPool"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dim", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "first_kernel_size", "=", "3", ",", "\n", "kernel_size", "=", "3", ",", "\n", "corner_dim", "=", "128", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BRPool", ",", "self", ")", ".", "__init__", "(", "\n", "dim", ",", "\n", "CornerPool", "(", "\"bottom\"", ")", ",", "\n", "CornerPool", "(", "\"right\"", ")", ",", "\n", "conv_cfg", ",", "\n", "norm_cfg", ",", "\n", "first_kernel_size", ",", "\n", "kernel_size", ",", "\n", "corner_dim", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.utils.bvr_utils.anchorfree_forward_features": [[11, 13], ["mmdet.core.multi_apply"], "function", ["None"], ["def", "anchorfree_forward_features", "(", "self", ",", "feats", ")", ":", "\n", "    ", "return", "multi_apply", "(", "self", ".", "forward_feature_single", ",", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.utils.bvr_utils.anchorfree_forward_feature_single": [[15, 26], ["cls_layer", "reg_layer"], "function", ["None"], ["", "def", "anchorfree_forward_feature_single", "(", "self", ",", "x", ")", ":", "\n", "    ", "cls_feat", "=", "x", "\n", "reg_feat", "=", "x", "\n", "\n", "for", "cls_layer", "in", "self", ".", "cls_convs", ":", "\n", "        ", "cls_feat", "=", "cls_layer", "(", "cls_feat", ")", "\n", "\n", "", "for", "reg_layer", "in", "self", ".", "reg_convs", ":", "\n", "        ", "reg_feat", "=", "reg_layer", "(", "reg_feat", ")", "\n", "\n", "", "return", "cls_feat", ",", "reg_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.utils.bvr_utils.atss_forward_prediction_single": [[28, 33], ["bvr_utils..atss_cls", "scale().float", "bvr_utils..atss_centerness", "scale", "bvr_utils..atss_reg"], "function", ["None"], ["", "def", "atss_forward_prediction_single", "(", "self", ",", "cls_feat", ",", "reg_feat", ",", "scale", ")", ":", "\n", "    ", "cls_score", "=", "self", ".", "atss_cls", "(", "cls_feat", ")", "\n", "bbox_pred", "=", "scale", "(", "self", ".", "atss_reg", "(", "reg_feat", ")", ")", ".", "float", "(", ")", "\n", "centerness", "=", "self", ".", "atss_centerness", "(", "reg_feat", ")", "\n", "return", "cls_score", ",", "bbox_pred", ",", "centerness", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.utils.bvr_utils.atss_forward_predictions": [[35, 38], ["mmdet.core.multi_apply"], "function", ["None"], ["", "def", "atss_forward_predictions", "(", "self", ",", "cls_feats", ",", "reg_feats", ")", ":", "\n", "    ", "return", "multi_apply", "(", "\n", "self", ".", "forward_prediction_single", ",", "cls_feats", ",", "reg_feats", ",", "self", ".", "scales", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.utils.bvr_utils.fcos_forward_prediction_single": [[41, 58], ["bvr_utils..conv_cls", "bvr_utils..conv_reg", "scale().float", "bvr_utils..conv_centerness", "bvr_utils..conv_centerness", "torch.nn.functional.relu", "bbox_pred.exp.exp", "scale"], "function", ["None"], ["", "def", "fcos_forward_prediction_single", "(", "self", ",", "cls_feat", ",", "reg_feat", ",", "scale", ",", "stride", ")", ":", "\n", "    ", "cls_score", "=", "self", ".", "conv_cls", "(", "cls_feat", ")", "\n", "bbox_pred", "=", "self", ".", "conv_reg", "(", "reg_feat", ")", "\n", "if", "self", ".", "centerness_on_reg", ":", "\n", "        ", "centerness", "=", "self", ".", "conv_centerness", "(", "reg_feat", ")", "\n", "", "else", ":", "\n", "        ", "centerness", "=", "self", ".", "conv_centerness", "(", "cls_feat", ")", "\n", "# scale the bbox_pred of different level", "\n", "# float to avoid overflow when enabling FP16", "\n", "", "bbox_pred", "=", "scale", "(", "bbox_pred", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "norm_on_bbox", ":", "\n", "        ", "bbox_pred", "=", "F", ".", "relu", "(", "bbox_pred", ")", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "bbox_pred", "*=", "stride", "\n", "", "", "else", ":", "\n", "        ", "bbox_pred", "=", "bbox_pred", ".", "exp", "(", ")", "\n", "", "return", "cls_score", ",", "bbox_pred", ",", "centerness", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.utils.bvr_utils.fcos_forward_predictions": [[60, 63], ["mmdet.core.multi_apply"], "function", ["None"], ["", "def", "fcos_forward_predictions", "(", "self", ",", "cls_feats", ",", "reg_feats", ")", ":", "\n", "    ", "return", "multi_apply", "(", "\n", "self", ".", "forward_prediction_single", ",", "cls_feats", ",", "reg_feats", ",", "self", ".", "scales", ",", "self", ".", "strides", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.utils.bvr_utils.retina_forward_predictions": [[66, 68], ["mmdet.core.multi_apply"], "function", ["None"], ["", "def", "retina_forward_predictions", "(", "self", ",", "cls_feats", ",", "reg_feats", ")", ":", "\n", "    ", "return", "multi_apply", "(", "self", ".", "forward_prediction_single", ",", "cls_feats", ",", "reg_feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.utils.bvr_utils.retina_forward_prediction_single": [[70, 74], ["bvr_utils..retina_cls", "bvr_utils..retina_reg"], "function", ["None"], ["", "def", "retina_forward_prediction_single", "(", "self", ",", "cls_feat", ",", "reg_feat", ")", ":", "\n", "    ", "cls_score", "=", "self", ".", "retina_cls", "(", "cls_feat", ")", "\n", "bbox_pred", "=", "self", ".", "retina_reg", "(", "reg_feat", ")", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.utils.bvr_utils.assign_required_method": [[75, 122], ["isinstance", "hasattr", "hasattr", "isinstance", "isinstance", "types.MethodType", "types.MethodType", "isinstance", "hasattr", "hasattr", "warnings.warn", "types.MethodType", "types.MethodType", "types.MethodType", "types.MethodType", "isinstance", "types.MethodType", "types.MethodType"], "function", ["None"], ["", "def", "assign_required_method", "(", "module", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        module: BoxHead\n    Return:\n        assigned_status Bool: Whether the methods are assigned to module successfully.\n    \"\"\"", "\n", "if", "hasattr", "(", "module", ",", "\"forward_features\"", ")", "and", "hasattr", "(", "module", ",", "\"forward_predictions\"", ")", ":", "\n", "        ", "return", "1", "\n", "\n", "", "if", "isinstance", "(", "module", ",", "AnchorFreeHead", ")", "or", "isinstance", "(", "module", ",", "(", "RetinaHead", ",", "ATSSHead", ")", ")", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "\"cls_convs\"", ")", "and", "hasattr", "(", "module", ",", "\"reg_convs\"", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"You are trying to assign a [forward_features,forward_feature_single] methods to {}. If the head prediction is maintained by other branch. The action may damage your box head.\"", "\n", ")", "\n", "module", ".", "forward_features", "=", "types", ".", "MethodType", "(", "\n", "anchorfree_forward_features", ",", "module", "\n", ")", "\n", "module", ".", "forward_feature_single", "=", "types", ".", "MethodType", "(", "\n", "anchorfree_forward_feature_single", ",", "module", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "-", "1", "\n", "", "", "else", ":", "\n", "        ", "return", "-", "1", "\n", "\n", "", "if", "isinstance", "(", "module", ",", "FCOSHead", ")", ":", "\n", "        ", "module", ".", "forward_predictions", "=", "types", ".", "MethodType", "(", "fcos_forward_predictions", ",", "module", ")", "\n", "module", ".", "forward_prediction_single", "=", "types", ".", "MethodType", "(", "\n", "fcos_forward_prediction_single", ",", "module", "\n", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "ATSSHead", ")", ":", "\n", "        ", "module", ".", "forward_predictions", "=", "types", ".", "MethodType", "(", "atss_forward_predictions", ",", "module", ")", "\n", "module", ".", "forward_prediction_single", "=", "types", ".", "MethodType", "(", "\n", "atss_forward_prediction_single", ",", "module", "\n", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "RetinaHead", ")", ":", "\n", "        ", "module", ".", "forward_predictions", "=", "types", ".", "MethodType", "(", "\n", "retina_forward_predictions", ",", "module", "\n", ")", "\n", "module", ".", "forward_prediction_single", "=", "types", ".", "MethodType", "(", "\n", "retina_forward_prediction_single", ",", "module", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "-", "1", "\n", "\n", "", "return", "1", "\n", "", ""]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.multihead_attention.MultiheadAttention.__init__": [[39, 87], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "mmcv.cnn.Linear", "multihead_attention.MultiheadAttention._reset_parameters", "torch.empty", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "multihead_attention.MultiheadAttention.register_parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.__init__", "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.multihead_attention.MultiheadAttention._reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "embed_dim", ",", "\n", "num_heads", ",", "\n", "dropout", "=", "0.0", ",", "\n", "bias", "=", "True", ",", "\n", "add_bias_kv", "=", "False", ",", "\n", "add_zero_attn", "=", "False", ",", "\n", "kdim", "=", "None", ",", "\n", "vdim", "=", "None", ",", "\n", "app_relation", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MultiheadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "kdim", "=", "kdim", "if", "kdim", "is", "not", "None", "else", "embed_dim", "\n", "self", ".", "vdim", "=", "vdim", "if", "vdim", "is", "not", "None", "else", "embed_dim", "\n", "self", ".", "_qkv_same_embed_dim", "=", "self", ".", "kdim", "==", "embed_dim", "and", "self", ".", "vdim", "==", "embed_dim", "\n", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "assert", "(", "\n", "self", ".", "head_dim", "*", "num_heads", "==", "self", ".", "embed_dim", "\n", ")", ",", "\"embed_dim must be divisible by num_heads\"", "\n", "\n", "self", ".", "in_proj_weight", "=", "Parameter", "(", "torch", ".", "empty", "(", "3", "*", "embed_dim", ",", "embed_dim", ")", ")", "\n", "\n", "if", "self", ".", "_qkv_same_embed_dim", "is", "False", ":", "\n", "            ", "self", ".", "q_proj_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "embed_dim", ",", "embed_dim", ")", ")", "\n", "self", ".", "k_proj_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "embed_dim", ",", "self", ".", "kdim", ")", ")", "\n", "self", ".", "v_proj_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "embed_dim", ",", "self", ".", "vdim", ")", ")", "\n", "\n", "", "if", "bias", ":", "\n", "            ", "self", ".", "in_proj_bias", "=", "Parameter", "(", "torch", ".", "empty", "(", "3", "*", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "\"in_proj_bias\"", ",", "None", ")", "\n", "", "self", ".", "out_proj", "=", "Linear", "(", "embed_dim", ",", "embed_dim", ",", "bias", "=", "bias", ")", "\n", "\n", "if", "add_bias_kv", ":", "\n", "            ", "self", ".", "bias_k", "=", "Parameter", "(", "torch", ".", "empty", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "bias_v", "=", "Parameter", "(", "torch", ".", "empty", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias_k", "=", "self", ".", "bias_v", "=", "None", "\n", "\n", "", "self", ".", "add_zero_attn", "=", "add_zero_attn", "\n", "self", ".", "app_relation", "=", "app_relation", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.multihead_attention.MultiheadAttention._reset_parameters": [[88, 103], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_qkv_same_embed_dim", ":", "\n", "            ", "xavier_uniform_", "(", "self", ".", "in_proj_weight", ")", "\n", "", "else", ":", "\n", "            ", "xavier_uniform_", "(", "self", ".", "q_proj_weight", ")", "\n", "xavier_uniform_", "(", "self", ".", "k_proj_weight", ")", "\n", "xavier_uniform_", "(", "self", ".", "v_proj_weight", ")", "\n", "\n", "", "if", "self", ".", "in_proj_bias", "is", "not", "None", ":", "\n", "            ", "constant_", "(", "self", ".", "in_proj_bias", ",", "0.0", ")", "\n", "constant_", "(", "self", ".", "out_proj", ".", "bias", ",", "0.0", ")", "\n", "", "if", "self", ".", "bias_k", "is", "not", "None", ":", "\n", "            ", "xavier_normal_", "(", "self", ".", "bias_k", ")", "\n", "", "if", "self", ".", "bias_v", "is", "not", "None", ":", "\n", "            ", "xavier_normal_", "(", "self", ".", "bias_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.multihead_attention.MultiheadAttention.forward": [[104, 193], ["hasattr", "multihead_attention.multi_head_attention_forward", "multihead_attention.multi_head_attention_forward", "hasattr", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.multihead_attention.multi_head_attention_forward", "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.multihead_attention.multi_head_attention_forward"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "query", ",", "\n", "key", ",", "\n", "value", ",", "\n", "key_padding_mask", "=", "None", ",", "\n", "need_weights", "=", "True", ",", "\n", "attn_mask", "=", "None", ",", "\n", "relative_atten_weights", "=", "None", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"\n        Args:\n            query, key, value: map a query and a set of key-value pairs to an output.\n                See \"Attention Is All You Need\" for more details.\n            key_padding_mask: if provided, specified padding elements in the key will\n                be ignored by the attention. This is an binary mask. When the value is True,\n                the corresponding value on the attention layer will be filled with -inf.\n            need_weights: output attn_output_weights.\n            attn_mask: mask that prevents attention to certain positions. This is an additive mask\n                (i.e. the values will be added to the attention layer).\n            relative_attn_weight:\n        Shape:\n            - Inputs:\n            - query: :math:`(L, N, E)` where L is the target sequence length, N is the batch size, E is\n              the embedding dimension.\n            - key: :math:`(S, N, E)`, where S is the source sequence length, N is the batch size, E is\n              the embedding dimension.\n            - value: :math:`(S, N, E)` where S is the source sequence length, N is the batch size, E is\n              the embedding dimension.\n            - key_padding_mask: :math:`(N, S)`, ByteTensor, where N is the batch size, S is the source sequence length.\n            - attn_mask: :math:`(L, S)` where L is the target sequence length, S is the source sequence length.\n            - Outputs:\n            - attn_output: :math:`(L, N, E)` where L is the target sequence length, N is the batch size,\n              E is the embedding dimension.\n            - attn_output_weights: :math:`(N, L, S)` where N is the batch size,\n              L is the target sequence length, S is the source sequence length.\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"_qkv_same_embed_dim\"", ")", "and", "self", ".", "_qkv_same_embed_dim", "is", "False", ":", "\n", "            ", "return", "multi_head_attention_forward", "(", "\n", "query", ",", "\n", "key", ",", "\n", "value", ",", "\n", "self", ".", "embed_dim", ",", "\n", "self", ".", "num_heads", ",", "\n", "self", ".", "in_proj_weight", ",", "\n", "self", ".", "in_proj_bias", ",", "\n", "self", ".", "bias_k", ",", "\n", "self", ".", "bias_v", ",", "\n", "self", ".", "add_zero_attn", ",", "\n", "self", ".", "dropout", ",", "\n", "self", ".", "out_proj", ".", "weight", ",", "\n", "self", ".", "out_proj", ".", "bias", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "key_padding_mask", "=", "key_padding_mask", ",", "\n", "need_weights", "=", "need_weights", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "use_separate_proj_weight", "=", "True", ",", "\n", "q_proj_weight", "=", "self", ".", "q_proj_weight", ",", "\n", "k_proj_weight", "=", "self", ".", "k_proj_weight", ",", "\n", "v_proj_weight", "=", "self", ".", "v_proj_weight", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "\"_qkv_same_embed_dim\"", ")", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "\"A new version of MultiheadAttention module has been implemented. \\\n                    Please re-train your model with the new module\"", ",", "\n", "UserWarning", ",", "\n", ")", "\n", "\n", "", "return", "multi_head_attention_forward", "(", "\n", "query", ",", "\n", "key", ",", "\n", "value", ",", "\n", "self", ".", "embed_dim", ",", "\n", "self", ".", "num_heads", ",", "\n", "self", ".", "in_proj_weight", ",", "\n", "self", ".", "in_proj_bias", ",", "\n", "self", ".", "bias_k", ",", "\n", "self", ".", "bias_v", ",", "\n", "self", ".", "add_zero_attn", ",", "\n", "self", ".", "dropout", ",", "\n", "self", ".", "out_proj", ".", "weight", ",", "\n", "self", ".", "out_proj", ".", "bias", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "key_padding_mask", "=", "key_padding_mask", ",", "\n", "need_weights", "=", "need_weights", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "relative_atten_weights", "=", "relative_atten_weights", ",", "\n", "app_relation", "=", "self", ".", "app_relation", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.multihead_attention.multi_head_attention_forward": [[196, 517], ["torch.equal", "query.size", "F.linear.contiguous().view().transpose", "F.linear.size", "torch.nn.functional.softmax", "torch.nn.functional.dropout", "torch.bmm", "F.linear.transpose().contiguous().view", "torch.nn.functional.linear", "torch.equal", "torch.equal", "list", "key.size", "value.size", "float", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional.size", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional.size", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional.size", "F.linear.contiguous().view().transpose", "F.linear.contiguous().view().transpose", "torch.cat", "torch.cat", "torch.bmm", "attn_output_weights.view.reshape", "torch.cat.unsqueeze", "attn_output_weights.view.view", "attn_output_weights.view.masked_fill", "attn_output_weights.view.view", "list", "attn_output_weights.view.view", "query.size", "torch.nn.functional.linear().chunk", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.cat", "torch.cat", "F.linear.contiguous().view", "static_k.size", "static_k.size", "static_v.size", "static_v.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "F.linear.transpose", "list", "attn_output_weights.view.view", "torch.cat.unsqueeze().unsqueeze", "float", "F.linear.size", "F.linear.transpose().contiguous", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "query.size", "key.size", "value.size", "torch.cat", "torch.cat", "F.linear.contiguous().view", "F.linear.contiguous().view", "torch.zeros", "torch.zeros", "attn_output_weights.view.size", "attn_output_weights.view.sum", "torch.nn.functional.linear", "torch.nn.functional.linear().chunk", "bias_k.repeat", "bias_v.repeat", "F.linear.contiguous", "torch.zeros", "torch.zeros", "torch.cat.unsqueeze", "F.linear.transpose", "torch.zeros", "torch.zeros", "F.linear.contiguous", "F.linear.contiguous", "torch.nn.functional.linear", "F.linear.size", "F.linear.size", "F.linear.size", "F.linear.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "function", ["None"], ["", "", "", "def", "multi_head_attention_forward", "(", "\n", "query", ",", "# type: Tensor", "\n", "key", ",", "# type: Tensor", "\n", "value", ",", "# type: Tensor", "\n", "embed_dim_to_check", ",", "# type: int", "\n", "num_heads", ",", "# type: int", "\n", "in_proj_weight", ",", "# type: Tensor", "\n", "in_proj_bias", ",", "# type: Tensor", "\n", "bias_k", ",", "# type: Optional[Tensor]", "\n", "bias_v", ",", "# type: Optional[Tensor]", "\n", "add_zero_attn", ",", "# type: bool", "\n", "dropout_p", ",", "# type: float", "\n", "out_proj_weight", ",", "# type: Tensor", "\n", "out_proj_bias", ",", "# type: Tensor", "\n", "training", "=", "True", ",", "# type: bool", "\n", "key_padding_mask", "=", "None", ",", "# type: Optional[Tensor]", "\n", "need_weights", "=", "True", ",", "# type: bool", "\n", "attn_mask", "=", "None", ",", "# type: Optional[Tensor]", "\n", "use_separate_proj_weight", "=", "False", ",", "# type: bool", "\n", "q_proj_weight", "=", "None", ",", "# type: Optional[Tensor]", "\n", "k_proj_weight", "=", "None", ",", "# type: Optional[Tensor]", "\n", "v_proj_weight", "=", "None", ",", "# type: Optional[Tensor]", "\n", "static_k", "=", "None", ",", "# type: Optional[Tensor]", "\n", "static_v", "=", "None", ",", "# type: Optional[Tensor]", "\n", "relative_atten_weights", "=", "None", ",", "# type: Tensor", "\n", "app_relation", "=", "True", ",", "\n", ")", ":", "\n", "# type: (...) -> Tuple[Tensor, Optional[Tensor]]", "\n", "    ", "r\"\"\"\n    Args:\n        query, key, value: map a query and a set of key-value pairs to an output.\n            See \"Attention Is All You Need\" for more details.\n        embed_dim_to_check: total dimension of the model.\n        num_heads: parallel attention heads.\n        in_proj_weight, in_proj_bias: input projection weight and bias.\n        bias_k, bias_v: bias of the key and value sequences to be added at dim=0.\n        add_zero_attn: add a new batch of zeros to the key and\n                       value sequences at dim=1.\n        dropout_p: probability of an element to be zeroed.\n        out_proj_weight, out_proj_bias: the output projection weight and bias.\n        training: apply dropout if is ``True``.\n        key_padding_mask: if provided, specified padding elements in the key will\n            be ignored by the attention. This is an binary mask. When the value is True,\n            the corresponding value on the attention layer will be filled with -inf.\n        need_weights: output attn_output_weights.\n        attn_mask: mask that prevents attention to certain positions. This is an additive mask\n            (i.e. the values will be added to the attention layer).\n        use_separate_proj_weight: the function accept the proj. weights for query, key,\n            and value in differnt forms. If false, in_proj_weight will be used, which is\n            a combination of q_proj_weight, k_proj_weight, v_proj_weight.\n        q_proj_weight, k_proj_weight, v_proj_weight, in_proj_bias: input projection weight and bias.\n        static_k, static_v: static key and value used for attention operators.\n        relative_atten_weights: used to deal with relative relationship, add in the atten weights before softmax\n    Shape:\n        Inputs:\n        - query: :math:`(L, N, E)` where L is the target sequence length, N is the batch size, E is\n          the embedding dimension.\n        - key: :math:`(S, N, E)`, where S is the source sequence length, N is the batch size, E is\n          the embedding dimension.\n        - value: :math:`(S, N, E)` where S is the source sequence length, N is the batch size, E is\n          the embedding dimension.\n        - key_padding_mask: :math:`(N, S)`, ByteTensor, where N is the batch size, S is the source sequence length.\n        - attn_mask: :math:`(L, S)` where L is the target sequence length, S is the source sequence length.\n        - static_k: :math:`(N*num_heads, S, E/num_heads)`, where S is the source sequence length,\n          N is the batch size, E is the embedding dimension. E/num_heads is the head dimension.\n        - static_v: :math:`(N*num_heads, S, E/num_heads)`, where S is the source sequence length,\n          N is the batch size, E is the embedding dimension. E/num_heads is the head dimension.\n        - relative_atten_weights: math:`(N, num_heads, L, S)`, where N is the batch size,\n          L is the target sequence length, S is the source sequence length.\n        Outputs:\n        - attn_output: :math:`(L, N, E)` where L is the target sequence length, N is the batch size,\n          E is the embedding dimension.\n        - attn_output_weights: :math:`(N, L, S)` where N is the batch size,\n          L is the target sequence length, S is the source sequence length.\n    \"\"\"", "\n", "\n", "qkv_same", "=", "torch", ".", "equal", "(", "query", ",", "key", ")", "and", "torch", ".", "equal", "(", "key", ",", "value", ")", "\n", "kv_same", "=", "torch", ".", "equal", "(", "key", ",", "value", ")", "\n", "\n", "tgt_len", ",", "bsz", ",", "embed_dim", "=", "query", ".", "size", "(", ")", "\n", "assert", "embed_dim", "==", "embed_dim_to_check", "\n", "assert", "list", "(", "query", ".", "size", "(", ")", ")", "==", "[", "tgt_len", ",", "bsz", ",", "embed_dim", "]", "\n", "assert", "key", ".", "size", "(", ")", "==", "value", ".", "size", "(", ")", "\n", "\n", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "assert", "head_dim", "*", "num_heads", "==", "embed_dim", ",", "\"embed_dim must be divisible by num_heads\"", "\n", "scaling", "=", "float", "(", "head_dim", ")", "**", "-", "0.5", "\n", "\n", "if", "use_separate_proj_weight", "is", "not", "True", ":", "\n", "        ", "if", "qkv_same", ":", "\n", "# self-attention", "\n", "            ", "q", ",", "k", ",", "v", "=", "F", ".", "linear", "(", "query", ",", "in_proj_weight", ",", "in_proj_bias", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "elif", "kv_same", ":", "\n", "# encoder-decoder attention", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "            ", "_b", "=", "in_proj_bias", "\n", "_start", "=", "0", "\n", "_end", "=", "embed_dim", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "q", "=", "F", ".", "linear", "(", "query", ",", "_w", ",", "_b", ")", "\n", "\n", "if", "key", "is", "None", ":", "\n", "                ", "assert", "value", "is", "None", "\n", "k", "=", "None", "\n", "v", "=", "None", "\n", "", "else", ":", "\n", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "                ", "_b", "=", "in_proj_bias", "\n", "_start", "=", "embed_dim", "\n", "_end", "=", "None", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                    ", "_b", "=", "_b", "[", "_start", ":", "]", "\n", "", "k", ",", "v", "=", "F", ".", "linear", "(", "key", ",", "_w", ",", "_b", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "            ", "_b", "=", "in_proj_bias", "\n", "_start", "=", "0", "\n", "_end", "=", "embed_dim", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "q", "=", "F", ".", "linear", "(", "query", ",", "_w", ",", "_b", ")", "\n", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "_b", "=", "in_proj_bias", "\n", "_start", "=", "embed_dim", "\n", "_end", "=", "embed_dim", "*", "2", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "k", "=", "F", ".", "linear", "(", "key", ",", "_w", ",", "_b", ")", "\n", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "_b", "=", "in_proj_bias", "\n", "_start", "=", "embed_dim", "*", "2", "\n", "_end", "=", "None", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "]", "\n", "", "v", "=", "F", ".", "linear", "(", "value", ",", "_w", ",", "_b", ")", "\n", "", "", "else", ":", "\n", "        ", "q_proj_weight_non_opt", "=", "torch", ".", "jit", ".", "_unwrap_optional", "(", "q_proj_weight", ")", "\n", "len1", ",", "len2", "=", "q_proj_weight_non_opt", ".", "size", "(", ")", "\n", "assert", "len1", "==", "embed_dim", "and", "len2", "==", "query", ".", "size", "(", "-", "1", ")", "\n", "\n", "k_proj_weight_non_opt", "=", "torch", ".", "jit", ".", "_unwrap_optional", "(", "k_proj_weight", ")", "\n", "len1", ",", "len2", "=", "k_proj_weight_non_opt", ".", "size", "(", ")", "\n", "assert", "len1", "==", "embed_dim", "and", "len2", "==", "key", ".", "size", "(", "-", "1", ")", "\n", "\n", "v_proj_weight_non_opt", "=", "torch", ".", "jit", ".", "_unwrap_optional", "(", "v_proj_weight", ")", "\n", "len1", ",", "len2", "=", "v_proj_weight_non_opt", ".", "size", "(", ")", "\n", "assert", "len1", "==", "embed_dim", "and", "len2", "==", "value", ".", "size", "(", "-", "1", ")", "\n", "\n", "if", "in_proj_bias", "is", "not", "None", ":", "\n", "            ", "q", "=", "F", ".", "linear", "(", "query", ",", "q_proj_weight_non_opt", ",", "in_proj_bias", "[", "0", ":", "embed_dim", "]", ")", "\n", "k", "=", "F", ".", "linear", "(", "\n", "key", ",", "k_proj_weight_non_opt", ",", "in_proj_bias", "[", "embed_dim", ":", "(", "embed_dim", "*", "2", ")", "]", "\n", ")", "\n", "v", "=", "F", ".", "linear", "(", "value", ",", "v_proj_weight_non_opt", ",", "in_proj_bias", "[", "(", "embed_dim", "*", "2", ")", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "q", "=", "F", ".", "linear", "(", "query", ",", "q_proj_weight_non_opt", ",", "in_proj_bias", ")", "\n", "k", "=", "F", ".", "linear", "(", "key", ",", "k_proj_weight_non_opt", ",", "in_proj_bias", ")", "\n", "v", "=", "F", ".", "linear", "(", "value", ",", "v_proj_weight_non_opt", ",", "in_proj_bias", ")", "\n", "", "", "q", "=", "q", "*", "scaling", "\n", "\n", "if", "bias_k", "is", "not", "None", "and", "bias_v", "is", "not", "None", ":", "\n", "        ", "if", "static_k", "is", "None", "and", "static_v", "is", "None", ":", "\n", "            ", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "bias_k", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "bias_v", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "attn_mask", ",", "\n", "torch", ".", "zeros", "(", "\n", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "1", ")", ",", "\n", "dtype", "=", "attn_mask", ".", "dtype", ",", "\n", "device", "=", "attn_mask", ".", "device", ",", "\n", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                ", "key_padding_mask", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "key_padding_mask", ",", "\n", "torch", ".", "zeros", "(", "\n", "(", "key_padding_mask", ".", "size", "(", "0", ")", ",", "1", ")", ",", "\n", "dtype", "=", "key_padding_mask", ".", "dtype", ",", "\n", "device", "=", "key_padding_mask", ".", "device", ",", "\n", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "static_k", "is", "None", ",", "\"bias cannot be added to static key.\"", "\n", "assert", "static_v", "is", "None", ",", "\"bias cannot be added to static value.\"", "\n", "", "", "else", ":", "\n", "        ", "assert", "bias_k", "is", "None", "\n", "assert", "bias_v", "is", "None", "\n", "\n", "", "q", "=", "q", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", "*", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "k", "is", "not", "None", ":", "\n", "        ", "k", "=", "k", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "if", "v", "is", "not", "None", ":", "\n", "        ", "v", "=", "v", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "", "if", "static_k", "is", "not", "None", ":", "\n", "        ", "assert", "static_k", ".", "size", "(", "0", ")", "==", "bsz", "*", "num_heads", "\n", "assert", "static_k", ".", "size", "(", "2", ")", "==", "head_dim", "\n", "k", "=", "static_k", "\n", "\n", "", "if", "static_v", "is", "not", "None", ":", "\n", "        ", "assert", "static_v", ".", "size", "(", "0", ")", "==", "bsz", "*", "num_heads", "\n", "assert", "static_v", ".", "size", "(", "2", ")", "==", "head_dim", "\n", "v", "=", "static_v", "\n", "\n", "", "src_len", "=", "k", ".", "size", "(", "1", ")", "\n", "\n", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "        ", "assert", "key_padding_mask", ".", "size", "(", "0", ")", "==", "bsz", "\n", "assert", "key_padding_mask", ".", "size", "(", "1", ")", "==", "src_len", "\n", "\n", "", "if", "add_zero_attn", ":", "\n", "        ", "src_len", "+=", "1", "\n", "k", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "k", ",", "\n", "torch", ".", "zeros", "(", "\n", "(", "k", ".", "size", "(", "0", ")", ",", "1", ")", "+", "k", ".", "size", "(", ")", "[", "2", ":", "]", ",", "dtype", "=", "k", ".", "dtype", ",", "device", "=", "k", ".", "device", "\n", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "v", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "v", ",", "\n", "torch", ".", "zeros", "(", "\n", "(", "v", ".", "size", "(", "0", ")", ",", "1", ")", "+", "v", ".", "size", "(", ")", "[", "2", ":", "]", ",", "dtype", "=", "v", ".", "dtype", ",", "device", "=", "v", ".", "device", "\n", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "attn_mask", ",", "\n", "torch", ".", "zeros", "(", "\n", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "1", ")", ",", "\n", "dtype", "=", "attn_mask", ".", "dtype", ",", "\n", "device", "=", "attn_mask", ".", "device", ",", "\n", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "key_padding_mask", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "key_padding_mask", ",", "\n", "torch", ".", "zeros", "(", "\n", "(", "key_padding_mask", ".", "size", "(", "0", ")", ",", "1", ")", ",", "\n", "dtype", "=", "key_padding_mask", ".", "dtype", ",", "\n", "device", "=", "key_padding_mask", ".", "device", ",", "\n", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "", "", "if", "app_relation", ":", "\n", "        ", "attn_output_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "assert", "list", "(", "attn_output_weights", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "num_heads", ",", "tgt_len", ",", "src_len", "]", "\n", "", "else", ":", "\n", "        ", "attn_output_weights", "=", "None", "\n", "", "if", "relative_atten_weights", "is", "not", "None", ":", "\n", "        ", "if", "app_relation", ":", "\n", "            ", "attn_output_weights", "=", "attn_output_weights", ".", "view", "(", "\n", "bsz", ",", "num_heads", ",", "tgt_len", ",", "src_len", "\n", ")", "\n", "", "else", ":", "\n", "            ", "attn_output_weights", "=", "0", "\n", "", "attn_output_weights", "+=", "relative_atten_weights", "\n", "attn_output_weights", "=", "attn_output_weights", ".", "reshape", "(", "\n", "bsz", "*", "num_heads", ",", "tgt_len", ",", "src_len", "\n", ")", "\n", "\n", "", "assert", "(", "\n", "attn_output_weights", "is", "not", "None", "\n", ")", ",", "\"Please either specify relative postion relation or appearance relation.\"", "\n", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "        ", "attn_mask", "=", "attn_mask", ".", "unsqueeze", "(", "0", ")", "\n", "attn_output_weights", "+=", "attn_mask", "\n", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "        ", "attn_output_weights", "=", "attn_output_weights", ".", "view", "(", "bsz", ",", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "attn_output_weights", "=", "attn_output_weights", ".", "masked_fill", "(", "\n", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ",", "\n", "float", "(", "\"-inf\"", ")", ",", "\n", ")", "\n", "attn_output_weights", "=", "attn_output_weights", ".", "view", "(", "\n", "bsz", "*", "num_heads", ",", "tgt_len", ",", "src_len", "\n", ")", "\n", "\n", "", "attn_output_weights", "=", "F", ".", "softmax", "(", "attn_output_weights", ",", "dim", "=", "-", "1", ")", "\n", "attn_output_weights", "=", "F", ".", "dropout", "(", "attn_output_weights", ",", "p", "=", "dropout_p", ",", "training", "=", "training", ")", "\n", "\n", "attn_output", "=", "torch", ".", "bmm", "(", "attn_output_weights", ",", "v", ")", "\n", "assert", "list", "(", "attn_output", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "num_heads", ",", "tgt_len", ",", "head_dim", "]", "\n", "attn_output", "=", "attn_output", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "embed_dim", ")", "\n", "attn_output", "=", "F", ".", "linear", "(", "attn_output", ",", "out_proj_weight", ",", "out_proj_bias", ")", "\n", "\n", "if", "need_weights", ":", "\n", "# average attention weights over heads", "\n", "        ", "attn_output_weights", "=", "attn_output_weights", ".", "view", "(", "bsz", ",", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "return", "attn_output", ",", "attn_output_weights", ".", "sum", "(", "dim", "=", "1", ")", "/", "num_heads", "\n", "", "else", ":", "\n", "        ", "return", "attn_output", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.BasePositionalEncoding.__init__": [[13, 45], ["torch.nn.Module.__init__", "warnings.warn", "positional_encoding.BasePositionalEncoding.register_buffer", "positional_encoding.BasePositionalEncoding.init_embedding_map"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.__init__", "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.BasePositionalEncoding.init_embedding_map"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_channels", ":", "int", ",", "\n", "embedding_dim", ":", "int", "=", "256", ",", "\n", "base_size", ":", "Tuple", "[", "int", ",", "int", "]", "=", "None", ",", "\n", "log_scale", ":", "bool", "=", "False", ",", "\n", "align_corners", ":", "bool", "=", "False", ",", "\n", "normalized_interpolation", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Basic definition of positional encoding.\n\n        Args:\n            input_channels (int): the dimension of input.\n            embedding_dim (int, optional): the dimension of embedding. Defaults to 256.\n            base_size (Tuple[int, int], optional): If it is not None, the positional encoding is performed on a small map and interpolate to input size. Defaults to None.\n        \"\"\"", "\n", "if", "input_channels", "!=", "2", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"The position cords is not [x,y]. If you are using approximated encoding, the other dimension will be initialized with zero.\"", "\n", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "approximate_mode", "=", "base_size", "is", "not", "None", "\n", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "log_scale", "=", "log_scale", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "self", ".", "normalized_interpolation", "=", "normalized_interpolation", "\n", "if", "self", ".", "base_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\n", "\"base_embedding\"", ",", "self", ".", "init_embedding_map", "(", "*", "self", ".", "base_size", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.BasePositionalEncoding.init_embedding_map": [[47, 70], ["torch.stack", "positional_encoding.BasePositionalEncoding.preprocess_embedding", "torch.cat", "torch.arange().repeat", "torch.arange().unsqueeze().repeat", "torch.cat.new_zeros", "torch.arange", "torch.arange().unsqueeze", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.PositionalEncodingSine.preprocess_embedding"], ["", "", "def", "init_embedding_map", "(", "self", ",", "w", ":", "int", ",", "h", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "half_w", "=", "w", "//", "2", "\n", "half_h", "=", "h", "//", "2", "\n", "base_position_mat", "=", "torch", ".", "stack", "(", "\n", "(", "\n", "torch", ".", "arange", "(", "-", "half_w", ",", "half_w", "+", "1", ")", ".", "repeat", "(", "2", "*", "half_h", "+", "1", ",", "1", ")", ",", "\n", "torch", ".", "arange", "(", "-", "half_h", ",", "half_h", "+", "1", ")", "\n", ".", "unsqueeze", "(", "1", ")", "\n", ".", "repeat", "(", "1", ",", "half_w", "*", "2", "+", "1", ")", ",", "\n", ")", ",", "\n", "dim", "=", "2", ",", "\n", ")", "# h,w,2", "\n", "if", "self", ".", "input_channels", ">", "2", ":", "\n", "            ", "left_embedding_dim", "=", "self", ".", "input_channels", "-", "2", "\n", "base_position_mat", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "base_position_mat", ",", "\n", "base_position_mat", ".", "new_zeros", "(", "h", ",", "w", ",", "left_embedding_dim", ")", ",", "\n", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "\n", "", "return", "self", ".", "preprocess_embedding", "(", "base_position_mat", "[", "None", ",", "...", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.BasePositionalEncoding.pre_compute": [[71, 77], ["positional_encoding.BasePositionalEncoding.postprocess_embedding().permute", "positional_encoding.BasePositionalEncoding.postprocess_embedding"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.PositionalEncodingLearned.postprocess_embedding"], ["", "def", "pre_compute", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "approximate_mode", ":", "\n", "            ", "return", "self", ".", "postprocess_embedding", "(", "self", ".", "base_embedding", ")", ".", "permute", "(", "\n", "0", ",", "3", ",", "1", ",", "2", "\n", ")", "# 1,C,H,W", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.BasePositionalEncoding.forward": [[78, 114], ["torch.nn.functional.grid_sample", "torch.log.permute", "positional_encoding.BasePositionalEncoding.preprocess_embedding", "positional_encoding.BasePositionalEncoding.postprocess_embedding", "torch.log", "positional_encoding.BasePositionalEncoding.postprocess_embedding().permute", "positional_encoding.BasePositionalEncoding.expand", "torch.log.clamp", "positions.size", "positional_encoding.BasePositionalEncoding.postprocess_embedding", "positions.new_tensor().reshape", "positional_encoding.BasePositionalEncoding.size", "positions.new_tensor"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.PositionalEncodingSine.preprocess_embedding", "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.PositionalEncodingLearned.postprocess_embedding", "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.PositionalEncodingLearned.postprocess_embedding"], ["", "def", "forward", "(", "\n", "self", ",", "positions", ":", "torch", ".", "Tensor", ",", "base_embedding", ":", "torch", ".", "Tensor", "=", "None", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Get the positional embedding for specific positions.\n\n        Args:\n            positions (torch.Tensor): [N,H,W,2] or [N,*,input_channels]. For approximated model, the positions must 2-dim cords in shape [N,H,W,2].\n        Returns:\n            torch.Tensor: [N,*,C]\n        \"\"\"", "\n", "if", "self", ".", "approximate_mode", ":", "\n", "# interpolate", "\n", "            ", "if", "base_embedding", "is", "None", ":", "\n", "                ", "base_embedding", "=", "self", ".", "postprocess_embedding", "(", "\n", "self", ".", "base_embedding", "\n", ")", ".", "permute", "(", "\n", "0", ",", "3", ",", "1", ",", "2", "\n", ")", "# 1,C,H,W", "\n", "", "if", "self", ".", "normalized_interpolation", ":", "\n", "                ", "positions", "=", "positions", "/", "(", "\n", "0.5", "*", "positions", ".", "new_tensor", "(", "self", ".", "base_size", ")", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "2", ")", "\n", ")", "\n", "", "embedding", "=", "F", ".", "grid_sample", "(", "\n", "base_embedding", ".", "expand", "(", "positions", ".", "size", "(", "0", ")", ",", "*", "base_embedding", ".", "size", "(", ")", "[", "1", ":", "]", ")", ",", "\n", "positions", ",", "\n", "padding_mode", "=", "\"border\"", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ",", "\n", ")", "\n", "embedding", "=", "embedding", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "=", "self", ".", "preprocess_embedding", "(", "positions", ")", "\n", "embedding", "=", "self", ".", "postprocess_embedding", "(", "embedding", ")", "\n", "# clamp embedding", "\n", "", "if", "self", ".", "log_scale", ":", "\n", "            ", "embedding", "=", "torch", ".", "log", "(", "embedding", ".", "clamp", "(", "min", "=", "1e-6", ")", ")", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.BasePositionalEncoding.preprocess_embedding": [[115, 125], ["None"], "methods", ["None"], ["", "def", "preprocess_embedding", "(", "self", ",", "position_mat", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Preprocess the input positions such as doing sine, cosine transformation.\n\n        Args:\n            position_mat (torch.Tensor): [N,*,input_channels]\n\n        Returns:\n            torch.Tensor: [N,*,embedding_dim]\n        \"\"\"", "\n", "return", "position_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.BasePositionalEncoding.postprocess_embedding": [[126, 136], ["None"], "methods", ["None"], ["", "def", "postprocess_embedding", "(", "self", ",", "embedding", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Perform learnable operations on the embedding\n\n        Args:\n            embedding (torch.Tensor): [N,*,C]\n\n        Returns:\n            torch.Tensor: [N,*,C]\n        \"\"\"", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.PositionalEncodingSine.__init__": [[140, 159], ["positional_encoding.BasePositionalEncoding.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_channels", ":", "int", ",", "\n", "temperature", ":", "float", "=", "1000", ",", "\n", "scale", ":", "float", "=", "1.0", ",", "\n", "normalize", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Generate sine positional embedding. See `BasePositionalEncoding` for details.\n        Args:\n            input_channels (int): the dimension of input.\n            temperature (float, optional): Defaults to 1000.\n            scale (float, optional): Defaults to 1.0.\n            normalize (bool, optional): Defaults to False.\n        \"\"\"", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "normalize", "=", "normalize", "\n", "super", "(", "PositionalEncodingSine", ",", "self", ")", ".", "__init__", "(", "input_channels", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.PositionalEncodingSine.preprocess_embedding": [[160, 193], ["torch.arange", "torch.pow", "torch.div", "torch.sin", "torch.cos", "torch.cat", "embedding.view.view.view", "torch.cat.unsqueeze", "torch.cat.max", "torch.cat.min", "torch.cat", "embedding.view.view.size"], "methods", ["None"], ["", "def", "preprocess_embedding", "(", "self", ",", "position_mat", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Preprocess the input positions such as doing sine, cosine transformation.\n\n        Args:\n            position_mat (torch.Tensor): [N,*,input_channels]\n\n        Returns:\n            torch.Tensor: [N,*,embedding_dim]\n        \"\"\"", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "bin_scale", "=", "position_mat", ".", "max", "(", ")", "-", "position_mat", ".", "min", "(", ")", "\n", "if", "self", ".", "input_channels", ">", "2", ":", "\n", "                ", "cords", "=", "position_mat", "[", "...", ",", ":", "2", "]", "/", "bin_scale", "\n", "position_mat", "=", "torch", ".", "cat", "(", "[", "cords", ",", "position_mat", "[", "...", ",", "2", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "position_mat", "=", "position_mat", "/", "bin_scale", "\n", "\n", "", "", "feat_dim", "=", "self", ".", "embedding_dim", "//", "(", "2", "*", "self", ".", "input_channels", ")", "\n", "feat_range", "=", "torch", ".", "arange", "(", "0", ",", "feat_dim", ",", "device", "=", "position_mat", ".", "device", ")", "\n", "dim_mat", "=", "torch", ".", "pow", "(", "\n", "1.0", "*", "self", ".", "temperature", ",", "(", "4.0", "/", "self", ".", "embedding_dim", ")", "*", "feat_range", "\n", ")", "\n", "position_mat", "=", "self", ".", "scale", "*", "position_mat", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "div_mat", "=", "torch", ".", "div", "(", "position_mat", ",", "dim_mat", ")", "# [N,*,input_channels,feat_dim]", "\n", "sin_mat", "=", "torch", ".", "sin", "(", "div_mat", ")", "\n", "cos_mat", "=", "torch", ".", "cos", "(", "div_mat", ")", "\n", "embedding", "=", "torch", ".", "cat", "(", "\n", "(", "sin_mat", ",", "cos_mat", ")", ",", "dim", "=", "-", "1", "\n", ")", "# [N,*,input_channels,2*feat_dim]", "\n", "embedding", "=", "embedding", ".", "view", "(", "*", "embedding", ".", "size", "(", ")", "[", ":", "-", "2", "]", ",", "self", ".", "embedding_dim", ")", "\n", "\n", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.PositionalEncodingSineLearned.__init__": [[197, 245], ["positional_encoding.PositionalEncodingSine.__init__", "range", "layers.append", "torch.nn.Sequential", "dict", "dict", "layers.append", "mmcv.cnn.ConvModule", "layers.append", "isinstance", "mmcv.cnn.ConvModule", "torch.nn.ReLU", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_channels", ":", "int", ",", "\n", "out_channels", ":", "int", "=", "None", ",", "\n", "conv_dim", ":", "int", "=", "2", ",", "\n", "num_layers", ":", "int", "=", "1", ",", "\n", "out_relu", ":", "bool", "=", "False", ",", "\n", "norm_cfg", ":", "dict", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Sine postional embedding with learnable transformation.\n\n        Args:\n            input_channels (int): the dimension of input.\n            with_sigmoid (bool, optional): add sigmoid function on the top of output. Defaults to False.\n            conv_dim (int, optional): 1 or 2. If it is 2, the input positions much be [N,H,W,C]. Defaults to 2.\n            norm_cfg (dict, optional): Defaults to None.\n        \"\"\"", "\n", "super", "(", "PositionalEncodingSineLearned", ",", "self", ")", ".", "__init__", "(", "input_channels", ",", "**", "kwargs", ")", "\n", "self", ".", "use_conv2d", "=", "conv_dim", "==", "2", "\n", "\n", "if", "self", ".", "use_conv2d", ":", "\n", "            ", "conv_cfg", "=", "dict", "(", "type", "=", "\"Conv2d\"", ")", "\n", "", "else", ":", "\n", "            ", "conv_cfg", "=", "dict", "(", "type", "=", "\"Conv1d\"", ")", "\n", "", "out_channels", "=", "out_channels", "if", "out_channels", "is", "not", "None", "else", "self", ".", "embedding_dim", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "ConvModule", "(", "\n", "self", ".", "embedding_dim", ",", "\n", "self", ".", "embedding_dim", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", ")", ")", "\n", "", "layers", ".", "append", "(", "\n", "ConvModule", "(", "\n", "self", ".", "embedding_dim", ",", "out_channels", ",", "1", ",", "conv_cfg", "=", "conv_cfg", ",", "act_cfg", "=", "None", "\n", ")", "\n", ")", "\n", "if", "out_relu", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "embedding_transform", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "for", "l", "in", "self", ".", "embedding_transform", ":", "\n", "            ", "if", "isinstance", "(", "l", ",", "ConvModule", ")", ":", "\n", "                ", "normal_init", "(", "l", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.PositionalEncodingSineLearned.postprocess_embedding": [[246, 275], ["positional_encoding.PositionalEncodingSineLearned.embedding_transform().permute", "list", "positional_encoding.PositionalEncodingSineLearned.embedding_transform().permute().reshape", "positional_encoding.PositionalEncodingSineLearned.dim", "positional_encoding.PositionalEncodingSineLearned.size", "positional_encoding.PositionalEncodingSineLearned.embedding_transform", "positional_encoding.PositionalEncodingSineLearned.embedding_transform().permute", "positional_encoding.PositionalEncodingSineLearned.permute().contiguous", "positional_encoding.PositionalEncodingSineLearned.embedding_transform", "positional_encoding.PositionalEncodingSineLearned.permute", "positional_encoding.PositionalEncodingSineLearned.reshape().permute", "positional_encoding.PositionalEncodingSineLearned.reshape"], "methods", ["None"], ["", "", "", "def", "postprocess_embedding", "(", "self", ",", "embedding", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Perform learnable operations on the embedding\n\n        Args:\n            embedding (torch.Tensor): [N,*,C]\n\n        Returns:\n            torch.Tensor: [N,*,C]\n        \"\"\"", "\n", "if", "self", ".", "use_conv2d", ":", "\n", "            ", "assert", "embedding", ".", "dim", "(", ")", "==", "4", "\n", "\n", "embedding", "=", "self", ".", "embedding_transform", "(", "\n", "embedding", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", ")", ".", "permute", "(", "\n", "0", ",", "2", ",", "3", ",", "1", "\n", ")", "# [N,C,*]", "\n", "", "else", ":", "\n", "            ", "shape", "=", "list", "(", "embedding", ".", "size", "(", ")", ")", "\n", "new_shape", "=", "shape", "[", ":", "-", "1", "]", "+", "[", "self", ".", "out_channels", "]", "\n", "embedding", "=", "(", "\n", "self", ".", "embedding_transform", "(", "\n", "embedding", ".", "reshape", "(", "shape", "[", "0", "]", ",", "-", "1", ",", "shape", "[", "-", "1", "]", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", ".", "reshape", "(", "*", "new_shape", ")", "\n", ")", "\n", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.PositionalEncodingLearned.__init__": [[279, 319], ["positional_encoding.BasePositionalEncoding.__init__", "torch.nn.Sequential", "dict", "dict", "mmcv.cnn.ConvModule", "conv", "isinstance", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_channels", ":", "int", ",", "\n", "with_sigmoid", ":", "bool", "=", "False", ",", "\n", "conv_dim", ":", "int", "=", "2", ",", "\n", "norm_cfg", ":", "dict", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Postional embedding with learnable transformation.\n\n        Args:\n            input_channels (int): the dimension of input.\n            with_sigmoid (bool, optional): add sigmoid function on the top of output. Defaults to False.\n            conv_dim (int, optional): 1 or 2. If it is 2, the input positions much be [N,H,W,C]. Defaults to 2.\n            norm_cfg (dict, optional): Defaults to None.\n        \"\"\"", "\n", "super", "(", "PositionalEncodingLearned", ",", "self", ")", ".", "__init__", "(", "input_channels", ",", "**", "kwargs", ")", "\n", "self", ".", "use_conv2d", "=", "conv_dim", "==", "2", "\n", "self", ".", "with_sigmoid", "=", "with_sigmoid", "\n", "if", "self", ".", "use_conv2d", ":", "\n", "            ", "conv", "=", "nn", ".", "Conv2d", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "\"Conv2d\"", ")", "\n", "", "else", ":", "\n", "            ", "conv", "=", "nn", ".", "Conv1d", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "\"Conv1d\"", ")", "\n", "", "self", ".", "embedding_transform", "=", "nn", ".", "Sequential", "(", "\n", "ConvModule", "(", "\n", "self", ".", "input_channels", ",", "\n", "self", ".", "embedding_dim", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", ")", ",", "\n", "conv", "(", "self", ".", "input_channels", ",", "self", ".", "embedding_dim", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", "\n", "for", "l", "in", "self", ".", "embedding_transform", ":", "\n", "            ", "if", "isinstance", "(", "l", ",", "ConvModule", ")", ":", "\n", "                ", "normal_init", "(", "l", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "else", ":", "\n", "                ", "normal_init", "(", "l", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.PositionalEncodingLearned.postprocess_embedding": [[320, 338], ["positional_encoding.PositionalEncodingLearned.embedding_transform", "embedding.sigmoid.sigmoid.transpose().contiguous", "embedding.sigmoid.sigmoid.transpose().contiguous", "embedding.sigmoid.sigmoid.sigmoid", "embedding.sigmoid.sigmoid.dim", "embedding.sigmoid.sigmoid.transpose", "embedding.sigmoid.sigmoid.transpose"], "methods", ["None"], ["", "", "", "def", "postprocess_embedding", "(", "self", ",", "embedding", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"Perform learnable operations on the embedding\n\n        Args:\n            embedding (torch.Tensor): [N,*,C]\n\n        Returns:\n            torch.Tensor: [N,*,C]\n        \"\"\"", "\n", "if", "self", ".", "use_conv2d", ":", "\n", "            ", "assert", "embedding", ".", "dim", "(", ")", "==", "4", "\n", "\n", "", "embedding", "=", "self", ".", "embedding_transform", "(", "\n", "embedding", ".", "transpose", "(", "1", ",", "-", "1", ")", ".", "contiguous", "(", ")", "\n", ")", "# [N,C,*]", "\n", "if", "self", ".", "with_sigmoid", ":", "\n", "            ", "embedding", "=", "embedding", ".", "sigmoid", "(", ")", "\n", "", "return", "embedding", ".", "transpose", "(", "1", ",", "-", "1", ")", ".", "contiguous", "(", ")", "# [N,*,C]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.builder.build_attention_layer": [[8, 11], ["mmcv.utils.build_from_cfg"], "function", ["None"], ["def", "build_attention_layer", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Builder for Transformer.\"\"\"", "\n", "return", "build_from_cfg", "(", "cfg", ",", "BVR_ATTENTION", ",", "default_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.builder.build_positional_encoding": [[12, 15], ["mmcv.utils.build_from_cfg"], "function", ["None"], ["", "def", "build_positional_encoding", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Builder for Transformer.\"\"\"", "\n", "return", "build_from_cfg", "(", "cfg", ",", "BVR_POSITIONAL_ENCODING", ",", "default_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.builder.build_transformer": [[16, 18], ["mmcv.utils.build_from_cfg"], "function", ["None"], ["", "def", "build_transformer", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "return", "build_from_cfg", "(", "cfg", ",", "BVR_TRANSFORMER", ",", "default_args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.transformer.SimpleBVR_Transformer.__init__": [[16, 73], ["dict", "torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.ReLU", "torch.ReLU", "torch.ModuleList", "torch.ModuleList", "transformer.SimpleBVR_Transformer.decoder.append", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "multihead_attention.MultiheadAttention", "transformer.SimpleBVR_Transformer.relative_positional_encoding.append", "positional_encoding.PositionalEncodingSineLearned", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "positional_encoding.PositionalEncodingSineLearned"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "position_dim", ",", "\n", "embedding_dim", ",", "\n", "num_heads", ",", "\n", "num_outer_heads", "=", "1", ",", "\n", "outer_agg_type", "=", "\"add\"", ",", "\n", "positional_cfg", "=", "dict", "(", "base_size", "=", "[", "300", ",", "300", "]", ")", ",", "\n", "with_relative_positional_encoding", "=", "True", ",", "\n", "with_appearance_relation", "=", "True", ",", "\n", "shared_positional_encoding", "=", "True", ",", "\n", "relative_positional_encoding", "=", "None", ",", "\n", "cat_pos", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_relative_positional_encoding", "=", "with_relative_positional_encoding", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "self", ".", "with_relative_positional_encoding", ":", "\n", "            ", "self", ".", "relative_positional_encoding", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "relative_positional_encoding", "is", "not", "None", ":", "\n", "                ", "shared_positional_encoding", "=", "True", "\n", "", "", "for", "_", "in", "range", "(", "num_outer_heads", ")", ":", "\n", "            ", "self", ".", "decoder", ".", "append", "(", "MultiheadAttention", "(", "embedding_dim", ",", "num_heads", ",", "dropout", "=", "0", ",", "app_relation", "=", "with_appearance_relation", ")", ")", "\n", "if", "self", ".", "with_relative_positional_encoding", "and", "(", "\n", "not", "shared_positional_encoding", "\n", ")", ":", "\n", "                ", "self", ".", "relative_positional_encoding", ".", "append", "(", "\n", "PositionalEncodingSineLearned", "(", "\n", "position_dim", ",", "\n", "out_channels", "=", "num_heads", ",", "\n", "conv_dim", "=", "2", ",", "\n", "embedding_dim", "=", "embedding_dim", ",", "\n", "**", "positional_cfg", ",", "\n", ")", "\n", ")", "\n", "", "", "if", "self", ".", "with_relative_positional_encoding", "and", "shared_positional_encoding", ":", "\n", "            ", "if", "relative_positional_encoding", "is", "not", "None", ":", "\n", "                ", "self", ".", "relative_positional_encoding", "=", "relative_positional_encoding", "\n", "", "else", ":", "\n", "                ", "self", ".", "relative_positional_encoding", "=", "PositionalEncodingSineLearned", "(", "\n", "position_dim", ",", "\n", "out_channels", "=", "num_heads", ",", "\n", "conv_dim", "=", "2", ",", "\n", "embedding_dim", "=", "embedding_dim", ",", "\n", "**", "positional_cfg", ",", "\n", ")", "\n", "", "", "self", ".", "cat_pos", "=", "cat_pos", "\n", "if", "self", ".", "cat_pos", ":", "\n", "            ", "self", ".", "embed_trans", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "embedding_dim", "+", "num_outer_heads", "*", "position_dim", ",", "embedding_dim", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "pos_trans", "=", "nn", ".", "Linear", "(", "position_dim", ",", "position_dim", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_trans", "[", "0", "]", ".", "weight", ",", "0.01", ")", "\n", "\n", "\n", "", "self", ".", "num_outer_heads", "=", "num_outer_heads", "\n", "self", ".", "outer_agg_type", "=", "outer_agg_type", "\n", "self", ".", "out_act", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.transformer.SimpleBVR_Transformer.forward": [[74, 123], ["mmdet.core.multi_apply", "isinstance", "isinstance", "len", "len", "isinstance", "base_embedding.append", "len", "len", "l.pre_compute", "transformer.SimpleBVR_Transformer.relative_positional_encoding.pre_compute"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.BasePositionalEncoding.pre_compute", "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.positional_encoding.BasePositionalEncoding.pre_compute"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "query_features", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "query_positions", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "key_features", ":", "List", "[", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "\n", "key_positions", ":", "List", "[", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "\n", "scale_terms", ":", "List", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "List", "[", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Perform SelfAttention on features\n\n        Args:\n            query_features (List[torch.Tensor]): each tensor has shape [N,H,W,C]\n            query_positions (List[torch.Tensor]): each tensor has shape [N,H,W,2]\n            key_features (List[List[torch.Tensor]]): each tensor has shape [N,K,C]\n            key_positions (List[List[torch.Tensor]]): each tensor has shape [N,K,2]\n            scale_terms (List[int]): scale factor for positions.\n        Returns:\n            List[torch.Tensor]: [description]\n        \"\"\"", "\n", "if", "scale_terms", "is", "None", ":", "\n", "            ", "scale_terms", "=", "[", "1.0", "]", "*", "len", "(", "query_features", ")", "\n", "", "elif", "isinstance", "(", "scale_terms", ",", "float", ")", ":", "\n", "            ", "scale_terms", "=", "[", "scale_terms", "]", "*", "len", "(", "query_features", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "scale_terms", ",", "list", ")", "and", "(", "\n", "len", "(", "scale_terms", ")", "==", "len", "(", "query_features", ")", "\n", ")", "\n", "# For each level, each kind of keypoints, we oly compute embedding basis(400x400) once.", "\n", "", "if", "self", ".", "with_relative_positional_encoding", ":", "\n", "# precompute positional embedding if approximated", "\n", "            ", "if", "isinstance", "(", "self", ".", "relative_positional_encoding", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "base_embedding", "=", "[", "]", "\n", "for", "l", "in", "self", ".", "relative_positional_encoding", ":", "\n", "                    ", "base_embedding", ".", "append", "(", "l", ".", "pre_compute", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "base_embedding", "=", "[", "\n", "self", ".", "relative_positional_encoding", ".", "pre_compute", "(", ")", "\n", "]", "*", "self", ".", "num_outer_heads", "\n", "", "", "else", ":", "\n", "            ", "base_embedding", "=", "None", "\n", "\n", "", "return", "multi_apply", "(", "\n", "self", ".", "forward_single", ",", "\n", "query_features", ",", "\n", "query_positions", ",", "\n", "key_features", ",", "\n", "key_positions", ",", "\n", "scale_terms", ",", "\n", "base_embedding", "=", "base_embedding", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.bvr_transformer.transformer.SimpleBVR_Transformer.forward_single": [[125, 190], ["list", "transformer.SimpleBVR_Transformer.size", "transformer.SimpleBVR_Transformer.size", "transformer.SimpleBVR_Transformer.reshape", "range", "transformer.SimpleBVR_Transformer.reshape", "transformer.SimpleBVR_Transformer.size", "query_position.reshape", "key_features[].reshape", "query_new_feature.append", "NotImplementedError", "transformer.SimpleBVR_Transformer.out_act", "transformer.SimpleBVR_Transformer.embed_trans", "key_positions[].reshape", "embedding_layer", "relative_positional_encoding.permute.permute.permute", "transformer.SimpleBVR_Transformer.permute", "key_features[].reshape.permute", "key_features[].reshape.permute", "query_new_pos.append", "torch.stack().sum().permute", "torch.stack().sum().permute", "torch.stack().sum().permute", "torch.stack().sum().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "transformer.SimpleBVR_Transformer.pos_trans", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "rel_pos.detach", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward_single", "(", "\n", "self", ",", "\n", "query_feature", ",", "\n", "query_position", ",", "\n", "key_features", ",", "\n", "key_positions", ",", "\n", "scale_terms", ",", "\n", "base_embedding", ",", "\n", ")", ":", "\n", "        ", "input_size", "=", "list", "(", "query_feature", ".", "size", "(", ")", ")", "\n", "\n", "N", "=", "query_feature", ".", "size", "(", "0", ")", "\n", "C", "=", "query_feature", ".", "size", "(", "-", "1", ")", "\n", "query_feature", "=", "query_feature", ".", "reshape", "(", "N", ",", "-", "1", ",", "C", ")", "# N,HW,C", "\n", "query_position", "=", "(", "\n", "query_position", ".", "reshape", "(", "N", ",", "-", "1", ",", "2", ")", "/", "scale_terms", "\n", ")", "# scale the position", "\n", "\n", "query_new_feature", "=", "[", "]", "\n", "query_new_pos", "=", "[", "]", "\n", "# each group represents a kind of keypoint", "\n", "for", "group", "in", "range", "(", "self", ".", "num_outer_heads", ")", ":", "\n", "            ", "key_feature", "=", "key_features", "[", "group", "]", ".", "reshape", "(", "N", ",", "-", "1", ",", "C", ")", "# N,K,C", "\n", "key_position", "=", "key_positions", "[", "group", "]", ".", "reshape", "(", "N", ",", "-", "1", ",", "2", ")", "/", "scale_terms", "# N,K,2", "\n", "rel_pos", "=", "key_position", "[", ":", ",", "None", ",", "...", "]", "-", "query_position", "[", "...", ",", "None", ",", ":", "]", "\n", "if", "self", ".", "with_relative_positional_encoding", ":", "\n", "                ", "embedding_layer", "=", "(", "\n", "self", ".", "relative_positional_encoding", "[", "group", "]", "\n", "if", "isinstance", "(", "self", ".", "relative_positional_encoding", ",", "nn", ".", "ModuleList", ")", "\n", "else", "self", ".", "relative_positional_encoding", "\n", ")", "\n", "relative_positional_encoding", "=", "embedding_layer", "(", "\n", "rel_pos", ",", "\n", "base_embedding", "[", "group", "]", ",", "\n", ")", "# N,HW,K,C", "\n", "relative_positional_encoding", "=", "relative_positional_encoding", ".", "permute", "(", "\n", "0", ",", "3", ",", "1", ",", "2", "\n", ")", "# N,C,HW,K", "\n", "", "else", ":", "\n", "                ", "relative_positional_encoding", "=", "None", "\n", "\n", "", "refined_feat", ",", "attn_weight", "=", "self", ".", "decoder", "[", "group", "]", "(", "\n", "query_feature", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ",", "# Len,Batch,Channel", "\n", "key_feature", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ",", "# Len,Batch,Channel", "\n", "key_feature", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ",", "# Len,Batch,Channel", "\n", "need_weights", "=", "True", ",", "\n", "relative_atten_weights", "=", "relative_positional_encoding", ",", "\n", ")", "\n", "if", "self", ".", "cat_pos", ":", "\n", "                ", "new_rel_pos", "=", "(", "attn_weight", "[", "...", ",", "None", "]", "*", "rel_pos", ".", "detach", "(", ")", ")", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "query_new_pos", ".", "append", "(", "self", ".", "pos_trans", "(", "new_rel_pos", ")", ")", "\n", "", "query_new_feature", ".", "append", "(", "refined_feat", ")", "\n", "\n", "", "if", "self", ".", "outer_agg_type", "==", "\"add\"", ":", "\n", "            ", "query_feature", "=", "query_feature", "+", "torch", ".", "stack", "(", "query_new_feature", ")", ".", "sum", "(", "\n", "dim", "=", "0", "\n", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "if", "self", ".", "out_act", ":", "\n", "            ", "query_feature", "=", "self", ".", "out_act", "(", "query_feature", ")", "\n", "", "if", "self", ".", "cat_pos", ":", "\n", "            ", "query_feature", "=", "self", ".", "embed_trans", "(", "torch", ".", "cat", "(", "[", "query_feature", "]", "+", "query_new_pos", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "query_feature", "=", "query_feature", ".", "reshape", "(", "*", "input_size", ")", "\n", "return", "query_feature", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.detectors.bvr.BVR.__init__": [[8, 17], ["single_stage.SingleStageDetector.__init__"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.__init__"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", ",", "\n", "bbox_head", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "BVR", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "neck", ",", "bbox_head", ",", "train_cfg", ",", "\n", "test_cfg", ",", "pretrained", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.__init__": [[15, 117], ["dict", "base_dense_head.BaseDenseHead.__init__", "builder.build_head", "builder.build_head", "bvr_head.BVRHead.build_transformer", "print", "dict", "dict", "dict", "dict", "bbox_head_cfg.update", "bbox_head_cfg.update", "mmdet.models.utils.bvr_utils.assign_required_method", "RuntimeError", "keypoint_head_cfg.update"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.__init__", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.build_transformer", "home.repos.pwc.inspect_result.microsoft_RelationNet2.utils.bvr_utils.assign_required_method"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "bbox_head_cfg", ":", "dict", ",", "\n", "keypoint_head_cfg", ":", "dict", ",", "\n", "cls_keypoint_cfg", ":", "dict", "=", "None", ",", "\n", "reg_keypoint_cfg", ":", "dict", "=", "None", ",", "\n", "keypoint_pos", ":", "str", "=", "\"input\"", ",", "\n", "keypoint_cfg", ":", "dict", "=", "None", ",", "\n", "feature_selection_cfg", ":", "dict", "=", "None", ",", "\n", "num_attn_heads", ":", "int", "=", "8", ",", "\n", "scale_position", ":", "bool", "=", "True", ",", "\n", "scale_factor", ":", "float", "=", "1.0", ",", "\n", "with_relative_positional_encoding", ":", "bool", "=", "True", ",", "\n", "with_appearance_relation", ":", "bool", "=", "True", ",", "\n", "shared_positional_encoding_inter", ":", "bool", "=", "True", ",", "\n", "shared_positional_encoding_outer", ":", "bool", "=", "False", ",", "\n", "reg_cat_pos", ":", "bool", "=", "False", ",", "\n", "pos_cfg", ":", "dict", "=", "dict", "(", "base_size", "=", "[", "400", ",", "400", "]", ")", ",", "\n", "train_cfg", ":", "dict", "=", "None", ",", "\n", "test_cfg", ":", "dict", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"BVRHead for single stage detector.\n\n        Args:\n            bbox_head_cfg (dict): [description]\n            keypoint_head_cfg (dict): [description]\n            cls_keypoint_cfg (dict, optional): [description]. Defaults to None.\n            reg_keypoint_cfg (dict, optional): [description]. Defaults to None.\n            keypoint_pos (str, optional): [description]. Defaults to \"input\".\n            keypoint_cfg (dict, optional): [description]. Defaults to None.\n            feature_selection_cfg (dict, optional): [description]. Defaults to None.\n            num_attn_heads (int, optional): [description]. Defaults to 8.\n            scale_position (bool, optional): [description]. Defaults to True.\n            scale_factor (float, optional): [description]. Defaults to 1.0.\n            with_relative_positional_encoding (bool, optional): [description]. Defaults to True.\n            with_appearance_relation (bool, optional): [description]. Defaults to True.\n            shared_positional_encoding_inter (bool, optional): [description]. Defaults to True.\n            shared_positional_encoding_outer (bool, optional): [description]. Defaults to False.\n            reg_cat_pos (bool, optional): [description]. Defaults to False.\n            pos_cfg (dict, optional): [description]. Defaults to dict(base_size=[400, 400]).\n            train_cfg (dict, optional): [description]. Defaults to None.\n            test_cfg (dict, optional): [description]. Defaults to None.\n\n        Raises:\n            RuntimeError: [description]\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "keypoint_cfg", "is", "None", ":", "\n", "            ", "keypoint_cfg", "=", "dict", "(", "\n", "max_keypoint_num", "=", "20", ",", "\n", "keypoint_score_thr", "=", "0.0", ",", "\n", "fuse_multi_level", "=", "False", ",", "\n", "max_fuse_keypoint_num", "=", "50", ",", "\n", ")", "\n", "", "if", "feature_selection_cfg", "is", "None", ":", "\n", "            ", "feature_selection_cfg", "=", "dict", "(", ")", "\n", "", "if", "reg_keypoint_cfg", "is", "None", ":", "\n", "            ", "reg_keypoint_cfg", "=", "dict", "(", "\n", "keypoint_types", "=", "[", "\"top_left_corner\"", ",", "\"bottom_right_corner\"", "]", ",", "\n", "with_key_score", "=", "False", ",", "\n", "with_relation", "=", "False", ",", "\n", ")", "\n", "", "if", "cls_keypoint_cfg", "is", "None", ":", "\n", "            ", "cls_keypoint_cfg", "=", "dict", "(", "\n", "keypoint_types", "=", "[", "\"center\"", "]", ",", "\n", "with_key_score", "=", "False", ",", "\n", "with_relation", "=", "False", ",", "\n", ")", "\n", "", "if", "train_cfg", "is", "not", "None", ":", "\n", "            ", "bbox_head_cfg", ".", "update", "(", "train_cfg", "=", "train_cfg", ".", "bbox", ")", "\n", "", "if", "test_cfg", "is", "not", "None", ":", "\n", "            ", "bbox_head_cfg", ".", "update", "(", "test_cfg", "=", "test_cfg", ")", "\n", "", "self", ".", "bbox_head", "=", "build_head", "(", "bbox_head_cfg", ")", "\n", "if", "assign_required_method", "(", "self", ".", "bbox_head", ")", "!=", "1", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"BBox Head is not well modified.\"", ")", "\n", "", "if", "train_cfg", "is", "not", "None", ":", "\n", "            ", "keypoint_head_cfg", ".", "update", "(", "train_cfg", "=", "train_cfg", ".", "keypoint", ")", "\n", "", "self", ".", "keypoint_head", "=", "build_head", "(", "keypoint_head_cfg", ")", "\n", "\n", "self", ".", "keypoint_cfg", "=", "keypoint_cfg", "\n", "self", ".", "feature_selection_cfg", "=", "feature_selection_cfg", "\n", "self", ".", "cls_keypoint_cfg", "=", "cls_keypoint_cfg", "\n", "self", ".", "reg_keypoint_cfg", "=", "reg_keypoint_cfg", "\n", "self", ".", "with_relation", "=", "(", "\n", "cls_keypoint_cfg", "[", "\"with_relation\"", "]", "or", "reg_keypoint_cfg", "[", "\"with_relation\"", "]", "\n", ")", "\n", "self", ".", "keypoint_pos", "=", "[", "\"input\"", ",", "\"cls\"", ",", "\"reg\"", "]", ".", "index", "(", "keypoint_pos", ")", "\n", "# build transformer", "\n", "self", ".", "scale_position", "=", "scale_position", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "num_heads", "=", "num_attn_heads", "\n", "self", ".", "pos_cfg", "=", "pos_cfg", "\n", "self", ".", "with_relative_positional_encoding", "=", "with_relative_positional_encoding", "\n", "self", ".", "with_appearance_relation", "=", "with_appearance_relation", "\n", "self", ".", "shared_positional_encoding_inter", "=", "shared_positional_encoding_inter", "\n", "self", ".", "shared_positional_encoding_outer", "=", "shared_positional_encoding_outer", "\n", "self", ".", "cat_pos", "=", "reg_cat_pos", "\n", "self", ".", "build_transformer", "(", ")", "\n", "\n", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "print", "(", "self", ")", "\n", "", "def", "build_transformer", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.build_transformer": [[117, 144], ["mmdet.models.utils.bvr_transformer.SimpleBVR_Transformer", "mmdet.models.utils.bvr_transformer.SimpleBVR_Transformer", "len", "len"], "methods", ["None"], ["", "def", "build_transformer", "(", "self", ")", ":", "\n", "        ", "num_heads", ",", "pos_cfg", "=", "self", ".", "num_heads", ",", "self", ".", "pos_cfg", "\n", "if", "self", ".", "cls_keypoint_cfg", "[", "\"with_relation\"", "]", ":", "\n", "            ", "self", ".", "cls_transformer", "=", "SimpleBVR_Transformer", "(", "\n", "2", ",", "\n", "self", ".", "bbox_head", ".", "feat_channels", ",", "\n", "num_heads", ",", "\n", "len", "(", "self", ".", "cls_keypoint_cfg", "[", "\"keypoint_types\"", "]", ")", ",", "\n", "with_relative_positional_encoding", "=", "self", ".", "with_relative_positional_encoding", ",", "\n", "with_appearance_relation", "=", "self", ".", "with_appearance_relation", ",", "\n", "positional_cfg", "=", "pos_cfg", ",", "\n", "shared_positional_encoding", "=", "self", ".", "shared_positional_encoding_inter", ",", "\n", ")", "\n", "", "if", "self", ".", "reg_keypoint_cfg", "[", "\"with_relation\"", "]", ":", "\n", "            ", "self", ".", "reg_transformer", "=", "SimpleBVR_Transformer", "(", "\n", "2", ",", "\n", "self", ".", "bbox_head", ".", "feat_channels", ",", "\n", "num_heads", ",", "\n", "len", "(", "self", ".", "reg_keypoint_cfg", "[", "\"keypoint_types\"", "]", ")", ",", "\n", "positional_cfg", "=", "pos_cfg", ",", "\n", "with_relative_positional_encoding", "=", "self", ".", "with_relative_positional_encoding", ",", "\n", "with_appearance_relation", "=", "self", ".", "with_appearance_relation", ",", "\n", "shared_positional_encoding", "=", "self", ".", "shared_positional_encoding_inter", ",", "\n", "relative_positional_encoding", "=", "self", ".", "cls_transformer", ".", "relative_positional_encoding", "\n", "if", "self", ".", "shared_positional_encoding_outer", "\n", "else", "None", ",", "\n", "cat_pos", "=", "self", ".", "cat_pos", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.init_weights": [[146, 149], ["bvr_head.BVRHead.bbox_head.init_weights", "bvr_head.BVRHead.keypoint_head.init_weights"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.init_weights", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.init_weights"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "bbox_head", ".", "init_weights", "(", ")", "\n", "self", ".", "keypoint_head", ".", "init_weights", "(", ")", "\n", "# init transformer", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.forward": [[151, 183], ["bvr_head.BVRHead.bbox_head.forward_features", "bvr_head.BVRHead.keypoint_head", "bvr_head.BVRHead.bbox_head.forward_predictions", "bvr_head.BVRHead._apply_relation", "bvr_head.BVRHead._apply_relation"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead._apply_relation", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead._apply_relation"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "\n", "        ", "cls_feats", ",", "reg_feats", "=", "self", ".", "bbox_head", ".", "forward_features", "(", "feats", ")", "\n", "keypoint_scores", ",", "keypoint_offsets", "=", "self", ".", "keypoint_head", "(", "\n", "[", "feats", ",", "cls_feats", ",", "reg_feats", "]", "[", "self", ".", "keypoint_pos", "]", "\n", ")", "\n", "\n", "if", "self", ".", "with_relation", ":", "\n", "            ", "if", "self", ".", "cls_keypoint_cfg", "[", "\"with_relation\"", "]", ":", "\n", "                ", "cls_feats", "=", "self", ".", "_apply_relation", "(", "\n", "cls_feats", ",", "\n", "cls_feats", ",", "\n", "keypoint_scores", ",", "\n", "keypoint_offsets", ",", "\n", "self", ".", "cls_keypoint_cfg", "[", "\"keypoint_types\"", "]", ",", "\n", "self", ".", "cls_transformer", ",", "\n", ")", "\n", "", "if", "self", ".", "reg_keypoint_cfg", "[", "\"with_relation\"", "]", ":", "\n", "                ", "reg_feats", "=", "self", ".", "_apply_relation", "(", "\n", "reg_feats", ",", "\n", "reg_feats", ",", "\n", "keypoint_scores", ",", "\n", "keypoint_offsets", ",", "\n", "self", ".", "reg_keypoint_cfg", "[", "\"keypoint_types\"", "]", ",", "\n", "self", ".", "reg_transformer", ",", "\n", ")", "\n", "", "", "bbox_outs", "=", "self", ".", "bbox_head", ".", "forward_predictions", "(", "cls_feats", ",", "reg_feats", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "bbox_outs", ",", "keypoint_scores", ",", "keypoint_offsets", "\n", "", "else", ":", "\n", "            ", "return", "bbox_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead._apply_relation": [[184, 235], ["bvr_head.BVRHead.keypoint_head.get_keypoints_multihead", "bvr_head.BVRHead.keypoint_head.get_keypoint_features", "transformer", "feat.permute", "[].expand", "feat.permute", "len", "feat.size", "zip", "query_features[].size", "loc.reshape", "range", "len"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_keypoints_multihead", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_keypoint_features"], ["", "", "def", "_apply_relation", "(", "\n", "self", ",", "feats", ",", "keypoint_feats", ",", "keypoint_logits", ",", "keypoint_offsets", ",", "keypoint_choices", ",", "transformer", "\n", ")", ":", "\n", "# extract keypoints in each level", "\n", "        ", "(", "\n", "keypoint_scores", ",", "\n", "keypoint_positions", ",", "\n", "keypoint_inds", ",", "\n", "locations", ",", "\n", ")", "=", "self", ".", "keypoint_head", ".", "get_keypoints_multihead", "(", "\n", "keypoint_logits", ",", "\n", "keypoint_offsets", ",", "\n", "keypoint_choices", ",", "\n", "map_back", "=", "False", ",", "\n", "**", "self", ".", "keypoint_cfg", "\n", ")", "\n", "# extract keypoint features", "\n", "(", "\n", "keypoint_features", ",", "\n", "keypoint_positions", ",", "\n", ")", "=", "self", ".", "keypoint_head", ".", "get_keypoint_features", "(", "\n", "keypoint_feats", ",", "\n", "keypoint_scores", ",", "\n", "keypoint_positions", ",", "\n", "keypoint_inds", ",", "\n", "num_keypoint_head", "=", "len", "(", "keypoint_choices", ")", ",", "\n", "**", "self", ".", "feature_selection_cfg", "\n", ")", "\n", "\n", "feat_sizes", "=", "[", "feat", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "feat", "in", "feats", "]", "\n", "query_features", "=", "[", "feat", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "for", "feat", "in", "feats", "]", "\n", "query_positions", "=", "[", "\n", "loc", ".", "reshape", "(", "*", "feat_size", ",", "-", "1", ")", "[", "None", ",", "...", ",", ":", "2", "]", ".", "expand", "(", "\n", "query_features", "[", "0", "]", ".", "size", "(", ")", "[", "0", "]", ",", "*", "feat_size", ",", "-", "1", "\n", ")", "\n", "for", "loc", ",", "feat_size", "in", "zip", "(", "locations", ",", "feat_sizes", ")", "\n", "]", "\n", "# forward with transformer", "\n", "query_features", ",", "_", "=", "transformer", "(", "\n", "query_features", ",", "# type: List[torch.Tensor(N,H,W,C)]", "\n", "query_positions", ",", "# type: List[torch.Tensor(N,H,W,2)]", "\n", "keypoint_features", ",", "# type: List[torch.Tensor(N,K,C)]", "\n", "keypoint_positions", ",", "# type: List[torch.Tensor(N,K,2)]", "\n", "[", "\n", "self", ".", "keypoint_head", ".", "strides", "[", "0", "]", "*", "self", ".", "scale_factor", "\n", "for", "_", "in", "range", "(", "len", "(", "query_features", ")", ")", "\n", "]", "\n", "if", "not", "self", ".", "scale_position", "\n", "else", "[", "stride", "*", "self", ".", "scale_factor", "for", "stride", "in", "self", ".", "keypoint_head", ".", "strides", "]", ",", "\n", ")", "\n", "return", "[", "feat", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "for", "feat", "in", "query_features", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.loss": [[236, 260], ["bvr_head.BVRHead.keypoint_head.loss_multihead", "bvr_head.BVRHead.bbox_head.loss", "dict", "dict.update", "dict.update", "bvr_head.BVRHead.items", "bvr_head.BVRHead.items"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.loss_multihead", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.loss"], ["", "def", "loss", "(", "\n", "self", ",", "\n", "bbox_outs", ",", "\n", "keypoint_scores", ",", "\n", "keypoint_offsets", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "keypoint_loss", "=", "self", ".", "keypoint_head", ".", "loss_multihead", "(", "\n", "keypoint_scores", ",", "keypoint_offsets", ",", "gt_bboxes", ",", "gt_labels", ",", "img_metas", "\n", ")", "\n", "\n", "bbox_loss", "=", "self", ".", "bbox_head", ".", "loss", "(", "\n", "*", "bbox_outs", ",", "gt_bboxes", ",", "gt_labels", ",", "img_metas", ",", "gt_bboxes_ignore", "\n", ")", "\n", "\n", "loss", "=", "dict", "(", ")", "\n", "loss", ".", "update", "(", "{", "\"kpt_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "keypoint_loss", ".", "items", "(", ")", "}", ")", "\n", "loss", ".", "update", "(", "{", "\"bbox_\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "bbox_loss", ".", "items", "(", ")", "}", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.get_bboxes": [[261, 263], ["bvr_head.BVRHead.bbox_head.get_bboxes"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_bboxes"], ["", "def", "get_bboxes", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "bbox_head", ".", "get_bboxes", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.num_classes": [[264, 267], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bbox_head", ".", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.aug_test": [[268, 273], ["bvr_head.BVRHead.test_cfg.get", "bvr_head.BVRHead.aug_test_bboxes", "bvr_head.BVRHead.aug_test_vote"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.aug_test_bboxes", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.aug_test_vote"], ["", "def", "aug_test", "(", "self", ",", "feats", ",", "img_metas", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "test_cfg", ".", "get", "(", "\"method\"", ",", "\"simple\"", ")", "==", "\"simple\"", ":", "\n", "            ", "return", "self", ".", "aug_test_bboxes", "(", "feats", ",", "img_metas", ",", "rescale", "=", "rescale", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "aug_test_vote", "(", "feats", ",", "img_metas", ",", "rescale", "=", "rescale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.aug_test_bboxes": [[274, 335], ["inspect.signature", "inspect.signature", "zip", "bvr_head.BVRHead.merge_aug_bboxes", "mmdet.core.multiclass_nms", "mmdet.core.bbox2result", "bvr_head.BVRHead.forward", "aug_bboxes.append", "aug_scores.append", "torch.cat", "det_bboxes.clone", "det_bboxes.new_tensor", "inspect.signature.parameters.values", "inspect.signature.parameters.values", "bvr_head.BVRHead.get_bboxes", "len", "aug_factors.append"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.forward", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_bboxes"], ["", "", "def", "aug_test_bboxes", "(", "self", ",", "feats", ",", "img_metas", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test det bboxes with test time augmentation.\n\n        Args:\n            feats (list[Tensor]): the outer list indicates test-time\n                augmentations and inner Tensor should have a shape NxCxHxW,\n                which contains features for all images in the batch.\n            img_metas (list[list[dict]]): the outer list indicates test-time\n                augs (multiscale, flip, etc.) and the inner list indicates\n                images in a batch. each dict has image information.\n            rescale (bool, optional): Whether to rescale the results.\n                Defaults to False.\n\n        Returns:\n            list[ndarray]: bbox results of each class\n        \"\"\"", "\n", "# check with_nms argument", "\n", "gb_sig", "=", "signature", "(", "self", ".", "bbox_head", ".", "get_bboxes", ")", "\n", "gb_args", "=", "[", "p", ".", "name", "for", "p", "in", "gb_sig", ".", "parameters", ".", "values", "(", ")", "]", "\n", "gbs_sig", "=", "signature", "(", "self", ".", "bbox_head", ".", "_get_bboxes_single", ")", "\n", "gbs_args", "=", "[", "p", ".", "name", "for", "p", "in", "gbs_sig", ".", "parameters", ".", "values", "(", ")", "]", "\n", "assert", "(", "'with_nms'", "in", "gb_args", ")", "and", "(", "'with_nms'", "in", "gbs_args", ")", ",", "f'{self.__class__.__name__}'", "' does not support test-time augmentation'", "\n", "\n", "aug_bboxes", "=", "[", "]", "\n", "aug_scores", "=", "[", "]", "\n", "aug_factors", "=", "[", "]", "# score_factors for NMS", "\n", "for", "x", ",", "img_meta", "in", "zip", "(", "feats", ",", "img_metas", ")", ":", "\n", "# only one image in the batch", "\n", "            ", "outs", "=", "self", ".", "forward", "(", "x", ")", "\n", "bbox_inputs", "=", "outs", "+", "(", "img_meta", ",", "self", ".", "test_cfg", ",", "False", ",", "False", ")", "\n", "bbox_outputs", "=", "self", ".", "get_bboxes", "(", "*", "bbox_inputs", ")", "[", "0", "]", "\n", "aug_bboxes", ".", "append", "(", "bbox_outputs", "[", "0", "]", ")", "\n", "aug_scores", ".", "append", "(", "bbox_outputs", "[", "1", "]", ")", "\n", "# bbox_outputs of some detectors (e.g., ATSS, FCOS, YOLOv3)", "\n", "# contains additional element to adjust scores before NMS", "\n", "if", "len", "(", "bbox_outputs", ")", ">=", "3", ":", "\n", "                ", "aug_factors", ".", "append", "(", "bbox_outputs", "[", "2", "]", ")", "\n", "\n", "# after merging, bboxes will be rescaled to the original image size", "\n", "", "", "merged_bboxes", ",", "merged_scores", "=", "self", ".", "merge_aug_bboxes", "(", "\n", "aug_bboxes", ",", "aug_scores", ",", "img_metas", ")", "\n", "merged_factors", "=", "torch", ".", "cat", "(", "aug_factors", ",", "dim", "=", "0", ")", "if", "aug_factors", "else", "None", "\n", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "\n", "merged_bboxes", ",", "\n", "merged_scores", ",", "\n", "self", ".", "test_cfg", ".", "score_thr", ",", "\n", "self", ".", "test_cfg", ".", "nms", ",", "\n", "self", ".", "test_cfg", ".", "max_per_img", ",", "\n", "score_factors", "=", "merged_factors", ")", "\n", "\n", "if", "rescale", ":", "\n", "            ", "_det_bboxes", "=", "det_bboxes", "\n", "", "else", ":", "\n", "            ", "_det_bboxes", "=", "det_bboxes", ".", "clone", "(", ")", "\n", "_det_bboxes", "[", ":", ",", ":", "4", "]", "*=", "det_bboxes", ".", "new_tensor", "(", "\n", "img_metas", "[", "0", "]", "[", "0", "]", "[", "'scale_factor'", "]", ")", "\n", "", "bbox_results", "=", "bbox2result", "(", "_det_bboxes", ",", "det_labels", ",", "self", ".", "num_classes", ")", "\n", "\n", "return", "bbox_results", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.aug_test_vote": [[336, 404], ["inspect.signature", "inspect.signature", "enumerate", "bvr_head.BVRHead.merge_aug_vote_results", "range", "mmdet.core.bbox2result", "zip", "bvr_head.BVRHead.bbox_head", "bvr_head.BVRHead.remove_boxes", "aug_bboxes.append", "aug_labels.append", "merged_bboxes[].view", "bvr_head.BVRHead.bboxes_vote", "len", "torch.cat", "torch.cat", "merged_bboxes.new_zeros", "merged_bboxes.new_zeros", "torch.kthvalue", "torch.nonzero().squeeze", "merged_bboxes.new_zeros.clone", "inspect.signature.parameters.values", "inspect.signature.parameters.values", "bvr_head.BVRHead.bbox_head.get_bboxes", "len", "merged_bboxes.new_zeros.append", "merged_bboxes.new_zeros.append", "cls_scores.cpu", "image_thresh.item", "torch.cat", "torch.full", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.merge_aug_vote_results", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.remove_boxes", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.bboxes_vote", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_bboxes"], ["", "def", "aug_test_vote", "(", "self", ",", "feats", ",", "img_metas", ",", "rescale", "=", "False", ")", ":", "\n", "\n", "# check with_nms argument", "\n", "        ", "gb_sig", "=", "signature", "(", "self", ".", "bbox_head", ".", "get_bboxes", ")", "\n", "gb_args", "=", "[", "p", ".", "name", "for", "p", "in", "gb_sig", ".", "parameters", ".", "values", "(", ")", "]", "\n", "gbs_sig", "=", "signature", "(", "self", ".", "bbox_head", ".", "_get_bboxes_single", ")", "\n", "gbs_args", "=", "[", "p", ".", "name", "for", "p", "in", "gbs_sig", ".", "parameters", ".", "values", "(", ")", "]", "\n", "assert", "(", "'with_nms'", "in", "gb_args", ")", "and", "(", "'with_nms'", "in", "gbs_args", ")", ",", "f'{self.__class__.__name__}'", "' does not support test-time augmentation'", "\n", "aug_bboxes", "=", "[", "]", "\n", "aug_labels", "=", "[", "]", "\n", "for", "i", ",", "(", "x", ",", "img_meta", ")", "in", "enumerate", "(", "zip", "(", "feats", ",", "img_metas", ")", ")", ":", "\n", "# only one image in the batch", "\n", "# TODO more flexible", "\n", "            ", "outs", "=", "self", ".", "bbox_head", "(", "x", ")", "\n", "bbox_inputs", "=", "outs", "+", "(", "img_meta", ",", "self", ".", "test_cfg", ",", "False", ",", "True", ")", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "bbox_head", ".", "get_bboxes", "(", "*", "bbox_inputs", ")", "[", "0", "]", "\n", "keeped", "=", "self", ".", "remove_boxes", "(", "det_bboxes", ",", "self", ".", "test_cfg", ".", "scale_ranges", "[", "i", "//", "2", "]", "[", "0", "]", ",", "self", ".", "test_cfg", ".", "scale_ranges", "[", "i", "//", "2", "]", "[", "1", "]", ")", "\n", "det_bboxes", ",", "det_labels", "=", "det_bboxes", "[", "keeped", ",", ":", "]", ",", "det_labels", "[", "keeped", "]", "\n", "aug_bboxes", ".", "append", "(", "det_bboxes", ")", "\n", "aug_labels", ".", "append", "(", "det_labels", ")", "\n", "\n", "# after merging, bboxes will be rescaled to the original image size", "\n", "", "merged_bboxes", ",", "merged_labels", "=", "self", ".", "merge_aug_vote_results", "(", "\n", "aug_bboxes", ",", "aug_labels", ",", "img_metas", ")", "\n", "\n", "det_bboxes", "=", "[", "]", "\n", "det_labels", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "80", ")", ":", "\n", "            ", "inds", "=", "(", "merged_labels", "==", "j", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "scores_j", "=", "merged_bboxes", "[", "inds", ",", "4", "]", "\n", "bboxes_j", "=", "merged_bboxes", "[", "inds", ",", ":", "4", "]", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "bboxes_j", ",", "scores_j", "=", "self", ".", "bboxes_vote", "(", "bboxes_j", ",", "scores_j", ")", "\n", "\n", "if", "len", "(", "bboxes_j", ")", ">", "0", ":", "\n", "                ", "det_bboxes", ".", "append", "(", "torch", ".", "cat", "(", "[", "bboxes_j", ",", "scores_j", "[", ":", ",", "None", "]", "]", ",", "dim", "=", "1", ")", ")", "\n", "det_labels", ".", "append", "(", "torch", ".", "full", "(", "(", "bboxes_j", ".", "shape", "[", "0", "]", ",", ")", ",", "j", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "scores_j", ".", "device", ")", ")", "\n", "\n", "#select", "\n", "", "", "if", "len", "(", "det_bboxes", ")", ">", "0", ":", "\n", "            ", "det_bboxes", "=", "torch", ".", "cat", "(", "det_bboxes", ",", "dim", "=", "0", ")", "\n", "det_labels", "=", "torch", ".", "cat", "(", "det_labels", ")", "\n", "", "else", ":", "\n", "            ", "det_bboxes", "=", "merged_bboxes", ".", "new_zeros", "(", "(", "0", ",", "5", ")", ")", "\n", "det_labels", "=", "merged_bboxes", ".", "new_zeros", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "if", "det_bboxes", ".", "shape", "[", "0", "]", ">", "1000", ">", "0", ":", "\n", "            ", "cls_scores", "=", "det_bboxes", "[", ":", ",", "4", "]", "\n", "image_thresh", ",", "_", "=", "torch", ".", "kthvalue", "(", "\n", "cls_scores", ".", "cpu", "(", ")", ",", "\n", "det_bboxes", ".", "shape", "[", "0", "]", "-", "1000", "+", "1", "\n", ")", "\n", "keep", "=", "cls_scores", ">=", "image_thresh", ".", "item", "(", ")", "\n", "keep", "=", "torch", ".", "nonzero", "(", "keep", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", "1", ")", "\n", "det_bboxes", "=", "det_bboxes", "[", "keep", "]", "\n", "det_labels", "=", "det_labels", "[", "keep", "]", "\n", "\n", "", "if", "rescale", ":", "\n", "            ", "_det_bboxes", "=", "det_bboxes", "\n", "", "else", ":", "\n", "            ", "_det_bboxes", "=", "det_bboxes", ".", "clone", "(", ")", "\n", "_det_bboxes", "[", ":", ",", ":", "4", "]", "*=", "img_metas", "[", "0", "]", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "", "bbox_results", "=", "bbox2result", "(", "_det_bboxes", ",", "det_labels", ",", "\n", "self", ".", "bbox_head", ".", "num_classes", ")", "\n", "# pdb.set_trace()", "\n", "return", "bbox_results", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.merge_aug_vote_results": [[405, 431], ["zip", "torch.cat", "mmdet.core.bbox_mapping_back", "recovered_bboxes.append", "torch.cat", "bboxes.new_zeros.new_zeros.new_zeros", "bboxes.new_zeros.new_zeros.size", "bboxes.new_zeros.new_zeros.size"], "methods", ["None"], ["", "def", "merge_aug_vote_results", "(", "self", ",", "aug_bboxes", ",", "aug_labels", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Merge augmented detection bboxes and scores.\n        Args:\n            aug_bboxes (list[Tensor]): shape (n, 4*#class)\n            aug_scores (list[Tensor] or None): shape (n, #class)\n            img_shapes (list[Tensor]): shape (3, ).\n            rcnn_test_cfg (dict): rcnn test config.\n        Returns:\n            tuple: (bboxes, scores)\n        \"\"\"", "\n", "recovered_bboxes", "=", "[", "]", "\n", "for", "bboxes", ",", "img_info", "in", "zip", "(", "aug_bboxes", ",", "img_metas", ")", ":", "\n", "            ", "img_shape", "=", "img_info", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_info", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_info", "[", "0", "]", "[", "'flip'", "]", "\n", "bboxes", "[", ":", ",", ":", "4", "]", "=", "bbox_mapping_back", "(", "bboxes", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "scale_factor", ",", "flip", ")", "\n", "if", "bboxes", ".", "size", "(", ")", "[", "1", "]", "!=", "5", ":", "\n", "                ", "assert", "bboxes", ".", "size", "(", ")", "[", "0", "]", "==", "0", "\n", "bboxes", "=", "bboxes", ".", "new_zeros", "(", "0", ",", "5", ")", "\n", "", "recovered_bboxes", ".", "append", "(", "bboxes", ")", "\n", "", "bboxes", "=", "torch", ".", "cat", "(", "recovered_bboxes", ",", "dim", "=", "0", ")", "\n", "if", "aug_labels", "is", "None", ":", "\n", "            ", "return", "bboxes", "\n", "", "else", ":", "\n", "            ", "labels", "=", "torch", ".", "cat", "(", "aug_labels", ",", "dim", "=", "0", ")", "\n", "return", "bboxes", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.remove_boxes": [[432, 437], ["torch.nonzero().squeeze", "torch.nonzero"], "methods", ["None"], ["", "", "def", "remove_boxes", "(", "self", ",", "boxes", ",", "min_scale", ",", "max_scale", ")", ":", "\n", "        ", "areas", "=", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", ")", "*", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", ")", "\n", "keep", "=", "torch", ".", "nonzero", "(", "(", "areas", ">=", "min_scale", "*", "min_scale", ")", "&", "(", "areas", "<=", "max_scale", "*", "max_scale", ")", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.bvr_head.BVRHead.bboxes_vote": [[438, 503], ["torch.from_numpy().float().cuda.cpu().numpy", "torch.from_numpy().float().cuda.cpu().numpy().reshape", "numpy.concatenate", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "det[].ravel().argsort", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.delete", "dets[].ravel().argsort", "torch.from_numpy().float().cuda.cpu", "torch.from_numpy().float().cuda.cpu().numpy", "numpy.zeros", "numpy.zeros", "numpy.where", "det_accu.copy", "numpy.max", "numpy.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "det[].ravel", "numpy.row_stack", "numpy.where", "numpy.tile", "numpy.sum", "numpy.sum", "numpy.row_stack", "numpy.row_stack", "dets[].ravel", "torch.from_numpy().float().cuda.cpu", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "bboxes_vote", "(", "self", ",", "boxes", ",", "scores", ",", "vote_thresh", "=", "0.66", ")", ":", "\n", "        ", "eps", "=", "1e-6", "\n", "\n", "boxes", "=", "boxes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scores", "=", "scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "det", "=", "np", ".", "concatenate", "(", "(", "boxes", ",", "scores", ")", ",", "axis", "=", "1", ")", "\n", "if", "det", ".", "shape", "[", "0", "]", "<=", "1", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "(", "0", ",", "5", ")", ")", ",", "np", ".", "zeros", "(", "(", "0", ",", "1", ")", ")", "\n", "", "order", "=", "det", "[", ":", ",", "4", "]", ".", "ravel", "(", ")", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "det", "=", "det", "[", "order", ",", ":", "]", "\n", "dets", "=", "[", "]", "\n", "while", "det", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "# IOU", "\n", "            ", "area", "=", "(", "det", "[", ":", ",", "2", "]", "-", "det", "[", ":", ",", "0", "]", ")", "*", "(", "det", "[", ":", ",", "3", "]", "-", "det", "[", ":", ",", "1", "]", ")", "\n", "xx1", "=", "np", ".", "maximum", "(", "det", "[", "0", ",", "0", "]", ",", "det", "[", ":", ",", "0", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "det", "[", "0", ",", "1", "]", ",", "det", "[", ":", ",", "1", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "det", "[", "0", ",", "2", "]", ",", "det", "[", ":", ",", "2", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "det", "[", "0", ",", "3", "]", ",", "det", "[", ":", ",", "3", "]", ")", "\n", "w", "=", "np", ".", "maximum", "(", "0.0", ",", "xx2", "-", "xx1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0.0", ",", "yy2", "-", "yy1", ")", "\n", "inter", "=", "w", "*", "h", "\n", "union", "=", "area", "[", "0", "]", "+", "area", "[", ":", "]", "-", "inter", "\n", "union", "=", "np", ".", "maximum", "(", "union", ",", "eps", ")", "\n", "o", "=", "inter", "/", "union", "\n", "o", "[", "0", "]", "=", "1", "\n", "\n", "# get needed merge det and delete these  det", "\n", "merge_index", "=", "np", ".", "where", "(", "o", ">=", "vote_thresh", ")", "[", "0", "]", "\n", "det_accu", "=", "det", "[", "merge_index", ",", ":", "]", "\n", "det_accu_iou", "=", "o", "[", "merge_index", "]", "\n", "det", "=", "np", ".", "delete", "(", "det", ",", "merge_index", ",", "0", ")", "\n", "\n", "if", "merge_index", ".", "shape", "[", "0", "]", "<=", "1", ":", "\n", "                ", "try", ":", "\n", "                    ", "dets", "=", "np", ".", "row_stack", "(", "(", "dets", ",", "det_accu", ")", ")", "\n", "", "except", ":", "\n", "                    ", "dets", "=", "det_accu", "\n", "", "continue", "\n", "", "else", ":", "\n", "                ", "soft_det_accu", "=", "det_accu", ".", "copy", "(", ")", "\n", "soft_det_accu", "[", ":", ",", "4", "]", "=", "soft_det_accu", "[", ":", ",", "4", "]", "*", "(", "1", "-", "det_accu_iou", ")", "\n", "soft_index", "=", "np", ".", "where", "(", "soft_det_accu", "[", ":", ",", "4", "]", ">=", "0.05", ")", "[", "0", "]", "\n", "soft_det_accu", "=", "soft_det_accu", "[", "soft_index", ",", ":", "]", "\n", "\n", "det_accu", "[", ":", ",", "0", ":", "4", "]", "=", "det_accu", "[", ":", ",", "0", ":", "4", "]", "*", "np", ".", "tile", "(", "det_accu", "[", ":", ",", "-", "1", ":", "]", ",", "(", "1", ",", "4", ")", ")", "\n", "max_score", "=", "np", ".", "max", "(", "det_accu", "[", ":", ",", "4", "]", ")", "\n", "det_accu_sum", "=", "np", ".", "zeros", "(", "(", "1", ",", "5", ")", ")", "\n", "det_accu_sum", "[", ":", ",", "0", ":", "4", "]", "=", "np", ".", "sum", "(", "det_accu", "[", ":", ",", "0", ":", "4", "]", ",", "axis", "=", "0", ")", "/", "np", ".", "sum", "(", "det_accu", "[", ":", ",", "-", "1", ":", "]", ")", "\n", "det_accu_sum", "[", ":", ",", "4", "]", "=", "max_score", "\n", "\n", "if", "soft_det_accu", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                    ", "det_accu_sum", "=", "np", ".", "row_stack", "(", "(", "det_accu_sum", ",", "soft_det_accu", ")", ")", "\n", "\n", "", "try", ":", "\n", "                    ", "dets", "=", "np", ".", "row_stack", "(", "(", "dets", ",", "det_accu_sum", ")", ")", "\n", "", "except", ":", "\n", "                    ", "dets", "=", "det_accu_sum", "\n", "\n", "", "", "", "order", "=", "dets", "[", ":", ",", "4", "]", ".", "ravel", "(", ")", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "dets", "=", "dets", "[", "order", ",", ":", "]", "\n", "\n", "boxes", "=", "torch", ".", "from_numpy", "(", "dets", "[", ":", ",", ":", "4", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "scores", "=", "torch", ".", "from_numpy", "(", "dets", "[", ":", ",", "4", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "boxes", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.__init__": [[32, 76], ["anchor_free_head.AnchorFreeHead.__init__", "builder.build_loss", "dict", "mmdet.core.build_assigner", "dict", "mmdet.core.build_sampler"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", ":", "int", ",", "\n", "in_channels", ":", "int", ",", "\n", "shared_stacked_convs", ":", "int", "=", "0", ",", "\n", "logits_convs", ":", "int", "=", "0", ",", "\n", "head_types", "=", "None", ",", "\n", "corner_pooling", ":", "bool", "=", "False", ",", "\n", "loss_offset", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"Predict keypoints of object\n\n        Args:\n            num_classes (int): category numbers of objects in dataset.\n            in_channels (int): Dimension of input features.\n            shared_stacked_convs (int): Number of shared conv layers for all\n                keypoint heads.\n            logits_convs (int): Number of conv layers for each logits.\n            head_types (List[str], optional): Number of head. Each head aims to\n                predict different type of keypoints. Defaults to\n                [\"top_left_corner\", \"bottom_right_corner\", \"center\"].\n            corner_pooling (bool): Whether to use corner pooling for corner\n                keypoint prediction. Defaults to False.\n            loss_offset (dict, optional): Loss configuration for keypoint offset\n                prediction. Defaults to dict(type='SmoothL1Loss',\n                loss_weight=1.0/9.0).\n            **kwargs:\n        \"\"\"", "\n", "if", "loss_offset", "is", "None", ":", "\n", "            ", "loss_offset", "=", "dict", "(", "type", "=", "\"SmoothL1Loss\"", ",", "loss_weight", "=", "1.0", "/", "9.0", ")", "\n", "", "if", "head_types", "is", "None", ":", "\n", "            ", "head_types", "=", "[", "\"top_left_corner\"", ",", "\"bottom_right_corner\"", ",", "\"center\"", "]", "\n", "\n", "", "self", ".", "corner_pooling", "=", "corner_pooling", "\n", "self", ".", "shared_stacked_convs", "=", "shared_stacked_convs", "\n", "self", ".", "logits_convs", "=", "logits_convs", "\n", "self", ".", "head_types", "=", "head_types", "\n", "super", "(", "KeypointHead", ",", "self", ")", ".", "__init__", "(", "num_classes", ",", "in_channels", ",", "**", "kwargs", ")", "\n", "self", ".", "loss_offset", "=", "build_loss", "(", "loss_offset", ")", "\n", "if", "self", ".", "train_cfg", "is", "not", "None", ":", "\n", "            ", "self", ".", "point_assigner", "=", "build_assigner", "(", "self", ".", "train_cfg", ".", "assigner", ")", "\n", "sampler_cfg", "=", "dict", "(", "type", "=", "\"PseudoSampler\"", ")", "\n", "self", ".", "sampler", "=", "build_sampler", "(", "sampler_cfg", ",", "context", "=", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead._init_layers": [[77, 136], ["keypoint_head.KeypointHead._init_layer_list", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "keypoint_head.KeypointHead._init_layer_list", "keypoint_head.KeypointHead.keypoint_layers.update", "keypoint_head.KeypointHead._init_layer_list", "keypoint_head.KeypointHead.append", "keypoint_head.KeypointHead.keypoint_cls_heads.update", "keypoint_head.KeypointHead._init_layer_list", "keypoint_head.KeypointHead.append", "keypoint_head.KeypointHead.keypoint_offset_heads.update", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "keypoint_head.KeypointHead.append", "keypoint_head.KeypointHead.append", "mmdet.ops.corner_pool.TLPool", "mmdet.ops.corner_pool.BRPool"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead._init_layer_list", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead._init_layer_list", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead._init_layer_list", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead._init_layer_list"], ["", "", "def", "_init_layers", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Construct the model.\"\"\"", "\n", "# construct shared layers", "\n", "self", ".", "shared_layers", "=", "self", ".", "_init_layer_list", "(", "\n", "self", ".", "in_channels", ",", "self", ".", "shared_stacked_convs", "\n", ")", "\n", "# construct seperated heads", "\n", "self", ".", "keypoint_layers", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "keypoint_cls_heads", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "keypoint_offset_heads", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "\n", "in_channels", "=", "(", "\n", "self", ".", "in_channels", "if", "self", ".", "shared_stacked_convs", "==", "0", "else", "self", ".", "feat_channels", "\n", ")", "\n", "\n", "for", "head_type", "in", "self", ".", "head_types", ":", "\n", "            ", "keypoint_layer", "=", "self", ".", "_init_layer_list", "(", "in_channels", ",", "self", ".", "stacked_convs", ")", "\n", "if", "\"corner\"", "in", "head_type", "and", "self", ".", "corner_pooling", ":", "\n", "                ", "if", "\"top_left\"", "in", "head_type", ":", "\n", "                    ", "keypoint_layer", ".", "append", "(", "\n", "TLPool", "(", "\n", "self", ".", "feat_channels", ",", "\n", "self", ".", "conv_cfg", ",", "\n", "self", ".", "norm_cfg", ",", "\n", "3", ",", "\n", "1", ",", "\n", "corner_dim", "=", "64", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "keypoint_layer", ".", "append", "(", "\n", "BRPool", "(", "\n", "self", ".", "feat_channels", ",", "\n", "self", ".", "conv_cfg", ",", "\n", "self", ".", "norm_cfg", ",", "\n", "3", ",", "\n", "1", ",", "\n", "corner_dim", "=", "64", ",", "\n", ")", "\n", ")", "\n", "", "", "self", ".", "keypoint_layers", ".", "update", "(", "{", "head_type", ":", "keypoint_layer", "}", ")", "\n", "\n", "# head", "\n", "keypoint_cls_head", "=", "self", ".", "_init_layer_list", "(", "\n", "self", ".", "feat_channels", ",", "self", ".", "logits_convs", "\n", ")", "\n", "keypoint_cls_head", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "self", ".", "num_classes", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "keypoint_cls_heads", ".", "update", "(", "{", "head_type", ":", "keypoint_cls_head", "}", ")", "\n", "\n", "keypoint_offset_head", "=", "self", ".", "_init_layer_list", "(", "\n", "self", ".", "feat_channels", ",", "self", ".", "logits_convs", "\n", ")", "\n", "\n", "keypoint_offset_head", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "feat_channels", ",", "2", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "keypoint_offset_heads", ".", "update", "(", "{", "head_type", ":", "keypoint_offset_head", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead._init_layer_list": [[137, 158], ["torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.ModuleList.append", "mmcv.cnn.ConvModule"], "methods", ["None"], ["", "", "def", "_init_layer_list", "(", "self", ",", "in_channels", ":", "int", ",", "num_convs", ":", "int", ")", "->", "nn", ".", "ModuleList", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_channels (int):\n            num_convs (int):\n        \"\"\"", "\n", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_convs", ")", ":", "\n", "            ", "chn", "=", "in_channels", "if", "i", "==", "0", "else", "self", ".", "feat_channels", "\n", "layers", ".", "append", "(", "\n", "ConvModule", "(", "\n", "chn", ",", "\n", "self", ".", "feat_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", ")", "\n", ")", "\n", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.init_weights": [[159, 191], ["keypoint_head.KeypointHead.keypoint_layers.items", "mmcv.cnn.bias_init_with_prob", "keypoint_head.KeypointHead.keypoint_cls_heads.items", "keypoint_head.KeypointHead.keypoint_offset_heads.items", "mmcv.cnn.normal_init", "enumerate", "enumerate", "isinstance", "mmcv.cnn.normal_init", "m.apply", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "mmcv.cnn.normal_init", "isinstance", "len", "len", "mmcv.cnn.normal_init", "isinstance", "mmcv.cnn.normal_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "\n", "        ", "for", "layer", "in", "self", ".", "shared_layers", ":", "\n", "            ", "normal_init", "(", "layer", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "\n", "", "for", "_", ",", "layer", "in", "self", ".", "keypoint_layers", ".", "items", "(", ")", ":", "\n", "            ", "for", "m", "in", "layer", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "ConvModule", ")", ":", "\n", "                    ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "else", ":", "\n", "\n", "                    ", "def", "_init", "(", "m", ")", ":", "\n", "                        ", "if", "isinstance", "(", "m", ",", "ConvModule", ")", ":", "\n", "                            ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "ConvTranspose2d", ")", ")", ":", "\n", "                            ", "normal_init", "(", "m", ",", "std", "=", "0.01", ")", "\n", "\n", "", "", "m", ".", "apply", "(", "_init", ")", "\n", "", "", "", "bias_cls", "=", "bias_init_with_prob", "(", "0.01", ")", "\n", "for", "_", ",", "head", "in", "self", ".", "keypoint_cls_heads", ".", "items", "(", ")", ":", "\n", "            ", "for", "i", ",", "m", "in", "enumerate", "(", "head", ")", ":", "\n", "                ", "if", "i", "!=", "len", "(", "head", ")", "-", "1", ":", "\n", "                    ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "else", ":", "\n", "                    ", "normal_init", "(", "m", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "\n", "", "", "", "for", "_", ",", "head", "in", "self", ".", "keypoint_offset_heads", ".", "items", "(", ")", ":", "\n", "            ", "for", "i", ",", "m", "in", "enumerate", "(", "head", ")", ":", "\n", "                ", "if", "i", "!=", "len", "(", "head", ")", "-", "1", ":", "\n", "                    ", "normal_init", "(", "m", ".", "conv", ",", "std", "=", "0.01", ")", "\n", "", "else", ":", "\n", "                    ", "normal_init", "(", "m", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.forward": [[192, 215], ["mmdet.core.multi_apply", "isinstance", "len", "len", "zip", "zip"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "\n", "self", ",", "feats", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "choices", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", "=", "None", "\n", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "Dict", "[", "str", ",", "List", "[", "torch", ".", "Tensor", "]", "]", "]", ":", "\n", "        ", "\"\"\"Predict the keypoint and return category and offset.\n\n        Args:\n            feats (List[torch.Tensor]): feature map lists. Each is [N,C,Hi,Wi].\n            choices (Union[str,List[str]], optional): Select which head to use.\n\n        Returns:\n            Tuple[Dict[str,torch.Tensor],Dict[str,torch.Tensor]]: [description]\n        \"\"\"", "\n", "if", "choices", "is", "None", ":", "\n", "            ", "choices", "=", "self", ".", "head_types", "\n", "", "elif", "isinstance", "(", "choices", ",", "str", ")", ":", "\n", "            ", "choices", "=", "[", "choices", "]", "\n", "", "keypoint_pred", "=", "multi_apply", "(", "self", ".", "forward_single", ",", "feats", ",", "choices", "=", "choices", ")", "\n", "\n", "keypoint_scores", "=", "keypoint_pred", "[", ":", "len", "(", "choices", ")", "]", "\n", "keypoint_offsets", "=", "keypoint_pred", "[", "len", "(", "choices", ")", ":", "]", "\n", "\n", "return", "{", "ch", ":", "scores", "for", "ch", ",", "scores", "in", "zip", "(", "choices", ",", "keypoint_scores", ")", "}", ",", "{", "\n", "ch", ":", "offsets", "for", "ch", ",", "offsets", "in", "zip", "(", "choices", ",", "keypoint_offsets", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.forward_single": [[217, 249], ["layer", "keypoint_clses.append", "keypoint_offsets.append", "tuple", "tuple", "layer", "layer", "layer"], "methods", ["None"], ["", "def", "forward_single", "(", "\n", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "choices", ":", "List", "[", "str", "]", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            x (torch.Tensor): [N,C,H,W]. Input Features.\n            choices (List[str]): names of head to use.\n        Returns:\n            Tuple[torch.Tensor]: head_0_score,...,head_`len(choice)`_score,head_0_offset,...head_`len(choice)`_offset\n        \"\"\"", "\n", "feat", "=", "x", "\n", "for", "layer", "in", "self", ".", "shared_layers", ":", "\n", "            ", "feat", "=", "layer", "(", "feat", ")", "\n", "\n", "", "keypoint_offsets", "=", "[", "]", "\n", "keypoint_clses", "=", "[", "]", "\n", "\n", "for", "head_type", "in", "choices", ":", "\n", "            ", "keypoint_feat", "=", "feat", "\n", "for", "layer", "in", "self", ".", "keypoint_layers", "[", "head_type", "]", ":", "\n", "                ", "keypoint_feat", "=", "layer", "(", "keypoint_feat", ")", "\n", "\n", "", "offset_feat", "=", "cls_feat", "=", "keypoint_feat", "\n", "for", "layer", "in", "self", ".", "keypoint_cls_heads", "[", "head_type", "]", ":", "\n", "                ", "cls_feat", "=", "layer", "(", "cls_feat", ")", "\n", "", "for", "layer", "in", "self", ".", "keypoint_offset_heads", "[", "head_type", "]", ":", "\n", "                ", "offset_feat", "=", "layer", "(", "offset_feat", ")", "\n", "\n", "", "keypoint_clses", ".", "append", "(", "cls_feat", ")", "\n", "keypoint_offsets", ".", "append", "(", "offset_feat", ")", "\n", "\n", "", "return", "tuple", "(", "keypoint_clses", ")", "+", "tuple", "(", "keypoint_offsets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead._get_targets_single": [[250, 280], ["assigner.assign"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.assign"], ["", "def", "_get_targets_single", "(", "\n", "self", ",", "\n", "gt_points", ":", "torch", ".", "Tensor", ",", "\n", "gt_bboxes", ":", "torch", ".", "Tensor", ",", "\n", "gt_labels", ":", "torch", ".", "Tensor", ",", "\n", "points", ":", "torch", ".", "Tensor", ",", "\n", "num_points", ":", "List", "[", "int", "]", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Compute targets for single image.\n\n        Args:\n            gt_points (torch.Tensor): Ground truth points for single image with\n                shape (num_gts, 2) in [x, y] format.\n            gt_bboxes (torch.Tensor): Ground truth bboxes of single image, each\n                has shape (num_gt, 4).\n            gt_labels (torch.Tensor): Ground truth labels of single image, each\n                has shape (num_gt,).\n            points (torch.Tensor): Points for all level with shape (num_points,\n                3) in [x,y,stride] format.\n            num_points (List[int]): Points num for each level.\n\n        Returns:\n            Tuple[torch.Tensor, torch.Tensor]\n        \"\"\"", "\n", "assigner", "=", "self", ".", "point_assigner", "\n", "offset_target", ",", "score_target", ",", "pos_mask", "=", "assigner", ".", "assign", "(", "\n", "points", ",", "num_points", ",", "gt_points", ",", "gt_bboxes", ",", "gt_labels", ",", "self", ".", "num_classes", "\n", ")", "\n", "\n", "return", "score_target", ",", "offset_target", ",", "pos_mask", "[", ":", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_targets": [[281, 321], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmdet.core.multi_apply", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "point.size"], "methods", ["None"], ["", "def", "get_targets", "(", "\n", "self", ",", "\n", "points", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "gt_points_list", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "gt_bboxes_list", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "gt_labels_list", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Compute regression, classification and centerss targets for points in\n        multiple images.\n\n        Args:\n            points (List[torch.Tensor]): Points for each level with shape\n                (num_points, 3) in [x,y,stride] format.\n            gt_points_list (List[torch.Tensor]): Ground truth points for each\n                image with shape (num_gts, 2) in [x, y] format.\n            gt_bboxes_list (List[torch.Tensor]): Ground truth bboxes of each\n                image, each has shape (num_gt, 4).\n            gt_labels_list (List[torch.Tensor]): Ground truth labels of each\n                box, each has shape (num_gt,).\n\n        Returns:\n            Tuple[torch.Tensor,torch.Tensor]: score targets and offset targets\n            and positive_mask for all images, each has shape [batch, num_points,\n            channel].\n        \"\"\"", "\n", "num_points", "=", "[", "point", ".", "size", "(", ")", "[", "0", "]", "for", "point", "in", "points", "]", "\n", "points", "=", "torch", ".", "cat", "(", "points", ",", "dim", "=", "0", ")", "\n", "score_target_list", ",", "offset_target_list", ",", "pos_mask_list", "=", "multi_apply", "(", "\n", "self", ".", "_get_targets_single", ",", "\n", "gt_points_list", ",", "\n", "gt_bboxes_list", ",", "\n", "gt_labels_list", ",", "\n", "points", "=", "points", ",", "\n", "num_points", "=", "num_points", ",", "\n", ")", "\n", "\n", "return", "(", "\n", "torch", ".", "stack", "(", "score_target_list", ")", ",", "\n", "torch", ".", "stack", "(", "offset_target_list", ")", ",", "\n", "torch", ".", "stack", "(", "pos_mask_list", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.loss": [[323, 382], ["mmcv.runner.force_fp32", "keypoint_head.KeypointHead.get_points", "_flatten_concat().permute", "_flatten_concat().permute", "keypoint_head.KeypointHead.get_targets", "keypoint_head.reduce_mean", "keypoint_head.KeypointHead.loss_cls", "keypoint_head.KeypointHead.loss_offset", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "_flatten_concat().permute.sigmoid", "score.size", "keypoint_head._flatten_concat", "keypoint_head._flatten_concat", "pos_masks.expand_as"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_points", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_targets", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.reduce_mean", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._flatten_concat", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._flatten_concat"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "\"keypoint_scores\"", ",", "\"keypoint_offsets\"", ")", ")", "\n", "def", "loss", "(", "\n", "self", ",", "\n", "keypoint_scores", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "keypoint_offsets", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "keypoint_types", ":", "List", "[", "str", "]", ",", "\n", "gt_points", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "gt_bboxes", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "gt_labels", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "img_metas", ":", "List", "[", "dict", "]", ",", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Compute loss of single head. Note: For multiple head, we propose to\n        concatenate the tensor along batch dimension to speed up this process.\n\n        Args:\n            keypoint_scores (List[torch.Tensor]): keypoint scores for each level\n                for each head.\n            keypoint_offsets (List[torch.Tensor]): keypoint offsets for each\n                level for each head.\n            keypoint_types: List[str]: The types of keypoint heads.\n            gt_points (List[torch.Tensor]): Ground truth points for each image\n                with shape (num_gts, 2) in [x, y] format.\n            gt_bboxes (List[torch.Tensor]): Ground truth bboxes for each image\n                with shape (num_gts, 4) in [tl_x, tl_y, br_x, br_y] format.\n            gt_labels (List[torch.Tensor]): class indices corresponding to each\n                box.\n            img_metas (List[dict]): Meta information of each image, e.g., image\n                size, scaling factor, etc.\n\n        Returns:\n            Dict[str,torch.Tensor]: Loss for head\n        \"\"\"", "\n", "featmap_sizes", "=", "[", "score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "score", "in", "keypoint_scores", "]", "\n", "\n", "points", "=", "self", ".", "get_points", "(", "featmap_sizes", ",", "gt_points", "[", "0", "]", ".", "dtype", ",", "gt_points", "[", "0", "]", ".", "device", ")", "\n", "\n", "keypoint_scores", "=", "_flatten_concat", "(", "keypoint_scores", ")", ".", "permute", "(", "\n", "0", ",", "2", ",", "1", "\n", ")", "# [batch,num_points,num_classes]", "\n", "keypoint_offsets", "=", "_flatten_concat", "(", "keypoint_offsets", ")", ".", "permute", "(", "\n", "0", ",", "2", ",", "1", "\n", ")", "# [batch,num_points,2]", "\n", "\n", "score_targets", ",", "offset_targets", ",", "pos_masks", "=", "self", ".", "get_targets", "(", "\n", "points", ",", "gt_points", ",", "gt_bboxes", ",", "gt_labels", "\n", ")", "\n", "\n", "avg_factor", "=", "reduce_mean", "(", "torch", ".", "sum", "(", "pos_masks", ")", ")", "\n", "# TODO: Maybe positive samples and negative samples shoud have different avg factors.", "\n", "loss_cls", "=", "self", ".", "loss_cls", "(", "\n", "keypoint_scores", ".", "sigmoid", "(", ")", ",", "score_targets", ",", "avg_factor", "=", "avg_factor", "\n", ")", "\n", "loss_offset", "=", "self", ".", "loss_offset", "(", "\n", "keypoint_offsets", ",", "\n", "offset_targets", ",", "\n", "weight", "=", "pos_masks", ".", "expand_as", "(", "keypoint_offsets", ")", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", ")", "\n", "return", "{", "\"loss_point_cls\"", ":", "loss_cls", ",", "\"loss_point_offset\"", ":", "loss_offset", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.loss_multihead": [[383, 425], ["keypoint_head._concat", "keypoint_head._concat", "keypoint_head.KeypointHead._box2point", "keypoint_head.KeypointHead.loss", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._concat", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._concat", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead._box2point", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.loss"], ["", "def", "loss_multihead", "(", "\n", "self", ",", "\n", "keypoint_scores", ":", "Dict", "[", "str", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "\n", "keypoint_offsets", ":", "Dict", "[", "str", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "\n", "gt_bboxes", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "gt_labels", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "img_metas", ":", "List", "[", "dict", "]", ",", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Compute loss of multiple heads. :param keypoint_scores: keypoint\n        scores for each level for each head. :type keypoint_scores: Dict[str,\n        List[torch.Tensor]] :param keypoint_offsets: keypoint offsets for each\n        level for each head. :type keypoint_offsets: Dict[str,\n        List[torch.Tensor]] :param gt_bboxes: Ground truth bboxes for each image\n        with\n\n            shape (num_gts, 4) in [tl_x, tl_y, br_x, br_y] format.\n\n        Args:\n            keypoint_scores:\n            keypoint_offsets:\n            gt_bboxes:\n            gt_labels (List[torch.Tensor]): class indices corresponding to each\n                box.\n            img_metas (List[dict]): Meta information of each image, e.g., image\n                size, scaling factor, etc.\n\n        Returns:\n            Dict[str,torch.Tensor]: Loss for head\n        \"\"\"", "\n", "# TODO: check the order of concated tensor", "\n", "names", ",", "keypoint_scores", "=", "_concat", "(", "keypoint_scores", ")", "\n", "_", ",", "keypoint_offsets", "=", "_concat", "(", "keypoint_offsets", ")", "\n", "gt_points", "=", "self", ".", "_box2point", "(", "names", ",", "gt_bboxes", ")", "# keypoint_type*batch*[num_gt,2]", "\n", "\n", "return", "self", ".", "loss", "(", "\n", "keypoint_scores", ",", "\n", "keypoint_offsets", ",", "\n", "names", ",", "\n", "gt_points", ",", "\n", "gt_bboxes", "*", "len", "(", "names", ")", ",", "\n", "gt_labels", "*", "len", "(", "names", ")", ",", "\n", "img_metas", "*", "len", "(", "names", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_keypoints_single": [[427, 482], ["keypoint_head.KeypointHead.get_keypoints_single._local_nms"], "methods", ["None"], ["", "def", "get_keypoints_single", "(", "\n", "self", ",", "\n", "keypoint_logits", ":", "torch", ".", "Tensor", ",", "\n", "keypoint_offsets", ":", "torch", ".", "Tensor", ",", "\n", "locations", ":", "torch", ".", "Tensor", ",", "\n", "stride", ":", "int", ",", "\n", "max_keypoint_num", ":", "int", "=", "20", ",", "\n", "keypoint_score_thr", ":", "float", "=", "0.1", ",", "\n", "block_grad", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Extract keypoints from a sinle heat map.\n\n        Args:\n            keypoint_logits (torch.Tensor): [N,C,H,W]\n            keypoint_offsets (torch.Tensor): [N,2,H,W]\n            locations (torch.Tensor): [H*W,3]\n            stride (int): Resolution of current feature map.\n            max_keypoint_num (int, optional): Maximum keypoints to extract. Defaults to 20.\n            keypoint_score_thr (float, optional): Keypoints which are below this threshold are ignored. Not used. Defaults to 0.1.\n            block_grad (bool, optional): Whether to block the gradient of the extraction process. Defaults to False.\n        \"\"\"", "\n", "\n", "def", "_local_nms", "(", "heatmap", ":", "torch", ".", "Tensor", ",", "kernel_size", ":", "int", "=", "3", ")", "->", "torch", ".", "Tensor", ":", "\n", "            ", "\"\"\"Find the local maximum points of a heatmap\n\n            Args:\n                heatmap (torch.Tensor): Shape is [N,C,H,W].\n                kernel_size (int): the size of kernel used i nms. Defaults to 3.\n\n            Returns:\n                torch.Tensor: heatmap with score only on local maximum points.\n            \"\"\"", "\n", "pad", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "\n", "hmax", "=", "F", ".", "max_pool2d", "(", "\n", "heatmap", ",", "(", "kernel_size", ",", "kernel_size", ")", ",", "stride", "=", "1", ",", "padding", "=", "pad", "\n", ")", "\n", "keep", "=", "(", "hmax", "==", "heatmap", ")", ".", "float", "(", ")", "\n", "return", "heatmap", "*", "keep", "\n", "\n", "", "keypoint_scores", "=", "_local_nms", "(", "keypoint_logits", ".", "sigmoid", "(", ")", ")", "\n", "topk_score", ",", "topk_inds", ",", "_", ",", "topk_ys", ",", "topk_xs", "=", "_topk", "(", "\n", "keypoint_scores", ",", "locations", ",", "max_keypoint_num", "\n", ")", "\n", "\n", "topk_offsets", "=", "_gather_feat", "(", "\n", "keypoint_offsets", ".", "reshape", "(", "keypoint_offsets", ".", "size", "(", "0", ")", ",", "2", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "\n", "topk_inds", ",", "\n", ")", "\n", "if", "block_grad", ":", "\n", "            ", "topk_offsets", "=", "topk_offsets", ".", "detach", "(", ")", "\n", "topk_score", "=", "topk_score", ".", "detach", "(", ")", "\n", "", "keypoint_pos_round", "=", "torch", ".", "stack", "(", "[", "topk_xs", ",", "topk_ys", "]", ",", "dim", "=", "-", "1", ")", "\n", "keypoint_pos", "=", "keypoint_pos_round", "+", "topk_offsets", "*", "stride", "\n", "return", "topk_score", ",", "keypoint_pos", ",", "topk_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_keypoints": [[483, 525], ["keypoint_head.KeypointHead.get_points", "mmdet.core.multi_apply", "hm.size"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_points"], ["", "def", "get_keypoints", "(", "\n", "self", ",", "\n", "keypoint_logits", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "keypoint_offsets", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "max_keypoint_num", ":", "int", "=", "20", ",", "\n", "keypoint_score_thr", ":", "float", "=", "0.1", ",", "\n", "block_grad", ":", "bool", "=", "False", ",", "\n", ")", "->", "Tuple", "[", "\n", "List", "[", "torch", ".", "Tensor", "]", ",", "List", "[", "torch", ".", "Tensor", "]", ",", "List", "[", "torch", ".", "Tensor", "]", ",", "List", "[", "torch", ".", "Tensor", "]", "\n", "]", ":", "\n", "        ", "\"\"\"Extract keypoints for single head. Note: For multiple head, we\n        propose to concatenate the tensor along batch dimension to speed up this\n        process. We do not implement this function for multiple heads as little\n        operation is needed for that purpose.\n        Args:\n            keypoint_scores (List[torch.Tensor]): keypointscores for each level.\n            keypoint_offsets (List[torch.Tensor]): keypoint offsets for each level.\n            keypoint_features (List[torch.Tensor]): featuremap to select features for each level.\n            max_keypoint_num (int): maximum number of selected keypoints. Defaults to 20.\n            keypoint_score_thr (float): keypoints with score below this terms are discarded.\n        Returns:\n            Tuple[List[torch.Tensor],List[torch.Tensor]]: Keypoint scores and positions for each level.\n                Each score tensor has shape [batch,max_keypoint_num]. Each\n                position tensor has shape [batch,max_keypoint_num,3] in which\n                the last dimension indicates [x,y,category].\n        \"\"\"", "\n", "featmap_sizes", "=", "[", "hm", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "hm", "in", "keypoint_logits", "]", "\n", "points", "=", "self", ".", "get_points", "(", "\n", "featmap_sizes", ",", "keypoint_logits", "[", "0", "]", ".", "dtype", ",", "keypoint_logits", "[", "0", "]", ".", "device", "\n", ")", "\n", "keypoint_scores", ",", "keypoint_pos", ",", "keypoint_inds", "=", "multi_apply", "(", "\n", "self", ".", "get_keypoints_single", ",", "\n", "keypoint_logits", ",", "\n", "keypoint_offsets", ",", "\n", "points", ",", "\n", "self", ".", "strides", ",", "\n", "max_keypoint_num", "=", "max_keypoint_num", ",", "\n", "keypoint_score_thr", "=", "keypoint_score_thr", ",", "\n", "block_grad", "=", "block_grad", ",", "\n", ")", "\n", "\n", "return", "keypoint_scores", ",", "keypoint_pos", ",", "keypoint_inds", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_keypoints_multihead": [[526, 567], ["keypoint_head._concat", "keypoint_head._concat", "keypoint_head.KeypointHead.get_keypoints", "keypoint_head._split", "keypoint_head._split", "keypoint_head._split"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._concat", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._concat", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_keypoints", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._split", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._split", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._split"], ["", "def", "get_keypoints_multihead", "(", "\n", "self", ",", "\n", "keypoint_logits", ":", "Dict", "[", "str", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "\n", "keypoint_offsets", ":", "Dict", "[", "str", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "\n", "keypoint_choices", ":", "List", "[", "str", "]", ",", "\n", "map_back", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "Tuple", "[", "\n", "List", "[", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "\n", "List", "[", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "\n", "List", "[", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "\n", "List", "[", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "\n", "]", ":", "\n", "        ", "\"\"\"Extract Keypoints and Return Absolute Position of all keypoints. See `get_keypoints`\n        Args:\n            keypoint_logits (Dict[str, List[torch.Tensor]]): [description]\n            keypoint_offsets (Dict[str, List[torch.Tensor]]): [description]\n            keypoint_choices (List[str]): [description]\n            map_back (bool, optional): [description]. Defaults to True.\n\n        Returns:\n            [type]: [description]\n        \"\"\"", "\n", "names", ",", "keypoint_logits", "=", "_concat", "(", "\n", "{", "ch", ":", "keypoint_logits", "[", "ch", "]", "for", "ch", "in", "keypoint_choices", "}", ",", "index", "=", "keypoint_choices", "\n", ")", "\n", "_", ",", "keypoint_offsets", "=", "_concat", "(", "\n", "{", "ch", ":", "keypoint_offsets", "[", "ch", "]", "for", "ch", "in", "keypoint_choices", "}", ",", "\n", "index", "=", "keypoint_choices", ",", "\n", ")", "\n", "\n", "keypoint_scores", ",", "keypoint_pos", ",", "keypoint_inds", ",", "locations", "=", "self", ".", "get_keypoints", "(", "\n", "keypoint_logits", ",", "keypoint_offsets", ",", "**", "kwargs", "\n", ")", "\n", "\n", "if", "map_back", ":", "\n", "            ", "keypoint_scores", "=", "_split", "(", "keypoint_scores", ",", "names", ")", "\n", "keypoint_pos", "=", "_split", "(", "keypoint_pos", ",", "names", ")", "\n", "keypoint_inds", "=", "_split", "(", "keypoint_inds", ",", "names", ")", "\n", "\n", "", "return", "keypoint_scores", ",", "keypoint_pos", ",", "keypoint_inds", ",", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_keypoint_features": [[568, 690], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "keypoint_head._gather_feat", "list", "featuremaps[].expand().reshape.reshape().permute", "keypoint_head._gather_feat", "keypoint_head._gather_feat", "len", "keypoint_head.KeypointHead.get_keypoint_features._feature_selection"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._gather_feat", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._gather_feat", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._gather_feat"], ["", "def", "get_keypoint_features", "(", "\n", "self", ",", "\n", "feature_sets", ",", "\n", "keypoint_scores", ",", "\n", "keypoint_positions", ",", "\n", "keypoint_inds", ",", "\n", "num_keypoint_head", "=", "1", ",", "\n", "selection_method", "=", "\"index\"", ",", "\n", "cross_level_topk", "=", "-", "1", ",", "\n", "cross_level_selection", "=", "False", ",", "\n", ")", ":", "\n", "# h,w -> w,h", "\n", "        ", "image_size", "=", "list", "(", "feature_sets", "[", "0", "]", ".", "size", "(", ")", ")", "[", "-", "2", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "image_size", "=", "[", "l", "*", "self", ".", "strides", "[", "0", "]", "for", "l", "in", "image_size", "]", "\n", "\n", "def", "_feature_selection", "(", "\n", "featuremaps", ":", "torch", ".", "Tensor", ",", "\n", "sample_positions", ":", "torch", ".", "Tensor", ",", "\n", "sample_inds", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", ")", ":", "\n", "            ", "\"\"\"\n\n            Args:\n                featuremaps (torch.Tensor): [N,C,H,W]\n                sample_positions (torch.Tensor): [N,K,2]\n                sample_inds (torch.Tensor): [N,K]\n            \"\"\"", "\n", "if", "selection_method", "==", "\"index\"", ":", "\n", "                ", "if", "sample_inds", "is", "None", ":", "\n", "                    ", "H", ",", "W", "=", "featuremaps", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "downsample_scale", "=", "torch", ".", "sqrt", "(", "\n", "(", "image_size", "[", "0", "]", "*", "image_size", "[", "1", "]", ")", "/", "(", "H", "*", "W", ")", "\n", ")", "\n", "sample_inds", "=", "(", "\n", "sample_positions", "[", ":", ",", "1", "]", "*", "W", "+", "sample_positions", "[", ":", ",", "0", "]", "\n", ")", "/", "downsample_scale", "\n", "sample_inds", "=", "torch", ".", "floor", "(", "sample_inds", ")", ".", "long", "(", ")", "\n", "\n", "", "featuremaps", "=", "featuremaps", ".", "reshape", "(", "*", "featuremaps", ".", "size", "(", ")", "[", ":", "2", "]", ",", "-", "1", ")", ".", "permute", "(", "\n", "0", ",", "2", ",", "1", "\n", ")", "\n", "if", "featuremaps", ".", "size", "(", "0", ")", "!=", "sample_inds", ".", "size", "(", "0", ")", ":", "\n", "                    ", "assert", "sample_inds", ".", "size", "(", "0", ")", "%", "featuremaps", ".", "size", "(", "0", ")", "==", "0", "\n", "featuremaps", "=", "(", "\n", "featuremaps", "[", "None", ",", "...", "]", "\n", ".", "expand", "(", "sample_inds", ".", "size", "(", "0", ")", "//", "featuremaps", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", ".", "reshape", "(", "-", "1", ",", "*", "featuremaps", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "\n", ")", "\n", "\n", "", "return", "_gather_feat", "(", "featuremaps", ",", "sample_inds", ")", "\n", "", "elif", "selection_method", "==", "\"interpolation\"", ":", "\n", "\n", "                ", "grid", "=", "(", "\n", "sample_positions", "\n", "*", "2.0", "\n", "/", "sample_positions", ".", "new_tensor", "(", "image_size", ")", ".", "reshape", "(", "1", ",", "1", ",", "2", ")", "\n", "-", "1.0", "\n", ")", "\n", "# assert grid.max()<=1", "\n", "if", "featuremaps", ".", "size", "(", "0", ")", "!=", "grid", ".", "size", "(", "0", ")", ":", "\n", "                    ", "assert", "grid", ".", "size", "(", "0", ")", "%", "featuremaps", ".", "size", "(", "0", ")", "==", "0", "\n", "featuremaps", "=", "(", "\n", "featuremaps", "[", "None", ",", "...", "]", "\n", ".", "expand", "(", "grid", ".", "size", "(", "0", ")", "//", "featuremaps", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", ".", "reshape", "(", "-", "1", ",", "*", "featuremaps", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", ")", "\n", "", "return", "(", "\n", "F", ".", "grid_sample", "(", "\n", "featuremaps", ",", "\n", "grid", ".", "unsqueeze", "(", "1", ")", ",", "\n", "align_corners", "=", "False", ",", "\n", "padding_mode", "=", "\"border\"", ",", "\n", ")", "\n", ".", "squeeze", "(", "2", ")", "\n", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "", "if", "cross_level_topk", ">", "0", ":", "\n", "# rerank across all level", "\n", "\n", "            ", "all_level_scores", ":", "torch", ".", "Tensor", "=", "torch", ".", "cat", "(", "keypoint_scores", ",", "dim", "=", "-", "1", ")", "\n", "# rank", "\n", "_", ",", "topk_inds", "=", "torch", ".", "topk", "(", "all_level_scores", ",", "k", "=", "cross_level_topk", ",", "dim", "=", "-", "1", ")", "\n", "all_level_positions", ":", "torch", ".", "Tensor", "=", "torch", ".", "cat", "(", "keypoint_positions", ",", "dim", "=", "1", ")", "\n", "\n", "topk_positions", "=", "_gather_feat", "(", "all_level_positions", ",", "topk_inds", ")", "\n", "if", "cross_level_selection", ":", "\n", "# select on each level", "\n", "                ", "keypoint_features", ":", "List", "[", "torch", ".", "Tensor", "]", "=", "[", "\n", "_feature_selection", "(", "\n", "feature_sets", "[", "i", "]", ",", "keypoint_positions", "[", "i", "]", ",", "keypoint_inds", "[", "i", "]", "\n", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "feature_sets", ")", ")", "\n", "]", "\n", "topk_features", "=", "_gather_feat", "(", "\n", "torch", ".", "cat", "(", "keypoint_features", ",", "dim", "=", "1", ")", ",", "topk_inds", "\n", ")", "\n", "keypoint_features", "=", "[", "topk_features", "]", "*", "len", "(", "keypoint_scores", ")", "\n", "\n", "", "else", ":", "\n", "                ", "keypoint_features", ":", "List", "[", "torch", ".", "Tensor", "]", "=", "[", "\n", "_feature_selection", "(", "feature_sets", "[", "i", "]", ",", "topk_positions", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "feature_sets", ")", ")", "\n", "]", "\n", "", "keypoint_positions", "=", "[", "topk_positions", "]", "*", "len", "(", "keypoint_scores", ")", "\n", "", "else", ":", "\n", "# select on each level", "\n", "            ", "keypoint_features", ":", "List", "[", "torch", ".", "Tensor", "]", "=", "[", "\n", "_feature_selection", "(", "\n", "feature_sets", "[", "i", "]", ",", "keypoint_positions", "[", "i", "]", ",", "keypoint_inds", "[", "i", "]", "\n", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "feature_sets", ")", ")", "\n", "]", "\n", "\n", "", "return", "[", "\n", "keypoint_feature", ".", "chunk", "(", "num_keypoint_head", ",", "dim", "=", "0", ")", "\n", "for", "keypoint_feature", "in", "keypoint_features", "\n", "]", ",", "[", "\n", "keypoint_position", ".", "chunk", "(", "num_keypoint_head", ",", "dim", "=", "0", ")", "\n", "for", "keypoint_position", "in", "keypoint_positions", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead._box2point": [[692, 721], ["points.extend", "points.extend", "points.extend", "range", "len", "range", "len", "range", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_box2point", "(", "\n", "point_types", ":", "List", "[", "str", "]", ",", "boxes", ":", "List", "[", "torch", ".", "Tensor", "]", "\n", ")", "->", "List", "[", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Extract keypoints from bboxes\n\n        Args:\n            point_types (List[str]): types for keypoint to extract.\n            boxes (List[torch.Tensor]): bboxes for each image with shape\n                (num_gts, 4) in [tl_x, tl_y, br_x, br_y] format.\n\n        Returns:\n            points (List[torch.Tensor]): points for each type and each image\n            with shape (num_gts,2) in [x,y] format.\n        \"\"\"", "\n", "points", "=", "[", "]", "\n", "for", "point_type", "in", "point_types", ":", "\n", "            ", "if", "point_type", "==", "\"top_left_corner\"", ":", "\n", "                ", "points", ".", "extend", "(", "[", "boxes", "[", "img_i", "]", "[", ":", ",", ":", "2", "]", "for", "img_i", "in", "range", "(", "len", "(", "boxes", ")", ")", "]", ")", "\n", "", "elif", "point_type", "==", "\"bottom_right_corner\"", ":", "\n", "                ", "points", ".", "extend", "(", "[", "boxes", "[", "img_i", "]", "[", ":", ",", "2", ":", "]", "for", "img_i", "in", "range", "(", "len", "(", "boxes", ")", ")", "]", ")", "\n", "", "elif", "point_type", "==", "\"center\"", ":", "\n", "                ", "points", ".", "extend", "(", "\n", "[", "\n", "boxes", "[", "img_i", "]", "[", ":", ",", ":", "2", "]", "*", "0.5", "+", "boxes", "[", "img_i", "]", "[", ":", ",", "2", ":", "]", "*", "0.5", "\n", "for", "img_i", "in", "range", "(", "len", "(", "boxes", ")", ")", "\n", "]", "\n", ")", "\n", "", "", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_points": [[722, 750], ["range", "len", "keypoint_head.KeypointHead._get_points_single", "mlvl_points.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x.new_full", "x.size"], "methods", ["None"], ["", "def", "get_points", "(", "\n", "self", ",", "\n", "featmap_sizes", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "dtype", ":", "torch", ".", "dtype", ",", "\n", "device", ":", "torch", ".", "device", ",", "\n", ")", "->", "List", "[", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Get points according to feature map sizes.\n\n        Args:\n            featmap_sizes (List[Tuple]): Multi-level feature map sizes.\n            dtype (torch.dtype): Type of points.\n            device (torch.device): Device of points.\n\n        Returns:\n            List[torch.Tensor]: points for all levels in each image.\n        \"\"\"", "\n", "mlvl_points", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "featmap_sizes", ")", ")", ":", "\n", "            ", "y", ",", "x", "=", "self", ".", "_get_points_single", "(", "\n", "featmap_sizes", "[", "i", "]", ",", "self", ".", "strides", "[", "i", "]", ",", "dtype", ",", "device", ",", "True", "\n", ")", "\n", "y", "=", "y", "*", "self", ".", "strides", "[", "i", "]", "+", "self", ".", "strides", "[", "i", "]", "//", "2", "\n", "x", "=", "x", "*", "self", ".", "strides", "[", "i", "]", "+", "self", ".", "strides", "[", "i", "]", "//", "2", "\n", "mlvl_points", ".", "append", "(", "\n", "torch", ".", "stack", "(", "[", "x", ",", "y", ",", "x", ".", "new_full", "(", "x", ".", "size", "(", ")", ",", "self", ".", "strides", "[", "i", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", ")", "\n", "\n", "", "return", "mlvl_points", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.KeypointHead.get_bboxes": [[751, 765], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_bboxes", "(", "\n", "self", ",", "\n", "keypoint_scores", ":", "Dict", "[", "str", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "\n", "keypoint_offsets", ":", "Dict", "[", "str", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Get boxes. We will not use this function in our project.\n\n        Args:\n            keypoint_scores (Dict[str, List[torch.Tensor]]): keypoint scores for\n                each level for each head.\n            keypoint_offsets (Dict[str, List[torch.Tensor]]): keypoint offsets\n                for each level for each head.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head.reduce_mean": [[18, 28], ["tensor.clone.clone", "torch.all_reduce", "tensor.clone.div_", "torch.is_available", "torch.is_initialized", "torch.get_world_size"], "function", ["None"], ["def", "reduce_mean", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        tensor:\n    \"\"\"", "\n", "if", "not", "(", "dist", ".", "is_available", "(", ")", "and", "dist", ".", "is_initialized", "(", ")", ")", ":", "\n", "        ", "return", "tensor", "\n", "", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "tensor", ".", "div_", "(", "dist", ".", "get_world_size", "(", ")", ")", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._concat": [[767, 781], ["list", "tensors.keys", "torch.cat", "torch.cat", "zip"], "function", ["None"], ["", "", "def", "_concat", "(", "\n", "tensors", ":", "Dict", "[", "str", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "index", ":", "List", "[", "str", "]", "=", "None", "\n", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ":", "\n", "    ", "\"\"\"Concat tensor dict and return their keys, concatenated values.\n    Args:\n        tensors (Dict[str, List[torch.Tensor]]):\n        index (List[str]): Optional.\n    \"\"\"", "\n", "if", "index", ":", "\n", "        ", "names", "=", "index", "\n", "", "else", ":", "\n", "        ", "names", "=", "list", "(", "tensors", ".", "keys", "(", ")", ")", "\n", "", "return", "names", ",", "[", "\n", "torch", ".", "cat", "(", "values", ",", "dim", "=", "0", ")", "for", "values", "in", "zip", "(", "*", "[", "tensors", "[", "name", "]", "for", "name", "in", "names", "]", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._split": [[784, 801], ["len", "tensors[].size", "range", "len"], "function", ["None"], ["", "def", "_split", "(", "\n", "tensors", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "keys", ":", "List", "[", "str", "]", "\n", ")", "->", "Dict", "[", "str", ",", "List", "[", "torch", ".", "Tensor", "]", "]", ":", "\n", "    ", "\"\"\"Rearange tensor list to tensor dict.\n\n    Args:\n        tensors (List[torch.Tensor]): [description]\n        keys (List[str]): [description]\n\n    Returns:\n        Dict[str, List[torch.Tensor]]: [description]\n    \"\"\"", "\n", "num_rep", "=", "len", "(", "keys", ")", "\n", "num_batch", "=", "tensors", "[", "0", "]", ".", "size", "(", "0", ")", "//", "num_rep", "\n", "return", "{", "\n", "keys", "[", "i", "]", ":", "[", "tensor", "[", "num_batch", "*", "i", ":", "num_batch", "*", "(", "i", "+", "1", ")", "]", "for", "tensor", "in", "tensors", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "keys", ")", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._flatten_concat": [[804, 812], ["torch.cat", "torch.cat", "tensor.reshape", "tensor.size", "tensor.size"], "function", ["None"], ["", "def", "_flatten_concat", "(", "tensor_list", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "    ", "\"\"\"Flatten tensors and concatenate them together.\n    Args:\n        tensor_list (List[torch.Tensor]):  List[[N,C,H,W]]\n    \"\"\"", "\n", "return", "torch", ".", "cat", "(", "\n", "[", "tensor", ".", "reshape", "(", "tensor", ".", "size", "(", "0", ")", ",", "tensor", ".", "size", "(", "1", ")", ",", "-", "1", ")", "for", "tensor", "in", "tensor_list", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._gather_feat": [[815, 835], ["feat.view.size", "ind.unsqueeze().expand.unsqueeze().expand", "feat.view.gather", "ind.unsqueeze().expand.size", "ind.unsqueeze().expand.size", "mask.unsqueeze().expand_as.unsqueeze().expand_as", "feat.view.view", "ind.unsqueeze().expand.unsqueeze", "mask.unsqueeze().expand_as.unsqueeze"], "function", ["None"], ["", "def", "_gather_feat", "(", "feat", ":", "torch", ".", "Tensor", ",", "ind", ":", "torch", ".", "Tensor", ",", "mask", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "    ", "\"\"\"Select features with spatial inds.\n\n    Args:\n        feat (torch.Tensor): [N,K,C]\n        ind (torch.Tensor): [N,M]\n        mask (torch.Tensor): [N,M]. Defaults to None.\n\n    Returns:\n        feat (torch.Tensor): [N,M,C]\n    \"\"\"", "\n", "dim", "=", "feat", ".", "size", "(", "2", ")", "\n", "ind", "=", "ind", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "ind", ".", "size", "(", "0", ")", ",", "ind", ".", "size", "(", "1", ")", ",", "dim", ")", "\n", "feat", "=", "feat", ".", "gather", "(", "1", ",", "ind", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "feat", ")", "\n", "feat", "=", "feat", "[", "mask", "]", "\n", "feat", "=", "feat", ".", "view", "(", "-", "1", ",", "dim", ")", "\n", "\n", "", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._topk": [[837, 868], ["scores.size", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "_gather_feat().view", "keypoint_head._gather_feat", "scores.view", "min", "topk_scores.view", "min", "locations[].expand", "topk_scores.size", "keypoint_head._gather_feat", "topk_score.size", "_gather_feat().view.view"], "function", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._gather_feat", "home.repos.pwc.inspect_result.microsoft_RelationNet2.dense_heads.keypoint_head._gather_feat"], ["", "def", "_topk", "(", "scores", ":", "torch", ".", "Tensor", ",", "locations", ":", "torch", ".", "Tensor", ",", "k", ":", "int", "=", "40", ")", ":", "\n", "    ", "\"\"\"Find the topk points in a map.\n\n    Args:\n        scores (torch.Tensor): Shape is [N,C,H,W].\n        locations (torch.Tensor): Shape is [H*W,3].\n        k (int): [description]. Defaults to 40.\n\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "batch", ",", "cat", ",", "height", ",", "width", "=", "scores", ".", "size", "(", ")", "\n", "pnum", "=", "height", "*", "width", "\n", "\n", "topk_scores", ",", "topk_inds", "=", "torch", ".", "topk", "(", "scores", ".", "view", "(", "batch", ",", "cat", ",", "-", "1", ")", ",", "min", "(", "pnum", ",", "k", ")", ")", "\n", "\n", "topk_inds", "=", "topk_inds", "%", "(", "height", "*", "width", ")", "\n", "\n", "topk_score", ",", "topk_ind", "=", "torch", ".", "topk", "(", "topk_scores", ".", "view", "(", "batch", ",", "-", "1", ")", ",", "min", "(", "pnum", ",", "k", ")", ")", "\n", "topk_clses", "=", "topk_ind", "//", "topk_scores", ".", "size", "(", ")", "[", "-", "1", "]", "\n", "\n", "topk_inds", "=", "_gather_feat", "(", "topk_inds", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", ",", "topk_ind", ")", ".", "view", "(", "\n", "batch", ",", "topk_score", ".", "size", "(", ")", "[", "-", "1", "]", "\n", ")", "\n", "topk_locations", "=", "_gather_feat", "(", "\n", "locations", "[", "None", ",", "...", "]", ".", "expand", "(", "batch", ",", "height", "*", "width", ",", "3", ")", ",", "topk_inds", "\n", ")", "\n", "topk_ys", "=", "topk_locations", "[", ":", ",", ":", ",", "1", "]", "\n", "topk_xs", "=", "topk_locations", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "return", "topk_score", ",", "topk_inds", ",", "topk_clses", ",", "topk_ys", ",", "topk_xs", "\n", "", ""]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.__init__": [[22, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "gaussian_iou", "=", "0.7", ")", ":", "\n", "        ", "self", ".", "gaussian_iou", "=", "gaussian_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.PointKptAssigner.assign": [[25, 93], ["torch.log2().int", "point_kpt_assigner.gaussian_radius", "torch.pow().sum", "numpy.cumsum", "points.new_zeros", "points.new_zeros", "enumerate", "points.new_zeros.max", "points.new_zeros", "torch.log2().int.min", "torch.log2().int.max", "range", "distance_per_lvl.min", "torch.exp", "points.new_zeros", "points.new_zeros", "points.new_zeros", "torch.log2", "torch.pow", "points.size", "torch.pow().sum", "torch.arange", "gt_labels.index_select", "points.size", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.gaussian_radius"], ["", "def", "assign", "(", "self", ",", "points", ":", "torch", ".", "Tensor", ",", "num_points_list", ":", "List", "[", "int", "]", ",", "gt_points", ":", "torch", ".", "Tensor", ",", "gt_bboxes", ":", "torch", ".", "Tensor", ",", "\n", "gt_labels", ":", "torch", ".", "Tensor", "=", "None", ",", "num_classes", ":", "int", "=", "None", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"Assign gt to points.\n\n        Args:\n            points (torch.Tensor): Points for all level with shape\n                (num_points, 3) in [x,y,stride] format.\n            num_points_list (List[int]): point number for each level.\n            gt_points (torch.Tensor): Ground truth points for single image with\n                shape (num_gts, 2) in [x, y] format.\n            gt_bboxes (torch.Tensor): Ground truth bboxes of single image,\n                each has shape (num_gt, 4).\n            gt_labels (torch.Tensor): Ground truth labels of single image,\n                each has shape (num_gt,).\n        Returns:\n            Tuple[torch.Tensor,torch.Tensor]: offset targets [num_points,2] and score_targets [num_points,num_gts]\n        \"\"\"", "\n", "INF", "=", "1e8", "\n", "num_gts", ",", "num_points", "=", "gt_bboxes", ".", "shape", "[", "0", "]", ",", "points", ".", "shape", "[", "0", "]", "\n", "\n", "if", "num_points", "==", "0", "or", "num_gts", "==", "0", ":", "\n", "            ", "return", "points", ".", "new_zeros", "(", "num_points", ",", "0", ")", ",", "points", ".", "new_zeros", "(", "num_points", ",", "0", ")", "\n", "\n", "", "points_xy", "=", "points", "[", ":", ",", ":", "2", "]", "\n", "points_stride", "=", "points", "[", ":", ",", "2", "]", "\n", "points_lvl", "=", "torch", ".", "log2", "(", "points_stride", ")", ".", "int", "(", ")", "\n", "lvl_min", ",", "lvl_max", "=", "points_lvl", ".", "min", "(", ")", ",", "points_lvl", ".", "max", "(", ")", "\n", "\n", "gt_bboxes_w", "=", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", "\n", "gt_bboxes_h", "=", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", "\n", "radius", "=", "gaussian_radius", "(", "\n", "(", "gt_bboxes_h", ",", "gt_bboxes_w", ")", ",", "self", ".", "gaussian_iou", ")", "\n", "diameter", "=", "2", "*", "radius", "+", "1", "\n", "sigma", "=", "diameter", "/", "6", "\n", "sigma_square", "=", "sigma", "[", "None", ",", ":", "]", "**", "2", "\n", "# compute distance", "\n", "distance", "=", "torch", ".", "pow", "(", "points_xy", "[", ":", ",", "None", ",", ":", "]", "-", "gt_points", "[", "None", ",", "...", "]", ",", "2", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "\n", "point_range", "=", "np", ".", "cumsum", "(", "[", "0", "]", "+", "num_points_list", ")", "\n", "score_targets", "=", "points", ".", "new_zeros", "(", "num_points", ",", "num_gts", ")", "\n", "# offset_targets = points.new_zeros(num_points, 2)", "\n", "pos_mask", "=", "points", ".", "new_zeros", "(", "num_points", ",", ")", "\n", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "range", "(", "lvl_min", ",", "lvl_max", "+", "1", ")", ")", ":", "\n", "            ", "distance_per_lvl", "=", "distance", "[", "point_range", "[", "i", "]", ":", "point_range", "[", "i", "+", "1", "]", "]", "\n", "_", ",", "min_distance_inds", "=", "distance_per_lvl", ".", "min", "(", "dim", "=", "0", ")", "# [num_gts]", "\n", "pos_points_inds", "=", "point_range", "[", "i", "]", "+", "min_distance_inds", "\n", "selected_points", "=", "points", "[", "pos_points_inds", "]", "# num_gt,3", "\n", "# offset_targets[pos_points_inds, :] = (gt_points - selected_points[:, :2]) / selected_points[:, 2:]", "\n", "offset", "=", "points_xy", "[", "point_range", "[", "i", "]", ":", "point_range", "[", "i", "+", "1", "]", ",", "None", ",", ":", "2", "]", "-", "selected_points", "[", "None", ",", ":", ",", ":", "2", "]", "\n", "score_targets", "[", "point_range", "[", "i", "]", ":", "point_range", "[", "i", "+", "1", "]", "]", "=", "torch", ".", "exp", "(", "-", "0.5", "*", "torch", ".", "pow", "(", "offset", ",", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "/", "sigma_square", ")", "\n", "pos_mask", "[", "pos_points_inds", "]", "=", "1", "\n", "\n", "", "score_target_max", ",", "max_inds", "=", "score_targets", ".", "max", "(", "dim", "=", "1", ")", "\n", "offset_targets", "=", "points", ".", "new_zeros", "(", "num_points", ",", "2", ")", "\n", "valid_points", "=", "points", "[", "pos_mask", "==", "1", "]", "\n", "valid_point_gts", "=", "gt_points", "[", "max_inds", "]", "[", "pos_mask", "==", "1", "]", "\n", "offset_targets", "[", "pos_mask", "==", "1", "]", "=", "(", "valid_point_gts", "[", ":", ",", ":", "2", "]", "-", "valid_points", "[", ":", ",", ":", "2", "]", ")", "/", "(", "valid_points", "[", ":", ",", "2", ":", "]", ")", "\n", "\n", "if", "num_classes", "is", "None", ":", "\n", "            ", "score_target", "=", "score_target_max", "\n", "", "else", ":", "\n", "            ", "score_target", "=", "points", ".", "new_zeros", "(", "points", ".", "size", "(", "0", ")", ",", "num_classes", ")", "\n", "score_target", "[", "\n", "torch", ".", "arange", "(", "points", ".", "size", "(", "0", ")", ")", ",", "gt_labels", ".", "index_select", "(", "0", ",", "max_inds", ")", "\n", "]", "=", "score_target_max", "\n", "\n", "", "return", "offset_targets", ",", "score_target", ",", "pos_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_RelationNet2.assigners.point_kpt_assigner.gaussian_radius": [[95, 118], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.stack", "torch.min"], "function", ["None"], ["", "", "def", "gaussian_radius", "(", "det_size", ",", "min_overlap", ")", ":", "\n", "    ", "height", ",", "width", "=", "det_size", "\n", "\n", "a1", "=", "1", "\n", "b1", "=", "(", "height", "+", "width", ")", "\n", "c1", "=", "width", "*", "height", "*", "(", "1", "-", "min_overlap", ")", "/", "(", "1", "+", "min_overlap", ")", "\n", "sq1", "=", "torch", ".", "sqrt", "(", "b1", "**", "2", "-", "4", "*", "a1", "*", "c1", ")", "\n", "r1", "=", "(", "b1", "-", "sq1", ")", "/", "(", "2", "*", "a1", ")", "\n", "\n", "a2", "=", "4", "\n", "b2", "=", "2", "*", "(", "height", "+", "width", ")", "\n", "c2", "=", "(", "1", "-", "min_overlap", ")", "*", "width", "*", "height", "\n", "sq2", "=", "torch", ".", "sqrt", "(", "b2", "**", "2", "-", "4", "*", "a2", "*", "c2", ")", "\n", "r2", "=", "(", "b2", "-", "sq2", ")", "/", "(", "2", "*", "a2", ")", "\n", "\n", "a3", "=", "4", "*", "min_overlap", "\n", "b3", "=", "-", "2", "*", "min_overlap", "*", "(", "height", "+", "width", ")", "\n", "c3", "=", "(", "min_overlap", "-", "1", ")", "*", "width", "*", "height", "\n", "sq3", "=", "torch", ".", "sqrt", "(", "b3", "**", "2", "-", "4", "*", "a3", "*", "c3", ")", "\n", "r3", "=", "(", "b3", "+", "sq3", ")", "/", "(", "2", "*", "a3", ")", "\n", "\n", "r", "=", "torch", ".", "stack", "(", "[", "r1", ",", "r2", ",", "r3", "]", ",", "dim", "=", "1", ")", "\n", "return", "torch", ".", "min", "(", "r", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "", ""]]}