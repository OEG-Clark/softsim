{"home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.WassersteinUpdaterFramework.__init__": [[8, 13], ["kwargs.pop", "kwargs.pop", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "G", ",", "self", ".", "D", "=", "kwargs", ".", "pop", "(", "'models'", ")", "\n", "self", ".", "args", "=", "kwargs", ".", "pop", "(", "'args'", ")", "\n", "\n", "super", "(", "WassersteinUpdaterFramework", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.WassersteinUpdaterFramework.d_loss": [[14, 22], ["chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report"], "methods", ["None"], ["", "def", "d_loss", "(", "self", ",", "errD_real", ",", "errD_fake", ")", ":", "\n", "        ", "errD", "=", "errD_real", "-", "errD_fake", "\n", "\n", "chainer", ".", "report", "(", "{", "'loss_real'", ":", "errD_real", "}", ",", "self", ".", "D", ")", "\n", "chainer", ".", "report", "(", "{", "'loss_fake'", ":", "errD_fake", "}", ",", "self", ".", "D", ")", "\n", "chainer", ".", "report", "(", "{", "'loss'", ":", "errD", "}", ",", "self", ".", "D", ")", "\n", "\n", "return", "errD", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.WassersteinUpdaterFramework.update_d": [[23, 25], ["None"], "methods", ["None"], ["", "def", "update_d", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.WassersteinUpdaterFramework.update_g": [[26, 28], ["None"], "methods", ["None"], ["", "def", "update_g", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.WassersteinUpdaterFramework.update_core": [[29, 54], ["updater.WassersteinUpdaterFramework.get_optimizer", "updater.WassersteinUpdaterFramework.get_optimizer", "range", "updater.WassersteinUpdaterFramework.update_g", "updater.WassersteinUpdaterFramework.D.params", "updater.WassersteinUpdaterFramework.update_d", "p.data.clip"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.WassersteinUpdater.update_g", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.WassersteinUpdater.update_d"], ["", "def", "update_core", "(", "self", ")", ":", "\n", "        ", "d_optimizer", "=", "self", ".", "get_optimizer", "(", "'D'", ")", "\n", "g_optimizer", "=", "self", ".", "get_optimizer", "(", "'main'", ")", "\n", "############################", "\n", "# (1) Update D network", "\n", "###########################", "\n", "# train the discriminator Diters times", "\n", "if", "self", ".", "iteration", "<", "25", "or", "self", ".", "iteration", "%", "500", "==", "0", ":", "\n", "            ", "Diters", "=", "100", "\n", "", "else", ":", "\n", "            ", "Diters", "=", "self", ".", "args", ".", "d_iters", "\n", "\n", "", "for", "_", "in", "range", "(", "Diters", ")", ":", "\n", "# clamp parameters to a cube", "\n", "            ", "for", "p", "in", "self", ".", "D", ".", "params", "(", ")", ":", "\n", "                ", "if", "p", ".", "data", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "p", ".", "data", ".", "clip", "(", "self", ".", "args", ".", "clamp_lower", ",", "self", ".", "args", ".", "clamp_upper", ",", "p", ".", "data", ")", "\n", "\n", "", "self", ".", "update_d", "(", "d_optimizer", ")", "\n", "\n", "############################", "\n", "# (2) Update G network", "\n", "###########################", "\n", "", "self", ".", "update_g", "(", "g_optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.EncoderDecoderBlendingUpdater.__init__": [[57, 59], ["updater.WassersteinUpdaterFramework.__init__"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EncoderDecoderBlendingUpdater", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.EncoderDecoderBlendingUpdater.g_loss": [[60, 69], ["chainer.mean_squared_error", "chainer.mean_squared_error", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report", "chainer.report"], "methods", ["None"], ["", "def", "g_loss", "(", "self", ",", "errG", ",", "fake", ",", "gtv", ")", ":", "\n", "        ", "l2_loss", "=", "F", ".", "mean_squared_error", "(", "fake", ",", "gtv", ")", "\n", "loss", "=", "(", "1", "-", "self", ".", "args", ".", "l2_weight", ")", "*", "errG", "+", "self", ".", "args", ".", "l2_weight", "*", "l2_loss", "\n", "\n", "chainer", ".", "report", "(", "{", "'loss'", ":", "loss", "}", ",", "self", ".", "G", ")", "\n", "chainer", ".", "report", "(", "{", "'l2_loss'", ":", "l2_loss", "}", ",", "self", ".", "G", ")", "\n", "chainer", ".", "report", "(", "{", "'gan_loss'", ":", "errG", "}", ",", "self", ".", "G", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.EncoderDecoderBlendingUpdater.update_d": [[70, 81], ["updater.EncoderDecoderBlendingUpdater.get_iterator().next", "chainer.Variable", "chainer.Variable", "chainer.Variable", "chainer.Variable", "updater.EncoderDecoderBlendingUpdater.D", "updater.EncoderDecoderBlendingUpdater.G", "updater.EncoderDecoderBlendingUpdater.D", "optimizer.update", "updater.EncoderDecoderBlendingUpdater.converter", "updater.EncoderDecoderBlendingUpdater.converter", "updater.EncoderDecoderBlendingUpdater.get_iterator"], "methods", ["None"], ["", "def", "update_d", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "batch", "=", "self", ".", "get_iterator", "(", "'main'", ")", ".", "next", "(", ")", "\n", "inputv", "=", "Variable", "(", "self", ".", "converter", "(", "[", "inputs", "for", "inputs", ",", "_", "in", "batch", "]", ",", "self", ".", "device", ")", ")", "\n", "gtv", "=", "Variable", "(", "self", ".", "converter", "(", "[", "gt", "for", "_", ",", "gt", "in", "batch", "]", ",", "self", ".", "device", ")", ")", "\n", "errD_real", "=", "self", ".", "D", "(", "gtv", ")", "\n", "\n", "# train with fake", "\n", "fake", "=", "self", ".", "G", "(", "inputv", ")", "\n", "errD_fake", "=", "self", ".", "D", "(", "fake", ")", "\n", "\n", "optimizer", ".", "update", "(", "self", ".", "d_loss", ",", "errD_real", ",", "errD_fake", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.EncoderDecoderBlendingUpdater.update_g": [[82, 89], ["updater.EncoderDecoderBlendingUpdater.get_iterator().next", "chainer.Variable", "chainer.Variable", "chainer.Variable", "chainer.Variable", "updater.EncoderDecoderBlendingUpdater.G", "updater.EncoderDecoderBlendingUpdater.D", "optimizer.update", "updater.EncoderDecoderBlendingUpdater.converter", "updater.EncoderDecoderBlendingUpdater.converter", "updater.EncoderDecoderBlendingUpdater.get_iterator"], "methods", ["None"], ["", "def", "update_g", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "batch", "=", "self", ".", "get_iterator", "(", "'main'", ")", ".", "next", "(", ")", "\n", "inputv", "=", "Variable", "(", "self", ".", "converter", "(", "[", "inputs", "for", "inputs", ",", "_", "in", "batch", "]", ",", "self", ".", "device", ")", ")", "\n", "gtv", "=", "Variable", "(", "self", ".", "converter", "(", "[", "gt", "for", "_", ",", "gt", "in", "batch", "]", ",", "self", ".", "device", ")", ")", "\n", "fake", "=", "self", ".", "G", "(", "inputv", ")", "\n", "errG", "=", "self", ".", "D", "(", "fake", ")", "\n", "optimizer", ".", "update", "(", "self", ".", "g_loss", ",", "errG", ",", "fake", ",", "gtv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.WassersteinUpdater.__init__": [[92, 94], ["updater.WassersteinUpdaterFramework.__init__"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "WassersteinUpdater", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.WassersteinUpdater.g_loss": [[95, 99], ["chainer.report", "chainer.report", "chainer.report", "chainer.report"], "methods", ["None"], ["", "def", "g_loss", "(", "self", ",", "errG", ")", ":", "\n", "        ", "chainer", ".", "report", "(", "{", "'loss'", ":", "errG", "}", ",", "self", ".", "G", ")", "\n", "\n", "return", "errG", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.WassersteinUpdater.update_d": [[100, 113], ["updater.WassersteinUpdater.get_iterator().next", "chainer.Variable", "chainer.Variable", "updater.WassersteinUpdater.D", "chainer.Variable", "chainer.Variable", "chainer.Variable.to_device", "chainer.Variable.to_device", "updater.WassersteinUpdater.G", "updater.WassersteinUpdater.D", "optimizer.update", "updater.WassersteinUpdater.converter", "numpy.asarray", "updater.WassersteinUpdater.get_iterator", "numpy.random.normal"], "methods", ["None"], ["", "def", "update_d", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "batch", "=", "self", ".", "get_iterator", "(", "'main'", ")", ".", "next", "(", ")", "\n", "inputv", "=", "Variable", "(", "self", ".", "converter", "(", "batch", ",", "self", ".", "device", ")", ")", "\n", "errD_real", "=", "self", ".", "D", "(", "inputv", ")", "\n", "\n", "# train with fake", "\n", "noisev", "=", "Variable", "(", "\n", "np", ".", "asarray", "(", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "self", ".", "args", ".", "batch_size", ",", "self", ".", "args", ".", "nz", ",", "1", ",", "1", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "noisev", ".", "to_device", "(", "self", ".", "device", ")", "\n", "fake", "=", "self", ".", "G", "(", "noisev", ")", "\n", "errD_fake", "=", "self", ".", "D", "(", "fake", ")", "\n", "\n", "optimizer", ".", "update", "(", "self", ".", "d_loss", ",", "errD_real", ",", "errD_fake", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.updater.WassersteinUpdater.update_g": [[114, 121], ["chainer.Variable", "chainer.Variable", "chainer.Variable.to_device", "chainer.Variable.to_device", "updater.WassersteinUpdater.G", "updater.WassersteinUpdater.D", "optimizer.update", "numpy.asarray", "numpy.random.normal"], "methods", ["None"], ["", "def", "update_g", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "noisev", "=", "Variable", "(", "\n", "np", ".", "asarray", "(", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "self", ".", "args", ".", "batch_size", ",", "self", ".", "args", ".", "nz", ",", "1", ",", "1", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "noisev", ".", "to_device", "(", "self", ".", "device", ")", "\n", "fake", "=", "self", ".", "G", "(", "noisev", ")", "\n", "errG", "=", "self", ".", "D", "(", "fake", ")", "\n", "optimizer", ".", "update", "(", "self", ".", "g_loss", ",", "errG", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.preprocess": [[30, 33], ["numpy.transpose().astype", "numpy.transpose"], "function", ["None"], ["def", "preprocess", "(", "im", ")", ":", "\n", "    ", "im", "=", "np", ".", "transpose", "(", "im", "*", "2", "-", "1", ",", "(", "2", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.ndarray_resize": [[35, 41], ["skimage.transform.resize", "im.astype.astype"], "function", ["None"], ["", "def", "ndarray_resize", "(", "im", ",", "image_size", ",", "order", "=", "3", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "im", "=", "resize", "(", "im", ",", "image_size", ",", "preserve_range", "=", "True", ",", "order", "=", "order", ",", "mode", "=", "'constant'", ")", "\n", "\n", "if", "dtype", ":", "\n", "        ", "im", "=", "im", ".", "astype", "(", "dtype", ")", "\n", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.z_generate": [[43, 56], ["numpy.reshape().astype", "chainer.Variable", "chainer.mean_squared_error", "cuda.to_cpu.backward", "chainer.cuda.to_cpu", "numpy.squeeze", "chainer.dataset.concat_examples", "chainer.dataset.concat_examples", "G", "chainer.cuda.to_cpu", "numpy.asarray", "numpy.reshape", "np.squeeze.flatten"], "function", ["None"], ["", "def", "z_generate", "(", "z", ",", "G", ",", "copy_paste_var", ",", "nz", ",", "gpu", ")", ":", "\n", "    ", "z", "=", "np", ".", "reshape", "(", "z", ",", "(", "nz", ",", "1", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "z_var", "=", "Variable", "(", "chainer", ".", "dataset", ".", "concat_examples", "(", "[", "z", "]", ",", "gpu", ")", ")", "\n", "\n", "loss", "=", "F", ".", "mean_squared_error", "(", "copy_paste_var", ",", "G", "(", "z_var", ")", ")", "\n", "\n", "# Backward", "\n", "loss", ".", "backward", "(", ")", "\n", "# Transfer loss & diff from GPU to CPU", "\n", "loss", "=", "cuda", ".", "to_cpu", "(", "loss", ".", "data", ")", "\n", "dz", "=", "np", ".", "squeeze", "(", "cuda", ".", "to_cpu", "(", "z_var", ".", "grad", ")", ")", "\n", "\n", "return", "loss", ",", "np", ".", "asarray", "(", "dz", ".", "flatten", "(", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.imfilter2d": [[58, 64], ["numpy.zeros_like", "range", "filter_func"], "function", ["None"], ["", "def", "imfilter2d", "(", "im", ",", "filter_func", ")", ":", "\n", "    ", "gradients", "=", "np", ".", "zeros_like", "(", "im", ")", "\n", "for", "i", "in", "range", "(", "im", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "gradients", "[", ":", ",", ":", ",", "i", "]", "=", "filter_func", "(", "im", "[", ":", ",", ":", ",", "i", "]", ")", "\n", "\n", "", "return", "gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.gradient_feature": [[66, 78], ["numpy.zeros", "gp_gan.imfilter2d", "gp_gan.imfilter2d", "numpy.roll", "numpy.roll", "np.zeros.astype"], "function", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.imfilter2d", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.imfilter2d"], ["", "def", "gradient_feature", "(", "im", ",", "color_feature", ",", "gradient_kernel", ")", ":", "\n", "    ", "result", "=", "np", ".", "zeros", "(", "(", "*", "im", ".", "shape", ",", "5", ")", ")", "\n", "\n", "gradient_h", ",", "gradient_v", "=", "gradient_operator", "[", "gradient_kernel", "]", "\n", "\n", "result", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "color_feature", "\n", "result", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "imfilter2d", "(", "im", ",", "gradient_h", ")", "\n", "result", "[", ":", ",", ":", ",", ":", ",", "2", "]", "=", "imfilter2d", "(", "im", ",", "gradient_v", ")", "\n", "result", "[", ":", ",", ":", ",", ":", ",", "3", "]", "=", "np", ".", "roll", "(", "result", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "1", ",", "axis", "=", "1", ")", "\n", "result", "[", ":", ",", ":", ",", ":", ",", "4", "]", "=", "np", ".", "roll", "(", "result", "[", ":", ",", ":", ",", ":", ",", "2", "]", ",", "1", ",", "axis", "=", "0", ")", "\n", "\n", "return", "result", ".", "astype", "(", "im", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.fft2": [[80, 86], ["numpy.fft.fft2", "numpy.real", "np.real.astype"], "function", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.fft2"], ["", "def", "fft2", "(", "K", ",", "size", ",", "dtype", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "param", "=", "np", ".", "fft", ".", "fft2", "(", "K", ")", "\n", "param", "=", "np", ".", "real", "(", "param", "[", "0", ":", "w", ",", "0", ":", "h", "]", ")", "\n", "\n", "return", "param", ".", "astype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.laplacian_param": [[88, 100], ["numpy.zeros().astype", "numpy.array", "numpy.roll", "numpy.roll", "gp_gan.fft2", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.fft2"], ["", "def", "laplacian_param", "(", "size", ",", "dtype", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "K", "=", "np", ".", "zeros", "(", "(", "2", "*", "w", ",", "2", "*", "h", ")", ")", ".", "astype", "(", "dtype", ")", "\n", "\n", "laplacian_k", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "1", ",", "0", "]", ",", "[", "-", "1", ",", "4", ",", "-", "1", "]", ",", "[", "0", ",", "-", "1", ",", "0", "]", "]", ")", "\n", "kw", ",", "kh", "=", "laplacian_k", ".", "shape", "\n", "K", "[", ":", "kw", ",", ":", "kh", "]", "=", "laplacian_k", "\n", "\n", "K", "=", "np", ".", "roll", "(", "K", ",", "-", "(", "kw", "//", "2", ")", ",", "axis", "=", "0", ")", "\n", "K", "=", "np", ".", "roll", "(", "K", ",", "-", "(", "kh", "//", "2", ")", ",", "axis", "=", "1", ")", "\n", "\n", "return", "fft2", "(", "K", ",", "size", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.gaussian_param": [[102, 113], ["numpy.zeros().astype", "skimage.filters.gaussian", "numpy.roll", "numpy.roll", "gp_gan.fft2", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.fft2"], ["", "def", "gaussian_param", "(", "size", ",", "dtype", ",", "sigma", ")", ":", "\n", "    ", "w", ",", "h", "=", "size", "\n", "K", "=", "np", ".", "zeros", "(", "(", "2", "*", "w", ",", "2", "*", "h", ")", ")", ".", "astype", "(", "dtype", ")", "\n", "\n", "K", "[", "1", ",", "1", "]", "=", "1", "\n", "K", "[", ":", "3", ",", ":", "3", "]", "=", "gaussian", "(", "K", "[", ":", "3", ",", ":", "3", "]", ",", "sigma", ")", "\n", "\n", "K", "=", "np", ".", "roll", "(", "K", ",", "-", "1", ",", "axis", "=", "0", ")", "\n", "K", "=", "np", ".", "roll", "(", "K", ",", "-", "1", ",", "axis", "=", "1", ")", "\n", "\n", "return", "fft2", "(", "K", ",", "size", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.dct2": [[115, 117], ["scipy.fftpack.dct", "scipy.fftpack.dct"], "function", ["None"], ["", "def", "dct2", "(", "x", ",", "norm", "=", "'ortho'", ")", ":", "\n", "    ", "return", "dct", "(", "dct", "(", "x", ",", "norm", "=", "norm", ")", ".", "T", ",", "norm", "=", "norm", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.idct2": [[119, 121], ["scipy.fftpack.idct", "scipy.fftpack.idct"], "function", ["None"], ["", "def", "idct2", "(", "x", ",", "norm", "=", "'ortho'", ")", ":", "\n", "    ", "return", "idct", "(", "idct", "(", "x", ",", "norm", "=", "norm", ")", ".", "T", ",", "norm", "=", "norm", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.gaussian_poisson_editing": [[123, 138], ["numpy.zeros", "range", "gp_gan.dct2", "gp_gan.idct2", "numpy.roll", "numpy.roll", "numpy.roll", "numpy.roll", "gp_gan.dct2"], "function", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.dct2", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.idct2", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.dct2"], ["", "def", "gaussian_poisson_editing", "(", "X", ",", "param_l", ",", "param_g", ",", "color_weight", "=", "1", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "Fh", "=", "(", "X", "[", ":", ",", ":", ",", ":", ",", "1", "]", "+", "np", ".", "roll", "(", "X", "[", ":", ",", ":", ",", ":", ",", "3", "]", ",", "-", "1", ",", "axis", "=", "1", ")", ")", "/", "2", "\n", "Fv", "=", "(", "X", "[", ":", ",", ":", ",", ":", ",", "2", "]", "+", "np", ".", "roll", "(", "X", "[", ":", ",", ":", ",", ":", ",", "4", "]", ",", "-", "1", ",", "axis", "=", "0", ")", ")", "/", "2", "\n", "L", "=", "np", ".", "roll", "(", "Fh", ",", "1", ",", "axis", "=", "1", ")", "+", "np", ".", "roll", "(", "Fv", ",", "1", ",", "axis", "=", "0", ")", "-", "Fh", "-", "Fv", "\n", "\n", "param", "=", "param_l", "+", "color_weight", "*", "param_g", "\n", "param", "[", "(", "param", ">=", "0", ")", "&", "(", "param", "<", "eps", ")", "]", "=", "eps", "\n", "param", "[", "(", "param", "<", "0", ")", "&", "(", "param", ">", "-", "eps", ")", "]", "=", "-", "eps", "\n", "\n", "Y", "=", "np", ".", "zeros", "(", "X", ".", "shape", "[", ":", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "Xdct", "=", "dct2", "(", "X", "[", ":", ",", ":", ",", "i", ",", "0", "]", ")", "\n", "Ydct", "=", "(", "dct2", "(", "L", "[", ":", ",", ":", ",", "i", "]", ")", "+", "color_weight", "*", "Xdct", ")", "/", "param", "\n", "Y", "[", ":", ",", ":", ",", "i", "]", "=", "idct2", "(", "Ydct", ")", "\n", "", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.run_gp_editing": [[140, 152], ["gp_gan.gradient_feature", "gp_gan.gradient_feature", "gp_gan.laplacian_param", "gp_gan.gaussian_param", "gp_gan.gaussian_poisson_editing", "numpy.clip"], "function", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.gradient_feature", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.gradient_feature", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.laplacian_param", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.gaussian_param", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.gaussian_poisson_editing"], ["", "def", "run_gp_editing", "(", "src_im", ",", "dst_im", ",", "mask_im", ",", "gan_im", ",", "color_weight", ",", "sigma", ",", "gradient_kernel", "=", "'normal'", ")", ":", "\n", "    ", "dst_feature", "=", "gradient_feature", "(", "dst_im", ",", "gan_im", ",", "gradient_kernel", ")", "\n", "src_feature", "=", "gradient_feature", "(", "src_im", ",", "gan_im", ",", "gradient_kernel", ")", "\n", "feature", "=", "dst_feature", "*", "(", "1", "-", "mask_im", ")", "+", "src_feature", "*", "mask_im", "\n", "\n", "size", ",", "dtype", "=", "feature", ".", "shape", "[", ":", "2", "]", ",", "feature", ".", "dtype", "\n", "param_l", "=", "laplacian_param", "(", "size", ",", "dtype", ")", "\n", "param_g", "=", "gaussian_param", "(", "size", ",", "dtype", ",", "sigma", ")", "\n", "gan_im", "=", "gaussian_poisson_editing", "(", "feature", ",", "param_l", ",", "param_g", ",", "color_weight", "=", "color_weight", ")", "\n", "gan_im", "=", "np", ".", "clip", "(", "gan_im", ",", "0", ",", "1", ")", "\n", "\n", "return", "gan_im", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.laplacian_pyramid": [[154, 167], ["range", "im_pyramid.reverse", "diff_pyramid.reverse", "skimage.filters.gaussian", "diff_pyramid.append", "gp_gan.ndarray_resize", "im_pyramid.append"], "function", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.ndarray_resize"], ["", "def", "laplacian_pyramid", "(", "im", ",", "max_level", ",", "image_size", ",", "smooth_sigma", ")", ":", "\n", "    ", "im_pyramid", "=", "[", "im", "]", "\n", "diff_pyramid", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "max_level", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "smoothed", "=", "gaussian", "(", "im_pyramid", "[", "-", "1", "]", ",", "smooth_sigma", ",", "multichannel", "=", "True", ")", "\n", "diff_pyramid", ".", "append", "(", "im_pyramid", "[", "-", "1", "]", "-", "smoothed", ")", "\n", "smoothed", "=", "ndarray_resize", "(", "smoothed", ",", "(", "image_size", "*", "2", "**", "i", ",", "image_size", "*", "2", "**", "i", ")", ")", "\n", "im_pyramid", ".", "append", "(", "smoothed", ")", "\n", "\n", "", "im_pyramid", ".", "reverse", "(", ")", "\n", "diff_pyramid", ".", "reverse", "(", ")", "\n", "\n", "return", "im_pyramid", ",", "diff_pyramid", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.gp_gan": [[191, 229], ["int", "gp_gan.laplacian_pyramid", "gp_gan.laplacian_pyramid", "chainer.Variable", "numpy.clip().astype", "range", "numpy.clip().astype", "math.ceil", "gp_gan.ndarray_resize", "chainer.dataset.concat_examples", "chainer.dataset.concat_examples", "G", "numpy.random.normal", "scipy.optimize.minimize", "numpy.reshape().astype", "G", "gp_gan.run_gp_editing", "numpy.log2", "chainer.Variable", "numpy.clip", "gp_gan.ndarray_resize", "gp_gan.ndarray_resize", "numpy.clip", "gp_gan.preprocess", "numpy.reshape", "chainer.dataset.concat_examples", "chainer.dataset.concat_examples", "numpy.transpose", "max", "numpy.squeeze", "chainer.cuda.to_cpu"], "function", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.laplacian_pyramid", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.laplacian_pyramid", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.ndarray_resize", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.run_gp_editing", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.ndarray_resize", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.ndarray_resize", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.preprocess"], ["def", "gp_gan", "(", "obj", ",", "bg", ",", "mask", ",", "G", ",", "image_size", ",", "gpu", ",", "color_weight", "=", "1", ",", "sigma", "=", "0.5", ",", "gradient_kernel", "=", "'normal'", ",", "smooth_sigma", "=", "1", ",", "\n", "supervised", "=", "True", ",", "nz", "=", "100", ",", "n_iteration", "=", "1000", ")", ":", "\n", "    ", "w_orig", ",", "h_orig", ",", "_", "=", "obj", ".", "shape", "\n", "############################ Gaussian-Poisson GAN Image Editing ###########################", "\n", "# pyramid", "\n", "max_level", "=", "int", "(", "math", ".", "ceil", "(", "np", ".", "log2", "(", "max", "(", "w_orig", ",", "h_orig", ")", "/", "image_size", ")", ")", ")", "\n", "obj_im_pyramid", ",", "_", "=", "laplacian_pyramid", "(", "obj", ",", "max_level", ",", "image_size", ",", "smooth_sigma", ")", "\n", "bg_im_pyramid", ",", "_", "=", "laplacian_pyramid", "(", "bg", ",", "max_level", ",", "image_size", ",", "smooth_sigma", ")", "\n", "\n", "# init GAN image", "\n", "mask_init", "=", "ndarray_resize", "(", "mask", ",", "(", "image_size", ",", "image_size", ")", ",", "order", "=", "0", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "copy_paste_init", "=", "obj_im_pyramid", "[", "0", "]", "*", "mask_init", "+", "bg_im_pyramid", "[", "0", "]", "*", "(", "1", "-", "mask_init", ")", "\n", "copy_paste_init_var", "=", "Variable", "(", "chainer", ".", "dataset", ".", "concat_examples", "(", "[", "preprocess", "(", "copy_paste_init", ")", "]", ",", "gpu", ")", ")", "\n", "\n", "if", "supervised", ":", "\n", "        ", "gan_im_var", "=", "G", "(", "copy_paste_init_var", ")", "\n", "", "else", ":", "\n", "        ", "z_init", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "nz", ",", "1", ",", "1", ")", ")", "\n", "res", "=", "minimize", "(", "z_generate", ",", "z_init", ",", "args", "=", "(", "G", ",", "copy_paste_init_var", ",", "nz", ",", "gpu", ")", ",", "method", "=", "'L-BFGS-B'", ",", "jac", "=", "True", ",", "\n", "options", "=", "{", "'maxiter'", ":", "n_iteration", ",", "'disp'", ":", "False", "}", ")", "\n", "z", "=", "np", ".", "reshape", "(", "res", ".", "x", ",", "(", "nz", ",", "1", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gan_im_var", "=", "G", "(", "Variable", "(", "chainer", ".", "dataset", ".", "concat_examples", "(", "[", "z", "]", ",", "gpu", ")", ")", ")", "\n", "", "gan_im", "=", "np", ".", "clip", "(", "np", ".", "transpose", "(", "(", "np", ".", "squeeze", "(", "cuda", ".", "to_cpu", "(", "gan_im_var", ".", "data", ")", ")", "+", "1", ")", "/", "2", ",", "(", "1", ",", "2", ",", "0", ")", ")", ",", "0", ",", "1", ")", ".", "astype", "(", "\n", "obj", ".", "dtype", ")", "\n", "\n", "# Start pyramid", "\n", "for", "level", "in", "range", "(", "max_level", "+", "1", ")", ":", "\n", "        ", "size", "=", "obj_im_pyramid", "[", "level", "]", ".", "shape", "[", ":", "2", "]", "\n", "mask_im", "=", "ndarray_resize", "(", "mask", ",", "size", ",", "order", "=", "0", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "if", "level", "!=", "0", ":", "\n", "            ", "gan_im", "=", "ndarray_resize", "(", "gan_im", ",", "size", ")", "\n", "\n", "", "gan_im", "=", "run_gp_editing", "(", "obj_im_pyramid", "[", "level", "]", ",", "bg_im_pyramid", "[", "level", "]", ",", "mask_im", ",", "gan_im", ",", "color_weight", ",", "sigma", ",", "\n", "gradient_kernel", ")", "\n", "\n", "", "gan_im", "=", "np", ".", "clip", "(", "gan_im", "*", "255", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "return", "gan_im", "\n", "", ""]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.crop_aligned_images.main": [[8, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "os.path.isdir", "os.makedirs", "open", "line.strip().split", "print", "glob.glob", "int", "os.path.join", "os.path.isdir", "os.makedirs", "skimage.io.imread", "os.path.basename", "skimage.io.imsave", "line.strip", "bbox.split", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Cropping aligned images'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "help", "=", "'Path for aligned images'", ")", "\n", "parser", ".", "add_argument", "(", "'--result_folder'", ",", "default", "=", "'cropped_images'", ",", "help", "=", "'Path for cropped images'", ")", "\n", "parser", ".", "add_argument", "(", "'--bbox_path'", ",", "default", "=", "'DataBase/TransientAttributes/bbox.txt'", ",", "\n", "help", "=", "'Path for bounding-box txt'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Init mask folder", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "result_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "result_folder", ")", "\n", "", "print", "(", "'Cropped images will be saved to {} ...\\n'", ".", "format", "(", "args", ".", "result_folder", ")", ")", "\n", "\n", "with", "open", "(", "args", ".", "bbox_path", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "name", ",", "bbox", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "':'", ")", "\n", "sx", ",", "sy", ",", "ex", ",", "ey", "=", "[", "int", "(", "i", ")", "for", "i", "in", "bbox", ".", "split", "(", "','", ")", "]", "\n", "\n", "print", "(", "'Processing {} ...'", ".", "format", "(", "name", ")", ")", "\n", "images", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "name", ",", "'*'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_folder", ",", "name", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_folder", ",", "name", ")", ")", "\n", "\n", "", "for", "data_root", "in", "images", ":", "\n", "                ", "mask", "=", "imread", "(", "data_root", ")", "\n", "cropped_mask", "=", "mask", "[", "sx", ":", "ex", ",", "sy", ":", "ey", "]", "\n", "\n", "mask_name", "=", "os", ".", "path", ".", "basename", "(", "data_root", ")", "\n", "imsave", "(", "os", ".", "path", ".", "join", "(", "args", ".", "result_folder", ",", "name", ",", "mask_name", ")", ",", "cropped_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.train_wasserstein_gan.make_optimizer": [[18, 22], ["chainer.optimizers.RMSprop", "chainer.optimizers.RMSprop.setup"], "function", ["None"], ["def", "make_optimizer", "(", "model", ",", "lr", ")", ":", "\n", "    ", "optimizer", "=", "chainer", ".", "optimizers", ".", "RMSprop", "(", "lr", "=", "lr", ")", "\n", "optimizer", ".", "setup", "(", "model", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.train_wasserstein_gan.main": [[24, 152], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.seed", "print", "vars().items", "print", "print", "print", "model.DCGAN_G", "print", "model.DCGAN_D", "print", "train_wasserstein_gan.make_optimizer", "train_wasserstein_gan.make_optimizer", "print", "dataset.H5pyDataset", "print", "print", "chainer.iterators.MultiprocessIterator", "updater.WassersteinUpdater", "chainer.training.Trainer", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "os.path.join", "print", "chainer.Variable", "chainer.Variable.to_gpu", "training.Trainer.extend", "print", "training.Trainer.run", "print", "print", "chainer.cuda.get_device().use", "model.DCGAN_G.to_gpu", "model.DCGAN_D.to_gpu", "chainer.training.extensions.snapshot", "chainer.training.extensions.snapshot_object", "chainer.training.extensions.snapshot_object", "chainer.training.extensions.LogReport", "chainer.training.extensions.PrintReport", "chainer.training.extensions.ProgressBar", "chainer.training.extensions.dump_graph", "chainer.training.extensions.PlotReport", "chainer.training.extensions.PlotReport", "chainer.training.extensions.PlotReport", "chainer.training.extensions.PlotReport", "os.path.isdir", "os.makedirs", "numpy.asarray", "sampler.sampler", "print", "chainer.serializers.load_npz", "vars", "len", "numpy.random.normal", "chainer.cuda.get_device"], "function", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.train_blending_gan.make_optimizer", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.train_blending_gan.make_optimizer", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.sampler.sampler"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train Unsupervised Blending GAN'", ")", "\n", "parser", ".", "add_argument", "(", "'--nz'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'Size of the latent z vector'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of base filters in G'", ")", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of base filters in D'", ")", "\n", "parser", ".", "add_argument", "(", "'--nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output channels in G'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'Scale image to load_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--image_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'The height / width of the input image to network'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'GPU ID (negative value indicates CPU)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_d'", ",", "type", "=", "float", ",", "default", "=", "0.00005", ",", "help", "=", "'Learning rate for Critic, default=0.00005'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_g'", ",", "type", "=", "float", ",", "default", "=", "0.00005", ",", "help", "=", "'Learning rate for Generator, default=0.00005'", ")", "\n", "parser", ".", "add_argument", "(", "'--d_iters'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'# of D iters per each G iter'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_epoch'", ",", "type", "=", "int", ",", "default", "=", "25", ",", "help", "=", "'# of epochs to train for'", ")", "\n", "parser", ".", "add_argument", "(", "'--clamp_lower'", ",", "type", "=", "float", ",", "default", "=", "-", "0.01", ",", "help", "=", "'Lower bound for clipping'", ")", "\n", "parser", ".", "add_argument", "(", "'--clamp_upper'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'Upper bound for clipping'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "help", "=", "'Path to dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--experiment'", ",", "default", "=", "'Wasserstein_GAN_result'", ",", "help", "=", "'Where to store samples and models'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'# of data loading workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'Batch size for testing'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--manual_seed'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'Manul seed'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "help", "=", "'Resume the training from snapshot'", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot_interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Interval of snapshot (epoch)'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Interval of printing log to console (iteration)'", ")", "\n", "parser", ".", "add_argument", "(", "'--plot_interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'Interval of plot (iteration)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "random", ".", "seed", "(", "args", ".", "manual_seed", ")", "\n", "\n", "print", "(", "'Input arguments:'", ")", "\n", "for", "key", ",", "value", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "'\\t{}: {}'", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "", "print", "(", "''", ")", "\n", "\n", "# Set up G & D", "\n", "print", "(", "'Create & Init models ...'", ")", "\n", "print", "(", "'\\tInit G network ...'", ")", "\n", "G", "=", "DCGAN_G", "(", "args", ".", "image_size", ",", "args", ".", "nc", ",", "args", ".", "ngf", ",", "init_conv", ",", "init_bn", ")", "\n", "print", "(", "'\\tInit D network ...'", ")", "\n", "D", "=", "DCGAN_D", "(", "args", ".", "image_size", ",", "args", ".", "ndf", ",", "1", ",", "init_conv", ",", "init_bn", ")", "\n", "if", "args", ".", "gpu", ">=", "0", ":", "\n", "        ", "print", "(", "'\\tCopy models to gpu {} ...'", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "chainer", ".", "cuda", ".", "get_device", "(", "args", ".", "gpu", ")", ".", "use", "(", ")", "# Make a specified GPU current", "\n", "G", ".", "to_gpu", "(", ")", "# Copy the model to the GPU", "\n", "D", ".", "to_gpu", "(", ")", "\n", "", "print", "(", "'Init models done ...\\n'", ")", "\n", "# Setup an optimizer", "\n", "optimizer_d", "=", "make_optimizer", "(", "D", ",", "args", ".", "lr_d", ")", "\n", "optimizer_g", "=", "make_optimizer", "(", "G", ",", "args", ".", "lr_g", ")", "\n", "\n", "########################################################################################################################", "\n", "# Setup dataset & iterator", "\n", "print", "(", "'Load images from {} ...'", ".", "format", "(", "args", ".", "data_root", ")", ")", "\n", "trainset", "=", "H5pyDataset", "(", "args", ".", "data_root", ",", "load_size", "=", "args", ".", "load_size", ",", "crop_size", "=", "args", ".", "image_size", ")", "\n", "print", "(", "'\\tTrainset contains {} image files'", ".", "format", "(", "len", "(", "trainset", ")", ")", ")", "\n", "print", "(", "''", ")", "\n", "train_iter", "=", "chainer", ".", "iterators", ".", "MultiprocessIterator", "(", "trainset", ",", "args", ".", "batch_size", ",", "n_processes", "=", "args", ".", "workers", ",", "\n", "n_prefetch", "=", "args", ".", "workers", ")", "\n", "########################################################################################################################", "\n", "\n", "# Set up a trainer", "\n", "updater", "=", "WassersteinUpdater", "(", "\n", "models", "=", "(", "G", ",", "D", ")", ",", "\n", "args", "=", "args", ",", "\n", "iterator", "=", "train_iter", ",", "\n", "optimizer", "=", "{", "'main'", ":", "optimizer_g", ",", "'D'", ":", "optimizer_d", "}", ",", "\n", "device", "=", "args", ".", "gpu", "\n", ")", "\n", "trainer", "=", "training", ".", "Trainer", "(", "updater", ",", "(", "args", ".", "n_epoch", ",", "'epoch'", ")", ",", "out", "=", "args", ".", "experiment", ")", "\n", "\n", "# Snapshot", "\n", "snapshot_interval", "=", "(", "args", ".", "snapshot_interval", ",", "'epoch'", ")", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "snapshot", "(", "filename", "=", "'snapshot_epoch_{.updater.epoch}.npz'", ")", ",", "\n", "trigger", "=", "snapshot_interval", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot_object", "(", "\n", "G", ",", "'g_epoch_{.updater.epoch}.npz'", ")", ",", "trigger", "=", "snapshot_interval", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot_object", "(", "\n", "D", ",", "'d_epoch_{.updater.epoch}.npz'", ")", ",", "trigger", "=", "snapshot_interval", ")", "\n", "\n", "# Display", "\n", "print_interval", "=", "(", "args", ".", "print_interval", ",", "'iteration'", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "LogReport", "(", "trigger", "=", "print_interval", ")", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "PrintReport", "(", "[", "\n", "'iteration'", ",", "'main/loss'", ",", "'D/loss'", ",", "'D/loss_real'", ",", "'D/loss_fake'", "\n", "]", ")", ",", "trigger", "=", "print_interval", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "ProgressBar", "(", "update_interval", "=", "args", ".", "print_interval", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "dump_graph", "(", "'D/loss'", ",", "out_name", "=", "'TrainGraph.dot'", ")", ")", "\n", "\n", "# Plot", "\n", "plot_interval", "=", "(", "args", ".", "plot_interval", ",", "'iteration'", ")", "\n", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "[", "'main/loss'", "]", ",", "'iteration'", ",", "file_name", "=", "'loss.png'", ",", "trigger", "=", "plot_interval", ")", ",", "\n", "trigger", "=", "plot_interval", ")", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "[", "'D/loss'", "]", ",", "'iteration'", ",", "file_name", "=", "'d_loss.png'", ",", "trigger", "=", "plot_interval", ")", ",", "\n", "trigger", "=", "plot_interval", ")", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "[", "'D/loss_real'", "]", ",", "'iteration'", ",", "file_name", "=", "'loss_real.png'", ",", "trigger", "=", "plot_interval", ")", ",", "\n", "trigger", "=", "plot_interval", ")", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "[", "'D/loss_fake'", "]", ",", "'iteration'", ",", "file_name", "=", "'loss_fake.png'", ",", "trigger", "=", "plot_interval", ")", ",", "\n", "trigger", "=", "plot_interval", ")", "\n", "\n", "# Eval", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "experiment", ",", "'samples'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "print", "(", "'Saving samples to {} ...\\n'", ".", "format", "(", "path", ")", ")", "\n", "\n", "noisev", "=", "Variable", "(", "np", ".", "asarray", "(", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "args", ".", "test_size", ",", "args", ".", "nz", ",", "1", ",", "1", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "noisev", ".", "to_gpu", "(", "args", ".", "gpu", ")", "\n", "trainer", ".", "extend", "(", "sampler", "(", "G", ",", "path", ",", "noisev", ",", "'fake_samples_{}.png'", ")", ",", "trigger", "=", "plot_interval", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "# Resume from a snapshot", "\n", "        ", "print", "(", "'Resume from {} ... \\n'", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "args", ".", "resume", ",", "trainer", ")", "\n", "\n", "# Run the training", "\n", "", "print", "(", "'Training start ...\\n'", ")", "\n", "trainer", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.train_blending_gan.make_optimizer": [[21, 25], ["chainer.optimizers.Adam", "chainer.optimizers.Adam.setup"], "function", ["None"], ["def", "make_optimizer", "(", "model", ",", "alpha", ",", "beta1", ")", ":", "\n", "    ", "optimizer", "=", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "alpha", ",", "beta1", "=", "beta1", ")", "\n", "optimizer", ".", "setup", "(", "model", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.train_blending_gan.main": [[27, 175], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.seed", "print", "vars().items", "print", "print", "print", "model.EncoderDecoder", "print", "model.DCGAN_D", "print", "train_blending_gan.make_optimizer", "train_blending_gan.make_optimizer", "print", "sorted", "int", "print", "dataset.BlendingDataset", "dataset.BlendingDataset", "print", "print", "print", "chainer.iterators.MultiprocessIterator", "updater.EncoderDecoderBlendingUpdater", "chainer.training.Trainer", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "os.path.join", "print", "chainer.Variable", "training.Trainer.extend", "chainer.Variable", "training.Trainer.extend", "print", "training.Trainer.run", "print", "print", "chainer.cuda.get_device().use", "model.EncoderDecoder.to_gpu", "model.DCGAN_D.to_gpu", "chainer.training.extensions.snapshot", "chainer.training.extensions.snapshot_object", "chainer.training.extensions.snapshot_object", "chainer.training.extensions.LogReport", "chainer.training.extensions.PrintReport", "chainer.training.extensions.ProgressBar", "chainer.training.extensions.dump_graph", "chainer.training.extensions.PlotReport", "chainer.training.extensions.PlotReport", "chainer.training.extensions.PlotReport", "os.path.isdir", "os.makedirs", "chainer.dataset.concat_examples", "sampler.sampler", "chainer.dataset.concat_examples", "sampler.sampler", "print", "chainer.serializers.load_npz", "vars", "len", "len", "len", "len", "range", "range", "chainer.cuda.get_device", "os.listdir", "os.path.isdir", "os.path.join"], "function", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.train_blending_gan.make_optimizer", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.train_blending_gan.make_optimizer", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.sampler.sampler", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.sampler.sampler"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train Blending GAN'", ")", "\n", "parser", ".", "add_argument", "(", "'--nef'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of base filters in encoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of base filters in decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output channels in decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--nBottleneck'", ",", "type", "=", "int", ",", "default", "=", "4000", ",", "help", "=", "'# of output channels in encoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of base filters in D'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr_d'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'Learning rate for Critic, default=0.0002'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_g'", ",", "type", "=", "float", ",", "default", "=", "0.002", ",", "help", "=", "'Learning rate for Generator, default=0.002'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'Beta for Adam, default=0.5'", ")", "\n", "parser", ".", "add_argument", "(", "'--l2_weight'", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "help", "=", "'Weight for l2 loss, default=0.999'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'GPU ID (negative value indicates CPU)'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_epoch'", ",", "type", "=", "int", ",", "default", "=", "25", ",", "help", "=", "'# of epochs to train for'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "help", "=", "'Path to dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'Scale image to load_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--image_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'The height / width of the input image to network'", ")", "\n", "parser", ".", "add_argument", "(", "'--ratio'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'Ratio for center square size v.s. image_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_ratio'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "help", "=", "'Ratio for validation set v.s. data set'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--d_iters'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'# of D iters per each G iter'", ")", "\n", "parser", ".", "add_argument", "(", "'--clamp_lower'", ",", "type", "=", "float", ",", "default", "=", "-", "0.01", ",", "help", "=", "'Lower bound for clipping'", ")", "\n", "parser", ".", "add_argument", "(", "'--clamp_upper'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'Upper bound for clipping'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--experiment'", ",", "default", "=", "'encoder_decoder_blending_result'", ",", "\n", "help", "=", "'Where to store samples and models'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_folder'", ",", "default", "=", "'samples'", ",", "help", "=", "'Where to store test results'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'# of data loading workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'Input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'Batch size for testing'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--train_samples'", ",", "type", "=", "int", ",", "default", "=", "150000", ",", "help", "=", "'# of training examples'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_samples'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'# of testing examples'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--manual_seed'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'Manul seed'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "help", "=", "'Resume the training from snapshot'", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot_interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Interval of snapshot (epochs)'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Interval of printing log to console (iteration)'", ")", "\n", "parser", ".", "add_argument", "(", "'--plot_interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'Interval of plot (iteration)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "random", ".", "seed", "(", "args", ".", "manual_seed", ")", "\n", "\n", "print", "(", "'Input arguments:'", ")", "\n", "for", "key", ",", "value", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "'\\t{}: {}'", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "", "print", "(", "''", ")", "\n", "\n", "# Set up G & D", "\n", "print", "(", "'Create & Init models ...'", ")", "\n", "print", "(", "'\\tInit G network ...'", ")", "\n", "G", "=", "EncoderDecoder", "(", "args", ".", "nef", ",", "args", ".", "ngf", ",", "args", ".", "nc", ",", "args", ".", "nBottleneck", ",", "image_size", "=", "args", ".", "image_size", ",", "conv_init", "=", "init_conv", ",", "\n", "bn_init", "=", "init_bn", ")", "\n", "print", "(", "'\\tInit D network ...'", ")", "\n", "D", "=", "DCGAN_D", "(", "args", ".", "image_size", ",", "args", ".", "ndf", ",", "conv_init", "=", "init_conv", ",", "bn_init", "=", "init_bn", ")", "\n", "if", "args", ".", "gpu", ">=", "0", ":", "\n", "        ", "print", "(", "'\\tCopy models to gpu {} ...'", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "chainer", ".", "cuda", ".", "get_device", "(", "args", ".", "gpu", ")", ".", "use", "(", ")", "# Make a specified GPU current", "\n", "G", ".", "to_gpu", "(", ")", "# Copy the model to the GPU", "\n", "D", ".", "to_gpu", "(", ")", "\n", "", "print", "(", "'Init models done ...\\n'", ")", "\n", "# Setup an optimizer", "\n", "optimizer_d", "=", "make_optimizer", "(", "D", ",", "args", ".", "lr_d", ",", "args", ".", "beta1", ")", "\n", "optimizer_g", "=", "make_optimizer", "(", "G", ",", "args", ".", "lr_g", ",", "args", ".", "beta1", ")", "\n", "\n", "########################################################################################################################", "\n", "# Setup dataset & iterator", "\n", "print", "(", "'Load images from {} ...'", ".", "format", "(", "args", ".", "data_root", ")", ")", "\n", "folders", "=", "sorted", "(", "\n", "[", "folder", "for", "folder", "in", "os", ".", "listdir", "(", "args", ".", "data_root", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "folder", ")", ")", "]", ")", "\n", "val_end", "=", "int", "(", "args", ".", "val_ratio", "*", "len", "(", "folders", ")", ")", "\n", "print", "(", "'\\t{} folders in total, {} val folders ...'", ".", "format", "(", "len", "(", "folders", ")", ",", "val_end", ")", ")", "\n", "trainset", "=", "BlendingDataset", "(", "args", ".", "train_samples", ",", "folders", "[", "val_end", ":", "]", ",", "args", ".", "data_root", ",", "args", ".", "ratio", ",", "args", ".", "load_size", ",", "\n", "args", ".", "image_size", ")", "\n", "valset", "=", "BlendingDataset", "(", "args", ".", "test_samples", ",", "folders", "[", ":", "val_end", "]", ",", "args", ".", "data_root", ",", "args", ".", "ratio", ",", "args", ".", "load_size", ",", "\n", "args", ".", "image_size", ")", "\n", "print", "(", "'\\tTrainset contains {} image files'", ".", "format", "(", "len", "(", "trainset", ")", ")", ")", "\n", "print", "(", "'\\tValset contains {} image files'", ".", "format", "(", "len", "(", "valset", ")", ")", ")", "\n", "print", "(", "''", ")", "\n", "train_iter", "=", "chainer", ".", "iterators", ".", "MultiprocessIterator", "(", "trainset", ",", "args", ".", "batch_size", ",", "n_processes", "=", "args", ".", "workers", ",", "\n", "n_prefetch", "=", "args", ".", "workers", ")", "\n", "########################################################################################################################", "\n", "\n", "# Set up a trainer", "\n", "updater", "=", "EncoderDecoderBlendingUpdater", "(", "\n", "models", "=", "(", "G", ",", "D", ")", ",", "\n", "args", "=", "args", ",", "\n", "iterator", "=", "train_iter", ",", "\n", "optimizer", "=", "{", "'main'", ":", "optimizer_g", ",", "'D'", ":", "optimizer_d", "}", ",", "\n", "device", "=", "args", ".", "gpu", "\n", ")", "\n", "trainer", "=", "training", ".", "Trainer", "(", "updater", ",", "(", "args", ".", "n_epoch", ",", "'epoch'", ")", ",", "out", "=", "args", ".", "experiment", ")", "\n", "\n", "# Snapshot", "\n", "snapshot_interval", "=", "(", "args", ".", "snapshot_interval", ",", "'epoch'", ")", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "snapshot", "(", "filename", "=", "'snapshot_epoch_{.updater.epoch}.npz'", ")", ",", "\n", "trigger", "=", "snapshot_interval", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot_object", "(", "\n", "G", ",", "'g_epoch_{.updater.epoch}.npz'", ")", ",", "trigger", "=", "snapshot_interval", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot_object", "(", "\n", "D", ",", "'d_epoch_{.updater.epoch}.npz'", ")", ",", "trigger", "=", "snapshot_interval", ")", "\n", "\n", "# Display", "\n", "print_interval", "=", "(", "args", ".", "print_interval", ",", "'iteration'", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "LogReport", "(", "trigger", "=", "print_interval", ")", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "PrintReport", "(", "[", "\n", "'iteration'", ",", "'main/loss'", ",", "'D/loss'", ",", "'main/l2_loss'", "\n", "]", ")", ",", "trigger", "=", "print_interval", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "ProgressBar", "(", "update_interval", "=", "args", ".", "print_interval", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "dump_graph", "(", "'D/loss'", ",", "out_name", "=", "'TrainGraph.dot'", ")", ")", "\n", "\n", "# Plot", "\n", "plot_interval", "=", "(", "args", ".", "plot_interval", ",", "'iteration'", ")", "\n", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "[", "'main/loss'", "]", ",", "'iteration'", ",", "file_name", "=", "'loss.png'", ",", "trigger", "=", "plot_interval", ")", ")", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "[", "'D/loss'", "]", ",", "'iteration'", ",", "file_name", "=", "'d_loss.png'", ",", "trigger", "=", "plot_interval", ")", ")", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "[", "'main/l2_loss'", "]", ",", "'iteration'", ",", "file_name", "=", "'l2_loss.png'", ",", "trigger", "=", "plot_interval", ")", ")", "\n", "\n", "# Eval", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "experiment", ",", "args", ".", "test_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "print", "(", "'Saving samples to {} ...\\n'", ".", "format", "(", "path", ")", ")", "\n", "\n", "train_batch", "=", "[", "trainset", "[", "idx", "]", "[", "0", "]", "for", "idx", "in", "range", "(", "args", ".", "test_size", ")", "]", "\n", "train_v", "=", "Variable", "(", "chainer", ".", "dataset", ".", "concat_examples", "(", "train_batch", ",", "args", ".", "gpu", ")", ")", "\n", "trainer", ".", "extend", "(", "sampler", "(", "G", ",", "path", ",", "train_v", ",", "'fake_samples_train_{}.png'", ")", ",", "trigger", "=", "plot_interval", ")", "\n", "\n", "val_batch", "=", "[", "valset", "[", "idx", "]", "[", "0", "]", "for", "idx", "in", "range", "(", "args", ".", "test_size", ")", "]", "\n", "val_v", "=", "Variable", "(", "chainer", ".", "dataset", ".", "concat_examples", "(", "val_batch", ",", "args", ".", "gpu", ")", ")", "\n", "trainer", ".", "extend", "(", "sampler", "(", "G", ",", "path", ",", "val_v", ",", "'fake_samples_val_{}.png'", ")", ",", "trigger", "=", "plot_interval", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "# Resume from a snapshot", "\n", "        ", "print", "(", "'Resume from {} ... \\n'", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "args", ".", "resume", ",", "trainer", ")", "\n", "\n", "# Run the training", "\n", "", "print", "(", "'Training start ...\\n'", ")", "\n", "trainer", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.dataset.H5pyDataset.__init__": [[12, 19], ["H5PYDataset"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "which_set", "=", "'train'", ",", "load_size", "=", "None", ",", "crop_size", "=", "None", ",", "dtype", "=", "numpy", ".", "float32", ")", ":", "\n", "        ", "from", "fuel", ".", "datasets", ".", "hdf5", "import", "H5PYDataset", "\n", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_load_size", "=", "load_size", "\n", "self", ".", "_crop_size", "=", "crop_size", "\n", "self", ".", "_data_set", "=", "H5PYDataset", "(", "path", ",", "which_sets", "=", "(", "which_set", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.dataset.H5pyDataset.__len__": [[20, 22], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data_set", ".", "num_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.dataset.H5pyDataset.get_example": [[23, 43], ["dataset.H5pyDataset._data_set.open", "dataset.H5pyDataset._data_set.get_data", "dataset.H5pyDataset._data_set.close", "numpy.squeeze", "min", "skimage.transform.resize", "numpy.asarray", "slice", "int", "int", "numpy.random.random_integers", "numpy.random.random_integers", "numpy.transpose", "math.ceil", "math.ceil"], "methods", ["None"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "        ", "handle", "=", "self", ".", "_data_set", ".", "open", "(", ")", "\n", "data", "=", "self", ".", "_data_set", ".", "get_data", "(", "handle", ",", "slice", "(", "i", ",", "i", "+", "1", ")", ")", "\n", "self", ".", "_data_set", ".", "close", "(", "handle", ")", "\n", "\n", "im", "=", "numpy", ".", "squeeze", "(", "data", "[", "0", "]", ")", "\n", "\n", "w", ",", "h", ",", "_", "=", "im", ".", "shape", "\n", "min_size", "=", "min", "(", "w", ",", "h", ")", "\n", "ratio", "=", "self", ".", "_load_size", "/", "min_size", "\n", "rw", ",", "rh", "=", "int", "(", "math", ".", "ceil", "(", "w", "*", "ratio", ")", ")", ",", "int", "(", "math", ".", "ceil", "(", "h", "*", "ratio", ")", ")", "\n", "im", "=", "resize", "(", "im", ",", "(", "rw", ",", "rh", ")", ",", "order", "=", "1", ",", "mode", "=", "'constant'", ")", "\n", "\n", "sx", ",", "sy", "=", "numpy", ".", "random", ".", "random_integers", "(", "0", ",", "rw", "-", "self", ".", "_crop_size", ")", ",", "numpy", ".", "random", ".", "random_integers", "(", "0", ",", "\n", "rh", "-", "self", ".", "_crop_size", ")", "\n", "im", "=", "im", "[", "sx", ":", "sx", "+", "self", ".", "_crop_size", ",", "sy", ":", "sy", "+", "self", ".", "_crop_size", ",", ":", "]", "*", "2", "-", "1", "\n", "\n", "im", "=", "numpy", ".", "asarray", "(", "numpy", ".", "transpose", "(", "im", ",", "(", "2", ",", "0", ",", "1", ")", ")", ",", "dtype", "=", "self", ".", "_dtype", ")", "\n", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.dataset.BlendingDataset.__init__": [[46, 61], ["int", "range", "glob.glob", "numpy.random.choice", "numpy.random.choice", "dataset.BlendingDataset._imgs.append", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "total_examples", ",", "folders", ",", "root", ",", "ratio", ",", "load_size", ",", "crop_size", ",", "dtype", "=", "numpy", ".", "float32", ")", ":", "\n", "        ", "imgs_per_folder", "=", "{", "folder", ":", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "folder", ",", "'*'", ")", ")", "for", "folder", "in", "folders", "}", "\n", "self", ".", "_len", "=", "total_examples", "\n", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_load_size", "=", "load_size", "\n", "self", ".", "_crop_size", "=", "crop_size", "\n", "self", ".", "_size", "=", "int", "(", "self", ".", "_crop_size", "*", "ratio", ")", "\n", "self", ".", "_sx", "=", "self", ".", "_crop_size", "//", "2", "-", "self", ".", "_size", "//", "2", "\n", "\n", "self", ".", "_imgs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "_len", ")", ":", "\n", "            ", "folder", "=", "numpy", ".", "random", ".", "choice", "(", "folders", ")", "\n", "obj_path", ",", "bg_path", "=", "numpy", ".", "random", ".", "choice", "(", "imgs_per_folder", "[", "folder", "]", ",", "2", ",", "replace", "=", "False", ")", "\n", "self", ".", "_imgs", ".", "append", "(", "(", "obj_path", ",", "bg_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.dataset.BlendingDataset.__len__": [[62, 64], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_len", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.dataset.BlendingDataset._crop": [[65, 71], ["skimage.transform.resize", "numpy.transpose().astype", "numpy.transpose"], "methods", ["None"], ["", "def", "_crop", "(", "self", ",", "im", ",", "rw", ",", "rh", ",", "sx", ",", "sy", ")", ":", "\n", "        ", "im", "=", "resize", "(", "im", ",", "(", "rw", ",", "rh", ")", ",", "order", "=", "1", ",", "preserve_range", "=", "False", ",", "mode", "=", "'constant'", ")", "\n", "im", "=", "im", "[", "sx", ":", "sx", "+", "self", ".", "_crop_size", ",", "sy", ":", "sy", "+", "self", ".", "_crop_size", ",", ":", "]", "*", "2", "-", "1", "\n", "im", "=", "numpy", ".", "transpose", "(", "im", ",", "(", "2", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "self", ".", "_dtype", ")", "\n", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.dataset.BlendingDataset.get_example": [[72, 93], ["skimage.io.imread", "skimage.io.imread", "min", "dataset.BlendingDataset._crop", "dataset.BlendingDataset._crop", "dataset.BlendingDataset.copy", "int", "int", "numpy.random.random_integers", "numpy.random.random_integers", "math.ceil", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.dataset.BlendingDataset._crop", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.dataset.BlendingDataset._crop"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "        ", "obj_path", ",", "bg_path", "=", "self", ".", "_imgs", "[", "i", "]", "\n", "obj", "=", "imread", "(", "obj_path", ")", "\n", "bg", "=", "imread", "(", "bg_path", ")", "\n", "\n", "w", ",", "h", ",", "_", "=", "obj", ".", "shape", "\n", "min_size", "=", "min", "(", "w", ",", "h", ")", "\n", "ratio", "=", "self", ".", "_load_size", "/", "min_size", "\n", "rw", ",", "rh", "=", "int", "(", "math", ".", "ceil", "(", "w", "*", "ratio", ")", ")", ",", "int", "(", "math", ".", "ceil", "(", "h", "*", "ratio", ")", ")", "\n", "sx", ",", "sy", "=", "numpy", ".", "random", ".", "random_integers", "(", "0", ",", "rw", "-", "self", ".", "_crop_size", ")", ",", "numpy", ".", "random", ".", "random_integers", "(", "0", ",", "\n", "rh", "-", "self", ".", "_crop_size", ")", "\n", "\n", "obj_croped", "=", "self", ".", "_crop", "(", "obj", ",", "rw", ",", "rh", ",", "sx", ",", "sy", ")", "\n", "bg_croped", "=", "self", ".", "_crop", "(", "bg", ",", "rw", ",", "rh", ",", "sx", ",", "sy", ")", "\n", "\n", "copy_paste", "=", "bg_croped", ".", "copy", "(", ")", "\n", "copy_paste", "[", ":", ",", "self", ".", "_sx", ":", "self", ".", "_sx", "+", "self", ".", "_size", ",", "self", ".", "_sx", ":", "self", ".", "_sx", "+", "self", ".", "_size", "]", "=", "obj_croped", "[", ":", ",", "\n", "self", ".", "_sx", ":", "self", ".", "_sx", "+", "self", ".", "_size", ",", "\n", "self", ".", "_sx", ":", "self", ".", "_sx", "+", "self", ".", "_size", "]", "\n", "\n", "return", "copy_paste", ",", "bg_croped", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.sampler.sampler": [[10, 22], ["chainer.training.make_extension", "chainer.using_config", "chainer.no_backprop_mode", "G", "chainer.cuda.to_cpu", "utils.make_grid", "numpy.asarray", "skimage.io.imsave", "numpy.transpose", "os.path.join", "numpy.clip", "name.format"], "function", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.utils.make_grid"], ["def", "sampler", "(", "G", ",", "dst", ",", "inputv", ",", "name", ")", ":", "\n", "    ", "@", "chainer", ".", "training", ".", "make_extension", "(", ")", "\n", "def", "make_image", "(", "trainer", ")", ":", "\n", "        ", "with", "chainer", ".", "using_config", "(", "\"Train\"", ",", "False", ")", ":", "\n", "            ", "with", "chainer", ".", "no_backprop_mode", "(", ")", ":", "\n", "                ", "fake", "=", "G", "(", "inputv", ")", "\n", "fake", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "fake", ".", "data", ")", "\n", "img", "=", "make_grid", "(", "fake", ")", "\n", "img", "=", "np", ".", "asarray", "(", "np", ".", "transpose", "(", "np", ".", "clip", "(", "(", "img", "+", "1", ")", "*", "127.5", ",", "0", ",", "255", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "imsave", "(", "os", ".", "path", ".", "join", "(", "dst", ",", "name", ".", "format", "(", "trainer", ".", "updater", ".", "iteration", ")", ")", ",", "img", ")", "\n", "\n", "", "", "", "return", "make_image", "\n", "", ""]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.ReLU.__init__": [[18, 20], ["chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.Chain.__init__"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.ReLU.__call__": [[21, 23], ["chainer.relu", "chainer.relu", "chainer.relu"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.Tanh.__init__": [[26, 28], ["chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.Chain.__init__"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Tanh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.Tanh.__call__": [[29, 31], ["chainer.tanh", "chainer.tanh", "chainer.tanh"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "tanh", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.LeakyReLU.__init__": [[34, 36], ["chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.Chain.__init__"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeakyReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.LeakyReLU.__call__": [[37, 39], ["chainer.leaky_relu", "chainer.leaky_relu", "chainer.leaky_relu"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "leaky_relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.DCGAN_G.__init__": [[42, 64], ["layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "chainer.ChainList.__init__", "chainer.ChainList.__init__", "chainer.ChainList.__init__", "chainer.Deconvolution2D", "chainer.Deconvolution2D", "chainer.Deconvolution2D", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.BatchNormalization", "model.ReLU", "layers.append", "layers.append", "layers.append", "chainer.Deconvolution2D", "chainer.Deconvolution2D", "chainer.Deconvolution2D", "model.Tanh", "chainer.Deconvolution2D", "chainer.Deconvolution2D", "chainer.Deconvolution2D", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.BatchNormalization", "model.ReLU"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "isize", ",", "nc", ",", "ngf", ",", "conv_init", "=", "None", ",", "bn_init", "=", "None", ")", ":", "\n", "        ", "cngf", ",", "tisize", "=", "ngf", "//", "2", ",", "4", "\n", "while", "tisize", "!=", "isize", ":", "\n", "            ", "cngf", "=", "cngf", "*", "2", "\n", "tisize", "=", "tisize", "*", "2", "\n", "\n", "", "layers", "=", "[", "]", "\n", "# input is Z, going into a convolution", "\n", "layers", ".", "append", "(", "L", ".", "Deconvolution2D", "(", "None", ",", "cngf", ",", "ksize", "=", "4", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "initialW", "=", "conv_init", ",", "nobias", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "L", ".", "BatchNormalization", "(", "cngf", ",", "initial_gamma", "=", "bn_init", ")", ")", "\n", "layers", ".", "append", "(", "ReLU", "(", ")", ")", "\n", "csize", ",", "cndf", "=", "4", ",", "cngf", "\n", "while", "csize", "<", "isize", "//", "2", ":", "\n", "            ", "layers", ".", "append", "(", "L", ".", "Deconvolution2D", "(", "None", ",", "cngf", "//", "2", ",", "ksize", "=", "4", ",", "stride", "=", "2", ",", "pad", "=", "1", ",", "initialW", "=", "conv_init", ",", "nobias", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "L", ".", "BatchNormalization", "(", "cngf", "//", "2", ",", "initial_gamma", "=", "bn_init", ")", ")", "\n", "layers", ".", "append", "(", "ReLU", "(", ")", ")", "\n", "cngf", "=", "cngf", "//", "2", "\n", "csize", "=", "csize", "*", "2", "\n", "", "layers", ".", "append", "(", "L", ".", "Deconvolution2D", "(", "None", ",", "nc", ",", "ksize", "=", "4", ",", "stride", "=", "2", ",", "pad", "=", "1", ",", "initialW", "=", "conv_init", ",", "nobias", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "Tanh", "(", ")", ")", "\n", "\n", "super", "(", "DCGAN_G", ",", "self", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.DCGAN_G.__call__": [[65, 70], ["range", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "x", "=", "self", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.DCGAN_D.__init__": [[73, 91], ["layers.append", "layers.append", "layers.append", "chainer.ChainList.__init__", "chainer.ChainList.__init__", "chainer.ChainList.__init__", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "model.LeakyReLU", "layers.append", "layers.append", "layers.append", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.BatchNormalization", "model.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "isize", ",", "ndf", ",", "nz", "=", "1", ",", "conv_init", "=", "None", ",", "bn_init", "=", "None", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "L", ".", "Convolution2D", "(", "None", ",", "ndf", ",", "ksize", "=", "4", ",", "stride", "=", "2", ",", "pad", "=", "1", ",", "initialW", "=", "conv_init", ",", "nobias", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "LeakyReLU", "(", ")", ")", "\n", "csize", ",", "cndf", "=", "isize", "/", "2", ",", "ndf", "\n", "while", "csize", ">", "4", ":", "\n", "            ", "in_feat", "=", "cndf", "\n", "out_feat", "=", "cndf", "*", "2", "\n", "layers", ".", "append", "(", "L", ".", "Convolution2D", "(", "None", ",", "out_feat", ",", "ksize", "=", "4", ",", "stride", "=", "2", ",", "pad", "=", "1", ",", "initialW", "=", "conv_init", ",", "nobias", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "L", ".", "BatchNormalization", "(", "out_feat", ",", "initial_gamma", "=", "bn_init", ")", ")", "\n", "layers", ".", "append", "(", "LeakyReLU", "(", ")", ")", "\n", "\n", "cndf", "=", "cndf", "*", "2", "\n", "csize", "=", "csize", "/", "2", "\n", "# state size. K x 4 x 4", "\n", "", "layers", ".", "append", "(", "L", ".", "Convolution2D", "(", "None", ",", "nz", ",", "ksize", "=", "4", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "initialW", "=", "conv_init", ",", "nobias", "=", "True", ")", ")", "\n", "\n", "super", "(", "DCGAN_D", ",", "self", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.DCGAN_D.encode": [[92, 97], ["range", "len"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "x", "=", "self", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.DCGAN_D.__call__": [[98, 102], ["model.DCGAN_D.encode", "chainer.squeeze", "chainer.squeeze", "chainer.squeeze", "chainer.sum", "chainer.sum", "chainer.sum"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.encode"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "encode", "(", "x", ")", "\n", "x", "=", "F", ".", "sum", "(", "x", ",", "axis", "=", "0", ")", "/", "x", ".", "shape", "[", "0", "]", "\n", "return", "F", ".", "squeeze", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__": [[105, 110], ["chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.Chain.__init__", "model.DCGAN_D", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.BatchNormalization", "model.DCGAN_G"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nef", ",", "ngf", ",", "nc", ",", "nBottleneck", ",", "image_size", "=", "64", ",", "conv_init", "=", "None", ",", "bn_init", "=", "None", ")", ":", "\n", "        ", "super", "(", "EncoderDecoder", ",", "self", ")", ".", "__init__", "(", "\n", "encoder", "=", "DCGAN_D", "(", "image_size", ",", "nef", ",", "nBottleneck", ",", "conv_init", ",", "bn_init", ")", ",", "\n", "bn", "=", "L", ".", "BatchNormalization", "(", "nBottleneck", ",", "initial_gamma", "=", "bn_init", ")", ",", "\n", "decoder", "=", "DCGAN_G", "(", "image_size", ",", "nc", ",", "ngf", ",", "conv_init", ",", "bn_init", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.encode": [[112, 117], ["model.EncoderDecoder.encoder.encode", "chainer.leaky_relu", "chainer.leaky_relu", "chainer.leaky_relu", "model.EncoderDecoder.bn"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.encode"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "encoder", ".", "encode", "(", "x", ")", "\n", "h", "=", "F", ".", "leaky_relu", "(", "self", ".", "bn", "(", "h", ")", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.decode": [[118, 122], ["model.EncoderDecoder.decoder"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "decoder", "(", "x", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.__call__": [[123, 127], ["model.EncoderDecoder.encode", "model.EncoderDecoder.decode"], "methods", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.encode", "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.EncoderDecoder.decode"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "encode", "(", "x", ")", "\n", "h", "=", "self", ".", "decode", "(", "h", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.init_conv": [[7, 10], ["chainer.cuda.get_array_module", "cuda.get_array_module.random.normal"], "function", ["None"], ["def", "init_conv", "(", "array", ")", ":", "\n", "    ", "xp", "=", "cuda", ".", "get_array_module", "(", "array", ")", "\n", "array", "[", "...", "]", "=", "xp", ".", "random", ".", "normal", "(", "loc", "=", "0.0", ",", "scale", "=", "0.02", ",", "size", "=", "array", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.model.init_bn": [[12, 15], ["chainer.cuda.get_array_module", "cuda.get_array_module.random.normal"], "function", ["None"], ["", "def", "init_bn", "(", "array", ")", ":", "\n", "    ", "xp", "=", "cuda", ".", "get_array_module", "(", "array", ")", "\n", "array", "[", "...", "]", "=", "xp", ".", "random", ".", "normal", "(", "loc", "=", "1.0", ",", "scale", "=", "0.02", ",", "size", "=", "array", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.utils.make_grid": [[6, 28], ["int", "int", "numpy.ones", "range", "math.ceil", "int", "int", "range"], "function", ["None"], ["def", "make_grid", "(", "tensor", ",", "padding", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Given a 4D mini-batch Tensor of shape (B x C x H x W), makes a grid of images\n    \"\"\"", "\n", "# make the mini-batch of images into a grid", "\n", "nmaps", "=", "tensor", ".", "shape", "[", "0", "]", "\n", "xmaps", "=", "int", "(", "nmaps", "**", "0.5", ")", "\n", "ymaps", "=", "int", "(", "math", ".", "ceil", "(", "nmaps", "/", "xmaps", ")", ")", "\n", "height", ",", "width", "=", "int", "(", "tensor", ".", "shape", "[", "2", "]", "+", "padding", ")", ",", "int", "(", "tensor", ".", "shape", "[", "3", "]", "+", "padding", ")", "\n", "grid", "=", "np", ".", "ones", "(", "(", "3", ",", "height", "*", "ymaps", ",", "width", "*", "xmaps", ")", ")", "\n", "k", "=", "0", "\n", "sy", "=", "1", "+", "padding", "//", "2", "\n", "for", "y", "in", "range", "(", "ymaps", ")", ":", "\n", "        ", "sx", "=", "1", "+", "padding", "//", "2", "\n", "for", "x", "in", "range", "(", "xmaps", ")", ":", "\n", "            ", "if", "k", ">=", "nmaps", ":", "\n", "                ", "break", "\n", "", "grid", "[", ":", ",", "sy", ":", "sy", "+", "height", "-", "padding", ",", "sx", ":", "sx", "+", "width", "-", "padding", "]", "=", "tensor", "[", "k", "]", "\n", "sx", "+=", "width", "\n", "k", "=", "k", "+", "1", "\n", "", "sy", "+=", "height", "\n", "", "return", "grid", "\n", "", ""]], "home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.run_gp_gan.main": [[19, 112], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "vars().items", "print", "len", "range", "print", "model.EncoderDecoder", "print", "chainer.serializers.load_npz", "model.DCGAN_G", "print", "chainer.serializers.load_npz", "chainer.cuda.get_device().use", "model.DCGAN_G.to_gpu", "print", "print", "print", "print", "skimage.img_as_float", "skimage.img_as_float", "skimage.io.imread().astype", "vars", "open", "os.path.isdir", "os.makedirs", "skimage.io.imread", "skimage.io.imread", "chainer.using_config", "gp_gan.gp_gan", "skimage.io.imsave", "skimage.io.imsave", "chainer.cuda.get_device", "line.strip().split", "len", "skimage.io.imread", "basename", "basename", "basename", "line.strip"], "function", ["home.repos.pwc.inspect_result.wuhuikai_GP-GAN.None.gp_gan.gp_gan"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Gaussian-Poisson GAN for high-resolution image blending'", ")", "\n", "parser", ".", "add_argument", "(", "'--nef'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of base filters in encoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of base filters in decoder or G'", ")", "\n", "parser", ".", "add_argument", "(", "'--nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output channels in decoder or G'", ")", "\n", "parser", ".", "add_argument", "(", "'--nBottleneck'", ",", "type", "=", "int", ",", "default", "=", "4000", ",", "help", "=", "'# of output channels in encoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of base filters in D'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--image_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'The height / width of the input image to network'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--color_weight'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'Color weight'", ")", "\n", "parser", ".", "add_argument", "(", "'--sigma'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'Sigma for gaussian smooth of Gaussian-Poisson Equation'", ")", "\n", "parser", ".", "add_argument", "(", "'--gradient_kernel'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "help", "=", "'Kernel type for calc gradient'", ")", "\n", "parser", ".", "add_argument", "(", "'--smooth_sigma'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'Sigma for gaussian smooth of Laplacian pyramid'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--supervised'", ",", "type", "=", "lambda", "x", ":", "x", "==", "'True'", ",", "default", "=", "True", ",", "\n", "help", "=", "'Use unsupervised Blending GAN if False'", ")", "\n", "parser", ".", "add_argument", "(", "'--nz'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'Size of the latent z vector'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_iteration'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'# of iterations for optimizing z'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'GPU ID (negative value indicates CPU)'", ")", "\n", "parser", ".", "add_argument", "(", "'--g_path'", ",", "default", "=", "'models/blending_gan.npz'", ",", "help", "=", "'Path for pretrained Blending GAN model'", ")", "\n", "parser", ".", "add_argument", "(", "'--unsupervised_path'", ",", "default", "=", "'models/unsupervised_blending_gan.npz'", ",", "\n", "help", "=", "'Path for pretrained unsupervised Blending GAN model'", ")", "\n", "parser", ".", "add_argument", "(", "'--list_path'", ",", "default", "=", "''", ",", "\n", "help", "=", "'File for input list in csv format: obj_path;bg_path;mask_path in each line'", ")", "\n", "parser", ".", "add_argument", "(", "'--result_folder'", ",", "default", "=", "'blending_result'", ",", "help", "=", "'Name for folder storing results'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--src_image'", ",", "default", "=", "''", ",", "help", "=", "'Path for source image'", ")", "\n", "parser", ".", "add_argument", "(", "'--dst_image'", ",", "default", "=", "''", ",", "help", "=", "'Path for destination image'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask_image'", ",", "default", "=", "''", ",", "help", "=", "'Path for mask image'", ")", "\n", "parser", ".", "add_argument", "(", "'--blended_image'", ",", "default", "=", "''", ",", "help", "=", "'Where to save blended image'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "'Input arguments:'", ")", "\n", "for", "key", ",", "value", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "'\\t{}: {}'", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "", "print", "(", "''", ")", "\n", "\n", "# Init CNN model", "\n", "if", "args", ".", "supervised", ":", "\n", "        ", "G", "=", "EncoderDecoder", "(", "args", ".", "nef", ",", "args", ".", "ngf", ",", "args", ".", "nc", ",", "args", ".", "nBottleneck", ",", "image_size", "=", "args", ".", "image_size", ")", "\n", "print", "(", "'Load pretrained Blending GAN model from {} ...'", ".", "format", "(", "args", ".", "g_path", ")", ")", "\n", "serializers", ".", "load_npz", "(", "args", ".", "g_path", ",", "G", ")", "\n", "", "else", ":", "\n", "        ", "chainer", ".", "config", ".", "use_cudnn", "=", "'never'", "\n", "G", "=", "DCGAN_G", "(", "args", ".", "image_size", ",", "args", ".", "nc", ",", "args", ".", "ngf", ")", "\n", "print", "(", "'Load pretrained unsupervised Blending GAN model from {} ...'", ".", "format", "(", "args", ".", "unsupervised_path", ")", ")", "\n", "serializers", ".", "load_npz", "(", "args", ".", "unsupervised_path", ",", "G", ")", "\n", "\n", "", "if", "args", ".", "gpu", ">=", "0", ":", "\n", "        ", "cuda", ".", "get_device", "(", "args", ".", "gpu", ")", ".", "use", "(", ")", "# Make a specified GPU current", "\n", "G", ".", "to_gpu", "(", ")", "# Copy the model to the GPU", "\n", "\n", "# Init image list", "\n", "", "if", "args", ".", "list_path", ":", "\n", "        ", "print", "(", "'Load images from {} ...'", ".", "format", "(", "args", ".", "list_path", ")", ")", "\n", "with", "open", "(", "args", ".", "list_path", ")", "as", "f", ":", "\n", "            ", "test_list", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "';'", ")", "for", "line", "in", "f", "]", "\n", "", "print", "(", "'\\t {} images in total ...\\n'", ".", "format", "(", "len", "(", "test_list", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "test_list", "=", "[", "(", "args", ".", "src_image", ",", "args", ".", "dst_image", ",", "args", ".", "mask_image", ")", "]", "\n", "\n", "", "if", "not", "args", ".", "blended_image", ":", "\n", "# Init result folder", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "result_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "result_folder", ")", "\n", "", "print", "(", "'Result will save to {} ...\\n'", ".", "format", "(", "args", ".", "result_folder", ")", ")", "\n", "\n", "", "total_size", "=", "len", "(", "test_list", ")", "\n", "for", "idx", "in", "range", "(", "total_size", ")", ":", "\n", "        ", "print", "(", "'Processing {}/{} ...'", ".", "format", "(", "idx", "+", "1", ",", "total_size", ")", ")", "\n", "\n", "# load image", "\n", "obj", "=", "img_as_float", "(", "imread", "(", "test_list", "[", "idx", "]", "[", "0", "]", ")", ")", "\n", "bg", "=", "img_as_float", "(", "imread", "(", "test_list", "[", "idx", "]", "[", "1", "]", ")", ")", "\n", "mask", "=", "imread", "(", "test_list", "[", "idx", "]", "[", "2", "]", ",", "as_gray", "=", "True", ")", ".", "astype", "(", "obj", ".", "dtype", ")", "\n", "\n", "with", "chainer", ".", "using_config", "(", "\"train\"", ",", "False", ")", ":", "\n", "            ", "blended_im", "=", "gp_gan", "(", "obj", ",", "bg", ",", "mask", ",", "G", ",", "args", ".", "image_size", ",", "args", ".", "gpu", ",", "color_weight", "=", "args", ".", "color_weight", ",", "\n", "sigma", "=", "args", ".", "sigma", ",", "\n", "gradient_kernel", "=", "args", ".", "gradient_kernel", ",", "smooth_sigma", "=", "args", ".", "smooth_sigma", ",", "\n", "supervised", "=", "args", ".", "supervised", ",", "\n", "nz", "=", "args", ".", "nz", ",", "n_iteration", "=", "args", ".", "n_iteration", ")", "\n", "\n", "", "if", "args", ".", "blended_image", ":", "\n", "            ", "imsave", "(", "args", ".", "blended_image", ",", "blended_im", ")", "\n", "", "else", ":", "\n", "            ", "imsave", "(", "'{}/obj_{}_bg_{}_mask_{}.png'", ".", "format", "(", "args", ".", "result_folder", ",", "basename", "(", "test_list", "[", "idx", "]", "[", "0", "]", ")", ",", "\n", "basename", "(", "test_list", "[", "idx", "]", "[", "1", "]", ")", ",", "basename", "(", "test_list", "[", "idx", "]", "[", "2", "]", ")", ")", ",", "\n", "blended_im", ")", "\n", "\n"]]}