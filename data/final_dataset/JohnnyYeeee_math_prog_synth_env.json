{"home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.Node.__init__": [[7, 18], ["type", "len", "inspect.signature", "inspect.signature().parameters.items", "inspect.signature"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "action", "=", "action", "\n", "self", ".", "args", "=", "[", "]", "\n", "if", "type", "(", "self", ".", "action", ")", "==", "str", ":", "# if action is a formal element", "\n", "            ", "self", ".", "num_parameters", "=", "0", "\n", "self", ".", "types", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_parameters", "=", "len", "(", "signature", "(", "self", ".", "action", ")", ".", "parameters", ")", "\n", "self", ".", "types", "=", "[", "\n", "type_", ".", "annotation", "\n", "for", "name", ",", "type_", "in", "signature", "(", "self", ".", "action", ")", ".", "parameters", ".", "items", "(", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.Node.set_arg": [[20, 23], ["compute_graph.Node.args.append", "len"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append"], ["", "", "def", "set_arg", "(", "self", ",", "node", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "args", ")", "<", "self", ".", "num_parameters", "\n", "self", ".", "args", ".", "append", "(", "node", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.Node.set_args": [[24, 27], ["len"], "methods", ["None"], ["", "def", "set_args", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "args", ")", "==", "0", "\n", "self", ".", "args", "=", "nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.Node.are_args_set": [[28, 30], ["len"], "methods", ["None"], ["", "def", "are_args_set", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "args", ")", "==", "self", ".", "num_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.__init__": [[33, 40], ["math_prog_synth_env.utils.extract_formal_elements", "type"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements"], ["    ", "def", "__init__", "(", "self", ",", "question", ")", ":", "\n", "        ", "self", ".", "formal_elements", "=", "extract_formal_elements", "(", "question", ")", "\n", "self", ".", "formal_element_types", "=", "[", "type", "(", "f", ")", "for", "f", "in", "self", ".", "formal_elements", "]", "\n", "self", ".", "root", "=", "None", "\n", "self", ".", "current_node", "=", "None", "# reference to the first node (breadth-first) that requires one or more arguments", "\n", "self", ".", "queue", "=", "[", "]", "\n", "self", ".", "n_nodes", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.lookup_formal_element": [[41, 50], ["int"], "methods", ["None"], ["", "def", "lookup_formal_element", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"f12 => int(12)\"\"\"", "\n", "try", ":", "\n", "            ", "selected_formal_element", "=", "self", ".", "formal_elements", "[", "int", "(", "action", "[", "1", ":", "]", ")", "]", "\n", "", "except", ":", "\n", "            ", "selected_formal_element", "=", "(", "\n", "action", "# if index is out of range, return dummy value", "\n", ")", "\n", "", "return", "selected_formal_element", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.build_string": [[51, 74], ["type", "type", "compute_graph.ComputeGraph.lookup_formal_element", "len", "len", "compute_graph.ComputeGraph.build_string", "arg_strings.append", "type", "range"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.lookup_formal_element", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.build_string", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append"], ["", "def", "build_string", "(", "self", ",", "current_node", ")", ":", "\n", "        ", "if", "type", "(", "current_node", ")", "==", "str", ":", "# case: param", "\n", "            ", "return", "f\"'{current_node}'\"", "\n", "", "elif", "type", "(", "current_node", ".", "action", ")", "==", "str", ":", "# case: formal element", "\n", "            ", "assert", "current_node", ".", "action", "[", "0", "]", "==", "\"f\"", "\n", "formal_element", "=", "self", ".", "lookup_formal_element", "(", "current_node", ".", "action", ")", "\n", "return", "f\"{type(formal_element).__name__}('{formal_element}')\"", "\n", "", "elif", "current_node", ".", "action", "is", "None", ":", "# case: None (i.e. for an ap)", "\n", "            ", "return", "\"None\"", "\n", "", "else", ":", "\n", "            ", "arg_strings", "=", "[", "]", "\n", "if", "len", "(", "current_node", ".", "args", ")", "<", "current_node", ".", "num_parameters", ":", "\n", "                ", "num_params", "=", "current_node", ".", "num_parameters", "\n", "num_args", "=", "len", "(", "current_node", ".", "args", ")", "\n", "args", "=", "current_node", ".", "args", "+", "[", "\n", "f\"p_{i}\"", "for", "i", "in", "range", "(", "num_args", ",", "num_params", ")", "\n", "]", "\n", "", "else", ":", "\n", "                ", "args", "=", "current_node", ".", "args", "\n", "", "for", "arg", "in", "args", ":", "\n", "                ", "arg_string", "=", "self", ".", "build_string", "(", "arg", ")", "\n", "arg_strings", ".", "append", "(", "arg_string", ")", "\n", "", "return", "f\"{current_node.action.__name__}({','.join(['{}'.format(arg_string) for arg_string in arg_strings])})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.__str__": [[75, 81], ["compute_graph.ComputeGraph.build_string"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.build_string"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        traverse the graph to construct a string representing the compute graph.\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "build_string", "(", "self", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.eval": [[82, 99], ["str", "compute_graph.ComputeGraph.eval"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        evaluate the compute graph\n        :return: the output of the compute graph\n        \"\"\"", "\n", "try", ":", "\n", "            ", "string_to_eval", "=", "str", "(", "self", ")", "\n", "if", "\"\\'p_\"", "in", "string_to_eval", ":", "\n", "                ", "raise", "Exception", "(", "\"unreplaced params are in arb, e.g. 'p_0'\"", ")", "\n", "", "output", "=", "eval", "(", "string_to_eval", ")", "\n", "# if output is a set, reformat as a sorted string", "\n", "if", "type", "(", "output", ")", "==", "set", ":", "\n", "                ", "return", "\", \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "sorted", "(", "list", "(", "output", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "return", "output", "\n", "", "", "except", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.add": [[100, 124], ["compute_graph.Node", "compute_graph.Node", "compute_graph.ComputeGraph.current_node.set_arg", "compute_graph.ComputeGraph.current_node.are_args_set", "compute_graph.ComputeGraph.root.are_args_set", "compute_graph.ComputeGraph.queue.append", "len", "compute_graph.ComputeGraph.queue.pop"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.Node.set_arg", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.Node.are_args_set", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.Node.are_args_set", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append"], ["", "", "def", "add", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        Add an action to the compute graph. Elements are added breadth-first order: KNOB.\n\n        :param action: either an operator or a formal element\n        \"\"\"", "\n", "if", "self", ".", "root", "is", "None", ":", "\n", "            ", "self", ".", "root", "=", "Node", "(", "action", ")", "\n", "if", "not", "self", ".", "root", ".", "are_args_set", "(", ")", ":", "\n", "                ", "self", ".", "current_node", "=", "self", ".", "root", "\n", "", "else", ":", "\n", "                ", "self", ".", "current_node", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "new_node", "=", "Node", "(", "action", ")", "\n", "self", ".", "current_node", ".", "set_arg", "(", "new_node", ")", "\n", "if", "new_node", ".", "num_parameters", ">", "0", ":", "\n", "                ", "self", ".", "queue", ".", "append", "(", "\n", "new_node", "\n", ")", "# add new node to queue for later processing", "\n", "", "if", "self", ".", "current_node", ".", "are_args_set", "(", ")", ":", "\n", "                ", "if", "len", "(", "self", ".", "queue", ")", ">", "0", ":", "\n", "                    ", "self", ".", "current_node", "=", "self", ".", "queue", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "current_node", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.reset": [[125, 129], ["None"], "methods", ["None"], ["", "", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "root", "=", "None", "\n", "self", ".", "current_node", "=", "None", "\n", "self", ".", "queue", "=", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.is_numeric": [[8, 10], ["all", "x.isnumeric", "string.count"], "function", ["None"], ["def", "is_numeric", "(", "string", ")", ":", "\n", "    ", "return", "all", "(", "[", "x", ".", "isnumeric", "(", ")", "or", "x", "==", "\".\"", "for", "x", "in", "string", "]", "+", "[", "string", ".", "count", "(", "\".\"", ")", "<=", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements_as_annotations": [[12, 15], ["re.findall"], "function", ["None"], ["", "def", "extract_formal_elements_as_annotations", "(", "question", ")", ":", "\n", "    ", "pattern", "=", "\"\\$f\\[(.+?)\\]\"", "\n", "return", "re", ".", "findall", "(", "pattern", ",", "question", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements": [[17, 43], ["string.strip", "re.split", "utils.cast_formal_element", "re.split", "len", "f.split", "len", "string.isspace", "re.findall", "len", "string.isspace"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.cast_formal_element", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split"], ["", "def", "extract_formal_elements", "(", "question", ",", "cast", "=", "True", ")", ":", "\n", "# split on punctuation unless it is immediately preceded and followed by a number (indicating it is a decimal)", "\n", "    ", "split_on_punctuation", "=", "\"***\"", ".", "join", "(", "\n", "[", "\n", "string", "\n", "for", "string", "in", "re", ".", "split", "(", "\"(?<![0-9])[.,;:?]|[.,;:?](?![0-9])\"", ",", "question", ")", "\n", "if", "len", "(", "string", ")", ">", "0", "and", "not", "string", ".", "isspace", "(", ")", "\n", "]", "\n", ")", "\n", "# TODO: use a more sophisticated mechanism (CFG?) to math expressions, equations, etc... this could account for variables names that have length greater than 1", "\n", "split_on_words", "=", "[", "\n", "string", "\n", "for", "string", "in", "re", ".", "split", "(", "\"[A-Za-z]\\w+|\\*\\*\\*\"", ",", "split_on_punctuation", ")", "\n", "if", "len", "(", "string", ")", ">", "0", "and", "not", "string", ".", "isspace", "(", ")", "\n", "]", "\n", "# strip trailing or leading whitespace", "\n", "formal_elements", "=", "[", "string", ".", "strip", "(", ")", "for", "string", "in", "split_on_words", "]", "\n", "# filter for the special case where the letter \"a\" gets included at the end of a formal element", "\n", "formal_elements", "=", "[", "\n", "f", "if", "len", "(", "re", ".", "findall", "(", "\"[0-9A-Za-z\\)](\\sa)\"", ",", "f", ")", ")", "<", "1", "else", "f", ".", "split", "(", "\" a\"", ")", "[", "0", "]", "\n", "for", "f", "in", "formal_elements", "\n", "]", "\n", "# cast types", "\n", "if", "cast", ":", "\n", "        ", "formal_elements", "=", "[", "cast_formal_element", "(", "f", ")", "for", "f", "in", "formal_elements", "]", "\n", "", "return", "formal_elements", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.cast_formal_element": [[45, 62], ["sympy.sympify", "type", "math_prog_synth_env.typed_operators.Rational", "issubclass", "str", "type", "math_prog_synth_env.typed_operators.Value", "str", "type", "math_prog_synth_env.typed_operators.Variable", "math_prog_synth_env.typed_operators.Expression", "math_prog_synth_env.typed_operators.Function", "math_prog_synth_env.typed_operators.Equation"], "function", ["None"], ["", "def", "cast_formal_element", "(", "f", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "x", "=", "sympy", ".", "sympify", "(", "f", ")", "\n", "if", "type", "(", "x", ")", "==", "sympy", ".", "core", ".", "numbers", ".", "Rational", ":", "\n", "            ", "return", "Rational", "(", "str", "(", "x", ")", ")", "\n", "", "elif", "issubclass", "(", "type", "(", "x", ")", ",", "sympy", ".", "core", ".", "numbers", ".", "Number", ")", ":", "\n", "            ", "return", "Value", "(", "str", "(", "x", ")", ")", "\n", "", "elif", "type", "(", "x", ")", "==", "sympy", ".", "core", ".", "symbol", ".", "Symbol", ":", "\n", "            ", "return", "Variable", "(", "f", ")", "\n", "", "else", ":", "\n", "            ", "return", "Expression", "(", "f", ")", "\n", "", "", "except", ":", "\n", "        ", "if", "\"=\"", "in", "f", ":", "\n", "            ", "try", ":", "\n", "                ", "return", "Function", "(", "f", ")", "\n", "", "except", ":", "\n", "                ", "return", "Equation", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.guess_until_problem_solved": [[64, 89], ["env.reset_from_text", "print", "print", "print", "env.reset_from_text", "print", "env.sample_masked_action_index", "env.step", "env.decode_question", "print", "print", "info[].split"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.sample_masked_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split"], ["", "", "", "", "def", "guess_until_problem_solved", "(", "env", ",", "question", ",", "answer", ",", "verbose", "=", "False", ",", "max_episode_index", "=", "1000", ")", ":", "\n", "    ", "episode_i", "=", "0", "\n", "graph_guessed_correctly", "=", "False", "\n", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "question", ",", "answer", ")", "\n", "print", "(", "f\"\\nquestion: {env.decode_question(encoded_question)}\"", ")", "\n", "while", "not", "graph_guessed_correctly", "and", "episode_i", "<", "max_episode_index", ":", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "question", ",", "answer", ")", "\n", "done", "=", "False", "\n", "step_i", "=", "0", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "f\"episode: {episode_i}\"", ")", "\n", "", "while", "not", "done", ":", "\n", "            ", "action_index", "=", "env", ".", "sample_masked_action_index", "(", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "if", "verbose", ":", "\n", "                ", "if", "\"lookup_value(solve_system(append_to_empty_list('p_0')),Variable('b'))\"", "in", "info", "[", "'raw_observation'", "]", ":", "\n", "                    ", "print", "(", ")", "\n", "", "print", "(", "f\"\\t\\tS': {info['raw_observation']}, R: {reward}, done: {done}\"", ")", "\n", "", "if", "reward", "==", "1", ":", "\n", "                ", "graph_guessed_correctly", "=", "True", "\n", "", "step_i", "+=", "1", "\n", "", "episode_i", "+=", "1", "\n", "", "assert", "graph_guessed_correctly", "\n", "print", "(", "f'graph: {info[\"raw_observation\"].split(\";\")[1]}'", ")", "\n", "print", "(", "f\"{episode_i} trials taken to guess: {question}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.filter_univariate": [[91, 101], ["utils.extract_formal_elements", "len", "univariate_examples.append", "set", "ch.isalpha"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append"], ["", "def", "filter_univariate", "(", "examples", ")", ":", "\n", "    ", "univariate_examples", "=", "[", "]", "\n", "for", "example_dict", "in", "examples", ":", "\n", "        ", "question", "=", "example_dict", "[", "'question'", "]", "\n", "formal_elements", "=", "extract_formal_elements", "(", "question", ",", "cast", "=", "False", ")", "\n", "function", "=", "formal_elements", "[", "0", "]", "\n", "num_vars", "=", "len", "(", "[", "ch", "for", "ch", "in", "set", "(", "function", ")", "if", "ch", ".", "isalpha", "(", ")", "]", ")", "\n", "if", "num_vars", "==", "1", ":", "\n", "            ", "univariate_examples", ".", "append", "(", "example_dict", ")", "\n", "", "", "return", "univariate_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.get_module_name_from_filepath": [[103, 110], ["[].split", "module_name.split", "fp.split"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split"], ["", "def", "get_module_name_from_filepath", "(", "fp", ")", ":", "\n", "    ", "module_name", "=", "fp", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".txt\"", ")", "[", "0", "]", "\n", "if", "\"compose\"", "in", "module_name", ":", "\n", "        ", "module_name", "=", "module_name", ".", "split", "(", "\"_compose\"", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "module_name", "=", "module_name", "\n", "", "return", "module_name", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.load_question_answer_pairs": [[112, 122], ["range", "open", "f.readlines", "len", "lines[].strip", "lines[].strip", "qa_pairs.append"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append"], ["", "def", "load_question_answer_pairs", "(", "filepath", ")", ":", "\n", "    ", "qa_pairs", "=", "[", "]", "\n", "with", "open", "(", "filepath", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "num_pairs", "=", "len", "(", "lines", ")", "//", "2", "\n", "for", "i", "in", "range", "(", "0", ",", "2", "*", "num_pairs", ",", "2", ")", ":", "\n", "        ", "question", "=", "lines", "[", "i", "]", ".", "strip", "(", ")", "\n", "answer", "=", "lines", "[", "i", "+", "1", "]", ".", "strip", "(", ")", "\n", "qa_pairs", ".", "append", "(", "(", "question", ",", "answer", ")", ")", "\n", "", "return", "qa_pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.load_data": [[125, 170], ["print", "tqdm.tqdm", "min", "range", "utils.filter_univariate", "os.path.join", "os.path.join", "open", "f.readlines", "lines[].strip", "lines[].strip", "utils.get_module_name_from_filepath", "len", "len", "[].append", "re.split"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.filter_univariate", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.get_module_name_from_filepath", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split"], ["", "def", "load_data", "(", "config", ",", "train", "=", "True", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "print", "(", "\"loading problems\"", ")", "\n", "if", "train", ":", "\n", "        ", "problem_filepaths", "=", "[", "os", ".", "path", ".", "join", "(", "config", "[", "\"data_dirpath\"", "]", ",", "filename", ")", "for", "filename", "in", "config", "[", "\"selected_filenames\"", "]", "]", "\n", "", "else", ":", "\n", "        ", "problem_filepaths", "=", "[", "os", ".", "path", ".", "join", "(", "config", "[", "\"test_data_dirpath\"", "]", ",", "filename", ")", "for", "filename", "in", "config", "[", "\"selected_filenames\"", "]", "]", "\n", "\n", "", "problem_counts", "=", "{", "}", "\n", "for", "filepath", "in", "tqdm", "(", "problem_filepaths", ")", ":", "\n", "        ", "with", "open", "(", "filepath", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "num_pairs", "=", "min", "(", "len", "(", "lines", ")", "//", "2", ",", "config", "[", "\"num_problems_per_module\"", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "2", "*", "num_pairs", ",", "2", ")", ":", "\n", "            ", "question", "=", "lines", "[", "i", "]", ".", "strip", "(", ")", "\n", "answer", "=", "lines", "[", "i", "+", "1", "]", ".", "strip", "(", ")", "\n", "# for uncomposed problems set difficulty to 0 to distinguish them", "\n", "difficulty", "=", "(", "\n", "len", "(", "re", ".", "split", "(", "\"(?<![0-9])[.,;:?]|[.,;:?](?![0-9])\"", ",", "question", ")", ")", "-", "1", "\n", "if", "'compose'", "in", "filepath", "\n", "else", "0", "\n", ")", "\n", "# don't load problems with difficulty above the maximum", "\n", "if", "difficulty", ">", "config", "[", "\"max_difficulty\"", "]", ":", "\n", "                ", "continue", "\n", "", "module_name", "=", "get_module_name_from_filepath", "(", "filepath", ")", "\n", "# increment problem count for (module_name, difficulty)", "\n", "if", "(", "module_name", ",", "difficulty", ")", "in", "problem_counts", ":", "\n", "                ", "problem_counts", "[", "(", "module_name", ",", "difficulty", ")", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "problem_counts", "[", "(", "module_name", ",", "difficulty", ")", "]", "=", "1", "\n", "# store problem", "\n", "", "problem_dict", "=", "{", "'module_difficulty_index'", ":", "problem_counts", "[", "(", "module_name", ",", "difficulty", ")", "]", ",", "\n", "'question'", ":", "question", ",", "\n", "'answer'", ":", "answer", "}", "\n", "if", "module_name", "in", "data", ":", "\n", "                ", "if", "difficulty", "in", "data", "[", "module_name", "]", ":", "\n", "                    ", "data", "[", "module_name", "]", "[", "difficulty", "]", ".", "append", "(", "problem_dict", ")", "\n", "", "else", ":", "\n", "                    ", "data", "[", "module_name", "]", "[", "difficulty", "]", "=", "[", "problem_dict", "]", "\n", "", "", "else", ":", "\n", "                ", "data", "[", "module_name", "]", "=", "{", "difficulty", ":", "[", "problem_dict", "]", "}", "\n", "", "", "", "if", "config", "[", "\"univariate_differentiation\"", "]", ":", "\n", "        ", "data", "[", "'calculus__differentiate'", "]", "[", "0", "]", "=", "filter_univariate", "(", "data", "[", "'calculus__differentiate'", "]", "[", "0", "]", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.split_validation_data": [[171, 186], ["len", "int", "len", "len"], "function", ["None"], ["", "def", "split_validation_data", "(", "config", ",", "train", ")", ":", "\n", "    ", "val", "=", "{", "}", "\n", "for", "module_name", "in", "train", ":", "\n", "        ", "val", "[", "module_name", "]", "=", "{", "}", "\n", "for", "difficulty", "in", "train", "[", "module_name", "]", ":", "\n", "            ", "num_examples", "=", "len", "(", "train", "[", "module_name", "]", "[", "difficulty", "]", ")", "\n", "num_val", "=", "int", "(", "num_examples", "*", "config", "[", "\"validation_percentage\"", "]", ")", "\n", "val", "[", "module_name", "]", "[", "difficulty", "]", "=", "train", "[", "module_name", "]", "[", "difficulty", "]", "[", ":", "num_val", "]", "\n", "train", "[", "module_name", "]", "[", "difficulty", "]", "=", "train", "[", "module_name", "]", "[", "difficulty", "]", "[", "num_val", ":", "]", "\n", "assert", "(", "\n", "len", "(", "train", "[", "module_name", "]", "[", "difficulty", "]", ")", "\n", "+", "len", "(", "val", "[", "module_name", "]", "[", "difficulty", "]", ")", "\n", "==", "num_examples", "\n", ")", "\n", "", "", "return", "val", "", "", ""]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.__init__": [[18, 93], ["all", "len", "gym.spaces.Discrete", "numpy.arange", "gym.spaces.MultiDiscrete", "math_prog_synth_env.utils.load_data", "math_prog_synth_env.utils.split_validation_data", "math_prog_synth_env.utils.load_data", "sentencepiece.SentencePieceProcessor", "open", "yaml.safe_load", "len", "len", "os.path.isfile", "print", "math_env.MathEnv.setup", "inspect.signature", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.load_data", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.split_validation_data", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.load_data", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.setup"], ["    ", "def", "__init__", "(", "self", ",", "config_file", ")", ":", "\n", "        ", "import", "yaml", "\n", "\n", "self", ".", "compute_graph", "=", "None", "\n", "self", ".", "episode_actions", "=", "None", "\n", "# load config", "\n", "with", "open", "(", "config_file", ",", "'r'", ")", "as", "stream", ":", "\n", "            ", "config", "=", "yaml", ".", "safe_load", "(", "stream", ")", "\n", "", "self", ".", "config", "=", "config", "\n", "self", ".", "encode_question", "=", "config", "[", "\"encode_question\"", "]", "\n", "self", ".", "max_num_nodes", "=", "self", ".", "_max_episode_steps", "=", "config", "[", "\"max_num_nodes\"", "]", "\n", "self", ".", "max_formal_elements", "=", "config", "[", "\"max_formal_elements\"", "]", "\n", "self", ".", "max_difficulty", "=", "config", "[", "\"max_difficulty\"", "]", "\n", "self", ".", "question_vocab_size", "=", "config", "[", "\"question_vocab_size\"", "]", "\n", "self", ".", "max_sequence_length", "=", "config", "[", "\"max_sequence_length\"", "]", "\n", "# define available operator functions", "\n", "self", ".", "operators", "=", "[", "\n", "lookup_value", ",", "\n", "solve_system", ",", "\n", "append", ",", "\n", "append_to_empty_list", ",", "\n", "make_equation", ",", "\n", "lookup_value_equation", ",", "\n", "extract_isolated_variable", ",", "\n", "substitution_left_to_right", ",", "\n", "factor", ",", "\n", "differentiate", ",", "\n", "differentiate_wrt", ",", "\n", "simplify", ",", "\n", "make_function", ",", "\n", "replace_arg", ",", "\n", "mod", ",", "\n", "gcd", ",", "\n", "divides", ",", "\n", "is_prime", ",", "\n", "lcm", ",", "\n", "lcd", ",", "\n", "prime_factors", ",", "\n", "evaluate_function", ",", "\n", "not_op", "\n", "]", "\n", "# ensure that every operator listed in config[\"operators\"] is present in the above list", "\n", "valid_op_names", "=", "[", "op", ".", "__name__", "for", "op", "in", "self", ".", "operators", "]", "\n", "assert", "all", "(", "[", "op", "in", "valid_op_names", "for", "op", "in", "config", "[", "\"operators\"", "]", "]", ")", "\n", "# define action and observation space", "\n", "self", ".", "operators", "=", "[", "operator", "for", "operator", "in", "self", ".", "operators", "if", "(", "operator", ".", "__name__", "in", "config", "[", "\"operators\"", "]", ")", "]", "\n", "self", ".", "operator_output_types", "=", "[", "\n", "signature", "(", "operator", ")", ".", "return_annotation", "for", "operator", "in", "self", ".", "operators", "\n", "]", "\n", "self", ".", "actions", "=", "self", ".", "operators", "+", "[", "\n", "f\"f{i}\"", "for", "i", "in", "range", "(", "self", ".", "max_formal_elements", ")", "\n", "]", "\n", "self", ".", "action_names", "=", "[", "op", ".", "__name__", "for", "op", "in", "self", ".", "operators", "]", "+", "[", "f\"f{i}\"", "for", "i", "in", "range", "(", "self", ".", "max_formal_elements", ")", "]", "\n", "self", ".", "num_actions", "=", "len", "(", "self", ".", "actions", ")", "\n", "# increment by 2 to account for both the question padding and the answer padding", "\n", "self", ".", "total_vocab_size", "=", "self", ".", "question_vocab_size", "+", "self", ".", "num_actions", "+", "2", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "len", "(", "self", ".", "actions", ")", ")", "\n", "self", ".", "action_indices", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "actions", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "MultiDiscrete", "(", "\n", "[", "self", ".", "total_vocab_size", "for", "_", "in", "range", "(", "config", "[", "\"max_sequence_length\"", "]", ")", "]", "\n", ")", "\n", "\n", "# Set up if data not downloaded yet", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "config", "[", "\"tokenizer_filepath\"", "]", "+", "\".model\"", ")", ":", "\n", "            ", "print", "(", "\"No data/tokenizer found: Redownloading data\"", ")", "\n", "self", ".", "setup", "(", ")", "\n", "# load data", "\n", "", "self", ".", "train", "=", "load_data", "(", "config", ",", "train", "=", "True", ")", "\n", "self", ".", "val", "=", "split_validation_data", "(", "config", ",", "self", ".", "train", ")", "\n", "self", ".", "test", "=", "load_data", "(", "config", ",", "train", "=", "False", ")", "\n", "# load tokenizer", "\n", "self", ".", "question_padding_token", "=", "config", "[", "\"question_vocab_size\"", "]", "\n", "# increment config[\"question_vocab_size\"] by 1 to account for padding token", "\n", "self", ".", "action_padding_token", "=", "(", "config", "[", "\"question_vocab_size\"", "]", "+", "1", ")", "+", "self", ".", "num_actions", "\n", "self", ".", "tokenizer", "=", "spm", ".", "SentencePieceProcessor", "(", "model_file", "=", "self", ".", "config", "[", "\"tokenizer_filepath\"", "]", "+", "\".model\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step": [[95, 148], ["math_env.MathEnv.compute_graph.add", "math_env.MathEnv.episode_actions.append", "math_env.MathEnv.compute_graph.eval", "str", "math_env.MathEnv.compute_mask", "math_env.MathEnv.encode", "numpy.array", "numpy.concatenate", "numpy.array_equal", "numpy.array", "numpy.zeros", "sympy.sympify", "sympy.sympify", "len", "str", "str", "str", "range", "len"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.add", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.eval", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.compute_mask", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.encode"], ["", "def", "step", "(", "self", ",", "action_index", ")", ":", "\n", "        ", "\"\"\"\n        :param action_index: index into the action space\n        :return: observation, reward, done, info\n        An action fills the next element in the compute graph.\n        -observation: question + interim compute graph\n        -reward: 0 if the compute doesn't evaluate correctly, 1 if it does\n        -done: True if the graph is complete, False if it isn't\n        -info: None\n        \"\"\"", "\n", "action", "=", "self", ".", "actions", "[", "action_index", "]", "\n", "self", ".", "compute_graph", ".", "n_nodes", "+=", "1", "\n", "self", ".", "compute_graph", ".", "add", "(", "action", ")", "\n", "self", ".", "episode_actions", ".", "append", "(", "action_index", ")", "\n", "output", "=", "self", ".", "compute_graph", ".", "eval", "(", ")", "\n", "compute_graph", "=", "str", "(", "self", ".", "compute_graph", ")", "\n", "full_raw_observation", "=", "f\"{self.question}; {compute_graph}\"", "\n", "if", "self", ".", "encode_question", ":", "\n", "            ", "encoded_question", "=", "self", ".", "encode", "(", "self", ".", "question", ")", "\n", "# increment by (self.question_vocab_size + 1) to ensure no overlap between question vocab and action vocab", "\n", "episode_actions_array", "=", "np", ".", "array", "(", "self", ".", "episode_actions", ")", "+", "(", "self", ".", "question_vocab_size", "+", "1", ")", "\n", "episode_actions_padding_array", "=", "np", ".", "array", "(", "[", "self", ".", "action_padding_token", "\n", "for", "_", "in", "range", "(", "self", ".", "max_num_nodes", "-", "len", "(", "self", ".", "episode_actions", ")", ")", "]", ")", "\n", "observation", "=", "np", ".", "concatenate", "(", "[", "encoded_question", ",", "episode_actions_array", ",", "episode_actions_padding_array", "]", ")", "\n", "", "else", ":", "\n", "            ", "observation", "=", "full_raw_observation", "\n", "", "next_mask", "=", "self", ".", "compute_mask", "(", ")", "\n", "done", "=", "(", "\n", "self", ".", "compute_graph", ".", "current_node", "is", "None", "\n", "or", "self", ".", "compute_graph", ".", "n_nodes", ">=", "self", ".", "max_num_nodes", "\n", "or", "np", ".", "array_equal", "(", "next_mask", ",", "np", ".", "zeros", "(", "len", "(", "next_mask", ")", ")", ")", "\n", ")", "\n", "# get reward", "\n", "if", "done", ":", "\n", "# cleanup output", "\n", "            ", "sympify_output", "=", "None", "\n", "sympify_answer", "=", "None", "\n", "try", ":", "\n", "                ", "sympify_output", "=", "sympify", "(", "str", "(", "output", ")", ")", "\n", "sympify_answer", "=", "sympify", "(", "self", ".", "answer", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "if", "sympify_output", "is", "not", "None", "and", "sympify_answer", "is", "not", "None", "and", "sympify_output", "==", "sympify_answer", ":", "\n", "                ", "reward", "=", "1", "\n", "", "elif", "str", "(", "output", ")", "==", "str", "(", "self", ".", "answer", ")", ":", "\n", "                ", "reward", "=", "1", "\n", "", "else", ":", "\n", "                ", "reward", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "reward", "=", "0", "\n", "", "info", "=", "{", "\"raw_observation\"", ":", "full_raw_observation", "}", "\n", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.encode": [[152, 159], ["math_env.MathEnv.tokenizer.encode", "math_env.MathEnv.extend", "numpy.array", "range", "len"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.encode"], ["", "def", "encode", "(", "self", ",", "raw_observation", ")", ":", "\n", "        ", "encoded_ids", "=", "self", ".", "tokenizer", ".", "encode", "(", "raw_observation", ")", "\n", "# pad the encoded ids up to a maximum length", "\n", "encoded_ids", ".", "extend", "(", "\n", "[", "self", ".", "question_padding_token", "for", "_", "in", "range", "(", "self", ".", "config", "[", "\"max_sequence_length\"", "]", "-", "len", "(", "encoded_ids", ")", ")", "]", "\n", ")", "\n", "return", "np", ".", "array", "(", "encoded_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question": [[160, 165], ["math_env.MathEnv.tokenizer.decode", "encoded_ids.tolist"], "methods", ["None"], ["", "def", "decode_question", "(", "self", ",", "encoded_ids", ")", ":", "\n", "        ", "''", "\n", "# filter out padding tokens before decoding", "\n", "encoded_ids", "=", "[", "id_", "for", "id_", "in", "encoded_ids", ".", "tolist", "(", ")", "if", "id_", "<", "self", ".", "question_padding_token", "]", "\n", "return", "self", ".", "tokenizer", ".", "decode", "(", "encoded_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset": [[168, 173], ["math_env.MathEnv.reset_by_module_and_difficulty", "random.sample", "random.sample", "list", "list", "math_env.MathEnv.train.keys", "math_env.MathEnv.train[].keys"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_by_module_and_difficulty"], ["", "def", "reset", "(", "self", ",", "mode", "=", "'train'", ")", ":", "\n", "# randomly sample a module and difficulty level", "\n", "        ", "module_name", "=", "sample", "(", "list", "(", "self", ".", "train", ".", "keys", "(", ")", ")", ",", "1", ")", "[", "0", "]", "\n", "difficulty", "=", "sample", "(", "list", "(", "self", ".", "train", "[", "module_name", "]", ".", "keys", "(", ")", ")", ",", "1", ")", "[", "0", "]", "\n", "return", "self", ".", "reset_by_module_and_difficulty", "(", "module_name", ",", "difficulty", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text": [[174, 185], ["math_prog_synth_env.compute_graph.ComputeGraph", "list", "numpy.concatenate", "math_env.MathEnv.encode", "numpy.array", "range"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.encode"], ["", "def", "reset_from_text", "(", "self", ",", "question", ",", "answer", ")", ":", "\n", "        ", "self", ".", "module_name", "=", "'N/A'", "\n", "self", ".", "difficulty", "=", "'N/A'", "\n", "self", ".", "question", "=", "question", "\n", "self", ".", "answer", "=", "answer", "\n", "self", ".", "module_difficulty_index", "=", "'N/A'", "\n", "self", ".", "compute_graph", "=", "ComputeGraph", "(", "self", ".", "question", ")", "\n", "self", ".", "episode_actions", "=", "list", "(", ")", "\n", "obs", "=", "np", ".", "concatenate", "(", "[", "self", ".", "encode", "(", "self", ".", "question", ")", ",", "\n", "np", ".", "array", "(", "[", "self", ".", "action_padding_token", "for", "_", "in", "range", "(", "self", ".", "max_num_nodes", ")", "]", ")", "]", ")", "\n", "return", "obs", ",", "{", "'raw_observation'", ":", "self", ".", "question", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_with_same_problem": [[186, 192], ["math_prog_synth_env.compute_graph.ComputeGraph", "list", "numpy.concatenate", "math_env.MathEnv.encode", "numpy.array", "range"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.encode"], ["", "def", "reset_with_same_problem", "(", "self", ")", ":", "\n", "        ", "self", ".", "compute_graph", "=", "ComputeGraph", "(", "self", ".", "question", ")", "\n", "self", ".", "episode_actions", "=", "list", "(", ")", "\n", "obs", "=", "np", ".", "concatenate", "(", "[", "self", ".", "encode", "(", "self", ".", "question", ")", ",", "\n", "np", ".", "array", "(", "[", "self", ".", "action_padding_token", "for", "_", "in", "range", "(", "self", ".", "max_num_nodes", ")", "]", ")", "]", ")", "\n", "return", "obs", ",", "{", "'raw_observation'", ":", "self", ".", "question", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_with_specific_problem": [[193, 211], ["math_prog_synth_env.compute_graph.ComputeGraph", "list", "numpy.concatenate", "math_env.MathEnv.encode", "numpy.array", "range"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.encode"], ["", "def", "reset_with_specific_problem", "(", "\n", "self", ",", "module_name", ",", "difficulty", ",", "module_difficulty_index", ",", "train", "=", "True", "\n", ")", ":", "\n", "        ", "self", ".", "module_name", "=", "module_name", "\n", "self", ".", "difficulty", "=", "difficulty", "\n", "if", "train", ":", "\n", "\n", "            ", "problem_dict", "=", "self", ".", "train", "[", "module_name", "]", "[", "difficulty", "]", "[", "module_difficulty_index", "]", "\n", "", "else", ":", "\n", "            ", "problem_dict", "=", "self", ".", "val", "[", "module_name", "]", "[", "difficulty", "]", "[", "module_difficulty_index", "]", "\n", "", "self", ".", "question", "=", "problem_dict", "[", "'question'", "]", "\n", "self", ".", "answer", "=", "problem_dict", "[", "'answer'", "]", "\n", "self", ".", "module_difficulty_index", "=", "problem_dict", "[", "'module_difficulty_index'", "]", "\n", "self", ".", "compute_graph", "=", "ComputeGraph", "(", "self", ".", "question", ")", "\n", "self", ".", "episode_actions", "=", "list", "(", ")", "\n", "obs", "=", "np", ".", "concatenate", "(", "[", "self", ".", "encode", "(", "self", ".", "question", ")", ",", "\n", "np", ".", "array", "(", "[", "self", ".", "action_padding_token", "for", "_", "in", "range", "(", "self", ".", "max_num_nodes", ")", "]", ")", "]", ")", "\n", "return", "obs", ",", "{", "'raw_observation'", ":", "self", ".", "question", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_by_module_and_difficulty": [[212, 236], ["math_prog_synth_env.compute_graph.ComputeGraph", "list", "numpy.concatenate", "random.sample", "math_env.MathEnv.encode", "numpy.array", "random.sample", "random.sample", "range"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.encode"], ["", "def", "reset_by_module_and_difficulty", "(", "self", ",", "module_name", ",", "difficulty", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "module_name", "=", "module_name", "\n", "self", ".", "difficulty", "=", "difficulty", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "problem_dict", "=", "sample", "(", "\n", "self", ".", "train", "[", "module_name", "]", "[", "difficulty", "]", ",", "1", "\n", ")", "[", "0", "]", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "            ", "problem_dict", "=", "sample", "(", "\n", "self", ".", "val", "[", "module_name", "]", "[", "difficulty", "]", ",", "1", "\n", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "problem_dict", "=", "sample", "(", "\n", "self", ".", "test", "[", "module_name", "]", "[", "difficulty", "]", ",", "1", "\n", ")", "[", "0", "]", "\n", "\n", "", "self", ".", "question", "=", "problem_dict", "[", "'question'", "]", "\n", "self", ".", "answer", "=", "problem_dict", "[", "'answer'", "]", "\n", "self", ".", "module_difficulty_index", "=", "problem_dict", "[", "'module_difficulty_index'", "]", "\n", "self", ".", "compute_graph", "=", "ComputeGraph", "(", "self", ".", "question", ")", "\n", "self", ".", "episode_actions", "=", "list", "(", ")", "\n", "obs", "=", "np", ".", "concatenate", "(", "[", "self", ".", "encode", "(", "self", ".", "question", ")", ",", "\n", "np", ".", "array", "(", "[", "self", ".", "action_padding_token", "for", "_", "in", "range", "(", "self", ".", "max_num_nodes", ")", "]", ")", "]", ")", "\n", "return", "obs", ",", "{", "'raw_observation'", ":", "self", ".", "question", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index": [[239, 241], ["math_env.MathEnv.actions.index"], "methods", ["None"], ["", "def", "get_action_index", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "actions", ".", "index", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.sample_action_index": [[242, 244], ["math_env.MathEnv.action_space.sample"], "methods", ["None"], ["", "def", "sample_action_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "action_space", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.sample_masked_action_index": [[245, 250], ["numpy.arange", "math_env.MathEnv.compute_mask", "numpy.array", "numpy.random.choice", "len", "zip"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.compute_mask"], ["", "def", "sample_masked_action_index", "(", "self", ")", ":", "\n", "        ", "choices", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "actions", ")", ")", "\n", "mask", "=", "self", ".", "compute_mask", "(", ")", "\n", "valid_choices", "=", "np", ".", "array", "(", "[", "x", "for", "x", ",", "m", "in", "zip", "(", "choices", ",", "mask", ")", "if", "m", "!=", "0", "]", ")", "\n", "return", "np", ".", "random", ".", "choice", "(", "valid_choices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.sample_masked_policy_vector": [[251, 258], ["numpy.random.uniform", "math_env.MathEnv.mask_invalid_types", "numpy.sum", "len"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.mask_invalid_types"], ["", "def", "sample_masked_policy_vector", "(", "self", ")", ":", "\n", "        ", "policy_vector", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "len", "(", "self", ".", "actions", ")", ")", "\n", "masked_policy_vector", "=", "self", ".", "mask_invalid_types", "(", "policy_vector", ")", "\n", "masked_normed_policy_vector", "=", "masked_policy_vector", "/", "np", ".", "sum", "(", "\n", "masked_policy_vector", "\n", ")", "\n", "return", "masked_normed_policy_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.sample_masked_action_from_model": [[259, 268], ["scipy.special.softmax", "math_env.MathEnv.mask_invalid_types", "numpy.arange", "numpy.random.choice", "numpy.sum", "len", "model().detach().numpy", "model().detach", "model"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.mask_invalid_types"], ["", "def", "sample_masked_action_from_model", "(", "self", ",", "model", ",", "obs", ")", ":", "\n", "        ", "policy_vector", "=", "softmax", "(", "model", "(", "obs", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "masked_policy_vector", "=", "self", ".", "mask_invalid_types", "(", "policy_vector", ")", "\n", "masked_normed_policy_vector", "=", "masked_policy_vector", "/", "np", ".", "sum", "(", "\n", "masked_policy_vector", "\n", ")", "\n", "choices", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "actions", ")", ")", "\n", "action_index", "=", "np", ".", "random", ".", "choice", "(", "choices", ",", "p", "=", "masked_normed_policy_vector", ")", "\n", "return", "action_index", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.compute_mask": [[269, 294], ["numpy.concatenate", "len", "numpy.array", "numpy.concatenate", "numpy.ones", "numpy.zeros", "numpy.zeros", "len", "issubclass", "len"], "methods", ["None"], ["", "def", "compute_mask", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "compute_graph", ".", "current_node", ":", "\n", "# first action must be an operator", "\n", "            ", "mask", "=", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "ones", "(", "len", "(", "self", ".", "operators", ")", ")", ",", "np", ".", "zeros", "(", "self", ".", "max_formal_elements", ")", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "current_arg_index", "=", "len", "(", "self", ".", "compute_graph", ".", "current_node", ".", "args", ")", "\n", "next_type", "=", "self", ".", "compute_graph", ".", "current_node", ".", "types", "[", "current_arg_index", "]", "\n", "available_types", "=", "(", "\n", "self", ".", "operator_output_types", "+", "self", ".", "compute_graph", ".", "formal_element_types", "\n", ")", "\n", "mask", "=", "np", ".", "array", "(", "\n", "[", "1", "if", "issubclass", "(", "type_", ",", "next_type", ")", "else", "0", "for", "type_", "in", "available_types", "]", "\n", ")", "\n", "mask", "=", "np", ".", "concatenate", "(", "\n", "[", "\n", "mask", ",", "\n", "np", ".", "zeros", "(", "\n", "self", ".", "max_formal_elements", "\n", "-", "len", "(", "self", ".", "compute_graph", ".", "formal_elements", ")", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.mask_invalid_types": [[295, 301], ["math_env.MathEnv.compute_mask", "torch.is_tensor", "torch.from_numpy().type", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.compute_mask"], ["", "def", "mask_invalid_types", "(", "self", ",", "model_output", ")", ":", "\n", "        ", "mask", "=", "self", ".", "compute_mask", "(", ")", "\n", "if", "torch", ".", "is_tensor", "(", "model_output", ")", ":", "\n", "            ", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "", "masked_output", "=", "mask", "*", "model_output", "\n", "return", "masked_output", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.render": [[302, 304], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.close": [[305, 307], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.setup": [[308, 317], ["print", "math_env.MathEnv._get_data", "print", "math_env.MathEnv._split_data", "print", "math_env.MathEnv._train_tokenizer"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv._get_data", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv._split_data", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv._train_tokenizer"], ["", "def", "setup", "(", "self", ")", ":", "\n", "        ", "\"\"\"To be ran on first use of the environment.\n        Downloads data, splits data and trains tokenizer.\"\"\"", "\n", "print", "(", "\"Downloading Data:\"", ")", "\n", "self", ".", "_get_data", "(", ")", "\n", "print", "(", "\"Splitting Data:\"", ")", "\n", "self", ".", "_split_data", "(", ")", "\n", "print", "(", "\"Training Tokenizer:\"", ")", "\n", "self", ".", "_train_tokenizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv._get_data": [[319, 332], ["requests.get", "open().write", "print", "tarfile.open", "tarfile.open.extractall", "print", "open"], "methods", ["None"], ["", "def", "_get_data", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "import", "requests", "\n", "\n", "url", "=", "'https://storage.googleapis.com/mathematics-dataset/mathematics_dataset-v1.0.tar.gz'", "\n", "myfile", "=", "requests", ".", "get", "(", "url", ")", "\n", "open", "(", "\"mathematics_dataset-v1.0.tar.gz\"", ",", "'wb'", ")", ".", "write", "(", "myfile", ".", "content", ")", "\n", "\n", "print", "(", "\"Data Downloaded\"", ")", "\n", "\n", "data_tar", "=", "tarfile", ".", "open", "(", "name", "=", "self", ".", "config", "[", "\"data_download_location\"", "]", ",", "mode", "=", "'r:gz'", ")", "\n", "data_tar", ".", "extractall", "(", "path", "=", "self", ".", "config", "[", "\"data_unpack_dir\"", "]", ")", "\n", "print", "(", "\"Data unpacked\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv._split_data": [[334, 365], ["tqdm", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isdir", "ValueError", "os.mkdir", "os.mkdir", "zip", "int", "os.path.join", "open", "f.readlines", "len", "open", "f.writelines", "open", "f.writelines"], "methods", ["None"], ["", "def", "_split_data", "(", "self", ")", ":", "\n", "        ", "import", "os", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "problem_filepaths", "=", "[", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "\"data_unpack_dir\"", "]", ",", "self", ".", "config", "[", "\"all_data_dirpath\"", "]", ")", ",", "filename", ")", "for", "filename", "in", "\n", "self", ".", "config", "[", "\"selected_filenames\"", "]", "]", "\n", "train_problem_filepaths", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "\"data_dirpath\"", "]", ",", "filename", ")", "for", "filename", "in", "\n", "self", ".", "config", "[", "\"selected_filenames\"", "]", "]", "\n", "test_problem_filepaths", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "\"test_data_dirpath\"", "]", ",", "filename", ")", "for", "filename", "in", "\n", "self", ".", "config", "[", "\"selected_filenames\"", "]", "]", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "self", ".", "config", "[", "\"data_dirpath\"", "]", ")", "or", "os", ".", "path", ".", "isdir", "(", "self", ".", "config", "[", "\"test_data_dirpath\"", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f\"data directories already exist\"", ")", "\n", "", "else", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "config", "[", "\"data_dirpath\"", "]", ")", "\n", "os", ".", "mkdir", "(", "self", ".", "config", "[", "\"test_data_dirpath\"", "]", ")", "\n", "\n", "", "for", "filepath", ",", "train_filepath", ",", "test_filepath", "in", "tqdm", "(", "\n", "zip", "(", "problem_filepaths", ",", "train_problem_filepaths", ",", "test_problem_filepaths", ")", ")", ":", "\n", "# read data", "\n", "            ", "with", "open", "(", "filepath", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "num_pairs", "=", "len", "(", "lines", ")", "//", "2", "\n", "num_train_pairs", "=", "int", "(", "(", "1", "-", "self", ".", "config", "[", "\"test_percentage\"", "]", ")", "*", "num_pairs", ")", "\n", "\n", "# Write data", "\n", "with", "open", "(", "train_filepath", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "writelines", "(", "lines", "[", ":", "2", "*", "num_train_pairs", "]", ")", "\n", "", "with", "open", "(", "test_filepath", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "writelines", "(", "lines", "[", "2", "*", "num_train_pairs", ":", "]", ")", "\n", "", "", "print", "(", "\"train and test datasets have been created\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv._get_corpus_for_tokenizer": [[366, 389], ["shuffle", "train_test_split", "print", "min", "range", "open", "f.write", "open", "f.readlines", "lines[].strip", "lines[].strip", "questions.append", "len"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append"], ["", "def", "_get_corpus_for_tokenizer", "(", "self", ")", ":", "\n", "        ", "from", "random", "import", "shuffle", "\n", "from", "sklearn", ".", "model_selection", "import", "train_test_split", "\n", "\n", "filepaths", "=", "[", "\n", "f\"mathematics_dataset-v1.0/train-easy/{filename}\"", "for", "filename", "in", "self", ".", "config", "[", "\"selected_filenames\"", "]", "\n", "]", "\n", "questions", "=", "[", "]", "\n", "\n", "for", "filepath", "in", "filepaths", ":", "\n", "            ", "with", "open", "(", "filepath", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "num_pairs", "=", "min", "(", "len", "(", "lines", ")", "//", "2", ",", "self", ".", "config", "[", "\"num_problems_per_module_corpus\"", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "2", "*", "num_pairs", ",", "2", ")", ":", "\n", "                ", "question", "=", "lines", "[", "i", "]", ".", "strip", "(", ")", "\n", "answer", "=", "lines", "[", "i", "+", "1", "]", ".", "strip", "(", ")", "\n", "questions", ".", "append", "(", "question", ")", "\n", "\n", "", "", "shuffle", "(", "questions", ")", "\n", "train_questions", ",", "val_questions", "=", "train_test_split", "(", "questions", ",", "test_size", "=", "0.4", ")", "\n", "with", "open", "(", "self", ".", "config", "[", "\"corpus_path\"", "]", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "\"\\n\"", ".", "join", "(", "train_questions", ")", ")", "\n", "", "print", "(", "\"Downloaded corpus for training tokenizer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv._train_tokenizer": [[390, 401], ["math_env.MathEnv._get_corpus_for_tokenizer", "sentencepiece.SentencePieceTrainer.train", "print"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv._get_corpus_for_tokenizer"], ["", "def", "_train_tokenizer", "(", "self", ")", ":", "\n", "        ", "import", "sentencepiece", "as", "spm", "\n", "#Get corpus", "\n", "self", ".", "_get_corpus_for_tokenizer", "(", ")", "\n", "# train tokenizer on question corpus", "\n", "hardcoded_symbols", "=", "[", "'G'", "]", "# why is 'G' needed?", "\n", "spm", ".", "SentencePieceTrainer", ".", "train", "(", "input", "=", "self", ".", "config", "[", "\"corpus_path\"", "]", ",", "\n", "model_prefix", "=", "self", ".", "config", "[", "\"tokenizer_filepath\"", "]", ",", "\n", "vocab_size", "=", "self", ".", "config", "[", "\"question_vocab_size\"", "]", ",", "\n", "user_defined_symbols", "=", "hardcoded_symbols", ")", "\n", "print", "(", "\"Tokenizer saved\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_extract_formal_elements.Test.test_examples": [[22, 35], ["typed_examples.items", "test_extract_formal_elements.test_type_equality"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_extract_formal_elements.test_type_equality"], ["    ", "def", "test_examples", "(", "self", ")", ":", "\n", "\n", "# # do weak test", "\n", "# question_to_formal_elements = read_json(", "\n", "#     \"environment/unit_testing/artifacts/extract_formal_elements_examples.json\"", "\n", "# )", "\n", "# for question, formal_elements in question_to_formal_elements.items():", "\n", "#     test_string_equality(question, formal_elements)", "\n", "\n", "# do strong test", "\n", "        ", "from", "math_prog_synth_env", ".", "unit_testing", ".", "artifacts", ".", "extract_formal_elements_examples", "import", "typed_examples", "\n", "for", "question", ",", "formal_elements", "in", "typed_examples", ".", "items", "(", ")", ":", "\n", "            ", "test_type_equality", "(", "question", ",", "formal_elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_extract_formal_elements.test_string_equality": [[5, 11], ["math_prog_synth_env.utils.extract_formal_elements", "zip", "print", "str"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements"], ["def", "test_string_equality", "(", "question", ",", "formal_elements", ")", ":", "\n", "    ", "'''this is a weaker test because types are ignored'''", "\n", "extracted_formal_elements", "=", "extract_formal_elements", "(", "question", ")", "\n", "for", "efe", ",", "fe", "in", "zip", "(", "extracted_formal_elements", ",", "formal_elements", ")", ":", "\n", "        ", "print", "(", "efe", ",", "fe", ")", "\n", "assert", "str", "(", "efe", ")", "==", "fe", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_extract_formal_elements.test_type_equality": [[13, 18], ["math_prog_synth_env.utils.extract_formal_elements", "zip"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements"], ["", "", "def", "test_type_equality", "(", "question", ",", "formal_elements", ")", ":", "\n", "    ", "'''this is a stronger test because it requires that the formal elements get casted correctly as well'''", "\n", "extracted_formal_elements", "=", "extract_formal_elements", "(", "question", ")", "\n", "for", "efe", ",", "fe", "in", "zip", "(", "extracted_formal_elements", ",", "formal_elements", ")", ":", "\n", "        ", "assert", "efe", "==", "fe", ",", "(", "efe", ",", "fe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_operators.Test.test_value": [[8, 12], ["Value", "Value", "Value", "Value", "Value", "Value"], "methods", ["None"], ["    ", "def", "test_value", "(", "self", ")", ":", "\n", "        ", "assert", "Value", "(", "1", ")", "==", "Value", "(", "1.0", ")", "\n", "assert", "{", "Value", "(", "1", ")", "}", "==", "{", "Value", "(", "1", ")", "}", "\n", "assert", "{", "Value", "(", "1", ")", "}", "==", "{", "Value", "(", "1.0", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_operators.Test.test_solve_system": [[13, 67], ["test_operators.Test.assertRaises", "test_operators.Test.assertRaises", "test_operators.Test.assertRaises", "test_operators.Test.assertRaises", "Equation", "solve_system", "Equation", "Equation", "solve_system", "Equation", "Equation", "solve_system", "Equation", "Equation", "solve_system", "Equation", "Equation", "Equation", "Equation", "solve_system", "Equation", "solve_system", "Equation", "Equation", "Equation", "Equation", "solve_system", "Equation", "solve_system", "Variable", "Variable", "Variable", "Variable", "Variable", "Variable", "Variable", "Variable", "Variable", "Variable", "Variable", "Rational", "Rational", "Rational", "Rational", "Rational", "Rational", "Rational", "Rational", "Rational", "Rational", "Rational", "Rational", "Rational", "Rational", "Rational"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system"], ["", "def", "test_solve_system", "(", "self", ")", ":", "\n", "        ", "system", "=", "[", "Equation", "(", "\"x = 1\"", ")", "]", "\n", "assert", "solve_system", "(", "system", ")", "==", "{", "Variable", "(", "\"x\"", ")", ":", "{", "Rational", "(", "1", ")", "}", "}", "\n", "\n", "system", "=", "[", "Equation", "(", "\"x = 1\"", ")", ",", "Equation", "(", "\"y = 1\"", ")", "]", "\n", "assert", "solve_system", "(", "system", ")", "==", "{", "\n", "Variable", "(", "\"x\"", ")", ":", "{", "Rational", "(", "1", ")", "}", ",", "\n", "Variable", "(", "\"y\"", ")", ":", "{", "Rational", "(", "1", ")", "}", ",", "\n", "}", "\n", "\n", "system", "=", "[", "Equation", "(", "\"x + y = 1\"", ")", ",", "Equation", "(", "\"x - y = 1\"", ")", "]", "\n", "assert", "solve_system", "(", "system", ")", "==", "{", "\n", "Variable", "(", "\"x\"", ")", ":", "{", "Rational", "(", "1", ")", "}", ",", "\n", "Variable", "(", "\"y\"", ")", ":", "{", "Rational", "(", "0", ")", "}", ",", "\n", "}", "\n", "\n", "system", "=", "[", "Equation", "(", "\"3*x + y = 9\"", ")", ",", "Equation", "(", "\"x + 2*y = 8\"", ")", "]", "\n", "assert", "solve_system", "(", "system", ")", "==", "{", "\n", "Variable", "(", "\"x\"", ")", ":", "{", "Rational", "(", "2", ")", "}", ",", "\n", "Variable", "(", "\"y\"", ")", ":", "{", "Rational", "(", "3", ")", "}", ",", "\n", "}", "\n", "\n", "# # fails on singular matrix", "\n", "system", "=", "[", "\n", "Equation", "(", "\"x + 2*y - 3*z = 1\"", ")", ",", "\n", "Equation", "(", "\"3*x - 2*y + z = 2\"", ")", ",", "\n", "Equation", "(", "\"-x + 2*y - 2*z = 3\"", ")", ",", "\n", "]", "\n", "self", ".", "assertRaises", "(", "Exception", ",", "solve_system", ",", "system", ")", "\n", "\n", "# system with floating point coefficients", "\n", "system", "=", "[", "Equation", "(", "\"-15 = 3*c + 2.0*c\"", ")", "]", "\n", "assert", "solve_system", "(", "system", ")", "==", "{", "Variable", "(", "\"c\"", ")", ":", "{", "Rational", "(", "-", "3", ")", "}", "}", "\n", "\n", "# quadratic equation", "\n", "system", "=", "[", "Equation", "(", "\"-3*h**2/2 - 24*h - 45/2 = 0\"", ")", "]", "\n", "assert", "solve_system", "(", "system", ")", "==", "{", "Variable", "(", "\"h\"", ")", ":", "{", "Rational", "(", "-", "15", ")", ",", "Rational", "(", "-", "1", ")", "}", "}", "\n", "\n", "# unsolvable equation / infinite loop without timeout", "\n", "system", "=", "[", "Equation", "(", "'-4*i**3*j**3 - 2272*i**3 - 769*i**2*j - j**3 = 1'", ")", "]", "\n", "self", ".", "assertRaises", "(", "Exception", ",", "solve_system", ",", "system", ")", "\n", "\n", "system", "=", "[", "Equation", "(", "'-g**3 - 9*g**2 - g + l(g) - 10 = 0'", ")", "]", "\n", "self", ".", "assertRaises", "(", "Exception", ",", "solve_system", ",", "system", ")", "\n", "\n", "# unsolvable equation / infinite loop without timeout", "\n", "system", "=", "[", "Equation", "(", "'-4*i**3*j**3 - 2272*i**3 - 769*i**2*j - j**3 = 1'", ")", "]", "\n", "self", ".", "assertRaises", "(", "Exception", ",", "solve_system", ",", "system", ")", "\n", "\n", "system", "=", "[", "Equation", "(", "'9*s**4 - 8958*s**3 - 14952*s**2 - 2994*s + 2991 = 0'", ")", "]", "\n", "assert", "solve_system", "(", "system", ")", "==", "{", "Variable", "(", "\"s\"", ")", ":", "{", "Rational", "(", "-", "1", ")", ",", "Rational", "(", "'1/3'", ")", ",", "Rational", "(", "997", ")", "}", "}", "\n", "\n", "system", "=", "[", "Equation", "(", "'-3*h**2/2 - 24*h - 45/2 = 0'", ")", "]", "\n", "assert", "solve_system", "(", "system", ")", "==", "{", "Variable", "(", "\"h\"", ")", ":", "{", "Rational", "(", "'-1'", ")", ",", "Rational", "(", "'-15'", ")", "}", "}", "\n", "# print([(str(k), [str(v) for v in vset]) for k,vset in solve_system(system).items()])", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_operators.Test.test_is_prime": [[69, 72], ["is_prime", "not_op", "Value", "is_prime", "Value"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.is_prime", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.not_op", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.is_prime"], ["", "def", "test_is_prime", "(", "self", ")", ":", "\n", "        ", "assert", "is_prime", "(", "Value", "(", "'3'", ")", ")", "\n", "assert", "not_op", "(", "is_prime", "(", "Value", "(", "'4'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_operators.Test.test_prime_factors": [[73, 76], ["prime_factors", "Value", "str", "sorted", "list"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.prime_factors"], ["", "def", "test_prime_factors", "(", "self", ")", ":", "\n", "        ", "result", "=", "prime_factors", "(", "Value", "(", "'7380'", ")", ")", "\n", "assert", "\", \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "sorted", "(", "list", "(", "result", ")", ")", "]", ")", "==", "'2, 3, 5, 41'", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_operators.Test.test_lcd": [[110, 115], ["Rational", "Rational", "lcd", "Value"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lcd"], ["", "def", "test_lcd", "(", "self", ")", ":", "\n", "        ", "arg1", "=", "Rational", "(", "'-64/1065'", ")", "\n", "arg2", "=", "Rational", "(", "'92/105'", ")", "\n", "output", "=", "lcd", "(", "arg1", ",", "arg2", ")", "\n", "assert", "output", "==", "Value", "(", "'7455'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_operators.Test.test_third_derivative": [[81, 85], ["Expression", "differentiate", "differentiate", "sympy.sympify", "sympy.sympify", "differentiate", "Expression"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.differentiate", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.differentiate", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.differentiate"], ["", "def", "test_third_derivative", "(", "self", ")", ":", "\n", "        ", "inpt", "=", "Expression", "(", "'-272*j**5 + j**3 - 8234*j**2'", ")", "\n", "third_derivative", "=", "differentiate", "(", "differentiate", "(", "differentiate", "(", "inpt", ")", ")", ")", "\n", "assert", "sympify", "(", "third_derivative", ")", "==", "sympify", "(", "Expression", "(", "'-16320*j**2 + 6'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_operators.Test.test_function_evaluation1": [[86, 91], ["Function", "Expression", "evaluate_function", "Value"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.evaluate_function"], ["", "def", "test_function_evaluation1", "(", "self", ")", ":", "\n", "        ", "f0", "=", "Function", "(", "'l(t) = -t**2 - 7*t - 7'", ")", "\n", "f1", "=", "Expression", "(", "'l(-5)'", ")", "\n", "output", "=", "evaluate_function", "(", "f0", ",", "f1", ")", "\n", "assert", "output", "==", "Value", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_operators.Test.test_function_evaluation2": [[92, 97], ["Function", "Expression", "evaluate_function", "Value"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.evaluate_function"], ["", "def", "test_function_evaluation2", "(", "self", ")", ":", "\n", "        ", "f0", "=", "Function", "(", "'x(k) = k**3 + k**2 + 6*k + 9'", ")", "\n", "f1", "=", "Expression", "(", "'x(-2)'", ")", "\n", "output", "=", "evaluate_function", "(", "f0", ",", "f1", ")", "\n", "assert", "output", "==", "Value", "(", "-", "7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_operators.Test.test_diff_distractors": [[98, 109], ["Expression", "differentiate", "factor", "differentiate", "simplify", "Expression", "factor", "differentiate", "simplify", "differentiate"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.differentiate", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.factor", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.differentiate", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.simplify", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.factor", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.differentiate", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.simplify", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.differentiate"], ["", "def", "test_diff_distractors", "(", "self", ")", ":", "\n", "        ", "expression", "=", "Expression", "(", "'442*c**4 + 248'", ")", "\n", "output1", "=", "differentiate", "(", "factor", "(", "expression", ")", ")", "\n", "output2", "=", "factor", "(", "differentiate", "(", "expression", ")", ")", "\n", "output3", "=", "differentiate", "(", "simplify", "(", "expression", ")", ")", "\n", "output4", "=", "simplify", "(", "differentiate", "(", "expression", ")", ")", "\n", "answer", "=", "Expression", "(", "'1768*c**3'", ")", "\n", "assert", "output1", "==", "answer", "\n", "assert", "output2", "==", "answer", "\n", "assert", "output3", "==", "answer", "\n", "assert", "output4", "==", "answer", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_operators.Test.test_replace_arg": [[116, 120], ["Function", "Function", "replace_arg", "Variable"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.replace_arg"], ["", "def", "test_replace_arg", "(", "self", ")", ":", "\n", "        ", "f", "=", "Function", "(", "'funk(k) = k**3 + k**2 + 6*k + 9'", ")", "\n", "replaced_f", "=", "Function", "(", "'funk(x) = x**3 + x**2 + 6*x + 9'", ")", "\n", "assert", "replace_arg", "(", "f", ",", "Variable", "(", "'x'", ")", ")", "==", "replaced_f", "", "", "", ""]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_compute_graph.Test.test_easy_algebra__linear_1d": [[8, 21], ["math_prog_synth_env.utils.extract_formal_elements", "math_prog_synth_env.compute_graph.ComputeGraph", "math_prog_synth_env.compute_graph.Node", "math_prog_synth_env.compute_graph.Node", "math_prog_synth_env.compute_graph.Node", "math_prog_synth_env.compute_graph.Node.set_arg", "math_prog_synth_env.compute_graph.Node.set_arg", "math_prog_synth_env.compute_graph.Node.set_args", "math_prog_synth_env.compute_graph.Node", "str", "math_prog_synth_env.compute_graph.ComputeGraph.eval", "Value", "math_prog_synth_env.compute_graph.Node"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.Node.set_arg", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.Node.set_arg", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.Node.set_args", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.eval"], ["    ", "def", "test_easy_algebra__linear_1d", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Solve 0 = 4*b + b + 15 for b.\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "cg", "=", "ComputeGraph", "(", "question", ")", "\n", "lookup_value_node", "=", "Node", "(", "lookup_value", ")", "\n", "solve_system_node", "=", "Node", "(", "solve_system", ")", "\n", "append_to_empty_list_node", "=", "Node", "(", "append_to_empty_list", ")", "\n", "append_to_empty_list_node", ".", "set_arg", "(", "Node", "(", "'f0'", ")", ")", "\n", "solve_system_node", ".", "set_arg", "(", "append_to_empty_list_node", ")", "\n", "lookup_value_node", ".", "set_args", "(", "[", "solve_system_node", ",", "Node", "(", "'f1'", ")", "]", ")", "\n", "cg", ".", "root", "=", "lookup_value_node", "\n", "assert", "str", "(", "cg", ")", "==", "\"lookup_value(solve_system(append_to_empty_list(Equation('0 = 4*b + b + 15'))),Variable('b'))\"", "\n", "assert", "cg", ".", "eval", "(", ")", "==", "Value", "(", "-", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_compute_graph.Test.test_incomplete_compute_graph": [[22, 31], ["math_prog_synth_env.compute_graph.ComputeGraph", "math_prog_synth_env.compute_graph.Node", "math_prog_synth_env.compute_graph.Node", "math_prog_synth_env.compute_graph.Node.set_arg", "str", "math_prog_synth_env.compute_graph.ComputeGraph.eval"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.Node.set_arg", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.eval"], ["", "def", "test_incomplete_compute_graph", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Solve 0 = 4*b + b + 15 for b.\"", "\n", "cg", "=", "ComputeGraph", "(", "question", ")", "\n", "lookup_value_node", "=", "Node", "(", "lookup_value", ")", "\n", "solve_system_node", "=", "Node", "(", "solve_system", ")", "\n", "lookup_value_node", ".", "set_arg", "(", "solve_system_node", ")", "\n", "cg", ".", "root", "=", "lookup_value_node", "\n", "assert", "str", "(", "cg", ")", "==", "\"lookup_value(solve_system('p_0'),'p_1')\"", "\n", "assert", "cg", ".", "eval", "(", ")", "==", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_algebra_linear_1d_fail_1": [[10, 25], ["env.reset_from_text", "env.decode_question", "math_prog_synth_env.utils.extract_formal_elements", "env.get_action_index", "env.step"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["    ", "def", "test_algebra_linear_1d_fail_1", "(", "self", ")", ":", "\n", "# reset - then fail after 1st action", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "\"Solve 0 = 4*b + b + 15 for b.\"", ",", "\"-3\"", ")", "\n", "question", "=", "env", ".", "decode_question", "(", "encoded_question", ")", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "# for use below", "\n", "assert", "f", "==", "[", "\"0 = 4*b + b + 15\"", ",", "\"b\"", "]", "\n", "action", "=", "\"f0\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation_", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "\n", "==", "f\"{question}; Equation('0 = 4*b + b + 15')\"", "\n", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_algebra_linear_1d_fail_2": [[26, 50], ["env.reset_from_text", "env.decode_question", "env.get_action_index", "env.step", "env.get_action_index", "env.step"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["", "def", "test_algebra_linear_1d_fail_2", "(", "self", ")", ":", "\n", "#env = MathEnv('params.yaml')", "\n", "# reset - then fail after 2nd action", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "\"Solve 0 = 4*b + b + 15 for b.\"", ",", "\"-3\"", ")", "\n", "question", "=", "env", ".", "decode_question", "(", "encoded_question", ")", "\n", "assert", "question", "==", "\"Solve 0 = 4*b + b + 15 for b.\"", "\n", "action", "=", "solve_system", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "==", "f\"{question}; solve_system('p_0')\"", "\n", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "\"f0\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation_", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "\n", "==", "f\"{question}; solve_system(Equation('0 = 4*b + b + 15'))\"", "\n", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_algebra_linear_1d_fail_3": [[51, 63], ["env.reset_from_text", "env.decode_question", "math_prog_synth_env.utils.extract_formal_elements", "env.get_action_index", "env.step"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["", "def", "test_algebra_linear_1d_fail_3", "(", "self", ")", ":", "\n", "#env = MathEnv('params.yaml')", "\n", "# reset - then fail after 1st action", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "\"Solve 0 = 4*b + b + 15 for b.\"", ",", "\"-3\"", ")", "\n", "question", "=", "env", ".", "decode_question", "(", "encoded_question", ")", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "# for use below", "\n", "assert", "f", "==", "[", "\"0 = 4*b + b + 15\"", ",", "\"b\"", "]", "\n", "action", "=", "\"f10\"", "# indexing out of range", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation_", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_algebra_linear_1d_success_1": [[64, 124], ["env.reset_from_text", "env.decode_question", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "env.get_action_index", "env.step"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["", "def", "test_algebra_linear_1d_success_1", "(", "self", ")", ":", "\n", "#env = MathEnv('params.yaml')", "\n", "# reset - then succeed after 4th action", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "\"Solve 0 = 4*b + b + 15 for b.\"", ",", "\"-3\"", ")", "\n", "question", "=", "env", ".", "decode_question", "(", "encoded_question", ")", "\n", "assert", "question", "==", "\"Solve 0 = 4*b + b + 15 for b.\"", "\n", "action", "=", "lookup_value", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "\n", "==", "f\"{question}; lookup_value('p_0','p_1')\"", "\n", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "assert", "env", ".", "compute_graph", ".", "current_node", "==", "env", ".", "compute_graph", ".", "root", "\n", "# next action", "\n", "action", "=", "solve_system", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "\n", "==", "f\"{question}; lookup_value(solve_system('p_0'),'p_1')\"", "\n", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# current node is still root because it takes 2 arguments and only 1 has been given", "\n", "assert", "env", ".", "compute_graph", ".", "current_node", "==", "env", ".", "compute_graph", ".", "root", "\n", "# next action", "\n", "action", "=", "\"f1\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "\n", "==", "f\"{question}; lookup_value(solve_system('p_0'),Variable('b'))\"", "\n", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# current node is now the solve_system node because the lookup_value node has its args set", "\n", "assert", "env", ".", "compute_graph", ".", "current_node", "==", "env", ".", "compute_graph", ".", "root", ".", "args", "[", "0", "]", "\n", "# next action", "\n", "action", "=", "append_to_empty_list", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "\n", "==", "f\"{question}; lookup_value(solve_system(append_to_empty_list('p_0')),Variable('b'))\"", "\n", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "\"f0\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "\n", "==", "f\"{question}; lookup_value(solve_system(append_to_empty_list(Equation('0 = 4*b + b + 15'))),Variable('b'))\"", "\n", ")", "\n", "assert", "reward", "==", "1", "\n", "assert", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_calculus_differentiate_success_1_with_masking": [[125, 158], ["env.reset_from_text", "env.decode_question", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "numpy.ones", "env.mask_invalid_types", "env.get_action_index", "env.step", "len", "env.get_action_index", "env.get_action_index"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.mask_invalid_types", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index"], ["", "def", "test_calculus_differentiate_success_1_with_masking", "(", "self", ")", ":", "\n", "#env = MathEnv('params.yaml')", "\n", "# reset - then succeed after 4th action", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "\"Find the first derivative of 2*d**4 - 35*d**2 - 695 wrt d.\"", ",", "\n", "\"8*d**3 - 70*d\"", ")", "\n", "question", "=", "env", ".", "decode_question", "(", "encoded_question", ")", "\n", "assert", "question", "==", "\"Find the first derivative of 2*d**4 - 35*d**2 - 695 wrt d.\"", "\n", "# take action", "\n", "action", "=", "differentiate_wrt", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "==", "f\"{question}; differentiate_wrt('p_0','p_1')\"", "\n", ")", "\n", "# take action", "\n", "action", "=", "\"f0\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "==", "f\"{question}; differentiate_wrt(Expression('2*d**4 - 35*d**2 - 695'),'p_1')\"", "\n", ")", "\n", "vector", "=", "np", ".", "ones", "(", "len", "(", "env", ".", "actions", ")", ")", "\n", "masked_vector", "=", "env", ".", "mask_invalid_types", "(", "vector", ")", "\n", "assert", "masked_vector", "[", "env", ".", "get_action_index", "(", "\"f0\"", ")", "]", "==", "0", "and", "masked_vector", "[", "env", ".", "get_action_index", "(", "\"f1\"", ")", "]", "==", "1", "\n", "# take action", "\n", "action", "=", "\"f1\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "1", "\n", "assert", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_calculus_differentiate_success_2_with_masking": [[159, 181], ["env.reset_from_text", "env.decode_question", "env.get_action_index", "env.step", "env.get_action_index", "env.step"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["", "def", "test_calculus_differentiate_success_2_with_masking", "(", "self", ")", ":", "\n", "#env = MathEnv('params.yaml')", "\n", "# reset - then succeed after 4th action", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "\"Find the first derivative of 2*d**4 - 35*d**2 - 695 wrt d.\"", ",", "\n", "\"8*d**3 - 70*d\"", ")", "\n", "question", "=", "env", ".", "decode_question", "(", "encoded_question", ")", "\n", "assert", "question", "==", "\"Find the first derivative of 2*d**4 - 35*d**2 - 695 wrt d.\"", "\n", "# take action", "\n", "action", "=", "differentiate", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "==", "f\"{question}; differentiate('p_0')\"", "\n", ")", "\n", "# take action", "\n", "action", "=", "\"f0\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "1", "\n", "assert", "done", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "==", "f\"{question}; differentiate(Expression('2*d**4 - 35*d**2 - 695'))\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_numbers_div_remainder_success": [[183, 219], ["env.reset_from_text", "env.decode_question", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "Value", "Value"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["", "def", "test_numbers_div_remainder_success", "(", "self", ")", ":", "\n", "#env = MathEnv('params.yaml')", "\n", "# reset - then succeed after 4th action", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "\"Calculate the remainder when 93 is divided by 59.\"", ",", "\"34\"", ")", "\n", "question", "=", "env", ".", "decode_question", "(", "encoded_question", ")", "\n", "assert", "question", "==", "\"Calculate the remainder when 93 is divided by 59.\"", "\n", "assert", "env", ".", "compute_graph", ".", "formal_elements", "==", "[", "Value", "(", "\"93\"", ")", ",", "Value", "(", "\"59\"", ")", "]", "\n", "# first action", "\n", "action", "=", "mod", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "==", "f\"{question}; mod('p_0','p_1')\"", "\n", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "\"f0\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "\n", "==", "f\"{question}; mod(Value('93'),'p_1')\"", "\n", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "\"f1\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "\n", "==", "f\"{question}; mod(Value('93'),Value('59'))\"", "\n", ")", "\n", "assert", "reward", "==", "1", "\n", "assert", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_numbers_gcd_success": [[220, 255], ["env.reset_from_text", "env.decode_question", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "env.get_action_index", "env.step"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["", "def", "test_numbers_gcd_success", "(", "self", ")", ":", "\n", "#env = MathEnv('params.yaml')", "\n", "# reset - then succeed after 4th action", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "\"Calculate the highest common divisor of 1300 and 300.\"", ",", "\"100\"", ")", "\n", "question", "=", "env", ".", "decode_question", "(", "encoded_question", ")", "\n", "assert", "question", "==", "\"Calculate the highest common divisor of 1300 and 300.\"", "\n", "# first action", "\n", "action", "=", "gcd", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "==", "f\"{question}; gcd('p_0','p_1')\"", "\n", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "\"f0\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "\n", "==", "f\"{question}; gcd(Value('1300'),'p_1')\"", "\n", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "\"f1\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "\n", "==", "f\"{question}; gcd(Value('1300'),Value('300'))\"", "\n", ")", "\n", "assert", "reward", "==", "1", "\n", "assert", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_is_prime_success_1": [[256, 281], ["env.reset_from_text", "env.decode_question", "env.get_action_index", "env.step", "env.get_action_index", "env.step"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["", "def", "test_is_prime_success_1", "(", "self", ")", ":", "\n", "#env = MathEnv('params.yaml')", "\n", "# reset - then succeed after 4th action", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "\"Is 93163 a prime number?\"", ",", "\"False\"", ")", "\n", "question", "=", "env", ".", "decode_question", "(", "encoded_question", ")", "\n", "assert", "question", "==", "\"Is 93163 a prime number?\"", "\n", "# first action", "\n", "action", "=", "is_prime", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "==", "f\"{question}; is_prime('p_0')\"", "\n", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "\"f0\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "\n", "==", "f\"{question}; is_prime(Value('93163'))\"", "\n", ")", "\n", "assert", "reward", "==", "1", "\n", "assert", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_is_prime_success_2": [[282, 317], ["env.reset_from_text", "env.decode_question", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "env.get_action_index", "env.step"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["", "def", "test_is_prime_success_2", "(", "self", ")", ":", "\n", "#env = MathEnv('params.yaml')", "\n", "# reset - then succeed after 4th action", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "\"Is 66574 a composite number?\"", ",", "\"True\"", ")", "\n", "question", "=", "env", ".", "decode_question", "(", "encoded_question", ")", "\n", "assert", "question", "==", "\"Is 66574 a composite number?\"", "\n", "# first action", "\n", "action", "=", "not_op", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "==", "f\"{question}; not_op('p_0')\"", "\n", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "is_prime", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "\n", "==", "f\"{question}; not_op(is_prime('p_0'))\"", "\n", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "\"f0\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "(", "\n", "info", "[", "\"raw_observation\"", "]", "\n", "==", "f\"{question}; not_op(is_prime(Value('66574')))\"", "\n", ")", "\n", "assert", "reward", "==", "1", "\n", "assert", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_problem_third_diff_success": [[318, 343], ["env.reset_from_text", "env.decode_question", "env.get_action_index", "env.step", "env.step", "env.step", "env.get_action_index", "env.step"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["", "def", "test_problem_third_diff_success", "(", "self", ")", ":", "\n", "#env = MathEnv('params.yaml')", "\n", "# reset - then succeed after 4th action", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "\"Find the third derivative of -272*j**5 + j**3 - 8234*j**2.\"", ",", "\n", "\"-16320*j**2 + 6\"", ")", "\n", "question", "=", "env", ".", "decode_question", "(", "encoded_question", ")", "\n", "assert", "question", "==", "\"Find the third derivative of -272*j**5 + j**3 - 8234*j**2.\"", "\n", "# take action", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "differentiate", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# take action", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# take action", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# take action", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "\"f0\"", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "1", "\n", "assert", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_max_nodes_failure": [[344, 360], ["env.reset_from_text", "env.decode_question", "env.get_action_index", "range", "env.step", "env.step"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["", "def", "test_max_nodes_failure", "(", "self", ")", ":", "\n", "#env = MathEnv('params.yaml')", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "\"Is 66574 a composite number?\"", ",", "\"True\"", ")", "\n", "question", "=", "env", ".", "decode_question", "(", "encoded_question", ")", "\n", "assert", "question", "==", "\"Is 66574 a composite number?\"", "\n", "nt_action_index", "=", "env", ".", "get_action_index", "(", "not_op", ")", "\n", "for", "i", "in", "range", "(", "env", ".", "max_num_nodes", "-", "1", ")", ":", "\n", "# take action", "\n", "            ", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "nt_action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# take final action", "\n", "", "i", "+=", "1", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "nt_action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_lcd1": [[362, 382], ["env.reset_from_text", "env.decode_question", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "env.get_action_index", "env.step"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["", "def", "test_lcd1", "(", "self", ")", ":", "\n", "#env = MathEnv('params.yaml')", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "\"What is the common denominator of -64/1065 and 92/105?\"", ",", "\"7455\"", ")", "\n", "question", "=", "env", ".", "decode_question", "(", "encoded_question", ")", "\n", "# lcd", "\n", "assert", "question", "==", "\"What is the common denominator of -64/1065 and 92/105?\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "lcd", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# f0", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "\"f0\"", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# f1", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "\"f1\"", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "1", "\n", "assert", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_lcd2": [[383, 403], ["env.reset_from_text", "env.decode_question", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "env.get_action_index", "env.step"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.decode_question", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["", "def", "test_lcd2", "(", "self", ")", ":", "\n", "#env = MathEnv('params.yaml')", "\n", "        ", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "\"Calculate the common denominator of 1/(3/(-6)) - 402/(-60) and -71/12.\"", ",", "\"60\"", ")", "\n", "question", "=", "env", ".", "decode_question", "(", "encoded_question", ")", "\n", "# lcd", "\n", "assert", "question", "==", "\"Calculate the common denominator of 1/(3/(-6)) - 402/(-60) and -71/12.\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "lcd", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# f0", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "\"f0\"", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# f1", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "\"f1\"", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "1", "\n", "assert", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_polynomial_roots_1": [[404, 438], ["env.reset_from_text", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "env.get_action_index", "env.step"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["", "def", "test_polynomial_roots_1", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"What is f in -87616*f**2 - 1776*f - 9 = 0?\"", "\n", "answer", "=", "\"-3/296\"", "\n", "#env = MathEnv('params.yaml')", "\n", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "question", ",", "answer", ")", "\n", "action", "=", "lookup_value", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "solve_system", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "\"f0\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "append_to_empty_list", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "\"f1\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "1", "\n", "assert", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment.Test.test_polynomial_roots_2": [[439, 474], ["env.reset_from_text", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "env.get_action_index", "env.step", "print"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.reset_from_text", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.get_action_index", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.envs.math_env.MathEnv.step"], ["", "def", "test_polynomial_roots_2", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Solve -3*h**2/2 - 24*h - 45/2 = 0 for h.\"", "\n", "answer", "=", "\"-15, -1\"", "\n", "#env = MathEnv('params.yaml')", "\n", "encoded_question", ",", "_", "=", "env", ".", "reset_from_text", "(", "question", ",", "answer", ")", "\n", "action", "=", "lookup_value", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "solve_system", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "\"f1\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "append_to_empty_list", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "assert", "reward", "==", "0", "\n", "assert", "not", "done", "\n", "# next action", "\n", "action", "=", "\"f0\"", "\n", "action_index", "=", "env", ".", "get_action_index", "(", "action", ")", "\n", "observation", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action_index", ")", "\n", "print", "(", "info", "[", "'raw_observation'", "]", ")", "\n", "assert", "reward", "==", "1", "\n", "assert", "done", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_utils.Test.test_is_numeric": [[6, 10], ["math_prog_synth_env.utils.is_numeric", "math_prog_synth_env.utils.is_numeric", "math_prog_synth_env.utils.is_numeric"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.is_numeric", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.is_numeric", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.is_numeric"], ["    ", "def", "test_is_numeric", "(", "self", ")", ":", "\n", "        ", "assert", "is_numeric", "(", "\"2\"", ")", "\n", "assert", "is_numeric", "(", "\"2.0\"", ")", "\n", "assert", "not", "is_numeric", "(", "\"2.0.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_easy_algebra__linear_1d": [[9, 17], ["math_prog_synth_env.utils.extract_formal_elements", "append_to_empty_list", "solve_system", "lookup_value", "Value", "Equation", "Variable"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append_to_empty_list", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lookup_value"], ["def", "test_easy_algebra__linear_1d", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Solve 0 = 4*b + b + 15 for b.\"", "\n", "fs", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "fs", "==", "[", "Equation", "(", "\"0 = 4*b + b + 15\"", ")", ",", "Variable", "(", "\"b\"", ")", "]", "\n", "system", "=", "append_to_empty_list", "(", "fs", "[", "0", "]", ")", "\n", "solution", "=", "solve_system", "(", "system", ")", "\n", "value", "=", "lookup_value", "(", "solution", ",", "fs", "[", "1", "]", ")", "\n", "assert", "value", "==", "Value", "(", "-", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_easy_algebra__linear_1d_composed": [[18, 35], ["math_prog_synth_env.utils.extract_formal_elements", "make_equation", "append", "solve_system", "lookup_value_equation", "substitution_left_to_right", "append", "extract_isolated_variable", "lookup_value", "Value", "Variable", "Value", "Equation", "Equation", "Equation", "Variable", "append_to_empty_list", "solve_system", "sympy.sympify", "append_to_empty_list"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.make_equation", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lookup_value_equation", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.substitution_left_to_right", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.extract_isolated_variable", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lookup_value", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append_to_empty_list", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append_to_empty_list"], ["", "def", "test_easy_algebra__linear_1d_composed", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Let w be (-1 + 13)*3/(-6). Let b = w - -6. Let i = 2 - b. Solve -15 = 3*c + i*c for c.\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "\n", "Variable", "(", "\"w\"", ")", ",", "\n", "Value", "(", "sympy", ".", "sympify", "(", "\"(-1 + 13)*3/(-6)\"", ")", ")", ",", "\n", "Equation", "(", "\"b = w - -6\"", ")", ",", "\n", "Equation", "(", "\"i = 2 - b\"", ")", ",", "\n", "Equation", "(", "\"-15 = 3*c + i*c\"", ")", ",", "\n", "Variable", "(", "\"c\"", ")", ",", "\n", "]", "\n", "eq1", "=", "make_equation", "(", "f", "[", "0", "]", ",", "f", "[", "1", "]", ")", "\n", "system", "=", "append", "(", "append", "(", "append_to_empty_list", "(", "eq1", ")", ",", "f", "[", "2", "]", ")", ",", "f", "[", "3", "]", ")", "\n", "soln", "=", "solve_system", "(", "system", ")", "\n", "i_eq", "=", "lookup_value_equation", "(", "soln", ",", "extract_isolated_variable", "(", "f", "[", "3", "]", ")", ")", "\n", "lin_eq", "=", "substitution_left_to_right", "(", "f", "[", "4", "]", ",", "i_eq", ")", "\n", "assert", "lookup_value", "(", "solve_system", "(", "append_to_empty_list", "(", "lin_eq", ")", ")", ",", "f", "[", "5", "]", ")", "==", "Value", "(", "-", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_easy_algebra__linear_2d": [[36, 48], ["math_prog_synth_env.utils.extract_formal_elements", "lookup_value", "Value", "Equation", "Equation", "Variable", "solve_system", "append", "append_to_empty_list"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lookup_value", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append_to_empty_list"], ["", "def", "test_easy_algebra__linear_2d", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Solve 0 = 4*f - 0*t - 4*t - 4, -4*f + t = -13 for f.\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "\n", "Equation", "(", "\"0 = 4*f - 0*t - 4*t - 4\"", ")", ",", "\n", "Equation", "(", "\"-4*f + t = -13\"", ")", ",", "\n", "Variable", "(", "\"f\"", ")", ",", "\n", "]", "\n", "\n", "assert", "lookup_value", "(", "\n", "solve_system", "(", "append", "(", "append_to_empty_list", "(", "f", "[", "0", "]", ")", ",", "f", "[", "1", "]", ")", ")", ",", "f", "[", "2", "]", "\n", ")", "==", "Value", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_algebra__linear_2d_composed": [[49, 61], ["math_prog_synth_env.utils.extract_formal_elements", "append", "append", "lookup_value", "Value", "Equation", "Equation", "Equation", "Equation", "Variable", "append", "solve_system", "append_to_empty_list"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lookup_value", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append_to_empty_list"], ["", "def", "test_algebra__linear_2d_composed", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Suppose 2*y + 12 = 6*y. Suppose y = f - 15. Solve -8 = -4*w, -3*d - 4*w + f = -8*d for d.\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "\n", "Equation", "(", "\"2*y + 12 = 6*y\"", ")", ",", "\n", "Equation", "(", "\"y = f - 15\"", ")", ",", "\n", "Equation", "(", "\"-8 = -4*w\"", ")", ",", "\n", "Equation", "(", "\"-3*d - 4*w + f = -8*d\"", ")", ",", "\n", "Variable", "(", "\"d\"", ")", ",", "\n", "]", "\n", "system", "=", "append", "(", "append", "(", "append", "(", "append_to_empty_list", "(", "f", "[", "0", "]", ")", ",", "f", "[", "1", "]", ")", ",", "f", "[", "2", "]", ")", ",", "f", "[", "3", "]", ")", "\n", "assert", "lookup_value", "(", "solve_system", "(", "system", ")", ",", "f", "[", "4", "]", ")", "==", "Value", "(", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_algebra__polynomial_roots_1": [[62, 68], ["math_prog_synth_env.utils.extract_formal_elements", "lookup_value", "solve_system", "Equation", "Variable", "append_to_empty_list", "Rational", "Rational"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lookup_value", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append_to_empty_list"], ["", "def", "test_algebra__polynomial_roots_1", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Solve -3*h**2/2 - 24*h - 45/2 = 0 for h.\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "Equation", "(", "\"-3*h**2/2 - 24*h - 45/2 = 0\"", ")", ",", "Variable", "(", "\"h\"", ")", "]", "\n", "soln", "=", "lookup_value", "(", "solve_system", "(", "append_to_empty_list", "(", "f", "[", "0", "]", ")", ")", ",", "f", "[", "1", "]", ")", "\n", "assert", "soln", "==", "{", "Rational", "(", "-", "1", ")", ",", "Rational", "(", "-", "15", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_algebra__polynomial_roots_2": [[69, 74], ["math_prog_synth_env.utils.extract_formal_elements", "factor", "Expression", "Expression"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.factor"], ["", "def", "test_algebra__polynomial_roots_2", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Factor -n**2/3 - 25*n - 536/3.\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "Expression", "(", "\"-n**2/3 - 25*n - 536/3\"", ")", "]", "\n", "assert", "factor", "(", "f", "[", "0", "]", ")", "==", "Expression", "(", "\"-(n + 8)*(n + 67)/3\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_algebra__polynomial_roots_3": [[75, 88], ["math_prog_synth_env.utils.extract_formal_elements", "lookup_value", "Variable", "Equation", "solve_system", "Rational", "Rational", "Rational", "append_to_empty_list"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lookup_value", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append_to_empty_list"], ["", "def", "test_algebra__polynomial_roots_3", "(", "self", ")", ":", "\n", "        ", "question", "=", "(", "\n", "\"Find s such that 9*s**4 - 8958*s**3 - 14952*s**2 - 2994*s + 2991 = 0.\"", "\n", ")", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "\n", "Variable", "(", "\"s\"", ")", ",", "\n", "Equation", "(", "\"9*s**4 - 8958*s**3 - 14952*s**2 - 2994*s + 2991 = 0\"", ")", ",", "\n", "]", "\n", "assert", "lookup_value", "(", "solve_system", "(", "append_to_empty_list", "(", "f", "[", "1", "]", ")", ")", ",", "f", "[", "0", "]", ")", "==", "{", "\n", "Rational", "(", "-", "1", ")", ",", "\n", "Rational", "(", "'1/3'", ")", ",", "\n", "Rational", "(", "997", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_algebra__polynomial_roots_composed_1": [[90, 111], ["math_prog_synth_env.utils.extract_formal_elements", "simplify", "substitution_left_to_right", "differentiate", "make_function", "replace_arg", "substitution_left_to_right", "differentiate", "lookup_value", "Equation", "Expression", "Expression", "Function", "Variable", "differentiate", "solve_system", "Rational", "Rational", "append_to_empty_list"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.simplify", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.substitution_left_to_right", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.differentiate", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.make_function", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.replace_arg", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.substitution_left_to_right", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.differentiate", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lookup_value", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.differentiate", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append_to_empty_list"], ["", "def", "test_algebra__polynomial_roots_composed_1", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Let d = -25019/90 - -278. Let v(j) be the third derivative of 0 + 1/27*j**3 - d*j**5 + 1/54*j**4 + 3*j**2 + 0*j. Suppose v(o) = 0. What is o?\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "\n", "Equation", "(", "\"d = -25019/90 - -278\"", ")", ",", "\n", "Expression", "(", "\"v(j)\"", ")", ",", "\n", "Expression", "(", "\"0 + 1/27*j**3 - d*j**5 + 1/54*j**4 + 3*j**2 + 0*j\"", ")", ",", "\n", "Function", "(", "\"v(o) = 0\"", ")", ",", "\n", "Variable", "(", "\"o\"", ")", ",", "\n", "]", "\n", "d", "=", "simplify", "(", "f", "[", "0", "]", ")", "\n", "function", "=", "substitution_left_to_right", "(", "f", "[", "2", "]", ",", "d", ")", "\n", "v", "=", "differentiate", "(", "differentiate", "(", "differentiate", "(", "function", ")", ")", ")", "\n", "v_eq", "=", "make_function", "(", "f", "[", "1", "]", ",", "v", ")", "\n", "v_eq_o", "=", "replace_arg", "(", "v_eq", ",", "f", "[", "4", "]", ")", "\n", "equation", "=", "substitution_left_to_right", "(", "\n", "f", "[", "3", "]", ",", "v_eq_o", "\n", ")", "# e.g. x.subs(sym.sympify('f(x)'), sym.sympify('v'))", "\n", "assert", "lookup_value", "(", "solve_system", "(", "append_to_empty_list", "(", "equation", ")", ")", ",", "f", "[", "4", "]", ")", "==", "{", "\n", "Rational", "(", "'-1/3'", ")", ",", "\n", "Rational", "(", "1", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_calculus__differentiate": [[113, 118], ["math_prog_synth_env.utils.extract_formal_elements", "differentiate_wrt", "Expression", "Expression", "Variable", "differentiate_wrt"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.differentiate_wrt", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.differentiate_wrt"], ["", "def", "test_calculus__differentiate", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"What is the second derivative of 2*c*n**2*z**3 + 30*c*n**2 + 2*c*n*z**2 - 2*c + n**2*z**2 - 3*n*z**3 - 2*n*z wrt n?\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "Expression", "(", "'2*c*n**2*z**3 + 30*c*n**2 + 2*c*n*z**2 - 2*c + n**2*z**2 - 3*n*z**3 - 2*n*z'", ")", ",", "Variable", "(", "'n'", ")", "]", "\n", "assert", "differentiate_wrt", "(", "differentiate_wrt", "(", "f", "[", "0", "]", ",", "f", "[", "1", "]", ")", ",", "f", "[", "1", "]", ")", "==", "Expression", "(", "'4*c*z**3 + 60*c + 2*z**2'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_numbers__div_remainder": [[119, 124], ["math_prog_synth_env.utils.extract_formal_elements", "mod", "Value", "Value", "Value"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.mod"], ["", "def", "test_numbers__div_remainder", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Calculate the remainder when 93 is divided by 59.\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "Value", "(", "\"93\"", ")", ",", "Value", "(", "\"59\"", ")", "]", "\n", "assert", "mod", "(", "f", "[", "0", "]", ",", "f", "[", "1", "]", ")", "==", "Value", "(", "\"34\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_numbers__gcd": [[125, 130], ["math_prog_synth_env.utils.extract_formal_elements", "gcd", "Value", "Value", "Value"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.gcd"], ["", "def", "test_numbers__gcd", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Calculate the greatest common fac of 11130 and 6.\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "Value", "(", "\"11130\"", ")", ",", "Value", "(", "\"6\"", ")", "]", "\n", "assert", "gcd", "(", "f", "[", "0", "]", ",", "f", "[", "1", "]", ")", "==", "Value", "(", "\"6\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_numbers__is_factor": [[131, 136], ["math_prog_synth_env.utils.extract_formal_elements", "divides", "Value", "Value"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.divides"], ["", "def", "test_numbers__is_factor", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Is 15 a fac of 720?\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "Value", "(", "\"15\"", ")", ",", "Value", "(", "\"720\"", ")", "]", "\n", "assert", "divides", "(", "f", "[", "1", "]", ",", "f", "[", "0", "]", ")", "==", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_numbers__is_prime": [[137, 142], ["math_prog_synth_env.utils.extract_formal_elements", "is_prime", "Value"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.is_prime"], ["", "def", "test_numbers__is_prime", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Is 93163 a prime number?\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "Value", "(", "\"93163\"", ")", "]", "\n", "assert", "is_prime", "(", "f", "[", "0", "]", ")", "==", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_numbers__lcm": [[143, 148], ["math_prog_synth_env.utils.extract_formal_elements", "lcm", "Value", "Value", "Value"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lcm"], ["", "def", "test_numbers__lcm", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Calculate the smallest common multiple of 351 and 141.\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "Value", "(", "\"351\"", ")", ",", "Value", "(", "\"141\"", ")", "]", "\n", "assert", "lcm", "(", "f", "[", "0", "]", ",", "f", "[", "1", "]", ")", "==", "Value", "(", "\"16497\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_numbers__list_prime_factors": [[149, 154], ["math_prog_synth_env.utils.extract_formal_elements", "prime_factors", "Value", "Value", "Value"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.prime_factors"], ["", "def", "test_numbers__list_prime_factors", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"What are the prime factors of 329?\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "Value", "(", "\"329\"", ")", "]", "\n", "assert", "prime_factors", "(", "f", "[", "0", "]", ")", "==", "{", "Value", "(", "7", ")", ",", "Value", "(", "47", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_graphs.Test.test_polynomials_evaluate": [[155, 160], ["math_prog_synth_env.utils.extract_formal_elements", "evaluate_function", "Value", "Function", "Expression"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.extract_formal_elements", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.evaluate_function"], ["", "def", "test_polynomials_evaluate", "(", "self", ")", ":", "\n", "        ", "question", "=", "\"Let i(h) = -7*h - 15. Determine i(-2).\"", "\n", "f", "=", "extract_formal_elements", "(", "question", ")", "\n", "assert", "f", "==", "[", "Function", "(", "\"i(h) = -7*h - 15\"", ")", ",", "Expression", "(", "\"i(-2)\"", ")", "]", "\n", "assert", "evaluate_function", "(", "f", "[", "0", "]", ",", "f", "[", "1", "]", ")", "==", "Value", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.unit_testing.test_gym_environment_guessing.Test.test_guess_until_correct": [[8, 16], ["math_prog_synth_env.envs.math_env.MathEnv", "os.path.join", "math_prog_synth_env.utils.load_question_answer_pairs", "os.listdir", "math_prog_synth_env.utils.guess_until_problem_solved"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.load_question_answer_pairs", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.utils.guess_until_problem_solved"], ["    ", "def", "test_guess_until_correct", "(", "self", ")", ":", "\n", "        ", "\"\"\"this test only terminates when the graph is correctly guessed or timeout is reached\"\"\"", "\n", "env", "=", "MathEnv", "(", "'params.yaml'", ")", "\n", "for", "filename", "in", "[", "fn", "for", "fn", "in", "os", ".", "listdir", "(", "'math_prog_synth_env/unit_testing/artifacts/problems'", ")", "if", "'.txt'", "in", "fn", "]", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "f'math_prog_synth_env/unit_testing/artifacts/problems/{filename}'", ")", "\n", "question_answer_pairs", "=", "load_question_answer_pairs", "(", "filepath", ")", "\n", "for", "question", ",", "answer", "in", "question_answer_pairs", "[", ":", "5", "]", ":", "\n", "                ", "guess_until_problem_solved", "(", "env", ",", "question", ",", "answer", ",", "verbose", "=", "False", ",", "max_episode_index", "=", "50000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.__init__": [[12, 15], ["len", "equation.split"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.__str__": [[16, 18], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.__eq__": [[19, 21], ["str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split": [[22, 24], ["__init__.Equation.equation.split"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Function.__init__": [[27, 37], ["function.split", "re.match", "len", "re.match.group", "re.match.group", "function.split"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Function.__str__": [[38, 40], ["str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Function.__eq__": [[41, 43], ["str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Expression.__init__": [[46, 49], ["str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Expression.__str__": [[50, 52], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Expression.__eq__": [[53, 55], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Expression.__hash__": [[56, 58], ["hash"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Variable.__init__": [[61, 64], ["str", "variable.isalpha"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Variable.__str__": [[65, 67], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Variable.__eq__": [[68, 70], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Variable.__hash__": [[71, 73], ["hash"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Value.__init__": [[76, 78], ["float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Value.__str__": [[79, 84], ["str", "str", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Value.__eq__": [[85, 87], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Value.__hash__": [[88, 90], ["hash", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Value.__lt__": [[91, 93], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Value.__gt__": [[94, 96], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Rational.__init__": [[98, 105], ["str", "__init__.Value", "__init__.Value", "__init__.Rational.rational.split"], "methods", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Rational.__str__": [[106, 108], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Rational.__eq__": [[109, 111], ["str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Rational.__hash__": [[112, 114], ["hash", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Rational.__lt__": [[115, 117], ["sympy.Rational", "sympy.Rational"], "methods", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.solve_system": [[122, 167], ["multiprocess.Manager", "mp.Manager.dict", "multiprocess.Process", "mp.Process.start", "mp.Process.join", "mp.Process.is_alive", "manager.dict.get", "str().split", "sympy.Eq", "sympy_equations.append", "mp.Process.terminate", "mp.Process.join", "len", "Exception", "sympy.solve", "sympy.sympify", "sympy.sympify", "type", "str", "__init__.Variable", "set", "type", "str", "sympy.solve.items", "soln.items", "__init__.Rational", "str", "solutions_dict.keys", "solutions_dict[].add", "set", "__init__.Rational", "__init__.Variable", "__init__.Rational", "str", "__init__.Variable", "str"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.add"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append": [[170, 176], ["system.append"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.append_to_empty_list": [[178, 180], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lookup_value": [[183, 191], ["len", "corresponding_set.pop"], "function", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lookup_value_equation": [[194, 199], ["corresponding_set.pop", "__init__.Equation"], "function", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.make_equation": [[201, 203], ["__init__.Equation"], "function", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.make_function": [[205, 207], ["__init__.Function"], "function", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.extract_isolated_variable": [[209, 218], ["str().split", "lhs.strip", "rhs.strip", "lhs.isalpha", "str", "len", "rhs.isalpha", "Exception", "len"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.project_lhs": [[220, 222], ["__init__.Expression", "[].strip", "str().split", "str"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.project_rhs": [[224, 226], ["__init__.Expression", "[].strip", "str().split", "str"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.substitution_left_to_right": [[228, 230], ["str().replace", "str", "str", "str", "__init__.project_lhs", "__init__.project_rhs"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.project_lhs", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.project_rhs"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.substitution_right_to_left": [[232, 235], ["str().replace", "str", "str", "str", "__init__.project_rhs", "__init__.project_lhs"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.project_rhs", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.project_lhs"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.factor": [[237, 240], ["__init__.Expression", "str", "sympy.factor"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.factor"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.simplify": [[242, 250], ["str", "str().split", "__init__.Equation", "__init__.Expression", "lhs.strip", "rhs.strip", "str().strip", "str", "str", "sympy.simplify", "sympy.simplify", "sympy.simplify", "str"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.simplify", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.simplify", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.simplify"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.differentiate": [[252, 255], ["sympy.diff", "__init__.Expression", "sympy.sympify", "str", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.differentiate_wrt": [[257, 260], ["sympy.diff", "__init__.Expression", "sympy.sympify", "sympy.sympify", "str", "str", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.replace_arg": [[262, 267], ["function.split", "lhs.replace.replace", "rhs.replace.replace", "__init__.make_function", "str", "str", "__init__.Expression", "__init__.Expression", "str", "str"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.make_function"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.mod": [[269, 271], ["__init__.Value"], "function", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.divides": [[273, 275], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.gcd": [[277, 282], ["__init__.Value", "__init__.gcd", "int", "int"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.gcd"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.is_prime": [[284, 286], ["sympy.isprime", "int"], "function", ["None"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lcm": [[288, 294], ["__init__.Value", "int", "int", "int", "int", "abs", "math.gcd"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.gcd"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lcd": [[295, 298], ["__init__.lcm"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.lcm"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.prime_factors": [[300, 312], ["__init__.is_prime", "int", "set", "int", "range", "__init__.Value", "all"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.is_prime"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.evaluate_function": [[315, 338], ["str().split", "re.match", "re.match", "rhs.replace", "__init__.Value", "re.match.group", "re.match.group", "str", "eval", "str", "re.match.group", "re.match.group"], "function", ["home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.Equation.split", "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.math_prog_synth_env.compute_graph.ComputeGraph.eval"], []], "home.repos.pwc.inspect_result.JohnnyYeeee_math_prog_synth_env.typed_operators.__init__.not_op": [[340, 343], ["type"], "function", ["None"], []]}