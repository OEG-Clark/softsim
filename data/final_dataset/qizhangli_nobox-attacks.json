{"home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.prep_dataset.OUR_dataset.__init__": [[10, 21], ["torch.utils.data.Dataset.__init__", "open", "csv.reader", "list", "prep_dataset.OUR_dataset.prep_imgs_dir"], "methods", ["home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.Normalize.__init__", "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.prep_dataset.OUR_dataset.prep_imgs_dir"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ":", "str", ",", "data_csv_dir", ":", "str", ",", "mode", ":", "str", ",", "img_num", ":", "tuple", "or", "int", ",", "transform", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "'train'", ",", "'attack'", ",", "'all'", "]", ",", "'WRONG DATASET MODE'", "\n", "assert", "img_num", "in", "[", "1", ",", "5", ",", "10", ",", "20", "]", ",", "'ONLY SUPPORT 2/10/20/40 IMAGES'", "\n", "super", "(", "OUR_dataset", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "data_csv", "=", "open", "(", "data_csv_dir", ",", "'r'", ")", "\n", "csvreader", "=", "csv", ".", "reader", "(", "data_csv", ")", "\n", "data_ls", "=", "list", "(", "csvreader", ")", "\n", "self", ".", "imgs", "=", "self", ".", "prep_imgs_dir", "(", "data_ls", ",", "img_num", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "", "def", "prep_imgs_dir", "(", "self", ",", "data_ls", ",", "nImg", ")", ":", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.prep_dataset.OUR_dataset.prep_imgs_dir": [[21, 39], ["list", "prep_dataset.OUR_dataset.mk_img_ls", "list", "prep_dataset.OUR_dataset.mk_img_ls", "range", "list", "range", "range", "prep_dataset.OUR_dataset.mk_img_ls", "list", "list", "prep_dataset.OUR_dataset.mk_img_ls", "prep_dataset.OUR_dataset.mk_img_ls", "range", "range"], "methods", ["home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.prep_dataset.OUR_dataset.mk_img_ls", "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.prep_dataset.OUR_dataset.mk_img_ls", "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.prep_dataset.OUR_dataset.mk_img_ls", "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.prep_dataset.OUR_dataset.mk_img_ls", "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.prep_dataset.OUR_dataset.mk_img_ls"], ["", "def", "prep_imgs_dir", "(", "self", ",", "data_ls", ",", "nImg", ")", ":", "\n", "        ", "imgs_ls", "=", "[", "]", "\n", "if", "self", ".", "mode", "in", "[", "'train'", ",", "'attack'", "]", ":", "\n", "            ", "if", "nImg", ">=", "10", ":", "\n", "                ", "sel_ls", "=", "list", "(", "range", "(", "nImg", ")", ")", "\n", "imgs_ls", "+=", "self", ".", "mk_img_ls", "(", "data_ls", ",", "sel_ls", ")", "\n", "", "elif", "nImg", "==", "1", ":", "\n", "                ", "for", "jkl", "in", "list", "(", "range", "(", "10", ")", ")", ":", "\n", "                    ", "imgs_ls", "+=", "self", ".", "mk_img_ls", "(", "data_ls", ",", "[", "jkl", "]", ")", "\n", "", "", "elif", "nImg", "==", "5", ":", "\n", "                ", "sel_ls_1", "=", "list", "(", "range", "(", "5", ")", ")", "\n", "sel_ls_2", "=", "list", "(", "range", "(", "5", ",", "10", ")", ")", "\n", "imgs_ls", "+=", "self", ".", "mk_img_ls", "(", "data_ls", ",", "sel_ls_1", ")", "\n", "imgs_ls", "+=", "self", ".", "mk_img_ls", "(", "data_ls", ",", "sel_ls_2", ")", "\n", "", "", "elif", "self", ".", "mode", "==", "'all'", ":", "\n", "            ", "sel_ls", "=", "list", "(", "range", "(", "50", ")", ")", "\n", "imgs_ls", "+=", "self", ".", "mk_img_ls", "(", "data_ls", ",", "sel_ls", ")", "\n", "", "return", "imgs_ls", "\n", "", "def", "mk_img_ls", "(", "self", ",", "data_ls", ",", "sel_ls", ")", ":", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.prep_dataset.OUR_dataset.mk_img_ls": [[39, 46], ["range", "len", "imgs_ls.append"], "methods", ["None"], ["", "def", "mk_img_ls", "(", "self", ",", "data_ls", ",", "sel_ls", ")", ":", "\n", "        ", "imgs_ls", "=", "[", "]", "\n", "for", "label_ind", "in", "range", "(", "len", "(", "data_ls", ")", ")", ":", "\n", "            ", "for", "img_ind", "in", "sel_ls", ":", "\n", "                ", "imgs_ls", ".", "append", "(", "[", "self", ".", "data_dir", "+", "'/'", "+", "data_ls", "[", "label_ind", "]", "[", "0", "]", "+", "'/'", "+", "data_ls", "[", "label_ind", "]", "[", "1", "+", "img_ind", "]", ",", "\n", "label_ind", "]", ")", "\n", "", "", "return", "imgs_ls", "\n", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.prep_dataset.OUR_dataset.__getitem__": [[46, 51], ["PIL.Image.open", "img.convert.convert.convert", "prep_dataset.OUR_dataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "imgs", "[", "item", "]", "[", "0", "]", ")", "\n", "if", "img", ".", "mode", "!=", "'RGB'", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "", "return", "self", ".", "transform", "(", "img", ")", ",", "self", ".", "imgs", "[", "item", "]", "[", "1", "]", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.prep_dataset.OUR_dataset.__len__": [[51, 53], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.model_autoencoder.ResnetBlock.__init__": [[9, 12], ["torch.Module.__init__", "model_autoencoder.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.Normalize.__init__", "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.model_autoencoder.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.model_autoencoder.ResnetBlock.build_conv_block": [[13, 41], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "dim", ")", ",", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.model_autoencoder.ResnetBlock.forward": [[42, 46], ["model_autoencoder.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function (with skip connections)\"\"\"", "\n", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "# add skip connections", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.model_autoencoder.autoencoder.__init__": [[51, 87], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "range", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "setattr", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "model_autoencoder.ResnetBlock", "model_autoencoder.autoencoder.mk_decoder"], "methods", ["home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.Normalize.__init__", "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.model_autoencoder.autoencoder.mk_decoder"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "\n", "n_blocks", "=", "6", ",", "padding_type", "=", "'reflect'", ",", "decoder_num", "=", "2", ",", "decoder_out_ind", "=", "100", ")", ":", "\n", "        ", "super", "(", "autoencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "# add downsampling layers", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "# add ResNet blocks", "\n", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "\n", "\n", "", "self", ".", "decoder_num", "=", "decoder_num", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "self", ".", "decoder_out_ind", "=", "decoder_out_ind", "\n", "if", "decoder_num", "==", "1", ":", "\n", "            ", "mk_decoder", "=", "self", ".", "mk_decoder_224", "\n", "", "else", ":", "\n", "            ", "mk_decoder", "=", "self", ".", "mk_decoder", "\n", "", "for", "decoder_ind", "in", "range", "(", "decoder_num", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "'decoder_{}'", ".", "format", "(", "decoder_ind", ")", ",", "mk_decoder", "(", "n_downsampling", ",", "norm_layer", ",", "ngf", ",", "use_bias", ",", "output_nc", ")", ")", "\n", "", "", "def", "mk_decoder", "(", "self", ",", "n_downsampling", ",", "norm_layer", ",", "ngf", ",", "use_bias", ",", "output_nc", ")", ":", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.model_autoencoder.autoencoder.mk_decoder": [[87, 97], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], ["", "", "def", "mk_decoder", "(", "self", ",", "n_downsampling", ",", "norm_layer", ",", "ngf", ",", "use_bias", ",", "output_nc", ")", ":", "\n", "        ", "model", "=", "[", "]", "\n", "model", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "norm_layer", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "128", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "return", "model", "\n", "", "def", "mk_decoder_224", "(", "self", ",", "n_downsampling", ",", "norm_layer", ",", "ngf", ",", "use_bias", ",", "output_nc", ")", ":", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.model_autoencoder.autoencoder.mk_decoder_224": [[97, 111], ["range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["None"], ["", "def", "mk_decoder_224", "(", "self", ",", "n_downsampling", ",", "norm_layer", ",", "ngf", ",", "use_bias", ",", "output_nc", ")", ":", "\n", "        ", "model", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "# add upsampling layers", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "return", "model", "\n", "", "def", "decoder_forw", "(", "self", ",", "x", ",", "decoder_ind", ")", ":", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.model_autoencoder.autoencoder.decoder_forw": [[111, 117], ["enumerate", "getattr", "mm"], "methods", ["None"], ["", "def", "decoder_forw", "(", "self", ",", "x", ",", "decoder_ind", ")", ":", "\n", "        ", "for", "ind", ",", "mm", "in", "enumerate", "(", "getattr", "(", "self", ",", "'decoder_{}'", ".", "format", "(", "decoder_ind", ")", ")", ")", ":", "\n", "            ", "x", "=", "mm", "(", "x", ")", "\n", "if", "ind", "==", "self", ".", "decoder_out_ind", ":", "\n", "                ", "return", "x", "\n", "", "", "return", "x", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.model_autoencoder.autoencoder.forward": [[117, 127], ["enumerate", "mm.clone", "range", "mm", "outs.append", "model_autoencoder.autoencoder.decoder_forw"], "methods", ["home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.model_autoencoder.autoencoder.decoder_forw"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Standard forward\"\"\"", "\n", "x", "=", "input", "\n", "for", "ind", ",", "mm", "in", "enumerate", "(", "self", ".", "encoder", ")", ":", "\n", "            ", "x", "=", "mm", "(", "x", ")", "\n", "", "y", "=", "x", ".", "clone", "(", ")", "\n", "outs", "=", "[", "]", "\n", "for", "decoder_ind", "in", "range", "(", "self", ".", "decoder_num", ")", ":", "\n", "            ", "outs", ".", "append", "(", "self", ".", "decoder_forw", "(", "x", ",", "decoder_ind", ")", ")", "\n", "", "return", "outs", ",", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.attack.ILA.__init__": [[39, 41], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.Normalize.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ILA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "ori_mid", ",", "tar_mid", ",", "att_mid", ")", ":", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.attack.ILA.forward": [[41, 51], ["ori_mid.view.view.view", "tar_mid.view.view.view", "att_mid.view.view.view", "V.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "ori_mid", ",", "tar_mid", ",", "att_mid", ")", ":", "\n", "        ", "bs", "=", "ori_mid", ".", "shape", "[", "0", "]", "\n", "ori_mid", "=", "ori_mid", ".", "view", "(", "bs", ",", "-", "1", ")", "\n", "tar_mid", "=", "tar_mid", ".", "view", "(", "bs", ",", "-", "1", ")", "\n", "att_mid", "=", "att_mid", ".", "view", "(", "bs", ",", "-", "1", ")", "\n", "W", "=", "att_mid", "-", "ori_mid", "\n", "V", "=", "tar_mid", "-", "ori_mid", "\n", "V", "=", "V", "/", "V", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "ILA", "=", "(", "W", "*", "V", ")", ".", "sum", "(", ")", "/", "bs", "\n", "return", "ILA", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.attack.save_attack_img": [[54, 56], ["torchvision.ToPILImage", "img.data.cpu"], "function", ["None"], ["", "", "def", "save_attack_img", "(", "img", ",", "file_dir", ")", ":", "\n", "    ", "T", ".", "ToPILImage", "(", ")", "(", "img", ".", "data", ".", "cpu", "(", ")", ")", ".", "save", "(", "file_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.attack.initialize_model": [[57, 65], ["model_autoencoder.autoencoder", "torch.Sequential", "nn.Sequential.to", "utils.Normalize"], "function", ["None"], ["", "def", "initialize_model", "(", "decoder_num", ")", ":", "\n", "    ", "model", "=", "autoencoder", "(", "input_nc", "=", "3", ",", "output_nc", "=", "3", ",", "n_blocks", "=", "3", ",", "decoder_num", "=", "decoder_num", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "\n", "Normalize", "(", ")", ",", "\n", "model", ",", "\n", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.attack.attack_ila": [[67, 88], ["model.eval", "ori_img.to.to", "ori_img.to.clone", "range", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "model", "torch.clamp.requires_grad_", "model", "loss.backward", "torch.clamp.grad.data.sign", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.clamp", "torch.clamp", "torch.clamp", "attack.ILA", "ori_h_feats.detach", "tar_h_feats.detach", "print", "loss.item"], "function", ["None"], ["", "def", "attack_ila", "(", "model", ",", "ori_img", ",", "tar_img", ",", "attack_niters", ",", "eps", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "ori_img", "=", "ori_img", ".", "to", "(", "device", ")", "\n", "img", "=", "ori_img", ".", "clone", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "_", ",", "tar_h_feats", "=", "model", "(", "tar_img", ")", "\n", "_", ",", "ori_h_feats", "=", "model", "(", "ori_img", ")", "\n", "", "for", "i", "in", "range", "(", "attack_niters", ")", ":", "\n", "        ", "img", ".", "requires_grad_", "(", "True", ")", "\n", "_", ",", "att_h_feats", "=", "model", "(", "img", ")", "\n", "loss", "=", "ILA", "(", ")", "(", "ori_h_feats", ".", "detach", "(", ")", ",", "tar_h_feats", ".", "detach", "(", ")", ",", "att_h_feats", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "            ", "print", "(", "'\\r ila attacking {}, {:0.4f}'", ".", "format", "(", "i", "+", "1", ",", "loss", ".", "item", "(", ")", ")", ",", "end", "=", "' '", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "input_grad", "=", "img", ".", "grad", ".", "data", ".", "sign", "(", ")", "\n", "img", "=", "img", ".", "data", "+", "1.", "/", "255", "*", "input_grad", "\n", "img", "=", "torch", ".", "where", "(", "img", ">", "ori_img", "+", "eps", ",", "ori_img", "+", "eps", ",", "img", ")", "\n", "img", "=", "torch", ".", "where", "(", "img", "<", "ori_img", "-", "eps", ",", "ori_img", "-", "eps", ",", "img", ")", "\n", "img", "=", "torch", ".", "clamp", "(", "img", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "", "print", "(", "''", ")", "\n", "return", "img", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.attack.attack_ce_unsup": [[89, 124], ["model.eval", "ori_img.to.to", "range", "range", "torch.cat", "torch.cat", "torch.cat", "tar_img.reshape.reshape", "ori_img.to.clone", "range", "print", "tar_img.reshape.append", "tar_img.reshape.append", "img_x.requires_grad_", "model", "outs[].unsqueeze().repeat", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "loss.backward", "img_x.grad.data.sign", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.clamp", "torch.clamp", "torch.clamp", "torch.CrossEntropyLoss", "print", "outs[].unsqueeze", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.clamp.new().uniform_", "loss.item", "torch.MSELoss", "torch.tensor", "torch.tensor", "torch.tensor", "torch.clamp.new", "torch.clamp.size"], "function", ["None"], ["", "def", "attack_ce_unsup", "(", "model", ",", "ori_img", ",", "attack_niters", ",", "eps", ",", "alpha", ",", "n_imgs", ",", "ce_method", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "ori_img", "=", "ori_img", ".", "to", "(", "device", ")", "\n", "nChannels", "=", "3", "\n", "tar_img", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_imgs", ")", ":", "\n", "        ", "tar_img", ".", "append", "(", "ori_img", "[", "[", "i", ",", "n_imgs", "+", "i", "]", "]", ")", "\n", "", "for", "i", "in", "range", "(", "n_imgs", ")", ":", "\n", "        ", "tar_img", ".", "append", "(", "ori_img", "[", "[", "n_imgs", "+", "i", ",", "i", "]", "]", ")", "\n", "", "tar_img", "=", "torch", ".", "cat", "(", "tar_img", ",", "dim", "=", "0", ")", "\n", "tar_img", "=", "tar_img", ".", "reshape", "(", "2", "*", "n_imgs", ",", "2", ",", "nChannels", ",", "224", ",", "224", ")", "\n", "img", "=", "ori_img", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "attack_niters", ")", ":", "\n", "        ", "if", "ce_method", "==", "'ifgsm'", ":", "\n", "            ", "img_x", "=", "img", "\n", "# In our implementation of PGD, we incorporate randomness at each iteration to further enhance the transferability", "\n", "", "elif", "ce_method", "==", "'pgd'", ":", "\n", "            ", "img_x", "=", "img", "+", "img", ".", "new", "(", "img", ".", "size", "(", ")", ")", ".", "uniform_", "(", "-", "eps", ",", "eps", ")", "\n", "", "img_x", ".", "requires_grad_", "(", "True", ")", "\n", "outs", ",", "_", "=", "model", "(", "img_x", ")", "\n", "outs", "=", "outs", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "2", ",", "1", ",", "1", ",", "1", ")", "\n", "loss_mse_", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", "(", "outs", ",", "tar_img", ")", ".", "sum", "(", "dim", "=", "(", "2", ",", "3", ",", "4", ")", ")", "/", "(", "nChannels", "*", "224", "*", "224", ")", "\n", "loss_mse", "=", "-", "alpha", "*", "loss_mse_", "\n", "label", "=", "torch", ".", "tensor", "(", "[", "0", "]", "*", "n_imgs", "*", "2", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "loss_mse", ",", "label", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "50", "==", "0", "or", "i", "==", "0", ":", "\n", "            ", "print", "(", "'\\r attacking {}, {:0.4f}'", ".", "format", "(", "i", ",", "loss", ".", "item", "(", ")", ")", ",", "end", "=", "' '", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "input_grad", "=", "img_x", ".", "grad", ".", "data", ".", "sign", "(", ")", "\n", "img", "=", "img", ".", "data", "+", "1.", "/", "255", "*", "input_grad", "\n", "img", "=", "torch", ".", "where", "(", "img", ">", "ori_img", "+", "eps", ",", "ori_img", "+", "eps", ",", "img", ")", "\n", "img", "=", "torch", ".", "where", "(", "img", "<", "ori_img", "-", "eps", ",", "ori_img", "-", "eps", ",", "img", ")", "\n", "img", "=", "torch", ".", "clamp", "(", "img", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "", "print", "(", "''", ")", "\n", "return", "img", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.attack.attack_ce_proto": [[125, 163], ["model.eval", "ori_img.to.to", "range", "torch.cat", "torch.cat", "torch.cat", "F.interpolate.reshape().unsqueeze", "F.interpolate.repeat().reshape", "ori_img.to.clone", "range", "print", "F.interpolate.append", "torch.interpolate", "img_x.requires_grad_", "model", "torch.cat().unsqueeze().repeat", "torch.cat().unsqueeze().repeat", "torch.cat().unsqueeze().repeat", "torch.tensor().long().to", "torch.tensor().long().to", "torch.tensor().long().to", "loss.backward", "img_x.grad.data.sign", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.clamp", "torch.clamp", "torch.clamp", "F.interpolate.reshape", "F.interpolate.repeat", "torch.CrossEntropyLoss", "print", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.tensor().long", "torch.tensor().long", "torch.tensor().long", "torch.clamp.new().uniform_", "loss.item", "torch.cat", "torch.cat", "torch.cat", "torch.MSELoss", "torch.tensor", "torch.tensor", "torch.tensor", "torch.clamp.new", "torch.clamp.size"], "function", ["None"], ["", "def", "attack_ce_proto", "(", "model", ",", "ori_img", ",", "attack_niters", ",", "eps", ",", "alpha", ",", "n_decoders", ",", "ce_method", ",", "n_imgs", ",", "prototype_inds", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "ori_img", "=", "ori_img", ".", "to", "(", "device", ")", "\n", "tar_img", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_decoders", ")", ":", "\n", "        ", "tar_img", ".", "append", "(", "ori_img", "[", "[", "prototype_inds", "[", "2", "*", "i", "]", ",", "prototype_inds", "[", "2", "*", "i", "+", "1", "]", "]", "]", ")", "\n", "", "tar_img", "=", "torch", ".", "cat", "(", "tar_img", ",", "dim", "=", "0", ")", "\n", "nChannels", "=", "3", "\n", "if", "n_decoders", "==", "1", ":", "\n", "        ", "decoder_size", "=", "224", "\n", "", "else", ":", "\n", "        ", "decoder_size", "=", "56", "\n", "tar_img", "=", "F", ".", "interpolate", "(", "tar_img", ",", "size", "=", "(", "56", ",", "56", ")", ")", "\n", "", "tar_img", "=", "tar_img", ".", "reshape", "(", "n_decoders", ",", "2", ",", "nChannels", ",", "decoder_size", ",", "decoder_size", ")", ".", "unsqueeze", "(", "1", ")", "\n", "tar_img", "=", "tar_img", ".", "repeat", "(", "1", ",", "n_imgs", "*", "2", ",", "1", ",", "1", ",", "1", ",", "1", ")", ".", "reshape", "(", "n_imgs", "*", "2", "*", "n_decoders", ",", "2", ",", "nChannels", ",", "decoder_size", ",", "decoder_size", ")", "\n", "img", "=", "ori_img", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "attack_niters", ")", ":", "\n", "        ", "if", "ce_method", "==", "'ifgsm'", ":", "\n", "            ", "img_x", "=", "img", "\n", "", "elif", "ce_method", "==", "'pgd'", ":", "\n", "            ", "img_x", "=", "img", "+", "img", ".", "new", "(", "img", ".", "size", "(", ")", ")", ".", "uniform_", "(", "-", "eps", ",", "eps", ")", "\n", "", "img_x", ".", "requires_grad_", "(", "True", ")", "\n", "outs", ",", "_", "=", "model", "(", "img_x", ")", "\n", "outs", "=", "torch", ".", "cat", "(", "outs", ",", "dim", "=", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "2", ",", "1", ",", "1", ",", "1", ")", "\n", "loss_mse_", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", "(", "outs", ",", "tar_img", ")", ".", "sum", "(", "dim", "=", "(", "2", ",", "3", ",", "4", ")", ")", "/", "(", "nChannels", "*", "decoder_size", "*", "decoder_size", ")", "\n", "loss_mse", "=", "-", "alpha", "*", "loss_mse_", "\n", "label", "=", "torch", ".", "tensor", "(", "(", "[", "0", "]", "*", "n_imgs", "+", "[", "1", "]", "*", "n_imgs", ")", "*", "n_decoders", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "loss_mse", ",", "label", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "50", "==", "0", "or", "i", "==", "0", ":", "\n", "            ", "print", "(", "'attacking {}, {:0.4f}'", ".", "format", "(", "i", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "input_grad", "=", "img_x", ".", "grad", ".", "data", ".", "sign", "(", ")", "\n", "img", "=", "img", ".", "data", "+", "1.", "/", "255", "*", "input_grad", "\n", "img", "=", "torch", ".", "where", "(", "img", ">", "ori_img", "+", "eps", ",", "ori_img", "+", "eps", ",", "img", ")", "\n", "img", "=", "torch", ".", "where", "(", "img", "<", "ori_img", "-", "eps", ",", "ori_img", "-", "eps", ",", "img", ")", "\n", "img", "=", "torch", ".", "clamp", "(", "img", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "", "print", "(", "''", ")", "\n", "return", "img", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.train.initialize_model": [[29, 37], ["model_autoencoder.autoencoder", "torch.Sequential", "nn.Sequential.to", "utils.Normalize"], "function", ["None"], ["def", "initialize_model", "(", "decoder_num", ")", ":", "\n", "    ", "model", "=", "autoencoder", "(", "input_nc", "=", "3", ",", "output_nc", "=", "3", ",", "n_blocks", "=", "3", ",", "decoder_num", "=", "decoder_num", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "\n", "Normalize", "(", ")", ",", "\n", "model", ",", "\n", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.train.train_prototypical": [[38, 64], ["prototype_ind_csv_writer.writerow", "time.time", "range", "utils.mk_proto_ls", "utils.mk_proto_ls.tolist", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "img[].clone", "model", "torch.cat", "torch.cat", "torch.cat", "optimizer.zero_grad", "loss.backward", "optimizer.step", "utils.aug", "torch.MSELoss", "print", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "round", "loss.item", "int", "time.time"], "function", ["home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.mk_proto_ls", "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.aug"], ["", "def", "train_prototypical", "(", "model", ",", "img", ",", "n_imgs", ",", "n_decoders", ",", "n_iters", ",", "prototype_ind_csv_writer", ")", ":", "\n", "    ", "if", "n_imgs", "==", "1", ":", "\n", "        ", "tar_ind_ls", "=", "[", "0", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "tar_ind_ls", "=", "mk_proto_ls", "(", "n_imgs", ")", "\n", "", "tar_ind_ls", "=", "tar_ind_ls", "[", ":", "n_decoders", "*", "2", "]", "\n", "prototype_ind_csv_writer", ".", "writerow", "(", "tar_ind_ls", ".", "tolist", "(", ")", ")", "\n", "img_tar", "=", "img", "[", "tar_ind_ls", "]", "\n", "if", "n_decoders", "!=", "1", ":", "\n", "        ", "img_tar", "=", "F", ".", "interpolate", "(", "img_tar", ",", "(", "56", ",", "56", ")", ")", "\n", "", "since", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "n_iters", ")", ":", "\n", "        ", "rand_ind", "=", "torch", ".", "cat", "(", "(", "torch", ".", "randint", "(", "0", ",", "n_imgs", ",", "size", "=", "(", "1", ",", ")", ")", ",", "torch", ".", "randint", "(", "n_imgs", ",", "2", "*", "n_imgs", ",", "size", "=", "(", "1", ",", ")", ")", ")", ")", "\n", "img_input", "=", "img", "[", "rand_ind", "]", ".", "clone", "(", ")", "\n", "if", "do_aug", ":", "\n", "            ", "img_input", "=", "aug", "(", "img_input", ")", "\n", "", "assert", "img_input", ".", "shape", "[", "3", "]", "==", "224", "\n", "outputs", ",", "_", "=", "model", "(", "img_input", ")", "\n", "gen_img", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "0", ")", "\n", "loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "gen_img", ",", "img_tar", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "iter_ind", "+", "1", ",", "i", "+", "1", ",", "round", "(", "loss", ".", "item", "(", ")", ",", "5", ")", ",", "'{} s'", ".", "format", "(", "int", "(", "time", ".", "time", "(", ")", "-", "since", ")", ")", ")", "\n", "", "", "return", "model", "\n", "", "def", "train_unsup", "(", "model", ",", "img", ",", "n_iters", ")", ":", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.train.train_unsup": [[64, 82], ["img.clone", "time.time", "range", "range", "model", "optimizer.zero_grad", "loss.backward", "optimizer.step", "torch.MSELoss", "print", "utils.rot", "round", "utils.shuffle", "loss.item", "int", "time.time"], "function", ["home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.rot", "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.shuffle"], ["", "def", "train_unsup", "(", "model", ",", "img", ",", "n_iters", ")", ":", "\n", "    ", "img_input", "=", "img", "\n", "img_tar", "=", "img", ".", "clone", "(", ")", "\n", "since", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "n_iters", ")", ":", "\n", "        ", "for", "img_ind", "in", "range", "(", "img_input", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "args", ".", "mode", "==", "'rotate'", ":", "\n", "                ", "img_input", "[", "img_ind", ":", "img_ind", "+", "1", "]", "=", "rot", "(", "img_input", "[", "img_ind", ":", "img_ind", "+", "1", "]", ")", "\n", "", "elif", "args", ".", "mode", "==", "'jigsaw'", ":", "\n", "                ", "img_input", "[", "img_ind", "]", "=", "shuffle", "(", "img_input", "[", "img_ind", "]", ",", "1", ")", "\n", "", "", "outputs", ",", "_", "=", "model", "(", "img_input", ")", "\n", "loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "outputs", "[", "0", "]", ",", "img_tar", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "iter_ind", "+", "1", ",", "i", "+", "1", ",", "round", "(", "loss", ".", "item", "(", ")", ",", "5", ")", ",", "'{} s'", ".", "format", "(", "int", "(", "time", ".", "time", "(", ")", "-", "since", ")", ")", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.Normalize.__init__": [[5, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.Normalize.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ms", "=", "None", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "ms", "==", "None", ":", "\n", "            ", "self", ".", "ms", "=", "[", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", "]", "\n", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.Normalize.forward": [[9, 14], ["input.clone", "range"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "input", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "x", "[", ":", ",", "i", "]", "=", "(", "x", "[", ":", ",", "i", "]", "-", "self", ".", "ms", "[", "0", "]", "[", "i", "]", ")", "/", "self", ".", "ms", "[", "1", "]", "[", "i", "]", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.rot": [[15, 28], ["torch.randint().item", "torch.randint().item", "torch.randint", "torch.randint", "torch.flip().permute", "torch.flip().permute", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip.permute"], "function", ["None"], ["", "", "def", "rot", "(", "img", ")", ":", "\n", "    ", "rand_angle", "=", "torch", ".", "randint", "(", "0", ",", "4", ",", "size", "=", "(", "1", ",", ")", ")", ".", "item", "(", ")", "# 0,1,2,3", "\n", "assert", "rand_angle", "in", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "'check rand_angle'", "\n", "if", "rand_angle", "==", "0", ":", "\n", "        ", "img", "=", "img", "\n", "", "elif", "rand_angle", "==", "1", ":", "\n", "        ", "img", "=", "torch", ".", "flip", "(", "img", ",", "dims", "=", "[", "3", "]", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "", "elif", "rand_angle", "==", "2", ":", "\n", "        ", "img", "=", "torch", ".", "flip", "(", "img", ",", "dims", "=", "[", "2", "]", ")", "\n", "img", "=", "torch", ".", "flip", "(", "img", ",", "dims", "=", "[", "3", "]", ")", "\n", "", "elif", "rand_angle", "==", "3", ":", "\n", "        ", "img", "=", "torch", ".", "flip", "(", "img", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ",", "dims", "=", "[", "3", "]", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.horizontal_flip": [[29, 34], ["torch.randint().item", "torch.randint().item", "torch.flip", "torch.flip", "torch.randint", "torch.randint"], "function", ["None"], ["", "def", "horizontal_flip", "(", "img", ")", ":", "\n", "    ", "rand_flip", "=", "torch", ".", "randint", "(", "0", ",", "2", ",", "size", "=", "(", "1", ",", ")", ")", ".", "item", "(", ")", "# 0,1", "\n", "assert", "rand_flip", "in", "[", "0", ",", "1", "]", ",", "'check rand_flip'", "\n", "img", "=", "torch", ".", "flip", "(", "img", ",", "dims", "=", "[", "3", "]", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.shuffle": [[35, 61], ["torch.randperm", "torch.randperm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "img.reshape.permute", "img.reshape.reshape", "torch.randint().item", "torch.randint().item", "img.reshape.reshape", "img.reshape.permute", "img.reshape.reshape", "torch.randint().item", "torch.randint().item", "img.reshape.reshape", "img.reshape.permute", "eval", "eval", "eval", "eval", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "function", ["None"], ["", "def", "shuffle", "(", "img", ",", "mode", ")", ":", "\n", "    ", "assert", "mode", "in", "[", "0", ",", "1", "]", ",", "'check shuffle mode'", "\n", "if", "mode", "==", "0", ":", "\n", "        ", "patch_0", "=", "img", "[", ":", ",", "0", ":", "112", ",", "0", ":", "112", "]", "\n", "patch_1", "=", "img", "[", ":", ",", "0", ":", "112", ",", "112", ":", "224", "]", "\n", "patch_2", "=", "img", "[", ":", ",", "112", ":", "224", ",", "0", ":", "112", "]", "\n", "patch_3", "=", "img", "[", ":", ",", "112", ":", "224", ",", "112", ":", "224", "]", "\n", "rand_ind", "=", "torch", ".", "randperm", "(", "4", ")", "\n", "img_0", "=", "torch", ".", "cat", "(", "(", "eval", "(", "'patch_{}'", ".", "format", "(", "rand_ind", "[", "0", "]", ")", ")", ",", "\n", "eval", "(", "'patch_{}'", ".", "format", "(", "rand_ind", "[", "1", "]", ")", ")", ")", ",", "dim", "=", "2", ")", "\n", "img_1", "=", "torch", ".", "cat", "(", "(", "eval", "(", "'patch_{}'", ".", "format", "(", "rand_ind", "[", "2", "]", ")", ")", ",", "\n", "eval", "(", "'patch_{}'", ".", "format", "(", "rand_ind", "[", "3", "]", ")", ")", ")", ",", "dim", "=", "2", ")", "\n", "return", "torch", ".", "cat", "(", "(", "img_0", ",", "img_1", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "# four possibilities, for easy training", "\n", "        ", "img", "=", "img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "img", "=", "img", ".", "reshape", "(", "2", ",", "112", ",", "224", ",", "3", ")", "\n", "rand_shuffle_1", "=", "torch", ".", "randint", "(", "0", ",", "2", ",", "size", "=", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "img", "=", "img", "[", "[", "rand_shuffle_1", ",", "1", "-", "rand_shuffle_1", "]", "]", "\n", "img", "=", "img", ".", "reshape", "(", "224", ",", "224", ",", "3", ")", "\n", "img", "=", "img", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "img", "=", "img", ".", "reshape", "(", "2", ",", "112", ",", "224", ",", "3", ")", "\n", "rand_shuffle_2", "=", "torch", ".", "randint", "(", "0", ",", "2", ",", "size", "=", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "img", "=", "img", "[", "[", "rand_shuffle_2", ",", "1", "-", "rand_shuffle_2", "]", "]", "\n", "img", "=", "img", ".", "reshape", "(", "224", ",", "224", ",", "3", ")", "\n", "return", "img", ".", "permute", "(", "2", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.aug": [[63, 67], ["range", "utils.horizontal_flip"], "function", ["home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.horizontal_flip"], ["", "", "def", "aug", "(", "img_input", ")", ":", "\n", "    ", "for", "img_ind", "in", "range", "(", "img_input", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "img_input", "[", "img_ind", ":", "img_ind", "+", "1", "]", "=", "horizontal_flip", "(", "img_input", "[", "img_ind", ":", "img_ind", "+", "1", "]", ")", "\n", "", "return", "img_input", "\n", "\n"]], "home.repos.pwc.inspect_result.qizhangli_nobox-attacks.None.utils.mk_proto_ls": [[68, 78], ["torch.tensor().reshape().permute().reshape", "torch.tensor().reshape().permute().reshape", "list", "[].reshape", "torch.cat", "torch.cat", "range", "list", "torch.tensor().reshape().permute", "torch.tensor().reshape().permute", "range", "[].reshape.append", "torch.tensor", "torch.tensor", "torch.tensor().reshape", "torch.tensor().reshape", "torch.randperm", "torch.randperm", "len", "torch.tensor", "torch.tensor", "list", "range", "int"], "function", ["None"], ["", "def", "mk_proto_ls", "(", "n_imgs", ")", ":", "\n", "    ", "tar_ind_ls", "=", "torch", ".", "tensor", "(", "list", "(", "range", "(", "int", "(", "2", "*", "n_imgs", ")", ")", ")", ")", ".", "reshape", "(", "(", "2", ",", "n_imgs", ")", ")", ".", "permute", "(", "(", "1", ",", "0", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "tar_ind_ls_ex", "=", "[", "]", "\n", "for", "i_f", "in", "list", "(", "range", "(", "n_imgs", ")", ")", ":", "\n", "        ", "for", "i_s", "in", "list", "(", "range", "(", "n_imgs", ",", "n_imgs", "*", "2", ")", ")", ":", "\n", "            ", "if", "i_f", "!=", "i_s", "-", "n_imgs", ":", "\n", "                ", "tar_ind_ls_ex", ".", "append", "(", "[", "i_f", ",", "i_s", "]", ")", "\n", "", "", "", "tar_ind_ls_ex", "=", "torch", ".", "tensor", "(", "tar_ind_ls_ex", ")", "[", "torch", ".", "randperm", "(", "len", "(", "tar_ind_ls_ex", ")", ")", "]", ".", "reshape", "(", "-", "1", ")", "\n", "tar_ind_ls", "=", "torch", ".", "cat", "(", "(", "tar_ind_ls", ",", "tar_ind_ls_ex", ")", ")", "\n", "return", "tar_ind_ls", "", "", ""]]}