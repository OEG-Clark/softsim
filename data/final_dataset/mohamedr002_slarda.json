{"home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.main.pretrain_model": [[40, 49], ["print", "base_model().to", "torch.optim.Adam", "trainer.trainer.Trainer", "base_model().to.parameters", "base_model"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.source_only.Trainer"], ["def", "pretrain_model", "(", "src_id", ")", ":", "\n", "# Load Model", "\n", "    ", "print", "(", "\"====Start Pretraining...\"", ")", "\n", "configs", ".", "training_mode", "=", "'self_supervised'", "\n", "model", "=", "base_model", "(", "configs", ")", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "configs", ".", "lr", ",", "betas", "=", "(", "configs", ".", "beta1", ",", "configs", ".", "beta2", ")", ")", "\n", "# Trainer", "\n", "Trainer", "(", "model", ",", "optimizer", ",", "train_dl", ",", "valid_dl", ",", "test_dl", ",", "device", ",", "logger", ",", "configs", ",", "experiment_log_dir", ",", "src_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.main.fine_tune_model": [[53, 72], ["print", "base_model().to", "os.path.join", "torch.load", "base_model().to.load_state_dict", "torch.optim.Adam", "trainer.trainer.Trainer", "trainer.trainer.model_evaluate", "os.path.join", "base_model().to.parameters", "base_model"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.source_only.Trainer", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate"], ["", "def", "fine_tune_model", "(", "src_id", ")", ":", "\n", "# Load Model", "\n", "    ", "print", "(", "\"====Start Finetunning...\"", ")", "\n", "configs", ".", "training_mode", "=", "'fine_tune'", "\n", "model", "=", "base_model", "(", "configs", ")", ".", "to", "(", "device", ")", "\n", "# load saved model of this experiment", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "\"saved_models\"", ",", "f'last_{args.selected_dataset}_CNN_AR_src_{src_id}_.pt'", ")", ")", "\n", "# load_from = logs_save_dir", "\n", "chkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "device", ")", "\n", "pretrained_dict", "=", "chkpoint", "[", "\"model_state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "configs", ".", "lr", ",", "betas", "=", "(", "configs", ".", "beta1", ",", "configs", ".", "beta2", ")", ")", "\n", "\n", "# Trainer", "\n", "Trainer", "(", "model", ",", "optimizer", ",", "train_dl", ",", "valid_dl", ",", "test_dl", ",", "device", ",", "logger", ",", "configs", ",", "experiment_log_dir", ",", "src_id", ")", "\n", "\n", "# Testing", "\n", "outs", "=", "model_evaluate", "(", "model", ",", "test_dl", ",", "configs", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.utils.set_requires_grad": [[20, 24], ["model.named_parameters"], "function", ["None"], ["def", "set_requires_grad", "(", "model", ",", "dict_", ",", "requires_grad", "=", "True", ")", ":", "\n", "    ", "for", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "param", "[", "0", "]", "in", "dict_", ":", "\n", "            ", "param", "[", "1", "]", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.utils.loop_iterable": [[25, 28], ["None"], "function", ["None"], ["", "", "", "def", "loop_iterable", "(", "iterable", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "yield", "from", "iterable", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.utils.fix_randomness": [[30, 36], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["", "", "def", "fix_randomness", "(", "SEED", ")", ":", "\n", "    ", "random", ".", "seed", "(", "SEED", ")", "\n", "np", ".", "random", ".", "seed", "(", "SEED", ")", "\n", "torch", ".", "manual_seed", "(", "SEED", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "SEED", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.utils.init_weights": [[38, 41], ["m.named_parameters", "torch.nn.init.uniform_"], "function", ["None"], ["", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "for", "name", ",", "param", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "        ", "nn", ".", "init", ".", "uniform_", "(", "param", ".", "data", ",", "-", "0.08", ",", "0.08", ")", "\n", "# if name=='weight':", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.utils.count_parameters": [[47, 49], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.utils.epoch_time": [[51, 56], ["int", "int"], "function", ["None"], ["", "def", "epoch_time", "(", "start_time", ",", "end_time", ")", ":", "\n", "    ", "elapsed_time", "=", "end_time", "-", "start_time", "\n", "elapsed_mins", "=", "int", "(", "elapsed_time", "/", "60", ")", "\n", "elapsed_secs", "=", "int", "(", "elapsed_time", "-", "(", "elapsed_mins", "*", "60", ")", ")", "\n", "return", "elapsed_mins", ",", "elapsed_secs", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.utils.mean_std": [[58, 62], ["numpy.mean", "numpy.std", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "mean_std", "(", "x", ")", ":", "\n", "    ", "mean", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "x", ")", ")", "\n", "std", "=", "np", ".", "std", "(", "np", ".", "array", "(", "x", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.utils.save_to_df_1": [[64, 74], ["pandas.Series", "numpy.mean", "numpy.std", "res.append", "res.append", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "save_to_df_1", "(", "run_id", ",", "data_id", ",", "scores", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "metric", "in", "scores", ":", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "metric", ")", ")", "\n", "std", "=", "np", ".", "std", "(", "np", ".", "array", "(", "metric", ")", ")", "\n", "res", ".", "append", "(", "f'{mean:2.2f}'", ")", "\n", "res", ".", "append", "(", "f'{std:2.2f}'", ")", "\n", "", "df_out", "=", "pd", ".", "Series", "(", "(", "run_id", ",", "data_id", ",", "res", ")", ",", "index", "=", "df", ".", "columns", ")", "\n", "# df_out = pd.Series((run_id, data_id, res[0][0],res[0][1],res[1][0],res[1][1],res[2][0],res[2][1],res[2][0],res[2][1],res[3][0],res[3][1]))", "\n", "return", "df_out", "\n", "", "def", "save_to_df", "(", "scores", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.utils.save_to_df": [[74, 83], ["numpy.mean", "numpy.std", "res.append", "res.append", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "save_to_df", "(", "scores", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "metric", "in", "scores", ":", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "metric", ")", ")", "\n", "std", "=", "np", ".", "std", "(", "np", ".", "array", "(", "metric", ")", ")", "\n", "res", ".", "append", "(", "f'{mean:2.2f}'", ")", "\n", "res", ".", "append", "(", "f'{std:2.2f}'", ")", "\n", "# df_out = pd.Series((run_id, data_id, res[0][0],res[0][1],res[1][0],res[1][1],res[2][0],res[2][1],res[2][0],res[2][1],res[3][0],res[3][1]))", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.utils._calc_metrics": [[85, 111], ["numpy.array().astype", "numpy.array().astype", "os.path.join", "os.mkdir", "numpy.save", "numpy.save", "sklearn.metrics.classification_report", "sklearn.metrics.confusion_matrix", "pandas.DataFrame", "sklearn.metrics.cohen_kappa_score", "sklearn.metrics.accuracy_score", "os.path.join", "pd.DataFrame.to_excel", "os.path.join", "torch.save", "os.path.join", "os.path.join", "os.path.basename", "os.path.basename", "numpy.array", "numpy.array", "os.path.normpath", "os.path.normpath"], "function", ["None"], ["", "def", "_calc_metrics", "(", "pred_labels", ",", "true_labels", ",", "log_dir", ")", ":", "\n", "    ", "pred_labels", "=", "np", ".", "array", "(", "pred_labels", ")", ".", "astype", "(", "int", ")", "\n", "true_labels", "=", "np", ".", "array", "(", "true_labels", ")", ".", "astype", "(", "int", ")", "\n", "\n", "# save targets", "\n", "labels_save_path", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"labels\"", ")", "\n", "os", ".", "mkdir", "(", "labels_save_path", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "labels_save_path", ",", "\"predicted_labels.npy\"", ")", ",", "pred_labels", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "labels_save_path", ",", "\"true_labels.npy\"", ")", ",", "true_labels", ")", "\n", "\n", "r", "=", "classification_report", "(", "true_labels", ",", "pred_labels", ",", "digits", "=", "6", ",", "output_dict", "=", "True", ")", "\n", "cm", "=", "confusion_matrix", "(", "true_labels", ",", "pred_labels", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "r", ")", "\n", "df", "[", "\"cohen\"", "]", "=", "cohen_kappa_score", "(", "true_labels", ",", "pred_labels", ")", "\n", "df", "[", "\"accuracy\"", "]", "=", "accuracy_score", "(", "true_labels", ",", "pred_labels", ")", "\n", "df", "=", "df", "*", "100", "\n", "\n", "# save classification report", "\n", "file_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "log_dir", ")", ")", "+", "\"_classification_report.xlsx\"", "\n", "report_Save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "home_path", ",", "log_dir", ",", "file_name", ")", "\n", "df", ".", "to_excel", "(", "report_Save_path", ")", "\n", "\n", "# save confusion matrix", "\n", "cm_file_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "log_dir", ")", ")", "+", "\"_confusion_matrix.torch\"", "\n", "cm_Save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "home_path", ",", "log_dir", ",", "cm_file_name", ")", "\n", "torch", ".", "save", "(", "cm", ",", "cm_Save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.utils._logger": [[114, 133], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["", "def", "_logger", "(", "logger_name", ",", "level", "=", "logging", ".", "DEBUG", ")", ":", "\n", "    ", "\"\"\"\n    Method to return a custom logger with the given name and level\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "logger", ".", "setLevel", "(", "level", ")", "\n", "# format_string = (\"%(asctime)s \u2014 %(name)s \u2014 %(levelname)s \u2014 %(funcName)s:\"", "\n", "#                 \"%(lineno)d \u2014 %(message)s\")", "\n", "format_string", "=", "\"%(message)s\"", "\n", "log_format", "=", "logging", ".", "Formatter", "(", "format_string", ")", "\n", "# Creating and adding the console handler", "\n", "console_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "console_handler", ".", "setFormatter", "(", "log_format", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "# Creating and adding the file handler", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "logger_name", ",", "mode", "=", "'a'", ")", "\n", "file_handler", ".", "setFormatter", "(", "log_format", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.utils._plot_tsne": [[134, 189], ["print", "sklearn.manifold.TSNE().fit_transform", "sklearn.manifold.TSNE().fit_transform", "matplotlib.subplots", "matplotlib.get_cmap", "ax.scatter", "ax.scatter", "ax.legend", "ax.add_artist", "ax.legend", "os.path.join", "matplotlib.savefig", "matplotlib.close", "matplotlib.subplots", "ax.scatter", "ax.scatter", "ax.legend", "os.path.join", "matplotlib.savefig", "matplotlib.close", "torch.no_grad", "src_dl.dataset.x_data.float().to", "src_dl.dataset.y_data.view().long", "model", "tgt_dl.dataset.x_data.float().to", "tgt_dl.dataset.y_data.view().long", "model", "torch.autograd.Variable().data.detach().cpu().numpy().reshape().astype", "torch.autograd.Variable().data.detach().cpu().numpy().reshape().astype", "os.path.exists", "os.mkdir", "sklearn.manifold.TSNE", "sklearn.manifold.TSNE", "ax.scatter.legend_elements", "os.path.join", "os.path.join", "src_dl.dataset.x_data.float", "src_dl.dataset.y_data.view", "tgt_dl.dataset.x_data.float", "tgt_dl.dataset.y_data.view", "torch.autograd.Variable().data.detach().cpu().numpy().reshape", "torch.autograd.Variable().data.detach().cpu().numpy().reshape", "len", "len", "torch.autograd.Variable().data.detach().cpu().numpy", "torch.autograd.Variable().data.detach().cpu().numpy", "torch.autograd.Variable().data.detach().cpu", "torch.autograd.Variable().data.detach().cpu", "torch.autograd.Variable().data.detach", "torch.autograd.Variable().data.detach", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["None"], ["", "def", "_plot_tsne", "(", "model", ",", "src_dl", ",", "tgt_dl", ",", "device", ",", "save_dir", ",", "model_type", ",", "train_mode", ")", ":", "#, layer_output_to_plot, y_test, save_dir, type_id):", "\n", "    ", "print", "(", "\"Plotting TSNE for \"", "+", "model_type", "+", "\"...\"", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "src_data", "=", "src_dl", ".", "dataset", ".", "x_data", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "src_labels", "=", "src_dl", ".", "dataset", ".", "y_data", ".", "view", "(", "(", "-", "1", ")", ")", ".", "long", "(", ")", "#.to(device)", "\n", "src_predictions", ",", "src_features", "=", "model", "(", "src_data", ")", "\n", "\n", "tgt_data", "=", "tgt_dl", ".", "dataset", ".", "x_data", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "tgt_labels", "=", "tgt_dl", ".", "dataset", ".", "y_data", ".", "view", "(", "(", "-", "1", ")", ")", ".", "long", "(", ")", "#.to(device)", "\n", "tgt_predictions", ",", "tgt_features", "=", "model", "(", "tgt_data", ")", "\n", "\n", "\n", "\n", "", "perplexity", "=", "50", "\n", "src_model_tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "random_state", "=", "1", ",", "perplexity", "=", "perplexity", ")", ".", "fit_transform", "(", "\n", "(", "Variable", "(", "src_features", ")", ".", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "len", "(", "src_labels", ")", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "\n", "tgt_model_tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "random_state", "=", "1", ",", "perplexity", "=", "perplexity", ")", ".", "fit_transform", "(", "\n", "(", "Variable", "(", "tgt_features", ")", ".", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "len", "(", "tgt_labels", ")", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "16", ",", "10", ")", ")", "\n", "cmaps", "=", "plt", ".", "get_cmap", "(", "'jet'", ")", "\n", "src_scatter", "=", "ax", ".", "scatter", "(", "src_model_tsne", "[", ":", ",", "0", "]", ",", "src_model_tsne", "[", ":", ",", "1", "]", ",", "s", "=", "20", ",", "c", "=", "src_labels", ",", "cmap", "=", "cmaps", ",", "\n", "label", "=", "\"source data\"", ")", "\n", "tgt_scatter", "=", "ax", ".", "scatter", "(", "tgt_model_tsne", "[", ":", ",", "0", "]", ",", "tgt_model_tsne", "[", ":", ",", "1", "]", ",", "s", "=", "20", ",", "c", "=", "tgt_labels", ",", "cmap", "=", "cmaps", ",", "\n", "label", "=", "\"target data\"", ",", "marker", "=", "'^'", ")", "\n", "\n", "legend1", "=", "ax", ".", "legend", "(", "*", "src_scatter", ".", "legend_elements", "(", ")", ",", "\n", "loc", "=", "\"lower left\"", ",", "title", "=", "\"Classes\"", ")", "\n", "ax", ".", "add_artist", "(", "legend1", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"tsne_plots\"", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"tsne_plots\"", ")", ")", "\n", "\n", "", "file_name", "=", "\"tsne_\"", "+", "model_type", "+", "\"_\"", "+", "train_mode", "+", "\".png\"", "\n", "fig_save_name", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"tsne_plots\"", ",", "file_name", ")", "\n", "plt", ".", "savefig", "(", "fig_save_name", ")", "\n", "plt", ".", "close", "(", ")", "\n", "# '[0]*len(src_labels), cmap=colors,", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "16", ",", "10", ")", ")", "\n", "# colors = ['Greens_r', 'Blues_r']", "\n", "ax", ".", "scatter", "(", "src_model_tsne", "[", ":", ",", "0", "]", ",", "src_model_tsne", "[", ":", ",", "1", "]", ",", "s", "=", "10", ",", "c", "=", "'red'", ",", "\n", "label", "=", "\"source data\"", ")", "\n", "ax", ".", "scatter", "(", "tgt_model_tsne", "[", ":", ",", "0", "]", ",", "tgt_model_tsne", "[", ":", ",", "1", "]", ",", "s", "=", "10", ",", "c", "=", "'blue'", ",", "\n", "label", "=", "\"target data\"", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n", "file_name", "=", "\"tsne_\"", "+", "model_type", "+", "\"_\"", "+", "train_mode", "+", "\"_domain-based.png\"", "\n", "fig_save_name", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"tsne_plots\"", ",", "file_name", ")", "\n", "plt", ".", "savefig", "(", "fig_save_name", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Self-supervised training.utils.plot_tsne_one_domain": [[191, 218], ["sklearn.manifold.TSNE().fit_transform", "matplotlib.subplots", "matplotlib.get_cmap", "ax.scatter", "ax.legend", "ax.add_artist", "ax.legend", "os.path.join", "matplotlib.savefig", "matplotlib.close", "torch.no_grad", "src_dl.dataset.x_data.float().to", "src_dl.dataset.y_data.view().long", "model", "torch.autograd.Variable().data.detach().cpu().numpy().reshape().astype", "os.path.exists", "os.mkdir", "sklearn.manifold.TSNE", "ax.scatter.legend_elements", "os.path.join", "os.path.join", "src_dl.dataset.x_data.float", "src_dl.dataset.y_data.view", "torch.autograd.Variable().data.detach().cpu().numpy().reshape", "len", "torch.autograd.Variable().data.detach().cpu().numpy", "torch.autograd.Variable().data.detach().cpu", "torch.autograd.Variable().data.detach", "torch.autograd.Variable"], "function", ["None"], ["", "def", "plot_tsne_one_domain", "(", "model", ",", "src_dl", ",", "device", ",", "save_dir", ",", "model_type", ",", "train_mode", ")", ":", "\n", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "src_data", "=", "src_dl", ".", "dataset", ".", "x_data", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "src_labels", "=", "src_dl", ".", "dataset", ".", "y_data", ".", "view", "(", "(", "-", "1", ")", ")", ".", "long", "(", ")", "# .to(device)", "\n", "src_predictions", ",", "src_features", "=", "model", "(", "src_data", ")", "\n", "\n", "", "perplexity", "=", "50", "\n", "src_model_tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "random_state", "=", "1", ",", "perplexity", "=", "perplexity", ")", ".", "fit_transform", "(", "(", "Variable", "(", "src_features", ")", ".", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "len", "(", "src_labels", ")", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "16", ",", "10", ")", ")", "\n", "cmaps", "=", "plt", ".", "get_cmap", "(", "'jet'", ")", "\n", "src_scatter", "=", "ax", ".", "scatter", "(", "src_model_tsne", "[", ":", ",", "0", "]", ",", "src_model_tsne", "[", ":", ",", "1", "]", ",", "s", "=", "20", ",", "c", "=", "src_labels", ",", "cmap", "=", "cmaps", ",", "\n", "label", "=", "\"source data\"", ")", "\n", "\n", "legend1", "=", "ax", ".", "legend", "(", "*", "src_scatter", ".", "legend_elements", "(", ")", ",", "\n", "loc", "=", "\"lower left\"", ",", "title", "=", "\"Classes\"", ")", "\n", "ax", ".", "add_artist", "(", "legend1", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"tsne_plots\"", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"tsne_plots\"", ")", ")", "\n", "\n", "", "file_name", "=", "\"tsne_\"", "+", "model_type", "+", "\"_\"", "+", "train_mode", "+", "\".png\"", "\n", "fig_save_name", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"tsne_plots\"", ",", "file_name", ")", "\n", "plt", ".", "savefig", "(", "fig_save_name", ")", "\n", "plt", ".", "close", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.augmentations.DataTransform": [[5, 10], ["time_warp().squeeze", "rotation().squeeze", "augmentations.time_warp", "augmentations.rotation", "sample.unsqueeze", "sample.unsqueeze"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.augmentations.time_warp", "home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.augmentations.rotation"], ["def", "DataTransform", "(", "sample", ")", ":", "\n", "#    xi = crop_and_resize(sample, 3750)", "\n", "    ", "xi", "=", "time_warp", "(", "sample", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "xj", "=", "rotation", "(", "sample", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "return", "xi", ",", "xj", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.augmentations.jitter": [[12, 15], ["numpy.random.normal"], "function", ["None"], ["", "def", "jitter", "(", "x", ",", "sigma", "=", "0.8", ")", ":", "\n", "# https://arxiv.org/pdf/1706.00527.pdf", "\n", "    ", "return", "x", "+", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.", ",", "scale", "=", "sigma", ",", "size", "=", "x", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.augmentations.scaling": [[17, 21], ["numpy.random.normal", "numpy.multiply"], "function", ["None"], ["", "def", "scaling", "(", "x", ",", "sigma", "=", "0.1", ")", ":", "\n", "# https://arxiv.org/pdf/1706.00527.pdf", "\n", "    ", "factor", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "1.", ",", "scale", "=", "sigma", ",", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "2", "]", ")", ")", "\n", "return", "np", ".", "multiply", "(", "x", ",", "factor", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.augmentations.rotation": [[23, 28], ["numpy.random.choice", "numpy.arange", "numpy.random.shuffle", "x[].numpy"], "function", ["None"], ["", "def", "rotation", "(", "x", ")", ":", "\n", "    ", "flip", "=", "np", ".", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ",", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "2", "]", ")", ")", "\n", "rotate_axis", "=", "np", ".", "arange", "(", "x", ".", "shape", "[", "2", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "rotate_axis", ")", "\n", "return", "flip", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "*", "x", "[", ":", ",", ":", ",", "rotate_axis", "]", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.augmentations.time_warp": [[30, 44], ["numpy.arange", "numpy.random.normal", "numpy.zeros_like", "enumerate", "range", "numpy.ones", "numpy.linspace", "CubicSpline", "numpy.interp", "numpy.clip"], "function", ["None"], ["", "def", "time_warp", "(", "x", ",", "sigma", "=", "0.2", ",", "knot", "=", "2", ")", ":", "\n", "    ", "from", "scipy", ".", "interpolate", "import", "CubicSpline", "\n", "orig_steps", "=", "np", ".", "arange", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "\n", "random_warps", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "1.0", ",", "scale", "=", "sigma", ",", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "knot", "+", "2", ",", "x", ".", "shape", "[", "2", "]", ")", ")", "\n", "warp_steps", "=", "(", "np", ".", "ones", "(", "(", "x", ".", "shape", "[", "2", "]", ",", "1", ")", ")", "*", "(", "np", ".", "linspace", "(", "0", ",", "x", ".", "shape", "[", "1", "]", "-", "1.", ",", "num", "=", "knot", "+", "2", ")", ")", ")", ".", "T", "\n", "\n", "ret", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "for", "i", ",", "pat", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "for", "dim", "in", "range", "(", "x", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "time_warp", "=", "CubicSpline", "(", "warp_steps", "[", ":", ",", "dim", "]", ",", "warp_steps", "[", ":", ",", "dim", "]", "*", "random_warps", "[", "i", ",", ":", ",", "dim", "]", ")", "(", "orig_steps", ")", "\n", "scale", "=", "(", "x", ".", "shape", "[", "1", "]", "-", "1", ")", "/", "time_warp", "[", "-", "1", "]", "\n", "ret", "[", "i", ",", ":", ",", "dim", "]", "=", "np", ".", "interp", "(", "orig_steps", ",", "np", ".", "clip", "(", "scale", "*", "time_warp", ",", "0", ",", "x", ".", "shape", "[", "1", "]", "-", "1", ")", ",", "pat", "[", ":", ",", "dim", "]", ")", ".", "T", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.augmentations.permutation": [[46, 65], ["numpy.arange", "numpy.random.randint", "numpy.zeros_like", "enumerate", "numpy.concatenate().ravel", "numpy.random.choice", "np.random.choice.sort", "numpy.split", "numpy.array_split", "numpy.concatenate", "numpy.random.permutation"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.augmentations.permutation"], ["", "def", "permutation", "(", "x", ",", "max_segments", "=", "50", ",", "seg_mode", "=", "\"equal\"", ")", ":", "\n", "    ", "orig_steps", "=", "np", ".", "arange", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "\n", "num_segs", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "max_segments", ",", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "ret", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "for", "i", ",", "pat", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "if", "num_segs", "[", "i", "]", ">", "1", ":", "\n", "            ", "if", "seg_mode", "==", "\"random\"", ":", "\n", "                ", "split_points", "=", "np", ".", "random", ".", "choice", "(", "x", ".", "shape", "[", "1", "]", "-", "2", ",", "num_segs", "[", "i", "]", "-", "1", ",", "replace", "=", "False", ")", "\n", "split_points", ".", "sort", "(", ")", "\n", "splits", "=", "np", ".", "split", "(", "orig_steps", ",", "split_points", ")", "\n", "", "else", ":", "\n", "                ", "splits", "=", "np", ".", "array_split", "(", "orig_steps", ",", "num_segs", "[", "i", "]", ")", "\n", "", "warp", "=", "np", ".", "concatenate", "(", "np", ".", "random", ".", "permutation", "(", "splits", ")", ")", ".", "ravel", "(", ")", "\n", "ret", "[", "i", "]", "=", "pat", "[", "warp", "]", "\n", "", "else", ":", "\n", "            ", "ret", "[", "i", "]", "=", "pat", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.augmentations.crop_and_resize": [[67, 73], ["numpy.random.randint", "signal.resample.squeeze", "scipy.signal.resample", "numpy.expand_dims"], "function", ["None"], ["", "def", "crop_and_resize", "(", "x", ",", "resample_to", ")", ":", "\n", "    ", "rand_start", "=", "np", ".", "random", ".", "randint", "(", "1999", ")", "\n", "x", "=", "x", ".", "squeeze", "(", ")", "\n", "x", "=", "x", "[", "rand_start", ":", "(", "rand_start", "+", "1000", ")", "]", "\n", "x", "=", "signal", ".", "resample", "(", "x", ",", "resample_to", ")", "\n", "return", "np", ".", "expand_dims", "(", "x", ",", "axis", "=", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.dataloader.Load_Dataset.__init__": [[14, 43], ["torch.utils.data.Dataset.__init__", "min", "isinstance", "len", "X_train.permute.permute.unsqueeze", "X_train.permute.permute.shape.index", "X_train.permute.permute.permute", "torch.FloatTensor().fill_().tolist", "torch.FloatTensor().fill_().tolist", "torchvision.transforms.Normalize", "torch.from_numpy", "torch.from_numpy().long", "X_train.permute.permute.float", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.from_numpy", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["\n", "training_mode", "=", "args", ".", "training_mode", "\n", "use_SimCLR", "=", "args", ".", "use_SimCLR", "# to check if augmentations are needed or not!", "\n", "\n", "\n", "class", "Load_Dataset", "(", "Dataset", ")", ":", "\n", "# Initialize your data, download, etc.", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset", ",", "apply_transform", ")", ":", "\n", "        ", "super", "(", "Load_Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "X_train", "=", "dataset", "[", "\"samples\"", "]", "\n", "y_train", "=", "dataset", "[", "\"labels\"", "]", "\n", "\n", "if", "len", "(", "X_train", ".", "shape", ")", "<", "3", ":", "\n", "            ", "X_train", "=", "X_train", ".", "unsqueeze", "(", "2", ")", "#X_train.unsqueeze(2)   # np.expand_dims(X_train, 2)", "\n", "", "self", ".", "num_channels", "=", "min", "(", "X_train", ".", "shape", ")", "\n", "if", "X_train", ".", "shape", ".", "index", "(", "self", ".", "num_channels", ")", "!=", "1", ":", "# data dim is #samples, seq_len, #channels", "\n", "            ", "X_train", "=", "X_train", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# X_train = X_train.transpose(0,2,1)", "\n", "\n", "", "if", "apply_transform", ":", "\n", "# Assume datashape: num_samples, num_channels, seq_length", "\n", "            ", "data_mean", "=", "torch", ".", "FloatTensor", "(", "self", ".", "num_channels", ")", ".", "fill_", "(", "0", ")", ".", "tolist", "(", ")", "# assume min= number of channels", "\n", "data_std", "=", "torch", ".", "FloatTensor", "(", "self", ".", "num_channels", ")", ".", "fill_", "(", "1", ")", ".", "tolist", "(", ")", "# assume min= number of channels", "\n", "data_transform", "=", "transforms", ".", "Normalize", "(", "mean", "=", "data_mean", ",", "std", "=", "data_std", ")", "\n", "self", ".", "transform", "=", "data_transform", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "None", "\n", "", "self", ".", "len", "=", "X_train", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.dataloader.Load_Dataset.__getitem__": [[44, 50], ["dataloader.Load_Dataset.transform", "dataloader.Load_Dataset.view", "dataloader.Load_Dataset.x_data[].view"], "methods", ["None"], ["if", "isinstance", "(", "X_train", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "self", ".", "x_data", "=", "torch", ".", "from_numpy", "(", "X_train", ")", "\n", "self", ".", "y_data", "=", "torch", ".", "from_numpy", "(", "y_train", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "x_data", "=", "X_train", ".", "float", "(", ")", "\n", "self", ".", "y_data", "=", "y_train", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.dataloader.Load_Dataset.__len__": [[51, 53], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "transform", "(", "self", ".", "x_data", "[", "index", "]", ".", "view", "(", "self", ".", "num_channels", ",", "-", "1", ",", "1", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.dataloader.data_generator": [[55, 78], ["torch.load", "torch.load", "torch.load", "dataloader.Load_Dataset", "dataloader.Load_Dataset", "dataloader.Load_Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["\n", "", "return", "self", ".", "x_data", "[", "index", "]", ",", "self", ".", "y_data", "[", "index", "]", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n", "\n", "", "", "def", "data_generator", "(", "data_path", ",", "domain", ",", "configs", ")", ":", "\n", "\n", "    ", "train_dataset", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f\"train_{domain}.pt\"", ")", ")", "\n", "valid_dataset", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f\"test_{domain}.pt\"", ")", ")", "\n", "test_dataset", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f\"test_{domain}.pt\"", ")", ")", "\n", "\n", "train_dataset", "=", "Load_Dataset", "(", "train_dataset", ",", "False", ")", "\n", "valid_dataset", "=", "Load_Dataset", "(", "valid_dataset", ",", "False", ")", "\n", "test_dataset", "=", "Load_Dataset", "(", "test_dataset", ",", "False", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "train_dataset", ",", "batch_size", "=", "configs", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "drop_last", "=", "configs", ".", "drop_last", ",", "\n", "num_workers", "=", "0", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "valid_dataset", ",", "batch_size", "=", "configs", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "drop_last", "=", "configs", ".", "drop_last", ",", "\n", "num_workers", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Paderborn_FD_models.base_Model.__init__": [[10, 39], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "CPC.CPC.CPC", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "base_Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "configs", ".", "input_channels", "\n", "self", ".", "dropout", "=", "configs", ".", "dropout", "\n", "self", ".", "kernel_size", "=", "configs", ".", "kernel_size", "\n", "self", ".", "hidden_dim", "=", "configs", ".", "cls_hidden_dim", "\n", "self", ".", "out_dim", "=", "configs", ".", "num_classes", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "input_dim", ",", "8", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ")", "\n", "self", ".", "med_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1240", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "Classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "out_dim", ")", ")", "\n", "self", ".", "cpc", "=", "CPC", "(", "8", ",", "64", ",", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Paderborn_FD_models.base_Model.forward": [[40, 50], ["src.view.view.view", "Paderborn_FD_models.base_Model.encoder", "src.view.view.size", "Paderborn_FD_models.base_Model.cpc", "Paderborn_FD_models.base_Model.med_layer", "Paderborn_FD_models.base_Model.Classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "# reshape input (batch_size, input_dim, sequence length)", "\n", "        ", "src", "=", "src", ".", "view", "(", "src", ".", "size", "(", "0", ")", ",", "self", ".", "input_dim", ",", "-", "1", ")", "\n", "full_features", "=", "self", ".", "encoder", "(", "src", ")", "\n", "if", "training_mode", "==", "\"self_supervised\"", ":", "\n", "            ", "return", "self", ".", "cpc", "(", "full_features", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "self", ".", "med_layer", "(", "full_features", ")", "\n", "predictions", "=", "self", ".", "Classifier", "(", "features", ")", "\n", "return", "predictions", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Paderborn_FD_models.CNN_AR.__init__": [[53, 87], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.GRU", "torch.nn.Sequential", "CPC.CPC.CPC", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "CNN_AR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "configs", ".", "input_channels", "\n", "self", ".", "dropout", "=", "configs", ".", "dropout", "\n", "self", ".", "kernel_size", "=", "configs", ".", "kernel_size", "\n", "self", ".", "hidden_dim", "=", "configs", ".", "cls_hidden_dim", "\n", "self", ".", "out_dim", "=", "configs", ".", "num_classes", "\n", "self", ".", "feature_dim", "=", "configs", ".", "cnn_feat_dim", "\n", "self", ".", "training_mode", "=", "configs", ".", "training_mode", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "input_dim", ",", "8", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ")", "\n", "self", ".", "med_layer", "=", "nn", ".", "GRU", "(", "self", ".", "feature_dim", ",", "self", ".", "hidden_dim", ",", "num_layers", "=", "1", ",", "bidirectional", "=", "False", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "Classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "out_dim", ")", ")", "\n", "self", ".", "cpc", "=", "CPC", "(", "8", ",", "64", ",", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Paderborn_FD_models.CNN_AR.forward": [[88, 98], ["src.view.view.view", "Paderborn_FD_models.CNN_AR.encoder", "src.view.view.size", "Paderborn_FD_models.CNN_AR.cpc", "Paderborn_FD_models.CNN_AR.med_layer", "Paderborn_FD_models.CNN_AR.Classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "# reshape input (batch_size, input_dim, sequence length)", "\n", "        ", "src", "=", "src", ".", "view", "(", "src", ".", "size", "(", "0", ")", ",", "self", ".", "input_dim", ",", "-", "1", ")", "\n", "full_features", "=", "self", ".", "encoder", "(", "src", ")", "\n", "if", "self", ".", "training_mode", "==", "\"self_supervised\"", ":", "\n", "            ", "return", "self", ".", "cpc", "(", "full_features", ")", "\n", "", "else", ":", "\n", "            ", "features", ",", "_", "=", "self", ".", "med_layer", "(", "full_features", ")", "\n", "predictions", "=", "self", ".", "Classifier", "(", "features", "[", ":", ",", "-", "1", ",", ":", "]", ")", "\n", "return", "predictions", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Paderborn_FD_models.base_model_BN.__init__": [[100, 134], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "CPC.CPC.CPC", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "base_model_BN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "configs", ".", "input_channels", "\n", "self", ".", "dropout", "=", "configs", ".", "dropout", "\n", "self", ".", "kernel_size", "=", "configs", ".", "kernel_size", "\n", "self", ".", "hidden_dim", "=", "configs", ".", "cls_hidden_dim", "\n", "self", ".", "out_dim", "=", "configs", ".", "num_classes", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "input_dim", ",", "8", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ")", "\n", "self", ".", "med_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1240", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "Classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "out_dim", ")", ")", "\n", "self", ".", "cpc", "=", "CPC", "(", "8", ",", "64", ",", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Paderborn_FD_models.base_model_BN.forward": [[135, 145], ["src.view.view.view", "Paderborn_FD_models.base_model_BN.encoder", "src.view.view.size", "Paderborn_FD_models.base_model_BN.cpc", "Paderborn_FD_models.base_model_BN.med_layer", "Paderborn_FD_models.base_model_BN.Classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "# reshape input (batch_size, input_dim, sequence length)", "\n", "        ", "src", "=", "src", ".", "view", "(", "src", ".", "size", "(", "0", ")", ",", "self", ".", "input_dim", ",", "-", "1", ")", "\n", "full_features", "=", "self", ".", "encoder", "(", "src", ")", "\n", "if", "training_mode", "==", "\"self_supervised\"", ":", "\n", "            ", "return", "self", ".", "cpc", "(", "full_features", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "self", ".", "med_layer", "(", "full_features", ")", "\n", "predictions", "=", "self", ".", "Classifier", "(", "features", ")", "\n", "return", "predictions", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Paderborn_FD_models.CNN_CPC.__init__": [[147, 177], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "CPC.CPC.CPC", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "CNN_CPC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "configs", ".", "input_channels", "\n", "self", ".", "dropout", "=", "configs", ".", "dropout", "\n", "self", ".", "kernel_size", "=", "configs", ".", "kernel_size", "\n", "self", ".", "hidden_dim", "=", "configs", ".", "cls_hidden_dim", "\n", "self", ".", "out_dim", "=", "configs", ".", "cls_hidden_dim", "\n", "self", ".", "AR", "=", "configs", ".", "AR", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "input_dim", ",", "8", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ")", "\n", "self", ".", "med_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1240", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "Classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "out_dim", ")", ")", "\n", "self", ".", "cpc", "=", "CPC", "(", "8", ",", "64", ",", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Paderborn_FD_models.CNN_CPC.forward": [[178, 186], ["src.view.view.view", "Paderborn_FD_models.CNN_CPC.encoder", "Paderborn_FD_models.CNN_CPC.med_layer", "Paderborn_FD_models.CNN_CPC.Classifier", "src.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "# reshape input (batch_size, input_dim, sequence length)", "\n", "        ", "src", "=", "src", ".", "view", "(", "src", ".", "size", "(", "0", ")", ",", "self", ".", "input_dim", ",", "-", "1", ")", "\n", "full_features", "=", "self", ".", "encoder", "(", "src", ")", "\n", "features", "=", "self", ".", "med_layer", "(", "full_features", ")", "\n", "predictions", "=", "self", ".", "Classifier", "(", "features", ")", "\n", "features", "=", "full_features", "\n", "return", "predictions", ",", "(", "features", ",", "full_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Paderborn_FD_models.CNN_CPC_GRU.__init__": [[189, 219], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "CPC.CPC.CPC", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "CNN_CPC_GRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "configs", ".", "input_channels", "\n", "self", ".", "dropout", "=", "configs", ".", "dropout", "\n", "self", ".", "kernel_size", "=", "configs", ".", "kernel_size", "\n", "self", ".", "hidden_dim", "=", "configs", ".", "cls_hidden_dim", "\n", "self", ".", "out_dim", "=", "configs", ".", "cls_hidden_dim", "\n", "self", ".", "AR", "=", "configs", ".", "AR", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "input_dim", ",", "8", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ")", "\n", "self", ".", "med_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1240", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "Classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "out_dim", ")", ")", "\n", "self", ".", "cpc", "=", "CPC", "(", "8", ",", "64", ",", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Paderborn_FD_models.CNN_CPC_GRU.forward": [[220, 228], ["src.view.view.view", "Paderborn_FD_models.CNN_CPC_GRU.encoder", "Paderborn_FD_models.CNN_CPC_GRU.med_layer", "Paderborn_FD_models.CNN_CPC_GRU.Classifier", "src.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "# reshape input (batch_size, input_dim, sequence length)", "\n", "        ", "src", "=", "src", ".", "view", "(", "src", ".", "size", "(", "0", ")", ",", "self", ".", "input_dim", ",", "-", "1", ")", "\n", "full_features", "=", "self", ".", "encoder", "(", "src", ")", "\n", "features", "=", "self", ".", "med_layer", "(", "full_features", ")", "\n", "predictions", "=", "self", ".", "Classifier", "(", "features", ")", "\n", "features", "=", "full_features", "\n", "return", "predictions", ",", "(", "features", ",", "full_features", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Opp_HAR_models.base_Model.__init__": [[8, 29], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.AdaptiveAvgPool1d", "torch.nn.Sequential", "CPC.CPC.CPC", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "base_Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "configs", ".", "input_channels", "\n", "self", ".", "out_channels", "=", "configs", ".", "out_channels", "\n", "self", ".", "hidden_dim", "=", "configs", ".", "feat_dim", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "configs", ".", "input_channels", ",", "16", ",", "kernel_size", "=", "configs", ".", "kernel_size", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", ",", "\n", "nn", ".", "Conv1d", "(", "16", ",", "16", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "16", ",", "configs", ".", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "configs", ".", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "flatten", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "self", ".", "Classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "configs", ".", "num_classes", ")", ")", "\n", "\n", "self", ".", "cpc", "=", "CPC", "(", "configs", ".", "out_channels", ",", "16", ",", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Opp_HAR_models.base_Model.forward": [[30, 39], ["Opp_HAR_models.base_Model.encoder().squeeze", "Opp_HAR_models.base_Model.cpc", "Opp_HAR_models.base_Model.flatten", "Opp_HAR_models.base_Model.Classifier", "Opp_HAR_models.base_Model.encoder", "Opp_HAR_models.base_Model.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "# reshape input (batch_size, input_dim, sequence length)", "\n", "        ", "full_features", "=", "self", ".", "encoder", "(", "src", ")", ".", "squeeze", "(", ")", "\n", "if", "training_mode", "==", "\"self_supervised\"", ":", "\n", "            ", "return", "self", ".", "cpc", "(", "full_features", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "self", ".", "flatten", "(", "full_features", ")", "\n", "predictions", "=", "self", ".", "Classifier", "(", "features", ".", "squeeze", "(", ")", ")", "\n", "return", "predictions", ",", "features", "\n", "# return predictions, (vec_features,seq_features)", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Opp_HAR_models.Discriminator.__init__": [[43, 56], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "input_dims", "=", "128", ",", "hidden_dims", "=", "20", ",", "output_dims", "=", "1", ")", ":", "\n", "        ", "\"\"\"Init discriminator.\"\"\"", "\n", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "restored", "=", "False", "\n", "\n", "self", ".", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_dims", ",", "hidden_dims", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dims", ",", "hidden_dims", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dims", ",", "output_dims", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Opp_HAR_models.Discriminator.forward": [[57, 61], ["Opp_HAR_models.Discriminator.layer", "input.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Forward the discriminator.\"\"\"", "\n", "out", "=", "self", ".", "layer", "(", "input", ".", "squeeze", "(", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Opp_HAR_models.ReverseLayerF.forward": [[63, 67], ["x.view_as"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "alpha", ")", ":", "\n", "        ", "ctx", ".", "alpha", "=", "alpha", "\n", "return", "x", ".", "view_as", "(", "x", ")", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Opp_HAR_models.ReverseLayerF.backward": [[67, 71], ["grad_output.neg"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "output", "=", "grad_output", ".", "neg", "(", ")", "*", "ctx", ".", "alpha", "\n", "return", "output", ",", "None", "", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.CPC.CPC.__init__": [[11, 20], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.ModuleList", "torch.ModuleList", "torch.LogSoftmax", "torch.LogSoftmax", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["self", ".", "timestep", "=", "timestep", "\n", "self", ".", "Wk", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "num_channels", ")", "for", "i", "in", "range", "(", "self", ".", "timestep", ")", "]", ")", "\n", "self", ".", "lsoftmax", "=", "nn", ".", "LogSoftmax", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "z", "=", "features", "# features are (batch_size, #channels, seq_len)", "\n", "# seq_len = z.shape[2]", "\n", "z", "=", "z", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.CPC.CPC.forward": [[23, 53], ["z_aug.transpose.transpose.transpose", "torch.randint().long().to", "torch.randint().long().to", "torch.randint().long().to", "torch.randint().long().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "numpy.arange", "CPC.CPC.gru", "output[].view", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "torch.empty().float().to", "numpy.arange", "numpy.arange", "z_aug[].view", "linear", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "CPC.CPC.lsoftmax", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["None"], ["\n", "nce", "=", "0", "# average over timestep and batch", "\n", "encode_samples", "=", "torch", ".", "empty", "(", "(", "self", ".", "timestep", ",", "batch", ",", "self", ".", "num_channels", ")", ")", ".", "float", "(", ")", "# e.g. size 12*8*512", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "1", ",", "self", ".", "timestep", "+", "1", ")", ":", "\n", "            ", "encode_samples", "[", "i", "-", "1", "]", "=", "z", "[", ":", ",", "t_samples", "+", "i", ",", ":", "]", ".", "view", "(", "batch", ",", "self", ".", "num_channels", ")", "# z_tk e.g. size 8*512", "\n", "", "forward_seq", "=", "z", "[", ":", ",", ":", "t_samples", "+", "1", ",", ":", "]", "# e.g. size 8*100*512", "\n", "output", ",", "_", "=", "self", ".", "gru", "(", "forward_seq", ")", "# output size e.g. 8*100*256", "\n", "c_t", "=", "output", "[", ":", ",", "t_samples", ",", ":", "]", ".", "view", "(", "batch", ",", "self", ".", "hidden_dim", ")", "# c_t e.g. size 8*256", "\n", "pred", "=", "torch", ".", "empty", "(", "(", "self", ".", "timestep", ",", "batch", ",", "self", ".", "num_channels", ")", ")", ".", "float", "(", ")", "# e.g. size 12*8*512", "\n", "for", "i", "in", "np", ".", "arange", "(", "0", ",", "self", ".", "timestep", ")", ":", "\n", "            ", "linear", "=", "self", ".", "Wk", "[", "i", "]", "\n", "pred", "[", "i", "]", "=", "linear", "(", "c_t", ")", "# Wk*c_t e.g. size 8*512", "\n", "", "for", "i", "in", "np", ".", "arange", "(", "0", ",", "self", ".", "timestep", ")", ":", "\n", "            ", "total", "=", "torch", ".", "mm", "(", "encode_samples", "[", "i", "]", ",", "torch", ".", "transpose", "(", "pred", "[", "i", "]", ",", "0", ",", "1", ")", ")", "# e.g. size 8*8", "\n", "nce", "+=", "torch", ".", "sum", "(", "torch", ".", "diag", "(", "self", ".", "lsoftmax", "(", "total", ")", ")", ")", "# nce is a tensor", "\n", "", "nce", "/=", "-", "1.", "*", "batch", "*", "self", ".", "timestep", "\n", "return", "nce", "", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.FD_models.base_Model.__init__": [[9, 38], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "CPC.CPC.CPC", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "base_Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "configs", ".", "input_channels", "\n", "self", ".", "dropout", "=", "configs", ".", "dropout", "\n", "self", ".", "kernel_size", "=", "configs", ".", "kernel_size", "\n", "self", ".", "hidden_dim", "=", "configs", ".", "cls_hidden_dim", "\n", "self", ".", "out_dim", "=", "configs", ".", "num_classes", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "input_dim", ",", "8", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ")", "\n", "self", ".", "med_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1240", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "Classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "out_dim", ")", ")", "\n", "self", ".", "cpc", "=", "CPC", "(", "8", ",", "64", ",", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.FD_models.base_Model.forward": [[39, 49], ["src.view.view.view", "FD_models.base_Model.encoder", "src.view.view.size", "FD_models.base_Model.cpc", "FD_models.base_Model.med_layer", "FD_models.base_Model.Classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "# reshape input (batch_size, input_dim, sequence length)", "\n", "        ", "src", "=", "src", ".", "view", "(", "src", ".", "size", "(", "0", ")", ",", "self", ".", "input_dim", ",", "-", "1", ")", "\n", "full_features", "=", "self", ".", "encoder", "(", "src", ")", "\n", "if", "training_mode", "==", "\"self_supervised\"", ":", "\n", "            ", "return", "self", ".", "cpc", "(", "full_features", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "self", ".", "med_layer", "(", "full_features", ")", "\n", "predictions", "=", "self", ".", "Classifier", "(", "features", ")", "\n", "return", "predictions", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.FD_models.base_model_BN.__init__": [[51, 85], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "CPC.CPC.CPC", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "base_model_BN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "configs", ".", "input_channels", "\n", "self", ".", "dropout", "=", "configs", ".", "dropout", "\n", "self", ".", "kernel_size", "=", "configs", ".", "kernel_size", "\n", "self", ".", "hidden_dim", "=", "configs", ".", "cls_hidden_dim", "\n", "self", ".", "out_dim", "=", "configs", ".", "num_classes", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "input_dim", ",", "8", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ")", "\n", "self", ".", "med_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1240", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "Classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "out_dim", ")", ")", "\n", "self", ".", "cpc", "=", "CPC", "(", "8", ",", "64", ",", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.FD_models.base_model_BN.forward": [[86, 96], ["src.view.view.view", "FD_models.base_model_BN.encoder", "src.view.view.size", "FD_models.base_model_BN.cpc", "FD_models.base_model_BN.med_layer", "FD_models.base_model_BN.Classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "# reshape input (batch_size, input_dim, sequence length)", "\n", "        ", "src", "=", "src", ".", "view", "(", "src", ".", "size", "(", "0", ")", ",", "self", ".", "input_dim", ",", "-", "1", ")", "\n", "full_features", "=", "self", ".", "encoder", "(", "src", ")", "\n", "if", "training_mode", "==", "\"self_supervised\"", ":", "\n", "            ", "return", "self", ".", "cpc", "(", "full_features", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "self", ".", "med_layer", "(", "full_features", ")", "\n", "predictions", "=", "self", ".", "Classifier", "(", "features", ")", "\n", "return", "predictions", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.FD_models.CNN_CPC.__init__": [[98, 128], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "CPC.CPC.CPC", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "CNN_CPC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "configs", ".", "input_channels", "\n", "self", ".", "dropout", "=", "configs", ".", "dropout", "\n", "self", ".", "kernel_size", "=", "configs", ".", "kernel_size", "\n", "self", ".", "hidden_dim", "=", "configs", ".", "cls_hidden_dim", "\n", "self", ".", "out_dim", "=", "configs", ".", "cls_hidden_dim", "\n", "self", ".", "AR", "=", "configs", ".", "AR", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "input_dim", ",", "8", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ")", "\n", "self", ".", "med_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1240", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "Classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "out_dim", ")", ")", "\n", "self", ".", "cpc", "=", "CPC", "(", "8", ",", "64", ",", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.FD_models.CNN_CPC.forward": [[129, 137], ["src.view.view.view", "FD_models.CNN_CPC.encoder", "FD_models.CNN_CPC.med_layer", "FD_models.CNN_CPC.Classifier", "src.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "# reshape input (batch_size, input_dim, sequence length)", "\n", "        ", "src", "=", "src", ".", "view", "(", "src", ".", "size", "(", "0", ")", ",", "self", ".", "input_dim", ",", "-", "1", ")", "\n", "full_features", "=", "self", ".", "encoder", "(", "src", ")", "\n", "features", "=", "self", ".", "med_layer", "(", "full_features", ")", "\n", "predictions", "=", "self", ".", "Classifier", "(", "features", ")", "\n", "features", "=", "full_features", "\n", "return", "predictions", ",", "(", "features", ",", "full_features", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.NTXentLoss.__init__": [[13, 22], ["super().__init__", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "loss.NTXentLoss._get_correlated_mask().type", "loss.NTXentLoss._get_similarity_function", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "loss.NTXentLoss._get_correlated_mask"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__", "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.NTXentLoss._get_similarity_function", "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.NTXentLoss._get_correlated_mask"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "batch_size", ",", "temperature", ",", "use_cosine_similarity", ")", ":", "\n", "        ", "super", "(", "NTXentLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "softmax", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "mask_samples_from_same_repr", "=", "self", ".", "_get_correlated_mask", "(", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", "self", ".", "similarity_function", "=", "self", ".", "_get_similarity_function", "(", "use_cosine_similarity", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.NTXentLoss._get_similarity_function": [[23, 29], ["torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity"], "methods", ["None"], ["", "def", "_get_similarity_function", "(", "self", ",", "use_cosine_similarity", ")", ":", "\n", "        ", "if", "use_cosine_similarity", ":", "\n", "            ", "self", ".", "_cosine_similarity", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "\n", "return", "self", ".", "_cosine_simililarity", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_dot_simililarity", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.NTXentLoss._get_correlated_mask": [[30, 37], ["numpy.eye", "numpy.eye", "numpy.eye", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy.to", "torch.from_numpy.to"], "methods", ["None"], ["", "", "def", "_get_correlated_mask", "(", "self", ")", ":", "\n", "        ", "diag", "=", "np", ".", "eye", "(", "2", "*", "self", ".", "batch_size", ")", "\n", "l1", "=", "np", ".", "eye", "(", "(", "2", "*", "self", ".", "batch_size", ")", ",", "2", "*", "self", ".", "batch_size", ",", "k", "=", "-", "self", ".", "batch_size", ")", "\n", "l2", "=", "np", ".", "eye", "(", "(", "2", "*", "self", ".", "batch_size", ")", ",", "2", "*", "self", ".", "batch_size", ",", "k", "=", "self", ".", "batch_size", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "(", "diag", "+", "l1", "+", "l2", ")", ")", "\n", "mask", "=", "(", "1", "-", "mask", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", "return", "mask", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.NTXentLoss._dot_simililarity": [[38, 45], ["torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "x.unsqueeze", "y.T.unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_dot_simililarity", "(", "x", ",", "y", ")", ":", "\n", "        ", "v", "=", "torch", ".", "tensordot", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "y", ".", "T", ".", "unsqueeze", "(", "0", ")", ",", "dims", "=", "2", ")", "\n", "# x shape: (N, 1, C)", "\n", "# y shape: (1, C, 2N)", "\n", "# v shape: (N, 2N)", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.NTXentLoss._cosine_simililarity": [[46, 52], ["loss.NTXentLoss._cosine_similarity", "x.unsqueeze", "y.unsqueeze"], "methods", ["None"], ["", "def", "_cosine_simililarity", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x shape: (N, 1, C)", "\n", "# y shape: (1, 2N, C)", "\n", "# v shape: (N, 2N)", "\n", "        ", "v", "=", "self", ".", "_cosine_similarity", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "y", ".", "unsqueeze", "(", "0", ")", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.NTXentLoss.forward": [[53, 72], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "loss.NTXentLoss.NTXentLoss.similarity_function", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "similarity_matrix[].view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "torch.zeros().to().long", "loss.NTXentLoss.NTXentLoss.criterion", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "zis", ",", "zjs", ")", ":", "\n", "        ", "representations", "=", "torch", ".", "cat", "(", "[", "zjs", ",", "zis", "]", ",", "dim", "=", "0", ")", "\n", "\n", "similarity_matrix", "=", "self", ".", "similarity_function", "(", "representations", ",", "representations", ")", "\n", "\n", "# filter out the scores from the positive samples", "\n", "l_pos", "=", "torch", ".", "diag", "(", "similarity_matrix", ",", "self", ".", "batch_size", ")", "\n", "r_pos", "=", "torch", ".", "diag", "(", "similarity_matrix", ",", "-", "self", ".", "batch_size", ")", "\n", "positives", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "r_pos", "]", ")", ".", "view", "(", "2", "*", "self", ".", "batch_size", ",", "1", ")", "\n", "\n", "negatives", "=", "similarity_matrix", "[", "self", ".", "mask_samples_from_same_repr", "]", ".", "view", "(", "2", "*", "self", ".", "batch_size", ",", "-", "1", ")", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "(", "positives", ",", "negatives", ")", ",", "dim", "=", "1", ")", "\n", "logits", "/=", "self", ".", "temperature", "\n", "\n", "labels", "=", "torch", ".", "zeros", "(", "2", "*", "self", ".", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", ".", "long", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "labels", ")", "\n", "\n", "return", "loss", "/", "(", "2", "*", "self", ".", "batch_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.weighted_CrossEntropyLoss": [[6, 9], ["torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor"], "function", ["None"], ["def", "weighted_CrossEntropyLoss", "(", "output", ",", "target", ",", "classes_weights", ")", ":", "\n", "    ", "cr", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "torch", ".", "tensor", "(", "classes_weights", ")", ".", "cuda", "(", ")", ")", "\n", "return", "cr", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.EEG_models.base_Model.__init__": [[15, 61], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "CPC.CPC.CPC", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.MaxPool1d", "torch.nn.Dropout", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.MaxPool1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.MaxPool1d", "torch.nn.Dropout", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.MaxPool1d"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "base_Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "features1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "configs", ".", "input_channels", ",", "64", ",", "kernel_size", "=", "configs", ".", "small_kernel_size", ",", "\n", "stride", "=", "configs", ".", "small_stride_size", ",", "bias", "=", "False", ",", "padding", "=", "24", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "8", ",", "stride", "=", "2", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "4", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", "\n", ")", "\n", "\n", "self", ".", "features2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "configs", ".", "input_channels", ",", "64", ",", "kernel_size", "=", "configs", ".", "wide_kernel_size", ",", "stride", "=", "configs", ".", "wide_stride_size", ",", "\n", "bias", "=", "False", ",", "padding", "=", "200", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "128", ",", "configs", ".", "reduced_cnn_size", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "configs", ".", "reduced_cnn_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", "\n", "\n", "model_output_dim", "=", "80", "\n", "self", ".", "logits", "=", "nn", ".", "Linear", "(", "model_output_dim", "*", "configs", ".", "reduced_cnn_size", ",", "configs", ".", "num_classes", ")", "\n", "\n", "self", ".", "cpc", "=", "CPC", "(", "configs", ".", "reduced_cnn_size", ",", "64", ",", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.EEG_models.base_Model.forward": [[62, 74], ["EEG_models.base_Model.features1", "EEG_models.base_Model.features2", "torch.cat", "EEG_models.base_Model.dropout", "EEG_models.base_Model.cpc", "x_concat.view.view.view", "EEG_models.base_Model.logits"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "features1", "(", "x", ")", "\n", "x2", "=", "self", ".", "features2", "(", "x", ")", "\n", "x_concat", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "dim", "=", "2", ")", "\n", "x_concat", "=", "self", ".", "dropout", "(", "x_concat", ")", "\n", "\n", "if", "training_mode", "==", "\"self_supervised\"", "and", "use_SimCLR", "is", "False", ":", "\n", "            ", "return", "self", ".", "cpc", "(", "x_concat", ")", "\n", "", "else", ":", "\n", "            ", "x_concat", "=", "x_concat", ".", "view", "(", "x_concat", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "logits", "(", "x_concat", ")", "\n", "return", "logits", ",", "x_concat", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.EEG_models.CNN_EEG_SL.__init__": [[77, 124], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Linear", "CPC.CPC.CPC", "torch.nn.AdaptiveAvgPool1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.MaxPool1d", "torch.nn.Dropout", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.MaxPool1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.MaxPool1d", "torch.nn.Dropout", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.MaxPool1d"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "CNN_EEG_SL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "features1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "configs", ".", "input_channels", ",", "64", ",", "kernel_size", "=", "configs", ".", "small_kernel_size", ",", "\n", "stride", "=", "configs", ".", "small_stride_size", ",", "bias", "=", "False", ",", "padding", "=", "24", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "8", ",", "stride", "=", "2", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "4", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", "\n", ")", "\n", "\n", "self", ".", "features2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "configs", ".", "input_channels", ",", "64", ",", "kernel_size", "=", "configs", ".", "wide_kernel_size", ",", "stride", "=", "configs", ".", "wide_stride_size", ",", "\n", "bias", "=", "False", ",", "padding", "=", "200", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "Conv1d", "(", "128", ",", "configs", ".", "reduced_cnn_size", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "3", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "configs", ".", "reduced_cnn_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", "\n", "\n", "model_output_dim", "=", "80", "\n", "self", ".", "logits", "=", "nn", ".", "Linear", "(", "model_output_dim", "*", "configs", ".", "reduced_cnn_size", ",", "configs", ".", "num_classes", ")", "\n", "\n", "self", ".", "cpc", "=", "CPC", "(", "configs", ".", "reduced_cnn_size", ",", "64", ",", "30", ")", "\n", "self", ".", "aap", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "model_output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.EEG_models.CNN_EEG_SL.forward": [[125, 137], ["EEG_models.CNN_EEG_SL.features1", "EEG_models.CNN_EEG_SL.features2", "torch.cat", "EEG_models.CNN_EEG_SL.dropout", "EEG_models.CNN_EEG_SL.aap", "EEG_models.CNN_EEG_SL.cpc", "EEG_models.CNN_EEG_SL.view", "EEG_models.CNN_EEG_SL.logits"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "features1", "(", "x", ")", "\n", "x2", "=", "self", ".", "features2", "(", "x", ")", "\n", "x_concat", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "dim", "=", "2", ")", "\n", "full_features", "=", "self", ".", "dropout", "(", "x_concat", ")", "\n", "full_features", "=", "self", ".", "aap", "(", "full_features", ")", "\n", "if", "training_mode", "==", "\"self_supervised\"", "and", "use_SimCLR", "is", "False", ":", "\n", "            ", "return", "self", ".", "cpc", "(", "full_features", ")", "\n", "", "else", ":", "\n", "            ", "vec_features", "=", "full_features", ".", "view", "(", "full_features", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "logits", "(", "vec_features", ")", "\n", "return", "logits", ",", "(", "vec_features", ",", "full_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.EEG_models.EEG_M.__init__": [[140, 163], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "CPC.CPC.CPC", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.MaxPool1d", "torch.nn.Dropout", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.MaxPool1d", "torch.nn.Dropout", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.MaxPool1d", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "EEG_M", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_extractor", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "configs", ".", "input_channels", ",", "32", ",", "kernel_size", "=", "configs", ".", "kernel_size", ",", "stride", "=", "configs", ".", "stride", ",", "bias", "=", "False", ",", "\n", "padding", "=", "(", "configs", ".", "kernel_size", "//", "2", ")", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", ",", "\n", "nn", ".", "Conv1d", "(", "32", ",", "64", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "3", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", ",", "\n", "nn", ".", "Conv1d", "(", "64", ",", "configs", ".", "reduced_cnn_size", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "configs", ".", "reduced_cnn_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "3", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", "\n", ")", "\n", "model_output_dim", "=", "22", "\n", "self", ".", "logits", "=", "nn", ".", "Linear", "(", "model_output_dim", "*", "configs", ".", "reduced_cnn_size", ",", "configs", ".", "num_classes", ")", "\n", "self", ".", "cpc", "=", "CPC", "(", "configs", ".", "reduced_cnn_size", ",", "64", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.EEG_models.EEG_M.forward": [[164, 172], ["EEG_models.EEG_M.feature_extractor", "EEG_models.EEG_M.cpc", "EEG_models.EEG_M.view", "EEG_models.EEG_M.logits"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_in", ")", ":", "\n", "        ", "full_features", "=", "self", ".", "feature_extractor", "(", "x_in", ")", "\n", "if", "training_mode", "==", "\"self_supervised\"", "and", "use_SimCLR", "is", "False", ":", "\n", "            ", "return", "self", ".", "cpc", "(", "full_features", ")", "\n", "", "else", ":", "\n", "            ", "vec_features", "=", "full_features", ".", "view", "(", "full_features", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "logits", "(", "vec_features", ")", "\n", "return", "logits", ",", "vec_features", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.CNN_Opp_HAR_SL.__init__": [[12, 32], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.Sequential", "torch.Sequential", "models.CPC", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "CNN_Opp_HAR_SL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "configs", ".", "input_channels", "\n", "self", ".", "out_channels", "=", "configs", ".", "out_channels", "\n", "self", ".", "hidden_dim", "=", "configs", ".", "feat_dim", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "configs", ".", "input_channels", ",", "16", ",", "kernel_size", "=", "configs", ".", "kernel_size", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", ",", "\n", "nn", ".", "Conv1d", "(", "16", ",", "16", ",", "kernel_size", "=", "5", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "16", ",", "configs", ".", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "configs", ".", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "flatten", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "self", ".", "Classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "configs", ".", "num_classes", ")", ")", "\n", "self", ".", "cpc", "=", "CPC", "(", "configs", ".", "out_channels", ",", "16", ",", "12", ")", "\n", "", "def", "forward", "(", "self", ",", "src", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.CNN_Opp_HAR_SL.forward": [[32, 39], ["models.CNN_Opp_HAR_SL.encoder().squeeze", "models.CNN_Opp_HAR_SL.flatten().squeeze", "models.CNN_Opp_HAR_SL.Classifier", "models.CNN_Opp_HAR_SL.encoder", "models.CNN_Opp_HAR_SL.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "# reshape input (batch_size, input_dim, sequence length)", "\n", "# src = src.view(src.size(0), self.input_dim, -1)", "\n", "        ", "seq_features", "=", "self", ".", "encoder", "(", "src", ")", ".", "squeeze", "(", ")", "\n", "vec_features", "=", "self", ".", "flatten", "(", "seq_features", ")", ".", "squeeze", "(", ")", "\n", "predictions", "=", "self", ".", "Classifier", "(", "vec_features", ")", "\n", "return", "predictions", ",", "(", "vec_features", ",", "seq_features", ")", "\n", "", "", "class", "CNN_BN", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.CNN_BN.__init__": [[40, 73], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "CNN_BN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "configs", ".", "input_channels", "\n", "self", ".", "dropout", "=", "configs", ".", "dropout", "\n", "self", ".", "kernel_size", "=", "configs", ".", "kernel_size", "\n", "self", ".", "hidden_dim", "=", "configs", ".", "cls_hidden_dim", "\n", "self", ".", "out_dim", "=", "configs", ".", "num_classes", "\n", "self", ".", "AR", "=", "configs", ".", "AR", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "input_dim", ",", "8", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ")", "\n", "self", ".", "med_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1240", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "Classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "out_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.CNN_BN.forward": [[74, 82], ["src.view.view.view", "models.CNN_BN.encoder", "models.CNN_BN.med_layer", "models.CNN_BN.Classifier", "src.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "# reshape input (batch_size, input_dim, sequence length)", "\n", "        ", "src", "=", "src", ".", "view", "(", "src", ".", "size", "(", "0", ")", ",", "self", ".", "input_dim", ",", "-", "1", ")", "\n", "full_features", "=", "self", ".", "encoder", "(", "src", ")", "\n", "features", "=", "self", ".", "med_layer", "(", "full_features", ")", "\n", "predictions", "=", "self", ".", "Classifier", "(", "features", ")", "\n", "\n", "return", "predictions", ",", "(", "features", ",", "full_features", ")", "\n", "", "", "class", "CNN_SL_bn", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.CNN_SL_bn.__init__": [[83, 118], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.CPC", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "CNN_SL_bn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_dim", "=", "configs", ".", "input_channels", "\n", "self", ".", "dropout", "=", "configs", ".", "dropout", "\n", "self", ".", "kernel_size", "=", "configs", ".", "kernel_size", "\n", "self", ".", "hidden_dim", "=", "configs", ".", "cls_hidden_dim", "\n", "self", ".", "out_dim", "=", "configs", ".", "num_classes", "\n", "self", ".", "AR", "=", "configs", ".", "AR", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "input_dim", ",", "8", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "8", ",", "8", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ")", "\n", "self", ".", "med_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1240", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "Classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "out_dim", ")", ")", "\n", "self", ".", "cpc", "=", "CPC", "(", "8", ",", "64", ",", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.CNN_SL_bn.forward": [[119, 126], ["models.CNN_SL_bn.encoder", "models.CNN_SL_bn.med_layer", "models.CNN_SL_bn.Classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "# reshape input (batch_size, input_dim, sequence length)", "\n", "# src = src.view(src.size(0), self.input_dim, -1)", "\n", "        ", "full_features", "=", "self", ".", "encoder", "(", "src", ")", "\n", "features", "=", "self", ".", "med_layer", "(", "full_features", ")", "\n", "predictions", "=", "self", ".", "Classifier", "(", "features", ")", "\n", "return", "predictions", ",", "(", "features", ",", "full_features", ")", "\n", "", "", "class", "CPC", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.CPC.__init__": [[127, 135], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.ModuleList", "torch.ModuleList", "torch.LogSoftmax", "torch.LogSoftmax", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "gru_hidden_dim", ",", "timestep", ")", ":", "\n", "        ", "super", "(", "CPC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "hidden_dim", "=", "gru_hidden_dim", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "num_channels", ",", "self", ".", "hidden_dim", ",", "num_layers", "=", "1", ",", "bidirectional", "=", "False", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "timestep", "=", "timestep", "\n", "self", ".", "Wk", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "num_channels", ")", "for", "i", "in", "range", "(", "self", ".", "timestep", ")", "]", ")", "\n", "self", ".", "lsoftmax", "=", "nn", ".", "LogSoftmax", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.CPC.forward": [[136, 162], ["z.transpose.transpose.transpose", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "numpy.arange", "models.CPC.gru", "output[].view", "torch.empty().float", "torch.empty().float", "torch.empty().float", "torch.empty().float", "numpy.arange", "numpy.arange", "z[].view", "linear", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "models.CPC.lsoftmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "z", "=", "features", "# features are (batch_size, #channels, seq_len)", "\n", "# seq_len = z.shape[2]", "\n", "z", "=", "z", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "\n", "batch", "=", "z", ".", "shape", "[", "0", "]", "\n", "t_samples", "=", "torch", ".", "randint", "(", "self", ".", "timestep", ",", "size", "=", "(", "1", ",", ")", ")", ".", "long", "(", ")", "# randomly pick time stamps", "\n", "\n", "nce", "=", "0", "# average over timestep and batch", "\n", "encode_samples", "=", "torch", ".", "empty", "(", "(", "self", ".", "timestep", ",", "batch", ",", "self", ".", "num_channels", ")", ")", ".", "float", "(", ")", "# e.g. size 12*8*512", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "1", ",", "self", ".", "timestep", "+", "1", ")", ":", "\n", "            ", "encode_samples", "[", "i", "-", "1", "]", "=", "z", "[", ":", ",", "t_samples", "+", "i", ",", ":", "]", ".", "view", "(", "batch", ",", "self", ".", "num_channels", ")", "# z_tk e.g. size 8*512", "\n", "", "forward_seq", "=", "z", "[", ":", ",", ":", "t_samples", "+", "1", ",", ":", "]", "# e.g. size 8*100*512", "\n", "output", ",", "_", "=", "self", ".", "gru", "(", "forward_seq", ")", "# output size e.g. 8*100*256", "\n", "c_t", "=", "output", "[", ":", ",", "t_samples", ",", ":", "]", ".", "view", "(", "batch", ",", "self", ".", "hidden_dim", ")", "# c_t e.g. size 8*256", "\n", "pred", "=", "torch", ".", "empty", "(", "(", "self", ".", "timestep", ",", "batch", ",", "self", ".", "num_channels", ")", ")", ".", "float", "(", ")", "# e.g. size 12*8*512", "\n", "for", "i", "in", "np", ".", "arange", "(", "0", ",", "self", ".", "timestep", ")", ":", "\n", "            ", "linear", "=", "self", ".", "Wk", "[", "i", "]", "\n", "pred", "[", "i", "]", "=", "linear", "(", "c_t", ")", "# Wk*c_t e.g. size 8*512", "\n", "", "for", "i", "in", "np", ".", "arange", "(", "0", ",", "self", ".", "timestep", ")", ":", "\n", "            ", "total", "=", "torch", ".", "mm", "(", "encode_samples", "[", "i", "]", ",", "torch", ".", "transpose", "(", "pred", "[", "i", "]", ",", "0", ",", "1", ")", ")", "# e.g. size 8*8", "\n", "nce", "+=", "torch", ".", "sum", "(", "torch", ".", "diag", "(", "self", ".", "lsoftmax", "(", "total", ")", ")", ")", "# nce is a tensor", "\n", "", "nce", "/=", "-", "1.", "*", "batch", "*", "self", ".", "timestep", "\n", "return", "nce", "\n", "", "", "class", "EEG_M", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.EEG_M.__init__": [[163, 185], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "models.CPC", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.MaxPool1d", "torch.MaxPool1d", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.MaxPool1d", "torch.MaxPool1d", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.MaxPool1d", "torch.MaxPool1d", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "EEG_M", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_extractor", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "configs", ".", "input_channels", ",", "32", ",", "kernel_size", "=", "configs", ".", "kernel_size", ",", "stride", "=", "configs", ".", "stride", ",", "bias", "=", "False", ",", "padding", "=", "(", "configs", ".", "kernel_size", "//", "2", ")", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", ",", "\n", "nn", ".", "Conv1d", "(", "32", ",", "64", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "3", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", ",", "\n", "nn", ".", "Conv1d", "(", "64", ",", "configs", ".", "reduced_cnn_size", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "configs", ".", "reduced_cnn_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "3", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", "\n", ")", "\n", "model_output_dim", "=", "22", "\n", "self", ".", "logits", "=", "nn", ".", "Linear", "(", "model_output_dim", "*", "configs", ".", "reduced_cnn_size", ",", "configs", ".", "num_classes", ")", "\n", "self", ".", "cpc", "=", "CPC", "(", "configs", ".", "reduced_cnn_size", ",", "64", ",", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.EEG_M.forward": [[186, 191], ["models.EEG_M.feature_extractor", "models.EEG_M.view", "models.EEG_M.logits"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_in", ")", ":", "\n", "        ", "full_features", "=", "self", ".", "feature_extractor", "(", "x_in", ")", "\n", "vec_features", "=", "full_features", ".", "view", "(", "full_features", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "logits", "(", "vec_features", ")", "\n", "return", "logits", ",", "(", "vec_features", ",", "full_features", ")", "\n", "", "", "class", "EEG_M_SL", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.EEG_M_SL.__init__": [[192, 214], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "models.CPC", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.MaxPool1d", "torch.MaxPool1d", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.MaxPool1d", "torch.MaxPool1d", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.MaxPool1d", "torch.MaxPool1d", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "super", "(", "EEG_M_SL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_extractor", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "configs", ".", "input_channels", ",", "32", ",", "kernel_size", "=", "configs", ".", "kernel_size", ",", "stride", "=", "configs", ".", "stride", ",", "bias", "=", "False", ",", "padding", "=", "(", "configs", ".", "kernel_size", "//", "2", ")", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", ",", "\n", "nn", ".", "Conv1d", "(", "32", ",", "64", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "3", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", ",", "\n", "nn", ".", "Conv1d", "(", "64", ",", "configs", ".", "reduced_cnn_size", ",", "kernel_size", "=", "8", ",", "stride", "=", "1", ",", "bias", "=", "False", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "configs", ".", "reduced_cnn_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "3", ",", "stride", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "configs", ".", "dropout", ")", "\n", ")", "\n", "model_output_dim", "=", "22", "\n", "self", ".", "logits", "=", "nn", ".", "Linear", "(", "model_output_dim", "*", "configs", ".", "reduced_cnn_size", ",", "configs", ".", "num_classes", ")", "\n", "self", ".", "cpc", "=", "CPC", "(", "configs", ".", "reduced_cnn_size", ",", "64", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.EEG_M_SL.forward": [[215, 220], ["models.EEG_M_SL.feature_extractor", "models.EEG_M_SL.view", "models.EEG_M_SL.logits"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_in", ")", ":", "\n", "        ", "full_features", "=", "self", ".", "feature_extractor", "(", "x_in", ")", "\n", "vec_features", "=", "full_features", ".", "view", "(", "full_features", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "logits", "(", "vec_features", ")", "\n", "return", "logits", ",", "(", "vec_features", ",", "full_features", ")", "\n", "", "def", "get_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.EEG_M_SL.get_parameters": [[220, 224], ["models.EEG_M_SL.feature_extractor.parameters", "models.EEG_M_SL.logits.parameters"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "        ", "parameter_list", "=", "[", "{", "\"params\"", ":", "self", ".", "feature_extractor", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "0.01", ",", "'decay_mult'", ":", "2", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "logits", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "0.01", ",", "'decay_mult'", ":", "2", "}", ",", "]", "\n", "return", "parameter_list", "\n", "", "", "class", "Discriminator_AR", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.Discriminator_AR.__init__": [[226, 233], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "\"\"\"Init discriminator.\"\"\"", "\n", "self", ".", "input_dim", "=", "configs", ".", "out_channels", "\n", "super", "(", "Discriminator_AR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "AR_disc", "=", "nn", ".", "GRU", "(", "input_size", "=", "self", ".", "input_dim", ",", "hidden_size", "=", "configs", ".", "disc_AR_hid", ",", "num_layers", "=", "configs", ".", "disc_n_layers", ",", "bidirectional", "=", "configs", ".", "disc_AR_bid", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "DC", "=", "nn", ".", "Linear", "(", "configs", ".", "disc_AR_hid", "+", "configs", ".", "disc_AR_hid", "*", "configs", ".", "disc_AR_bid", ",", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.Discriminator_AR.forward": [[233, 241], ["input.view.view.view", "models.Discriminator_AR.AR_disc", "models.Discriminator_AR.DC", "input.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Forward the discriminator.\"\"\"", "\n", "# src_shape = [batch_size, seq_len, input_dim]", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ",", "self", ".", "input_dim", ")", "\n", "encoder_outputs", ",", "(", "encoder_hidden", ")", "=", "self", ".", "AR_disc", "(", "input", ")", "\n", "features", "=", "encoder_outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "domain_output", "=", "self", ".", "DC", "(", "features", ")", "\n", "return", "domain_output", "\n", "", "def", "get_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.Discriminator_AR.get_parameters": [[241, 244], ["models.Discriminator_AR.AR_disc.parameters", "models.Discriminator_AR.DC.parameters"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "        ", "parameter_list", "=", "[", "{", "\"params\"", ":", "self", ".", "AR_disc", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "0.01", ",", "'decay_mult'", ":", "1", "}", ",", "{", "\"params\"", ":", "self", ".", "DC", ".", "parameters", "(", ")", ",", "\"lr_mult\"", ":", "0.01", ",", "'decay_mult'", ":", "1", "}", ",", "]", "\n", "return", "parameter_list", "\n", "", "", "class", "Discriminator_ATT", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.Discriminator_ATT.__init__": [[246, 256], ["torch.Module.__init__", "models.attention.Seq_Transformer", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "\"\"\"Init discriminator.\"\"\"", "\n", "self", ".", "patch_size", "=", "configs", ".", "patch_size", "\n", "self", ".", "hid_dim", "=", "configs", ".", "att_hid_dim", "\n", "self", ".", "depth", "=", "configs", ".", "depth", "\n", "self", ".", "heads", "=", "configs", ".", "heads", "\n", "self", ".", "mlp_dim", "=", "configs", ".", "mlp_dim", "\n", "super", "(", "Discriminator_ATT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transformer", "=", "Seq_Transformer", "(", "patch_size", "=", "self", ".", "patch_size", ",", "dim", "=", "configs", ".", "att_hid_dim", ",", "depth", "=", "self", ".", "depth", ",", "heads", "=", "self", ".", "heads", ",", "mlp_dim", "=", "self", ".", "mlp_dim", ")", "\n", "self", ".", "DC", "=", "nn", ".", "Linear", "(", "configs", ".", "att_hid_dim", ",", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.Discriminator_ATT.forward": [[256, 263], ["input.view.view.view", "models.Discriminator_ATT.transformer", "models.Discriminator_ATT.DC", "input.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Forward the discriminator.\"\"\"", "\n", "# src_shape = [batch_size, seq_len, input_dim]", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ",", "self", ".", "patch_size", ")", "\n", "features", "=", "self", ".", "transformer", "(", "input", ")", "\n", "domain_output", "=", "self", ".", "DC", "(", "features", ")", "\n", "return", "domain_output", "\n", "", "", "class", "Discriminator", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.Discriminator.__init__": [[265, 277], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "\"\"\"Init discriminator.\"\"\"", "\n", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "restored", "=", "False", "\n", "\n", "self", ".", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "configs", ".", "feat_dim", ",", "configs", ".", "disc_hid_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "configs", ".", "disc_hid_dim", ",", "configs", ".", "disc_hid_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "configs", ".", "disc_hid_dim", ",", "1", ")", "\n", "# nn.LogSoftmax(dim=1)", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.models.Discriminator.forward": [[279, 283], ["models.Discriminator.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Forward the discriminator.\"\"\"", "\n", "out", "=", "self", ".", "layer", "(", "input", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.ConditionalEntropyLoss.__init__": [[29, 31], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["\n", "", "", "def", "_get_correlated_mask", "(", "self", ")", ":", "\n", "        ", "diag", "=", "np", ".", "eye", "(", "2", "*", "self", ".", "batch_size", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.ConditionalEntropyLoss.forward": [[32, 36], ["b.sum.sum.sum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "b.sum.sum.mean"], "methods", ["None"], ["l1", "=", "np", ".", "eye", "(", "(", "2", "*", "self", ".", "batch_size", ")", ",", "2", "*", "self", ".", "batch_size", ",", "k", "=", "-", "self", ".", "batch_size", ")", "\n", "l2", "=", "np", ".", "eye", "(", "(", "2", "*", "self", ".", "batch_size", ")", ",", "2", "*", "self", ".", "batch_size", ",", "k", "=", "self", ".", "batch_size", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "(", "diag", "+", "l1", "+", "l2", ")", ")", "\n", "mask", "=", "(", "1", "-", "mask", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", "return", "mask", ".", "to", "(", "self", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.NCE_model.__init__": [[45, 51], ["torch.Module.__init__", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["\n", "", "def", "_cosine_simililarity", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x shape: (N, 1, C)", "\n", "# y shape: (1, 2N, C)", "\n", "# v shape: (N, 2N)", "\n", "        ", "v", "=", "self", ".", "_cosine_similarity", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "y", ".", "unsqueeze", "(", "0", ")", ")", "\n", "return", "v", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.NCE_model.forward": [[52, 65], ["src_feas.size", "loss.NCE_model.extract_positive_pairs", "tgt_feas[].permute", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "len", "loss.NCE_model.lsoftmax"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.NCE_model.extract_positive_pairs"], ["\n", "", "def", "forward", "(", "self", ",", "zis", ",", "zjs", ")", ":", "\n", "        ", "representations", "=", "torch", ".", "cat", "(", "[", "zjs", ",", "zis", "]", ",", "dim", "=", "0", ")", "\n", "\n", "similarity_matrix", "=", "self", ".", "similarity_function", "(", "representations", ",", "representations", ")", "\n", "\n", "# filter out the scores from the positive samples", "\n", "l_pos", "=", "torch", ".", "diag", "(", "similarity_matrix", ",", "self", ".", "batch_size", ")", "\n", "r_pos", "=", "torch", ".", "diag", "(", "similarity_matrix", ",", "-", "self", ".", "batch_size", ")", "\n", "positives", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "r_pos", "]", ")", ".", "view", "(", "2", "*", "self", ".", "batch_size", ",", "1", ")", "\n", "\n", "negatives", "=", "similarity_matrix", "[", "self", ".", "mask_samples_from_same_repr", "]", ".", "view", "(", "2", "*", "self", ".", "batch_size", ",", "-", "1", ")", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "(", "positives", ",", "negatives", ")", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.NCE_model.extract_positive_pairs": [[66, 111], ["torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "tgt_logits[].argmax", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "confident_indices[].repeat", "tgt_feas[].reshape", "len", "len", "src_pair.size", "src_pair.size", "full_src_pairs.append", "full_tgt_pairs.append", "full_src_idx.append", "full_tgt_idx.append"], "methods", ["None"], ["logits", "/=", "self", ".", "temperature", "\n", "\n", "labels", "=", "torch", ".", "zeros", "(", "2", "*", "self", ".", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", ".", "long", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "labels", ")", "\n", "\n", "return", "loss", "/", "(", "2", "*", "self", ".", "batch_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.my_cntrst_loss.__init__": [[113, 119], ["torch.Module.__init__", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.my_cntrst_loss.forward": [[120, 145], ["src_feas.size", "loss.my_cntrst_loss.extract_positive_pairs", "tgt_feas[].permute", "z_i.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "sim_matrix.masked_select().view.masked_select().view.masked_select().view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat.t().contiguous", "torch.cat.t().contiguous", "torch.cat.t().contiguous", "sim_matrix.masked_select().view.masked_select().view.masked_select", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.cat.t", "torch.cat.t", "torch.cat.t", "sim_matrix.masked_select().view.masked_select().view.sum"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.NCE_model.extract_positive_pairs"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.SupConLoss.__init__": [[151, 157], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.SupConLoss.forward": [[158, 234], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "mask.float().to.float().to.repeat", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "loss.view().mean.view().mean.view().mean", "len", "ValueError", "len", "features.view.view.view", "ValueError", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "logits_max.detach", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "mask.float().to.float().to.sum", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "ValueError", "exp_logits.sum", "loss.view().mean.view().mean.view", "labels.contiguous().view.contiguous().view.contiguous().view", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "mask.float().to.float().to.float().to", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "ValueError", "labels.contiguous().view.contiguous().view.contiguous", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "torch.eq().float", "mask.float().to.float().to.float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.VAT.__init__": [[237, 244], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.VAT.forward": [[245, 248], ["loss.VAT.virtual_adversarial_loss"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.VAT.virtual_adversarial_loss"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.VAT.generate_virtual_adversarial_perturbation": [[249, 260], ["torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "range", "loss.VAT.model", "loss.VAT.kl_divergence_with_logit", "grad.detach", "loss.VAT.get_normalized_vector", "loss.VAT.get_normalized_vector().requires_grad_", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "loss.VAT.get_normalized_vector"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.VAT.kl_divergence_with_logit", "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.VAT.get_normalized_vector", "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.VAT.get_normalized_vector"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.VAT.kl_divergence_with_logit": [[261, 266], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.VAT.get_normalized_vector": [[267, 269], ["torch.normalize().reshape", "torch.normalize().reshape", "torch.normalize().reshape", "d.size", "torch.normalize", "torch.normalize", "torch.normalize", "d.view", "d.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.VAT.virtual_adversarial_loss": [[270, 276], ["loss.VAT.VAT.generate_virtual_adversarial_perturbation", "logit.detach", "loss.VAT.VAT.model", "loss.VAT.VAT.kl_divergence_with_logit"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.VAT.generate_virtual_adversarial_perturbation", "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.VAT.kl_divergence_with_logit"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.MMD_loss.__init__": [[297, 303], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.MMD_loss.guassian_kernel": [[304, 322], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "sum", "int", "int", "int", "int", "int", "int", "int", "int", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "range", "source.size", "target.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.MMD_loss.linear_mmd2": [[323, 328], ["delta.dot", "f_of_X.float().mean", "f_of_Y.float().mean", "f_of_X.float", "f_of_Y.float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.MMD_loss.forward": [[329, 344], ["torch.mean.MMD_loss.linear_mmd2", "int", "torch.mean.MMD_loss.guassian_kernel", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "source.size"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.MMD_loss.linear_mmd2", "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.guassian_kernel"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.CORAL.__init__": [[347, 349], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.CORAL.forward": [[350, 365], ["source.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "xm.t", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "xmt.t", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.HoMMD_loss.__init__": [[421, 423], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.HoMMD_loss.forward": [[424, 440], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze.permute", "torch.unsqueeze.permute", "torch.unsqueeze.permute", "torch.unsqueeze.permute", "torch.unsqueeze.permute", "torch.unsqueeze.permute", "torch.unsqueeze.permute", "torch.unsqueeze.permute", "torch.unsqueeze.permute", "torch.unsqueeze.permute", "torch.unsqueeze.permute", "torch.unsqueeze.permute", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss._disable_tracking_bn_stats": [[11, 20], ["model.apply", "model.apply", "hasattr"], "function", ["None"], ["", "class", "NTXentLoss", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "device", ",", "batch_size", ",", "temperature", ",", "use_cosine_similarity", ")", ":", "\n", "        ", "super", "(", "NTXentLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "softmax", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "mask_samples_from_same_repr", "=", "self", ".", "_get_correlated_mask", "(", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", "self", ".", "similarity_function", "=", "self", ".", "_get_similarity_function", "(", "use_cosine_similarity", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss._l2_normalize": [[22, 26], ["d.view", "torch.norm", "torch.norm", "torch.norm", "range", "d.dim"], "function", ["None"], ["\n", "", "def", "_get_similarity_function", "(", "self", ",", "use_cosine_similarity", ")", ":", "\n", "        ", "if", "use_cosine_similarity", ":", "\n", "            ", "self", ".", "_cosine_similarity", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "\n", "return", "self", ".", "_cosine_simililarity", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.confidence_thresholding": [[38, 42], ["torch.topk", "torch.topk", "torch.topk", "torch.where", "torch.where", "torch.where"], "function", ["None"], ["", "@", "staticmethod", "\n", "def", "_dot_simililarity", "(", "x", ",", "y", ")", ":", "\n", "        ", "v", "=", "torch", ".", "tensordot", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "y", ".", "T", ".", "unsqueeze", "(", "0", ")", ",", "dims", "=", "2", ")", "\n", "# x shape: (N, 1, C)", "\n", "# y shape: (1, C, 2N)", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.gradient_penalty": [[277, 292], ["torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.stack().requires_grad_", "torch.stack().requires_grad_", "torch.stack().requires_grad_", "critic", "gradients.norm", "grad", "torch.rand", "torch.rand", "torch.rand", "torch.stack", "torch.stack", "torch.stack", "h_s.size", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.EntropyLoss": [[369, 374], ["input_.ge", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.sum", "torch.sum", "torch.sum", "float", "input_.size", "torch.log", "torch.log", "torch.log"], "function", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.guassian_kernel": [[376, 390], ["torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "sum", "int", "int", "int", "int", "int", "int", "int", "int", "torch.exp", "torch.exp", "torch.exp", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.sum", "torch.sum", "torch.sum", "range", "source.size", "target.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.MMD": [[392, 403], ["int", "loss.guassian_kernel", "range", "float", "source.size"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.guassian_kernel"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.MMD_reg": [[405, 417], ["int", "int", "loss.guassian_kernel", "range", "float", "source.size", "target.size"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.guassian_kernel"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.loss.domain_contrastive_loss": [[441, 478], ["torch.normalize", "labels.contiguous().view.contiguous().view", "torch.eq().float().to", "torch.eq().float().to", "torch.eq().float().to", "torch.div", "torch.div", "torch.div", "torch.max", "torch.max", "torch.max", "torch.scatter", "torch.scatter", "torch.scatter", "torch.eq().float().to.sum", "loss.mean.mean", "torch.matmul", "torch.matmul", "torch.matmul", "logits_max.detach", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.arange().view().to", "torch.arange().view().to", "torch.arange().view().to", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.where", "torch.where", "torch.where", "labels.contiguous().view.contiguous", "torch.eq().float", "torch.eq().float", "torch.eq().float", "exp_logits.sum", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.eq", "torch.eq", "torch.eq", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.SELayer.__init__": [[15, 23], ["torch.Module.__init__", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.SELayer.forward": [[25, 30], ["x.size", "attention.SELayer.avg_pool().view", "attention.SELayer.fc().view", "attention.SELayer.expand_as", "attention.SELayer.avg_pool", "attention.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ")", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.SEBasicBlock.__init__": [[35, 47], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "attention.SELayer"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ",", "\n", "*", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SEBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "planes", ",", "planes", ",", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "se", "=", "SELayer", "(", "planes", ",", "reduction", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.SEBasicBlock.forward": [[48, 65], ["attention.SEBasicBlock.conv1", "attention.SEBasicBlock.bn1", "attention.SEBasicBlock.relu", "attention.SEBasicBlock.conv2", "attention.SEBasicBlock.bn2", "attention.SEBasicBlock.se", "attention.SEBasicBlock.relu", "attention.SEBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.Residual.__init__": [[70, 73], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.Residual.forward": [[74, 76], ["attention.Residual.fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "x", ",", "**", "kwargs", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.PreNorm.__init__": [[79, 83], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "fn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.PreNorm.forward": [[84, 86], ["attention.PreNorm.fn", "attention.PreNorm.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "self", ".", "norm", "(", "x", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.FeedForward.__init__": [[89, 97], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.GELU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "hidden_dim", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.FeedForward.forward": [[99, 101], ["attention.FeedForward.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.Attention.__init__": [[104, 113], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "heads", "=", "8", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "scale", "=", "dim", "**", "-", "0.5", "\n", "\n", "self", ".", "to_qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "to_out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.Attention.forward": [[115, 135], ["attention.Attention.to_qkv().chunk", "map", "dots.softmax", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "einops.rearrange", "attention.Attention.to_out", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.pad", "torch.pad", "torch.pad", "dots.masked_fill_", "attention.Attention.to_qkv", "einops.rearrange", "torch.pad.flatten", "float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "b", ",", "n", ",", "_", ",", "h", "=", "*", "x", ".", "shape", ",", "self", ".", "heads", "\n", "qkv", "=", "self", ".", "to_qkv", "(", "x", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "q", ",", "k", ",", "v", "=", "map", "(", "lambda", "t", ":", "rearrange", "(", "t", ",", "'b n (h d) -> b h n d'", ",", "h", "=", "h", ")", ",", "qkv", ")", "\n", "\n", "dots", "=", "torch", ".", "einsum", "(", "'bhid,bhjd->bhij'", ",", "q", ",", "k", ")", "*", "self", ".", "scale", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "F", ".", "pad", "(", "mask", ".", "flatten", "(", "1", ")", ",", "(", "1", ",", "0", ")", ",", "value", "=", "True", ")", "\n", "assert", "mask", ".", "shape", "[", "-", "1", "]", "==", "dots", ".", "shape", "[", "-", "1", "]", ",", "'mask has incorrect dimensions'", "\n", "mask", "=", "mask", "[", ":", ",", "None", ",", ":", "]", "*", "mask", "[", ":", ",", ":", ",", "None", "]", "\n", "dots", ".", "masked_fill_", "(", "~", "mask", ",", "float", "(", "'-inf'", ")", ")", "\n", "del", "mask", "\n", "\n", "", "attn", "=", "dots", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "out", "=", "torch", ".", "einsum", "(", "'bhij,bhjd->bhid'", ",", "attn", ",", "v", ")", "\n", "out", "=", "rearrange", "(", "out", ",", "'b h n d -> b n (h d)'", ")", "\n", "out", "=", "self", ".", "to_out", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.Transformer.__init__": [[138, 145], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "attention.Transformer.layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "attention.Residual", "attention.Residual", "attention.PreNorm", "attention.PreNorm", "attention.Attention", "attention.FeedForward"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "depth", ",", "heads", ",", "mlp_dim", ",", "dropout", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "_", "in", "range", "(", "depth", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "\n", "Residual", "(", "PreNorm", "(", "dim", ",", "Attention", "(", "dim", ",", "heads", "=", "heads", ",", "dropout", "=", "dropout", ")", ")", ")", ",", "\n", "Residual", "(", "PreNorm", "(", "dim", ",", "FeedForward", "(", "dim", ",", "mlp_dim", ",", "dropout", "=", "dropout", ")", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.Transformer.forward": [[147, 152], ["attn", "ff"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "for", "attn", ",", "ff", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "attn", "(", "x", ",", "mask", "=", "mask", ")", "\n", "x", "=", "ff", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.Seq_Transformer.__init__": [[155, 171], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "attention.Transformer", "torch.Identity", "torch.Identity", "torch.Identity", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "patch_size", ",", "dim", ",", "depth", ",", "heads", ",", "mlp_dim", ",", "channels", "=", "1", ",", "dropout", "=", "0.", ",", "emb_dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# num_patches = (seq_len // patch_size)  # ** 2", "\n", "patch_dim", "=", "channels", "*", "patch_size", "# ** 2", "\n", "# assert num_patches > MIN_NUM_PATCHES, f'your number of patches ({num_patches}) is way too small for attention to be effective. try decreasing your patch size'", "\n", "\n", "# self.patch_size = patch_size", "\n", "\n", "# self.pos_embedding = nn.Parameter(torch.randn(1, num_patches + 1, dim))", "\n", "self", ".", "patch_to_embedding", "=", "nn", ".", "Linear", "(", "patch_dim", ",", "dim", ")", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "1", ",", "dim", ")", ")", "\n", "# self.dropout = nn.Dropout(emb_dropout)", "\n", "\n", "self", ".", "transformer", "=", "Transformer", "(", "dim", ",", "depth", ",", "heads", ",", "mlp_dim", ",", "dropout", ")", "\n", "\n", "self", ".", "to_cls_token", "=", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.attention.Seq_Transformer.forward": [[174, 187], ["attention.Seq_Transformer.patch_to_embedding", "einops.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention.Seq_Transformer.transformer", "attention.Seq_Transformer.to_cls_token"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "forward_seq", ")", ":", "\n", "        ", "x", "=", "self", ".", "patch_to_embedding", "(", "forward_seq", ")", "\n", "# print(x.shape)", "\n", "b", ",", "n", ",", "_", "=", "x", ".", "shape", "\n", "\n", "cls_tokens", "=", "repeat", "(", "self", ".", "cls_token", ",", "'() n d -> b n d'", ",", "b", "=", "b", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "# x += self.pos_embedding[:, :(n + 1)]", "\n", "# x = self.dropout(x)", "\n", "x", "=", "self", ".", "transformer", "(", "x", ")", "\n", "c_t", "=", "self", ".", "to_cls_token", "(", "x", "[", ":", ",", "0", "]", ")", "\n", "\n", "return", "c_t", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.Residual.__init__": [[9, 12], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.Residual.forward": [[13, 15], ["Transformer_model.Residual.fn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "x", ",", "**", "kwargs", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.PreNorm.__init__": [[18, 22], ["torch.nn.Module.__init__", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "fn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.PreNorm.forward": [[23, 25], ["Transformer_model.PreNorm.fn", "Transformer_model.PreNorm.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "self", ".", "norm", "(", "x", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.FeedForward.__init__": [[28, 36], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.GELU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "hidden_dim", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.FeedForward.forward": [[38, 40], ["Transformer_model.FeedForward.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.Attention.__init__": [[43, 52], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "heads", "=", "8", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "scale", "=", "dim", "**", "-", "0.5", "\n", "\n", "self", ".", "to_qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "to_out", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.Attention.forward": [[53, 72], ["Transformer_model.Attention.to_qkv().chunk", "map", "dots.softmax", "torch.einsum", "einops.rearrange", "Transformer_model.Attention.to_out", "torch.einsum", "F.pad", "dots.masked_fill_", "Transformer_model.Attention.to_qkv", "einops.rearrange", "F.pad.flatten", "float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "b", ",", "n", ",", "_", ",", "h", "=", "*", "x", ".", "shape", ",", "self", ".", "heads", "\n", "qkv", "=", "self", ".", "to_qkv", "(", "x", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "q", ",", "k", ",", "v", "=", "map", "(", "lambda", "t", ":", "rearrange", "(", "t", ",", "'b n (h d) -> b h n d'", ",", "h", "=", "h", ")", ",", "qkv", ")", "\n", "\n", "dots", "=", "torch", ".", "einsum", "(", "'bhid,bhjd->bhij'", ",", "q", ",", "k", ")", "*", "self", ".", "scale", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "F", ".", "pad", "(", "mask", ".", "flatten", "(", "1", ")", ",", "(", "1", ",", "0", ")", ",", "value", "=", "True", ")", "\n", "assert", "mask", ".", "shape", "[", "-", "1", "]", "==", "dots", ".", "shape", "[", "-", "1", "]", ",", "'mask has incorrect dimensions'", "\n", "mask", "=", "mask", "[", ":", ",", "None", ",", ":", "]", "*", "mask", "[", ":", ",", ":", ",", "None", "]", "\n", "dots", ".", "masked_fill_", "(", "~", "mask", ",", "float", "(", "'-inf'", ")", ")", "\n", "del", "mask", "\n", "", "attn", "=", "dots", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "out", "=", "torch", ".", "einsum", "(", "'bhij,bhjd->bhid'", ",", "attn", ",", "v", ")", "\n", "out", "=", "rearrange", "(", "out", ",", "'b h n d -> b n (h d)'", ")", "\n", "out", "=", "self", ".", "to_out", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.Transformer.__init__": [[75, 82], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "range", "Transformer_model.Transformer.layers.append", "torch.nn.ModuleList", "Transformer_model.Residual", "Transformer_model.Residual", "Transformer_model.PreNorm", "Transformer_model.PreNorm", "Transformer_model.Attention", "Transformer_model.FeedForward"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "depth", ",", "heads", ",", "mlp_dim", ",", "dropout", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "for", "_", "in", "range", "(", "depth", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "[", "\n", "Residual", "(", "PreNorm", "(", "dim", ",", "Attention", "(", "dim", ",", "heads", "=", "heads", ",", "dropout", "=", "dropout", ")", ")", ")", ",", "\n", "Residual", "(", "PreNorm", "(", "dim", ",", "FeedForward", "(", "dim", ",", "mlp_dim", ",", "dropout", "=", "dropout", ")", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.Transformer.forward": [[84, 89], ["attn", "ff"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "for", "attn", ",", "ff", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "attn", "(", "x", ",", "mask", "=", "mask", ")", "\n", "x", "=", "ff", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.SeT.__init__": [[92, 118], ["torch.nn.Module.__init__", "torch.nn.Dropout", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Parameter", "Transformer_model.Transformer", "torch.nn.Identity", "torch.nn.CrossEntropyLoss", "torch.nn.Linear", "torch.nn.Linear", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", ",", "seq_length", ",", "patch_length", ",", "num_classes", ",", "dim", ",", "depth", ",", "heads", ",", "mlp_dim", ",", "channels", "=", "1", ",", "dropout", "=", "0.", ",", "\n", "emb_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "seq_length", "%", "patch_length", "==", "0", ",", "'image dimensions must be divisible by the patch size'", "\n", "num_patches", "=", "(", "seq_length", "//", "patch_length", ")", "# ** 2", "\n", "patch_dim", "=", "channels", "*", "patch_length", "# ** 2", "\n", "\n", "self", ".", "seq_length", "=", "seq_length", "\n", "self", ".", "patch_length", "=", "patch_length", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "hidden_dim", "=", "mlp_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "emb_dropout", ")", "\n", "self", ".", "in_channels", "=", "channels", "\n", "\n", "self", ".", "pos_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "num_patches", "+", "1", ",", "dim", ")", ")", "\n", "self", ".", "patch_to_embedding", "=", "nn", ".", "Linear", "(", "patch_dim", ",", "dim", ")", "# ADD CNN", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "1", ",", "1", ",", "dim", ")", ")", "\n", "\n", "self", ".", "transformer", "=", "Transformer", "(", "dim", ",", "depth", ",", "heads", ",", "mlp_dim", ",", "dropout", ")", "\n", "self", ".", "to_cls_token", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "self", ".", "Classifier", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "pred_patch", "=", "nn", ".", "Linear", "(", "64", ",", "self", ".", "patch_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.SeT.forward": [[119, 137], ["einops.rearrange", "Transformer_model.SeT.patch_to_embedding", "einops.repeat", "torch.cat", "Transformer_model.SeT.dropout", "Transformer_model.SeT.transformer", "Transformer_model.SeT.to_cls_token", "Transformer_model.SeT.Classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence", ",", "mask", "=", "None", ")", ":", "\n", "        ", "p", "=", "self", ".", "patch_length", "\n", "x", "=", "rearrange", "(", "sequence", ",", "'b  (h p1) c -> b (h) (p1 c)'", ",", "p1", "=", "p", ")", "\n", "\n", "# x = sequence.view(sequence.shape[0], -1, p)  # rearrange(sequence, 'b c (h p1) (w p2) -> b (h w) (p1 p2 c)', p1 = p, p2 = p)", "\n", "x", "=", "self", ".", "patch_to_embedding", "(", "x", ")", "\n", "b", ",", "n", ",", "_", "=", "x", ".", "shape", "\n", "\n", "cls_tokens", "=", "repeat", "(", "self", ".", "cls_token", ",", "'() n d -> b n d'", ",", "b", "=", "b", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "x", "+=", "self", ".", "pos_embedding", "[", ":", ",", ":", "(", "n", "+", "1", ")", "]", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "transformer", "(", "x", ",", "mask", ")", "\n", "\n", "features", "=", "self", ".", "to_cls_token", "(", "x", "[", ":", ",", "0", "]", ")", "\n", "predictions", "=", "self", ".", "Classifier", "(", "features", ")", "\n", "return", "predictions", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.Discriminator.__init__": [[140, 153], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "input_dims", "=", "128", ",", "hidden_dims", "=", "20", ",", "output_dims", "=", "1", ")", ":", "\n", "        ", "\"\"\"Init discriminator.\"\"\"", "\n", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "restored", "=", "False", "\n", "\n", "self", ".", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_dims", ",", "hidden_dims", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dims", ",", "hidden_dims", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dims", ",", "output_dims", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.Discriminator.forward": [[154, 158], ["Transformer_model.Discriminator.layer", "input.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"Forward the discriminator.\"\"\"", "\n", "out", "=", "self", ".", "layer", "(", "input", ".", "squeeze", "(", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.ReverseLayerF.forward": [[160, 164], ["x.view_as"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "alpha", ")", ":", "\n", "        ", "ctx", ".", "alpha", "=", "alpha", "\n", "return", "x", ".", "view_as", "(", "x", ")", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.ReverseLayerF.backward": [[164, 168], ["grad_output.neg"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "output", "=", "grad_output", ".", "neg", "(", ")", "*", "ctx", ".", "alpha", "\n", "return", "output", ",", "None", "", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.trainer.Trainer": [[21, 62], ["logger.debug", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.CrossEntropyLoss", "range", "os.makedirs", "torch.save", "torch.save", "torch.save", "logger.debug", "trainer.model_train", "trainer.model_evaluate", "logger.debug", "os.path.join", "model.state_dict", "os.path.join", "logger.debug", "trainer.model_evaluate", "logger.debug", "torch.optim.lr_scheduler.StepLR.step"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_train", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate"], ["def", "Trainer", "(", "model", ",", "optimizer", ",", "train_dl", ",", "valid_dl", ",", "test_dl", ",", "device", ",", "logger", ",", "config", ",", "experiment_log_dir", ",", "src_id", ")", ":", "\n", "# Start training", "\n", "    ", "logger", ".", "debug", "(", "\"Training started ....\"", ")", "\n", "best_acc", "=", "0", "\n", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "gamma", "=", "0.5", ",", "step_size", "=", "5", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "config", ".", "num_epoch", "+", "1", ")", ":", "\n", "# Train and validate", "\n", "        ", "train_loss", ",", "train_acc", "=", "model_train", "(", "model", ",", "optimizer", ",", "criterion", ",", "train_dl", ",", "config", ",", "device", ")", "\n", "valid_loss", ",", "valid_acc", ",", "_", ",", "_", "=", "model_evaluate", "(", "model", ",", "valid_dl", ",", "config", ",", "device", ")", "\n", "if", "config", ".", "training_mode", "==", "'fine_tune'", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", ")", "\n", "", "logger", ".", "debug", "(", "f'\\nEpoch : {epoch}\\n'", "\n", "f'Train Loss     : {train_loss:.4f}\\t | \\tTrain Accuracy     : {train_acc:2.4f}\\n'", "\n", "f'Valid Loss     : {valid_loss:.4f}\\t | \\tValid Accuracy     : {valid_acc:2.4f}'", ")", "\n", "\n", "# if valid_acc > best_acc:", "\n", "#     best_acc = valid_acc", "\n", "#     chkpoint = {", "\n", "#         'epoch': epoch,", "\n", "#         'validation_acc': valid_loss,", "\n", "#         'model_state_dict': model.state_dict(),", "\n", "#         'validation_loss': valid_loss}", "\n", "#", "\n", "#     os.makedirs(os.path.join(experiment_log_dir, \"saved_models\"), exist_ok=True)", "\n", "#     torch.save(chkpoint, os.path.join(experiment_log_dir, \"saved_models\", f'ckp_best.pt'))", "\n", "\n", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "experiment_log_dir", ",", "\"saved_models\"", ")", ",", "exist_ok", "=", "True", ")", "\n", "chkpoint", "=", "{", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "chkpoint", ",", "os", ".", "path", ".", "join", "(", "\"saved_models\"", ",", "f'last_{args.selected_dataset}_CNN_AR_src_{src_id}_.pt'", ")", ")", "\n", "if", "config", ".", "training_mode", "!=", "\"self_supervised\"", ":", "\n", "# evaluate on the test set", "\n", "        ", "logger", ".", "debug", "(", "'\\nEvaluate on the Test set:'", ")", "\n", "test_loss", ",", "test_acc", ",", "_", ",", "_", "=", "model_evaluate", "(", "model", ",", "test_dl", ",", "config", ",", "device", ")", "\n", "logger", ".", "debug", "(", "f'Test loss      :{test_loss:0.4f}\\t | Test Accuracy      : {test_acc:0.4f}'", ")", "\n", "\n", "", "logger", ".", "debug", "(", "\"\\n################## Training is Done! #########################\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.trainer.model_train": [[64, 97], ["model.train", "enumerate", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "optimizer.zero_grad", "model", "torch.tensor().mean.append", "criterion.backward", "optimizer.step", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "data.float().to", "target.long().to", "criterion", "torch.tensor().mean.append", "criterion.item", "torch.tensor", "torch.tensor", "torch.tensor", "target.eq().float().mean", "torch.tensor", "torch.tensor", "torch.tensor", "data.float", "target.long", "target.eq().float", "target.eq", "predictions.detach().argmax", "predictions.detach"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.ReverseLayerF.backward"], ["", "def", "model_train", "(", "model", ",", "optimizer", ",", "criterion", ",", "train_loader", ",", "config", ",", "device", ")", ":", "\n", "    ", "total_loss", "=", "[", "]", "\n", "total_acc", "=", "[", "]", "\n", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# optimizer", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "\n", "data", ",", "target", "=", "data", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "target", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "# compute loss", "\n", "if", "config", ".", "training_mode", "==", "\"self_supervised\"", ":", "\n", "            ", "loss", "=", "output", "\n", "", "else", ":", "\n", "            ", "predictions", ",", "features", "=", "output", "\n", "loss", "=", "criterion", "(", "predictions", ",", "target", ")", "\n", "\n", "total_acc", ".", "append", "(", "target", ".", "eq", "(", "predictions", ".", "detach", "(", ")", ".", "argmax", "(", "dim", "=", "1", ")", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "\n", "", "total_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "total_loss", "=", "torch", ".", "tensor", "(", "total_loss", ")", ".", "mean", "(", ")", "\n", "\n", "if", "config", ".", "training_mode", "==", "\"self_supervised\"", ":", "\n", "        ", "total_acc", "=", "0", "\n", "", "else", ":", "\n", "        ", "total_acc", "=", "torch", ".", "tensor", "(", "total_acc", ")", ".", "mean", "(", ")", "\n", "", "return", "total_loss", ",", "total_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.trainer.model_evaluate": [[99, 137], ["model.eval", "torch.CrossEntropyLoss", "numpy.array", "numpy.array", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "model", "torch.tensor().mean.append", "torch.tensor", "torch.tensor", "torch.tensor", "data.float().to", "target.long().to", "nn.CrossEntropyLoss.", "torch.tensor().mean.append", "criterion.item", "numpy.append", "numpy.append", "torch.tensor", "torch.tensor", "torch.tensor", "target.eq().float().mean", "predictions.max", "pred.cpu().numpy", "target.data.cpu().numpy", "data.float", "target.long", "target.eq().float", "pred.cpu", "target.data.cpu", "target.eq", "predictions.detach().argmax", "predictions.detach"], "function", ["None"], ["", "def", "model_evaluate", "(", "model", ",", "test_dl", ",", "config", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "[", "]", "\n", "total_acc", "=", "[", "]", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "outs", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "trgs", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_dl", ":", "\n", "\n", "            ", "data", ",", "target", "=", "data", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "target", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "# compute loss", "\n", "if", "config", ".", "training_mode", "==", "\"self_supervised\"", ":", "\n", "                ", "loss", "=", "output", "\n", "\n", "", "else", ":", "\n", "                ", "predictions", ",", "features", "=", "output", "\n", "loss", "=", "criterion", "(", "predictions", ",", "target", ")", "\n", "total_acc", ".", "append", "(", "target", ".", "eq", "(", "predictions", ".", "detach", "(", ")", ".", "argmax", "(", "dim", "=", "1", ")", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "\n", "", "total_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "if", "config", ".", "training_mode", "!=", "\"self_supervised\"", ":", "\n", "                ", "pred", "=", "predictions", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "outs", "=", "np", ".", "append", "(", "outs", ",", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "trgs", "=", "np", ".", "append", "(", "trgs", ",", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "", "total_loss", "=", "torch", ".", "tensor", "(", "total_loss", ")", ".", "mean", "(", ")", "# average loss", "\n", "if", "config", ".", "training_mode", "==", "\"self_supervised\"", ":", "\n", "        ", "total_acc", "=", "0", "\n", "return", "total_loss", ",", "total_acc", ",", "[", "]", ",", "[", "]", "\n", "", "else", ":", "\n", "        ", "total_acc", "=", "torch", ".", "tensor", "(", "total_acc", ")", ".", "mean", "(", ")", "# average acc", "\n", "", "return", "total_loss", ",", "total_acc", ",", "outs", ",", "trgs", "\n", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.source_only.Trainer": [[20, 75], ["logger.debug", "torch.optim.Adam", "torch.optim.Adam", "torch.CrossEntropyLoss", "range", "logger.debug", "trainer.training_evaluation.model_evaluate", "logger.debug", "logger.debug", "model.parameters", "torch.utils.tensorboard.SummaryWriter", "trainer.training_evaluation.model_train", "trainer.training_evaluation.model_evaluate", "logger.debug", "torch.save", "torch.save", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "os.path.exists", "os.mkdir", "model.state_dict", "model.state_dict", "torch.save", "torch.save", "os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_train", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate"], ["def", "Trainer", "(", "model", ",", "train_dl", ",", "valid_dl", ",", "test_dl", ",", "src_id", ",", "device", ",", "logger", ")", ":", "\n", "## Start training", "\n", "    ", "logger", ".", "debug", "(", "\"Pretraining_step....\"", ")", "\n", "best_acc", "=", "0", "\n", "best_epoch", "=", "-", "1", "\n", "chk_path", "=", "f'./src_only_saved_models/{args.selected_dataset}/'", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "Supervised", ".", "lr", ",", "betas", "=", "(", "config", ".", "Supervised", ".", "beta1", ",", "config", ".", "Supervised", ".", "beta2", ")", ")", "\n", "# lr_scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, verbose=True,patience=config.plat_patience)", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "args", ".", "tensorboard", ":", "\n", "        ", "comment", "=", "(", "f'./visualize/{src_id}'", ")", "\n", "tb", "=", "SummaryWriter", "(", "comment", ")", "\n", "", "for", "epoch", "in", "range", "(", "1", ",", "config", ".", "Supervised", ".", "num_epoch", "+", "1", ")", ":", "\n", "# Train and validate", "\n", "        ", "train_loss", ",", "train_acc", "=", "model_train", "(", "model", ",", "optimizer", ",", "criterion", ",", "train_dl", ",", "device", ")", "\n", "valid_loss", ",", "valid_acc", ",", "_", ",", "_", "=", "model_evaluate", "(", "model", ",", "valid_dl", ",", "device", ")", "\n", "\n", "logger", ".", "debug", "(", "f'\\nEpoch : {epoch}\\n'", "\n", "f'Train Loss     : {train_loss:.2f}\\t | \\tTrain Accuracy     : {train_acc:2.2f}\\n'", "\n", "f'Valid Loss     : {valid_loss:.2f}\\t | \\tValid Accuracy     : {valid_acc:2.2f}'", ")", "\n", "if", "args", ".", "tensorboard", ":", "\n", "            ", "tb", ".", "add_scalar", "(", "'Train_loss'", ",", "train_loss", ",", "epoch", ")", "\n", "tb", ".", "add_scalar", "(", "f'Train_accuracy'", ",", "train_acc", ",", "epoch", ")", "\n", "tb", ".", "add_scalar", "(", "f'Val_loss'", ",", "valid_loss", ",", "epoch", ")", "\n", "tb", ".", "add_scalar", "(", "f'Val_accuracy'", ",", "valid_acc", ",", "epoch", ")", "\n", "\n", "if", "valid_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "valid_acc", "\n", "chkpoint", "=", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'validation_acc'", ":", "valid_loss", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'validation_loss'", ":", "valid_loss", "}", "\n", "if", "config", ".", "Supervised", ".", "save_ckp", ":", "\n", "                    ", "if", "not", "os", ".", "path", ".", "exists", "(", "chk_path", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "chk_path", ")", "\n", "", "torch", ".", "save", "(", "chkpoint", ",", "\n", "f'./src_only_saved_models/{args.selected_dataset}/best_{args.selected_dataset}_{args.base_model}_src_{src_id}.pt'", ")", "\n", "", "best_epoch", "=", "epoch", "+", "1", "\n", "", "elif", "epoch", "-", "best_epoch", ">", "2", ":", "\n", "                ", "best_epoch", "=", "epoch", "+", "1", "\n", "", "", "", "if", "config", ".", "Supervised", ".", "save_ckp", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "chk_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "chk_path", ")", "\n", "", "chkpoint", "=", "{", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "chkpoint", ",", "\n", "f'./src_only_saved_models/{args.selected_dataset}/last_{args.selected_dataset}_{args.base_model}_src_{src_id}.pt'", ")", "\n", "# evaluate on the test set", "\n", "", "logger", ".", "debug", "(", "'\\nEvaluate on the Test set:'", ")", "\n", "test_loss", ",", "test_acc", ",", "_", ",", "_", "=", "model_evaluate", "(", "model", ",", "test_dl", ",", "device", ")", "\n", "logger", ".", "debug", "(", "f'Test_loss: {test_loss:0.2f} || Test_acc: {test_acc:0.2f}'", ")", "\n", "\n", "logger", ".", "debug", "(", "\"\\n################## Finished Pretraining #########################\"", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.source_only.Mixup_Trainer": [[78, 133], ["logger.debug", "torch.CrossEntropyLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "logger.debug", "trainer.training_evaluation.so_model_evaluate_mixup", "logger.debug", "logger.debug", "netF.parameters", "netC.parameters", "torch.utils.tensorboard.SummaryWriter", "trainer.training_evaluation.train_source_only_mixup", "trainer.training_evaluation.so_model_evaluate_mixup", "logger.debug", "torch.save", "torch.save", "torch.save", "torch.save", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "os.path.exists", "os.mkdir", "netF.state_dict", "netC.state_dict", "netF.state_dict", "netC.state_dict", "torch.save", "torch.save", "os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.so_model_evaluate_mixup", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.train_source_only_mixup", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.so_model_evaluate_mixup"], ["", "def", "Mixup_Trainer", "(", "netF", ",", "netC", ",", "train_dl", ",", "valid_dl", ",", "test_dl", ",", "src_id", ",", "device", ",", "logger", ")", ":", "\n", "## Start training", "\n", "    ", "logger", ".", "debug", "(", "\"Pretraining_step....\"", ")", "\n", "best_acc", "=", "0", "\n", "best_epoch", "=", "-", "1", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizerF", "=", "torch", ".", "optim", ".", "Adam", "(", "netF", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "lr", ",", "betas", "=", "(", "config", ".", "beta1", ",", "config", ".", "beta2", ")", ")", "\n", "optimizerC", "=", "torch", ".", "optim", ".", "Adam", "(", "netC", ".", "parameters", "(", ")", ",", "lr", "=", "config", ".", "lr", ",", "betas", "=", "(", "config", ".", "beta1", ",", "config", ".", "beta2", ")", ")", "\n", "if", "args", ".", "tensorboard", ":", "\n", "        ", "comment", "=", "(", "f'./visualize/{src_id}'", ")", "\n", "tb", "=", "SummaryWriter", "(", "comment", ")", "\n", "", "for", "epoch", "in", "range", "(", "1", ",", "config", ".", "num_epoch", "+", "1", ")", ":", "\n", "# Train and validate", "\n", "        ", "train_loss", ",", "train_acc", "=", "train_source_only_mixup", "(", "netF", ",", "netC", ",", "optimizerF", ",", "optimizerC", ",", "criterion", ",", "train_dl", ",", "device", ")", "\n", "valid_loss", ",", "valid_acc", "=", "so_model_evaluate_mixup", "(", "netF", ",", "netC", ",", "valid_dl", ",", "device", ")", "\n", "\n", "logger", ".", "debug", "(", "f'\\nEpoch : {epoch}\\n'", "\n", "f'Train Loss     : {train_loss:.2f}\\t | \\tTrain Accuracy     : {train_acc:2.2f}\\n'", "\n", "f'Valid Loss     : {valid_loss:.2f}\\t | \\tValid Accuracy     : {valid_acc:2.2f}'", ")", "\n", "if", "args", ".", "tensorboard", ":", "\n", "            ", "tb", ".", "add_scalar", "(", "'Train_loss'", ",", "train_loss", ",", "epoch", ")", "\n", "tb", ".", "add_scalar", "(", "f'Train_accuracy'", ",", "train_acc", ",", "epoch", ")", "\n", "tb", ".", "add_scalar", "(", "f'Val_loss'", ",", "valid_loss", ",", "epoch", ")", "\n", "tb", ".", "add_scalar", "(", "f'Val_accuracy'", ",", "valid_acc", ",", "epoch", ")", "\n", "\n", "if", "valid_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "valid_acc", "\n", "chkpoint", "=", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'validation_acc'", ":", "valid_loss", ",", "\n", "'model_F_state_dict1'", ":", "netF", ".", "state_dict", "(", ")", ",", "\n", "'model_C_state_dict1'", ":", "netC", ".", "state_dict", "(", ")", ",", "\n", "'validation_loss'", ":", "valid_loss", "}", "\n", "if", "config", ".", "save_ckp", ":", "\n", "                    ", "if", "not", "os", ".", "path", ".", "exists", "(", "f'./src_only_saved_models/{args.selected_dataset}/'", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "f'./src_only_saved_models/{args.selected_dataset}/'", ")", "\n", "", "torch", ".", "save", "(", "chkpoint", ",", "\n", "f'./src_only_saved_models/{args.selected_dataset}/best_{args.selected_dataset}_src_{src_id}.pt'", ")", "\n", "", "best_epoch", "=", "epoch", "+", "1", "\n", "", "elif", "epoch", "-", "best_epoch", ">", "2", ":", "\n", "                ", "best_epoch", "=", "epoch", "+", "1", "\n", "", "", "", "if", "config", ".", "save_ckp", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "f'./src_only_saved_models/{args.selected_dataset}'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "f'./src_only_saved_models/{args.selected_dataset}'", ")", "\n", "", "torch", ".", "save", "(", "netF", ".", "state_dict", "(", ")", ",", "\n", "f'./src_only_saved_models/{args.selected_dataset}/last_{args.selected_dataset}_netF_src_{src_id}.pt'", ")", "\n", "torch", ".", "save", "(", "netC", ".", "state_dict", "(", ")", ",", "\n", "f'./src_only_saved_models/{args.selected_dataset}/last_{args.selected_dataset}_netC_src_{src_id}.pt'", ")", "\n", "# evaluate on the test set", "\n", "", "logger", ".", "debug", "(", "'\\nEvaluate on the Test set:'", ")", "\n", "test_loss", ",", "test_acc", "=", "so_model_evaluate_mixup", "(", "netF", ",", "netC", ",", "test_dl", ",", "device", ")", "\n", "logger", ".", "debug", "(", "f'Test_loss: {test_loss:0.2f} || Test_acc: {test_acc:0.2f}'", ")", "\n", "\n", "logger", ".", "debug", "(", "\"\\n################## Finished Pretraining #########################\"", ")", "\n", "return", "netF", ",", "netC", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.SLARDA.cross_domain_train": [[16, 220], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "base_model().float().to", "base_model().float().to", "base_model().float().to", "logger.debug", "logger.debug", "os.path.exists", "base_model().float().to.load_state_dict", "base_model().float().to.load_state_dict", "base_model().float().to.load_state_dict", "utils.set_requires_grad", "utils.set_requires_grad", "torch.CrossEntropyLoss", "torch.BCEWithLogitsLoss", "torch.Softmax", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "range", "models.models.Discriminator_ATT().float().to", "models.models.Discriminator_AR().float().to", "torch.utils.tensorboard.SummaryWriter", "trainer.source_only.Trainer", "base_model().float().to.parameters", "Discriminator_AR().float().to.parameters", "enumerate", "base_model().float().to.train", "Discriminator_AR().float().to.train", "torch.optim.lr_scheduler.StepLR.step", "logger.debug", "logger.debug", "logger.debug", "logger.debug", "logger.debug", "base_model().float", "base_model().float", "base_model().float", "torch.load", "torch.load", "torch.load", "torch.load", "zip", "torch.optim.Adam.zero_grad", "base_model().float().to.", "base_model().float().to.", "torch.cat", "torch.cat", "Discriminator_AR().float().to.", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.cat", "torch.cat", "nn.BCEWithLogitsLoss.", "criterion_disc.backward", "torch.optim.Adam.step", "torch.squeeze", "torch.squeeze", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "pred.eq().cpu().sum", "Discriminator_AR().float().to.", "torch.ones().to", "torch.ones().to", "nn.BCEWithLogitsLoss.", "[].squeeze", "torch.cat", "torch.cat", "nn.CrossEntropyLoss.", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "total_loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "zip", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "wandb.log", "trainer.training_evaluation.model_evaluate", "trainer.training_evaluation.model_evaluate", "logger.debug", "models.models.Discriminator_ATT().float", "models.models.Discriminator_AR().float", "utils.count_parameters", "source_data.float().to", "source_labels.to", "target_data.float().to", "target_labels.to", "torch.cat.detach", "feature_discriminator.squeeze", "torch.cat.float", "source_pred.data.max", "feature_discriminator.squeeze", "torch.ones().to.float", "torch.no_grad", "torch.no_grad", "base_model().float().to.", "nn.Softmax.", "[].squeeze", "torch.cat.size", "torch.cat.size", "target_data.size", "confident_pred.size", "base_model().float().to.parameters", "base_model().float().to.parameters", "mean_param.data.mul_().add_", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "wandb.log", "wandb.log", "base_model", "base_model", "base_model", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "feature_discriminator.max", "pred.eq().cpu", "torch.ones", "torch.ones", "models.models.Discriminator_ATT", "models.models.Discriminator_AR", "source_data.float", "target_data.float", "source_feat.size", "target_feat.size", "target_feat.size", "softmax.max", "mean_param.data.mul_", "pred.eq", "softmax.max", "source_labels.data.view_as"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.set_requires_grad", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.set_requires_grad", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.source_only.Trainer", "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.ReverseLayerF.backward", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.update", "home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.ReverseLayerF.backward", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.count_parameters"], ["def", "cross_domain_train", "(", "src_train_dl", ",", "src_valid_dl", ",", "src_test_dl", ",", "\n", "tgt_train_dl", ",", "tgt_valid_dl", ",", "base_model", ",", "\n", "src_id", ",", "tgt_id", ",", "\n", "device", ",", "logger", ",", "configs", ")", ":", "\n", "\n", "    ", "model_configs", "=", "configs", ".", "base_model", "\n", "\n", "# Average meters", "\n", "discriminator_accuracies", "=", "AverageMeter", "(", ")", "\n", "discriminator_losses", "=", "AverageMeter", "(", ")", "\n", "target_model_losses", "=", "AverageMeter", "(", ")", "\n", "contrastive_losses", "=", "AverageMeter", "(", ")", "\n", "tgt_cls_losses", "=", "AverageMeter", "(", ")", "\n", "# source model network.", "\n", "source_model", "=", "base_model", "(", "model_configs", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "target_model", "=", "base_model", "(", "model_configs", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "teacher_model", "=", "base_model", "(", "model_configs", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "configs", ".", "SLARDA", ".", "AR", "==", "'ATT'", ":", "\n", "        ", "feature_discriminator", "=", "Discriminator_ATT", "(", "configs", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "feature_discriminator", "=", "Discriminator_AR", "(", "configs", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Logging", "\n", "", "logger", ".", "debug", "(", "f'The model has {count_parameters(source_model):,} trainable parameters'", ")", "\n", "logger", ".", "debug", "(", "'='", "*", "45", ")", "\n", "if", "args", ".", "tensorboard", ":", "\n", "        ", "comment", "=", "(", "f'../visualize/{src_id} to {tgt_id}_{args.selected_dataset}'", ")", "\n", "tb", "=", "SummaryWriter", "(", "comment", ")", "\n", "\n", "# check if source only model exists, else train it ...", "\n", "", "ckp_path", "=", "f'./src_only_saved_models/{args.selected_dataset}/last_{args.selected_dataset}_{args.base_model}_src_{src_id}.pt'", "\n", "if", "os", ".", "path", ".", "exists", "(", "ckp_path", ")", ":", "\n", "        ", "src_chkpoint", "=", "torch", ".", "load", "(", "ckp_path", ")", "[", "'model_state_dict'", "]", "\n", "", "else", ":", "\n", "        ", "Trainer", "(", "source_model", ",", "src_train_dl", ",", "src_valid_dl", ",", "src_test_dl", ",", "src_id", ",", "device", ",", "logger", ")", "\n", "src_chkpoint", "=", "torch", ".", "load", "(", "ckp_path", ")", "[", "'model_state_dict'", "]", "\n", "\n", "# Load trained mode;", "\n", "", "source_model", ".", "load_state_dict", "(", "src_chkpoint", ")", "\n", "target_model", ".", "load_state_dict", "(", "src_chkpoint", ")", "\n", "teacher_model", ".", "load_state_dict", "(", "src_chkpoint", ")", "\n", "\n", "# Freeze the source domain model", "\n", "set_requires_grad", "(", "source_model", ",", "requires_grad", "=", "False", ")", "\n", "set_requires_grad", "(", "teacher_model", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# loss functions", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "criterion_disc", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "\n", "# losses wt", "\n", "loss_tgt_wt", "=", "configs", ".", "SLARDA", ".", "teacher_wt", "\n", "step_size", "=", "configs", ".", "SLARDA", ".", "step_size", "\n", "gamma", "=", "configs", ".", "SLARDA", ".", "gamma", "\n", "confidence_level", "=", "configs", ".", "SLARDA", ".", "confidence_level", "\n", "momentum_update", "=", "configs", ".", "SLARDA", ".", "momentum_wt", "\n", "\n", "\n", "# optimizer.", "\n", "optimizer_encoder", "=", "torch", ".", "optim", ".", "Adam", "(", "target_model", ".", "parameters", "(", ")", ",", "lr", "=", "configs", ".", "SLARDA", ".", "lr", ",", "\n", "betas", "=", "(", "configs", ".", "SLARDA", ".", "beta1", ",", "configs", ".", "SLARDA", ".", "beta2", ")", ",", "weight_decay", "=", "3e-4", ")", "\n", "optimizer_disc", "=", "torch", ".", "optim", ".", "Adam", "(", "feature_discriminator", ".", "parameters", "(", ")", ",", "lr", "=", "configs", ".", "SLARDA", ".", "lr_disc", ",", "\n", "betas", "=", "(", "configs", ".", "SLARDA", ".", "beta1", ",", "configs", ".", "SLARDA", ".", "beta2", ")", ",", "weight_decay", "=", "3e-4", ")", "\n", "\n", "scheduler_encoder", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer_encoder", ",", "step_size", "=", "step_size", ",", "gamma", "=", "gamma", ")", "\n", "\n", "# training..", "\n", "for", "epoch", "in", "range", "(", "1", ",", "configs", ".", "num_epoch", "+", "1", ")", ":", "\n", "        ", "joint_loaders", "=", "enumerate", "(", "zip", "(", "src_train_dl", ",", "tgt_train_dl", ")", ")", "\n", "target_model", ".", "train", "(", ")", "\n", "feature_discriminator", ".", "train", "(", ")", "\n", "n_correct", "=", "0", "\n", "\n", "for", "step", ",", "(", "(", "source_data", ",", "source_labels", ")", ",", "(", "target_data", ",", "target_labels", ")", ")", "in", "joint_loaders", ":", "\n", "            ", "source_data", ",", "source_labels", ",", "target_data", ",", "target_labels", "=", "source_data", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "source_labels", ".", "to", "(", "\n", "device", ")", ",", "target_data", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "target_labels", ".", "to", "(", "device", ")", "\n", "\n", "###########################", "\n", "# train discriminator #", "\n", "###########################", "\n", "\n", "# zero gradient for the dicriminator", "\n", "optimizer_disc", ".", "zero_grad", "(", ")", "\n", "\n", "# pass data  through the model network.", "\n", "source_pred", ",", "(", "source_latent", ",", "source_feat", ")", "=", "source_model", "(", "source_data", ")", "\n", "\n", "# pass images through the target model network.", "\n", "pred_target", ",", "(", "target_latent", ",", "target_feat", ")", "=", "target_model", "(", "target_data", ")", "\n", "\n", "# concatenate source and target features", "\n", "\n", "\n", "feat_concat", "=", "torch", ".", "cat", "(", "(", "source_feat", ",", "target_feat", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# predict the domain label by the discirminator network", "\n", "pred_concat", "=", "feature_discriminator", "(", "feat_concat", ".", "detach", "(", ")", ")", "\n", "\n", "# prepare real labels for the training the discriminator", "\n", "label_src", "=", "torch", ".", "ones", "(", "source_feat", ".", "size", "(", "0", ")", ")", ".", "to", "(", "device", ")", "\n", "label_tgt", "=", "torch", ".", "zeros", "(", "target_feat", ".", "size", "(", "0", ")", ")", ".", "to", "(", "device", ")", "\n", "label_concat", "=", "torch", ".", "cat", "(", "(", "label_src", ",", "label_tgt", ")", ",", "0", ")", "\n", "\n", "# Discriminator Loss", "\n", "loss_disc", "=", "criterion_disc", "(", "pred_concat", ".", "squeeze", "(", ")", ",", "label_concat", ".", "float", "(", ")", ")", "\n", "loss_disc", ".", "backward", "(", ")", "\n", "\n", "# Update disciriminator optimizer", "\n", "optimizer_disc", ".", "step", "(", ")", "\n", "# Discriminator accuracy", "\n", "pred_cls", "=", "torch", ".", "squeeze", "(", "pred_concat", ".", "max", "(", "1", ")", "[", "1", "]", ")", "\n", "acc", "=", "(", "pred_cls", "==", "label_concat", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "############################", "\n", "# 2.2 train target encoder #", "\n", "############################", "\n", "optimizer_disc", ".", "zero_grad", "(", ")", "\n", "optimizer_encoder", ".", "zero_grad", "(", ")", "\n", "\n", "# # Extract target domain features", "\n", "\n", "pred", "=", "source_pred", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "n_correct", "+=", "pred", ".", "eq", "(", "source_labels", ".", "data", ".", "view_as", "(", "pred", ")", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "\n", "pred_tgt", "=", "feature_discriminator", "(", "target_feat", ")", "\n", "\n", "# prepare fake labels", "\n", "label_tgt", "=", "(", "torch", ".", "ones", "(", "target_feat", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "# compute loss for target encoder", "\n", "loss_tgt", "=", "criterion_disc", "(", "pred_tgt", ".", "squeeze", "(", ")", ",", "label_tgt", ".", "float", "(", ")", ")", "\n", "\n", "# mean teacher model", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "mean_t_pred", ",", "mean_t_output", "=", "teacher_model", "(", "target_data", ")", "\n", "normalized_pred", "=", "softmax", "(", "mean_t_pred", ")", "\n", "pred_prob", "=", "normalized_pred", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "squeeze", "(", ")", "\n", "\n", "", "target_pseudo_labels", "=", "normalized_pred", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", ".", "squeeze", "(", ")", "\n", "confident_feat", "=", "target_latent", "[", "pred_prob", ">", "confidence_level", "]", "\n", "confident_pred", "=", "pred_target", "[", "pred_prob", ">", "confidence_level", "]", "\n", "confident_labels", "=", "target_pseudo_labels", "[", "pred_prob", ">", "confidence_level", "]", "\n", "\n", "# target_pseudo_labels = pred_target.max(1, keepdim=True)[1].squeeze()", "\n", "feat_concat", "=", "torch", ".", "cat", "(", "(", "source_latent", ",", "confident_feat", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# Target Psuedo labeling", "\n", "loss_cls_tgt", "=", "criterion", "(", "confident_pred", ",", "confident_labels", ")", "\n", "\n", "\n", "total_loss", "=", "loss_tgt", "+", "loss_tgt_wt", "*", "loss_cls_tgt", "\n", "\n", "# Average updates", "\n", "discriminator_accuracies", ".", "update", "(", "acc", ",", "feat_concat", ".", "size", "(", "0", ")", ")", "\n", "discriminator_losses", ".", "update", "(", "loss_disc", ",", "feat_concat", ".", "size", "(", "0", ")", ")", "\n", "target_model_losses", ".", "update", "(", "loss_tgt", ",", "target_data", ".", "size", "(", "0", ")", ")", "\n", "tgt_cls_losses", ".", "update", "(", "loss_cls_tgt", ",", "confident_pred", ".", "size", "(", "0", ")", ")", "\n", "\n", "# Backpropagate the loss.", "\n", "total_loss", ".", "backward", "(", ")", "\n", "\n", "# optimize target encoder", "\n", "optimizer_encoder", ".", "step", "(", ")", "\n", "optimizer_disc", ".", "step", "(", ")", "\n", "\n", "\n", "alpha", "=", "momentum_update", "\n", "for", "mean_param", ",", "param", "in", "zip", "(", "teacher_model", ".", "parameters", "(", ")", ",", "target_model", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "mean_param", ".", "data", ".", "mul_", "(", "alpha", ")", ".", "add_", "(", "1", "-", "alpha", ",", "param", ".", "data", ")", "\n", "\n", "\n", "", "", "scheduler_encoder", ".", "step", "(", ")", "\n", "\n", "# Logging", "\n", "logger", ".", "debug", "(", "f'\\nEpoch : {epoch}\\n'", ")", "\n", "logger", ".", "debug", "(", "f'\\t Discriminator_acc \\t| {discriminator_accuracies.avg:.4f}\\t     '", ")", "\n", "logger", ".", "debug", "(", "f'\\t Discriminator_loss \\t| {discriminator_losses.avg:.4f}\\t     '", ")", "\n", "logger", ".", "debug", "(", "f'\\t Target_loss \\t      | {target_model_losses.avg:.4f}\\t'", ")", "\n", "logger", ".", "debug", "(", "f'\\t Target_cls_loss \\t      | {tgt_cls_losses.avg:.4f}\\t'", ")", "\n", "\n", "if", "args", ".", "tensorboard", ":", "\n", "            ", "tb", ".", "add_scalar", "(", "'Discriminator_loss'", ",", "discriminator_losses", ".", "avg", ",", "epoch", ")", "\n", "tb", ".", "add_scalar", "(", "'Feature_extractor_loss'", ",", "target_model_losses", ".", "avg", ",", "epoch", ")", "\n", "wandb", ".", "log", "(", "{", "\"Discriminator loss\"", ":", "discriminator_losses", ".", "avg", ",", "\"Feature_extractor loss\"", ":", "target_model_losses", ".", "avg", "}", ",", "step", "=", "epoch", ")", "\n", "\n", "", "if", "epoch", "%", "1", "==", "0", ":", "\n", "            ", "source_loss", ",", "source_score", ",", "_", ",", "_", "=", "model_evaluate", "(", "source_model", ",", "tgt_valid_dl", ",", "device", ")", "\n", "target_loss", ",", "target_score", ",", "_", ",", "_", "=", "model_evaluate", "(", "target_model", ",", "tgt_valid_dl", ",", "device", ")", "\n", "logger", ".", "debug", "(", "f'\\nEpoch : {epoch}\\n'", "\n", "f'Src_only Loss : {source_loss:.4f}\\t | \\tSrc_only Accuracy : {source_score:2.4f}\\n'", "\n", "f'{args.da_method} Loss     : {target_loss:.4f}\\t | \\t{args.da_method} Accuracy     : {target_score:2.4f}'", ")", "\n", "if", "args", ".", "tensorboard", ":", "\n", "                ", "tb", ".", "add_scalar", "(", "'train_loss/Source_only'", ",", "source_loss", ")", "\n", "tb", ".", "add_scalar", "(", "f'train_loss/{args.da_method}'", ",", "target_loss", ")", "\n", "tb", ".", "add_scalar", "(", "'train_accuracy/Source_only'", ",", "source_score", ")", "\n", "tb", ".", "add_scalar", "(", "f'train_accuracy/{args.da_method}'", ",", "target_score", ")", "\n", "wandb", ".", "log", "(", "{", "\"train/Source_only_loss\"", ":", "source_loss", ",", "\"train/Source_only_acc\"", ":", "source_score", "}", ")", "\n", "wandb", ".", "log", "(", "{", "f\"train/{args.da_method}_loss\"", ":", "target_loss", ",", "f\"train/{args.da_method}_acc\"", ":", "target_score", "}", ")", "\n", "\n", "", "", "", "return", "source_model", ",", "target_model", "\n", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_train": [[10, 37], ["model.train", "enumerate", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "data.float().to.float().to", "labels.view().long().to.view().long().to", "optimizer.zero_grad", "model", "criterion", "torch.tensor().mean.append", "criterion.backward", "optimizer.step", "torch.tensor().mean.append", "criterion.item", "labels.view().long().to.eq().float().mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "data.float().to.float", "labels.view().long().to.view().long", "labels.view().long().to.eq().float", "labels.view().long().to.view", "labels.view().long().to.eq", "predictions.detach().argmax", "predictions.detach"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.ReverseLayerF.backward"], ["def", "model_train", "(", "model", ",", "optimizer", ",", "criterion", ",", "train_loader", ",", "device", ")", ":", "\n", "    ", "total_loss", "=", "[", "]", "\n", "total_acc", "=", "[", "]", "\n", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "labels", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# send to device", "\n", "        ", "data", "=", "data", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "view", "(", "(", "-", "1", ")", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# optimizer", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# forward pass", "\n", "predictions", ",", "features", "=", "model", "(", "data", ")", "\n", "\n", "# compute loss", "\n", "loss", "=", "criterion", "(", "predictions", ",", "labels", ")", "\n", "total_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# pred = predictions.max(1, keepdim=True)[1]  # get the index of the max log-probability", "\n", "total_acc", ".", "append", "(", "labels", ".", "eq", "(", "predictions", ".", "detach", "(", ")", ".", "argmax", "(", "dim", "=", "1", ")", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "\n", "\n", "", "total_loss", "=", "torch", ".", "tensor", "(", "total_loss", ")", ".", "mean", "(", ")", "\n", "total_acc", "=", "torch", ".", "tensor", "(", "total_acc", ")", ".", "mean", "(", ")", "\n", "return", "total_loss", ",", "total_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.train_source_only_mixup": [[38, 62], ["netF.train", "netC.train", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "netC.zero_grad", "netF.zero_grad", "netC", "criterion", "torch.tensor().mean.append", "criterion.backward", "optimizerC.step", "optimizerF.step", "total_acc.append", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "inputs.float().to", "labels.long().to", "netF", "criterion.item", "labels.eq().float().mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "inputs.float", "labels.long", "labels.eq().float", "labels.eq", "netC.detach().argmax", "netC.detach"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.models.Transformer_model.ReverseLayerF.backward"], ["", "def", "train_source_only_mixup", "(", "netF", ",", "netC", ",", "optimizerF", ",", "optimizerC", ",", "criterion", ",", "data_loader", ",", "device", ")", ":", "\n", "    ", "total_loss", "=", "[", "]", "\n", "total_acc", "=", "[", "]", "\n", "\n", "netF", ".", "train", "(", ")", "\n", "netC", ".", "train", "(", ")", "\n", "\n", "for", "inputs", ",", "labels", "in", "data_loader", ":", "\n", "        ", "inputs", ",", "labels", "=", "inputs", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "labels", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "netC", ".", "zero_grad", "(", ")", "\n", "netF", ".", "zero_grad", "(", ")", "\n", "outC", "=", "netC", "(", "netF", "(", "inputs", ")", ")", "\n", "loss", "=", "criterion", "(", "outC", ",", "labels", ")", "\n", "total_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizerC", ".", "step", "(", ")", "\n", "optimizerF", ".", "step", "(", ")", "\n", "total_acc", ".", "append", "(", "labels", ".", "eq", "(", "outC", ".", "detach", "(", ")", ".", "argmax", "(", "dim", "=", "1", ")", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "\n", "", "total_loss", "=", "torch", ".", "tensor", "(", "total_loss", ")", ".", "mean", "(", ")", "\n", "total_acc", "=", "torch", ".", "tensor", "(", "total_acc", ")", ".", "mean", "(", ")", "*", "100", "\n", "return", "total_loss", ",", "total_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate": [[64, 96], ["model.eval", "torch.CrossEntropyLoss", "numpy.array", "numpy.array", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "data.float().to.float().to", "labels.view().long().to.view().long().to", "model", "nn.CrossEntropyLoss.", "torch.tensor().mean.append", "torch.tensor().mean.append", "numpy.append", "numpy.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "criterion.item", "predictions.max", "labels.view().long().to.eq().float().mean", "pred.cpu().numpy", "labels.view().long().to.data.cpu().numpy", "data.float().to.float", "labels.view().long().to.view().long", "labels.view().long().to.eq().float", "pred.cpu", "labels.view().long().to.data.cpu", "labels.view().long().to.view", "labels.view().long().to.eq", "predictions.detach().argmax", "predictions.detach"], "function", ["None"], ["", "def", "model_evaluate", "(", "model", ",", "valid_dl", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "[", "]", "\n", "total_acc", "=", "[", "]", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "outs", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "trgs", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "labels", "in", "valid_dl", ":", "\n", "            ", "data", "=", "data", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "view", "(", "(", "-", "1", ")", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# forward pass", "\n", "predictions", ",", "features", "=", "model", "(", "data", ")", "\n", "\n", "# compute loss", "\n", "loss", "=", "criterion", "(", "predictions", ",", "labels", ")", "\n", "total_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "pred", "=", "predictions", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "# total_acc += pred.eq(target.view_as(pred)).sum().item()", "\n", "total_acc", ".", "append", "(", "labels", ".", "eq", "(", "predictions", ".", "detach", "(", ")", ".", "argmax", "(", "dim", "=", "1", ")", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ")", "\n", "\n", "outs", "=", "np", ".", "append", "(", "outs", ",", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "trgs", "=", "np", ".", "append", "(", "trgs", ",", "labels", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# total_loss /= len(valid_dl.dataset)  # average loss", "\n", "# total_acc /= 1. * len(valid_dl.dataset)  # average acc", "\n", "\n", "", "", "total_loss", "=", "torch", ".", "tensor", "(", "total_loss", ")", ".", "mean", "(", ")", "# average loss", "\n", "total_acc", "=", "torch", ".", "tensor", "(", "total_acc", ")", ".", "mean", "(", ")", "#average acc", "\n", "return", "total_loss", ",", "total_acc", ",", "outs", ",", "trgs", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.so_model_evaluate_mixup": [[99, 121], ["netF.eval", "netC.eval", "torch.CrossEntropyLoss", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "netC", "nn.CrossEntropyLoss.", "torch.max", "torch.max", "torch.max", "labels.size", "torch.tensor().mean.append", "data.float().to", "labels.long().to", "netF", "torch.tensor", "torch.tensor", "torch.tensor", "float", "data.float", "labels.long", "labels.to"], "function", ["None"], ["", "def", "so_model_evaluate_mixup", "(", "netF", ",", "netC", ",", "valid_dl", ",", "device", ")", ":", "\n", "    ", "netF", ".", "eval", "(", ")", "\n", "netC", ".", "eval", "(", ")", "\n", "total", "=", "0", "\n", "correct", "=", "0", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "total_loss", "=", "[", "]", "\n", "# Testing the model", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "labels", "in", "valid_dl", ":", "\n", "            ", "data", ",", "labels", "=", "data", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "labels", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "outC", "=", "netC", "(", "netF", "(", "data", ")", ")", "\n", "loss", "=", "criterion", "(", "outC", ",", "labels", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outC", ".", "data", ",", "1", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "total_loss", ".", "append", "(", "loss", ")", "\n", "correct", "+=", "(", "(", "predicted", "==", "labels", ".", "to", "(", "device", ")", ")", ".", "sum", "(", ")", ")", "\n", "\n", "", "total_loss", "=", "torch", ".", "tensor", "(", "total_loss", ")", ".", "mean", "(", ")", "\n", "val_acc", "=", "100", "*", "float", "(", "correct", ")", "/", "total", "\n", "", "return", "total_loss", ",", "val_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate_mixup": [[122, 147], ["netF.eval", "netC.eval", "torch.CrossEntropyLoss", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.tensor().mean", "torch.tensor().mean", "torch.tensor().mean", "netF", "torch.cat", "torch.cat", "torch.cat", "netC", "nn.CrossEntropyLoss.", "torch.tensor().mean.append", "torch.max", "torch.max", "torch.max", "labels.size", "data.float().to", "labels.long().to", "criterion.item", "torch.tensor", "torch.tensor", "torch.tensor", "float", "data.float", "labels.long", "labels.to"], "function", ["None"], ["", "def", "model_evaluate_mixup", "(", "netF", ",", "netC", ",", "valid_dl", ",", "device", ")", ":", "\n", "    ", "netF", ".", "eval", "(", ")", "\n", "netC", ".", "eval", "(", ")", "\n", "total", "=", "0", "\n", "correct", "=", "0", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "total_loss", "=", "[", "]", "\n", "# Testing the model", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "labels", "in", "valid_dl", ":", "\n", "            ", "data", ",", "labels", "=", "data", ".", "float", "(", ")", ".", "to", "(", "device", ")", ",", "labels", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "embedding", ",", "mean", ",", "std", "=", "netF", "(", "data", ")", "\n", "mean_std", "=", "torch", ".", "cat", "(", "(", "mean", ",", "std", ")", ",", "1", ")", "\n", "outC_logit", ",", "_", "=", "netC", "(", "mean_std", ")", "\n", "loss", "=", "criterion", "(", "outC_logit", ",", "labels", ")", "\n", "total_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outC_logit", ".", "data", ",", "1", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "(", "predicted", "==", "labels", ".", "to", "(", "device", ")", ")", ".", "sum", "(", ")", ")", "\n", "\n", "", "total_loss", "=", "torch", ".", "tensor", "(", "total_loss", ")", ".", "mean", "(", ")", "\n", "val_acc", "=", "100", "*", "float", "(", "correct", ")", "/", "total", "\n", "", "return", "total_loss", ",", "val_acc", "\n", "####### END: FOR Domain_mixup ############################", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.da_validate": [[151, 169], ["model.eval", "len", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "data.float().to.float().to", "target.view().long().to.view().long().to", "model.init_hidden", "model.predict", "classifier", "torch.nll_loss().item", "pred.eq().sum().item", "len", "classifier.max", "data.float().to.float", "target.view().long().to.view().long", "torch.nll_loss", "pred.eq().sum", "target.view().long().to.view", "pred.eq", "target.view().long().to.view_as"], "function", ["None"], ["", "def", "da_validate", "(", "model", ",", "classifier", ",", "valid_dl", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "0", "\n", "total_acc", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "valid_dl", ":", "\n", "            ", "data", "=", "data", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "view", "(", "(", "-", "1", ",", ")", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "hidden", "=", "model", ".", "init_hidden", "(", "len", "(", "data", ")", ")", "\n", "output", ",", "hidden", "=", "model", ".", "predict", "(", "data", ",", "hidden", ")", "\n", "output", "=", "classifier", "(", "output", "[", ":", ",", "-", "1", ",", ":", "]", ")", "\n", "total_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "total_acc", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "total_loss", "/=", "len", "(", "valid_dl", ".", "dataset", ")", "# average loss", "\n", "total_acc", "/=", "1.", "*", "len", "(", "valid_dl", ".", "dataset", ")", "# average acc", "\n", "print", "(", "'Validation loss: {:.4f}\\t Validation Accuracy: {:.4f}\\n'", ".", "format", "(", "total_loss", ",", "total_acc", ")", ")", "\n", "return", "total_loss", ",", "total_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.cross_domain_test": [[170, 203], ["logger.debug", "logger.debug", "training_evaluation.model_evaluate", "training_evaluation.model_evaluate", "utils._calc_metrics", "logger.debug", "logger.debug", "torch.utils.tensorboard.SummaryWriter", "utils._plot_tsne", "utils._plot_tsne", "utils._plot_tsne", "utils._plot_tsne", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "wandb.log", "wandb.log", "source_loss.item", "target_loss.item", "source_score.item", "target_score.item"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils._calc_metrics", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils._plot_tsne", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils._plot_tsne", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils._plot_tsne", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils._plot_tsne"], ["", "def", "cross_domain_test", "(", "source_model", ",", "target_model", ",", "src_id", ",", "tgt_id", ",", "\n", "src_train_dl", ",", "tgt_train_dl", ",", "src_test_dl", ",", "tgt_test_dl", ",", "\n", "device", ",", "log_dir", ",", "logger", ")", ":", "\n", "    ", "if", "args", ".", "tensorboard", ":", "\n", "        ", "comment", "=", "(", "f'./visualize/{src_id} to {tgt_id}_{data_type}'", ")", "\n", "tb", "=", "SummaryWriter", "(", "comment", ")", "\n", "", "if", "args", ".", "plot_tsne", ":", "\n", "        ", "_plot_tsne", "(", "source_model", ",", "src_train_dl", ",", "tgt_train_dl", ",", "device", ",", "log_dir", ",", "'src_only'", ",", "'train'", ")", "\n", "_plot_tsne", "(", "target_model", ",", "src_train_dl", ",", "tgt_train_dl", ",", "device", ",", "log_dir", ",", "f'{args.da_method}'", ",", "'train'", ")", "\n", "\n", "_plot_tsne", "(", "source_model", ",", "src_test_dl", ",", "tgt_test_dl", ",", "device", ",", "log_dir", ",", "'src_only'", ",", "'test'", ")", "\n", "_plot_tsne", "(", "target_model", ",", "src_test_dl", ",", "tgt_test_dl", ",", "device", ",", "log_dir", ",", "f'{args.da_method}'", ",", "'test'", ")", "\n", "\n", "# finish Training evaluate on test sets", "\n", "", "logger", ".", "debug", "(", "'==== Domain Adaptation completed ====='", ")", "\n", "logger", ".", "debug", "(", "'\\n==== Evaluate on test sets ==========='", ")", "\n", "source_loss", ",", "source_score", ",", "_", ",", "_", "=", "model_evaluate", "(", "source_model", ",", "tgt_test_dl", ",", "device", ")", "\n", "target_loss", ",", "target_score", ",", "pred_labels", ",", "true_labels", "=", "model_evaluate", "(", "target_model", ",", "tgt_test_dl", ",", "device", ")", "\n", "_calc_metrics", "(", "pred_labels", ",", "true_labels", ",", "log_dir", ")", "\n", "\n", "logger", ".", "debug", "(", "f'\\t Src_only Loss : {source_loss:.4f}\\t | \\tSrc_only Accuracy : {source_score:2.4f}'", ")", "\n", "logger", ".", "debug", "(", "f'\\t {args.da_method} Loss     : {target_loss:.4f}\\t | \\t{args.da_method} Accuracy     : {target_score:2.4f}'", ")", "\n", "# wandb.sklearn.plot_confusion_matrix(true_labels, pred_labels, configs['class_names'])", "\n", "\n", "if", "args", ".", "tensorboard", ":", "\n", "        ", "tb", ".", "add_scalar", "(", "'test/Source_only_loss'", ",", "source_loss", ")", "\n", "tb", ".", "add_scalar", "(", "f'test/{args.da_method}_loss'", ",", "target_loss", ")", "\n", "tb", ".", "add_scalar", "(", "'test/Source_only_accuracy'", ",", "source_score", ")", "\n", "tb", ".", "add_scalar", "(", "f'test/{args.da_method}_accuracy/'", ",", "target_score", ")", "\n", "wandb", ".", "log", "(", "{", "\"test/Source_only_loss\"", ":", "source_loss", ",", "\"test/Source_only_acc\"", ":", "source_score", "}", ")", "\n", "wandb", ".", "log", "(", "{", "f\"test/{args.da_method}_loss\"", ":", "target_loss", ",", "f\"test/{args.da_method}_acc\"", ":", "target_score", "}", ")", "\n", "\n", "", "return", "source_loss", ".", "item", "(", ")", ",", "source_score", ".", "item", "(", ")", "*", "100", ",", "target_loss", ".", "item", "(", ")", ",", "target_score", ".", "item", "(", ")", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.same_domain_test": [[205, 232], ["logger.debug", "logger.debug", "training_evaluation.model_evaluate", "training_evaluation.model_evaluate", "training_evaluation.model_evaluate", "utils._calc_metrics", "logger.debug", "logger.debug", "logger.debug", "torch.utils.tensorboard.SummaryWriter", "utils.plot_tsne_one_domain", "utils.plot_tsne_one_domain", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "wandb.log", "train_loss.item", "train_score.item", "val_loss.item", "val_score.item", "test_loss.item", "test_score.item"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils._calc_metrics", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.plot_tsne_one_domain", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.plot_tsne_one_domain"], ["", "def", "same_domain_test", "(", "source_model", ",", "src_id", ",", "src_train_dl", ",", "src_valid_dl", ",", "src_test_dl", ",", "device", ",", "log_dir", ",", "logger", ")", ":", "\n", "    ", "if", "args", ".", "tensorboard", ":", "\n", "        ", "comment", "=", "(", "f'./visualize/domain_{src_id}_{data_type}'", ")", "\n", "tb", "=", "SummaryWriter", "(", "comment", ")", "\n", "", "if", "args", ".", "plot_tsne", ":", "\n", "        ", "plot_tsne_one_domain", "(", "source_model", ",", "src_train_dl", ",", "device", ",", "log_dir", ",", "'Supervised'", ",", "'train'", ")", "\n", "plot_tsne_one_domain", "(", "source_model", ",", "src_test_dl", ",", "device", ",", "log_dir", ",", "'Supervised'", ",", "'test'", ")", "\n", "\n", "\n", "# finish Training evaluate on test sets", "\n", "", "logger", ".", "debug", "(", "'==== Supervised Performance ====='", ")", "\n", "logger", ".", "debug", "(", "'==== Evaluate on test sets ==========='", ")", "\n", "train_loss", ",", "train_score", ",", "_", ",", "_", "=", "model_evaluate", "(", "source_model", ",", "src_train_dl", ",", "device", ")", "\n", "val_loss", ",", "val_score", ",", "_", ",", "_", "=", "model_evaluate", "(", "source_model", ",", "src_valid_dl", ",", "device", ")", "\n", "test_loss", ",", "test_score", ",", "pred_labels", ",", "true_labels", "=", "model_evaluate", "(", "source_model", ",", "src_test_dl", ",", "device", ")", "\n", "_calc_metrics", "(", "pred_labels", ",", "true_labels", ",", "log_dir", ")", "\n", "logger", ".", "debug", "(", "f'\\t Train Loss : {train_loss:.2f}\\t | \\tTrain Accuracy : {train_score:2.4f}'", ")", "\n", "logger", ".", "debug", "(", "f'\\t Val Loss : {val_loss:.2f}\\t | \\tVal Accuracy : {val_score:2.4f}'", ")", "\n", "logger", ".", "debug", "(", "f'\\t Test Loss : {test_loss:.2f}\\t | \\tTest Accuracy : {test_score:2.4f}'", ")", "\n", "\n", "# wandb.sklearn.plot_confusion_matrix(true_labels, pred_labels, configs['class_names'])", "\n", "\n", "if", "args", ".", "tensorboard", ":", "\n", "        ", "tb", ".", "add_scalar", "(", "'same_domain/test_loss'", ",", "test_loss", ")", "\n", "tb", ".", "add_scalar", "(", "f'same_domain/test_accuracy'", ",", "test_score", ")", "\n", "wandb", ".", "log", "(", "{", "\"same_domain/test_loss \"", ":", "test_loss", ",", "\"same_domain/test_accuracy\"", ":", "test_score", "}", ")", "\n", "", "return", "train_loss", ".", "item", "(", ")", ",", "train_score", ".", "item", "(", ")", ",", "val_loss", ".", "item", "(", ")", ",", "val_score", ".", "item", "(", ")", ",", "test_loss", ".", "item", "(", ")", ",", "test_score", ".", "item", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.Source_Only_trainer.cross_domain_train": [[16, 49], ["base_model().float().to", "logger.debug", "logger.debug", "base_model().float().to.load_state_dict", "trainer.training_evaluation.model_evaluate", "logger.debug", "torch.utils.tensorboard.SummaryWriter", "torch.load", "torch.load", "base_model().float", "utils.count_parameters", "base_model"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.model_evaluate", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.count_parameters"], ["def", "cross_domain_train", "(", "src_train_dl", ",", "src_valid_dl", ",", "src_test_dl", ",", "\n", "tgt_train_dl", ",", "tgt_valid_dl", ",", "base_model", ",", "\n", "src_id", ",", "tgt_id", ",", "\n", "device", ",", "logger", ",", "configs", ")", ":", "\n", "\n", "    ", "model_configs", "=", "configs", ".", "base_model", "\n", "\n", "# source model network.", "\n", "source_model", "=", "base_model", "(", "model_configs", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Logging", "\n", "logger", ".", "debug", "(", "f'The model has {count_parameters(source_model):,} trainable parameters'", ")", "\n", "logger", ".", "debug", "(", "'='", "*", "45", ")", "\n", "if", "args", ".", "tensorboard", ":", "\n", "        ", "comment", "=", "(", "f'../visualize/{src_id} to {tgt_id}_{args.selected_dataset}'", ")", "\n", "tb", "=", "SummaryWriter", "(", "comment", ")", "\n", "\n", "# check if source only model exists, else train it ...", "\n", "# ckp_path = f'./src_only_saved_models/{args.selected_dataset}/last_{args.selected_dataset}_{args.base_model}_src_{src_id}.pt'", "\n", "# if os.path.exists(ckp_path):", "\n", "#     src_chkpoint = torch.load(ckp_path)['model_state_dict']", "\n", "# else:", "\n", "# Trainer(source_model, src_train_dl, src_valid_dl, src_test_dl, src_id, device, logger)", "\n", "", "ckp_path", "=", "f'./src_only_saved_models/{args.selected_dataset}/last_{args.selected_dataset}_{args.base_model}_src_{src_id}.pt'", "\n", "src_chkpoint", "=", "torch", ".", "load", "(", "ckp_path", ")", "[", "'model_state_dict'", "]", "\n", "\n", "# Load trained mode;", "\n", "source_model", ".", "load_state_dict", "(", "src_chkpoint", ")", "\n", "\n", "source_loss", ",", "source_score", ",", "_", ",", "_", "=", "model_evaluate", "(", "source_model", ",", "tgt_valid_dl", ",", "device", ")", "\n", "logger", ".", "debug", "(", "f'Src_only Loss : {source_loss:.4f}\\t | \\tSrc_only Accuracy : {source_score:2.4f}\\n'", ")", "\n", "\n", "return", "source_model", ",", "source_model", "\n", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.Opp_HAR_Configs.Config.__init__": [[2, 38], ["Opp_HAR_Configs.base_model_configs", "Opp_HAR_Configs.SLARDA_Configs"], "methods", ["None"], ["class", "Config", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "# model configs", "\n", "        ", "self", ".", "input_channels", "=", "113", "\n", "self", ".", "out_channels", "=", "16", "\n", "self", ".", "kernel_size", "=", "8", "\n", "self", ".", "feat_dim", "=", "16", "\n", "\n", "self", ".", "dropout", "=", "0.5", "\n", "self", ".", "num_classes", "=", "4", "\n", "\n", "# training configs", "\n", "self", ".", "num_epoch", "=", "40", "\n", "self", ".", "batch_size", "=", "128", "\n", "\n", "# optimizer parameters", "\n", "self", ".", "optimizer", "=", "'adam'", "\n", "self", ".", "beta1", "=", "0.5", "\n", "self", ".", "beta2", "=", "0.99", "\n", "self", ".", "lr", "=", "3e-4", "\n", "\n", "# data parameters", "\n", "self", ".", "drop_last", "=", "True", "\n", "self", ".", "apply_transform", "=", "False", "\n", "self", ".", "class_names", "=", "[", "'Biking'", ",", "'Sitting'", ",", "'Standing'", ",", "'Walking'", ",", "'Stair Up'", ",", "'Stair down'", "]", "\n", "\n", "self", ".", "SimCLR", "=", "SimCLR_configs", "(", ")", "\n", "\n", "\n", "", "", "class", "SimCLR_configs", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "temperature", "=", "0.2", "\n", "self", ".", "use_cosine_similarity", "=", "True", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.Opp_HAR_Configs.SimCLR_configs.__init__": [[32, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "temperature", "=", "0.2", "\n", "self", ".", "use_cosine_similarity", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.HHAR_Configs.Config.__init__": [[3, 29], ["HHAR_Configs.SimCLR_configs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# model configs", "\n", "        ", "self", ".", "input_channels", "=", "3", "\n", "self", ".", "out_channels", "=", "32", "\n", "self", ".", "kernel_size", "=", "8", "\n", "self", ".", "feat_dim", "=", "32", "\n", "\n", "self", ".", "dropout", "=", "0.5", "\n", "self", ".", "num_classes", "=", "6", "\n", "\n", "# training configs", "\n", "self", ".", "num_epoch", "=", "30", "\n", "self", ".", "batch_size", "=", "128", "\n", "\n", "# optimizer parameters", "\n", "self", ".", "optimizer", "=", "'adam'", "\n", "self", ".", "beta1", "=", "0.9", "\n", "self", ".", "beta2", "=", "0.99", "\n", "self", ".", "lr", "=", "3e-4", "\n", "\n", "# data parameters", "\n", "self", ".", "drop_last", "=", "True", "\n", "self", ".", "apply_transform", "=", "True", "\n", "self", ".", "class_names", "=", "[", "'Biking'", ",", "'Sitting'", ",", "'Standing'", ",", "'Walking'", ",", "'Stair Up'", ",", "'Stair down'", "]", "\n", "\n", "self", ".", "SimCLR", "=", "SimCLR_configs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.HHAR_Configs.SimCLR_configs.__init__": [[32, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "temperature", "=", "0.2", "\n", "self", ".", "use_cosine_similarity", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.EEG_Configs.Config.__init__": [[3, 44], ["EEG_Configs.base_model_configs", "EEG_Configs.Supervised_configs", "EEG_Configs.SLARDA_Configs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# model configs", "\n", "        ", "self", ".", "input_channels", "=", "1", "\n", "self", ".", "reduced_cnn_size", "=", "128", "\n", "self", ".", "num_classes", "=", "5", "\n", "self", ".", "dropout", "=", "0.5", "\n", "\n", "self", ".", "wide_kernel_size", "=", "400", "\n", "self", ".", "wide_stride_size", "=", "50", "\n", "\n", "self", ".", "small_kernel_size", "=", "50", "\n", "self", ".", "small_stride_size", "=", "6", "\n", "\n", "# Reset Configs", "\n", "self", ".", "num_filters", "=", "16", "\n", "self", ".", "stride", "=", "8", "\n", "self", ".", "kernel_size", "=", "50", "\n", "\n", "# training configs", "\n", "self", ".", "num_epoch", "=", "30", "\n", "self", ".", "batch_size", "=", "128", "\n", "\n", "# optimizer parameters", "\n", "self", ".", "optimizer", "=", "'adam'", "\n", "self", ".", "beta1", "=", "0.9", "\n", "self", ".", "beta2", "=", "0.99", "\n", "self", ".", "lr", "=", "3e-4", "\n", "\n", "# data parameters", "\n", "self", ".", "drop_last", "=", "True", "\n", "self", ".", "class_names", "=", "[", "'W'", ",", "'N1'", ",", "'N2'", ",", "'N3'", ",", "'REM'", "]", "\n", "\n", "self", ".", "SimCLR", "=", "SimCLR_configs", "(", ")", "\n", "\n", "\n", "", "", "class", "SimCLR_configs", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "temperature", "=", "0.2", "\n", "self", ".", "use_cosine_similarity", "=", "True", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.EEG_Configs.SimCLR_configs.__init__": [[39, 42], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "temperature", "=", "0.2", "\n", "self", ".", "use_cosine_similarity", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.FD_Configs.Config.__init__": [[3, 28], ["FD_Configs.SimCLR_configs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# model configs", "\n", "        ", "self", ".", "input_channels", "=", "1", "\n", "self", ".", "reduced_cnn_size", "=", "8", "\n", "self", ".", "num_classes", "=", "3", "\n", "self", ".", "dropout", "=", "0.5", "\n", "\n", "self", ".", "kernel_size", "=", "32", "\n", "self", ".", "cls_hidden_dim", "=", "32", "\n", "\n", "# training configs", "\n", "self", ".", "num_epoch", "=", "30", "\n", "self", ".", "batch_size", "=", "128", "\n", "\n", "# optimizer parameters", "\n", "self", ".", "optimizer", "=", "'adam'", "\n", "self", ".", "beta1", "=", "0.9", "\n", "self", ".", "beta2", "=", "0.99", "\n", "self", ".", "lr", "=", "3e-4", "\n", "\n", "# data parameters", "\n", "self", ".", "drop_last", "=", "True", "\n", "self", ".", "class_names", "=", "[", "'W'", ",", "'N1'", ",", "'N2'", ",", "'N3'", ",", "'REM'", "]", "\n", "\n", "self", ".", "SimCLR", "=", "SimCLR_configs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.FD_Configs.SimCLR_configs.__init__": [[31, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "temperature", "=", "0.2", "\n", "self", ".", "use_cosine_similarity", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.Paderborn_FD_Configs.Config.__init__": [[2, 39], ["Paderborn_FD_Configs.base_model_configs", "Paderborn_FD_Configs.SLARD_Configs"], "methods", ["None"], ["class", "Config", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "# model configs", "\n", "        ", "self", ".", "input_channels", "=", "1", "\n", "self", ".", "reduced_cnn_size", "=", "8", "\n", "self", ".", "num_classes", "=", "3", "\n", "self", ".", "dropout", "=", "0.5", "\n", "self", ".", "training_mode", "=", "'self_supervised'", "\n", "self", ".", "cnn_feat_dim", "=", "155", "\n", "\n", "self", ".", "kernel_size", "=", "32", "\n", "self", ".", "cls_hidden_dim", "=", "32", "\n", "\n", "# training configs", "\n", "self", ".", "num_epoch", "=", "30", "\n", "self", ".", "batch_size", "=", "128", "\n", "\n", "# optimizer parameters", "\n", "self", ".", "optimizer", "=", "'adam'", "\n", "self", ".", "beta1", "=", "0.9", "\n", "self", ".", "beta2", "=", "0.99", "\n", "self", ".", "lr", "=", "3e-4", "\n", "\n", "# data parameters", "\n", "self", ".", "drop_last", "=", "True", "\n", "self", ".", "class_names", "=", "[", "'W'", ",", "'N1'", ",", "'N2'", ",", "'N3'", ",", "'REM'", "]", "\n", "\n", "self", ".", "SimCLR", "=", "SimCLR_configs", "(", ")", "\n", "\n", "\n", "", "", "class", "SimCLR_configs", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "temperature", "=", "0.2", "\n", "self", ".", "use_cosine_similarity", "=", "True", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.Paderborn_FD_Configs.SimCLR_configs.__init__": [[33, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "temperature", "=", "0.2", "\n", "self", ".", "use_cosine_similarity", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.Opp_HAR_Configs.base_model_configs.__init__": [[40, 49], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.Opp_HAR_Configs.SLARDA_Configs.__init__": [[51, 64], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.Opp_HAR_Configs.Supervised.__init__": [[67, 77], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.EEG_Configs.Supervised_configs.__init__": [[47, 57], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.EEG_Configs.base_model_configs.__init__": [[59, 78], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.EEG_Configs.SLARDA_Configs.__init__": [[81, 94], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.Paderborn_FD_Configs.Supervised.__init__": [[41, 52], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.Paderborn_FD_Configs.base_model_configs.__init__": [[55, 65], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.config_files.Paderborn_FD_Configs.SLARD_Configs.__init__": [[68, 81], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.train_CD.main_train_cd": [[34, 145], ["os.listdir", "pandas.DataFrame", "pandas.DataFrame", "os.path.join", "utils.get_nonexistant_path", "utils.copy_Files", "itertools.product", "print", "print", "mean_df[].mean", "utils._logger.debug", "utils._logger.debug", "utils._logger.debug", "utils._logger.debug", "utils._logger.debug", "utils._logger.debug", "os.path.basename", "pd.DataFrame.to_excel", "printed_results.to_excel", "os.getcwd", "pd.DataFrame.to_string", "pd.DataFrame.to_string", "pd.DataFrame.to_string", "printed_results.to_string", "wandb.log", "wandb.log", "range", "input_data.extend", "input_data.extend", "len", "utils.fix_randomness", "os.path.join", "os.makedirs", "os.path.join", "utils._logger", "utils._logger.debug", "utils._logger.debug", "utils._logger.debug", "utils._logger.debug", "utils._logger.debug", "utils._logger.debug", "utils._logger.debug", "dataloader.dataloader.data_generator", "dataloader.dataloader.data_generator", "cross_domain_train", "trainer.training_evaluation.cross_domain_test", "wandb.Table", "wandb.Table", "wandb.init", "pd.DataFrame.iloc[].mean", "pd.DataFrame.iloc[].std", "len", "datetime.datetime.now", "str", "datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.get_nonexistant_path", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.copy_Files", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.fix_randomness", "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils._logger", "home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.dataloader.data_generator", "home.repos.pwc.inspect_result.mohamedr002_slarda.dataloader.dataloader.data_generator", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.Source_Only_trainer.cross_domain_train", "home.repos.pwc.inspect_result.mohamedr002_slarda.trainer.training_evaluation.cross_domain_test"], ["def", "main_train_cd", "(", ")", ":", "\n", "\n", "# find out the domains IDs", "\n", "    ", "data_files", "=", "os", ".", "listdir", "(", "data_path", ")", "\n", "data_files", "=", "[", "i", "for", "i", "in", "data_files", "if", "\"train\"", "in", "i", "]", "\n", "sources", "=", "[", "i", "[", "6", "]", "for", "i", "in", "data_files", "]", "\n", "src_tgt_product", "=", "[", "sources", ",", "sources", "]", "\n", "\n", "\n", "simple_column_names", "=", "[", "'Run ID'", ",", "\n", "'source_loss'", ",", "'source_acc'", ",", "\n", "'target_loss'", ",", "'target_acc'", ",", "]", "\n", "column_names_mean", "=", "[", "'Scenario'", ",", "\n", "'Source_only_loss_mean'", ",", "'Source_only_acc_mean'", ",", "\n", "f'{da_method}_loss_mean'", ",", "f'{da_method}_acc_mean'", ",", "\n", "f'Source_only_loss_std'", ",", "'Source_only_acc_std'", ",", "\n", "f'{da_method}_loss_std'", ",", "f'{da_method}_acc_std'", "]", "\n", "\n", "simple_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "simple_column_names", ")", "\n", "mean_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "column_names_mean", ")", "\n", "# Logging", "\n", "# cwd = os.getcwd()", "\n", "# exp_log_dir = os.path.join(r\"D:\\Autoregressive Domain Adaptation for Time series data\\Last\",save_dir, experiment_description, f\"{da_method}_{data_type}_{args.run_description}\")", "\n", "exp_log_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "save_dir", ",", "experiment_description", ",", "f\"{da_method}_{data_type}_{args.run_description}\"", ")", "\n", "\n", "exp_log_dir", "=", "get_nonexistant_path", "(", "exp_log_dir", ")", "\n", "# os.makedirs(exp_log_dir, exist_ok=True)", "\n", "# copy(f\"/home/mohamed/SLARADA/config_files/{data_type}_configs.py\", f\"{exp_log_dir}/{data_type}_configs.py\")", "\n", "# copy(f\"/home/mohamed/SLARADA/trainer/{da_method}.py\", f\"{exp_log_dir}/{da_method}_script.py\")", "\n", "# copy(\"/home/mohamed/SLARADA/args.py\",  f\"{exp_log_dir}/args.py\")", "\n", "copy_Files", "(", "exp_log_dir", ",", "data_type", ",", "da_method", ")", "\n", "# loop through domains", "\n", "# loop through domains", "\n", "counter", "=", "0", "\n", "src_counter", "=", "0", "\n", "for", "src_id", ",", "tgt_id", "in", "product", "(", "*", "src_tgt_product", ")", ":", "\n", "# for src_id in ['a', 'b', 'c']:", "\n", "#     for tgt_id in ['a', 'b','c']:", "\n", "            ", "if", "src_id", "!=", "tgt_id", ":", "\n", "# prepare save directory", "\n", "# specify number of consecutive runs", "\n", "                ", "for", "run_id", "in", "range", "(", "args", ".", "num_runs", ")", ":", "\n", "                    ", "fix_randomness", "(", "run_id", ")", "\n", "\n", "# Logging", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "exp_log_dir", ",", "src_id", "+", "\"_to_\"", "+", "tgt_id", "+", "\"_run_\"", "+", "str", "(", "run_id", ")", ")", "\n", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "log_file_name", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f\"logs_{datetime.now().strftime('%d_%m_%Y_%H_%M_%S')}.log\"", ")", "\n", "logger", "=", "_logger", "(", "log_file_name", ")", "\n", "logger", ".", "debug", "(", "\"=\"", "*", "45", ")", "\n", "logger", ".", "debug", "(", "f'Dataset: {data_type}'", ")", "\n", "logger", ".", "debug", "(", "f'Method:  {da_method}'", ")", "\n", "logger", ".", "debug", "(", "\"=\"", "*", "45", ")", "\n", "logger", ".", "debug", "(", "f'Source: {src_id} ---> Target: {tgt_id}'", ")", "\n", "logger", ".", "debug", "(", "f'Run ID: {run_id}'", ")", "\n", "logger", ".", "debug", "(", "\"=\"", "*", "45", ")", "\n", "\n", "\n", "# Load datasets", "\n", "src_train_dl", ",", "src_valid_dl", ",", "src_test_dl", "=", "data_generator", "(", "data_path", ",", "src_id", ",", "configs", ")", "\n", "tgt_train_dl", ",", "tgt_valid_dl", ",", "tgt_test_dl", "=", "data_generator", "(", "data_path", ",", "tgt_id", ",", "configs", ")", "\n", "\n", "\n", "\n", "if", "args", ".", "tensorboard", ":", "\n", "                        ", "wandb", ".", "init", "(", "project", "=", "\"SLARDA\"", ",", "group", "=", "f'{da_method}_{data_type}'", ",", "name", "=", "f'{src_id}_to_{tgt_id}_run_{run_id}'", ",", "config", "=", "configs", ",", "\n", "sync_tensorboard", "=", "False", ",", "reinit", "=", "True", ",", "dir", "=", "r\"./visualize/\"", ",", ")", "\n", "\n", "", "source_model", ",", "target_model", "=", "cross_domain_train", "(", "src_train_dl", ",", "src_valid_dl", ",", "src_test_dl", ",", "\n", "tgt_train_dl", ",", "tgt_valid_dl", ",", "base_model", ",", "\n", "src_id", ",", "tgt_id", ",", "\n", "device", ",", "logger", ",", "configs", ")", "\n", "scores", "=", "cross_domain_test", "(", "source_model", ",", "target_model", ",", "src_id", ",", "tgt_id", ",", "\n", "src_train_dl", ",", "tgt_train_dl", ",", "src_test_dl", ",", "tgt_test_dl", ",", "\n", "device", ",", "log_dir", ",", "logger", ")", "\n", "\n", "run_name", "=", "f\"domain_{src_id}_run_{run_id}\"", "\n", "outs", "=", "(", "run_name", ",", ")", "+", "scores", "\n", "simple_df", ".", "loc", "[", "counter", "]", "=", "outs", "\n", "counter", "+=", "1", "\n", "\n", "\n", "", "input_data", "=", "[", "f\"{src_id}-->{tgt_id}\"", "]", "\n", "input_data", ".", "extend", "(", "simple_df", ".", "iloc", "[", "-", "args", ".", "num_runs", ":", ",", "1", ":", "]", ".", "mean", "(", ")", ".", "array", ")", "\n", "input_data", ".", "extend", "(", "simple_df", ".", "iloc", "[", "-", "args", ".", "num_runs", ":", ",", "1", ":", "]", ".", "std", "(", ")", ".", "array", ")", "\n", "mean_df", ".", "loc", "[", "src_counter", "]", "=", "input_data", "\n", "src_counter", "+=", "1", "\n", "\n", "\n", "# Printing and saving final results", "\n", "", "", "print", "(", "simple_df", ".", "to_string", "(", ")", ")", "\n", "print", "(", "mean_df", ".", "to_string", "(", ")", ")", "\n", "printed_results", "=", "mean_df", "[", "[", "'Scenario'", ",", "'Source_only_acc_mean'", ",", "'Source_only_acc_std'", ",", "f'{da_method}_acc_mean'", ",", "f'{da_method}_acc_std'", "]", "]", "\n", "mean", "=", "mean_df", "[", "[", "'Source_only_acc_mean'", ",", "'Source_only_acc_std'", ",", "f'{da_method}_acc_mean'", ",", "f'{da_method}_acc_std'", "]", "]", ".", "mean", "(", ")", "\n", "printed_results", ".", "loc", "[", "len", "(", "printed_results", ")", "]", "=", "mean", "\n", "printed_results", ".", "at", "[", "len", "(", "printed_results", ")", "-", "1", ",", "'Scenario'", "]", "=", "'Average'", "\n", "\n", "logger", ".", "debug", "(", "f\"Total training time is {datetime.now() - start_time}\"", ")", "\n", "\n", "logger", ".", "debug", "(", "'='", "*", "45", ")", "\n", "logger", ".", "debug", "(", "f'Results using: {da_method}'", ")", "\n", "logger", ".", "debug", "(", "'='", "*", "45", ")", "\n", "logger", ".", "debug", "(", "mean_df", ".", "to_string", "(", ")", ")", "\n", "logger", ".", "debug", "(", "printed_results", ".", "to_string", "(", ")", ")", "\n", "print_res_name", "=", "os", ".", "path", ".", "basename", "(", "exp_log_dir", ")", "\n", "simple_df", ".", "to_excel", "(", "f'{exp_log_dir}/full_res_results_{print_res_name}.xlsx'", ")", "\n", "printed_results", ".", "to_excel", "(", "f'{exp_log_dir}/printed_results_{print_res_name}.xlsx'", ")", "\n", "\n", "if", "args", ".", "tensorboard", ":", "\n", "        ", "wandb", ".", "log", "(", "{", "\"Full_results\"", ":", "wandb", ".", "Table", "(", "dataframe", "=", "simple_df", ")", "}", ")", "\n", "wandb", ".", "log", "(", "{", "\"Printed_results\"", ":", "wandb", ".", "Table", "(", "dataframe", "=", "printed_results", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.__init__": [[33, 35], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.reset"], ["torch", ".", "manual_seed", "(", "SEED", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "SEED", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.reset": [[36, 41], ["None"], "methods", ["None"], ["\n", "\n", "", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "for", "name", ",", "param", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "        ", "nn", ".", "init", ".", "uniform_", "(", "param", ".", "data", ",", "-", "0.08", ",", "0.08", ")", "\n", "# if name=='weight':", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.AverageMeter.update": [[42, 47], ["None"], "methods", ["None"], ["#     nn.init.kaiming_uniform_(param.data)", "\n", "# else:", "\n", "#     torch.nn.init.zeros_(param.data)", "\n", "\n", "\n", "", "", "def", "count_parameters", "(", "model", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.copy_Files": [[20, 30], ["os.path.join", "os.makedirs", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["def", "set_requires_grad", "(", "model", ",", "dict_", ",", "requires_grad", "=", "True", ")", ":", "\n", "    ", "for", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "param", "[", "0", "]", "in", "dict_", ":", "\n", "            ", "param", "[", "1", "]", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "", "", "", "def", "loop_iterable", "(", "iterable", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "yield", "from", "iterable", "\n", "\n", "\n", "", "", "def", "fix_randomness", "(", "SEED", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.set_requires_grad": [[51, 54], ["model.parameters"], "function", ["None"], ["", "def", "epoch_time", "(", "start_time", ",", "end_time", ")", ":", "\n", "    ", "elapsed_time", "=", "end_time", "-", "start_time", "\n", "elapsed_mins", "=", "int", "(", "elapsed_time", "/", "60", ")", "\n", "elapsed_secs", "=", "int", "(", "elapsed_time", "-", "(", "elapsed_mins", "*", "60", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.loop_iterable": [[56, 59], ["None"], "function", ["None"], ["\n", "\n", "", "def", "mean_std", "(", "x", ")", ":", "\n", "    ", "mean", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "x", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.fix_randomness": [[61, 68], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["return", "mean", ",", "std", "\n", "\n", "\n", "", "def", "save_to_df_1", "(", "run_id", ",", "data_id", ",", "scores", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "metric", "in", "scores", ":", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "metric", ")", ")", "\n", "std", "=", "np", ".", "std", "(", "np", ".", "array", "(", "metric", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.init_weights": [[69, 72], ["m.named_parameters", "torch.nn.init.uniform_"], "function", ["None"], ["res", ".", "append", "(", "f'{mean:2.2f}'", ")", "\n", "res", ".", "append", "(", "f'{std:2.2f}'", ")", "\n", "", "df_out", "=", "pd", ".", "Series", "(", "(", "run_id", ",", "data_id", ",", "res", ")", ",", "index", "=", "df", ".", "columns", ")", "\n", "# df_out = pd.Series((run_id, data_id, res[0][0],res[0][1],res[1][0],res[1][1],res[2][0],res[2][1],res[2][0],res[2][1],res[3][0],res[3][1]))", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.weights_init": [[79, 89], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["res", ".", "append", "(", "f'{mean:2.2f}'", ")", "\n", "res", ".", "append", "(", "f'{std:2.2f}'", ")", "\n", "# df_out = pd.Series((run_id, data_id, res[0][0],res[0][1],res[1][0],res[1][1],res[2][0],res[2][1],res[2][0],res[2][1],res[3][0],res[3][1]))", "\n", "", "return", "res", "\n", "\n", "\n", "", "def", "_calc_metrics", "(", "pred_labels", ",", "true_labels", ",", "log_dir", ")", ":", "\n", "    ", "pred_labels", "=", "np", ".", "array", "(", "pred_labels", ")", ".", "astype", "(", "int", ")", "\n", "true_labels", "=", "np", ".", "array", "(", "true_labels", ")", ".", "astype", "(", "int", ")", "\n", "\n", "# save targets", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.exp_lr_scheduler": [[90, 98], ["None"], "function", ["None"], ["labels_save_path", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"labels\"", ")", "\n", "os", ".", "mkdir", "(", "labels_save_path", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "labels_save_path", ",", "\"predicted_labels.npy\"", ")", ",", "pred_labels", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "labels_save_path", ",", "\"true_labels.npy\"", ")", ",", "true_labels", ")", "\n", "\n", "r", "=", "classification_report", "(", "true_labels", ",", "pred_labels", ",", "digits", "=", "6", ",", "output_dict", "=", "True", ")", "\n", "cm", "=", "confusion_matrix", "(", "true_labels", ",", "pred_labels", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "r", ")", "\n", "df", "[", "\"cohen\"", "]", "=", "cohen_kappa_score", "(", "true_labels", ",", "pred_labels", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.count_parameters": [[100, 102], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["df", "=", "df", "*", "100", "\n", "\n", "# save classification report", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.epoch_time": [[104, 109], ["int", "int"], "function", ["None"], ["report_Save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "home_path", ",", "log_dir", ",", "file_name", ")", "\n", "df", ".", "to_excel", "(", "report_Save_path", ")", "\n", "\n", "# save confusion matrix", "\n", "cm_file_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "log_dir", ")", ")", "+", "\"_confusion_matrix.torch\"", "\n", "cm_Save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "home_path", ",", "log_dir", ",", "cm_file_name", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.mean_std": [[111, 115], ["numpy.mean", "numpy.std", "numpy.array", "numpy.array"], "function", ["None"], ["\n", "\n", "\n", "", "def", "_logger", "(", "logger_name", ",", "level", "=", "logging", ".", "DEBUG", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.save_to_df_1": [[117, 127], ["pandas.Series", "numpy.mean", "numpy.std", "res.append", "res.append", "numpy.array", "numpy.array"], "function", ["None"], ["\n", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "logger", ".", "setLevel", "(", "level", ")", "\n", "# format_string = (\"%(asctime)s \u2014 %(name)s \u2014 %(levelname)s \u2014 %(funcName)s:\"", "\n", "#                 \"%(lineno)d \u2014 %(message)s\")", "\n", "format_string", "=", "\"%(message)s\"", "\n", "log_format", "=", "logging", ".", "Formatter", "(", "format_string", ")", "\n", "# Creating and adding the console handler", "\n", "console_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "console_handler", ".", "setFormatter", "(", "log_format", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.save_to_df": [[129, 138], ["numpy.mean", "numpy.std", "res.append", "res.append", "numpy.array", "numpy.array"], "function", ["None"], ["file_handler", "=", "logging", ".", "FileHandler", "(", "logger_name", ",", "mode", "=", "'a'", ")", "\n", "file_handler", ".", "setFormatter", "(", "log_format", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "return", "logger", "\n", "\n", "", "def", "_plot_tsne", "(", "model", ",", "src_dl", ",", "tgt_dl", ",", "device", ",", "save_dir", ",", "model_type", ",", "train_mode", ")", ":", "#, layer_output_to_plot, y_test, save_dir, type_id):", "\n", "    ", "print", "(", "\"Plotting TSNE for \"", "+", "model_type", "+", "\"...\"", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "src_data", "=", "src_dl", ".", "dataset", ".", "x_data", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.report_results": [[139, 150], ["pandas.to_numeric().mean", "pandas.to_numeric().mean", "os.path.basename", "df.to_excel", "printed_results.to_excel", "pandas.to_numeric", "pandas.to_numeric", "len"], "function", ["None"], ["src_labels", "=", "src_dl", ".", "dataset", ".", "y_data", ".", "view", "(", "(", "-", "1", ")", ")", ".", "long", "(", ")", "#.to(device)", "\n", "src_predictions", ",", "src_features", "=", "model", "(", "src_data", ")", "\n", "\n", "tgt_data", "=", "tgt_dl", ".", "dataset", ".", "x_data", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "tgt_labels", "=", "tgt_dl", ".", "dataset", ".", "y_data", ".", "view", "(", "(", "-", "1", ")", ")", ".", "long", "(", ")", "#.to(device)", "\n", "tgt_predictions", ",", "tgt_features", "=", "model", "(", "tgt_data", ")", "\n", "\n", "\n", "\n", "", "perplexity", "=", "50", "\n", "src_model_tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "random_state", "=", "1", ",", "perplexity", "=", "perplexity", ")", ".", "fit_transform", "(", "\n", "(", "Variable", "(", "src_features", ")", ".", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "len", "(", "src_labels", ")", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils._calc_metrics": [[150, 176], ["numpy.array().astype", "numpy.array().astype", "os.path.join", "os.mkdir", "numpy.save", "numpy.save", "sklearn.metrics.classification_report", "sklearn.metrics.confusion_matrix", "pandas.DataFrame", "sklearn.metrics.cohen_kappa_score", "sklearn.metrics.accuracy_score", "os.path.join", "pd.DataFrame.to_excel", "os.path.join", "torch.save", "os.path.join", "os.path.join", "os.path.basename", "os.path.basename", "numpy.array", "numpy.array", "os.path.normpath", "os.path.normpath"], "function", ["None"], ["(", "Variable", "(", "src_features", ")", ".", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "len", "(", "src_labels", ")", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "\n", "tgt_model_tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "random_state", "=", "1", ",", "perplexity", "=", "perplexity", ")", ".", "fit_transform", "(", "\n", "(", "Variable", "(", "tgt_features", ")", ".", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "len", "(", "tgt_labels", ")", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "float64", ")", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "16", ",", "10", ")", ")", "\n", "cmaps", "=", "plt", ".", "get_cmap", "(", "'jet'", ")", "\n", "src_scatter", "=", "ax", ".", "scatter", "(", "src_model_tsne", "[", ":", ",", "0", "]", ",", "src_model_tsne", "[", ":", ",", "1", "]", ",", "s", "=", "20", ",", "c", "=", "src_labels", ",", "cmap", "=", "cmaps", ",", "\n", "label", "=", "\"source data\"", ")", "\n", "tgt_scatter", "=", "ax", ".", "scatter", "(", "tgt_model_tsne", "[", ":", ",", "0", "]", ",", "tgt_model_tsne", "[", ":", ",", "1", "]", ",", "s", "=", "20", ",", "c", "=", "tgt_labels", ",", "cmap", "=", "cmaps", ",", "\n", "label", "=", "\"target data\"", ",", "marker", "=", "'^'", ")", "\n", "\n", "legend1", "=", "ax", ".", "legend", "(", "*", "src_scatter", ".", "legend_elements", "(", ")", ",", "\n", "loc", "=", "\"lower left\"", ",", "title", "=", "\"Classes\"", ")", "\n", "ax", ".", "add_artist", "(", "legend1", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"tsne_plots\"", ")", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"tsne_plots\"", ")", ")", "\n", "\n", "", "file_name", "=", "\"tsne_\"", "+", "model_type", "+", "\"_\"", "+", "train_mode", "+", "\".png\"", "\n", "fig_save_name", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"tsne_plots\"", ",", "file_name", ")", "\n", "plt", ".", "savefig", "(", "fig_save_name", ")", "\n", "plt", ".", "close", "(", ")", "\n", "# '[0]*len(src_labels), cmap=colors,", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils._logger": [[178, 197], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["# colors = ['Greens_r', 'Blues_r']", "\n", "ax", ".", "scatter", "(", "src_model_tsne", "[", ":", ",", "0", "]", ",", "src_model_tsne", "[", ":", ",", "1", "]", ",", "s", "=", "10", ",", "c", "=", "'red'", ",", "\n", "label", "=", "\"source data\"", ")", "\n", "ax", ".", "scatter", "(", "tgt_model_tsne", "[", ":", ",", "0", "]", ",", "tgt_model_tsne", "[", ":", ",", "1", "]", ",", "s", "=", "10", ",", "c", "=", "'blue'", ",", "\n", "label", "=", "\"target data\"", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n", "file_name", "=", "\"tsne_\"", "+", "model_type", "+", "\"_\"", "+", "train_mode", "+", "\"_domain-based.png\"", "\n", "fig_save_name", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"tsne_plots\"", ",", "file_name", ")", "\n", "plt", ".", "savefig", "(", "fig_save_name", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "plot_tsne_one_domain", "(", "model", ",", "src_dl", ",", "device", ",", "save_dir", ",", "model_type", ",", "train_mode", ")", ":", "\n", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "src_data", "=", "src_dl", ".", "dataset", ".", "x_data", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "src_labels", "=", "src_dl", ".", "dataset", ".", "y_data", ".", "view", "(", "(", "-", "1", ")", ")", ".", "long", "(", ")", "# .to(device)", "\n", "src_predictions", ",", "src_features", "=", "model", "(", "src_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.fig2img": [[200, 210], ["io.BytesIO", "fig.savefig", "io.BytesIO.seek", "Image.open"], "function", ["None"], ["\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "16", ",", "10", ")", ")", "\n", "cmaps", "=", "plt", ".", "get_cmap", "(", "'jet'", ")", "\n", "src_scatter", "=", "ax", ".", "scatter", "(", "src_model_tsne", "[", ":", ",", "0", "]", ",", "src_model_tsne", "[", ":", ",", "1", "]", ",", "s", "=", "20", ",", "c", "=", "src_labels", ",", "cmap", "=", "cmaps", ",", "\n", "label", "=", "\"source data\"", ")", "\n", "\n", "legend1", "=", "ax", ".", "legend", "(", "*", "src_scatter", ".", "legend_elements", "(", ")", ",", "\n", "loc", "=", "\"lower left\"", ",", "title", "=", "\"Classes\"", ")", "\n", "ax", ".", "add_artist", "(", "legend1", ")", "\n", "ax", ".", "legend", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils._plot_tsne": [[212, 265], ["print", "sklearn.manifold.TSNE().fit_transform", "sklearn.manifold.TSNE().fit_transform", "matplotlib.figure", "matplotlib.get_cmap", "matplotlib.scatter", "matplotlib.scatter", "plt.scatter.legend_elements", "matplotlib.legend", "os.path.join", "wandb.log", "matplotlib.savefig", "matplotlib.close", "matplotlib.figure", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.legend", "os.path.join", "matplotlib.savefig", "wandb.log", "matplotlib.close", "model.to.to", "torch.no_grad", "model.to.to", "src_dl.dataset.x_data.float", "src_dl.dataset.y_data.view().long", "model.to.", "tgt_dl.dataset.x_data.float", "tgt_dl.dataset.y_data.view().long", "model.to.", "torch.autograd.Variable().data.detach().cpu().numpy().reshape().astype", "torch.autograd.Variable().data.detach().cpu().numpy().reshape().astype", "tgt_dl.dataset.y_data.view().long.numpy", "os.path.exists", "os.mkdir", "sklearn.manifold.TSNE", "sklearn.manifold.TSNE", "os.path.join", "os.path.join", "wandb.Image", "wandb.Image", "src_dl.dataset.y_data.view", "tgt_dl.dataset.y_data.view", "torch.autograd.Variable().data.detach().cpu().numpy().reshape", "torch.autograd.Variable().data.detach().cpu().numpy().reshape", "len", "len", "torch.autograd.Variable().data.detach().cpu().numpy", "torch.autograd.Variable().data.detach().cpu().numpy", "torch.autograd.Variable().data.detach().cpu", "torch.autograd.Variable().data.detach().cpu", "torch.autograd.Variable().data.detach", "torch.autograd.Variable().data.detach", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["None"], ["        ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"tsne_plots\"", ")", ")", "\n", "\n", "", "file_name", "=", "\"tsne_\"", "+", "model_type", "+", "\"_\"", "+", "train_mode", "+", "\".png\"", "\n", "fig_save_name", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"tsne_plots\"", ",", "file_name", ")", "\n", "plt", ".", "savefig", "(", "fig_save_name", ")", "\n", "plt", ".", "close", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.plot_tsne_one_domain": [[267, 295], ["sklearn.manifold.TSNE().fit_transform", "matplotlib.subplots", "matplotlib.get_cmap", "ax.scatter", "ax.legend", "ax.add_artist", "ax.legend", "os.path.join", "matplotlib.savefig", "wandb.log", "matplotlib.close", "torch.no_grad", "src_dl.dataset.x_data.float().to", "src_dl.dataset.y_data.view().long", "model", "torch.autograd.Variable().data.detach().cpu().numpy().reshape().astype", "os.path.exists", "os.mkdir", "sklearn.manifold.TSNE", "ax.scatter.legend_elements", "os.path.join", "os.path.join", "src_dl.dataset.x_data.float", "src_dl.dataset.y_data.view", "torch.autograd.Variable().data.detach().cpu().numpy().reshape", "len", "torch.autograd.Variable().data.detach().cpu().numpy", "torch.autograd.Variable().data.detach().cpu", "torch.autograd.Variable().data.detach", "torch.autograd.Variable"], "function", ["None"], []], "home.repos.pwc.inspect_result.mohamedr002_slarda.Autorgressive_Adaptation.utils.get_nonexistant_path": [[301, 311], ["os.path.splitext", "os.path.exists", "os.path.exists"], "function", ["None"], []]}