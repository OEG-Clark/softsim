{"home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.ImageJitter.__init__": [[53, 55], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transformdict", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "[", "(", "transformtypedict", "[", "k", "]", ",", "transformdict", "[", "k", "]", ")", "for", "k", "in", "transformdict", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.ImageJitter.__call__": [[56, 65], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "enumerate", "len", "transformer().enhance().convert", "transformer().enhance", "transformer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "img", "\n", "randtensor", "=", "torch", ".", "rand", "(", "len", "(", "self", ".", "transforms", ")", ")", "\n", "\n", "for", "i", ",", "(", "transformer", ",", "alpha", ")", "in", "enumerate", "(", "self", ".", "transforms", ")", ":", "\n", "            ", "r", "=", "alpha", "*", "(", "randtensor", "[", "i", "]", "*", "2.0", "-", "1.0", ")", "+", "1", "\n", "out", "=", "transformer", "(", "out", ")", ".", "enhance", "(", "r", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.Denormalize.__init__": [[68, 71], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.Denormalize.__call__": [[72, 76], ["zip", "t.mul_().add_", "t.mul_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "mul_", "(", "s", ")", ".", "add_", "(", "m", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.MiniImageNet.__init__": [[95, 182], ["print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "dataloader.load_data", "dataloader.buildLabelIndex", "sorted", "len", "len", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "dataloader.MiniImageNet.label2ind.keys", "numpy.concatenate", "dataloader.buildLabelIndex", "sorted", "len", "buildLabelIndex().keys", "buildLabelIndex().keys", "len", "len", "ValueError", "dataloader.load_data", "dataloader.load_data", "dataloader.load_data", "dataloader.load_data", "dataloader.MiniImageNet.label2ind.keys", "set", "set", "len", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "dataloader.buildLabelIndex", "dataloader.buildLabelIndex", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.load_data", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.buildLabelIndex", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.buildLabelIndex", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.load_data", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.load_data", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.load_data", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.load_data", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.buildLabelIndex", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.buildLabelIndex"], ["    ", "def", "__init__", "(", "self", ",", "phase", "=", "'train'", ",", "do_not_use_random_transf", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "base_folder", "=", "'miniImagenet'", "\n", "assert", "(", "phase", "==", "'train'", "or", "phase", "==", "'val'", "or", "phase", "==", "'test'", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "name", "=", "'MiniImageNet_'", "+", "phase", "\n", "\n", "print", "(", "'Loading mini ImageNet dataset - phase {0}'", ".", "format", "(", "phase", ")", ")", "\n", "file_train_categories_train_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_train_phase_train.pickle'", ")", "\n", "file_train_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_train_phase_val.pickle'", ")", "\n", "file_train_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_train_phase_test.pickle'", ")", "\n", "file_val_categories_val_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_val.pickle'", ")", "\n", "file_test_categories_test_phase", "=", "os", ".", "path", ".", "join", "(", "\n", "_MINI_IMAGENET_DATASET_DIR", ",", "\n", "'miniImageNet_category_split_test.pickle'", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "# During training phase we only load the training phase images", "\n", "# of the training categories (aka base categories).", "\n", "            ", "data_train", "=", "load_data", "(", "file_train_categories_train_phase", ")", "\n", "self", ".", "data", "=", "data_train", "[", "'data'", "]", "\n", "self", ".", "labels", "=", "data_train", "[", "'labels'", "]", "\n", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "self", ".", "labelIds_base", "=", "self", ".", "labelIds", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "\n", "", "elif", "self", ".", "phase", "==", "'val'", "or", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "if", "self", ".", "phase", "==", "'test'", ":", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "load_data", "(", "file_train_categories_test_phase", ")", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "load_data", "(", "file_test_categories_test_phase", ")", "\n", "", "else", ":", "# phase=='val'", "\n", "# load data that will be used for evaluating the recognition", "\n", "# accuracy of the base categories.", "\n", "                ", "data_base", "=", "load_data", "(", "file_train_categories_val_phase", ")", "\n", "# load data that will be use for evaluating the few-shot recogniton", "\n", "# accuracy on the novel categories.", "\n", "data_novel", "=", "load_data", "(", "file_val_categories_val_phase", ")", "\n", "\n", "", "self", ".", "data", "=", "np", ".", "concatenate", "(", "\n", "[", "data_base", "[", "'data'", "]", ",", "data_novel", "[", "'data'", "]", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "labels", "=", "data_base", "[", "'labels'", "]", "+", "data_novel", "[", "'labels'", "]", "\n", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "\n", "self", ".", "labelIds_base", "=", "buildLabelIndex", "(", "data_base", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "labelIds_novel", "=", "buildLabelIndex", "(", "data_novel", "[", "'labels'", "]", ")", ".", "keys", "(", ")", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "self", ".", "num_cats_novel", "=", "len", "(", "self", ".", "labelIds_novel", ")", "\n", "intersection", "=", "set", "(", "self", ".", "labelIds_base", ")", "&", "set", "(", "self", ".", "labelIds_novel", ")", "\n", "assert", "(", "len", "(", "intersection", ")", "==", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not valid phase {0}'", ".", "format", "(", "self", ".", "phase", ")", ")", "\n", "\n", "", "mean_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "120.39586422", ",", "115.59361427", ",", "104.54012653", "]", "]", "\n", "std_pix", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "70.68188272", ",", "68.27635443", ",", "72.54505529", "]", "]", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean_pix", ",", "std", "=", "std_pix", ")", "\n", "\n", "if", "(", "self", ".", "phase", "==", "'test'", "or", "self", ".", "phase", "==", "'val'", ")", "or", "(", "do_not_use_random_transf", "==", "True", ")", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.MiniImageNet.__getitem__": [[184, 192], ["PIL.Image.fromarray", "dataloader.MiniImageNet.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.MiniImageNet.__len__": [[193, 195], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.__init__": [[198, 233], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "nKnovel", "=", "5", ",", "# number of novel categories.", "\n", "nKbase", "=", "-", "1", ",", "# number of base categories.", "\n", "nExemplars", "=", "1", ",", "# number of training examples per novel category.", "\n", "nTestNovel", "=", "15", "*", "5", ",", "# number of test examples for all the novel categories.", "\n", "nTestBase", "=", "15", "*", "5", ",", "# number of test examples for all the base categories.", "\n", "batch_size", "=", "1", ",", "# number of training episodes per batch.", "\n", "num_workers", "=", "4", ",", "\n", "epoch_size", "=", "2000", ",", "# number of batches per epoch.", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "phase", "=", "self", ".", "dataset", ".", "phase", "\n", "max_possible_nKnovel", "=", "(", "self", ".", "dataset", ".", "num_cats_base", "if", "self", ".", "phase", "==", "'train'", "\n", "else", "self", ".", "dataset", ".", "num_cats_novel", ")", "\n", "assert", "(", "nKnovel", ">=", "0", "and", "nKnovel", "<", "max_possible_nKnovel", ")", "\n", "self", ".", "nKnovel", "=", "nKnovel", "\n", "\n", "max_possible_nKbase", "=", "self", ".", "dataset", ".", "num_cats_base", "\n", "nKbase", "=", "nKbase", "if", "nKbase", ">=", "0", "else", "max_possible_nKbase", "\n", "if", "self", ".", "phase", "==", "'train'", "and", "nKbase", ">", "0", ":", "\n", "            ", "nKbase", "-=", "self", ".", "nKnovel", "\n", "max_possible_nKbase", "-=", "self", ".", "nKnovel", "\n", "\n", "", "assert", "(", "nKbase", ">=", "0", "and", "nKbase", "<=", "max_possible_nKbase", ")", "\n", "self", ".", "nKbase", "=", "nKbase", "\n", "\n", "self", ".", "nExemplars", "=", "nExemplars", "\n", "self", ".", "nTestNovel", "=", "nTestNovel", "\n", "self", ".", "nTestBase", "=", "nTestBase", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch_size", "=", "epoch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "is_eval_mode", "=", "(", "self", ".", "phase", "==", "'test'", ")", "or", "(", "self", ".", "phase", "==", "'val'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.sampleImageIdsFrom": [[234, 251], ["random.sample", "len"], "methods", ["None"], ["", "def", "sampleImageIdsFrom", "(", "self", ",", "cat_id", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique image ids picked from the\n        category `cat_id` (i.e., self.dataset.label2ind[cat_id]).\n\n        Args:\n            cat_id: a scalar with the id of the category from which images will\n                be sampled.\n            sample_size: number of images that will be sampled.\n\n        Returns:\n            image_ids: a list of length `sample_size` with unique image ids.\n        \"\"\"", "\n", "assert", "(", "cat_id", "in", "self", ".", "dataset", ".", "label2ind", ")", "\n", "assert", "(", "len", "(", "self", ".", "dataset", ".", "label2ind", "[", "cat_id", "]", ")", ">=", "sample_size", ")", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "self", ".", "dataset", ".", "label2ind", "[", "cat_id", "]", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.sampleCategories": [[252, 277], ["random.sample", "len", "ValueError"], "methods", ["None"], ["", "def", "sampleCategories", "(", "self", ",", "cat_set", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique categories picked from the\n        `cat_set` set of categories. `cat_set` can be either 'base' or 'novel'.\n\n        Args:\n            cat_set: string that specifies the set of categories from which\n                categories will be sampled.\n            sample_size: number of categories that will be sampled.\n\n        Returns:\n            cat_ids: a list of length `sample_size` with unique category ids.\n        \"\"\"", "\n", "if", "cat_set", "==", "'base'", ":", "\n", "            ", "labelIds", "=", "self", ".", "dataset", ".", "labelIds_base", "\n", "", "elif", "cat_set", "==", "'novel'", ":", "\n", "            ", "labelIds", "=", "self", ".", "dataset", ".", "labelIds_novel", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not recognized category set {}'", ".", "format", "(", "cat_set", ")", ")", "\n", "\n", "", "assert", "(", "len", "(", "labelIds", ")", ">=", "sample_size", ")", "\n", "# return sample_size unique categories chosen from labelIds set of", "\n", "# categories (that can be either self.labelIds_base or self.labelIds_novel)", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "labelIds", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.sample_base_and_novel_categories": [[278, 313], ["sorted", "sorted", "dataloader.FewShotDataloader.sampleCategories", "random.shuffle", "sorted", "sorted", "dataloader.FewShotDataloader.sampleCategories", "dataloader.FewShotDataloader.sampleCategories", "len"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.sampleCategories", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.sampleCategories", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.sampleCategories"], ["", "def", "sample_base_and_novel_categories", "(", "self", ",", "nKbase", ",", "nKnovel", ")", ":", "\n", "        ", "\"\"\"\n        Samples `nKbase` number of base categories and `nKnovel` number of novel\n        categories.\n\n        Args:\n            nKbase: number of base categories\n            nKnovel: number of novel categories\n\n        Returns:\n            Kbase: a list of length 'nKbase' with the ids of the sampled base\n                categories.\n            Knovel: a list of lenght 'nKnovel' with the ids of the sampled novel\n                categories.\n        \"\"\"", "\n", "if", "self", ".", "is_eval_mode", ":", "\n", "            ", "assert", "(", "nKnovel", "<=", "self", ".", "dataset", ".", "num_cats_novel", ")", "\n", "# sample from the set of base categories 'nKbase' number of base", "\n", "# categories.", "\n", "Kbase", "=", "sorted", "(", "self", ".", "sampleCategories", "(", "'base'", ",", "nKbase", ")", ")", "\n", "# sample from the set of novel categories 'nKnovel' number of novel", "\n", "# categories.", "\n", "Knovel", "=", "sorted", "(", "self", ".", "sampleCategories", "(", "'novel'", ",", "nKnovel", ")", ")", "\n", "", "else", ":", "\n", "# sample from the set of base categories 'nKnovel' + 'nKbase' number", "\n", "# of categories.", "\n", "            ", "cats_ids", "=", "self", ".", "sampleCategories", "(", "'base'", ",", "nKnovel", "+", "nKbase", ")", "\n", "assert", "(", "len", "(", "cats_ids", ")", "==", "(", "nKnovel", "+", "nKbase", ")", ")", "\n", "# Randomly pick 'nKnovel' number of fake novel categories and keep", "\n", "# the rest as base categories.", "\n", "random", ".", "shuffle", "(", "cats_ids", ")", "\n", "Knovel", "=", "sorted", "(", "cats_ids", "[", ":", "nKnovel", "]", ")", "\n", "Kbase", "=", "sorted", "(", "cats_ids", "[", "nKnovel", ":", "]", ")", "\n", "\n", "", "return", "Kbase", ",", "Knovel", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.sample_test_examples_for_base_categories": [[314, 346], ["len", "numpy.random.choice", "numpy.unique", "zip", "len", "numpy.arange", "dataloader.FewShotDataloader.sampleImageIdsFrom", "len"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.sampleImageIdsFrom"], ["", "def", "sample_test_examples_for_base_categories", "(", "self", ",", "Kbase", ",", "nTestBase", ")", ":", "\n", "        ", "\"\"\"\n        Sample `nTestBase` number of images from the `Kbase` categories.\n\n        Args:\n            Kbase: a list of length `nKbase` with the ids of the categories from\n                where the images will be sampled.\n            nTestBase: the total number of images that will be sampled.\n\n        Returns:\n            Tbase: a list of length `nTestBase` with 2-element tuples. The 1st\n                element of each tuple is the image id that was sampled and the\n                2nd elemend is its category label (which is in the range\n                [0, len(Kbase)-1]).\n        \"\"\"", "\n", "Tbase", "=", "[", "]", "\n", "if", "len", "(", "Kbase", ")", ">", "0", ":", "\n", "# Sample for each base category a number images such that the total", "\n", "# number sampled images of all categories to be equal to `nTestBase`.", "\n", "            ", "KbaseIndices", "=", "np", ".", "random", ".", "choice", "(", "\n", "np", ".", "arange", "(", "len", "(", "Kbase", ")", ")", ",", "size", "=", "nTestBase", ",", "replace", "=", "True", ")", "\n", "KbaseIndices", ",", "NumImagesPerCategory", "=", "np", ".", "unique", "(", "\n", "KbaseIndices", ",", "return_counts", "=", "True", ")", "\n", "\n", "for", "Kbase_idx", ",", "NumImages", "in", "zip", "(", "KbaseIndices", ",", "NumImagesPerCategory", ")", ":", "\n", "                ", "imd_ids", "=", "self", ".", "sampleImageIdsFrom", "(", "\n", "Kbase", "[", "Kbase_idx", "]", ",", "sample_size", "=", "NumImages", ")", "\n", "Tbase", "+=", "[", "(", "img_id", ",", "Kbase_idx", ")", "for", "img_id", "in", "imd_ids", "]", "\n", "\n", "", "", "assert", "(", "len", "(", "Tbase", ")", "==", "nTestBase", ")", "\n", "\n", "return", "Tbase", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.sample_train_and_test_examples_for_novel_categories": [[347, 395], ["len", "range", "random.shuffle", "len", "len", "dataloader.FewShotDataloader.sampleImageIdsFrom", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.sampleImageIdsFrom"], ["", "def", "sample_train_and_test_examples_for_novel_categories", "(", "\n", "self", ",", "Knovel", ",", "nTestNovel", ",", "nExemplars", ",", "nKbase", ")", ":", "\n", "        ", "\"\"\"Samples train and test examples of the novel categories.\n\n        Args:\n    \t    Knovel: a list with the ids of the novel categories.\n            nTestNovel: the total number of test images that will be sampled\n                from all the novel categories.\n            nExemplars: the number of training examples per novel category that\n                will be sampled.\n            nKbase: the number of base categories. It is used as offset of the\n                category index of each sampled image.\n\n        Returns:\n            Tnovel: a list of length `nTestNovel` with 2-element tuples. The\n                1st element of each tuple is the image id that was sampled and\n                the 2nd element is its category label (which is in the range\n                [nKbase, nKbase + len(Knovel) - 1]).\n            Exemplars: a list of length len(Knovel) * nExemplars of 2-element\n                tuples. The 1st element of each tuple is the image id that was\n                sampled and the 2nd element is its category label (which is in\n                the ragne [nKbase, nKbase + len(Knovel) - 1]).\n        \"\"\"", "\n", "\n", "if", "len", "(", "Knovel", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", ",", "[", "]", "\n", "\n", "", "nKnovel", "=", "len", "(", "Knovel", ")", "\n", "Tnovel", "=", "[", "]", "\n", "Exemplars", "=", "[", "]", "\n", "assert", "(", "(", "nTestNovel", "%", "nKnovel", ")", "==", "0", ")", "\n", "nEvalExamplesPerClass", "=", "nTestNovel", "/", "nKnovel", "\n", "\n", "for", "Knovel_idx", "in", "range", "(", "len", "(", "Knovel", ")", ")", ":", "\n", "            ", "imd_ids", "=", "self", ".", "sampleImageIdsFrom", "(", "\n", "Knovel", "[", "Knovel_idx", "]", ",", "\n", "sample_size", "=", "(", "nEvalExamplesPerClass", "+", "nExemplars", ")", ")", "\n", "\n", "imds_tnovel", "=", "imd_ids", "[", ":", "nEvalExamplesPerClass", "]", "\n", "imds_ememplars", "=", "imd_ids", "[", "nEvalExamplesPerClass", ":", "]", "\n", "\n", "Tnovel", "+=", "[", "(", "img_id", ",", "nKbase", "+", "Knovel_idx", ")", "for", "img_id", "in", "imds_tnovel", "]", "\n", "Exemplars", "+=", "[", "(", "img_id", ",", "nKbase", "+", "Knovel_idx", ")", "for", "img_id", "in", "imds_ememplars", "]", "\n", "", "assert", "(", "len", "(", "Tnovel", ")", "==", "nTestNovel", ")", "\n", "assert", "(", "len", "(", "Exemplars", ")", "==", "len", "(", "Knovel", ")", "*", "nExemplars", ")", "\n", "random", ".", "shuffle", "(", "Exemplars", ")", "\n", "\n", "return", "Tnovel", ",", "Exemplars", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.sample_episode": [[396, 415], ["dataloader.FewShotDataloader.sample_base_and_novel_categories", "dataloader.FewShotDataloader.sample_test_examples_for_base_categories", "dataloader.FewShotDataloader.sample_train_and_test_examples_for_novel_categories", "random.shuffle"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.sample_base_and_novel_categories", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.sample_test_examples_for_base_categories", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.sample_train_and_test_examples_for_novel_categories"], ["", "def", "sample_episode", "(", "self", ")", ":", "\n", "        ", "\"\"\"Samples a training episode.\"\"\"", "\n", "nKnovel", "=", "self", ".", "nKnovel", "\n", "nKbase", "=", "self", ".", "nKbase", "\n", "nTestNovel", "=", "self", ".", "nTestNovel", "\n", "nTestBase", "=", "self", ".", "nTestBase", "\n", "nExemplars", "=", "self", ".", "nExemplars", "\n", "\n", "Kbase", ",", "Knovel", "=", "self", ".", "sample_base_and_novel_categories", "(", "nKbase", ",", "nKnovel", ")", "\n", "Tbase", "=", "self", ".", "sample_test_examples_for_base_categories", "(", "Kbase", ",", "nTestBase", ")", "\n", "Tnovel", ",", "Exemplars", "=", "self", ".", "sample_train_and_test_examples_for_novel_categories", "(", "\n", "Knovel", ",", "nTestNovel", ",", "nExemplars", ",", "nKbase", ")", "\n", "\n", "# concatenate the base and novel category examples.", "\n", "Test", "=", "Tbase", "+", "Tnovel", "\n", "random", ".", "shuffle", "(", "Test", ")", "\n", "Kall", "=", "Kbase", "+", "Knovel", "\n", "\n", "return", "Exemplars", ",", "Test", ",", "Kall", ",", "nKbase", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.createExamplesTensorData": [[416, 439], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "createExamplesTensorData", "(", "self", ",", "examples", ")", ":", "\n", "        ", "\"\"\"\n        Creates the examples image and label tensor data.\n\n        Args:\n            examples: a list of 2-element tuples, each representing a\n                train or test example. The 1st element of each tuple\n                is the image id of the example and 2nd element is the\n                category label of the example, which is in the range\n                [0, nK - 1], where nK is the total number of categories\n                (both novel and base).\n\n        Returns:\n            images: a tensor of shape [nExamples, Height, Width, 3] with the\n                example images, where nExamples is the number of examples\n                (i.e., nExamples = len(examples)).\n            labels: a tensor of shape [nExamples] with the category label\n                of each example.\n        \"\"\"", "\n", "images", "=", "torch", ".", "stack", "(", "\n", "[", "self", ".", "dataset", "[", "img_idx", "]", "[", "0", "]", "for", "img_idx", ",", "_", "in", "examples", "]", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "label", "for", "_", ",", "label", "in", "examples", "]", ")", "\n", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.get_iterator": [[440, 462], ["random.seed", "numpy.random.seed", "torchnet.dataset.ListDataset", "torchnet.dataset.ListDataset.parallel", "dataloader.FewShotDataloader.sample_episode", "dataloader.FewShotDataloader.createExamplesTensorData", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "dataloader.FewShotDataloader.createExamplesTensorData", "range"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.sample_episode", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.createExamplesTensorData", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.createExamplesTensorData"], ["", "def", "get_iterator", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "rand_seed", "=", "epoch", "\n", "random", ".", "seed", "(", "rand_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "\n", "def", "load_function", "(", "iter_idx", ")", ":", "\n", "            ", "Exemplars", ",", "Test", ",", "Kall", ",", "nKbase", "=", "self", ".", "sample_episode", "(", ")", "\n", "Xt", ",", "Yt", "=", "self", ".", "createExamplesTensorData", "(", "Test", ")", "\n", "Kall", "=", "torch", ".", "LongTensor", "(", "Kall", ")", "\n", "if", "len", "(", "Exemplars", ")", ">", "0", ":", "\n", "                ", "Xe", ",", "Ye", "=", "self", ".", "createExamplesTensorData", "(", "Exemplars", ")", "\n", "return", "Xe", ",", "Ye", ",", "Xt", ",", "Yt", ",", "Kall", ",", "nKbase", "\n", "", "else", ":", "\n", "                ", "return", "Xt", ",", "Yt", ",", "Kall", ",", "nKbase", "\n", "\n", "", "", "tnt_dataset", "=", "tnt", ".", "dataset", ".", "ListDataset", "(", "\n", "elem_list", "=", "range", "(", "self", ".", "epoch_size", ")", ",", "load", "=", "load_function", ")", "\n", "data_loader", "=", "tnt_dataset", ".", "parallel", "(", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "(", "0", "if", "self", ".", "is_eval_mode", "else", "self", ".", "num_workers", ")", ",", "\n", "shuffle", "=", "(", "False", "if", "self", ".", "is_eval_mode", "else", "True", ")", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.__call__": [[463, 465], ["dataloader.FewShotDataloader.get_iterator"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.get_iterator"], ["", "def", "__call__", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "get_iterator", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.FewShotDataloader.__len__": [[466, 468], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "epoch_size", "/", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.ImageNetLowShot.__init__": [[471, 531], ["print", "transforms_list.append", "transforms_list.append", "transforms_list.append", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "dataloader.buildLabelIndex", "sorted", "len", "len", "open", "json.load", "transforms_list.append", "transforms_list.append", "transforms_list.append", "transforms_list.append", "transforms_list.append", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "dataloader.ImageNetLowShot.label2ind.keys", "len", "torchvision.Scale", "torchvision.Scale", "torchvision.Scale", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.RandomSizedCrop", "torchvision.RandomSizedCrop", "torchvision.RandomSizedCrop", "dataloader.ImageJitter", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "numpy.asarray", "set", "set", "len"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.buildLabelIndex"], ["    ", "def", "__init__", "(", "self", ",", "\n", "phase", "=", "'train'", ",", "\n", "split", "=", "'train'", ",", "\n", "do_not_use_random_transf", "=", "False", ")", ":", "\n", "        ", "self", ".", "phase", "=", "phase", "\n", "self", ".", "split", "=", "split", "\n", "assert", "(", "phase", "==", "'train'", "or", "phase", "==", "'test'", "or", "phase", "==", "'val'", ")", "\n", "assert", "(", "split", "==", "'train'", "or", "split", "==", "'val'", ")", "\n", "self", ".", "name", "=", "'ImageNetLowShot_Phase_'", "+", "phase", "+", "'_Split_'", "+", "split", "\n", "\n", "print", "(", "'Loading ImageNet dataset (for few-shot benchmark) - phase {0}'", ".", "\n", "format", "(", "phase", ")", ")", "\n", "\n", "#***********************************************************************", "\n", "with", "open", "(", "_IMAGENET_LOWSHOT_BENCHMARK_CATEGORY_SPLITS_PATH", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "label_idx", "=", "json", ".", "load", "(", "f", ")", "\n", "", "base_classes", "=", "label_idx", "[", "'base_classes'", "]", "\n", "novel_classes_val_phase", "=", "label_idx", "[", "'novel_classes_1'", "]", "\n", "novel_classes_test_phase", "=", "label_idx", "[", "'novel_classes_2'", "]", "\n", "#***********************************************************************", "\n", "\n", "transforms_list", "=", "[", "]", "\n", "if", "(", "phase", "!=", "'train'", ")", "or", "(", "do_not_use_random_transf", "==", "True", ")", ":", "\n", "            ", "transforms_list", ".", "append", "(", "transforms", ".", "Scale", "(", "256", ")", ")", "\n", "transforms_list", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "224", ")", ")", "\n", "", "else", ":", "\n", "            ", "transforms_list", ".", "append", "(", "transforms", ".", "RandomSizedCrop", "(", "224", ")", ")", "\n", "jitter_params", "=", "{", "'Brightness'", ":", "0.4", ",", "'Contrast'", ":", "0.4", ",", "'Color'", ":", "0.4", "}", "\n", "transforms_list", ".", "append", "(", "ImageJitter", "(", "jitter_params", ")", ")", "\n", "transforms_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "\n", "", "transforms_list", ".", "append", "(", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ")", "\n", "transforms_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "mean_pix", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std_pix", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "transforms_list", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", "=", "mean_pix", ",", "std", "=", "std_pix", ")", ")", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transforms_list", ")", "\n", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "_IMAGENET_DATASET_DIR", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "_IMAGENET_DATASET_DIR", ",", "'val'", ")", "\n", "self", ".", "data", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", "if", "split", "==", "'train'", "else", "valdir", ",", "self", ".", "transform", ")", "\n", "self", ".", "labels", "=", "[", "item", "[", "1", "]", "for", "item", "in", "self", ".", "data", ".", "imgs", "]", "\n", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "assert", "(", "self", ".", "num_cats", "==", "1000", ")", "\n", "\n", "self", ".", "labelIds_base", "=", "base_classes", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "if", "self", ".", "phase", "==", "'val'", "or", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "self", ".", "labelIds_novel", "=", "(", "\n", "novel_classes_val_phase", "if", "(", "self", ".", "phase", "==", "'val'", ")", "else", "\n", "novel_classes_test_phase", ")", "\n", "self", ".", "num_cats_novel", "=", "len", "(", "self", ".", "labelIds_novel", ")", "\n", "\n", "intersection", "=", "set", "(", "self", ".", "labelIds_base", ")", "&", "set", "(", "self", ".", "labelIds_novel", ")", "\n", "assert", "(", "len", "(", "intersection", ")", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.ImageNetLowShot.__getitem__": [[532, 535], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.ImageNetLowShot.__len__": [[536, 538], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.ImageNet.__init__": [[541, 562], ["print", "transforms_list.append", "transforms_list.append", "transforms_list.append", "transforms_list.append", "transforms_list.append", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.Scale", "torchvision.Scale", "torchvision.Scale", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "numpy.asarray"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "split", "=", "split", "\n", "assert", "(", "split", "==", "'train'", "or", "split", "==", "'val'", ")", "\n", "self", ".", "name", "=", "'ImageNet_Split_'", "+", "split", "\n", "\n", "print", "(", "'Loading ImageNet dataset - split {0}'", ".", "format", "(", "split", ")", ")", "\n", "transforms_list", "=", "[", "]", "\n", "transforms_list", ".", "append", "(", "transforms", ".", "Scale", "(", "256", ")", ")", "\n", "transforms_list", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "224", ")", ")", "\n", "transforms_list", ".", "append", "(", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ")", "\n", "transforms_list", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "mean_pix", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std_pix", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "transforms_list", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", "=", "mean_pix", ",", "std", "=", "std_pix", ")", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "transforms_list", ")", "\n", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "_IMAGENET_DATASET_DIR", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "_IMAGENET_DATASET_DIR", ",", "'val'", ")", "\n", "self", ".", "data", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", "if", "split", "==", "'train'", "else", "valdir", ",", "self", ".", "transform", ")", "\n", "self", ".", "labels", "=", "[", "item", "[", "1", "]", "for", "item", "in", "self", ".", "data", ".", "imgs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.ImageNet.__getitem__": [[563, 566], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", "\n", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.ImageNet.__len__": [[567, 569], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.SimpleDataloader.__init__": [[572, 577], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", ",", "num_workers", "=", "4", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "epoch_size", "=", "len", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.SimpleDataloader.get_iterator": [[578, 592], ["torchnet.dataset.ListDataset", "torchnet.dataset.ListDataset.parallel", "range"], "methods", ["None"], ["", "def", "get_iterator", "(", "self", ")", ":", "\n", "        ", "def", "load_fun_", "(", "idx", ")", ":", "\n", "            ", "img", ",", "label", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "return", "img", ",", "label", "\n", "\n", "", "tnt_dataset", "=", "tnt", ".", "dataset", ".", "ListDataset", "(", "\n", "elem_list", "=", "range", "(", "self", ".", "epoch_size", ")", ",", "load", "=", "load_fun_", ")", "\n", "\n", "data_loader", "=", "tnt_dataset", ".", "parallel", "(", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.SimpleDataloader.__call__": [[593, 595], ["dataloader.SimpleDataloader.get_iterator"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.get_iterator"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_iterator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.SimpleDataloader.__len__": [[596, 598], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "epoch_size", "/", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.ImageNetLowShotFeaturesLegacy.__init__": [[601, 651], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "h5py.File", "[].tolist", "dataloader.buildLabelIndex", "sorted", "len", "len", "open", "json.load", "dataloader.ImageNetLowShotFeaturesLegacy.label2ind.keys", "len", "set", "set", "len"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.buildLabelIndex"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_dir", ",", "\n", "phase", "=", "'train'", ",", "\n", "add_novel_split", "=", "'val'", ")", ":", "\n", "\n", "        ", "self", ".", "phase", "=", "phase", "\n", "assert", "(", "phase", "==", "'train'", "or", "phase", "==", "'test'", "or", "phase", "==", "'val'", ")", "\n", "self", ".", "name", "=", "'ImageNetLowShotFeatures_Phase_'", "+", "phase", "\n", "\n", "split", "=", "'train'", "if", "(", "phase", "==", "'train'", ")", "else", "'val'", "\n", "dataset_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'feature_dataset_'", "+", "split", "+", "'.json'", ")", "\n", "self", ".", "data_file", "=", "h5py", ".", "File", "(", "dataset_file", ",", "'r'", ")", "\n", "self", ".", "count", "=", "self", ".", "data_file", "[", "'count'", "]", "[", "0", "]", "\n", "self", ".", "features", "=", "self", ".", "data_file", "[", "'all_features'", "]", "[", "...", "]", "\n", "self", ".", "labels", "=", "self", ".", "data_file", "[", "'all_labels'", "]", "[", ":", "self", ".", "count", "]", ".", "tolist", "(", ")", "\n", "\n", "#***********************************************************************", "\n", "with", "open", "(", "_IMAGENET_LOWSHOT_BENCHMARK_CATEGORY_SPLITS_PATH", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "label_idx", "=", "json", ".", "load", "(", "f", ")", "\n", "", "base_classes", "=", "label_idx", "[", "'base_classes'", "]", "\n", "base_classes_val_phase", "=", "label_idx", "[", "'base_classes_1'", "]", "\n", "base_classes_test_phase", "=", "label_idx", "[", "'base_classes_2'", "]", "\n", "novel_classes_val_phase", "=", "label_idx", "[", "'novel_classes_1'", "]", "\n", "novel_classes_test_phase", "=", "label_idx", "[", "'novel_classes_2'", "]", "\n", "#***********************************************************************", "\n", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "assert", "(", "self", ".", "num_cats", "==", "1000", ")", "\n", "\n", "self", ".", "labelIds_base", "=", "base_classes", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "\n", "novel_split", "=", "add_novel_split", "if", "(", "self", ".", "phase", "==", "'train'", ")", "else", "self", ".", "phase", "\n", "if", "novel_split", "==", "'val'", "or", "novel_split", "==", "'test'", ":", "\n", "            ", "self", ".", "labelIds_novel", "=", "(", "\n", "novel_classes_val_phase", "if", "(", "novel_split", "==", "'val'", ")", "else", "\n", "novel_classes_test_phase", ")", "\n", "self", ".", "num_cats_novel", "=", "len", "(", "self", ".", "labelIds_novel", ")", "\n", "\n", "intersection", "=", "set", "(", "self", ".", "labelIds_base", ")", "&", "set", "(", "self", ".", "labelIds_novel", ")", "\n", "assert", "(", "len", "(", "intersection", ")", "==", "0", ")", "\n", "\n", "self", ".", "base_classes_subset", "=", "(", "\n", "base_classes_val_phase", "if", "(", "novel_split", "==", "'val'", ")", "else", "\n", "base_classes_test_phase", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "base_classes_subset", "=", "base_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.ImageNetLowShotFeaturesLegacy.__getitem__": [[652, 656], ["torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "features_this", "=", "torch", ".", "Tensor", "(", "self", ".", "features", "[", "index", "]", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "label_this", "=", "self", ".", "labels", "[", "index", "]", "\n", "return", "features_this", ",", "label_this", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.ImageNetLowShotFeaturesLegacy.__len__": [[657, 659], ["int"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.ImageNetLowShotFeatures.__init__": [[662, 713], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "h5py.File", "[].tolist", "dataloader.buildLabelIndex", "sorted", "len", "len", "open", "json.load", "dataloader.ImageNetLowShotFeatures.label2ind.keys", "len", "set", "set", "len"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.buildLabelIndex"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_dir", ",", "# path to the directory with the saved ImageNet features.", "\n", "image_split", "=", "'train'", ",", "# the image split of the ImageNet that will be loaded.", "\n", "phase", "=", "'train'", ",", "# whether the dataset will be used for training, validating, or testing a model.", "\n", ")", ":", "\n", "        ", "assert", "(", "image_split", "==", "'train'", "or", "image_split", "==", "'val'", ")", "\n", "assert", "(", "phase", "==", "'train'", "or", "phase", "==", "'val'", "or", "phase", "==", "'test'", ")", "\n", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "image_split", "=", "image_split", "\n", "self", ".", "name", "=", "(", "'ImageNetLowShotFeatures_ImageSplit_'", "+", "self", ".", "image_split", "\n", "+", "'_Phase_'", "+", "self", ".", "phase", ")", "\n", "\n", "dataset_file", "=", "os", ".", "path", ".", "join", "(", "\n", "data_dir", ",", "'feature_dataset_'", "+", "self", ".", "image_split", "+", "'.json'", ")", "\n", "self", ".", "data_file", "=", "h5py", ".", "File", "(", "dataset_file", ",", "'r'", ")", "\n", "self", ".", "count", "=", "self", ".", "data_file", "[", "'count'", "]", "[", "0", "]", "\n", "self", ".", "features", "=", "self", ".", "data_file", "[", "'all_features'", "]", "[", "...", "]", "\n", "self", ".", "labels", "=", "self", ".", "data_file", "[", "'all_labels'", "]", "[", ":", "self", ".", "count", "]", ".", "tolist", "(", ")", "\n", "\n", "#***********************************************************************", "\n", "with", "open", "(", "_IMAGENET_LOWSHOT_BENCHMARK_CATEGORY_SPLITS_PATH", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "label_idx", "=", "json", ".", "load", "(", "f", ")", "\n", "", "base_classes", "=", "label_idx", "[", "'base_classes'", "]", "\n", "base_classes_val_split", "=", "label_idx", "[", "'base_classes_1'", "]", "\n", "base_classes_test_split", "=", "label_idx", "[", "'base_classes_2'", "]", "\n", "novel_classes_val_split", "=", "label_idx", "[", "'novel_classes_1'", "]", "\n", "novel_classes_test_split", "=", "label_idx", "[", "'novel_classes_2'", "]", "\n", "#***********************************************************************", "\n", "\n", "self", ".", "label2ind", "=", "buildLabelIndex", "(", "self", ".", "labels", ")", "\n", "self", ".", "labelIds", "=", "sorted", "(", "self", ".", "label2ind", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_cats", "=", "len", "(", "self", ".", "labelIds", ")", "\n", "assert", "(", "self", ".", "num_cats", "==", "1000", ")", "\n", "\n", "self", ".", "labelIds_base", "=", "base_classes", "\n", "self", ".", "num_cats_base", "=", "len", "(", "self", ".", "labelIds_base", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'val'", "or", "self", ".", "phase", "==", "'test'", ":", "\n", "            ", "self", ".", "labelIds_novel", "=", "(", "\n", "novel_classes_val_split", "if", "(", "self", ".", "phase", "==", "'val'", ")", "else", "\n", "novel_classes_test_split", ")", "\n", "self", ".", "num_cats_novel", "=", "len", "(", "self", ".", "labelIds_novel", ")", "\n", "\n", "intersection", "=", "set", "(", "self", ".", "labelIds_base", ")", "&", "set", "(", "self", ".", "labelIds_novel", ")", "\n", "assert", "(", "len", "(", "intersection", ")", "==", "0", ")", "\n", "self", ".", "base_classes_eval_split", "=", "(", "\n", "base_classes_val_split", "if", "(", "self", ".", "phase", "==", "'val'", ")", "else", "\n", "base_classes_test_split", ")", "\n", "self", ".", "base_classes_subset", "=", "self", ".", "base_classes_eval_split", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.ImageNetLowShotFeatures.__getitem__": [[714, 718], ["torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "features_this", "=", "torch", ".", "Tensor", "(", "self", ".", "features", "[", "index", "]", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "label_this", "=", "self", ".", "labels", "[", "index", "]", "\n", "return", "features_this", ",", "label_this", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.ImageNetLowShotFeatures.__len__": [[719, 721], ["int"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloader.__init__": [[724, 781], ["sorted", "sorted", "set", "set", "sorted", "sorted", "len", "len", "len", "len", "len", "enumerate", "set.intersection"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dataset_train_novel", ",", "\n", "dataset_evaluation", ",", "\n", "nExemplars", "=", "1", ",", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "4", ")", ":", "\n", "\n", "        ", "self", ".", "nExemplars", "=", "nExemplars", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "dataset_train_novel", "=", "dataset_train_novel", "\n", "self", ".", "dataset_evaluation", "=", "dataset_evaluation", "\n", "\n", "assert", "(", "self", ".", "dataset_evaluation", ".", "labelIds_novel", "==", "\n", "self", ".", "dataset_train_novel", ".", "labelIds_novel", ")", "\n", "\n", "assert", "(", "self", ".", "dataset_evaluation", ".", "labelIds_base", "==", "\n", "self", ".", "dataset_train_novel", ".", "labelIds_base", ")", "\n", "\n", "assert", "(", "self", ".", "dataset_evaluation", ".", "base_classes_eval_split", "==", "\n", "self", ".", "dataset_train_novel", ".", "base_classes_eval_split", ")", "\n", "\n", "self", ".", "nKnovel", "=", "self", ".", "dataset_evaluation", ".", "num_cats_novel", "\n", "self", ".", "nKbase", "=", "self", ".", "dataset_evaluation", ".", "num_cats_base", "\n", "\n", "# Category ids of the base categories.", "\n", "self", ".", "Kbase", "=", "sorted", "(", "self", ".", "dataset_evaluation", ".", "labelIds_base", ")", "\n", "assert", "(", "self", ".", "nKbase", "==", "len", "(", "self", ".", "Kbase", ")", ")", "\n", "# Category ids of the novel categories.", "\n", "self", ".", "Knovel", "=", "sorted", "(", "self", ".", "dataset_evaluation", ".", "labelIds_novel", ")", "\n", "assert", "(", "self", ".", "nKnovel", "==", "len", "(", "self", ".", "Knovel", ")", ")", "\n", "\n", "self", ".", "Kall", "=", "self", ".", "Kbase", "+", "self", ".", "Knovel", "\n", "\n", "self", ".", "CategoryId2LabelIndex", "=", "{", "\n", "category_id", ":", "label_index", "for", "label_index", ",", "category_id", "in", "enumerate", "(", "self", ".", "Kall", ")", "\n", "}", "\n", "self", ".", "Kbase_eval_split", "=", "self", ".", "dataset_train_novel", ".", "base_classes_eval_split", "\n", "\n", "Kbase_set", "=", "set", "(", "self", ".", "Kall", "[", ":", "self", ".", "nKbase", "]", ")", "\n", "Kbase_eval_split_set", "=", "set", "(", "self", ".", "Kbase_eval_split", ")", "\n", "assert", "(", "len", "(", "set", ".", "intersection", "(", "Kbase_set", ",", "Kbase_eval_split_set", ")", ")", "==", "len", "(", "Kbase_eval_split_set", ")", ")", "\n", "\n", "self", ".", "base_eval_split_labels", "=", "sorted", "(", "\n", "[", "self", ".", "CategoryId2LabelIndex", "[", "category_id", "]", "for", "category_id", "in", "self", ".", "Kbase_eval_split", "]", "\n", ")", "\n", "\n", "# Collect the image indices of the evaluation set for both the base and", "\n", "# the novel categories.", "\n", "data_indices", "=", "[", "]", "\n", "for", "category_id", "in", "self", ".", "Kbase_eval_split", ":", "\n", "            ", "data_indices", "+=", "self", ".", "dataset_evaluation", ".", "label2ind", "[", "category_id", "]", "\n", "", "for", "category_id", "in", "self", ".", "Knovel", ":", "\n", "            ", "data_indices", "+=", "self", ".", "dataset_evaluation", ".", "label2ind", "[", "category_id", "]", "\n", "", "self", ".", "eval_data_indices", "=", "sorted", "(", "data_indices", ")", "\n", "self", ".", "epoch_size", "=", "len", "(", "self", ".", "eval_data_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloader.base_category_label_indices": [[782, 784], ["None"], "methods", ["None"], ["", "def", "base_category_label_indices", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_eval_split_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloader.novel_category_label_indices": [[785, 787], ["range", "len"], "methods", ["None"], ["", "def", "novel_category_label_indices", "(", "self", ")", ":", "\n", "        ", "return", "range", "(", "self", ".", "nKbase", ",", "len", "(", "self", ".", "Kall", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloader.sampleImageIdsFrom": [[788, 805], ["random.sample", "len"], "methods", ["None"], ["", "def", "sampleImageIdsFrom", "(", "self", ",", "cat_id", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique image ids picked from the\n        category `cat_id` (i.e., self.dataset_train_novel.label2ind[cat_id]).\n\n        Args:\n            cat_id: a scalar with the id of the category from which images will\n                be sampled.\n            sample_size: number of images that will be sampled.\n\n        Returns:\n            image_ids: a list of length `sample_size` with unique image ids.\n        \"\"\"", "\n", "assert", "(", "cat_id", "in", "self", ".", "dataset_train_novel", ".", "label2ind", ")", "\n", "assert", "(", "len", "(", "self", ".", "dataset_train_novel", ".", "label2ind", "[", "cat_id", "]", ")", ">=", "sample_size", ")", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "self", ".", "dataset_train_novel", ".", "label2ind", "[", "cat_id", "]", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloader.sample_training_examples_for_novel_categories": [[806, 828], ["enumerate", "random.shuffle", "dataloader.LowShotDataloader.sampleImageIdsFrom"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.sampleImageIdsFrom"], ["", "def", "sample_training_examples_for_novel_categories", "(", "\n", "self", ",", "Knovel", ",", "nExemplars", ",", "nKbase", ")", ":", "\n", "        ", "\"\"\"Samples (a few) training examples for the novel categories.\n\n        Args:\n            Knovel: a list with the ids of the novel categories.\n            nExemplars: the number of training examples per novel category.\n            nKbase: the number of base categories.\n\n        Returns:\n            Exemplars: a list of length len(Knovel) * nExemplars of 2-element\n                tuples. The 1st element of each tuple is the image id that was\n                sampled and the 2nd element is its category label (which is in\n                the ragne [nKbase, nKbase + len(Knovel) - 1]).\n        \"\"\"", "\n", "Exemplars", "=", "[", "]", "\n", "for", "knovel_idx", ",", "knovel_label", "in", "enumerate", "(", "Knovel", ")", ":", "\n", "            ", "imds", "=", "self", ".", "sampleImageIdsFrom", "(", "knovel_label", ",", "sample_size", "=", "nExemplars", ")", "\n", "Exemplars", "+=", "[", "(", "img_id", ",", "nKbase", "+", "knovel_idx", ")", "for", "img_id", "in", "imds", "]", "\n", "", "random", ".", "shuffle", "(", "Exemplars", ")", "\n", "\n", "return", "Exemplars", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloader.create_examples_tensor_data": [[829, 853], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "create_examples_tensor_data", "(", "self", ",", "examples", ")", ":", "\n", "        ", "\"\"\"\n        Creates the examples image and label tensor data.\n\n        Args:\n            examples: a list of 2-element tuples, each representing a\n                train or test example. The 1st element of each tuple\n                is the image id of the example and 2nd element is the\n                category label of the example, which is in the range\n                [0, nK - 1], where nK is the total number of categories\n                (both novel and base).\n\n        Returns:\n            images: a tensor of shape [nExamples, Height, Width, 3] with the\n                example images, where nExamples is the number of examples\n                (i.e., nExamples = len(examples)).\n            labels: a tensor of shape [nExamples] with the category label\n                of each example.\n        \"\"\"", "\n", "images", "=", "torch", ".", "stack", "(", "\n", "[", "self", ".", "dataset_train_novel", "[", "img_idx", "]", "[", "0", "]", "for", "img_idx", ",", "_", "in", "examples", "]", ",", "\n", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "label", "for", "_", ",", "label", "in", "examples", "]", ")", "\n", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloader.sample_training_data_for_novel_categories": [[854, 866], ["random.seed", "dataloader.LowShotDataloader.sample_training_examples_for_novel_categories", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "dataloader.LowShotDataloader.create_examples_tensor_data"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloader.sample_training_examples_for_novel_categories", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.create_examples_tensor_data"], ["", "def", "sample_training_data_for_novel_categories", "(", "self", ",", "exp_id", "=", "0", ")", ":", "\n", "        ", "nKnovel", "=", "self", ".", "nKnovel", "\n", "nKbase", "=", "self", ".", "nKbase", "\n", "random", ".", "seed", "(", "exp_id", ")", "# fix the seed for this experiment.", "\n", "# Sample `nExemplars` number of training examples per novel category.", "\n", "train_examples", "=", "self", ".", "sample_training_examples_for_novel_categories", "(", "\n", "self", ".", "Knovel", ",", "self", ".", "nExemplars", ",", "nKbase", ")", "\n", "Kall", "=", "torch", ".", "LongTensor", "(", "self", ".", "Kall", ")", "\n", "images_train", ",", "labels_train", "=", "self", ".", "create_examples_tensor_data", "(", "\n", "train_examples", ")", "\n", "\n", "return", "images_train", ",", "labels_train", ",", "Kall", ",", "nKbase", ",", "nKnovel", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloader.get_iterator": [[867, 881], ["torchnet.dataset.ListDataset", "torchnet.dataset.ListDataset.parallel", "range"], "methods", ["None"], ["", "def", "get_iterator", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "def", "load_fun_", "(", "idx", ")", ":", "\n", "            ", "img_idx", "=", "self", ".", "eval_data_indices", "[", "idx", "]", "\n", "img", ",", "category_id", "=", "self", ".", "dataset_evaluation", "[", "img_idx", "]", "\n", "label", "=", "(", "self", ".", "CategoryId2LabelIndex", "[", "category_id", "]", "\n", "if", "(", "category_id", "in", "self", ".", "CategoryId2LabelIndex", ")", "else", "-", "1", ")", "\n", "return", "img", ",", "label", "\n", "\n", "", "tnt_dataset", "=", "tnt", ".", "dataset", ".", "ListDataset", "(", "\n", "elem_list", "=", "range", "(", "self", ".", "epoch_size", ")", ",", "load", "=", "load_fun_", ")", "\n", "data_loader", "=", "tnt_dataset", ".", "parallel", "(", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloader.__call__": [[882, 884], ["dataloader.LowShotDataloader.get_iterator"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.get_iterator"], ["", "def", "__call__", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "get_iterator", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloader.__len__": [[885, 887], ["int", "math.ceil", "float"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "math", ".", "ceil", "(", "float", "(", "self", ".", "epoch_size", ")", "/", "self", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.__init__": [[890, 920], ["sorted", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dataset_train_novel", ",", "\n", "dataset_evaluation", ",", "\n", "nExemplars", "=", "1", ",", "\n", "batch_size", "=", "1", ",", "\n", "num_workers", "=", "4", ")", ":", "\n", "\n", "        ", "self", ".", "dataset_train_novel", "=", "dataset_train_novel", "\n", "self", ".", "dataset_evaluation", "=", "dataset_evaluation", "\n", "\n", "assert", "(", "self", ".", "dataset_evaluation", ".", "labelIds_novel", "==", "\n", "self", ".", "dataset_train_novel", ".", "labelIds_novel", ")", "\n", "\n", "# Collect the image indices of the evaluation set for both the base and", "\n", "# the novel categories.", "\n", "data_inds", "=", "[", "]", "\n", "for", "kid", "in", "self", ".", "dataset_evaluation", ".", "labelIds_base", ":", "\n", "            ", "data_inds", "+=", "self", ".", "dataset_evaluation", ".", "label2ind", "[", "kid", "]", "\n", "", "for", "kid", "in", "self", ".", "dataset_evaluation", ".", "labelIds_novel", ":", "\n", "            ", "data_inds", "+=", "self", ".", "dataset_evaluation", ".", "label2ind", "[", "kid", "]", "\n", "", "self", ".", "eval_data_indices", "=", "sorted", "(", "data_inds", ")", "\n", "\n", "self", ".", "nKnovel", "=", "self", ".", "dataset_evaluation", ".", "num_cats_novel", "\n", "self", ".", "nKbase", "=", "self", ".", "dataset_evaluation", ".", "num_cats_base", "\n", "\n", "self", ".", "nExemplars", "=", "nExemplars", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch_size", "=", "len", "(", "self", ".", "eval_data_indices", ")", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.sampleImageIdsFrom": [[921, 938], ["random.sample", "len"], "methods", ["None"], ["", "def", "sampleImageIdsFrom", "(", "self", ",", "cat_id", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique image ids picked from the\n        category `cat_id` (i.e., self.dataset_train_novel.label2ind[cat_id]).\n\n        Args:\n            cat_id: a scalar with the id of the category from which images will\n                be sampled.\n            sample_size: number of images that will be sampled.\n\n        Returns:\n            image_ids: a list of length `sample_size` with unique image ids.\n        \"\"\"", "\n", "assert", "(", "cat_id", "in", "self", ".", "dataset_train_novel", ".", "label2ind", ")", "\n", "assert", "(", "len", "(", "self", ".", "dataset_train_novel", ".", "label2ind", "[", "cat_id", "]", ")", ">=", "sample_size", ")", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "self", ".", "dataset_train_novel", ".", "label2ind", "[", "cat_id", "]", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.sampleCategories": [[939, 964], ["random.sample", "len", "ValueError"], "methods", ["None"], ["", "def", "sampleCategories", "(", "self", ",", "cat_set", ",", "sample_size", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Samples `sample_size` number of unique categories picked from the\n        `cat_set` set of categories. `cat_set` can be either 'base' or 'novel'.\n\n        Args:\n            cat_set: string that specifies the set of categories from which\n                categories will be sampled.\n            sample_size: number of categories that will be sampled.\n\n        Returns:\n            cat_ids: a list of length `sample_size` with unique category ids.\n        \"\"\"", "\n", "if", "cat_set", "==", "'base'", ":", "\n", "            ", "labelIds", "=", "self", ".", "dataset_evaluation", ".", "labelIds_base", "\n", "", "elif", "cat_set", "==", "'novel'", ":", "\n", "            ", "labelIds", "=", "self", ".", "dataset_evaluation", ".", "labelIds_novel", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not recognized category set {}'", ".", "format", "(", "cat_set", ")", ")", "\n", "\n", "", "assert", "(", "len", "(", "labelIds", ")", ">=", "sample_size", ")", "\n", "# return sample_size unique categories chosen from labelIds set of", "\n", "# categories (that can be either self.labelIds_base or self.labelIds_novel)", "\n", "# Note: random.sample samples elements without replacement.", "\n", "return", "random", ".", "sample", "(", "labelIds", ",", "sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.sample_novel_data": [[965, 985], ["sorted", "sorted", "enumerate", "random.shuffle", "dataloader.LowShotDataloaderLegacy.sampleCategories", "dataloader.LowShotDataloaderLegacy.sampleCategories", "dataloader.LowShotDataloaderLegacy.sampleImageIdsFrom"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.sampleCategories", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.sampleCategories", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.sampleImageIdsFrom"], ["", "def", "sample_novel_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Samples a few training examples for each novel category.\"\"\"", "\n", "nKnovel", "=", "self", ".", "nKnovel", "\n", "nKbase", "=", "self", ".", "nKbase", "\n", "nExemplars", "=", "self", ".", "nExemplars", "\n", "\n", "# Kbase = sorted(self.dataset_evaluation.labelIds_base)", "\n", "# Knovel = sorted(self.dataset_evaluation.labelIds_novel)", "\n", "Kbase", "=", "sorted", "(", "self", ".", "sampleCategories", "(", "'base'", ",", "nKbase", ")", ")", "\n", "Knovel", "=", "sorted", "(", "self", ".", "sampleCategories", "(", "'novel'", ",", "nKnovel", ")", ")", "\n", "\n", "Exemplars", "=", "[", "]", "\n", "for", "knovel_idx", ",", "knovel_label", "in", "enumerate", "(", "Knovel", ")", ":", "\n", "            ", "imds", "=", "self", ".", "sampleImageIdsFrom", "(", "knovel_label", ",", "sample_size", "=", "nExemplars", ")", "\n", "Exemplars", "+=", "[", "(", "img_id", ",", "nKbase", "+", "knovel_idx", ")", "for", "img_id", "in", "imds", "]", "\n", "", "random", ".", "shuffle", "(", "Exemplars", ")", "\n", "\n", "Kids", "=", "Kbase", "+", "Knovel", "\n", "\n", "return", "Exemplars", ",", "Kids", ",", "nKbase", ",", "nKnovel", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.create_examples_tensor_data": [[986, 1010], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "create_examples_tensor_data", "(", "self", ",", "examples", ")", ":", "\n", "        ", "\"\"\"\n        Creates the examples image and label tensor data.\n\n        Args:\n            examples: a list of 2-element tuples, each representing a\n                train or test example. The 1st element of each tuple\n                is the image id of the example and 2nd element is the\n                category label of the example, which is in the range\n                [0, nK - 1], where nK is the total number of categories\n                (both novel and base).\n\n        Returns:\n            images: a tensor of shape [nExamples, Height, Width, 3] with the\n                example images, where nExamples is the number of examples\n                (i.e., nExamples = len(examples)).\n            labels: a tensor of shape [nExamples] with the category label\n                of each example.\n        \"\"\"", "\n", "images", "=", "torch", ".", "stack", "(", "\n", "[", "self", ".", "dataset_train_novel", "[", "img_idx", "]", "[", "0", "]", "for", "img_idx", ",", "_", "in", "examples", "]", ",", "\n", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "[", "label", "for", "_", ",", "label", "in", "examples", "]", ")", "\n", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.getNovelCategoriesTrainingData": [[1011, 1025], ["random.seed", "dataloader.LowShotDataloaderLegacy.sample_novel_data", "sorted", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "dataloader.LowShotDataloaderLegacy.create_examples_tensor_data", "len", "len", "enumerate", "set.intersection", "set", "set"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.sample_novel_data", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.create_examples_tensor_data"], ["", "def", "getNovelCategoriesTrainingData", "(", "self", ",", "exp_id", "=", "0", ")", ":", "\n", "        ", "random", ".", "seed", "(", "exp_id", ")", "# fix the seed for this experiment.", "\n", "\n", "# Sample training examples for each novel category.", "\n", "Exemplars", ",", "Kids", ",", "nKbase", ",", "nKnovel", "=", "self", ".", "sample_novel_data", "(", ")", "\n", "self", ".", "Kid2Label", "=", "{", "kid", ":", "label_idx", "for", "label_idx", ",", "kid", "in", "enumerate", "(", "Kids", ")", "}", "\n", "\n", "base_classes_subset", "=", "self", ".", "dataset_train_novel", ".", "base_classes_subset", "\n", "assert", "(", "len", "(", "set", ".", "intersection", "(", "set", "(", "Kids", "[", ":", "nKbase", "]", ")", ",", "set", "(", "base_classes_subset", ")", ")", ")", "==", "len", "(", "base_classes_subset", ")", ")", "\n", "self", ".", "Kids_base_subset", "=", "sorted", "(", "[", "self", ".", "Kid2Label", "[", "kid", "]", "for", "kid", "in", "base_classes_subset", "]", ")", "\n", "\n", "Kids", "=", "torch", ".", "LongTensor", "(", "Kids", ")", "\n", "Xe", ",", "Ye", "=", "self", ".", "create_examples_tensor_data", "(", "Exemplars", ")", "\n", "return", "Xe", ",", "Ye", ",", "Kids", ",", "nKbase", ",", "nKnovel", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.sample_training_data_of_novel_categories": [[1026, 1056], ["random.seed", "pdb.set_trace", "sorted", "sorted", "dataloader.LowShotDataloaderLegacy.sample_training_examples_for_novel_categories", "pdb.set_trace", "pdb.set_trace", "sorted", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "dataloader.LowShotDataloaderLegacy.create_examples_tensor_data", "len", "len", "len", "len", "enumerate", "set.intersection", "set", "set"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloader.sample_training_examples_for_novel_categories", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.create_examples_tensor_data"], ["", "def", "sample_training_data_of_novel_categories", "(", "self", ",", "exp_id", "=", "0", ")", ":", "\n", "        ", "nKnovel", "=", "self", ".", "nKnovel", "\n", "nKbase", "=", "self", ".", "nKbase", "\n", "nExemplars", "=", "self", ".", "nExemplars", "\n", "\n", "random", ".", "seed", "(", "exp_id", ")", "# fix the seed for this experiment.", "\n", "breakpoint", "(", ")", "\n", "# Ids of the base categories.", "\n", "Kbase", "=", "sorted", "(", "self", ".", "dataset_evaluation", ".", "labelIds_base", ")", "\n", "# Ids of the novel categories.", "\n", "Knovel", "=", "sorted", "(", "self", ".", "dataset_evaluation", ".", "labelIds_novel", ")", "\n", "assert", "(", "len", "(", "Kbase", ")", "==", "nKnovel", "and", "len", "(", "Knovel", ")", "==", "nKbase", ")", "\n", "Kall", "=", "Kbase", "+", "Knovel", "\n", "\n", "# Sample `nExemplars` number of training examples for each novel", "\n", "# category.", "\n", "train_examples", "=", "self", ".", "sample_training_examples_for_novel_categories", "(", "\n", "Knovel", ",", "nExemplars", ")", "\n", "\n", "breakpoint", "(", ")", "\n", "self", ".", "Kid2Label", "=", "{", "kid", ":", "label_idx", "for", "label_idx", ",", "kid", "in", "enumerate", "(", "Kall", ")", "}", "\n", "\n", "breakpoint", "(", ")", "\n", "base_classes_subset", "=", "self", ".", "dataset_train_novel", ".", "base_classes_subset", "\n", "assert", "(", "len", "(", "set", ".", "intersection", "(", "set", "(", "Kall", "[", ":", "nKbase", "]", ")", ",", "set", "(", "base_classes_subset", ")", ")", ")", "==", "len", "(", "base_classes_subset", ")", ")", "\n", "self", ".", "Kids_base_subset", "=", "sorted", "(", "[", "self", ".", "Kid2Label", "[", "kid", "]", "for", "kid", "in", "base_classes_subset", "]", ")", "\n", "\n", "Kall", "=", "torch", ".", "LongTensor", "(", "Kall", ")", "\n", "images_train", ",", "labels_train", "=", "self", ".", "create_examples_tensor_data", "(", "train_examples", ")", "\n", "return", "images_train", ",", "labels_train", ",", "Kall", ",", "nKbase", ",", "nKnovel", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.get_iterator": [[1057, 1070], ["torchnet.dataset.ListDataset", "torchnet.dataset.ListDataset.parallel", "range"], "methods", ["None"], ["", "def", "get_iterator", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "def", "load_fun_", "(", "idx", ")", ":", "\n", "            ", "img_idx", "=", "self", ".", "eval_data_indices", "[", "idx", "]", "\n", "img", ",", "kid", "=", "self", ".", "dataset_evaluation", "[", "img_idx", "]", "\n", "label", "=", "self", ".", "Kid2Label", "[", "kid", "]", "if", "(", "kid", "in", "self", ".", "Kid2Label", ")", "else", "-", "1", "\n", "return", "img", ",", "label", "\n", "\n", "", "tnt_dataset", "=", "tnt", ".", "dataset", ".", "ListDataset", "(", "\n", "elem_list", "=", "range", "(", "self", ".", "epoch_size", ")", ",", "load", "=", "load_fun_", ")", "\n", "data_loader", "=", "tnt_dataset", ".", "parallel", "(", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.__call__": [[1071, 1073], ["dataloader.LowShotDataloaderLegacy.get_iterator"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.get_iterator"], ["", "def", "__call__", "(", "self", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "return", "self", ".", "get_iterator", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.__len__": [[1074, 1076], ["int", "math.ceil", "float"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "math", ".", "ceil", "(", "float", "(", "self", ".", "epoch_size", ")", "/", "self", ".", "batch_size", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.get_label_ids": [[39, 50], ["class_to_idx.items", "label_ids.append", "label_ids.append"], "function", ["None"], ["def", "get_label_ids", "(", "class_to_idx", ",", "class_names", ",", "inside", "=", "True", ")", ":", "\n", "    ", "label_ids", "=", "[", "]", "\n", "if", "inside", ":", "\n", "        ", "for", "cname", "in", "class_names", ":", "\n", "            ", "label_ids", ".", "append", "(", "class_to_idx", "[", "cname", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "cname", ",", "clabel", "in", "class_to_idx", ".", "items", "(", ")", ":", "\n", "            ", "if", "cname", "not", "in", "class_names", ":", "\n", "                ", "label_ids", ".", "append", "(", "clabel", ")", "\n", "\n", "", "", "", "return", "label_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.buildLabelIndex": [[78, 86], ["enumerate", "label2inds[].append"], "function", ["None"], ["", "", "def", "buildLabelIndex", "(", "labels", ")", ":", "\n", "    ", "label2inds", "=", "{", "}", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "if", "label", "not", "in", "label2inds", ":", "\n", "            ", "label2inds", "[", "label", "]", "=", "[", "]", "\n", "", "label2inds", "[", "label", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "return", "label2inds", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.load_data": [[88, 92], ["open", "pickle.load"], "function", ["None"], ["", "def", "load_data", "(", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.FastConfusionMeter.__init__": [[19, 24], ["numpy.ndarray", "utils.FastConfusionMeter.reset"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "normalized", "=", "False", ")", ":", "\n", "#super(FastConfusionMeter, self).__init__()", "\n", "        ", "self", ".", "conf", "=", "np", ".", "ndarray", "(", "(", "k", ",", "k", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "normalized", "=", "normalized", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.FastConfusionMeter.reset": [[25, 27], ["utils.FastConfusionMeter.conf.fill"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "conf", ".", "fill", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.FastConfusionMeter.add": [[28, 56], ["output.cpu().squeeze().numpy.cpu().squeeze().numpy.cpu().squeeze().numpy", "target.astype.astype.cpu().squeeze().numpy", "output.cpu().squeeze().numpy.cpu().squeeze().numpy.argmax", "target.astype.astype.astype", "pred.astype.astype.astype", "numpy.bincount", "conf_this.astype().reshape.astype().reshape.astype().reshape", "numpy.ndim", "numpy.ndim", "target.astype.astype.argmax", "output.cpu().squeeze().numpy.cpu().squeeze().numpy.cpu().squeeze", "target.astype.astype.cpu().squeeze", "numpy.prod", "conf_this.astype().reshape.astype().reshape.astype", "output.cpu().squeeze().numpy.cpu().squeeze().numpy.cpu", "target.astype.astype.cpu", "target.astype.astype.sum"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "output", "=", "output", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "np", ".", "ndim", "(", "output", ")", "==", "1", ":", "\n", "            ", "output", "=", "output", "[", "None", "]", "\n", "\n", "", "onehot", "=", "np", ".", "ndim", "(", "target", ")", "!=", "1", "\n", "assert", "output", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", ",", "'number of targets and outputs do not match'", "\n", "assert", "output", ".", "shape", "[", "1", "]", "==", "self", ".", "conf", ".", "shape", "[", "0", "]", ",", "'number of outputs does not match size of confusion matrix'", "\n", "assert", "not", "onehot", "or", "target", ".", "shape", "[", "1", "]", "==", "output", ".", "shape", "[", "1", "]", ",", "'target should be 1D Tensor or have size of output (one-hot)'", "\n", "if", "onehot", ":", "\n", "            ", "assert", "(", "target", ">=", "0", ")", ".", "all", "(", ")", "and", "(", "target", "<=", "1", ")", ".", "all", "(", ")", ",", "'in one-hot encoding, target values should be 0 or 1'", "\n", "assert", "(", "target", ".", "sum", "(", "1", ")", "==", "1", ")", ".", "all", "(", ")", ",", "'multi-label setting is not supported'", "\n", "\n", "", "target", "=", "target", ".", "argmax", "(", "1", ")", "if", "onehot", "else", "target", "\n", "pred", "=", "output", ".", "argmax", "(", "1", ")", "\n", "\n", "target", "=", "target", ".", "astype", "(", "np", ".", "int32", ")", "\n", "pred", "=", "pred", ".", "astype", "(", "np", ".", "int32", ")", "\n", "conf_this", "=", "np", ".", "bincount", "(", "target", "*", "self", ".", "conf", ".", "shape", "[", "0", "]", "+", "pred", ",", "minlength", "=", "np", ".", "prod", "(", "self", ".", "conf", ".", "shape", ")", ")", "\n", "conf_this", "=", "conf_this", ".", "astype", "(", "self", ".", "conf", ".", "dtype", ")", ".", "reshape", "(", "self", ".", "conf", ".", "shape", ")", "\n", "self", ".", "conf", "+=", "conf_this", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.FastConfusionMeter.value": [[57, 63], ["utils.FastConfusionMeter.conf.astype", "utils.FastConfusionMeter.sum().clip", "utils.FastConfusionMeter.sum"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "normalized", ":", "\n", "            ", "conf", "=", "self", ".", "conf", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "conf", "/", "conf", ".", "sum", "(", "1", ")", ".", "clip", "(", "min", "=", "1e-12", ")", "[", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.AverageConfMeter.__init__": [[87, 89], ["utils.AverageConfMeter.reset"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.AverageConfMeter.reset": [[90, 95], ["numpy.asarray", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "np", ".", "asarray", "(", "0", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "avg", "=", "np", ".", "asarray", "(", "0", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "sum", "=", "np", ".", "asarray", "(", "0", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.AverageConfMeter.update": [[96, 105], ["utils.getConfMatrixResults", "val.copy().astype", "val.astype", "val.copy"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.getConfMatrixResults"], ["", "def", "update", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "if", "self", ".", "count", "==", "0", ":", "\n", "            ", "self", ".", "sum", "=", "val", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sum", "+=", "val", ".", "astype", "(", "np", ".", "float64", ")", "\n", "\n", "", "self", ".", "count", "+=", "1", "\n", "self", ".", "avg", "=", "getConfMatrixResults", "(", "self", ".", "sum", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.AverageMeter.__init__": [[108, 110], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.AverageMeter.reset": [[111, 116], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0.0", "\n", "self", ".", "sum", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.AverageMeter.update": [[117, 122], ["float", "round"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "float", "(", "val", "*", "n", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "round", "(", "self", ".", "sum", "/", "self", ".", "count", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.LAverageMeter.__init__": [[125, 127], ["utils.LAverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.LAverageMeter.reset": [[128, 133], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "[", "]", "\n", "self", ".", "avg", "=", "[", "]", "\n", "self", ".", "sum", "=", "[", "]", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.LAverageMeter.update": [[134, 146], ["len", "enumerate", "round", "len", "len", "round"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "count", "+=", "1", "\n", "if", "len", "(", "self", ".", "sum", ")", "==", "0", ":", "\n", "            ", "assert", "(", "self", ".", "count", "==", "1", ")", "\n", "self", ".", "sum", "=", "[", "v", "for", "v", "in", "val", "]", "\n", "self", ".", "avg", "=", "[", "round", "(", "v", ",", "4", ")", "for", "v", "in", "val", "]", "\n", "", "else", ":", "\n", "            ", "assert", "(", "len", "(", "self", ".", "sum", ")", "==", "len", "(", "val", ")", ")", "\n", "for", "i", ",", "v", "in", "enumerate", "(", "val", ")", ":", "\n", "                ", "self", ".", "sum", "[", "i", "]", "+=", "v", "\n", "self", ".", "avg", "[", "i", "]", "=", "round", "(", "self", ".", "sum", "[", "i", "]", "/", "self", ".", "count", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.__init__": [[148, 150], ["utils.DAverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.reset": [[151, 153], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "values", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.update": [[154, 177], ["isinstance", "values.items", "isinstance", "utils.DAverageMeter.values[].update", "isinstance", "utils.AverageMeter", "utils.DAverageMeter.values[].update", "isinstance", "utils.AverageConfMeter", "val.value", "utils.DAverageMeter.values[].update", "isinstance", "utils.AverageConfMeter", "utils.DAverageMeter.values[].update", "isinstance", "utils.DAverageMeter", "utils.DAverageMeter.values[].update", "utils.LAverageMeter"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.update", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.update", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.FastConfusionMeter.value", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.update", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.update", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.update"], ["", "def", "update", "(", "self", ",", "values", ")", ":", "\n", "        ", "assert", "(", "isinstance", "(", "values", ",", "dict", ")", ")", "\n", "for", "key", ",", "val", "in", "values", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "                ", "if", "not", "(", "key", "in", "self", ".", "values", ")", ":", "\n", "                    ", "self", ".", "values", "[", "key", "]", "=", "AverageMeter", "(", ")", "\n", "", "self", ".", "values", "[", "key", "]", ".", "update", "(", "val", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "(", "tnt", ".", "meter", ".", "ConfusionMeter", ",", "FastConfusionMeter", ")", ")", ":", "\n", "                ", "if", "not", "(", "key", "in", "self", ".", "values", ")", ":", "\n", "                    ", "self", ".", "values", "[", "key", "]", "=", "AverageConfMeter", "(", ")", "\n", "", "self", ".", "values", "[", "key", "]", ".", "update", "(", "val", ".", "value", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "AverageConfMeter", ")", ":", "\n", "                ", "if", "not", "(", "key", "in", "self", ".", "values", ")", ":", "\n", "                    ", "self", ".", "values", "[", "key", "]", "=", "AverageConfMeter", "(", ")", "\n", "", "self", ".", "values", "[", "key", "]", ".", "update", "(", "val", ".", "sum", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "dict", ")", ":", "\n", "                ", "if", "not", "(", "key", "in", "self", ".", "values", ")", ":", "\n", "                    ", "self", ".", "values", "[", "key", "]", "=", "DAverageMeter", "(", ")", "\n", "", "self", ".", "values", "[", "key", "]", ".", "update", "(", "val", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "                ", "if", "not", "(", "key", "in", "self", ".", "values", ")", ":", "\n", "                    ", "self", ".", "values", "[", "key", "]", "=", "LAverageMeter", "(", ")", "\n", "", "self", ".", "values", "[", "key", "]", ".", "update", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.average": [[178, 187], ["utils.DAverageMeter.values.items", "isinstance", "type", "val.average"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.average"], ["", "", "", "def", "average", "(", "self", ")", ":", "\n", "        ", "average", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "self", ".", "values", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "type", "(", "self", ")", ")", ":", "\n", "                ", "average", "[", "key", "]", "=", "val", ".", "average", "(", ")", "\n", "", "else", ":", "\n", "                ", "average", "[", "key", "]", "=", "val", ".", "avg", "\n", "\n", "", "", "return", "average", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.__str__": [[188, 191], ["utils.DAverageMeter.average", "utils.DAverageMeter.__str__"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.average", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.__str__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "ave_stats", "=", "self", ".", "average", "(", ")", "\n", "return", "ave_stats", ".", "__str__", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.getConfMatrixResults": [[64, 85], ["numpy.diag", "matrix.sum", "matrix.sum", "numpy.finfo", "np.diag.sum", "accuracies.sum", "IoUs.sum", "round", "round", "round", "round", "round", "len", "matrix.sum"], "function", ["None"], ["", "", "", "def", "getConfMatrixResults", "(", "matrix", ")", ":", "\n", "    ", "assert", "(", "len", "(", "matrix", ".", "shape", ")", "==", "2", "and", "matrix", ".", "shape", "[", "0", "]", "==", "matrix", ".", "shape", "[", "1", "]", ")", "\n", "\n", "count_correct", "=", "np", ".", "diag", "(", "matrix", ")", "\n", "count_preds", "=", "matrix", ".", "sum", "(", "1", ")", "\n", "count_gts", "=", "matrix", ".", "sum", "(", "0", ")", "\n", "epsilon", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", "\n", "accuracies", "=", "count_correct", "/", "(", "count_gts", "+", "epsilon", ")", "\n", "IoUs", "=", "count_correct", "/", "(", "count_gts", "+", "count_preds", "-", "count_correct", "+", "epsilon", ")", "\n", "totAccuracy", "=", "count_correct", ".", "sum", "(", ")", "/", "(", "matrix", ".", "sum", "(", ")", "+", "epsilon", ")", "\n", "\n", "num_valid", "=", "(", "count_gts", ">", "0", ")", ".", "sum", "(", ")", "\n", "meanAccuracy", "=", "accuracies", ".", "sum", "(", ")", "/", "(", "num_valid", "+", "epsilon", ")", "\n", "meanIoU", "=", "IoUs", ".", "sum", "(", ")", "/", "(", "num_valid", "+", "epsilon", ")", "\n", "\n", "result", "=", "{", "'totAccuracy'", ":", "round", "(", "totAccuracy", ",", "4", ")", ",", "'meanAccuracy'", ":", "round", "(", "meanAccuracy", ",", "4", ")", ",", "'meanIoU'", ":", "round", "(", "meanIoU", ",", "4", ")", "}", "\n", "if", "num_valid", "==", "2", ":", "\n", "        ", "result", "[", "'IoUs_bg'", "]", "=", "round", "(", "IoUs", "[", "0", "]", ",", "4", ")", "\n", "result", "[", "'IoUs_fg'", "]", "=", "round", "(", "IoUs", "[", "1", "]", ",", "4", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.ImageNetLowShotExperiments.ImageNetLowShotExperiments.__init__": [[40, 42], ["FewShot.__init__"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "FewShot", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.ImageNetLowShotExperiments.ImageNetLowShotExperiments.save_features": [[43, 100], ["feat_model.eval", "dataloader.get_iterator", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "h5py.File", "h5py.File.create_dataset", "enumerate", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "h5py.File.create_dataset", "h5py.File.close", "len", "tqdm.tqdm.tqdm", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_().copy_", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_().copy_", "feat_model", "feat_model.data.cpu().numpy", "labels.cpu().numpy", "torch.autograd.Variable", "torch.autograd.Variable", "feat_model.dim", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "h5py.File.create_dataset", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "feat_model.size", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_", "images.dim", "labels.dim", "feat_model.data.cpu", "labels.cpu", "images.size", "labels.size", "images.size", "feat_model.size", "feat_model.size", "feat_model.size", "feat_model.size", "feat_model.size"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.dataloader.LowShotDataloaderLegacy.get_iterator"], ["", "def", "save_features", "(", "self", ",", "dataloader", ",", "filename", ")", ":", "\n", "        ", "\"\"\"Saves features and labels for each image in the dataloader.\n\n        This routines uses the trained feature model (i.e.,\n        self.networks['feat_model']) in order to extract a feature for each\n        image in the dataloader. The extracted features along with the labels\n        of the images that they come from are saved in a h5py file.\n\n        Args:\n            dloader: A dataloader that feeds images and labels.\n            filename: The file name where the features and the labels of each\n                images in the dataloader are saved.\n        \"\"\"", "\n", "feat_model", "=", "self", ".", "networks", "[", "'feat_model'", "]", "\n", "feat_model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "dloader", "=", "dataloader", "\n", "dataloader_iterator", "=", "dataloader", ".", "get_iterator", "(", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "'Destination filename for features: {0}'", ".", "format", "(", "\n", "filename", ")", ")", "\n", "data_file", "=", "h5py", ".", "File", "(", "filename", ",", "'w'", ")", "\n", "max_count", "=", "len", "(", "dataloader_iterator", ")", "*", "dataloader_iterator", ".", "batch_size", "\n", "all_labels", "=", "data_file", ".", "create_dataset", "(", "\n", "'all_labels'", ",", "(", "max_count", ",", ")", ",", "dtype", "=", "'i'", ")", "\n", "all_features", "=", "None", "\n", "\n", "count", "=", "0", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "dataloader_iterator", ")", ")", ":", "\n", "            ", "images", ",", "labels", "=", "batch", "\n", "self", ".", "tensors", "[", "'images_test'", "]", ".", "resize_", "(", "images", ".", "size", "(", ")", ")", ".", "copy_", "(", "images", ")", "\n", "self", ".", "tensors", "[", "'labels_test'", "]", ".", "resize_", "(", "labels", ".", "size", "(", ")", ")", ".", "copy_", "(", "labels", ")", "\n", "images", "=", "self", ".", "tensors", "[", "'images_test'", "]", "\n", "labels", "=", "self", ".", "tensors", "[", "'labels_test'", "]", "\n", "assert", "(", "images", ".", "dim", "(", ")", "==", "4", "and", "labels", ".", "dim", "(", ")", "==", "1", ")", "\n", "features", "=", "feat_model", "(", "Variable", "(", "images", ",", "volatile", "=", "True", ")", ")", "\n", "assert", "(", "features", ".", "dim", "(", ")", "==", "2", ")", "\n", "\n", "if", "all_features", "is", "None", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'Image size: {0}'", ".", "format", "(", "images", ".", "size", "(", ")", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Feature size: {0}'", ".", "format", "(", "features", ".", "size", "(", ")", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Max_count: {0}'", ".", "format", "(", "max_count", ")", ")", "\n", "all_features", "=", "data_file", ".", "create_dataset", "(", "\n", "'all_features'", ",", "(", "max_count", ",", "features", ".", "size", "(", "1", ")", ")", ",", "dtype", "=", "'f'", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Number of feature channels: {0}'", ".", "format", "(", "\n", "features", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "", "all_features", "[", "count", ":", "(", "count", "+", "features", ".", "size", "(", "0", ")", ")", ",", ":", "]", "=", "(", "\n", "features", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_labels", "[", "count", ":", "(", "count", "+", "features", ".", "size", "(", "0", ")", ")", "]", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "count", "=", "count", "+", "features", ".", "size", "(", "0", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'Number of processed primages: {0}'", ".", "format", "(", "count", ")", ")", "\n", "\n", "count_var", "=", "data_file", ".", "create_dataset", "(", "'count'", ",", "(", "1", ",", ")", ",", "dtype", "=", "'i'", ")", "\n", "count_var", "[", "0", "]", "=", "count", "\n", "data_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.ImageNetLowShotExperiments.ImageNetLowShotExperiments.preprocess_novel_training_data": [[102, 124], ["images_train.unsqueeze.unsqueeze.unsqueeze", "labels_train.unsqueeze.unsqueeze.unsqueeze", "Kids.unsqueeze.unsqueeze.unsqueeze", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_().copy_", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_().copy_", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_().copy_", "labels_train.unsqueeze.unsqueeze.unsqueeze", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_().fill_().scatter_", "list", "len", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_", "labels_train.unsqueeze.unsqueeze.size", "labels_train.unsqueeze.unsqueeze.dim", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_().fill_", "images_train.unsqueeze.unsqueeze.size", "labels_train.unsqueeze.unsqueeze.size", "Kids.unsqueeze.unsqueeze.size", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_"], "methods", ["None"], ["", "def", "preprocess_novel_training_data", "(", "self", ",", "nove_cat_training_data", ")", ":", "\n", "        ", "\"\"\"Preprocess the novel training data.\"\"\"", "\n", "\n", "images_train", ",", "labels_train", ",", "Kids", ",", "nKbase", ",", "nKnovel", "=", "nove_cat_training_data", "\n", "self", ".", "nKbase", "=", "nKbase", "\n", "self", ".", "nKnovel", "=", "nKnovel", "\n", "\n", "# Insert an extra singleton dimension.", "\n", "images_train", "=", "images_train", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "labels_train", "=", "labels_train", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "Kids", "=", "Kids", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "\n", "self", ".", "tensors", "[", "'images_train'", "]", ".", "resize_", "(", "images_train", ".", "size", "(", ")", ")", ".", "copy_", "(", "images_train", ")", "\n", "self", ".", "tensors", "[", "'labels_train'", "]", ".", "resize_", "(", "labels_train", ".", "size", "(", ")", ")", ".", "copy_", "(", "labels_train", ")", "\n", "self", ".", "tensors", "[", "'Kids'", "]", ".", "resize_", "(", "Kids", ".", "size", "(", ")", ")", ".", "copy_", "(", "Kids", ")", "\n", "labels_train", "=", "self", ".", "tensors", "[", "'labels_train'", "]", "\n", "\n", "labels_train_1hot_size", "=", "list", "(", "labels_train", ".", "size", "(", ")", ")", "+", "[", "nKnovel", ",", "]", "\n", "dim", "=", "len", "(", "labels_train_1hot_size", ")", "-", "1", "\n", "labels_train", "=", "labels_train", ".", "unsqueeze", "(", "dim", "=", "labels_train", ".", "dim", "(", ")", ")", "\n", "self", ".", "tensors", "[", "'labels_train_1hot'", "]", ".", "resize_", "(", "labels_train_1hot_size", ")", ".", "fill_", "(", "0", ")", ".", "scatter_", "(", "\n", "dim", ",", "labels_train", "-", "nKbase", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.ImageNetLowShotExperiments.ImageNetLowShotExperiments.add_novel_categories": [[125, 166], ["feat_model.eval", "classifier.eval", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.preprocess_novel_training_data", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "feat_model", "features_train.view.view.view", "classifier.get_classification_weights", "classifier.get_classification_weights.data.clone", "Kids[].contiguous", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "list", "features_train.view.view.size"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.ImageNetLowShotExperiments.ImageNetLowShotExperiments.preprocess_novel_training_data", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.Classifier.get_classification_weights"], ["", "def", "add_novel_categories", "(", "self", ",", "nove_cat_training_data", ")", ":", "\n", "        ", "\"\"\"Add the training data of the novel categories to the model.\"\"\"", "\n", "\n", "feat_model", "=", "self", ".", "networks", "[", "'feat_model'", "]", "\n", "classifier", "=", "self", ".", "networks", "[", "'classifier'", "]", "\n", "feat_model", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "\n", "self", ".", "preprocess_novel_training_data", "(", "nove_cat_training_data", ")", "\n", "nKbase", "=", "self", ".", "nKbase", "\n", "nKnovel", "=", "self", ".", "nKnovel", "\n", "\n", "images", "=", "self", ".", "tensors", "[", "'images_train'", "]", "\n", "labels_train_1hot", "=", "self", ".", "tensors", "[", "'labels_train_1hot'", "]", "\n", "Kids", "=", "self", ".", "tensors", "[", "'Kids'", "]", "\n", "\n", "#***********************************************************************", "\n", "#*********************** SET TORCH VARIABLES ***************************", "\n", "Kbase_ids_var", "=", "Variable", "(", "\n", "Kids", "[", ":", ",", ":", "nKbase", "]", ".", "contiguous", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "labels_train_1hot_var", "=", "Variable", "(", "labels_train_1hot", ",", "requires_grad", "=", "False", ")", "\n", "images_var", "=", "Variable", "(", "images", ",", "volatile", "=", "True", ")", "\n", "#***********************************************************************", "\n", "\n", "#***********************************************************************", "\n", "#******************** EXTRACT FEATS FROM EXEMPLARS *********************", "\n", "batch_size", ",", "num_train_examples", ",", "channels", ",", "height", ",", "width", "=", "images_var", ".", "size", "(", ")", "\n", "features_train", "=", "feat_model", "(", "images_var", ".", "view", "(", "\n", "batch_size", "*", "num_train_examples", ",", "channels", ",", "height", ",", "width", ")", ")", "\n", "features_train", "=", "features_train", ".", "view", "(", "\n", "[", "batch_size", ",", "num_train_examples", ",", "]", "+", "list", "(", "features_train", ".", "size", "(", ")", "[", "1", ":", "]", ")", ")", "\n", "#***********************************************************************", "\n", "#******************** GET CLASSIFICATION WEIGHTS ***********************", "\n", "# The following routine returns the classification weight vectors of", "\n", "# both the base and then novel categories. For the novel categories,", "\n", "# the classification weight vectors are generated using the training", "\n", "# features for those novel cateogories.", "\n", "clsWeights", "=", "classifier", ".", "get_classification_weights", "(", "\n", "Kbase_ids_var", ",", "features_train", ",", "labels_train_1hot_var", ")", "\n", "#***********************************************************************", "\n", "self", ".", "tensors", "[", "'clsWeights'", "]", "=", "clsWeights", ".", "data", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.ImageNetLowShotExperiments.ImageNetLowShotExperiments.evaluate_model_on_test_images": [[168, 277], ["feat_model.eval", "classifier.eval", "list", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "enumerate", "numpy.in1d", "numpy.in1d", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "numpy.array().reshape", "set().difference", "tqdm.tqdm.tqdm", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_().copy_", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_().copy_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "feat_model().view", "classifier.apply_classification_weights().view", "ImageNetLowShotExperiments.softmax_with_novel_prior", "ImageNetLowShotExperiments.compute_top1_and_top5_accuracy", "ImageNetLowShotExperiments.compute_top1_and_top5_accuracy", "scores.clone", "ImageNetLowShotExperiments.compute_top1_and_top5_accuracy", "scores.clone", "ImageNetLowShotExperiments.compute_top1_and_top5_accuracy", "labels_test.cpu().numpy", "numpy.array", "numpy.array", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "set", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "data_loader", "scores.clone", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.array", "set", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.tensors[].resize_", "feat_model", "classifier.apply_classification_weights", "labels_test.cpu", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "images_test.size", "labels_test.size"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.ImageNetLowShotExperiments.softmax_with_novel_prior", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.ImageNetLowShotExperiments.compute_top1_and_top5_accuracy", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.ImageNetLowShotExperiments.compute_top1_and_top5_accuracy", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.ImageNetLowShotExperiments.compute_top1_and_top5_accuracy", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.ImageNetLowShotExperiments.compute_top1_and_top5_accuracy", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.Classifier.apply_classification_weights"], ["", "def", "evaluate_model_on_test_images", "(", "\n", "self", ",", "data_loader", ",", "base_classes", ",", "novel_classes", ",", "exp_id", "=", "''", ",", "prior_m", "=", "0.8", ")", ":", "\n", "        ", "\"\"\"Evaluate the model.\n\n        It is assumed that the user has already called the routine\n        add_novel_categories() before calling this function.\n\n        Args:\n            data_loader: data loader that feeds test images and lables in order\n                to evaluatethe model.\n            base_classes: A list with the labels of the base categories that\n                will be used for evaluation.\n            novel_classes: A list with the labels of the novel categories that\n                will be used for evaluation.\n            exp_id: A string with the id of the experiment.\n            prior_m: A scalar in the range [0, 1.0] that represents the prior\n                for whether a test image comes from the novel / base categories.\n        \"\"\"", "\n", "\n", "feat_model", "=", "self", ".", "networks", "[", "'feat_model'", "]", "\n", "classifier", "=", "self", ".", "networks", "[", "'classifier'", "]", "\n", "feat_model", ".", "eval", "(", ")", "\n", "classifier", ".", "eval", "(", ")", "\n", "clsWeights", "=", "self", ".", "tensors", "[", "'clsWeights'", "]", "\n", "\n", "both_classes", "=", "base_classes", "+", "novel_classes", "\n", "# Not valid classes are those that do not belong neighter to the base", "\n", "# nor the nor the novel classes.", "\n", "nKall", "=", "self", ".", "nKbase", "+", "self", ".", "nKnovel", "\n", "not_valid_classes", "=", "list", "(", "set", "(", "range", "(", "nKall", ")", ")", ".", "difference", "(", "set", "(", "both_classes", ")", ")", ")", "\n", "not_valid_classes_torch", "=", "torch", ".", "Tensor", "(", "not_valid_classes", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "base_classes_torch", "=", "torch", ".", "Tensor", "(", "base_classes", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "novel_classes_torch", "=", "torch", ".", "Tensor", "(", "novel_classes", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "top1", ",", "top1_novel", ",", "top1_base", ",", "top1_prior", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "top5", ",", "top5_novel", ",", "top5_base", ",", "top5_prior", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "all_labels", "=", "None", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "data_loader", "(", "0", ")", ")", ")", ":", "\n", "            ", "images_test", ",", "labels_test", "=", "batch", "\n", "self", ".", "tensors", "[", "'images_test'", "]", ".", "resize_", "(", "images_test", ".", "size", "(", ")", ")", ".", "copy_", "(", "images_test", ")", "\n", "self", ".", "tensors", "[", "'labels_test'", "]", ".", "resize_", "(", "labels_test", ".", "size", "(", ")", ")", ".", "copy_", "(", "labels_test", ")", "\n", "images_test", "=", "self", ".", "tensors", "[", "'images_test'", "]", "\n", "labels_test", "=", "self", ".", "tensors", "[", "'labels_test'", "]", "\n", "\n", "images_test_var", "=", "Variable", "(", "images_test", ",", "volatile", "=", "True", ")", "\n", "labels_var", "=", "Variable", "(", "labels_test", ",", "volatile", "=", "True", ")", "\n", "clsWeights_var", "=", "Variable", "(", "clsWeights", ",", "volatile", "=", "True", ")", "\n", "num_test_examples", "=", "images_test_var", ".", "size", "(", "0", ")", "\n", "\n", "features_var", "=", "feat_model", "(", "images_test_var", ")", ".", "view", "(", "1", ",", "num_test_examples", ",", "-", "1", ")", "\n", "scores_var", "=", "classifier", ".", "apply_classification_weights", "(", "\n", "features_var", ",", "clsWeights_var", ")", ".", "view", "(", "num_test_examples", ",", "-", "1", ")", "\n", "\n", "scores", "=", "scores_var", ".", "data", "\n", "scores_prior", "=", "softmax_with_novel_prior", "(", "\n", "scores", ".", "clone", "(", ")", ",", "novel_classes_torch", ",", "base_classes_torch", ",", "prior_m", ")", "\n", "\n", "scores", "[", ":", ",", "not_valid_classes_torch", "]", "=", "-", "1000", "\n", "top1_this", ",", "top5_this", "=", "compute_top1_and_top5_accuracy", "(", "scores", ",", "labels_test", ")", "\n", "top1", "=", "top1_this", "if", "top1", "is", "None", "else", "np", ".", "concatenate", "(", "(", "top1", ",", "top1_this", ")", ")", "\n", "top5", "=", "top5_this", "if", "top5", "is", "None", "else", "np", ".", "concatenate", "(", "(", "top5", ",", "top5_this", ")", ")", "\n", "\n", "scores_prior", "[", ":", ",", "not_valid_classes_torch", "]", "=", "-", "1000", "\n", "top1_this", ",", "top5_this", "=", "compute_top1_and_top5_accuracy", "(", "scores_prior", ",", "labels_test", ")", "\n", "top1_prior", "=", "top1_this", "if", "top1_prior", "is", "None", "else", "np", ".", "concatenate", "(", "(", "top1_prior", ",", "top1_this", ")", ")", "\n", "top5_prior", "=", "top5_this", "if", "top5_prior", "is", "None", "else", "np", ".", "concatenate", "(", "(", "top5_prior", ",", "top5_this", ")", ")", "\n", "\n", "scores_novel", "=", "scores", ".", "clone", "(", ")", "\n", "scores_novel", "[", ":", ",", "base_classes_torch", "]", "=", "-", "1000", "\n", "top1_this", ",", "top5_this", "=", "compute_top1_and_top5_accuracy", "(", "scores_novel", ",", "labels_test", ")", "\n", "top1_novel", "=", "top1_this", "if", "top1_novel", "is", "None", "else", "np", ".", "concatenate", "(", "(", "top1_novel", ",", "top1_this", ")", ")", "\n", "top5_novel", "=", "top5_this", "if", "top5_novel", "is", "None", "else", "np", ".", "concatenate", "(", "(", "top5_novel", ",", "top5_this", ")", ")", "\n", "\n", "scores_base", "=", "scores", ".", "clone", "(", ")", "\n", "scores_base", "[", ":", ",", "novel_classes_torch", "]", "=", "-", "1000", "\n", "top1_this", ",", "top5_this", "=", "compute_top1_and_top5_accuracy", "(", "scores_base", ",", "labels_test", ")", "\n", "top1_base", "=", "top1_this", "if", "top1_base", "is", "None", "else", "np", ".", "concatenate", "(", "(", "top1_base", ",", "top1_this", ")", ")", "\n", "top5_base", "=", "top5_this", "if", "top5_base", "is", "None", "else", "np", ".", "concatenate", "(", "(", "top5_base", ",", "top5_this", ")", ")", "\n", "\n", "labels_test_np", "=", "labels_test", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "all_labels", "=", "labels_test_np", "if", "all_labels", "is", "None", "else", "np", ".", "concatenate", "(", "(", "all_labels", ",", "labels_test_np", ")", ")", "\n", "\n", "", "is_novel", "=", "np", ".", "in1d", "(", "all_labels", ",", "np", ".", "array", "(", "novel_classes", ")", ")", "\n", "is_base", "=", "np", ".", "in1d", "(", "all_labels", ",", "np", ".", "array", "(", "base_classes", ")", ")", "\n", "is_either", "=", "is_novel", "|", "is_base", "\n", "\n", "top1_novel", "=", "100", "*", "np", ".", "mean", "(", "top1_novel", "[", "is_novel", "]", ")", "\n", "top1_base", "=", "100", "*", "np", ".", "mean", "(", "top1_base", "[", "is_base", "]", ")", "\n", "top1_all", "=", "100", "*", "np", ".", "mean", "(", "top1", "[", "is_either", "]", ")", "\n", "top1_all_prior", "=", "100", "*", "np", ".", "mean", "(", "top1_prior", "[", "is_either", "]", ")", "\n", "\n", "top5_novel", "=", "100", "*", "np", ".", "mean", "(", "top5_novel", "[", "is_novel", "]", ")", "\n", "top5_base", "=", "100", "*", "np", ".", "mean", "(", "top5_base", "[", "is_base", "]", ")", "\n", "top5_all", "=", "100", "*", "np", ".", "mean", "(", "top5", "[", "is_either", "]", ")", "\n", "top5_all_prior", "=", "100", "*", "np", ".", "mean", "(", "top5_prior", "[", "is_either", "]", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "'Experiment {0}'", ".", "format", "(", "exp_id", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'==> Top 5 Accuracies: [Novel: {0:3.2f} | Base: {1:3.2f} | All {2:3.2f} | All prior {3:3.2f}]'", "\n", ".", "format", "(", "top5_novel", ",", "top5_base", ",", "top5_all", ",", "top5_all_prior", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'==> Top 1 Accuracies: [Novel: {0:3.2f} | Base: {1:3.2f} | All {2:3.2f} | All prior {3:3.2f}]'", "\n", ".", "format", "(", "top1_novel", ",", "top1_base", ",", "top1_all", ",", "top1_all_prior", ")", ")", "\n", "\n", "results_array", "=", "np", ".", "array", "(", "\n", "[", "top5_novel", ",", "top5_base", ",", "top5_all", ",", "top5_all_prior", ",", "\n", "top1_novel", ",", "top1_base", ",", "top1_all", ",", "top1_all_prior", "]", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "return", "results_array", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.ImageNetLowShotExperiments.ImageNetLowShotExperiments.lowshot_avg_results": [[278, 321], ["numpy.concatenate", "numpy.concatenate.mean", "numpy.concatenate.std", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "ImageNetLowShotExperiments.ImageNetLowShotExperiments.logger.info", "numpy.sqrt"], "methods", ["None"], ["", "def", "lowshot_avg_results", "(", "self", ",", "results_all", ",", "exp_id", "=", "''", ")", ":", "\n", "        ", "results_all", "=", "np", ".", "concatenate", "(", "results_all", ",", "axis", "=", "0", ")", "\n", "num_eval_experiments", "=", "results_all", ".", "shape", "[", "0", "]", "\n", "\n", "mu_results", "=", "results_all", ".", "mean", "(", "axis", "=", "0", ")", "\n", "top5_novel", "=", "mu_results", "[", "0", "]", "\n", "top5_base", "=", "mu_results", "[", "1", "]", "\n", "top5_all", "=", "mu_results", "[", "2", "]", "\n", "top5_all_prior", "=", "mu_results", "[", "3", "]", "\n", "top1_novel", "=", "mu_results", "[", "4", "]", "\n", "top1_base", "=", "mu_results", "[", "5", "]", "\n", "top1_all", "=", "mu_results", "[", "6", "]", "\n", "top1_all_prior", "=", "mu_results", "[", "7", "]", "\n", "\n", "std_results", "=", "results_all", ".", "std", "(", "axis", "=", "0", ")", "\n", "ci95_results", "=", "1.96", "*", "std_results", "/", "np", ".", "sqrt", "(", "results_all", ".", "shape", "[", "0", "]", ")", "\n", "\n", "top5_novel_ci95", "=", "ci95_results", "[", "0", "]", "\n", "top5_base_ci95", "=", "ci95_results", "[", "1", "]", "\n", "top5_all_ci95", "=", "ci95_results", "[", "2", "]", "\n", "top5_all_prior_ci95", "=", "ci95_results", "[", "3", "]", "\n", "top1_novel_ci95", "=", "ci95_results", "[", "4", "]", "\n", "top1_base_ci95", "=", "ci95_results", "[", "5", "]", "\n", "top1_all_ci95", "=", "ci95_results", "[", "6", "]", "\n", "top1_all_prior_ci95", "=", "ci95_results", "[", "7", "]", "\n", "\n", "self", ".", "logger", ".", "info", "(", "'----------------------------------------------------------------'", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Average results of {0} experiments: {1}'", ".", "format", "(", "\n", "num_eval_experiments", ",", "exp_id", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'==> Top 5 Accuracies:      [Novel: {0:3.2f} | Base: {1:3.2f} | All {2:3.2f} | All prior {3:3.2f}]'", "\n", ".", "format", "(", "top5_novel", ",", "top5_base", ",", "top5_all", ",", "top5_all_prior", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'==> Top 5 conf. intervals: [Novel: {0:5.2f} | Base: {1:5.2f} | All {2:5.2f} | All prior {3:5.2f}]'", "\n", ".", "format", "(", "top5_novel_ci95", ",", "top5_base_ci95", ",", "top5_all_ci95", ",", "top5_all_prior_ci95", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'----------------------------------------------------------------'", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'==> Top 1 Accuracies:      [Novel: {0:3.2f} | Base: {1:3.2f} | All {2:3.2f} | All prior {3:3.2f}]'", "\n", ".", "format", "(", "top1_novel", ",", "top1_base", ",", "top1_all", ",", "top1_all_prior", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\n", "'==> Top 1 conf. intervals: [Novel: {0:5.2f} | Base: {1:5.2f} | All {2:5.2f} | All prior {3:5.2f}]'", "\n", ".", "format", "(", "top1_novel_ci95", ",", "top1_base_ci95", ",", "top1_all_ci95", ",", "top1_all_prior_ci95", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'----------------------------------------------------------------'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.ImageNetLowShotExperiments.compute_top1_and_top5_accuracy": [[18, 25], ["scores.topk", "labels.cpu().numpy", "topk_labels.cpu().numpy", "numpy.sum", "top1_correct.astype", "np.sum.astype", "labels.cpu", "topk_labels.cpu", "labels.cpu().numpy.reshape"], "function", ["None"], ["def", "compute_top1_and_top5_accuracy", "(", "scores", ",", "labels", ")", ":", "\n", "    ", "topk_scores", ",", "topk_labels", "=", "scores", ".", "topk", "(", "5", ",", "1", ",", "True", ",", "True", ")", "\n", "label_ind", "=", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "topk_ind", "=", "topk_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "top1_correct", "=", "topk_ind", "[", ":", ",", "0", "]", "==", "label_ind", "\n", "top5_correct", "=", "np", ".", "sum", "(", "topk_ind", "==", "label_ind", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "return", "top1_correct", ".", "astype", "(", "float", ")", ",", "top5_correct", ".", "astype", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.ImageNetLowShotExperiments.softmax_with_novel_prior": [[27, 37], ["torch.exp", "torch.exp", "torch.sum().expand_as", "torch.sum().expand_as", "torch.sum().expand_as", "torch.sum().expand_as", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "softmax_with_novel_prior", "(", "scores", ",", "novel_inds", ",", "base_inds", ",", "prior_m", ")", ":", "\n", "    ", "scores", "=", "torch", ".", "exp", "(", "scores", ")", "\n", "scores_novel", "=", "scores", "[", ":", ",", "novel_inds", "]", "\n", "scores_base", "=", "scores", "[", ":", ",", "base_inds", "]", "\n", "tol", "=", "0.0000001", "\n", "scores_novel", "*=", "prior_m", "/", "(", "tol", "+", "torch", ".", "sum", "(", "scores_novel", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "scores_novel", ")", ")", "\n", "scores_base", "*=", "(", "1.0", "-", "prior_m", ")", "/", "(", "tol", "+", "torch", ".", "sum", "(", "scores_base", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "scores_base", ")", ")", "\n", "scores", "[", ":", ",", "novel_inds", "]", "=", "scores_novel", "\n", "scores", "[", ":", ",", "base_inds", "]", "=", "scores_base", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.FewShot.__init__": [[31, 37], ["Algorithm.__init__", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "Algorithm", ".", "__init__", "(", "self", ",", "opt", ")", "\n", "self", ".", "nKbase", "=", "torch", ".", "LongTensor", "(", ")", "\n", "self", ".", "activate_dropout", "=", "(", "\n", "opt", "[", "'activate_dropout'", "]", "if", "(", "'activate_dropout'", "in", "opt", ")", "else", "False", ")", "\n", "self", ".", "keep_best_model_metric_name", "=", "'AccuracyNovel'", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.FewShot.allocate_tensors": [[38, 46], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "allocate_tensors", "(", "self", ")", ":", "\n", "        ", "self", ".", "tensors", "=", "{", "}", "\n", "self", ".", "tensors", "[", "'images_train'", "]", "=", "torch", ".", "FloatTensor", "(", ")", "\n", "self", ".", "tensors", "[", "'labels_train'", "]", "=", "torch", ".", "LongTensor", "(", ")", "\n", "self", ".", "tensors", "[", "'labels_train_1hot'", "]", "=", "torch", ".", "FloatTensor", "(", ")", "\n", "self", ".", "tensors", "[", "'images_test'", "]", "=", "torch", ".", "FloatTensor", "(", ")", "\n", "self", ".", "tensors", "[", "'labels_test'", "]", "=", "torch", ".", "LongTensor", "(", ")", "\n", "self", ".", "tensors", "[", "'Kids'", "]", "=", "torch", ".", "LongTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.FewShot.set_tensors": [[47, 79], ["FewShot.FewShot.tensors[].resize_().copy_", "FewShot.FewShot.tensors[].resize_().copy_", "labels_train.unsqueeze", "FewShot.FewShot.tensors[].resize_().fill_().scatter_", "FewShot.FewShot.tensors[].resize_().copy_", "FewShot.FewShot.tensors[].resize_().copy_", "FewShot.FewShot.tensors[].resize_().copy_", "FewShot.FewShot.tensors[].resize_().copy_", "FewShot.FewShot.tensors[].resize_().copy_", "FewShot.FewShot.tensors[].resize_().copy_", "len", "nKbase.squeeze", "list", "len", "nKbase.squeeze", "FewShot.FewShot.tensors[].resize_", "FewShot.FewShot.tensors[].resize_", "labels_train.max", "labels_train.size", "labels_train.dim", "FewShot.FewShot.tensors[].resize_().fill_", "len", "FewShot.FewShot.tensors[].resize_", "FewShot.FewShot.tensors[].resize_", "FewShot.FewShot.tensors[].resize_", "FewShot.FewShot.tensors[].resize_", "FewShot.FewShot.tensors[].resize_", "FewShot.FewShot.tensors[].resize_", "images_train.size", "labels_train.size", "images_test.size", "labels_test.size", "K.size", "images_test.size", "labels_test.size", "K.size", "FewShot.FewShot.tensors[].resize_"], "methods", ["None"], ["", "def", "set_tensors", "(", "self", ",", "batch", ")", ":", "\n", "        ", "self", ".", "nKbase", "=", "self", ".", "dloader", ".", "nKbase", "\n", "self", ".", "nKnovel", "=", "self", ".", "dloader", ".", "nKnovel", "\n", "\n", "if", "self", ".", "nKnovel", ">", "0", ":", "\n", "            ", "train_test_stage", "=", "'fewshot'", "\n", "assert", "(", "len", "(", "batch", ")", "==", "6", ")", "\n", "images_train", ",", "labels_train", ",", "images_test", ",", "labels_test", ",", "K", ",", "nKbase", "=", "batch", "\n", "self", ".", "nKbase", "=", "nKbase", ".", "squeeze", "(", ")", "[", "0", "]", "\n", "self", ".", "tensors", "[", "'images_train'", "]", ".", "resize_", "(", "images_train", ".", "size", "(", ")", ")", ".", "copy_", "(", "images_train", ")", "\n", "self", ".", "tensors", "[", "'labels_train'", "]", ".", "resize_", "(", "labels_train", ".", "size", "(", ")", ")", ".", "copy_", "(", "labels_train", ")", "\n", "labels_train", "=", "self", ".", "tensors", "[", "'labels_train'", "]", "\n", "\n", "nKnovel", "=", "1", "+", "labels_train", ".", "max", "(", ")", "-", "self", ".", "nKbase", "\n", "\n", "labels_train_1hot_size", "=", "list", "(", "labels_train", ".", "size", "(", ")", ")", "+", "[", "nKnovel", ",", "]", "\n", "labels_train_unsqueeze", "=", "labels_train", ".", "unsqueeze", "(", "dim", "=", "labels_train", ".", "dim", "(", ")", ")", "\n", "self", ".", "tensors", "[", "'labels_train_1hot'", "]", ".", "resize_", "(", "labels_train_1hot_size", ")", ".", "fill_", "(", "0", ")", ".", "scatter_", "(", "\n", "len", "(", "labels_train_1hot_size", ")", "-", "1", ",", "labels_train_unsqueeze", "-", "self", ".", "nKbase", ",", "1", ")", "\n", "self", ".", "tensors", "[", "'images_test'", "]", ".", "resize_", "(", "images_test", ".", "size", "(", ")", ")", ".", "copy_", "(", "images_test", ")", "\n", "self", ".", "tensors", "[", "'labels_test'", "]", ".", "resize_", "(", "labels_test", ".", "size", "(", ")", ")", ".", "copy_", "(", "labels_test", ")", "\n", "self", ".", "tensors", "[", "'Kids'", "]", ".", "resize_", "(", "K", ".", "size", "(", ")", ")", ".", "copy_", "(", "K", ")", "\n", "", "else", ":", "\n", "            ", "train_test_stage", "=", "'base_classification'", "\n", "assert", "(", "len", "(", "batch", ")", "==", "4", ")", "\n", "images_test", ",", "labels_test", ",", "K", ",", "nKbase", "=", "batch", "\n", "self", ".", "nKbase", "=", "nKbase", ".", "squeeze", "(", ")", "[", "0", "]", "\n", "self", ".", "tensors", "[", "'images_test'", "]", ".", "resize_", "(", "images_test", ".", "size", "(", ")", ")", ".", "copy_", "(", "images_test", ")", "\n", "self", ".", "tensors", "[", "'labels_test'", "]", ".", "resize_", "(", "labels_test", ".", "size", "(", ")", ")", ".", "copy_", "(", "labels_test", ")", "\n", "self", ".", "tensors", "[", "'Kids'", "]", ".", "resize_", "(", "K", ".", "size", "(", ")", ")", ".", "copy_", "(", "K", ")", "\n", "\n", "", "return", "train_test_stage", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.FewShot.train_step": [[80, 82], ["FewShot.FewShot.process_batch"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.FewShot.process_batch"], ["", "def", "train_step", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "process_batch", "(", "batch", ",", "do_train", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.FewShot.evaluation_step": [[83, 85], ["FewShot.FewShot.process_batch"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.FewShot.process_batch"], ["", "def", "evaluation_step", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "process_batch", "(", "batch", ",", "do_train", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.FewShot.process_batch": [[86, 99], ["FewShot.FewShot.set_tensors", "FewShot.FewShot.process_batch_fewshot_without_forgetting", "FewShot.FewShot.process_batch_base_category_classification", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.FewShot.set_tensors", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.FewShot.process_batch_fewshot_without_forgetting", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.FewShot.process_batch_base_category_classification"], ["", "def", "process_batch", "(", "self", ",", "batch", ",", "do_train", ")", ":", "\n", "        ", "process_type", "=", "self", ".", "set_tensors", "(", "batch", ")", "\n", "\n", "if", "process_type", "==", "'fewshot'", ":", "\n", "            ", "record", "=", "self", ".", "process_batch_fewshot_without_forgetting", "(", "\n", "do_train", "=", "do_train", ")", "\n", "", "elif", "process_type", "==", "'base_classification'", ":", "\n", "            ", "record", "=", "self", ".", "process_batch_base_category_classification", "(", "\n", "do_train", "=", "do_train", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unexpected process type {0}'", ".", "format", "(", "process_type", ")", ")", "\n", "\n", "", "return", "record", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.FewShot.process_batch_base_category_classification": [[100, 154], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "images_test.size", "feat_model", "features_test_var.view.view.view", "classifier", "cls_scores_var.view.view.view", "labels_test_var.view.view.view", "criterion", "FewShot.top1accuracy", "FewShot.FewShot.optimizers[].zero_grad", "FewShot.FewShot.optimizers[].zero_grad", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "loss_total.backward", "FewShot.FewShot.optimizers[].step", "FewShot.FewShot.optimizers[].step", "Kids[].contiguous", "list", "features_test_var.view.view.size"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.top1accuracy"], ["", "def", "process_batch_base_category_classification", "(", "self", ",", "do_train", "=", "True", ")", ":", "\n", "        ", "images_test", "=", "self", ".", "tensors", "[", "'images_test'", "]", "\n", "labels_test", "=", "self", ".", "tensors", "[", "'labels_test'", "]", "\n", "Kids", "=", "self", ".", "tensors", "[", "'Kids'", "]", "\n", "nKbase", "=", "self", ".", "nKbase", "\n", "\n", "feat_model", "=", "self", ".", "networks", "[", "'feat_model'", "]", "\n", "classifier", "=", "self", ".", "networks", "[", "'classifier'", "]", "\n", "criterion", "=", "self", ".", "criterions", "[", "'loss'", "]", "\n", "if", "do_train", ":", "# zero the gradients", "\n", "            ", "self", ".", "optimizers", "[", "'feat_model'", "]", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizers", "[", "'classifier'", "]", ".", "zero_grad", "(", ")", "\n", "#********************************************************", "\n", "\n", "#***********************************************************************", "\n", "#*********************** SET TORCH VARIABLES ***************************", "\n", "", "images_test_var", "=", "Variable", "(", "images_test", ",", "volatile", "=", "(", "not", "do_train", ")", ")", "\n", "labels_test_var", "=", "Variable", "(", "labels_test", ",", "requires_grad", "=", "False", ")", "\n", "Kbase_var", "=", "(", "None", "if", "(", "nKbase", "==", "0", ")", "else", "Variable", "(", "\n", "Kids", "[", ":", ",", ":", "nKbase", "]", ".", "contiguous", "(", ")", ",", "requires_grad", "=", "False", ")", ")", "\n", "#***********************************************************************", "\n", "\n", "loss_record", "=", "{", "}", "\n", "#***********************************************************************", "\n", "#************************* FORWARD PHASE *******************************", "\n", "#*********** EXTRACT FEATURES FROM TRAIN & TEST IMAGES *****************", "\n", "batch_size", ",", "num_test_examples", ",", "channels", ",", "height", ",", "width", "=", "images_test", ".", "size", "(", ")", "\n", "new_batch_dim", "=", "batch_size", "*", "num_test_examples", "\n", "features_test_var", "=", "feat_model", "(", "\n", "images_test_var", ".", "view", "(", "new_batch_dim", ",", "channels", ",", "height", ",", "width", ")", ")", "\n", "features_test_var", "=", "features_test_var", ".", "view", "(", "\n", "[", "batch_size", ",", "num_test_examples", ",", "]", "+", "list", "(", "features_test_var", ".", "size", "(", ")", "[", "1", ":", "]", ")", ")", "\n", "#************************ APPLY CLASSIFIER *****************************", "\n", "cls_scores_var", "=", "classifier", "(", "features_test", "=", "features_test_var", ",", "Kbase_ids", "=", "Kbase_var", ")", "\n", "cls_scores_var", "=", "cls_scores_var", ".", "view", "(", "new_batch_dim", ",", "-", "1", ")", "\n", "labels_test_var", "=", "labels_test_var", ".", "view", "(", "new_batch_dim", ")", "\n", "#***********************************************************************", "\n", "#************************** COMPUTE LOSSES *****************************", "\n", "loss_cls_all", "=", "criterion", "(", "cls_scores_var", ",", "labels_test_var", ")", "\n", "loss_total", "=", "loss_cls_all", "\n", "loss_record", "[", "'loss'", "]", "=", "loss_total", ".", "data", "[", "0", "]", "\n", "loss_record", "[", "'AccuracyBase'", "]", "=", "top1accuracy", "(", "\n", "cls_scores_var", ".", "data", ",", "labels_test_var", ".", "data", ")", "\n", "#***********************************************************************", "\n", "\n", "#***********************************************************************", "\n", "#************************* BACKWARD PHASE ******************************", "\n", "if", "do_train", ":", "\n", "            ", "loss_total", ".", "backward", "(", ")", "\n", "self", ".", "optimizers", "[", "'feat_model'", "]", ".", "step", "(", ")", "\n", "self", ".", "optimizers", "[", "'classifier'", "]", ".", "step", "(", ")", "\n", "#***********************************************************************", "\n", "\n", "", "return", "loss_record", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.FewShot.process_batch_fewshot_without_forgetting": [[155, 283], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "images_train.size", "images_test.size", "feat_model", "feat_model", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "classifier.view", "labels_test_var.view.view.view", "criterion", "feat_model.eval", "FewShot.FewShot.optimizers[].zero_grad", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "classifier", "classifier", "FewShot.top1accuracy", "classifier.data.cpu", "labels_test_var.view.view.data.cpu", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "FewShot.top1accuracy", "FewShot.top1accuracy", "FewShot.top1accuracy", "loss_total.backward", "FewShot.FewShot.optimizers[].step", "FewShot.FewShot.test_accuracies[].append", "FewShot.activate_dropout_units", "FewShot.FewShot.optimizers[].zero_grad", "Kids[].contiguous", "list", "list", "FewShot.FewShot.optimizers[].step", "numpy.std", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "numpy.array", "numpy.sqrt", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.top1accuracy", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.top1accuracy", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.top1accuracy", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.top1accuracy", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.activate_dropout_units"], ["", "def", "process_batch_fewshot_without_forgetting", "(", "self", ",", "do_train", "=", "True", ")", ":", "\n", "        ", "images_train", "=", "self", ".", "tensors", "[", "'images_train'", "]", "\n", "labels_train", "=", "self", ".", "tensors", "[", "'labels_train'", "]", "\n", "labels_train_1hot", "=", "self", ".", "tensors", "[", "'labels_train_1hot'", "]", "\n", "images_test", "=", "self", ".", "tensors", "[", "'images_test'", "]", "\n", "labels_test", "=", "self", ".", "tensors", "[", "'labels_test'", "]", "\n", "Kids", "=", "self", ".", "tensors", "[", "'Kids'", "]", "\n", "nKbase", "=", "self", ".", "nKbase", "\n", "\n", "feat_model", "=", "self", ".", "networks", "[", "'feat_model'", "]", "\n", "classifier", "=", "self", ".", "networks", "[", "'classifier'", "]", "\n", "criterion", "=", "self", ".", "criterions", "[", "'loss'", "]", "\n", "\n", "do_train_feat_model", "=", "do_train", "and", "self", ".", "optimizers", "[", "'feat_model'", "]", "is", "not", "None", "\n", "if", "(", "not", "do_train_feat_model", ")", ":", "\n", "            ", "feat_model", ".", "eval", "(", ")", "\n", "if", "do_train", "and", "self", ".", "activate_dropout", ":", "\n", "# Activate the dropout units of the feature extraction model", "\n", "# even if the feature extraction model is freezed (i.e., it is", "\n", "# in eval mode).", "\n", "                ", "activate_dropout_units", "(", "feat_model", ")", "\n", "\n", "", "", "if", "do_train", ":", "# zero the gradients", "\n", "            ", "if", "do_train_feat_model", ":", "\n", "                ", "self", ".", "optimizers", "[", "'feat_model'", "]", ".", "zero_grad", "(", ")", "\n", "", "self", ".", "optimizers", "[", "'classifier'", "]", ".", "zero_grad", "(", ")", "\n", "\n", "#***********************************************************************", "\n", "#*********************** SET TORCH VARIABLES ***************************", "\n", "", "is_volatile", "=", "(", "not", "do_train", "or", "not", "do_train_feat_model", ")", "\n", "images_test_var", "=", "Variable", "(", "images_test", ",", "volatile", "=", "is_volatile", ")", "\n", "labels_test_var", "=", "Variable", "(", "labels_test", ",", "requires_grad", "=", "False", ")", "\n", "Kbase_var", "=", "(", "None", "if", "(", "nKbase", "==", "0", ")", "else", "\n", "Variable", "(", "Kids", "[", ":", ",", ":", "nKbase", "]", ".", "contiguous", "(", ")", ",", "requires_grad", "=", "False", ")", ")", "\n", "labels_train_1hot_var", "=", "Variable", "(", "labels_train_1hot", ",", "requires_grad", "=", "False", ")", "\n", "images_train_var", "=", "Variable", "(", "images_train", ",", "volatile", "=", "is_volatile", ")", "\n", "#***********************************************************************", "\n", "\n", "loss_record", "=", "{", "}", "\n", "#***********************************************************************", "\n", "#************************* FORWARD PHASE: ******************************", "\n", "\n", "#************ EXTRACT FEATURES FROM TRAIN & TEST IMAGES ****************", "\n", "batch_size", ",", "num_train_examples", ",", "channels", ",", "height", ",", "width", "=", "images_train", ".", "size", "(", ")", "\n", "num_test_examples", "=", "images_test", ".", "size", "(", "1", ")", "\n", "features_train_var", "=", "feat_model", "(", "\n", "images_train_var", ".", "view", "(", "batch_size", "*", "num_train_examples", ",", "channels", ",", "height", ",", "width", ")", "\n", ")", "\n", "features_test_var", "=", "feat_model", "(", "\n", "images_test_var", ".", "view", "(", "batch_size", "*", "num_test_examples", ",", "channels", ",", "height", ",", "width", ")", "\n", ")", "\n", "features_train_var", "=", "features_train_var", ".", "view", "(", "\n", "[", "batch_size", ",", "num_train_examples", ",", "]", "+", "list", "(", "features_train_var", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", ")", "\n", "features_test_var", "=", "features_test_var", ".", "view", "(", "\n", "[", "batch_size", ",", "num_test_examples", ",", "]", "+", "list", "(", "features_test_var", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", ")", "\n", "if", "(", "not", "do_train_feat_model", ")", "and", "do_train", ":", "\n", "# Make sure that no gradients are backproagated to the feature", "\n", "# extractor when the feature extraction model is freezed.", "\n", "            ", "features_train_var", "=", "Variable", "(", "features_train_var", ".", "data", ",", "volatile", "=", "False", ")", "\n", "features_test_var", "=", "Variable", "(", "features_test_var", ".", "data", ",", "volatile", "=", "False", ")", "\n", "#***********************************************************************", "\n", "\n", "#************************ APPLY CLASSIFIER *****************************", "\n", "", "if", "self", ".", "nKbase", ">", "0", ":", "\n", "            ", "cls_scores_var", "=", "classifier", "(", "\n", "features_test", "=", "features_test_var", ",", "\n", "Kbase_ids", "=", "Kbase_var", ",", "\n", "features_train", "=", "features_train_var", ",", "\n", "labels_train", "=", "labels_train_1hot_var", ")", "\n", "", "else", ":", "\n", "            ", "cls_scores_var", "=", "classifier", "(", "\n", "features_test", "=", "features_test_var", ",", "\n", "features_train", "=", "features_train_var", ",", "\n", "labels_train", "=", "labels_train_1hot_var", ")", "\n", "\n", "", "cls_scores_var", "=", "cls_scores_var", ".", "view", "(", "batch_size", "*", "num_test_examples", ",", "-", "1", ")", "\n", "labels_test_var", "=", "labels_test_var", ".", "view", "(", "batch_size", "*", "num_test_examples", ")", "\n", "#***********************************************************************", "\n", "\n", "#************************* COMPUTE LOSSES ******************************", "\n", "loss_cls_all", "=", "criterion", "(", "cls_scores_var", ",", "labels_test_var", ")", "\n", "loss_total", "=", "loss_cls_all", "\n", "loss_record", "[", "'loss'", "]", "=", "loss_total", ".", "data", "[", "0", "]", "\n", "\n", "if", "self", ".", "nKbase", ">", "0", ":", "\n", "            ", "loss_record", "[", "'AccuracyBoth'", "]", "=", "top1accuracy", "(", "\n", "cls_scores_var", ".", "data", ",", "labels_test_var", ".", "data", ")", "\n", "\n", "preds_data", "=", "cls_scores_var", ".", "data", ".", "cpu", "(", ")", "\n", "labels_test_data", "=", "labels_test_var", ".", "data", ".", "cpu", "(", ")", "\n", "base_ids", "=", "torch", ".", "nonzero", "(", "labels_test_data", "<", "self", ".", "nKbase", ")", ".", "view", "(", "-", "1", ")", "\n", "novel_ids", "=", "torch", ".", "nonzero", "(", "labels_test_data", ">=", "self", ".", "nKbase", ")", ".", "view", "(", "-", "1", ")", "\n", "preds_base", "=", "preds_data", "[", "base_ids", ",", ":", "]", "\n", "preds_novel", "=", "preds_data", "[", "novel_ids", ",", ":", "]", "\n", "\n", "loss_record", "[", "'AccuracyBase'", "]", "=", "top1accuracy", "(", "\n", "preds_base", "[", ":", ",", ":", "nKbase", "]", ",", "labels_test_data", "[", "base_ids", "]", ")", "\n", "loss_record", "[", "'AccuracyNovel'", "]", "=", "top1accuracy", "(", "\n", "preds_novel", "[", ":", ",", "nKbase", ":", "]", ",", "(", "labels_test_data", "[", "novel_ids", "]", "-", "nKbase", ")", ")", "\n", "", "else", ":", "\n", "            ", "loss_record", "[", "'AccuracyNovel'", "]", "=", "top1accuracy", "(", "\n", "cls_scores_var", ".", "data", ",", "labels_test_var", ".", "data", ")", "\n", "#***********************************************************************", "\n", "\n", "#***********************************************************************", "\n", "#************************* BACKWARD PHASE ******************************", "\n", "", "if", "do_train", ":", "\n", "            ", "loss_total", ".", "backward", "(", ")", "\n", "if", "do_train_feat_model", ":", "\n", "                ", "self", ".", "optimizers", "[", "'feat_model'", "]", ".", "step", "(", ")", "\n", "", "self", ".", "optimizers", "[", "'classifier'", "]", ".", "step", "(", ")", "\n", "#***********************************************************************", "\n", "\n", "", "if", "(", "not", "do_train", ")", ":", "\n", "            ", "if", "self", ".", "biter", "==", "0", ":", "self", ".", "test_accuracies", "=", "{", "'AccuracyNovel'", ":", "[", "]", "}", "\n", "self", ".", "test_accuracies", "[", "'AccuracyNovel'", "]", ".", "append", "(", "\n", "loss_record", "[", "'AccuracyNovel'", "]", ")", "\n", "if", "self", ".", "biter", "==", "(", "self", ".", "bnumber", "-", "1", ")", ":", "\n", "# Compute the std and the confidence interval of the accuracy of", "\n", "# the novel categories.", "\n", "                ", "stds", "=", "np", ".", "std", "(", "np", ".", "array", "(", "self", ".", "test_accuracies", "[", "'AccuracyNovel'", "]", ")", ",", "0", ")", "\n", "ci95", "=", "1.96", "*", "stds", "/", "np", ".", "sqrt", "(", "self", ".", "bnumber", ")", "\n", "loss_record", "[", "'AccuracyNovel_std'", "]", "=", "stds", "\n", "loss_record", "[", "'AccuracyNovel_cnf'", "]", "=", "ci95", "\n", "\n", "", "", "return", "loss_record", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.top1accuracy": [[16, 22], ["output.max", "pred.view.view", "target.view.view", "pred.view.eq().float().mean", "pred.view.eq().float", "pred.view.eq"], "function", ["None"], ["def", "top1accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "_", ",", "pred", "=", "output", ".", "max", "(", "dim", "=", "1", ")", "\n", "pred", "=", "pred", ".", "view", "(", "-", "1", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "accuracy", "=", "100", "*", "pred", ".", "eq", "(", "target", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.FewShot.activate_dropout_units": [[24, 28], ["model.modules", "isinstance"], "function", ["None"], ["", "def", "activate_dropout_units", "(", "model", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Dropout", ")", ":", "\n", "            ", "m", ".", "training", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.__init__": [[22, 36], ["Algorithm.Algorithm.set_experiment_dir", "Algorithm.Algorithm.set_log_file_handler", "Algorithm.Algorithm.logger.info", "Algorithm.Algorithm.init_all_networks", "Algorithm.Algorithm.init_all_criterions", "Algorithm.Algorithm.allocate_tensors"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.set_experiment_dir", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.set_log_file_handler", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_all_networks", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_all_criterions", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.allocate_tensors"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "set_experiment_dir", "(", "opt", "[", "'exp_dir'", "]", ")", "\n", "self", ".", "set_log_file_handler", "(", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "'Algorithm options %s'", "%", "opt", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "init_all_networks", "(", ")", "\n", "self", ".", "init_all_criterions", "(", ")", "\n", "self", ".", "allocate_tensors", "(", ")", "\n", "self", ".", "curr_epoch", "=", "0", "\n", "self", ".", "optimizers", "=", "{", "}", "\n", "\n", "self", ".", "keep_best_model_metric_name", "=", "(", "\n", "opt", "[", "'best_metric'", "]", "if", "(", "'best_metric'", "in", "opt", ")", "else", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.set_experiment_dir": [[37, 49], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["None"], ["", "def", "set_experiment_dir", "(", "self", ",", "directory_path", ")", ":", "\n", "        ", "self", ".", "exp_dir", "=", "directory_path", "\n", "if", "(", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "exp_dir", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "exp_dir", ")", "\n", "\n", "", "self", ".", "vis_dir", "=", "os", ".", "path", ".", "join", "(", "directory_path", ",", "'visuals'", ")", "\n", "if", "(", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "vis_dir", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "vis_dir", ")", "\n", "\n", "", "self", ".", "preds_dir", "=", "os", ".", "path", ".", "join", "(", "directory_path", ",", "'preds'", ")", "\n", "if", "(", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "preds_dir", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "preds_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.set_log_file_handler": [[50, 70], ["logging.getLogger", "logging.StreamHandler", "logging.Formatter", "logging.StreamHandler.setFormatter", "Algorithm.Algorithm.logger.addHandler", "Algorithm.Algorithm.logger.setLevel", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "datetime.datetime.now().__str__().replace", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "logging.FileHandler", "Algorithm.Algorithm.log_fileHandler.setFormatter", "Algorithm.Algorithm.logger.addHandler", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "datetime.datetime.now().__str__", "datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.__str__"], ["", "", "def", "set_log_file_handler", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "strHandler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "'%(asctime)s - %(name)-8s - %(levelname)-6s - %(message)s'", ")", "\n", "strHandler", ".", "setFormatter", "(", "formatter", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "strHandler", ")", "\n", "self", ".", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "'logs'", ")", "\n", "if", "(", "not", "os", ".", "path", ".", "isdir", "(", "log_dir", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "\n", "", "now_str", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "__str__", "(", ")", ".", "replace", "(", "' '", ",", "'_'", ")", "\n", "\n", "self", ".", "log_file", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'LOG_INFO_'", "+", "now_str", "+", "'.txt'", ")", "\n", "self", ".", "log_fileHandler", "=", "logging", ".", "FileHandler", "(", "self", ".", "log_file", ")", "\n", "self", ".", "log_fileHandler", ".", "setFormatter", "(", "formatter", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "self", ".", "log_fileHandler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_all_networks": [[71, 85], ["networks_defs.items", "Algorithm.Algorithm.logger.info", "Algorithm.Algorithm.init_network"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_network"], ["", "def", "init_all_networks", "(", "self", ")", ":", "\n", "        ", "networks_defs", "=", "self", ".", "opt", "[", "'networks'", "]", "\n", "self", ".", "networks", "=", "{", "}", "\n", "self", ".", "optim_params", "=", "{", "}", "\n", "\n", "for", "key", ",", "val", "in", "networks_defs", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Set network %s'", "%", "key", ")", "\n", "def_file", "=", "val", "[", "'def_file'", "]", "\n", "net_opt", "=", "val", "[", "'opt'", "]", "\n", "self", ".", "optim_params", "[", "key", "]", "=", "(", "\n", "val", "[", "'optim_params'", "]", "if", "(", "'optim_params'", "in", "val", ")", "else", "None", ")", "\n", "pretrained_path", "=", "val", "[", "'pretrained'", "]", "if", "(", "'pretrained'", "in", "val", ")", "else", "None", "\n", "self", ".", "networks", "[", "key", "]", "=", "self", ".", "init_network", "(", "\n", "def_file", ",", "net_opt", ",", "pretrained_path", ",", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_network": [[86, 97], ["Algorithm.Algorithm.logger.info", "imp.load_source().create_model", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "ValueError", "Algorithm.Algorithm.load_pretrained", "imp.load_source"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.create_model", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.load_pretrained"], ["", "", "def", "init_network", "(", "self", ",", "net_def_file", ",", "net_opt", ",", "pretrained_path", ",", "key", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'==> Initiliaze network %s from file %s with opts: %s'", "%", "\n", "(", "key", ",", "net_def_file", ",", "net_opt", ")", ")", "\n", "if", "(", "not", "os", ".", "path", ".", "isfile", "(", "net_def_file", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Non existing file: {0}'", ".", "format", "(", "net_def_file", ")", ")", "\n", "\n", "", "network", "=", "imp", ".", "load_source", "(", "''", ",", "net_def_file", ")", ".", "create_model", "(", "net_opt", ")", "\n", "if", "pretrained_path", "!=", "None", ":", "\n", "            ", "self", ".", "load_pretrained", "(", "network", ",", "pretrained_path", ")", "\n", "\n", "", "return", "network", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.load_pretrained": [[98, 119], ["glob.glob", "Algorithm.Algorithm.logger.info", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "len", "ValueError", "pretrained_model[].keys", "network.state_dict().keys", "network.load_state_dict", "Algorithm.Algorithm.logger.info", "network.named_parameters", "network.state_dict", "Algorithm.Algorithm.logger.info", "param.data.copy_"], "methods", ["None"], ["", "def", "load_pretrained", "(", "self", ",", "network", ",", "pretrained_path", ")", ":", "\n", "        ", "all_possible_files", "=", "glob", ".", "glob", "(", "pretrained_path", ")", "\n", "if", "len", "(", "all_possible_files", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'{0}: no such file'", ".", "format", "(", "pretrained_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "pretrained_path", "=", "all_possible_files", "[", "-", "1", "]", "\n", "", "self", ".", "logger", ".", "info", "(", "'==> Load pretrained parameters from file %s:'", "%", "\n", "pretrained_path", ")", "\n", "\n", "assert", "(", "os", ".", "path", ".", "isfile", "(", "pretrained_path", ")", ")", "\n", "pretrained_model", "=", "torch", ".", "load", "(", "pretrained_path", ")", "\n", "if", "pretrained_model", "[", "'network'", "]", ".", "keys", "(", ")", "==", "network", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "            ", "network", ".", "load_state_dict", "(", "pretrained_model", "[", "'network'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'==> WARNING: network parameters in pre-trained file'", "\n", "' %s do not strictly match'", "%", "(", "pretrained_path", ")", ")", "\n", "for", "pname", ",", "param", "in", "network", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "pname", "in", "pretrained_model", "[", "'network'", "]", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "'==> Copying parameter %s from file %s'", "%", "\n", "(", "pname", ",", "pretrained_path", ")", ")", "\n", "param", ".", "data", ".", "copy_", "(", "pretrained_model", "[", "'network'", "]", "[", "pname", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_all_optimizers": [[120, 127], ["Algorithm.Algorithm.optim_params.items", "Algorithm.Algorithm.init_optimizer"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_optimizer"], ["", "", "", "", "def", "init_all_optimizers", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizers", "=", "{", "}", "\n", "for", "key", ",", "oparams", "in", "self", ".", "optim_params", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "optimizers", "[", "key", "]", "=", "None", "\n", "if", "oparams", "!=", "None", ":", "\n", "                ", "self", ".", "optimizers", "[", "key", "]", "=", "self", ".", "init_optimizer", "(", "\n", "self", ".", "networks", "[", "key", "]", ",", "oparams", ",", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_optimizer": [[128, 147], ["filter", "Algorithm.Algorithm.logger.info", "net.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "ValueError"], "methods", ["None"], ["", "", "", "def", "init_optimizer", "(", "self", ",", "net", ",", "optim_opts", ",", "key", ")", ":", "\n", "        ", "optim_type", "=", "optim_opts", "[", "'optim_type'", "]", "\n", "learning_rate", "=", "optim_opts", "[", "'lr'", "]", "\n", "optimizer", "=", "None", "\n", "parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "net", ".", "parameters", "(", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Initialize optimizer: %s with params: %s for netwotk: %s'", "\n", "%", "(", "optim_type", ",", "optim_opts", ",", "key", ")", ")", "\n", "if", "optim_type", "==", "'adam'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "learning_rate", ",", "\n", "betas", "=", "optim_opts", "[", "'beta'", "]", ")", "\n", "", "elif", "optim_type", "==", "'sgd'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "learning_rate", ",", "\n", "momentum", "=", "optim_opts", "[", "'momentum'", "]", ",", "\n", "nesterov", "=", "optim_opts", "[", "'nesterov'", "]", "if", "(", "'nesterov'", "in", "optim_opts", ")", "else", "False", ",", "\n", "weight_decay", "=", "optim_opts", "[", "'weight_decay'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not supported or recognized optim_type'", ",", "optim_type", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_all_criterions": [[148, 157], ["criterions_defs.items", "Algorithm.Algorithm.logger.info", "Algorithm.Algorithm.init_criterion"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_criterion"], ["", "def", "init_all_criterions", "(", "self", ")", ":", "\n", "        ", "criterions_defs", "=", "self", ".", "opt", "[", "'criterions'", "]", "\n", "self", ".", "criterions", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "criterions_defs", ".", "items", "(", ")", ":", "\n", "            ", "crit_type", "=", "val", "[", "'ctype'", "]", "\n", "crit_opt", "=", "val", "[", "'opt'", "]", "if", "(", "'opt'", "in", "val", ")", "else", "None", "\n", "self", ".", "logger", ".", "info", "(", "'Initialize criterion[%s]: %s with options: %s'", "%", "\n", "(", "key", ",", "crit_type", ",", "crit_opt", ")", ")", "\n", "self", ".", "criterions", "[", "key", "]", "=", "self", ".", "init_criterion", "(", "crit_type", ",", "crit_opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_criterion": [[158, 160], ["getattr"], "methods", ["None"], ["", "", "def", "init_criterion", "(", "self", ",", "ctype", ",", "copt", ")", ":", "\n", "        ", "return", "getattr", "(", "nn", ",", "ctype", ")", "(", "copt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.load_to_gpu": [[161, 170], ["Algorithm.Algorithm.networks.items", "Algorithm.Algorithm.criterions.items", "Algorithm.Algorithm.tensors.items", "net.cuda", "criterion.cuda", "tensor.cuda"], "methods", ["None"], ["", "def", "load_to_gpu", "(", "self", ")", ":", "\n", "        ", "for", "key", ",", "net", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "networks", "[", "key", "]", "=", "net", ".", "cuda", "(", ")", "\n", "\n", "", "for", "key", ",", "criterion", "in", "self", ".", "criterions", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "criterions", "[", "key", "]", "=", "criterion", ".", "cuda", "(", ")", "\n", "\n", "", "for", "key", ",", "tensor", "in", "self", ".", "tensors", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "tensors", "[", "key", "]", "=", "tensor", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.save_checkpoint": [[171, 176], ["Algorithm.Algorithm.networks.items", "Algorithm.Algorithm.save_network", "Algorithm.Algorithm.save_optimizer"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.save_network", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.save_optimizer"], ["", "", "def", "save_checkpoint", "(", "self", ",", "epoch", ",", "suffix", "=", "''", ",", "metric", "=", "None", ")", ":", "\n", "        ", "for", "key", ",", "net", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "optimizers", "[", "key", "]", "==", "None", ":", "continue", "\n", "self", ".", "save_network", "(", "key", ",", "epoch", ",", "suffix", "=", "suffix", ",", "metric", "=", "metric", ")", "\n", "self", ".", "save_optimizer", "(", "key", ",", "epoch", ",", "suffix", "=", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.find_most_recent_epoch": [[177, 194], ["glob.glob", "search_patern.split", "sorted", "int", "Algorithm.Algorithm.logger.info", "Algorithm.Algorithm._get_net_checkpoint_filename", "len", "ValueError", "len", "fname.replace().replace", "int", "len", "epoch.isdigit", "str", "fname.replace"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm._get_net_checkpoint_filename"], ["", "", "def", "find_most_recent_epoch", "(", "self", ",", "key", ",", "suffix", ")", ":", "\n", "        ", "search_patern", "=", "self", ".", "_get_net_checkpoint_filename", "(", "key", ",", "'*'", ")", "+", "suffix", "\n", "all_files", "=", "glob", ".", "glob", "(", "search_patern", ")", "\n", "if", "len", "(", "all_files", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'%s: no such file.'", "%", "(", "search_patern", ")", ")", "\n", "\n", "", "substrings", "=", "search_patern", ".", "split", "(", "'*'", ")", "\n", "assert", "(", "len", "(", "substrings", ")", "==", "2", ")", "\n", "start", ",", "end", "=", "substrings", "\n", "all_epochs", "=", "[", "fname", ".", "replace", "(", "start", ",", "''", ")", ".", "replace", "(", "end", ",", "''", ")", "for", "fname", "in", "all_files", "]", "\n", "all_epochs", "=", "[", "int", "(", "epoch", ")", "for", "epoch", "in", "all_epochs", "if", "epoch", ".", "isdigit", "(", ")", "]", "\n", "assert", "(", "len", "(", "all_epochs", ")", ">", "0", ")", "\n", "all_epochs", "=", "sorted", "(", "all_epochs", ")", "\n", "most_recent_epoch", "=", "int", "(", "all_epochs", "[", "-", "1", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Load checkpoint of most recent epoch %s'", "%", "\n", "str", "(", "most_recent_epoch", ")", ")", "\n", "return", "most_recent_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.load_checkpoint": [[195, 211], ["Algorithm.Algorithm.logger.info", "Algorithm.Algorithm.networks.items", "Algorithm.Algorithm.load_network", "Algorithm.Algorithm.init_all_optimizers", "Algorithm.Algorithm.networks.items", "str", "Algorithm.Algorithm.find_most_recent_epoch", "Algorithm.Algorithm.load_optimizer"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.load_network", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_all_optimizers", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.find_most_recent_epoch", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.load_optimizer"], ["", "def", "load_checkpoint", "(", "self", ",", "epoch", ",", "train", "=", "True", ",", "suffix", "=", "''", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'Load checkpoint of epoch %s'", "%", "(", "str", "(", "epoch", ")", ")", ")", "\n", "\n", "for", "key", ",", "net", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "# Load networks", "\n", "            ", "if", "self", ".", "optim_params", "[", "key", "]", "==", "None", ":", "continue", "\n", "if", "epoch", "==", "'*'", ":", "\n", "                ", "epoch", "=", "self", ".", "find_most_recent_epoch", "(", "key", ",", "suffix", ")", "\n", "", "self", ".", "load_network", "(", "key", ",", "epoch", ",", "suffix", ")", "\n", "\n", "", "if", "train", ":", "# initialize and load optimizers", "\n", "            ", "self", ".", "init_all_optimizers", "(", ")", "\n", "for", "key", ",", "net", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "                ", "if", "self", ".", "optim_params", "[", "key", "]", "==", "None", ":", "continue", "\n", "self", ".", "load_optimizer", "(", "key", ",", "epoch", ",", "suffix", ")", "\n", "\n", "", "", "self", ".", "curr_epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.delete_checkpoint": [[212, 221], ["Algorithm.Algorithm.networks.items", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "Algorithm.Algorithm._get_net_checkpoint_filename", "os.remove", "os.remove", "os.remove", "os.remove", "Algorithm.Algorithm._get_optim_checkpoint_filename", "os.remove", "os.remove", "os.remove", "os.remove"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm._get_net_checkpoint_filename", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm._get_optim_checkpoint_filename"], ["", "def", "delete_checkpoint", "(", "self", ",", "epoch", ",", "suffix", "=", "''", ")", ":", "\n", "        ", "for", "key", ",", "net", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "optimizers", "[", "key", "]", "==", "None", ":", "continue", "\n", "\n", "filename_net", "=", "self", ".", "_get_net_checkpoint_filename", "(", "key", ",", "epoch", ")", "+", "suffix", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename_net", ")", ":", "os", ".", "remove", "(", "filename_net", ")", "\n", "\n", "filename_optim", "=", "self", ".", "_get_optim_checkpoint_filename", "(", "key", ",", "epoch", ")", "+", "suffix", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename_optim", ")", ":", "os", ".", "remove", "(", "filename_optim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.save_network": [[222, 231], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "Algorithm.Algorithm._get_net_checkpoint_filename", "Algorithm.Algorithm.networks[].state_dict"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm._get_net_checkpoint_filename"], ["", "", "def", "save_network", "(", "self", ",", "net_key", ",", "epoch", ",", "suffix", "=", "''", ",", "metric", "=", "None", ")", ":", "\n", "        ", "assert", "(", "net_key", "in", "self", ".", "networks", ")", "\n", "filename", "=", "self", ".", "_get_net_checkpoint_filename", "(", "net_key", ",", "epoch", ")", "+", "suffix", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'network'", ":", "self", ".", "networks", "[", "net_key", "]", ".", "state_dict", "(", ")", ",", "\n", "'metric'", ":", "metric", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.save_optimizer": [[232, 240], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "Algorithm.Algorithm._get_optim_checkpoint_filename", "Algorithm.Algorithm.optimizers[].state_dict"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm._get_optim_checkpoint_filename"], ["", "def", "save_optimizer", "(", "self", ",", "net_key", ",", "epoch", ",", "suffix", "=", "''", ")", ":", "\n", "        ", "assert", "(", "net_key", "in", "self", ".", "optimizers", ")", "\n", "filename", "=", "self", ".", "_get_optim_checkpoint_filename", "(", "net_key", ",", "epoch", ")", "+", "suffix", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'optimizer'", ":", "self", ".", "optimizers", "[", "net_key", "]", ".", "state_dict", "(", ")", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.load_network": [[241, 250], ["Algorithm.Algorithm.logger.info", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "Algorithm.Algorithm._get_net_checkpoint_filename", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "Algorithm.Algorithm.networks[].load_state_dict"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm._get_net_checkpoint_filename"], ["", "def", "load_network", "(", "self", ",", "net_key", ",", "epoch", ",", "suffix", "=", "''", ")", ":", "\n", "        ", "assert", "(", "net_key", "in", "self", ".", "networks", ")", "\n", "filename", "=", "self", ".", "_get_net_checkpoint_filename", "(", "net_key", ",", "epoch", ")", "+", "suffix", "\n", "self", ".", "logger", ".", "info", "(", "'Loading {0} for network {1}'", ".", "format", "(", "\n", "filename", ",", "net_key", ")", ")", "\n", "assert", "(", "os", ".", "path", ".", "isfile", "(", "filename", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "self", ".", "networks", "[", "net_key", "]", ".", "load_state_dict", "(", "checkpoint", "[", "'network'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.load_optimizer": [[251, 258], ["os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "Algorithm.Algorithm._get_optim_checkpoint_filename", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "Algorithm.Algorithm.optimizers[].load_state_dict"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm._get_optim_checkpoint_filename"], ["", "", "def", "load_optimizer", "(", "self", ",", "net_key", ",", "epoch", ",", "suffix", "=", "''", ")", ":", "\n", "        ", "assert", "(", "net_key", "in", "self", ".", "optimizers", ")", "\n", "filename", "=", "self", ".", "_get_optim_checkpoint_filename", "(", "net_key", ",", "epoch", ")", "+", "suffix", "\n", "assert", "(", "os", ".", "path", ".", "isfile", "(", "filename", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "self", ".", "optimizers", "[", "net_key", "]", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm._get_net_checkpoint_filename": [[259, 261], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "str"], "methods", ["None"], ["", "", "def", "_get_net_checkpoint_filename", "(", "self", ",", "net_key", ",", "epoch", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "net_key", "+", "'_net_epoch'", "+", "str", "(", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm._get_optim_checkpoint_filename": [[262, 264], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "str"], "methods", ["None"], ["", "def", "_get_optim_checkpoint_filename", "(", "self", ",", "net_key", ",", "epoch", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "net_key", "+", "'_optim_epoch'", "+", "str", "(", "epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.solve": [[265, 291], ["Algorithm.Algorithm.init_record_of_best_model", "xrange", "Algorithm.Algorithm.print_eval_stats_of_best_model", "len", "Algorithm.Algorithm.init_all_optimizers", "Algorithm.Algorithm.logger.info", "Algorithm.Algorithm.adjust_learning_rates", "Algorithm.Algorithm.run_train_epoch", "Algorithm.Algorithm.logger.info", "Algorithm.Algorithm.save_checkpoint", "Algorithm.Algorithm.delete_checkpoint", "Algorithm.Algorithm.evaluate", "Algorithm.Algorithm.logger.info", "Algorithm.Algorithm.keep_record_of_best_model"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_record_of_best_model", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.print_eval_stats_of_best_model", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_all_optimizers", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.adjust_learning_rates", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.run_train_epoch", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.save_checkpoint", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.delete_checkpoint", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.evaluate", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.keep_record_of_best_model"], ["", "def", "solve", "(", "self", ",", "data_loader_train", ",", "data_loader_test", "=", "None", ")", ":", "\n", "        ", "self", ".", "max_num_epochs", "=", "self", ".", "opt", "[", "'max_num_epochs'", "]", "\n", "start_epoch", "=", "self", ".", "curr_epoch", "\n", "if", "len", "(", "self", ".", "optimizers", ")", "==", "0", ":", "\n", "            ", "self", ".", "init_all_optimizers", "(", ")", "\n", "\n", "", "eval_stats", "=", "{", "}", "\n", "train_stats", "=", "{", "}", "\n", "self", ".", "init_record_of_best_model", "(", ")", "\n", "for", "self", ".", "curr_epoch", "in", "xrange", "(", "start_epoch", ",", "self", ".", "max_num_epochs", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Training epoch [%3d / %3d]'", "%", "\n", "(", "self", ".", "curr_epoch", "+", "1", ",", "self", ".", "max_num_epochs", ")", ")", "\n", "self", ".", "adjust_learning_rates", "(", "self", ".", "curr_epoch", ")", "\n", "train_stats", "=", "self", ".", "run_train_epoch", "(", "data_loader_train", ",", "self", ".", "curr_epoch", ")", "\n", "self", ".", "logger", ".", "info", "(", "'==> Training stats: %s'", "%", "(", "train_stats", ")", ")", "\n", "\n", "self", ".", "save_checkpoint", "(", "self", ".", "curr_epoch", "+", "1", ")", "# create a checkpoint in the current epoch", "\n", "if", "start_epoch", "!=", "self", ".", "curr_epoch", ":", "# delete the checkpoint of the previous epoch", "\n", "                ", "self", ".", "delete_checkpoint", "(", "self", ".", "curr_epoch", ")", "\n", "\n", "", "if", "data_loader_test", "is", "not", "None", ":", "\n", "                ", "eval_stats", "=", "self", ".", "evaluate", "(", "data_loader_test", ")", "\n", "self", ".", "logger", ".", "info", "(", "'==> Evaluation stats: %s'", "%", "(", "eval_stats", ")", ")", "\n", "self", ".", "keep_record_of_best_model", "(", "eval_stats", ",", "self", ".", "curr_epoch", ")", "\n", "\n", "", "", "self", ".", "print_eval_stats_of_best_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.run_train_epoch": [[292, 315], ["Algorithm.Algorithm.logger.info", "Algorithm.Algorithm.networks.items", "utils.DAverageMeter", "len", "enumerate", "utils.DAverageMeter.average", "data_loader", "tqdm.tqdm.tqdm", "Algorithm.Algorithm.train_step", "utils.DAverageMeter.update", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "network.eval", "network.train", "data_loader", "Algorithm.Algorithm.logger.info", "len", "len", "utils.DAverageMeter.average"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.average", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.train_step", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.update", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.average"], ["", "def", "run_train_epoch", "(", "self", ",", "data_loader", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'Training: %s'", "%", "os", ".", "path", ".", "basename", "(", "self", ".", "exp_dir", ")", ")", "\n", "self", ".", "dloader", "=", "data_loader", "\n", "self", ".", "dataset_train", "=", "data_loader", ".", "dataset", "\n", "\n", "for", "key", ",", "network", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "optimizers", "[", "key", "]", "==", "None", ":", "network", ".", "eval", "(", ")", "\n", "else", ":", "network", ".", "train", "(", ")", "\n", "\n", "", "disp_step", "=", "self", ".", "opt", "[", "'disp_step'", "]", "if", "(", "'disp_step'", "in", "self", ".", "opt", ")", "else", "50", "\n", "train_stats", "=", "utils", ".", "DAverageMeter", "(", ")", "\n", "self", ".", "bnumber", "=", "len", "(", "data_loader", "(", ")", ")", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "data_loader", "(", "epoch", ")", ")", ")", ":", "\n", "            ", "self", ".", "biter", "=", "idx", "# batch iteration.", "\n", "self", ".", "global_iter", "=", "self", ".", "curr_epoch", "*", "len", "(", "data_loader", ")", "+", "self", ".", "biter", "\n", "train_stats_this", "=", "self", ".", "train_step", "(", "batch", ")", "\n", "train_stats", ".", "update", "(", "train_stats_this", ")", "\n", "if", "(", "idx", "+", "1", ")", "%", "disp_step", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'==> Iteration [%3d][%4d / %4d]: %s'", "%", "\n", "(", "epoch", "+", "1", ",", "idx", "+", "1", ",", "len", "(", "data_loader", ")", ",", "\n", "train_stats", ".", "average", "(", ")", ")", ")", "\n", "\n", "", "", "return", "train_stats", ".", "average", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.evaluate": [[316, 336], ["Algorithm.Algorithm.logger.info", "Algorithm.Algorithm.logger.info", "Algorithm.Algorithm.networks.items", "utils.DAverageMeter", "len", "enumerate", "Algorithm.Algorithm.logger.info", "utils.DAverageMeter.average", "network.eval", "tqdm.tqdm.tqdm", "Algorithm.Algorithm.evaluation_step", "utils.DAverageMeter.update", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "dloader", "utils.DAverageMeter.average", "len"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.average", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.evaluation_step", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.update", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.None.utils.DAverageMeter.average"], ["", "def", "evaluate", "(", "self", ",", "dloader", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "'Evaluating: %s'", "%", "os", ".", "path", ".", "basename", "(", "self", ".", "exp_dir", ")", ")", "\n", "\n", "self", ".", "dloader", "=", "dloader", "\n", "self", ".", "dataset_eval", "=", "dloader", ".", "dataset", "\n", "self", ".", "logger", ".", "info", "(", "'==> Dataset: %s [%d batches]'", "%", "\n", "(", "dloader", ".", "dataset", ".", "name", ",", "len", "(", "dloader", ")", ")", ")", "\n", "for", "key", ",", "network", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "            ", "network", ".", "eval", "(", ")", "\n", "\n", "", "eval_stats", "=", "utils", ".", "DAverageMeter", "(", ")", "\n", "self", ".", "bnumber", "=", "len", "(", "dloader", ")", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "dloader", "(", ")", ")", ")", ":", "\n", "            ", "self", ".", "biter", "=", "idx", "\n", "eval_stats_this", "=", "self", ".", "evaluation_step", "(", "batch", ")", "\n", "eval_stats", ".", "update", "(", "eval_stats_this", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'==> Results: %s'", "%", "eval_stats", ".", "average", "(", ")", ")", "\n", "\n", "return", "eval_stats", ".", "average", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.adjust_learning_rates": [[337, 349], ["optim_params_filtered.items", "next", "Algorithm.Algorithm.logger.info", "Algorithm.Algorithm.optim_params.items"], "methods", ["None"], ["", "def", "adjust_learning_rates", "(", "self", ",", "epoch", ")", ":", "\n", "# filter out the networks that are not trainable and that do", "\n", "# not have a learning rate Look Up Table (LUT_lr) in their optim_params", "\n", "        ", "optim_params_filtered", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "optim_params", ".", "items", "(", ")", "\n", "if", "(", "v", "!=", "None", "and", "(", "'LUT_lr'", "in", "v", ")", ")", "}", "\n", "\n", "for", "key", ",", "oparams", "in", "optim_params_filtered", ".", "items", "(", ")", ":", "\n", "            ", "LUT", "=", "oparams", "[", "'LUT_lr'", "]", "\n", "lr", "=", "next", "(", "(", "lr", "for", "(", "max_epoch", ",", "lr", ")", "in", "LUT", "if", "max_epoch", ">", "epoch", ")", ",", "LUT", "[", "-", "1", "]", "[", "1", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "'==> Set to %s optimizer lr = %.10f'", "%", "(", "key", ",", "lr", ")", ")", "\n", "for", "param_group", "in", "self", ".", "optimizers", "[", "key", "]", ".", "param_groups", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.init_record_of_best_model": [[350, 354], ["None"], "methods", ["None"], ["", "", "", "def", "init_record_of_best_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "max_metric_val", "=", "None", "\n", "self", ".", "best_stats", "=", "None", "\n", "self", ".", "best_epoch", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.keep_record_of_best_model": [[355, 372], ["ValueError", "Algorithm.Algorithm.save_checkpoint", "Algorithm.Algorithm.print_eval_stats_of_best_model", "Algorithm.Algorithm.delete_checkpoint"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.save_checkpoint", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.print_eval_stats_of_best_model", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.delete_checkpoint"], ["", "def", "keep_record_of_best_model", "(", "self", ",", "eval_stats", ",", "current_epoch", ")", ":", "\n", "        ", "if", "self", ".", "keep_best_model_metric_name", "is", "not", "None", ":", "\n", "            ", "metric_name", "=", "self", ".", "keep_best_model_metric_name", "\n", "if", "(", "metric_name", "not", "in", "eval_stats", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'The provided metric {0} for keeping the best '", "\n", "'model is not computed by the evaluation routine.'", "\n", ".", "format", "(", "metric_name", ")", ")", "\n", "", "metric_val", "=", "eval_stats", "[", "metric_name", "]", "\n", "if", "self", ".", "max_metric_val", "is", "None", "or", "metric_val", ">", "self", ".", "max_metric_val", ":", "\n", "                ", "self", ".", "max_metric_val", "=", "metric_val", "\n", "self", ".", "best_stats", "=", "eval_stats", "\n", "self", ".", "save_checkpoint", "(", "\n", "self", ".", "curr_epoch", "+", "1", ",", "suffix", "=", "'.best'", ",", "metric", "=", "self", ".", "max_metric_val", ")", "\n", "if", "self", ".", "best_epoch", "is", "not", "None", ":", "\n", "                    ", "self", ".", "delete_checkpoint", "(", "self", ".", "best_epoch", "+", "1", ",", "suffix", "=", "'.best'", ")", "\n", "", "self", ".", "best_epoch", "=", "current_epoch", "\n", "self", ".", "print_eval_stats_of_best_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.print_eval_stats_of_best_model": [[373, 378], ["Algorithm.Algorithm.logger.info"], "methods", ["None"], ["", "", "", "def", "print_eval_stats_of_best_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "best_stats", "is", "not", "None", ":", "\n", "            ", "metric_name", "=", "self", ".", "keep_best_model_metric_name", "\n", "self", ".", "logger", ".", "info", "(", "'==> Best results w.r.t. %s metric: epoch: %d - %s'", "\n", "%", "(", "metric_name", ",", "self", ".", "best_epoch", "+", "1", ",", "self", ".", "best_stats", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.train_step": [[381, 391], ["None"], "methods", ["None"], ["", "", "def", "train_step", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Implements a training step that includes:\n            * Forward a batch through the network(s)\n            * Compute loss(es)\n            * Backward propagation through the networks\n            * Apply optimization step(s)\n            * Return a dictionary with the computed losses and any other desired\n                stats. The key names on the dictionary can be arbitrary.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.evaluation_step": [[392, 401], ["None"], "methods", ["None"], ["", "def", "evaluation_step", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Implements an evaluation step that includes:\n            * Forward a batch through the network(s)\n            * Compute loss(es) or any other evaluation metrics.\n            * Return a dictionary with the computed losses the evaluation\n                metrics for that batch. The key names on the dictionary can be\n                arbitrary.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.algorithms.Algorithm.Algorithm.allocate_tensors": [[402, 409], ["None"], "methods", ["None"], ["", "def", "allocate_tensors", "(", "self", ")", ":", "\n", "        ", "\"\"\"(Optional) allocate torch tensors that could potentially be used in\n            in the train_step() or evaluation_step() functions. If the\n            load_to_gpu() function is called then those tensors will be moved to\n            the gpu device.\n        \"\"\"", "\n", "self", ".", "tensors", "=", "{", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.DumbFeat.DumbFeat.__init__": [[6, 12], ["torch.Module.__init__", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "DumbFeat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dropout", "=", "opt", "[", "'dropout'", "]", "if", "(", "'dropout'", "in", "opt", ")", "else", "0.0", "\n", "self", ".", "dropout", "=", "(", "\n", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "dropout", ",", "inplace", "=", "False", ")", "if", "(", "dropout", ">", "0.0", ")", "\n", "else", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.DumbFeat.DumbFeat.forward": [[13, 22], ["DumbFeat.DumbFeat.dim", "DumbFeat.DumbFeat.view", "DumbFeat.DumbFeat.dim", "DumbFeat.DumbFeat.dropout", "DumbFeat.DumbFeat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "assert", "(", "x", ".", "dim", "(", ")", "==", "2", ")", "\n", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.DumbFeat.create_model": [[23, 25], ["DumbFeat.DumbFeat"], "function", ["None"], ["", "", "def", "create_model", "(", "opt", ")", ":", "\n", "    ", "return", "DumbFeat", "(", "opt", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetFeat.SimpleBlock.__init__": [[19, 47], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "ResNetFeat.SimpleBlock.parametrized_layers.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "ResNetFeat.SimpleBlock.parametrized_layers.append", "ResNetFeat.init_layer"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetFeat.init_layer"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ",", "userelu", "=", "True", ")", ":", "\n", "        ", "super", "(", "SimpleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "userelu", "=", "userelu", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "userelu", "else", "None", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "outdim", ",", "outdim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "C2", ",", "self", ".", "BN1", ",", "self", ".", "BN2", "]", "\n", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "1", ",", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "BNshortcut", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "BNshortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetFeat.SimpleBlock.forward": [[48, 58], ["ResNetFeat.SimpleBlock.C1", "ResNetFeat.SimpleBlock.BN1", "ResNetFeat.SimpleBlock.relu1", "ResNetFeat.SimpleBlock.C2", "ResNetFeat.SimpleBlock.BN2", "ResNetFeat.SimpleBlock.BNshortcut", "ResNetFeat.SimpleBlock.relu2", "ResNetFeat.SimpleBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "BNshortcut", "(", "self", ".", "shortcut", "(", "x", ")", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "if", "self", ".", "userelu", ":", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetFeat.BottleneckBlock.__init__": [[63, 91], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "ResNetFeat.BottleneckBlock.parametrized_layers.append", "ResNetFeat.init_layer"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetFeat.init_layer"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "outdim", ",", "half_res", ",", "userelu", "=", "True", ")", ":", "\n", "        ", "super", "(", "BottleneckBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bottleneckdim", "=", "int", "(", "outdim", "/", "4", ")", "\n", "self", ".", "indim", "=", "indim", "\n", "self", ".", "outdim", "=", "outdim", "\n", "self", ".", "C1", "=", "nn", ".", "Conv2d", "(", "indim", ",", "bottleneckdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "BN1", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C2", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "bottleneckdim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "BN2", "=", "nn", ".", "BatchNorm2d", "(", "bottleneckdim", ")", "\n", "self", ".", "C3", "=", "nn", ".", "Conv2d", "(", "bottleneckdim", ",", "outdim", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "BN3", "=", "nn", ".", "BatchNorm2d", "(", "outdim", ")", "\n", "\n", "self", ".", "parametrized_layers", "=", "[", "self", ".", "C1", ",", "self", ".", "BN1", ",", "self", ".", "C2", ",", "self", ".", "BN2", ",", "self", ".", "C3", ",", "self", ".", "BN3", "]", "\n", "self", ".", "half_res", "=", "half_res", "\n", "\n", "self", ".", "userelu", "=", "userelu", "\n", "\n", "# if the input number of channels is not equal to the output, then need a 1x1 convolution", "\n", "if", "indim", "!=", "outdim", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Conv2d", "(", "indim", ",", "outdim", ",", "1", ",", "stride", "=", "2", "if", "half_res", "else", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "parametrized_layers", ".", "append", "(", "self", ".", "shortcut", ")", "\n", "self", ".", "shortcut_type", "=", "'1x1'", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_type", "=", "'identity'", "\n", "\n", "", "for", "layer", "in", "self", ".", "parametrized_layers", ":", "\n", "            ", "init_layer", "(", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetFeat.BottleneckBlock.forward": [[93, 107], ["ResNetFeat.BottleneckBlock.C1", "ResNetFeat.BottleneckBlock.BN1", "ResNetFeat.BottleneckBlock.relu", "ResNetFeat.BottleneckBlock.C2", "ResNetFeat.BottleneckBlock.BN2", "ResNetFeat.BottleneckBlock.relu", "ResNetFeat.BottleneckBlock.C3", "ResNetFeat.BottleneckBlock.BN3", "ResNetFeat.BottleneckBlock.shortcut", "ResNetFeat.BottleneckBlock.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "short_out", "=", "x", "if", "self", ".", "shortcut_type", "==", "'identity'", "else", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "C1", "(", "x", ")", "\n", "out", "=", "self", ".", "BN1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C2", "(", "out", ")", "\n", "out", "=", "self", ".", "BN2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "C3", "(", "out", ")", "\n", "out", "=", "self", ".", "BN3", "(", "out", ")", "\n", "out", "=", "out", "+", "short_out", "\n", "\n", "if", "self", ".", "userelu", ":", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetFeat.ResNet.__init__": [[110, 142], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "ResNetFeat.init_layer", "ResNetFeat.init_layer", "range", "trunk.append", "torch.Sequential", "torch.Sequential", "len", "range", "torch.AvgPool2d", "torch.AvgPool2d", "block", "trunk.append"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetFeat.init_layer", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetFeat.init_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "list_of_num_layers", ",", "list_of_out_dims", ",", "userelu", "=", "True", ")", ":", "\n", "# list_of_num_layers specifies number of layers in each stage", "\n", "# list_of_out_dims specifies number of output channel for each stage", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "grads", "=", "[", "]", "\n", "self", ".", "fmaps", "=", "[", "]", "\n", "assert", "len", "(", "list_of_num_layers", ")", "==", "4", ",", "'Can have only four stages'", "\n", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "init_layer", "(", "conv1", ")", "\n", "init_layer", "(", "bn1", ")", "\n", "\n", "\n", "trunk", "=", "[", "conv1", ",", "bn1", ",", "relu", ",", "pool1", "]", "\n", "indim", "=", "64", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "\n", "            ", "for", "j", "in", "range", "(", "list_of_num_layers", "[", "i", "]", ")", ":", "\n", "                ", "half_res", "=", "(", "i", ">=", "1", ")", "and", "(", "j", "==", "0", ")", "\n", "is_last_layer", "=", "(", "i", "==", "3", ")", "and", "(", "j", "==", "list_of_num_layers", "[", "i", "]", "-", "1", ")", "\n", "userelu_here", "=", "userelu", "if", "is_last_layer", "else", "True", "\n", "B", "=", "block", "(", "indim", ",", "list_of_out_dims", "[", "i", "]", ",", "half_res", ",", "userelu", "=", "userelu_here", ")", "\n", "trunk", ".", "append", "(", "B", ")", "\n", "indim", "=", "list_of_out_dims", "[", "i", "]", "\n", "", "", "trunk", ".", "append", "(", "nn", ".", "AvgPool2d", "(", "7", ")", ")", "\n", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "*", "trunk", ")", "\n", "\n", "self", ".", "final_feat_dim", "=", "indim", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetFeat.ResNet.forward": [[143, 147], ["ResNetFeat.ResNet.trunk", "out.view.view.view", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "trunk", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetFeat.init_layer": [[8, 16], ["isinstance", "L.weight.data.normal_", "isinstance", "math.sqrt", "L.weight.data.fill_", "L.bias.data.fill_", "float"], "function", ["None"], ["def", "init_layer", "(", "L", ")", ":", "\n", "# Initialization using fan-in", "\n", "    ", "if", "isinstance", "(", "L", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "L", ".", "kernel_size", "[", "0", "]", "*", "L", ".", "kernel_size", "[", "1", "]", "*", "L", ".", "out_channels", "\n", "L", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "n", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "L", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "L", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "L", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetFeat.create_model": [[148, 153], ["ResNetFeat.ResNet"], "function", ["None"], ["", "", "def", "create_model", "(", "opt", ")", ":", "\n", "    ", "restype", "=", "opt", "[", "'restype'", "]", "\n", "assert", "(", "restype", "==", "'ResNet10'", ")", "\n", "userelu", "=", "opt", "[", "'userelu'", "]", "\n", "return", "ResNet", "(", "SimpleBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "userelu", "=", "userelu", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.PrototypicalNetworksHead.PrototypicalNetwork.__init__": [[36, 41], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "PrototypicalNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "scale_cls", "=", "opt", "[", "'scale_cls'", "]", "if", "(", "'scale_cls'", "in", "opt", ")", "else", "1.0", "\n", "self", ".", "scale_cls", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "scale_cls", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.PrototypicalNetworksHead.PrototypicalNetwork.forward": [[42, 89], ["labels_train.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "prototypes.div.div.div", "features_train.dim", "labels_train.dim", "features_test.dim", "features_train.size", "labels_train.size", "features_train.size", "features_test.size", "features_train.size", "labels_train.size", "features_train.size", "features_test.size", "labels_train.transpose.sum().expand_as", "PrototypicalNetworksHead.L2SquareDist", "labels_train.transpose.sum"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.PrototypicalNetworksHead.L2SquareDist"], ["", "def", "forward", "(", "self", ",", "features_test", ",", "features_train", ",", "labels_train", ")", ":", "\n", "        ", "\"\"\"Recognize novel categories based on the Prototypical Nets approach.\n\n        Classify the test examples (i.e., `features_test`) using the available\n        training examples (i.e., `features_test` and `labels_train`) using the\n        Prototypical Nets approach.\n\n        Args:\n            features_test: A 3D tensor with shape\n                [batch_size x num_test_examples x num_channels] that represents\n                the test features of each training episode in the batch.\n            features_train: A 3D tensor with shape\n                [batch_size x num_train_examples x num_channels] that represents\n                the train features of each training episode in the batch.\n            labels_train: A 3D tensor with shape\n                [batch_size x num_train_examples x nKnovel] that represents\n                the train labels (encoded as 1-hot vectors) of each training\n                episode in the batch.\n\n        Return:\n            scores_cls: A 3D tensor with shape\n                [batch_size x num_test_examples x nKnovel] that represents the\n                classification scores of the test feature vectors for the\n                nKnovel novel categories.\n        \"\"\"", "\n", "assert", "(", "features_train", ".", "dim", "(", ")", "==", "3", ")", "\n", "assert", "(", "labels_train", ".", "dim", "(", ")", "==", "3", ")", "\n", "assert", "(", "features_test", ".", "dim", "(", ")", "==", "3", ")", "\n", "assert", "(", "features_train", ".", "size", "(", "0", ")", "==", "labels_train", ".", "size", "(", "0", ")", ")", "\n", "assert", "(", "features_train", ".", "size", "(", "0", ")", "==", "features_test", ".", "size", "(", "0", ")", ")", "\n", "assert", "(", "features_train", ".", "size", "(", "1", ")", "==", "labels_train", ".", "size", "(", "1", ")", ")", "\n", "assert", "(", "features_train", ".", "size", "(", "2", ")", "==", "features_test", ".", "size", "(", "2", ")", ")", "\n", "\n", "#************************* Compute Prototypes **************************", "\n", "labels_train_transposed", "=", "labels_train", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# Batch matrix multiplication:", "\n", "#   prototypes = labels_train_transposed * features_train ==>", "\n", "#   [batch_size x nKnovel x num_channels] =", "\n", "#       [batch_size x nKnovel x num_train_examples] * [batch_size * num_train_examples * num_channels]", "\n", "prototypes", "=", "torch", ".", "bmm", "(", "labels_train_transposed", ",", "features_train", ")", "\n", "# Divide with the number of examples per novel category.", "\n", "prototypes", "=", "prototypes", ".", "div", "(", "\n", "labels_train_transposed", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "prototypes", ")", "\n", ")", "\n", "#***********************************************************************", "\n", "scores_cls", "=", "-", "self", ".", "scale_cls", "*", "L2SquareDist", "(", "features_test", ",", "prototypes", ")", "\n", "return", "scores_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.PrototypicalNetworksHead.L2SquareDist": [[10, 33], ["A.size", "A.size", "B.size", "A.size", "torch.bmm", "torch.bmm", "torch.bmm", "A.dim", "B.dim", "B.transpose", "A.size", "B.size", "A.size", "B.size", "AA.expand_as", "BB.expand_as"], "function", ["None"], ["def", "L2SquareDist", "(", "A", ",", "B", ",", "average", "=", "True", ")", ":", "\n", "# input A must be:  [nB x Na x nC]", "\n", "# input B must be:  [nB x Nb x nC]", "\n", "# output C will be: [nB x Na x Nb]", "\n", "    ", "assert", "(", "A", ".", "dim", "(", ")", "==", "3", ")", "\n", "assert", "(", "B", ".", "dim", "(", ")", "==", "3", ")", "\n", "assert", "(", "A", ".", "size", "(", "0", ")", "==", "B", ".", "size", "(", "0", ")", "and", "A", ".", "size", "(", "2", ")", "==", "B", ".", "size", "(", "2", ")", ")", "\n", "nB", "=", "A", ".", "size", "(", "0", ")", "\n", "Na", "=", "A", ".", "size", "(", "1", ")", "\n", "Nb", "=", "B", ".", "size", "(", "1", ")", "\n", "nC", "=", "A", ".", "size", "(", "2", ")", "\n", "\n", "# AB = A * B = [nB x Na x nC] * [nB x nC x Nb] = [nB x Na x Nb]", "\n", "AB", "=", "torch", ".", "bmm", "(", "A", ",", "B", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n", "AA", "=", "(", "A", "*", "A", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "view", "(", "nB", ",", "Na", ",", "1", ")", "# [nB x Na x 1]", "\n", "BB", "=", "(", "B", "*", "B", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "view", "(", "nB", ",", "1", ",", "Nb", ")", "# [nB x 1 x Nb]", "\n", "# l2squaredist = A*A + B*B - 2 * A * B", "\n", "dist", "=", "AA", ".", "expand_as", "(", "AB", ")", "+", "BB", ".", "expand_as", "(", "AB", ")", "-", "2", "*", "AB", "\n", "if", "average", ":", "\n", "        ", "dist", "=", "dist", "/", "nC", "\n", "\n", "", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.PrototypicalNetworksHead.create_model": [[90, 92], ["PrototypicalNetworksHead.PrototypicalNetwork"], "function", ["None"], ["", "", "def", "create_model", "(", "opt", ")", ":", "\n", "    ", "return", "PrototypicalNetwork", "(", "opt", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.LinearDiag.__init__": [[11, 21], ["torch.Module.__init__", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ClassifierWithFewShotGenerationModule.LinearDiag.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "LinearDiag", ",", "self", ")", ".", "__init__", "(", ")", "\n", "weight", "=", "torch", ".", "FloatTensor", "(", "num_features", ")", ".", "fill_", "(", "1", ")", "# initialize to the identity transform", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "weight", ",", "requires_grad", "=", "True", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "bias", "=", "torch", ".", "FloatTensor", "(", "num_features", ")", ".", "fill_", "(", "0", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "bias", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.LinearDiag.forward": [[22, 28], ["ClassifierWithFewShotGenerationModule.LinearDiag.weight.expand_as", "X.dim", "X.size", "ClassifierWithFewShotGenerationModule.LinearDiag.weight.size", "ClassifierWithFewShotGenerationModule.LinearDiag.bias.expand_as"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "assert", "(", "X", ".", "dim", "(", ")", "==", "2", "and", "X", ".", "size", "(", "1", ")", "==", "self", ".", "weight", ".", "size", "(", "0", ")", ")", "\n", "out", "=", "X", "*", "self", ".", "weight", ".", "expand_as", "(", "X", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "+", "self", ".", "bias", ".", "expand_as", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.FeatExemplarAvgBlock.__init__": [[31, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nFeat", ")", ":", "\n", "        ", "super", "(", "FeatExemplarAvgBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.FeatExemplarAvgBlock.forward": [[34, 40], ["labels_train.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "weight_novel.div.div.div", "labels_train.transpose.sum().expand_as", "labels_train.transpose.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features_train", ",", "labels_train", ")", ":", "\n", "        ", "labels_train_transposed", "=", "labels_train", ".", "transpose", "(", "1", ",", "2", ")", "\n", "weight_novel", "=", "torch", ".", "bmm", "(", "labels_train_transposed", ",", "features_train", ")", "\n", "weight_novel", "=", "weight_novel", ".", "div", "(", "\n", "labels_train_transposed", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "weight_novel", ")", ")", "\n", "return", "weight_novel", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.AttentionBasedBlock.__init__": [[43, 55], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "ClassifierWithFewShotGenerationModule.AttentionBasedBlock.queryLayer.weight.data.copy_", "ClassifierWithFewShotGenerationModule.AttentionBasedBlock.queryLayer.bias.data.zero_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "numpy.sqrt", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nFeat", ",", "nK", ",", "scale_att", "=", "10.0", ")", ":", "\n", "        ", "super", "(", "AttentionBasedBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nFeat", "=", "nFeat", "\n", "self", ".", "queryLayer", "=", "nn", ".", "Linear", "(", "nFeat", ",", "nFeat", ")", "\n", "self", ".", "queryLayer", ".", "weight", ".", "data", ".", "copy_", "(", "\n", "torch", ".", "eye", "(", "nFeat", ",", "nFeat", ")", "+", "torch", ".", "randn", "(", "nFeat", ",", "nFeat", ")", "*", "0.001", ")", "\n", "self", ".", "queryLayer", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "self", ".", "scale_att", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "scale_att", ")", ",", "requires_grad", "=", "True", ")", "\n", "wkeys", "=", "torch", ".", "FloatTensor", "(", "nK", ",", "nFeat", ")", ".", "normal_", "(", "0.0", ",", "np", ".", "sqrt", "(", "2.0", "/", "nFeat", ")", ")", "\n", "self", ".", "wkeys", "=", "nn", ".", "Parameter", "(", "wkeys", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.AttentionBasedBlock.forward": [[57, 97], ["features_train.view.view.size", "weight_base.size", "labels_train.transpose", "labels_train.transpose.size", "features_train.view.view.view", "ClassifierWithFewShotGenerationModule.AttentionBasedBlock.queryLayer", "torch.normalize.view", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "wkeys.view().transpose.view().transpose.view().transpose", "torch.softmax", "torch.softmax", "torch.softmax", "AttentionCoeficients.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "weight_novel.div.div.div", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "AttentionCoeficients.view.view.view", "labels_train.transpose.sum().expand_as", "Kbase.view", "wkeys.view().transpose.view().transpose.view", "torch.normalize.dim", "wkeys.view().transpose.view().transpose.dim", "labels_train.transpose.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features_train", ",", "labels_train", ",", "weight_base", ",", "Kbase", ")", ":", "\n", "        ", "batch_size", ",", "num_train_examples", ",", "num_features", "=", "features_train", ".", "size", "(", ")", "\n", "nKbase", "=", "weight_base", ".", "size", "(", "1", ")", "# [batch_size x nKbase x num_features]", "\n", "labels_train_transposed", "=", "labels_train", ".", "transpose", "(", "1", ",", "2", ")", "\n", "nKnovel", "=", "labels_train_transposed", ".", "size", "(", "1", ")", "# [batch_size x nKnovel x num_train_examples]", "\n", "\n", "features_train", "=", "features_train", ".", "view", "(", "\n", "batch_size", "*", "num_train_examples", ",", "num_features", ")", "\n", "Qe", "=", "self", ".", "queryLayer", "(", "features_train", ")", "\n", "Qe", "=", "Qe", ".", "view", "(", "batch_size", ",", "num_train_examples", ",", "self", ".", "nFeat", ")", "\n", "Qe", "=", "F", ".", "normalize", "(", "Qe", ",", "p", "=", "2", ",", "dim", "=", "Qe", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "\n", "wkeys", "=", "self", ".", "wkeys", "[", "Kbase", ".", "view", "(", "-", "1", ")", "]", "# the keys of the base categoreis", "\n", "wkeys", "=", "F", ".", "normalize", "(", "wkeys", ",", "p", "=", "2", ",", "dim", "=", "wkeys", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "# Transpose from [batch_size x nKbase x nFeat] to", "\n", "# [batch_size x self.nFeat x nKbase]", "\n", "wkeys", "=", "wkeys", ".", "view", "(", "batch_size", ",", "nKbase", ",", "self", ".", "nFeat", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# Compute the attention coeficients", "\n", "# batch matrix multiplications: AttentionCoeficients = Qe * wkeys ==>", "\n", "# [batch_size x num_train_examples x nKbase] =", "\n", "#   [batch_size x num_train_examples x nFeat] * [batch_size x nFeat x nKbase]", "\n", "AttentionCoeficients", "=", "self", ".", "scale_att", "*", "torch", ".", "bmm", "(", "Qe", ",", "wkeys", ")", "\n", "AttentionCoeficients", "=", "F", ".", "softmax", "(", "\n", "AttentionCoeficients", ".", "view", "(", "batch_size", "*", "num_train_examples", ",", "nKbase", ")", ")", "\n", "AttentionCoeficients", "=", "AttentionCoeficients", ".", "view", "(", "\n", "batch_size", ",", "num_train_examples", ",", "nKbase", ")", "\n", "\n", "# batch matrix multiplications: weight_novel = AttentionCoeficients * weight_base ==>", "\n", "# [batch_size x num_train_examples x num_features] =", "\n", "#   [batch_size x num_train_examples x nKbase] * [batch_size x nKbase x num_features]", "\n", "weight_novel", "=", "torch", ".", "bmm", "(", "AttentionCoeficients", ",", "weight_base", ")", "\n", "# batch matrix multiplications: weight_novel = labels_train_transposed * weight_novel ==>", "\n", "# [batch_size x nKnovel x num_features] =", "\n", "#   [batch_size x nKnovel x num_train_examples] * [batch_size x num_train_examples x num_features]", "\n", "weight_novel", "=", "torch", ".", "bmm", "(", "labels_train_transposed", ",", "weight_novel", ")", "\n", "weight_novel", "=", "weight_novel", ".", "div", "(", "\n", "labels_train_transposed", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "weight_novel", ")", ")", "\n", "\n", "return", "weight_novel", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.Classifier.__init__": [[100, 141], ["torch.Module.__init__", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.sqrt", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "ClassifierWithFewShotGenerationModule.FeatExemplarAvgBlock", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "ClassifierWithFewShotGenerationModule.FeatExemplarAvgBlock", "ClassifierWithFewShotGenerationModule.LinearDiag", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "ClassifierWithFewShotGenerationModule.FeatExemplarAvgBlock", "ClassifierWithFewShotGenerationModule.AttentionBasedBlock", "ClassifierWithFewShotGenerationModule.LinearDiag", "ClassifierWithFewShotGenerationModule.LinearDiag", "ValueError"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight_generator_type", "=", "opt", "[", "'weight_generator_type'", "]", "\n", "self", ".", "classifier_type", "=", "opt", "[", "'classifier_type'", "]", "\n", "assert", "(", "self", ".", "classifier_type", "==", "'cosine'", "or", "\n", "self", ".", "classifier_type", "==", "'dotproduct'", ")", "\n", "\n", "nKall", "=", "opt", "[", "'nKall'", "]", "\n", "nFeat", "=", "opt", "[", "'nFeat'", "]", "\n", "self", ".", "nFeat", "=", "nFeat", "\n", "self", ".", "nKall", "=", "nKall", "\n", "\n", "weight_base", "=", "torch", ".", "FloatTensor", "(", "nKall", ",", "nFeat", ")", ".", "normal_", "(", "\n", "0.0", ",", "np", ".", "sqrt", "(", "2.0", "/", "nFeat", ")", ")", "\n", "self", ".", "weight_base", "=", "nn", ".", "Parameter", "(", "weight_base", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0", ")", ",", "requires_grad", "=", "True", ")", "\n", "scale_cls", "=", "opt", "[", "'scale_cls'", "]", "if", "(", "'scale_cls'", "in", "opt", ")", "else", "10.0", "\n", "self", ".", "scale_cls", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "scale_cls", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "\n", "if", "self", ".", "weight_generator_type", "==", "'none'", ":", "\n", "# If the weight generator type is `none` then feature averaging", "\n", "# is being used. However, in this case the generator does not", "\n", "# involve any learnable parameter and thus does not require", "\n", "# training.", "\n", "            ", "self", ".", "favgblock", "=", "FeatExemplarAvgBlock", "(", "nFeat", ")", "\n", "", "elif", "self", ".", "weight_generator_type", "==", "'feature_averaging'", ":", "\n", "            ", "self", ".", "favgblock", "=", "FeatExemplarAvgBlock", "(", "nFeat", ")", "\n", "self", ".", "wnLayerFavg", "=", "LinearDiag", "(", "nFeat", ")", "\n", "", "elif", "self", ".", "weight_generator_type", "==", "'attention_based'", ":", "\n", "            ", "scale_att", "=", "opt", "[", "'scale_att'", "]", "if", "(", "'scale_att'", "in", "opt", ")", "else", "10.0", "\n", "self", ".", "favgblock", "=", "FeatExemplarAvgBlock", "(", "nFeat", ")", "\n", "self", ".", "attblock", "=", "AttentionBasedBlock", "(", "\n", "nFeat", ",", "nKall", ",", "scale_att", "=", "scale_att", ")", "\n", "self", ".", "wnLayerFavg", "=", "LinearDiag", "(", "nFeat", ")", "\n", "self", ".", "wnLayerWatt", "=", "LinearDiag", "(", "nFeat", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not supported/recognized type {0}'", ".", "format", "(", "\n", "self", ".", "weight_generator_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.Classifier.get_classification_weights": [[143, 238], ["Kbase_ids.size", "weight_base.view.view.view", "torch.normalize.size", "labels_train.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.normalize", "torch.normalize", "torch.normalize", "ClassifierWithFewShotGenerationModule.Classifier.favgblock", "weight_novel.view.view.view", "Kbase_ids.view", "ClassifierWithFewShotGenerationModule.Classifier.favgblock", "ClassifierWithFewShotGenerationModule.Classifier.wnLayerFavg", "weight_novel.view.view.view", "ClassifierWithFewShotGenerationModule.Classifier.view", "ClassifierWithFewShotGenerationModule.Classifier.favgblock", "ClassifierWithFewShotGenerationModule.Classifier.wnLayerFavg", "ClassifierWithFewShotGenerationModule.Classifier.attblock", "ClassifierWithFewShotGenerationModule.Classifier.wnLayerWatt", "weight_novel.view.view.view", "ValueError", "torch.normalize.dim", "ClassifierWithFewShotGenerationModule.Classifier.view", "torch.normalize", "torch.normalize", "torch.normalize", "ClassifierWithFewShotGenerationModule.Classifier.view", "weight_base.view.view.dim"], "methods", ["None"], ["", "", "def", "get_classification_weights", "(", "\n", "self", ",", "Kbase_ids", ",", "features_train", "=", "None", ",", "labels_train", "=", "None", ")", ":", "\n", "        ", "\"\"\"Gets the classification weights of the base and novel categories.\n\n        This routine returns the classification weight of the base categories\n        and also (if training data, i.e., features_train and labels_train, for\n        the novel categories are provided) of the novel categories.\n\n        Args:\n            Kbase_ids: A 2D tensor with shape [batch_size x nKbase] that for\n                each training episode in the the batch it includes the indices\n                of the base categories that are being used. `batch_size` is the\n                number of training episodes in the batch and `nKbase` is the\n                number of base categories.\n            features_train: A 3D tensor with shape\n                [batch_size x num_train_examples x num_channels] that represents\n                the features of the training examples of each training episode\n                in the batch. `num_train_examples` is the number of train\n                examples in each training episode. Those training examples are\n                from the novel categories.\n            labels_train: A 3D tensor with shape\n                [batch_size x num_train_examples x nKnovel] that represents\n                the labels (encoded as 1-hot vectors of lenght nKnovel) of the\n                training examples of each training episode in the batch.\n                `nKnovel` is the number of novel categories.\n\n        Returns:\n            cls_weights: A 3D tensor of shape [batch_size x nK x num_channels]\n                that includes the classification weight vectors\n                (of `num_channels` length) of categories involved on each\n                training episode in the batch. If training data for the novel\n                categories are provided (i.e., features_train or labels_train\n                are None) then cls_weights includes only the classification\n                weights of the base categories; in this case nK is equal to\n                nKbase. Otherwise, cls_weights includes the classification\n                weights of both base and novel categories; in this case nK is\n                equal to nKbase + nKnovel.\n        \"\"\"", "\n", "\n", "#***********************************************************************", "\n", "#******** Get the classification weights for the base categories *******", "\n", "batch_size", ",", "nKbase", "=", "Kbase_ids", ".", "size", "(", ")", "\n", "weight_base", "=", "self", ".", "weight_base", "[", "Kbase_ids", ".", "view", "(", "-", "1", ")", "]", "\n", "weight_base", "=", "weight_base", ".", "view", "(", "batch_size", ",", "nKbase", ",", "-", "1", ")", "\n", "#***********************************************************************", "\n", "\n", "if", "features_train", "is", "None", "or", "labels_train", "is", "None", ":", "\n", "# If training data for the novel categories are not provided then", "\n", "# return only the classification weights of the base categories.", "\n", "            ", "return", "weight_base", "\n", "\n", "#***********************************************************************", "\n", "#******* Generate classification weights for the novel categories ******", "\n", "", "_", ",", "num_train_examples", ",", "num_channels", "=", "features_train", ".", "size", "(", ")", "\n", "nKnovel", "=", "labels_train", ".", "size", "(", "2", ")", "\n", "if", "self", ".", "classifier_type", "==", "'cosine'", ":", "\n", "            ", "features_train", "=", "F", ".", "normalize", "(", "\n", "features_train", ",", "p", "=", "2", ",", "dim", "=", "features_train", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "", "if", "self", ".", "weight_generator_type", "==", "'none'", ":", "\n", "            ", "weight_novel", "=", "self", ".", "favgblock", "(", "features_train", ",", "labels_train", ")", "\n", "weight_novel", "=", "weight_novel", ".", "view", "(", "batch_size", ",", "nKnovel", ",", "num_channels", ")", "\n", "", "elif", "self", ".", "weight_generator_type", "==", "'feature_averaging'", ":", "\n", "            ", "weight_novel_avg", "=", "self", ".", "favgblock", "(", "features_train", ",", "labels_train", ")", "\n", "weight_novel", "=", "self", ".", "wnLayerFavg", "(", "\n", "weight_novel_avg", ".", "view", "(", "batch_size", "*", "nKnovel", ",", "num_channels", ")", "\n", ")", "\n", "weight_novel", "=", "weight_novel", ".", "view", "(", "batch_size", ",", "nKnovel", ",", "num_channels", ")", "\n", "", "elif", "self", ".", "weight_generator_type", "==", "'attention_based'", ":", "\n", "            ", "weight_novel_avg", "=", "self", ".", "favgblock", "(", "features_train", ",", "labels_train", ")", "\n", "weight_novel_avg", "=", "self", ".", "wnLayerFavg", "(", "\n", "weight_novel_avg", ".", "view", "(", "batch_size", "*", "nKnovel", ",", "num_channels", ")", "\n", ")", "\n", "if", "self", ".", "classifier_type", "==", "'cosine'", ":", "\n", "                ", "weight_base_tmp", "=", "F", ".", "normalize", "(", "\n", "weight_base", ",", "p", "=", "2", ",", "dim", "=", "weight_base", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "", "else", ":", "\n", "                ", "weight_base_tmp", "=", "weight_base", "\n", "\n", "", "weight_novel_att", "=", "self", ".", "attblock", "(", "\n", "features_train", ",", "labels_train", ",", "weight_base_tmp", ",", "Kbase_ids", ")", "\n", "weight_novel_att", "=", "self", ".", "wnLayerWatt", "(", "\n", "weight_novel_att", ".", "view", "(", "batch_size", "*", "nKnovel", ",", "num_channels", ")", "\n", ")", "\n", "weight_novel", "=", "weight_novel_avg", "+", "weight_novel_att", "\n", "weight_novel", "=", "weight_novel", ".", "view", "(", "batch_size", ",", "nKnovel", ",", "num_channels", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Not supported / recognized type {0}'", ".", "format", "(", "\n", "self", ".", "weight_generator_type", ")", ")", "\n", "#***********************************************************************", "\n", "\n", "# Concatenate the base and novel classification weights and return them.", "\n", "", "weight_both", "=", "torch", ".", "cat", "(", "[", "weight_base", ",", "weight_novel", "]", ",", "dim", "=", "1", ")", "\n", "# weight_both shape: [batch_size x (nKbase + nKnovel) x num_channels]", "\n", "\n", "return", "weight_both", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.Classifier.apply_classification_weights": [[240, 272], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "ClassifierWithFewShotGenerationModule.Classifier.bias.view", "torch.normalize.transpose", "torch.normalize.dim", "torch.normalize.dim"], "methods", ["None"], ["", "def", "apply_classification_weights", "(", "self", ",", "features", ",", "cls_weights", ")", ":", "\n", "        ", "\"\"\"Applies the classification weight vectors to the feature vectors.\n\n        Args:\n            features: A 3D tensor of shape\n                [batch_size x num_test_examples x num_channels] with the feature\n                vectors (of `num_channels` length) of each example on each\n                trainining episode in the batch. `batch_size` is the number of\n                training episodes in the batch and `num_test_examples` is the\n                number of test examples of each training episode.\n            cls_weights: A 3D tensor of shape [batch_size x nK x num_channels]\n                that includes the classification weight vectors\n                (of `num_channels` length) of the `nK` categories used on\n                each training episode in the batch. `nK` is the number of\n                categories (e.g., the number of base categories plus the number\n                of novel categories) used on each training episode.\n\n        Return:\n            cls_scores: A 3D tensor with shape\n                [batch_size x num_test_examples x nK] that represents the\n                classification scores of the test examples for the `nK`\n                categories.\n        \"\"\"", "\n", "if", "self", ".", "classifier_type", "==", "'cosine'", ":", "\n", "            ", "features", "=", "F", ".", "normalize", "(", "\n", "features", ",", "p", "=", "2", ",", "dim", "=", "features", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "cls_weights", "=", "F", ".", "normalize", "(", "\n", "cls_weights", ",", "p", "=", "2", ",", "dim", "=", "cls_weights", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "\n", "", "cls_scores", "=", "self", ".", "scale_cls", "*", "torch", ".", "baddbmm", "(", "1.0", ",", "\n", "self", ".", "bias", ".", "view", "(", "1", ",", "1", ",", "1", ")", ",", "1.0", ",", "features", ",", "cls_weights", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "return", "cls_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.Classifier.forward": [[274, 329], ["ClassifierWithFewShotGenerationModule.Classifier.get_classification_weights", "ClassifierWithFewShotGenerationModule.Classifier.apply_classification_weights"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.Classifier.get_classification_weights", "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.Classifier.apply_classification_weights"], ["", "def", "forward", "(", "self", ",", "features_test", ",", "Kbase_ids", ",", "features_train", "=", "None", ",", "labels_train", "=", "None", ")", ":", "\n", "        ", "\"\"\"Recognize on the test examples both base and novel categories.\n\n        Recognize on the test examples (i.e., `features_test`) both base and\n        novel categories using the approach proposed on our CVPR2018 paper\n        \"Dynamic Few-Shot Visual Learning without Forgetting\". In order to\n        classify the test examples the provided training data for the novel\n        categories (i.e., `features_train` and `labels_train`) are used in order\n        to generate classification weight vectors of those novel categories and\n        then those classification weight vectors are applied on the features of\n        the test examples.\n\n        Args:\n            features_test: A 3D tensor with shape\n                [batch_size x num_test_examples x num_channels] that represents\n                the features of the test examples each training episode in the\n                batch. Those examples can come both from base and novel\n                categories. `batch_size` is the number of training episodes in\n                the batch, `num_test_examples` is the number of test examples\n                in each training episode, and `num_channels` is the number of\n                feature channels.\n            Kbase_ids: A 2D tensor with shape [batch_size x nKbase] that for\n                each training episode in the the batch it includes the indices\n                of the base categories that are being used. `nKbase` is the\n                number of base categories.\n            features_train: A 3D tensor with shape\n                [batch_size x num_train_examples x num_channels] that represents\n                the features of the training examples of each training episode\n                 in the batch. `num_train_examples` is the number of train\n                examples in each training episode. Those training examples are\n                from the novel categories. If features_train is None then the\n                current function will only return the classification scores for\n                the base categories.\n            labels_train: A 3D tensor with shape\n                [batch_size x num_train_examples x nKnovel] that represents\n                the labels (encoded as 1-hot vectors of lenght nKnovel) of the\n                training examples of each training episode in the batch.\n                `nKnovel` is the number of novel categories. If labels_train is\n                None then the current function will return only the\n                classification scores for the base categories.\n\n        Return:\n            cls_scores: A 3D tensor with shape\n                [batch_size x num_test_examples x (nKbase + nKnovel)] that\n                represents the classification scores of the test examples\n                for the nKbase and nKnovel novel categories. If features_train\n                or labels_train are None the only the classification scores of\n                the base categories are returned. In that case the shape of\n                cls_scores is [batch_size x num_test_examples x nKbase].\n        \"\"\"", "\n", "cls_weights", "=", "self", ".", "get_classification_weights", "(", "\n", "Kbase_ids", ",", "features_train", ",", "labels_train", ")", "\n", "cls_scores", "=", "self", ".", "apply_classification_weights", "(", "\n", "features_test", ",", "cls_weights", ")", "\n", "return", "cls_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ClassifierWithFewShotGenerationModule.create_model": [[331, 333], ["ClassifierWithFewShotGenerationModule.Classifier"], "function", ["None"], ["", "", "def", "create_model", "(", "opt", ")", ":", "\n", "    ", "return", "Classifier", "(", "opt", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetLike.ResBlock.__init__": [[8, 25], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ResNetLike.ResBlock.conv_block.add_module", "ResNetLike.ResBlock.conv_block.add_module", "ResNetLike.ResBlock.conv_block.add_module", "ResNetLike.ResBlock.conv_block.add_module", "ResNetLike.ResBlock.conv_block.add_module", "ResNetLike.ResBlock.conv_block.add_module", "ResNetLike.ResBlock.conv_block.add_module", "ResNetLike.ResBlock.conv_block.add_module", "ResNetLike.ResBlock.conv_block.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nFin", ",", "nFout", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "conv_block", ".", "add_module", "(", "'BNorm1'", ",", "nn", ".", "BatchNorm2d", "(", "nFin", ")", ")", "\n", "self", ".", "conv_block", ".", "add_module", "(", "'LRelu1'", ",", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "self", ".", "conv_block", ".", "add_module", "(", "'ConvL1'", ",", "\n", "nn", ".", "Conv2d", "(", "nFin", ",", "nFout", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv_block", ".", "add_module", "(", "'BNorm2'", ",", "nn", ".", "BatchNorm2d", "(", "nFout", ")", ")", "\n", "self", ".", "conv_block", ".", "add_module", "(", "'LRelu2'", ",", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "self", ".", "conv_block", ".", "add_module", "(", "'ConvL2'", ",", "\n", "nn", ".", "Conv2d", "(", "nFout", ",", "nFout", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv_block", ".", "add_module", "(", "'BNorm3'", ",", "nn", ".", "BatchNorm2d", "(", "nFout", ")", ")", "\n", "self", ".", "conv_block", ".", "add_module", "(", "'LRelu3'", ",", "nn", ".", "LeakyReLU", "(", "0.1", ")", ")", "\n", "self", ".", "conv_block", ".", "add_module", "(", "'ConvL3'", ",", "\n", "nn", ".", "Conv2d", "(", "nFout", ",", "nFout", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "self", ".", "skip_layer", "=", "nn", ".", "Conv2d", "(", "nFin", ",", "nFout", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetLike.ResBlock.forward": [[26, 28], ["ResNetLike.ResBlock.skip_layer", "ResNetLike.ResBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "skip_layer", "(", "x", ")", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetLike.ResNetLike.__init__": [[31, 80], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ResNetLike.ResNetLike.feat_extractor.add_module", "range", "ResNetLike.ResNetLike.feat_extractor.add_module", "ResNetLike.ResNetLike.feat_extractor.add_module", "ResNetLike.ResNetLike.feat_extractor.add_module", "ResNetLike.ResNetLike.feat_extractor.add_module", "ResNetLike.ResNetLike.feat_extractor.add_module", "ResNetLike.ResNetLike.feat_extractor.add_module", "ResNetLike.ResNetLike.feat_extractor.add_module", "ResNetLike.ResNetLike.feat_extractor.add_module", "ResNetLike.ResNetLike.modules", "type", "type", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "ResNetLike.ResNetLike.feat_extractor.add_module", "ResNetLike.ResNetLike.feat_extractor.add_module", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "ResNetLike.ResNetLike.feat_extractor.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ResNetLike.ResNetLike.feat_extractor.add_module", "isinstance", "ResNetLike.ResBlock", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "m.weight.data.normal_", "isinstance", "range", "str", "str", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "ResNetLike", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "opt", "[", "'in_planes'", "]", "\n", "self", ".", "out_planes", "=", "[", "64", ",", "96", ",", "128", ",", "256", "]", "\n", "self", ".", "num_stages", "=", "4", "\n", "\n", "if", "type", "(", "self", ".", "out_planes", ")", "==", "int", ":", "\n", "            ", "self", ".", "out_planes", "=", "[", "self", ".", "out_planes", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", "]", "\n", "", "assert", "(", "type", "(", "self", ".", "out_planes", ")", "==", "list", ")", "\n", "assert", "(", "len", "(", "self", ".", "out_planes", ")", "==", "self", ".", "num_stages", ")", "\n", "num_planes", "=", "[", "self", ".", "out_planes", "[", "0", "]", ",", "]", "+", "self", ".", "out_planes", "\n", "userelu", "=", "opt", "[", "'userelu'", "]", "if", "(", "'userelu'", "in", "opt", ")", "else", "False", "\n", "dropout", "=", "opt", "[", "'dropout'", "]", "if", "(", "'dropout'", "in", "opt", ")", "else", "0", "\n", "\n", "self", ".", "feat_extractor", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "feat_extractor", ".", "add_module", "(", "'ConvL0'", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_planes", ",", "num_planes", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "self", ".", "feat_extractor", ".", "add_module", "(", "'ResBlock'", "+", "str", "(", "i", ")", ",", "\n", "ResBlock", "(", "num_planes", "[", "i", "]", ",", "num_planes", "[", "i", "+", "1", "]", ")", ")", "\n", "self", ".", "feat_extractor", ".", "add_module", "(", "'MaxPool'", "+", "str", "(", "i", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ")", "\n", "\n", "", "self", ".", "feat_extractor", ".", "add_module", "(", "'AvgPool'", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ")", "\n", "self", ".", "feat_extractor", ".", "add_module", "(", "'BNormF1'", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_planes", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "feat_extractor", ".", "add_module", "(", "'ReluF1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "feat_extractor", ".", "add_module", "(", "'ConvLF1'", ",", "\n", "nn", ".", "Conv2d", "(", "num_planes", "[", "-", "1", "]", ",", "384", ",", "kernel_size", "=", "1", ")", ")", "\n", "if", "dropout", ">", "0.0", ":", "\n", "            ", "self", ".", "feat_extractor", ".", "add_module", "(", "'DropoutF1'", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout", ",", "inplace", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "feat_extractor", ".", "add_module", "(", "'BNormF2'", ",", "nn", ".", "BatchNorm2d", "(", "384", ")", ")", "\n", "self", ".", "feat_extractor", ".", "add_module", "(", "'ReluF2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "feat_extractor", ".", "add_module", "(", "'ConvLF2'", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "512", ",", "kernel_size", "=", "1", ")", ")", "\n", "self", ".", "feat_extractor", ".", "add_module", "(", "'BNormF3'", ",", "nn", ".", "BatchNorm2d", "(", "512", ")", ")", "\n", "if", "dropout", ">", "0.0", ":", "\n", "            ", "self", ".", "feat_extractor", ".", "add_module", "(", "'DropoutF2'", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout", ",", "inplace", "=", "False", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetLike.ResNetLike.forward": [[81, 84], ["ResNetLike.ResNetLike.feat_extractor", "ResNetLike.ResNetLike.view", "ResNetLike.ResNetLike.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "feat_extractor", "(", "x", ")", "\n", "return", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.ResNetLike.create_model": [[86, 88], ["ResNetLike.ResNetLike"], "function", ["None"], ["", "", "def", "create_model", "(", "opt", ")", ":", "\n", "    ", "return", "ResNetLike", "(", "opt", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__": [[10, 15], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "MatchingNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "scale_cls", "=", "opt", "[", "'scale_cls'", "]", "if", "(", "'scale_cls'", "in", "opt", ")", "else", "10.0", "\n", "self", ".", "scale_cls", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "scale_cls", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.MatchingNetwork.forward": [[16, 77], ["torch.normalize.size", "torch.normalize.size", "labels_train.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "cosine_similarities.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "cosine_scores.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.normalize.dim", "labels_train.dim", "torch.normalize.dim", "torch.normalize.size", "labels_train.size", "torch.normalize.size", "torch.normalize.size", "torch.normalize.size", "labels_train.size", "torch.normalize.size", "torch.normalize.size", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.normalize.transpose", "torch.normalize.dim", "torch.normalize.dim"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features_test", ",", "features_train", ",", "labels_train", ")", ":", "\n", "        ", "\"\"\"Recognize novel categories based on the Matching Nets approach.\n\n        Classify the test examples (i.e., `features_test`) using the available\n        training examples (i.e., `features_test` and `labels_train`) using the\n        Matching Nets approach.\n\n        Args:\n            features_test: A 3D tensor with shape\n                [batch_size x num_test_examples x num_channels] that represents\n                the test features of each training episode in the batch.\n            features_train: A 3D tensor with shape\n                [batch_size x num_train_examples x num_channels] that represents\n                the train features of each training episode in the batch.\n            labels_train: A 3D tensor with shape\n                [batch_size x num_train_examples x nKnovel] that represents\n                the train labels (encoded as 1-hot vectors) of each training\n                episode in the batch.\n\n        Return:\n            scores_cls: A 3D tensor with shape\n                [batch_size x num_test_examples x nKnovel] that represents the\n                classification scores of the test feature vectors for the\n                nKnovel novel categories.\n        \"\"\"", "\n", "assert", "(", "features_train", ".", "dim", "(", ")", "==", "3", ")", "\n", "assert", "(", "labels_train", ".", "dim", "(", ")", "==", "3", ")", "\n", "assert", "(", "features_test", ".", "dim", "(", ")", "==", "3", ")", "\n", "assert", "(", "features_train", ".", "size", "(", "0", ")", "==", "labels_train", ".", "size", "(", "0", ")", ")", "\n", "assert", "(", "features_train", ".", "size", "(", "0", ")", "==", "features_test", ".", "size", "(", "0", ")", ")", "\n", "assert", "(", "features_train", ".", "size", "(", "1", ")", "==", "labels_train", ".", "size", "(", "1", ")", ")", "\n", "assert", "(", "features_train", ".", "size", "(", "2", ")", "==", "features_test", ".", "size", "(", "2", ")", ")", "\n", "\n", "batch_size", ",", "num_test_examples", ",", "num_channels", "=", "features_test", ".", "size", "(", ")", "\n", "num_train_examples", "=", "features_train", ".", "size", "(", "1", ")", "\n", "nKnovel", "=", "labels_train", ".", "size", "(", "2", ")", "\n", "\n", "# L2 normalize the feature vectors.", "\n", "features_test", "=", "F", ".", "normalize", "(", "\n", "features_test", ",", "p", "=", "2", ",", "dim", "=", "features_test", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "features_train", "=", "F", ".", "normalize", "(", "\n", "features_train", ",", "p", "=", "2", ",", "dim", "=", "features_train", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "\n", "# Compute the cosine similrity of the test features with the train", "\n", "# features. The shape of the cosine similarities tensor is:", "\n", "# [batch_size x num_test_examples x num_train_examples]", "\n", "cosine_similarities", "=", "self", ".", "scale_cls", "*", "torch", ".", "bmm", "(", "\n", "features_test", ",", "features_train", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "# Apply the softmax operator over the images.", "\n", "cosine_similarities", "=", "cosine_similarities", ".", "view", "(", "\n", "batch_size", "*", "num_test_examples", ",", "num_train_examples", ")", "\n", "cosine_scores", "=", "F", ".", "softmax", "(", "cosine_similarities", ")", "\n", "cosine_scores", "=", "cosine_scores", ".", "view", "(", "\n", "batch_size", ",", "num_test_examples", ",", "num_train_examples", ")", "\n", "\n", "# Accumulate cosine_scores accross images of the same novel category and", "\n", "# compute the final classification scores for all the novel categories.", "\n", "scores_cls", "=", "torch", ".", "bmm", "(", "cosine_scores", ",", "labels_train", ")", "\n", "scores_cls", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "scores_cls", ",", "min", "=", "1e-7", ")", ")", "\n", "\n", "return", "scores_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.gidariss_FewShotWithoutForgetting.architectures.MatchingNetworksHead.create_model": [[78, 80], ["MatchingNetworksHead.MatchingNetwork"], "function", ["None"], ["", "", "def", "create_model", "(", "opt", ")", ":", "\n", "    ", "return", "MatchingNetwork", "(", "opt", ")", "\n", "", ""]]}