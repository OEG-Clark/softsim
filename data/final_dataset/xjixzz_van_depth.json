{"home.repos.pwc.inspect_result.xjixzz_van_depth.None.options.MonodepthOptions.__init__": [[10, 260], ["argparse.ArgumentParser", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "options.MonodepthOptions.parser.add_argument", "os.path.join", "os.path.join", "os.path.join", "os.path.expanduser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"van_depth options\"", ")", "\n", "\n", "# PATHS", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--data_path\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"path to the training data\"", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "file_dir", ",", "\"kitti_data\"", ")", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--val_data_path\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"path to the validation data\"", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "file_dir", ",", "\"season_data\"", ",", "\"SeasonDepth_testset\"", ")", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--log_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"log directory\"", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "\"tmp\"", ")", ")", "\n", "\n", "# TRAINING options", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--encoder\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"the encoder of depth estimation network\"", ",", "\n", "default", "=", "\"van\"", ",", "\n", "choices", "=", "[", "\"resnet\"", ",", "\"van\"", "]", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--use_channel_attention\"", ",", "\n", "help", "=", "\"if set use channel attention\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pose_encoder\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"the encoder of pose network\"", ",", "\n", "default", "=", "\"resnet\"", ",", "\n", "choices", "=", "[", "\"resnet\"", ",", "\"van\"", "]", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--size_encoder\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"size of encoder\"", ",", "\n", "default", "=", "\"small\"", ",", "\n", "choices", "=", "[", "\"tiny\"", ",", "\"small\"", ",", "\"base\"", "]", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--size_pose_encoder\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"size of pose encoder\"", ",", "\n", "default", "=", "\"small\"", ",", "\n", "choices", "=", "[", "\"tiny\"", ",", "\"small\"", ",", "\"base\"", "]", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--model_name\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"the name of the folder to save the model in\"", ",", "\n", "default", "=", "\"mdp\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--split\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"which training split to use\"", ",", "\n", "choices", "=", "[", "\"eigen_zhou\"", ",", "\"eigen_full\"", ",", "\"odom\"", ",", "\"benchmark\"", ",", "\"seasondepth\"", "]", ",", "\n", "default", "=", "\"eigen_zhou\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--num_layers\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"number of resnet layers\"", ",", "\n", "default", "=", "18", ",", "\n", "choices", "=", "[", "18", ",", "34", ",", "50", ",", "101", ",", "152", "]", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"dataset to train on\"", ",", "\n", "default", "=", "\"kitti\"", ",", "\n", "choices", "=", "[", "\"kitti\"", ",", "\"kitti_odom\"", ",", "\"kitti_depth\"", ",", "\"kitti_test\"", "]", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--png\"", ",", "\n", "help", "=", "\"if set, trains from raw KITTI png files (instead of jpgs)\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--height\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"input image height\"", ",", "\n", "default", "=", "192", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--width\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"input image width\"", ",", "\n", "default", "=", "640", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--disparity_smoothness\"", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"disparity smoothness weight\"", ",", "\n", "default", "=", "1e-3", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--scales\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"scales used in the loss\"", ",", "\n", "default", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--min_depth\"", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"minimum depth\"", ",", "\n", "default", "=", "0.1", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--max_depth\"", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"maximum depth\"", ",", "\n", "default", "=", "100.0", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--use_stereo\"", ",", "\n", "help", "=", "\"if set, uses stereo pair for training\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--frame_ids\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"frames to load\"", ",", "\n", "default", "=", "[", "0", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "# OPTIMIZATION options", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"batch size\"", ",", "\n", "default", "=", "12", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--val_batch_size\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"batch size\"", ",", "\n", "default", "=", "12", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"learning rate\"", ",", "\n", "default", "=", "1e-4", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--num_epochs\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"number of epochs\"", ",", "\n", "default", "=", "20", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--gamma\"", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"gamma for step_lr_scheduler\"", ",", "\n", "default", "=", "0.1", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--scheduler_step_size\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"step size of the scheduler\"", ",", "\n", "default", "=", "15", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--optimizer\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"optimimzer name\"", ",", "\n", "default", "=", "\"adam\"", ",", "\n", "choices", "=", "[", "\"adam\"", ",", "\"adamw\"", "]", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--wd\"", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"weight_decay\"", ",", "\n", "default", "=", "5e-5", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--set_seed\"", ",", "\n", "help", "=", "\"if set, use the same init\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"random seed\"", ",", "\n", "default", "=", "42", ")", "\n", "# ABLATION options", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--v1_multiscale\"", ",", "\n", "help", "=", "\"if set, uses monodepth v1 multiscale\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--avg_reprojection\"", ",", "\n", "help", "=", "\"if set, uses average reprojection loss\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--disable_automasking\"", ",", "\n", "help", "=", "\"if set, doesn't do auto-masking\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--predictive_mask\"", ",", "\n", "help", "=", "\"if set, uses a predictive masking scheme as in Zhou et al\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--no_ssim\"", ",", "\n", "help", "=", "\"if set, disables ssim in the loss\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--weights_init\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"pretrained or scratch\"", ",", "\n", "default", "=", "\"pretrained\"", ",", "\n", "choices", "=", "[", "\"pretrained\"", ",", "\"scratch\"", "]", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pose_model_input\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"how many images the pose network gets\"", ",", "\n", "default", "=", "\"pairs\"", ",", "\n", "choices", "=", "[", "\"pairs\"", ",", "\"all\"", "]", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pose_model_type\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"normal or shared\"", ",", "\n", "default", "=", "\"separate_resnet\"", ",", "\n", "choices", "=", "[", "\"posecnn\"", ",", "\"separate_resnet\"", ",", "\"shared\"", "]", ")", "\n", "\n", "# SYSTEM options", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--no_cuda\"", ",", "\n", "help", "=", "\"if set disables CUDA\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--num_workers\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"number of dataloader workers\"", ",", "\n", "default", "=", "12", ")", "\n", "\n", "# LOADING options", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--load_weights_folder\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"name of model to load\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--models_to_load\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"models to load\"", ",", "\n", "default", "=", "[", "\"encoder\"", ",", "\"depth\"", ",", "\"pose_encoder\"", ",", "\"pose\"", "]", ")", "\n", "\n", "# LOGGING options", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--log_frequency\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"number of batches between each tensorboard log\"", ",", "\n", "default", "=", "250", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--save_frequency\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"number of epochs between each save\"", ",", "\n", "default", "=", "1", ")", "\n", "\n", "# EVALUATION options", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--eval_stereo\"", ",", "\n", "help", "=", "\"if set evaluates in stereo mode\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--eval_mono\"", ",", "\n", "help", "=", "\"if set evaluates in mono mode\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--disable_median_scaling\"", ",", "\n", "help", "=", "\"if set disables median scaling in evaluation\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pred_depth_scale_factor\"", ",", "\n", "help", "=", "\"if set multiplies predictions by this number\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--ext_disp_to_eval\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"optional path to a .npy disparities file to evaluate\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--eval_split\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"eigen\"", ",", "\n", "choices", "=", "[", "\n", "\"eigen\"", ",", "\"eigen_benchmark\"", ",", "\"benchmark\"", ",", "\"odom_9\"", ",", "\"odom_10\"", ",", "\"seasondepth\"", "]", ",", "\n", "help", "=", "\"which split to run eval on\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--save_pred_disps\"", ",", "\n", "help", "=", "\"if set saves predicted disparities\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--no_eval\"", ",", "\n", "help", "=", "\"if set disables evaluation\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--eval_eigen_to_benchmark\"", ",", "\n", "help", "=", "\"if set assume we are loading eigen results from npy but \"", "\n", "\"we want to evaluate using the new benchmark.\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--eval_out_dir\"", ",", "\n", "help", "=", "\"if set will output the disparities to this folder\"", ",", "\n", "type", "=", "str", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--post_process\"", ",", "\n", "help", "=", "\"if set will perform the flipping post processing \"", "\n", "\"from the original monodepth paper\"", ",", "\n", "action", "=", "\"store_true\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pred_depth_path\"", ",", "\n", "help", "=", "\"if set will output the depth maps to this folder\"", ",", "\n", "type", "=", "str", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--eval_set\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"val\"", ",", "\n", "choices", "=", "[", "\n", "\"val\"", ",", "\"test\"", "]", ",", "\n", "help", "=", "\"which seasondepth set to run eval on\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.options.MonodepthOptions.parse": [[262, 265], ["options.MonodepthOptions.parser.parse_args"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.test_simple.parse_args"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "self", ".", "options", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "return", "self", ".", "options", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.export_kitti_gt_depth.export_gt_depths_kitti": [[13, 56], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "utils.readlines", "print", "os.path.join", "print", "numpy.savez_compressed", "os.path.dirname", "os.path.join", "line.split", "int", "gt_depths.append", "os.path.join", "os.path.join", "kitti_utils.generate_depth_map", "kitti_utils.generate_depth_map.astype", "numpy.array", "os.path.join", "folder.split", "numpy.array().astype", "numpy.array", "PIL.open"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.test_simple.parse_args", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.readlines", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_utils.generate_depth_map"], ["def", "export_gt_depths_kitti", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'export_gt_depth'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'path to the root of the KITTI data'", ",", "\n", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--split'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'which split to export gt from'", ",", "\n", "required", "=", "True", ",", "\n", "choices", "=", "[", "\"eigen\"", ",", "\"eigen_benchmark\"", "]", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "split_folder", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"splits\"", ",", "opt", ".", "split", ")", "\n", "lines", "=", "readlines", "(", "os", ".", "path", ".", "join", "(", "split_folder", ",", "\"test_files.txt\"", ")", ")", "\n", "\n", "print", "(", "\"Exporting ground truth depths for {}\"", ".", "format", "(", "opt", ".", "split", ")", ")", "\n", "\n", "gt_depths", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "\n", "        ", "folder", ",", "frame_id", ",", "_", "=", "line", ".", "split", "(", ")", "\n", "frame_id", "=", "int", "(", "frame_id", ")", "\n", "\n", "if", "opt", ".", "split", "==", "\"eigen\"", ":", "\n", "            ", "calib_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "data_path", ",", "folder", ".", "split", "(", "\"/\"", ")", "[", "0", "]", ")", "\n", "velo_filename", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "data_path", ",", "folder", ",", "\n", "\"velodyne_points/data\"", ",", "\"{:010d}.bin\"", ".", "format", "(", "frame_id", ")", ")", "\n", "gt_depth", "=", "generate_depth_map", "(", "calib_dir", ",", "velo_filename", ",", "2", ",", "True", ")", "\n", "", "elif", "opt", ".", "split", "==", "\"eigen_benchmark\"", ":", "\n", "            ", "gt_depth_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "data_path", ",", "folder", ",", "\"proj_depth\"", ",", "\n", "\"groundtruth\"", ",", "\"image_02\"", ",", "\"{:010d}.png\"", ".", "format", "(", "frame_id", ")", ")", "\n", "gt_depth", "=", "np", ".", "array", "(", "pil", ".", "open", "(", "gt_depth_path", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "256", "\n", "\n", "", "gt_depths", ".", "append", "(", "gt_depth", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "output_path", "=", "os", ".", "path", ".", "join", "(", "split_folder", ",", "\"gt_depths.npz\"", ")", "\n", "\n", "print", "(", "\"Saving to {}\"", ".", "format", "(", "opt", ".", "split", ")", ")", "\n", "\n", "np", ".", "savez_compressed", "(", "output_path", ",", "data", "=", "np", ".", "array", "(", "gt_depths", ",", "dtype", "=", "object", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_kitti_depth.compute_errors": [[27, 46], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "np.sqrt.mean", "np.sqrt.mean", "numpy.log", "numpy.log", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log"], ["def", "compute_errors", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Computation of error metrics between predicted and ground truth depths\n    \"\"\"", "\n", "thresh", "=", "np", ".", "maximum", "(", "(", "gt", "/", "pred", ")", ",", "(", "pred", "/", "gt", ")", ")", "\n", "a1", "=", "(", "thresh", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "rmse", "=", "(", "gt", "-", "pred", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "gt", ")", "-", "np", ".", "log", "(", "pred", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "gt", "-", "pred", ")", "/", "gt", ")", "\n", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "gt", "-", "pred", ")", "**", "2", ")", "/", "gt", ")", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_kitti_depth.batch_post_process_disparity": [[48, 57], ["numpy.meshgrid", "numpy.linspace", "numpy.linspace", "numpy.clip"], "function", ["None"], ["", "def", "batch_post_process_disparity", "(", "l_disp", ",", "r_disp", ")", ":", "\n", "    ", "\"\"\"Apply the disparity post-processing method as introduced in Monodepthv1\n    \"\"\"", "\n", "_", ",", "h", ",", "w", "=", "l_disp", ".", "shape", "\n", "m_disp", "=", "0.5", "*", "(", "l_disp", "+", "r_disp", ")", "\n", "l", ",", "_", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "w", ")", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "h", ")", ")", "\n", "l_mask", "=", "(", "1.0", "-", "np", ".", "clip", "(", "20", "*", "(", "l", "-", "0.05", ")", ",", "0", ",", "1", ")", ")", "[", "None", ",", "...", "]", "\n", "r_mask", "=", "l_mask", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "r_mask", "*", "l_disp", "+", "l_mask", "*", "r_disp", "+", "(", "1.0", "-", "l_mask", "-", "r_mask", ")", "*", "m_disp", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_kitti_depth.evaluate": [[59, 229], ["os.path.join", "print", "range", "numpy.array().mean", "print", "print", "print", "sum", "os.path.expanduser", "os.path.isdir", "print", "utils.readlines", "os.path.join", "os.path.join", "torch.load", "datasets.KITTIRAWDataset", "torch.utils.data.DataLoader", "networks.VANEncoder.state_dict", "networks.VANEncoder.load_state_dict", "networks.VANDecoder.load_state_dict", "networks.VANEncoder.cuda", "networks.VANEncoder.eval", "networks.VANDecoder.cuda", "networks.VANDecoder.eval", "print", "numpy.concatenate", "print", "numpy.load", "os.path.join", "print", "numpy.save", "print", "quit", "numpy.load", "print", "print", "cv2.resize", "errors.append", "numpy.array", "numpy.median", "print", "os.path.join", "networks.ResnetEncoder", "networks.DepthDecoder", "torch.load", "torch.no_grad", "numpy.load", "os.path.join", "print", "range", "print", "quit", "numpy.logical_and", "numpy.array().astype", "numpy.zeros", "numpy.logical_and", "np.array.append", "evaluate_kitti_depth.compute_errors", "numpy.array", "networks.VANEncoder", "networks.VANDecoder", "data[].cuda", "networks.VANDecoder.", "layers.disp_to_depth", "[].numpy", "np.load.append", "os.path.join", "os.path.exists", "os.makedirs", "len", "cv2.resize", "numpy.clip", "numpy.uint16", "os.path.join", "cv2.imwrite", "numpy.median", "numpy.median", "numpy.std", "torch.load.items", "torch.cat", "networks.VANEncoder.", "evaluate_kitti_depth.batch_post_process_disparity", "numpy.array", "np.array().mean.tolist", "torch.flip", "batch_post_process_disparity.cpu"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.readlines", "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.pred_season_depth.compute_errors", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.disp_to_depth", "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.pred_season_depth.batch_post_process_disparity"], ["", "def", "evaluate", "(", "opt", ")", ":", "\n", "    ", "\"\"\"Evaluates a pretrained model using a specified test set\n    \"\"\"", "\n", "MIN_DEPTH", "=", "1e-3", "\n", "MAX_DEPTH", "=", "80", "\n", "\n", "assert", "sum", "(", "(", "opt", ".", "eval_mono", ",", "opt", ".", "eval_stereo", ")", ")", "==", "1", ",", "\"Please choose mono or stereo evaluation by setting either --eval_mono or --eval_stereo\"", "\n", "\n", "if", "opt", ".", "ext_disp_to_eval", "is", "None", ":", "\n", "\n", "        ", "opt", ".", "load_weights_folder", "=", "os", ".", "path", ".", "expanduser", "(", "opt", ".", "load_weights_folder", ")", "\n", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "opt", ".", "load_weights_folder", ")", ",", "\"Cannot find a folder at {}\"", ".", "format", "(", "opt", ".", "load_weights_folder", ")", "\n", "\n", "print", "(", "\"-> Loading weights from {}\"", ".", "format", "(", "opt", ".", "load_weights_folder", ")", ")", "\n", "\n", "filenames", "=", "readlines", "(", "os", ".", "path", ".", "join", "(", "splits_dir", ",", "opt", ".", "eval_split", ",", "\"test_files.txt\"", ")", ")", "\n", "encoder_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "load_weights_folder", ",", "\"encoder.pth\"", ")", "\n", "decoder_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "load_weights_folder", ",", "\"depth.pth\"", ")", "\n", "\n", "encoder_dict", "=", "torch", ".", "load", "(", "encoder_path", ")", "\n", "\n", "dataset", "=", "datasets", ".", "KITTIRAWDataset", "(", "opt", ".", "data_path", ",", "filenames", ",", "\n", "encoder_dict", "[", "'height'", "]", ",", "encoder_dict", "[", "'width'", "]", ",", "\n", "[", "0", "]", ",", "opt", ".", "scales", ",", "is_train", "=", "False", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "16", ",", "shuffle", "=", "False", ",", "num_workers", "=", "opt", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "if", "opt", ".", "encoder", "==", "\"resnet\"", ":", "\n", "            ", "encoder", "=", "networks", ".", "ResnetEncoder", "(", "opt", ".", "num_layers", ",", "False", ")", "\n", "depth_decoder", "=", "networks", ".", "DepthDecoder", "(", "encoder", ".", "num_ch_enc", ")", "\n", "", "elif", "opt", ".", "encoder", "==", "\"van\"", ":", "\n", "            ", "encoder", "=", "networks", ".", "VANEncoder", "(", "opt", ".", "size_encoder", ",", "False", ")", "\n", "depth_decoder", "=", "networks", ".", "VANDecoder", "(", "encoder", ".", "num_ch_enc", ")", "\n", "\n", "", "model_dict", "=", "encoder", ".", "state_dict", "(", ")", "\n", "encoder", ".", "load_state_dict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "encoder_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", ")", "\n", "depth_decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "decoder_path", ")", ")", "\n", "\n", "encoder", ".", "cuda", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "depth_decoder", ".", "cuda", "(", ")", "\n", "depth_decoder", ".", "eval", "(", ")", "\n", "\n", "pred_disps", "=", "[", "]", "\n", "\n", "print", "(", "\"-> Computing predictions with size {}x{}\"", ".", "format", "(", "\n", "encoder_dict", "[", "'width'", "]", ",", "encoder_dict", "[", "'height'", "]", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", "in", "dataloader", ":", "\n", "                ", "input_color", "=", "data", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", ".", "cuda", "(", ")", "\n", "\n", "if", "opt", ".", "post_process", ":", "\n", "# Post-processed results require each image to have two forward passes", "\n", "                    ", "input_color", "=", "torch", ".", "cat", "(", "(", "input_color", ",", "torch", ".", "flip", "(", "input_color", ",", "[", "3", "]", ")", ")", ",", "0", ")", "\n", "\n", "", "output", "=", "depth_decoder", "(", "encoder", "(", "input_color", ")", ")", "\n", "\n", "pred_disp", ",", "_", "=", "disp_to_depth", "(", "output", "[", "(", "\"disp\"", ",", "0", ")", "]", ",", "opt", ".", "min_depth", ",", "opt", ".", "max_depth", ")", "\n", "pred_disp", "=", "pred_disp", ".", "cpu", "(", ")", "[", ":", ",", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "if", "opt", ".", "post_process", ":", "\n", "                    ", "N", "=", "pred_disp", ".", "shape", "[", "0", "]", "//", "2", "\n", "pred_disp", "=", "batch_post_process_disparity", "(", "pred_disp", "[", ":", "N", "]", ",", "pred_disp", "[", "N", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "", "pred_disps", ".", "append", "(", "pred_disp", ")", "\n", "\n", "", "", "pred_disps", "=", "np", ".", "concatenate", "(", "pred_disps", ")", "\n", "\n", "", "else", ":", "\n", "# Load predictions from file", "\n", "        ", "print", "(", "\"-> Loading predictions from {}\"", ".", "format", "(", "opt", ".", "ext_disp_to_eval", ")", ")", "\n", "pred_disps", "=", "np", ".", "load", "(", "opt", ".", "ext_disp_to_eval", ")", "\n", "\n", "if", "opt", ".", "eval_eigen_to_benchmark", ":", "\n", "            ", "eigen_to_benchmark_ids", "=", "np", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "splits_dir", ",", "\"benchmark\"", ",", "\"eigen_to_benchmark_ids.npy\"", ")", ")", "\n", "\n", "pred_disps", "=", "pred_disps", "[", "eigen_to_benchmark_ids", "]", "\n", "\n", "", "", "if", "opt", ".", "save_pred_disps", ":", "\n", "        ", "output_path", "=", "os", ".", "path", ".", "join", "(", "\n", "opt", ".", "load_weights_folder", ",", "\"disps_{}_split.npy\"", ".", "format", "(", "opt", ".", "eval_split", ")", ")", "\n", "print", "(", "\"-> Saving predicted disparities to \"", ",", "output_path", ")", "\n", "np", ".", "save", "(", "output_path", ",", "pred_disps", ")", "\n", "\n", "", "if", "opt", ".", "no_eval", ":", "\n", "        ", "print", "(", "\"-> Evaluation disabled. Done.\"", ")", "\n", "quit", "(", ")", "\n", "\n", "", "elif", "opt", ".", "eval_split", "==", "'benchmark'", ":", "\n", "        ", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "load_weights_folder", ",", "\"benchmark_predictions\"", ")", "\n", "print", "(", "\"-> Saving out benchmark predictions to {}\"", ".", "format", "(", "save_dir", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "pred_disps", ")", ")", ":", "\n", "            ", "disp_resized", "=", "cv2", ".", "resize", "(", "pred_disps", "[", "idx", "]", ",", "(", "1216", ",", "352", ")", ")", "\n", "depth", "=", "STEREO_SCALE_FACTOR", "/", "disp_resized", "\n", "depth", "=", "np", ".", "clip", "(", "depth", ",", "0", ",", "80", ")", "\n", "depth", "=", "np", ".", "uint16", "(", "depth", "*", "256", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"{:010d}.png\"", ".", "format", "(", "idx", ")", ")", "\n", "cv2", ".", "imwrite", "(", "save_path", ",", "depth", ")", "\n", "\n", "", "print", "(", "\"-> No ground truth is available for the KITTI benchmark, so not evaluating. Done.\"", ")", "\n", "quit", "(", ")", "\n", "\n", "", "gt_path", "=", "os", ".", "path", ".", "join", "(", "splits_dir", ",", "opt", ".", "eval_split", ",", "\"gt_depths.npz\"", ")", "\n", "gt_depths", "=", "np", ".", "load", "(", "gt_path", ",", "fix_imports", "=", "True", ",", "encoding", "=", "'latin1'", ",", "allow_pickle", "=", "True", ")", "[", "\"data\"", "]", "\n", "\n", "print", "(", "\"-> Evaluating\"", ")", "\n", "\n", "if", "opt", ".", "eval_stereo", ":", "\n", "        ", "print", "(", "\"   Stereo evaluation - \"", "\n", "\"disabling median scaling, scaling by {}\"", ".", "format", "(", "STEREO_SCALE_FACTOR", ")", ")", "\n", "opt", ".", "disable_median_scaling", "=", "True", "\n", "opt", ".", "pred_depth_scale_factor", "=", "STEREO_SCALE_FACTOR", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"   Mono evaluation - using median scaling\"", ")", "\n", "\n", "", "errors", "=", "[", "]", "\n", "ratios", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "pred_disps", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "        ", "gt_depth", "=", "gt_depths", "[", "i", "]", "\n", "gt_height", ",", "gt_width", "=", "gt_depth", ".", "shape", "[", ":", "2", "]", "\n", "\n", "pred_disp", "=", "pred_disps", "[", "i", "]", "\n", "pred_disp", "=", "cv2", ".", "resize", "(", "pred_disp", ",", "(", "gt_width", ",", "gt_height", ")", ")", "\n", "pred_depth", "=", "1", "/", "pred_disp", "\n", "\n", "if", "opt", ".", "eval_split", "==", "\"eigen\"", ":", "\n", "            ", "mask", "=", "np", ".", "logical_and", "(", "gt_depth", ">", "MIN_DEPTH", ",", "gt_depth", "<", "MAX_DEPTH", ")", "\n", "\n", "crop", "=", "np", ".", "array", "(", "[", "0.40810811", "*", "gt_height", ",", "0.99189189", "*", "gt_height", ",", "\n", "0.03594771", "*", "gt_width", ",", "0.96405229", "*", "gt_width", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "crop_mask", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ")", "\n", "crop_mask", "[", "crop", "[", "0", "]", ":", "crop", "[", "1", "]", ",", "crop", "[", "2", "]", ":", "crop", "[", "3", "]", "]", "=", "1", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", ",", "crop_mask", ")", "\n", "\n", "", "else", ":", "\n", "            ", "mask", "=", "gt_depth", ">", "0", "\n", "\n", "", "pred_depth", "=", "pred_depth", "[", "mask", "]", "\n", "gt_depth", "=", "gt_depth", "[", "mask", "]", "\n", "\n", "pred_depth", "*=", "opt", ".", "pred_depth_scale_factor", "\n", "if", "not", "opt", ".", "disable_median_scaling", ":", "\n", "            ", "ratio", "=", "np", ".", "median", "(", "gt_depth", ")", "/", "np", ".", "median", "(", "pred_depth", ")", "\n", "ratios", ".", "append", "(", "ratio", ")", "\n", "pred_depth", "*=", "ratio", "\n", "\n", "", "pred_depth", "[", "pred_depth", "<", "MIN_DEPTH", "]", "=", "MIN_DEPTH", "\n", "pred_depth", "[", "pred_depth", ">", "MAX_DEPTH", "]", "=", "MAX_DEPTH", "\n", "\n", "errors", ".", "append", "(", "compute_errors", "(", "gt_depth", ",", "pred_depth", ")", ")", "\n", "\n", "", "if", "not", "opt", ".", "disable_median_scaling", ":", "\n", "        ", "ratios", "=", "np", ".", "array", "(", "ratios", ")", "\n", "med", "=", "np", ".", "median", "(", "ratios", ")", "\n", "print", "(", "\" Scaling ratios | med: {:0.3f} | std: {:0.3f}\"", ".", "format", "(", "med", ",", "np", ".", "std", "(", "ratios", "/", "med", ")", ")", ")", "\n", "\n", "", "mean_errors", "=", "np", ".", "array", "(", "errors", ")", ".", "mean", "(", "0", ")", "\n", "\n", "print", "(", "\"\\n  \"", "+", "(", "\"{:>8} | \"", "*", "7", ")", ".", "format", "(", "\"abs_rel\"", ",", "\"sq_rel\"", ",", "\"rmse\"", ",", "\"rmse_log\"", ",", "\"a1\"", ",", "\"a2\"", ",", "\"a3\"", ")", ")", "\n", "print", "(", "(", "\"&{: 8.3f}  \"", "*", "7", ")", ".", "format", "(", "*", "mean_errors", ".", "tolist", "(", ")", ")", "+", "\"\\\\\\\\\"", ")", "\n", "print", "(", "\"\\n-> Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.compute_errors": [[35, 49], ["numpy.mean", "numpy.maximum", "numpy.abs"], "function", ["None"], ["def", "compute_errors", "(", "ground_truth", ",", "predication", ")", ":", "\n", "    ", "\"\"\"\n    Compute abs_rel and a1\n\n    :param ground_truth:\n    :param predication:\n    :return:\n    \"\"\"", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "ground_truth", "-", "predication", ")", "/", "ground_truth", ")", "\n", "\n", "threshold", "=", "np", ".", "maximum", "(", "(", "ground_truth", "/", "predication", ")", ",", "(", "predication", "/", "ground_truth", ")", ")", "\n", "a1", "=", "(", "threshold", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "\n", "return", "abs_rel", ",", "a1", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.align_img": [[51, 83], ["pred_depth.astype", "numpy.average", "numpy.var", "numpy.average", "numpy.var", "pred_depth.astype.astype", "print", "print", "math.sqrt", "numpy.average", "numpy.var"], "function", ["None"], ["", "def", "align_img", "(", "pred_depth", ",", "ground_depth", ",", "c", ")", ":", "\n", "    ", "\"\"\"\n    align predicted depth maps with ground truth.\n\n    :param pred_depth:\n    :param ground_depth:\n    :param c:\n    :return: aligned predicted depth\n\n    \"\"\"", "\n", "pred_depth_f", "=", "pred_depth", ".", "astype", "(", "float", ")", "\n", "# ground_depth_f = ground_depth.astype(float)", "\n", "pred_avg", "=", "np", ".", "average", "(", "pred_depth_f", "[", "c", "]", ")", "\n", "pred_var", "=", "np", ".", "var", "(", "pred_depth_f", "[", "c", "]", ")", "\n", "gt_avg", "=", "np", ".", "average", "(", "ground_depth", "[", "c", "]", ")", "\n", "gt_var", "=", "np", ".", "var", "(", "ground_depth", "[", "c", "]", ")", "\n", "# print('pred: ', pred_avg, pred_var, 'gt: ', gt_avg, gt_var)", "\n", "\n", "if", "args", ".", "gui", ":", "\n", "        ", "print", "(", "'pred: '", ",", "pred_avg", ",", "pred_var", ",", "'gt: '", ",", "gt_avg", ",", "gt_var", ")", "\n", "\n", "", "pred_depth_f", "=", "(", "pred_depth_f", "-", "pred_avg", ")", "*", "math", ".", "sqrt", "(", "gt_var", "/", "pred_var", ")", "+", "gt_avg", "\n", "\n", "pred_depth_f", "[", "pred_depth_f", ">", "65535", "]", "=", "65535", "\n", "pred_depth_f", "[", "pred_depth_f", "<", "0", "]", "=", "0", "\n", "\n", "if", "args", ".", "gui", ":", "\n", "        ", "print", "(", "'aligned: '", ",", "np", ".", "average", "(", "pred_depth_f", "[", "c", "]", ")", ",", "np", ".", "var", "(", "pred_depth_f", "[", "c", "]", ")", ")", "\n", "\n", "", "pred_aligned", "=", "pred_depth_f", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "\n", "return", "pred_aligned", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.process": [[85, 136], ["cv2.imread", "cv2.imread", "evaluate_season.align_img", "cv2.resize.astype", "evaluate_season.compute_errors", "cv2.resize", "len", "cv2.resize", "cv2.imshow", "cv2.resize", "cv2.imshow", "cv2.resize", "cv2.imshow", "print", "os.path.exists", "os.path.exists", "cv2.waitKey", "ord", "cv2.destroyAllWindows", "exit"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.align_img", "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.pred_season_depth.compute_errors"], ["", "def", "process", "(", "pred_pth", ",", "gt_pth", ")", ":", "\n", "    ", "\"\"\"\n    Read predicted image and ground truth image, and align them to the same scale.\n    Finally, compute the metric of a pair of aligned images\n\n    :param pred_pth:\n    :param gt_pth:\n    :return:\n    \"\"\"", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "pred_pth", ")", "and", "os", ".", "path", ".", "exists", "(", "gt_pth", ")", ")", ":", "\n", "        ", "return", "None", "\n", "", "pred_depth", "=", "cv2", ".", "imread", "(", "pred_pth", ",", "-", "1", ")", "\n", "gt_depth", "=", "cv2", ".", "imread", "(", "gt_pth", ",", "-", "1", ")", "\n", "if", "pred_depth", ".", "shape", "!=", "gt_depth", ".", "shape", ":", "\n", "        ", "pred_depth", "=", "cv2", ".", "resize", "(", "pred_depth", ",", "gt_depth", ".", "shape", "[", ":", ":", "-", "1", "]", ")", "\n", "", "if", "args", ".", "disp2depth", ":", "\n", "        ", "pred_depth", "[", "pred_depth", ">", "0", "]", "=", "1", "/", "pred_depth", "[", "pred_depth", ">", "0", "]", "\n", "\n", "", "a", "=", "pred_depth", "==", "0", "\n", "b", "=", "gt_depth", "==", "0", "\n", "c", "=", "gt_depth", ">", "0", "\n", "if", "len", "(", "c", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "", "pred_depth", "[", "a", "]", "=", "1", "\n", "pred_depth", "[", "b", "]", "=", "1", "\n", "gt_depth", "[", "b", "]", "=", "1", "\n", "\n", "pred_aligned", "=", "align_img", "(", "pred_depth", ",", "gt_depth", ",", "c", ")", "\n", "pred_aligned", "[", "b", "]", "=", "1", "\n", "pred_aligned", "[", "pred_aligned", "==", "0", "]", "=", "1", "\n", "pred_aligned", "[", "gt_depth", "==", "0", "]", "=", "1", "\n", "\n", "gt_depth", "=", "gt_depth", ".", "astype", "(", "float", ")", "\n", "abs_rel", ",", "a1", "=", "compute_errors", "(", "gt_depth", "[", "c", "]", ",", "pred_aligned", "[", "c", "]", ")", "\n", "\n", "# If customer choose to visualize the difference between predicted imgs and ground truth.", "\n", "if", "args", ".", "gui", ":", "\n", "        ", "pred_depth", "=", "cv2", ".", "resize", "(", "pred_depth", ",", "(", "512", ",", "256", ")", ")", "\n", "cv2", ".", "imshow", "(", "'img'", ",", "pred_depth", ")", "\n", "pred_aligned", "=", "cv2", ".", "resize", "(", "pred_aligned", ",", "(", "512", ",", "256", ")", ")", "\n", "cv2", ".", "imshow", "(", "'adjust'", ",", "pred_aligned", "/", "65536", ")", "\n", "gt_depth", "=", "cv2", ".", "resize", "(", "gt_depth", ",", "(", "512", ",", "256", ")", ")", "\n", "cv2", ".", "imshow", "(", "'ground'", ",", "gt_depth", "/", "65536", ")", "\n", "\n", "print", "(", "\"abs_rel: {} \\na1: {} \"", ".", "format", "(", "abs_rel", ",", "a1", ")", ")", "\n", "if", "cv2", ".", "waitKey", "(", "0", ")", "==", "ord", "(", "'q'", ")", ":", "\n", "            ", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "exit", "(", ")", "\n", "\n", "", "", "return", "abs_rel", ",", "a1", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.process_dataset": [[139, 151], ["tqdm.tqdm", "os.listdir", "img.split", "img.endswith", "img.endswith", "os.path.join", "os.path.join", "evaluate_season.process"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.process"], ["", "def", "process_dataset", "(", "_pred_path", ",", "_gt_path", ")", ":", "\n", "    ", "res_dict", "=", "{", "}", "\n", "# Go through each image", "\n", "for", "img", "in", "tqdm", ".", "tqdm", "(", "os", ".", "listdir", "(", "_pred_path", ")", ")", ":", "\n", "        ", "img_base", "=", "img", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "img", ".", "endswith", "(", "'jpg'", ")", "or", "img", ".", "endswith", "(", "'png'", ")", ":", "\n", "            ", "pred_depth", "=", "os", ".", "path", ".", "join", "(", "_pred_path", ",", "img", ")", "\n", "gt_depth", "=", "os", ".", "path", ".", "join", "(", "_gt_path", ",", "img_base", "+", "'.png'", ")", "\n", "res", "=", "process", "(", "pred_depth", ",", "gt_depth", ")", "\n", "if", "res", "is", "not", "None", ":", "\n", "                ", "res_dict", "[", "img", "]", "=", "res", "\n", "", "", "", "return", "res_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.xl_write_line": [[153, 159], ["range", "len", "type", "worksheet.write", "worksheet.write", "float"], "function", ["None"], ["", "def", "xl_write_line", "(", "worksheet", ",", "row", ",", "col", ",", "t", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "t", ")", ")", ":", "\n", "        ", "if", "type", "(", "t", "[", "i", "]", ")", "!=", "str", ":", "\n", "            ", "worksheet", ".", "write", "(", "row", ",", "col", "+", "i", ",", "float", "(", "t", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "worksheet", ".", "write", "(", "row", ",", "col", "+", "i", ",", "t", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.evaluation": [[162, 192], ["xlwt.Workbook", "os.path.exists", "xlwt.Workbook.save", "xlwt.Workbook.add_sheet", "workbook.get_sheet.write", "evaluate_season.xl_write_line", "workbook.get_sheet.write", "evaluate_season.xl_write_line", "json.load", "evaluate_season.process_dataset", "digit_list.index", "int", "xlwt.Workbook.get_sheet", "workbook.get_sheet.write", "evaluate_season.xl_write_line", "cv2.destroyAllWindows", "open", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.xl_write_line", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.xl_write_line", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.process_dataset", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.xl_write_line"], ["", "", "", "def", "evaluation", "(", "pred_path", ",", "gt_path", ",", "xls_path", ")", ":", "\n", "    ", "workbook", "=", "xlwt", ".", "Workbook", "(", "encoding", "=", "'utf-8'", ")", "\n", "xls_counter", "=", "{", "}", "\n", "for", "env", "in", "env_list", ":", "\n", "        ", "worksheet", "=", "workbook", ".", "add_sheet", "(", "env", ")", "\n", "worksheet", ".", "write", "(", "0", ",", "0", ",", "\"img_name\"", ")", "\n", "xl_write_line", "(", "worksheet", ",", "0", ",", "1", ",", "xl_head", ")", "\n", "worksheet", ".", "write", "(", "0", ",", "3", ",", "\"img_name\"", ")", "\n", "xl_write_line", "(", "worksheet", ",", "0", ",", "4", ",", "xl_head", ")", "\n", "xls_counter", "[", "env", "]", "=", "[", "1", ",", "1", "]", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "\"{}/result.json\"", ".", "format", "(", "xls_path", ")", ")", ":", "\n", "        ", "process_result", "=", "json", ".", "load", "(", "open", "(", "\"{}/result.json\"", ".", "format", "(", "xls_path", ")", ",", "'r'", ")", ")", "\n", "", "else", ":", "\n", "        ", "process_result", "=", "process_dataset", "(", "pred_path", ",", "gt_path", ")", "\n", "with", "open", "(", "\"{}/result.json\"", ".", "format", "(", "xls_path", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "process_result", ",", "f", ")", "\n", "", "", "for", "img", "in", "process_result", ":", "\n", "        ", "res", "=", "process_result", "[", "img", "]", "\n", "index", "=", "digit_list", ".", "index", "(", "img", "[", "13", ":", "18", "]", ")", "\n", "env", "=", "env_list", "[", "index", "]", "\n", "c", "=", "int", "(", "img", "[", "11", "]", ")", "\n", "worksheet", "=", "workbook", ".", "get_sheet", "(", "env", ")", "\n", "worksheet", ".", "write", "(", "xls_counter", "[", "env", "]", "[", "c", "]", ",", "3", "*", "c", ",", "img", ")", "\n", "xl_write_line", "(", "worksheet", ",", "xls_counter", "[", "env", "]", "[", "c", "]", ",", "3", "*", "c", "+", "1", ",", "res", ")", "\n", "xls_counter", "[", "env", "]", "[", "c", "]", "+=", "1", "\n", "", "workbook", ".", "save", "(", "xls_path", "+", "\"/result.xls\"", ")", "\n", "\n", "if", "args", ".", "gui", ":", "\n", "        ", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "", "return", "xls_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.rng": [[194, 196], ["numpy.average", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "rng", "(", "arr", ")", ":", "\n", "    ", "return", "(", "np", ".", "max", "(", "arr", ")", "-", "np", ".", "min", "(", "arr", ")", ")", "/", "np", ".", "average", "(", "arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.rng_a1": [[198, 200], ["numpy.max", "numpy.min", "numpy.average"], "function", ["None"], ["", "def", "rng_a1", "(", "arr", ")", ":", "\n", "    ", "return", "(", "np", ".", "max", "(", "arr", ")", "-", "np", ".", "min", "(", "arr", ")", ")", "/", "(", "1", "-", "np", ".", "average", "(", "arr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.reg_path": [[202, 205], ["os.path.abspath"], "function", ["None"], ["", "def", "reg_path", "(", "path", ")", ":", "\n", "    ", "reg", "=", "os", ".", "path", ".", "abspath", "(", "path", ")", "\n", "return", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.write_ind": [[207, 214], ["ws.write", "ws.write", "ws.write", "ws.write", "ws.write", "ws.write", "numpy.average", "numpy.average", "numpy.var", "numpy.var", "evaluate_season.rng", "evaluate_season.rng_a1"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.rng", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.evaluate_season.rng_a1"], ["", "def", "write_ind", "(", "ws", ",", "ind_dict", ":", "dict", ",", "counter", ")", ":", "\n", "    ", "ws", ".", "write", "(", "counter", "*", "3", "+", "1", ",", "1", ",", "np", ".", "average", "(", "ind_dict", "[", "\"abs_rel\"", "]", ")", ")", "\n", "ws", ".", "write", "(", "counter", "*", "3", "+", "2", ",", "1", ",", "np", ".", "average", "(", "ind_dict", "[", "\"a1\"", "]", ")", ")", "\n", "ws", ".", "write", "(", "counter", "*", "3", "+", "1", ",", "2", ",", "np", ".", "var", "(", "ind_dict", "[", "\"abs_rel\"", "]", ")", ")", "\n", "ws", ".", "write", "(", "counter", "*", "3", "+", "2", ",", "2", ",", "np", ".", "var", "(", "ind_dict", "[", "\"a1\"", "]", ")", ")", "\n", "ws", ".", "write", "(", "counter", "*", "3", "+", "1", ",", "3", ",", "rng", "(", "ind_dict", "[", "\"abs_rel\"", "]", ")", ")", "\n", "ws", ".", "write", "(", "counter", "*", "3", "+", "2", ",", "3", ",", "rng_a1", "(", "ind_dict", "[", "\"a1\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_utils.load_velodyne_points": [[8, 15], ["numpy.fromfile().reshape", "numpy.fromfile"], "function", ["None"], ["def", "load_velodyne_points", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Load 3D point cloud from KITTI file format\n    (adapted from https://github.com/hunse/kitti)\n    \"\"\"", "\n", "points", "=", "np", ".", "fromfile", "(", "filename", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "points", "[", ":", ",", "3", "]", "=", "1.0", "# homogeneous", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_utils.read_calib_file": [[17, 37], ["set", "open", "f.readlines", "line.split", "value.strip.strip", "set.issuperset", "numpy.array", "list", "map", "value.strip.split"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.readlines"], ["", "def", "read_calib_file", "(", "path", ")", ":", "\n", "    ", "\"\"\"Read KITTI calibration file\n    (from https://github.com/hunse/kitti)\n    \"\"\"", "\n", "float_chars", "=", "set", "(", "\"0123456789.e+- \"", ")", "\n", "data", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "value", "=", "value", ".", "strip", "(", ")", "\n", "data", "[", "key", "]", "=", "value", "\n", "if", "float_chars", ".", "issuperset", "(", "value", ")", ":", "\n", "# try to cast to float array", "\n", "                ", "try", ":", "\n", "                    ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "value", ".", "split", "(", "' '", ")", ")", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "# casting error: data[key] already eq. value, so pass", "\n", "                    ", "pass", "\n", "\n", "", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_utils.sub2ind": [[39, 44], ["None"], "function", ["None"], ["", "def", "sub2ind", "(", "matrixSize", ",", "rowSub", ",", "colSub", ")", ":", "\n", "    ", "\"\"\"Convert row, col matrix subscripts to linear indices\n    \"\"\"", "\n", "m", ",", "n", "=", "matrixSize", "\n", "return", "rowSub", "*", "(", "n", "-", "1", ")", "+", "colSub", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_utils.generate_depth_map": [[46, 99], ["kitti_utils.read_calib_file", "kitti_utils.read_calib_file", "numpy.hstack", "numpy.vstack", "[].astype", "numpy.eye", "cam2cam[].reshape", "cam2cam[].reshape", "numpy.dot", "kitti_utils.load_velodyne_points", "numpy.zeros", "kitti_utils.sub2ind", "os.path.join", "os.path.join", "numpy.dot", "numpy.dot", "numpy.round", "numpy.round", "int", "int", "velo_pts_im[].min", "velo2cam[].reshape", "numpy.array", "collections.Counter().items", "numpy.where", "velo_pts_im[].astype", "velo_pts_im[].astype", "collections.Counter", "str"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_utils.read_calib_file", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_utils.read_calib_file", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_utils.load_velodyne_points", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_utils.sub2ind"], ["", "def", "generate_depth_map", "(", "calib_dir", ",", "velo_filename", ",", "cam", "=", "2", ",", "vel_depth", "=", "False", ")", ":", "\n", "    ", "\"\"\"Generate a depth map from velodyne data\n    \"\"\"", "\n", "# load calibration files", "\n", "cam2cam", "=", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "calib_dir", ",", "'calib_cam_to_cam.txt'", ")", ")", "\n", "velo2cam", "=", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "calib_dir", ",", "'calib_velo_to_cam.txt'", ")", ")", "\n", "velo2cam", "=", "np", ".", "hstack", "(", "(", "velo2cam", "[", "'R'", "]", ".", "reshape", "(", "3", ",", "3", ")", ",", "velo2cam", "[", "'T'", "]", "[", "...", ",", "np", ".", "newaxis", "]", ")", ")", "\n", "velo2cam", "=", "np", ".", "vstack", "(", "(", "velo2cam", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1.0", "]", ")", ")", ")", "\n", "\n", "# get image shape", "\n", "im_shape", "=", "cam2cam", "[", "\"S_rect_02\"", "]", "[", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute projection matrix velodyne->image plane", "\n", "R_cam2rect", "=", "np", ".", "eye", "(", "4", ")", "\n", "R_cam2rect", "[", ":", "3", ",", ":", "3", "]", "=", "cam2cam", "[", "'R_rect_00'", "]", ".", "reshape", "(", "3", ",", "3", ")", "\n", "P_rect", "=", "cam2cam", "[", "'P_rect_0'", "+", "str", "(", "cam", ")", "]", ".", "reshape", "(", "3", ",", "4", ")", "\n", "P_velo2im", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "P_rect", ",", "R_cam2rect", ")", ",", "velo2cam", ")", "\n", "\n", "# load velodyne points and remove all behind image plane (approximation)", "\n", "# each row of the velodyne data is forward, left, up, reflectance", "\n", "velo", "=", "load_velodyne_points", "(", "velo_filename", ")", "\n", "velo", "=", "velo", "[", "velo", "[", ":", ",", "0", "]", ">=", "0", ",", ":", "]", "\n", "\n", "# project the points to the camera", "\n", "velo_pts_im", "=", "np", ".", "dot", "(", "P_velo2im", ",", "velo", ".", "T", ")", ".", "T", "\n", "velo_pts_im", "[", ":", ",", ":", "2", "]", "=", "velo_pts_im", "[", ":", ",", ":", "2", "]", "/", "velo_pts_im", "[", ":", ",", "2", "]", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "if", "vel_depth", ":", "\n", "        ", "velo_pts_im", "[", ":", ",", "2", "]", "=", "velo", "[", ":", ",", "0", "]", "\n", "\n", "# check if in bounds", "\n", "# use minus 1 to get the exact same value as KITTI matlab code", "\n", "", "velo_pts_im", "[", ":", ",", "0", "]", "=", "np", ".", "round", "(", "velo_pts_im", "[", ":", ",", "0", "]", ")", "-", "1", "\n", "velo_pts_im", "[", ":", ",", "1", "]", "=", "np", ".", "round", "(", "velo_pts_im", "[", ":", ",", "1", "]", ")", "-", "1", "\n", "val_inds", "=", "(", "velo_pts_im", "[", ":", ",", "0", "]", ">=", "0", ")", "&", "(", "velo_pts_im", "[", ":", ",", "1", "]", ">=", "0", ")", "\n", "val_inds", "=", "val_inds", "&", "(", "velo_pts_im", "[", ":", ",", "0", "]", "<", "im_shape", "[", "1", "]", ")", "&", "(", "velo_pts_im", "[", ":", ",", "1", "]", "<", "im_shape", "[", "0", "]", ")", "\n", "velo_pts_im", "=", "velo_pts_im", "[", "val_inds", ",", ":", "]", "\n", "\n", "# project to image", "\n", "depth", "=", "np", ".", "zeros", "(", "(", "im_shape", "[", ":", "2", "]", ")", ")", "\n", "depth", "[", "velo_pts_im", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", ",", "velo_pts_im", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "]", "=", "velo_pts_im", "[", ":", ",", "2", "]", "\n", "\n", "# find the duplicate points and choose the closest depth", "\n", "inds", "=", "sub2ind", "(", "depth", ".", "shape", ",", "velo_pts_im", "[", ":", ",", "1", "]", ",", "velo_pts_im", "[", ":", ",", "0", "]", ")", "\n", "dupe_inds", "=", "[", "item", "for", "item", ",", "count", "in", "Counter", "(", "inds", ")", ".", "items", "(", ")", "if", "count", ">", "1", "]", "\n", "for", "dd", "in", "dupe_inds", ":", "\n", "        ", "pts", "=", "np", ".", "where", "(", "inds", "==", "dd", ")", "[", "0", "]", "\n", "x_loc", "=", "int", "(", "velo_pts_im", "[", "pts", "[", "0", "]", ",", "0", "]", ")", "\n", "y_loc", "=", "int", "(", "velo_pts_im", "[", "pts", "[", "0", "]", ",", "1", "]", ")", "\n", "depth", "[", "y_loc", ",", "x_loc", "]", "=", "velo_pts_im", "[", "pts", ",", "2", "]", ".", "min", "(", ")", "\n", "", "depth", "[", "depth", "<", "0", "]", "=", "0", "\n", "\n", "return", "depth", "\n", "", ""]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.__init__": [[24, 195], ["os.path.join", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "len", "len", "kitti_trainer.Trainer.models[].to", "list", "kitti_trainer.Trainer.models[].to", "list", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "print", "print", "print", "os.path.join", "utils.readlines", "utils.readlines", "len", "kitti_trainer.Trainer.dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "kitti_trainer.Trainer.dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "print", "print", "kitti_trainer.Trainer.save_opts", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "kitti_trainer.Trainer.opt.frame_ids.append", "networks.ResnetEncoder", "kitti_trainer.Trainer.models[].parameters", "networks.DepthDecoder", "kitti_trainer.Trainer.models[].parameters", "kitti_trainer.Trainer.models[].to", "list", "networks.DepthDecoder", "kitti_trainer.Trainer.models[].to", "list", "torch.Adam", "torch.Adam", "torch.Adam", "kitti_trainer.Trainer.load_model", "os.path.dirname", "os.path.join.format", "os.path.join.format", "tensorboardX.SummaryWriter", "layers.SSIM", "kitti_trainer.Trainer.ssim.to", "layers.BackprojectDepth", "kitti_trainer.Trainer.backproject_depth[].to", "layers.Project3D", "kitti_trainer.Trainer.project_3d[].to", "networks.VANEncoder", "kitti_trainer.Trainer.models[].to", "list", "networks.PoseDecoder", "kitti_trainer.Trainer.models[].parameters", "kitti_trainer.Trainer.models[].parameters", "torch.Adam", "torch.Adam", "torch.Adam", "os.path.join", "len", "len", "networks.VANCADecoder", "networks.VANDecoder", "networks.ResnetEncoder", "kitti_trainer.Trainer.models[].parameters", "networks.PoseDecoder", "networks.VANEncoder", "networks.PoseCNN", "len"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.readlines", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.readlines", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.save_opts", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.load_model"], ["    ", "def", "__init__", "(", "self", ",", "options", ")", ":", "\n", "        ", "self", ".", "opt", "=", "options", "\n", "self", ".", "log_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "log_dir", ",", "self", ".", "opt", ".", "model_name", ")", "\n", "\n", "if", "self", ".", "opt", ".", "set_seed", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "self", ".", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "self", ".", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "opt", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "opt", ".", "seed", ")", "\n", "random", ".", "seed", "(", "self", ".", "opt", ".", "seed", ")", "\n", "#torch.backends.cudnn.deterministic = True", "\n", "#torch.backends.cudnn.benchmark = False", "\n", "\n", "# checking height and width are multiples of 32", "\n", "", "assert", "self", ".", "opt", ".", "height", "%", "32", "==", "0", ",", "\"'height' must be a multiple of 32\"", "\n", "assert", "self", ".", "opt", ".", "width", "%", "32", "==", "0", ",", "\"'width' must be a multiple of 32\"", "\n", "\n", "self", ".", "models", "=", "{", "}", "\n", "self", ".", "parameters_to_train", "=", "[", "]", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", "if", "self", ".", "opt", ".", "no_cuda", "else", "\"cuda\"", ")", "\n", "\n", "self", ".", "num_scales", "=", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "self", ".", "num_input_frames", "=", "len", "(", "self", ".", "opt", ".", "frame_ids", ")", "\n", "self", ".", "num_pose_frames", "=", "2", "if", "self", ".", "opt", ".", "pose_model_input", "==", "\"pairs\"", "else", "self", ".", "num_input_frames", "\n", "\n", "assert", "self", ".", "opt", ".", "frame_ids", "[", "0", "]", "==", "0", ",", "\"frame_ids must start with 0\"", "\n", "\n", "self", ".", "use_pose_net", "=", "not", "(", "self", ".", "opt", ".", "use_stereo", "and", "self", ".", "opt", ".", "frame_ids", "==", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "opt", ".", "use_stereo", ":", "\n", "            ", "self", ".", "opt", ".", "frame_ids", ".", "append", "(", "\"s\"", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "encoder", "==", "\"resnet\"", ":", "\n", "            ", "self", ".", "models", "[", "\"encoder\"", "]", "=", "networks", ".", "ResnetEncoder", "(", "\n", "self", ".", "opt", ".", "num_layers", ",", "self", ".", "opt", ".", "weights_init", "==", "\"pretrained\"", ")", "\n", "", "elif", "self", ".", "opt", ".", "encoder", "==", "\"van\"", ":", "\n", "            ", "self", ".", "models", "[", "\"encoder\"", "]", "=", "networks", ".", "VANEncoder", "(", "\n", "self", ".", "opt", ".", "size_encoder", ",", "self", ".", "opt", ".", "weights_init", "==", "\"pretrained\"", ")", "\n", "\n", "", "self", ".", "models", "[", "\"encoder\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "parameters_to_train", "+=", "list", "(", "self", ".", "models", "[", "\"encoder\"", "]", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "self", ".", "opt", ".", "encoder", "==", "\"resnet\"", ":", "\n", "            ", "self", ".", "models", "[", "\"depth\"", "]", "=", "networks", ".", "DepthDecoder", "(", "\n", "self", ".", "models", "[", "\"encoder\"", "]", ".", "num_ch_enc", ",", "self", ".", "opt", ".", "scales", ")", "\n", "", "elif", "self", ".", "opt", ".", "encoder", "==", "\"van\"", ":", "\n", "            ", "if", "self", ".", "opt", ".", "use_channel_attention", ":", "\n", "                ", "self", ".", "models", "[", "\"depth\"", "]", "=", "networks", ".", "VANCADecoder", "(", "\n", "self", ".", "models", "[", "\"encoder\"", "]", ".", "num_ch_enc", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "models", "[", "\"depth\"", "]", "=", "networks", ".", "VANDecoder", "(", "\n", "self", ".", "models", "[", "\"encoder\"", "]", ".", "num_ch_enc", ")", "\n", "", "", "self", ".", "models", "[", "\"depth\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "parameters_to_train", "+=", "list", "(", "self", ".", "models", "[", "\"depth\"", "]", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "self", ".", "use_pose_net", ":", "\n", "            ", "if", "self", ".", "opt", ".", "pose_model_type", "==", "\"separate_resnet\"", ":", "\n", "                ", "if", "self", ".", "opt", ".", "pose_encoder", "==", "\"resnet\"", ":", "\n", "                    ", "self", ".", "models", "[", "\"pose_encoder\"", "]", "=", "networks", ".", "ResnetEncoder", "(", "\n", "self", ".", "opt", ".", "num_layers", ",", "\n", "self", ".", "opt", ".", "weights_init", "==", "\"pretrained\"", ",", "\n", "num_input_images", "=", "self", ".", "num_pose_frames", ")", "\n", "", "elif", "self", ".", "opt", ".", "pose_encoder", "==", "\"van\"", ":", "\n", "                    ", "self", ".", "models", "[", "\"pose_encoder\"", "]", "=", "networks", ".", "VANEncoder", "(", "\n", "self", ".", "opt", ".", "size_pose_encoder", ",", "\n", "self", ".", "opt", ".", "weights_init", "==", "\"pretrained\"", ",", "\n", "num_input_images", "=", "self", ".", "num_pose_frames", ")", "\n", "\n", "", "self", ".", "models", "[", "\"pose_encoder\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "parameters_to_train", "+=", "list", "(", "self", ".", "models", "[", "\"pose_encoder\"", "]", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "models", "[", "\"pose\"", "]", "=", "networks", ".", "PoseDecoder", "(", "\n", "self", ".", "models", "[", "\"pose_encoder\"", "]", ".", "num_ch_enc", ",", "\n", "num_input_features", "=", "1", ",", "\n", "num_frames_to_predict_for", "=", "2", ")", "\n", "\n", "", "elif", "self", ".", "opt", ".", "pose_model_type", "==", "\"shared\"", ":", "\n", "                ", "self", ".", "models", "[", "\"pose\"", "]", "=", "networks", ".", "PoseDecoder", "(", "\n", "self", ".", "models", "[", "\"encoder\"", "]", ".", "num_ch_enc", ",", "self", ".", "num_pose_frames", ")", "\n", "\n", "", "elif", "self", ".", "opt", ".", "pose_model_type", "==", "\"posecnn\"", ":", "\n", "                ", "self", ".", "models", "[", "\"pose\"", "]", "=", "networks", ".", "PoseCNN", "(", "\n", "self", ".", "num_input_frames", "if", "self", ".", "opt", ".", "pose_model_input", "==", "\"all\"", "else", "2", ")", "\n", "\n", "", "self", ".", "models", "[", "\"pose\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "parameters_to_train", "+=", "list", "(", "self", ".", "models", "[", "\"pose\"", "]", ".", "parameters", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "predictive_mask", ":", "\n", "            ", "assert", "self", ".", "opt", ".", "disable_automasking", ",", "\"When using predictive_mask, please disable automasking with --disable_automasking\"", "\n", "\n", "# Our implementation of the predictive masking baseline has the the same architecture", "\n", "# as our depth decoder. We predict a separate mask for each source frame.", "\n", "self", ".", "models", "[", "\"predictive_mask\"", "]", "=", "networks", ".", "DepthDecoder", "(", "\n", "self", ".", "models", "[", "\"encoder\"", "]", ".", "num_ch_enc", ",", "self", ".", "opt", ".", "scales", ",", "\n", "num_output_channels", "=", "(", "len", "(", "self", ".", "opt", ".", "frame_ids", ")", "-", "1", ")", ")", "\n", "self", ".", "models", "[", "\"predictive_mask\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "parameters_to_train", "+=", "list", "(", "self", ".", "models", "[", "\"predictive_mask\"", "]", ".", "parameters", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "optimizer", "==", "'adam'", ":", "\n", "            ", "self", ".", "model_optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "parameters_to_train", ",", "self", ".", "opt", ".", "learning_rate", ")", "\n", "", "elif", "self", ".", "opt", ".", "optimizer", "==", "'adamw'", ":", "\n", "            ", "self", ".", "model_optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "parameters_to_train", ",", "self", ".", "opt", ".", "learning_rate", ",", "\n", "weight_decay", "=", "self", ".", "opt", ".", "wd", ")", "\n", "", "self", ".", "model_lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "self", ".", "model_optimizer", ",", "self", ".", "opt", ".", "scheduler_step_size", ",", "self", ".", "opt", ".", "gamma", ")", "\n", "\n", "if", "self", ".", "opt", ".", "load_weights_folder", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_model", "(", ")", "\n", "\n", "", "print", "(", "\"Training model named:\\n  \"", ",", "self", ".", "opt", ".", "model_name", ")", "\n", "print", "(", "\"Models and tensorboard events files are saved to:\\n  \"", ",", "self", ".", "opt", ".", "log_dir", ")", "\n", "print", "(", "\"Training is using:\\n  \"", ",", "self", ".", "device", ")", "\n", "\n", "# data", "\n", "datasets_dict", "=", "{", "\"kitti\"", ":", "datasets", ".", "KITTIRAWDataset", ",", "\n", "\"kitti_odom\"", ":", "datasets", ".", "KITTIOdomDataset", "}", "\n", "self", ".", "dataset", "=", "datasets_dict", "[", "self", ".", "opt", ".", "dataset", "]", "\n", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"splits\"", ",", "self", ".", "opt", ".", "split", ",", "\"{}_files.txt\"", ")", "\n", "\n", "train_filenames", "=", "readlines", "(", "fpath", ".", "format", "(", "\"train\"", ")", ")", "\n", "val_filenames", "=", "readlines", "(", "fpath", ".", "format", "(", "\"val\"", ")", ")", "\n", "img_ext", "=", "'.png'", "if", "self", ".", "opt", ".", "png", "else", "'.jpg'", "\n", "\n", "num_train_samples", "=", "len", "(", "train_filenames", ")", "\n", "self", ".", "num_total_steps", "=", "num_train_samples", "//", "self", ".", "opt", ".", "batch_size", "*", "self", ".", "opt", ".", "num_epochs", "\n", "\n", "train_dataset", "=", "self", ".", "dataset", "(", "\n", "self", ".", "opt", ".", "data_path", ",", "train_filenames", ",", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ",", "\n", "self", ".", "opt", ".", "frame_ids", ",", "self", ".", "opt", ".", "scales", ",", "is_train", "=", "True", ",", "img_ext", "=", "img_ext", ")", "\n", "self", ".", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "self", ".", "opt", ".", "batch_size", ",", "True", ",", "\n", "num_workers", "=", "self", ".", "opt", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "val_dataset", "=", "self", ".", "dataset", "(", "\n", "self", ".", "opt", ".", "data_path", ",", "val_filenames", ",", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ",", "\n", "self", ".", "opt", ".", "frame_ids", ",", "self", ".", "opt", ".", "scales", ",", "is_train", "=", "False", ",", "img_ext", "=", "img_ext", ")", "\n", "self", ".", "val_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "self", ".", "opt", ".", "batch_size", ",", "True", ",", "\n", "num_workers", "=", "self", ".", "opt", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "self", ".", "val_iter", "=", "iter", "(", "self", ".", "val_loader", ")", "\n", "\n", "self", ".", "writers", "=", "{", "}", "\n", "for", "mode", "in", "[", "\"train\"", ",", "\"val\"", "]", ":", "\n", "            ", "self", ".", "writers", "[", "mode", "]", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "mode", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "opt", ".", "no_ssim", ":", "\n", "            ", "self", ".", "ssim", "=", "SSIM", "(", ")", "\n", "self", ".", "ssim", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "self", ".", "backproject_depth", "=", "{", "}", "\n", "self", ".", "project_3d", "=", "{", "}", "\n", "for", "scale", "in", "self", ".", "opt", ".", "scales", ":", "\n", "            ", "h", "=", "self", ".", "opt", ".", "height", "//", "(", "2", "**", "scale", ")", "\n", "w", "=", "self", ".", "opt", ".", "width", "//", "(", "2", "**", "scale", ")", "\n", "\n", "self", ".", "backproject_depth", "[", "scale", "]", "=", "BackprojectDepth", "(", "self", ".", "opt", ".", "batch_size", ",", "h", ",", "w", ")", "\n", "self", ".", "backproject_depth", "[", "scale", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "project_3d", "[", "scale", "]", "=", "Project3D", "(", "self", ".", "opt", ".", "batch_size", ",", "h", ",", "w", ")", "\n", "self", ".", "project_3d", "[", "scale", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "self", ".", "depth_metric_names", "=", "[", "\n", "\"de/abs_rel\"", ",", "\"de/sq_rel\"", ",", "\"de/rms\"", ",", "\"de/log_rms\"", ",", "\"da/a1\"", ",", "\"da/a2\"", ",", "\"da/a3\"", "]", "\n", "\n", "print", "(", "\"Using split:\\n  \"", ",", "self", ".", "opt", ".", "split", ")", "\n", "print", "(", "\"There are {:d} training items and {:d} validation items\\n\"", ".", "format", "(", "\n", "len", "(", "train_dataset", ")", ",", "len", "(", "val_dataset", ")", ")", ")", "\n", "\n", "self", ".", "save_opts", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.set_train": [[196, 201], ["kitti_trainer.Trainer.models.values", "m.train"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.train"], ["", "def", "set_train", "(", "self", ")", ":", "\n", "        ", "\"\"\"Convert all models to training mode\n        \"\"\"", "\n", "for", "m", "in", "self", ".", "models", ".", "values", "(", ")", ":", "\n", "            ", "m", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.set_eval": [[202, 207], ["kitti_trainer.Trainer.models.values", "m.eval"], "methods", ["None"], ["", "", "def", "set_eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"Convert all models to testing/evaluation mode\n        \"\"\"", "\n", "for", "m", "in", "self", ".", "models", ".", "values", "(", ")", ":", "\n", "            ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.train": [[208, 218], ["time.time", "range", "kitti_trainer.Trainer.run_epoch", "kitti_trainer.Trainer.save_model"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.run_epoch", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.save_model"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run the entire training pipeline\n        \"\"\"", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "self", ".", "epoch", "in", "range", "(", "self", ".", "opt", ".", "num_epochs", ")", ":", "\n", "            ", "self", ".", "run_epoch", "(", ")", "\n", "if", "(", "self", ".", "epoch", "+", "1", ")", "%", "self", ".", "opt", ".", "save_frequency", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.run_epoch": [[219, 256], ["print", "kitti_trainer.Trainer.set_train", "enumerate", "kitti_trainer.Trainer.model_lr_scheduler.step", "time.time", "kitti_trainer.Trainer.process_batch", "kitti_trainer.Trainer.model_optimizer.zero_grad", "losses[].backward", "kitti_trainer.Trainer.model_optimizer.step", "time.time", "kitti_trainer.Trainer.log_time", "kitti_trainer.Trainer.log", "kitti_trainer.Trainer.val", "kitti_trainer.Trainer.compute_depth_losses", "losses[].cpu"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.set_train", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.process_batch", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log_time", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.val", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.compute_depth_losses"], ["", "", "", "def", "run_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run a single epoch of training and validation\n        \"\"\"", "\n", "#self.model_lr_scheduler.step()", "\n", "\n", "print", "(", "\"Training\"", ")", "\n", "self", ".", "set_train", "(", ")", "\n", "\n", "for", "batch_idx", ",", "inputs", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "\n", "            ", "before_op_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "outputs", ",", "losses", "=", "self", ".", "process_batch", "(", "inputs", ")", "\n", "\n", "self", ".", "model_optimizer", ".", "zero_grad", "(", ")", "\n", "losses", "[", "\"loss\"", "]", ".", "backward", "(", ")", "\n", "self", ".", "model_optimizer", ".", "step", "(", ")", "\n", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "before_op_time", "\n", "\n", "# log less frequently after the first 2000 steps to save time & disk space", "\n", "early_phase", "=", "batch_idx", "%", "self", ".", "opt", ".", "log_frequency", "==", "0", "and", "self", ".", "step", "<", "2000", "\n", "late_phase", "=", "self", ".", "step", "%", "2000", "==", "0", "\n", "\n", "if", "early_phase", "or", "late_phase", ":", "\n", "                ", "self", ".", "log_time", "(", "batch_idx", ",", "duration", ",", "losses", "[", "\"loss\"", "]", ".", "cpu", "(", ")", ".", "data", ")", "\n", "\n", "if", "\"depth_gt\"", "in", "inputs", ":", "\n", "                    ", "self", ".", "compute_depth_losses", "(", "inputs", ",", "outputs", ",", "losses", ")", "\n", "\n", "", "self", ".", "log", "(", "\"train\"", ",", "inputs", ",", "outputs", ",", "losses", ")", "\n", "self", ".", "val", "(", ")", "\n", "\n", "", "self", ".", "step", "+=", "1", "\n", "\n", "\n", "", "self", ".", "model_lr_scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.process_batch": [[257, 290], ["inputs.items", "kitti_trainer.Trainer.generate_images_pred", "kitti_trainer.Trainer.compute_losses", "ipt.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "outputs.update", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "kitti_trainer.Trainer.predict_poses"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.generate_images_pred", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.compute_losses", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.predict_poses"], ["", "def", "process_batch", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Pass a minibatch through the network and generate images and losses\n        \"\"\"", "\n", "for", "key", ",", "ipt", "in", "inputs", ".", "items", "(", ")", ":", "\n", "            ", "inputs", "[", "key", "]", "=", "ipt", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "pose_model_type", "==", "\"shared\"", ":", "\n", "# If we are using a shared encoder for both depth and pose (as advocated", "\n", "# in monodepthv1), then all images are fed separately through the depth encoder.", "\n", "            ", "all_color_aug", "=", "torch", ".", "cat", "(", "[", "inputs", "[", "(", "\"color_aug\"", ",", "i", ",", "0", ")", "]", "for", "i", "in", "self", ".", "opt", ".", "frame_ids", "]", ")", "\n", "all_features", "=", "self", ".", "models", "[", "\"encoder\"", "]", "(", "all_color_aug", ")", "\n", "all_features", "=", "[", "torch", ".", "split", "(", "f", ",", "self", ".", "opt", ".", "batch_size", ")", "for", "f", "in", "all_features", "]", "\n", "\n", "features", "=", "{", "}", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "opt", ".", "frame_ids", ")", ":", "\n", "                ", "features", "[", "k", "]", "=", "[", "f", "[", "i", "]", "for", "f", "in", "all_features", "]", "\n", "\n", "", "outputs", "=", "self", ".", "models", "[", "\"depth\"", "]", "(", "features", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "# Otherwise, we only feed the image with frame_id 0 through the depth encoder", "\n", "            ", "features", "=", "self", ".", "models", "[", "\"encoder\"", "]", "(", "inputs", "[", "\"color_aug\"", ",", "0", ",", "0", "]", ")", "\n", "outputs", "=", "self", ".", "models", "[", "\"depth\"", "]", "(", "features", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "predictive_mask", ":", "\n", "            ", "outputs", "[", "\"predictive_mask\"", "]", "=", "self", ".", "models", "[", "\"predictive_mask\"", "]", "(", "features", ")", "\n", "\n", "", "if", "self", ".", "use_pose_net", ":", "\n", "            ", "outputs", ".", "update", "(", "self", ".", "predict_poses", "(", "inputs", ",", "features", ")", ")", "\n", "\n", "", "self", ".", "generate_images_pred", "(", "inputs", ",", "outputs", ")", "\n", "losses", "=", "self", ".", "compute_losses", "(", "inputs", ",", "outputs", ")", "\n", "\n", "return", "outputs", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.predict_poses": [[291, 348], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.transformation_from_parameters", "layers.transformation_from_parameters", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.transformation_from_parameters", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.transformation_from_parameters"], ["", "def", "predict_poses", "(", "self", ",", "inputs", ",", "features", ")", ":", "\n", "        ", "\"\"\"Predict poses between input frames for monocular sequences.\n        \"\"\"", "\n", "outputs", "=", "{", "}", "\n", "if", "self", ".", "num_pose_frames", "==", "2", ":", "\n", "# In this setting, we compute the pose to each source frame via a", "\n", "# separate forward pass through the pose network.", "\n", "\n", "# select what features the pose network takes as input", "\n", "            ", "if", "self", ".", "opt", ".", "pose_model_type", "==", "\"shared\"", ":", "\n", "                ", "pose_feats", "=", "{", "f_i", ":", "features", "[", "f_i", "]", "for", "f_i", "in", "self", ".", "opt", ".", "frame_ids", "}", "\n", "", "else", ":", "\n", "                ", "pose_feats", "=", "{", "f_i", ":", "inputs", "[", "\"color_aug\"", ",", "f_i", ",", "0", "]", "for", "f_i", "in", "self", ".", "opt", ".", "frame_ids", "}", "\n", "\n", "", "for", "f_i", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                ", "if", "f_i", "!=", "\"s\"", ":", "\n", "# To maintain ordering we always pass frames in temporal order", "\n", "                    ", "if", "f_i", "<", "0", ":", "\n", "                        ", "pose_inputs", "=", "[", "pose_feats", "[", "f_i", "]", ",", "pose_feats", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                        ", "pose_inputs", "=", "[", "pose_feats", "[", "0", "]", ",", "pose_feats", "[", "f_i", "]", "]", "\n", "\n", "", "if", "self", ".", "opt", ".", "pose_model_type", "==", "\"separate_resnet\"", ":", "\n", "                        ", "pose_inputs", "=", "[", "self", ".", "models", "[", "\"pose_encoder\"", "]", "(", "torch", ".", "cat", "(", "pose_inputs", ",", "1", ")", ")", "]", "\n", "", "elif", "self", ".", "opt", ".", "pose_model_type", "==", "\"posecnn\"", ":", "\n", "                        ", "pose_inputs", "=", "torch", ".", "cat", "(", "pose_inputs", ",", "1", ")", "\n", "\n", "", "axisangle", ",", "translation", "=", "self", ".", "models", "[", "\"pose\"", "]", "(", "pose_inputs", ")", "\n", "outputs", "[", "(", "\"axisangle\"", ",", "0", ",", "f_i", ")", "]", "=", "axisangle", "\n", "outputs", "[", "(", "\"translation\"", ",", "0", ",", "f_i", ")", "]", "=", "translation", "\n", "\n", "# Invert the matrix if the frame id is negative", "\n", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "f_i", ")", "]", "=", "transformation_from_parameters", "(", "\n", "axisangle", "[", ":", ",", "0", "]", ",", "translation", "[", ":", ",", "0", "]", ",", "invert", "=", "(", "f_i", "<", "0", ")", ")", "\n", "\n", "", "", "", "else", ":", "\n", "# Here we input all frames to the pose net (and predict all poses) together", "\n", "            ", "if", "self", ".", "opt", ".", "pose_model_type", "in", "[", "\"separate_resnet\"", ",", "\"posecnn\"", "]", ":", "\n", "                ", "pose_inputs", "=", "torch", ".", "cat", "(", "\n", "[", "inputs", "[", "(", "\"color_aug\"", ",", "i", ",", "0", ")", "]", "for", "i", "in", "self", ".", "opt", ".", "frame_ids", "if", "i", "!=", "\"s\"", "]", ",", "1", ")", "\n", "\n", "if", "self", ".", "opt", ".", "pose_model_type", "==", "\"separate_resnet\"", ":", "\n", "                    ", "pose_inputs", "=", "[", "self", ".", "models", "[", "\"pose_encoder\"", "]", "(", "pose_inputs", ")", "]", "\n", "\n", "", "", "elif", "self", ".", "opt", ".", "pose_model_type", "==", "\"shared\"", ":", "\n", "                ", "pose_inputs", "=", "[", "features", "[", "i", "]", "for", "i", "in", "self", ".", "opt", ".", "frame_ids", "if", "i", "!=", "\"s\"", "]", "\n", "\n", "", "axisangle", ",", "translation", "=", "self", ".", "models", "[", "\"pose\"", "]", "(", "pose_inputs", ")", "\n", "\n", "for", "i", ",", "f_i", "in", "enumerate", "(", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ")", ":", "\n", "                ", "if", "f_i", "!=", "\"s\"", ":", "\n", "                    ", "outputs", "[", "(", "\"axisangle\"", ",", "0", ",", "f_i", ")", "]", "=", "axisangle", "\n", "outputs", "[", "(", "\"translation\"", ",", "0", ",", "f_i", ")", "]", "=", "translation", "\n", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "f_i", ")", "]", "=", "transformation_from_parameters", "(", "\n", "axisangle", "[", ":", ",", "i", "]", ",", "translation", "[", ":", ",", "i", "]", ")", "\n", "\n", "", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.val": [[349, 369], ["kitti_trainer.Trainer.set_eval", "kitti_trainer.Trainer.set_train", "kitti_trainer.Trainer.val_iter.next", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "kitti_trainer.Trainer.process_batch", "kitti_trainer.Trainer.log", "iter", "kitti_trainer.Trainer.val_iter.next", "kitti_trainer.Trainer.compute_depth_losses"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.set_eval", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.set_train", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.process_batch", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.compute_depth_losses"], ["", "def", "val", "(", "self", ")", ":", "\n", "        ", "\"\"\"Validate the model on a single minibatch\n        \"\"\"", "\n", "self", ".", "set_eval", "(", ")", "\n", "try", ":", "\n", "            ", "inputs", "=", "self", ".", "val_iter", ".", "next", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "val_iter", "=", "iter", "(", "self", ".", "val_loader", ")", "\n", "inputs", "=", "self", ".", "val_iter", ".", "next", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", ",", "losses", "=", "self", ".", "process_batch", "(", "inputs", ")", "\n", "\n", "if", "\"depth_gt\"", "in", "inputs", ":", "\n", "                ", "self", ".", "compute_depth_losses", "(", "inputs", ",", "outputs", ",", "losses", ")", "\n", "\n", "", "self", ".", "log", "(", "\"val\"", ",", "inputs", ",", "outputs", ",", "losses", ")", "\n", "del", "inputs", ",", "outputs", ",", "losses", "\n", "\n", "", "self", ".", "set_train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.generate_images_pred": [[370, 422], ["layers.disp_to_depth", "enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "inv_depth.mean().mean", "layers.transformation_from_parameters", "inv_depth.mean"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.disp_to_depth", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.transformation_from_parameters"], ["", "def", "generate_images_pred", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Generate the warped (reprojected) color images for a minibatch.\n        Generated images are saved into the `outputs` dictionary.\n        \"\"\"", "\n", "for", "scale", "in", "self", ".", "opt", ".", "scales", ":", "\n", "            ", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "scale", ")", "]", "\n", "if", "self", ".", "opt", ".", "v1_multiscale", ":", "\n", "                ", "source_scale", "=", "scale", "\n", "", "else", ":", "\n", "                ", "disp", "=", "F", ".", "interpolate", "(", "\n", "disp", ",", "[", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "source_scale", "=", "0", "\n", "\n", "", "_", ",", "depth", "=", "disp_to_depth", "(", "disp", ",", "self", ".", "opt", ".", "min_depth", ",", "self", ".", "opt", ".", "max_depth", ")", "\n", "\n", "outputs", "[", "(", "\"depth\"", ",", "0", ",", "scale", ")", "]", "=", "depth", "\n", "\n", "for", "i", ",", "frame_id", "in", "enumerate", "(", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ")", ":", "\n", "\n", "                ", "if", "frame_id", "==", "\"s\"", ":", "\n", "                    ", "T", "=", "inputs", "[", "\"stereo_T\"", "]", "\n", "", "else", ":", "\n", "                    ", "T", "=", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "frame_id", ")", "]", "\n", "\n", "# from the authors of https://arxiv.org/abs/1712.00175", "\n", "", "if", "self", ".", "opt", ".", "pose_model_type", "==", "\"posecnn\"", ":", "\n", "\n", "                    ", "axisangle", "=", "outputs", "[", "(", "\"axisangle\"", ",", "0", ",", "frame_id", ")", "]", "\n", "translation", "=", "outputs", "[", "(", "\"translation\"", ",", "0", ",", "frame_id", ")", "]", "\n", "\n", "inv_depth", "=", "1", "/", "depth", "\n", "mean_inv_depth", "=", "inv_depth", ".", "mean", "(", "3", ",", "True", ")", ".", "mean", "(", "2", ",", "True", ")", "\n", "\n", "T", "=", "transformation_from_parameters", "(", "\n", "axisangle", "[", ":", ",", "0", "]", ",", "translation", "[", ":", ",", "0", "]", "*", "mean_inv_depth", "[", ":", ",", "0", "]", ",", "frame_id", "<", "0", ")", "\n", "\n", "", "cam_points", "=", "self", ".", "backproject_depth", "[", "source_scale", "]", "(", "\n", "depth", ",", "inputs", "[", "(", "\"inv_K\"", ",", "source_scale", ")", "]", ")", "\n", "pix_coords", "=", "self", ".", "project_3d", "[", "source_scale", "]", "(", "\n", "cam_points", ",", "inputs", "[", "(", "\"K\"", ",", "source_scale", ")", "]", ",", "T", ")", "\n", "\n", "outputs", "[", "(", "\"sample\"", ",", "frame_id", ",", "scale", ")", "]", "=", "pix_coords", "\n", "\n", "outputs", "[", "(", "\"color\"", ",", "frame_id", ",", "scale", ")", "]", "=", "F", ".", "grid_sample", "(", "\n", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "source_scale", ")", "]", ",", "\n", "outputs", "[", "(", "\"sample\"", ",", "frame_id", ",", "scale", ")", "]", ",", "\n", "padding_mode", "=", "\"border\"", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "if", "not", "self", ".", "opt", ".", "disable_automasking", ":", "\n", "                    ", "outputs", "[", "(", "\"color_identity\"", ",", "frame_id", ",", "scale", ")", "]", "=", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "source_scale", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.compute_reprojection_loss": [[423, 436], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs.mean", "torch.abs.mean", "torch.abs.mean", "kitti_trainer.Trainer.ssim().mean", "kitti_trainer.Trainer.ssim"], "methods", ["None"], ["", "", "", "", "def", "compute_reprojection_loss", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "\"\"\"Computes reprojection loss between a batch of predicted and target images\n        \"\"\"", "\n", "abs_diff", "=", "torch", ".", "abs", "(", "target", "-", "pred", ")", "\n", "l1_loss", "=", "abs_diff", ".", "mean", "(", "1", ",", "True", ")", "\n", "\n", "if", "self", ".", "opt", ".", "no_ssim", ":", "\n", "            ", "reprojection_loss", "=", "l1_loss", "\n", "", "else", ":", "\n", "            ", "ssim_loss", "=", "self", ".", "ssim", "(", "pred", ",", "target", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "reprojection_loss", "=", "0.85", "*", "ssim_loss", "+", "0.15", "*", "l1_loss", "\n", "\n", "", "return", "reprojection_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.compute_losses": [[437, 527], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "to_optimise.mean", "disp.mean().mean", "layers.get_smooth_loss", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean", "torch.cat.mean", "torch.cat.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "kitti_trainer.Trainer.compute_reprojection_loss", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.mean", "torch.cat.mean", "torch.cat.mean", "weighting_loss.mean", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "disp.mean", "kitti_trainer.Trainer.compute_reprojection_loss", "torch.interpolate", "torch.interpolate", "torch.interpolate", "nn.BCELoss", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.get_smooth_loss", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.compute_reprojection_loss", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.compute_reprojection_loss"], ["", "def", "compute_losses", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Compute the reprojection and smoothness losses for a minibatch\n        \"\"\"", "\n", "losses", "=", "{", "}", "\n", "total_loss", "=", "0", "\n", "\n", "for", "scale", "in", "self", ".", "opt", ".", "scales", ":", "\n", "            ", "loss", "=", "0", "\n", "reprojection_losses", "=", "[", "]", "\n", "\n", "if", "self", ".", "opt", ".", "v1_multiscale", ":", "\n", "                ", "source_scale", "=", "scale", "\n", "", "else", ":", "\n", "                ", "source_scale", "=", "0", "\n", "\n", "", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "scale", ")", "]", "\n", "color", "=", "inputs", "[", "(", "\"color\"", ",", "0", ",", "scale", ")", "]", "\n", "target", "=", "inputs", "[", "(", "\"color\"", ",", "0", ",", "source_scale", ")", "]", "\n", "\n", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                ", "pred", "=", "outputs", "[", "(", "\"color\"", ",", "frame_id", ",", "scale", ")", "]", "\n", "reprojection_losses", ".", "append", "(", "self", ".", "compute_reprojection_loss", "(", "pred", ",", "target", ")", ")", "\n", "\n", "", "reprojection_losses", "=", "torch", ".", "cat", "(", "reprojection_losses", ",", "1", ")", "\n", "\n", "if", "not", "self", ".", "opt", ".", "disable_automasking", ":", "\n", "                ", "identity_reprojection_losses", "=", "[", "]", "\n", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                    ", "pred", "=", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "source_scale", ")", "]", "\n", "identity_reprojection_losses", ".", "append", "(", "\n", "self", ".", "compute_reprojection_loss", "(", "pred", ",", "target", ")", ")", "\n", "\n", "", "identity_reprojection_losses", "=", "torch", ".", "cat", "(", "identity_reprojection_losses", ",", "1", ")", "\n", "\n", "if", "self", ".", "opt", ".", "avg_reprojection", ":", "\n", "                    ", "identity_reprojection_loss", "=", "identity_reprojection_losses", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "# save both images, and do min all at once below", "\n", "                    ", "identity_reprojection_loss", "=", "identity_reprojection_losses", "\n", "\n", "", "", "elif", "self", ".", "opt", ".", "predictive_mask", ":", "\n", "# use the predicted mask", "\n", "                ", "mask", "=", "outputs", "[", "\"predictive_mask\"", "]", "[", "\"disp\"", ",", "scale", "]", "\n", "if", "not", "self", ".", "opt", ".", "v1_multiscale", ":", "\n", "                    ", "mask", "=", "F", ".", "interpolate", "(", "\n", "mask", ",", "[", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "\n", "", "reprojection_losses", "*=", "mask", "\n", "\n", "# add a loss pushing mask to 1 (using nn.BCELoss for stability)", "\n", "weighting_loss", "=", "0.2", "*", "nn", ".", "BCELoss", "(", ")", "(", "mask", ",", "torch", ".", "ones", "(", "mask", ".", "shape", ")", ".", "cuda", "(", ")", ")", "\n", "loss", "+=", "weighting_loss", ".", "mean", "(", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "avg_reprojection", ":", "\n", "                ", "reprojection_loss", "=", "reprojection_losses", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "reprojection_loss", "=", "reprojection_losses", "\n", "\n", "", "if", "not", "self", ".", "opt", ".", "disable_automasking", ":", "\n", "# add random numbers to break ties", "\n", "                ", "identity_reprojection_loss", "+=", "torch", ".", "randn", "(", "\n", "identity_reprojection_loss", ".", "shape", ",", "device", "=", "self", ".", "device", ")", "*", "0.00001", "\n", "\n", "combined", "=", "torch", ".", "cat", "(", "(", "identity_reprojection_loss", ",", "reprojection_loss", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "combined", "=", "reprojection_loss", "\n", "\n", "", "if", "combined", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                ", "to_optimise", "=", "combined", "\n", "", "else", ":", "\n", "                ", "to_optimise", ",", "idxs", "=", "torch", ".", "min", "(", "combined", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "not", "self", ".", "opt", ".", "disable_automasking", ":", "\n", "                ", "outputs", "[", "\"identity_selection/{}\"", ".", "format", "(", "scale", ")", "]", "=", "(", "\n", "idxs", ">", "identity_reprojection_loss", ".", "shape", "[", "1", "]", "-", "1", ")", ".", "float", "(", ")", "\n", "\n", "", "loss", "+=", "to_optimise", ".", "mean", "(", ")", "\n", "\n", "mean_disp", "=", "disp", ".", "mean", "(", "2", ",", "True", ")", ".", "mean", "(", "3", ",", "True", ")", "\n", "norm_disp", "=", "disp", "/", "(", "mean_disp", "+", "1e-7", ")", "\n", "smooth_loss", "=", "get_smooth_loss", "(", "norm_disp", ",", "color", ")", "\n", "\n", "loss", "+=", "self", ".", "opt", ".", "disparity_smoothness", "*", "smooth_loss", "/", "(", "2", "**", "scale", ")", "\n", "total_loss", "+=", "loss", "\n", "losses", "[", "\"loss/{}\"", ".", "format", "(", "scale", ")", "]", "=", "loss", "\n", "\n", "", "total_loss", "/=", "self", ".", "num_scales", "\n", "losses", "[", "\"loss\"", "]", "=", "total_loss", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.compute_depth_losses": [[528, 557], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.detach", "torch.clamp.detach", "torch.clamp.detach", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "layers.compute_depth_errors", "enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "numpy.array", "depth_errors[].cpu"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.compute_depth_errors"], ["", "def", "compute_depth_losses", "(", "self", ",", "inputs", ",", "outputs", ",", "losses", ")", ":", "\n", "        ", "\"\"\"Compute depth metrics, to allow monitoring during training\n\n        This isn't particularly accurate as it averages over the entire batch,\n        so is only used to give an indication of validation performance\n        \"\"\"", "\n", "depth_pred", "=", "outputs", "[", "(", "\"depth\"", ",", "0", ",", "0", ")", "]", "\n", "depth_pred", "=", "torch", ".", "clamp", "(", "F", ".", "interpolate", "(", "\n", "depth_pred", ",", "[", "375", ",", "1242", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", ",", "1e-3", ",", "80", ")", "\n", "depth_pred", "=", "depth_pred", ".", "detach", "(", ")", "\n", "\n", "depth_gt", "=", "inputs", "[", "\"depth_gt\"", "]", "\n", "mask", "=", "depth_gt", ">", "0", "\n", "\n", "# garg/eigen crop", "\n", "crop_mask", "=", "torch", ".", "zeros_like", "(", "mask", ")", "\n", "crop_mask", "[", ":", ",", ":", ",", "153", ":", "371", ",", "44", ":", "1197", "]", "=", "1", "\n", "mask", "=", "mask", "*", "crop_mask", "\n", "\n", "depth_gt", "=", "depth_gt", "[", "mask", "]", "\n", "depth_pred", "=", "depth_pred", "[", "mask", "]", "\n", "depth_pred", "*=", "torch", ".", "median", "(", "depth_gt", ")", "/", "torch", ".", "median", "(", "depth_pred", ")", "\n", "\n", "depth_pred", "=", "torch", ".", "clamp", "(", "depth_pred", ",", "min", "=", "1e-3", ",", "max", "=", "80", ")", "\n", "\n", "depth_errors", "=", "compute_depth_errors", "(", "depth_gt", ",", "depth_pred", ")", "\n", "\n", "for", "i", ",", "metric", "in", "enumerate", "(", "self", ".", "depth_metric_names", ")", ":", "\n", "            ", "losses", "[", "metric", "]", "=", "np", ".", "array", "(", "depth_errors", "[", "i", "]", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.log_time": [[558, 569], ["print", "time.time", "print_string.format", "utils.sec_to_hm_str", "utils.sec_to_hm_str"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.sec_to_hm_str", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.sec_to_hm_str"], ["", "", "def", "log_time", "(", "self", ",", "batch_idx", ",", "duration", ",", "loss", ")", ":", "\n", "        ", "\"\"\"Print a logging statement to the terminal\n        \"\"\"", "\n", "samples_per_sec", "=", "self", ".", "opt", ".", "batch_size", "/", "duration", "\n", "time_sofar", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "training_time_left", "=", "(", "\n", "self", ".", "num_total_steps", "/", "self", ".", "step", "-", "1.0", ")", "*", "time_sofar", "if", "self", ".", "step", ">", "0", "else", "0", "\n", "print_string", "=", "\"epoch {:>3} | batch {:>6} | examples/s: {:5.1f}\"", "+", "\" | loss: {:.5f} | time elapsed: {} | time left: {}\"", "\n", "print", "(", "print_string", ".", "format", "(", "self", ".", "epoch", ",", "batch_idx", ",", "samples_per_sec", ",", "loss", ",", "\n", "sec_to_hm_str", "(", "time_sofar", ")", ",", "sec_to_hm_str", "(", "training_time_left", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.log": [[570, 603], ["losses.items", "range", "writer.add_scalar", "min", "writer.add_image", "writer.add_image", "utils.normalize_image", "enumerate", "writer.add_image", "writer.add_image", "writer.add_image"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.normalize_image"], ["", "def", "log", "(", "self", ",", "mode", ",", "inputs", ",", "outputs", ",", "losses", ")", ":", "\n", "        ", "\"\"\"Write an event to the tensorboard events file\n        \"\"\"", "\n", "writer", "=", "self", ".", "writers", "[", "mode", "]", "\n", "for", "l", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "\"{}\"", ".", "format", "(", "l", ")", ",", "v", ",", "self", ".", "step", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "min", "(", "4", ",", "self", ".", "opt", ".", "batch_size", ")", ")", ":", "# write a maxmimum of four images", "\n", "            ", "for", "s", "in", "self", ".", "opt", ".", "scales", ":", "\n", "                ", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", ":", "\n", "                    ", "writer", ".", "add_image", "(", "\n", "\"color_{}_{}/{}\"", ".", "format", "(", "frame_id", ",", "s", ",", "j", ")", ",", "\n", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "s", ")", "]", "[", "j", "]", ".", "data", ",", "self", ".", "step", ")", "\n", "if", "s", "==", "0", "and", "frame_id", "!=", "0", ":", "\n", "                        ", "writer", ".", "add_image", "(", "\n", "\"color_pred_{}_{}/{}\"", ".", "format", "(", "frame_id", ",", "s", ",", "j", ")", ",", "\n", "outputs", "[", "(", "\"color\"", ",", "frame_id", ",", "s", ")", "]", "[", "j", "]", ".", "data", ",", "self", ".", "step", ")", "\n", "\n", "", "", "writer", ".", "add_image", "(", "\n", "\"disp_{}/{}\"", ".", "format", "(", "s", ",", "j", ")", ",", "\n", "normalize_image", "(", "outputs", "[", "(", "\"disp\"", ",", "s", ")", "]", "[", "j", "]", ")", ",", "self", ".", "step", ")", "\n", "\n", "if", "self", ".", "opt", ".", "predictive_mask", ":", "\n", "                    ", "for", "f_idx", ",", "frame_id", "in", "enumerate", "(", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ")", ":", "\n", "                        ", "writer", ".", "add_image", "(", "\n", "\"predictive_mask_{}_{}/{}\"", ".", "format", "(", "frame_id", ",", "s", ",", "j", ")", ",", "\n", "outputs", "[", "\"predictive_mask\"", "]", "[", "(", "\"disp\"", ",", "s", ")", "]", "[", "j", ",", "f_idx", "]", "[", "None", ",", "...", "]", ",", "\n", "self", ".", "step", ")", "\n", "\n", "", "", "elif", "not", "self", ".", "opt", ".", "disable_automasking", ":", "\n", "                    ", "writer", ".", "add_image", "(", "\n", "\"automask_{}/{}\"", ".", "format", "(", "s", ",", "j", ")", ",", "\n", "outputs", "[", "\"identity_selection/{}\"", ".", "format", "(", "s", ")", "]", "[", "j", "]", "[", "None", ",", "...", "]", ",", "self", ".", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.save_opts": [[604, 614], ["os.path.join", "kitti_trainer.Trainer.opt.__dict__.copy", "os.path.exists", "os.makedirs", "open", "json.dump", "os.path.join"], "methods", ["None"], ["", "", "", "", "def", "save_opts", "(", "self", ")", ":", "\n", "        ", "\"\"\"Save options to disk so we know what we ran this experiment with\n        \"\"\"", "\n", "models_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "\"models\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "models_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "models_dir", ")", "\n", "", "to_save", "=", "self", ".", "opt", ".", "__dict__", ".", "copy", "(", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "'opt.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "to_save", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.save_model": [[615, 634], ["os.path.join", "kitti_trainer.Trainer.models.items", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.exists", "os.makedirs", "os.path.join", "model.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "kitti_trainer.Trainer.model_optimizer.state_dict"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"Save model weights to disk\n        \"\"\"", "\n", "save_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "\"models\"", ",", "\"weights_{}\"", ".", "format", "(", "self", ".", "epoch", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_folder", ")", "\n", "\n", "", "for", "model_name", ",", "model", "in", "self", ".", "models", ".", "items", "(", ")", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "\"{}.pth\"", ".", "format", "(", "model_name", ")", ")", "\n", "to_save", "=", "model", ".", "state_dict", "(", ")", "\n", "if", "model_name", "==", "'encoder'", ":", "\n", "# save the sizes - these are needed at prediction time", "\n", "                ", "to_save", "[", "'height'", "]", "=", "self", ".", "opt", ".", "height", "\n", "to_save", "[", "'width'", "]", "=", "self", ".", "opt", ".", "width", "\n", "to_save", "[", "'use_stereo'", "]", "=", "self", ".", "opt", ".", "use_stereo", "\n", "", "torch", ".", "save", "(", "to_save", ",", "save_path", ")", "\n", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "\"{}.pth\"", ".", "format", "(", "\"adam\"", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "model_optimizer", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_trainer.Trainer.load_model": [[635, 661], ["os.path.expanduser", "os.path.isdir", "print", "os.path.join", "os.path.isfile", "print", "os.path.join", "kitti_trainer.Trainer.models[].state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "kitti_trainer.Trainer.update", "kitti_trainer.Trainer.models[].load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "kitti_trainer.Trainer.model_optimizer.load_state_dict", "print", "torch.load.items", "torch.load.items", "torch.load.items"], "methods", ["None"], ["", "def", "load_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load model(s) from disk\n        \"\"\"", "\n", "self", ".", "opt", ".", "load_weights_folder", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "opt", ".", "load_weights_folder", ")", "\n", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "self", ".", "opt", ".", "load_weights_folder", ")", ",", "\"Cannot find folder {}\"", ".", "format", "(", "self", ".", "opt", ".", "load_weights_folder", ")", "\n", "print", "(", "\"loading model from folder {}\"", ".", "format", "(", "self", ".", "opt", ".", "load_weights_folder", ")", ")", "\n", "\n", "for", "n", "in", "self", ".", "opt", ".", "models_to_load", ":", "\n", "            ", "print", "(", "\"Loading {} weights...\"", ".", "format", "(", "n", ")", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "load_weights_folder", ",", "\"{}.pth\"", ".", "format", "(", "n", ")", ")", "\n", "model_dict", "=", "self", ".", "models", "[", "n", "]", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "path", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "models", "[", "n", "]", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "# loading adam state", "\n", "", "optimizer_load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "load_weights_folder", ",", "\"adam.pth\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "optimizer_load_path", ")", ":", "\n", "            ", "print", "(", "\"Loading Adam weights\"", ")", "\n", "optimizer_dict", "=", "torch", ".", "load", "(", "optimizer_load_path", ")", "\n", "self", ".", "model_optimizer", ".", "load_state_dict", "(", "optimizer_dict", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Cannot find Adam weights so Adam is randomly initialized\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.pred_season_depth.compute_errors": [[28, 47], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "np.sqrt.mean", "np.sqrt.mean", "numpy.log", "numpy.log", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log"], ["def", "compute_errors", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Computation of error metrics between predicted and ground truth depths\n    \"\"\"", "\n", "thresh", "=", "np", ".", "maximum", "(", "(", "gt", "/", "pred", ")", ",", "(", "pred", "/", "gt", ")", ")", "\n", "a1", "=", "(", "thresh", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "rmse", "=", "(", "gt", "-", "pred", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "gt", ")", "-", "np", ".", "log", "(", "pred", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "gt", "-", "pred", ")", "/", "gt", ")", "\n", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "gt", "-", "pred", ")", "**", "2", ")", "/", "gt", ")", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.pred_season_depth.batch_post_process_disparity": [[49, 58], ["numpy.meshgrid", "numpy.linspace", "numpy.linspace", "numpy.clip"], "function", ["None"], ["", "def", "batch_post_process_disparity", "(", "l_disp", ",", "r_disp", ")", ":", "\n", "    ", "\"\"\"Apply the disparity post-processing method as introduced in Monodepthv1\n    \"\"\"", "\n", "_", ",", "h", ",", "w", "=", "l_disp", ".", "shape", "\n", "m_disp", "=", "0.5", "*", "(", "l_disp", "+", "r_disp", ")", "\n", "l", ",", "_", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "w", ")", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "h", ")", ")", "\n", "l_mask", "=", "(", "1.0", "-", "np", ".", "clip", "(", "20", "*", "(", "l", "-", "0.05", ")", ",", "0", ",", "1", ")", ")", "[", "None", ",", "...", "]", "\n", "r_mask", "=", "l_mask", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "r_mask", "*", "l_disp", "+", "l_mask", "*", "r_disp", "+", "(", "1.0", "-", "l_mask", "-", "r_mask", ")", "*", "m_disp", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.pred_season_depth.evaluate": [[60, 162], ["sum", "os.path.expanduser", "os.path.isdir", "print", "utils.readlines", "os.path.join", "os.path.join", "torch.load", "datasets.SeasonTestDataset", "torch.utils.data.DataLoader", "networks.VANEncoder.state_dict", "networks.VANEncoder.load_state_dict", "networks.VANDecoder.load_state_dict", "networks.VANEncoder.cuda", "networks.VANEncoder.eval", "networks.VANDecoder.cuda", "networks.VANDecoder.eval", "print", "print", "print", "print", "quit", "os.path.join", "networks.ResnetEncoder", "networks.DepthDecoder", "torch.load", "os.path.exists", "os.makedirs", "torch.no_grad", "tqdm.tqdm", "networks.VANEncoder", "networks.VANDecoder", "len", "data[].cuda", "networks.VANDecoder.", "layers.disp_to_depth", "[].numpy", "np.concatenate.append", "numpy.concatenate", "range", "torch.load.items", "torch.cat", "networks.VANEncoder.", "pred_season_depth.batch_post_process_disparity", "len", "cv2.resize", "numpy.clip", "numpy.uint16", "filenames[].split", "os.path.join", "cv2.imwrite", "torch.flip", "batch_post_process_disparity.cpu"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.readlines", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.disp_to_depth", "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.pred_season_depth.batch_post_process_disparity"], ["", "def", "evaluate", "(", "opt", ")", ":", "\n", "    ", "\"\"\"Evaluates a pretrained model using a specified test set\n    \"\"\"", "\n", "MIN_DEPTH", "=", "1e-3", "\n", "MAX_DEPTH", "=", "80", "\n", "\n", "assert", "sum", "(", "(", "opt", ".", "eval_mono", ",", "opt", ".", "eval_stereo", ")", ")", "==", "1", ",", "\"Please choose mono or stereo evaluation by setting either --eval_mono or --eval_stereo\"", "\n", "if", "opt", ".", "eval_mono", ":", "\n", "        ", "STEREO_SCALE_FACTOR", "=", "1.0", "\n", "", "elif", "opt", ".", "eval_stereo", ":", "\n", "        ", "STEREO_SCALE_FACTOR", "=", "5.4", "\n", "\n", "", "if", "opt", ".", "ext_disp_to_eval", "is", "None", ":", "\n", "\n", "        ", "opt", ".", "load_weights_folder", "=", "os", ".", "path", ".", "expanduser", "(", "opt", ".", "load_weights_folder", ")", "\n", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "opt", ".", "load_weights_folder", ")", ",", "\"Cannot find a folder at {}\"", ".", "format", "(", "opt", ".", "load_weights_folder", ")", "\n", "\n", "print", "(", "\"-> Loading weights from {}\"", ".", "format", "(", "opt", ".", "load_weights_folder", ")", ")", "\n", "\n", "filenames", "=", "readlines", "(", "os", ".", "path", ".", "join", "(", "splits_dir", ",", "opt", ".", "eval_split", ",", "opt", ".", "eval_set", "+", "\"_files.txt\"", ")", ")", "\n", "encoder_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "load_weights_folder", ",", "\"encoder.pth\"", ")", "\n", "decoder_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "load_weights_folder", ",", "\"depth.pth\"", ")", "\n", "\n", "encoder_dict", "=", "torch", ".", "load", "(", "encoder_path", ")", "\n", "\n", "dataset", "=", "datasets", ".", "SeasonTestDataset", "(", "opt", ".", "data_path", ",", "filenames", ",", "\n", "encoder_dict", "[", "'height'", "]", ",", "encoder_dict", "[", "'width'", "]", ",", "\n", "[", "0", "]", ",", "[", "0", "]", ",", "is_train", "=", "False", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "opt", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "opt", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "opt", ".", "encoder", "==", "\"resnet\"", ":", "\n", "            ", "encoder", "=", "networks", ".", "ResnetEncoder", "(", "opt", ".", "num_layers", ",", "False", ")", "\n", "depth_decoder", "=", "networks", ".", "DepthDecoder", "(", "encoder", ".", "num_ch_enc", ")", "\n", "", "elif", "opt", ".", "encoder", "==", "\"van\"", ":", "\n", "            ", "encoder", "=", "networks", ".", "VANEncoder", "(", "opt", ".", "size_encoder", ",", "False", ")", "\n", "depth_decoder", "=", "networks", ".", "VANDecoder", "(", "encoder", ".", "num_ch_enc", ")", "\n", "\n", "", "model_dict", "=", "encoder", ".", "state_dict", "(", ")", "\n", "encoder", ".", "load_state_dict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "encoder_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", ")", "\n", "depth_decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "decoder_path", ")", ")", "\n", "\n", "encoder", ".", "cuda", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "depth_decoder", ".", "cuda", "(", ")", "\n", "depth_decoder", ".", "eval", "(", ")", "\n", "\n", "pred_disps", "=", "[", "]", "\n", "\n", "print", "(", "\"-> Computing predictions with size {}x{}\"", ".", "format", "(", "\n", "encoder_dict", "[", "'width'", "]", ",", "encoder_dict", "[", "'height'", "]", ")", ")", "\n", "\n", "save_dir", "=", "opt", ".", "pred_depth_path", "\n", "print", "(", "\"-> Saving out season depth predictions to {}\"", ".", "format", "(", "save_dir", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "print", "(", "\"-> Generating {} depth images\"", ".", "format", "(", "len", "(", "filenames", ")", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "j", "=", "0", "\n", "for", "data", "in", "tqdm", ".", "tqdm", "(", "dataloader", ")", ":", "\n", "                ", "pred_disps", "=", "[", "]", "\n", "input_color", "=", "data", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", ".", "cuda", "(", ")", "\n", "\n", "if", "opt", ".", "post_process", ":", "\n", "# Post-processed results require each image to have two forward passes", "\n", "                    ", "input_color", "=", "torch", ".", "cat", "(", "(", "input_color", ",", "torch", ".", "flip", "(", "input_color", ",", "[", "3", "]", ")", ")", ",", "0", ")", "\n", "\n", "", "output", "=", "depth_decoder", "(", "encoder", "(", "input_color", ")", ")", "\n", "\n", "pred_disp", ",", "_", "=", "disp_to_depth", "(", "output", "[", "(", "\"disp\"", ",", "0", ")", "]", ",", "opt", ".", "min_depth", ",", "opt", ".", "max_depth", ")", "\n", "pred_disp", "=", "pred_disp", ".", "cpu", "(", ")", "[", ":", ",", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "if", "opt", ".", "post_process", ":", "\n", "                    ", "N", "=", "pred_disp", ".", "shape", "[", "0", "]", "//", "2", "\n", "pred_disp", "=", "batch_post_process_disparity", "(", "pred_disp", "[", ":", "N", "]", ",", "pred_disp", "[", "N", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "", "pred_disps", ".", "append", "(", "pred_disp", ")", "\n", "\n", "pred_disps", "=", "np", ".", "concatenate", "(", "pred_disps", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "pred_disps", ")", ")", ":", "\n", "                    ", "disp_resized", "=", "cv2", ".", "resize", "(", "pred_disps", "[", "idx", "]", ",", "(", "1024", ",", "768", ")", ")", "\n", "#disp_resized = cv2.resize(pred_disps[idx], (640, 192))", "\n", "depth", "=", "STEREO_SCALE_FACTOR", "/", "disp_resized", "\n", "depth", "=", "np", ".", "clip", "(", "depth", ",", "0", ",", "80", ")", "\n", "depth", "=", "np", ".", "uint16", "(", "depth", "*", "256", ")", "\n", "fdir", ",", "fn", "=", "filenames", "[", "j", "]", ".", "split", "(", ")", "\n", "j", "+=", "1", "\n", "#save_path = os.path.join(save_dir, fdir.split(\"/\")[0])", "\n", "#save_path = os.path.join(save_dir, fdir)", "\n", "#if not os.path.exists(save_path):", "\n", "#    os.makedirs(save_path)", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"img_\"", "+", "fn", "+", "\"us.png\"", ")", "\n", "#print(j,save_path)", "\n", "cv2", ".", "imwrite", "(", "save_path", ",", "depth", ")", "\n", "\n", "", "", "", "print", "(", "\"-> Done.\"", ")", "\n", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.__init__": [[28, 187], ["os.path.join", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "len", "len", "season_trainer.Trainer.models[].to", "list", "season_trainer.Trainer.models[].to", "list", "torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "print", "print", "print", "print", "os.path.join", "utils.readlines", "utils.readlines", "len", "datasets.SeasonTrainDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "datasets.SeasonValDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "season_trainer.Trainer.save_opts", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "season_trainer.Trainer.opt.frame_ids.append", "networks.ResnetEncoder", "season_trainer.Trainer.models[].parameters", "networks.DepthDecoder", "season_trainer.Trainer.models[].parameters", "season_trainer.Trainer.models[].to", "list", "networks.DepthDecoder", "season_trainer.Trainer.models[].to", "list", "season_trainer.Trainer.load_model", "os.path.dirname", "os.path.join.format", "os.path.join.format", "tensorboardX.SummaryWriter", "layers.SSIM", "season_trainer.Trainer.ssim.to", "layers.BackprojectDepth", "season_trainer.Trainer.backproject_depth[].to", "layers.Project3D", "season_trainer.Trainer.project_3d[].to", "networks.VANEncoder", "networks.ResnetEncoder", "season_trainer.Trainer.models[].to", "list", "networks.PoseDecoder", "season_trainer.Trainer.models[].parameters", "season_trainer.Trainer.models[].parameters", "os.path.join", "len", "len", "networks.VANCADecoder", "networks.VANDecoder", "season_trainer.Trainer.models[].parameters", "networks.PoseDecoder", "networks.PoseCNN", "len"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.readlines", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.readlines", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.save_opts", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.load_model"], ["    ", "def", "__init__", "(", "self", ",", "options", ")", ":", "\n", "        ", "self", ".", "opt", "=", "options", "\n", "self", ".", "log_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "log_dir", ",", "self", ".", "opt", ".", "model_name", ")", "\n", "\n", "if", "self", ".", "opt", ".", "set_seed", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "self", ".", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "self", ".", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "self", ".", "opt", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "opt", ".", "seed", ")", "\n", "random", ".", "seed", "(", "self", ".", "opt", ".", "seed", ")", "\n", "#torch.backends.cudnn.deterministic = True", "\n", "#torch.backends.cudnn.benchmark = False", "\n", "\n", "# checking height and width are multiples of 32", "\n", "", "assert", "self", ".", "opt", ".", "height", "%", "32", "==", "0", ",", "\"'height' must be a multiple of 32\"", "\n", "assert", "self", ".", "opt", ".", "width", "%", "32", "==", "0", ",", "\"'width' must be a multiple of 32\"", "\n", "\n", "self", ".", "models", "=", "{", "}", "\n", "self", ".", "parameters_to_train", "=", "[", "]", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", "if", "self", ".", "opt", ".", "no_cuda", "else", "\"cuda\"", ")", "\n", "\n", "self", ".", "num_scales", "=", "len", "(", "self", ".", "opt", ".", "scales", ")", "\n", "self", ".", "num_input_frames", "=", "len", "(", "self", ".", "opt", ".", "frame_ids", ")", "\n", "self", ".", "num_pose_frames", "=", "2", "if", "self", ".", "opt", ".", "pose_model_input", "==", "\"pairs\"", "else", "self", ".", "num_input_frames", "\n", "\n", "assert", "self", ".", "opt", ".", "frame_ids", "[", "0", "]", "==", "0", ",", "\"frame_ids must start with 0\"", "\n", "\n", "self", ".", "use_pose_net", "=", "not", "(", "self", ".", "opt", ".", "use_stereo", "and", "self", ".", "opt", ".", "frame_ids", "==", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "opt", ".", "use_stereo", ":", "\n", "            ", "self", ".", "opt", ".", "frame_ids", ".", "append", "(", "\"s\"", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "encoder", "==", "\"resnet\"", ":", "\n", "            ", "self", ".", "models", "[", "\"encoder\"", "]", "=", "networks", ".", "ResnetEncoder", "(", "\n", "self", ".", "opt", ".", "num_layers", ",", "self", ".", "opt", ".", "weights_init", "==", "\"pretrained\"", ")", "\n", "", "elif", "self", ".", "opt", ".", "encoder", "==", "\"van\"", ":", "\n", "            ", "self", ".", "models", "[", "\"encoder\"", "]", "=", "networks", ".", "VANEncoder", "(", "\n", "self", ".", "opt", ".", "size_encoder", ",", "self", ".", "opt", ".", "weights_init", "==", "\"pretrained\"", ")", "\n", "\n", "", "self", ".", "models", "[", "\"encoder\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "parameters_to_train", "+=", "list", "(", "self", ".", "models", "[", "\"encoder\"", "]", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "self", ".", "opt", ".", "encoder", "==", "\"resnet\"", ":", "\n", "            ", "self", ".", "models", "[", "\"depth\"", "]", "=", "networks", ".", "DepthDecoder", "(", "\n", "self", ".", "models", "[", "\"encoder\"", "]", ".", "num_ch_enc", ",", "self", ".", "opt", ".", "scales", ")", "\n", "", "elif", "self", ".", "opt", ".", "encoder", "==", "\"van\"", ":", "\n", "            ", "if", "self", ".", "opt", ".", "use_channel_attention", ":", "\n", "                ", "self", ".", "models", "[", "\"depth\"", "]", "=", "networks", ".", "VANCADecoder", "(", "\n", "self", ".", "models", "[", "\"encoder\"", "]", ".", "num_ch_enc", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "models", "[", "\"depth\"", "]", "=", "networks", ".", "VANDecoder", "(", "\n", "self", ".", "models", "[", "\"encoder\"", "]", ".", "num_ch_enc", ")", "\n", "", "", "self", ".", "models", "[", "\"depth\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "parameters_to_train", "+=", "list", "(", "self", ".", "models", "[", "\"depth\"", "]", ".", "parameters", "(", ")", ")", "\n", "\n", "\n", "if", "self", ".", "use_pose_net", ":", "\n", "            ", "if", "self", ".", "opt", ".", "pose_model_type", "==", "\"separate_resnet\"", ":", "\n", "                ", "self", ".", "models", "[", "\"pose_encoder\"", "]", "=", "networks", ".", "ResnetEncoder", "(", "\n", "self", ".", "opt", ".", "num_layers", ",", "\n", "self", ".", "opt", ".", "weights_init", "==", "\"pretrained\"", ",", "\n", "num_input_images", "=", "self", ".", "num_pose_frames", ")", "\n", "\n", "self", ".", "models", "[", "\"pose_encoder\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "parameters_to_train", "+=", "list", "(", "self", ".", "models", "[", "\"pose_encoder\"", "]", ".", "parameters", "(", ")", ")", "\n", "\n", "self", ".", "models", "[", "\"pose\"", "]", "=", "networks", ".", "PoseDecoder", "(", "\n", "self", ".", "models", "[", "\"pose_encoder\"", "]", ".", "num_ch_enc", ",", "\n", "num_input_features", "=", "1", ",", "\n", "num_frames_to_predict_for", "=", "2", ")", "\n", "\n", "", "elif", "self", ".", "opt", ".", "pose_model_type", "==", "\"shared\"", ":", "\n", "                ", "self", ".", "models", "[", "\"pose\"", "]", "=", "networks", ".", "PoseDecoder", "(", "\n", "self", ".", "models", "[", "\"encoder\"", "]", ".", "num_ch_enc", ",", "self", ".", "num_pose_frames", ")", "\n", "\n", "", "elif", "self", ".", "opt", ".", "pose_model_type", "==", "\"posecnn\"", ":", "\n", "                ", "self", ".", "models", "[", "\"pose\"", "]", "=", "networks", ".", "PoseCNN", "(", "\n", "self", ".", "num_input_frames", "if", "self", ".", "opt", ".", "pose_model_input", "==", "\"all\"", "else", "2", ")", "\n", "\n", "", "self", ".", "models", "[", "\"pose\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "parameters_to_train", "+=", "list", "(", "self", ".", "models", "[", "\"pose\"", "]", ".", "parameters", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "predictive_mask", ":", "\n", "            ", "assert", "self", ".", "opt", ".", "disable_automasking", ",", "\"When using predictive_mask, please disable automasking with --disable_automasking\"", "\n", "\n", "# Our implementation of the predictive masking baseline has the the same architecture", "\n", "# as our depth decoder. We predict a separate mask for each source frame.", "\n", "self", ".", "models", "[", "\"predictive_mask\"", "]", "=", "networks", ".", "DepthDecoder", "(", "\n", "self", ".", "models", "[", "\"encoder\"", "]", ".", "num_ch_enc", ",", "self", ".", "opt", ".", "scales", ",", "\n", "num_output_channels", "=", "(", "len", "(", "self", ".", "opt", ".", "frame_ids", ")", "-", "1", ")", ")", "\n", "self", ".", "models", "[", "\"predictive_mask\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "parameters_to_train", "+=", "list", "(", "self", ".", "models", "[", "\"predictive_mask\"", "]", ".", "parameters", "(", ")", ")", "\n", "\n", "", "self", ".", "model_optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "parameters_to_train", ",", "self", ".", "opt", ".", "learning_rate", ")", "\n", "self", ".", "model_lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "self", ".", "model_optimizer", ",", "self", ".", "opt", ".", "scheduler_step_size", ",", "self", ".", "opt", ".", "gamma", ")", "\n", "\n", "if", "self", ".", "opt", ".", "load_weights_folder", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_model", "(", ")", "\n", "", "print", "(", "self", ".", "opt", ".", "scales", ")", "\n", "print", "(", "\"Training model named:\\n  \"", ",", "self", ".", "opt", ".", "model_name", ")", "\n", "print", "(", "\"Models and tensorboard events files are saved to:\\n  \"", ",", "self", ".", "opt", ".", "log_dir", ")", "\n", "print", "(", "\"Training is using:\\n  \"", ",", "self", ".", "device", ")", "\n", "\n", "# data", "\n", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"splits\"", ",", "self", ".", "opt", ".", "split", ",", "\"{}_files.txt\"", ")", "\n", "\n", "train_filenames", "=", "readlines", "(", "fpath", ".", "format", "(", "\"train\"", ")", ")", "\n", "val_filenames", "=", "readlines", "(", "fpath", ".", "format", "(", "\"val\"", ")", ")", "\n", "img_ext", "=", "'.png'", "if", "self", ".", "opt", ".", "png", "else", "'.jpg'", "\n", "\n", "num_train_samples", "=", "len", "(", "train_filenames", ")", "\n", "self", ".", "num_total_steps", "=", "num_train_samples", "//", "self", ".", "opt", ".", "batch_size", "*", "self", ".", "opt", ".", "num_epochs", "\n", "\n", "train_dataset", "=", "datasets", ".", "SeasonTrainDataset", "(", "\n", "self", ".", "opt", ".", "data_path", ",", "train_filenames", ",", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ",", "\n", "self", ".", "opt", ".", "frame_ids", ",", "self", ".", "opt", ".", "scales", ",", "is_train", "=", "True", ",", "img_ext", "=", "img_ext", ")", "\n", "self", ".", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "self", ".", "opt", ".", "batch_size", ",", "True", ",", "\n", "num_workers", "=", "self", ".", "opt", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "val_dataset", "=", "datasets", ".", "SeasonValDataset", "(", "\n", "self", ".", "opt", ".", "val_data_path", ",", "val_filenames", ",", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", ",", "\n", "[", "0", "]", ",", "[", "0", "]", ",", "is_train", "=", "False", ",", "img_ext", "=", "img_ext", ")", "\n", "self", ".", "val_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "self", ".", "opt", ".", "val_batch_size", ",", "False", ",", "\n", "num_workers", "=", "self", ".", "opt", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "#self.val_iter = iter(self.val_loader)", "\n", "\n", "self", ".", "writers", "=", "{", "}", "\n", "for", "mode", "in", "[", "\"train\"", ",", "\"val\"", "]", ":", "\n", "            ", "self", ".", "writers", "[", "mode", "]", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "mode", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "opt", ".", "no_ssim", ":", "\n", "            ", "self", ".", "ssim", "=", "SSIM", "(", ")", "\n", "self", ".", "ssim", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "self", ".", "backproject_depth", "=", "{", "}", "\n", "self", ".", "project_3d", "=", "{", "}", "\n", "for", "scale", "in", "self", ".", "opt", ".", "scales", ":", "\n", "            ", "h", "=", "self", ".", "opt", ".", "height", "//", "(", "2", "**", "scale", ")", "\n", "w", "=", "self", ".", "opt", ".", "width", "//", "(", "2", "**", "scale", ")", "\n", "\n", "self", ".", "backproject_depth", "[", "scale", "]", "=", "BackprojectDepth", "(", "self", ".", "opt", ".", "batch_size", ",", "h", ",", "w", ")", "\n", "self", ".", "backproject_depth", "[", "scale", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "project_3d", "[", "scale", "]", "=", "Project3D", "(", "self", ".", "opt", ".", "batch_size", ",", "h", ",", "w", ")", "\n", "self", ".", "project_3d", "[", "scale", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "self", ".", "depth_metric_names", "=", "[", "\n", "\"de/abs_rel\"", ",", "\"de/sq_rel\"", ",", "\"de/rms\"", ",", "\"de/log_rms\"", ",", "\"da/a1\"", ",", "\"da/a2\"", ",", "\"da/a3\"", "]", "\n", "\n", "print", "(", "\"Using split:\\n  \"", ",", "self", ".", "opt", ".", "split", ")", "\n", "print", "(", "\"There are {:d} training items and {:d} validation items\\n\"", ".", "format", "(", "\n", "len", "(", "train_dataset", ")", ",", "len", "(", "val_dataset", ")", ")", ")", "\n", "\n", "self", ".", "save_opts", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.set_train": [[188, 193], ["season_trainer.Trainer.models.values", "m.train"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.train"], ["", "def", "set_train", "(", "self", ")", ":", "\n", "        ", "\"\"\"Convert all models to training mode\n        \"\"\"", "\n", "for", "m", "in", "self", ".", "models", ".", "values", "(", ")", ":", "\n", "            ", "m", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.set_eval": [[194, 199], ["season_trainer.Trainer.models.values", "m.eval"], "methods", ["None"], ["", "", "def", "set_eval", "(", "self", ")", ":", "\n", "        ", "\"\"\"Convert all models to testing/evaluation mode\n        \"\"\"", "\n", "for", "m", "in", "self", ".", "models", ".", "values", "(", ")", ":", "\n", "            ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.train": [[200, 223], ["time.time", "season_trainer.Trainer.val_epoch", "range", "range", "season_trainer.Trainer.run_epoch", "season_trainer.Trainer.val_epoch", "os.path.join", "season_trainer.Trainer.save_model", "os.path.exists", "shutil.rmtree", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.val_epoch", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.run_epoch", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.val_epoch", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.save_model"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run the entire training pipeline\n        \"\"\"", "\n", "self", ".", "epoch", "=", "-", "1", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "best_abs_rel", "=", "self", ".", "val_epoch", "(", ")", "\n", "best_epoch", "=", "-", "1", "\n", "for", "self", ".", "epoch", "in", "range", "(", "self", ".", "opt", ".", "num_epochs", ")", ":", "\n", "            ", "self", ".", "run_epoch", "(", ")", "\n", "\n", "abs_rel", "=", "self", ".", "val_epoch", "(", ")", "#validate", "\n", "\n", "if", "abs_rel", "<", "best_abs_rel", ":", "\n", "                ", "self", ".", "save_model", "(", ")", "\n", "best_abs_rel", "=", "abs_rel", "\n", "best_epoch", "=", "self", ".", "epoch", "\n", "\n", "#remove all but the best model weights", "\n", "", "", "for", "self", ".", "epoch", "in", "range", "(", "self", ".", "opt", ".", "num_epochs", ")", ":", "\n", "            ", "model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "\"models\"", ",", "\"weights_{}\"", ".", "format", "(", "self", ".", "epoch", ")", ")", "\n", "if", "self", ".", "epoch", "!=", "best_epoch", "and", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "model_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.val_epoch": [[224, 268], ["print", "season_trainer.Trainer.set_eval", "season_trainer.Trainer.set_train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "results.update", "results.update", "results.update", "results.update", "results.update", "results.update", "print", "season_trainer.Trainer.log_val", "season_trainer.Trainer.val_process_batch", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "len", "env_abs_rel.append", "env_a1.append", "numpy.var", "numpy.var", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "torch.mean().cpu", "numpy.mean", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.set_eval", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.set_train", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log_val", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.val_process_batch"], ["", "", "", "def", "val_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run a single epoch of validation\n        \"\"\"", "\n", "env_nums", "=", "[", "1471", ",", "1588", ",", "1583", ",", "1379", ",", "1382", ",", "1555", ",", "1401", ",", "1710", ",", "1537", ",", "999", ",", "1088", ",", "1532", "]", "#number of images for different envs", "\n", "#env_abs = [0, 1471, 3059, 4642, 6021, 7403, 8958, 10359, 12069, 13606, 14605, 15693, 17225]", "\n", "abs_rels", "=", "[", "]", "\n", "a1s", "=", "[", "]", "\n", "env_abs_rel", "=", "[", "]", "\n", "env_a1", "=", "[", "]", "\n", "results", "=", "{", "}", "\n", "print", "(", "\"Validating\"", ")", "\n", "self", ".", "set_eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "inputs", "in", "tqdm", ".", "tqdm", "(", "self", ".", "val_loader", ")", ":", "\n", "                ", "abs_rel", ",", "a1", "=", "self", ".", "val_process_batch", "(", "inputs", ")", "\n", "abs_rels", ".", "append", "(", "abs_rel", ")", "\n", "a1s", ".", "append", "(", "a1", ")", "\n", "\n", "", "abs_rels", "=", "torch", ".", "cat", "(", "abs_rels", ")", "\n", "a1s", "=", "torch", ".", "cat", "(", "a1s", ")", "\n", "\n", "#compute errors for each env", "\n", "start", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "env_nums", ")", ")", ":", "\n", "                ", "end", "=", "start", "+", "env_nums", "[", "i", "]", "\n", "env_abs_rel", ".", "append", "(", "torch", ".", "mean", "(", "abs_rels", "[", "start", ":", "end", "]", ")", ".", "cpu", "(", ")", ".", "data", ")", "\n", "env_a1", ".", "append", "(", "torch", ".", "mean", "(", "a1s", "[", "start", ":", "end", "]", ")", ".", "cpu", "(", ")", ".", "data", ")", "\n", "start", "=", "end", "\n", "\n", "", "results", ".", "update", "(", "{", "\"abs_rel_avg\"", ":", "torch", ".", "mean", "(", "abs_rels", ")", ".", "cpu", "(", ")", ".", "data", "}", ")", "\n", "results", ".", "update", "(", "{", "\"a1_avg\"", ":", "torch", ".", "mean", "(", "a1s", ")", ".", "cpu", "(", ")", ".", "data", "}", ")", "\n", "results", ".", "update", "(", "{", "\"abs_rel_var\"", ":", "np", ".", "var", "(", "env_abs_rel", ")", "}", ")", "\n", "results", ".", "update", "(", "{", "\"a1_var\"", ":", "np", ".", "var", "(", "env_a1", ")", "}", ")", "\n", "results", ".", "update", "(", "{", "\"abs_rel_rng\"", ":", "(", "np", ".", "max", "(", "env_abs_rel", ")", "-", "np", ".", "min", "(", "env_abs_rel", ")", ")", "/", "np", ".", "mean", "(", "env_abs_rel", ")", "}", ")", "\n", "results", ".", "update", "(", "{", "\"a1_rng\"", ":", "(", "np", ".", "max", "(", "env_a1", ")", "-", "np", ".", "min", "(", "env_a1", ")", ")", "/", "(", "1", "-", "np", ".", "mean", "(", "env_a1", ")", ")", "}", ")", "\n", "\n", "print", "(", "results", ")", "\n", "\n", "self", ".", "log_val", "(", "results", ")", "\n", "\n", "", "self", ".", "set_train", "(", ")", "\n", "\n", "return", "results", "[", "\"abs_rel_avg\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log_val": [[269, 275], ["results.items", "writer.add_scalar"], "methods", ["None"], ["", "def", "log_val", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Write an event to the tensorboard events file for validation results\n        \"\"\"", "\n", "writer", "=", "self", ".", "writers", "[", "\"val\"", "]", "\n", "for", "l", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "\"{}\"", ".", "format", "(", "l", ")", ",", "v", ",", "self", ".", "epoch", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.val_process_batch": [[277, 293], ["inputs.items", "layers.disp_to_depth", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "season_trainer.Trainer.evaluation", "ipt.to", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.disp_to_depth", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.evaluation"], ["", "", "def", "val_process_batch", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Pass a minibatch through the network and generate images and losses\n        \"\"\"", "\n", "\n", "\n", "for", "key", ",", "ipt", "in", "inputs", ".", "items", "(", ")", ":", "\n", "            ", "inputs", "[", "key", "]", "=", "ipt", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "pred_disp", "=", "self", ".", "models", "[", "\"depth\"", "]", "(", "self", ".", "models", "[", "\"encoder\"", "]", "(", "inputs", "[", "\"color\"", ",", "0", ",", "0", "]", ")", ")", "[", "(", "\"disp\"", ",", "0", ")", "]", "\n", "_", ",", "pred_depth", "=", "disp_to_depth", "(", "pred_disp", ",", "self", ".", "opt", ".", "min_depth", ",", "self", ".", "opt", ".", "max_depth", ")", "\n", "pred_depth", "=", "torch", ".", "clamp", "(", "self", ".", "opt", ".", "pred_depth_scale_factor", "*", "F", ".", "interpolate", "(", "\n", "pred_depth", ",", "[", "768", ",", "1024", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", ",", "0", ",", "80", ")", "\n", "\n", "abs_rel", ",", "a1", "=", "self", ".", "evaluation", "(", "inputs", "[", "\"depth_gt\"", "]", ",", "pred_depth", ")", "\n", "\n", "return", "abs_rel", ",", "a1", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.evaluation": [[295, 317], ["season_trainer.Trainer.align_img", "season_trainer.Trainer.compute_errors", "len"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.align_img", "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.pred_season_depth.compute_errors"], ["", "def", "evaluation", "(", "self", ",", "gt_depth", ",", "pred_depth", ")", ":", "\n", "        ", "\"\"\"evalution on validation set\n        \"\"\"", "\n", "\n", "#align", "\n", "a", "=", "pred_depth", "==", "0", "\n", "b", "=", "gt_depth", "==", "0", "\n", "c", "=", "gt_depth", ">", "0", "\n", "if", "len", "(", "c", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "pred_depth", "[", "a", "]", "=", "1", "\n", "pred_depth", "[", "b", "]", "=", "1", "\n", "gt_depth", "[", "b", "]", "=", "1", "\n", "pred_depth", "=", "self", ".", "align_img", "(", "pred_depth", ",", "gt_depth", ",", "c", ")", "\n", "\n", "pred_depth", "[", "b", "]", "=", "1", "\n", "pred_depth", "[", "pred_depth", "==", "0", "]", "=", "1", "\n", "pred_depth", "[", "gt_depth", "==", "0", "]", "=", "1", "\n", "\n", "abs_rel", ",", "a1", "=", "self", ".", "compute_errors", "(", "pred_depth", ",", "gt_depth", ",", "c", ")", "\n", "\n", "return", "abs_rel", ",", "a1", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.compute_errors": [[318, 333], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "compute_errors", "(", "self", ",", "pred_depth", ",", "gt_depth", ",", "c", ")", ":", "\n", "        ", "\"\"\"\n        Compute abs_rel and a1\n        env\n        :param ground_truth:\n        :param predication:\n        :return:\n        \"\"\"", "\n", "csum", "=", "torch", ".", "sum", "(", "c", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "abs_rel", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "gt_depth", "-", "pred_depth", ")", "/", "gt_depth", "*", "c", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "/", "csum", "\n", "\n", "threshold", "=", "torch", ".", "maximum", "(", "(", "gt_depth", "/", "pred_depth", ")", ",", "(", "pred_depth", "/", "gt_depth", ")", ")", "<", "1.25", "\n", "a1", "=", "torch", ".", "sum", "(", "threshold", "*", "c", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "/", "csum", "\n", "\n", "return", "abs_rel", ",", "a1", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.align_img": [[334, 352], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square"], "methods", ["None"], ["", "def", "align_img", "(", "self", ",", "pred_depth", ",", "gt_depth", ",", "c", ")", ":", "\n", "        ", "\"\"\"\n        align predicted depth maps with ground truth.\n        :param pred_depth:\n        :param ground_depth:\n        :param c:\n        :return: aligned predicted depth\n\n        \"\"\"", "\n", "csum", "=", "torch", ".", "sum", "(", "c", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", "\n", "pred_avg", "=", "torch", ".", "sum", "(", "pred_depth", "*", "c", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", "/", "csum", "\n", "pred_var", "=", "torch", ".", "sum", "(", "torch", ".", "square", "(", "pred_depth", "-", "pred_avg", ")", "*", "c", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", "/", "csum", "\n", "gt_avg", "=", "torch", ".", "sum", "(", "gt_depth", "*", "c", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", "/", "csum", "\n", "gt_var", "=", "torch", ".", "sum", "(", "torch", ".", "square", "(", "gt_depth", "-", "gt_avg", ")", "*", "c", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", "/", "csum", "\n", "pred_depth", "=", "(", "pred_depth", "-", "pred_avg", ")", "*", "torch", ".", "sqrt", "(", "gt_var", "/", "pred_var", ")", "+", "gt_avg", "\n", "pred_depth", "=", "torch", ".", "clamp", "(", "pred_depth", ",", "0", ",", "65535", ")", "\n", "\n", "return", "pred_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.run_epoch": [[353, 383], ["print", "season_trainer.Trainer.set_train", "enumerate", "season_trainer.Trainer.model_lr_scheduler.step", "time.time", "season_trainer.Trainer.process_batch", "season_trainer.Trainer.model_optimizer.zero_grad", "losses[].backward", "season_trainer.Trainer.model_optimizer.step", "time.time", "season_trainer.Trainer.log_time", "season_trainer.Trainer.log", "losses[].cpu"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.set_train", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.process_batch", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log_time", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log"], ["", "def", "run_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run a single epoch of training\n        \"\"\"", "\n", "#self.model_lr_scheduler.step()", "\n", "\n", "print", "(", "\"Training\"", ")", "\n", "self", ".", "set_train", "(", ")", "\n", "\n", "for", "batch_idx", ",", "inputs", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "\n", "            ", "before_op_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "outputs", ",", "losses", "=", "self", ".", "process_batch", "(", "inputs", ")", "\n", "\n", "self", ".", "model_optimizer", ".", "zero_grad", "(", ")", "\n", "losses", "[", "\"loss\"", "]", ".", "backward", "(", ")", "\n", "self", ".", "model_optimizer", ".", "step", "(", ")", "\n", "\n", "duration", "=", "time", ".", "time", "(", ")", "-", "before_op_time", "\n", "\n", "# log less frequently after the first 2000 steps to save time & disk space", "\n", "early_phase", "=", "batch_idx", "%", "self", ".", "opt", ".", "log_frequency", "==", "0", "and", "self", ".", "step", "<", "2000", "\n", "late_phase", "=", "self", ".", "step", "%", "2000", "==", "0", "\n", "\n", "if", "early_phase", "or", "late_phase", ":", "\n", "                ", "self", ".", "log_time", "(", "batch_idx", ",", "duration", ",", "losses", "[", "\"loss\"", "]", ".", "cpu", "(", ")", ".", "data", ")", "\n", "self", ".", "log", "(", "\"train\"", ",", "inputs", ",", "outputs", ",", "losses", ")", "\n", "", "self", ".", "step", "+=", "1", "\n", "\n", "", "self", ".", "model_lr_scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.process_batch": [[384, 417], ["inputs.items", "season_trainer.Trainer.generate_images_pred", "season_trainer.Trainer.compute_losses", "ipt.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "outputs.update", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "season_trainer.Trainer.predict_poses"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.generate_images_pred", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.compute_losses", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.predict_poses"], ["", "def", "process_batch", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Pass a minibatch through the network and generate images and losses\n        \"\"\"", "\n", "for", "key", ",", "ipt", "in", "inputs", ".", "items", "(", ")", ":", "\n", "            ", "inputs", "[", "key", "]", "=", "ipt", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "pose_model_type", "==", "\"shared\"", ":", "\n", "# If we are using a shared encoder for both depth and pose (as advocated", "\n", "# in monodepthv1), then all images are fed separately through the depth encoder.", "\n", "            ", "all_color_aug", "=", "torch", ".", "cat", "(", "[", "inputs", "[", "(", "\"color_aug\"", ",", "i", ",", "0", ")", "]", "for", "i", "in", "self", ".", "opt", ".", "frame_ids", "]", ")", "\n", "all_features", "=", "self", ".", "models", "[", "\"encoder\"", "]", "(", "all_color_aug", ")", "\n", "all_features", "=", "[", "torch", ".", "split", "(", "f", ",", "self", ".", "opt", ".", "batch_size", ")", "for", "f", "in", "all_features", "]", "\n", "\n", "features", "=", "{", "}", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "self", ".", "opt", ".", "frame_ids", ")", ":", "\n", "                ", "features", "[", "k", "]", "=", "[", "f", "[", "i", "]", "for", "f", "in", "all_features", "]", "\n", "\n", "", "outputs", "=", "self", ".", "models", "[", "\"depth\"", "]", "(", "features", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "# Otherwise, we only feed the image with frame_id 0 through the depth encoder", "\n", "            ", "features", "=", "self", ".", "models", "[", "\"encoder\"", "]", "(", "inputs", "[", "\"color_aug\"", ",", "0", ",", "0", "]", ")", "\n", "outputs", "=", "self", ".", "models", "[", "\"depth\"", "]", "(", "features", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "predictive_mask", ":", "\n", "            ", "outputs", "[", "\"predictive_mask\"", "]", "=", "self", ".", "models", "[", "\"predictive_mask\"", "]", "(", "features", ")", "\n", "\n", "", "if", "self", ".", "use_pose_net", ":", "\n", "            ", "outputs", ".", "update", "(", "self", ".", "predict_poses", "(", "inputs", ",", "features", ")", ")", "\n", "\n", "", "self", ".", "generate_images_pred", "(", "inputs", ",", "outputs", ")", "\n", "losses", "=", "self", ".", "compute_losses", "(", "inputs", ",", "outputs", ")", "\n", "\n", "return", "outputs", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.predict_poses": [[418, 475], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.transformation_from_parameters", "layers.transformation_from_parameters", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.transformation_from_parameters", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.transformation_from_parameters"], ["", "def", "predict_poses", "(", "self", ",", "inputs", ",", "features", ")", ":", "\n", "        ", "\"\"\"Predict poses between input frames for monocular sequences.\n        \"\"\"", "\n", "outputs", "=", "{", "}", "\n", "if", "self", ".", "num_pose_frames", "==", "2", ":", "\n", "# In this setting, we compute the pose to each source frame via a", "\n", "# separate forward pass through the pose network.", "\n", "\n", "# select what features the pose network takes as input", "\n", "            ", "if", "self", ".", "opt", ".", "pose_model_type", "==", "\"shared\"", ":", "\n", "                ", "pose_feats", "=", "{", "f_i", ":", "features", "[", "f_i", "]", "for", "f_i", "in", "self", ".", "opt", ".", "frame_ids", "}", "\n", "", "else", ":", "\n", "                ", "pose_feats", "=", "{", "f_i", ":", "inputs", "[", "\"color_aug\"", ",", "f_i", ",", "0", "]", "for", "f_i", "in", "self", ".", "opt", ".", "frame_ids", "}", "\n", "\n", "", "for", "f_i", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                ", "if", "f_i", "!=", "\"s\"", ":", "\n", "# To maintain ordering we always pass frames in temporal order", "\n", "                    ", "if", "f_i", "<", "0", ":", "\n", "                        ", "pose_inputs", "=", "[", "pose_feats", "[", "f_i", "]", ",", "pose_feats", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                        ", "pose_inputs", "=", "[", "pose_feats", "[", "0", "]", ",", "pose_feats", "[", "f_i", "]", "]", "\n", "\n", "", "if", "self", ".", "opt", ".", "pose_model_type", "==", "\"separate_resnet\"", ":", "\n", "                        ", "pose_inputs", "=", "[", "self", ".", "models", "[", "\"pose_encoder\"", "]", "(", "torch", ".", "cat", "(", "pose_inputs", ",", "1", ")", ")", "]", "\n", "", "elif", "self", ".", "opt", ".", "pose_model_type", "==", "\"posecnn\"", ":", "\n", "                        ", "pose_inputs", "=", "torch", ".", "cat", "(", "pose_inputs", ",", "1", ")", "\n", "\n", "", "axisangle", ",", "translation", "=", "self", ".", "models", "[", "\"pose\"", "]", "(", "pose_inputs", ")", "\n", "outputs", "[", "(", "\"axisangle\"", ",", "0", ",", "f_i", ")", "]", "=", "axisangle", "\n", "outputs", "[", "(", "\"translation\"", ",", "0", ",", "f_i", ")", "]", "=", "translation", "\n", "\n", "# Invert the matrix if the frame id is negative", "\n", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "f_i", ")", "]", "=", "transformation_from_parameters", "(", "\n", "axisangle", "[", ":", ",", "0", "]", ",", "translation", "[", ":", ",", "0", "]", ",", "invert", "=", "(", "f_i", "<", "0", ")", ")", "\n", "\n", "", "", "", "else", ":", "\n", "# Here we input all frames to the pose net (and predict all poses) together", "\n", "            ", "if", "self", ".", "opt", ".", "pose_model_type", "in", "[", "\"separate_resnet\"", ",", "\"posecnn\"", "]", ":", "\n", "                ", "pose_inputs", "=", "torch", ".", "cat", "(", "\n", "[", "inputs", "[", "(", "\"color_aug\"", ",", "i", ",", "0", ")", "]", "for", "i", "in", "self", ".", "opt", ".", "frame_ids", "if", "i", "!=", "\"s\"", "]", ",", "1", ")", "\n", "\n", "if", "self", ".", "opt", ".", "pose_model_type", "==", "\"separate_resnet\"", ":", "\n", "                    ", "pose_inputs", "=", "[", "self", ".", "models", "[", "\"pose_encoder\"", "]", "(", "pose_inputs", ")", "]", "\n", "\n", "", "", "elif", "self", ".", "opt", ".", "pose_model_type", "==", "\"shared\"", ":", "\n", "                ", "pose_inputs", "=", "[", "features", "[", "i", "]", "for", "i", "in", "self", ".", "opt", ".", "frame_ids", "if", "i", "!=", "\"s\"", "]", "\n", "\n", "", "axisangle", ",", "translation", "=", "self", ".", "models", "[", "\"pose\"", "]", "(", "pose_inputs", ")", "\n", "\n", "for", "i", ",", "f_i", "in", "enumerate", "(", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ")", ":", "\n", "                ", "if", "f_i", "!=", "\"s\"", ":", "\n", "                    ", "outputs", "[", "(", "\"axisangle\"", ",", "0", ",", "f_i", ")", "]", "=", "axisangle", "\n", "outputs", "[", "(", "\"translation\"", ",", "0", ",", "f_i", ")", "]", "=", "translation", "\n", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "f_i", ")", "]", "=", "transformation_from_parameters", "(", "\n", "axisangle", "[", ":", ",", "i", "]", ",", "translation", "[", ":", ",", "i", "]", ")", "\n", "\n", "", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.val": [[476, 496], ["season_trainer.Trainer.set_eval", "season_trainer.Trainer.set_train", "season_trainer.Trainer.val_iter.next", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "season_trainer.Trainer.process_batch", "season_trainer.Trainer.log", "iter", "season_trainer.Trainer.val_iter.next", "season_trainer.Trainer.compute_depth_losses"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.set_eval", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.set_train", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.process_batch", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.compute_depth_losses"], ["", "def", "val", "(", "self", ")", ":", "\n", "        ", "\"\"\"Validate the model on a single minibatch\n        \"\"\"", "\n", "self", ".", "set_eval", "(", ")", "\n", "try", ":", "\n", "            ", "inputs", "=", "self", ".", "val_iter", ".", "next", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "val_iter", "=", "iter", "(", "self", ".", "val_loader", ")", "\n", "inputs", "=", "self", ".", "val_iter", ".", "next", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", ",", "losses", "=", "self", ".", "process_batch", "(", "inputs", ")", "\n", "\n", "if", "\"depth_gt\"", "in", "inputs", ":", "\n", "                ", "self", ".", "compute_depth_losses", "(", "inputs", ",", "outputs", ",", "losses", ")", "\n", "\n", "", "self", ".", "log", "(", "\"val\"", ",", "inputs", ",", "outputs", ",", "losses", ")", "\n", "del", "inputs", ",", "outputs", ",", "losses", "\n", "\n", "", "self", ".", "set_train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.generate_images_pred": [[497, 549], ["layers.disp_to_depth", "enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "inv_depth.mean().mean", "layers.transformation_from_parameters", "inv_depth.mean"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.disp_to_depth", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.transformation_from_parameters"], ["", "def", "generate_images_pred", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Generate the warped (reprojected) color images for a minibatch.\n        Generated images are saved into the `outputs` dictionary.\n        \"\"\"", "\n", "for", "scale", "in", "self", ".", "opt", ".", "scales", ":", "\n", "            ", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "scale", ")", "]", "\n", "if", "self", ".", "opt", ".", "v1_multiscale", ":", "\n", "                ", "source_scale", "=", "scale", "\n", "", "else", ":", "\n", "                ", "disp", "=", "F", ".", "interpolate", "(", "\n", "disp", ",", "[", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "source_scale", "=", "0", "\n", "\n", "", "_", ",", "depth", "=", "disp_to_depth", "(", "disp", ",", "self", ".", "opt", ".", "min_depth", ",", "self", ".", "opt", ".", "max_depth", ")", "\n", "\n", "outputs", "[", "(", "\"depth\"", ",", "0", ",", "scale", ")", "]", "=", "depth", "\n", "\n", "for", "i", ",", "frame_id", "in", "enumerate", "(", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ")", ":", "\n", "\n", "                ", "if", "frame_id", "==", "\"s\"", ":", "\n", "                    ", "T", "=", "inputs", "[", "\"stereo_T\"", "]", "\n", "", "else", ":", "\n", "                    ", "T", "=", "outputs", "[", "(", "\"cam_T_cam\"", ",", "0", ",", "frame_id", ")", "]", "\n", "\n", "# from the authors of https://arxiv.org/abs/1712.00175", "\n", "", "if", "self", ".", "opt", ".", "pose_model_type", "==", "\"posecnn\"", ":", "\n", "\n", "                    ", "axisangle", "=", "outputs", "[", "(", "\"axisangle\"", ",", "0", ",", "frame_id", ")", "]", "\n", "translation", "=", "outputs", "[", "(", "\"translation\"", ",", "0", ",", "frame_id", ")", "]", "\n", "\n", "inv_depth", "=", "1", "/", "depth", "\n", "mean_inv_depth", "=", "inv_depth", ".", "mean", "(", "3", ",", "True", ")", ".", "mean", "(", "2", ",", "True", ")", "\n", "\n", "T", "=", "transformation_from_parameters", "(", "\n", "axisangle", "[", ":", ",", "0", "]", ",", "translation", "[", ":", ",", "0", "]", "*", "mean_inv_depth", "[", ":", ",", "0", "]", ",", "frame_id", "<", "0", ")", "\n", "\n", "", "cam_points", "=", "self", ".", "backproject_depth", "[", "source_scale", "]", "(", "\n", "depth", ",", "inputs", "[", "(", "\"inv_K\"", ",", "source_scale", ")", "]", ")", "\n", "pix_coords", "=", "self", ".", "project_3d", "[", "source_scale", "]", "(", "\n", "cam_points", ",", "inputs", "[", "(", "\"K\"", ",", "source_scale", ")", "]", ",", "T", ")", "\n", "\n", "outputs", "[", "(", "\"sample\"", ",", "frame_id", ",", "scale", ")", "]", "=", "pix_coords", "\n", "\n", "outputs", "[", "(", "\"color\"", ",", "frame_id", ",", "scale", ")", "]", "=", "F", ".", "grid_sample", "(", "\n", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "source_scale", ")", "]", ",", "\n", "outputs", "[", "(", "\"sample\"", ",", "frame_id", ",", "scale", ")", "]", ",", "\n", "padding_mode", "=", "\"border\"", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "if", "not", "self", ".", "opt", ".", "disable_automasking", ":", "\n", "                    ", "outputs", "[", "(", "\"color_identity\"", ",", "frame_id", ",", "scale", ")", "]", "=", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "source_scale", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.compute_reprojection_loss": [[550, 563], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs.mean", "torch.abs.mean", "torch.abs.mean", "season_trainer.Trainer.ssim().mean", "season_trainer.Trainer.ssim"], "methods", ["None"], ["", "", "", "", "def", "compute_reprojection_loss", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "\"\"\"Computes reprojection loss between a batch of predicted and target images\n        \"\"\"", "\n", "abs_diff", "=", "torch", ".", "abs", "(", "target", "-", "pred", ")", "\n", "l1_loss", "=", "abs_diff", ".", "mean", "(", "1", ",", "True", ")", "\n", "\n", "if", "self", ".", "opt", ".", "no_ssim", ":", "\n", "            ", "reprojection_loss", "=", "l1_loss", "\n", "", "else", ":", "\n", "            ", "ssim_loss", "=", "self", ".", "ssim", "(", "pred", ",", "target", ")", ".", "mean", "(", "1", ",", "True", ")", "\n", "reprojection_loss", "=", "0.85", "*", "ssim_loss", "+", "0.15", "*", "l1_loss", "\n", "\n", "", "return", "reprojection_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.compute_losses": [[564, 654], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "to_optimise.mean", "disp.mean().mean", "layers.get_smooth_loss", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean", "torch.cat.mean", "torch.cat.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "season_trainer.Trainer.compute_reprojection_loss", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.mean", "torch.cat.mean", "torch.cat.mean", "weighting_loss.mean", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "disp.mean", "season_trainer.Trainer.compute_reprojection_loss", "torch.interpolate", "torch.interpolate", "torch.interpolate", "nn.BCELoss", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.get_smooth_loss", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.compute_reprojection_loss", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.compute_reprojection_loss"], ["", "def", "compute_losses", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"Compute the reprojection and smoothness losses for a minibatch\n        \"\"\"", "\n", "losses", "=", "{", "}", "\n", "total_loss", "=", "0", "\n", "\n", "for", "scale", "in", "self", ".", "opt", ".", "scales", ":", "\n", "            ", "loss", "=", "0", "\n", "reprojection_losses", "=", "[", "]", "\n", "\n", "if", "self", ".", "opt", ".", "v1_multiscale", ":", "\n", "                ", "source_scale", "=", "scale", "\n", "", "else", ":", "\n", "                ", "source_scale", "=", "0", "\n", "\n", "", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "scale", ")", "]", "\n", "color", "=", "inputs", "[", "(", "\"color\"", ",", "0", ",", "scale", ")", "]", "\n", "target", "=", "inputs", "[", "(", "\"color\"", ",", "0", ",", "source_scale", ")", "]", "\n", "\n", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                ", "pred", "=", "outputs", "[", "(", "\"color\"", ",", "frame_id", ",", "scale", ")", "]", "\n", "reprojection_losses", ".", "append", "(", "self", ".", "compute_reprojection_loss", "(", "pred", ",", "target", ")", ")", "\n", "\n", "", "reprojection_losses", "=", "torch", ".", "cat", "(", "reprojection_losses", ",", "1", ")", "\n", "\n", "if", "not", "self", ".", "opt", ".", "disable_automasking", ":", "\n", "                ", "identity_reprojection_losses", "=", "[", "]", "\n", "for", "frame_id", "in", "self", ".", "opt", ".", "frame_ids", "[", "1", ":", "]", ":", "\n", "                    ", "pred", "=", "inputs", "[", "(", "\"color\"", ",", "frame_id", ",", "source_scale", ")", "]", "\n", "identity_reprojection_losses", ".", "append", "(", "\n", "self", ".", "compute_reprojection_loss", "(", "pred", ",", "target", ")", ")", "\n", "\n", "", "identity_reprojection_losses", "=", "torch", ".", "cat", "(", "identity_reprojection_losses", ",", "1", ")", "\n", "\n", "if", "self", ".", "opt", ".", "avg_reprojection", ":", "\n", "                    ", "identity_reprojection_loss", "=", "identity_reprojection_losses", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "# save both images, and do min all at once below", "\n", "                    ", "identity_reprojection_loss", "=", "identity_reprojection_losses", "\n", "\n", "", "", "elif", "self", ".", "opt", ".", "predictive_mask", ":", "\n", "# use the predicted mask", "\n", "                ", "mask", "=", "outputs", "[", "\"predictive_mask\"", "]", "[", "\"disp\"", ",", "scale", "]", "\n", "if", "not", "self", ".", "opt", ".", "v1_multiscale", ":", "\n", "                    ", "mask", "=", "F", ".", "interpolate", "(", "\n", "mask", ",", "[", "self", ".", "opt", ".", "height", ",", "self", ".", "opt", ".", "width", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "\n", "", "reprojection_losses", "*=", "mask", "\n", "\n", "# add a loss pushing mask to 1 (using nn.BCELoss for stability)", "\n", "weighting_loss", "=", "0.2", "*", "nn", ".", "BCELoss", "(", ")", "(", "mask", ",", "torch", ".", "ones", "(", "mask", ".", "shape", ")", ".", "cuda", "(", ")", ")", "\n", "loss", "+=", "weighting_loss", ".", "mean", "(", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "avg_reprojection", ":", "\n", "                ", "reprojection_loss", "=", "reprojection_losses", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "reprojection_loss", "=", "reprojection_losses", "\n", "\n", "", "if", "not", "self", ".", "opt", ".", "disable_automasking", ":", "\n", "# add random numbers to break ties", "\n", "                ", "identity_reprojection_loss", "+=", "torch", ".", "randn", "(", "\n", "identity_reprojection_loss", ".", "shape", ",", "device", "=", "self", ".", "device", ")", "*", "0.00001", "\n", "\n", "combined", "=", "torch", ".", "cat", "(", "(", "identity_reprojection_loss", ",", "reprojection_loss", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "combined", "=", "reprojection_loss", "\n", "\n", "", "if", "combined", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                ", "to_optimise", "=", "combined", "\n", "", "else", ":", "\n", "                ", "to_optimise", ",", "idxs", "=", "torch", ".", "min", "(", "combined", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "not", "self", ".", "opt", ".", "disable_automasking", ":", "\n", "                ", "outputs", "[", "\"identity_selection/{}\"", ".", "format", "(", "scale", ")", "]", "=", "(", "\n", "idxs", ">", "identity_reprojection_loss", ".", "shape", "[", "1", "]", "-", "1", ")", ".", "float", "(", ")", "\n", "\n", "", "loss", "+=", "to_optimise", ".", "mean", "(", ")", "\n", "\n", "mean_disp", "=", "disp", ".", "mean", "(", "2", ",", "True", ")", ".", "mean", "(", "3", ",", "True", ")", "\n", "norm_disp", "=", "disp", "/", "(", "mean_disp", "+", "1e-7", ")", "\n", "smooth_loss", "=", "get_smooth_loss", "(", "norm_disp", ",", "color", ")", "\n", "\n", "loss", "+=", "self", ".", "opt", ".", "disparity_smoothness", "*", "smooth_loss", "/", "(", "2", "**", "scale", ")", "\n", "total_loss", "+=", "loss", "\n", "losses", "[", "\"loss/{}\"", ".", "format", "(", "scale", ")", "]", "=", "loss", "\n", "\n", "", "total_loss", "/=", "self", ".", "num_scales", "\n", "losses", "[", "\"loss\"", "]", "=", "total_loss", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.compute_depth_losses": [[655, 684], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.detach", "torch.clamp.detach", "torch.clamp.detach", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "layers.compute_depth_errors", "enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "torch.median", "numpy.array", "depth_errors[].cpu"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.compute_depth_errors"], ["", "def", "compute_depth_losses", "(", "self", ",", "inputs", ",", "outputs", ",", "losses", ")", ":", "\n", "        ", "\"\"\"Compute depth metrics, to allow monitoring during training\n\n        This isn't particularly accurate as it averages over the entire batch,\n        so is only used to give an indication of validation performance\n        \"\"\"", "\n", "depth_pred", "=", "outputs", "[", "(", "\"depth\"", ",", "0", ",", "0", ")", "]", "\n", "depth_pred", "=", "torch", ".", "clamp", "(", "F", ".", "interpolate", "(", "\n", "depth_pred", ",", "[", "375", ",", "1242", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", ",", "1e-3", ",", "80", ")", "\n", "depth_pred", "=", "depth_pred", ".", "detach", "(", ")", "\n", "\n", "depth_gt", "=", "inputs", "[", "\"depth_gt\"", "]", "\n", "mask", "=", "depth_gt", ">", "0", "\n", "\n", "# garg/eigen crop", "\n", "crop_mask", "=", "torch", ".", "zeros_like", "(", "mask", ")", "\n", "crop_mask", "[", ":", ",", ":", ",", "153", ":", "371", ",", "44", ":", "1197", "]", "=", "1", "\n", "mask", "=", "mask", "*", "crop_mask", "\n", "\n", "depth_gt", "=", "depth_gt", "[", "mask", "]", "\n", "depth_pred", "=", "depth_pred", "[", "mask", "]", "\n", "depth_pred", "*=", "torch", ".", "median", "(", "depth_gt", ")", "/", "torch", ".", "median", "(", "depth_pred", ")", "\n", "\n", "depth_pred", "=", "torch", ".", "clamp", "(", "depth_pred", ",", "min", "=", "1e-3", ",", "max", "=", "80", ")", "\n", "\n", "depth_errors", "=", "compute_depth_errors", "(", "depth_gt", ",", "depth_pred", ")", "\n", "\n", "for", "i", ",", "metric", "in", "enumerate", "(", "self", ".", "depth_metric_names", ")", ":", "\n", "            ", "losses", "[", "metric", "]", "=", "np", ".", "array", "(", "depth_errors", "[", "i", "]", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log_time": [[685, 696], ["print", "time.time", "print_string.format", "utils.sec_to_hm_str", "utils.sec_to_hm_str"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.sec_to_hm_str", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.sec_to_hm_str"], ["", "", "def", "log_time", "(", "self", ",", "batch_idx", ",", "duration", ",", "loss", ")", ":", "\n", "        ", "\"\"\"Print a logging statement to the terminal\n        \"\"\"", "\n", "samples_per_sec", "=", "self", ".", "opt", ".", "batch_size", "/", "duration", "\n", "time_sofar", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "training_time_left", "=", "(", "\n", "self", ".", "num_total_steps", "/", "self", ".", "step", "-", "1.0", ")", "*", "time_sofar", "if", "self", ".", "step", ">", "0", "else", "0", "\n", "print_string", "=", "\"epoch {:>3} | batch {:>6} | examples/s: {:5.1f}\"", "+", "\" | loss: {:.5f} | time elapsed: {} | time left: {}\"", "\n", "print", "(", "print_string", ".", "format", "(", "self", ".", "epoch", ",", "batch_idx", ",", "samples_per_sec", ",", "loss", ",", "\n", "sec_to_hm_str", "(", "time_sofar", ")", ",", "sec_to_hm_str", "(", "training_time_left", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log": [[697, 732], ["losses.items", "writer.add_scalar"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "mode", ",", "inputs", ",", "outputs", ",", "losses", ")", ":", "\n", "        ", "\"\"\"Write an event to the tensorboard events file\n        \"\"\"", "\n", "writer", "=", "self", ".", "writers", "[", "mode", "]", "\n", "for", "l", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "\"{}\"", ".", "format", "(", "l", ")", ",", "v", ",", "self", ".", "step", ")", "\n", "\n", "", "'''\n        for j in range(min(4, self.opt.batch_size)):  # write a maxmimum of four images\n            for s in self.opt.scales:\n                for frame_id in self.opt.frame_ids:\n                    writer.add_image(\n                        \"color_{}_{}/{}\".format(frame_id, s, j),\n                        inputs[(\"color\", frame_id, s)][j].data, self.step)\n                    if s == 0 and frame_id != 0:\n                        writer.add_image(\n                            \"color_pred_{}_{}/{}\".format(frame_id, s, j),\n                            outputs[(\"color\", frame_id, s)][j].data, self.step)\n\n                writer.add_image(\n                    \"disp_{}/{}\".format(s, j),\n                    normalize_image(outputs[(\"disp\", s)][j]), self.step)\n\n                if self.opt.predictive_mask:\n                    for f_idx, frame_id in enumerate(self.opt.frame_ids[1:]):\n                        writer.add_image(\n                            \"predictive_mask_{}_{}/{}\".format(frame_id, s, j),\n                            outputs[\"predictive_mask\"][(\"disp\", s)][j, f_idx][None, ...],\n                            self.step)\n\n                elif not self.opt.disable_automasking:\n                    writer.add_image(\n                        \"automask_{}/{}\".format(s, j),\n                        outputs[\"identity_selection/{}\".format(s)][j][None, ...], self.step)\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.save_opts": [[733, 743], ["os.path.join", "season_trainer.Trainer.opt.__dict__.copy", "os.path.exists", "os.makedirs", "open", "json.dump", "os.path.join"], "methods", ["None"], ["", "def", "save_opts", "(", "self", ")", ":", "\n", "        ", "\"\"\"Save options to disk so we know what we ran this experiment with\n        \"\"\"", "\n", "models_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "\"models\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "models_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "models_dir", ")", "\n", "", "to_save", "=", "self", ".", "opt", ".", "__dict__", ".", "copy", "(", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "'opt.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "to_save", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.save_model": [[744, 763], ["os.path.join", "season_trainer.Trainer.models.items", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.exists", "os.makedirs", "os.path.join", "model.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "season_trainer.Trainer.model_optimizer.state_dict"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"Save model weights to disk\n        \"\"\"", "\n", "save_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_path", ",", "\"models\"", ",", "\"weights_{}\"", ".", "format", "(", "self", ".", "epoch", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_folder", ")", "\n", "\n", "", "for", "model_name", ",", "model", "in", "self", ".", "models", ".", "items", "(", ")", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "\"{}.pth\"", ".", "format", "(", "model_name", ")", ")", "\n", "to_save", "=", "model", ".", "state_dict", "(", ")", "\n", "if", "model_name", "==", "'encoder'", ":", "\n", "# save the sizes - these are needed at prediction time", "\n", "                ", "to_save", "[", "'height'", "]", "=", "self", ".", "opt", ".", "height", "\n", "to_save", "[", "'width'", "]", "=", "self", ".", "opt", ".", "width", "\n", "to_save", "[", "'use_stereo'", "]", "=", "self", ".", "opt", ".", "use_stereo", "\n", "", "torch", ".", "save", "(", "to_save", ",", "save_path", ")", "\n", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "\"{}.pth\"", ".", "format", "(", "\"adam\"", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "model_optimizer", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.load_model": [[764, 790], ["os.path.expanduser", "os.path.isdir", "print", "os.path.join", "os.path.isfile", "print", "os.path.join", "season_trainer.Trainer.models[].state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "season_trainer.Trainer.update", "season_trainer.Trainer.models[].load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "season_trainer.Trainer.model_optimizer.load_state_dict", "print", "torch.load.items", "torch.load.items", "torch.load.items"], "methods", ["None"], ["", "def", "load_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load model(s) from disk\n        \"\"\"", "\n", "self", ".", "opt", ".", "load_weights_folder", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "opt", ".", "load_weights_folder", ")", "\n", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "self", ".", "opt", ".", "load_weights_folder", ")", ",", "\"Cannot find folder {}\"", ".", "format", "(", "self", ".", "opt", ".", "load_weights_folder", ")", "\n", "print", "(", "\"loading model from folder {}\"", ".", "format", "(", "self", ".", "opt", ".", "load_weights_folder", ")", ")", "\n", "\n", "for", "n", "in", "self", ".", "opt", ".", "models_to_load", ":", "\n", "            ", "print", "(", "\"Loading {} weights...\"", ".", "format", "(", "n", ")", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "load_weights_folder", ",", "\"{}.pth\"", ".", "format", "(", "n", ")", ")", "\n", "model_dict", "=", "self", ".", "models", "[", "n", "]", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "path", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "self", ".", "models", "[", "n", "]", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "# loading adam state", "\n", "", "optimizer_load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "load_weights_folder", ",", "\"adam.pth\"", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "optimizer_load_path", ")", ":", "\n", "            ", "print", "(", "\"Loading Adam weights\"", ")", "\n", "optimizer_dict", "=", "torch", ".", "load", "(", "optimizer_load_path", ")", "\n", "self", ".", "model_optimizer", ".", "load_state_dict", "(", "optimizer_dict", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Cannot find Adam weights so Adam is randomly initialized\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.ConvBlock.__init__": [[104, 109], ["torch.Module.__init__", "layers.Conv3x3", "torch.ELU", "torch.ELU", "torch.ELU"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "Conv3x3", "(", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "nonlin", "=", "nn", ".", "ELU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.ConvBlock.forward": [[110, 114], ["layers.ConvBlock.conv", "layers.ConvBlock.nonlin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "nonlin", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.Conv3x3.__init__": [[119, 127], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "use_refl", "=", "True", ")", ":", "\n", "        ", "super", "(", "Conv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "use_refl", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "1", ")", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_channels", ")", ",", "int", "(", "out_channels", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.Conv3x3.forward": [[128, 132], ["layers.Conv3x3.pad", "layers.Conv3x3.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pad", "(", "x", ")", "\n", "out", "=", "self", ".", "conv", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.BackprojectDepth.__init__": [[137, 157], ["torch.Module.__init__", "numpy.meshgrid", "numpy.stack().astype", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "layers.BackprojectDepth.pix_coords.repeat", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.stack", "layers.BackprojectDepth.id_coords[].view", "layers.BackprojectDepth.id_coords[].view"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "height", ",", "width", ")", ":", "\n", "        ", "super", "(", "BackprojectDepth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "\n", "meshgrid", "=", "np", ".", "meshgrid", "(", "range", "(", "self", ".", "width", ")", ",", "range", "(", "self", ".", "height", ")", ",", "indexing", "=", "'xy'", ")", "\n", "self", ".", "id_coords", "=", "np", ".", "stack", "(", "meshgrid", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "id_coords", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "self", ".", "id_coords", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "ones", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "batch_size", ",", "1", ",", "self", ".", "height", "*", "self", ".", "width", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "\n", "self", ".", "pix_coords", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "stack", "(", "\n", "[", "self", ".", "id_coords", "[", "0", "]", ".", "view", "(", "-", "1", ")", ",", "self", ".", "id_coords", "[", "1", "]", ".", "view", "(", "-", "1", ")", "]", ",", "0", ")", ",", "0", ")", "\n", "self", ".", "pix_coords", "=", "self", ".", "pix_coords", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "self", ".", "pix_coords", "=", "nn", ".", "Parameter", "(", "torch", ".", "cat", "(", "[", "self", ".", "pix_coords", ",", "self", ".", "ones", "]", ",", "1", ")", ",", "\n", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.BackprojectDepth.forward": [[158, 164], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "depth.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "depth", ",", "inv_K", ")", ":", "\n", "        ", "cam_points", "=", "torch", ".", "matmul", "(", "inv_K", "[", ":", ",", ":", "3", ",", ":", "3", "]", ",", "self", ".", "pix_coords", ")", "\n", "cam_points", "=", "depth", ".", "view", "(", "self", ".", "batch_size", ",", "1", ",", "-", "1", ")", "*", "cam_points", "\n", "cam_points", "=", "torch", ".", "cat", "(", "[", "cam_points", ",", "self", ".", "ones", "]", ",", "1", ")", "\n", "\n", "return", "cam_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.Project3D.__init__": [[169, 176], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "height", ",", "width", ",", "eps", "=", "1e-7", ")", ":", "\n", "        ", "super", "(", "Project3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.Project3D.forward": [[177, 189], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pix_coords.permute.permute.view", "pix_coords.permute.permute.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "cam_points[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "points", ",", "K", ",", "T", ")", ":", "\n", "        ", "P", "=", "torch", ".", "matmul", "(", "K", ",", "T", ")", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "\n", "cam_points", "=", "torch", ".", "matmul", "(", "P", ",", "points", ")", "\n", "\n", "pix_coords", "=", "cam_points", "[", ":", ",", ":", "2", ",", ":", "]", "/", "(", "cam_points", "[", ":", ",", "2", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "eps", ")", "\n", "pix_coords", "=", "pix_coords", ".", "view", "(", "self", ".", "batch_size", ",", "2", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "pix_coords", "=", "pix_coords", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "pix_coords", "[", "...", ",", "0", "]", "/=", "self", ".", "width", "-", "1", "\n", "pix_coords", "[", "...", ",", "1", "]", "/=", "self", ".", "height", "-", "1", "\n", "pix_coords", "=", "(", "pix_coords", "-", "0.5", ")", "*", "2", "\n", "return", "pix_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.SSIM.__init__": [[216, 228], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mu_x_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "mu_y_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_x_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_y_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "self", ".", "sig_xy_pool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "1", ")", "\n", "\n", "self", ".", "refl", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "\n", "self", ".", "C1", "=", "0.01", "**", "2", "\n", "self", ".", "C2", "=", "0.03", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.SSIM.forward": [[229, 244], ["layers.SSIM.refl", "layers.SSIM.refl", "layers.SSIM.mu_x_pool", "layers.SSIM.mu_y_pool", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "layers.SSIM.sig_x_pool", "layers.SSIM.sig_y_pool", "layers.SSIM.sig_xy_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "self", ".", "refl", "(", "x", ")", "\n", "y", "=", "self", ".", "refl", "(", "y", ")", "\n", "\n", "mu_x", "=", "self", ".", "mu_x_pool", "(", "x", ")", "\n", "mu_y", "=", "self", ".", "mu_y_pool", "(", "y", ")", "\n", "\n", "sigma_x", "=", "self", ".", "sig_x_pool", "(", "x", "**", "2", ")", "-", "mu_x", "**", "2", "\n", "sigma_y", "=", "self", ".", "sig_y_pool", "(", "y", "**", "2", ")", "-", "mu_y", "**", "2", "\n", "sigma_xy", "=", "self", ".", "sig_xy_pool", "(", "x", "*", "y", ")", "-", "mu_x", "*", "mu_y", "\n", "\n", "SSIM_n", "=", "(", "2", "*", "mu_x", "*", "mu_y", "+", "self", ".", "C1", ")", "*", "(", "2", "*", "sigma_xy", "+", "self", ".", "C2", ")", "\n", "SSIM_d", "=", "(", "mu_x", "**", "2", "+", "mu_y", "**", "2", "+", "self", ".", "C1", ")", "*", "(", "sigma_x", "+", "sigma_y", "+", "self", ".", "C2", ")", "\n", "\n", "return", "torch", ".", "clamp", "(", "(", "1", "-", "SSIM_n", "/", "SSIM_d", ")", "/", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.disp_to_depth": [[11, 21], ["None"], "function", ["None"], ["def", "disp_to_depth", "(", "disp", ",", "min_depth", ",", "max_depth", ")", ":", "\n", "    ", "\"\"\"Convert network's sigmoid output into depth prediction\n    The formula for this conversion is given in the 'additional considerations'\n    section of the paper.\n    \"\"\"", "\n", "min_disp", "=", "1", "/", "max_depth", "\n", "max_disp", "=", "1", "/", "min_depth", "\n", "scaled_disp", "=", "min_disp", "+", "(", "max_disp", "-", "min_disp", ")", "*", "disp", "\n", "depth", "=", "1", "/", "scaled_disp", "\n", "return", "scaled_disp", ",", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.transformation_from_parameters": [[23, 41], ["layers.rot_from_axisangle", "translation.clone", "layers.get_translation_matrix", "R.transpose.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.rot_from_axisangle", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.get_translation_matrix"], ["", "def", "transformation_from_parameters", "(", "axisangle", ",", "translation", ",", "invert", "=", "False", ")", ":", "\n", "    ", "\"\"\"Convert the network's (axisangle, translation) output into a 4x4 matrix\n    \"\"\"", "\n", "R", "=", "rot_from_axisangle", "(", "axisangle", ")", "\n", "t", "=", "translation", ".", "clone", "(", ")", "\n", "\n", "if", "invert", ":", "\n", "        ", "R", "=", "R", ".", "transpose", "(", "1", ",", "2", ")", "\n", "t", "*=", "-", "1", "\n", "\n", "", "T", "=", "get_translation_matrix", "(", "t", ")", "\n", "\n", "if", "invert", ":", "\n", "        ", "M", "=", "torch", ".", "matmul", "(", "R", ",", "T", ")", "\n", "", "else", ":", "\n", "        ", "M", "=", "torch", ".", "matmul", "(", "T", ",", "R", ")", "\n", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.get_translation_matrix": [[43, 57], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "translation_vector.contiguous().view", "torch.zeros", "torch.zeros", "torch.zeros", "translation_vector.contiguous"], "function", ["None"], ["", "def", "get_translation_matrix", "(", "translation_vector", ")", ":", "\n", "    ", "\"\"\"Convert a translation vector into a 4x4 transformation matrix\n    \"\"\"", "\n", "T", "=", "torch", ".", "zeros", "(", "translation_vector", ".", "shape", "[", "0", "]", ",", "4", ",", "4", ")", ".", "to", "(", "device", "=", "translation_vector", ".", "device", ")", "\n", "\n", "t", "=", "translation_vector", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "3", ",", "1", ")", "\n", "\n", "T", "[", ":", ",", "0", ",", "0", "]", "=", "1", "\n", "T", "[", ":", ",", "1", ",", "1", "]", "=", "1", "\n", "T", "[", ":", ",", "2", ",", "2", "]", "=", "1", "\n", "T", "[", ":", ",", "3", ",", "3", "]", "=", "1", "\n", "T", "[", ":", ",", ":", "3", ",", "3", ",", "None", "]", "=", "t", "\n", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.rot_from_axisangle": [[59, 99], ["torch.norm", "torch.norm", "torch.norm", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "axis[].unsqueeze", "axis[].unsqueeze", "axis[].unsqueeze", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "rot_from_axisangle", "(", "vec", ")", ":", "\n", "    ", "\"\"\"Convert an axisangle rotation into a 4x4 transformation matrix\n    (adapted from https://github.com/Wallacoloo/printipi)\n    Input 'vec' has to be Bx1x3\n    \"\"\"", "\n", "angle", "=", "torch", ".", "norm", "(", "vec", ",", "2", ",", "2", ",", "True", ")", "\n", "axis", "=", "vec", "/", "(", "angle", "+", "1e-7", ")", "\n", "\n", "ca", "=", "torch", ".", "cos", "(", "angle", ")", "\n", "sa", "=", "torch", ".", "sin", "(", "angle", ")", "\n", "C", "=", "1", "-", "ca", "\n", "\n", "x", "=", "axis", "[", "...", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "y", "=", "axis", "[", "...", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "z", "=", "axis", "[", "...", ",", "2", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "xs", "=", "x", "*", "sa", "\n", "ys", "=", "y", "*", "sa", "\n", "zs", "=", "z", "*", "sa", "\n", "xC", "=", "x", "*", "C", "\n", "yC", "=", "y", "*", "C", "\n", "zC", "=", "z", "*", "C", "\n", "xyC", "=", "x", "*", "yC", "\n", "yzC", "=", "y", "*", "zC", "\n", "zxC", "=", "z", "*", "xC", "\n", "\n", "rot", "=", "torch", ".", "zeros", "(", "(", "vec", ".", "shape", "[", "0", "]", ",", "4", ",", "4", ")", ")", ".", "to", "(", "device", "=", "vec", ".", "device", ")", "\n", "\n", "rot", "[", ":", ",", "0", ",", "0", "]", "=", "torch", ".", "squeeze", "(", "x", "*", "xC", "+", "ca", ")", "\n", "rot", "[", ":", ",", "0", ",", "1", "]", "=", "torch", ".", "squeeze", "(", "xyC", "-", "zs", ")", "\n", "rot", "[", ":", ",", "0", ",", "2", "]", "=", "torch", ".", "squeeze", "(", "zxC", "+", "ys", ")", "\n", "rot", "[", ":", ",", "1", ",", "0", "]", "=", "torch", ".", "squeeze", "(", "xyC", "+", "zs", ")", "\n", "rot", "[", ":", ",", "1", ",", "1", "]", "=", "torch", ".", "squeeze", "(", "y", "*", "yC", "+", "ca", ")", "\n", "rot", "[", ":", ",", "1", ",", "2", "]", "=", "torch", ".", "squeeze", "(", "yzC", "-", "xs", ")", "\n", "rot", "[", ":", ",", "2", ",", "0", "]", "=", "torch", ".", "squeeze", "(", "zxC", "-", "ys", ")", "\n", "rot", "[", ":", ",", "2", ",", "1", "]", "=", "torch", ".", "squeeze", "(", "yzC", "+", "xs", ")", "\n", "rot", "[", ":", ",", "2", ",", "2", "]", "=", "torch", ".", "squeeze", "(", "z", "*", "zC", "+", "ca", ")", "\n", "rot", "[", ":", ",", "3", ",", "3", "]", "=", "1", "\n", "\n", "return", "rot", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.upsample": [[191, 195], ["torch.interpolate"], "function", ["None"], ["", "", "def", "upsample", "(", "x", ")", ":", "\n", "    ", "\"\"\"Upsample input tensor by a factor of 2\n    \"\"\"", "\n", "return", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.get_smooth_loss": [[197, 211], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs.mean", "torch.abs.mean"], "function", ["None"], ["", "def", "get_smooth_loss", "(", "disp", ",", "img", ")", ":", "\n", "    ", "\"\"\"Computes the smoothness loss for a disparity image\n    The color image is used for edge-aware smoothness\n    \"\"\"", "\n", "grad_disp_x", "=", "torch", ".", "abs", "(", "disp", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "-", "disp", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ")", "\n", "grad_disp_y", "=", "torch", ".", "abs", "(", "disp", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "-", "disp", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", ")", "\n", "\n", "grad_img_x", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "img", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", "-", "img", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "grad_img_y", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "img", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "-", "img", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "grad_disp_x", "*=", "torch", ".", "exp", "(", "-", "grad_img_x", ")", "\n", "grad_disp_y", "*=", "torch", ".", "exp", "(", "-", "grad_img_y", ")", "\n", "\n", "return", "grad_disp_x", ".", "mean", "(", ")", "+", "grad_disp_y", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.compute_depth_errors": [[246, 265], ["torch.max", "torch.max", "torch.max", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt.mean", "torch.sqrt.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.abs", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log"], ["", "", "def", "compute_depth_errors", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Computation of error metrics between predicted and ground truth depths\n    \"\"\"", "\n", "thresh", "=", "torch", ".", "max", "(", "(", "gt", "/", "pred", ")", ",", "(", "pred", "/", "gt", ")", ")", "\n", "a1", "=", "(", "thresh", "<", "1.25", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "\n", "rmse", "=", "(", "gt", "-", "pred", ")", "**", "2", "\n", "rmse", "=", "torch", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "rmse_log", "=", "(", "torch", ".", "log", "(", "gt", ")", "-", "torch", ".", "log", "(", "pred", ")", ")", "**", "2", "\n", "rmse_log", "=", "torch", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "abs_rel", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "gt", "-", "pred", ")", "/", "gt", ")", "\n", "\n", "sq_rel", "=", "torch", ".", "mean", "(", "(", "gt", "-", "pred", ")", "**", "2", "/", "gt", ")", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n", "", ""]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.test_simple.parse_args": [[23, 52], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.test_simple.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Simple testing funtion for Monodepthv2 models.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--image_path'", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to a test image or folder of images'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "type", "=", "str", ",", "\n", "help", "=", "'name of a pretrained model to use'", ",", "\n", "choices", "=", "[", "\n", "\"mono_640x192\"", ",", "\n", "\"stereo_640x192\"", ",", "\n", "\"mono+stereo_640x192\"", ",", "\n", "\"mono_no_pt_640x192\"", ",", "\n", "\"stereo_no_pt_640x192\"", ",", "\n", "\"mono+stereo_no_pt_640x192\"", ",", "\n", "\"mono_1024x320\"", ",", "\n", "\"stereo_1024x320\"", ",", "\n", "\"mono+stereo_1024x320\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--ext'", ",", "type", "=", "str", ",", "\n", "help", "=", "'image extension to search for in folder'", ",", "default", "=", "\"jpg\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_cuda\"", ",", "\n", "help", "=", "'if set, disables CUDA'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--pred_metric_depth\"", ",", "\n", "help", "=", "'if set, predicts metric depth instead of disparity. (This only '", "\n", "'makes sense for stereo-trained KITTI models).'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.test_simple.test_simple": [[54, 163], ["utils.download_model_if_doesnt_exist", "os.path.join", "print", "os.path.join", "os.path.join", "print", "networks.ResnetEncoder", "torch.load", "networks.ResnetEncoder.load_state_dict", "networks.ResnetEncoder.to", "networks.ResnetEncoder.eval", "print", "networks.DepthDecoder", "torch.load", "networks.DepthDecoder.load_state_dict", "networks.DepthDecoder.to", "networks.DepthDecoder.eval", "os.path.isfile", "print", "print", "torch.cuda.is_available", "torch.device", "torch.device", "print", "os.path.dirname", "os.path.isdir", "torch.no_grad", "enumerate", "torch.load.items", "range", "glob.glob", "Exception", "len", "image_path.endswith", "PIL.open().convert", "input_image.to.resize", "input_image.to.to", "networks.ResnetEncoder.", "networks.DepthDecoder.", "torch.nn.functional.interpolate", "layers.disp_to_depth", "torch.nn.functional.interpolate.squeeze().cpu().numpy", "numpy.percentile", "matplotlib.colors.Normalize", "matplotlib.ScalarMappable", "PIL.fromarray", "os.path.join", "pil.fromarray.save", "print", "print", "print", "networks.ResnetEncoder.state_dict", "os.path.join", "os.path.splitext", "os.path.join", "numpy.save", "os.path.join", "numpy.save", "PIL.open", "os.path.basename", "depth.cpu().numpy", "scaled_disp.cpu().numpy", "torch.nn.functional.interpolate.squeeze().cpu", "disp_resized.squeeze().cpu().numpy.min", "len", "torchvision.transforms.ToTensor", "depth.cpu", "scaled_disp.cpu", "torch.nn.functional.interpolate.squeeze", "cm.ScalarMappable.to_rgba"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.download_model_if_doesnt_exist", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.disp_to_depth"], ["", "def", "test_simple", "(", "args", ")", ":", "\n", "    ", "\"\"\"Function to predict for a single image or folder of images\n    \"\"\"", "\n", "assert", "args", ".", "model_name", "is", "not", "None", ",", "\"You must specify the --model_name parameter; see README.md for an example\"", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "args", ".", "no_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "", "if", "args", ".", "pred_metric_depth", "and", "\"stereo\"", "not", "in", "args", ".", "model_name", ":", "\n", "        ", "print", "(", "\"Warning: The --pred_metric_depth flag only makes sense for stereo-trained KITTI \"", "\n", "\"models. For mono-trained models, output depths will not in metric space.\"", ")", "\n", "\n", "", "download_model_if_doesnt_exist", "(", "args", ".", "model_name", ")", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "\"models\"", ",", "args", ".", "model_name", ")", "\n", "print", "(", "\"-> Loading model from \"", ",", "model_path", ")", "\n", "encoder_path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "\"encoder.pth\"", ")", "\n", "depth_decoder_path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "\"depth.pth\"", ")", "\n", "\n", "# LOADING PRETRAINED MODEL", "\n", "print", "(", "\"   Loading pretrained encoder\"", ")", "\n", "encoder", "=", "networks", ".", "ResnetEncoder", "(", "18", ",", "False", ")", "\n", "loaded_dict_enc", "=", "torch", ".", "load", "(", "encoder_path", ",", "map_location", "=", "device", ")", "\n", "\n", "# extract the height and width of image that this model was trained with", "\n", "feed_height", "=", "loaded_dict_enc", "[", "'height'", "]", "\n", "feed_width", "=", "loaded_dict_enc", "[", "'width'", "]", "\n", "filtered_dict_enc", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "loaded_dict_enc", ".", "items", "(", ")", "if", "k", "in", "encoder", ".", "state_dict", "(", ")", "}", "\n", "encoder", ".", "load_state_dict", "(", "filtered_dict_enc", ")", "\n", "encoder", ".", "to", "(", "device", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "\n", "print", "(", "\"   Loading pretrained decoder\"", ")", "\n", "depth_decoder", "=", "networks", ".", "DepthDecoder", "(", "\n", "num_ch_enc", "=", "encoder", ".", "num_ch_enc", ",", "scales", "=", "range", "(", "4", ")", ")", "\n", "\n", "loaded_dict", "=", "torch", ".", "load", "(", "depth_decoder_path", ",", "map_location", "=", "device", ")", "\n", "depth_decoder", ".", "load_state_dict", "(", "loaded_dict", ")", "\n", "\n", "depth_decoder", ".", "to", "(", "device", ")", "\n", "depth_decoder", ".", "eval", "(", ")", "\n", "\n", "# FINDING INPUT IMAGES", "\n", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "image_path", ")", ":", "\n", "# Only testing on a single image", "\n", "        ", "paths", "=", "[", "args", ".", "image_path", "]", "\n", "output_directory", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "image_path", ")", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "args", ".", "image_path", ")", ":", "\n", "# Searching folder for images", "\n", "        ", "paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "image_path", ",", "'*.{}'", ".", "format", "(", "args", ".", "ext", ")", ")", ")", "\n", "output_directory", "=", "args", ".", "image_path", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Can not find args.image_path: {}\"", ".", "format", "(", "args", ".", "image_path", ")", ")", "\n", "\n", "", "print", "(", "\"-> Predicting on {:d} test images\"", ".", "format", "(", "len", "(", "paths", ")", ")", ")", "\n", "\n", "# PREDICTING ON EACH IMAGE IN TURN", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "idx", ",", "image_path", "in", "enumerate", "(", "paths", ")", ":", "\n", "\n", "            ", "if", "image_path", ".", "endswith", "(", "\"_disp.jpg\"", ")", ":", "\n", "# don't try to predict disparity for a disparity image!", "\n", "                ", "continue", "\n", "\n", "# Load image and preprocess", "\n", "", "input_image", "=", "pil", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "original_width", ",", "original_height", "=", "input_image", ".", "size", "\n", "input_image", "=", "input_image", ".", "resize", "(", "(", "feed_width", ",", "feed_height", ")", ",", "pil", ".", "LANCZOS", ")", "\n", "input_image", "=", "transforms", ".", "ToTensor", "(", ")", "(", "input_image", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# PREDICTION", "\n", "input_image", "=", "input_image", ".", "to", "(", "device", ")", "\n", "features", "=", "encoder", "(", "input_image", ")", "\n", "outputs", "=", "depth_decoder", "(", "features", ")", "\n", "\n", "disp", "=", "outputs", "[", "(", "\"disp\"", ",", "0", ")", "]", "\n", "disp_resized", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "disp", ",", "(", "original_height", ",", "original_width", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", ")", "\n", "\n", "# Saving numpy file", "\n", "output_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "image_path", ")", ")", "[", "0", "]", "\n", "scaled_disp", ",", "depth", "=", "disp_to_depth", "(", "disp", ",", "0.1", ",", "100", ")", "\n", "if", "args", ".", "pred_metric_depth", ":", "\n", "                ", "name_dest_npy", "=", "os", ".", "path", ".", "join", "(", "output_directory", ",", "\"{}_depth.npy\"", ".", "format", "(", "output_name", ")", ")", "\n", "metric_depth", "=", "STEREO_SCALE_FACTOR", "*", "depth", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np", ".", "save", "(", "name_dest_npy", ",", "metric_depth", ")", "\n", "", "else", ":", "\n", "                ", "name_dest_npy", "=", "os", ".", "path", ".", "join", "(", "output_directory", ",", "\"{}_disp.npy\"", ".", "format", "(", "output_name", ")", ")", "\n", "np", ".", "save", "(", "name_dest_npy", ",", "scaled_disp", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# Saving colormapped depth image", "\n", "", "disp_resized_np", "=", "disp_resized", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vmax", "=", "np", ".", "percentile", "(", "disp_resized_np", ",", "95", ")", "\n", "normalizer", "=", "mpl", ".", "colors", ".", "Normalize", "(", "vmin", "=", "disp_resized_np", ".", "min", "(", ")", ",", "vmax", "=", "vmax", ")", "\n", "mapper", "=", "cm", ".", "ScalarMappable", "(", "norm", "=", "normalizer", ",", "cmap", "=", "'magma'", ")", "\n", "colormapped_im", "=", "(", "mapper", ".", "to_rgba", "(", "disp_resized_np", ")", "[", ":", ",", ":", ",", ":", "3", "]", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "im", "=", "pil", ".", "fromarray", "(", "colormapped_im", ")", "\n", "\n", "name_dest_im", "=", "os", ".", "path", ".", "join", "(", "output_directory", ",", "\"{}_disp.jpeg\"", ".", "format", "(", "output_name", ")", ")", "\n", "im", ".", "save", "(", "name_dest_im", ")", "\n", "\n", "print", "(", "\"   Processed {:d} of {:d} images - saved predictions to:\"", ".", "format", "(", "\n", "idx", "+", "1", ",", "len", "(", "paths", ")", ")", ")", "\n", "print", "(", "\"   - {}\"", ".", "format", "(", "name_dest_im", ")", ")", "\n", "print", "(", "\"   - {}\"", ".", "format", "(", "name_dest_npy", ")", ")", "\n", "\n", "", "", "print", "(", "'-> Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.readlines": [[10, 16], ["open", "f.read().splitlines", "f.read"], "function", ["None"], ["def", "readlines", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Read all the lines in a text file and return as a list\n    \"\"\"", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.normalize_image": [[18, 25], ["float", "float", "x.max().cpu", "x.min().cpu", "x.max", "x.min"], "function", ["None"], ["", "def", "normalize_image", "(", "x", ")", ":", "\n", "    ", "\"\"\"Rescale image pixels to span range [0, 1]\n    \"\"\"", "\n", "ma", "=", "float", "(", "x", ".", "max", "(", ")", ".", "cpu", "(", ")", ".", "data", ")", "\n", "mi", "=", "float", "(", "x", ".", "min", "(", ")", ".", "cpu", "(", ")", ".", "data", ")", "\n", "d", "=", "ma", "-", "mi", "if", "ma", "!=", "mi", "else", "1e5", "\n", "return", "(", "x", "-", "mi", ")", "/", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.sec_to_hm": [[27, 37], ["int"], "function", ["None"], ["", "def", "sec_to_hm", "(", "t", ")", ":", "\n", "    ", "\"\"\"Convert time in seconds to time in hours, minutes and seconds\n    e.g. 10239 -> (2, 50, 39)\n    \"\"\"", "\n", "t", "=", "int", "(", "t", ")", "\n", "s", "=", "t", "%", "60", "\n", "t", "//=", "60", "\n", "m", "=", "t", "%", "60", "\n", "t", "//=", "60", "\n", "return", "t", ",", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.sec_to_hm_str": [[39, 45], ["utils.sec_to_hm"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.sec_to_hm"], ["", "def", "sec_to_hm_str", "(", "t", ")", ":", "\n", "    ", "\"\"\"Convert time in seconds to a nice string\n    e.g. 10239 -> '02h50m39s'\n    \"\"\"", "\n", "h", ",", "m", ",", "s", "=", "sec_to_hm", "(", "t", ")", "\n", "return", "\"{:02d}h{:02d}m{:02d}s\"", ".", "format", "(", "h", ",", "m", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.download_model_if_doesnt_exist": [[47, 111], ["os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "print", "print", "os.path.exists", "open", "hashlib.md5().hexdigest", "os.path.join", "utils.download_model_if_doesnt_exist.check_file_matches_md5"], "function", ["None"], ["", "def", "download_model_if_doesnt_exist", "(", "model_name", ")", ":", "\n", "    ", "\"\"\"If pretrained kitti model doesn't exist, download and unzip it\n    \"\"\"", "\n", "# values are tuples of (<google cloud URL>, <md5 checksum>)", "\n", "download_paths", "=", "{", "\n", "\"mono_640x192\"", ":", "\n", "(", "\"https://storage.googleapis.com/niantic-lon-static/research/monodepth2/mono_640x192.zip\"", ",", "\n", "\"a964b8356e08a02d009609d9e3928f7c\"", ")", ",", "\n", "\"stereo_640x192\"", ":", "\n", "(", "\"https://storage.googleapis.com/niantic-lon-static/research/monodepth2/stereo_640x192.zip\"", ",", "\n", "\"3dfb76bcff0786e4ec07ac00f658dd07\"", ")", ",", "\n", "\"mono+stereo_640x192\"", ":", "\n", "(", "\"https://storage.googleapis.com/niantic-lon-static/research/monodepth2/mono%2Bstereo_640x192.zip\"", ",", "\n", "\"c024d69012485ed05d7eaa9617a96b81\"", ")", ",", "\n", "\"mono_no_pt_640x192\"", ":", "\n", "(", "\"https://storage.googleapis.com/niantic-lon-static/research/monodepth2/mono_no_pt_640x192.zip\"", ",", "\n", "\"9c2f071e35027c895a4728358ffc913a\"", ")", ",", "\n", "\"stereo_no_pt_640x192\"", ":", "\n", "(", "\"https://storage.googleapis.com/niantic-lon-static/research/monodepth2/stereo_no_pt_640x192.zip\"", ",", "\n", "\"41ec2de112905f85541ac33a854742d1\"", ")", ",", "\n", "\"mono+stereo_no_pt_640x192\"", ":", "\n", "(", "\"https://storage.googleapis.com/niantic-lon-static/research/monodepth2/mono%2Bstereo_no_pt_640x192.zip\"", ",", "\n", "\"46c3b824f541d143a45c37df65fbab0a\"", ")", ",", "\n", "\"mono_1024x320\"", ":", "\n", "(", "\"https://storage.googleapis.com/niantic-lon-static/research/monodepth2/mono_1024x320.zip\"", ",", "\n", "\"0ab0766efdfeea89a0d9ea8ba90e1e63\"", ")", ",", "\n", "\"stereo_1024x320\"", ":", "\n", "(", "\"https://storage.googleapis.com/niantic-lon-static/research/monodepth2/stereo_1024x320.zip\"", ",", "\n", "\"afc2f2126d70cf3fdf26b550898b501a\"", ")", ",", "\n", "\"mono+stereo_1024x320\"", ":", "\n", "(", "\"https://storage.googleapis.com/niantic-lon-static/research/monodepth2/mono%2Bstereo_1024x320.zip\"", ",", "\n", "\"cdc5fc9b23513c07d5b19235d9ef08f7\"", ")", ",", "\n", "}", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"models\"", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "\"models\"", ")", "\n", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "\"models\"", ",", "model_name", ")", "\n", "\n", "def", "check_file_matches_md5", "(", "checksum", ",", "fpath", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "fpath", ")", ":", "\n", "            ", "return", "False", "\n", "", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "current_md5checksum", "=", "hashlib", ".", "md5", "(", "f", ".", "read", "(", ")", ")", ".", "hexdigest", "(", ")", "\n", "", "return", "current_md5checksum", "==", "checksum", "\n", "\n", "# see if we have the model already downloaded...", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "model_path", ",", "\"encoder.pth\"", ")", ")", ":", "\n", "\n", "        ", "model_url", ",", "required_md5checksum", "=", "download_paths", "[", "model_name", "]", "\n", "\n", "if", "not", "check_file_matches_md5", "(", "required_md5checksum", ",", "model_path", "+", "\".zip\"", ")", ":", "\n", "            ", "print", "(", "\"-> Downloading pretrained model to {}\"", ".", "format", "(", "model_path", "+", "\".zip\"", ")", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "model_url", ",", "model_path", "+", "\".zip\"", ")", "\n", "\n", "", "if", "not", "check_file_matches_md5", "(", "required_md5checksum", ",", "model_path", "+", "\".zip\"", ")", ":", "\n", "            ", "print", "(", "\"   Failed to download a file which matches the checksum - quitting\"", ")", "\n", "quit", "(", ")", "\n", "\n", "", "print", "(", "\"   Unzipping model...\"", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "model_path", "+", "\".zip\"", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "f", ".", "extractall", "(", "model_path", ")", "\n", "\n", "", "print", "(", "\"   Model unzipped to {}\"", ".", "format", "(", "model_path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.mono_dataset.MonoDataset.__init__": [[35, 82], ["torch.Dataset.__init__", "torchvision.transforms.ToTensor", "mono_dataset.MonoDataset.check_depth", "torchvision.transforms.ColorJitter.get_params", "torchvision.transforms.Resize"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__", "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIDataset.check_depth"], ["def", "__init__", "(", "self", ",", "\n", "data_path", ",", "\n", "filenames", ",", "\n", "height", ",", "\n", "width", ",", "\n", "frame_idxs", ",", "\n", "scales", ",", "\n", "is_train", "=", "False", ",", "\n", "img_ext", "=", "'.jpg'", ")", ":", "\n", "        ", "super", "(", "MonoDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "filenames", "=", "filenames", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "scales", "=", "scales", "\n", "#self.interp = Image.ANTIALIAS", "\n", "self", ".", "interp", "=", "InterpolationMode", ".", "LANCZOS", "#torchvision>0.8.2", "\n", "\n", "self", ".", "frame_idxs", "=", "frame_idxs", "\n", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "img_ext", "=", "img_ext", "\n", "\n", "self", ".", "loader", "=", "pil_loader", "\n", "self", ".", "to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "brightness", "=", "(", "0.8", ",", "1.2", ")", "\n", "self", ".", "contrast", "=", "(", "0.8", ",", "1.2", ")", "\n", "self", ".", "saturation", "=", "(", "0.8", ",", "1.2", ")", "\n", "self", ".", "hue", "=", "(", "-", "0.1", ",", "0.1", ")", "\n", "transforms", ".", "ColorJitter", ".", "get_params", "(", "\n", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "self", ".", "brightness", "=", "0.2", "\n", "self", ".", "contrast", "=", "0.2", "\n", "self", ".", "saturation", "=", "0.2", "\n", "self", ".", "hue", "=", "0.1", "\n", "\n", "", "self", ".", "resize", "=", "{", "}", "\n", "for", "i", "in", "self", ".", "scales", ":", "\n", "            ", "s", "=", "2", "**", "i", "\n", "self", ".", "resize", "[", "i", "]", "=", "transforms", ".", "Resize", "(", "(", "self", ".", "height", "//", "s", ",", "self", ".", "width", "//", "s", ")", ",", "\n", "interpolation", "=", "self", ".", "interp", ")", "\n", "\n", "", "self", ".", "load_depth", "=", "self", ".", "check_depth", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.mono_dataset.MonoDataset.preprocess": [[83, 105], ["list", "list", "mono_dataset.MonoDataset.to_tensor", "mono_dataset.MonoDataset.to_tensor", "color_aug"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "inputs", ",", "color_aug", ")", ":", "\n", "        ", "\"\"\"Resize colour images to the required scales and augment if required\n\n        We create the color_aug object in advance and apply the same augmentation to all\n        images in this item. This ensures that all images input to the pose network receive the\n        same augmentation.\n        \"\"\"", "\n", "for", "k", "in", "list", "(", "inputs", ")", ":", "\n", "            ", "frame", "=", "inputs", "[", "k", "]", "\n", "if", "\"color\"", "in", "k", ":", "\n", "                ", "n", ",", "im", ",", "i", "=", "k", "\n", "for", "i", "in", "self", ".", "scales", ":", "\n", "                    ", "if", "i", "-", "1", "in", "self", ".", "scales", "or", "i", "==", "0", ":", "\n", "                        ", "inputs", "[", "(", "n", ",", "im", ",", "i", ")", "]", "=", "self", ".", "resize", "[", "i", "]", "(", "inputs", "[", "(", "n", ",", "im", ",", "i", "-", "1", ")", "]", ")", "\n", "", "else", ":", "\n", "                        ", "inputs", "[", "(", "n", ",", "im", ",", "i", ")", "]", "=", "self", ".", "resize", "[", "i", "]", "(", "inputs", "[", "(", "n", ",", "im", ",", "i", "-", "2", ")", "]", ")", "\n", "", "", "", "", "for", "k", "in", "list", "(", "inputs", ")", ":", "\n", "            ", "f", "=", "inputs", "[", "k", "]", "\n", "if", "\"color\"", "in", "k", ":", "\n", "                ", "n", ",", "im", ",", "i", "=", "k", "\n", "inputs", "[", "(", "n", ",", "im", ",", "i", ")", "]", "=", "self", ".", "to_tensor", "(", "f", ")", "\n", "inputs", "[", "(", "n", "+", "\"_aug\"", ",", "im", ",", "i", ")", "]", "=", "self", ".", "to_tensor", "(", "color_aug", "(", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.mono_dataset.MonoDataset.__len__": [[106, 108], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.mono_dataset.MonoDataset.__getitem__": [[109, 197], ["mono_dataset.MonoDataset.filenames[].split", "mono_dataset.MonoDataset.preprocess", "len", "int", "len", "mono_dataset.MonoDataset.K.copy", "numpy.linalg.pinv", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torchvision.transforms.ColorJitter", "mono_dataset.MonoDataset.get_depth", "numpy.expand_dims", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.eye", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "random.random", "random.random", "mono_dataset.MonoDataset.get_color", "mono_dataset.MonoDataset.get_color", "inputs[].astype"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_mono_dataset.MonoDataset.preprocess", "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIDepthDataset.get_depth", "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIDataset.get_color", "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIDataset.get_color"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Returns a single training item from the dataset as a dictionary.\n\n        Values correspond to torch tensors.\n        Keys in the dictionary are either strings or tuples:\n\n            (\"color\", <frame_id>, <scale>)          for raw colour images,\n            (\"color_aug\", <frame_id>, <scale>)      for augmented colour images,\n            (\"K\", scale) or (\"inv_K\", scale)        for camera intrinsics,\n            \"stereo_T\"                              for camera extrinsics, and\n            \"depth_gt\"                              for ground truth depth maps.\n\n        <frame_id> is either:\n            an integer (e.g. 0, -1, or 1) representing the temporal step relative to 'index',\n        or\n            \"s\" for the opposite image in the stereo pair.\n\n        <scale> is an integer representing the scale of the image relative to the fullsize image:\n            -1      images at native resolution as loaded from disk\n            0       images resized to (self.width,      self.height     )\n            1       images resized to (self.width // 2, self.height // 2)\n            2       images resized to (self.width // 4, self.height // 4)\n            3       images resized to (self.width // 8, self.height // 8)\n        \"\"\"", "\n", "inputs", "=", "{", "}", "\n", "\n", "do_color_aug", "=", "self", ".", "is_train", "and", "random", ".", "random", "(", ")", ">", "0.5", "\n", "do_flip", "=", "self", ".", "is_train", "and", "random", ".", "random", "(", ")", ">", "0.5", "\n", "\n", "line", "=", "self", ".", "filenames", "[", "index", "]", ".", "split", "(", ")", "\n", "folder", "=", "line", "[", "0", "]", "\n", "\n", "if", "len", "(", "line", ")", "==", "3", ":", "\n", "            ", "frame_index", "=", "int", "(", "line", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "frame_index", "=", "0", "\n", "\n", "", "if", "len", "(", "line", ")", "==", "3", ":", "\n", "            ", "side", "=", "line", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "side", "=", "None", "\n", "\n", "", "for", "i", "in", "self", ".", "frame_idxs", ":", "\n", "            ", "if", "i", "==", "\"s\"", ":", "\n", "                ", "other_side", "=", "{", "\"r\"", ":", "\"l\"", ",", "\"l\"", ":", "\"r\"", "}", "[", "side", "]", "\n", "inputs", "[", "(", "\"color\"", ",", "i", ",", "-", "1", ")", "]", "=", "self", ".", "get_color", "(", "folder", ",", "frame_index", ",", "other_side", ",", "do_flip", ")", "\n", "", "else", ":", "\n", "                ", "inputs", "[", "(", "\"color\"", ",", "i", ",", "-", "1", ")", "]", "=", "self", ".", "get_color", "(", "folder", ",", "frame_index", "+", "i", ",", "side", ",", "do_flip", ")", "\n", "\n", "# adjusting intrinsics to match each scale in the pyramid", "\n", "", "", "for", "scale", "in", "self", ".", "scales", ":", "\n", "            ", "K", "=", "self", ".", "K", ".", "copy", "(", ")", "\n", "\n", "K", "[", "0", ",", ":", "]", "*=", "self", ".", "width", "//", "(", "2", "**", "scale", ")", "\n", "K", "[", "1", ",", ":", "]", "*=", "self", ".", "height", "//", "(", "2", "**", "scale", ")", "\n", "\n", "inv_K", "=", "np", ".", "linalg", ".", "pinv", "(", "K", ")", "\n", "\n", "inputs", "[", "(", "\"K\"", ",", "scale", ")", "]", "=", "torch", ".", "from_numpy", "(", "K", ")", "\n", "inputs", "[", "(", "\"inv_K\"", ",", "scale", ")", "]", "=", "torch", ".", "from_numpy", "(", "inv_K", ")", "\n", "\n", "", "if", "do_color_aug", ":", "\n", "#color_aug = transforms.ColorJitter.get_params(", "\n", "            ", "color_aug", "=", "transforms", ".", "ColorJitter", "(", "\n", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "", "else", ":", "\n", "            ", "color_aug", "=", "(", "lambda", "x", ":", "x", ")", "\n", "\n", "", "self", ".", "preprocess", "(", "inputs", ",", "color_aug", ")", "\n", "\n", "for", "i", "in", "self", ".", "frame_idxs", ":", "\n", "            ", "del", "inputs", "[", "(", "\"color\"", ",", "i", ",", "-", "1", ")", "]", "\n", "del", "inputs", "[", "(", "\"color_aug\"", ",", "i", ",", "-", "1", ")", "]", "\n", "\n", "", "if", "self", ".", "load_depth", ":", "\n", "            ", "depth_gt", "=", "self", ".", "get_depth", "(", "folder", ",", "frame_index", ",", "side", ",", "do_flip", ")", "\n", "inputs", "[", "\"depth_gt\"", "]", "=", "np", ".", "expand_dims", "(", "depth_gt", ",", "0", ")", "\n", "inputs", "[", "\"depth_gt\"", "]", "=", "torch", ".", "from_numpy", "(", "inputs", "[", "\"depth_gt\"", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "if", "\"s\"", "in", "self", ".", "frame_idxs", ":", "\n", "            ", "stereo_T", "=", "np", ".", "eye", "(", "4", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "baseline_sign", "=", "-", "1", "if", "do_flip", "else", "1", "\n", "side_sign", "=", "-", "1", "if", "side", "==", "\"l\"", "else", "1", "\n", "stereo_T", "[", "0", ",", "3", "]", "=", "side_sign", "*", "baseline_sign", "*", "0.1", "\n", "\n", "inputs", "[", "\"stereo_T\"", "]", "=", "torch", ".", "from_numpy", "(", "stereo_T", ")", "\n", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.mono_dataset.MonoDataset.get_color": [[198, 200], ["None"], "methods", ["None"], ["", "def", "get_color", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ",", "do_flip", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.mono_dataset.MonoDataset.check_depth": [[201, 203], ["None"], "methods", ["None"], ["", "def", "check_depth", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.mono_dataset.MonoDataset.get_depth": [[204, 206], ["None"], "methods", ["None"], ["", "def", "get_depth", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ",", "do_flip", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.mono_dataset.pil_loader": [[14, 20], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning", "\n", "# (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_mono_dataset.MonoDataset.__init__": [[36, 83], ["torch.Dataset.__init__", "torchvision.transforms.ToTensor", "torchvision.transforms.ColorJitter.get_params", "torchvision.transforms.Resize"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "\n", "data_path", ",", "\n", "filenames", ",", "\n", "height", ",", "\n", "width", ",", "\n", "frame_idxs", ",", "\n", "scales", ",", "\n", "is_train", "=", "False", ",", "\n", "img_ext", "=", "'.jpg'", ")", ":", "\n", "        ", "super", "(", "MonoDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "filenames", "=", "filenames", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "scales", "=", "scales", "\n", "#self.interp = Image.ANTIALIAS", "\n", "self", ".", "interp", "=", "InterpolationMode", ".", "LANCZOS", "#torchvision>0.8.2", "\n", "\n", "self", ".", "frame_idxs", "=", "frame_idxs", "\n", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "img_ext", "=", "img_ext", "\n", "\n", "self", ".", "loader", "=", "pil_loader", "\n", "self", ".", "to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n", "# We need to specify augmentations differently in newer versions of torchvision.", "\n", "# We first try the newer tuple version; if this fails we fall back to scalars", "\n", "try", ":", "\n", "            ", "self", ".", "brightness", "=", "(", "0.8", ",", "1.2", ")", "\n", "self", ".", "contrast", "=", "(", "0.8", ",", "1.2", ")", "\n", "self", ".", "saturation", "=", "(", "0.8", ",", "1.2", ")", "\n", "self", ".", "hue", "=", "(", "-", "0.1", ",", "0.1", ")", "\n", "transforms", ".", "ColorJitter", ".", "get_params", "(", "\n", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "self", ".", "brightness", "=", "0.2", "\n", "self", ".", "contrast", "=", "0.2", "\n", "self", ".", "saturation", "=", "0.2", "\n", "self", ".", "hue", "=", "0.1", "\n", "\n", "", "self", ".", "resize", "=", "{", "}", "\n", "for", "i", "in", "scales", "[", "1", ":", "]", ":", "\n", "            ", "s", "=", "2", "**", "i", "\n", "self", ".", "resize", "[", "i", "]", "=", "transforms", ".", "Resize", "(", "(", "self", ".", "height", "//", "s", ",", "self", ".", "width", "//", "s", ")", ",", "\n", "interpolation", "=", "self", ".", "interp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_mono_dataset.MonoDataset.preprocess": [[84, 104], ["list", "seasondepth_mono_dataset.MonoDataset.to_tensor", "range", "seasondepth_mono_dataset.MonoDataset.to_tensor", "len", "seasondepth_mono_dataset.MonoDataset.to_tensor", "color_aug"], "methods", ["None"], ["", "", "def", "preprocess", "(", "self", ",", "inputs", ",", "color_aug", ")", ":", "\n", "        ", "\"\"\"Resize colour images to the required scales and augment if required\n\n        We create the color_aug object in advance and apply the same augmentation to all\n        images in this item. This ensures that all images input to the pose network receive the\n        same augmentation.\n        \"\"\"", "\n", "for", "k", "in", "list", "(", "inputs", ")", ":", "\n", "            ", "f", "=", "inputs", "[", "k", "]", "\n", "if", "\"color\"", "in", "k", ":", "\n", "                ", "n", ",", "im", ",", "i", "=", "k", "\n", "if", "self", ".", "is_train", "and", "im", "==", "0", ":", "\n", "                    ", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "scales", ")", ")", ":", "\n", "                        ", "inputs", "[", "(", "n", ",", "im", ",", "self", ".", "scales", "[", "i", "]", ")", "]", "=", "self", ".", "resize", "[", "self", ".", "scales", "[", "i", "]", "]", "(", "inputs", "[", "(", "n", ",", "im", ",", "self", ".", "scales", "[", "i", "-", "1", "]", ")", "]", ")", "\n", "", "for", "i", "in", "self", ".", "scales", "[", "1", ":", "]", ":", "\n", "                        ", "inputs", "[", "(", "n", ",", "im", ",", "i", ")", "]", "=", "self", ".", "to_tensor", "(", "inputs", "[", "(", "n", ",", "im", ",", "i", ")", "]", ")", "\n", "", "", "n", ",", "im", ",", "i", "=", "k", "\n", "inputs", "[", "(", "n", ",", "im", ",", "i", ")", "]", "=", "self", ".", "to_tensor", "(", "f", ")", "\n", "if", "self", ".", "is_train", ":", "\n", "                    ", "inputs", "[", "(", "n", "+", "\"_aug\"", ",", "im", ",", "i", ")", "]", "=", "self", ".", "to_tensor", "(", "color_aug", "(", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_mono_dataset.MonoDataset.__len__": [[106, 108], ["len"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_mono_dataset.MonoDataset.__getitem__": [[109, 174], ["seasondepth_mono_dataset.MonoDataset.filenames[].split", "seasondepth_mono_dataset.MonoDataset.preprocess", "torchvision.transforms.ColorJitter", "seasondepth_mono_dataset.MonoDataset.get_color", "seasondepth_mono_dataset.MonoDataset.K.copy", "numpy.linalg.pinv", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "seasondepth_mono_dataset.MonoDataset.get_depth", "numpy.expand_dims", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "random.random", "random.random", "inputs[].astype"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_mono_dataset.MonoDataset.preprocess", "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIDataset.get_color", "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIDepthDataset.get_depth"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Returns a single training item from the dataset as a dictionary.\n\n        Values correspond to torch tensors.\n        Keys in the dictionary are either strings or tuples:\n\n            (\"color\", <frame_id>, <scale>)          for raw colour images,\n            (\"color_aug\", <frame_id>, <scale>)      for augmented colour images,\n            (\"K\", scale) or (\"inv_K\", scale)        for camera intrinsics,\n            \"stereo_T\"                              for camera extrinsics, and\n            \"depth_gt\"                              for ground truth depth maps.\n\n        <frame_id> is either:\n            an integer (e.g. 0, -1, or 1) representing the temporal step relative to 'index',\n        or\n            \"s\" for the opposite image in the stereo pair.\n\n        <scale> is an integer representing the scale of the image relative to the fullsize image:\n            -1      images at native resolution as loaded from disk\n            0       images resized to (self.width,      self.height     )\n            1       images resized to (self.width // 2, self.height // 2)\n            2       images resized to (self.width // 4, self.height // 4)\n            3       images resized to (self.width // 8, self.height // 8)\n        \"\"\"", "\n", "inputs", "=", "{", "}", "\n", "\n", "do_color_aug", "=", "self", ".", "is_train", "and", "random", ".", "random", "(", ")", ">", "0.5", "\n", "do_flip", "=", "self", ".", "is_train", "and", "random", ".", "random", "(", ")", ">", "0.5", "\n", "\n", "if", "do_color_aug", ":", "\n", "            ", "color_aug", "=", "transforms", ".", "ColorJitter", "(", "\n", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "", "else", ":", "\n", "            ", "color_aug", "=", "(", "lambda", "x", ":", "x", ")", "\n", "\n", "", "fs", "=", "self", ".", "filenames", "[", "index", "]", ".", "split", "(", ")", "\n", "\n", "indexs", "=", "{", "0", ":", "1", ",", "-", "1", ":", "2", ",", "1", ":", "3", "}", "\n", "\n", "for", "i", "in", "self", ".", "frame_idxs", ":", "\n", "                ", "inputs", "[", "(", "\"color\"", ",", "i", ",", "0", ")", "]", "=", "self", ".", "get_color", "(", "fs", "[", "0", "]", ",", "fs", "[", "indexs", "[", "i", "]", "]", ",", "do_flip", ")", "\n", "\n", "# adjusting intrinsics to match each scale in the pyramid", "\n", "#for scale in range(self.num_scales):", "\n", "", "if", "self", ".", "is_train", ":", "\n", "            ", "scale", "=", "0", "\n", "K", "=", "self", ".", "K", ".", "copy", "(", ")", "\n", "\n", "K", "[", "0", ",", ":", "]", "*=", "self", ".", "width", "//", "(", "2", "**", "scale", ")", "\n", "K", "[", "1", ",", ":", "]", "*=", "self", ".", "height", "//", "(", "2", "**", "scale", ")", "\n", "\n", "inv_K", "=", "np", ".", "linalg", ".", "pinv", "(", "K", ")", "\n", "\n", "inputs", "[", "(", "\"K\"", ",", "scale", ")", "]", "=", "torch", ".", "from_numpy", "(", "K", ")", "\n", "inputs", "[", "(", "\"inv_K\"", ",", "scale", ")", "]", "=", "torch", ".", "from_numpy", "(", "inv_K", ")", "\n", "\n", "", "self", ".", "preprocess", "(", "inputs", ",", "color_aug", ")", "\n", "\n", "\n", "if", "(", "not", "self", ".", "is_train", ")", "and", "self", ".", "load_depth", ":", "\n", "            ", "depth_gt", "=", "self", ".", "get_depth", "(", "fs", "[", "0", "]", ",", "fs", "[", "1", "]", ")", "\n", "inputs", "[", "\"depth_gt\"", "]", "=", "np", ".", "expand_dims", "(", "depth_gt", ",", "0", ")", "\n", "inputs", "[", "\"depth_gt\"", "]", "=", "torch", ".", "from_numpy", "(", "inputs", "[", "\"depth_gt\"", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_mono_dataset.MonoDataset.get_color": [[175, 177], ["None"], "methods", ["None"], ["", "def", "get_color", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ",", "do_flip", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_mono_dataset.MonoDataset.get_depth": [[179, 181], ["None"], "methods", ["None"], ["", "def", "get_depth", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ",", "do_flip", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_mono_dataset.pil_loader": [[15, 21], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning", "\n", "# (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.pred_season_depth.compute_errors": [[27, 46], ["numpy.maximum", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.mean", "np.sqrt.mean", "np.sqrt.mean", "numpy.log", "numpy.log", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.season_trainer.Trainer.log"], ["\n", "def", "compute_errors", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "\"\"\"Computation of error metrics between predicted and ground truth depths\n    \"\"\"", "\n", "thresh", "=", "np", ".", "maximum", "(", "(", "gt", "/", "pred", ")", ",", "(", "pred", "/", "gt", ")", ")", "\n", "a1", "=", "(", "thresh", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "a2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "a3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "\n", "rmse", "=", "(", "gt", "-", "pred", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "rmse_log", "=", "(", "np", ".", "log", "(", "gt", ")", "-", "np", ".", "log", "(", "pred", ")", ")", "**", "2", "\n", "rmse_log", "=", "np", ".", "sqrt", "(", "rmse_log", ".", "mean", "(", ")", ")", "\n", "\n", "abs_rel", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "gt", "-", "pred", ")", "/", "gt", ")", "\n", "\n", "sq_rel", "=", "np", ".", "mean", "(", "(", "(", "gt", "-", "pred", ")", "**", "2", ")", "/", "gt", ")", "\n", "\n", "return", "abs_rel", ",", "sq_rel", ",", "rmse", ",", "rmse_log", ",", "a1", ",", "a2", ",", "a3", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.pred_season_depth.batch_post_process_disparity": [[48, 57], ["numpy.meshgrid", "numpy.linspace", "numpy.linspace", "numpy.clip"], "function", ["None"], ["\n", "", "def", "batch_post_process_disparity", "(", "l_disp", ",", "r_disp", ")", ":", "\n", "    ", "\"\"\"Apply the disparity post-processing method as introduced in Monodepthv1\n    \"\"\"", "\n", "_", ",", "h", ",", "w", "=", "l_disp", ".", "shape", "\n", "m_disp", "=", "0.5", "*", "(", "l_disp", "+", "r_disp", ")", "\n", "l", ",", "_", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "w", ")", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "h", ")", ")", "\n", "l_mask", "=", "(", "1.0", "-", "np", ".", "clip", "(", "20", "*", "(", "l", "-", "0.05", ")", ",", "0", ",", "1", ")", ")", "[", "None", ",", "...", "]", "\n", "r_mask", "=", "l_mask", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "r_mask", "*", "l_disp", "+", "l_mask", "*", "r_disp", "+", "(", "1.0", "-", "l_mask", "-", "r_mask", ")", "*", "m_disp", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.pred_season_depth.evaluate": [[59, 150], ["sum", "os.path.expanduser", "os.path.isdir", "print", "utils.readlines", "os.path.join", "os.path.join", "torch.load", "datasets.SeasonDepthRAWDataset", "torch.utils.data.DataLoader", "networks.ResnetEncoder", "networks.DepthDecoder", "networks.ResnetEncoder.state_dict", "networks.ResnetEncoder.load_state_dict", "networks.DepthDecoder.load_state_dict", "networks.ResnetEncoder.cuda", "networks.ResnetEncoder.eval", "networks.DepthDecoder.cuda", "networks.DepthDecoder.eval", "print", "print", "print", "quit", "os.path.join", "torch.load", "os.path.exists", "os.makedirs", "torch.no_grad", "data[].cuda", "networks.DepthDecoder.", "layers.disp_to_depth", "[].numpy", "np.concatenate.append", "numpy.concatenate", "range", "torch.load.items", "torch.cat", "networks.ResnetEncoder.", "pred_season_depth.batch_post_process_disparity", "len", "cv2.resize", "numpy.clip", "numpy.uint16", "filenames[].split", "os.path.join", "os.path.join", "print", "cv2.imwrite", "os.path.exists", "os.makedirs", "torch.flip", "batch_post_process_disparity.cpu", "fdir.split"], "function", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.utils.readlines", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.disp_to_depth", "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.pred_season_depth.batch_post_process_disparity"], ["\n", "", "def", "evaluate", "(", "opt", ")", ":", "\n", "    ", "\"\"\"Evaluates a pretrained model using a specified test set\n    \"\"\"", "\n", "MIN_DEPTH", "=", "1e-3", "\n", "MAX_DEPTH", "=", "80", "\n", "\n", "assert", "sum", "(", "(", "opt", ".", "eval_mono", ",", "opt", ".", "eval_stereo", ")", ")", "==", "1", ",", "\"Please choose mono or stereo evaluation by setting either --eval_mono or --eval_stereo\"", "\n", "if", "opt", ".", "eval_mono", ":", "\n", "        ", "STEREO_SCALE_FACTOR", "=", "1.0", "\n", "", "elif", "opt", ".", "eval_stereo", ":", "\n", "        ", "STEREO_SCALE_FACTOR", "=", "5.4", "\n", "\n", "", "if", "opt", ".", "ext_disp_to_eval", "is", "None", ":", "\n", "\n", "        ", "opt", ".", "load_weights_folder", "=", "os", ".", "path", ".", "expanduser", "(", "opt", ".", "load_weights_folder", ")", "\n", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "opt", ".", "load_weights_folder", ")", ",", "\"Cannot find a folder at {}\"", ".", "format", "(", "opt", ".", "load_weights_folder", ")", "\n", "\n", "print", "(", "\"-> Loading weights from {}\"", ".", "format", "(", "opt", ".", "load_weights_folder", ")", ")", "\n", "\n", "filenames", "=", "readlines", "(", "os", ".", "path", ".", "join", "(", "splits_dir", ",", "opt", ".", "eval_split", ",", "opt", ".", "eval_set", "+", "\"_files.txt\"", ")", ")", "\n", "encoder_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "load_weights_folder", ",", "\"encoder.pth\"", ")", "\n", "decoder_path", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "load_weights_folder", ",", "\"depth.pth\"", ")", "\n", "\n", "encoder_dict", "=", "torch", ".", "load", "(", "encoder_path", ")", "\n", "\n", "dataset", "=", "datasets", ".", "SeasonTestDataset", "(", "opt", ".", "data_path", ",", "filenames", ",", "\n", "encoder_dict", "[", "'height'", "]", ",", "encoder_dict", "[", "'width'", "]", ",", "\n", "[", "0", "]", ",", "[", "0", "]", ",", "is_train", "=", "False", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "opt", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "opt", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "if", "opt", ".", "encoder", "==", "\"resnet\"", ":", "\n", "            ", "encoder", "=", "networks", ".", "ResnetEncoder", "(", "opt", ".", "num_layers", ",", "False", ")", "\n", "depth_decoder", "=", "networks", ".", "DepthDecoder", "(", "encoder", ".", "num_ch_enc", ")", "\n", "", "elif", "opt", ".", "encoder", "==", "\"van\"", ":", "\n", "            ", "encoder", "=", "networks", ".", "VANEncoder", "(", "opt", ".", "size_encoder", ",", "False", ")", "\n", "depth_decoder", "=", "networks", ".", "VANDecoder", "(", "encoder", ".", "num_ch_enc", ")", "\n", "\n", "", "model_dict", "=", "encoder", ".", "state_dict", "(", ")", "\n", "encoder", ".", "load_state_dict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "encoder_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", ")", "\n", "depth_decoder", ".", "load_state_dict", "(", "torch", ".", "load", "(", "decoder_path", ")", ")", "\n", "\n", "encoder", ".", "cuda", "(", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "depth_decoder", ".", "cuda", "(", ")", "\n", "depth_decoder", ".", "eval", "(", ")", "\n", "\n", "pred_disps", "=", "[", "]", "\n", "\n", "print", "(", "\"-> Computing predictions with size {}x{}\"", ".", "format", "(", "\n", "encoder_dict", "[", "'width'", "]", ",", "encoder_dict", "[", "'height'", "]", ")", ")", "\n", "\n", "save_dir", "=", "opt", ".", "pred_depth_path", "\n", "print", "(", "\"-> Saving out season depth predictions to {}\"", ".", "format", "(", "save_dir", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "print", "(", "\"-> Generating {} depth images\"", ".", "format", "(", "len", "(", "filenames", ")", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "j", "=", "0", "\n", "for", "data", "in", "tqdm", ".", "tqdm", "(", "dataloader", ")", ":", "\n", "                ", "pred_disps", "=", "[", "]", "\n", "input_color", "=", "data", "[", "(", "\"color\"", ",", "0", ",", "0", ")", "]", ".", "cuda", "(", ")", "\n", "\n", "if", "opt", ".", "post_process", ":", "\n", "# Post-processed results require each image to have two forward passes", "\n", "                    ", "input_color", "=", "torch", ".", "cat", "(", "(", "input_color", ",", "torch", ".", "flip", "(", "input_color", ",", "[", "3", "]", ")", ")", ",", "0", ")", "\n", "\n", "", "output", "=", "depth_decoder", "(", "encoder", "(", "input_color", ")", ")", "\n", "\n", "pred_disp", ",", "_", "=", "disp_to_depth", "(", "output", "[", "(", "\"disp\"", ",", "0", ")", "]", ",", "opt", ".", "min_depth", ",", "opt", ".", "max_depth", ")", "\n", "pred_disp", "=", "pred_disp", ".", "cpu", "(", ")", "[", ":", ",", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "if", "opt", ".", "post_process", ":", "\n", "                    ", "N", "=", "pred_disp", ".", "shape", "[", "0", "]", "//", "2", "\n", "pred_disp", "=", "batch_post_process_disparity", "(", "pred_disp", "[", ":", "N", "]", ",", "pred_disp", "[", "N", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n", "", "pred_disps", ".", "append", "(", "pred_disp", ")", "\n", "\n", "pred_disps", "=", "np", ".", "concatenate", "(", "pred_disps", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "pred_disps", ")", ")", ":", "\n", "                    ", "disp_resized", "=", "cv2", ".", "resize", "(", "pred_disps", "[", "idx", "]", ",", "(", "1024", ",", "768", ")", ")", "\n", "#disp_resized = cv2.resize(pred_disps[idx], (640, 192))", "\n", "depth", "=", "STEREO_SCALE_FACTOR", "/", "disp_resized", "\n", "depth", "=", "np", ".", "clip", "(", "depth", ",", "0", ",", "80", ")", "\n", "depth", "=", "np", ".", "uint16", "(", "depth", "*", "256", ")", "\n", "fdir", ",", "fn", "=", "filenames", "[", "j", "]", ".", "split", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_dataset.SeasonDepthDataset.__init__": [[15, 27], ["seasondepth_mono_dataset.MonoDataset.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SeasonDepthDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# NOTE: Make sure your intrinsics matrix is *normalized* by the original image size.", "\n", "# To normalize you need to scale the first row by 1 / image_width and the second row", "\n", "# by 1 / image_height. Monodepth2 assumes a principal point to be exactly centered.", "\n", "# If your principal point is far from the center you might need to disable the horizontal", "\n", "# flip augmentation.", "\n", "self", ".", "K", "=", "np", ".", "array", "(", "[", "[", "0.85", ",", "0", ",", "0.5", ",", "0", "]", ",", "\n", "[", "0", ",", "0.69", ",", "0.5", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_dataset.SeasonDepthDataset.get_color": [[30, 37], ["seasondepth_dataset.SeasonDepthDataset.loader", "seasondepth_dataset.SeasonDepthDataset.get_image_path", "color.transpose.transpose.resize", "color.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIDepthDataset.get_image_path"], ["", "def", "get_color", "(", "self", ",", "folder", ",", "filename", ",", "do_flip", ")", ":", "\n", "        ", "color", "=", "self", ".", "loader", "(", "self", ".", "get_image_path", "(", "folder", ",", "filename", ")", ")", "\n", "if", "color", ".", "size", "!=", "(", "self", ".", "width", ",", "self", ".", "height", ")", ":", "\n", "            ", "color", "=", "color", ".", "resize", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "", "if", "do_flip", ":", "\n", "            ", "color", "=", "color", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_dataset.SeasonTrainDataset.__init__": [[42, 45], ["seasondepth_dataset.SeasonDepthDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SeasonTrainDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "load_depth", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_dataset.SeasonTrainDataset.get_image_path": [[46, 50], ["os.path.join"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ",", "folder", ",", "filename", ")", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "folder", ",", "\"images\"", ",", "\"img_\"", "+", "filename", "+", "\"us.jpg\"", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_dataset.SeasonValDataset.__init__": [[55, 58], ["seasondepth_dataset.SeasonDepthDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SeasonValDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "load_depth", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_dataset.SeasonValDataset.get_image_path": [[59, 63], ["os.path.join"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ",", "folder", ",", "filename", ")", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "\"images\"", ",", "folder", ",", "\"img_\"", "+", "filename", "+", "\"us.jpg\"", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_dataset.SeasonValDataset.get_depth": [[64, 69], ["os.path.join", "cv2.imread"], "methods", ["None"], ["", "def", "get_depth", "(", "self", ",", "folder", ",", "filename", ")", ":", "\n", "        ", "gt_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "\"depth\"", ",", "folder", ",", "\"img_\"", "+", "filename", "+", "\"us.png\"", ")", "\n", "depth_gt", "=", "cv2", ".", "imread", "(", "gt_path", ",", "-", "1", ")", "\n", "return", "depth_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_dataset.SeasonTestDataset.__init__": [[73, 76], ["seasondepth_dataset.SeasonDepthDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SeasonTestDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "load_depth", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.seasondepth_dataset.SeasonTestDataset.get_image_path": [[77, 81], ["os.path.join"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ",", "folder", ",", "filename", ")", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "folder", ",", "\"img_\"", "+", "filename", "+", "\"us.jpg\"", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIDataset.__init__": [[16, 31], ["mono_dataset.MonoDataset.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "KITTIDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# NOTE: Make sure your intrinsics matrix is *normalized* by the original image size.", "\n", "# To normalize you need to scale the first row by 1 / image_width and the second row", "\n", "# by 1 / image_height. Monodepth2 assumes a principal point to be exactly centered.", "\n", "# If your principal point is far from the center you might need to disable the horizontal", "\n", "# flip augmentation.", "\n", "self", ".", "K", "=", "np", ".", "array", "(", "[", "[", "0.58", ",", "0", ",", "0.5", ",", "0", "]", ",", "\n", "[", "0", ",", "1.92", ",", "0.5", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "full_res_shape", "=", "(", "1242", ",", "375", ")", "\n", "self", ".", "side_map", "=", "{", "\"2\"", ":", "2", ",", "\"3\"", ":", "3", ",", "\"l\"", ":", "2", ",", "\"r\"", ":", "3", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIDataset.check_depth": [[32, 43], ["kitti_dataset.KITTIDataset.filenames[].split", "int", "os.path.join", "os.path.isfile", "int"], "methods", ["None"], ["", "def", "check_depth", "(", "self", ")", ":", "\n", "        ", "line", "=", "self", ".", "filenames", "[", "0", "]", ".", "split", "(", ")", "\n", "scene_name", "=", "line", "[", "0", "]", "\n", "frame_index", "=", "int", "(", "line", "[", "1", "]", ")", "\n", "\n", "velo_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "\n", "scene_name", ",", "\n", "\"velodyne_points/data/{:010d}.bin\"", ".", "format", "(", "int", "(", "frame_index", ")", ")", ")", "\n", "\n", "return", "os", ".", "path", ".", "isfile", "(", "velo_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIDataset.get_color": [[44, 51], ["kitti_dataset.KITTIDataset.loader", "kitti_dataset.KITTIDataset.get_image_path", "color.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIDepthDataset.get_image_path"], ["", "def", "get_color", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ",", "do_flip", ")", ":", "\n", "        ", "color", "=", "self", ".", "loader", "(", "self", ".", "get_image_path", "(", "folder", ",", "frame_index", ",", "side", ")", ")", "\n", "\n", "if", "do_flip", ":", "\n", "            ", "color", "=", "color", ".", "transpose", "(", "pil", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIRAWDataset.__init__": [[56, 58], ["kitti_dataset.KITTIDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "KITTIRAWDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIRAWDataset.get_image_path": [[59, 64], ["os.path.join"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ")", ":", "\n", "        ", "f_str", "=", "\"{:010d}{}\"", ".", "format", "(", "frame_index", ",", "self", ".", "img_ext", ")", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "folder", ",", "\"image_0{}/data\"", ".", "format", "(", "self", ".", "side_map", "[", "side", "]", ")", ",", "f_str", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIRAWDataset.get_depth": [[65, 81], ["os.path.join", "os.path.join", "kitti_utils.generate_depth_map", "skimage.transform.resize", "numpy.fliplr", "folder.split", "int"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.kitti_utils.generate_depth_map"], ["", "def", "get_depth", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ",", "do_flip", ")", ":", "\n", "        ", "calib_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "folder", ".", "split", "(", "\"/\"", ")", "[", "0", "]", ")", "\n", "\n", "velo_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "\n", "folder", ",", "\n", "\"velodyne_points/data/{:010d}.bin\"", ".", "format", "(", "int", "(", "frame_index", ")", ")", ")", "\n", "\n", "depth_gt", "=", "generate_depth_map", "(", "calib_path", ",", "velo_filename", ",", "self", ".", "side_map", "[", "side", "]", ")", "\n", "depth_gt", "=", "skimage", ".", "transform", ".", "resize", "(", "\n", "depth_gt", ",", "self", ".", "full_res_shape", "[", ":", ":", "-", "1", "]", ",", "order", "=", "0", ",", "preserve_range", "=", "True", ",", "mode", "=", "'constant'", ")", "\n", "\n", "if", "do_flip", ":", "\n", "            ", "depth_gt", "=", "np", ".", "fliplr", "(", "depth_gt", ")", "\n", "\n", "", "return", "depth_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIOdomDataset.__init__": [[86, 88], ["kitti_dataset.KITTIDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "KITTIOdomDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIOdomDataset.get_image_path": [[89, 97], ["os.path.join", "int"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ")", ":", "\n", "        ", "f_str", "=", "\"{:06d}{}\"", ".", "format", "(", "frame_index", ",", "self", ".", "img_ext", ")", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "\n", "\"sequences/{:02d}\"", ".", "format", "(", "int", "(", "folder", ")", ")", ",", "\n", "\"image_{}\"", ".", "format", "(", "self", ".", "side_map", "[", "side", "]", ")", ",", "\n", "f_str", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIDepthDataset.__init__": [[102, 104], ["kitti_dataset.KITTIDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "KITTIDepthDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIDepthDataset.get_image_path": [[105, 113], ["os.path.join"], "methods", ["None"], ["", "def", "get_image_path", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ")", ":", "\n", "        ", "f_str", "=", "\"{:010d}{}\"", ".", "format", "(", "frame_index", ",", "self", ".", "img_ext", ")", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "\n", "folder", ",", "\n", "\"image_0{}/data\"", ".", "format", "(", "self", ".", "side_map", "[", "side", "]", ")", ",", "\n", "f_str", ")", "\n", "return", "image_path", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.datasets.kitti_dataset.KITTIDepthDataset.get_depth": [[114, 130], ["os.path.join", "PIL.open", "numpy.fliplr.resize", "numpy.array().astype", "numpy.fliplr", "numpy.array"], "methods", ["None"], ["", "def", "get_depth", "(", "self", ",", "folder", ",", "frame_index", ",", "side", ",", "do_flip", ")", ":", "\n", "        ", "f_str", "=", "\"{:010d}.png\"", ".", "format", "(", "frame_index", ")", "\n", "depth_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_path", ",", "\n", "folder", ",", "\n", "\"proj_depth/groundtruth/image_0{}\"", ".", "format", "(", "self", ".", "side_map", "[", "side", "]", ")", ",", "\n", "f_str", ")", "\n", "\n", "depth_gt", "=", "pil", ".", "open", "(", "depth_path", ")", "\n", "depth_gt", "=", "depth_gt", ".", "resize", "(", "self", ".", "full_res_shape", ",", "pil", ".", "NEAREST", ")", "\n", "depth_gt", "=", "np", ".", "array", "(", "depth_gt", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "256", "\n", "\n", "if", "do_flip", ":", "\n", "            ", "depth_gt", "=", "np", ".", "fliplr", "(", "depth_gt", ")", "\n", "\n", "", "return", "depth_gt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.depth_decoder.DepthDecoder.__init__": [[12, 43], ["range", "torch.Module.__init__", "numpy.array", "collections.OrderedDict", "range", "torch.ModuleList", "torch.ModuleList", "torch.Sigmoid", "torch.Sigmoid", "ConvBlock", "ConvBlock", "Conv3x3", "list", "depth_decoder.DepthDecoder.convs.values"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch_enc", ",", "scales", "=", "range", "(", "4", ")", ",", "num_output_channels", "=", "1", ",", "use_skips", "=", "True", ")", ":", "\n", "        ", "super", "(", "DepthDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_output_channels", "=", "num_output_channels", "\n", "self", ".", "use_skips", "=", "use_skips", "\n", "self", ".", "upsample_mode", "=", "'nearest'", "\n", "self", ".", "scales", "=", "scales", "\n", "\n", "self", ".", "num_ch_enc", "=", "num_ch_enc", "\n", "self", ".", "num_ch_dec", "=", "np", ".", "array", "(", "[", "16", ",", "32", ",", "64", ",", "128", ",", "256", "]", ")", "\n", "\n", "# decoder", "\n", "self", ".", "convs", "=", "OrderedDict", "(", ")", "\n", "for", "i", "in", "range", "(", "4", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "# upconv_0", "\n", "            ", "num_ch_in", "=", "self", ".", "num_ch_enc", "[", "-", "1", "]", "if", "i", "==", "4", "else", "self", ".", "num_ch_dec", "[", "i", "+", "1", "]", "\n", "num_ch_out", "=", "self", ".", "num_ch_dec", "[", "i", "]", "\n", "self", ".", "convs", "[", "(", "\"upconv\"", ",", "i", ",", "0", ")", "]", "=", "ConvBlock", "(", "num_ch_in", ",", "num_ch_out", ")", "\n", "\n", "# upconv_1", "\n", "num_ch_in", "=", "self", ".", "num_ch_dec", "[", "i", "]", "\n", "if", "self", ".", "use_skips", "and", "i", ">", "0", ":", "\n", "                ", "num_ch_in", "+=", "self", ".", "num_ch_enc", "[", "i", "-", "1", "]", "\n", "", "num_ch_out", "=", "self", ".", "num_ch_dec", "[", "i", "]", "\n", "self", ".", "convs", "[", "(", "\"upconv\"", ",", "i", ",", "1", ")", "]", "=", "ConvBlock", "(", "num_ch_in", ",", "num_ch_out", ")", "\n", "\n", "", "for", "s", "in", "self", ".", "scales", ":", "\n", "            ", "self", ".", "convs", "[", "(", "\"dispconv\"", ",", "s", ")", "]", "=", "Conv3x3", "(", "self", ".", "num_ch_dec", "[", "s", "]", ",", "self", ".", "num_output_channels", ")", "\n", "\n", "", "self", ".", "decoder", "=", "nn", ".", "ModuleList", "(", "list", "(", "self", ".", "convs", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.depth_decoder.DepthDecoder.forward": [[44, 60], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "upsample", "depth_decoder.DepthDecoder.sigmoid"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.upsample"], ["", "def", "forward", "(", "self", ",", "input_features", ")", ":", "\n", "        ", "self", ".", "outputs", "=", "{", "}", "\n", "\n", "# decoder", "\n", "x", "=", "input_features", "[", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "4", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "x", "=", "self", ".", "convs", "[", "(", "\"upconv\"", ",", "i", ",", "0", ")", "]", "(", "x", ")", "\n", "x", "=", "[", "upsample", "(", "x", ")", "]", "\n", "if", "self", ".", "use_skips", "and", "i", ">", "0", ":", "\n", "                ", "x", "+=", "[", "input_features", "[", "i", "-", "1", "]", "]", "\n", "", "x", "=", "torch", ".", "cat", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "convs", "[", "(", "\"upconv\"", ",", "i", ",", "1", ")", "]", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "scales", ":", "\n", "                ", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "i", ")", "]", "=", "self", ".", "sigmoid", "(", "self", ".", "convs", "[", "(", "\"dispconv\"", ",", "i", ")", "]", "(", "x", ")", ")", "\n", "\n", "", "", "return", "self", ".", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.Mlp.__init__": [[12, 22], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "van.DWConv", "act_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "van.Mlp.apply"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "in_features", ",", "hidden_features", ",", "1", ")", "\n", "self", ".", "dwconv", "=", "DWConv", "(", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "hidden_features", ",", "out_features", ",", "1", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.Mlp._init_weights": [[23, 37], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.Mlp.forward": [[38, 46], ["van.Mlp.fc1", "van.Mlp.dwconv", "van.Mlp.act", "van.Mlp.drop", "van.Mlp.fc2", "van.Mlp.drop"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "dwconv", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.AttentionModule.__init__": [[51, 56], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "5", ",", "padding", "=", "2", ",", "groups", "=", "dim", ")", "\n", "self", ".", "conv_spatial", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "7", ",", "stride", "=", "1", ",", "padding", "=", "9", ",", "groups", "=", "dim", ",", "dilation", "=", "3", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.AttentionModule.forward": [[58, 65], ["x.clone", "van.AttentionModule.conv0", "van.AttentionModule.conv_spatial", "van.AttentionModule.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "u", "=", "x", ".", "clone", "(", ")", "\n", "attn", "=", "self", ".", "conv0", "(", "x", ")", "\n", "attn", "=", "self", ".", "conv_spatial", "(", "attn", ")", "\n", "attn", "=", "self", ".", "conv1", "(", "attn", ")", "\n", "\n", "return", "u", "*", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.SpatialAttention.__init__": [[68, 75], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GELU", "torch.GELU", "torch.GELU", "van.AttentionModule", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "proj_1", "=", "nn", ".", "Conv2d", "(", "d_model", ",", "d_model", ",", "1", ")", "\n", "self", ".", "activation", "=", "nn", ".", "GELU", "(", ")", "\n", "self", ".", "spatial_gating_unit", "=", "AttentionModule", "(", "d_model", ")", "\n", "self", ".", "proj_2", "=", "nn", ".", "Conv2d", "(", "d_model", ",", "d_model", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.SpatialAttention.forward": [[76, 84], ["van.SpatialAttention.clone", "van.SpatialAttention.proj_1", "van.SpatialAttention.activation", "van.SpatialAttention.spatial_gating_unit", "van.SpatialAttention.proj_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shorcut", "=", "x", ".", "clone", "(", ")", "\n", "x", "=", "self", ".", "proj_1", "(", "x", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "spatial_gating_unit", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_2", "(", "x", ")", "\n", "x", "=", "x", "+", "shorcut", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.Block.__init__": [[87, 103], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "van.SpatialAttention", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "int", "van.Mlp", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "van.Block.apply", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "mlp_ratio", "=", "4.", ",", "drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "dim", ")", "\n", "self", ".", "attn", "=", "SpatialAttention", "(", "dim", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm2d", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "layer_scale_init_value", "=", "1e-2", "\n", "self", ".", "layer_scale_1", "=", "nn", ".", "Parameter", "(", "\n", "layer_scale_init_value", "*", "torch", ".", "ones", "(", "(", "dim", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "layer_scale_2", "=", "nn", ".", "Parameter", "(", "\n", "layer_scale_init_value", "*", "torch", ".", "ones", "(", "(", "dim", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.Block._init_weights": [[104, 118], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.Block.forward": [[119, 123], ["van.Block.drop_path", "van.Block.drop_path", "van.Block.layer_scale_1.unsqueeze().unsqueeze", "van.Block.attn", "van.Block.layer_scale_2.unsqueeze().unsqueeze", "van.Block.mlp", "van.Block.norm1", "van.Block.norm2", "van.Block.layer_scale_1.unsqueeze", "van.Block.layer_scale_2.unsqueeze"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "layer_scale_1", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "layer_scale_2", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.OverlapPatchEmbed.__init__": [[129, 143], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "van.OverlapPatchEmbed.apply"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "7", ",", "stride", "=", "4", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "H", ",", "self", ".", "W", "=", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", "\n", "self", ".", "num_patches", "=", "self", ".", "H", "*", "self", ".", "W", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "(", "patch_size", "[", "0", "]", "//", "2", ",", "patch_size", "[", "1", "]", "//", "2", ")", ")", "\n", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "embed_dim", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.OverlapPatchEmbed._init_weights": [[144, 158], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.OverlapPatchEmbed.forward": [[159, 164], ["van.OverlapPatchEmbed.proj", "van.OverlapPatchEmbed.norm"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.VAN.__init__": [[168, 201], ["torch.Module.__init__", "range", "van.VAN.apply", "x.item", "van.OverlapPatchEmbed", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "setattr", "setattr", "setattr", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "sum", "van.Block", "range"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "\n", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "\n", "depths", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_stages", "=", "4", ",", "flag", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "flag", "==", "False", ":", "\n", "            ", "self", ".", "num_classes", "=", "num_classes", "\n", "", "self", ".", "depths", "=", "depths", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "# stochastic depth decay rule", "\n", "cur", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "num_stages", ")", ":", "\n", "            ", "patch_embed", "=", "OverlapPatchEmbed", "(", "img_size", "=", "img_size", "if", "i", "==", "0", "else", "img_size", "//", "(", "2", "**", "(", "i", "+", "1", ")", ")", ",", "\n", "patch_size", "=", "7", "if", "i", "==", "0", "else", "3", ",", "\n", "stride", "=", "4", "if", "i", "==", "0", "else", "2", ",", "\n", "in_chans", "=", "in_chans", "if", "i", "==", "0", "else", "embed_dims", "[", "i", "-", "1", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "i", "]", ")", "\n", "\n", "block", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "i", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "i", "]", ",", "drop", "=", "drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "j", "]", ")", "\n", "for", "j", "in", "range", "(", "depths", "[", "i", "]", ")", "]", ")", "\n", "norm", "=", "norm_layer", "(", "embed_dims", "[", "i", "]", ")", "\n", "cur", "+=", "depths", "[", "i", "]", "\n", "\n", "setattr", "(", "self", ",", "f\"patch_embed{i + 1}\"", ",", "patch_embed", ")", "\n", "setattr", "(", "self", ",", "f\"block{i + 1}\"", ",", "block", ")", "\n", "setattr", "(", "self", ",", "f\"norm{i + 1}\"", ",", "norm", ")", "\n", "\n", "# classification head", "\n", "", "self", ".", "head", "=", "nn", ".", "Linear", "(", "embed_dims", "[", "3", "]", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.VAN._init_weights": [[202, 216], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.VAN.freeze_patch_emb": [[217, 219], ["None"], "methods", ["None"], ["", "", "", "def", "freeze_patch_emb", "(", "self", ")", ":", "\n", "        ", "self", ".", "patch_embed1", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.VAN.no_weight_decay": [[220, 223], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos_embed1'", ",", "'pos_embed2'", ",", "'pos_embed3'", ",", "'pos_embed4'", ",", "'cls_token'", "}", "# has pos_embed may be better", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.VAN.get_classifier": [[224, 226], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.VAN.reset_classifier": [[227, 230], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["None"], ["", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "''", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "embed_dim", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.VAN.forward_features": [[231, 247], ["range", "x.reshape().permute().contiguous.reshape().permute().contiguous.mean", "getattr", "getattr", "getattr", "getattr.", "x.reshape().permute().contiguous.reshape().permute().contiguous.flatten().transpose", "getattr.", "blk", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute().contiguous", "x.reshape().permute().contiguous.reshape().permute().contiguous.flatten", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape().permute", "x.reshape().permute().contiguous.reshape().permute().contiguous.reshape"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "patch_embed", "=", "getattr", "(", "self", ",", "f\"patch_embed{i + 1}\"", ")", "\n", "block", "=", "getattr", "(", "self", ",", "f\"block{i + 1}\"", ")", "\n", "norm", "=", "getattr", "(", "self", ",", "f\"norm{i + 1}\"", ")", "\n", "x", ",", "H", ",", "W", "=", "patch_embed", "(", "x", ")", "\n", "for", "blk", "in", "block", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "norm", "(", "x", ")", "\n", "if", "i", "!=", "self", ".", "num_stages", "-", "1", ":", "\n", "                ", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "", "return", "x", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.VAN.forward": [[248, 253], ["van.VAN.forward_features", "van.VAN.head"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.VAN.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.DWConv.__init__": [[256, 259], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "768", ")", ":", "\n", "        ", "super", "(", "DWConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dwconv", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ",", "groups", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.DWConv.forward": [[260, 263], ["van.DWConv.dwconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "dwconv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van._conv_filter": [[265, 274], ["state_dict.items", "v.reshape.reshape"], "function", ["None"], ["", "", "def", "_conv_filter", "(", "state_dict", ",", "patch_size", "=", "16", ")", ":", "\n", "    ", "\"\"\" convert patch embedding weight from manual patchify + linear proj to conv\"\"\"", "\n", "out_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'patch_embed.proj.weight'", "in", "k", ":", "\n", "            ", "v", "=", "v", ".", "reshape", "(", "(", "v", ".", "shape", "[", "0", "]", ",", "3", ",", "patch_size", ",", "patch_size", ")", ")", "\n", "", "out_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.van_tiny": [[276, 285], ["van.VAN", "timm.models.vision_transformer._cfg", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "van_tiny", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VAN", "(", "\n", "embed_dims", "=", "[", "32", ",", "64", ",", "160", ",", "256", "]", ",", "mlp_ratios", "=", "[", "8", ",", "8", ",", "4", ",", "4", "]", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "3", ",", "5", ",", "2", "]", ",", "\n", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.van_small": [[287, 296], ["van.VAN", "timm.models.vision_transformer._cfg", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "van_small", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VAN", "(", "\n", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "mlp_ratios", "=", "[", "8", ",", "8", ",", "4", ",", "4", "]", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "2", ",", "2", ",", "4", ",", "2", "]", ",", "\n", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.van_base": [[297, 306], ["van.VAN", "timm.models.vision_transformer._cfg", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "van_base", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VAN", "(", "\n", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "mlp_ratios", "=", "[", "8", ",", "8", ",", "4", ",", "4", "]", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "3", ",", "12", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van.van_large": [[307, 316], ["van.VAN", "timm.models.vision_transformer._cfg", "functools.partial"], "function", ["None"], ["", "@", "register_model", "\n", "def", "van_large", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "VAN", "(", "\n", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "mlp_ratios", "=", "[", "8", ",", "8", ",", "4", ",", "4", "]", ",", "\n", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "5", ",", "27", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "model", ".", "default_cfg", "=", "_cfg", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_decoder.PoseDecoder.__init__": [[9, 28], ["torch.Module.__init__", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ModuleList", "torch.ModuleList", "list", "pose_decoder.PoseDecoder.convs.values"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch_enc", ",", "num_input_features", ",", "num_frames_to_predict_for", "=", "None", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PoseDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_ch_enc", "=", "num_ch_enc", "\n", "self", ".", "num_input_features", "=", "num_input_features", "\n", "\n", "if", "num_frames_to_predict_for", "is", "None", ":", "\n", "            ", "num_frames_to_predict_for", "=", "num_input_features", "-", "1", "\n", "", "self", ".", "num_frames_to_predict_for", "=", "num_frames_to_predict_for", "\n", "\n", "self", ".", "convs", "=", "OrderedDict", "(", ")", "\n", "self", ".", "convs", "[", "(", "\"squeeze\"", ")", "]", "=", "nn", ".", "Conv2d", "(", "self", ".", "num_ch_enc", "[", "-", "1", "]", ",", "256", ",", "1", ")", "\n", "self", ".", "convs", "[", "(", "\"pose\"", ",", "0", ")", "]", "=", "nn", ".", "Conv2d", "(", "num_input_features", "*", "256", ",", "256", ",", "3", ",", "stride", ",", "1", ")", "\n", "self", ".", "convs", "[", "(", "\"pose\"", ",", "1", ")", "]", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "stride", ",", "1", ")", "\n", "self", ".", "convs", "[", "(", "\"pose\"", ",", "2", ")", "]", "=", "nn", ".", "Conv2d", "(", "256", ",", "6", "*", "num_frames_to_predict_for", ",", "1", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "net", "=", "nn", ".", "ModuleList", "(", "list", "(", "self", ".", "convs", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_decoder.PoseDecoder.forward": [[29, 49], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "pose_decoder.PoseDecoder.mean().mean", "pose_decoder.PoseDecoder.relu", "pose_decoder.PoseDecoder.view", "pose_decoder.PoseDecoder.relu", "pose_decoder.PoseDecoder.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_features", ")", ":", "\n", "        ", "last_features", "=", "[", "f", "[", "-", "1", "]", "for", "f", "in", "input_features", "]", "\n", "\n", "cat_features", "=", "[", "self", ".", "relu", "(", "self", ".", "convs", "[", "\"squeeze\"", "]", "(", "f", ")", ")", "for", "f", "in", "last_features", "]", "\n", "cat_features", "=", "torch", ".", "cat", "(", "cat_features", ",", "1", ")", "\n", "\n", "out", "=", "cat_features", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "out", "=", "self", ".", "convs", "[", "(", "\"pose\"", ",", "i", ")", "]", "(", "out", ")", "\n", "if", "i", "!=", "2", ":", "\n", "                ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "", "out", "=", "out", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "\n", "out", "=", "0.01", "*", "out", ".", "view", "(", "-", "1", ",", "self", ".", "num_frames_to_predict_for", ",", "1", ",", "6", ")", "\n", "\n", "axisangle", "=", "out", "[", "...", ",", ":", "3", "]", "\n", "translation", "=", "out", "[", "...", ",", "3", ":", "]", "\n", "\n", "return", "axisangle", ",", "translation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van_decoder.VANDecoder.__init__": [[12, 42], ["torch.Module.__init__", "numpy.array", "collections.OrderedDict", "range", "range", "torch.ModuleList", "torch.ModuleList", "torch.Sigmoid", "torch.Sigmoid", "ConvBlock", "ConvBlock", "Conv3x3", "list", "van_decoder.VANDecoder.convs.values"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_ch_enc", ",", "num_output_channels", "=", "1", ",", "use_skips", "=", "True", ")", ":", "\n", "        ", "super", "(", "VANDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_output_channels", "=", "num_output_channels", "\n", "self", ".", "use_skips", "=", "use_skips", "\n", "self", ".", "upsample_mode", "=", "'nearest'", "\n", "\n", "self", ".", "num_ch_enc", "=", "num_ch_enc", "\n", "self", ".", "num_ch_dec", "=", "np", ".", "array", "(", "[", "32", ",", "64", ",", "128", ",", "320", "]", ")", "\n", "\n", "# decoder", "\n", "self", ".", "convs", "=", "OrderedDict", "(", ")", "\n", "for", "i", "in", "range", "(", "3", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "# upconv_0", "\n", "            ", "num_ch_in", "=", "self", ".", "num_ch_enc", "[", "-", "1", "]", "if", "i", "==", "3", "else", "self", ".", "num_ch_dec", "[", "i", "+", "1", "]", "\n", "num_ch_out", "=", "self", ".", "num_ch_dec", "[", "i", "]", "\n", "self", ".", "convs", "[", "(", "\"upconv\"", ",", "i", ",", "0", ")", "]", "=", "ConvBlock", "(", "num_ch_in", ",", "num_ch_out", ")", "\n", "\n", "# upconv_1", "\n", "num_ch_in", "=", "self", ".", "num_ch_dec", "[", "i", "]", "\n", "if", "self", ".", "use_skips", "and", "i", ">", "0", ":", "\n", "                ", "num_ch_in", "+=", "self", ".", "num_ch_enc", "[", "i", "-", "1", "]", "\n", "", "num_ch_out", "=", "self", ".", "num_ch_dec", "[", "i", "]", "\n", "self", ".", "convs", "[", "(", "\"upconv\"", ",", "i", ",", "1", ")", "]", "=", "ConvBlock", "(", "num_ch_in", ",", "num_ch_out", ")", "\n", "\n", "", "for", "s", "in", "range", "(", "3", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "self", ".", "convs", "[", "(", "\"dispconv\"", ",", "s", ")", "]", "=", "Conv3x3", "(", "self", ".", "num_ch_dec", "[", "s", "]", ",", "self", ".", "num_output_channels", ")", "\n", "\n", "", "self", ".", "decoder", "=", "nn", ".", "ModuleList", "(", "list", "(", "self", ".", "convs", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van_decoder.VANDecoder.forward": [[43, 66], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "upsample", "upsample", "van_decoder.VANDecoder.sigmoid", "van_decoder.VANDecoder.sigmoid"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.upsample", "home.repos.pwc.inspect_result.xjixzz_van_depth.None.layers.upsample"], ["", "def", "forward", "(", "self", ",", "input_features", ")", ":", "\n", "        ", "self", ".", "outputs", "=", "{", "}", "\n", "\n", "# decoder", "\n", "x", "=", "input_features", "[", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "3", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "x", "=", "self", ".", "convs", "[", "(", "\"upconv\"", ",", "i", ",", "0", ")", "]", "(", "x", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                ", "x", "=", "upsample", "(", "x", ")", "\n", "", "x", "=", "[", "upsample", "(", "x", ")", "]", "\n", "if", "self", ".", "use_skips", "and", "i", ">", "0", ":", "\n", "                ", "x", "+=", "[", "input_features", "[", "i", "-", "1", "]", "]", "\n", "", "x", "=", "torch", ".", "cat", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "convs", "[", "(", "\"upconv\"", ",", "i", ",", "1", ")", "]", "(", "x", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "i", ")", "]", "=", "self", ".", "sigmoid", "(", "self", ".", "convs", "[", "(", "\"dispconv\"", ",", "i", ")", "]", "(", "x", ")", ")", "\n", "#print(self.outputs[(\"disp\", i)].shape)", "\n", "", "else", ":", "\n", "                ", "self", ".", "outputs", "[", "(", "\"disp\"", ",", "i", "+", "1", ")", "]", "=", "self", ".", "sigmoid", "(", "self", ".", "convs", "[", "(", "\"dispconv\"", ",", "i", ")", "]", "(", "x", ")", ")", "\n", "#print(self.outputs[(\"disp\", i+1)].shape)", "\n", "\n", "", "", "return", "self", ".", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van_encoder.ResNetMultiImageInput.__init__": [[18, 37], ["torchvision.ResNet.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "van_encoder.ResNetMultiImageInput._make_layer", "van_encoder.ResNetMultiImageInput._make_layer", "van_encoder.ResNetMultiImageInput._make_layer", "van_encoder.ResNetMultiImageInput._make_layer", "van_encoder.ResNetMultiImageInput.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "num_input_images", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResNetMultiImageInput", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "num_input_images", "*", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van_encoder.VANEncoder.__init__": [[62, 93], ["torch.Module.__init__", "numpy.array", "numpy.array", "ValueError", "timm.models.create_model", "van.OverlapPatchEmbed", "timm.models.create_model", "van_encoder.VANEncoder.encoder.load_state_dict", "van_encoder.VANEncoder.encoder.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "size_encoder", ",", "pretrained", ",", "num_input_images", "=", "1", ")", ":", "\n", "        ", "super", "(", "VANEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "van_paths", "=", "{", "\"tiny\"", ":", "\"./pretrained/van_tiny_754.pth.tar\"", ",", "\n", "\"small\"", ":", "\"./pretrained/van_small_811.pth.tar\"", ",", "\n", "\"base\"", ":", "\"./pretrained/van_base_828.pth.tar\"", "\n", "}", "\n", "if", "size_encoder", "==", "'tiny'", ":", "\n", "            ", "self", ".", "num_ch_enc", "=", "np", ".", "array", "(", "[", "32", ",", "64", ",", "160", ",", "256", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_ch_enc", "=", "np", ".", "array", "(", "[", "64", ",", "128", ",", "320", ",", "512", "]", ")", "\n", "\n", "", "if", "size_encoder", "not", "in", "van_paths", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} is not a valid size of vnn\"", ".", "format", "(", "size_encoder", ")", ")", "\n", "\n", "", "if", "num_input_images", ">", "1", ":", "\n", "#self.encoder = van_multiimage_input(num_layers, pretrained, num_input_images)", "\n", "            ", "self", ".", "encoder", "=", "create_model", "(", "\"van_{}\"", ".", "format", "(", "size_encoder", ")", ",", "pretrained", "=", "False", ",", "num_classes", "=", "None", ",", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ",", "drop_block_rate", "=", "None", ")", "\n", "\n", "self", ".", "encoder", ".", "patch_embed1", "=", "OverlapPatchEmbed", "(", "in_chans", "=", "3", "*", "num_input_images", ",", "embed_dim", "=", "self", ".", "num_ch_enc", "[", "0", "]", ")", "\n", "if", "pretrained", ":", "\n", "                ", "pretrined_state_dict", "=", "torch", ".", "load", "(", "van_paths", "[", "size_encoder", "]", ")", "[", "'state_dict'", "]", "\n", "pretrined_state_dict", "[", "'patch_embed1.proj.weight'", "]", "=", "torch", ".", "cat", "(", "\n", "[", "pretrined_state_dict", "[", "'patch_embed1.proj.weight'", "]", "]", "*", "num_input_images", ",", "1", ")", "/", "num_input_images", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "pretrined_state_dict", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "create_model", "(", "\"van_{}\"", ".", "format", "(", "size_encoder", ")", ",", "pretrained", "=", "False", ",", "num_classes", "=", "None", ",", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ",", "drop_block_rate", "=", "None", ")", "\n", "\n", "if", "pretrained", ":", "\n", "                ", "pretrined_state_dict", "=", "torch", ".", "load", "(", "van_paths", "[", "size_encoder", "]", ")", "[", "'state_dict'", "]", "\n", "self", ".", "encoder", ".", "load_state_dict", "(", "pretrined_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van_encoder.VANEncoder.forward": [[96, 127], ["range", "getattr", "getattr", "getattr", "getattr.", "blk.flatten().transpose", "getattr.", "blk.reshape().permute().contiguous", "van_encoder.VANEncoder.features.append", "blk", "blk.flatten", "blk.reshape().permute", "blk.reshape"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "self", ".", "features", "=", "[", "]", "\n", "x", "=", "(", "input_image", "-", "0.45", ")", "/", "0.225", "\n", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "patch_embed", "=", "getattr", "(", "self", ".", "encoder", ",", "f\"patch_embed{i + 1}\"", ")", "\n", "block", "=", "getattr", "(", "self", ".", "encoder", ",", "f\"block{i + 1}\"", ")", "\n", "norm", "=", "getattr", "(", "self", ".", "encoder", ",", "f\"norm{i + 1}\"", ")", "\n", "x", ",", "H", ",", "W", "=", "patch_embed", "(", "x", ")", "\n", "for", "blk", "in", "block", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "norm", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "#if i != 3:", "\n", "#x = x.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()", "\n", "\n", "self", ".", "features", ".", "append", "(", "x", ")", "\n", "\n", "#print(x.shape)", "\n", "\n", "# x = self.encoder.patch_embed1(x)", "\n", "# self.features.append(self.encoder.block1(x))", "\n", "# self.features.append(self.encoder.block2(self.encoder.maxpool(self.features[-1])))", "\n", "# self.features.append(self.encoder.block3(self.features[-1]))", "\n", "# self.features.append(self.encoder.block4(self.features[-1]))", "\n", "# self.features.append(self.encoder.block1(self.features[-1]))", "\n", "\n", "", "return", "self", ".", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.van_encoder.van_multiimage_input": [[39, 57], ["van_encoder.ResNetMultiImageInput", "torch.load_url", "ResNetMultiImageInput.load_state_dict", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "", "", "", "def", "van_multiimage_input", "(", "size_encoder", ",", "pretrained", "=", "False", ",", "num_input_images", "=", "1", ")", ":", "\n", "    ", "\"\"\"Constructs a VAN model.\n    Args:\n        num_layers (int): Number of resnet layers. Must be 18 or 50\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        num_input_images (int): Number of frames stacked as input\n    \"\"\"", "\n", "assert", "num_layers", "in", "[", "18", ",", "50", "]", ",", "\"Can only run with 18 or 50 layer resnet\"", "\n", "blocks", "=", "{", "18", ":", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "50", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", "}", "[", "num_layers", "]", "\n", "block_type", "=", "{", "18", ":", "models", ".", "resnet", ".", "BasicBlock", ",", "50", ":", "models", ".", "resnet", ".", "Bottleneck", "}", "[", "num_layers", "]", "\n", "model", "=", "ResNetMultiImageInput", "(", "block_type", ",", "blocks", ",", "num_input_images", "=", "num_input_images", ")", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "loaded", "=", "model_zoo", ".", "load_url", "(", "models", ".", "resnet", ".", "model_urls", "[", "'resnet{}'", ".", "format", "(", "num_layers", ")", "]", ")", "\n", "loaded", "[", "'patch_embed1.weight'", "]", "=", "torch", ".", "cat", "(", "\n", "[", "loaded", "[", "'conv1.weight'", "]", "]", "*", "num_input_images", ",", "1", ")", "/", "num_input_images", "\n", "model", ".", "load_state_dict", "(", "loaded", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.resnet_encoder.ResNetMultiImageInput.__init__": [[17, 36], ["torchvision.ResNet.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_encoder.ResNetMultiImageInput._make_layer", "resnet_encoder.ResNetMultiImageInput._make_layer", "resnet_encoder.ResNetMultiImageInput._make_layer", "resnet_encoder.ResNetMultiImageInput._make_layer", "resnet_encoder.ResNetMultiImageInput.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "num_input_images", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResNetMultiImageInput", ",", "self", ")", ".", "__init__", "(", "block", ",", "layers", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "num_input_images", "*", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.resnet_encoder.ResnetEncoder.__init__": [[61, 82], ["torch.Module.__init__", "numpy.array", "ValueError", "resnet_encoder.resnet_multiimage_input"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__", "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.resnet_encoder.resnet_multiimage_input"], ["def", "__init__", "(", "self", ",", "num_layers", ",", "pretrained", ",", "num_input_images", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResnetEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_ch_enc", "=", "np", ".", "array", "(", "[", "64", ",", "64", ",", "128", ",", "256", ",", "512", "]", ")", "\n", "\n", "resnets", "=", "{", "18", ":", "models", ".", "resnet18", ",", "\n", "34", ":", "models", ".", "resnet34", ",", "\n", "50", ":", "models", ".", "resnet50", ",", "\n", "101", ":", "models", ".", "resnet101", ",", "\n", "152", ":", "models", ".", "resnet152", "}", "\n", "\n", "if", "num_layers", "not", "in", "resnets", ":", "\n", "            ", "raise", "ValueError", "(", "\"{} is not a valid number of resnet layers\"", ".", "format", "(", "num_layers", ")", ")", "\n", "\n", "", "if", "num_input_images", ">", "1", ":", "\n", "            ", "self", ".", "encoder", "=", "resnet_multiimage_input", "(", "num_layers", ",", "pretrained", ",", "num_input_images", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder", "=", "resnets", "[", "num_layers", "]", "(", "pretrained", ")", "\n", "\n", "", "if", "num_layers", ">", "34", ":", "\n", "            ", "self", ".", "num_ch_enc", "[", "1", ":", "]", "*=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.resnet_encoder.ResnetEncoder.forward": [[83, 95], ["resnet_encoder.ResnetEncoder.encoder.conv1", "resnet_encoder.ResnetEncoder.encoder.bn1", "resnet_encoder.ResnetEncoder.features.append", "resnet_encoder.ResnetEncoder.features.append", "resnet_encoder.ResnetEncoder.features.append", "resnet_encoder.ResnetEncoder.features.append", "resnet_encoder.ResnetEncoder.features.append", "resnet_encoder.ResnetEncoder.encoder.relu", "resnet_encoder.ResnetEncoder.encoder.layer1", "resnet_encoder.ResnetEncoder.encoder.layer2", "resnet_encoder.ResnetEncoder.encoder.layer3", "resnet_encoder.ResnetEncoder.encoder.layer4", "resnet_encoder.ResnetEncoder.encoder.maxpool"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "self", ".", "features", "=", "[", "]", "\n", "x", "=", "(", "input_image", "-", "0.45", ")", "/", "0.225", "\n", "x", "=", "self", ".", "encoder", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "encoder", ".", "bn1", "(", "x", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "relu", "(", "x", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer1", "(", "self", ".", "encoder", ".", "maxpool", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer2", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer3", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "features", ".", "append", "(", "self", ".", "encoder", ".", "layer4", "(", "self", ".", "features", "[", "-", "1", "]", ")", ")", "\n", "\n", "return", "self", ".", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.resnet_encoder.resnet_multiimage_input": [[38, 56], ["resnet_encoder.ResNetMultiImageInput", "torch.load_url", "ResNetMultiImageInput.load_state_dict", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "", "", "", "def", "resnet_multiimage_input", "(", "num_layers", ",", "pretrained", "=", "False", ",", "num_input_images", "=", "1", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet model.\n    Args:\n        num_layers (int): Number of resnet layers. Must be 18 or 50\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        num_input_images (int): Number of frames stacked as input\n    \"\"\"", "\n", "assert", "num_layers", "in", "[", "18", ",", "50", "]", ",", "\"Can only run with 18 or 50 layer resnet\"", "\n", "blocks", "=", "{", "18", ":", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "50", ":", "[", "3", ",", "4", ",", "6", ",", "3", "]", "}", "[", "num_layers", "]", "\n", "block_type", "=", "{", "18", ":", "models", ".", "resnet", ".", "BasicBlock", ",", "50", ":", "models", ".", "resnet", ".", "Bottleneck", "}", "[", "num_layers", "]", "\n", "model", "=", "ResNetMultiImageInput", "(", "block_type", ",", "blocks", ",", "num_input_images", "=", "num_input_images", ")", "\n", "\n", "if", "pretrained", ":", "\n", "        ", "loaded", "=", "model_zoo", ".", "load_url", "(", "models", ".", "resnet", ".", "model_urls", "[", "'resnet{}'", ".", "format", "(", "num_layers", ")", "]", ")", "\n", "loaded", "[", "'conv1.weight'", "]", "=", "torch", ".", "cat", "(", "\n", "[", "loaded", "[", "'conv1.weight'", "]", "]", "*", "num_input_images", ",", "1", ")", "/", "num_input_images", "\n", "model", ".", "load_state_dict", "(", "loaded", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__": [[8, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "len", "torch.ReLU", "torch.ReLU", "torch.ModuleList", "torch.ModuleList", "list", "pose_cnn.PoseCNN.convs.values"], "methods", ["home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_frames", ")", ":", "\n", "        ", "super", "(", "PoseCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_input_frames", "=", "num_input_frames", "\n", "\n", "self", ".", "convs", "=", "{", "}", "\n", "self", ".", "convs", "[", "0", "]", "=", "nn", ".", "Conv2d", "(", "3", "*", "num_input_frames", ",", "16", ",", "7", ",", "2", ",", "3", ")", "\n", "self", ".", "convs", "[", "1", "]", "=", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "5", ",", "2", ",", "2", ")", "\n", "self", ".", "convs", "[", "2", "]", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "convs", "[", "3", "]", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "convs", "[", "4", "]", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "convs", "[", "5", "]", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "convs", "[", "6", "]", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "2", ",", "1", ")", "\n", "\n", "self", ".", "pose_conv", "=", "nn", ".", "Conv2d", "(", "256", ",", "6", "*", "(", "num_input_frames", "-", "1", ")", ",", "1", ")", "\n", "\n", "self", ".", "num_convs", "=", "len", "(", "self", ".", "convs", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "self", ".", "net", "=", "nn", ".", "ModuleList", "(", "list", "(", "self", ".", "convs", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xjixzz_van_depth.networks.pose_cnn.PoseCNN.forward": [[30, 45], ["range", "pose_cnn.PoseCNN.pose_conv", "pose_cnn.PoseCNN.mean().mean", "pose_cnn.PoseCNN.relu", "pose_cnn.PoseCNN.view", "pose_cnn.PoseCNN.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "out", ")", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_convs", ")", ":", "\n", "            ", "out", "=", "self", ".", "convs", "[", "i", "]", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "pose_conv", "(", "out", ")", "\n", "out", "=", "out", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "\n", "out", "=", "0.01", "*", "out", ".", "view", "(", "-", "1", ",", "self", ".", "num_input_frames", "-", "1", ",", "1", ",", "6", ")", "\n", "\n", "axisangle", "=", "out", "[", "...", ",", ":", "3", "]", "\n", "translation", "=", "out", "[", "...", ",", "3", ":", "]", "\n", "\n", "return", "axisangle", ",", "translation", "\n", "", "", ""]]}