{"home.repos.pwc.inspect_result.cientgu_vq-diffusion.None.train.get_args": [[28, 105], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.abspath", "os.path.join", "os.path.dirname", "os.path.join", "os.path.basename().replace", "time.strftime", "os.path.basename"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch Training script'", ")", "\n", "parser", ".", "add_argument", "(", "'--config_file'", ",", "type", "=", "str", ",", "default", "=", "'configs/vqvae_celeba_attribute_cond.yaml'", ",", "\n", "help", "=", "'path of config file'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'the name of this experiment, if not provided, set to'", "\n", "'the name of config file'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "type", "=", "str", ",", "default", "=", "'OUTPUT'", ",", "\n", "help", "=", "'directory to save the results'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_frequency'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'print frequency (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'path to model that need to be loaded, '", "\n", "'used for loading pretrained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_name'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'resume one experiment with the given name'", ")", "\n", "parser", ".", "add_argument", "(", "'--auto_resume'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'automatically resume the training'", ")", "\n", "\n", "# args for ddp", "\n", "parser", ".", "add_argument", "(", "'--num_node'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'number of nodes for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--node_rank'", ",", "type", "=", "int", ",", "default", "=", "NODE_RANK", ",", "\n", "help", "=", "'node rank for distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_url'", ",", "type", "=", "str", ",", "default", "=", "DIST_URL", ",", "\n", "help", "=", "'url used to set up distributed training'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'GPU id to use. If given, only the specific gpu will be'", "\n", "' used, and ddp will be disabled'", ")", "\n", "parser", ".", "add_argument", "(", "'--sync_bn'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use sync BN layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use tensorboard for logging'", ")", "\n", "parser", ".", "add_argument", "(", "'--timestamp'", ",", "action", "=", "'store_true'", ",", "# default=True,", "\n", "help", "=", "'use tensorboard for logging'", ")", "\n", "# args for random", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'seed for initializing training. '", ")", "\n", "parser", ".", "add_argument", "(", "'--cudnn_deterministic'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'set cudnn.deterministic True'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--amp'", ",", "action", "=", "'store_true'", ",", "# default=True,", "\n", "help", "=", "'automatic mixture of precesion'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'set as debug mode'", ")", "\n", "# args for modify config", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "cwd", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", "\n", "\n", "if", "args", ".", "resume_name", "is", "not", "None", ":", "\n", "        ", "args", ".", "name", "=", "args", ".", "resume_name", "\n", "args", ".", "config_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output", ",", "args", ".", "resume_name", ",", "'configs'", ",", "'config.yaml'", ")", "\n", "args", ".", "auto_resume", "=", "True", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "name", "==", "''", ":", "\n", "            ", "args", ".", "name", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "config_file", ")", ".", "replace", "(", "'.yaml'", ",", "''", ")", "\n", "", "if", "args", ".", "timestamp", ":", "\n", "            ", "assert", "not", "args", ".", "auto_resume", ",", "\"for timstamp, auto resume is hard to find the save directory\"", "\n", "time_str", "=", "time", ".", "strftime", "(", "'%Y-%m-%d-%H-%M'", ")", "\n", "args", ".", "name", "=", "time_str", "+", "'-'", "+", "args", ".", "name", "\n", "\n", "# modify args for debugging", "\n", "", "", "if", "args", ".", "debug", ":", "\n", "        ", "args", ".", "name", "=", "'debug'", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "            ", "args", ".", "gpu", "=", "0", "\n", "\n", "", "", "args", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output", ",", "args", ".", "name", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.None.train.main": [[106, 126], ["train.get_args", "image_synthesis.distributed.launch.launch", "image_synthesis.utils.misc.seed_everything", "warnings.warn", "torch.cuda.set_device", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.None.train.get_args", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.launch.launch", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.seed_everything"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", "or", "args", ".", "cudnn_deterministic", ":", "\n", "        ", "seed_everything", "(", "args", ".", "seed", ",", "args", ".", "cudnn_deterministic", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable ddp.'", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "args", ".", "ngpus_per_node", "=", "1", "\n", "args", ".", "world_size", "=", "1", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "num_node", "==", "1", ":", "\n", "            ", "args", ".", "dist_url", "==", "\"auto\"", "\n", "", "else", ":", "\n", "            ", "assert", "args", ".", "num_node", ">", "1", "\n", "", "args", ".", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "args", ".", "world_size", "=", "args", ".", "ngpus_per_node", "*", "args", ".", "num_node", "\n", "\n", "", "launch", "(", "main_worker", ",", "args", ".", "ngpus_per_node", ",", "args", ".", "num_node", ",", "args", ".", "node_rank", ",", "args", ".", "dist_url", ",", "args", "=", "(", "args", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.None.train.main_worker": [[128, 167], ["image_synthesis.utils.io.load_yaml_config", "image_synthesis.utils.misc.merge_opts_to_config", "image_synthesis.engine.logger.Logger", "image_synthesis.engine.logger.Logger.save_config", "image_synthesis.modeling.build.build_model", "image_synthesis.data.build.build_dataloader", "image_synthesis.engine.solver.Solver", "image_synthesis.engine.solver.Solver.train", "image_synthesis.utils.misc.modify_config_for_debug", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "image_synthesis.engine.solver.Solver.resume", "image_synthesis.engine.solver.Solver.resume"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.io.load_yaml_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.merge_opts_to_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.save_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.build_model", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.build.build_dataloader", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.modify_config_for_debug", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.resume", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.resume"], ["", "def", "main_worker", "(", "local_rank", ",", "args", ")", ":", "\n", "\n", "    ", "args", ".", "local_rank", "=", "local_rank", "\n", "args", ".", "global_rank", "=", "args", ".", "local_rank", "+", "args", ".", "node_rank", "*", "args", ".", "ngpus_per_node", "\n", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "\n", "\n", "# load config", "\n", "config", "=", "load_yaml_config", "(", "args", ".", "config_file", ")", "\n", "config", "=", "merge_opts_to_config", "(", "config", ",", "args", ".", "opts", ")", "\n", "if", "args", ".", "debug", ":", "\n", "        ", "config", "=", "modify_config_for_debug", "(", "config", ")", "\n", "\n", "# get logger", "\n", "", "logger", "=", "Logger", "(", "args", ")", "\n", "logger", ".", "save_config", "(", "config", ")", "\n", "\n", "# get model ", "\n", "model", "=", "build_model", "(", "config", ",", "args", ")", "\n", "# print(model)", "\n", "if", "args", ".", "sync_bn", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "\n", "# get dataloader", "\n", "", "dataloader_info", "=", "build_dataloader", "(", "config", ",", "args", ")", "\n", "\n", "# get solver", "\n", "solver", "=", "Solver", "(", "config", "=", "config", ",", "args", "=", "args", ",", "model", "=", "model", ",", "dataloader", "=", "dataloader_info", ",", "logger", "=", "logger", ")", "\n", "\n", "# resume ", "\n", "if", "args", ".", "load_path", "is", "not", "None", ":", "# only load the model paramters", "\n", "        ", "solver", ".", "resume", "(", "path", "=", "args", ".", "load_path", ",", "\n", "# load_model=True,", "\n", "load_optimizer_and_scheduler", "=", "False", ",", "\n", "load_others", "=", "False", ")", "\n", "", "if", "args", ".", "auto_resume", ":", "\n", "        ", "solver", ".", "resume", "(", ")", "\n", "# with torch.autograd.set_detect_anomaly(True):", "\n", "#     solver.train()", "\n", "", "solver", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.None.inference_VQ_Diffusion.VQ_Diffusion.__init__": [[24, 33], ["inference_VQ_Diffusion.VQ_Diffusion.get_model", "inference_VQ_Diffusion.VQ_Diffusion.model.cuda", "inference_VQ_Diffusion.VQ_Diffusion.model.eval", "inference_VQ_Diffusion.VQ_Diffusion.model.parameters"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.None.inference_VQ_Diffusion.VQ_Diffusion.get_model", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "path", ")", ":", "\n", "        ", "self", ".", "info", "=", "self", ".", "get_model", "(", "ema", "=", "True", ",", "model_path", "=", "path", ",", "config_path", "=", "config", ")", "\n", "self", ".", "model", "=", "self", ".", "info", "[", "'model'", "]", "\n", "self", ".", "epoch", "=", "self", ".", "info", "[", "'epoch'", "]", "\n", "self", ".", "model_name", "=", "self", ".", "info", "[", "'model_name'", "]", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.None.inference_VQ_Diffusion.VQ_Diffusion.get_model": [[34, 65], ["image_synthesis.utils.io.load_yaml_config", "image_synthesis.modeling.build.build_model", "image_synthesis.utils.misc.get_model_parameters_info", "print", "os.path.exists", "image_synthesis.modeling.build.build_model.load_state_dict", "print", "print", "os.path.basename().replace", "torch.load", "print", "image_synthesis.modeling.build.build_model.get_ema_model", "image_synthesis.modeling.build.build_model.get_ema_model.load_state_dict", "model_path.split", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.io.load_yaml_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.build_model", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.get_model_parameters_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.get_ema_model", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict"], ["", "", "def", "get_model", "(", "self", ",", "ema", ",", "model_path", ",", "config_path", ")", ":", "\n", "        ", "if", "'OUTPUT'", "in", "model_path", ":", "# pretrained model", "\n", "            ", "model_name", "=", "model_path", ".", "split", "(", "os", ".", "path", ".", "sep", ")", "[", "-", "3", "]", "\n", "", "else", ":", "\n", "            ", "model_name", "=", "os", ".", "path", ".", "basename", "(", "config_path", ")", ".", "replace", "(", "'.yaml'", ",", "''", ")", "\n", "\n", "", "config", "=", "load_yaml_config", "(", "config_path", ")", "\n", "model", "=", "build_model", "(", "config", ")", "\n", "model_parameters", "=", "get_model_parameters_info", "(", "model", ")", "\n", "\n", "print", "(", "model_parameters", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "            ", "ckpt", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "", "if", "'last_epoch'", "in", "ckpt", ":", "\n", "            ", "epoch", "=", "ckpt", "[", "'last_epoch'", "]", "\n", "", "elif", "'epoch'", "in", "ckpt", ":", "\n", "            ", "epoch", "=", "ckpt", "[", "'epoch'", "]", "\n", "", "else", ":", "\n", "            ", "epoch", "=", "0", "\n", "\n", "", "missing", ",", "unexpected", "=", "model", ".", "load_state_dict", "(", "ckpt", "[", "\"model\"", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Model missing keys:\\n'", ",", "missing", ")", "\n", "print", "(", "'Model unexpected keys:\\n'", ",", "unexpected", ")", "\n", "\n", "if", "ema", "==", "True", "and", "'ema'", "in", "ckpt", ":", "\n", "            ", "print", "(", "\"Evaluate EMA model\"", ")", "\n", "ema_model", "=", "model", ".", "get_ema_model", "(", ")", "\n", "missing", ",", "unexpected", "=", "ema_model", ".", "load_state_dict", "(", "ckpt", "[", "'ema'", "]", ",", "strict", "=", "False", ")", "\n", "\n", "", "return", "{", "'model'", ":", "model", ",", "'epoch'", ":", "epoch", ",", "'model_name'", ":", "model_name", ",", "'parameter'", ":", "model_parameters", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.None.inference_VQ_Diffusion.VQ_Diffusion.inference_generate_sample_with_class": [[66, 97], ["os.makedirs", "str", "os.path.join", "os.makedirs", "content.permute().to().numpy().astype.permute().to().numpy().astype.permute().to().numpy().astype", "range", "torch.no_grad", "inference_VQ_Diffusion.VQ_Diffusion.model.generate_content", "os.path.join", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "content.permute().to().numpy().astype.permute().to().numpy().astype.permute().to().numpy", "str().zfill", "content.permute().to().numpy().astype.permute().to().numpy().astype.permute().to", "str", "str", "content.permute().to().numpy().astype.permute().to().numpy().astype.permute"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.generate_content", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.save"], ["", "def", "inference_generate_sample_with_class", "(", "self", ",", "text", ",", "truncation_rate", ",", "save_root", ",", "batch_size", ",", "fast", "=", "False", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_root", ",", "exist_ok", "=", "True", ")", "\n", "\n", "data_i", "=", "{", "}", "\n", "data_i", "[", "'label'", "]", "=", "[", "text", "]", "\n", "data_i", "[", "'image'", "]", "=", "None", "\n", "condition", "=", "text", "\n", "\n", "str_cond", "=", "str", "(", "condition", ")", "\n", "save_root_", "=", "os", ".", "path", ".", "join", "(", "save_root", ",", "str_cond", ")", "\n", "os", ".", "makedirs", "(", "save_root_", ",", "exist_ok", "=", "True", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model_out", "=", "self", ".", "model", ".", "generate_content", "(", "\n", "batch", "=", "data_i", ",", "\n", "filter_ratio", "=", "0", ",", "\n", "replicate", "=", "batch_size", ",", "\n", "content_ratio", "=", "1", ",", "\n", "return_att_weight", "=", "False", ",", "\n", "sample_type", "=", "\"top\"", "+", "str", "(", "truncation_rate", ")", "+", "'r'", ",", "\n", ")", "# B x C x H x W", "\n", "\n", "# save results", "\n", "", "content", "=", "model_out", "[", "'content'", "]", "\n", "content", "=", "content", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "for", "b", "in", "range", "(", "content", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "cnt", "=", "b", "\n", "save_base_name", "=", "'{}'", ".", "format", "(", "str", "(", "cnt", ")", ".", "zfill", "(", "6", ")", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_root_", ",", "save_base_name", "+", "'.jpg'", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "content", "[", "b", "]", ")", "\n", "im", ".", "save", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.None.inference_VQ_Diffusion.VQ_Diffusion.inference_generate_sample_with_condition": [[98, 133], ["os.makedirs", "str", "os.path.join", "os.makedirs", "content.permute().to().numpy().astype.permute().to().numpy().astype.permute().to().numpy().astype", "range", "torch.no_grad", "inference_VQ_Diffusion.VQ_Diffusion.model.generate_content", "os.path.join", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "str", "content.permute().to().numpy().astype.permute().to().numpy().astype.permute().to().numpy", "str().zfill", "content.permute().to().numpy().astype.permute().to().numpy().astype.permute().to", "str", "str", "content.permute().to().numpy().astype.permute().to().numpy().astype.permute"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.generate_content", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.save"], ["", "", "def", "inference_generate_sample_with_condition", "(", "self", ",", "text", ",", "truncation_rate", ",", "save_root", ",", "batch_size", ",", "fast", "=", "False", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_root", ",", "exist_ok", "=", "True", ")", "\n", "\n", "data_i", "=", "{", "}", "\n", "data_i", "[", "'text'", "]", "=", "[", "text", "]", "\n", "data_i", "[", "'image'", "]", "=", "None", "\n", "condition", "=", "text", "\n", "\n", "str_cond", "=", "str", "(", "condition", ")", "\n", "save_root_", "=", "os", ".", "path", ".", "join", "(", "save_root", ",", "str_cond", ")", "\n", "os", ".", "makedirs", "(", "save_root_", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "fast", "!=", "False", ":", "\n", "            ", "add_string", "=", "'r,fast'", "+", "str", "(", "fast", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "add_string", "=", "'r'", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model_out", "=", "self", ".", "model", ".", "generate_content", "(", "\n", "batch", "=", "data_i", ",", "\n", "filter_ratio", "=", "0", ",", "\n", "replicate", "=", "batch_size", ",", "\n", "content_ratio", "=", "1", ",", "\n", "return_att_weight", "=", "False", ",", "\n", "sample_type", "=", "\"top\"", "+", "str", "(", "truncation_rate", ")", "+", "add_string", ",", "\n", ")", "# B x C x H x W", "\n", "\n", "# save results", "\n", "", "content", "=", "model_out", "[", "'content'", "]", "\n", "content", "=", "content", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "for", "b", "in", "range", "(", "content", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "cnt", "=", "b", "\n", "save_base_name", "=", "'{}'", ".", "format", "(", "str", "(", "cnt", ")", ".", "zfill", "(", "6", ")", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_root_", ",", "save_base_name", "+", "'.png'", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "content", "[", "b", "]", ")", "\n", "im", ".", "save", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.io.load_yaml_config": [[6, 10], ["open", "yaml.full_load"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["def", "load_yaml_config", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "full_load", "(", "f", ")", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.io.save_config_to_yaml": [[12, 17], ["path.endswith", "open", "f.write", "f.close", "yaml.dump"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.close"], ["", "def", "save_config_to_yaml", "(", "config", ",", "path", ")", ":", "\n", "    ", "assert", "path", ".", "endswith", "(", "'.yaml'", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "yaml", ".", "dump", "(", "config", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.io.save_dict_to_json": [[18, 20], ["json.dump", "open"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["", "", "def", "save_dict_to_json", "(", "d", ",", "path", ",", "indent", "=", "None", ")", ":", "\n", "    ", "json", ".", "dump", "(", "d", ",", "open", "(", "path", ",", "'w'", ")", ",", "indent", "=", "indent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.io.load_dict_from_json": [[22, 24], ["json.load", "open"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["", "def", "load_dict_from_json", "(", "path", ")", ":", "\n", "    ", "return", "json", ".", "load", "(", "open", "(", "path", ",", "'r'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.io.write_args": [[26, 37], ["dict", "open", "args_file.write", "args_file.write", "args_file.write", "args_file.write", "args_file.write", "sorted", "args_file.close", "str", "dict.items", "args_file.write", "getattr", "dir", "torch.backends.cudnn.version", "name.startswith", "str", "str"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.close"], ["", "def", "write_args", "(", "args", ",", "path", ")", ":", "\n", "    ", "args_dict", "=", "dict", "(", "(", "name", ",", "getattr", "(", "args", ",", "name", ")", ")", "for", "name", "in", "dir", "(", "args", ")", "if", "not", "name", ".", "startswith", "(", "'_'", ")", ")", "\n", "with", "open", "(", "path", ",", "'a'", ")", "as", "args_file", ":", "\n", "        ", "args_file", ".", "write", "(", "'==> torch version: {}\\n'", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "args_file", ".", "write", "(", "'==> cudnn version: {}\\n'", ".", "format", "(", "torch", ".", "backends", ".", "cudnn", ".", "version", "(", ")", ")", ")", "\n", "args_file", ".", "write", "(", "'==> Cmd:\\n'", ")", "\n", "args_file", ".", "write", "(", "str", "(", "sys", ".", "argv", ")", ")", "\n", "args_file", ".", "write", "(", "'\\n==> args:\\n'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args_dict", ".", "items", "(", ")", ")", ":", "\n", "            ", "args_file", ".", "write", "(", "'  %s: %s\\n'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", "\n", "", "args_file", ".", "close", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.seed_everything": [[9, 27], ["print", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "warnings.warn"], "function", ["None"], ["def", "seed_everything", "(", "seed", ",", "cudnn_deterministic", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Function that sets seed for pseudo-random number generators in:\n    pytorch, numpy, python.random\n    \n    Args:\n        seed: the integer value seed for global random state\n    \"\"\"", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "print", "(", "f\"Global seed set to {seed}\"", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "", "if", "cudnn_deterministic", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.merge_opts_to_config": [[33, 49], ["range", "len", "misc.merge_opts_to_config.modify_dict"], "function", ["None"], ["", "", "def", "merge_opts_to_config", "(", "config", ",", "opts", ")", ":", "\n", "    ", "def", "modify_dict", "(", "c", ",", "nl", ",", "v", ")", ":", "\n", "        ", "if", "len", "(", "nl", ")", "==", "1", ":", "\n", "            ", "c", "[", "nl", "[", "0", "]", "]", "=", "type", "(", "c", "[", "nl", "[", "0", "]", "]", ")", "(", "v", ")", "\n", "", "else", ":", "\n", "# print(nl)", "\n", "            ", "c", "[", "nl", "[", "0", "]", "]", "=", "modify_dict", "(", "c", "[", "nl", "[", "0", "]", "]", ",", "nl", "[", "1", ":", "]", ",", "v", ")", "\n", "", "return", "c", "\n", "\n", "", "if", "opts", "is", "not", "None", "and", "len", "(", "opts", ")", ">", "0", ":", "\n", "        ", "assert", "len", "(", "opts", ")", "%", "2", "==", "0", ",", "\"each opts should be given by the name and values! The length shall be even number!\"", "\n", "for", "i", "in", "range", "(", "len", "(", "opts", ")", "//", "2", ")", ":", "\n", "            ", "name", "=", "opts", "[", "2", "*", "i", "]", "\n", "value", "=", "opts", "[", "2", "*", "i", "+", "1", "]", "\n", "config", "=", "modify_dict", "(", "config", ",", "name", ".", "split", "(", "'.'", ")", ",", "value", ")", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.modify_config_for_debug": [[50, 54], ["None"], "function", ["None"], ["", "def", "modify_config_for_debug", "(", "config", ")", ":", "\n", "    ", "config", "[", "'dataloader'", "]", "[", "'num_workers'", "]", "=", "0", "\n", "config", "[", "'dataloader'", "]", "[", "'batch_size'", "]", "=", "1", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.get_model_parameters_info": [[57, 101], ["model.named_children", "misc.get_model_parameters_info.format_dict"], "function", ["None"], ["", "def", "get_model_parameters_info", "(", "model", ")", ":", "\n", "# for mn, m in model.named_modules():", "\n", "    ", "parameters", "=", "{", "'overall'", ":", "{", "'trainable'", ":", "0", ",", "'non_trainable'", ":", "0", ",", "'total'", ":", "0", "}", "}", "\n", "for", "child_name", ",", "child_module", "in", "model", ".", "named_children", "(", ")", ":", "\n", "        ", "parameters", "[", "child_name", "]", "=", "{", "'trainable'", ":", "0", ",", "'non_trainable'", ":", "0", "}", "\n", "for", "pn", ",", "p", "in", "child_module", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "requires_grad", ":", "\n", "                ", "parameters", "[", "child_name", "]", "[", "'trainable'", "]", "+=", "p", ".", "numel", "(", ")", "\n", "", "else", ":", "\n", "                ", "parameters", "[", "child_name", "]", "[", "'non_trainable'", "]", "+=", "p", ".", "numel", "(", ")", "\n", "", "", "parameters", "[", "child_name", "]", "[", "'total'", "]", "=", "parameters", "[", "child_name", "]", "[", "'trainable'", "]", "+", "parameters", "[", "child_name", "]", "[", "'non_trainable'", "]", "\n", "\n", "parameters", "[", "'overall'", "]", "[", "'trainable'", "]", "+=", "parameters", "[", "child_name", "]", "[", "'trainable'", "]", "\n", "parameters", "[", "'overall'", "]", "[", "'non_trainable'", "]", "+=", "parameters", "[", "child_name", "]", "[", "'non_trainable'", "]", "\n", "parameters", "[", "'overall'", "]", "[", "'total'", "]", "+=", "parameters", "[", "child_name", "]", "[", "'total'", "]", "\n", "\n", "# format the numbers", "\n", "", "def", "format_number", "(", "num", ")", ":", "\n", "        ", "K", "=", "2", "**", "10", "\n", "M", "=", "2", "**", "20", "\n", "G", "=", "2", "**", "30", "\n", "if", "num", ">", "G", ":", "# K", "\n", "            ", "uint", "=", "'G'", "\n", "num", "=", "round", "(", "float", "(", "num", ")", "/", "G", ",", "2", ")", "\n", "", "elif", "num", ">", "M", ":", "\n", "            ", "uint", "=", "'M'", "\n", "num", "=", "round", "(", "float", "(", "num", ")", "/", "M", ",", "2", ")", "\n", "", "elif", "num", ">", "K", ":", "\n", "            ", "uint", "=", "'K'", "\n", "num", "=", "round", "(", "float", "(", "num", ")", "/", "K", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "uint", "=", "''", "\n", "\n", "", "return", "'{}{}'", ".", "format", "(", "num", ",", "uint", ")", "\n", "\n", "", "def", "format_dict", "(", "d", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                ", "format_dict", "(", "v", ")", "\n", "", "else", ":", "\n", "                ", "d", "[", "k", "]", "=", "format_number", "(", "v", ")", "\n", "\n", "", "", "", "format_dict", "(", "parameters", ")", "\n", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.format_seconds": [[103, 124], ["int", "int", "int", "int"], "function", ["None"], ["", "def", "format_seconds", "(", "seconds", ")", ":", "\n", "    ", "h", "=", "int", "(", "seconds", "//", "3600", ")", "\n", "m", "=", "int", "(", "seconds", "//", "60", "-", "h", "*", "60", ")", "\n", "s", "=", "int", "(", "seconds", "%", "60", ")", "\n", "\n", "d", "=", "int", "(", "h", "//", "24", ")", "\n", "h", "=", "h", "-", "d", "*", "24", "\n", "\n", "if", "d", "==", "0", ":", "\n", "        ", "if", "h", "==", "0", ":", "\n", "            ", "if", "m", "==", "0", ":", "\n", "                ", "ft", "=", "'{:02d}s'", ".", "format", "(", "s", ")", "\n", "", "else", ":", "\n", "                ", "ft", "=", "'{:02d}m:{:02d}s'", ".", "format", "(", "m", ",", "s", ")", "\n", "", "", "else", ":", "\n", "           ", "ft", "=", "'{:02d}h:{:02d}m:{:02d}s'", ".", "format", "(", "h", ",", "m", ",", "s", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "ft", "=", "'{:d}d:{:02d}h:{:02d}m:{:02d}s'", ".", "format", "(", "d", ",", "h", ",", "m", ",", "s", ")", "\n", "\n", "", "return", "ft", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config": [[125, 133], ["config[].rsplit", "getattr", "getattr.", "KeyError", "importlib.import_module", "config.get", "dict"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get"], ["", "def", "instantiate_from_config", "(", "config", ")", ":", "\n", "    ", "if", "config", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "if", "not", "\"target\"", "in", "config", ":", "\n", "        ", "raise", "KeyError", "(", "\"Expected key `target` to instantiate.\"", ")", "\n", "", "module", ",", "cls", "=", "config", "[", "\"target\"", "]", ".", "rsplit", "(", "\".\"", ",", "1", ")", "\n", "cls", "=", "getattr", "(", "importlib", ".", "import_module", "(", "module", ",", "package", "=", "None", ")", ",", "cls", ")", "\n", "return", "cls", "(", "**", "config", ".", "get", "(", "\"params\"", ",", "dict", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.class_from_string": [[134, 138], ["class_name.rsplit", "getattr", "importlib.import_module"], "function", ["None"], ["", "def", "class_from_string", "(", "class_name", ")", ":", "\n", "    ", "module", ",", "cls", "=", "class_name", ".", "rsplit", "(", "\".\"", ",", "1", ")", "\n", "cls", "=", "getattr", "(", "importlib", ".", "import_module", "(", "module", ",", "package", "=", "None", ")", ",", "cls", ")", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.get_all_file": [[139, 150], ["isinstance", "os.walk", "f.endswith", "filenames.append", "os.path.join"], "function", ["None"], ["", "def", "get_all_file", "(", "dir", ",", "end_with", "=", "'.h5'", ")", ":", "\n", "    ", "if", "isinstance", "(", "end_with", ",", "str", ")", ":", "\n", "        ", "end_with", "=", "[", "end_with", "]", "\n", "", "filenames", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "dir", ")", ":", "\n", "        ", "for", "f", "in", "files", ":", "\n", "            ", "for", "ew", "in", "end_with", ":", "\n", "                ", "if", "f", ".", "endswith", "(", "ew", ")", ":", "\n", "                    ", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", ")", "\n", "break", "\n", "", "", "", "", "return", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.get_sub_dirs": [[152, 157], ["os.listdir", "os.path.join"], "function", ["None"], ["", "def", "get_sub_dirs", "(", "dir", ",", "abs", "=", "True", ")", ":", "\n", "    ", "sub_dirs", "=", "os", ".", "listdir", "(", "dir", ")", "\n", "if", "abs", ":", "\n", "        ", "sub_dirs", "=", "[", "os", ".", "path", ".", "join", "(", "dir", ",", "s", ")", "for", "s", "in", "sub_dirs", "]", "\n", "", "return", "sub_dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.get_model_buffer": [[159, 168], ["model.state_dict", "model.named_parameters"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict"], ["", "def", "get_model_buffer", "(", "model", ")", ":", "\n", "    ", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "buffers_", "=", "{", "}", "\n", "params_", "=", "{", "n", ":", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "}", "\n", "\n", "for", "k", "in", "state_dict", ":", "\n", "        ", "if", "k", "not", "in", "params_", ":", "\n", "            ", "buffers_", "[", "k", "]", "=", "state_dict", "[", "k", "]", "\n", "", "", "return", "buffers_", "\n", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.logits_top_k": [[9, 25], ["logits.contiguous.contiguous", "torch.topk", "torch.full_like", "torch.full_like.scatter_", "max", "max", "float", "int", "int"], "function", ["None"], ["def", "seed_everything", "(", "seed", ",", "cudnn_deterministic", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Function that sets seed for pseudo-random number generators in:\n    pytorch, numpy, python.random\n    \n    Args:\n        seed: the integer value seed for global random state\n    \"\"\"", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "print", "(", "f\"Global seed set to {seed}\"", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "", "if", "cudnn_deterministic", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.mask_with_top_k": [[27, 49], ["x.abs.topk", "torch.zeros_like", "torch.ones_like", "torch.zeros_like.scatter_", "x.abs", "float"], "function", ["None"], ["'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "\n", "", "", "def", "merge_opts_to_config", "(", "config", ",", "opts", ")", ":", "\n", "    ", "def", "modify_dict", "(", "c", ",", "nl", ",", "v", ")", ":", "\n", "        ", "if", "len", "(", "nl", ")", "==", "1", ":", "\n", "            ", "c", "[", "nl", "[", "0", "]", "]", "=", "type", "(", "c", "[", "nl", "[", "0", "]", "]", ")", "(", "v", ")", "\n", "", "else", ":", "\n", "# print(nl)", "\n", "            ", "c", "[", "nl", "[", "0", "]", "]", "=", "modify_dict", "(", "c", "[", "nl", "[", "0", "]", "]", ",", "nl", "[", "1", ":", "]", ",", "v", ")", "\n", "", "return", "c", "\n", "\n", "", "if", "opts", "is", "not", "None", "and", "len", "(", "opts", ")", ">", "0", ":", "\n", "        ", "assert", "len", "(", "opts", ")", "%", "2", "==", "0", ",", "\"each opts should be given by the name and values! The length shall be even number!\"", "\n", "for", "i", "in", "range", "(", "len", "(", "opts", ")", "//", "2", ")", ":", "\n", "            ", "name", "=", "opts", "[", "2", "*", "i", "]", "\n", "value", "=", "opts", "[", "2", "*", "i", "+", "1", "]", "\n", "config", "=", "modify_dict", "(", "config", ",", "name", ".", "split", "(", "'.'", ")", ",", "value", ")", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.sample_index_randomly": [[51, 74], ["x.topk", "range", "torch.stack().to", "x.dim", "max", "max", "torch.tensor().to", "torch.stack().to.append", "int", "int", "torch.stack", "torch.tensor", "random.sample", "index.tolist"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample"], ["    ", "config", "[", "'dataloader'", "]", "[", "'num_workers'", "]", "=", "0", "\n", "config", "[", "'dataloader'", "]", "[", "'batch_size'", "]", "=", "1", "\n", "return", "config", "\n", "\n", "\n", "\n", "", "def", "get_model_parameters_info", "(", "model", ")", ":", "\n", "# for mn, m in model.named_modules():", "\n", "    ", "parameters", "=", "{", "'overall'", ":", "{", "'trainable'", ":", "0", ",", "'non_trainable'", ":", "0", ",", "'total'", ":", "0", "}", "}", "\n", "for", "child_name", ",", "child_module", "in", "model", ".", "named_children", "(", ")", ":", "\n", "        ", "parameters", "[", "child_name", "]", "=", "{", "'trainable'", ":", "0", ",", "'non_trainable'", ":", "0", "}", "\n", "for", "pn", ",", "p", "in", "child_module", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "requires_grad", ":", "\n", "                ", "parameters", "[", "child_name", "]", "[", "'trainable'", "]", "+=", "p", ".", "numel", "(", ")", "\n", "", "else", ":", "\n", "                ", "parameters", "[", "child_name", "]", "[", "'non_trainable'", "]", "+=", "p", ".", "numel", "(", ")", "\n", "", "", "parameters", "[", "child_name", "]", "[", "'total'", "]", "=", "parameters", "[", "child_name", "]", "[", "'trainable'", "]", "+", "parameters", "[", "child_name", "]", "[", "'non_trainable'", "]", "\n", "\n", "parameters", "[", "'overall'", "]", "[", "'trainable'", "]", "+=", "parameters", "[", "child_name", "]", "[", "'trainable'", "]", "\n", "parameters", "[", "'overall'", "]", "[", "'non_trainable'", "]", "+=", "parameters", "[", "child_name", "]", "[", "'non_trainable'", "]", "\n", "parameters", "[", "'overall'", "]", "[", "'total'", "]", "+=", "parameters", "[", "child_name", "]", "[", "'total'", "]", "\n", "\n", "# format the numbers", "\n", "", "def", "format_number", "(", "num", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.get_token_type": [[75, 100], ["mask.float", "pixel_unshuffle", "mask_unshuffle.sum.sum", "torch.zeros_like().long", "torch.zeros_like"], "function", ["None"], ["        ", "K", "=", "2", "**", "10", "\n", "M", "=", "2", "**", "20", "\n", "G", "=", "2", "**", "30", "\n", "if", "num", ">", "G", ":", "# K", "\n", "            ", "uint", "=", "'G'", "\n", "num", "=", "round", "(", "float", "(", "num", ")", "/", "G", ",", "2", ")", "\n", "", "elif", "num", ">", "M", ":", "\n", "            ", "uint", "=", "'M'", "\n", "num", "=", "round", "(", "float", "(", "num", ")", "/", "M", ",", "2", ")", "\n", "", "elif", "num", ">", "K", ":", "\n", "            ", "uint", "=", "'K'", "\n", "num", "=", "round", "(", "float", "(", "num", ")", "/", "K", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "uint", "=", "''", "\n", "\n", "", "return", "'{}{}'", ".", "format", "(", "num", ",", "uint", ")", "\n", "\n", "", "def", "format_dict", "(", "d", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "                ", "format_dict", "(", "v", ")", "\n", "", "else", ":", "\n", "                ", "d", "[", "k", "]", "=", "format_number", "(", "v", ")", "\n", "\n", "", "", "", "format_dict", "(", "parameters", ")", "\n", "return", "parameters", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.gen_attention_mask": [[101, 160], ["torch.zeros", "torch.tril", "range", "torch.ones", "range", "range", "range", "isinstance", "int", "int", "range", "NotImplementedError", "min", "range"], "function", ["None"], ["\n", "\n", "", "def", "format_seconds", "(", "seconds", ")", ":", "\n", "    ", "h", "=", "int", "(", "seconds", "//", "3600", ")", "\n", "m", "=", "int", "(", "seconds", "//", "60", "-", "h", "*", "60", ")", "\n", "s", "=", "int", "(", "seconds", "%", "60", ")", "\n", "\n", "d", "=", "int", "(", "h", "//", "24", ")", "\n", "h", "=", "h", "-", "d", "*", "24", "\n", "\n", "if", "d", "==", "0", ":", "\n", "        ", "if", "h", "==", "0", ":", "\n", "            ", "if", "m", "==", "0", ":", "\n", "                ", "ft", "=", "'{:02d}s'", ".", "format", "(", "s", ")", "\n", "", "else", ":", "\n", "                ", "ft", "=", "'{:02d}m:{:02d}s'", ".", "format", "(", "m", ",", "s", ")", "\n", "", "", "else", ":", "\n", "           ", "ft", "=", "'{:02d}h:{:02d}m:{:02d}s'", ".", "format", "(", "h", ",", "m", ",", "s", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "ft", "=", "'{:d}d:{:02d}h:{:02d}m:{:02d}s'", ".", "format", "(", "d", ",", "h", ",", "m", ",", "s", ")", "\n", "\n", "", "return", "ft", "\n", "\n", "", "def", "instantiate_from_config", "(", "config", ")", ":", "\n", "    ", "if", "config", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "if", "not", "\"target\"", "in", "config", ":", "\n", "        ", "raise", "KeyError", "(", "\"Expected key `target` to instantiate.\"", ")", "\n", "", "module", ",", "cls", "=", "config", "[", "\"target\"", "]", ".", "rsplit", "(", "\".\"", ",", "1", ")", "\n", "cls", "=", "getattr", "(", "importlib", ".", "import_module", "(", "module", ",", "package", "=", "None", ")", ",", "cls", ")", "\n", "return", "cls", "(", "**", "config", ".", "get", "(", "\"params\"", ",", "dict", "(", ")", ")", ")", "\n", "\n", "", "def", "class_from_string", "(", "class_name", ")", ":", "\n", "    ", "module", ",", "cls", "=", "class_name", ".", "rsplit", "(", "\".\"", ",", "1", ")", "\n", "cls", "=", "getattr", "(", "importlib", ".", "import_module", "(", "module", ",", "package", "=", "None", ")", ",", "cls", ")", "\n", "return", "cls", "\n", "\n", "", "def", "get_all_file", "(", "dir", ",", "end_with", "=", "'.h5'", ")", ":", "\n", "    ", "if", "isinstance", "(", "end_with", ",", "str", ")", ":", "\n", "        ", "end_with", "=", "[", "end_with", "]", "\n", "", "filenames", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "dir", ")", ":", "\n", "        ", "for", "f", "in", "files", ":", "\n", "            ", "for", "ew", "in", "end_with", ":", "\n", "                ", "if", "f", ".", "endswith", "(", "ew", ")", ":", "\n", "                    ", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", ")", "\n", "break", "\n", "", "", "", "", "return", "filenames", "\n", "\n", "\n", "", "def", "get_sub_dirs", "(", "dir", ",", "abs", "=", "True", ")", ":", "\n", "    ", "sub_dirs", "=", "os", ".", "listdir", "(", "dir", ")", "\n", "if", "abs", ":", "\n", "        ", "sub_dirs", "=", "[", "os", ".", "path", ".", "join", "(", "dir", ",", "s", ")", "for", "s", "in", "sub_dirs", "]", "\n", "", "return", "sub_dirs", "\n", "\n", "\n", "", "def", "get_model_buffer", "(", "model", ")", ":", "\n", "    ", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.Comm.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "local_rank", "=", "0", ")", ":", "\n", "        ", "self", ".", "local_rank", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.Comm.world_size": [[17, 24], ["torch.get_world_size", "torch.get_world_size", "torch.is_available", "torch.is_available", "torch.is_initialized", "torch.is_initialized"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_world_size", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_world_size", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.is_initialized", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.is_initialized"], ["", "@", "property", "\n", "def", "world_size", "(", "self", ")", ":", "\n", "        ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "            ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.Comm.rank": [[25, 32], ["torch.get_rank", "torch.get_rank", "torch.is_available", "torch.is_available", "torch.is_initialized", "torch.is_initialized"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_rank", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_rank", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.is_initialized", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.is_initialized"], ["", "@", "property", "\n", "def", "rank", "(", "self", ")", ":", "\n", "        ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "            ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.Comm.local_rank": [[44, 51], ["torch.is_available", "torch.is_available", "torch.is_initialized", "torch.is_initialized"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.is_initialized", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.is_initialized"], ["", "@", "local_rank", ".", "setter", "\n", "def", "local_rank", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "_local_rank", "=", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "            ", "self", ".", "_local_rank", "=", "0", "\n", "", "self", ".", "_local_rank", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.Comm.head": [[52, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "head", "(", "self", ")", ":", "\n", "        ", "return", "'Rank[{}/{}]'", ".", "format", "(", "self", ".", "rank", ",", "self", ".", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.Comm.is_main_process": [[56, 58], ["None"], "methods", ["None"], ["", "def", "is_main_process", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rank", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.Comm.synchronize": [[59, 67], ["torch.barrier", "torch.barrier"], "methods", ["None"], ["", "def", "synchronize", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Helper function to synchronize (barrier) among all processes when\n        using distributed training\n        \"\"\"", "\n", "if", "self", ".", "world_size", "==", "1", ":", "\n", "            ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.all_gather": [[72, 113], ["pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.LongTensor().to", "torch.LongTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.LongTensor", "torch.LongTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.LongTensor", "torch.LongTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.all_gather", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.all_gather"], ["def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "comm", ".", "world_size", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "LongTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.reduce_dict": [[115, 142], ["torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "comm", ".", "world_size", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.gather_tensors": [[144, 159], ["torch.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.all_gather"], ["", "def", "gather_tensors", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "\n", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "comm", ".", "world_size", ")", "\n", "]", "\n", "\n", "dist", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "# need to do this to restore propagation of the gradients", "\n", "tensors_gather", "[", "comm", ".", "rank", "]", "=", "tensor", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.gather_tensors_fake": [[160, 176], ["torch.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range", "torch.cat.detach"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.all_gather"], ["", "def", "gather_tensors_fake", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "\n", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "comm", ".", "world_size", ")", "\n", "]", "\n", "\n", "dist", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "# need to do this to restore propagation of the gradients", "\n", "tensors_gather", "[", "comm", ".", "rank", "]", "=", "tensor", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "output", ".", "detach", "(", ")", "]", ",", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.gather_nearby_tensors": [[177, 197], ["torch.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "tensors_gather[].to", "range"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.all_gather"], ["", "def", "gather_nearby_tensors", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "step", "=", "comm", ".", "rank", "//", "2", "\n", "if", "comm", ".", "rank", "%", "2", "==", "0", ":", "\n", "        ", "nearby_rank", "=", "step", "*", "2", "+", "1", "\n", "", "else", ":", "\n", "        ", "nearby_rank", "=", "step", "*", "2", "\n", "", "cpu_tensor", "=", "tensor", "\n", "tensors_gather", "=", "[", "\n", "torch", ".", "ones_like", "(", "cpu_tensor", ")", "\n", "for", "_", "in", "range", "(", "comm", ".", "world_size", ")", "\n", "]", "\n", "dist", ".", "all_gather", "(", "tensors_gather", ",", "cpu_tensor", ",", "async_op", "=", "False", ")", "\n", "# need to do this to restore propagation of the gradients", "\n", "tensors_gather", "=", "[", "tensors_gather", "[", "nearby_rank", "]", ".", "to", "(", "tensor", ".", "device", ")", ",", "tensor", "]", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.gather_tensors_with_gradient": [[199, 210], ["x.contiguous.contiguous", "better_all_gather", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "range"], "function", ["None"], ["", "def", "gather_tensors_with_gradient", "(", "x", ")", ":", "\n", "    ", "\"\"\" collect all tensor from all GPUs\n    args:\n        x: shape (mini_batch, ...)\n    returns:\n        shape (mini_batch * num_gpu, ...)\n    \"\"\"", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "out_list", "=", "[", "torch", ".", "zeros_like", "(", "x", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "for", "_", "in", "range", "(", "comm", ".", "world_size", ")", "]", "\n", "out_list", "=", "better_all_gather", "(", "out_list", ",", "x", ")", "\n", "return", "torch", ".", "cat", "(", "out_list", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.torch_distributed_zero_first": [[220, 231], ["torch.barrier", "torch.barrier"], "function", ["None"], ["@", "contextmanager", "\n", "def", "torch_distributed_zero_first", "(", ")", ":", "\n", "    ", "\"\"\"\n    Decorator to make all processes in distributed training wait for each local_master to do something.\n    \"\"\"", "\n", "local_rank", "=", "comm", ".", "local_rank", "\n", "if", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "dist", ".", "barrier", "(", "device_ids", "=", "[", "local_rank", "]", ")", "\n", "", "yield", "\n", "if", "local_rank", "==", "0", ":", "\n", "        ", "dist", ".", "barrier", "(", "device_ids", "=", "[", "0", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.ThreadPool.__init__": [[28, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "threads", "=", "[", "]", "\n", "self", ".", "n", "=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.ThreadPool.run": [[32, 50], ["queue.Queue.Queue", "manage.func_wrapper", "time.sleep", "print", "logging.info", "range", "queue.Queue.Queue.put", "print", "threading.Thread", "threading.Thread.start", "threads.append", "threading.Thread.join", "queue.Queue.Queue.qsize", "queue.Queue.Queue.qsize"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.func_wrapper"], ["", "def", "run", "(", "self", ",", "func", ",", "array", ",", "**", "kwargs", ")", ":", "\n", "        ", "queue", "=", "Queue", "(", ")", "\n", "for", "val", "in", "array", ":", "\n", "            ", "queue", ".", "put", "(", "val", ")", "\n", "", "threads", "=", "[", "]", "\n", "target", "=", "func_wrapper", "(", "func", ")", "\n", "# hold_thread=subprocess.Popen(\"exec \"+\"python /mnt/blob/datasets/holder.py\",shell=True,stdout=subprocess.DEVNULL)", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "print", "(", "f\"start loading queue {queue.qsize()}\"", ")", "\n", "logging", ".", "info", "(", "f\"start loading queue {queue.qsize()}\"", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "print", "(", "i", ")", "\n", "thread", "=", "Thread", "(", "target", "=", "target", ",", "args", "=", "(", "queue", ",", "kwargs", ")", ")", "\n", "thread", ".", "start", "(", ")", "\n", "threads", ".", "append", "(", "thread", ")", "\n", "\n", "", "for", "thread", "in", "threads", ":", "\n", "            ", "thread", ".", "join", "(", ")", "\n", "# hold_thread.kill()", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MultipleZipManager.__init__": [[105, 107], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "files", ":", "list", ")", ":", "\n", "        ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.ZipManager.__init__": [[112, 130], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "manage.preload", "manage.map_name", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "logging.info"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.preload", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.map_name"], ["    ", "def", "__init__", "(", "self", ",", "db_path", ",", "data_type", ",", "prefix", "=", "None", ",", "load", "=", "True", ")", "->", "None", ":", "\n", "        ", "self", ".", "decode_func", "=", "decode_funcs", "[", "data_type", "]", "\n", "\n", "self", ".", "db_path", "=", "db_path", "\n", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "CACHE_FOLDER", ",", "map_name", "(", "db_path", ")", ")", "\n", "\n", "if", "USE_CACHE", "and", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "logging", ".", "info", "(", "f\"using local cache {cache_file}\"", ")", "\n", "self", ".", "db_path", "=", "cache_file", "\n", "\n", "", "if", "prefix", "is", "None", ":", "\n", "            ", "self", ".", "prefix", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "prefix", "=", "f\"{prefix}_\"", "\n", "\n", "", "self", ".", "_init", "=", "False", "\n", "preload", "(", "self", ",", "load", "=", "load", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.ZipManager.deinitialze": [[131, 135], ["manage.ZipManager.zip_fd.close"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.close"], ["", "def", "deinitialze", "(", "self", ")", ":", "\n", "        ", "self", ".", "zip_fd", ".", "close", "(", ")", "\n", "del", "self", ".", "zip_fd", "\n", "self", ".", "_init", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.ZipManager.initialize": [[136, 145], ["zipfile.ZipFile", "hasattr", "manage.ZipManager.zip_fd.namelist", "manage.ZipManager.deinitialze"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.ZipManager.deinitialze"], ["", "def", "initialize", "(", "self", ",", "close", "=", "True", ")", ":", "\n", "        ", "self", ".", "zip_fd", "=", "zipfile", ".", "ZipFile", "(", "self", ".", "db_path", ",", "mode", "=", "\"r\"", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "\"_keys\"", ")", ":", "\n", "            ", "self", ".", "_keys", "=", "self", ".", "zip_fd", ".", "namelist", "(", ")", "\n", "if", "self", ".", "prefix", "is", "not", "None", ":", "\n", "                ", "self", ".", "_keys", "=", "[", "self", ".", "prefix", "+", "key", "for", "key", "in", "self", ".", "_keys", "]", "\n", "", "", "self", ".", "_init", "=", "True", "\n", "if", "close", ":", "\n", "            ", "self", ".", "deinitialze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.ZipManager.keys": [[146, 151], ["hasattr", "time.sleep"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "keys", "(", "self", ")", ":", "\n", "        ", "while", "not", "hasattr", "(", "self", ",", "\"_keys\"", ")", ":", "\n", "            ", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "return", "self", ".", "_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.ZipManager.get": [[152, 157], ["manage.ZipManager.zip_fd.read", "manage.ZipManager.decode_func", "manage.ZipManager.initialize"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.initialize"], ["", "def", "get", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "not", "self", ".", "_init", ":", "\n", "            ", "self", ".", "initialize", "(", "close", "=", "False", ")", "# https://discuss.pytorch.org/t/dataloader-stucks/14087/3", "\n", "", "byteflow", "=", "self", ".", "zip_fd", ".", "read", "(", "name", ")", "\n", "return", "self", ".", "decode_func", "(", "byteflow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.DBManager.__init__": [[159, 177], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "manage.preload", "manage.map_name", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "logging.info"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.preload", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.map_name"], ["    ", "def", "__init__", "(", "self", ",", "db_path", ",", "data_type", ",", "prefix", "=", "None", ",", "load", "=", "True", ")", "->", "None", ":", "\n", "        ", "self", ".", "decode_func", "=", "decode_funcs", "[", "data_type", "]", "\n", "\n", "self", ".", "db_path", "=", "db_path", "\n", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "CACHE_FOLDER", ",", "map_name", "(", "db_path", ")", ")", "\n", "\n", "if", "USE_CACHE", "and", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "            ", "logging", ".", "info", "(", "f\"using local cache {cache_file}\"", ")", "\n", "self", ".", "db_path", "=", "cache_file", "\n", "\n", "", "if", "prefix", "is", "None", ":", "\n", "            ", "self", ".", "prefix", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "prefix", "=", "f\"{prefix}_\"", "\n", "\n", "", "self", ".", "_init", "=", "False", "\n", "preload", "(", "self", ",", "load", "=", "load", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.DBManager.initialize": [[178, 191], ["lmdb.open", "os.isdir", "os.isdir"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "self", ".", "db_path", ",", "\n", "subdir", "=", "osp", ".", "isdir", "(", "self", ".", "db_path", ")", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ",", "\n", "max_readers", "=", "10000", "\n", ")", "\n", "\n", "\n", "self", ".", "_init", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.DBManager.keys": [[192, 201], ["time.sleep", "key.decode", "key.decode", "manage.get_keys_from_lmdb", "manage.get_keys_from_lmdb"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.get_keys_from_lmdb", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.get_keys_from_lmdb"], ["", "@", "property", "\n", "def", "keys", "(", "self", ")", ":", "\n", "        ", "while", "not", "self", ".", "_init", ":", "\n", "            ", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "if", "self", ".", "prefix", "is", "not", "None", ":", "\n", "            ", "_keys", "=", "[", "self", ".", "prefix", "+", "key", ".", "decode", "(", ")", "for", "key", "in", "get_keys_from_lmdb", "(", "self", ".", "env", ")", "]", "\n", "", "else", ":", "\n", "            ", "_keys", "=", "[", "key", ".", "decode", "(", ")", "for", "key", "in", "get_keys_from_lmdb", "(", "self", ".", "env", ")", "]", "\n", "", "return", "_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.DBManager.get": [[202, 212], ["manage.DBManager.decode_func", "manage.remove_prefix", "env.begin", "txn.get", "print", "remove_prefix.encode"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.remove_prefix", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.encode"], ["", "def", "get", "(", "self", ",", "name", ")", ":", "\n", "        ", "env", "=", "self", ".", "env", "\n", "if", "self", ".", "prefix", "is", "not", "None", ":", "\n", "            ", "name", "=", "remove_prefix", "(", "name", ",", "self", ".", "prefix", ")", "\n", "", "with", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "byteflow", "=", "txn", ".", "get", "(", "name", ".", "encode", "(", ")", ")", "\n", "", "if", "byteflow", "is", "None", ":", "\n", "            ", "print", "(", "\"fuck\"", ",", "name", ")", "\n", "raise", "name", "\n", "", "return", "self", ".", "decode_func", "(", "byteflow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.DBManager.__exit__": [[213, 215], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "del", "self", ".", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.__init__": [[220, 230], ["manage.preload"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.preload"], ["    ", "def", "__init__", "(", "self", ",", "db_path", ",", "data_type", ",", "prefix", "=", "None", ",", "load", "=", "True", ")", ":", "\n", "        ", "assert", "data_type", "==", "\"text\"", "\n", "if", "prefix", "is", "None", ":", "\n", "            ", "self", ".", "prefix", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "prefix", "=", "f\"{prefix}_\"", "\n", "", "self", ".", "db_path", "=", "db_path", "\n", "preload", "(", "self", ",", "load", "=", "load", ")", "\n", "self", ".", "_init", "=", "False", "\n", "self", ".", "_opened", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.initialize": [[231, 240], ["manage.KVReader.open"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "f", "=", "open", "(", "self", ".", "db_path", ",", "\"r\"", ")", "\n", "start", "=", "int", "(", "f", ".", "read", "(", "1000", ")", ".", "strip", "(", ")", ")", "\n", "f", ".", "seek", "(", "start", ")", "\n", "self", ".", "mp", "=", "json", ".", "load", "(", "f", ")", "\n", "if", "self", ".", "prefix", "is", "not", "None", ":", "\n", "            ", "self", ".", "mp", "=", "{", "self", ".", "prefix", "+", "k", ":", "v", "for", "k", ",", "v", "in", "self", ".", "mp", ".", "items", "(", ")", "}", "\n", "", "f", ".", "close", "(", ")", "\n", "self", ".", "_init", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open": [[241, 244], ["manage.KVReader.open"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["", "def", "open", "(", "self", ")", ":", "\n", "        ", "self", ".", "f", "=", "open", "(", "self", ".", "db_path", ",", "\"r\"", ")", "\n", "self", ".", "_opened", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.keys": [[245, 250], ["list", "time.sleep", "manage.KVReader.mp.keys"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys"], ["", "@", "property", "\n", "def", "keys", "(", "self", ")", ":", "\n", "        ", "while", "not", "self", ".", "_init", ":", "\n", "            ", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "return", "list", "(", "self", ".", "mp", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.get": [[251, 258], ["manage.KVReader.f.seek", "manage.KVReader.f.readline().strip", "manage.KVReader.open", "manage.KVReader.f.readline"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["", "def", "get", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "not", "self", ".", "_opened", ":", "\n", "            ", "self", ".", "open", "(", ")", "\n", "", "idx", "=", "self", ".", "mp", "[", "key", "]", "\n", "self", ".", "f", ".", "seek", "(", "idx", ")", "\n", "text", "=", "self", ".", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "return", "{", "\"alt_text\"", ":", "text", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.__len__": [[259, 261], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "mp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.create": [[262, 278], ["manage.KVReader.open"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["", "@", "staticmethod", "\n", "def", "create", "(", "file", ",", "keys", ",", "values", ")", ":", "\n", "        ", "assert", "len", "(", "keys", ")", "==", "len", "(", "values", ")", "\n", "f", "=", "open", "(", "file", ",", "\"w\"", ")", "\n", "f", ".", "write", "(", "\"\\n\"", "*", "1000", ")", "\n", "idx", "=", "[", "]", "\n", "for", "val", "in", "values", ":", "\n", "            ", "idx", ".", "append", "(", "f", ".", "tell", "(", ")", ")", "\n", "f", ".", "write", "(", "val", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "", "start", "=", "f", ".", "tell", "(", ")", "\n", "ki", "=", "{", "k", ":", "i", "for", "i", ",", "k", "in", "zip", "(", "idx", ",", "keys", ")", "}", "\n", "json", ".", "dump", "(", "ki", ",", "f", ",", "ensure_ascii", "=", "False", ")", "\n", "f", ".", "seek", "(", "0", ")", "\n", "f", ".", "write", "(", "str", "(", "start", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MultipleLMDBManager.__init__": [[283, 296], ["print", "manage.MultipleLMDBManager.initialize", "print", "manage.preload"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.initialize", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.preload"], ["    ", "def", "__init__", "(", "self", ",", "files", ":", "list", ",", "data_type", ",", "get_key", "=", "False", ",", "sync", "=", "True", ")", ":", "\n", "        ", "self", ".", "files", "=", "files", "\n", "self", ".", "_is_init", "=", "False", "\n", "self", ".", "data_type", "=", "data_type", "\n", "assert", "data_type", "in", "decode_funcs", "\n", "self", ".", "get_key", "=", "get_key", "\n", "\n", "if", "sync", ":", "\n", "            ", "print", "(", "\"sync\"", ",", "files", ")", "\n", "self", ".", "initialize", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"async\"", ",", "files", ")", "\n", "preload", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MultipleLMDBManager.keep_subset": [[297, 301], ["None"], "methods", ["None"], ["", "", "def", "keep_subset", "(", "self", ",", "subset", ")", ":", "\n", "        ", "mapping", "=", "{", "key", ":", "self", ".", "mapping", "[", "key", "]", "for", "key", "in", "subset", "}", "\n", "del", "self", ".", "mapping", "\n", "self", ".", "mapping", "=", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MultipleLMDBManager.initialize": [[303, 361], ["enumerate", "manage.ThreadPool.run", "old_file.split", "old_file.split", "file.endswith", "Manager", "print", "manage.MultipleLMDBManager.managers.values", "manage.MultipleLMDBManager.managers.items", "len", "file.startswith", "new_files.append", "manage.remove_prefix", "glob.glob", "sorted", "new_files.extend", "len", "file.endswith", "manage.ThreadPool", "print", "logging.info", "manage.MultipleLMDBManager._keys.extend", "logging.info", "print", "file.endswith", "len", "len"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.ThreadPool.run", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.remove_prefix"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "mapping", "=", "{", "}", "\n", "self", ".", "managers", "=", "{", "}", "\n", "new_files", "=", "[", "]", "\n", "for", "old_file", "in", "self", ".", "files", ":", "\n", "            ", "items", "=", "old_file", ".", "split", "(", "\"|\"", ")", "\n", "file", "=", "items", "[", "0", "]", "\n", "if", "len", "(", "items", ")", ">", "1", ":", "\n", "                ", "prefix", "=", "items", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "prefix", "=", "None", "\n", "", "if", "not", "file", ".", "startswith", "(", "\"glob-\"", ")", ":", "\n", "                ", "new_files", ".", "append", "(", "old_file", ")", "\n", "", "else", ":", "\n", "                ", "desc", "=", "remove_prefix", "(", "file", ",", "\"glob-\"", ")", "\n", "sub_files", "=", "glob", ".", "glob", "(", "desc", ")", "\n", "sub_files", "=", "sorted", "(", "sub_files", ")", "\n", "if", "prefix", "is", "not", "None", ":", "\n", "                    ", "sub_files", "=", "[", "f\"{f}|{prefix}\"", "for", "f", "in", "sub_files", "]", "\n", "", "new_files", ".", "extend", "(", "sub_files", ")", "\n", "\n", "", "", "self", ".", "files", "=", "new_files", "\n", "\n", "for", "i", ",", "old_file", "in", "enumerate", "(", "self", ".", "files", ")", ":", "\n", "            ", "items", "=", "old_file", ".", "split", "(", "\"|\"", ")", "\n", "file", "=", "items", "[", "0", "]", "\n", "if", "len", "(", "items", ")", ">", "1", ":", "\n", "                ", "prefix", "=", "items", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "prefix", "=", "None", "\n", "", "if", "file", ".", "endswith", "(", "\".lmdb\"", ")", ":", "\n", "                ", "Manager", "=", "DBManager", "\n", "", "elif", "file", ".", "endswith", "(", "\".zip\"", ")", ":", "\n", "                ", "Manager", "=", "ZipManager", "\n", "", "elif", "file", ".", "endswith", "(", "\".kv\"", ")", ":", "\n", "                ", "Manager", "=", "KVReader", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "", "self", ".", "managers", "[", "i", "]", "=", "Manager", "(", "file", ",", "self", ".", "data_type", ",", "prefix", "=", "prefix", ",", "load", "=", "False", ")", "\n", "print", "(", "file", ",", "\" done\"", ")", "\n", "\n", "", "ThreadPool", "(", "4", ")", ".", "run", "(", "preload", ",", "self", ".", "managers", ".", "values", "(", ")", ")", "\n", "\n", "\n", "if", "self", ".", "get_key", ":", "\n", "            ", "self", ".", "_keys", "=", "[", "]", "\n", "for", "index", ",", "manager", "in", "self", ".", "managers", ".", "items", "(", ")", ":", "\n", "                ", "file", "=", "manager", ".", "db_path", "\n", "print", "(", "f\"{file} loading\"", ")", "\n", "logging", ".", "info", "(", "f\"{file} loading\"", ")", "\n", "keys", "=", "manager", ".", "keys", "\n", "self", ".", "_keys", ".", "extend", "(", "keys", ")", "\n", "for", "key", "in", "keys", ":", "\n", "                    ", "self", ".", "mapping", "[", "key", "]", "=", "index", "\n", "", "logging", ".", "info", "(", "f\"{file} loaded, size = {len(keys)}\"", ")", "\n", "print", "(", "f\"{file} loaded, size = {len(keys)}\"", ")", "\n", "\n", "", "", "self", ".", "_is_init", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MultipleLMDBManager.keys": [[363, 368], ["time.sleep"], "methods", ["None"], ["", "@", "property", "\n", "def", "keys", "(", "self", ")", ":", "\n", "        ", "while", "not", "self", ".", "_is_init", ":", "\n", "            ", "time", ".", "sleep", "(", "0.1", ")", "\n", "", "return", "self", ".", "_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MultipleLMDBManager.cleanup": [[369, 372], ["None"], "methods", ["None"], ["", "def", "cleanup", "(", "self", ")", ":", "\n", "        ", "del", "self", ".", "_keys", "\n", "del", "self", ".", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MultipleLMDBManager.get": [[373, 378], ["manage.MultipleLMDBManager.managers[].get"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get"], ["", "def", "get", "(", "self", ",", "name", ",", "source", "=", "None", ")", ":", "\n", "        ", "if", "source", "is", "None", ":", "\n", "            ", "source", "=", "self", ".", "mapping", "[", "name", "]", "\n", "", "data", "=", "self", ".", "managers", "[", "source", "]", ".", "get", "(", "name", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.__init__": [[383, 397], ["lmdb.open", "lmdb.open", "int"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "readonly", "=", "True", ",", "size", "=", "None", ")", ":", "\n", "        ", "self", ".", "readonly", "=", "readonly", "\n", "if", "readonly", ":", "\n", "            ", "self", ".", "db", "=", "lmdb", ".", "open", "(", "\n", "path", ",", "readonly", "=", "readonly", ",", "max_readers", "=", "10000", ",", "subdir", "=", "False", ",", "lock", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "assert", "size", "is", "not", "None", "\n", "self", ".", "db", "=", "lmdb", ".", "open", "(", "\n", "path", ",", "\n", "readonly", "=", "readonly", ",", "\n", "max_readers", "=", "10000", ",", "\n", "subdir", "=", "False", ",", "\n", "map_size", "=", "int", "(", "1073741824", "*", "size", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys": [[399, 403], ["manage.MetaDB.db.begin", "list", "txn.cursor().iternext", "txn.cursor"], "methods", ["None"], ["", "", "def", "keys", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "db", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "keys", "=", "list", "(", "txn", ".", "cursor", "(", ")", ".", "iternext", "(", "values", "=", "False", ")", ")", "\n", "", "return", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.encode_int": [[404, 406], ["num.to_bytes"], "methods", ["None"], ["", "def", "encode_int", "(", "self", ",", "num", ")", ":", "\n", "        ", "return", "num", ".", "to_bytes", "(", "4", ",", "\"big\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.decode_int": [[407, 409], ["int.from_bytes"], "methods", ["None"], ["", "def", "decode_int", "(", "self", ",", "num_bytes", ")", ":", "\n", "        ", "return", "int", ".", "from_bytes", "(", "num_bytes", ",", "\"big\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get": [[410, 418], ["manage.MetaDB.db.begin", "txn.get", "func"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get"], ["", "def", "get", "(", "self", ",", "key", ",", "func", "=", "None", ")", ":", "\n", "        ", "with", "self", ".", "db", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "val", "=", "txn", ".", "get", "(", "key", ")", "\n", "if", "val", "is", "None", ":", "\n", "                ", "raise", "\n", "", "if", "func", ":", "\n", "                ", "val", "=", "func", "(", "val", ")", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.func_wrapper": [[17, 26], ["queue.get", "func"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get"], ["def", "func_wrapper", "(", "func", ")", ":", "\n", "    ", "def", "sub_func", "(", "queue", ",", "kwargs", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "key", "=", "queue", ".", "get", "(", "False", ")", "\n", "ret", "=", "func", "(", "key", ",", "**", "kwargs", ")", "\n", "", "except", "Empty", ":", "\n", "                ", "break", "\n", "", "", "", "return", "sub_func", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm": [[58, 61], ["os.path.realpath", "os.path.realpath", "os.path.abspath", "os.path.abspath"], "function", ["None"], ["def", "norm", "(", "path", ")", ":", "\n", "    ", "assert", "\"*\"", "not", "in", "path", "\n", "return", "os", ".", "path", ".", "realpath", "(", "os", ".", "path", ".", "abspath", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.in_blob": [[62, 67], ["None"], "function", ["None"], ["", "def", "in_blob", "(", "file", ")", ":", "\n", "    ", "if", "abs_blob_path", "in", "file", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.map_name": [[68, 74], ["manage.norm", "path.replace.lstrip", "path.replace.replace", "len"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm"], ["", "", "def", "map_name", "(", "file", ")", ":", "\n", "    ", "path", "=", "norm", "(", "file", ")", "\n", "path", "=", "path", ".", "lstrip", "(", "abs_blob_path", "+", "\"/\"", ")", "\n", "path", "=", "path", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "assert", "len", "(", "path", ")", "<", "250", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.preload": [[76, 86], ["print", "logging.info", "db.initialize", "threading.Thread", "threading.Thread.start"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.initialize"], ["", "def", "preload", "(", "db", ",", "sync", "=", "True", ",", "load", "=", "True", ")", ":", "\n", "    ", "if", "not", "load", ":", "\n", "        ", "return", "\n", "", "print", "(", "f\"loading {db.db_path}\"", ")", "\n", "logging", ".", "info", "(", "f\"loading {db.db_path}\"", ")", "\n", "if", "sync", ":", "\n", "        ", "db", ".", "initialize", "(", ")", "\n", "", "else", ":", "\n", "        ", "p", "=", "Thread", "(", "target", "=", "db", ".", "initialize", ")", "\n", "p", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.get_keys_from_lmdb": [[87, 90], ["db.begin", "list", "txn.cursor().iternext", "txn.cursor"], "function", ["None"], ["", "", "def", "get_keys_from_lmdb", "(", "db", ")", ":", "\n", "    ", "with", "db", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "        ", "return", "list", "(", "txn", ".", "cursor", "(", ")", ".", "iternext", "(", "values", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.decode_img": [[91, 95], ["PIL.Image.open().convert", "Image.open().convert.load", "PIL.Image.open", "io.BytesIO"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["", "", "def", "decode_img", "(", "byteflow", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "byteflow", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img", ".", "load", "(", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.decode_text": [[96, 98], ["pickle.loads"], "function", ["None"], ["", "def", "decode_text", "(", "byteflow", ")", ":", "\n", "    ", "return", "pickle", ".", "loads", "(", "byteflow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.remove_prefix": [[108, 110], ["text.startswith", "len"], "function", ["None"], ["", "", "def", "remove_prefix", "(", "text", ",", "prefix", ")", ":", "\n", "    ", "return", "text", "[", "len", "(", "prefix", ")", ":", "]", "if", "text", ".", "startswith", "(", "prefix", ")", "else", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.image_preprocessor.DalleTransformerPreprocessor.__init__": [[10, 22], ["albumentations.Compose", "albumentations.Compose", "albumentations.RandomCrop", "albumentations.CenterCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "size", "=", "256", ",", "\n", "phase", "=", "'train'", ",", "\n", "additional_targets", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "phase", "=", "phase", "\n", "# ddc: following dalle to use randomcrop", "\n", "self", ".", "train_preprocessor", "=", "albumentations", ".", "Compose", "(", "[", "albumentations", ".", "RandomCrop", "(", "height", "=", "size", ",", "width", "=", "size", ")", "]", ",", "\n", "additional_targets", "=", "additional_targets", ")", "\n", "self", ".", "val_preprocessor", "=", "albumentations", ".", "Compose", "(", "[", "albumentations", ".", "CenterCrop", "(", "height", "=", "size", ",", "width", "=", "size", ")", "]", ",", "\n", "additional_targets", "=", "additional_targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.image_preprocessor.DalleTransformerPreprocessor.__call__": [[24, 58], ["isinstance", "min", "PIL.Image.fromarray", "int", "int", "image_preprocessor.DalleTransformerPreprocessor.crop", "min", "max", "int", "image_preprocessor.DalleTransformerPreprocessor.resize", "numpy.array().astype", "image_preprocessor.DalleTransformerPreprocessor.train_preprocessor", "image_preprocessor.DalleTransformerPreprocessor.resize", "numpy.array().astype", "image_preprocessor.DalleTransformerPreprocessor.val_preprocessor", "image_preprocessor.DalleTransformerPreprocessor.astype", "random.uniform", "random.uniform", "round", "random.uniform", "int", "int", "max", "max", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "**", "kargs", ")", ":", "\n", "        ", "\"\"\"\n        image: PIL.Image\n        \"\"\"", "\n", "if", "isinstance", "(", "image", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "image", "=", "Image", ".", "fromarray", "(", "image", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "", "w", ",", "h", "=", "image", ".", "size", "\n", "s_min", "=", "min", "(", "h", ",", "w", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "            ", "off_h", "=", "int", "(", "random", ".", "uniform", "(", "3", "*", "(", "h", "-", "s_min", ")", "//", "8", ",", "max", "(", "3", "*", "(", "h", "-", "s_min", ")", "//", "8", "+", "1", ",", "5", "*", "(", "h", "-", "s_min", ")", "//", "8", ")", ")", ")", "\n", "off_w", "=", "int", "(", "random", ".", "uniform", "(", "3", "*", "(", "w", "-", "s_min", ")", "//", "8", ",", "max", "(", "3", "*", "(", "w", "-", "s_min", ")", "//", "8", "+", "1", ",", "5", "*", "(", "w", "-", "s_min", ")", "//", "8", ")", ")", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "image", "=", "image", ".", "crop", "(", "(", "off_w", ",", "off_h", ",", "off_w", "+", "s_min", ",", "off_h", "+", "s_min", ")", ")", "\n", "\n", "# resize image", "\n", "t_max", "=", "min", "(", "s_min", ",", "round", "(", "9", "/", "8", "*", "self", ".", "size", ")", ")", "\n", "t_max", "=", "max", "(", "t_max", ",", "self", ".", "size", ")", "\n", "t", "=", "int", "(", "random", ".", "uniform", "(", "self", ".", "size", ",", "t_max", "+", "1", ")", ")", "\n", "image", "=", "image", ".", "resize", "(", "(", "t", ",", "t", ")", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "self", ".", "train_preprocessor", "(", "image", "=", "image", ")", "#randomcrop (size,size)", "\n", "", "else", ":", "\n", "            ", "if", "w", "<", "h", ":", "\n", "                ", "w_", "=", "self", ".", "size", "\n", "h_", "=", "int", "(", "h", "*", "w_", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "h_", "=", "self", ".", "size", "\n", "w_", "=", "int", "(", "w", "*", "h_", "/", "h", ")", "\n", "", "image", "=", "image", ".", "resize", "(", "(", "w_", ",", "h_", ")", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "self", ".", "val_preprocessor", "(", "image", "=", "image", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.image_preprocessor.ImageNetTransformerPreprocessor.__init__": [[61, 73], ["albumentations.Compose", "albumentations.Compose", "albumentations.RandomCrop", "albumentations.CenterCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "size", "=", "256", ",", "\n", "phase", "=", "'train'", ",", "\n", "additional_targets", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "phase", "=", "phase", "\n", "# ddc: following dalle to use randomcrop", "\n", "self", ".", "train_preprocessor", "=", "albumentations", ".", "Compose", "(", "[", "albumentations", ".", "RandomCrop", "(", "height", "=", "size", ",", "width", "=", "size", ")", "]", ",", "\n", "additional_targets", "=", "additional_targets", ")", "\n", "self", ".", "val_preprocessor", "=", "albumentations", ".", "Compose", "(", "[", "albumentations", ".", "CenterCrop", "(", "height", "=", "size", ",", "width", "=", "size", ")", "]", ",", "\n", "additional_targets", "=", "additional_targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.image_preprocessor.ImageNetTransformerPreprocessor.__call__": [[75, 106], ["isinstance", "min", "PIL.Image.fromarray", "image_preprocessor.ImageNetTransformerPreprocessor.resize", "numpy.array().astype", "image_preprocessor.ImageNetTransformerPreprocessor.train_preprocessor", "image_preprocessor.ImageNetTransformerPreprocessor.resize", "numpy.array().astype", "image_preprocessor.ImageNetTransformerPreprocessor.val_preprocessor", "image_preprocessor.ImageNetTransformerPreprocessor.astype", "int", "int", "int", "int", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "**", "kargs", ")", ":", "\n", "        ", "\"\"\"\n        image: PIL.Image\n        \"\"\"", "\n", "if", "isinstance", "(", "image", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "image", "=", "Image", ".", "fromarray", "(", "image", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n", "", "w", ",", "h", "=", "image", ".", "size", "\n", "s_min", "=", "min", "(", "h", ",", "w", ")", "\n", "\n", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "            ", "if", "w", "<", "h", ":", "\n", "                ", "w_", "=", "self", ".", "size", "\n", "h_", "=", "int", "(", "h", "*", "w_", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "h_", "=", "self", ".", "size", "\n", "w_", "=", "int", "(", "w", "*", "h_", "/", "h", ")", "\n", "", "image", "=", "image", ".", "resize", "(", "(", "w_", ",", "h_", ")", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "self", ".", "train_preprocessor", "(", "image", "=", "image", ")", "\n", "", "else", ":", "\n", "            ", "if", "w", "<", "h", ":", "\n", "                ", "w_", "=", "self", ".", "size", "\n", "h_", "=", "int", "(", "h", "*", "w_", "/", "w", ")", "\n", "", "else", ":", "\n", "                ", "h_", "=", "self", ".", "size", "\n", "w_", "=", "int", "(", "w", "*", "h_", "/", "h", ")", "\n", "", "image", "=", "image", ".", "resize", "(", "(", "w_", ",", "h_", ")", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "self", ".", "val_preprocessor", "(", "image", "=", "image", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.is_primary": [[12, 14], ["distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_rank"], ["def", "is_primary", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_rank": [[16, 24], ["torch.distributed.get_rank", "torch.distributed.is_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_rank", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.is_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_local_rank": [[26, 37], ["torch.distributed.get_rank", "torch.distributed.is_available", "torch.distributed.is_initialized", "ValueError"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_rank", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.is_initialized"], ["", "def", "get_local_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "\n", "", "if", "LOCAL_PROCESS_GROUP", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"tensorfn.distributed.LOCAL_PROCESS_GROUP is None\"", ")", "\n", "\n", "", "return", "dist", ".", "get_rank", "(", "group", "=", "LOCAL_PROCESS_GROUP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.synchronize": [[39, 52], ["torch.distributed.get_world_size", "torch.distributed.barrier", "torch.distributed.is_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_world_size", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.is_initialized"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_world_size": [[54, 62], ["torch.distributed.get_world_size", "torch.distributed.is_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_world_size", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.is_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.is_distributed": [[64, 67], ["RuntimeError", "distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_world_size"], ["", "def", "is_distributed", "(", ")", ":", "\n", "    ", "raise", "RuntimeError", "(", "'Please debug this function!'", ")", "\n", "return", "get_world_size", "(", ")", ">", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.all_reduce": [[69, 77], ["distributed.get_world_size", "torch.distributed.all_reduce"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_world_size", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.all_reduce"], ["", "def", "all_reduce", "(", "tensor", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ",", "async_op", "=", "False", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "tensor", "\n", "", "dist", ".", "all_reduce", "(", "tensor", ",", "op", "=", "op", ",", "async_op", "=", "async_op", ")", "\n", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.all_gather": [[79, 112], ["distributed.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.IntTensor().to", "torch.distributed.all_gather", "max", "torch.distributed.all_gather", "zip", "torch.IntTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.IntTensor", "range", "size.item", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.IntTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_world_size", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.all_gather", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.all_gather"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "local_size", "=", "torch", ".", "IntTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "IntTensor", "(", "[", "1", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "0", ")", "\n", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.reduce_dict": [[114, 137], ["distributed.get_world_size", "torch.no_grad", "sorted", "torch.stack", "torch.distributed.reduce", "input_dict.keys", "keys.append", "torch.stack.append", "torch.distributed.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_world_size", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "keys", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "keys", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "            ", "values", "/=", "world_size", "\n", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "values", ")", "}", "\n", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.data_sampler": [[139, 148], ["torch.utils.data.distributed.DistributedSampler", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler"], "function", ["None"], ["", "def", "data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "data", ".", "distributed", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "\n", "", "if", "shuffle", ":", "\n", "        ", "return", "data", ".", "RandomSampler", "(", "dataset", ")", "\n", "\n", "", "else", ":", "\n", "        ", "return", "data", ".", "SequentialSampler", "(", "dataset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.launch.find_free_port": [[10, 20], ["socket.socket", "socket.socket.bind", "socket.socket.close", "socket.socket.getsockname"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.close"], ["def", "find_free_port", "(", ")", ":", "\n", "    ", "import", "socket", "\n", "\n", "sock", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "\n", "sock", ".", "bind", "(", "(", "\"\"", ",", "0", ")", ")", "\n", "port", "=", "sock", ".", "getsockname", "(", ")", "[", "1", "]", "\n", "sock", ".", "close", "(", ")", "\n", "\n", "return", "port", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.launch.launch": [[22, 51], ["torch.multiprocessing.spawn", "fn", "launch.find_free_port", "dist_url.startswith", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.launch.find_free_port"], ["", "def", "launch", "(", "fn", ",", "n_gpu_per_machine", ",", "n_machine", "=", "1", ",", "machine_rank", "=", "0", ",", "dist_url", "=", "None", ",", "args", "=", "(", ")", ")", ":", "\n", "    ", "world_size", "=", "n_machine", "*", "n_gpu_per_machine", "\n", "\n", "if", "world_size", ">", "1", ":", "\n", "# if \"OMP_NUM_THREADS\" not in os.environ:", "\n", "#     os.environ[\"OMP_NUM_THREADS\"] = \"1\"", "\n", "\n", "        ", "if", "dist_url", "==", "\"auto\"", ":", "\n", "            ", "if", "n_machine", "!=", "1", ":", "\n", "                ", "raise", "ValueError", "(", "'dist_url=\"auto\" not supported in multi-machine jobs'", ")", "\n", "\n", "", "port", "=", "find_free_port", "(", ")", "\n", "dist_url", "=", "f\"tcp://127.0.0.1:{port}\"", "\n", "\n", "", "if", "n_machine", ">", "1", "and", "dist_url", ".", "startswith", "(", "\"file://\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"file:// is not a reliable init method in multi-machine jobs. Prefer tcp://\"", "\n", ")", "\n", "\n", "", "mp", ".", "spawn", "(", "\n", "distributed_worker", ",", "\n", "nprocs", "=", "n_gpu_per_machine", ",", "\n", "args", "=", "(", "fn", ",", "world_size", ",", "n_gpu_per_machine", ",", "machine_rank", ",", "dist_url", ",", "args", ")", ",", "\n", "daemon", "=", "False", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "local_rank", "=", "0", "\n", "fn", "(", "local_rank", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.launch.distributed_worker": [[53, 94], ["image_synthesis.synchronize", "torch.cuda.set_device", "range", "fn", "torch.cuda.is_available", "OSError", "torch.distributed.init_process_group", "torch.cuda.device_count", "ValueError", "ValueError", "list", "torch.distributed.new_group", "OSError", "range", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.synchronize"], ["", "", "def", "distributed_worker", "(", "\n", "local_rank", ",", "fn", ",", "world_size", ",", "n_gpu_per_machine", ",", "machine_rank", ",", "dist_url", ",", "args", "\n", ")", ":", "\n", "    ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "raise", "OSError", "(", "\"CUDA is not available. Please check your environments\"", ")", "\n", "\n", "", "global_rank", "=", "machine_rank", "*", "n_gpu_per_machine", "+", "local_rank", "\n", "\n", "try", ":", "\n", "        ", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "\"NCCL\"", ",", "\n", "init_method", "=", "dist_url", ",", "\n", "world_size", "=", "world_size", ",", "\n", "rank", "=", "global_rank", ",", "\n", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "        ", "raise", "OSError", "(", "\"failed to initialize NCCL groups\"", ")", "\n", "\n", "", "dist_fn", ".", "synchronize", "(", ")", "\n", "\n", "if", "n_gpu_per_machine", ">", "torch", ".", "cuda", ".", "device_count", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"specified n_gpu_per_machine larger than available device ({torch.cuda.device_count()})\"", "\n", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "local_rank", ")", "\n", "\n", "if", "dist_fn", ".", "LOCAL_PROCESS_GROUP", "is", "not", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"torch.distributed.LOCAL_PROCESS_GROUP is not None\"", ")", "\n", "\n", "", "n_machine", "=", "world_size", "//", "n_gpu_per_machine", "\n", "\n", "for", "i", "in", "range", "(", "n_machine", ")", ":", "\n", "        ", "ranks_on_i", "=", "list", "(", "range", "(", "i", "*", "n_gpu_per_machine", ",", "(", "i", "+", "1", ")", "*", "n_gpu_per_machine", ")", ")", "\n", "pg", "=", "dist", ".", "new_group", "(", "ranks_on_i", ")", "\n", "\n", "if", "i", "==", "machine_rank", ":", "\n", "            ", "dist_fn", ".", "LOCAL_PROCESS_GROUP", "=", "pg", "\n", "\n", "", "", "fn", "(", "local_rank", ",", "*", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.modeling.build.build_model": [[4, 6], ["image_synthesis.utils.misc.instantiate_from_config"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config"], ["def", "build_model", "(", "config", ",", "args", "=", "None", ")", ":", "\n", "    ", "return", "instantiate_from_config", "(", "config", "[", "'model'", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.__init__": [[69, 145], ["torch.nn.Module.__init__", "image_synthesis.utils.misc.instantiate_from_config", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "diffusion_transformer.log_1_min_a", "diffusion_transformer.log_1_min_a", "diffusion_transformer.DiffusionTransformer.register_buffer", "diffusion_transformer.DiffusionTransformer.register_buffer", "diffusion_transformer.DiffusionTransformer.register_buffer", "diffusion_transformer.DiffusionTransformer.register_buffer", "diffusion_transformer.DiffusionTransformer.register_buffer", "diffusion_transformer.DiffusionTransformer.register_buffer", "diffusion_transformer.DiffusionTransformer.register_buffer", "diffusion_transformer.DiffusionTransformer.register_buffer", "diffusion_transformer.DiffusionTransformer.register_buffer", "diffusion_transformer.DiffusionTransformer.register_buffer", "image_synthesis.utils.misc.instantiate_from_config", "diffusion_transformer.alpha_schedule", "print", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "log_add_exp().abs().sum().item", "log_add_exp().abs().sum().item", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "log_1_min_a.float", "log_1_min_a.float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "log_add_exp().abs().sum", "log_add_exp().abs().sum", "log_add_exp().abs", "log_add_exp().abs", "diffusion_transformer.log_add_exp", "diffusion_transformer.log_add_exp"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_1_min_a", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_1_min_a", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.alpha_schedule", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_add_exp", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_add_exp"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "content_emb_config", "=", "None", ",", "\n", "condition_emb_config", "=", "None", ",", "\n", "transformer_config", "=", "None", ",", "\n", "\n", "diffusion_step", "=", "100", ",", "\n", "alpha_init_type", "=", "'cos'", ",", "\n", "auxiliary_loss_weight", "=", "0", ",", "\n", "adaptive_auxiliary_loss", "=", "False", ",", "\n", "mask_weight", "=", "[", "1", ",", "1", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "condition_emb_config", "is", "None", ":", "\n", "            ", "self", ".", "condition_emb", "=", "None", "\n", "", "else", ":", "\n", "# for condition and config, we learn a seperate embedding", "\n", "            ", "self", ".", "condition_emb", "=", "instantiate_from_config", "(", "condition_emb_config", ")", "\n", "self", ".", "condition_dim", "=", "self", ".", "condition_emb", ".", "embed_dim", "\n", "\n", "", "transformer_config", "[", "'params'", "]", "[", "'diffusion_step'", "]", "=", "diffusion_step", "\n", "transformer_config", "[", "'params'", "]", "[", "'content_emb_config'", "]", "=", "content_emb_config", "\n", "self", ".", "transformer", "=", "instantiate_from_config", "(", "transformer_config", ")", "\n", "self", ".", "content_seq_len", "=", "transformer_config", "[", "'params'", "]", "[", "'content_seq_len'", "]", "\n", "self", ".", "amp", "=", "False", "\n", "\n", "self", ".", "num_classes", "=", "self", ".", "transformer", ".", "content_emb", ".", "num_embed", "\n", "self", ".", "loss_type", "=", "'vb_stochastic'", "\n", "self", ".", "shape", "=", "transformer_config", "[", "'params'", "]", "[", "'content_seq_len'", "]", "\n", "self", ".", "num_timesteps", "=", "diffusion_step", "\n", "self", ".", "parametrization", "=", "'x0'", "\n", "self", ".", "auxiliary_loss_weight", "=", "auxiliary_loss_weight", "\n", "self", ".", "adaptive_auxiliary_loss", "=", "adaptive_auxiliary_loss", "\n", "self", ".", "mask_weight", "=", "mask_weight", "\n", "\n", "if", "alpha_init_type", "==", "\"alpha1\"", ":", "\n", "            ", "at", ",", "bt", ",", "ct", ",", "att", ",", "btt", ",", "ctt", "=", "alpha_schedule", "(", "self", ".", "num_timesteps", ",", "N", "=", "self", ".", "num_classes", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"alpha_init_type is Wrong !! \"", ")", "\n", "\n", "", "at", "=", "torch", ".", "tensor", "(", "at", ".", "astype", "(", "'float64'", ")", ")", "\n", "bt", "=", "torch", ".", "tensor", "(", "bt", ".", "astype", "(", "'float64'", ")", ")", "\n", "ct", "=", "torch", ".", "tensor", "(", "ct", ".", "astype", "(", "'float64'", ")", ")", "\n", "log_at", "=", "torch", ".", "log", "(", "at", ")", "\n", "log_bt", "=", "torch", ".", "log", "(", "bt", ")", "\n", "log_ct", "=", "torch", ".", "log", "(", "ct", ")", "\n", "att", "=", "torch", ".", "tensor", "(", "att", ".", "astype", "(", "'float64'", ")", ")", "\n", "btt", "=", "torch", ".", "tensor", "(", "btt", ".", "astype", "(", "'float64'", ")", ")", "\n", "ctt", "=", "torch", ".", "tensor", "(", "ctt", ".", "astype", "(", "'float64'", ")", ")", "\n", "log_cumprod_at", "=", "torch", ".", "log", "(", "att", ")", "\n", "log_cumprod_bt", "=", "torch", ".", "log", "(", "btt", ")", "\n", "log_cumprod_ct", "=", "torch", ".", "log", "(", "ctt", ")", "\n", "\n", "log_1_min_ct", "=", "log_1_min_a", "(", "log_ct", ")", "\n", "log_1_min_cumprod_ct", "=", "log_1_min_a", "(", "log_cumprod_ct", ")", "\n", "\n", "assert", "log_add_exp", "(", "log_ct", ",", "log_1_min_ct", ")", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "<", "1.e-5", "\n", "assert", "log_add_exp", "(", "log_cumprod_ct", ",", "log_1_min_cumprod_ct", ")", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "<", "1.e-5", "\n", "\n", "self", ".", "diffusion_acc_list", "=", "[", "0", "]", "*", "self", ".", "num_timesteps", "\n", "self", ".", "diffusion_keep_list", "=", "[", "0", "]", "*", "self", ".", "num_timesteps", "\n", "# Convert to float32 and register buffers.", "\n", "self", ".", "register_buffer", "(", "'log_at'", ",", "log_at", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'log_bt'", ",", "log_bt", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'log_ct'", ",", "log_ct", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'log_cumprod_at'", ",", "log_cumprod_at", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'log_cumprod_bt'", ",", "log_cumprod_bt", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'log_cumprod_ct'", ",", "log_cumprod_ct", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'log_1_min_ct'", ",", "log_1_min_ct", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'log_1_min_cumprod_ct'", ",", "log_1_min_cumprod_ct", ".", "float", "(", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'Lt_history'", ",", "torch", ".", "zeros", "(", "self", ".", "num_timesteps", ")", ")", "\n", "self", ".", "register_buffer", "(", "'Lt_count'", ",", "torch", ".", "zeros", "(", "self", ".", "num_timesteps", ")", ")", "\n", "self", ".", "zero_vector", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.multinomial_kl": [[147, 150], ["log_prob1.exp"], "methods", ["None"], ["", "def", "multinomial_kl", "(", "self", ",", "log_prob1", ",", "log_prob2", ")", ":", "# compute KL loss on log_prob", "\n", "        ", "kl", "=", "(", "log_prob1", ".", "exp", "(", ")", "*", "(", "log_prob1", "-", "log_prob2", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.q_pred_one_timestep": [[151, 166], ["diffusion_transformer.extract", "diffusion_transformer.extract", "diffusion_transformer.extract", "diffusion_transformer.extract", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "diffusion_transformer.log_add_exp", "diffusion_transformer.log_add_exp"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_add_exp", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_add_exp"], ["", "def", "q_pred_one_timestep", "(", "self", ",", "log_x_t", ",", "t", ")", ":", "# q(xt|xt_1)", "\n", "        ", "log_at", "=", "extract", "(", "self", ".", "log_at", ",", "t", ",", "log_x_t", ".", "shape", ")", "# at", "\n", "log_bt", "=", "extract", "(", "self", ".", "log_bt", ",", "t", ",", "log_x_t", ".", "shape", ")", "# bt", "\n", "log_ct", "=", "extract", "(", "self", ".", "log_ct", ",", "t", ",", "log_x_t", ".", "shape", ")", "# ct", "\n", "log_1_min_ct", "=", "extract", "(", "self", ".", "log_1_min_ct", ",", "t", ",", "log_x_t", ".", "shape", ")", "# 1-ct", "\n", "\n", "log_probs", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "log_add_exp", "(", "log_x_t", "[", ":", ",", ":", "-", "1", ",", ":", "]", "+", "log_at", ",", "log_bt", ")", ",", "\n", "log_add_exp", "(", "log_x_t", "[", ":", ",", "-", "1", ":", ",", ":", "]", "+", "log_1_min_ct", ",", "log_ct", ")", "\n", "]", ",", "\n", "dim", "=", "1", "\n", ")", "\n", "\n", "return", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.q_pred": [[167, 185], ["diffusion_transformer.extract", "diffusion_transformer.extract", "diffusion_transformer.extract", "diffusion_transformer.extract", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "diffusion_transformer.log_add_exp", "diffusion_transformer.log_add_exp"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_add_exp", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_add_exp"], ["", "def", "q_pred", "(", "self", ",", "log_x_start", ",", "t", ")", ":", "# q(xt|x0)", "\n", "# log_x_start can be onehot or not", "\n", "        ", "t", "=", "(", "t", "+", "(", "self", ".", "num_timesteps", "+", "1", ")", ")", "%", "(", "self", ".", "num_timesteps", "+", "1", ")", "\n", "log_cumprod_at", "=", "extract", "(", "self", ".", "log_cumprod_at", ",", "t", ",", "log_x_start", ".", "shape", ")", "# at~", "\n", "log_cumprod_bt", "=", "extract", "(", "self", ".", "log_cumprod_bt", ",", "t", ",", "log_x_start", ".", "shape", ")", "# bt~", "\n", "log_cumprod_ct", "=", "extract", "(", "self", ".", "log_cumprod_ct", ",", "t", ",", "log_x_start", ".", "shape", ")", "# ct~", "\n", "log_1_min_cumprod_ct", "=", "extract", "(", "self", ".", "log_1_min_cumprod_ct", ",", "t", ",", "log_x_start", ".", "shape", ")", "# 1-ct~", "\n", "\n", "\n", "log_probs", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "log_add_exp", "(", "log_x_start", "[", ":", ",", ":", "-", "1", ",", ":", "]", "+", "log_cumprod_at", ",", "log_cumprod_bt", ")", ",", "\n", "log_add_exp", "(", "log_x_start", "[", ":", ",", "-", "1", ":", ",", ":", "]", "+", "log_1_min_cumprod_ct", ",", "log_cumprod_ct", ")", "\n", "]", ",", "\n", "dim", "=", "1", "\n", ")", "\n", "\n", "return", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.predict_start": [[186, 205], ["diffusion_transformer.log_onehot_to_index", "torch.log_softmax().float", "torch.log_softmax().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "diffusion_transformer.DiffusionTransformer.transformer", "diffusion_transformer.DiffusionTransformer.size", "log_onehot_to_index.size", "diffusion_transformer.DiffusionTransformer.size", "log_x_t.size", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "diffusion_transformer.DiffusionTransformer.transformer", "diffusion_transformer.DiffusionTransformer.size", "log_onehot_to_index.size", "torch.log_softmax", "torch.log_softmax", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "diffusion_transformer.DiffusionTransformer.double", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index"], ["", "def", "predict_start", "(", "self", ",", "log_x_t", ",", "cond_emb", ",", "t", ")", ":", "# p(x0|xt)", "\n", "        ", "x_t", "=", "log_onehot_to_index", "(", "log_x_t", ")", "\n", "if", "self", ".", "amp", "==", "True", ":", "\n", "            ", "with", "autocast", "(", ")", ":", "\n", "                ", "out", "=", "self", ".", "transformer", "(", "x_t", ",", "cond_emb", ",", "t", ")", "\n", "", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "transformer", "(", "x_t", ",", "cond_emb", ",", "t", ")", "\n", "\n", "", "assert", "out", ".", "size", "(", "0", ")", "==", "x_t", ".", "size", "(", "0", ")", "\n", "assert", "out", ".", "size", "(", "1", ")", "==", "self", ".", "num_classes", "-", "1", "\n", "assert", "out", ".", "size", "(", ")", "[", "2", ":", "]", "==", "x_t", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "log_pred", "=", "F", ".", "log_softmax", "(", "out", ".", "double", "(", ")", ",", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "batch_size", "=", "log_x_t", ".", "size", "(", ")", "[", "0", "]", "\n", "if", "self", ".", "zero_vector", "is", "None", "or", "self", ".", "zero_vector", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "            ", "self", ".", "zero_vector", "=", "torch", ".", "zeros", "(", "batch_size", ",", "1", ",", "self", ".", "content_seq_len", ")", ".", "type_as", "(", "log_x_t", ")", "-", "70", "\n", "", "log_pred", "=", "torch", ".", "cat", "(", "(", "log_pred", ",", "self", ".", "zero_vector", ")", ",", "dim", "=", "1", ")", "\n", "log_pred", "=", "torch", ".", "clamp", "(", "log_pred", ",", "-", "70", ",", "0", ")", "\n", "\n", "return", "log_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.q_posterior": [[206, 239], ["diffusion_transformer.log_onehot_to_index", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.log().expand", "torch.log().expand", "torch.log().expand", "torch.log().expand", "diffusion_transformer.DiffusionTransformer.q_pred", "diffusion_transformer.extract", "extract.expand", "diffusion_transformer.DiffusionTransformer.q_pred_one_timestep", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "diffusion_transformer.extract", "extract.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "log_x_start.size", "t.min().item", "t.max().item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.log", "torch.log", "torch.log", "torch.log", "diffusion_transformer.DiffusionTransformer.q_pred", "t.min", "t.max"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_pred", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_pred_one_timestep", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_pred"], ["", "def", "q_posterior", "(", "self", ",", "log_x_start", ",", "log_x_t", ",", "t", ")", ":", "# p_theta(xt_1|xt) = sum(q(xt-1|xt,x0')*p(x0'))", "\n", "# notice that log_x_t is onehot", "\n", "        ", "assert", "t", ".", "min", "(", ")", ".", "item", "(", ")", ">=", "0", "and", "t", ".", "max", "(", ")", ".", "item", "(", ")", "<", "self", ".", "num_timesteps", "\n", "batch_size", "=", "log_x_start", ".", "size", "(", ")", "[", "0", "]", "\n", "onehot_x_t", "=", "log_onehot_to_index", "(", "log_x_t", ")", "\n", "mask", "=", "(", "onehot_x_t", "==", "self", ".", "num_classes", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "log_one_vector", "=", "torch", ".", "zeros", "(", "batch_size", ",", "1", ",", "1", ")", ".", "type_as", "(", "log_x_t", ")", "\n", "log_zero_vector", "=", "torch", ".", "log", "(", "log_one_vector", "+", "1.0e-30", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "content_seq_len", ")", "\n", "\n", "log_qt", "=", "self", ".", "q_pred", "(", "log_x_t", ",", "t", ")", "# q(xt|x0)", "\n", "# log_qt = torch.cat((log_qt[:,:-1,:], log_zero_vector), dim=1)", "\n", "log_qt", "=", "log_qt", "[", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "log_cumprod_ct", "=", "extract", "(", "self", ".", "log_cumprod_ct", ",", "t", ",", "log_x_start", ".", "shape", ")", "# ct~", "\n", "ct_cumprod_vector", "=", "log_cumprod_ct", ".", "expand", "(", "-", "1", ",", "self", ".", "num_classes", "-", "1", ",", "-", "1", ")", "\n", "# ct_cumprod_vector = torch.cat((ct_cumprod_vector, log_one_vector), dim=1)", "\n", "log_qt", "=", "(", "~", "mask", ")", "*", "log_qt", "+", "mask", "*", "ct_cumprod_vector", "\n", "\n", "\n", "log_qt_one_timestep", "=", "self", ".", "q_pred_one_timestep", "(", "log_x_t", ",", "t", ")", "# q(xt|xt_1)", "\n", "log_qt_one_timestep", "=", "torch", ".", "cat", "(", "(", "log_qt_one_timestep", "[", ":", ",", ":", "-", "1", ",", ":", "]", ",", "log_zero_vector", ")", ",", "dim", "=", "1", ")", "\n", "log_ct", "=", "extract", "(", "self", ".", "log_ct", ",", "t", ",", "log_x_start", ".", "shape", ")", "# ct", "\n", "ct_vector", "=", "log_ct", ".", "expand", "(", "-", "1", ",", "self", ".", "num_classes", "-", "1", ",", "-", "1", ")", "\n", "ct_vector", "=", "torch", ".", "cat", "(", "(", "ct_vector", ",", "log_one_vector", ")", ",", "dim", "=", "1", ")", "\n", "log_qt_one_timestep", "=", "(", "~", "mask", ")", "*", "log_qt_one_timestep", "+", "mask", "*", "ct_vector", "\n", "\n", "# log_x_start = torch.cat((log_x_start, log_zero_vector), dim=1)", "\n", "# q = log_x_start - log_qt", "\n", "q", "=", "log_x_start", "[", ":", ",", ":", "-", "1", ",", ":", "]", "-", "log_qt", "\n", "q", "=", "torch", ".", "cat", "(", "(", "q", ",", "log_zero_vector", ")", ",", "dim", "=", "1", ")", "\n", "q_log_sum_exp", "=", "torch", ".", "logsumexp", "(", "q", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "q", "=", "q", "-", "q_log_sum_exp", "\n", "log_EV_xtmin_given_xt_given_xstart", "=", "self", ".", "q_pred", "(", "q", ",", "t", "-", "1", ")", "+", "log_qt_one_timestep", "+", "q_log_sum_exp", "\n", "return", "torch", ".", "clamp", "(", "log_EV_xtmin_given_xt_given_xstart", ",", "-", "70", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.p_pred": [[240, 250], ["diffusion_transformer.DiffusionTransformer.predict_start", "diffusion_transformer.DiffusionTransformer.q_posterior", "diffusion_transformer.DiffusionTransformer.predict_start"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.predict_start", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_posterior", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.predict_start"], ["", "def", "p_pred", "(", "self", ",", "log_x", ",", "cond_emb", ",", "t", ")", ":", "# if x0, first p(x0|xt), than sum(q(xt-1|xt,x0)*p(x0|xt))", "\n", "        ", "if", "self", ".", "parametrization", "==", "'x0'", ":", "\n", "            ", "log_x_recon", "=", "self", ".", "predict_start", "(", "log_x", ",", "cond_emb", ",", "t", ")", "\n", "log_model_pred", "=", "self", ".", "q_posterior", "(", "\n", "log_x_start", "=", "log_x_recon", ",", "log_x_t", "=", "log_x", ",", "t", "=", "t", ")", "\n", "", "elif", "self", ".", "parametrization", "==", "'direct'", ":", "\n", "            ", "log_model_pred", "=", "self", ".", "predict_start", "(", "log_x", ",", "cond_emb", ",", "t", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "", "return", "log_model_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.p_sample": [[251, 256], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "diffusion_transformer.DiffusionTransformer.p_pred", "diffusion_transformer.DiffusionTransformer.log_sample_categorical"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.p_pred", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.log_sample_categorical"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "p_sample", "(", "self", ",", "log_x", ",", "cond_emb", ",", "t", ")", ":", "# sample q(xt-1) for next step from  xt, actually is p(xt-1|xt)", "\n", "        ", "model_log_prob", "=", "self", ".", "p_pred", "(", "log_x", ",", "cond_emb", ",", "t", ")", "\n", "out", "=", "self", ".", "log_sample_categorical", "(", "model_log_prob", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.log_sample_categorical": [[257, 263], ["torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "diffusion_transformer.index_to_log_onehot", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.index_to_log_onehot"], ["", "def", "log_sample_categorical", "(", "self", ",", "logits", ")", ":", "# use gumbel to sample onehot vector from log probability", "\n", "        ", "uniform", "=", "torch", ".", "rand_like", "(", "logits", ")", "\n", "gumbel_noise", "=", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "uniform", "+", "1e-30", ")", "+", "1e-30", ")", "\n", "sample", "=", "(", "gumbel_noise", "+", "logits", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "log_sample", "=", "index_to_log_onehot", "(", "sample", ",", "self", ".", "num_classes", ")", "\n", "return", "log_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.q_sample": [[264, 270], ["diffusion_transformer.DiffusionTransformer.q_pred", "diffusion_transformer.DiffusionTransformer.log_sample_categorical"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_pred", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.log_sample_categorical"], ["", "def", "q_sample", "(", "self", ",", "log_x_start", ",", "t", ")", ":", "# diffusion step, q(xt|x0) and sample xt", "\n", "        ", "log_EV_qxt_x0", "=", "self", ".", "q_pred", "(", "log_x_start", ",", "t", ")", "\n", "\n", "log_sample", "=", "self", ".", "log_sample_categorical", "(", "log_EV_qxt_x0", ")", "\n", "\n", "return", "log_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.sample_time": [[271, 293], ["torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "pt_all.gather", "diffusion_transformer.DiffusionTransformer.sample_time", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "Lt_sqrt.sum", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.sample_time"], ["", "def", "sample_time", "(", "self", ",", "b", ",", "device", ",", "method", "=", "'uniform'", ")", ":", "\n", "        ", "if", "method", "==", "'importance'", ":", "\n", "            ", "if", "not", "(", "self", ".", "Lt_count", ">", "10", ")", ".", "all", "(", ")", ":", "\n", "                ", "return", "self", ".", "sample_time", "(", "b", ",", "device", ",", "method", "=", "'uniform'", ")", "\n", "\n", "", "Lt_sqrt", "=", "torch", ".", "sqrt", "(", "self", ".", "Lt_history", "+", "1e-10", ")", "+", "0.0001", "\n", "Lt_sqrt", "[", "0", "]", "=", "Lt_sqrt", "[", "1", "]", "# Overwrite decoder term with L1.", "\n", "pt_all", "=", "Lt_sqrt", "/", "Lt_sqrt", ".", "sum", "(", ")", "\n", "\n", "t", "=", "torch", ".", "multinomial", "(", "pt_all", ",", "num_samples", "=", "b", ",", "replacement", "=", "True", ")", "\n", "\n", "pt", "=", "pt_all", ".", "gather", "(", "dim", "=", "0", ",", "index", "=", "t", ")", "\n", "\n", "return", "t", ",", "pt", "\n", "\n", "", "elif", "method", "==", "'uniform'", ":", "\n", "            ", "t", "=", "torch", ".", "randint", "(", "0", ",", "self", ".", "num_timesteps", ",", "(", "b", ",", ")", ",", "device", "=", "device", ")", ".", "long", "(", ")", "\n", "\n", "pt", "=", "torch", ".", "ones_like", "(", "t", ")", ".", "float", "(", ")", "/", "self", ".", "num_timesteps", "\n", "return", "t", ",", "pt", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer._train_loss": [[294, 361], ["diffusion_transformer.DiffusionTransformer.sample_time", "diffusion_transformer.index_to_log_onehot", "diffusion_transformer.DiffusionTransformer.q_sample", "diffusion_transformer.log_onehot_to_index", "diffusion_transformer.DiffusionTransformer.predict_start", "diffusion_transformer.DiffusionTransformer.q_posterior", "diffusion_transformer.log_onehot_to_index", "diffusion_transformer.log_onehot_to_index", "diffusion_transformer.log_onehot_to_index", "range", "diffusion_transformer.DiffusionTransformer.q_posterior", "diffusion_transformer.DiffusionTransformer.multinomial_kl", "diffusion_transformer.sum_except_batch", "diffusion_transformer.sum_except_batch", "kl_loss.pow", "diffusion_transformer.DiffusionTransformer.Lt_history.gather", "diffusion_transformer.DiffusionTransformer.Lt_history.scatter_", "diffusion_transformer.DiffusionTransformer.Lt_count.scatter_add_", "x.size", "t[].item", "diffusion_transformer.log_categorical", "diffusion_transformer.DiffusionTransformer.multinomial_kl", "diffusion_transformer.sum_except_batch", "t.size", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "x0_real.size", "same_rate.item", "log_onehot_to_index.size", "same_rate.item", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.sample_time", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.index_to_log_onehot", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.predict_start", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_posterior", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_posterior", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.multinomial_kl", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.sum_except_batch", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.sum_except_batch", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_categorical", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.multinomial_kl", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.sum_except_batch"], ["", "", "def", "_train_loss", "(", "self", ",", "x", ",", "cond_emb", ",", "is_train", "=", "True", ")", ":", "# get the KL loss", "\n", "        ", "b", ",", "device", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "device", "\n", "\n", "assert", "self", ".", "loss_type", "==", "'vb_stochastic'", "\n", "x_start", "=", "x", "\n", "t", ",", "pt", "=", "self", ".", "sample_time", "(", "b", ",", "device", ",", "'importance'", ")", "\n", "\n", "\n", "log_x_start", "=", "index_to_log_onehot", "(", "x_start", ",", "self", ".", "num_classes", ")", "\n", "log_xt", "=", "self", ".", "q_sample", "(", "log_x_start", "=", "log_x_start", ",", "t", "=", "t", ")", "\n", "xt", "=", "log_onehot_to_index", "(", "log_xt", ")", "\n", "\n", "############### go to p_theta function ###############", "\n", "log_x0_recon", "=", "self", ".", "predict_start", "(", "log_xt", ",", "cond_emb", ",", "t", "=", "t", ")", "# P_theta(x0|xt)", "\n", "log_model_prob", "=", "self", ".", "q_posterior", "(", "log_x_start", "=", "log_x0_recon", ",", "log_x_t", "=", "log_xt", ",", "t", "=", "t", ")", "# go through q(xt_1|xt,x0)", "\n", "\n", "################## compute acc list ################", "\n", "x0_recon", "=", "log_onehot_to_index", "(", "log_x0_recon", ")", "\n", "x0_real", "=", "x_start", "\n", "xt_1_recon", "=", "log_onehot_to_index", "(", "log_model_prob", ")", "\n", "xt_recon", "=", "log_onehot_to_index", "(", "log_xt", ")", "\n", "for", "index", "in", "range", "(", "t", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "this_t", "=", "t", "[", "index", "]", ".", "item", "(", ")", "\n", "same_rate", "=", "(", "x0_recon", "[", "index", "]", "==", "x0_real", "[", "index", "]", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", "/", "x0_real", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "diffusion_acc_list", "[", "this_t", "]", "=", "same_rate", ".", "item", "(", ")", "*", "0.1", "+", "self", ".", "diffusion_acc_list", "[", "this_t", "]", "*", "0.9", "\n", "same_rate", "=", "(", "xt_1_recon", "[", "index", "]", "==", "xt_recon", "[", "index", "]", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", "/", "xt_recon", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "diffusion_keep_list", "[", "this_t", "]", "=", "same_rate", ".", "item", "(", ")", "*", "0.1", "+", "self", ".", "diffusion_keep_list", "[", "this_t", "]", "*", "0.9", "\n", "\n", "# compute log_true_prob now ", "\n", "", "log_true_prob", "=", "self", ".", "q_posterior", "(", "log_x_start", "=", "log_x_start", ",", "log_x_t", "=", "log_xt", ",", "t", "=", "t", ")", "\n", "kl", "=", "self", ".", "multinomial_kl", "(", "log_true_prob", ",", "log_model_prob", ")", "\n", "mask_region", "=", "(", "xt", "==", "self", ".", "num_classes", "-", "1", ")", ".", "float", "(", ")", "\n", "mask_weight", "=", "mask_region", "*", "self", ".", "mask_weight", "[", "0", "]", "+", "(", "1.", "-", "mask_region", ")", "*", "self", ".", "mask_weight", "[", "1", "]", "\n", "kl", "=", "kl", "*", "mask_weight", "\n", "kl", "=", "sum_except_batch", "(", "kl", ")", "\n", "\n", "decoder_nll", "=", "-", "log_categorical", "(", "log_x_start", ",", "log_model_prob", ")", "\n", "decoder_nll", "=", "sum_except_batch", "(", "decoder_nll", ")", "\n", "\n", "mask", "=", "(", "t", "==", "torch", ".", "zeros_like", "(", "t", ")", ")", ".", "float", "(", ")", "\n", "kl_loss", "=", "mask", "*", "decoder_nll", "+", "(", "1.", "-", "mask", ")", "*", "kl", "\n", "\n", "\n", "Lt2", "=", "kl_loss", ".", "pow", "(", "2", ")", "\n", "Lt2_prev", "=", "self", ".", "Lt_history", ".", "gather", "(", "dim", "=", "0", ",", "index", "=", "t", ")", "\n", "new_Lt_history", "=", "(", "0.1", "*", "Lt2", "+", "0.9", "*", "Lt2_prev", ")", ".", "detach", "(", ")", "\n", "self", ".", "Lt_history", ".", "scatter_", "(", "dim", "=", "0", ",", "index", "=", "t", ",", "src", "=", "new_Lt_history", ")", "\n", "self", ".", "Lt_count", ".", "scatter_add_", "(", "dim", "=", "0", ",", "index", "=", "t", ",", "src", "=", "torch", ".", "ones_like", "(", "Lt2", ")", ")", "\n", "\n", "# Upweigh loss term of the kl", "\n", "# vb_loss = kl_loss / pt + kl_prior", "\n", "loss1", "=", "kl_loss", "/", "pt", "\n", "vb_loss", "=", "loss1", "\n", "if", "self", ".", "auxiliary_loss_weight", "!=", "0", "and", "is_train", "==", "True", ":", "\n", "            ", "kl_aux", "=", "self", ".", "multinomial_kl", "(", "log_x_start", "[", ":", ",", ":", "-", "1", ",", ":", "]", ",", "log_x0_recon", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "kl_aux", "=", "kl_aux", "*", "mask_weight", "\n", "kl_aux", "=", "sum_except_batch", "(", "kl_aux", ")", "\n", "kl_aux_loss", "=", "mask", "*", "decoder_nll", "+", "(", "1.", "-", "mask", ")", "*", "kl_aux", "\n", "if", "self", ".", "adaptive_auxiliary_loss", "==", "True", ":", "\n", "                ", "addition_loss_weight", "=", "(", "1", "-", "t", "/", "self", ".", "num_timesteps", ")", "+", "1.0", "\n", "", "else", ":", "\n", "                ", "addition_loss_weight", "=", "1.0", "\n", "\n", "", "loss2", "=", "addition_loss_weight", "*", "self", ".", "auxiliary_loss_weight", "*", "kl_aux_loss", "/", "pt", "\n", "vb_loss", "+=", "loss2", "\n", "\n", "", "return", "log_model_prob", ",", "vb_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.device": [[363, 366], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "to_logits", "[", "-", "1", "]", ".", "weight", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.parameters": [[367, 422], ["super().parameters", "print", "set", "set", "diffusion_transformer.DiffusionTransformer.named_modules", "m.named_parameters", "len", "len", "pn.endswith", "hasattr", "diffusion_transformer.DiffusionTransformer.transformer.named_parameters", "str", "str", "set.add", "getattr", "hasattr", "param_dict.keys", "pn.endswith", "isinstance", "set.add", "getattr", "isinstance", "param_dict.keys", "sorted", "sorted", "pn.endswith", "isinstance", "set.add", "getattr", "set.add", "list", "list", "getattr"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys"], ["", "def", "parameters", "(", "self", ",", "recurse", "=", "True", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Following minGPT:\n        This long function is unfortunately doing something very simple and is being very defensive:\n        We are separating out all parameters of the model into two buckets: those that will experience\n        weight decay for regularization and those that won't (biases, and layernorm/embedding weights).\n        We are then returning the PyTorch optimizer object.\n        \"\"\"", "\n", "# return super().parameters(recurse=True)", "\n", "if", "name", "is", "None", "or", "name", "==", "'none'", ":", "\n", "            ", "return", "super", "(", ")", ".", "parameters", "(", "recurse", "=", "recurse", ")", "\n", "", "else", ":", "\n", "# separate out all parameters to those that will and won't experience regularizing weight decay", "\n", "            ", "print", "(", "\"GPTLikeTransformer: get parameters by the overwrite method!\"", ")", "\n", "decay", "=", "set", "(", ")", "\n", "no_decay", "=", "set", "(", ")", "\n", "whitelist_weight_modules", "=", "(", "torch", ".", "nn", ".", "Linear", ",", ")", "\n", "blacklist_weight_modules", "=", "(", "torch", ".", "nn", ".", "LayerNorm", ",", "torch", ".", "nn", ".", "Embedding", ")", "\n", "for", "mn", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "                ", "for", "pn", ",", "p", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "fpn", "=", "'%s.%s'", "%", "(", "mn", ",", "pn", ")", "if", "mn", "else", "pn", "# full param name", "\n", "\n", "if", "pn", ".", "endswith", "(", "'bias'", ")", ":", "\n", "# all biases will not be decayed", "\n", "                        ", "no_decay", ".", "add", "(", "fpn", ")", "\n", "", "elif", "pn", ".", "endswith", "(", "'weight'", ")", "and", "isinstance", "(", "m", ",", "whitelist_weight_modules", ")", ":", "\n", "# weights of whitelist modules will be weight decayed", "\n", "                        ", "decay", ".", "add", "(", "fpn", ")", "\n", "", "elif", "pn", ".", "endswith", "(", "'weight'", ")", "and", "isinstance", "(", "m", ",", "blacklist_weight_modules", ")", ":", "\n", "# weights of blacklist modules will NOT be weight decayed", "\n", "                        ", "no_decay", ".", "add", "(", "fpn", ")", "\n", "# special case the position embedding parameter as not decayed", "\n", "", "", "", "module_name", "=", "[", "'condition_emb'", ",", "'content_emb'", "]", "\n", "pos_emb_name", "=", "[", "'pos_emb'", ",", "'width_emb'", ",", "'height_emb'", ",", "'pad_emb'", ",", "'token_type_emb'", "]", "\n", "for", "mn", "in", "module_name", ":", "\n", "                ", "if", "hasattr", "(", "self", ",", "mn", ")", "and", "getattr", "(", "self", ",", "mn", ")", "is", "not", "None", ":", "\n", "                    ", "for", "pn", "in", "pos_emb_name", ":", "\n", "                        ", "if", "hasattr", "(", "getattr", "(", "self", ",", "mn", ")", ",", "pn", ")", ":", "\n", "                            ", "if", "isinstance", "(", "getattr", "(", "getattr", "(", "self", ",", "mn", ")", ",", "pn", ")", ",", "torch", ".", "nn", ".", "Parameter", ")", ":", "\n", "                                ", "no_decay", ".", "add", "(", "'{}.{}'", ".", "format", "(", "mn", ",", "pn", ")", ")", "\n", "\n", "# validate that we considered every parameter", "\n", "", "", "", "", "", "param_dict", "=", "{", "pn", ":", "p", "for", "pn", ",", "p", "in", "self", ".", "transformer", ".", "named_parameters", "(", ")", "}", "# if p.requires_grad} ", "\n", "inter_params", "=", "decay", "&", "no_decay", "\n", "union_params", "=", "decay", "|", "no_decay", "\n", "assert", "len", "(", "inter_params", ")", "==", "0", ",", "\"parameters %s made it into both decay/no_decay sets!\"", "%", "(", "str", "(", "inter_params", ")", ",", ")", "\n", "assert", "len", "(", "param_dict", ".", "keys", "(", ")", "-", "union_params", ")", "==", "0", ",", "\"parameters %s were not separated into either decay/no_decay set!\"", "%", "(", "str", "(", "param_dict", ".", "keys", "(", ")", "-", "union_params", ")", ",", ")", "\n", "\n", "# create the pytorch optimizer object", "\n", "optim_groups", "=", "[", "\n", "{", "\"params\"", ":", "[", "param_dict", "[", "pn", "]", "for", "pn", "in", "sorted", "(", "list", "(", "decay", ")", ")", "]", ",", "\"weight_decay\"", ":", "0.01", "}", ",", "\n", "{", "\"params\"", ":", "[", "param_dict", "[", "pn", "]", "for", "pn", "in", "sorted", "(", "list", "(", "no_decay", ")", ")", "]", ",", "\"weight_decay\"", ":", "0.0", "}", ",", "\n", "]", "\n", "return", "optim_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.forward": [[423, 465], ["input[].type_as", "kwargs.get", "diffusion_transformer.DiffusionTransformer._train_loss", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "diffusion_transformer.DiffusionTransformer.float", "input.get", "input[].float", "loss.sum", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "diffusion_transformer.DiffusionTransformer.condition_emb", "input[].type_as.size", "input[].type_as.size"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer._train_loss", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "input", ",", "\n", "return_loss", "=", "False", ",", "\n", "return_logits", "=", "True", ",", "\n", "return_att_weight", "=", "False", ",", "\n", "is_train", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "kwargs", ".", "get", "(", "'autocast'", ")", "==", "True", ":", "\n", "            ", "self", ".", "amp", "=", "True", "\n", "", "batch_size", "=", "input", "[", "'content_token'", "]", ".", "shape", "[", "0", "]", "\n", "device", "=", "input", "[", "'content_token'", "]", ".", "device", "\n", "\n", "# 1) get embeddding for condition and content     prepare input", "\n", "sample_image", "=", "input", "[", "'content_token'", "]", ".", "type_as", "(", "input", "[", "'content_token'", "]", ")", "\n", "# cont_emb = self.content_emb(sample_image)", "\n", "\n", "if", "self", ".", "condition_emb", "is", "not", "None", ":", "\n", "            ", "with", "autocast", "(", "enabled", "=", "False", ")", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "cond_emb", "=", "self", ".", "condition_emb", "(", "input", "[", "'condition_token'", "]", ")", "# B x Ld x D   #256*1024", "\n", "", "cond_emb", "=", "cond_emb", ".", "float", "(", ")", "\n", "", "", "else", ":", "# share condition embeding with content", "\n", "            ", "if", "input", ".", "get", "(", "'condition_embed_token'", ")", "==", "None", ":", "\n", "                ", "cond_emb", "=", "None", "\n", "", "else", ":", "\n", "                ", "cond_emb", "=", "input", "[", "'condition_embed_token'", "]", ".", "float", "(", ")", "\n", "\n", "# now we get cond_emb and sample_image", "\n", "", "", "if", "is_train", "==", "True", ":", "\n", "            ", "log_model_prob", ",", "loss", "=", "self", ".", "_train_loss", "(", "sample_image", ",", "cond_emb", ")", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "/", "(", "sample_image", ".", "size", "(", ")", "[", "0", "]", "*", "sample_image", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "\n", "# 4) get output, especially loss", "\n", "", "out", "=", "{", "}", "\n", "if", "return_logits", ":", "\n", "            ", "out", "[", "'logits'", "]", "=", "torch", ".", "exp", "(", "log_model_prob", ")", "\n", "\n", "", "if", "return_loss", ":", "\n", "            ", "out", "[", "'loss'", "]", "=", "loss", "\n", "", "self", ".", "amp", "=", "False", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.sample": [[467, 538], ["int", "diffusion_transformer.log_onehot_to_index", "input[].type_as", "input[].float.float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log", "torch.log", "torch.log", "torch.log", "torch.full", "torch.full", "torch.full", "torch.full", "diffusion_transformer.index_to_log_onehot", "diffusion_transformer.DiffusionTransformer.q_sample", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "diffusion_transformer.DiffusionTransformer.condition_emb", "input.get", "input[].float", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.full", "torch.full", "torch.full", "torch.full", "diffusion_transformer.DiffusionTransformer.p_sample", "torch.full", "torch.full", "torch.full", "torch.full", "diffusion_transformer.DiffusionTransformer.p_sample"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.index_to_log_onehot", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.p_sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.p_sample"], ["", "def", "sample", "(", "\n", "self", ",", "\n", "condition_token", ",", "\n", "condition_mask", ",", "\n", "condition_embed", ",", "\n", "content_token", "=", "None", ",", "\n", "filter_ratio", "=", "0.5", ",", "\n", "temperature", "=", "1.0", ",", "\n", "return_att_weight", "=", "False", ",", "\n", "return_logits", "=", "False", ",", "\n", "content_logits", "=", "None", ",", "\n", "print_log", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "input", "=", "{", "'condition_token'", ":", "condition_token", ",", "\n", "'content_token'", ":", "content_token", ",", "\n", "'condition_mask'", ":", "condition_mask", ",", "\n", "'condition_embed_token'", ":", "condition_embed", ",", "\n", "'content_logits'", ":", "content_logits", ",", "\n", "}", "\n", "\n", "if", "input", "[", "'condition_token'", "]", "!=", "None", ":", "\n", "            ", "batch_size", "=", "input", "[", "'condition_token'", "]", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "kwargs", "[", "'batch_size'", "]", "\n", "\n", "", "device", "=", "self", ".", "log_at", ".", "device", "\n", "start_step", "=", "int", "(", "self", ".", "num_timesteps", "*", "filter_ratio", ")", "\n", "\n", "# get cont_emb and cond_emb", "\n", "if", "content_token", "!=", "None", ":", "\n", "            ", "sample_image", "=", "input", "[", "'content_token'", "]", ".", "type_as", "(", "input", "[", "'content_token'", "]", ")", "\n", "\n", "", "if", "self", ".", "condition_emb", "is", "not", "None", ":", "# do this", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "cond_emb", "=", "self", ".", "condition_emb", "(", "input", "[", "'condition_token'", "]", ")", "# B x Ld x D   #256*1024", "\n", "", "cond_emb", "=", "cond_emb", ".", "float", "(", ")", "\n", "", "else", ":", "# share condition embeding with content", "\n", "            ", "if", "input", ".", "get", "(", "'condition_embed_token'", ",", "None", ")", "!=", "None", ":", "\n", "                ", "cond_emb", "=", "input", "[", "'condition_embed_token'", "]", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "cond_emb", "=", "None", "\n", "\n", "", "", "if", "start_step", "==", "0", ":", "\n", "# use full mask sample", "\n", "            ", "zero_logits", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "num_classes", "-", "1", ",", "self", ".", "shape", ")", ",", "device", "=", "device", ")", "\n", "one_logits", "=", "torch", ".", "ones", "(", "(", "batch_size", ",", "1", ",", "self", ".", "shape", ")", ",", "device", "=", "device", ")", "\n", "mask_logits", "=", "torch", ".", "cat", "(", "(", "zero_logits", ",", "one_logits", ")", ",", "dim", "=", "1", ")", "\n", "log_z", "=", "torch", ".", "log", "(", "mask_logits", ")", "\n", "start_step", "=", "self", ".", "num_timesteps", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "diffusion_index", "in", "range", "(", "start_step", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                    ", "t", "=", "torch", ".", "full", "(", "(", "batch_size", ",", ")", ",", "diffusion_index", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "log_z", "=", "self", ".", "p_sample", "(", "log_z", ",", "cond_emb", ",", "t", ")", "# log_z is log_onehot", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "t", "=", "torch", ".", "full", "(", "(", "batch_size", ",", ")", ",", "start_step", "-", "1", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "log_x_start", "=", "index_to_log_onehot", "(", "sample_image", ",", "self", ".", "num_classes", ")", "\n", "log_xt", "=", "self", ".", "q_sample", "(", "log_x_start", "=", "log_x_start", ",", "t", "=", "t", ")", "\n", "log_z", "=", "log_xt", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "diffusion_index", "in", "range", "(", "start_step", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                    ", "t", "=", "torch", ".", "full", "(", "(", "batch_size", ",", ")", ",", "diffusion_index", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "log_z", "=", "self", ".", "p_sample", "(", "log_z", ",", "cond_emb", ",", "t", ")", "# log_z is log_onehot", "\n", "\n", "\n", "", "", "", "content_token", "=", "log_onehot_to_index", "(", "log_z", ")", "\n", "\n", "output", "=", "{", "'content_token'", ":", "content_token", "}", "\n", "if", "return_logits", ":", "\n", "            ", "output", "[", "'logits'", "]", "=", "torch", ".", "exp", "(", "log_z", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.DiffusionTransformer.sample_fast": [[541, 606], ["int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log", "torch.log", "torch.log", "torch.log", "diffusion_transformer.log_onehot_to_index", "input[].type_as", "diffusion_transformer.DiffusionTransformer.float", "input[].float", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "diffusion_transformer.DiffusionTransformer.condition_emb", "diffusion_list.append", "torch.full", "torch.full", "torch.full", "torch.full", "diffusion_transformer.DiffusionTransformer.predict_start", "diffusion_transformer.DiffusionTransformer.log_sample_categorical", "range", "diffusion_transformer.DiffusionTransformer.q_posterior", "diffusion_transformer.DiffusionTransformer.q_posterior"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.predict_start", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.log_sample_categorical", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_posterior", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_posterior"], ["", "def", "sample_fast", "(", "\n", "self", ",", "\n", "condition_token", ",", "\n", "condition_mask", ",", "\n", "condition_embed", ",", "\n", "content_token", "=", "None", ",", "\n", "filter_ratio", "=", "0.5", ",", "\n", "temperature", "=", "1.0", ",", "\n", "return_att_weight", "=", "False", ",", "\n", "return_logits", "=", "False", ",", "\n", "content_logits", "=", "None", ",", "\n", "print_log", "=", "True", ",", "\n", "skip_step", "=", "1", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "input", "=", "{", "'condition_token'", ":", "condition_token", ",", "\n", "'content_token'", ":", "content_token", ",", "\n", "'condition_mask'", ":", "condition_mask", ",", "\n", "'condition_embed_token'", ":", "condition_embed", ",", "\n", "'content_logits'", ":", "content_logits", ",", "\n", "}", "\n", "\n", "batch_size", "=", "input", "[", "'condition_token'", "]", ".", "shape", "[", "0", "]", "\n", "device", "=", "self", ".", "log_at", ".", "device", "\n", "start_step", "=", "int", "(", "self", ".", "num_timesteps", "*", "filter_ratio", ")", "\n", "\n", "# get cont_emb and cond_emb", "\n", "if", "content_token", "!=", "None", ":", "\n", "            ", "sample_image", "=", "input", "[", "'content_token'", "]", ".", "type_as", "(", "input", "[", "'content_token'", "]", ")", "\n", "\n", "", "if", "self", ".", "condition_emb", "is", "not", "None", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "cond_emb", "=", "self", ".", "condition_emb", "(", "input", "[", "'condition_token'", "]", ")", "# B x Ld x D   #256*1024", "\n", "", "cond_emb", "=", "cond_emb", ".", "float", "(", ")", "\n", "", "else", ":", "# share condition embeding with content", "\n", "            ", "cond_emb", "=", "input", "[", "'condition_embed_token'", "]", ".", "float", "(", ")", "\n", "\n", "", "assert", "start_step", "==", "0", "\n", "zero_logits", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "num_classes", "-", "1", ",", "self", ".", "shape", ")", ",", "device", "=", "device", ")", "\n", "one_logits", "=", "torch", ".", "ones", "(", "(", "batch_size", ",", "1", ",", "self", ".", "shape", ")", ",", "device", "=", "device", ")", "\n", "mask_logits", "=", "torch", ".", "cat", "(", "(", "zero_logits", ",", "one_logits", ")", ",", "dim", "=", "1", ")", "\n", "log_z", "=", "torch", ".", "log", "(", "mask_logits", ")", "\n", "start_step", "=", "self", ".", "num_timesteps", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# skip_step = 1", "\n", "            ", "diffusion_list", "=", "[", "index", "for", "index", "in", "range", "(", "start_step", "-", "1", ",", "-", "1", ",", "-", "1", "-", "skip_step", ")", "]", "\n", "if", "diffusion_list", "[", "-", "1", "]", "!=", "0", ":", "\n", "                ", "diffusion_list", ".", "append", "(", "0", ")", "\n", "# for diffusion_index in range(start_step-1, -1, -1):", "\n", "", "for", "diffusion_index", "in", "diffusion_list", ":", "\n", "\n", "                ", "t", "=", "torch", ".", "full", "(", "(", "batch_size", ",", ")", ",", "diffusion_index", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "log_x_recon", "=", "self", ".", "predict_start", "(", "log_z", ",", "cond_emb", ",", "t", ")", "\n", "if", "diffusion_index", ">", "skip_step", ":", "\n", "                    ", "model_log_prob", "=", "self", ".", "q_posterior", "(", "log_x_start", "=", "log_x_recon", ",", "log_x_t", "=", "log_z", ",", "t", "=", "t", "-", "skip_step", ")", "\n", "", "else", ":", "\n", "                    ", "model_log_prob", "=", "self", ".", "q_posterior", "(", "log_x_start", "=", "log_x_recon", ",", "log_x_t", "=", "log_z", ",", "t", "=", "t", ")", "\n", "\n", "", "log_z", "=", "self", ".", "log_sample_categorical", "(", "model_log_prob", ")", "\n", "\n", "", "", "content_token", "=", "log_onehot_to_index", "(", "log_z", ")", "\n", "\n", "output", "=", "{", "'content_token'", ":", "content_token", "}", "\n", "if", "return_logits", ":", "\n", "            ", "output", "[", "'logits'", "]", "=", "torch", ".", "exp", "(", "log_z", ")", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.sum_except_batch": [[23, 25], ["x.reshape().sum", "x.reshape"], "function", ["None"], ["def", "sum_except_batch", "(", "x", ",", "num_dims", "=", "1", ")", ":", "\n", "    ", "return", "x", ".", "reshape", "(", "*", "x", ".", "shape", "[", ":", "num_dims", "]", ",", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.log_1_min_a": [[26, 28], ["torch.log", "torch.log", "a.exp"], "function", ["None"], ["", "def", "log_1_min_a", "(", "a", ")", ":", "\n", "    ", "return", "torch", ".", "log", "(", "1", "-", "a", ".", "exp", "(", ")", "+", "1e-40", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.log_add_exp": [[29, 32], ["torch.max", "torch.max", "torch.log", "torch.log", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "log_add_exp", "(", "a", ",", "b", ")", ":", "\n", "    ", "maximum", "=", "torch", ".", "max", "(", "a", ",", "b", ")", "\n", "return", "maximum", "+", "torch", ".", "log", "(", "torch", ".", "exp", "(", "a", "-", "maximum", ")", "+", "torch", ".", "exp", "(", "b", "-", "maximum", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.extract": [[33, 37], ["a.gather", "a.gather.reshape", "len"], "function", ["None"], ["", "def", "extract", "(", "a", ",", "t", ",", "x_shape", ")", ":", "\n", "    ", "b", ",", "*", "_", "=", "t", ".", "shape", "\n", "out", "=", "a", ".", "gather", "(", "-", "1", ",", "t", ")", "\n", "return", "out", ".", "reshape", "(", "b", ",", "*", "(", "(", "1", ",", ")", "*", "(", "len", "(", "x_shape", ")", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.log_categorical": [[38, 40], ["log_x_start.exp"], "function", ["None"], ["", "def", "log_categorical", "(", "log_x_start", ",", "log_prob", ")", ":", "\n", "    ", "return", "(", "log_x_start", ".", "exp", "(", ")", "*", "log_prob", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.index_to_log_onehot": [[41, 49], ["torch.one_hot", "x_onehot.permute.permute", "torch.log", "torch.log", "x.max().item", "tuple", "x_onehot.permute.float().clamp", "x.max().item", "range", "x.max", "len", "x_onehot.permute.float", "x.max", "x.size"], "function", ["None"], ["", "def", "index_to_log_onehot", "(", "x", ",", "num_classes", ")", ":", "\n", "    ", "assert", "x", ".", "max", "(", ")", ".", "item", "(", ")", "<", "num_classes", ",", "f'Error: {x.max().item()} >= {num_classes}'", "\n", "x_onehot", "=", "F", ".", "one_hot", "(", "x", ",", "num_classes", ")", "\n", "permute_order", "=", "(", "0", ",", "-", "1", ")", "+", "tuple", "(", "range", "(", "1", ",", "len", "(", "x", ".", "size", "(", ")", ")", ")", ")", "\n", "x_onehot", "=", "x_onehot", ".", "permute", "(", "permute_order", ")", "\n", "log_x", "=", "torch", ".", "log", "(", "x_onehot", ".", "float", "(", ")", ".", "clamp", "(", "min", "=", "1e-30", ")", ")", "\n", "return", "log_x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.log_onehot_to_index": [[50, 52], ["log_x.argmax"], "function", ["None"], ["", "def", "log_onehot_to_index", "(", "log_x", ")", ":", "\n", "    ", "return", "log_x", ".", "argmax", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer.alpha_schedule": [[53, 67], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "alpha_schedule", "(", "time_step", ",", "N", "=", "100", ",", "att_1", "=", "0.99999", ",", "att_T", "=", "0.000009", ",", "ctt_1", "=", "0.000009", ",", "ctt_T", "=", "0.99999", ")", ":", "\n", "    ", "att", "=", "np", ".", "arange", "(", "0", ",", "time_step", ")", "/", "(", "time_step", "-", "1", ")", "*", "(", "att_T", "-", "att_1", ")", "+", "att_1", "\n", "att", "=", "np", ".", "concatenate", "(", "(", "[", "1", "]", ",", "att", ")", ")", "\n", "at", "=", "att", "[", "1", ":", "]", "/", "att", "[", ":", "-", "1", "]", "\n", "ctt", "=", "np", ".", "arange", "(", "0", ",", "time_step", ")", "/", "(", "time_step", "-", "1", ")", "*", "(", "ctt_T", "-", "ctt_1", ")", "+", "ctt_1", "\n", "ctt", "=", "np", ".", "concatenate", "(", "(", "[", "0", "]", ",", "ctt", ")", ")", "\n", "one_minus_ctt", "=", "1", "-", "ctt", "\n", "one_minus_ct", "=", "one_minus_ctt", "[", "1", ":", "]", "/", "one_minus_ctt", "[", ":", "-", "1", "]", "\n", "ct", "=", "1", "-", "one_minus_ct", "\n", "bt", "=", "(", "1", "-", "at", "-", "ct", ")", "/", "N", "\n", "att", "=", "np", ".", "concatenate", "(", "(", "att", "[", "1", ":", "]", ",", "[", "1", "]", ")", ")", "\n", "ctt", "=", "np", ".", "concatenate", "(", "(", "ctt", "[", "1", ":", "]", ",", "[", "0", "]", ")", ")", "\n", "btt", "=", "(", "1", "-", "att", "-", "ctt", ")", "/", "N", "\n", "return", "at", ",", "bt", ",", "ct", ",", "att", ",", "btt", ",", "ctt", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.__init__": [[62, 162], ["torch.nn.Module.__init__", "image_synthesis.utils.misc.instantiate_from_config", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "diffusion_transformer_amp.log_1_min_a", "diffusion_transformer_amp.log_1_min_a", "diffusion_transformer_amp.DiffusionTransformer.register_buffer", "diffusion_transformer_amp.DiffusionTransformer.register_buffer", "diffusion_transformer_amp.DiffusionTransformer.register_buffer", "diffusion_transformer_amp.DiffusionTransformer.register_buffer", "diffusion_transformer_amp.DiffusionTransformer.register_buffer", "diffusion_transformer_amp.DiffusionTransformer.register_buffer", "diffusion_transformer_amp.DiffusionTransformer.register_buffer", "diffusion_transformer_amp.DiffusionTransformer.register_buffer", "diffusion_transformer_amp.DiffusionTransformer.register_buffer", "diffusion_transformer_amp.DiffusionTransformer.register_buffer", "image_synthesis.utils.misc.instantiate_from_config", "diffusion_transformer_amp.alpha_schedule", "print", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "torch.tensor.astype", "log_add_exp().abs().sum().item", "log_add_exp().abs().sum().item", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "torch.log.float", "log_1_min_a.float", "log_1_min_a.float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.load", "torch.load", "torch.load", "torch.load", "enumerate", "diffusion_transformer_amp.DiffusionTransformer.quantize_to_full.long", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "log_add_exp().abs().sum", "log_add_exp().abs().sum", "log_add_exp().abs", "log_add_exp().abs", "diffusion_transformer_amp.log_add_exp", "diffusion_transformer_amp.log_add_exp"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_1_min_a", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_1_min_a", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.alpha_schedule", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_add_exp", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_add_exp"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "content_emb_config", "=", "None", ",", "\n", "condition_emb_config", "=", "None", ",", "\n", "transformer_config", "=", "None", ",", "\n", "\n", "diffusion_step", "=", "100", ",", "\n", "alpha_init_type", "=", "'cos'", ",", "\n", "auxiliary_loss_weight", "=", "0", ",", "\n", "adaptive_auxiliary_loss", "=", "False", ",", "\n", "quantize_number", "=", "0", ",", "\n", "mask_weight", "=", "[", "1", ",", "1", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# embeddings for condition and content", "\n", "if", "quantize_number", "!=", "0", ":", "\n", "            ", "content_emb_config", "[", "'params'", "]", "[", "'num_embed'", "]", "=", "quantize_number", "\n", "\n", "# self.content_emb = instantiate_from_config(content_emb_config)", "\n", "", "if", "condition_emb_config", "is", "None", ":", "\n", "# share the condition embed with content embed", "\n", "            ", "self", ".", "condition_emb", "=", "None", "\n", "assert", "not", "predict_condition", ",", "'If want to predict condition token, please provide condition embed config'", "\n", "", "else", ":", "\n", "# for condition and config, we learn a seperate embedding", "\n", "            ", "self", ".", "condition_emb", "=", "instantiate_from_config", "(", "condition_emb_config", ")", "\n", "# assert self.condition_emb.embed_dim == self.content_emb.embed_dim", "\n", "self", ".", "condition_dim", "=", "self", ".", "condition_emb", ".", "embed_dim", "\n", "\n", "", "transformer_config", "[", "'params'", "]", "[", "'diffusion_step'", "]", "=", "diffusion_step", "\n", "transformer_config", "[", "'params'", "]", "[", "'content_emb_config'", "]", "=", "content_emb_config", "\n", "self", ".", "transformer", "=", "instantiate_from_config", "(", "transformer_config", ")", "\n", "self", ".", "content_seq_len", "=", "transformer_config", "[", "'params'", "]", "[", "'content_seq_len'", "]", "\n", "self", ".", "amp", "=", "False", "\n", "\n", "####################################################################################################################", "\n", "self", ".", "num_classes", "=", "self", ".", "transformer", ".", "content_emb", ".", "num_embed", "\n", "self", ".", "loss_type", "=", "'vb_stochastic'", "\n", "self", ".", "shape", "=", "transformer_config", "[", "'params'", "]", "[", "'content_seq_len'", "]", "\n", "self", ".", "num_timesteps", "=", "diffusion_step", "\n", "self", ".", "parametrization", "=", "'x0'", "\n", "self", ".", "auxiliary_loss_weight", "=", "auxiliary_loss_weight", "\n", "self", ".", "adaptive_auxiliary_loss", "=", "adaptive_auxiliary_loss", "\n", "self", ".", "mask_weight", "=", "mask_weight", "\n", "\n", "if", "alpha_init_type", "==", "\"alpha1\"", ":", "\n", "            ", "at", ",", "bt", ",", "ct", ",", "att", ",", "btt", ",", "ctt", "=", "alpha_schedule", "(", "self", ".", "num_timesteps", ",", "N", "=", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"alpha_init_type is Wrong !! \"", ")", "\n", "\n", "", "at", "=", "torch", ".", "tensor", "(", "at", ".", "astype", "(", "'float64'", ")", ")", "\n", "bt", "=", "torch", ".", "tensor", "(", "bt", ".", "astype", "(", "'float64'", ")", ")", "\n", "ct", "=", "torch", ".", "tensor", "(", "ct", ".", "astype", "(", "'float64'", ")", ")", "\n", "log_at", "=", "torch", ".", "log", "(", "at", ")", "\n", "log_bt", "=", "torch", ".", "log", "(", "bt", ")", "\n", "log_ct", "=", "torch", ".", "log", "(", "ct", ")", "\n", "att", "=", "torch", ".", "tensor", "(", "att", ".", "astype", "(", "'float64'", ")", ")", "\n", "btt", "=", "torch", ".", "tensor", "(", "btt", ".", "astype", "(", "'float64'", ")", ")", "\n", "ctt", "=", "torch", ".", "tensor", "(", "ctt", ".", "astype", "(", "'float64'", ")", ")", "\n", "log_cumprod_at", "=", "torch", ".", "log", "(", "att", ")", "\n", "log_cumprod_bt", "=", "torch", ".", "log", "(", "btt", ")", "\n", "log_cumprod_ct", "=", "torch", ".", "log", "(", "ctt", ")", "\n", "\n", "log_1_min_ct", "=", "log_1_min_a", "(", "log_ct", ")", "\n", "log_1_min_cumprod_ct", "=", "log_1_min_a", "(", "log_cumprod_ct", ")", "\n", "\n", "assert", "log_add_exp", "(", "log_ct", ",", "log_1_min_ct", ")", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "<", "1.e-5", "\n", "assert", "log_add_exp", "(", "log_cumprod_ct", ",", "log_1_min_cumprod_ct", ")", ".", "abs", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "<", "1.e-5", "\n", "\n", "self", ".", "diffusion_acc_list", "=", "[", "0", "]", "*", "self", ".", "num_timesteps", "\n", "self", ".", "diffusion_keep_list", "=", "[", "0", "]", "*", "self", ".", "num_timesteps", "\n", "# Convert to float32 and register buffers.", "\n", "self", ".", "register_buffer", "(", "'log_at'", ",", "log_at", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'log_bt'", ",", "log_bt", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'log_ct'", ",", "log_ct", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'log_cumprod_at'", ",", "log_cumprod_at", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'log_cumprod_bt'", ",", "log_cumprod_bt", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'log_cumprod_ct'", ",", "log_cumprod_ct", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'log_1_min_ct'", ",", "log_1_min_ct", ".", "float", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'log_1_min_cumprod_ct'", ",", "log_1_min_cumprod_ct", ".", "float", "(", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'Lt_history'", ",", "torch", ".", "zeros", "(", "self", ".", "num_timesteps", ")", ")", "\n", "self", ".", "register_buffer", "(", "'Lt_count'", ",", "torch", ".", "zeros", "(", "self", ".", "num_timesteps", ")", ")", "\n", "\n", "############################ set quantize information ##################", "\n", "self", ".", "quantize_number", "=", "quantize_number", "\n", "if", "self", ".", "quantize_number", "!=", "0", ":", "\n", "            ", "if", "self", ".", "quantize_number", "==", "2887", ":", "\n", "                ", "mapping_path", "=", "\"./help_folder/statistics/taming_vqvae_2887.pt\"", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"this quantize number is not provided\"", ")", "\n", "\n", "", "self", ".", "full_to_quantize", "=", "torch", ".", "load", "(", "mapping_path", ")", "\n", "self", ".", "quantize_to_full", "=", "torch", ".", "zeros", "(", "self", ".", "quantize_number", ")", "-", "1", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "self", ".", "full_to_quantize", ")", ":", "\n", "                ", "if", "self", ".", "quantize_to_full", "[", "i", "]", "==", "-", "1", ":", "\n", "                    ", "self", ".", "quantize_to_full", "[", "i", "]", "=", "idx", "\n", "", "", "self", ".", "quantize_to_full", "=", "self", ".", "quantize_to_full", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.multinomial_kl": [[163, 166], ["log_prob1.exp"], "methods", ["None"], ["", "", "def", "multinomial_kl", "(", "self", ",", "log_prob1", ",", "log_prob2", ")", ":", "# compute KL loss on log_prob", "\n", "        ", "kl", "=", "(", "log_prob1", ".", "exp", "(", ")", "*", "(", "log_prob1", "-", "log_prob2", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_pred_one_timestep": [[167, 178], ["diffusion_transformer_amp.extract", "diffusion_transformer_amp.extract", "diffusion_transformer_amp.extract", "diffusion_transformer_amp.extract", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "diffusion_transformer_amp.log_add_exp", "diffusion_transformer_amp.log_add_exp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "log_x_t.size"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_add_exp", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_add_exp"], ["", "def", "q_pred_one_timestep", "(", "self", ",", "log_x_t", ",", "t", ")", ":", "# q(xt|xt_1)", "\n", "        ", "log_at", "=", "extract", "(", "self", ".", "log_at", ",", "t", ",", "log_x_t", ".", "shape", ")", "# at", "\n", "log_bt", "=", "extract", "(", "self", ".", "log_bt", ",", "t", ",", "log_x_t", ".", "shape", ")", "# bt", "\n", "log_ct", "=", "extract", "(", "self", ".", "log_ct", ",", "t", ",", "log_x_t", ".", "shape", ")", "# ct", "\n", "log_1_min_ct", "=", "extract", "(", "self", ".", "log_1_min_ct", ",", "t", ",", "log_x_t", ".", "shape", ")", "# 1-ct", "\n", "\n", "log_probs", "=", "torch", ".", "zeros", "(", "log_x_t", ".", "size", "(", ")", ")", ".", "type_as", "(", "log_x_t", ")", "\n", "log_probs", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "log_add_exp", "(", "log_x_t", "[", ":", ",", ":", "-", "1", ",", ":", "]", "+", "log_at", ",", "log_bt", ")", "\n", "log_probs", "[", ":", ",", "-", "1", ":", ",", ":", "]", "=", "log_add_exp", "(", "log_x_t", "[", ":", ",", "-", "1", ":", ",", ":", "]", "+", "log_1_min_ct", ",", "log_ct", ")", "\n", "\n", "return", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_pred": [[179, 193], ["diffusion_transformer_amp.extract", "diffusion_transformer_amp.extract", "diffusion_transformer_amp.extract", "diffusion_transformer_amp.extract", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "diffusion_transformer_amp.log_add_exp", "diffusion_transformer_amp.log_add_exp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "log_x_start.size"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_add_exp", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_add_exp"], ["", "def", "q_pred", "(", "self", ",", "log_x_start", ",", "t", ")", ":", "# q(xt|x0)", "\n", "# log_x_start can be onehot or not", "\n", "        ", "t", "=", "(", "t", "+", "(", "self", ".", "num_timesteps", "+", "1", ")", ")", "%", "(", "self", ".", "num_timesteps", "+", "1", ")", "\n", "log_cumprod_at", "=", "extract", "(", "self", ".", "log_cumprod_at", ",", "t", ",", "log_x_start", ".", "shape", ")", "# at~", "\n", "log_cumprod_bt", "=", "extract", "(", "self", ".", "log_cumprod_bt", ",", "t", ",", "log_x_start", ".", "shape", ")", "# bt~", "\n", "log_cumprod_ct", "=", "extract", "(", "self", ".", "log_cumprod_ct", ",", "t", ",", "log_x_start", ".", "shape", ")", "# ct~", "\n", "log_1_min_cumprod_ct", "=", "extract", "(", "self", ".", "log_1_min_cumprod_ct", ",", "t", ",", "log_x_start", ".", "shape", ")", "# 1-ct~", "\n", "\n", "\n", "log_probs", "=", "torch", ".", "zeros", "(", "log_x_start", ".", "size", "(", ")", ")", ".", "type_as", "(", "log_x_start", ")", "\n", "log_probs", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "log_add_exp", "(", "log_x_start", "[", ":", ",", ":", "-", "1", ",", ":", "]", "+", "log_cumprod_at", ",", "log_cumprod_bt", ")", "\n", "log_probs", "[", ":", ",", "-", "1", ":", ",", ":", "]", "=", "log_add_exp", "(", "log_x_start", "[", ":", ",", "-", "1", ":", ",", ":", "]", "+", "log_1_min_cumprod_ct", ",", "log_cumprod_ct", ")", "\n", "\n", "return", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.predict_start": [[194, 212], ["diffusion_transformer_amp.log_onehot_to_index", "torch.log_softmax().float", "torch.log_softmax().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "diffusion_transformer_amp.DiffusionTransformer.transformer", "diffusion_transformer_amp.DiffusionTransformer.size", "log_onehot_to_index.size", "diffusion_transformer_amp.DiffusionTransformer.size", "log_x_t.size", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "diffusion_transformer_amp.DiffusionTransformer.transformer", "diffusion_transformer_amp.DiffusionTransformer.size", "log_onehot_to_index.size", "torch.log_softmax", "torch.log_softmax", "diffusion_transformer_amp.DiffusionTransformer.double", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index"], ["", "def", "predict_start", "(", "self", ",", "log_x_t", ",", "cond_emb", ",", "t", ")", ":", "# p(x0|xt)", "\n", "        ", "x_t", "=", "log_onehot_to_index", "(", "log_x_t", ")", "\n", "if", "self", ".", "amp", "==", "True", ":", "\n", "            ", "with", "autocast", "(", ")", ":", "\n", "                ", "out", "=", "self", ".", "transformer", "(", "x_t", ",", "cond_emb", ",", "t", ")", "\n", "", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "transformer", "(", "x_t", ",", "cond_emb", ",", "t", ")", "\n", "\n", "", "assert", "out", ".", "size", "(", "0", ")", "==", "x_t", ".", "size", "(", "0", ")", "\n", "assert", "out", ".", "size", "(", "1", ")", "==", "self", ".", "num_classes", "-", "1", "\n", "assert", "out", ".", "size", "(", ")", "[", "2", ":", "]", "==", "x_t", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "log_pred", "=", "F", ".", "log_softmax", "(", "out", ".", "double", "(", ")", ",", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "batch_size", "=", "log_x_t", ".", "size", "(", ")", "[", "0", "]", "\n", "zero_vector", "=", "torch", ".", "zeros", "(", "batch_size", ",", "1", ",", "self", ".", "content_seq_len", ")", ".", "type_as", "(", "log_x_t", ")", "-", "70", "\n", "log_pred", "=", "torch", ".", "cat", "(", "(", "log_pred", ",", "zero_vector", ")", ",", "dim", "=", "1", ")", "\n", "log_pred", "=", "torch", ".", "clamp", "(", "log_pred", ",", "-", "70", ",", "0", ")", "\n", "\n", "return", "log_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_posterior": [[213, 243], ["diffusion_transformer_amp.log_onehot_to_index", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.log().expand", "torch.log().expand", "torch.log().expand", "torch.log().expand", "diffusion_transformer_amp.DiffusionTransformer.q_pred", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "diffusion_transformer_amp.extract", "extract.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "diffusion_transformer_amp.DiffusionTransformer.q_pred_one_timestep", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "diffusion_transformer_amp.extract", "extract.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "log_x_start.size", "t.min().item", "t.max().item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.log", "torch.log", "torch.log", "torch.log", "diffusion_transformer_amp.DiffusionTransformer.q_pred", "t.min", "t.max"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_pred", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_pred_one_timestep", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_pred"], ["", "def", "q_posterior", "(", "self", ",", "log_x_start", ",", "log_x_t", ",", "t", ")", ":", "# p_theta(xt_1|xt) = sum(q(xt-1|xt,x0')*p(x0'))", "\n", "# notice that log_x_t is onehot", "\n", "        ", "assert", "t", ".", "min", "(", ")", ".", "item", "(", ")", ">=", "0", "and", "t", ".", "max", "(", ")", ".", "item", "(", ")", "<", "self", ".", "num_timesteps", "\n", "batch_size", "=", "log_x_start", ".", "size", "(", ")", "[", "0", "]", "\n", "onehot_x_t", "=", "log_onehot_to_index", "(", "log_x_t", ")", "\n", "mask", "=", "(", "onehot_x_t", "==", "self", ".", "num_classes", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "log_one_vector", "=", "torch", ".", "zeros", "(", "batch_size", ",", "1", ",", "1", ")", ".", "type_as", "(", "log_x_t", ")", "\n", "log_zero_vector", "=", "torch", ".", "log", "(", "log_one_vector", "+", "1.0e-30", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "self", ".", "content_seq_len", ")", "\n", "\n", "log_qt", "=", "self", ".", "q_pred", "(", "log_x_t", ",", "t", ")", "# q(xt|x0)", "\n", "log_qt", "=", "torch", ".", "cat", "(", "(", "log_qt", "[", ":", ",", ":", "-", "1", ",", ":", "]", ",", "log_zero_vector", ")", ",", "dim", "=", "1", ")", "\n", "log_cumprod_ct", "=", "extract", "(", "self", ".", "log_cumprod_ct", ",", "t", ",", "log_x_start", ".", "shape", ")", "# ct~", "\n", "ct_cumprod_vector", "=", "log_cumprod_ct", ".", "expand", "(", "-", "1", ",", "self", ".", "num_classes", "-", "1", ",", "-", "1", ")", "\n", "ct_cumprod_vector", "=", "torch", ".", "cat", "(", "(", "ct_cumprod_vector", ",", "log_one_vector", ")", ",", "dim", "=", "1", ")", "\n", "log_qt", "=", "(", "~", "mask", ")", "*", "log_qt", "+", "mask", "*", "ct_cumprod_vector", "\n", "\n", "\n", "log_qt_one_timestep", "=", "self", ".", "q_pred_one_timestep", "(", "log_x_t", ",", "t", ")", "# q(xt|xt_1)", "\n", "log_qt_one_timestep", "=", "torch", ".", "cat", "(", "(", "log_qt_one_timestep", "[", ":", ",", ":", "-", "1", ",", ":", "]", ",", "log_zero_vector", ")", ",", "dim", "=", "1", ")", "\n", "log_ct", "=", "extract", "(", "self", ".", "log_ct", ",", "t", ",", "log_x_start", ".", "shape", ")", "# ct", "\n", "ct_vector", "=", "log_ct", ".", "expand", "(", "-", "1", ",", "self", ".", "num_classes", "-", "1", ",", "-", "1", ")", "\n", "ct_vector", "=", "torch", ".", "cat", "(", "(", "ct_vector", ",", "log_one_vector", ")", ",", "dim", "=", "1", ")", "\n", "log_qt_one_timestep", "=", "(", "~", "mask", ")", "*", "log_qt_one_timestep", "+", "mask", "*", "ct_vector", "\n", "\n", "# log_x_start = torch.cat((log_x_start, log_zero_vector), dim=1)", "\n", "q", "=", "log_x_start", "-", "log_qt", "\n", "q_log_sum_exp", "=", "torch", ".", "logsumexp", "(", "q", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "q", "=", "q", "-", "q_log_sum_exp", "\n", "log_EV_xtmin_given_xt_given_xstart", "=", "self", ".", "q_pred", "(", "q", ",", "t", "-", "1", ")", "+", "log_qt_one_timestep", "+", "q_log_sum_exp", "\n", "return", "torch", ".", "clamp", "(", "log_EV_xtmin_given_xt_given_xstart", ",", "-", "70", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.p_pred": [[245, 255], ["diffusion_transformer_amp.DiffusionTransformer.predict_start", "diffusion_transformer_amp.DiffusionTransformer.q_posterior", "diffusion_transformer_amp.DiffusionTransformer.predict_start"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.predict_start", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_posterior", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.predict_start"], ["", "def", "p_pred", "(", "self", ",", "log_x", ",", "cond_emb", ",", "t", ")", ":", "# if x0, first p(x0|xt), than q(xt-1|xt,x0)", "\n", "        ", "if", "self", ".", "parametrization", "==", "'x0'", ":", "\n", "            ", "log_x_recon", "=", "self", ".", "predict_start", "(", "log_x", ",", "cond_emb", ",", "t", ")", "\n", "log_model_pred", "=", "self", ".", "q_posterior", "(", "\n", "log_x_start", "=", "log_x_recon", ",", "log_x_t", "=", "log_x", ",", "t", "=", "t", ")", "\n", "", "elif", "self", ".", "parametrization", "==", "'direct'", ":", "\n", "            ", "log_model_pred", "=", "self", ".", "predict_start", "(", "log_x", ",", "cond_emb", ",", "t", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "", "return", "log_model_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.p_sample": [[256, 261], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "diffusion_transformer_amp.DiffusionTransformer.p_pred", "diffusion_transformer_amp.DiffusionTransformer.log_sample_categorical"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.p_pred", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.log_sample_categorical"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "p_sample", "(", "self", ",", "log_x", ",", "cond_emb", ",", "t", ")", ":", "# sample q(xt-1) for next step from  xt, actually is p(xt-1|xt)", "\n", "        ", "model_log_prob", "=", "self", ".", "p_pred", "(", "log_x", ",", "cond_emb", ",", "t", ")", "\n", "out", "=", "self", ".", "log_sample_categorical", "(", "model_log_prob", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.log_sample_categorical": [[262, 268], ["torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "diffusion_transformer_amp.index_to_log_onehot", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.index_to_log_onehot"], ["", "def", "log_sample_categorical", "(", "self", ",", "logits", ")", ":", "# use gumbel to sample onehot vector from log probability", "\n", "        ", "uniform", "=", "torch", ".", "rand_like", "(", "logits", ")", "\n", "gumbel_noise", "=", "-", "torch", ".", "log", "(", "-", "torch", ".", "log", "(", "uniform", "+", "1e-30", ")", "+", "1e-30", ")", "\n", "sample", "=", "(", "gumbel_noise", "+", "logits", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "log_sample", "=", "index_to_log_onehot", "(", "sample", ",", "self", ".", "num_classes", ")", "\n", "return", "log_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_sample": [[269, 275], ["diffusion_transformer_amp.DiffusionTransformer.q_pred", "diffusion_transformer_amp.DiffusionTransformer.log_sample_categorical"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_pred", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.log_sample_categorical"], ["", "def", "q_sample", "(", "self", ",", "log_x_start", ",", "t", ")", ":", "# diffusion step, q(xt|x0) and sample xt", "\n", "        ", "log_EV_qxt_x0", "=", "self", ".", "q_pred", "(", "log_x_start", ",", "t", ")", "\n", "\n", "log_sample", "=", "self", ".", "log_sample_categorical", "(", "log_EV_qxt_x0", ")", "\n", "\n", "return", "log_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.sample_time": [[276, 298], ["torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "pt_all.gather", "diffusion_transformer_amp.DiffusionTransformer.sample_time", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "Lt_sqrt.sum", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.randint().long", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.sample_time"], ["", "def", "sample_time", "(", "self", ",", "b", ",", "device", ",", "method", "=", "'uniform'", ")", ":", "\n", "        ", "if", "method", "==", "'importance'", ":", "\n", "            ", "if", "not", "(", "self", ".", "Lt_count", ">", "10", ")", ".", "all", "(", ")", ":", "\n", "                ", "return", "self", ".", "sample_time", "(", "b", ",", "device", ",", "method", "=", "'uniform'", ")", "\n", "\n", "", "Lt_sqrt", "=", "torch", ".", "sqrt", "(", "self", ".", "Lt_history", "+", "1e-10", ")", "+", "0.0001", "\n", "Lt_sqrt", "[", "0", "]", "=", "Lt_sqrt", "[", "1", "]", "# Overwrite decoder term with L1.", "\n", "pt_all", "=", "Lt_sqrt", "/", "Lt_sqrt", ".", "sum", "(", ")", "\n", "\n", "t", "=", "torch", ".", "multinomial", "(", "pt_all", ",", "num_samples", "=", "b", ",", "replacement", "=", "True", ")", "\n", "\n", "pt", "=", "pt_all", ".", "gather", "(", "dim", "=", "0", ",", "index", "=", "t", ")", "\n", "\n", "return", "t", ",", "pt", "\n", "\n", "", "elif", "method", "==", "'uniform'", ":", "\n", "            ", "t", "=", "torch", ".", "randint", "(", "0", ",", "self", ".", "num_timesteps", ",", "(", "b", ",", ")", ",", "device", "=", "device", ")", ".", "long", "(", ")", "\n", "\n", "pt", "=", "torch", ".", "ones_like", "(", "t", ")", ".", "float", "(", ")", "/", "self", ".", "num_timesteps", "\n", "return", "t", ",", "pt", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer._train_loss": [[299, 366], ["diffusion_transformer_amp.DiffusionTransformer.sample_time", "diffusion_transformer_amp.index_to_log_onehot", "diffusion_transformer_amp.DiffusionTransformer.q_sample", "diffusion_transformer_amp.log_onehot_to_index", "diffusion_transformer_amp.DiffusionTransformer.predict_start", "diffusion_transformer_amp.DiffusionTransformer.q_posterior", "diffusion_transformer_amp.log_onehot_to_index", "diffusion_transformer_amp.log_onehot_to_index", "diffusion_transformer_amp.log_onehot_to_index", "range", "diffusion_transformer_amp.DiffusionTransformer.q_posterior", "diffusion_transformer_amp.DiffusionTransformer.multinomial_kl", "diffusion_transformer_amp.sum_except_batch", "diffusion_transformer_amp.sum_except_batch", "kl_loss.pow", "diffusion_transformer_amp.DiffusionTransformer.Lt_history.gather", "diffusion_transformer_amp.DiffusionTransformer.Lt_history.scatter_", "diffusion_transformer_amp.DiffusionTransformer.Lt_count.scatter_add_", "x.size", "t[].item", "diffusion_transformer_amp.log_categorical", "diffusion_transformer_amp.DiffusionTransformer.multinomial_kl", "diffusion_transformer_amp.sum_except_batch", "t.size", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "x0_real.size", "same_rate.item", "log_onehot_to_index.size", "same_rate.item", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.sample_time", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.index_to_log_onehot", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.predict_start", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_posterior", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_posterior", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.multinomial_kl", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.sum_except_batch", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.sum_except_batch", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_categorical", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.multinomial_kl", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.sum_except_batch"], ["", "", "def", "_train_loss", "(", "self", ",", "x", ",", "cond_emb", ",", "is_train", "=", "True", ")", ":", "# get the KL loss", "\n", "        ", "b", ",", "device", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "device", "\n", "\n", "assert", "self", ".", "loss_type", "==", "'vb_stochastic'", "\n", "x_start", "=", "x", "\n", "t", ",", "pt", "=", "self", ".", "sample_time", "(", "b", ",", "device", ",", "'importance'", ")", "\n", "\n", "\n", "log_x_start", "=", "index_to_log_onehot", "(", "x_start", ",", "self", ".", "num_classes", ")", "\n", "log_xt", "=", "self", ".", "q_sample", "(", "log_x_start", "=", "log_x_start", ",", "t", "=", "t", ")", "\n", "xt", "=", "log_onehot_to_index", "(", "log_xt", ")", "\n", "\n", "############### go to p_theta function ###############", "\n", "log_x0_recon", "=", "self", ".", "predict_start", "(", "log_xt", ",", "cond_emb", ",", "t", "=", "t", ")", "# P_theta(0)", "\n", "log_model_prob", "=", "self", ".", "q_posterior", "(", "log_x_start", "=", "log_x0_recon", ",", "log_x_t", "=", "log_xt", ",", "t", "=", "t", ")", "#q(xt_1|xt,x0)", "\n", "\n", "################## compute acc list ################", "\n", "x0_recon", "=", "log_onehot_to_index", "(", "log_x0_recon", ")", "\n", "x0_real", "=", "x_start", "\n", "xt_1_recon", "=", "log_onehot_to_index", "(", "log_model_prob", ")", "\n", "xt_recon", "=", "log_onehot_to_index", "(", "log_xt", ")", "\n", "for", "index", "in", "range", "(", "t", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "this_t", "=", "t", "[", "index", "]", ".", "item", "(", ")", "\n", "same_rate", "=", "(", "x0_recon", "[", "index", "]", "==", "x0_real", "[", "index", "]", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", "/", "x0_real", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "diffusion_acc_list", "[", "this_t", "]", "=", "same_rate", ".", "item", "(", ")", "*", "0.1", "+", "self", ".", "diffusion_acc_list", "[", "this_t", "]", "*", "0.9", "\n", "same_rate", "=", "(", "xt_1_recon", "[", "index", "]", "==", "xt_recon", "[", "index", "]", ")", ".", "sum", "(", ")", ".", "cpu", "(", ")", "/", "xt_recon", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "diffusion_keep_list", "[", "this_t", "]", "=", "same_rate", ".", "item", "(", ")", "*", "0.1", "+", "self", ".", "diffusion_keep_list", "[", "this_t", "]", "*", "0.9", "\n", "\n", "# compute log_true_prob now / Line 278", "\n", "", "log_true_prob", "=", "self", ".", "q_posterior", "(", "log_x_start", "=", "log_x_start", ",", "log_x_t", "=", "log_xt", ",", "t", "=", "t", ")", "\n", "kl", "=", "self", ".", "multinomial_kl", "(", "log_true_prob", ",", "log_model_prob", ")", "\n", "mask_region", "=", "(", "xt", "==", "self", ".", "num_classes", "-", "1", ")", ".", "float", "(", ")", "\n", "mask_weight", "=", "mask_region", "*", "self", ".", "mask_weight", "[", "0", "]", "+", "(", "1.", "-", "mask_region", ")", "*", "self", ".", "mask_weight", "[", "1", "]", "\n", "kl", "=", "kl", "*", "mask_weight", "\n", "kl", "=", "sum_except_batch", "(", "kl", ")", "\n", "\n", "decoder_nll", "=", "-", "log_categorical", "(", "log_x_start", ",", "log_model_prob", ")", "\n", "decoder_nll", "=", "sum_except_batch", "(", "decoder_nll", ")", "\n", "\n", "mask", "=", "(", "t", "==", "torch", ".", "zeros_like", "(", "t", ")", ")", ".", "float", "(", ")", "\n", "kl_loss", "=", "mask", "*", "decoder_nll", "+", "(", "1.", "-", "mask", ")", "*", "kl", "\n", "\n", "\n", "Lt2", "=", "kl_loss", ".", "pow", "(", "2", ")", "\n", "Lt2_prev", "=", "self", ".", "Lt_history", ".", "gather", "(", "dim", "=", "0", ",", "index", "=", "t", ")", "\n", "new_Lt_history", "=", "(", "0.1", "*", "Lt2", "+", "0.9", "*", "Lt2_prev", ")", ".", "detach", "(", ")", "\n", "self", ".", "Lt_history", ".", "scatter_", "(", "dim", "=", "0", ",", "index", "=", "t", ",", "src", "=", "new_Lt_history", ")", "\n", "self", ".", "Lt_count", ".", "scatter_add_", "(", "dim", "=", "0", ",", "index", "=", "t", ",", "src", "=", "torch", ".", "ones_like", "(", "Lt2", ")", ")", "\n", "\n", "# Upweigh loss term of the kl", "\n", "# vb_loss = kl_loss / pt + kl_prior", "\n", "loss1", "=", "kl_loss", "/", "pt", "\n", "vb_loss", "=", "loss1", "\n", "if", "self", ".", "auxiliary_loss_weight", "!=", "0", "and", "is_train", "==", "True", ":", "\n", "            ", "kl_aux", "=", "self", ".", "multinomial_kl", "(", "log_x_start", "[", ":", ",", ":", "-", "1", ",", ":", "]", ",", "log_x0_recon", "[", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "kl_aux", "=", "kl_aux", "*", "mask_weight", "\n", "kl_aux", "=", "sum_except_batch", "(", "kl_aux", ")", "\n", "kl_aux_loss", "=", "mask", "*", "decoder_nll", "+", "(", "1.", "-", "mask", ")", "*", "kl_aux", "\n", "if", "self", ".", "adaptive_auxiliary_loss", "==", "True", ":", "\n", "                ", "addition_loss_weight", "=", "t", "/", "self", ".", "num_timesteps", "+", "1.0", "\n", "", "else", ":", "\n", "                ", "addition_loss_weight", "=", "1.0", "\n", "\n", "", "loss2", "=", "addition_loss_weight", "*", "self", ".", "auxiliary_loss_weight", "*", "kl_aux_loss", "/", "pt", "\n", "vb_loss", "+=", "loss2", "\n", "\n", "", "return", "log_model_prob", ",", "vb_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.device": [[368, 371], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "to_logits", "[", "-", "1", "]", ".", "weight", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.parameters": [[372, 427], ["super().parameters", "print", "set", "set", "diffusion_transformer_amp.DiffusionTransformer.named_modules", "m.named_parameters", "len", "len", "pn.endswith", "hasattr", "diffusion_transformer_amp.DiffusionTransformer.transformer.named_parameters", "str", "str", "set.add", "getattr", "hasattr", "param_dict.keys", "pn.endswith", "isinstance", "set.add", "getattr", "isinstance", "param_dict.keys", "sorted", "sorted", "pn.endswith", "isinstance", "set.add", "getattr", "set.add", "list", "list", "getattr"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys"], ["", "def", "parameters", "(", "self", ",", "recurse", "=", "True", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Following minGPT:\n        This long function is unfortunately doing something very simple and is being very defensive:\n        We are separating out all parameters of the model into two buckets: those that will experience\n        weight decay for regularization and those that won't (biases, and layernorm/embedding weights).\n        We are then returning the PyTorch optimizer object.\n        \"\"\"", "\n", "# return super().parameters(recurse=True)", "\n", "if", "name", "is", "None", "or", "name", "==", "'none'", ":", "\n", "            ", "return", "super", "(", ")", ".", "parameters", "(", "recurse", "=", "recurse", ")", "\n", "", "else", ":", "\n", "# separate out all parameters to those that will and won't experience regularizing weight decay", "\n", "            ", "print", "(", "\"GPTLikeTransformer: get parameters by the overwrite method!\"", ")", "\n", "decay", "=", "set", "(", ")", "\n", "no_decay", "=", "set", "(", ")", "\n", "whitelist_weight_modules", "=", "(", "torch", ".", "nn", ".", "Linear", ",", ")", "\n", "blacklist_weight_modules", "=", "(", "torch", ".", "nn", ".", "LayerNorm", ",", "torch", ".", "nn", ".", "Embedding", ")", "\n", "for", "mn", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "                ", "for", "pn", ",", "p", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "fpn", "=", "'%s.%s'", "%", "(", "mn", ",", "pn", ")", "if", "mn", "else", "pn", "# full param name", "\n", "\n", "if", "pn", ".", "endswith", "(", "'bias'", ")", ":", "\n", "# all biases will not be decayed", "\n", "                        ", "no_decay", ".", "add", "(", "fpn", ")", "\n", "", "elif", "pn", ".", "endswith", "(", "'weight'", ")", "and", "isinstance", "(", "m", ",", "whitelist_weight_modules", ")", ":", "\n", "# weights of whitelist modules will be weight decayed", "\n", "                        ", "decay", ".", "add", "(", "fpn", ")", "\n", "", "elif", "pn", ".", "endswith", "(", "'weight'", ")", "and", "isinstance", "(", "m", ",", "blacklist_weight_modules", ")", ":", "\n", "# weights of blacklist modules will NOT be weight decayed", "\n", "                        ", "no_decay", ".", "add", "(", "fpn", ")", "\n", "# special case the position embedding parameter as not decayed", "\n", "", "", "", "module_name", "=", "[", "'condition_emb'", ",", "'content_emb'", "]", "\n", "pos_emb_name", "=", "[", "'pos_emb'", ",", "'width_emb'", ",", "'height_emb'", ",", "'pad_emb'", ",", "'token_type_emb'", "]", "\n", "for", "mn", "in", "module_name", ":", "\n", "                ", "if", "hasattr", "(", "self", ",", "mn", ")", "and", "getattr", "(", "self", ",", "mn", ")", "is", "not", "None", ":", "\n", "                    ", "for", "pn", "in", "pos_emb_name", ":", "\n", "                        ", "if", "hasattr", "(", "getattr", "(", "self", ",", "mn", ")", ",", "pn", ")", ":", "\n", "                            ", "if", "isinstance", "(", "getattr", "(", "getattr", "(", "self", ",", "mn", ")", ",", "pn", ")", ",", "torch", ".", "nn", ".", "Parameter", ")", ":", "\n", "                                ", "no_decay", ".", "add", "(", "'{}.{}'", ".", "format", "(", "mn", ",", "pn", ")", ")", "\n", "\n", "# validate that we considered every parameter", "\n", "", "", "", "", "", "param_dict", "=", "{", "pn", ":", "p", "for", "pn", ",", "p", "in", "self", ".", "transformer", ".", "named_parameters", "(", ")", "}", "# if p.requires_grad} ", "\n", "inter_params", "=", "decay", "&", "no_decay", "\n", "union_params", "=", "decay", "|", "no_decay", "\n", "assert", "len", "(", "inter_params", ")", "==", "0", ",", "\"parameters %s made it into both decay/no_decay sets!\"", "%", "(", "str", "(", "inter_params", ")", ",", ")", "\n", "assert", "len", "(", "param_dict", ".", "keys", "(", ")", "-", "union_params", ")", "==", "0", ",", "\"parameters %s were not separated into either decay/no_decay set!\"", "%", "(", "str", "(", "param_dict", ".", "keys", "(", ")", "-", "union_params", ")", ",", ")", "\n", "\n", "# create the pytorch optimizer object", "\n", "optim_groups", "=", "[", "\n", "{", "\"params\"", ":", "[", "param_dict", "[", "pn", "]", "for", "pn", "in", "sorted", "(", "list", "(", "decay", ")", ")", "]", ",", "\"weight_decay\"", ":", "0.01", "}", ",", "\n", "{", "\"params\"", ":", "[", "param_dict", "[", "pn", "]", "for", "pn", "in", "sorted", "(", "list", "(", "no_decay", ")", ")", "]", ",", "\"weight_decay\"", ":", "0.0", "}", ",", "\n", "]", "\n", "return", "optim_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.forward": [[428, 470], ["kwargs.get", "diffusion_transformer_amp.DiffusionTransformer.full_to_quantize[].type_as", "input[].float", "diffusion_transformer_amp.DiffusionTransformer._train_loss", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "diffusion_transformer_amp.DiffusionTransformer.float", "loss.sum", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "diffusion_transformer_amp.DiffusionTransformer.condition_emb", "diffusion_transformer_amp.DiffusionTransformer.size", "diffusion_transformer_amp.DiffusionTransformer.size"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer._train_loss"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "input", ",", "\n", "return_loss", "=", "False", ",", "\n", "return_logits", "=", "True", ",", "\n", "return_att_weight", "=", "False", ",", "\n", "is_train", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "kwargs", ".", "get", "(", "'autocast'", ")", "==", "True", ":", "\n", "            ", "self", ".", "amp", "=", "True", "\n", "", "batch_size", "=", "input", "[", "'content_token'", "]", ".", "shape", "[", "0", "]", "\n", "device", "=", "input", "[", "'content_token'", "]", ".", "device", "\n", "\n", "# 1) get embeddding for condition and content     prepare input", "\n", "if", "self", ".", "quantize_number", "!=", "0", ":", "\n", "            ", "sample_image", "=", "self", ".", "full_to_quantize", "[", "input", "[", "'content_token'", "]", "]", ".", "type_as", "(", "input", "[", "'content_token'", "]", ")", "\n", "", "else", ":", "\n", "            ", "sample_image", "=", "input", "[", "'content_token'", "]", "\n", "# cont_emb = self.content_emb(sample_image)", "\n", "\n", "", "if", "self", ".", "condition_emb", "is", "not", "None", ":", "# do this", "\n", "            ", "with", "autocast", "(", "enabled", "=", "False", ")", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "cond_emb", "=", "self", ".", "condition_emb", "(", "input", "[", "'condition_token'", "]", ")", "# B x Ld x D   #256*1024", "\n", "", "cond_emb", "=", "cond_emb", ".", "float", "(", ")", "\n", "", "", "else", ":", "# share condition embeding with content", "\n", "            ", "cond_emb", "=", "input", "[", "'condition_embed_token'", "]", ".", "float", "(", ")", "\n", "\n", "# now we get cond_emb and sample_image", "\n", "", "if", "is_train", "==", "True", ":", "\n", "            ", "log_model_prob", ",", "loss", "=", "self", ".", "_train_loss", "(", "sample_image", ",", "cond_emb", ")", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "/", "(", "sample_image", ".", "size", "(", ")", "[", "0", "]", "*", "sample_image", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "\n", "# 4) get output, especially loss", "\n", "", "out", "=", "{", "}", "\n", "if", "return_logits", ":", "\n", "            ", "out", "[", "'logits'", "]", "=", "torch", ".", "exp", "(", "log_model_prob", ")", "\n", "\n", "", "if", "return_loss", ":", "\n", "            ", "out", "[", "'loss'", "]", "=", "loss", "\n", "", "self", ".", "amp", "=", "False", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.sample": [[472, 541], ["int", "diffusion_transformer_amp.log_onehot_to_index", "diffusion_transformer_amp.DiffusionTransformer.float", "input[].float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log", "torch.log", "torch.log", "torch.log", "torch.full", "torch.full", "torch.full", "torch.full", "diffusion_transformer_amp.index_to_log_onehot", "diffusion_transformer_amp.DiffusionTransformer.q_sample", "diffusion_transformer_amp.DiffusionTransformer.quantize_to_full[].type_as", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "diffusion_transformer_amp.DiffusionTransformer.full_to_quantize[].type_as", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "diffusion_transformer_amp.DiffusionTransformer.condition_emb", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.full", "torch.full", "torch.full", "torch.full", "diffusion_transformer_amp.DiffusionTransformer.p_sample", "torch.full", "torch.full", "torch.full", "torch.full", "diffusion_transformer_amp.DiffusionTransformer.p_sample"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.index_to_log_onehot", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.p_sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.p_sample"], ["", "def", "sample", "(", "\n", "self", ",", "\n", "condition_token", ",", "\n", "condition_mask", ",", "\n", "condition_embed", ",", "\n", "content_token", "=", "None", ",", "\n", "filter_ratio", "=", "0.5", ",", "\n", "temperature", "=", "1.0", ",", "\n", "return_att_weight", "=", "False", ",", "\n", "return_logits", "=", "False", ",", "\n", "content_logits", "=", "None", ",", "\n", "print_log", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "input", "=", "{", "'condition_token'", ":", "condition_token", ",", "\n", "'content_token'", ":", "content_token", ",", "\n", "'condition_mask'", ":", "condition_mask", ",", "\n", "'condition_embed_token'", ":", "condition_embed", ",", "\n", "'content_logits'", ":", "content_logits", ",", "\n", "}", "\n", "\n", "batch_size", "=", "input", "[", "'condition_token'", "]", ".", "shape", "[", "0", "]", "\n", "device", "=", "self", ".", "log_at", ".", "device", "\n", "start_step", "=", "int", "(", "self", ".", "num_timesteps", "*", "filter_ratio", ")", "\n", "\n", "# get cont_emb and cond_emb", "\n", "if", "content_token", "!=", "None", ":", "\n", "            ", "if", "self", ".", "quantize_number", "!=", "0", ":", "\n", "                ", "sample_image", "=", "self", ".", "full_to_quantize", "[", "input", "[", "'content_token'", "]", "]", ".", "type_as", "(", "input", "[", "'content_token'", "]", ")", "\n", "", "else", ":", "\n", "                ", "sample_image", "=", "input", "[", "'content_token'", "]", "\n", "\n", "", "", "if", "self", ".", "condition_emb", "is", "not", "None", ":", "# do this", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "cond_emb", "=", "self", ".", "condition_emb", "(", "input", "[", "'condition_token'", "]", ")", "# B x Ld x D   #256*1024", "\n", "", "cond_emb", "=", "cond_emb", ".", "float", "(", ")", "\n", "", "else", ":", "# share condition embeding with content", "\n", "            ", "cond_emb", "=", "input", "[", "'condition_embed_token'", "]", ".", "float", "(", ")", "\n", "\n", "", "if", "start_step", "==", "0", ":", "\n", "# use full mask sample", "\n", "            ", "zero_logits", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "num_classes", "-", "1", ",", "self", ".", "shape", ")", ",", "device", "=", "device", ")", "\n", "one_logits", "=", "torch", ".", "ones", "(", "(", "batch_size", ",", "1", ",", "self", ".", "shape", ")", ",", "device", "=", "device", ")", "\n", "mask_logits", "=", "torch", ".", "cat", "(", "(", "zero_logits", ",", "one_logits", ")", ",", "dim", "=", "1", ")", "\n", "log_z", "=", "torch", ".", "log", "(", "mask_logits", ")", "\n", "start_step", "=", "self", ".", "num_timesteps", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "diffusion_index", "in", "range", "(", "start_step", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                    ", "t", "=", "torch", ".", "full", "(", "(", "batch_size", ",", ")", ",", "diffusion_index", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "log_z", "=", "self", ".", "p_sample", "(", "log_z", ",", "cond_emb", ",", "t", ")", "# log_z is log_onehot", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "t", "=", "torch", ".", "full", "(", "(", "batch_size", ",", ")", ",", "start_step", "-", "1", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "log_x_start", "=", "index_to_log_onehot", "(", "sample_image", ",", "self", ".", "num_classes", ")", "\n", "log_xt", "=", "self", ".", "q_sample", "(", "log_x_start", "=", "log_x_start", ",", "t", "=", "t", ")", "\n", "log_z", "=", "log_xt", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "diffusion_index", "in", "range", "(", "start_step", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                    ", "t", "=", "torch", ".", "full", "(", "(", "batch_size", ",", ")", ",", "diffusion_index", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "log_z", "=", "self", ".", "p_sample", "(", "log_z", ",", "cond_emb", ",", "t", ")", "# log_z is log_onehot", "\n", "\n", "\n", "", "", "", "content_token", "=", "log_onehot_to_index", "(", "log_z", ")", "\n", "if", "self", ".", "quantize_number", "!=", "0", ":", "\n", "            ", "content_token", "=", "self", ".", "quantize_to_full", "[", "content_token", "]", ".", "type_as", "(", "content_token", ")", "\n", "\n", "", "output", "=", "{", "'content_token'", ":", "content_token", "}", "\n", "if", "return_logits", ":", "\n", "            ", "output", "[", "'logits'", "]", "=", "torch", ".", "exp", "(", "log_z", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.sample_fast": [[544, 614], ["int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log", "torch.log", "torch.log", "torch.log", "diffusion_transformer_amp.log_onehot_to_index", "diffusion_transformer_amp.DiffusionTransformer.float", "input[].float", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "diffusion_transformer_amp.DiffusionTransformer.quantize_to_full[].type_as", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "diffusion_transformer_amp.DiffusionTransformer.full_to_quantize[].type_as", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "diffusion_transformer_amp.DiffusionTransformer.condition_emb", "diffusion_list.append", "torch.full", "torch.full", "torch.full", "torch.full", "diffusion_transformer_amp.DiffusionTransformer.predict_start", "diffusion_transformer_amp.DiffusionTransformer.log_sample_categorical", "range", "diffusion_transformer_amp.DiffusionTransformer.q_posterior", "diffusion_transformer_amp.DiffusionTransformer.q_posterior"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.predict_start", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.log_sample_categorical", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_posterior", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.q_posterior"], ["", "def", "sample_fast", "(", "\n", "self", ",", "\n", "condition_token", ",", "\n", "condition_mask", ",", "\n", "condition_embed", ",", "\n", "content_token", "=", "None", ",", "\n", "filter_ratio", "=", "0.5", ",", "\n", "temperature", "=", "1.0", ",", "\n", "return_att_weight", "=", "False", ",", "\n", "return_logits", "=", "False", ",", "\n", "content_logits", "=", "None", ",", "\n", "print_log", "=", "True", ",", "\n", "skip_step", "=", "1", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "input", "=", "{", "'condition_token'", ":", "condition_token", ",", "\n", "'content_token'", ":", "content_token", ",", "\n", "'condition_mask'", ":", "condition_mask", ",", "\n", "'condition_embed_token'", ":", "condition_embed", ",", "\n", "'content_logits'", ":", "content_logits", ",", "\n", "}", "\n", "\n", "batch_size", "=", "input", "[", "'condition_token'", "]", ".", "shape", "[", "0", "]", "\n", "device", "=", "self", ".", "log_at", ".", "device", "\n", "start_step", "=", "int", "(", "self", ".", "num_timesteps", "*", "filter_ratio", ")", "\n", "\n", "# get cont_emb and cond_emb", "\n", "if", "content_token", "!=", "None", ":", "\n", "            ", "if", "self", ".", "quantize_number", "!=", "0", ":", "\n", "                ", "sample_image", "=", "self", ".", "full_to_quantize", "[", "input", "[", "'content_token'", "]", "]", ".", "type_as", "(", "input", "[", "'content_token'", "]", ")", "\n", "", "else", ":", "\n", "                ", "sample_image", "=", "input", "[", "'content_token'", "]", "\n", "\n", "", "", "if", "self", ".", "condition_emb", "is", "not", "None", ":", "# do this", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "cond_emb", "=", "self", ".", "condition_emb", "(", "input", "[", "'condition_token'", "]", ")", "# B x Ld x D   #256*1024", "\n", "", "cond_emb", "=", "cond_emb", ".", "float", "(", ")", "\n", "", "else", ":", "# share condition embeding with content", "\n", "            ", "cond_emb", "=", "input", "[", "'condition_embed_token'", "]", ".", "float", "(", ")", "\n", "\n", "", "assert", "start_step", "==", "0", "\n", "zero_logits", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "num_classes", "-", "1", ",", "self", ".", "shape", ")", ",", "device", "=", "device", ")", "\n", "one_logits", "=", "torch", ".", "ones", "(", "(", "batch_size", ",", "1", ",", "self", ".", "shape", ")", ",", "device", "=", "device", ")", "\n", "mask_logits", "=", "torch", ".", "cat", "(", "(", "zero_logits", ",", "one_logits", ")", ",", "dim", "=", "1", ")", "\n", "log_z", "=", "torch", ".", "log", "(", "mask_logits", ")", "\n", "start_step", "=", "self", ".", "num_timesteps", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# skip_step = 1", "\n", "            ", "diffusion_list", "=", "[", "index", "for", "index", "in", "range", "(", "start_step", "-", "1", ",", "-", "1", ",", "-", "1", "-", "skip_step", ")", "]", "\n", "if", "diffusion_list", "[", "-", "1", "]", "!=", "0", ":", "\n", "                ", "diffusion_list", ".", "append", "(", "0", ")", "\n", "# for diffusion_index in range(start_step-1, -1, -1):", "\n", "", "for", "diffusion_index", "in", "diffusion_list", ":", "\n", "\n", "                ", "t", "=", "torch", ".", "full", "(", "(", "batch_size", ",", ")", ",", "diffusion_index", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "log_x_recon", "=", "self", ".", "predict_start", "(", "log_z", ",", "cond_emb", ",", "t", ")", "\n", "if", "diffusion_index", ">", "skip_step", ":", "\n", "                    ", "model_log_prob", "=", "self", ".", "q_posterior", "(", "log_x_start", "=", "log_x_recon", ",", "log_x_t", "=", "log_z", ",", "t", "=", "t", "-", "skip_step", ")", "\n", "", "else", ":", "\n", "                    ", "model_log_prob", "=", "self", ".", "q_posterior", "(", "log_x_start", "=", "log_x_recon", ",", "log_x_t", "=", "log_z", ",", "t", "=", "t", ")", "\n", "\n", "", "log_z", "=", "self", ".", "log_sample_categorical", "(", "model_log_prob", ")", "\n", "\n", "", "", "content_token", "=", "log_onehot_to_index", "(", "log_z", ")", "\n", "if", "self", ".", "quantize_number", "!=", "0", ":", "\n", "            ", "content_token", "=", "self", ".", "quantize_to_full", "[", "content_token", "]", ".", "type_as", "(", "content_token", ")", "\n", "\n", "", "output", "=", "{", "'content_token'", ":", "content_token", "}", "\n", "if", "return_logits", ":", "\n", "            ", "output", "[", "'logits'", "]", "=", "torch", ".", "exp", "(", "log_z", ")", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.sum_except_batch": [[16, 18], ["x.reshape().sum", "x.reshape"], "function", ["None"], ["def", "sum_except_batch", "(", "x", ",", "num_dims", "=", "1", ")", ":", "\n", "    ", "return", "x", ".", "reshape", "(", "*", "x", ".", "shape", "[", ":", "num_dims", "]", ",", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_1_min_a": [[19, 21], ["torch.log", "torch.log", "a.exp"], "function", ["None"], ["", "def", "log_1_min_a", "(", "a", ")", ":", "\n", "    ", "return", "torch", ".", "log", "(", "1", "-", "a", ".", "exp", "(", ")", "+", "1e-40", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_add_exp": [[22, 25], ["torch.max", "torch.max", "torch.log", "torch.log", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "log_add_exp", "(", "a", ",", "b", ")", ":", "\n", "    ", "maximum", "=", "torch", ".", "max", "(", "a", ",", "b", ")", "\n", "return", "maximum", "+", "torch", ".", "log", "(", "torch", ".", "exp", "(", "a", "-", "maximum", ")", "+", "torch", ".", "exp", "(", "b", "-", "maximum", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.extract": [[26, 30], ["a.gather", "a.gather.reshape", "len"], "function", ["None"], ["", "def", "extract", "(", "a", ",", "t", ",", "x_shape", ")", ":", "\n", "    ", "b", ",", "*", "_", "=", "t", ".", "shape", "\n", "out", "=", "a", ".", "gather", "(", "-", "1", ",", "t", ")", "\n", "return", "out", ".", "reshape", "(", "b", ",", "*", "(", "(", "1", ",", ")", "*", "(", "len", "(", "x_shape", ")", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_categorical": [[31, 33], ["log_x_start.exp"], "function", ["None"], ["", "def", "log_categorical", "(", "log_x_start", ",", "log_prob", ")", ":", "\n", "    ", "return", "(", "log_x_start", ".", "exp", "(", ")", "*", "log_prob", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.index_to_log_onehot": [[34, 42], ["torch.one_hot", "x_onehot.permute.permute", "torch.log", "torch.log", "x.max().item", "tuple", "x_onehot.permute.float().clamp", "x.max().item", "range", "x.max", "len", "x_onehot.permute.float", "x.max", "x.size"], "function", ["None"], ["", "def", "index_to_log_onehot", "(", "x", ",", "num_classes", ")", ":", "\n", "    ", "assert", "x", ".", "max", "(", ")", ".", "item", "(", ")", "<", "num_classes", ",", "f'Error: {x.max().item()} >= {num_classes}'", "\n", "x_onehot", "=", "F", ".", "one_hot", "(", "x", ",", "num_classes", ")", "\n", "permute_order", "=", "(", "0", ",", "-", "1", ")", "+", "tuple", "(", "range", "(", "1", ",", "len", "(", "x", ".", "size", "(", ")", ")", ")", ")", "\n", "x_onehot", "=", "x_onehot", ".", "permute", "(", "permute_order", ")", "\n", "log_x", "=", "torch", ".", "log", "(", "x_onehot", ".", "float", "(", ")", ".", "clamp", "(", "min", "=", "1e-30", ")", ")", "\n", "return", "log_x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.log_onehot_to_index": [[43, 45], ["log_x.argmax"], "function", ["None"], ["", "def", "log_onehot_to_index", "(", "log_x", ")", ":", "\n", "    ", "return", "log_x", ".", "argmax", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.alpha_schedule": [[46, 60], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "alpha_schedule", "(", "time_step", ",", "N", "=", "100", ",", "att_1", "=", "0.99999", ",", "att_T", "=", "0.000009", ",", "ctt_1", "=", "0.000009", ",", "ctt_T", "=", "0.99999", ")", ":", "\n", "    ", "att", "=", "np", ".", "arange", "(", "0", ",", "time_step", ")", "/", "(", "time_step", "-", "1", ")", "*", "(", "att_T", "-", "att_1", ")", "+", "att_1", "\n", "att", "=", "np", ".", "concatenate", "(", "(", "[", "1", "]", ",", "att", ")", ")", "\n", "at", "=", "att", "[", "1", ":", "]", "/", "att", "[", ":", "-", "1", "]", "\n", "ctt", "=", "np", ".", "arange", "(", "0", ",", "time_step", ")", "/", "(", "time_step", "-", "1", ")", "*", "(", "ctt_T", "-", "ctt_1", ")", "+", "ctt_1", "\n", "ctt", "=", "np", ".", "concatenate", "(", "(", "[", "0", "]", ",", "ctt", ")", ")", "\n", "one_minus_ctt", "=", "1", "-", "ctt", "\n", "one_minus_ct", "=", "one_minus_ctt", "[", "1", ":", "]", "/", "one_minus_ctt", "[", ":", "-", "1", "]", "\n", "ct", "=", "1", "-", "one_minus_ct", "\n", "bt", "=", "(", "1", "-", "at", "-", "ct", ")", "/", "N", "\n", "att", "=", "np", ".", "concatenate", "(", "(", "att", "[", "1", ":", "]", ",", "[", "1", "]", ")", ")", "\n", "ctt", "=", "np", ".", "concatenate", "(", "(", "ctt", "[", "1", ":", "]", ",", "[", "0", "]", ")", ")", "\n", "btt", "=", "(", "1", "-", "att", "-", "ctt", ")", "/", "N", "\n", "return", "at", ",", "bt", ",", "ct", ",", "att", ",", "btt", ",", "ctt", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.FullAttention.__init__": [[23, 44], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_embd", ",", "# the embed dim", "\n", "n_head", ",", "# the number of heads", "\n", "seq_len", "=", "None", ",", "# the max length of sequence", "\n", "attn_pdrop", "=", "0.1", ",", "# attention dropout prob", "\n", "resid_pdrop", "=", "0.1", ",", "# residual attention dropout prob", "\n", "causal", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "n_embd", "%", "n_head", "==", "0", "\n", "# key, query, value projections for all heads", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "n_embd", ",", "n_embd", ")", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "n_embd", ",", "n_embd", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "n_embd", ",", "n_embd", ")", "\n", "# regularization", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_pdrop", ")", "\n", "self", ".", "resid_drop", "=", "nn", ".", "Dropout", "(", "resid_pdrop", ")", "\n", "# output projection", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "n_embd", ",", "n_embd", ")", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "causal", "=", "causal", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.FullAttention.forward": [[45, 61], ["x.size", "transformer_utils.FullAttention.key().view().transpose", "transformer_utils.FullAttention.query().view().transpose", "transformer_utils.FullAttention.value().view().transpose", "torch.softmax", "torch.softmax", "transformer_utils.FullAttention.attn_drop", "transformer_utils.FullAttention.transpose().contiguous().view", "att.mean.mean.mean", "transformer_utils.FullAttention.resid_drop", "transformer_utils.FullAttention.proj", "transformer_utils.FullAttention.key().view", "transformer_utils.FullAttention.query().view", "transformer_utils.FullAttention.value().view", "transformer_utils.FullAttention.transpose", "math.sqrt", "transformer_utils.FullAttention.transpose().contiguous", "transformer_utils.FullAttention.size", "transformer_utils.FullAttention.key", "transformer_utils.FullAttention.query", "transformer_utils.FullAttention.value", "transformer_utils.FullAttention.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "encoder_output", ",", "mask", "=", "None", ")", ":", "\n", "        ", "B", ",", "T", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "k", "=", "self", ".", "key", "(", "x", ")", ".", "view", "(", "B", ",", "T", ",", "self", ".", "n_head", ",", "C", "//", "self", ".", "n_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (B, nh, T, hs)", "\n", "q", "=", "self", ".", "query", "(", "x", ")", ".", "view", "(", "B", ",", "T", ",", "self", ".", "n_head", ",", "C", "//", "self", ".", "n_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (B, nh, T, hs)", "\n", "v", "=", "self", ".", "value", "(", "x", ")", ".", "view", "(", "B", ",", "T", ",", "self", ".", "n_head", ",", "C", "//", "self", ".", "n_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (B, nh, T, hs)", "\n", "att", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "(", "1.0", "/", "math", ".", "sqrt", "(", "k", ".", "size", "(", "-", "1", ")", ")", ")", "# (B, nh, T, T)", "\n", "\n", "att", "=", "F", ".", "softmax", "(", "att", ",", "dim", "=", "-", "1", ")", "# (B, nh, T, T)", "\n", "att", "=", "self", ".", "attn_drop", "(", "att", ")", "\n", "y", "=", "att", "@", "v", "# (B, nh, T, T) x (B, nh, T, hs) -> (B, nh, T, hs)", "\n", "y", "=", "y", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "T", ",", "C", ")", "# re-assemble all head outputs side by side, (B, T, C)", "\n", "att", "=", "att", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "# (B, T, T)", "\n", "\n", "# output projection", "\n", "y", "=", "self", ".", "resid_drop", "(", "self", ".", "proj", "(", "y", ")", ")", "\n", "return", "y", ",", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.CrossAttention.__init__": [[63, 92], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "transformer_utils.CrossAttention.register_buffer", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "condition_seq_len", ",", "\n", "n_embd", ",", "# the embed dim", "\n", "condition_embd", ",", "# condition dim", "\n", "n_head", ",", "# the number of heads", "\n", "seq_len", "=", "None", ",", "# the max length of sequence", "\n", "attn_pdrop", "=", "0.1", ",", "# attention dropout prob", "\n", "resid_pdrop", "=", "0.1", ",", "# residual attention dropout prob", "\n", "causal", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "n_embd", "%", "n_head", "==", "0", "\n", "# key, query, value projections for all heads", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "condition_embd", ",", "n_embd", ")", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "n_embd", ",", "n_embd", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "condition_embd", ",", "n_embd", ")", "\n", "# regularization", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_pdrop", ")", "\n", "self", ".", "resid_drop", "=", "nn", ".", "Dropout", "(", "resid_pdrop", ")", "\n", "# output projection", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "n_embd", ",", "n_embd", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "causal", "=", "causal", "\n", "\n", "# causal mask to ensure that attention is only applied to the left in the input sequence", "\n", "if", "self", ".", "causal", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"mask\"", ",", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "seq_len", ",", "seq_len", ")", ")", "\n", ".", "view", "(", "1", ",", "1", ",", "seq_len", ",", "seq_len", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.CrossAttention.forward": [[93, 112], ["x.size", "encoder_output.size", "transformer_utils.CrossAttention.key().view().transpose", "transformer_utils.CrossAttention.query().view().transpose", "transformer_utils.CrossAttention.value().view().transpose", "torch.softmax", "torch.softmax", "transformer_utils.CrossAttention.attn_drop", "transformer_utils.CrossAttention.transpose().contiguous().view", "att.mean.mean.mean", "transformer_utils.CrossAttention.resid_drop", "transformer_utils.CrossAttention.proj", "transformer_utils.CrossAttention.key().view", "transformer_utils.CrossAttention.query().view", "transformer_utils.CrossAttention.value().view", "transformer_utils.CrossAttention.transpose", "math.sqrt", "transformer_utils.CrossAttention.transpose().contiguous", "transformer_utils.CrossAttention.size", "transformer_utils.CrossAttention.key", "transformer_utils.CrossAttention.query", "transformer_utils.CrossAttention.value", "transformer_utils.CrossAttention.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "encoder_output", ",", "mask", "=", "None", ")", ":", "\n", "        ", "B", ",", "T", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "B", ",", "T_E", ",", "_", "=", "encoder_output", ".", "size", "(", ")", "\n", "# calculate query, key, values for all heads in batch and move head forward to be the batch dim", "\n", "k", "=", "self", ".", "key", "(", "encoder_output", ")", ".", "view", "(", "B", ",", "T_E", ",", "self", ".", "n_head", ",", "C", "//", "self", ".", "n_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (B, nh, T, hs)", "\n", "q", "=", "self", ".", "query", "(", "x", ")", ".", "view", "(", "B", ",", "T", ",", "self", ".", "n_head", ",", "C", "//", "self", ".", "n_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (B, nh, T, hs)", "\n", "v", "=", "self", ".", "value", "(", "encoder_output", ")", ".", "view", "(", "B", ",", "T_E", ",", "self", ".", "n_head", ",", "C", "//", "self", ".", "n_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (B, nh, T, hs)", "\n", "\n", "att", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "(", "1.0", "/", "math", ".", "sqrt", "(", "k", ".", "size", "(", "-", "1", ")", ")", ")", "# (B, nh, T, T)", "\n", "\n", "att", "=", "F", ".", "softmax", "(", "att", ",", "dim", "=", "-", "1", ")", "# (B, nh, T, T)", "\n", "att", "=", "self", ".", "attn_drop", "(", "att", ")", "\n", "y", "=", "att", "@", "v", "# (B, nh, T, T) x (B, nh, T, hs) -> (B, nh, T, hs)", "\n", "y", "=", "y", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "T", ",", "C", ")", "# re-assemble all head outputs side by side, (B, T, C)", "\n", "att", "=", "att", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "# (B, T, T)", "\n", "\n", "# output projection", "\n", "y", "=", "self", ".", "resid_drop", "(", "self", ".", "proj", "(", "y", ")", ")", "\n", "return", "y", ",", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.GELU2.__init__": [[114, 116], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.GELU2.forward": [[116, 118], ["torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "F", ".", "sigmoid", "(", "1.702", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.SinusoidalPosEmb.__init__": [[120, 125], ["torch.nn.Module.__init__", "float", "float"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_steps", ",", "dim", ",", "rescale_steps", "=", "4000", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_steps", "=", "float", "(", "num_steps", ")", "\n", "self", ".", "rescale_steps", "=", "float", "(", "rescale_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.SinusoidalPosEmb.forward": [[126, 135], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "math.log", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat.sin", "torch.cat.sin", "torch.cat.cos", "torch.cat.cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "/", "self", ".", "num_steps", "*", "self", ".", "rescale_steps", "\n", "device", "=", "x", ".", "device", "\n", "half_dim", "=", "self", ".", "dim", "//", "2", "\n", "emb", "=", "math", ".", "log", "(", "10000", ")", "/", "(", "half_dim", "-", "1", ")", "\n", "emb", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "half_dim", ",", "device", "=", "device", ")", "*", "-", "emb", ")", "\n", "emb", "=", "x", "[", ":", ",", "None", "]", "*", "emb", "[", "None", ",", ":", "]", "\n", "emb", "=", "torch", ".", "cat", "(", "(", "emb", ".", "sin", "(", ")", ",", "emb", ".", "cos", "(", ")", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.AdaLayerNorm.__init__": [[137, 146], ["torch.nn.Module.__init__", "torch.nn.SiLU", "torch.nn.SiLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "transformer_utils.SinusoidalPosEmb", "torch.nn.Embedding", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_embd", ",", "diffusion_step", ",", "emb_type", "=", "\"adalayernorm_abs\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "\"abs\"", "in", "emb_type", ":", "\n", "            ", "self", ".", "emb", "=", "SinusoidalPosEmb", "(", "diffusion_step", ",", "n_embd", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb", "=", "nn", ".", "Embedding", "(", "diffusion_step", ",", "n_embd", ")", "\n", "", "self", ".", "silu", "=", "nn", ".", "SiLU", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "n_embd", ",", "n_embd", "*", "2", ")", "\n", "self", ".", "layernorm", "=", "nn", ".", "LayerNorm", "(", "n_embd", ",", "elementwise_affine", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.AdaLayerNorm.forward": [[147, 152], ["transformer_utils.AdaLayerNorm.linear().unsqueeze", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "transformer_utils.AdaLayerNorm.linear", "transformer_utils.AdaLayerNorm.layernorm", "transformer_utils.AdaLayerNorm.silu", "transformer_utils.AdaLayerNorm.emb"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "timestep", ")", ":", "\n", "        ", "emb", "=", "self", ".", "linear", "(", "self", ".", "silu", "(", "self", ".", "emb", "(", "timestep", ")", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "scale", ",", "shift", "=", "torch", ".", "chunk", "(", "emb", ",", "2", ",", "dim", "=", "2", ")", "\n", "x", "=", "self", ".", "layernorm", "(", "x", ")", "*", "(", "1", "+", "scale", ")", "+", "shift", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.AdaInsNorm.__init__": [[154, 163], ["torch.nn.Module.__init__", "torch.nn.SiLU", "torch.nn.SiLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.InstanceNorm1d", "torch.nn.InstanceNorm1d", "transformer_utils.SinusoidalPosEmb", "torch.nn.Embedding", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_embd", ",", "diffusion_step", ",", "emb_type", "=", "\"adainsnorm_abs\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "\"abs\"", "in", "emb_type", ":", "\n", "            ", "self", ".", "emb", "=", "SinusoidalPosEmb", "(", "diffusion_step", ",", "n_embd", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb", "=", "nn", ".", "Embedding", "(", "diffusion_step", ",", "n_embd", ")", "\n", "", "self", ".", "silu", "=", "nn", ".", "SiLU", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "n_embd", ",", "n_embd", "*", "2", ")", "\n", "self", ".", "instancenorm", "=", "nn", ".", "InstanceNorm1d", "(", "n_embd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.AdaInsNorm.forward": [[164, 169], ["transformer_utils.AdaInsNorm.linear().unsqueeze", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "transformer_utils.AdaInsNorm.linear", "transformer_utils.AdaInsNorm.instancenorm().transpose", "transformer_utils.AdaInsNorm.silu", "transformer_utils.AdaInsNorm.emb", "transformer_utils.AdaInsNorm.instancenorm", "x.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "timestep", ")", ":", "\n", "        ", "emb", "=", "self", ".", "linear", "(", "self", ".", "silu", "(", "self", ".", "emb", "(", "timestep", ")", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "scale", ",", "shift", "=", "torch", ".", "chunk", "(", "emb", ",", "2", ",", "dim", "=", "2", ")", "\n", "x", "=", "self", ".", "instancenorm", "(", "x", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "*", "(", "1", "+", "scale", ")", "+", "shift", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.Block.__init__": [[172, 255], ["torch.nn.Module.__init__", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "transformer_utils.FullAttention", "torch.nn.GELU", "torch.nn.GELU", "transformer_utils.GELU2", "transformer_utils.Conv_MLP", "torch.nn.Sequential", "torch.nn.Sequential", "transformer_utils.AdaLayerNorm", "print", "transformer_utils.FullAttention", "transformer_utils.CrossAttention", "print", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "transformer_utils.AdaLayerNorm", "transformer_utils.AdaInsNorm", "transformer_utils.AdaLayerNorm", "print"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "class_type", "=", "'adalayernorm'", ",", "\n", "class_number", "=", "1000", ",", "\n", "condition_seq_len", "=", "77", ",", "\n", "n_embd", "=", "1024", ",", "\n", "n_head", "=", "16", ",", "\n", "seq_len", "=", "256", ",", "\n", "attn_pdrop", "=", "0.1", ",", "\n", "resid_pdrop", "=", "0.1", ",", "\n", "mlp_hidden_times", "=", "4", ",", "\n", "activate", "=", "'GELU'", ",", "\n", "attn_type", "=", "'full'", ",", "\n", "if_upsample", "=", "False", ",", "\n", "upsample_type", "=", "'bilinear'", ",", "\n", "upsample_pre_channel", "=", "0", ",", "\n", "content_spatial_size", "=", "None", ",", "# H , W", "\n", "conv_attn_kernel_size", "=", "None", ",", "# only need for dalle_conv attention", "\n", "condition_dim", "=", "1024", ",", "\n", "diffusion_step", "=", "100", ",", "\n", "timestep_type", "=", "'adalayernorm'", ",", "\n", "window_size", "=", "8", ",", "\n", "mlp_type", "=", "'fc'", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "if_upsample", "=", "if_upsample", "\n", "self", ".", "attn_type", "=", "attn_type", "\n", "\n", "if", "attn_type", "in", "[", "'selfcross'", ",", "'selfcondition'", ",", "'self'", "]", ":", "\n", "            ", "if", "'adalayernorm'", "in", "timestep_type", ":", "\n", "                ", "self", ".", "ln1", "=", "AdaLayerNorm", "(", "n_embd", ",", "diffusion_step", ",", "timestep_type", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"timestep_type wrong\"", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "ln1", "=", "nn", ".", "LayerNorm", "(", "n_embd", ")", "\n", "\n", "", "self", ".", "ln2", "=", "nn", ".", "LayerNorm", "(", "n_embd", ")", "\n", "# self.if_selfcross = False", "\n", "if", "attn_type", "in", "[", "'self'", ",", "'selfcondition'", "]", ":", "\n", "            ", "self", ".", "attn", "=", "FullAttention", "(", "\n", "n_embd", "=", "n_embd", ",", "\n", "n_head", "=", "n_head", ",", "\n", "seq_len", "=", "seq_len", ",", "\n", "attn_pdrop", "=", "attn_pdrop", ",", "\n", "resid_pdrop", "=", "resid_pdrop", ",", "\n", ")", "\n", "if", "attn_type", "==", "'selfcondition'", ":", "\n", "                ", "if", "'adalayernorm'", "in", "class_type", ":", "\n", "                    ", "self", ".", "ln2", "=", "AdaLayerNorm", "(", "n_embd", ",", "class_number", ",", "class_type", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "ln2", "=", "AdaInsNorm", "(", "n_embd", ",", "class_number", ",", "class_type", ")", "\n", "", "", "", "elif", "attn_type", "==", "'selfcross'", ":", "\n", "            ", "self", ".", "attn1", "=", "FullAttention", "(", "\n", "n_embd", "=", "n_embd", ",", "\n", "n_head", "=", "n_head", ",", "\n", "seq_len", "=", "seq_len", ",", "\n", "attn_pdrop", "=", "attn_pdrop", ",", "\n", "resid_pdrop", "=", "resid_pdrop", ",", "\n", ")", "\n", "self", ".", "attn2", "=", "CrossAttention", "(", "\n", "condition_seq_len", ",", "\n", "n_embd", "=", "n_embd", ",", "\n", "condition_embd", "=", "condition_dim", ",", "\n", "n_head", "=", "n_head", ",", "\n", "seq_len", "=", "seq_len", ",", "\n", "attn_pdrop", "=", "attn_pdrop", ",", "\n", "resid_pdrop", "=", "resid_pdrop", ",", "\n", ")", "\n", "if", "'adalayernorm'", "in", "timestep_type", ":", "\n", "                ", "self", ".", "ln1_1", "=", "AdaLayerNorm", "(", "n_embd", ",", "diffusion_step", ",", "timestep_type", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"timestep_type wrong\"", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"attn_type error\"", ")", "\n", "", "assert", "activate", "in", "[", "'GELU'", ",", "'GELU2'", "]", "\n", "act", "=", "nn", ".", "GELU", "(", ")", "if", "activate", "==", "'GELU'", "else", "GELU2", "(", ")", "\n", "if", "mlp_type", "==", "'conv_mlp'", ":", "\n", "            ", "self", ".", "mlp", "=", "Conv_MLP", "(", "n_embd", ",", "mlp_hidden_times", ",", "act", ",", "resid_pdrop", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "n_embd", ",", "mlp_hidden_times", "*", "n_embd", ")", ",", "\n", "act", ",", "\n", "nn", ".", "Linear", "(", "mlp_hidden_times", "*", "n_embd", ",", "n_embd", ")", ",", "\n", "nn", ".", "Dropout", "(", "resid_pdrop", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.Block.forward": [[257, 275], ["transformer_utils.Block.attn1", "transformer_utils.Block.attn2", "transformer_utils.Block.mlp", "transformer_utils.Block.ln1", "transformer_utils.Block.ln1_1", "transformer_utils.Block.attn", "transformer_utils.Block.attn", "transformer_utils.Block.ln2", "transformer_utils.Block.ln1", "transformer_utils.Block.mlp", "transformer_utils.Block.ln1", "transformer_utils.Block.ln2", "encoder_output.long"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "encoder_output", ",", "timestep", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "attn_type", "==", "\"selfcross\"", ":", "\n", "            ", "a", ",", "att", "=", "self", ".", "attn1", "(", "self", ".", "ln1", "(", "x", ",", "timestep", ")", ",", "encoder_output", ",", "mask", "=", "mask", ")", "\n", "x", "=", "x", "+", "a", "\n", "a", ",", "att", "=", "self", ".", "attn2", "(", "self", ".", "ln1_1", "(", "x", ",", "timestep", ")", ",", "encoder_output", ",", "mask", "=", "mask", ")", "\n", "x", "=", "x", "+", "a", "\n", "", "elif", "self", ".", "attn_type", "==", "\"selfcondition\"", ":", "\n", "            ", "a", ",", "att", "=", "self", ".", "attn", "(", "self", ".", "ln1", "(", "x", ",", "timestep", ")", ",", "encoder_output", ",", "mask", "=", "mask", ")", "\n", "x", "=", "x", "+", "a", "\n", "x", "=", "x", "+", "self", ".", "mlp", "(", "self", ".", "ln2", "(", "x", ",", "encoder_output", ".", "long", "(", ")", ")", ")", "# only one really use encoder_output", "\n", "return", "x", ",", "att", "\n", "", "else", ":", "# 'self'", "\n", "            ", "a", ",", "att", "=", "self", ".", "attn", "(", "self", ".", "ln1", "(", "x", ",", "timestep", ")", ",", "encoder_output", ",", "mask", "=", "mask", ")", "\n", "x", "=", "x", "+", "a", "\n", "\n", "", "x", "=", "x", "+", "self", ".", "mlp", "(", "self", ".", "ln2", "(", "x", ")", ")", "\n", "\n", "return", "x", ",", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.Conv_MLP.__init__": [[277, 283], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Dropout", "torch.nn.Dropout", "int", "int"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_embd", ",", "mlp_hidden_times", ",", "act", ",", "resid_pdrop", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "n_embd", ",", "out_channels", "=", "int", "(", "mlp_hidden_times", "*", "n_embd", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "int", "(", "mlp_hidden_times", "*", "n_embd", ")", ",", "out_channels", "=", "n_embd", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "resid_pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.Conv_MLP.forward": [[284, 290], ["einops.rearrange", "transformer_utils.Conv_MLP.conv2", "einops.rearrange", "transformer_utils.Conv_MLP.dropout", "einops.rearrange.size", "transformer_utils.Conv_MLP.act", "int", "transformer_utils.Conv_MLP.conv1", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", "=", "x", ".", "size", "(", ")", "[", "1", "]", "\n", "x", "=", "rearrange", "(", "x", ",", "'b (h w) c -> b c h w'", ",", "h", "=", "int", "(", "math", ".", "sqrt", "(", "n", ")", ")", ")", "\n", "x", "=", "self", ".", "conv2", "(", "self", ".", "act", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "rearrange", "(", "x", ",", "'b c h w -> b (h w) c'", ")", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.Text2ImageTransformer.__init__": [[292, 354], ["torch.nn.Module.__init__", "image_synthesis.utils.misc.instantiate_from_config", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "transformer_utils.Text2ImageTransformer.apply", "int", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "math.sqrt", "transformer_utils.Block", "range"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "condition_seq_len", "=", "77", ",", "\n", "n_layer", "=", "14", ",", "\n", "n_embd", "=", "1024", ",", "\n", "n_head", "=", "16", ",", "\n", "content_seq_len", "=", "1024", ",", "\n", "attn_pdrop", "=", "0", ",", "\n", "resid_pdrop", "=", "0", ",", "\n", "mlp_hidden_times", "=", "4", ",", "\n", "block_activate", "=", "None", ",", "\n", "attn_type", "=", "'selfcross'", ",", "\n", "content_spatial_size", "=", "[", "32", ",", "32", "]", ",", "# H , W", "\n", "condition_dim", "=", "512", ",", "\n", "diffusion_step", "=", "1000", ",", "\n", "timestep_type", "=", "'adalayernorm'", ",", "\n", "content_emb_config", "=", "None", ",", "\n", "mlp_type", "=", "'fc'", ",", "\n", "checkpoint", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "use_checkpoint", "=", "checkpoint", "\n", "self", ".", "content_emb", "=", "instantiate_from_config", "(", "content_emb_config", ")", "\n", "\n", "# transformer", "\n", "assert", "attn_type", "==", "'selfcross'", "\n", "all_attn_type", "=", "[", "attn_type", "]", "*", "n_layer", "\n", "\n", "if", "content_spatial_size", "is", "None", ":", "\n", "            ", "s", "=", "int", "(", "math", ".", "sqrt", "(", "content_seq_len", ")", ")", "\n", "assert", "s", "*", "s", "==", "content_seq_len", "\n", "content_spatial_size", "=", "(", "s", ",", "s", ")", "\n", "\n", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "[", "Block", "(", "\n", "condition_seq_len", ",", "\n", "n_embd", "=", "n_embd", ",", "\n", "n_head", "=", "n_head", ",", "\n", "seq_len", "=", "content_seq_len", ",", "\n", "attn_pdrop", "=", "attn_pdrop", ",", "\n", "resid_pdrop", "=", "resid_pdrop", ",", "\n", "mlp_hidden_times", "=", "mlp_hidden_times", ",", "\n", "activate", "=", "block_activate", ",", "\n", "attn_type", "=", "all_attn_type", "[", "n", "]", ",", "\n", "content_spatial_size", "=", "content_spatial_size", ",", "# H , W", "\n", "condition_dim", "=", "condition_dim", ",", "\n", "diffusion_step", "=", "diffusion_step", ",", "\n", "timestep_type", "=", "timestep_type", ",", "\n", "mlp_type", "=", "mlp_type", ",", "\n", ")", "for", "n", "in", "range", "(", "n_layer", ")", "]", ")", "\n", "\n", "# final prediction head", "\n", "out_cls", "=", "self", ".", "content_emb", ".", "num_embed", "-", "1", "\n", "self", ".", "to_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LayerNorm", "(", "n_embd", ")", ",", "\n", "nn", ".", "Linear", "(", "n_embd", ",", "out_cls", ")", ",", "\n", ")", "\n", "\n", "self", ".", "condition_seq_len", "=", "condition_seq_len", "\n", "self", ".", "content_seq_len", "=", "content_seq_len", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.Text2ImageTransformer._init_weights": [[355, 364], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "if", "module", ".", "elementwise_affine", "==", "True", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.Text2ImageTransformer.parameters": [[365, 420], ["super().parameters", "print", "set", "set", "transformer_utils.Text2ImageTransformer.named_modules", "m.named_parameters", "len", "len", "pn.endswith", "hasattr", "transformer_utils.Text2ImageTransformer.transformer.named_parameters", "str", "str", "set.add", "getattr", "hasattr", "param_dict.keys", "pn.endswith", "isinstance", "set.add", "getattr", "isinstance", "param_dict.keys", "sorted", "sorted", "pn.endswith", "isinstance", "set.add", "getattr", "set.add", "list", "list", "getattr"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys"], ["", "", "", "def", "parameters", "(", "self", ",", "recurse", "=", "True", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Following minGPT:\n        This long function is unfortunately doing something very simple and is being very defensive:\n        We are separating out all parameters of the model into two buckets: those that will experience\n        weight decay for regularization and those that won't (biases, and layernorm/embedding weights).\n        We are then returning the PyTorch optimizer object.\n        \"\"\"", "\n", "# return super().parameters(recurse=True)", "\n", "if", "name", "is", "None", "or", "name", "==", "'none'", ":", "\n", "            ", "return", "super", "(", ")", ".", "parameters", "(", "recurse", "=", "recurse", ")", "\n", "", "else", ":", "\n", "# separate out all parameters to those that will and won't experience regularizing weight decay", "\n", "            ", "print", "(", "\"GPTLikeTransformer: get parameters by the overwrite method!\"", ")", "\n", "decay", "=", "set", "(", ")", "\n", "no_decay", "=", "set", "(", ")", "\n", "whitelist_weight_modules", "=", "(", "torch", ".", "nn", ".", "Linear", ",", ")", "\n", "blacklist_weight_modules", "=", "(", "torch", ".", "nn", ".", "LayerNorm", ",", "torch", ".", "nn", ".", "Embedding", ")", "\n", "for", "mn", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "                ", "for", "pn", ",", "p", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "fpn", "=", "'%s.%s'", "%", "(", "mn", ",", "pn", ")", "if", "mn", "else", "pn", "# full param name", "\n", "\n", "if", "pn", ".", "endswith", "(", "'bias'", ")", ":", "\n", "# all biases will not be decayed", "\n", "                        ", "no_decay", ".", "add", "(", "fpn", ")", "\n", "", "elif", "pn", ".", "endswith", "(", "'weight'", ")", "and", "isinstance", "(", "m", ",", "whitelist_weight_modules", ")", ":", "\n", "# weights of whitelist modules will be weight decayed", "\n", "                        ", "decay", ".", "add", "(", "fpn", ")", "\n", "", "elif", "pn", ".", "endswith", "(", "'weight'", ")", "and", "isinstance", "(", "m", ",", "blacklist_weight_modules", ")", ":", "\n", "# weights of blacklist modules will NOT be weight decayed", "\n", "                        ", "no_decay", ".", "add", "(", "fpn", ")", "\n", "# special case the position embedding parameter as not decayed", "\n", "", "", "", "module_name", "=", "[", "'condition_emb'", ",", "'content_emb'", "]", "\n", "pos_emb_name", "=", "[", "'pos_emb'", ",", "'width_emb'", ",", "'height_emb'", ",", "'pad_emb'", ",", "'token_type_emb'", "]", "\n", "for", "mn", "in", "module_name", ":", "\n", "                ", "if", "hasattr", "(", "self", ",", "mn", ")", "and", "getattr", "(", "self", ",", "mn", ")", "is", "not", "None", ":", "\n", "                    ", "for", "pn", "in", "pos_emb_name", ":", "\n", "                        ", "if", "hasattr", "(", "getattr", "(", "self", ",", "mn", ")", ",", "pn", ")", ":", "\n", "                            ", "if", "isinstance", "(", "getattr", "(", "getattr", "(", "self", ",", "mn", ")", ",", "pn", ")", ",", "torch", ".", "nn", ".", "Parameter", ")", ":", "\n", "                                ", "no_decay", ".", "add", "(", "'{}.{}'", ".", "format", "(", "mn", ",", "pn", ")", ")", "\n", "\n", "# validate that we considered every parameter", "\n", "", "", "", "", "", "param_dict", "=", "{", "pn", ":", "p", "for", "pn", ",", "p", "in", "self", ".", "transformer", ".", "named_parameters", "(", ")", "}", "# if p.requires_grad} ", "\n", "inter_params", "=", "decay", "&", "no_decay", "\n", "union_params", "=", "decay", "|", "no_decay", "\n", "assert", "len", "(", "inter_params", ")", "==", "0", ",", "\"parameters %s made it into both decay/no_decay sets!\"", "%", "(", "str", "(", "inter_params", ")", ",", ")", "\n", "assert", "len", "(", "param_dict", ".", "keys", "(", ")", "-", "union_params", ")", "==", "0", ",", "\"parameters %s were not separated into either decay/no_decay set!\"", "%", "(", "str", "(", "param_dict", ".", "keys", "(", ")", "-", "union_params", ")", ",", ")", "\n", "\n", "# create the pytorch optimizer object", "\n", "optim_groups", "=", "[", "\n", "{", "\"params\"", ":", "[", "param_dict", "[", "pn", "]", "for", "pn", "in", "sorted", "(", "list", "(", "decay", ")", ")", "]", ",", "\"weight_decay\"", ":", "0.01", "}", ",", "\n", "{", "\"params\"", ":", "[", "param_dict", "[", "pn", "]", "for", "pn", "in", "sorted", "(", "list", "(", "no_decay", ")", ")", "]", ",", "\"weight_decay\"", ":", "0.0", "}", ",", "\n", "]", "\n", "return", "optim_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.Text2ImageTransformer.forward": [[421, 437], ["transformer_utils.Text2ImageTransformer.content_emb", "range", "transformer_utils.Text2ImageTransformer.to_logits", "einops.rearrange", "len", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "t.cuda", "t.cuda"], "methods", ["None"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "input", ",", "\n", "cond_emb", ",", "\n", "t", ")", ":", "\n", "        ", "cont_emb", "=", "self", ".", "content_emb", "(", "input", ")", "\n", "emb", "=", "cont_emb", "\n", "\n", "for", "block_idx", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "if", "self", ".", "use_checkpoint", "==", "False", ":", "\n", "                ", "emb", ",", "att_weight", "=", "self", ".", "blocks", "[", "block_idx", "]", "(", "emb", ",", "cond_emb", ",", "t", ".", "cuda", "(", ")", ")", "# B x (Ld+Lt) x D, B x (Ld+Lt) x (Ld+Lt)", "\n", "", "else", ":", "\n", "                ", "emb", ",", "att_weight", "=", "checkpoint", "(", "self", ".", "blocks", "[", "block_idx", "]", ",", "emb", ",", "cond_emb", ",", "t", ".", "cuda", "(", ")", ")", "\n", "", "", "logits", "=", "self", ".", "to_logits", "(", "emb", ")", "# B x (Ld+Lt) x n", "\n", "out", "=", "rearrange", "(", "logits", ",", "'b l c -> b c l'", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.Condition2ImageTransformer.__init__": [[439, 498], ["torch.nn.Module.__init__", "image_synthesis.utils.misc.instantiate_from_config", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "transformer_utils.Condition2ImageTransformer.apply", "int", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "math.sqrt", "transformer_utils.Block", "range"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "class_type", "=", "'adalayernorm'", ",", "\n", "class_number", "=", "1000", ",", "\n", "n_layer", "=", "24", ",", "\n", "n_embd", "=", "1024", ",", "\n", "n_head", "=", "16", ",", "\n", "content_seq_len", "=", "1024", ",", "\n", "attn_pdrop", "=", "0", ",", "\n", "resid_pdrop", "=", "0", ",", "\n", "mlp_hidden_times", "=", "4", ",", "\n", "block_activate", "=", "None", ",", "\n", "attn_type", "=", "'selfcondition'", ",", "\n", "content_spatial_size", "=", "[", "32", ",", "32", "]", ",", "# H , W", "\n", "diffusion_step", "=", "100", ",", "\n", "timestep_type", "=", "'adalayernorm'", ",", "\n", "content_emb_config", "=", "None", ",", "\n", "mlp_type", "=", "\"conv_mlp\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "content_emb", "=", "instantiate_from_config", "(", "content_emb_config", ")", "\n", "\n", "# transformer", "\n", "assert", "attn_type", "==", "'selfcondition'", "\n", "all_attn_type", "=", "[", "attn_type", "]", "*", "n_layer", "\n", "\n", "if", "content_spatial_size", "is", "None", ":", "\n", "            ", "s", "=", "int", "(", "math", ".", "sqrt", "(", "content_seq_len", ")", ")", "\n", "assert", "s", "*", "s", "==", "content_seq_len", "\n", "content_spatial_size", "=", "(", "s", ",", "s", ")", "\n", "\n", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "[", "Block", "(", "\n", "class_type", "=", "class_type", ",", "\n", "class_number", "=", "class_number", ",", "\n", "n_embd", "=", "n_embd", ",", "\n", "n_head", "=", "n_head", ",", "\n", "seq_len", "=", "content_seq_len", ",", "\n", "attn_pdrop", "=", "attn_pdrop", ",", "\n", "resid_pdrop", "=", "resid_pdrop", ",", "\n", "mlp_hidden_times", "=", "mlp_hidden_times", ",", "\n", "activate", "=", "block_activate", ",", "\n", "attn_type", "=", "all_attn_type", "[", "n", "]", ",", "\n", "content_spatial_size", "=", "content_spatial_size", ",", "# H , W", "\n", "diffusion_step", "=", "diffusion_step", ",", "\n", "timestep_type", "=", "timestep_type", ",", "\n", "mlp_type", "=", "mlp_type", ",", "\n", ")", "for", "n", "in", "range", "(", "n_layer", ")", "]", ")", "\n", "\n", "# final prediction head", "\n", "out_cls", "=", "self", ".", "content_emb", ".", "num_embed", "-", "1", "\n", "self", ".", "to_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LayerNorm", "(", "n_embd", ")", ",", "\n", "nn", ".", "Linear", "(", "n_embd", ",", "out_cls", ")", ",", "\n", ")", "\n", "\n", "self", ".", "content_seq_len", "=", "content_seq_len", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.Condition2ImageTransformer._init_weights": [[499, 508], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "if", "module", ".", "elementwise_affine", "==", "True", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.Condition2ImageTransformer.parameters": [[510, 565], ["super().parameters", "print", "set", "set", "transformer_utils.Condition2ImageTransformer.named_modules", "m.named_parameters", "len", "len", "pn.endswith", "hasattr", "transformer_utils.Condition2ImageTransformer.transformer.named_parameters", "str", "str", "set.add", "getattr", "hasattr", "param_dict.keys", "pn.endswith", "isinstance", "set.add", "getattr", "isinstance", "param_dict.keys", "sorted", "sorted", "pn.endswith", "isinstance", "set.add", "getattr", "set.add", "list", "list", "getattr"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys"], ["", "", "", "def", "parameters", "(", "self", ",", "recurse", "=", "True", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Following minGPT:\n        This long function is unfortunately doing something very simple and is being very defensive:\n        We are separating out all parameters of the model into two buckets: those that will experience\n        weight decay for regularization and those that won't (biases, and layernorm/embedding weights).\n        We are then returning the PyTorch optimizer object.\n        \"\"\"", "\n", "# return super().parameters(recurse=True)", "\n", "if", "name", "is", "None", "or", "name", "==", "'none'", ":", "\n", "            ", "return", "super", "(", ")", ".", "parameters", "(", "recurse", "=", "recurse", ")", "\n", "", "else", ":", "\n", "# separate out all parameters to those that will and won't experience regularizing weight decay", "\n", "            ", "print", "(", "\"GPTLikeTransformer: get parameters by the overwrite method!\"", ")", "\n", "decay", "=", "set", "(", ")", "\n", "no_decay", "=", "set", "(", ")", "\n", "whitelist_weight_modules", "=", "(", "torch", ".", "nn", ".", "Linear", ",", ")", "\n", "blacklist_weight_modules", "=", "(", "torch", ".", "nn", ".", "LayerNorm", ",", "torch", ".", "nn", ".", "Embedding", ")", "\n", "for", "mn", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "                ", "for", "pn", ",", "p", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "fpn", "=", "'%s.%s'", "%", "(", "mn", ",", "pn", ")", "if", "mn", "else", "pn", "# full param name", "\n", "\n", "if", "pn", ".", "endswith", "(", "'bias'", ")", ":", "\n", "# all biases will not be decayed", "\n", "                        ", "no_decay", ".", "add", "(", "fpn", ")", "\n", "", "elif", "pn", ".", "endswith", "(", "'weight'", ")", "and", "isinstance", "(", "m", ",", "whitelist_weight_modules", ")", ":", "\n", "# weights of whitelist modules will be weight decayed", "\n", "                        ", "decay", ".", "add", "(", "fpn", ")", "\n", "", "elif", "pn", ".", "endswith", "(", "'weight'", ")", "and", "isinstance", "(", "m", ",", "blacklist_weight_modules", ")", ":", "\n", "# weights of blacklist modules will NOT be weight decayed", "\n", "                        ", "no_decay", ".", "add", "(", "fpn", ")", "\n", "# special case the position embedding parameter as not decayed", "\n", "", "", "", "module_name", "=", "[", "'condition_emb'", ",", "'content_emb'", "]", "\n", "pos_emb_name", "=", "[", "'pos_emb'", ",", "'width_emb'", ",", "'height_emb'", ",", "'pad_emb'", ",", "'token_type_emb'", "]", "\n", "for", "mn", "in", "module_name", ":", "\n", "                ", "if", "hasattr", "(", "self", ",", "mn", ")", "and", "getattr", "(", "self", ",", "mn", ")", "is", "not", "None", ":", "\n", "                    ", "for", "pn", "in", "pos_emb_name", ":", "\n", "                        ", "if", "hasattr", "(", "getattr", "(", "self", ",", "mn", ")", ",", "pn", ")", ":", "\n", "                            ", "if", "isinstance", "(", "getattr", "(", "getattr", "(", "self", ",", "mn", ")", ",", "pn", ")", ",", "torch", ".", "nn", ".", "Parameter", ")", ":", "\n", "                                ", "no_decay", ".", "add", "(", "'{}.{}'", ".", "format", "(", "mn", ",", "pn", ")", ")", "\n", "\n", "# validate that we considered every parameter", "\n", "", "", "", "", "", "param_dict", "=", "{", "pn", ":", "p", "for", "pn", ",", "p", "in", "self", ".", "transformer", ".", "named_parameters", "(", ")", "}", "# if p.requires_grad} ", "\n", "inter_params", "=", "decay", "&", "no_decay", "\n", "union_params", "=", "decay", "|", "no_decay", "\n", "assert", "len", "(", "inter_params", ")", "==", "0", ",", "\"parameters %s made it into both decay/no_decay sets!\"", "%", "(", "str", "(", "inter_params", ")", ",", ")", "\n", "assert", "len", "(", "param_dict", ".", "keys", "(", ")", "-", "union_params", ")", "==", "0", ",", "\"parameters %s were not separated into either decay/no_decay set!\"", "%", "(", "str", "(", "param_dict", ".", "keys", "(", ")", "-", "union_params", ")", ",", ")", "\n", "\n", "# create the pytorch optimizer object", "\n", "optim_groups", "=", "[", "\n", "{", "\"params\"", ":", "[", "param_dict", "[", "pn", "]", "for", "pn", "in", "sorted", "(", "list", "(", "decay", ")", ")", "]", ",", "\"weight_decay\"", ":", "0.01", "}", ",", "\n", "{", "\"params\"", ":", "[", "param_dict", "[", "pn", "]", "for", "pn", "in", "sorted", "(", "list", "(", "no_decay", ")", ")", "]", ",", "\"weight_decay\"", ":", "0.0", "}", ",", "\n", "]", "\n", "return", "optim_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.Condition2ImageTransformer.forward": [[566, 579], ["transformer_utils.Condition2ImageTransformer.content_emb", "range", "transformer_utils.Condition2ImageTransformer.to_logits", "einops.rearrange", "len", "t.cuda"], "methods", ["None"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "input", ",", "\n", "cond_emb", ",", "\n", "t", ")", ":", "\n", "        ", "cont_emb", "=", "self", ".", "content_emb", "(", "input", ")", "\n", "emb", "=", "cont_emb", "\n", "\n", "for", "block_idx", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "emb", ",", "att_weight", "=", "self", ".", "blocks", "[", "block_idx", "]", "(", "emb", ",", "cond_emb", ",", "t", ".", "cuda", "(", ")", ")", "# B x (Ld+Lt) x D, B x (Ld+Lt) x (Ld+Lt)", "\n", "", "logits", "=", "self", ".", "to_logits", "(", "emb", ")", "# B x (Ld+Lt) x n", "\n", "out", "=", "rearrange", "(", "logits", ",", "'b l c -> b c l'", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.UnCondition2ImageTransformer.__init__": [[582, 638], ["torch.nn.Module.__init__", "image_synthesis.utils.misc.instantiate_from_config", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "transformer_utils.UnCondition2ImageTransformer.apply", "int", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "math.sqrt", "transformer_utils.Block", "range"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "class_type", "=", "'adalayernorm'", ",", "\n", "n_layer", "=", "24", ",", "\n", "n_embd", "=", "512", ",", "\n", "n_head", "=", "16", ",", "\n", "content_seq_len", "=", "256", ",", "\n", "attn_pdrop", "=", "0", ",", "\n", "resid_pdrop", "=", "0", ",", "\n", "mlp_hidden_times", "=", "4", ",", "\n", "block_activate", "=", "None", ",", "\n", "attn_type", "=", "'self'", ",", "\n", "content_spatial_size", "=", "[", "16", ",", "16", "]", ",", "# H , W", "\n", "diffusion_step", "=", "100", ",", "\n", "timestep_type", "=", "'adalayernorm'", ",", "\n", "content_emb_config", "=", "None", ",", "\n", "mlp_type", "=", "\"conv_mlp\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "content_emb", "=", "instantiate_from_config", "(", "content_emb_config", ")", "\n", "\n", "# transformer", "\n", "assert", "attn_type", "==", "'self'", "\n", "all_attn_type", "=", "[", "attn_type", "]", "*", "n_layer", "\n", "\n", "if", "content_spatial_size", "is", "None", ":", "\n", "            ", "s", "=", "int", "(", "math", ".", "sqrt", "(", "content_seq_len", ")", ")", "\n", "assert", "s", "*", "s", "==", "content_seq_len", "\n", "content_spatial_size", "=", "(", "s", ",", "s", ")", "\n", "\n", "", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "[", "Block", "(", "\n", "n_embd", "=", "n_embd", ",", "\n", "n_head", "=", "n_head", ",", "\n", "seq_len", "=", "content_seq_len", ",", "\n", "attn_pdrop", "=", "attn_pdrop", ",", "\n", "resid_pdrop", "=", "resid_pdrop", ",", "\n", "mlp_hidden_times", "=", "mlp_hidden_times", ",", "\n", "activate", "=", "block_activate", ",", "\n", "attn_type", "=", "all_attn_type", "[", "n", "]", ",", "\n", "content_spatial_size", "=", "content_spatial_size", ",", "# H , W", "\n", "diffusion_step", "=", "diffusion_step", ",", "\n", "timestep_type", "=", "timestep_type", ",", "\n", "mlp_type", "=", "mlp_type", ",", "\n", ")", "for", "n", "in", "range", "(", "n_layer", ")", "]", ")", "\n", "\n", "# final prediction head", "\n", "out_cls", "=", "self", ".", "content_emb", ".", "num_embed", "-", "1", "\n", "self", ".", "to_logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LayerNorm", "(", "n_embd", ")", ",", "\n", "nn", ".", "Linear", "(", "n_embd", ",", "out_cls", ")", ",", "\n", ")", "\n", "\n", "self", ".", "content_seq_len", "=", "content_seq_len", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.UnCondition2ImageTransformer._init_weights": [[639, 648], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "if", "module", ".", "elementwise_affine", "==", "True", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.UnCondition2ImageTransformer.parameters": [[650, 705], ["super().parameters", "print", "set", "set", "transformer_utils.UnCondition2ImageTransformer.named_modules", "m.named_parameters", "len", "len", "pn.endswith", "hasattr", "transformer_utils.UnCondition2ImageTransformer.transformer.named_parameters", "str", "str", "set.add", "getattr", "hasattr", "param_dict.keys", "pn.endswith", "isinstance", "set.add", "getattr", "isinstance", "param_dict.keys", "sorted", "sorted", "pn.endswith", "isinstance", "set.add", "getattr", "set.add", "list", "list", "getattr"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys"], ["", "", "", "def", "parameters", "(", "self", ",", "recurse", "=", "True", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Following minGPT:\n        This long function is unfortunately doing something very simple and is being very defensive:\n        We are separating out all parameters of the model into two buckets: those that will experience\n        weight decay for regularization and those that won't (biases, and layernorm/embedding weights).\n        We are then returning the PyTorch optimizer object.\n        \"\"\"", "\n", "# return super().parameters(recurse=True)", "\n", "if", "name", "is", "None", "or", "name", "==", "'none'", ":", "\n", "            ", "return", "super", "(", ")", ".", "parameters", "(", "recurse", "=", "recurse", ")", "\n", "", "else", ":", "\n", "# separate out all parameters to those that will and won't experience regularizing weight decay", "\n", "            ", "print", "(", "\"GPTLikeTransformer: get parameters by the overwrite method!\"", ")", "\n", "decay", "=", "set", "(", ")", "\n", "no_decay", "=", "set", "(", ")", "\n", "whitelist_weight_modules", "=", "(", "torch", ".", "nn", ".", "Linear", ",", ")", "\n", "blacklist_weight_modules", "=", "(", "torch", ".", "nn", ".", "LayerNorm", ",", "torch", ".", "nn", ".", "Embedding", ")", "\n", "for", "mn", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "                ", "for", "pn", ",", "p", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "fpn", "=", "'%s.%s'", "%", "(", "mn", ",", "pn", ")", "if", "mn", "else", "pn", "# full param name", "\n", "\n", "if", "pn", ".", "endswith", "(", "'bias'", ")", ":", "\n", "# all biases will not be decayed", "\n", "                        ", "no_decay", ".", "add", "(", "fpn", ")", "\n", "", "elif", "pn", ".", "endswith", "(", "'weight'", ")", "and", "isinstance", "(", "m", ",", "whitelist_weight_modules", ")", ":", "\n", "# weights of whitelist modules will be weight decayed", "\n", "                        ", "decay", ".", "add", "(", "fpn", ")", "\n", "", "elif", "pn", ".", "endswith", "(", "'weight'", ")", "and", "isinstance", "(", "m", ",", "blacklist_weight_modules", ")", ":", "\n", "# weights of blacklist modules will NOT be weight decayed", "\n", "                        ", "no_decay", ".", "add", "(", "fpn", ")", "\n", "# special case the position embedding parameter as not decayed", "\n", "", "", "", "module_name", "=", "[", "'condition_emb'", ",", "'content_emb'", "]", "\n", "pos_emb_name", "=", "[", "'pos_emb'", ",", "'width_emb'", ",", "'height_emb'", ",", "'pad_emb'", ",", "'token_type_emb'", "]", "\n", "for", "mn", "in", "module_name", ":", "\n", "                ", "if", "hasattr", "(", "self", ",", "mn", ")", "and", "getattr", "(", "self", ",", "mn", ")", "is", "not", "None", ":", "\n", "                    ", "for", "pn", "in", "pos_emb_name", ":", "\n", "                        ", "if", "hasattr", "(", "getattr", "(", "self", ",", "mn", ")", ",", "pn", ")", ":", "\n", "                            ", "if", "isinstance", "(", "getattr", "(", "getattr", "(", "self", ",", "mn", ")", ",", "pn", ")", ",", "torch", ".", "nn", ".", "Parameter", ")", ":", "\n", "                                ", "no_decay", ".", "add", "(", "'{}.{}'", ".", "format", "(", "mn", ",", "pn", ")", ")", "\n", "\n", "# validate that we considered every parameter", "\n", "", "", "", "", "", "param_dict", "=", "{", "pn", ":", "p", "for", "pn", ",", "p", "in", "self", ".", "transformer", ".", "named_parameters", "(", ")", "}", "# if p.requires_grad} ", "\n", "inter_params", "=", "decay", "&", "no_decay", "\n", "union_params", "=", "decay", "|", "no_decay", "\n", "assert", "len", "(", "inter_params", ")", "==", "0", ",", "\"parameters %s made it into both decay/no_decay sets!\"", "%", "(", "str", "(", "inter_params", ")", ",", ")", "\n", "assert", "len", "(", "param_dict", ".", "keys", "(", ")", "-", "union_params", ")", "==", "0", ",", "\"parameters %s were not separated into either decay/no_decay set!\"", "%", "(", "str", "(", "param_dict", ".", "keys", "(", ")", "-", "union_params", ")", ",", ")", "\n", "\n", "# create the pytorch optimizer object", "\n", "optim_groups", "=", "[", "\n", "{", "\"params\"", ":", "[", "param_dict", "[", "pn", "]", "for", "pn", "in", "sorted", "(", "list", "(", "decay", ")", ")", "]", ",", "\"weight_decay\"", ":", "0.01", "}", ",", "\n", "{", "\"params\"", ":", "[", "param_dict", "[", "pn", "]", "for", "pn", "in", "sorted", "(", "list", "(", "no_decay", ")", ")", "]", ",", "\"weight_decay\"", ":", "0.0", "}", ",", "\n", "]", "\n", "return", "optim_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.transformer_utils.UnCondition2ImageTransformer.forward": [[706, 719], ["transformer_utils.UnCondition2ImageTransformer.content_emb", "range", "transformer_utils.UnCondition2ImageTransformer.to_logits", "einops.rearrange", "len", "t.cuda"], "methods", ["None"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "input", ",", "\n", "cond_emb", ",", "\n", "t", ")", ":", "\n", "        ", "cont_emb", "=", "self", ".", "content_emb", "(", "input", ")", "\n", "emb", "=", "cont_emb", "\n", "\n", "for", "block_idx", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "emb", ",", "att_weight", "=", "self", ".", "blocks", "[", "block_idx", "]", "(", "emb", ",", "cond_emb", ",", "t", ".", "cuda", "(", ")", ")", "# B x (Ld+Lt) x D, B x (Ld+Lt) x (Ld+Lt)", "\n", "", "logits", "=", "self", ".", "to_logits", "(", "emb", ")", "# B x (Ld+Lt) x n", "\n", "out", "=", "rearrange", "(", "logits", ",", "'b l c -> b c l'", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.embeddings.clip_text_embedding.CLIPTextEmbedding.__init__": [[8, 41], ["base_embedding.BaseEmbedding.__init__", "image_synthesis.modeling.modules.clip.clip.load", "image_synthesis.modeling.modules.clip.model.build_model", "clip_text_embedding.CLIPTextEmbedding._set_trainable", "image_synthesis.modeling.modules.clip.model.build_model.state_dict"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.build_model", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.codecs.base_codec.BaseCodec._set_trainable", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict"], ["    ", "def", "__init__", "(", "self", ",", "\n", "clip_name", "=", "'ViT-B/32'", ",", "\n", "num_embed", "=", "49408", ",", "\n", "normalize", "=", "True", ",", "\n", "pick_last_embedding", "=", "True", ",", "\n", "keep_seq_len_dim", "=", "False", ",", "\n", "additional_last_embedding", "=", "False", ",", "\n", "embed_dim", "=", "1024", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_embed", "=", "num_embed", "\n", "self", ".", "clip_name", "=", "clip_name", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "pick_last_embedding", "=", "pick_last_embedding", "\n", "self", ".", "keep_seq_len_dim", "=", "keep_seq_len_dim", "\n", "self", ".", "additional_last_embedding", "=", "additional_last_embedding", "\n", "\n", "model", ",", "_", "=", "clip", ".", "load", "(", "clip_name", ",", "device", "=", "'cpu'", ",", "jit", "=", "False", ")", "\n", "model", "=", "clip_model", ".", "build_model", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "self", ".", "token_embedding", "=", "model", ".", "token_embedding", "\n", "self", ".", "positional_embedding", "=", "model", ".", "positional_embedding", "\n", "self", ".", "transformer", "=", "model", ".", "transformer", "\n", "self", ".", "ln_final", "=", "model", ".", "ln_final", "\n", "self", ".", "text_projection", "=", "model", ".", "text_projection", "\n", "\n", "if", "embed_dim", "==", "1024", ":", "\n", "            ", "self", ".", "embed_dim", "=", "self", ".", "text_projection", ".", "shape", "[", "1", "]", "*", "2", "# to fit 1024 dimension of image embedding", "\n", "", "else", ":", "\n", "            ", "self", ".", "embed_dim", "=", "self", ".", "text_projection", ".", "shape", "[", "1", "]", "# original output, 512 dim", "\n", "\n", "", "self", ".", "trainable", "=", "False", "\n", "self", ".", "_set_trainable", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.embeddings.clip_text_embedding.CLIPTextEmbedding.dtype": [[42, 45], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "resblocks", "[", "0", "]", ".", "attn", ".", "in_proj_weight", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.embeddings.clip_text_embedding.CLIPTextEmbedding.encode_text": [[46, 63], ["clip_text_embedding.CLIPTextEmbedding.token_embedding().type", "x.unsqueeze.unsqueeze.permute", "clip_text_embedding.CLIPTextEmbedding.transformer", "x.unsqueeze.unsqueeze.permute", "clip_text_embedding.CLIPTextEmbedding.ln_final().type", "clip_text_embedding.CLIPTextEmbedding.positional_embedding.type", "clip_text_embedding.CLIPTextEmbedding.token_embedding", "clip_text_embedding.CLIPTextEmbedding.ln_final", "x.unsqueeze.unsqueeze.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "text.argmax"], "methods", ["None"], ["", "def", "encode_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "text", "[", "text", "<", "0", "]", "=", "0", "# some padded text token maybe negative, so set them to 0", "\n", "x", "=", "self", ".", "token_embedding", "(", "text", ")", ".", "type", "(", "self", ".", "dtype", ")", "# [batch_size, n_ctx, d_model]", "\n", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", ".", "type", "(", "self", ".", "dtype", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# NLD -> LND", "\n", "x", "=", "self", ".", "transformer", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# LND -> NLD", "\n", "x", "=", "self", ".", "ln_final", "(", "x", ")", ".", "type", "(", "self", ".", "dtype", ")", "\n", "\n", "# x.shape = [batch_size, n_ctx, transformer.width]", "\n", "if", "self", ".", "pick_last_embedding", ":", "\n", "# take features from the eot embedding (eot_token is the highest number in each sequence)", "\n", "            ", "x", "=", "x", "[", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "text", ".", "argmax", "(", "dim", "=", "-", "1", ")", "]", "@", "self", ".", "text_projection", "# [batch_size, transformer.width]", "\n", "if", "self", ".", "keep_seq_len_dim", ":", "\n", "                ", "x", "=", "x", ".", "unsqueeze", "(", "dim", "=", "1", ")", "# [batch_size, 1, transformer.width]", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.embeddings.clip_text_embedding.CLIPTextEmbedding.forward": [[66, 89], ["clip_text_embedding.CLIPTextEmbedding.encode_text", "index.dim", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.norm", "torch.cat.norm", "last_feature.unsqueeze.unsqueeze.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "index.argmax"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.CLIP.encode_text", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm"], ["", "def", "forward", "(", "self", ",", "index", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        index: B x L, index\n        mask: B x L, bool type. The value of False indicating padded index\n        \"\"\"", "\n", "assert", "index", ".", "dim", "(", ")", "==", "2", "# B x L", "\n", "text_feature", "=", "self", ".", "encode_text", "(", "index", ")", "\n", "\n", "if", "self", ".", "embed_dim", "==", "1024", ":", "\n", "            ", "text_features", "=", "torch", ".", "cat", "(", "(", "text_feature", ",", "text_feature", ")", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "text_features", "=", "text_feature", "\n", "", "if", "self", ".", "normalize", ":", "\n", "            ", "text_features", "=", "text_features", "/", "text_features", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "additional_last_embedding", "==", "True", ":", "\n", "            ", "last_feature", "=", "text_feature", "[", "torch", ".", "arange", "(", "text_feature", ".", "shape", "[", "0", "]", ")", ",", "index", ".", "argmax", "(", "dim", "=", "-", "1", ")", "]", "@", "self", ".", "text_projection", "\n", "if", "self", ".", "keep_seq_len_dim", ":", "\n", "                ", "last_feature", "=", "last_feature", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "", "return", "text_features", ",", "last_feature", "\n", "\n", "\n", "", "return", "text_features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.embeddings.dalle_mask_image_embedding.DalleMaskImageEmbedding.__init__": [[6, 36], ["base_embedding.BaseEmbedding.__init__", "isinstance", "torch.Embedding", "torch.Embedding", "dalle_mask_image_embedding.DalleMaskImageEmbedding._set_trainable", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.codecs.base_codec.BaseCodec._set_trainable"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_embed", "=", "8192", ",", "\n", "spatial_size", "=", "[", "32", ",", "32", "]", ",", "# height and with ", "\n", "embed_dim", "=", "3968", ",", "\n", "trainable", "=", "True", ",", "\n", "pos_emb_type", "=", "'embedding'", "\n", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "isinstance", "(", "spatial_size", ",", "int", ")", ":", "\n", "            ", "spatial_size", "=", "[", "spatial_size", ",", "spatial_size", "]", "\n", "\n", "", "self", ".", "spatial_size", "=", "spatial_size", "\n", "self", ".", "num_embed", "=", "num_embed", "+", "1", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "pos_emb_type", "=", "pos_emb_type", "\n", "\n", "assert", "self", ".", "pos_emb_type", "in", "[", "'embedding'", ",", "'parameter'", "]", "\n", "\n", "self", ".", "emb", "=", "nn", ".", "Embedding", "(", "self", ".", "num_embed", ",", "embed_dim", ")", "\n", "if", "self", ".", "pos_emb_type", "==", "'embedding'", ":", "\n", "            ", "self", ".", "height_emb", "=", "nn", ".", "Embedding", "(", "self", ".", "spatial_size", "[", "0", "]", ",", "embed_dim", ")", "# height   ", "\n", "self", ".", "width_emb", "=", "nn", ".", "Embedding", "(", "self", ".", "spatial_size", "[", "1", "]", ",", "embed_dim", ")", "# width", "\n", "", "else", ":", "\n", "            ", "self", ".", "height_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "spatial_size", "[", "0", "]", ",", "embed_dim", ")", ")", "# height #32,1024", "\n", "self", ".", "width_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "spatial_size", "[", "1", "]", ",", "embed_dim", ")", ")", "# width   #32,1024", "\n", "\n", "", "self", ".", "_set_trainable", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.embeddings.dalle_mask_image_embedding.DalleMaskImageEmbedding.forward": [[37, 58], ["index.dim", "dalle_mask_image_embedding.DalleMaskImageEmbedding.emb", "RuntimeError", "dalle_mask_image_embedding.DalleMaskImageEmbedding.height_emb().unsqueeze", "dalle_mask_image_embedding.DalleMaskImageEmbedding.width_emb().unsqueeze", "dalle_mask_image_embedding.DalleMaskImageEmbedding.height_emb.unsqueeze", "dalle_mask_image_embedding.DalleMaskImageEmbedding.width_emb.unsqueeze", "index.max", "dalle_mask_image_embedding.DalleMaskImageEmbedding.height_emb", "dalle_mask_image_embedding.DalleMaskImageEmbedding.width_emb", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "index", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "index", ".", "dim", "(", ")", "==", "2", "# B x L", "\n", "try", ":", "\n", "            ", "index", "[", "index", "<", "0", "]", "=", "0", "\n", "emb", "=", "self", ".", "emb", "(", "index", ")", "\n", "", "except", ":", "\n", "            ", "raise", "RuntimeError", "(", "'IndexError: index out of range in self, max index {}, num embed {}'", ".", "format", "(", "index", ".", "max", "(", ")", ",", "self", ".", "num_embed", ")", ")", "\n", "\n", "# add col and row embedding", "\n", "", "if", "emb", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "# if False:", "\n", "            ", "if", "self", ".", "pos_emb_type", "==", "'embedding'", ":", "\n", "                ", "height_emb", "=", "self", ".", "height_emb", "(", "torch", ".", "arange", "(", "self", ".", "spatial_size", "[", "0", "]", ",", "device", "=", "index", ".", "device", ")", ".", "view", "(", "1", ",", "self", ".", "spatial_size", "[", "0", "]", ")", ")", ".", "unsqueeze", "(", "2", ")", "# 1 x H x D -> 1 x H x 1 x D", "\n", "width_emb", "=", "self", ".", "width_emb", "(", "torch", ".", "arange", "(", "self", ".", "spatial_size", "[", "1", "]", ",", "device", "=", "index", ".", "device", ")", ".", "view", "(", "1", ",", "self", ".", "spatial_size", "[", "1", "]", ")", ")", ".", "unsqueeze", "(", "1", ")", "# 1 x W x D -> 1 x 1 x W x D", "\n", "", "else", ":", "\n", "                ", "height_emb", "=", "self", ".", "height_emb", ".", "unsqueeze", "(", "2", ")", "# 1 x H x D -> 1 x H x 1 x D", "\n", "width_emb", "=", "self", ".", "width_emb", ".", "unsqueeze", "(", "1", ")", "# 1 x W x D -> 1 x 1 x W x D", "\n", "", "pos_emb", "=", "(", "height_emb", "+", "width_emb", ")", ".", "view", "(", "1", ",", "self", ".", "spatial_size", "[", "0", "]", "*", "self", ".", "spatial_size", "[", "1", "]", ",", "-", "1", ")", "# 1 x H x W x D -> 1 x L xD", "\n", "emb", "=", "emb", "+", "pos_emb", "[", ":", ",", ":", "emb", ".", "shape", "[", "1", "]", ",", ":", "]", "\n", "\n", "", "return", "emb", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.embeddings.class_embedding.ClassEmbedding.__init__": [[6, 21], ["base_embedding.BaseEmbedding.__init__", "torch.Embedding", "torch.Embedding", "class_embedding.ClassEmbedding._set_trainable"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.codecs.base_codec.BaseCodec._set_trainable"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_embed", "=", "1000", ",", "\n", "embed_dim", "=", "512", ",", "\n", "identity", "=", "False", ",", "\n", "trainable", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "identity", "=", "identity", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "num_embed", "=", "num_embed", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "if", "self", ".", "identity", "==", "False", ":", "\n", "\n", "            ", "self", ".", "emb", "=", "nn", ".", "Embedding", "(", "self", ".", "num_embed", ",", "embed_dim", ")", "\n", "self", ".", "_set_trainable", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.embeddings.class_embedding.ClassEmbedding.forward": [[22, 32], ["class_embedding.ClassEmbedding.emb().unsqueeze", "class_embedding.ClassEmbedding.emb"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "index", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        index: B x L, index\n        mask: B x L, bool type. The value of False indicating padded index\n        \"\"\"", "\n", "if", "self", ".", "identity", "==", "True", ":", "\n", "            ", "return", "index", "\n", "", "else", ":", "\n", "            ", "emb", "=", "self", ".", "emb", "(", "index", ")", ".", "unsqueeze", "(", "1", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.embeddings.base_embedding.BaseEmbedding.get_loss": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "get_loss", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.embeddings.base_embedding.BaseEmbedding.forward": [[10, 12], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.embeddings.base_embedding.BaseEmbedding.train": [[13, 18], ["super().train"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "self", ".", "training", "=", "mode", "\n", "if", "self", ".", "trainable", "and", "mode", ":", "\n", "            ", "super", "(", ")", ".", "train", "(", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.embeddings.base_embedding.BaseEmbedding._set_trainable": [[19, 24], ["base_embedding.BaseEmbedding.named_parameters", "base_embedding.BaseEmbedding.eval"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval"], ["", "def", "_set_trainable", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "trainable", ":", "\n", "            ", "for", "pn", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.simple_tokenizer.SimpleTokenizer.__init__": [[63, 83], ["simple_tokenizer.default_bpe", "simple_tokenizer.bytes_to_unicode", "gzip.open().read().decode().split", "list", "list.extend", "dict", "dict", "regex.compile", "tuple", "bytes_to_unicode().values", "list.append", "zip", "zip", "simple_tokenizer.SimpleTokenizer.byte_encoder.items", "gzip.open().read().decode", "merge.split", "range", "simple_tokenizer.SimpleTokenizer.encoder.items", "range", "simple_tokenizer.bytes_to_unicode", "len", "len", "gzip.open().read", "gzip.open"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.default_bpe", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.bytes_to_unicode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.bytes_to_unicode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["    ", "def", "__init__", "(", "self", ",", "end_idx", "=", "49152", ",", "bpe_path", ":", "str", "=", "default_bpe", "(", ")", ")", ":", "\n", "        ", "self", ".", "byte_encoder", "=", "bytes_to_unicode", "(", ")", "\n", "self", ".", "byte_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "byte_encoder", ".", "items", "(", ")", "}", "\n", "merges", "=", "gzip", ".", "open", "(", "bpe_path", ")", ".", "read", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", ".", "split", "(", "'\\n'", ")", "\n", "# merges = merges[1:49152-256-2+1]", "\n", "\n", "# end_idx can be 49152 for CLIP", "\n", "# or 16384 for DALL-E", "\n", "merges", "=", "merges", "[", "1", ":", "end_idx", "-", "256", "-", "2", "+", "1", "]", "\n", "merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", ")", "for", "merge", "in", "merges", "]", "\n", "vocab", "=", "list", "(", "bytes_to_unicode", "(", ")", ".", "values", "(", ")", ")", "\n", "vocab", "=", "vocab", "+", "[", "v", "+", "'</w>'", "for", "v", "in", "vocab", "]", "# with length 256", "\n", "for", "merge", "in", "merges", ":", "\n", "            ", "vocab", ".", "append", "(", "''", ".", "join", "(", "merge", ")", ")", "\n", "", "vocab", ".", "extend", "(", "[", "'<|startoftext|>'", ",", "'<|endoftext|>'", "]", ")", "# with length = end_idx+256", "\n", "self", ".", "encoder", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "merges", ",", "range", "(", "len", "(", "merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "'<|startoftext|>'", ":", "'<|startoftext|>'", ",", "'<|endoftext|>'", ":", "'<|endoftext|>'", "}", "\n", "self", ".", "pat", "=", "re", ".", "compile", "(", "r\"\"\"<\\|startoftext\\|>|<\\|endoftext\\|>|'s|'t|'re|'ve|'m|'ll|'d|[\\p{L}]+|[\\p{N}]|[^\\s\\p{L}\\p{N}]+\"\"\"", ",", "re", ".", "IGNORECASE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.simple_tokenizer.SimpleTokenizer.bpe": [[84, 124], ["simple_tokenizer.get_pairs", "tuple", "min", "tuple", "len", "len", "simple_tokenizer.get_pairs", "word.index", "tuple.extend", "tuple.append", "tuple.append", "simple_tokenizer.SimpleTokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.get_pairs", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.get_pairs", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "word", "=", "tuple", "(", "token", "[", ":", "-", "1", "]", ")", "+", "(", "token", "[", "-", "1", "]", "+", "'</w>'", ",", ")", "\n", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "+", "'</w>'", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.simple_tokenizer.SimpleTokenizer.encode": [[125, 132], ["whitespace_clean().lower", "regex.findall", "bpe_tokens.extend", "simple_tokenizer.whitespace_clean", "simple_tokenizer.basic_clean", "token.encode", "simple_tokenizer.SimpleTokenizer.bpe().split", "simple_tokenizer.SimpleTokenizer.bpe"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.whitespace_clean", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.basic_clean", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.encode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.SimpleTokenizer.bpe"], ["", "def", "encode", "(", "self", ",", "text", ")", ":", "\n", "        ", "bpe_tokens", "=", "[", "]", "\n", "text", "=", "whitespace_clean", "(", "basic_clean", "(", "text", ")", ")", ".", "lower", "(", ")", "\n", "for", "token", "in", "re", ".", "findall", "(", "self", ".", "pat", ",", "text", ")", ":", "\n", "            ", "token", "=", "''", ".", "join", "(", "self", ".", "byte_encoder", "[", "b", "]", "for", "b", "in", "token", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "bpe_tokens", ".", "extend", "(", "self", ".", "encoder", "[", "bpe_token", "]", "for", "bpe_token", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "return", "bpe_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.simple_tokenizer.SimpleTokenizer.decode": [[133, 137], ["bytearray().decode().replace", "bytearray().decode", "bytearray"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode"], ["", "def", "decode", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "text", "=", "''", ".", "join", "(", "[", "self", ".", "decoder", "[", "token", "]", "for", "token", "in", "tokens", "]", ")", "\n", "text", "=", "bytearray", "(", "[", "self", ".", "byte_decoder", "[", "c", "]", "for", "c", "in", "text", "]", ")", ".", "decode", "(", "'utf-8'", ",", "errors", "=", "\"replace\"", ")", ".", "replace", "(", "'</w>'", ",", "' '", ")", "\n", "return", "text", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.simple_tokenizer.default_bpe": [[10, 13], ["functools.lru_cache", "os.path.join", "os.path.dirname", "os.path.abspath"], "function", ["None"], ["@", "lru_cache", "(", ")", "\n", "def", "default_bpe", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"bpe_simple_vocab_16e6.txt.gz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.simple_tokenizer.bytes_to_unicode": [[15, 36], ["functools.lru_cache", "range", "dict", "list", "chr", "zip", "list", "list", "range", "bs.append", "cs.append", "range", "range", "ord", "ord", "ord", "ord", "ord", "ord"], "function", ["None"], ["", "@", "lru_cache", "(", ")", "\n", "def", "bytes_to_unicode", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns list of utf-8 byte and a corresponding list of unicode strings.\n    The reversible bpe codes work on unicode strings.\n    This means you need a large # of unicode characters in your vocab if you want to avoid UNKs.\n    When you're at something like a 10B token dataset you end up needing around 5K for decent coverage.\n    This is a signficant percentage of your normal, say, 32K bpe vocab.\n    To avoid that, we want lookup tables between utf-8 bytes and unicode strings.\n    And avoids mapping to whitespace/control characters the bpe code barfs on.\n    \"\"\"", "\n", "bs", "=", "list", "(", "range", "(", "ord", "(", "\"!\"", ")", ",", "ord", "(", "\"~\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00a1\"", ")", ",", "ord", "(", "\"\u00ac\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00ae\"", ")", ",", "ord", "(", "\"\u00ff\"", ")", "+", "1", ")", ")", "\n", "cs", "=", "bs", "[", ":", "]", "\n", "n", "=", "0", "\n", "for", "b", "in", "range", "(", "2", "**", "8", ")", ":", "\n", "        ", "if", "b", "not", "in", "bs", ":", "\n", "            ", "bs", ".", "append", "(", "b", ")", "\n", "cs", ".", "append", "(", "2", "**", "8", "+", "n", ")", "\n", "n", "+=", "1", "\n", "", "", "cs", "=", "[", "chr", "(", "n", ")", "for", "n", "in", "cs", "]", "\n", "return", "dict", "(", "zip", "(", "bs", ",", "cs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.simple_tokenizer.get_pairs": [[38, 48], ["set", "set.add"], "function", ["None"], ["", "def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"Return set of symbol pairs in a word.\n    Word is represented as tuple of symbols (symbols being variable-length strings).\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.simple_tokenizer.basic_clean": [[50, 54], ["ftfy.fix_text", "html.unescape", "html.unescape.strip", "html.unescape"], "function", ["None"], ["", "def", "basic_clean", "(", "text", ")", ":", "\n", "    ", "text", "=", "ftfy", ".", "fix_text", "(", "text", ")", "\n", "text", "=", "html", ".", "unescape", "(", "html", ".", "unescape", "(", "text", ")", ")", "\n", "return", "text", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.simple_tokenizer.whitespace_clean": [[56, 60], ["regex.sub", "text.strip.strip"], "function", ["None"], ["", "def", "whitespace_clean", "(", "text", ")", ":", "\n", "    ", "text", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "text", ")", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip._download": [[24, 55], ["os.path.expanduser", "os.makedirs", "os.path.basename", "os.path.isfile", "url.split", "os.path.exists", "RuntimeError", "urllib.request.urlopen", "open", "hashlib.sha256().hexdigest", "RuntimeError", "os.path.isfile", "hashlib.sha256().hexdigest", "warnings.warn", "tqdm.tqdm", "source.read", "output.write", "loop.update", "hashlib.sha256", "hashlib.sha256", "int", "len", "open().read", "open().read", "source.info().get", "open", "open", "source.info"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["def", "_download", "(", "url", ":", "str", ",", "root", ":", "str", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/.cache/image-synthesis\"", ")", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "root", ",", "exist_ok", "=", "True", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "url", ")", "\n", "\n", "expected_sha256", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "# download_target = os.path.join(root, filename)", "\n", "download_target", "=", "\"OUTPUT/pretrained_model/ViT-B-32.pt\"", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "download_target", ")", "and", "not", "os", ".", "path", ".", "isfile", "(", "download_target", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"{download_target} exists and is not a regular file\"", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "download_target", ")", ":", "\n", "        ", "if", "hashlib", ".", "sha256", "(", "open", "(", "download_target", ",", "\"rb\"", ")", ".", "read", "(", ")", ")", ".", "hexdigest", "(", ")", "==", "expected_sha256", ":", "\n", "            ", "return", "download_target", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "f\"{download_target} exists, but the SHA256 checksum does not match; re-downloading the file\"", ")", "\n", "\n", "", "", "with", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", "as", "source", ",", "open", "(", "download_target", ",", "\"wb\"", ")", "as", "output", ":", "\n", "        ", "with", "tqdm", "(", "total", "=", "int", "(", "source", ".", "info", "(", ")", ".", "get", "(", "\"Content-Length\"", ")", ")", ",", "ncols", "=", "80", ",", "unit", "=", "'iB'", ",", "unit_scale", "=", "True", ")", "as", "loop", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "buffer", "=", "source", ".", "read", "(", "8192", ")", "\n", "if", "not", "buffer", ":", "\n", "                    ", "break", "\n", "\n", "", "output", ".", "write", "(", "buffer", ")", "\n", "loop", ".", "update", "(", "len", "(", "buffer", ")", ")", "\n", "\n", "", "", "", "if", "hashlib", ".", "sha256", "(", "open", "(", "download_target", ",", "\"rb\"", ")", ".", "read", "(", ")", ")", ".", "hexdigest", "(", ")", "!=", "expected_sha256", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"Model has been downloaded but the SHA256 checksum does not not match\"", ")", "\n", "\n", "", "return", "download_target", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip._transform": [[57, 64], ["torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "image.convert"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Normalize"], ["", "def", "_transform", "(", "n_px", ")", ":", "\n", "    ", "return", "Compose", "(", "[", "\n", "Resize", "(", "n_px", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "CenterCrop", "(", "n_px", ")", ",", "\n", "lambda", "image", ":", "image", ".", "convert", "(", "\"RGB\"", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "(", "0.48145466", ",", "0.4578275", ",", "0.40821073", ")", ",", "(", "0.26862954", ",", "0.26130258", ",", "0.27577711", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.available_models": [[67, 70], ["list", "_MODELS.keys"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys"], ["", "def", "available_models", "(", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"Returns the names of available CLIP models\"\"\"", "\n", "return", "list", "(", "_MODELS", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load": [[72, 162], ["torch.jit.trace", "build_model().to.apply", "clip.load.patch_device"], "function", ["None"], ["", "def", "load", "(", "name", ":", "str", ",", "device", ":", "Union", "[", "str", ",", "torch", ".", "device", "]", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ",", "jit", "=", "True", ")", ":", "\n", "    ", "\"\"\"Load a CLIP model\n\n    Parameters\n    ----------\n    name : str\n        A model name listed by `clip.available_models()`, or the path to a model checkpoint containing the state_dict\n\n    device : Union[str, torch.device]\n        The device to put the loaded model\n\n    jit : bool\n        Whether to load the optimized JIT model (default) or more hackable non-JIT model.\n\n    Returns\n    -------\n    model : torch.nn.Module\n        The CLIP model\n\n    preprocess : Callable[[PIL.Image], torch.Tensor]\n        A torchvision transform that converts a PIL image into a tensor that the returned model can take as its input\n    \"\"\"", "\n", "if", "name", "in", "_MODELS", ":", "\n", "# model_path = _download(_MODELS[name])", "\n", "        ", "model_path", "=", "\"OUTPUT/pretrained_model/ViT-B-32.pt\"", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "name", ")", ":", "\n", "        ", "model_path", "=", "name", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"Model {name} not found; available models = {available_models()}\"", ")", "\n", "\n", "", "try", ":", "\n", "# loading JIT archive", "\n", "        ", "model", "=", "torch", ".", "jit", ".", "load", "(", "model_path", ",", "map_location", "=", "device", "if", "jit", "else", "\"cpu\"", ")", ".", "eval", "(", ")", "\n", "state_dict", "=", "None", "\n", "", "except", "RuntimeError", ":", "\n", "# loading saved state dict", "\n", "        ", "if", "jit", ":", "\n", "            ", "warnings", ".", "warn", "(", "f\"File {model_path} is not a JIT archive. Loading as a state dict instead\"", ")", "\n", "jit", "=", "False", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "", "if", "not", "jit", ":", "\n", "        ", "model", "=", "build_model", "(", "state_dict", "or", "model", ".", "state_dict", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "if", "str", "(", "device", ")", "==", "\"cpu\"", ":", "\n", "            ", "model", ".", "float", "(", ")", "\n", "", "return", "model", ",", "_transform", "(", "model", ".", "visual", ".", "input_resolution", ")", "\n", "\n", "# patch the device names", "\n", "", "device_holder", "=", "torch", ".", "jit", ".", "trace", "(", "lambda", ":", "torch", ".", "ones", "(", "[", "]", ")", ".", "to", "(", "torch", ".", "device", "(", "device", ")", ")", ",", "example_inputs", "=", "[", "]", ")", "\n", "device_node", "=", "[", "n", "for", "n", "in", "device_holder", ".", "graph", ".", "findAllNodes", "(", "\"prim::Constant\"", ")", "if", "\"Device\"", "in", "repr", "(", "n", ")", "]", "[", "-", "1", "]", "\n", "\n", "def", "patch_device", "(", "module", ")", ":", "\n", "        ", "graphs", "=", "[", "module", ".", "graph", "]", "if", "hasattr", "(", "module", ",", "\"graph\"", ")", "else", "[", "]", "\n", "if", "hasattr", "(", "module", ",", "\"forward1\"", ")", ":", "\n", "            ", "graphs", ".", "append", "(", "module", ".", "forward1", ".", "graph", ")", "\n", "\n", "", "for", "graph", "in", "graphs", ":", "\n", "            ", "for", "node", "in", "graph", ".", "findAllNodes", "(", "\"prim::Constant\"", ")", ":", "\n", "                ", "if", "\"value\"", "in", "node", ".", "attributeNames", "(", ")", "and", "str", "(", "node", "[", "\"value\"", "]", ")", ".", "startswith", "(", "\"cuda\"", ")", ":", "\n", "                    ", "node", ".", "copyAttributes", "(", "device_node", ")", "\n", "\n", "", "", "", "", "model", ".", "apply", "(", "patch_device", ")", "\n", "patch_device", "(", "model", ".", "encode_image", ")", "\n", "patch_device", "(", "model", ".", "encode_text", ")", "\n", "\n", "# patch dtype to float32 on CPU", "\n", "if", "str", "(", "device", ")", "==", "\"cpu\"", ":", "\n", "        ", "float_holder", "=", "torch", ".", "jit", ".", "trace", "(", "lambda", ":", "torch", ".", "ones", "(", "[", "]", ")", ".", "float", "(", ")", ",", "example_inputs", "=", "[", "]", ")", "\n", "float_input", "=", "list", "(", "float_holder", ".", "graph", ".", "findNode", "(", "\"aten::to\"", ")", ".", "inputs", "(", ")", ")", "[", "1", "]", "\n", "float_node", "=", "float_input", ".", "node", "(", ")", "\n", "\n", "def", "patch_float", "(", "module", ")", ":", "\n", "            ", "graphs", "=", "[", "module", ".", "graph", "]", "if", "hasattr", "(", "module", ",", "\"graph\"", ")", "else", "[", "]", "\n", "if", "hasattr", "(", "module", ",", "\"forward1\"", ")", ":", "\n", "                ", "graphs", ".", "append", "(", "module", ".", "forward1", ".", "graph", ")", "\n", "\n", "", "for", "graph", "in", "graphs", ":", "\n", "                ", "for", "node", "in", "graph", ".", "findAllNodes", "(", "\"aten::to\"", ")", ":", "\n", "                    ", "inputs", "=", "list", "(", "node", ".", "inputs", "(", ")", ")", "\n", "for", "i", "in", "[", "1", ",", "2", "]", ":", "# dtype can be the second or third argument to aten::to()", "\n", "                        ", "if", "inputs", "[", "i", "]", ".", "node", "(", ")", "[", "\"value\"", "]", "==", "5", ":", "\n", "                            ", "inputs", "[", "i", "]", ".", "node", "(", ")", ".", "copyAttributes", "(", "float_node", ")", "\n", "\n", "", "", "", "", "", "model", ".", "apply", "(", "patch_float", ")", "\n", "patch_float", "(", "model", ".", "encode_image", ")", "\n", "patch_float", "(", "model", ".", "encode_text", ")", "\n", "\n", "model", ".", "float", "(", ")", "\n", "\n", "", "return", "model", ",", "_transform", "(", "model", ".", "input_resolution", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.tokenize": [[164, 216], ["isinstance", "enumerate", "torch.zeros", "torch.zeros", "torch.tensor", "len", "len", "len", "tokenizer.encode", "len", "text.lower", "len", "len"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.encode"], ["", "def", "tokenize", "(", "texts", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", ",", "context_length", ":", "int", "=", "77", ",", "\n", "add_start_and_end", ":", "bool", "=", "True", ",", "with_mask", ":", "bool", "=", "True", ",", "\n", "pad_value", ":", "int", "=", "0", ",", "tokenizer", "=", "None", ",", "just_token", ":", "bool", "=", "False", ")", "->", "torch", ".", "LongTensor", ":", "\n", "    ", "\"\"\"\n    Returns the tokenized representation of given input string(s)\n\n    Parameters\n    ----------\n    texts : Union[str, List[str]]\n        An input string or a list of input strings to tokenize\n\n    context_length : int\n        The context length to use; all CLIP models use 77 as the context length\n    \n    just_token: bool\n        If True, just return the token of text\n\n    Returns\n    -------\n    A two-dimensional tensor containing the resulting tokens, shape = [number of input strings, context_length]\n    \"\"\"", "\n", "if", "isinstance", "(", "texts", ",", "str", ")", ":", "\n", "        ", "texts", "=", "[", "texts", "]", "\n", "\n", "", "if", "tokenizer", "is", "None", ":", "\n", "        ", "tokenizer", "=", "_tokenizer", "\n", "\n", "", "sot_token", "=", "[", "tokenizer", ".", "encoder", "[", "\"<|startoftext|>\"", "]", "]", "if", "add_start_and_end", "else", "[", "]", "\n", "eot_token", "=", "[", "tokenizer", ".", "encoder", "[", "\"<|endoftext|>\"", "]", "]", "if", "add_start_and_end", "else", "[", "]", "\n", "all_tokens", "=", "[", "sot_token", "+", "tokenizer", ".", "encode", "(", "text", ".", "lower", "(", ")", ")", "+", "eot_token", "for", "text", "in", "texts", "]", "\n", "if", "just_token", ":", "\n", "        ", "return", "all_tokens", "\n", "", "result", "=", "torch", ".", "zeros", "(", "len", "(", "all_tokens", ")", ",", "context_length", ",", "dtype", "=", "torch", ".", "long", ")", "+", "pad_value", "\n", "if", "with_mask", ":", "\n", "        ", "mask", "=", "torch", ".", "zeros", "(", "len", "(", "all_tokens", ")", ",", "context_length", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "", "for", "i", ",", "tokens", "in", "enumerate", "(", "all_tokens", ")", ":", "\n", "        ", "if", "len", "(", "tokens", ")", ">", "context_length", ":", "\n", "            ", "temp", "=", "tokens", "[", "-", "1", "]", "\n", "tokens", "=", "tokens", "[", ":", "context_length", "]", "\n", "tokens", "[", "-", "1", "]", "=", "temp", "\n", "assert", "len", "(", "tokens", ")", "==", "context_length", "\n", "# raise RuntimeError(\"Input text {} is too long for context length {}\".format(texts[i], context_length))", "\n", "", "result", "[", "i", ",", ":", "len", "(", "tokens", ")", "]", "=", "torch", ".", "tensor", "(", "tokens", ")", "\n", "if", "with_mask", ":", "\n", "            ", "mask", "[", "i", ",", ":", "len", "(", "tokens", ")", "]", "=", "True", "\n", "", "", "results", "=", "{", "\n", "'token'", ":", "result", ",", "\n", "}", "\n", "if", "with_mask", ":", "\n", "        ", "results", "[", "'mask'", "]", "=", "mask", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.SimpleTokenizer.__init__": [[63, 83], ["clip_tokenizer.default_bpe", "clip_tokenizer.bytes_to_unicode", "gzip.open().read().decode().split", "list", "list.extend", "dict", "dict", "regex.compile", "tuple", "bytes_to_unicode().values", "list.append", "zip", "zip", "clip_tokenizer.SimpleTokenizer.byte_encoder.items", "gzip.open().read().decode", "merge.split", "range", "clip_tokenizer.SimpleTokenizer.encoder.items", "range", "clip_tokenizer.bytes_to_unicode", "len", "len", "gzip.open().read", "gzip.open"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.default_bpe", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.bytes_to_unicode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.bytes_to_unicode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["    ", "def", "__init__", "(", "self", ",", "end_idx", "=", "49152", ",", "bpe_path", ":", "str", "=", "default_bpe", "(", ")", ")", ":", "\n", "        ", "self", ".", "byte_encoder", "=", "bytes_to_unicode", "(", ")", "\n", "self", ".", "byte_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "byte_encoder", ".", "items", "(", ")", "}", "\n", "merges", "=", "gzip", ".", "open", "(", "bpe_path", ")", ".", "read", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", ".", "split", "(", "'\\n'", ")", "\n", "# merges = merges[1:49152-256-2+1]", "\n", "\n", "# end_idx can be 49152 for CLIP", "\n", "# or 16384 for DALL-E", "\n", "merges", "=", "merges", "[", "1", ":", "end_idx", "-", "256", "-", "2", "+", "1", "]", "\n", "merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", ")", "for", "merge", "in", "merges", "]", "\n", "vocab", "=", "list", "(", "bytes_to_unicode", "(", ")", ".", "values", "(", ")", ")", "\n", "vocab", "=", "vocab", "+", "[", "v", "+", "'</w>'", "for", "v", "in", "vocab", "]", "# with length 256", "\n", "for", "merge", "in", "merges", ":", "\n", "            ", "vocab", ".", "append", "(", "''", ".", "join", "(", "merge", ")", ")", "\n", "", "vocab", ".", "extend", "(", "[", "'<|startoftext|>'", ",", "'<|endoftext|>'", "]", ")", "# with length = end_idx+256", "\n", "self", ".", "encoder", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "merges", ",", "range", "(", "len", "(", "merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "'<|startoftext|>'", ":", "'<|startoftext|>'", ",", "'<|endoftext|>'", ":", "'<|endoftext|>'", "}", "\n", "self", ".", "pat", "=", "re", ".", "compile", "(", "r\"\"\"<\\|startoftext\\|>|<\\|endoftext\\|>|'s|'t|'re|'ve|'m|'ll|'d|[\\p{L}]+|[\\p{N}]|[^\\s\\p{L}\\p{N}]+\"\"\"", ",", "re", ".", "IGNORECASE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.SimpleTokenizer.bpe": [[84, 124], ["clip_tokenizer.get_pairs", "tuple", "min", "tuple", "len", "len", "clip_tokenizer.get_pairs", "word.index", "tuple.extend", "tuple.append", "tuple.append", "clip_tokenizer.SimpleTokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.get_pairs", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.get_pairs", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "word", "=", "tuple", "(", "token", "[", ":", "-", "1", "]", ")", "+", "(", "token", "[", "-", "1", "]", "+", "'</w>'", ",", ")", "\n", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "+", "'</w>'", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.SimpleTokenizer.encode": [[125, 132], ["whitespace_clean().lower", "regex.findall", "bpe_tokens.extend", "clip_tokenizer.whitespace_clean", "clip_tokenizer.basic_clean", "token.encode", "clip_tokenizer.SimpleTokenizer.bpe().split", "clip_tokenizer.SimpleTokenizer.bpe"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.whitespace_clean", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.basic_clean", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.encode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.SimpleTokenizer.bpe"], ["", "def", "encode", "(", "self", ",", "text", ")", ":", "\n", "        ", "bpe_tokens", "=", "[", "]", "\n", "text", "=", "whitespace_clean", "(", "basic_clean", "(", "text", ")", ")", ".", "lower", "(", ")", "\n", "for", "token", "in", "re", ".", "findall", "(", "self", ".", "pat", ",", "text", ")", ":", "\n", "            ", "token", "=", "''", ".", "join", "(", "self", ".", "byte_encoder", "[", "b", "]", "for", "b", "in", "token", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "bpe_tokens", ".", "extend", "(", "self", ".", "encoder", "[", "bpe_token", "]", "for", "bpe_token", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "return", "bpe_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.SimpleTokenizer.decode": [[133, 137], ["bytearray().decode().replace", "bytearray().decode", "bytearray"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode"], ["", "def", "decode", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "text", "=", "''", ".", "join", "(", "[", "self", ".", "decoder", "[", "token", "]", "for", "token", "in", "tokens", "]", ")", "\n", "text", "=", "bytearray", "(", "[", "self", ".", "byte_decoder", "[", "c", "]", "for", "c", "in", "text", "]", ")", ".", "decode", "(", "'utf-8'", ",", "errors", "=", "\"replace\"", ")", ".", "replace", "(", "'</w>'", ",", "' '", ")", "\n", "return", "text", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.default_bpe": [[10, 13], ["functools.lru_cache", "os.path.join", "os.path.dirname", "os.path.abspath"], "function", ["None"], ["@", "lru_cache", "(", ")", "\n", "def", "default_bpe", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"bpe_simple_vocab_16e6.txt.gz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.bytes_to_unicode": [[15, 36], ["functools.lru_cache", "range", "dict", "list", "chr", "zip", "list", "list", "range", "bs.append", "cs.append", "range", "range", "ord", "ord", "ord", "ord", "ord", "ord"], "function", ["None"], ["", "@", "lru_cache", "(", ")", "\n", "def", "bytes_to_unicode", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns list of utf-8 byte and a corresponding list of unicode strings.\n    The reversible bpe codes work on unicode strings.\n    This means you need a large # of unicode characters in your vocab if you want to avoid UNKs.\n    When you're at something like a 10B token dataset you end up needing around 5K for decent coverage.\n    This is a signficant percentage of your normal, say, 32K bpe vocab.\n    To avoid that, we want lookup tables between utf-8 bytes and unicode strings.\n    And avoids mapping to whitespace/control characters the bpe code barfs on.\n    \"\"\"", "\n", "bs", "=", "list", "(", "range", "(", "ord", "(", "\"!\"", ")", ",", "ord", "(", "\"~\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00a1\"", ")", ",", "ord", "(", "\"\u00ac\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00ae\"", ")", ",", "ord", "(", "\"\u00ff\"", ")", "+", "1", ")", ")", "\n", "cs", "=", "bs", "[", ":", "]", "\n", "n", "=", "0", "\n", "for", "b", "in", "range", "(", "2", "**", "8", ")", ":", "\n", "        ", "if", "b", "not", "in", "bs", ":", "\n", "            ", "bs", ".", "append", "(", "b", ")", "\n", "cs", ".", "append", "(", "2", "**", "8", "+", "n", ")", "\n", "n", "+=", "1", "\n", "", "", "cs", "=", "[", "chr", "(", "n", ")", "for", "n", "in", "cs", "]", "\n", "return", "dict", "(", "zip", "(", "bs", ",", "cs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.get_pairs": [[38, 48], ["set", "set.add"], "function", ["None"], ["", "def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"Return set of symbol pairs in a word.\n    Word is represented as tuple of symbols (symbols being variable-length strings).\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.basic_clean": [[50, 54], ["ftfy.fix_text", "html.unescape", "html.unescape.strip", "html.unescape"], "function", ["None"], ["", "def", "basic_clean", "(", "text", ")", ":", "\n", "    ", "text", "=", "ftfy", ".", "fix_text", "(", "text", ")", "\n", "text", "=", "html", ".", "unescape", "(", "html", ".", "unescape", "(", "text", ")", ")", "\n", "return", "text", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip_tokenizer.whitespace_clean": [[56, 60], ["regex.sub", "text.strip.strip"], "function", ["None"], ["", "def", "whitespace_clean", "(", "text", ")", ":", "\n", "    ", "text", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "text", ")", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.Bottleneck.__init__": [[12, 37], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Sequential", "torch.nn.Sequential", "collections.OrderedDict", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# all conv layers have stride 1. an avgpool is performed after the second convolution when stride > 1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "stride", ")", "if", "stride", ">", "1", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "None", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "if", "stride", ">", "1", "or", "inplanes", "!=", "planes", "*", "Bottleneck", ".", "expansion", ":", "\n", "# downsampling layer is prepended with an avgpool, and the subsequent convolution has stride 1", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"-1\"", ",", "nn", ".", "AvgPool2d", "(", "stride", ")", ")", ",", "\n", "(", "\"0\"", ",", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "\"1\"", ",", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.Bottleneck.forward": [[39, 53], ["model.Bottleneck.relu", "model.Bottleneck.relu", "model.Bottleneck.avgpool", "model.Bottleneck.bn3", "model.Bottleneck.relu", "model.Bottleneck.bn1", "model.Bottleneck.bn2", "model.Bottleneck.conv3", "model.Bottleneck.downsample", "model.Bottleneck.conv1", "model.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.AttentionPool2d.__init__": [[56, 64], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "spacial_dim", ":", "int", ",", "embed_dim", ":", "int", ",", "num_heads", ":", "int", ",", "output_dim", ":", "int", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "spacial_dim", "**", "2", "+", "1", ",", "embed_dim", ")", "/", "embed_dim", "**", "0.5", ")", "\n", "self", ".", "k_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "q_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "v_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "c_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "output_dim", "or", "embed_dim", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.AttentionPool2d.forward": [[65, 90], ["torch.cat.reshape().permute", "torch.cat.reshape().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.multi_head_attention_forward", "torch.multi_head_attention_forward", "model.AttentionPool2d.positional_embedding[].to", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.mean", "torch.cat.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# NCHW -> (HW)NC", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ",", "x", "]", ",", "dim", "=", "0", ")", "# (HW+1)NC", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", "[", ":", ",", "None", ",", ":", "]", ".", "to", "(", "x", ".", "dtype", ")", "# (HW+1)NC", "\n", "x", ",", "_", "=", "F", ".", "multi_head_attention_forward", "(", "\n", "query", "=", "x", ",", "key", "=", "x", ",", "value", "=", "x", ",", "\n", "embed_dim_to_check", "=", "x", ".", "shape", "[", "-", "1", "]", ",", "\n", "num_heads", "=", "self", ".", "num_heads", ",", "\n", "q_proj_weight", "=", "self", ".", "q_proj", ".", "weight", ",", "\n", "k_proj_weight", "=", "self", ".", "k_proj", ".", "weight", ",", "\n", "v_proj_weight", "=", "self", ".", "v_proj", ".", "weight", ",", "\n", "in_proj_weight", "=", "None", ",", "\n", "in_proj_bias", "=", "torch", ".", "cat", "(", "[", "self", ".", "q_proj", ".", "bias", ",", "self", ".", "k_proj", ".", "bias", ",", "self", ".", "v_proj", ".", "bias", "]", ")", ",", "\n", "bias_k", "=", "None", ",", "\n", "bias_v", "=", "None", ",", "\n", "add_zero_attn", "=", "False", ",", "\n", "dropout_p", "=", "0", ",", "\n", "out_proj_weight", "=", "self", ".", "c_proj", ".", "weight", ",", "\n", "out_proj_bias", "=", "self", ".", "c_proj", ".", "bias", ",", "\n", "use_separate_proj_weight", "=", "True", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "need_weights", "=", "False", "\n", ")", "\n", "\n", "return", "x", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.ModifiedResNet.__init__": [[100, 124], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.ReLU", "torch.nn.ReLU", "model.ModifiedResNet._make_layer", "model.ModifiedResNet._make_layer", "model.ModifiedResNet._make_layer", "model.ModifiedResNet._make_layer", "model.AttentionPool2d"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.ModifiedResNet._make_layer"], ["def", "__init__", "(", "self", ",", "layers", ",", "output_dim", ",", "heads", ",", "input_resolution", "=", "224", ",", "width", "=", "64", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "\n", "# the 3-layer stem", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "width", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", "//", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "width", "//", "2", ",", "width", "//", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "width", "//", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", "//", "2", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# residual layers", "\n", "self", ".", "_inplanes", "=", "width", "# this is a *mutable* variable used during construction", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "width", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "width", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "width", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "width", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "embed_dim", "=", "width", "*", "32", "# the ResNet feature dimension", "\n", "self", ".", "attnpool", "=", "AttentionPool2d", "(", "input_resolution", "//", "32", ",", "embed_dim", ",", "heads", ",", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.ModifiedResNet._make_layer": [[125, 133], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "model.Bottleneck", "layers.append", "model.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layers", "=", "[", "Bottleneck", "(", "self", ".", "_inplanes", ",", "planes", ",", "stride", ")", "]", "\n", "\n", "self", ".", "_inplanes", "=", "planes", "*", "Bottleneck", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "_inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.ModifiedResNet.forward": [[134, 150], ["model.ModifiedResNet.type", "model.ModifiedResNet.forward.stem"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "def", "stem", "(", "x", ")", ":", "\n", "            ", "for", "conv", ",", "bn", "in", "[", "(", "self", ".", "conv1", ",", "self", ".", "bn1", ")", ",", "(", "self", ".", "conv2", ",", "self", ".", "bn2", ")", ",", "(", "self", ".", "conv3", ",", "self", ".", "bn3", ")", "]", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "bn", "(", "conv", "(", "x", ")", ")", ")", "\n", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "x", "=", "x", ".", "type", "(", "self", ".", "conv1", ".", "weight", ".", "dtype", ")", "\n", "x", "=", "stem", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "attnpool", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.LayerNorm.forward": [[155, 159], ["super().forward", "super().forward.type", "x.type"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.vqperceptual.VQLPIPSWithDiscriminator.forward"], ["def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "orig_type", "=", "x", ".", "dtype", "\n", "ret", "=", "super", "(", ")", ".", "forward", "(", "x", ".", "type", "(", "torch", ".", "float32", ")", ")", "\n", "return", "ret", ".", "type", "(", "orig_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.QuickGELU.forward": [[162, 164], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "1.702", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.ResidualAttentionBlock.__init__": [[167, 179], ["torch.nn.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "model.LayerNorm", "torch.nn.Sequential", "torch.nn.Sequential", "model.LayerNorm", "collections.OrderedDict", "torch.nn.Linear", "torch.nn.Linear", "model.QuickGELU", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ":", "int", ",", "n_head", ":", "int", ",", "attn_mask", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "n_head", ")", "\n", "self", ".", "ln_1", "=", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"c_fc\"", ",", "nn", ".", "Linear", "(", "d_model", ",", "d_model", "*", "4", ")", ")", ",", "\n", "(", "\"gelu\"", ",", "QuickGELU", "(", ")", ")", ",", "\n", "(", "\"c_proj\"", ",", "nn", ".", "Linear", "(", "d_model", "*", "4", ",", "d_model", ")", ")", "\n", "]", ")", ")", "\n", "self", ".", "ln_2", "=", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "attn_mask", "=", "attn_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.ResidualAttentionBlock.attention": [[180, 183], ["model.ResidualAttentionBlock.attn_mask.to", "model.ResidualAttentionBlock.attn"], "methods", ["None"], ["", "def", "attention", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "self", ".", "attn_mask", "=", "self", ".", "attn_mask", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "self", ".", "attn_mask", "is", "not", "None", "else", "None", "\n", "return", "self", ".", "attn", "(", "x", ",", "x", ",", "x", ",", "need_weights", "=", "False", ",", "attn_mask", "=", "self", ".", "attn_mask", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.ResidualAttentionBlock.forward": [[184, 188], ["model.ResidualAttentionBlock.attention", "model.ResidualAttentionBlock.mlp", "model.ResidualAttentionBlock.ln_1", "model.ResidualAttentionBlock.ln_2"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.ResidualAttentionBlock.attention"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "attention", "(", "self", ".", "ln_1", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "mlp", "(", "self", ".", "ln_2", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.Transformer.__init__": [[191, 196], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "model.ResidualAttentionBlock", "range"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "width", ":", "int", ",", "layers", ":", "int", ",", "heads", ":", "int", ",", "attn_mask", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "resblocks", "=", "nn", ".", "Sequential", "(", "*", "[", "ResidualAttentionBlock", "(", "width", ",", "heads", ",", "attn_mask", ")", "for", "_", "in", "range", "(", "layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.Transformer.forward": [[197, 199], ["model.Transformer.resblocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "self", ".", "resblocks", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.VisualTransformer.__init__": [[202, 217], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "model.LayerNorm", "model.Transformer", "model.LayerNorm", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_resolution", ":", "int", ",", "patch_size", ":", "int", ",", "width", ":", "int", ",", "layers", ":", "int", ",", "heads", ":", "int", ",", "output_dim", ":", "int", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "width", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "bias", "=", "False", ")", "\n", "\n", "scale", "=", "width", "**", "-", "0.5", "\n", "self", ".", "class_embedding", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "width", ")", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "(", "input_resolution", "//", "patch_size", ")", "**", "2", "+", "1", ",", "width", ")", ")", "\n", "self", ".", "ln_pre", "=", "LayerNorm", "(", "width", ")", "\n", "\n", "self", ".", "transformer", "=", "Transformer", "(", "width", ",", "layers", ",", "heads", ")", "\n", "\n", "self", ".", "ln_post", "=", "LayerNorm", "(", "width", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "width", ",", "output_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.VisualTransformer.forward": [[218, 236], ["model.VisualTransformer.conv1", "model.VisualTransformer.reshape", "model.VisualTransformer.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.VisualTransformer.ln_pre", "model.VisualTransformer.permute", "model.VisualTransformer.transformer", "model.VisualTransformer.permute", "model.VisualTransformer.ln_post", "model.VisualTransformer.positional_embedding.to", "model.VisualTransformer.class_embedding.to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "# shape = [*, width, grid, grid]", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "# shape = [*, width, grid ** 2]", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# shape = [*, grid ** 2, width]", "\n", "x", "=", "torch", ".", "cat", "(", "[", "self", ".", "class_embedding", ".", "to", "(", "x", ".", "dtype", ")", "+", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "x", ".", "shape", "[", "-", "1", "]", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", ",", "x", "]", ",", "dim", "=", "1", ")", "# shape = [*, grid ** 2 + 1, width]", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", ".", "to", "(", "x", ".", "dtype", ")", "\n", "x", "=", "self", ".", "ln_pre", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# NLD -> LND", "\n", "x", "=", "self", ".", "transformer", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# LND -> NLD", "\n", "\n", "x", "=", "self", ".", "ln_post", "(", "x", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "\n", "if", "self", ".", "proj", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "@", "self", ".", "proj", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.CLIP.__init__": [[239, 293], ["torch.nn.Module.__init__", "isinstance", "model.Transformer", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Parameter", "torch.nn.Parameter", "model.LayerNorm", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "model.CLIP.initialize_parameters", "model.ModifiedResNet", "model.VisualTransformer", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "model.CLIP.build_attention_mask"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.CLIP.initialize_parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.CLIP.build_attention_mask"], ["    ", "def", "__init__", "(", "self", ",", "\n", "embed_dim", ":", "int", ",", "\n", "# vision", "\n", "image_resolution", ":", "int", ",", "\n", "vision_layers", ":", "Union", "[", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", ",", "int", "]", ",", "\n", "vision_width", ":", "int", ",", "\n", "vision_patch_size", ":", "int", ",", "\n", "# text", "\n", "context_length", ":", "int", ",", "\n", "vocab_size", ":", "int", ",", "\n", "transformer_width", ":", "int", ",", "\n", "transformer_heads", ":", "int", ",", "\n", "transformer_layers", ":", "int", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "context_length", "=", "context_length", "\n", "\n", "if", "isinstance", "(", "vision_layers", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "vision_heads", "=", "vision_width", "*", "32", "//", "64", "\n", "self", ".", "visual", "=", "ModifiedResNet", "(", "\n", "layers", "=", "vision_layers", ",", "\n", "output_dim", "=", "embed_dim", ",", "\n", "heads", "=", "vision_heads", ",", "\n", "input_resolution", "=", "image_resolution", ",", "\n", "width", "=", "vision_width", "\n", ")", "\n", "", "else", ":", "\n", "            ", "vision_heads", "=", "vision_width", "//", "64", "\n", "self", ".", "visual", "=", "VisualTransformer", "(", "\n", "input_resolution", "=", "image_resolution", ",", "\n", "patch_size", "=", "vision_patch_size", ",", "\n", "width", "=", "vision_width", ",", "\n", "layers", "=", "vision_layers", ",", "\n", "heads", "=", "vision_heads", ",", "\n", "output_dim", "=", "embed_dim", "\n", ")", "\n", "\n", "", "self", ".", "transformer", "=", "Transformer", "(", "\n", "width", "=", "transformer_width", ",", "\n", "layers", "=", "transformer_layers", ",", "\n", "heads", "=", "transformer_heads", ",", "\n", "attn_mask", "=", "self", ".", "build_attention_mask", "(", ")", "\n", ")", "\n", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "token_embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "transformer_width", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "self", ".", "context_length", ",", "transformer_width", ")", ")", "\n", "self", ".", "ln_final", "=", "LayerNorm", "(", "transformer_width", ")", "\n", "\n", "self", ".", "text_projection", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "transformer_width", ",", "embed_dim", ")", ")", "\n", "self", ".", "logit_scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "[", "]", ")", ")", "\n", "\n", "self", ".", "initialize_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.CLIP.initialize_parameters": [[294, 322], ["torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "resnet_block.named_parameters", "name.endswith", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["", "def", "initialize_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "token_embedding", ".", "weight", ",", "std", "=", "0.02", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "positional_embedding", ",", "std", "=", "0.01", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "visual", ",", "ModifiedResNet", ")", ":", "\n", "            ", "if", "self", ".", "visual", ".", "attnpool", "is", "not", "None", ":", "\n", "                ", "std", "=", "self", ".", "visual", ".", "attnpool", ".", "c_proj", ".", "in_features", "**", "-", "0.5", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "q_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "k_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "v_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "c_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "\n", "", "for", "resnet_block", "in", "[", "self", ".", "visual", ".", "layer1", ",", "self", ".", "visual", ".", "layer2", ",", "self", ".", "visual", ".", "layer3", ",", "self", ".", "visual", ".", "layer4", "]", ":", "\n", "                ", "for", "name", ",", "param", "in", "resnet_block", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "name", ".", "endswith", "(", "\"bn3.weight\"", ")", ":", "\n", "                        ", "nn", ".", "init", ".", "zeros_", "(", "param", ")", "\n", "\n", "", "", "", "", "proj_std", "=", "(", "self", ".", "transformer", ".", "width", "**", "-", "0.5", ")", "*", "(", "(", "2", "*", "self", ".", "transformer", ".", "layers", ")", "**", "-", "0.5", ")", "\n", "attn_std", "=", "self", ".", "transformer", ".", "width", "**", "-", "0.5", "\n", "fc_std", "=", "(", "2", "*", "self", ".", "transformer", ".", "width", ")", "**", "-", "0.5", "\n", "for", "block", "in", "self", ".", "transformer", ".", "resblocks", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "block", ".", "attn", ".", "in_proj_weight", ",", "std", "=", "attn_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "attn", ".", "out_proj", ".", "weight", ",", "std", "=", "proj_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "mlp", ".", "c_fc", ".", "weight", ",", "std", "=", "fc_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "mlp", ".", "c_proj", ".", "weight", ",", "std", "=", "proj_std", ")", "\n", "\n", "", "if", "self", ".", "text_projection", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "text_projection", ",", "std", "=", "self", ".", "transformer", ".", "width", "**", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.CLIP.build_attention_mask": [[323, 330], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty.fill_", "torch.empty.fill_", "torch.empty.triu_", "torch.empty.triu_", "float"], "methods", ["None"], ["", "", "def", "build_attention_mask", "(", "self", ")", ":", "\n", "# lazily create causal attention mask, with full attention between the vision tokens", "\n", "# pytorch uses additive attention mask; fill with -inf", "\n", "        ", "mask", "=", "torch", ".", "empty", "(", "self", ".", "context_length", ",", "self", ".", "context_length", ")", "\n", "mask", ".", "fill_", "(", "float", "(", "\"-inf\"", ")", ")", "\n", "mask", ".", "triu_", "(", "1", ")", "# zero out the lower diagonal", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.CLIP.dtype": [[331, 337], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'visual'", ")", ":", "\n", "            ", "return", "self", ".", "visual", ".", "conv1", ".", "weight", ".", "dtype", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "transformer", ".", "resblocks", "[", "0", "]", ".", "attn", ".", "in_proj_weight", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.CLIP.encode_image": [[338, 340], ["model.CLIP.visual", "image.type"], "methods", ["None"], ["", "", "def", "encode_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "self", ".", "visual", "(", "image", ".", "type", "(", "self", ".", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.CLIP.encode_text": [[341, 355], ["model.CLIP.token_embedding().type", "model.CLIP.permute", "model.CLIP.transformer", "model.CLIP.permute", "model.CLIP.ln_final().type", "model.CLIP.positional_embedding.type", "model.CLIP.token_embedding", "model.CLIP.ln_final", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "text.argmax"], "methods", ["None"], ["", "def", "encode_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "x", "=", "self", ".", "token_embedding", "(", "text", ")", ".", "type", "(", "self", ".", "dtype", ")", "# [batch_size, n_ctx, d_model]", "\n", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", ".", "type", "(", "self", ".", "dtype", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# NLD -> LND", "\n", "x", "=", "self", ".", "transformer", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# LND -> NLD", "\n", "x", "=", "self", ".", "ln_final", "(", "x", ")", ".", "type", "(", "self", ".", "dtype", ")", "\n", "\n", "# x.shape = [batch_size, n_ctx, transformer.width]", "\n", "# take features from the eot embedding (eot_token is the highest number in each sequence)", "\n", "x", "=", "x", "[", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "text", ".", "argmax", "(", "dim", "=", "-", "1", ")", "]", "@", "self", ".", "text_projection", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.CLIP.forward": [[356, 371], ["model.CLIP.encode_image", "model.CLIP.encode_text", "model.CLIP.logit_scale.exp", "model.CLIP.norm", "model.CLIP.norm", "model.CLIP.t", "model.CLIP.t"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.CLIP.encode_image", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.CLIP.encode_text", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm"], ["", "def", "forward", "(", "self", ",", "image", ",", "text", ")", ":", "\n", "        ", "image_features", "=", "self", ".", "encode_image", "(", "image", ")", "\n", "text_features", "=", "self", ".", "encode_text", "(", "text", ")", "\n", "\n", "# normalized features", "\n", "image_features", "=", "image_features", "/", "image_features", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "text_features", "=", "text_features", "/", "text_features", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# cosine similarity as logits", "\n", "logit_scale", "=", "self", ".", "logit_scale", ".", "exp", "(", ")", "\n", "logits_per_image", "=", "logit_scale", "*", "image_features", "@", "text_features", ".", "t", "(", ")", "\n", "logits_per_text", "=", "logit_scale", "*", "text_features", "@", "image_features", ".", "t", "(", ")", "\n", "\n", "# shape = [global_batch_size, global_batch_size]", "\n", "return", "logits_per_image", ",", "logits_per_text", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.convert_weights": [[373, 395], ["model.apply", "isinstance", "isinstance", "l.weight.data.half", "hasattr", "l.bias.data.half", "getattr", "getattr", "getattr.data.half", "getattr.data.half"], "function", ["None"], ["", "", "def", "convert_weights", "(", "model", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Convert applicable model parameters to fp16\"\"\"", "\n", "\n", "def", "_convert_weights_to_fp16", "(", "l", ")", ":", "\n", "        ", "if", "isinstance", "(", "l", ",", "(", "nn", ".", "Conv1d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "            ", "l", ".", "weight", ".", "data", "=", "l", ".", "weight", ".", "data", ".", "half", "(", ")", "\n", "if", "l", ".", "bias", "is", "not", "None", ":", "\n", "                ", "l", ".", "bias", ".", "data", "=", "l", ".", "bias", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "if", "isinstance", "(", "l", ",", "nn", ".", "MultiheadAttention", ")", ":", "\n", "            ", "for", "attr", "in", "[", "*", "[", "f\"{s}_proj_weight\"", "for", "s", "in", "[", "\"in\"", ",", "\"q\"", ",", "\"k\"", ",", "\"v\"", "]", "]", ",", "\"in_proj_bias\"", ",", "\"bias_k\"", ",", "\"bias_v\"", "]", ":", "\n", "                ", "tensor", "=", "getattr", "(", "l", ",", "attr", ")", "\n", "if", "tensor", "is", "not", "None", ":", "\n", "                    ", "tensor", ".", "data", "=", "tensor", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "", "for", "name", "in", "[", "\"text_projection\"", ",", "\"proj\"", "]", ":", "\n", "            ", "if", "hasattr", "(", "l", ",", "name", ")", ":", "\n", "                ", "attr", "=", "getattr", "(", "l", ",", "name", ")", "\n", "if", "attr", "is", "not", "None", ":", "\n", "                    ", "attr", ".", "data", "=", "attr", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "", "", "model", ".", "apply", "(", "_convert_weights_to_fp16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.build_model": [[397, 435], ["len", "model.CLIP", "model.convert_weights", "CLIP.load_state_dict", "CLIP.eval", "len", "round", "tuple", "round", "set", "len", "set", "state_dict.keys", "k.split", "k.startswith", "k.startswith", "k.endswith", "k.split", "k.startswith"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.model.convert_weights", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys"], ["", "def", "build_model", "(", "state_dict", ":", "dict", ")", ":", "\n", "    ", "vit", "=", "\"visual.proj\"", "in", "state_dict", "\n", "\n", "if", "vit", ":", "\n", "        ", "vision_width", "=", "state_dict", "[", "\"visual.conv1.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "vision_layers", "=", "len", "(", "[", "k", "for", "k", "in", "state_dict", ".", "keys", "(", ")", "if", "k", ".", "startswith", "(", "\"visual.\"", ")", "and", "k", ".", "endswith", "(", "\".attn.in_proj_weight\"", ")", "]", ")", "\n", "vision_patch_size", "=", "state_dict", "[", "\"visual.conv1.weight\"", "]", ".", "shape", "[", "-", "1", "]", "\n", "grid_size", "=", "round", "(", "(", "state_dict", "[", "\"visual.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "-", "1", ")", "**", "0.5", ")", "\n", "image_resolution", "=", "vision_patch_size", "*", "grid_size", "\n", "", "else", ":", "\n", "        ", "counts", ":", "list", "=", "[", "len", "(", "set", "(", "k", ".", "split", "(", "\".\"", ")", "[", "2", "]", "for", "k", "in", "state_dict", "if", "k", ".", "startswith", "(", "f\"visual.layer{b}\"", ")", ")", ")", "for", "b", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", "]", "\n", "vision_layers", "=", "tuple", "(", "counts", ")", "\n", "vision_width", "=", "state_dict", "[", "\"visual.layer1.0.conv1.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "output_width", "=", "round", "(", "(", "state_dict", "[", "\"visual.attnpool.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "-", "1", ")", "**", "0.5", ")", "\n", "vision_patch_size", "=", "None", "\n", "assert", "output_width", "**", "2", "+", "1", "==", "state_dict", "[", "\"visual.attnpool.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "\n", "image_resolution", "=", "output_width", "*", "32", "\n", "\n", "", "embed_dim", "=", "state_dict", "[", "\"text_projection\"", "]", ".", "shape", "[", "1", "]", "\n", "context_length", "=", "state_dict", "[", "\"positional_embedding\"", "]", ".", "shape", "[", "0", "]", "\n", "vocab_size", "=", "state_dict", "[", "\"token_embedding.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "transformer_width", "=", "state_dict", "[", "\"ln_final.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "transformer_heads", "=", "transformer_width", "//", "64", "\n", "transformer_layers", "=", "len", "(", "set", "(", "k", ".", "split", "(", "\".\"", ")", "[", "2", "]", "for", "k", "in", "state_dict", "if", "k", ".", "startswith", "(", "f\"transformer.resblocks\"", ")", ")", ")", "\n", "\n", "model", "=", "CLIP", "(", "\n", "embed_dim", ",", "\n", "image_resolution", ",", "vision_layers", ",", "vision_width", ",", "vision_patch_size", ",", "\n", "context_length", ",", "vocab_size", ",", "transformer_width", ",", "transformer_heads", ",", "transformer_layers", "\n", ")", "\n", "\n", "for", "key", "in", "[", "\"input_resolution\"", ",", "\"context_length\"", ",", "\"vocab_size\"", "]", ":", "\n", "        ", "if", "key", "in", "state_dict", ":", "\n", "            ", "del", "state_dict", "[", "key", "]", "\n", "\n", "", "", "convert_weights", "(", "model", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "model", ".", "eval", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.dalle.DALLE.__init__": [[20, 36], ["torch.nn.Module.__init__", "image_synthesis.utils.misc.instantiate_from_config", "image_synthesis.utils.misc.instantiate_from_config", "image_synthesis.utils.misc.instantiate_from_config"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "content_info", "=", "{", "'key'", ":", "'image'", "}", ",", "\n", "condition_info", "=", "{", "'key'", ":", "'text'", "}", ",", "\n", "content_codec_config", ",", "\n", "condition_codec_config", ",", "\n", "diffusion_config", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "content_info", "=", "content_info", "\n", "self", ".", "condition_info", "=", "condition_info", "\n", "self", ".", "content_codec", "=", "instantiate_from_config", "(", "content_codec_config", ")", "\n", "self", ".", "condition_codec", "=", "instantiate_from_config", "(", "condition_codec_config", ")", "\n", "self", ".", "transformer", "=", "instantiate_from_config", "(", "diffusion_config", ")", "\n", "self", ".", "truncation_forward", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.dalle.DALLE.parameters": [[37, 49], ["super().parameters", "name.split", "getattr().parameters", "getattr().parameters", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters"], ["", "def", "parameters", "(", "self", ",", "recurse", "=", "True", ",", "name", "=", "None", ")", ":", "\n", "        ", "if", "name", "is", "None", "or", "name", "==", "'none'", ":", "\n", "            ", "return", "super", "(", ")", ".", "parameters", "(", "recurse", "=", "recurse", ")", "\n", "", "else", ":", "\n", "            ", "names", "=", "name", ".", "split", "(", "'+'", ")", "\n", "params", "=", "[", "]", "\n", "for", "n", "in", "names", ":", "\n", "                ", "try", ":", "# the parameters() method is not overwritten for some classes", "\n", "                    ", "params", "+=", "getattr", "(", "self", ",", "name", ")", ".", "parameters", "(", "recurse", "=", "recurse", ",", "name", "=", "name", ")", "\n", "", "except", ":", "\n", "                    ", "params", "+=", "getattr", "(", "self", ",", "name", ")", ".", "parameters", "(", "recurse", "=", "recurse", ")", "\n", "", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.dalle.DALLE.device": [[50, 53], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.dalle.DALLE.get_ema_model": [[54, 56], ["None"], "methods", ["None"], ["", "def", "get_ema_model", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.dalle.DALLE.prepare_condition": [[57, 69], ["torch.no_grad", "torch.is_tensor", "dalle.DALLE.condition_codec.get_tokens", "cond.to.to.items", "cond.to.to.to", "torch.is_tensor", "v.to"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.get_tokens"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "prepare_condition", "(", "self", ",", "batch", ",", "condition", "=", "None", ")", ":", "\n", "        ", "cond_key", "=", "self", ".", "condition_info", "[", "'key'", "]", "\n", "cond", "=", "batch", "[", "cond_key", "]", "if", "condition", "is", "None", "else", "condition", "\n", "if", "torch", ".", "is_tensor", "(", "cond", ")", ":", "\n", "            ", "cond", "=", "cond", ".", "to", "(", "self", ".", "device", ")", "\n", "", "cond", "=", "self", ".", "condition_codec", ".", "get_tokens", "(", "cond", ")", "\n", "cond_", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "cond", ".", "items", "(", ")", ":", "\n", "            ", "v", "=", "v", ".", "to", "(", "self", ".", "device", ")", "if", "torch", ".", "is_tensor", "(", "v", ")", "else", "v", "\n", "cond_", "[", "'condition_'", "+", "k", "]", "=", "v", "\n", "", "return", "cond_", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.dalle.DALLE.prepare_content": [[70, 87], ["torch.cuda.amp.autocast", "torch.no_grad", "torch.is_tensor", "dalle.DALLE.items", "dalle.DALLE.to", "dalle.DALLE.content_codec.get_tokens", "dalle.DALLE.content_codec.get_tokens", "torch.is_tensor", "v.to"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.get_tokens", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.get_tokens"], ["", "@", "autocast", "(", "enabled", "=", "False", ")", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "prepare_content", "(", "self", ",", "batch", ",", "with_mask", "=", "False", ")", ":", "\n", "        ", "cont_key", "=", "self", ".", "content_info", "[", "'key'", "]", "\n", "cont", "=", "batch", "[", "cont_key", "]", "\n", "if", "torch", ".", "is_tensor", "(", "cont", ")", ":", "\n", "            ", "cont", "=", "cont", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "not", "with_mask", ":", "\n", "            ", "cont", "=", "self", ".", "content_codec", ".", "get_tokens", "(", "cont", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "batch", "[", "'mask'", ".", "format", "(", "cont_key", ")", "]", "\n", "cont", "=", "self", ".", "content_codec", ".", "get_tokens", "(", "cont", ",", "mask", ",", "enc_with_mask", "=", "False", ")", "\n", "", "cont_", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "cont", ".", "items", "(", ")", ":", "\n", "            ", "v", "=", "v", ".", "to", "(", "self", ".", "device", ")", "if", "torch", ".", "is_tensor", "(", "v", ")", "else", "v", "\n", "cont_", "[", "'content_'", "+", "k", "]", "=", "v", "\n", "", "return", "cont_", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.dalle.DALLE.prepare_input": [[88, 94], ["torch.cuda.amp.autocast", "torch.no_grad", "dalle.DALLE.prepare_condition", "dalle.DALLE.update", "dalle.DALLE.prepare_content"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_condition", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_content"], ["", "@", "autocast", "(", "enabled", "=", "False", ")", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "prepare_input", "(", "self", ",", "batch", ")", ":", "\n", "        ", "input", "=", "self", ".", "prepare_condition", "(", "batch", ")", "\n", "input", ".", "update", "(", "self", ".", "prepare_content", "(", "batch", ")", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.dalle.DALLE.p_sample_with_truncation": [[95, 104], ["float", "sample_type.replace", "func", "random.random", "func"], "methods", ["None"], ["", "def", "p_sample_with_truncation", "(", "self", ",", "func", ",", "sample_type", ")", ":", "\n", "        ", "truncation_rate", "=", "float", "(", "sample_type", ".", "replace", "(", "'q'", ",", "''", ")", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwards", ")", ":", "\n", "            ", "out", "=", "func", "(", "*", "args", ",", "**", "kwards", ")", "\n", "import", "random", "\n", "if", "random", ".", "random", "(", ")", "<", "truncation_rate", ":", "\n", "                ", "out", "=", "func", "(", "out", ",", "args", "[", "1", "]", ",", "args", "[", "2", "]", ",", "**", "kwards", ")", "\n", "", "return", "out", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.dalle.DALLE.predict_start_with_truncation": [[106, 138], ["int", "sample_type[].replace", "func", "func.topk", "torch.full_like", "torch.full_like.scatter_", "float", "print", "sample_type[].replace", "func", "torch.sort", "torch.exp", "torch.exp.cumsum", "torch.full_like", "torch.cat", "temp3.gather", "indices.argsort", "temp3.gather.float", "temp3.gather.float"], "methods", ["None"], ["", "def", "predict_start_with_truncation", "(", "self", ",", "func", ",", "sample_type", ")", ":", "\n", "        ", "if", "sample_type", "[", "-", "1", "]", "==", "'p'", ":", "\n", "            ", "truncation_k", "=", "int", "(", "sample_type", "[", ":", "-", "1", "]", ".", "replace", "(", "'top'", ",", "''", ")", ")", "\n", "content_codec", "=", "self", ".", "content_codec", "\n", "save_path", "=", "self", ".", "this_save_path", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwards", ")", ":", "\n", "                ", "out", "=", "func", "(", "*", "args", ",", "**", "kwards", ")", "\n", "val", ",", "ind", "=", "out", ".", "topk", "(", "k", "=", "truncation_k", ",", "dim", "=", "1", ")", "\n", "probs", "=", "torch", ".", "full_like", "(", "out", ",", "-", "70", ")", "\n", "probs", ".", "scatter_", "(", "1", ",", "ind", ",", "val", ")", "\n", "return", "probs", "\n", "", "return", "wrapper", "\n", "", "elif", "sample_type", "[", "-", "1", "]", "==", "'r'", ":", "\n", "            ", "truncation_r", "=", "float", "(", "sample_type", "[", ":", "-", "1", "]", ".", "replace", "(", "'top'", ",", "''", ")", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwards", ")", ":", "\n", "                ", "out", "=", "func", "(", "*", "args", ",", "**", "kwards", ")", "\n", "# notice for different batches, out are same, we do it on out[0]", "\n", "temp", ",", "indices", "=", "torch", ".", "sort", "(", "out", ",", "1", ",", "descending", "=", "True", ")", "\n", "temp1", "=", "torch", ".", "exp", "(", "temp", ")", "\n", "temp2", "=", "temp1", ".", "cumsum", "(", "dim", "=", "1", ")", "\n", "temp3", "=", "temp2", "<", "truncation_r", "\n", "new_temp", "=", "torch", ".", "full_like", "(", "temp3", "[", ":", ",", "0", ":", "1", ",", ":", "]", ",", "True", ")", "\n", "temp6", "=", "torch", ".", "cat", "(", "(", "new_temp", ",", "temp3", ")", ",", "dim", "=", "1", ")", "\n", "temp3", "=", "temp6", "[", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "temp4", "=", "temp3", ".", "gather", "(", "1", ",", "indices", ".", "argsort", "(", "1", ")", ")", "\n", "temp5", "=", "temp4", ".", "float", "(", ")", "*", "out", "+", "(", "1", "-", "temp4", ".", "float", "(", ")", ")", "*", "(", "-", "70", ")", "\n", "probs", "=", "temp5", "\n", "return", "probs", "\n", "", "return", "wrapper", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"wrong sample type\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.dalle.DALLE.generate_content": [[139, 206], ["torch.no_grad", "dalle.DALLE.eval", "dalle.DALLE.content_codec.decode", "dalle.DALLE.train", "dalle.DALLE.prepare_condition", "dalle.DALLE.prepare_condition", "dalle.DALLE.keys", "len", "dalle.DALLE.predict_start_with_truncation", "dalle.DALLE.transformer.sample_fast", "dalle.DALLE.transformer.sample", "sample_type.split", "dalle.DALLE.p_sample_with_truncation", "len", "torch.cat", "sample_type.split", "sample_type.split", "dalle.DALLE.get", "dalle.DALLE.get", "int", "dalle.DALLE.get", "dalle.DALLE.get", "sample_type.split", "sample_type.split", "sample_type.split", "sample_type.split", "range", "sample_type.split"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_condition", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_condition", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.predict_start_with_truncation", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformers.diffusion_transformer_amp.DiffusionTransformer.sample_fast", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.dalle.DALLE.p_sample_with_truncation", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate_content", "(", "\n", "self", ",", "\n", "*", ",", "\n", "batch", ",", "\n", "condition", "=", "None", ",", "\n", "filter_ratio", "=", "0.5", ",", "\n", "temperature", "=", "1.0", ",", "\n", "content_ratio", "=", "0.0", ",", "\n", "replicate", "=", "1", ",", "\n", "return_att_weight", "=", "False", ",", "\n", "sample_type", "=", "\"top0.85r\"", ",", "\n", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "if", "condition", "is", "None", ":", "\n", "            ", "condition", "=", "self", ".", "prepare_condition", "(", "batch", "=", "batch", ")", "\n", "", "else", ":", "\n", "            ", "condition", "=", "self", ".", "prepare_condition", "(", "batch", "=", "None", ",", "condition", "=", "condition", ")", "\n", "\n", "", "if", "replicate", "!=", "1", ":", "\n", "            ", "for", "k", "in", "condition", ".", "keys", "(", ")", ":", "\n", "                ", "if", "condition", "[", "k", "]", "is", "not", "None", ":", "\n", "                    ", "condition", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "condition", "[", "k", "]", "for", "_", "in", "range", "(", "replicate", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "", "content_token", "=", "None", "\n", "\n", "if", "len", "(", "sample_type", ".", "split", "(", "','", ")", ")", ">", "1", ":", "\n", "            ", "if", "sample_type", ".", "split", "(", "','", ")", "[", "1", "]", "[", ":", "1", "]", "==", "'q'", ":", "\n", "                ", "self", ".", "transformer", ".", "p_sample", "=", "self", ".", "p_sample_with_truncation", "(", "self", ".", "transformer", ".", "p_sample", ",", "sample_type", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "", "", "if", "sample_type", ".", "split", "(", "','", ")", "[", "0", "]", "[", ":", "3", "]", "==", "\"top\"", "and", "self", ".", "truncation_forward", "==", "False", ":", "\n", "            ", "self", ".", "transformer", ".", "predict_start", "=", "self", ".", "predict_start_with_truncation", "(", "self", ".", "transformer", ".", "predict_start", ",", "sample_type", ".", "split", "(", "','", ")", "[", "0", "]", ")", "\n", "self", ".", "truncation_forward", "=", "True", "\n", "\n", "", "if", "len", "(", "sample_type", ".", "split", "(", "','", ")", ")", "==", "2", "and", "sample_type", ".", "split", "(", "','", ")", "[", "1", "]", "[", ":", "4", "]", "==", "'fast'", ":", "\n", "            ", "trans_out", "=", "self", ".", "transformer", ".", "sample_fast", "(", "condition_token", "=", "condition", "[", "'condition_token'", "]", ",", "\n", "condition_mask", "=", "condition", ".", "get", "(", "'condition_mask'", ",", "None", ")", ",", "\n", "condition_embed", "=", "condition", ".", "get", "(", "'condition_embed_token'", ",", "None", ")", ",", "\n", "content_token", "=", "content_token", ",", "\n", "filter_ratio", "=", "filter_ratio", ",", "\n", "temperature", "=", "temperature", ",", "\n", "return_att_weight", "=", "return_att_weight", ",", "\n", "return_logits", "=", "False", ",", "\n", "print_log", "=", "False", ",", "\n", "sample_type", "=", "sample_type", ",", "\n", "skip_step", "=", "int", "(", "sample_type", ".", "split", "(", "','", ")", "[", "1", "]", "[", "4", ":", "]", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "trans_out", "=", "self", ".", "transformer", ".", "sample", "(", "condition_token", "=", "condition", "[", "'condition_token'", "]", ",", "\n", "condition_mask", "=", "condition", ".", "get", "(", "'condition_mask'", ",", "None", ")", ",", "\n", "condition_embed", "=", "condition", ".", "get", "(", "'condition_embed_token'", ",", "None", ")", ",", "\n", "content_token", "=", "content_token", ",", "\n", "filter_ratio", "=", "filter_ratio", ",", "\n", "temperature", "=", "temperature", ",", "\n", "return_att_weight", "=", "return_att_weight", ",", "\n", "return_logits", "=", "False", ",", "\n", "print_log", "=", "False", ",", "\n", "sample_type", "=", "sample_type", ")", "\n", "\n", "\n", "", "content", "=", "self", ".", "content_codec", ".", "decode", "(", "trans_out", "[", "'content_token'", "]", ")", "#(8,1024)->(8,3,256,256)", "\n", "self", ".", "train", "(", ")", "\n", "out", "=", "{", "\n", "'content'", ":", "content", "\n", "}", "\n", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.dalle.DALLE.reconstruct": [[207, 221], ["torch.no_grad", "torch.is_tensor", "dalle.DALLE.content_codec.get_tokens", "dalle.DALLE.items", "dalle.DALLE.content_codec.decode", "input.to.to.to", "torch.is_tensor", "v.to"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.get_tokens", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "reconstruct", "(", "\n", "self", ",", "\n", "input", "\n", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "input", ")", ":", "\n", "            ", "input", "=", "input", ".", "to", "(", "self", ".", "device", ")", "\n", "", "cont", "=", "self", ".", "content_codec", ".", "get_tokens", "(", "input", ")", "\n", "cont_", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "cont", ".", "items", "(", ")", ":", "\n", "            ", "v", "=", "v", ".", "to", "(", "self", ".", "device", ")", "if", "torch", ".", "is_tensor", "(", "v", ")", "else", "v", "\n", "cont_", "[", "'content_'", "+", "k", "]", "=", "v", "\n", "", "rec", "=", "self", ".", "content_codec", ".", "decode", "(", "cont_", "[", "'content_token'", "]", ")", "\n", "return", "rec", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.dalle.DALLE.sample": [[222, 290], ["torch.no_grad", "dalle.DALLE.eval", "dalle.DALLE.prepare_condition", "dalle.DALLE.prepare_content", "dalle.DALLE.train", "output.update", "dalle.DALLE.content_codec.decode", "int", "dalle.DALLE.content_codec.decode", "dalle.DALLE.transformer.sample_debug", "dalle.DALLE.transformer.sample", "content_att.view", "dalle.DALLE.get", "dalle.DALLE.get", "dalle.DALLE.get", "dalle.DALLE.get", "dalle.DALLE.get", "dalle.DALLE.get"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_condition", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_content", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample", "(", "\n", "self", ",", "\n", "batch", ",", "\n", "clip", "=", "None", ",", "\n", "temperature", "=", "1.", ",", "\n", "return_rec", "=", "True", ",", "\n", "filter_ratio", "=", "[", "0", ",", "0.5", ",", "1.0", "]", ",", "\n", "content_ratio", "=", "[", "1", "]", ",", "# the ratio to keep the encoded content tokens", "\n", "return_att_weight", "=", "False", ",", "\n", "return_logits", "=", "False", ",", "\n", "sample_type", "=", "\"normal\"", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "condition", "=", "self", ".", "prepare_condition", "(", "batch", ")", "\n", "content", "=", "self", ".", "prepare_content", "(", "batch", ")", "\n", "\n", "content_samples", "=", "{", "'input_image'", ":", "batch", "[", "self", ".", "content_info", "[", "'key'", "]", "]", "}", "\n", "if", "return_rec", ":", "\n", "            ", "content_samples", "[", "'reconstruction_image'", "]", "=", "self", ".", "content_codec", ".", "decode", "(", "content", "[", "'content_token'", "]", ")", "\n", "\n", "", "for", "fr", "in", "filter_ratio", ":", "\n", "            ", "for", "cr", "in", "content_ratio", ":", "\n", "                ", "num_content_tokens", "=", "int", "(", "(", "content", "[", "'content_token'", "]", ".", "shape", "[", "1", "]", "*", "cr", ")", ")", "\n", "if", "num_content_tokens", "<", "0", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "content_token", "=", "content", "[", "'content_token'", "]", "[", ":", ",", ":", "num_content_tokens", "]", "\n", "", "if", "sample_type", "==", "'debug'", ":", "\n", "                    ", "trans_out", "=", "self", ".", "transformer", ".", "sample_debug", "(", "condition_token", "=", "condition", "[", "'condition_token'", "]", ",", "\n", "condition_mask", "=", "condition", ".", "get", "(", "'condition_mask'", ",", "None", ")", ",", "\n", "condition_embed", "=", "condition", ".", "get", "(", "'condition_embed_token'", ",", "None", ")", ",", "\n", "content_token", "=", "content_token", ",", "\n", "filter_ratio", "=", "fr", ",", "\n", "temperature", "=", "temperature", ",", "\n", "return_att_weight", "=", "return_att_weight", ",", "\n", "return_logits", "=", "return_logits", ",", "\n", "content_logits", "=", "content", ".", "get", "(", "'content_logits'", ",", "None", ")", ",", "\n", "sample_type", "=", "sample_type", ",", "\n", "**", "kwargs", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "trans_out", "=", "self", ".", "transformer", ".", "sample", "(", "condition_token", "=", "condition", "[", "'condition_token'", "]", ",", "\n", "condition_mask", "=", "condition", ".", "get", "(", "'condition_mask'", ",", "None", ")", ",", "\n", "condition_embed", "=", "condition", ".", "get", "(", "'condition_embed_token'", ",", "None", ")", ",", "\n", "content_token", "=", "content_token", ",", "\n", "filter_ratio", "=", "fr", ",", "\n", "temperature", "=", "temperature", ",", "\n", "return_att_weight", "=", "return_att_weight", ",", "\n", "return_logits", "=", "return_logits", ",", "\n", "content_logits", "=", "content", ".", "get", "(", "'content_logits'", ",", "None", ")", ",", "\n", "sample_type", "=", "sample_type", ",", "\n", "**", "kwargs", ")", "\n", "\n", "", "content_samples", "[", "'cond1_cont{}_fr{}_image'", ".", "format", "(", "cr", ",", "fr", ")", "]", "=", "self", ".", "content_codec", ".", "decode", "(", "trans_out", "[", "'content_token'", "]", ")", "\n", "\n", "if", "return_att_weight", ":", "\n", "                    ", "content_samples", "[", "'cond1_cont{}_fr{}_image_condition_attention'", ".", "format", "(", "cr", ",", "fr", ")", "]", "=", "trans_out", "[", "'condition_attention'", "]", "# B x Lt x Ld", "\n", "content_att", "=", "trans_out", "[", "'content_attention'", "]", "\n", "shape", "=", "*", "content_att", ".", "shape", "[", ":", "-", "1", "]", ",", "self", ".", "content", ".", "token_shape", "[", "0", "]", ",", "self", ".", "content", ".", "token_shape", "[", "1", "]", "\n", "content_samples", "[", "'cond1_cont{}_fr{}_image_content_attention'", ".", "format", "(", "cr", ",", "fr", ")", "]", "=", "content_att", ".", "view", "(", "*", "shape", ")", "# B x Lt x Lt -> B x Lt x H x W", "\n", "", "if", "return_logits", ":", "\n", "                    ", "content_samples", "[", "'logits'", "]", "=", "trans_out", "[", "'logits'", "]", "\n", "", "", "", "self", ".", "train", "(", ")", "\n", "output", "=", "{", "'condition'", ":", "batch", "[", "self", ".", "condition_info", "[", "'key'", "]", "]", "}", "\n", "output", ".", "update", "(", "content_samples", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.dalle.DALLE.forward": [[291, 300], ["dalle.DALLE.prepare_input", "dalle.DALLE.transformer"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_input"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "batch", ",", "\n", "name", "=", "'none'", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "input", "=", "self", ".", "prepare_input", "(", "batch", ")", "\n", "output", "=", "self", ".", "transformer", "(", "input", ",", "**", "kwargs", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.unconditional_dalle.UC_DALLE.__init__": [[20, 32], ["torch.nn.Module.__init__", "image_synthesis.utils.misc.instantiate_from_config", "image_synthesis.utils.misc.instantiate_from_config"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "content_info", "=", "{", "'key'", ":", "'image'", "}", ",", "\n", "content_codec_config", ",", "\n", "diffusion_config", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "content_info", "=", "content_info", "\n", "self", ".", "content_codec", "=", "instantiate_from_config", "(", "content_codec_config", ")", "\n", "self", ".", "transformer", "=", "instantiate_from_config", "(", "diffusion_config", ")", "\n", "self", ".", "truncation_forward", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.unconditional_dalle.UC_DALLE.parameters": [[33, 45], ["super().parameters", "name.split", "getattr().parameters", "getattr().parameters", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters"], ["", "def", "parameters", "(", "self", ",", "recurse", "=", "True", ",", "name", "=", "None", ")", ":", "\n", "        ", "if", "name", "is", "None", "or", "name", "==", "'none'", ":", "\n", "            ", "return", "super", "(", ")", ".", "parameters", "(", "recurse", "=", "recurse", ")", "\n", "", "else", ":", "\n", "            ", "names", "=", "name", ".", "split", "(", "'+'", ")", "\n", "params", "=", "[", "]", "\n", "for", "n", "in", "names", ":", "\n", "                ", "try", ":", "# the parameters() method is not overwritten for some classes", "\n", "                    ", "params", "+=", "getattr", "(", "self", ",", "name", ")", ".", "parameters", "(", "recurse", "=", "recurse", ",", "name", "=", "name", ")", "\n", "", "except", ":", "\n", "                    ", "params", "+=", "getattr", "(", "self", ",", "name", ")", ".", "parameters", "(", "recurse", "=", "recurse", ")", "\n", "", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.unconditional_dalle.UC_DALLE.device": [[46, 49], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.unconditional_dalle.UC_DALLE.get_ema_model": [[50, 52], ["None"], "methods", ["None"], ["", "def", "get_ema_model", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.unconditional_dalle.UC_DALLE.prepare_content": [[53, 70], ["torch.cuda.amp.autocast", "torch.no_grad", "torch.is_tensor", "unconditional_dalle.UC_DALLE.items", "unconditional_dalle.UC_DALLE.to", "unconditional_dalle.UC_DALLE.content_codec.get_tokens", "unconditional_dalle.UC_DALLE.content_codec.get_tokens", "torch.is_tensor", "v.to"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.get_tokens", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.get_tokens"], ["", "@", "autocast", "(", "enabled", "=", "False", ")", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "prepare_content", "(", "self", ",", "batch", ",", "with_mask", "=", "False", ")", ":", "\n", "        ", "cont_key", "=", "self", ".", "content_info", "[", "'key'", "]", "\n", "cont", "=", "batch", "[", "cont_key", "]", "\n", "if", "torch", ".", "is_tensor", "(", "cont", ")", ":", "\n", "            ", "cont", "=", "cont", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "not", "with_mask", ":", "\n", "            ", "cont", "=", "self", ".", "content_codec", ".", "get_tokens", "(", "cont", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "batch", "[", "'mask'", ".", "format", "(", "cont_key", ")", "]", "\n", "cont", "=", "self", ".", "content_codec", ".", "get_tokens", "(", "cont", ",", "mask", ",", "enc_with_mask", "=", "False", ")", "\n", "", "cont_", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "cont", ".", "items", "(", ")", ":", "\n", "            ", "v", "=", "v", ".", "to", "(", "self", ".", "device", ")", "if", "torch", ".", "is_tensor", "(", "v", ")", "else", "v", "\n", "cont_", "[", "'content_'", "+", "k", "]", "=", "v", "\n", "", "return", "cont_", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.unconditional_dalle.UC_DALLE.prepare_input": [[71, 75], ["torch.no_grad", "unconditional_dalle.UC_DALLE.prepare_content"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_content"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "prepare_input", "(", "self", ",", "batch", ")", ":", "\n", "        ", "input", "=", "self", ".", "prepare_content", "(", "batch", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.unconditional_dalle.UC_DALLE.predict_start_with_truncation": [[76, 106], ["int", "sample_type[].replace", "func", "func.topk", "torch.full_like", "torch.full_like.scatter_", "float", "print", "sample_type[].replace", "func", "torch.sort", "torch.exp", "torch.exp.cumsum", "torch.full_like", "torch.cat", "temp3.gather", "indices.argsort", "temp3.gather.float", "temp3.gather.float"], "methods", ["None"], ["", "def", "predict_start_with_truncation", "(", "self", ",", "func", ",", "sample_type", ")", ":", "\n", "        ", "if", "sample_type", "[", "-", "1", "]", "==", "'p'", ":", "\n", "            ", "truncation_k", "=", "int", "(", "sample_type", "[", ":", "-", "1", "]", ".", "replace", "(", "'top'", ",", "''", ")", ")", "\n", "content_codec", "=", "self", ".", "content_codec", "\n", "save_path", "=", "self", ".", "this_save_path", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwards", ")", ":", "\n", "                ", "out", "=", "func", "(", "*", "args", ",", "**", "kwards", ")", "\n", "val", ",", "ind", "=", "out", ".", "topk", "(", "k", "=", "truncation_k", ",", "dim", "=", "1", ")", "\n", "probs", "=", "torch", ".", "full_like", "(", "out", ",", "-", "70", ")", "\n", "probs", ".", "scatter_", "(", "1", ",", "ind", ",", "val", ")", "\n", "return", "probs", "\n", "", "return", "wrapper", "\n", "", "elif", "sample_type", "[", "-", "1", "]", "==", "'r'", ":", "\n", "            ", "truncation_r", "=", "float", "(", "sample_type", "[", ":", "-", "1", "]", ".", "replace", "(", "'top'", ",", "''", ")", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwards", ")", ":", "\n", "                ", "out", "=", "func", "(", "*", "args", ",", "**", "kwards", ")", "\n", "temp", ",", "indices", "=", "torch", ".", "sort", "(", "out", ",", "1", ",", "descending", "=", "True", ")", "\n", "temp1", "=", "torch", ".", "exp", "(", "temp", ")", "\n", "temp2", "=", "temp1", ".", "cumsum", "(", "dim", "=", "1", ")", "\n", "temp3", "=", "temp2", "<", "truncation_r", "\n", "new_temp", "=", "torch", ".", "full_like", "(", "temp3", "[", ":", ",", "0", ":", "1", ",", ":", "]", ",", "True", ")", "\n", "temp6", "=", "torch", ".", "cat", "(", "(", "new_temp", ",", "temp3", ")", ",", "dim", "=", "1", ")", "\n", "temp3", "=", "temp6", "[", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "temp4", "=", "temp3", ".", "gather", "(", "1", ",", "indices", ".", "argsort", "(", "1", ")", ")", "\n", "temp5", "=", "temp4", ".", "float", "(", ")", "*", "out", "+", "(", "1", "-", "temp4", ".", "float", "(", ")", ")", "*", "(", "-", "70", ")", "\n", "probs", "=", "temp5", "\n", "return", "probs", "\n", "", "return", "wrapper", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"wrong sample type\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.unconditional_dalle.UC_DALLE.generate_content": [[108, 147], ["torch.no_grad", "unconditional_dalle.UC_DALLE.eval", "unconditional_dalle.UC_DALLE.transformer.sample", "unconditional_dalle.UC_DALLE.content_codec.decode", "unconditional_dalle.UC_DALLE.train", "unconditional_dalle.UC_DALLE.predict_start_with_truncation", "sample_type.split", "sample_type.split"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.predict_start_with_truncation"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate_content", "(", "\n", "self", ",", "\n", "*", ",", "\n", "batch", ",", "\n", "filter_ratio", "=", "0.5", ",", "\n", "temperature", "=", "1.0", ",", "\n", "content_ratio", "=", "0.0", ",", "\n", "replicate", "=", "1", ",", "\n", "return_att_weight", "=", "False", ",", "\n", "sample_type", "=", "\"normal\"", ",", "\n", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "\n", "content_token", "=", "None", "\n", "\n", "if", "sample_type", ".", "split", "(", "','", ")", "[", "0", "]", "[", ":", "3", "]", "==", "\"top\"", "and", "self", ".", "truncation_forward", "==", "False", ":", "\n", "            ", "self", ".", "transformer", ".", "predict_start", "=", "self", ".", "predict_start_with_truncation", "(", "self", ".", "transformer", ".", "predict_start", ",", "sample_type", ".", "split", "(", "','", ")", "[", "0", "]", ")", "\n", "self", ".", "truncation_forward", "=", "True", "\n", "\n", "", "trans_out", "=", "self", ".", "transformer", ".", "sample", "(", "condition_token", "=", "None", ",", "\n", "condition_mask", "=", "None", ",", "\n", "condition_embed", "=", "None", ",", "\n", "content_token", "=", "content_token", ",", "\n", "filter_ratio", "=", "filter_ratio", ",", "\n", "temperature", "=", "temperature", ",", "\n", "return_att_weight", "=", "return_att_weight", ",", "\n", "return_logits", "=", "False", ",", "\n", "print_log", "=", "False", ",", "\n", "sample_type", "=", "sample_type", ",", "\n", "batch_size", "=", "replicate", ")", "\n", "\n", "content", "=", "self", ".", "content_codec", ".", "decode", "(", "trans_out", "[", "'content_token'", "]", ")", "#(8,1024)->(8,3,256,256)", "\n", "self", ".", "train", "(", ")", "\n", "out", "=", "{", "\n", "'content'", ":", "content", "\n", "}", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.unconditional_dalle.UC_DALLE.reconstruct": [[148, 162], ["torch.no_grad", "torch.is_tensor", "unconditional_dalle.UC_DALLE.content_codec.get_tokens", "unconditional_dalle.UC_DALLE.items", "unconditional_dalle.UC_DALLE.content_codec.decode", "input.to.to.to", "torch.is_tensor", "v.to"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.get_tokens", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "reconstruct", "(", "\n", "self", ",", "\n", "input", "\n", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "input", ")", ":", "\n", "            ", "input", "=", "input", ".", "to", "(", "self", ".", "device", ")", "\n", "", "cont", "=", "self", ".", "content_codec", ".", "get_tokens", "(", "input", ")", "\n", "cont_", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "cont", ".", "items", "(", ")", ":", "\n", "            ", "v", "=", "v", ".", "to", "(", "self", ".", "device", ")", "if", "torch", ".", "is_tensor", "(", "v", ")", "else", "v", "\n", "cont_", "[", "'content_'", "+", "k", "]", "=", "v", "\n", "", "rec", "=", "self", ".", "content_codec", ".", "decode", "(", "cont_", "[", "'content_token'", "]", ")", "\n", "return", "rec", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.unconditional_dalle.UC_DALLE.sample": [[163, 215], ["torch.no_grad", "unconditional_dalle.UC_DALLE.eval", "unconditional_dalle.UC_DALLE.prepare_content", "unconditional_dalle.UC_DALLE.train", "output.update", "unconditional_dalle.UC_DALLE.content_codec.decode", "int", "unconditional_dalle.UC_DALLE.transformer.sample", "unconditional_dalle.UC_DALLE.content_codec.decode", "unconditional_dalle.UC_DALLE.get"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_content", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample", "(", "\n", "self", ",", "\n", "batch", ",", "\n", "clip", "=", "None", ",", "\n", "temperature", "=", "1.", ",", "\n", "return_rec", "=", "True", ",", "\n", "filter_ratio", "=", "[", "0", "]", ",", "\n", "content_ratio", "=", "[", "1", "]", ",", "# the ratio to keep the encoded content tokens", "\n", "return_att_weight", "=", "False", ",", "\n", "return_logits", "=", "False", ",", "\n", "sample_type", "=", "\"normal\"", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "content", "=", "self", ".", "prepare_content", "(", "batch", ")", "\n", "\n", "content_samples", "=", "{", "'input_image'", ":", "batch", "[", "self", ".", "content_info", "[", "'key'", "]", "]", "}", "\n", "if", "return_rec", ":", "\n", "            ", "content_samples", "[", "'reconstruction_image'", "]", "=", "self", ".", "content_codec", ".", "decode", "(", "content", "[", "'content_token'", "]", ")", "\n", "\n", "# import pdb; pdb.set_trace()", "\n", "\n", "", "for", "fr", "in", "filter_ratio", ":", "\n", "            ", "for", "cr", "in", "content_ratio", ":", "\n", "                ", "num_content_tokens", "=", "int", "(", "(", "content", "[", "'content_token'", "]", ".", "shape", "[", "1", "]", "*", "cr", ")", ")", "\n", "if", "num_content_tokens", "<", "0", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "content_token", "=", "content", "[", "'content_token'", "]", "[", ":", ",", ":", "num_content_tokens", "]", "\n", "\n", "", "trans_out", "=", "self", ".", "transformer", ".", "sample", "(", "condition_token", "=", "None", ",", "\n", "condition_mask", "=", "None", ",", "\n", "condition_embed", "=", "None", ",", "\n", "content_token", "=", "content_token", ",", "\n", "filter_ratio", "=", "fr", ",", "\n", "temperature", "=", "temperature", ",", "\n", "return_att_weight", "=", "return_att_weight", ",", "\n", "return_logits", "=", "return_logits", ",", "\n", "content_logits", "=", "content", ".", "get", "(", "'content_logits'", ",", "None", ")", ",", "\n", "sample_type", "=", "sample_type", ",", "\n", "batch_size", "=", "batch", "[", "self", ".", "content_info", "[", "'key'", "]", "]", ".", "shape", "[", "0", "]", ",", "\n", "**", "kwargs", ")", "\n", "\n", "content_samples", "[", "'cond1_cont{}_fr{}_image'", ".", "format", "(", "cr", ",", "fr", ")", "]", "=", "self", ".", "content_codec", ".", "decode", "(", "trans_out", "[", "'content_token'", "]", ")", "\n", "\n", "if", "return_logits", ":", "\n", "                    ", "content_samples", "[", "'logits'", "]", "=", "trans_out", "[", "'logits'", "]", "\n", "", "", "", "self", ".", "train", "(", ")", "\n", "output", "=", "{", "}", "\n", "output", ".", "update", "(", "content_samples", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.unconditional_dalle.UC_DALLE.forward": [[216, 225], ["unconditional_dalle.UC_DALLE.prepare_input", "unconditional_dalle.UC_DALLE.transformer"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_input"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "batch", ",", "\n", "name", "=", "'none'", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "input", "=", "self", ".", "prepare_input", "(", "batch", ")", "\n", "output", "=", "self", ".", "transformer", "(", "input", ",", "**", "kwargs", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.__init__": [[20, 34], ["torch.nn.Module.__init__", "image_synthesis.utils.misc.instantiate_from_config", "image_synthesis.utils.misc.instantiate_from_config"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "content_info", "=", "{", "'key'", ":", "'image'", "}", ",", "\n", "condition_info", "=", "{", "'key'", ":", "'label'", "}", ",", "\n", "content_codec_config", ",", "\n", "diffusion_config", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "content_info", "=", "content_info", "\n", "self", ".", "condition_info", "=", "condition_info", "\n", "self", ".", "content_codec", "=", "instantiate_from_config", "(", "content_codec_config", ")", "\n", "self", ".", "transformer", "=", "instantiate_from_config", "(", "diffusion_config", ")", "\n", "self", ".", "truncation_forward", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters": [[35, 48], ["super().parameters", "name.split", "getattr().parameters", "getattr().parameters", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters"], ["", "def", "parameters", "(", "self", ",", "recurse", "=", "True", ",", "name", "=", "None", ")", ":", "\n", "# return super().parameters(recurse=True)", "\n", "        ", "if", "name", "is", "None", "or", "name", "==", "'none'", ":", "\n", "            ", "return", "super", "(", ")", ".", "parameters", "(", "recurse", "=", "recurse", ")", "\n", "", "else", ":", "\n", "            ", "names", "=", "name", ".", "split", "(", "'+'", ")", "\n", "params", "=", "[", "]", "\n", "for", "n", "in", "names", ":", "\n", "                ", "try", ":", "# the parameters() method is not overwritten for some classes", "\n", "                    ", "params", "+=", "getattr", "(", "self", ",", "name", ")", ".", "parameters", "(", "recurse", "=", "recurse", ",", "name", "=", "name", ")", "\n", "", "except", ":", "\n", "                    ", "params", "+=", "getattr", "(", "self", ",", "name", ")", ".", "parameters", "(", "recurse", "=", "recurse", ")", "\n", "", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.device": [[49, 52], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.get_ema_model": [[53, 55], ["None"], "methods", ["None"], ["", "def", "get_ema_model", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_condition": [[56, 65], ["torch.no_grad", "torch.is_tensor", "cond.to.to.to"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "prepare_condition", "(", "self", ",", "batch", ")", ":", "\n", "        ", "cond_key", "=", "self", ".", "condition_info", "[", "'key'", "]", "\n", "cond", "=", "batch", "[", "cond_key", "]", "\n", "if", "torch", ".", "is_tensor", "(", "cond", ")", ":", "\n", "            ", "cond", "=", "cond", ".", "to", "(", "self", ".", "device", ")", "\n", "", "cond_", "=", "{", "}", "\n", "cond_", "[", "'condition_token'", "]", "=", "cond", "\n", "return", "cond_", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_content": [[66, 83], ["torch.cuda.amp.autocast", "torch.no_grad", "torch.is_tensor", "conditional_dalle.C_DALLE.items", "conditional_dalle.C_DALLE.to", "conditional_dalle.C_DALLE.content_codec.get_tokens", "conditional_dalle.C_DALLE.content_codec.get_tokens", "torch.is_tensor", "v.to"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.get_tokens", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.get_tokens"], ["", "@", "autocast", "(", "enabled", "=", "False", ")", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "prepare_content", "(", "self", ",", "batch", ",", "with_mask", "=", "False", ")", ":", "\n", "        ", "cont_key", "=", "self", ".", "content_info", "[", "'key'", "]", "\n", "cont", "=", "batch", "[", "cont_key", "]", "\n", "if", "torch", ".", "is_tensor", "(", "cont", ")", ":", "\n", "            ", "cont", "=", "cont", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "not", "with_mask", ":", "\n", "            ", "cont", "=", "self", ".", "content_codec", ".", "get_tokens", "(", "cont", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "batch", "[", "'mask'", ".", "format", "(", "cont_key", ")", "]", "\n", "cont", "=", "self", ".", "content_codec", ".", "get_tokens", "(", "cont", ",", "mask", ",", "enc_with_mask", "=", "False", ")", "\n", "", "cont_", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "cont", ".", "items", "(", ")", ":", "\n", "            ", "v", "=", "v", ".", "to", "(", "self", ".", "device", ")", "if", "torch", ".", "is_tensor", "(", "v", ")", "else", "v", "\n", "cont_", "[", "'content_'", "+", "k", "]", "=", "v", "\n", "", "return", "cont_", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_input": [[84, 89], ["torch.no_grad", "conditional_dalle.C_DALLE.prepare_condition", "conditional_dalle.C_DALLE.update", "conditional_dalle.C_DALLE.prepare_content"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_condition", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_content"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "prepare_input", "(", "self", ",", "batch", ")", ":", "\n", "        ", "input", "=", "self", ".", "prepare_condition", "(", "batch", ")", "\n", "input", ".", "update", "(", "self", ".", "prepare_content", "(", "batch", ")", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.predict_start_with_truncation": [[90, 120], ["int", "sample_type[].replace", "func", "func.topk", "torch.full_like", "torch.full_like.scatter_", "float", "print", "sample_type[].replace", "func", "torch.sort", "torch.exp", "torch.exp.cumsum", "torch.full_like", "torch.cat", "temp3.gather", "indices.argsort", "temp3.gather.float", "temp3.gather.float"], "methods", ["None"], ["", "def", "predict_start_with_truncation", "(", "self", ",", "func", ",", "sample_type", ")", ":", "\n", "        ", "if", "sample_type", "[", "-", "1", "]", "==", "'p'", ":", "\n", "            ", "truncation_k", "=", "int", "(", "sample_type", "[", ":", "-", "1", "]", ".", "replace", "(", "'top'", ",", "''", ")", ")", "\n", "content_codec", "=", "self", ".", "content_codec", "\n", "save_path", "=", "self", ".", "this_save_path", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwards", ")", ":", "\n", "                ", "out", "=", "func", "(", "*", "args", ",", "**", "kwards", ")", "\n", "val", ",", "ind", "=", "out", ".", "topk", "(", "k", "=", "truncation_k", ",", "dim", "=", "1", ")", "\n", "probs", "=", "torch", ".", "full_like", "(", "out", ",", "-", "70", ")", "\n", "probs", ".", "scatter_", "(", "1", ",", "ind", ",", "val", ")", "\n", "return", "probs", "\n", "", "return", "wrapper", "\n", "", "elif", "sample_type", "[", "-", "1", "]", "==", "'r'", ":", "\n", "            ", "truncation_r", "=", "float", "(", "sample_type", "[", ":", "-", "1", "]", ".", "replace", "(", "'top'", ",", "''", ")", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwards", ")", ":", "\n", "                ", "out", "=", "func", "(", "*", "args", ",", "**", "kwards", ")", "\n", "temp", ",", "indices", "=", "torch", ".", "sort", "(", "out", ",", "1", ",", "descending", "=", "True", ")", "\n", "temp1", "=", "torch", ".", "exp", "(", "temp", ")", "\n", "temp2", "=", "temp1", ".", "cumsum", "(", "dim", "=", "1", ")", "\n", "temp3", "=", "temp2", "<", "truncation_r", "\n", "new_temp", "=", "torch", ".", "full_like", "(", "temp3", "[", ":", ",", "0", ":", "1", ",", ":", "]", ",", "True", ")", "\n", "temp6", "=", "torch", ".", "cat", "(", "(", "new_temp", ",", "temp3", ")", ",", "dim", "=", "1", ")", "\n", "temp3", "=", "temp6", "[", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "temp4", "=", "temp3", ".", "gather", "(", "1", ",", "indices", ".", "argsort", "(", "1", ")", ")", "\n", "temp5", "=", "temp4", ".", "float", "(", ")", "*", "out", "+", "(", "1", "-", "temp4", ".", "float", "(", ")", ")", "*", "(", "-", "70", ")", "\n", "probs", "=", "temp5", "\n", "return", "probs", "\n", "", "return", "wrapper", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"wrong sample type\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.generate_content": [[122, 176], ["torch.no_grad", "conditional_dalle.C_DALLE.eval", "conditional_dalle.C_DALLE.transformer.sample", "conditional_dalle.C_DALLE.content_codec.decode", "conditional_dalle.C_DALLE.train", "type", "torch.tensor", "conditional_dalle.C_DALLE.prepare_condition", "conditional_dalle.C_DALLE.prepare_condition", "conditional_dalle.C_DALLE.keys", "conditional_dalle.C_DALLE.predict_start_with_truncation", "conditional_dalle.C_DALLE.get", "conditional_dalle.C_DALLE.get", "torch.cat", "sample_type.split", "sample_type.split", "range"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_condition", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_condition", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.predict_start_with_truncation", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate_content", "(", "\n", "self", ",", "\n", "*", ",", "\n", "batch", ",", "\n", "condition", "=", "None", ",", "\n", "filter_ratio", "=", "0.5", ",", "\n", "temperature", "=", "1.0", ",", "\n", "content_ratio", "=", "0.0", ",", "\n", "replicate", "=", "1", ",", "\n", "return_att_weight", "=", "False", ",", "\n", "sample_type", "=", "\"normal\"", ",", "\n", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "if", "type", "(", "batch", "[", "'label'", "]", ")", "==", "list", ":", "\n", "            ", "batch", "[", "'label'", "]", "=", "torch", ".", "tensor", "(", "batch", "[", "'label'", "]", ")", "\n", "", "if", "condition", "is", "None", ":", "\n", "            ", "condition", "=", "self", ".", "prepare_condition", "(", "batch", "=", "batch", ")", "\n", "", "else", ":", "\n", "            ", "condition", "=", "self", ".", "prepare_condition", "(", "batch", "=", "None", ",", "condition", "=", "condition", ")", "\n", "\n", "# content = None", "\n", "\n", "", "if", "replicate", "!=", "1", ":", "\n", "            ", "for", "k", "in", "condition", ".", "keys", "(", ")", ":", "\n", "                ", "if", "condition", "[", "k", "]", "is", "not", "None", ":", "\n", "                    ", "condition", "[", "k", "]", "=", "torch", ".", "cat", "(", "[", "condition", "[", "k", "]", "for", "_", "in", "range", "(", "replicate", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "", "", "", "content_token", "=", "None", "\n", "\n", "if", "sample_type", ".", "split", "(", "','", ")", "[", "0", "]", "[", ":", "3", "]", "==", "\"top\"", "and", "self", ".", "truncation_forward", "==", "False", ":", "\n", "            ", "self", ".", "transformer", ".", "predict_start", "=", "self", ".", "predict_start_with_truncation", "(", "self", ".", "transformer", ".", "predict_start", ",", "sample_type", ".", "split", "(", "','", ")", "[", "0", "]", ")", "\n", "self", ".", "truncation_forward", "=", "True", "\n", "\n", "", "trans_out", "=", "self", ".", "transformer", ".", "sample", "(", "condition_token", "=", "condition", "[", "'condition_token'", "]", ",", "\n", "condition_mask", "=", "condition", ".", "get", "(", "'condition_mask'", ",", "None", ")", ",", "\n", "condition_embed", "=", "condition", ".", "get", "(", "'condition_embed_token'", ",", "None", ")", ",", "\n", "content_token", "=", "content_token", ",", "\n", "filter_ratio", "=", "filter_ratio", ",", "\n", "temperature", "=", "temperature", ",", "\n", "return_att_weight", "=", "return_att_weight", ",", "\n", "return_logits", "=", "False", ",", "\n", "print_log", "=", "False", ",", "\n", "sample_type", "=", "sample_type", ")", "\n", "\n", "content", "=", "self", ".", "content_codec", ".", "decode", "(", "trans_out", "[", "'content_token'", "]", ")", "#(8,1024)->(8,3,256,256)", "\n", "self", ".", "train", "(", ")", "\n", "out", "=", "{", "\n", "'content'", ":", "content", "\n", "}", "\n", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.reconstruct": [[177, 191], ["torch.no_grad", "torch.is_tensor", "conditional_dalle.C_DALLE.content_codec.get_tokens", "conditional_dalle.C_DALLE.items", "conditional_dalle.C_DALLE.content_codec.decode", "input.to.to.to", "torch.is_tensor", "v.to"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.get_tokens", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "reconstruct", "(", "\n", "self", ",", "\n", "input", "\n", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "input", ")", ":", "\n", "            ", "input", "=", "input", ".", "to", "(", "self", ".", "device", ")", "\n", "", "cont", "=", "self", ".", "content_codec", ".", "get_tokens", "(", "input", ")", "\n", "cont_", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "cont", ".", "items", "(", ")", ":", "\n", "            ", "v", "=", "v", ".", "to", "(", "self", ".", "device", ")", "if", "torch", ".", "is_tensor", "(", "v", ")", "else", "v", "\n", "cont_", "[", "'content_'", "+", "k", "]", "=", "v", "\n", "", "rec", "=", "self", ".", "content_codec", ".", "decode", "(", "cont_", "[", "'content_token'", "]", ")", "\n", "return", "rec", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.sample": [[192, 262], ["torch.no_grad", "conditional_dalle.C_DALLE.eval", "conditional_dalle.C_DALLE.prepare_condition", "conditional_dalle.C_DALLE.prepare_content", "conditional_dalle.C_DALLE.train", "output.update", "conditional_dalle.C_DALLE.content_codec.decode", "int", "conditional_dalle.C_DALLE.content_codec.decode", "conditional_dalle.C_DALLE.transformer.sample_debug", "conditional_dalle.C_DALLE.transformer.sample", "content_att.view", "conditional_dalle.C_DALLE.get", "conditional_dalle.C_DALLE.get", "conditional_dalle.C_DALLE.get", "conditional_dalle.C_DALLE.get", "conditional_dalle.C_DALLE.get", "conditional_dalle.C_DALLE.get"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_condition", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_content", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample", "(", "\n", "self", ",", "\n", "batch", ",", "\n", "clip", "=", "None", ",", "\n", "temperature", "=", "1.", ",", "\n", "return_rec", "=", "True", ",", "\n", "filter_ratio", "=", "[", "0", ",", "0.5", ",", "1.0", "]", ",", "\n", "content_ratio", "=", "[", "1", "]", ",", "# the ratio to keep the encoded content tokens", "\n", "return_att_weight", "=", "False", ",", "\n", "return_logits", "=", "False", ",", "\n", "sample_type", "=", "\"normal\"", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "condition", "=", "self", ".", "prepare_condition", "(", "batch", ")", "\n", "content", "=", "self", ".", "prepare_content", "(", "batch", ")", "\n", "\n", "content_samples", "=", "{", "'input_image'", ":", "batch", "[", "self", ".", "content_info", "[", "'key'", "]", "]", "}", "\n", "if", "return_rec", ":", "\n", "            ", "content_samples", "[", "'reconstruction_image'", "]", "=", "self", ".", "content_codec", ".", "decode", "(", "content", "[", "'content_token'", "]", ")", "\n", "\n", "# import pdb; pdb.set_trace()", "\n", "\n", "", "for", "fr", "in", "filter_ratio", ":", "\n", "            ", "for", "cr", "in", "content_ratio", ":", "\n", "                ", "num_content_tokens", "=", "int", "(", "(", "content", "[", "'content_token'", "]", ".", "shape", "[", "1", "]", "*", "cr", ")", ")", "\n", "if", "num_content_tokens", "<", "0", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "content_token", "=", "content", "[", "'content_token'", "]", "[", ":", ",", ":", "num_content_tokens", "]", "\n", "", "if", "sample_type", "==", "'debug'", ":", "\n", "                    ", "trans_out", "=", "self", ".", "transformer", ".", "sample_debug", "(", "condition_token", "=", "condition", "[", "'condition_token'", "]", ",", "\n", "condition_mask", "=", "condition", ".", "get", "(", "'condition_mask'", ",", "None", ")", ",", "\n", "condition_embed", "=", "condition", ".", "get", "(", "'condition_embed_token'", ",", "None", ")", ",", "\n", "content_token", "=", "content_token", ",", "\n", "filter_ratio", "=", "fr", ",", "\n", "temperature", "=", "temperature", ",", "\n", "return_att_weight", "=", "return_att_weight", ",", "\n", "return_logits", "=", "return_logits", ",", "\n", "content_logits", "=", "content", ".", "get", "(", "'content_logits'", ",", "None", ")", ",", "\n", "sample_type", "=", "sample_type", ",", "\n", "**", "kwargs", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "trans_out", "=", "self", ".", "transformer", ".", "sample", "(", "condition_token", "=", "condition", "[", "'condition_token'", "]", ",", "\n", "condition_mask", "=", "condition", ".", "get", "(", "'condition_mask'", ",", "None", ")", ",", "\n", "condition_embed", "=", "condition", ".", "get", "(", "'condition_embed_token'", ",", "None", ")", ",", "\n", "content_token", "=", "content_token", ",", "\n", "filter_ratio", "=", "fr", ",", "\n", "temperature", "=", "temperature", ",", "\n", "return_att_weight", "=", "return_att_weight", ",", "\n", "return_logits", "=", "return_logits", ",", "\n", "content_logits", "=", "content", ".", "get", "(", "'content_logits'", ",", "None", ")", ",", "\n", "sample_type", "=", "sample_type", ",", "\n", "**", "kwargs", ")", "\n", "\n", "", "content_samples", "[", "'cond1_cont{}_fr{}_image'", ".", "format", "(", "cr", ",", "fr", ")", "]", "=", "self", ".", "content_codec", ".", "decode", "(", "trans_out", "[", "'content_token'", "]", ")", "\n", "\n", "if", "return_att_weight", ":", "\n", "                    ", "content_samples", "[", "'cond1_cont{}_fr{}_image_condition_attention'", ".", "format", "(", "cr", ",", "fr", ")", "]", "=", "trans_out", "[", "'condition_attention'", "]", "# B x Lt x Ld", "\n", "content_att", "=", "trans_out", "[", "'content_attention'", "]", "\n", "shape", "=", "*", "content_att", ".", "shape", "[", ":", "-", "1", "]", ",", "self", ".", "content", ".", "token_shape", "[", "0", "]", ",", "self", ".", "content", ".", "token_shape", "[", "1", "]", "\n", "content_samples", "[", "'cond1_cont{}_fr{}_image_content_attention'", ".", "format", "(", "cr", ",", "fr", ")", "]", "=", "content_att", ".", "view", "(", "*", "shape", ")", "# B x Lt x Lt -> B x Lt x H x W", "\n", "", "if", "return_logits", ":", "\n", "                    ", "content_samples", "[", "'logits'", "]", "=", "trans_out", "[", "'logits'", "]", "\n", "", "", "", "self", ".", "train", "(", ")", "\n", "output", "=", "{", "'condition'", ":", "batch", "[", "self", ".", "condition_info", "[", "'key'", "]", "]", "}", "\n", "output", ".", "update", "(", "content_samples", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.forward": [[263, 272], ["conditional_dalle.C_DALLE.prepare_input", "conditional_dalle.C_DALLE.transformer"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.prepare_input"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "batch", ",", "\n", "name", "=", "'none'", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "input", "=", "self", ".", "prepare_input", "(", "batch", ")", "\n", "output", "=", "self", ".", "transformer", "(", "input", ",", "**", "kwargs", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.__init__": [[17, 47], ["pytorch_lightning.LightningModule.__init__", "cond_transformer.Net2NetTransformer.init_first_stage_from_ckpt", "cond_transformer.Net2NetTransformer.init_cond_stage_from_ckpt", "image_synthesis.utils.misc.instantiate_from_config", "image_synthesis.utils.misc.instantiate_from_config", "cond_transformer.Net2NetTransformer.init_from_ckpt"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.init_first_stage_from_ckpt", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.init_cond_stage_from_ckpt", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.init_from_ckpt"], ["    ", "def", "__init__", "(", "self", ",", "\n", "transformer_config", ",", "\n", "first_stage_config", ",", "\n", "cond_stage_config", ",", "\n", "permuter_config", "=", "None", ",", "\n", "ckpt_path", "=", "None", ",", "\n", "ignore_keys", "=", "[", "]", ",", "\n", "first_stage_key", "=", "\"image\"", ",", "\n", "cond_stage_key", "=", "\"depth\"", ",", "\n", "downsample_cond_size", "=", "-", "1", ",", "\n", "pkeep", "=", "1.0", ",", "\n", "sos_token", "=", "0", ",", "\n", "unconditional", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "be_unconditional", "=", "unconditional", "\n", "self", ".", "sos_token", "=", "sos_token", "\n", "self", ".", "first_stage_key", "=", "first_stage_key", "\n", "self", ".", "cond_stage_key", "=", "cond_stage_key", "\n", "self", ".", "init_first_stage_from_ckpt", "(", "first_stage_config", ")", "\n", "self", ".", "init_cond_stage_from_ckpt", "(", "cond_stage_config", ")", "\n", "if", "permuter_config", "is", "None", ":", "\n", "            ", "permuter_config", "=", "{", "\"target\"", ":", "\"image_synthesis.taming.modules.transformer.permuter.Identity\"", "}", "\n", "", "self", ".", "permuter", "=", "instantiate_from_config", "(", "config", "=", "permuter_config", ")", "\n", "self", ".", "transformer", "=", "instantiate_from_config", "(", "config", "=", "transformer_config", ")", "\n", "\n", "if", "ckpt_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "init_from_ckpt", "(", "ckpt_path", ",", "ignore_keys", "=", "ignore_keys", ")", "\n", "", "self", ".", "downsample_cond_size", "=", "downsample_cond_size", "\n", "self", ".", "pkeep", "=", "pkeep", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.init_from_ckpt": [[48, 57], ["list", "sd.keys", "cond_transformer.Net2NetTransformer.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "k.startswith", "cond_transformer.Net2NetTransformer.print"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load"], ["", "def", "init_from_ckpt", "(", "self", ",", "path", ",", "ignore_keys", "=", "list", "(", ")", ")", ":", "\n", "        ", "sd", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "\"cpu\"", ")", "[", "\"state_dict\"", "]", "\n", "for", "k", "in", "sd", ".", "keys", "(", ")", ":", "\n", "            ", "for", "ik", "in", "ignore_keys", ":", "\n", "                ", "if", "k", ".", "startswith", "(", "ik", ")", ":", "\n", "                    ", "self", ".", "print", "(", "\"Deleting key {} from state_dict.\"", ".", "format", "(", "k", ")", ")", "\n", "del", "sd", "[", "k", "]", "\n", "", "", "", "self", ".", "load_state_dict", "(", "sd", ",", "strict", "=", "False", ")", "\n", "print", "(", "f\"Restored from {path}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.init_first_stage_from_ckpt": [[58, 63], ["image_synthesis.utils.misc.instantiate_from_config", "model.eval.eval.eval"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval"], ["", "def", "init_first_stage_from_ckpt", "(", "self", ",", "config", ")", ":", "\n", "        ", "model", "=", "instantiate_from_config", "(", "config", ")", "\n", "model", "=", "model", ".", "eval", "(", ")", "\n", "model", ".", "train", "=", "disabled_train", "\n", "self", ".", "first_stage_model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.init_cond_stage_from_ckpt": [[64, 79], ["print", "print", "image_synthesis.taming.modules.util.SOSProvider", "image_synthesis.utils.misc.instantiate_from_config", "model.eval.eval.eval"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval"], ["", "def", "init_cond_stage_from_ckpt", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "config", "==", "\"__is_first_stage__\"", ":", "\n", "            ", "print", "(", "\"Using first stage also as cond stage.\"", ")", "\n", "self", ".", "cond_stage_model", "=", "self", ".", "first_stage_model", "\n", "", "elif", "config", "==", "\"__is_unconditional__\"", "or", "self", ".", "be_unconditional", ":", "\n", "            ", "print", "(", "f\"Using no cond stage. Assuming the training is intended to be unconditional. \"", "\n", "f\"Prepending {self.sos_token} as a sos token.\"", ")", "\n", "self", ".", "be_unconditional", "=", "True", "\n", "self", ".", "cond_stage_key", "=", "self", ".", "first_stage_key", "\n", "self", ".", "cond_stage_model", "=", "SOSProvider", "(", "self", ".", "sos_token", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "instantiate_from_config", "(", "config", ")", "\n", "model", "=", "model", ".", "eval", "(", ")", "\n", "model", ".", "train", "=", "disabled_train", "\n", "self", ".", "cond_stage_model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.forward": [[80, 105], ["cond_transformer.Net2NetTransformer.encode_to_z", "cond_transformer.Net2NetTransformer.encode_to_c", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cond_transformer.Net2NetTransformer.transformer", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "mask.round().to.round().to.round().to", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.randint_like", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.round().to.round().to.round"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.encode_to_z", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.encode_to_c"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "c", ")", ":", "\n", "# one step to produce the logits", "\n", "        ", "_", ",", "z_indices", "=", "self", ".", "encode_to_z", "(", "x", ")", "\n", "_", ",", "c_indices", "=", "self", ".", "encode_to_c", "(", "c", ")", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "pkeep", "<", "1.0", ":", "\n", "            ", "mask", "=", "torch", ".", "bernoulli", "(", "self", ".", "pkeep", "*", "torch", ".", "ones", "(", "z_indices", ".", "shape", ",", "\n", "device", "=", "z_indices", ".", "device", ")", ")", "\n", "mask", "=", "mask", ".", "round", "(", ")", ".", "to", "(", "dtype", "=", "torch", ".", "int64", ")", "\n", "r_indices", "=", "torch", ".", "randint_like", "(", "z_indices", ",", "self", ".", "transformer", ".", "config", ".", "vocab_size", ")", "\n", "a_indices", "=", "mask", "*", "z_indices", "+", "(", "1", "-", "mask", ")", "*", "r_indices", "\n", "", "else", ":", "\n", "            ", "a_indices", "=", "z_indices", "\n", "\n", "", "cz_indices", "=", "torch", ".", "cat", "(", "(", "c_indices", ",", "a_indices", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# target includes all sequence elements (no need to handle first one", "\n", "# differently because we are conditioning)", "\n", "target", "=", "z_indices", "\n", "# make the prediction", "\n", "logits", ",", "_", "=", "self", ".", "transformer", "(", "cz_indices", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "# cut off conditioning outputs - output i corresponds to p(z_i | z_{<i}, c)", "\n", "logits", "=", "logits", "[", ":", ",", "c_indices", ".", "shape", "[", "1", "]", "-", "1", ":", "]", "\n", "\n", "return", "logits", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.top_k_logits": [[106, 111], ["torch.topk", "torch.topk", "torch.topk", "torch.topk", "logits.clone", "float"], "methods", ["None"], ["", "def", "top_k_logits", "(", "self", ",", "logits", ",", "k", ")", ":", "\n", "        ", "v", ",", "ix", "=", "torch", ".", "topk", "(", "logits", ",", "k", ")", "\n", "out", "=", "logits", ".", "clone", "(", ")", "\n", "out", "[", "out", "<", "v", "[", "...", ",", "[", "-", "1", "]", "]", "]", "=", "-", "float", "(", "'Inf'", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.sample": [[112, 167], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cond_transformer.Net2NetTransformer.transformer.get_block_size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cond_transformer.Net2NetTransformer.transformer", "torch.softmax", "torch.softmax", "range", "len", "c.clone", "cond_transformer.Net2NetTransformer.top_k_logits", "torch.softmax.reshape", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.softmax.reshape", "torch.multinomial.reshape", "torch.multinomial.reshape", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "callback", "cond_transformer.Net2NetTransformer.transformer", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "cond_transformer.Net2NetTransformer.top_k_logits", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.CodeGPT.get_block_size", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.top_k_logits", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.top_k_logits"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample", "(", "self", ",", "x", ",", "c", ",", "steps", ",", "temperature", "=", "1.0", ",", "sample", "=", "False", ",", "top_k", "=", "None", ",", "\n", "callback", "=", "lambda", "k", ":", "None", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "(", "c", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "block_size", "=", "self", ".", "transformer", ".", "get_block_size", "(", ")", "\n", "assert", "not", "self", ".", "transformer", ".", "training", "\n", "if", "self", ".", "pkeep", "<=", "0.0", ":", "\n", "# one pass suffices since input is pure noise anyway", "\n", "            ", "assert", "len", "(", "x", ".", "shape", ")", "==", "2", "\n", "noise_shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "steps", "-", "1", ")", "\n", "#noise = torch.randint(self.transformer.config.vocab_size, noise_shape).to(x)", "\n", "noise", "=", "c", ".", "clone", "(", ")", "[", ":", ",", "x", ".", "shape", "[", "1", "]", "-", "c", ".", "shape", "[", "1", "]", ":", "-", "1", "]", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "noise", ")", ",", "dim", "=", "1", ")", "\n", "logits", ",", "_", "=", "self", ".", "transformer", "(", "x", ")", "\n", "# take all logits for now and scale by temp", "\n", "logits", "=", "logits", "/", "temperature", "\n", "# optionally crop probabilities to only the top k options", "\n", "if", "top_k", "is", "not", "None", ":", "\n", "                ", "logits", "=", "self", ".", "top_k_logits", "(", "logits", ",", "top_k", ")", "\n", "# apply softmax to convert to probabilities", "\n", "", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "# sample from the distribution or take the most likely", "\n", "if", "sample", ":", "\n", "                ", "shape", "=", "probs", ".", "shape", "\n", "probs", "=", "probs", ".", "reshape", "(", "shape", "[", "0", "]", "*", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ")", "\n", "ix", "=", "torch", ".", "multinomial", "(", "probs", ",", "num_samples", "=", "1", ")", "\n", "probs", "=", "probs", ".", "reshape", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", ")", "\n", "ix", "=", "ix", ".", "reshape", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "ix", "=", "torch", ".", "topk", "(", "probs", ",", "k", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "# cut off conditioning", "\n", "", "x", "=", "ix", "[", ":", ",", "c", ".", "shape", "[", "1", "]", "-", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "for", "k", "in", "range", "(", "steps", ")", ":", "\n", "                ", "callback", "(", "k", ")", "\n", "assert", "x", ".", "size", "(", "1", ")", "<=", "block_size", "# make sure model can see conditioning", "\n", "x_cond", "=", "x", "if", "x", ".", "size", "(", "1", ")", "<=", "block_size", "else", "x", "[", ":", ",", "-", "block_size", ":", "]", "# crop context if needed", "\n", "logits", ",", "_", "=", "self", ".", "transformer", "(", "x_cond", ")", "\n", "# pluck the logits at the final step and scale by temperature", "\n", "logits", "=", "logits", "[", ":", ",", "-", "1", ",", ":", "]", "/", "temperature", "\n", "# optionally crop probabilities to only the top k options", "\n", "if", "top_k", "is", "not", "None", ":", "\n", "                    ", "logits", "=", "self", ".", "top_k_logits", "(", "logits", ",", "top_k", ")", "\n", "# apply softmax to convert to probabilities", "\n", "", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "# sample from the distribution or take the most likely", "\n", "if", "sample", ":", "\n", "                    ", "ix", "=", "torch", ".", "multinomial", "(", "probs", ",", "num_samples", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "_", ",", "ix", "=", "torch", ".", "topk", "(", "probs", ",", "k", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "# append to the sequence and continue", "\n", "", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "ix", ")", ",", "dim", "=", "1", ")", "\n", "# cut off conditioning", "\n", "", "x", "=", "x", "[", ":", ",", "c", ".", "shape", "[", "1", "]", ":", "]", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.encode_to_z": [[168, 174], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cond_transformer.Net2NetTransformer.first_stage_model.encode", "info[].view", "cond_transformer.Net2NetTransformer.permuter"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.encode"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "encode_to_z", "(", "self", ",", "x", ")", ":", "\n", "        ", "quant_z", ",", "_", ",", "info", "=", "self", ".", "first_stage_model", ".", "encode", "(", "x", ")", "\n", "indices", "=", "info", "[", "2", "]", ".", "view", "(", "quant_z", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "indices", "=", "self", ".", "permuter", "(", "indices", ")", "\n", "return", "quant_z", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.encode_to_c": [[175, 183], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cond_transformer.Net2NetTransformer.cond_stage_model.encode", "torch.interpolate", "torch.interpolate", "len", "indices.view.view.view"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.encode"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "encode_to_c", "(", "self", ",", "c", ")", ":", "\n", "        ", "if", "self", ".", "downsample_cond_size", ">", "-", "1", ":", "\n", "            ", "c", "=", "F", ".", "interpolate", "(", "c", ",", "size", "=", "(", "self", ".", "downsample_cond_size", ",", "self", ".", "downsample_cond_size", ")", ")", "\n", "", "quant_c", ",", "_", ",", "[", "_", ",", "_", ",", "indices", "]", "=", "self", ".", "cond_stage_model", ".", "encode", "(", "c", ")", "\n", "if", "len", "(", "indices", ".", "shape", ")", ">", "2", ":", "\n", "            ", "indices", "=", "indices", ".", "view", "(", "c", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "return", "quant_c", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.decode_to_img": [[184, 192], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cond_transformer.Net2NetTransformer.permuter", "cond_transformer.Net2NetTransformer.first_stage_model.quantize.get_codebook_entry", "cond_transformer.Net2NetTransformer.first_stage_model.decode", "cond_transformer.Net2NetTransformer.reshape"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.VectorQuantizer2.get_codebook_entry", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "decode_to_img", "(", "self", ",", "index", ",", "zshape", ")", ":", "\n", "        ", "index", "=", "self", ".", "permuter", "(", "index", ",", "reverse", "=", "True", ")", "\n", "bhwc", "=", "(", "zshape", "[", "0", "]", ",", "zshape", "[", "2", "]", ",", "zshape", "[", "3", "]", ",", "zshape", "[", "1", "]", ")", "\n", "quant_z", "=", "self", ".", "first_stage_model", ".", "quantize", ".", "get_codebook_entry", "(", "\n", "index", ".", "reshape", "(", "-", "1", ")", ",", "shape", "=", "bhwc", ")", "\n", "x", "=", "self", ".", "first_stage_model", ".", "decode", "(", "quant_z", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.log_images": [[193, 264], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dict", "x.to.to.to", "cond_transformer.Net2NetTransformer.to", "cond_transformer.Net2NetTransformer.encode_to_z", "cond_transformer.Net2NetTransformer.encode_to_c", "cond_transformer.Net2NetTransformer.sample", "cond_transformer.Net2NetTransformer.decode_to_img", "cond_transformer.Net2NetTransformer.sample", "cond_transformer.Net2NetTransformer.decode_to_img", "cond_transformer.Net2NetTransformer.sample", "cond_transformer.Net2NetTransformer.decode_to_img", "cond_transformer.Net2NetTransformer.decode_to_img", "cond_transformer.Net2NetTransformer.get_xc", "cond_transformer.Net2NetTransformer.get_xc", "cond_transformer.Net2NetTransformer.cond_stage_model.decode", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.one_hot", "torch.one_hot", "cond_transformer.Net2NetTransformer.squeeze().permute().float", "cond_transformer.Net2NetTransformer.cond_stage_model.to_rgb", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.one_hot", "torch.one_hot", "cond_transformer.Net2NetTransformer.squeeze().permute().float", "cond_transformer.Net2NetTransformer.cond_stage_model.to_rgb", "cond_transformer.Net2NetTransformer.squeeze().permute", "cond_transformer.Net2NetTransformer.squeeze().permute", "cond_transformer.Net2NetTransformer.squeeze", "cond_transformer.Net2NetTransformer.squeeze"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.encode_to_z", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.encode_to_c", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.decode_to_img", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.decode_to_img", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.decode_to_img", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.decode_to_img", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.get_xc", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.get_xc", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.to_rgb", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.to_rgb"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "log_images", "(", "self", ",", "batch", ",", "temperature", "=", "None", ",", "top_k", "=", "None", ",", "callback", "=", "None", ",", "lr_interface", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "log", "=", "dict", "(", ")", "\n", "\n", "N", "=", "4", "\n", "if", "lr_interface", ":", "\n", "            ", "x", ",", "c", "=", "self", ".", "get_xc", "(", "batch", ",", "N", ",", "diffuse", "=", "False", ",", "upsample_factor", "=", "8", ")", "\n", "", "else", ":", "\n", "            ", "x", ",", "c", "=", "self", ".", "get_xc", "(", "batch", ",", "N", ")", "\n", "", "x", "=", "x", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "c", "=", "c", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "\n", "quant_z", ",", "z_indices", "=", "self", ".", "encode_to_z", "(", "x", ")", "\n", "quant_c", ",", "c_indices", "=", "self", ".", "encode_to_c", "(", "c", ")", "\n", "\n", "# create a \"half\"\" sample", "\n", "z_start_indices", "=", "z_indices", "[", ":", ",", ":", "z_indices", ".", "shape", "[", "1", "]", "//", "2", "]", "\n", "index_sample", "=", "self", ".", "sample", "(", "z_start_indices", ",", "c_indices", ",", "\n", "steps", "=", "z_indices", ".", "shape", "[", "1", "]", "-", "z_start_indices", ".", "shape", "[", "1", "]", ",", "\n", "temperature", "=", "temperature", "if", "temperature", "is", "not", "None", "else", "1.0", ",", "\n", "sample", "=", "True", ",", "\n", "top_k", "=", "top_k", "if", "top_k", "is", "not", "None", "else", "100", ",", "\n", "callback", "=", "callback", "if", "callback", "is", "not", "None", "else", "lambda", "k", ":", "None", ")", "\n", "x_sample", "=", "self", ".", "decode_to_img", "(", "index_sample", ",", "quant_z", ".", "shape", ")", "\n", "\n", "# sample", "\n", "z_start_indices", "=", "z_indices", "[", ":", ",", ":", "0", "]", "\n", "index_sample", "=", "self", ".", "sample", "(", "z_start_indices", ",", "c_indices", ",", "\n", "steps", "=", "z_indices", ".", "shape", "[", "1", "]", ",", "\n", "temperature", "=", "temperature", "if", "temperature", "is", "not", "None", "else", "1.0", ",", "\n", "sample", "=", "True", ",", "\n", "top_k", "=", "top_k", "if", "top_k", "is", "not", "None", "else", "100", ",", "\n", "callback", "=", "callback", "if", "callback", "is", "not", "None", "else", "lambda", "k", ":", "None", ")", "\n", "x_sample_nopix", "=", "self", ".", "decode_to_img", "(", "index_sample", ",", "quant_z", ".", "shape", ")", "\n", "\n", "# det sample", "\n", "z_start_indices", "=", "z_indices", "[", ":", ",", ":", "0", "]", "\n", "index_sample", "=", "self", ".", "sample", "(", "z_start_indices", ",", "c_indices", ",", "\n", "steps", "=", "z_indices", ".", "shape", "[", "1", "]", ",", "\n", "sample", "=", "False", ",", "\n", "callback", "=", "callback", "if", "callback", "is", "not", "None", "else", "lambda", "k", ":", "None", ")", "\n", "x_sample_det", "=", "self", ".", "decode_to_img", "(", "index_sample", ",", "quant_z", ".", "shape", ")", "\n", "\n", "# reconstruction", "\n", "x_rec", "=", "self", ".", "decode_to_img", "(", "z_indices", ",", "quant_z", ".", "shape", ")", "\n", "\n", "log", "[", "\"inputs\"", "]", "=", "x", "\n", "log", "[", "\"reconstructions\"", "]", "=", "x_rec", "\n", "\n", "if", "self", ".", "cond_stage_key", "!=", "\"image\"", ":", "\n", "            ", "cond_rec", "=", "self", ".", "cond_stage_model", ".", "decode", "(", "quant_c", ")", "\n", "if", "self", ".", "cond_stage_key", "==", "\"segmentation\"", ":", "\n", "# get image from segmentation mask", "\n", "                ", "num_classes", "=", "cond_rec", ".", "shape", "[", "1", "]", "\n", "\n", "c", "=", "torch", ".", "argmax", "(", "c", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "c", "=", "F", ".", "one_hot", "(", "c", ",", "num_classes", "=", "num_classes", ")", "\n", "c", "=", "c", ".", "squeeze", "(", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "c", "=", "self", ".", "cond_stage_model", ".", "to_rgb", "(", "c", ")", "\n", "\n", "cond_rec", "=", "torch", ".", "argmax", "(", "cond_rec", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "cond_rec", "=", "F", ".", "one_hot", "(", "cond_rec", ",", "num_classes", "=", "num_classes", ")", "\n", "cond_rec", "=", "cond_rec", ".", "squeeze", "(", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "cond_rec", "=", "self", ".", "cond_stage_model", ".", "to_rgb", "(", "cond_rec", ")", "\n", "", "log", "[", "\"conditioning_rec\"", "]", "=", "cond_rec", "\n", "log", "[", "\"conditioning\"", "]", "=", "c", "\n", "\n", "", "log", "[", "\"samples_half\"", "]", "=", "x_sample", "\n", "log", "[", "\"samples_nopix\"", "]", "=", "x_sample_nopix", "\n", "log", "[", "\"samples_det\"", "]", "=", "x_sample_det", "\n", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.get_input": [[265, 274], ["len", "len", "x.float.float.permute().to", "x.float.float.float", "x.float.float.permute"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "key", ",", "batch", ")", ":", "\n", "        ", "x", "=", "batch", "[", "key", "]", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "3", ":", "\n", "            ", "x", "=", "x", "[", "...", ",", "None", "]", "\n", "", "if", "len", "(", "x", ".", "shape", ")", "==", "4", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "memory_format", "=", "torch", ".", "contiguous_format", ")", "\n", "", "if", "x", ".", "dtype", "==", "torch", ".", "double", ":", "\n", "            ", "x", "=", "x", ".", "float", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.get_xc": [[275, 282], ["cond_transformer.Net2NetTransformer.get_input", "cond_transformer.Net2NetTransformer.get_input"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_input", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_input"], ["", "def", "get_xc", "(", "self", ",", "batch", ",", "N", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "get_input", "(", "self", ".", "first_stage_key", ",", "batch", ")", "\n", "c", "=", "self", ".", "get_input", "(", "self", ".", "cond_stage_key", ",", "batch", ")", "\n", "if", "N", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "[", ":", "N", "]", "\n", "c", "=", "c", "[", ":", "N", "]", "\n", "", "return", "x", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.shared_step": [[283, 288], ["cond_transformer.Net2NetTransformer.get_xc", "cond_transformer.Net2NetTransformer.", "torch.cross_entropy", "torch.cross_entropy", "logits.reshape", "target.reshape", "logits.size"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.get_xc"], ["", "def", "shared_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "c", "=", "self", ".", "get_xc", "(", "batch", ")", "\n", "logits", ",", "target", "=", "self", "(", "x", ",", "c", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ".", "reshape", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", ",", "target", ".", "reshape", "(", "-", "1", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.training_step": [[289, 293], ["cond_transformer.Net2NetTransformer.shared_step", "cond_transformer.Net2NetTransformer.log"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.shared_step"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "loss", "=", "self", ".", "shared_step", "(", "batch", ",", "batch_idx", ")", "\n", "self", ".", "log", "(", "\"train/loss\"", ",", "loss", ",", "prog_bar", "=", "True", ",", "logger", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.validation_step": [[294, 298], ["cond_transformer.Net2NetTransformer.shared_step", "cond_transformer.Net2NetTransformer.log"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.shared_step"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "loss", "=", "self", ".", "shared_step", "(", "batch", ",", "batch_idx", ")", "\n", "self", ".", "log", "(", "\"val/loss\"", ",", "loss", ",", "prog_bar", "=", "True", ",", "logger", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.Net2NetTransformer.configure_optimizers": [[299, 344], ["set", "set", "cond_transformer.Net2NetTransformer.transformer.named_modules", "set.add", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "m.named_parameters", "len", "len", "pn.endswith", "cond_transformer.Net2NetTransformer.transformer.named_parameters", "str", "str", "set.add", "param_dict.keys", "pn.endswith", "isinstance", "set.add", "param_dict.keys", "sorted", "sorted", "pn.endswith", "isinstance", "set.add", "list", "list"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Following minGPT:\n        This long function is unfortunately doing something very simple and is being very defensive:\n        We are separating out all parameters of the model into two buckets: those that will experience\n        weight decay for regularization and those that won't (biases, and layernorm/embedding weights).\n        We are then returning the PyTorch optimizer object.\n        \"\"\"", "\n", "# separate out all parameters to those that will and won't experience regularizing weight decay", "\n", "decay", "=", "set", "(", ")", "\n", "no_decay", "=", "set", "(", ")", "\n", "whitelist_weight_modules", "=", "(", "torch", ".", "nn", ".", "Linear", ",", ")", "\n", "blacklist_weight_modules", "=", "(", "torch", ".", "nn", ".", "LayerNorm", ",", "torch", ".", "nn", ".", "Embedding", ")", "\n", "for", "mn", ",", "m", "in", "self", ".", "transformer", ".", "named_modules", "(", ")", ":", "\n", "            ", "for", "pn", ",", "p", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                ", "fpn", "=", "'%s.%s'", "%", "(", "mn", ",", "pn", ")", "if", "mn", "else", "pn", "# full param name", "\n", "\n", "if", "pn", ".", "endswith", "(", "'bias'", ")", ":", "\n", "# all biases will not be decayed", "\n", "                    ", "no_decay", ".", "add", "(", "fpn", ")", "\n", "", "elif", "pn", ".", "endswith", "(", "'weight'", ")", "and", "isinstance", "(", "m", ",", "whitelist_weight_modules", ")", ":", "\n", "# weights of whitelist modules will be weight decayed", "\n", "                    ", "decay", ".", "add", "(", "fpn", ")", "\n", "", "elif", "pn", ".", "endswith", "(", "'weight'", ")", "and", "isinstance", "(", "m", ",", "blacklist_weight_modules", ")", ":", "\n", "# weights of blacklist modules will NOT be weight decayed", "\n", "                    ", "no_decay", ".", "add", "(", "fpn", ")", "\n", "\n", "# special case the position embedding parameter in the root GPT module as not decayed", "\n", "", "", "", "no_decay", ".", "add", "(", "'pos_emb'", ")", "\n", "\n", "# validate that we considered every parameter", "\n", "param_dict", "=", "{", "pn", ":", "p", "for", "pn", ",", "p", "in", "self", ".", "transformer", ".", "named_parameters", "(", ")", "}", "\n", "inter_params", "=", "decay", "&", "no_decay", "\n", "union_params", "=", "decay", "|", "no_decay", "\n", "assert", "len", "(", "inter_params", ")", "==", "0", ",", "\"parameters %s made it into both decay/no_decay sets!\"", "%", "(", "str", "(", "inter_params", ")", ",", ")", "\n", "assert", "len", "(", "param_dict", ".", "keys", "(", ")", "-", "union_params", ")", "==", "0", ",", "\"parameters %s were not separated into either decay/no_decay set!\"", "%", "(", "str", "(", "param_dict", ".", "keys", "(", ")", "-", "union_params", ")", ",", ")", "\n", "\n", "# create the pytorch optimizer object", "\n", "optim_groups", "=", "[", "\n", "{", "\"params\"", ":", "[", "param_dict", "[", "pn", "]", "for", "pn", "in", "sorted", "(", "list", "(", "decay", ")", ")", "]", ",", "\"weight_decay\"", ":", "0.01", "}", ",", "\n", "{", "\"params\"", ":", "[", "param_dict", "[", "pn", "]", "for", "pn", "in", "sorted", "(", "list", "(", "no_decay", ")", ")", "]", ",", "\"weight_decay\"", ":", "0.0", "}", ",", "\n", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "optim_groups", ",", "lr", "=", "self", ".", "learning_rate", ",", "betas", "=", "(", "0.9", ",", "0.95", ")", ")", "\n", "return", "optimizer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.cond_transformer.disabled_train": [[10, 14], ["None"], "function", ["None"], ["def", "disabled_train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "    ", "\"\"\"Overwrite model.train with this function to make sure train/eval mode\n    does not change anymore.\"\"\"", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.__init__": [[13, 43], ["pytorch_lightning.LightningModule.__init__", "image_synthesis.taming.modules.diffusionmodules.model.Encoder", "image_synthesis.taming.modules.diffusionmodules.model.Decoder", "image_synthesis.utils.misc.instantiate_from_config", "image_synthesis.taming.modules.vqvae.quantize.VectorQuantizer2", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "vqgan.VQModel.init_from_ckpt", "vqgan.VQModel.register_buffer", "type", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.init_from_ckpt"], ["    ", "def", "__init__", "(", "self", ",", "\n", "ddconfig", ",", "\n", "lossconfig", ",", "\n", "n_embed", ",", "\n", "embed_dim", ",", "\n", "ckpt_path", "=", "None", ",", "\n", "ignore_keys", "=", "[", "]", ",", "\n", "image_key", "=", "\"image\"", ",", "\n", "colorize_nlabels", "=", "None", ",", "\n", "monitor", "=", "None", ",", "\n", "remap", "=", "None", ",", "\n", "sane_index_shape", "=", "False", ",", "# tell vector quantizer to return indices as bhw", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_key", "=", "image_key", "\n", "self", ".", "encoder", "=", "Encoder", "(", "**", "ddconfig", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "**", "ddconfig", ")", "\n", "self", ".", "loss", "=", "instantiate_from_config", "(", "lossconfig", ")", "\n", "self", ".", "quantize", "=", "VectorQuantizer", "(", "n_embed", ",", "embed_dim", ",", "beta", "=", "0.25", ",", "\n", "remap", "=", "remap", ",", "sane_index_shape", "=", "sane_index_shape", ")", "\n", "self", ".", "quant_conv", "=", "torch", ".", "nn", ".", "Conv2d", "(", "ddconfig", "[", "\"z_channels\"", "]", ",", "embed_dim", ",", "1", ")", "\n", "self", ".", "post_quant_conv", "=", "torch", ".", "nn", ".", "Conv2d", "(", "embed_dim", ",", "ddconfig", "[", "\"z_channels\"", "]", ",", "1", ")", "\n", "if", "ckpt_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "init_from_ckpt", "(", "ckpt_path", ",", "ignore_keys", "=", "ignore_keys", ")", "\n", "", "self", ".", "image_key", "=", "image_key", "\n", "if", "colorize_nlabels", "is", "not", "None", ":", "\n", "            ", "assert", "type", "(", "colorize_nlabels", ")", "==", "int", "\n", "self", ".", "register_buffer", "(", "\"colorize\"", ",", "torch", ".", "randn", "(", "3", ",", "colorize_nlabels", ",", "1", ",", "1", ")", ")", "\n", "", "if", "monitor", "is", "not", "None", ":", "\n", "            ", "self", ".", "monitor", "=", "monitor", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.init_from_ckpt": [[44, 54], ["list", "list", "vqgan.VQModel.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "sd.keys", "k.startswith", "print"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys"], ["", "", "def", "init_from_ckpt", "(", "self", ",", "path", ",", "ignore_keys", "=", "list", "(", ")", ")", ":", "\n", "        ", "sd", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "\"cpu\"", ")", "[", "\"state_dict\"", "]", "\n", "keys", "=", "list", "(", "sd", ".", "keys", "(", ")", ")", "\n", "for", "k", "in", "keys", ":", "\n", "            ", "for", "ik", "in", "ignore_keys", ":", "\n", "                ", "if", "k", ".", "startswith", "(", "ik", ")", ":", "\n", "                    ", "print", "(", "\"Deleting key {} from state_dict.\"", ".", "format", "(", "k", ")", ")", "\n", "del", "sd", "[", "k", "]", "\n", "", "", "", "self", ".", "load_state_dict", "(", "sd", ",", "strict", "=", "False", ")", "\n", "print", "(", "f\"Restored from {path}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.encode": [[55, 60], ["vqgan.VQModel.encoder", "vqgan.VQModel.quant_conv", "vqgan.VQModel.quantize"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "encoder", "(", "x", ")", "\n", "h", "=", "self", ".", "quant_conv", "(", "h", ")", "\n", "quant", ",", "emb_loss", ",", "info", "=", "self", ".", "quantize", "(", "h", ")", "\n", "return", "quant", ",", "emb_loss", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.decode": [[61, 65], ["vqgan.VQModel.post_quant_conv", "vqgan.VQModel.decoder"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "quant", ")", ":", "\n", "        ", "quant", "=", "self", ".", "post_quant_conv", "(", "quant", ")", "\n", "dec", "=", "self", ".", "decoder", "(", "quant", ")", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.decode_code": [[66, 70], ["vqgan.VQModel.quantize.embed_code", "vqgan.VQModel.decode"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode"], ["", "def", "decode_code", "(", "self", ",", "code_b", ")", ":", "\n", "        ", "quant_b", "=", "self", ".", "quantize", ".", "embed_code", "(", "code_b", ")", "\n", "dec", "=", "self", ".", "decode", "(", "quant_b", ")", "\n", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.forward": [[71, 75], ["vqgan.VQModel.encode", "vqgan.VQModel.decode"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.encode", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "quant", ",", "diff", ",", "_", "=", "self", ".", "encode", "(", "input", ")", "\n", "dec", "=", "self", ".", "decode", "(", "quant", ")", "\n", "return", "dec", ",", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_input": [[76, 82], ["x.permute().to.permute().to.permute().to", "x.permute().to.permute().to.float", "len", "x.permute().to.permute().to.permute"], "methods", ["None"], ["", "def", "get_input", "(", "self", ",", "batch", ",", "k", ")", ":", "\n", "        ", "x", "=", "batch", "[", "k", "]", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "3", ":", "\n", "            ", "x", "=", "x", "[", "...", ",", "None", "]", "\n", "", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "memory_format", "=", "torch", ".", "contiguous_format", ")", "\n", "return", "x", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.training_step": [[83, 103], ["vqgan.VQModel.get_input", "vqgan.VQModel.", "vqgan.VQModel.loss", "vqgan.VQModel.log", "vqgan.VQModel.log_dict", "vqgan.VQModel.loss", "vqgan.VQModel.log", "vqgan.VQModel.log_dict", "vqgan.VQModel.get_last_layer", "vqgan.VQModel.get_last_layer"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_input", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_last_layer", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_last_layer"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "optimizer_idx", ")", ":", "\n", "        ", "x", "=", "self", ".", "get_input", "(", "batch", ",", "self", ".", "image_key", ")", "\n", "xrec", ",", "qloss", "=", "self", "(", "x", ")", "\n", "\n", "if", "optimizer_idx", "==", "0", ":", "\n", "# autoencode", "\n", "            ", "aeloss", ",", "log_dict_ae", "=", "self", ".", "loss", "(", "qloss", ",", "x", ",", "xrec", ",", "optimizer_idx", ",", "self", ".", "global_step", ",", "\n", "last_layer", "=", "self", ".", "get_last_layer", "(", ")", ",", "split", "=", "\"train\"", ")", "\n", "\n", "self", ".", "log", "(", "\"train/aeloss\"", ",", "aeloss", ",", "prog_bar", "=", "True", ",", "logger", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ")", "\n", "self", ".", "log_dict", "(", "log_dict_ae", ",", "prog_bar", "=", "False", ",", "logger", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ")", "\n", "return", "aeloss", "\n", "\n", "", "if", "optimizer_idx", "==", "1", ":", "\n", "# discriminator", "\n", "            ", "discloss", ",", "log_dict_disc", "=", "self", ".", "loss", "(", "qloss", ",", "x", ",", "xrec", ",", "optimizer_idx", ",", "self", ".", "global_step", ",", "\n", "last_layer", "=", "self", ".", "get_last_layer", "(", ")", ",", "split", "=", "\"train\"", ")", "\n", "self", ".", "log", "(", "\"train/discloss\"", ",", "discloss", ",", "prog_bar", "=", "True", ",", "logger", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ")", "\n", "self", ".", "log_dict", "(", "log_dict_disc", ",", "prog_bar", "=", "False", ",", "logger", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ")", "\n", "return", "discloss", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.validation_step": [[104, 120], ["vqgan.VQModel.get_input", "vqgan.VQModel.", "vqgan.VQModel.loss", "vqgan.VQModel.loss", "vqgan.VQModel.log", "vqgan.VQModel.log", "vqgan.VQModel.log_dict", "vqgan.VQModel.log_dict", "vqgan.VQModel.get_last_layer", "vqgan.VQModel.get_last_layer"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_input", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_last_layer", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_last_layer"], ["", "", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", "=", "self", ".", "get_input", "(", "batch", ",", "self", ".", "image_key", ")", "\n", "xrec", ",", "qloss", "=", "self", "(", "x", ")", "\n", "aeloss", ",", "log_dict_ae", "=", "self", ".", "loss", "(", "qloss", ",", "x", ",", "xrec", ",", "0", ",", "self", ".", "global_step", ",", "\n", "last_layer", "=", "self", ".", "get_last_layer", "(", ")", ",", "split", "=", "\"val\"", ")", "\n", "\n", "discloss", ",", "log_dict_disc", "=", "self", ".", "loss", "(", "qloss", ",", "x", ",", "xrec", ",", "1", ",", "self", ".", "global_step", ",", "\n", "last_layer", "=", "self", ".", "get_last_layer", "(", ")", ",", "split", "=", "\"val\"", ")", "\n", "rec_loss", "=", "log_dict_ae", "[", "\"val/rec_loss\"", "]", "\n", "self", ".", "log", "(", "\"val/rec_loss\"", ",", "rec_loss", ",", "\n", "prog_bar", "=", "True", ",", "logger", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", "sync_dist", "=", "True", ")", "\n", "self", ".", "log", "(", "\"val/aeloss\"", ",", "aeloss", ",", "\n", "prog_bar", "=", "True", ",", "logger", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ",", "sync_dist", "=", "True", ")", "\n", "self", ".", "log_dict", "(", "log_dict_ae", ")", "\n", "self", ".", "log_dict", "(", "log_dict_disc", ")", "\n", "return", "self", ".", "log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.configure_optimizers": [[121, 132], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "vqgan.VQModel.loss.discriminator.parameters", "list", "list", "vqgan.VQModel.post_quant_conv.parameters", "list", "vqgan.VQModel.quant_conv.parameters", "list", "list", "vqgan.VQModel.quantize.parameters", "vqgan.VQModel.encoder.parameters", "vqgan.VQModel.decoder.parameters"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "lr", "=", "self", ".", "learning_rate", "\n", "opt_ae", "=", "torch", ".", "optim", ".", "Adam", "(", "list", "(", "self", ".", "encoder", ".", "parameters", "(", ")", ")", "+", "\n", "list", "(", "self", ".", "decoder", ".", "parameters", "(", ")", ")", "+", "\n", "list", "(", "self", ".", "quantize", ".", "parameters", "(", ")", ")", "+", "\n", "list", "(", "self", ".", "quant_conv", ".", "parameters", "(", ")", ")", "+", "\n", "list", "(", "self", ".", "post_quant_conv", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.9", ")", ")", "\n", "opt_disc", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "loss", ".", "discriminator", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr", ",", "betas", "=", "(", "0.5", ",", "0.9", ")", ")", "\n", "return", "[", "opt_ae", ",", "opt_disc", "]", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_last_layer": [[133, 135], ["None"], "methods", ["None"], ["", "def", "get_last_layer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "decoder", ".", "conv_out", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.log_images": [[136, 149], ["dict", "vqgan.VQModel.get_input", "vqgan.VQModel.to", "vqgan.VQModel.", "vqgan.VQModel.to_rgb", "vqgan.VQModel.to_rgb"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_input", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.to_rgb", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.to_rgb"], ["", "def", "log_images", "(", "self", ",", "batch", ",", "**", "kwargs", ")", ":", "\n", "        ", "log", "=", "dict", "(", ")", "\n", "x", "=", "self", ".", "get_input", "(", "batch", ",", "self", ".", "image_key", ")", "\n", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "xrec", ",", "_", "=", "self", "(", "x", ")", "\n", "if", "x", ".", "shape", "[", "1", "]", ">", "3", ":", "\n", "# colorize with random projection", "\n", "            ", "assert", "xrec", ".", "shape", "[", "1", "]", ">", "3", "\n", "x", "=", "self", ".", "to_rgb", "(", "x", ")", "\n", "xrec", "=", "self", ".", "to_rgb", "(", "xrec", ")", "\n", "", "log", "[", "\"inputs\"", "]", "=", "x", "\n", "log", "[", "\"reconstructions\"", "]", "=", "xrec", "\n", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.to_rgb": [[150, 157], ["torch.conv2d", "torch.conv2d", "hasattr", "vqgan.VQModel.register_buffer", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.conv2d.max", "torch.conv2d.min", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.conv2d.min"], "methods", ["None"], ["", "def", "to_rgb", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "self", ".", "image_key", "==", "\"segmentation\"", "\n", "if", "not", "hasattr", "(", "self", ",", "\"colorize\"", ")", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"colorize\"", ",", "torch", ".", "randn", "(", "3", ",", "x", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", ".", "to", "(", "x", ")", ")", "\n", "", "x", "=", "F", ".", "conv2d", "(", "x", ",", "weight", "=", "self", ".", "colorize", ")", "\n", "x", "=", "2.", "*", "(", "x", "-", "x", ".", "min", "(", ")", ")", "/", "(", "x", ".", "max", "(", ")", "-", "x", ".", "min", "(", ")", ")", "-", "1.", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.GumbelVQ.__init__": [[160, 199], ["vqgan.VQModel.__init__", "image_synthesis.taming.modules.vqvae.quantize.GumbelQuantize", "image_synthesis.utils.misc.instantiate_from_config", "vqgan.GumbelVQ.init_from_ckpt"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.init_from_ckpt"], ["    ", "def", "__init__", "(", "self", ",", "\n", "ddconfig", ",", "\n", "lossconfig", ",", "\n", "n_embed", ",", "\n", "embed_dim", ",", "\n", "temperature_scheduler_config", ",", "\n", "ckpt_path", "=", "None", ",", "\n", "ignore_keys", "=", "[", "]", ",", "\n", "image_key", "=", "\"image\"", ",", "\n", "colorize_nlabels", "=", "None", ",", "\n", "monitor", "=", "None", ",", "\n", "kl_weight", "=", "1e-8", ",", "\n", "remap", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "z_channels", "=", "ddconfig", "[", "\"z_channels\"", "]", "\n", "super", "(", ")", ".", "__init__", "(", "ddconfig", ",", "\n", "lossconfig", ",", "\n", "n_embed", ",", "\n", "embed_dim", ",", "\n", "ckpt_path", "=", "None", ",", "\n", "ignore_keys", "=", "ignore_keys", ",", "\n", "image_key", "=", "image_key", ",", "\n", "colorize_nlabels", "=", "colorize_nlabels", ",", "\n", "monitor", "=", "monitor", ",", "\n", ")", "\n", "\n", "self", ".", "loss", ".", "n_classes", "=", "n_embed", "\n", "self", ".", "vocab_size", "=", "n_embed", "\n", "\n", "self", ".", "quantize", "=", "GumbelQuantize", "(", "z_channels", ",", "embed_dim", ",", "\n", "n_embed", "=", "n_embed", ",", "\n", "kl_weight", "=", "kl_weight", ",", "temp_init", "=", "1.0", ",", "\n", "remap", "=", "remap", ")", "\n", "\n", "self", ".", "temperature_scheduler", "=", "instantiate_from_config", "(", "temperature_scheduler_config", ")", "# annealing of temp", "\n", "\n", "if", "ckpt_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "init_from_ckpt", "(", "ckpt_path", ",", "ignore_keys", "=", "ignore_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.GumbelVQ.temperature_scheduling": [[200, 202], ["vqgan.GumbelVQ.temperature_scheduler"], "methods", ["None"], ["", "", "def", "temperature_scheduling", "(", "self", ")", ":", "\n", "        ", "self", ".", "quantize", ".", "temperature", "=", "self", ".", "temperature_scheduler", "(", "self", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.GumbelVQ.encode_to_prequant": [[203, 207], ["vqgan.GumbelVQ.encoder", "vqgan.GumbelVQ.quant_conv"], "methods", ["None"], ["", "def", "encode_to_prequant", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "encoder", "(", "x", ")", "\n", "h", "=", "self", ".", "quant_conv", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.GumbelVQ.decode_code": [[208, 210], ["None"], "methods", ["None"], ["", "def", "decode_code", "(", "self", ",", "code_b", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.GumbelVQ.training_step": [[211, 231], ["vqgan.GumbelVQ.temperature_scheduling", "vqgan.GumbelVQ.get_input", "vqgan.GumbelVQ.", "vqgan.GumbelVQ.loss", "vqgan.GumbelVQ.log_dict", "vqgan.GumbelVQ.log", "vqgan.GumbelVQ.loss", "vqgan.GumbelVQ.log_dict", "vqgan.GumbelVQ.get_last_layer", "vqgan.GumbelVQ.get_last_layer"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.GumbelVQ.temperature_scheduling", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_input", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_last_layer", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_last_layer"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "optimizer_idx", ")", ":", "\n", "        ", "self", ".", "temperature_scheduling", "(", ")", "\n", "x", "=", "self", ".", "get_input", "(", "batch", ",", "self", ".", "image_key", ")", "\n", "xrec", ",", "qloss", "=", "self", "(", "x", ")", "\n", "\n", "if", "optimizer_idx", "==", "0", ":", "\n", "# autoencode", "\n", "            ", "aeloss", ",", "log_dict_ae", "=", "self", ".", "loss", "(", "qloss", ",", "x", ",", "xrec", ",", "optimizer_idx", ",", "self", ".", "global_step", ",", "\n", "last_layer", "=", "self", ".", "get_last_layer", "(", ")", ",", "split", "=", "\"train\"", ")", "\n", "\n", "self", ".", "log_dict", "(", "log_dict_ae", ",", "prog_bar", "=", "False", ",", "logger", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ")", "\n", "self", ".", "log", "(", "\"temperature\"", ",", "self", ".", "quantize", ".", "temperature", ",", "prog_bar", "=", "False", ",", "logger", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ")", "\n", "return", "aeloss", "\n", "\n", "", "if", "optimizer_idx", "==", "1", ":", "\n", "# discriminator", "\n", "            ", "discloss", ",", "log_dict_disc", "=", "self", ".", "loss", "(", "qloss", ",", "x", ",", "xrec", ",", "optimizer_idx", ",", "self", ".", "global_step", ",", "\n", "last_layer", "=", "self", ".", "get_last_layer", "(", ")", ",", "split", "=", "\"train\"", ")", "\n", "self", ".", "log_dict", "(", "log_dict_disc", ",", "prog_bar", "=", "False", ",", "logger", "=", "True", ",", "on_step", "=", "True", ",", "on_epoch", "=", "True", ")", "\n", "return", "discloss", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.GumbelVQ.validation_step": [[232, 248], ["vqgan.GumbelVQ.get_input", "vqgan.GumbelVQ.", "vqgan.GumbelVQ.loss", "vqgan.GumbelVQ.loss", "vqgan.GumbelVQ.log", "vqgan.GumbelVQ.log", "vqgan.GumbelVQ.log_dict", "vqgan.GumbelVQ.log_dict", "vqgan.GumbelVQ.get_last_layer", "vqgan.GumbelVQ.get_last_layer"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_input", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_last_layer", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_last_layer"], ["", "", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", "=", "self", ".", "get_input", "(", "batch", ",", "self", ".", "image_key", ")", "\n", "xrec", ",", "qloss", "=", "self", "(", "x", ",", "return_pred_indices", "=", "True", ")", "\n", "aeloss", ",", "log_dict_ae", "=", "self", ".", "loss", "(", "qloss", ",", "x", ",", "xrec", ",", "0", ",", "self", ".", "global_step", ",", "\n", "last_layer", "=", "self", ".", "get_last_layer", "(", ")", ",", "split", "=", "\"val\"", ")", "\n", "\n", "discloss", ",", "log_dict_disc", "=", "self", ".", "loss", "(", "qloss", ",", "x", ",", "xrec", ",", "1", ",", "self", ".", "global_step", ",", "\n", "last_layer", "=", "self", ".", "get_last_layer", "(", ")", ",", "split", "=", "\"val\"", ")", "\n", "rec_loss", "=", "log_dict_ae", "[", "\"val/rec_loss\"", "]", "\n", "self", ".", "log", "(", "\"val/rec_loss\"", ",", "rec_loss", ",", "\n", "prog_bar", "=", "True", ",", "logger", "=", "True", ",", "on_step", "=", "False", ",", "on_epoch", "=", "True", ",", "sync_dist", "=", "True", ")", "\n", "self", ".", "log", "(", "\"val/aeloss\"", ",", "aeloss", ",", "\n", "prog_bar", "=", "True", ",", "logger", "=", "True", ",", "on_step", "=", "False", ",", "on_epoch", "=", "True", ",", "sync_dist", "=", "True", ")", "\n", "self", ".", "log_dict", "(", "log_dict_ae", ")", "\n", "self", ".", "log_dict", "(", "log_dict_disc", ")", "\n", "return", "self", ".", "log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.GumbelVQ.log_images": [[249, 262], ["dict", "vqgan.GumbelVQ.get_input", "x.to.to.to", "vqgan.GumbelVQ.encoder", "vqgan.GumbelVQ.quant_conv", "vqgan.GumbelVQ.quantize", "vqgan.GumbelVQ.decode"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.vqgan.VQModel.get_input", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode"], ["", "def", "log_images", "(", "self", ",", "batch", ",", "**", "kwargs", ")", ":", "\n", "        ", "log", "=", "dict", "(", ")", "\n", "x", "=", "self", ".", "get_input", "(", "batch", ",", "self", ".", "image_key", ")", "\n", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "# encode", "\n", "h", "=", "self", ".", "encoder", "(", "x", ")", "\n", "h", "=", "self", ".", "quant_conv", "(", "h", ")", "\n", "quant", ",", "_", ",", "_", "=", "self", ".", "quantize", "(", "h", ")", "\n", "# decode", "\n", "x_rec", "=", "self", ".", "decode", "(", "quant", ")", "\n", "log", "[", "\"inputs\"", "]", "=", "x", "\n", "log", "[", "\"reconstructions\"", "]", "=", "x_rec", "\n", "return", "log", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.codecs.base_codec.BaseCodec.get_tokens": [[7, 16], ["None"], "methods", ["None"], ["    ", "def", "get_tokens", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Input: \n            x: input data\n        Return:\n            indices: B x L, the codebook indices, where L is the length \n                    of flattened feature map size\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.codecs.base_codec.BaseCodec.get_number_of_tokens": [[17, 22], ["None"], "methods", ["None"], ["", "def", "get_number_of_tokens", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return: int, the number of tokens\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.codecs.base_codec.BaseCodec.encode": [[23, 25], ["None"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "img", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.codecs.base_codec.BaseCodec.decode": [[26, 28], ["None"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "img_seq", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.codecs.base_codec.BaseCodec.forward": [[29, 31], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.codecs.base_codec.BaseCodec.train": [[32, 38], ["super().train", "super().train"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "self", ".", "training", "=", "mode", "\n", "if", "self", ".", "trainable", "and", "mode", ":", "\n", "            ", "return", "super", "(", ")", ".", "train", "(", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "train", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.codecs.base_codec.BaseCodec._set_trainable": [[39, 44], ["base_codec.BaseCodec.named_parameters", "base_codec.BaseCodec.eval"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval"], ["", "", "def", "_set_trainable", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "trainable", ":", "\n", "            ", "for", "pn", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "eval", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.text_codec.tokenize.Tokenize.__init__": [[8, 50], ["image_synthesis.modeling.codecs.base_codec.BaseCodec.__init__", "image_synthesis.utils.misc.instantiate_from_config", "image_synthesis.utils.misc.instantiate_from_config"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config"], ["    ", "def", "__init__", "(", "self", ",", "context_length", ":", "int", "=", "256", ",", "\n", "add_start_and_end", ":", "bool", "=", "False", ",", "\n", "just_token", "=", "False", ",", "\n", "with_mask", ":", "bool", "=", "True", ",", "\n", "pad_value", ":", "int", "=", "0", ",", "\n", "clip_embedding", "=", "False", ",", "\n", "condition_emb_config", "=", "None", ",", "\n", "tokenizer_config", "=", "{", "\n", "'target'", ":", "'image_synthesis.modeling.modules.clip.simple_tokenizer.SimpleTokenizer'", ",", "\n", "'params'", ":", "{", "\n", "'end_idx'", ":", "49152", "# 16384 fo DALL-E", "\n", "}", ",", "\n", "}", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        This is a wrapper class for tokenize of texts.\n        For CLIP and DALLE-pytorch tokenize, the default\n        arguments are different:\n\n        CLIP based:\n            context_length: 77\n            add_start_and_end: True\n\n        DALLE-pytorch based:\n            context_length: 256\n            add_start_and_end: False\n        \n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "context_length", "=", "context_length", "\n", "self", ".", "add_start_and_end", "=", "add_start_and_end", "\n", "self", ".", "with_mask", "=", "with_mask", "\n", "self", ".", "pad_value", "=", "pad_value", "\n", "self", ".", "just_token", "=", "just_token", "\n", "self", ".", "trainable", "=", "False", "\n", "self", ".", "condition_emb", "=", "None", "\n", "self", ".", "clip_embedding", "=", "clip_embedding", "\n", "if", "self", ".", "clip_embedding", "==", "True", ":", "\n", "            ", "assert", "condition_emb_config", "!=", "None", "\n", "self", ".", "condition_emb", "=", "instantiate_from_config", "(", "condition_emb_config", ")", "\n", "\n", "", "self", ".", "tokenizer", "=", "instantiate_from_config", "(", "tokenizer_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.text_codec.tokenize.Tokenize.__repr__": [[51, 55], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rep", "=", "\"Tokenize for text\\n\\tcontent_length: {}\\n\\tadd_start_and_end: {}\\n\\twith_mask: {}\"", ".", "format", "(", "self", ".", "context_length", ",", "self", ".", "add_start_and_end", ",", "self", ".", "with_mask", ")", "\n", "return", "rep", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.text_codec.tokenize.Tokenize.check_length": [[56, 58], ["len"], "methods", ["None"], ["", "def", "check_length", "(", "self", ",", "token", ")", ":", "\n", "        ", "return", "len", "(", "token", ")", "<=", "self", ".", "context_length", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.text_codec.tokenize.Tokenize.get_tokens": [[59, 79], ["image_synthesis.modeling.modules.clip.clip.tokenize", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "image_synthesis.modeling.modules.clip.clip.tokenize.Tokenize.condition_emb", "image_synthesis.modeling.modules.clip.clip.tokenize.Tokenize.detach", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "image_synthesis.modeling.modules.clip.clip.tokenize.Tokenize.condition_emb", "image_synthesis.modeling.modules.clip.clip.tokenize.Tokenize.detach", "text_token[].cuda", "text_token[].cuda"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.tokenize"], ["", "def", "get_tokens", "(", "self", ",", "text", ",", "**", "kwargs", ")", ":", "\n", "        ", "text_token", "=", "tokenize", "(", "text", ",", "context_length", "=", "self", ".", "context_length", ",", "\n", "add_start_and_end", "=", "self", ".", "add_start_and_end", ",", "\n", "with_mask", "=", "self", ".", "with_mask", ",", "pad_value", "=", "self", ".", "pad_value", ",", "\n", "tokenizer", "=", "self", ".", "tokenizer", ",", "\n", "just_token", "=", "self", ".", "just_token", ")", "\n", "if", "self", ".", "clip_embedding", "==", "False", ":", "\n", "            ", "return", "text_token", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "condition_emb", ".", "additional_last_embedding", "==", "True", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "cond_emb", ",", "last_embedding", "=", "self", ".", "condition_emb", "(", "text_token", "[", "'token'", "]", ".", "cuda", "(", ")", ")", "\n", "text_token", "[", "'embed_token'", "]", "=", "cond_emb", ".", "detach", "(", ")", "\n", "text_token", "[", "'last_embed'", "]", "=", "last_embedding", "\n", "", "", "else", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "cond_emb", "=", "self", ".", "condition_emb", "(", "text_token", "[", "'token'", "]", ".", "cuda", "(", ")", ")", "\n", "text_token", "[", "'embed_token'", "]", "=", "cond_emb", ".", "detach", "(", ")", "\n", "\n", "", "", "return", "text_token", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.Encoder.__init__": [[18, 23], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "quant_conv", ",", "quantize", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "quant_conv", "=", "quant_conv", "\n", "self", ".", "quantize", "=", "quantize", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.Encoder.forward": [[24, 31], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "taming_gumbel_vqvae.Encoder.encoder", "taming_gumbel_vqvae.Encoder.quant_conv", "taming_gumbel_vqvae.Encoder.quantize", "indices.view"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "2", "*", "x", "-", "1", "\n", "h", "=", "self", ".", "encoder", "(", "x", ")", "\n", "h", "=", "self", ".", "quant_conv", "(", "h", ")", "\n", "quant", ",", "_", ",", "[", "_", ",", "_", ",", "indices", "]", "=", "self", ".", "quantize", "(", "h", ")", "\n", "return", "indices", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.Decoder.__init__": [[33, 40], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "decoder", ",", "post_quant_conv", ",", "quantize", ",", "w", "=", "16", ",", "h", "=", "16", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "post_quant_conv", "=", "post_quant_conv", "\n", "self", ".", "quantize", "=", "quantize", "\n", "self", ".", "w", "=", "w", "\n", "self", ".", "h", "=", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.Decoder.forward": [[41, 49], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "taming_gumbel_vqvae.Decoder.quantize.get_codebook_entry", "taming_gumbel_vqvae.Decoder.post_quant_conv", "taming_gumbel_vqvae.Decoder.decoder", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "indices.view"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.VectorQuantizer2.get_codebook_entry"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "indices", ")", ":", "\n", "        ", "z", "=", "self", ".", "quantize", ".", "get_codebook_entry", "(", "indices", ".", "view", "(", "-", "1", ")", ",", "shape", "=", "(", "indices", ".", "shape", "[", "0", "]", ",", "self", ".", "h", ",", "self", ".", "w", ",", "-", "1", ")", ")", "\n", "quant", "=", "self", ".", "post_quant_conv", "(", "z", ")", "\n", "dec", "=", "self", ".", "decoder", "(", "quant", ")", "\n", "x", "=", "torch", ".", "clamp", "(", "dec", ",", "-", "1.", ",", "1.", ")", "\n", "x", "=", "(", "x", "+", "1.", ")", "/", "2.", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingFFHQVQVAE.__init__": [[51, 81], ["image_synthesis.modeling.codecs.base_codec.BaseCodec.__init__", "taming_gumbel_vqvae.TamingFFHQVQVAE.LoadModel", "taming_gumbel_vqvae.Encoder", "taming_gumbel_vqvae.Decoder", "taming_gumbel_vqvae.TamingFFHQVQVAE._set_trainable", "torch.load", "torch.load", "torch.load", "torch.load", "enumerate", "taming_gumbel_vqvae.TamingFFHQVQVAE.quantize_to_full.long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.LoadModel", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.codecs.base_codec.BaseCodec._set_trainable", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "trainable", "=", "False", ",", "\n", "token_shape", "=", "[", "16", ",", "16", "]", ",", "\n", "config_path", "=", "'OUTPUT/pretrained_model/taming_dvae/vqgan_ffhq_f16_1024.yaml'", ",", "\n", "ckpt_path", "=", "'OUTPUT/pretrained_model/taming_dvae/vqgan_ffhq_f16_1024.pth'", ",", "\n", "num_tokens", "=", "1024", ",", "\n", "quantize_number", "=", "0", ",", "\n", "mapping_path", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "self", ".", "LoadModel", "(", "config_path", ",", "ckpt_path", ")", "\n", "\n", "self", ".", "enc", "=", "Encoder", "(", "model", ".", "encoder", ",", "model", ".", "quant_conv", ",", "model", ".", "quantize", ")", "\n", "self", ".", "dec", "=", "Decoder", "(", "model", ".", "decoder", ",", "model", ".", "post_quant_conv", ",", "model", ".", "quantize", ",", "token_shape", "[", "0", "]", ",", "token_shape", "[", "1", "]", ")", "\n", "\n", "self", ".", "num_tokens", "=", "num_tokens", "\n", "self", ".", "quantize_number", "=", "quantize_number", "\n", "if", "self", ".", "quantize_number", "!=", "0", "and", "mapping_path", "!=", "None", ":", "\n", "            ", "self", ".", "full_to_quantize", "=", "torch", ".", "load", "(", "mapping_path", ")", "\n", "self", ".", "quantize_to_full", "=", "torch", ".", "zeros", "(", "self", ".", "quantize_number", ")", "-", "1", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "self", ".", "full_to_quantize", ")", ":", "\n", "                ", "if", "self", ".", "quantize_to_full", "[", "i", "]", "==", "-", "1", ":", "\n", "                    ", "self", ".", "quantize_to_full", "[", "i", "]", "=", "idx", "\n", "", "", "self", ".", "quantize_to_full", "=", "self", ".", "quantize_to_full", ".", "long", "(", ")", "\n", "\n", "", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "token_shape", "=", "token_shape", "\n", "self", ".", "_set_trainable", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingFFHQVQVAE.LoadModel": [[82, 91], ["omegaconf.OmegaConf.load", "image_synthesis.taming.models.cond_transformer.Net2NetTransformer", "image_synthesis.taming.models.cond_transformer.Net2NetTransformer.load_state_dict", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load"], ["", "def", "LoadModel", "(", "self", ",", "config_path", ",", "ckpt_path", ")", ":", "\n", "        ", "config", "=", "OmegaConf", ".", "load", "(", "config_path", ")", "\n", "# model = instantiate_from_config(config.model)", "\n", "model", "=", "Net2NetTransformer", "(", "**", "config", ".", "model", ".", "params", ")", "\n", "sd", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "\"cpu\"", ")", "[", "\"state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "sd", ",", "strict", "=", "False", ")", "\n", "if", "(", "isinstance", "(", "model", ",", "Net2NetTransformer", ")", ")", ":", "\n", "            ", "model", "=", "model", ".", "first_stage_model", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingFFHQVQVAE.device": [[92, 96], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "        ", "return", "self", ".", "enc", ".", "quant_conv", ".", "weight", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingFFHQVQVAE.preprocess": [[97, 103], ["imgs.div.div.div"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"\n        imgs: B x C x H x W, in the range 0-255\n        \"\"\"", "\n", "imgs", "=", "imgs", ".", "div", "(", "255", ")", "# map to 0 - 1", "\n", "return", "imgs", "\n", "# return map_pixels(imgs)   ", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingFFHQVQVAE.postprocess": [[105, 111], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"\n        imgs: B x C x H x W, in the range 0-1\n        \"\"\"", "\n", "imgs", "=", "imgs", "*", "255", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingFFHQVQVAE.get_tokens": [[112, 120], ["taming_gumbel_vqvae.TamingFFHQVQVAE.preprocess", "taming_gumbel_vqvae.TamingFFHQVQVAE.enc"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.preprocess"], ["", "def", "get_tokens", "(", "self", ",", "imgs", ",", "**", "kwargs", ")", ":", "\n", "        ", "imgs", "=", "self", ".", "preprocess", "(", "imgs", ")", "\n", "code", "=", "self", ".", "enc", "(", "imgs", ")", "\n", "if", "self", ".", "quantize_number", "!=", "0", ":", "\n", "            ", "code", "=", "self", ".", "full_to_quantize", "[", "code", "]", "\n", "", "output", "=", "{", "'token'", ":", "code", "}", "\n", "# output = {'token': rearrange(code, 'b h w -> b (h w)')}", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingFFHQVQVAE.decode": [[121, 130], ["einops.rearrange", "taming_gumbel_vqvae.TamingFFHQVQVAE.dec", "taming_gumbel_vqvae.TamingFFHQVQVAE.postprocess", "taming_gumbel_vqvae.TamingFFHQVQVAE.quantize_to_full[].type_as", "int", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.postprocess"], ["", "def", "decode", "(", "self", ",", "img_seq", ")", ":", "\n", "        ", "if", "self", ".", "quantize_number", "!=", "0", ":", "\n", "            ", "img_seq", "=", "self", ".", "quantize_to_full", "[", "img_seq", "]", ".", "type_as", "(", "img_seq", ")", "\n", "", "b", ",", "n", "=", "img_seq", ".", "shape", "\n", "img_seq", "=", "rearrange", "(", "img_seq", ",", "'b (h w) -> b h w'", ",", "h", "=", "int", "(", "math", ".", "sqrt", "(", "n", ")", ")", ")", "\n", "\n", "x_rec", "=", "self", ".", "dec", "(", "img_seq", ")", "\n", "x_rec", "=", "self", ".", "postprocess", "(", "x_rec", ")", "\n", "return", "x_rec", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingVQVAE.__init__": [[133, 163], ["image_synthesis.modeling.codecs.base_codec.BaseCodec.__init__", "taming_gumbel_vqvae.TamingVQVAE.LoadModel", "taming_gumbel_vqvae.Encoder", "taming_gumbel_vqvae.Decoder", "taming_gumbel_vqvae.TamingVQVAE._set_trainable", "torch.load", "torch.load", "torch.load", "torch.load", "enumerate", "taming_gumbel_vqvae.TamingVQVAE.quantize_to_full.long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.LoadModel", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.codecs.base_codec.BaseCodec._set_trainable", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "trainable", "=", "False", ",", "\n", "token_shape", "=", "[", "16", ",", "16", "]", ",", "\n", "config_path", "=", "'OUTPUT/pretrained_model/taming_dvae/vqgan_imagenet_f16_16384.yaml'", ",", "\n", "ckpt_path", "=", "'OUTPUT/pretrained_model/taming_dvae/vqgan_imagenet_f16_16384.pth'", ",", "\n", "num_tokens", "=", "16384", ",", "\n", "quantize_number", "=", "974", ",", "\n", "mapping_path", "=", "'./help_folder/statistics/taming_vqvae_974.pt'", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "self", ".", "LoadModel", "(", "config_path", ",", "ckpt_path", ")", "\n", "\n", "self", ".", "enc", "=", "Encoder", "(", "model", ".", "encoder", ",", "model", ".", "quant_conv", ",", "model", ".", "quantize", ")", "\n", "self", ".", "dec", "=", "Decoder", "(", "model", ".", "decoder", ",", "model", ".", "post_quant_conv", ",", "model", ".", "quantize", ",", "token_shape", "[", "0", "]", ",", "token_shape", "[", "1", "]", ")", "\n", "\n", "self", ".", "num_tokens", "=", "num_tokens", "\n", "self", ".", "quantize_number", "=", "quantize_number", "\n", "if", "self", ".", "quantize_number", "!=", "0", "and", "mapping_path", "!=", "None", ":", "\n", "            ", "self", ".", "full_to_quantize", "=", "torch", ".", "load", "(", "mapping_path", ")", "\n", "self", ".", "quantize_to_full", "=", "torch", ".", "zeros", "(", "self", ".", "quantize_number", ")", "-", "1", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "self", ".", "full_to_quantize", ")", ":", "\n", "                ", "if", "self", ".", "quantize_to_full", "[", "i", "]", "==", "-", "1", ":", "\n", "                    ", "self", ".", "quantize_to_full", "[", "i", "]", "=", "idx", "\n", "", "", "self", ".", "quantize_to_full", "=", "self", ".", "quantize_to_full", ".", "long", "(", ")", "\n", "\n", "", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "token_shape", "=", "token_shape", "\n", "self", ".", "_set_trainable", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingVQVAE.LoadModel": [[164, 170], ["omegaconf.OmegaConf.load", "image_synthesis.taming.models.vqgan.VQModel", "image_synthesis.taming.models.vqgan.VQModel.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load"], ["", "def", "LoadModel", "(", "self", ",", "config_path", ",", "ckpt_path", ")", ":", "\n", "        ", "config", "=", "OmegaConf", ".", "load", "(", "config_path", ")", "\n", "model", "=", "VQModel", "(", "**", "config", ".", "model", ".", "params", ")", "\n", "sd", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "\"cpu\"", ")", "[", "\"state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "sd", ",", "strict", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingVQVAE.device": [[171, 175], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "        ", "return", "self", ".", "enc", ".", "quant_conv", ".", "weight", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingVQVAE.preprocess": [[176, 182], ["imgs.div.div.div"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"\n        imgs: B x C x H x W, in the range 0-255\n        \"\"\"", "\n", "imgs", "=", "imgs", ".", "div", "(", "255", ")", "# map to 0 - 1", "\n", "return", "imgs", "\n", "# return map_pixels(imgs)   ", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingVQVAE.postprocess": [[184, 190], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"\n        imgs: B x C x H x W, in the range 0-1\n        \"\"\"", "\n", "imgs", "=", "imgs", "*", "255", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingVQVAE.get_tokens": [[191, 199], ["taming_gumbel_vqvae.TamingVQVAE.preprocess", "taming_gumbel_vqvae.TamingVQVAE.enc"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.preprocess"], ["", "def", "get_tokens", "(", "self", ",", "imgs", ",", "**", "kwargs", ")", ":", "\n", "        ", "imgs", "=", "self", ".", "preprocess", "(", "imgs", ")", "\n", "code", "=", "self", ".", "enc", "(", "imgs", ")", "\n", "if", "self", ".", "quantize_number", "!=", "0", ":", "\n", "            ", "code", "=", "self", ".", "full_to_quantize", "[", "code", "]", "\n", "", "output", "=", "{", "'token'", ":", "code", "}", "\n", "# output = {'token': rearrange(code, 'b h w -> b (h w)')}", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingVQVAE.decode": [[200, 209], ["einops.rearrange", "taming_gumbel_vqvae.TamingVQVAE.dec", "taming_gumbel_vqvae.TamingVQVAE.postprocess", "taming_gumbel_vqvae.TamingVQVAE.quantize_to_full[].type_as", "int", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.postprocess"], ["", "def", "decode", "(", "self", ",", "img_seq", ")", ":", "\n", "        ", "if", "self", ".", "quantize_number", "!=", "0", ":", "\n", "            ", "img_seq", "=", "self", ".", "quantize_to_full", "[", "img_seq", "]", ".", "type_as", "(", "img_seq", ")", "\n", "", "b", ",", "n", "=", "img_seq", ".", "shape", "\n", "img_seq", "=", "rearrange", "(", "img_seq", ",", "'b (h w) -> b h w'", ",", "h", "=", "int", "(", "math", ".", "sqrt", "(", "n", ")", ")", ")", "\n", "\n", "x_rec", "=", "self", ".", "dec", "(", "img_seq", ")", "\n", "x_rec", "=", "self", ".", "postprocess", "(", "x_rec", ")", "\n", "return", "x_rec", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.__init__": [[211, 241], ["image_synthesis.modeling.codecs.base_codec.BaseCodec.__init__", "taming_gumbel_vqvae.TamingGumbelVQVAE.LoadModel", "taming_gumbel_vqvae.Encoder", "taming_gumbel_vqvae.Decoder", "taming_gumbel_vqvae.TamingGumbelVQVAE._set_trainable", "torch.load", "torch.load", "torch.load", "torch.load", "enumerate", "taming_gumbel_vqvae.TamingGumbelVQVAE.quantize_to_full.long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.LoadModel", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.codecs.base_codec.BaseCodec._set_trainable", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "trainable", "=", "False", ",", "\n", "token_shape", "=", "[", "32", ",", "32", "]", ",", "\n", "config_path", "=", "'OUTPUT/pretrained_model/taming_dvae/taming_f8_8192_openimages.yaml'", ",", "\n", "ckpt_path", "=", "'OUTPUT/pretrained_model/taming_dvae/taming_f8_8192_openimages_last.pth'", ",", "\n", "num_tokens", "=", "8192", ",", "\n", "quantize_number", "=", "2887", ",", "\n", "mapping_path", "=", "'./help_folder/statistics/taming_vqvae_2887.pt'", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "self", ".", "LoadModel", "(", "config_path", ",", "ckpt_path", ")", "\n", "\n", "self", ".", "enc", "=", "Encoder", "(", "model", ".", "encoder", ",", "model", ".", "quant_conv", ",", "model", ".", "quantize", ")", "\n", "self", ".", "dec", "=", "Decoder", "(", "model", ".", "decoder", ",", "model", ".", "post_quant_conv", ",", "model", ".", "quantize", ",", "token_shape", "[", "0", "]", ",", "token_shape", "[", "1", "]", ")", "\n", "\n", "self", ".", "num_tokens", "=", "num_tokens", "\n", "self", ".", "quantize_number", "=", "quantize_number", "\n", "if", "self", ".", "quantize_number", "!=", "0", "and", "mapping_path", "!=", "None", ":", "\n", "            ", "self", ".", "full_to_quantize", "=", "torch", ".", "load", "(", "mapping_path", ")", "\n", "self", ".", "quantize_to_full", "=", "torch", ".", "zeros", "(", "self", ".", "quantize_number", ")", "-", "1", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "self", ".", "full_to_quantize", ")", ":", "\n", "                ", "if", "self", ".", "quantize_to_full", "[", "i", "]", "==", "-", "1", ":", "\n", "                    ", "self", ".", "quantize_to_full", "[", "i", "]", "=", "idx", "\n", "", "", "self", ".", "quantize_to_full", "=", "self", ".", "quantize_to_full", ".", "long", "(", ")", "\n", "\n", "", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "token_shape", "=", "token_shape", "\n", "self", ".", "_set_trainable", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.LoadModel": [[242, 248], ["omegaconf.OmegaConf.load", "image_synthesis.taming.models.vqgan.GumbelVQ", "image_synthesis.taming.models.vqgan.GumbelVQ.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load"], ["", "def", "LoadModel", "(", "self", ",", "config_path", ",", "ckpt_path", ")", ":", "\n", "        ", "config", "=", "OmegaConf", ".", "load", "(", "config_path", ")", "\n", "model", "=", "GumbelVQ", "(", "**", "config", ".", "model", ".", "params", ")", "\n", "sd", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "\"cpu\"", ")", "[", "\"state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "sd", ",", "strict", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.device": [[249, 253], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "        ", "return", "self", ".", "enc", ".", "quant_conv", ".", "weight", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.preprocess": [[254, 260], ["imgs.div.div.div"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"\n        imgs: B x C x H x W, in the range 0-255\n        \"\"\"", "\n", "imgs", "=", "imgs", ".", "div", "(", "255", ")", "# map to 0 - 1", "\n", "return", "imgs", "\n", "# return map_pixels(imgs)   ", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.postprocess": [[262, 268], ["None"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"\n        imgs: B x C x H x W, in the range 0-1\n        \"\"\"", "\n", "imgs", "=", "imgs", "*", "255", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.get_tokens": [[269, 277], ["taming_gumbel_vqvae.TamingGumbelVQVAE.preprocess", "taming_gumbel_vqvae.TamingGumbelVQVAE.enc"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.preprocess"], ["", "def", "get_tokens", "(", "self", ",", "imgs", ",", "**", "kwargs", ")", ":", "\n", "        ", "imgs", "=", "self", ".", "preprocess", "(", "imgs", ")", "\n", "code", "=", "self", ".", "enc", "(", "imgs", ")", "\n", "if", "self", ".", "quantize_number", "!=", "0", ":", "\n", "            ", "code", "=", "self", ".", "full_to_quantize", "[", "code", "]", "\n", "", "output", "=", "{", "'token'", ":", "code", "}", "\n", "# output = {'token': rearrange(code, 'b h w -> b (h w)')}", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.decode": [[278, 287], ["einops.rearrange", "taming_gumbel_vqvae.TamingGumbelVQVAE.dec", "taming_gumbel_vqvae.TamingGumbelVQVAE.postprocess", "taming_gumbel_vqvae.TamingGumbelVQVAE.quantize_to_full[].type_as", "int", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.postprocess"], ["", "def", "decode", "(", "self", ",", "img_seq", ")", ":", "\n", "        ", "if", "self", ".", "quantize_number", "!=", "0", ":", "\n", "            ", "img_seq", "=", "self", ".", "quantize_to_full", "[", "img_seq", "]", ".", "type_as", "(", "img_seq", ")", "\n", "", "b", ",", "n", "=", "img_seq", ".", "shape", "\n", "img_seq", "=", "rearrange", "(", "img_seq", ",", "'b (h w) -> b h w'", ",", "h", "=", "int", "(", "math", ".", "sqrt", "(", "n", ")", ")", ")", "\n", "\n", "x_rec", "=", "self", ".", "dec", "(", "img_seq", ")", "\n", "x_rec", "=", "self", ".", "postprocess", "(", "x_rec", ")", "\n", "return", "x_rec", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.taming.lr_scheduler.LambdaWarmUpCosineScheduler.__init__": [[8, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "warm_up_steps", ",", "lr_min", ",", "lr_max", ",", "lr_start", ",", "max_decay_steps", ",", "verbosity_interval", "=", "0", ")", ":", "\n", "        ", "self", ".", "lr_warm_up_steps", "=", "warm_up_steps", "\n", "self", ".", "lr_start", "=", "lr_start", "\n", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "lr_max_decay_steps", "=", "max_decay_steps", "\n", "self", ".", "last_lr", "=", "0.", "\n", "self", ".", "verbosity_interval", "=", "verbosity_interval", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.taming.lr_scheduler.LambdaWarmUpCosineScheduler.schedule": [[17, 31], ["min", "print", "numpy.cos"], "methods", ["None"], ["", "def", "schedule", "(", "self", ",", "n", ")", ":", "\n", "        ", "if", "self", ".", "verbosity_interval", ">", "0", ":", "\n", "            ", "if", "n", "%", "self", ".", "verbosity_interval", "==", "0", ":", "print", "(", "f\"current step: {n}, recent lr-multiplier: {self.last_lr}\"", ")", "\n", "", "if", "n", "<", "self", ".", "lr_warm_up_steps", ":", "\n", "            ", "lr", "=", "(", "self", ".", "lr_max", "-", "self", ".", "lr_start", ")", "/", "self", ".", "lr_warm_up_steps", "*", "n", "+", "self", ".", "lr_start", "\n", "self", ".", "last_lr", "=", "lr", "\n", "return", "lr", "\n", "", "else", ":", "\n", "            ", "t", "=", "(", "n", "-", "self", ".", "lr_warm_up_steps", ")", "/", "(", "self", ".", "lr_max_decay_steps", "-", "self", ".", "lr_warm_up_steps", ")", "\n", "t", "=", "min", "(", "t", ",", "1.0", ")", "\n", "lr", "=", "self", ".", "lr_min", "+", "0.5", "*", "(", "self", ".", "lr_max", "-", "self", ".", "lr_min", ")", "*", "(", "\n", "1", "+", "np", ".", "cos", "(", "t", "*", "np", ".", "pi", ")", ")", "\n", "self", ".", "last_lr", "=", "lr", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.taming.lr_scheduler.LambdaWarmUpCosineScheduler.__call__": [[32, 34], ["lr_scheduler.LambdaWarmUpCosineScheduler.schedule"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.taming.lr_scheduler.LambdaWarmUpCosineScheduler.schedule"], ["", "", "def", "__call__", "(", "self", ",", "n", ")", ":", "\n", "        ", "return", "self", ".", "schedule", "(", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.taming.util.KeyNotFoundError.__init__": [[48, 60], ["list", "list.append", "Exception.__init__", "list.append", "list.append"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cause", ",", "keys", "=", "None", ",", "visited", "=", "None", ")", ":", "\n", "        ", "self", ".", "cause", "=", "cause", "\n", "self", ".", "keys", "=", "keys", "\n", "self", ".", "visited", "=", "visited", "\n", "messages", "=", "list", "(", ")", "\n", "if", "keys", "is", "not", "None", ":", "\n", "            ", "messages", ".", "append", "(", "\"Key not found: {}\"", ".", "format", "(", "keys", ")", ")", "\n", "", "if", "visited", "is", "not", "None", ":", "\n", "            ", "messages", ".", "append", "(", "\"Visited: {}\"", ".", "format", "(", "visited", ")", ")", "\n", "", "messages", ".", "append", "(", "\"Cause:\\n{}\"", ".", "format", "(", "cause", ")", ")", "\n", "message", "=", "\"\\n\"", ".", "join", "(", "messages", ")", "\n", "super", "(", ")", ".", "__init__", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.taming.util.download": [[18, 28], ["os.makedirs", "requests.get", "int", "os.path.split", "r.headers.get", "tqdm.tqdm", "open", "r.iter_content", "f.write", "pbar.update"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update"], ["def", "download", "(", "url", ",", "local_path", ",", "chunk_size", "=", "1024", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "local_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "with", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "as", "r", ":", "\n", "        ", "total_size", "=", "int", "(", "r", ".", "headers", ".", "get", "(", "\"content-length\"", ",", "0", ")", ")", "\n", "with", "tqdm", "(", "total", "=", "total_size", ",", "unit", "=", "\"B\"", ",", "unit_scale", "=", "True", ")", "as", "pbar", ":", "\n", "            ", "with", "open", "(", "local_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "for", "data", "in", "r", ".", "iter_content", "(", "chunk_size", "=", "chunk_size", ")", ":", "\n", "                    ", "if", "data", ":", "\n", "                        ", "f", ".", "write", "(", "data", ")", "\n", "pbar", ".", "update", "(", "chunk_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.taming.util.md5_hash": [[30, 34], ["hashlib.md5().hexdigest", "open", "f.read", "hashlib.md5"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["", "", "", "", "", "", "def", "md5_hash", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "read", "(", ")", "\n", "", "return", "hashlib", ".", "md5", "(", "content", ")", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.taming.util.get_ckpt_path": [[36, 45], ["os.path.join", "print", "util.download", "util.md5_hash", "os.path.exists", "util.md5_hash"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.taming.util.download", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.taming.util.md5_hash", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.taming.util.md5_hash"], ["", "def", "get_ckpt_path", "(", "name", ",", "root", ",", "check", "=", "False", ")", ":", "\n", "    ", "assert", "name", "in", "URL_MAP", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "CKPT_MAP", "[", "name", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", "or", "(", "check", "and", "not", "md5_hash", "(", "path", ")", "==", "MD5_MAP", "[", "name", "]", ")", ":", "\n", "        ", "print", "(", "\"Downloading {} model from {} to {}\"", ".", "format", "(", "name", ",", "URL_MAP", "[", "name", "]", ",", "path", ")", ")", "\n", "download", "(", "URL_MAP", "[", "name", "]", ",", "path", ")", "\n", "md5", "=", "md5_hash", "(", "path", ")", "\n", "assert", "md5", "==", "MD5_MAP", "[", "name", "]", ",", "md5", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.taming.util.retrieve": [[62, 143], ["key.split", "callable", "callable", "list_or_dict.", "list_or_dict.", "isinstance", "util.KeyNotFoundError", "util.KeyNotFoundError", "ValueError", "int"], "function", ["None"], ["", "", "def", "retrieve", "(", "\n", "list_or_dict", ",", "key", ",", "splitval", "=", "\"/\"", ",", "default", "=", "None", ",", "expand", "=", "True", ",", "pass_success", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Given a nested list or dict return the desired value at key expanding\n    callable nodes if necessary and :attr:`expand` is ``True``. The expansion\n    is done in-place.\n\n    Parameters\n    ----------\n        list_or_dict : list or dict\n            Possibly nested list or dictionary.\n        key : str\n            key/to/value, path like string describing all keys necessary to\n            consider to get to the desired value. List indices can also be\n            passed here.\n        splitval : str\n            String that defines the delimiter between keys of the\n            different depth levels in `key`.\n        default : obj\n            Value returned if :attr:`key` is not found.\n        expand : bool\n            Whether to expand callable nodes on the path or not.\n\n    Returns\n    -------\n        The desired value or if :attr:`default` is not ``None`` and the\n        :attr:`key` is not found returns ``default``.\n\n    Raises\n    ------\n        Exception if ``key`` not in ``list_or_dict`` and :attr:`default` is\n        ``None``.\n    \"\"\"", "\n", "\n", "keys", "=", "key", ".", "split", "(", "splitval", ")", "\n", "\n", "success", "=", "True", "\n", "try", ":", "\n", "        ", "visited", "=", "[", "]", "\n", "parent", "=", "None", "\n", "last_key", "=", "None", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "if", "callable", "(", "list_or_dict", ")", ":", "\n", "                ", "if", "not", "expand", ":", "\n", "                    ", "raise", "KeyNotFoundError", "(", "\n", "ValueError", "(", "\n", "\"Trying to get past callable node with expand=False.\"", "\n", ")", ",", "\n", "keys", "=", "keys", ",", "\n", "visited", "=", "visited", ",", "\n", ")", "\n", "", "list_or_dict", "=", "list_or_dict", "(", ")", "\n", "parent", "[", "last_key", "]", "=", "list_or_dict", "\n", "\n", "", "last_key", "=", "key", "\n", "parent", "=", "list_or_dict", "\n", "\n", "try", ":", "\n", "                ", "if", "isinstance", "(", "list_or_dict", ",", "dict", ")", ":", "\n", "                    ", "list_or_dict", "=", "list_or_dict", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "list_or_dict", "=", "list_or_dict", "[", "int", "(", "key", ")", "]", "\n", "", "", "except", "(", "KeyError", ",", "IndexError", ",", "ValueError", ")", "as", "e", ":", "\n", "                ", "raise", "KeyNotFoundError", "(", "e", ",", "keys", "=", "keys", ",", "visited", "=", "visited", ")", "\n", "\n", "", "visited", "+=", "[", "key", "]", "\n", "# final expansion of retrieved value", "\n", "", "if", "expand", "and", "callable", "(", "list_or_dict", ")", ":", "\n", "            ", "list_or_dict", "=", "list_or_dict", "(", ")", "\n", "parent", "[", "last_key", "]", "=", "list_or_dict", "\n", "", "", "except", "KeyNotFoundError", "as", "e", ":", "\n", "        ", "if", "default", "is", "None", ":", "\n", "            ", "raise", "e", "\n", "", "else", ":", "\n", "            ", "list_or_dict", "=", "default", "\n", "success", "=", "False", "\n", "\n", "", "", "if", "not", "pass_success", ":", "\n", "        ", "return", "list_or_dict", "\n", "", "else", ":", "\n", "        ", "return", "list_or_dict", ",", "success", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.modules.util.ActNorm.__init__": [[11, 21], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "util.ActNorm.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["}", "\n", "\n", "MD5_MAP", "=", "{", "\n", "\"vgg_lpips\"", ":", "\"d507d7349b931f0638a25a48a722f98a\"", "\n", "}", "\n", "\n", "\n", "def", "download", "(", "url", ",", "local_path", ",", "chunk_size", "=", "1024", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "local_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "with", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "as", "r", ":", "\n", "        ", "total_size", "=", "int", "(", "r", ".", "headers", ".", "get", "(", "\"content-length\"", ",", "0", ")", ")", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.modules.util.ActNorm.initialize": [[22, 42], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "input.permute().contiguous().view", "input.permute().contiguous().view.mean().unsqueeze().unsqueeze().unsqueeze().permute", "input.permute().contiguous().view.std().unsqueeze().unsqueeze().unsqueeze().permute", "util.ActNorm.loc.data.copy_", "util.ActNorm.scale.data.copy_", "input.permute().contiguous", "input.permute().contiguous().view.mean().unsqueeze().unsqueeze().unsqueeze", "input.permute().contiguous().view.std().unsqueeze().unsqueeze().unsqueeze", "input.permute", "input.permute().contiguous().view.mean().unsqueeze().unsqueeze", "input.permute().contiguous().view.std().unsqueeze().unsqueeze", "input.permute().contiguous().view.mean().unsqueeze", "input.permute().contiguous().view.std().unsqueeze", "input.permute().contiguous().view.mean", "input.permute().contiguous().view.std"], "methods", ["None"], ["with", "tqdm", "(", "total", "=", "total_size", ",", "unit", "=", "\"B\"", ",", "unit_scale", "=", "True", ")", "as", "pbar", ":", "\n", "            ", "with", "open", "(", "local_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "for", "data", "in", "r", ".", "iter_content", "(", "chunk_size", "=", "chunk_size", ")", ":", "\n", "                    ", "if", "data", ":", "\n", "                        ", "f", ".", "write", "(", "data", ")", "\n", "pbar", ".", "update", "(", "chunk_size", ")", "\n", "\n", "\n", "", "", "", "", "", "", "def", "md5_hash", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "read", "(", ")", "\n", "", "return", "hashlib", ".", "md5", "(", "content", ")", ".", "hexdigest", "(", ")", "\n", "\n", "\n", "", "def", "get_ckpt_path", "(", "name", ",", "root", ",", "check", "=", "False", ")", ":", "\n", "    ", "assert", "name", "in", "URL_MAP", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "CKPT_MAP", "[", "name", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", "or", "(", "check", "and", "not", "md5_hash", "(", "path", ")", "==", "MD5_MAP", "[", "name", "]", ")", ":", "\n", "        ", "print", "(", "\"Downloading {} model from {} to {}\"", ".", "format", "(", "name", ",", "URL_MAP", "[", "name", "]", ",", "path", ")", ")", "\n", "download", "(", "URL_MAP", "[", "name", "]", ",", "path", ")", "\n", "md5", "=", "md5_hash", "(", "path", ")", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.modules.util.ActNorm.forward": [[43, 70], ["util.ActNorm.reverse", "len", "util.ActNorm.initialize", "util.ActNorm.initialized.fill_", "h.squeeze().squeeze.squeeze().squeeze.squeeze().squeeze", "torch.log", "torch.log", "torch.log", "torch.log", "util.ActNorm.initialized.item", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "h.squeeze().squeeze.squeeze().squeeze.squeeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.modules.util.ActNorm.reverse", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.initialize"], ["assert", "md5", "==", "MD5_MAP", "[", "name", "]", ",", "md5", "\n", "", "return", "path", "\n", "\n", "\n", "", "class", "KeyNotFoundError", "(", "Exception", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "cause", ",", "keys", "=", "None", ",", "visited", "=", "None", ")", ":", "\n", "        ", "self", ".", "cause", "=", "cause", "\n", "self", ".", "keys", "=", "keys", "\n", "self", ".", "visited", "=", "visited", "\n", "messages", "=", "list", "(", ")", "\n", "if", "keys", "is", "not", "None", ":", "\n", "            ", "messages", ".", "append", "(", "\"Key not found: {}\"", ".", "format", "(", "keys", ")", ")", "\n", "", "if", "visited", "is", "not", "None", ":", "\n", "            ", "messages", ".", "append", "(", "\"Visited: {}\"", ".", "format", "(", "visited", ")", ")", "\n", "", "messages", ".", "append", "(", "\"Cause:\\n{}\"", ".", "format", "(", "cause", ")", ")", "\n", "message", "=", "\"\\n\"", ".", "join", "(", "messages", ")", "\n", "super", "(", ")", ".", "__init__", "(", "message", ")", "\n", "\n", "\n", "", "", "def", "retrieve", "(", "\n", "list_or_dict", ",", "key", ",", "splitval", "=", "\"/\"", ",", "default", "=", "None", ",", "expand", "=", "True", ",", "pass_success", "=", "False", "\n", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.modules.util.ActNorm.reverse": [[71, 93], ["len", "h.squeeze().squeeze.squeeze().squeeze.squeeze().squeeze", "util.ActNorm.initialized.item", "RuntimeError", "util.ActNorm.initialize", "util.ActNorm.initialized.fill_", "h.squeeze().squeeze.squeeze().squeeze.squeeze"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.initialize"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.modules.util.AbstractEncoder.__init__": [[96, 98], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["keys", "=", "key", ".", "split", "(", "splitval", ")", "\n", "\n", "success", "=", "True", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.modules.util.AbstractEncoder.encode": [[99, 101], ["None"], "methods", ["None"], ["try", ":", "\n", "        ", "visited", "=", "[", "]", "\n", "parent", "=", "None", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.modules.util.Labelator.__init__": [[105, 109], ["util.AbstractEncoder.__init__"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["                ", "if", "not", "expand", ":", "\n", "                    ", "raise", "KeyNotFoundError", "(", "\n", "ValueError", "(", "\n", "\"Trying to get past callable node with expand=False.\"", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.modules.util.Labelator.encode": [[110, 115], ["c.long"], "methods", ["None"], ["keys", "=", "keys", ",", "\n", "visited", "=", "visited", ",", "\n", ")", "\n", "", "list_or_dict", "=", "list_or_dict", "(", ")", "\n", "parent", "[", "last_key", "]", "=", "list_or_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.modules.util.SOSProvider.__init__": [[119, 123], ["util.AbstractEncoder.__init__"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["try", ":", "\n", "                ", "if", "isinstance", "(", "list_or_dict", ",", "dict", ")", ":", "\n", "                    ", "list_or_dict", "=", "list_or_dict", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "list_or_dict", "=", "list_or_dict", "[", "int", "(", "key", ")", "]", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.modules.util.SOSProvider.encode": [[124, 131], ["c.long().to.long().to.long().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "c.long().to.long().to.long"], "methods", ["None"], ["", "", "except", "(", "KeyError", ",", "IndexError", ",", "ValueError", ")", "as", "e", ":", "\n", "                ", "raise", "KeyNotFoundError", "(", "e", ",", "keys", "=", "keys", ",", "visited", "=", "visited", ")", "\n", "\n", "", "visited", "+=", "[", "key", "]", "\n", "# final expansion of retrieved value", "\n", "", "if", "expand", "and", "callable", "(", "list_or_dict", ")", ":", "\n", "            ", "list_or_dict", "=", "list_or_dict", "(", ")", "\n", "parent", "[", "last_key", "]", "=", "list_or_dict", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.modules.util.count_params": [[5, 8], ["sum", "p.numel", "model.parameters"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters"], ["URL_MAP", "=", "{", "\n", "\"vgg_lpips\"", ":", "\"https://heibox.uni-heidelberg.de/f/607503859c864bc1b30b/?dl=1\"", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Upsample.__init__": [[39, 48], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Upsample.forward": [[49, 54], ["torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "model.Upsample.conv"], "methods", ["None"], ["\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Downsample.__init__": [[57, 67], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "spacial_dim", "**", "2", "+", "1", ",", "embed_dim", ")", "/", "embed_dim", "**", "0.5", ")", "\n", "self", ".", "k_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "q_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "v_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "c_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "output_dim", "or", "embed_dim", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# NCHW -> (HW)NC", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ",", "x", "]", ",", "dim", "=", "0", ")", "# (HW+1)NC", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Downsample.forward": [[68, 76], ["torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "model.Downsample.conv", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d"], "methods", ["None"], ["x", "=", "x", "+", "self", ".", "positional_embedding", "[", ":", ",", "None", ",", ":", "]", ".", "to", "(", "x", ".", "dtype", ")", "# (HW+1)NC", "\n", "x", ",", "_", "=", "F", ".", "multi_head_attention_forward", "(", "\n", "query", "=", "x", ",", "key", "=", "x", ",", "value", "=", "x", ",", "\n", "embed_dim_to_check", "=", "x", ".", "shape", "[", "-", "1", "]", ",", "\n", "num_heads", "=", "self", ".", "num_heads", ",", "\n", "q_proj_weight", "=", "self", ".", "q_proj", ".", "weight", ",", "\n", "k_proj_weight", "=", "self", ".", "k_proj", ".", "weight", ",", "\n", "v_proj_weight", "=", "self", ".", "v_proj", ".", "weight", ",", "\n", "in_proj_weight", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.ResnetBlock.__init__": [[79, 116], ["torch.Module.__init__", "model.Normalize", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "model.Normalize", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Normalize", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Normalize"], ["bias_v", "=", "None", ",", "\n", "add_zero_attn", "=", "False", ",", "\n", "dropout_p", "=", "0", ",", "\n", "out_proj_weight", "=", "self", ".", "c_proj", ".", "weight", ",", "\n", "out_proj_bias", "=", "self", ".", "c_proj", ".", "bias", ",", "\n", "use_separate_proj_weight", "=", "True", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "need_weights", "=", "False", "\n", ")", "\n", "\n", "return", "x", "[", "0", "]", "\n", "\n", "\n", "", "", "class", "ModifiedResNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    A ResNet class that is similar to torchvision's but contains the following changes:\n    - There are now 3 \"stem\" convolutions as opposed to 1, with an average pool instead of a max pool.\n    - Performs anti-aliasing strided convolutions, where an avgpool is prepended to convolutions with stride > 1\n    - The final pooling layer is a QKV attention instead of an average pool\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "layers", ",", "output_dim", ",", "heads", ",", "input_resolution", "=", "224", ",", "width", "=", "64", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "\n", "# the 3-layer stem", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "width", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", "//", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "width", "//", "2", ",", "width", "//", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "width", "//", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", "//", "2", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# residual layers", "\n", "self", ".", "_inplanes", "=", "width", "# this is a *mutable* variable used during construction", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.ResnetBlock.forward": [[117, 138], ["model.ResnetBlock.norm1", "model.nonlinearity", "model.ResnetBlock.conv1", "model.ResnetBlock.norm2", "model.nonlinearity", "model.ResnetBlock.dropout", "model.ResnetBlock.conv2", "model.ResnetBlock.conv_shortcut", "model.ResnetBlock.nin_shortcut", "model.ResnetBlock.temb_proj", "model.nonlinearity"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.nonlinearity", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.nonlinearity", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.nonlinearity"], ["self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "width", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "width", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "width", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "width", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "embed_dim", "=", "width", "*", "32", "# the ResNet feature dimension", "\n", "self", ".", "attnpool", "=", "AttentionPool2d", "(", "input_resolution", "//", "32", ",", "embed_dim", ",", "heads", ",", "output_dim", ")", "\n", "\n", "", "def", "_make_layer", "(", "self", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layers", "=", "[", "Bottleneck", "(", "self", ".", "_inplanes", ",", "planes", ",", "stride", ")", "]", "\n", "\n", "self", ".", "_inplanes", "=", "planes", "*", "Bottleneck", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "_inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "def", "stem", "(", "x", ")", ":", "\n", "            ", "for", "conv", ",", "bn", "in", "[", "(", "self", ".", "conv1", ",", "self", ".", "bn1", ")", ",", "(", "self", ".", "conv2", ",", "self", ".", "bn2", ")", ",", "(", "self", ".", "conv3", ",", "self", ".", "bn3", ")", "]", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "bn", "(", "conv", "(", "x", ")", ")", ")", "\n", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.AttnBlock.__init__": [[141, 166], ["torch.Module.__init__", "model.Normalize", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Normalize"], ["", "x", "=", "x", ".", "type", "(", "self", ".", "conv1", ".", "weight", ".", "dtype", ")", "\n", "x", "=", "stem", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "attnpool", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "LayerNorm", "(", "nn", ".", "LayerNorm", ")", ":", "\n", "    ", "\"\"\"Subclass torch's LayerNorm to handle fp16.\"\"\"", "\n", "\n", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "orig_type", "=", "x", ".", "dtype", "\n", "ret", "=", "super", "(", ")", ".", "forward", "(", "x", ".", "type", "(", "torch", ".", "float32", ")", ")", "\n", "return", "ret", ".", "type", "(", "orig_type", ")", "\n", "\n", "\n", "", "", "class", "QuickGELU", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "1.702", "*", "x", ")", "\n", "\n", "\n", "", "", "class", "ResidualAttentionBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.AttnBlock.forward": [[168, 193], ["model.AttnBlock.norm", "model.AttnBlock.q", "model.AttnBlock.k", "model.AttnBlock.v", "q.permute.permute.reshape", "q.permute.permute.permute", "k.reshape.reshape.reshape", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "v.reshape.reshape.reshape", "w_.permute.permute.permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "model.AttnBlock.reshape", "model.AttnBlock.proj_out", "int"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "n_head", ")", "\n", "self", ".", "ln_1", "=", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"c_fc\"", ",", "nn", ".", "Linear", "(", "d_model", ",", "d_model", "*", "4", ")", ")", ",", "\n", "(", "\"gelu\"", ",", "QuickGELU", "(", ")", ")", ",", "\n", "(", "\"c_proj\"", ",", "nn", ".", "Linear", "(", "d_model", "*", "4", ",", "d_model", ")", ")", "\n", "]", ")", ")", "\n", "self", ".", "ln_2", "=", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "attn_mask", "=", "attn_mask", "\n", "\n", "", "def", "attention", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "self", ".", "attn_mask", "=", "self", ".", "attn_mask", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "self", ".", "attn_mask", "is", "not", "None", "else", "None", "\n", "return", "self", ".", "attn", "(", "x", ",", "x", ",", "x", ",", "need_weights", "=", "False", ",", "attn_mask", "=", "self", ".", "attn_mask", ")", "[", "0", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "attention", "(", "self", ".", "ln_1", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "mlp", "(", "self", ".", "ln_2", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "Transformer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "width", ":", "int", ",", "layers", ":", "int", ",", "heads", ":", "int", ",", "attn_mask", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "width", "=", "width", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Model.__init__": [[196, 293], ["torch.Module.__init__", "len", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.Module", "torch.Module", "model.ResnetBlock", "model.AttnBlock", "model.ResnetBlock", "torch.ModuleList", "torch.ModuleList", "reversed", "model.Normalize", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.Module", "torch.Module", "torch.ModuleList", "torch.ModuleList", "tuple", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Module", "torch.Module", "model.Model.down.append", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Module", "torch.Module", "model.Model.up.insert", "torch.ModuleList.append", "model.Downsample", "torch.ModuleList.append", "model.Upsample", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "model.ResnetBlock", "torch.ModuleList.append", "model.ResnetBlock", "torch.ModuleList.append", "model.AttnBlock", "model.AttnBlock"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Normalize"], ["\n", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "self", ".", "resblocks", "(", "x", ")", "\n", "\n", "\n", "", "", "class", "VisualTransformer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "input_resolution", ":", "int", ",", "patch_size", ":", "int", ",", "width", ":", "int", ",", "layers", ":", "int", ",", "heads", ":", "int", ",", "output_dim", ":", "int", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "width", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "bias", "=", "False", ")", "\n", "\n", "scale", "=", "width", "**", "-", "0.5", "\n", "self", ".", "class_embedding", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "width", ")", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "(", "input_resolution", "//", "patch_size", ")", "**", "2", "+", "1", ",", "width", ")", ")", "\n", "self", ".", "ln_pre", "=", "LayerNorm", "(", "width", ")", "\n", "\n", "self", ".", "transformer", "=", "Transformer", "(", "width", ",", "layers", ",", "heads", ")", "\n", "\n", "self", ".", "ln_post", "=", "LayerNorm", "(", "width", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "width", ",", "output_dim", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "# shape = [*, width, grid, grid]", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "# shape = [*, width, grid ** 2]", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# shape = [*, grid ** 2, width]", "\n", "x", "=", "torch", ".", "cat", "(", "[", "self", ".", "class_embedding", ".", "to", "(", "x", ".", "dtype", ")", "+", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "x", ".", "shape", "[", "-", "1", "]", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", ",", "x", "]", ",", "dim", "=", "1", ")", "# shape = [*, grid ** 2 + 1, width]", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", ".", "to", "(", "x", ".", "dtype", ")", "\n", "x", "=", "self", ".", "ln_pre", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# NLD -> LND", "\n", "x", "=", "self", ".", "transformer", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# LND -> NLD", "\n", "\n", "x", "=", "self", ".", "ln_post", "(", "x", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "\n", "if", "self", ".", "proj", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "@", "self", ".", "proj", "\n", "\n", "", "return", "x", "\n", "\n", "\n", "", "", "class", "CLIP", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "\n", "embed_dim", ":", "int", ",", "\n", "# vision", "\n", "image_resolution", ":", "int", ",", "\n", "vision_layers", ":", "Union", "[", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", ",", "int", "]", ",", "\n", "vision_width", ":", "int", ",", "\n", "vision_patch_size", ":", "int", ",", "\n", "# text", "\n", "context_length", ":", "int", ",", "\n", "vocab_size", ":", "int", ",", "\n", "transformer_width", ":", "int", ",", "\n", "transformer_heads", ":", "int", ",", "\n", "transformer_layers", ":", "int", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "context_length", "=", "context_length", "\n", "\n", "if", "isinstance", "(", "vision_layers", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "vision_heads", "=", "vision_width", "*", "32", "//", "64", "\n", "self", ".", "visual", "=", "ModifiedResNet", "(", "\n", "layers", "=", "vision_layers", ",", "\n", "output_dim", "=", "embed_dim", ",", "\n", "heads", "=", "vision_heads", ",", "\n", "input_resolution", "=", "image_resolution", ",", "\n", "width", "=", "vision_width", "\n", ")", "\n", "", "else", ":", "\n", "            ", "vision_heads", "=", "vision_width", "//", "64", "\n", "self", ".", "visual", "=", "VisualTransformer", "(", "\n", "input_resolution", "=", "image_resolution", ",", "\n", "patch_size", "=", "vision_patch_size", ",", "\n", "width", "=", "vision_width", ",", "\n", "layers", "=", "vision_layers", ",", "\n", "heads", "=", "vision_heads", ",", "\n", "output_dim", "=", "embed_dim", "\n", ")", "\n", "\n", "", "self", ".", "transformer", "=", "Transformer", "(", "\n", "width", "=", "transformer_width", ",", "\n", "layers", "=", "transformer_layers", ",", "\n", "heads", "=", "transformer_heads", ",", "\n", "attn_mask", "=", "self", ".", "build_attention_mask", "(", ")", "\n", ")", "\n", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "token_embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "transformer_width", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "self", ".", "context_length", ",", "transformer_width", ")", ")", "\n", "self", ".", "ln_final", "=", "LayerNorm", "(", "transformer_width", ")", "\n", "\n", "self", ".", "text_projection", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "transformer_width", ",", "embed_dim", ")", ")", "\n", "self", ".", "logit_scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "[", "]", ")", ")", "\n", "\n", "self", ".", "initialize_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Model.forward": [[295, 340], ["range", "model.Model.mid.block_1", "model.Model.mid.attn_1", "model.Model.mid.block_2", "reversed", "model.Model.norm_out", "model.nonlinearity", "model.Model.conv_out", "model.get_timestep_embedding", "model.nonlinearity", "model.Model.conv_in", "range", "range", "range", "hs.append", "hs.append", "model.Model.up[].upsample", "len", "model.Model.down[].downsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "hs.pop"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.nonlinearity", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.get_timestep_embedding", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.nonlinearity"], ["        ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "token_embedding", ".", "weight", ",", "std", "=", "0.02", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "positional_embedding", ",", "std", "=", "0.01", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "visual", ",", "ModifiedResNet", ")", ":", "\n", "            ", "if", "self", ".", "visual", ".", "attnpool", "is", "not", "None", ":", "\n", "                ", "std", "=", "self", ".", "visual", ".", "attnpool", ".", "c_proj", ".", "in_features", "**", "-", "0.5", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "q_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "k_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "v_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "c_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "\n", "", "for", "resnet_block", "in", "[", "self", ".", "visual", ".", "layer1", ",", "self", ".", "visual", ".", "layer2", ",", "self", ".", "visual", ".", "layer3", ",", "self", ".", "visual", ".", "layer4", "]", ":", "\n", "                ", "for", "name", ",", "param", "in", "resnet_block", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "name", ".", "endswith", "(", "\"bn3.weight\"", ")", ":", "\n", "                        ", "nn", ".", "init", ".", "zeros_", "(", "param", ")", "\n", "\n", "", "", "", "", "proj_std", "=", "(", "self", ".", "transformer", ".", "width", "**", "-", "0.5", ")", "*", "(", "(", "2", "*", "self", ".", "transformer", ".", "layers", ")", "**", "-", "0.5", ")", "\n", "attn_std", "=", "self", ".", "transformer", ".", "width", "**", "-", "0.5", "\n", "fc_std", "=", "(", "2", "*", "self", ".", "transformer", ".", "width", ")", "**", "-", "0.5", "\n", "for", "block", "in", "self", ".", "transformer", ".", "resblocks", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "block", ".", "attn", ".", "in_proj_weight", ",", "std", "=", "attn_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "attn", ".", "out_proj", ".", "weight", ",", "std", "=", "proj_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "mlp", ".", "c_fc", ".", "weight", ",", "std", "=", "fc_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "mlp", ".", "c_proj", ".", "weight", ",", "std", "=", "proj_std", ")", "\n", "\n", "", "if", "self", ".", "text_projection", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "text_projection", ",", "std", "=", "self", ".", "transformer", ".", "width", "**", "-", "0.5", ")", "\n", "\n", "", "", "def", "build_attention_mask", "(", "self", ")", ":", "\n", "# lazily create causal attention mask, with full attention between the vision tokens", "\n", "# pytorch uses additive attention mask; fill with -inf", "\n", "        ", "mask", "=", "torch", ".", "empty", "(", "self", ".", "context_length", ",", "self", ".", "context_length", ")", "\n", "mask", ".", "fill_", "(", "float", "(", "\"-inf\"", ")", ")", "\n", "mask", ".", "triu_", "(", "1", ")", "# zero out the lower diagonal", "\n", "return", "mask", "\n", "\n", "", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'visual'", ")", ":", "\n", "            ", "return", "self", ".", "visual", ".", "conv1", ".", "weight", ".", "dtype", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "transformer", ".", "resblocks", "[", "0", "]", ".", "attn", ".", "in_proj_weight", ".", "dtype", "\n", "\n", "", "", "def", "encode_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "self", ".", "visual", "(", "image", ".", "type", "(", "self", ".", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Encoder.__init__": [[343, 404], ["torch.Module.__init__", "len", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.Module", "torch.Module", "model.ResnetBlock", "model.AttnBlock", "model.ResnetBlock", "model.Normalize", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "tuple", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Module", "torch.Module", "model.Encoder.down.append", "torch.ModuleList.append", "model.Downsample", "model.ResnetBlock", "torch.ModuleList.append", "model.AttnBlock"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Normalize"], ["\n", "x", "=", "x", "+", "self", ".", "positional_embedding", ".", "type", "(", "self", ".", "dtype", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# NLD -> LND", "\n", "x", "=", "self", ".", "transformer", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# LND -> NLD", "\n", "x", "=", "self", ".", "ln_final", "(", "x", ")", ".", "type", "(", "self", ".", "dtype", ")", "\n", "\n", "# x.shape = [batch_size, n_ctx, transformer.width]", "\n", "# take features from the eot embedding (eot_token is the highest number in each sequence)", "\n", "x", "=", "x", "[", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "text", ".", "argmax", "(", "dim", "=", "-", "1", ")", "]", "@", "self", ".", "text_projection", "\n", "\n", "return", "x", "\n", "\n", "", "def", "forward", "(", "self", ",", "image", ",", "text", ")", ":", "\n", "        ", "image_features", "=", "self", ".", "encode_image", "(", "image", ")", "\n", "text_features", "=", "self", ".", "encode_text", "(", "text", ")", "\n", "\n", "# normalized features", "\n", "image_features", "=", "image_features", "/", "image_features", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "text_features", "=", "text_features", "/", "text_features", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# cosine similarity as logits", "\n", "logit_scale", "=", "self", ".", "logit_scale", ".", "exp", "(", ")", "\n", "logits_per_image", "=", "logit_scale", "*", "image_features", "@", "text_features", ".", "t", "(", ")", "\n", "logits_per_text", "=", "logit_scale", "*", "text_features", "@", "image_features", ".", "t", "(", ")", "\n", "\n", "# shape = [global_batch_size, global_batch_size]", "\n", "return", "logits_per_image", ",", "logits_per_text", "\n", "\n", "\n", "", "", "def", "convert_weights", "(", "model", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Convert applicable model parameters to fp16\"\"\"", "\n", "\n", "def", "_convert_weights_to_fp16", "(", "l", ")", ":", "\n", "        ", "if", "isinstance", "(", "l", ",", "(", "nn", ".", "Conv1d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "            ", "l", ".", "weight", ".", "data", "=", "l", ".", "weight", ".", "data", ".", "half", "(", ")", "\n", "if", "l", ".", "bias", "is", "not", "None", ":", "\n", "                ", "l", ".", "bias", ".", "data", "=", "l", ".", "bias", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "if", "isinstance", "(", "l", ",", "nn", ".", "MultiheadAttention", ")", ":", "\n", "            ", "for", "attr", "in", "[", "*", "[", "f\"{s}_proj_weight\"", "for", "s", "in", "[", "\"in\"", ",", "\"q\"", ",", "\"k\"", ",", "\"v\"", "]", "]", ",", "\"in_proj_bias\"", ",", "\"bias_k\"", ",", "\"bias_v\"", "]", ":", "\n", "                ", "tensor", "=", "getattr", "(", "l", ",", "attr", ")", "\n", "if", "tensor", "is", "not", "None", ":", "\n", "                    ", "tensor", ".", "data", "=", "tensor", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "", "for", "name", "in", "[", "\"text_projection\"", ",", "\"proj\"", "]", ":", "\n", "            ", "if", "hasattr", "(", "l", ",", "name", ")", ":", "\n", "                ", "attr", "=", "getattr", "(", "l", ",", "name", ")", "\n", "if", "attr", "is", "not", "None", ":", "\n", "                    ", "attr", ".", "data", "=", "attr", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "", "", "model", ".", "apply", "(", "_convert_weights_to_fp16", ")", "\n", "\n", "\n", "", "def", "build_model", "(", "state_dict", ":", "dict", ")", ":", "\n", "    ", "vit", "=", "\"visual.proj\"", "in", "state_dict", "\n", "\n", "if", "vit", ":", "\n", "        ", "vision_width", "=", "state_dict", "[", "\"visual.conv1.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "vision_layers", "=", "len", "(", "[", "k", "for", "k", "in", "state_dict", ".", "keys", "(", ")", "if", "k", ".", "startswith", "(", "\"visual.\"", ")", "and", "k", ".", "endswith", "(", "\".attn.in_proj_weight\"", ")", "]", ")", "\n", "vision_patch_size", "=", "state_dict", "[", "\"visual.conv1.weight\"", "]", ".", "shape", "[", "-", "1", "]", "\n", "grid_size", "=", "round", "(", "(", "state_dict", "[", "\"visual.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "-", "1", ")", "**", "0.5", ")", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Encoder.forward": [[406, 434], ["range", "model.Encoder.mid.block_1", "model.Encoder.mid.attn_1", "model.Encoder.mid.block_2", "model.Encoder.norm_out", "model.nonlinearity", "model.Encoder.conv_out", "model.Encoder.conv_in", "range", "hs.append", "hs.append", "len", "model.Encoder.down[].downsample"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.nonlinearity"], ["", "else", ":", "\n", "        ", "counts", ":", "list", "=", "[", "len", "(", "set", "(", "k", ".", "split", "(", "\".\"", ")", "[", "2", "]", "for", "k", "in", "state_dict", "if", "k", ".", "startswith", "(", "f\"visual.layer{b}\"", ")", ")", ")", "for", "b", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", "]", "\n", "vision_layers", "=", "tuple", "(", "counts", ")", "\n", "vision_width", "=", "state_dict", "[", "\"visual.layer1.0.conv1.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "output_width", "=", "round", "(", "(", "state_dict", "[", "\"visual.attnpool.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "-", "1", ")", "**", "0.5", ")", "\n", "vision_patch_size", "=", "None", "\n", "assert", "output_width", "**", "2", "+", "1", "==", "state_dict", "[", "\"visual.attnpool.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "\n", "image_resolution", "=", "output_width", "*", "32", "\n", "\n", "", "embed_dim", "=", "state_dict", "[", "\"text_projection\"", "]", ".", "shape", "[", "1", "]", "\n", "context_length", "=", "state_dict", "[", "\"positional_embedding\"", "]", ".", "shape", "[", "0", "]", "\n", "vocab_size", "=", "state_dict", "[", "\"token_embedding.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "transformer_width", "=", "state_dict", "[", "\"ln_final.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "transformer_heads", "=", "transformer_width", "//", "64", "\n", "transformer_layers", "=", "len", "(", "set", "(", "k", ".", "split", "(", "\".\"", ")", "[", "2", "]", "for", "k", "in", "state_dict", "if", "k", ".", "startswith", "(", "f\"transformer.resblocks\"", ")", ")", ")", "\n", "\n", "model", "=", "CLIP", "(", "\n", "embed_dim", ",", "\n", "image_resolution", ",", "vision_layers", ",", "vision_width", ",", "vision_patch_size", ",", "\n", "context_length", ",", "vocab_size", ",", "transformer_width", ",", "transformer_heads", ",", "transformer_layers", "\n", ")", "\n", "\n", "for", "key", "in", "[", "\"input_resolution\"", ",", "\"context_length\"", ",", "\"vocab_size\"", "]", ":", "\n", "        ", "if", "key", "in", "state_dict", ":", "\n", "            ", "del", "state_dict", "[", "key", "]", "\n", "\n", "", "", "convert_weights", "(", "model", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "model", ".", "eval", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Decoder.__init__": [[437, 505], ["torch.Module.__init__", "len", "print", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.Module", "torch.Module", "model.ResnetBlock", "model.AttnBlock", "model.ResnetBlock", "torch.ModuleList", "torch.ModuleList", "reversed", "model.Normalize", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "tuple", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Module", "torch.Module", "model.Decoder.up.insert", "numpy.prod", "torch.ModuleList.append", "model.Upsample", "model.ResnetBlock", "torch.ModuleList.append", "model.AttnBlock"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Normalize"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Decoder.forward": [[506, 538], ["model.Decoder.conv_in", "model.Decoder.mid.block_1", "model.Decoder.mid.attn_1", "model.Decoder.mid.block_2", "reversed", "model.Decoder.norm_out", "model.nonlinearity", "model.Decoder.conv_out", "range", "range", "model.Decoder.up[].upsample", "len"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.nonlinearity"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.VUNet.__init__": [[541, 643], ["torch.Module.__init__", "len", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.Module", "torch.Module", "model.ResnetBlock", "model.AttnBlock", "model.ResnetBlock", "torch.ModuleList", "torch.ModuleList", "reversed", "model.Normalize", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.Module", "torch.Module", "torch.ModuleList", "torch.ModuleList", "tuple", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Module", "torch.Module", "model.VUNet.down.append", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Module", "torch.Module", "model.VUNet.up.insert", "torch.ModuleList.append", "model.Downsample", "torch.ModuleList.append", "model.Upsample", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "model.ResnetBlock", "torch.ModuleList.append", "model.ResnetBlock", "torch.ModuleList.append", "model.AttnBlock", "model.AttnBlock"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Normalize"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.VUNet.forward": [[645, 692], ["range", "model.VUNet.z_in", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.VUNet.mid.block_1", "model.VUNet.mid.attn_1", "model.VUNet.mid.block_2", "reversed", "model.VUNet.norm_out", "model.nonlinearity", "model.VUNet.conv_out", "model.get_timestep_embedding", "model.nonlinearity", "model.VUNet.conv_in", "range", "range", "range", "hs.append", "hs.append", "model.VUNet.up[].upsample", "len", "model.VUNet.down[].downsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "hs.pop"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.nonlinearity", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.get_timestep_embedding", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.nonlinearity"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.SimpleDecoder.__init__": [[695, 716], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "model.Normalize", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.ResnetBlock", "model.ResnetBlock", "model.ResnetBlock", "torch.Conv2d", "torch.Conv2d", "model.Upsample"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Normalize"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.SimpleDecoder.forward": [[717, 728], ["enumerate", "model.SimpleDecoder.norm_out", "model.nonlinearity", "model.SimpleDecoder.conv_out", "layer", "layer"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.nonlinearity"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.UpsampleDecoder.__init__": [[731, 763], ["torch.Module.__init__", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "model.Normalize", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "range", "model.UpsampleDecoder.res_blocks.append", "res_block.append", "torch.ModuleList", "torch.ModuleList", "model.UpsampleDecoder.upsample_blocks.append", "model.ResnetBlock", "model.Upsample"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Normalize"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.UpsampleDecoder.forward": [[764, 776], ["enumerate", "model.UpsampleDecoder.norm_out", "model.nonlinearity", "model.UpsampleDecoder.conv_out", "range", "range"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.nonlinearity"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.get_timestep_embedding": [[8, 27], ["torch.exp", "torch.exp", "torch.nn.functional.pad.to", "torch.cat", "torch.cat", "len", "math.log", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.arange", "torch.arange", "timesteps.float", "torch.sin", "torch.sin", "torch.cos", "torch.cos"], "function", ["None"], ["\n", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# all conv layers have stride 1. an avgpool is performed after the second convolution when stride > 1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "stride", ")", "if", "stride", ">", "1", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.nonlinearity": [[29, 32], ["torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["self", ".", "stride", "=", "stride", "\n", "\n", "if", "stride", ">", "1", "or", "inplanes", "!=", "planes", "*", "Bottleneck", ".", "expansion", ":", "\n", "# downsampling layer is prepended with an avgpool, and the subsequent convolution has stride 1", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.diffusionmodules.model.Normalize": [[34, 36], ["torch.nn.GroupNorm", "torch.nn.GroupNorm"], "function", ["None"], ["(", "\"-1\"", ",", "nn", ".", "AvgPool2d", "(", "stride", ")", ")", ",", "\n", "(", "\"0\"", ",", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "\"1\"", ",", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", ")", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.discriminator.model.NLayerDiscriminator.__init__": [[21, 64], ["torch.Module.__init__", "range", "min", "torch.Sequential", "type", "torch.Conv2d", "torch.LeakyReLU", "min", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "stride", ")", "if", "stride", ">", "1", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "None", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "if", "stride", ">", "1", "or", "inplanes", "!=", "planes", "*", "Bottleneck", ".", "expansion", ":", "\n", "# downsampling layer is prepended with an avgpool, and the subsequent convolution has stride 1", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"-1\"", ",", "nn", ".", "AvgPool2d", "(", "stride", ")", ")", ",", "\n", "(", "\"0\"", ",", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "\"1\"", ",", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", ")", "\n", "]", ")", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "AttentionPool2d", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "spacial_dim", ":", "int", ",", "embed_dim", ":", "int", ",", "num_heads", ":", "int", ",", "output_dim", ":", "int", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "spacial_dim", "**", "2", "+", "1", ",", "embed_dim", ")", "/", "embed_dim", "**", "0.5", ")", "\n", "self", ".", "k_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "q_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "v_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "c_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "output_dim", "or", "embed_dim", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.discriminator.model.NLayerDiscriminator.forward": [[65, 68], ["model.NLayerDiscriminator.main"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.None.train.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# NCHW -> (HW)NC", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ",", "x", "]", ",", "dim", "=", "0", ")", "# (HW+1)NC", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", "[", ":", ",", "None", ",", ":", "]", ".", "to", "(", "x", ".", "dtype", ")", "# (HW+1)NC", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.discriminator.model.weights_init": [[8, 15], ["classname.find", "torch.init.normal_", "classname.find", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["\n", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "4", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# all conv layers have stride 1. an avgpool is performed after the second convolution when stride > 1", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.GPTConfig.__init__": [[27, 32], ["kwargs.items", "setattr"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "block_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "block_size", "=", "block_size", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.CausalSelfAttention.__init__": [[48, 67], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "hasattr", "mingpt.CausalSelfAttention.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.tril.view", "torch.tril.view"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "config", ".", "n_embd", "%", "config", ".", "n_head", "==", "0", "\n", "# key, query, value projections for all heads", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "n_embd", ")", "\n", "# regularization", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "config", ".", "attn_pdrop", ")", "\n", "self", ".", "resid_drop", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "# output projection", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "n_embd", ")", "\n", "# causal mask to ensure that attention is only applied to the left in the input sequence", "\n", "mask", "=", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "config", ".", "block_size", ",", "\n", "config", ".", "block_size", ")", ")", "\n", "if", "hasattr", "(", "config", ",", "\"n_unmasked\"", ")", ":", "\n", "            ", "mask", "[", ":", "config", ".", "n_unmasked", ",", ":", "config", ".", "n_unmasked", "]", "=", "1", "\n", "", "self", ".", "register_buffer", "(", "\"mask\"", ",", "mask", ".", "view", "(", "1", ",", "1", ",", "config", ".", "block_size", ",", "config", ".", "block_size", ")", ")", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.CausalSelfAttention.forward": [[68, 95], ["x.size", "mingpt.CausalSelfAttention.key().view().transpose", "mingpt.CausalSelfAttention.query().view().transpose", "mingpt.CausalSelfAttention.value().view().transpose", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "mingpt.CausalSelfAttention.attn_drop", "mingpt.CausalSelfAttention.transpose().contiguous().view", "mingpt.CausalSelfAttention.resid_drop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "att.masked_fill.masked_fill.masked_fill", "mingpt.CausalSelfAttention.proj", "mingpt.CausalSelfAttention.key().view", "mingpt.CausalSelfAttention.query().view", "mingpt.CausalSelfAttention.value().view", "torch.cat.transpose", "torch.cat.transpose", "math.sqrt", "float", "mingpt.CausalSelfAttention.transpose().contiguous", "torch.cat.size", "torch.cat.size", "mingpt.CausalSelfAttention.key", "mingpt.CausalSelfAttention.query", "mingpt.CausalSelfAttention.value", "mingpt.CausalSelfAttention.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "layer_past", "=", "None", ")", ":", "\n", "        ", "B", ",", "T", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "\n", "# calculate query, key, values for all heads in batch and move head forward to be the batch dim", "\n", "k", "=", "self", ".", "key", "(", "x", ")", ".", "view", "(", "B", ",", "T", ",", "self", ".", "n_head", ",", "C", "//", "self", ".", "n_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (B, nh, T, hs)", "\n", "q", "=", "self", ".", "query", "(", "x", ")", ".", "view", "(", "B", ",", "T", ",", "self", ".", "n_head", ",", "C", "//", "self", ".", "n_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (B, nh, T, hs)", "\n", "v", "=", "self", ".", "value", "(", "x", ")", ".", "view", "(", "B", ",", "T", ",", "self", ".", "n_head", ",", "C", "//", "self", ".", "n_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (B, nh, T, hs)", "\n", "\n", "present", "=", "torch", ".", "stack", "(", "(", "k", ",", "v", ")", ")", "\n", "if", "layer_past", "is", "not", "None", ":", "\n", "            ", "past_key", ",", "past_value", "=", "layer_past", "\n", "k", "=", "torch", ".", "cat", "(", "(", "past_key", ",", "k", ")", ",", "dim", "=", "-", "2", ")", "\n", "v", "=", "torch", ".", "cat", "(", "(", "past_value", ",", "v", ")", ",", "dim", "=", "-", "2", ")", "\n", "\n", "# causal self-attention; Self-attend: (B, nh, T, hs) x (B, nh, hs, T) -> (B, nh, T, T)", "\n", "", "att", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "(", "1.0", "/", "math", ".", "sqrt", "(", "k", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "if", "layer_past", "is", "None", ":", "\n", "            ", "att", "=", "att", ".", "masked_fill", "(", "self", ".", "mask", "[", ":", ",", ":", ",", ":", "T", ",", ":", "T", "]", "==", "0", ",", "float", "(", "'-inf'", ")", ")", "\n", "\n", "", "att", "=", "F", ".", "softmax", "(", "att", ",", "dim", "=", "-", "1", ")", "\n", "att", "=", "self", ".", "attn_drop", "(", "att", ")", "\n", "y", "=", "att", "@", "v", "# (B, nh, T, T) x (B, nh, T, hs) -> (B, nh, T, hs)", "\n", "y", "=", "y", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "T", ",", "C", ")", "# re-assemble all head outputs side by side", "\n", "\n", "# output projection", "\n", "y", "=", "self", ".", "resid_drop", "(", "self", ".", "proj", "(", "y", ")", ")", "\n", "return", "y", ",", "present", "# TODO: check that this does not break anything", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.Block.__init__": [[99, 109], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "mingpt.CausalSelfAttention", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ln1", "=", "nn", ".", "LayerNorm", "(", "config", ".", "n_embd", ")", "\n", "self", ".", "ln2", "=", "nn", ".", "LayerNorm", "(", "config", ".", "n_embd", ")", "\n", "self", ".", "attn", "=", "CausalSelfAttention", "(", "config", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "4", "*", "config", ".", "n_embd", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "# nice", "\n", "nn", ".", "Linear", "(", "4", "*", "config", ".", "n_embd", ",", "config", ".", "n_embd", ")", ",", "\n", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.Block.forward": [[111, 122], ["mingpt.Block.attn", "mingpt.Block.ln1", "mingpt.Block.mlp", "mingpt.Block.ln2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "layer_past", "=", "None", ",", "return_present", "=", "False", ")", ":", "\n", "# TODO: check that training still works", "\n", "        ", "if", "return_present", ":", "assert", "not", "self", ".", "training", "\n", "# layer past: tuple of length two with B, nh, T, hs", "\n", "attn", ",", "present", "=", "self", ".", "attn", "(", "self", ".", "ln1", "(", "x", ")", ",", "layer_past", "=", "layer_past", ")", "\n", "\n", "x", "=", "x", "+", "attn", "\n", "x", "=", "x", "+", "self", ".", "mlp", "(", "self", ".", "ln2", "(", "x", ")", ")", "\n", "if", "layer_past", "is", "not", "None", "or", "return_present", ":", "\n", "            ", "return", "x", ",", "present", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.GPT.__init__": [[126, 146], ["torch.Module.__init__", "mingpt.GPTConfig", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "mingpt.GPT.apply", "logger.info", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "sum", "mingpt.Block", "p.numel", "range", "mingpt.GPT.parameters"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "block_size", ",", "n_layer", "=", "12", ",", "n_head", "=", "8", ",", "n_embd", "=", "256", ",", "\n", "embd_pdrop", "=", "0.", ",", "resid_pdrop", "=", "0.", ",", "attn_pdrop", "=", "0.", ",", "n_unmasked", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "config", "=", "GPTConfig", "(", "vocab_size", "=", "vocab_size", ",", "block_size", "=", "block_size", ",", "\n", "embd_pdrop", "=", "embd_pdrop", ",", "resid_pdrop", "=", "resid_pdrop", ",", "attn_pdrop", "=", "attn_pdrop", ",", "\n", "n_layer", "=", "n_layer", ",", "n_head", "=", "n_head", ",", "n_embd", "=", "n_embd", ",", "\n", "n_unmasked", "=", "n_unmasked", ")", "\n", "# input embedding stem", "\n", "self", ".", "tok_emb", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "pos_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "config", ".", "block_size", ",", "config", ".", "n_embd", ")", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "# transformer", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "[", "Block", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", ")", "]", ")", "\n", "# decoder head", "\n", "self", ".", "ln_f", "=", "nn", ".", "LayerNorm", "(", "config", ".", "n_embd", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "block_size", "=", "config", ".", "block_size", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "self", ".", "config", "=", "config", "\n", "logger", ".", "info", "(", "\"number of parameters: %e\"", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.GPT.get_block_size": [[147, 149], ["None"], "methods", ["None"], ["", "def", "get_block_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.GPT._init_weights": [[150, 158], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.GPT.forward": [[159, 180], ["mingpt.GPT.tok_emb", "mingpt.GPT.drop", "mingpt.GPT.blocks", "mingpt.GPT.ln_f", "mingpt.GPT.head", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "mingpt.GPT.view", "targets.view", "mingpt.GPT.size"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.Comm.head"], ["", "", "def", "forward", "(", "self", ",", "idx", ",", "embeddings", "=", "None", ",", "targets", "=", "None", ")", ":", "\n", "# forward the GPT model", "\n", "        ", "token_embeddings", "=", "self", ".", "tok_emb", "(", "idx", ")", "# each index maps to a (learnable) vector", "\n", "\n", "if", "embeddings", "is", "not", "None", ":", "# prepend explicit embeddings", "\n", "            ", "token_embeddings", "=", "torch", ".", "cat", "(", "(", "embeddings", ",", "token_embeddings", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "t", "=", "token_embeddings", ".", "shape", "[", "1", "]", "\n", "assert", "t", "<=", "self", ".", "block_size", ",", "\"Cannot forward, model block size is exhausted.\"", "\n", "position_embeddings", "=", "self", ".", "pos_emb", "[", ":", ",", ":", "t", ",", ":", "]", "# each position maps to a (learnable) vector", "\n", "x", "=", "self", ".", "drop", "(", "token_embeddings", "+", "position_embeddings", ")", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "x", "=", "self", ".", "ln_f", "(", "x", ")", "\n", "logits", "=", "self", ".", "head", "(", "x", ")", "\n", "\n", "# if we are given some desired targets also calculate the loss", "\n", "loss", "=", "None", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", ",", "targets", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "return", "logits", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.GPT.forward_with_past": [[181, 212], ["mingpt.GPT.tok_emb", "mingpt.GPT.drop", "enumerate", "mingpt.GPT.ln_f", "mingpt.GPT.head", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "block", "presents.append", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "mingpt.GPT.view", "targets.view", "mingpt.GPT.size"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.Comm.head"], ["", "def", "forward_with_past", "(", "self", ",", "idx", ",", "embeddings", "=", "None", ",", "targets", "=", "None", ",", "past", "=", "None", ",", "past_length", "=", "None", ")", ":", "\n", "# inference only", "\n", "        ", "assert", "not", "self", ".", "training", "\n", "token_embeddings", "=", "self", ".", "tok_emb", "(", "idx", ")", "# each index maps to a (learnable) vector", "\n", "if", "embeddings", "is", "not", "None", ":", "# prepend explicit embeddings", "\n", "            ", "token_embeddings", "=", "torch", ".", "cat", "(", "(", "embeddings", ",", "token_embeddings", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "past", "is", "not", "None", ":", "\n", "            ", "assert", "past_length", "is", "not", "None", "\n", "past", "=", "torch", ".", "cat", "(", "past", ",", "dim", "=", "-", "2", ")", "# n_layer, 2, b, nh, len_past, dim_head", "\n", "past_shape", "=", "list", "(", "past", ".", "shape", ")", "\n", "expected_shape", "=", "[", "self", ".", "config", ".", "n_layer", ",", "2", ",", "idx", ".", "shape", "[", "0", "]", ",", "self", ".", "config", ".", "n_head", ",", "past_length", ",", "self", ".", "config", ".", "n_embd", "//", "self", ".", "config", ".", "n_head", "]", "\n", "assert", "past_shape", "==", "expected_shape", ",", "f\"{past_shape} =/= {expected_shape}\"", "\n", "position_embeddings", "=", "self", ".", "pos_emb", "[", ":", ",", "past_length", ",", ":", "]", "# each position maps to a (learnable) vector", "\n", "", "else", ":", "\n", "            ", "position_embeddings", "=", "self", ".", "pos_emb", "[", ":", ",", ":", "token_embeddings", ".", "shape", "[", "1", "]", ",", ":", "]", "\n", "\n", "", "x", "=", "self", ".", "drop", "(", "token_embeddings", "+", "position_embeddings", ")", "\n", "presents", "=", "[", "]", "# accumulate over layers", "\n", "for", "i", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", ",", "present", "=", "block", "(", "x", ",", "layer_past", "=", "past", "[", "i", ",", "...", "]", "if", "past", "is", "not", "None", "else", "None", ",", "return_present", "=", "True", ")", "\n", "presents", ".", "append", "(", "present", ")", "\n", "\n", "", "x", "=", "self", ".", "ln_f", "(", "x", ")", "\n", "logits", "=", "self", ".", "head", "(", "x", ")", "\n", "# if we are given some desired targets also calculate the loss", "\n", "loss", "=", "None", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", ",", "targets", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "return", "logits", ",", "loss", ",", "torch", ".", "stack", "(", "presents", ")", "# _, _, n_layer, 2, b, nh, 1, dim_head", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.DummyGPT.__init__": [[216, 219], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "add_value", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_value", "=", "add_value", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.DummyGPT.forward": [[220, 222], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "idx", "+", "self", ".", "add_value", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.CodeGPT.__init__": [[226, 246], ["torch.Module.__init__", "mingpt.GPTConfig", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "mingpt.CodeGPT.apply", "logger.info", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "sum", "mingpt.Block", "p.numel", "range", "mingpt.CodeGPT.parameters"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "block_size", ",", "in_channels", ",", "n_layer", "=", "12", ",", "n_head", "=", "8", ",", "n_embd", "=", "256", ",", "\n", "embd_pdrop", "=", "0.", ",", "resid_pdrop", "=", "0.", ",", "attn_pdrop", "=", "0.", ",", "n_unmasked", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "config", "=", "GPTConfig", "(", "vocab_size", "=", "vocab_size", ",", "block_size", "=", "block_size", ",", "\n", "embd_pdrop", "=", "embd_pdrop", ",", "resid_pdrop", "=", "resid_pdrop", ",", "attn_pdrop", "=", "attn_pdrop", ",", "\n", "n_layer", "=", "n_layer", ",", "n_head", "=", "n_head", ",", "n_embd", "=", "n_embd", ",", "\n", "n_unmasked", "=", "n_unmasked", ")", "\n", "# input embedding stem", "\n", "self", ".", "tok_emb", "=", "nn", ".", "Linear", "(", "in_channels", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "pos_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "config", ".", "block_size", ",", "config", ".", "n_embd", ")", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "# transformer", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "[", "Block", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", ")", "]", ")", "\n", "# decoder head", "\n", "self", ".", "ln_f", "=", "nn", ".", "LayerNorm", "(", "config", ".", "n_embd", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "block_size", "=", "config", ".", "block_size", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "self", ".", "config", "=", "config", "\n", "logger", ".", "info", "(", "\"number of parameters: %e\"", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "parameters", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.CodeGPT.get_block_size": [[247, 249], ["None"], "methods", ["None"], ["", "def", "get_block_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "block_size", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.CodeGPT._init_weights": [[250, 258], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.CodeGPT.forward": [[259, 280], ["mingpt.CodeGPT.tok_emb", "mingpt.CodeGPT.drop", "mingpt.CodeGPT.blocks", "mingpt.CodeGPT.taming_cinln_f", "mingpt.CodeGPT.head", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "mingpt.CodeGPT.view", "targets.view", "mingpt.CodeGPT.size"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.comm.Comm.head"], ["", "", "def", "forward", "(", "self", ",", "idx", ",", "embeddings", "=", "None", ",", "targets", "=", "None", ")", ":", "\n", "# forward the GPT model", "\n", "        ", "token_embeddings", "=", "self", ".", "tok_emb", "(", "idx", ")", "# each index maps to a (learnable) vector", "\n", "\n", "if", "embeddings", "is", "not", "None", ":", "# prepend explicit embeddings", "\n", "            ", "token_embeddings", "=", "torch", ".", "cat", "(", "(", "embeddings", ",", "token_embeddings", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "t", "=", "token_embeddings", ".", "shape", "[", "1", "]", "\n", "assert", "t", "<=", "self", ".", "block_size", ",", "\"Cannot forward, model block size is exhausted.\"", "\n", "position_embeddings", "=", "self", ".", "pos_emb", "[", ":", ",", ":", "t", ",", ":", "]", "# each position maps to a (learnable) vector", "\n", "x", "=", "self", ".", "drop", "(", "token_embeddings", "+", "position_embeddings", ")", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "x", "=", "self", ".", "taming_cinln_f", "(", "x", ")", "\n", "logits", "=", "self", ".", "head", "(", "x", ")", "\n", "\n", "# if we are given some desired targets also calculate the loss", "\n", "loss", "=", "None", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", ",", "targets", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "return", "logits", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.__init__": [[324, 332], ["torch.Module.__init__", "mingpt.KMeans.register_buffer", "mingpt.KMeans.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ncluster", "=", "512", ",", "nc", "=", "3", ",", "niter", "=", "10", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ncluster", "=", "ncluster", "\n", "self", ".", "nc", "=", "nc", "\n", "self", ".", "niter", "=", "niter", "\n", "self", ".", "shape", "=", "(", "3", ",", "32", ",", "32", ")", "\n", "self", ".", "register_buffer", "(", "\"C\"", ",", "torch", ".", "zeros", "(", "self", ".", "ncluster", ",", "nc", ")", ")", "\n", "self", ".", "register_buffer", "(", "'initialized'", ",", "torch", ".", "tensor", "(", "0", ",", "dtype", "=", "torch", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.is_initialized": [[333, 335], ["mingpt.KMeans.initialized.item"], "methods", ["None"], ["", "def", "is_initialized", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "initialized", ".", "item", "(", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.initialize": [[336, 354], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "mingpt.KMeans.C.copy_", "mingpt.KMeans.initialized.fill_", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.any", "torch.any", "torch.any", "torch.any", "torch.any.sum().item", "torch.any.sum().item", "print", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "x[].mean", "torch.any.sum", "torch.any.sum", "range", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "initialize", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "D", "=", "x", ".", "shape", "\n", "assert", "D", "==", "self", ".", "nc", ",", "D", "\n", "c", "=", "x", "[", "torch", ".", "randperm", "(", "N", ")", "[", ":", "self", ".", "ncluster", "]", "]", "# init clusters at random", "\n", "for", "i", "in", "range", "(", "self", ".", "niter", ")", ":", "\n", "# assign all pixels to the closest codebook element", "\n", "            ", "a", "=", "(", "(", "x", "[", ":", ",", "None", ",", ":", "]", "-", "c", "[", "None", ",", ":", ",", ":", "]", ")", "**", "2", ")", ".", "sum", "(", "-", "1", ")", ".", "argmin", "(", "1", ")", "\n", "# move each codebook element to be the mean of the pixels that assigned to it", "\n", "c", "=", "torch", ".", "stack", "(", "[", "x", "[", "a", "==", "k", "]", ".", "mean", "(", "0", ")", "for", "k", "in", "range", "(", "self", ".", "ncluster", ")", "]", ")", "\n", "# re-assign any poorly positioned codebook elements", "\n", "nanix", "=", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "c", ")", ",", "dim", "=", "1", ")", "\n", "ndead", "=", "nanix", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "'done step %d/%d, re-initialized %d dead clusters'", "%", "(", "i", "+", "1", ",", "self", ".", "niter", ",", "ndead", ")", ")", "\n", "c", "[", "nanix", "]", "=", "x", "[", "torch", ".", "randperm", "(", "N", ")", "[", ":", "ndead", "]", "]", "# re-init dead clusters", "\n", "\n", "", "self", ".", "C", ".", "copy_", "(", "c", ")", "\n", "self", ".", "initialized", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.KMeans.forward": [[356, 383], ["x.reshape.reshape.reshape", "mingpt.KMeans.C.permute", "C.reshape.reshape.reshape", "x.reshape.reshape.permute", "x.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ",", "shape", "=", "None", ")", ":", "\n", "        ", "if", "not", "reverse", ":", "\n", "# flatten", "\n", "            ", "bs", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "assert", "c", "==", "self", ".", "nc", "\n", "x", "=", "x", ".", "reshape", "(", "bs", ",", "c", ",", "h", "*", "w", ",", "1", ")", "\n", "C", "=", "self", ".", "C", ".", "permute", "(", "1", ",", "0", ")", "\n", "C", "=", "C", ".", "reshape", "(", "1", ",", "c", ",", "1", ",", "self", ".", "ncluster", ")", "\n", "a", "=", "(", "(", "x", "-", "C", ")", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "argmin", "(", "-", "1", ")", "# bs, h*w indices", "\n", "return", "a", "\n", "", "else", ":", "\n", "# flatten", "\n", "            ", "bs", ",", "HW", "=", "x", ".", "shape", "\n", "\"\"\"\n            c = self.C.reshape( 1, self.nc,  1, self.ncluster)\n            c = c[bs*[0],:,:,:]\n            c = c[:,:,HW*[0],:]\n            x =      x.reshape(bs,       1, HW,             1)\n            x = x[:,3*[0],:,:]\n            x = torch.gather(c, dim=3, index=x)\n            \"\"\"", "\n", "x", "=", "self", ".", "C", "[", "x", "]", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "shape", "=", "shape", "if", "shape", "is", "not", "None", "else", "self", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "bs", ",", "*", "shape", ")", "\n", "\n", "return", "x", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.top_k_logits": [[285, 290], ["torch.topk", "torch.topk", "logits.clone", "float"], "function", ["None"], ["", "", "def", "top_k_logits", "(", "logits", ",", "k", ")", ":", "\n", "    ", "v", ",", "ix", "=", "torch", ".", "topk", "(", "logits", ",", "k", ")", "\n", "out", "=", "logits", ".", "clone", "(", ")", "\n", "out", "[", "out", "<", "v", "[", ":", ",", "[", "-", "1", "]", "]", "]", "=", "-", "float", "(", "'Inf'", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.sample": [[291, 320], ["torch.no_grad", "torch.no_grad", "model.get_block_size", "model.eval", "range", "model", "torch.nn.functional.softmax", "torch.cat", "torch.cat", "mingpt.top_k_logits", "torch.multinomial", "torch.multinomial", "torch.topk", "torch.topk", "torch.cat.size"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.CodeGPT.get_block_size", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.mingpt.top_k_logits"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample", "(", "model", ",", "x", ",", "steps", ",", "temperature", "=", "1.0", ",", "sample", "=", "False", ",", "top_k", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    take a conditioning sequence of indices in x (of shape (b,t)) and predict the next token in\n    the sequence, feeding the predictions back into the model each time. Clearly the sampling\n    has quadratic complexity unlike an RNN that is only linear, and has a finite context window\n    of block_size, unlike an RNN that has an infinite context window.\n    \"\"\"", "\n", "block_size", "=", "model", ".", "get_block_size", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "k", "in", "range", "(", "steps", ")", ":", "\n", "        ", "x_cond", "=", "x", "if", "x", ".", "size", "(", "1", ")", "<=", "block_size", "else", "x", "[", ":", ",", "-", "block_size", ":", "]", "# crop context if needed", "\n", "logits", ",", "_", "=", "model", "(", "x_cond", ")", "\n", "# pluck the logits at the final step and scale by temperature", "\n", "logits", "=", "logits", "[", ":", ",", "-", "1", ",", ":", "]", "/", "temperature", "\n", "# optionally crop probabilities to only the top k options", "\n", "if", "top_k", "is", "not", "None", ":", "\n", "            ", "logits", "=", "top_k_logits", "(", "logits", ",", "top_k", ")", "\n", "# apply softmax to convert to probabilities", "\n", "", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "# sample from the distribution or take the most likely", "\n", "if", "sample", ":", "\n", "            ", "ix", "=", "torch", ".", "multinomial", "(", "probs", ",", "num_samples", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "ix", "=", "torch", ".", "topk", "(", "probs", ",", "k", "=", "1", ",", "dim", "=", "-", "1", ")", "\n", "# append to the sequence and continue", "\n", "", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "ix", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.AbstractPermuter.__init__": [[7, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.AbstractPermuter.forward": [[9, 11], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.Identity.__init__": [[14, 16], ["permuter.AbstractPermuter.__init__"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.Identity.forward": [[17, 19], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.Subsample.__init__": [[22, 39], ["permuter.AbstractPermuter.__init__", "numpy.arange().reshape", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "permuter.Subsample.register_buffer", "permuter.Subsample.register_buffer", "min", "indices.reshape.reshape.reshape", "indices.reshape.reshape.transpose", "indices.reshape.reshape.reshape", "indices.reshape.reshape.ravel", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.arange", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "H", ",", "W", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "C", "=", "1", "\n", "indices", "=", "np", ".", "arange", "(", "H", "*", "W", ")", ".", "reshape", "(", "C", ",", "H", ",", "W", ")", "\n", "while", "min", "(", "H", ",", "W", ")", ">", "1", ":", "\n", "            ", "indices", "=", "indices", ".", "reshape", "(", "C", ",", "H", "//", "2", ",", "2", ",", "W", "//", "2", ",", "2", ")", "\n", "indices", "=", "indices", ".", "transpose", "(", "0", ",", "2", ",", "4", ",", "1", ",", "3", ")", "\n", "indices", "=", "indices", ".", "reshape", "(", "C", "*", "4", ",", "H", "//", "2", ",", "W", "//", "2", ")", "\n", "H", "=", "H", "//", "2", "\n", "W", "=", "W", "//", "2", "\n", "C", "=", "C", "*", "4", "\n", "", "assert", "H", "==", "W", "==", "1", "\n", "idx", "=", "torch", ".", "tensor", "(", "indices", ".", "ravel", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'forward_shuffle_idx'", ",", "\n", "nn", ".", "Parameter", "(", "idx", ",", "requires_grad", "=", "False", ")", ")", "\n", "self", ".", "register_buffer", "(", "'backward_shuffle_idx'", ",", "\n", "nn", ".", "Parameter", "(", "torch", ".", "argsort", "(", "idx", ")", ",", "requires_grad", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.Subsample.forward": [[40, 45], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "not", "reverse", ":", "\n", "            ", "return", "x", "[", ":", ",", "self", ".", "forward_shuffle_idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "x", "[", ":", ",", "self", ".", "backward_shuffle_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.ZCurve.__init__": [[63, 73], ["permuter.AbstractPermuter.__init__", "numpy.argsort", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "permuter.ZCurve.register_buffer", "permuter.ZCurve.register_buffer", "numpy.int64", "permuter.mortonify", "range", "range"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.mortonify"], ["    ", "def", "__init__", "(", "self", ",", "H", ",", "W", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "reverseidx", "=", "[", "np", ".", "int64", "(", "mortonify", "(", "i", ",", "j", ")", ")", "for", "i", "in", "range", "(", "H", ")", "for", "j", "in", "range", "(", "W", ")", "]", "\n", "idx", "=", "np", ".", "argsort", "(", "reverseidx", ")", "\n", "idx", "=", "torch", ".", "tensor", "(", "idx", ")", "\n", "reverseidx", "=", "torch", ".", "tensor", "(", "reverseidx", ")", "\n", "self", ".", "register_buffer", "(", "'forward_shuffle_idx'", ",", "\n", "idx", ")", "\n", "self", ".", "register_buffer", "(", "'backward_shuffle_idx'", ",", "\n", "reverseidx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.ZCurve.forward": [[74, 79], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "not", "reverse", ":", "\n", "            ", "return", "x", "[", ":", ",", "self", ".", "forward_shuffle_idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "x", "[", ":", ",", "self", ".", "backward_shuffle_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.SpiralOut.__init__": [[82, 133], ["permuter.AbstractPermuter.__init__", "numpy.arange().reshape", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "permuter.SpiralOut.register_buffer", "permuter.SpiralOut.register_buffer", "range", "range", "len", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "numpy.arange", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "range", "range", "range", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "H", ",", "W", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "H", "==", "W", "\n", "size", "=", "W", "\n", "indices", "=", "np", ".", "arange", "(", "size", "*", "size", ")", ".", "reshape", "(", "size", ",", "size", ")", "\n", "\n", "i0", "=", "size", "//", "2", "\n", "j0", "=", "size", "//", "2", "-", "1", "\n", "\n", "i", "=", "i0", "\n", "j", "=", "j0", "\n", "\n", "idx", "=", "[", "indices", "[", "i0", ",", "j0", "]", "]", "\n", "step_mult", "=", "0", "\n", "for", "c", "in", "range", "(", "1", ",", "size", "//", "2", "+", "1", ")", ":", "\n", "            ", "step_mult", "+=", "1", "\n", "# steps left", "\n", "for", "k", "in", "range", "(", "step_mult", ")", ":", "\n", "                ", "i", "=", "i", "-", "1", "\n", "j", "=", "j", "\n", "idx", ".", "append", "(", "indices", "[", "i", ",", "j", "]", ")", "\n", "\n", "# step down", "\n", "", "for", "k", "in", "range", "(", "step_mult", ")", ":", "\n", "                ", "i", "=", "i", "\n", "j", "=", "j", "+", "1", "\n", "idx", ".", "append", "(", "indices", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "step_mult", "+=", "1", "\n", "if", "c", "<", "size", "//", "2", ":", "\n", "# step right", "\n", "                ", "for", "k", "in", "range", "(", "step_mult", ")", ":", "\n", "                    ", "i", "=", "i", "+", "1", "\n", "j", "=", "j", "\n", "idx", ".", "append", "(", "indices", "[", "i", ",", "j", "]", ")", "\n", "\n", "# step up", "\n", "", "for", "k", "in", "range", "(", "step_mult", ")", ":", "\n", "                    ", "i", "=", "i", "\n", "j", "=", "j", "-", "1", "\n", "idx", ".", "append", "(", "indices", "[", "i", ",", "j", "]", ")", "\n", "", "", "else", ":", "\n", "# end reached", "\n", "                ", "for", "k", "in", "range", "(", "step_mult", "-", "1", ")", ":", "\n", "                    ", "i", "=", "i", "+", "1", "\n", "idx", ".", "append", "(", "indices", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "", "", "assert", "len", "(", "idx", ")", "==", "size", "*", "size", "\n", "idx", "=", "torch", ".", "tensor", "(", "idx", ")", "\n", "self", ".", "register_buffer", "(", "'forward_shuffle_idx'", ",", "idx", ")", "\n", "self", ".", "register_buffer", "(", "'backward_shuffle_idx'", ",", "torch", ".", "argsort", "(", "idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.SpiralOut.forward": [[134, 139], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "not", "reverse", ":", "\n", "            ", "return", "x", "[", ":", ",", "self", ".", "forward_shuffle_idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "x", "[", ":", ",", "self", ".", "backward_shuffle_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.SpiralIn.__init__": [[142, 194], ["permuter.AbstractPermuter.__init__", "numpy.arange().reshape", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "permuter.SpiralIn.register_buffer", "permuter.SpiralIn.register_buffer", "range", "range", "len", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "numpy.arange", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "range", "range", "range", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "H", ",", "W", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "H", "==", "W", "\n", "size", "=", "W", "\n", "indices", "=", "np", ".", "arange", "(", "size", "*", "size", ")", ".", "reshape", "(", "size", ",", "size", ")", "\n", "\n", "i0", "=", "size", "//", "2", "\n", "j0", "=", "size", "//", "2", "-", "1", "\n", "\n", "i", "=", "i0", "\n", "j", "=", "j0", "\n", "\n", "idx", "=", "[", "indices", "[", "i0", ",", "j0", "]", "]", "\n", "step_mult", "=", "0", "\n", "for", "c", "in", "range", "(", "1", ",", "size", "//", "2", "+", "1", ")", ":", "\n", "            ", "step_mult", "+=", "1", "\n", "# steps left", "\n", "for", "k", "in", "range", "(", "step_mult", ")", ":", "\n", "                ", "i", "=", "i", "-", "1", "\n", "j", "=", "j", "\n", "idx", ".", "append", "(", "indices", "[", "i", ",", "j", "]", ")", "\n", "\n", "# step down", "\n", "", "for", "k", "in", "range", "(", "step_mult", ")", ":", "\n", "                ", "i", "=", "i", "\n", "j", "=", "j", "+", "1", "\n", "idx", ".", "append", "(", "indices", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "step_mult", "+=", "1", "\n", "if", "c", "<", "size", "//", "2", ":", "\n", "# step right", "\n", "                ", "for", "k", "in", "range", "(", "step_mult", ")", ":", "\n", "                    ", "i", "=", "i", "+", "1", "\n", "j", "=", "j", "\n", "idx", ".", "append", "(", "indices", "[", "i", ",", "j", "]", ")", "\n", "\n", "# step up", "\n", "", "for", "k", "in", "range", "(", "step_mult", ")", ":", "\n", "                    ", "i", "=", "i", "\n", "j", "=", "j", "-", "1", "\n", "idx", ".", "append", "(", "indices", "[", "i", ",", "j", "]", ")", "\n", "", "", "else", ":", "\n", "# end reached", "\n", "                ", "for", "k", "in", "range", "(", "step_mult", "-", "1", ")", ":", "\n", "                    ", "i", "=", "i", "+", "1", "\n", "idx", ".", "append", "(", "indices", "[", "i", ",", "j", "]", ")", "\n", "\n", "", "", "", "assert", "len", "(", "idx", ")", "==", "size", "*", "size", "\n", "idx", "=", "idx", "[", ":", ":", "-", "1", "]", "\n", "idx", "=", "torch", ".", "tensor", "(", "idx", ")", "\n", "self", ".", "register_buffer", "(", "'forward_shuffle_idx'", ",", "idx", ")", "\n", "self", ".", "register_buffer", "(", "'backward_shuffle_idx'", ",", "torch", ".", "argsort", "(", "idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.SpiralIn.forward": [[195, 200], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "not", "reverse", ":", "\n", "            ", "return", "x", "[", ":", ",", "self", ".", "forward_shuffle_idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "x", "[", ":", ",", "self", ".", "backward_shuffle_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.Random.__init__": [[203, 209], ["torch.Module.__init__", "numpy.random.RandomState().permutation", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "permuter.Random.register_buffer", "permuter.Random.register_buffer", "numpy.random.RandomState().permutation.ravel", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "H", ",", "W", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "indices", "=", "np", ".", "random", ".", "RandomState", "(", "1", ")", ".", "permutation", "(", "H", "*", "W", ")", "\n", "idx", "=", "torch", ".", "tensor", "(", "indices", ".", "ravel", "(", ")", ")", "\n", "self", ".", "register_buffer", "(", "'forward_shuffle_idx'", ",", "idx", ")", "\n", "self", ".", "register_buffer", "(", "'backward_shuffle_idx'", ",", "torch", ".", "argsort", "(", "idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.Random.forward": [[210, 215], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "not", "reverse", ":", "\n", "            ", "return", "x", "[", ":", ",", "self", ".", "forward_shuffle_idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "x", "[", ":", ",", "self", ".", "backward_shuffle_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.AlternateParsing.__init__": [[218, 228], ["permuter.AbstractPermuter.__init__", "numpy.arange().reshape", "range", "numpy.arange().reshape.flatten", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "permuter.AlternateParsing.register_buffer", "permuter.AlternateParsing.register_buffer", "len", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "H", ",", "W", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "indices", "=", "np", ".", "arange", "(", "W", "*", "H", ")", ".", "reshape", "(", "H", ",", "W", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "H", ",", "2", ")", ":", "\n", "            ", "indices", "[", "i", ",", ":", "]", "=", "indices", "[", "i", ",", ":", ":", "-", "1", "]", "\n", "", "idx", "=", "indices", ".", "flatten", "(", ")", "\n", "assert", "len", "(", "idx", ")", "==", "H", "*", "W", "\n", "idx", "=", "torch", ".", "tensor", "(", "idx", ")", "\n", "self", ".", "register_buffer", "(", "'forward_shuffle_idx'", ",", "idx", ")", "\n", "self", ".", "register_buffer", "(", "'backward_shuffle_idx'", ",", "torch", ".", "argsort", "(", "idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.AlternateParsing.forward": [[229, 234], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "not", "reverse", ":", "\n", "            ", "return", "x", "[", ":", ",", "self", ".", "forward_shuffle_idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "x", "[", ":", ",", "self", ".", "backward_shuffle_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.transformer.permuter.mortonify": [[47, 60], ["numpy.uint64", "numpy.uint64", "numpy.uint", "range", "numpy.uint64", "numpy.uint64", "numpy.uint64", "numpy.uint64", "numpy.uint64", "numpy.uint64"], "function", ["None"], ["", "", "", "def", "mortonify", "(", "i", ",", "j", ")", ":", "\n", "    ", "\"\"\"(i,j) index to linear morton code\"\"\"", "\n", "i", "=", "np", ".", "uint64", "(", "i", ")", "\n", "j", "=", "np", ".", "uint64", "(", "j", ")", "\n", "\n", "z", "=", "np", ".", "uint", "(", "0", ")", "\n", "\n", "for", "pos", "in", "range", "(", "32", ")", ":", "\n", "        ", "z", "=", "(", "z", "|", "\n", "(", "(", "j", "&", "(", "np", ".", "uint64", "(", "1", ")", "<<", "np", ".", "uint64", "(", "pos", ")", ")", ")", "<<", "np", ".", "uint64", "(", "pos", ")", ")", "|", "\n", "(", "(", "i", "&", "(", "np", ".", "uint64", "(", "1", ")", "<<", "np", ".", "uint64", "(", "pos", ")", ")", ")", "<<", "np", ".", "uint64", "(", "pos", "+", "1", ")", ")", "\n", ")", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.VectorQuantizer.__init__": [[25, 33], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "quantize.VectorQuantizer.embedding.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["def", "__init__", "(", "self", ",", "n_e", ",", "e_dim", ",", "beta", ")", ":", "\n", "        ", "super", "(", "VectorQuantizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_e", "=", "n_e", "\n", "self", ".", "e_dim", "=", "e_dim", "\n", "self", ".", "beta", "=", "beta", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "n_e", ",", "self", ".", "e_dim", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1.0", "/", "self", ".", "n_e", ",", "1.0", "/", "self", ".", "n_e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.VectorQuantizer.forward": [[34, 91], ["z.permute().contiguous.permute().contiguous.permute().contiguous", "z.permute().contiguous.permute().contiguous.view", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.argmin().unsqueeze", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to.scatter_", "torch.zeros().to.scatter_", "torch.zeros().to.scatter_", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "z_q.permute().contiguous.permute().contiguous.permute().contiguous", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "z.permute().contiguous.permute().contiguous.permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "z_q.permute().contiguous.permute().contiguous.permute", "quantize.VectorQuantizer.embedding.weight.t", "z_q.permute().contiguous.permute().contiguous.detach", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "z.permute().contiguous.permute().contiguous.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "\"\"\"\n        Inputs the output of the encoder network z and maps it to a discrete\n        one-hot vector that is the index of the closest embedding vector e_j\n        z (continuous) -> z_q (discrete)\n        z.shape = (batch, channel, height, width)\n        quantization pipeline:\n            1. get encoder input (B,C,H,W)\n            2. flatten input to (B*H*W,C)\n        \"\"\"", "\n", "# reshape z -> (batch, height, width, channel) and flatten", "\n", "z", "=", "z", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "z_flattened", "=", "z", ".", "view", "(", "-", "1", ",", "self", ".", "e_dim", ")", "\n", "# distances from z to embeddings e_j (z - e)^2 = z^2 + e^2 - 2 e * z", "\n", "\n", "d", "=", "torch", ".", "sum", "(", "z_flattened", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "torch", ".", "sum", "(", "self", ".", "embedding", ".", "weight", "**", "2", ",", "dim", "=", "1", ")", "-", "2", "*", "torch", ".", "matmul", "(", "z_flattened", ",", "self", ".", "embedding", ".", "weight", ".", "t", "(", ")", ")", "\n", "\n", "## could possible replace this here", "\n", "# #\\start...", "\n", "# find closest encodings", "\n", "min_encoding_indices", "=", "torch", ".", "argmin", "(", "d", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "min_encodings", "=", "torch", ".", "zeros", "(", "\n", "min_encoding_indices", ".", "shape", "[", "0", "]", ",", "self", ".", "n_e", ")", ".", "to", "(", "z", ")", "\n", "min_encodings", ".", "scatter_", "(", "1", ",", "min_encoding_indices", ",", "1", ")", "\n", "\n", "# dtype min encodings: torch.float32", "\n", "# min_encodings shape: torch.Size([2048, 512])", "\n", "# min_encoding_indices.shape: torch.Size([2048, 1])", "\n", "\n", "# get quantized latent vectors", "\n", "z_q", "=", "torch", ".", "matmul", "(", "min_encodings", ",", "self", ".", "embedding", ".", "weight", ")", ".", "view", "(", "z", ".", "shape", ")", "\n", "#.........\\end", "\n", "\n", "# with:", "\n", "# .........\\start", "\n", "#min_encoding_indices = torch.argmin(d, dim=1)", "\n", "#z_q = self.embedding(min_encoding_indices)", "\n", "# ......\\end......... (TODO)", "\n", "\n", "# compute loss for embedding", "\n", "loss", "=", "torch", ".", "mean", "(", "(", "z_q", ".", "detach", "(", ")", "-", "z", ")", "**", "2", ")", "+", "self", ".", "beta", "*", "torch", ".", "mean", "(", "(", "z_q", "-", "z", ".", "detach", "(", ")", ")", "**", "2", ")", "\n", "\n", "# preserve gradients", "\n", "z_q", "=", "z", "+", "(", "z_q", "-", "z", ")", ".", "detach", "(", ")", "\n", "\n", "# perplexity", "\n", "e_mean", "=", "torch", ".", "mean", "(", "min_encodings", ",", "dim", "=", "0", ")", "\n", "perplexity", "=", "torch", ".", "exp", "(", "-", "torch", ".", "sum", "(", "e_mean", "*", "torch", ".", "log", "(", "e_mean", "+", "1e-10", ")", ")", ")", "\n", "\n", "# reshape back to match original input shape", "\n", "z_q", "=", "z_q", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "z_q", ",", "loss", ",", "(", "perplexity", ",", "min_encodings", ",", "min_encoding_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.VectorQuantizer.get_codebook_entry": [[92, 108], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to.scatter_", "torch.zeros().to.scatter_", "torch.zeros().to.scatter_", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.zeros().to.float", "torch.zeros().to.float", "torch.zeros().to.float", "z_q.permute().contiguous.permute().contiguous.view", "z_q.permute().contiguous.permute().contiguous.permute().contiguous", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "z_q.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "get_codebook_entry", "(", "self", ",", "indices", ",", "shape", ")", ":", "\n", "# shape specifying (batch, height, width, channel)", "\n", "# TODO: check for more easy handling with nn.Embedding", "\n", "        ", "min_encodings", "=", "torch", ".", "zeros", "(", "indices", ".", "shape", "[", "0", "]", ",", "self", ".", "n_e", ")", ".", "to", "(", "indices", ")", "\n", "min_encodings", ".", "scatter_", "(", "1", ",", "indices", "[", ":", ",", "None", "]", ",", "1", ")", "\n", "\n", "# get quantized latent vectors", "\n", "z_q", "=", "torch", ".", "matmul", "(", "min_encodings", ".", "float", "(", ")", ",", "self", ".", "embedding", ".", "weight", ")", "\n", "\n", "if", "shape", "is", "not", "None", ":", "\n", "            ", "z_q", "=", "z_q", ".", "view", "(", "shape", ")", "\n", "\n", "# reshape back to match original input shape", "\n", "z_q", "=", "z_q", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "return", "z_q", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.GumbelQuantize.__init__": [[117, 146], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Embedding", "torch.Embedding", "torch.Embedding", "quantize.GumbelQuantize.register_buffer", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load"], ["def", "__init__", "(", "self", ",", "num_hiddens", ",", "embedding_dim", ",", "n_embed", ",", "straight_through", "=", "True", ",", "\n", "kl_weight", "=", "5e-4", ",", "temp_init", "=", "1.0", ",", "use_vqinterface", "=", "True", ",", "\n", "remap", "=", "None", ",", "unknown_index", "=", "\"random\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "n_embed", "=", "n_embed", "\n", "\n", "self", ".", "straight_through", "=", "straight_through", "\n", "self", ".", "temperature", "=", "temp_init", "\n", "self", ".", "kl_weight", "=", "kl_weight", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "num_hiddens", ",", "n_embed", ",", "1", ")", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "n_embed", ",", "embedding_dim", ")", "\n", "\n", "self", ".", "use_vqinterface", "=", "use_vqinterface", "\n", "\n", "self", ".", "remap", "=", "remap", "\n", "if", "self", ".", "remap", "is", "not", "None", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"used\"", ",", "torch", ".", "tensor", "(", "np", ".", "load", "(", "self", ".", "remap", ")", ")", ")", "\n", "self", ".", "re_embed", "=", "self", ".", "used", ".", "shape", "[", "0", "]", "\n", "self", ".", "unknown_index", "=", "unknown_index", "# \"random\" or \"extra\" or integer", "\n", "if", "self", ".", "unknown_index", "==", "\"extra\"", ":", "\n", "                ", "self", ".", "unknown_index", "=", "self", ".", "re_embed", "\n", "self", ".", "re_embed", "=", "self", ".", "re_embed", "+", "1", "\n", "", "print", "(", "f\"Remapping {self.n_embed} indices to {self.re_embed} indices. \"", "\n", "f\"Using {self.unknown_index} for unknown indices.\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "re_embed", "=", "n_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.GumbelQuantize.remap_to_used": [[147, 160], ["inds.reshape.reshape.reshape", "quantize.GumbelQuantize.used.to", "match.argmax", "match.argmax.reshape", "len", "match.sum", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "methods", ["None"], ["", "", "def", "remap_to_used", "(", "self", ",", "inds", ")", ":", "\n", "        ", "ishape", "=", "inds", ".", "shape", "\n", "assert", "len", "(", "ishape", ")", ">", "1", "\n", "inds", "=", "inds", ".", "reshape", "(", "ishape", "[", "0", "]", ",", "-", "1", ")", "\n", "used", "=", "self", ".", "used", ".", "to", "(", "inds", ")", "\n", "match", "=", "(", "inds", "[", ":", ",", ":", ",", "None", "]", "==", "used", "[", "None", ",", "None", ",", "...", "]", ")", ".", "long", "(", ")", "\n", "new", "=", "match", ".", "argmax", "(", "-", "1", ")", "\n", "unknown", "=", "match", ".", "sum", "(", "2", ")", "<", "1", "\n", "if", "self", ".", "unknown_index", "==", "\"random\"", ":", "\n", "            ", "new", "[", "unknown", "]", "=", "torch", ".", "randint", "(", "0", ",", "self", ".", "re_embed", ",", "size", "=", "new", "[", "unknown", "]", ".", "shape", ")", ".", "to", "(", "device", "=", "new", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "new", "[", "unknown", "]", "=", "self", ".", "unknown_index", "\n", "", "return", "new", ".", "reshape", "(", "ishape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.GumbelQuantize.unmap_to_all": [[161, 170], ["inds.reshape.reshape.reshape", "quantize.GumbelQuantize.used.to", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.reshape", "torch.gather.reshape", "torch.gather.reshape", "len"], "methods", ["None"], ["", "def", "unmap_to_all", "(", "self", ",", "inds", ")", ":", "\n", "        ", "ishape", "=", "inds", ".", "shape", "\n", "assert", "len", "(", "ishape", ")", ">", "1", "\n", "inds", "=", "inds", ".", "reshape", "(", "ishape", "[", "0", "]", ",", "-", "1", ")", "\n", "used", "=", "self", ".", "used", ".", "to", "(", "inds", ")", "\n", "if", "self", ".", "re_embed", ">", "self", ".", "used", ".", "shape", "[", "0", "]", ":", "# extra token", "\n", "            ", "inds", "[", "inds", ">=", "self", ".", "used", ".", "shape", "[", "0", "]", "]", "=", "0", "# simply set to zero", "\n", "", "back", "=", "torch", ".", "gather", "(", "used", "[", "None", ",", ":", "]", "[", "inds", ".", "shape", "[", "0", "]", "*", "[", "0", "]", ",", ":", "]", ",", "1", ",", "inds", ")", "\n", "return", "back", ".", "reshape", "(", "ishape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.GumbelQuantize.forward": [[171, 201], ["quantize.GumbelQuantize.proj", "torch.gumbel_softmax", "torch.gumbel_softmax", "torch.gumbel_softmax", "torch.einsum", "torch.einsum", "torch.einsum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.gumbel_softmax.argmax", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "quantize.GumbelQuantize.remap_to_used", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.VectorQuantizer2.remap_to_used"], ["", "def", "forward", "(", "self", ",", "z", ",", "temp", "=", "None", ",", "return_logits", "=", "False", ")", ":", "\n", "# force hard = True when we are in eval mode, as we must quantize. actually, always true seems to work", "\n", "        ", "hard", "=", "self", ".", "straight_through", "if", "self", ".", "training", "else", "True", "\n", "temp", "=", "self", ".", "temperature", "if", "temp", "is", "None", "else", "temp", "\n", "\n", "logits", "=", "self", ".", "proj", "(", "z", ")", "\n", "if", "self", ".", "remap", "is", "not", "None", ":", "\n", "# continue only with used logits", "\n", "            ", "full_zeros", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "logits", "=", "logits", "[", ":", ",", "self", ".", "used", ",", "...", "]", "\n", "\n", "", "soft_one_hot", "=", "F", ".", "gumbel_softmax", "(", "logits", ",", "tau", "=", "temp", ",", "dim", "=", "1", ",", "hard", "=", "hard", ")", "\n", "if", "self", ".", "remap", "is", "not", "None", ":", "\n", "# go back to all entries but unused set to zero", "\n", "            ", "full_zeros", "[", ":", ",", "self", ".", "used", ",", "...", "]", "=", "soft_one_hot", "\n", "soft_one_hot", "=", "full_zeros", "\n", "", "z_q", "=", "einsum", "(", "'b n h w, n d -> b d h w'", ",", "soft_one_hot", ",", "self", ".", "embed", ".", "weight", ")", "\n", "\n", "# + kl divergence to the prior loss", "\n", "qy", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "diff", "=", "self", ".", "kl_weight", "*", "torch", ".", "sum", "(", "qy", "*", "torch", ".", "log", "(", "qy", "*", "self", ".", "n_embed", "+", "1e-10", ")", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "ind", "=", "soft_one_hot", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "if", "self", ".", "remap", "is", "not", "None", ":", "\n", "            ", "ind", "=", "self", ".", "remap_to_used", "(", "ind", ")", "\n", "", "if", "self", ".", "use_vqinterface", ":", "\n", "            ", "if", "return_logits", ":", "\n", "                ", "return", "z_q", ",", "diff", ",", "(", "None", ",", "None", ",", "ind", ")", ",", "logits", "\n", "", "return", "z_q", ",", "diff", ",", "(", "None", ",", "None", ",", "ind", ")", "\n", "", "return", "z_q", ",", "diff", ",", "ind", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.GumbelQuantize.get_codebook_entry": [[202, 211], ["einops.rearrange", "torch.one_hot().permute().float", "torch.one_hot().permute().float", "torch.one_hot().permute().float", "torch.einsum", "torch.einsum", "torch.einsum", "quantize.GumbelQuantize.unmap_to_all", "torch.one_hot().permute", "torch.one_hot().permute", "torch.one_hot().permute", "torch.one_hot", "torch.one_hot", "torch.one_hot"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.VectorQuantizer2.unmap_to_all"], ["", "def", "get_codebook_entry", "(", "self", ",", "indices", ",", "shape", ")", ":", "\n", "        ", "b", ",", "h", ",", "w", ",", "c", "=", "shape", "\n", "assert", "b", "*", "h", "*", "w", "==", "indices", ".", "shape", "[", "0", "]", "\n", "indices", "=", "rearrange", "(", "indices", ",", "'(b h w) -> b h w'", ",", "b", "=", "b", ",", "h", "=", "h", ",", "w", "=", "w", ")", "\n", "if", "self", ".", "remap", "is", "not", "None", ":", "\n", "            ", "indices", "=", "self", ".", "unmap_to_all", "(", "indices", ")", "\n", "", "one_hot", "=", "F", ".", "one_hot", "(", "indices", ",", "num_classes", "=", "self", ".", "n_embed", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "z_q", "=", "einsum", "(", "'b n h w, n d -> b d h w'", ",", "one_hot", ",", "self", ".", "embed", ".", "weight", ")", "\n", "return", "z_q", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.VectorQuantizer2.__init__": [[221, 246], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "quantize.VectorQuantizer2.embedding.weight.data.uniform_", "quantize.VectorQuantizer2.register_buffer", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load"], ["def", "__init__", "(", "self", ",", "n_e", ",", "e_dim", ",", "beta", ",", "remap", "=", "None", ",", "unknown_index", "=", "\"random\"", ",", "\n", "sane_index_shape", "=", "False", ",", "legacy", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_e", "=", "n_e", "\n", "self", ".", "e_dim", "=", "e_dim", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "legacy", "=", "legacy", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "n_e", ",", "self", ".", "e_dim", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1.0", "/", "self", ".", "n_e", ",", "1.0", "/", "self", ".", "n_e", ")", "\n", "\n", "self", ".", "remap", "=", "remap", "\n", "if", "self", ".", "remap", "is", "not", "None", ":", "\n", "            ", "self", ".", "register_buffer", "(", "\"used\"", ",", "torch", ".", "tensor", "(", "np", ".", "load", "(", "self", ".", "remap", ")", ")", ")", "\n", "self", ".", "re_embed", "=", "self", ".", "used", ".", "shape", "[", "0", "]", "\n", "self", ".", "unknown_index", "=", "unknown_index", "# \"random\" or \"extra\" or integer", "\n", "if", "self", ".", "unknown_index", "==", "\"extra\"", ":", "\n", "                ", "self", ".", "unknown_index", "=", "self", ".", "re_embed", "\n", "self", ".", "re_embed", "=", "self", ".", "re_embed", "+", "1", "\n", "", "print", "(", "f\"Remapping {self.n_e} indices to {self.re_embed} indices. \"", "\n", "f\"Using {self.unknown_index} for unknown indices.\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "re_embed", "=", "n_e", "\n", "\n", "", "self", ".", "sane_index_shape", "=", "sane_index_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.VectorQuantizer2.remap_to_used": [[247, 260], ["inds.reshape.reshape.reshape", "quantize.VectorQuantizer2.used.to", "match.argmax", "match.argmax.reshape", "len", "match.sum", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint().to", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "methods", ["None"], ["", "def", "remap_to_used", "(", "self", ",", "inds", ")", ":", "\n", "        ", "ishape", "=", "inds", ".", "shape", "\n", "assert", "len", "(", "ishape", ")", ">", "1", "\n", "inds", "=", "inds", ".", "reshape", "(", "ishape", "[", "0", "]", ",", "-", "1", ")", "\n", "used", "=", "self", ".", "used", ".", "to", "(", "inds", ")", "\n", "match", "=", "(", "inds", "[", ":", ",", ":", ",", "None", "]", "==", "used", "[", "None", ",", "None", ",", "...", "]", ")", ".", "long", "(", ")", "\n", "new", "=", "match", ".", "argmax", "(", "-", "1", ")", "\n", "unknown", "=", "match", ".", "sum", "(", "2", ")", "<", "1", "\n", "if", "self", ".", "unknown_index", "==", "\"random\"", ":", "\n", "            ", "new", "[", "unknown", "]", "=", "torch", ".", "randint", "(", "0", ",", "self", ".", "re_embed", ",", "size", "=", "new", "[", "unknown", "]", ".", "shape", ")", ".", "to", "(", "device", "=", "new", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "new", "[", "unknown", "]", "=", "self", ".", "unknown_index", "\n", "", "return", "new", ".", "reshape", "(", "ishape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.VectorQuantizer2.unmap_to_all": [[261, 270], ["inds.reshape.reshape.reshape", "quantize.VectorQuantizer2.used.to", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.reshape", "torch.gather.reshape", "torch.gather.reshape", "len"], "methods", ["None"], ["", "def", "unmap_to_all", "(", "self", ",", "inds", ")", ":", "\n", "        ", "ishape", "=", "inds", ".", "shape", "\n", "assert", "len", "(", "ishape", ")", ">", "1", "\n", "inds", "=", "inds", ".", "reshape", "(", "ishape", "[", "0", "]", ",", "-", "1", ")", "\n", "used", "=", "self", ".", "used", ".", "to", "(", "inds", ")", "\n", "if", "self", ".", "re_embed", ">", "self", ".", "used", ".", "shape", "[", "0", "]", ":", "# extra token", "\n", "            ", "inds", "[", "inds", ">=", "self", ".", "used", ".", "shape", "[", "0", "]", "]", "=", "0", "# simply set to zero", "\n", "", "back", "=", "torch", ".", "gather", "(", "used", "[", "None", ",", ":", "]", "[", "inds", ".", "shape", "[", "0", "]", "*", "[", "0", "]", ",", ":", "]", ",", "1", ",", "inds", ")", "\n", "return", "back", ".", "reshape", "(", "ishape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.VectorQuantizer2.forward": [[271, 313], ["einops.rearrange().contiguous", "einops.rearrange().contiguous.view", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "quantize.VectorQuantizer2.embedding().view", "einops.rearrange().contiguous", "min_encoding_indices.reshape.reshape.reshape", "quantize.VectorQuantizer2.remap_to_used", "min_encoding_indices.reshape.reshape.reshape", "min_encoding_indices.reshape.reshape.reshape", "einops.rearrange", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "quantize.VectorQuantizer2.embedding", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "einops.rearrange", "einops.rearrange", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "einops.rearrange().contiguous.detach", "einops.rearrange().contiguous.detach", "einops.rearrange().contiguous.detach", "einops.rearrange().contiguous.detach"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.VectorQuantizer2.remap_to_used"], ["", "def", "forward", "(", "self", ",", "z", ",", "temp", "=", "None", ",", "rescale_logits", "=", "False", ",", "return_logits", "=", "False", ")", ":", "\n", "        ", "assert", "temp", "is", "None", "or", "temp", "==", "1.0", ",", "\"Only for interface compatible with Gumbel\"", "\n", "assert", "rescale_logits", "==", "False", ",", "\"Only for interface compatible with Gumbel\"", "\n", "assert", "return_logits", "==", "False", ",", "\"Only for interface compatible with Gumbel\"", "\n", "# reshape z -> (batch, height, width, channel) and flatten", "\n", "z", "=", "rearrange", "(", "z", ",", "'b c h w -> b h w c'", ")", ".", "contiguous", "(", ")", "\n", "z_flattened", "=", "z", ".", "view", "(", "-", "1", ",", "self", ".", "e_dim", ")", "\n", "# distances from z to embeddings e_j (z - e)^2 = z^2 + e^2 - 2 e * z", "\n", "\n", "d", "=", "torch", ".", "sum", "(", "z_flattened", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "torch", ".", "sum", "(", "self", ".", "embedding", ".", "weight", "**", "2", ",", "dim", "=", "1", ")", "-", "2", "*", "torch", ".", "einsum", "(", "'bd,dn->bn'", ",", "z_flattened", ",", "rearrange", "(", "self", ".", "embedding", ".", "weight", ",", "'n d -> d n'", ")", ")", "\n", "\n", "min_encoding_indices", "=", "torch", ".", "argmin", "(", "d", ",", "dim", "=", "1", ")", "\n", "z_q", "=", "self", ".", "embedding", "(", "min_encoding_indices", ")", ".", "view", "(", "z", ".", "shape", ")", "\n", "perplexity", "=", "None", "\n", "min_encodings", "=", "None", "\n", "\n", "# compute loss for embedding", "\n", "if", "not", "self", ".", "legacy", ":", "\n", "            ", "loss", "=", "self", ".", "beta", "*", "torch", ".", "mean", "(", "(", "z_q", ".", "detach", "(", ")", "-", "z", ")", "**", "2", ")", "+", "torch", ".", "mean", "(", "(", "z_q", "-", "z", ".", "detach", "(", ")", ")", "**", "2", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "torch", ".", "mean", "(", "(", "z_q", ".", "detach", "(", ")", "-", "z", ")", "**", "2", ")", "+", "self", ".", "beta", "*", "torch", ".", "mean", "(", "(", "z_q", "-", "z", ".", "detach", "(", ")", ")", "**", "2", ")", "\n", "\n", "# preserve gradients", "\n", "", "z_q", "=", "z", "+", "(", "z_q", "-", "z", ")", ".", "detach", "(", ")", "\n", "\n", "# reshape back to match original input shape", "\n", "z_q", "=", "rearrange", "(", "z_q", ",", "'b h w c -> b c h w'", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "self", ".", "remap", "is", "not", "None", ":", "\n", "            ", "min_encoding_indices", "=", "min_encoding_indices", ".", "reshape", "(", "z", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# add batch axis", "\n", "min_encoding_indices", "=", "self", ".", "remap_to_used", "(", "min_encoding_indices", ")", "\n", "min_encoding_indices", "=", "min_encoding_indices", ".", "reshape", "(", "-", "1", ",", "1", ")", "# flatten", "\n", "\n", "", "if", "self", ".", "sane_index_shape", ":", "\n", "            ", "min_encoding_indices", "=", "min_encoding_indices", ".", "reshape", "(", "\n", "z_q", ".", "shape", "[", "0", "]", ",", "z_q", ".", "shape", "[", "2", "]", ",", "z_q", ".", "shape", "[", "3", "]", ")", "\n", "\n", "", "return", "z_q", ",", "loss", ",", "(", "perplexity", ",", "min_encodings", ",", "min_encoding_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.VectorQuantizer2.get_codebook_entry": [[314, 330], ["quantize.VectorQuantizer2.embedding", "indices.reshape.reshape.reshape", "quantize.VectorQuantizer2.unmap_to_all", "indices.reshape.reshape.reshape", "z_q.permute().contiguous.permute().contiguous.view", "z_q.permute().contiguous.permute().contiguous.permute().contiguous", "z_q.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.vqvae.quantize.VectorQuantizer2.unmap_to_all"], ["", "def", "get_codebook_entry", "(", "self", ",", "indices", ",", "shape", ")", ":", "\n", "# shape specifying (batch, height, width, channel)", "\n", "        ", "if", "self", ".", "remap", "is", "not", "None", ":", "\n", "            ", "indices", "=", "indices", ".", "reshape", "(", "shape", "[", "0", "]", ",", "-", "1", ")", "# add batch axis", "\n", "indices", "=", "self", ".", "unmap_to_all", "(", "indices", ")", "\n", "indices", "=", "indices", ".", "reshape", "(", "-", "1", ")", "# flatten again", "\n", "\n", "# get quantized latent vectors", "\n", "", "z_q", "=", "self", ".", "embedding", "(", "indices", ")", "\n", "\n", "if", "shape", "is", "not", "None", ":", "\n", "            ", "z_q", "=", "z_q", ".", "view", "(", "shape", ")", "\n", "# reshape back to match original input shape", "\n", "z_q", "=", "z_q", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "return", "z_q", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.__init__": [[4, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_embed", ",", "down_factor", ")", ":", "\n", "        ", "self", ".", "n_embed", "=", "n_embed", "\n", "self", ".", "down_factor", "=", "down_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval": [[8, 10], ["None"], "methods", ["None"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.encode": [[11, 26], ["torch.nn.functional.interpolate", "c.clamp.clamp.clamp", "c.clamp.clamp.round", "c.clamp.round.to", "c.clamp.clamp.min", "c.clamp.clamp.max"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "c", ")", ":", "\n", "        ", "\"\"\"fake vqmodel interface\"\"\"", "\n", "assert", "0.0", "<=", "c", ".", "min", "(", ")", "and", "c", ".", "max", "(", ")", "<=", "1.0", "\n", "b", ",", "ch", ",", "h", ",", "w", "=", "c", ".", "shape", "\n", "assert", "ch", "==", "1", "\n", "\n", "c", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "c", ",", "scale_factor", "=", "1", "/", "self", ".", "down_factor", ",", "\n", "mode", "=", "\"area\"", ")", "\n", "c", "=", "c", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "c", "=", "self", ".", "n_embed", "*", "c", "\n", "c_quant", "=", "c", ".", "round", "(", ")", "\n", "c_ind", "=", "c_quant", ".", "to", "(", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "info", "=", "None", ",", "None", ",", "c_ind", "\n", "return", "c_quant", ",", "None", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.decode": [[27, 32], ["torch.nn.functional.interpolate"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "c", ")", ":", "\n", "        ", "c", "=", "c", "/", "self", ".", "n_embed", "\n", "c", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "c", ",", "scale_factor", "=", "self", ".", "down_factor", ",", "\n", "mode", "=", "\"nearest\"", ")", "\n", "return", "c", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.segmentation.BCELoss.forward": [[6, 9], ["torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "prediction", ",", "target", ")", ":", "\n", "        ", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "prediction", ",", "target", ")", "\n", "return", "loss", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.segmentation.BCELossWithQuant.__init__": [[12, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "codebook_weight", "=", "1.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "codebook_weight", "=", "codebook_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.segmentation.BCELossWithQuant.forward": [[16, 22], ["torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "loss.clone().detach().mean", "torch.binary_cross_entropy_with_logits.detach().mean", "qloss.detach().mean", "loss.clone().detach", "torch.binary_cross_entropy_with_logits.detach", "qloss.detach", "loss.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "qloss", ",", "target", ",", "prediction", ",", "split", ")", ":", "\n", "        ", "bce_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "prediction", ",", "target", ")", "\n", "loss", "=", "bce_loss", "+", "self", ".", "codebook_weight", "*", "qloss", "\n", "return", "loss", ",", "{", "\"{}/total_loss\"", ".", "format", "(", "split", ")", ":", "loss", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "mean", "(", ")", ",", "\n", "\"{}/bce_loss\"", ".", "format", "(", "split", ")", ":", "bce_loss", ".", "detach", "(", ")", ".", "mean", "(", ")", ",", "\n", "\"{}/quant_loss\"", ".", "format", "(", "split", ")", ":", "qloss", ".", "detach", "(", ")", ".", "mean", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.LPIPS.__init__": [[13, 26], ["torch.Module.__init__", "lpips.ScalingLayer", "lpips.vgg16", "lpips.NetLinLayer", "lpips.NetLinLayer", "lpips.NetLinLayer", "lpips.NetLinLayer", "lpips.NetLinLayer", "lpips.LPIPS.load_from_pretrained", "lpips.LPIPS.parameters"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.LPIPS.load_from_pretrained", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters"], ["    ", "def", "__init__", "(", "self", ",", "use_dropout", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scaling_layer", "=", "ScalingLayer", "(", ")", "\n", "self", ".", "chns", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "# vg16 features", "\n", "self", ".", "net", "=", "vgg16", "(", "pretrained", "=", "True", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "lin0", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "0", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin1", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "1", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin2", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "2", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin3", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "3", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "lin4", "=", "NetLinLayer", "(", "self", ".", "chns", "[", "4", "]", ",", "use_dropout", "=", "use_dropout", ")", "\n", "self", ".", "load_from_pretrained", "(", ")", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.LPIPS.load_from_pretrained": [[27, 31], ["image_synthesis.taming.util.get_ckpt_path", "lpips.LPIPS.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.taming.util.get_ckpt_path", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.device", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.device", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.device", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.device"], ["", "", "def", "load_from_pretrained", "(", "self", ",", "name", "=", "\"vgg_lpips\"", ")", ":", "\n", "        ", "ckpt", "=", "get_ckpt_path", "(", "name", ",", "\"taming/modules/autoencoder/lpips\"", ")", "\n", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ckpt", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", ",", "strict", "=", "False", ")", "\n", "print", "(", "\"loaded pretrained LPIPS loss from {}\"", ".", "format", "(", "ckpt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.LPIPS.from_pretrained": [[32, 38], ["cls", "image_synthesis.taming.util.get_ckpt_path", "cls.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.taming.util.get_ckpt_path", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.device", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.device", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.device", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.device"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "name", "=", "\"vgg_lpips\"", ")", ":", "\n", "        ", "model", "=", "cls", "(", ")", "\n", "ckpt", "=", "get_ckpt_path", "(", "name", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ckpt", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", ",", "strict", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.LPIPS.forward": [[39, 53], ["range", "range", "lpips.LPIPS.scaling_layer", "lpips.LPIPS.scaling_layer", "lpips.LPIPS.net", "lpips.LPIPS.net", "len", "lpips.spatial_average", "len", "lpips.normalize_tensor", "lpips.normalize_tensor", "lins[].model", "range", "len"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.spatial_average", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.normalize_tensor", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.normalize_tensor"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "in0_input", ",", "in1_input", "=", "(", "self", ".", "scaling_layer", "(", "input", ")", ",", "self", ".", "scaling_layer", "(", "target", ")", ")", "\n", "outs0", ",", "outs1", "=", "self", ".", "net", "(", "in0_input", ")", ",", "self", ".", "net", "(", "in1_input", ")", "\n", "feats0", ",", "feats1", ",", "diffs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "lins", "=", "[", "self", ".", "lin0", ",", "self", ".", "lin1", ",", "self", ".", "lin2", ",", "self", ".", "lin3", ",", "self", ".", "lin4", "]", "\n", "for", "kk", "in", "range", "(", "len", "(", "self", ".", "chns", ")", ")", ":", "\n", "            ", "feats0", "[", "kk", "]", ",", "feats1", "[", "kk", "]", "=", "normalize_tensor", "(", "outs0", "[", "kk", "]", ")", ",", "normalize_tensor", "(", "outs1", "[", "kk", "]", ")", "\n", "diffs", "[", "kk", "]", "=", "(", "feats0", "[", "kk", "]", "-", "feats1", "[", "kk", "]", ")", "**", "2", "\n", "\n", "", "res", "=", "[", "spatial_average", "(", "lins", "[", "kk", "]", ".", "model", "(", "diffs", "[", "kk", "]", ")", ",", "keepdim", "=", "True", ")", "for", "kk", "in", "range", "(", "len", "(", "self", ".", "chns", ")", ")", "]", "\n", "val", "=", "res", "[", "0", "]", "\n", "for", "l", "in", "range", "(", "1", ",", "len", "(", "self", ".", "chns", ")", ")", ":", "\n", "            ", "val", "+=", "res", "[", "l", "]", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.ScalingLayer.__init__": [[56, 60], ["torch.Module.__init__", "lpips.ScalingLayer.register_buffer", "lpips.ScalingLayer.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ScalingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'shift'", ",", "torch", ".", "Tensor", "(", "[", "-", ".030", ",", "-", ".088", ",", "-", ".188", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "self", ".", "register_buffer", "(", "'scale'", ",", "torch", ".", "Tensor", "(", "[", ".458", ",", ".448", ",", ".450", "]", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.ScalingLayer.forward": [[61, 63], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "return", "(", "inp", "-", "self", ".", "shift", ")", "/", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.NetLinLayer.__init__": [[67, 72], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["def", "__init__", "(", "self", ",", "chn_in", ",", "chn_out", "=", "1", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "NetLinLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "nn", ".", "Dropout", "(", ")", ",", "]", "if", "(", "use_dropout", ")", "else", "[", "]", "\n", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "chn_in", ",", "chn_out", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.vgg16.__init__": [[75, 97], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg16", "lpips.vgg16.slice1.add_module", "lpips.vgg16.slice2.add_module", "lpips.vgg16.slice3.add_module", "lpips.vgg16.slice4.add_module", "lpips.vgg16.slice5.add_module", "lpips.vgg16.parameters", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters"], ["    ", "def", "__init__", "(", "self", ",", "requires_grad", "=", "False", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "vgg16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg16", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "16", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "23", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "23", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "if", "not", "requires_grad", ":", "\n", "            ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.vgg16.forward": [[98, 112], ["lpips.vgg16.slice1", "lpips.vgg16.slice2", "lpips.vgg16.slice3", "lpips.vgg16.slice4", "lpips.vgg16.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1_2", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2_2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3_3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4_3", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5_3", "=", "h", "\n", "vgg_outputs", "=", "namedtuple", "(", "\"VggOutputs\"", ",", "[", "'relu1_2'", ",", "'relu2_2'", ",", "'relu3_3'", ",", "'relu4_3'", ",", "'relu5_3'", "]", ")", "\n", "out", "=", "vgg_outputs", "(", "h_relu1_2", ",", "h_relu2_2", ",", "h_relu3_3", ",", "h_relu4_3", ",", "h_relu5_3", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.normalize_tensor": [[114, 117], ["torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "def", "normalize_tensor", "(", "x", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "norm_factor", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "return", "x", "/", "(", "norm_factor", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.lpips.spatial_average": [[119, 121], ["x.mean"], "function", ["None"], ["", "def", "spatial_average", "(", "x", ",", "keepdim", "=", "True", ")", ":", "\n", "    ", "return", "x", ".", "mean", "(", "[", "2", ",", "3", "]", ",", "keepdim", "=", "keepdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.vqperceptual.DummyLoss.__init__": [[10, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.vqperceptual.VQLPIPSWithDiscriminator.__init__": [[35, 62], ["torch.Module.__init__", "image_synthesis.taming.modules.losses.lpips.LPIPS().eval", "image_synthesis.taming.modules.discriminator.model.NLayerDiscriminator().apply", "print", "image_synthesis.taming.modules.losses.lpips.LPIPS", "image_synthesis.taming.modules.discriminator.model.NLayerDiscriminator", "ValueError"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval"], ["    ", "def", "__init__", "(", "self", ",", "disc_start", ",", "codebook_weight", "=", "1.0", ",", "pixelloss_weight", "=", "1.0", ",", "\n", "disc_num_layers", "=", "3", ",", "disc_in_channels", "=", "3", ",", "disc_factor", "=", "1.0", ",", "disc_weight", "=", "1.0", ",", "\n", "perceptual_weight", "=", "1.0", ",", "use_actnorm", "=", "False", ",", "disc_conditional", "=", "False", ",", "\n", "disc_ndf", "=", "64", ",", "disc_loss", "=", "\"hinge\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "disc_loss", "in", "[", "\"hinge\"", ",", "\"vanilla\"", "]", "\n", "self", ".", "codebook_weight", "=", "codebook_weight", "\n", "self", ".", "pixel_weight", "=", "pixelloss_weight", "\n", "self", ".", "perceptual_loss", "=", "LPIPS", "(", ")", ".", "eval", "(", ")", "\n", "self", ".", "perceptual_weight", "=", "perceptual_weight", "\n", "\n", "self", ".", "discriminator", "=", "NLayerDiscriminator", "(", "input_nc", "=", "disc_in_channels", ",", "\n", "n_layers", "=", "disc_num_layers", ",", "\n", "use_actnorm", "=", "use_actnorm", ",", "\n", "ndf", "=", "disc_ndf", "\n", ")", ".", "apply", "(", "weights_init", ")", "\n", "self", ".", "discriminator_iter_start", "=", "disc_start", "\n", "if", "disc_loss", "==", "\"hinge\"", ":", "\n", "            ", "self", ".", "disc_loss", "=", "hinge_d_loss", "\n", "", "elif", "disc_loss", "==", "\"vanilla\"", ":", "\n", "            ", "self", ".", "disc_loss", "=", "vanilla_d_loss", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Unknown GAN loss '{disc_loss}'.\"", ")", "\n", "", "print", "(", "f\"VQLPIPSWithDiscriminator running with {disc_loss} loss.\"", ")", "\n", "self", ".", "disc_factor", "=", "disc_factor", "\n", "self", ".", "discriminator_weight", "=", "disc_weight", "\n", "self", ".", "disc_conditional", "=", "disc_conditional", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.vqperceptual.VQLPIPSWithDiscriminator.calculate_adaptive_weight": [[63, 75], ["torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.clamp().detach", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.norm"], ["", "def", "calculate_adaptive_weight", "(", "self", ",", "nll_loss", ",", "g_loss", ",", "last_layer", "=", "None", ")", ":", "\n", "        ", "if", "last_layer", "is", "not", "None", ":", "\n", "            ", "nll_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "nll_loss", ",", "last_layer", ",", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "g_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "g_loss", ",", "last_layer", ",", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "nll_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "nll_loss", ",", "self", ".", "last_layer", "[", "0", "]", ",", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "g_grads", "=", "torch", ".", "autograd", ".", "grad", "(", "g_loss", ",", "self", ".", "last_layer", "[", "0", "]", ",", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "\n", "", "d_weight", "=", "torch", ".", "norm", "(", "nll_grads", ")", "/", "(", "torch", ".", "norm", "(", "g_grads", ")", "+", "1e-4", ")", "\n", "d_weight", "=", "torch", ".", "clamp", "(", "d_weight", ",", "0.0", ",", "1e4", ")", ".", "detach", "(", ")", "\n", "d_weight", "=", "d_weight", "*", "self", ".", "discriminator_weight", "\n", "return", "d_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.vqperceptual.VQLPIPSWithDiscriminator.forward": [[76, 137], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "vqperceptual.VQLPIPSWithDiscriminator.perceptual_loss", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "vqperceptual.adopt_weight", "vqperceptual.adopt_weight", "inputs.contiguous", "reconstructions.contiguous", "inputs.contiguous", "reconstructions.contiguous", "vqperceptual.VQLPIPSWithDiscriminator.discriminator", "vqperceptual.VQLPIPSWithDiscriminator.discriminator", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "vqperceptual.VQLPIPSWithDiscriminator.calculate_adaptive_weight", "loss.clone().detach().mean", "codebook_loss.detach().mean", "torch.mean.detach().mean", "torch.mean.detach().mean", "torch.mean.detach().mean", "torch.abs.detach().mean", "torch.abs.detach().mean", "torch.abs.detach().mean", "torch.tensor.detach().mean", "torch.tensor.detach().mean", "torch.tensor.detach().mean", "torch.tensor.detach", "torch.tensor.detach", "torch.tensor.detach", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "g_loss.detach().mean", "vqperceptual.VQLPIPSWithDiscriminator.discriminator", "vqperceptual.VQLPIPSWithDiscriminator.discriminator", "vqperceptual.VQLPIPSWithDiscriminator.discriminator", "vqperceptual.VQLPIPSWithDiscriminator.discriminator", "vqperceptual.VQLPIPSWithDiscriminator.disc_loss", "d_loss.clone().detach().mean", "vqperceptual.VQLPIPSWithDiscriminator.detach().mean", "vqperceptual.VQLPIPSWithDiscriminator.detach().mean", "reconstructions.contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "codebook_loss.mean", "inputs.contiguous().detach", "reconstructions.contiguous().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "loss.clone().detach", "codebook_loss.detach", "torch.mean.detach", "torch.mean.detach", "torch.mean.detach", "torch.abs.detach", "torch.abs.detach", "torch.abs.detach", "torch.tensor.detach", "torch.tensor.detach", "torch.tensor.detach", "g_loss.detach", "d_loss.clone().detach", "vqperceptual.VQLPIPSWithDiscriminator.detach", "vqperceptual.VQLPIPSWithDiscriminator.detach", "reconstructions.contiguous", "inputs.contiguous", "reconstructions.contiguous", "inputs.contiguous().detach", "reconstructions.contiguous().detach", "loss.clone", "d_loss.clone", "inputs.contiguous", "reconstructions.contiguous"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.vqperceptual.adopt_weight", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.vqperceptual.adopt_weight", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.vqperceptual.VQLPIPSWithDiscriminator.calculate_adaptive_weight"], ["", "def", "forward", "(", "self", ",", "codebook_loss", ",", "inputs", ",", "reconstructions", ",", "optimizer_idx", ",", "\n", "global_step", ",", "last_layer", "=", "None", ",", "cond", "=", "None", ",", "split", "=", "\"train\"", ")", ":", "\n", "        ", "rec_loss", "=", "torch", ".", "abs", "(", "inputs", ".", "contiguous", "(", ")", "-", "reconstructions", ".", "contiguous", "(", ")", ")", "\n", "if", "self", ".", "perceptual_weight", ">", "0", ":", "\n", "            ", "p_loss", "=", "self", ".", "perceptual_loss", "(", "inputs", ".", "contiguous", "(", ")", ",", "reconstructions", ".", "contiguous", "(", ")", ")", "\n", "rec_loss", "=", "rec_loss", "+", "self", ".", "perceptual_weight", "*", "p_loss", "\n", "", "else", ":", "\n", "            ", "p_loss", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", "\n", "\n", "", "nll_loss", "=", "rec_loss", "\n", "#nll_loss = torch.sum(nll_loss) / nll_loss.shape[0]", "\n", "nll_loss", "=", "torch", ".", "mean", "(", "nll_loss", ")", "\n", "\n", "# now the GAN part", "\n", "if", "optimizer_idx", "==", "0", ":", "\n", "# generator update", "\n", "            ", "if", "cond", "is", "None", ":", "\n", "                ", "assert", "not", "self", ".", "disc_conditional", "\n", "logits_fake", "=", "self", ".", "discriminator", "(", "reconstructions", ".", "contiguous", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "self", ".", "disc_conditional", "\n", "logits_fake", "=", "self", ".", "discriminator", "(", "torch", ".", "cat", "(", "(", "reconstructions", ".", "contiguous", "(", ")", ",", "cond", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "g_loss", "=", "-", "torch", ".", "mean", "(", "logits_fake", ")", "\n", "\n", "try", ":", "\n", "                ", "d_weight", "=", "self", ".", "calculate_adaptive_weight", "(", "nll_loss", ",", "g_loss", ",", "last_layer", "=", "last_layer", ")", "\n", "", "except", "RuntimeError", ":", "\n", "                ", "assert", "not", "self", ".", "training", "\n", "d_weight", "=", "torch", ".", "tensor", "(", "0.0", ")", "\n", "\n", "", "disc_factor", "=", "adopt_weight", "(", "self", ".", "disc_factor", ",", "global_step", ",", "threshold", "=", "self", ".", "discriminator_iter_start", ")", "\n", "loss", "=", "nll_loss", "+", "d_weight", "*", "disc_factor", "*", "g_loss", "+", "self", ".", "codebook_weight", "*", "codebook_loss", ".", "mean", "(", ")", "\n", "\n", "log", "=", "{", "\"{}/total_loss\"", ".", "format", "(", "split", ")", ":", "loss", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "mean", "(", ")", ",", "\n", "\"{}/quant_loss\"", ".", "format", "(", "split", ")", ":", "codebook_loss", ".", "detach", "(", ")", ".", "mean", "(", ")", ",", "\n", "\"{}/nll_loss\"", ".", "format", "(", "split", ")", ":", "nll_loss", ".", "detach", "(", ")", ".", "mean", "(", ")", ",", "\n", "\"{}/rec_loss\"", ".", "format", "(", "split", ")", ":", "rec_loss", ".", "detach", "(", ")", ".", "mean", "(", ")", ",", "\n", "\"{}/p_loss\"", ".", "format", "(", "split", ")", ":", "p_loss", ".", "detach", "(", ")", ".", "mean", "(", ")", ",", "\n", "\"{}/d_weight\"", ".", "format", "(", "split", ")", ":", "d_weight", ".", "detach", "(", ")", ",", "\n", "\"{}/disc_factor\"", ".", "format", "(", "split", ")", ":", "torch", ".", "tensor", "(", "disc_factor", ")", ",", "\n", "\"{}/g_loss\"", ".", "format", "(", "split", ")", ":", "g_loss", ".", "detach", "(", ")", ".", "mean", "(", ")", ",", "\n", "}", "\n", "return", "loss", ",", "log", "\n", "\n", "", "if", "optimizer_idx", "==", "1", ":", "\n", "# second pass for discriminator update", "\n", "            ", "if", "cond", "is", "None", ":", "\n", "                ", "logits_real", "=", "self", ".", "discriminator", "(", "inputs", ".", "contiguous", "(", ")", ".", "detach", "(", ")", ")", "\n", "logits_fake", "=", "self", ".", "discriminator", "(", "reconstructions", ".", "contiguous", "(", ")", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "logits_real", "=", "self", ".", "discriminator", "(", "torch", ".", "cat", "(", "(", "inputs", ".", "contiguous", "(", ")", ".", "detach", "(", ")", ",", "cond", ")", ",", "dim", "=", "1", ")", ")", "\n", "logits_fake", "=", "self", ".", "discriminator", "(", "torch", ".", "cat", "(", "(", "reconstructions", ".", "contiguous", "(", ")", ".", "detach", "(", ")", ",", "cond", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "disc_factor", "=", "adopt_weight", "(", "self", ".", "disc_factor", ",", "global_step", ",", "threshold", "=", "self", ".", "discriminator_iter_start", ")", "\n", "d_loss", "=", "disc_factor", "*", "self", ".", "disc_loss", "(", "logits_real", ",", "logits_fake", ")", "\n", "\n", "log", "=", "{", "\"{}/disc_loss\"", ".", "format", "(", "split", ")", ":", "d_loss", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "mean", "(", ")", ",", "\n", "\"{}/logits_real\"", ".", "format", "(", "split", ")", ":", "logits_real", ".", "detach", "(", ")", ".", "mean", "(", ")", ",", "\n", "\"{}/logits_fake\"", ".", "format", "(", "split", ")", ":", "logits_fake", ".", "detach", "(", ")", ".", "mean", "(", ")", "\n", "}", "\n", "return", "d_loss", ",", "log", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.vqperceptual.adopt_weight": [[14, 18], ["None"], "function", ["None"], ["", "", "def", "adopt_weight", "(", "weight", ",", "global_step", ",", "threshold", "=", "0", ",", "value", "=", "0.", ")", ":", "\n", "    ", "if", "global_step", "<", "threshold", ":", "\n", "        ", "weight", "=", "value", "\n", "", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.vqperceptual.hinge_d_loss": [[20, 25], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu", "torch.relu"], "function", ["None"], ["", "def", "hinge_d_loss", "(", "logits_real", ",", "logits_fake", ")", ":", "\n", "    ", "loss_real", "=", "torch", ".", "mean", "(", "F", ".", "relu", "(", "1.", "-", "logits_real", ")", ")", "\n", "loss_fake", "=", "torch", ".", "mean", "(", "F", ".", "relu", "(", "1.", "+", "logits_fake", ")", ")", "\n", "d_loss", "=", "0.5", "*", "(", "loss_real", "+", "loss_fake", ")", "\n", "return", "d_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.losses.vqperceptual.vanilla_d_loss": [[27, 32], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus"], "function", ["None"], ["", "def", "vanilla_d_loss", "(", "logits_real", ",", "logits_fake", ")", ":", "\n", "    ", "d_loss", "=", "0.5", "*", "(", "\n", "torch", ".", "mean", "(", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "-", "logits_real", ")", ")", "+", "\n", "torch", ".", "mean", "(", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "logits_fake", ")", ")", ")", "\n", "return", "d_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.__init__": [[37, 111], ["config[].get", "config[].get", "isinstance", "isinstance", "config[].get", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "config[].get", "config[].get", "solver.Solver.logger.log_info", "solver.Solver.logger.log_info", "solver.Solver.model.cuda", "solver.Solver.logger.log_info", "image_synthesis.utils.misc.instantiate_from_config", "hasattr", "callable", "model.get_optimizer_and_scheduler", "solver.Solver._get_optimizer_and_scheduler", "type", "type", "image_synthesis.engine.ema.EMA", "str", "solver.Solver.logger.log_info", "torch.nn.parallel.DistributedDataParallel", "solver.Solver.logger.log_info", "GradScaler", "solver.Solver.logger.log_info", "getattr", "image_synthesis.utils.misc.get_model_parameters_info", "math.sqrt", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver._get_optimizer_and_scheduler", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.get_model_parameters_info"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "args", ",", "model", ",", "dataloader", ",", "logger", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "logger", "=", "logger", "\n", "\n", "self", ".", "max_epochs", "=", "config", "[", "'solver'", "]", "[", "'max_epochs'", "]", "\n", "self", ".", "save_epochs", "=", "config", "[", "'solver'", "]", "[", "'save_epochs'", "]", "\n", "self", ".", "save_iterations", "=", "config", "[", "'solver'", "]", ".", "get", "(", "'save_iterations'", ",", "-", "1", ")", "\n", "self", ".", "sample_iterations", "=", "config", "[", "'solver'", "]", "[", "'sample_iterations'", "]", "\n", "if", "self", ".", "sample_iterations", "==", "'epoch'", ":", "\n", "            ", "self", ".", "sample_iterations", "=", "self", ".", "dataloader", "[", "'train_iterations'", "]", "\n", "", "self", ".", "validation_epochs", "=", "config", "[", "'solver'", "]", ".", "get", "(", "'validation_epochs'", ",", "2", ")", "\n", "assert", "isinstance", "(", "self", ".", "save_epochs", ",", "(", "int", ",", "list", ")", ")", "\n", "assert", "isinstance", "(", "self", ".", "validation_epochs", ",", "(", "int", ",", "list", ")", ")", "\n", "self", ".", "debug", "=", "config", "[", "'solver'", "]", ".", "get", "(", "'debug'", ",", "False", ")", "\n", "\n", "self", ".", "last_epoch", "=", "-", "1", "\n", "self", ".", "last_iter", "=", "-", "1", "\n", "self", ".", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'checkpoint'", ")", "\n", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'images'", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "ckpt_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "image_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# get grad_clipper", "\n", "if", "'clip_grad_norm'", "in", "config", "[", "'solver'", "]", ":", "\n", "            ", "self", ".", "clip_grad_norm", "=", "instantiate_from_config", "(", "config", "[", "'solver'", "]", "[", "'clip_grad_norm'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "clip_grad_norm", "=", "None", "\n", "\n", "# get lr", "\n", "", "adjust_lr", "=", "config", "[", "'solver'", "]", ".", "get", "(", "'adjust_lr'", ",", "'sqrt'", ")", "\n", "base_lr", "=", "config", "[", "'solver'", "]", ".", "get", "(", "'base_lr'", ",", "1.0e-4", ")", "\n", "if", "adjust_lr", "==", "'none'", ":", "\n", "            ", "self", ".", "lr", "=", "base_lr", "\n", "", "elif", "adjust_lr", "==", "'sqrt'", ":", "\n", "            ", "self", ".", "lr", "=", "base_lr", "*", "math", ".", "sqrt", "(", "args", ".", "world_size", "*", "config", "[", "'dataloader'", "]", "[", "'batch_size'", "]", ")", "\n", "", "elif", "adjust_lr", "==", "'linear'", ":", "\n", "            ", "self", ".", "lr", "=", "base_lr", "*", "args", ".", "world_size", "*", "config", "[", "'dataloader'", "]", "[", "'batch_size'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Unknown type of adjust lr {}!'", ".", "format", "(", "adjust_lr", ")", ")", "\n", "", "self", ".", "logger", ".", "log_info", "(", "'Get lr {} from base lr {} with {}'", ".", "format", "(", "self", ".", "lr", ",", "base_lr", ",", "adjust_lr", ")", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'get_optimizer_and_scheduler'", ")", "and", "callable", "(", "getattr", "(", "model", ",", "'get_optimizer_and_scheduler'", ")", ")", ":", "\n", "            ", "optimizer_and_scheduler", "=", "model", ".", "get_optimizer_and_scheduler", "(", "config", "[", "'solver'", "]", "[", "'optimizers_and_schedulers'", "]", ")", "\n", "", "else", ":", "\n", "            ", "optimizer_and_scheduler", "=", "self", ".", "_get_optimizer_and_scheduler", "(", "config", "[", "'solver'", "]", "[", "'optimizers_and_schedulers'", "]", ")", "\n", "\n", "", "assert", "type", "(", "optimizer_and_scheduler", ")", "==", "type", "(", "{", "}", ")", ",", "'optimizer and schduler should be a dict!'", "\n", "self", ".", "optimizer_and_scheduler", "=", "optimizer_and_scheduler", "\n", "\n", "# configre for ema", "\n", "if", "'ema'", "in", "config", "[", "'solver'", "]", "and", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "ema_args", "=", "config", "[", "'solver'", "]", "[", "'ema'", "]", "\n", "ema_args", "[", "'model'", "]", "=", "self", ".", "model", "\n", "self", ".", "ema", "=", "EMA", "(", "**", "ema_args", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ema", "=", "None", "\n", "\n", "", "self", ".", "logger", ".", "log_info", "(", "str", "(", "get_model_parameters_info", "(", "self", ".", "model", ")", ")", ")", "\n", "self", ".", "model", ".", "cuda", "(", ")", "\n", "self", ".", "device", "=", "self", ".", "model", ".", "device", "\n", "if", "self", ".", "args", ".", "distributed", ":", "\n", "            ", "self", ".", "logger", ".", "log_info", "(", "'Distributed, begin DDP the model...'", ")", "\n", "self", ".", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "self", ".", "model", ",", "device_ids", "=", "[", "self", ".", "args", ".", "gpu", "]", ",", "find_unused_parameters", "=", "False", ")", "\n", "self", ".", "logger", ".", "log_info", "(", "'Distributed, DDP model done!'", ")", "\n", "# prepare for amp", "\n", "", "self", ".", "args", ".", "amp", "=", "self", ".", "args", ".", "amp", "and", "AMP", "\n", "if", "self", ".", "args", ".", "amp", ":", "\n", "            ", "self", ".", "scaler", "=", "GradScaler", "(", ")", "\n", "self", ".", "logger", ".", "log_info", "(", "'Using AMP for training!'", ")", "\n", "\n", "", "self", ".", "logger", ".", "log_info", "(", "\"{}: global rank {}: prepare solver done!\"", ".", "format", "(", "self", ".", "args", ".", "name", ",", "self", ".", "args", ".", "global_rank", ")", ",", "check_primary", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver._get_optimizer_and_scheduler": [[112, 162], ["op_sc_cfg.get", "image_synthesis.utils.misc.instantiate_from_config", "isinstance", "op_sc_cfg.get", "op_sc_cfg.get", "op_sc_cfg.get", "op_sc_cfg.get", "op_sc_cfg.get", "filter", "solver.Solver.model.parameters", "op_sc_cfg.get.get", "image_synthesis.utils.misc.instantiate_from_config", "solver.Solver.model.parameters", "sc_cfg.get", "sc_cfg[].split"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get"], ["", "def", "_get_optimizer_and_scheduler", "(", "self", ",", "op_sc_list", ")", ":", "\n", "        ", "optimizer_and_scheduler", "=", "{", "}", "\n", "for", "op_sc_cfg", "in", "op_sc_list", ":", "\n", "            ", "op_sc", "=", "{", "\n", "'name'", ":", "op_sc_cfg", ".", "get", "(", "'name'", ",", "'none'", ")", ",", "\n", "'start_epoch'", ":", "op_sc_cfg", ".", "get", "(", "'start_epoch'", ",", "0", ")", ",", "\n", "'end_epoch'", ":", "op_sc_cfg", ".", "get", "(", "'end_epoch'", ",", "-", "1", ")", ",", "\n", "'start_iteration'", ":", "op_sc_cfg", ".", "get", "(", "'start_iteration'", ",", "0", ")", ",", "\n", "'end_iteration'", ":", "op_sc_cfg", ".", "get", "(", "'end_iteration'", ",", "-", "1", ")", ",", "\n", "}", "\n", "\n", "if", "op_sc", "[", "'name'", "]", "==", "'none'", ":", "\n", "# parameters = self.model.parameters()", "\n", "                ", "parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "else", ":", "\n", "# NOTE: get the parameters with the given name, the parameters() should be overide", "\n", "                ", "parameters", "=", "self", ".", "model", ".", "parameters", "(", "name", "=", "op_sc", "[", "'name'", "]", ")", "\n", "\n", "# build optimizer", "\n", "", "op_cfg", "=", "op_sc_cfg", ".", "get", "(", "'optimizer'", ",", "{", "'target'", ":", "'torch.optim.SGD'", ",", "'params'", ":", "{", "}", "}", ")", "\n", "if", "'params'", "not", "in", "op_cfg", ":", "\n", "                ", "op_cfg", "[", "'params'", "]", "=", "{", "}", "\n", "", "if", "'lr'", "not", "in", "op_cfg", "[", "'params'", "]", ":", "\n", "                ", "op_cfg", "[", "'params'", "]", "[", "'lr'", "]", "=", "self", ".", "lr", "\n", "", "op_cfg", "[", "'params'", "]", "[", "'params'", "]", "=", "parameters", "\n", "optimizer", "=", "instantiate_from_config", "(", "op_cfg", ")", "\n", "op_sc", "[", "'optimizer'", "]", "=", "{", "\n", "'module'", ":", "optimizer", ",", "\n", "'step_iteration'", ":", "op_cfg", ".", "get", "(", "'step_iteration'", ",", "1", ")", "\n", "}", "\n", "assert", "isinstance", "(", "op_sc", "[", "'optimizer'", "]", "[", "'step_iteration'", "]", ",", "int", ")", ",", "'optimizer steps should be a integer number of iterations'", "\n", "\n", "# build scheduler", "\n", "if", "'scheduler'", "in", "op_sc_cfg", ":", "\n", "                ", "sc_cfg", "=", "op_sc_cfg", "[", "'scheduler'", "]", "\n", "sc_cfg", "[", "'params'", "]", "[", "'optimizer'", "]", "=", "optimizer", "\n", "# for cosine annealing lr, compute T_max", "\n", "if", "sc_cfg", "[", "'target'", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "in", "[", "'CosineAnnealingLRWithWarmup'", ",", "'CosineAnnealingLR'", "]", ":", "\n", "                    ", "T_max", "=", "self", ".", "max_epochs", "*", "self", ".", "dataloader", "[", "'train_iterations'", "]", "\n", "sc_cfg", "[", "'params'", "]", "[", "'T_max'", "]", "=", "T_max", "\n", "", "scheduler", "=", "instantiate_from_config", "(", "sc_cfg", ")", "\n", "op_sc", "[", "'scheduler'", "]", "=", "{", "\n", "'module'", ":", "scheduler", ",", "\n", "'step_iteration'", ":", "sc_cfg", ".", "get", "(", "'step_iteration'", ",", "1", ")", "\n", "}", "\n", "if", "op_sc", "[", "'scheduler'", "]", "[", "'step_iteration'", "]", "==", "'epoch'", ":", "\n", "                    ", "op_sc", "[", "'scheduler'", "]", "[", "'step_iteration'", "]", "=", "self", ".", "dataloader", "[", "'train_iterations'", "]", "\n", "", "", "optimizer_and_scheduler", "[", "op_sc", "[", "'name'", "]", "]", "=", "op_sc", "\n", "\n", "", "return", "optimizer_and_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver._get_lr": [[163, 177], ["solver.Solver.optimizer_and_scheduler.items", "round", "str", "lrs.replace().replace().replace().replace.replace().replace().replace().replace.replace().replace().replace().replace", "ValueError", "lrs.replace().replace().replace().replace.replace().replace().replace().replace.replace().replace().replace", "[].state_dict", "lrs.replace().replace().replace().replace.replace().replace().replace().replace.replace().replace", "lrs.replace().replace().replace().replace.replace().replace().replace().replace.replace"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict"], ["", "def", "_get_lr", "(", "self", ",", "return_type", "=", "'str'", ")", ":", "\n", "\n", "        ", "lrs", "=", "{", "}", "\n", "for", "op_sc_n", ",", "op_sc", "in", "self", ".", "optimizer_and_scheduler", ".", "items", "(", ")", ":", "\n", "            ", "lr", "=", "op_sc", "[", "'optimizer'", "]", "[", "'module'", "]", ".", "state_dict", "(", ")", "[", "'param_groups'", "]", "[", "0", "]", "[", "'lr'", "]", "\n", "lrs", "[", "op_sc_n", "+", "'_lr'", "]", "=", "round", "(", "lr", ",", "10", ")", "\n", "", "if", "return_type", "==", "'str'", ":", "\n", "            ", "lrs", "=", "str", "(", "lrs", ")", "\n", "lrs", "=", "lrs", ".", "replace", "(", "'none'", ",", "'lr'", ")", ".", "replace", "(", "'{'", ",", "''", ")", ".", "replace", "(", "'}'", ",", "''", ")", ".", "replace", "(", "'\\''", ",", "''", ")", "\n", "", "elif", "return_type", "==", "'dict'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknow of return type: {}'", ".", "format", "(", "return_type", ")", ")", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample": [[178, 229], ["time.time", "solver.Solver.logger.log_info", "isinstance", "solver.Solver.logger.log_info", "solver.Solver.ema.modify_to_inference", "torch.no_grad", "model.sample.items", "solver.Solver.ema.modify_to_train", "model.sample", "os.path.join", "os.makedirs", "os.path.join", "model.sample", "torch.is_tensor", "im.to.to.to", "solver.Solver.logger.add_images", "torchvision.utils.make_grid", "PIL.Image.fromarray.permute().to().numpy", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "solver.Solver.logger.log_info", "solver.Solver.logger.log_info", "time.time", "autocast", "model.sample", "batch[].cuda", "image_synthesis.distributed.distributed.get_rank", "v.dim", "open", "f.write", "f.close", "PIL.Image.fromarray.permute().to", "str", "PIL.Image.fromarray.permute"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.modify_to_inference", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.modify_to_train", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.add_images", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.save", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.get_rank", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.close"], ["", "def", "sample", "(", "self", ",", "batch", ",", "phase", "=", "'train'", ",", "step_type", "=", "'iteration'", ")", ":", "\n", "        ", "tic", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "logger", ".", "log_info", "(", "'Begin to sample...'", ")", "\n", "if", "self", ".", "ema", "is", "not", "None", ":", "\n", "            ", "self", ".", "ema", ".", "modify_to_inference", "(", ")", "\n", "suffix", "=", "'_ema'", "\n", "", "else", ":", "\n", "            ", "suffix", "=", "''", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "model", ",", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n", "            ", "model", "=", "self", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "            ", "model", "=", "self", ".", "model", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "debug", "==", "False", ":", "\n", "                ", "if", "self", ".", "args", ".", "amp", ":", "\n", "                    ", "with", "autocast", "(", ")", ":", "\n", "                        ", "samples", "=", "model", ".", "sample", "(", "batch", "=", "batch", ",", "step", "=", "self", ".", "last_iter", ")", "\n", "", "", "else", ":", "\n", "                    ", "samples", "=", "model", ".", "sample", "(", "batch", "=", "batch", ",", "step", "=", "self", ".", "last_iter", ")", "\n", "", "", "else", ":", "\n", "                ", "samples", "=", "model", ".", "sample", "(", "batch", "=", "batch", "[", "0", "]", ".", "cuda", "(", ")", ",", "step", "=", "self", ".", "last_iter", ")", "\n", "\n", "", "step", "=", "self", ".", "last_iter", "if", "step_type", "==", "'iteration'", "else", "self", ".", "last_epoch", "\n", "for", "k", ",", "v", "in", "samples", ".", "items", "(", ")", ":", "\n", "                ", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "phase", ",", "k", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'e{:010d}_itr{:010d}_rank{}{}'", ".", "format", "(", "self", ".", "last_epoch", ",", "self", ".", "last_iter", "%", "self", ".", "dataloader", "[", "'train_iterations'", "]", ",", "get_rank", "(", ")", ",", "suffix", ")", ")", "\n", "if", "torch", ".", "is_tensor", "(", "v", ")", "and", "v", ".", "dim", "(", ")", "==", "4", "and", "v", ".", "shape", "[", "1", "]", "in", "[", "1", ",", "3", "]", ":", "# image", "\n", "                    ", "im", "=", "v", "\n", "im", "=", "im", ".", "to", "(", "torch", ".", "uint8", ")", "\n", "self", ".", "logger", ".", "add_images", "(", "tag", "=", "'{}/{}e_{}itr/{}'", ".", "format", "(", "phase", ",", "self", ".", "last_epoch", ",", "self", ".", "last_iter", "%", "self", ".", "dataloader", "[", "'train_iterations'", "]", ",", "k", ")", ",", "img_tensor", "=", "im", ",", "global_step", "=", "step", ",", "dataformats", "=", "'NCHW'", ")", "\n", "\n", "# save images", "\n", "im_grid", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "im", ")", "\n", "im_grid", "=", "im_grid", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "to", "(", "'cpu'", ")", ".", "numpy", "(", ")", "\n", "im_grid", "=", "Image", ".", "fromarray", "(", "im_grid", ")", "\n", "\n", "im_grid", ".", "save", "(", "save_path", "+", "'.jpg'", ")", "\n", "self", ".", "logger", ".", "log_info", "(", "'save {} to {}'", ".", "format", "(", "k", ",", "save_path", "+", "'.jpg'", ")", ")", "\n", "", "else", ":", "# may be other values, such as text caption", "\n", "                    ", "with", "open", "(", "save_path", "+", "'.txt'", ",", "'a'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "str", "(", "v", ")", "+", "'\\n'", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "self", ".", "logger", ".", "log_info", "(", "'save {} to {}'", ".", "format", "(", "k", ",", "save_path", "+", "'txt'", ")", ")", "\n", "\n", "", "", "", "if", "self", ".", "ema", "is", "not", "None", ":", "\n", "            ", "self", ".", "ema", ".", "modify_to_train", "(", ")", "\n", "\n", "", "self", ".", "logger", ".", "log_info", "(", "'Sample done, time: {:.2f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.step": [[230, 299], ["solver.Solver.optimizer_and_scheduler.items", "batch[].cuda.items", "batch[].cuda", "torch.is_tensor", "v.cuda", "solver.Solver.model", "torch.no_grad", "[].zero_grad", "solver.Solver.ema.update", "solver.Solver.items", "autocast", "solver.Solver.model", "solver.Solver.model", "solver.Solver.scaler.scale().backward", "solver.Solver.scaler.step", "solver.Solver.scaler.update", "output[].backward", "[].step", "isinstance", "autocast", "solver.Solver.model", "solver.Solver.clip_grad_norm", "solver.Solver.clip_grad_norm", "[].step", "[].step", "solver.Solver.scaler.scale", "solver.Solver.model.parameters", "solver.Solver.model.parameters", "solver.Solver.get"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.step", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.step", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.step", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.step", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.parameters", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get"], ["", "def", "step", "(", "self", ",", "batch", ",", "phase", "=", "'train'", ")", ":", "\n", "        ", "loss", "=", "{", "}", "\n", "if", "self", ".", "debug", "==", "False", ":", "\n", "            ", "for", "k", ",", "v", "in", "batch", ".", "items", "(", ")", ":", "\n", "                ", "if", "torch", ".", "is_tensor", "(", "v", ")", ":", "\n", "                    ", "batch", "[", "k", "]", "=", "v", ".", "cuda", "(", ")", "\n", "", "", "", "else", ":", "\n", "            ", "batch", "=", "batch", "[", "0", "]", ".", "cuda", "(", ")", "\n", "", "for", "op_sc_n", ",", "op_sc", "in", "self", ".", "optimizer_and_scheduler", ".", "items", "(", ")", ":", "\n", "            ", "if", "phase", "==", "'train'", ":", "\n", "# check if this optimizer and scheduler is valid in this iteration and epoch", "\n", "                ", "if", "op_sc", "[", "'start_iteration'", "]", ">", "self", ".", "last_iter", ":", "\n", "                    ", "continue", "\n", "", "if", "op_sc", "[", "'end_iteration'", "]", ">", "0", "and", "op_sc", "[", "'end_iteration'", "]", "<=", "self", ".", "last_iter", ":", "\n", "                    ", "continue", "\n", "", "if", "op_sc", "[", "'start_epoch'", "]", ">", "self", ".", "last_epoch", ":", "\n", "                    ", "continue", "\n", "", "if", "op_sc", "[", "'end_epoch'", "]", ">", "0", "and", "op_sc", "[", "'end_epoch'", "]", "<=", "self", ".", "last_epoch", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "input", "=", "{", "\n", "'batch'", ":", "batch", ",", "\n", "'return_loss'", ":", "True", ",", "\n", "'step'", ":", "self", ".", "last_iter", ",", "\n", "}", "\n", "if", "op_sc_n", "!=", "'none'", ":", "\n", "                ", "input", "[", "'name'", "]", "=", "op_sc_n", "\n", "\n", "", "if", "phase", "==", "'train'", ":", "\n", "                ", "if", "self", ".", "args", ".", "amp", ":", "\n", "                    ", "with", "autocast", "(", ")", ":", "\n", "                        ", "output", "=", "self", ".", "model", "(", "**", "input", ")", "\n", "", "", "else", ":", "\n", "                    ", "output", "=", "self", ".", "model", "(", "**", "input", ")", "\n", "", "", "else", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "if", "self", ".", "args", ".", "amp", ":", "\n", "                        ", "with", "autocast", "(", ")", ":", "\n", "                            ", "output", "=", "self", ".", "model", "(", "**", "input", ")", "\n", "", "", "else", ":", "\n", "                        ", "output", "=", "self", ".", "model", "(", "**", "input", ")", "\n", "\n", "", "", "", "if", "phase", "==", "'train'", ":", "\n", "                ", "if", "op_sc", "[", "'optimizer'", "]", "[", "'step_iteration'", "]", ">", "0", "and", "(", "self", ".", "last_iter", "+", "1", ")", "%", "op_sc", "[", "'optimizer'", "]", "[", "'step_iteration'", "]", "==", "0", ":", "\n", "                    ", "op_sc", "[", "'optimizer'", "]", "[", "'module'", "]", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "args", ".", "amp", ":", "\n", "                        ", "self", ".", "scaler", ".", "scale", "(", "output", "[", "'loss'", "]", ")", ".", "backward", "(", ")", "\n", "if", "self", ".", "clip_grad_norm", "is", "not", "None", ":", "\n", "                            ", "self", ".", "clip_grad_norm", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "self", ".", "scaler", ".", "step", "(", "op_sc", "[", "'optimizer'", "]", "[", "'module'", "]", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                        ", "output", "[", "'loss'", "]", ".", "backward", "(", ")", "\n", "if", "self", ".", "clip_grad_norm", "is", "not", "None", ":", "\n", "                            ", "self", ".", "clip_grad_norm", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "op_sc", "[", "'optimizer'", "]", "[", "'module'", "]", ".", "step", "(", ")", "\n", "\n", "", "", "if", "'scheduler'", "in", "op_sc", ":", "\n", "                    ", "if", "op_sc", "[", "'scheduler'", "]", "[", "'step_iteration'", "]", ">", "0", "and", "(", "self", ".", "last_iter", "+", "1", ")", "%", "op_sc", "[", "'scheduler'", "]", "[", "'step_iteration'", "]", "==", "0", ":", "\n", "                        ", "if", "isinstance", "(", "op_sc", "[", "'scheduler'", "]", "[", "'module'", "]", ",", "STEP_WITH_LOSS_SCHEDULERS", ")", ":", "\n", "                            ", "op_sc", "[", "'scheduler'", "]", "[", "'module'", "]", ".", "step", "(", "output", ".", "get", "(", "'loss'", ")", ")", "\n", "", "else", ":", "\n", "                            ", "op_sc", "[", "'scheduler'", "]", "[", "'module'", "]", ".", "step", "(", ")", "\n", "# update ema model", "\n", "", "", "", "if", "self", ".", "ema", "is", "not", "None", ":", "\n", "                    ", "self", ".", "ema", ".", "update", "(", "iteration", "=", "self", ".", "last_iter", ")", "\n", "\n", "", "", "loss", "[", "op_sc_n", "]", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "output", ".", "items", "(", ")", "if", "(", "'loss'", "in", "k", "or", "'acc'", "in", "k", ")", "}", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.save": [[300, 349], ["image_synthesis.distributed.distributed.is_primary", "isinstance", "solver.Solver.optimizer_and_scheduler.items", "os.path.join", "torch.save", "solver.Solver.logger.log_info", "solver.Solver.ema.state_dict", "solver.Solver.clip_grad_norm.state_dict", "os.path.join", "torch.save", "solver.Solver.logger.log_info", "isinstance", "solver.Solver.model.module.state_dict", "solver.Solver.model.state_dict", "[].state_dict", "str().zfill", "op_sc[].items", "str"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.is_primary", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.save", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.save", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict"], ["", "def", "save", "(", "self", ",", "force", "=", "False", ")", ":", "\n", "        ", "if", "is_primary", "(", ")", ":", "\n", "# save with the epoch specified name", "\n", "            ", "if", "self", ".", "save_iterations", ">", "0", ":", "\n", "                ", "if", "(", "self", ".", "last_iter", "+", "1", ")", "%", "self", ".", "save_iterations", "==", "0", ":", "\n", "                    ", "save", "=", "True", "\n", "", "else", ":", "\n", "                    ", "save", "=", "False", "\n", "", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "self", ".", "save_epochs", ",", "int", ")", ":", "\n", "                    ", "save", "=", "(", "self", ".", "last_epoch", "+", "1", ")", "%", "self", ".", "save_epochs", "==", "0", "\n", "", "else", ":", "\n", "                    ", "save", "=", "(", "self", ".", "last_epoch", "+", "1", ")", "in", "self", ".", "save_epochs", "\n", "\n", "", "", "if", "save", "or", "force", ":", "\n", "                ", "state_dict", "=", "{", "\n", "'last_epoch'", ":", "self", ".", "last_epoch", ",", "\n", "'last_iter'", ":", "self", ".", "last_iter", ",", "\n", "'model'", ":", "self", ".", "model", ".", "module", ".", "state_dict", "(", ")", "if", "isinstance", "(", "self", ".", "model", ",", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", "else", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "}", "\n", "if", "self", ".", "ema", "is", "not", "None", ":", "\n", "                    ", "state_dict", "[", "'ema'", "]", "=", "self", ".", "ema", ".", "state_dict", "(", ")", "\n", "", "if", "self", ".", "clip_grad_norm", "is", "not", "None", ":", "\n", "                    ", "state_dict", "[", "'clip_grad_norm'", "]", "=", "self", ".", "clip_grad_norm", ".", "state_dict", "(", ")", "\n", "\n", "# add optimizers and schedulers", "\n", "", "optimizer_and_scheduler", "=", "{", "}", "\n", "for", "op_sc_n", ",", "op_sc", "in", "self", ".", "optimizer_and_scheduler", ".", "items", "(", ")", ":", "\n", "                    ", "state_", "=", "{", "}", "\n", "for", "k", "in", "op_sc", ":", "\n", "                        ", "if", "k", "in", "[", "'optimizer'", ",", "'scheduler'", "]", ":", "\n", "                            ", "op_or_sc", "=", "{", "kk", ":", "vv", "for", "kk", ",", "vv", "in", "op_sc", "[", "k", "]", ".", "items", "(", ")", "if", "kk", "!=", "'module'", "}", "\n", "op_or_sc", "[", "'module'", "]", "=", "op_sc", "[", "k", "]", "[", "'module'", "]", ".", "state_dict", "(", ")", "\n", "state_", "[", "k", "]", "=", "op_or_sc", "\n", "", "else", ":", "\n", "                            ", "state_", "[", "k", "]", "=", "op_sc", "[", "k", "]", "\n", "", "", "optimizer_and_scheduler", "[", "op_sc_n", "]", "=", "state_", "\n", "\n", "", "state_dict", "[", "'optimizer_and_scheduler'", "]", "=", "optimizer_and_scheduler", "\n", "\n", "if", "save", ":", "\n", "                    ", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_dir", ",", "'{}e_{}iter.pth'", ".", "format", "(", "str", "(", "self", ".", "last_epoch", ")", ".", "zfill", "(", "6", ")", ",", "self", ".", "last_iter", ")", ")", "\n", "torch", ".", "save", "(", "state_dict", ",", "save_path", ")", "\n", "self", ".", "logger", ".", "log_info", "(", "'saved in {}'", ".", "format", "(", "save_path", ")", ")", "\n", "\n", "# save with the last name", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_dir", ",", "'last.pth'", ")", "\n", "torch", ".", "save", "(", "state_dict", ",", "save_path", ")", "\n", "self", ".", "logger", ".", "log_info", "(", "'saved in {}'", ".", "format", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.resume": [[350, 401], ["os.path.exists", "os.path.join", "torch.load", "isinstance", "state_dict[].items", "solver.Solver.logger.log_info", "solver.Solver.model.load_state_dict", "solver.Solver.clip_grad_norm.load_state_dict", "solver.Solver.model.module.load_state_dict", "solver.Solver.ema.load_state_dict", "solver.Solver.model.module.state_dict", "solver.Solver.update", "solver.Solver.model.module.load_state_dict", "solver.Solver.ema.state_dict", "solver.Solver.update", "solver.Solver.ema.load_state_dict", "state_dict[].items", "state_dict[].items", "[].load_state_dict", "solver.Solver.keys", "solver.Solver.keys"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys"], ["", "", "", "def", "resume", "(", "self", ",", "\n", "path", "=", "None", ",", "# The path of last.pth", "\n", "load_optimizer_and_scheduler", "=", "True", ",", "# whether to load optimizers and scheduler", "\n", "load_others", "=", "True", "# load other informations", "\n", ")", ":", "\n", "        ", "if", "path", "is", "None", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_dir", ",", "'last.pth'", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "'cuda:{}'", ".", "format", "(", "self", ".", "args", ".", "local_rank", ")", ")", "\n", "\n", "if", "load_others", ":", "\n", "                ", "self", ".", "last_epoch", "=", "state_dict", "[", "'last_epoch'", "]", "\n", "self", ".", "last_iter", "=", "state_dict", "[", "'last_iter'", "]", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "model", ",", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "model", ".", "module", ".", "load_state_dict", "(", "state_dict", "[", "'model'", "]", ")", "\n", "", "except", ":", "\n", "                    ", "model_dict", "=", "self", ".", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "temp_state_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", "[", "'model'", "]", ".", "items", "(", ")", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "model_dict", ".", "update", "(", "temp_state_dict", ")", "\n", "self", ".", "model", ".", "module", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "model", ".", "load_state_dict", "(", "state_dict", "[", "'model'", "]", ")", "\n", "\n", "", "if", "'ema'", "in", "state_dict", "and", "self", ".", "ema", "is", "not", "None", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "ema", ".", "load_state_dict", "(", "state_dict", "[", "'ema'", "]", ")", "\n", "", "except", ":", "\n", "                    ", "model_dict", "=", "self", ".", "ema", ".", "state_dict", "(", ")", "\n", "temp_state_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", "[", "'ema'", "]", ".", "items", "(", ")", "if", "k", "in", "model_dict", ".", "keys", "(", ")", "}", "\n", "model_dict", ".", "update", "(", "temp_state_dict", ")", "\n", "self", ".", "ema", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "", "if", "'clip_grad_norm'", "in", "state_dict", "and", "self", ".", "clip_grad_norm", "is", "not", "None", ":", "\n", "                ", "self", ".", "clip_grad_norm", ".", "load_state_dict", "(", "state_dict", "[", "'clip_grad_norm'", "]", ")", "\n", "\n", "# handle optimizer and scheduler", "\n", "", "for", "op_sc_n", ",", "op_sc", "in", "state_dict", "[", "'optimizer_and_scheduler'", "]", ".", "items", "(", ")", ":", "\n", "                ", "for", "k", "in", "op_sc", ":", "\n", "                    ", "if", "k", "in", "[", "'optimizer'", ",", "'scheduler'", "]", ":", "\n", "                        ", "for", "kk", "in", "op_sc", "[", "k", "]", ":", "\n", "                            ", "if", "kk", "==", "'module'", "and", "load_optimizer_and_scheduler", ":", "\n", "                                ", "self", ".", "optimizer_and_scheduler", "[", "op_sc_n", "]", "[", "k", "]", "[", "kk", "]", ".", "load_state_dict", "(", "op_sc", "[", "k", "]", "[", "kk", "]", ")", "\n", "", "elif", "load_others", ":", "# such as step_iteration, ...", "\n", "                                ", "self", ".", "optimizer_and_scheduler", "[", "op_sc_n", "]", "[", "k", "]", "[", "kk", "]", "=", "op_sc", "[", "k", "]", "[", "kk", "]", "\n", "", "", "", "elif", "load_others", ":", "# such as start_epoch, end_epoch, ....", "\n", "                        ", "self", ".", "optimizer_and_scheduler", "[", "op_sc_n", "]", "[", "k", "]", "=", "op_sc", "[", "k", "]", "\n", "\n", "", "", "", "self", ".", "logger", ".", "log_info", "(", "'Resume from {}'", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train_epoch": [[402, 469], ["solver.Solver.model.train", "time.time", "time.time", "enumerate", "solver.Solver.dataloader[].sampler.set_epoch", "time.time", "solver.Solver.step", "time.time", "print", "time.time", "solver.Solver.items", "solver.Solver._get_lr", "solver.Solver.keys", "solver.Solver.logger.log_info", "solver.Solver.model.eval", "solver.Solver.sample", "solver.Solver.model.train", "image_synthesis.distributed.distributed.reduce_dict", "solver.Solver.logger.add_scalar", "solver.Solver._get_lr", "time.time", "str", "solver.Solver.logger.add_scalar", "round", "round", "round", "round", "image_synthesis.utils.misc.format_seconds", "image_synthesis.utils.misc.format_seconds", "image_synthesis.utils.misc.format_seconds", "time.time", "float", "float", "time.time", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.step", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver._get_lr", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.sample", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.reduce_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver._get_lr", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.format_seconds", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.format_seconds", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.format_seconds"], ["", "", "def", "train_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "last_epoch", "+=", "1", "\n", "\n", "if", "self", ".", "args", ".", "distributed", ":", "\n", "            ", "self", ".", "dataloader", "[", "'train_loader'", "]", ".", "sampler", ".", "set_epoch", "(", "self", ".", "last_epoch", ")", "\n", "\n", "", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "itr_start", "=", "time", ".", "time", "(", ")", "\n", "itr", "=", "-", "1", "\n", "for", "itr", ",", "batch", "in", "enumerate", "(", "self", ".", "dataloader", "[", "'train_loader'", "]", ")", ":", "\n", "            ", "if", "itr", "==", "0", ":", "\n", "                ", "print", "(", "\"time2 is \"", "+", "str", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "", "data_time", "=", "time", ".", "time", "(", ")", "-", "itr_start", "\n", "step_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "last_iter", "+=", "1", "\n", "loss", "=", "self", ".", "step", "(", "batch", ",", "phase", "=", "'train'", ")", "\n", "# logging info", "\n", "if", "self", ".", "logger", "is", "not", "None", "and", "self", ".", "last_iter", "%", "self", ".", "args", ".", "log_frequency", "==", "0", ":", "\n", "                ", "info", "=", "'{}: train'", ".", "format", "(", "self", ".", "args", ".", "name", ")", "\n", "info", "=", "info", "+", "': Epoch {}/{} iter {}/{}'", ".", "format", "(", "self", ".", "last_epoch", ",", "self", ".", "max_epochs", ",", "self", ".", "last_iter", "%", "self", ".", "dataloader", "[", "'train_iterations'", "]", ",", "self", ".", "dataloader", "[", "'train_iterations'", "]", ")", "\n", "for", "loss_n", ",", "loss_dict", "in", "loss", ".", "items", "(", ")", ":", "\n", "                    ", "info", "+=", "' ||'", "\n", "loss_dict", "=", "reduce_dict", "(", "loss_dict", ")", "\n", "info", "+=", "''", "if", "loss_n", "==", "'none'", "else", "' {}'", ".", "format", "(", "loss_n", ")", "\n", "# info = info + ': Epoch {}/{} iter {}/{}'.format(self.last_epoch, self.max_epochs, self.last_iter%self.dataloader['train_iterations'], self.dataloader['train_iterations'])", "\n", "for", "k", "in", "loss_dict", ":", "\n", "                        ", "info", "+=", "' | {}: {:.4f}'", ".", "format", "(", "k", ",", "float", "(", "loss_dict", "[", "k", "]", ")", ")", "\n", "self", ".", "logger", ".", "add_scalar", "(", "tag", "=", "'train/{}/{}'", ".", "format", "(", "loss_n", ",", "k", ")", ",", "scalar_value", "=", "float", "(", "loss_dict", "[", "k", "]", ")", ",", "global_step", "=", "self", ".", "last_iter", ")", "\n", "\n", "# log lr", "\n", "", "", "lrs", "=", "self", ".", "_get_lr", "(", "return_type", "=", "'dict'", ")", "\n", "for", "k", "in", "lrs", ".", "keys", "(", ")", ":", "\n", "                    ", "lr", "=", "lrs", "[", "k", "]", "\n", "self", ".", "logger", ".", "add_scalar", "(", "tag", "=", "'train/{}_lr'", ".", "format", "(", "k", ")", ",", "scalar_value", "=", "lrs", "[", "k", "]", ",", "global_step", "=", "self", ".", "last_iter", ")", "\n", "\n", "# add lr to info", "\n", "", "info", "+=", "' || {}'", ".", "format", "(", "self", ".", "_get_lr", "(", ")", ")", "\n", "\n", "# add time consumption to info", "\n", "spend_time", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_train_time", "\n", "itr_time_avg", "=", "spend_time", "/", "(", "self", ".", "last_iter", "+", "1", ")", "\n", "info", "+=", "' || data_time: {dt}s | fbward_time: {fbt}s | iter_time: {it}s | iter_avg_time: {ita}s | epoch_time: {et} | spend_time: {st} | left_time: {lt}'", ".", "format", "(", "\n", "dt", "=", "round", "(", "data_time", ",", "1", ")", ",", "\n", "it", "=", "round", "(", "time", ".", "time", "(", ")", "-", "itr_start", ",", "1", ")", ",", "\n", "fbt", "=", "round", "(", "time", ".", "time", "(", ")", "-", "step_start", ",", "1", ")", ",", "\n", "ita", "=", "round", "(", "itr_time_avg", ",", "1", ")", ",", "\n", "et", "=", "format_seconds", "(", "time", ".", "time", "(", ")", "-", "epoch_start", ")", ",", "\n", "st", "=", "format_seconds", "(", "spend_time", ")", ",", "\n", "lt", "=", "format_seconds", "(", "itr_time_avg", "*", "self", ".", "max_epochs", "*", "self", ".", "dataloader", "[", "'train_iterations'", "]", "-", "spend_time", ")", "\n", ")", "\n", "self", ".", "logger", ".", "log_info", "(", "info", ")", "\n", "\n", "", "itr_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# sample", "\n", "if", "self", ".", "sample_iterations", ">", "0", "and", "(", "self", ".", "last_iter", "+", "1", ")", "%", "self", ".", "sample_iterations", "==", "0", ":", "\n", "# print(\"save model here\")", "\n", "# self.save(force=True)", "\n", "# print(\"save model done\")", "\n", "                ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "sample", "(", "batch", ",", "phase", "=", "'train'", ",", "step_type", "=", "'iteration'", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "# modify here to make sure dataloader['train_iterations'] is correct", "\n", "", "", "assert", "itr", ">=", "0", ",", "\"The data is too less to form one iteration!\"", "\n", "self", ".", "dataloader", "[", "'train_iterations'", "]", "=", "itr", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.validate_epoch": [[470, 536], ["isinstance", "solver.Solver.model.eval", "time.time", "time.time", "enumerate", "solver.Solver.dataloader[].sampler.set_epoch", "time.time", "solver.Solver.step", "solver.Solver.items", "time.time", "overall_loss.items", "solver.Solver.logger.log_info", "time.time", "image_synthesis.distributed.distributed.reduce_dict", "solver.Solver.items", "solver.Solver.items", "solver.Solver.logger.log_info", "loss_dict.items", "solver.Solver.logger.add_scalar", "time.time", "round", "round", "round", "image_synthesis.utils.misc.format_seconds", "image_synthesis.utils.misc.format_seconds", "float", "float", "float", "time.time", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.misc.coord.CoordStage.eval", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.step", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.reduce_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.format_seconds", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.format_seconds"], ["", "def", "validate_epoch", "(", "self", ")", ":", "\n", "        ", "if", "'validation_loader'", "not", "in", "self", ".", "dataloader", ":", "\n", "            ", "val", "=", "False", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "validation_epochs", ",", "int", ")", ":", "\n", "                ", "val", "=", "(", "self", ".", "last_epoch", "+", "1", ")", "%", "self", ".", "validation_epochs", "==", "0", "\n", "", "else", ":", "\n", "                ", "val", "=", "(", "self", ".", "last_epoch", "+", "1", ")", "in", "self", ".", "validation_epochs", "\n", "\n", "", "", "if", "val", ":", "\n", "            ", "if", "self", ".", "args", ".", "distributed", ":", "\n", "                ", "self", ".", "dataloader", "[", "'validation_loader'", "]", ".", "sampler", ".", "set_epoch", "(", "self", ".", "last_epoch", ")", "\n", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "overall_loss", "=", "None", "\n", "epoch_start", "=", "time", ".", "time", "(", ")", "\n", "itr_start", "=", "time", ".", "time", "(", ")", "\n", "itr", "=", "-", "1", "\n", "for", "itr", ",", "batch", "in", "enumerate", "(", "self", ".", "dataloader", "[", "'validation_loader'", "]", ")", ":", "\n", "                ", "data_time", "=", "time", ".", "time", "(", ")", "-", "itr_start", "\n", "step_start", "=", "time", ".", "time", "(", ")", "\n", "loss", "=", "self", ".", "step", "(", "batch", ",", "phase", "=", "'val'", ")", "\n", "\n", "for", "loss_n", ",", "loss_dict", "in", "loss", ".", "items", "(", ")", ":", "\n", "                    ", "loss", "[", "loss_n", "]", "=", "reduce_dict", "(", "loss_dict", ")", "\n", "", "if", "overall_loss", "is", "None", ":", "\n", "                    ", "overall_loss", "=", "loss", "\n", "", "else", ":", "\n", "                    ", "for", "loss_n", ",", "loss_dict", "in", "loss", ".", "items", "(", ")", ":", "\n", "                        ", "for", "k", ",", "v", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "                            ", "overall_loss", "[", "loss_n", "]", "[", "k", "]", "=", "(", "overall_loss", "[", "loss_n", "]", "[", "k", "]", "*", "itr", "+", "loss", "[", "loss_n", "]", "[", "k", "]", ")", "/", "(", "itr", "+", "1", ")", "\n", "\n", "", "", "", "if", "self", ".", "logger", "is", "not", "None", "and", "(", "itr", "+", "1", ")", "%", "self", ".", "args", ".", "log_frequency", "==", "0", ":", "\n", "                    ", "info", "=", "'{}: val'", ".", "format", "(", "self", ".", "args", ".", "name", ")", "\n", "info", "=", "info", "+", "': Epoch {}/{} | iter {}/{}'", ".", "format", "(", "self", ".", "last_epoch", ",", "self", ".", "max_epochs", ",", "itr", ",", "self", ".", "dataloader", "[", "'validation_iterations'", "]", ")", "\n", "for", "loss_n", ",", "loss_dict", "in", "loss", ".", "items", "(", ")", ":", "\n", "                        ", "info", "+=", "' ||'", "\n", "info", "+=", "''", "if", "loss_n", "==", "'none'", "else", "' {}'", ".", "format", "(", "loss_n", ")", "\n", "# info = info + ': Epoch {}/{} | iter {}/{}'.format(self.last_epoch, self.max_epochs, itr, self.dataloader['validation_iterations'])", "\n", "for", "k", "in", "loss_dict", ":", "\n", "                            ", "info", "+=", "' | {}: {:.4f}'", ".", "format", "(", "k", ",", "float", "(", "loss_dict", "[", "k", "]", ")", ")", "\n", "\n", "", "", "itr_time_avg", "=", "(", "time", ".", "time", "(", ")", "-", "epoch_start", ")", "/", "(", "itr", "+", "1", ")", "\n", "info", "+=", "' || data_time: {dt}s | fbward_time: {fbt}s | iter_time: {it}s | epoch_time: {et} | left_time: {lt}'", ".", "format", "(", "\n", "dt", "=", "round", "(", "data_time", ",", "1", ")", ",", "\n", "fbt", "=", "round", "(", "time", ".", "time", "(", ")", "-", "step_start", ",", "1", ")", ",", "\n", "it", "=", "round", "(", "time", ".", "time", "(", ")", "-", "itr_start", ",", "1", ")", ",", "\n", "et", "=", "format_seconds", "(", "time", ".", "time", "(", ")", "-", "epoch_start", ")", ",", "\n", "lt", "=", "format_seconds", "(", "itr_time_avg", "*", "(", "self", ".", "dataloader", "[", "'train_iterations'", "]", "-", "itr", "-", "1", ")", ")", "\n", ")", "\n", "\n", "self", ".", "logger", ".", "log_info", "(", "info", ")", "\n", "", "itr_start", "=", "time", ".", "time", "(", ")", "\n", "# modify here to make sure dataloader['validation_iterations'] is correct", "\n", "", "assert", "itr", ">=", "0", ",", "\"The data is too less to form one iteration!\"", "\n", "self", ".", "dataloader", "[", "'validation_iterations'", "]", "=", "itr", "+", "1", "\n", "\n", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "                ", "info", "=", "'{}: val'", ".", "format", "(", "self", ".", "args", ".", "name", ")", "\n", "for", "loss_n", ",", "loss_dict", "in", "overall_loss", ".", "items", "(", ")", ":", "\n", "                    ", "info", "+=", "''", "if", "loss_n", "==", "'none'", "else", "' {}'", ".", "format", "(", "loss_n", ")", "\n", "info", "+=", "': Epoch {}/{}'", ".", "format", "(", "self", ".", "last_epoch", ",", "self", ".", "max_epochs", ")", "\n", "for", "k", "in", "loss_dict", ":", "\n", "                        ", "info", "+=", "' | {}: {:.4f}'", ".", "format", "(", "k", ",", "float", "(", "loss_dict", "[", "k", "]", ")", ")", "\n", "self", ".", "logger", ".", "add_scalar", "(", "tag", "=", "'val/{}/{}'", ".", "format", "(", "loss_n", ",", "k", ")", ",", "scalar_value", "=", "float", "(", "loss_dict", "[", "k", "]", ")", ",", "global_step", "=", "self", ".", "last_epoch", ")", "\n", "", "", "self", ".", "logger", ".", "log_info", "(", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.validate": [[537, 539], ["solver.Solver.validation_epoch"], "methods", ["None"], ["", "", "", "def", "validate", "(", "self", ")", ":", "\n", "        ", "self", ".", "validation_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train": [[540, 549], ["time.time", "solver.Solver.logger.log_info", "range", "solver.Solver.train_epoch", "solver.Solver.save", "solver.Solver.validate_epoch"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.train_epoch", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.save", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.solver.Solver.validate_epoch"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "start_epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "self", ".", "start_train_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "logger", ".", "log_info", "(", "'{}: global rank {}: start training...'", ".", "format", "(", "self", ".", "args", ".", "name", ",", "self", ".", "args", ".", "global_rank", ")", ",", "check_primary", "=", "False", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "self", ".", "max_epochs", ")", ":", "\n", "            ", "self", ".", "train_epoch", "(", ")", "\n", "self", ".", "save", "(", "force", "=", "True", ")", "\n", "self", ".", "validate_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.__init__": [[19, 42], ["image_synthesis.distributed.distributed.is_primary", "os.makedirs", "os.path.join", "os.makedirs", "os.path.join", "image_synthesis.utils.io.write_args", "os.path.join", "open", "os.path.exists", "os.makedirs", "os.path.join", "logger.Logger.log_info", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.distributed.distributed.is_primary", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.io.write_args", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "save_dir", "=", "args", ".", "save_dir", "\n", "self", ".", "is_primary", "=", "is_primary", "(", ")", "\n", "\n", "if", "self", ".", "is_primary", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# save the args and config", "\n", "self", ".", "config_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'configs'", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "config_dir", ",", "exist_ok", "=", "True", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config_dir", ",", "'args.txt'", ")", "\n", "write_args", "(", "args", ",", "file_name", ")", "\n", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "'logs'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "self", ".", "text_writer", "=", "open", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'log.txt'", ")", ",", "'a'", ")", "# 'w')", "\n", "if", "args", ".", "tensorboard", ":", "\n", "                ", "self", ".", "log_info", "(", "'using tensorboard'", ")", "\n", "self", ".", "tb_writer", "=", "torch", ".", "utils", ".", "tensorboard", ".", "SummaryWriter", "(", "log_dir", "=", "log_dir", ")", "# tensorboard.SummaryWriter(log_dir=log_dir)", "\n", "", "else", ":", "\n", "                ", "self", ".", "tb_writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.save_config": [[44, 47], ["image_synthesis.utils.io.save_config_to_yaml", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.io.save_config_to_yaml"], ["", "", "", "def", "save_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "self", ".", "is_primary", ":", "\n", "            ", "save_config_to_yaml", "(", "config", ",", "os", ".", "path", ".", "join", "(", "self", ".", "config_dir", ",", "'config.yaml'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.log_info": [[48, 59], ["print", "str", "time.strftime", "logger.Logger.text_writer.write", "logger.Logger.text_writer.flush", "str.endswith"], "methods", ["None"], ["", "", "def", "log_info", "(", "self", ",", "info", ",", "check_primary", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "is_primary", "or", "(", "not", "check_primary", ")", ":", "\n", "            ", "print", "(", "info", ")", "\n", "if", "self", ".", "is_primary", ":", "\n", "                ", "info", "=", "str", "(", "info", ")", "\n", "time_str", "=", "time", ".", "strftime", "(", "'%Y-%m-%d-%H-%M'", ")", "\n", "info", "=", "'{}: {}'", ".", "format", "(", "time_str", ",", "info", ")", "\n", "if", "not", "info", ".", "endswith", "(", "'\\n'", ")", ":", "\n", "                    ", "info", "+=", "'\\n'", "\n", "", "self", ".", "text_writer", ".", "write", "(", "info", ")", "\n", "self", ".", "text_writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.add_scalar": [[60, 65], ["logger.Logger.tb_writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.add_scalar"], ["", "", "", "def", "add_scalar", "(", "self", ",", "**", "kargs", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "if", "self", ".", "is_primary", ":", "\n", "            ", "if", "self", ".", "tb_writer", "is", "not", "None", ":", "\n", "                ", "self", ".", "tb_writer", ".", "add_scalar", "(", "**", "kargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.add_scalars": [[66, 71], ["logger.Logger.tb_writer.add_scalars"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.add_scalars"], ["", "", "", "def", "add_scalars", "(", "self", ",", "**", "kargs", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "if", "self", ".", "is_primary", ":", "\n", "            ", "if", "self", ".", "tb_writer", "is", "not", "None", ":", "\n", "                ", "self", ".", "tb_writer", ".", "add_scalars", "(", "**", "kargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.add_image": [[72, 77], ["logger.Logger.tb_writer.add_image"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.add_image"], ["", "", "", "def", "add_image", "(", "self", ",", "**", "kargs", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "if", "self", ".", "is_primary", ":", "\n", "            ", "if", "self", ".", "tb_writer", "is", "not", "None", ":", "\n", "                ", "self", ".", "tb_writer", ".", "add_image", "(", "**", "kargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.add_images": [[78, 83], ["logger.Logger.tb_writer.add_images"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.add_images"], ["", "", "", "def", "add_images", "(", "self", ",", "**", "kargs", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "if", "self", ".", "is_primary", ":", "\n", "            ", "if", "self", ".", "tb_writer", "is", "not", "None", ":", "\n", "                ", "self", ".", "tb_writer", ".", "add_images", "(", "**", "kargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.close": [[85, 89], ["logger.Logger.text_writer.close", "logger.Logger.tb_writer.close"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.close", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.logger.Logger.close"], ["", "", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_primary", ":", "\n", "            ", "self", ".", "text_writer", ".", "close", "(", ")", "\n", "self", ".", "tb_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.__init__": [[5, 25], ["torch.device", "ema.EMA.ema_model.to", "torch.no_grad", "v.clone().to", "hasattr", "callable", "copy.deepcopy", "model.get_ema_model().state_dict", "copy.deepcopy", "model.state_dict", "ema.EMA.cur_state_dict.items", "model.get_ema_model", "v.clone", "model.get_ema_model"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.image_codec.taming_gumbel_vqvae.TamingGumbelVQVAE.device", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.get_ema_model", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.get_ema_model"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model", ",", "\n", "decay", "=", "0.99", ",", "\n", "update_interval", "=", "1", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "\n", "        ", "self", ".", "decay", "=", "decay", "\n", "self", ".", "update_iterval", "=", "update_interval", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "model", "=", "model", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "model", ",", "'get_ema_model'", ")", "and", "callable", "(", "model", ".", "get_ema_model", ")", ":", "\n", "                ", "self", ".", "ema_model", "=", "copy", ".", "deepcopy", "(", "model", ".", "get_ema_model", "(", ")", ")", "\n", "self", ".", "cur_state_dict", "=", "model", ".", "get_ema_model", "(", ")", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "ema_model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "self", ".", "cur_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "", "", "self", ".", "ema_model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "cur_state_dict", "=", "{", "k", ":", "v", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "for", "k", ",", "v", "in", "self", ".", "cur_state_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update": [[26, 38], ["ema.EMA.ema_model.state_dict", "ema.EMA.keys", "ema.EMA.ema_model.load_state_dict", "hasattr", "callable", "ema.EMA.model.get_ema_model().state_dict", "ema.EMA.model.state_dict", "ema.EMA.model.get_ema_model", "cur_state_dict[].clone().to", "cur_state_dict[].clone"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.keys", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.get_ema_model"], ["", "def", "update", "(", "self", ",", "iteration", ")", ":", "\n", "        ", "if", "(", "iteration", "+", "1", ")", "%", "self", ".", "update_iterval", "==", "0", ":", "\n", "# print('{} Update ema'.format(iteration))", "\n", "            ", "if", "hasattr", "(", "self", ".", "model", ",", "'get_ema_model'", ")", "and", "callable", "(", "self", ".", "model", ".", "get_ema_model", ")", ":", "\n", "                ", "cur_state_dict", "=", "self", ".", "model", ".", "get_ema_model", "(", ")", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "                ", "cur_state_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "\n", "", "ema_state_dict", "=", "self", ".", "ema_model", ".", "state_dict", "(", ")", "\n", "for", "k", "in", "ema_state_dict", ".", "keys", "(", ")", ":", "\n", "                ", "ema_state_dict", "[", "k", "]", "=", "ema_state_dict", "[", "k", "]", "*", "self", ".", "decay", "+", "cur_state_dict", "[", "k", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "*", "(", "1", "-", "self", ".", "decay", ")", "\n", "", "self", ".", "ema_model", ".", "load_state_dict", "(", "ema_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.state_dict": [[39, 41], ["ema.EMA.ema_model.state_dict"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ema_model", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.load_state_dict": [[42, 45], ["ema.EMA.ema_model.load_state_dict", "v.clone().to", "state_dict.items", "v.clone"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ")", ":", "\n", "        ", "state_dict_", "=", "{", "k", ":", "v", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "self", ".", "ema_model", ".", "load_state_dict", "(", "state_dict_", ",", "strict", "=", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.modify_to_inference": [[46, 60], ["ema.EMA.ema_model.state_dict", "hasattr", "callable", "ema.EMA.model.get_ema_model().state_dict", "ema.EMA.model.state_dict", "v.clone().to", "v.to", "hasattr", "callable", "ema.EMA.model.get_ema_model().load_state_dict", "ema.EMA.model.load_state_dict", "ema.EMA.cur_state_dict.items", "ema.EMA.items", "ema.EMA.model.get_ema_model", "v.clone", "ema.EMA.model.get_ema_model"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.get_ema_model", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.get_ema_model"], ["", "def", "modify_to_inference", "(", "self", ")", ":", "\n", "# get current model", "\n", "        ", "if", "hasattr", "(", "self", ".", "model", ",", "'get_ema_model'", ")", "and", "callable", "(", "self", ".", "model", ".", "get_ema_model", ")", ":", "\n", "            ", "self", ".", "cur_state_dict", "=", "self", ".", "model", ".", "get_ema_model", "(", ")", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cur_state_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "", "self", ".", "cur_state_dict", "=", "{", "k", ":", "v", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "for", "k", ",", "v", "in", "self", ".", "cur_state_dict", ".", "items", "(", ")", "}", "\n", "\n", "ema_state_dict", "=", "self", ".", "ema_model", ".", "state_dict", "(", ")", "\n", "ema_state_dict", "=", "{", "k", ":", "v", ".", "to", "(", "self", ".", "model", ".", "device", ")", "for", "k", ",", "v", "in", "ema_state_dict", ".", "items", "(", ")", "}", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "'get_ema_model'", ")", "and", "callable", "(", "self", ".", "model", ".", "get_ema_model", ")", ":", "\n", "            ", "self", ".", "model", ".", "get_ema_model", "(", ")", ".", "load_state_dict", "(", "ema_state_dict", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "load_state_dict", "(", "ema_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.modify_to_train": [[61, 67], ["v.clone().to", "hasattr", "callable", "ema.EMA.model.get_ema_model().load_state_dict", "ema.EMA.model.load_state_dict", "ema.EMA.cur_state_dict.items", "v.clone", "ema.EMA.model.get_ema_model"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.models.conditional_dalle.C_DALLE.get_ema_model"], ["", "", "def", "modify_to_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_state_dict", "=", "{", "k", ":", "v", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "model", ".", "device", ")", "for", "k", ",", "v", "in", "self", ".", "cur_state_dict", ".", "items", "(", ")", "}", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "'get_ema_model'", ")", "and", "callable", "(", "self", ".", "model", ".", "get_ema_model", ")", ":", "\n", "            ", "self", ".", "model", ".", "get_ema_model", "(", ")", ".", "load_state_dict", "(", "self", ".", "cur_state_dict", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "load_state_dict", "(", "self", ".", "cur_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.clip_grad_norm.ClipGradNorm.__init__": [[5, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "start_iteration", "=", "0", ",", "\n", "end_iteration", "=", "-", "1", ",", "# if negative, the norm will be always clipped", "\n", "max_norm", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "start_iteration", "=", "start_iteration", "\n", "self", ".", "end_iteration", "=", "end_iteration", "\n", "self", ".", "max_norm", "=", "max_norm", "\n", "\n", "self", ".", "last_epoch", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.clip_grad_norm.ClipGradNorm.__call__": [[16, 25], ["torch.nn.utils.clip_grad_norm_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "self", ".", "last_epoch", "+=", "1", "\n", "clip", "=", "False", "\n", "if", "self", ".", "last_epoch", ">=", "self", ".", "start_iteration", ":", "\n", "            ", "clip", "=", "True", "\n", "", "if", "self", ".", "end_iteration", ">", "0", "and", "self", ".", "last_epoch", "<", "self", ".", "end_iteration", ":", "\n", "            ", "clip", "=", "True", "\n", "", "if", "clip", ":", "\n", "            ", "clip_grad_norm_", "(", "parameters", ",", "max_norm", "=", "self", ".", "max_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.clip_grad_norm.ClipGradNorm.state_dict": [[26, 28], ["clip_grad_norm.ClipGradNorm.__dict__.items"], "methods", ["None"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.clip_grad_norm.ClipGradNorm.load_state_dict": [[30, 32], ["clip_grad_norm.ClipGradNorm.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup.__init__": [[52, 95], ["lr_scheduler.ReduceLROnPlateauWithWarmup._init_is_better", "lr_scheduler.ReduceLROnPlateauWithWarmup._reset", "ValueError", "isinstance", "TypeError", "isinstance", "isinstance", "list", "len", "len", "ValueError", "len", "type", "len", "len"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup._init_is_better", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup._reset"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup._prepare_for_warmup": [[96, 112], ["isinstance", "list", "max", "len", "len", "ValueError", "len", "range", "float", "len", "len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup._reset": [[113, 118], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup.step": [[119, 144], ["float", "lr_scheduler.ReduceLROnPlateauWithWarmup._increase_lr", "lr_scheduler.ReduceLROnPlateauWithWarmup.is_better", "lr_scheduler.ReduceLROnPlateauWithWarmup._reduce_lr"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup._increase_lr", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup.is_better", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup._reduce_lr"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup._reduce_lr": [[145, 154], ["enumerate", "float", "max", "print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup._increase_lr": [[155, 164], ["enumerate", "float", "max", "print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup.in_cooldown": [[165, 168], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup.is_better": [[169, 183], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup._init_is_better": [[184, 200], ["lr_scheduler.ReduceLROnPlateauWithWarmup._prepare_for_warmup", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup._prepare_for_warmup"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup.state_dict": [[201, 203], ["lr_scheduler.ReduceLROnPlateauWithWarmup.__dict__.items"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup.load_state_dict": [[204, 207], ["lr_scheduler.ReduceLROnPlateauWithWarmup.__dict__.update", "lr_scheduler.ReduceLROnPlateauWithWarmup._init_is_better"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.ReduceLROnPlateauWithWarmup._init_is_better"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.__init__": [[218, 237], ["lr_scheduler.CosineAnnealingLRWithWarmup._prepare_for_warmup", "isinstance", "isinstance", "list", "len", "len", "ValueError", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup._prepare_for_warmup"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.step": [[238, 246], ["lr_scheduler.CosineAnnealingLRWithWarmup._increase_lr", "lr_scheduler.CosineAnnealingLRWithWarmup._reduce_lr"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup._increase_lr", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup._reduce_lr"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup._reduce_lr": [[247, 257], ["enumerate", "max", "float", "max", "float", "float", "print", "max", "math.cos"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup._increase_lr": [[258, 268], ["enumerate", "float", "max", "print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup._prepare_for_warmup": [[269, 285], ["isinstance", "list", "max", "len", "len", "ValueError", "len", "range", "float", "len", "len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.state_dict": [[287, 289], ["lr_scheduler.CosineAnnealingLRWithWarmup.__dict__.items"], "methods", ["None"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup.load_state_dict": [[290, 293], ["lr_scheduler.CosineAnnealingLRWithWarmup.__dict__.update", "lr_scheduler.CosineAnnealingLRWithWarmup._prepare_for_warmup"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.ema.EMA.update", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.engine.lr_scheduler.CosineAnnealingLRWithWarmup._prepare_for_warmup"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.mscoco_dataset.CocoDataset.__init__": [[15, 29], ["image_synthesis.utils.misc.instantiate_from_config", "os.path.join", "os.path.join", "json.load", "print", "print", "len", "os.path.join", "open", "len"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "phase", "=", "'train'", ",", "im_preprocessor_config", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "instantiate_from_config", "(", "im_preprocessor_config", ")", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "phase", ")", "\n", "# input_file = os.path.join(data_root, input_file)", "\n", "caption_file", "=", "\"captions_\"", "+", "phase", "+", "\"2014.json\"", "\n", "caption_file", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"annotations\"", ",", "caption_file", ")", "\n", "\n", "self", ".", "json_file", "=", "json", ".", "load", "(", "open", "(", "caption_file", ",", "'r'", ")", ")", "\n", "print", "(", "\"length of the dataset is \"", ")", "\n", "print", "(", "len", "(", "self", ".", "json_file", "[", "'annotations'", "]", ")", ")", "\n", "\n", "self", ".", "num", "=", "len", "(", "self", ".", "json_file", "[", "'annotations'", "]", ")", "\n", "self", ".", "image_prename", "=", "\"COCO_\"", "+", "phase", "+", "\"2014_\"", "\n", "self", ".", "folder_path", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "phase", "+", "'2014'", ",", "phase", "+", "'2014'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.mscoco_dataset.CocoDataset.__len__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.mscoco_dataset.CocoDataset.__getitem__": [[33, 47], ["this_item[].lower", "str().zfill", "os.path.join", "mscoco_dataset.load_img", "numpy.array().astype", "mscoco_dataset.CocoDataset.transform", "numpy.transpose", "str", "numpy.array", "numpy.array().astype.astype"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.load_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "this_item", "=", "self", ".", "json_file", "[", "'annotations'", "]", "[", "index", "]", "\n", "caption", "=", "this_item", "[", "'caption'", "]", ".", "lower", "(", ")", "\n", "image_name", "=", "str", "(", "this_item", "[", "'image_id'", "]", ")", ".", "zfill", "(", "12", ")", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "folder_path", ",", "self", ".", "image_prename", "+", "image_name", "+", "'.jpg'", ")", "\n", "image", "=", "load_img", "(", "image_path", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "self", ".", "transform", "(", "image", "=", "image", ")", "[", "'image'", "]", "\n", "data", "=", "{", "\n", "'image'", ":", "np", ".", "transpose", "(", "image", ".", "astype", "(", "np", ".", "float32", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", ",", "\n", "'text'", ":", "caption", ",", "\n", "}", "\n", "\n", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.mscoco_dataset.load_img": [[10, 13], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["def", "load_img", "(", "filepath", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "filepath", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.ffhq_dataset.FFHQDataset.__init__": [[12, 15], ["image_synthesis.utils.misc.instantiate_from_config", "torchvision.ImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "im_preprocessor_config", ")", ":", "\n", "        ", "self", ".", "img_preprocessor", "=", "instantiate_from_config", "(", "im_preprocessor_config", ")", "\n", "super", "(", "FFHQDataset", ",", "self", ")", ".", "__init__", "(", "root", "=", "data_root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.ffhq_dataset.FFHQDataset.__getitem__": [[16, 24], ["torchvision.ImageFolder.__getitem__", "ffhq_dataset.FFHQDataset.img_preprocessor", "numpy.transpose", "image.astype", "numpy.array().astype", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "# image_name = self.imgs[index][0].split('/')[-1]", "\n", "        ", "image", "=", "super", "(", "FFHQDataset", ",", "self", ")", ".", "__getitem__", "(", "index", ")", "[", "0", "]", "\n", "image", "=", "self", ".", "img_preprocessor", "(", "image", "=", "np", ".", "array", "(", "image", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "[", "'image'", "]", "\n", "data", "=", "{", "\n", "'image'", ":", "np", ".", "transpose", "(", "image", ".", "astype", "(", "np", ".", "float32", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", ",", "\n", "}", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.cub200_dataset.Cub200Dataset.__init__": [[17, 37], ["image_synthesis.utils.misc.instantiate_from_config", "os.path.join", "os.path.join", "os.path.join", "pickle.load", "len", "tqdm.tqdm.tqdm", "print", "open", "range", "os.path.join", "open", "f.readlines"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "phase", "=", "'train'", ",", "im_preprocessor_config", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "instantiate_from_config", "(", "im_preprocessor_config", ")", "\n", "self", ".", "image_folder", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "'images'", ")", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "phase", ")", "\n", "pickle_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"filenames.pickle\"", ")", "\n", "self", ".", "name_list", "=", "pickle", ".", "load", "(", "open", "(", "pickle_path", ",", "'rb'", ")", ",", "encoding", "=", "\"bytes\"", ")", "\n", "\n", "self", ".", "num", "=", "len", "(", "self", ".", "name_list", ")", "\n", "\n", "# load all caption file to dict in memory", "\n", "self", ".", "caption_dict", "=", "{", "}", "\n", "\n", "for", "index", "in", "tqdm", "(", "range", "(", "self", ".", "num", ")", ")", ":", "\n", "            ", "name", "=", "self", ".", "name_list", "[", "index", "]", "\n", "this_text_path", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "'text'", ",", "'text'", ",", "name", "+", "'.txt'", ")", "\n", "with", "open", "(", "this_text_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "caption", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "caption_dict", "[", "name", "]", "=", "caption", "\n", "\n", "", "print", "(", "\"load caption file done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.cub200_dataset.Cub200Dataset.__len__": [[39, 41], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.cub200_dataset.Cub200Dataset.__getitem__": [[42, 57], ["os.path.join", "cub200_dataset.load_img", "numpy.array().astype", "random.choice().replace().lower", "cub200_dataset.Cub200Dataset.transform", "numpy.transpose", "numpy.array", "random.choice().replace", "numpy.array().astype.astype", "random.choice"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.load_img"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "name", "=", "self", ".", "name_list", "[", "index", "]", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_folder", ",", "name", "+", "'.jpg'", ")", "\n", "image", "=", "load_img", "(", "image_path", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "self", ".", "transform", "(", "image", "=", "image", ")", "[", "'image'", "]", "\n", "caption_list", "=", "self", ".", "caption_dict", "[", "name", "]", "\n", "caption", "=", "random", ".", "choice", "(", "caption_list", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "lower", "(", ")", "\n", "\n", "data", "=", "{", "\n", "'image'", ":", "np", ".", "transpose", "(", "image", ".", "astype", "(", "np", ".", "float32", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", ",", "\n", "'text'", ":", "caption", ",", "\n", "}", "\n", "\n", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.cub200_dataset.load_img": [[12, 15], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["def", "load_img", "(", "filepath", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "filepath", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.build.build_dataloader": [[7, 76], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset_cfg.get", "image_synthesis.utils.misc.instantiate_from_config", "torch.utils.data.ConcatDataset.append", "len", "torch.utils.data.ConcatDataset", "dataset_cfg.get", "image_synthesis.utils.misc.instantiate_from_config", "torch.utils.data.ConcatDataset.append", "len", "torch.utils.data.ConcatDataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.MetaDB.get", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config"], []], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__init__": [[15, 35], ["image_synthesis.utils.misc.instantiate_from_config", "os.path.join", "os.path.join", "json.load", "range", "len", "len", "open", "open", "f.readlines", "imagenet_dataset.ImageNetDataset.A_paths.append", "imagenet_dataset.ImageNetDataset.A_labels.append", "os.path.join", "path.strip", "path.split", "str"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.misc.instantiate_from_config", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.clip.clip.load", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "input_file", ",", "phase", "=", "'train'", ",", "im_preprocessor_config", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "instantiate_from_config", "(", "im_preprocessor_config", ")", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "phase", ")", "\n", "input_file", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "input_file", ")", "\n", "\n", "temp_label", "=", "json", ".", "load", "(", "open", "(", "'image_synthesis/data/imagenet_class_index.json'", ",", "'r'", ")", ")", "\n", "self", ".", "labels", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "            ", "self", ".", "labels", "[", "temp_label", "[", "str", "(", "i", ")", "]", "[", "0", "]", "]", "=", "i", "\n", "", "self", ".", "A_paths", "=", "[", "]", "\n", "self", ".", "A_labels", "=", "[", "]", "\n", "with", "open", "(", "input_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "temp_path", "=", "f", ".", "readlines", "(", ")", "\n", "", "for", "path", "in", "temp_path", ":", "\n", "            ", "label", "=", "self", ".", "labels", "[", "path", ".", "split", "(", "'/'", ")", "[", "0", "]", "]", "\n", "self", ".", "A_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "path", ".", "strip", "(", ")", ")", ")", "\n", "self", ".", "A_labels", ".", "append", "(", "label", ")", "\n", "\n", "", "self", ".", "num", "=", "len", "(", "self", ".", "A_paths", ")", "\n", "self", ".", "A_size", "=", "len", "(", "self", ".", "A_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__len__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__getitem__": [[39, 44], ["imagenet_dataset.ImageNetDataset.load_img", "imagenet_dataset.ImageNetDataset.__getitem__", "random.randint", "imagenet_dataset.ImageNetDataset.__len__"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.load_img", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__getitem__", "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.__len__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "load_img", "(", "index", ")", "\n", "", "except", ":", "\n", "            ", "return", "self", ".", "__getitem__", "(", "random", ".", "randint", "(", "0", ",", "self", ".", "__len__", "(", ")", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.ImageNetDataset.load_img": [[45, 56], ["imagenet_dataset.ImageNetDataset.load_img"], "methods", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.load_img"], ["", "", "def", "load_img", "(", "self", ",", "index", ")", ":", "\n", "        ", "A_path", "=", "self", ".", "A_paths", "[", "index", "%", "self", ".", "A_size", "]", "\n", "A", "=", "load_img", "(", "A_path", ")", "\n", "# if self.transform is not None:", "\n", "A", "=", "self", ".", "transform", "(", "A", ")", "[", "'image'", "]", "\n", "A_label", "=", "self", ".", "A_labels", "[", "index", "%", "self", ".", "A_size", "]", "\n", "data", "=", "{", "\n", "'image'", ":", "np", ".", "transpose", "(", "A", ".", "astype", "(", "np", ".", "float32", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", ",", "\n", "'label'", ":", "A_label", ",", "\n", "}", "\n", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cientgu_vq-diffusion.data.imagenet_dataset.load_img": [[10, 13], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.cientgu_vq-diffusion.utils.manage.KVReader.open"], ["def", "load_img", "(", "filepath", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "filepath", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "img", "\n", "\n"]]}