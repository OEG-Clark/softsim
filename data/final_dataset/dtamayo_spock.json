{"home.repos.pwc.inspect_result.dtamayo_spock.generate_training_data.generate_metadata.labels": [[16, 44], ["rebound.SimulationArchive", "rebound.Simulation", "print", "rebound.Simulation", "print", "rebound.SimulationArchive"], "function", ["None"], ["", "def", "labels", "(", "row", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "sa", "=", "rebound", ".", "SimulationArchive", "(", "pathtosa", "+", "'sa'", "+", "row", "[", "'runstring'", "]", ")", "\n", "sim", "=", "sa", "[", "0", "]", "\n", "P1", "=", "sim", ".", "particles", "[", "1", "]", ".", "P", "# Need initial orbital period for TTVsystems, where P1 != 1", "\n", "\n", "try", ":", "# Needed for old integrations (random and Naireen) because no snapshot on end", "\n", "            ", "sim", "=", "rebound", ".", "Simulation", "(", "pathtosa", "+", "'../../final_conditions/runs/fc'", "+", "row", "[", "'runstring'", "]", ")", "\n", "row", "[", "'instability_time'", "]", "=", "sim", ".", "t", "/", "P1", "\n", "try", ":", "\n", "                ", "ssim", "=", "rebound", ".", "Simulation", "(", "pathtossa", "+", "'../../final_conditions/shadowruns/fc'", "+", "row", "[", "'runstring'", "]", ")", "\n", "row", "[", "'shadow_instability_time'", "]", "=", "ssim", ".", "t", "/", "P1", "\n", "", "except", ":", "\n", "                ", "print", "(", "'No shadow for random {0}'", ".", "format", "(", "row", "[", "'runstring'", "]", ")", ")", "\n", "", "", "except", ":", "# New runs (resonant and Ari) have snapshots at collision", "\n", "            ", "sim", "=", "sa", "[", "-", "1", "]", "\n", "if", "sim", ".", "t", ">", "9.99e3", "and", "sim", ".", "t", "<", "1.0001e4", ":", "# catch all stable integrations accidentally thrown out. Have checked this catches all thrown out, and doesn't catch any with actual  instability times in this range", "\n", "                ", "row", "[", "'instability_time'", "]", "=", "1e9", "\n", "row", "[", "'shadow_instability_time'", "]", "=", "1e9", "\n", "", "else", ":", "\n", "                ", "row", "[", "'instability_time'", "]", "=", "sim", ".", "t", "/", "P1", "\n", "ssa", "=", "rebound", ".", "SimulationArchive", "(", "pathtossa", "+", "'sa'", "+", "row", "[", "'runstring'", "]", ")", "\n", "ssim", "=", "ssa", "[", "-", "1", "]", "\n", "row", "[", "'shadow_instability_time'", "]", "=", "ssim", ".", "t", "/", "P1", "\n", "", "", "row", "[", "'Stable'", "]", "=", "row", "[", "'instability_time'", "]", ">", "9.99e8", "\n", "", "except", ":", "\n", "        ", "print", "(", "'Error'", ",", "pathtosa", "+", "'sa'", "+", "row", "[", "'runstring'", "]", ")", "\n", "", "return", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.generate_training_data.generate_metadata.massratios": [[45, 55], ["rebound.SimulationArchive", "print"], "function", ["None"], ["", "def", "massratios", "(", "row", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "sa", "=", "rebound", ".", "SimulationArchive", "(", "pathtosa", "+", "'sa'", "+", "row", "[", "'runstring'", "]", ")", "\n", "sim", "=", "sa", "[", "0", "]", "\n", "row", "[", "'m1'", "]", "=", "sim", ".", "particles", "[", "1", "]", ".", "m", "/", "sim", ".", "particles", "[", "0", "]", ".", "m", "\n", "row", "[", "'m2'", "]", "=", "sim", ".", "particles", "[", "2", "]", ".", "m", "/", "sim", ".", "particles", "[", "0", "]", ".", "m", "\n", "row", "[", "'m3'", "]", "=", "sim", ".", "particles", "[", "3", "]", ".", "m", "/", "sim", ".", "particles", "[", "0", "]", ".", "m", "\n", "", "except", ":", "\n", "        ", "print", "(", "pathtosa", "+", "'sa'", "+", "row", "[", "'runstring'", "]", ")", "\n", "", "return", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.generate_training_data.generate_metadata.ttvsystems": [[56, 59], ["None"], "function", ["None"], ["", "def", "ttvsystems", "(", ")", ":", "\n", "    ", "folders", "=", "[", "'KOI-1576'", "]", "\n", "return", "[", "'TTVsystems/'", "+", "folder", "for", "folder", "in", "folders", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.generate_training_data.generate_metadata.nonressystems": [[60, 63], ["None"], "function", ["None"], ["", "def", "nonressystems", "(", ")", ":", "\n", "    ", "folders", "=", "[", "'Kepler-431'", "]", "\n", "return", "[", "'nonressystems/'", "+", "folder", "for", "folder", "in", "folders", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.generate_training_data.training_data_functions.training_data": [[7, 25], ["spock.simsetup.init_sim_parameters", "pandas.Series", "rebound.SimulationArchive", "runfunc", "print", "print", "list", "r.keys"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.init_sim_parameters"], ["def", "training_data", "(", "row", ",", "safolder", ",", "runfunc", ",", "args", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "sa", "=", "rebound", ".", "SimulationArchive", "(", "safolder", "+", "'sa'", "+", "row", "[", "'runstring'", "]", ")", "\n", "sim", "=", "sa", "[", "0", "]", "\n", "", "except", ":", "\n", "        ", "print", "(", "\"training_data_functions.py Error reading \"", "+", "safolder", "+", "'sa'", "+", "row", "[", "'runstring'", "]", ")", "\n", "return", "None", "\n", "\n", "", "init_sim_parameters", "(", "sim", ")", "\n", "\n", "try", ":", "\n", "        ", "ret", ",", "stable", "=", "runfunc", "(", "sim", ",", "args", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "'{0} failed'", ".", "format", "(", "row", "[", "'runstring'", "]", ")", ")", "\n", "return", "None", "\n", "\n", "", "r", "=", "ret", "[", "0", "]", "# all runfuncs return list of features for all adjacent trios (to not rerun for each). For training assume it's always 3 planets so list of 1 trio", "\n", "return", "pd", ".", "Series", "(", "r", ",", "index", "=", "list", "(", "r", ".", "keys", "(", ")", ")", ")", "# conert OrderedDict to pandas Series", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.generate_training_data.training_data_functions.gen_training_data": [[26, 35], ["pandas.read_csv", "dask.from_pandas", "training_data_functions.training_data", "pandas.DataFrame", "dd.from_pandas.apply().compute", "ddf.apply().compute.to_csv", "dd.from_pandas.apply"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.generate_training_data.training_data_functions.training_data"], ["", "def", "gen_training_data", "(", "outputfolder", ",", "safolder", ",", "runfunc", ",", "args", ")", ":", "\n", "# assumes runfunc returns a pandas Series of features, and whether it was stable in short integration. See features fucntion in spock/feature_functions.py for example", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "outputfolder", "+", "\"/runstrings.csv\"", ",", "index_col", "=", "0", ")", "\n", "ddf", "=", "dd", ".", "from_pandas", "(", "df", ",", "npartitions", "=", "48", ")", "\n", "testres", "=", "training_data", "(", "df", ".", "loc", "[", "0", "]", ",", "safolder", ",", "runfunc", ",", "args", ")", "# Choose formatting based on selected runfunc return type", "\n", "\n", "metadf", "=", "pd", ".", "DataFrame", "(", "[", "testres", "]", ")", "# make single row dataframe to autodetect meta", "\n", "res", "=", "ddf", ".", "apply", "(", "training_data", ",", "axis", "=", "1", ",", "meta", "=", "metadf", ",", "args", "=", "(", "safolder", ",", "runfunc", ",", "args", ")", ")", ".", "compute", "(", "scheduler", "=", "'processes'", ")", "\n", "res", ".", "to_csv", "(", "outputfolder", "+", "'/trainingdata.csv'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.logunif": [[13, 17], ["numpy.log10", "numpy.log10", "r.uniform"], "function", ["None"], ["def", "logunif", "(", "r", ",", "mini", ",", "maxi", ")", ":", "\n", "    ", "logmin", "=", "np", ".", "log10", "(", "mini", ")", "\n", "logmax", "=", "np", ".", "log10", "(", "maxi", ")", "\n", "return", "10", "**", "(", "r", ".", "uniform", "(", "logmin", ",", "logmax", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.get_resonant": [[18, 143], ["random.random.Random", "random.Random.seed", "random.Random.randint", "random.Random.randint", "runfunctions.logunif", "runfunctions.logunif", "max", "int", "int", "random.Random.randrange", "max", "max", "min", "celmech.Andoyer", "celmech.andoyer.get_Xstarres", "max", "runfunctions.logunif", "runfunctions.logunif", "random.Random.randint", "runfunctions.logunif", "celmech.Andoyer.from_elements", "random.Random.uniform", "celmech.AndoyerHamiltonian", "celmech.AndoyerHamiltonian.integrate", "Andoyer.from_elements.to_Poincare", "rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.move_to_com", "numpy.ceil", "numpy.floor", "Andoyer.from_elements.Phi_to_Z", "runfunctions.logunif", "celmech.Poincare", "celmech.Poincare.to_Simulation", "Andoyer.from_elements.to_Simulation", "rebound.Simulation.add", "float", "random.Random.uniform", "random.Random.uniform", "random.Random.uniform", "random.Random.uniform", "runfunctions.logunif", "celmech.Poincare.add", "celmech.Poincare.add", "celmech.Poincare.add", "random.Random.uniform", "runfunctions.logunif", "celmech.Poincare.add", "celmech.Poincare.add", "celmech.Poincare.add", "runfunctions.logunif", "random.Random.uniform", "numpy.sqrt", "random.Random.uniform", "random.Random.uniform", "min", "random.Random.uniform", "min", "max", "runfunctions.logunif", "celmech.Poincare.add", "celmech.Poincare.add", "celmech.Poincare.add", "random.Random.uniform", "random.Random.uniform", "runfunctions.get_resonant", "random.Random.uniform", "random.Random.uniform", "random.seed", "random.seed", "random.seed"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.logunif", "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.logunif", "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.logunif", "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.logunif", "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.logunif", "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.logunif", "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.logunif", "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.logunif", "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.logunif", "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.logunif", "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.get_resonant"], ["", "def", "get_resonant", "(", "seed", ",", "Nplanets", "=", "3", ")", ":", "\n", "    ", "r", "=", "random", ".", "Random", "(", ")", "\n", "r", ".", "seed", "(", "seed", ")", "\n", "\n", "Phiprimecrits", "=", "[", "0", ",", "1.", ",", "-", "2.", "/", "3.", "]", "\n", "pairs", "=", "[", "'inner'", ",", "'outer'", ",", "'split'", "]", "\n", "\n", "k", "=", "r", ".", "randint", "(", "1", ",", "2", ")", "\n", "pairindex", "=", "r", ".", "randint", "(", "0", ",", "2", ")", "\n", "pair", "=", "pairs", "[", "pairindex", "]", "\n", "m1", "=", "logunif", "(", "r", ",", "1.e-7", ",", "1.e-4", ")", "\n", "m2", "=", "logunif", "(", "r", ",", "1.e-7", ",", "1.e-4", ")", "\n", "eH", "=", "(", "(", "m1", "+", "m2", ")", "/", "3.", ")", "**", "(", "1.", "/", "3.", ")", "\n", "ehillstable", "=", "3.5", "*", "eH", "\n", "jmax", "=", "k", "/", "(", "1", "-", "1", "/", "(", "1", "+", "3.5", "*", "eH", ")", "**", "1.5", ")", "\n", "if", "pair", "==", "'split'", ":", "\n", "        ", "if", "Nplanets", "==", "2", ":", "\n", "            ", "return", "# don't want 2planet systems 60 hill radii apart", "\n", "", "maxHillradii", "=", "60.", "# 3rd planet will go in middle so draw up to 60", "\n", "", "else", ":", "\n", "        ", "maxHillradii", "=", "30.", "\n", "", "jmin", "=", "max", "(", "k", "+", "1", ",", "k", "/", "(", "1", "-", "1", "/", "(", "1", "+", "maxHillradii", "*", "eH", ")", "**", "1.5", ")", ")", "\n", "jmin", "=", "int", "(", "np", ".", "ceil", "(", "jmin", ")", ")", "\n", "jmax", "=", "int", "(", "np", ".", "floor", "(", "jmax", ")", ")", "\n", "if", "k", "==", "2", ":", "# if k = 2, want odd j so we don't get e.g. 8:6 = 4:3", "\n", "        ", "if", "jmin", "%", "2", "==", "0", ":", "# even", "\n", "            ", "jmin", "+=", "1", "\n", "", "if", "jmax", "%", "2", "==", "0", ":", "\n", "            ", "jmax", "-=", "1", "\n", "", "", "j", "=", "r", ".", "randrange", "(", "jmin", ",", "jmax", "+", "1", ",", "k", ")", "# choose randomly between limits in steps of k e.g. (3,5,7,9)", "\n", "a1", "=", "1.", "\n", "a2", "=", "(", "float", "(", "j", ")", "/", "(", "j", "-", "k", ")", ")", "**", "(", "2.", "/", "3.", ")", "\n", "ecross1", "=", "(", "a2", "-", "a1", ")", "/", "a1", "\n", "ecross2", "=", "(", "a2", "-", "a1", ")", "/", "a2", "\n", "emin1", "=", "m2", "/", "ecross1", "**", "2", "\n", "emin2", "=", "m1", "/", "ecross2", "**", "2", "\n", "emin", "=", "max", "(", "emin1", ",", "emin2", ")", "# take as min Z the larger of the kicks a planet gets at conjunction       ", "\n", "emin", "=", "max", "(", "emin", ",", "(", "m1", "+", "m2", ")", "**", "(", "1.", "/", "k", ")", ")", "# below mtot^1/k, the resonant term is smaller than the second order mass terms we ignore", "\n", "emax", "=", "min", "(", "ecross1", ",", "ecross2", ")", "\n", "\n", "avars", "=", "Andoyer", "(", "j", "=", "j", ",", "k", "=", "k", ",", "X", "=", "0", ",", "Y", "=", "0", ",", "m1", "=", "m1", ",", "m2", "=", "m2", ")", "\n", "Phiprimecrit", "=", "Phiprimecrits", "[", "k", "]", "\n", "Xcrit", "=", "get_Xstarres", "(", "k", ",", "Phiprimecrit", ")", "\n", "Phicrit", "=", "0.5", "*", "Xcrit", "**", "2", "\n", "emin", "=", "max", "(", "avars", ".", "Phi_to_Z", "(", "Phicrit", ")", ",", "emin", ")", "# first quantity is value of Z at bifurcation when res first appears", "\n", "\n", "Zstar", "=", "logunif", "(", "r", ",", "emin", ",", "emax", ")", "\n", "libfac", "=", "logunif", "(", "r", ",", "3.e-3", ",", "3", ")", "\n", "negative", "=", "r", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "negative", ":", "\n", "        ", "libfac", "*=", "-", "1", "\n", "\n", "", "Zcom", "=", "logunif", "(", "r", ",", "emin", ",", "emax", ")", "\n", "avars", "=", "Andoyer", ".", "from_elements", "(", "j", "=", "j", ",", "k", "=", "k", ",", "Zstar", "=", "Zstar", ",", "libfac", "=", "libfac", ",", "m1", "=", "m1", ",", "m2", "=", "m2", ",", "Zcom", "=", "Zcom", ",", "phiZcom", "=", "r", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ",", "theta", "=", "r", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ",", "theta1", "=", "r", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ")", "\n", "tmax", "=", "r", ".", "uniform", "(", "0", ",", "10", "*", "avars", ".", "tlib", ")", "\n", "H", "=", "AndoyerHamiltonian", "(", "avars", ")", "\n", "H", ".", "integrate", "(", "tmax", ")", "\n", "pvars", "=", "avars", ".", "to_Poincare", "(", ")", "\n", "ps", "=", "pvars", ".", "particles", "\n", "if", "Nplanets", "==", "3", ":", "\n", "        ", "m3", "=", "logunif", "(", "r", ",", "1.e-7", ",", "1.e-4", ")", "\n", "pvarssorted", "=", "Poincare", "(", "G", "=", "pvars", ".", "G", ")", "\n", "\n", "if", "pair", "==", "\"inner\"", ":", "\n", "            ", "eH", "=", "(", "(", "m2", "+", "m3", ")", "/", "3.", ")", "**", "(", "1.", "/", "3.", ")", "\n", "beta", "=", "r", ".", "uniform", "(", "3.5", ",", "30", ")", "\n", "a3", "=", "a2", "*", "(", "1", "+", "beta", "*", "eH", ")", "\n", "ecross3", "=", "(", "a3", "-", "a2", ")", "/", "a3", "\n", "emin3", "=", "m2", "/", "ecross3", "**", "2", "\n", "e3", "=", "logunif", "(", "r", ",", "emin3", ",", "ecross3", ")", "\n", "pvarssorted", ".", "add", "(", "m", "=", "ps", "[", "1", "]", ".", "m", ",", "M", "=", "ps", "[", "1", "]", ".", "M", ",", "a", "=", "ps", "[", "1", "]", ".", "a", ",", "e", "=", "ps", "[", "1", "]", ".", "e", ",", "gamma", "=", "ps", "[", "1", "]", ".", "gamma", ",", "l", "=", "ps", "[", "1", "]", ".", "l", ")", "\n", "pvarssorted", ".", "add", "(", "m", "=", "ps", "[", "2", "]", ".", "m", ",", "M", "=", "ps", "[", "2", "]", ".", "M", ",", "a", "=", "ps", "[", "2", "]", ".", "a", ",", "e", "=", "ps", "[", "2", "]", ".", "e", ",", "gamma", "=", "ps", "[", "2", "]", ".", "gamma", ",", "l", "=", "ps", "[", "2", "]", ".", "l", ")", "\n", "pvarssorted", ".", "add", "(", "m", "=", "m3", ",", "M", "=", "1", ",", "a", "=", "a3", ",", "e", "=", "e3", ",", "gamma", "=", "r", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ",", "l", "=", "r", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ")", "\n", "\n", "", "elif", "pair", "==", "\"outer\"", ":", "\n", "            ", "eH", "=", "(", "(", "m1", "+", "m3", ")", "/", "3.", ")", "**", "(", "1.", "/", "3.", ")", "\n", "beta", "=", "r", ".", "uniform", "(", "3.5", ",", "30", ")", "\n", "a3", "=", "a1", "/", "(", "1", "+", "beta", "*", "eH", ")", "\n", "ecross3", "=", "(", "a1", "-", "a3", ")", "/", "a3", "\n", "emin3", "=", "m1", "/", "ecross3", "**", "2", "\n", "e3", "=", "logunif", "(", "r", ",", "emin3", ",", "ecross3", ")", "\n", "pvarssorted", ".", "add", "(", "m", "=", "m3", ",", "M", "=", "1", ",", "a", "=", "a3", ",", "e", "=", "e3", ",", "gamma", "=", "r", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ",", "l", "=", "r", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ")", "\n", "pvarssorted", ".", "add", "(", "m", "=", "ps", "[", "1", "]", ".", "m", ",", "M", "=", "ps", "[", "1", "]", ".", "M", ",", "a", "=", "ps", "[", "1", "]", ".", "a", ",", "e", "=", "ps", "[", "1", "]", ".", "e", ",", "gamma", "=", "ps", "[", "1", "]", ".", "gamma", ",", "l", "=", "ps", "[", "1", "]", ".", "l", ")", "\n", "pvarssorted", ".", "add", "(", "m", "=", "ps", "[", "2", "]", ".", "m", ",", "M", "=", "ps", "[", "2", "]", ".", "M", ",", "a", "=", "ps", "[", "2", "]", ".", "a", ",", "e", "=", "ps", "[", "2", "]", ".", "e", ",", "gamma", "=", "ps", "[", "2", "]", ".", "gamma", ",", "l", "=", "ps", "[", "2", "]", ".", "l", ")", "\n", "\n", "", "elif", "pair", "==", "\"split\"", ":", "\n", "            ", "eH1", "=", "(", "(", "m1", "+", "m3", ")", "/", "3.", ")", "**", "(", "1.", "/", "3.", ")", "\n", "eH2", "=", "(", "(", "m2", "+", "m3", ")", "/", "3.", ")", "**", "(", "1.", "/", "3.", ")", "\n", "amin", "=", "a1", "*", "(", "1", "+", "3.5", "*", "eH1", ")", "\n", "amax", "=", "min", "(", "a1", "*", "(", "1", "+", "30", "*", "eH1", ")", ",", "a2", "/", "(", "1", "+", "3.5", "*", "eH2", ")", ")", "\n", "if", "amin", ">", "amax", ":", "\n", "                ", "seed", "+=", "900000", "\n", "return", "get_resonant", "(", "seed", "=", "seed", ")", "# draw new sample (may not be 'split')", "\n", "", "a3", "=", "r", ".", "uniform", "(", "amin", ",", "amax", ")", "\n", "ecross3", "=", "min", "(", "(", "a3", "-", "a1", ")", "/", "a1", ",", "(", "a2", "-", "a3", ")", "/", "a3", ")", "\n", "emin3", "=", "max", "(", "m1", "/", "(", "(", "a3", "-", "a1", ")", "/", "a3", ")", "**", "2", ",", "m2", "/", "(", "(", "a2", "-", "a3", ")", "/", "a3", ")", "**", "2", ")", "\n", "e3", "=", "logunif", "(", "r", ",", "emin3", ",", "ecross3", ")", "\n", "pvarssorted", ".", "add", "(", "m", "=", "ps", "[", "1", "]", ".", "m", ",", "M", "=", "ps", "[", "1", "]", ".", "M", ",", "a", "=", "ps", "[", "1", "]", ".", "a", ",", "e", "=", "ps", "[", "1", "]", ".", "e", ",", "gamma", "=", "ps", "[", "1", "]", ".", "gamma", ",", "l", "=", "ps", "[", "1", "]", ".", "l", ")", "\n", "pvarssorted", ".", "add", "(", "m", "=", "m3", ",", "M", "=", "1", ",", "a", "=", "a3", ",", "e", "=", "e3", ",", "gamma", "=", "r", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ",", "l", "=", "r", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ")", "\n", "pvarssorted", ".", "add", "(", "m", "=", "ps", "[", "2", "]", ".", "m", ",", "M", "=", "ps", "[", "2", "]", ".", "M", ",", "a", "=", "ps", "[", "2", "]", ".", "a", ",", "e", "=", "ps", "[", "2", "]", ".", "e", ",", "gamma", "=", "ps", "[", "2", "]", ".", "gamma", ",", "l", "=", "ps", "[", "2", "]", ".", "l", ")", "\n", "\n", "", "sim", "=", "pvarssorted", ".", "to_Simulation", "(", ")", "\n", "", "else", ":", "\n", "        ", "sim", "=", "avars", ".", "to_Simulation", "(", ")", "\n", "# add inclinations and scale s.t. a1 = 1, Mprimary=1. and G = 4*pi**2", "\n", "", "ps", "=", "sim", ".", "particles", "\n", "\n", "siminc", "=", "rebound", ".", "Simulation", "(", ")", "\n", "siminc", ".", "G", "=", "4", "*", "np", ".", "pi", "**", "2", "\n", "\n", "dscale", "=", "ps", "[", "1", "]", ".", "a", "\n", "tscale", "=", "ps", "[", "1", "]", ".", "P", "\n", "mscale", "=", "siminc", ".", "G", "*", "dscale", "**", "3", "/", "tscale", "**", "2", "# ps[0].m + ps[1].m", "\n", "\n", "siminc", ".", "add", "(", "m", "=", "ps", "[", "0", "]", ".", "m", "/", "mscale", ",", "x", "=", "ps", "[", "0", "]", ".", "x", "/", "dscale", ",", "y", "=", "ps", "[", "0", "]", ".", "y", "/", "dscale", ",", "vx", "=", "ps", "[", "0", "]", ".", "vx", "/", "dscale", "*", "tscale", ",", "vy", "=", "ps", "[", "0", "]", ".", "vy", "/", "dscale", "*", "tscale", ")", "\n", "for", "p", "in", "ps", "[", "1", ":", "]", ":", "\n", "        ", "siminc", ".", "add", "(", "m", "=", "p", ".", "m", "/", "mscale", ",", "a", "=", "p", ".", "a", "/", "dscale", ",", "e", "=", "p", ".", "e", ",", "inc", "=", "logunif", "(", "r", ",", "1.e-3", ",", "1.e-1", ")", ",", "Omega", "=", "r", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", ",", "pomega", "=", "p", ".", "pomega", ",", "l", "=", "p", ".", "l", ")", "\n", "rH", "=", "siminc", ".", "particles", "[", "-", "1", "]", ".", "a", "*", "(", "siminc", ".", "particles", "[", "-", "1", "]", ".", "m", "/", "3.", "/", "siminc", ".", "particles", "[", "0", "]", ".", "m", ")", "**", "(", "1.", "/", "3.", ")", "\n", "siminc", ".", "particles", "[", "-", "1", "]", ".", "r", "=", "rH", "\n", "", "siminc", ".", "move_to_com", "(", ")", "\n", "siminc", ".", "integrator", "=", "\"whfast\"", "\n", "siminc", ".", "dt", "=", "2.", "*", "np", ".", "sqrt", "(", "3", ")", "/", "100.", "*", "siminc", ".", "particles", "[", "1", "]", ".", "P", "\n", "siminc", ".", "ri_whfast", ".", "safe_mode", "=", "0", "\n", "siminc", ".", "collision", "=", "\"line\"", "\n", "return", "siminc", ",", "j", ",", "k", ",", "pairindex", ",", "Zstar", ",", "libfac", ",", "Zcom", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.run_resonant": [[144, 168], ["runfunctions.get_resonant", "print", "sim.automateSimulationArchive", "sim.integrate", "runfunctions.get_resonant", "sim.integrate", "sim.simulationarchive_snapshot"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.get_resonant", "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.get_resonant"], ["", "def", "run_resonant", "(", "seed", ",", "runstr", ",", "Nplanets", "=", "3", ",", "maxorbs", "=", "1.e9", ",", "shadow", "=", "False", ")", ":", "\n", "    ", "originalseed", "=", "seed", "\n", "success", "=", "False", "\n", "while", "not", "success", ":", "\n", "        ", "try", ":", "\n", "            ", "sim", ",", "j", ",", "k", ",", "pairindex", ",", "Zstar", ",", "libfac", ",", "Zcom", "=", "get_resonant", "(", "seed", ",", "Nplanets", ")", "\n", "sim", ".", "integrate", "(", "1.e4", "*", "sim", ".", "particles", "[", "1", "]", ".", "P", ")", "\n", "success", "=", "True", "\n", "", "except", "rebound", ".", "Collision", ":", "\n", "            ", "seed", "+=", "700000", "# roughly relatively prime with amin > amax offset above", "\n", "", "", "sim", ",", "j", ",", "k", ",", "pairindex", ",", "Zstar", ",", "libfac", ",", "Zcom", "=", "get_resonant", "(", "seed", ",", "Nplanets", ")", "# get same sim", "\n", "print", "(", "'{0}, {1}, {2}, {3}, {4}, {5:8e}, {6:8e}, {7:8e}\\n'", ".", "format", "(", "originalseed", ",", "seed", ",", "pairindex", ",", "j", ",", "k", ",", "Zstar", ",", "libfac", ",", "Zcom", ")", ")", "\n", "if", "shadow", ":", "\n", "        ", "shadowstr", "=", "'shadow'", "\n", "kicksize", "=", "1.e-11", "\n", "sim", ".", "particles", "[", "2", "]", ".", "x", "+=", "kicksize", "\n", "", "else", ":", "\n", "        ", "shadowstr", "=", "''", "\n", "", "filename", "=", "'../data/resonant/simulation_archives/'", "+", "shadowstr", "+", "'runs/sa'", "+", "runstr", "\n", "sim", ".", "automateSimulationArchive", "(", "filename", ",", "interval", "=", "maxorbs", "/", "1000.", ",", "deletefile", "=", "True", ")", "\n", "try", ":", "\n", "        ", "sim", ".", "integrate", "(", "maxorbs", "*", "sim", ".", "particles", "[", "1", "]", ".", "P", ")", "\n", "", "except", "rebound", ".", "Collision", ":", "\n", "        ", "sim", ".", "simulationarchive_snapshot", "(", "filename", ")", "# save final snapshot if collision occurs", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.run_resonant_condition": [[169, 185], ["runfunctions.get_resonant", "conditionfunc", "sim.automateSimulationArchive", "sim.integrate", "sim.simulationarchive_snapshot"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.get_resonant"], ["", "", "def", "run_resonant_condition", "(", "seed", ",", "runstr", ",", "conditionfunc", ",", "Nplanets", "=", "3", ",", "maxorbs", "=", "1.e9", ",", "shadow", "=", "False", ")", ":", "\n", "    ", "originalseed", "=", "seed", "\n", "sim", ",", "j", ",", "k", ",", "pairindex", ",", "Zstar", ",", "libfac", ",", "Zcom", "=", "get_resonant", "(", "seed", ",", "Nplanets", ")", "\n", "if", "conditionfunc", "(", "sim", ")", ":", "\n", "        ", "if", "shadow", ":", "\n", "            ", "shadowstr", "=", "'shadow'", "\n", "kicksize", "=", "1.e-11", "\n", "sim", ".", "particles", "[", "2", "]", ".", "x", "+=", "kicksize", "\n", "", "else", ":", "\n", "            ", "shadowstr", "=", "''", "\n", "", "filename", "=", "'../data/resonant/simulation_archives/'", "+", "shadowstr", "+", "'runs/sa'", "+", "runstr", "\n", "sim", ".", "automateSimulationArchive", "(", "filename", ",", "interval", "=", "maxorbs", "/", "1000.", ",", "deletefile", "=", "True", ")", "\n", "try", ":", "\n", "            ", "sim", ".", "integrate", "(", "maxorbs", "*", "sim", ".", "particles", "[", "1", "]", ".", "P", ")", "\n", "", "except", "rebound", ".", "Collision", ":", "\n", "            ", "sim", ".", "simulationarchive_snapshot", "(", "filename", ")", "# save final snapshot if collision occurs", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.collision": [[186, 189], ["None"], "function", ["None"], ["", "", "", "def", "collision", "(", "reb_sim", ",", "col", ")", ":", "\n", "    ", "reb_sim", ".", "contents", ".", "_status", "=", "5", "# causes simulation to stop running and have flag for whether sim stopped due to collision", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.run_integrations.runfunctions.run_random": [[190, 290], ["numpy.log10", "numpy.log10", "numpy.log10", "numpy.log10", "random.seed", "random.uniform", "random.uniform", "min", "numpy.log10", "numpy.log10", "numpy.log10", "numpy.log10", "numpy.log10", "numpy.log10", "min", "min", "min", "rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.move_to_com", "rebound.Simulation.calculate_energy", "time.time", "rebound.Simulation.integrate", "rebound.Simulation.calculate_energy", "abs", "random.uniform", "random.uniform", "random.uniform", "min", "max", "random.uniform", "random.uniform", "random.uniform", "rebound.Simulation.save", "rebound.Simulation.initSimulationArchive", "rebound.Simulation.save", "random.uniform", "random.uniform", "random.uniform", "time.time", "math.sqrt", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random"], "function", ["None"], ["", "def", "run_random", "(", "sim_id", ",", "integrator", "=", "\"whfast\"", ",", "dt", "=", "None", ",", "maxorbs", "=", "1.e9", ",", "betamin", "=", "1.", ",", "betamax", "=", "30.", ",", "shadow", "=", "False", ",", "runstr", "=", "None", ")", ":", "\n", "    ", "if", "dt", "is", "None", ":", "\n", "        ", "dt", "=", "2.", "*", "math", ".", "sqrt", "(", "3", ")", "/", "100.", "# dt approx 3.5 % of innermost orbital period", "\n", "\n", "", "datapath", "=", "'../data/random/'", "\n", "\n", "a1", "=", "1.", "# All distances in units of the innermost semimajor axis (always at 1)", "\n", "Mstar", "=", "1.", "# All masses in units of stellar mass", "\n", "\n", "logMmin", "=", "np", ".", "log10", "(", "1.e-7", ")", "# 1/3 Mars around Sun", "\n", "logMmax", "=", "np", ".", "log10", "(", "1.e-4", ")", "# 2 Nep around Sun", "\n", "logincmin", "=", "np", ".", "log10", "(", "1.e-3", ")", "\n", "logincmax", "=", "np", ".", "log10", "(", "1.e-1", ")", "# max mutual inclination of 11.4 degrees. Absolute of 5.7 deg", "\n", "\n", "seed", "(", "sim_id", ")", "\n", "\n", "M1", "=", "10.", "**", "uniform", "(", "logMmin", ",", "logMmax", ")", "\n", "M2", "=", "10.", "**", "uniform", "(", "logMmin", ",", "logMmax", ")", "\n", "M3", "=", "10.", "**", "uniform", "(", "logMmin", ",", "logMmax", ")", "\n", "\n", "hill12", "=", "a1", "*", "(", "(", "M1", "+", "M2", ")", "/", "3.", ")", "**", "(", "1.", "/", "3.", ")", "\n", "beta1", "=", "uniform", "(", "betamin", ",", "betamax", ")", "\n", "a2", "=", "a1", "+", "beta1", "*", "hill12", "\n", "\n", "hill23", "=", "a2", "*", "(", "(", "M2", "+", "M3", ")", "/", "3.", ")", "**", "(", "1.", "/", "3.", ")", "\n", "beta2", "=", "uniform", "(", "betamin", ",", "betamax", ")", "\n", "a3", "=", "a2", "+", "beta2", "*", "hill23", "\n", "\n", "minhill", "=", "min", "(", "hill12", ",", "hill23", ")", "\n", "\n", "ecrit1", "=", "(", "a2", "-", "a1", ")", "/", "a1", "\n", "ecrit21", "=", "(", "a2", "-", "a1", ")", "/", "a2", "\n", "ecrit23", "=", "(", "a3", "-", "a2", ")", "/", "a2", "\n", "ecrit3", "=", "(", "a3", "-", "a2", ")", "/", "a3", "\n", "\n", "logemax1", "=", "np", ".", "log10", "(", "ecrit1", ")", "\n", "logemax2", "=", "np", ".", "log10", "(", "min", "(", "ecrit21", ",", "ecrit23", ")", ")", "\n", "logemax3", "=", "np", ".", "log10", "(", "ecrit3", ")", "\n", "\n", "logemin1", "=", "np", ".", "log10", "(", "M2", "/", "ecrit1", "**", "2", ")", "\n", "logemin2", "=", "np", ".", "log10", "(", "max", "(", "M1", "/", "ecrit21", "**", "2", ",", "M3", "/", "ecrit23", "**", "2", ")", ")", "\n", "logemin3", "=", "np", ".", "log10", "(", "M2", "/", "ecrit3", "**", "2", ")", "\n", "\n", "#print(\"M1 = {0}, M2 = {1}, M3 = {2}\".format(M1, M2, M3))", "\n", "#print(\"beta1 = {0}, beta2 = {1}\".format(beta1, beta2))", "\n", "#print(\"a1 = {0}, a2 = {1}, a3 = {2}\".format(a1, a2, a3))", "\n", "#print(\"emax1 = {0}, emax2 = {1}, emax3 = {2}\".format(10**logemax1, 10**logemax2, 10**logemax3))", "\n", "#print(\"emin1 = {0}, emin2 = {1}, emin3 = {2}\".format(10**logemin1, 10**logemin2, 10**logemin3))", "\n", "#print(\"minhill = {0}\".format(minhill))", "\n", "\n", "emax", "=", "0.999", "\n", "e1", "=", "min", "(", "10.", "**", "uniform", "(", "logemin1", ",", "logemax1", ")", ",", "emax", ")", "# make sure ecc < 1", "\n", "e2", "=", "min", "(", "10.", "**", "uniform", "(", "logemin2", ",", "logemax2", ")", ",", "emax", ")", "\n", "e3", "=", "min", "(", "10.", "**", "uniform", "(", "logemin3", ",", "logemax3", ")", ",", "emax", ")", "\n", "\n", "i1", "=", "10.", "**", "uniform", "(", "logincmin", ",", "logincmax", ")", "\n", "i2", "=", "10.", "**", "uniform", "(", "logincmin", ",", "logincmax", ")", "\n", "i3", "=", "10.", "**", "uniform", "(", "logincmin", ",", "logincmax", ")", "\n", "\n", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "integrator", "=", "integrator", "\n", "sim", ".", "ri_whfast", ".", "safe_mode", "=", "0", "\n", "sim", ".", "G", "=", "4", "*", "np", ".", "pi", "**", "2", "\n", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "M1", ",", "a", "=", "a1", ",", "e", "=", "e1", ",", "pomega", "=", "random", "(", ")", "*", "2.", "*", "np", ".", "pi", ",", "inc", "=", "i1", ",", "Omega", "=", "random", "(", ")", "*", "2.", "*", "np", ".", "pi", ",", "f", "=", "random", "(", ")", "*", "2.", "*", "np", ".", "pi", ",", "r", "=", "minhill", ")", "\n", "sim", ".", "add", "(", "m", "=", "M2", ",", "a", "=", "a2", ",", "e", "=", "e2", ",", "pomega", "=", "random", "(", ")", "*", "2.", "*", "np", ".", "pi", ",", "inc", "=", "i2", ",", "Omega", "=", "random", "(", ")", "*", "2.", "*", "np", ".", "pi", ",", "f", "=", "random", "(", ")", "*", "2.", "*", "np", ".", "pi", ",", "r", "=", "minhill", ")", "\n", "sim", ".", "add", "(", "m", "=", "M3", ",", "a", "=", "a3", ",", "e", "=", "e3", ",", "pomega", "=", "random", "(", ")", "*", "2.", "*", "np", ".", "pi", ",", "inc", "=", "i3", ",", "Omega", "=", "random", "(", ")", "*", "2.", "*", "np", ".", "pi", ",", "f", "=", "random", "(", ")", "*", "2.", "*", "np", ".", "pi", ",", "r", "=", "minhill", ")", "\n", "sim", ".", "move_to_com", "(", ")", "\n", "ps", "=", "sim", ".", "particles", "\n", "\n", "if", "shadow", ":", "\n", "        ", "kicksize", "=", "1.e-11", "\n", "ps", "[", "2", "]", ".", "x", "+=", "kicksize", "\n", "\n", "", "if", "integrator", "==", "\"whfast\"", ":", "\n", "        ", "sim", ".", "dt", "=", "dt", "*", "sim", ".", "particles", "[", "1", "]", ".", "P", "\n", "", "sim", ".", "collision", "=", "\"direct\"", "\n", "sim", ".", "collision_resolve", "=", "collision", "\n", "\n", "#runstr = \"{0:0=7d}.bin\".format(sim_id)", "\n", "if", "shadow", ":", "\n", "        ", "shadowstr", "=", "'shadow'", "\n", "", "else", ":", "\n", "        ", "shadowstr", "=", "''", "\n", "\n", "", "if", "runstr", ":", "\n", "        ", "sim", ".", "save", "(", "datapath", "+", "'initial_conditions/'", "+", "shadowstr", "+", "'runs/ic'", "+", "runstr", ")", "\n", "sim", ".", "initSimulationArchive", "(", "datapath", "+", "'simulation_archives/'", "+", "shadowstr", "+", "'runs/sa'", "+", "runstr", ",", "interval", "=", "maxorbs", "/", "1000.", ")", "\n", "\n", "", "E0", "=", "sim", ".", "calculate_energy", "(", ")", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "sim", ".", "integrate", "(", "maxorbs", ")", "# will stop if collision occurs", "\n", "Ef", "=", "sim", ".", "calculate_energy", "(", ")", "\n", "Eerr", "=", "abs", "(", "(", "Ef", "-", "E0", ")", "/", "E0", ")", "\n", "\n", "if", "runstr", ":", "\n", "        ", "sim", ".", "save", "(", "datapath", "+", "'final_conditions/'", "+", "shadowstr", "+", "'runs/fc'", "+", "runstr", ")", "\n", "\n", "", "return", "(", "sim", ".", "t", ",", "Eerr", ",", "time", ".", "time", "(", ")", "-", "t0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.additional_feature_functions.additional_get_tseries": [[8, 42], ["numpy.linspace", "enumerate", "enumerate", "triopairs.append", "triotseries.append", "enumerate", "spock.feature_functions.get_pairs", "sim.integrate", "spock.feature_functions.populate_trio", "spock.AMD_functions.AMD", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.get_pairs", "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.populate_trio", "home.repos.pwc.inspect_result.dtamayo_spock.spock.AMD_functions.AMD"], ["def", "additional_get_tseries", "(", "sim", ",", "args", ")", ":", "\n", "    ", "Norbits", "=", "args", "[", "0", "]", "\n", "Nout", "=", "args", "[", "1", "]", "\n", "trios", "=", "args", "[", "2", "]", "\n", "\n", "P0", "=", "sim", ".", "particles", "[", "1", "]", ".", "P", "\n", "times", "=", "np", ".", "linspace", "(", "0", ",", "Norbits", "*", "P0", ",", "Nout", ")", "\n", "\n", "triopairs", ",", "triotseries", "=", "[", "]", ",", "[", "]", "\n", "for", "tr", ",", "trio", "in", "enumerate", "(", "trios", ")", ":", "# For each trio there are two adjacent pairs ", "\n", "        ", "triopairs", ".", "append", "(", "get_pairs", "(", "sim", ",", "trio", ")", ")", "\n", "triotseries", ".", "append", "(", "np", ".", "zeros", "(", "(", "Nout", ",", "9", ")", ")", "*", "np", ".", "nan", ")", "\n", "\n", "", "for", "i", ",", "time", "in", "enumerate", "(", "times", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "sim", ".", "integrate", "(", "time", ",", "exact_finish_time", "=", "0", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "if", "sim", ".", "_status", "==", "5", ":", "# checking this way works for both new rebound and old version used for random dataset", "\n", "            ", "stable", "=", "False", "\n", "return", "triotseries", ",", "stable", "\n", "\n", "", "for", "tseries", "in", "triotseries", ":", "\n", "            ", "tseries", "[", "i", ",", "0", "]", "=", "sim", ".", "t", "/", "P0", "# time", "\n", "\n", "", "for", "tr", ",", "trio", "in", "enumerate", "(", "trios", ")", ":", "\n", "            ", "pairs", "=", "triopairs", "[", "tr", "]", "\n", "tseries", "=", "triotseries", "[", "tr", "]", "\n", "populate_trio", "(", "sim", ",", "trio", ",", "pairs", ",", "tseries", ",", "i", ")", "\n", "tseries", "[", "i", ",", "8", "]", "=", "AMD", "(", "sim", ")", "\n", "\n", "", "", "stable", "=", "True", "\n", "return", "triotseries", ",", "stable", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.additional_feature_functions.additional_features": [[43, 130], ["enumerate", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.log10", "numpy.log10", "numpy.log10", "additional_feature_functions.additional_get_tseries", "zip", "collections.OrderedDict", "spock.feature_functions.get_pairs", "enumerate", "triofeatures.append", "min", "min", "numpy.median", "MEGNO[].std", "numpy.median", "numpy.median", "EPnear.std", "EPfar.std", "spock.AMD_functions.AMD_crit", "spock.feature_functions.find_strongest_MMR", "numpy.log10", "numpy.log10", "numpy.log10", "numpy.log10", "numpy.log10", "numpy.log10", "numpy.median", "numpy.median", "EMnear.std", "EMfar.std", "numpy.log10", "numpy.log10", "numpy.log10", "numpy.log10", "numpy.log10", "numpy.log10", "numpy.abs", "numpy.abs", "numpy.abs", "int", "int", "numpy.log", "numpy.log", "numpy.log"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.additional_feature_functions.additional_get_tseries", "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.get_pairs", "home.repos.pwc.inspect_result.dtamayo_spock.spock.AMD_functions.AMD_crit", "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.find_strongest_MMR"], ["", "def", "additional_features", "(", "sim", ",", "args", ")", ":", "# final cut down list", "\n", "    ", "Norbits", "=", "args", "[", "0", "]", "\n", "Nout", "=", "args", "[", "1", "]", "\n", "trios", "=", "args", "[", "2", "]", "\n", "\n", "ps", "=", "sim", ".", "particles", "\n", "triofeatures", "=", "[", "]", "\n", "for", "tr", ",", "trio", "in", "enumerate", "(", "trios", ")", ":", "\n", "        ", "features", "=", "OrderedDict", "(", ")", "\n", "pairs", "=", "get_pairs", "(", "sim", ",", "trio", ")", "\n", "for", "i", ",", "[", "label", ",", "i1", ",", "i2", "]", "in", "enumerate", "(", "pairs", ")", ":", "\n", "            ", "features", "[", "'EMfracstd'", "+", "label", "]", "=", "np", ".", "nan", "\n", "features", "[", "'EPstd'", "+", "label", "]", "=", "np", ".", "nan", "\n", "features", "[", "'AMDfrac'", "+", "label", "]", "=", "np", ".", "nan", "\n", "features", "[", "'MMRstrength'", "+", "label", "]", "=", "np", ".", "nan", "\n", "\n", "RH", "=", "ps", "[", "i1", "]", ".", "a", "*", "(", "(", "ps", "[", "i1", "]", ".", "m", "+", "ps", "[", "i2", "]", ".", "m", ")", "/", "ps", "[", "0", "]", ".", "m", ")", "**", "(", "1.", "/", "3.", ")", "\n", "features", "[", "'beta'", "+", "label", "]", "=", "(", "ps", "[", "i2", "]", ".", "a", "-", "ps", "[", "i1", "]", ".", "a", ")", "/", "RH", "\n", "features", "[", "\"AMDcrit\"", "+", "label", "]", "=", "AMD_crit", "(", "sim", ",", "i1", ",", "i2", ")", "\n", "features", "[", "\"EMcross\"", "+", "label", "]", "=", "(", "ps", "[", "i2", "]", ".", "a", "-", "ps", "[", "i1", "]", ".", "a", ")", "/", "ps", "[", "i1", "]", ".", "a", "\n", "features", "[", "\"j\"", "+", "label", "]", ",", "features", "[", "\"k\"", "+", "label", "]", ",", "_", "=", "find_strongest_MMR", "(", "sim", ",", "i1", ",", "i2", ")", "\n", "\n", "", "features", "[", "'MEGNO'", "]", "=", "np", ".", "nan", "\n", "features", "[", "'MEGNOstd'", "]", "=", "np", ".", "nan", "\n", "features", "[", "'stable_in_short_integration'", "]", "=", "False", "\n", "\n", "triofeatures", ".", "append", "(", "features", ")", "\n", "\n", "", "features", "[", "\"e1Z07\"", "]", "=", "ps", "[", "1", "]", ".", "e", "*", "(", "ps", "[", "2", "]", ".", "a", "+", "ps", "[", "1", "]", ".", "a", ")", "/", "(", "ps", "[", "2", "]", ".", "a", "-", "ps", "[", "1", "]", ".", "a", ")", "\n", "features", "[", "\"e2Z07\"", "]", "=", "ps", "[", "2", "]", ".", "e", "*", "(", "ps", "[", "3", "]", ".", "a", "+", "ps", "[", "2", "]", ".", "a", ")", "/", "(", "ps", "[", "3", "]", ".", "a", "-", "ps", "[", "2", "]", ".", "a", ")", "\n", "features", "[", "\"e3Z07\"", "]", "=", "ps", "[", "3", "]", ".", "e", "*", "(", "ps", "[", "3", "]", ".", "a", "+", "ps", "[", "2", "]", ".", "a", ")", "/", "(", "ps", "[", "3", "]", ".", "a", "-", "ps", "[", "2", "]", ".", "a", ")", "\n", "features", "[", "\"eavgZ07inner\"", "]", "=", "np", ".", "mean", "(", "[", "features", "[", "'e1Z07'", "]", ",", "features", "[", "'e2Z07'", "]", "]", ")", "\n", "features", "[", "\"eavgZ07outer\"", "]", "=", "np", ".", "mean", "(", "[", "features", "[", "'e2Z07'", "]", ",", "features", "[", "'e3Z07'", "]", "]", ")", "\n", "features", "[", "\"eavgZ07\"", "]", "=", "np", ".", "mean", "(", "[", "features", "[", "\"e1Z07\"", "]", ",", "features", "[", "\"e2Z07\"", "]", ",", "features", "[", "\"e3Z07\"", "]", "]", ")", "\n", "features", "[", "\"muavgZ07inner\"", "]", "=", "(", "ps", "[", "1", "]", ".", "m", "+", "ps", "[", "2", "]", ".", "m", ")", "/", "ps", "[", "0", "]", ".", "m", "/", "2", "# mean of the mass ratios", "\n", "features", "[", "\"muavgZ07outer\"", "]", "=", "(", "ps", "[", "2", "]", ".", "m", "+", "ps", "[", "3", "]", ".", "m", ")", "/", "ps", "[", "0", "]", ".", "m", "/", "2", "# mean of the mass ratios", "\n", "features", "[", "\"muavgZ07\"", "]", "=", "np", ".", "mean", "(", "[", "ps", "[", "1", "]", ".", "m", ",", "ps", "[", "2", "]", ".", "m", ",", "ps", "[", "3", "]", ".", "m", "]", ")", "\n", "features", "[", "\"kZ07inner\"", "]", "=", "(", "ps", "[", "2", "]", ".", "a", "-", "ps", "[", "1", "]", ".", "a", ")", "*", "2.", "/", "(", "ps", "[", "2", "]", ".", "a", "+", "ps", "[", "1", "]", ".", "a", ")", "/", "(", "2.", "*", "features", "[", "\"muavgZ07inner\"", "]", "/", "3.", ")", "**", "(", "1.", "/", "3.", ")", "\n", "features", "[", "\"kZ07outer\"", "]", "=", "(", "ps", "[", "3", "]", ".", "a", "-", "ps", "[", "2", "]", ".", "a", ")", "*", "2.", "/", "(", "ps", "[", "3", "]", ".", "a", "+", "ps", "[", "2", "]", ".", "a", ")", "/", "(", "2.", "*", "features", "[", "\"muavgZ07outer\"", "]", "/", "3.", ")", "**", "(", "1.", "/", "3.", ")", "\n", "features", "[", "\"kZ07avg\"", "]", "=", "np", ".", "mean", "(", "[", "features", "[", "'kZ07inner'", "]", ",", "features", "[", "'kZ07outer'", "]", "]", ")", "\n", "features", "[", "\"AZ07inner\"", "]", "=", "-", "2.", "+", "features", "[", "\"eavgZ07inner\"", "]", "-", "0.27", "*", "np", ".", "log10", "(", "features", "[", "\"muavgZ07inner\"", "]", ")", "# Zhou 2007 Eq 4", "\n", "features", "[", "\"AZ07outer\"", "]", "=", "-", "2.", "+", "features", "[", "\"eavgZ07outer\"", "]", "-", "0.27", "*", "np", ".", "log10", "(", "features", "[", "\"muavgZ07outer\"", "]", ")", "# Zhou 2007 Eq 4", "\n", "features", "[", "\"AZ07avg\"", "]", "=", "-", "2.", "+", "features", "[", "\"eavgZ07\"", "]", "-", "0.27", "*", "np", ".", "log10", "(", "features", "[", "\"muavgZ07\"", "]", ")", "# Zhou 2007 Eq 4", "\n", "features", "[", "\"BZ07inner\"", "]", "=", "18.7", "+", "1.1", "*", "np", ".", "log10", "(", "features", "[", "\"muavgZ07inner\"", "]", ")", "-", "(", "16.8", "+", "1.2", "*", "np", ".", "log10", "(", "features", "[", "\"muavgZ07inner\"", "]", ")", ")", "*", "features", "[", "'eavgZ07inner'", "]", "# Zhou 2007 Eq 4", "\n", "features", "[", "\"BZ07outer\"", "]", "=", "18.7", "+", "1.1", "*", "np", ".", "log10", "(", "features", "[", "\"muavgZ07outer\"", "]", ")", "-", "(", "16.8", "+", "1.2", "*", "np", ".", "log10", "(", "features", "[", "\"muavgZ07outer\"", "]", ")", ")", "*", "features", "[", "'eavgZ07outer'", "]", "# Zhou 2007 Eq 4", "\n", "features", "[", "\"BZ07avg\"", "]", "=", "18.7", "+", "1.1", "*", "np", ".", "log10", "(", "features", "[", "\"muavgZ07\"", "]", ")", "-", "(", "16.8", "+", "1.2", "*", "np", ".", "log10", "(", "features", "[", "\"muavgZ07\"", "]", ")", ")", "*", "features", "[", "'eavgZ07'", "]", "# Zhou 2007 Eq 4", "\n", "features", "[", "\"Z07log_instability_time_inner\"", "]", "=", "features", "[", "\"AZ07inner\"", "]", "+", "features", "[", "'BZ07inner'", "]", "*", "np", ".", "log10", "(", "features", "[", "'kZ07inner'", "]", "/", "2.3", ")", "\n", "features", "[", "\"Z07log_instability_time_outer\"", "]", "=", "features", "[", "\"AZ07outer\"", "]", "+", "features", "[", "'BZ07outer'", "]", "*", "np", ".", "log10", "(", "features", "[", "'kZ07outer'", "]", "/", "2.3", ")", "\n", "features", "[", "\"Z07log_instability_time_avg\"", "]", "=", "features", "[", "\"AZ07avg\"", "]", "+", "features", "[", "'BZ07avg'", "]", "*", "np", ".", "log10", "(", "features", "[", "'kZ07avg'", "]", "/", "2.3", ")", "\n", "features", "[", "\"Z07Stable_avg\"", "]", "=", "features", "[", "\"Z07log_instability_time_avg\"", "]", ">", "9", "\n", "features", "[", "\"Z07Stable_worstpair\"", "]", "=", "min", "(", "features", "[", "\"Z07log_instability_time_inner\"", "]", ",", "features", "[", "\"Z07log_instability_time_outer\"", "]", ")", ">", "9", "\n", "\n", "features", "[", "\"deltaQ11inner\"", "]", "=", "(", "ps", "[", "2", "]", ".", "a", "-", "ps", "[", "1", "]", ".", "a", ")", "/", "ps", "[", "2", "]", ".", "a", "\n", "features", "[", "\"deltaQ11outer\"", "]", "=", "(", "ps", "[", "3", "]", ".", "a", "-", "ps", "[", "2", "]", ".", "a", ")", "/", "ps", "[", "3", "]", ".", "a", "\n", "features", "[", "\"deltaQ11avg\"", "]", "=", "np", ".", "mean", "(", "[", "features", "[", "'deltaQ11inner'", "]", ",", "features", "[", "'deltaQ11outer'", "]", "]", ")", "\n", "features", "[", "\"Q11log_instability_time_inner\"", "]", "=", "np", ".", "log10", "(", "features", "[", "\"deltaQ11inner\"", "]", "**", "8", "/", "np", ".", "abs", "(", "np", ".", "log", "(", "features", "[", "\"deltaQ11inner\"", "]", ")", ")", "**", "3", "/", "features", "[", "\"muavgZ07inner\"", "]", "**", "3", "/", "8.", ")", "# Qullen 2011 Eq 68", "\n", "features", "[", "\"Q11log_instability_time_outer\"", "]", "=", "np", ".", "log10", "(", "features", "[", "\"deltaQ11outer\"", "]", "**", "8", "/", "np", ".", "abs", "(", "np", ".", "log", "(", "features", "[", "\"deltaQ11outer\"", "]", ")", ")", "**", "3", "/", "features", "[", "\"muavgZ07outer\"", "]", "**", "3", "/", "8.", ")", "# Qullen 2011 Eq 68", "\n", "features", "[", "\"Q11log_instability_time_avg\"", "]", "=", "np", ".", "log10", "(", "features", "[", "\"deltaQ11avg\"", "]", "**", "8", "/", "np", ".", "abs", "(", "np", ".", "log", "(", "features", "[", "\"deltaQ11avg\"", "]", ")", ")", "**", "3", "/", "features", "[", "\"muavgZ07\"", "]", "**", "3", "/", "8.", ")", "# Qullen 2011 Eq 68", "\n", "features", "[", "\"Q11Stable_avg\"", "]", "=", "features", "[", "'Q11log_instability_time_avg'", "]", ">", "9", "\n", "features", "[", "\"Q11Stable_worstpair\"", "]", "=", "min", "(", "features", "[", "'Q11log_instability_time_inner'", "]", ",", "features", "[", "\"Q11log_instability_time_outer\"", "]", ")", ">", "9", "\n", "\n", "triotseries", ",", "stable", "=", "additional_get_tseries", "(", "sim", ",", "args", ")", "\n", "if", "not", "stable", ":", "\n", "        ", "return", "triofeatures", ",", "stable", "\n", "\n", "", "for", "features", ",", "tseries", "in", "zip", "(", "triofeatures", ",", "triotseries", ")", ":", "\n", "        ", "EMnear", "=", "tseries", "[", ":", ",", "1", "]", "\n", "EPnear", "=", "tseries", "[", ":", ",", "2", "]", "\n", "MMRstrengthnear", "=", "tseries", "[", ":", ",", "3", "]", "\n", "EMfar", "=", "tseries", "[", ":", ",", "4", "]", "\n", "EPfar", "=", "tseries", "[", ":", ",", "5", "]", "\n", "MMRstrengthfar", "=", "tseries", "[", ":", ",", "6", "]", "\n", "MEGNO", "=", "tseries", "[", ":", ",", "7", "]", "\n", "AMD", "=", "tseries", "[", ":", ",", "8", "]", "\n", "\n", "features", "[", "'MEGNO'", "]", "=", "np", ".", "median", "(", "MEGNO", "[", "-", "int", "(", "Nout", "/", "10", ")", ":", "]", ")", "# smooth last 10% to remove oscillations around 2", "\n", "features", "[", "'MEGNOstd'", "]", "=", "MEGNO", "[", "int", "(", "Nout", "/", "5", ")", ":", "]", ".", "std", "(", ")", "\n", "features", "[", "'AMDfracnear'", "]", "=", "np", ".", "median", "(", "AMD", ")", "/", "features", "[", "'AMDcritnear'", "]", "\n", "features", "[", "'AMDfracfar'", "]", "=", "np", ".", "median", "(", "AMD", ")", "/", "features", "[", "'AMDcritfar'", "]", "\n", "features", "[", "'MMRstrengthnear'", "]", "=", "np", ".", "median", "(", "MMRstrengthnear", ")", "\n", "features", "[", "'MMRstrengthfar'", "]", "=", "np", ".", "median", "(", "MMRstrengthfar", ")", "\n", "features", "[", "'EMfracstdnear'", "]", "=", "EMnear", ".", "std", "(", ")", "/", "features", "[", "'EMcrossnear'", "]", "\n", "features", "[", "'EMfracstdfar'", "]", "=", "EMfar", ".", "std", "(", ")", "/", "features", "[", "'EMcrossfar'", "]", "\n", "features", "[", "'EPstdnear'", "]", "=", "EPnear", ".", "std", "(", ")", "\n", "features", "[", "'EPstdfar'", "]", "=", "EPfar", ".", "std", "(", ")", "\n", "\n", "", "return", "triofeatures", ",", "stable", "\n", "", ""]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.hasnull": [[7, 13], ["row.isnull().sum", "row.isnull"], "function", ["None"], ["def", "hasnull", "(", "row", ")", ":", "\n", "    ", "numnulls", "=", "row", ".", "isnull", "(", ")", ".", "sum", "(", ")", "\n", "if", "numnulls", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "else", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.train_test_split": [[14, 38], ["pandas.read_csv", "pd.read_csv.apply", "pandas.read_csv", "int"], "function", ["None"], ["", "", "def", "train_test_split", "(", "trainingdatafolder", ",", "features", "=", "None", ",", "labelname", "=", "'Stable'", ",", "filter", "=", "False", ",", "filtertimes", "=", "False", ")", ":", "\n", "    ", "dataset", "=", "pd", ".", "read_csv", "(", "trainingdatafolder", "+", "\"trainingdata.csv\"", ",", "index_col", "=", "0", ")", "\n", "if", "features", "is", "None", ":", "\n", "        ", "features", "=", "dataset", ".", "columns", ".", "values", "\n", "", "dataset", "[", "'hasnull'", "]", "=", "dataset", ".", "apply", "(", "hasnull", ",", "axis", "=", "1", ")", "\n", "\n", "labels", "=", "pd", ".", "read_csv", "(", "trainingdatafolder", "+", "\"labels.csv\"", ",", "index_col", "=", "0", ")", "\n", "if", "filter", ":", "\n", "        ", "y", "=", "labels", "[", "(", "labels", "[", "'instability_time'", "]", ">", "1.e4", ")", "&", "(", "dataset", "[", "'hasnull'", "]", "==", "0", ")", "]", "[", "labelname", "]", "\n", "X", "=", "dataset", "[", "(", "labels", "[", "'instability_time'", "]", ">", "1.e4", ")", "&", "(", "dataset", "[", "'hasnull'", "]", "==", "0", ")", "]", "[", "features", "]", "\n", "", "elif", "filtertimes", ":", "\n", "        ", "y", "=", "labels", "[", "labels", "[", "'instability_time'", "]", ">", "1.e4", "]", "[", "labelname", "]", "\n", "X", "=", "dataset", "[", "labels", "[", "'instability_time'", "]", ">", "1.e4", "]", "[", "features", "]", "\n", "", "else", ":", "\n", "        ", "y", "=", "labels", "[", "labelname", "]", "\n", "X", "=", "dataset", "[", "features", "]", "\n", "\n", "", "Nrows", "=", "int", "(", "0.8", "*", "X", ".", "shape", "[", "0", "]", ")", "\n", "trainX", "=", "X", ".", "iloc", "[", ":", "Nrows", ",", ":", "]", "\n", "trainy", "=", "y", ".", "iloc", "[", ":", "Nrows", "]", "\n", "testX", "=", "X", ".", "iloc", "[", "Nrows", ":", ",", ":", "]", "\n", "testy", "=", "y", ".", "iloc", "[", "Nrows", ":", "]", "\n", "\n", "return", "trainX", ",", "trainy", ",", "testX", ",", "testy", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.ROC_curve": [[39, 45], ["modelfitting.train_test_split", "sklearn.metrics.roc_curve", "sklearn.metrics.roc_auc_score", "model.predict_proba"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.train_test_split"], ["", "def", "ROC_curve", "(", "trainingdatafolder", ",", "model", ",", "features", "=", "None", ",", "filter", "=", "False", ",", "filtertimes", "=", "False", ")", ":", "\n", "    ", "trainX", ",", "trainy", ",", "testX", ",", "testy", "=", "train_test_split", "(", "trainingdatafolder", ",", "features", ",", "filter", "=", "filter", ",", "filtertimes", "=", "filtertimes", ")", "\n", "preds", "=", "model", ".", "predict_proba", "(", "testX", ")", "[", ":", ",", "1", "]", "\n", "fpr", ",", "tpr", ",", "ROCthresholds", "=", "roc_curve", "(", "testy", ",", "preds", ")", "\n", "roc_auc", "=", "metrics", ".", "roc_auc_score", "(", "testy", ",", "preds", ")", "\n", "return", "roc_auc", ",", "fpr", ",", "tpr", ",", "ROCthresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.PR_curve": [[46, 52], ["modelfitting.train_test_split", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.auc", "model.predict_proba"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.train_test_split"], ["", "def", "PR_curve", "(", "trainingdatafolder", ",", "model", ",", "features", "=", "None", ",", "filter", "=", "False", ",", "filtertimes", "=", "False", ")", ":", "\n", "    ", "trainX", ",", "trainy", ",", "testX", ",", "testy", "=", "train_test_split", "(", "trainingdatafolder", ",", "features", ",", "filter", "=", "filter", ",", "filtertimes", "=", "filtertimes", ")", "\n", "preds", "=", "model", ".", "predict_proba", "(", "testX", ")", "[", ":", ",", "1", "]", "\n", "precision", ",", "recall", ",", "PRthresholds", "=", "precision_recall_curve", "(", "testy", ",", "preds", ")", "\n", "pr_auc", "=", "metrics", ".", "auc", "(", "recall", ",", "precision", ")", "\n", "return", "pr_auc", ",", "precision", ",", "recall", ",", "PRthresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.tnr_npv_curve": [[53, 67], ["modelfitting.train_test_split", "numpy.linspace", "enumerate", "sklearn.metrics.auc", "model.predict_proba", "numpy.zeros", "numpy.zeros", "sklearn.metrics.confusion_matrix().ravel", "numpy.isnan", "sklearn.metrics.confusion_matrix"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.train_test_split"], ["", "def", "tnr_npv_curve", "(", "trainingdatafolder", ",", "model", ",", "features", "=", "None", ",", "filter", "=", "False", ",", "filtertimes", "=", "False", ",", "N", "=", "1000", ")", ":", "\n", "    ", "trainX", ",", "trainy", ",", "testX", ",", "testy", "=", "train_test_split", "(", "trainingdatafolder", ",", "features", ",", "filter", "=", "filter", ",", "filtertimes", "=", "filtertimes", ")", "\n", "preds", "=", "model", ".", "predict_proba", "(", "testX", ")", "[", ":", ",", "1", "]", "\n", "npv", ",", "tnr", "=", "np", ".", "zeros", "(", "N", ")", ",", "np", ".", "zeros", "(", "N", ")", "\n", "thresholds", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "N", ")", "\n", "for", "i", ",", "thresh", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "predy", "=", "(", "preds", ">=", "thresh", ")", "\n", "tn", ",", "fp", ",", "fn", ",", "tp", "=", "confusion_matrix", "(", "testy", ",", "predy", ")", ".", "ravel", "(", ")", "\n", "npv", "[", "i", "]", "=", "tn", "/", "(", "tn", "+", "fn", ")", "\n", "tnr", "[", "i", "]", "=", "tn", "/", "(", "tn", "+", "fp", ")", "\n", "# When thresh is 0, we don't predict any negs, so npv is nan", "\n", "", "npv", "[", "np", ".", "isnan", "(", "npv", ")", "]", "=", "1", "\n", "aucval", "=", "auc", "(", "tnr", ",", "npv", ")", "\n", "return", "aucval", ",", "npv", ",", "tnr", ",", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.stable_unstable_hist": [[68, 74], ["modelfitting.train_test_split", "model.predict_proba", "numpy.where", "numpy.where"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.train_test_split"], ["", "def", "stable_unstable_hist", "(", "trainingdatafolder", ",", "model", ",", "features", "=", "None", ",", "filter", "=", "False", ",", "filtertimes", "=", "False", ")", ":", "\n", "    ", "trainX", ",", "trainy", ",", "testX", ",", "testy", "=", "train_test_split", "(", "trainingdatafolder", ",", "features", ",", "filter", "=", "filter", ",", "filtertimes", "=", "filtertimes", ")", "\n", "preds", "=", "model", ".", "predict_proba", "(", "testX", ")", "[", ":", ",", "1", "]", "\n", "stablepreds", "=", "preds", "[", "np", ".", "where", "(", "testy", "==", "1", ")", "]", "\n", "unstablepreds", "=", "preds", "[", "np", ".", "where", "(", "testy", "==", "0", ")", "]", "\n", "return", "stablepreds", ",", "unstablepreds", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.calibration_plot": [[75, 93], ["modelfitting.train_test_split", "numpy.histogram", "range", "model.predict_proba", "bincenters.append", "testy[].sum", "fracstable.append", "errorbars.append", "numpy.array", "numpy.array", "numpy.array", "len", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.train_test_split"], ["", "def", "calibration_plot", "(", "trainingdatafolder", ",", "model", ",", "features", "=", "None", ",", "bins", "=", "10", ",", "filter", "=", "False", ",", "filtertimes", "=", "False", ")", ":", "\n", "    ", "trainX", ",", "trainy", ",", "testX", ",", "testy", "=", "train_test_split", "(", "trainingdatafolder", ",", "features", ",", "filter", "=", "filter", ",", "filtertimes", "=", "filtertimes", ")", "\n", "preds", "=", "model", ".", "predict_proba", "(", "testX", ")", "[", ":", ",", "1", "]", "\n", "\n", "hist", ",", "edges", "=", "np", ".", "histogram", "(", "preds", ",", "bins", "=", "bins", ")", "\n", "\n", "bincenters", "=", "[", "]", "\n", "fracstable", "=", "[", "]", "\n", "errorbars", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "edges", ")", "-", "1", ")", ":", "\n", "        ", "bincenters", ".", "append", "(", "(", "edges", "[", "i", "]", "+", "edges", "[", "i", "+", "1", "]", ")", "/", "2", ")", "\n", "mask", "=", "(", "preds", ">=", "edges", "[", "i", "]", ")", "&", "(", "preds", "<", "edges", "[", "i", "+", "1", "]", ")", "\n", "nstable", "=", "testy", "[", "mask", "]", ".", "sum", "(", ")", "\n", "fracstable", ".", "append", "(", "nstable", "/", "hist", "[", "i", "]", ")", "# fraction of stable systems in bin with predictions in range", "\n", "errorbars", ".", "append", "(", "np", ".", "sqrt", "(", "1.", "/", "nstable", "+", "1.", "/", "hist", "[", "i", "]", ")", "*", "fracstable", "[", "-", "1", "]", ")", "# assume poisson counting errors for each fractional error, and add in quadrature for error on ratio. ", "\n", "# multiply the fractional error by value", "\n", "\n", "", "return", "np", ".", "array", "(", "bincenters", ")", ",", "np", ".", "array", "(", "fracstable", ")", ",", "np", ".", "array", "(", "errorbars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.unstable_error_fraction": [[94, 117], ["modelfitting.train_test_split", "modelfitting.train_test_split", "numpy.log10", "numpy.histogram", "range", "model.predict_proba", "bincenters.append", "errorfracs.append", "errorbars.append", "numpy.array", "numpy.array", "numpy.array", "len", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.train_test_split", "home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.train_test_split"], ["", "def", "unstable_error_fraction", "(", "trainingdatafolder", ",", "model", ",", "thresh", ",", "features", "=", "None", ",", "bins", "=", "10", ",", "filter", "=", "False", ",", "filtertimes", "=", "False", ")", ":", "\n", "    ", "trainX", ",", "trainy", ",", "testX", ",", "testy", "=", "train_test_split", "(", "trainingdatafolder", ",", "features", ",", "filter", "=", "filter", ",", "filtertimes", "=", "filtertimes", ")", "\n", "preds", "=", "model", ".", "predict_proba", "(", "testX", ")", "[", ":", ",", "1", "]", "\n", "dummy", ",", "dummy", ",", "dummy", ",", "inst_times", "=", "train_test_split", "(", "trainingdatafolder", ",", "features", ",", "labelname", "=", "'instability_time'", ",", "filter", "=", "filter", ",", "filtertimes", "=", "filtertimes", ")", "\n", "log_inst_times", "=", "np", ".", "log10", "(", "inst_times", ")", "\n", "\n", "unstable", "=", "log_inst_times", "<", "8.99", "\n", "preds", "=", "preds", "[", "unstable", "]", "\n", "log_inst_times", "=", "log_inst_times", "[", "unstable", "]", "\n", "\n", "hist", ",", "edges", "=", "np", ".", "histogram", "(", "log_inst_times", ",", "bins", "=", "bins", ")", "\n", "\n", "bincenters", "=", "[", "]", "\n", "errorfracs", "=", "[", "]", "\n", "errorbars", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "edges", ")", "-", "1", ")", ":", "\n", "        ", "bincenters", ".", "append", "(", "(", "edges", "[", "i", "]", "+", "edges", "[", "i", "+", "1", "]", ")", "/", "2", ")", "\n", "mask", "=", "(", "log_inst_times", ">=", "edges", "[", "i", "]", ")", "&", "(", "log_inst_times", "<", "edges", "[", "i", "+", "1", "]", ")", "\n", "Nerrors", "=", "(", "preds", "[", "mask", "]", ">", "thresh", ")", ".", "sum", "(", ")", "\n", "errorfracs", ".", "append", "(", "Nerrors", "/", "hist", "[", "i", "]", ")", "\n", "errorbars", ".", "append", "(", "np", ".", "sqrt", "(", "1.", "/", "Nerrors", "+", "1.", "/", "hist", "[", "i", "]", ")", "*", "errorfracs", "[", "-", "1", "]", ")", "# see calibration plot comment", "\n", "\n", "", "return", "np", ".", "array", "(", "bincenters", ")", ",", "np", ".", "array", "(", "errorfracs", ")", ",", "np", ".", "array", "(", "errorbars", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.tseries_feature_functions.get_pairs": [[15, 25], ["sorted"], "function", ["None"], ["def", "get_pairs", "(", "sim", ",", "indices", ")", ":", "\n", "    ", "ps", "=", "sim", ".", "particles", "\n", "sortedindices", "=", "sorted", "(", "indices", ",", "key", "=", "lambda", "i", ":", "ps", "[", "i", "]", ".", "a", ")", "# sort from inner to outer", "\n", "EMcrossInner", "=", "(", "ps", "[", "sortedindices", "[", "1", "]", "]", ".", "a", "-", "ps", "[", "sortedindices", "[", "0", "]", "]", ".", "a", ")", "/", "ps", "[", "sortedindices", "[", "0", "]", "]", ".", "a", "\n", "EMcrossOuter", "=", "(", "ps", "[", "sortedindices", "[", "2", "]", "]", ".", "a", "-", "ps", "[", "sortedindices", "[", "1", "]", "]", ".", "a", ")", "/", "ps", "[", "sortedindices", "[", "1", "]", "]", ".", "a", "\n", "\n", "if", "EMcrossInner", "<", "EMcrossOuter", ":", "\n", "        ", "return", "[", "[", "'near'", ",", "sortedindices", "[", "0", "]", ",", "sortedindices", "[", "1", "]", "]", ",", "[", "'far'", ",", "sortedindices", "[", "1", "]", ",", "sortedindices", "[", "2", "]", "]", "]", "\n", "", "else", ":", "\n", "        ", "return", "[", "[", "'near'", ",", "sortedindices", "[", "1", "]", ",", "sortedindices", "[", "2", "]", "]", ",", "[", "'far'", ",", "sortedindices", "[", "0", "]", ",", "sortedindices", "[", "1", "]", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.tseries_feature_functions.populate_extended_trio": [[26, 72], ["enumerate", "sim.calculate_orbits", "enumerate", "numpy.sqrt", "sim.calculate_megno", "numpy.sqrt", "feature_functions.find_strongest_MMR", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.find_strongest_MMR"], ["", "", "@", "profile", "\n", "def", "populate_extended_trio", "(", "sim", ",", "trio", ",", "pairs", ",", "tseries", ",", "i", ",", "a10", ",", "axis_labels", "=", "None", ",", "mmr", "=", "True", ",", "megno", "=", "True", ")", ":", "\n", "    ", "Ns", "=", "3", "\n", "ps", "=", "sim", ".", "particles", "\n", "for", "q", ",", "[", "label", ",", "i1", ",", "i2", "]", "in", "enumerate", "(", "pairs", ")", ":", "\n", "        ", "m1", "=", "ps", "[", "i1", "]", ".", "m", "\n", "m2", "=", "ps", "[", "i2", "]", ".", "m", "\n", "e1x", ",", "e1y", "=", "ps", "[", "i1", "]", ".", "e", "*", "np", ".", "cos", "(", "ps", "[", "i1", "]", ".", "pomega", ")", ",", "ps", "[", "i1", "]", ".", "e", "*", "np", ".", "sin", "(", "ps", "[", "i1", "]", ".", "pomega", ")", "\n", "e2x", ",", "e2y", "=", "ps", "[", "i2", "]", ".", "e", "*", "np", ".", "cos", "(", "ps", "[", "i2", "]", ".", "pomega", ")", ",", "ps", "[", "i2", "]", ".", "e", "*", "np", ".", "sin", "(", "ps", "[", "i2", "]", ".", "pomega", ")", "\n", "tseries", "[", "i", ",", "Ns", "*", "q", "+", "1", "]", "=", "np", ".", "sqrt", "(", "(", "e2x", "-", "e1x", ")", "**", "2", "+", "(", "e2y", "-", "e1y", ")", "**", "2", ")", "\n", "tseries", "[", "i", ",", "Ns", "*", "q", "+", "2", "]", "=", "np", ".", "sqrt", "(", "(", "m1", "*", "e1x", "+", "m2", "*", "e2x", ")", "**", "2", "+", "(", "m1", "*", "e1y", "+", "m2", "*", "e2y", ")", "**", "2", ")", "/", "(", "m1", "+", "m2", ")", "\n", "if", "mmr", ":", "\n", "            ", "j", ",", "k", ",", "tseries", "[", "i", ",", "Ns", "*", "q", "+", "3", "]", "=", "find_strongest_MMR", "(", "sim", ",", "i1", ",", "i2", ")", "\n", "", "else", ":", "\n", "            ", "tseries", "[", "i", ",", "Ns", "*", "q", "+", "3", "]", "=", "0.0", "\n", "\n", "", "if", "axis_labels", "is", "not", "None", ":", "\n", "            ", "axis_labels", "[", "Ns", "*", "q", "+", "1", "]", "=", "'e+_'", "+", "label", "\n", "axis_labels", "[", "Ns", "*", "q", "+", "2", "]", "=", "'e-_'", "+", "label", "\n", "axis_labels", "[", "Ns", "*", "q", "+", "3", "]", "=", "'max_strength_mmr_'", "+", "label", "\n", "\n", "\n", "", "", "if", "axis_labels", "is", "not", "None", ":", "\n", "        ", "axis_labels", "[", "7", "]", "=", "'megno'", "\n", "\n", "", "if", "megno", ":", "\n", "        ", "tseries", "[", "i", ",", "7", "]", "=", "sim", ".", "calculate_megno", "(", ")", "# megno", "\n", "", "else", ":", "\n", "        ", "tseries", "[", "i", ",", "7", "]", "=", "0.0", "\n", "\n", "", "orbits", "=", "sim", ".", "calculate_orbits", "(", ")", "\n", "for", "j", ",", "k", "in", "enumerate", "(", "trio", ")", ":", "\n", "        ", "o", "=", "orbits", "[", "k", "-", "1", "]", "\n", "tseries", "[", "i", ",", "8", "+", "6", "*", "j", "]", "=", "o", ".", "a", "/", "a10", "\n", "tseries", "[", "i", ",", "9", "+", "6", "*", "j", "]", "=", "o", ".", "e", "\n", "tseries", "[", "i", ",", "10", "+", "6", "*", "j", "]", "=", "o", ".", "inc", "\n", "tseries", "[", "i", ",", "11", "+", "6", "*", "j", "]", "=", "o", ".", "Omega", "\n", "tseries", "[", "i", ",", "12", "+", "6", "*", "j", "]", "=", "o", ".", "pomega", "\n", "tseries", "[", "i", ",", "13", "+", "6", "*", "j", "]", "=", "o", ".", "theta", "\n", "if", "axis_labels", "is", "not", "None", ":", "\n", "            ", "axis_labels", "[", "8", "+", "6", "*", "j", "]", "=", "'a'", "+", "str", "(", "j", "+", "1", ")", "\n", "axis_labels", "[", "9", "+", "6", "*", "j", "]", "=", "'e'", "+", "str", "(", "j", "+", "1", ")", "\n", "axis_labels", "[", "10", "+", "6", "*", "j", "]", "=", "'i'", "+", "str", "(", "j", "+", "1", ")", "\n", "axis_labels", "[", "11", "+", "6", "*", "j", "]", "=", "'Omega'", "+", "str", "(", "j", "+", "1", ")", "\n", "axis_labels", "[", "12", "+", "6", "*", "j", "]", "=", "'pomega'", "+", "str", "(", "j", "+", "1", ")", "\n", "axis_labels", "[", "13", "+", "6", "*", "j", "]", "=", "'theta'", "+", "str", "(", "j", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.tseries_feature_functions.get_extended_tseries": [[73, 117], ["numpy.min", "numpy.linspace", "enumerate", "enumerate", "triopairs.append", "triotseries.append", "enumerate", "numpy.abs", "tseries_feature_functions.get_pairs", "sim.integrate", "tseries_feature_functions.populate_extended_trio", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.get_pairs", "home.repos.pwc.inspect_result.dtamayo_spock.spock.tseries_feature_functions.populate_extended_trio"], ["", "", "", "@", "profile", "\n", "def", "get_extended_tseries", "(", "sim", ",", "args", ",", "mmr", "=", "True", ",", "megno", "=", "True", ")", ":", "\n", "    ", "Norbits", "=", "args", "[", "0", "]", "\n", "Nout", "=", "args", "[", "1", "]", "\n", "trios", "=", "args", "[", "2", "]", "\n", "\n", "a10s", "=", "[", "sim", ".", "particles", "[", "trio", "[", "0", "]", "]", ".", "a", "for", "trio", "in", "trios", "]", "\n", "minP", "=", "np", ".", "min", "(", "[", "np", ".", "abs", "(", "p", ".", "P", ")", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "sim", ".", "N_real", "]", "]", ")", "\n", "\n", "# want hyperbolic case to run so it raises exception", "\n", "times", "=", "np", ".", "linspace", "(", "0", ",", "Norbits", "*", "minP", ",", "Nout", ")", "\n", "triopairs", ",", "triotseries", "=", "[", "]", ",", "[", "]", "\n", "# axis_labels = ['']*26", "\n", "# axis_labels[0] = 'time'", "\n", "#7 are same as used for SPOCK (equivalent of old res_tseries), and following 18 are the 6 orbital elements for each of the 3 planets. ", "\n", "axis_labels", "=", "[", "'time'", ",", "'e+_near'", ",", "'e-_near'", ",", "'max_strength_mmr_near'", ",", "'e+_far'", ",", "'e-_far'", ",", "'max_strength_mmr_far'", ",", "'megno'", ",", "'a1'", ",", "'e1'", ",", "'i1'", ",", "'Omega1'", ",", "'pomega1'", ",", "'theta1'", ",", "'a2'", ",", "'e2'", ",", "'i2'", ",", "'Omega2'", ",", "'pomega2'", ",", "'theta2'", ",", "'a3'", ",", "'e3'", ",", "'i3'", ",", "'Omega3'", ",", "'pomega3'", ",", "'theta3'", "]", "\n", "\n", "for", "tr", ",", "trio", "in", "enumerate", "(", "trios", ")", ":", "# For each trio there are two adjacent pairs ", "\n", "        ", "triopairs", ".", "append", "(", "get_pairs", "(", "sim", ",", "trio", ")", ")", "\n", "triotseries", ".", "append", "(", "np", ".", "zeros", "(", "(", "Nout", ",", "26", ")", ")", "*", "np", ".", "nan", ")", "\n", "\n", "", "for", "i", ",", "time", "in", "enumerate", "(", "times", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "sim", ".", "integrate", "(", "time", ",", "exact_finish_time", "=", "0", ")", "\n", "", "except", "(", "rebound", ".", "Collision", ",", "rebound", ".", "Escape", ")", ":", "\n", "            ", "stable", "=", "False", "\n", "return", "triotseries", ",", "sim", ".", "t", "/", "minP", "\n", "\n", "", "for", "tseries", "in", "triotseries", ":", "\n", "            ", "tseries", "[", "i", ",", "0", "]", "=", "sim", ".", "t", "/", "minP", "# time", "\n", "\n", "", "for", "tr", ",", "trio", "in", "enumerate", "(", "trios", ")", ":", "\n", "            ", "pairs", "=", "triopairs", "[", "tr", "]", "\n", "tseries", "=", "triotseries", "[", "tr", "]", "\n", "populate_extended_trio", "(", "sim", ",", "trio", ",", "pairs", ",", "tseries", ",", "i", ",", "a10s", "[", "tr", "]", ",", "mmr", "=", "mmr", ",", "megno", "=", "megno", ")", "\n", "# if i == 0 and tr == 0:", "\n", "# populate_extended_trio(sim, trio, pairs, tseries, i, a10s[tr], axis_labels)", "\n", "# else:", "\n", "# populate_extended_trio(sim, trio, pairs, tseries, i, a10s[tr])", "\n", "\n", "# print(axis_labels)", "\n", "#triotseries = pd.DataFrame(data=triotseries, columns=axis_labels)", "\n", "", "", "stable", "=", "True", "\n", "return", "triotseries", ",", "stable", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.tseries_feature_functions.populate_trio": [[118, 131], ["enumerate", "sim.calculate_megno", "numpy.sqrt", "feature_functions.find_strongest_MMR", "numpy.sqrt", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.find_strongest_MMR"], ["", "def", "populate_trio", "(", "sim", ",", "trio", ",", "pairs", ",", "tseries", ",", "i", ")", ":", "\n", "    ", "Ns", "=", "3", "\n", "ps", "=", "sim", ".", "particles", "\n", "for", "q", ",", "[", "label", ",", "i1", ",", "i2", "]", "in", "enumerate", "(", "pairs", ")", ":", "\n", "        ", "m1", "=", "ps", "[", "i1", "]", ".", "m", "\n", "m2", "=", "ps", "[", "i2", "]", ".", "m", "\n", "e1x", ",", "e1y", "=", "ps", "[", "i1", "]", ".", "e", "*", "np", ".", "cos", "(", "ps", "[", "i1", "]", ".", "pomega", ")", ",", "ps", "[", "i1", "]", ".", "e", "*", "np", ".", "sin", "(", "ps", "[", "i1", "]", ".", "pomega", ")", "\n", "e2x", ",", "e2y", "=", "ps", "[", "i2", "]", ".", "e", "*", "np", ".", "cos", "(", "ps", "[", "i2", "]", ".", "pomega", ")", ",", "ps", "[", "i2", "]", ".", "e", "*", "np", ".", "sin", "(", "ps", "[", "i2", "]", ".", "pomega", ")", "\n", "tseries", "[", "i", ",", "Ns", "*", "q", "+", "1", "]", "=", "np", ".", "sqrt", "(", "(", "e2x", "-", "e1x", ")", "**", "2", "+", "(", "e2y", "-", "e1y", ")", "**", "2", ")", "\n", "tseries", "[", "i", ",", "Ns", "*", "q", "+", "2", "]", "=", "np", ".", "sqrt", "(", "(", "m1", "*", "e1x", "+", "m2", "*", "e2x", ")", "**", "2", "+", "(", "m1", "*", "e1y", "+", "m2", "*", "e2y", ")", "**", "2", ")", "/", "(", "m1", "+", "m2", ")", "\n", "j", ",", "k", ",", "tseries", "[", "i", ",", "Ns", "*", "q", "+", "3", "]", "=", "find_strongest_MMR", "(", "sim", ",", "i1", ",", "i2", ")", "\n", "\n", "", "tseries", "[", "i", ",", "7", "]", "=", "sim", ".", "calculate_megno", "(", ")", "# megno", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.tseries_feature_functions.get_tseries": [[132, 165], ["numpy.min", "numpy.linspace", "enumerate", "enumerate", "triopairs.append", "triotseries.append", "enumerate", "numpy.abs", "tseries_feature_functions.get_pairs", "sim.integrate", "tseries_feature_functions.populate_trio", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.get_pairs", "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.populate_trio"], ["", "def", "get_tseries", "(", "sim", ",", "args", ")", ":", "\n", "    ", "Norbits", "=", "args", "[", "0", "]", "\n", "Nout", "=", "args", "[", "1", "]", "\n", "trios", "=", "args", "[", "2", "]", "\n", "\n", "minP", "=", "np", ".", "min", "(", "[", "p", ".", "P", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "sim", ".", "N_real", "]", "]", ")", "\n", "\n", "# want hyperbolic case to run so it raises exception", "\n", "times", "=", "np", ".", "linspace", "(", "0", ",", "Norbits", "*", "np", ".", "abs", "(", "minP", ")", ",", "Nout", ")", "\n", "\n", "triopairs", ",", "triotseries", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "tr", ",", "trio", "in", "enumerate", "(", "trios", ")", ":", "# For each trio there are two adjacent pairs ", "\n", "        ", "triopairs", ".", "append", "(", "get_pairs", "(", "sim", ",", "trio", ")", ")", "\n", "triotseries", ".", "append", "(", "np", ".", "zeros", "(", "(", "Nout", ",", "8", ")", ")", "*", "np", ".", "nan", ")", "\n", "\n", "", "for", "i", ",", "time", "in", "enumerate", "(", "times", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "sim", ".", "integrate", "(", "time", ",", "exact_finish_time", "=", "0", ")", "\n", "", "except", "rebound", ".", "Collision", ":", "\n", "            ", "stable", "=", "False", "\n", "return", "triotseries", ",", "stable", "\n", "\n", "", "for", "tseries", "in", "triotseries", ":", "\n", "            ", "tseries", "[", "i", ",", "0", "]", "=", "sim", ".", "t", "/", "minP", "# time", "\n", "\n", "", "for", "tr", ",", "trio", "in", "enumerate", "(", "trios", ")", ":", "\n", "            ", "pairs", "=", "triopairs", "[", "tr", "]", "\n", "tseries", "=", "triotseries", "[", "tr", "]", "\n", "populate_trio", "(", "sim", ",", "trio", ",", "pairs", ",", "tseries", ",", "i", ")", "\n", "\n", "", "", "stable", "=", "True", "\n", "return", "triotseries", ",", "stable", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.tseries_feature_functions.features": [[166, 212], ["enumerate", "tseries_feature_functions.get_tseries", "zip", "collections.OrderedDict", "tseries_feature_functions.get_pairs", "enumerate", "triofeatures.append", "numpy.median", "numpy.median", "EPnear.std", "EPfar.std", "numpy.isnan().any", "numpy.median", "MEGNO[].std", "EMnear.std", "EMfar.std", "numpy.isnan", "int", "int"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.get_tseries", "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.get_pairs"], ["", "def", "features", "(", "sim", ",", "args", ")", ":", "\n", "    ", "Norbits", "=", "args", "[", "0", "]", "\n", "Nout", "=", "args", "[", "1", "]", "\n", "trios", "=", "args", "[", "2", "]", "\n", "\n", "ps", "=", "sim", ".", "particles", "\n", "triofeatures", "=", "[", "]", "\n", "for", "tr", ",", "trio", "in", "enumerate", "(", "trios", ")", ":", "\n", "        ", "features", "=", "OrderedDict", "(", ")", "\n", "pairs", "=", "get_pairs", "(", "sim", ",", "trio", ")", "\n", "for", "i", ",", "[", "label", ",", "i1", ",", "i2", "]", "in", "enumerate", "(", "pairs", ")", ":", "\n", "            ", "features", "[", "'EMcross'", "+", "label", "]", "=", "(", "ps", "[", "i2", "]", ".", "a", "-", "ps", "[", "i1", "]", ".", "a", ")", "/", "ps", "[", "i1", "]", ".", "a", "\n", "features", "[", "'EMfracstd'", "+", "label", "]", "=", "np", ".", "nan", "\n", "features", "[", "'EPstd'", "+", "label", "]", "=", "np", ".", "nan", "\n", "features", "[", "'MMRstrength'", "+", "label", "]", "=", "np", ".", "nan", "\n", "\n", "", "features", "[", "'MEGNO'", "]", "=", "np", ".", "nan", "\n", "features", "[", "'MEGNOstd'", "]", "=", "np", ".", "nan", "\n", "triofeatures", ".", "append", "(", "features", ")", "\n", "\n", "", "triotseries", ",", "stable", "=", "get_tseries", "(", "sim", ",", "args", ")", "\n", "if", "stable", "==", "False", ":", "\n", "        ", "return", "triofeatures", ",", "stable", "\n", "\n", "", "for", "features", ",", "tseries", "in", "zip", "(", "triofeatures", ",", "triotseries", ")", ":", "\n", "        ", "EMnear", "=", "tseries", "[", ":", ",", "1", "]", "\n", "EPnear", "=", "tseries", "[", ":", ",", "2", "]", "\n", "# cut out first value (init cond) to avoid cases", "\n", "# where user sets exactly b*n2 - a*n1 & strength is inf", "\n", "MMRstrengthnear", "=", "tseries", "[", "1", ":", ",", "3", "]", "\n", "EMfar", "=", "tseries", "[", ":", ",", "4", "]", "\n", "EPfar", "=", "tseries", "[", ":", ",", "5", "]", "\n", "MMRstrengthfar", "=", "tseries", "[", "1", ":", ",", "6", "]", "\n", "MEGNO", "=", "tseries", "[", ":", ",", "7", "]", "\n", "\n", "if", "not", "np", ".", "isnan", "(", "MEGNO", ")", ".", "any", "(", ")", ":", "# no nans", "\n", "            ", "features", "[", "'MEGNO'", "]", "=", "np", ".", "median", "(", "MEGNO", "[", "-", "int", "(", "Nout", "/", "10", ")", ":", "]", ")", "# smooth last 10% to remove oscillations around 2", "\n", "features", "[", "'MEGNOstd'", "]", "=", "MEGNO", "[", "int", "(", "Nout", "/", "5", ")", ":", "]", ".", "std", "(", ")", "\n", "", "features", "[", "'MMRstrengthnear'", "]", "=", "np", ".", "median", "(", "MMRstrengthnear", ")", "\n", "features", "[", "'MMRstrengthfar'", "]", "=", "np", ".", "median", "(", "MMRstrengthfar", ")", "\n", "features", "[", "'EMfracstdnear'", "]", "=", "EMnear", ".", "std", "(", ")", "/", "features", "[", "'EMcrossnear'", "]", "\n", "features", "[", "'EMfracstdfar'", "]", "=", "EMfar", ".", "std", "(", ")", "/", "features", "[", "'EMcrossfar'", "]", "\n", "features", "[", "'EPstdnear'", "]", "=", "EPnear", ".", "std", "(", ")", "\n", "features", "[", "'EPstdfar'", "]", "=", "EPfar", ".", "std", "(", ")", "\n", "\n", "", "return", "triofeatures", ",", "stable", "\n", "", ""]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.AMD_functions.F": [[5, 9], ["numpy.sqrt"], "function", ["None"], ["def", "F", "(", "e", ",", "alpha", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"Equation 35 of Laskar & Petit (2017)\"\"\"", "\n", "denom", "=", "np", ".", "sqrt", "(", "alpha", "*", "(", "1", "-", "e", "*", "e", ")", "+", "gamma", "*", "gamma", "*", "e", "*", "e", ")", "\n", "return", "alpha", "*", "e", "-", "1", "+", "alpha", "+", "gamma", "*", "e", "/", "denom", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.AMD_functions.AMD_crit": [[12, 31], ["AMD_functions.relative_AMD_crit", "sim2.copy", "sim2.copy.move_to_com", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.AMD_functions.relative_AMD_crit"], ["", "def", "AMD_crit", "(", "sim2", ",", "i1", ",", "i2", ")", ":", "# assumes i1.a < i2.a", "\n", "    ", "try", ":", "\n", "        ", "sim", "=", "sim2", ".", "copy", "(", ")", "\n", "sim", ".", "move_to_com", "(", ")", "# AMD calculations easiest in canonical heliocentric coordinates, but don't want to change original sim so copy", "\n", "", "except", ":", "# old version of REBOUND doesn't have a copy function (for random dataset), but all those were already moved to com so OK", "\n", "        ", "sim", "=", "sim2", "\n", "# returns AMD_crit dimensionalized to Lambdaout", "\n", "", "ps", "=", "sim", ".", "particles", "\n", "if", "ps", "[", "i1", "]", ".", "m", "==", "0.", "or", "ps", "[", "i2", "]", ".", "m", "==", "0", ":", "\n", "        ", "return", "0", "# if one particle is massless, any amount of AMD can take it to e=1, so AMDcrit = 0 (always AMD unstable)", "\n", "\n", "", "mu", "=", "sim", ".", "G", "*", "ps", "[", "0", "]", ".", "m", "\n", "alpha", "=", "ps", "[", "i1", "]", ".", "a", "/", "ps", "[", "i2", "]", ".", "a", "\n", "gamma", "=", "ps", "[", "i1", "]", ".", "m", "/", "ps", "[", "i2", "]", ".", "m", "\n", "LambdaPrime", "=", "ps", "[", "i2", "]", ".", "m", "*", "np", ".", "sqrt", "(", "mu", "*", "ps", "[", "i2", "]", ".", "a", ")", "\n", "curlyC", "=", "relative_AMD_crit", "(", "alpha", ",", "gamma", ")", "\n", "AMD_crit", "=", "curlyC", "*", "LambdaPrime", "# Eq 29 AMD_crit = C = curlyC*Lambda'", "\n", "\n", "return", "AMD_crit", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.AMD_functions.relative_AMD_crit": [[32, 43], ["numpy.min", "numpy.sin", "scipy.optimize.brenth", "numpy.arctan", "print", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "relative_AMD_crit", "(", "alpha", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"Equation 29\"\"\"", "\n", "e0", "=", "np", ".", "min", "(", "(", "1", ",", "1", "/", "alpha", "-", "1", ")", ")", "\n", "try", ":", "\n", "        ", "ec", "=", "brenth", "(", "F", ",", "0", ",", "e0", ",", "args", "=", "(", "alpha", ",", "gamma", ")", ")", "\n", "", "except", ":", "# can fail to converge", "\n", "        ", "print", "(", "'brenth failed: e0  = {0}, alpha = {1}, gamma= {2}'", ".", "format", "(", "e0", ",", "alpha", ",", "gamma", ")", ")", "\n", "return", "np", ".", "nan", "\n", "", "e1c", "=", "np", ".", "sin", "(", "np", ".", "arctan", "(", "gamma", "*", "ec", "/", "np", ".", "sqrt", "(", "alpha", "*", "(", "1", "-", "ec", "*", "ec", ")", ")", ")", ")", "\n", "curlyC", "=", "gamma", "*", "np", ".", "sqrt", "(", "alpha", ")", "*", "(", "1", "-", "np", ".", "sqrt", "(", "1", "-", "ec", "*", "ec", ")", ")", "+", "(", "1", "-", "np", ".", "sqrt", "(", "1", "-", "e1c", "*", "e1c", ")", ")", "\n", "return", "curlyC", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.AMD_functions.AMD": [[44, 60], ["sim2.copy.calculate_angular_momentum", "numpy.sqrt", "sim2.copy", "sim2.copy.move_to_com", "numpy.sqrt"], "function", ["None"], ["", "def", "AMD", "(", "sim2", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "sim", "=", "sim2", ".", "copy", "(", ")", "\n", "sim", ".", "move_to_com", "(", ")", "# AMD calculations easiest in canonical heliocentric coordinates, but don't want to change original sim so copy", "\n", "", "except", ":", "# old version of REBOUND doesn't have a copy function (for random dataset), but all those were already moved to com so OK", "\n", "        ", "sim", "=", "sim2", "\n", "", "ps", "=", "sim", ".", "particles", "\n", "Lx", ",", "Ly", ",", "Lz", "=", "sim", ".", "calculate_angular_momentum", "(", ")", "\n", "L", "=", "np", ".", "sqrt", "(", "Lx", "**", "2", "+", "Ly", "**", "2", "+", "Lz", "**", "2", ")", "\n", "Lcirc", "=", "0", "\n", "Mint", "=", "ps", "[", "0", "]", ".", "m", "\n", "for", "p", "in", "ps", "[", "1", ":", "sim", ".", "N_real", "]", ":", "# the exact choice of which a and masses to use doesn't matter for closely packed systems (only hierarchical)", "\n", "        ", "mred", "=", "p", ".", "m", "*", "Mint", "/", "(", "p", ".", "m", "+", "Mint", ")", "\n", "Lcirc", "+=", "mred", "*", "np", ".", "sqrt", "(", "sim", ".", "G", "*", "(", "p", ".", "m", "+", "Mint", ")", "*", "p", ".", "a", ")", "\n", "Mint", "+=", "p", ".", "m", "\n", "", "return", "Lcirc", "-", "L", "\n", "", ""]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.farey_sequence": [[6, 15], ["int", "sequence.append"], "function", ["None"], ["def", "farey_sequence", "(", "n", ")", ":", "\n", "    ", "\"\"\"Return the nth Farey sequence as order pairs of the form (N,D) where `N' is the numerator and `D' is the denominator.\"\"\"", "\n", "a", ",", "b", ",", "c", ",", "d", "=", "0", ",", "1", ",", "1", ",", "n", "\n", "sequence", "=", "[", "(", "a", ",", "b", ")", "]", "\n", "while", "(", "c", "<=", "n", ")", ":", "\n", "        ", "k", "=", "int", "(", "(", "n", "+", "b", ")", "/", "d", ")", "\n", "a", ",", "b", ",", "c", ",", "d", "=", "c", ",", "d", ",", "(", "k", "*", "c", "-", "a", ")", ",", "(", "k", "*", "d", "-", "b", ")", "\n", "sequence", ".", "append", "(", "(", "a", ",", "b", ")", ")", "\n", "", "return", "sequence", "\n", "", "def", "resonant_period_ratios", "(", "min_per_ratio", ",", "max_per_ratio", ",", "order", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.resonant_period_ratios": [[15, 29], ["int", "int", "range", "numpy.array", "numpy.array", "AttributeError", "AttributeError", "numpy.floor", "numpy.ceil", "list", "map", "feature_functions.farey_sequence", "float"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.farey_sequence"], ["", "def", "resonant_period_ratios", "(", "min_per_ratio", ",", "max_per_ratio", ",", "order", ")", ":", "\n", "    ", "\"\"\"Return the period ratios of all resonances up to order 'order' between 'min_per_ratio' and 'max_per_ratio' \"\"\"", "\n", "if", "min_per_ratio", "<", "0.", ":", "\n", "        ", "raise", "AttributeError", "(", "\"min_per_ratio of {0} passed to resonant_period_ratios can't be < 0\"", ".", "format", "(", "min_per_ratio", ")", ")", "\n", "", "if", "max_per_ratio", ">=", "1.", ":", "\n", "        ", "raise", "AttributeError", "(", "\"max_per_ratio of {0} passed to resonant_period_ratios can't be >= 1\"", ".", "format", "(", "max_per_ratio", ")", ")", "\n", "", "minJ", "=", "int", "(", "np", ".", "floor", "(", "1.", "/", "(", "1.", "-", "min_per_ratio", ")", ")", ")", "\n", "maxJ", "=", "int", "(", "np", ".", "ceil", "(", "1.", "/", "(", "1.", "-", "max_per_ratio", ")", ")", ")", "\n", "res_ratios", "=", "[", "(", "minJ", "-", "1", ",", "minJ", ")", "]", "\n", "for", "j", "in", "range", "(", "minJ", ",", "maxJ", ")", ":", "\n", "        ", "res_ratios", "=", "res_ratios", "+", "[", "(", "x", "[", "1", "]", "*", "j", "-", "x", "[", "1", "]", "+", "x", "[", "0", "]", ",", "x", "[", "1", "]", "*", "j", "+", "x", "[", "0", "]", ")", "for", "x", "in", "farey_sequence", "(", "order", ")", "[", "1", ":", "]", "]", "\n", "", "res_ratios", "=", "np", ".", "array", "(", "res_ratios", ")", "\n", "msk", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "x", ":", "min_per_ratio", "<", "x", "[", "0", "]", "/", "float", "(", "x", "[", "1", "]", ")", "<", "max_per_ratio", ",", "res_ratios", ")", ")", ")", "\n", "return", "res_ratios", "[", "msk", "]", "\n", "##########################", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.get_pairs": [[34, 44], ["sorted"], "function", ["None"], ["", "def", "get_pairs", "(", "sim", ",", "indices", ")", ":", "\n", "    ", "ps", "=", "sim", ".", "particles", "\n", "sortedindices", "=", "sorted", "(", "indices", ",", "key", "=", "lambda", "i", ":", "ps", "[", "i", "]", ".", "a", ")", "# sort from inner to outer", "\n", "EMcrossInner", "=", "(", "ps", "[", "sortedindices", "[", "1", "]", "]", ".", "a", "-", "ps", "[", "sortedindices", "[", "0", "]", "]", ".", "a", ")", "/", "ps", "[", "sortedindices", "[", "0", "]", "]", ".", "a", "\n", "EMcrossOuter", "=", "(", "ps", "[", "sortedindices", "[", "2", "]", "]", ".", "a", "-", "ps", "[", "sortedindices", "[", "1", "]", "]", ".", "a", ")", "/", "ps", "[", "sortedindices", "[", "1", "]", "]", ".", "a", "\n", "\n", "if", "EMcrossInner", "<", "EMcrossOuter", ":", "\n", "        ", "return", "[", "[", "'near'", ",", "sortedindices", "[", "0", "]", ",", "sortedindices", "[", "1", "]", "]", ",", "[", "'far'", ",", "sortedindices", "[", "1", "]", ",", "sortedindices", "[", "2", "]", "]", "]", "\n", "", "else", ":", "\n", "        ", "return", "[", "[", "'near'", ",", "sortedindices", "[", "1", "]", ",", "sortedindices", "[", "2", "]", "]", ",", "[", "'far'", ",", "sortedindices", "[", "0", "]", ",", "sortedindices", "[", "1", "]", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.find_strongest_MMR": [[45, 83], ["max", "min", "feature_functions.resonant_period_ratios", "numpy.sqrt", "numpy.abs", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.resonant_period_ratios"], ["", "", "def", "find_strongest_MMR", "(", "sim", ",", "i1", ",", "i2", ")", ":", "\n", "    ", "maxorder", "=", "2", "\n", "ps", "=", "sim", ".", "particles", "\n", "n1", "=", "ps", "[", "i1", "]", ".", "n", "\n", "n2", "=", "ps", "[", "i2", "]", ".", "n", "\n", "\n", "m1", "=", "ps", "[", "i1", "]", ".", "m", "/", "ps", "[", "0", "]", ".", "m", "\n", "m2", "=", "ps", "[", "i2", "]", ".", "m", "/", "ps", "[", "0", "]", ".", "m", "\n", "\n", "Pratio", "=", "n2", "/", "n1", "\n", "\n", "delta", "=", "0.03", "\n", "if", "Pratio", "<", "0", "or", "Pratio", ">", "1", ":", "# n < 0 = hyperbolic orbit, Pratio > 1 = orbits are crossing", "\n", "        ", "return", "np", ".", "nan", ",", "np", ".", "nan", ",", "np", ".", "nan", "\n", "\n", "", "minperiodratio", "=", "max", "(", "Pratio", "-", "delta", ",", "0.", ")", "\n", "maxperiodratio", "=", "min", "(", "Pratio", "+", "delta", ",", "0.99", ")", "# too many resonances close to 1", "\n", "res", "=", "resonant_period_ratios", "(", "minperiodratio", ",", "maxperiodratio", ",", "order", "=", "2", ")", "\n", "\n", "# Calculating EM exactly would have to be done in celmech for each j/k res below, and would slow things down. This is good enough for approx expression", "\n", "EM", "=", "np", ".", "sqrt", "(", "(", "ps", "[", "i1", "]", ".", "e", "*", "np", ".", "cos", "(", "ps", "[", "i1", "]", ".", "pomega", ")", "-", "ps", "[", "i2", "]", ".", "e", "*", "np", ".", "cos", "(", "ps", "[", "i2", "]", ".", "pomega", ")", ")", "**", "2", "+", "(", "ps", "[", "i1", "]", ".", "e", "*", "np", ".", "sin", "(", "ps", "[", "i1", "]", ".", "pomega", ")", "-", "ps", "[", "i2", "]", ".", "e", "*", "np", ".", "sin", "(", "ps", "[", "i2", "]", ".", "pomega", ")", ")", "**", "2", ")", "\n", "EMcross", "=", "(", "ps", "[", "i2", "]", ".", "a", "-", "ps", "[", "i1", "]", ".", "a", ")", "/", "ps", "[", "i1", "]", ".", "a", "\n", "\n", "j", ",", "k", ",", "maxstrength", "=", "np", ".", "nan", ",", "np", ".", "nan", ",", "0", "\n", "for", "a", ",", "b", "in", "res", ":", "\n", "        ", "nres", "=", "(", "b", "*", "n2", "-", "a", "*", "n1", ")", "/", "n1", "\n", "if", "nres", "==", "0", ":", "\n", "            ", "s", "=", "np", ".", "inf", "# still want to identify as strongest MMR if initial condition is exatly b*n2-a*n1 = 0", "\n", "", "else", ":", "\n", "            ", "s", "=", "np", ".", "abs", "(", "np", ".", "sqrt", "(", "m1", "+", "m2", ")", "*", "(", "EM", "/", "EMcross", ")", "**", "(", "(", "b", "-", "a", ")", "/", "2.", ")", "/", "nres", ")", "\n", "", "if", "s", ">", "maxstrength", ":", "\n", "            ", "j", "=", "b", "\n", "k", "=", "b", "-", "a", "\n", "maxstrength", "=", "s", "\n", "", "", "if", "maxstrength", "==", "0", ":", "\n", "        ", "maxstrength", "=", "np", ".", "nan", "\n", "\n", "", "return", "j", ",", "k", ",", "maxstrength", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.populate_trio": [[84, 97], ["enumerate", "sim.calculate_megno", "numpy.sqrt", "feature_functions.find_strongest_MMR", "numpy.sqrt", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.find_strongest_MMR"], ["", "def", "populate_trio", "(", "sim", ",", "trio", ",", "pairs", ",", "tseries", ",", "i", ")", ":", "\n", "    ", "Ns", "=", "3", "\n", "ps", "=", "sim", ".", "particles", "\n", "for", "q", ",", "[", "label", ",", "i1", ",", "i2", "]", "in", "enumerate", "(", "pairs", ")", ":", "\n", "        ", "m1", "=", "ps", "[", "i1", "]", ".", "m", "\n", "m2", "=", "ps", "[", "i2", "]", ".", "m", "\n", "e1x", ",", "e1y", "=", "ps", "[", "i1", "]", ".", "e", "*", "np", ".", "cos", "(", "ps", "[", "i1", "]", ".", "pomega", ")", ",", "ps", "[", "i1", "]", ".", "e", "*", "np", ".", "sin", "(", "ps", "[", "i1", "]", ".", "pomega", ")", "\n", "e2x", ",", "e2y", "=", "ps", "[", "i2", "]", ".", "e", "*", "np", ".", "cos", "(", "ps", "[", "i2", "]", ".", "pomega", ")", ",", "ps", "[", "i2", "]", ".", "e", "*", "np", ".", "sin", "(", "ps", "[", "i2", "]", ".", "pomega", ")", "\n", "tseries", "[", "i", ",", "Ns", "*", "q", "+", "1", "]", "=", "np", ".", "sqrt", "(", "(", "e2x", "-", "e1x", ")", "**", "2", "+", "(", "e2y", "-", "e1y", ")", "**", "2", ")", "\n", "tseries", "[", "i", ",", "Ns", "*", "q", "+", "2", "]", "=", "np", ".", "sqrt", "(", "(", "m1", "*", "e1x", "+", "m2", "*", "e2x", ")", "**", "2", "+", "(", "m1", "*", "e1y", "+", "m2", "*", "e2y", ")", "**", "2", ")", "/", "(", "m1", "+", "m2", ")", "\n", "j", ",", "k", ",", "tseries", "[", "i", ",", "Ns", "*", "q", "+", "3", "]", "=", "find_strongest_MMR", "(", "sim", ",", "i1", ",", "i2", ")", "\n", "\n", "", "tseries", "[", "i", ",", "7", "]", "=", "sim", ".", "calculate_megno", "(", ")", "# megno", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.get_tseries": [[98, 134], ["numpy.min", "numpy.linspace", "enumerate", "numpy.isnan", "enumerate", "triopairs.append", "triotseries.append", "enumerate", "numpy.abs", "feature_functions.get_pairs", "sim.integrate", "feature_functions.populate_trio", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.get_pairs", "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.populate_trio"], ["", "def", "get_tseries", "(", "sim", ",", "args", ")", ":", "\n", "    ", "Norbits", "=", "args", "[", "0", "]", "\n", "Nout", "=", "args", "[", "1", "]", "\n", "trios", "=", "args", "[", "2", "]", "\n", "\n", "minP", "=", "np", ".", "min", "(", "[", "p", ".", "P", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "sim", ".", "N_real", "]", "]", ")", "\n", "\n", "# want hyperbolic case to run so it raises exception", "\n", "times", "=", "np", ".", "linspace", "(", "0", ",", "Norbits", "*", "np", ".", "abs", "(", "minP", ")", ",", "Nout", ")", "\n", "\n", "triopairs", ",", "triotseries", "=", "[", "]", ",", "[", "]", "\n", "for", "tr", ",", "trio", "in", "enumerate", "(", "trios", ")", ":", "# For each trio there are two adjacent pairs ", "\n", "        ", "triopairs", ".", "append", "(", "get_pairs", "(", "sim", ",", "trio", ")", ")", "\n", "triotseries", ".", "append", "(", "np", ".", "zeros", "(", "(", "Nout", ",", "8", ")", ")", "*", "np", ".", "nan", ")", "\n", "\n", "", "if", "np", ".", "isnan", "(", "sim", ".", "dt", ")", ":", "# initially hyperbolic orbit, set in simsetup/set_integrator_and_timestep", "\n", "        ", "stable", "=", "False", "\n", "return", "triotseries", ",", "stable", "\n", "\n", "", "for", "i", ",", "time", "in", "enumerate", "(", "times", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "sim", ".", "integrate", "(", "time", ",", "exact_finish_time", "=", "0", ")", "\n", "", "except", "(", "rebound", ".", "Collision", ",", "rebound", ".", "Escape", ")", ":", "\n", "            ", "stable", "=", "False", "\n", "return", "triotseries", ",", "stable", "\n", "\n", "", "for", "tseries", "in", "triotseries", ":", "\n", "            ", "tseries", "[", "i", ",", "0", "]", "=", "sim", ".", "t", "/", "minP", "# time", "\n", "\n", "", "for", "tr", ",", "trio", "in", "enumerate", "(", "trios", ")", ":", "\n", "            ", "pairs", "=", "triopairs", "[", "tr", "]", "\n", "tseries", "=", "triotseries", "[", "tr", "]", "\n", "populate_trio", "(", "sim", ",", "trio", ",", "pairs", ",", "tseries", ",", "i", ")", "\n", "\n", "", "", "stable", "=", "True", "\n", "return", "triotseries", ",", "stable", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.features": [[135, 181], ["enumerate", "feature_functions.get_tseries", "zip", "collections.OrderedDict", "feature_functions.get_pairs", "enumerate", "triofeatures.append", "numpy.median", "numpy.median", "EPnear.std", "EPfar.std", "numpy.isnan().any", "numpy.median", "MEGNO[].std", "EMnear.std", "EMfar.std", "numpy.isnan", "int", "int"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.get_tseries", "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.get_pairs"], ["", "def", "features", "(", "sim", ",", "args", ")", ":", "\n", "    ", "Norbits", "=", "args", "[", "0", "]", "\n", "Nout", "=", "args", "[", "1", "]", "\n", "trios", "=", "args", "[", "2", "]", "\n", "\n", "ps", "=", "sim", ".", "particles", "\n", "triofeatures", "=", "[", "]", "\n", "for", "tr", ",", "trio", "in", "enumerate", "(", "trios", ")", ":", "\n", "        ", "features", "=", "OrderedDict", "(", ")", "\n", "pairs", "=", "get_pairs", "(", "sim", ",", "trio", ")", "\n", "for", "i", ",", "[", "label", ",", "i1", ",", "i2", "]", "in", "enumerate", "(", "pairs", ")", ":", "\n", "            ", "features", "[", "'EMcross'", "+", "label", "]", "=", "(", "ps", "[", "i2", "]", ".", "a", "-", "ps", "[", "i1", "]", ".", "a", ")", "/", "ps", "[", "i1", "]", ".", "a", "\n", "features", "[", "'EMfracstd'", "+", "label", "]", "=", "np", ".", "nan", "\n", "features", "[", "'EPstd'", "+", "label", "]", "=", "np", ".", "nan", "\n", "features", "[", "'MMRstrength'", "+", "label", "]", "=", "np", ".", "nan", "\n", "\n", "", "features", "[", "'MEGNO'", "]", "=", "np", ".", "nan", "\n", "features", "[", "'MEGNOstd'", "]", "=", "np", ".", "nan", "\n", "triofeatures", ".", "append", "(", "features", ")", "\n", "\n", "", "triotseries", ",", "stable", "=", "get_tseries", "(", "sim", ",", "args", ")", "\n", "if", "stable", "==", "False", ":", "\n", "        ", "return", "triofeatures", ",", "stable", "\n", "\n", "", "for", "features", ",", "tseries", "in", "zip", "(", "triofeatures", ",", "triotseries", ")", ":", "\n", "        ", "EMnear", "=", "tseries", "[", ":", ",", "1", "]", "\n", "EPnear", "=", "tseries", "[", ":", ",", "2", "]", "\n", "# cut out first value (init cond) to avoid cases", "\n", "# where user sets exactly b*n2 - a*n1 & strength is inf", "\n", "MMRstrengthnear", "=", "tseries", "[", "1", ":", ",", "3", "]", "\n", "EMfar", "=", "tseries", "[", ":", ",", "4", "]", "\n", "EPfar", "=", "tseries", "[", ":", ",", "5", "]", "\n", "MMRstrengthfar", "=", "tseries", "[", "1", ":", ",", "6", "]", "\n", "MEGNO", "=", "tseries", "[", ":", ",", "7", "]", "\n", "\n", "if", "not", "np", ".", "isnan", "(", "MEGNO", ")", ".", "any", "(", ")", ":", "# no nans", "\n", "            ", "features", "[", "'MEGNO'", "]", "=", "np", ".", "median", "(", "MEGNO", "[", "-", "int", "(", "Nout", "/", "10", ")", ":", "]", ")", "# smooth last 10% to remove oscillations around 2", "\n", "features", "[", "'MEGNOstd'", "]", "=", "MEGNO", "[", "int", "(", "Nout", "/", "5", ")", ":", "]", ".", "std", "(", ")", "\n", "", "features", "[", "'MMRstrengthnear'", "]", "=", "np", ".", "median", "(", "MMRstrengthnear", ")", "\n", "features", "[", "'MMRstrengthfar'", "]", "=", "np", ".", "median", "(", "MMRstrengthfar", ")", "\n", "features", "[", "'EMfracstdnear'", "]", "=", "EMnear", ".", "std", "(", ")", "/", "features", "[", "'EMcrossnear'", "]", "\n", "features", "[", "'EMfracstdfar'", "]", "=", "EMfar", ".", "std", "(", ")", "/", "features", "[", "'EMcrossfar'", "]", "\n", "features", "[", "'EPstdnear'", "]", "=", "EPnear", ".", "std", "(", ")", "\n", "features", "[", "'EPstdfar'", "]", "=", "EPfar", ".", "std", "(", ")", "\n", "\n", "", "return", "triofeatures", ",", "stable", "\n", "", ""]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.nbodyregressor.NbodyRegressor.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.nbodyregressor.NbodyRegressor.predict_instability_time": [[11, 96], ["isinstance", "enumerate", "s.copy.copy.copy", "numpy.min", "args.append", "numpy.isnan", "len", "nbodyregressor.NbodyRegressor.predict_instability_time.run"], "methods", ["None"], ["", "def", "predict_instability_time", "(", "self", ",", "sim", ",", "tmax", "=", "None", ",", "archive_filename", "=", "None", ",", "archive_interval", "=", "None", ",", "n_jobs", "=", "-", "1", ",", "match_training", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Predict instability time through N-body integration.\n\n        Parameters:\n\n        sim (rebound.Simulation, or list):   Orbital configuration(s) to test\n        tmax (float):               Maximum time to integrate for (in Simulation time units). If passing a list of sims, need to pass a list of tmax of equal length. Defaults to 1e9 innermost planet orbits.\n        archive_filename (str):     Path and filename to store a rebound SimulationArchive of snapshots\n        archive_interval (float):   Time between snapshots for SimulationArchive (in Simulation time units)\n        n_jobs (int):               Number of cores to use for calculation (only if passing more than one simulation). Default: Use all available cores. \n        match_training (bool):      In order to match the exact chaotic trajectory given an input orbital configuration from our training set, need to set match_training=True. False gives an equally valid chaotic realization, and gives a factor of ~2 speedup in evaluation.\n\n        Returns:\n\n        float:  Time of instability (Hill sphere crossing), in Simulation time units, or tmax if stable\n        int:    1 if integration reached tmax, 0 if Hill spheres crossed\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "sim", ",", "rebound", ".", "Simulation", ")", ":", "\n", "            ", "sim", "=", "[", "sim", "]", "\n", "tmax", "=", "[", "tmax", "]", "\n", "", "else", ":", "\n", "            ", "if", "tmax", "is", "None", ":", "\n", "                ", "tmax", "=", "[", "None", "]", "*", "len", "(", "sim", ")", "\n", "", "if", "len", "(", "tmax", ")", "!=", "len", "(", "sim", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"When passing multiple simulations, need to pass a list for tmax of the same length (or not pass tmax to default to 10^9 innermost planet orbits for all simulations)\"", ")", "\n", "\n", "", "", "args", "=", "[", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "sim", ")", ":", "\n", "            ", "s", "=", "s", ".", "copy", "(", ")", "\n", "if", "match_training", "==", "True", ":", "\n", "                ", "init_sim_parameters", "(", "s", ")", "\n", "", "else", ":", "\n", "                ", "init_sim_parameters", "(", "s", ",", "megno", "=", "False", ",", "safe_mode", "=", "0", ")", "\n", "", "minP", "=", "np", ".", "min", "(", "[", "p", ".", "P", "for", "p", "in", "s", ".", "particles", "[", "1", ":", "s", ".", "N_real", "]", "]", ")", "\n", "if", "tmax", "[", "i", "]", "is", "None", ":", "\n", "                ", "tmax", "[", "i", "]", "=", "1e9", "*", "minP", "\n", "", "if", "archive_filename", ":", "\n", "                ", "if", "archive_interval", "is", "None", ":", "\n", "                    ", "archive_interval", "=", "tmax", "[", "i", "]", "/", "1000", "\n", "", "if", "len", "(", "sim", ")", "==", "1", ":", "# single sim", "\n", "                    ", "s", ".", "automateSimulationArchive", "(", "archive_filename", ",", "archive_interval", ",", "deletefile", "=", "True", ")", "\n", "", "else", ":", "# strip final extension and add an index for each simarchive", "\n", "                    ", "ext", "=", "archive_filename", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "len_ext", "=", "len", "(", "ext", ")", "+", "1", "\n", "filename", "=", "\"{0}_{1}.{2}\"", ".", "format", "(", "archive_filename", "[", ":", "-", "len_ext", "]", ",", "i", ",", "ext", ")", "\n", "s", ".", "automateSimulationArchive", "(", "filename", ",", "archive_interval", ",", "deletefile", "=", "True", ")", "\n", "", "", "args", ".", "append", "(", "[", "s", ",", "tmax", "[", "i", "]", "]", ")", "\n", "\n", "", "def", "run", "(", "params", ")", ":", "\n", "            ", "sim", ",", "tmax", "=", "params", "\n", "if", "np", ".", "isnan", "(", "sim", ".", "dt", ")", ":", "# sim.dt set to nan for hyperbolic initial conditions in simsetup/set_integrator_and_timestep", "\n", "                ", "return", "np", ".", "nan", "\n", "", "try", ":", "\n", "                ", "sim", ".", "integrate", "(", "tmax", ",", "exact_finish_time", "=", "0", ")", "\n", "", "except", "(", "rebound", ".", "Collision", ",", "rebound", ".", "Escape", ")", ":", "\n", "                ", "if", "sim", ".", "_simulationarchive_filename", ":", "\n", "                    ", "sim", ".", "simulationarchive_snapshot", "(", "sim", ".", "_simulationarchive_filename", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "", "return", "sim", ".", "t", "\n", "\n", "", "return", "tmax", "\n", "\n", "", "if", "len", "(", "args", ")", "==", "1", ":", "# single sim", "\n", "            ", "tinst", "=", "run", "(", "args", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "n_jobs", "==", "-", "1", ":", "\n", "                ", "n_jobs", "=", "cpu_count", "(", ")", "\n", "", "pool", "=", "ThreadPool", "(", "n_jobs", ")", "\n", "tinst", "=", "np", ".", "array", "(", "pool", ".", "map", "(", "run", ",", "args", ")", ")", "\n", "\n", "# Uncertainty estimates come from Hussain & Tamayo 2020. Extra factor of sqrt(2) comes from fact that in addition to having a spread in instability times from chaos, we don't know where the mean is from a single integration. See paper", "\n", "", "lower", "=", "10", "**", "(", "np", ".", "log10", "(", "tinst", ")", "-", "np", ".", "sqrt", "(", "2", ")", "*", "0.43", ")", "\n", "upper", "=", "10", "**", "(", "np", ".", "log10", "(", "tinst", ")", "+", "np", ".", "sqrt", "(", "2", ")", "*", "0.43", ")", "\n", "\n", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "if", "tinst", "==", "tmax", "[", "0", "]", ":", "\n", "                ", "lower", "=", "0", "\n", "upper", "=", "0", "\n", "", "", "else", ":", "# set confidence intervals for all sims that reached tmax to zero ", "\n", "            ", "tmax", "=", "np", ".", "array", "(", "tmax", ")", "\n", "lower", "[", "tinst", "==", "tmax", "]", "=", "0", "\n", "upper", "[", "tinst", "==", "tmax", "]", "=", "0", "\n", "\n", "", "return", "tinst", ",", "lower", ",", "upper", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.nbodyregressor.NbodyRegressor.predict_stable": [[97, 125], ["nbodyregressor.NbodyRegressor.predict_instability_time", "stable.astype", "int"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time"], ["", "def", "predict_stable", "(", "self", ",", "sim", ",", "tmax", "=", "None", ",", "archive_filename", "=", "None", ",", "archive_interval", "=", "None", ",", "n_jobs", "=", "-", "1", ",", "match_training", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Predict whether system is stable up to time=tmax through N-body integration.\n\n        Parameters:\n\n        sim (rebound.Simulation):   Orbital configuration to test\n        tmax (float):               Maximum time to integrate for (in Simulation time units) \n        archive_filename (str):     Path and filename to store a rebound SimulationArchive of snapshots\n        archive_interval (float):   Time between snapshots for SimulationArchive (in Simulation time units)\n        n_jobs (int):               Number of cores to use for calculation (only if passing more than one simulation). Default: Use all available cores. \n        match_training (bool):      In order to match the exact chaotic trajectory given an input orbital configuration from our training set, need to set match_training=True. False gives an equally valid chaotic realization, and gives a factor of ~2 speedup in evaluation.\n\n        Returns:\n\n        float:  Time of instability (Hill sphere crossing), in Simulation time units, or tmax if stable\n        int:    1 if integration reached tmax, 0 if Hill spheres crossed\n        \"\"\"", "\n", "\n", "tinst", ",", "lower", ",", "upper", "=", "self", ".", "predict_instability_time", "(", "sim", ",", "tmax", ",", "archive_filename", ",", "archive_interval", ",", "n_jobs", ",", "match_training", ")", "\n", "# If tmax == None, each sim can have different tmaxs", "\n", "# Use fact that if confidence intervals == 0, we hit tmax limit", "\n", "# (lower = np.nan if error, >0 if hit instability)", "\n", "stable", "=", "(", "lower", "==", "0", ")", "\n", "try", ":", "\n", "            ", "return", "stable", ".", "astype", "(", "int", ")", "\n", "", "except", ":", "\n", "            ", "return", "int", "(", "stable", ")", "# single simulation", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.featureclassifier.FeatureClassifier.__init__": [[11, 15], ["os.path.dirname", "xgboost.XGBClassifier", "featureclassifier.FeatureClassifier.model.load_model"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "modelfile", "=", "'featureclassifier.json'", ")", ":", "\n", "        ", "pwd", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "self", ".", "model", "=", "XGBClassifier", "(", ")", "\n", "self", ".", "model", ".", "load_model", "(", "pwd", "+", "'/models/'", "+", "modelfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.featureclassifier.FeatureClassifier.check_errors": [[16, 19], ["AttributeError"], "methods", ["None"], ["", "def", "check_errors", "(", "self", ",", "sim", ")", ":", "\n", "        ", "if", "sim", ".", "N_real", "<", "4", ":", "\n", "            ", "raise", "AttributeError", "(", "\"SPOCK Error: SPOCK only applicable to systems with 3 or more planets\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.featureclassifier.FeatureClassifier.predict_stable": [[20, 62], ["featureclassifier.FeatureClassifier.generate_features", "numpy.array", "int", "numpy.min.reshape", "numpy.min", "numpy.array", "len", "featureclassifier.FeatureClassifier.model.predict_proba", "numpy.array", "len", "trio.values"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.featureclassifier.FeatureClassifier.generate_features"], ["", "", "def", "predict_stable", "(", "self", ",", "sim", ",", "n_jobs", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"\n        Predict whether passed simulation will be stable over 10^9 orbits of the innermost planet.\n\n        Parameters:\n\n        sim (rebound.Simulation): Orbital configuration to test\n        n_jobs (int):               Number of cores to use for calculation (only if passing more than one simulation). Default: Use all available cores. \n\n        Returns:\n\n        float:  Estimated probability of stability. Will return exactly zero if configuration goes \n                unstable within first 10^4 orbits.\n\n        \"\"\"", "\n", "res", "=", "self", ".", "generate_features", "(", "sim", ",", "n_jobs", "=", "n_jobs", ")", "\n", "\n", "try", ":", "# separate the feature dictionaries from the bool for whether it was stable over short integration", "\n", "            ", "stable", "=", "np", ".", "array", "(", "[", "r", "[", "1", "]", "for", "r", "in", "res", "]", ")", "\n", "features", "=", "[", "r", "[", "0", "]", "for", "r", "in", "res", "]", "\n", "Nsims", "=", "len", "(", "sim", ")", "\n", "", "except", ":", "\n", "            ", "stable", "=", "np", ".", "array", "(", "[", "res", "[", "1", "]", "]", ")", "\n", "features", "=", "[", "res", "[", "0", "]", "]", "\n", "Nsims", "=", "1", "\n", "\n", "# We take the small hit of evaluating XGBoost for all systems, and overwrite prob=0 for ones that went unstable in the short integration at the end", "\n", "# array of Ntrios x 10 features to evaluate with XGboost (Nsims*Ntriospersim x 10 features)", "\n", "", "featurevals", "=", "np", ".", "array", "(", "[", "[", "val", "for", "val", "in", "trio", ".", "values", "(", ")", "]", "for", "system", "in", "features", "for", "trio", "in", "system", "]", ")", "\n", "probs", "=", "self", ".", "model", ".", "predict_proba", "(", "featurevals", ")", "[", ":", ",", "1", "]", "# take 2nd column for probability it belongs to stable class", "\n", "# XGBoost evaluated a flattened list of all trios, reshape so that trios in same sim grouped", "\n", "trios_per_sim", "=", "int", "(", "len", "(", "probs", ")", "/", "Nsims", ")", "\n", "probs", "=", "probs", ".", "reshape", "(", "(", "Nsims", ",", "trios_per_sim", ")", ")", "\n", "# Take the minimum probability of stability within the trios for each simulation", "\n", "probs", "=", "np", ".", "min", "(", "probs", ",", "axis", "=", "1", ")", "\n", "# Set probabilities for systems that went unstable within short integration to exactly zero", "\n", "probs", "[", "~", "stable", "]", "=", "0", "\n", "\n", "if", "Nsims", "==", "1", ":", "\n", "            ", "return", "probs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.featureclassifier.FeatureClassifier.generate_features": [[63, 110], ["isinstance", "len", "ValueError", "s.copy.copy.copy", "simsetup.init_sim_parameters", "numpy.min", "featureclassifier.FeatureClassifier.check_errors", "args.append", "feature_functions.features", "len", "featureclassifier.FeatureClassifier.generate_features.run"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.init_sim_parameters", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.check_errors", "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.features"], ["", "", "def", "generate_features", "(", "self", ",", "sim", ",", "n_jobs", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"\n        Generates the set of summary features used by the feature classifier for prediction. \n\n        Parameters:\n\n        sim (rebound.Simulation): Orbital configuration to test\n        n_jobs (int):               Number of cores to use for calculation (only if passing more than one simulation). Default: Use all available cores. \n\n        Returns:\n\n        List of OrderedDicts:   A list of sets of features for each adjacent trio of planets in system.\n                                Each set of features is an ordered dictionary of 10 summary features. See paper.\n       \n        stable (int):           An integer for whether the N-body integration survived the 10^4 orbits (1) or \n                                went unstable (0).\n        \"\"\"", "\n", "if", "isinstance", "(", "sim", ",", "rebound", ".", "Simulation", ")", ":", "\n", "            ", "sim", "=", "[", "sim", "]", "\n", "\n", "", "args", "=", "[", "]", "\n", "if", "len", "(", "set", "(", "[", "s", ".", "N_real", "for", "s", "in", "sim", "]", ")", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"If running over many sims at once, they must have the same number of particles\"", ")", "\n", "", "for", "s", "in", "sim", ":", "\n", "            ", "s", "=", "s", ".", "copy", "(", ")", "\n", "init_sim_parameters", "(", "s", ")", "\n", "minP", "=", "np", ".", "min", "(", "[", "p", ".", "P", "for", "p", "in", "s", ".", "particles", "[", "1", ":", "s", ".", "N_real", "]", "]", ")", "\n", "self", ".", "check_errors", "(", "s", ")", "\n", "trios", "=", "[", "[", "j", ",", "j", "+", "1", ",", "j", "+", "2", "]", "for", "j", "in", "range", "(", "1", ",", "s", ".", "N_real", "-", "2", ")", "]", "# list of adjacent trios   ", "\n", "featureargs", "=", "[", "10000", ",", "80", ",", "trios", "]", "\n", "args", ".", "append", "(", "[", "s", ",", "featureargs", "]", ")", "\n", "\n", "", "def", "run", "(", "params", ")", ":", "\n", "            ", "sim", ",", "featureargs", "=", "params", "\n", "triofeatures", ",", "stable", "=", "features", "(", "sim", ",", "featureargs", ")", "\n", "return", "triofeatures", ",", "stable", "\n", "\n", "", "if", "len", "(", "args", ")", "==", "1", ":", "# single sim", "\n", "            ", "res", "=", "run", "(", "args", "[", "0", "]", ")", "# stable will be 0 if an orbit is hyperbolic", "\n", "", "else", ":", "\n", "            ", "if", "n_jobs", "==", "-", "1", ":", "\n", "                ", "n_jobs", "=", "cpu_count", "(", ")", "\n", "", "pool", "=", "ThreadPool", "(", "n_jobs", ")", "\n", "res", "=", "pool", ".", "map", "(", "run", ",", "args", ")", "\n", "pool", ".", "terminate", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.check_hyperbolic": [[4, 11], ["sim.calculate_orbits", "numpy.min"], "function", ["None"], ["def", "check_hyperbolic", "(", "sim", ")", ":", "\n", "    ", "orbits", "=", "sim", ".", "calculate_orbits", "(", ")", "\n", "amin", "=", "np", ".", "min", "(", "[", "o", ".", "a", "for", "o", "in", "orbits", "]", ")", "\n", "if", "amin", "<", "0", ":", "# at least one orbit is hyperbolic (a<0)", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.check_valid_sim": [[12, 23], ["isinstance", "numpy.array", "numpy.min", "AttributeError", "numpy.max", "AttributeError"], "function", ["None"], ["", "", "def", "check_valid_sim", "(", "sim", ")", ":", "\n", "    ", "assert", "isinstance", "(", "sim", ",", "rebound", ".", "Simulation", ")", "\n", "ps", "=", "sim", ".", "particles", "\n", "ms", "=", "np", ".", "array", "(", "[", "p", ".", "m", "for", "p", "in", "sim", ".", "particles", "[", ":", "sim", ".", "N_real", "]", "]", ")", "\n", "if", "np", ".", "min", "(", "ms", ")", "<", "0", ":", "# at least one body has a mass < 0", "\n", "        ", "raise", "AttributeError", "(", "\"SPOCK Error: Particles in sim passed to spock_features had negative masses\"", ")", "\n", "\n", "", "if", "np", ".", "max", "(", "ms", ")", "!=", "ms", "[", "0", "]", ":", "\n", "        ", "raise", "AttributeError", "(", "\"SPOCK Error: Particle at index 0 must be the primary (dominant mass)\"", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.set_integrator_and_timestep": [[24, 37], ["numpy.array", "numpy.array", "numpy.max", "numpy.min", "numpy.max", "numpy.sqrt"], "function", ["None"], ["", "def", "set_integrator_and_timestep", "(", "sim", ")", ":", "\n", "    ", "Ps", "=", "np", ".", "array", "(", "[", "p", ".", "P", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "sim", ".", "N_real", "]", "]", ")", "\n", "es", "=", "np", ".", "array", "(", "[", "p", ".", "e", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "sim", ".", "N_real", "]", "]", ")", "\n", "if", "np", ".", "max", "(", "es", ")", "<", "1", ":", "\n", "        ", "minTperi", "=", "np", ".", "min", "(", "Ps", "*", "(", "1", "-", "es", ")", "**", "1.5", "/", "np", ".", "sqrt", "(", "1", "+", "es", ")", ")", "# min peri passage time", "\n", "sim", ".", "dt", "=", "0.05", "*", "minTperi", "# Wisdom 2015 suggests 0.05", "\n", "", "else", ":", "# hyperbolic orbit ", "\n", "        ", "sim", ".", "dt", "=", "np", ".", "nan", "# so tseries gives nans, but still always gives same shape array", "\n", "\n", "", "if", "np", ".", "max", "(", "es", ")", ">", "0.99", ":", "# avoid stall with WHFAST for e~1", "\n", "        ", "sim", ".", "integrator", "=", "\"ias15\"", "\n", "", "else", ":", "\n", "        ", "sim", ".", "integrator", "=", "\"whfast\"", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.init_sim_parameters": [[38, 69], ["simsetup.check_valid_sim", "numpy.array().max", "simsetup.set_integrator_and_timestep", "sim.move_to_com", "sim.init_megno", "numpy.array"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.check_valid_sim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.set_integrator_and_timestep"], ["", "", "def", "init_sim_parameters", "(", "sim", ",", "megno", "=", "True", ",", "safe_mode", "=", "1", ")", ":", "\n", "# if megno=False and safe_mode=0, integration will be 2x faster. But means we won't get the same trajectory realization for the systems in the training set, but rather a different equally valid realization. We've tested that this doesn't affect the performance of the model (as it shouldn't!).", "\n", "\n", "    ", "check_valid_sim", "(", "sim", ")", "\n", "\n", "try", ":", "\n", "        ", "sim", ".", "collision", "=", "'line'", "# use line if using newer version of REBOUND", "\n", "", "except", ":", "\n", "        ", "sim", ".", "collision", "=", "'direct'", "# fall back for older versions", "\n", "\n", "", "maxd", "=", "np", ".", "array", "(", "[", "p", ".", "d", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "sim", ".", "N_real", "]", "]", ")", ".", "max", "(", ")", "\n", "sim", ".", "exit_max_distance", "=", "100", "*", "maxd", "\n", "\n", "sim", ".", "ri_whfast", ".", "keep_unsynchronized", "=", "0", "\n", "sim", ".", "ri_whfast", ".", "safe_mode", "=", "safe_mode", "\n", "\n", "if", "sim", ".", "N_var", "==", "0", "and", "megno", ":", "# no variational particles", "\n", "        ", "sim", ".", "init_megno", "(", "seed", "=", "0", ")", "\n", "\n", "", "set_integrator_and_timestep", "(", "sim", ")", "\n", "\n", "# Set particle radii to their individual Hill radii. ", "\n", "# Exact collision condition doesn't matter, but this behaves at extremes.", "\n", "# Imagine huge M1, tiny M2 and M3. Don't want to set middle planet's Hill ", "\n", "# sphere to mutual hill radius with huge M1 when catching collisions w/ M3", "\n", "\n", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "sim", ".", "N_real", "]", ":", "\n", "        ", "rH", "=", "p", ".", "a", "*", "(", "p", ".", "m", "/", "3.", "/", "sim", ".", "particles", "[", "0", "]", ".", "m", ")", "**", "(", "1.", "/", "3.", ")", "\n", "p", ".", "r", "=", "rH", "\n", "\n", "", "sim", ".", "move_to_com", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.CustomOneCycleLR.__init__": [[28, 105], ["spock_reg_model.CustomOneCycleLR._format_param", "super().__init__", "isinstance", "TypeError", "ValueError", "float", "float", "ValueError", "ValueError", "enumerate", "spock_reg_model.CustomOneCycleLR._format_param", "spock_reg_model.CustomOneCycleLR._format_param", "isinstance", "ValueError", "zip", "ValueError", "ValueError", "ValueError", "type", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.CustomOneCycleLR._format_param", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.__init__", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.CustomOneCycleLR._format_param", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.CustomOneCycleLR._format_param"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ",", "\n", "max_lr", ",", "\n", "swa_steps_start", ",", "\n", "pct_start", "=", "0.3", ",", "\n", "anneal_strategy", "=", "'cos'", ",", "\n", "cycle_momentum", "=", "True", ",", "\n", "base_momentum", "=", "0.85", ",", "\n", "max_momentum", "=", "0.95", ",", "\n", "div_factor", "=", "25.", ",", "\n", "final_div_factor", "=", "1e4", ",", "\n", "last_epoch", "=", "-", "1", ")", ":", "\n", "\n", "        ", "total_steps", "=", "swa_steps_start", "#Just fix afterwards.", "\n", "epochs", "=", "None", "\n", "steps_per_epoch", "=", "None", "\n", "# Validate optimizer", "\n", "if", "not", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'{} is not an Optimizer'", ".", "format", "(", "\n", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "# Validate total_steps", "\n", "if", "total_steps", "is", "None", "and", "epochs", "is", "None", "and", "steps_per_epoch", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You must define either total_steps OR (epochs AND steps_per_epoch)\"", ")", "\n", "", "elif", "total_steps", "is", "not", "None", ":", "\n", "            ", "if", "total_steps", "<=", "0", "or", "not", "isinstance", "(", "total_steps", ",", "int", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Expected non-negative integer total_steps, but got {}\"", ".", "format", "(", "total_steps", ")", ")", "\n", "", "self", ".", "total_steps", "=", "total_steps", "\n", "", "else", ":", "\n", "            ", "if", "epochs", "<=", "0", "or", "not", "isinstance", "(", "epochs", ",", "int", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Expected non-negative integer epochs, but got {}\"", ".", "format", "(", "epochs", ")", ")", "\n", "", "if", "steps_per_epoch", "<=", "0", "or", "not", "isinstance", "(", "steps_per_epoch", ",", "int", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Expected non-negative integer steps_per_epoch, but got {}\"", ".", "format", "(", "steps_per_epoch", ")", ")", "\n", "", "self", ".", "total_steps", "=", "epochs", "*", "steps_per_epoch", "\n", "", "self", ".", "step_size_up", "=", "float", "(", "pct_start", "*", "self", ".", "total_steps", ")", "-", "1", "\n", "self", ".", "step_size_down", "=", "float", "(", "self", ".", "total_steps", "-", "self", ".", "step_size_up", ")", "-", "1", "\n", "\n", "# Validate pct_start", "\n", "if", "pct_start", "<", "0", "or", "pct_start", ">", "1", "or", "not", "isinstance", "(", "pct_start", ",", "float", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected float between 0 and 1 pct_start, but got {}\"", ".", "format", "(", "pct_start", ")", ")", "\n", "\n", "# Validate anneal_strategy", "\n", "", "if", "anneal_strategy", "not", "in", "[", "'cos'", ",", "'linear'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"anneal_strategy must by one of 'cos' or 'linear', instead got {}\"", ".", "format", "(", "anneal_strategy", ")", ")", "\n", "", "elif", "anneal_strategy", "==", "'cos'", ":", "\n", "            ", "self", ".", "anneal_func", "=", "self", ".", "_annealing_cos", "\n", "", "elif", "anneal_strategy", "==", "'linear'", ":", "\n", "            ", "self", ".", "anneal_func", "=", "self", ".", "_annealing_linear", "\n", "\n", "# Initialize learning rate variables", "\n", "", "max_lrs", "=", "self", ".", "_format_param", "(", "'max_lr'", ",", "self", ".", "optimizer", ",", "max_lr", ")", "\n", "if", "last_epoch", "==", "-", "1", ":", "\n", "            ", "for", "idx", ",", "group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "group", "[", "'initial_lr'", "]", "=", "max_lrs", "[", "idx", "]", "/", "div_factor", "\n", "group", "[", "'max_lr'", "]", "=", "max_lrs", "[", "idx", "]", "\n", "group", "[", "'min_lr'", "]", "=", "group", "[", "'initial_lr'", "]", "/", "final_div_factor", "\n", "\n", "# Initialize momentum variables", "\n", "", "", "self", ".", "cycle_momentum", "=", "cycle_momentum", "\n", "if", "self", ".", "cycle_momentum", ":", "\n", "            ", "if", "'momentum'", "not", "in", "self", ".", "optimizer", ".", "defaults", "and", "'betas'", "not", "in", "self", ".", "optimizer", ".", "defaults", ":", "\n", "                ", "raise", "ValueError", "(", "'optimizer must support momentum with `cycle_momentum` option enabled'", ")", "\n", "", "self", ".", "use_beta1", "=", "'betas'", "in", "self", ".", "optimizer", ".", "defaults", "\n", "max_momentums", "=", "self", ".", "_format_param", "(", "'max_momentum'", ",", "optimizer", ",", "max_momentum", ")", "\n", "base_momentums", "=", "self", ".", "_format_param", "(", "'base_momentum'", ",", "optimizer", ",", "base_momentum", ")", "\n", "if", "last_epoch", "==", "-", "1", ":", "\n", "                ", "for", "m_momentum", ",", "b_momentum", ",", "group", "in", "zip", "(", "max_momentums", ",", "base_momentums", ",", "optimizer", ".", "param_groups", ")", ":", "\n", "                    ", "if", "self", ".", "use_beta1", ":", "\n", "                        ", "_", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "group", "[", "'betas'", "]", "=", "(", "m_momentum", ",", "beta2", ")", "\n", "", "else", ":", "\n", "                        ", "group", "[", "'momentum'", "]", "=", "m_momentum", "\n", "", "group", "[", "'max_momentum'", "]", "=", "m_momentum", "\n", "group", "[", "'base_momentum'", "]", "=", "b_momentum", "\n", "\n", "", "", "", "super", "(", "CustomOneCycleLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.CustomOneCycleLR._format_param": [[106, 115], ["isinstance", "len", "len", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_format_param", "(", "self", ",", "name", ",", "optimizer", ",", "param", ")", ":", "\n", "        ", "\"\"\"Return correctly formatted lr/momentum for each param group.\"\"\"", "\n", "if", "isinstance", "(", "param", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "len", "(", "param", ")", "!=", "len", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"expected {} values for {}, got {}\"", ".", "format", "(", "\n", "len", "(", "optimizer", ".", "param_groups", ")", ",", "name", ",", "len", "(", "param", ")", ")", ")", "\n", "", "return", "param", "\n", "", "else", ":", "\n", "            ", "return", "[", "param", "]", "*", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.CustomOneCycleLR._annealing_cos": [[116, 122], ["math.cos", "math.cos", "math.cos", "math.cos"], "methods", ["None"], ["", "", "def", "_annealing_cos", "(", "self", ",", "start", ",", "end", ",", "pct", ")", ":", "\n", "        ", "\"Cosine anneal from `start` to `end` as pct goes from 0.0 to 1.0.\"", "\n", "if", "pct", ">=", "1.0", ":", "\n", "            ", "return", "end", "\n", "", "cos_out", "=", "math", ".", "cos", "(", "math", ".", "pi", "*", "pct", ")", "+", "1", "\n", "return", "end", "+", "(", "start", "-", "end", ")", "/", "2.0", "*", "cos_out", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.CustomOneCycleLR._annealing_linear": [[123, 128], ["None"], "methods", ["None"], ["", "def", "_annealing_linear", "(", "self", ",", "start", ",", "end", ",", "pct", ")", ":", "\n", "        ", "\"Linearly anneal from `start` to `end` as pct goes from 0.0 to 1.0.\"", "\n", "if", "pct", ">=", "1.0", ":", "\n", "            ", "return", "end", "\n", "", "return", "(", "end", "-", "start", ")", "*", "pct", "+", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.CustomOneCycleLR.get_lr": [[129, 159], ["warnings.warn", "ValueError", "lrs.append", "spock_reg_model.CustomOneCycleLR.anneal_func", "spock_reg_model.CustomOneCycleLR.anneal_func", "spock_reg_model.CustomOneCycleLR.anneal_func", "spock_reg_model.CustomOneCycleLR.anneal_func"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "_get_lr_called_within_step", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"To get the last learning rate computed by the scheduler, \"", "\n", "\"please use `get_last_lr()`.\"", ",", "DeprecationWarning", ")", "\n", "\n", "", "lrs", "=", "[", "]", "\n", "step_num", "=", "self", ".", "last_epoch", "\n", "if", "step_num", ">", "self", ".", "total_steps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Tried to step {} times. The specified number of total steps is {}\"", "\n", ".", "format", "(", "step_num", "+", "1", ",", "self", ".", "total_steps", ")", ")", "\n", "", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "if", "step_num", "<=", "self", ".", "step_size_up", ":", "\n", "                ", "computed_lr", "=", "self", ".", "anneal_func", "(", "group", "[", "'initial_lr'", "]", ",", "group", "[", "'max_lr'", "]", ",", "step_num", "/", "self", ".", "step_size_up", ")", "\n", "if", "self", ".", "cycle_momentum", ":", "\n", "                    ", "computed_momentum", "=", "self", ".", "anneal_func", "(", "group", "[", "'max_momentum'", "]", ",", "group", "[", "'base_momentum'", "]", ",", "\n", "step_num", "/", "self", ".", "step_size_up", ")", "\n", "", "", "else", ":", "\n", "                ", "down_step_num", "=", "step_num", "-", "self", ".", "step_size_up", "\n", "computed_lr", "=", "self", ".", "anneal_func", "(", "group", "[", "'max_lr'", "]", ",", "group", "[", "'min_lr'", "]", ",", "down_step_num", "/", "self", ".", "step_size_down", ")", "\n", "if", "self", ".", "cycle_momentum", ":", "\n", "                    ", "computed_momentum", "=", "self", ".", "anneal_func", "(", "group", "[", "'base_momentum'", "]", ",", "group", "[", "'max_momentum'", "]", ",", "\n", "down_step_num", "/", "self", ".", "step_size_down", ")", "\n", "", "", "lrs", ".", "append", "(", "computed_lr", ")", "\n", "if", "self", ".", "cycle_momentum", ":", "\n", "                ", "if", "self", ".", "use_beta1", ":", "\n", "                    ", "_", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "group", "[", "'betas'", "]", "=", "(", "computed_momentum", ",", "beta2", ")", "\n", "", "else", ":", "\n", "                    ", "group", "[", "'momentum'", "]", "=", "computed_momentum", "\n", "", "", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.__init__": [[340, 402], ["pytorch_lightning.LightningModule.__init__", "spock_reg_model.mlp", "spock_reg_model.mlp", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "spock_reg_model.VarModel.save_hyperparameters", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int", "int"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.__init__", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.mlp", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.mlp"], ["def", "__init__", "(", "self", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "'seed'", "not", "in", "hparams", ":", "hparams", "[", "'seed'", "]", "=", "0", "\n", "# pl.seed_everything(hparams['seed'])", "\n", "\n", "hparams", "[", "'include_derivatives'", "]", "=", "False", "if", "'include_derivatives'", "not", "in", "hparams", "else", "hparams", "[", "'include_derivatives'", "]", "\n", "\n", "if", "'time_series_features'", "not", "in", "hparams", ":", "\n", "            ", "hparams", "[", "'time_series_features'", "]", "=", "38", "+", "3", "\n", "\n", "", "if", "hparams", "[", "'time_series_features'", "]", "==", "82", ":", "\n", "            ", "hparams", "[", "'time_series_features'", "]", "=", "41", "\n", "\n", "", "self", ".", "fix_megno", "=", "False", "if", "'fix_megno'", "not", "in", "hparams", "else", "hparams", "[", "'fix_megno'", "]", "\n", "self", ".", "fix_megno2", "=", "False", "if", "'fix_megno2'", "not", "in", "hparams", "else", "hparams", "[", "'fix_megno2'", "]", "\n", "self", ".", "include_angles", "=", "False", "if", "'include_angles'", "not", "in", "hparams", "else", "hparams", "[", "'include_angles'", "]", "\n", "\n", "self", ".", "n_features", "=", "hparams", "[", "'time_series_features'", "]", "*", "(", "1", "+", "int", "(", "hparams", "[", "'include_derivatives'", "]", ")", ")", "\n", "self", ".", "feature_nn", "=", "mlp", "(", "self", ".", "n_features", ",", "hparams", "[", "'latent'", "]", ",", "hparams", "[", "'hidden'", "]", ",", "hparams", "[", "'in'", "]", ")", "\n", "self", ".", "regress_nn", "=", "mlp", "(", "hparams", "[", "'latent'", "]", "*", "2", "+", "int", "(", "self", ".", "fix_megno", ")", "*", "2", ",", "2", ",", "hparams", "[", "'hidden'", "]", ",", "hparams", "[", "'out'", "]", ")", "\n", "self", ".", "input_noise_logvar", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "n_features", ")", "-", "2", ")", "\n", "self", ".", "summary_noise_logvar", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "hparams", "[", "'latent'", "]", "*", "2", "+", "int", "(", "self", ".", "fix_megno", ")", "*", "2", ")", "-", "2", ")", "# add to summaries, not direct latents", "\n", "self", ".", "lowest", "=", "0.5", "\n", "if", "'lower_std'", "in", "hparams", "and", "hparams", "[", "'lower_std'", "]", ":", "\n", "            ", "self", ".", "lowest", "=", "0.1", "\n", "\n", "", "self", ".", "latents", "=", "None", "\n", "self", ".", "beta_in", "=", "1", "if", "'beta_in'", "not", "in", "hparams", "else", "hparams", "[", "'beta_in'", "]", "\n", "self", ".", "beta_out", "=", "1", "if", "'beta_out'", "not", "in", "hparams", "else", "hparams", "[", "'beta_out'", "]", "\n", "self", ".", "megno_location", "=", "7", "\n", "self", ".", "mmr_location", "=", "[", "3", ",", "6", "]", "\n", "self", ".", "nan_location", "=", "[", "38", ",", "39", ",", "40", "]", "\n", "self", ".", "eplusminus_location", "=", "[", "1", ",", "2", ",", "4", ",", "5", "]", "\n", "\n", "# SWA params", "\n", "hparams", "[", "'scheduler_choice'", "]", "=", "'swa'", "#'cycle' if 'scheduler_choice' not in hparams else hparams['scheduler_choice']", "\n", "hparams", "[", "'save_freq'", "]", "=", "25", "if", "'save_freq'", "not", "in", "hparams", "else", "hparams", "[", "'save_freq'", "]", "\n", "hparams", "[", "'eval_freq'", "]", "=", "5", "if", "'eval_freq'", "not", "in", "hparams", "else", "hparams", "[", "'eval_freq'", "]", "\n", "hparams", "[", "'momentum'", "]", "=", "0.9", "if", "'momentum'", "not", "in", "hparams", "else", "hparams", "[", "'momentum'", "]", "\n", "hparams", "[", "'weight_decay'", "]", "=", "1e-4", "if", "'weight_decay'", "not", "in", "hparams", "else", "hparams", "[", "'weight_decay'", "]", "\n", "hparams", "[", "'noisy_val'", "]", "=", "True", "if", "'noisy_val'", "not", "in", "hparams", "else", "hparams", "[", "'noisy_val'", "]", "\n", "\n", "# self.hparams = hparams", "\n", "self", ".", "save_hyperparameters", "(", ")", "\n", "self", ".", "steps", "=", "hparams", "[", "'steps'", "]", "\n", "self", ".", "batch_size", "=", "hparams", "[", "'batch_size'", "]", "\n", "self", ".", "lr", "=", "hparams", "[", "'lr'", "]", "#init_lr", "\n", "self", ".", "_dataloader", "=", "None", "\n", "self", ".", "_val_dataloader", "=", "None", "\n", "self", ".", "random_sample", "=", "False", "if", "'random_sample'", "not", "in", "hparams", "else", "hparams", "[", "'random_sample'", "]", "\n", "self", ".", "train_len", "=", "78660", "\n", "self", ".", "test_len", "=", "8740", "\n", "self", ".", "_summary_kl", "=", "0.0", "\n", "self", ".", "include_mmr", "=", "hparams", "[", "'include_mmr'", "]", "\n", "self", ".", "include_nan", "=", "hparams", "[", "'include_nan'", "]", "\n", "self", ".", "include_eplusminus", "=", "True", "if", "'include_eplusminus'", "not", "in", "hparams", "else", "hparams", "[", "'include_eplusminus'", "]", "\n", "self", ".", "train_all", "=", "False", "if", "'train_all'", "not", "in", "hparams", "else", "hparams", "[", "'train_all'", "]", "\n", "\n", "self", ".", "_cur_summary", "=", "None", "\n", "\n", "self", ".", "ssX", "=", "None", "\n", "self", ".", "ssy", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.augment": [[403, 408], ["numpy.random.randint", "numpy.random.randint"], "methods", ["None"], ["", "def", "augment", "(", "self", ",", "x", ")", ":", "\n", "# This randomly samples times.", "\n", "        ", "samples", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "hparams", "[", "'samp'", "]", ",", "x", ".", "shape", "[", "1", "]", "+", "1", ")", "\n", "x", "=", "x", "[", ":", ",", "np", ".", "random", ".", "randint", "(", "0", ",", "x", ".", "shape", "[", "1", "]", ",", "size", "=", "samples", ")", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.set_flag": [[409, 414], ["setattr", "spock_reg_model.VarModel.children", "hasattr", "m.set_flag"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.set_flag"], ["", "def", "set_flag", "(", "self", ",", "flag_name", ",", "value", ")", ":", "\n", "        ", "setattr", "(", "self", ",", "flag_name", ",", "value", ")", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'set_flag'", ")", ":", "\n", "                ", "m", ".", "set_flag", "(", "flag_name", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.compute_summary_stats": [[415, 435], ["spock_reg_model.VarModel.feature_nn", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.std", "torch.std", "torch.std", "torch.std", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "", "", "def", "compute_summary_stats", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "feature_nn", "(", "x", ")", "\n", "sample_mu", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ")", "\n", "sample_var", "=", "torch", ".", "std", "(", "x", ",", "dim", "=", "1", ")", "**", "2", "\n", "n", "=", "x", ".", "shape", "[", "1", "]", "\n", "\n", "std_in_mu", "=", "torch", ".", "sqrt", "(", "sample_var", "/", "n", ")", "\n", "std_in_var", "=", "torch", ".", "sqrt", "(", "2", "*", "sample_var", "**", "2", "/", "(", "n", "-", "1", ")", ")", "\n", "\n", "# Take a \"sample\" of the average/variance of the learned features", "\n", "mu_sample", "=", "torch", ".", "randn_like", "(", "sample_mu", ")", "*", "std_in_mu", "+", "sample_mu", "\n", "var_sample", "=", "torch", ".", "randn_like", "(", "sample_var", ")", "*", "std_in_var", "+", "sample_var", "\n", "\n", "# Get to same unit", "\n", "std_sample", "=", "torch", ".", "sqrt", "(", "torch", ".", "abs", "(", "var_sample", ")", "+", "EPSILON", ")", "\n", "#clatent = torch.cat((mu_sample, var_sample), dim=1)", "\n", "clatent", "=", "torch", ".", "cat", "(", "(", "mu_sample", ",", "std_sample", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "latents", "=", "x", "\n", "\n", "return", "clatent", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.predict_instability": [[436, 442], ["spock_reg_model.VarModel.regress_nn", "spock_reg_model.soft_clamp", "spock_reg_model.soft_clamp"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.soft_clamp", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.soft_clamp"], ["", "def", "predict_instability", "(", "self", ",", "summary_stats", ")", ":", "\n", "        ", "testy", "=", "self", ".", "regress_nn", "(", "summary_stats", ")", "\n", "# Outputs mu, std", "\n", "mu", "=", "soft_clamp", "(", "testy", "[", ":", ",", "[", "0", "]", "]", ",", "4.0", ",", "12.0", ")", "\n", "std", "=", "soft_clamp", "(", "testy", "[", ":", ",", "[", "1", "]", "]", ",", "self", ".", "lowest", ",", "6.0", ")", "\n", "return", "mu", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.add_input_noise": [[443, 446], ["torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "add_input_noise", "(", "self", ",", "x", ")", ":", "\n", "        ", "noise", "=", "torch", ".", "randn_like", "(", "x", ",", "device", "=", "self", ".", "device", ")", "*", "torch", ".", "exp", "(", "self", ".", "input_noise_logvar", "[", "None", ",", "None", ",", ":", "]", "/", "2", ")", "\n", "return", "x", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.add_summary_noise": [[447, 450], ["torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "add_summary_noise", "(", "self", ",", "summary_stats", ")", ":", "\n", "        ", "noise", "=", "torch", ".", "randn_like", "(", "summary_stats", ",", "device", "=", "self", ".", "device", ")", "*", "torch", ".", "exp", "(", "self", ".", "summary_noise_logvar", "[", "None", ",", ":", "]", "/", "2", ")", "\n", "return", "summary_stats", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_megno": [[451, 457], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "x[].clone"], "methods", ["None"], ["", "def", "zero_megno", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "mask", "[", "...", ",", "self", ".", "megno_location", "]", "=", "x", "[", "...", ",", "self", ".", "megno_location", "]", ".", "clone", "(", ")", "\n", "x", "=", "x", "-", "mask", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_mmr": [[458, 464], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "x[].clone"], "methods", ["None"], ["", "def", "zero_mmr", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "mask", "[", "...", ",", "self", ".", "mmr_location", "]", "=", "x", "[", "...", ",", "self", ".", "mmr_location", "]", ".", "clone", "(", ")", "\n", "x", "=", "x", "-", "mask", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_nan": [[465, 471], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "x[].clone"], "methods", ["None"], ["", "def", "zero_nan", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "mask", "[", "...", ",", "self", ".", "nan_location", "]", "=", "x", "[", "...", ",", "self", ".", "nan_location", "]", ".", "clone", "(", ")", "\n", "x", "=", "x", "-", "mask", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_eplusminus": [[472, 478], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "x[].clone"], "methods", ["None"], ["", "def", "zero_eplusminus", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "mask", "[", "...", ",", "self", ".", "eplusminus_location", "]", "=", "x", "[", "...", ",", "self", ".", "eplusminus_location", "]", ".", "clone", "(", ")", "\n", "x", "=", "x", "-", "mask", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.summarize_megno": [[479, 484], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std", "torch.std", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "summarize_megno", "(", "self", ",", "x", ")", ":", "\n", "        ", "megno_avg", "=", "torch", ".", "mean", "(", "x", "[", ":", ",", ":", ",", "[", "self", ".", "megno_location", "]", "]", ",", "1", ")", "\n", "megno_std", "=", "torch", ".", "std", "(", "x", "[", ":", ",", ":", ",", "[", "self", ".", "megno_location", "]", "]", ",", "1", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "megno_avg", ",", "megno_std", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.forward": [[485, 528], ["spock_reg_model.VarModel.compute_summary_stats", "spock_reg_model.VarModel.predict_instability", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "spock_reg_model.VarModel.zero_megno", "spock_reg_model.VarModel.zero_mmr", "spock_reg_model.VarModel.zero_nan", "spock_reg_model.VarModel.zero_eplusminus", "spock_reg_model.VarModel.augment", "spock_reg_model.VarModel.add_input_noise", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "spock_reg_model.VarModel.add_summary_noise", "spock_reg_model.VarModel.summarize_megno", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.compute_summary_stats", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.predict_instability", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_megno", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_mmr", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_nan", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_eplusminus", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.augment", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.add_input_noise", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.add_summary_noise", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.summarize_megno"], ["", "def", "forward", "(", "self", ",", "x", ",", "noisy_val", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "fix_megno", "or", "self", ".", "fix_megno2", ":", "\n", "            ", "if", "self", ".", "fix_megno", ":", "\n", "                ", "megno_avg_std", "=", "self", ".", "summarize_megno", "(", "x", ")", "\n", "#(batch, 2)", "\n", "", "x", "=", "self", ".", "zero_megno", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "include_mmr", ":", "\n", "            ", "x", "=", "self", ".", "zero_mmr", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "include_nan", ":", "\n", "            ", "x", "=", "self", ".", "zero_nan", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "include_eplusminus", ":", "\n", "            ", "x", "=", "self", ".", "zero_eplusminus", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "random_sample", ":", "\n", "            ", "x", "=", "self", ".", "augment", "(", "x", ")", "\n", "#x is (batch, time, feature)", "\n", "", "if", "noisy_val", ":", "\n", "            ", "x", "=", "self", ".", "add_input_noise", "(", "x", ")", "\n", "\n", "", "summary_stats", "=", "self", ".", "compute_summary_stats", "(", "x", ")", "\n", "if", "self", ".", "fix_megno", ":", "\n", "            ", "summary_stats", "=", "torch", ".", "cat", "(", "[", "summary_stats", ",", "megno_avg_std", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "self", ".", "_cur_summary", "=", "summary_stats", "\n", "\n", "#summary is (batch, feature)", "\n", "self", ".", "_summary_kl", "=", "(", "1", "/", "2", ")", "*", "(", "\n", "summary_stats", "**", "2", "\n", "+", "torch", ".", "exp", "(", "self", ".", "summary_noise_logvar", ")", "[", "None", ",", ":", "]", "\n", "-", "self", ".", "summary_noise_logvar", "[", "None", ",", ":", "]", "\n", "-", "1", "\n", ")", "\n", "\n", "if", "noisy_val", ":", "\n", "            ", "summary_stats", "=", "self", ".", "add_summary_noise", "(", "summary_stats", ")", "\n", "\n", "", "mu", ",", "std", "=", "self", ".", "predict_instability", "(", "summary_stats", ")", "\n", "#Each is (batch,)", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "mu", ",", "std", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.sample": [[529, 545], ["spock_reg_model.VarModel.cpu", "x.cpu.cpu.cpu", "range", "spock_reg_model.VarModel.to", "numpy.average", "spock_reg_model.VarModel.detach().numpy", "all_samp.append", "spock_reg_model.VarModel.detach", "numpy.random.randn", "spock_reg_model.VarModel.", "len"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "x", ",", "samples", "=", "10", ")", ":", "\n", "        ", "all_samp", "=", "[", "]", "\n", "init_settings", "=", "[", "self", ".", "random_sample", ",", "self", ".", "device", "]", "\n", "self", ".", "cpu", "(", ")", "\n", "x", "=", "x", ".", "cpu", "(", ")", "\n", "self", ".", "random_sample", "=", "False", "\n", "for", "_", "in", "range", "(", "samples", ")", ":", "\n", "            ", "out", "=", "self", "(", "x", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "mu", "=", "out", "[", ":", ",", "0", "]", "\n", "std", "=", "out", "[", ":", ",", "1", "]", "\n", "all_samp", ".", "append", "(", "\n", "mu", "+", "np", ".", "random", ".", "randn", "(", "len", "(", "out", ")", ")", "*", "std", "\n", ")", "\n", "", "self", ".", "random_sample", "=", "init_settings", "[", "0", "]", "\n", "self", ".", "to", "(", "init_settings", "[", "1", "]", ")", "\n", "return", "np", ".", "average", "(", "all_samp", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel._lossfnc": [[546, 577], ["spock_reg_model.safe_log_erf", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.log", "torch.log", "torch.log", "torch.log", "spock_reg_model.safe_log_erf", "total_loss.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.safe_log_erf", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.safe_log_erf"], ["", "def", "_lossfnc", "(", "self", ",", "testy", ",", "y", ")", ":", "\n", "        ", "mu", "=", "testy", "[", ":", ",", "[", "0", "]", "]", "\n", "std", "=", "testy", "[", ":", ",", "[", "1", "]", "]", "\n", "\n", "var", "=", "std", "**", "2", "\n", "t_greater_9", "=", "y", ">=", "9", "\n", "\n", "regression_loss", "=", "-", "(", "y", "-", "mu", ")", "**", "2", "/", "(", "2", "*", "var", ")", "\n", "regression_loss", "+=", "-", "torch", ".", "log", "(", "std", ")", "\n", "regression_loss", "+=", "-", "safe_log_erf", "(", "\n", "(", "mu", "-", "4", ")", "/", "(", "torch", ".", "sqrt", "(", "2", "*", "var", ")", ")", "\n", ")", "\n", "classifier_loss", "=", "safe_log_erf", "(", "\n", "(", "mu", "-", "9", ")", "/", "(", "torch", ".", "sqrt", "(", "2", "*", "var", ")", ")", "\n", ")", "\n", "\n", "safe_regression_loss", "=", "torch", ".", "where", "(", "\n", "~", "torch", ".", "isfinite", "(", "regression_loss", ")", ",", "\n", "-", "torch", ".", "ones_like", "(", "regression_loss", ")", "*", "100", ",", "\n", "regression_loss", ")", "\n", "safe_classifier_loss", "=", "torch", ".", "where", "(", "\n", "~", "torch", ".", "isfinite", "(", "classifier_loss", ")", ",", "\n", "-", "torch", ".", "ones_like", "(", "classifier_loss", ")", "*", "100", ",", "\n", "classifier_loss", ")", "\n", "\n", "total_loss", "=", "(", "\n", "safe_regression_loss", "*", "(", "~", "t_greater_9", ")", "+", "\n", "safe_classifier_loss", "*", "(", "t_greater_9", ")", "\n", ")", "\n", "\n", "return", "-", "total_loss", ".", "sum", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.lossfnc": [[578, 583], ["spock_reg_model.VarModel.", "spock_reg_model.VarModel._lossfnc().sum", "spock_reg_model.VarModel._lossfnc"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel._lossfnc"], ["", "def", "lossfnc", "(", "self", ",", "x", ",", "y", ",", "samples", "=", "1", ",", "noisy_val", "=", "True", ")", ":", "\n", "        ", "testy", "=", "self", "(", "x", ",", "noisy_val", "=", "noisy_val", ")", "\n", "n_samp", "=", "y", ".", "shape", "[", "0", "]", "\n", "loss", "=", "self", ".", "_lossfnc", "(", "testy", ",", "y", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.input_kl": [[584, 589], ["torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "input_kl", "(", "self", ")", ":", "\n", "        ", "return", "(", "1", "/", "2", ")", "*", "(", "\n", "torch", ".", "exp", "(", "self", ".", "input_noise_logvar", ")", "\n", "-", "self", ".", "input_noise_logvar", "\n", "-", "1", "\n", ")", ".", "sum", "(", ")", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.summary_kl": [[591, 593], ["spock_reg_model.VarModel._summary_kl.sum"], "methods", ["None"], ["", "def", "summary_kl", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_summary_kl", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.training_step": [[594, 614], ["spock_reg_model.VarModel.lossfnc", "min", "min", "len", "spock_reg_model.VarModel.summary_kl", "spock_reg_model.VarModel.input_kl", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.lossfnc", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.summary_kl", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.input_kl"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "fraction", "=", "self", ".", "global_step", "/", "self", ".", "hparams", "[", "'steps'", "]", "\n", "beta_in", "=", "min", "(", "[", "1", ",", "fraction", "/", "0.3", "]", ")", "*", "self", ".", "beta_in", "\n", "beta_out", "=", "min", "(", "[", "1", ",", "fraction", "/", "0.3", "]", ")", "*", "self", ".", "beta_out", "\n", "\n", "X_sample", ",", "y_sample", "=", "batch", "\n", "loss", "=", "self", ".", "lossfnc", "(", "X_sample", ",", "y_sample", ",", "noisy_val", "=", "True", ")", "\n", "#cur_frac = len(X_sample) / self.train_len", "\n", "\n", "# Want to be important with total number of samples", "\n", "input_kl", "=", "self", ".", "input_kl", "(", ")", "*", "beta_in", "*", "len", "(", "X_sample", ")", "\n", "summary_kl", "=", "self", ".", "summary_kl", "(", ")", "*", "beta_out", "\n", "\n", "prior", "=", "input_kl", "+", "summary_kl", "\n", "\n", "total_loss", "=", "loss", "+", "prior", "\n", "\n", "tensorboard_logs", "=", "{", "'train_loss_no_reg'", ":", "loss", "/", "len", "(", "X_sample", ")", ",", "'train_loss_with_reg'", ":", "total_loss", "/", "len", "(", "X_sample", ")", ",", "'input_kl'", ":", "input_kl", "/", "len", "(", "X_sample", ")", ",", "'summary_kl'", ":", "summary_kl", "/", "len", "(", "X_sample", ")", "}", "\n", "\n", "return", "{", "'loss'", ":", "total_loss", ",", "'log'", ":", "tensorboard_logs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.validation_step": [[615, 620], ["spock_reg_model.VarModel.lossfnc"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.lossfnc"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "X_sample", ",", "y_sample", "=", "batch", "\n", "loss", "=", "self", ".", "lossfnc", "(", "X_sample", ",", "y_sample", ",", "noisy_val", "=", "self", ".", "hparams", "[", "'noisy_val'", "]", ")", "/", "self", ".", "test_len", "\n", "\n", "return", "{", "'val_loss'", ":", "loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.validation_epoch_end": [[621, 628], ["torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "\n", "        ", "avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "'val_loss'", "]", "for", "x", "in", "outputs", "]", ")", ".", "sum", "(", ")", "\n", "\n", "tensorboard_logs", "=", "{", "'val_loss_no_reg'", ":", "avg_loss", "}", "\n", "\n", "return", "{", "'val_loss'", ":", "avg_loss", ",", "'log'", ":", "tensorboard_logs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.configure_optimizers": [[629, 644], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "spock_reg_model.CustomOneCycleLR", "spock_reg_model.VarModel.parameters", "int"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "opt1", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "momentum", "=", "self", ".", "hparams", "[", "'momentum'", "]", ",", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", ")", "\n", "\n", "assert", "self", ".", "hparams", "[", "'scheduler_choice'", "]", "==", "'swa'", "\n", "scheduler", "=", "CustomOneCycleLR", "(", "opt1", ",", "self", ".", "lr", ",", "int", "(", "0.9", "*", "self", ".", "steps", ")", ",", "final_div_factor", "=", "1e4", ")", "\n", "interval", "=", "'steps'", "\n", "name", "=", "'swa_lr'", "\n", "\n", "sched1", "=", "{", "\n", "'scheduler'", ":", "scheduler", ",", "\n", "'name'", ":", "name", ",", "\n", "'interval'", ":", "interval", "\n", "}", "\n", "\n", "return", "[", "opt1", "]", ",", "[", "sched1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.make_dataloaders": [[645, 677], ["range", "len", "len", "spock_reg_model.get_data", "spock_reg_model.get_data", "len", "print"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.get_data", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.get_data"], ["", "def", "make_dataloaders", "(", "self", ",", "train", "=", "True", ",", "**", "extra_kwargs", ")", ":", "\n", "        ", "kwargs", "=", "{", "\n", "**", "self", ".", "hparams", ",", "\n", "'model'", ":", "self", ",", "\n", "**", "extra_kwargs", ",", "\n", "'train'", ":", "train", ",", "\n", "}", "\n", "if", "'ssX'", "in", "kwargs", ":", "\n", "            ", "dataloader", ",", "val_dataloader", "=", "get_data", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "dataloader", ",", "val_dataloader", "=", "get_data", "(", "ssX", "=", "self", ".", "ssX", ",", "**", "kwargs", ")", "\n", "\n", "", "labels", "=", "[", "'time'", ",", "'e+_near'", ",", "'e-_near'", ",", "'max_strength_mmr_near'", ",", "'e+_far'", ",", "'e-_far'", ",", "'max_strength_mmr_far'", ",", "'megno'", ",", "'a1'", ",", "'e1'", ",", "'i1'", ",", "'cos_Omega1'", ",", "'sin_Omega1'", ",", "'cos_pomega1'", ",", "'sin_pomega1'", ",", "'cos_theta1'", ",", "'sin_theta1'", ",", "'a2'", ",", "'e2'", ",", "'i2'", ",", "'cos_Omega2'", ",", "'sin_Omega2'", ",", "'cos_pomega2'", ",", "'sin_pomega2'", ",", "'cos_theta2'", ",", "'sin_theta2'", ",", "'a3'", ",", "'e3'", ",", "'i3'", ",", "'cos_Omega3'", ",", "'sin_Omega3'", ",", "'cos_pomega3'", ",", "'sin_pomega3'", ",", "'cos_theta3'", ",", "'sin_theta3'", ",", "'m1'", ",", "'m2'", ",", "'m3'", ",", "'nan_mmr_near'", ",", "'nan_mmr_far'", ",", "'nan_megno'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "            ", "label", "=", "labels", "[", "i", "]", "\n", "if", "not", "(", "'cos'", "in", "label", "or", "\n", "'sin'", "in", "label", "or", "\n", "'nan_'", "in", "label", "or", "\n", "label", "==", "'i1'", "or", "\n", "label", "==", "'i2'", "or", "\n", "label", "==", "'i3'", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "not", "self", ".", "include_angles", ":", "\n", "                ", "print", "(", "'Tossing'", ",", "i", ",", "label", ")", "\n", "dataloader", ".", "dataset", ".", "tensors", "[", "0", "]", "[", "...", ",", "i", "]", "=", "0.0", "\n", "val_dataloader", ".", "dataset", ".", "tensors", "[", "0", "]", "[", "...", ",", "i", "]", "=", "0.0", "\n", "\n", "", "", "self", ".", "_dataloader", "=", "dataloader", "\n", "self", ".", "_val_dataloader", "=", "val_dataloader", "\n", "self", ".", "train_len", "=", "len", "(", "dataloader", ".", "dataset", ".", "tensors", "[", "0", "]", ")", "\n", "self", ".", "test_len", "=", "len", "(", "val_dataloader", ".", "dataset", ".", "tensors", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.train_dataloader": [[678, 682], ["spock_reg_model.VarModel.make_dataloaders"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.make_dataloaders"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_dataloader", "is", "None", ":", "\n", "            ", "self", ".", "make_dataloaders", "(", ")", "\n", "", "return", "self", ".", "_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.val_dataloader": [[683, 687], ["spock_reg_model.VarModel.make_dataloaders"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.make_dataloaders"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_val_dataloader", "is", "None", ":", "\n", "            ", "self", ".", "make_dataloaders", "(", ")", "\n", "", "return", "self", ".", "_val_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.init_params": [[691, 707], ["None"], "methods", ["None"], ["def", "init_params", "(", "self", ",", "swa_params", ")", ":", "\n", "        ", "self", ".", "swa_params", "=", "swa_params", "\n", "self", ".", "swa_params", "[", "'swa_lr'", "]", "=", "0.001", "if", "'swa_lr'", "not", "in", "self", ".", "swa_params", "else", "self", ".", "swa_params", "[", "'swa_lr'", "]", "\n", "self", ".", "swa_params", "[", "'swa_start'", "]", "=", "1000", "if", "'swa_start'", "not", "in", "self", ".", "swa_params", "else", "self", ".", "swa_params", "[", "'swa_start'", "]", "\n", "self", ".", "swa_params", "[", "'swa_recording_lr_factor'", "]", "=", "0.5", "if", "'swa_recording_lr_factor'", "not", "in", "self", ".", "swa_params", "else", "self", ".", "swa_params", "[", "'swa_recording_lr_factor'", "]", "\n", "\n", "self", ".", "n_models", "=", "0", "\n", "self", ".", "w_avg", "=", "None", "\n", "self", ".", "w2_avg", "=", "None", "\n", "self", ".", "pre_D", "=", "None", "\n", "self", ".", "K", "=", "20", "if", "'K'", "not", "in", "self", ".", "swa_params", "else", "self", ".", "swa_params", "[", "'K'", "]", "\n", "self", ".", "c", "=", "2", "if", "'c'", "not", "in", "self", ".", "swa_params", "else", "self", ".", "swa_params", "[", "'c'", "]", "\n", "self", ".", "swa_params", "[", "'c'", "]", "=", "self", ".", "c", "\n", "self", ".", "swa_params", "[", "'K'", "]", "=", "self", ".", "K", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.configure_optimizers": [[708, 720], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "spock_reg_model.SWAGModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "opt1", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "swa_params", "[", "'swa_lr'", "]", ",", "momentum", "=", "self", ".", "hparams", "[", "'momentum'", "]", ",", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "opt1", ",", "[", "self", ".", "swa_params", "[", "'swa_start'", "]", "]", ",", "self", ".", "swa_params", "[", "'swa_recording_lr_factor'", "]", ")", "\n", "interval", "=", "'steps'", "\n", "name", "=", "'swa_record_lr'", "\n", "sched1", "=", "{", "\n", "'scheduler'", ":", "scheduler", ",", "\n", "'name'", ":", "name", ",", "\n", "'interval'", ":", "interval", "\n", "}", "\n", "\n", "return", "[", "opt1", "]", ",", "[", "sched1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.training_step": [[721, 732], ["spock_reg_model.SWAGModel.lossfnc", "len", "spock_reg_model.SWAGModel.summary_kl", "spock_reg_model.SWAGModel.input_kl", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.lossfnc", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.summary_kl", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.input_kl"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "beta_in", "=", "self", ".", "beta_in", "\n", "beta_out", "=", "self", ".", "beta_out", "\n", "X_sample", ",", "y_sample", "=", "batch", "\n", "loss", "=", "self", ".", "lossfnc", "(", "X_sample", ",", "y_sample", ",", "noisy_val", "=", "True", ")", "\n", "input_kl", "=", "self", ".", "input_kl", "(", ")", "*", "beta_in", "*", "len", "(", "X_sample", ")", "\n", "summary_kl", "=", "self", ".", "summary_kl", "(", ")", "*", "beta_out", "\n", "prior", "=", "input_kl", "+", "summary_kl", "\n", "total_loss", "=", "loss", "+", "prior", "\n", "tensorboard_logs", "=", "{", "'train_loss_no_reg'", ":", "loss", "/", "len", "(", "X_sample", ")", ",", "'train_loss_with_reg'", ":", "total_loss", "/", "len", "(", "X_sample", ")", ",", "'input_kl'", ":", "input_kl", "/", "len", "(", "X_sample", ")", ",", "'summary_kl'", ":", "summary_kl", "/", "len", "(", "X_sample", ")", "}", "\n", "return", "{", "'loss'", ":", "total_loss", ",", "'log'", ":", "tensorboard_logs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.flatten": [[733, 746], ["spock_reg_model.SWAGModel.state_dict", "spock_reg_model.SWAGModel.keys", "p.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "p.reshape"], "methods", ["None"], ["", "def", "flatten", "(", "self", ")", ":", "\n", "        ", "\"\"\"Convert state dict into a vector\"\"\"", "\n", "ps", "=", "self", ".", "state_dict", "(", ")", "\n", "p_vec", "=", "None", "\n", "for", "key", "in", "ps", ".", "keys", "(", ")", ":", "\n", "            ", "p", "=", "ps", "[", "key", "]", "\n", "\n", "if", "p_vec", "is", "None", ":", "\n", "                ", "p_vec", "=", "p", ".", "reshape", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "p_vec", "=", "torch", ".", "cat", "(", "(", "p_vec", ",", "p", ".", "reshape", "(", "-", "1", ")", ")", ")", "\n", "\n", "", "", "return", "p_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.load": [[747, 761], ["spock_reg_model.SWAGModel.state_dict", "collections.OrderedDict", "spock_reg_model.SWAGModel.keys", "spock_reg_model.SWAGModel.load_state_dict", "old_p.numel", "p_vec[].reshape"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "p_vec", ")", ":", "\n", "        ", "\"\"\"Load a vector into the state dict\"\"\"", "\n", "cur_state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "i", "=", "0", "\n", "for", "key", "in", "cur_state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "old_p", "=", "cur_state_dict", "[", "key", "]", "\n", "size", "=", "old_p", ".", "numel", "(", ")", "\n", "shape", "=", "old_p", ".", "shape", "\n", "new_p", "=", "p_vec", "[", "i", ":", "i", "+", "size", "]", ".", "reshape", "(", "*", "shape", ")", "\n", "new_state_dict", "[", "key", "]", "=", "new_p", "\n", "i", "+=", "size", "\n", "\n", "", "self", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.aggregate_model": [[762, 785], ["spock_reg_model.SWAGModel.flatten", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "spock_reg_model.SWAGModel.clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.flatten"], ["", "def", "aggregate_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"Aggregate models for SWA/SWAG\"\"\"", "\n", "\n", "cur_w", "=", "self", ".", "flatten", "(", ")", "\n", "cur_w2", "=", "cur_w", "**", "2", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "w_avg", "is", "None", ":", "\n", "                ", "self", ".", "w_avg", "=", "cur_w", "\n", "self", ".", "w2_avg", "=", "cur_w2", "\n", "", "else", ":", "\n", "                ", "self", ".", "w_avg", "=", "(", "self", ".", "w_avg", "*", "self", ".", "n_models", "+", "cur_w", ")", "/", "(", "self", ".", "n_models", "+", "1", ")", "\n", "self", ".", "w2_avg", "=", "(", "self", ".", "w2_avg", "*", "self", ".", "n_models", "+", "cur_w2", ")", "/", "(", "self", ".", "n_models", "+", "1", ")", "\n", "\n", "", "if", "self", ".", "pre_D", "is", "None", ":", "\n", "                ", "self", ".", "pre_D", "=", "cur_w", ".", "clone", "(", ")", "[", ":", ",", "None", "]", "\n", "", "elif", "self", ".", "current_epoch", "%", "self", ".", "c", "==", "0", ":", "\n", "#Record weights, measure discrepancy with average later", "\n", "                ", "self", ".", "pre_D", "=", "torch", ".", "cat", "(", "(", "self", ".", "pre_D", ",", "cur_w", "[", ":", ",", "None", "]", ")", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "pre_D", ".", "shape", "[", "1", "]", ">", "self", ".", "K", ":", "\n", "                    ", "self", ".", "pre_D", "=", "self", ".", "pre_D", "[", ":", ",", "1", ":", "]", "\n", "\n", "\n", "", "", "", "self", ".", "n_models", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.validation_step": [[786, 799], ["spock_reg_model.SWAGModel.lossfnc", "spock_reg_model.SWAGModel.flatten", "spock_reg_model.SWAGModel.load", "spock_reg_model.SWAGModel.load", "spock_reg_model.SWAGModel.lossfnc"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.lossfnc", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.flatten", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.load", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.load", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.lossfnc"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "X_sample", ",", "y_sample", "=", "batch", "\n", "loss", "=", "self", ".", "lossfnc", "(", "X_sample", ",", "y_sample", ",", "noisy_val", "=", "self", ".", "hparams", "[", "'noisy_val'", "]", ")", "/", "self", ".", "test_len", "\n", "\n", "if", "self", ".", "w_avg", "is", "None", ":", "\n", "            ", "swa_loss", "=", "loss", "\n", "", "else", ":", "\n", "            ", "tmp", "=", "self", ".", "flatten", "(", ")", "\n", "self", ".", "load", "(", "self", ".", "w_avg", ")", "\n", "swa_loss", "=", "self", ".", "lossfnc", "(", "X_sample", ",", "y_sample", ",", "noisy_val", "=", "self", ".", "hparams", "[", "'noisy_val'", "]", ")", "/", "self", ".", "test_len", "\n", "self", ".", "load", "(", "tmp", ")", "\n", "\n", "", "return", "{", "'val_loss'", ":", "loss", ",", "'swa_loss'", ":", "swa_loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.validation_epoch_end": [[800, 813], ["torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "spock_reg_model.SWAGModel.aggregate_model", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.aggregate_model"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "'val_loss'", "]", "for", "x", "in", "outputs", "]", ")", ".", "sum", "(", ")", "\n", "swa_avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "'swa_loss'", "]", "for", "x", "in", "outputs", "]", ")", ".", "sum", "(", ")", "\n", "tensorboard_logs", "=", "{", "'val_loss_no_reg'", ":", "avg_loss", ",", "'swa_loss_no_reg'", ":", "swa_avg_loss", "}", "\n", "#TODO: Check", "\n", "#fraction = self.global_step / self.hparams['steps']", "\n", "#if fraction > 0.5:", "\n", "if", "self", ".", "global_step", ">", "self", ".", "hparams", "[", "'swa_start'", "]", ":", "\n", "\n", "            ", "self", ".", "aggregate_model", "(", ")", "\n", "\n", "# Record validation loss, and aggregated model loss", "\n", "", "return", "{", "'val_loss'", ":", "avg_loss", ",", "'log'", ":", "tensorboard_logs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.sample_weights": [[814, 838], ["spock_reg_model.SWAGModel.load", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.load"], ["", "def", "sample_weights", "(", "self", ",", "scale", "=", "1", ")", ":", "\n", "        ", "\"\"\"Sample weights using SWAG:\n        - w ~ N(avg_w, 1/2 * sigma + D . D^T/2(K-1))\n            - This can be done with the following matrices:\n                - z_1 ~ N(0, I_d); d the number of parameters\n                - z_2 ~ N(0, I_K)\n            - Then, compute:\n            - w = avg_w + (1/sqrt(2)) * sigma^(1/2) . z_1 + D . z_2 / sqrt(2(K-1))\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "avg_w", "=", "self", ".", "w_avg", "#[K]", "\n", "avg_w2", "=", "self", ".", "w2_avg", "#[K]", "\n", "D", "=", "self", ".", "pre_D", "-", "avg_w", "[", ":", ",", "None", "]", "#[d, K]", "\n", "d", "=", "avg_w", ".", "shape", "[", "0", "]", "\n", "K", "=", "self", ".", "K", "\n", "z_1", "=", "torch", ".", "randn", "(", "(", "1", ",", "d", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "z_2", "=", "torch", ".", "randn", "(", "(", "K", ",", "1", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "sigma", "=", "torch", ".", "abs", "(", "torch", ".", "diag", "(", "avg_w2", "-", "avg_w", "**", "2", ")", ")", "\n", "\n", "w", "=", "avg_w", "[", "None", "]", "+", "scale", "*", "(", "1.0", "/", "np", ".", "sqrt", "(", "2.0", ")", ")", "*", "z_1", "@", "sigma", "**", "0.5", "\n", "w", "+=", "scale", "*", "(", "D", "@", "z_2", ")", ".", "T", "/", "np", ".", "sqrt", "(", "2", "*", "(", "K", "-", "1", ")", ")", "\n", "w", "=", "w", "[", "0", "]", "\n", "\n", "", "self", ".", "load", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.forward_swag": [[839, 876], ["spock_reg_model.SWAGModel.sample_weights", "spock_reg_model.SWAGModel.compute_summary_stats", "spock_reg_model.SWAGModel.predict_instability", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "spock_reg_model.SWAGModel.zero_megno", "spock_reg_model.SWAGModel.zero_mmr", "spock_reg_model.SWAGModel.zero_nan", "spock_reg_model.SWAGModel.zero_eplusminus", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "spock_reg_model.SWAGModel.summarize_megno", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.sample_weights", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.compute_summary_stats", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.predict_instability", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_megno", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_mmr", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_nan", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_eplusminus", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.summarize_megno"], ["", "def", "forward_swag", "(", "self", ",", "x", ",", "scale", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"No augmentation happens here.\"\"\"", "\n", "\n", "# Sample using SWAG using recorded model moments", "\n", "self", ".", "sample_weights", "(", "scale", "=", "scale", ")", "\n", "\n", "if", "self", ".", "fix_megno", "or", "self", ".", "fix_megno2", ":", "\n", "            ", "if", "self", ".", "fix_megno", ":", "\n", "                ", "megno_avg_std", "=", "self", ".", "summarize_megno", "(", "x", ")", "\n", "#(batch, 2)", "\n", "", "x", "=", "self", ".", "zero_megno", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "include_mmr", ":", "\n", "            ", "x", "=", "self", ".", "zero_mmr", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "include_nan", ":", "\n", "            ", "x", "=", "self", ".", "zero_nan", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "include_eplusminus", ":", "\n", "            ", "x", "=", "self", ".", "zero_eplusminus", "(", "x", ")", "\n", "\n", "", "summary_stats", "=", "self", ".", "compute_summary_stats", "(", "x", ")", "\n", "if", "self", ".", "fix_megno", ":", "\n", "            ", "summary_stats", "=", "torch", ".", "cat", "(", "[", "summary_stats", ",", "megno_avg_std", "]", ",", "dim", "=", "1", ")", "\n", "\n", "#summary is (batch, feature)", "\n", "", "self", ".", "_summary_kl", "=", "(", "1", "/", "2", ")", "*", "(", "\n", "summary_stats", "**", "2", "\n", "+", "torch", ".", "exp", "(", "self", ".", "summary_noise_logvar", ")", "[", "None", ",", ":", "]", "\n", "-", "self", ".", "summary_noise_logvar", "[", "None", ",", ":", "]", "\n", "-", "1", "\n", ")", "\n", "\n", "mu", ",", "std", "=", "self", ".", "predict_instability", "(", "summary_stats", ")", "\n", "#Each is (batch,)", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "mu", ",", "std", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.forward_swag_fast": [[877, 908], ["spock_reg_model.SWAGModel.sample_weights", "spock_reg_model.SWAGModel.compute_summary_stats", "spock_reg_model.SWAGModel.predict_instability", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "spock_reg_model.SWAGModel.zero_megno", "spock_reg_model.SWAGModel.zero_mmr", "spock_reg_model.SWAGModel.zero_nan", "spock_reg_model.SWAGModel.zero_eplusminus", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "spock_reg_model.SWAGModel.summarize_megno"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.sample_weights", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.compute_summary_stats", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.predict_instability", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_megno", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_mmr", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_nan", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.zero_eplusminus", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.VarModel.summarize_megno"], ["", "def", "forward_swag_fast", "(", "self", ",", "x", ",", "scale", "=", "0.5", ")", ":", "\n", "        ", "\"\"\"No augmentation happens here.\"\"\"", "\n", "\n", "# Sample using SWAG using recorded model moments", "\n", "self", ".", "sample_weights", "(", "scale", "=", "scale", ")", "\n", "\n", "if", "self", ".", "fix_megno", "or", "self", ".", "fix_megno2", ":", "\n", "            ", "if", "self", ".", "fix_megno", ":", "\n", "                ", "megno_avg_std", "=", "self", ".", "summarize_megno", "(", "x", ")", "\n", "#(batch, 2)", "\n", "", "x", "=", "self", ".", "zero_megno", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "include_mmr", ":", "\n", "            ", "x", "=", "self", ".", "zero_mmr", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "include_nan", ":", "\n", "            ", "x", "=", "self", ".", "zero_nan", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "include_eplusminus", ":", "\n", "            ", "x", "=", "self", ".", "zero_eplusminus", "(", "x", ")", "\n", "\n", "", "summary_stats", "=", "self", ".", "compute_summary_stats", "(", "x", ")", "\n", "if", "self", ".", "fix_megno", ":", "\n", "            ", "summary_stats", "=", "torch", ".", "cat", "(", "[", "summary_stats", ",", "megno_avg_std", "]", ",", "dim", "=", "1", ")", "\n", "\n", "#summary is (batch, feature)", "\n", "\n", "", "mu", ",", "std", "=", "self", ".", "predict_instability", "(", "summary_stats", ")", "\n", "#Each is (batch,)", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "mu", ",", "std", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.get_data": [[160, 292], ["pickle.load", "sklearn.preprocessing.StandardScaler.transform().reshape", "sklearn.preprocessing.StandardScaler.transform().reshape", "sklearn.preprocessing.StandardScaler.transform().reshape", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "copy.deepcopy", "open", "numpy.concatenate", "numpy.concatenate", "sklearn.preprocessing.StandardScaler.fit", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.autograd.Variable", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "print", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "numpy.arange", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.preprocessing.PowerTransformer", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.transform", "sklearn.preprocessing.StandardScaler.transform", "sklearn.preprocessing.StandardScaler.transform", "torch.from_numpy().type", "torch.from_numpy().type", "len", "len", "trainX.reshape", "trainX.reshape", "testX.reshape", "remX.reshape", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "enumerate", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy", "torch.from_numpy", "mask.sum", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.load", "home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.train_test_split", "home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.train_test_split", "home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.train_test_split", "home.repos.pwc.inspect_result.dtamayo_spock.spock.modelfitting.train_test_split"], ["", "", "def", "get_data", "(", "\n", "ssX", "=", "None", ",", "\n", "batch_size", "=", "32", ",", "\n", "train", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    inputs:\n        batch_size: int\n\n    return:\n        (dataloader, test_dataloader)\n    \"\"\"", "\n", "plot_random", "=", "False", "if", "'plot_random'", "not", "in", "kwargs", "else", "kwargs", "[", "'plot_random'", "]", "\n", "plot_resonant", "=", "not", "plot_random", "\n", "train_all", "=", "False", "if", "'train_all'", "not", "in", "kwargs", "else", "kwargs", "[", "'train_all'", "]", "\n", "plot", "=", "False", "if", "'plot'", "not", "in", "kwargs", "else", "kwargs", "[", "'plot'", "]", "\n", "if", "not", "train_all", "and", "ssX", "is", "None", ":", "\n", "        ", "plot_resonant", "=", "True", "\n", "plot_random", "=", "False", "\n", "\n", "", "if", "train_all", ":", "\n", "        ", "filename", "=", "'data/combined.pkl'", "\n", "", "elif", "plot_resonant", ":", "\n", "        ", "filename", "=", "'data/resonant_dataset.pkl'", "\n", "", "elif", "plot_random", ":", "\n", "        ", "filename", "=", "'data/random_dataset.pkl'", "\n", "\n", "# These are generated by data_from_pkl.py", "\n", "", "loaded_data", "=", "pkl", ".", "load", "(", "\n", "open", "(", "filename", ",", "'rb'", ")", "\n", ")", "\n", "\n", "train_ssX", "=", "(", "ssX", "is", "None", ")", "\n", "\n", "fullX", ",", "fully", "=", "loaded_data", "[", "'X'", "]", ",", "loaded_data", "[", "'y'", "]", "\n", "\n", "if", "train_all", ":", "\n", "        ", "len_random", "=", "17082", "#Number of valid random examples (others have NaNs)", "\n", "random_data", "=", "np", ".", "arange", "(", "len", "(", "fullX", ")", ")", ">=", "(", "len", "(", "fullX", ")", "-", "len_random", ")", "\n", "\n", "\n", "# Differentiate megno", "\n", "", "if", "'fix_megno'", "in", "kwargs", "and", "kwargs", "[", "'fix_megno'", "]", ":", "\n", "        ", "idx", "=", "[", "i", "for", "i", ",", "lab", "in", "enumerate", "(", "loaded_data", "[", "'labels'", "]", ")", "if", "'megno'", "in", "lab", "]", "[", "0", "]", "\n", "fullX", "[", ":", ",", "1", ":", ",", "idx", "]", "-=", "fullX", "[", ":", ",", ":", "-", "1", ",", "idx", "]", "\n", "\n", "", "if", "'include_derivatives'", "in", "kwargs", "and", "kwargs", "[", "'include_derivatives'", "]", ":", "\n", "        ", "derivative", "=", "fullX", "[", ":", ",", "1", ":", ",", ":", "]", "-", "fullX", "[", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "derivative", "=", "np", ".", "concatenate", "(", "(", "\n", "derivative", "[", ":", ",", "[", "0", "]", ",", ":", "]", ",", "\n", "derivative", ")", ",", "axis", "=", "1", ")", "\n", "fullX", "=", "np", ".", "concatenate", "(", "(", "\n", "fullX", ",", "derivative", ")", ",", "\n", "axis", "=", "2", ")", "\n", "\n", "\n", "# Hide fraction of test", "\n", "# MAKE SURE WE DO COPIES AFTER!!!!", "\n", "", "if", "train", ":", "\n", "        ", "if", "train_all", ":", "\n", "            ", "remy", ",", "finaly", ",", "remX", ",", "finalX", ",", "rem_random", ",", "final_random", "=", "train_test_split", "(", "fully", ",", "fullX", ",", "random_data", ",", "shuffle", "=", "True", ",", "test_size", "=", "1.", "/", "10", ",", "random_state", "=", "0", ")", "\n", "trainy", ",", "testy", ",", "trainX", ",", "testX", ",", "train_random", ",", "test_random", "=", "train_test_split", "(", "remy", ",", "remX", ",", "rem_random", ",", "shuffle", "=", "True", ",", "test_size", "=", "1.", "/", "10", ",", "random_state", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "remy", ",", "finaly", ",", "remX", ",", "finalX", "=", "train_test_split", "(", "fully", ",", "fullX", ",", "shuffle", "=", "True", ",", "test_size", "=", "1.", "/", "10", ",", "random_state", "=", "0", ")", "\n", "trainy", ",", "testy", ",", "trainX", ",", "testX", "=", "train_test_split", "(", "remy", ",", "remX", ",", "shuffle", "=", "True", ",", "test_size", "=", "1.", "/", "10", ",", "random_state", "=", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "not", "train_all", "\n", "remy", "=", "fully", "\n", "finaly", "=", "fully", "\n", "testy", "=", "fully", "\n", "trainy", "=", "fully", "\n", "remX", "=", "fullX", "\n", "finalX", "=", "fullX", "\n", "testX", "=", "fullX", "\n", "trainX", "=", "fullX", "\n", "\n", "", "if", "plot", ":", "\n", "# Use test dataset for plotting, so put it in validation part:", "\n", "        ", "testX", "=", "finalX", "\n", "testy", "=", "finaly", "\n", "\n", "", "if", "train_ssX", ":", "\n", "        ", "if", "'power_transform'", "in", "kwargs", "and", "kwargs", "[", "'power_transform'", "]", ":", "\n", "            ", "ssX", "=", "PowerTransformer", "(", "method", "=", "'yeo-johnson'", ")", "#Power is best", "\n", "", "else", ":", "\n", "            ", "ssX", "=", "StandardScaler", "(", ")", "#Power is best", "\n", "\n", "", "", "n_t", "=", "trainX", ".", "shape", "[", "1", "]", "\n", "n_features", "=", "trainX", ".", "shape", "[", "2", "]", "\n", "\n", "if", "train_ssX", ":", "\n", "        ", "ssX", ".", "fit", "(", "trainX", ".", "reshape", "(", "-", "1", ",", "n_features", ")", "[", ":", ":", "1539", "]", ")", "\n", "\n", "", "ttrainy", "=", "trainy", "\n", "ttesty", "=", "testy", "\n", "ttrainX", "=", "ssX", ".", "transform", "(", "trainX", ".", "reshape", "(", "-", "1", ",", "n_features", ")", ")", ".", "reshape", "(", "-", "1", ",", "n_t", ",", "n_features", ")", "\n", "ttestX", "=", "ssX", ".", "transform", "(", "testX", ".", "reshape", "(", "-", "1", ",", "n_features", ")", ")", ".", "reshape", "(", "-", "1", ",", "n_t", ",", "n_features", ")", "\n", "if", "train_all", ":", "\n", "        ", "ttest_random", "=", "test_random", "\n", "ttrain_random", "=", "train_random", "\n", "\n", "", "tremX", "=", "ssX", ".", "transform", "(", "remX", ".", "reshape", "(", "-", "1", ",", "n_features", ")", ")", ".", "reshape", "(", "-", "1", ",", "n_t", ",", "n_features", ")", "\n", "tremy", "=", "remy", "\n", "\n", "train_len", "=", "ttrainX", ".", "shape", "[", "0", "]", "\n", "X", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "concatenate", "(", "(", "ttrainX", ",", "ttestX", ")", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", "\n", "y", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "concatenate", "(", "(", "ttrainy", ",", "ttesty", ")", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", "\n", "if", "train_all", ":", "\n", "        ", "r", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "concatenate", "(", "(", "ttrain_random", ",", "ttest_random", ")", ")", ")", ".", "type", "(", "torch", ".", "BoolTensor", ")", ")", "\n", "\n", "", "Xrem", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "tremX", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", "\n", "yrem", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "tremy", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", "\n", "\n", "idxes", "=", "np", ".", "s_", "[", ":", "]", "\n", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "X", "[", ":", "train_len", ",", ":", ",", "idxes", "]", ",", "y", "[", ":", "train_len", "]", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "\n", "# Cut up dataset into only the random or resonant parts. ", "\n", "# Only needed if plotting OR ", "\n", "if", "(", "not", "plot", ")", "or", "(", "not", "train_all", ")", ":", "\n", "        ", "test_dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "X", "[", "train_len", ":", ",", ":", ",", "idxes", "]", ",", "y", "[", "train_len", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "if", "plot_random", ":", "mask", "=", "r", "\n", "else", ":", "mask", "=", "~", "r", "\n", "print", "(", "f'Plotting with {mask.sum()} total elements, when plot_random={plot_random}'", ")", "\n", "test_dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "X", "[", "train_len", ":", "]", "[", "r", "[", "train_len", ":", "]", "]", "[", ":", ",", ":", ",", "idxes", "]", ",", "y", "[", "train_len", ":", "]", "[", "r", "[", "train_len", ":", "]", "]", ")", "\n", "\n", "", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "3000", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "\n", "kwargs", "[", "'model'", "]", ".", "ssX", "=", "copy", "(", "ssX", ")", "\n", "\n", "return", "dataloader", ",", "test_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.soft_clamp": [[294, 296], ["torch.tanh", "torch.tanh"], "function", ["None"], ["", "def", "soft_clamp", "(", "x", ",", "lo", ",", "high", ")", ":", "\n", "    ", "return", "0.5", "*", "(", "torch", ".", "tanh", "(", "x", ")", "+", "1", ")", "*", "(", "high", "-", "lo", ")", "+", "lo", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.mlp": [[300, 321], ["reversed", "result.extend", "torch.nn.Sequential", "Linear", "Linear", "act", "range", "result.extend", "NotImplementedError", "torch.nn.Linear", "Linear", "act"], "function", ["None"], ["def", "mlp", "(", "in_n", ",", "out_n", ",", "hidden", ",", "layers", ",", "act", "=", "'relu'", ")", ":", "\n", "    ", "if", "act", "==", "'relu'", ":", "\n", "        ", "act", "=", "nn", ".", "ReLU", "\n", "", "elif", "act", "==", "'softplus'", ":", "\n", "        ", "act", "=", "nn", ".", "Softplus", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'act must be relu or softplus'", ")", "\n", "\n", "", "if", "layers", "==", "0", ":", "\n", "        ", "return", "Linear", "(", "in_n", ",", "out_n", ")", "\n", "\n", "", "result", "=", "[", "Linear", "(", "in_n", ",", "hidden", ")", ",", "\n", "act", "(", ")", "]", "\n", "for", "i", "in", "reversed", "(", "range", "(", "layers", ")", ")", ":", "\n", "        ", "result", ".", "extend", "(", "[", "\n", "Linear", "(", "hidden", ",", "hidden", ")", ",", "\n", "act", "(", ")", "\n", "]", ")", "\n", "\n", "", "result", ".", "extend", "(", "[", "nn", ".", "Linear", "(", "hidden", ",", "out_n", ")", "]", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.safe_log_erf": [[322, 335], ["torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch.log", "torch.log", "f_under", "f_over", "torch.erf", "torch.erf", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "safe_log_erf", "(", "x", ")", ":", "\n", "    ", "base_mask", "=", "x", "<", "-", "1", "\n", "value_giving_zero", "=", "torch", ".", "zeros_like", "(", "x", ",", "device", "=", "x", ".", "device", ")", "\n", "x_under", "=", "torch", ".", "where", "(", "base_mask", ",", "x", ",", "value_giving_zero", ")", "\n", "x_over", "=", "torch", ".", "where", "(", "~", "base_mask", ",", "x", ",", "value_giving_zero", ")", "\n", "\n", "f_under", "=", "lambda", "x", ":", "(", "\n", "0.485660082730562", "*", "x", "+", "0.643278438654541", "*", "torch", ".", "exp", "(", "x", ")", "+", "\n", "0.00200084619923262", "*", "x", "**", "3", "-", "0.643250926022749", "-", "0.955350621183745", "*", "x", "**", "2", "\n", ")", "\n", "f_over", "=", "lambda", "x", ":", "torch", ".", "log", "(", "1.0", "+", "torch", ".", "erf", "(", "x", ")", ")", "\n", "\n", "return", "f_under", "(", "x_under", ")", "+", "f_over", "(", "x_over", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.save_swag": [[910, 920], ["torch.save", "torch.save", "swag_model.w_avg.cpu", "swag_model.w2_avg.cpu", "swag_model.pre_D.cpu"], "function", ["None"], ["", "", "def", "save_swag", "(", "swag_model", ",", "path", ")", ":", "\n", "    ", "save_items", "=", "{", "\n", "'hparams'", ":", "swag_model", ".", "hparams", ",", "\n", "'swa_params'", ":", "swag_model", ".", "swa_params", ",", "\n", "'w_avg'", ":", "swag_model", ".", "w_avg", ".", "cpu", "(", ")", ",", "\n", "'w2_avg'", ":", "swag_model", ".", "w2_avg", ".", "cpu", "(", ")", ",", "\n", "'pre_D'", ":", "swag_model", ".", "pre_D", ".", "cpu", "(", ")", "\n", "}", "\n", "\n", "torch", ".", "save", "(", "save_items", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.load_swag": [[921, 932], ["torch.load", "torch.load", "spock_reg_model.SWAGModel.init_params", "spock_reg_model.SWAGModel"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.load", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.load", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.init_params"], ["", "def", "load_swag", "(", "path", ")", ":", "\n", "    ", "save_items", "=", "torch", ".", "load", "(", "path", ")", "\n", "swag_model", "=", "(", "\n", "SWAGModel", "(", "save_items", "[", "'hparams'", "]", ")", "\n", ".", "init_params", "(", "save_items", "[", "'swa_params'", "]", ")", "\n", ")", "\n", "swag_model", ".", "w_avg", "=", "save_items", "[", "'w_avg'", "]", "\n", "swag_model", ".", "w2_avg", "=", "save_items", "[", "'w2_avg'", "]", "\n", "swag_model", ".", "pre_D", "=", "save_items", "[", "'pre_D'", "]", "\n", "\n", "return", "swag_model", "\n", "", ""]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.__init__": [[130, 164], ["object.__init__", "os.path.dirname", "numpy.array", "numpy.array", "spock_reg_model.load_swag().cpu", "enumerate", "spock_reg_model.load_swag", "glob.glob"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.__init__", "home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.load_swag"], ["    ", "def", "__init__", "(", "self", ",", "cuda", "=", "False", ",", "filebase", "=", "'*v50_*output.pkl'", ")", ":", "\n", "        ", "super", "(", "DeepRegressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pwd", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "pwd", "=", "pwd", "+", "'/models/regression'", "\n", "self", ".", "cuda", "=", "cuda", "\n", "\n", "#Load model", "\n", "self", ".", "swag_ensemble", "=", "[", "\n", "load_swag", "(", "fname", ")", ".", "cpu", "(", ")", "\n", "for", "i", ",", "fname", "in", "enumerate", "(", "glob", ".", "glob", "(", "pwd", "+", "'/'", "+", "filebase", ")", ")", "#0.78, 0.970", "\n", "]", "\n", "#Data scaling parameters:", "\n", "self", ".", "scale_", "=", "np", ".", "array", "(", "[", "2.88976974e+03", ",", "6.10019661e-02", ",", "4.03849732e-02", ",", "4.81638693e+01", ",", "\n", "6.72583662e-02", ",", "4.17939679e-02", ",", "8.15995339e+00", ",", "2.26871589e+01", ",", "\n", "4.73612029e-03", ",", "7.09223721e-02", ",", "3.06455099e-02", ",", "7.10726478e-01", ",", "\n", "7.03392022e-01", ",", "7.07873597e-01", ",", "7.06030923e-01", ",", "7.04728204e-01", ",", "\n", "7.09420909e-01", ",", "1.90740659e-01", ",", "4.75502285e-02", ",", "2.77188320e-02", ",", "\n", "7.08891412e-01", ",", "7.05214134e-01", ",", "7.09786887e-01", ",", "7.04371833e-01", ",", "\n", "7.04371110e-01", ",", "7.09828420e-01", ",", "3.33589977e-01", ",", "5.20857790e-02", ",", "\n", "2.84763136e-02", ",", "7.02210626e-01", ",", "7.11815232e-01", ",", "7.10512240e-01", ",", "\n", "7.03646004e-01", ",", "7.08017286e-01", ",", "7.06162814e-01", ",", "2.12569430e-05", ",", "\n", "2.35019125e-05", ",", "2.04211110e-05", ",", "7.51048890e-02", ",", "3.94254400e-01", ",", "\n", "7.11351099e-02", "]", ")", "\n", "self", ".", "mean_", "=", "np", ".", "array", "(", "[", "4.95458585e+03", ",", "5.67411891e-02", ",", "3.83176945e-02", ",", "2.97223474e+00", ",", "\n", "6.29733979e-02", ",", "3.50074471e-02", ",", "6.72845676e-01", ",", "9.92794768e+00", ",", "\n", "9.99628430e-01", ",", "5.39591547e-02", ",", "2.92795061e-02", ",", "2.12480714e-03", ",", "\n", "-", "1.01500319e-02", ",", "1.82667162e-02", ",", "1.00813201e-02", ",", "5.74404197e-03", ",", "\n", "6.86570242e-03", ",", "1.25316320e+00", ",", "4.76946516e-02", ",", "2.71326280e-02", ",", "\n", "7.02054326e-03", ",", "9.83378673e-03", ",", "-", "5.70616748e-03", ",", "5.50782881e-03", ",", "\n", "-", "8.44213953e-04", ",", "2.05958338e-03", ",", "1.57866569e+00", ",", "4.31476211e-02", ",", "\n", "2.73316392e-02", ",", "1.05505555e-02", ",", "1.03922250e-02", ",", "7.36865006e-03", ",", "\n", "-", "6.00523246e-04", ",", "6.53016990e-03", ",", "-", "1.72038113e-03", ",", "1.24807860e-05", ",", "\n", "1.60314173e-05", ",", "1.21732696e-05", ",", "5.67292645e-03", ",", "1.92488263e-01", ",", "\n", "5.08607199e-03", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.sample_full_swag": [[165, 184], ["numpy.random.randint", "swag_model.eval", "swag_model.forward_swag_fast", "len", "swag_model.w_avg.cuda", "swag_model.w2_avg.cuda", "swag_model.pre_D.cuda", "swag_model.cuda", "swag_model.w_avg.cpu", "swag_model.w2_avg.cpu", "swag_model.pre_D.cpu", "swag_model.cpu"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.spock_reg_model.SWAGModel.forward_swag_fast"], ["", "def", "sample_full_swag", "(", "self", ",", "X_sample", ")", ":", "\n", "        ", "\"\"\"Pick a random model from the ensemble and sample from it\n            within each model, it samples from its weights.\"\"\"", "\n", "\n", "swag_i", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "swag_ensemble", ")", ")", "\n", "swag_model", "=", "self", ".", "swag_ensemble", "[", "swag_i", "]", "\n", "swag_model", ".", "eval", "(", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "swag_model", ".", "w_avg", "=", "swag_model", ".", "w_avg", ".", "cuda", "(", ")", "\n", "swag_model", ".", "w2_avg", "=", "swag_model", ".", "w2_avg", ".", "cuda", "(", ")", "\n", "swag_model", ".", "pre_D", "=", "swag_model", ".", "pre_D", ".", "cuda", "(", ")", "\n", "swag_model", ".", "cuda", "(", ")", "\n", "", "out", "=", "swag_model", ".", "forward_swag_fast", "(", "X_sample", ",", "scale", "=", "0.5", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "swag_model", ".", "w_avg", "=", "swag_model", ".", "w_avg", ".", "cpu", "(", ")", "\n", "swag_model", ".", "w2_avg", "=", "swag_model", ".", "w2_avg", ".", "cpu", "(", ")", "\n", "swag_model", ".", "pre_D", "=", "swag_model", ".", "pre_D", ".", "cpu", "(", ")", "\n", "swag_model", ".", "cpu", "(", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time": [[185, 236], ["deepregressor.fitted_prior", "deepregressor.DeepRegressor.is_batched", "deepregressor.DeepRegressor.sample_instability_time", "numpy.median", "numpy.percentile", "numpy.percentile", "numpy.median", "numpy.percentile", "numpy.percentile"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.fitted_prior", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.is_batched", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.sample_instability_time"], ["", "def", "predict_instability_time", "(", "self", ",", "sim", ",", "samples", "=", "1000", ",", "seed", "=", "None", ",", "\n", "max_model_samples", "=", "100", ",", "return_samples", "=", "False", ",", "prior_above_9", "=", "fitted_prior", "(", ")", ",", "Ncpus", "=", "None", ")", ":", "\n", "        ", "\"\"\"Estimate instability time for given simulation(s), and the 68% confidence\n            interval.\n\n        Returns the median of the posterior, the 16th percentile, and\n            the 84th percentile. Uses `samples` samples of the posterior\n            to calculate this.\n\n        Parameters:\n\n        sim (rebound.Simulation or list): Orbital configuration(s) to test\n        samples (int): Number of samples to use\n        seed (int): Random seed\n        max_model_samples (int): maximum number of times to re-generate model parameters.\n            Larger number increases accuracy but greatly decreases speed.\n        return_samples (bool): return the raw samples as a second argument\n        prior_above_9 (function): function defining the probability density\n            function of instability times above 1e9 orbits of the innermost\n            planet. By default is a decaying prior which was fit to the training dataset.\n            This takes as input time in terms of the orbits of the innermost planet.\n        Ncpus (int): Number of CPUs to use for calculation (only if passing more than one simulation).\n            Default: Use all available cpus. \n\n        Returns:\n\n        center_estimate (float): instability time in units of\n            the rebound simulation's time units (e.g., if P=1.\n            for the innermost planet, this estimate will be\n            in units of orbits)\n        lower (float): 16th percentile instability time\n        upper (float): 84th percentile instability time\n        [t_inst_samples (array): raw samples of the posterior]\n        \"\"\"", "\n", "batched", "=", "self", ".", "is_batched", "(", "sim", ")", "\n", "t_inst_samples", "=", "self", ".", "sample_instability_time", "(", "sim", ",", "\n", "samples", "=", "samples", ",", "seed", "=", "seed", ",", "max_model_samples", "=", "max_model_samples", ",", "\n", "prior_above_9", "=", "prior_above_9", ",", "Ncpus", "=", "Ncpus", ")", "\n", "if", "batched", ":", "\n", "            ", "center_estimate", "=", "np", ".", "median", "(", "t_inst_samples", ",", "axis", "=", "1", ")", "\n", "upper", "=", "np", ".", "percentile", "(", "t_inst_samples", ",", "100", "-", "16", ",", "axis", "=", "1", ")", "\n", "lower", "=", "np", ".", "percentile", "(", "t_inst_samples", ",", "16", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "center_estimate", "=", "np", ".", "median", "(", "t_inst_samples", ")", "\n", "upper", "=", "np", ".", "percentile", "(", "t_inst_samples", ",", "100", "-", "16", ")", "\n", "lower", "=", "np", ".", "percentile", "(", "t_inst_samples", ",", "16", ")", "\n", "\n", "", "if", "return_samples", ":", "\n", "            ", "return", "center_estimate", ",", "lower", ",", "upper", ",", "t_inst_samples", "\n", "", "else", ":", "\n", "            ", "return", "center_estimate", ",", "lower", ",", "upper", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_stable": [[237, 296], ["deepregressor.fitted_prior", "deepregressor.DeepRegressor.is_batched", "deepregressor.DeepRegressor.sample_instability_time", "numpy.average", "numpy.average", "numpy.array", "numpy.min", "isinstance", "numpy.array", "isinstance", "len", "len", "numpy.abs", "numpy.min", "numpy.ones", "len", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.fitted_prior", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.is_batched", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.sample_instability_time"], ["", "", "def", "predict_stable", "(", "self", ",", "sim", ",", "tmax", "=", "None", ",", "samples", "=", "1000", ",", "seed", "=", "None", ",", "\n", "return_samples", "=", "False", ",", "max_model_samples", "=", "100", ",", "prior_above_9", "=", "fitted_prior", "(", ")", ",", "Ncpus", "=", "None", ")", ":", "\n", "        ", "\"\"\"Estimate chance of stability for given simulation(s).\n\n        Parameters:\n\n        sim (rebound.Simulation or list): Orbital configuration(s) to test\n        tmax (float or list): Time at which the system is queried as stable,\n            in rebound simulation time units.\n        samples (int): Number of samples to use\n        seed (int): Random seed\n        max_model_samples (int): maximum number of times to re-generate model parameters.\n            Larger number increases accuracy but greatly decreases speed.\n        return_samples (bool): return the raw samples as a second argument\n        prior_above_9 (function): function defining the probability density\n            function of instability times above 1e9 orbits of the innermost\n            planet. By default is a decaying prior which was fit to the training dataset.\n            This takes as input time in terms of the orbits of the innermost planet.\n        Ncpus (int): Number of CPUs to use for calculation (only if passing more than one simulation).\n            Default: Use all available cpus. \n\n        Returns:\n\n        p (float): probability of stability past the given tmax\n            (default 1e9*min(P) orbits)\n        [t_inst_samples (array): raw samples of the posterior]\n        \"\"\"", "\n", "batched", "=", "self", ".", "is_batched", "(", "sim", ")", "\n", "t_inst_samples", "=", "self", ".", "sample_instability_time", "(", "sim", ",", "\n", "samples", "=", "samples", ",", "seed", "=", "seed", ",", "max_model_samples", "=", "max_model_samples", ",", "\n", "prior_above_9", "=", "prior_above_9", ")", "\n", "\n", "if", "tmax", "is", "None", ":", "\n", "            ", "if", "batched", ":", "\n", "                ", "tmax", "=", "np", ".", "array", "(", "[", "\n", "1e9", "*", "\n", "np", ".", "min", "(", "[", "np", ".", "abs", "(", "p", ".", "P", ")", "for", "p", "in", "s", ".", "particles", "[", "1", ":", "s", ".", "N_real", "]", "]", ")", "\n", "for", "s", "in", "sim", "]", ")", "\n", "", "else", ":", "\n", "                ", "minP", "=", "np", ".", "min", "(", "[", "np", ".", "abs", "(", "p", ".", "P", ")", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "sim", ".", "N_real", "]", "]", ")", "\n", "tmax", "=", "1e9", "*", "minP", "\n", "", "", "elif", "batched", ":", "\n", "            ", "if", "isinstance", "(", "tmax", ",", "list", ")", ":", "\n", "                ", "tmax", "=", "np", ".", "array", "(", "tmax", ")", "\n", "", "elif", "isinstance", "(", "tmax", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "...", "\n", "", "else", ":", "\n", "                ", "tmax", "=", "np", ".", "ones", "(", "len", "(", "sim", ")", ")", "*", "tmax", "\n", "", "assert", "len", "(", "tmax", ")", "==", "len", "(", "sim", ")", "\n", "\n", "", "if", "batched", ":", "\n", "            ", "out", "=", "np", ".", "average", "(", "t_inst_samples", "[", ":", ",", ":", "]", ">", "tmax", "[", ":", ",", "None", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "np", ".", "average", "(", "t_inst_samples", ">", "tmax", ")", "\n", "\n", "", "if", "return_samples", ":", "\n", "            ", "return", "out", ",", "t_inst_samples", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.resample_stable_sims": [[297, 314], ["stable_past_9.sum", "max", "numpy.linspace", "scipy.interpolate.interp1d", "numpy.random.rand", "scipy.interpolate.interp1d.", "scipy.integrate.quad", "prior_above_9", "list", "list", "numpy.cumsum", "prior"], "methods", ["None"], ["", "", "def", "resample_stable_sims", "(", "self", ",", "samps_time", ",", "prior_above_9", ")", ":", "\n", "        ", "\"\"\"Use a prior to re-sample stable instability times\"\"\"", "\n", "stable_past_9", "=", "samps_time", ">=", "9", "\n", "normalization", "=", "quad", "(", "prior_above_9", ",", "a", "=", "9", ",", "b", "=", "np", ".", "inf", ")", "[", "0", "]", "\n", "prior", "=", "lambda", "logT", ":", "prior_above_9", "(", "logT", ")", "/", "normalization", "\n", "n_samples", "=", "stable_past_9", ".", "sum", "(", ")", "\n", "bins", "=", "max", "(", "[", "10000", ",", "n_samples", "*", "4", "]", ")", "\n", "top", "=", "100.", "\n", "bin_edges", "=", "np", ".", "linspace", "(", "9", ",", "top", ",", "num", "=", "bins", ")", "\n", "cum_values", "=", "[", "0", "]", "+", "list", "(", "np", ".", "cumsum", "(", "prior", "(", "bin_edges", ")", "*", "(", "bin_edges", "[", "1", "]", "-", "bin_edges", "[", "0", "]", ")", ")", ")", "+", "[", "1", "]", "\n", "bin_edges", "=", "[", "9.", "]", "+", "list", "(", "bin_edges", ")", "+", "[", "top", "]", "\n", "# Numerically interpolate the inverse cumulative distribution function:", "\n", "inv_cdf", "=", "interp1d", "(", "cum_values", ",", "bin_edges", ")", "\n", "r", "=", "np", ".", "random", ".", "rand", "(", "n_samples", ")", "\n", "t_inst_samples", "=", "inv_cdf", "(", "r", ")", "\n", "samps_time", "[", "stable_past_9", "]", "=", "t_inst_samples", "\n", "return", "samps_time", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.is_batched": [[315, 323], ["isinstance", "len", "len", "ValueError", "set"], "methods", ["None"], ["", "def", "is_batched", "(", "self", ",", "sim", ")", ":", "\n", "        ", "batched", "=", "False", "\n", "if", "isinstance", "(", "sim", ",", "list", ")", ":", "\n", "            ", "batched", "=", "True", "\n", "nsim", "=", "len", "(", "sim", ")", "\n", "if", "len", "(", "set", "(", "[", "s", ".", "N_real", "for", "s", "in", "sim", "]", ")", ")", "!=", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\"If running over many sims at once, they must have the same number of particles!\"", ")", "\n", "", "", "return", "batched", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.sample_instability_time": [[324, 440], ["deepregressor.fitted_prior", "deepregressor.DeepRegressor.is_batched", "range", "numpy.array", "str", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "len", "numpy.array", "deepregressor.generate_dataset", "numpy.array", "len", "einops.rearrange", "einops.rearrange", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "min", "int", "einops.repeat", "numpy.array", "einops.rearrange", "sampled_mu_std.astype.astype.astype", "numpy.array", "deepregressor.DeepRegressor.resample_stable_sims", "einops.rearrange", "numpy.min", "numpy.power", "numpy.min", "numpy.min", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "multiprocessing.cpu_count", "multiprocessing.pool.ThreadPool", "pool.map", "isinstance", "numpy.min", "Xflat.cuda.cuda.cuda", "math.ceil", "deepregressor.fast_truncnorm", "numpy.array.append", "numpy.array.append", "enumerate", "enumerate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "deepregressor.DeepRegressor.sample_full_swag().detach().cpu().numpy", "numpy.abs", "numpy.abs", "isinstance", "isinstance", "isinstance", "numpy.abs", "numpy.ones", "range", "deepregressor.DeepRegressor.sample_full_swag().detach().cpu", "numpy.ones", "deepregressor.DeepRegressor.sample_full_swag().detach", "deepregressor.DeepRegressor.sample_full_swag"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.fitted_prior", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.is_batched", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.generate_dataset", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.resample_stable_sims", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.fast_truncnorm", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.sample_full_swag"], ["", "@", "profile", "\n", "def", "sample_instability_time", "(", "self", ",", "sim", ",", "samples", "=", "1000", ",", "seed", "=", "None", ",", "\n", "max_model_samples", "=", "100", ",", "prior_above_9", "=", "fitted_prior", "(", ")", ",", "Ncpus", "=", "None", ")", ":", "\n", "        ", "\"\"\"Return samples from a posterior over instability time for\n            given simulation(s). This returns samples from a simple prior for\n            all times greater than 10^9 orbits.\n\n        Parameters:\n\n        sim (rebound.Simulation or list): Orbital configuration(s) to test\n        samples (int): Number of samples to return\n        seed (int): Random seed\n        max_model_samples (int): maximum number of times to re-generate model parameters.\n            Larger number increases accuracy but greatly decreases speed.\n        prior_above_9 (function): function defining the probability density\n            function of instability times above 1e9 orbits of the innermost\n            planet. By default is a decaying prior which was fit to the training dataset.\n            This takes as input time in terms of the orbits of the innermost planet.\n        Ncpus (int): Number of CPUs to use for calculation (only if\n            passing more than one simulation). Default: Use all available cpus. \n\n        Returns:\n\n        np.array: samples of the posterior (nsamples,) or (nsim, nsamples) for\n            instability time, in units of the rebound simulation.\n        \"\"\"", "\n", "batched", "=", "self", ".", "is_batched", "(", "sim", ")", "\n", "\n", "if", "seed", "is", "not", "None", ":", "\n", "            ", "os", ".", "environ", "[", "\"PL_GLOBAL_SEED\"", "]", "=", "str", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "", "", "if", "batched", ":", "\n", "            ", "n_sims", "=", "len", "(", "sim", ")", "\n", "if", "Ncpus", "is", "None", ":", "\n", "                ", "Ncpus", "=", "cpu_count", "(", ")", "\n", "", "with", "Pool", "(", "Ncpus", ")", "as", "pool", ":", "\n", "                ", "pool_out", "=", "pool", ".", "map", "(", "generate_dataset", ",", "sim", ")", "\n", "\n", "", "Xs", "=", "np", ".", "array", "(", "[", "X", "for", "X", "in", "pool_out", "if", "isinstance", "(", "X", ",", "np", ".", "ndarray", ")", "]", ")", "\n", "already_computed_results_idx", "=", "[", "i", "for", "i", ",", "X", "in", "enumerate", "(", "pool_out", ")", "if", "not", "isinstance", "(", "X", ",", "np", ".", "ndarray", ")", "]", "\n", "already_computed_results_times", "=", "[", "X", "for", "i", ",", "X", "in", "enumerate", "(", "pool_out", ")", "if", "not", "isinstance", "(", "X", ",", "np", ".", "ndarray", ")", "]", "\n", "", "else", ":", "\n", "            ", "out", "=", "generate_dataset", "(", "sim", ")", "\n", "if", "not", "isinstance", "(", "out", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "minP", "=", "np", ".", "min", "(", "[", "np", ".", "abs", "(", "p", ".", "P", ")", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "sim", ".", "N_real", "]", "]", ")", "\n", "return", "np", ".", "ones", "(", "samples", ")", "*", "out", "*", "minP", "\n", "", "Xs", "=", "np", ".", "array", "(", "[", "out", "]", ")", "\n", "\n", "", "if", "len", "(", "Xs", ")", ">", "0", ":", "\n", "            ", "nbatch", "=", "Xs", ".", "shape", "[", "0", "]", "\n", "ntrios", "=", "Xs", ".", "shape", "[", "1", "]", "\n", "nt", "=", "100", "\n", "X", "=", "E", ".", "rearrange", "(", "Xs", ",", "'batch trio () time feature -> (batch trio time) feature'", ")", "\n", "Xp", "=", "(", "X", "-", "self", ".", "mean_", "[", "None", ",", ":", "]", ")", "/", "self", ".", "scale_", "[", "None", ",", ":", "]", "\n", "Xp", "=", "E", ".", "rearrange", "(", "Xp", ",", "'(batch trio time) feature -> (batch trio) time feature'", ",", "\n", "batch", "=", "nbatch", ",", "trio", "=", "ntrios", ",", "time", "=", "nt", ")", "\n", "\n", "Xflat", "=", "torch", ".", "tensor", "(", "Xp", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "                ", "Xflat", "=", "Xflat", ".", "cuda", "(", ")", "\n", "\n", "", "model_samples", "=", "min", "(", "[", "max_model_samples", ",", "samples", "]", ")", "\n", "oversample", "=", "int", "(", "math", ".", "ceil", "(", "samples", "/", "model_samples", ")", ")", "\n", "Xflat", "=", "E", ".", "repeat", "(", "Xflat", ",", "\n", "'(batch trio) time feature -> (batch trio oversample) time feature'", ",", "\n", "batch", "=", "nbatch", ",", "trio", "=", "ntrios", ",", "\n", "oversample", "=", "oversample", ")", "\n", "\n", "sampled_mu_std", "=", "np", ".", "array", "(", "[", "self", ".", "sample_full_swag", "(", "Xflat", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "_", "in", "range", "(", "model_samples", ")", "]", ")", "\n", "sampled_mu_std", "=", "E", ".", "rearrange", "(", "sampled_mu_std", ",", "\n", "'msamples (batch trio oversample) mu_std -> (msamples oversample) (batch trio) mu_std'", ",", "\n", "batch", "=", "nbatch", ",", "trio", "=", "ntrios", ",", "\n", "oversample", "=", "oversample", "\n", ")", "\n", "sampled_mu_std", "=", "sampled_mu_std", "[", ":", "samples", "]", "\n", "sampled_mu_std", "=", "sampled_mu_std", ".", "astype", "(", "np", ".", "float64", ")", "\n", "# print(sampled_mu_std.shape)", "\n", "#(samples, (batch trio), mu_std)", "\n", "\n", "samps_time", "=", "np", ".", "array", "(", "fast_truncnorm", "(", "\n", "sampled_mu_std", "[", "...", ",", "0", "]", ",", "sampled_mu_std", "[", "...", ",", "1", "]", ",", "\n", "left", "=", "4", ",", "d", "=", "10000", ",", "nsamp", "=", "40", "\n", ")", ")", "\n", "samps_time", "=", "self", ".", "resample_stable_sims", "(", "samps_time", ",", "prior_above_9", ")", "\n", "samps_time", "=", "E", ".", "rearrange", "(", "samps_time", ",", "\n", "'samples (batch trio) -> batch samples trio'", ",", "\n", "batch", "=", "nbatch", ",", "trio", "=", "ntrios", ")", "\n", "outs", "=", "np", ".", "min", "(", "samps_time", ",", "2", ")", "\n", "time_estimates", "=", "np", ".", "power", "(", "10.0", ",", "outs", ")", "\n", "# print(time_estimates.shape)", "\n", "#HACK TODO - need already computed estimates", "\n", "\n", "", "if", "not", "batched", ":", "\n", "            ", "minP", "=", "np", ".", "min", "(", "[", "np", ".", "abs", "(", "p", ".", "P", ")", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "sim", ".", "N_real", "]", "]", ")", "\n", "return", "time_estimates", "[", "0", "]", "*", "minP", "\n", "\n", "", "j", "=", "0", "\n", "k", "=", "0", "\n", "correct_order_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_sims", ")", ":", "\n", "            ", "cur_sim", "=", "sim", "[", "i", "]", "\n", "minP", "=", "np", ".", "min", "(", "[", "np", ".", "abs", "(", "p", ".", "P", ")", "for", "p", "in", "cur_sim", ".", "particles", "[", "1", ":", "cur_sim", ".", "N_real", "]", "]", ")", "\n", "if", "i", "in", "already_computed_results_idx", ":", "\n", "                ", "correct_order_results", ".", "append", "(", "already_computed_results_times", "[", "k", "]", "*", "np", ".", "ones", "(", "samples", ")", "*", "minP", ")", "\n", "k", "+=", "1", "\n", "", "else", ":", "\n", "                ", "correct_order_results", ".", "append", "(", "time_estimates", "[", "j", "]", "*", "minP", ")", "\n", "j", "+=", "1", "\n", "\n", "", "", "correct_order_results", "=", "np", ".", "array", "(", "correct_order_results", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "return", "correct_order_results", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.fitted_prior": [[31, 34], ["numpy.exp", "numpy.exp"], "function", ["None"], ["def", "fitted_prior", "(", ")", ":", "\n", "    ", "\"\"\"A prior that was fit to the PDF of instability times in the training set below T=9\"\"\"", "\n", "return", "(", "lambda", "logT", ":", "3.27086190404742", "*", "np", ".", "exp", "(", "-", "0.424033970670719", "*", "logT", ")", "-", "10.8793430454878", "*", "np", ".", "exp", "(", "-", "0.200351029031774", "*", "logT", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.flat_prior": [[35, 38], ["None"], "function", ["None"], ["", "def", "flat_prior", "(", "upper_limit", ")", ":", "\n", "    ", "\"\"\"A uniform prior between 9 and an upper limit\"\"\"", "\n", "return", "(", "lambda", "logT", ":", "1.0", "*", "(", "logT", "<=", "upper_limit", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.exponential_decaying_prior": [[39, 42], ["numpy.exp"], "function", ["None"], ["", "def", "exponential_decaying_prior", "(", "decay_rate", ")", ":", "\n", "    ", "\"\"\"An exponentially decaying prior, which decays at a rate e^(-T*decay_rate)\"\"\"", "\n", "return", "(", "lambda", "logT", ":", "np", ".", "exp", "(", "-", "decay_rate", "*", "(", "logT", "-", "9", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.generate_dataset": [[45, 79], ["sim.copy.copy", "simsetup.init_sim_parameters", "collections.OrderedDict", "int", "list", "tseries_feature_functions.get_extended_tseries", "numpy.array", "enumerate", "numpy.array", "AttributeError", "collections.OrderedDict.values", "tseries[].astype", "numpy.array().astype", "einops.repeat", "deepregressor.data_setup_kernel", "np.array.append", "range", "numpy.array"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.init_sim_parameters", "home.repos.pwc.inspect_result.dtamayo_spock.spock.tseries_feature_functions.get_extended_tseries", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.data_setup_kernel"], ["def", "generate_dataset", "(", "sim", ")", ":", "\n", "    ", "sim", "=", "sim", ".", "copy", "(", ")", "\n", "init_sim_parameters", "(", "sim", ",", "megno", "=", "False", ",", "safe_mode", "=", "0", ")", "\n", "if", "sim", ".", "N_real", "<", "4", ":", "\n", "        ", "raise", "AttributeError", "(", "\"SPOCK Error: SPOCK only works for systems with 3 or more planets\"", ")", "\n", "", "trios", "=", "[", "[", "i", ",", "i", "+", "1", ",", "i", "+", "2", "]", "for", "i", "in", "range", "(", "1", ",", "sim", ".", "N_real", "-", "2", ")", "]", "# list of adjacent trios", "\n", "\n", "kwargs", "=", "OrderedDict", "(", ")", "\n", "kwargs", "[", "'Norbits'", "]", "=", "int", "(", "1e4", ")", "\n", "kwargs", "[", "'Nout'", "]", "=", "100", "\n", "kwargs", "[", "'trios'", "]", "=", "trios", "\n", "args", "=", "list", "(", "kwargs", ".", "values", "(", ")", ")", "\n", "# These are the .npy.", "\n", "# In the other file, we concatenate (restseries, orbtseries, mass_array)", "\n", "tseries", ",", "stable", "=", "get_extended_tseries", "(", "sim", ",", "args", ",", "mmr", "=", "False", ",", "megno", "=", "False", ")", "\n", "\n", "if", "stable", "!=", "True", ":", "\n", "        ", "time", "=", "stable", "\n", "return", "time", "\n", "\n", "", "tseries", "=", "np", ".", "array", "(", "tseries", ")", "\n", "alltime", "=", "[", "]", "\n", "\n", "Xs", "=", "[", "]", "\n", "for", "i", ",", "trio", "in", "enumerate", "(", "trios", ")", ":", "\n", "# These are the .npy.", "\n", "        ", "cur_tseries", "=", "tseries", "[", "None", ",", "i", ",", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mass_array", "=", "np", ".", "array", "(", "[", "sim", ".", "particles", "[", "j", "]", ".", "m", "/", "sim", ".", "particles", "[", "0", "]", ".", "m", "for", "j", "in", "trio", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mass_array", "=", "E", ".", "repeat", "(", "mass_array", ",", "'i -> () t i'", ",", "t", "=", "100", ")", "\n", "X", "=", "data_setup_kernel", "(", "mass_array", ",", "cur_tseries", ")", "\n", "Xs", ".", "append", "(", "X", ")", "\n", "\n", "", "Xs", "=", "np", ".", "array", "(", "Xs", ")", "\n", "return", "Xs", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.fast_truncnorm": [[80, 128], ["scale.reshape.reshape", "loc.reshape.reshape", "numpy.zeros_like", "range", "np.zeros_like.reshape", "numpy.random.normal", "mask.argmax", "numpy.arange"], "function", ["None"], ["", "def", "fast_truncnorm", "(", "\n", "loc", ",", "scale", ",", "left", "=", "np", ".", "inf", ",", "right", "=", "np", ".", "inf", ",", "\n", "d", "=", "10000", ",", "nsamp", "=", "50", ")", ":", "\n", "    ", "\"\"\"Fast truncnorm sampling.\n    \n    Assumes scale and loc have the desired shape of output.\n    length is number of elements.\n    Select nsamp based on expecting at minimum one sample of a Gaussian\n        to fit within your (left, right) range.\n    Select d based on memory considerations - need to operate on\n        a (d, nsamp) array.\n    \"\"\"", "\n", "oldscale", "=", "scale", "\n", "oldloc", "=", "loc", "\n", "\n", "scale", "=", "scale", ".", "reshape", "(", "-", "1", ")", "\n", "loc", "=", "loc", ".", "reshape", "(", "-", "1", ")", "\n", "t_inst_samples", "=", "np", ".", "zeros_like", "(", "scale", ")", "\n", "start", "=", "0", "\n", "\n", "for", "start", "in", "range", "(", "0", ",", "scale", ".", "shape", "[", "0", "]", ",", "d", ")", ":", "\n", "\n", "        ", "end", "=", "start", "+", "d", "\n", "if", "end", ">", "scale", ".", "shape", "[", "0", "]", ":", "\n", "            ", "end", "=", "scale", ".", "shape", "[", "0", "]", "\n", "\n", "", "cd", "=", "end", "-", "start", "\n", "rand_out", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "nsamp", ",", "cd", ")", ")", "\n", "\n", "rand_out", "=", "(", "\n", "rand_out", "*", "scale", "[", "None", ",", "start", ":", "end", "]", "\n", "+", "loc", "[", "None", ",", "start", ":", "end", "]", "\n", ")", "\n", "\n", "#rand_out is (nsamp, cd)", "\n", "if", "right", "==", "np", ".", "inf", ":", "\n", "            ", "mask", "=", "(", "rand_out", ">", "left", ")", "\n", "", "elif", "left", "==", "np", ".", "inf", ":", "\n", "            ", "mask", "=", "(", "rand_out", "<", "right", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "(", "rand_out", ">", "left", ")", "&", "(", "rand_out", "<", "right", ")", "\n", "\n", "", "first_good_val", "=", "rand_out", "[", "\n", "mask", ".", "argmax", "(", "0", ")", ",", "np", ".", "arange", "(", "cd", ")", "\n", "]", "\n", "t_inst_samples", "[", "start", ":", "end", "]", "=", "first_good_val", "\n", "\n", "", "return", "t_inst_samples", ".", "reshape", "(", "*", "oldscale", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.data_setup_kernel": [[441, 470], ["numpy.concatenate", "numpy.concatenate", "numpy.nan_to_num", "numpy.zeros", "range", "numpy.cos", "numpy.sin", "numpy.isfinite"], "function", ["None"], ["", "", "@", "profile", "\n", "def", "data_setup_kernel", "(", "mass_array", ",", "cur_tseries", ")", ":", "\n", "    ", "\"\"\"Data preprocessing\"\"\"", "\n", "nf", "=", "32", "\n", "nt", "=", "100", "\n", "concat_with_mass", "=", "np", ".", "concatenate", "(", "(", "cur_tseries", ",", "mass_array", ")", ",", "axis", "=", "2", ")", "\n", "assert", "concat_with_mass", ".", "shape", "==", "(", "1", ",", "nt", ",", "nf", "-", "3", ")", "\n", "\n", "concat_with_nan", "=", "np", ".", "concatenate", "(", "\n", "(", "concat_with_mass", ",", "\n", "(", "~", "np", ".", "isfinite", "(", "concat_with_mass", "[", "...", ",", "[", "3", ",", "6", ",", "7", "]", "]", ")", ")", ")", ",", "\n", "axis", "=", "2", ")", "\n", "\n", "clean_input", "=", "np", ".", "nan_to_num", "(", "concat_with_nan", ",", "posinf", "=", "0.0", ",", "neginf", "=", "0.0", ")", "\n", "\n", "X", "=", "np", ".", "zeros", "(", "(", "1", ",", "nt", ",", "nf", "+", "9", ")", ")", "\n", "\n", "cur_feature", "=", "0", "\n", "for", "j", "in", "range", "(", "nf", ")", ":", "\n", "        ", "if", "j", "in", "[", "11", ",", "12", ",", "13", ",", "17", ",", "18", ",", "19", ",", "23", ",", "24", ",", "25", "]", ":", "#if 'Omega' in label or 'pomega' in label or 'theta' in label:", "\n", "            ", "X", "[", ":", ",", ":", ",", "cur_feature", "]", "=", "np", ".", "cos", "(", "clean_input", "[", ":", ",", ":", ",", "j", "]", ")", "\n", "cur_feature", "+=", "1", "\n", "X", "[", ":", ",", ":", ",", "cur_feature", "]", "=", "np", ".", "sin", "(", "clean_input", "[", ":", ",", ":", ",", "j", "]", ")", "\n", "cur_feature", "+=", "1", "\n", "", "else", ":", "\n", "            ", "X", "[", ":", ",", ":", ",", "cur_feature", "]", "=", "clean_input", "[", ":", ",", ":", ",", "j", "]", "\n", "cur_feature", "+=", "1", "\n", "\n", "", "", "return", "X", "\n", "", ""]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.__init__": [[105, 107], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "check_errors", "(", "self", ",", "sim", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.check_errors": [[107, 110], ["AttributeError"], "methods", ["None"], ["", "def", "check_errors", "(", "self", ",", "sim", ")", ":", "\n", "        ", "if", "sim", ".", "N_real", "<", "4", ":", "\n", "            ", "raise", "AttributeError", "(", "\"SPOCK Error: SPOCK only applicable to systems with 3 or more planets\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_tau": [[111, 135], ["isinstance", "len", "s.copy.copy.copy", "simsetup.init_sim_parameters", "numpy.min", "analyticalclassifier.AnalyticalClassifier.check_errors", "args.append", "len", "analyticalclassifier.calc_tau", "multiprocessing.pool.ThreadPool", "multiprocessing.pool.ThreadPool.map", "numpy.array", "multiprocessing.pool.ThreadPool.terminate", "multiprocessing.pool.ThreadPool.join", "multiprocessing.cpu_count"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.init_sim_parameters", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.check_errors", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.calc_tau"], ["", "", "def", "predict_tau", "(", "self", ",", "sim", ",", "n_jobs", "=", "-", "1", ")", ":", "\n", "        ", "if", "isinstance", "(", "sim", ",", "rebound", ".", "Simulation", ")", ":", "\n", "            ", "sim", "=", "[", "sim", "]", "\n", "", "Nsims", "=", "len", "(", "sim", ")", "\n", "\n", "args", "=", "[", "]", "\n", "for", "s", "in", "sim", ":", "\n", "            ", "s", "=", "s", ".", "copy", "(", ")", "\n", "init_sim_parameters", "(", "s", ")", "\n", "minP", "=", "np", ".", "min", "(", "[", "p", ".", "P", "for", "p", "in", "s", ".", "particles", "[", "1", ":", "s", ".", "N_real", "]", "]", ")", "\n", "self", ".", "check_errors", "(", "s", ")", "\n", "args", ".", "append", "(", "s", ")", "\n", "\n", "", "if", "len", "(", "args", ")", "==", "1", ":", "# single sim", "\n", "            ", "tau", "=", "calc_tau", "(", "args", "[", "0", "]", ")", "# stable will be 0 if an orbit is hyperbolic", "\n", "", "else", ":", "\n", "            ", "if", "n_jobs", "==", "-", "1", ":", "\n", "                ", "n_jobs", "=", "cpu_count", "(", ")", "\n", "", "pool", "=", "ThreadPool", "(", "n_jobs", ")", "\n", "tau", "=", "pool", ".", "map", "(", "calc_tau", ",", "args", ")", "\n", "tau", "=", "np", ".", "array", "(", "tau", ")", "\n", "pool", ".", "terminate", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "", "return", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable": [[136, 159], ["isinstance", "len", "analyticalclassifier.AnalyticalClassifier.predict_tau", "numpy.maximum"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_tau"], ["", "def", "predict_stable", "(", "self", ",", "sim", ",", "n_jobs", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"\n        Predict whether passed simulation will be stable over 10^9 orbits of the innermost planet.\n\n        Parameters:\n\n        sim (rebound.Simulation): Orbital configuration to test\n        n_jobs (int):               Number of cores to use for calculation (only if passing more than one simulation). Default: Use all available cores. \n\n        Returns:\n\n        float:  Estimated probability of stability. Will return exactly zero if configuration goes \n                unstable within first 10^4 orbits.\n\n        \"\"\"", "\n", "if", "isinstance", "(", "sim", ",", "rebound", ".", "Simulation", ")", ":", "\n", "            ", "sim", "=", "[", "sim", "]", "\n", "", "Nsims", "=", "len", "(", "sim", ")", "\n", "\n", "tau", "=", "self", ".", "predict_tau", "(", "sim", ",", "n_jobs", "=", "n_jobs", ")", "\n", "prob", "=", "np", ".", "maximum", "(", "1", "-", "tau", ",", "0", ")", "\n", "\n", "return", "prob", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.eminus_max": [[10, 34], ["numpy.identity", "numpy.array", "numpy.linalg.eigh", "numpy.sqrt", "AttributeEror", "numpy.arcsin", "numpy.abs", "numpy.sqrt", "numpy.ix_", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["def", "eminus_max", "(", "lsys", ",", "Lambda", ",", "i1", ",", "i2", ")", ":", "\n", "    ", "if", "i1", ">", "i2", ":", "\n", "        ", "raise", "AttributeEror", "(", "\"i2 must be exterior body\"", ")", "\n", "", "res", "=", "{", "}", "\n", "res", "[", "'L10'", "]", "=", "Lambda", "[", "i1", "-", "1", "]", "\n", "res", "[", "'L20'", "]", "=", "Lambda", "[", "i2", "-", "1", "]", "\n", "res", "[", "'L12'", "]", "=", "res", "[", "'L10'", "]", "+", "res", "[", "'L20'", "]", "\n", "res", "[", "'Lr'", "]", "=", "res", "[", "'L10'", "]", "*", "res", "[", "'L20'", "]", "/", "res", "[", "'L12'", "]", "\n", "res", "[", "'psi'", "]", "=", "np", ".", "pi", "+", "np", ".", "arcsin", "(", "np", ".", "sqrt", "(", "res", "[", "'L10'", "]", "/", "res", "[", "'L12'", "]", ")", ")", "\n", "res", "[", "'R'", "]", "=", "np", ".", "identity", "(", "Lambda", ".", "shape", "[", "0", "]", ")", "# Nplanets x Nplanets rotation matrix", "\n", "# Only rotate the 2x2 submatrix corresponding to i1 and i2 with rotation matrix", "\n", "res", "[", "'R'", "]", "[", "np", ".", "ix_", "(", "[", "i1", "-", "1", ",", "i2", "-", "1", "]", ",", "[", "i1", "-", "1", ",", "i2", "-", "1", "]", ")", "]", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "res", "[", "'psi'", "]", ")", ",", "-", "np", ".", "sin", "(", "res", "[", "'psi'", "]", ")", "]", ",", "[", "np", ".", "sin", "(", "res", "[", "'psi'", "]", ")", ",", "np", ".", "cos", "(", "res", "[", "'psi'", "]", ")", "]", "]", ")", "\n", "\n", "Mnorm", "=", "res", "[", "'R'", "]", "@", "lsys", ".", "Neccentricity_matrix", "@", "res", "[", "'R'", "]", ".", "T", "\n", "Fx0", "=", "res", "[", "'R'", "]", "@", "lsys", ".", "kappa0_vec", "/", "res", "[", "'Lr'", "]", "**", "(", "1", "/", "2", ")", "\n", "Fy0", "=", "res", "[", "'R'", "]", "@", "lsys", ".", "eta0_vec", "/", "res", "[", "'Lr'", "]", "**", "(", "1", "/", "2", ")", "\n", "\n", "vals", ",", "T", "=", "np", ".", "linalg", ".", "eigh", "(", "Mnorm", ")", "\n", "\n", "Ax0", "=", "T", ".", "T", "@", "Fx0", "\n", "Ay0", "=", "T", ".", "T", "@", "Fy0", "\n", "A", "=", "np", ".", "sqrt", "(", "Ax0", "**", "2", "+", "Ay0", "**", "2", ")", "# Mode amplitudes (A[0], A[1])", "\n", "Fmax", "=", "np", ".", "abs", "(", "T", ")", "@", "A", ".", "T", "\n", "return", "Fmax", "[", "i1", "-", "1", "]", "# i1-1 index is eminus for the i1,i2 pair", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.calc_tau_pair": [[35, 55], ["AttributeEror", "analyticalclassifier.eminus_max", "numpy.sqrt", "numpy.abs", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.log"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.eminus_max"], ["", "def", "calc_tau_pair", "(", "sim", ",", "lsys", ",", "Lambda", ",", "i1", ",", "i2", ",", "LL_modulation", "=", "True", ")", ":", "\n", "    ", "'''\n    Calculates optical depth tau of MMRs between single pair of planets with index i1 and i2\n    If LL_modulation is True, it will use the maximum anti-aligned eccentricity along \n    the Laplace-Lagrange secular cycle\n    If False, it will use the initial value of the anti-aligned eccentricity\n    '''", "\n", "if", "i1", ">", "i2", ":", "\n", "        ", "raise", "AttributeEror", "(", "\"i2 must be exterior body\"", ")", "\n", "", "ps", "=", "sim", ".", "particles", "\n", "delta", "=", "(", "ps", "[", "i2", "]", ".", "a", "-", "ps", "[", "i1", "]", ".", "a", ")", "/", "ps", "[", "i2", "]", ".", "a", "/", "(", "ps", "[", "i1", "]", ".", "m", "+", "ps", "[", "i2", "]", ".", "m", ")", "**", "(", "1", "/", "4", ")", "\n", "if", "LL_modulation", "==", "True", ":", "# calculate maximum along Laplace Lagrange cycle", "\n", "        ", "emax", "=", "eminus_max", "(", "lsys", ",", "Lambda", ",", "i1", ",", "i2", ")", "\n", "", "else", ":", "# use initial value of eminus", "\n", "        ", "emx", "=", "ps", "[", "i2", "]", ".", "e", "*", "np", ".", "cos", "(", "ps", "[", "i2", "]", ".", "pomega", ")", "-", "ps", "[", "i1", "]", ".", "e", "*", "np", ".", "cos", "(", "ps", "[", "i1", "]", ".", "pomega", ")", "\n", "emy", "=", "ps", "[", "i2", "]", ".", "e", "*", "np", ".", "sin", "(", "ps", "[", "i2", "]", ".", "pomega", ")", "-", "ps", "[", "i1", "]", ".", "e", "*", "np", ".", "sin", "(", "ps", "[", "i1", "]", ".", "pomega", ")", "\n", "emax", "=", "np", ".", "sqrt", "(", "emx", "**", "2", "+", "emy", "**", "2", ")", "\n", "", "ec", "=", "(", "1", "-", "(", "ps", "[", "i1", "]", ".", "P", "/", "ps", "[", "i2", "]", ".", "P", ")", "**", "(", "2", "/", "3", ")", ")", "\n", "tau", "=", "(", "1.8", "/", "delta", ")", "**", "2", "/", "np", ".", "abs", "(", "np", ".", "log", "(", "emax", "/", "ec", ")", ")", "**", "(", "3", "/", "2", ")", "\n", "return", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.calc_tau_pairs": [[56, 79], ["numpy.isnan", "celmech.secular.LaplaceLagrangeSystem.from_Simulation", "celmech.Poincare.from_Simulation", "numpy.array", "analyticalclassifier.calc_tau_pair"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.calc_tau_pair"], ["", "def", "calc_tau_pairs", "(", "sim", ",", "indexpairs", ",", "LL_modulation", "=", "True", ")", ":", "\n", "    ", "'''\n    Calculates total tau from the passed set of indexpairs, e.g. [[1,2], [2,3], [2,4]]\n    If LL_modulation is True, it will use the maximum anti-aligned eccentricity along \n    the Laplace-Lagrange secular cycle\n    If False, it will use the initial value of the anti-aligned eccentricity\n    '''", "\n", "if", "np", ".", "isnan", "(", "sim", ".", "dt", ")", ":", "# init_sim_parameters sets timestep to nan if any orbit is hyperbolic. Return tau=inf, i.e. chaotic/unstable", "\n", "        ", "tau", "=", "np", ".", "inf", "\n", "return", "tau", "\n", "\n", "", "if", "LL_modulation", "==", "True", ":", "\n", "        ", "lsys", "=", "LaplaceLagrangeSystem", ".", "from_Simulation", "(", "sim", ")", "\n", "pvars", "=", "Poincare", ".", "from_Simulation", "(", "sim", ")", "\n", "Lambda", "=", "np", ".", "array", "(", "[", "p", ".", "Lambda", "for", "p", "in", "pvars", ".", "particles", "[", "1", ":", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "lsys", "=", "None", "\n", "Lambda", "=", "None", "\n", "\n", "", "tau", "=", "0", "\n", "for", "i1", ",", "i2", "in", "indexpairs", ":", "\n", "        ", "tau", "+=", "calc_tau_pair", "(", "sim", ",", "lsys", ",", "Lambda", ",", "i1", ",", "i2", ",", "LL_modulation", "=", "LL_modulation", ")", "\n", "", "return", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.calc_tau": [[80, 102], ["numpy.isnan", "celmech.secular.LaplaceLagrangeSystem.from_Simulation", "celmech.Poincare.from_Simulation", "numpy.array", "range", "analyticalclassifier.calc_tau_pair", "analyticalclassifier.calc_tau_pair"], "function", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.calc_tau_pair", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.calc_tau_pair"], ["", "def", "calc_tau", "(", "sim", ")", ":", "\n", "    ", "'''\n    Calculates tau for each planet using adjacent neighbors, taking the maximum eminus over the Laplace-Lagrange secular cycle.\n    Returns the maximum tau among the values calculated for each of the planets.\n    '''", "\n", "if", "np", ".", "isnan", "(", "sim", ".", "dt", ")", ":", "# init_sim_parameters sets timestep to nan if any orbit is hyperbolic. Return tau=inf, i.e. chaotic/unstable", "\n", "        ", "tau", "=", "np", ".", "inf", "\n", "return", "tau", "\n", "", "lsys", "=", "LaplaceLagrangeSystem", ".", "from_Simulation", "(", "sim", ")", "\n", "pvars", "=", "Poincare", ".", "from_Simulation", "(", "sim", ")", "\n", "Lambda", "=", "np", ".", "array", "(", "[", "p", ".", "Lambda", "for", "p", "in", "pvars", ".", "particles", "[", "1", ":", "]", "]", ")", "\n", "\n", "tau_max", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "sim", ".", "N_real", ")", ":", "\n", "        ", "tau", "=", "0", "\n", "if", "i", "-", "1", ">=", "1", ":", "\n", "            ", "tau", "+=", "calc_tau_pair", "(", "sim", ",", "lsys", ",", "Lambda", ",", "i", "-", "1", ",", "i", ",", "LL_modulation", "=", "True", ")", "\n", "", "if", "i", "+", "1", "<", "sim", ".", "N_real", ":", "\n", "            ", "tau", "+=", "calc_tau_pair", "(", "sim", ",", "lsys", ",", "Lambda", ",", "i", ",", "i", "+", "1", ",", "LL_modulation", "=", "True", ")", "\n", "", "if", "tau", ">", "tau_max", ":", "\n", "            ", "tau_max", "=", "tau", "\n", "", "", "return", "tau_max", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressor.setUp": [[72, 74], ["spock.DeepRegressor"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "DeepRegressor", "(", "cuda", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressor.relative": [[75, 77], ["abs"], "methods", ["None"], ["", "def", "relative", "(", "self", ",", "p1", ",", "p2", ")", ":", "\n", "        ", "return", "abs", "(", "p1", "-", "p2", ")", "/", "(", "p1", "+", "p2", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressor.test_seed": [[78, 88], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "numpy.log10", "numpy.log10", "test_regression.TestRegressor.assertTrue", "test_regression.TestRegressor.assertTrue", "test_regression.TestRegressor.model.predict_instability_time", "test_regression.TestRegressor.model.predict_instability_time", "test_regression.TestRegressor.relative", "test_regression.TestRegressor.relative"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressor.relative", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressor.relative"], ["", "def", "test_seed", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "3.", ")", "\n", "p1", "=", "np", ".", "log10", "(", "self", ".", "model", ".", "predict_instability_time", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "[", "0", "]", ")", "\n", "p2", "=", "np", ".", "log10", "(", "self", ".", "model", ".", "predict_instability_time", "(", "sim", ",", "seed", "=", "1", ",", "**", "SAMPLE_SETTINGS", ")", "[", "0", "]", ")", "\n", "self", ".", "assertTrue", "(", "self", ".", "relative", "(", "p1", ",", "p2", ")", "<", "0.1", ")", "\n", "self", ".", "assertTrue", "(", "self", ".", "relative", "(", "p1", ",", "p2", ")", ">", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressor.test_prediction": [[90, 106], ["numpy.log10", "test_regression.TestRegressor.assertTrue", "test_regression.TestRegressor.assertTrue", "rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "sims.append", "numpy.all", "test_regression.TestRegressor.model.predict_instability_time"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time"], ["", "def", "test_prediction", "(", "self", ")", ":", "\n", "        ", "times", "=", "[", "]", "\n", "sims", "=", "[", "]", "\n", "for", "mass", "in", "[", "1e-4", ",", "5e-5", ",", "3e-5", ",", "1e-5", "]", ":", "\n", "            ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "mass", ",", "P", "=", "1", ")", "\n", "sim", ".", "add", "(", "m", "=", "mass", ",", "P", "=", "1.3", ")", "\n", "sim", ".", "add", "(", "m", "=", "mass", ",", "P", "=", "1.6", ")", "\n", "sims", ".", "append", "(", "sim", ")", "\n", "\n", "", "times", "=", "np", ".", "log10", "(", "self", ".", "model", ".", "predict_instability_time", "(", "sims", ",", "**", "SAMPLE_SETTINGS", ")", "[", "0", "]", ")", "\n", "# First one is unstable:", "\n", "self", ".", "assertTrue", "(", "times", "[", "0", "]", "<", "4.0", ")", "\n", "# Should get more stable:", "\n", "self", ".", "assertTrue", "(", "np", ".", "all", "(", "times", "[", "1", ":", "]", ">", "times", "[", ":", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressor.test_rescale_distances": [[107, 114], ["test_regression.longstablesim", "test_regression.TestRegressor.model.predict_instability_time", "test_regression.rescale", "test_regression.TestRegressor.model.predict_instability_time", "test_regression.TestRegressor.assertAlmostEqual", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.rescale", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time"], ["", "def", "test_rescale_distances", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "t", ",", "upper", ",", "lower", "=", "self", ".", "model", ".", "predict_instability_time", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "\n", "simr", "=", "rescale", "(", "sim", ",", "dscale", "=", "1e10", ",", "tscale", "=", "1", ",", "mscale", "=", "1", ")", "\n", "tr", ",", "upperr", ",", "lowerr", "=", "self", ".", "model", ".", "predict_instability_time", "(", "simr", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "self", ".", "assertAlmostEqual", "(", "t", "/", "sim", ".", "particles", "[", "1", "]", ".", "P", ",", "tr", "/", "simr", ".", "particles", "[", "1", "]", ".", "P", ",", "delta", "=", "np", ".", "abs", "(", "(", "upper", "-", "lower", ")", "/", "10", "/", "sim", ".", "particles", "[", "1", "]", ".", "P", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressor.test_rescale_times": [[115, 122], ["test_regression.longstablesim", "test_regression.TestRegressor.model.predict_instability_time", "test_regression.rescale", "test_regression.TestRegressor.model.predict_instability_time", "test_regression.TestRegressor.assertAlmostEqual", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.rescale", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time"], ["", "def", "test_rescale_times", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "t", ",", "upper", ",", "lower", "=", "self", ".", "model", ".", "predict_instability_time", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "\n", "simr", "=", "rescale", "(", "sim", ",", "dscale", "=", "1", ",", "tscale", "=", "1e10", ",", "mscale", "=", "1", ")", "\n", "tr", ",", "upperr", ",", "lowerr", "=", "self", ".", "model", ".", "predict_instability_time", "(", "simr", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "self", ".", "assertAlmostEqual", "(", "t", "/", "sim", ".", "particles", "[", "1", "]", ".", "P", ",", "tr", "/", "simr", ".", "particles", "[", "1", "]", ".", "P", ",", "delta", "=", "np", ".", "abs", "(", "(", "upper", "-", "lower", ")", "/", "10", "/", "sim", ".", "particles", "[", "1", "]", ".", "P", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressor.test_rescale_masses": [[123, 130], ["test_regression.longstablesim", "test_regression.TestRegressor.model.predict_instability_time", "test_regression.rescale", "test_regression.TestRegressor.model.predict_instability_time", "test_regression.TestRegressor.assertAlmostEqual", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.rescale", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time"], ["", "def", "test_rescale_masses", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "t", ",", "upper", ",", "lower", "=", "self", ".", "model", ".", "predict_instability_time", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "\n", "simr", "=", "rescale", "(", "sim", ",", "dscale", "=", "1", ",", "tscale", "=", "1", ",", "mscale", "=", "1e10", ")", "\n", "tr", ",", "upperr", ",", "lowerr", "=", "self", ".", "model", ".", "predict_instability_time", "(", "simr", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "self", ".", "assertAlmostEqual", "(", "t", "/", "sim", ".", "particles", "[", "1", "]", ".", "P", ",", "tr", "/", "simr", ".", "particles", "[", "1", "]", ".", "P", ",", "delta", "=", "np", ".", "abs", "(", "(", "upper", "-", "lower", ")", "/", "10", "/", "sim", ".", "particles", "[", "1", "]", ".", "P", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressor.test_time_scaling": [[131, 147], ["test_regression.TestRegressor.assertGreater", "rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "sims.append", "test_regression.TestRegressor.model.predict_instability_time"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time"], ["", "def", "test_time_scaling", "(", "self", ")", ":", "\n", "        ", "times", "=", "[", "]", "\n", "sims", "=", "[", "]", "\n", "mass", "=", "3e-5", "\n", "for", "P", "in", "[", "1", ",", "10", "]", ":", "\n", "            ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "mass", ",", "P", "=", "1", "*", "P", ")", "\n", "sim", ".", "add", "(", "m", "=", "mass", ",", "P", "=", "1.3", "*", "P", ")", "\n", "sim", ".", "add", "(", "m", "=", "mass", ",", "P", "=", "1.6", "*", "P", ")", "\n", "sims", ".", "append", "(", "sim", ")", "\n", "\n", "# Second time should have ~10x larger inst time.", "\n", "", "times", "=", "self", ".", "model", ".", "predict_instability_time", "(", "sims", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "[", "0", "]", "\n", "# Should be much larger time:", "\n", "self", ".", "assertGreater", "(", "times", "[", "1", "]", ",", "5", "*", "times", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressor.test_time_scaling_from_integration": [[148, 164], ["test_regression.TestRegressor.assertGreater", "rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "sims.append", "test_regression.TestRegressor.model.predict_instability_time"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time"], ["", "def", "test_time_scaling_from_integration", "(", "self", ")", ":", "\n", "        ", "times", "=", "[", "]", "\n", "sims", "=", "[", "]", "\n", "mass", "=", "1e-3", "\n", "for", "P", "in", "[", "1", ",", "10", "]", ":", "\n", "            ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "mass", ",", "P", "=", "1", "*", "P", ")", "\n", "sim", ".", "add", "(", "m", "=", "mass", ",", "P", "=", "1.3", "*", "P", ")", "\n", "sim", ".", "add", "(", "m", "=", "mass", ",", "P", "=", "1.6", "*", "P", ")", "\n", "sims", ".", "append", "(", "sim", ")", "\n", "\n", "# Second time should have ~10x larger inst time.", "\n", "", "times", "=", "self", ".", "model", ".", "predict_instability_time", "(", "sims", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "[", "0", "]", "\n", "# Should be much larger time:", "\n", "self", ".", "assertGreater", "(", "times", "[", "1", "]", ",", "5", "*", "times", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressor.test_custom_prior": [[165, 178], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "numpy.log10", "test_regression.TestRegressor.assertAlmostEqual", "numpy.exp", "test_regression.TestRegressor.model.predict_instability_time"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time"], ["", "def", "test_custom_prior", "(", "self", ")", ":", "\n", "        ", "mass", "=", "1e-7", "\n", "\n", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "mass", ",", "P", "=", "1", ")", "\n", "sim", ".", "add", "(", "m", "=", "mass", ",", "P", "=", "1.3", ")", "\n", "sim", ".", "add", "(", "m", "=", "mass", ",", "P", "=", "1.6", ")", "\n", "expected_center", "=", "13.0", "\n", "prior", "=", "lambda", "logT", ":", "np", ".", "exp", "(", "-", "(", "logT", "-", "expected_center", ")", "**", "2", "/", "2", "/", "0.1", "**", "2", ")", "\n", "\n", "times", "=", "np", ".", "log10", "(", "self", ".", "model", ".", "predict_instability_time", "(", "sim", ",", "prior_above_9", "=", "prior", ",", "**", "SAMPLE_SETTINGS", ")", "[", "0", "]", ")", "\n", "self", ".", "assertAlmostEqual", "(", "times", ",", "expected_center", ",", "delta", "=", "1e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressor.test_list_time": [[179, 185], ["test_regression.TestRegressor.model.predict_instability_time", "test_regression.TestRegressor.assertTrue", "test_regression.TestRegressor.assertLess", "test_regression.TestRegressor.assertLess", "test_regression.TestRegressor.assertGreater", "numpy.isnan", "test_regression.hyperbolicsim", "test_regression.escapesim", "test_regression.unstablesim", "test_regression.longstablesim"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.hyperbolicsim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.escapesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.unstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim"], ["", "def", "test_list_time", "(", "self", ")", ":", "\n", "        ", "tinst", ",", "lower", ",", "upper", "=", "self", ".", "model", ".", "predict_instability_time", "(", "[", "hyperbolicsim", "(", ")", ",", "escapesim", "(", ")", ",", "unstablesim", "(", ")", ",", "longstablesim", "(", ")", "]", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "isnan", "(", "tinst", "[", "0", "]", ")", ")", "\n", "self", ".", "assertLess", "(", "tinst", "[", "1", "]", ",", "1e4", ")", "\n", "self", ".", "assertLess", "(", "tinst", "[", "2", "]", ",", "1e4", ")", "\n", "self", ".", "assertGreater", "(", "tinst", "[", "3", "]", ",", "1e4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.setUp": [[187, 189], ["spock.DeepRegressor"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "DeepRegressor", "(", "cuda", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_list_stable": [[190, 195], ["test_regression.TestRegressorClassification.model.predict_stable", "test_regression.TestRegressorClassification.assertSequenceEqual", "test_regression.TestRegressorClassification.tolist", "test_regression.hyperbolicsim", "test_regression.escapesim", "test_regression.unstablesim", "test_regression.longstablesim"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.hyperbolicsim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.escapesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.unstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim"], ["", "def", "test_list_stable", "(", "self", ")", ":", "# pass list of sims with same size list of tmax", "\n", "        ", "tmax", "=", "[", "1e4", ",", "1e4", ",", "1", ",", "1e4", "]", "# test that unstablesim in middle still classified as stable with tmax=1", "\n", "stable_target", "=", "[", "0", ",", "0", ",", "1", ",", "1", "]", "\n", "stable", "=", "self", ".", "model", ".", "predict_stable", "(", "[", "hyperbolicsim", "(", ")", ",", "escapesim", "(", ")", ",", "unstablesim", "(", ")", ",", "longstablesim", "(", ")", "]", ",", "tmax", "=", "tmax", ")", "\n", "self", ".", "assertSequenceEqual", "(", "stable", ".", "tolist", "(", ")", ",", "stable_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_list_no_tmax": [[196, 200], ["test_regression.TestRegressorClassification.model.predict_stable", "test_regression.TestRegressorClassification.assertGreater", "test_regression.TestRegressorClassification.assertGreater", "test_regression.vstablesim", "test_regression.vstablesim"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.vstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.vstablesim"], ["", "def", "test_list_no_tmax", "(", "self", ")", ":", "# pass list of sims, tmax = None", "\n", "        ", "stable", "=", "self", ".", "model", ".", "predict_stable", "(", "[", "vstablesim", "(", ")", ",", "vstablesim", "(", ")", "]", ")", "\n", "self", ".", "assertGreater", "(", "stable", "[", "0", "]", ",", "0.9", ")", "\n", "self", ".", "assertGreater", "(", "stable", "[", "1", "]", ",", "0.9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_single_no_tmax": [[201, 204], ["test_regression.TestRegressorClassification.model.predict_stable", "test_regression.TestRegressorClassification.assertGreater", "test_regression.vstablesim"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.vstablesim"], ["", "def", "test_single_no_tmax", "(", "self", ")", ":", "# pass list of sims, tmax = None", "\n", "        ", "stable", "=", "self", ".", "model", ".", "predict_stable", "(", "vstablesim", "(", ")", ")", "\n", "self", ".", "assertGreater", "(", "stable", ",", "0.9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_mismatched_lists": [[205, 209], ["test_regression.TestRegressorClassification.assertRaises", "test_regression.TestRegressorClassification.model.predict_stable", "test_regression.hyperbolicsim", "test_regression.escapesim", "test_regression.unstablesim", "test_regression.longstablesim"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.hyperbolicsim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.escapesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.unstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim"], ["", "def", "test_mismatched_lists", "(", "self", ")", ":", "\n", "        ", "tmax", "=", "[", "1e4", ",", "1e4", ",", "1", "]", "# test that unstablesim in middle still classified as stable with tmax=1", "\n", "with", "self", ".", "assertRaises", "(", "AssertionError", ")", ":", "\n", "            ", "stable", "=", "self", ".", "model", ".", "predict_stable", "(", "[", "hyperbolicsim", "(", ")", ",", "escapesim", "(", ")", ",", "unstablesim", "(", ")", ",", "longstablesim", "(", ")", "]", ",", "tmax", "=", "tmax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_sim_unchanged": [[210, 220], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.integrate", "test_regression.TestRegressorClassification.model.predict_stable", "test_regression.TestRegressorClassification.assertEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "", "def", "test_sim_unchanged", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "3.", ")", "\n", "sim", ".", "integrate", "(", "1.2", ")", "\n", "x0", "=", "sim", ".", "particles", "[", "1", "]", ".", "x", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "self", ".", "assertEqual", "(", "sim", ".", "particles", "[", "1", "]", ".", "x", ",", "x0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_repeat": [[221, 230], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "test_regression.TestRegressorClassification.model.predict_stable", "test_regression.TestRegressorClassification.model.predict_stable", "test_regression.TestRegressorClassification.assertEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_repeat", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "3.", ")", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "p2", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "self", ".", "assertEqual", "(", "p1", ",", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_galilean_transformation": [[232, 242], ["test_regression.longstablesim", "longstablesim.move_to_com", "test_regression.TestRegressorClassification.model.predict_stable", "test_regression.longstablesim", "test_regression.TestRegressorClassification.model.predict_stable", "test_regression.TestRegressorClassification.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_galilean_transformation", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "sim", ".", "move_to_com", "(", ")", "\n", "p_com", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "\n", "sim", "=", "longstablesim", "(", ")", "\n", "for", "p", "in", "sim", ".", "particles", ":", "\n", "            ", "p", ".", "vx", "+=", "1000", "\n", "", "p_moving", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "self", ".", "assertAlmostEqual", "(", "p_com", ",", "p_moving", ",", "delta", "=", "1e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_rescale_distances": [[243, 251], ["test_regression.longstablesim", "test_regression.TestRegressorClassification.model.predict_stable", "test_regression.longstablesim", "test_regression.rescale", "test_regression.TestRegressorClassification.model.predict_stable", "test_regression.TestRegressorClassification.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.rescale", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_rescale_distances", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "p0", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "\n", "sim", "=", "longstablesim", "(", ")", "\n", "sim", "=", "rescale", "(", "sim", ",", "dscale", "=", "1e10", ",", "tscale", "=", "1", ",", "mscale", "=", "1", ")", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "self", ".", "assertAlmostEqual", "(", "p0", ",", "p1", ",", "delta", "=", "1e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_rescale_times": [[252, 260], ["test_regression.longstablesim", "test_regression.TestRegressorClassification.model.predict_stable", "test_regression.longstablesim", "test_regression.rescale", "test_regression.TestRegressorClassification.model.predict_stable", "test_regression.TestRegressorClassification.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.rescale", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_rescale_times", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "p0", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "\n", "sim", "=", "longstablesim", "(", ")", "\n", "sim", "=", "rescale", "(", "sim", ",", "dscale", "=", "1", ",", "tscale", "=", "1e10", ",", "mscale", "=", "1", ")", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "self", ".", "assertAlmostEqual", "(", "p0", ",", "p1", ",", "delta", "=", "1e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_rescale_masses": [[261, 269], ["test_regression.longstablesim", "test_regression.TestRegressorClassification.model.predict_stable", "test_regression.longstablesim", "test_regression.rescale", "test_regression.TestRegressorClassification.model.predict_stable", "test_regression.TestRegressorClassification.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.rescale", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_rescale_masses", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "p0", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "\n", "sim", "=", "longstablesim", "(", ")", "\n", "sim", "=", "rescale", "(", "sim", ",", "dscale", "=", "1", ",", "tscale", "=", "1", ",", "mscale", "=", "1e10", ")", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", "\n", "self", ".", "assertAlmostEqual", "(", "p0", ",", "p1", ",", "delta", "=", "1e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_hyperbolic": [[270, 277], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "test_regression.TestRegressorClassification.assertEqual", "test_regression.TestRegressorClassification.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_hyperbolic", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "-", "1.", ",", "e", "=", "1.2", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "3.", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_escape": [[278, 285], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "test_regression.TestRegressorClassification.assertEqual", "test_regression.TestRegressorClassification.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_escape", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-12", ",", "P", "=", "3.14", ",", "e", "=", "0.03", ",", "l", "=", "0.5", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-12", ",", "P", "=", "4.396", ",", "e", "=", "0.03", ",", "l", "=", "4.8", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-12", ",", "a", "=", "100", ",", "e", "=", "0.999", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_unstable_in_short_integration": [[286, 289], ["test_regression.unstablesim", "test_regression.TestRegressorClassification.assertEqual", "test_regression.TestRegressorClassification.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.unstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_unstable_in_short_integration", "(", "self", ")", ":", "\n", "        ", "sim", "=", "unstablesim", "(", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_solarsystem": [[290, 300], ["test_regression.solarsystemsim", "test_regression.TestRegressorClassification.model.predict_instability_time", "test_regression.TestRegressorClassification.assertTrue", "numpy.log10", "numpy.log10", "numpy.average"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.solarsystemsim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time"], ["", "def", "test_solarsystem", "(", "self", ")", ":", "\n", "        ", "sim", "=", "solarsystemsim", "(", ")", "\n", "median", ",", "lower", ",", "upper", ",", "t_inst_samples", "=", "self", ".", "model", ".", "predict_instability_time", "(", "\n", "sim", ",", "seed", "=", "0", ",", "\n", "return_samples", "=", "True", ",", "\n", "**", "SAMPLE_SETTINGS", ")", "\n", "log_iqr", "=", "np", ".", "log10", "(", "upper", ")", "-", "np", ".", "log10", "(", "lower", ")", "\n", "correct_estimate", "=", "(", "np", ".", "average", "(", "t_inst_samples", ">", "1e9", ")", ">", "0.7", ")", "\n", "very_uncertain", "=", "(", "log_iqr", ">", "3", ")", "\n", "self", ".", "assertTrue", "(", "correct_estimate", "or", "very_uncertain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.TestRegressorClassification.test_stable": [[301, 304], ["test_regression.longstablesim", "test_regression.TestRegressorClassification.assertGreater", "test_regression.TestRegressorClassification.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_stable", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "self", ".", "assertGreater", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "seed", "=", "0", ",", "**", "SAMPLE_SETTINGS", ")", ",", "0.7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.unstablesim": [[8, 15], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add"], "function", ["None"], ["def", "unstablesim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1.3", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1.6", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.longstablesim": [[16, 23], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add"], "function", ["None"], ["", "def", "longstablesim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-7", ",", "P", "=", "1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-7", ",", "P", "=", "2.1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-7", ",", "P", "=", "4.5", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.solarsystemsim": [[24, 36], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add"], "function", ["None"], ["", "def", "solarsystemsim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.7e-7", ",", "a", "=", "0.39", ",", "e", "=", "0.21", ")", "\n", "sim", ".", "add", "(", "m", "=", "2.4e-6", ",", "a", "=", "0.72", ",", "e", "=", "0.007", ")", "\n", "sim", ".", "add", "(", "m", "=", "3.e-6", ",", "a", "=", "1", ",", "e", "=", "0.017", ")", "\n", "sim", ".", "add", "(", "m", "=", "3.2e-7", ",", "a", "=", "1.52", ",", "e", "=", "0.09", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-3", ",", "a", "=", "5.2", ",", "e", "=", "0.049", ")", "\n", "sim", ".", "add", "(", "m", "=", "2.9e-4", ",", "a", "=", "9.54", ",", "e", "=", "0.055", ")", "\n", "sim", ".", "add", "(", "m", "=", "4.4e-5", ",", "a", "=", "19.2", ",", "e", "=", "0.047", ")", "\n", "sim", ".", "add", "(", "m", "=", "5.2e-5", ",", "a", "=", "30.1", ",", "e", "=", "0.009", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.hyperbolicsim": [[37, 44], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add"], "function", ["None"], ["", "def", "hyperbolicsim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "-", "1.", ",", "e", "=", "1.2", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "3.", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.escapesim": [[45, 52], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add"], "function", ["None"], ["", "def", "escapesim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-12", ",", "P", "=", "3.14", ",", "e", "=", "0.03", ",", "l", "=", "0.5", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-12", ",", "P", "=", "4.396", ",", "e", "=", "0.03", ",", "l", "=", "4.8", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-12", ",", "a", "=", "100", ",", "e", "=", "0.999", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.vstablesim": [[53, 60], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add"], "function", ["None"], ["", "def", "vstablesim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1e-7", ",", "P", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1e-7", ",", "P", "=", "1.8", ")", "\n", "sim", ".", "add", "(", "m", "=", "1e-7", ",", "P", "=", "3.2", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_regression.rescale": [[61, 70], ["rebound.Simulation", "rebound.Simulation.add"], "function", ["None"], ["", "def", "rescale", "(", "sim", ",", "dscale", ",", "tscale", ",", "mscale", ")", ":", "\n", "    ", "simr", "=", "rebound", ".", "Simulation", "(", ")", "\n", "vscale", "=", "dscale", "/", "tscale", "\n", "simr", ".", "G", "*=", "mscale", "*", "tscale", "**", "2", "/", "dscale", "**", "3", "\n", "\n", "for", "p", "in", "sim", ".", "particles", ":", "\n", "        ", "simr", ".", "add", "(", "m", "=", "p", ".", "m", "/", "mscale", ",", "x", "=", "p", ".", "x", "/", "dscale", ",", "y", "=", "p", ".", "y", "/", "dscale", ",", "z", "=", "p", ".", "z", "/", "dscale", ",", "vx", "=", "p", ".", "vx", "/", "vscale", ",", "vy", "=", "p", ".", "vy", "/", "vscale", ",", "vz", "=", "p", ".", "vz", "/", "vscale", ",", "r", "=", "p", ".", "r", "/", "dscale", ")", "\n", "\n", "", "return", "simr", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_simsetup.TestSimSetup.setUp": [[22, 24], ["spock.FeatureClassifier"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "FeatureClassifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_simsetup.TestSimSetup.test_negmass": [[25, 33], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "test_simsetup.TestSimSetup.assertRaises", "spock.simsetup.init_sim_parameters"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.init_sim_parameters"], ["", "def", "test_negmass", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "-", "1.e-5", ",", "P", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "3.", ")", "\n", "with", "self", ".", "assertRaises", "(", "AttributeError", ")", ":", "\n", "            ", "init_sim_parameters", "(", "sim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_simsetup.TestSimSetup.test_descending_periods": [[34, 42], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "spock.simsetup.init_sim_parameters", "test_simsetup.TestSimSetup.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.init_sim_parameters"], ["", "", "def", "test_descending_periods", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "3.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "1.", ")", "\n", "init_sim_parameters", "(", "sim", ")", "\n", "self", ".", "assertAlmostEqual", "(", "sim", ".", "dt", ",", "0.05", ",", "delta", "=", "1e-15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_simsetup.TestSimSetup.test_extreme_ecc": [[43, 51], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "spock.simsetup.init_sim_parameters", "test_simsetup.TestSimSetup.assertEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.init_sim_parameters"], ["", "def", "test_extreme_ecc", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "1.", ",", "e", "=", "0.999", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "3.", ")", "\n", "init_sim_parameters", "(", "sim", ")", "\n", "self", ".", "assertEqual", "(", "sim", ".", "integrator", ",", "'ias15'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_simsetup.TestSimSetup.test_high_ecc": [[52, 60], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "spock.simsetup.init_sim_parameters", "test_simsetup.TestSimSetup.assertEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.init_sim_parameters"], ["", "def", "test_high_ecc", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "1.", ",", "e", "=", "0.9", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "3.", ")", "\n", "init_sim_parameters", "(", "sim", ")", "\n", "self", ".", "assertEqual", "(", "sim", ".", "integrator", ",", "'whfast'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_simsetup.TestSimSetup.test_second_p_ecc": [[61, 69], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "spock.simsetup.init_sim_parameters", "test_simsetup.TestSimSetup.assertAlmostEqual", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.init_sim_parameters"], ["", "def", "test_second_p_ecc", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "10.", ",", "e", "=", "0.99", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "3.", ")", "\n", "init_sim_parameters", "(", "sim", ")", "\n", "self", ".", "assertAlmostEqual", "(", "sim", ".", "dt", ",", "0.05", "*", "10", "*", "0.01", "**", "1.5", "/", "np", ".", "sqrt", "(", "1.99", ")", ",", "delta", "=", "1.e-8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_simsetup.TestSimSetup.test_set_collision": [[70, 74], ["test_simsetup.unstablesim", "test_simsetup.TestSimSetup.assertRaises", "unstablesim.integrate"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.unstablesim"], ["", "def", "test_set_collision", "(", "self", ")", ":", "\n", "        ", "sim", "=", "unstablesim", "(", ")", "\n", "with", "self", ".", "assertRaises", "(", "rebound", ".", "Collision", ")", ":", "\n", "            ", "sim", ".", "integrate", "(", "1e4", "*", "sim", ".", "particles", "[", "1", "]", ".", "P", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_simsetup.unstablesim": [[7, 20], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.move_to_com"], "function", ["None"], ["def", "unstablesim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1.3", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1.6", ")", "\n", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "]", ":", "\n", "        ", "p", ".", "r", "=", "p", ".", "a", "*", "(", "p", ".", "m", "/", "3", ")", "**", "(", "1", "/", "3", ")", "\n", "", "sim", ".", "move_to_com", "(", ")", "\n", "sim", ".", "collision", "=", "'line'", "\n", "sim", ".", "integrator", "=", "\"whfast\"", "\n", "sim", ".", "dt", "=", "0.05", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.TestNbody.setUp": [[90, 92], ["spock.NbodyRegressor"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "NbodyRegressor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.TestNbody.test_list_stable": [[93, 98], ["test_nbody.TestNbody.model.predict_stable", "test_nbody.TestNbody.assertSequenceEqual", "test_nbody.TestNbody.tolist", "test_nbody.hyperbolicsim", "test_nbody.escapesim", "test_nbody.unstablesim", "test_nbody.longstablesim", "test_nbody.solarsystemsim"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.hyperbolicsim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.escapesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.unstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.solarsystemsim"], ["", "def", "test_list_stable", "(", "self", ")", ":", "\n", "        ", "tmax", "=", "[", "1e4", ",", "1e4", ",", "1", ",", "1e4", ",", "1e4", "]", "# test that unstablesim in middle still classified as stable with tmax=1", "\n", "stable_target", "=", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", "]", "\n", "stable", "=", "self", ".", "model", ".", "predict_stable", "(", "[", "hyperbolicsim", "(", ")", ",", "escapesim", "(", ")", ",", "unstablesim", "(", ")", ",", "longstablesim", "(", ")", ",", "solarsystemsim", "(", ")", "]", ",", "tmax", "=", "tmax", ")", "\n", "self", ".", "assertSequenceEqual", "(", "stable", ".", "tolist", "(", ")", ",", "stable_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.TestNbody.test_mismatched_lists": [[99, 103], ["test_nbody.TestNbody.assertRaises", "test_nbody.TestNbody.model.predict_stable", "test_nbody.hyperbolicsim", "test_nbody.escapesim", "test_nbody.unstablesim", "test_nbody.longstablesim"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.hyperbolicsim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.escapesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.unstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim"], ["", "def", "test_mismatched_lists", "(", "self", ")", ":", "\n", "        ", "tmax", "=", "[", "1e4", ",", "1e4", ",", "1", "]", "# test that unstablesim in middle still classified as stable with tmax=1", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "stable", "=", "self", ".", "model", ".", "predict_stable", "(", "[", "hyperbolicsim", "(", ")", ",", "escapesim", "(", ")", ",", "unstablesim", "(", ")", ",", "longstablesim", "(", ")", "]", ",", "tmax", "=", "tmax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.TestNbody.test_list_time": [[104, 111], ["test_nbody.TestNbody.model.predict_instability_time", "test_nbody.TestNbody.assertTrue", "test_nbody.TestNbody.assertLess", "range", "numpy.isnan", "test_nbody.TestNbody.assertEqual", "test_nbody.hyperbolicsim", "test_nbody.escapesim", "test_nbody.unstablesim", "test_nbody.longstablesim", "test_nbody.solarsystemsim"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.deepregressor.DeepRegressor.predict_instability_time", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.hyperbolicsim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.escapesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.unstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.solarsystemsim"], ["", "", "def", "test_list_time", "(", "self", ")", ":", "\n", "        ", "tmax", "=", "[", "1e4", ",", "1e4", ",", "1", ",", "1e4", ",", "1e4", "]", "# test that unstablesim in middle still classified as stable with tmax=1", "\n", "tinst", ",", "lower", ",", "upper", "=", "self", ".", "model", ".", "predict_instability_time", "(", "[", "hyperbolicsim", "(", ")", ",", "escapesim", "(", ")", ",", "unstablesim", "(", ")", ",", "longstablesim", "(", ")", ",", "solarsystemsim", "(", ")", "]", ",", "tmax", "=", "tmax", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "isnan", "(", "tinst", "[", "0", "]", ")", ")", "\n", "self", ".", "assertLess", "(", "tinst", "[", "1", "]", ",", "tmax", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "tinst", "[", "i", "]", ",", "tmax", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.TestNbody.test_repeat": [[112, 121], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "test_nbody.TestNbody.model.predict_stable", "test_nbody.TestNbody.model.predict_stable", "test_nbody.TestNbody.assertEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "", "def", "test_repeat", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "3.", ")", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "tmax", "=", "1e4", ")", "\n", "p2", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "tmax", "=", "1e4", ")", "\n", "self", ".", "assertEqual", "(", "p1", ",", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.TestNbody.test_hyperbolic": [[122, 125], ["test_nbody.hyperbolicsim", "test_nbody.TestNbody.assertEqual", "test_nbody.TestNbody.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.hyperbolicsim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_hyperbolic", "(", "self", ")", ":", "\n", "        ", "sim", "=", "hyperbolicsim", "(", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "tmax", "=", "1e4", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.TestNbody.test_escape": [[126, 129], ["test_nbody.escapesim", "test_nbody.TestNbody.assertEqual", "test_nbody.TestNbody.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.escapesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_escape", "(", "self", ")", ":", "\n", "        ", "sim", "=", "escapesim", "(", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "tmax", "=", "1e4", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.TestNbody.test_unstable_in_short_integration": [[130, 133], ["test_nbody.unstablesim", "test_nbody.TestNbody.assertEqual", "test_nbody.TestNbody.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.unstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_unstable_in_short_integration", "(", "self", ")", ":", "\n", "        ", "sim", "=", "unstablesim", "(", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "tmax", "=", "1e4", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.TestNbody.test_solarsystem": [[134, 137], ["test_nbody.solarsystemsim", "test_nbody.TestNbody.assertEqual", "test_nbody.TestNbody.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.solarsystemsim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_solarsystem", "(", "self", ")", ":", "\n", "        ", "sim", "=", "solarsystemsim", "(", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "tmax", "=", "1e4", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.TestNbody.test_stable": [[138, 141], ["test_nbody.longstablesim", "test_nbody.TestNbody.assertEqual", "test_nbody.TestNbody.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_stable", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ",", "tmax", "=", "1e4", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.TestNbody.test_same_traj_as_feature_classifier": [[142, 158], ["test_nbody.unstablesim", "spock.simsetup.init_sim_parameters", "spock.feature_functions.features", "test_nbody.unstablesim", "spock.simsetup.init_sim_parameters", "test_nbody.TestNbody.assertEqual", "unstablesim.integrate", "range"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.unstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.init_sim_parameters", "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.features", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.unstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.init_sim_parameters"], ["", "def", "test_same_traj_as_feature_classifier", "(", "self", ")", ":", "\n", "# procedure in featureclassifier", "\n", "        ", "sim", "=", "unstablesim", "(", ")", "\n", "init_sim_parameters", "(", "sim", ")", "\n", "trios", "=", "[", "[", "i", ",", "i", "+", "1", ",", "i", "+", "2", "]", "for", "i", "in", "range", "(", "1", ",", "sim", ".", "N_real", "-", "2", ")", "]", "\n", "featureargs", "=", "[", "10000", ",", "80", ",", "trios", "]", "\n", "triofeatures", ",", "stable", "=", "features", "(", "sim", ",", "featureargs", ")", "\n", "tfc", "=", "sim", ".", "t", "\n", "\n", "sim", "=", "unstablesim", "(", ")", "\n", "init_sim_parameters", "(", "sim", ")", "\n", "try", ":", "\n", "            ", "sim", ".", "integrate", "(", "1e4", "*", "sim", ".", "particles", "[", "1", "]", ".", "P", ",", "exact_finish_time", "=", "0", ")", "\n", "", "except", "rebound", ".", "Collision", ":", "\n", "            ", "tn", "=", "sim", ".", "t", "\n", "", "self", ".", "assertEqual", "(", "tfc", ",", "tn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.unstablesim": [[8, 21], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.move_to_com"], "function", ["None"], ["def", "unstablesim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1.3", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1.6", ")", "\n", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "]", ":", "\n", "        ", "p", ".", "r", "=", "p", ".", "a", "*", "(", "p", ".", "m", "/", "3", ")", "**", "(", "1", "/", "3", ")", "\n", "", "sim", ".", "move_to_com", "(", ")", "\n", "sim", ".", "collision", "=", "'line'", "\n", "sim", ".", "integrator", "=", "\"whfast\"", "\n", "sim", ".", "dt", "=", "0.05", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.longstablesim": [[22, 35], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.move_to_com"], "function", ["None"], ["", "def", "longstablesim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-7", ",", "P", "=", "1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-7", ",", "P", "=", "2.1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-7", ",", "P", "=", "4.5", ")", "\n", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "]", ":", "\n", "        ", "p", ".", "r", "=", "p", ".", "a", "*", "(", "p", ".", "m", "/", "3", ")", "**", "(", "1", "/", "3", ")", "\n", "", "sim", ".", "move_to_com", "(", ")", "\n", "sim", ".", "collision", "=", "'line'", "\n", "sim", ".", "integrator", "=", "\"whfast\"", "\n", "sim", ".", "dt", "=", "0.05", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.solarsystemsim": [[36, 54], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.move_to_com"], "function", ["None"], ["", "def", "solarsystemsim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.7e-7", ",", "a", "=", "0.39", ",", "e", "=", "0.21", ")", "\n", "sim", ".", "add", "(", "m", "=", "2.4e-6", ",", "a", "=", "0.72", ",", "e", "=", "0.007", ")", "\n", "sim", ".", "add", "(", "m", "=", "3.e-6", ",", "a", "=", "1", ",", "e", "=", "0.017", ")", "\n", "sim", ".", "add", "(", "m", "=", "3.2e-7", ",", "a", "=", "1.52", ",", "e", "=", "0.09", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-3", ",", "a", "=", "5.2", ",", "e", "=", "0.049", ")", "\n", "sim", ".", "add", "(", "m", "=", "2.9e-4", ",", "a", "=", "9.54", ",", "e", "=", "0.055", ")", "\n", "sim", ".", "add", "(", "m", "=", "4.4e-5", ",", "a", "=", "19.2", ",", "e", "=", "0.047", ")", "\n", "sim", ".", "add", "(", "m", "=", "5.2e-5", ",", "a", "=", "30.1", ",", "e", "=", "0.009", ")", "\n", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "]", ":", "\n", "        ", "p", ".", "r", "=", "p", ".", "a", "*", "(", "p", ".", "m", "/", "3", ")", "**", "(", "1", "/", "3", ")", "\n", "", "sim", ".", "move_to_com", "(", ")", "\n", "sim", ".", "collision", "=", "'line'", "\n", "sim", ".", "integrator", "=", "\"whfast\"", "\n", "sim", ".", "dt", "=", "0.05", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.hyperbolicsim": [[55, 62], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add"], "function", ["None"], ["", "def", "hyperbolicsim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "-", "1.", ",", "e", "=", "1.2", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "3.", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.escapesim": [[63, 70], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add"], "function", ["None"], ["", "def", "escapesim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-12", ",", "P", "=", "3.14", ",", "e", "=", "0.03", ",", "l", "=", "0.5", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-12", ",", "P", "=", "4.396", ",", "e", "=", "0.03", ",", "l", "=", "4.8", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-12", ",", "a", "=", "100", ",", "e", "=", "0.999", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.vstablesim": [[71, 78], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add"], "function", ["None"], ["", "def", "vstablesim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1e-7", ",", "P", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1e-7", ",", "P", "=", "1.8", ")", "\n", "sim", ".", "add", "(", "m", "=", "1e-7", ",", "P", "=", "3.2", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_nbody.rescale": [[79, 88], ["rebound.Simulation", "rebound.Simulation.add"], "function", ["None"], ["", "def", "rescale", "(", "sim", ",", "dscale", ",", "tscale", ",", "mscale", ")", ":", "\n", "    ", "simr", "=", "rebound", ".", "Simulation", "(", ")", "\n", "vscale", "=", "dscale", "/", "tscale", "\n", "simr", ".", "G", "*=", "mscale", "*", "tscale", "**", "2", "/", "dscale", "**", "3", "\n", "\n", "for", "p", "in", "sim", ".", "particles", ":", "\n", "        ", "simr", ".", "add", "(", "m", "=", "p", ".", "m", "/", "mscale", ",", "x", "=", "p", ".", "x", "/", "dscale", ",", "y", "=", "p", ".", "y", "/", "dscale", ",", "z", "=", "p", ".", "z", "/", "dscale", ",", "vx", "=", "p", ".", "vx", "/", "vscale", ",", "vy", "=", "p", ".", "vy", "/", "vscale", ",", "vz", "=", "p", ".", "vz", "/", "vscale", ",", "r", "=", "p", ".", "r", "/", "dscale", ")", "\n", "\n", "", "return", "simr", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.TestClassifier.setUp": [[81, 83], ["spock.FeatureClassifier"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "FeatureClassifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.TestClassifier.test_list": [[84, 91], ["test_classifier.TestClassifier.model.predict_stable", "test_classifier.TestClassifier.assertEqual", "test_classifier.TestClassifier.assertEqual", "test_classifier.TestClassifier.assertEqual", "test_classifier.TestClassifier.assertGreater", "test_classifier.hyperbolicsim", "test_classifier.escapesim", "test_classifier.unstablesim", "test_classifier.longstablesim"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.hyperbolicsim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.escapesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.unstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim"], ["", "def", "test_list", "(", "self", ")", ":", "\n", "        ", "stable_target", "=", "[", "0", ",", "0", ",", "0", ",", "0.7", "]", "\n", "stable", "=", "self", ".", "model", ".", "predict_stable", "(", "[", "hyperbolicsim", "(", ")", ",", "escapesim", "(", ")", ",", "unstablesim", "(", ")", ",", "longstablesim", "(", ")", "]", ")", "\n", "self", ".", "assertEqual", "(", "stable", "[", "0", "]", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "stable", "[", "1", "]", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "stable", "[", "2", "]", ",", "0", ")", "\n", "self", ".", "assertGreater", "(", "stable", "[", "3", "]", ",", "0.7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.TestClassifier.test_sim_unchanged": [[92, 102], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.integrate", "test_classifier.TestClassifier.model.predict_stable", "test_classifier.TestClassifier.assertEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_sim_unchanged", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "3.", ")", "\n", "sim", ".", "integrate", "(", "1.2", ")", "\n", "x0", "=", "sim", ".", "particles", "[", "1", "]", ".", "x", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "self", ".", "assertEqual", "(", "sim", ".", "particles", "[", "1", "]", ".", "x", ",", "x0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.TestClassifier.test_repeat": [[103, 112], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "test_classifier.TestClassifier.model.predict_stable", "test_classifier.TestClassifier.model.predict_stable", "test_classifier.TestClassifier.assertEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_repeat", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "3.", ")", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "p2", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "self", ".", "assertEqual", "(", "p1", ",", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.TestClassifier.test_same_trajectory": [[113, 126], ["test_classifier.longstablesim", "spock.simsetup.init_sim_parameters", "spock.feature_functions.get_tseries", "test_classifier.longstablesim", "spock.NbodyRegressor", "spock.NbodyRegressor.predict_stable", "rebound.SimulationArchive", "test_classifier.TestClassifier.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.init_sim_parameters", "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.get_tseries", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_same_trajectory", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "init_sim_parameters", "(", "sim", ")", "\n", "_", ",", "_", "=", "get_tseries", "(", "sim", ",", "(", "1e4", ",", "80", ",", "[", "[", "1", ",", "2", ",", "3", "]", "]", ")", ")", "\n", "x1", "=", "sim", ".", "particles", "[", "1", "]", ".", "x", "\n", "\n", "sim", "=", "longstablesim", "(", ")", "\n", "nbody", "=", "NbodyRegressor", "(", ")", "\n", "nbody", ".", "predict_stable", "(", "sim", ",", "tmax", "=", "1e4", ",", "archive_filename", "=", "'temp.bin'", ",", "archive_interval", "=", "1.e4", ")", "\n", "sa", "=", "rebound", ".", "SimulationArchive", "(", "'temp.bin'", ")", "\n", "sim", "=", "sa", "[", "-", "1", "]", "\n", "x2", "=", "sim", ".", "particles", "[", "1", "]", ".", "x", "\n", "self", ".", "assertAlmostEqual", "(", "x1", ",", "x2", ",", "delta", "=", "1.e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.TestClassifier.test_galilean_transformation": [[128, 138], ["test_classifier.longstablesim", "longstablesim.move_to_com", "test_classifier.TestClassifier.model.predict_stable", "test_classifier.longstablesim", "test_classifier.TestClassifier.model.predict_stable", "test_classifier.TestClassifier.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_galilean_transformation", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "sim", ".", "move_to_com", "(", ")", "\n", "p_com", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "\n", "sim", "=", "longstablesim", "(", ")", "\n", "for", "p", "in", "sim", ".", "particles", ":", "\n", "            ", "p", ".", "vx", "+=", "1000", "\n", "", "p_moving", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "self", ".", "assertAlmostEqual", "(", "p_com", ",", "p_moving", ",", "delta", "=", "1.e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.TestClassifier.test_rescale_distances": [[139, 147], ["test_classifier.longstablesim", "test_classifier.TestClassifier.model.predict_stable", "test_classifier.longstablesim", "test_classifier.rescale", "test_classifier.TestClassifier.model.predict_stable", "test_classifier.TestClassifier.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.rescale", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_rescale_distances", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "p0", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "\n", "sim", "=", "longstablesim", "(", ")", "\n", "sim", "=", "rescale", "(", "sim", ",", "dscale", "=", "1e10", ",", "tscale", "=", "1", ",", "mscale", "=", "1", ")", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "self", ".", "assertAlmostEqual", "(", "p0", ",", "p1", ",", "delta", "=", "1.e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.TestClassifier.test_rescale_times": [[148, 156], ["test_classifier.longstablesim", "test_classifier.TestClassifier.model.predict_stable", "test_classifier.longstablesim", "test_classifier.rescale", "test_classifier.TestClassifier.model.predict_stable", "test_classifier.TestClassifier.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.rescale", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_rescale_times", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "p0", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "\n", "sim", "=", "longstablesim", "(", ")", "\n", "sim", "=", "rescale", "(", "sim", ",", "dscale", "=", "1", ",", "tscale", "=", "1e10", ",", "mscale", "=", "1", ")", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "self", ".", "assertAlmostEqual", "(", "p0", ",", "p1", ",", "delta", "=", "1.e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.TestClassifier.test_rescale_masses": [[157, 165], ["test_classifier.longstablesim", "test_classifier.TestClassifier.model.predict_stable", "test_classifier.longstablesim", "test_classifier.rescale", "test_classifier.TestClassifier.model.predict_stable", "test_classifier.TestClassifier.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.rescale", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_rescale_masses", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "p0", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "\n", "sim", "=", "longstablesim", "(", ")", "\n", "sim", "=", "rescale", "(", "sim", ",", "dscale", "=", "1", ",", "tscale", "=", "1", ",", "mscale", "=", "1e10", ")", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "self", ".", "assertAlmostEqual", "(", "p0", ",", "p1", ",", "delta", "=", "1.e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.TestClassifier.test_hyperbolic": [[166, 169], ["test_classifier.hyperbolicsim", "test_classifier.TestClassifier.assertEqual", "test_classifier.TestClassifier.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.hyperbolicsim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_hyperbolic", "(", "self", ")", ":", "\n", "        ", "sim", "=", "hyperbolicsim", "(", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.TestClassifier.test_escape": [[170, 173], ["test_classifier.escapesim", "test_classifier.TestClassifier.assertEqual", "test_classifier.TestClassifier.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.escapesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_escape", "(", "self", ")", ":", "\n", "        ", "sim", "=", "escapesim", "(", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.TestClassifier.test_unstable_in_short_integration": [[174, 177], ["test_classifier.unstablesim", "test_classifier.TestClassifier.assertEqual", "test_classifier.TestClassifier.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.unstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_unstable_in_short_integration", "(", "self", ")", ":", "\n", "        ", "sim", "=", "unstablesim", "(", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.TestClassifier.test_solarsystem": [[178, 181], ["test_classifier.solarsystemsim", "test_classifier.TestClassifier.assertGreater", "test_classifier.TestClassifier.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.solarsystemsim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_solarsystem", "(", "self", ")", ":", "\n", "        ", "sim", "=", "solarsystemsim", "(", ")", "\n", "self", ".", "assertGreater", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", ",", "0.7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.TestClassifier.test_stable": [[182, 185], ["test_classifier.longstablesim", "test_classifier.TestClassifier.assertGreater", "test_classifier.TestClassifier.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_stable", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "self", ".", "assertGreater", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", ",", "0.7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.unstablesim": [[7, 20], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.move_to_com"], "function", ["None"], ["def", "unstablesim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1.3", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1.6", ")", "\n", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "]", ":", "\n", "        ", "p", ".", "r", "=", "p", ".", "a", "*", "(", "p", ".", "m", "/", "3", ")", "**", "(", "1", "/", "3", ")", "\n", "", "sim", ".", "move_to_com", "(", ")", "\n", "sim", ".", "collision", "=", "'line'", "\n", "sim", ".", "integrator", "=", "\"whfast\"", "\n", "sim", ".", "dt", "=", "0.05", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.longstablesim": [[21, 34], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.move_to_com"], "function", ["None"], ["", "def", "longstablesim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-7", ",", "P", "=", "1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-7", ",", "P", "=", "2.1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-7", ",", "P", "=", "4.5", ")", "\n", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "]", ":", "\n", "        ", "p", ".", "r", "=", "p", ".", "a", "*", "(", "p", ".", "m", "/", "3", ")", "**", "(", "1", "/", "3", ")", "\n", "", "sim", ".", "move_to_com", "(", ")", "\n", "sim", ".", "collision", "=", "'line'", "\n", "sim", ".", "integrator", "=", "\"whfast\"", "\n", "sim", ".", "dt", "=", "0.05", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.solarsystemsim": [[35, 53], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.move_to_com"], "function", ["None"], ["", "def", "solarsystemsim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.7e-7", ",", "a", "=", "0.39", ",", "e", "=", "0.21", ")", "\n", "sim", ".", "add", "(", "m", "=", "2.4e-6", ",", "a", "=", "0.72", ",", "e", "=", "0.007", ")", "\n", "sim", ".", "add", "(", "m", "=", "3.e-6", ",", "a", "=", "1", ",", "e", "=", "0.017", ")", "\n", "sim", ".", "add", "(", "m", "=", "3.2e-7", ",", "a", "=", "1.52", ",", "e", "=", "0.09", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-3", ",", "a", "=", "5.2", ",", "e", "=", "0.049", ")", "\n", "sim", ".", "add", "(", "m", "=", "2.9e-4", ",", "a", "=", "9.54", ",", "e", "=", "0.055", ")", "\n", "sim", ".", "add", "(", "m", "=", "4.4e-5", ",", "a", "=", "19.2", ",", "e", "=", "0.047", ")", "\n", "sim", ".", "add", "(", "m", "=", "5.2e-5", ",", "a", "=", "30.1", ",", "e", "=", "0.009", ")", "\n", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "]", ":", "\n", "        ", "p", ".", "r", "=", "p", ".", "a", "*", "(", "p", ".", "m", "/", "3", ")", "**", "(", "1", "/", "3", ")", "\n", "", "sim", ".", "move_to_com", "(", ")", "\n", "sim", ".", "collision", "=", "'line'", "\n", "sim", ".", "integrator", "=", "\"whfast\"", "\n", "sim", ".", "dt", "=", "0.05", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.hyperbolicsim": [[54, 61], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add"], "function", ["None"], ["", "def", "hyperbolicsim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "-", "1.", ",", "e", "=", "1.2", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "3.", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.escapesim": [[62, 69], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add"], "function", ["None"], ["", "def", "escapesim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-12", ",", "P", "=", "3.14", ",", "e", "=", "0.03", ",", "l", "=", "0.5", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-12", ",", "P", "=", "4.396", ",", "e", "=", "0.03", ",", "l", "=", "4.8", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-12", ",", "a", "=", "100", ",", "e", "=", "0.999", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_classifier.rescale": [[70, 79], ["rebound.Simulation", "rebound.Simulation.add"], "function", ["None"], ["", "def", "rescale", "(", "sim", ",", "dscale", ",", "tscale", ",", "mscale", ")", ":", "\n", "    ", "simr", "=", "rebound", ".", "Simulation", "(", ")", "\n", "vscale", "=", "dscale", "/", "tscale", "\n", "simr", ".", "G", "*=", "mscale", "*", "tscale", "**", "2", "/", "dscale", "**", "3", "\n", "\n", "for", "p", "in", "sim", ".", "particles", ":", "\n", "        ", "simr", ".", "add", "(", "m", "=", "p", ".", "m", "/", "mscale", ",", "x", "=", "p", ".", "x", "/", "dscale", ",", "y", "=", "p", ".", "y", "/", "dscale", ",", "z", "=", "p", ".", "z", "/", "dscale", ",", "vx", "=", "p", ".", "vx", "/", "vscale", ",", "vy", "=", "p", ".", "vy", "/", "vscale", ",", "vz", "=", "p", ".", "vz", "/", "vscale", ",", "r", "=", "p", ".", "r", "/", "dscale", ")", "\n", "\n", "", "return", "simr", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.TestClassifier.setUp": [[54, 56], ["spock.AnalyticalClassifier"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "AnalyticalClassifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.TestClassifier.test_list": [[57, 63], ["test_analytical.TestClassifier.model.predict_stable", "test_analytical.TestClassifier.assertEqual", "test_analytical.TestClassifier.assertEqual", "test_analytical.TestClassifier.assertGreater", "test_analytical.hyperbolicsim", "test_analytical.unstablesimecc", "test_analytical.longstablesim"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.hyperbolicsim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.unstablesimecc", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim"], ["", "def", "test_list", "(", "self", ")", ":", "\n", "        ", "stable_target", "=", "[", "0", ",", "0", ",", "0", ",", "0.7", "]", "\n", "stable", "=", "self", ".", "model", ".", "predict_stable", "(", "[", "hyperbolicsim", "(", ")", ",", "unstablesimecc", "(", ")", ",", "longstablesim", "(", ")", "]", ")", "\n", "self", ".", "assertEqual", "(", "stable", "[", "0", "]", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "stable", "[", "1", "]", ",", "0", ")", "\n", "self", ".", "assertGreater", "(", "stable", "[", "2", "]", ",", "0.7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.TestClassifier.test_sim_unchanged": [[64, 74], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.integrate", "test_analytical.TestClassifier.model.predict_stable", "test_analytical.TestClassifier.assertEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_sim_unchanged", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "3.", ")", "\n", "sim", ".", "integrate", "(", "1.2", ")", "\n", "x0", "=", "sim", ".", "particles", "[", "1", "]", ".", "x", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "self", ".", "assertEqual", "(", "sim", ".", "particles", "[", "1", "]", ".", "x", ",", "x0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.TestClassifier.test_repeat": [[75, 84], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "test_analytical.TestClassifier.model.predict_stable", "test_analytical.TestClassifier.model.predict_stable", "test_analytical.TestClassifier.assertEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_repeat", "(", "self", ")", ":", "\n", "        ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "P", "=", "3.", ")", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "p2", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "self", ".", "assertEqual", "(", "p1", ",", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.TestClassifier.test_same_trajectory": [[85, 98], ["test_analytical.longstablesim", "spock.simsetup.init_sim_parameters", "spock.feature_functions.get_tseries", "test_analytical.longstablesim", "spock.NbodyRegressor", "spock.NbodyRegressor.predict_stable", "rebound.SimulationArchive", "test_analytical.TestClassifier.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.simsetup.init_sim_parameters", "home.repos.pwc.inspect_result.dtamayo_spock.spock.feature_functions.get_tseries", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_same_trajectory", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "init_sim_parameters", "(", "sim", ")", "\n", "_", ",", "_", "=", "get_tseries", "(", "sim", ",", "(", "1e4", ",", "80", ",", "[", "[", "1", ",", "2", ",", "3", "]", "]", ")", ")", "\n", "x1", "=", "sim", ".", "particles", "[", "1", "]", ".", "x", "\n", "\n", "sim", "=", "longstablesim", "(", ")", "\n", "nbody", "=", "NbodyRegressor", "(", ")", "\n", "nbody", ".", "predict_stable", "(", "sim", ",", "tmax", "=", "1e4", ",", "archive_filename", "=", "'temp.bin'", ",", "archive_interval", "=", "1.e4", ")", "\n", "sa", "=", "rebound", ".", "SimulationArchive", "(", "'temp.bin'", ")", "\n", "sim", "=", "sa", "[", "-", "1", "]", "\n", "x2", "=", "sim", ".", "particles", "[", "1", "]", ".", "x", "\n", "self", ".", "assertAlmostEqual", "(", "x1", ",", "x2", ",", "delta", "=", "1.e-5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.TestClassifier.test_galilean_transformation": [[100, 110], ["test_analytical.longstablesim", "longstablesim.move_to_com", "test_analytical.TestClassifier.model.predict_stable", "test_analytical.longstablesim", "test_analytical.TestClassifier.model.predict_stable", "test_analytical.TestClassifier.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_galilean_transformation", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "sim", ".", "move_to_com", "(", ")", "\n", "p_com", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "\n", "sim", "=", "longstablesim", "(", ")", "\n", "for", "p", "in", "sim", ".", "particles", ":", "\n", "            ", "p", ".", "vx", "+=", "1000", "\n", "", "p_moving", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "self", ".", "assertAlmostEqual", "(", "p_com", ",", "p_moving", ",", "delta", "=", "1.e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.TestClassifier.test_rescale_distances": [[111, 119], ["test_analytical.longstablesim", "test_analytical.TestClassifier.model.predict_stable", "test_analytical.longstablesim", "test_analytical.rescale", "test_analytical.TestClassifier.model.predict_stable", "test_analytical.TestClassifier.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.rescale", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_rescale_distances", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "p0", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "\n", "sim", "=", "longstablesim", "(", ")", "\n", "sim", "=", "rescale", "(", "sim", ",", "dscale", "=", "1e10", ",", "tscale", "=", "1", ",", "mscale", "=", "1", ")", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "self", ".", "assertAlmostEqual", "(", "p0", ",", "p1", ",", "delta", "=", "1.e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.TestClassifier.test_rescale_times": [[120, 128], ["test_analytical.longstablesim", "test_analytical.TestClassifier.model.predict_stable", "test_analytical.longstablesim", "test_analytical.rescale", "test_analytical.TestClassifier.model.predict_stable", "test_analytical.TestClassifier.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.rescale", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_rescale_times", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "p0", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "\n", "sim", "=", "longstablesim", "(", ")", "\n", "sim", "=", "rescale", "(", "sim", ",", "dscale", "=", "1", ",", "tscale", "=", "1e10", ",", "mscale", "=", "1", ")", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "self", ".", "assertAlmostEqual", "(", "p0", ",", "p1", ",", "delta", "=", "1.e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.TestClassifier.test_rescale_masses": [[129, 137], ["test_analytical.longstablesim", "test_analytical.TestClassifier.model.predict_stable", "test_analytical.longstablesim", "test_analytical.rescale", "test_analytical.TestClassifier.model.predict_stable", "test_analytical.TestClassifier.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.rescale", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_rescale_masses", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "p0", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "\n", "sim", "=", "longstablesim", "(", ")", "\n", "sim", "=", "rescale", "(", "sim", ",", "dscale", "=", "1", ",", "tscale", "=", "1", ",", "mscale", "=", "1e10", ")", "\n", "p1", "=", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", "\n", "self", ".", "assertAlmostEqual", "(", "p0", ",", "p1", ",", "delta", "=", "1.e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.TestClassifier.test_hyperbolic": [[138, 141], ["test_analytical.hyperbolicsim", "test_analytical.TestClassifier.assertEqual", "test_analytical.TestClassifier.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.hyperbolicsim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_hyperbolic", "(", "self", ")", ":", "\n", "        ", "sim", "=", "hyperbolicsim", "(", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.TestClassifier.test_unstable_in_short_integration": [[142, 145], ["test_analytical.unstablesimecc", "test_analytical.TestClassifier.assertEqual", "test_analytical.TestClassifier.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.unstablesimecc", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_unstable_in_short_integration", "(", "self", ")", ":", "\n", "        ", "sim", "=", "unstablesimecc", "(", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.TestClassifier.test_stable": [[146, 149], ["test_analytical.longstablesim", "test_analytical.TestClassifier.assertGreater", "test_analytical.TestClassifier.model.predict_stable"], "methods", ["home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim", "home.repos.pwc.inspect_result.dtamayo_spock.spock.analyticalclassifier.AnalyticalClassifier.predict_stable"], ["", "def", "test_stable", "(", "self", ")", ":", "\n", "        ", "sim", "=", "longstablesim", "(", ")", "\n", "self", ".", "assertGreater", "(", "self", ".", "model", ".", "predict_stable", "(", "sim", ")", ",", "0.7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.unstablesimecc": [[7, 20], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.move_to_com"], "function", ["None"], ["def", "unstablesimecc", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1", ",", "e", "=", "0.1", ",", "pomega", "=", "3", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1.3", ",", "e", "=", "0.1", ",", "pomega", "=", "1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-4", ",", "P", "=", "1.6", ",", "e", "=", "0.1", ",", "pomega", "=", "5", ")", "\n", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "]", ":", "\n", "        ", "p", ".", "r", "=", "p", ".", "a", "*", "(", "p", ".", "m", "/", "3", ")", "**", "(", "1", "/", "3", ")", "\n", "", "sim", ".", "move_to_com", "(", ")", "\n", "sim", ".", "collision", "=", "'line'", "\n", "sim", ".", "integrator", "=", "\"whfast\"", "\n", "sim", ".", "dt", "=", "0.05", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.longstablesim": [[21, 34], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.move_to_com"], "function", ["None"], ["", "def", "longstablesim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-7", ",", "P", "=", "1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-7", ",", "P", "=", "2.1", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-7", ",", "P", "=", "4.5", ")", "\n", "for", "p", "in", "sim", ".", "particles", "[", "1", ":", "]", ":", "\n", "        ", "p", ".", "r", "=", "p", ".", "a", "*", "(", "p", ".", "m", "/", "3", ")", "**", "(", "1", "/", "3", ")", "\n", "", "sim", ".", "move_to_com", "(", ")", "\n", "sim", ".", "collision", "=", "'line'", "\n", "sim", ".", "integrator", "=", "\"whfast\"", "\n", "sim", ".", "dt", "=", "0.05", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.hyperbolicsim": [[35, 42], ["rebound.Simulation", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add", "rebound.Simulation.add"], "function", ["None"], ["", "def", "hyperbolicsim", "(", ")", ":", "\n", "    ", "sim", "=", "rebound", ".", "Simulation", "(", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "-", "1.", ",", "e", "=", "1.2", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "2.", ")", "\n", "sim", ".", "add", "(", "m", "=", "1.e-5", ",", "a", "=", "3.", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.dtamayo_spock.test.test_analytical.rescale": [[43, 52], ["rebound.Simulation", "rebound.Simulation.add"], "function", ["None"], ["", "def", "rescale", "(", "sim", ",", "dscale", ",", "tscale", ",", "mscale", ")", ":", "\n", "    ", "simr", "=", "rebound", ".", "Simulation", "(", ")", "\n", "vscale", "=", "dscale", "/", "tscale", "\n", "simr", ".", "G", "*=", "mscale", "*", "tscale", "**", "2", "/", "dscale", "**", "3", "\n", "\n", "for", "p", "in", "sim", ".", "particles", ":", "\n", "        ", "simr", ".", "add", "(", "m", "=", "p", ".", "m", "/", "mscale", ",", "x", "=", "p", ".", "x", "/", "dscale", ",", "y", "=", "p", ".", "y", "/", "dscale", ",", "z", "=", "p", ".", "z", "/", "dscale", ",", "vx", "=", "p", ".", "vx", "/", "vscale", ",", "vy", "=", "p", ".", "vy", "/", "vscale", ",", "vz", "=", "p", ".", "vz", "/", "vscale", ",", "r", "=", "p", ".", "r", "/", "dscale", ")", "\n", "\n", "", "return", "simr", "\n", "\n"]]}