{"home.repos.pwc.inspect_result.lirongwu_gcml.None.main.pretrain": [[22, 45], ["torch.utils.data.DataLoader", "range", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adam", "enumerate", "print", "model.parameters", "model.parameters", "x.to.to", "utils.add_noise", "model", "torch.mse_loss", "F.mse_loss.item", "torch.optim.Adam.zero_grad", "F.mse_loss.backward", "torch.optim.Adam.step"], "function", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.utils.add_noise"], ["def", "pretrain", "(", "model", ",", "num_epochs", ")", ":", "\n", "\n", "    ", "train_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "param", "[", "'batch_size'", "]", ",", "shuffle", "=", "True", ")", "\n", "if", "param", "[", "'dataset_type'", "]", "==", "\"Reuters-10k\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-1", ",", "momentum", "=", "0.99", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "param", "[", "'lr'", "]", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "total_loss", "=", "0", "\n", "\n", "for", "batch_idx", ",", "(", "x", ",", "_", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "x_noise", "=", "add_noise", "(", "x", ",", "param", "[", "'noise'", "]", ")", "\n", "x_rec", "=", "model", "(", "x_noise", ")", "\n", "loss", "=", "F", ".", "mse_loss", "(", "x_rec", ",", "x", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "print", "(", "'\\033[0;30;46mEpoch: [{}/{}], MSE_loss: {:.8f}\\033[0m'", ".", "format", "(", "epoch", "+", "1", ",", "num_epochs", ",", "total_loss", "/", "(", "batch_idx", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.main.train": [[49, 131], ["torch.Tensor().to", "torch.Tensor().to", "torch.utils.data.DataLoader", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "loss.GCML_Loss", "utils.Clustering", "torch.tensor().to", "torch.tensor().to", "model.train", "range", "model.parameters", "model.parameters", "model", "model.target_distribution().detach", "model.autoencoder.encode", "q.argmax().detach().cpu().numpy", "loss.GCML_Loss.update", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "enumerate", "torch.Tensor", "torch.Tensor", "torch.tensor", "torch.tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "utils.visualize", "x.to.to", "model", "model.autoencoder.encode", "torch.mse_loss", "torch.kl_div", "loss.GCML_Loss.calculate", "F.mse_loss.item", "F.kl_div.item", "loss_push.item", "loss_iso.item", "loss_align.item", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "loss_com.backward", "torch.optim.Adam.step", "[].argmax().detach().cpu().numpy", "utils.cluster_acc", "sklearn.metrics.cluster.normalized_mutual_info_score", "model.autoencoder.encode().detach().cpu().numpy", "KMeans().fit", "KMeans().fit.predict", "utils.cluster_acc", "print", "print", "model.target_distribution", "q.argmax().detach().cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "q.log", "torch.sum", "torch.sum", "max", "torch.norm", "torch.norm", "[].argmax().detach().cpu", "model.autoencoder.encode().detach().cpu", "KMeans", "q.argmax().detach", "min", "numpy.array", "[].argmax().detach", "model.autoencoder.encode().detach", "q.argmax", "[].argmax", "model.autoencoder.encode", "model"], "function", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.utils.Clustering", "home.repos.pwc.inspect_result.lirongwu_gcml.None.main.train", "home.repos.pwc.inspect_result.lirongwu_gcml.None.model.AutoEncoder.encode", "home.repos.pwc.inspect_result.lirongwu_gcml.None.loss.GCML_Loss.update", "home.repos.pwc.inspect_result.lirongwu_gcml.None.utils.visualize", "home.repos.pwc.inspect_result.lirongwu_gcml.None.model.AutoEncoder.encode", "home.repos.pwc.inspect_result.lirongwu_gcml.None.loss.GCML_Loss.calculate", "home.repos.pwc.inspect_result.lirongwu_gcml.None.utils.cluster_acc", "home.repos.pwc.inspect_result.lirongwu_gcml.None.utils.cluster_acc", "home.repos.pwc.inspect_result.lirongwu_gcml.None.model.GCML.target_distribution", "home.repos.pwc.inspect_result.lirongwu_gcml.None.model.AutoEncoder.encode"], ["", "", "def", "train", "(", "model", ",", "num_epochs", ",", "path", ")", ":", "\n", "\n", "    ", "data", "=", "torch", ".", "Tensor", "(", "dataset", ".", "x", ")", ".", "to", "(", "device", ")", "\n", "labels", "=", "dataset", ".", "y", "\n", "train_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "param", "[", "'batch_size'", "]", ",", "shuffle", "=", "True", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "param", "[", "'lr'", "]", ")", "\n", "optimizer_iso", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "param", "[", "'lr'", "]", ")", "\n", "Loss", "=", "GCML_Loss", "(", "param", ")", "\n", "\n", "# Initial clustering center", "\n", "_", ",", "cluster_centers", "=", "Clustering", "(", "data", ",", "model", ",", "param", "[", "'hidden'", "]", ",", "param", "[", "'clu_num'", "]", ",", "param", "[", "'n_clusters'", "]", ")", "\n", "model", ".", "cluster_centers", ".", "data", "=", "torch", ".", "tensor", "(", "cluster_centers", ")", ".", "to", "(", "device", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "total_loss", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "# Update target distribution (p-distribution)", "\n", "_", ",", "q", "=", "model", "(", "data", ")", "\n", "p", "=", "model", ".", "target_distribution", "(", "q", ")", ".", "detach", "(", ")", "\n", "hidden", "=", "model", ".", "autoencoder", ".", "encode", "(", "data", ")", "\n", "y_pred", "=", "q", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "Loss", ".", "update", "(", "data", ",", "hidden", ",", "y_pred", ")", "\n", "\n", "centers_data", "=", "torch", ".", "zeros", "(", "(", "param", "[", "'n_clusters'", "]", ",", "data", ".", "shape", "[", "1", "]", ")", ")", ".", "to", "(", "device", ")", "\n", "centers_out", "=", "torch", ".", "zeros", "(", "(", "param", "[", "'n_clusters'", "]", ",", "param", "[", "'hidden'", "]", ")", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "param", "[", "'n_clusters'", "]", ")", ":", "\n", "            ", "centers_data", "[", "i", ",", ":", "]", "=", "torch", ".", "mean", "(", "data", "[", "y_pred", "==", "i", "]", ",", "0", ")", "\n", "centers_out", "[", "i", ",", ":", "]", "=", "torch", ".", "mean", "(", "hidden", "[", "y_pred", "==", "i", "]", ",", "0", ")", "\n", "\n", "# Output visualization results once every 10 epochs", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "50", "==", "0", "or", "epoch", "==", "0", ":", "\n", "            ", "visualize", "(", "data", ",", "labels", ",", "y_pred", ",", "model", ",", "epoch", ",", "path", ",", "param", ")", "\n", "\n", "", "for", "batch_idx", ",", "(", "x", ",", "_", ",", "idx", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "x_rec", ",", "q", "=", "model", "(", "x", ")", "\n", "hidden", "=", "model", ".", "autoencoder", ".", "encode", "(", "x", ")", "\n", "\n", "loss_rec", "=", "F", ".", "mse_loss", "(", "x_rec", ",", "x", ")", "\n", "loss_cluster", "=", "F", ".", "kl_div", "(", "q", ".", "log", "(", ")", ",", "p", "[", "idx", "]", ")", "\n", "loss_push", ",", "loss_iso", "=", "Loss", ".", "calculate", "(", "centers_data", ",", "model", ".", "cluster_centers", ")", "\n", "loss_align", "=", "torch", ".", "sum", "(", "torch", ".", "norm", "(", "centers_out", "-", "model", ".", "cluster_centers", ",", "dim", "=", "1", ")", ")", "/", "param", "[", "'n_clusters'", "]", "\n", "\n", "total_loss", "[", "0", "]", "+=", "loss_rec", ".", "item", "(", ")", "\n", "total_loss", "[", "1", "]", "+=", "loss_cluster", ".", "item", "(", ")", "\n", "total_loss", "[", "2", "]", "+=", "loss_push", ".", "item", "(", ")", "\n", "total_loss", "[", "3", "]", "+=", "loss_iso", ".", "item", "(", ")", "\n", "total_loss", "[", "4", "]", "+=", "loss_align", ".", "item", "(", ")", "\n", "\n", "# Update L_ae, L_rec, L_rank", "\n", "if", "epoch", "<", "param", "[", "'start_time'", "]", ":", "\n", "                ", "loss", "=", "param", "[", "'ratio'", "]", "[", "0", "]", "*", "loss_cluster", "+", "loss_rec", "\n", "", "else", ":", "\n", "                ", "alpha", "=", "max", "(", "0", ",", "(", "1", "-", "(", "epoch", "-", "param", "[", "'start_time'", "]", ")", "/", "(", "num_epochs", "/", "2", "-", "param", "[", "'start_time'", "]", ")", ")", ")", "\n", "loss", "=", "(", "param", "[", "'ratio'", "]", "[", "0", "]", "*", "loss_cluster", "+", "loss_rec", ")", "*", "alpha", "+", "param", "[", "'ratio'", "]", "[", "2", "]", "*", "loss_push", "/", "(", "param", "[", "'data_num'", "]", "//", "param", "[", "'batch_size'", "]", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Update L_iso, L_align", "\n", "", "if", "epoch", ">=", "param", "[", "'start_time'", "]", ":", "\n", "            ", "optimizer_iso", ".", "zero_grad", "(", ")", "\n", "loss_com", "=", "min", "(", "1", ",", "(", "epoch", "-", "param", "[", "'start_time'", "]", ")", "/", "(", "num_epochs", "/", "2", ")", ")", "*", "param", "[", "'ratio'", "]", "[", "1", "]", "*", "loss_iso", "+", "param", "[", "'ratio'", "]", "[", "3", "]", "*", "loss_align", "\n", "loss_com", ".", "backward", "(", ")", "\n", "optimizer_iso", ".", "step", "(", ")", "\n", "\n", "# Output evaluation results (ACC/NMI) every 10 epochs", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "10", "==", "0", "or", "epoch", "==", "0", ":", "\n", "            ", "output", "=", "model", "(", "data", ")", "[", "1", "]", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "acc", "=", "cluster_acc", "(", "labels", ",", "output", ")", "\n", "nmi", "=", "nmi_score", "(", "labels", ",", "output", ")", "\n", "\n", "x_embedded", "=", "model", ".", "autoencoder", ".", "encode", "(", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "param", "[", "'n_clusters'", "]", ",", "random_state", "=", "0", ",", "n_init", "=", "20", ")", ".", "fit", "(", "x_embedded", ")", "\n", "y_pred_kmeans", "=", "kmeans", ".", "predict", "(", "x_embedded", ")", "\n", "acc_kmeans", "=", "cluster_acc", "(", "labels", ",", "y_pred_kmeans", ")", "\n", "\n", "print", "(", "'\\033[0;30;46mEpochs: [{}/{}], Acc: {} {}, NMI: {}\\033[0m'", ".", "format", "(", "epoch", "+", "1", ",", "num_epochs", ",", "acc", ",", "acc_kmeans", ",", "nmi", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'\\033[0;30;46mEpochs: [{}/{}], Loss: {}\\033[0m'", ".", "format", "(", "epoch", "+", "1", ",", "num_epochs", ",", "np", ".", "array", "(", "total_loss", ")", "/", "(", "batch_idx", "+", "1", ")", ")", ")", "\n", "# torch.save(model.state_dict(), \"./model/{}/kl_model.pkl\".format(param['name']))", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.main.test": [[134, 151], ["dataset.Dataset", "torch.Tensor().to", "torch.Tensor().to", "model.autoencoder.encode().detach().cpu().numpy", "umap.UMAP", "umap.UMAP.fit_transform", "plt.figure", "plt.subplot", "plt.scatter", "[].argmax().detach().cpu().numpy", "utils.cluster_acc", "sklearn.metrics.cluster.normalized_mutual_info_score", "plt.figure.savefig", "plt.close", "torch.Tensor", "torch.Tensor", "model.autoencoder.encode().detach().cpu", "[].argmax().detach().cpu", "round", "round", "model.autoencoder.encode().detach", "[].argmax().detach", "model.autoencoder.encode", "[].argmax", "model"], "function", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.utils.cluster_acc", "home.repos.pwc.inspect_result.lirongwu_gcml.None.model.AutoEncoder.encode"], ["", "", "", "def", "test", "(", "model", ")", ":", "\n", "    ", "dataset", "=", "Dataset", "(", "param", "[", "'start_idx'", "]", ",", "70000", ",", "param", "[", "'dataset_type'", "]", ")", "\n", "data", "=", "torch", ".", "Tensor", "(", "dataset", ".", "x", "[", "50000", ":", "]", ")", ".", "to", "(", "device", ")", "\n", "labels", "=", "dataset", ".", "y", "[", "50000", ":", "]", "\n", "hidden", "=", "model", ".", "autoencoder", ".", "encode", "(", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "reducer", "=", "umap", ".", "UMAP", "(", "n_neighbors", "=", "5", ",", "min_dist", "=", "0.7", ",", "metric", "=", "'correlation'", ")", "\n", "x_embedded", "=", "reducer", ".", "fit_transform", "(", "hidden", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "111", ")", "\n", "plt", ".", "scatter", "(", "x_embedded", "[", ":", ",", "0", "]", ",", "x_embedded", "[", ":", ",", "1", "]", ",", "c", "=", "labels", ",", "s", "=", "1", ",", "cmap", "=", "'rainbow_r'", ")", "\n", "\n", "output", "=", "model", "(", "data", ")", "[", "1", "]", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "acc", "=", "cluster_acc", "(", "labels", ",", "output", ")", "\n", "nmi", "=", "nmi_score", "(", "labels", ",", "output", ")", "\n", "fig", ".", "savefig", "(", "'{}pics/{}_test_acc{}_nmi{}.png'", ".", "format", "(", "path", ",", "param", "[", "'dataset_type'", "]", ",", "round", "(", "acc", ",", "4", ")", ",", "round", "(", "nmi", ",", "4", ")", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.Dataset.__init__": [[95, 108], ["dataset.load_mnist", "dataset.load_usps", "dataset.load_fashionmnist", "dataset.load_reuters10k", "dataset.load_har", "dataset.load_pendigits"], "methods", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.load_mnist", "home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.load_usps", "home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.load_fashionmnist", "home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.load_reuters10k", "home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.load_har", "home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.load_pendigits"], ["    ", "def", "__init__", "(", "self", ",", "start_idx", ",", "data_num", ",", "datasets", "=", "'MNIST'", ")", ":", "\n", "        ", "if", "datasets", "==", "'MNIST'", ":", "\n", "            ", "self", ".", "x", ",", "self", ".", "y", "=", "load_mnist", "(", "start_idx", "=", "start_idx", ",", "data_num", "=", "data_num", ")", "\n", "", "if", "datasets", "==", "'USPS'", ":", "\n", "            ", "self", ".", "x", ",", "self", ".", "y", "=", "load_usps", "(", "start_idx", "=", "start_idx", ",", "data_num", "=", "data_num", ")", "\n", "", "if", "datasets", "==", "'Fashion-MNIST'", ":", "\n", "            ", "self", ".", "x", ",", "self", ".", "y", "=", "load_fashionmnist", "(", "start_idx", "=", "start_idx", ",", "data_num", "=", "data_num", ")", "\n", "", "if", "datasets", "==", "'Reuters-10k'", ":", "\n", "            ", "self", ".", "x", ",", "self", ".", "y", "=", "load_reuters10k", "(", "start_idx", "=", "start_idx", ",", "data_num", "=", "data_num", ")", "\n", "", "if", "datasets", "==", "'HAR'", ":", "\n", "            ", "self", ".", "x", ",", "self", ".", "y", "=", "load_har", "(", "start_idx", "=", "start_idx", ",", "data_num", "=", "data_num", ")", "\n", "", "if", "datasets", "==", "'Pendigits'", ":", "\n", "            ", "self", ".", "x", ",", "self", ".", "y", "=", "load_pendigits", "(", "start_idx", "=", "start_idx", ",", "data_num", "=", "data_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.Dataset.__len__": [[109, 111], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "x", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.Dataset.__getitem__": [[112, 114], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "x", "[", "idx", "]", ")", ")", ",", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "y", "[", "idx", "]", ")", ")", ",", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "idx", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.load_mnist": [[9, 21], ["numpy.load", "np.load.close", "numpy.concatenate().astype", "numpy.concatenate().astype", "print", "np.concatenate().astype.reshape", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["def", "load_mnist", "(", "path", "=", "'./data/MNIST/mnist.npz'", ",", "start_idx", "=", "0", ",", "data_num", "=", "70000", ")", ":", "\n", "    ", "data_file", "=", "np", ".", "load", "(", "path", ")", "\n", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "=", "data_file", "[", "'x_train'", "]", ",", "data_file", "[", "'y_train'", "]", ",", "data_file", "[", "'x_test'", "]", ",", "data_file", "[", "'y_test'", "]", "\n", "data_file", ".", "close", "(", ")", "\n", "\n", "x", "=", "np", ".", "concatenate", "(", "(", "x_train", ",", "x_test", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "(", "y_train", ",", "y_test", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "/", "255.", "\n", "print", "(", "'MNIST samples'", ",", "x", ".", "shape", ")", "\n", "\n", "return", "x", "[", "start_idx", ":", "start_idx", "+", "data_num", "]", ",", "y", "[", "start_idx", ":", "start_idx", "+", "data_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.load_usps": [[22, 35], ["scipy.loadmat", "numpy.concatenate().astype", "numpy.concatenate().astype", "print", "numpy.argmax", "numpy.argmax", "numpy.concatenate", "numpy.concatenate", "np.concatenate().astype.reshape"], "function", ["None"], ["", "def", "load_usps", "(", "path", "=", "'./data/USPS/usps_resampled.mat'", ",", "start_idx", "=", "0", ",", "data_num", "=", "9298", ")", ":", "\n", "    ", "data", "=", "sio", ".", "loadmat", "(", "path", ")", "\n", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "=", "data", "[", "'train_patterns'", "]", ".", "T", ",", "data", "[", "'train_labels'", "]", ".", "T", ",", "data", "[", "'test_patterns'", "]", ".", "T", ",", "data", "[", "'test_labels'", "]", ".", "T", "\n", "\n", "y_train", "=", "[", "np", ".", "argmax", "(", "l", ")", "for", "l", "in", "y_train", "]", "\n", "y_test", "=", "[", "np", ".", "argmax", "(", "l", ")", "for", "l", "in", "y_test", "]", "\n", "x", "=", "np", ".", "concatenate", "(", "(", "x_train", ",", "x_test", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "(", "y_train", ",", "y_test", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "x", "=", "(", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "+", "1.0", ")", "/", "2.0", "\n", "print", "(", "'USPS samples'", ",", "x", ".", "shape", ")", "\n", "\n", "return", "x", "[", "start_idx", ":", "start_idx", "+", "data_num", "]", ",", "y", "[", "start_idx", ":", "start_idx", "+", "data_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.load_fashionmnist": [[36, 44], ["numpy.load().astype", "numpy.load().astype", "x.reshape.reshape", "print", "numpy.load", "numpy.load"], "function", ["None"], ["", "def", "load_fashionmnist", "(", "path", "=", "'./data/Fashion-MNIST/'", ",", "start_idx", "=", "0", ",", "data_num", "=", "70000", ")", ":", "\n", "    ", "x", "=", "np", ".", "load", "(", "path", "+", "'data.npy'", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "load", "(", "path", "+", "'labels.npy'", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "print", "(", "'FashionMNIST samples'", ",", "x", ".", "shape", ")", "\n", "\n", "return", "x", "[", "start_idx", ":", "start_idx", "+", "data_num", "]", ",", "y", "[", "start_idx", ":", "start_idx", "+", "data_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.load_reuters10k": [[45, 55], ["numpy.load().item", "x.reshape().astype.reshape().astype", "y.reshape().astype.reshape().astype", "print", "numpy.load", "x.reshape().astype.reshape", "y.reshape().astype.reshape"], "function", ["None"], ["", "def", "load_reuters10k", "(", "path", "=", "'./data/Reuters-10k/reuters-10k.npy'", ",", "start_idx", "=", "0", ",", "data_num", "=", "10000", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "path", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "x", "=", "data", "[", "'data'", "]", "\n", "y", "=", "data", "[", "'label'", "]", "\n", "x", "=", "x", ".", "reshape", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y", "=", "y", ".", "reshape", "(", "(", "y", ".", "shape", "[", "0", "]", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "print", "(", "(", "'REUTERSIDF10K samples'", ",", "x", ".", "shape", ")", ")", "\n", "\n", "return", "x", "[", "start_idx", ":", "start_idx", "+", "data_num", "]", ",", "y", "[", "start_idx", ":", "start_idx", "+", "data_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.load_har": [[56, 69], ["pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "numpy.concatenate().astype", "numpy.concatenate().astype", "y.reshape.reshape", "print", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["", "def", "load_har", "(", "path", "=", "'./data/HAR/'", ",", "start_idx", "=", "0", ",", "data_num", "=", "10000", ")", ":", "\n", "    ", "x_train", "=", "pd", ".", "read_csv", "(", "path", "+", "'train/X_train.txt'", ",", "sep", "=", "r'\\s+'", ",", "header", "=", "None", ")", "\n", "y_train", "=", "pd", ".", "read_csv", "(", "path", "+", "'train/y_train.txt'", ",", "header", "=", "None", ")", "\n", "x_test", "=", "pd", ".", "read_csv", "(", "path", "+", "'test/X_test.txt'", ",", "sep", "=", "r'\\s+'", ",", "header", "=", "None", ")", "\n", "y_test", "=", "pd", ".", "read_csv", "(", "path", "+", "'test/y_test.txt'", ",", "header", "=", "None", ")", "\n", "\n", "x", "=", "np", ".", "concatenate", "(", "(", "x_train", ",", "x_test", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "(", "y_train", ",", "y_test", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "y", "=", "y", "-", "1", "\n", "y", "=", "y", ".", "reshape", "(", "(", "y", ".", "size", ",", ")", ")", "\n", "print", "(", "(", "'HAR samples'", ",", "x", ".", "shape", ")", ")", "\n", "\n", "return", "x", "[", "start_idx", ":", "start_idx", "+", "data_num", "]", ",", "y", "[", "start_idx", ":", "start_idx", "+", "data_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.dataset.load_pendigits": [[70, 91], ["numpy.array().astype", "numpy.array().astype", "numpy.concatenate().astype", "numpy.concatenate", "y.astype.astype", "print", "open", "file.readlines", "list", "open", "file.readlines", "list", "map", "numpy.array", "map", "numpy.array", "numpy.concatenate", "line.split", "line.split"], "function", ["None"], ["", "def", "load_pendigits", "(", "path", "=", "'./data/Pendigits/'", ",", "start_idx", "=", "0", ",", "data_num", "=", "10992", ")", ":", "\n", "    ", "with", "open", "(", "path", "+", "'pendigits.tra'", ")", "as", "file", ":", "\n", "        ", "data", "=", "file", ".", "readlines", "(", ")", "\n", "", "data", "=", "[", "list", "(", "map", "(", "float", ",", "line", ".", "split", "(", "','", ")", ")", ")", "for", "line", "in", "data", "]", "\n", "data", "=", "np", ".", "array", "(", "data", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "data_train", ",", "labels_train", "=", "data", "[", ":", ",", ":", "-", "1", "]", ",", "data", "[", ":", ",", "-", "1", "]", "\n", "\n", "with", "open", "(", "path", "+", "'/pendigits.tes'", ")", "as", "file", ":", "\n", "        ", "data", "=", "file", ".", "readlines", "(", ")", "\n", "", "data", "=", "[", "list", "(", "map", "(", "float", ",", "line", ".", "split", "(", "','", ")", ")", ")", "for", "line", "in", "data", "]", "\n", "data", "=", "np", ".", "array", "(", "data", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "data_test", ",", "labels_test", "=", "data", "[", ":", ",", ":", "-", "1", "]", ",", "data", "[", ":", ",", "-", "1", "]", "\n", "\n", "x", "=", "np", ".", "concatenate", "(", "(", "data_train", ",", "data_test", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "(", "labels_train", ",", "labels_test", ")", ")", "\n", "x", "/=", "100.", "\n", "y", "=", "y", ".", "astype", "(", "'int'", ")", "\n", "\n", "print", "(", "'Pendigits samples'", ",", "x", ".", "shape", ")", "\n", "\n", "return", "x", "[", "start_idx", ":", "start_idx", "+", "data_num", "]", ",", "y", "[", "start_idx", ":", "start_idx", "+", "data_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.loss.GCML_Loss.__init__": [[8, 15], ["torch.zeros", "torch.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "param", ",", "k", "=", "5", ",", "push_scale", "=", "3", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "self", ".", "push_scale", "=", "push_scale", "\n", "self", ".", "n_clusters", "=", "param", "[", "'n_clusters'", "]", "\n", "\n", "self", ".", "data_dis", "=", "torch", ".", "zeros", "(", "(", "param", "[", "'data_num'", "]", ",", "self", ".", "k", ")", ",", "device", "=", "device", ")", "\n", "self", ".", "out_dis", "=", "torch", ".", "zeros", "(", "(", "param", "[", "'data_num'", "]", ",", "self", ".", "k", ")", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.loss.GCML_Loss.t_distribute": [[16, 24], ["float", "numerator.t", "torch.sum"], "methods", ["None"], ["", "def", "t_distribute", "(", "self", ",", "dis", ",", "alpha", "=", "1.0", ")", ":", "\n", "\n", "        ", "numerator", "=", "1.0", "/", "(", "1.0", "+", "(", "dis", "**", "2", "/", "alpha", ")", ")", "\n", "power", "=", "float", "(", "alpha", "+", "1.0", ")", "/", "2", "\n", "numerator", "=", "numerator", "**", "power", "\n", "t_dist", "=", "(", "numerator", ".", "t", "(", ")", "/", "torch", ".", "sum", "(", "numerator", ",", "1", ")", ")", ".", "t", "(", ")", "\n", "\n", "return", "t_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.loss.GCML_Loss.kNNGraph": [[25, 45], ["data.to", "data.to", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "dist.addmm_", "dist.clamp().sqrt", "torch.zeros", "torch.sort", "torch.zeros.scatter_", "data.to.size", "data.to.size", "data.to.t", "torch.zeros.bool", "torch.pow().sum", "torch.pow().sum().expand", "dist.clamp", "torch.pow", "torch.pow().sum", "torch.pow"], "methods", ["None"], ["", "def", "kNNGraph", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "n_samples", "=", "data", ".", "shape", "[", "0", "]", "\n", "\n", "x", "=", "data", ".", "to", "(", "device", ")", "\n", "y", "=", "data", ".", "to", "(", "device", ")", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "\n", "xx", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "yy", "=", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "\n", "dist", "=", "xx", "+", "yy", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "d", "=", "dist", ".", "clamp", "(", "min", "=", "1e-8", ")", ".", "sqrt", "(", ")", "\n", "\n", "kNN_mask", "=", "torch", ".", "zeros", "(", "(", "n_samples", ",", "n_samples", ")", ",", "device", "=", "device", ")", "\n", "s_", ",", "indices", "=", "torch", ".", "sort", "(", "d", ",", "dim", "=", "1", ")", "\n", "kNN_mask", ".", "scatter_", "(", "1", ",", "indices", "[", ":", ",", "1", ":", "self", ".", "k", "+", "1", "]", ",", "1", ")", "\n", "\n", "return", "d", ",", "kNN_mask", ".", "bool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.loss.GCML_Loss.update": [[47, 71], ["torch.tensor().to().view", "loss.GCML_Loss.kNNGraph", "loss.GCML_Loss.kNNGraph", "data_dis[].view", "out_dis[].view", "range", "torch.sort", "torch.index_select", "torch.index_select", "torch.tensor().to().view", "loss.GCML_Loss.kNNGraph", "loss.GCML_Loss.kNNGraph", "data_dis[].view", "out_dis[].view", "torch.cat", "torch.cat", "torch.cat", "torch.sqrt", "torch.sqrt", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor().to", "float", "float", "torch.tensor", "numpy.where", "torch.tensor", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.kNNGraph", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.kNNGraph", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.kNNGraph", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.kNNGraph"], ["", "def", "update", "(", "self", ",", "data", ",", "out", ",", "y_pred", ")", ":", "\n", "        ", "index_lists", "=", "torch", ".", "tensor", "(", "np", ".", "where", "(", "y_pred", "==", "0", ")", ")", ".", "to", "(", "device", ")", ".", "view", "(", "-", "1", ")", "\n", "data_dis", ",", "_", "=", "self", ".", "kNNGraph", "(", "data", "[", "y_pred", "==", "0", "]", ")", "\n", "out_dis", ",", "out_knn", "=", "self", ".", "kNNGraph", "(", "out", "[", "y_pred", "==", "0", "]", ")", "\n", "data_dis_masks", "=", "data_dis", "[", "out_knn", "]", ".", "view", "(", "-", "1", ",", "self", ".", "k", ")", "\n", "out_dis_masks", "=", "out_dis", "[", "out_knn", "]", ".", "view", "(", "-", "1", ",", "self", ".", "k", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "n_clusters", ")", ":", "\n", "            ", "index_list", "=", "torch", ".", "tensor", "(", "np", ".", "where", "(", "y_pred", "==", "i", ")", ")", ".", "to", "(", "device", ")", ".", "view", "(", "-", "1", ")", "\n", "data_dis", ",", "_", "=", "self", ".", "kNNGraph", "(", "data", "[", "y_pred", "==", "i", "]", ")", "\n", "out_dis", ",", "out_knn", "=", "self", ".", "kNNGraph", "(", "out", "[", "y_pred", "==", "i", "]", ")", "\n", "data_dis_mask", "=", "data_dis", "[", "out_knn", "]", ".", "view", "(", "-", "1", ",", "self", ".", "k", ")", "\n", "out_dis_mask", "=", "out_dis", "[", "out_knn", "]", ".", "view", "(", "-", "1", ",", "self", ".", "k", ")", "\n", "\n", "data_dis_masks", "=", "torch", ".", "cat", "(", "(", "data_dis_masks", ",", "data_dis_mask", ")", ",", "0", ")", "\n", "out_dis_masks", "=", "torch", ".", "cat", "(", "(", "out_dis_masks", ",", "out_dis_mask", ")", ",", "0", ")", "\n", "index_lists", "=", "torch", ".", "cat", "(", "(", "index_lists", ",", "index_list", ")", ",", "0", ")", "\n", "\n", "", "_", ",", "idx2", "=", "torch", ".", "sort", "(", "index_lists", ")", "\n", "data_dis_masks", "=", "torch", ".", "index_select", "(", "data_dis_masks", ",", "0", ",", "idx2", ")", "\n", "out_dis_masks", "=", "torch", ".", "index_select", "(", "out_dis_masks", ",", "0", ",", "idx2", ")", "\n", "\n", "self", ".", "data_dis", "=", "data_dis_masks", "/", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "float", "(", "data", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "self", ".", "out_dis", "=", "out_dis_masks", "/", "torch", ".", "sqrt", "(", "torch", ".", "tensor", "(", "float", "(", "out", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.loss.GCML_Loss.calculate": [[72, 83], ["loss.GCML_Loss.kNNGraph", "loss.GCML_Loss.kNNGraph", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.kNNGraph", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.kNNGraph"], ["", "def", "calculate", "(", "self", ",", "centers_data", ",", "centers_out", ")", ":", "\n", "\n", "        ", "centers_data", ",", "_", "=", "self", ".", "kNNGraph", "(", "centers_data", ")", "\n", "centers_out", ",", "_", "=", "self", ".", "kNNGraph", "(", "centers_out", ")", "\n", "loss_push", "=", "torch", ".", "norm", "(", "centers_out", "-", "centers_data", "*", "self", ".", "push_scale", ")", "/", "self", ".", "n_clusters", "\n", "\n", "data_dis_mask", "=", "self", ".", "data_dis", "\n", "out_dis_mask", "=", "self", ".", "out_dis", "\n", "loss_iso", "=", "torch", ".", "norm", "(", "data_dis_mask", "-", "out_dis_mask", ")", "\n", "\n", "return", "loss_push", ",", "loss_iso", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.model.AutoEncoder.__init__": [[7, 30], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.__init__"], ["\t", "def", "__init__", "(", "self", ",", "hidden", ",", "input_size", ")", ":", "\n", "\t\t", "super", "(", "AutoEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_size", ",", "500", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "500", ",", "500", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "500", ",", "500", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "500", ",", "2000", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "2000", ",", "hidden", ")", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden", ",", "2000", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "2000", ",", "500", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "500", ",", "500", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "500", ",", "500", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "500", ",", "input_size", ")", ")", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "self", ".", "encoder", ",", "self", ".", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.model.AutoEncoder.encode": [[31, 33], ["model.AutoEncoder.encoder"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "return", "self", ".", "encoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.model.AutoEncoder.decode": [[34, 36], ["model.AutoEncoder.decoder"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "return", "self", ".", "decoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.model.AutoEncoder.forward": [[37, 39], ["model.AutoEncoder.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.model.GCML.__init__": [[43, 51], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.init.xavier_normal_", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.__init__"], ["\t", "def", "__init__", "(", "self", ",", "n_clusters", ",", "hidden", ",", "autoencoder", ",", "alpha", "=", "1.0", ")", ":", "\n", "\t\t", "super", "(", "GCML", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_clusters", "=", "n_clusters", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "autoencoder", "=", "autoencoder", "\n", "\n", "self", ".", "cluster_centers", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "n_clusters", ",", "hidden", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "cluster_centers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.model.GCML.target_distribution": [[52, 55], ["torch.sum", "weight.t", "torch.sum"], "methods", ["None"], ["", "def", "target_distribution", "(", "self", ",", "q", ")", ":", "\n", "\t\t", "weight", "=", "(", "q", "**", "2.0", ")", "/", "torch", ".", "sum", "(", "q", ",", "0", ")", "\n", "return", "(", "weight", ".", "t", "(", ")", "/", "torch", ".", "sum", "(", "weight", ",", "1", ")", ")", ".", "t", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.model.GCML.forward": [[56, 68], ["model.GCML.autoencoder.encode", "model.GCML.autoencoder.decode", "torch.sum", "float", "model.GCML.unsqueeze", "p.t", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.model.AutoEncoder.encode", "home.repos.pwc.inspect_result.lirongwu_gcml.None.model.AutoEncoder.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "hidden", "=", "self", ".", "autoencoder", ".", "encode", "(", "x", ")", "\n", "x_rec", "=", "self", ".", "autoencoder", ".", "decode", "(", "hidden", ")", "\n", "\n", "p_squared", "=", "torch", ".", "sum", "(", "(", "hidden", ".", "unsqueeze", "(", "1", ")", "-", "self", ".", "cluster_centers", ")", "**", "2", ",", "2", ")", "\n", "p", "=", "1.0", "/", "(", "1.0", "+", "(", "p_squared", "/", "self", ".", "alpha", ")", ")", "\n", "power", "=", "float", "(", "self", ".", "alpha", "+", "1", ")", "/", "2", "\n", "p", "=", "p", "**", "power", "\n", "p_dist", "=", "(", "p", ".", "t", "(", ")", "/", "torch", ".", "sum", "(", "p", ",", "1", ")", ")", ".", "t", "(", ")", "\n", "\n", "return", "x_rec", ",", "p_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.autotrain.run": [[15, 18], ["os.system", "command.format", "str"], "function", ["None"], ["def", "run", "(", "command", ",", "gpuid", ",", "gpustate", ")", ":", "\n", "    ", "os", ".", "system", "(", "command", ".", "format", "(", "gpuid", ")", ")", "\n", "gpustate", "[", "str", "(", "gpuid", ")", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.autotrain.term": [[19, 28], ["print", "print", "os.getpid", "print", "p.terminate", "print", "str"], "function", ["None"], ["", "def", "term", "(", "sig_num", ",", "addtion", ")", ":", "\n", "    ", "print", "(", "'terminate process {}'", ".", "format", "(", "os", ".", "getpid", "(", ")", ")", ")", "\n", "try", ":", "\n", "        ", "print", "(", "'the processes is {}'", ".", "format", "(", "processes", ")", ")", "\n", "for", "p", "in", "processes", ":", "\n", "            ", "print", "(", "'process {} terminate'", ".", "format", "(", "p", ".", "pid", ")", ")", "\n", "p", ".", "terminate", "(", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "str", "(", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.utils.SetSeed": [[14, 19], ["torch.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed"], "function", ["None"], ["def", "SetSeed", "(", "seed", ")", ":", "\n", "    ", "SEED", "=", "seed", "\n", "torch", ".", "manual_seed", "(", "SEED", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "SEED", ")", "\n", "np", ".", "random", ".", "seed", "(", "SEED", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.utils.add_noise": [[21, 27], ["torch.randn().to", "torch.randn", "data.size"], "function", ["None"], ["", "def", "add_noise", "(", "data", ",", "noise_level", ")", ":", "\n", "\n", "    ", "noise", "=", "torch", ".", "randn", "(", "data", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", "*", "noise_level", "\n", "noisy_data", "=", "data", "+", "noise", "\n", "\n", "return", "noisy_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.utils.kNNGraph": [[29, 43], ["data.to", "data.to", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "dist.addmm_", "dist.clamp().sqrt", "data.to.size", "data.to.size", "data.to.t", "torch.pow().sum", "torch.pow().sum().expand", "dist.clamp", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["", "def", "kNNGraph", "(", "data", ")", ":", "\n", "\n", "    ", "x", "=", "data", ".", "to", "(", "device", ")", "\n", "y", "=", "data", ".", "to", "(", "device", ")", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "\n", "xx", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "yy", "=", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "\n", "dist", "=", "xx", "+", "yy", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "d", "=", "dist", ".", "clamp", "(", "min", "=", "1e-8", ")", ".", "sqrt", "(", ")", "\n", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.utils.cluster_acc": [[45, 59], ["y_true.astype.astype", "numpy.zeros", "range", "scipy.optimize.linear_sum_assignment", "max", "numpy.array", "y_pred.max", "y_true.astype.max", "np.zeros.max", "sum"], "function", ["None"], ["", "def", "cluster_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_true", "=", "y_true", ".", "astype", "(", "np", ".", "int64", ")", "\n", "assert", "y_pred", ".", "size", "==", "y_true", ".", "size", "\n", "\n", "D", "=", "max", "(", "y_pred", ".", "max", "(", ")", ",", "y_true", ".", "max", "(", ")", ")", "+", "1", "\n", "w", "=", "np", ".", "zeros", "(", "(", "D", ",", "D", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "for", "i", "in", "range", "(", "y_pred", ".", "size", ")", ":", "\n", "        ", "w", "[", "y_pred", "[", "i", "]", ",", "y_true", "[", "i", "]", "]", "+=", "1", "\n", "\n", "", "ind", "=", "linear_assignment", "(", "w", ".", "max", "(", ")", "-", "w", ")", "\n", "ind", "=", "np", ".", "array", "(", "ind", ")", ".", "T", "\n", "\n", "return", "sum", "(", "[", "w", "[", "i", ",", "j", "]", "for", "i", ",", "j", "in", "ind", "]", ")", "*", "1.0", "/", "y_pred", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.utils.rank_acc": [[61, 71], ["utils.kNNGraph", "utils.kNNGraph", "numpy.argsort", "numpy.argsort", "kNNGraph.detach().cpu().numpy", "kNNGraph.detach().cpu().numpy", "numpy.sum", "numpy.where", "kNNGraph.detach().cpu", "kNNGraph.detach().cpu", "kNNGraph.detach", "kNNGraph.detach"], "function", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.kNNGraph", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.kNNGraph"], ["", "def", "rank_acc", "(", "data_centers", ",", "out_centers", ")", ":", "\n", "    ", "data_dis", "=", "kNNGraph", "(", "data_centers", ")", "\n", "out_dis", "=", "kNNGraph", "(", "out_centers", ")", "\n", "\n", "data_sort", "=", "np", ".", "argsort", "(", "data_dis", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "out_sort", "=", "np", ".", "argsort", "(", "out_dis", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "acc", "=", "np", ".", "sum", "(", "np", ".", "where", "(", "data_sort", "==", "out_sort", ",", "1", ",", "0", ")", ")", "/", "(", "data_centers", ".", "shape", "[", "0", "]", "**", "2", ")", "\n", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.utils.visualize": [[73, 103], ["model.autoencoder.encode().detach().cpu().numpy", "numpy.save", "numpy.save", "numpy.save", "umap.UMAP", "umap.UMAP.fit_transform", "matplotlib.pyplot.figure", "matplotlib.pyplot.subplot", "matplotlib.pyplot.scatter", "matplotlib.pyplot.axis", "plt.subplot.spines[].set_visible", "plt.subplot.spines[].set_visible", "plt.subplot.spines[].set_visible", "plt.subplot.spines[].set_visible", "matplotlib.pyplot.xticks", "matplotlib.pyplot.yticks", "matplotlib.pyplot.tight_layout", "[].argmax().detach().cpu().numpy", "utils.cluster_acc", "sklearn.metrics.cluster.normalized_mutual_info_score", "plt.figure.savefig", "matplotlib.pyplot.close", "model.cluster_centers.detach().cpu().numpy", "numpy.save", "numpy.save", "model.autoencoder.encode().detach().cpu", "[].argmax().detach().cpu", "round", "round", "data.cpu().numpy", "model.cluster_centers.detach().cpu", "model.autoencoder.encode().detach", "[].argmax().detach", "data.cpu", "model.cluster_centers.detach", "model.autoencoder.encode", "[].argmax", "model"], "function", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.utils.cluster_acc", "home.repos.pwc.inspect_result.lirongwu_gcml.None.model.AutoEncoder.encode"], ["", "def", "visualize", "(", "data", ",", "labels", ",", "y_pred", ",", "model", ",", "epoch", ",", "path", ",", "param", ")", ":", "\n", "    ", "hidden", "=", "model", ".", "autoencoder", ".", "encode", "(", "data", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np", ".", "save", "(", "\"{}data/{}_e{:03d}_hidden.npy\"", ".", "format", "(", "path", ",", "param", "[", "'dataset_type'", "]", ",", "epoch", ")", ",", "hidden", ")", "\n", "np", ".", "save", "(", "\"{}data/{}_e{:03d}_centers.npy\"", ".", "format", "(", "path", ",", "param", "[", "'dataset_type'", "]", ",", "epoch", ")", ",", "model", ".", "cluster_centers", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "np", ".", "save", "(", "\"{}data/{}_e{:03d}_y_pred.npy\"", ".", "format", "(", "path", ",", "param", "[", "'dataset_type'", "]", ",", "epoch", ")", ",", "y_pred", ")", "\n", "\n", "reducer", "=", "umap", ".", "UMAP", "(", "n_neighbors", "=", "5", ",", "min_dist", "=", "0.7", ",", "metric", "=", "'correlation'", ")", "\n", "x_embedded", "=", "reducer", ".", "fit_transform", "(", "hidden", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "111", ")", "\n", "plt", ".", "scatter", "(", "x_embedded", "[", ":", ",", "0", "]", ",", "x_embedded", "[", ":", ",", "1", "]", ",", "c", "=", "labels", ",", "s", "=", "1", ",", "cmap", "=", "'rainbow_r'", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "ax", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'bottom'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'left'", "]", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "output", "=", "model", "(", "data", ")", "[", "1", "]", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "acc", "=", "cluster_acc", "(", "labels", ",", "output", ")", "\n", "nmi", "=", "nmi_score", "(", "labels", ",", "output", ")", "\n", "fig", ".", "savefig", "(", "'{}pics/{}_e{:03d}_acc{}_nmi{}.png'", ".", "format", "(", "path", ",", "param", "[", "'dataset_type'", "]", ",", "epoch", ",", "round", "(", "acc", ",", "4", ")", ",", "round", "(", "nmi", ",", "4", ")", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n", "if", "epoch", "==", "0", ":", "\n", "        ", "np", ".", "save", "(", "\"{}data/{}_input.npy\"", ".", "format", "(", "path", ",", "param", "[", "'dataset_type'", "]", ")", ",", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "np", ".", "save", "(", "\"{}data/{}_labels.npy\"", ".", "format", "(", "path", ",", "param", "[", "'dataset_type'", "]", ")", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.utils.Clustering": [[105, 117], ["model.autoencoder.encode", "sklearn.manifold.TSNE().fit_transform", "sklearn.cluster.KMeans().fit", "KMeans().fit.predict", "torch.zeros", "range", "model.autoencoder.encode.detach().cpu().numpy", "torch.mean", "sklearn.manifold.TSNE", "sklearn.cluster.KMeans", "model.autoencoder.encode.detach().cpu", "model.autoencoder.encode.detach"], "function", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.model.AutoEncoder.encode"], ["", "", "def", "Clustering", "(", "data", ",", "model", ",", "hidden_num", ",", "data_num", ",", "clu_num", ")", ":", "\n", "\n", "    ", "hidden", "=", "model", ".", "autoencoder", ".", "encode", "(", "data", "[", ":", "data_num", "]", ")", "\n", "x_embedded", "=", "TSNE", "(", "n_components", "=", "2", ")", ".", "fit_transform", "(", "hidden", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "clu_num", ",", "random_state", "=", "0", ",", "n_init", "=", "20", ")", ".", "fit", "(", "x_embedded", ")", "\n", "y_pred", "=", "kmeans", ".", "predict", "(", "x_embedded", ")", "\n", "\n", "cluster_centers", "=", "torch", ".", "zeros", "(", "(", "clu_num", ",", "hidden_num", ")", ")", "\n", "for", "i", "in", "range", "(", "clu_num", ")", ":", "\n", "        ", "cluster_centers", "[", "i", ",", ":", "]", "=", "torch", ".", "mean", "(", "hidden", "[", "y_pred", "==", "i", "]", ",", "0", ")", "\n", "\n", "", "return", "y_pred", ",", "cluster_centers", "", "", ""]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.__init__": [[43, 52], ["torch.is_tensor", "evaluation.MeasureCalculator.init", "Xi.detach().cpu().numpy", "Zi.detach().cpu().numpy", "Xi.detach().cpu", "Zi.detach().cpu", "Xi.detach", "Zi.detach"], "methods", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.init"], ["    ", "def", "__init__", "(", "self", ",", "Xi", ",", "Zi", ",", "k_max", "=", "51", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "Xi", ")", ":", "\n", "            ", "self", ".", "X", "=", "Xi", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "Z", "=", "Zi", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "X", "=", "Xi", "\n", "self", ".", "Z", "=", "Zi", "\n", "\n", "", "self", ".", "init", "(", "k_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.init": [[53, 96], ["evaluation.MeasureCalculator.kNNGraph", "evaluation.MeasureCalculator.kNNGraph", "evaluation.MeasureCalculator._neighbours_and_ranks", "evaluation.MeasureCalculator._neighbours_and_ranks", "evaluation.MeasureCalculator.pairwise_X.cpu().numpy", "evaluation.MeasureCalculator.pairwise_Z.cpu().numpy", "evaluation.MeasureCalculator.neighbours_X.cpu().numpy", "evaluation.MeasureCalculator.neighbours_Z.cpu().numpy", "evaluation.MeasureCalculator.ranks_X.cpu().numpy", "evaluation.MeasureCalculator.ranks_Z.cpu().numpy", "torch.cuda.empty_cache", "range", "evaluation.MeasureCalculator.kNNGraph", "evaluation.MeasureCalculator.kNNGraph", "evaluation.MeasureCalculator._neighbours_and_ranks", "evaluation.MeasureCalculator._neighbours_and_ranks", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "torch.cuda.empty_cache", "print", "evaluation.MeasureCalculator.pairwise_X.cpu", "evaluation.MeasureCalculator.pairwise_Z.cpu", "evaluation.MeasureCalculator.neighbours_X.cpu", "evaluation.MeasureCalculator.neighbours_Z.cpu", "evaluation.MeasureCalculator.ranks_X.cpu", "evaluation.MeasureCalculator.ranks_Z.cpu", "evaluation.MeasureCalculator.pairwise_Xs.cpu().numpy", "evaluation.MeasureCalculator.pairwise_Zs.cpu().numpy", "evaluation.MeasureCalculator.neighbours_Xs.cpu().numpy", "evaluation.MeasureCalculator.neighbours_Zs.cpu().numpy", "evaluation.MeasureCalculator.ranks_Xs.cpu().numpy", "evaluation.MeasureCalculator.ranks_Zs.cpu().numpy", "evaluation.MeasureCalculator.pairwise_Xs.cpu", "evaluation.MeasureCalculator.pairwise_Zs.cpu", "evaluation.MeasureCalculator.neighbours_Xs.cpu", "evaluation.MeasureCalculator.neighbours_Zs.cpu", "evaluation.MeasureCalculator.ranks_Xs.cpu", "evaluation.MeasureCalculator.ranks_Zs.cpu"], "methods", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.kNNGraph", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.kNNGraph", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator._neighbours_and_ranks", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator._neighbours_and_ranks", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.kNNGraph", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.kNNGraph", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator._neighbours_and_ranks", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator._neighbours_and_ranks"], ["", "def", "init", "(", "self", ",", "k_max", ")", ":", "\n", "\n", "        ", "batch_num", "=", "2000", "\n", "data_num", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "%", "batch_num", "\n", "\n", "if", "data_num", "==", "0", ":", "\n", "            ", "data_num", "=", "batch_num", "\n", "batch", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "//", "batch_num", "-", "1", "\n", "", "else", ":", "\n", "            ", "data_num", "=", "data_num", "\n", "batch", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "//", "batch_num", "\n", "\n", "", "self", ".", "pairwise_X", "=", "self", ".", "kNNGraph", "(", "self", ".", "X", "[", ":", "data_num", "]", ",", "self", ".", "X", ")", "\n", "self", ".", "pairwise_Z", "=", "self", ".", "kNNGraph", "(", "self", ".", "Z", "[", ":", "data_num", "]", ",", "self", ".", "Z", ")", "\n", "\n", "self", ".", "neighbours_X", ",", "self", ".", "ranks_X", "=", "self", ".", "_neighbours_and_ranks", "(", "self", ".", "pairwise_X", ",", "k_max", ")", "\n", "self", ".", "neighbours_Z", ",", "self", ".", "ranks_Z", "=", "self", ".", "_neighbours_and_ranks", "(", "self", ".", "pairwise_Z", ",", "k_max", ")", "\n", "\n", "self", ".", "pairwise_X", "=", "self", ".", "pairwise_X", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "pairwise_Z", "=", "self", ".", "pairwise_Z", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "neighbours_X", "=", "self", ".", "neighbours_X", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "neighbours_Z", "=", "self", ".", "neighbours_Z", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "ranks_X", "=", "self", ".", "ranks_X", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "ranks_Z", "=", "self", ".", "ranks_Z", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "batch", ")", ":", "\n", "            ", "self", ".", "pairwise_Xs", "=", "self", ".", "kNNGraph", "(", "self", ".", "X", "[", "data_num", "+", "batch_num", "*", "i", ":", "data_num", "+", "batch_num", "*", "(", "i", "+", "1", ")", "]", ",", "self", ".", "X", ")", "\n", "self", ".", "pairwise_Zs", "=", "self", ".", "kNNGraph", "(", "self", ".", "Z", "[", "data_num", "+", "batch_num", "*", "i", ":", "data_num", "+", "batch_num", "*", "(", "i", "+", "1", ")", "]", ",", "self", ".", "Z", ")", "\n", "\n", "self", ".", "neighbours_Xs", ",", "self", ".", "ranks_Xs", "=", "self", ".", "_neighbours_and_ranks", "(", "self", ".", "pairwise_Xs", ",", "k_max", ")", "\n", "self", ".", "neighbours_Zs", ",", "self", ".", "ranks_Zs", "=", "self", ".", "_neighbours_and_ranks", "(", "self", ".", "pairwise_Zs", ",", "k_max", ")", "\n", "\n", "self", ".", "pairwise_X", "=", "np", ".", "concatenate", "(", "(", "self", ".", "pairwise_X", ",", "self", ".", "pairwise_Xs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "pairwise_Z", "=", "np", ".", "concatenate", "(", "(", "self", ".", "pairwise_Z", ",", "self", ".", "pairwise_Zs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "neighbours_X", "=", "np", ".", "concatenate", "(", "(", "self", ".", "neighbours_X", ",", "self", ".", "neighbours_Xs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "neighbours_Z", "=", "np", ".", "concatenate", "(", "(", "self", ".", "neighbours_Z", ",", "self", ".", "neighbours_Zs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "ranks_X", "=", "np", ".", "concatenate", "(", "(", "self", ".", "ranks_X", ",", "self", ".", "ranks_Xs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "ranks_Z", "=", "np", ".", "concatenate", "(", "(", "self", ".", "ranks_Z", ",", "self", ".", "ranks_Zs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "print", "(", "self", ".", "pairwise_X", ".", "shape", ",", "self", ".", "neighbours_X", ".", "shape", ",", "self", ".", "ranks_X", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.kNNGraph": [[97, 111], ["torch.tensor().to", "torch.tensor().to", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "dist.addmm_", "dist.clamp().sqrt", "torch.tensor().to.size", "torch.tensor().to.size", "torch.tensor().to.t", "torch.tensor", "torch.tensor", "torch.pow().sum", "torch.pow().sum().expand", "dist.clamp", "torch.pow", "torch.pow().sum", "torch.pow"], "methods", ["None"], ["", "", "def", "kNNGraph", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "        ", "x", "=", "torch", ".", "tensor", "(", "x", ")", ".", "to", "(", "device", ")", "\n", "y", "=", "torch", ".", "tensor", "(", "y", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "\n", "xx", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "yy", "=", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "\n", "dist", "=", "xx", "+", "yy", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "d", "=", "dist", ".", "clamp", "(", "min", "=", "1e-8", ")", ".", "sqrt", "(", ")", "\n", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator._neighbours_and_ranks": [[112, 119], ["torch.sort", "torch.sort"], "methods", ["None"], ["", "def", "_neighbours_and_ranks", "(", "self", ",", "distances", ",", "k", ")", ":", "\n", "\n", "        ", "_", ",", "indices", "=", "torch", ".", "sort", "(", "distances", ",", "dim", "=", "1", ")", "\n", "neighbourhood", "=", "indices", "[", ":", ",", "1", ":", "k", "+", "1", "]", "\n", "_", ",", "ranks", "=", "torch", ".", "sort", "(", "indices", ",", "dim", "=", "1", ")", "\n", "\n", "return", "neighbourhood", ",", "ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.get_X_neighbours_and_ranks": [[120, 122], ["None"], "methods", ["None"], ["", "def", "get_X_neighbours_and_ranks", "(", "self", ",", "k", ")", ":", "\n", "        ", "return", "self", ".", "neighbours_X", "[", ":", ",", ":", "k", "]", ",", "self", ".", "ranks_X", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.get_Z_neighbours_and_ranks": [[123, 125], ["None"], "methods", ["None"], ["", "def", "get_Z_neighbours_and_ranks", "(", "self", ",", "k", ")", ":", "\n", "        ", "return", "self", ".", "neighbours_Z", "[", ":", ",", ":", "k", "]", ",", "self", ".", "ranks_Z", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.rmse": [[126, 131], ["numpy.square().sum", "numpy.sqrt", "numpy.square"], "methods", ["None"], ["", "def", "rmse", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "pairwise_X", ".", "shape", "[", "0", "]", "\n", "sum_of_squared_differences", "=", "np", ".", "square", "(", "self", ".", "pairwise_X", "-", "self", ".", "pairwise_Z", ")", ".", "sum", "(", ")", "\n", "\n", "return", "np", ".", "sqrt", "(", "sum_of_squared_differences", "/", "n", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.local_rmse": [[132, 146], ["evaluation.MeasureCalculator.get_X_neighbours_and_ranks", "range", "numpy.sqrt", "numpy.sum", "mses.append", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.square", "numpy.sum", "numpy.square().sum", "numpy.square().sum", "numpy.square", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.get_X_neighbours_and_ranks"], ["", "def", "local_rmse", "(", "self", ",", "k", ")", ":", "\n", "        ", "X_neighbors", ",", "_", "=", "self", ".", "get_X_neighbours_and_ranks", "(", "k", ")", "\n", "\n", "mses", "=", "[", "]", "\n", "n", "=", "self", ".", "pairwise_X", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "x", "=", "self", ".", "X", "[", "X_neighbors", "[", "i", "]", "]", "\n", "z", "=", "self", ".", "Z", "[", "X_neighbors", "[", "i", "]", "]", "\n", "d1", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "x", "-", "self", ".", "X", "[", "i", "]", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "/", "np", ".", "sqrt", "(", "self", ".", "X", ".", "shape", "[", "1", "]", ")", "\n", "d2", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "z", "-", "self", ".", "Z", "[", "i", "]", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "/", "np", ".", "sqrt", "(", "self", ".", "Z", ".", "shape", "[", "1", "]", ")", "\n", "mse", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "d1", "-", "d2", ")", ")", "\n", "mses", ".", "append", "(", "mse", ")", "\n", "\n", "", "return", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "mses", ")", "/", "(", "k", "*", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator._trustworthiness": [[147, 158], ["range", "numpy.setdiff1d"], "methods", ["None"], ["", "def", "_trustworthiness", "(", "self", ",", "X_neighbourhood", ",", "X_ranks", ",", "Z_neighbourhood", ",", "Z_ranks", ",", "n", ",", "k", ")", ":", "\n", "\n", "        ", "result", "=", "0.0", "\n", "\n", "for", "row", "in", "range", "(", "X_ranks", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "missing_neighbours", "=", "np", ".", "setdiff1d", "(", "Z_neighbourhood", "[", "row", "]", ",", "X_neighbourhood", "[", "row", "]", ")", "\n", "\n", "for", "neighbour", "in", "missing_neighbours", ":", "\n", "                ", "result", "+=", "(", "X_ranks", "[", "row", ",", "neighbour", "]", "-", "k", ")", "\n", "\n", "", "", "return", "1", "-", "2", "/", "(", "n", "*", "k", "*", "(", "2", "*", "n", "-", "3", "*", "k", "-", "1", ")", ")", "*", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.trustworthiness": [[159, 166], ["evaluation.MeasureCalculator.get_X_neighbours_and_ranks", "evaluation.MeasureCalculator.get_Z_neighbours_and_ranks", "evaluation.MeasureCalculator._trustworthiness"], "methods", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.get_X_neighbours_and_ranks", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.get_Z_neighbours_and_ranks", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator._trustworthiness"], ["", "def", "trustworthiness", "(", "self", ",", "k", ")", ":", "\n", "\n", "        ", "X_neighbourhood", ",", "X_ranks", "=", "self", ".", "get_X_neighbours_and_ranks", "(", "k", ")", "\n", "Z_neighbourhood", ",", "Z_ranks", "=", "self", ".", "get_Z_neighbours_and_ranks", "(", "k", ")", "\n", "n", "=", "self", ".", "pairwise_X", ".", "shape", "[", "0", "]", "\n", "\n", "return", "self", ".", "_trustworthiness", "(", "X_neighbourhood", ",", "X_ranks", ",", "Z_neighbourhood", ",", "Z_ranks", ",", "n", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.continuity": [[167, 174], ["evaluation.MeasureCalculator.get_X_neighbours_and_ranks", "evaluation.MeasureCalculator.get_Z_neighbours_and_ranks", "evaluation.MeasureCalculator._trustworthiness"], "methods", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.get_X_neighbours_and_ranks", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.get_Z_neighbours_and_ranks", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator._trustworthiness"], ["", "def", "continuity", "(", "self", ",", "k", ")", ":", "\n", "\n", "        ", "X_neighbourhood", ",", "X_ranks", "=", "self", ".", "get_X_neighbours_and_ranks", "(", "k", ")", "\n", "Z_neighbourhood", ",", "Z_ranks", "=", "self", ".", "get_Z_neighbours_and_ranks", "(", "k", ")", "\n", "n", "=", "self", ".", "pairwise_X", ".", "shape", "[", "0", "]", "\n", "\n", "return", "self", ".", "_trustworthiness", "(", "Z_neighbourhood", ",", "Z_ranks", ",", "X_neighbourhood", ",", "X_ranks", ",", "n", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.mrre": [[175, 199], ["evaluation.MeasureCalculator.get_X_neighbours_and_ranks", "evaluation.MeasureCalculator.get_Z_neighbours_and_ranks", "range", "range", "sum", "abs", "abs", "abs", "range"], "methods", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.get_X_neighbours_and_ranks", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.get_Z_neighbours_and_ranks"], ["", "def", "mrre", "(", "self", ",", "k", ")", ":", "\n", "\n", "        ", "X_neighbourhood", ",", "X_ranks", "=", "self", ".", "get_X_neighbours_and_ranks", "(", "k", ")", "\n", "Z_neighbourhood", ",", "Z_ranks", "=", "self", ".", "get_Z_neighbours_and_ranks", "(", "k", ")", "\n", "\n", "n", "=", "self", ".", "pairwise_X", ".", "shape", "[", "0", "]", "\n", "\n", "mrre_ZX", "=", "0.0", "\n", "for", "row", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "neighbour", "in", "Z_neighbourhood", "[", "row", "]", ":", "\n", "                ", "rx", "=", "X_ranks", "[", "row", ",", "neighbour", "]", "\n", "rz", "=", "Z_ranks", "[", "row", ",", "neighbour", "]", "\n", "mrre_ZX", "+=", "abs", "(", "rx", "-", "rz", ")", "/", "rz", "\n", "\n", "", "", "mrre_XZ", "=", "0.0", "\n", "for", "row", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "neighbour", "in", "X_neighbourhood", "[", "row", "]", ":", "\n", "                ", "rx", "=", "X_ranks", "[", "row", ",", "neighbour", "]", "\n", "rz", "=", "Z_ranks", "[", "row", ",", "neighbour", "]", "\n", "mrre_XZ", "+=", "abs", "(", "rx", "-", "rz", ")", "/", "rx", "\n", "\n", "", "", "C", "=", "n", "*", "sum", "(", "[", "abs", "(", "2", "*", "j", "-", "n", ")", "/", "j", "for", "j", "in", "range", "(", "1", ",", "k", "+", "1", ")", "]", ")", "\n", "\n", "return", "mrre_ZX", "/", "C", ",", "mrre_XZ", "/", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.GetIndicator": [[11, 41], ["torch.is_tensor", "torch.is_tensor", "evaluation.MeasureCalculator", "range", "numpy.mean", "numpy.mean", "evaluation.MeasureCalculator.rmse", "numpy.mean", "data.detach().cpu().numpy.detach().cpu().numpy", "latent.detach().cpu().numpy.detach().cpu().numpy", "rmse_local.append", "mrreZX.append", "mrreXZ.append", "cont.append", "trust.append", "evaluation.MeasureCalculator.local_rmse", "evaluation.MeasureCalculator.continuity", "evaluation.MeasureCalculator.trustworthiness", "numpy.mean", "numpy.mean", "data.detach().cpu().numpy.detach().cpu", "latent.detach().cpu().numpy.detach().cpu", "evaluation.MeasureCalculator.mrre", "evaluation.MeasureCalculator.mrre", "data.detach().cpu().numpy.detach", "latent.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.rmse", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.local_rmse", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.continuity", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.trustworthiness", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.mrre", "home.repos.pwc.inspect_result.lirongwu_gcml.None.evaluation.MeasureCalculator.mrre"], ["def", "GetIndicator", "(", "data", ",", "latent", ")", ":", "\n", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "data", ")", ":", "\n", "        ", "data", "=", "data", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "latent", ")", ":", "\n", "        ", "latent", "=", "latent", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "calc", "=", "MeasureCalculator", "(", "data", ",", "latent", ")", "\n", "\n", "rmse_local", "=", "[", "]", "\n", "mrreZX", "=", "[", "]", "\n", "mrreXZ", "=", "[", "]", "\n", "cont", "=", "[", "]", "\n", "trust", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "3", ",", "8", ")", ":", "\n", "        ", "rmse_local", ".", "append", "(", "calc", ".", "local_rmse", "(", "k", "=", "k", ")", ")", "\n", "mrreZX", ".", "append", "(", "calc", ".", "mrre", "(", "k", ")", "[", "0", "]", ")", "\n", "mrreXZ", ".", "append", "(", "calc", ".", "mrre", "(", "k", ")", "[", "1", "]", ")", "\n", "cont", ".", "append", "(", "calc", ".", "continuity", "(", "k", ")", ")", "\n", "trust", ".", "append", "(", "calc", ".", "trustworthiness", "(", "k", ")", ")", "\n", "\n", "", "indicator", "=", "{", "}", "\n", "indicator", "[", "'RRE'", "]", "=", "(", "np", ".", "mean", "(", "mrreXZ", ")", "+", "np", ".", "mean", "(", "mrreZX", ")", ")", "/", "2.0", "\n", "indicator", "[", "'Cont'", "]", "=", "np", ".", "mean", "(", "cont", ")", "\n", "indicator", "[", "'Trust'", "]", "=", "np", ".", "mean", "(", "trust", ")", "\n", "indicator", "[", "'RMSE'", "]", "=", "calc", ".", "rmse", "(", ")", "\n", "indicator", "[", "'LGD'", "]", "=", "np", ".", "mean", "(", "rmse_local", ")", "\n", "\n", "return", "indicator", "\n", "\n"]]}