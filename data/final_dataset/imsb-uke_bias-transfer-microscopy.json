{"home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.scripts.color_transfer_main.main": [[14, 30], ["debiasmedimg.color_transfer.ColorTransfer", "debiasmedimg.color_transfer.ColorTransfer.apply_transfer", "debiasmedimg.color_transfer.ColorTransfer.evaluate", "debiasmedimg.color_transfer.ColorTransfer", "debiasmedimg.color_transfer.ColorTransfer.apply_transfer", "debiasmedimg.color_transfer.ColorTransfer.evaluate"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.apply_transfer", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.evaluate", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.apply_transfer", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.evaluate"], ["@", "ex", ".", "automain", "\n", "def", "main", "(", "dataset_name", ",", "domain_a", ",", "domain_b", ",", "dataset_lowest_folder", ",", "mode", ",", "seed", ")", ":", "\n", "    ", "debiasmedimg", ".", "settings", ".", "DB_DIR", "=", "dataset_lowest_folder", "\n", "\n", "if", "mode", "==", "\"validate\"", ":", "\n", "# Apply color transfer, save images and evaluate the metrics", "\n", "        ", "A_validate", "=", "ColorTransfer", "(", "dataset_lowest_folder", "+", "\"validate.csv\"", ",", "seed", ")", "\n", "A_validate", ".", "apply_transfer", "(", "domain_a", ",", "domain_b", ")", "\n", "A_validate", ".", "evaluate", "(", "True", ",", "dataset_lowest_folder", "+", "\"validate.csv\"", ",", "domain_a", ",", "domain_b", ",", "\n", "dataset", "=", "dataset_name", ")", "\n", "", "elif", "mode", "==", "\"test\"", ":", "\n", "# Apply color transfer, save images and evaluate the metrics", "\n", "        ", "A_test", "=", "ColorTransfer", "(", "dataset_lowest_folder", "+", "\"test.csv\"", ",", "seed", ")", "\n", "A_test", ".", "apply_transfer", "(", "domain_a", ",", "domain_b", ")", "\n", "A_test", ".", "evaluate", "(", "False", ",", "dataset_lowest_folder", "+", "\"test.csv\"", ",", "domain_a", ",", "domain_b", ",", "\n", "dataset", "=", "dataset_name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.scripts.unet_cyclegan_main.main": [[24, 54], ["print", "pandas.read_csv", "csv_df[].dropna().unique", "debiasmedimg.unet_cyclegan.UnetCycleGAN", "print", "all", "debiasmedimg.unet_cyclegan.UnetCycleGAN.train", "csv_df[].dropna", "len", "debiasmedimg.unet_cyclegan.UnetCycleGAN.evaluate", "debiasmedimg.unet_cyclegan.UnetCycleGAN.evaluate"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.train", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.evaluate", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.evaluate"], ["@", "ex", ".", "automain", "\n", "def", "main", "(", "mongo_observer", ",", "dataset_name", ",", "transform_between", ",", "dataset_lowest_folder", ",", "load_epoch", ",", "mode", ",", "run_id", ",", "\n", "image_shape", ",", "epochs", ",", "base_lr", ",", "lambda_adversarial_loss", ",", "lambda_cycleloss", ",", "lambda_identityloss", ",", "\n", "lambda_discriminator_loss", ",", "n_batch", ",", "n_resnet", ",", "additional_losses", ",", "lambda_additional_losses", ")", ":", "\n", "\n", "# Prepare folders", "\n", "    ", "debiasmedimg", ".", "settings", ".", "DB_DIR", "=", "dataset_lowest_folder", "\n", "if", "load_epoch", "and", "not", "run_id", ":", "\n", "        ", "print", "(", "\"Please specify the run id!\"", ")", "\n", "", "print", "(", "\"Connected to mongo observer:\"", ",", "mongo_observer", ")", "\n", "\n", "# Get the number domain names from the training csv file to ensure that all wanted domains are included", "\n", "csv_df", "=", "pd", ".", "read_csv", "(", "dataset_lowest_folder", "+", "\"train.csv\"", ")", "\n", "domains", "=", "csv_df", "[", "\"origin\"", "]", ".", "dropna", "(", ")", ".", "unique", "(", ")", "\n", "assert", "all", "(", "x", "in", "domains", "for", "x", "in", "transform_between", ")", "and", "len", "(", "transform_between", ")", "==", "2", "\n", "\n", "# Create a U-Net cycleGAN setup", "\n", "unet_cyclegan", "=", "UnetCycleGAN", "(", "ex", ",", "transform_between", ",", "load_epoch", ",", "run_id", ",", "image_shape", ",", "epochs", ",", "base_lr", ",", "\n", "lambda_adversarial_loss", ",", "lambda_cycleloss", ",", "lambda_identityloss", ",", "\n", "lambda_discriminator_loss", ",", "n_batch", ",", "n_resnet", ",", "additional_losses", ",", "\n", "lambda_additional_losses", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "unet_cyclegan", ".", "train", "(", "dataset_lowest_folder", "+", "\"train.csv\"", ",", "dataset_lowest_folder", "+", "\"validate.csv\"", ")", "\n", "", "elif", "mode", "==", "'validate'", ":", "\n", "# Evaluate on the validation data", "\n", "        ", "unet_cyclegan", ".", "evaluate", "(", "dataset_lowest_folder", "+", "\"validate.csv\"", ",", "val_test", "=", "mode", ",", "dataset", "=", "dataset_name", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "# Evaluate on the test data", "\n", "        ", "unet_cyclegan", ".", "evaluate", "(", "dataset_lowest_folder", "+", "\"test.csv\"", ",", "val_test", "=", "mode", ",", "dataset", "=", "dataset_name", ",", "\n", "evaluation_direction", "=", "\"AB\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.scripts.cyclegan_main.main": [[24, 57], ["print", "pandas.read_csv", "csv_df[].dropna().unique", "debiasmedimg.cyclegan.CycleGAN", "print", "all", "debiasmedimg.cyclegan.CycleGAN.train", "csv_df[].dropna", "len", "debiasmedimg.cyclegan.CycleGAN.evaluate", "debiasmedimg.cyclegan.CycleGAN.evaluate", "print", "debiasmedimg.cyclegan.CycleGAN.transform_images"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.train", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.evaluate", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.evaluate", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.transform_images"], ["@", "ex", ".", "automain", "\n", "def", "main", "(", "mongo_observer", ",", "dataset_name", ",", "transform_between", ",", "dataset_lowest_folder", ",", "load_epoch", ",", "mode", ",", "run_id", ",", "\n", "image_shape", ",", "epochs", ",", "base_lr", ",", "lambda_adversarial_loss", ",", "lambda_cycleloss", ",", "lambda_identityloss", ",", "\n", "lambda_discriminator_loss", ",", "n_batch", ",", "n_resnet", ",", "additional_losses", ",", "lambda_additional_losses", ")", ":", "\n", "# Prepare folders", "\n", "    ", "debiasmedimg", ".", "settings", ".", "DB_DIR", "=", "dataset_lowest_folder", "\n", "if", "load_epoch", "and", "not", "run_id", ":", "\n", "        ", "print", "(", "\"Please specify the run id!\"", ")", "\n", "", "print", "(", "\"Connected to mongo observer:\"", ",", "mongo_observer", ")", "\n", "\n", "# Get the number domain names from the training csv file to ensure that all wanted domains are included", "\n", "csv_df", "=", "pd", ".", "read_csv", "(", "dataset_lowest_folder", "+", "\"train.csv\"", ")", "\n", "domains", "=", "csv_df", "[", "\"origin\"", "]", ".", "dropna", "(", ")", ".", "unique", "(", ")", "\n", "assert", "all", "(", "x", "in", "domains", "for", "x", "in", "transform_between", ")", "and", "len", "(", "transform_between", ")", "==", "2", "\n", "\n", "# Create a cycleGAN setup", "\n", "cyclegan", "=", "CycleGAN", "(", "ex", ",", "transform_between", ",", "load_epoch", ",", "run_id", ",", "image_shape", ",", "epochs", ",", "base_lr", ",", "\n", "lambda_adversarial_loss", ",", "lambda_cycleloss", ",", "lambda_identityloss", ",", "lambda_discriminator_loss", ",", "\n", "n_batch", ",", "n_resnet", ",", "additional_losses", ",", "lambda_additional_losses", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "cyclegan", ".", "train", "(", "dataset_lowest_folder", "+", "\"train.csv\"", ",", "dataset_lowest_folder", "+", "\"validate.csv\"", ")", "\n", "", "elif", "mode", "==", "'validate'", ":", "\n", "# Evaluate on the validation data", "\n", "        ", "cyclegan", ".", "evaluate", "(", "dataset_lowest_folder", "+", "\"validate.csv\"", ",", "val_test", "=", "mode", ",", "dataset", "=", "dataset_name", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "# Evaluate on the test data", "\n", "        ", "cyclegan", ".", "evaluate", "(", "dataset_lowest_folder", "+", "\"test.csv\"", ",", "val_test", "=", "mode", ",", "\n", "dataset", "=", "dataset_name", ",", "evaluation_direction", "=", "\"AB\"", ")", "\n", "", "elif", "mode", "==", "'transform'", ":", "\n", "        ", "print", "(", "dataset_lowest_folder", ")", "\n", "# Generate transformed images if they don't exist already", "\n", "cyclegan", ".", "transform_images", "(", "dataset_lowest_folder", "+", "\"test.csv\"", ",", "domain_to_translate", "=", "cyclegan", ".", "domains", "[", "0", "]", ",", "\n", "domain_to_translate_to", "=", "cyclegan", ".", "domains", "[", "1", "]", ",", "val_test", "=", "None", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.scripts.fixed_point_gan_main.main": [[24, 58], ["print", "pandas.read_csv", "csv_df[].dropna().unique", "all", "len", "debiasmedimg.fixedpointgan.FixedPointGAN", "print", "debiasmedimg.fixedpointgan.FixedPointGAN.train", "csv_df[].dropna", "debiasmedimg.fixedpointgan.FixedPointGAN.evaluate", "debiasmedimg.fixedpointgan.FixedPointGAN.evaluate"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.train", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.evaluate", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.evaluate"], ["@", "ex", ".", "automain", "\n", "def", "main", "(", "mongo_observer", ",", "dataset_name", ",", "transform_between", ",", "domain_to_translate", ",", "dataset_lowest_folder", ",", "load_epoch", ",", "\n", "mode", ",", "run_id", ",", "image_shape", ",", "epochs", ",", "base_lr", ",", "lambda_adversarial_loss", ",", "lambda_cycleloss", ",", "lambda_domain_loss", ",", "\n", "lambda_gradient_penalty", ",", "lambda_disc_adv", ",", "lambda_identityloss", ",", "n_batch", ",", "n_resnet", ",", "additional_losses", ",", "\n", "lambda_additional_losses", ")", ":", "\n", "\n", "# Prepare folders", "\n", "    ", "debiasmedimg", ".", "settings", ".", "DB_DIR", "=", "dataset_lowest_folder", "\n", "if", "load_epoch", "and", "not", "run_id", ":", "\n", "        ", "print", "(", "\"Please specify the run id!\"", ")", "\n", "", "print", "(", "\"Connected to mongo observer:\"", ",", "mongo_observer", ")", "\n", "\n", "# Get the number domain names from the training csv file to ensure that all wanted domains are included", "\n", "csv_df", "=", "pd", ".", "read_csv", "(", "dataset_lowest_folder", "+", "\"train.csv\"", ")", "\n", "domains", "=", "csv_df", "[", "\"origin\"", "]", ".", "dropna", "(", ")", ".", "unique", "(", ")", "\n", "assert", "all", "(", "x", "in", "domains", "for", "x", "in", "transform_between", ")", "\n", "number_of_domains", "=", "len", "(", "transform_between", ")", "\n", "\n", "# Create a Fixed-Point GAN setup", "\n", "fixedpointgan", "=", "FixedPointGAN", "(", "ex", ",", "transform_between", ",", "load_epoch", ",", "run_id", ",", "image_shape", ",", "number_of_domains", ",", "epochs", ",", "\n", "base_lr", ",", "lambda_adversarial_loss", ",", "lambda_cycleloss", ",", "lambda_domain_loss", ",", "\n", "lambda_gradient_penalty", ",", "lambda_disc_adv", ",", "lambda_identityloss", ",", "\n", "n_batch", ",", "n_resnet", ",", "additional_losses", ",", "lambda_additional_losses", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "fixedpointgan", ".", "train", "(", "dataset_lowest_folder", "+", "\"train.csv\"", ",", "dataset_lowest_folder", "+", "\"validate.csv\"", ",", "\n", "domain_to_translate", "=", "domain_to_translate", ")", "\n", "", "elif", "mode", "==", "'validate'", ":", "\n", "# Evaluate on the validation data", "\n", "        ", "fixedpointgan", ".", "evaluate", "(", "dataset_lowest_folder", "+", "\"validate.csv\"", ",", "val_test", "=", "mode", ",", "\n", "domain_a", "=", "domain_to_translate", ",", "dataset", "=", "dataset_name", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "# Evaluate on the test data", "\n", "        ", "fixedpointgan", ".", "evaluate", "(", "dataset_lowest_folder", "+", "\"test.csv\"", ",", "val_test", "=", "mode", ",", "\n", "domain_a", "=", "domain_to_translate", ",", "dataset", "=", "dataset_name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.__init__": [[18, 28], ["random.seed"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "csv_file", ",", "seed", ")", ":", "\n", "        ", "\"\"\"\n        Initalize random seed and folder to load from and save to\n        :param csv_file: File to read image paths from\n        :param seed: Random seed\n        \"\"\"", "\n", "self", ".", "csv_file", "=", "csv_file", "\n", "# Set random seed", "\n", "self", ".", "seed", "=", "seed", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.apply_transfer": [[29, 62], ["debiasmedimg.cyclegan.util.get_filtered_filenames", "debiasmedimg.cyclegan.util.get_filtered_filenames", "matplotlib.image.imread", "random.choice", "matplotlib.image.imread", "color_transfer.ColorTransfer.lab_color_transfer", "filename.rsplit", "matplotlib.image.imsave", "print", "print", "path.split", "os.path.exists", "os.makedirs", "str"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filtered_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filtered_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.lab_color_transfer"], ["", "def", "apply_transfer", "(", "self", ",", "domain_to_transfer", ",", "target_domain", ")", ":", "\n", "        ", "\"\"\"\n        Load in images, color transfer them and export them\n        :param domain_to_transfer: Which domain to transform\n        :param target_domain: Domain to transfer to\n        \"\"\"", "\n", "files_to_transfer", "=", "get_filtered_filenames", "(", "self", ".", "csv_file", ",", "domain_to_transfer", ")", "\n", "target_files", "=", "get_filtered_filenames", "(", "self", ".", "csv_file", ",", "target_domain", ")", "\n", "for", "path", "in", "files_to_transfer", ":", "\n", "            ", "img", "=", "image", ".", "imread", "(", "path", ")", "\n", "if", "img", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "# Cut off alpha channel", "\n", "                ", "img", "=", "img", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "print", "(", "\"Cutting off alpha channel\"", ")", "\n", "\n", "# Read in random target image", "\n", "", "target_img_file", "=", "random", ".", "choice", "(", "[", "x", "for", "x", "in", "target_files", "]", ")", "\n", "target_img", "=", "image", ".", "imread", "(", "target_img_file", ")", "\n", "if", "target_img", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "# Cut off alpha channel", "\n", "                ", "target_img", "=", "target_img", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "\n", "# Color transfer images", "\n", "", "color_transferred_img", "=", "self", ".", "lab_color_transfer", "(", "img", ",", "target_img", ")", "\n", "filename", "=", "path", ".", "split", "(", "settings", ".", "DB_DIR", ")", "[", "1", "]", "\n", "# Cut off filename", "\n", "path_to_file", ",", "filename", "=", "filename", ".", "rsplit", "(", "'/'", ",", "1", ")", "\n", "path_sample_out", "=", "settings", ".", "OUTPUT_DIR", "+", "\"/generated_images/color_transfer/\"", "+", "\"to_\"", "+", "target_domain", "+", "\"/\"", "+", "str", "(", "self", ".", "seed", ")", "+", "\"/\"", "+", "path_to_file", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_sample_out", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path_sample_out", ")", "\n", "", "image", ".", "imsave", "(", "path_sample_out", "+", "filename", ",", "color_transferred_img", ")", "\n", "print", "(", "\"Exported:\"", ",", "path_sample_out", "+", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.lab_color_transfer": [[63, 86], ["skimage.color.rgb2lab", "skimage.color.rgb2lab", "color_transfer.ColorTransfer.lab_to_lab_int", "color_transfer.ColorTransfer.lab_to_lab_int", "color_transfer.ColorTransfer.cdf", "color_transfer.ColorTransfer.cdf", "color_transfer.ColorTransfer.hist_matching", "numpy.clip", "color_transfer.ColorTransfer.lab_int_to_lab", "skimage.color.lab2rgb", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.lab_to_lab_int", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.lab_to_lab_int", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.cdf", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.cdf", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.hist_matching", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.lab_int_to_lab"], ["", "", "def", "lab_color_transfer", "(", "self", ",", "source", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Transfer color to a source image given a target\n        :param source: Image to change\n        :param target: Image to use for target colours\n        :return: Color transferred image\n        \"\"\"", "\n", "# Convert the RGB images to the LAB color space", "\n", "lab_source", "=", "skimage", ".", "color", ".", "rgb2lab", "(", "source", ")", "\n", "lab_target", "=", "skimage", ".", "color", ".", "rgb2lab", "(", "target", ")", "\n", "# CDFs require image values as ints", "\n", "lab_source_int", "=", "self", ".", "lab_to_lab_int", "(", "lab_source", ")", "\n", "lab_target_int", "=", "self", ".", "lab_to_lab_int", "(", "lab_target", ")", "\n", "# Calculate the CDFs of the source and target imgs", "\n", "cdf_lab_source", "=", "self", ".", "cdf", "(", "lab_source_int", ")", "\n", "cdf_lab_target", "=", "self", ".", "cdf", "(", "lab_target_int", ")", "\n", "# Perform histogram matching", "\n", "lab_result_int", "=", "self", ".", "hist_matching", "(", "cdf_lab_source", ",", "cdf_lab_target", ",", "deepcopy", "(", "lab_source_int", ")", ")", "\n", "lab_result_int", "=", "np", ".", "clip", "(", "lab_result_int", ",", "0", ",", "255", ")", "\n", "# Convert LAB to RGB", "\n", "lab_result", "=", "self", ".", "lab_int_to_lab", "(", "lab_result_int", ")", "\n", "result", "=", "skimage", ".", "color", ".", "lab2rgb", "(", "lab_result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.lab_to_lab_int": [[87, 98], ["img.astype.astype.astype"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "lab_to_lab_int", "(", "img", ")", ":", "\n", "        ", "\"\"\"\n        Convert an image from regular lab to integer lab representation for histogram matching\n        :param img: Image to transform\n        \"\"\"", "\n", "img", "[", ":", ",", ":", ",", "0", "]", "=", "img", "[", ":", ",", ":", ",", "0", "]", "*", "255", "/", "100", "\n", "img", "[", ":", ",", ":", ",", "1", "]", "=", "img", "[", ":", ",", ":", ",", "1", "]", "+", "127", "\n", "img", "[", ":", ",", ":", ",", "2", "]", "=", "img", "[", ":", ",", ":", ",", "2", "]", "+", "127", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.lab_int_to_lab": [[99, 110], ["img.astype.astype.astype"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "lab_int_to_lab", "(", "img", ")", ":", "\n", "        ", "\"\"\"\n        Convert an image from integer lab representation to regular lab representation\n        :param img: Image to transform\n        \"\"\"", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float", ")", "\n", "img", "[", ":", ",", ":", ",", "0", "]", "=", "img", "[", ":", ",", ":", ",", "0", "]", "*", "100", "/", "255", "\n", "img", "[", ":", ",", ":", ",", "1", "]", "=", "img", "[", ":", ",", ":", ",", "1", "]", "-", "127", "\n", "img", "[", ":", ",", ":", ",", "2", "]", "=", "img", "[", ":", ",", ":", ",", "2", "]", "-", "127", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.cdf": [[111, 126], ["range", "numpy.array", "skimage.exposure.cumulative_distribution", "numpy.insert", "numpy.append", "numpy.array.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "cdf", "(", "im", ")", ":", "\n", "        ", "\"\"\"\n        Computes the CDF of an image im as 2D numpy ndarray\n        :param im: Image to calculate the CDF of\n        \"\"\"", "\n", "cdf_rgb", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "c", ",", "b", "=", "cumulative_distribution", "(", "im", "[", ":", ",", ":", ",", "i", "]", ")", "\n", "# pad the beginning and ending pixels and their CDF values", "\n", "c", "=", "np", ".", "insert", "(", "c", ",", "0", ",", "[", "0", "]", "*", "b", "[", "0", "]", ")", "\n", "c", "=", "np", ".", "append", "(", "c", ",", "[", "1", "]", "*", "(", "255", "-", "b", "[", "-", "1", "]", ")", ")", "\n", "cdf_rgb", ".", "append", "(", "c", ")", "\n", "", "cdf_rgb", "=", "np", ".", "array", "(", "cdf_rgb", ")", "\n", "return", "cdf_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.hist_matching": [[127, 143], ["enumerate", "numpy.arange", "numpy.interp", "numpy.reshape().astype", "numpy.reshape", "im[].ravel"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "hist_matching", "(", "c", ",", "c_t", ",", "im", ")", ":", "\n", "        ", "\"\"\"\n        Match the histograms via closest pixel-matches of the given CDFs\n        :param c: CDF of input image computed with the function cdf()\n        :param c_t: CDF of target image computed with the function cdf()\n        :param im: input image as 2D numpy ndarray\n        :return: modified pixel values\n        \"\"\"", "\n", "for", "ix", ",", "layer", "in", "enumerate", "(", "c", ")", ":", "\n", "            ", "pixels", "=", "np", ".", "arange", "(", "256", ")", "\n", "# find closest pixel-matches corresponding to the CDF of the input image, given the value of the CDF H of", "\n", "# the template image at the corresponding pixels, s.t. c_t = H(pixels) <=> pixels = H-1(c_t)", "\n", "new_pixels", "=", "np", ".", "interp", "(", "c", "[", "ix", "]", ",", "c_t", "[", "ix", "]", ",", "pixels", ")", "\n", "im", "[", ":", ",", ":", ",", "ix", "]", "=", "(", "np", ".", "reshape", "(", "new_pixels", "[", "im", "[", ":", ",", ":", ",", "ix", "]", ".", "ravel", "(", ")", "]", ",", "(", "im", ".", "shape", "[", "0", "]", ",", "im", ".", "shape", "[", "1", "]", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.color_transfer.color_transfer.ColorTransfer.evaluate": [[144, 192], ["debiasmedimg.cyclegan.util.get_filtered_filenames", "debiasmedimg.cyclegan.util.get_filtered_filenames", "print", "enumerate", "debiasmedimg.cyclegan.util.get_all_samples", "debiasmedimg.cyclegan.util.get_all_samples", "debiasmedimg.cyclegan.util.get_all_samples", "print", "debiasmedimg.cyclegan.util.get_fid", "debiasmedimg.cyclegan.util.get_fid", "debiasmedimg.cyclegan.util.save_to_csv", "numpy.squeeze", "filename.rsplit", "numpy.squeeze", "debiasmedimg.cyclegan.util.normalize_for_evaluation", "debiasmedimg.cyclegan.util.normalize_for_evaluation", "debiasmedimg.cyclegan.util.ssim_score", "ssims_a.append", "print", "sum", "len", "path.split", "os.listdir", "debiasmedimg.cyclegan.util.get_sample_from_path", "debiasmedimg.cyclegan.util.get_sample_from_path", "len", "str"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filtered_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filtered_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.get_fid", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.get_fid", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.save_to_csv", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_evaluation", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_evaluation", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.ssim_score", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path"], ["", "def", "evaluate", "(", "self", ",", "validate", ",", "csv_file", ",", "domain_a", ",", "domain_b", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate the color transferred images regarding SSIM and FID\n        :param validate: Whether we are validating or testing\n        :param csv_file: CSV files containing info on all images used during the evaluation\n        :param domain_a: Name of domain A\n        :param domain_b: Name of domain b\n        :param dataset: Name of the dataset\n        \"\"\"", "\n", "run_id", "=", "\"Baseline\"", "\n", "files_a", "=", "get_filtered_filenames", "(", "csv_file", ",", "domain_a", ")", "\n", "files_b", "=", "get_filtered_filenames", "(", "csv_file", ",", "domain_b", ")", "\n", "\n", "print", "(", "\"Evaluating set a\"", ")", "\n", "ssims_a", "=", "[", "]", "\n", "for", "ix", ",", "path", "in", "enumerate", "(", "files_a", ")", ":", "\n", "# Read in images in full size, remove batch dimension", "\n", "            ", "original_fullsize", "=", "np", ".", "squeeze", "(", "get_sample_from_path", "(", "path", ")", "[", "0", "]", ")", "\n", "filename", "=", "path", ".", "split", "(", "settings", ".", "DB_DIR", ")", "[", "1", "]", "\n", "# Cut off filename", "\n", "path_to_file", ",", "filename", "=", "filename", ".", "rsplit", "(", "'/'", ",", "1", ")", "\n", "path_sample_out", "=", "settings", ".", "OUTPUT_DIR", "+", "\"/generated_images/color_transfer/\"", "+", "\"to_\"", "+", "domain_b", "+", "\"/\"", "+", "str", "(", "self", ".", "seed", ")", "+", "\"/\"", "+", "path_to_file", "+", "\"/\"", "\n", "transformed_upsampled", "=", "np", ".", "squeeze", "(", "get_sample_from_path", "(", "path_sample_out", "+", "filename", ")", "[", "0", "]", ")", "\n", "# Evaluate ssim", "\n", "original_fullsize", "=", "normalize_for_evaluation", "(", "original_fullsize", ")", "\n", "transformed_upsampled", "=", "normalize_for_evaluation", "(", "transformed_upsampled", ")", "\n", "# Get the SSIM scores between input and output of the generator", "\n", "ssim_inout", "=", "ssim_score", "(", "original_fullsize", ",", "transformed_upsampled", ")", "\n", "ssims_a", ".", "append", "(", "ssim_inout", ")", "\n", "print", "(", "\"Completed {}/{}\"", ".", "format", "(", "ix", "+", "1", ",", "len", "(", "files_a", ")", ")", ")", "\n", "", "ssim_a", "=", "sum", "(", "ssims_a", ")", "/", "len", "(", "files_a", ")", "\n", "\n", "# Read in all images again for FID and wasserstein distance on histograms", "\n", "a_fullsize", "=", "get_all_samples", "(", "files_a", ")", "\n", "transformed_files", "=", "[", "path_sample_out", "+", "f", "for", "f", "in", "os", ".", "listdir", "(", "path_sample_out", ")", "]", "\n", "to_b_upsampled", "=", "get_all_samples", "(", "transformed_files", ")", "\n", "b_fullsize", "=", "get_all_samples", "(", "files_b", ")", "\n", "\n", "# FID score:", "\n", "print", "(", "\"Calculating FID score between real domains and generated domains\"", ")", "\n", "fid_b", "=", "get_fid", "(", "b_fullsize", ",", "to_b_upsampled", ")", "\n", "fid_original", "=", "get_fid", "(", "a_fullsize", ",", "b_fullsize", ")", "\n", "\n", "# Add summary to csv file", "\n", "values", "=", "[", "ssim_a", ",", "fid_original", ",", "fid_b", "]", "\n", "save_to_csv", "(", "run_id", ",", "self", ".", "seed", ",", "domain_a", ",", "domain_b", ",", "values", ",", "\"color transfer\"", ",", "dataset", ",", "\n", "validate", "=", "validate", ",", "only_ab", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.__init__": [[22, 130], ["util.define_unet_generator", "util.define_unet_generator", "debiasmedimg.cyclegan.util.define_discriminator", "debiasmedimg.cyclegan.util.define_discriminator", "tensorflow.keras.optimizers.Adam", "tensorflow.keras.optimizers.Adam", "tensorflow.keras.optimizers.Adam", "tensorflow.keras.optimizers.Adam", "tensorflow.train.Checkpoint", "tensorflow.train.CheckpointManager", "debiasmedimg.cyclegan.util.Logger", "debiasmedimg.cyclegan.util.Logger", "debiasmedimg.cyclegan.util.Logger", "debiasmedimg.cyclegan.util.Logger", "float", "float", "datetime.datetime.now().strftime", "print", "unet_cyclegan_main.UnetCycleGAN.ckpt.restore().expect_partial", "print", "ckpt_to_restore.split", "int", "unet_cyclegan_main.UnetCycleGAN.assert_existing_objects_matched", "datetime.datetime.now", "unet_cyclegan_main.UnetCycleGAN.ckpt.restore", "id_and_checkpoint.split", "str"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.define_unet_generator", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.define_unet_generator", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.discriminator.define_discriminator", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.discriminator.define_discriminator"], ["\n", "\n", "@", "ex", ".", "automain", "\n", "def", "main", "(", "mongo_observer", ",", "dataset_name", ",", "transform_between", ",", "dataset_lowest_folder", ",", "load_epoch", ",", "mode", ",", "run_id", ",", "\n", "image_shape", ",", "epochs", ",", "base_lr", ",", "lambda_adversarial_loss", ",", "lambda_cycleloss", ",", "lambda_identityloss", ",", "\n", "lambda_discriminator_loss", ",", "n_batch", ",", "n_resnet", ",", "additional_losses", ",", "lambda_additional_losses", ")", ":", "\n", "\n", "# Prepare folders", "\n", "    ", "debiasmedimg", ".", "settings", ".", "DB_DIR", "=", "dataset_lowest_folder", "\n", "if", "load_epoch", "and", "not", "run_id", ":", "\n", "        ", "print", "(", "\"Please specify the run id!\"", ")", "\n", "", "print", "(", "\"Connected to mongo observer:\"", ",", "mongo_observer", ")", "\n", "\n", "# Get the number domain names from the training csv file to ensure that all wanted domains are included", "\n", "csv_df", "=", "pd", ".", "read_csv", "(", "dataset_lowest_folder", "+", "\"train.csv\"", ")", "\n", "domains", "=", "csv_df", "[", "\"origin\"", "]", ".", "dropna", "(", ")", ".", "unique", "(", ")", "\n", "assert", "all", "(", "x", "in", "domains", "for", "x", "in", "transform_between", ")", "and", "len", "(", "transform_between", ")", "==", "2", "\n", "\n", "# Create a U-Net cycleGAN setup", "\n", "unet_cyclegan", "=", "UnetCycleGAN", "(", "ex", ",", "transform_between", ",", "load_epoch", ",", "run_id", ",", "image_shape", ",", "epochs", ",", "base_lr", ",", "\n", "lambda_adversarial_loss", ",", "lambda_cycleloss", ",", "lambda_identityloss", ",", "\n", "lambda_discriminator_loss", ",", "n_batch", ",", "n_resnet", ",", "additional_losses", ",", "\n", "lambda_additional_losses", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "unet_cyclegan", ".", "train", "(", "dataset_lowest_folder", "+", "\"train.csv\"", ",", "dataset_lowest_folder", "+", "\"validate.csv\"", ")", "\n", "", "elif", "mode", "==", "'validate'", ":", "\n", "# Evaluate on the validation data", "\n", "        ", "unet_cyclegan", ".", "evaluate", "(", "dataset_lowest_folder", "+", "\"validate.csv\"", ",", "val_test", "=", "mode", ",", "dataset", "=", "dataset_name", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "# Evaluate on the test data", "\n", "        ", "unet_cyclegan", ".", "evaluate", "(", "dataset_lowest_folder", "+", "\"test.csv\"", ",", "val_test", "=", "mode", ",", "dataset", "=", "dataset_name", ",", "\n", "evaluation_direction", "=", "\"AB\"", ")", "\n", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.update_lr": [[131, 149], ["unet_cyclegan_main.UnetCycleGAN.generator_AtoB_optimizer.lr.assign", "unet_cyclegan_main.UnetCycleGAN.generator_BtoA_optimizer.lr.assign", "unet_cyclegan_main.UnetCycleGAN.discriminator_A_optimizer.lr.assign", "unet_cyclegan_main.UnetCycleGAN.discriminator_B_optimizer.lr.assign", "print", "unet_cyclegan_main.UnetCycleGAN.generator_AtoB_optimizer.lr.numpy"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.generate_fake_samples": [[150, 170], ["numpy.zeros", "unet_cyclegan_main.UnetCycleGAN.generator_BtoA.predict", "unet_cyclegan_main.UnetCycleGAN.generator_AtoB.predict", "print", "exit", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.visualize_performance": [[171, 207], ["debiasmedimg.cyclegan.util.get_sample_from_path", "debiasmedimg.cyclegan.util.get_sample_from_path", "unet_cyclegan_main.UnetCycleGAN.generator_AtoB", "unet_cyclegan_main.UnetCycleGAN.generator_BtoA", "debiasmedimg.cyclegan.util.normalize_for_display", "debiasmedimg.cyclegan.util.normalize_for_display", "debiasmedimg.cyclegan.util.normalize_for_display", "debiasmedimg.cyclegan.util.normalize_for_display", "matplotlib.figure", "matplotlib.figure", "range", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "len", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.title", "matplotlib.title", "matplotlib.imshow", "matplotlib.imshow", "os.path.exists", "os.makedirs", "str"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_display", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_display", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_display", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_display"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.discriminator_loss": [[208, 221], ["tensorflow.keras.losses.BinaryCrossentropy", "tensorflow.keras.losses.BinaryCrossentropy.", "tensorflow.keras.losses.BinaryCrossentropy.", "tensorflow.ones_like", "tensorflow.zeros_like"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.calc_cycle_loss": [[222, 231], ["tensorflow.reduce_mean", "tensorflow.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.generator_loss": [[232, 242], ["tensorflow.keras.losses.BinaryCrossentropy", "tensorflow.keras.losses.BinaryCrossentropy.", "tensorflow.ones_like"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.identity_loss": [[243, 252], ["tensorflow.reduce_mean", "tensorflow.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.additional_identity_loss": [[253, 268], ["unet_cyclegan_main.UnetCycleGAN.additional_losses.index", "tensorflow.reduce_mean", "tensorflow.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.ms_ssim_loss": [[269, 284], ["unet_cyclegan_main.UnetCycleGAN.additional_losses.index", "tensorflow.image.ssim_multiscale", "tensorflow.image.ssim_multiscale"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.ma_structure_loss": [[285, 328], ["zip", "unet_cyclegan_main.UnetCycleGAN.additional_losses.index", "debiasmedimg.cyclegan.util.create_patches", "debiasmedimg.cyclegan.util.create_patches", "zip", "numpy.std", "numpy.std", "numpy.array", "structure_loss.clip.clip.clip", "structure_losses.append", "numpy.sum", "numpy.empty", "range", "numpy.array.append", "numpy.array", "numpy.vstack", "numpy.cov", "numpy.sum", "img_patch[].flatten", "gen_img_patch[].flatten"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.create_patches", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.create_patches"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.train": [[329, 482], ["debiasmedimg.cyclegan.util.get_filenames", "print", "print", "debiasmedimg.cyclegan.util.get_filenames", "min", "int", "print", "unet_cyclegan_main.UnetCycleGAN.visualize_performance", "range", "len", "len", "len", "print", "numpy.random.shuffle", "numpy.random.shuffle", "unet_cyclegan_main.UnetCycleGAN.update_lr", "unet_cyclegan_main.UnetCycleGAN.training_logger.reset_batch", "time.time", "range", "print", "unet_cyclegan_main.UnetCycleGAN.training_logger.log_to_ex", "unet_cyclegan_main.UnetCycleGAN.visualize_performance", "unet_cyclegan_main.UnetCycleGAN.validate", "debiasmedimg.cyclegan.util.get_real_samples", "debiasmedimg.cyclegan.util.get_real_samples", "tape.gradient", "tape.gradient", "tape.gradient", "tape.gradient", "unet_cyclegan_main.UnetCycleGAN.generator_AtoB_optimizer.apply_gradients", "unet_cyclegan_main.UnetCycleGAN.generator_BtoA_optimizer.apply_gradients", "unet_cyclegan_main.UnetCycleGAN.discriminator_A_optimizer.apply_gradients", "unet_cyclegan_main.UnetCycleGAN.discriminator_B_optimizer.apply_gradients", "unet_cyclegan_main.UnetCycleGAN.training_logger.log_batch", "unet_cyclegan_main.UnetCycleGAN.ckpt_manager.save", "print", "tensorflow.GradientTape", "unet_cyclegan_main.UnetCycleGAN.generator_AtoB", "unet_cyclegan_main.UnetCycleGAN.generator_BtoA", "unet_cyclegan_main.UnetCycleGAN.generator_BtoA", "unet_cyclegan_main.UnetCycleGAN.generator_AtoB", "unet_cyclegan_main.UnetCycleGAN.discriminator_A", "unet_cyclegan_main.UnetCycleGAN.discriminator_B", "unet_cyclegan_main.UnetCycleGAN.discriminator_A", "unet_cyclegan_main.UnetCycleGAN.discriminator_B", "unet_cyclegan_main.UnetCycleGAN.generator_loss", "unet_cyclegan_main.UnetCycleGAN.generator_loss", "unet_cyclegan_main.UnetCycleGAN.generator_AtoB", "unet_cyclegan_main.UnetCycleGAN.generator_BtoA", "unet_cyclegan_main.UnetCycleGAN.identity_loss", "unet_cyclegan_main.UnetCycleGAN.identity_loss", "unet_cyclegan_main.UnetCycleGAN.discriminator_loss", "unet_cyclegan_main.UnetCycleGAN.discriminator_loss", "zip", "zip", "zip", "zip", "print", "unet_cyclegan_main.UnetCycleGAN.calc_cycle_loss", "unet_cyclegan_main.UnetCycleGAN.calc_cycle_loss", "unet_cyclegan_main.UnetCycleGAN.additional_identity_loss", "unet_cyclegan_main.UnetCycleGAN.additional_identity_loss", "unet_cyclegan_main.UnetCycleGAN.ms_ssim_loss", "unet_cyclegan_main.UnetCycleGAN.ma_structure_loss", "unet_cyclegan_main.UnetCycleGAN.ma_structure_loss", "time.time"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.visualize_performance", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.update_lr", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.reset_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_to_ex", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.visualize_performance", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.validate", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_real_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_real_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.generator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.generator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.discriminator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.discriminator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.additional_identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.additional_identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ms_ssim_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ma_structure_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ma_structure_loss"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.validate": [[483, 573], ["min", "int", "numpy.random.shuffle", "numpy.random.shuffle", "unet_cyclegan_main.UnetCycleGAN.validation_logger.reset_batch", "range", "unet_cyclegan_main.UnetCycleGAN.validation_logger.log_to_ex", "unet_cyclegan_main.UnetCycleGAN.validation_logger.get_batch_mean", "len", "len", "debiasmedimg.cyclegan.util.get_real_samples", "debiasmedimg.cyclegan.util.get_real_samples", "unet_cyclegan_main.UnetCycleGAN.generator_AtoB", "unet_cyclegan_main.UnetCycleGAN.generator_BtoA", "unet_cyclegan_main.UnetCycleGAN.generator_BtoA", "unet_cyclegan_main.UnetCycleGAN.generator_AtoB", "unet_cyclegan_main.UnetCycleGAN.discriminator_A", "unet_cyclegan_main.UnetCycleGAN.discriminator_B", "unet_cyclegan_main.UnetCycleGAN.discriminator_A", "unet_cyclegan_main.UnetCycleGAN.discriminator_B", "unet_cyclegan_main.UnetCycleGAN.generator_loss", "unet_cyclegan_main.UnetCycleGAN.generator_loss", "unet_cyclegan_main.UnetCycleGAN.generator_AtoB", "unet_cyclegan_main.UnetCycleGAN.generator_BtoA", "unet_cyclegan_main.UnetCycleGAN.identity_loss", "unet_cyclegan_main.UnetCycleGAN.identity_loss", "unet_cyclegan_main.UnetCycleGAN.discriminator_loss", "unet_cyclegan_main.UnetCycleGAN.discriminator_loss", "unet_cyclegan_main.UnetCycleGAN.validation_logger.log_batch", "unet_cyclegan_main.UnetCycleGAN.calc_cycle_loss", "unet_cyclegan_main.UnetCycleGAN.calc_cycle_loss", "unet_cyclegan_main.UnetCycleGAN.additional_identity_loss", "unet_cyclegan_main.UnetCycleGAN.additional_identity_loss", "unet_cyclegan_main.UnetCycleGAN.ms_ssim_loss", "unet_cyclegan_main.UnetCycleGAN.ma_structure_loss", "unet_cyclegan_main.UnetCycleGAN.ma_structure_loss"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.reset_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_to_ex", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.get_batch_mean", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_real_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_real_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.generator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.generator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.discriminator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.discriminator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.additional_identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.additional_identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ms_ssim_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ma_structure_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ma_structure_loss"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.transform_images": [[574, 615], ["debiasmedimg.cyclegan.util.get_filtered_filenames", "enumerate", "filename.rsplit", "str", "path.split", "os.path.exists", "os.makedirs", "os.path.isfile", "print", "debiasmedimg.cyclegan.util.get_sample_from_path", "print", "debiasmedimg.cyclegan.util.laplacian_upsampling", "numpy.squeeze", "debiasmedimg.cyclegan.util.normalize_for_display", "unet_cyclegan_main.UnetCycleGAN.generator_AtoB", "os.path.isfile", "matplotlib.image.imsave", "matplotlib.image.imsave", "matplotlib.image.imsave", "matplotlib.image.imsave", "unet_cyclegan_main.UnetCycleGAN.generator_BtoA", "print", "exit", "sample_fullsize.numpy", "unet_cyclegan_main.UnetCycleGAN.numpy", "str"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filtered_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.laplacian_scaling.laplacian_upsampling", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_display"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.unet_cyclegan.unet_cyclegan_main.UnetCycleGAN.evaluate": [[616, 727], ["debiasmedimg.cyclegan.util.get_filenames", "str", "debiasmedimg.cyclegan.util.get_all_samples", "debiasmedimg.cyclegan.util.get_all_samples", "debiasmedimg.cyclegan.util.get_fid", "print", "unet_cyclegan_main.UnetCycleGAN.transform_images", "unet_cyclegan_main.UnetCycleGAN.transform_images", "unet_cyclegan_main.UnetCycleGAN.eval_val_logger.reset_batch", "unet_cyclegan_main.UnetCycleGAN.eval_test_logger.reset_batch", "print", "enumerate", "print", "enumerate", "debiasmedimg.cyclegan.util.get_all_samples", "debiasmedimg.cyclegan.util.get_fid", "debiasmedimg.cyclegan.util.get_all_samples", "debiasmedimg.cyclegan.util.get_fid", "unet_cyclegan_main.UnetCycleGAN.eval_val_logger.log_specific_batch", "unet_cyclegan_main.UnetCycleGAN.eval_val_logger.log_to_ex", "unet_cyclegan_main.UnetCycleGAN.eval_val_logger.get_batch_mean", "debiasmedimg.cyclegan.util.save_to_csv", "unet_cyclegan_main.UnetCycleGAN.eval_test_logger.log_specific_batch", "unet_cyclegan_main.UnetCycleGAN.eval_test_logger.log_to_ex", "unet_cyclegan_main.UnetCycleGAN.eval_test_logger.get_batch_mean", "debiasmedimg.cyclegan.util.save_to_csv", "str", "str", "numpy.squeeze", "numpy.squeeze", "debiasmedimg.cyclegan.util.normalize_for_evaluation", "debiasmedimg.cyclegan.util.normalize_for_evaluation", "debiasmedimg.cyclegan.util.ssim_score", "print", "print", "numpy.squeeze", "numpy.squeeze", "debiasmedimg.cyclegan.util.normalize_for_evaluation", "debiasmedimg.cyclegan.util.normalize_for_evaluation", "debiasmedimg.cyclegan.util.ssim_score", "print", "os.path.join", "os.path.join", "path.split", "unet_cyclegan_main.UnetCycleGAN.eval_val_logger.log_specific_batch", "unet_cyclegan_main.UnetCycleGAN.eval_test_logger.log_specific_batch", "path.split", "unet_cyclegan_main.UnetCycleGAN.eval_val_logger.log_specific_batch", "unet_cyclegan_main.UnetCycleGAN.eval_test_logger.log_specific_batch", "os.walk", "os.walk", "debiasmedimg.cyclegan.util.get_sample_from_path", "debiasmedimg.cyclegan.util.get_sample_from_path", "len", "debiasmedimg.cyclegan.util.get_sample_from_path", "debiasmedimg.cyclegan.util.get_sample_from_path", "len"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.get_fid", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.transform_images", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.transform_images", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.reset_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.reset_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.get_fid", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.get_fid", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_to_ex", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.get_batch_mean", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.save_to_csv", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_to_ex", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.get_batch_mean", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.save_to_csv", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_evaluation", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_evaluation", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.ssim_score", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_evaluation", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_evaluation", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.ssim_score", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.resnet_block": [[11, 34], ["tensorflow.keras.initializers.RandomNormal", "generator.pad", "generator.pad", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow_addons.layers.InstanceNormalization", "tensorflow_addons.layers.InstanceNormalization"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.pad", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.pad"], ["\n", "# Weight initialization", "\n", "init", "=", "RandomNormal", "(", "stddev", "=", "0.02", ")", "\n", "# First convolutional layer", "\n", "g", "=", "Conv2D", "(", "n_filters", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "input_layer", ")", "\n", "g", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "g", ")", "\n", "g", "=", "Activation", "(", "'relu'", ")", "(", "g", ")", "\n", "# Second convolutional layer", "\n", "g", "=", "Conv2D", "(", "n_filters", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "g", ")", "\n", "g", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "g", ")", "\n", "# Add up the original input and the convolved output", "\n", "g", "=", "Add", "(", ")", "(", "[", "g", ",", "input_layer", "]", ")", "\n", "return", "g", "\n", "\n", "\n", "", "def", "define_unet_generator", "(", "image_shape", ",", "n_resnet", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.define_unet_generator": [[29, 83], ["tensorflow.keras.initializers.RandomNormal", "tensorflow.keras.Input", "generator.resnet_block", "range", "tensorflow.keras.layers.concatenate", "tensorflow.keras.layers.concatenate", "tensorflow.keras.layers.concatenate", "tensorflow.keras.Model", "tensorflow.keras.Model.summary", "tensorflow.keras.layers.Conv2D", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.Activation", "generator.resnet_block", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.Activation"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.resnet_block", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.resnet_block"], ["", "def", "define_unet_generator", "(", "image_shape", ",", "n_resnet", ")", ":", "\n", "    ", "\"\"\"\n    Creates the generator with skip-connections between the encoder and decoder\n    :param image_shape: Shape of the input image\n    :param n_resnet: Number of resnet blocks\n    :return: generator model\n    \"\"\"", "\n", "# Weight initialization", "\n", "init", "=", "RandomNormal", "(", "stddev", "=", "0.02", ")", "\n", "# Image input", "\n", "in_image", "=", "Input", "(", "shape", "=", "image_shape", ")", "\n", "# Encoder", "\n", "# c7s1-64", "\n", "e1", "=", "Conv2D", "(", "64", ",", "(", "7", ",", "7", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "in_image", ")", "\n", "e1", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "e1", ")", "\n", "e1", "=", "Activation", "(", "'relu'", ")", "(", "e1", ")", "\n", "# d128", "\n", "e2", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "e1", ")", "\n", "e2", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "e2", ")", "\n", "e2", "=", "Activation", "(", "'relu'", ")", "(", "e2", ")", "\n", "# d256", "\n", "e3", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "e2", ")", "\n", "e3", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "e3", ")", "\n", "e3", "=", "Activation", "(", "'relu'", ")", "(", "e3", ")", "\n", "# R256", "\n", "# Transformer", "\n", "g", "=", "resnet_block", "(", "256", ",", "e3", ")", "\n", "for", "_", "in", "range", "(", "n_resnet", "-", "1", ")", ":", "\n", "        ", "g", "=", "resnet_block", "(", "256", ",", "g", ")", "\n", "# Decoder", "\n", "# u128", "\n", "# Original 256 + 256 channels from skip-connection", "\n", "", "u1", "=", "concatenate", "(", "[", "g", ",", "e3", "]", ",", "axis", "=", "3", ")", "\n", "d1", "=", "Conv2DTranspose", "(", "128", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "u1", ")", "\n", "d1", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "d1", ")", "\n", "d1", "=", "Activation", "(", "'relu'", ")", "(", "d1", ")", "\n", "# u64", "\n", "# Original 128 + 128 channels from skip-connection", "\n", "u2", "=", "concatenate", "(", "[", "d1", ",", "e2", "]", ",", "axis", "=", "3", ")", "\n", "d2", "=", "Conv2DTranspose", "(", "64", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "u2", ")", "\n", "d2", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "d2", ")", "\n", "d2", "=", "Activation", "(", "'relu'", ")", "(", "d2", ")", "\n", "# c7s1-3", "\n", "# Original 64 + 64 channels from skip-connection", "\n", "u3", "=", "concatenate", "(", "[", "d2", ",", "e1", "]", ",", "axis", "=", "3", ")", "\n", "# Final convolution layer to reduce channels to 3", "\n", "d3", "=", "Conv2D", "(", "3", ",", "(", "7", ",", "7", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "u3", ")", "\n", "d3", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "d3", ")", "\n", "# Want the output to be between -1 and 1", "\n", "out_image", "=", "Activation", "(", "'tanh'", ")", "(", "d3", ")", "\n", "# Define model", "\n", "model", "=", "Model", "(", "in_image", ",", "out_image", ")", "\n", "model", ".", "summary", "(", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.discriminator.define_discriminator": [[13, 50], ["tensorflow.keras.initializers.RandomNormal", "tensorflow.keras.Input", "range", "generator.pad", "int", "tensorflow.reshape", "tensorflow.keras.Model", "tensorflow.keras.Model.summary", "generator.pad", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.LeakyReLU"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.pad", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.pad"], ["# Weight initialization", "\n", "init", "=", "RandomNormal", "(", "stddev", "=", "0.02", ")", "\n", "# Source image input", "\n", "in_image", "=", "Input", "(", "shape", "=", "image_shape", ")", "\n", "# C64", "\n", "d", "=", "Conv2D", "(", "64", ",", "(", "4", ",", "4", ")", ",", "input_shape", "=", "image_shape", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "\n", "kernel_initializer", "=", "init", ")", "(", "in_image", ")", "\n", "d", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "d", ")", "\n", "# C128", "\n", "d", "=", "Conv2D", "(", "128", ",", "(", "4", ",", "4", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "d", ")", "\n", "# InstanceNormalization = normalized the values on each feature map,", "\n", "# the intent is to remove image-specific contrast information from the image", "\n", "d", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "d", ")", "\n", "d", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "d", ")", "\n", "# C256", "\n", "d", "=", "Conv2D", "(", "256", ",", "(", "4", ",", "4", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "d", ")", "\n", "d", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "d", ")", "\n", "d", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "d", ")", "\n", "# C512", "\n", "d", "=", "Conv2D", "(", "512", ",", "(", "4", ",", "4", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "d", ")", "\n", "d", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "d", ")", "\n", "d", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "d", ")", "\n", "# Second last output layer", "\n", "d", "=", "Conv2D", "(", "512", ",", "(", "4", ",", "4", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "d", ")", "\n", "d", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "d", ")", "\n", "d", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "d", ")", "\n", "# Patch output", "\n", "patch_out", "=", "Conv2D", "(", "1", ",", "(", "4", ",", "4", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "d", ")", "\n", "# Define model", "\n", "model", "=", "Model", "(", "in_image", ",", "patch_out", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filenames": [[11, 33], ["pandas.read_csv", "len", "pd.read_csv.iterrows", "numpy.array", "range", "pandas.isna", "numpy.array", "pandas.isna", "domains.index", "files[].extend"], "function", ["None"], ["def", "get_filenames", "(", "csv_file", ",", "domains", ",", "merge", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Extract the filenames of all images in the folders for all domains\n    :param csv_file: Path to the csv files containing info about the images\n    :param domains: List of domains names\n    :param merge: Whether to return one array of all images\n    :return: filenames\n    \"\"\"", "\n", "csv_df", "=", "pd", ".", "read_csv", "(", "csv_file", ")", "\n", "number_of_domains", "=", "len", "(", "domains", ")", "\n", "files", "=", "[", "[", "]", "for", "_", "in", "range", "(", "0", ",", "number_of_domains", ")", "]", "\n", "for", "index", ",", "row", "in", "csv_df", ".", "iterrows", "(", ")", ":", "\n", "# Only use images without issues", "\n", "        ", "if", "pd", ".", "isna", "(", "row", "[", "\"issues\"", "]", ")", "and", "not", "pd", ".", "isna", "(", "row", "[", "\"img_path\"", "]", ")", ":", "\n", "# Find the id of the corresponding domain the current sample belongs to", "\n", "            ", "if", "row", "[", "\"origin\"", "]", "in", "domains", ":", "\n", "                ", "domain_id", "=", "domains", ".", "index", "(", "row", "[", "\"origin\"", "]", ")", "\n", "files", "[", "domain_id", "]", ".", "extend", "(", "[", "settings", ".", "DB_DIR", "+", "row", "[", "\"img_path\"", "]", "]", ")", "\n", "", "", "", "if", "merge", ":", "\n", "        ", "files", "=", "[", "item", "for", "sublist", "in", "files", "for", "item", "in", "sublist", "]", "\n", "", "files", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "xi", ")", "for", "xi", "in", "files", "]", ")", "\n", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filtered_filenames": [[34, 50], ["pandas.read_csv", "pd.read_csv.iterrows", "numpy.array", "pandas.isna", "np.array.extend", "numpy.array"], "function", ["None"], ["", "def", "get_filtered_filenames", "(", "csv_file", ",", "domain", ")", ":", "\n", "    ", "\"\"\"\n    Extract the filenames of all images in the folders for all domains\n    :param csv_file: Path to the csv files containing info about the images\n    :param domain: Domain to return paths from\n    :return: filenames\n    \"\"\"", "\n", "csv_df", "=", "pd", ".", "read_csv", "(", "csv_file", ")", "\n", "files", "=", "[", "]", "\n", "for", "index", ",", "row", "in", "csv_df", ".", "iterrows", "(", ")", ":", "\n", "# Only use images without issues", "\n", "        ", "if", "pd", ".", "isna", "(", "row", "[", "\"issues\"", "]", ")", "and", "row", "[", "\"origin\"", "]", "==", "domain", ":", "\n", "# Find the id of the corresponding domain the current sample belongs to", "\n", "            ", "files", ".", "extend", "(", "[", "settings", ".", "DB_DIR", "+", "row", "[", "\"img_path\"", "]", "]", ")", "\n", "", "", "files", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "xi", ")", "for", "xi", "in", "files", "]", ")", "\n", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions._downscale_img": [[51, 69], ["cv2.resize", "cv2.resize.copy", "range", "cv2.resize.shape[].bit_length", "cv2.pyrDown"], "function", ["None"], ["", "def", "_downscale_img", "(", "img", ")", ":", "\n", "    ", "\"\"\"\n    Function for downsampling to 256x256 pixels\n    :param img: Image to downscale using a Gaussian pyramid\n    :return: Downsampled images\n    \"\"\"", "\n", "assert", "img", ".", "shape", "[", "0", "]", "==", "img", ".", "shape", "[", "1", "]", ",", "\"Images have to be squares\"", "\n", "# Find largest power of two that is less than the image size", "\n", "expo", "=", "img", ".", "shape", "[", "0", "]", ".", "bit_length", "(", ")", "-", "1", "\n", "# Make sure image isn't smaller than 256x256 pixels", "\n", "if", "expo", "<", "8", ":", "\n", "        ", "return", "img", "\n", "", "img", "=", "cv2", ".", "resize", "(", "img", ",", "dsize", "=", "(", "2", "**", "expo", ",", "2", "**", "expo", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "g", "=", "img", ".", "copy", "(", ")", "\n", "# Resize image to 256x256 (=2**8)", "\n", "for", "i", "in", "range", "(", "expo", "-", "8", ")", ":", "\n", "        ", "g", "=", "cv2", ".", "pyrDown", "(", "g", ")", "\n", "", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.minimal_pad": [[71, 99], ["copy.deepcopy", "int", "int", "numpy.pad", "int", "int", "int", "numpy.pad", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.pad", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.pad"], ["", "def", "minimal_pad", "(", "img", ",", "color", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Add minimal padding to the image to make sure the image is square-shaped\n    :param img: Image to pad\n    :param color: Color to pad in (default is white)\n    \"\"\"", "\n", "img_padded", "=", "deepcopy", "(", "img", ")", "\n", "if", "img", ".", "shape", "[", "0", "]", "<", "img", ".", "shape", "[", "1", "]", ":", "\n", "# Pad height", "\n", "        ", "padding_height", "=", "img", ".", "shape", "[", "1", "]", "-", "img", ".", "shape", "[", "0", "]", "\n", "padding_height_1", "=", "int", "(", "padding_height", "/", "2", ")", "\n", "padding_height_2", "=", "int", "(", "padding_height", "/", "2", ")", "\n", "if", "not", "padding_height", "%", "2", "==", "0", ":", "\n", "            ", "padding_height_1", "=", "int", "(", "padding_height", "/", "2", ")", "\n", "padding_height_2", "=", "int", "(", "padding_height", "/", "2", ")", "+", "1", "\n", "", "img_padded", "=", "np", ".", "pad", "(", "img", ",", "pad_width", "=", "(", "(", "padding_height_1", ",", "padding_height_2", ")", ",", "(", "0", ",", "0", ")", ",", "\n", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "(", "color", ",", ")", ")", "\n", "", "elif", "img", ".", "shape", "[", "1", "]", "<", "img", ".", "shape", "[", "0", "]", ":", "\n", "# Pad width", "\n", "        ", "padding_width", "=", "img", ".", "shape", "[", "0", "]", "-", "img", ".", "shape", "[", "1", "]", "\n", "padding_width_1", "=", "int", "(", "padding_width", "/", "2", ")", "\n", "padding_width_2", "=", "int", "(", "padding_width", "/", "2", ")", "\n", "if", "not", "padding_width", "%", "2", "==", "0", ":", "\n", "            ", "padding_width_1", "=", "int", "(", "padding_width", "/", "2", ")", "\n", "padding_width_2", "=", "int", "(", "padding_width", "/", "2", "+", "1", ")", "\n", "", "img_padded", "=", "np", ".", "pad", "(", "img", ",", "pad_width", "=", "(", "(", "0", ",", "0", ")", ",", "(", "padding_width_1", ",", "padding_width_2", ")", ",", "\n", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "(", "color", ",", ")", ")", "\n", "", "return", "img_padded", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path": [[101, 124], ["matplotlib.image.imread", "dataset_interactions._downscale_img", "dataset_interactions.normalize", "dataset_interactions.normalize", "tensorflow.expand_dims", "tensorflow.expand_dims", "copy.deepcopy", "copy.deepcopy", "dataset_interactions.minimal_pad"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions._downscale_img", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.minimal_pad"], ["", "def", "get_sample_from_path", "(", "path", ",", "color", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Get an image from the given path in original size and downscaled\n    :param path: location of the image\n    :param color: Color to use for padding image to a square shape (if necessary)\n    :return: normalized image\n    \"\"\"", "\n", "# Read in image and downscale it", "\n", "x", "=", "image", ".", "imread", "(", "path", ")", "\n", "if", "x", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "# If Image is read in as RGBA for some reason -> Can cut it off", "\n", "        ", "x", "=", "x", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "", "original_size", "=", "[", "deepcopy", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "deepcopy", "(", "x", ".", "shape", "[", "1", "]", ")", "]", "\n", "if", "not", "x", ".", "shape", "[", "0", "]", "==", "x", ".", "shape", "[", "1", "]", ":", "\n", "        ", "x", "=", "minimal_pad", "(", "x", ",", "color", "=", "color", ")", "\n", "", "x_small", "=", "_downscale_img", "(", "x", ")", "\n", "# Normalize original size and small size", "\n", "x", "=", "normalize", "(", "x", ")", "\n", "x_small", "=", "normalize", "(", "x_small", ")", "\n", "# Add dimension to make samples out of individual images", "\n", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "axis", "=", "0", ")", "\n", "x_small", "=", "tf", ".", "expand_dims", "(", "x_small", ",", "axis", "=", "0", ")", "\n", "return", "x", ",", "x_small", ",", "original_size", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples": [[126, 143], ["numpy.array", "matplotlib.image.imread", "np.array.append", "dataset_interactions.minimal_pad", "dataset_interactions.normalize_for_evaluation", "numpy.array"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.minimal_pad", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_evaluation"], ["", "def", "get_all_samples", "(", "file_list", ")", ":", "\n", "    ", "\"\"\"\n    Read in all samples from a path for evaluation\n    :param file_list: List of files to load\n    :return: Np array of images\n    \"\"\"", "\n", "samples", "=", "[", "]", "\n", "for", "file", "in", "file_list", ":", "\n", "        ", "img", "=", "image", ".", "imread", "(", "file", ")", "\n", "if", "img", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "# Image is read in as RGBA for some reason, but all entries in A are 1 -> Can cut it off", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "", "if", "not", "img", ".", "shape", "[", "0", "]", "==", "img", ".", "shape", "[", "1", "]", ":", "\n", "            ", "img", "=", "minimal_pad", "(", "img", ")", "\n", "", "samples", ".", "append", "(", "normalize_for_evaluation", "(", "img", ")", ")", "\n", "", "samples", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "xi", ")", "for", "xi", "in", "samples", "]", ")", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_domain_name": [[145, 158], ["None"], "function", ["None"], ["", "def", "get_domain_name", "(", "path", ",", "domains", ")", ":", "\n", "    ", "\"\"\"\n    Given a path, extract the domain name\n    :param path: Path to extract from\n    :param domains: Possible domains the image could belong to\n    :return:\n    \"\"\"", "\n", "domain_name", "=", "None", "\n", "for", "domain", "in", "domains", ":", "\n", "        ", "if", "domain", "in", "path", ":", "\n", "            ", "domain_name", "=", "domain", "\n", "", "", "assert", "domain_name", "is", "not", "None", "\n", "return", "domain_name", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_real_samples": [[160, 209], ["numpy.arange", "enumerate", "numpy.array", "matplotlib.image.imread", "dataset_interactions._downscale_img", "np.array.append", "dataset_interactions.minimal_pad", "dataset_interactions.normalize", "dataset_interactions.get_domain_name", "domain_names.append", "numpy.array", "enumerate", "domain_names.append"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions._downscale_img", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.minimal_pad", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_domain_name"], ["", "def", "get_real_samples", "(", "file_names", ",", "n_samples", ",", "batch_number", ",", "domains", ",", "return_domain_names", "=", "False", ",", "all_files", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Select a batch of random samples, returns images and their domain names\n    :param file_names: Dataset to sample from\n    :param n_samples: Number of samples\n    :param batch_number: Current batch\n    :param domains: List of domain names the samples could belong to\n    :param return_domain_names: Whether to return the names of the domains of the images\n    :param all_files: all files the samples are cut in a list of arrays with the order of the arrays reflecting the domains\n    :return: Images and targets\n    \"\"\"", "\n", "# choose n instances", "\n", "# Images are shuffled randomly at the beginning of a new epoch", "\n", "ix", "=", "np", ".", "arange", "(", "batch_number", "*", "n_samples", ",", "(", "batch_number", "+", "1", ")", "*", "n_samples", ")", "\n", "# ix = np.random.randint(0, len(file_names), n_samples)", "\n", "# retrieve selected images", "\n", "x", "=", "file_names", "[", "ix", "]", "\n", "# Replace paths with images", "\n", "samples", "=", "[", "]", "\n", "domain_names", "=", "[", "]", "\n", "for", "index", ",", "path", "in", "enumerate", "(", "x", ")", ":", "\n", "# x[index] = _random_jitter(image)", "\n", "# Normalize images", "\n", "        ", "img", "=", "image", ".", "imread", "(", "path", ")", "\n", "if", "img", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "# Image is read in as RGBA for some reason, but all entries in A are 1 -> Can cut it off", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "", "if", "not", "img", ".", "shape", "[", "0", "]", "==", "img", ".", "shape", "[", "1", "]", ":", "\n", "            ", "img", "=", "minimal_pad", "(", "img", ")", "\n", "", "img", "=", "_downscale_img", "(", "img", ")", "\n", "samples", ".", "append", "(", "normalize", "(", "img", ")", ")", "\n", "if", "return_domain_names", "and", "all_files", "is", "None", ":", "\n", "# get domain names based on path (domain has to be included in path)", "\n", "            ", "domain_name", "=", "get_domain_name", "(", "path", ",", "domains", ")", "\n", "domain_names", ".", "append", "(", "domain_name", ")", "\n", "", "elif", "return_domain_names", ":", "\n", "            ", "domain_idx", "=", "-", "1", "\n", "for", "idx", ",", "domain", "in", "enumerate", "(", "all_files", ")", ":", "\n", "                ", "if", "path", "in", "domain", ":", "\n", "                    ", "domain_idx", "=", "idx", "\n", "", "", "assert", "not", "domain_idx", "==", "-", "1", "\n", "domain_name", "=", "domains", "[", "domain_idx", "]", "\n", "domain_names", ".", "append", "(", "domain_name", ")", "\n", "", "", "samples", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "xi", ")", "for", "xi", "in", "samples", "]", ")", "\n", "if", "return_domain_names", ":", "\n", "# Return images and their domain names", "\n", "        ", "return", "samples", ",", "domain_names", "\n", "# Return images", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.create_patches": [[211, 229], ["numpy.arange", "numpy.arange", "numpy.zeros", "numpy.array"], "function", ["None"], ["", "def", "create_patches", "(", "image_to_cut", ",", "patch_size", "=", "16", ")", ":", "\n", "    ", "\"\"\"\n    This function takes an image and cuts it into a variable number of non-overlapping patches\n    :param image_to_cut: a numpy array of an image\n    :param patch_size: the size that the patches should have in the end\n    Returns: an array of patches [n_patches x patch_size x patch_size x 3] and the number of patches\n    \"\"\"", "\n", "first_indices_horizontal", "=", "np", ".", "arange", "(", "0", ",", "image_to_cut", ".", "shape", "[", "0", "]", "-", "patch_size", "+", "1", ",", "patch_size", ")", "\n", "first_indices_vertical", "=", "np", ".", "arange", "(", "0", ",", "image_to_cut", ".", "shape", "[", "1", "]", "-", "patch_size", "+", "1", ",", "patch_size", ")", "\n", "# Calculate the number of patches", "\n", "number_resulting_patches", "=", "first_indices_horizontal", ".", "size", "*", "first_indices_vertical", ".", "size", "\n", "patches", "=", "np", ".", "zeros", "(", "(", "number_resulting_patches", ",", "patch_size", ",", "patch_size", ",", "image_to_cut", ".", "shape", "[", "2", "]", ")", ")", "\n", "patch_number", "=", "0", "\n", "for", "idx_ver", "in", "first_indices_vertical", ":", "\n", "        ", "for", "idx_hor", "in", "first_indices_horizontal", ":", "\n", "            ", "patches", "[", "patch_number", ",", "...", "]", "=", "np", ".", "array", "(", "image_to_cut", "[", "idx_ver", ":", "idx_ver", "+", "patch_size", ",", "idx_hor", ":", "idx_hor", "+", "patch_size", ",", ":", "]", ")", "\n", "patch_number", "+=", "1", "\n", "", "", "return", "patches", ",", "patch_number", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_previous_range": [[231, 247], ["numpy.amax", "numpy.amin"], "function", ["None"], ["", "def", "get_previous_range", "(", "img", ")", ":", "\n", "    ", "\"\"\"\n    Establish which range the image belongs to\n    :param img: Image to test\n    :return: Minimum and maximum of the range the image probably belongs to\n    \"\"\"", "\n", "if", "np", ".", "amax", "(", "img", ")", ">", "1.0", ":", "\n", "        ", "old_min", "=", "0", "\n", "old_max", "=", "255", "\n", "", "elif", "np", ".", "amin", "(", "img", ")", "<", "0.0", ":", "\n", "        ", "old_min", "=", "-", "1.0", "\n", "old_max", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "old_min", "=", "0.0", "\n", "old_max", "=", "1.0", "\n", "", "return", "old_min", ",", "old_max", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize": [[249, 264], ["dataset_interactions.get_previous_range", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_previous_range"], ["", "def", "normalize", "(", "img", ")", ":", "\n", "    ", "\"\"\"\n    Normalize an image to range [-1,1]\n    :param img: Image to normalize\n    :return: Normalized image\n    \"\"\"", "\n", "old_min", ",", "old_max", "=", "get_previous_range", "(", "img", ")", "\n", "# NewValue = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin", "\n", "# NewMin = -1, NewMax = 1, NewRange = 1 - (-1)", "\n", "new_min", "=", "-", "1.0", "\n", "new_max", "=", "1.0", "\n", "img", "=", "(", "img", "-", "old_min", ")", "*", "(", "new_max", "-", "new_min", ")", "/", "(", "old_max", "-", "old_min", ")", "+", "new_min", "\n", "# Conv2D layers cast from float64 to float32, so make sure we have the correct type here", "\n", "img", "=", "tf", ".", "cast", "(", "img", ",", "tf", ".", "float32", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_display": [[266, 279], ["dataset_interactions.get_previous_range"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_previous_range"], ["", "def", "normalize_for_display", "(", "img", ")", ":", "\n", "    ", "\"\"\"\n    Normalize an image to range [0,1]\n    :param img: Image to normalize\n    :return: Normalized image\n    \"\"\"", "\n", "old_min", ",", "old_max", "=", "get_previous_range", "(", "img", ")", "\n", "# NewValue = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin", "\n", "# NewMin = 0, NewMax = 1, NewRange = 1 - 0", "\n", "new_min", "=", "0.0", "\n", "new_max", "=", "1.0", "\n", "img", "=", "(", "img", "-", "old_min", ")", "*", "(", "new_max", "-", "new_min", ")", "/", "(", "old_max", "-", "old_min", ")", "+", "new_min", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_evaluation": [[281, 295], ["dataset_interactions.get_previous_range", "tensorflow.cast", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_previous_range"], ["", "def", "normalize_for_evaluation", "(", "img", ")", ":", "\n", "    ", "\"\"\"\n    Normalize an image to range [0,255]\n    :param img: Image to normalize\n    :return: Normalized image\n    \"\"\"", "\n", "old_min", ",", "old_max", "=", "get_previous_range", "(", "img", ")", "\n", "# NewValue = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin", "\n", "# NewMin = 0, NewMax = 255, NewRange = 1 - 0", "\n", "new_min", "=", "0", "\n", "new_max", "=", "255", "\n", "img", "=", "(", "img", "-", "old_min", ")", "*", "(", "new_max", "-", "new_min", ")", "/", "(", "old_max", "-", "old_min", ")", "+", "new_min", "\n", "img", "=", "tf", ".", "cast", "(", "img", ",", "tf", ".", "int32", ")", "\n", "return", "np", ".", "asarray", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.save_to_csv": [[297, 334], ["pandas.DataFrame.from_dict", "pandas.DataFrame.from_dict", "os.path.isfile", "pd.DataFrame.from_dict.to_csv", "pd.DataFrame.from_dict.to_csv", "os.path.isfile", "pd.DataFrame.from_dict.to_csv", "pd.DataFrame.from_dict.to_csv"], "function", ["None"], ["", "def", "save_to_csv", "(", "run_id", ",", "epoch", ",", "a_name", ",", "b_name", ",", "means", ",", "approach", ",", "dataset", ",", "validate", "=", "True", ",", "only_ab", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Save the evaluation results to a csv file\n    :param run_id: Run id of the evaluated run\n    :param epoch: Epoch that has been evaluated\n    :param a_name: Name of domain A\n    :param b_name: Name of domain b\n    :param means: List of evaluation results\n    :param approach: Which approach was used for transformation\n    :param dataset: Name of the dataset that was bias transferred\n    :param validate: Whether we are currently validating or testing\n    :param only_ab: Whether we only evaluated a transformation from A to B, not the other way around\n    \"\"\"", "\n", "if", "only_ab", ":", "\n", "        ", "val_dict", "=", "[", "{", "\"run_id\"", ":", "run_id", ",", "\"epoch\"", ":", "epoch", ",", "\"a\"", ":", "a_name", ",", "\"b\"", ":", "b_name", ",", "\"ssim_inout_a\"", ":", "means", "[", "0", "]", ",", "\n", "\"fid_original\"", ":", "means", "[", "1", "]", ",", "\"fid_b\"", ":", "means", "[", "2", "]", "}", "]", "\n", "val_df", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "val_dict", ")", "\n", "", "else", ":", "\n", "        ", "val_dict", "=", "[", "{", "\"run_id\"", ":", "run_id", ",", "\"epoch\"", ":", "epoch", ",", "\"a\"", ":", "a_name", ",", "\"b\"", ":", "b_name", ",", "\"ssim_inout_a\"", ":", "means", "[", "0", "]", ",", "\n", "\"ssim_inout_b\"", ":", "means", "[", "1", "]", ",", "\"fid_original\"", ":", "means", "[", "2", "]", ",", "\"fid_a\"", ":", "means", "[", "3", "]", ",", "\"fid_b\"", ":", "means", "[", "4", "]", "}", "]", "\n", "val_df", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "val_dict", ")", "\n", "\n", "", "if", "validate", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "settings", ".", "EVAL_DIR", "+", "\"/\"", "+", "dataset", "+", "\"_validation_\"", "+", "approach", "+", "\".csv\"", ")", ":", "\n", "            ", "val_df", ".", "to_csv", "(", "settings", ".", "EVAL_DIR", "+", "\"/\"", "+", "dataset", "+", "\"_validation_\"", "+", "approach", "+", "\".csv\"", ",", "header", "=", "True", ",", "\n", "index", "=", "False", ",", "mode", "=", "'w'", ")", "\n", "", "else", ":", "\n", "            ", "val_df", ".", "to_csv", "(", "settings", ".", "EVAL_DIR", "+", "\"/\"", "+", "dataset", "+", "\"_validation_\"", "+", "approach", "+", "\".csv\"", ",", "header", "=", "False", ",", "\n", "index", "=", "False", ",", "mode", "=", "'a'", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "settings", ".", "EVAL_DIR", "+", "\"/\"", "+", "dataset", "+", "\"_test_\"", "+", "approach", "+", "\".csv\"", ")", ":", "\n", "            ", "val_df", ".", "to_csv", "(", "settings", ".", "EVAL_DIR", "+", "\"/\"", "+", "dataset", "+", "\"_test_\"", "+", "approach", "+", "\".csv\"", ",", "header", "=", "True", ",", "\n", "index", "=", "False", ",", "mode", "=", "'w'", ")", "\n", "", "else", ":", "\n", "            ", "val_df", ".", "to_csv", "(", "settings", ".", "EVAL_DIR", "+", "\"/\"", "+", "dataset", "+", "\"_test_\"", "+", "approach", "+", "\".csv\"", ",", "header", "=", "False", ",", "\n", "index", "=", "False", ",", "mode", "=", "'a'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.__init__": [[5, 32], ["names.copy", "enumerate", "logger.Logger.batch_values.append", "name.split", "enumerate", "enumerate"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ex", ",", "names", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Initiate a logger given the experiment, the losses/metrics to log and the training mode\n        :param ex: Experiment to log to\n        :param names: List of strings of loss/metric names\n        :param mode: Training/validating/testing right now\n        \"\"\"", "\n", "self", ".", "ex", "=", "ex", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "names", "=", "names", ".", "copy", "(", ")", "\n", "if", "mode", "==", "'validate'", ":", "\n", "            ", "for", "ix", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "                ", "first_part", ",", "last_part", "=", "name", ".", "split", "(", "'_loss'", ")", "\n", "new_name", "=", "first_part", "+", "'_val_loss'", "\n", "self", ".", "names", "[", "ix", "]", "=", "new_name", "\n", "", "", "elif", "mode", "==", "'evaluate_val'", ":", "\n", "            ", "for", "ix", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "                ", "new_name", "=", "name", "+", "'_val'", "\n", "self", ".", "names", "[", "ix", "]", "=", "new_name", "\n", "", "", "elif", "mode", "==", "'evaluate_test'", ":", "\n", "            ", "for", "ix", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "                ", "new_name", "=", "name", "+", "'_test'", "\n", "self", ".", "names", "[", "ix", "]", "=", "new_name", "\n", "# Initiate empty batch", "\n", "", "", "self", ".", "batch_values", "=", "[", "]", "\n", "for", "_", "in", "names", ":", "\n", "            ", "self", ".", "batch_values", ".", "append", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_batch": [[33, 41], ["enumerate", "logger.Logger.batch_values[].append"], "methods", ["None"], ["", "", "def", "log_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        Add losses/metrics of one batch to the log\n        :batch: Losses/metrics to save\n        :return: None\n        \"\"\"", "\n", "for", "ix", ",", "value", "in", "enumerate", "(", "batch", ")", ":", "\n", "            ", "self", ".", "batch_values", "[", "ix", "]", ".", "append", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch": [[42, 51], ["enumerate", "logger.Logger.batch_values[].append"], "methods", ["None"], ["", "", "def", "log_specific_batch", "(", "self", ",", "batch", ",", "ids", ")", ":", "\n", "        ", "\"\"\"\n        Add specific losses/metrics of one batch to the log\n        :param batch: Losses/metrics to save\n        :param ids: List of ids of the losses/metrics to save\n        :return: None\n        \"\"\"", "\n", "for", "counter", ",", "idx", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "self", ".", "batch_values", "[", "idx", "]", ".", "append", "(", "batch", "[", "counter", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.get_batch_mean": [[52, 61], ["enumerate", "mean_values.append", "numpy.mean"], "methods", ["None"], ["", "", "def", "get_batch_mean", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Receive the mean batch losses/metrics\n        :return: Mean losses/metrics as a list\n        \"\"\"", "\n", "mean_values", "=", "[", "]", "\n", "for", "ix", ",", "values", "in", "enumerate", "(", "self", ".", "batch_values", ")", ":", "\n", "            ", "mean_values", ".", "append", "(", "np", ".", "mean", "(", "values", ")", ")", "\n", "", "return", "mean_values", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.reset_batch": [[62, 69], ["enumerate"], "methods", ["None"], ["", "def", "reset_batch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Clear the losses/metrics of the batches\n        :return: None\n        \"\"\"", "\n", "for", "ix", ",", "values", "in", "enumerate", "(", "self", ".", "batch_values", ")", ":", "\n", "            ", "self", ".", "batch_values", "[", "ix", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_to_ex": [[70, 83], ["logger.Logger.get_batch_mean", "enumerate", "logger.Logger.ex.log_scalar", "logger.Logger.ex.log_scalar"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.get_batch_mean"], ["", "", "def", "log_to_ex", "(", "self", ",", "epoch", ",", "learning_rate", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Log the losses/metrics to sacred\n        :param epoch: Current epoch number\n        :param learning_rate: During training we also want to log the learning rate\n        :return: None\n        \"\"\"", "\n", "mean_batch", "=", "self", ".", "get_batch_mean", "(", ")", "\n", "# Add full summary to sacred", "\n", "for", "ix", ",", "mean", "in", "enumerate", "(", "mean_batch", ")", ":", "\n", "            ", "self", ".", "ex", ".", "log_scalar", "(", "self", ".", "names", "[", "ix", "]", ",", "mean", ",", "step", "=", "epoch", ")", "\n", "", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "ex", ".", "log_scalar", "(", "\"learning_rate\"", ",", "learning_rate", ",", "step", "=", "epoch", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.laplacian_scaling.downsampling": [[9, 32], ["numpy.array", "cv2.resize", "cv2.resize.copy", "range", "np.array.append", "cv2.resize.shape[].bit_length", "cv2.pyrDown"], "function", ["None"], ["def", "downsampling", "(", "originals", ")", ":", "\n", "    ", "\"\"\"\n    Function for downsampling multiple images to 256x256 pixels.\n    If an image is smaller than 256x256 the original is returned\n    :param originals: Images to downscale using a Gaussian pyramid\n    :return: Downsampled images\n    \"\"\"", "\n", "downsampled_originals", "=", "[", "]", "\n", "for", "img", "in", "originals", ":", "\n", "        ", "assert", "img", ".", "shape", "[", "0", "]", "==", "img", ".", "shape", "[", "1", "]", ",", "\"Images have to be squares\"", "\n", "# Find largest power of two that is less than the image size", "\n", "expo", "=", "img", ".", "shape", "[", "0", "]", ".", "bit_length", "(", ")", "-", "1", "\n", "# Make sure image isn't smaller than 256x256 pixels", "\n", "if", "expo", "<", "8", ":", "\n", "            ", "return", "img", "\n", "", "img", "=", "cv2", ".", "resize", "(", "img", ",", "dsize", "=", "(", "2", "**", "expo", ",", "2", "**", "expo", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "g", "=", "img", ".", "copy", "(", ")", "\n", "# Resize image to 256x256 (=2**8)", "\n", "for", "i", "in", "range", "(", "expo", "-", "8", ")", ":", "\n", "            ", "g", "=", "cv2", ".", "pyrDown", "(", "g", ")", "\n", "", "downsampled_originals", ".", "append", "(", "g", ")", "\n", "", "downsampled_originals", "=", "np", ".", "array", "(", "downsampled_originals", ")", "\n", "return", "downsampled_originals", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.laplacian_scaling.remove_minimal_pad": [[34, 61], ["int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "remove_minimal_pad", "(", "img", ",", "original_shape", ")", ":", "\n", "    ", "\"\"\"\n    Removes the padding that was added before downsampling an image\n    :param img: Image to remove the padding from\n    :param original_shape: Shape the image should have after removing the padding\n    \"\"\"", "\n", "if", "original_shape", "[", "0", "]", "<", "original_shape", "[", "1", "]", ":", "\n", "# Pad height", "\n", "        ", "cut_height", "=", "original_shape", "[", "1", "]", "-", "original_shape", "[", "0", "]", "\n", "cut_height_1", "=", "int", "(", "cut_height", "/", "2", ")", "\n", "cut_height_2", "=", "int", "(", "cut_height", "/", "2", ")", "\n", "if", "not", "cut_height", "%", "2", "==", "0", ":", "\n", "            ", "cut_height_1", "=", "int", "(", "cut_height", "/", "2", ")", "\n", "cut_height_2", "=", "int", "(", "cut_height", "/", "2", ")", "+", "1", "\n", "", "img_cut", "=", "img", "[", "cut_height_1", ":", "-", "cut_height_2", ",", ":", ",", ":", "]", "\n", "", "elif", "original_shape", "[", "1", "]", "<", "original_shape", "[", "0", "]", ":", "\n", "# Pad width", "\n", "        ", "cut_width", "=", "original_shape", "[", "0", "]", "-", "original_shape", "[", "1", "]", "\n", "cut_width_1", "=", "int", "(", "cut_width", "/", "2", ")", "\n", "cut_width_2", "=", "int", "(", "cut_width", "/", "2", ")", "\n", "if", "not", "cut_width", "%", "2", "==", "0", ":", "\n", "            ", "cut_width_1", "=", "int", "(", "cut_width", "/", "2", ")", "\n", "cut_width_2", "=", "int", "(", "cut_width", "/", "2", "+", "1", ")", "\n", "", "img_cut", "=", "img", "[", ":", ",", "cut_width_1", ":", "-", "cut_width_2", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "img_cut", "=", "img", "\n", "", "return", "img_cut", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.laplacian_scaling.laplacian_upsampling": [[63, 110], ["enumerate", "numpy.array", "cv2.resize", "cv2.resize.copy", "g_pyramid.append", "range", "range", "l_pyramid.append", "up_pyramid.append", "range", "up_pyramid[].copy", "numpy.clip", "max", "cv2.resize", "laplacian_scaling.remove_minimal_pad", "np.array.append", "cv2.resize.shape[].bit_length", "cv2.pyrDown.copy", "cv2.pyrDown", "g_pyramid.append", "cv2.subtract", "l_pyramid.append", "g_pyramid[].copy", "up.copy", "up_pyramid.append", "cv2.pyrDown.copy", "cv2.pyrUp", "cv2.subtract.copy", "cv2.pyrUp", "up.copy"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.laplacian_scaling.remove_minimal_pad"], ["", "def", "laplacian_upsampling", "(", "originals", ",", "inputs", ",", "original_shape", ")", ":", "\n", "    ", "\"\"\"\n    Perform upsampling of generated images as explained by Engin in the CycleDehaze paper (2018)\n    :param originals: Input the images were generated from (original size)\n    :param inputs: Generated images (small size)\n    :param original_shape: Shape of the original image\n    :return: Generated images (original size\n    \"\"\"", "\n", "upsampled_inputs", "=", "[", "]", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "originals", ")", ":", "\n", "        ", "assert", "img", ".", "shape", "[", "0", "]", "==", "img", ".", "shape", "[", "1", "]", ",", "\"Images have to be squares\"", "\n", "# Find largest power of two that is less than the image size", "\n", "expo", "=", "img", ".", "shape", "[", "0", "]", ".", "bit_length", "(", ")", "-", "1", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "dsize", "=", "(", "2", "**", "expo", ",", "2", "**", "expo", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "# Calculate laplacian pyramid", "\n", "# Downsample original", "\n", "g_pyramid", "=", "[", "]", "\n", "ga", "=", "img", ".", "copy", "(", ")", "\n", "g_pyramid", ".", "append", "(", "ga", ".", "copy", "(", ")", ")", "\n", "# Downsample image to 256x256 (=2**8)", "\n", "for", "i", "in", "range", "(", "expo", "-", "8", ")", ":", "\n", "            ", "ga", "=", "cv2", ".", "pyrDown", "(", "ga", ")", "\n", "g_pyramid", ".", "append", "(", "ga", ".", "copy", "(", ")", ")", "\n", "", "l_pyramid", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "expo", "-", "8", ")", ":", "\n", "            ", "lap", "=", "cv2", ".", "subtract", "(", "g_pyramid", "[", "i", "]", ",", "cv2", ".", "pyrUp", "(", "g_pyramid", "[", "i", "+", "1", "]", ")", ")", "\n", "l_pyramid", ".", "append", "(", "lap", ".", "copy", "(", ")", ")", "\n", "# Last element of g pyramid is last element of l pyramid", "\n", "", "l_pyramid", ".", "append", "(", "g_pyramid", "[", "-", "1", "]", ".", "copy", "(", ")", ")", "\n", "# Laplacian upsampling based on laplacian pyramid of the original", "\n", "up_pyramid", "=", "[", "]", "\n", "up", "=", "inputs", "[", "idx", "]", "\n", "up_pyramid", ".", "append", "(", "up", ".", "copy", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "expo", "-", "8", ")", ":", "\n", "            ", "up", "=", "cv2", ".", "pyrUp", "(", "up", ")", "+", "l_pyramid", "[", "expo", "-", "(", "9", "+", "i", ")", "]", "\n", "up_pyramid", ".", "append", "(", "up", ".", "copy", "(", ")", ")", "\n", "", "upsampled", "=", "up_pyramid", "[", "-", "1", "]", ".", "copy", "(", ")", "\n", "upsampled", "=", "np", ".", "clip", "(", "upsampled", ",", "-", "1", ",", "1", ")", "\n", "# Re-size image to have original size", "\n", "original_size", "=", "max", "(", "original_shape", "[", "0", "]", ",", "original_shape", "[", "1", "]", ")", "\n", "upsampled", "=", "cv2", ".", "resize", "(", "upsampled", ",", "dsize", "=", "(", "original_size", ",", "original_size", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "# Have to cut off padding:", "\n", "upsampled_cut", "=", "remove_minimal_pad", "(", "upsampled", ",", "original_shape", ")", "\n", "upsampled_inputs", ".", "append", "(", "upsampled_cut", ")", "\n", "", "upsampled_inputs", "=", "np", ".", "array", "(", "upsampled_inputs", ")", "\n", "return", "upsampled_inputs", "\n", "", ""]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.define_generator": [[70, 134], ["tensorflow.keras.initializers.RandomNormal", "tensorflow.keras.Input", "tensorflow.keras.Input", "generator.pad", "generator.pad", "generator.pad", "range", "generator.pad", "tensorflow.keras.Model", "tensorflow.keras.Model.summary", "ValueError", "tensorflow.keras.layers.RepeatVector", "tensorflow.keras.layers.Reshape", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.Conv2D", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.Activation", "generator.resnet_block", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2DTranspose", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.pad", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.pad", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.pad", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.pad", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.resnet_block"], ["d2", "=", "Activation", "(", "'relu'", ")", "(", "d2", ")", "\n", "# c7s1-3", "\n", "# Original 64 + 64 channels from skip-connection", "\n", "u3", "=", "concatenate", "(", "[", "d2", ",", "e1", "]", ",", "axis", "=", "3", ")", "\n", "# Final convolution layer to reduce channels to 3", "\n", "d3", "=", "Conv2D", "(", "3", ",", "(", "7", ",", "7", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "u3", ")", "\n", "d3", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "d3", ")", "\n", "# Want the output to be between -1 and 1", "\n", "out_image", "=", "Activation", "(", "'tanh'", ")", "(", "d3", ")", "\n", "# Define model", "\n", "model", "=", "Model", "(", "in_image", ",", "out_image", ")", "\n", "model", ".", "summary", "(", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.custom_learning_rates.HalfSteadyHalfLinearDecay.__init__": [[6, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "current_epoch", "=", "0", ",", "max_epochs", "=", "200", ",", "init_alpha", "=", "2e-4", ")", ":", "\n", "        ", "\"\"\"\n        Create a learning rate schedule\n        :param current_epoch: Current epoch of training when the learning rate is initiated\n        :param max_epochs: Maximum epochs the model will be trained\n        :param init_alpha: Initial learning rate\n        \"\"\"", "\n", "# Store the maximum number of epochs and the base learning rate", "\n", "self", ".", "maxEpochs", "=", "max_epochs", "\n", "self", ".", "initAlpha", "=", "init_alpha", "\n", "self", ".", "epoch", "=", "current_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.custom_learning_rates.HalfSteadyHalfLinearDecay.__call__": [[18, 33], ["float", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the current learning rate based on the epoch\n        :return: Current learning rate according to the schedule\n        \"\"\"", "\n", "if", "self", ".", "epoch", "<", "(", "self", ".", "maxEpochs", "/", "2", ")", ":", "\n", "            ", "self", ".", "epoch", "+=", "1", "\n", "return", "float", "(", "self", ".", "initAlpha", ")", "\n", "", "else", ":", "\n", "# Compute the new learning rate based on polynomial decay", "\n", "            ", "decay", "=", "(", "1", "-", "(", "(", "self", ".", "epoch", "-", "self", ".", "maxEpochs", "/", "2", ")", "/", "(", "self", ".", "maxEpochs", "/", "2", ")", ")", ")", "\n", "alpha", "=", "self", ".", "initAlpha", "*", "decay", "\n", "self", ".", "epoch", "+=", "1", "\n", "# Return the new learning rate", "\n", "return", "float", "(", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.custom_learning_rates.HalfSteadyHalfLinearDecay.plot": [[34, 55], ["numpy.arange", "range", "matplotlib.style.use", "matplotlib.figure", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "lrs.append", "custom_learning_rates.HalfSteadyHalfLinearDecay."], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.custom_learning_rates.HalfSteadyHalfLinearDecay.plot"], ["", "", "def", "plot", "(", "self", ",", "n_epochs", ",", "title", "=", "\"Learning Rate Schedule\"", ")", ":", "\n", "        ", "\"\"\"\n        Plot what the learning rate schedule looks like over a given number of epochs\n        :param n_epochs: Maximum number of epochs to train\n        :param title: Title of the image\n        :return: None\n        \"\"\"", "\n", "# Compute the set of learning rates for each corresponding", "\n", "# Epoch", "\n", "epochs", "=", "np", ".", "arange", "(", "0", ",", "n_epochs", ")", "\n", "lrs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_epochs", ")", ":", "\n", "            ", "lrs", ".", "append", "(", "self", "(", ")", ")", "\n", "# the learning rate schedule", "\n", "", "plt", ".", "style", ".", "use", "(", "\"ggplot\"", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "epochs", ",", "lrs", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "xlabel", "(", "\"Epoch #\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Learning Rate\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.ssim_score": [[9, 18], ["skimage.metrics.structural_similarity"], "function", ["None"], ["def", "ssim_score", "(", "input1", ",", "input2", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the mean structural similarity index (SSIM) between two images\n    :param input1: Image 1\n    :param input2: Image 2 (must have the same shape as Image 1)\n    :return: SSIM value\n    \"\"\"", "\n", "ssim_value", "=", "ssim", "(", "input1", ",", "input2", ",", "gaussian_weights", "=", "True", ",", "multichannel", "=", "True", ")", "\n", "return", "ssim_value", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.scale_images": [[20, 33], ["list", "numpy.asarray", "tensorflow.image.resize", "list.append", "tf.image.resize.numpy"], "function", ["None"], ["", "def", "scale_images", "(", "images", ",", "new_shape", ")", ":", "\n", "    ", "\"\"\"\n    Scale images to a specified shape\n    :param images: Images to re-scale\n    :param new_shape: Shape to scale the images to\n    \"\"\"", "\n", "images_list", "=", "list", "(", ")", "\n", "for", "image", "in", "images", ":", "\n", "# resize with nearest neighbor interpolation", "\n", "        ", "new_image", "=", "tf", ".", "image", ".", "resize", "(", "image", ",", "new_shape", ",", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "NEAREST_NEIGHBOR", ")", "\n", "# store", "\n", "images_list", ".", "append", "(", "new_image", ".", "numpy", "(", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "images_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.get_fid": [[35, 64], ["tensorflow.keras.applications.inception_v3.InceptionV3", "evaluation.scale_images", "evaluation.scale_images", "tensorflow.keras.applications.inception_v3.preprocess_input", "tensorflow.keras.applications.inception_v3.preprocess_input", "tensorflow.keras.applications.inception_v3.InceptionV3.predict", "tensorflow.keras.applications.inception_v3.InceptionV3.predict", "numpy.sum", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "model.predict.mean", "numpy.cov", "model.predict.mean", "numpy.cov", "sigma1.dot", "numpy.trace"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.scale_images", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.scale_images"], ["", "def", "get_fid", "(", "set_a", ",", "set_b", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the Fr\u00e9chet Inception Distance (Evaluation metric conceptualised for GANs)\n    :param set_a: Set of images of domain A\n    :param set_b: Set of images of domain B\n    \"\"\"", "\n", "# prepare the inception v3 model", "\n", "model", "=", "InceptionV3", "(", "include_top", "=", "False", ",", "pooling", "=", "'avg'", ",", "input_shape", "=", "(", "299", ",", "299", ",", "3", ")", ")", "\n", "# Prepare images", "\n", "images_a", "=", "scale_images", "(", "set_a", ",", "[", "299", ",", "299", "]", ")", "\n", "images_b", "=", "scale_images", "(", "set_b", ",", "[", "299", ",", "299", "]", ")", "\n", "images_a", "=", "preprocess_input", "(", "images_a", ")", "\n", "images_b", "=", "preprocess_input", "(", "images_b", ")", "\n", "# calculate activations", "\n", "act1", "=", "model", ".", "predict", "(", "images_a", ")", "\n", "act2", "=", "model", ".", "predict", "(", "images_b", ")", "\n", "# calculate mean and covariance statistics", "\n", "mu1", ",", "sigma1", "=", "act1", ".", "mean", "(", "axis", "=", "0", ")", ",", "np", ".", "cov", "(", "act1", ",", "rowvar", "=", "False", ")", "\n", "mu2", ",", "sigma2", "=", "act2", ".", "mean", "(", "axis", "=", "0", ")", ",", "np", ".", "cov", "(", "act2", ",", "rowvar", "=", "False", ")", "\n", "# calculate sum squared difference between means", "\n", "ssdiff", "=", "np", ".", "sum", "(", "(", "mu1", "-", "mu2", ")", "**", "2.0", ")", "\n", "# calculate sqrt of product between cov", "\n", "covmean", "=", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ")", "\n", "# check and correct imaginary numbers from sqrt", "\n", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "covmean", "=", "covmean", ".", "real", "\n", "# calculate score", "\n", "", "score", "=", "ssdiff", "+", "np", ".", "trace", "(", "sigma1", "+", "sigma2", "-", "2.0", "*", "covmean", ")", "\n", "return", "score", "\n", "", ""]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.discriminator.define_cyclegan_discriminator": [[52, 97], ["tensorflow.keras.initializers.RandomNormal", "tensorflow.keras.Input", "int", "tensorflow.reshape", "tensorflow.keras.Model", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.LeakyReLU", "tensorflow.keras.layers.Conv2D", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.LeakyReLU", "tensorflow.keras.layers.Conv2D", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.LeakyReLU", "tensorflow.keras.layers.Conv2D", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.LeakyReLU", "tensorflow.keras.layers.Conv2D", "tensorflow_addons.layers.InstanceNormalization", "tensorflow.keras.layers.LeakyReLU", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D"], "function", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.cut_out_files": [[4, 16], ["enumerate", "numpy.array", "files[].extend", "range", "numpy.array", "len"], "function", ["None"], ["from", "matplotlib", "import", "image", "\n", "import", "cv2", "\n", "import", "pandas", "as", "pd", "\n", "import", "debiasmedimg", ".", "settings", "as", "settings", "\n", "from", "copy", "import", "deepcopy", "\n", "\n", "\n", "def", "get_filenames", "(", "csv_file", ",", "domains", ",", "merge", "=", "False", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator._padding_arg": [[36, 49], ["ValueError"], "function", ["None"], ["# Weight initialization", "\n", "init", "=", "RandomNormal", "(", "stddev", "=", "0.02", ")", "\n", "# Image input", "\n", "in_image", "=", "Input", "(", "shape", "=", "image_shape", ")", "\n", "# Encoder", "\n", "# c7s1-64", "\n", "e1", "=", "Conv2D", "(", "64", ",", "(", "7", ",", "7", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "in_image", ")", "\n", "e1", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "e1", ")", "\n", "e1", "=", "Activation", "(", "'relu'", ")", "(", "e1", ")", "\n", "# d128", "\n", "e2", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "e1", ")", "\n", "e2", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "e2", ")", "\n", "e2", "=", "Activation", "(", "'relu'", ")", "(", "e2", ")", "\n", "# d256", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.pad": [[51, 68], ["len", "tensorflow.pad", "len", "tensorflow.pad", "ValueError", "generator._padding_arg", "generator._padding_arg"], "function", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.pad", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.pad", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator._padding_arg", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator._padding_arg"], ["e3", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "e3", ")", "\n", "e3", "=", "Activation", "(", "'relu'", ")", "(", "e3", ")", "\n", "# R256", "\n", "# Transformer", "\n", "g", "=", "resnet_block", "(", "256", ",", "e3", ")", "\n", "for", "_", "in", "range", "(", "n_resnet", "-", "1", ")", ":", "\n", "        ", "g", "=", "resnet_block", "(", "256", ",", "g", ")", "\n", "# Decoder", "\n", "# u128", "\n", "# Original 256 + 256 channels from skip-connection", "\n", "", "u1", "=", "concatenate", "(", "[", "g", ",", "e3", "]", ",", "axis", "=", "3", ")", "\n", "d1", "=", "Conv2DTranspose", "(", "128", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "u1", ")", "\n", "d1", "=", "InstanceNormalization", "(", "axis", "=", "-", "1", ")", "(", "d1", ")", "\n", "d1", "=", "Activation", "(", "'relu'", ")", "(", "d1", ")", "\n", "# u64", "\n", "# Original 128 + 128 channels from skip-connection", "\n", "u2", "=", "concatenate", "(", "[", "d1", ",", "e2", "]", ",", "axis", "=", "3", ")", "\n", "d2", "=", "Conv2DTranspose", "(", "64", ",", "(", "3", ",", "3", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "init", ")", "(", "u2", ")", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.__init__": [[21, 128], ["util.define_generator", "util.define_generator", "util.define_discriminator", "util.define_discriminator", "tensorflow.keras.optimizers.Adam", "tensorflow.keras.optimizers.Adam", "tensorflow.keras.optimizers.Adam", "tensorflow.keras.optimizers.Adam", "tensorflow.train.Checkpoint", "tensorflow.train.CheckpointManager", "util.Logger", "util.Logger", "util.Logger", "util.Logger", "float", "float", "datetime.datetime.now().strftime", "print", "cyclegan_main.CycleGAN.ckpt.restore().expect_partial", "print", "ckpt_to_restore.split", "int", "cyclegan_main.CycleGAN.assert_existing_objects_matched", "datetime.datetime.now", "cyclegan_main.CycleGAN.ckpt.restore", "id_and_checkpoint.split", "str"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.define_generator", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.define_generator", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.discriminator.define_discriminator", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.discriminator.define_discriminator"], ["# via: python cyclegan_main.py with 'attribute=x'", "\n", "\n", "\n", "@", "ex", ".", "automain", "\n", "def", "main", "(", "mongo_observer", ",", "dataset_name", ",", "transform_between", ",", "dataset_lowest_folder", ",", "load_epoch", ",", "mode", ",", "run_id", ",", "\n", "image_shape", ",", "epochs", ",", "base_lr", ",", "lambda_adversarial_loss", ",", "lambda_cycleloss", ",", "lambda_identityloss", ",", "\n", "lambda_discriminator_loss", ",", "n_batch", ",", "n_resnet", ",", "additional_losses", ",", "lambda_additional_losses", ")", ":", "\n", "# Prepare folders", "\n", "    ", "debiasmedimg", ".", "settings", ".", "DB_DIR", "=", "dataset_lowest_folder", "\n", "if", "load_epoch", "and", "not", "run_id", ":", "\n", "        ", "print", "(", "\"Please specify the run id!\"", ")", "\n", "", "print", "(", "\"Connected to mongo observer:\"", ",", "mongo_observer", ")", "\n", "\n", "# Get the number domain names from the training csv file to ensure that all wanted domains are included", "\n", "csv_df", "=", "pd", ".", "read_csv", "(", "dataset_lowest_folder", "+", "\"train.csv\"", ")", "\n", "domains", "=", "csv_df", "[", "\"origin\"", "]", ".", "dropna", "(", ")", ".", "unique", "(", ")", "\n", "assert", "all", "(", "x", "in", "domains", "for", "x", "in", "transform_between", ")", "and", "len", "(", "transform_between", ")", "==", "2", "\n", "\n", "# Create a cycleGAN setup", "\n", "cyclegan", "=", "CycleGAN", "(", "ex", ",", "transform_between", ",", "load_epoch", ",", "run_id", ",", "image_shape", ",", "epochs", ",", "base_lr", ",", "\n", "lambda_adversarial_loss", ",", "lambda_cycleloss", ",", "lambda_identityloss", ",", "lambda_discriminator_loss", ",", "\n", "n_batch", ",", "n_resnet", ",", "additional_losses", ",", "lambda_additional_losses", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "cyclegan", ".", "train", "(", "dataset_lowest_folder", "+", "\"train.csv\"", ",", "dataset_lowest_folder", "+", "\"validate.csv\"", ")", "\n", "", "elif", "mode", "==", "'validate'", ":", "\n", "# Evaluate on the validation data", "\n", "        ", "cyclegan", ".", "evaluate", "(", "dataset_lowest_folder", "+", "\"validate.csv\"", ",", "val_test", "=", "mode", ",", "dataset", "=", "dataset_name", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "# Evaluate on the test data", "\n", "        ", "cyclegan", ".", "evaluate", "(", "dataset_lowest_folder", "+", "\"test.csv\"", ",", "val_test", "=", "mode", ",", "\n", "dataset", "=", "dataset_name", ",", "evaluation_direction", "=", "\"AB\"", ")", "\n", "", "elif", "mode", "==", "'transform'", ":", "\n", "        ", "print", "(", "dataset_lowest_folder", ")", "\n", "# Generate transformed images if they don't exist already", "\n", "cyclegan", ".", "transform_images", "(", "dataset_lowest_folder", "+", "\"test.csv\"", ",", "domain_to_translate", "=", "cyclegan", ".", "domains", "[", "0", "]", ",", "\n", "domain_to_translate_to", "=", "cyclegan", ".", "domains", "[", "1", "]", ",", "val_test", "=", "None", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.update_lr": [[129, 147], ["cyclegan_main.CycleGAN.generator_AtoB_optimizer.lr.assign", "cyclegan_main.CycleGAN.generator_BtoA_optimizer.lr.assign", "cyclegan_main.CycleGAN.discriminator_A_optimizer.lr.assign", "cyclegan_main.CycleGAN.discriminator_B_optimizer.lr.assign", "print", "cyclegan_main.CycleGAN.generator_AtoB_optimizer.lr.numpy"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.generate_fake_samples": [[148, 168], ["numpy.zeros", "cyclegan_main.CycleGAN.generator_BtoA.predict", "cyclegan_main.CycleGAN.generator_AtoB.predict", "print", "exit", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.visualize_performance": [[169, 205], ["util.get_sample_from_path", "util.get_sample_from_path", "cyclegan_main.CycleGAN.generator_AtoB", "cyclegan_main.CycleGAN.generator_BtoA", "util.normalize_for_display", "util.normalize_for_display", "util.normalize_for_display", "util.normalize_for_display", "matplotlib.figure", "matplotlib.figure", "range", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "len", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.title", "matplotlib.title", "matplotlib.imshow", "matplotlib.imshow", "os.path.exists", "os.makedirs", "str"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_display", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_display", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_display", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_display"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.discriminator_loss": [[206, 219], ["tensorflow.keras.losses.BinaryCrossentropy", "tensorflow.keras.losses.BinaryCrossentropy.", "tensorflow.keras.losses.BinaryCrossentropy.", "tensorflow.ones_like", "tensorflow.zeros_like"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.calc_cycle_loss": [[220, 229], ["tensorflow.reduce_mean", "tensorflow.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.generator_loss": [[230, 240], ["tensorflow.keras.losses.BinaryCrossentropy", "tensorflow.keras.losses.BinaryCrossentropy.", "tensorflow.ones_like"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.identity_loss": [[241, 250], ["tensorflow.reduce_mean", "tensorflow.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.additional_identity_loss": [[251, 266], ["cyclegan_main.CycleGAN.additional_losses.index", "tensorflow.reduce_mean", "tensorflow.abs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.ms_ssim_loss": [[267, 282], ["cyclegan_main.CycleGAN.additional_losses.index", "tensorflow.image.ssim_multiscale", "tensorflow.image.ssim_multiscale"], "methods", ["None"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.ma_structure_loss": [[283, 326], ["zip", "cyclegan_main.CycleGAN.additional_losses.index", "util.create_patches", "util.create_patches", "zip", "numpy.std", "numpy.std", "numpy.array", "structure_loss.clip.clip.clip", "structure_losses.append", "numpy.sum", "numpy.empty", "range", "numpy.array.append", "numpy.array", "numpy.vstack", "numpy.cov", "numpy.sum", "img_patch[].flatten", "gen_img_patch[].flatten"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.create_patches", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.create_patches"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.train": [[327, 480], ["util.get_filenames", "print", "print", "util.get_filenames", "min", "int", "print", "cyclegan_main.CycleGAN.visualize_performance", "range", "len", "len", "len", "print", "numpy.random.shuffle", "numpy.random.shuffle", "cyclegan_main.CycleGAN.update_lr", "cyclegan_main.CycleGAN.training_logger.reset_batch", "time.time", "range", "print", "cyclegan_main.CycleGAN.training_logger.log_to_ex", "cyclegan_main.CycleGAN.visualize_performance", "cyclegan_main.CycleGAN.validate", "util.get_real_samples", "util.get_real_samples", "tape.gradient", "tape.gradient", "tape.gradient", "tape.gradient", "cyclegan_main.CycleGAN.generator_AtoB_optimizer.apply_gradients", "cyclegan_main.CycleGAN.generator_BtoA_optimizer.apply_gradients", "cyclegan_main.CycleGAN.discriminator_A_optimizer.apply_gradients", "cyclegan_main.CycleGAN.discriminator_B_optimizer.apply_gradients", "cyclegan_main.CycleGAN.training_logger.log_batch", "cyclegan_main.CycleGAN.ckpt_manager.save", "print", "tensorflow.GradientTape", "cyclegan_main.CycleGAN.generator_AtoB", "cyclegan_main.CycleGAN.generator_BtoA", "cyclegan_main.CycleGAN.generator_BtoA", "cyclegan_main.CycleGAN.generator_AtoB", "cyclegan_main.CycleGAN.discriminator_A", "cyclegan_main.CycleGAN.discriminator_B", "cyclegan_main.CycleGAN.discriminator_A", "cyclegan_main.CycleGAN.discriminator_B", "cyclegan_main.CycleGAN.generator_loss", "cyclegan_main.CycleGAN.generator_loss", "cyclegan_main.CycleGAN.generator_AtoB", "cyclegan_main.CycleGAN.generator_BtoA", "cyclegan_main.CycleGAN.identity_loss", "cyclegan_main.CycleGAN.identity_loss", "cyclegan_main.CycleGAN.discriminator_loss", "cyclegan_main.CycleGAN.discriminator_loss", "zip", "zip", "zip", "zip", "print", "cyclegan_main.CycleGAN.calc_cycle_loss", "cyclegan_main.CycleGAN.calc_cycle_loss", "cyclegan_main.CycleGAN.additional_identity_loss", "cyclegan_main.CycleGAN.additional_identity_loss", "cyclegan_main.CycleGAN.ms_ssim_loss", "cyclegan_main.CycleGAN.ma_structure_loss", "cyclegan_main.CycleGAN.ma_structure_loss", "time.time"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.visualize_performance", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.update_lr", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.reset_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_to_ex", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.visualize_performance", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.validate", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_real_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_real_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.generator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.generator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.discriminator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.discriminator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.additional_identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.additional_identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ms_ssim_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ma_structure_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ma_structure_loss"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.validate": [[481, 571], ["min", "int", "numpy.random.shuffle", "numpy.random.shuffle", "cyclegan_main.CycleGAN.validation_logger.reset_batch", "range", "cyclegan_main.CycleGAN.validation_logger.log_to_ex", "cyclegan_main.CycleGAN.validation_logger.get_batch_mean", "len", "len", "util.get_real_samples", "util.get_real_samples", "cyclegan_main.CycleGAN.generator_AtoB", "cyclegan_main.CycleGAN.generator_BtoA", "cyclegan_main.CycleGAN.generator_BtoA", "cyclegan_main.CycleGAN.generator_AtoB", "cyclegan_main.CycleGAN.discriminator_A", "cyclegan_main.CycleGAN.discriminator_B", "cyclegan_main.CycleGAN.discriminator_A", "cyclegan_main.CycleGAN.discriminator_B", "cyclegan_main.CycleGAN.generator_loss", "cyclegan_main.CycleGAN.generator_loss", "cyclegan_main.CycleGAN.generator_AtoB", "cyclegan_main.CycleGAN.generator_BtoA", "cyclegan_main.CycleGAN.identity_loss", "cyclegan_main.CycleGAN.identity_loss", "cyclegan_main.CycleGAN.discriminator_loss", "cyclegan_main.CycleGAN.discriminator_loss", "cyclegan_main.CycleGAN.validation_logger.log_batch", "cyclegan_main.CycleGAN.calc_cycle_loss", "cyclegan_main.CycleGAN.calc_cycle_loss", "cyclegan_main.CycleGAN.additional_identity_loss", "cyclegan_main.CycleGAN.additional_identity_loss", "cyclegan_main.CycleGAN.ms_ssim_loss", "cyclegan_main.CycleGAN.ma_structure_loss", "cyclegan_main.CycleGAN.ma_structure_loss"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.reset_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_to_ex", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.get_batch_mean", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_real_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_real_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.generator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.generator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.discriminator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.discriminator_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.additional_identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.additional_identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ms_ssim_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ma_structure_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ma_structure_loss"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.transform_images": [[572, 613], ["util.get_filtered_filenames", "enumerate", "filename.rsplit", "str", "path.split", "os.path.exists", "os.makedirs", "os.path.isfile", "print", "util.get_sample_from_path", "print", "util.laplacian_upsampling", "numpy.squeeze", "util.normalize_for_display", "cyclegan_main.CycleGAN.generator_AtoB", "os.path.isfile", "matplotlib.image.imsave", "matplotlib.image.imsave", "matplotlib.image.imsave", "matplotlib.image.imsave", "cyclegan_main.CycleGAN.generator_BtoA", "print", "exit", "sample_fullsize.numpy", "cyclegan_main.CycleGAN.numpy", "str"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filtered_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.laplacian_scaling.laplacian_upsampling", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_display"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.cyclegan.cyclegan_main.CycleGAN.evaluate": [[614, 723], ["util.get_filenames", "str", "util.get_all_samples", "util.get_all_samples", "util.get_fid", "print", "cyclegan_main.CycleGAN.transform_images", "cyclegan_main.CycleGAN.transform_images", "cyclegan_main.CycleGAN.eval_val_logger.reset_batch", "cyclegan_main.CycleGAN.eval_test_logger.reset_batch", "print", "enumerate", "print", "enumerate", "util.get_all_samples", "util.get_fid", "util.get_all_samples", "util.get_fid", "cyclegan_main.CycleGAN.eval_val_logger.log_specific_batch", "cyclegan_main.CycleGAN.eval_val_logger.log_to_ex", "cyclegan_main.CycleGAN.eval_val_logger.get_batch_mean", "util.save_to_csv", "cyclegan_main.CycleGAN.eval_test_logger.log_specific_batch", "cyclegan_main.CycleGAN.eval_test_logger.log_to_ex", "cyclegan_main.CycleGAN.eval_test_logger.get_batch_mean", "util.save_to_csv", "str", "str", "numpy.squeeze", "numpy.squeeze", "util.normalize_for_evaluation", "util.normalize_for_evaluation", "util.ssim_score", "print", "print", "numpy.squeeze", "numpy.squeeze", "util.normalize_for_evaluation", "util.normalize_for_evaluation", "util.ssim_score", "print", "os.path.join", "os.path.join", "path.split", "cyclegan_main.CycleGAN.eval_val_logger.log_specific_batch", "cyclegan_main.CycleGAN.eval_test_logger.log_specific_batch", "path.split", "cyclegan_main.CycleGAN.eval_val_logger.log_specific_batch", "cyclegan_main.CycleGAN.eval_test_logger.log_specific_batch", "os.walk", "os.walk", "util.get_sample_from_path", "util.get_sample_from_path", "len", "util.get_sample_from_path", "util.get_sample_from_path", "len"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.get_fid", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.transform_images", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.transform_images", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.reset_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.reset_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.get_fid", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.get_fid", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_to_ex", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.get_batch_mean", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.save_to_csv", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_to_ex", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.get_batch_mean", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.save_to_csv", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_evaluation", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_evaluation", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.ssim_score", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_evaluation", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_evaluation", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.ssim_score", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path"], []], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.__init__": [[27, 128], ["fixedpointgan_main.FixedPointGAN.domains_to_labels", "util.define_generator", "util.define_cyclegan_discriminator", "tensorflow.keras.optimizers.Adam", "tensorflow.keras.optimizers.Adam", "tensorflow.train.Checkpoint", "tensorflow.train.CheckpointManager", "debiasmedimg.cyclegan.util.Logger", "debiasmedimg.cyclegan.util.Logger", "debiasmedimg.cyclegan.util.Logger", "debiasmedimg.cyclegan.util.Logger", "float", "len", "datetime.datetime.now().strftime", "print", "fixedpointgan_main.FixedPointGAN.ckpt.restore", "print", "ckpt_to_restore.split", "int", "fixedpointgan_main.FixedPointGAN.assert_existing_objects_matched", "datetime.datetime.now", "id_and_checkpoint.split", "str"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.domains_to_labels", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.generator.define_generator", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.discriminator.define_cyclegan_discriminator"], ["def", "__init__", "(", "self", ",", "ex", ",", "domain_names", ",", "load_epoch", ",", "run_id", ",", "image_shape", ",", "n_labels", ",", "epochs", ",", "base_lr", ",", "\n", "lambda_adversarial_loss", ",", "lambda_cycleloss", ",", "lambda_domain_loss", ",", "lambda_gradient_penalty", ",", "\n", "lambda_disc_adv", ",", "lambda_identityloss", ",", "n_batch", ",", "n_resnet", ",", "additional_losses", ",", "lambda_additional_losses", ")", ":", "\n", "        ", "\"\"\"\n        Create a Fixed-Point GAN\n        :param ex: Sacred experiment to log to\n        :param domain_names: Names of the domains the network is transforming between\n        :param load_epoch: Which episode to load, if run id already exists\n        :param run_id: ID of the model if a model is loaded else None\n        :param image_shape: Shape of the input image\n        :param n_labels: How many classes to transfer between\n        :param epochs: Number of epochs to train\n        :param base_lr: Learning rate to start training with\n        :param lambda_adversarial_loss: Lambda of the adversarial loss\n        :param lambda_cycleloss: Lambda of the cycle loss\n        :param lambda_domain_loss: Lambda of the domain loss\n        :param lambda_gradient_penalty: Lambda of the gradient penalty\n        :param lambda_identityloss: Lambda of the conditional identity loss\n        :param n_batch: Number of training samples per batch\n        :param n_resnet: Number of resNet blocks in the generator\n        :param additional_losses: Any losses added to the system\n        :param lambda_additional_losses: Lambdas of the additional losses\n        \"\"\"", "\n", "# Save parameters", "\n", "assert", "len", "(", "domain_names", ")", "==", "n_labels", "\n", "self", ".", "ex", "=", "ex", "\n", "self", ".", "load_epoch", "=", "load_epoch", "\n", "self", ".", "run_id", "=", "run_id", "\n", "self", ".", "image_shape", "=", "image_shape", "\n", "self", ".", "n_labels", "=", "n_labels", "\n", "self", ".", "domains", "=", "domain_names", "\n", "self", ".", "labels", "=", "self", ".", "domains_to_labels", "(", "self", ".", "domains", ")", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "base_lr", "=", "base_lr", "\n", "self", ".", "lambda_adversarial_loss", "=", "lambda_adversarial_loss", "\n", "self", ".", "lambda_cycleloss", "=", "lambda_cycleloss", "\n", "self", ".", "lambda_domain_loss", "=", "lambda_domain_loss", "\n", "self", ".", "lambda_gradient_penalty", "=", "lambda_gradient_penalty", "\n", "self", ".", "n_batch", "=", "n_batch", "\n", "self", ".", "n_resnet", "=", "n_resnet", "\n", "self", ".", "additional_losses", "=", "additional_losses", "\n", "self", ".", "lambda_additional_losses", "=", "lambda_additional_losses", "\n", "self", ".", "lambda_disc_adv", "=", "lambda_disc_adv", "\n", "self", ".", "lambda_identityloss", "=", "lambda_identityloss", "\n", "\n", "# Create run-id", "\n", "if", "not", "self", ".", "run_id", ":", "\n", "            ", "self", ".", "run_id", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "run_id", "=", "self", ".", "run_id", "\n", "\n", "# Initialize learning rate", "\n", "", "self", ".", "curr_lr", "=", "self", ".", "base_lr", "\n", "\n", "# Create models", "\n", "self", ".", "generator", "=", "define_generator", "(", "self", ".", "image_shape", ",", "[", "self", ".", "n_labels", "]", ",", "target_units", "=", "self", ".", "image_shape", "[", "0", "]", ",", "\n", "out_channels", "=", "self", ".", "image_shape", "[", "2", "]", ",", "n_resnet", "=", "self", ".", "n_resnet", ")", "\n", "\n", "# Image -> real/fake (patch), class label", "\n", "# self.discriminator = define_discriminator(self.image_shape, self.n_labels)", "\n", "self", ".", "discriminator", "=", "define_cyclegan_discriminator", "(", "self", ".", "image_shape", ",", "self", ".", "n_labels", ")", "\n", "# Create one optimizer per model", "\n", "self", ".", "generator_optimizer", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", "self", ".", "base_lr", ",", "beta_1", "=", "0.5", ")", "\n", "self", ".", "discriminator_optimizer", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", "self", ".", "base_lr", ",", "beta_1", "=", "0.5", ")", "\n", "\n", "# Create checkpoint manager for saving the models during training", "\n", "self", ".", "checkpoint_path", "=", "settings", ".", "OUTPUT_DIR", "+", "\"/checkpoints/\"", "+", "self", ".", "run_id", "+", "\"/train\"", "\n", "# Define what to store in the checkpoint", "\n", "self", ".", "ckpt", "=", "tf", ".", "train", ".", "Checkpoint", "(", "generator", "=", "self", ".", "generator", ",", "\n", "discriminator", "=", "self", ".", "discriminator", ")", "\n", "self", ".", "ckpt_manager", "=", "tf", ".", "train", ".", "CheckpointManager", "(", "self", ".", "ckpt", ",", "self", ".", "checkpoint_path", ",", "max_to_keep", "=", "10", ")", "\n", "# If a checkpoint exists, restore the latest checkpoint.", "\n", "if", "self", ".", "ckpt_manager", ".", "latest_checkpoint", ":", "\n", "            ", "if", "load_epoch", ":", "\n", "                ", "ckpt_to_restore", "=", "[", "s", "for", "s", "in", "self", ".", "ckpt_manager", ".", "checkpoints", "if", "\"ckpt-\"", "+", "str", "(", "self", ".", "load_epoch", ")", "in", "s", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "ckpt_to_restore", "=", "self", ".", "ckpt_manager", ".", "latest_checkpoint", "\n", "", "print", "(", "ckpt_to_restore", ")", "\n", "status", "=", "self", ".", "ckpt", ".", "restore", "(", "ckpt_to_restore", ")", "\n", "print", "(", "'Latest checkpoint restored!!'", ")", "\n", "# The number of the checkpoint indicates how many epochs have been trained so far", "\n", "path", ",", "id_and_checkpoint", "=", "ckpt_to_restore", ".", "split", "(", "'checkpoints/'", ")", "\n", "self", ".", "start_epoch", "=", "int", "(", "id_and_checkpoint", ".", "split", "(", "'-'", ")", "[", "2", "]", ")", "\n", "status", ".", "assert_existing_objects_matched", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "start_epoch", "=", "0", "\n", "\n", "# Initiate batch losses", "\n", "", "losses", "=", "[", "\"discriminator_loss\"", ",", "\"discriminator_adversarial_loss\"", ",", "\"discriminator_gradient_penalty_loss\"", ",", "\n", "\"domain_class_real_loss\"", ",", "\"generator_loss\"", ",", "\"generator_adversarial_loss\"", ",", "\n", "\"domain_class_fake_loss\"", ",", "\"conditional_identity_loss\"", ",", "\"reconstruction_loss\"", "]", "\n", "evaluation_metrics", "=", "[", "\"ssim_inout_a\"", ",", "\"fid_orig\"", ",", "\"fid_b\"", "]", "\n", "self", ".", "training_logger", "=", "Logger", "(", "ex", ",", "losses", ",", "mode", "=", "'train'", ")", "\n", "self", ".", "validation_logger", "=", "Logger", "(", "ex", ",", "losses", ",", "mode", "=", "'validate'", ")", "\n", "self", ".", "eval_val_logger", "=", "Logger", "(", "ex", ",", "evaluation_metrics", ",", "mode", "=", "'evaluate_val'", ")", "\n", "self", ".", "eval_test_logger", "=", "Logger", "(", "ex", ",", "evaluation_metrics", ",", "mode", "=", "'evaluate_test'", ")", "\n", "# Initiate for visualization of training", "\n", "self", ".", "vis_img_in", "=", "None", "\n", "# Initiate for identifying best training epoch", "\n", "self", ".", "best_ckpt_loss", "=", "float", "(", "'Inf'", ")", "\n", "self", ".", "init_val_loss_negative", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.update_lr": [[129, 144], ["fixedpointgan_main.FixedPointGAN.generator_optimizer.lr.assign", "fixedpointgan_main.FixedPointGAN.discriminator_optimizer.lr.assign"], "methods", ["None"], ["", "def", "update_lr", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Update the learning rate depending on the epoch\n        :param epoch: Current epoch\n        :return: None\n        \"\"\"", "\n", "# Dealing with the learning rate as per the epoch number", "\n", "if", "epoch", "<", "self", ".", "epochs", "/", "2", ":", "\n", "            ", "self", ".", "curr_lr", "=", "self", ".", "base_lr", "\n", "", "else", ":", "\n", "            ", "decay", "=", "(", "1", "-", "(", "(", "epoch", "-", "self", ".", "epochs", "/", "2", ")", "/", "(", "self", ".", "epochs", "/", "2", ")", ")", ")", "\n", "self", ".", "curr_lr", "=", "self", ".", "base_lr", "*", "decay", "\n", "# Set the learning rates of the optimizers", "\n", "", "self", ".", "generator_optimizer", ".", "lr", ".", "assign", "(", "self", ".", "curr_lr", ")", "\n", "self", ".", "discriminator_optimizer", ".", "lr", ".", "assign", "(", "self", ".", "curr_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.get_random_domains": [[145, 153], ["numpy.random.randint", "numpy.array"], "methods", ["None"], ["", "def", "get_random_domains", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        Return an array of random domain names in the size of the batch\n        :param batch_size: Size of one batch\n        :return: Array of domain names\n        \"\"\"", "\n", "ix", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "n_labels", ",", "batch_size", ")", "\n", "return", "np", ".", "array", "(", "self", ".", "domains", ")", "[", "ix", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.get_random_domains_without_original": [[154, 169], ["range", "numpy.array", "numpy.random.randint", "domains_b.append", "numpy.random.randint", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "get_random_domains_without_original", "(", "self", ",", "batch_size", ",", "original_domains", ")", ":", "\n", "        ", "\"\"\"\n        Return an array of random domain names in the size of the batch\n        :param batch_size: Size of one batch\n        :param original_domains: Domains to translate from\n        :return: Array of domain names\n        \"\"\"", "\n", "domains_b", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "ix", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "n_labels", ",", "1", ")", "\n", "# Don't convert to the original domain", "\n", "while", "np", ".", "array", "(", "self", ".", "domains", ")", "[", "ix", "]", "==", "original_domains", "[", "i", "]", ":", "\n", "                ", "ix", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "n_labels", ",", "1", ")", "\n", "", "domains_b", ".", "append", "(", "np", ".", "array", "(", "self", ".", "domains", ")", "[", "ix", "]", ")", "\n", "", "return", "np", ".", "array", "(", "domains_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.labels_to_domains": [[170, 182], ["numpy.array", "domains.append", "numpy.where"], "methods", ["None"], ["", "def", "labels_to_domains", "(", "self", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Get the domain name given the one-hot encoded label\n        :param labels: one-hot encoded label\n        :return: domain_name\n        \"\"\"", "\n", "domains", "=", "[", "]", "\n", "for", "label", "in", "labels", ":", "\n", "            ", "n_label", "=", "np", ".", "where", "(", "label", "==", "1", ")", "[", "0", "]", "\n", "domain_name", "=", "self", ".", "domains", "[", "n_label", "]", "\n", "domains", ".", "append", "(", "domain_name", ")", "\n", "", "return", "np", ".", "array", "(", "domains", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.domains_to_labels": [[183, 197], ["numpy.array", "fixedpointgan_main.FixedPointGAN.domains.index", "numpy.zeros", "numpy.array", "labels.append", "tensorflow.cast"], "methods", ["None"], ["", "def", "domains_to_labels", "(", "self", ",", "domain_names", ")", ":", "\n", "        ", "\"\"\"\n        Get the one-hot encoded label given the domain name\n        :param domain_names: name of the domain\n        :return: label of the domain\n        \"\"\"", "\n", "labels", "=", "[", "]", "\n", "for", "domain", "in", "domain_names", ":", "\n", "            ", "n_label", "=", "self", ".", "domains", ".", "index", "(", "domain", ")", "\n", "label", "=", "np", ".", "zeros", "(", "self", ".", "n_labels", ")", "\n", "label", "[", "n_label", "]", "=", "1", "\n", "label", "=", "np", ".", "array", "(", "tf", ".", "cast", "(", "label", ",", "tf", ".", "float32", ")", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "return", "np", ".", "array", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.visualize_performance": [[198, 240], ["range", "debiasmedimg.cyclegan.util.normalize_for_display", "enumerate", "matplotlib.figure", "matplotlib.figure", "matplotlib.gridspec.GridSpec", "matplotlib.gridspec.GridSpec", "matplotlib.subplot2grid", "matplotlib.subplot2grid", "matplotlib.title", "matplotlib.title", "matplotlib.imshow", "matplotlib.imshow", "range", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "fixedpointgan_main.FixedPointGAN.domains.index", "debiasmedimg.cyclegan.util.get_sample_from_path", "numpy.array", "fixedpointgan_main.FixedPointGAN.generator", "generated_images.append", "titles.append", "debiasmedimg.cyclegan.util.normalize_for_display", "len", "matplotlib.subplot2grid", "matplotlib.subplot2grid", "matplotlib.title", "matplotlib.title", "matplotlib.imshow", "matplotlib.imshow", "os.path.exists", "os.makedirs", "str", "len"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_display", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_display"], ["", "def", "visualize_performance", "(", "self", ",", "train_files", ",", "domain_in", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Put out a plot showing how the generator transforms the images after each epoch\n        :param train_files: Paths to training images\n        :param domain_in: Name of the domain to translate\n        :param epoch: Current epoch of the training process\n        :return:\n        \"\"\"", "\n", "if", "epoch", "==", "'init'", ":", "\n", "# Find the first entry that contains the name of the domain which we want to translate", "\n", "            ", "domain_id", "=", "self", ".", "domains", ".", "index", "(", "domain_in", ")", "\n", "img_file_in", "=", "train_files", "[", "domain_id", "]", "[", "0", "]", "\n", "_", ",", "self", ".", "vis_img_in", ",", "_", "=", "get_sample_from_path", "(", "img_file_in", ")", "\n", "", "generated_images", "=", "[", "]", "\n", "titles", "=", "[", "]", "\n", "# Get transformed images from generators", "\n", "for", "i", "in", "range", "(", "self", ".", "n_labels", ")", ":", "\n", "            ", "label", "=", "np", ".", "array", "(", "[", "self", ".", "labels", "[", "i", "]", "]", ")", "\n", "gen_image", "=", "self", ".", "generator", "(", "[", "self", ".", "vis_img_in", ",", "label", "]", ",", "training", "=", "False", ")", "\n", "generated_images", ".", "append", "(", "gen_image", ")", "\n", "titles", ".", "append", "(", "self", ".", "domains", "[", "i", "]", ")", "\n", "# Normalize images to [0,1]", "\n", "", "img_in", "=", "normalize_for_display", "(", "self", ".", "vis_img_in", ")", "\n", "for", "ix", ",", "image", "in", "enumerate", "(", "generated_images", ")", ":", "\n", "            ", "generated_images", "[", "ix", "]", "=", "normalize_for_display", "(", "image", ")", "\n", "# Create figure for displaying images", "\n", "", "_", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "8", "*", "len", "(", "generated_images", ")", ")", ")", "\n", "_", "=", "GridSpec", "(", "self", ".", "n_labels", ",", "2", ")", "\n", "# Create \"from\" column subplot", "\n", "plt", ".", "subplot2grid", "(", "(", "self", ".", "n_labels", ",", "2", ")", ",", "(", "0", ",", "0", ")", ",", "colspan", "=", "1", ",", "rowspan", "=", "1", ")", "\n", "plt", ".", "title", "(", "domain_in", ")", "\n", "plt", ".", "imshow", "(", "img_in", "[", "0", "]", ")", "\n", "# Create \"to\" column subplots", "\n", "for", "i", "in", "range", "(", "len", "(", "generated_images", ")", ")", ":", "\n", "            ", "plt", ".", "subplot2grid", "(", "(", "self", ".", "n_labels", ",", "2", ")", ",", "(", "i", ",", "1", ")", ",", "colspan", "=", "1", ",", "rowspan", "=", "1", ")", "\n", "plt", ".", "title", "(", "titles", "[", "i", "]", ")", "\n", "plt", ".", "imshow", "(", "generated_images", "[", "i", "]", "[", "0", "]", ")", "\n", "", "path", "=", "settings", ".", "OUTPUT_DIR", "+", "\"/plots/\"", "+", "self", ".", "run_id", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "plt", ".", "savefig", "(", "path", "+", "str", "(", "epoch", ")", "+", "\".png\"", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.discriminator_adv_loss": [[241, 260], ["tensorflow.keras.losses.BinaryCrossentropy", "tensorflow.keras.losses.BinaryCrossentropy.", "tensorflow.keras.losses.BinaryCrossentropy.", "tensorflow.reduce_mean", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "discriminator_adv_loss", "(", "self", ",", "prob_real_is_real", ",", "prob_fake_is_real", ")", ":", "\n", "        ", "\"\"\"\n        Loss of the discriminator\n        :param prob_real_is_real: Loss of the discriminator on real samples\n        :param prob_fake_is_real: Loss of the discriminator on fake samples\n        :return: total loss of the discriminator divided by two\n        \"\"\"", "\n", "# p(real/fake) = 1 if it is real, 0 if it is fake", "\n", "if", "self", ".", "lambda_gradient_penalty", "==", "0", ":", "\n", "# GAN objective", "\n", "            ", "loss_obj", "=", "tf", ".", "keras", ".", "losses", ".", "BinaryCrossentropy", "(", "from_logits", "=", "True", ")", "\n", "real_is_real_loss", "=", "loss_obj", "(", "tf", ".", "ones_like", "(", "prob_real_is_real", ")", ",", "prob_real_is_real", ")", "\n", "fake_is_real_loss", "=", "loss_obj", "(", "tf", ".", "zeros_like", "(", "prob_fake_is_real", ")", ",", "prob_fake_is_real", ")", "\n", "", "else", ":", "\n", "# WGAN objective", "\n", "            ", "real_is_real_loss", "=", "-", "tf", ".", "reduce_mean", "(", "prob_real_is_real", ")", "\n", "fake_is_real_loss", "=", "tf", ".", "reduce_mean", "(", "prob_fake_is_real", ")", "\n", "", "loss", "=", "real_is_real_loss", "+", "fake_is_real_loss", "\n", "return", "self", ".", "lambda_disc_adv", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.calc_cycle_loss": [[261, 270], ["tensorflow.reduce_mean", "tensorflow.abs"], "methods", ["None"], ["", "def", "calc_cycle_loss", "(", "self", ",", "real_image", ",", "cycled_image", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the loss between the real input and the cycled output (ideally identical)\n        :param real_image: Real input\n        :param cycled_image: Cycled output generated from the real input\n        :return: cycle loss of the network\n        \"\"\"", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "real_image", "-", "cycled_image", ")", ")", "\n", "return", "self", ".", "lambda_cycleloss", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.generator_adv_loss": [[271, 284], ["tensorflow.keras.losses.BinaryCrossentropy", "tensorflow.keras.losses.BinaryCrossentropy.", "tensorflow.ones_like", "tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "generator_adv_loss", "(", "self", ",", "prob_fake_is_real", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the generator loss (whether the discriminator was able to tell fake from real images)\n        :param prob_fake_is_real: Probabilities predicted by the discriminator\n        :return: generator loss\n        \"\"\"", "\n", "if", "self", ".", "lambda_gradient_penalty", "==", "0", ":", "\n", "# GAN objective", "\n", "            ", "loss_obj", "=", "tf", ".", "keras", ".", "losses", ".", "BinaryCrossentropy", "(", "from_logits", "=", "True", ")", "\n", "loss", "=", "loss_obj", "(", "tf", ".", "ones_like", "(", "prob_fake_is_real", ")", ",", "prob_fake_is_real", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "-", "tf", ".", "reduce_mean", "(", "prob_fake_is_real", ")", "\n", "", "return", "self", ".", "lambda_adversarial_loss", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.domain_class_loss": [[285, 296], ["tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "domain_class_loss", "(", "self", ",", "real_label", ",", "predicted_label", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the domain classification loss between the real labels and predicted labels\n        :param real_label: Real labels of images\n        :param predicted_label: Predicted labels\n        :return: Domain classification loss\n        \"\"\"", "\n", "# Softmax for one-hot encoded vectors (otherwise sigmoid)", "\n", "loss", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "real_label", ",", "logits", "=", "predicted_label", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "return", "self", ".", "lambda_domain_loss", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.wgan_gp_loss": [[297, 314], ["tensorflow.random.uniform", "inner_tape.gradient", "tensorflow.sqrt", "tensorflow.reduce_mean", "tensorflow.GradientTape", "inner_tape.watch", "tensorflow.reduce_sum", "fixedpointgan_main.FixedPointGAN.discriminator", "tensorflow.square"], "methods", ["None"], ["", "def", "wgan_gp_loss", "(", "self", ",", "real_img", ",", "fake_img", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the gradient penalty from Wasserstein-GANs to stabilize training\n        :param real_img: Real images\n        :param fake_img: Generated images\n        :return: Gradient penalty\n        \"\"\"", "\n", "alpha", "=", "tf", ".", "random", ".", "uniform", "(", "shape", "=", "[", "self", ".", "n_batch", ",", "1", ",", "1", ",", "1", "]", ",", "minval", "=", "0.", ",", "maxval", "=", "1.", ")", "\n", "interpolates", "=", "alpha", "*", "fake_img", "+", "(", "1.", "-", "alpha", ")", "*", "real_img", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "inner_tape", ":", "\n", "            ", "inner_tape", ".", "watch", "(", "interpolates", ")", "\n", "disc_interpolates", "=", "self", ".", "discriminator", "(", "interpolates", ")", "[", "0", "]", "\n", "# https://github.com/WangZesen/WGAN-GP-Tensorflow-v2/blob/master/train.py :", "\n", "", "gp_gradients", "=", "inner_tape", ".", "gradient", "(", "disc_interpolates", ",", "interpolates", ")", "\n", "gp_gradients_norm", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "gp_gradients", ")", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", ")", "\n", "gradient_penalty", "=", "tf", ".", "reduce_mean", "(", "(", "gp_gradients_norm", "-", "1.0", ")", "**", "2", ")", "\n", "return", "self", ".", "lambda_gradient_penalty", "*", "gradient_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.conditional_identity_loss": [[315, 324], ["tensorflow.reduce_mean", "tensorflow.abs"], "methods", ["None"], ["", "def", "conditional_identity_loss", "(", "self", ",", "image_in", ",", "image_out", ")", ":", "\n", "        ", "\"\"\"\n        Calculates the conditional identity loss (is only called for same-same transformation)\n        :param image_in: Image that was translated\n        :param image_out: Translated image\n        :return: Identity loss\n        \"\"\"", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "image_in", "-", "image_out", ")", ")", "\n", "return", "self", ".", "lambda_identityloss", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.additional_identity_loss": [[325, 340], ["fixedpointgan_main.FixedPointGAN.additional_losses.index", "tensorflow.reduce_mean", "tensorflow.abs"], "methods", ["None"], ["", "def", "additional_identity_loss", "(", "self", ",", "real_image", ",", "same_image", ",", "epoch", ",", "final_epoch", ")", ":", "\n", "        ", "\"\"\"\n        Additional identity loss as added by de Bel et al.\n        :param real_image: Image put into generator\n        :param same_image: Image produced by generator\n        :param epoch: Current epoch\n        :param final_epoch: Final epoch where the additional identity loss is used\n        :return: Loss\n        \"\"\"", "\n", "lambda_id", "=", "self", ".", "additional_losses", ".", "index", "(", "\"add_identity_loss\"", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "real_image", "-", "same_image", ")", ")", "\n", "# Loss is reduced to zero over the first epochs", "\n", "lambda_add_identity_loss", "=", "self", ".", "lambda_additional_losses", "[", "lambda_id", "]", "-", "epoch", "*", "self", ".", "lambda_additional_losses", "[", "lambda_id", "]", "/", "final_epoch", "\n", "return", "lambda_add_identity_loss", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ms_ssim_loss": [[341, 353], ["fixedpointgan_main.FixedPointGAN.additional_losses.index", "tensorflow.image.ssim_multiscale"], "methods", ["None"], ["", "def", "ms_ssim_loss", "(", "self", ",", "image_a", ",", "cycled_image_a", ")", ":", "\n", "        ", "\"\"\"\n        MS-SSIM loss as used by Armanious et al. for MR images\n        :param image_a: Image of domain A\n        :param cycled_image_a: Cycled image of domain A\n        :return: MS-SSIM loss of one domain\n        \"\"\"", "\n", "# max-val = difference between the maximum the and minimum allowed values,", "\n", "# images here are normalized to be in range [-1,1] -> max_val = 2", "\n", "ms_ssim", "=", "(", "1", "-", "tf", ".", "image", ".", "ssim_multiscale", "(", "image_a", ",", "cycled_image_a", ",", "max_val", "=", "2", ")", ")", "\n", "lambda_id", "=", "self", ".", "additional_losses", ".", "index", "(", "\"ms_ssim_loss\"", ")", "\n", "return", "self", ".", "lambda_additional_losses", "[", "lambda_id", "]", "*", "ms_ssim", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ma_structure_loss": [[354, 397], ["zip", "fixedpointgan_main.FixedPointGAN.additional_losses.index", "debiasmedimg.cyclegan.util.create_patches", "debiasmedimg.cyclegan.util.create_patches", "zip", "numpy.std", "numpy.std", "numpy.array", "structure_loss.clip.clip.clip", "structure_losses.append", "numpy.sum", "numpy.empty", "range", "numpy.array.append", "numpy.array", "numpy.vstack", "numpy.cov", "numpy.sum", "img_patch[].flatten", "gen_img_patch[].flatten"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.create_patches", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.create_patches"], ["", "def", "ma_structure_loss", "(", "self", ",", "images", ",", "generated_images", ",", "patch_size", "=", "16", ",", "c", "=", "0.0001", ")", ":", "\n", "        ", "\"\"\"\n        Re-creation of the structure loss proposed in \"Cycle Structure and Illumination\n        Constrained GAN for Medical Image Enhancement\" by Ma et al.\n        :param images: List of original images\n        :param generated_images: List of generated images (same order as originals)\n        :param patch_size: Patch size to cut the images into (non-overlapping)\n        :param c: Small positive constant to avoid errors for identical images\n        \"\"\"", "\n", "assert", "not", "c", "<", "0", "\n", "structure_losses", "=", "[", "]", "\n", "loss_n", "=", "0", "\n", "for", "img", ",", "gen_img", "in", "zip", "(", "images", ",", "generated_images", ")", ":", "\n", "            ", "img_patches", ",", "img_patches_number", "=", "create_patches", "(", "img", ",", "patch_size", "=", "patch_size", ")", "\n", "gen_img_patches", ",", "gen_img_patches_number", "=", "create_patches", "(", "gen_img", ",", "patch_size", "=", "patch_size", ")", "\n", "assert", "img_patches_number", "==", "gen_img_patches_number", "\n", "layers", "=", "img_patches", ".", "shape", "[", "3", "]", "\n", "covariances", "=", "[", "]", "\n", "# Calculate the covariances between all patches", "\n", "for", "img_patch", ",", "gen_img_patch", "in", "zip", "(", "img_patches", ",", "gen_img_patches", ")", ":", "\n", "# Calculate the covariance for the individual color layers", "\n", "                ", "cov_of_patch", "=", "np", ".", "empty", "(", "[", "layers", "]", ")", "\n", "for", "idx", "in", "range", "(", "layers", ")", ":", "\n", "                    ", "combined", "=", "np", ".", "vstack", "(", "(", "img_patch", "[", ":", ",", ":", ",", "idx", "]", ".", "flatten", "(", ")", ",", "gen_img_patch", "[", ":", ",", ":", ",", "idx", "]", ".", "flatten", "(", ")", ")", ")", "\n", "cov_matrix", "=", "np", ".", "cov", "(", "combined", ")", "\n", "cov_of_patch", "[", "idx", "]", "=", "cov_matrix", "[", "0", "]", "[", "1", "]", "\n", "", "covariances", ".", "append", "(", "cov_of_patch", ")", "\n", "# Calculate the standard deviations of the original image patches and the geneated images", "\n", "", "img_stds", "=", "np", ".", "std", "(", "img_patches", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "gen_img_stds", "=", "np", ".", "std", "(", "gen_img_patches", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "covariances", "=", "np", ".", "array", "(", "covariances", ")", "\n", "# Calculate the structure loss (included the number of layers,", "\n", "# which is not included in the definition in the paper)", "\n", "structure_loss", "=", "1", "-", "1", "/", "img_patches_number", "*", "1", "/", "layers", "*", "np", ".", "sum", "(", "\n", "(", "covariances", "+", "c", ")", "/", "(", "img_stds", "*", "gen_img_stds", "+", "c", ")", ")", "\n", "# Make sure to stay within the boundaries since", "\n", "# the value is slightly negative for identical images (due to c)", "\n", "structure_loss", "=", "structure_loss", ".", "clip", "(", "0", ",", "1", ")", "\n", "structure_losses", ".", "append", "(", "structure_loss", ")", "\n", "loss_n", "+=", "1", "\n", "", "structure_loss", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "structure_losses", ")", ")", "/", "loss_n", "\n", "lambda_id", "=", "self", ".", "additional_losses", ".", "index", "(", "\"ma_structure_loss\"", ")", "\n", "return", "self", ".", "lambda_additional_losses", "[", "lambda_id", "]", "*", "structure_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.test_saving": [[398, 411], ["fixedpointgan_main.FixedPointGAN.ckpt_manager.save", "print"], "methods", ["None"], ["", "def", "test_saving", "(", "self", ",", "abs_gen_val_loss", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Test whether the early stopping criterion is fulfilled\n        :param abs_gen_val_loss: Validation loss of the generator as summed up absolute sub-losses\n        :param epoch: Current epoch of training\n        :return: None\n        \"\"\"", "\n", "if", "abs_gen_val_loss", "<", "self", ".", "best_ckpt_loss", ":", "\n", "# Update best loss", "\n", "            ", "self", ".", "best_ckpt_loss", "=", "abs_gen_val_loss", "\n", "# Save the current states of the models + optimizers in a checkpoint", "\n", "ckpt_save_path", "=", "self", ".", "ckpt_manager", ".", "save", "(", "checkpoint_number", "=", "epoch", ")", "\n", "print", "(", "'Saving checkpoint for epoch {} at {}'", ".", "format", "(", "epoch", ",", "ckpt_save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.train": [[412, 559], ["debiasmedimg.cyclegan.util.get_filenames", "debiasmedimg.cyclegan.util.get_filenames", "debiasmedimg.cyclegan.util.get_filenames", "min", "print", "int", "print", "fixedpointgan_main.FixedPointGAN.visualize_performance", "range", "map", "print", "fixedpointgan_main.FixedPointGAN.update_lr", "util.cut_out_files", "random.shuffle", "fixedpointgan_main.FixedPointGAN.training_logger.reset_batch", "time.time", "range", "print", "fixedpointgan_main.FixedPointGAN.training_logger.log_to_ex", "fixedpointgan_main.FixedPointGAN.visualize_performance", "fixedpointgan_main.FixedPointGAN.validate", "fixedpointgan_main.FixedPointGAN.test_saving", "random.shuffle", "debiasmedimg.cyclegan.util.get_real_samples", "fixedpointgan_main.FixedPointGAN.domains_to_labels", "fixedpointgan_main.FixedPointGAN.get_random_domains_without_original", "fixedpointgan_main.FixedPointGAN.domains_to_labels", "tape.gradient", "tape.gradient", "fixedpointgan_main.FixedPointGAN.generator_optimizer.apply_gradients", "fixedpointgan_main.FixedPointGAN.discriminator_optimizer.apply_gradients", "fixedpointgan_main.FixedPointGAN.training_logger.log_batch", "tensorflow.GradientTape", "fixedpointgan_main.FixedPointGAN.generator", "fixedpointgan_main.FixedPointGAN.discriminator", "fixedpointgan_main.FixedPointGAN.discriminator", "fixedpointgan_main.FixedPointGAN.generator_adv_loss", "fixedpointgan_main.FixedPointGAN.discriminator_adv_loss", "fixedpointgan_main.FixedPointGAN.domain_class_loss", "fixedpointgan_main.FixedPointGAN.domain_class_loss", "fixedpointgan_main.FixedPointGAN.generator", "fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "fixedpointgan_main.FixedPointGAN.generator", "fixedpointgan_main.FixedPointGAN.discriminator", "fixedpointgan_main.FixedPointGAN.generator_adv_loss", "fixedpointgan_main.FixedPointGAN.generator", "fixedpointgan_main.FixedPointGAN.domain_class_loss", "fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "fixedpointgan_main.FixedPointGAN.conditional_identity_loss", "zip", "zip", "print", "fixedpointgan_main.FixedPointGAN.wgan_gp_loss", "fixedpointgan_main.FixedPointGAN.ms_ssim_loss", "fixedpointgan_main.FixedPointGAN.additional_identity_loss", "fixedpointgan_main.FixedPointGAN.ma_structure_loss", "time.time"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.visualize_performance", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.update_lr", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.cut_out_files", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.reset_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_to_ex", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.visualize_performance", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.validate", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.test_saving", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_real_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.domains_to_labels", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.get_random_domains_without_original", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.domains_to_labels", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.generator_adv_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.discriminator_adv_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.domain_class_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.domain_class_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.generator_adv_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.domain_class_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.conditional_identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.wgan_gp_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ms_ssim_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.additional_identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ma_structure_loss"], ["", "", "def", "train", "(", "self", ",", "training_file", ",", "validation_file", ",", "domain_to_translate", ")", ":", "\n", "        ", "\"\"\"\n        Train a starGAN network on the current dataset consisting of two domain sets\n        :param training_file: CSV file containing info on the training images\n        :param validation_file: CSV file containing info on the validation images\n        :param domain_to_translate: Name of the domain to translate from for visualization\n        :return: None\n        \"\"\"", "\n", "# Unpack dataset", "\n", "train_files", "=", "get_filenames", "(", "training_file", ",", "self", ".", "domains", ")", "\n", "train_files_merged", "=", "get_filenames", "(", "training_file", ",", "self", ".", "domains", ",", "merge", "=", "True", ")", "\n", "val_files", "=", "get_filenames", "(", "validation_file", ",", "self", ".", "domains", ")", "\n", "# Calculate the number of batches per training epoch", "\n", "train_number", "=", "min", "(", "map", "(", "len", ",", "train_files", ")", ")", "\n", "print", "(", "\"Maximum images per domain:\"", ",", "train_number", ")", "\n", "bat_per_epo", "=", "int", "(", "train_number", "/", "self", ".", "n_batch", ")", "\n", "# bat_per_epo = int(len(train_files) / self.n_batch)", "\n", "print", "(", "bat_per_epo", ",", "\"updates per epoch\"", ")", "\n", "# Visualize the output of the generators before training", "\n", "self", ".", "visualize_performance", "(", "train_files", ",", "domain_to_translate", ",", "epoch", "=", "'init'", ")", "\n", "# Start training", "\n", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "epochs", "+", "self", ".", "start_epoch", ")", ":", "\n", "            ", "print", "(", "\"Starting new epoch\"", ")", "\n", "# Update the learning rate of the optimizers depending on the current epoch", "\n", "self", ".", "update_lr", "(", "epoch", ")", "\n", "# Randomize order of training data", "\n", "for", "domain", "in", "train_files", ":", "\n", "                ", "random", ".", "shuffle", "(", "domain", ")", "\n", "", "train_files_this_epoch", "=", "cut_out_files", "(", "train_files", ",", "train_number", ")", "\n", "random", ".", "shuffle", "(", "train_files_this_epoch", ")", "\n", "# Empty lists for losses of each batch in one epoch", "\n", "self", ".", "training_logger", ".", "reset_batch", "(", ")", "\n", "# Current time for displaying how long the epoch took", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "update", "in", "range", "(", "bat_per_epo", ")", ":", "\n", "# Get a number of training images", "\n", "                ", "real_a", ",", "domains_a", "=", "get_real_samples", "(", "train_files_this_epoch", ",", "self", ".", "n_batch", ",", "update", ",", "domains", "=", "self", ".", "domains", ",", "\n", "return_domain_names", "=", "True", ",", "all_files", "=", "train_files", ")", "\n", "# Labels to translate from", "\n", "labels_a", "=", "self", ".", "domains_to_labels", "(", "domains_a", ")", "\n", "# Randomly select which domains to transfer to", "\n", "domains_b", "=", "self", ".", "get_random_domains_without_original", "(", "self", ".", "n_batch", ",", "domains_a", ")", "\n", "# Labels to translate to", "\n", "labels_b", "=", "self", ".", "domains_to_labels", "(", "domains_b", ")", "\n", "# Persistent is set to True because the tape is used more than once to calculate the gradients.", "\n", "with", "tf", ".", "GradientTape", "(", "persistent", "=", "True", ")", "as", "tape", ":", "\n", "# Generator fake images of the domains to transfer to", "\n", "                    ", "fake_b", "=", "self", ".", "generator", "(", "[", "real_a", ",", "labels_b", "]", ",", "training", "=", "True", ")", "\n", "\n", "# Get results of the discriminator for real and fake data", "\n", "disc_real_a", "=", "self", ".", "discriminator", "(", "real_a", ",", "training", "=", "True", ")", "\n", "disc_fake_b", "=", "self", ".", "discriminator", "(", "fake_b", ",", "training", "=", "True", ")", "\n", "\n", "# -------------ADVERSARIAL LOSS--------------------------:", "\n", "# Loss indicating whether the discriminator was able to tell fake from real images", "\n", "# Adversarial loss of the generator depends on whether the discriminator could tell", "\n", "# that the generated images aren't real", "\n", "gen_adv_loss", "=", "self", ".", "generator_adv_loss", "(", "prob_fake_is_real", "=", "disc_fake_b", "[", "0", "]", ")", "\n", "# Adversarial loss of the discriminator is a combination of the loss on real and fake data", "\n", "discriminator_adv_loss", "=", "self", ".", "discriminator_adv_loss", "(", "prob_real_is_real", "=", "disc_real_a", "[", "0", "]", ",", "\n", "prob_fake_is_real", "=", "disc_fake_b", "[", "0", "]", ")", "\n", "\n", "if", "not", "self", ".", "lambda_gradient_penalty", "==", "0", ":", "\n", "# --------------WGAN - gradient penalty loss------------:", "\n", "# Only relevant for the discriminator", "\n", "                        ", "gradient_penalty", "=", "self", ".", "wgan_gp_loss", "(", "real_a", ",", "fake_b", ")", "\n", "", "else", ":", "\n", "                        ", "gradient_penalty", "=", "0", "\n", "\n", "# -------------DOMAIN CLASSIFICATION LOSS----------------:", "\n", "# The domain classification loss indicates whether the discriminator could correctly tell the domain", "\n", "# the real and fake images are supposed to belong to, the loss on the real data is used for the", "\n", "# discriminator and on the fake data on the generator", "\n", "", "domain_class_real_loss", "=", "self", ".", "domain_class_loss", "(", "real_label", "=", "labels_a", ",", "predicted_label", "=", "disc_real_a", "[", "1", "]", ")", "\n", "domain_class_fake_loss", "=", "self", ".", "domain_class_loss", "(", "real_label", "=", "labels_b", ",", "predicted_label", "=", "disc_fake_b", "[", "1", "]", ")", "\n", "\n", "# -------------RECONSTRUCTION LOSS-----------------------:", "\n", "# Reconstruct original images by translating back to domain a", "\n", "cycled_a", "=", "self", ".", "generator", "(", "[", "fake_b", ",", "labels_a", "]", ",", "training", "=", "True", ")", "\n", "reconstruction_loss", "=", "self", ".", "calc_cycle_loss", "(", "real_a", ",", "cycled_a", ")", "\n", "\n", "# ---------------CONDITIONAL IDENTITY LOSS----------------------------:", "\n", "# Same-domain translation (ideally no change)", "\n", "same_a", "=", "self", ".", "generator", "(", "[", "real_a", ",", "labels_a", "]", ",", "training", "=", "True", ")", "\n", "# Get result of the discriminator", "\n", "disc_same_a", "=", "self", ".", "discriminator", "(", "same_a", ",", "training", "=", "True", ")", "\n", "# Adversarial loss of the generator on the same-domain translation", "\n", "gen_adv_id_loss", "=", "self", ".", "generator_adv_loss", "(", "prob_fake_is_real", "=", "disc_same_a", "[", "0", "]", ")", "\n", "# Generate cycled images", "\n", "cycled_same_a", "=", "self", ".", "generator", "(", "[", "same_a", ",", "labels_a", "]", ",", "training", "=", "True", ")", "\n", "# Domain classification loss on the same-domain translation", "\n", "domain_class_id_loss", "=", "self", ".", "domain_class_loss", "(", "real_label", "=", "labels_a", ",", "predicted_label", "=", "disc_same_a", "[", "1", "]", ")", "\n", "# Reconstruct original image", "\n", "reconstruction_id_loss", "=", "self", ".", "calc_cycle_loss", "(", "real_a", ",", "cycled_same_a", ")", "\n", "# Identity loss of the same-domain translation", "\n", "id_loss", "=", "self", ".", "conditional_identity_loss", "(", "real_a", ",", "same_a", ")", "\n", "cond_identity_loss", "=", "gen_adv_id_loss", "+", "domain_class_id_loss", "+", "reconstruction_id_loss", "+", "id_loss", "\n", "\n", "# --------------ADDITIONAL LOSSES-------------------------:", "\n", "if", "'ms_ssim_loss'", "in", "self", ".", "additional_losses", ":", "\n", "                        ", "reconstruction_loss", "+=", "self", ".", "ms_ssim_loss", "(", "real_a", ",", "cycled_a", ")", "\n", "", "if", "'add_identity_loss'", "in", "self", ".", "additional_losses", "and", "epoch", "<", "20", ":", "\n", "                        ", "cond_identity_loss", "+=", "self", ".", "additional_identity_loss", "(", "real_a", ",", "same_a", ",", "epoch", ",", "final_epoch", "=", "20", ")", "\n", "", "if", "'ma_structure_loss'", "in", "self", ".", "additional_losses", ":", "\n", "                        ", "structure_loss", "=", "self", ".", "ma_structure_loss", "(", "real_a", ",", "fake_b", ")", "\n", "", "else", ":", "\n", "                        ", "structure_loss", "=", "0", "\n", "# -------------Total generator loss-----------------------:", "\n", "# = adversarial loss + domain class loss + reconstruction loss + conditional identity loss", "\n", "", "generator_loss", "=", "gen_adv_loss", "+", "domain_class_fake_loss", "+", "reconstruction_loss", "+", "cond_identity_loss", "+", "structure_loss", "\n", "# -------------Total discriminator loss-------------------:", "\n", "# = adversarial loss + gradient penalty + class loss", "\n", "discriminator_loss", "=", "discriminator_adv_loss", "+", "gradient_penalty", "+", "domain_class_real_loss", "\n", "\n", "# Calculate the gradients for the generator", "\n", "", "generator_gradients", "=", "tape", ".", "gradient", "(", "generator_loss", ",", "self", ".", "generator", ".", "trainable_variables", ")", "\n", "# Calculate the gradients for the discriminator", "\n", "discriminator_gradients", "=", "tape", ".", "gradient", "(", "discriminator_loss", ",", "self", ".", "discriminator", ".", "trainable_variables", ")", "\n", "\n", "# \"We perform one generator update after five discriminator updates\"", "\n", "# if update % 5 == 0:", "\n", "# Apply the gradients", "\n", "self", ".", "generator_optimizer", ".", "apply_gradients", "(", "zip", "(", "generator_gradients", ",", "\n", "self", ".", "generator", ".", "trainable_variables", ")", ")", "\n", "# Apply the gradients", "\n", "self", ".", "discriminator_optimizer", ".", "apply_gradients", "(", "zip", "(", "discriminator_gradients", ",", "\n", "self", ".", "discriminator", ".", "trainable_variables", ")", ")", "\n", "# Save the losses per batch to sum up later", "\n", "losses", "=", "[", "discriminator_loss", ",", "discriminator_adv_loss", ",", "gradient_penalty", ",", "\n", "domain_class_real_loss", ",", "generator_loss", ",", "gen_adv_loss", ",", "\n", "domain_class_fake_loss", ",", "cond_identity_loss", ",", "reconstruction_loss", "]", "\n", "self", ".", "training_logger", ".", "log_batch", "(", "losses", ")", "\n", "# Show progress once in a while", "\n", "if", "update", "%", "20", "==", "0", ":", "\n", "                    ", "print", "(", "'.'", ")", "\n", "", "", "print", "(", "'Time taken for epoch {} is {} sec\\n'", ".", "format", "(", "epoch", ",", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "# Add summary of losses (means of the whole batch) to sacred", "\n", "self", ".", "training_logger", ".", "log_to_ex", "(", "epoch", ",", "learning_rate", "=", "self", ".", "curr_lr", ")", "\n", "\n", "# Export generated images to show the progress", "\n", "self", ".", "visualize_performance", "(", "train_files_merged", ",", "domain_to_translate", ",", "epoch", ")", "\n", "\n", "# Test performance on validation set and add the results to sacred", "\n", "abs_generator_val_loss", "=", "self", ".", "validate", "(", "val_files", ",", "epoch", ")", "\n", "self", ".", "test_saving", "(", "abs_generator_val_loss", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.validate": [[560, 672], ["int", "min", "util.cut_out_files", "random.shuffle", "fixedpointgan_main.FixedPointGAN.validation_logger.reset_batch", "range", "fixedpointgan_main.FixedPointGAN.validation_logger.log_to_ex", "fixedpointgan_main.FixedPointGAN.validation_logger.get_batch_mean", "map", "random.shuffle", "debiasmedimg.cyclegan.util.get_real_samples", "fixedpointgan_main.FixedPointGAN.domains_to_labels", "fixedpointgan_main.FixedPointGAN.get_random_domains_without_original", "fixedpointgan_main.FixedPointGAN.domains_to_labels", "fixedpointgan_main.FixedPointGAN.generator", "fixedpointgan_main.FixedPointGAN.discriminator", "fixedpointgan_main.FixedPointGAN.discriminator", "fixedpointgan_main.FixedPointGAN.generator_adv_loss", "fixedpointgan_main.FixedPointGAN.discriminator_adv_loss", "fixedpointgan_main.FixedPointGAN.domain_class_loss", "fixedpointgan_main.FixedPointGAN.domain_class_loss", "fixedpointgan_main.FixedPointGAN.generator", "fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "fixedpointgan_main.FixedPointGAN.generator", "fixedpointgan_main.FixedPointGAN.discriminator", "fixedpointgan_main.FixedPointGAN.generator_adv_loss", "fixedpointgan_main.FixedPointGAN.generator", "fixedpointgan_main.FixedPointGAN.domain_class_loss", "fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "fixedpointgan_main.FixedPointGAN.conditional_identity_loss", "fixedpointgan_main.FixedPointGAN.validation_logger.log_batch", "abs", "len", "fixedpointgan_main.FixedPointGAN.wgan_gp_loss", "fixedpointgan_main.FixedPointGAN.ms_ssim_loss", "fixedpointgan_main.FixedPointGAN.additional_identity_loss", "fixedpointgan_main.FixedPointGAN.ma_structure_loss", "abs", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.cut_out_files", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.reset_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_to_ex", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.get_batch_mean", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_real_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.domains_to_labels", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.get_random_domains_without_original", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.domains_to_labels", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.generator_adv_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.discriminator_adv_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.domain_class_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.domain_class_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.generator_adv_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.domain_class_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.calc_cycle_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.conditional_identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.wgan_gp_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ms_ssim_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.additional_identity_loss", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.ma_structure_loss"], ["", "", "def", "validate", "(", "self", ",", "val_files", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Test the performance of a model on a validation data set\n        :param val_files: Paths to validation files\n        :param epoch: How many epochs have been trained so far\n        :return: None\n        \"\"\"", "\n", "if", "not", "epoch", ":", "\n", "            ", "epoch", "=", "self", ".", "start_epoch", "\n", "", "bat_per_epo", "=", "int", "(", "len", "(", "val_files", ")", "/", "self", ".", "n_batch", ")", "\n", "val_number", "=", "min", "(", "map", "(", "len", ",", "val_files", ")", ")", "\n", "# Randomly shuffle the validation files (in place)", "\n", "for", "domain", "in", "val_files", ":", "\n", "            ", "random", ".", "shuffle", "(", "domain", ")", "\n", "# Only use a (random) subset of the validation images each epoch so that domains with more validation images", "\n", "# are not overshadowing the smaller domains regarding the overall validation loss, which dictates which", "\n", "# epochs are saved as checkpoints", "\n", "", "val_files_this_epoch", "=", "cut_out_files", "(", "val_files", ",", "val_number", ")", "\n", "random", ".", "shuffle", "(", "val_files_this_epoch", ")", "\n", "\n", "# Reset the batch losses for a new epoch", "\n", "self", ".", "validation_logger", ".", "reset_batch", "(", ")", "\n", "for", "update", "in", "range", "(", "bat_per_epo", ")", ":", "\n", "# Get a number of training images", "\n", "            ", "real_a", ",", "domains_a", "=", "get_real_samples", "(", "val_files_this_epoch", ",", "self", ".", "n_batch", ",", "update", ",", "\n", "domains", "=", "self", ".", "domains", ",", "return_domain_names", "=", "True", ",", "\n", "all_files", "=", "val_files", ")", "\n", "# Labels to translate from", "\n", "labels_a", "=", "self", ".", "domains_to_labels", "(", "domains_a", ")", "\n", "# Randomly select which domains to transfer to", "\n", "domains_b", "=", "self", ".", "get_random_domains_without_original", "(", "self", ".", "n_batch", ",", "domains_a", ")", "\n", "# Labels to translate to", "\n", "labels_b", "=", "self", ".", "domains_to_labels", "(", "domains_b", ")", "\n", "\n", "# Generator fake images of the domains to transfer to", "\n", "fake_b", "=", "self", ".", "generator", "(", "[", "real_a", ",", "labels_b", "]", ",", "training", "=", "False", ")", "\n", "\n", "# Get results of the discriminator for real and fake data", "\n", "disc_real_a", "=", "self", ".", "discriminator", "(", "real_a", ",", "training", "=", "False", ")", "\n", "disc_fake_b", "=", "self", ".", "discriminator", "(", "fake_b", ",", "training", "=", "False", ")", "\n", "\n", "# -------------ADVERSARIAL LOSS--------------------------:", "\n", "# Loss indicating whether the discriminator was able to tell fake from real images", "\n", "# Adversarial loss of the generator depends on whether the discriminator could tell", "\n", "# that the generated images aren't real", "\n", "gen_adv_loss", "=", "self", ".", "generator_adv_loss", "(", "prob_fake_is_real", "=", "disc_fake_b", "[", "0", "]", ")", "\n", "# Adversarial loss of the discriminator is a combination of the loss on real and fake data", "\n", "discriminator_adv_loss", "=", "self", ".", "discriminator_adv_loss", "(", "prob_real_is_real", "=", "disc_real_a", "[", "0", "]", ",", "\n", "prob_fake_is_real", "=", "disc_fake_b", "[", "0", "]", ")", "\n", "\n", "if", "not", "self", ".", "lambda_gradient_penalty", "==", "0", ":", "\n", "# --------------WGAN - gradient penalty loss------------:", "\n", "# Only relevant for the discriminator", "\n", "                ", "gradient_penalty", "=", "self", ".", "wgan_gp_loss", "(", "real_a", ",", "fake_b", ")", "\n", "", "else", ":", "\n", "                ", "gradient_penalty", "=", "0", "\n", "# -------------DOMAIN CLASSIFICATION LOSS----------------:", "\n", "# The domain classification loss indicates whether the discriminator could correctly tell the domain", "\n", "# the real and fake images are supposed to belong to, the loss on the real data is used for the", "\n", "# discriminator and on the fake data on the generator", "\n", "", "domain_class_real_loss", "=", "self", ".", "domain_class_loss", "(", "real_label", "=", "labels_a", ",", "predicted_label", "=", "disc_real_a", "[", "1", "]", ")", "\n", "domain_class_fake_loss", "=", "self", ".", "domain_class_loss", "(", "real_label", "=", "labels_b", ",", "predicted_label", "=", "disc_fake_b", "[", "1", "]", ")", "\n", "\n", "# -------------RECONSTRUCTION LOSS-----------------------:", "\n", "# Reconstruct original images by translating back to domain a", "\n", "cycled_a", "=", "self", ".", "generator", "(", "[", "fake_b", ",", "labels_a", "]", ",", "training", "=", "False", ")", "\n", "reconstruction_loss", "=", "self", ".", "calc_cycle_loss", "(", "real_a", ",", "cycled_a", ")", "\n", "\n", "# ---------------CONDITIONAL IDENTITY LOSS----------------------------:", "\n", "# Same-domain translation (ideally no change)", "\n", "same_a", "=", "self", ".", "generator", "(", "[", "real_a", ",", "labels_a", "]", ",", "training", "=", "False", ")", "\n", "# Get result of the discriminator", "\n", "disc_same_a", "=", "self", ".", "discriminator", "(", "same_a", ",", "training", "=", "False", ")", "\n", "# Adversarial loss of the generator on the same-domain translation", "\n", "gen_adv_id_loss", "=", "self", ".", "generator_adv_loss", "(", "prob_fake_is_real", "=", "disc_same_a", "[", "0", "]", ")", "\n", "# Generate cycled images", "\n", "cycled_same_a", "=", "self", ".", "generator", "(", "[", "same_a", ",", "labels_a", "]", ",", "training", "=", "False", ")", "\n", "# Domain classification loss on the same-domain translation", "\n", "domain_class_id_loss", "=", "self", ".", "domain_class_loss", "(", "real_label", "=", "labels_a", ",", "predicted_label", "=", "disc_same_a", "[", "1", "]", ")", "\n", "# Reconstruct original image", "\n", "reconstruction_id_loss", "=", "self", ".", "calc_cycle_loss", "(", "real_a", ",", "cycled_same_a", ")", "\n", "# Identity loss of the same-domain translation", "\n", "id_loss", "=", "self", ".", "conditional_identity_loss", "(", "real_a", ",", "same_a", ")", "\n", "cond_identity_loss", "=", "gen_adv_id_loss", "+", "domain_class_id_loss", "+", "reconstruction_id_loss", "+", "id_loss", "\n", "\n", "# --------------ADDITIONAL LOSSES-------------------------:", "\n", "if", "'ms_ssim_loss'", "in", "self", ".", "additional_losses", ":", "\n", "                ", "reconstruction_loss", "+=", "self", ".", "ms_ssim_loss", "(", "real_a", ",", "cycled_a", ")", "\n", "", "if", "'add_identity_loss'", "in", "self", ".", "additional_losses", "and", "epoch", "<", "20", ":", "\n", "                ", "cond_identity_loss", "+=", "self", ".", "additional_identity_loss", "(", "real_a", ",", "same_a", ",", "epoch", ",", "final_epoch", "=", "20", ")", "\n", "", "if", "'ma_structure_loss'", "in", "self", ".", "additional_losses", ":", "\n", "                ", "structure_loss", "=", "self", ".", "ma_structure_loss", "(", "real_a", ",", "fake_b", ")", "\n", "", "else", ":", "\n", "                ", "structure_loss", "=", "0", "\n", "# -------------Total generator loss-----------------------:", "\n", "# = adversarial loss + domain class loss + reconstruction loss + conditional identity loss", "\n", "", "generator_loss", "=", "gen_adv_loss", "+", "domain_class_fake_loss", "+", "reconstruction_loss", "+", "cond_identity_loss", "+", "structure_loss", "\n", "# -------------Total discriminator loss-------------------:", "\n", "# = adversarial loss + gradient penalty + class loss", "\n", "discriminator_loss", "=", "discriminator_adv_loss", "+", "gradient_penalty", "+", "domain_class_real_loss", "\n", "losses", "=", "[", "discriminator_loss", ",", "discriminator_adv_loss", ",", "gradient_penalty", ",", "\n", "domain_class_real_loss", ",", "generator_loss", ",", "gen_adv_loss", ",", "\n", "domain_class_fake_loss", ",", "cond_identity_loss", ",", "reconstruction_loss", "]", "\n", "self", ".", "validation_logger", ".", "log_batch", "(", "losses", ")", "\n", "# Add validation summary to sacred", "\n", "", "self", ".", "validation_logger", ".", "log_to_ex", "(", "epoch", ")", "\n", "# Get generator validation losses for early stopping", "\n", "mean_val_losses", "=", "self", ".", "validation_logger", ".", "get_batch_mean", "(", ")", "\n", "absolute_generator_loss", "=", "abs", "(", "mean_val_losses", "[", "5", "]", ")", "+", "abs", "(", "mean_val_losses", "[", "6", "]", ")", "+", "abs", "(", "mean_val_losses", "[", "7", "]", ")", "+", "abs", "(", "mean_val_losses", "[", "8", "]", ")", "\n", "return", "absolute_generator_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.transform_images": [[673, 709], ["str", "fixedpointgan_main.FixedPointGAN.domains_to_labels", "enumerate", "numpy.array", "filename.rsplit", "path.split", "os.path.exists", "os.makedirs", "os.path.isfile", "print", "debiasmedimg.cyclegan.util.get_sample_from_path", "fixedpointgan_main.FixedPointGAN.generator", "print", "debiasmedimg.cyclegan.util.laplacian_upsampling", "numpy.squeeze", "debiasmedimg.cyclegan.util.normalize_for_display", "print", "os.path.isfile", "matplotlib.image.imsave", "matplotlib.image.imsave", "matplotlib.image.imsave", "matplotlib.image.imsave", "sample_fullsize.numpy", "fixedpointgan_main.FixedPointGAN.numpy"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.domains_to_labels", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.laplacian_scaling.laplacian_upsampling", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_display"], ["", "def", "transform_images", "(", "self", ",", "files", ",", "original_domain", ",", "domain_to_translate_to", ",", "val_test", ")", ":", "\n", "        ", "\"\"\"\n        Transform images using the generators\n        :param files: Numpy array containing all paths of files to transform\n        :param original_domain: Domain to translate from\n        :param domain_to_translate_to: Which domain the images are transformed to\n        :param val_test: Whether the images are used for validating or testing\n        :return: None\n        \"\"\"", "\n", "str_epoch", "=", "str", "(", "self", ".", "start_epoch", ")", "\n", "label_out", "=", "self", ".", "domains_to_labels", "(", "np", ".", "array", "(", "[", "domain_to_translate_to", "]", ")", ")", "\n", "for", "ix", ",", "path", "in", "enumerate", "(", "files", ")", ":", "\n", "# Cut off path", "\n", "            ", "filename", "=", "path", ".", "split", "(", "settings", ".", "DB_DIR", ")", "[", "1", "]", "\n", "# Cut off filename", "\n", "path_to_file", ",", "filename", "=", "filename", ".", "rsplit", "(", "'/'", ",", "1", ")", "\n", "path_sample_out", "=", "settings", ".", "OUTPUT_DIR", "+", "\"/generated_images/\"", "+", "self", ".", "run_id", "+", "\"/\"", "+", "str_epoch", "+", "\"/\"", "+", "\"to_\"", "+", "domain_to_translate_to", "+", "\"/\"", "+", "path_to_file", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_sample_out", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path_sample_out", ")", "\n", "", "if", "not", "(", "os", ".", "path", ".", "isfile", "(", "path_sample_out", "+", "filename", ")", ")", ":", "\n", "# and os.path.isfile(path_cycled_out + filename)):", "\n", "                ", "print", "(", "\"Reading in image\"", ")", "\n", "sample_fullsize", ",", "sample", ",", "original_size", "=", "get_sample_from_path", "(", "path", ")", "\n", "sample_out", "=", "self", ".", "generator", "(", "[", "sample", ",", "label_out", "]", ",", "training", "=", "False", ")", "\n", "print", "(", "\"Upsampling generated image\"", ")", "\n", "sample_out_upsampled", "=", "laplacian_upsampling", "(", "originals", "=", "sample_fullsize", ".", "numpy", "(", ")", ",", "\n", "inputs", "=", "sample_out", ".", "numpy", "(", ")", ",", "\n", "original_shape", "=", "original_size", ")", "\n", "# Remove batch dimension", "\n", "sample_out_upsampled", "=", "np", ".", "squeeze", "(", "sample_out_upsampled", ")", "\n", "# Normalize for display", "\n", "sample_out_upsampled", "=", "normalize_for_display", "(", "sample_out_upsampled", ")", "\n", "print", "(", "path_sample_out", "+", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path_sample_out", "+", "filename", ")", ":", "\n", "                    ", "matplotlib", ".", "image", ".", "imsave", "(", "path_sample_out", "+", "filename", ",", "sample_out_upsampled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.evaluate": [[710, 796], ["str", "debiasmedimg.cyclegan.util.get_filenames", "fixedpointgan_main.FixedPointGAN.domains.index", "copy.deepcopy", "copy.deepcopy.remove", "print", "enumerate", "paths_out.append", "fixedpointgan_main.FixedPointGAN.transform_images", "print", "enumerate", "fixedpointgan_main.FixedPointGAN.domains.index", "print", "debiasmedimg.cyclegan.util.get_all_samples", "debiasmedimg.cyclegan.util.get_all_samples", "debiasmedimg.cyclegan.util.get_all_samples", "print", "debiasmedimg.cyclegan.util.get_fid", "debiasmedimg.cyclegan.util.get_fid", "fixedpointgan_main.FixedPointGAN.eval_val_logger.reset_batch", "fixedpointgan_main.FixedPointGAN.eval_test_logger.reset_batch", "numpy.squeeze", "numpy.squeeze", "debiasmedimg.cyclegan.util.normalize_for_evaluation", "debiasmedimg.cyclegan.util.normalize_for_evaluation", "debiasmedimg.cyclegan.util.ssim_score", "print", "os.path.join", "fixedpointgan_main.FixedPointGAN.eval_val_logger.log_specific_batch", "fixedpointgan_main.FixedPointGAN.eval_val_logger.log_to_ex", "fixedpointgan_main.FixedPointGAN.eval_val_logger.get_batch_mean", "debiasmedimg.cyclegan.util.save_to_csv", "fixedpointgan_main.FixedPointGAN.eval_test_logger.log_specific_batch", "fixedpointgan_main.FixedPointGAN.eval_test_logger.log_to_ex", "fixedpointgan_main.FixedPointGAN.eval_test_logger.get_batch_mean", "debiasmedimg.cyclegan.util.save_to_csv", "path.split", "fixedpointgan_main.FixedPointGAN.eval_val_logger.log_specific_batch", "fixedpointgan_main.FixedPointGAN.eval_test_logger.log_specific_batch", "os.walk", "debiasmedimg.cyclegan.util.get_sample_from_path", "debiasmedimg.cyclegan.util.get_sample_from_path", "len"], "methods", ["home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_filenames", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.fixedpointgan.fixedpointgan_main.FixedPointGAN.transform_images", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_all_samples", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.get_fid", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.get_fid", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.reset_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.reset_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_evaluation", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.normalize_for_evaluation", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.evaluation.ssim_score", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_to_ex", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.get_batch_mean", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.save_to_csv", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_to_ex", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.get_batch_mean", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.save_to_csv", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.logger.Logger.log_specific_batch", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path", "home.repos.pwc.inspect_result.imsb-uke_bias-transfer-microscopy.util.dataset_interactions.get_sample_from_path"], ["", "", "", "", "def", "evaluate", "(", "self", ",", "csv_file", ",", "val_test", ",", "domain_a", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate a loaded model by inspecting the transformed and cycled images\n        :param csv_file: CSV file containing info on the images\n        :param val_test: Whether the current evaluation is for validation or testing\n        :param domain_a: Domain to transform\n        :param dataset: Name of the dataset\n        \"\"\"", "\n", "epoch", "=", "self", ".", "start_epoch", "\n", "str_epoch", "=", "str", "(", "epoch", ")", "\n", "run_id", "=", "self", ".", "run_id", "\n", "\n", "# Prepare file names", "\n", "files", "=", "get_filenames", "(", "csv_file", ",", "self", ".", "domains", ")", "\n", "a_id", "=", "self", ".", "domains", ".", "index", "(", "domain_a", ")", "\n", "files_a", "=", "files", "[", "a_id", "]", "\n", "\n", "# Get target domains", "\n", "target_domains", "=", "deepcopy", "(", "self", ".", "domains", ")", "\n", "target_domains", ".", "remove", "(", "domain_a", ")", "\n", "print", "(", "\"Target domains:\"", ",", "target_domains", ")", "\n", "\n", "# Generate transformed and cycled images if they don't exist already", "\n", "paths_out", "=", "[", "]", "\n", "for", "domain_b", "in", "target_domains", ":", "\n", "            ", "path_out", "=", "settings", ".", "OUTPUT_DIR", "+", "\"/generated_images/\"", "+", "run_id", "+", "\"/\"", "+", "str_epoch", "+", "\"/\"", "+", "\"to_\"", "+", "domain_b", "+", "\"/\"", "\n", "paths_out", ".", "append", "(", "path_out", ")", "\n", "self", ".", "transform_images", "(", "files_a", ",", "original_domain", "=", "domain_a", ",", "domain_to_translate_to", "=", "domain_b", ",", "val_test", "=", "val_test", ")", "\n", "\n", "", "for", "idx", ",", "domain_b", "in", "enumerate", "(", "target_domains", ")", ":", "\n", "            ", "if", "val_test", "==", "'validate'", ":", "\n", "                ", "self", ".", "eval_val_logger", ".", "reset_batch", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "eval_test_logger", ".", "reset_batch", "(", ")", "\n", "\n", "", "print", "(", "\"Evaluating transformation to\"", ",", "domain_b", ")", "\n", "for", "ix", ",", "path", "in", "enumerate", "(", "files_a", ")", ":", "\n", "                ", "filename", "=", "path", ".", "split", "(", "settings", ".", "DB_DIR", ")", "[", "1", "]", "\n", "# Read in images in full size, remove batch dimension", "\n", "original_fullsize", "=", "np", ".", "squeeze", "(", "get_sample_from_path", "(", "path", ")", "[", "0", "]", ")", "\n", "transformed_upsampled", "=", "np", ".", "squeeze", "(", "get_sample_from_path", "(", "paths_out", "[", "idx", "]", "+", "filename", ")", "[", "0", "]", ")", "\n", "original_fullsize", "=", "normalize_for_evaluation", "(", "original_fullsize", ")", "\n", "transformed_upsampled", "=", "normalize_for_evaluation", "(", "transformed_upsampled", ")", "\n", "# Get the SSIM scores between input and output of the generators", "\n", "ssim_inout", "=", "ssim_score", "(", "original_fullsize", ",", "transformed_upsampled", ")", "\n", "if", "val_test", "==", "'validate'", ":", "\n", "                    ", "self", ".", "eval_val_logger", ".", "log_specific_batch", "(", "[", "ssim_inout", "]", ",", "ids", "=", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "eval_test_logger", ".", "log_specific_batch", "(", "[", "ssim_inout", "]", ",", "ids", "=", "[", "0", "]", ")", "\n", "", "print", "(", "\"Completed {}/{}\"", ".", "format", "(", "ix", "+", "1", ",", "len", "(", "files_a", ")", ")", ")", "\n", "\n", "# Read in all images again for FID", "\n", "", "b_id", "=", "self", ".", "domains", ".", "index", "(", "domain_b", ")", "\n", "files_b", "=", "files", "[", "b_id", "]", "\n", "\n", "print", "(", "\"Reading in images\"", ")", "\n", "# Get full paths of transformed images", "\n", "a_fullsize", "=", "get_all_samples", "(", "files_a", ")", "\n", "b_fullsize", "=", "get_all_samples", "(", "files_b", ")", "\n", "files_transformed_a", "=", "[", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", "for", "path", ",", "subdirs", ",", "files", "in", "os", ".", "walk", "(", "paths_out", "[", "idx", "]", ")", "\n", "for", "name", "in", "files", "]", "\n", "to_b_upsampled", "=", "get_all_samples", "(", "files_transformed_a", ")", "\n", "\n", "# FID score:", "\n", "print", "(", "\"Calculating FID score between real domains and generated domains\"", ")", "\n", "fid_orig", "=", "get_fid", "(", "a_fullsize", ",", "b_fullsize", ")", "\n", "fid_b", "=", "get_fid", "(", "b_fullsize", ",", "to_b_upsampled", ")", "\n", "\n", "# Add summary to sacred", "\n", "if", "val_test", "==", "'validate'", ":", "\n", "                ", "self", ".", "eval_val_logger", ".", "log_specific_batch", "(", "[", "fid_orig", ",", "fid_b", "]", ",", "ids", "=", "[", "1", ",", "2", "]", ")", "\n", "self", ".", "eval_val_logger", ".", "log_to_ex", "(", "epoch", ")", "\n", "# Add validation summary to csv file", "\n", "means", "=", "self", ".", "eval_val_logger", ".", "get_batch_mean", "(", ")", "\n", "save_to_csv", "(", "self", ".", "run_id", ",", "epoch", ",", "domain_a", ",", "domain_b", ",", "approach", "=", "\"fixedpointgan\"", ",", "dataset", "=", "dataset", ",", "\n", "means", "=", "means", ",", "validate", "=", "True", ",", "only_ab", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "                ", "self", ".", "eval_test_logger", ".", "log_specific_batch", "(", "[", "fid_orig", ",", "fid_b", "]", ",", "ids", "=", "[", "1", ",", "2", "]", ")", "\n", "self", ".", "eval_test_logger", ".", "log_to_ex", "(", "epoch", ")", "\n", "\n", "# Add test summary to csv file", "\n", "means", "=", "self", ".", "eval_test_logger", ".", "get_batch_mean", "(", ")", "\n", "save_to_csv", "(", "self", ".", "run_id", ",", "epoch", ",", "domain_a", ",", "domain_b", ",", "approach", "=", "\"fixedpointgan\"", ",", "dataset", "=", "dataset", ",", "\n", "means", "=", "means", ",", "validate", "=", "False", ",", "only_ab", "=", "True", ")", "\n", "\n"]]}