{"home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN.__init__": [[23, 158], ["LightGCN.LightGCN.norm_adj.count_nonzero", "eval", "len", "eval", "LightGCN.LightGCN.create_model_str", "eval", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.merge", "LightGCN.LightGCN._init_weights", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "LightGCN.LightGCN.create_bpr_loss", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.get_collection", "LightGCN.LightGCN._create_lightgcn_embed", "LightGCN.LightGCN._create_ngcf_embed", "tensorflow.train.AdamOptimizer", "LightGCN.LightGCN._create_gcn_embed", "LightGCN.LightGCN._create_gcmc_embed"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN.create_model_str", "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._init_weights", "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN.create_bpr_loss", "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._create_lightgcn_embed", "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._create_ngcf_embed", "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._create_gcn_embed", "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._create_gcmc_embed"], ["    ", "def", "__init__", "(", "self", ",", "data_config", ",", "pretrain_data", ")", ":", "\n", "# argument settings", "\n", "        ", "self", ".", "model_type", "=", "'LightGCN'", "\n", "self", ".", "adj_type", "=", "args", ".", "adj_type", "\n", "self", ".", "alg_type", "=", "args", ".", "alg_type", "\n", "self", ".", "pretrain_data", "=", "pretrain_data", "\n", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "self", ".", "n_fold", "=", "100", "\n", "self", ".", "norm_adj", "=", "data_config", "[", "'norm_adj'", "]", "\n", "self", ".", "n_nonzero_elems", "=", "self", ".", "norm_adj", ".", "count_nonzero", "(", ")", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "self", ".", "weight_size", "=", "eval", "(", "args", ".", "layer_size", ")", "\n", "self", ".", "n_layers", "=", "len", "(", "self", ".", "weight_size", ")", "\n", "self", ".", "regs", "=", "eval", "(", "args", ".", "regs", ")", "\n", "self", ".", "decay", "=", "self", ".", "regs", "[", "0", "]", "\n", "self", ".", "log_dir", "=", "self", ".", "create_model_str", "(", ")", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "self", ".", "Ks", "=", "eval", "(", "args", ".", "Ks", ")", "\n", "\n", "\n", "'''\n        *********************************************************\n        Create Placeholder for Input Data & Dropout.\n        '''", "\n", "# placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "self", ".", "node_dropout_flag", "=", "args", ".", "node_dropout_flag", "\n", "self", ".", "node_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "mess_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "with", "tf", ".", "name_scope", "(", "'TRAIN_LOSS'", ")", ":", "\n", "            ", "self", ".", "train_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_loss'", ",", "self", ".", "train_loss", ")", "\n", "self", ".", "train_mf_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_mf_loss'", ",", "self", ".", "train_mf_loss", ")", "\n", "self", ".", "train_emb_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_emb_loss'", ",", "self", ".", "train_emb_loss", ")", "\n", "self", ".", "train_reg_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_reg_loss'", ",", "self", ".", "train_reg_loss", ")", "\n", "", "self", ".", "merged_train_loss", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TRAIN_LOSS'", ")", ")", "\n", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'TRAIN_ACC'", ")", ":", "\n", "            ", "self", ".", "train_rec_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "#record for top(Ks[0])", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_rec_first'", ",", "self", ".", "train_rec_first", ")", "\n", "self", ".", "train_rec_last", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "#record for top(Ks[-1])", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_rec_last'", ",", "self", ".", "train_rec_last", ")", "\n", "self", ".", "train_ndcg_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_ndcg_first'", ",", "self", ".", "train_ndcg_first", ")", "\n", "self", ".", "train_ndcg_last", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'train_ndcg_last'", ",", "self", ".", "train_ndcg_last", ")", "\n", "", "self", ".", "merged_train_acc", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TRAIN_ACC'", ")", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'TEST_LOSS'", ")", ":", "\n", "            ", "self", ".", "test_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_loss'", ",", "self", ".", "test_loss", ")", "\n", "self", ".", "test_mf_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_mf_loss'", ",", "self", ".", "test_mf_loss", ")", "\n", "self", ".", "test_emb_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_emb_loss'", ",", "self", ".", "test_emb_loss", ")", "\n", "self", ".", "test_reg_loss", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_reg_loss'", ",", "self", ".", "test_reg_loss", ")", "\n", "", "self", ".", "merged_test_loss", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TEST_LOSS'", ")", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'TEST_ACC'", ")", ":", "\n", "            ", "self", ".", "test_rec_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_rec_first'", ",", "self", ".", "test_rec_first", ")", "\n", "self", ".", "test_rec_last", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_rec_last'", ",", "self", ".", "test_rec_last", ")", "\n", "self", ".", "test_ndcg_first", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_ndcg_first'", ",", "self", ".", "test_ndcg_first", ")", "\n", "self", ".", "test_ndcg_last", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'test_ndcg_last'", ",", "self", ".", "test_ndcg_last", ")", "\n", "", "self", ".", "merged_test_acc", "=", "tf", ".", "summary", ".", "merge", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "SUMMARIES", ",", "'TEST_ACC'", ")", ")", "\n", "\"\"\"\n        *********************************************************\n        Create Model Parameters (i.e., Initialize Weights).\n        \"\"\"", "\n", "# initialization of model parameters", "\n", "self", ".", "weights", "=", "self", ".", "_init_weights", "(", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Compute Graph-based Representations of all users & items via Message-Passing Mechanism of Graph Neural Networks.\n        Different Convolutional Layers:\n            1. ngcf: defined in 'Neural Graph Collaborative Filtering', SIGIR2019;\n            2. gcn:  defined in 'Semi-Supervised Classification with Graph Convolutional Networks', ICLR2018;\n            3. gcmc: defined in 'Graph Convolutional Matrix Completion', KDD2018;\n        \"\"\"", "\n", "if", "self", ".", "alg_type", "in", "[", "'lightgcn'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_lightgcn_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'ngcf'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_ngcf_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'gcn'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_gcn_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'gcmc'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_gcmc_embed", "(", ")", "\n", "\n", "", "\"\"\"\n        *********************************************************\n        Establish the final representations for user-item pairs in batch.\n        \"\"\"", "\n", "self", ".", "u_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ua_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings", ",", "self", ".", "neg_items", ")", "\n", "self", ".", "u_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "neg_items", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Inference for the testing phase.\n        \"\"\"", "\n", "self", ".", "batch_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_g_embeddings", ",", "self", ".", "pos_i_g_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Generate Predictions & Optimize via BPR loss.\n        \"\"\"", "\n", "self", ".", "mf_loss", ",", "self", ".", "emb_loss", ",", "self", ".", "reg_loss", "=", "self", ".", "create_bpr_loss", "(", "self", ".", "u_g_embeddings", ",", "\n", "self", ".", "pos_i_g_embeddings", ",", "\n", "self", ".", "neg_i_g_embeddings", ")", "\n", "self", ".", "loss", "=", "self", ".", "mf_loss", "+", "self", ".", "emb_loss", "\n", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN.create_model_str": [[160, 164], ["str", "str", "str", "str"], "methods", ["None"], ["", "def", "create_model_str", "(", "self", ")", ":", "\n", "        ", "log_dir", "=", "'/'", "+", "self", ".", "alg_type", "+", "'/layers_'", "+", "str", "(", "self", ".", "n_layers", ")", "+", "'/dim_'", "+", "str", "(", "self", ".", "emb_dim", ")", "\n", "log_dir", "+=", "'/'", "+", "args", ".", "dataset", "+", "'/lr_'", "+", "str", "(", "self", ".", "lr", ")", "+", "'/reg_'", "+", "str", "(", "self", ".", "decay", ")", "\n", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._init_weights": [[166, 199], ["dict", "tensorflow.random_normal_initializer", "range", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.random_normal_initializer.", "tensorflow.random_normal_initializer.", "tensorflow.random_normal_initializer.", "tensorflow.random_normal_initializer.", "tensorflow.random_normal_initializer.", "tensorflow.random_normal_initializer.", "tensorflow.random_normal_initializer.", "tensorflow.random_normal_initializer."], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "all_weights", "=", "dict", "(", ")", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "0.01", ")", "#tf.contrib.layers.xavier_initializer()", "\n", "if", "self", ".", "pretrain_data", "is", "None", ":", "\n", "            ", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_embedding'", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_embedding'", ")", "\n", "print", "(", "'using random initialization'", ")", "#print('using xavier initialization')", "\n", "", "else", ":", "\n", "            ", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'user_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'user_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'item_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'item_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "print", "(", "'using pretrained initialization'", ")", "\n", "\n", "", "self", ".", "weight_size_list", "=", "[", "self", ".", "emb_dim", "]", "+", "self", ".", "weight_size", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "all_weights", "[", "'W_gc_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_gc_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_gc_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_gc_%d'", "%", "k", ")", "\n", "\n", "all_weights", "[", "'W_bi_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_bi_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_bi_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_bi_%d'", "%", "k", ")", "\n", "\n", "all_weights", "[", "'W_mlp_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_mlp_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_mlp_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_mlp_%d'", "%", "k", ")", "\n", "\n", "", "return", "all_weights", "\n", "", "def", "_split_A_hat", "(", "self", ",", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._split_A_hat": [[199, 212], ["range", "A_fold_hat.append", "LightGCN.LightGCN._convert_sp_mat_to_sp_tensor"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._convert_sp_mat_to_sp_tensor"], ["", "def", "_split_A_hat", "(", "self", ",", "X", ")", ":", "\n", "        ", "A_fold_hat", "=", "[", "]", "\n", "\n", "fold_len", "=", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ")", "//", "self", ".", "n_fold", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_users", "+", "self", ".", "n_items", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "\n", "", "A_fold_hat", ".", "append", "(", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "X", "[", "start", ":", "end", "]", ")", ")", "\n", "", "return", "A_fold_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._split_A_hat_node_dropout": [[213, 229], ["range", "LightGCN.LightGCN._convert_sp_mat_to_sp_tensor", "X[].count_nonzero", "A_fold_hat.append", "LightGCN.LightGCN._dropout_sparse"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._convert_sp_mat_to_sp_tensor", "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._dropout_sparse"], ["", "def", "_split_A_hat_node_dropout", "(", "self", ",", "X", ")", ":", "\n", "        ", "A_fold_hat", "=", "[", "]", "\n", "\n", "fold_len", "=", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ")", "//", "self", ".", "n_fold", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_users", "+", "self", ".", "n_items", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "\n", "", "temp", "=", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "X", "[", "start", ":", "end", "]", ")", "\n", "n_nonzero_temp", "=", "X", "[", "start", ":", "end", "]", ".", "count_nonzero", "(", ")", "\n", "A_fold_hat", ".", "append", "(", "self", ".", "_dropout_sparse", "(", "temp", ",", "1", "-", "self", ".", "node_dropout", "[", "0", "]", ",", "n_nonzero_temp", ")", ")", "\n", "\n", "", "return", "A_fold_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._create_lightgcn_embed": [[230, 252], ["tensorflow.concat", "range", "tensorflow.stack", "tensorflow.reduce_mean", "tensorflow.split", "LightGCN.LightGCN._split_A_hat_node_dropout", "LightGCN.LightGCN._split_A_hat", "range", "tensorflow.concat", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._split_A_hat_node_dropout", "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._split_A_hat"], ["", "def", "_create_lightgcn_embed", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "node_dropout_flag", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat_node_dropout", "(", "self", ".", "norm_adj", ")", "\n", "", "else", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "ego_embeddings", ")", ")", "\n", "\n", "", "side_embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "ego_embeddings", "=", "side_embeddings", "\n", "all_embeddings", "+=", "[", "ego_embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "stack", "(", "all_embeddings", ",", "1", ")", "\n", "all_embeddings", "=", "tf", ".", "reduce_mean", "(", "all_embeddings", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._create_ngcf_embed": [[253, 292], ["tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "LightGCN.LightGCN._split_A_hat_node_dropout", "LightGCN.LightGCN._split_A_hat", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.multiply", "tensorflow.nn.leaky_relu", "tensorflow.nn.l2_normalize", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._split_A_hat_node_dropout", "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._split_A_hat"], ["", "def", "_create_ngcf_embed", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "node_dropout_flag", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat_node_dropout", "(", "self", ".", "norm_adj", ")", "\n", "", "else", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "ego_embeddings", ")", ")", "\n", "\n", "", "side_embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "sum_embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "side_embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "\n", "\n", "\n", "# bi messages of neighbors.", "\n", "bi_embeddings", "=", "tf", ".", "multiply", "(", "ego_embeddings", ",", "side_embeddings", ")", "\n", "# transformed bi messages of neighbors.", "\n", "bi_embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "bi_embeddings", ",", "self", ".", "weights", "[", "'W_bi_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_bi_%d'", "%", "k", "]", ")", "\n", "# non-linear activation.", "\n", "ego_embeddings", "=", "sum_embeddings", "+", "bi_embeddings", "\n", "\n", "# message dropout.", "\n", "# ego_embeddings = tf.nn.dropout(ego_embeddings, 1 - self.mess_dropout[k])", "\n", "\n", "# normalize the distribution of embeddings.", "\n", "norm_embeddings", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "ego_embeddings", ",", "axis", "=", "1", ")", "\n", "\n", "all_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._create_gcn_embed": [[294, 315], ["LightGCN.LightGCN._split_A_hat", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._split_A_hat"], ["", "def", "_create_gcn_embed", "(", "self", ")", ":", "\n", "        ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "all_embeddings", "=", "[", "embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "embeddings", ")", ")", "\n", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "# embeddings = tf.nn.dropout(embeddings, 1 - self.mess_dropout[k])", "\n", "\n", "all_embeddings", "+=", "[", "embeddings", "]", "\n", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._create_gcmc_embed": [[316, 339], ["LightGCN.LightGCN._split_A_hat", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "temp_embed.append", "tensorflow.matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._split_A_hat"], ["", "def", "_create_gcmc_embed", "(", "self", ")", ":", "\n", "        ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "\n", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "all_embeddings", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "embeddings", ")", ")", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "# convolutional layer.", "\n", "embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "# dense layer.", "\n", "mlp_embeddings", "=", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_mlp_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_mlp_%d'", "%", "k", "]", "\n", "# mlp_embeddings = tf.nn.dropout(mlp_embeddings, 1 - self.mess_dropout[k])", "\n", "\n", "all_embeddings", "+=", "[", "mlp_embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN.create_bpr_loss": [[340, 356], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.softplus", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "pos_i_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_g_embeddings_pre", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "mf_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softplus", "(", "-", "(", "pos_scores", "-", "neg_scores", ")", ")", ")", "\n", "\n", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._convert_sp_mat_to_sp_tensor": [[357, 361], ["X.tocoo().astype", "np.mat().transpose", "tensorflow.SparseTensor", "X.tocoo", "np.mat"], "methods", ["None"], ["", "def", "_convert_sp_mat_to_sp_tensor", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "tf", ".", "SparseTensor", "(", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.LightGCN._dropout_sparse": [[362, 373], ["tensorflow.random_uniform", "tensorflow.cast", "tensorflow.sparse_retain", "tensorflow.floor", "tensorflow.div"], "methods", ["None"], ["", "def", "_dropout_sparse", "(", "self", ",", "X", ",", "keep_prob", ",", "n_nonzero_elems", ")", ":", "\n", "        ", "\"\"\"\n        Dropout for sparse tensors.\n        \"\"\"", "\n", "noise_shape", "=", "[", "n_nonzero_elems", "]", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random_uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse_retain", "(", "X", ",", "dropout_mask", ")", "\n", "\n", "return", "pre_out", "*", "tf", ".", "div", "(", "1.", ",", "keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.sample_thread.__init__": [[385, 387], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.sample_thread.run": [[387, 390], ["tensorflow.device", "data_generator.sample"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.sample"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "cpus", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "data", "=", "data_generator", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.sample_thread_test.__init__": [[392, 394], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.sample_thread_test.run": [[394, 397], ["tensorflow.device", "data_generator.sample_test"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.sample_test"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "cpus", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "data", "=", "data_generator", ".", "sample_test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.train_thread.__init__": [[400, 405], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "sess", ",", "sample", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "sample", "=", "sample", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.train_thread.run": [[405, 413], ["sess.run", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.train_thread_test.run"], ["", "def", "run", "(", "self", ")", ":", "\n", "\n", "        ", "users", ",", "pos_items", ",", "neg_items", "=", "self", ".", "sample", ".", "data", "\n", "self", ".", "data", "=", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "opt", ",", "self", ".", "model", ".", "loss", ",", "self", ".", "model", ".", "mf_loss", ",", "self", ".", "model", ".", "emb_loss", ",", "self", ".", "model", ".", "reg_loss", "]", ",", "\n", "feed_dict", "=", "{", "model", ".", "users", ":", "users", ",", "model", ".", "pos_items", ":", "pos_items", ",", "\n", "model", ".", "node_dropout", ":", "eval", "(", "args", ".", "node_dropout", ")", ",", "\n", "model", ".", "mess_dropout", ":", "eval", "(", "args", ".", "mess_dropout", ")", ",", "\n", "model", ".", "neg_items", ":", "neg_items", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.train_thread_test.__init__": [[415, 420], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "sess", ",", "sample", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "sample", "=", "sample", "\n", "", "def", "run", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.train_thread_test.run": [[420, 428], ["sess.run", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.train_thread_test.run"], ["", "def", "run", "(", "self", ")", ":", "\n", "\n", "        ", "users", ",", "pos_items", ",", "neg_items", "=", "self", ".", "sample", ".", "data", "\n", "self", ".", "data", "=", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "loss", ",", "self", ".", "model", ".", "mf_loss", ",", "self", ".", "model", ".", "emb_loss", "]", ",", "\n", "feed_dict", "=", "{", "model", ".", "users", ":", "users", ",", "model", ".", "pos_items", ":", "pos_items", ",", "\n", "model", ".", "neg_items", ":", "neg_items", ",", "\n", "model", ".", "node_dropout", ":", "eval", "(", "args", ".", "node_dropout", ")", ",", "\n", "model", ".", "mess_dropout", ":", "eval", "(", "args", ".", "mess_dropout", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.load_pretrained_data": [[374, 382], ["np.load", "print"], "function", ["None"], ["", "", "def", "load_pretrained_data", "(", ")", ":", "\n", "    ", "pretrain_path", "=", "'%spretrain/%s/%s.npz'", "%", "(", "args", ".", "proj_path", ",", "args", ".", "dataset", ",", "'embedding'", ")", "\n", "try", ":", "\n", "        ", "pretrain_data", "=", "np", ".", "load", "(", "pretrain_path", ")", "\n", "print", "(", "'load the pretrained embeddings.'", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pretrain_data", "=", "None", "\n", "", "return", "pretrain_data", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.__init__": [[14, 76], ["load_data.Data.print_statistics", "scipy.dok_matrix", "open", "f.readlines", "open", "f.readlines", "open", "open", "f_train.readlines", "f_test.readlines", "len", "l.strip.strip.strip().split", "int", "load_data.Data.exist_users.append", "max", "max", "len", "len", "l.strip.strip.strip", "max", "len", "l.strip.strip.strip", "l.strip.strip.strip", "int", "max", "max", "len", "int", "len", "l.strip.strip.strip", "int", "l.strip.strip.split", "int", "l.strip.strip.split", "l.strip.strip.split"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.print_statistics"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "train_file", "=", "path", "+", "'/train.txt'", "\n", "test_file", "=", "path", "+", "'/test.txt'", "\n", "\n", "self", ".", "n_users", ",", "self", ".", "n_items", "=", "0", ",", "0", "\n", "self", ".", "n_train", ",", "self", ".", "n_test", "=", "0", ",", "0", "\n", "self", ".", "neg_pools", "=", "{", "}", "\n", "\n", "self", ".", "exist_users", "=", "[", "]", "\n", "\n", "with", "open", "(", "train_file", ")", "as", "f", ":", "\n", "            ", "for", "l", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                    ", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", "[", "1", ":", "]", "]", "\n", "uid", "=", "int", "(", "l", "[", "0", "]", ")", "\n", "self", ".", "exist_users", ".", "append", "(", "uid", ")", "\n", "self", ".", "n_items", "=", "max", "(", "self", ".", "n_items", ",", "max", "(", "items", ")", ")", "\n", "self", ".", "n_users", "=", "max", "(", "self", ".", "n_users", ",", "uid", ")", "\n", "self", ".", "n_train", "+=", "len", "(", "items", ")", "\n", "\n", "", "", "", "with", "open", "(", "test_file", ")", "as", "f", ":", "\n", "            ", "for", "l", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                    ", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", "\n", "try", ":", "\n", "                        ", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "]", "\n", "", "except", "Exception", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "n_items", "=", "max", "(", "self", ".", "n_items", ",", "max", "(", "items", ")", ")", "\n", "self", ".", "n_test", "+=", "len", "(", "items", ")", "\n", "", "", "", "self", ".", "n_items", "+=", "1", "\n", "self", ".", "n_users", "+=", "1", "\n", "self", ".", "print_statistics", "(", ")", "\n", "self", ".", "R", "=", "sp", ".", "dok_matrix", "(", "(", "self", ".", "n_users", ",", "self", ".", "n_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "train_items", ",", "self", ".", "test_set", "=", "{", "}", ",", "{", "}", "\n", "with", "open", "(", "train_file", ")", "as", "f_train", ":", "\n", "            ", "with", "open", "(", "test_file", ")", "as", "f_test", ":", "\n", "                ", "for", "l", "in", "f_train", ".", "readlines", "(", ")", ":", "\n", "                    ", "if", "len", "(", "l", ")", "==", "0", ":", "break", "\n", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", "\n", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", "' '", ")", "]", "\n", "uid", ",", "train_items", "=", "items", "[", "0", "]", ",", "items", "[", "1", ":", "]", "\n", "\n", "for", "i", "in", "train_items", ":", "\n", "                        ", "self", ".", "R", "[", "uid", ",", "i", "]", "=", "1.", "\n", "\n", "", "self", ".", "train_items", "[", "uid", "]", "=", "train_items", "\n", "\n", "", "for", "l", "in", "f_test", ".", "readlines", "(", ")", ":", "\n", "                    ", "if", "len", "(", "l", ")", "==", "0", ":", "break", "\n", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", "\n", "try", ":", "\n", "                        ", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", "' '", ")", "]", "\n", "", "except", "Exception", ":", "\n", "                        ", "continue", "\n", "\n", "", "uid", ",", "test_items", "=", "items", "[", "0", "]", ",", "items", "[", "1", ":", "]", "\n", "self", ".", "test_set", "[", "uid", "]", "=", "test_items", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.get_adj_mat": [[77, 107], ["time.time.time", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "print", "scipy.load_npz", "load_data.Data.create_adj_mat", "scipy.save_npz", "scipy.save_npz", "scipy.save_npz", "numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.diags.dot", "norm_adj.dot.dot.dot", "print", "norm_adj.dot.dot.tocsr", "scipy.save_npz", "time.time.time", "scipy.load_npz.sum", "numpy.power", "numpy.isinf"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.create_adj_mat"], ["", "", "", "", "def", "get_adj_mat", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "t1", "=", "time", "(", ")", "\n", "adj_mat", "=", "sp", ".", "load_npz", "(", "self", ".", "path", "+", "'/s_adj_mat.npz'", ")", "\n", "norm_adj_mat", "=", "sp", ".", "load_npz", "(", "self", ".", "path", "+", "'/s_norm_adj_mat.npz'", ")", "\n", "mean_adj_mat", "=", "sp", ".", "load_npz", "(", "self", ".", "path", "+", "'/s_mean_adj_mat.npz'", ")", "\n", "print", "(", "'already load adj matrix'", ",", "adj_mat", ".", "shape", ",", "time", "(", ")", "-", "t1", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "            ", "adj_mat", ",", "norm_adj_mat", ",", "mean_adj_mat", "=", "self", ".", "create_adj_mat", "(", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_adj_mat.npz'", ",", "adj_mat", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_norm_adj_mat.npz'", ",", "norm_adj_mat", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_mean_adj_mat.npz'", ",", "mean_adj_mat", ")", "\n", "\n", "", "try", ":", "\n", "            ", "pre_adj_mat", "=", "sp", ".", "load_npz", "(", "self", ".", "path", "+", "'/s_pre_adj_mat.npz'", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "adj_mat", "=", "adj_mat", "\n", "rowsum", "=", "np", ".", "array", "(", "adj_mat", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "norm_adj", "=", "d_mat_inv", ".", "dot", "(", "adj_mat", ")", "\n", "norm_adj", "=", "norm_adj", ".", "dot", "(", "d_mat_inv", ")", "\n", "print", "(", "'generate pre adjacency matrix.'", ")", "\n", "pre_adj_mat", "=", "norm_adj", ".", "tocsr", "(", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_pre_adj_mat.npz'", ",", "norm_adj", ")", "\n", "\n", "", "return", "adj_mat", ",", "norm_adj_mat", ",", "mean_adj_mat", ",", "pre_adj_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.create_adj_mat": [[108, 147], ["time.time.time", "scipy.dok_matrix", "adj_mat.todok.todok.tolil", "load_data.Data.R.tolil", "range", "adj_mat.todok.todok.todok", "print", "time.time.time", "load_data.Data.create_adj_mat.normalized_adj_single"], "methods", ["None"], ["", "def", "create_adj_mat", "(", "self", ")", ":", "\n", "        ", "t1", "=", "time", "(", ")", "\n", "adj_mat", "=", "sp", ".", "dok_matrix", "(", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ",", "self", ".", "n_users", "+", "self", ".", "n_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "adj_mat", "=", "adj_mat", ".", "tolil", "(", ")", "\n", "R", "=", "self", ".", "R", ".", "tolil", "(", ")", "\n", "# prevent memory from overflowing", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "adj_mat", "[", "int", "(", "self", ".", "n_users", "*", "i", "/", "5.0", ")", ":", "int", "(", "self", ".", "n_users", "*", "(", "i", "+", "1.0", ")", "/", "5", ")", ",", "self", ".", "n_users", ":", "]", "=", "R", "[", "int", "(", "self", ".", "n_users", "*", "i", "/", "5.0", ")", ":", "int", "(", "self", ".", "n_users", "*", "(", "i", "+", "1.0", ")", "/", "5", ")", "]", "\n", "adj_mat", "[", "self", ".", "n_users", ":", ",", "int", "(", "self", ".", "n_users", "*", "i", "/", "5.0", ")", ":", "int", "(", "self", ".", "n_users", "*", "(", "i", "+", "1.0", ")", "/", "5", ")", "]", "=", "R", "[", "int", "(", "self", ".", "n_users", "*", "i", "/", "5.0", ")", ":", "int", "(", "self", ".", "n_users", "*", "(", "i", "+", "1.0", ")", "/", "5", ")", "]", ".", "T", "\n", "", "adj_mat", "=", "adj_mat", ".", "todok", "(", ")", "\n", "print", "(", "'already create adjacency matrix'", ",", "adj_mat", ".", "shape", ",", "time", "(", ")", "-", "t1", ")", "\n", "\n", "t2", "=", "time", "(", ")", "\n", "def", "normalized_adj_single", "(", "adj", ")", ":", "\n", "            ", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "\n", "norm_adj", "=", "d_mat_inv", ".", "dot", "(", "adj", ")", "\n", "print", "(", "'generate single-normalized adjacency matrix.'", ")", "\n", "return", "norm_adj", ".", "tocoo", "(", ")", "\n", "\n", "", "def", "check_adj_if_equal", "(", "adj", ")", ":", "\n", "            ", "dense_A", "=", "np", ".", "array", "(", "adj", ".", "todense", "(", ")", ")", "\n", "degree", "=", "np", ".", "sum", "(", "dense_A", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "\n", "temp", "=", "np", ".", "dot", "(", "np", ".", "diag", "(", "np", ".", "power", "(", "degree", ",", "-", "1", ")", ")", ",", "dense_A", ")", "\n", "print", "(", "'check normalized adjacency matrix whether equal to this laplacian matrix.'", ")", "\n", "return", "temp", "\n", "\n", "", "norm_adj_mat", "=", "normalized_adj_single", "(", "adj_mat", "+", "sp", ".", "eye", "(", "adj_mat", ".", "shape", "[", "0", "]", ")", ")", "\n", "mean_adj_mat", "=", "normalized_adj_single", "(", "adj_mat", ")", "\n", "\n", "print", "(", "'already normalize adjacency matrix'", ",", "time", "(", ")", "-", "t2", ")", "\n", "return", "adj_mat", ".", "tocsr", "(", ")", ",", "norm_adj_mat", ".", "tocsr", "(", ")", ",", "mean_adj_mat", ".", "tocsr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.negative_pool": [[148, 155], ["time.time.time", "load_data.Data.train_items.keys", "print", "list", "random.choice", "time.time.time", "set", "set", "range", "range"], "methods", ["None"], ["", "def", "negative_pool", "(", "self", ")", ":", "\n", "        ", "t1", "=", "time", "(", ")", "\n", "for", "u", "in", "self", ".", "train_items", ".", "keys", "(", ")", ":", "\n", "            ", "neg_items", "=", "list", "(", "set", "(", "range", "(", "self", ".", "n_items", ")", ")", "-", "set", "(", "self", ".", "train_items", "[", "u", "]", ")", ")", "\n", "pools", "=", "[", "rd", ".", "choice", "(", "neg_items", ")", "for", "_", "in", "range", "(", "100", ")", "]", "\n", "self", ".", "neg_pools", "[", "u", "]", "=", "pools", "\n", "", "print", "(", "'refresh negative pools'", ",", "time", "(", ")", "-", "t1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.sample": [[156, 195], ["random.sample", "len", "list", "random.sample", "load_data.Data.sample.sample_pos_items_for_u"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.sample", "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.sample"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "batch_size", "<=", "self", ".", "n_users", ":", "\n", "            ", "users", "=", "rd", ".", "sample", "(", "self", ".", "exist_users", ",", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "users", "=", "[", "rd", ".", "choice", "(", "self", ".", "exist_users", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "\n", "\n", "", "def", "sample_pos_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "pos_items", "=", "self", ".", "train_items", "[", "u", "]", "\n", "n_pos_items", "=", "len", "(", "pos_items", ")", "\n", "pos_batch", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "pos_batch", ")", "==", "num", ":", "break", "\n", "pos_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "n_pos_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "pos_i_id", "=", "pos_items", "[", "pos_id", "]", "\n", "\n", "if", "pos_i_id", "not", "in", "pos_batch", ":", "\n", "                    ", "pos_batch", ".", "append", "(", "pos_i_id", ")", "\n", "", "", "return", "pos_batch", "\n", "\n", "", "def", "sample_neg_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "neg_items", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "neg_items", ")", "==", "num", ":", "break", "\n", "neg_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "if", "neg_id", "not", "in", "self", ".", "train_items", "[", "u", "]", "and", "neg_id", "not", "in", "neg_items", ":", "\n", "                    ", "neg_items", ".", "append", "(", "neg_id", ")", "\n", "", "", "return", "neg_items", "\n", "\n", "", "def", "sample_neg_items_for_u_from_pools", "(", "u", ",", "num", ")", ":", "\n", "            ", "neg_items", "=", "list", "(", "set", "(", "self", ".", "neg_pools", "[", "u", "]", ")", "-", "set", "(", "self", ".", "train_items", "[", "u", "]", ")", ")", "\n", "return", "rd", ".", "sample", "(", "neg_items", ",", "num", ")", "\n", "\n", "", "pos_items", ",", "neg_items", "=", "[", "]", ",", "[", "]", "\n", "for", "u", "in", "users", ":", "\n", "            ", "pos_items", "+=", "sample_pos_items_for_u", "(", "u", ",", "1", ")", "\n", "neg_items", "+=", "sample_neg_items_for_u", "(", "u", ",", "1", ")", "\n", "\n", "", "return", "users", ",", "pos_items", ",", "neg_items", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.sample_test": [[196, 234], ["random.sample", "len", "list", "random.sample", "load_data.Data.sample.sample_pos_items_for_u"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.sample", "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.sample"], ["", "def", "sample_test", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "batch_size", "<=", "self", ".", "n_users", ":", "\n", "            ", "users", "=", "rd", ".", "sample", "(", "self", ".", "test_set", ".", "keys", "(", ")", ",", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "users", "=", "[", "rd", ".", "choice", "(", "self", ".", "exist_users", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "\n", "", "def", "sample_pos_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "pos_items", "=", "self", ".", "test_set", "[", "u", "]", "\n", "n_pos_items", "=", "len", "(", "pos_items", ")", "\n", "pos_batch", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "pos_batch", ")", "==", "num", ":", "break", "\n", "pos_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "n_pos_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "pos_i_id", "=", "pos_items", "[", "pos_id", "]", "\n", "\n", "if", "pos_i_id", "not", "in", "pos_batch", ":", "\n", "                    ", "pos_batch", ".", "append", "(", "pos_i_id", ")", "\n", "", "", "return", "pos_batch", "\n", "\n", "", "def", "sample_neg_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "neg_items", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "neg_items", ")", "==", "num", ":", "break", "\n", "neg_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "if", "neg_id", "not", "in", "(", "self", ".", "test_set", "[", "u", "]", "+", "self", ".", "train_items", "[", "u", "]", ")", "and", "neg_id", "not", "in", "neg_items", ":", "\n", "                    ", "neg_items", ".", "append", "(", "neg_id", ")", "\n", "", "", "return", "neg_items", "\n", "\n", "", "def", "sample_neg_items_for_u_from_pools", "(", "u", ",", "num", ")", ":", "\n", "            ", "neg_items", "=", "list", "(", "set", "(", "self", ".", "neg_pools", "[", "u", "]", ")", "-", "set", "(", "self", ".", "train_items", "[", "u", "]", ")", ")", "\n", "return", "rd", ".", "sample", "(", "neg_items", ",", "num", ")", "\n", "\n", "", "pos_items", ",", "neg_items", "=", "[", "]", ",", "[", "]", "\n", "for", "u", "in", "users", ":", "\n", "            ", "pos_items", "+=", "sample_pos_items_for_u", "(", "u", ",", "1", ")", "\n", "neg_items", "+=", "sample_neg_items_for_u", "(", "u", ",", "1", ")", "\n", "\n", "", "return", "users", ",", "pos_items", ",", "neg_items", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.get_num_users_items": [[240, 242], ["None"], "methods", ["None"], ["", "def", "get_num_users_items", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_users", ",", "self", ".", "n_items", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.print_statistics": [[243, 247], ["print", "print", "print"], "methods", ["None"], ["", "def", "print_statistics", "(", "self", ")", ":", "\n", "        ", "print", "(", "'n_users=%d, n_items=%d'", "%", "(", "self", ".", "n_users", ",", "self", ".", "n_items", ")", ")", "\n", "print", "(", "'n_interactions=%d'", "%", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", ")", "\n", "print", "(", "'n_train=%d, n_test=%d, sparsity=%.5f'", "%", "(", "self", ".", "n_train", ",", "self", ".", "n_test", ",", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", "/", "(", "self", ".", "n_users", "*", "self", ".", "n_items", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.get_sparsity_split": [[249, 271], ["open().readlines", "enumerate", "print", "load_data.Data.create_sparsity_split", "open", "range", "print", "open", "split_state.append", "print", "split_uids.append", "len", "open.write", "open.write", "line.strip", "line.strip", "int", "line.strip().split", "str", "line.strip"], "methods", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.create_sparsity_split"], ["", "def", "get_sparsity_split", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "split_uids", ",", "split_state", "=", "[", "]", ",", "[", "]", "\n", "lines", "=", "open", "(", "self", ".", "path", "+", "'/sparsity.split'", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "                ", "if", "idx", "%", "2", "==", "0", ":", "\n", "                    ", "split_state", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "print", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "split_uids", ".", "append", "(", "[", "int", "(", "uid", ")", "for", "uid", "in", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "", "", "print", "(", "'get sparsity split.'", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "            ", "split_uids", ",", "split_state", "=", "self", ".", "create_sparsity_split", "(", ")", "\n", "f", "=", "open", "(", "self", ".", "path", "+", "'/sparsity.split'", ",", "'w'", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "split_state", ")", ")", ":", "\n", "                ", "f", ".", "write", "(", "split_state", "[", "idx", "]", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "' '", ".", "join", "(", "[", "str", "(", "uid", ")", "for", "uid", "in", "split_uids", "[", "idx", "]", "]", ")", "+", "'\\n'", ")", "\n", "", "print", "(", "'create sparsity split.'", ")", "\n", "\n", "", "return", "split_uids", ",", "split_state", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.load_data.Data.create_sparsity_split": [[274, 325], ["list", "dict", "list", "enumerate", "load_data.Data.test_set.keys", "sorted", "len", "len", "dict.keys", "user_n_iid[].append", "len", "len", "list.append", "split_state.append", "print", "list.append", "split_state.append", "print", "len", "len", "len", "dict.keys"], "methods", ["None"], ["", "def", "create_sparsity_split", "(", "self", ")", ":", "\n", "        ", "all_users_to_test", "=", "list", "(", "self", ".", "test_set", ".", "keys", "(", ")", ")", "\n", "user_n_iid", "=", "dict", "(", ")", "\n", "\n", "# generate a dictionary to store (key=n_iids, value=a list of uid).", "\n", "for", "uid", "in", "all_users_to_test", ":", "\n", "            ", "train_iids", "=", "self", ".", "train_items", "[", "uid", "]", "\n", "test_iids", "=", "self", ".", "test_set", "[", "uid", "]", "\n", "\n", "n_iids", "=", "len", "(", "train_iids", ")", "+", "len", "(", "test_iids", ")", "\n", "\n", "if", "n_iids", "not", "in", "user_n_iid", ".", "keys", "(", ")", ":", "\n", "                ", "user_n_iid", "[", "n_iids", "]", "=", "[", "uid", "]", "\n", "", "else", ":", "\n", "                ", "user_n_iid", "[", "n_iids", "]", ".", "append", "(", "uid", ")", "\n", "", "", "split_uids", "=", "list", "(", ")", "\n", "\n", "# split the whole user set into four subset.", "\n", "temp", "=", "[", "]", "\n", "count", "=", "1", "\n", "fold", "=", "4", "\n", "n_count", "=", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", "\n", "n_rates", "=", "0", "\n", "\n", "split_state", "=", "[", "]", "\n", "for", "idx", ",", "n_iids", "in", "enumerate", "(", "sorted", "(", "user_n_iid", ")", ")", ":", "\n", "            ", "temp", "+=", "user_n_iid", "[", "n_iids", "]", "\n", "n_rates", "+=", "n_iids", "*", "len", "(", "user_n_iid", "[", "n_iids", "]", ")", "\n", "n_count", "-=", "n_iids", "*", "len", "(", "user_n_iid", "[", "n_iids", "]", ")", "\n", "\n", "if", "n_rates", ">=", "count", "*", "0.25", "*", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", ":", "\n", "                ", "split_uids", ".", "append", "(", "temp", ")", "\n", "\n", "state", "=", "'#inter per user<=[%d], #users=[%d], #all rates=[%d]'", "%", "(", "n_iids", ",", "len", "(", "temp", ")", ",", "n_rates", ")", "\n", "split_state", ".", "append", "(", "state", ")", "\n", "print", "(", "state", ")", "\n", "\n", "temp", "=", "[", "]", "\n", "n_rates", "=", "0", "\n", "fold", "-=", "1", "\n", "\n", "", "if", "idx", "==", "len", "(", "user_n_iid", ".", "keys", "(", ")", ")", "-", "1", "or", "n_count", "==", "0", ":", "\n", "                ", "split_uids", ".", "append", "(", "temp", ")", "\n", "\n", "state", "=", "'#inter per user<=[%d], #users=[%d], #all rates=[%d]'", "%", "(", "n_iids", ",", "len", "(", "temp", ")", ",", "n_rates", ")", "\n", "split_state", ".", "append", "(", "state", ")", "\n", "print", "(", "state", ")", "\n", "\n", "\n", "\n", "", "", "return", "split_uids", ",", "split_state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.parser.parse_args": [[10, 72], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.parser.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Run NGCF.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--weights_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Store model path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "'Data/'", ",", "\n", "help", "=", "'Input data path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--proj_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Project path.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "nargs", "=", "'?'", ",", "default", "=", "'gowalla'", ",", "\n", "help", "=", "'Choose a dataset from {gowalla, yelp2018, amazon-book}'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: No pretrain, -1: Pretrain with the learned embeddings, 1:Pretrain with stored models.'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Interval of evaluation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--is_norm'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Interval of evaluation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'Number of epoch.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--embed_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'Embedding size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--layer_size'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[64, 64, 64, 64]'", ",", "\n", "help", "=", "'Output sizes of every layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "\n", "help", "=", "'Batch size.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--regs'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[1e-5,1e-5,1e-2]'", ",", "\n", "help", "=", "'Regularizations.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "\n", "help", "=", "'Learning rate.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'lightgcn'", ",", "\n", "help", "=", "'Specify the name of model (lightgcn).'", ")", "\n", "parser", ".", "add_argument", "(", "'--adj_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'pre'", ",", "\n", "help", "=", "'Specify the type of the adjacency (laplacian) matrix from {plain, norm, mean}.'", ")", "\n", "parser", ".", "add_argument", "(", "'--alg_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'lightgcn'", ",", "\n", "help", "=", "'Specify the type of the graph convolutional layer from {ngcf, gcn, gcmc}.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0 for NAIS_prod, 1 for NAIS_concat'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--node_dropout_flag'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: Disable node dropout, 1: Activate node dropout'", ")", "\n", "parser", ".", "add_argument", "(", "'--node_dropout'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[0.1]'", ",", "\n", "help", "=", "'Keep probability w.r.t. node dropout (i.e., 1-dropout_ratio) for each deep layer. 1: no dropout.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mess_dropout'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[0.1]'", ",", "\n", "help", "=", "'Keep probability w.r.t. message dropout (i.e., 1-dropout_ratio) for each deep layer. 1: no dropout.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--Ks'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[20]'", ",", "\n", "help", "=", "'Top k(s) recommend'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save_flag'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: Disable model saver, 1: Activate model saver'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--test_flag'", ",", "nargs", "=", "'?'", ",", "default", "=", "'part'", ",", "\n", "help", "=", "'Specify the test type from {part, full}, indicating whether the reference is done in mini-batch'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--report'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: Disable performance report w.r.t. sparsity levels, 1: Show performance report w.r.t. sparsity levels'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.helper.txt2list": [[9, 13], ["open", "open.readlines"], "function", ["None"], ["def", "txt2list", "(", "file_src", ")", ":", "\n", "    ", "orig_file", "=", "open", "(", "file_src", ",", "\"r\"", ")", "\n", "lines", "=", "orig_file", ".", "readlines", "(", ")", "\n", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.helper.ensureDir": [[14, 18], ["os.path.dirname", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "ensureDir", "(", "dir_path", ")", ":", "\n", "    ", "d", "=", "os", ".", "path", ".", "dirname", "(", "dir_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.helper.uni2str": [[19, 21], ["str().replace().strip", "str().replace", "str", "unicode_str.encode"], "function", ["None"], ["", "", "def", "uni2str", "(", "unicode_str", ")", ":", "\n", "    ", "return", "str", "(", "unicode_str", ".", "encode", "(", "'ascii'", ",", "'ignore'", ")", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.helper.hasNumbers": [[22, 24], ["bool", "re.search"], "function", ["None"], ["", "def", "hasNumbers", "(", "inputString", ")", ":", "\n", "    ", "return", "bool", "(", "re", ".", "search", "(", "r'\\d'", ",", "inputString", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.helper.delMultiChar": [[25, 29], ["inputString.replace.replace"], "function", ["None"], ["", "def", "delMultiChar", "(", "inputString", ",", "chars", ")", ":", "\n", "    ", "for", "ch", "in", "chars", ":", "\n", "        ", "inputString", "=", "inputString", ".", "replace", "(", "ch", ",", "''", ")", "\n", "", "return", "inputString", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.helper.merge_two_dicts": [[30, 34], ["x.copy", "x.copy.update"], "function", ["None"], ["", "def", "merge_two_dicts", "(", "x", ",", "y", ")", ":", "\n", "    ", "z", "=", "x", ".", "copy", "(", ")", "# start with x's keys and values", "\n", "z", ".", "update", "(", "y", ")", "# modifies z with y's keys and values & returns None", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.helper.early_stopping": [[35, 51], ["print"], "function", ["None"], ["", "def", "early_stopping", "(", "log_value", ",", "best_value", ",", "stopping_step", ",", "expected_order", "=", "'acc'", ",", "flag_step", "=", "100", ")", ":", "\n", "# early stopping strategy:", "\n", "    ", "assert", "expected_order", "in", "[", "'acc'", ",", "'dec'", "]", "\n", "\n", "if", "(", "expected_order", "==", "'acc'", "and", "log_value", ">=", "best_value", ")", "or", "(", "expected_order", "==", "'dec'", "and", "log_value", "<=", "best_value", ")", ":", "\n", "        ", "stopping_step", "=", "0", "\n", "best_value", "=", "log_value", "\n", "", "else", ":", "\n", "        ", "stopping_step", "+=", "1", "\n", "\n", "", "if", "stopping_step", ">=", "flag_step", ":", "\n", "        ", "print", "(", "\"Early stopping is trigger at step: {} log:{}\"", ".", "format", "(", "flag_step", ",", "log_value", ")", ")", "\n", "should_stop", "=", "True", "\n", "", "else", ":", "\n", "        ", "should_stop", "=", "False", "\n", "", "return", "best_value", ",", "stopping_step", ",", "should_stop", "\n", "", ""]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.utility.batch_test.test": [[25, 84], ["numpy.sort", "max", "len", "range", "range", "numpy.concatenate", "numpy.mean", "numpy.reshape", "numpy.reshape", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "evaluator.eval_score_matrix_foldout", "len", "np.concatenate.append", "len", "len", "len", "sess.run", "sess.run", "enumerate", "test_items.append", "test_items.append", "len", "len", "len", "eval", "eval"], "function", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_foldout.eval_score_matrix_foldout", "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.train_thread_test.run", "home.repos.pwc.inspect_result.kuandeng_LightGCN.None.LightGCN.train_thread_test.run"], ["def", "test", "(", "sess", ",", "model", ",", "users_to_test", ",", "drop_flag", "=", "False", ",", "train_set_flag", "=", "0", ")", ":", "\n", "# B: batch size", "\n", "# N: the number of items", "\n", "    ", "top_show", "=", "np", ".", "sort", "(", "model", ".", "Ks", ")", "\n", "max_top", "=", "max", "(", "top_show", ")", "\n", "result", "=", "{", "'precision'", ":", "np", ".", "zeros", "(", "len", "(", "model", ".", "Ks", ")", ")", ",", "'recall'", ":", "np", ".", "zeros", "(", "len", "(", "model", ".", "Ks", ")", ")", ",", "'ndcg'", ":", "np", ".", "zeros", "(", "len", "(", "model", ".", "Ks", ")", ")", "}", "\n", "\n", "u_batch_size", "=", "BATCH_SIZE", "\n", "\n", "test_users", "=", "users_to_test", "\n", "n_test_users", "=", "len", "(", "test_users", ")", "\n", "n_user_batchs", "=", "n_test_users", "//", "u_batch_size", "+", "1", "\n", "\n", "count", "=", "0", "\n", "all_result", "=", "[", "]", "\n", "item_batch", "=", "range", "(", "ITEM_NUM", ")", "\n", "for", "u_batch_id", "in", "range", "(", "n_user_batchs", ")", ":", "\n", "        ", "start", "=", "u_batch_id", "*", "u_batch_size", "\n", "end", "=", "(", "u_batch_id", "+", "1", ")", "*", "u_batch_size", "\n", "\n", "user_batch", "=", "test_users", "[", "start", ":", "end", "]", "\n", "if", "drop_flag", "==", "False", ":", "\n", "            ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "else", ":", "\n", "            ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", ",", "\n", "model", ".", "node_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", ",", "\n", "model", ".", "mess_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", "}", ")", "\n", "", "rate_batch", "=", "np", ".", "array", "(", "rate_batch", ")", "# (B, N)", "\n", "test_items", "=", "[", "]", "\n", "if", "train_set_flag", "==", "0", ":", "\n", "            ", "for", "user", "in", "user_batch", ":", "\n", "                ", "test_items", ".", "append", "(", "data_generator", ".", "test_set", "[", "user", "]", ")", "# (B, #test_items)", "\n", "\n", "# set the ranking scores of training items to -inf,", "\n", "# then the training items will be sorted at the end of the ranking list.    ", "\n", "", "for", "idx", ",", "user", "in", "enumerate", "(", "user_batch", ")", ":", "\n", "                    ", "train_items_off", "=", "data_generator", ".", "train_items", "[", "user", "]", "\n", "rate_batch", "[", "idx", "]", "[", "train_items_off", "]", "=", "-", "np", ".", "inf", "\n", "", "", "else", ":", "\n", "            ", "for", "user", "in", "user_batch", ":", "\n", "                ", "test_items", ".", "append", "(", "data_generator", ".", "train_items", "[", "user", "]", ")", "\n", "\n", "", "", "batch_result", "=", "eval_score_matrix_foldout", "(", "rate_batch", ",", "test_items", ",", "max_top", ")", "#(B,k*metric_num), max_top= 20", "\n", "count", "+=", "len", "(", "batch_result", ")", "\n", "all_result", ".", "append", "(", "batch_result", ")", "\n", "\n", "\n", "", "assert", "count", "==", "n_test_users", "\n", "all_result", "=", "np", ".", "concatenate", "(", "all_result", ",", "axis", "=", "0", ")", "\n", "final_result", "=", "np", ".", "mean", "(", "all_result", ",", "axis", "=", "0", ")", "# mean", "\n", "final_result", "=", "np", ".", "reshape", "(", "final_result", ",", "newshape", "=", "[", "5", ",", "max_top", "]", ")", "\n", "final_result", "=", "final_result", "[", ":", ",", "top_show", "-", "1", "]", "\n", "final_result", "=", "np", ".", "reshape", "(", "final_result", ",", "newshape", "=", "[", "5", ",", "len", "(", "top_show", ")", "]", ")", "\n", "result", "[", "'precision'", "]", "+=", "final_result", "[", "0", "]", "\n", "result", "[", "'recall'", "]", "+=", "final_result", "[", "1", "]", "\n", "result", "[", "'ndcg'", "]", "+=", "final_result", "[", "3", "]", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.cpp.evaluate_foldout.eval_score_matrix_foldout": [[12, 19], ["apt_evaluate_foldout", "len", "len", "ValueError", "os.cpu_count"], "function", ["None"], ["def", "eval_score_matrix_foldout", "(", "score_matrix", ",", "test_items", ",", "top_k", "=", "20", ",", "thread_num", "=", "None", ")", ":", "\n", "    ", "if", "len", "(", "score_matrix", ")", "!=", "len", "(", "test_items", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"The lengths of score_matrix and test_items are not equal.\"", ")", "\n", "", "thread_num", "=", "(", "thread_num", "or", "(", "os", ".", "cpu_count", "(", ")", "or", "1", ")", "*", "5", ")", "\n", "results", "=", "apt_evaluate_foldout", "(", "score_matrix", ",", "test_items", ",", "top_k", ",", "thread_num", ")", "\n", "\n", "return", "results", "\n", "", ""]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_foldout.argmax_top_k": [[10, 13], ["heapq.nlargest", "numpy.array", "zip", "itertools.count"], "function", ["None"], ["import", "sys", "\n", "\n", "def", "eval_score_matrix_foldout", "(", "score_matrix", ",", "test_items", ",", "top_k", "=", "20", ",", "thread_num", "=", "None", ")", ":", "\n", "    ", "if", "len", "(", "score_matrix", ")", "!=", "len", "(", "test_items", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_foldout.precision": [[14, 18], ["numpy.cumsum", "numpy.arange", "len"], "function", ["None"], ["        ", "raise", "ValueError", "(", "\"The lengths of score_matrix and test_items are not equal.\"", ")", "\n", "", "thread_num", "=", "(", "thread_num", "or", "(", "os", ".", "cpu_count", "(", ")", "or", "1", ")", "*", "5", ")", "\n", "results", "=", "apt_evaluate_foldout", "(", "score_matrix", ",", "test_items", ",", "top_k", ",", "thread_num", ")", "\n", "\n", "return", "results", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_foldout.recall": [[20, 24], ["numpy.cumsum", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_foldout.map": [[26, 34], ["evaluate_foldout.precision", "numpy.cumsum", "len", "enumerate"], "function", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_foldout.precision"], []], "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_foldout.ndcg": [[36, 49], ["len", "len", "min", "numpy.cumsum", "numpy.cumsum", "numpy.log2", "numpy.arange", "enumerate", "numpy.log2"], "function", ["None"], []], "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_foldout.mrr": [[51, 60], ["enumerate", "numpy.zeros", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_foldout.eval_score_matrix_foldout": [[62, 83], ["list", "numpy.array", "evaluate_foldout.argmax_top_k", "np.array().flatten.extend", "np.array().flatten.extend", "np.array().flatten.extend", "np.array().flatten.extend", "np.array().flatten.extend", "numpy.array().flatten", "concurrent.futures.ThreadPoolExecutor", "executor.map", "evaluate_foldout.precision", "evaluate_foldout.recall", "evaluate_foldout.map", "evaluate_foldout.ndcg", "evaluate_foldout.mrr", "range", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_loo.argmax_top_k", "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_foldout.map", "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_foldout.precision", "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_foldout.recall", "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_foldout.map", "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_loo.ndcg", "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_loo.mrr"], []], "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_loo.argmax_top_k": [[9, 12], ["heapq.nlargest", "numpy.array", "zip", "itertools.count"], "function", ["None"], ["def", "argmax_top_k", "(", "a", ",", "top_k", "=", "50", ")", ":", "\n", "    ", "ele_idx", "=", "heapq", ".", "nlargest", "(", "top_k", ",", "zip", "(", "a", ",", "itertools", ".", "count", "(", ")", ")", ")", "\n", "return", "np", ".", "array", "(", "[", "idx", "for", "ele", ",", "idx", "in", "ele_idx", "]", ",", "dtype", "=", "np", ".", "intc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_loo.hit": [[14, 23], ["enumerate", "numpy.zeros", "len"], "function", ["None"], ["", "def", "hit", "(", "rank", ",", "ground_truth", ")", ":", "\n", "    ", "last_idx", "=", "sys", ".", "maxsize", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "rank", ")", ":", "\n", "        ", "if", "item", "==", "ground_truth", ":", "\n", "            ", "last_idx", "=", "idx", "\n", "break", "\n", "", "", "result", "=", "np", ".", "zeros", "(", "len", "(", "rank", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "result", "[", "last_idx", ":", "]", "=", "1.0", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_loo.ndcg": [[25, 34], ["enumerate", "numpy.zeros", "len", "numpy.log2"], "function", ["None"], ["", "def", "ndcg", "(", "rank", ",", "ground_truth", ")", ":", "\n", "    ", "last_idx", "=", "sys", ".", "maxsize", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "rank", ")", ":", "\n", "        ", "if", "item", "==", "ground_truth", ":", "\n", "            ", "last_idx", "=", "idx", "\n", "break", "\n", "", "", "result", "=", "np", ".", "zeros", "(", "len", "(", "rank", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "result", "[", "last_idx", ":", "]", "=", "1.0", "/", "np", ".", "log2", "(", "last_idx", "+", "2", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_loo.mrr": [[36, 45], ["enumerate", "numpy.zeros", "len"], "function", ["None"], ["", "def", "mrr", "(", "rank", ",", "ground_truth", ")", ":", "\n", "    ", "last_idx", "=", "sys", ".", "maxsize", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "rank", ")", ":", "\n", "        ", "if", "item", "==", "ground_truth", ":", "\n", "            ", "last_idx", "=", "idx", "\n", "break", "\n", "", "", "result", "=", "np", ".", "zeros", "(", "len", "(", "rank", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "result", "[", "last_idx", ":", "]", "=", "1.0", "/", "(", "last_idx", "+", "1", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_loo.eval_score_matrix_loo": [[47, 66], ["list", "numpy.array", "evaluate_loo.argmax_top_k", "np.array().flatten.extend", "np.array().flatten.extend", "np.array().flatten.extend", "numpy.array().flatten", "concurrent.futures.ThreadPoolExecutor", "executor.map", "evaluate_loo.hit", "evaluate_loo.ndcg", "evaluate_loo.mrr", "range", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_loo.argmax_top_k", "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_foldout.map", "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_loo.hit", "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_loo.ndcg", "home.repos.pwc.inspect_result.kuandeng_LightGCN.python.evaluate_loo.mrr"], ["", "def", "eval_score_matrix_loo", "(", "score_matrix", ",", "test_items", ",", "top_k", "=", "50", ",", "thread_num", "=", "None", ")", ":", "\n", "    ", "def", "_eval_one_user", "(", "idx", ")", ":", "\n", "        ", "scores", "=", "score_matrix", "[", "idx", "]", "# all scores of the test user", "\n", "test_item", "=", "test_items", "[", "idx", "]", "# all test items of the test user", "\n", "\n", "ranking", "=", "argmax_top_k", "(", "scores", ",", "top_k", ")", "# Top-K items", "\n", "result", "=", "[", "]", "\n", "result", ".", "extend", "(", "hit", "(", "ranking", ",", "test_item", ")", ")", "\n", "result", ".", "extend", "(", "ndcg", "(", "ranking", ",", "test_item", ")", ")", "\n", "result", ".", "extend", "(", "mrr", "(", "ranking", ",", "test_item", ")", ")", "\n", "\n", "result", "=", "np", ".", "array", "(", "result", ",", "dtype", "=", "np", ".", "float32", ")", ".", "flatten", "(", ")", "\n", "return", "result", "\n", "\n", "", "with", "ThreadPoolExecutor", "(", "max_workers", "=", "thread_num", ")", "as", "executor", ":", "\n", "        ", "batch_result", "=", "executor", ".", "map", "(", "_eval_one_user", ",", "range", "(", "len", "(", "test_items", ")", ")", ")", "\n", "\n", "", "result", "=", "list", "(", "batch_result", ")", "# generator to list", "\n", "return", "np", ".", "array", "(", "result", ")", "# list to ndarray", "\n", "", ""]]}