{"home.repos.pwc.inspect_result.jshin49_ds2.utils.evaluate.compute_acc": [[12, 27], ["len", "float", "miss_slot.append", "len", "g.rsplit", "p.rsplit"], "function", ["None"], ["def", "compute_acc", "(", "gold", ",", "pred", ",", "slot_temp", ")", ":", "\n", "    ", "miss_gold", "=", "0", "\n", "miss_slot", "=", "[", "]", "\n", "for", "g", "in", "gold", ":", "\n", "        ", "if", "g", "not", "in", "pred", ":", "\n", "            ", "miss_gold", "+=", "1", "\n", "miss_slot", ".", "append", "(", "g", ".", "rsplit", "(", "\"-\"", ",", "1", ")", "[", "0", "]", ")", "\n", "", "", "wrong_pred", "=", "0", "\n", "for", "p", "in", "pred", ":", "\n", "        ", "if", "p", "not", "in", "gold", "and", "p", ".", "rsplit", "(", "\"-\"", ",", "1", ")", "[", "0", "]", "not", "in", "miss_slot", ":", "\n", "            ", "wrong_pred", "+=", "1", "\n", "", "", "ACC_TOTAL", "=", "len", "(", "slot_temp", ")", "\n", "ACC", "=", "len", "(", "slot_temp", ")", "-", "miss_gold", "-", "wrong_pred", "\n", "ACC", "=", "ACC", "/", "float", "(", "ACC_TOTAL", ")", "\n", "return", "ACC", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.evaluate.compute_prf": [[29, 50], ["len", "len", "float", "float", "float"], "function", ["None"], ["", "def", "compute_prf", "(", "gold", ",", "pred", ")", ":", "\n", "    ", "TP", ",", "FP", ",", "FN", "=", "0", ",", "0", ",", "0", "\n", "if", "len", "(", "gold", ")", "!=", "0", ":", "\n", "        ", "count", "=", "1", "\n", "for", "g", "in", "gold", ":", "\n", "            ", "if", "g", "in", "pred", ":", "\n", "                ", "TP", "+=", "1", "\n", "", "else", ":", "\n", "                ", "FN", "+=", "1", "\n", "", "", "for", "p", "in", "pred", ":", "\n", "            ", "if", "p", "not", "in", "gold", ":", "\n", "                ", "FP", "+=", "1", "\n", "", "", "precision", "=", "TP", "/", "float", "(", "TP", "+", "FP", ")", "if", "(", "TP", "+", "FP", ")", "!=", "0", "else", "0", "\n", "recall", "=", "TP", "/", "float", "(", "TP", "+", "FN", ")", "if", "(", "TP", "+", "FN", ")", "!=", "0", "else", "0", "\n", "F1", "=", "2", "*", "precision", "*", "recall", "/", "float", "(", "precision", "+", "recall", ")", "if", "(", "precision", "+", "recall", ")", "!=", "0", "else", "0", "\n", "", "else", ":", "\n", "        ", "if", "len", "(", "pred", ")", "==", "0", ":", "\n", "            ", "precision", ",", "recall", ",", "F1", ",", "count", "=", "1", ",", "1", ",", "1", ",", "1", "\n", "", "else", ":", "\n", "            ", "precision", ",", "recall", ",", "F1", ",", "count", "=", "0", ",", "0", ",", "0", ",", "1", "\n", "", "", "return", "F1", ",", "recall", ",", "precision", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.evaluate.evaluate_metrics": [[52, 77], ["all_prediction.items", "dial[].items", "evaluate.compute_acc", "evaluate.compute_prf", "float", "float", "float", "set", "set", "print", "print", "print", "set", "set", "set", "set"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.evaluate.compute_acc", "home.repos.pwc.inspect_result.jshin49_ds2.utils.evaluate.compute_prf"], ["", "def", "evaluate_metrics", "(", "all_prediction", ",", "SLOT_LIST", ")", ":", "\n", "    ", "total", ",", "turn_acc", ",", "joint_acc", ",", "F1_pred", ",", "F1_count", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "idx", ",", "dial", "in", "all_prediction", ".", "items", "(", ")", ":", "\n", "        ", "for", "k", ",", "cv", "in", "dial", "[", "\"turns\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "set", "(", "cv", "[", "\"turn_belief\"", "]", ")", "==", "set", "(", "cv", "[", "\"pred_belief\"", "]", ")", ":", "\n", "                ", "joint_acc", "+=", "1", "\n", "", "else", ":", "\n", "                ", "print", "(", "cv", "[", "\"turn_belief\"", "]", ")", "\n", "print", "(", "cv", "[", "\"pred_belief\"", "]", ")", "\n", "print", "(", "\"==================\"", ")", "\n", "", "total", "+=", "1", "\n", "\n", "# Compute prediction slot accuracy", "\n", "temp_acc", "=", "compute_acc", "(", "set", "(", "cv", "[", "\"turn_belief\"", "]", ")", ",", "set", "(", "cv", "[", "\"pred_belief\"", "]", ")", ",", "SLOT_LIST", ")", "\n", "turn_acc", "+=", "temp_acc", "\n", "\n", "# Compute prediction joint F1 score", "\n", "temp_f1", ",", "temp_r", ",", "temp_p", ",", "count", "=", "compute_prf", "(", "set", "(", "cv", "[", "\"turn_belief\"", "]", ")", ",", "set", "(", "cv", "[", "\"pred_belief\"", "]", ")", ")", "\n", "F1_pred", "+=", "temp_f1", "\n", "F1_count", "+=", "count", "\n", "\n", "", "", "joint_acc_score", "=", "joint_acc", "/", "float", "(", "total", ")", "if", "total", "!=", "0", "else", "0", "\n", "turn_acc_score", "=", "turn_acc", "/", "float", "(", "total", ")", "if", "total", "!=", "0", "else", "0", "\n", "F1_score", "=", "F1_pred", "/", "float", "(", "F1_count", ")", "if", "F1_count", "!=", "0", "else", "0", "\n", "return", "joint_acc_score", ",", "F1_score", ",", "turn_acc_score", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.evaluate.get_slot_information": [[79, 83], ["dict", "k.replace().lower", "k.lower", "dict.keys", "ontology.items", "k.replace", "k.split"], "function", ["None"], ["", "def", "get_slot_information", "(", "ontology", ")", ":", "\n", "    ", "ontology_domains", "=", "dict", "(", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "ontology", ".", "items", "(", ")", "if", "k", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "in", "EXPERIMENT_DOMAINS", "]", ")", "\n", "SLOTS", "=", "[", "k", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ".", "lower", "(", ")", "if", "(", "\"book\"", "not", "in", "k", ")", "else", "k", ".", "lower", "(", ")", "for", "k", "in", "ontology_domains", ".", "keys", "(", ")", "]", "\n", "return", "SLOTS", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.evaluate.get_acc": [[85, 178], ["set.union", "collections.defaultdict", "zip", "evaluate.get_acc.safe_devision"], "function", ["None"], ["", "def", "get_acc", "(", "\n", "pred_slot_values", ":", "List", "[", "Dict", "]", ",", "\n", "correct_slot_values", ":", "List", "[", "Dict", "]", ",", "\n", "eval_slots", ":", "List", "[", "Dict", "]", ",", "\n", "hide_metrics", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", "\n", ")", ":", "\n", "    ", "domains_per_sample", "=", "[", "set", "(", "k", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "for", "k", "in", "x", ")", "for", "x", "in", "eval_slots", "]", "\n", "all_domains", "=", "set", ".", "union", "(", "*", "domains_per_sample", ")", "\n", "\n", "# res = defaultdict(float) # causes error in pl>=1.4.6 during teardown", "\n", "res", "=", "{", "\n", "\"jga\"", ":", "0.0", ",", "\"slot_acc\"", ":", "0.0", ",", "\"slot_none_acc\"", ":", "0.0", ",", "\"slot_true_acc\"", ":", "0.0", ",", "\n", "}", "\n", "for", "_domain", "in", "all_domains", ":", "\n", "        ", "res", "[", "f\"{_domain}_jga\"", "]", "=", "0.0", "\n", "res", "[", "f\"{_domain}_slot_acc\"", "]", "=", "0.0", "\n", "res", "[", "f\"{_domain}_slot_none_acc\"", "]", "=", "0.0", "\n", "res", "[", "f\"{_domain}_slot_true_acc\"", "]", "=", "0.0", "\n", "\n", "", "counts", "=", "defaultdict", "(", "int", ")", "\n", "\n", "for", "_pred", ",", "_correct", ",", "_eval_slots", ",", "_domains", "in", "zip", "(", "pred_slot_values", ",", "correct_slot_values", ",", "eval_slots", ",", "domains_per_sample", ")", ":", "\n", "        ", "res", "[", "\"jga\"", "]", "+=", "(", "\n", "set", "(", "\n", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "_pred", ".", "items", "(", ")", "if", "k", "in", "_eval_slots", "\n", ")", "==", "set", "(", "\n", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "_correct", ".", "items", "(", ")", "if", "k", "in", "_eval_slots", "\n", ")", "\n", ")", "\n", "res", "[", "\"slot_acc\"", "]", "+=", "sum", "(", "\n", "(", "k", "in", "_pred", "and", "k", "in", "_correct", "and", "_pred", "[", "k", "]", "==", "_correct", "[", "k", "]", ")", "or", "(", "k", "not", "in", "_pred", "and", "k", "not", "in", "_correct", ")", "\n", "for", "k", "in", "_eval_slots", "\n", ")", "\n", "res", "[", "f\"slot_true_acc\"", "]", "+=", "sum", "(", "\n", "(", "k", "in", "_pred", "and", "k", "in", "_correct", "and", "_pred", "[", "k", "]", "==", "_correct", "[", "k", "]", ")", "\n", "for", "k", "in", "_eval_slots", "\n", ")", "\n", "res", "[", "f\"slot_none_acc\"", "]", "+=", "sum", "(", "\n", "(", "k", "not", "in", "_pred", "and", "k", "not", "in", "_correct", ")", "\n", "for", "k", "in", "_eval_slots", "\n", ")", "\n", "num_slots", "=", "len", "(", "_eval_slots", ")", "\n", "num_true", "=", "len", "(", "set", "(", "_eval_slots", ")", "&", "set", "(", "_correct", ".", "keys", "(", ")", ")", ")", "\n", "counts", "[", "\"turn\"", "]", "+=", "1", "\n", "counts", "[", "\"slot\"", "]", "+=", "num_slots", "\n", "counts", "[", "\"slot_true\"", "]", "+=", "num_true", "\n", "counts", "[", "\"slot_none\"", "]", "+=", "num_slots", "-", "num_true", "\n", "\n", "for", "_domain", "in", "_domains", ":", "\n", "            ", "domain_eval_slots", "=", "set", "(", "k", "for", "k", "in", "_eval_slots", "if", "k", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "==", "_domain", ")", "\n", "res", "[", "f\"{_domain}_jga\"", "]", "+=", "(", "\n", "set", "(", "\n", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "_pred", ".", "items", "(", ")", "if", "k", "in", "domain_eval_slots", "\n", ")", "==", "set", "(", "\n", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "_correct", ".", "items", "(", ")", "if", "k", "in", "domain_eval_slots", "\n", ")", "\n", ")", "\n", "res", "[", "f\"{_domain}_slot_acc\"", "]", "+=", "sum", "(", "\n", "(", "k", "in", "_pred", "and", "k", "in", "_correct", "and", "_pred", "[", "k", "]", "==", "_correct", "[", "k", "]", ")", "or", "(", "k", "not", "in", "_pred", "and", "k", "not", "in", "_correct", ")", "\n", "for", "k", "in", "domain_eval_slots", "\n", ")", "\n", "res", "[", "f\"{_domain}_slot_true_acc\"", "]", "+=", "sum", "(", "\n", "(", "k", "in", "_pred", "and", "k", "in", "_correct", "and", "_pred", "[", "k", "]", "==", "_correct", "[", "k", "]", ")", "\n", "for", "k", "in", "domain_eval_slots", "\n", ")", "\n", "res", "[", "f\"{_domain}_slot_none_acc\"", "]", "+=", "sum", "(", "\n", "(", "k", "not", "in", "_pred", "and", "k", "not", "in", "_correct", ")", "\n", "for", "k", "in", "domain_eval_slots", "\n", ")", "\n", "num_slots", "=", "len", "(", "domain_eval_slots", ")", "\n", "num_true", "=", "len", "(", "set", "(", "domain_eval_slots", ")", "&", "set", "(", "_correct", ".", "keys", "(", ")", ")", ")", "\n", "counts", "[", "f\"{_domain}_turn\"", "]", "+=", "1", "\n", "counts", "[", "f\"{_domain}_slot\"", "]", "+=", "num_slots", "\n", "counts", "[", "f\"{_domain}_slot_true\"", "]", "+=", "num_true", "\n", "counts", "[", "f\"{_domain}_slot_none\"", "]", "+=", "num_slots", "-", "num_true", "\n", "\n", "", "", "def", "safe_devision", "(", "x", ":", "float", ",", "y", ":", "int", ")", ":", "\n", "        ", "return", "x", "/", "y", "if", "y", ">", "0", "else", "0", "\n", "\n", "", "res", "[", "\"jga\"", "]", "=", "safe_devision", "(", "res", "[", "\"jga\"", "]", ",", "counts", "[", "\"turn\"", "]", ")", "\n", "res", "[", "\"slot_acc\"", "]", "=", "safe_devision", "(", "res", "[", "\"slot_acc\"", "]", ",", "counts", "[", "\"slot\"", "]", ")", "\n", "res", "[", "\"slot_true_acc\"", "]", "=", "safe_devision", "(", "res", "[", "\"slot_true_acc\"", "]", ",", "counts", "[", "\"slot_true\"", "]", ")", "\n", "res", "[", "\"slot_none_acc\"", "]", "=", "safe_devision", "(", "res", "[", "\"slot_none_acc\"", "]", ",", "counts", "[", "\"slot_none\"", "]", ")", "\n", "\n", "for", "domain", "in", "all_domains", ":", "\n", "        ", "res", "[", "f\"{domain}_jga\"", "]", "=", "safe_devision", "(", "res", "[", "f\"{domain}_jga\"", "]", ",", "counts", "[", "f\"{domain}_turn\"", "]", ")", "\n", "res", "[", "f\"{domain}_slot_acc\"", "]", "=", "safe_devision", "(", "res", "[", "f\"{domain}_slot_acc\"", "]", ",", "counts", "[", "f\"{domain}_slot\"", "]", ")", "\n", "res", "[", "f\"{domain}_slot_true_acc\"", "]", "=", "safe_devision", "(", "res", "[", "f\"{domain}_slot_true_acc\"", "]", ",", "counts", "[", "f\"{domain}_slot_true\"", "]", ")", "\n", "res", "[", "f\"{domain}_slot_none_acc\"", "]", "=", "safe_devision", "(", "res", "[", "f\"{domain}_slot_none_acc\"", "]", ",", "counts", "[", "f\"{domain}_slot_none\"", "]", ")", "\n", "\n", "", "if", "hide_metrics", ":", "\n", "        ", "res", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "res", ".", "items", "(", ")", "if", "k", "not", "in", "hide_metrics", "}", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.evaluate.get_template_acc": [[199, 210], ["all", "sum", "len", "zip", "_template.split"], "function", ["None"], ["", "def", "get_template_acc", "(", "\n", "pred_summary", ":", "List", "[", "str", "]", ",", "\n", "gold_templates", ":", "List", "[", "str", "]", ",", "\n", "blank", ":", "str", "=", "\"____\"", ",", "\n", ")", ":", "\n", "    ", "template_correctness", "=", "[", "\n", "all", "(", "pattern", "in", "_sum", "for", "pattern", "in", "_template", ".", "split", "(", "blank", ")", ")", "\n", "for", "_sum", ",", "_template", "in", "zip", "(", "pred_summary", ",", "gold_templates", ")", "\n", "]", "\n", "\n", "return", "sum", "(", "template_correctness", ")", "/", "len", "(", "template_correctness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.few_shot.get_balanced_fewshot_samples": [[129, 183], ["random.choice", "sampled_ids.append", "print", "print", "tuple", "len", "few_shot.get_argmin", "random.choice", "sampled_ids.append", "few_shot.get_argmin", "random.choice", "sampled_ids.append", "sampled_slots_count.values", "sampled_domains_count.values", "sorted", "final_states.items", "set", "len", "len", "len", "set", "domains.values", "domains.items", "final_states.items", "domains.items", "len", "_slot.split"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.few_shot.get_argmin", "home.repos.pwc.inspect_result.jshin49_ds2.utils.few_shot.get_argmin"], ["def", "get_balanced_fewshot_samples", "(", "final_states", ":", "dict", ",", "num_target_samples", ":", "int", ",", "ALL_SLOTS", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    final_states: a dictioinary whose keys are dialogue ID's and values are states of the final turn\n    \"\"\"", "\n", "sampled_slots_count", "=", "{", "_slot_name", ":", "0", "for", "_slot_name", "in", "ALL_SLOTS", "}", "\n", "sampled_ids", "=", "[", "]", "\n", "\n", "domains", "=", "{", "\n", "dial_id", ":", "tuple", "(", "sorted", "(", "set", "(", "_slot", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "for", "_slot", "in", "ds", ")", ")", ")", "for", "dial_id", ",", "ds", "in", "final_states", ".", "items", "(", ")", "\n", "}", "\n", "sampled_domains_count", "=", "{", "_domain", ":", "0", "for", "_domain", "in", "set", "(", "domains", ".", "values", "(", ")", ")", "}", "\n", "sampled", "=", "random", ".", "choice", "(", "[", "_dial_id", "for", "_dial_id", ",", "_domain", "in", "domains", ".", "items", "(", ")", "if", "len", "(", "_domain", ")", "==", "1", "]", ")", "\n", "sampled_ids", ".", "append", "(", "sampled", ")", "\n", "del", "domains", "[", "sampled", "]", ",", "final_states", "[", "sampled", "]", "\n", "\n", "while", "len", "(", "sampled_ids", ")", "<", "num_target_samples", ":", "\n", "        ", "target_slot", "=", "get_argmin", "(", "sampled_slots_count", ")", "\n", "candidates", "=", "[", "_dial_id", "for", "_dial_id", ",", "_state", "in", "final_states", ".", "items", "(", ")", "if", "target_slot", "in", "_state", "]", "\n", "\n", "if", "len", "(", "candidates", ")", "==", "0", ":", "\n", "            ", "del", "sampled_slots_count", "[", "target_slot", "]", "\n", "continue", "\n", "\n", "", "sampled", "=", "random", ".", "choice", "(", "candidates", ")", "\n", "sampled_ids", ".", "append", "(", "sampled", ")", "\n", "\n", "for", "_slot", "in", "final_states", "[", "sampled", "]", ":", "\n", "            ", "if", "_slot", "in", "sampled_slots_count", ":", "\n", "                ", "sampled_slots_count", "[", "_slot", "]", "+=", "1", "\n", "", "", "sampled_domains_count", "[", "domains", "[", "sampled", "]", "]", "+=", "1", "\n", "\n", "del", "final_states", "[", "sampled", "]", ",", "domains", "[", "sampled", "]", "\n", "\n", "if", "len", "(", "sampled_ids", ")", ">=", "num_target_samples", ":", "\n", "            ", "break", "\n", "\n", "", "target_domain", "=", "get_argmin", "(", "sampled_domains_count", ")", "\n", "candidates", "=", "[", "_dial_id", "for", "_dial_id", ",", "_domain", "in", "domains", ".", "items", "(", ")", "if", "_domain", "==", "target_domain", "]", "\n", "if", "len", "(", "candidates", ")", "==", "0", ":", "\n", "            ", "del", "sampled_domains_count", "[", "target_domain", "]", "\n", "continue", "\n", "", "sampled", "=", "random", ".", "choice", "(", "candidates", ")", "\n", "sampled_ids", ".", "append", "(", "sampled", ")", "\n", "\n", "for", "_slot", "in", "final_states", "[", "sampled", "]", ":", "\n", "            ", "if", "_slot", "in", "sampled_slots_count", ":", "\n", "                ", "sampled_slots_count", "[", "_slot", "]", "+=", "1", "\n", "", "", "sampled_domains_count", "[", "domains", "[", "sampled", "]", "]", "+=", "1", "\n", "\n", "del", "domains", "[", "sampled", "]", ",", "final_states", "[", "sampled", "]", "\n", "\n", "", "print", "(", "sampled_slots_count", ".", "values", "(", ")", ")", "\n", "print", "(", "sampled_domains_count", ".", "values", "(", ")", ")", "\n", "return", "sampled_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.few_shot.get_filtered_fewshot_samples": [[185, 190], ["final_states.items", "few_shot.has_except_value"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.few_shot.has_except_value"], ["", "def", "get_filtered_fewshot_samples", "(", "final_states", ":", "dict", ")", "->", "dict", ":", "\n", "    ", "\"\"\"\n    final_states: a dictioinary whose keys are dialogue ID's and values are states of the final turn\n    \"\"\"", "\n", "return", "{", "dial_id", ":", "ds", "for", "dial_id", ",", "ds", "in", "final_states", ".", "items", "(", ")", "if", "not", "has_except_value", "(", "ds", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.few_shot.get_final_states": [[192, 202], ["collections.defaultdict"], "function", ["None"], ["", "def", "get_final_states", "(", "dataset", ")", "->", "dict", ":", "\n", "    ", "final_turn_ids", "=", "defaultdict", "(", "int", ")", "\n", "final_turn_states", "=", "{", "}", "\n", "for", "x", "in", "dataset", ":", "\n", "        ", "dial_id", ",", "turn_id", "=", "x", "[", "\"ID\"", "]", ",", "x", "[", "\"turn_id\"", "]", "\n", "if", "final_turn_ids", "[", "dial_id", "]", "<", "turn_id", ":", "\n", "            ", "final_turn_ids", "[", "dial_id", "]", "=", "turn_id", "\n", "final_turn_states", "[", "dial_id", "]", "=", "x", "[", "\"slot_values\"", "]", "\n", "\n", "", "", "return", "final_turn_states", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.few_shot.get_argmin": [[204, 209], ["min", "d.items", "d.values"], "function", ["None"], ["", "def", "get_argmin", "(", "d", ")", ":", "\n", "    ", "min_v", "=", "min", "(", "d", ".", "values", "(", ")", ")", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "==", "min_v", ":", "\n", "            ", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.few_shot.has_except_value": [[211, 215], ["any", "set", "set", "ds.keys", "EXCEPT_VALUES.keys"], "function", ["None"], ["", "", "", "def", "has_except_value", "(", "ds", ")", ":", "\n", "    ", "return", "any", "(", "\n", "ds", "[", "_key", "]", "in", "EXCEPT_VALUES", "[", "_key", "]", "\n", "for", "_key", "in", "set", "(", "ds", ".", "keys", "(", ")", ")", "&", "set", "(", "EXCEPT_VALUES", ".", "keys", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.fix_label.fix_general_label_error": [[4, 68], ["label_dict.keys", "GENERAL_TYPO.keys", "label_dict[].replace"], "function", ["None"], ["def", "fix_general_label_error", "(", "labels", ",", "slots", ")", ":", "\n", "    ", "label_dict", "=", "labels", "\n", "GENERAL_TYPO", "=", "{", "\n", "# type", "\n", "\"guest house\"", ":", "\"guest house\"", ",", "\"guesthouses\"", ":", "\"guest house\"", ",", "\"guest\"", ":", "\"guest house\"", ",", "\"mutiple sports\"", ":", "\"multiple sports\"", ",", "\n", "\"sports\"", ":", "\"multiple sports\"", ",", "\"mutliple sports\"", ":", "\"multiple sports\"", ",", "\"swimmingpool\"", ":", "\"swimming pool\"", ",", "\"concerthall\"", ":", "\"concert hall\"", ",", "\n", "\"concert\"", ":", "\"concert hall\"", ",", "\"pool\"", ":", "\"swimming pool\"", ",", "\"night club\"", ":", "\"nightclub\"", ",", "\"mus\"", ":", "\"museum\"", ",", "\"ol\"", ":", "\"architecture\"", ",", "\n", "\"colleges\"", ":", "\"college\"", ",", "\"coll\"", ":", "\"college\"", ",", "\"architectural\"", ":", "\"architecture\"", ",", "\"musuem\"", ":", "\"museum\"", ",", "\"churches\"", ":", "\"church\"", ",", "\n", "# area", "\n", "\"center\"", ":", "\"centre\"", ",", "\"center of town\"", ":", "\"centre\"", ",", "\"near city center\"", ":", "\"centre\"", ",", "\"in the north\"", ":", "\"north\"", ",", "\"cen\"", ":", "\"centre\"", ",", "\"east side\"", ":", "\"east\"", ",", "\n", "\"east area\"", ":", "\"east\"", ",", "\"west part of town\"", ":", "\"west\"", ",", "\"ce\"", ":", "\"centre\"", ",", "\"town center\"", ":", "\"centre\"", ",", "\"centre of cambridge\"", ":", "\"centre\"", ",", "\n", "\"city center\"", ":", "\"centre\"", ",", "\"the south\"", ":", "\"south\"", ",", "\"scentre\"", ":", "\"centre\"", ",", "\"town centre\"", ":", "\"centre\"", ",", "\"in town\"", ":", "\"centre\"", ",", "\"north part of town\"", ":", "\"north\"", ",", "\n", "\"centre of town\"", ":", "\"centre\"", ",", "\"cb30aq\"", ":", "\"none\"", ",", "\n", "# price", "\n", "\"mode\"", ":", "\"moderate\"", ",", "\"moderate -ly\"", ":", "\"moderate\"", ",", "\"mo\"", ":", "\"moderate\"", ",", "\n", "# day", "\n", "\"next friday\"", ":", "\"friday\"", ",", "\"monda\"", ":", "\"monday\"", ",", "\n", "# parking", "\n", "\"free parking\"", ":", "\"free\"", ",", "\n", "# internet", "\n", "\"free internet\"", ":", "\"yes\"", ",", "\n", "# star", "\n", "\"4 star\"", ":", "\"4\"", ",", "\"4 stars\"", ":", "\"4\"", ",", "\"0 star rarting\"", ":", "\"none\"", ",", "\n", "# others", "\n", "\"y\"", ":", "\"yes\"", ",", "\"any\"", ":", "\"dontcare\"", ",", "\"n\"", ":", "\"no\"", ",", "\"does not care\"", ":", "\"dontcare\"", ",", "\"not men\"", ":", "\"none\"", ",", "\"not\"", ":", "\"none\"", ",", "\"not mentioned\"", ":", "\"none\"", ",", "\n", "''", ":", "\"none\"", ",", "\"not mendtioned\"", ":", "\"none\"", ",", "\"3 .\"", ":", "\"3\"", ",", "\"does not\"", ":", "\"no\"", ",", "\"fun\"", ":", "\"none\"", ",", "\"art\"", ":", "\"none\"", ",", "\n", "}", "\n", "\n", "for", "slot", "in", "slots", ":", "\n", "        ", "if", "slot", "in", "label_dict", ".", "keys", "(", ")", ":", "\n", "# general typos", "\n", "            ", "if", "label_dict", "[", "slot", "]", "in", "GENERAL_TYPO", ".", "keys", "(", ")", ":", "\n", "                ", "label_dict", "[", "slot", "]", "=", "label_dict", "[", "slot", "]", ".", "replace", "(", "label_dict", "[", "slot", "]", ",", "GENERAL_TYPO", "[", "label_dict", "[", "slot", "]", "]", ")", "\n", "\n", "# miss match slot and value", "\n", "", "if", "slot", "==", "\"hotel-type\"", "and", "label_dict", "[", "slot", "]", "in", "[", "\"nigh\"", ",", "\"moderate -ly priced\"", ",", "\"bed and breakfast\"", ",", "\"centre\"", ",", "\"venetian\"", ",", "\"intern\"", ",", "\"a cheap -er hotel\"", "]", "or", "slot", "==", "\"hotel-internet\"", "and", "label_dict", "[", "slot", "]", "==", "\"4\"", "or", "slot", "==", "\"hotel-pricerange\"", "and", "label_dict", "[", "slot", "]", "==", "\"2\"", "or", "slot", "==", "\"attraction-type\"", "and", "label_dict", "[", "slot", "]", "in", "[", "\"gastropub\"", ",", "\"la raza\"", ",", "\"galleria\"", ",", "\"gallery\"", ",", "\"science\"", ",", "\"m\"", "]", "or", "\"area\"", "in", "slot", "and", "label_dict", "[", "slot", "]", "in", "[", "\"moderate\"", "]", "or", "\"day\"", "in", "slot", "and", "label_dict", "[", "slot", "]", "==", "\"t\"", ":", "\n", "                ", "label_dict", "[", "slot", "]", "=", "\"none\"", "\n", "", "elif", "slot", "==", "\"hotel-type\"", "and", "label_dict", "[", "slot", "]", "in", "[", "\"hotel with free parking and free wifi\"", ",", "\"4\"", ",", "\"3 star hotel\"", "]", ":", "\n", "                ", "label_dict", "[", "slot", "]", "=", "\"hotel\"", "\n", "", "elif", "slot", "==", "\"hotel-star\"", "and", "label_dict", "[", "slot", "]", "==", "\"3 star hotel\"", ":", "\n", "                ", "label_dict", "[", "slot", "]", "=", "\"3\"", "\n", "", "elif", "\"area\"", "in", "slot", ":", "\n", "                ", "if", "label_dict", "[", "slot", "]", "==", "\"no\"", ":", "label_dict", "[", "slot", "]", "=", "\"north\"", "\n", "elif", "label_dict", "[", "slot", "]", "==", "\"we\"", ":", "label_dict", "[", "slot", "]", "=", "\"west\"", "\n", "elif", "label_dict", "[", "slot", "]", "==", "\"cent\"", ":", "label_dict", "[", "slot", "]", "=", "\"centre\"", "\n", "", "elif", "\"day\"", "in", "slot", ":", "\n", "                ", "if", "label_dict", "[", "slot", "]", "==", "\"we\"", ":", "label_dict", "[", "slot", "]", "=", "\"wednesday\"", "\n", "elif", "label_dict", "[", "slot", "]", "==", "\"no\"", ":", "label_dict", "[", "slot", "]", "=", "\"none\"", "\n", "", "elif", "\"price\"", "in", "slot", "and", "label_dict", "[", "slot", "]", "==", "\"ch\"", ":", "\n", "                ", "label_dict", "[", "slot", "]", "=", "\"cheap\"", "\n", "", "elif", "\"internet\"", "in", "slot", "and", "label_dict", "[", "slot", "]", "==", "\"free\"", ":", "\n", "                ", "label_dict", "[", "slot", "]", "=", "\"yes\"", "\n", "\n", "# some out-of-define classification slot values", "\n", "", "if", "slot", "==", "\"restaurant-area\"", "and", "label_dict", "[", "slot", "]", "in", "[", "\"stansted airport\"", ",", "\"cambridge\"", ",", "\"silver street\"", "]", "or", "slot", "==", "\"attraction-area\"", "and", "label_dict", "[", "slot", "]", "in", "[", "\"norwich\"", ",", "\"ely\"", ",", "\"museum\"", ",", "\"same area as hotel\"", "]", ":", "\n", "                ", "label_dict", "[", "slot", "]", "=", "\"none\"", "\n", "\n", "", "", "", "return", "label_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.fix_label.has_or_character": [[70, 72], ["any", "slot_values.values"], "function", ["None"], ["", "def", "has_or_character", "(", "slot_values", ":", "Dict", "[", "str", ",", "str", "]", ")", ":", "\n", "    ", "return", "any", "(", "'|'", "in", "v", "for", "v", "in", "slot_values", ".", "values", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.MwzConverter.__init__": [[511, 528], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wo_para", ":", "bool", ",", "do_concat", ":", "bool", ")", ":", "\n", "        ", "self", ".", "domain_state_to_sum", ":", "Dict", "[", "str", ",", "Callable", "]", "=", "{", "\n", "\"train\"", ":", "train_state_to_sum", ",", "\n", "\"restaurant\"", ":", "restaurant_state_to_sum", ",", "\n", "\"hotel\"", ":", "hotel_state_to_sum", ",", "\n", "\"taxi\"", ":", "taxi_state_to_sum", ",", "\n", "\"attraction\"", ":", "attraction_state_to_sum", ",", "\n", "}", "\n", "self", ".", "domain_sum_to_state", "=", "{", "\n", "\"train\"", ":", "train_sum_to_state", ",", "\n", "\"restaurant\"", ":", "restaurant_sum_to_state", ",", "\n", "\"taxi\"", ":", "taxi_sum_to_state", ",", "\n", "\"attraction\"", ":", "attraction_sum_to_state", ",", "\n", "\"hotel\"", ":", "hotel_sum_to_state", ",", "\n", "}", "\n", "self", ".", "do_concat", "=", "do_concat", "\n", "self", ".", "wo_para", "=", "wo_para", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.MwzConverter.sum_to_state": [[529, 534], ["state_sum_converter.MwzConverter.domain_sum_to_state.values", "state_dict.update", "_sum_to_state"], "methods", ["None"], ["", "def", "sum_to_state", "(", "self", ",", "summ", ":", "str", ")", "->", "Dict", ":", "\n", "        ", "state_dict", "=", "{", "}", "\n", "for", "_sum_to_state", "in", "self", ".", "domain_sum_to_state", ".", "values", "(", ")", ":", "\n", "            ", "state_dict", ".", "update", "(", "_sum_to_state", "(", "summ", ",", "is_one_sentence", "=", "self", ".", "do_concat", ")", ")", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.MwzConverter.state_to_sum": [[535, 552], ["list", "random.shuffle", "set", "set", "enumerate", "state_sum_converter.MwzConverter.domain_state_to_sum.keys", "k.split"], "methods", ["None"], ["", "def", "state_to_sum", "(", "\n", "self", ",", "\n", "ds", ":", "Dict", ",", "\n", "is_for_template", ":", "Optional", "[", "bool", "]", "=", "False", ",", "\n", "blank", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "str", ":", "\n", "        ", "appearing_domains", "=", "list", "(", "set", "(", "k", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "k", "in", "ds", ")", "&", "set", "(", "self", ".", "domain_state_to_sum", ".", "keys", "(", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "appearing_domains", ")", "\n", "either", "=", "(", "lambda", "x", ":", "blank", "if", "is_for_template", "else", "x", ")", "\n", "\n", "sentences", "=", "[", "\n", "self", ".", "domain_state_to_sum", "[", "domain", "]", "(", "ds", ",", "either", "=", "either", ",", "is_one_sentence", "=", "self", ".", "do_concat", ",", "idx", "=", "idx", ",", "wo_para", "=", "self", ".", "wo_para", ")", "\n", "for", "idx", ",", "domain", "in", "enumerate", "(", "appearing_domains", ")", "\n", "]", "\n", "summary", "=", "' Also, '", ".", "join", "(", "sentences", ")", "# when list is length 1, join does not add the Also, and just returns an str", "\n", "\n", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.DomainFreeConverter.__init__": [[556, 562], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "sentence_prefix", "=", "'The user wants '", "\n", "self", ".", "slot_prefix", "=", "' as '", "\n", "self", ".", "domain_prefix", "=", "' of '", "\n", "self", ".", "phrase_divider", "=", "', '", "\n", "self", ".", "sentence_postfix", "=", "'.'", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.DomainFreeConverter.state_to_sum": [[563, 584], ["enumerate", "ds.items", "domain_slot.split", "domain_slot.split"], "methods", ["None"], ["", "def", "state_to_sum", "(", "self", ",", "ds", ":", "Dict", ",", "is_for_template", ":", "Optional", "[", "bool", "]", "=", "False", ",", "blank", ":", "Optional", "[", "str", "]", "=", "None", ",", "is_one_sentence", "=", "True", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        If we wants to generate various templates and lm ranking, we could fit better preposition for each slot\n        Input:\n            example: {'domain-key1': 'value1', 'key2': 'value2'}\n        Returns:\n            example: \"The user wants key1 as value1, key2 as value2\"\n            real_ex: \"The user wants london as departure, cambridge as destination, 12:30 as arriveby, 3 as book people,\n                    tuesday as day.\"\n        \"\"\"", "\n", "res", "=", "self", ".", "sentence_prefix", "\n", "for", "i", ",", "(", "domain_slot", ",", "value", ")", "in", "enumerate", "(", "ds", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "res", "+=", "self", ".", "phrase_divider", "\n", "", "domain", "=", "domain_slot", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "slot", "=", "domain_slot", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", "\n", "phrase", "=", "value", "+", "self", ".", "slot_prefix", "+", "slot", "+", "self", ".", "domain_prefix", "+", "domain", "\n", "res", "+=", "phrase", "\n", "\n", "", "res", "+=", "self", ".", "sentence_postfix", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.DomainFreeConverter.sum_to_state": [[585, 599], ["summary.split.split.replace", "summary.split.split.replace", "summary.split.split.split", "phrase.split", "phrase.split", "slot_of_domain.split", "slot_of_domain.split"], "methods", ["None"], ["", "def", "sum_to_state", "(", "self", ",", "summary", ":", "str", ")", "->", "Dict", ":", "\n", "        ", "res", "=", "{", "}", "\n", "summary", "=", "summary", ".", "replace", "(", "self", ".", "sentence_prefix", ",", "\"\"", ")", "\n", "summary", "=", "summary", ".", "replace", "(", "self", ".", "sentence_postfix", ",", "\"\"", ")", "\n", "summary", "=", "summary", ".", "split", "(", "self", ".", "phrase_divider", ")", "\n", "for", "phrase", "in", "summary", ":", "\n", "            ", "if", "self", ".", "domain_prefix", "not", "in", "phrase", "or", "self", ".", "slot_prefix", "not", "in", "phrase", ":", "\n", "                ", "continue", "\n", "", "value", "=", "phrase", ".", "split", "(", "self", ".", "slot_prefix", ")", "[", "0", "]", "\n", "slot_of_domain", "=", "phrase", ".", "split", "(", "self", ".", "slot_prefix", ")", "[", "-", "1", "]", "\n", "slot", "=", "slot_of_domain", ".", "split", "(", "self", ".", "domain_prefix", ")", "[", "0", "]", "\n", "domain", "=", "slot_of_domain", ".", "split", "(", "self", ".", "domain_prefix", ")", "[", "-", "1", "]", "\n", "res", "[", "f\"{domain}-{slot}\"", "]", "=", "value", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.safeint": [[12, 17], ["int"], "function", ["None"], ["def", "safeint", "(", "x", ")", "->", "int", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "int", "(", "x", ")", "\n", "", "except", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_first_sentence": [[121, 150], ["f", "DOMAIN_SLOT_TEMPLATES[].items", "slot_phrases.items", "slot_phrases.items"], "function", ["None"], ["def", "get_first_sentence", "(", "ds", ":", "Dict", ",", "domain", ":", "str", ",", "either", ":", "callable", ",", "except_keys", ":", "Set", "[", "str", "]", ",", "idx", ":", "int", ",", "wo_para", ":", "bool", ")", ":", "\n", "# For example, if ds = {\"hotel-type\": \"hotel\", \"hotel-stars\": \"3\", \"hotel-book people\": \"1\", ... },", "\n", "# slot_phrases = {\"hotel-type\": \"which is a hotel\", \"hotel-stars\": \"ranked 3 stars\", \"hotel-book people\": \"for 1 person\", ... }", "\n", "    ", "slot_phrases", "=", "{", "\n", "_slot_name", ":", "f", "(", "ds", "[", "_slot_name", "]", ",", "either", ")", "for", "_slot_name", ",", "f", "in", "DOMAIN_SLOT_TEMPLATES", "[", "domain", "]", ".", "items", "(", ")", "\n", "if", "_slot_name", "in", "ds", "and", "ds", "[", "_slot_name", "]", "!=", "\"dontcare\"", "\n", "}", "\n", "\n", "# example: f\"{'The user'} {'is looking for'} {'a place to stay'} {'which is a hotel'} ... \"", "\n", "# example: f\"{'he'} {'is searching for'} {'a place to stay'} {'which is a guesthouse'} {'called Ocean house'} ... \"", "\n", "sentence_idx", "=", "0", "if", "wo_para", "else", "idx", "\n", "res", "=", "\" \"", ".", "join", "(", "\n", "[", "f\"{'The user' if sentence_idx == 0 else 'he'} {COMMON_PHRASES[sentence_idx]} {DOMAIN_PHRASE_IN_SENTENCE[domain]}\"", "]", "+", "[", "\n", "_phrase", "for", "_slot_name", ",", "_phrase", "in", "slot_phrases", ".", "items", "(", ")", "\n", "if", "_slot_name", "not", "in", "except_keys", "\n", "]", "\n", ")", "\n", "\n", "# example: [\"has internet\", \"has no parking\"]", "\n", "rest_phrases", "=", "[", "\n", "_phrase", "for", "_slot_name", ",", "_phrase", "in", "slot_phrases", ".", "items", "(", ")", "\n", "if", "_slot_name", "in", "except_keys", "\n", "]", "\n", "if", "rest_phrases", ":", "\n", "# example: \", which has internet and has no parking\"", "\n", "        ", "res", "+=", "f\", which \"", "\n", "res", "+=", "\" and \"", ".", "join", "(", "rest_phrases", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_dontcare_sentence": [[152, 175], ["either", "len", "DOMAIN_DONTCARE_PHRASES_DICT[].items", "len", "len"], "function", ["None"], ["", "def", "get_dontcare_sentence", "(", "ds", ":", "dict", ",", "domain", ":", "str", ",", "either", ":", "callable", ",", "is_one_sentence", ":", "bool", ",", "wo_para", ":", "bool", ")", ":", "\n", "    ", "dontcare_phrases", "=", "[", "\n", "either", "(", "_phrase", ")", "for", "_slot_name", ",", "_phrase", "in", "DOMAIN_DONTCARE_PHRASES_DICT", "[", "domain", "]", ".", "items", "(", ")", "\n", "if", "_slot_name", "in", "ds", "and", "ds", "[", "_slot_name", "]", "==", "\"dontcare\"", "\n", "]", "\n", "\n", "if", "len", "(", "dontcare_phrases", ")", ">", "0", ":", "\n", "        ", "if", "wo_para", ":", "\n", "            ", "second_sentence", "=", "f'{\", and the user\" if is_one_sentence else \". The user\"} does not care about '", "\n", "", "else", ":", "\n", "            ", "second_sentence", "=", "f'{\", and he\" if is_one_sentence else \". He\"} does not care about '", "\n", "\n", "", "if", "len", "(", "dontcare_phrases", ")", "==", "1", ":", "\n", "            ", "second_sentence", "+=", "dontcare_phrases", "[", "0", "]", "\n", "", "elif", "len", "(", "dontcare_phrases", ")", "==", "2", ":", "\n", "            ", "second_sentence", "+=", "f\"{dontcare_phrases[0]} and {dontcare_phrases[1]}\"", "\n", "", "else", ":", "\n", "            ", "dontcare_phrases", "[", "-", "1", "]", "=", "f\"and {dontcare_phrases[-1]}\"", "\n", "second_sentence", "+=", "', '", ".", "join", "(", "dontcare_phrases", ")", "\n", "", "", "else", ":", "\n", "        ", "second_sentence", "=", "\"\"", "\n", "\n", "", "return", "second_sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_dontcare_values": [[177, 188], ["re.search", "DOMAIN_DONTCARE_PHRASES_DICT[].items", "re.search", "re.search.span"], "function", ["None"], ["", "def", "get_dontcare_values", "(", "summary", ":", "str", ",", "domain", ":", "str", ")", ":", "\n", "    ", "dontcare_match", "=", "re", ".", "search", "(", "\"does not care about\"", ",", "summary", ")", "\n", "if", "dontcare_match", ":", "\n", "        ", "rest", "=", "summary", "[", "dontcare_match", ".", "span", "(", ")", "[", "1", "]", ":", "]", "\n", "return", "{", "\n", "_slot_name", ":", "\"dontcare\"", "\n", "for", "_slot_name", ",", "_phrase", "in", "DOMAIN_DONTCARE_PHRASES_DICT", "[", "domain", "]", ".", "items", "(", ")", "\n", "if", "re", ".", "search", "(", "_phrase", ",", "rest", ")", "\n", "}", "\n", "", "else", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.train_state_to_sum": [[190, 209], ["state_sum_converter.get_first_sentence", "state_sum_converter.get_dontcare_sentence"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_first_sentence", "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_dontcare_sentence"], ["", "", "def", "train_state_to_sum", "(", "ds", ":", "dict", ",", "either", ":", "callable", ",", "is_one_sentence", ":", "bool", ",", "idx", ":", "int", ",", "wo_para", ":", "bool", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Input:\n        example: {'train-departure': 'london', 'train-destination': 'cambridge', 'train-arriveby': '12:30', 'train-book people': '3', 'train-day': 'tuesday'}\n    Returns:\n        example: \"The user is looking for a train for 3 people from london to cambridge on tuesday, which arrives by 12:30.\"\n    \"\"\"", "\n", "first_sentence", "=", "get_first_sentence", "(", "ds", ",", "domain", "=", "\"train\"", ",", "either", "=", "either", ",", "except_keys", "=", "{", "\"train-arriveby\"", ",", "\"train-leaveat\"", "}", ",", "idx", "=", "idx", ",", "wo_para", "=", "wo_para", ")", "\n", "\n", "second_sentence", "=", "get_dontcare_sentence", "(", "\n", "ds", ",", "\n", "domain", "=", "\"train\"", ",", "\n", "either", "=", "either", ",", "\n", "is_one_sentence", "=", "is_one_sentence", ",", "\n", "wo_para", "=", "wo_para", "\n", ")", "\n", "res", "=", "first_sentence", "+", "second_sentence", "+", "\".\"", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.taxi_state_to_sum": [[211, 230], ["state_sum_converter.get_first_sentence", "state_sum_converter.get_dontcare_sentence"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_first_sentence", "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_dontcare_sentence"], ["", "def", "taxi_state_to_sum", "(", "ds", ":", "Dict", ",", "either", ":", "callable", ",", "is_one_sentence", ":", "bool", ",", "idx", ":", "int", ",", "wo_para", ":", "bool", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Input:\n        example: {\"taxi-destination\": 'galleria', \"taxi-departure\": 'kirkwood house', \"taxi-leaveat\": '12:30', \"taxi-arriveby\": \"19:15\"}\n    Returns:\n        example: \"The user is looking for a taxi from kirkwood house to galleria, which arrives by 19:15 and leaves at 12:30.\"\n    \"\"\"", "\n", "first_sentence", "=", "get_first_sentence", "(", "ds", ",", "domain", "=", "\"taxi\"", ",", "either", "=", "either", ",", "except_keys", "=", "{", "\"taxi-arriveby\"", ",", "\"taxi-leaveat\"", "}", ",", "idx", "=", "idx", ",", "wo_para", "=", "wo_para", ")", "\n", "\n", "second_sentence", "=", "get_dontcare_sentence", "(", "\n", "ds", ",", "\n", "domain", "=", "\"taxi\"", ",", "\n", "either", "=", "either", ",", "\n", "is_one_sentence", "=", "is_one_sentence", ",", "\n", "wo_para", "=", "wo_para", "\n", ")", "\n", "res", "=", "first_sentence", "+", "second_sentence", "+", "\".\"", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.restaurant_state_to_sum": [[232, 258], ["state_sum_converter.get_first_sentence", "state_sum_converter.get_dontcare_sentence"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_first_sentence", "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_dontcare_sentence"], ["", "def", "restaurant_state_to_sum", "(", "ds", ":", "Dict", ",", "either", ":", "callable", ",", "is_one_sentence", ":", "bool", ",", "idx", ":", "int", ",", "wo_para", ":", "bool", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Input:\n        example: {\n                'restaurant-book day': 'tuesday', 'restaurant-book people': '6',\n                'restaurant-book time': '12:00', 'restaurant-name': 'meze bar', 'restaurant-pricerange': 'cheap',\n                'restaurant-area': 'south', 'restaurant-food': 'seafood',\n            }\n    Returns:\n        example: \"The user is looking for a restaurant called meze bar located in south,\n            which serves seafood under cheap price range\n            for 6 people on tuesday at 12:00.\n            \"\n    \"\"\"", "\n", "first_sentence", "=", "get_first_sentence", "(", "ds", "=", "ds", ",", "domain", "=", "\"restaurant\"", ",", "either", "=", "either", ",", "except_keys", "=", "{", "\"restaurant-food\"", "}", ",", "idx", "=", "idx", ",", "wo_para", "=", "wo_para", ")", "\n", "\n", "second_sentence", "=", "get_dontcare_sentence", "(", "\n", "ds", ",", "\n", "domain", "=", "\"restaurant\"", ",", "\n", "either", "=", "either", ",", "\n", "is_one_sentence", "=", "is_one_sentence", ",", "\n", "wo_para", "=", "wo_para", "\n", ")", "\n", "res", "=", "first_sentence", "+", "second_sentence", "+", "\".\"", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.attraction_state_to_sum": [[260, 283], ["state_sum_converter.get_first_sentence", "state_sum_converter.get_dontcare_sentence", "set"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_first_sentence", "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_dontcare_sentence"], ["", "def", "attraction_state_to_sum", "(", "ds", ":", "Dict", ",", "either", ":", "callable", ",", "is_one_sentence", ":", "bool", ",", "idx", ":", "int", ",", "wo_para", ":", "bool", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Input:\n        example: {\n            \"attraction-area\": \"cambridge\",\n            \"attraction-name\": \"nusha\",\n            \"attraction-type\": \"museum\",\n            }\n    Returns:\n        example: \"The user is looking for an attraction called nusha, which is a museum located in cambridge.\"\n    \"\"\"", "\n", "first_sentence", "=", "get_first_sentence", "(", "ds", ",", "domain", "=", "\"attraction\"", ",", "either", "=", "either", ",", "except_keys", "=", "set", "(", ")", ",", "idx", "=", "idx", ",", "wo_para", "=", "wo_para", ")", "\n", "\n", "second_sentence", "=", "get_dontcare_sentence", "(", "\n", "ds", ",", "\n", "domain", "=", "\"attraction\"", ",", "\n", "either", "=", "either", ",", "\n", "is_one_sentence", "=", "is_one_sentence", ",", "\n", "wo_para", "=", "wo_para", "\n", ")", "\n", "res", "=", "first_sentence", "+", "second_sentence", "+", "\".\"", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.hotel_state_to_sum": [[285, 298], ["state_sum_converter.get_first_sentence", "state_sum_converter.get_dontcare_sentence"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_first_sentence", "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_dontcare_sentence"], ["", "def", "hotel_state_to_sum", "(", "ds", ":", "Dict", ",", "either", ":", "callable", ",", "is_one_sentence", ":", "bool", ",", "idx", ":", "int", ",", "wo_para", ":", "bool", ")", "->", "str", ":", "\n", "    ", "first_sentence", "=", "get_first_sentence", "(", "ds", "=", "ds", ",", "domain", "=", "\"hotel\"", ",", "either", "=", "either", ",", "except_keys", "=", "{", "\"hotel-parking\"", ",", "\"hotel-internet\"", "}", ",", "idx", "=", "idx", ",", "wo_para", "=", "wo_para", ")", "\n", "\n", "second_sentence", "=", "get_dontcare_sentence", "(", "\n", "ds", ",", "\n", "domain", "=", "\"hotel\"", ",", "\n", "either", "=", "either", ",", "\n", "is_one_sentence", "=", "is_one_sentence", ",", "\n", "wo_para", "=", "wo_para", "\n", ")", "\n", "\n", "res", "=", "first_sentence", "+", "second_sentence", "+", "\".\"", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.train_sum_to_state": [[300, 336], ["re.split", "slot_to_prefix.items", "res.update", "re.search", "state_sum_converter.get_dontcare_values", "summary.split", "value.replace().replace", "re.search.span", "re.split", "value.replace"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_dontcare_values"], ["", "def", "train_sum_to_state", "(", "summ", ":", "str", ",", "is_one_sentence", ":", "bool", ")", "->", "dict", ":", "\n", "    ", "sentences", "=", "re", ".", "split", "(", "\"|\"", ".", "join", "(", "COMMON_PHRASES", ")", ",", "summ", ")", "\n", "summary", "=", "[", "sentence", "for", "sentence", "in", "sentences", "if", "DOMAIN_PHRASE_IN_SENTENCE", "[", "\"train\"", "]", "in", "sentence", "]", "\n", "if", "not", "summary", ":", "\n", "        ", "return", "{", "}", "\n", "", "summary", "=", "summary", "[", "0", "]", "\n", "slot_to_prefix", "=", "{", "\n", "\"train-departure\"", ":", "\" from \"", ",", "\n", "\"train-destination\"", ":", "\" to \"", ",", "\n", "\"train-arriveby\"", ":", "\" arrives by \"", ",", "\n", "\"train-leaveat\"", ":", "\" leaves at \"", ",", "\n", "\"train-book people\"", ":", "r\" for \\d+ p\"", ",", "\n", "\"train-day\"", ":", "\" on \"", ",", "\n", "}", "\n", "\n", "dontcare_sentence", "=", "summary", "\n", "if", "not", "is_one_sentence", ":", "\n", "        ", "summary", "=", "summary", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "", "res", "=", "{", "}", "\n", "\n", "for", "slot", ",", "prefix", "in", "slot_to_prefix", ".", "items", "(", ")", ":", "\n", "        ", "match", "=", "re", ".", "search", "(", "prefix", ",", "summary", ")", "\n", "if", "match", ":", "\n", "            ", "start_idx", "=", "match", ".", "span", "(", ")", "[", "-", "1", "]", "\n", "if", "slot", "==", "\"train-book people\"", ":", "\n", "                ", "start_idx", "-=", "3", "\n", "\n", "", "value", "=", "re", ".", "split", "(", "\n", "\" The | Also, | which | for | from | to | on | and | people| person\"", ",", "summary", "[", "start_idx", ":", "]", "\n", ")", "[", "0", "]", "\n", "\n", "res", "[", "slot", "]", "=", "value", ".", "replace", "(", "\",\"", ",", "\"\"", ")", ".", "replace", "(", "\".\"", ",", "\"\"", ")", "\n", "\n", "", "", "res", ".", "update", "(", "get_dontcare_values", "(", "dontcare_sentence", ",", "\"train\"", ")", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.taxi_sum_to_state": [[338, 371], ["re.split", "slot_to_prefix.items", "res.update", "re.search", "state_sum_converter.get_dontcare_values", "summary.split", "value.replace().replace", "re.search.span", "re.split", "value.replace"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_dontcare_values"], ["", "def", "taxi_sum_to_state", "(", "summ", ":", "str", ",", "is_one_sentence", ":", "bool", ")", "->", "Dict", ":", "\n", "    ", "sentences", "=", "re", ".", "split", "(", "\"|\"", ".", "join", "(", "COMMON_PHRASES", ")", ",", "summ", ")", "\n", "summary", "=", "[", "sentence", "for", "sentence", "in", "sentences", "if", "DOMAIN_PHRASE_IN_SENTENCE", "[", "\"taxi\"", "]", "in", "sentence", "]", "\n", "if", "not", "summary", ":", "\n", "        ", "return", "{", "}", "\n", "", "summary", "=", "summary", "[", "0", "]", "\n", "slot_to_prefix", "=", "{", "\n", "\"taxi-departure\"", ":", "\" from \"", ",", "\n", "\"taxi-destination\"", ":", "\" to \"", ",", "\n", "\"taxi-arriveby\"", ":", "\" arrives by \"", ",", "\n", "\"taxi-leaveat\"", ":", "\" leaves at \"", ",", "\n", "}", "\n", "\n", "dontcare_sentence", "=", "summary", "\n", "if", "not", "is_one_sentence", ":", "\n", "        ", "summary", "=", "summary", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "", "res", "=", "{", "}", "\n", "\n", "for", "slot", ",", "prefix", "in", "slot_to_prefix", ".", "items", "(", ")", ":", "\n", "        ", "match", "=", "re", ".", "search", "(", "prefix", ",", "summary", ")", "\n", "if", "match", ":", "\n", "            ", "start_idx", "=", "match", ".", "span", "(", ")", "[", "-", "1", "]", "\n", "\n", "value", "=", "re", ".", "split", "(", "\n", "\" The | Also, | which | from | to | and \"", ",", "summary", "[", "start_idx", ":", "]", "\n", ")", "[", "0", "]", "\n", "\n", "res", "[", "slot", "]", "=", "value", ".", "replace", "(", "\",\"", ",", "\"\"", ")", ".", "replace", "(", "\".\"", ",", "\"\"", ")", "\n", "\n", "", "", "res", ".", "update", "(", "get_dontcare_values", "(", "dontcare_sentence", ",", "\"taxi\"", ")", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.restaurant_sum_to_state": [[373, 415], ["re.split", "slot_to_prefix.items", "res.update", "re.search", "state_sum_converter.get_dontcare_values", "summary.split", "value.replace().replace", "re.search.span", "re.split", "value.replace", "summary[].startswith"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_dontcare_values"], ["", "def", "restaurant_sum_to_state", "(", "summ", ":", "str", ",", "is_one_sentence", ":", "bool", ")", "->", "dict", ":", "\n", "    ", "sentences", "=", "re", ".", "split", "(", "\"|\"", ".", "join", "(", "COMMON_PHRASES", ")", ",", "summ", ")", "\n", "summary", "=", "[", "sentence", "for", "sentence", "in", "sentences", "if", "DOMAIN_PHRASE_IN_SENTENCE", "[", "\"restaurant\"", "]", "in", "sentence", "]", "\n", "if", "not", "summary", ":", "\n", "        ", "return", "{", "}", "\n", "", "summary", "=", "summary", "[", "0", "]", "\n", "slot_to_prefix", "=", "{", "\n", "\"restaurant-name\"", ":", "\" called \"", ",", "\n", "\"restaurant-food\"", ":", "\" serves \"", ",", "\n", "\"restaurant-area\"", ":", "\" located in the \"", ",", "\n", "\"restaurant-pricerange\"", ":", "\" with a\"", ",", "\n", "\"restaurant-book day\"", ":", "\" on \"", ",", "\n", "\"restaurant-book people\"", ":", "r\" for \\d+ p\"", ",", "\n", "\"restaurant-book time\"", ":", "\" at \"", ",", "\n", "}", "\n", "res", "=", "{", "}", "\n", "\n", "dontcare_sentence", "=", "summary", "\n", "if", "not", "is_one_sentence", ":", "\n", "        ", "summary", "=", "summary", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "", "for", "slot", ",", "prefix", "in", "slot_to_prefix", ".", "items", "(", ")", ":", "\n", "        ", "match", "=", "re", ".", "search", "(", "prefix", ",", "summary", ")", "\n", "if", "match", ":", "\n", "            ", "start_idx", "=", "match", ".", "span", "(", ")", "[", "-", "1", "]", "\n", "if", "slot", "==", "\"restaurant-book people\"", ":", "\n", "                ", "start_idx", "-=", "3", "\n", "", "elif", "slot", "==", "\"restaurant-pricerange\"", ":", "\n", "                ", "start_idx", "+=", "2", "if", "summary", "[", "start_idx", ":", "]", ".", "startswith", "(", "\"n\"", ")", "else", "1", "\n", "\n", "", "_summary", "=", "summary", "[", "start_idx", ":", "]", "\n", "\n", "value", "=", "re", ".", "split", "(", "\n", "\" The | Also, | which | called | for | on | and | at | located in the | with a| people| person| price\"", ",", "\n", "_summary", ",", "\n", ")", "[", "0", "]", "\n", "\n", "res", "[", "slot", "]", "=", "value", ".", "replace", "(", "\",\"", ",", "\"\"", ")", ".", "replace", "(", "\".\"", ",", "\"\"", ")", "\n", "\n", "", "", "res", ".", "update", "(", "get_dontcare_values", "(", "dontcare_sentence", ",", "\"restaurant\"", ")", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.attraction_sum_to_state": [[417, 454], ["re.split", "slot_to_prefix.items", "res.update", "re.search", "state_sum_converter.get_dontcare_values", "summary.split", "value.replace().replace.replace().replace", "re.search.span", "re.split", "summary[].startswith", "value.replace().replace.replace"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_dontcare_values"], ["", "def", "attraction_sum_to_state", "(", "summ", ":", "str", ",", "is_one_sentence", ":", "bool", ")", "->", "Dict", ":", "\n", "    ", "sentences", "=", "re", ".", "split", "(", "\"|\"", ".", "join", "(", "COMMON_PHRASES", ")", ",", "summ", ")", "\n", "summary", "=", "[", "sentence", "for", "sentence", "in", "sentences", "if", "DOMAIN_PHRASE_IN_SENTENCE", "[", "'attraction'", "]", "in", "sentence", "]", "\n", "if", "not", "summary", ":", "\n", "        ", "return", "{", "}", "\n", "", "summary", "=", "summary", "[", "0", "]", "\n", "slot_to_prefix", "=", "{", "\n", "\"attraction-name\"", ":", "r\" called \"", ",", "\n", "\"attraction-area\"", ":", "r\" located in the \"", ",", "\n", "\"attraction-type\"", ":", "r\" which is a\"", ",", "\n", "}", "\n", "res", "=", "{", "}", "\n", "\n", "dontcare_sentence", "=", "summary", "\n", "if", "not", "is_one_sentence", ":", "\n", "        ", "summary", "=", "summary", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "", "for", "slot", ",", "prefix", "in", "slot_to_prefix", ".", "items", "(", ")", ":", "\n", "        ", "match", "=", "re", ".", "search", "(", "prefix", ",", "summary", ")", "\n", "if", "match", ":", "\n", "            ", "start_idx", "=", "match", ".", "span", "(", ")", "[", "-", "1", "]", "\n", "if", "slot", "==", "\"attraction-type\"", ":", "\n", "                ", "start_idx", "+=", "2", "if", "summary", "[", "start_idx", ":", "]", ".", "startswith", "(", "\"n\"", ")", "else", "1", "\n", "\n", "", "_summary", "=", "summary", "[", "start_idx", ":", "]", "\n", "\n", "value", "=", "re", ".", "split", "(", "\n", "\" The | Also, | which | called | located in the \"", ",", "\n", "_summary", ",", "\n", ")", "[", "0", "]", "\n", "\n", "value", "=", "value", ".", "replace", "(", "\",\"", ",", "\"\"", ")", ".", "replace", "(", "\".\"", ",", "\"\"", ")", "\n", "res", "[", "slot", "]", "=", "value", "\n", "\n", "", "", "res", ".", "update", "(", "get_dontcare_values", "(", "dontcare_sentence", ",", "\"attraction\"", ")", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.hotel_sum_to_state": [[456, 508], ["re.split", "slot_to_prefix.items", "res.update", "state_sum_converter.get_dontcare_values", "summary.split", "type", "re.search", "re.search", "value.replace().replace", "match.span", "re.split", "value.replace", "summary[].startswith", "match.group"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_dontcare_values"], ["", "def", "hotel_sum_to_state", "(", "summ", ":", "str", ",", "is_one_sentence", ":", "bool", ")", "->", "dict", ":", "\n", "    ", "sentences", "=", "re", ".", "split", "(", "\"|\"", ".", "join", "(", "COMMON_PHRASES", ")", ",", "summ", ")", "\n", "summary", "=", "[", "sentence", "for", "sentence", "in", "sentences", "if", "DOMAIN_PHRASE_IN_SENTENCE", "[", "\"hotel\"", "]", "in", "sentence", "]", "\n", "if", "not", "summary", ":", "\n", "        ", "return", "{", "}", "\n", "", "summary", "=", "summary", "[", "0", "]", "\n", "slot_to_prefix", "=", "{", "\n", "\"hotel-type\"", ":", "\" which is a \"", ",", "\n", "\"hotel-name\"", ":", "\" called \"", ",", "\n", "\"hotel-stars\"", ":", "\" ranked \"", ",", "\n", "\"hotel-pricerange\"", ":", "\" with a\"", ",", "\n", "\"hotel-area\"", ":", "\" located in the \"", ",", "\n", "\"hotel-book people\"", ":", "r\" for \\d+ p\"", ",", "\n", "\"hotel-book day\"", ":", "\" on \"", ",", "\n", "\"hotel-book stay\"", ":", "r\" for \\d+ d\"", ",", "\n", "\"hotel-parking\"", ":", "[", "\" has no p\"", ",", "\" has p\"", "]", ",", "\n", "\"hotel-internet\"", ":", "[", "\" has no i\"", ",", "\" has i\"", "]", ",", "\n", "}", "\n", "res", "=", "{", "}", "\n", "\n", "dontcare_sentence", "=", "summary", "\n", "if", "not", "is_one_sentence", ":", "\n", "        ", "summary", "=", "summary", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "", "for", "slot", ",", "prefix", "in", "slot_to_prefix", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "prefix", ")", "==", "str", ":", "\n", "            ", "matches", "=", "[", "re", ".", "search", "(", "prefix", ",", "summary", ")", "]", "\n", "", "else", ":", "\n", "            ", "matches", "=", "[", "re", ".", "search", "(", "p", ",", "summary", ")", "for", "p", "in", "prefix", "]", "\n", "", "for", "match", "in", "matches", ":", "\n", "            ", "if", "match", ":", "\n", "                ", "start_idx", "=", "match", ".", "span", "(", ")", "[", "-", "1", "]", "\n", "if", "slot", "in", "{", "\"hotel-book people\"", ",", "\"hotel-book stay\"", "}", ":", "\n", "                    ", "start_idx", "-=", "3", "\n", "", "elif", "slot", "==", "\"hotel-pricerange\"", ":", "\n", "                    ", "start_idx", "+=", "2", "if", "summary", "[", "start_idx", ":", "]", ".", "startswith", "(", "\"n\"", ")", "else", "1", "\n", "\n", "", "_summary", "=", "summary", "[", "start_idx", ":", "]", "\n", "\n", "value", "=", "re", ".", "split", "(", "\n", "\" The | Also, | which | called | ranked | during | located in the | for | on | and | with a| people| person| price| star| day\"", ",", "\n", "_summary", ",", "\n", ")", "[", "0", "]", "\n", "\n", "if", "slot", "in", "[", "\"hotel-internet\"", ",", "\"hotel-parking\"", "]", ":", "\n", "                    ", "value", "=", "\"no\"", "if", "\" no \"", "in", "match", ".", "group", "(", ")", "else", "\"yes\"", "\n", "\n", "", "res", "[", "slot", "]", "=", "value", ".", "replace", "(", "\",\"", ",", "\"\"", ")", ".", "replace", "(", "\".\"", ",", "\"\"", ")", "\n", "\n", "", "", "", "res", ".", "update", "(", "get_dontcare_values", "(", "dontcare_sentence", ",", "domain", "=", "\"hotel\"", ")", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_converter": [[613, 625], ["state_sum_converter.MwzConverter", "state_sum_converter.MwzConverter", "state_sum_converter.MwzConverter", "state_sum_converter.DomainFreeConverter", "state_sum_converter.MwzConverter"], "function", ["None"], ["", "def", "get_converter", "(", "converter_name", ":", "str", ")", ":", "\n", "# without paraphrasing", "\n", "    ", "if", "converter_name", "==", "\"wo_para\"", ":", "\n", "        ", "return", "MwzConverter", "(", "wo_para", "=", "True", ",", "do_concat", "=", "True", ")", "\n", "# without one sentence concatenating", "\n", "", "if", "converter_name", "==", "\"wo_concat\"", ":", "\n", "        ", "return", "MwzConverter", "(", "wo_para", "=", "False", ",", "do_concat", "=", "False", ")", "\n", "", "if", "converter_name", "==", "\"open_domain\"", ":", "\n", "        ", "return", "DomainFreeConverter", "(", ")", "\n", "", "if", "converter_name", "==", "\"vanilla\"", ":", "\n", "        ", "return", "MwzConverter", "(", "wo_para", "=", "True", ",", "do_concat", "=", "False", ")", "\n", "", "return", "MwzConverter", "(", "wo_para", "=", "False", ",", "do_concat", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.datasets.data_loader.DSTDataset.__init__": [[24, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data", ",", "args", ")", ":", "\n", "        ", "\"\"\"Reads source and target sequences from txt files.\"\"\"", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.datasets.data_loader.DSTDataset.__getitem__": [[29, 34], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Returns one data pair (source and target).\"\"\"", "\n", "item_info", "=", "self", ".", "data", "[", "index", "]", "\n", "\n", "return", "item_info", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.datasets.data_loader.DSTDataset.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.datasets.data_loader.read_data": [[39, 127], ["print", "ds2.utils.state_sum_converter.get_converter", "collections.defaultdict", "print", "open", "json.load", "enumerate", "k.startswith", "ds2.utils.fix_label.fix_general_label_error", "set", "data.append", "ds2.utils.fix_label.has_or_character", "any", "ds2.utils.state_sum_converter.get_converter.state_to_sum", "k.startswith", "ds2.utils.fix_label.fix_general_label_error.items", "k.startswith", "dialog_history.lower", "dialog_history.lower", "s.split"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_converter", "home.repos.pwc.inspect_result.jshin49_ds2.utils.fix_label.fix_general_label_error", "home.repos.pwc.inspect_result.jshin49_ds2.utils.fix_label.has_or_character", "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.DomainFreeConverter.state_to_sum"], ["", "", "def", "read_data", "(", "args", ",", "path_name", ",", "SLOTS", ",", "tokenizer", ",", "description", ",", "dataset", "=", "None", ")", ":", "\n", "# Generate domain-dependent slot list", "\n", "    ", "if", "args", "[", "\"only_domain\"", "]", ":", "\n", "        ", "eval_slots", "=", "[", "k", "for", "k", "in", "SLOTS", "if", "k", ".", "startswith", "(", "args", "[", "\"only_domain\"", "]", ")", "]", "\n", "", "elif", "args", "[", "'except_domain'", "]", ":", "\n", "        ", "eval_slots", "=", "[", "k", "for", "k", "in", "SLOTS", "if", "not", "k", ".", "startswith", "(", "args", "[", "\"except_domain\"", "]", ")", "]", "\n", "", "else", ":", "\n", "        ", "eval_slots", "=", "SLOTS", "\n", "\n", "", "print", "(", "(", "\"Reading all files from {}\"", ".", "format", "(", "path_name", ")", ")", ")", "\n", "data", "=", "[", "]", "\n", "\n", "converter", "=", "get_converter", "(", "args", "[", "'state_converter'", "]", ")", "\n", "\n", "domain_counter", "=", "defaultdict", "(", "int", ")", "\n", "# read files", "\n", "with", "open", "(", "path_name", ")", "as", "f", ":", "\n", "        ", "dials", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "for", "dial_dict", "in", "dials", ":", "\n", "            ", "dialog_history", "=", "\"\"", "\n", "\n", "# Skip if the domain is in (hospital, police) as they are not in test set", "\n", "# (hospital, police) also only occur as single domain", "\n", "if", "dial_dict", "[", "\"domains\"", "]", "[", "0", "]", "in", "EXCLUDE_DOMAINS", ":", "\n", "                ", "continue", "\n", "\n", "# Counting domains", "\n", "", "for", "domain", "in", "dial_dict", "[", "\"domains\"", "]", ":", "\n", "                ", "if", "domain", "in", "EXPERIMENT_DOMAINS", ":", "\n", "                    ", "domain_counter", "[", "domain", "]", "+=", "1", "\n", "\n", "# Dialogue-level filtering", "\n", "", "", "if", "args", "[", "\"only_domain\"", "]", ":", "\n", "                ", "if", "args", "[", "\"only_domain\"", "]", "not", "in", "dial_dict", "[", "\"domains\"", "]", ":", "\n", "                    ", "continue", "\n", "", "", "elif", "args", "[", "\"except_domain\"", "]", ":", "\n", "                ", "\"\"\"\n                There are two options to filter dialogue samples when pre-training a model with a given except_domain.\n                max: Filter out every dialogue that contains the except_domain context.\n                min: Filter out a dialogue only if except_domain is the one and only domain that it has.\n                \"\"\"", "\n", "if", "args", "[", "\"dialogue_filter\"", "]", "==", "\"max\"", "and", "args", "[", "\"except_domain\"", "]", "in", "dial_dict", "[", "\"domains\"", "]", ":", "\n", "                    ", "continue", "\n", "", "elif", "args", "[", "\"dialogue_filter\"", "]", "==", "\"min\"", "and", "[", "args", "[", "\"except_domain\"", "]", "]", "==", "dial_dict", "[", "\"domains\"", "]", ":", "\n", "                    ", "continue", "\n", "\n", "# Reading data", "\n", "", "", "for", "turn_id", ",", "turn", "in", "enumerate", "(", "dial_dict", "[", "\"turns\"", "]", ")", ":", "\n", "# accumulate dialogue utterances", "\n", "                ", "dialog_history", "+=", "(", "\n", "\" system: \"", "+", "turn", "[", "\"system\"", "]", "+", "\" user: \"", "+", "turn", "[", "\"user\"", "]", "\n", ")", "\n", "\n", "slot_values", "=", "fix_general_label_error", "(", "turn", "[", "\"state\"", "]", "[", "'slot_values'", "]", ",", "SLOTS", ")", "\n", "slot_values", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "slot_values", ".", "items", "(", ")", "if", "v", "!=", "\"none\"", "}", "\n", "\n", "if", "dataset", "in", "{", "\"train\"", ",", "\"dev\"", "}", "and", "has_or_character", "(", "slot_values", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "args", "[", "\"except_domain\"", "]", "and", "any", "(", "[", "k", ".", "startswith", "(", "args", "[", "\"except_domain\"", "]", ")", "for", "k", "in", "slot_values", "]", ")", ":", "\n", "                    ", "continue", "\n", "\n", "\n", "", "if", "args", "[", "\"model_name\"", "]", "==", "\"t5\"", ":", "\n", "# Our t5-large-samsum model is trained T0 style which has the following source prefix", "\n", "                    ", "input_text", "=", "f\"Summarize this dialogue: {dialog_history.lower()} {tokenizer.eos_token}\"", "\n", "", "else", ":", "\n", "                    ", "input_text", "=", "f\"{tokenizer.bos_token} {dialog_history.lower()} {tokenizer.eos_token}\"", "\n", "\n", "", "eval_slots_per_sample", "=", "set", "(", "s", "for", "s", "in", "eval_slots", "if", "s", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "in", "dial_dict", "[", "\"domains\"", "]", ")", "\n", "\n", "data_detail", "=", "{", "\n", "\"ID\"", ":", "dial_dict", "[", "\"dial_id\"", "]", ",", "\n", "\"domains\"", ":", "dial_dict", "[", "\"domains\"", "]", ",", "\n", "\"turn_id\"", ":", "turn_id", ",", "\n", "\"dialog_history\"", ":", "dialog_history", ",", "\n", "\"intput_text\"", ":", "input_text", ",", "\n", "\"slot_values\"", ":", "slot_values", ",", "\n", "\"eval_slots\"", ":", "eval_slots_per_sample", ",", "\n", "}", "\n", "if", "dataset", "in", "{", "\"dev\"", ",", "\"test\"", "}", ":", "\n", "                    ", "output_text", "=", "converter", ".", "state_to_sum", "(", "slot_values", ")", "\n", "data_detail", "[", "\"output_text\"", "]", "=", "output_text", "\n", "", "data", ".", "append", "(", "data_detail", ")", "\n", "\n", "", "", "", "print", "(", "\"domain_counter\"", ",", "domain_counter", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.datasets.data_loader.get_slot_information": [[129, 139], ["dict", "k.replace().lower", "k.lower", "dict.keys", "ontology.items", "k.replace", "k.split"], "function", ["None"], ["", "def", "get_slot_information", "(", "ontology", ":", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", ")", "->", "List", ":", "\n", "    ", "ontology_domains", "=", "dict", "(", "\n", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "ontology", ".", "items", "(", ")", "if", "k", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "in", "EXPERIMENT_DOMAINS", "]", "\n", ")", "\n", "SLOTS", "=", "[", "\n", "k", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ".", "lower", "(", ")", "if", "(", "\"book\"", "not", "in", "k", ")", "else", "k", ".", "lower", "(", ")", "\n", "for", "k", "in", "ontology_domains", ".", "keys", "(", ")", "\n", "]", "\n", "\n", "return", "SLOTS", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.datasets.data_loader.collate_fn": [[141, 173], ["tokenizer", "tokenizer", "converter.state_to_sum"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.DomainFreeConverter.state_to_sum"], ["", "def", "collate_fn", "(", "tokenizer", ",", "converter", ")", ":", "\n", "    ", "def", "_collate", "(", "batch", ")", ":", "\n", "        ", "batch_data", "=", "{", "}", "\n", "for", "key", "in", "batch", "[", "0", "]", ":", "\n", "            ", "batch_data", "[", "key", "]", "=", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", "\n", "\n", "", "input_batch", "=", "tokenizer", "(", "\n", "batch_data", "[", "\"intput_text\"", "]", ",", "\n", "padding", "=", "True", ",", "\n", "return_tensors", "=", "\"pt\"", ",", "\n", "add_special_tokens", "=", "False", ",", "\n", "verbose", "=", "False", ",", "\n", "truncation", "=", "True", ",", "\n", "max_length", "=", "1000", ",", "\n", ")", "\n", "\n", "if", "\"output_text\"", "not", "in", "batch_data", ":", "\n", "            ", "batch_data", "[", "\"output_text\"", "]", "=", "[", "converter", ".", "state_to_sum", "(", "x", ")", "for", "x", "in", "batch_data", "[", "\"slot_values\"", "]", "]", "\n", "\n", "", "batch_data", "[", "\"encoder_input\"", "]", "=", "input_batch", "[", "\"input_ids\"", "]", "\n", "batch_data", "[", "\"attention_mask\"", "]", "=", "input_batch", "[", "\"attention_mask\"", "]", "\n", "batch_data", "[", "\"decoder_output\"", "]", "=", "tokenizer", "(", "\n", "batch_data", "[", "\"output_text\"", "]", ",", "\n", "padding", "=", "True", ",", "\n", "return_tensors", "=", "\"pt\"", ",", "# non-padded return List[List[Int]]", "\n", "return_attention_mask", "=", "False", ",", "\n", "truncation", "=", "True", ",", "\n", "max_length", "=", "200", ",", "\n", ")", ".", "input_ids", "\n", "\n", "return", "batch_data", "\n", "", "return", "_collate", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.datasets.data_loader.normalize_ontology": [[175, 187], ["range", "ontology.pop", "len", "[].replace", "[].replace", "k.replace().lower", "k.lower", "k.replace"], "function", ["None"], ["", "def", "normalize_ontology", "(", "ontology", ":", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", ")", "->", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "keys", "=", "[", "k", "for", "k", "in", "ontology", "]", "\n", "for", "k", "in", "keys", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "ontology", "[", "k", "]", ")", ")", ":", "\n", "            ", "ontology", "[", "k", "]", "[", "i", "]", "=", "ontology", "[", "k", "]", "[", "i", "]", ".", "replace", "(", "\"do n't care\"", ",", "\"dontcare\"", ")", "\n", "ontology", "[", "k", "]", "[", "i", "]", "=", "ontology", "[", "k", "]", "[", "i", "]", ".", "replace", "(", "\"'s\"", ",", "\" s\"", ")", "\n", "\n", "", "ontology", "[", "\n", "k", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ".", "lower", "(", ")", "if", "(", "\"book\"", "not", "in", "k", ")", "else", "k", ".", "lower", "(", ")", "\n", "]", "=", "ontology", ".", "pop", "(", "k", ")", "\n", "\n", "", "return", "ontology", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.datasets.data_loader.prepare_data": [[189, 257], ["data_loader.get_slot_information", "json.load", "print", "data_loader.normalize_ontology", "data_loader.normalize_ontology", "open", "data_loader.DSTDataset", "len", "int", "ds2.utils.few_shot.get_final_states", "collections.defaultdict", "collections.defaultdict", "print", "print", "print", "torch.utils.data.DataLoader", "json.load", "json.load", "data_loader.read_data", "paths.items", "set", "ds2.utils.few_shot.get_filtered_fewshot_samples", "ds2.utils.few_shot.get_balanced_fewshot_samples", "random.sample", "len", "datasets.items", "open", "open", "ds2.utils.few_shot.get_filtered_fewshot_samples.keys", "data_loader.collate_fn", "tuple", "sum", "len", "sorted", "ds2.utils.state_sum_converter.get_converter", "x[].values"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.datasets.data_loader.get_slot_information", "home.repos.pwc.inspect_result.jshin49_ds2.datasets.data_loader.normalize_ontology", "home.repos.pwc.inspect_result.jshin49_ds2.datasets.data_loader.normalize_ontology", "home.repos.pwc.inspect_result.jshin49_ds2.utils.few_shot.get_final_states", "home.repos.pwc.inspect_result.jshin49_ds2.datasets.data_loader.read_data", "home.repos.pwc.inspect_result.jshin49_ds2.utils.few_shot.get_filtered_fewshot_samples", "home.repos.pwc.inspect_result.jshin49_ds2.utils.few_shot.get_balanced_fewshot_samples", "home.repos.pwc.inspect_result.jshin49_ds2.datasets.data_loader.collate_fn", "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_converter"], ["", "def", "prepare_data", "(", "args", ",", "tokenizer", ")", ":", "\n", "    ", "if", "args", "[", "\"version\"", "]", "==", "\"2.0\"", ":", "\n", "        ", "paths", "=", "{", "\n", "k", ":", "f\"ds2/data_mwoz_2.0/{k}_dials.json\"", "\n", "for", "k", "in", "(", "\"train\"", ",", "\"dev\"", ",", "\"test\"", ")", "\n", "}", "\n", "ontology", "=", "normalize_ontology", "(", "json", ".", "load", "(", "open", "(", "\"ds2/data_mwoz_2.0/mwz/ontology.json\"", ",", "\"r\"", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "paths", "=", "{", "\n", "k", ":", "f\"ds2/data_mwoz_2.1/{k}_dials.json\"", "\n", "for", "k", "in", "(", "\"train\"", ",", "\"dev\"", ",", "\"test\"", ")", "\n", "}", "\n", "ontology", "=", "normalize_ontology", "(", "json", ".", "load", "(", "open", "(", "\"ds2/data_mwoz_2.1/mwz/ontology.json\"", ",", "\"r\"", ")", ")", ")", "\n", "\n", "", "ALL_SLOTS", "=", "get_slot_information", "(", "ontology", ")", "\n", "description", "=", "json", ".", "load", "(", "open", "(", "\"ds2/utils/slot_description.json\"", ",", "\"r\"", ")", ")", "\n", "\n", "datasets", "=", "{", "\n", "k", ":", "DSTDataset", "(", "read_data", "(", "args", ",", "path", ",", "ALL_SLOTS", ",", "tokenizer", ",", "description", ",", "k", ")", ",", "args", ")", "\n", "for", "k", ",", "path", "in", "paths", ".", "items", "(", ")", "\n", "}", "\n", "\n", "if", "0.0", "<", "args", "[", "\"fewshot\"", "]", "<", "1.0", ":", "\n", "        ", "num_train_diags", "=", "len", "(", "set", "(", "x", "[", "\"ID\"", "]", "for", "x", "in", "datasets", "[", "\"train\"", "]", ")", ")", "\n", "num_few_diags", "=", "int", "(", "num_train_diags", "*", "args", "[", "\"fewshot\"", "]", ")", "\n", "\n", "final_states", "=", "get_final_states", "(", "datasets", "[", "\"train\"", "]", ")", "\n", "\n", "if", "args", "[", "\"filtered_sampling\"", "]", ":", "\n", "            ", "final_states", "=", "get_filtered_fewshot_samples", "(", "final_states", ")", "\n", "\n", "", "if", "args", "[", "\"balanced_sampling\"", "]", ":", "\n", "            ", "sampled_ids", "=", "get_balanced_fewshot_samples", "(", "final_states", ",", "num_few_diags", ",", "ALL_SLOTS", ")", "\n", "", "else", ":", "\n", "            ", "sampled_ids", "=", "random", ".", "sample", "(", "final_states", ".", "keys", "(", ")", ",", "num_few_diags", ")", "\n", "\n", "", "datasets", "[", "\"train\"", "]", ".", "data", "=", "[", "x", "for", "x", "in", "datasets", "[", "\"train\"", "]", ".", "data", "if", "x", "[", "\"ID\"", "]", "in", "sampled_ids", "]", "\n", "\n", "domain_counter", "=", "defaultdict", "(", "int", ")", "\n", "multi_domain_counter", "=", "defaultdict", "(", "int", ")", "\n", "for", "d", "in", "datasets", "[", "\"train\"", "]", ".", "data", ":", "\n", "            ", "domains", "=", "d", "[", "\"domains\"", "]", "\n", "multi_domain_counter", "[", "tuple", "(", "sorted", "(", "d", "[", "\"domains\"", "]", ")", ")", "]", "+=", "1", "\n", "for", "domain", "in", "domains", ":", "\n", "                ", "if", "domain", "in", "EXPERIMENT_DOMAINS", ":", "\n", "                    ", "domain_counter", "[", "domain", "]", "+=", "1", "\n", "", "", "", "print", "(", "\"num_train_diags\"", ",", "num_train_diags", ",", "len", "(", "sampled_ids", ")", ")", "\n", "print", "(", "\"domain_counter\"", ",", "domain_counter", ")", "\n", "print", "(", "\"multi_domain_counter\"", ",", "multi_domain_counter", ")", "\n", "\n", "", "print", "(", "f'dontcare occurence: {sum([\"dontcare\" in x[\"slot_values\"].values() for x in datasets[\"train\"].data]) / len(datasets[\"train\"].data)}'", ")", "\n", "\n", "if", "args", "[", "\"debug_code\"", "]", ":", "\n", "        ", "datasets", "[", "\"train\"", "]", "=", "datasets", "[", "\"train\"", "]", "[", ":", "50", "]", "\n", "datasets", "[", "\"dev\"", "]", "=", "datasets", "[", "\"dev\"", "]", "[", ":", "50", "]", "\n", "datasets", "[", "\"test\"", "]", "=", "datasets", "[", "\"test\"", "]", "[", ":", "50", "]", "\n", "\n", "", "dataloaders", "=", "{", "\n", "k", ":", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "args", "[", "f\"{k}_batch_size\"", "]", ",", "\n", "shuffle", "=", "(", "k", "==", "\"train\"", ")", ",", "\n", "collate_fn", "=", "collate_fn", "(", "tokenizer", "=", "tokenizer", ",", "converter", "=", "get_converter", "(", "args", "[", "\"state_converter\"", "]", ")", ")", ",", "\n", ")", "for", "k", ",", "dataset", "in", "datasets", ".", "items", "(", ")", "\n", "}", "\n", "\n", "domain_data", "=", "{", "}", "\n", "return", "dataloaders", ",", "domain_data", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.test_bart_and_t5.test_bart_and_t5": [[7, 74], ["transformers.AutoModelForSeq2SeqLM.from_pretrained", "transformers.AutoTokenizer.from_pretrained", "transformers.AutoModelForSeq2SeqLM.from_pretrained", "transformers.AutoTokenizer.from_pretrained", "print", "print", "print", "print", "print", "print", "print", "print", "print", "AutoModelForSeq2SeqLM.from_pretrained.", "AutoModelForSeq2SeqLM.from_pretrained.", "print", "t5_labels.masked_fill_", "bart_labels.masked_fill_", "AutoModelForSeq2SeqLM.from_pretrained.", "AutoModelForSeq2SeqLM.from_pretrained.", "print", "AutoTokenizer.from_pretrained.decode", "AutoModelForSeq2SeqLM.from_pretrained.prepare_decoder_input_ids_from_labels", "AutoTokenizer.from_pretrained.decode", "AutoModelForSeq2SeqLM.from_pretrained.prepare_decoder_input_ids_from_labels", "AutoTokenizer.from_pretrained.", "AutoTokenizer.from_pretrained.", "AutoTokenizer.from_pretrained.", "AutoTokenizer.from_pretrained.", "AutoTokenizer.from_pretrained.", "AutoTokenizer.from_pretrained.", "AutoTokenizer.from_pretrained.", "AutoTokenizer.from_pretrained.", "AutoTokenizer.from_pretrained.", "AutoTokenizer.from_pretrained.", "AutoTokenizer.from_pretrained.", "AutoTokenizer.from_pretrained."], "function", ["None"], ["def", "test_bart_and_t5", "(", ")", ":", "\n", "    ", "t5_model", "=", "AutoModelForSeq2SeqLM", ".", "from_pretrained", "(", "\"t5-large\"", ")", "\n", "t5_tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "\"t5-large\"", ")", "\n", "\n", "bart_model", "=", "AutoModelForSeq2SeqLM", ".", "from_pretrained", "(", "\"facebook/bart-large-xsum\"", ")", "\n", "bart_tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "\"facebook/bart-large-xsum\"", ")", "\n", "\n", "# for t5, decoder start token == pad token", "\n", "print", "(", "t5_model", ".", "config", ".", "decoder_start_token_id", ",", "t5_tokenizer", ".", "eos_token_id", ",", "t5_tokenizer", ".", "pad_token_id", ")", "\n", "# for bart, decoder start token == eos token", "\n", "print", "(", "bart_model", ".", "config", ".", "decoder_start_token_id", ",", "bart_tokenizer", ".", "bos_token_id", ",", "bart_tokenizer", ".", "eos_token_id", ",", "bart_tokenizer", ".", "pad_token_id", ")", "\n", "\n", "conv_text", "=", "\" \"", ".", "join", "(", "[", "\n", "\"system: none\"", ",", "\n", "\"user: can i get a train to cambridge on friday ?\"", ",", "\n", "\"system: there is a depature at london kings cross at 7:17 am .\"", ",", "\n", "\"user: actually , i need to depart from leicester after 12:15 .\"", ",", "\n", "\"system: yes , there is a train that departs at 13:09 , arriving in cambridge at 14:54 . would that work for you ?\"", ",", "\n", "\"user: yes . could you give me the train id ?\"", ",", "\n", "]", ")", ".", "lower", "(", ")", "\n", "\n", "conv_summ", "=", "\"The user is looking for a train that leaves at 12:15 from cambridge to leicester on friday.\"", ".", "lower", "(", ")", "\n", "print", "(", "\"summ\"", ",", "conv_summ", ")", "\n", "print", "(", "\"t5 labels\"", ",", "t5_tokenizer", "(", "conv_summ", ",", "return_attention_mask", "=", "False", ")", ".", "input_ids", ")", "\n", "print", "(", "\"t5 decode labels\"", ",", "t5_tokenizer", ".", "decode", "(", "t5_tokenizer", "(", "conv_summ", ")", ".", "input_ids", ")", ")", "\n", "print", "(", "\"t5 inputs\"", ",", "t5_model", ".", "prepare_decoder_input_ids_from_labels", "(", "t5_tokenizer", "(", "conv_summ", ",", "return_tensors", "=", "\"pt\"", ")", ".", "input_ids", ")", ")", "\n", "# print(\"t5 decode inputs\", t5_tokenizer.decode(t5_model.prepare_decoder_input_ids_from_labels(t5_tokenizer(conv_summ, return_tensors=\"pt\").input_ids)).tolist()[0])", "\n", "print", "(", "\"bart labels\"", ",", "bart_tokenizer", "(", "conv_summ", ")", ".", "input_ids", ")", "\n", "print", "(", "\"bart decode labels\"", ",", "bart_tokenizer", ".", "decode", "(", "bart_tokenizer", "(", "conv_summ", ")", ".", "input_ids", ")", ")", "\n", "print", "(", "\"bart inputs\"", ",", "bart_model", ".", "prepare_decoder_input_ids_from_labels", "(", "bart_tokenizer", "(", "conv_summ", ",", "return_tensors", "=", "\"pt\"", ")", ".", "input_ids", ")", ")", "\n", "# print(\"bart decode inputs\", bart_tokenizer.decode(bart_model.prepare_decoder_input_ids_from_labels(bart_tokenizer(conv_summ, return_tensors=\"pt\").input_ids)).tolist()[0])", "\n", "\n", "t5_encoder_input_ids", "=", "t5_tokenizer", "(", "f\"summarize: {conv_text}\"", ",", "return_tensors", "=", "\"pt\"", ")", ".", "input_ids", "\n", "t5_encoder_attention_mask", "=", "t5_tokenizer", "(", "f\"summarize: {conv_text}\"", ",", "return_tensors", "=", "\"pt\"", ")", ".", "attention_mask", "\n", "t5_labels", "=", "t5_tokenizer", "(", "conv_summ", ",", "return_tensors", "=", "\"pt\"", ")", ".", "input_ids", "\n", "\n", "bart_encoder_input_ids", "=", "bart_tokenizer", "(", "conv_text", ",", "return_tensors", "=", "\"pt\"", ")", ".", "input_ids", "\n", "bart_encoder_attention_mask", "=", "bart_tokenizer", "(", "conv_text", ",", "return_tensors", "=", "\"pt\"", ")", ".", "attention_mask", "\n", "bart_labels", "=", "bart_tokenizer", "(", "conv_summ", ",", "return_tensors", "=", "\"pt\"", ")", ".", "input_ids", "\n", "\n", "t5_outputs", "=", "t5_model", "(", "\n", "input_ids", "=", "t5_encoder_input_ids", ",", "\n", "attention_mask", "=", "t5_encoder_attention_mask", ",", "\n", "labels", "=", "t5_labels", ",", "\n", ")", "\n", "bart_outputs", "=", "bart_model", "(", "\n", "input_ids", "=", "bart_encoder_input_ids", ",", "\n", "attention_mask", "=", "bart_encoder_attention_mask", ",", "\n", "labels", "=", "bart_labels", ",", "\n", ")", "\n", "\n", "print", "(", "t5_outputs", ".", "loss", ",", "bart_outputs", ".", "loss", ")", "\n", "\n", "t5_labels", ".", "masked_fill_", "(", "t5_labels", "==", "-", "100", ",", "t5_tokenizer", ".", "pad_token_id", ")", "\n", "bart_labels", ".", "masked_fill_", "(", "bart_labels", "==", "-", "100", ",", "bart_tokenizer", ".", "pad_token_id", ")", "\n", "t5_outputs", "=", "t5_model", "(", "\n", "input_ids", "=", "t5_encoder_input_ids", ",", "\n", "attention_mask", "=", "t5_encoder_attention_mask", ",", "\n", "labels", "=", "t5_labels", ",", "\n", ")", "\n", "bart_outputs", "=", "bart_model", "(", "\n", "input_ids", "=", "bart_encoder_input_ids", ",", "\n", "attention_mask", "=", "bart_encoder_attention_mask", ",", "\n", "labels", "=", "bart_labels", ",", "\n", ")", "\n", "\n", "print", "(", "t5_outputs", ".", "loss", ",", "bart_outputs", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.is_ascii": [[40, 42], ["all", "ord"], "function", ["None"], ["", "def", "is_ascii", "(", "s", ")", ":", "\n", "    ", "return", "all", "(", "ord", "(", "c", ")", "<", "128", "for", "c", "in", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.insertSpace": [[43, 60], ["text.find", "re.match", "re.match", "len", "len", "len", "len"], "function", ["None"], ["", "def", "insertSpace", "(", "token", ",", "text", ")", ":", "\n", "    ", "sidx", "=", "0", "\n", "while", "True", ":", "\n", "        ", "sidx", "=", "text", ".", "find", "(", "token", ",", "sidx", ")", "\n", "if", "sidx", "==", "-", "1", ":", "\n", "            ", "break", "\n", "", "if", "sidx", "+", "1", "<", "len", "(", "text", ")", "and", "re", ".", "match", "(", "'[0-9]'", ",", "text", "[", "sidx", "-", "1", "]", ")", "and", "re", ".", "match", "(", "'[0-9]'", ",", "text", "[", "sidx", "+", "1", "]", ")", ":", "\n", "            ", "sidx", "+=", "1", "\n", "continue", "\n", "", "if", "text", "[", "sidx", "-", "1", "]", "!=", "' '", ":", "\n", "            ", "text", "=", "text", "[", ":", "sidx", "]", "+", "' '", "+", "text", "[", "sidx", ":", "]", "\n", "sidx", "+=", "1", "\n", "", "if", "sidx", "+", "len", "(", "token", ")", "<", "len", "(", "text", ")", "and", "text", "[", "sidx", "+", "len", "(", "token", ")", "]", "!=", "' '", ":", "\n", "            ", "text", "=", "text", "[", ":", "sidx", "+", "1", "]", "+", "' '", "+", "text", "[", "sidx", "+", "1", ":", "]", "\n", "", "sidx", "+=", "1", "\n", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.normalize": [[61, 145], ["text.replace.lower", "re.sub", "re.sub", "re.sub", "re.sub", "text.replace.replace", "re.sub", "text.replace.replace", "text.replace.replace", "re.sub", "create_data_mwoz.insertSpace", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "text.replace.split", "re.findall", "re.findall", "re.sub", "re.sub", "create_data_mwoz.insertSpace", "len", "text.replace.replace", "re.match", "re.match", "text.replace.find", "text.replace.replace", "text.replace.find", "text.replace.find", "len", "len", "re.sub"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.insertSpace", "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.insertSpace"], ["", "def", "normalize", "(", "text", ",", "clean_value", "=", "True", ")", ":", "\n", "# lower case every word", "\n", "    ", "text", "=", "text", ".", "lower", "(", ")", "\n", "\n", "# replace white spaces in front and end", "\n", "text", "=", "re", ".", "sub", "(", "r'^\\s*|\\s*$'", ",", "''", ",", "text", ")", "\n", "\n", "# hotel domain pfb30", "\n", "text", "=", "re", ".", "sub", "(", "r\"b&b\"", ",", "\"bed and breakfast\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r\"b and b\"", ",", "\"bed and breakfast\"", ",", "text", ")", "\n", "\n", "if", "clean_value", ":", "\n", "# normalize phone number", "\n", "        ", "ms", "=", "re", ".", "findall", "(", "'\\(?(\\d{3})\\)?[-.\\s]?(\\d{3})[-.\\s]?(\\d{4,5})'", ",", "text", ")", "\n", "if", "ms", ":", "\n", "            ", "sidx", "=", "0", "\n", "for", "m", "in", "ms", ":", "\n", "                ", "sidx", "=", "text", ".", "find", "(", "m", "[", "0", "]", ",", "sidx", ")", "\n", "if", "text", "[", "sidx", "-", "1", "]", "==", "'('", ":", "\n", "                    ", "sidx", "-=", "1", "\n", "", "eidx", "=", "text", ".", "find", "(", "m", "[", "-", "1", "]", ",", "sidx", ")", "+", "len", "(", "m", "[", "-", "1", "]", ")", "\n", "text", "=", "text", ".", "replace", "(", "text", "[", "sidx", ":", "eidx", "]", ",", "''", ".", "join", "(", "m", ")", ")", "\n", "\n", "# normalize postcode", "\n", "", "", "ms", "=", "re", ".", "findall", "(", "'([a-z]{1}[\\. ]?[a-z]{1}[\\. ]?\\d{1,2}[, ]+\\d{1}[\\. ]?[a-z]{1}[\\. ]?[a-z]{1}|[a-z]{2}\\d{2}[a-z]{2})'", ",", "\n", "text", ")", "\n", "if", "ms", ":", "\n", "            ", "sidx", "=", "0", "\n", "for", "m", "in", "ms", ":", "\n", "                ", "sidx", "=", "text", ".", "find", "(", "m", ",", "sidx", ")", "\n", "eidx", "=", "sidx", "+", "len", "(", "m", ")", "\n", "text", "=", "text", "[", ":", "sidx", "]", "+", "re", ".", "sub", "(", "'[,\\. ]'", ",", "''", ",", "m", ")", "+", "text", "[", "eidx", ":", "]", "\n", "\n", "# weird unicode bug", "\n", "", "", "", "text", "=", "re", ".", "sub", "(", "u\"(\\u2018|\\u2019)\"", ",", "\"'\"", ",", "text", ")", "\n", "\n", "if", "clean_value", ":", "\n", "# replace time and and price", "\n", "        ", "text", "=", "re", ".", "sub", "(", "timepat", ",", "' [value_time] '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "pricepat", ",", "' [value_price] '", ",", "text", ")", "\n", "#text = re.sub(pricepat2, '[value_price]', text)", "\n", "\n", "# replace st.", "\n", "", "text", "=", "text", ".", "replace", "(", "';'", ",", "','", ")", "\n", "text", "=", "re", ".", "sub", "(", "'$\\/'", ",", "''", ",", "text", ")", "\n", "text", "=", "text", ".", "replace", "(", "'/'", ",", "' and '", ")", "\n", "\n", "# replace other special characters", "\n", "text", "=", "text", ".", "replace", "(", "'-'", ",", "' '", ")", "\n", "text", "=", "re", ".", "sub", "(", "'[\\\"\\<>@\\(\\)]'", ",", "''", ",", "text", ")", "# remove", "\n", "\n", "# insert white space before and after tokens:", "\n", "for", "token", "in", "[", "'?'", ",", "'.'", ",", "','", ",", "'!'", "]", ":", "\n", "        ", "text", "=", "insertSpace", "(", "token", ",", "text", ")", "\n", "\n", "# insert white space for 's", "\n", "", "text", "=", "insertSpace", "(", "'\\'s'", ",", "text", ")", "\n", "\n", "# replace it's, does't, you'd ... etc", "\n", "text", "=", "re", ".", "sub", "(", "'^\\''", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'\\'$'", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'\\'\\s'", ",", "' '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'\\s\\''", ",", "' '", ",", "text", ")", "\n", "for", "fromx", ",", "tox", "in", "replacements", ":", "\n", "        ", "text", "=", "' '", "+", "text", "+", "' '", "\n", "text", "=", "text", ".", "replace", "(", "fromx", ",", "tox", ")", "[", "1", ":", "-", "1", "]", "\n", "\n", "# remove multiple spaces", "\n", "", "text", "=", "re", ".", "sub", "(", "' +'", ",", "' '", ",", "text", ")", "\n", "\n", "# concatenate numbers", "\n", "tmp", "=", "text", "\n", "tokens", "=", "text", ".", "split", "(", ")", "\n", "i", "=", "1", "\n", "while", "i", "<", "len", "(", "tokens", ")", ":", "\n", "        ", "if", "re", ".", "match", "(", "u'^\\d+$'", ",", "tokens", "[", "i", "]", ")", "and", "re", ".", "match", "(", "u'\\d+$'", ",", "tokens", "[", "i", "-", "1", "]", ")", ":", "\n", "            ", "tokens", "[", "i", "-", "1", "]", "+=", "tokens", "[", "i", "]", "\n", "del", "tokens", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "i", "+=", "1", "\n", "", "", "text", "=", "' '", ".", "join", "(", "tokens", ")", "\n", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.fixDelex": [[146, 172], ["isinstance", "turn.items", "str", "filename.strip", "[].replace", "[].replace", "[].replace", "[].replace", "[].replace", "[].replace"], "function", ["None"], ["", "def", "fixDelex", "(", "filename", ",", "data", ",", "data2", ",", "idx", ",", "idx_acts", ")", ":", "\n", "    ", "\"\"\"Given system dialogue acts fix automatic delexicalization.\"\"\"", "\n", "try", ":", "\n", "        ", "turn", "=", "data2", "[", "filename", ".", "strip", "(", "'.json'", ")", "]", "[", "str", "(", "idx_acts", ")", "]", "\n", "", "except", ":", "\n", "        ", "return", "data", "\n", "\n", "", "if", "not", "isinstance", "(", "turn", ",", "str", ")", ":", "# and not isinstance(turn, unicode):", "\n", "        ", "for", "k", ",", "act", "in", "turn", ".", "items", "(", ")", ":", "\n", "            ", "if", "'Attraction'", "in", "k", ":", "\n", "                ", "if", "'restaurant_'", "in", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ":", "\n", "                    ", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", "=", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ".", "replace", "(", "\"restaurant\"", ",", "\"attraction\"", ")", "\n", "", "if", "'hotel_'", "in", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ":", "\n", "                    ", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", "=", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ".", "replace", "(", "\"hotel\"", ",", "\"attraction\"", ")", "\n", "", "", "if", "'Hotel'", "in", "k", ":", "\n", "                ", "if", "'attraction_'", "in", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ":", "\n", "                    ", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", "=", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ".", "replace", "(", "\"attraction\"", ",", "\"hotel\"", ")", "\n", "", "if", "'restaurant_'", "in", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ":", "\n", "                    ", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", "=", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ".", "replace", "(", "\"restaurant\"", ",", "\"hotel\"", ")", "\n", "", "", "if", "'Restaurant'", "in", "k", ":", "\n", "                ", "if", "'attraction_'", "in", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ":", "\n", "                    ", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", "=", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ".", "replace", "(", "\"attraction\"", ",", "\"restaurant\"", ")", "\n", "", "if", "'hotel_'", "in", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ":", "\n", "                    ", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", "=", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ".", "replace", "(", "\"hotel\"", ",", "\"restaurant\"", ")", "\n", "\n", "", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.getDialogueAct": [[174, 196], ["isinstance", "turn.keys", "str", "[].lower", "filename.strip", "acts.append", "[].lower", "a[].lower", "acts.append", "k.split", "k.split", "a[].lower", "create_data_mwoz.normalize", "a[].lower"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.normalize"], ["", "def", "getDialogueAct", "(", "filename", ",", "data", ",", "data2", ",", "idx", ",", "idx_acts", ")", ":", "\n", "    ", "\"\"\"Given system dialogue acts fix automatic delexicalization.\"\"\"", "\n", "acts", "=", "[", "]", "\n", "try", ":", "\n", "        ", "turn", "=", "data2", "[", "filename", ".", "strip", "(", "'.json'", ")", "]", "[", "str", "(", "idx_acts", ")", "]", "\n", "", "except", ":", "\n", "        ", "return", "acts", "\n", "\n", "", "if", "not", "isinstance", "(", "turn", ",", "str", ")", ":", "# and not isinstance(turn, unicode):", "\n", "        ", "for", "k", "in", "turn", ".", "keys", "(", ")", ":", "\n", "# temp = [k.split('-')[0].lower(), k.split('-')[1].lower()]", "\n", "# for a in turn[k]:", "\n", "#     acts.append(temp + [a[0].lower()])", "\n", "\n", "            ", "if", "k", ".", "split", "(", "'-'", ")", "[", "1", "]", ".", "lower", "(", ")", "==", "'request'", ":", "\n", "                ", "for", "a", "in", "turn", "[", "k", "]", ":", "\n", "                    ", "acts", ".", "append", "(", "a", "[", "0", "]", ".", "lower", "(", ")", ")", "\n", "", "", "elif", "k", ".", "split", "(", "'-'", ")", "[", "1", "]", ".", "lower", "(", ")", "==", "'inform'", ":", "\n", "                ", "for", "a", "in", "turn", "[", "k", "]", ":", "\n", "                    ", "acts", ".", "append", "(", "[", "a", "[", "0", "]", ".", "lower", "(", ")", ",", "normalize", "(", "a", "[", "1", "]", ".", "lower", "(", ")", ",", "False", ")", "]", ")", "\n", "\n", "", "", "", "", "return", "acts", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.get_summary_bstate": [[198, 255], ["sorted", "len", "[].keys", "active_domain.append", "[].keys", "booking.append", "[].keys", "booking.append", "len", "booking.append", "booking.append", "booking.append", "summary_bvalue.append", "booking.append", "summary_bvalue.append", "summary_bvalue.append", "create_data_mwoz.normalize", "slot.strip().lower", "[].strip().lower", "slot.strip().lower", "create_data_mwoz.normalize", "slot.strip().lower", "[].strip().lower", "slot.strip", "[].strip", "slot.strip", "slot.strip", "[].strip"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.normalize", "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.normalize"], ["", "def", "get_summary_bstate", "(", "bstate", ",", "get_domain", "=", "False", ")", ":", "\n", "    ", "\"\"\"Based on the mturk annotations we form multi-domain belief state\"\"\"", "\n", "domains", "=", "[", "u'taxi'", ",", "u'restaurant'", ",", "u'hospital'", ",", "u'hotel'", ",", "u'attraction'", ",", "u'train'", ",", "u'police'", "]", "\n", "summary_bstate", "=", "[", "]", "\n", "summary_bvalue", "=", "[", "]", "\n", "active_domain", "=", "[", "]", "\n", "for", "domain", "in", "domains", ":", "\n", "        ", "domain_active", "=", "False", "\n", "\n", "booking", "=", "[", "]", "\n", "#print(domain,len(bstate[domain]['book'].keys()))", "\n", "for", "slot", "in", "sorted", "(", "bstate", "[", "domain", "]", "[", "'book'", "]", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "slot", "==", "'booked'", ":", "\n", "                ", "if", "len", "(", "bstate", "[", "domain", "]", "[", "'book'", "]", "[", "'booked'", "]", ")", "!=", "0", ":", "\n", "                    ", "booking", ".", "append", "(", "1", ")", "\n", "# summary_bvalue.append(\"book {} {}:{}\".format(domain, slot, \"Yes\"))", "\n", "", "else", ":", "\n", "                    ", "booking", ".", "append", "(", "0", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "bstate", "[", "domain", "]", "[", "'book'", "]", "[", "slot", "]", "!=", "\"\"", ":", "\n", "                    ", "booking", ".", "append", "(", "1", ")", "\n", "summary_bvalue", ".", "append", "(", "[", "\"{}-book {}\"", ".", "format", "(", "domain", ",", "slot", ".", "strip", "(", ")", ".", "lower", "(", ")", ")", ",", "normalize", "(", "bstate", "[", "domain", "]", "[", "'book'", "]", "[", "slot", "]", ".", "strip", "(", ")", ".", "lower", "(", ")", ",", "False", ")", "]", ")", "#([\"book\", domain, slot, bstate[domain]['book'][slot]])", "\n", "", "else", ":", "\n", "                    ", "booking", ".", "append", "(", "0", ")", "\n", "", "", "", "if", "domain", "==", "'train'", ":", "\n", "            ", "if", "'people'", "not", "in", "bstate", "[", "domain", "]", "[", "'book'", "]", ".", "keys", "(", ")", ":", "\n", "                ", "booking", ".", "append", "(", "0", ")", "\n", "", "if", "'ticket'", "not", "in", "bstate", "[", "domain", "]", "[", "'book'", "]", ".", "keys", "(", ")", ":", "\n", "                ", "booking", ".", "append", "(", "0", ")", "\n", "", "", "summary_bstate", "+=", "booking", "\n", "\n", "for", "slot", "in", "bstate", "[", "domain", "]", "[", "'semi'", "]", ":", "\n", "            ", "slot_enc", "=", "[", "0", ",", "0", ",", "0", "]", "# not mentioned, dontcare, filled", "\n", "if", "bstate", "[", "domain", "]", "[", "'semi'", "]", "[", "slot", "]", "==", "'not mentioned'", ":", "\n", "                ", "slot_enc", "[", "0", "]", "=", "1", "\n", "", "elif", "bstate", "[", "domain", "]", "[", "'semi'", "]", "[", "slot", "]", "in", "[", "'dont care'", ",", "'dontcare'", ",", "\"don't care\"", ",", "\"do not care\"", "]", ":", "\n", "                ", "slot_enc", "[", "1", "]", "=", "1", "\n", "summary_bvalue", ".", "append", "(", "[", "\"{}-{}\"", ".", "format", "(", "domain", ",", "slot", ".", "strip", "(", ")", ".", "lower", "(", ")", ")", ",", "\"dontcare\"", "]", ")", "#([\"semi\", domain, slot, \"dontcare\"])", "\n", "", "elif", "bstate", "[", "domain", "]", "[", "'semi'", "]", "[", "slot", "]", ":", "\n", "                ", "summary_bvalue", ".", "append", "(", "[", "\"{}-{}\"", ".", "format", "(", "domain", ",", "slot", ".", "strip", "(", ")", ".", "lower", "(", ")", ")", ",", "normalize", "(", "bstate", "[", "domain", "]", "[", "'semi'", "]", "[", "slot", "]", ".", "strip", "(", ")", ".", "lower", "(", ")", ",", "False", ")", "]", ")", "#([\"semi\", domain, slot, bstate[domain]['semi'][slot]])", "\n", "", "if", "slot_enc", "!=", "[", "0", ",", "0", ",", "0", "]", ":", "\n", "                ", "domain_active", "=", "True", "\n", "", "summary_bstate", "+=", "slot_enc", "\n", "\n", "# quasi domain-tracker", "\n", "", "if", "domain_active", ":", "\n", "            ", "summary_bstate", "+=", "[", "1", "]", "\n", "active_domain", ".", "append", "(", "domain", ")", "\n", "", "else", ":", "\n", "            ", "summary_bstate", "+=", "[", "0", "]", "\n", "\n", "#print(len(summary_bstate))", "\n", "", "", "assert", "len", "(", "summary_bstate", ")", "==", "94", "\n", "if", "get_domain", ":", "\n", "        ", "return", "active_domain", "\n", "", "else", ":", "\n", "        ", "return", "summary_bstate", ",", "summary_bvalue", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.analyze_dialogue": [[257, 293], ["range", "print", "len", "len", "len", "usr_turns.append", "create_data_mwoz.get_summary_bstate", "str", "sys_turns.append", "[].split", "create_data_mwoz.is_ascii", "create_data_mwoz.is_ascii"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.get_summary_bstate", "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.is_ascii", "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.is_ascii"], ["", "", "def", "analyze_dialogue", "(", "dialogue", ",", "maxlen", ")", ":", "\n", "    ", "\"\"\"Cleaning procedure for all kinds of errors in text and annotation.\"\"\"", "\n", "d", "=", "dialogue", "\n", "# do all the necessary postprocessing", "\n", "if", "len", "(", "d", "[", "'log'", "]", ")", "%", "2", "!=", "0", ":", "\n", "#print path", "\n", "        ", "print", "(", "'odd # of turns'", ")", "\n", "return", "None", "# odd number of turns, wrong dialogue", "\n", "", "d_pp", "=", "{", "}", "\n", "d_pp", "[", "'goal'", "]", "=", "d", "[", "'goal'", "]", "# for now we just copy the goal", "\n", "usr_turns", "=", "[", "]", "\n", "sys_turns", "=", "[", "]", "\n", "# last_bvs = []", "\n", "for", "i", "in", "range", "(", "len", "(", "d", "[", "'log'", "]", ")", ")", ":", "\n", "        ", "if", "len", "(", "d", "[", "'log'", "]", "[", "i", "]", "[", "'text'", "]", ".", "split", "(", ")", ")", ">", "maxlen", ":", "\n", "# print('too long')", "\n", "            ", "return", "None", "# too long sentence, wrong dialogue", "\n", "", "if", "i", "%", "2", "==", "0", ":", "# usr turn", "\n", "            ", "text", "=", "d", "[", "'log'", "]", "[", "i", "]", "[", "'text'", "]", "\n", "if", "not", "is_ascii", "(", "text", ")", ":", "\n", "# print('not ascii')", "\n", "                ", "return", "None", "\n", "", "usr_turns", ".", "append", "(", "d", "[", "'log'", "]", "[", "i", "]", ")", "\n", "", "else", ":", "# sys turn", "\n", "            ", "text", "=", "d", "[", "'log'", "]", "[", "i", "]", "[", "'text'", "]", "\n", "if", "not", "is_ascii", "(", "text", ")", ":", "\n", "# print('not ascii')", "\n", "                ", "return", "None", "\n", "", "belief_summary", ",", "belief_value_summary", "=", "get_summary_bstate", "(", "d", "[", "'log'", "]", "[", "i", "]", "[", "'metadata'", "]", ")", "\n", "d", "[", "'log'", "]", "[", "i", "]", "[", "'belief_summary'", "]", "=", "str", "(", "belief_summary", ")", "\n", "d", "[", "'log'", "]", "[", "i", "]", "[", "'belief_value_summary'", "]", "=", "belief_value_summary", "\n", "sys_turns", ".", "append", "(", "d", "[", "'log'", "]", "[", "i", "]", ")", "\n", "", "", "d_pp", "[", "'usr_log'", "]", "=", "usr_turns", "\n", "d_pp", "[", "'sys_log'", "]", "=", "sys_turns", "\n", "\n", "return", "d_pp", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.get_dial": [[295, 309], ["create_data_mwoz.analyze_dialogue", "zip", "dial.append"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.analyze_dialogue"], ["", "def", "get_dial", "(", "dialogue", ")", ":", "\n", "    ", "\"\"\"Extract a dialogue from the file\"\"\"", "\n", "dial", "=", "[", "]", "\n", "d_orig", "=", "analyze_dialogue", "(", "dialogue", ",", "MAX_LENGTH", ")", "# max turn len is 50 words", "\n", "if", "d_orig", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "usr", "=", "[", "t", "[", "'text'", "]", "for", "t", "in", "d_orig", "[", "'usr_log'", "]", "]", "\n", "sys", "=", "[", "t", "[", "'text'", "]", "for", "t", "in", "d_orig", "[", "'sys_log'", "]", "]", "\n", "sys_a", "=", "[", "t", "[", "'dialogue_acts'", "]", "for", "t", "in", "d_orig", "[", "'sys_log'", "]", "]", "\n", "bvs", "=", "[", "t", "[", "'belief_value_summary'", "]", "for", "t", "in", "d_orig", "[", "'sys_log'", "]", "]", "\n", "domain", "=", "[", "t", "[", "'domain'", "]", "for", "t", "in", "d_orig", "[", "'usr_log'", "]", "]", "\n", "for", "item", "in", "zip", "(", "usr", ",", "sys", ",", "sys_a", ",", "domain", ",", "bvs", ")", ":", "\n", "        ", "dial", ".", "append", "(", "{", "'usr'", ":", "item", "[", "0", "]", ",", "'sys'", ":", "item", "[", "1", "]", ",", "'sys_a'", ":", "item", "[", "2", "]", ",", "'domain'", ":", "item", "[", "3", "]", ",", "'bvs'", ":", "item", "[", "4", "]", "}", ")", "\n", "", "return", "dial", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.loadData": [[311, 339], ["os.path.join", "os.path.exists", "os.makedirs", "print", "urllib.request.urlopen", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "os.path.exists", "os.path.exists", "io.BytesIO", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "print", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "os.path.join", "urllib.request.urlopen.read", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "loadData", "(", "args", ")", ":", "\n", "    ", "data_url", "=", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "\"data.json\"", ")", "\n", "if", "args", ".", "mwz_ver", "==", "'2.1'", ":", "\n", "        ", "dataset_url", "=", "\"https://www.repository.cam.ac.uk/bitstream/handle/1810/294507/MULTIWOZ2.1.zip?sequence=1&isAllowed=y\"", "\n", "", "else", ":", "\n", "        ", "dataset_url", "=", "\"https://www.repository.cam.ac.uk/bitstream/handle/1810/280608/MULTIWOZ2.zip?sequence=3&isAllowed=y\"", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "main_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "main_dir", ")", "\n", "\n", "", "dir_name", "=", "'MULTIWOZ2.1'", "if", "args", ".", "mwz_ver", "==", "'2.1'", "else", "'MULTIWOZ2 2'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_url", ")", "and", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "dir_name", ")", ")", ":", "\n", "        ", "print", "(", "\"Downloading and unzipping the MultiWOZ %s dataset\"", "%", "args", ".", "mwz_ver", ")", "\n", "resp", "=", "urllib", ".", "request", ".", "urlopen", "(", "dataset_url", ")", "\n", "zip_ref", "=", "ZipFile", "(", "BytesIO", "(", "resp", ".", "read", "(", ")", ")", ")", "\n", "zip_ref", ".", "extractall", "(", "args", ".", "main_dir", ")", "\n", "zip_ref", ".", "close", "(", ")", "\n", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "dir_name", ",", "'data.json'", ")", ",", "args", ".", "main_dir", ")", "\n", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "dir_name", ",", "'ontology.json'", ")", ",", "args", ".", "main_dir", ")", "\n", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "dir_name", ",", "'valListFile.json'", ")", ",", "args", ".", "main_dir", ")", "\n", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "dir_name", ",", "'testListFile.json'", ")", ",", "args", ".", "main_dir", ")", "\n", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "dir_name", ",", "'dialogue_acts.json'", ")", ",", "args", ".", "main_dir", ")", "\n", "", "elif", "not", "os", ".", "path", ".", "exists", "(", "data_url", ")", "and", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "dir_name", ")", ")", ":", "\n", "        ", "print", "(", "\"Copying from MultiWOZ %s dataset\"", "%", "args", ".", "mwz_ver", ")", "\n", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "dir_name", ",", "'data.json'", ")", ",", "args", ".", "main_dir", ")", "\n", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "dir_name", ",", "'ontology.json'", ")", ",", "args", ".", "main_dir", ")", "\n", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "dir_name", ",", "'valListFile.json'", ")", ",", "args", ".", "main_dir", ")", "\n", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "dir_name", ",", "'testListFile.json'", ")", ",", "args", ".", "main_dir", ")", "\n", "shutil", ".", "copy", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "dir_name", ",", "'dialogue_acts.json'", ")", ",", "args", ".", "main_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.getDomain": [[340, 353], ["create_data_mwoz.get_summary_bstate", "create_data_mwoz.get_ds_diff", "len", "list", "len", "get_ds_diff.keys", "get_ds_diff.keys"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.get_summary_bstate", "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.get_ds_diff"], ["", "", "def", "getDomain", "(", "idx", ",", "log", ",", "domains", ",", "last_domain", ")", ":", "\n", "    ", "if", "idx", "==", "1", ":", "\n", "        ", "active_domains", "=", "get_summary_bstate", "(", "log", "[", "idx", "]", "[", "\"metadata\"", "]", ",", "True", ")", "\n", "crnt_doms", "=", "active_domains", "[", "0", "]", "if", "len", "(", "active_domains", ")", "!=", "0", "else", "domains", "[", "0", "]", "\n", "return", "crnt_doms", "\n", "", "else", ":", "\n", "        ", "ds_diff", "=", "get_ds_diff", "(", "log", "[", "idx", "-", "2", "]", "[", "\"metadata\"", "]", ",", "log", "[", "idx", "]", "[", "\"metadata\"", "]", ")", "\n", "if", "len", "(", "ds_diff", ".", "keys", "(", ")", ")", "==", "0", ":", "# no clues from dialog states", "\n", "            ", "crnt_doms", "=", "last_domain", "\n", "", "else", ":", "\n", "            ", "crnt_doms", "=", "list", "(", "ds_diff", ".", "keys", "(", ")", ")", "\n", "# print(crnt_doms)", "\n", "", "return", "crnt_doms", "[", "0", "]", "# How about multiple domains in one sentence senario ?", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.get_ds_diff": [[355, 366], ["zip", "prev_d.items", "crnt_d.items"], "function", ["None"], ["", "", "def", "get_ds_diff", "(", "prev_d", ",", "crnt_d", ")", ":", "\n", "    ", "diff", "=", "{", "}", "\n", "# Sometimes, metadata is an empty dictionary, bug?", "\n", "if", "not", "prev_d", "or", "not", "crnt_d", ":", "\n", "        ", "return", "diff", "\n", "\n", "", "for", "(", "(", "k1", ",", "v1", ")", ",", "(", "k2", ",", "v2", ")", ")", "in", "zip", "(", "prev_d", ".", "items", "(", ")", ",", "crnt_d", ".", "items", "(", ")", ")", ":", "\n", "        ", "assert", "k1", "==", "k2", "\n", "if", "v1", "!=", "v2", ":", "# updated", "\n", "            ", "diff", "[", "k2", "]", "=", "v2", "\n", "", "", "return", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.createData": [[368, 420], ["create_data_mwoz.loadData", "open", "json.load", "open", "json.load", "enumerate", "os.path.join", "os.path.join", "dialogue[].items", "enumerate", "create_data_mwoz.normalize", "create_data_mwoz.fixDelex", "domains.append", "create_data_mwoz.getDomain", "create_data_mwoz.getDialogueAct"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.loadData", "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.normalize", "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.fixDelex", "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.getDomain", "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.getDialogueAct"], ["", "def", "createData", "(", "args", ")", ":", "\n", "# download the data", "\n", "    ", "loadData", "(", "args", ")", "\n", "\n", "# create dictionary of delexicalied values that then we will search against, order matters here!", "\n", "# dic = delexicalize.prepareSlotValuesIndependent()", "\n", "delex_data", "=", "{", "}", "\n", "\n", "fin1", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "'data.json'", ")", ",", "'r'", ")", "\n", "data", "=", "json", ".", "load", "(", "fin1", ")", "\n", "\n", "fin2", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "'dialogue_acts.json'", ")", ",", "'r'", ")", "\n", "data2", "=", "json", ".", "load", "(", "fin2", ")", "\n", "\n", "for", "didx", ",", "dialogue_name", "in", "enumerate", "(", "data", ")", ":", "\n", "\n", "        ", "dialogue", "=", "data", "[", "dialogue_name", "]", "\n", "\n", "domains", "=", "[", "]", "\n", "for", "dom_k", ",", "dom_v", "in", "dialogue", "[", "'goal'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "dom_v", "and", "dom_k", "not", "in", "IGNORE_KEYS_IN_GOAL", ":", "# check whether contains some goal entities", "\n", "                ", "domains", ".", "append", "(", "dom_k", ")", "\n", "\n", "", "", "idx_acts", "=", "1", "\n", "last_domain", ",", "last_slot_fill", "=", "\"\"", ",", "[", "]", "\n", "for", "idx", ",", "turn", "in", "enumerate", "(", "dialogue", "[", "'log'", "]", ")", ":", "\n", "# normalization, split and delexicalization of the sentence", "\n", "            ", "origin_text", "=", "normalize", "(", "turn", "[", "'text'", "]", ",", "False", ")", "\n", "# origin_text = delexicalize.markEntity(origin_text, dic)", "\n", "dialogue", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", "=", "origin_text", "\n", "\n", "if", "idx", "%", "2", "==", "1", ":", "# if it's a system turn", "\n", "\n", "                ", "cur_domain", "=", "getDomain", "(", "idx", ",", "dialogue", "[", "'log'", "]", ",", "domains", ",", "last_domain", ")", "\n", "last_domain", "=", "[", "cur_domain", "]", "\n", "\n", "dialogue", "[", "'log'", "]", "[", "idx", "-", "1", "]", "[", "'domain'", "]", "=", "cur_domain", "\n", "dialogue", "[", "'log'", "]", "[", "idx", "]", "[", "'dialogue_acts'", "]", "=", "getDialogueAct", "(", "dialogue_name", ",", "dialogue", ",", "data2", ",", "idx", ",", "idx_acts", ")", "\n", "idx_acts", "+=", "1", "\n", "\n", "# FIXING delexicalization:", "\n", "", "dialogue", "=", "fixDelex", "(", "dialogue_name", ",", "dialogue", ",", "data2", ",", "idx", ",", "idx_acts", ")", "\n", "\n", "", "delex_data", "[", "dialogue_name", "]", "=", "dialogue", "\n", "\n", "# if didx > 10:", "\n", "#     break", "\n", "\n", "# with open('data/multi-woz/woz2like_data.json', 'w') as outfile:", "\n", "#     json.dump(delex_data, outfile)", "\n", "\n", "", "return", "delex_data", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.buildDelexDict": [[422, 433], ["difflib.SequenceMatcher", "difflib.SequenceMatcher.get_matching_blocks", "enumerate", "delex_sent.split", "origin_sent.split", "len", "origin_sent.split"], "function", ["None"], ["", "def", "buildDelexDict", "(", "origin_sent", ",", "delex_sent", ")", ":", "\n", "    ", "dictionary", "=", "{", "}", "\n", "s", "=", "difflib", ".", "SequenceMatcher", "(", "None", ",", "delex_sent", ".", "split", "(", ")", ",", "origin_sent", ".", "split", "(", ")", ")", "\n", "bs", "=", "s", ".", "get_matching_blocks", "(", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "bs", ")", ":", "\n", "        ", "if", "i", "<", "len", "(", "bs", ")", "-", "2", ":", "\n", "            ", "a_start", "=", "b", ".", "a", "+", "b", ".", "size", "\n", "b_start", "=", "b", ".", "b", "+", "b", ".", "size", "\n", "b_end", "=", "bs", "[", "i", "+", "1", "]", ".", "b", "\n", "dictionary", "[", "a_start", "]", "=", "\" \"", ".", "join", "(", "origin_sent", ".", "split", "(", ")", "[", "b_start", ":", "b_end", "]", ")", "\n", "", "", "return", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.divideData": [[435, 525], ["os.makedirs", "shutil.copyfile", "open", "open.close", "open", "open.close", "open", "collections.OrderedDict", "collections.OrderedDict", "print", "os.path.join", "os.path.join", "os.path.join", "testListFile.append", "os.path.join", "valListFile.append", "os.path.join", "dial_item[].items", "create_data_mwoz.get_dial", "open", "json.dump", "open", "json.dump", "open", "json.dump", "open", "json.dump", "enumerate", "domains.append", "list", "dial_example[].append", "[].items", "test_dials.append", "set", "val_dials.append", "open.write", "train_dials.append", "ontology[].append"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.get_dial"], ["", "def", "divideData", "(", "data", ",", "args", ")", ":", "\n", "    ", "\"\"\"Given test and validation sets, divide\n    the data for three different sets\"\"\"", "\n", "os", ".", "makedirs", "(", "args", ".", "target_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "copyfile", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "'ontology.json'", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "target_path", ",", "'ontology.json'", ")", ")", "\n", "\n", "testListFile", "=", "[", "]", "\n", "fin", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "'testListFile.json'", ")", ",", "'r'", ")", "\n", "for", "line", "in", "fin", ":", "\n", "        ", "testListFile", ".", "append", "(", "line", "[", ":", "-", "1", "]", ")", "\n", "", "fin", ".", "close", "(", ")", "\n", "\n", "valListFile", "=", "[", "]", "\n", "fin", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "main_dir", ",", "'valListFile.json'", ")", ",", "'r'", ")", "\n", "for", "line", "in", "fin", ":", "\n", "        ", "valListFile", ".", "append", "(", "line", "[", ":", "-", "1", "]", ")", "\n", "", "fin", ".", "close", "(", ")", "\n", "\n", "trainListFile", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "target_path", ",", "'trainListFile'", ")", ",", "'w'", ")", "\n", "\n", "test_dials", "=", "[", "]", "\n", "val_dials", "=", "[", "]", "\n", "train_dials", "=", "[", "]", "\n", "\n", "# dictionaries", "\n", "word_freqs_usr", "=", "OrderedDict", "(", ")", "\n", "word_freqs_sys", "=", "OrderedDict", "(", ")", "\n", "\n", "count_train", ",", "count_val", ",", "count_test", "=", "0", ",", "0", ",", "0", "\n", "\n", "ontology", "=", "{", "}", "\n", "\n", "for", "dialogue_name", "in", "data", ":", "\n", "# print dialogue_name", "\n", "        ", "dial_item", "=", "data", "[", "dialogue_name", "]", "\n", "domains", "=", "[", "]", "\n", "for", "dom_k", ",", "dom_v", "in", "dial_item", "[", "'goal'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "dom_v", "and", "dom_k", "not", "in", "IGNORE_KEYS_IN_GOAL", ":", "# check whether contains some goal entities", "\n", "                ", "domains", ".", "append", "(", "dom_k", ")", "\n", "\n", "", "", "turn_exmaple", "=", "{", "\"system\"", ":", "\"none\"", ",", "\"user\"", ":", "\"none\"", ",", "\"state\"", ":", "{", "\"active_intent\"", ":", "\"none\"", ",", "\"slot_values\"", ":", "{", "}", "}", "}", "\n", "dial", "=", "get_dial", "(", "data", "[", "dialogue_name", "]", ")", "\n", "if", "dial", ":", "\n", "            ", "dial_example", "=", "{", "\"dial_id\"", ":", "dialogue_name", ",", "\"domains\"", ":", "list", "(", "set", "(", "domains", ")", ")", ",", "\"turns\"", ":", "[", "]", "}", "\n", "# dialogue = {}", "\n", "# dialogue['dialogue_idx'] = dialogue_name", "\n", "# dialogue['domains'] = list(set(domains)) #list(set([d['domain'] for d in dial]))", "\n", "# last_bs = []", "\n", "# dialogue['dialogue'] = []", "\n", "\n", "for", "turn_i", ",", "turn", "in", "enumerate", "(", "dial", ")", ":", "\n", "# usr, usr_o, sys, sys_o, sys_a, domain", "\n", "                ", "turn_exmaple", "=", "{", "\"system\"", ":", "\"none\"", ",", "\"user\"", ":", "\"none\"", ",", "\"state\"", ":", "{", "\"active_intent\"", ":", "\"none\"", ",", "\"slot_values\"", ":", "{", "}", "}", "}", "\n", "turn_exmaple", "[", "'system'", "]", "=", "dial", "[", "turn_i", "-", "1", "]", "[", "'sys'", "]", "if", "turn_i", ">", "0", "else", "\"none\"", "\n", "turn_exmaple", "[", "'state'", "]", "[", "\"slot_values\"", "]", "=", "{", "s", "[", "0", "]", ":", "s", "[", "1", "]", "for", "s", "in", "turn", "[", "'bvs'", "]", "}", "\n", "turn_exmaple", "[", "'user'", "]", "=", "turn", "[", "'usr'", "]", "\n", "dial_example", "[", "'turns'", "]", ".", "append", "(", "turn_exmaple", ")", "\n", "\n", "for", "ss", ",", "vv", "in", "turn_exmaple", "[", "'state'", "]", "[", "\"slot_values\"", "]", ".", "items", "(", ")", ":", "\n", "                    ", "if", "ss", "not", "in", "ontology", ":", "\n", "                        ", "ontology", "[", "ss", "]", "=", "[", "]", "\n", "", "if", "vv", "not", "in", "ontology", "[", "ss", "]", ":", "\n", "                        ", "ontology", "[", "ss", "]", ".", "append", "(", "vv", ")", "\n", "\n", "", "", "", "if", "dialogue_name", "in", "testListFile", ":", "\n", "                ", "test_dials", ".", "append", "(", "dial_example", ")", "\n", "count_test", "+=", "1", "\n", "", "elif", "dialogue_name", "in", "valListFile", ":", "\n", "                ", "val_dials", ".", "append", "(", "dial_example", ")", "\n", "count_val", "+=", "1", "\n", "", "else", ":", "\n", "                ", "trainListFile", ".", "write", "(", "dialogue_name", "+", "'\\n'", ")", "\n", "train_dials", ".", "append", "(", "dial_example", ")", "\n", "count_train", "+=", "1", "\n", "\n", "", "", "", "print", "(", "\"# of dialogues: Train {}, Val {}, Test {}\"", ".", "format", "(", "count_train", ",", "count_val", ",", "count_test", ")", ")", "\n", "\n", "# save all dialogues", "\n", "with", "open", "(", "f'{args.main_dir}/dev_dials.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "val_dials", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "with", "open", "(", "f'{args.main_dir}/test_dials.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "test_dials", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "with", "open", "(", "f'{args.main_dir}/train_dials.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "train_dials", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "with", "open", "(", "f'{args.main_dir}/ontology.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "ontology", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.main": [[528, 533], ["print", "create_data_mwoz.createData", "print", "create_data_mwoz.divideData"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.createData", "home.repos.pwc.inspect_result.jshin49_ds2.scripts.create_data_mwoz.divideData"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "'Create WOZ-like dialogues. Get yourself a coffee, this might take a while.'", ")", "\n", "delex_data", "=", "createData", "(", "args", ")", "\n", "print", "(", "'Divide dialogues...'", ")", "\n", "divideData", "(", "delex_data", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.scripts.train_ds2.fine_tune": [[19, 121], ["vars", "pytorch_lightning.seed_everything", "print", "transformers.AutoTokenizer.from_pretrained", "transformers.AutoModelForSeq2SeqLM.from_pretrained", "ds2.datasets.data_loader.prepare_data", "print", "print", "os.path.join", "pytorch_lightning.Trainer", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.join", "print", "ds2.models.DS2.DS2.load_from_checkpoint", "ds2.models.DS2.DS2", "pytorch_lightning.callbacks.early_stopping.EarlyStopping", "pytorch_lightning.callbacks.ModelCheckpoint", "pytorch_lightning.Trainer.fit", "print", "ds2.models.DS2.DS2.load_from_checkpoint", "pytorch_lightning.Trainer.test", "len", "os.path.join", "os.path.join", "print", "os.path.join", "os.listdir", "pytorch_lightning.loggers.CSVLogger", "len", "os.path.join", "os.listdir"], "function", ["home.repos.pwc.inspect_result.jshin49_ds2.datasets.data_loader.prepare_data"], ["def", "fine_tune", "(", "args", ",", "*", "more", ")", ":", "\n", "    ", "args", "=", "vars", "(", "args", ")", "\n", "seed_everything", "(", "args", "[", "\"seed\"", "]", ")", "\n", "print", "(", "args", ")", "\n", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "args", "[", "\"model_checkpoint\"", "]", ")", "\n", "model", "=", "AutoModelForSeq2SeqLM", ".", "from_pretrained", "(", "args", "[", "\"model_checkpoint\"", "]", ")", "\n", "\n", "dataloaders", ",", "_", "=", "prepare_data", "(", "\n", "args", ",", "tokenizer", "\n", ")", "\n", "print", "(", "\"Created dataloaders\"", ")", "\n", "\n", "# logging", "\n", "exp_name", "=", "args", "[", "\"exp_name\"", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"ds2/logs\"", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "\"ds2/logs\"", ")", "\n", "", "log_path", "=", "f\"ds2/logs/{exp_name}\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "log_path", ")", "\n", "\n", "\n", "", "if", "args", "[", "\"load_pretrained\"", "]", ":", "\n", "        ", "pretrain_ckpt_path", "=", "os", ".", "path", ".", "join", "(", "args", "[", "\"load_pretrained\"", "]", ",", "\"pretrain\"", ")", "\n", "pretrain_ckpts", "=", "[", "\n", "_ckpt", "for", "_ckpt", "in", "os", ".", "listdir", "(", "pretrain_ckpt_path", ")", "\n", "if", "\".ckpt\"", "in", "_ckpt", "\n", "]", "\n", "assert", "len", "(", "pretrain_ckpts", ")", "==", "1", "\n", "ckpt", "=", "pretrain_ckpts", "[", "0", "]", "\n", "print", "(", "\"load pretrained model from: \"", ",", "os", ".", "path", ".", "join", "(", "pretrain_ckpt_path", ",", "ckpt", ")", ")", "\n", "dst_model", "=", "DS2", ".", "load_from_checkpoint", "(", "\n", "os", ".", "path", ".", "join", "(", "pretrain_ckpt_path", ",", "ckpt", ")", ",", "\n", "args", "=", "args", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "sum_model", "=", "model", ",", "\n", "qa_model", "=", "None", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "dst_model", "=", "DS2", "(", "args", ",", "tokenizer", ",", "model", ",", "None", ")", "\n", "\n", "", "print", "(", "\"Created Model\"", ")", "\n", "\n", "dir_path", "=", "os", ".", "path", ".", "join", "(", "log_path", ",", "args", "[", "\"mode\"", "]", ")", "\n", "if", "not", "args", "[", "\"do_test_only\"", "]", ":", "\n", "        ", "earlystopping_callback", "=", "EarlyStopping", "(", "\n", "monitor", "=", "\"val_loss\"", "if", "args", "[", "\"eval_loss_only\"", "]", "else", "\"val_jga\"", ",", "\n", "# min_delta=0.00,", "\n", "patience", "=", "args", "[", "\"patience\"", "]", ",", "\n", "verbose", "=", "False", ",", "\n", "mode", "=", "\"min\"", "if", "args", "[", "\"eval_loss_only\"", "]", "else", "\"max\"", ",", "\n", ")", "\n", "checkpoint_callback", "=", "ModelCheckpoint", "(", "\n", "dirpath", "=", "dir_path", ",", "\n", "filename", "=", "\"{val_loss:.3f}\"", "if", "args", "[", "\"eval_loss_only\"", "]", "else", "\"{val_jga:.3f}\"", ",", "\n", "save_top_k", "=", "1", ",", "\n", "monitor", "=", "\"val_loss\"", "if", "args", "[", "\"eval_loss_only\"", "]", "else", "\"val_jga\"", ",", "\n", "mode", "=", "\"min\"", "if", "args", "[", "\"eval_loss_only\"", "]", "else", "\"max\"", ",", "\n", ")", "\n", "callbacks", "=", "[", "earlystopping_callback", ",", "checkpoint_callback", "]", "\n", "", "else", ":", "\n", "        ", "callbacks", "=", "None", "\n", "\n", "# profiler = PyTorchProfiler(export_to_chrome=True)", "\n", "", "trainer", "=", "Trainer", "(", "\n", "accumulate_grad_batches", "=", "args", "[", "\"grad_acc_steps\"", "]", ",", "\n", "gradient_clip_val", "=", "args", "[", "\"max_norm\"", "]", ",", "\n", "max_epochs", "=", "args", "[", "\"n_epochs\"", "]", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "gpus", "=", "args", "[", "\"GPU\"", "]", ",", "\n", "deterministic", "=", "True", ",", "\n", "# accelerator=\"ddp\",", "\n", "val_check_interval", "=", "args", "[", "\"val_check_interval\"", "]", ",", "\n", "logger", "=", "CSVLogger", "(", "dir_path", ",", "f\"seed_{args['seed']}\"", ")", "if", "not", "args", "[", "\"do_test_only\"", "]", "else", "None", ",", "\n", "resume_from_checkpoint", "=", "args", "[", "\"resume_from_ckpt\"", "]", ",", "\n", "# limit_val_batches=0.05,", "\n", ")", "\n", "\n", "if", "not", "args", "[", "\"do_test_only\"", "]", ":", "\n", "        ", "trainer", ".", "fit", "(", "dst_model", ",", "dataloaders", "[", "\"train\"", "]", ",", "dataloaders", "[", "\"dev\"", "]", ")", "\n", "\n", "", "if", "not", "args", "[", "\"do_train_only\"", "]", ":", "\n", "        ", "print", "(", "\"test start...\"", ")", "\n", "# evaluate model", "\n", "args", "[", "\"num_beams\"", "]", "=", "args", "[", "\"test_num_beams\"", "]", "\n", "if", "args", "[", "\"do_test_only\"", "]", ":", "\n", "            ", "ckpts", "=", "[", "_ckpt", "for", "_ckpt", "in", "os", ".", "listdir", "(", "dir_path", ")", "if", "\".ckpt\"", "in", "_ckpt", "]", "\n", "assert", "len", "(", "ckpts", ")", "==", "1", "\n", "ckpt", "=", "ckpts", "[", "0", "]", "\n", "print", "(", "\"load pretrained model from: \"", ",", "os", ".", "path", ".", "join", "(", "dir_path", ",", "ckpt", ")", ")", "\n", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "ckpt", ")", "\n", "", "else", ":", "\n", "            ", "ckpt_path", "=", "checkpoint_callback", ".", "best_model_path", "\n", "\n", "", "dst_model", "=", "DS2", ".", "load_from_checkpoint", "(", "\n", "checkpoint_path", "=", "ckpt_path", ",", "\n", "args", "=", "args", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "sum_model", "=", "model", ",", "\n", "qa_model", "=", "None", "\n", ")", "\n", "trainer", ".", "test", "(", "dst_model", ",", "dataloaders", "[", "\"test\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.__init__": [[20, 42], ["pytorch_lightning.LightningModule.__init__", "ds2.utils.state_sum_converter.get_converter", "rouge.Rouge"], "methods", ["home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.__init__", "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.get_converter"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "tokenizer", ",", "sum_model", ",", "qa_model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "sum_model", "=", "sum_model", "\n", "if", "self", ".", "args", "[", "\"use_qa_deconverter\"", "]", ":", "\n", "            ", "self", ".", "qa_model", "=", "qa_model", "\n", "", "self", ".", "lr", "=", "args", "[", "\"lr\"", "]", "\n", "self", ".", "blank", "=", "\"____\"", "\n", "\n", "self", ".", "converter", "=", "get_converter", "(", "args", "[", "'state_converter'", "]", ")", "\n", "self", ".", "evaluator", "=", "rouge", ".", "Rouge", "(", "\n", "metrics", "=", "[", "'rouge-n'", "]", ",", "\n", "max_n", "=", "4", ",", "\n", "limit_length", "=", "True", ",", "\n", "length_limit", "=", "100", ",", "\n", "length_limit_type", "=", "'words'", ",", "\n", "apply_avg", "=", "False", ",", "\n", "apply_best", "=", "True", ",", "\n", "alpha", "=", "0.5", ",", "# Default F1_score", "\n", "weight_factor", "=", "1.2", ",", "\n", "stemming", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.training_step": [[44, 54], ["DS2.DS2.sum_model.train", "DS2.DS2.sum_model", "DS2.DS2.loss.detach"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "self", ".", "sum_model", ".", "train", "(", ")", "\n", "\n", "outputs", "=", "self", ".", "sum_model", "(", "\n", "input_ids", "=", "batch", "[", "\"encoder_input\"", "]", ",", "\n", "attention_mask", "=", "batch", "[", "\"attention_mask\"", "]", ",", "\n", "labels", "=", "batch", "[", "\"decoder_output\"", "]", ",", "\n", ")", "\n", "\n", "return", "{", "'loss'", ":", "outputs", ".", "loss", ",", "'log'", ":", "{", "'train_loss'", ":", "outputs", ".", "loss", ".", "detach", "(", ")", "}", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.eval_step": [[55, 65], ["DS2.DS2.sum_model.eval", "DS2.DS2.sum_model", "DS2.DS2.loss.item"], "methods", ["None"], ["", "def", "eval_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "self", ".", "sum_model", ".", "eval", "(", ")", "\n", "\n", "outputs", "=", "self", ".", "sum_model", "(", "\n", "input_ids", "=", "batch", "[", "\"encoder_input\"", "]", ",", "\n", "attention_mask", "=", "batch", "[", "\"attention_mask\"", "]", ",", "\n", "labels", "=", "batch", "[", "\"decoder_output\"", "]", ",", "\n", ")", "\n", "\n", "return", "outputs", ".", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.pred_step": [[66, 81], ["DS2.DS2.sum_model.eval", "DS2.DS2.sum_model.generate"], "methods", ["None"], ["", "def", "pred_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "self", ".", "sum_model", ".", "eval", "(", ")", "\n", "pred_summary_token", "=", "self", ".", "sum_model", ".", "generate", "(", "\n", "batch", "[", "\"encoder_input\"", "]", ",", "\n", "num_beams", "=", "self", ".", "args", "[", "\"num_beams\"", "]", ",", "\n", "min_length", "=", "5", ",", "\n", "max_length", "=", "100", ",", "\n", "early_stopping", "=", "True", ",", "\n", ")", "\n", "\n", "return", "{", "\n", "\"pred_summary_token\"", ":", "pred_summary_token", ",", "\n", "\"gold_state\"", ":", "batch", "[", "\"slot_values\"", "]", ",", "\n", "\"gold_summary\"", ":", "batch", "[", "\"output_text\"", "]", ",", "\n", "\"eval_slots\"", ":", "batch", "[", "\"eval_slots\"", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.eval_epoch_end": [[83, 88], ["numpy.mean", "print"], "methods", ["None"], ["", "def", "eval_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "res", "=", "{", "}", "\n", "res", "[", "\"loss\"", "]", "=", "np", ".", "mean", "(", "outputs", ")", "\n", "print", "(", "res", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.pred_epoch_end": [[89, 130], ["ds2.utils.evaluate.get_acc", "ds2.utils.evaluate.get_template_acc", "ds2.utils.evaluate.get_acc.update", "DS2.DS2.save_samples", "print", "list", "DS2.DS2.tokenizer.decode", "DS2.DS2.qa_model.sum_to_state", "DS2.DS2.converter.state_to_sum", "nltk.translate.bleu_score.sentence_bleu", "itertools.chain", "DS2.DS2.converter.sum_to_state", "DS2.DS2.evaluator.get_scores", "hyp.split", "zip", "numpy.mean", "ref.split", "str", "nltk.translate.bleu_score.SmoothingFunction"], "methods", ["home.repos.pwc.inspect_result.jshin49_ds2.utils.evaluate.get_acc", "home.repos.pwc.inspect_result.jshin49_ds2.utils.evaluate.get_template_acc", "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.save_samples", "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.DomainFreeConverter.sum_to_state", "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.DomainFreeConverter.state_to_sum", "home.repos.pwc.inspect_result.jshin49_ds2.utils.state_sum_converter.DomainFreeConverter.sum_to_state"], ["", "def", "pred_epoch_end", "(", "self", ",", "outputs", ",", "mode", "=", "\"val\"", ")", ":", "\n", "        ", "outputs", "=", "{", "k", ":", "list", "(", "itertools", ".", "chain", "(", "*", "[", "o", "[", "k", "]", "for", "o", "in", "outputs", "]", ")", ")", "for", "k", "in", "outputs", "[", "0", "]", "}", "\n", "\n", "pred_summary", "=", "[", "\n", "self", ".", "tokenizer", ".", "decode", "(", "_sum", ",", "skip_special_tokens", "=", "True", ",", "clean_up_tokenization_spaces", "=", "False", ")", "\n", "for", "_sum", "in", "outputs", "[", "\"pred_summary_token\"", "]", "\n", "]", "\n", "\n", "if", "self", ".", "args", "[", "\"use_qa_deconverter\"", "]", ":", "\n", "            ", "pred_state", "=", "self", ".", "qa_model", ".", "sum_to_state", "(", "pred_summary", ",", "outputs", "[", "\"eval_slots\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "pred_state", "=", "[", "self", ".", "converter", ".", "sum_to_state", "(", "_sum", ")", "for", "_sum", "in", "pred_summary", "]", "\n", "\n", "", "res", "=", "get_acc", "(", "pred_state", ",", "outputs", "[", "\"gold_state\"", "]", ",", "outputs", "[", "\"eval_slots\"", "]", ")", "\n", "\n", "gold_templates", "=", "[", "\n", "self", ".", "converter", ".", "state_to_sum", "(", "_ds", ",", "is_for_template", "=", "True", ",", "blank", "=", "self", ".", "blank", ")", "\n", "for", "_ds", "in", "outputs", "[", "\"gold_state\"", "]", "\n", "]", "\n", "template_acc", "=", "get_template_acc", "(", "pred_summary", ",", "gold_templates", ",", "self", ".", "blank", ")", "\n", "rouge_score", "=", "self", ".", "evaluator", ".", "get_scores", "(", "pred_summary", ",", "outputs", "[", "\"gold_summary\"", "]", ")", "[", "\"rouge-4\"", "]", "[", "\"f\"", "]", "\n", "bleu_score", "=", "[", "\n", "sentence_bleu", "(", "\n", "[", "ref", ".", "split", "(", ")", "]", ",", "\n", "hyp", ".", "split", "(", ")", ",", "\n", "smoothing_function", "=", "SmoothingFunction", "(", ")", ".", "method1", "\n", ")", "\n", "for", "ref", ",", "hyp", "in", "zip", "(", "outputs", "[", "\"gold_summary\"", "]", ",", "pred_summary", ")", "\n", "]", "\n", "res", ".", "update", "(", "{", "\n", "'rouge'", ":", "rouge_score", ",", "\n", "'bleu'", ":", "np", ".", "mean", "(", "bleu_score", ")", ",", "\n", "'template_acc'", ":", "template_acc", ",", "\n", "}", ")", "\n", "\n", "samples", "=", "{", "\"gold_summary\"", ":", "outputs", "[", "\"gold_summary\"", "]", ",", "\"gold_state\"", ":", "outputs", "[", "\"gold_state\"", "]", ",", "\"pred_summary\"", ":", "pred_summary", ",", "\"pred_state\"", ":", "pred_state", "}", "\n", "self", ".", "save_samples", "(", "samples", ",", "f'{str(res[\"jga\"])}_{mode}'", ")", "\n", "\n", "print", "(", "res", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.validation_step": [[131, 136], ["DS2.DS2.eval_step", "DS2.DS2.pred_step"], "methods", ["home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.eval_step", "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.pred_step"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "if", "self", ".", "args", "[", "\"eval_loss_only\"", "]", ":", "\n", "            ", "return", "self", ".", "eval_step", "(", "batch", ",", "batch_idx", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "pred_step", "(", "batch", ",", "batch_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.validation_epoch_end": [[137, 144], ["DS2.DS2.log_dict", "DS2.DS2.eval_epoch_end().items", "DS2.DS2.pred_epoch_end().items", "DS2.DS2.eval_epoch_end", "DS2.DS2.pred_epoch_end"], "methods", ["home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.eval_epoch_end", "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.pred_epoch_end"], ["", "", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "if", "self", ".", "args", "[", "\"eval_loss_only\"", "]", ":", "\n", "            ", "res", "=", "{", "f'val_{k}'", ":", "v", "for", "k", ",", "v", "in", "self", ".", "eval_epoch_end", "(", "outputs", ")", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "res", "=", "{", "f'val_{k}'", ":", "v", "for", "k", ",", "v", "in", "self", ".", "pred_epoch_end", "(", "outputs", ",", "\"val\"", ")", ".", "items", "(", ")", "}", "\n", "", "self", ".", "log_dict", "(", "res", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.test_step": [[145, 147], ["DS2.DS2.pred_step"], "methods", ["home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.pred_step"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "return", "self", ".", "pred_step", "(", "batch", ",", "batch_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.test_epoch_end": [[148, 152], ["DS2.DS2.log_dict", "DS2.DS2.pred_epoch_end().items", "DS2.DS2.pred_epoch_end"], "methods", ["home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.pred_epoch_end"], ["", "def", "test_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "res", "=", "{", "f'test_{k}'", ":", "v", "for", "k", ",", "v", "in", "self", ".", "pred_epoch_end", "(", "outputs", ",", "\"test\"", ")", ".", "items", "(", ")", "}", "\n", "self", ".", "log_dict", "(", "res", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.configure_optimizers": [[153, 155], ["transformers.AdamW", "DS2.DS2.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "return", "AdamW", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "correct_bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jshin49_ds2.models.DS2.DS2.save_samples": [[156, 163], ["str", "open", "json.dump", "round", "time.time", "samples.items", "str"], "methods", ["None"], ["", "def", "save_samples", "(", "self", ",", "samples", ",", "name", ")", ":", "\n", "        ", "if", "self", ".", "args", "[", "\"save_samples\"", "]", ">", "0", ":", "\n", "            ", "output_fields", "=", "[", "'only_domain'", ",", "'fewshot'", ",", "'grad_acc_steps'", ",", "'train_batch_size'", ",", "'state_converter'", "]", "\n", "output_name", "=", "'_'", ".", "join", "(", "[", "str", "(", "self", ".", "args", "[", "k", "]", ")", "for", "k", "in", "output_fields", "]", ")", "+", "'_'", "+", "name", "+", "'_'", "+", "str", "(", "round", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "filename", "=", "f'./samples_data/{output_name}.json'", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "{", "k", ":", "v", "[", ":", "self", ".", "args", "[", "'save_samples'", "]", "]", "for", "k", ",", "v", "in", "samples", ".", "items", "(", ")", "}", ",", "f", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.jshin49_ds2.configs.config.get_args": [[3, 45], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--exp_name\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"exp name for logging\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_checkpoint\"", ",", "type", "=", "str", ",", "default", "=", "\"t5-large\"", ",", "help", "=", "\"Path, url or short name of the model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--state_converter\"", ",", "type", "=", "str", ",", "default", "=", "\"mwz\"", ",", "choices", "=", "[", "\"mwz\"", ",", "\"wo_para\"", ",", "\"wo_concat\"", ",", "\"vanilla\"", ",", "\"open_domain\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Batch size for training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dev_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "\"Batch size for validation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "\"Batch size for test\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--grad_acc_steps\"", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "\"Accumulate gradients on several steps\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "5e-5", ",", "help", "=", "\"Learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_norm\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"Clipping gradient norm\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_epochs\"", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "\"Number of training epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_beams\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of beams for beam search during eval\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_num_beams\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"Number of beams for beam search during test\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "557", ",", "help", "=", "\"Random seed\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--GPU\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"how many gpu to use\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_name\"", ",", "type", "=", "str", ",", "default", "=", "\"t5\"", ",", "help", "=", "\"use t5 or bart?\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fewshot\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"data ratio for few shot experiment\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "type", "=", "str", ",", "default", "=", "\"finetune\"", ",", "choices", "=", "[", "'finetune'", ",", "'pretrain'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--fix_label\"", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--except_domain\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"hotel\"", ",", "\"train\"", ",", "\"restaurant\"", ",", "\"attraction\"", ",", "\"taxi\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--only_domain\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"hotel\"", ",", "\"train\"", ",", "\"restaurant\"", ",", "\"attraction\"", ",", "\"taxi\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--version\"", ",", "type", "=", "str", ",", "default", "=", "\"2.1\"", ",", "help", "=", "\"version of multiwoz\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore_or\"", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "\"ignore slot with value |. if False, consider only previous one.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_samples\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"save # false case samples.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--val_check_interval\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"ratio of train data that should be learned to check validation performance\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dialogue_filter\"", ",", "type", "=", "str", ",", "default", "=", "\"min\"", ",", "choices", "=", "[", "\"max\"", ",", "\"min\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_control\"", ",", "type", "=", "str", ",", "default", "=", "\"none\"", ",", "choices", "=", "[", "\"selective_rough\"", ",", "\"selective_exactly\"", ",", "\"previous\"", ",", "\"none\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--load_pretrained\"", ",", "type", "=", "str", ",", "help", "=", "\"Path to the pretrained CD model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--debug_code\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_loss_only\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_train_only\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_test_only\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--resume_from_ckpt\"", ",", "type", "=", "str", ",", ")", "\n", "parser", ".", "add_argument", "(", "\"--patience\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_qa_deconverter\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--qa_model_path\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--balanced_sampling\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--filtered_sampling\"", ",", "action", "=", "\"store_true\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# args.GPU = [int(gpu) for gpu in args.GPU]", "\n", "return", "args", "\n", "", ""]]}