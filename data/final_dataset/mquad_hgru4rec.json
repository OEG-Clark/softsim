{"home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.Sampler.__init__": [[33, 55], ["numpy.random.RandomState", "data[].value_counts", "hgru4rec.Sampler.pop.cumsum", "hgru4rec.Sampler.pop.sum", "logger.info", "logger.info", "hgru4rec.Sampler._generate_neg_samples", "logger.info"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.Sampler._generate_neg_samples"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "n_sample", ",", "rng", "=", "None", ",", "item_key", "=", "'item_id'", ",", "sample_alpha", "=", "0.75", ",", "sample_store", "=", "10000000", ")", ":", "\n", "        ", "self", ".", "sample_alpha", "=", "sample_alpha", "\n", "self", ".", "sample_store", "=", "sample_store", "\n", "self", ".", "n_sample", "=", "n_sample", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "1234", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rng", "=", "rng", "\n", "\n", "", "self", ".", "pop", "=", "data", "[", "item_key", "]", ".", "value_counts", "(", ")", "**", "sample_alpha", "\n", "self", ".", "pop", "=", "self", ".", "pop", ".", "cumsum", "(", ")", "/", "self", ".", "pop", ".", "sum", "(", ")", "\n", "if", "self", ".", "sample_store", ":", "\n", "            ", "self", ".", "generate_length", "=", "self", ".", "sample_store", "//", "self", ".", "n_sample", "\n", "if", "self", ".", "generate_length", "<=", "1", ":", "\n", "                ", "self", ".", "sample_store", "=", "0", "\n", "logger", ".", "info", "(", "'No example store was used'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "neg_samples", "=", "self", ".", "_generate_neg_samples", "(", "self", ".", "pop", ",", "self", ".", "generate_length", ")", "\n", "self", ".", "sample_pointer", "=", "0", "\n", "logger", ".", "info", "(", "'Created sample store with {} batches of samples'", ".", "format", "(", "self", ".", "generate_length", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'No example store was used'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.Sampler.next_sample": [[56, 66], ["hgru4rec.Sampler._generate_neg_samples", "hgru4rec.Sampler._generate_neg_samples"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.Sampler._generate_neg_samples", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.Sampler._generate_neg_samples"], ["", "", "def", "next_sample", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "sample_store", ":", "\n", "            ", "if", "self", ".", "sample_pointer", "==", "self", ".", "generate_length", ":", "\n", "                ", "self", ".", "neg_samples", "=", "self", ".", "_generate_neg_samples", "(", "self", ".", "pop", ",", "self", ".", "generate_length", ")", "\n", "self", ".", "sample_pointer", "=", "0", "\n", "", "sample", "=", "self", ".", "neg_samples", "[", "self", ".", "sample_pointer", "]", "\n", "self", ".", "sample_pointer", "+=", "1", "\n", "", "else", ":", "\n", "            ", "sample", "=", "self", ".", "_generate_neg_samples", "(", "self", ".", "pop", ",", "1", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.Sampler._generate_neg_samples": [[67, 76], ["numpy.searchsorted", "hgru4rec.Sampler.rng.choice", "sample.reshape.reshape.reshape", "hgru4rec.Sampler.rng.rand"], "methods", ["None"], ["", "def", "_generate_neg_samples", "(", "self", ",", "pop", ",", "length", ")", ":", "\n", "        ", "n_items", "=", "pop", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "sample_alpha", ":", "\n", "            ", "sample", "=", "np", ".", "searchsorted", "(", "pop", ",", "self", ".", "rng", ".", "rand", "(", "self", ".", "n_sample", "*", "length", ")", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "self", ".", "rng", ".", "choice", "(", "n_items", ",", "size", "=", "self", ".", "n_sample", "*", "length", ")", "\n", "", "if", "length", ">", "1", ":", "\n", "            ", "sample", "=", "sample", ".", "reshape", "(", "(", "length", ",", "self", ".", "n_sample", ")", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.__init__": [[166, 251], ["numpy.random.RandomState", "NotImplementedError", "NotImplementedError", "NotImplementedError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "session_layers", ",", "user_layers", ",", "n_epochs", "=", "10", ",", "batch_size", "=", "50", ",", "learning_rate", "=", "0.05", ",", "momentum", "=", "0.0", ",", "\n", "adapt", "=", "'adagrad'", ",", "decay", "=", "0.9", ",", "grad_cap", "=", "0", ",", "sigma", "=", "0", ",", "dropout_p_hidden_usr", "=", "0.0", ",", "\n", "dropout_p_hidden_ses", "=", "0.0", ",", "dropout_p_init", "=", "0.0", ",", "init_as_normal", "=", "False", ",", "\n", "reset_after_session", "=", "True", ",", "loss", "=", "'top1'", ",", "hidden_act", "=", "'tanh'", ",", "final_act", "=", "None", ",", "train_random_order", "=", "False", ",", "\n", "lmbd", "=", "0.0", ",", "session_key", "=", "'SessionId'", ",", "item_key", "=", "'ItemId'", ",", "time_key", "=", "'Time'", ",", "user_key", "=", "'UserId'", ",", "n_sample", "=", "0", ",", "\n", "sample_alpha", "=", "0.75", ",", "item_embedding", "=", "None", ",", "init_item_embeddings", "=", "None", ",", "user_propagation_mode", "=", "'init'", ",", "\n", "user_to_output", "=", "False", ",", "user_to_session_act", "=", "'tanh'", ",", "seed", "=", "42", ")", ":", "\n", "        ", "self", ".", "session_layers", "=", "session_layers", "\n", "self", ".", "user_layers", "=", "user_layers", "\n", "self", ".", "n_epochs", "=", "n_epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "dropout_p_hidden_usr", "=", "dropout_p_hidden_usr", "\n", "self", ".", "dropout_p_hidden_ses", "=", "dropout_p_hidden_ses", "\n", "self", ".", "dropout_p_init", "=", "dropout_p_init", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "init_as_normal", "=", "init_as_normal", "\n", "self", ".", "reset_after_session", "=", "reset_after_session", "\n", "self", ".", "session_key", "=", "session_key", "\n", "self", ".", "item_key", "=", "item_key", "\n", "self", ".", "time_key", "=", "time_key", "\n", "self", ".", "user_key", "=", "user_key", "\n", "self", ".", "grad_cap", "=", "grad_cap", "\n", "self", ".", "train_random_order", "=", "train_random_order", "\n", "self", ".", "lmbd", "=", "lmbd", "\n", "\n", "self", ".", "user_propagation_mode", "=", "user_propagation_mode", "\n", "self", ".", "user_to_output", "=", "user_to_output", "\n", "\n", "self", ".", "item_embedding", "=", "item_embedding", "\n", "self", ".", "init_item_embeddings", "=", "init_item_embeddings", "\n", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "seed", ")", "\n", "\n", "if", "adapt", "==", "'rmsprop'", ":", "\n", "            ", "self", ".", "adapt", "=", "'rmsprop'", "\n", "", "elif", "adapt", "==", "'adagrad'", ":", "\n", "            ", "self", ".", "adapt", "=", "'adagrad'", "\n", "", "elif", "adapt", "==", "'adadelta'", ":", "\n", "            ", "self", ".", "adapt", "=", "'adadelta'", "\n", "", "elif", "adapt", "==", "'adam'", ":", "\n", "            ", "self", ".", "adapt", "=", "'adam'", "\n", "", "else", ":", "\n", "            ", "self", ".", "adapt", "=", "False", "\n", "", "if", "loss", "==", "'cross-entropy'", ":", "\n", "            ", "if", "final_act", "==", "'tanh'", ":", "\n", "                ", "self", ".", "final_activation", "=", "self", ".", "softmaxth", "\n", "", "else", ":", "\n", "                ", "self", ".", "final_activation", "=", "self", ".", "softmax", "\n", "", "self", ".", "loss_function", "=", "self", ".", "cross_entropy", "\n", "", "elif", "loss", "==", "'bpr'", ":", "\n", "            ", "if", "final_act", "==", "'linear'", ":", "\n", "                ", "self", ".", "final_activation", "=", "self", ".", "linear", "\n", "", "elif", "final_act", "==", "'relu'", ":", "\n", "                ", "self", ".", "final_activation", "=", "self", ".", "relu", "\n", "", "else", ":", "\n", "                ", "self", ".", "final_activation", "=", "self", ".", "tanh", "\n", "", "self", ".", "loss_function", "=", "self", ".", "bpr", "\n", "", "elif", "loss", "==", "'top1'", ":", "\n", "            ", "if", "final_act", "==", "'linear'", ":", "\n", "                ", "self", ".", "final_activation", "=", "self", ".", "linear", "\n", "", "elif", "final_act", "==", "'relu'", ":", "\n", "                ", "self", ".", "final_activation", "=", "self", ".", "relu", "\n", "", "else", ":", "\n", "                ", "self", ".", "final_activation", "=", "self", ".", "tanh", "\n", "", "self", ".", "loss_function", "=", "self", ".", "top1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'loss {} not implemented'", ".", "format", "(", "loss", ")", ")", "\n", "", "if", "hidden_act", "==", "'relu'", ":", "\n", "            ", "self", ".", "hidden_activation", "=", "self", ".", "relu", "\n", "", "elif", "hidden_act", "==", "'tanh'", ":", "\n", "            ", "self", ".", "hidden_activation", "=", "self", ".", "tanh", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'hidden activation {} not implemented'", ".", "format", "(", "hidden_act", ")", ")", "\n", "", "if", "user_to_session_act", "==", "'relu'", ":", "\n", "            ", "self", ".", "s_init_act", "=", "self", ".", "relu", "\n", "", "elif", "user_to_session_act", "==", "'tanh'", ":", "\n", "            ", "self", ".", "s_init_act", "=", "self", ".", "tanh", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'user-to-session activation {} not implemented'", ".", "format", "(", "hidden_act", ")", ")", "\n", "\n", "", "self", ".", "n_sample", "=", "n_sample", "\n", "self", ".", "sample_alpha", "=", "sample_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.linear": [[253, 255], ["None"], "methods", ["None"], ["", "def", "linear", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.tanh": [[256, 258], ["theano.tensor.tanh"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.tanh"], ["", "def", "tanh", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "T", ".", "tanh", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.softmax": [[259, 262], ["theano.tensor.exp", "theano.tensor.exp.sum().dimshuffle", "X.max().dimshuffle", "theano.tensor.exp.sum", "X.max"], "methods", ["None"], ["", "def", "softmax", "(", "self", ",", "X", ")", ":", "\n", "        ", "e_x", "=", "T", ".", "exp", "(", "X", "-", "X", ".", "max", "(", "axis", "=", "1", ")", ".", "dimshuffle", "(", "0", ",", "'x'", ")", ")", "\n", "return", "e_x", "/", "e_x", ".", "sum", "(", "axis", "=", "1", ")", ".", "dimshuffle", "(", "0", ",", "'x'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.softmaxth": [[263, 267], ["hgru4rec.HGRU4Rec.tanh", "theano.tensor.exp", "theano.tensor.exp.sum().dimshuffle", "hgru4rec.HGRU4Rec.max().dimshuffle", "theano.tensor.exp.sum", "hgru4rec.HGRU4Rec.max"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.tanh"], ["", "def", "softmaxth", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "tanh", "(", "X", ")", "\n", "e_x", "=", "T", ".", "exp", "(", "X", "-", "X", ".", "max", "(", "axis", "=", "1", ")", ".", "dimshuffle", "(", "0", ",", "'x'", ")", ")", "\n", "return", "e_x", "/", "e_x", ".", "sum", "(", "axis", "=", "1", ")", ".", "dimshuffle", "(", "0", ",", "'x'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.relu": [[268, 270], ["theano.tensor.maximum"], "methods", ["None"], ["", "def", "relu", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "T", ".", "maximum", "(", "X", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.sigmoid": [[271, 273], ["theano.tensor.nnet.sigmoid"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.sigmoid"], ["", "def", "sigmoid", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "T", ".", "nnet", ".", "sigmoid", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.cross_entropy": [[275, 277], ["theano.tensor.cast", "theano.tensor.mean", "theano.tensor.log", "theano.tensor.diag"], "methods", ["None"], ["", "def", "cross_entropy", "(", "self", ",", "yhat", ")", ":", "\n", "        ", "return", "T", ".", "cast", "(", "T", ".", "mean", "(", "-", "T", ".", "log", "(", "T", ".", "diag", "(", "yhat", ")", "+", "1e-24", ")", ")", ",", "theano", ".", "config", ".", "floatX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.bpr": [[278, 280], ["theano.tensor.cast", "theano.tensor.mean", "theano.tensor.log", "theano.tensor.nnet.sigmoid", "theano.tensor.diag"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.sigmoid"], ["", "def", "bpr", "(", "self", ",", "yhat", ")", ":", "\n", "        ", "return", "T", ".", "cast", "(", "T", ".", "mean", "(", "-", "T", ".", "log", "(", "T", ".", "nnet", ".", "sigmoid", "(", "T", ".", "diag", "(", "yhat", ")", "-", "yhat", ".", "T", ")", ")", ")", ",", "theano", ".", "config", ".", "floatX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.top1": [[281, 286], ["theano.tensor.cast", "theano.tensor.mean", "theano.tensor.mean", "theano.tensor.nnet.sigmoid", "theano.tensor.nnet.sigmoid", "theano.tensor.nnet.sigmoid", "theano.tensor.diag", "theano.tensor.diag"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.sigmoid", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.sigmoid", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.sigmoid"], ["", "def", "top1", "(", "self", ",", "yhat", ")", ":", "\n", "        ", "yhatT", "=", "yhat", ".", "T", "\n", "return", "T", ".", "cast", "(", "T", ".", "mean", "(", "\n", "T", ".", "mean", "(", "T", ".", "nnet", ".", "sigmoid", "(", "-", "T", ".", "diag", "(", "yhat", ")", "+", "yhatT", ")", "+", "T", ".", "nnet", ".", "sigmoid", "(", "yhatT", "**", "2", ")", ",", "axis", "=", "0", ")", "-", "T", ".", "nnet", ".", "sigmoid", "(", "\n", "T", ".", "diag", "(", "yhat", ")", "**", "2", ")", "/", "self", ".", "batch_size", ")", ",", "theano", ".", "config", ".", "floatX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.floatX": [[288, 290], ["numpy.asarray"], "methods", ["None"], ["", "def", "floatX", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "X", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_weights": [[291, 297], ["numpy.sqrt", "theano.shared", "theano.shared", "hgru4rec.HGRU4Rec.floatX", "hgru4rec.HGRU4Rec.floatX", "hgru4rec.HGRU4Rec.rng.randn", "hgru4rec.HGRU4Rec.rng.rand"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.floatX", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.floatX"], ["", "def", "init_weights", "(", "self", ",", "shape", ")", ":", "\n", "        ", "sigma", "=", "self", ".", "sigma", "if", "self", ".", "sigma", "!=", "0", "else", "np", ".", "sqrt", "(", "6.0", "/", "(", "shape", "[", "0", "]", "+", "shape", "[", "1", "]", ")", ")", "\n", "if", "self", ".", "init_as_normal", ":", "\n", "            ", "return", "theano", ".", "shared", "(", "self", ".", "floatX", "(", "self", ".", "rng", ".", "randn", "(", "*", "shape", ")", "*", "sigma", ")", ",", "borrow", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "theano", ".", "shared", "(", "self", ".", "floatX", "(", "self", ".", "rng", ".", "rand", "(", "*", "shape", ")", "*", "sigma", "*", "2", "-", "sigma", ")", ",", "borrow", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_matrix": [[298, 304], ["numpy.sqrt", "hgru4rec.HGRU4Rec.floatX", "hgru4rec.HGRU4Rec.floatX", "hgru4rec.HGRU4Rec.rng.randn", "hgru4rec.HGRU4Rec.rng.rand"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.floatX", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.floatX"], ["", "", "def", "init_matrix", "(", "self", ",", "shape", ")", ":", "\n", "        ", "sigma", "=", "self", ".", "sigma", "if", "self", ".", "sigma", "!=", "0", "else", "np", ".", "sqrt", "(", "6.0", "/", "(", "shape", "[", "0", "]", "+", "shape", "[", "1", "]", ")", ")", "\n", "if", "self", ".", "init_as_normal", ":", "\n", "            ", "return", "self", ".", "floatX", "(", "self", ".", "rng", ".", "randn", "(", "*", "shape", ")", "*", "sigma", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "floatX", "(", "self", ".", "rng", ".", "rand", "(", "*", "shape", ")", "*", "sigma", "*", "2", "-", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.extend_weights": [[305, 313], ["W.get_value", "W.set_value", "numpy.sqrt", "hgru4rec.HGRU4Rec.floatX", "hgru4rec.HGRU4Rec.floatX", "numpy.vstack", "hgru4rec.HGRU4Rec.rng.randn", "hgru4rec.HGRU4Rec.rng.rand"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.floatX", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.floatX"], ["", "", "def", "extend_weights", "(", "self", ",", "W", ",", "n_new", ")", ":", "\n", "        ", "matrix", "=", "W", ".", "get_value", "(", ")", "\n", "sigma", "=", "self", ".", "sigma", "if", "self", ".", "sigma", "!=", "0", "else", "np", ".", "sqrt", "(", "6.0", "/", "(", "matrix", ".", "shape", "[", "0", "]", "+", "matrix", ".", "shape", "[", "1", "]", "+", "n_new", ")", ")", "\n", "if", "self", ".", "init_as_normal", ":", "\n", "            ", "new_rows", "=", "self", ".", "floatX", "(", "self", ".", "rng", ".", "randn", "(", "n_new", ",", "matrix", ".", "shape", "[", "1", "]", ")", "*", "sigma", ")", "\n", "", "else", ":", "\n", "            ", "new_rows", "=", "self", ".", "floatX", "(", "self", ".", "rng", ".", "rand", "(", "n_new", ",", "matrix", ".", "shape", "[", "1", "]", ")", "*", "sigma", "*", "2", "-", "sigma", ")", "\n", "", "W", ".", "set_value", "(", "np", ".", "vstack", "(", "[", "matrix", ",", "new_rows", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.set_item_embeddings": [[314, 328], ["isinstance", "numpy.in1d", "hgru4rec.HGRU4Rec.itemidmap[].dropna().values.astype", "E.get_value", "E.set_value", "isinstance", "values.keys", "numpy.vstack", "NotImplementedError", "list", "numpy.arange", "hgru4rec.HGRU4Rec.itemidmap[].dropna", "values.values"], "methods", ["None"], ["", "def", "set_item_embeddings", "(", "self", ",", "E", ",", "values", ")", ":", "\n", "        ", "if", "isinstance", "(", "values", ",", "dict", ")", ":", "\n", "            ", "keys", ",", "values", "=", "values", ".", "keys", "(", ")", ",", "np", ".", "vstack", "(", "list", "(", "values", ".", "values", "(", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "values", ",", "np", ".", "ndarray", ")", ":", "\n", "# use item ids ranging from 0 to the number of rows in values", "\n", "            ", "keys", ",", "values", "=", "np", ".", "arange", "(", "values", ".", "shape", "[", "0", "]", ")", ",", "values", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Unsupported type'", ")", "\n", "# map item ids to the internal indices", "\n", "", "mask", "=", "np", ".", "in1d", "(", "keys", ",", "self", ".", "itemidmap", ".", "index", ",", "assume_unique", "=", "True", ")", "\n", "idx", "=", "self", ".", "itemidmap", "[", "keys", "]", ".", "dropna", "(", ")", ".", "values", ".", "astype", "(", "np", ".", "int", ")", "\n", "emb", "=", "E", ".", "get_value", "(", ")", "\n", "emb", "[", "idx", "]", "=", "values", "[", "mask", "]", "\n", "E", ".", "set_value", "(", "emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.preprocess_data": [[329, 336], ["data.sort_values", "data.reset_index", "data.groupby().size().cumsum", "[].nunique().cumsum", "data.groupby().size", "[].nunique", "data.groupby", "data.groupby"], "methods", ["None"], ["", "def", "preprocess_data", "(", "self", ",", "data", ")", ":", "\n", "# sort by user and time key in order", "\n", "        ", "data", ".", "sort_values", "(", "[", "self", ".", "user_key", ",", "self", ".", "session_key", ",", "self", ".", "time_key", "]", ",", "inplace", "=", "True", ")", "\n", "data", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "offset_session", "=", "np", ".", "r_", "[", "0", ",", "data", ".", "groupby", "(", "[", "self", ".", "user_key", ",", "self", ".", "session_key", "]", ",", "sort", "=", "False", ")", ".", "size", "(", ")", ".", "cumsum", "(", ")", "[", ":", "-", "1", "]", "]", "\n", "user_indptr", "=", "np", ".", "r_", "[", "0", ",", "data", ".", "groupby", "(", "self", ".", "user_key", ",", "sort", "=", "False", ")", "[", "self", ".", "session_key", "]", ".", "nunique", "(", ")", ".", "cumsum", "(", ")", "[", ":", "-", "1", "]", "]", "\n", "return", "user_indptr", ",", "offset_session", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.save_state": [[337, 360], ["collections.OrderedDict", "range", "hgru4rec.HGRU4Rec.Wsy.get_value", "hgru4rec.HGRU4Rec.By.get_value", "range", "hgru4rec.HGRU4Rec.Ws_init[].get_value", "hgru4rec.HGRU4Rec.Bs_init[].get_value", "len", "hgru4rec.HGRU4Rec.Ws_in[].get_value", "hgru4rec.HGRU4Rec.Ws_hh[].get_value", "hgru4rec.HGRU4Rec.Ws_rz[].get_value", "hgru4rec.HGRU4Rec.Bs_h[].get_value", "hgru4rec.HGRU4Rec.Hs[].get_value", "len", "hgru4rec.HGRU4Rec.Wu_in[].get_value", "hgru4rec.HGRU4Rec.Wu_hh[].get_value", "hgru4rec.HGRU4Rec.Wu_rz[].get_value", "hgru4rec.HGRU4Rec.Bu_h[].get_value", "hgru4rec.HGRU4Rec.Hu[].get_value", "hgru4rec.HGRU4Rec.Wuy.get_value", "hgru4rec.HGRU4Rec.Wu_to_s[].get_value", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "save_state", "(", "self", ")", ":", "\n", "        ", "state", "=", "OrderedDict", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "session_layers", ")", ")", ":", "\n", "            ", "state", "[", "'Ws_in_'", "+", "str", "(", "i", ")", "]", "=", "self", ".", "Ws_in", "[", "i", "]", ".", "get_value", "(", ")", "\n", "state", "[", "'Ws_hh_'", "+", "str", "(", "i", ")", "]", "=", "self", ".", "Ws_hh", "[", "i", "]", ".", "get_value", "(", ")", "\n", "state", "[", "'Ws_rz_'", "+", "str", "(", "i", ")", "]", "=", "self", ".", "Ws_rz", "[", "i", "]", ".", "get_value", "(", ")", "\n", "state", "[", "'Bs_h_'", "+", "str", "(", "i", ")", "]", "=", "self", ".", "Bs_h", "[", "i", "]", ".", "get_value", "(", ")", "\n", "state", "[", "'Hs_'", "+", "str", "(", "i", ")", "]", "=", "self", ".", "Hs", "[", "i", "]", ".", "get_value", "(", ")", "\n", "", "state", "[", "'Wsy'", "]", "=", "self", ".", "Wsy", ".", "get_value", "(", ")", "\n", "state", "[", "'By'", "]", "=", "self", ".", "By", ".", "get_value", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "user_layers", ")", ")", ":", "\n", "            ", "state", "[", "'Wu_in_'", "+", "str", "(", "i", ")", "]", "=", "self", ".", "Wu_in", "[", "i", "]", ".", "get_value", "(", ")", "\n", "state", "[", "'Wu_hh_'", "+", "str", "(", "i", ")", "]", "=", "self", ".", "Wu_hh", "[", "i", "]", ".", "get_value", "(", ")", "\n", "state", "[", "'Wu_rz_'", "+", "str", "(", "i", ")", "]", "=", "self", ".", "Wu_rz", "[", "i", "]", ".", "get_value", "(", ")", "\n", "state", "[", "'Bu_h_'", "+", "str", "(", "i", ")", "]", "=", "self", ".", "Bu_h", "[", "i", "]", ".", "get_value", "(", ")", "\n", "state", "[", "'Hu_'", "+", "str", "(", "i", ")", "]", "=", "self", ".", "Hu", "[", "i", "]", ".", "get_value", "(", ")", "\n", "", "if", "self", ".", "user_to_output", ":", "\n", "            ", "state", "[", "'Wuy'", "]", "=", "self", ".", "Wuy", ".", "get_value", "(", ")", "\n", "", "state", "[", "'Wu_to_s_init'", "]", "=", "self", ".", "Ws_init", "[", "0", "]", ".", "get_value", "(", ")", "\n", "state", "[", "'Bu_to_s_init'", "]", "=", "self", ".", "Bs_init", "[", "0", "]", ".", "get_value", "(", ")", "\n", "if", "self", ".", "user_propagation_mode", "==", "'all'", ":", "\n", "            ", "state", "[", "'Wu_to_s'", "]", "=", "self", ".", "Wu_to_s", "[", "0", "]", ".", "get_value", "(", ")", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.load_state": [[361, 382], ["range", "hgru4rec.HGRU4Rec.Wsy.set_value", "hgru4rec.HGRU4Rec.By.set_value", "range", "hgru4rec.HGRU4Rec.Ws_init[].set_value", "hgru4rec.HGRU4Rec.Bs_init[].set_value", "len", "hgru4rec.HGRU4Rec.Ws_in[].set_value", "hgru4rec.HGRU4Rec.Ws_hh[].set_value", "hgru4rec.HGRU4Rec.Ws_rz[].set_value", "hgru4rec.HGRU4Rec.Bs_h[].set_value", "hgru4rec.HGRU4Rec.Hs[].set_value", "len", "hgru4rec.HGRU4Rec.Wu_in[].set_value", "hgru4rec.HGRU4Rec.Wu_hh[].set_value", "hgru4rec.HGRU4Rec.Wu_rz[].set_value", "hgru4rec.HGRU4Rec.Bu_h[].set_value", "hgru4rec.HGRU4Rec.Hu[].set_value", "hgru4rec.HGRU4Rec.Wuy.set_value", "hgru4rec.HGRU4Rec.Wu_to_s[].set_value", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "load_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "session_layers", ")", ")", ":", "\n", "            ", "self", ".", "Ws_in", "[", "i", "]", ".", "set_value", "(", "state", "[", "'Ws_in_'", "+", "str", "(", "i", ")", "]", ",", "borrow", "=", "True", ")", "\n", "self", ".", "Ws_hh", "[", "i", "]", ".", "set_value", "(", "state", "[", "'Ws_hh_'", "+", "str", "(", "i", ")", "]", ",", "borrow", "=", "True", ")", "\n", "self", ".", "Ws_rz", "[", "i", "]", ".", "set_value", "(", "state", "[", "'Ws_rz_'", "+", "str", "(", "i", ")", "]", ",", "borrow", "=", "True", ")", "\n", "self", ".", "Bs_h", "[", "i", "]", ".", "set_value", "(", "state", "[", "'Bs_h_'", "+", "str", "(", "i", ")", "]", ",", "borrow", "=", "True", ")", "\n", "self", ".", "Hs", "[", "i", "]", ".", "set_value", "(", "state", "[", "'Hs_'", "+", "str", "(", "i", ")", "]", ",", "borrow", "=", "True", ")", "\n", "", "self", ".", "Wsy", ".", "set_value", "(", "state", "[", "'Wsy'", "]", ",", "borrow", "=", "True", ")", "\n", "self", ".", "By", ".", "set_value", "(", "state", "[", "'By'", "]", ",", "borrow", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "user_layers", ")", ")", ":", "\n", "            ", "self", ".", "Wu_in", "[", "i", "]", ".", "set_value", "(", "state", "[", "'Wu_in_'", "+", "str", "(", "i", ")", "]", ",", "borrow", "=", "True", ")", "\n", "self", ".", "Wu_hh", "[", "i", "]", ".", "set_value", "(", "state", "[", "'Wu_hh_'", "+", "str", "(", "i", ")", "]", ",", "borrow", "=", "True", ")", "\n", "self", ".", "Wu_rz", "[", "i", "]", ".", "set_value", "(", "state", "[", "'Wu_rz_'", "+", "str", "(", "i", ")", "]", ",", "borrow", "=", "True", ")", "\n", "self", ".", "Bu_h", "[", "i", "]", ".", "set_value", "(", "state", "[", "'Bu_h_'", "+", "str", "(", "i", ")", "]", ",", "borrow", "=", "True", ")", "\n", "self", ".", "Hu", "[", "i", "]", ".", "set_value", "(", "state", "[", "'Hu_'", "+", "str", "(", "i", ")", "]", ",", "borrow", "=", "True", ")", "\n", "", "if", "self", ".", "user_to_output", ":", "\n", "            ", "self", ".", "Wuy", ".", "set_value", "(", "state", "[", "'Wuy'", "]", ",", "borrow", "=", "True", ")", "\n", "", "self", ".", "Ws_init", "[", "0", "]", ".", "set_value", "(", "state", "[", "'Wu_to_s_init'", "]", ",", "borrow", "=", "True", ")", "\n", "self", ".", "Bs_init", "[", "0", "]", ".", "set_value", "(", "state", "[", "'Bu_to_s_init'", "]", ",", "borrow", "=", "True", ")", "\n", "if", "self", ".", "user_propagation_mode", "==", "'all'", ":", "\n", "            ", "self", ".", "Wu_to_s", "[", "0", "]", ".", "set_value", "(", "state", "[", "'Wu_to_s'", "]", ",", "borrow", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.print_state": [[383, 404], ["range", "hgru4rec.print_norm", "hgru4rec.print_norm", "range", "hgru4rec.print_norm", "hgru4rec.print_norm", "len", "hgru4rec.print_norm", "hgru4rec.print_norm", "hgru4rec.print_norm", "hgru4rec.print_norm", "hgru4rec.print_norm", "len", "hgru4rec.print_norm", "hgru4rec.print_norm", "hgru4rec.print_norm", "hgru4rec.print_norm", "hgru4rec.print_norm", "hgru4rec.print_norm", "hgru4rec.print_norm", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm"], ["", "", "def", "print_state", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "session_layers", ")", ")", ":", "\n", "            ", "print_norm", "(", "self", ".", "Ws_in", "[", "i", "]", ",", "'Ws_in_'", "+", "str", "(", "i", ")", ")", "\n", "print_norm", "(", "self", ".", "Ws_hh", "[", "i", "]", ",", "'Ws_hh_'", "+", "str", "(", "i", ")", ")", "\n", "print_norm", "(", "self", ".", "Ws_rz", "[", "i", "]", ",", "'Ws_rz_'", "+", "str", "(", "i", ")", ")", "\n", "print_norm", "(", "self", ".", "Bs_h", "[", "i", "]", ",", "'Bs_h_'", "+", "str", "(", "i", ")", ")", "\n", "print_norm", "(", "self", ".", "Hs", "[", "i", "]", ",", "'Hs_'", "+", "str", "(", "i", ")", ")", "\n", "", "print_norm", "(", "self", ".", "Wsy", ",", "'Wsy'", ")", "\n", "print_norm", "(", "self", ".", "By", ",", "'By'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "user_layers", ")", ")", ":", "\n", "            ", "print_norm", "(", "self", ".", "Wu_in", "[", "i", "]", ",", "'Wu_in_'", "+", "str", "(", "i", ")", ")", "\n", "print_norm", "(", "self", ".", "Wu_hh", "[", "i", "]", ",", "'Wu_hh_'", "+", "str", "(", "i", ")", ")", "\n", "print_norm", "(", "self", ".", "Wu_rz", "[", "i", "]", ",", "'Wu_rz_'", "+", "str", "(", "i", ")", ")", "\n", "print_norm", "(", "self", ".", "Bu_h", "[", "i", "]", ",", "'Bu_h_'", "+", "str", "(", "i", ")", ")", "\n", "print_norm", "(", "self", ".", "Hu", "[", "i", "]", ",", "'Hu_'", "+", "str", "(", "i", ")", ")", "\n", "", "if", "self", ".", "user_to_output", ":", "\n", "            ", "print_norm", "(", "self", ".", "Wuy", ",", "'Wuy'", ")", "\n", "", "print_norm", "(", "self", ".", "Ws_init", "[", "0", "]", ",", "'Wu_to_s_init'", ")", "\n", "print_norm", "(", "self", ".", "Bs_init", "[", "0", "]", ",", "'Bu_to_s_init'", ")", "\n", "if", "self", ".", "user_propagation_mode", "==", "'all'", ":", "\n", "            ", "print_norm", "(", "self", ".", "Wu_to_s", "[", "0", "]", ",", "'Wu_to_s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init": [[405, 475], ["range", "hgru4rec.HGRU4Rec.init_weights", "theano.shared", "range", "hgru4rec.HGRU4Rec.Ws_init.append", "hgru4rec.HGRU4Rec.Bs_init.append", "hgru4rec.HGRU4Rec.init_weights", "len", "m.append", "m.append", "m.append", "hgru4rec.HGRU4Rec.Ws_in.append", "hgru4rec.HGRU4Rec.Ws_hh.append", "m2.append", "m2.append", "hgru4rec.HGRU4Rec.Ws_rz.append", "hgru4rec.HGRU4Rec.Bs_h.append", "hgru4rec.HGRU4Rec.Hs.append", "len", "m.append", "m.append", "m.append", "hgru4rec.HGRU4Rec.Wu_in.append", "hgru4rec.HGRU4Rec.Wu_hh.append", "m2.append", "m2.append", "hgru4rec.HGRU4Rec.Wu_rz.append", "hgru4rec.HGRU4Rec.Bu_h.append", "hgru4rec.HGRU4Rec.Hu.append", "hgru4rec.HGRU4Rec.init_weights", "hgru4rec.HGRU4Rec.init_weights", "theano.shared", "m.append", "m.append", "m.append", "hgru4rec.HGRU4Rec.set_item_embeddings", "hgru4rec.HGRU4Rec.init_matrix", "hgru4rec.HGRU4Rec.init_matrix", "hgru4rec.HGRU4Rec.init_matrix", "theano.shared", "hgru4rec.HGRU4Rec.init_weights", "hgru4rec.HGRU4Rec.init_matrix", "hgru4rec.HGRU4Rec.init_matrix", "theano.shared", "theano.shared", "theano.shared", "numpy.zeros", "hgru4rec.HGRU4Rec.init_matrix", "hgru4rec.HGRU4Rec.init_matrix", "hgru4rec.HGRU4Rec.init_matrix", "theano.shared", "hgru4rec.HGRU4Rec.init_weights", "hgru4rec.HGRU4Rec.init_matrix", "hgru4rec.HGRU4Rec.init_matrix", "theano.shared", "theano.shared", "theano.shared", "hgru4rec.HGRU4Rec.init_matrix", "hgru4rec.HGRU4Rec.init_matrix", "hgru4rec.HGRU4Rec.init_matrix", "theano.shared", "numpy.zeros", "numpy.hstack", "numpy.hstack", "numpy.zeros", "numpy.zeros", "numpy.hstack", "numpy.hstack", "numpy.zeros", "numpy.zeros", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_weights", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_weights", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_weights", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_weights", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.set_item_embeddings", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_matrix", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_matrix", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_matrix", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_weights", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_matrix", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_matrix", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_matrix", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_matrix", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_matrix", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_weights", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_matrix", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_matrix", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_matrix", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_matrix", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init_matrix"], ["", "", "def", "init", "(", "self", ")", ":", "\n", "        ", "rnn_input_size", "=", "self", ".", "n_items", "\n", "if", "self", ".", "item_embedding", "is", "not", "None", ":", "\n", "            ", "self", ".", "E_item", "=", "self", ".", "init_weights", "(", "(", "self", ".", "n_items", ",", "self", ".", "item_embedding", ")", ")", "\n", "if", "self", ".", "init_item_embeddings", "is", "not", "None", ":", "\n", "                ", "self", ".", "set_item_embeddings", "(", "self", ".", "E_item", ",", "self", ".", "init_item_embeddings", ")", "\n", "", "rnn_input_size", "=", "self", ".", "item_embedding", "\n", "\n", "# Initialize the session parameters", "\n", "", "self", ".", "Ws_in", ",", "self", ".", "Ws_hh", ",", "self", ".", "Ws_rz", ",", "self", ".", "Bs_h", ",", "self", ".", "Hs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "session_layers", ")", ")", ":", "\n", "            ", "m", "=", "[", "]", "\n", "m", ".", "append", "(", "\n", "self", ".", "init_matrix", "(", "(", "self", ".", "session_layers", "[", "i", "-", "1", "]", "if", "i", ">", "0", "else", "rnn_input_size", ",", "self", ".", "session_layers", "[", "i", "]", ")", ")", ")", "\n", "m", ".", "append", "(", "\n", "self", ".", "init_matrix", "(", "(", "self", ".", "session_layers", "[", "i", "-", "1", "]", "if", "i", ">", "0", "else", "rnn_input_size", ",", "self", ".", "session_layers", "[", "i", "]", ")", ")", ")", "\n", "m", ".", "append", "(", "\n", "self", ".", "init_matrix", "(", "(", "self", ".", "session_layers", "[", "i", "-", "1", "]", "if", "i", ">", "0", "else", "rnn_input_size", ",", "self", ".", "session_layers", "[", "i", "]", ")", ")", ")", "\n", "self", ".", "Ws_in", ".", "append", "(", "theano", ".", "shared", "(", "value", "=", "np", ".", "hstack", "(", "m", ")", ",", "borrow", "=", "True", ")", ")", "\n", "self", ".", "Ws_hh", ".", "append", "(", "self", ".", "init_weights", "(", "(", "self", ".", "session_layers", "[", "i", "]", ",", "self", ".", "session_layers", "[", "i", "]", ")", ")", ")", "\n", "m2", "=", "[", "]", "\n", "m2", ".", "append", "(", "self", ".", "init_matrix", "(", "(", "self", ".", "session_layers", "[", "i", "]", ",", "self", ".", "session_layers", "[", "i", "]", ")", ")", ")", "\n", "m2", ".", "append", "(", "self", ".", "init_matrix", "(", "(", "self", ".", "session_layers", "[", "i", "]", ",", "self", ".", "session_layers", "[", "i", "]", ")", ")", ")", "\n", "self", ".", "Ws_rz", ".", "append", "(", "theano", ".", "shared", "(", "value", "=", "np", ".", "hstack", "(", "m2", ")", ",", "borrow", "=", "True", ")", ")", "\n", "self", ".", "Bs_h", ".", "append", "(", "\n", "theano", ".", "shared", "(", "value", "=", "np", ".", "zeros", "(", "(", "self", ".", "session_layers", "[", "i", "]", "*", "3", ",", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", ")", "\n", "self", ".", "Hs", ".", "append", "(", "\n", "theano", ".", "shared", "(", "value", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "session_layers", "[", "i", "]", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "\n", "borrow", "=", "True", ")", ")", "\n", "# Session to output weights", "\n", "", "self", ".", "Wsy", "=", "self", ".", "init_weights", "(", "(", "self", ".", "n_items", ",", "self", ".", "session_layers", "[", "-", "1", "]", ")", ")", "\n", "# Global output bias", "\n", "self", ".", "By", "=", "theano", ".", "shared", "(", "value", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_items", ",", "1", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "\n", "# Initialize the user parameters", "\n", "self", ".", "Wu_in", ",", "self", ".", "Wu_hh", ",", "self", ".", "Wu_rz", ",", "self", ".", "Bu_h", ",", "self", ".", "Hu", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "user_layers", ")", ")", ":", "\n", "            ", "m", "=", "[", "]", "\n", "m", ".", "append", "(", "self", ".", "init_matrix", "(", "\n", "(", "self", ".", "user_layers", "[", "i", "-", "1", "]", "if", "i", ">", "0", "else", "self", ".", "session_layers", "[", "-", "1", "]", ",", "self", ".", "user_layers", "[", "i", "]", ")", ")", ")", "\n", "m", ".", "append", "(", "self", ".", "init_matrix", "(", "\n", "(", "self", ".", "user_layers", "[", "i", "-", "1", "]", "if", "i", ">", "0", "else", "self", ".", "session_layers", "[", "-", "1", "]", ",", "self", ".", "user_layers", "[", "i", "]", ")", ")", ")", "\n", "m", ".", "append", "(", "self", ".", "init_matrix", "(", "\n", "(", "self", ".", "user_layers", "[", "i", "-", "1", "]", "if", "i", ">", "0", "else", "self", ".", "session_layers", "[", "-", "1", "]", ",", "self", ".", "user_layers", "[", "i", "]", ")", ")", ")", "\n", "self", ".", "Wu_in", ".", "append", "(", "theano", ".", "shared", "(", "value", "=", "np", ".", "hstack", "(", "m", ")", ",", "borrow", "=", "True", ")", ")", "\n", "self", ".", "Wu_hh", ".", "append", "(", "self", ".", "init_weights", "(", "(", "self", ".", "user_layers", "[", "i", "]", ",", "self", ".", "user_layers", "[", "i", "]", ")", ")", ")", "\n", "m2", "=", "[", "]", "\n", "m2", ".", "append", "(", "self", ".", "init_matrix", "(", "(", "self", ".", "user_layers", "[", "i", "]", ",", "self", ".", "user_layers", "[", "i", "]", ")", ")", ")", "\n", "m2", ".", "append", "(", "self", ".", "init_matrix", "(", "(", "self", ".", "user_layers", "[", "i", "]", ",", "self", ".", "user_layers", "[", "i", "]", ")", ")", ")", "\n", "self", ".", "Wu_rz", ".", "append", "(", "theano", ".", "shared", "(", "value", "=", "np", ".", "hstack", "(", "m2", ")", ",", "borrow", "=", "True", ")", ")", "\n", "self", ".", "Bu_h", ".", "append", "(", "\n", "theano", ".", "shared", "(", "value", "=", "np", ".", "zeros", "(", "(", "self", ".", "user_layers", "[", "i", "]", "*", "3", ",", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", ")", "\n", "self", ".", "Hu", ".", "append", "(", "\n", "theano", ".", "shared", "(", "value", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "user_layers", "[", "i", "]", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "\n", "borrow", "=", "True", ")", ")", "\n", "", "if", "self", ".", "user_to_output", ":", "\n", "# User to output weights", "\n", "            ", "self", ".", "Wuy", "=", "self", ".", "init_weights", "(", "(", "self", ".", "n_items", ",", "self", ".", "user_layers", "[", "-", "1", "]", ")", ")", "\n", "\n", "# User-to-Session parameters", "\n", "", "self", ".", "Ws_init", ",", "self", ".", "Bs_init", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "Ws_init", ".", "append", "(", "self", ".", "init_weights", "(", "(", "self", ".", "user_layers", "[", "-", "1", "]", ",", "self", ".", "session_layers", "[", "0", "]", ")", ")", ")", "\n", "self", ".", "Bs_init", ".", "append", "(", "\n", "theano", ".", "shared", "(", "value", "=", "np", ".", "zeros", "(", "(", "self", ".", "session_layers", "[", "0", "]", ",", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", ")", "\n", "if", "self", ".", "user_propagation_mode", "==", "'all'", ":", "\n", "            ", "m", "=", "[", "]", "\n", "m", ".", "append", "(", "self", ".", "init_matrix", "(", "(", "self", ".", "user_layers", "[", "-", "1", "]", ",", "self", ".", "session_layers", "[", "0", "]", ")", ")", ")", "\n", "m", ".", "append", "(", "self", ".", "init_matrix", "(", "(", "self", ".", "user_layers", "[", "-", "1", "]", ",", "self", ".", "session_layers", "[", "0", "]", ")", ")", ")", "\n", "m", ".", "append", "(", "self", ".", "init_matrix", "(", "(", "self", ".", "user_layers", "[", "-", "1", "]", ",", "self", ".", "session_layers", "[", "0", "]", ")", ")", ")", "\n", "self", ".", "Wu_to_s", "=", "[", "theano", ".", "shared", "(", "value", "=", "np", ".", "hstack", "(", "m", ")", ",", "borrow", "=", "True", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.dropout": [[476, 481], ["srng.binomial"], "methods", ["None"], ["", "", "def", "dropout", "(", "self", ",", "X", ",", "drop_p", ")", ":", "\n", "        ", "if", "drop_p", ">", "0", ":", "\n", "            ", "retain_prob", "=", "1", "-", "drop_p", "\n", "X", "*=", "srng", ".", "binomial", "(", "X", ".", "shape", ",", "p", "=", "retain_prob", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", "/", "retain_prob", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.adam": [[482, 506], ["numpy.float32", "numpy.float32", "theano.shared", "theano.shared", "theano.shared", "theano.tensor.set_subtensor", "theano.tensor.set_subtensor", "theano.tensor.set_subtensor", "param.get_value", "param.get_value", "param.get_value", "theano.tensor.sqrt"], "methods", ["None"], ["", "def", "adam", "(", "self", ",", "param", ",", "grad", ",", "updates", ",", "sample_idx", "=", "None", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "        ", "v1", "=", "np", ".", "float32", "(", "self", ".", "decay", ")", "\n", "v2", "=", "np", ".", "float32", "(", "1.0", "-", "self", ".", "decay", ")", "\n", "acc", "=", "theano", ".", "shared", "(", "param", ".", "get_value", "(", "borrow", "=", "False", ")", "*", "0.", ",", "borrow", "=", "True", ")", "\n", "meang", "=", "theano", ".", "shared", "(", "param", ".", "get_value", "(", "borrow", "=", "False", ")", "*", "0.", ",", "borrow", "=", "True", ")", "\n", "countt", "=", "theano", ".", "shared", "(", "param", ".", "get_value", "(", "borrow", "=", "False", ")", "*", "0.", ",", "borrow", "=", "True", ")", "\n", "if", "sample_idx", "is", "None", ":", "\n", "            ", "acc_new", "=", "v1", "*", "acc", "+", "v2", "*", "grad", "**", "2", "\n", "meang_new", "=", "v1", "*", "meang", "+", "v2", "*", "grad", "\n", "countt_new", "=", "countt", "+", "1", "\n", "updates", "[", "acc", "]", "=", "acc_new", "\n", "updates", "[", "meang", "]", "=", "meang_new", "\n", "updates", "[", "countt", "]", "=", "countt_new", "\n", "", "else", ":", "\n", "            ", "acc_s", "=", "acc", "[", "sample_idx", "]", "\n", "meang_s", "=", "meang", "[", "sample_idx", "]", "\n", "countt_s", "=", "countt", "[", "sample_idx", "]", "\n", "acc_new", "=", "v1", "*", "acc_s", "+", "v2", "*", "grad", "**", "2", "\n", "meang_new", "=", "v1", "*", "meang_s", "+", "v2", "*", "grad", "\n", "countt_new", "=", "countt_s", "+", "1.0", "\n", "updates", "[", "acc", "]", "=", "T", ".", "set_subtensor", "(", "acc_s", ",", "acc_new", ")", "\n", "updates", "[", "meang", "]", "=", "T", ".", "set_subtensor", "(", "meang_s", ",", "meang_new", ")", "\n", "updates", "[", "countt", "]", "=", "T", ".", "set_subtensor", "(", "countt_s", ",", "countt_new", ")", "\n", "", "return", "(", "meang_new", "/", "(", "1", "-", "v1", "**", "countt_new", ")", ")", "/", "(", "T", ".", "sqrt", "(", "acc_new", "/", "(", "1", "-", "v1", "**", "countt_new", ")", ")", "+", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.adagrad": [[507, 518], ["theano.shared", "theano.tensor.cast", "theano.tensor.set_subtensor", "theano.tensor.sqrt", "param.get_value"], "methods", ["None"], ["", "def", "adagrad", "(", "self", ",", "param", ",", "grad", ",", "updates", ",", "sample_idx", "=", "None", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "        ", "acc", "=", "theano", ".", "shared", "(", "param", ".", "get_value", "(", "borrow", "=", "False", ")", "*", "0.", ",", "borrow", "=", "True", ")", "\n", "if", "sample_idx", "is", "None", ":", "\n", "            ", "acc_new", "=", "acc", "+", "grad", "**", "2", "\n", "updates", "[", "acc", "]", "=", "acc_new", "\n", "", "else", ":", "\n", "            ", "acc_s", "=", "acc", "[", "sample_idx", "]", "\n", "acc_new", "=", "acc_s", "+", "grad", "**", "2", "\n", "updates", "[", "acc", "]", "=", "T", ".", "set_subtensor", "(", "acc_s", ",", "acc_new", ")", "\n", "", "gradient_scaling", "=", "T", ".", "cast", "(", "T", ".", "sqrt", "(", "acc_new", "+", "epsilon", ")", ",", "theano", ".", "config", ".", "floatX", ")", "\n", "return", "grad", "/", "gradient_scaling", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.adadelta": [[519, 540], ["numpy.float32", "numpy.float32", "theano.shared", "theano.shared", "theano.tensor.cast", "theano.tensor.set_subtensor", "theano.tensor.set_subtensor", "theano.tensor.sqrt", "param.get_value", "param.get_value", "theano.tensor.sqrt", "theano.tensor.sqrt"], "methods", ["None"], ["", "def", "adadelta", "(", "self", ",", "param", ",", "grad", ",", "updates", ",", "sample_idx", "=", "None", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "        ", "v1", "=", "np", ".", "float32", "(", "self", ".", "decay", ")", "\n", "v2", "=", "np", ".", "float32", "(", "1.0", "-", "self", ".", "decay", ")", "\n", "acc", "=", "theano", ".", "shared", "(", "param", ".", "get_value", "(", "borrow", "=", "False", ")", "*", "0.", ",", "borrow", "=", "True", ")", "\n", "upd", "=", "theano", ".", "shared", "(", "param", ".", "get_value", "(", "borrow", "=", "False", ")", "*", "0.", ",", "borrow", "=", "True", ")", "\n", "if", "sample_idx", "is", "None", ":", "\n", "            ", "acc_new", "=", "acc", "+", "grad", "**", "2", "\n", "updates", "[", "acc", "]", "=", "acc_new", "\n", "grad", "=", "T", ".", "sqrt", "(", "upd", "+", "epsilon", ")", "*", "grad", "\n", "upd_new", "=", "v1", "*", "upd", "+", "v2", "*", "grad", "**", "2", "\n", "updates", "[", "upd", "]", "=", "upd_new", "\n", "", "else", ":", "\n", "            ", "acc_s", "=", "acc", "[", "sample_idx", "]", "\n", "acc_new", "=", "acc_s", "+", "grad", "**", "2", "\n", "updates", "[", "acc", "]", "=", "T", ".", "set_subtensor", "(", "acc_s", ",", "acc_new", ")", "\n", "upd_s", "=", "upd", "[", "sample_idx", "]", "\n", "upd_new", "=", "v1", "*", "upd_s", "+", "v2", "*", "grad", "**", "2", "\n", "updates", "[", "upd", "]", "=", "T", ".", "set_subtensor", "(", "upd_s", ",", "upd_new", ")", "\n", "grad", "=", "T", ".", "sqrt", "(", "upd_s", "+", "epsilon", ")", "*", "grad", "\n", "", "gradient_scaling", "=", "T", ".", "cast", "(", "T", ".", "sqrt", "(", "acc_new", "+", "epsilon", ")", ",", "theano", ".", "config", ".", "floatX", ")", "\n", "return", "grad", "/", "gradient_scaling", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.rmsprop": [[541, 554], ["numpy.float32", "numpy.float32", "theano.shared", "theano.tensor.cast", "theano.tensor.set_subtensor", "theano.tensor.sqrt", "param.get_value"], "methods", ["None"], ["", "def", "rmsprop", "(", "self", ",", "param", ",", "grad", ",", "updates", ",", "sample_idx", "=", "None", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "        ", "v1", "=", "np", ".", "float32", "(", "self", ".", "decay", ")", "\n", "v2", "=", "np", ".", "float32", "(", "1.0", "-", "self", ".", "decay", ")", "\n", "acc", "=", "theano", ".", "shared", "(", "param", ".", "get_value", "(", "borrow", "=", "False", ")", "*", "0.", ",", "borrow", "=", "True", ")", "\n", "if", "sample_idx", "is", "None", ":", "\n", "            ", "acc_new", "=", "v1", "*", "acc", "+", "v2", "*", "grad", "**", "2", "\n", "updates", "[", "acc", "]", "=", "acc_new", "\n", "", "else", ":", "\n", "            ", "acc_s", "=", "acc", "[", "sample_idx", "]", "\n", "acc_new", "=", "v1", "*", "acc_s", "+", "v2", "*", "grad", "**", "2", "\n", "updates", "[", "acc", "]", "=", "T", ".", "set_subtensor", "(", "acc_s", ",", "acc_new", ")", "\n", "", "gradient_scaling", "=", "T", ".", "cast", "(", "T", ".", "sqrt", "(", "acc_new", "+", "epsilon", ")", ",", "theano", ".", "config", ".", "floatX", ")", "\n", "return", "grad", "/", "gradient_scaling", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.RMSprop": [[555, 611], ["collections.OrderedDict", "zip", "range", "theano.tensor.grad", "theano.tensor.grad", "theano.tensor.cast", "zip", "len", "theano.tensor.sqrt", "theano.tensor.switch", "theano.shared", "theano.tensor.set_subtensor", "theano.tensor.inc_subtensor", "theano.tensor.inc_subtensor", "theano.tensor.switch", "theano.tensor.ge", "theano.shared", "hgru4rec.HGRU4Rec.adagrad", "hgru4rec.HGRU4Rec.rmsprop", "hgru4rec.HGRU4Rec.adadelta", "hgru4rec.HGRU4Rec.adam", "numpy.float32", "numpy.float32", "theano.tensor.sum", "theano.tensor.sum", "theano.tensor.ge", "hgru4rec.HGRU4Rec.adagrad", "hgru4rec.HGRU4Rec.rmsprop", "hgru4rec.HGRU4Rec.adadelta", "hgru4rec.HGRU4Rec.adam", "fullP.get_value", "p.get_value", "numpy.float32", "numpy.float32", "numpy.float32", "theano.tensor.sum", "theano.tensor.sum", "theano.tensor.sum"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.adagrad", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.rmsprop", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.adadelta", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.adam", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.adagrad", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.rmsprop", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.adadelta", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.adam"], ["", "def", "RMSprop", "(", "self", ",", "cost", ",", "params", ",", "full_params", ",", "sampled_params", ",", "sidxs", ",", "epsilon", "=", "1e-6", ")", ":", "\n", "        ", "grads", "=", "[", "T", ".", "grad", "(", "cost", "=", "cost", ",", "wrt", "=", "param", ")", "for", "param", "in", "params", "]", "\n", "sgrads", "=", "[", "T", ".", "grad", "(", "cost", "=", "cost", ",", "wrt", "=", "sparam", ")", "for", "sparam", "in", "sampled_params", "]", "\n", "updates", "=", "OrderedDict", "(", ")", "\n", "if", "self", ".", "grad_cap", ">", "0", ":", "\n", "            ", "norm", "=", "T", ".", "cast", "(", "T", ".", "sqrt", "(", "T", ".", "sum", "(", "[", "T", ".", "sum", "(", "[", "T", ".", "sum", "(", "g", "**", "2", ")", "for", "g", "in", "g_list", "]", ")", "for", "g_list", "in", "grads", "]", ")", "+", "T", ".", "sum", "(", "\n", "[", "T", ".", "sum", "(", "g", "**", "2", ")", "for", "g", "in", "sgrads", "]", ")", ")", ",", "theano", ".", "config", ".", "floatX", ")", "\n", "grads", "=", "[", "[", "T", ".", "switch", "(", "T", ".", "ge", "(", "norm", ",", "self", ".", "grad_cap", ")", ",", "g", "*", "self", ".", "grad_cap", "/", "norm", ",", "g", ")", "for", "g", "in", "g_list", "]", "for", "g_list", "in", "\n", "grads", "]", "\n", "sgrads", "=", "[", "T", ".", "switch", "(", "T", ".", "ge", "(", "norm", ",", "self", ".", "grad_cap", ")", ",", "g", "*", "self", ".", "grad_cap", "/", "norm", ",", "g", ")", "for", "g", "in", "sgrads", "]", "\n", "", "for", "p_list", ",", "g_list", "in", "zip", "(", "params", ",", "grads", ")", ":", "\n", "            ", "for", "p", ",", "g", "in", "zip", "(", "p_list", ",", "g_list", ")", ":", "\n", "                ", "if", "self", ".", "adapt", ":", "\n", "                    ", "if", "self", ".", "adapt", "==", "'adagrad'", ":", "\n", "                        ", "g", "=", "self", ".", "adagrad", "(", "p", ",", "g", ",", "updates", ")", "\n", "", "if", "self", ".", "adapt", "==", "'rmsprop'", ":", "\n", "                        ", "g", "=", "self", ".", "rmsprop", "(", "p", ",", "g", ",", "updates", ")", "\n", "", "if", "self", ".", "adapt", "==", "'adadelta'", ":", "\n", "                        ", "g", "=", "self", ".", "adadelta", "(", "p", ",", "g", ",", "updates", ")", "\n", "", "if", "self", ".", "adapt", "==", "'adam'", ":", "\n", "                        ", "g", "=", "self", ".", "adam", "(", "p", ",", "g", ",", "updates", ")", "\n", "", "", "if", "self", ".", "momentum", ">", "0", ":", "\n", "                    ", "velocity", "=", "theano", ".", "shared", "(", "p", ".", "get_value", "(", "borrow", "=", "False", ")", "*", "0.", ",", "borrow", "=", "True", ")", "\n", "velocity2", "=", "self", ".", "momentum", "*", "velocity", "-", "np", ".", "float32", "(", "self", ".", "learning_rate", ")", "*", "(", "g", "+", "self", ".", "lmbd", "*", "p", ")", "\n", "updates", "[", "velocity", "]", "=", "velocity2", "\n", "updates", "[", "p", "]", "=", "p", "+", "velocity2", "\n", "", "else", ":", "\n", "                    ", "updates", "[", "p", "]", "=", "p", "*", "np", ".", "float32", "(", "1.0", "-", "self", ".", "learning_rate", "*", "self", ".", "lmbd", ")", "-", "np", ".", "float32", "(", "\n", "self", ".", "learning_rate", ")", "*", "g", "\n", "", "", "", "for", "i", "in", "range", "(", "len", "(", "sgrads", ")", ")", ":", "\n", "            ", "g", "=", "sgrads", "[", "i", "]", "\n", "fullP", "=", "full_params", "[", "i", "]", "\n", "sample_idx", "=", "sidxs", "[", "i", "]", "\n", "sparam", "=", "sampled_params", "[", "i", "]", "\n", "if", "self", ".", "adapt", ":", "\n", "                ", "if", "self", ".", "adapt", "==", "'adagrad'", ":", "\n", "                    ", "g", "=", "self", ".", "adagrad", "(", "fullP", ",", "g", ",", "updates", ",", "sample_idx", ")", "\n", "", "if", "self", ".", "adapt", "==", "'rmsprop'", ":", "\n", "                    ", "g", "=", "self", ".", "rmsprop", "(", "fullP", ",", "g", ",", "updates", ",", "sample_idx", ")", "\n", "", "if", "self", ".", "adapt", "==", "'adadelta'", ":", "\n", "                    ", "g", "=", "self", ".", "adadelta", "(", "fullP", ",", "g", ",", "updates", ",", "sample_idx", ")", "\n", "", "if", "self", ".", "adapt", "==", "'adam'", ":", "\n", "                    ", "g", "=", "self", ".", "adam", "(", "fullP", ",", "g", ",", "updates", ",", "sample_idx", ")", "\n", "", "", "if", "self", ".", "lmbd", ">", "0", ":", "\n", "                ", "delta", "=", "np", ".", "float32", "(", "self", ".", "learning_rate", ")", "*", "(", "g", "+", "self", ".", "lmbd", "*", "sparam", ")", "\n", "", "else", ":", "\n", "                ", "delta", "=", "np", ".", "float32", "(", "self", ".", "learning_rate", ")", "*", "g", "\n", "", "if", "self", ".", "momentum", ">", "0", ":", "\n", "                ", "velocity", "=", "theano", ".", "shared", "(", "fullP", ".", "get_value", "(", "borrow", "=", "False", ")", "*", "0.", ",", "borrow", "=", "True", ")", "\n", "vs", "=", "velocity", "[", "sample_idx", "]", "\n", "velocity2", "=", "self", ".", "momentum", "*", "vs", "-", "delta", "\n", "updates", "[", "velocity", "]", "=", "T", ".", "set_subtensor", "(", "vs", ",", "velocity2", ")", "\n", "updates", "[", "fullP", "]", "=", "T", ".", "inc_subtensor", "(", "sparam", ",", "velocity2", ")", "\n", "", "else", ":", "\n", "                ", "updates", "[", "fullP", "]", "=", "T", ".", "inc_subtensor", "(", "sparam", ",", "-", "delta", ")", "\n", "", "", "return", "updates", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.model": [[612, 743], ["theano.tensor.nnet.sigmoid", "hgru4rec.HGRU4Rec.hidden_activation", "hgru4rec.HGRU4Rec.dropout", "range", "hgru4rec.HGRU4Rec.dropout", "hgru4rec.HGRU4Rec.dropout", "range", "theano.tensor.dot", "len", "theano.tensor.nnet.sigmoid", "hgru4rec.HGRU4Rec.hidden_activation", "hgru4rec.HGRU4Rec.dropout", "Hu_new.append", "hgru4rec.HGRU4Rec.s_init_act", "theano.tensor.nnet.sigmoid", "hgru4rec.HGRU4Rec.hidden_activation", "theano.tensor.nnet.sigmoid", "hgru4rec.HGRU4Rec.hidden_activation", "len", "theano.tensor.nnet.sigmoid", "hgru4rec.HGRU4Rec.hidden_activation", "hgru4rec.HGRU4Rec.dropout", "Hs_new.append", "hgru4rec.HGRU4Rec.final_activation", "hgru4rec.HGRU4Rec.final_activation", "theano.tensor.zeros_like", "theano.tensor.dot", "theano.tensor.dot", "theano.tensor.zeros_like", "theano.tensor.dot", "theano.tensor.dot", "theano.tensor.dot", "SBy.flatten", "theano.tensor.dot", "sampled_params.append", "theano.tensor.dot", "hgru4rec.HGRU4Rec.By.flatten", "theano.tensor.dot", "theano.tensor.dot", "theano.tensor.dot", "theano.tensor.zeros_like", "theano.tensor.dot", "theano.tensor.zeros_like", "theano.tensor.dot", "theano.tensor.dot", "theano.tensor.dot", "theano.tensor.dot", "theano.tensor.dot", "theano.tensor.dot", "theano.tensor.dot", "theano.tensor.dot"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.sigmoid", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.dropout", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.dropout", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.dropout", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.sigmoid", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.dropout", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.sigmoid", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.sigmoid", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.sigmoid", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.dropout"], ["", "def", "model", "(", "self", ",", "X", ",", "Sstart", ",", "Ustart", ",", "Hs", ",", "Hu", ",", "Y", "=", "None", ",", "\n", "drop_p_hidden_usr", "=", "0.0", ",", "\n", "drop_p_hidden_ses", "=", "0.0", ",", "\n", "drop_p_init", "=", "0.0", ")", ":", "\n", "#", "\n", "# USER GRU", "\n", "#", "\n", "# update the User GRU with the last hidden state of the Session GRU", "\n", "# NOTE: the User GRU gets actually updated only when a new session starts", "\n", "        ", "user_in", "=", "T", ".", "dot", "(", "Hs", "[", "-", "1", "]", ",", "self", ".", "Wu_in", "[", "0", "]", ")", "+", "self", ".", "Bu_h", "[", "0", "]", "\n", "user_in", "=", "user_in", ".", "T", "\n", "# ^ 3 * user_layers[0] x batch_size", "\n", "\n", "rz_u", "=", "T", ".", "nnet", ".", "sigmoid", "(", "user_in", "[", "self", ".", "user_layers", "[", "0", "]", ":", "]", "\n", "+", "T", ".", "dot", "(", "Hu", "[", "0", "]", ",", "self", ".", "Wu_rz", "[", "0", "]", ")", ".", "T", ")", "\n", "# ^ 2 * user_layers[0] x batch_size", "\n", "\n", "h_u", "=", "self", ".", "hidden_activation", "(", "T", ".", "dot", "(", "Hu", "[", "0", "]", "*", "rz_u", "[", ":", "self", ".", "user_layers", "[", "0", "]", "]", ".", "T", ",", "self", ".", "Wu_hh", "[", "0", "]", ")", ".", "T", "\n", "+", "user_in", "[", ":", "self", ".", "user_layers", "[", "0", "]", "]", ")", "\n", "# ^ user_layers[0] x batch_size", "\n", "\n", "z", "=", "rz_u", "[", "self", ".", "user_layers", "[", "0", "]", ":", "]", ".", "T", "\n", "# batch_size x user_layers[0]", "\n", "h_u", "=", "(", "1.0", "-", "z", ")", "*", "Hu", "[", "0", "]", "+", "z", "*", "h_u", ".", "T", "\n", "h_u", "=", "self", ".", "dropout", "(", "h_u", ",", "drop_p_hidden_usr", ")", "\n", "# ^ batch_size x user_layers[0]", "\n", "\n", "# update the User GRU only when a new session starts", "\n", "# Hu contains the state of the previous session", "\n", "h_u", "=", "Hu", "[", "0", "]", "*", "(", "1", "-", "Sstart", "[", ":", ",", "None", "]", ")", "+", "h_u", "*", "Sstart", "[", ":", ",", "None", "]", "\n", "# ^ batch_size x user_layers[0]", "\n", "\n", "# reset the user network state for new users", "\n", "h_u", "=", "T", ".", "zeros_like", "(", "h_u", ")", "*", "Ustart", "[", ":", ",", "None", "]", "+", "h_u", "*", "(", "1", "-", "Ustart", "[", ":", ",", "None", "]", ")", "\n", "\n", "Hu_new", "=", "[", "h_u", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "user_layers", ")", ")", ":", "\n", "            ", "user_in", "=", "T", ".", "dot", "(", "h_u", ",", "self", ".", "Wu_in", "[", "i", "]", ")", "+", "self", ".", "Bu_h", "[", "i", "]", "\n", "user_in", "=", "user_in", ".", "T", "\n", "rz_u", "=", "T", ".", "nnet", ".", "sigmoid", "(", "user_in", "[", "self", ".", "user_layers", "[", "i", "]", ":", "]", "\n", "+", "T", ".", "dot", "(", "Hu", "[", "i", "]", ",", "self", ".", "Wu_rz", "[", "i", "]", ")", ".", "T", ")", "\n", "\n", "h_u", "=", "self", ".", "hidden_activation", "(", "T", ".", "dot", "(", "Hu", "[", "i", "]", "*", "rz_u", "[", ":", "self", ".", "user_layers", "[", "i", "]", "]", ".", "T", ",", "self", ".", "Wu_hh", "[", "i", "]", ")", ".", "T", "\n", "+", "user_in", "[", ":", "self", ".", "user_layers", "[", "i", "]", "]", ")", "\n", "\n", "z", "=", "rz_u", "[", "self", ".", "user_layers", "[", "i", "]", ":", "]", ".", "T", "\n", "h_u", "=", "(", "1.0", "-", "z", ")", "*", "Hu", "[", "i", "]", "+", "z", "*", "h_u", ".", "T", "\n", "h_u", "=", "self", ".", "dropout", "(", "h_u", ",", "drop_p_hidden_usr", ")", "\n", "h_u", "=", "Hu", "[", "i", "]", "*", "(", "1", "-", "Sstart", "[", ":", ",", "None", "]", ")", "+", "h_u", "*", "Sstart", "[", ":", ",", "None", "]", "\n", "h_u", "=", "T", ".", "zeros_like", "(", "h_u", ")", "*", "Ustart", "[", ":", ",", "None", "]", "+", "h_u", "*", "(", "1", "-", "Ustart", "[", ":", ",", "None", "]", ")", "\n", "Hu_new", ".", "append", "(", "h_u", ")", "\n", "\n", "#", "\n", "# SESSION GRU", "\n", "#", "\n", "# Process the input items", "\n", "", "if", "self", ".", "item_embedding", "is", "not", "None", ":", "\n", "# get the item embedding", "\n", "            ", "SE_item", "=", "self", ".", "E_item", "[", "X", "]", "# sampled item embedding", "\n", "vec", "=", "T", ".", "dot", "(", "SE_item", ",", "self", ".", "Ws_in", "[", "0", "]", ")", "+", "self", ".", "Bs_h", "[", "0", "]", "\n", "Sin", "=", "SE_item", "\n", "", "else", ":", "\n", "            ", "Sx", "=", "self", ".", "Ws_in", "[", "0", "]", "[", "X", "]", "\n", "vec", "=", "Sx", "+", "self", ".", "Bs_h", "[", "0", "]", "\n", "Sin", "=", "Sx", "\n", "", "session_in", "=", "vec", ".", "T", "\n", "# ^ session_layers[0] x batch_size", "\n", "\n", "# initialize the h_s with h_u only for starting sessions", "\n", "h_s_init", "=", "self", ".", "dropout", "(", "self", ".", "s_init_act", "(", "T", ".", "dot", "(", "h_u", ",", "self", ".", "Ws_init", "[", "0", "]", ")", "+", "self", ".", "Bs_init", ")", ",", "drop_p_init", ")", "\n", "h_s", "=", "Hs", "[", "0", "]", "*", "(", "1", "-", "Sstart", "[", ":", ",", "None", "]", ")", "+", "h_s_init", "*", "Sstart", "[", ":", ",", "None", "]", "\n", "# reset h_s for starting users", "\n", "h_s", "=", "h_s", "*", "(", "1", "-", "Ustart", "[", ":", ",", "None", "]", ")", "+", "T", ".", "zeros_like", "(", "h_s", ")", "*", "Ustart", "[", ":", ",", "None", "]", "\n", "\n", "if", "self", ".", "user_propagation_mode", "==", "'all'", ":", "\n", "# this propagates the bias throughout all the session", "\n", "            ", "user_bias", "=", "T", ".", "dot", "(", "h_u", ",", "self", ".", "Wu_to_s", "[", "0", "]", ")", ".", "T", "\n", "# ^ 3*session_layers[0] x batch_size", "\n", "\n", "# update the Session GRU", "\n", "rz_s", "=", "T", ".", "nnet", ".", "sigmoid", "(", "user_bias", "[", "self", ".", "session_layers", "[", "0", "]", ":", "]", "\n", "+", "session_in", "[", "self", ".", "session_layers", "[", "0", "]", ":", "]", "\n", "+", "T", ".", "dot", "(", "h_s", ",", "self", ".", "Ws_rz", "[", "0", "]", ")", ".", "T", ")", "\n", "# ^ 2*session_layers[0] x batch_size", "\n", "\n", "h_s_cand", "=", "self", ".", "hidden_activation", "(", "T", ".", "dot", "(", "h_s", "*", "rz_s", "[", ":", "self", ".", "session_layers", "[", "0", "]", "]", ".", "T", ",", "self", ".", "Ws_hh", "[", "0", "]", ")", ".", "T", "\n", "+", "session_in", "[", ":", "self", ".", "session_layers", "[", "0", "]", "]", ")", "\n", "# ^ session_layers[0] x batch_size", "\n", "", "else", ":", "\n", "            ", "rz_s", "=", "T", ".", "nnet", ".", "sigmoid", "(", "session_in", "[", "self", ".", "session_layers", "[", "0", "]", ":", "]", "\n", "+", "T", ".", "dot", "(", "h_s", ",", "self", ".", "Ws_rz", "[", "0", "]", ")", ".", "T", ")", "\n", "h_s_cand", "=", "self", ".", "hidden_activation", "(", "T", ".", "dot", "(", "h_s", "*", "rz_s", "[", ":", "self", ".", "session_layers", "[", "0", "]", "]", ".", "T", ",", "self", ".", "Ws_hh", "[", "0", "]", ")", ".", "T", "\n", "+", "session_in", "[", ":", "self", ".", "session_layers", "[", "0", "]", "]", ")", "\n", "\n", "", "z", "=", "rz_s", "[", "self", ".", "session_layers", "[", "0", "]", ":", "]", ".", "T", "\n", "# ^ batch_size x session_layers[0]", "\n", "h_s", "=", "(", "1.0", "-", "z", ")", "*", "h_s", "+", "z", "*", "h_s_cand", ".", "T", "\n", "h_s", "=", "self", ".", "dropout", "(", "h_s", ",", "drop_p_hidden_ses", ")", "\n", "# ^ batch_size x session_layers[0]", "\n", "Hs_new", "=", "[", "h_s", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "session_layers", ")", ")", ":", "\n", "# reset Hs for new starting users", "\n", "            ", "h_s_i", "=", "Hs", "[", "i", "]", "*", "(", "1", "-", "Ustart", "[", ":", ",", "None", "]", ")", "+", "T", ".", "zeros_like", "(", "Hs", "[", "i", "]", ")", "*", "Ustart", "[", ":", ",", "None", "]", "\n", "# go through the next GRU layer", "\n", "session_in", "=", "T", ".", "dot", "(", "h_s", ",", "self", ".", "Ws_in", "[", "i", "]", ")", "+", "self", ".", "Bs_h", "[", "i", "]", "\n", "session_in", "=", "session_in", ".", "T", "\n", "rz_s", "=", "T", ".", "nnet", ".", "sigmoid", "(", "session_in", "[", "self", ".", "session_layers", "[", "i", "]", ":", "]", "+", "T", ".", "dot", "(", "h_s_i", ",", "self", ".", "Ws_rz", "[", "i", "]", ")", ".", "T", ")", "\n", "h_s_i_cand", "=", "self", ".", "hidden_activation", "(", "T", ".", "dot", "(", "h_s_i", "*", "rz_s", "[", ":", "self", ".", "session_layers", "[", "i", "]", "]", ".", "T", ",", "self", ".", "Ws_hh", "[", "i", "]", ")", ".", "T", "\n", "+", "session_in", "[", ":", "self", ".", "session_layers", "[", "i", "]", "]", ")", "\n", "z", "=", "rz_s", "[", "self", ".", "session_layers", "[", "i", "]", ":", "]", ".", "T", "\n", "h_s_i", "=", "(", "1.0", "-", "z", ")", "*", "h_s_i", "+", "z", "*", "h_s_i_cand", ".", "T", "\n", "h_s_i", "=", "self", ".", "dropout", "(", "h_s_i", ",", "drop_p_hidden_ses", ")", "\n", "Hs_new", ".", "append", "(", "h_s_i", ")", "\n", "\n", "", "if", "Y", "is", "not", "None", ":", "\n", "            ", "Ssy", "=", "self", ".", "Wsy", "[", "Y", "]", "\n", "SBy", "=", "self", ".", "By", "[", "Y", "]", "\n", "preact", "=", "T", ".", "dot", "(", "h_s", ",", "Ssy", ".", "T", ")", "+", "SBy", ".", "flatten", "(", ")", "\n", "sampled_params", "=", "[", "Sin", ",", "Ssy", ",", "SBy", "]", "\n", "if", "self", ".", "user_to_output", ":", "\n", "                ", "Scy", "=", "self", ".", "Wuy", "[", "Y", "]", "\n", "preact", "+=", "T", ".", "dot", "(", "h_u", ",", "Scy", ".", "T", ")", "\n", "sampled_params", ".", "append", "(", "Scy", ")", "\n", "", "y", "=", "self", ".", "final_activation", "(", "preact", ")", "\n", "return", "Hs_new", ",", "Hu_new", ",", "y", ",", "sampled_params", "\n", "", "else", ":", "\n", "            ", "preact", "=", "T", ".", "dot", "(", "h_s", ",", "self", ".", "Wsy", ".", "T", ")", "+", "self", ".", "By", ".", "flatten", "(", ")", "\n", "if", "self", ".", "user_to_output", ":", "\n", "                ", "preact", "+=", "T", ".", "dot", "(", "h_u", ",", "self", ".", "Wuy", ".", "T", ")", "\n", "", "y", "=", "self", ".", "final_activation", "(", "preact", ")", "\n", "return", "Hs_new", ",", "Hu_new", ",", "y", ",", "[", "Sin", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.fit": [[744, 885], ["train_data[].unique", "len", "hgru4rec.HGRU4Rec.init", "theano.tensor.ivectors", "theano.tensor.fvectors", "hgru4rec.HGRU4Rec.model", "hgru4rec.HGRU4Rec.loss_function", "hgru4rec.HGRU4Rec.RMSprop", "collections.OrderedDict", "range", "range", "theano.function", "theano.function", "logger.info", "hgru4rec.HGRU4Rec.load_state", "pandas.Series", "pandas.merge", "hgru4rec.HGRU4Rec.preprocess_data", "Exception", "pandas.merge", "hgru4rec.HGRU4Rec.preprocess_data", "params.append", "full_params.append", "sidxs.append", "len", "len", "hgru4rec.Sampler", "hgru4rec.HGRU4Rec.iterate", "numpy.isnan", "logger.info", "hgru4rec.HGRU4Rec.load_state", "logger.info", "pickle.dump", "pickle.load", "pandas.DataFrame", "pandas.DataFrame", "hgru4rec.HGRU4Rec.iterate", "logger.info", "logger.info", "hgru4rec.HGRU4Rec.save_state", "open", "open", "numpy.arange", "hgru4rec.HGRU4Rec.save_state"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.init", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.model", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.RMSprop", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.load_state", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.preprocess_data", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.preprocess_data", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.iterate", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.load_state", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.iterate", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.save_state", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.save_state"], ["", "", "def", "fit", "(", "self", ",", "train_data", ",", "valid_data", "=", "None", ",", "retrain", "=", "False", ",", "sample_store", "=", "10000000", ",", "patience", "=", "3", ",", "margin", "=", "1.003", ",", "\n", "save_to", "=", "None", ",", "load_from", "=", "None", ")", ":", "\n", "        ", "'''\n        Trains the network.\n\n        Parameters\n        --------\n        train_data : pandas.DataFrame\n            Training data. It contains the transactions of the sessions. It has one column for session IDs, one for item IDs and one for the timestamp of the events (unix timestamps).\n            It must have a header. Column names are arbitrary, but must correspond to the ones you set during the initialization of the network (session_key, item_key, time_key properties).\n        valid_data: pandas.DataFrame\n            Validation data. If not none, it enables early stopping.\n             Contains the transactions in the same format as in train_data, and it is used exclusively to compute the loss after each training iteration over train_data.\n        retrain : boolean\n            If False, do normal train. If True, do additional train (weights from previous trainings are kept as the initial network) (default: False)\n        sample_store : int\n            If additional negative samples are used (n_sample > 0), the efficiency of GPU utilization can be sped up, by precomputing a large batch of negative samples (and recomputing when necessary).\n            This parameter regulizes the size of this precomputed ID set. Its value is the maximum number of int values (IDs) to be stored. Precomputed IDs are stored in the RAM.\n            For the most efficient computation, a balance must be found between storing few examples and constantly interrupting GPU computations for a short time vs. computing many examples and interrupting GPU computations for a long time (but rarely).\n        patience: int\n            Patience of the early stopping procedure. Number of iterations with not decreasing validation loss before terminating the training procedure\n        margin: float\n            Margin of early stopping. Percentage improvement over the current best validation loss to do not incur into a patience penalty\n        save_to: string\n            Path where to save the state of the best model resulting from training.\n            If early stopping is enabled, saves the model with the lowest validation loss. Otherwise, saves the model corresponding to the last iteration.\n        load_from: string\n            Path from where to load the state of a previously saved model.\n        '''", "\n", "self", ".", "predict", "=", "None", "\n", "self", ".", "update", "=", "None", "\n", "self", ".", "error_during_train", "=", "False", "\n", "itemids", "=", "train_data", "[", "self", ".", "item_key", "]", ".", "unique", "(", ")", "\n", "self", ".", "n_items", "=", "len", "(", "itemids", ")", "\n", "self", ".", "init", "(", ")", "# initialize the network", "\n", "if", "load_from", ":", "\n", "            ", "logger", ".", "info", "(", "'Resuming from state: {}'", ".", "format", "(", "load_from", ")", ")", "\n", "self", ".", "load_state", "(", "pickle", ".", "load", "(", "open", "(", "load_from", ",", "'rb'", ")", ")", ")", "\n", "\n", "", "if", "not", "retrain", ":", "\n", "            ", "self", ".", "itemidmap", "=", "pd", ".", "Series", "(", "data", "=", "np", ".", "arange", "(", "self", ".", "n_items", ")", ",", "index", "=", "itemids", ")", "\n", "train_data", "=", "pd", ".", "merge", "(", "train_data", ",", "\n", "pd", ".", "DataFrame", "(", "{", "self", ".", "item_key", ":", "itemids", ",", "'ItemIdx'", ":", "self", ".", "itemidmap", "[", "itemids", "]", ".", "values", "}", ")", ",", "\n", "on", "=", "self", ".", "item_key", ",", "how", "=", "'inner'", ")", "\n", "user_indptr", ",", "offset_sessions", "=", "self", ".", "preprocess_data", "(", "train_data", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Not supported yet!'", ")", "\n", "\n", "", "if", "valid_data", "is", "not", "None", ":", "\n", "            ", "valid_data", "=", "pd", ".", "merge", "(", "valid_data", ",", "\n", "pd", ".", "DataFrame", "(", "{", "self", ".", "item_key", ":", "itemids", ",", "'ItemIdx'", ":", "self", ".", "itemidmap", "[", "itemids", "]", ".", "values", "}", ")", ",", "\n", "on", "=", "self", ".", "item_key", ",", "how", "=", "'inner'", ")", "\n", "user_indptr_valid", ",", "offset_sessions_valid", "=", "self", ".", "preprocess_data", "(", "valid_data", ")", "\n", "\n", "", "X", ",", "Y", "=", "T", ".", "ivectors", "(", "2", ")", "\n", "Sstart", ",", "Ustart", "=", "T", ".", "fvectors", "(", "2", ")", "\n", "Hs_new", ",", "Hu_new", ",", "Y_pred", ",", "sampled_params", "=", "self", ".", "model", "(", "X", ",", "Sstart", ",", "Ustart", ",", "self", ".", "Hs", ",", "self", ".", "Hu", ",", "Y", ",", "\n", "drop_p_hidden_usr", "=", "self", ".", "dropout_p_hidden_usr", ",", "\n", "drop_p_hidden_ses", "=", "self", ".", "dropout_p_hidden_ses", ",", "\n", "drop_p_init", "=", "self", ".", "dropout_p_init", ")", "\n", "cost", "=", "self", ".", "loss_function", "(", "Y_pred", ")", "\n", "# set up the parameter and sampled parameter vectors", "\n", "if", "self", ".", "item_embedding", "is", "None", ":", "\n", "            ", "params", "=", "[", "self", ".", "Ws_in", "[", "1", ":", "]", ",", "self", ".", "Ws_hh", ",", "self", ".", "Ws_rz", ",", "self", ".", "Bs_h", ",", "self", ".", "Ws_init", ",", "self", ".", "Bs_init", ",", "\n", "self", ".", "Wu_in", ",", "self", ".", "Wu_hh", ",", "self", ".", "Wu_rz", ",", "self", ".", "Bu_h", "]", "\n", "full_params", "=", "[", "self", ".", "Ws_in", "[", "0", "]", ",", "self", ".", "Wsy", ",", "self", ".", "By", "]", "\n", "", "else", ":", "\n", "            ", "params", "=", "[", "self", ".", "Ws_in", ",", "self", ".", "Ws_hh", ",", "self", ".", "Ws_rz", ",", "self", ".", "Bs_h", ",", "self", ".", "Ws_init", ",", "self", ".", "Bs_init", ",", "\n", "self", ".", "Wu_in", ",", "self", ".", "Wu_hh", ",", "self", ".", "Wu_rz", ",", "self", ".", "Bu_h", "]", "\n", "full_params", "=", "[", "self", ".", "E_item", ",", "self", ".", "Wsy", ",", "self", ".", "By", "]", "\n", "\n", "", "if", "self", ".", "user_propagation_mode", "==", "'all'", ":", "\n", "            ", "params", ".", "append", "(", "self", ".", "Wu_to_s", ")", "\n", "", "sidxs", "=", "[", "X", ",", "Y", ",", "Y", "]", "\n", "if", "self", ".", "user_to_output", ":", "\n", "            ", "full_params", ".", "append", "(", "self", ".", "Wuy", ")", "\n", "sidxs", ".", "append", "(", "Y", ")", "\n", "\n", "", "updates", "=", "self", ".", "RMSprop", "(", "cost", ",", "params", ",", "full_params", ",", "sampled_params", ",", "sidxs", ")", "\n", "eval_updates", "=", "OrderedDict", "(", ")", "\n", "# Update the hidden states of the Session GRU", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "Hs", ")", ")", ":", "\n", "            ", "updates", "[", "self", ".", "Hs", "[", "i", "]", "]", "=", "Hs_new", "[", "i", "]", "\n", "eval_updates", "[", "self", ".", "Hs", "[", "i", "]", "]", "=", "Hs_new", "[", "i", "]", "\n", "# Update the hidden states of the User GRU", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "Hu", ")", ")", ":", "\n", "            ", "updates", "[", "self", ".", "Hu", "[", "i", "]", "]", "=", "Hu_new", "[", "i", "]", "\n", "eval_updates", "[", "self", ".", "Hu", "[", "i", "]", "]", "=", "Hu_new", "[", "i", "]", "\n", "\n", "# Compile the training and evaluation functions", "\n", "", "self", ".", "train_function", "=", "function", "(", "inputs", "=", "[", "X", ",", "Sstart", ",", "Ustart", ",", "Y", "]", ",", "outputs", "=", "cost", ",", "updates", "=", "updates", ",", "\n", "allow_input_downcast", "=", "True", ",", "\n", "on_unused_input", "=", "'warn'", ")", "\n", "self", ".", "eval_function", "=", "function", "(", "inputs", "=", "[", "X", ",", "Sstart", ",", "Ustart", ",", "Y", "]", ",", "outputs", "=", "cost", ",", "updates", "=", "eval_updates", ",", "\n", "allow_input_downcast", "=", "True", ",", "\n", "on_unused_input", "=", "'warn'", ")", "\n", "# Negative item sampling", "\n", "if", "self", ".", "n_sample", ":", "\n", "            ", "self", ".", "neg_sampler", "=", "Sampler", "(", "train_data", ",", "\n", "self", ".", "n_sample", ",", "\n", "rng", "=", "self", ".", "rng", ",", "\n", "item_key", "=", "self", ".", "item_key", ",", "\n", "sample_alpha", "=", "self", ".", "sample_alpha", ",", "\n", "sample_store", "=", "sample_store", ")", "\n", "# Training starts here", "\n", "", "best_valid", ",", "best_state", "=", "None", ",", "None", "\n", "my_patience", "=", "patience", "\n", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "n_epochs", "and", "my_patience", ">", "0", ":", "\n", "            ", "train_cost", "=", "self", ".", "iterate", "(", "train_data", ",", "self", ".", "train_function", ",", "offset_sessions", ",", "user_indptr", ")", "\n", "# self.print_state()", "\n", "if", "np", ".", "isnan", "(", "train_cost", ")", ":", "\n", "                ", "return", "\n", "", "if", "valid_data", "is", "not", "None", ":", "\n", "                ", "valid_cost", "=", "self", ".", "iterate", "(", "valid_data", ",", "self", ".", "eval_function", ",", "offset_sessions_valid", ",", "user_indptr_valid", ")", "\n", "if", "best_valid", "is", "None", "or", "valid_cost", "<", "best_valid", ":", "\n", "                    ", "best_valid", "=", "valid_cost", "\n", "best_state", "=", "self", ".", "save_state", "(", ")", "\n", "my_patience", "=", "patience", "\n", "", "elif", "valid_cost", ">=", "best_valid", "*", "margin", ":", "\n", "                    ", "my_patience", "-=", "1", "\n", "", "logger", ".", "info", "(", "\n", "'Epoch {} - train cost: {:.4f} - valid cost: {:.4f} (patience: {})'", ".", "format", "(", "epoch", ",", "\n", "train_cost", ",", "\n", "valid_cost", ",", "\n", "my_patience", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "'Epoch {} - train cost: {:.4f}'", ".", "format", "(", "epoch", ",", "train_cost", ")", ")", "\n", "", "epoch", "+=", "1", "\n", "", "if", "my_patience", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Early stopping condition met!'", ")", "\n", "", "if", "best_state", ":", "\n", "# always load the state associated with the best validation cost", "\n", "            ", "self", ".", "load_state", "(", "best_state", ")", "\n", "", "if", "save_to", ":", "\n", "            ", "if", "best_state", ":", "\n", "                ", "state", "=", "best_state", "\n", "", "else", ":", "\n", "                ", "state", "=", "self", ".", "save_state", "(", ")", "\n", "", "logger", ".", "info", "(", "'Saving model to: {}'", ".", "format", "(", "save_to", ")", ")", "\n", "pickle", ".", "dump", "(", "state", ",", "open", "(", "save_to", ",", "'wb'", ")", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.iterate": [[886, 963], ["len", "numpy.arange", "numpy.arange", "numpy.arange.max", "numpy.zeros", "numpy.zeros", "numpy.mean", "range", "range", "range", "len", "hgru4rec.HGRU4Rec.Hs[].set_value", "len", "hgru4rec.HGRU4Rec.Hu[].set_value", "fun", "numpy.zeros_like", "numpy.zeros_like", "c.append", "numpy.isnan", "numpy.arange", "numpy.arange", "numpy.zeros", "numpy.zeros", "hgru4rec.HGRU4Rec.neg_sampler.next_sample", "numpy.hstack", "logger.error", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.Sampler.next_sample"], ["", "", "def", "iterate", "(", "self", ",", "data", ",", "fun", ",", "offset_sessions", ",", "user_indptr", ",", "reset_state", "=", "True", ")", ":", "\n", "        ", "if", "reset_state", ":", "\n", "# Reset session layers", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "session_layers", ")", ")", ":", "\n", "                ", "self", ".", "Hs", "[", "i", "]", ".", "set_value", "(", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "session_layers", "[", "i", "]", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "\n", "borrow", "=", "True", ")", "\n", "# Reset user layers", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "user_layers", ")", ")", ":", "\n", "                ", "self", ".", "Hu", "[", "i", "]", ".", "set_value", "(", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "user_layers", "[", "i", "]", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "\n", "borrow", "=", "True", ")", "\n", "# variables to manage iterations over users", "\n", "", "", "n_users", "=", "len", "(", "user_indptr", ")", "\n", "offset_users", "=", "offset_sessions", "[", "user_indptr", "]", "\n", "user_idx_arr", "=", "np", ".", "arange", "(", "n_users", "-", "1", ")", "\n", "user_iters", "=", "np", ".", "arange", "(", "self", ".", "batch_size", ")", "\n", "user_maxiter", "=", "user_iters", ".", "max", "(", ")", "\n", "user_start", "=", "offset_users", "[", "user_idx_arr", "[", "user_iters", "]", "]", "\n", "user_end", "=", "offset_users", "[", "user_idx_arr", "[", "user_iters", "]", "+", "1", "]", "\n", "\n", "# variables to manage iterations over sessions", "\n", "session_iters", "=", "user_indptr", "[", "user_iters", "]", "\n", "session_start", "=", "offset_sessions", "[", "session_iters", "]", "\n", "session_end", "=", "offset_sessions", "[", "session_iters", "+", "1", "]", "\n", "\n", "sstart", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ustart", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "finished", "=", "False", "\n", "n", "=", "0", "\n", "c", "=", "[", "]", "\n", "while", "not", "finished", ":", "\n", "            ", "session_minlen", "=", "(", "session_end", "-", "session_start", ")", ".", "min", "(", ")", "\n", "out_idx", "=", "data", ".", "ItemIdx", ".", "values", "[", "session_start", "]", "\n", "for", "i", "in", "range", "(", "session_minlen", "-", "1", ")", ":", "\n", "                ", "in_idx", "=", "out_idx", "\n", "out_idx", "=", "data", ".", "ItemIdx", ".", "values", "[", "session_start", "+", "i", "+", "1", "]", "\n", "if", "self", ".", "n_sample", ":", "\n", "                    ", "sample", "=", "self", ".", "neg_sampler", ".", "next_sample", "(", ")", "\n", "y", "=", "np", ".", "hstack", "(", "[", "out_idx", ",", "sample", "]", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "out_idx", "\n", "", "cost", "=", "fun", "(", "in_idx", ",", "sstart", ",", "ustart", ",", "y", ")", "\n", "n", "+=", "1", "\n", "# reset sstart and ustart", "\n", "sstart", "=", "np", ".", "zeros_like", "(", "sstart", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ustart", "=", "np", ".", "zeros_like", "(", "ustart", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "c", ".", "append", "(", "cost", ")", "\n", "if", "np", ".", "isnan", "(", "cost", ")", ":", "\n", "                    ", "logger", ".", "error", "(", "'NaN error!'", ")", "\n", "self", ".", "error_during_train", "=", "True", "\n", "return", "\n", "", "", "session_start", "=", "session_start", "+", "session_minlen", "-", "1", "\n", "session_start_mask", "=", "np", ".", "arange", "(", "len", "(", "session_iters", ")", ")", "[", "(", "session_end", "-", "session_start", ")", "<=", "1", "]", "\n", "sstart", "[", "session_start_mask", "]", "=", "1", "\n", "for", "idx", "in", "session_start_mask", ":", "\n", "                ", "session_iters", "[", "idx", "]", "+=", "1", "\n", "if", "session_iters", "[", "idx", "]", "+", "1", ">=", "len", "(", "offset_sessions", ")", ":", "\n", "                    ", "finished", "=", "True", "\n", "break", "\n", "", "session_start", "[", "idx", "]", "=", "offset_sessions", "[", "session_iters", "[", "idx", "]", "]", "\n", "session_end", "[", "idx", "]", "=", "offset_sessions", "[", "session_iters", "[", "idx", "]", "+", "1", "]", "\n", "\n", "# reset the User hidden state at user change", "\n", "", "user_change_mask", "=", "np", ".", "arange", "(", "len", "(", "user_iters", ")", ")", "[", "(", "user_end", "-", "session_start", "<=", "0", ")", "]", "\n", "ustart", "[", "user_change_mask", "]", "=", "1", "\n", "for", "idx", "in", "user_change_mask", ":", "\n", "                ", "user_maxiter", "+=", "1", "\n", "if", "user_maxiter", "+", "1", ">=", "len", "(", "offset_users", ")", ":", "\n", "                    ", "finished", "=", "True", "\n", "break", "\n", "", "user_iters", "[", "idx", "]", "=", "user_maxiter", "\n", "user_start", "[", "idx", "]", "=", "offset_users", "[", "user_maxiter", "]", "\n", "user_end", "[", "idx", "]", "=", "offset_users", "[", "user_maxiter", "+", "1", "]", "\n", "session_iters", "[", "idx", "]", "=", "user_indptr", "[", "user_maxiter", "]", "\n", "session_start", "[", "idx", "]", "=", "offset_sessions", "[", "session_iters", "[", "idx", "]", "]", "\n", "session_end", "[", "idx", "]", "=", "offset_sessions", "[", "session_iters", "[", "idx", "]", "+", "1", "]", "\n", "", "", "avgc", "=", "np", ".", "mean", "(", "c", ")", "\n", "return", "avgc", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.predict_next_batch": [[964, 1033], ["session_ids.copy", "input_user_ids.copy", "theano.tensor.ivectors", "theano.tensor.fvectors", "range", "range", "collections.OrderedDict", "range", "range", "pandas.DataFrame", "pandas.DataFrame", "len", "hgru4rec.HGRU4Rec.Hs[].set_value", "len", "hgru4rec.HGRU4Rec.Hu[].set_value", "hgru4rec.HGRU4Rec.model", "hgru4rec.HGRU4Rec.model", "len", "len", "theano.function", "theano.function", "numpy.ones", "numpy.ones", "numpy.asarray", "numpy.asarray", "numpy.zeros", "numpy.zeros", "hgru4rec.HGRU4Rec.predict", "hgru4rec.HGRU4Rec.predict"], "methods", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.model", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.model"], ["", "def", "predict_next_batch", "(", "self", ",", "session_ids", ",", "input_item_ids", ",", "input_user_ids", ",", "\n", "predict_for_item_ids", "=", "None", ",", "batch", "=", "100", ")", ":", "\n", "        ", "'''\n        Gives predicton scores for a selected set of items. Can be used in batch mode to predict for multiple independent events (i.e. events of different sessions) at once and thus speed up evaluation.\n\n        If the session ID at a given coordinate of the session_ids parameter remains the same during subsequent calls of the function, the corresponding hidden state of the network will be kept intact (i.e. that's how one can predict an item to a session).\n        If it changes, the hidden state of the network is reset to zeros.\n\n        Parameters\n        --------\n        session_ids : 1D array\n            Contains the session IDs of the events of the batch. Its length must equal to the prediction batch size (batch param).\n        input_item_ids : 1D array\n            Contains the item IDs of the events of the batch. Every item ID must be must be in the training data of the network. Its length must equal to the prediction batch size (batch param).\n        input_user_ids : 1D array\n            Contains the user IDs of the events of the batch. Every user ID must be must be in the training data of the network. Its length must equal to the prediction batch size (batch param).\n        predict_for_item_ids : 1D array (optional)\n            IDs of items for which the network should give prediction scores. Every ID must be in the training set. The default value is None, which means that the network gives prediction on its every output (i.e. for all items in the training set).\n        batch : int\n            Prediction batch size.\n\n        Returns\n        --------\n        out : pandas.DataFrame\n            Prediction scores for selected items for every event of the batch.\n            Columns: events of the batch; rows: items. Rows are indexed by the item IDs.\n\n        '''", "\n", "if", "self", ".", "error_during_train", ":", "raise", "Exception", "\n", "if", "self", ".", "predict", "is", "None", "or", "self", ".", "predict_batch", "!=", "batch", ":", "\n", "            ", "X", ",", "Y", "=", "T", ".", "ivectors", "(", "2", ")", "\n", "Sstart", ",", "Ustart", "=", "T", ".", "fvectors", "(", "2", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "session_layers", ")", ")", ":", "\n", "                ", "self", ".", "Hs", "[", "i", "]", ".", "set_value", "(", "np", ".", "zeros", "(", "(", "batch", ",", "self", ".", "session_layers", "[", "i", "]", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "user_layers", ")", ")", ":", "\n", "                ", "self", ".", "Hu", "[", "i", "]", ".", "set_value", "(", "np", ".", "zeros", "(", "(", "batch", ",", "self", ".", "user_layers", "[", "i", "]", ")", ",", "dtype", "=", "theano", ".", "config", ".", "floatX", ")", ",", "borrow", "=", "True", ")", "\n", "", "if", "predict_for_item_ids", "is", "not", "None", ":", "\n", "                ", "Hs_new", ",", "Hu_new", ",", "yhat", ",", "_", "=", "self", ".", "model", "(", "X", ",", "Sstart", ",", "Ustart", ",", "self", ".", "Hs", ",", "self", ".", "Hu", ",", "Y", ")", "\n", "", "else", ":", "\n", "                ", "Hs_new", ",", "Hu_new", ",", "yhat", ",", "_", "=", "self", ".", "model", "(", "X", ",", "Sstart", ",", "Ustart", ",", "self", ".", "Hs", ",", "self", ".", "Hu", ")", "\n", "", "updatesH", "=", "OrderedDict", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "Hs", ")", ")", ":", "\n", "                ", "updatesH", "[", "self", ".", "Hs", "[", "i", "]", "]", "=", "Hs_new", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "Hu", ")", ")", ":", "\n", "                ", "updatesH", "[", "self", ".", "Hu", "[", "i", "]", "]", "=", "Hu_new", "[", "i", "]", "\n", "\n", "", "if", "predict_for_item_ids", "is", "not", "None", ":", "\n", "                ", "self", ".", "predict", "=", "function", "(", "inputs", "=", "[", "X", ",", "Sstart", ",", "Ustart", ",", "Y", "]", ",", "outputs", "=", "yhat", ",", "updates", "=", "updatesH", ",", "\n", "on_unused_input", "=", "'warn'", ",", "allow_input_downcast", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "predict", "=", "function", "(", "inputs", "=", "[", "X", ",", "Sstart", ",", "Ustart", "]", ",", "outputs", "=", "yhat", ",", "updates", "=", "updatesH", ",", "\n", "on_unused_input", "=", "'warn'", ",", "allow_input_downcast", "=", "True", ")", "\n", "", "self", ".", "current_session", "=", "np", ".", "ones", "(", "batch", ")", "*", "-", "1", "\n", "self", ".", "current_users", "=", "np", ".", "ones", "(", "batch", ")", "*", "-", "1", "\n", "self", ".", "predict_batch", "=", "batch", "\n", "\n", "", "session_change", "=", "session_ids", "!=", "self", ".", "current_session", "\n", "self", ".", "current_session", "=", "session_ids", ".", "copy", "(", ")", "\n", "user_change", "=", "input_user_ids", "!=", "self", ".", "current_users", "\n", "self", ".", "current_users", "=", "input_user_ids", ".", "copy", "(", ")", "\n", "\n", "in_idxs", "=", "self", ".", "itemidmap", "[", "input_item_ids", "]", "\n", "if", "predict_for_item_ids", "is", "not", "None", ":", "\n", "            ", "iIdxs", "=", "self", ".", "itemidmap", "[", "predict_for_item_ids", "]", "\n", "preds", "=", "np", ".", "asarray", "(", "self", ".", "predict", "(", "in_idxs", ",", "session_change", ",", "user_change", ",", "iIdxs", ")", ")", ".", "T", "\n", "return", "pd", ".", "DataFrame", "(", "data", "=", "preds", ",", "index", "=", "predict_for_item_ids", ")", "\n", "", "else", ":", "\n", "            ", "preds", "=", "np", ".", "asarray", "(", "self", ".", "predict", "(", "in_idxs", ",", "session_change", ",", "user_change", ")", ")", ".", "T", "\n", "return", "pd", ".", "DataFrame", "(", "data", "=", "preds", ",", "index", "=", "self", ".", "itemidmap", ".", "index", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.inspect": [[24, 26], ["tvar.get_value"], "function", ["None"], ["def", "inspect", "(", "tvar", ")", ":", "\n", "    ", "return", "tvar", ".", "get_value", "(", "borrow", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.print_norm": [[28, 30], ["logger.info", "numpy.linalg.norm", "hgru4rec.inspect"], "function", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.inspect"], ["", "def", "print_norm", "(", "tvar", ",", "name", "=", "'var'", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'{}: {:.4f}'", ".", "format", "(", "name", ",", "np", ".", "linalg", ".", "norm", "(", "inspect", "(", "tvar", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.evaluation.evaluate_sessions_batch": [[18, 166], ["test_data.sort_values", "numpy.zeros", "test_data.groupby().size().cumsum", "test_data.columns.values[].tolist", "numpy.arange().astype", "np.arange().astype.max", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.random.seed", "len", "print", "range", "pandas.DataFrame.from_records", "test_data[].nunique", "test_data.groupby().size", "len", "len", "numpy.arange", "valid_mask.sum", "pr.predict_next_batch.fillna", "rank_ok.sum", "len", "numpy.arange", "numpy.vstack", "numpy.unique", "pr.predict_next_batch", "pr.predict_next_batch", "numpy.vstack", "numpy.vstack", "rank_list.append", "len", "int", "logger.info", "test_data.groupby", "numpy.in1d", "numpy.array", "numpy.hstack", "numpy.random.rand", "numpy.diag", "numpy.vstack", "len", "numpy.diag", "numpy.in1d"], "function", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.predict_next_batch", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.predict_next_batch"], ["def", "evaluate_sessions_batch", "(", "pr", ",", "train_data", ",", "test_data", ",", "items", "=", "None", ",", "cut_off", "=", "20", ",", "batch_size", "=", "100", ",", "break_ties", "=", "False", ",", "\n", "output_rankings", "=", "False", ",", "\n", "session_key", "=", "'SessionId'", ",", "user_key", "=", "'UserId'", ",", "item_key", "=", "'ItemId'", ",", "time_key", "=", "'Time'", ")", ":", "\n", "    ", "\"\"\"\n    Evaluates the GRU4Rec network wrt. recommendation accuracy measured by recall@N and MRR@N.\n\n    Parameters\n    --------\n    pr : gru4rec.GRU4Rec\n        A trained instance of the GRU4Rec network.\n    train_data : pandas.DataFrame\n        Train data. It contains the transactions of the test set. It has one column for session IDs, one for item IDs\n        and one for the timestamp of the events (unix timestamps).\n        It must have a header. Column names are arbitrary, but must correspond to the keys you use in this function.\n        (Actually not used by this function, kept only for interface compatibility)\n    test_data : pandas.DataFrame\n        Test data. Same format of train_data.\n    items : 1D list or None\n        The list of item ID that you want to compare the score of the relevant item to.\n        If None, all items of the training set are used. Default value is None.\n    cut_off : int\n        Cut-off value (i.e. the length of the recommendation list; N for recall@N and MRR@N). Default value is 20.\n    batch_size : int\n        Number of events bundled into a batch during evaluation. Speeds up evaluation.\n        If it is set high, the memory consumption increases. Default value is 100.\n    break_ties : boolean\n        Whether to add a small random number to each prediction value in order to break up possible ties,\n        which can mess up the evaluation.\n        Defaults to False, because (1) GRU4Rec usually does not produce ties, except when the output saturates;\n        (2) it slows down the evaluation.\n        Set to True is you expect lots of ties.\n    output_rankings: boolean\n        If True, stores the predicted ranks of every event in test data into a Pandas DataFrame\n        that is returned by this function together with the metrics.\n        Notice that predictors models do not provide predictions for the first event in each session. (default: False)\n    session_key : string\n        Header of the session ID column in the input file (default: 'SessionId')\n    user_key : string\n        Header of the user ID column in the input file (default: 'UserId')\n    item_key : string\n        Header of the item ID column in the input file (default: 'ItemId')\n    time_key : string\n        Header of the timestamp column in the input file (default: 'Time')\n\n    Returns\n    --------\n    out : tuple\n        (Recall@N, MRR@N[, DataFrame with the detailed predicted ranks])\n\n    \"\"\"", "\n", "\n", "# In case someone would try to run with both items=None and not None on the same model", "\n", "# without realizing that the predict function needs to be replaced", "\n", "pr", ".", "predict", "=", "None", "\n", "test_data", ".", "sort_values", "(", "[", "session_key", ",", "time_key", "]", ",", "inplace", "=", "True", ")", "\n", "offset_sessions", "=", "np", ".", "zeros", "(", "test_data", "[", "session_key", "]", ".", "nunique", "(", ")", "+", "1", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "offset_sessions", "[", "1", ":", "]", "=", "test_data", ".", "groupby", "(", "session_key", ")", ".", "size", "(", ")", ".", "cumsum", "(", ")", "\n", "evalutation_point_count", "=", "0", "\n", "mrr", ",", "recall", "=", "0.0", ",", "0.0", "\n", "\n", "# get the other columns in the dataset", "\n", "columns", "=", "[", "user_key", ",", "session_key", ",", "item_key", "]", "\n", "other_columns", "=", "test_data", ".", "columns", ".", "values", "[", "np", ".", "in1d", "(", "test_data", ".", "columns", ".", "values", ",", "columns", ",", "invert", "=", "True", ")", "]", ".", "tolist", "(", ")", "\n", "\n", "if", "output_rankings", ":", "\n", "        ", "rank_list", "=", "[", "]", "\n", "\n", "", "if", "len", "(", "offset_sessions", ")", "-", "1", "<", "batch_size", ":", "\n", "        ", "batch_size", "=", "len", "(", "offset_sessions", ")", "-", "1", "\n", "", "iters", "=", "np", ".", "arange", "(", "batch_size", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "maxiter", "=", "iters", ".", "max", "(", ")", "\n", "start", "=", "offset_sessions", "[", "iters", "]", "\n", "end", "=", "offset_sessions", "[", "iters", "+", "1", "]", "\n", "in_item_id", "=", "np", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "in_user_id", "=", "np", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "in_session_id", "=", "np", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "42", ")", "\n", "perc", "=", "10", "\n", "session_cnt", "=", "0", "\n", "n_sessions", "=", "len", "(", "offset_sessions", ")", "\n", "while", "True", ":", "\n", "        ", "valid_mask", "=", "iters", ">=", "0", "\n", "if", "valid_mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "break", "\n", "", "start_valid", "=", "start", "[", "valid_mask", "]", "\n", "minlen", "=", "(", "end", "[", "valid_mask", "]", "-", "start_valid", ")", ".", "min", "(", ")", "\n", "in_item_id", "[", "valid_mask", "]", "=", "test_data", "[", "item_key", "]", ".", "values", "[", "start_valid", "]", "\n", "in_user_id", "[", "valid_mask", "]", "=", "test_data", "[", "user_key", "]", ".", "values", "[", "start_valid", "]", "if", "user_key", "is", "not", "None", "else", "-", "1", "\n", "in_session_id", "[", "valid_mask", "]", "=", "test_data", "[", "session_key", "]", ".", "values", "[", "start_valid", "]", "\n", "\n", "for", "i", "in", "range", "(", "minlen", "-", "1", ")", ":", "\n", "            ", "out_item_idx", "=", "test_data", "[", "item_key", "]", ".", "values", "[", "start_valid", "+", "i", "+", "1", "]", "\n", "if", "items", "is", "not", "None", ":", "\n", "                ", "uniq_out", "=", "np", ".", "unique", "(", "np", ".", "array", "(", "out_item_idx", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "preds", "=", "pr", ".", "predict_next_batch", "(", "iters", ",", "in_item_id", ",", "in_user_id", ",", "\n", "np", ".", "hstack", "(", "[", "items", ",", "uniq_out", "[", "~", "np", ".", "in1d", "(", "uniq_out", ",", "items", ")", "]", "]", ")", ",", "\n", "batch_size", ")", "\n", "", "else", ":", "\n", "                ", "preds", "=", "pr", ".", "predict_next_batch", "(", "iters", ",", "in_item_id", ",", "in_user_id", ",", "None", ",", "batch_size", ")", "\n", "", "if", "break_ties", ":", "\n", "                ", "preds", "+=", "np", ".", "random", ".", "rand", "(", "*", "preds", ".", "values", ".", "shape", ")", "*", "1e-8", "\n", "", "preds", ".", "fillna", "(", "0", ",", "inplace", "=", "True", ")", "\n", "in_item_id", "[", "valid_mask", "]", "=", "out_item_idx", "\n", "\n", "if", "items", "is", "not", "None", ":", "\n", "                ", "others", "=", "preds", ".", "ix", "[", "items", "]", ".", "values", ".", "T", "[", "valid_mask", "]", ".", "T", "\n", "targets", "=", "np", ".", "diag", "(", "preds", ".", "ix", "[", "in_item_id", "]", ".", "values", ")", "[", "valid_mask", "]", "\n", "ranks", "=", "(", "others", ">", "targets", ")", ".", "sum", "(", "axis", "=", "0", ")", "+", "1", "\n", "", "else", ":", "\n", "                ", "ranks", "=", "(", "preds", ".", "values", ".", "T", "[", "valid_mask", "]", ".", "T", ">", "np", ".", "diag", "(", "preds", ".", "ix", "[", "in_item_id", "]", ".", "values", ")", "[", "valid_mask", "]", ")", ".", "sum", "(", "\n", "axis", "=", "0", ")", "+", "1", "\n", "\n", "", "if", "output_rankings", ":", "\n", "                ", "eval_record", "=", "np", ".", "vstack", "(", "[", "in_user_id", "[", "valid_mask", "]", ",", "\n", "in_session_id", "[", "valid_mask", "]", ",", "\n", "in_item_id", "[", "valid_mask", "]", ",", "\n", "ranks", "]", ")", "\n", "others_record", "=", "np", ".", "vstack", "(", "[", "test_data", "[", "c", "]", ".", "values", "[", "start_valid", "+", "i", "+", "1", "]", "for", "c", "in", "other_columns", "]", ")", "\n", "batch_results", "=", "np", ".", "vstack", "(", "[", "eval_record", ",", "others_record", "]", ")", ".", "T", "\n", "rank_list", ".", "append", "(", "batch_results", ")", "\n", "\n", "", "rank_ok", "=", "ranks", "<=", "cut_off", "\n", "recall", "+=", "rank_ok", ".", "sum", "(", ")", "\n", "mrr", "+=", "(", "1.0", "/", "ranks", "[", "rank_ok", "]", ")", ".", "sum", "(", ")", "\n", "evalutation_point_count", "+=", "len", "(", "ranks", ")", "\n", "", "start", "=", "start", "+", "minlen", "-", "1", "\n", "mask", "=", "np", ".", "arange", "(", "len", "(", "iters", ")", ")", "[", "(", "valid_mask", ")", "&", "(", "end", "-", "start", "<=", "1", ")", "]", "\n", "for", "idx", "in", "mask", ":", "\n", "            ", "session_cnt", "+=", "1", "\n", "if", "session_cnt", ">", "int", "(", "perc", "*", "n_sessions", "/", "100", ")", ":", "\n", "                ", "logger", ".", "info", "(", "'Sessions {}/{} ({}% completed)'", ".", "format", "(", "session_cnt", ",", "n_sessions", ",", "perc", ")", ")", "\n", "perc", "+=", "10", "\n", "", "maxiter", "+=", "1", "\n", "if", "maxiter", ">=", "len", "(", "offset_sessions", ")", "-", "1", ":", "\n", "                ", "iters", "[", "idx", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "iters", "[", "idx", "]", "=", "maxiter", "\n", "start", "[", "idx", "]", "=", "offset_sessions", "[", "maxiter", "]", "\n", "end", "[", "idx", "]", "=", "offset_sessions", "[", "maxiter", "+", "1", "]", "\n", "", "", "", "print", "(", "evalutation_point_count", ")", "\n", "\n", "if", "output_rankings", ":", "\n", "        ", "columns", "=", "[", "user_key", ",", "session_key", ",", "item_key", ",", "'rank'", "]", "+", "other_columns", "\n", "df_ranks", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "np", ".", "vstack", "(", "rank_list", ")", ",", "columns", "=", "columns", ")", "\n", "return", "recall", "/", "evalutation_point_count", ",", "mrr", "/", "evalutation_point_count", ",", "df_ranks", "\n", "", "else", ":", "\n", "        ", "return", "recall", "/", "evalutation_point_count", ",", "mrr", "/", "evalutation_point_count", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.evaluation.evaluate_sessions_batch_hier_bootstrap": [[168, 370], ["test_data[].unique", "train_data[].copy", "pandas.concat", "pr.preprocess_data", "pd.concat.columns.values[].tolist", "test_data.columns.values[].tolist.remove", "numpy.arange().astype", "np.arange().astype.max", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.random.seed", "len", "[].drop_duplicates", "[].drop_duplicates.groupby().cumcount", "train_data[].copy", "numpy.logical_and", "range", "pandas.DataFrame.from_records", "len", "len", "numpy.arange", "np.logical_and.sum", "pr.predict_next_batch.fillna", "numpy.zeros", "numpy.any", "numpy.arange", "numpy.arange", "numpy.vstack", "[].drop_duplicates.groupby", "numpy.unique", "pr.predict_next_batch", "pr.predict_next_batch", "rank_ok.sum", "len", "len", "len", "len", "int", "logger.info", "len", "train_data[].isin", "train_data[].copy.sort_values", "numpy.in1d", "numpy.array", "numpy.hstack", "numpy.random.rand", "numpy.vstack", "rank_list.append", "train_data[].isin", "numpy.diag", "numpy.vstack", "numpy.in1d", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.preprocess_data", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.predict_next_batch", "home.repos.pwc.inspect_result.mquad_hgru4rec.src.hgru4rec.HGRU4Rec.predict_next_batch"], ["", "", "def", "evaluate_sessions_batch_hier_bootstrap", "(", "pr", ",", "train_data", ",", "test_data", ",", "items", "=", "None", ",", "cut_off", "=", "20", ",", "batch_size", "=", "100", ",", "\n", "break_ties", "=", "False", ",", "\n", "output_rankings", "=", "False", ",", "\n", "bootstrap_length", "=", "-", "1", ",", "\n", "session_key", "=", "'SessionId'", ",", "user_key", "=", "'UserId'", ",", "item_key", "=", "'ItemId'", ",", "\n", "time_key", "=", "'Time'", ")", ":", "\n", "    ", "\"\"\"\n    Evaluates the HGRU4Rec network wrt. recommendation accuracy measured by recall@N and MRR@N.\n    Concatenates train sessions to test sessions to bootstrap the hidden states of the HGRU.\n    The number of the last sessions of each user that are used in the bootstrapping is controlled by `bootstrap_length`.\n\n    Parameters\n    --------\n    pr : gru4rec.HGRU4Rec\n        A trained instance of the HGRU4Rec network.\n    train_data : pandas.DataFrame\n        Train data. It contains the transactions of the test set. It has one column for session IDs,\n        one for item IDs and one for the timestamp of the events (unix timestamps).\n        It must have a header. Column names are arbitrary, but must correspond to the keys you use in this function.\n    test_data : pandas.DataFrame\n        Test data. Same format of train_data.\n    items : 1D list or None\n        The list of item ID that you want to compare the score of the relevant item to.\n        If None, all items of the training set are used. Default value is None.\n    cut_off : int\n        Cut-off value (i.e. the length of the recommendation list; N for recall@N and MRR@N). Default value is 20.\n    batch_size : int\n        Number of events bundled into a batch during evaluation. Speeds up evaluation.\n         If it is set high, the memory consumption increases. Default value is 100.\n    break_ties : boolean\n        Whether to add a small random number to each prediction value in order to break up possible ties,\n        which can mess up the evaluation.\n        Defaults to False, because (1) GRU4Rec usually does not produce ties, except when the output saturates;\n        (2) it slows down the evaluation.\n        Set to True is you expect lots of ties.\n    output_rankings: boolean\n        If True, stores the predicted ranks of every event in test data into a Pandas DataFrame\n        that is returned by this function together with the metrics.\n        Notice that predictors models do not provide predictions for the first event in each session. (default: False)\n    bootstrap_length: int\n        Number of sessions in train data used to bootstrap the hidden state of the predictor,\n        starting from the last training session of each user.\n        If -1, consider all sessions. (default: -1)\n    session_key : string\n        Header of the session ID column in the input file (default: 'SessionId')\n    user_key : string\n        Header of the user ID column in the input file (default: 'UserId')\n    item_key : string\n        Header of the item ID column in the input file (default: 'ItemId')\n    time_key : string\n        Header of the timestamp column in the input file (default: 'Time')\n\n    Returns\n    --------\n    out : tuple\n        (Recall@N, MRR@N[, DataFrame with the detailed predicted ranks])\n\n    \"\"\"", "\n", "# In case someone would try to run with both items=None and not None on the same model", "\n", "# without realizing that the predict function needs to be replaced", "\n", "pr", ".", "predict", "=", "None", "\n", "\n", "# use the training sessions of the users in test_data to bootstrap the state of the user RNN", "\n", "test_users", "=", "test_data", "[", "user_key", "]", ".", "unique", "(", ")", "\n", "train_data", "=", "train_data", "[", "train_data", "[", "user_key", "]", ".", "isin", "(", "test_users", ")", "]", ".", "copy", "(", ")", "\n", "# select the bootstrap_length recent sessions in training data to bootstrap the hidden state of the predictor", "\n", "if", "bootstrap_length", ">=", "0", ":", "\n", "        ", "user_sessions", "=", "train_data", ".", "sort_values", "(", "by", "=", "[", "user_key", ",", "time_key", "]", ")", "[", "[", "user_key", ",", "session_key", "]", "]", ".", "drop_duplicates", "(", ")", "\n", "session_order", "=", "user_sessions", ".", "groupby", "(", "user_key", ",", "sort", "=", "False", ")", ".", "cumcount", "(", "ascending", "=", "False", ")", "\n", "last_sessions", "=", "user_sessions", "[", "session_order", "<", "bootstrap_length", "]", "[", "session_key", "]", "\n", "train_data", "=", "train_data", "[", "train_data", "[", "session_key", "]", ".", "isin", "(", "last_sessions", ")", "]", ".", "copy", "(", ")", "\n", "# concatenate training and test sessions", "\n", "", "train_data", "[", "'in_eval'", "]", "=", "False", "\n", "test_data", "[", "'in_eval'", "]", "=", "True", "\n", "test_data", "=", "pd", ".", "concat", "(", "[", "train_data", ",", "test_data", "]", ")", "\n", "# pre-process the session data", "\n", "user_indptr", ",", "offset_sessions", "=", "pr", ".", "preprocess_data", "(", "test_data", ")", "\n", "offset_users", "=", "offset_sessions", "[", "user_indptr", "]", "\n", "\n", "# get the other columns in the dataset", "\n", "columns", "=", "[", "user_key", ",", "session_key", ",", "item_key", "]", "\n", "other_columns", "=", "test_data", ".", "columns", ".", "values", "[", "np", ".", "in1d", "(", "test_data", ".", "columns", ".", "values", ",", "columns", ",", "invert", "=", "True", ")", "]", ".", "tolist", "(", ")", "\n", "other_columns", ".", "remove", "(", "'in_eval'", ")", "\n", "\n", "evalutation_point_count", "=", "0", "\n", "mrr", ",", "recall", "=", "0.0", ",", "0.0", "\n", "\n", "if", "output_rankings", ":", "\n", "        ", "rank_list", "=", "[", "]", "\n", "\n", "# here we use parallel minibatches over users", "\n", "", "if", "len", "(", "offset_users", ")", "-", "1", "<", "batch_size", ":", "\n", "        ", "batch_size", "=", "len", "(", "offset_users", ")", "-", "1", "\n", "\n", "# variables used to iterate over users", "\n", "", "user_iters", "=", "np", ".", "arange", "(", "batch_size", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "user_maxiter", "=", "user_iters", ".", "max", "(", ")", "\n", "user_start", "=", "offset_users", "[", "user_iters", "]", "\n", "user_end", "=", "offset_users", "[", "user_iters", "+", "1", "]", "\n", "\n", "# variables to manage iterations over sessions", "\n", "session_iters", "=", "user_indptr", "[", "user_iters", "]", "\n", "session_start", "=", "offset_sessions", "[", "session_iters", "]", "\n", "session_end", "=", "offset_sessions", "[", "session_iters", "+", "1", "]", "\n", "\n", "in_item_id", "=", "np", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "in_user_id", "=", "np", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "in_session_id", "=", "np", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "42", ")", "\n", "perc", "=", "10", "\n", "n_users", "=", "len", "(", "offset_users", ")", "\n", "user_cnt", "=", "0", "\n", "while", "True", ":", "\n", "# iterate only over the valid entries in the minibatch", "\n", "        ", "valid_mask", "=", "np", ".", "logical_and", "(", "user_iters", ">=", "0", ",", "session_iters", ">=", "0", ")", "\n", "if", "valid_mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "break", "\n", "\n", "", "session_start_valid", "=", "session_start", "[", "valid_mask", "]", "\n", "session_end_valid", "=", "session_end", "[", "valid_mask", "]", "\n", "session_minlen", "=", "(", "session_end_valid", "-", "session_start_valid", ")", ".", "min", "(", ")", "\n", "in_item_id", "[", "valid_mask", "]", "=", "test_data", "[", "item_key", "]", ".", "values", "[", "session_start_valid", "]", "\n", "in_user_id", "[", "valid_mask", "]", "=", "test_data", "[", "user_key", "]", ".", "values", "[", "session_start_valid", "]", "\n", "in_session_id", "[", "valid_mask", "]", "=", "test_data", "[", "session_key", "]", ".", "values", "[", "session_start_valid", "]", "\n", "\n", "for", "i", "in", "range", "(", "session_minlen", "-", "1", ")", ":", "\n", "            ", "out_item_idx", "=", "test_data", "[", "item_key", "]", ".", "values", "[", "session_start_valid", "+", "i", "+", "1", "]", "\n", "if", "items", "is", "not", "None", ":", "\n", "                ", "uniq_out", "=", "np", ".", "unique", "(", "np", ".", "array", "(", "out_item_idx", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "preds", "=", "pr", ".", "predict_next_batch", "(", "in_session_id", ",", "in_item_id", ",", "in_user_id", ",", "\n", "np", ".", "hstack", "(", "[", "items", ",", "uniq_out", "[", "~", "np", ".", "in1d", "(", "uniq_out", ",", "items", ")", "]", "]", ")", ",", "\n", "batch_size", ")", "\n", "", "else", ":", "\n", "                ", "preds", "=", "pr", ".", "predict_next_batch", "(", "in_session_id", ",", "in_item_id", ",", "in_user_id", ",", "None", ",", "batch_size", ")", "\n", "", "if", "break_ties", ":", "\n", "                ", "preds", "+=", "np", ".", "random", ".", "rand", "(", "*", "preds", ".", "values", ".", "shape", ")", "*", "1e-8", "\n", "\n", "", "preds", ".", "fillna", "(", "0", ",", "inplace", "=", "True", ")", "\n", "\n", "in_item_id", "[", "valid_mask", "]", "=", "out_item_idx", "\n", "in_eval_mask", "=", "np", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "in_eval_mask", "[", "valid_mask", "]", "=", "test_data", "[", "'in_eval'", "]", ".", "values", "[", "session_start_valid", "+", "i", "+", "1", "]", "\n", "\n", "if", "np", ".", "any", "(", "in_eval_mask", ")", ":", "\n", "                ", "if", "items", "is", "not", "None", ":", "\n", "                    ", "others", "=", "preds", ".", "ix", "[", "items", "]", ".", "values", ".", "T", "[", "in_eval_mask", "]", ".", "T", "\n", "targets", "=", "np", ".", "diag", "(", "preds", ".", "ix", "[", "in_item_id", "]", ".", "values", ")", "[", "in_eval_mask", "]", "\n", "ranks", "=", "(", "others", ">", "targets", ")", ".", "sum", "(", "axis", "=", "0", ")", "+", "1", "\n", "", "else", ":", "\n", "                    ", "ranks", "=", "(", "preds", ".", "values", ".", "T", "[", "in_eval_mask", "]", ".", "T", ">", "np", ".", "diag", "(", "preds", ".", "ix", "[", "in_item_id", "]", ".", "values", ")", "[", "in_eval_mask", "]", ")", ".", "sum", "(", "\n", "axis", "=", "0", ")", "+", "1", "\n", "", "if", "output_rankings", ":", "\n", "                    ", "session_start_eval", "=", "session_start", "[", "in_eval_mask", "]", "\n", "eval_record", "=", "[", "in_user_id", "[", "in_eval_mask", "]", ",", "# user id", "\n", "in_session_id", "[", "in_eval_mask", "]", ",", "# session id", "\n", "in_item_id", "[", "in_eval_mask", "]", ",", "# OUTPUT item id (see line 261)", "\n", "ranks", "]", "\n", "others_record", "=", "np", ".", "vstack", "(", "[", "test_data", "[", "c", "]", ".", "values", "[", "session_start_eval", "+", "i", "+", "1", "]", "for", "c", "in", "other_columns", "]", ")", "\n", "batch_results", "=", "np", ".", "vstack", "(", "[", "eval_record", ",", "others_record", "]", ")", ".", "T", "\n", "rank_list", ".", "append", "(", "batch_results", ")", "\n", "\n", "", "rank_ok", "=", "ranks", "<=", "cut_off", "\n", "recall", "+=", "rank_ok", ".", "sum", "(", ")", "\n", "mrr", "+=", "(", "1.0", "/", "ranks", "[", "rank_ok", "]", ")", ".", "sum", "(", ")", "\n", "evalutation_point_count", "+=", "len", "(", "ranks", ")", "\n", "\n", "", "", "session_start", "[", "valid_mask", "]", "=", "session_start", "[", "valid_mask", "]", "+", "session_minlen", "-", "1", "\n", "session_start_mask", "=", "np", ".", "arange", "(", "len", "(", "user_iters", ")", ")", "[", "valid_mask", "&", "(", "session_end", "-", "session_start", "<=", "1", ")", "]", "\n", "for", "idx", "in", "session_start_mask", ":", "\n", "            ", "session_iters", "[", "idx", "]", "+=", "1", "\n", "if", "session_iters", "[", "idx", "]", "+", "1", ">=", "len", "(", "offset_sessions", ")", ":", "\n", "                ", "session_iters", "[", "idx", "]", "=", "-", "1", "\n", "user_iters", "[", "idx", "]", "=", "-", "1", "\n", "break", "\n", "", "session_start", "[", "idx", "]", "=", "offset_sessions", "[", "session_iters", "[", "idx", "]", "]", "\n", "session_end", "[", "idx", "]", "=", "offset_sessions", "[", "session_iters", "[", "idx", "]", "+", "1", "]", "\n", "\n", "", "user_change_mask", "=", "np", ".", "arange", "(", "len", "(", "user_iters", ")", ")", "[", "valid_mask", "&", "(", "user_end", "-", "session_start", "<=", "0", ")", "]", "\n", "for", "idx", "in", "user_change_mask", ":", "\n", "            ", "user_cnt", "+=", "1", "\n", "if", "user_cnt", ">", "int", "(", "perc", "*", "n_users", "/", "100", ")", ":", "\n", "                ", "logger", ".", "info", "(", "'User {}/{} ({}% completed)'", ".", "format", "(", "user_cnt", ",", "n_users", ",", "perc", ")", ")", "\n", "perc", "+=", "10", "\n", "", "user_maxiter", "+=", "1", "\n", "if", "user_maxiter", "+", "1", ">=", "len", "(", "offset_users", ")", ":", "\n", "                ", "session_iters", "[", "idx", "]", "=", "-", "1", "\n", "user_iters", "[", "idx", "]", "=", "-", "1", "\n", "break", "\n", "", "user_iters", "[", "idx", "]", "=", "user_maxiter", "\n", "user_start", "[", "idx", "]", "=", "offset_users", "[", "user_maxiter", "]", "\n", "user_end", "[", "idx", "]", "=", "offset_users", "[", "user_maxiter", "+", "1", "]", "\n", "session_iters", "[", "idx", "]", "=", "user_indptr", "[", "user_maxiter", "]", "\n", "session_start", "[", "idx", "]", "=", "offset_sessions", "[", "session_iters", "[", "idx", "]", "]", "\n", "session_end", "[", "idx", "]", "=", "offset_sessions", "[", "session_iters", "[", "idx", "]", "+", "1", "]", "\n", "\n", "", "", "if", "output_rankings", ":", "\n", "        ", "columns", "=", "[", "user_key", ",", "session_key", ",", "item_key", ",", "'rank'", "]", "+", "other_columns", "\n", "df_ranks", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "np", ".", "vstack", "(", "rank_list", ")", ",", "columns", "=", "columns", ")", "\n", "return", "recall", "/", "evalutation_point_count", ",", "mrr", "/", "evalutation_point_count", ",", "df_ranks", "\n", "", "else", ":", "\n", "        ", "return", "recall", "/", "evalutation_point_count", ",", "mrr", "/", "evalutation_point_count", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.src.evaluation.evaluate_sessions": [[372, 458], ["test_data.sort_values", "train_data[].unique", "range", "len", "pandas.DataFrame.from_records", "pr.predict_next", "numpy.vstack", "numpy.in1d", "numpy.random.rand", "numpy.hstack", "numpy.isnan", "len", "rank_list.append", "rank_list.append"], "function", ["None"], ["", "", "def", "evaluate_sessions", "(", "pr", ",", "train_data", ",", "test_data", ",", "items", "=", "None", ",", "cut_off", "=", "20", ",", "output_rankings", "=", "False", ",", "session_key", "=", "'SessionId'", ",", "\n", "user_key", "=", "'UserId'", ",", "item_key", "=", "'ItemId'", ",", "time_key", "=", "'Time'", ")", ":", "\n", "    ", "\"\"\"\n    Evaluates the baselines wrt. recommendation accuracy measured by recall@N and MRR@N. Has no batch evaluation capabilities. Breaks up ties.\n\n    Parameters\n    --------\n    pr : baseline predictor\n        A trained instance of a baseline predictor.\n    train_data : pandas.DataFrame\n        Train data. It contains the transactions of the test set. It has one column for session IDs, one for item IDs and one for the timestamp of the events (unix timestamps).\n        It must have a header. Column names are arbitrary, but must correspond to the keys you use in this function.\n    test_data : pandas.DataFrame\n        Test data. Same format of train_data.\n    items : 1D list or None\n        The list of item ID that you want to compare the score of the relevant item to. If None, all items of the training set are used. Default value is None.\n    cut_off : int\n        Cut-off value (i.e. the length of the recommendation list; N for recall@N and MRR@N). Defauld value is 20.\n    output_rankings: boolean\n        If True, stores the predicted ranks of every event in test data into a Pandas DataFrame\n        that is returned by this function together with the metrics.\n        Notice that predictors models do not provide predictions for the first event in each session. (default: False)\n    session_key : string\n        Header of the session ID column in the input file (default: 'SessionId')\n    user_key : string\n        Header of the user ID column in the input file (default: 'UserId')\n    item_key : string\n        Header of the item ID column in the input file (default: 'ItemId')\n    time_key : string\n        Header of the timestamp column in the input file (default: 'Time')\n\n    Returns\n    --------\n    out : tuple\n        (Recall@N, MRR@N[, DataFrame with the detailed predicted ranks])\n\n    \"\"\"", "\n", "\n", "test_data", ".", "sort_values", "(", "[", "session_key", ",", "time_key", "]", ",", "inplace", "=", "True", ")", "\n", "items_to_predict", "=", "train_data", "[", "item_key", "]", ".", "unique", "(", ")", "\n", "evalutation_point_count", "=", "0", "\n", "prev_iid", ",", "prev_uid", ",", "prev_sid", "=", "-", "1", ",", "-", "1", ",", "-", "1", "\n", "mrr", ",", "recall", "=", "0.0", ",", "0.0", "\n", "\n", "if", "output_rankings", ":", "\n", "        ", "rank_list", "=", "[", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "test_data", ")", ")", ":", "\n", "        ", "sid", "=", "test_data", "[", "session_key", "]", ".", "values", "[", "i", "]", "\n", "iid", "=", "test_data", "[", "item_key", "]", ".", "values", "[", "i", "]", "\n", "uid", "=", "test_data", "[", "user_key", "]", ".", "values", "[", "i", "]", "if", "user_key", "is", "not", "None", "else", "-", "1", "\n", "if", "prev_sid", "!=", "sid", ":", "\n", "            ", "prev_sid", "=", "sid", "\n", "", "else", ":", "\n", "            ", "if", "items", "is", "not", "None", ":", "\n", "                ", "if", "np", ".", "in1d", "(", "iid", ",", "items", ")", ":", "\n", "                    ", "items_to_predict", "=", "items", "\n", "", "else", ":", "\n", "                    ", "items_to_predict", "=", "np", ".", "hstack", "(", "(", "[", "iid", "]", ",", "items", ")", ")", "\n", "", "", "preds", "=", "pr", ".", "predict_next", "(", "sid", ",", "prev_iid", ",", "prev_uid", ",", "items_to_predict", ")", "\n", "preds", "[", "np", ".", "isnan", "(", "preds", ")", "]", "=", "0", "\n", "preds", "+=", "1e-8", "*", "np", ".", "random", ".", "rand", "(", "len", "(", "preds", ")", ")", "# Breaking up ties", "\n", "rank", "=", "(", "preds", ">", "preds", "[", "iid", "]", ")", ".", "sum", "(", ")", "+", "1", "\n", "\n", "if", "output_rankings", ":", "\n", "                ", "if", "user_key", "is", "not", "None", ":", "\n", "                    ", "rank_list", ".", "append", "(", "(", "uid", ",", "sid", ",", "iid", ",", "rank", ")", ")", "\n", "", "else", ":", "\n", "                    ", "rank_list", ".", "append", "(", "(", "sid", ",", "iid", ",", "rank", ")", ")", "\n", "", "", "assert", "rank", ">", "0", "\n", "if", "rank", "<=", "cut_off", ":", "\n", "                ", "recall", "+=", "1", "\n", "mrr", "+=", "1.0", "/", "rank", "\n", "", "evalutation_point_count", "+=", "1", "\n", "", "prev_iid", "=", "iid", "\n", "prev_uid", "=", "uid", "\n", "\n", "", "if", "output_rankings", ":", "\n", "        ", "if", "user_key", "is", "not", "None", ":", "\n", "            ", "columns", "=", "[", "user_key", ",", "session_key", ",", "item_key", ",", "'rank'", "]", "\n", "", "else", ":", "\n", "            ", "columns", "=", "[", "session_key", ",", "item_key", ",", "'rank'", "]", "\n", "", "df_ranks", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "np", ".", "vstack", "(", "rank_list", ")", ",", "columns", "=", "columns", ")", "\n", "return", "recall", "/", "evalutation_point_count", ",", "mrr", "/", "evalutation_point_count", ",", "df_ranks", "\n", "", "else", ":", "\n", "        ", "return", "recall", "/", "evalutation_point_count", ",", "mrr", "/", "evalutation_point_count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mquad_hgru4rec.xing.build_dataset.remap_columns": [[6, 18], ["isinstance", "data[].unique", "pandas.Series", "numpy.arange", "len"], "function", ["None"], ["def", "remap_columns", "(", "data", ",", "columns", ")", ":", "\n", "    ", "\"\"\"Remap the values in each to the fields in `columns` to the range [0, number of unique values]\"\"\"", "\n", "maps", "=", "{", "}", "\n", "if", "not", "isinstance", "(", "columns", ",", "list", ")", ":", "\n", "        ", "columns", "=", "[", "columns", "]", "\n", "", "for", "c", "in", "columns", ":", "\n", "# remap column to the range (0:num_unique_values)", "\n", "        ", "uniques", "=", "data", "[", "c", "]", ".", "unique", "(", ")", "\n", "col_map", "=", "pd", ".", "Series", "(", "index", "=", "uniques", ",", "data", "=", "np", ".", "arange", "(", "len", "(", "uniques", ")", ")", ")", "\n", "data", "[", "c", "]", "=", "col_map", "[", "data", "[", "c", "]", "]", ".", "values", "\n", "maps", "[", "c", "]", "=", "col_map", "\n", "", "return", "data", ",", "maps", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.xing.build_dataset.make_sessions": [[20, 39], ["numpy.diff", "numpy.logical_or", "numpy.cumsum", "data.sort_values"], "function", ["None"], ["", "def", "make_sessions", "(", "data", ",", "session_th", "=", "30", "*", "60", ",", "is_ordered", "=", "False", ",", "user_key", "=", "'user_id'", ",", "item_key", "=", "'item_id'", ",", "time_key", "=", "'ts'", ")", ":", "\n", "    ", "\"\"\"Assigns session ids to the events in data without grouping keys\"\"\"", "\n", "if", "not", "is_ordered", ":", "\n", "# sort data by user and time", "\n", "        ", "data", ".", "sort_values", "(", "by", "=", "[", "user_key", ",", "time_key", "]", ",", "ascending", "=", "True", ",", "inplace", "=", "True", ")", "\n", "# compute the time difference between queries", "\n", "", "tdiff", "=", "np", ".", "diff", "(", "data", "[", "time_key", "]", ".", "values", ")", "\n", "# check which of them are bigger then session_th", "\n", "split_session", "=", "tdiff", ">", "session_th", "\n", "split_session", "=", "np", ".", "r_", "[", "True", ",", "split_session", "]", "\n", "# check when the user chenges is data", "\n", "new_user", "=", "data", "[", "'user_id'", "]", ".", "values", "[", "1", ":", "]", "!=", "data", "[", "'user_id'", "]", ".", "values", "[", ":", "-", "1", "]", "\n", "new_user", "=", "np", ".", "r_", "[", "True", ",", "new_user", "]", "\n", "# a new sessions stars when at least one of the two conditions is verified", "\n", "new_session", "=", "np", ".", "logical_or", "(", "new_user", ",", "split_session", ")", "\n", "# compute the session ids", "\n", "session_ids", "=", "np", ".", "cumsum", "(", "new_session", ")", "\n", "data", "[", "'session_id'", "]", "=", "session_ids", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.xing.build_dataset.write_dataset_to_hdf": [[41, 45], ["zip", "len", "len", "ds.to_hdf"], "function", ["None"], ["", "def", "write_dataset_to_hdf", "(", "filename", ",", "datasets", ",", "keys", "=", "[", "'train'", ",", "'test'", ",", "'valid_train'", ",", "'valid_test'", "]", ")", ":", "\n", "    ", "assert", "len", "(", "datasets", ")", "==", "len", "(", "keys", ")", "\n", "for", "ds", ",", "k", "in", "zip", "(", "datasets", ",", "keys", ")", ":", "\n", "        ", "ds", ".", "to_hdf", "(", "filename", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.xing.build_dataset.write_dict_to_hdf": [[47, 54], ["zip", "ds.to_hdf", "d.values"], "function", ["None"], ["", "", "def", "write_dict_to_hdf", "(", "filename", ",", "d", ",", "use_keys", "=", "None", ")", ":", "\n", "    ", "if", "use_keys", ":", "\n", "        ", "iterator", "=", "zip", "(", "use_keys", ",", "d", ".", "values", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "iterator", "=", "d", "\n", "", "for", "k", ",", "ds", "in", "iterator", ":", "\n", "        ", "ds", ".", "to_hdf", "(", "filename", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.xing.build_dataset.last_session_out_split": [[56, 79], ["sessions.last", "data[].copy", "data[].copy", "data.sort_values().groupby", "train[].unique", "test[].value_counts", "test[].copy", "data.sort_values", "test[].isin", "data.session_id.isin", "data.session_id.isin", "test[].isin"], "function", ["None"], ["", "", "def", "last_session_out_split", "(", "data", ",", "\n", "user_key", "=", "'user_id'", ",", "\n", "item_key", "=", "'item_id'", ",", "\n", "session_key", "=", "'session_id'", ",", "\n", "time_key", "=", "'ts'", ",", "\n", "clean_test", "=", "True", ",", "\n", "min_session_length", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    last-session-out split\n    assign the last session of every user to the test set and the remaining ones to the training set\n    \"\"\"", "\n", "sessions", "=", "data", ".", "sort_values", "(", "by", "=", "[", "user_key", ",", "time_key", "]", ")", ".", "groupby", "(", "user_key", ")", "[", "session_key", "]", "\n", "last_session", "=", "sessions", ".", "last", "(", ")", "\n", "train", "=", "data", "[", "~", "data", ".", "session_id", ".", "isin", "(", "last_session", ".", "values", ")", "]", ".", "copy", "(", ")", "\n", "test", "=", "data", "[", "data", ".", "session_id", ".", "isin", "(", "last_session", ".", "values", ")", "]", ".", "copy", "(", ")", "\n", "if", "clean_test", ":", "\n", "        ", "train_items", "=", "train", "[", "item_key", "]", ".", "unique", "(", ")", "\n", "test", "=", "test", "[", "test", "[", "item_key", "]", ".", "isin", "(", "train_items", ")", "]", "\n", "# \u00a0remove sessions in test shorter than min_session_length", "\n", "slen", "=", "test", "[", "session_key", "]", ".", "value_counts", "(", ")", "\n", "good_sessions", "=", "slen", "[", "slen", ">=", "min_session_length", "]", ".", "index", "\n", "test", "=", "test", "[", "test", "[", "session_key", "]", ".", "isin", "(", "good_sessions", ")", "]", ".", "copy", "(", ")", "\n", "", "return", "train", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.mquad_hgru4rec.xing.build_dataset.last_n_days_out_split": [[81, 107], ["data.sort_values", "[].agg", "data[].max", "data[].copy", "data[].copy", "train[].unique", "test[].value_counts", "test[].copy", "data.groupby", "test[].isin", "data.session_id.isin", "data.session_id.isin", "test[].isin"], "function", ["None"], ["", "def", "last_n_days_out_split", "(", "data", ",", "n", "=", "1", ",", "\n", "user_key", "=", "'user_id'", ",", "\n", "item_key", "=", "'item_id'", ",", "\n", "session_key", "=", "'session_id'", ",", "\n", "time_key", "=", "'ts'", ",", "\n", "clean_test", "=", "True", ",", "\n", "min_session_length", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    last n-days out split\n    assign the sessions in the last n days to the test set and remaining to the training one\n    \"\"\"", "\n", "DAY", "=", "24", "*", "60", "*", "60", "\n", "data", ".", "sort_values", "(", "by", "=", "[", "user_key", ",", "time_key", "]", ",", "inplace", "=", "True", ")", "\n", "sessions_start", "=", "data", ".", "groupby", "(", "session_key", ")", "[", "time_key", "]", ".", "agg", "(", "'min'", ")", "\n", "end_time", "=", "data", "[", "time_key", "]", ".", "max", "(", ")", "\n", "test_start", "=", "end_time", "-", "n", "*", "DAY", "\n", "train", "=", "data", "[", "data", ".", "session_id", ".", "isin", "(", "sessions_start", "[", "sessions_start", "<", "test_start", "]", ".", "index", ")", "]", ".", "copy", "(", ")", "\n", "test", "=", "data", "[", "data", ".", "session_id", ".", "isin", "(", "sessions_start", "[", "sessions_start", ">=", "test_start", "]", ".", "index", ")", "]", ".", "copy", "(", ")", "\n", "if", "clean_test", ":", "\n", "        ", "train_items", "=", "train", "[", "item_key", "]", ".", "unique", "(", ")", "\n", "test", "=", "test", "[", "test", "[", "item_key", "]", ".", "isin", "(", "train_items", ")", "]", "\n", "# \u00a0remove sessions in test shorter than min_session_length", "\n", "slen", "=", "test", "[", "session_key", "]", ".", "value_counts", "(", ")", "\n", "good_sessions", "=", "slen", "[", "slen", ">=", "min_session_length", "]", ".", "index", "\n", "test", "=", "test", "[", "test", "[", "session_key", "]", ".", "isin", "(", "good_sessions", ")", "]", ".", "copy", "(", ")", "\n", "", "return", "train", ",", "test", "\n", "\n"]]}