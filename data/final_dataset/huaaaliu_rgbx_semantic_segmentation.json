{"home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.None.config.add_path": [[86, 89], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "", "", "add_path", "(", "osp", ".", "join", "(", "C", ".", "root_dir", ")", ")", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.None.eval.SegEvaluator.func_per_iteration": [[22, 61], ["eval.SegEvaluator.sliding_eval_rgbX", "utils.metric.hist_info", "utils.pyt_utils.ensure_dir", "utils.pyt_utils.ensure_dir", "Image.fromarray", "get_class_colors", "list", "Image.fromarray.putpalette", "Image.fromarray.save", "cv2.imwrite", "logger.info", "numpy.zeros", "utils.visualize.show_img", "cv2.imshow", "cv2.waitKey", "eval.SegEvaluator.astype", "len", "os.path.join", "os.path.join", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.sliding_eval_rgbX", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.metric.hist_info", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.ensure_dir", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.ensure_dir", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset.get_class_colors", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.visualize.show_img"], ["    ", "def", "func_per_iteration", "(", "self", ",", "data", ",", "device", ")", ":", "\n", "        ", "img", "=", "data", "[", "'data'", "]", "\n", "label", "=", "data", "[", "'label'", "]", "\n", "modal_x", "=", "data", "[", "'modal_x'", "]", "\n", "name", "=", "data", "[", "'fn'", "]", "\n", "pred", "=", "self", ".", "sliding_eval_rgbX", "(", "img", ",", "modal_x", ",", "config", ".", "eval_crop_size", ",", "config", ".", "eval_stride_rate", ",", "device", ")", "\n", "hist_tmp", ",", "labeled_tmp", ",", "correct_tmp", "=", "hist_info", "(", "config", ".", "num_classes", ",", "pred", ",", "label", ")", "\n", "results_dict", "=", "{", "'hist'", ":", "hist_tmp", ",", "'labeled'", ":", "labeled_tmp", ",", "'correct'", ":", "correct_tmp", "}", "\n", "\n", "if", "self", ".", "save_path", "is", "not", "None", ":", "\n", "            ", "ensure_dir", "(", "self", ".", "save_path", ")", "\n", "ensure_dir", "(", "self", ".", "save_path", "+", "'_color'", ")", "\n", "\n", "fn", "=", "name", "+", "'.png'", "\n", "\n", "# save colored result", "\n", "result_img", "=", "Image", ".", "fromarray", "(", "pred", ".", "astype", "(", "np", ".", "uint8", ")", ",", "mode", "=", "'P'", ")", "\n", "class_colors", "=", "get_class_colors", "(", ")", "\n", "palette_list", "=", "list", "(", "np", ".", "array", "(", "class_colors", ")", ".", "flat", ")", "\n", "if", "len", "(", "palette_list", ")", "<", "768", ":", "\n", "                ", "palette_list", "+=", "[", "0", "]", "*", "(", "768", "-", "len", "(", "palette_list", ")", ")", "\n", "", "result_img", ".", "putpalette", "(", "palette_list", ")", "\n", "result_img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", "+", "'_color'", ",", "fn", ")", ")", "\n", "\n", "# save raw result", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "fn", ")", ",", "pred", ")", "\n", "logger", ".", "info", "(", "'Save the image '", "+", "fn", ")", "\n", "\n", "", "if", "self", ".", "show_image", ":", "\n", "            ", "colors", "=", "self", ".", "dataset", ".", "get_class_colors", "\n", "image", "=", "img", "\n", "clean", "=", "np", ".", "zeros", "(", "label", ".", "shape", ")", "\n", "comp_img", "=", "show_img", "(", "colors", ",", "config", ".", "background", ",", "image", ",", "clean", ",", "\n", "label", ",", "\n", "pred", ")", "\n", "cv2", ".", "imshow", "(", "'comp_image'", ",", "comp_img", ")", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "\n", "", "return", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.None.eval.SegEvaluator.compute_metric": [[62, 77], ["numpy.zeros", "utils.metric.compute_score", "utils.visualize.print_iou"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.metric.compute_score", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.visualize.print_iou"], ["", "def", "compute_metric", "(", "self", ",", "results", ")", ":", "\n", "        ", "hist", "=", "np", ".", "zeros", "(", "(", "config", ".", "num_classes", ",", "config", ".", "num_classes", ")", ")", "\n", "correct", "=", "0", "\n", "labeled", "=", "0", "\n", "count", "=", "0", "\n", "for", "d", "in", "results", ":", "\n", "            ", "hist", "+=", "d", "[", "'hist'", "]", "\n", "correct", "+=", "d", "[", "'correct'", "]", "\n", "labeled", "+=", "d", "[", "'labeled'", "]", "\n", "count", "+=", "1", "\n", "\n", "", "iou", ",", "mean_IoU", ",", "_", ",", "freq_IoU", ",", "mean_pixel_acc", ",", "pixel_acc", "=", "compute_score", "(", "hist", ",", "correct", ",", "labeled", ")", "\n", "result_line", "=", "print_iou", "(", "iou", ",", "freq_IoU", ",", "mean_pixel_acc", ",", "pixel_acc", ",", "\n", "dataset", ".", "class_names", ",", "show_no_back", "=", "False", ")", "\n", "return", "result_line", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.get_2dshape": [[12, 26], ["isinstance", "int", "map", "min"], "function", ["None"], ["def", "get_2dshape", "(", "shape", ",", "*", ",", "zero", "=", "True", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "shape", ",", "collections", ".", "Iterable", ")", ":", "\n", "        ", "shape", "=", "int", "(", "shape", ")", "\n", "shape", "=", "(", "shape", ",", "shape", ")", "\n", "", "else", ":", "\n", "        ", "h", ",", "w", "=", "map", "(", "int", ",", "shape", ")", "\n", "shape", "=", "(", "h", ",", "w", ")", "\n", "", "if", "zero", ":", "\n", "        ", "minv", "=", "0", "\n", "", "else", ":", "\n", "        ", "minv", "=", "1", "\n", "\n", "", "assert", "min", "(", "shape", ")", ">=", "minv", ",", "'invalid shape: {}'", ".", "format", "(", "shape", ")", "\n", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.random_crop_pad_to_shape": [[27, 43], ["transforms.get_2dshape", "transforms.pad_image_to_shape"], "function", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.get_2dshape", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.pad_image_to_shape"], ["", "def", "random_crop_pad_to_shape", "(", "img", ",", "crop_pos", ",", "crop_size", ",", "pad_label_value", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "start_crop_h", ",", "start_crop_w", "=", "crop_pos", "\n", "assert", "(", "(", "start_crop_h", "<", "h", ")", "and", "(", "start_crop_h", ">=", "0", ")", ")", "\n", "assert", "(", "(", "start_crop_w", "<", "w", ")", "and", "(", "start_crop_w", ">=", "0", ")", ")", "\n", "\n", "crop_size", "=", "get_2dshape", "(", "crop_size", ")", "\n", "crop_h", ",", "crop_w", "=", "crop_size", "\n", "\n", "img_crop", "=", "img", "[", "start_crop_h", ":", "start_crop_h", "+", "crop_h", ",", "\n", "start_crop_w", ":", "start_crop_w", "+", "crop_w", ",", "...", "]", "\n", "\n", "img_", ",", "margin", "=", "pad_image_to_shape", "(", "img_crop", ",", "crop_size", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "pad_label_value", ")", "\n", "\n", "return", "img_", ",", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.generate_random_crop_pos": [[44, 60], ["transforms.get_2dshape", "transforms.get_2dshape", "random.randint", "random.randint"], "function", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.get_2dshape", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.get_2dshape"], ["", "def", "generate_random_crop_pos", "(", "ori_size", ",", "crop_size", ")", ":", "\n", "    ", "ori_size", "=", "get_2dshape", "(", "ori_size", ")", "\n", "h", ",", "w", "=", "ori_size", "\n", "\n", "crop_size", "=", "get_2dshape", "(", "crop_size", ")", "\n", "crop_h", ",", "crop_w", "=", "crop_size", "\n", "\n", "pos_h", ",", "pos_w", "=", "0", ",", "0", "\n", "\n", "if", "h", ">", "crop_h", ":", "\n", "        ", "pos_h", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", "+", "1", ")", "\n", "\n", "", "if", "w", ">", "crop_w", ":", "\n", "        ", "pos_w", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", "+", "1", ")", "\n", "\n", "", "return", "pos_h", ",", "pos_w", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.pad_image_to_shape": [[61, 76], ["numpy.zeros", "transforms.get_2dshape", "cv2.copyMakeBorder", "cv2.BORDER_CONSTANT", "cv2.BORDER_CONSTANT"], "function", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.get_2dshape"], ["", "def", "pad_image_to_shape", "(", "img", ",", "shape", ",", "border_mode", ",", "value", ")", ":", "\n", "    ", "margin", "=", "np", ".", "zeros", "(", "4", ",", "np", ".", "uint32", ")", "\n", "shape", "=", "get_2dshape", "(", "shape", ")", "\n", "pad_height", "=", "shape", "[", "0", "]", "-", "img", ".", "shape", "[", "0", "]", "if", "shape", "[", "0", "]", "-", "img", ".", "shape", "[", "0", "]", ">", "0", "else", "0", "\n", "pad_width", "=", "shape", "[", "1", "]", "-", "img", ".", "shape", "[", "1", "]", "if", "shape", "[", "1", "]", "-", "img", ".", "shape", "[", "1", "]", ">", "0", "else", "0", "\n", "\n", "margin", "[", "0", "]", "=", "pad_height", "//", "2", "\n", "margin", "[", "1", "]", "=", "pad_height", "//", "2", "+", "pad_height", "%", "2", "\n", "margin", "[", "2", "]", "=", "pad_width", "//", "2", "\n", "margin", "[", "3", "]", "=", "pad_width", "//", "2", "+", "pad_width", "%", "2", "\n", "\n", "img", "=", "cv2", ".", "copyMakeBorder", "(", "img", ",", "margin", "[", "0", "]", ",", "margin", "[", "1", "]", ",", "margin", "[", "2", "]", ",", "margin", "[", "3", "]", ",", "\n", "border_mode", ",", "value", "=", "value", ")", "\n", "\n", "return", "img", ",", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.pad_image_size_to_multiples_of": [[77, 88], ["map", "transforms.pad_image_to_shape"], "function", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.pad_image_to_shape"], ["", "def", "pad_image_size_to_multiples_of", "(", "img", ",", "multiple", ",", "pad_value", ")", ":", "\n", "    ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "d", "=", "multiple", "\n", "\n", "def", "canonicalize", "(", "s", ")", ":", "\n", "        ", "v", "=", "s", "//", "d", "\n", "return", "(", "v", "+", "(", "v", "*", "d", "!=", "s", ")", ")", "*", "d", "\n", "\n", "", "th", ",", "tw", "=", "map", "(", "canonicalize", ",", "(", "h", ",", "w", ")", ")", "\n", "\n", "return", "pad_image_to_shape", "(", "img", ",", "(", "th", ",", "tw", ")", ",", "cv2", ".", "BORDER_CONSTANT", ",", "pad_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.resize_ensure_shortest_edge": [[89, 102], ["cv2.resize", "isinstance", "float", "max", "float", "max", "int", "int"], "function", ["None"], ["", "def", "resize_ensure_shortest_edge", "(", "img", ",", "edge_length", ",", "\n", "interpolation_mode", "=", "cv2", ".", "INTER_LINEAR", ")", ":", "\n", "    ", "assert", "isinstance", "(", "edge_length", ",", "int", ")", "and", "edge_length", ">", "0", ",", "edge_length", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "if", "h", "<", "w", ":", "\n", "        ", "ratio", "=", "float", "(", "edge_length", ")", "/", "h", "\n", "th", ",", "tw", "=", "edge_length", ",", "max", "(", "1", ",", "int", "(", "ratio", "*", "w", ")", ")", "\n", "", "else", ":", "\n", "        ", "ratio", "=", "float", "(", "edge_length", ")", "/", "w", "\n", "th", ",", "tw", "=", "max", "(", "1", ",", "int", "(", "ratio", "*", "h", ")", ")", ",", "edge_length", "\n", "", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "tw", ",", "th", ")", ",", "interpolation_mode", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.random_scale": [[103, 111], ["random.choice", "int", "int", "cv2.resize", "cv2.resize"], "function", ["None"], ["", "def", "random_scale", "(", "img", ",", "gt", ",", "scales", ")", ":", "\n", "    ", "scale", "=", "random", ".", "choice", "(", "scales", ")", "\n", "sh", "=", "int", "(", "img", ".", "shape", "[", "0", "]", "*", "scale", ")", "\n", "sw", "=", "int", "(", "img", ".", "shape", "[", "1", "]", "*", "scale", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "gt", "=", "cv2", ".", "resize", "(", "gt", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "return", "img", ",", "gt", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.random_scale_rgbx": [[112, 121], ["random.choice", "int", "int", "cv2.resize", "cv2.resize", "cv2.resize"], "function", ["None"], ["", "def", "random_scale_rgbx", "(", "img", ",", "gt", ",", "modal_x", ",", "scales", ")", ":", "\n", "    ", "scale", "=", "random", ".", "choice", "(", "scales", ")", "\n", "sh", "=", "int", "(", "img", ".", "shape", "[", "0", "]", "*", "scale", ")", "\n", "sw", "=", "int", "(", "img", ".", "shape", "[", "1", "]", "*", "scale", ")", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "gt", "=", "cv2", ".", "resize", "(", "gt", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "modal_x", "=", "cv2", ".", "resize", "(", "modal_x", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "img", ",", "gt", ",", "modal_x", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.random_scale_with_length": [[122, 130], ["random.choice", "cv2.resize", "cv2.resize"], "function", ["None"], ["", "def", "random_scale_with_length", "(", "img", ",", "gt", ",", "length", ")", ":", "\n", "    ", "size", "=", "random", ".", "choice", "(", "length", ")", "\n", "sh", "=", "size", "\n", "sw", "=", "size", "\n", "img", "=", "cv2", ".", "resize", "(", "img", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "gt", "=", "cv2", ".", "resize", "(", "gt", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "return", "img", ",", "gt", ",", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.random_mirror": [[131, 137], ["random.random", "cv2.flip", "cv2.flip"], "function", ["None"], ["", "def", "random_mirror", "(", "img", ",", "gt", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", ">=", "0.5", ":", "\n", "        ", "img", "=", "cv2", ".", "flip", "(", "img", ",", "1", ")", "\n", "gt", "=", "cv2", ".", "flip", "(", "gt", ",", "1", ")", "\n", "\n", "", "return", "img", ",", "gt", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.random_rotation": [[138, 146], ["cv2.getRotationMatrix2D", "cv2.warpAffine", "cv2.warpAffine", "random.random"], "function", ["None"], ["", "def", "random_rotation", "(", "img", ",", "gt", ")", ":", "\n", "    ", "angle", "=", "random", ".", "random", "(", ")", "*", "20", "-", "10", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "rotation_matrix", "=", "cv2", ".", "getRotationMatrix2D", "(", "(", "w", "/", "2", ",", "h", "/", "2", ")", ",", "angle", ",", "1", ")", "\n", "img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "rotation_matrix", ",", "(", "w", ",", "h", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "gt", "=", "cv2", ".", "warpAffine", "(", "gt", ",", "rotation_matrix", ",", "(", "w", ",", "h", ")", ",", "flags", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "return", "img", ",", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.random_gaussian_blur": [[147, 154], ["random.choice", "cv2.GaussianBlur"], "function", ["None"], ["", "def", "random_gaussian_blur", "(", "img", ")", ":", "\n", "    ", "gauss_size", "=", "random", ".", "choice", "(", "[", "1", ",", "3", ",", "5", ",", "7", "]", ")", "\n", "if", "gauss_size", ">", "1", ":", "\n", "# do the gaussian blur", "\n", "        ", "img", "=", "cv2", ".", "GaussianBlur", "(", "img", ",", "(", "gauss_size", ",", "gauss_size", ")", ",", "0", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.center_crop": [[155, 160], ["None"], "function", ["None"], ["", "def", "center_crop", "(", "img", ",", "shape", ")", ":", "\n", "    ", "h", ",", "w", "=", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", "\n", "y", "=", "(", "img", ".", "shape", "[", "0", "]", "-", "h", ")", "//", "2", "\n", "x", "=", "(", "img", ".", "shape", "[", "1", "]", "-", "w", ")", "//", "2", "\n", "return", "img", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.random_crop": [[161, 181], ["isinstance", "random.randint", "random.randint", "int", "int"], "function", ["None"], ["", "def", "random_crop", "(", "img", ",", "gt", ",", "size", ")", ":", "\n", "    ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "        ", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "        ", "size", "=", "size", "\n", "\n", "", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "crop_h", ",", "crop_w", "=", "size", "[", "0", "]", ",", "size", "[", "1", "]", "\n", "\n", "if", "h", ">", "crop_h", ":", "\n", "        ", "x", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_h", "+", "1", ")", "\n", "img", "=", "img", "[", "x", ":", "x", "+", "crop_h", ",", ":", ",", ":", "]", "\n", "gt", "=", "gt", "[", "x", ":", "x", "+", "crop_h", ",", ":", "]", "\n", "\n", "", "if", "w", ">", "crop_w", ":", "\n", "        ", "x", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_w", "+", "1", ")", "\n", "img", "=", "img", "[", ":", ",", "x", ":", "x", "+", "crop_w", ",", ":", "]", "\n", "gt", "=", "gt", "[", ":", ",", "x", ":", "x", "+", "crop_w", "]", "\n", "\n", "", "return", "img", ",", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.normalize": [[182, 188], ["img.astype"], "function", ["None"], ["", "def", "normalize", "(", "img", ",", "mean", ",", "std", ")", ":", "\n", "# pytorch pretrained model need the input range: 0-1", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "/", "255.0", "\n", "img", "=", "img", "-", "mean", "\n", "img", "=", "img", "/", "std", "\n", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.init_func.__init_weight": [[10, 20], ["feature.named_modules", "isinstance", "conv_init", "isinstance", "torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["def", "__init_weight", "(", "feature", ",", "conv_init", ",", "norm_layer", ",", "bn_eps", ",", "bn_momentum", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "for", "name", ",", "m", "in", "feature", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv1d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ")", ")", ":", "\n", "            ", "conv_init", "(", "m", ".", "weight", ",", "**", "kwargs", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "norm_layer", ")", ":", "\n", "            ", "m", ".", "eps", "=", "bn_eps", "\n", "m", ".", "momentum", "=", "bn_momentum", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.init_func.init_weight": [[22, 31], ["isinstance", "init_func.__init_weight", "init_func.__init_weight"], "function", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.init_func.__init_weight", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.init_func.__init_weight"], ["", "", "", "def", "init_weight", "(", "module_list", ",", "conv_init", ",", "norm_layer", ",", "bn_eps", ",", "bn_momentum", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "if", "isinstance", "(", "module_list", ",", "list", ")", ":", "\n", "        ", "for", "feature", "in", "module_list", ":", "\n", "            ", "__init_weight", "(", "feature", ",", "conv_init", ",", "norm_layer", ",", "bn_eps", ",", "bn_momentum", ",", "\n", "**", "kwargs", ")", "\n", "", "", "else", ":", "\n", "        ", "__init_weight", "(", "module_list", ",", "conv_init", ",", "norm_layer", ",", "bn_eps", ",", "bn_momentum", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.init_func.group_weight": [[33, 59], ["module.modules", "weight_group.append", "weight_group.append", "isinstance", "len", "dict", "dict", "group_decay.append", "isinstance", "list", "len", "len", "group_no_decay.append", "group_decay.append", "module.parameters", "group_no_decay.append", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "group_no_decay.append", "group_no_decay.append", "group_decay.append"], "function", ["None"], ["", "", "def", "group_weight", "(", "weight_group", ",", "module", ",", "norm_layer", ",", "lr", ")", ":", "\n", "    ", "group_decay", "=", "[", "]", "\n", "group_no_decay", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "group_decay", ".", "append", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "group_no_decay", ".", "append", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv1d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Conv3d", ",", "nn", ".", "ConvTranspose2d", ",", "nn", ".", "ConvTranspose3d", ")", ")", ":", "\n", "            ", "group_decay", ".", "append", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "group_no_decay", ".", "append", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "norm_layer", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "                ", "group_no_decay", ".", "append", "(", "m", ".", "weight", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "group_no_decay", ".", "append", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Parameter", ")", ":", "\n", "            ", "group_decay", ".", "append", "(", "m", ")", "\n", "\n", "", "", "assert", "len", "(", "list", "(", "module", ".", "parameters", "(", ")", ")", ")", ">=", "len", "(", "group_decay", ")", "+", "len", "(", "group_no_decay", ")", "\n", "weight_group", ".", "append", "(", "dict", "(", "params", "=", "group_decay", ",", "lr", "=", "lr", ")", ")", "\n", "weight_group", ".", "append", "(", "dict", "(", "params", "=", "group_no_decay", ",", "weight_decay", "=", ".0", ",", "lr", "=", "lr", ")", ")", "\n", "return", "weight_group", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.loss_opr.FocalLoss2d.__init__": [[13, 21], ["torch.Module.__init__", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "0", ",", "weight", "=", "None", ",", "reduction", "=", "'mean'", ",", "ignore_index", "=", "255", ")", ":", "\n", "        ", "super", "(", "FocalLoss2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "if", "weight", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "NLLLoss", "(", "weight", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "weight", ")", ")", ".", "float", "(", ")", ",", "\n", "reduction", "=", "reduction", ",", "ignore_index", "=", "ignore_index", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "NLLLoss", "(", "reduction", "=", "reduction", ",", "ignore_index", "=", "ignore_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.loss_opr.FocalLoss2d.forward": [[22, 24], ["loss_opr.FocalLoss2d.loss", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "loss", "(", "(", "1", "-", "F", ".", "softmax", "(", "input", ",", "1", ")", ")", "**", "2", "*", "F", ".", "log_softmax", "(", "input", ",", "1", ")", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.loss_opr.RCELoss.__init__": [[27, 35], ["torch.Module.__init__", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_index", "=", "255", ",", "reduction", "=", "'mean'", ",", "weight", "=", "None", ",", "class_num", "=", "37", ",", "beta", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "RCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "ignore_label", "=", "ignore_index", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "criterion", "=", "nn", ".", "NLLLoss", "(", "reduction", "=", "reduction", ",", "ignore_index", "=", "ignore_index", ",", "weight", "=", "weight", ")", "\n", "self", ".", "criterion2", "=", "nn", ".", "NLLLoss", "(", "reduction", "=", "'none'", ",", "ignore_index", "=", "ignore_index", ",", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.loss_opr.RCELoss.forward": [[36, 62], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "target.view", "target.view.ne().float", "torch.zeros().cuda().scatter_", "torch.zeros().cuda().scatter_", "torch.zeros().cuda().scatter_", "torch.zeros().cuda().scatter_", "torch.zeros().cuda().scatter_", "torch.zeros().cuda().scatter_", "torch.zeros().cuda().scatter_", "torch.zeros().cuda().scatter_", "torch.zeros().cuda().scatter_", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "loss_opr.RCELoss.criterion", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "loss_opr.RCELoss.criterion2", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "target.view.ne", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "target.view.float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "pred", ".", "shape", "\n", "max_pred", ",", "max_id", "=", "torch", ".", "max", "(", "pred", ",", "dim", "=", "1", ")", "# pred (b, h, w)", "\n", "target_flat", "=", "target", ".", "view", "(", "b", ",", "1", ",", "h", ",", "w", ")", "\n", "mask", "=", "(", "target_flat", ".", "ne", "(", "self", ".", "ignore_label", ")", ")", ".", "float", "(", ")", "\n", "target_flat", "=", "(", "mask", "*", "target_flat", ".", "float", "(", ")", ")", ".", "long", "(", ")", "\n", "# convert to onehot", "\n", "label_pred", "=", "torch", ".", "zeros", "(", "b", ",", "self", ".", "class_num", ",", "h", ",", "w", ")", ".", "cuda", "(", ")", ".", "scatter_", "(", "1", ",", "target_flat", ",", "1", ")", "\n", "# print(label_pred.shape, max_id.shape)", "\n", "\n", "prob", "=", "torch", ".", "exp", "(", "pred", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "prob", ",", "dim", "=", "1", ")", "# i add this", "\n", "\n", "weighted_pred", "=", "F", ".", "log_softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "loss1", "=", "self", ".", "criterion", "(", "weighted_pred", ",", "target", ")", "\n", "\n", "label_pred", "=", "torch", ".", "clamp", "(", "label_pred", ",", "min", "=", "1e-9", ",", "max", "=", "1.0", "-", "1e-9", ")", "\n", "\n", "label_pred", "=", "torch", ".", "log", "(", "label_pred", ")", "\n", "loss2", "=", "self", ".", "criterion2", "(", "label_pred", ",", "max_id", ")", "\n", "loss2", "=", "torch", ".", "mean", "(", "loss2", "*", "mask", ")", "\n", "# print(loss1, loss2)", "\n", "loss", "=", "loss1", "+", "self", ".", "beta", "*", "loss2", "\n", "# print(loss1, loss2)", "\n", "# print(loss)", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.loss_opr.BalanceLoss.__init__": [[64, 69], ["torch.Module.__init__", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_index", "=", "255", ",", "reduction", "=", "'mean'", ",", "weight", "=", "None", ")", ":", "\n", "        ", "super", "(", "BalanceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_label", "=", "ignore_index", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "criterion", "=", "nn", ".", "NLLLoss", "(", "reduction", "=", "reduction", ",", "ignore_index", "=", "ignore_index", ",", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.loss_opr.BalanceLoss.forward": [[70, 81], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.softmax", "torch.softmax", "torch.softmax", "loss_opr.BalanceLoss.criterion", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "# prob = torch.exp(pred)", "\n", "# # prob = F.softmax(prob, dim=1)      # i add this", "\n", "# weighted_pred = pred * (1 - prob) ** 2", "\n", "# loss = self.criterion(weighted_pred, target)", "\n", "\n", "        ", "prob", "=", "torch", ".", "exp", "(", "pred", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "prob", ",", "dim", "=", "1", ")", "# i add this", "\n", "weighted_pred", "=", "F", ".", "log_softmax", "(", "pred", ",", "dim", "=", "1", ")", "*", "(", "1", "-", "prob", ")", "**", "2", "\n", "loss", "=", "self", ".", "criterion", "(", "weighted_pred", ",", "target", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.loss_opr.berHuLoss.__init__": [[83, 88], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "delta", "=", "0.2", ",", "ignore_index", "=", "0", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "berHuLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.loss_opr.berHuLoss.forward": [[89, 102], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "target.eq", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt", "torch.gt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "valid_mask", "=", "(", "1", "-", "target", ".", "eq", "(", "self", ".", "ignore_index", ")", ")", ".", "float", "(", ")", "\n", "valid_delta", "=", "torch", ".", "abs", "(", "pred", "-", "target", ")", "*", "valid_mask", "\n", "max_delta", "=", "torch", ".", "max", "(", "valid_delta", ")", "\n", "delta", "=", "self", ".", "delta", "*", "max_delta", "\n", "\n", "f_mask", "=", "(", "1", "-", "torch", ".", "gt", "(", "target", ",", "delta", ")", ")", ".", "float", "(", ")", "*", "valid_mask", "\n", "s_mask", "=", "(", "1", "-", "f_mask", ")", "*", "valid_mask", "\n", "f_delta", "=", "valid_delta", "*", "f_mask", "\n", "s_delta", "=", "(", "(", "valid_delta", "**", "2", ")", "+", "delta", "**", "2", ")", "/", "(", "2", "*", "delta", ")", "*", "s_mask", "\n", "\n", "loss", "=", "torch", ".", "mean", "(", "f_delta", "+", "s_delta", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.loss_opr.SigmoidFocalLoss.__init__": [[105, 112], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_label", ",", "gamma", "=", "2.0", ",", "alpha", "=", "0.25", ",", "\n", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "SigmoidFocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.loss_opr.SigmoidFocalLoss.forward": [[113, 135], ["target.view().float.view().float.size", "pred.view.view.view", "pred.view.view.sigmoid", "target.view().float.view().float.view().float", "target.view().float.view().float.ne().float", "target.view().float.view().float.view", "loss.mean.mean.mean", "target.view().float.view().float.view", "target.view().float.view().float.ne"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "b", ",", "h", ",", "w", "=", "target", ".", "size", "(", ")", "\n", "pred", "=", "pred", ".", "view", "(", "b", ",", "-", "1", ",", "1", ")", "\n", "pred_sigmoid", "=", "pred", ".", "sigmoid", "(", ")", "\n", "target", "=", "target", ".", "view", "(", "b", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "mask", "=", "(", "target", ".", "ne", "(", "self", ".", "ignore_label", ")", ")", ".", "float", "(", ")", "\n", "target", "=", "mask", "*", "target", "\n", "onehot", "=", "target", ".", "view", "(", "b", ",", "-", "1", ",", "1", ")", "\n", "\n", "max_val", "=", "(", "-", "pred_sigmoid", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "\n", "pos_part", "=", "(", "1", "-", "pred_sigmoid", ")", "**", "self", ".", "gamma", "*", "(", "\n", "pred_sigmoid", "-", "pred_sigmoid", "*", "onehot", ")", "\n", "neg_part", "=", "pred_sigmoid", "**", "self", ".", "gamma", "*", "(", "max_val", "+", "(", "\n", "(", "-", "max_val", ")", ".", "exp", "(", ")", "+", "(", "-", "pred_sigmoid", "-", "max_val", ")", ".", "exp", "(", ")", ")", ".", "log", "(", ")", ")", "\n", "\n", "loss", "=", "-", "(", "self", ".", "alpha", "*", "pos_part", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "neg_part", ")", ".", "sum", "(", "\n", "dim", "=", "-", "1", ")", "*", "mask", "\n", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "            ", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.loss_opr.ProbOhemCrossEntropy2d.__init__": [[138, 156], ["torch.Module.__init__", "float", "int", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_label", ",", "reduction", "=", "'mean'", ",", "thresh", "=", "0.6", ",", "min_kept", "=", "256", ",", "\n", "down_ratio", "=", "1", ",", "use_weight", "=", "False", ")", ":", "\n", "        ", "super", "(", "ProbOhemCrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "thresh", "=", "float", "(", "thresh", ")", "\n", "self", ".", "min_kept", "=", "int", "(", "min_kept", ")", "\n", "self", ".", "down_ratio", "=", "down_ratio", "\n", "if", "use_weight", ":", "\n", "            ", "weight", "=", "torch", ".", "FloatTensor", "(", "\n", "[", "0.8373", ",", "0.918", ",", "0.866", ",", "1.0345", ",", "1.0166", ",", "0.9969", ",", "0.9754", ",", "1.0489", ",", "\n", "0.8786", ",", "1.0023", ",", "0.9539", ",", "0.9843", ",", "1.1116", ",", "0.9037", ",", "1.0865", ",", "1.0955", ",", "\n", "1.0865", ",", "1.1529", ",", "1.0507", "]", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "reduction", ",", "\n", "weight", "=", "weight", ",", "\n", "ignore_index", "=", "ignore_label", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "reduction", ",", "\n", "ignore_index", "=", "ignore_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.loss_opr.ProbOhemCrossEntropy2d.forward": [[157, 188], ["pred.size", "target.view.view.view", "target.view.view.ne", "target.view.ne.sum", "torch.softmax", "torch.softmax", "torch.softmax", "prob.masked_fill_.masked_fill_.transpose().reshape", "target.view.view.masked_fill_", "target.view.view.view", "loss_opr.ProbOhemCrossEntropy2d.criterion", "target.view.ne.long", "logger.info", "prob.masked_fill_.masked_fill_.transpose", "prob.masked_fill_.masked_fill_.masked_fill_", "mask_prob.argsort", "mask_prob.le", "mask_prob.le.long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "min", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "pred", ".", "size", "(", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "valid_mask", "=", "target", ".", "ne", "(", "self", ".", "ignore_label", ")", "\n", "target", "=", "target", "*", "valid_mask", ".", "long", "(", ")", "\n", "num_valid", "=", "valid_mask", ".", "sum", "(", ")", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "prob", "=", "(", "prob", ".", "transpose", "(", "0", ",", "1", ")", ")", ".", "reshape", "(", "c", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "min_kept", ">", "num_valid", ":", "\n", "            ", "logger", ".", "info", "(", "'Labels: {}'", ".", "format", "(", "num_valid", ")", ")", "\n", "", "elif", "num_valid", ">", "0", ":", "\n", "            ", "prob", "=", "prob", ".", "masked_fill_", "(", "1", "-", "valid_mask", ",", "1", ")", "\n", "mask_prob", "=", "prob", "[", "\n", "target", ",", "torch", ".", "arange", "(", "len", "(", "target", ")", ",", "dtype", "=", "torch", ".", "long", ")", "]", "\n", "threshold", "=", "self", ".", "thresh", "\n", "if", "self", ".", "min_kept", ">", "0", ":", "\n", "                ", "index", "=", "mask_prob", ".", "argsort", "(", ")", "\n", "threshold_index", "=", "index", "[", "min", "(", "len", "(", "index", ")", ",", "self", ".", "min_kept", ")", "-", "1", "]", "\n", "if", "mask_prob", "[", "threshold_index", "]", ">", "self", ".", "thresh", ":", "\n", "                    ", "threshold", "=", "mask_prob", "[", "threshold_index", "]", "\n", "", "kept_mask", "=", "mask_prob", ".", "le", "(", "threshold", ")", "# \u6982\u7387\u5c0f\u4e8e\u9608\u503c\u7684\u6316\u51fa\u6765", "\n", "target", "=", "target", "*", "kept_mask", ".", "long", "(", ")", "\n", "valid_mask", "=", "valid_mask", "*", "kept_mask", "\n", "# logger.info('Valid Mask: {}'.format(valid_mask.sum()))", "\n", "\n", "", "", "target", "=", "target", ".", "masked_fill_", "(", "1", "-", "valid_mask", ",", "self", ".", "ignore_label", ")", "\n", "target", "=", "target", ".", "view", "(", "b", ",", "h", ",", "w", ")", "\n", "\n", "return", "self", ".", "criterion", "(", "pred", ",", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.lr_policy.BaseLR.get_lr": [[14, 16], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "get_lr", "(", "self", ",", "cur_iter", ")", ":", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.lr_policy.PolyLR.__init__": [[19, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start_lr", ",", "lr_power", ",", "total_iters", ")", ":", "\n", "        ", "self", ".", "start_lr", "=", "start_lr", "\n", "self", ".", "lr_power", "=", "lr_power", "\n", "self", ".", "total_iters", "=", "total_iters", "+", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.lr_policy.PolyLR.get_lr": [[24, 27], ["float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", "cur_iter", ")", ":", "\n", "        ", "return", "self", ".", "start_lr", "*", "(", "\n", "(", "1", "-", "float", "(", "cur_iter", ")", "/", "self", ".", "total_iters", ")", "**", "self", ".", "lr_power", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.lr_policy.WarmUpPolyLR.__init__": [[30, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start_lr", ",", "lr_power", ",", "total_iters", ",", "warmup_steps", ")", ":", "\n", "        ", "self", ".", "start_lr", "=", "start_lr", "\n", "self", ".", "lr_power", "=", "lr_power", "\n", "self", ".", "total_iters", "=", "total_iters", "+", "0.0", "\n", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.lr_policy.WarmUpPolyLR.get_lr": [[36, 42], ["float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", "cur_iter", ")", ":", "\n", "        ", "if", "cur_iter", "<", "self", ".", "warmup_steps", ":", "\n", "            ", "return", "self", ".", "start_lr", "*", "(", "cur_iter", "/", "self", ".", "warmup_steps", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "start_lr", "*", "(", "\n", "(", "1", "-", "float", "(", "cur_iter", ")", "/", "self", ".", "total_iters", ")", "**", "self", ".", "lr_power", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.lr_policy.MultiStageLR.__init__": [[45, 49], ["type", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lr_stages", ")", ":", "\n", "        ", "assert", "type", "(", "lr_stages", ")", "in", "[", "list", ",", "tuple", "]", "and", "len", "(", "lr_stages", "[", "0", "]", ")", "==", "2", ",", "'lr_stages must be list or tuple, with [iters, lr] format'", "\n", "self", ".", "_lr_stagess", "=", "lr_stages", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.lr_policy.MultiStageLR.get_lr": [[50, 54], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "it_lr", "in", "self", ".", "_lr_stagess", ":", "\n", "            ", "if", "epoch", "<", "it_lr", "[", "0", "]", ":", "\n", "                ", "return", "it_lr", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.lr_policy.LinearIncreaseLR.__init__": [[57, 62], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start_lr", ",", "end_lr", ",", "warm_iters", ")", ":", "\n", "        ", "self", ".", "_start_lr", "=", "start_lr", "\n", "self", ".", "_end_lr", "=", "end_lr", "\n", "self", ".", "_warm_iters", "=", "warm_iters", "\n", "self", ".", "_delta_lr", "=", "(", "end_lr", "-", "start_lr", ")", "/", "warm_iters", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.lr_policy.LinearIncreaseLR.get_lr": [[63, 65], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ",", "cur_epoch", ")", ":", "\n", "        ", "return", "self", ".", "_start_lr", "+", "cur_epoch", "*", "self", ".", "_delta_lr", "", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.load_utils.get_dist_info": [[6, 18], ["torch.distributed.is_available", "torch.distributed.is_initialized", "torch.distributed.get_rank", "torch.distributed.get_world_size"], "function", ["None"], ["def", "get_dist_info", "(", ")", ":", "\n", "    ", "if", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "initialized", "=", "dist", ".", "is_initialized", "(", ")", "\n", "", "else", ":", "\n", "        ", "initialized", "=", "False", "\n", "", "if", "initialized", ":", "\n", "        ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "        ", "rank", "=", "0", "\n", "world_size", "=", "1", "\n", "", "return", "rank", ",", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.load_utils.load_state_dict": [[20, 67], ["getattr", "state_dict.copy.copy", "load_utils.load_state_dict.load"], "function", ["None"], ["", "def", "load_state_dict", "(", "module", ",", "state_dict", ",", "strict", "=", "False", ",", "logger", "=", "None", ")", ":", "\n", "    ", "unexpected_keys", "=", "[", "]", "\n", "all_missing_keys", "=", "[", "]", "\n", "err_msg", "=", "[", "]", "\n", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "        ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "# use _load_from_state_dict to enable checkpoint version control", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "# recursively check parallel module in case that the model has a", "\n", "# complicated structure, e.g., nn.Module(nn.Module(DDP))", "\n", "        ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "\n", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "\n", "all_missing_keys", ",", "unexpected_keys", ",", "\n", "err_msg", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "if", "child", "is", "not", "None", ":", "\n", "                ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "\n", "", "", "", "load", "(", "module", ")", "\n", "load", "=", "None", "# break load->load reference cycle", "\n", "\n", "# ignore \"num_batches_tracked\" of BN layers", "\n", "missing_keys", "=", "[", "\n", "key", "for", "key", "in", "all_missing_keys", "if", "'num_batches_tracked'", "not", "in", "key", "\n", "]", "\n", "\n", "if", "unexpected_keys", ":", "\n", "        ", "err_msg", ".", "append", "(", "'unexpected key in source '", "\n", "f'state_dict: {\", \".join(unexpected_keys)}\\n'", ")", "\n", "", "if", "missing_keys", ":", "\n", "        ", "err_msg", ".", "append", "(", "\n", "f'missing keys in source state_dict: {\", \".join(missing_keys)}\\n'", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "len", "(", "err_msg", ")", ">", "0", "and", "rank", "==", "0", ":", "\n", "        ", "err_msg", ".", "insert", "(", "\n", "0", ",", "'The model and loaded state dict do not match exactly\\n'", ")", "\n", "err_msg", "=", "'\\n'", ".", "join", "(", "err_msg", ")", "\n", "if", "strict", ":", "\n", "            ", "raise", "RuntimeError", "(", "err_msg", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "err_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.load_utils.load_pretrain": [[70, 92], ["torch.load", "load_utils.load_state_dict", "isinstance", "RuntimeError", "re.sub", "state_dict.items"], "function", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.load_utils.load_state_dict"], ["", "", "", "def", "load_pretrain", "(", "model", ",", "\n", "filename", ",", "\n", "strict", "=", "False", ",", "\n", "revise_keys", "=", "[", "(", "r'^module\\.'", ",", "''", ")", "]", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "# OrderedDict is a subclass of dict", "\n", "if", "not", "isinstance", "(", "checkpoint", ",", "dict", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "f'No state_dict found in checkpoint file {filename}'", ")", "\n", "# get state_dict from checkpoint", "\n", "", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "        ", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "", "elif", "'model'", "in", "checkpoint", ":", "\n", "        ", "state_dict", "=", "checkpoint", "[", "'model'", "]", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "checkpoint", "\n", "# strip prefix of state_dict", "\n", "", "for", "p", ",", "r", "in", "revise_keys", ":", "\n", "        ", "state_dict", "=", "{", "re", ".", "sub", "(", "p", ",", "r", ",", "k", ")", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "# load state_dict", "\n", "", "load_state_dict", "(", "model", ",", "state_dict", ",", "strict", ")", "\n", "return", "checkpoint", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.metric.hist_info": [[8, 16], ["numpy.sum", "numpy.sum", "numpy.bincount().reshape", "numpy.bincount", "pred[].astype", "gt[].astype"], "function", ["None"], ["def", "hist_info", "(", "n_cl", ",", "pred", ",", "gt", ")", ":", "\n", "    ", "assert", "(", "pred", ".", "shape", "==", "gt", ".", "shape", ")", "\n", "k", "=", "(", "gt", ">=", "0", ")", "&", "(", "gt", "<", "n_cl", ")", "\n", "labeled", "=", "np", ".", "sum", "(", "k", ")", "\n", "correct", "=", "np", ".", "sum", "(", "(", "pred", "[", "k", "]", "==", "gt", "[", "k", "]", ")", ")", "\n", "confusionMatrix", "=", "np", ".", "bincount", "(", "n_cl", "*", "gt", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "pred", "[", "k", "]", ".", "astype", "(", "int", ")", ",", "\n", "minlength", "=", "n_cl", "**", "2", ")", ".", "reshape", "(", "n_cl", ",", "n_cl", ")", "\n", "return", "confusionMatrix", ",", "labeled", ",", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.metric.compute_score": [[17, 31], ["numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.diag", "hist.sum", "hist.sum", "numpy.diag", "hist.sum", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "compute_score", "(", "hist", ",", "correct", ",", "labeled", ")", ":", "\n", "    ", "iou", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "mean_IoU", "=", "np", ".", "nanmean", "(", "iou", ")", "\n", "mean_IoU_no_back", "=", "np", ".", "nanmean", "(", "iou", "[", "1", ":", "]", ")", "# useless for NYUDv2", "\n", "\n", "freq", "=", "hist", ".", "sum", "(", "1", ")", "/", "hist", ".", "sum", "(", ")", "\n", "freq_IoU", "=", "(", "iou", "[", "freq", ">", "0", "]", "*", "freq", "[", "freq", ">", "0", "]", ")", ".", "sum", "(", ")", "\n", "\n", "classAcc", "=", "np", ".", "diag", "(", "hist", ")", "/", "hist", ".", "sum", "(", "axis", "=", "1", ")", "\n", "mean_pixel_acc", "=", "np", ".", "nanmean", "(", "classAcc", ")", "\n", "\n", "pixel_acc", "=", "correct", "/", "labeled", "\n", "\n", "return", "iou", ",", "mean_IoU", ",", "mean_IoU_no_back", ",", "freq_IoU", ",", "mean_pixel_acc", ",", "pixel_acc", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.visualize.set_img_color": [[5, 12], ["range", "len", "numpy.where", "numpy.where"], "function", ["None"], ["def", "set_img_color", "(", "colors", ",", "background", ",", "img", ",", "pred", ",", "gt", ",", "show255", "=", "False", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "colors", ")", ")", ":", "\n", "        ", "if", "i", "!=", "background", ":", "\n", "            ", "img", "[", "np", ".", "where", "(", "pred", "==", "i", ")", "]", "=", "colors", "[", "i", "]", "\n", "", "", "if", "show255", ":", "\n", "        ", "img", "[", "np", ".", "where", "(", "gt", "==", "background", ")", "]", "=", "255", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.visualize.show_prediction": [[13, 18], ["numpy.array", "visualize.set_img_color", "numpy.array"], "function", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.visualize.set_img_color"], ["", "def", "show_prediction", "(", "colors", ",", "background", ",", "img", ",", "pred", ",", "gt", ")", ":", "\n", "    ", "im", "=", "np", ".", "array", "(", "img", ",", "np", ".", "uint8", ")", "\n", "set_img_color", "(", "colors", ",", "background", ",", "im", ",", "pred", ",", "gt", ")", "\n", "final", "=", "np", ".", "array", "(", "im", ")", "\n", "return", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.visualize.show_img": [[19, 37], ["numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "visualize.set_img_color", "numpy.column_stack", "numpy.column_stack", "numpy.array", "visualize.set_img_color", "numpy.column_stack", "numpy.column_stack"], "function", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.visualize.set_img_color", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.visualize.set_img_color"], ["", "def", "show_img", "(", "colors", ",", "background", ",", "img", ",", "clean", ",", "gt", ",", "*", "pds", ")", ":", "\n", "    ", "im1", "=", "np", ".", "array", "(", "img", ",", "np", ".", "uint8", ")", "\n", "#set_img_color(colors, background, im1, clean, gt)", "\n", "final", "=", "np", ".", "array", "(", "im1", ")", "\n", "# the pivot black bar", "\n", "pivot", "=", "np", ".", "zeros", "(", "(", "im1", ".", "shape", "[", "0", "]", ",", "15", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "pd", "in", "pds", ":", "\n", "        ", "im", "=", "np", ".", "array", "(", "img", ",", "np", ".", "uint8", ")", "\n", "# pd[np.where(gt == 255)] = 255", "\n", "set_img_color", "(", "colors", ",", "background", ",", "im", ",", "pd", ",", "gt", ")", "\n", "final", "=", "np", ".", "column_stack", "(", "(", "final", ",", "pivot", ")", ")", "\n", "final", "=", "np", ".", "column_stack", "(", "(", "final", ",", "im", ")", ")", "\n", "\n", "", "im", "=", "np", ".", "array", "(", "img", ",", "np", ".", "uint8", ")", "\n", "set_img_color", "(", "colors", ",", "background", ",", "im", ",", "gt", ",", "True", ")", "\n", "final", "=", "np", ".", "column_stack", "(", "(", "final", ",", "pivot", ")", ")", "\n", "final", "=", "np", ".", "column_stack", "(", "(", "final", ",", "im", ")", ")", "\n", "return", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.visualize.get_colors": [[38, 44], ["range", "colors.append", "numpy.random.random"], "function", ["None"], ["", "def", "get_colors", "(", "class_num", ")", ":", "\n", "    ", "colors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "class_num", ")", ":", "\n", "        ", "colors", ".", "append", "(", "(", "np", ".", "random", ".", "random", "(", "(", "1", ",", "3", ")", ")", "*", "255", ")", ".", "tolist", "(", ")", "[", "0", "]", ")", "\n", "\n", "", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.visualize.get_ade_colors": [[45, 52], ["numpy.array().astype().tolist", "np.array().astype().tolist.insert", "scipy.loadmat", "numpy.array().astype", "numpy.array"], "function", ["None"], ["", "def", "get_ade_colors", "(", ")", ":", "\n", "    ", "colors", "=", "sio", ".", "loadmat", "(", "'./color150.mat'", ")", "[", "'colors'", "]", "\n", "colors", "=", "colors", "[", ":", ",", ":", ":", "-", "1", ",", "]", "\n", "colors", "=", "np", ".", "array", "(", "colors", ")", ".", "astype", "(", "int", ")", ".", "tolist", "(", ")", "\n", "colors", ".", "insert", "(", "0", ",", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.visualize.print_iou": [[54, 75], ["range", "numpy.nanmean", "numpy.nanmean", "lines.append", "lines.append", "lines.append", "print"], "function", ["None"], ["", "def", "print_iou", "(", "iou", ",", "freq_IoU", ",", "mean_pixel_acc", ",", "pixel_acc", ",", "class_names", "=", "None", ",", "show_no_back", "=", "False", ",", "no_print", "=", "False", ")", ":", "\n", "    ", "n", "=", "iou", ".", "size", "\n", "lines", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "if", "class_names", "is", "None", ":", "\n", "            ", "cls", "=", "'Class %d:'", "%", "(", "i", "+", "1", ")", "\n", "", "else", ":", "\n", "            ", "cls", "=", "'%d %s'", "%", "(", "i", "+", "1", ",", "class_names", "[", "i", "]", ")", "\n", "", "lines", ".", "append", "(", "'%-8s\\t%.3f%%'", "%", "(", "cls", ",", "iou", "[", "i", "]", "*", "100", ")", ")", "\n", "", "mean_IoU", "=", "np", ".", "nanmean", "(", "iou", ")", "\n", "mean_IoU_no_back", "=", "np", ".", "nanmean", "(", "iou", "[", "1", ":", "]", ")", "\n", "if", "show_no_back", ":", "\n", "        ", "lines", ".", "append", "(", "'----------     %-8s\\t%.3f%%\\t%-8s\\t%.3f%%\\t%-8s\\t%.3f%%\\t%-8s\\t%.3f%%\\t%-8s\\t%.3f%%'", "%", "(", "'mean_IoU'", ",", "mean_IoU", "*", "100", ",", "'mean_IU_no_back'", ",", "mean_IoU_no_back", "*", "100", ",", "\n", "'freq_IoU'", ",", "freq_IoU", "*", "100", ",", "'mean_pixel_acc'", ",", "mean_pixel_acc", "*", "100", ",", "'pixel_acc'", ",", "pixel_acc", "*", "100", ")", ")", "\n", "", "else", ":", "\n", "        ", "lines", ".", "append", "(", "'----------     %-8s\\t%.3f%%\\t%-8s\\t%.3f%%\\t%-8s\\t%.3f%%\\t%-8s\\t%.3f%%'", "%", "(", "'mean_IoU'", ",", "mean_IoU", "*", "100", ",", "'freq_IoU'", ",", "freq_IoU", "*", "100", ",", "\n", "'mean_pixel_acc'", ",", "mean_pixel_acc", "*", "100", ",", "'pixel_acc'", ",", "pixel_acc", "*", "100", ")", ")", "\n", "", "line", "=", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "if", "not", "no_print", ":", "\n", "        ", "print", "(", "line", ")", "\n", "", "return", "line", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.LogFormatter.format": [[20, 45], ["pyt_utils.LogFormatter.__set_fmt", "logging.Formatter.format", "pyt_utils.LogFormatter.__set_fmt", "logging.Formatter.format", "pyt_utils.LogFormatter._color_date", "mcl"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.logger.LogFormatter.format", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.logger.LogFormatter.format", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.logger.LogFormatter._color_date"], ["def", "format", "(", "self", ",", "record", ")", ":", "\n", "        ", "if", "record", ".", "levelno", "==", "logging", ".", "DEBUG", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_dbg", ",", "'DBG'", "\n", "", "elif", "record", ".", "levelno", "==", "logging", ".", "WARNING", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_warn", ",", "'WRN'", "\n", "", "elif", "record", ".", "levelno", "==", "logging", ".", "ERROR", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_err", ",", "'ERR'", "\n", "", "else", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_normal", ",", "''", "\n", "\n", "", "if", "mtxt", ":", "\n", "            ", "mtxt", "+=", "' '", "\n", "\n", "", "if", "self", ".", "log_fout", ":", "\n", "            ", "self", ".", "__set_fmt", "(", "self", ".", "date_full", "+", "mtxt", "+", "self", ".", "msg", ")", "\n", "formatted", "=", "super", "(", "LogFormatter", ",", "self", ")", ".", "format", "(", "record", ")", "\n", "# self.log_fout.write(formatted)", "\n", "# self.log_fout.write('\\n')", "\n", "# self.log_fout.flush()", "\n", "return", "formatted", "\n", "\n", "", "self", ".", "__set_fmt", "(", "self", ".", "_color_date", "(", "self", ".", "date", ")", "+", "mcl", "(", "mtxt", "+", "self", ".", "msg", ")", ")", "\n", "formatted", "=", "super", "(", "LogFormatter", ",", "self", ")", ".", "format", "(", "record", ")", "\n", "\n", "return", "formatted", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.LogFormatter._color_dbg": [[53, 56], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_color_dbg", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[36m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.LogFormatter._color_warn": [[57, 60], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_warn", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[1;31m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.LogFormatter._color_err": [[61, 64], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_err", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[1;4;31m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.LogFormatter._color_omitted": [[65, 68], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_omitted", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[35m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.LogFormatter._color_normal": [[69, 72], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_normal", "(", "msg", ")", ":", "\n", "        ", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.LogFormatter._color_date": [[73, 76], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_date", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[32m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.get_logger": [[80, 98], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "pyt_utils.ensure_dir", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "formatter"], "function", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.ensure_dir"], ["def", "get_logger", "(", "log_dir", "=", "None", ",", "log_file", "=", "None", ",", "formatter", "=", "LogFormatter", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "_default_level", ")", "\n", "del", "logger", ".", "handlers", "[", ":", "]", "\n", "\n", "if", "log_dir", "and", "log_file", ":", "\n", "        ", "ensure_dir", "(", "log_dir", ")", "\n", "LogFormatter", ".", "log_fout", "=", "True", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'a'", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", "(", "datefmt", "=", "'%d %H:%M:%S'", ")", ")", "\n", "stream_handler", ".", "setLevel", "(", "0", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.reduce_tensor": [[110, 117], ["tensor.clone.clone", "torch.reduce", "torch.get_rank", "tensor.clone.div_"], "function", ["None"], ["def", "reduce_tensor", "(", "tensor", ",", "dst", "=", "0", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ",", "world_size", "=", "1", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "reduce", "(", "tensor", ",", "dst", ",", "op", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "dst", ":", "\n", "        ", "tensor", ".", "div_", "(", "world_size", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.all_reduce_tensor": [[119, 125], ["tensor.clone.clone", "torch.all_reduce", "tensor.clone.div_"], "function", ["None"], ["", "def", "all_reduce_tensor", "(", "tensor", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ",", "world_size", "=", "1", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "tensor", ",", "op", ")", "\n", "tensor", ".", "div_", "(", "world_size", ")", "\n", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.load_restore_model": [[127, 154], ["time.time", "isinstance", "time.time", "model.load_state_dict", "time.time", "logger.info", "torch.load", "torch.load", "torch.load", "torch.load.keys", "torch.load.keys", "torch.load.keys"], "function", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.load_utils.load_state_dict"], ["", "def", "load_restore_model", "(", "model", ",", "model_file", ")", ":", "\n", "    ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "model_file", "is", "None", ":", "\n", "        ", "return", "model", "\n", "\n", "", "if", "isinstance", "(", "model_file", ",", "str", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "model_file", ")", "\n", "if", "'model'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "", "elif", "'state_dict'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "state_dict", "=", "state_dict", "[", "'state_dict'", "]", "\n", "", "elif", "'module'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "state_dict", "=", "state_dict", "[", "'module'", "]", "\n", "", "", "else", ":", "\n", "        ", "state_dict", "=", "model_file", "\n", "", "t_ioend", "=", "time", ".", "time", "(", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "\n", "del", "state_dict", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Load model, Time usage:\\n\\tIO: {}, initialize parameters: {}\"", ".", "format", "(", "\n", "t_ioend", "-", "t_start", ",", "t_end", "-", "t_ioend", ")", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.load_model": [[155, 193], ["time.time", "isinstance", "time.time", "model.load_state_dict", "set", "set", "time.time", "logger.info", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "torch.load.keys", "model.state_dict().keys", "torch.load.keys", "torch.load.keys", "model.state_dict", "torch.load.keys"], "function", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.load_utils.load_state_dict"], ["", "def", "load_model", "(", "model", ",", "model_file", ",", "is_restore", "=", "False", ")", ":", "\n", "    ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "model_file", "is", "None", ":", "\n", "        ", "return", "model", "\n", "\n", "", "if", "isinstance", "(", "model_file", ",", "str", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "model_file", ")", "\n", "if", "'model'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "", "elif", "'state_dict'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "state_dict", "=", "state_dict", "[", "'state_dict'", "]", "\n", "", "elif", "'module'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "state_dict", "=", "state_dict", "[", "'module'", "]", "\n", "", "", "else", ":", "\n", "        ", "state_dict", "=", "model_file", "\n", "", "t_ioend", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "is_restore", ":", "\n", "        ", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "'module.'", "+", "k", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "ckpt_keys", "=", "set", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "own_keys", "=", "set", "(", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "\n", "missing_keys", "=", "own_keys", "-", "ckpt_keys", "\n", "unexpected_keys", "=", "ckpt_keys", "-", "own_keys", "\n", "\n", "del", "state_dict", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Load model, Time usage:\\n\\tIO: {}, initialize parameters: {}\"", ".", "format", "(", "\n", "t_ioend", "-", "t_start", ",", "t_end", "-", "t_ioend", ")", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.parse_devices": [[194, 219], ["input_devices.endswith", "input_devices.split", "logger.info", "list", "range", "range", "int", "list.append", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "int", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "list.append", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "d.split", "d.split", "str"], "function", ["None"], ["", "def", "parse_devices", "(", "input_devices", ")", ":", "\n", "    ", "if", "input_devices", ".", "endswith", "(", "'*'", ")", ":", "\n", "        ", "devices", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "return", "devices", "\n", "\n", "", "devices", "=", "[", "]", "\n", "for", "d", "in", "input_devices", ".", "split", "(", "','", ")", ":", "\n", "        ", "if", "'-'", "in", "d", ":", "\n", "            ", "start_device", ",", "end_device", "=", "d", ".", "split", "(", "'-'", ")", "[", "0", "]", ",", "d", ".", "split", "(", "'-'", ")", "[", "1", "]", "\n", "assert", "start_device", "!=", "''", "\n", "assert", "end_device", "!=", "''", "\n", "start_device", ",", "end_device", "=", "int", "(", "start_device", ")", ",", "int", "(", "end_device", ")", "\n", "assert", "start_device", "<", "end_device", "\n", "assert", "end_device", "<", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "for", "sd", "in", "range", "(", "start_device", ",", "end_device", "+", "1", ")", ":", "\n", "                ", "devices", ".", "append", "(", "sd", ")", "\n", "", "", "else", ":", "\n", "            ", "device", "=", "int", "(", "d", ")", "\n", "assert", "device", "<", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "devices", ".", "append", "(", "device", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "'using devices {}'", ".", "format", "(", "\n", "', '", ".", "join", "(", "[", "str", "(", "d", ")", "for", "d", "in", "devices", "]", ")", ")", ")", "\n", "\n", "return", "devices", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.extant_file": [[221, 230], ["os.path.exists", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "extant_file", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    'Type' for argparse - checks that file exists but does not open.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "x", ")", ":", "\n", "# Argparse uses the ArgumentTypeError to give a rejection message like:", "\n", "# error: argument input: x does not exist", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\"{0} does not exist\"", ".", "format", "(", "x", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.link_file": [[232, 236], ["os.system", "os.path.isdir", "os.path.isfile", "os.system"], "function", ["None"], ["", "def", "link_file", "(", "src", ",", "target", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "target", ")", "or", "os", ".", "path", ".", "isfile", "(", "target", ")", ":", "\n", "        ", "os", ".", "system", "(", "'rm -rf {}'", ".", "format", "(", "target", ")", ")", "\n", "", "os", ".", "system", "(", "'ln -s {} {}'", ".", "format", "(", "src", ",", "target", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.ensure_dir": [[238, 246], ["os.path.isdir", "random.randint", "time.sleep", "os.makedirs", "print"], "function", ["None"], ["", "def", "ensure_dir", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "sleeptime", "=", "random", ".", "randint", "(", "0", ",", "3", ")", "\n", "time", ".", "sleep", "(", "sleeptime", ")", "\n", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'conflict !!!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils._dbg_interactive": [[248, 251], ["embed"], "function", ["None"], ["", "", "", "def", "_dbg_interactive", "(", "var", ",", "value", ")", ":", "\n", "    ", "from", "IPython", "import", "embed", "\n", "embed", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset.__init__": [[11, 28], ["torch.Dataset.__init__", "RGBXDataset.RGBXDataset._get_file_names"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset._get_file_names"], ["    ", "def", "__init__", "(", "self", ",", "setting", ",", "split_name", ",", "preprocess", "=", "None", ",", "file_length", "=", "None", ")", ":", "\n", "        ", "super", "(", "RGBXDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_split_name", "=", "split_name", "\n", "self", ".", "_rgb_path", "=", "setting", "[", "'rgb_root'", "]", "\n", "self", ".", "_rgb_format", "=", "setting", "[", "'rgb_format'", "]", "\n", "self", ".", "_gt_path", "=", "setting", "[", "'gt_root'", "]", "\n", "self", ".", "_gt_format", "=", "setting", "[", "'gt_format'", "]", "\n", "self", ".", "_transform_gt", "=", "setting", "[", "'transform_gt'", "]", "\n", "self", ".", "_x_path", "=", "setting", "[", "'x_root'", "]", "\n", "self", ".", "_x_format", "=", "setting", "[", "'x_format'", "]", "\n", "self", ".", "_x_single_channel", "=", "setting", "[", "'x_single_channel'", "]", "\n", "self", ".", "_train_source", "=", "setting", "[", "'train_source'", "]", "\n", "self", ".", "_eval_source", "=", "setting", "[", "'eval_source'", "]", "\n", "self", ".", "class_names", "=", "setting", "[", "'class_names'", "]", "\n", "self", ".", "_file_names", "=", "self", ".", "_get_file_names", "(", "split_name", ")", "\n", "self", ".", "_file_length", "=", "file_length", "\n", "self", ".", "preprocess", "=", "preprocess", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset.__len__": [[29, 33], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_file_length", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_file_length", "\n", "", "return", "len", "(", "self", ".", "_file_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset.__getitem__": [[34, 67], ["os.path.join", "os.path.join", "os.path.join", "RGBXDataset.RGBXDataset._open_image", "RGBXDataset.RGBXDataset._open_image", "dict", "RGBXDataset.RGBXDataset._gt_transform", "RGBXDataset.RGBXDataset._open_image", "cv2.merge", "RGBXDataset.RGBXDataset._open_image", "RGBXDataset.RGBXDataset.preprocess", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "RGBXDataset.RGBXDataset._construct_new_file_names", "str", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.ascontiguousarray"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset._open_image", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset._open_image", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset._gt_transform", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset._open_image", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset._open_image", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset._construct_new_file_names"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "_file_length", "is", "not", "None", ":", "\n", "            ", "item_name", "=", "self", ".", "_construct_new_file_names", "(", "self", ".", "_file_length", ")", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "item_name", "=", "self", ".", "_file_names", "[", "index", "]", "\n", "", "rgb_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_rgb_path", ",", "item_name", "+", "self", ".", "_rgb_format", ")", "\n", "x_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_x_path", ",", "item_name", "+", "self", ".", "_x_format", ")", "\n", "gt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_gt_path", ",", "item_name", "+", "self", ".", "_gt_format", ")", "\n", "\n", "# Check the following settings if necessary", "\n", "rgb", "=", "self", ".", "_open_image", "(", "rgb_path", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "gt", "=", "self", ".", "_open_image", "(", "gt_path", ",", "cv2", ".", "IMREAD_GRAYSCALE", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "self", ".", "_transform_gt", ":", "\n", "            ", "gt", "=", "self", ".", "_gt_transform", "(", "gt", ")", "\n", "\n", "", "if", "self", ".", "_x_single_channel", ":", "\n", "            ", "x", "=", "self", ".", "_open_image", "(", "x_path", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "x", "=", "cv2", ".", "merge", "(", "[", "x", ",", "x", ",", "x", "]", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "_open_image", "(", "x_path", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "", "if", "self", ".", "preprocess", "is", "not", "None", ":", "\n", "            ", "rgb", ",", "gt", ",", "x", "=", "self", ".", "preprocess", "(", "rgb", ",", "gt", ",", "x", ")", "\n", "\n", "", "if", "self", ".", "_split_name", "==", "'train'", ":", "\n", "            ", "rgb", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "rgb", ")", ")", ".", "float", "(", ")", "\n", "gt", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "gt", ")", ")", ".", "long", "(", ")", "\n", "x", "=", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "x", ")", ")", ".", "float", "(", ")", "\n", "\n", "", "output_dict", "=", "dict", "(", "data", "=", "rgb", ",", "label", "=", "gt", ",", "modal_x", "=", "x", ",", "fn", "=", "str", "(", "item_name", ")", ",", "n", "=", "len", "(", "self", ".", "_file_names", ")", ")", "\n", "\n", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset._get_file_names": [[68, 83], ["open", "f.readlines", "item.strip", "file_names.append"], "methods", ["None"], ["", "def", "_get_file_names", "(", "self", ",", "split_name", ")", ":", "\n", "        ", "assert", "split_name", "in", "[", "'train'", ",", "'val'", "]", "\n", "source", "=", "self", ".", "_train_source", "\n", "if", "split_name", "==", "\"val\"", ":", "\n", "            ", "source", "=", "self", ".", "_eval_source", "\n", "\n", "", "file_names", "=", "[", "]", "\n", "with", "open", "(", "source", ")", "as", "f", ":", "\n", "            ", "files", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "for", "item", "in", "files", ":", "\n", "            ", "file_name", "=", "item", ".", "strip", "(", ")", "\n", "file_names", ".", "append", "(", "file_name", ")", "\n", "\n", "", "return", "file_names", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset._construct_new_file_names": [[84, 95], ["isinstance", "len", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "def", "_construct_new_file_names", "(", "self", ",", "length", ")", ":", "\n", "        ", "assert", "isinstance", "(", "length", ",", "int", ")", "\n", "files_len", "=", "len", "(", "self", ".", "_file_names", ")", "\n", "new_file_names", "=", "self", ".", "_file_names", "*", "(", "length", "//", "files_len", ")", "\n", "\n", "rand_indices", "=", "torch", ".", "randperm", "(", "files_len", ")", ".", "tolist", "(", ")", "\n", "new_indices", "=", "rand_indices", "[", ":", "length", "%", "files_len", "]", "\n", "\n", "new_file_names", "+=", "[", "self", ".", "_file_names", "[", "i", "]", "for", "i", "in", "new_indices", "]", "\n", "\n", "return", "new_file_names", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset.get_length": [[96, 98], ["RGBXDataset.RGBXDataset.__len__"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset.__len__"], ["", "def", "get_length", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__len__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset._open_image": [[99, 103], ["numpy.array", "cv2.imread"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_open_image", "(", "filepath", ",", "mode", "=", "cv2", ".", "IMREAD_COLOR", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "cv2", ".", "imread", "(", "filepath", ",", "mode", ")", ",", "dtype", "=", "dtype", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset._gt_transform": [[104, 107], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_gt_transform", "(", "gt", ")", ":", "\n", "        ", "return", "gt", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset.get_class_colors": [[108, 130], ["numpy.zeros", "range", "numpy.zeros.tolist", "range", "RGBXDataset.RGBXDataset.get_class_colors.uint82bin"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_class_colors", "(", "*", "args", ")", ":", "\n", "        ", "def", "uint82bin", "(", "n", ",", "count", "=", "8", ")", ":", "\n", "            ", "\"\"\"returns the binary of integer n, count refers to amount of bits\"\"\"", "\n", "return", "''", ".", "join", "(", "[", "str", "(", "(", "n", ">>", "y", ")", "&", "1", ")", "for", "y", "in", "range", "(", "count", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", ")", "\n", "\n", "", "N", "=", "41", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "r", ",", "g", ",", "b", "=", "0", ",", "0", ",", "0", "\n", "id", "=", "i", "\n", "for", "j", "in", "range", "(", "7", ")", ":", "\n", "                ", "str_id", "=", "uint82bin", "(", "id", ")", "\n", "r", "=", "r", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "1", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "g", "=", "g", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "2", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "b", "=", "b", "^", "(", "np", ".", "uint8", "(", "str_id", "[", "-", "3", "]", ")", "<<", "(", "7", "-", "j", ")", ")", "\n", "id", "=", "id", ">>", "3", "\n", "", "cmap", "[", "i", ",", "0", "]", "=", "r", "\n", "cmap", "[", "i", ",", "1", "]", "=", "g", "\n", "cmap", "[", "i", ",", "2", "]", "=", "b", "\n", "", "class_colors", "=", "cmap", ".", "tolist", "(", ")", "\n", "return", "class_colors", "\n", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.dataloader.TrainPre.__init__": [[28, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "norm_mean", ",", "norm_std", ")", ":", "\n", "        ", "self", ".", "norm_mean", "=", "norm_mean", "\n", "self", ".", "norm_std", "=", "norm_std", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.dataloader.TrainPre.__call__": [[32, 51], ["dataloader.random_mirror", "utils.transforms.normalize", "utils.transforms.normalize", "utils.transforms.generate_random_crop_pos", "utils.transforms.random_crop_pad_to_shape", "utils.transforms.random_crop_pad_to_shape", "utils.transforms.random_crop_pad_to_shape", "p_rgb.transpose.transpose.transpose", "p_modal_x.transpose.transpose.transpose", "dataloader.random_scale"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.dataloader.random_mirror", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.normalize", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.normalize", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.generate_random_crop_pos", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.random_crop_pad_to_shape", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.random_crop_pad_to_shape", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.random_crop_pad_to_shape", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.dataloader.random_scale"], ["", "def", "__call__", "(", "self", ",", "rgb", ",", "gt", ",", "modal_x", ")", ":", "\n", "        ", "rgb", ",", "gt", ",", "modal_x", "=", "random_mirror", "(", "rgb", ",", "gt", ",", "modal_x", ")", "\n", "if", "config", ".", "train_scale_array", "is", "not", "None", ":", "\n", "            ", "rgb", ",", "gt", ",", "modal_x", ",", "scale", "=", "random_scale", "(", "rgb", ",", "gt", ",", "modal_x", ",", "config", ".", "train_scale_array", ")", "\n", "\n", "", "rgb", "=", "normalize", "(", "rgb", ",", "self", ".", "norm_mean", ",", "self", ".", "norm_std", ")", "\n", "modal_x", "=", "normalize", "(", "modal_x", ",", "self", ".", "norm_mean", ",", "self", ".", "norm_std", ")", "\n", "\n", "crop_size", "=", "(", "config", ".", "image_height", ",", "config", ".", "image_width", ")", "\n", "crop_pos", "=", "generate_random_crop_pos", "(", "rgb", ".", "shape", "[", ":", "2", "]", ",", "crop_size", ")", "\n", "\n", "p_rgb", ",", "_", "=", "random_crop_pad_to_shape", "(", "rgb", ",", "crop_pos", ",", "crop_size", ",", "0", ")", "\n", "p_gt", ",", "_", "=", "random_crop_pad_to_shape", "(", "gt", ",", "crop_pos", ",", "crop_size", ",", "255", ")", "\n", "p_modal_x", ",", "_", "=", "random_crop_pad_to_shape", "(", "modal_x", ",", "crop_pos", ",", "crop_size", ",", "0", ")", "\n", "\n", "p_rgb", "=", "p_rgb", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "p_modal_x", "=", "p_modal_x", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "p_rgb", ",", "p_gt", ",", "p_modal_x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.dataloader.ValPre.__call__": [[53, 55], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "rgb", ",", "gt", ",", "modal_x", ")", ":", "\n", "        ", "return", "rgb", ",", "gt", ",", "modal_x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.dataloader.random_mirror": [[9, 16], ["random.random", "cv2.flip", "cv2.flip", "cv2.flip"], "function", ["None"], ["def", "random_mirror", "(", "rgb", ",", "gt", ",", "modal_x", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", ">=", "0.5", ":", "\n", "        ", "rgb", "=", "cv2", ".", "flip", "(", "rgb", ",", "1", ")", "\n", "gt", "=", "cv2", ".", "flip", "(", "gt", ",", "1", ")", "\n", "modal_x", "=", "cv2", ".", "flip", "(", "modal_x", ",", "1", ")", "\n", "\n", "", "return", "rgb", ",", "gt", ",", "modal_x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.dataloader.random_scale": [[17, 26], ["random.choice", "int", "int", "cv2.resize", "cv2.resize", "cv2.resize", "config.config.train_scale_array"], "function", ["None"], ["", "def", "random_scale", "(", "rgb", ",", "gt", ",", "modal_x", ",", "scales", ")", ":", "\n", "    ", "scale", "=", "random", ".", "choice", "(", "scales", ")", "\n", "sh", "=", "int", "(", "rgb", ".", "shape", "[", "0", "]", "*", "scale", ")", "\n", "sw", "=", "int", "(", "rgb", ".", "shape", "[", "1", "]", "*", "scale", ")", "\n", "rgb", "=", "cv2", ".", "resize", "(", "rgb", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "gt", "=", "cv2", ".", "resize", "(", "gt", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "modal_x", "=", "cv2", ".", "resize", "(", "modal_x", ",", "(", "sw", ",", "sh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "rgb", ",", "gt", ",", "modal_x", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.dataloader.get_train_loader": [[56, 91], ["dataloader.TrainPre", "dataset", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler"], "function", ["None"], ["", "", "def", "get_train_loader", "(", "engine", ",", "dataset", ")", ":", "\n", "    ", "data_setting", "=", "{", "'rgb_root'", ":", "config", ".", "rgb_root_folder", ",", "\n", "'rgb_format'", ":", "config", ".", "rgb_format", ",", "\n", "'gt_root'", ":", "config", ".", "gt_root_folder", ",", "\n", "'gt_format'", ":", "config", ".", "gt_format", ",", "\n", "'transform_gt'", ":", "config", ".", "gt_transform", ",", "\n", "'x_root'", ":", "config", ".", "x_root_folder", ",", "\n", "'x_format'", ":", "config", ".", "x_format", ",", "\n", "'x_single_channel'", ":", "config", ".", "x_is_single_channel", ",", "\n", "'class_names'", ":", "config", ".", "class_names", ",", "\n", "'train_source'", ":", "config", ".", "train_source", ",", "\n", "'eval_source'", ":", "config", ".", "eval_source", ",", "\n", "'class_names'", ":", "config", ".", "class_names", "}", "\n", "train_preprocess", "=", "TrainPre", "(", "config", ".", "norm_mean", ",", "config", ".", "norm_std", ")", "\n", "\n", "train_dataset", "=", "dataset", "(", "data_setting", ",", "\"train\"", ",", "train_preprocess", ",", "config", ".", "batch_size", "*", "config", ".", "niters_per_epoch", ")", "\n", "\n", "train_sampler", "=", "None", "\n", "is_shuffle", "=", "True", "\n", "batch_size", "=", "config", ".", "batch_size", "\n", "\n", "if", "engine", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "batch_size", "=", "config", ".", "batch_size", "//", "engine", ".", "world_size", "\n", "is_shuffle", "=", "False", "\n", "\n", "", "train_loader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "config", ".", "num_workers", ",", "\n", "drop_last", "=", "True", ",", "\n", "shuffle", "=", "is_shuffle", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ")", "\n", "\n", "return", "train_loader", ",", "train_sampler", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.ChannelWeights.__init__": [[10, 20], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "reduction", "=", "1", ")", ":", "\n", "        ", "super", "(", "ChannelWeights", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "max_pool", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "1", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "dim", "*", "4", ",", "self", ".", "dim", "*", "4", "//", "reduction", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "dim", "*", "4", "//", "reduction", ",", "self", ".", "dim", "*", "2", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.ChannelWeights.forward": [[21, 30], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_utils.ChannelWeights.avg_pool().view", "net_utils.ChannelWeights.max_pool().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_utils.ChannelWeights.mlp().view", "net_utils.ChannelWeights.reshape().permute", "net_utils.ChannelWeights.avg_pool", "net_utils.ChannelWeights.max_pool", "net_utils.ChannelWeights.mlp", "net_utils.ChannelWeights.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "B", ",", "_", ",", "H", ",", "W", "=", "x1", ".", "shape", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "dim", "=", "1", ")", "\n", "avg", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "B", ",", "self", ".", "dim", "*", "2", ")", "\n", "max", "=", "self", ".", "max_pool", "(", "x", ")", ".", "view", "(", "B", ",", "self", ".", "dim", "*", "2", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "avg", ",", "max", ")", ",", "dim", "=", "1", ")", "# B 4C", "\n", "y", "=", "self", ".", "mlp", "(", "y", ")", ".", "view", "(", "B", ",", "self", ".", "dim", "*", "2", ",", "1", ")", "\n", "channel_weights", "=", "y", ".", "reshape", "(", "B", ",", "2", ",", "self", ".", "dim", ",", "1", ",", "1", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "# 2 B C 1 1", "\n", "return", "channel_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.SpatialWeights.__init__": [[33, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "reduction", "=", "1", ")", ":", "\n", "        ", "super", "(", "SpatialWeights", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "dim", "*", "2", ",", "self", ".", "dim", "//", "reduction", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "dim", "//", "reduction", ",", "2", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.SpatialWeights.forward": [[42, 47], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_utils.SpatialWeights.mlp().reshape().permute", "net_utils.SpatialWeights.mlp().reshape", "net_utils.SpatialWeights.mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "B", ",", "_", ",", "H", ",", "W", "=", "x1", ".", "shape", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "dim", "=", "1", ")", "# B 2C H W", "\n", "spatial_weights", "=", "self", ".", "mlp", "(", "x", ")", ".", "reshape", "(", "B", ",", "2", ",", "1", ",", "H", ",", "W", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "# 2 B 1 H W", "\n", "return", "spatial_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.FeatureRectifyModule.__init__": [[50, 56], ["torch.Module.__init__", "net_utils.ChannelWeights", "net_utils.SpatialWeights"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "reduction", "=", "1", ",", "lambda_c", "=", ".5", ",", "lambda_s", "=", ".5", ")", ":", "\n", "        ", "super", "(", "FeatureRectifyModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambda_c", "=", "lambda_c", "\n", "self", ".", "lambda_s", "=", "lambda_s", "\n", "self", ".", "channel_weights", "=", "ChannelWeights", "(", "dim", "=", "dim", ",", "reduction", "=", "reduction", ")", "\n", "self", ".", "spatial_weights", "=", "SpatialWeights", "(", "dim", "=", "dim", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.FeatureRectifyModule._init_weights": [[57, 71], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.FeatureRectifyModule.forward": [[72, 78], ["net_utils.FeatureRectifyModule.channel_weights", "net_utils.FeatureRectifyModule.spatial_weights"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "channel_weights", "=", "self", ".", "channel_weights", "(", "x1", ",", "x2", ")", "\n", "spatial_weights", "=", "self", ".", "spatial_weights", "(", "x1", ",", "x2", ")", "\n", "out_x1", "=", "x1", "+", "self", ".", "lambda_c", "*", "channel_weights", "[", "1", "]", "*", "x2", "+", "self", ".", "lambda_s", "*", "spatial_weights", "[", "1", "]", "*", "x2", "\n", "out_x2", "=", "x2", "+", "self", ".", "lambda_c", "*", "channel_weights", "[", "0", "]", "*", "x1", "+", "self", ".", "lambda_s", "*", "spatial_weights", "[", "0", "]", "*", "x1", "\n", "return", "out_x1", ",", "out_x2", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.CrossAttention.__init__": [[82, 92], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ")", ":", "\n", "        ", "super", "(", "CrossAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "dim", "%", "num_heads", "==", "0", ",", "f\"dim {dim} should be divided by num_heads {num_heads}.\"", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "kv1", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "2", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "kv2", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "2", ",", "bias", "=", "qkv_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.CrossAttention.forward": [[93, 109], ["x1.reshape().permute().contiguous", "x2.reshape().permute().contiguous", "net_utils.CrossAttention.kv1().reshape().permute().contiguous", "net_utils.CrossAttention.kv2().reshape().permute().contiguous", "ctx1.softmax.softmax.softmax", "ctx2.softmax.softmax.softmax", "x1.reshape().permute", "x2.reshape().permute", "net_utils.CrossAttention.kv1().reshape().permute", "net_utils.CrossAttention.kv2().reshape().permute", "k1.transpose", "k2.transpose", "x1.reshape", "x2.reshape", "net_utils.CrossAttention.kv1().reshape", "net_utils.CrossAttention.kv2().reshape", "net_utils.CrossAttention.kv1", "net_utils.CrossAttention.kv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x1", ".", "shape", "\n", "q1", "=", "x1", ".", "reshape", "(", "B", ",", "-", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "q2", "=", "x2", ".", "reshape", "(", "B", ",", "-", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "k1", ",", "v1", "=", "self", ".", "kv1", "(", "x1", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "2", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "k2", ",", "v2", "=", "self", ".", "kv2", "(", "x2", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "2", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "\n", "ctx1", "=", "(", "k1", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "@", "v1", ")", "*", "self", ".", "scale", "\n", "ctx1", "=", "ctx1", ".", "softmax", "(", "dim", "=", "-", "2", ")", "\n", "ctx2", "=", "(", "k2", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "@", "v2", ")", "*", "self", ".", "scale", "\n", "ctx2", "=", "ctx2", ".", "softmax", "(", "dim", "=", "-", "2", ")", "\n", "\n", "x1", "=", "(", "q1", "@", "ctx2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", ".", "contiguous", "(", ")", "\n", "x2", "=", "(", "q2", "@", "ctx1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.CrossPath.__init__": [[112, 123], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "net_utils.CrossAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "norm_layer", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "reduction", "=", "1", ",", "num_heads", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channel_proj1", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "//", "reduction", "*", "2", ")", "\n", "self", ".", "channel_proj2", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "//", "reduction", "*", "2", ")", "\n", "self", ".", "act1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "act2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "cross_attn", "=", "CrossAttention", "(", "dim", "//", "reduction", ",", "num_heads", "=", "num_heads", ")", "\n", "self", ".", "end_proj1", "=", "nn", ".", "Linear", "(", "dim", "//", "reduction", "*", "2", ",", "dim", ")", "\n", "self", ".", "end_proj2", "=", "nn", ".", "Linear", "(", "dim", "//", "reduction", "*", "2", ",", "dim", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.CrossPath.forward": [[124, 133], ["net_utils.CrossPath.act1().chunk", "net_utils.CrossPath.act2().chunk", "net_utils.CrossPath.cross_attn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_utils.CrossPath.norm1", "net_utils.CrossPath.norm2", "net_utils.CrossPath.act1", "net_utils.CrossPath.act2", "net_utils.CrossPath.end_proj1", "net_utils.CrossPath.end_proj2", "net_utils.CrossPath.channel_proj1", "net_utils.CrossPath.channel_proj2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "y1", ",", "u1", "=", "self", ".", "act1", "(", "self", ".", "channel_proj1", "(", "x1", ")", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "y2", ",", "u2", "=", "self", ".", "act2", "(", "self", ".", "channel_proj2", "(", "x2", ")", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "v1", ",", "v2", "=", "self", ".", "cross_attn", "(", "u1", ",", "u2", ")", "\n", "y1", "=", "torch", ".", "cat", "(", "(", "y1", ",", "v1", ")", ",", "dim", "=", "-", "1", ")", "\n", "y2", "=", "torch", ".", "cat", "(", "(", "y2", ",", "v2", ")", ",", "dim", "=", "-", "1", ")", "\n", "out_x1", "=", "self", ".", "norm1", "(", "x1", "+", "self", ".", "end_proj1", "(", "y1", ")", ")", "\n", "out_x2", "=", "self", ".", "norm2", "(", "x2", "+", "self", ".", "end_proj2", "(", "y2", ")", ")", "\n", "return", "out_x1", ",", "out_x2", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.ChannelEmbed.__init__": [[137, 149], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "reduction", "=", "1", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "ChannelEmbed", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "residual", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "channel_embed", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", "//", "reduction", ",", "out_channels", "//", "reduction", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "groups", "=", "out_channels", "//", "reduction", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", "//", "reduction", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", "\n", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.ChannelEmbed.forward": [[150, 157], ["net_utils.ChannelEmbed.permute().reshape().contiguous", "net_utils.ChannelEmbed.residual", "net_utils.ChannelEmbed.channel_embed", "net_utils.ChannelEmbed.norm", "net_utils.ChannelEmbed.permute().reshape", "net_utils.ChannelEmbed.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "B", ",", "N", ",", "_C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "B", ",", "_C", ",", "H", ",", "W", ")", ".", "contiguous", "(", ")", "\n", "residual", "=", "self", ".", "residual", "(", "x", ")", "\n", "x", "=", "self", ".", "channel_embed", "(", "x", ")", "\n", "out", "=", "self", ".", "norm", "(", "residual", "+", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.FeatureFusionModule.__init__": [[160, 165], ["torch.Module.__init__", "net_utils.CrossPath", "net_utils.ChannelEmbed", "net_utils.FeatureFusionModule.apply"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "reduction", "=", "1", ",", "num_heads", "=", "None", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cross", "=", "CrossPath", "(", "dim", "=", "dim", ",", "reduction", "=", "reduction", ",", "num_heads", "=", "num_heads", ")", "\n", "self", ".", "channel_emb", "=", "ChannelEmbed", "(", "in_channels", "=", "dim", "*", "2", ",", "out_channels", "=", "dim", ",", "reduction", "=", "reduction", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.FeatureFusionModule._init_weights": [[166, 180], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.net_utils.FeatureFusionModule.forward": [[181, 190], ["x1.flatten().transpose.flatten().transpose.flatten().transpose", "x2.flatten().transpose.flatten().transpose.flatten().transpose", "net_utils.FeatureFusionModule.cross", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_utils.FeatureFusionModule.channel_emb", "x1.flatten().transpose.flatten().transpose.flatten", "x2.flatten().transpose.flatten().transpose.flatten"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "B", ",", "C", ",", "H", ",", "W", "=", "x1", ".", "shape", "\n", "x1", "=", "x1", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x2", "=", "x2", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x1", ",", "x2", "=", "self", ".", "cross", "(", "x1", ",", "x2", ")", "\n", "merge", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "dim", "=", "-", "1", ")", "\n", "merge", "=", "self", ".", "channel_emb", "(", "merge", ",", "H", ",", "W", ")", "\n", "\n", "return", "merge", "", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.builder.EncoderDecoder.__init__": [[14, 88], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.Module.__init__", "logger.info", "backbone", "logger.info", "DecoderHead", "builder.EncoderDecoder.init_weights", "logger.info", "backbone", "logger.info", "UPerHead", "FCNHead", "logger.info", "backbone", "logger.info", "Head", "FCNHead", "logger.info", "FCNHead", "logger.info", "backbone", "logger.info", "backbone", "logger.info", "backbone", "logger.info", "backbone", "logger.info", "backbone"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.RGBXTransformer.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "cfg", "=", "None", ",", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ",", "ignore_index", "=", "255", ")", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "EncoderDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", "\n", "self", ".", "norm_layer", "=", "norm_layer", "\n", "# import backbone and decoder", "\n", "if", "cfg", ".", "backbone", "==", "'swin_s'", ":", "\n", "            ", "logger", ".", "info", "(", "'Using backbone: Swin-Transformer-small'", ")", "\n", "from", ".", "encoders", ".", "dual_swin", "import", "swin_s", "as", "backbone", "\n", "self", ".", "channels", "=", "[", "96", ",", "192", ",", "384", ",", "768", "]", "\n", "self", ".", "backbone", "=", "backbone", "(", "norm_fuse", "=", "norm_layer", ")", "\n", "", "elif", "cfg", ".", "backbone", "==", "'swin_b'", ":", "\n", "            ", "logger", ".", "info", "(", "'Using backbone: Swin-Transformer-Base'", ")", "\n", "from", ".", "encoders", ".", "dual_swin", "import", "swin_b", "as", "backbone", "\n", "self", ".", "channels", "=", "[", "128", ",", "256", ",", "512", ",", "1024", "]", "\n", "self", ".", "backbone", "=", "backbone", "(", "norm_fuse", "=", "norm_layer", ")", "\n", "", "elif", "cfg", ".", "backbone", "==", "'mit_b5'", ":", "\n", "            ", "logger", ".", "info", "(", "'Using backbone: Segformer-B5'", ")", "\n", "from", ".", "encoders", ".", "dual_segformer", "import", "mit_b5", "as", "backbone", "\n", "self", ".", "backbone", "=", "backbone", "(", "norm_fuse", "=", "norm_layer", ")", "\n", "", "elif", "cfg", ".", "backbone", "==", "'mit_b4'", ":", "\n", "            ", "logger", ".", "info", "(", "'Using backbone: Segformer-B4'", ")", "\n", "from", ".", "encoders", ".", "dual_segformer", "import", "mit_b4", "as", "backbone", "\n", "self", ".", "backbone", "=", "backbone", "(", "norm_fuse", "=", "norm_layer", ")", "\n", "", "elif", "cfg", ".", "backbone", "==", "'mit_b2'", ":", "\n", "            ", "logger", ".", "info", "(", "'Using backbone: Segformer-B2'", ")", "\n", "from", ".", "encoders", ".", "dual_segformer", "import", "mit_b2", "as", "backbone", "\n", "self", ".", "backbone", "=", "backbone", "(", "norm_fuse", "=", "norm_layer", ")", "\n", "", "elif", "cfg", ".", "backbone", "==", "'mit_b1'", ":", "\n", "            ", "logger", ".", "info", "(", "'Using backbone: Segformer-B1'", ")", "\n", "from", ".", "encoders", ".", "dual_segformer", "import", "mit_b0", "as", "backbone", "\n", "self", ".", "backbone", "=", "backbone", "(", "norm_fuse", "=", "norm_layer", ")", "\n", "", "elif", "cfg", ".", "backbone", "==", "'mit_b0'", ":", "\n", "            ", "logger", ".", "info", "(", "'Using backbone: Segformer-B0'", ")", "\n", "self", ".", "channels", "=", "[", "32", ",", "64", ",", "160", ",", "256", "]", "\n", "from", ".", "encoders", ".", "dual_segformer", "import", "mit_b0", "as", "backbone", "\n", "self", ".", "backbone", "=", "backbone", "(", "norm_fuse", "=", "norm_layer", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'Using backbone: Segformer-B2'", ")", "\n", "from", ".", "encoders", ".", "dual_segformer", "import", "mit_b2", "as", "backbone", "\n", "self", ".", "backbone", "=", "backbone", "(", "norm_fuse", "=", "norm_layer", ")", "\n", "\n", "", "self", ".", "aux_head", "=", "None", "\n", "\n", "if", "cfg", ".", "decoder", "==", "'MLPDecoder'", ":", "\n", "            ", "logger", ".", "info", "(", "'Using MLP Decoder'", ")", "\n", "from", ".", "decoders", ".", "MLPDecoder", "import", "DecoderHead", "\n", "self", ".", "decode_head", "=", "DecoderHead", "(", "in_channels", "=", "self", ".", "channels", ",", "num_classes", "=", "cfg", ".", "num_classes", ",", "norm_layer", "=", "norm_layer", ",", "embed_dim", "=", "cfg", ".", "decoder_embed_dim", ")", "\n", "\n", "", "elif", "cfg", ".", "decoder", "==", "'UPernet'", ":", "\n", "            ", "logger", ".", "info", "(", "'Using Upernet Decoder'", ")", "\n", "from", ".", "decoders", ".", "UPernet", "import", "UPerHead", "\n", "self", ".", "decode_head", "=", "UPerHead", "(", "in_channels", "=", "self", ".", "channels", ",", "num_classes", "=", "cfg", ".", "num_classes", ",", "norm_layer", "=", "norm_layer", ",", "channels", "=", "512", ")", "\n", "from", ".", "decoders", ".", "fcnhead", "import", "FCNHead", "\n", "self", ".", "aux_index", "=", "2", "\n", "self", ".", "aux_rate", "=", "0.4", "\n", "self", ".", "aux_head", "=", "FCNHead", "(", "self", ".", "channels", "[", "2", "]", ",", "cfg", ".", "num_classes", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "", "elif", "cfg", ".", "decoder", "==", "'deeplabv3+'", ":", "\n", "            ", "logger", ".", "info", "(", "'Using Decoder: DeepLabV3+'", ")", "\n", "from", ".", "decoders", ".", "deeplabv3plus", "import", "DeepLabV3Plus", "as", "Head", "\n", "self", ".", "decode_head", "=", "Head", "(", "in_channels", "=", "self", ".", "channels", ",", "num_classes", "=", "cfg", ".", "num_classes", ",", "norm_layer", "=", "norm_layer", ")", "\n", "from", ".", "decoders", ".", "fcnhead", "import", "FCNHead", "\n", "self", ".", "aux_index", "=", "2", "\n", "self", ".", "aux_rate", "=", "0.4", "\n", "self", ".", "aux_head", "=", "FCNHead", "(", "self", ".", "channels", "[", "2", "]", ",", "cfg", ".", "num_classes", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'No decoder(FCN-32s)'", ")", "\n", "from", ".", "decoders", ".", "fcnhead", "import", "FCNHead", "\n", "self", ".", "decode_head", "=", "FCNHead", "(", "in_channels", "=", "self", ".", "channels", "[", "-", "1", "]", ",", "kernel_size", "=", "3", ",", "num_classes", "=", "cfg", ".", "num_classes", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "", "self", ".", "criterion", "=", "criterion", "\n", "if", "self", ".", "criterion", ":", "\n", "            ", "self", ".", "init_weights", "(", "cfg", ",", "pretrained", "=", "cfg", ".", "pretrained_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.builder.EncoderDecoder.init_weights": [[89, 101], ["logger.info", "utils.init_func.init_weight", "logger.info", "builder.EncoderDecoder.backbone.init_weights", "utils.init_func.init_weight"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.init_func.init_weight", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.RGBXTransformer.init_weights", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.init_func.init_weight"], ["", "", "def", "init_weights", "(", "self", ",", "cfg", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "pretrained", ":", "\n", "            ", "logger", ".", "info", "(", "'Loading pretrained model: {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "", "logger", ".", "info", "(", "'Initing weights ...'", ")", "\n", "init_weight", "(", "self", ".", "decode_head", ",", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "self", ".", "norm_layer", ",", "cfg", ".", "bn_eps", ",", "cfg", ".", "bn_momentum", ",", "\n", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "self", ".", "aux_head", ":", "\n", "            ", "init_weight", "(", "self", ".", "aux_head", ",", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "self", ".", "norm_layer", ",", "cfg", ".", "bn_eps", ",", "cfg", ".", "bn_momentum", ",", "\n", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.builder.EncoderDecoder.encode_decode": [[102, 114], ["builder.EncoderDecoder.backbone", "builder.EncoderDecoder.decode_head.forward", "torch.interpolate", "torch.interpolate", "torch.interpolate", "builder.EncoderDecoder.aux_head", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.RGBXTransformer.forward"], ["", "", "def", "encode_decode", "(", "self", ",", "rgb", ",", "modal_x", ")", ":", "\n", "        ", "\"\"\"Encode images with backbone and decode into a semantic segmentation\n        map of the same size as input.\"\"\"", "\n", "orisize", "=", "rgb", ".", "shape", "\n", "x", "=", "self", ".", "backbone", "(", "rgb", ",", "modal_x", ")", "\n", "out", "=", "self", ".", "decode_head", ".", "forward", "(", "x", ")", "\n", "out", "=", "F", ".", "interpolate", "(", "out", ",", "size", "=", "orisize", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "if", "self", ".", "aux_head", ":", "\n", "            ", "aux_fm", "=", "self", ".", "aux_head", "(", "x", "[", "self", ".", "aux_index", "]", ")", "\n", "aux_fm", "=", "F", ".", "interpolate", "(", "aux_fm", ",", "size", "=", "orisize", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "return", "out", ",", "aux_fm", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.builder.EncoderDecoder.forward": [[115, 126], ["builder.EncoderDecoder.encode_decode", "builder.EncoderDecoder.encode_decode", "builder.EncoderDecoder.criterion", "label.long", "builder.EncoderDecoder.criterion", "label.long"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.builder.EncoderDecoder.encode_decode", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.models.builder.EncoderDecoder.encode_decode"], ["", "def", "forward", "(", "self", ",", "rgb", ",", "modal_x", ",", "label", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "aux_head", ":", "\n", "            ", "out", ",", "aux_fm", "=", "self", ".", "encode_decode", "(", "rgb", ",", "modal_x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "encode_decode", "(", "rgb", ",", "modal_x", ")", "\n", "", "if", "label", "is", "not", "None", ":", "\n", "            ", "loss", "=", "self", ".", "criterion", "(", "out", ",", "label", ".", "long", "(", ")", ")", "\n", "if", "self", ".", "aux_head", ":", "\n", "                ", "loss", "+=", "self", ".", "aux_rate", "*", "self", ".", "criterion", "(", "aux_fm", ",", "label", ".", "long", "(", ")", ")", "\n", "", "return", "loss", "\n", "", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.fcnhead.FCNHead.__init__": [[10, 25], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "384", ",", "channels", "=", "None", ",", "kernel_size", "=", "3", ",", "dilation", "=", "1", ",", "\n", "num_classes", "=", "40", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "FCNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "channels", "=", "channels", "or", "in_channels", "//", "4", "\n", "\n", "conv_padding", "=", "(", "kernel_size", "//", "2", ")", "*", "dilation", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "channels", ",", "kernel_size", ",", "padding", "=", "conv_padding", ")", ",", "\n", "norm_layer", "(", "self", ".", "channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.fcnhead.FCNHead.forward": [[26, 30], ["fcnhead.FCNHead.conv", "fcnhead.FCNHead.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "conv", "(", "x", ")", "\n", "output", "=", "self", ".", "classifier", "(", "output", ")", "\n", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.UPernet.UPerHead.__init__": [[17, 57], ["torch.Module.__init__", "UPernet.PPM", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "UPernet.UPerHead.lateral_convs.append", "UPernet.UPerHead.fpn_convs.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "len"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", "=", "[", "96", ",", "192", ",", "384", ",", "768", "]", ",", "num_classes", "=", "40", ",", "channels", "=", "512", ",", "pool_scales", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "dropout_ratio", "=", "0.1", ",", "align_corners", "=", "False", ")", ":", "\n", "        ", "super", "(", "UPerHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "# PSP Module", "\n", "self", ".", "psp_modules", "=", "PPM", "(", "\n", "pool_scales", ",", "\n", "self", ".", "in_channels", "[", "-", "1", "]", ",", "\n", "self", ".", "channels", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", "[", "-", "1", "]", "+", "len", "(", "pool_scales", ")", "*", "self", ".", "channels", ",", "self", ".", "channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "self", ".", "channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "# FPN Module", "\n", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "fpn_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "in_channels", "in", "self", ".", "in_channels", "[", ":", "-", "1", "]", ":", "# skip the top layer", "\n", "            ", "l_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "self", ".", "channels", ",", "1", ")", ",", "\n", "norm_layer", "(", "self", ".", "channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "fpn_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "self", ".", "channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", ")", "\n", "self", ".", "lateral_convs", ".", "append", "(", "l_conv", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "fpn_conv", ")", "\n", "\n", "", "self", ".", "fpn_bottleneck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "len", "(", "self", ".", "in_channels", ")", "*", "self", ".", "channels", ",", "self", ".", "channels", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "self", ".", "channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "conv_seg", "=", "nn", ".", "Conv2d", "(", "channels", ",", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.UPernet.UPerHead.psp_forward": [[58, 67], ["torch.cat.extend", "torch.cat.extend", "torch.cat.extend", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "UPernet.UPerHead.bottleneck", "UPernet.UPerHead.psp_modules"], "methods", ["None"], ["", "def", "psp_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function of PSP module.\"\"\"", "\n", "x", "=", "inputs", "[", "-", "1", "]", "\n", "psp_outs", "=", "[", "x", "]", "\n", "psp_outs", ".", "extend", "(", "self", ".", "psp_modules", "(", "x", ")", ")", "\n", "psp_outs", "=", "torch", ".", "cat", "(", "psp_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "psp_outs", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.UPernet.UPerHead.forward": [[68, 105], ["laterals.append", "len", "range", "torch.cat.append", "torch.cat.append", "torch.cat.append", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "UPernet.UPerHead.fpn_bottleneck", "UPernet.UPerHead.conv_seg", "lateral_conv", "UPernet.UPerHead.psp_forward", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "enumerate", "range"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.UPernet.UPerHead.psp_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# build laterals", "\n", "        ", "laterals", "=", "[", "\n", "lateral_conv", "(", "inputs", "[", "i", "]", ")", "\n", "for", "i", ",", "lateral_conv", "in", "enumerate", "(", "self", ".", "lateral_convs", ")", "\n", "]", "\n", "laterals", ".", "append", "(", "self", ".", "psp_forward", "(", "inputs", ")", ")", "\n", "\n", "# build top-down path", "\n", "used_backbone_levels", "=", "len", "(", "laterals", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "prev_shape", "=", "laterals", "[", "i", "-", "1", "]", ".", "shape", "[", "2", ":", "]", "\n", "laterals", "[", "i", "-", "1", "]", "+=", "F", ".", "interpolate", "(", "\n", "laterals", "[", "i", "]", ",", "\n", "size", "=", "prev_shape", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n", "# build outputs", "\n", "", "fpn_outs", "=", "[", "\n", "self", ".", "fpn_convs", "[", "i", "]", "(", "laterals", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ")", "\n", "]", "\n", "# append psp feature", "\n", "fpn_outs", ".", "append", "(", "laterals", "[", "-", "1", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "fpn_outs", "[", "i", "]", "=", "F", ".", "interpolate", "(", "\n", "fpn_outs", "[", "i", "]", ",", "\n", "size", "=", "fpn_outs", "[", "0", "]", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "", "fpn_outs", "=", "torch", ".", "cat", "(", "fpn_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "fpn_bottleneck", "(", "fpn_outs", ")", "\n", "output", "=", "self", ".", "conv_seg", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.UPernet.PPM.__init__": [[120, 133], ["torch.ModuleList.__init__", "UPernet.PPM.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "pool_scales", ",", "in_channel", ",", "channels", ",", "norm_layer", ",", "align_corners", "=", "False", ")", ":", "\n", "        ", "super", "(", "PPM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool_scales", "=", "pool_scales", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "self", ".", "in_channel", "=", "in_channel", "\n", "self", ".", "channels", "=", "channels", "\n", "for", "pool_scale", "in", "pool_scales", ":", "\n", "            ", "self", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "pool_scale", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_channel", ",", "self", ".", "channels", ",", "1", ")", ",", "\n", "norm_layer", "(", "self", ".", "channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.UPernet.PPM.forward": [[135, 147], ["ppm", "torch.interpolate", "torch.interpolate", "torch.interpolate", "ppm_outs.append", "x.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "ppm_outs", "=", "[", "]", "\n", "for", "ppm", "in", "self", ":", "\n", "            ", "ppm_out", "=", "ppm", "(", "x", ")", "\n", "upsampled_ppm_out", "=", "F", ".", "interpolate", "(", "\n", "ppm_out", ",", "\n", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "ppm_outs", ".", "append", "(", "upsampled_ppm_out", ")", "\n", "", "return", "ppm_outs", "", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.deeplabv3plus.DeepLabV3Plus.__init__": [[7, 27], ["torch.Module.__init__", "deeplabv3plus.ASPP", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "num_classes", "=", "40", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "DeepLabV3Plus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "aspp", "=", "ASPP", "(", "in_channels", "=", "in_channels", "[", "3", "]", ",", "atrous_rates", "=", "[", "12", ",", "24", ",", "36", "]", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "low_level", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "[", "0", "]", ",", "48", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "48", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "304", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "norm_layer", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "#nn.Dropout(0.5),", "\n", "#nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),", "\n", "#norm_layer(256),", "\n", "#nn.ReLU(inplace=True),", "\n", "nn", ".", "Dropout", "(", "0.1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.deeplabv3plus.DeepLabV3Plus.forward": [[28, 35], ["deeplabv3plus.DeepLabV3Plus.low_level", "deeplabv3plus.DeepLabV3Plus.aspp", "torch.interpolate", "torch.interpolate", "torch.interpolate", "deeplabv3plus.DeepLabV3Plus.block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplabv3plus.DeepLabV3Plus.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "c1", ",", "_", ",", "_", ",", "c4", "=", "inputs", "\n", "c1", "=", "self", ".", "low_level", "(", "c1", ")", "\n", "c4", "=", "self", ".", "aspp", "(", "c4", ")", "\n", "c4", "=", "F", ".", "interpolate", "(", "c4", ",", "c1", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "output", "=", "self", ".", "block", "(", "torch", ".", "cat", "(", "[", "c4", ",", "c1", "]", ",", "dim", "=", "1", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.deeplabv3plus.ASPPConv.__init__": [[38, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "atrous_rate", ",", "norm_layer", ")", ":", "\n", "        ", "super", "(", "ASPPConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "atrous_rate", ",", "dilation", "=", "atrous_rate", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.deeplabv3plus.ASPPConv.forward": [[46, 48], ["deeplabv3plus.ASPPConv.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.deeplabv3plus.AsppPooling.__init__": [[51, 58], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "norm_layer", ")", ":", "\n", "        ", "super", "(", "AsppPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gap", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.deeplabv3plus.AsppPooling.forward": [[60, 65], ["deeplabv3plus.AsppPooling.gap", "torch.interpolate", "torch.interpolate", "torch.interpolate", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "pool", "=", "self", ".", "gap", "(", "x", ")", "\n", "out", "=", "F", ".", "interpolate", "(", "pool", ",", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.deeplabv3plus.ASPP.__init__": [[68, 88], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "tuple", "deeplabv3plus.ASPPConv", "deeplabv3plus.ASPPConv", "deeplabv3plus.ASPPConv", "deeplabv3plus.AsppPooling", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "atrous_rates", ",", "norm_layer", ")", ":", "\n", "        ", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "256", "\n", "self", ".", "b0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "rate1", ",", "rate2", ",", "rate3", "=", "tuple", "(", "atrous_rates", ")", "\n", "self", ".", "b1", "=", "ASPPConv", "(", "in_channels", ",", "out_channels", ",", "rate1", ",", "norm_layer", ")", "\n", "self", ".", "b2", "=", "ASPPConv", "(", "in_channels", ",", "out_channels", ",", "rate2", ",", "norm_layer", ")", "\n", "self", ".", "b3", "=", "ASPPConv", "(", "in_channels", ",", "out_channels", ",", "rate3", ",", "norm_layer", ")", "\n", "self", ".", "b4", "=", "AsppPooling", "(", "in_channels", ",", "out_channels", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "5", "*", "out_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_layer", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.deeplabv3plus.ASPP.forward": [[90, 99], ["deeplabv3plus.ASPP.b0", "deeplabv3plus.ASPP.b1", "deeplabv3plus.ASPP.b2", "deeplabv3plus.ASPP.b3", "deeplabv3plus.ASPP.b4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplabv3plus.ASPP.project"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat1", "=", "self", ".", "b0", "(", "x", ")", "\n", "feat2", "=", "self", ".", "b1", "(", "x", ")", "\n", "feat3", "=", "self", ".", "b2", "(", "x", ")", "\n", "feat4", "=", "self", ".", "b3", "(", "x", ")", "\n", "feat5", "=", "self", ".", "b4", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "feat1", ",", "feat2", ",", "feat3", ",", "feat4", ",", "feat5", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "project", "(", "x", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.MLPDecoder.MLP.__init__": [[12, 15], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", "=", "2048", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "input_dim", ",", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.MLPDecoder.MLP.forward": [[16, 20], ["MLPDecoder.MLP.flatten().transpose", "MLPDecoder.MLP.proj", "MLPDecoder.MLP.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.MLPDecoder.DecoderHead.__init__": [[23, 58], ["torch.Module.__init__", "MLPDecoder.MLP", "MLPDecoder.MLP", "MLPDecoder.MLP", "MLPDecoder.MLP", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "\n", "num_classes", "=", "40", ",", "\n", "dropout_ratio", "=", "0.1", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "embed_dim", "=", "768", ",", "\n", "align_corners", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "DecoderHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "dropout_ratio", "=", "dropout_ratio", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "\n", "if", "dropout_ratio", ">", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "dropout_ratio", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "None", "\n", "\n", "", "c1_in_channels", ",", "c2_in_channels", ",", "c3_in_channels", ",", "c4_in_channels", "=", "self", ".", "in_channels", "\n", "\n", "embedding_dim", "=", "embed_dim", "\n", "self", ".", "linear_c4", "=", "MLP", "(", "input_dim", "=", "c4_in_channels", ",", "embed_dim", "=", "embedding_dim", ")", "\n", "self", ".", "linear_c3", "=", "MLP", "(", "input_dim", "=", "c3_in_channels", ",", "embed_dim", "=", "embedding_dim", ")", "\n", "self", ".", "linear_c2", "=", "MLP", "(", "input_dim", "=", "c2_in_channels", ",", "embed_dim", "=", "embedding_dim", ")", "\n", "self", ".", "linear_c1", "=", "MLP", "(", "input_dim", "=", "c1_in_channels", ",", "embed_dim", "=", "embedding_dim", ")", "\n", "\n", "self", ".", "linear_fuse", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "embedding_dim", "*", "4", ",", "out_channels", "=", "embedding_dim", ",", "kernel_size", "=", "1", ")", ",", "\n", "norm_layer", "(", "embedding_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "linear_pred", "=", "nn", ".", "Conv2d", "(", "embedding_dim", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.decoders.MLPDecoder.DecoderHead.forward": [[59, 82], ["MLPDecoder.DecoderHead.linear_c4().permute().reshape", "torch.interpolate", "torch.interpolate", "torch.interpolate", "MLPDecoder.DecoderHead.linear_c3().permute().reshape", "torch.interpolate", "torch.interpolate", "torch.interpolate", "MLPDecoder.DecoderHead.linear_c2().permute().reshape", "torch.interpolate", "torch.interpolate", "torch.interpolate", "MLPDecoder.DecoderHead.linear_c1().permute().reshape", "MLPDecoder.DecoderHead.linear_fuse", "MLPDecoder.DecoderHead.dropout", "MLPDecoder.DecoderHead.linear_pred", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "MLPDecoder.DecoderHead.linear_c4().permute", "MLPDecoder.DecoderHead.linear_c3().permute", "MLPDecoder.DecoderHead.linear_c2().permute", "MLPDecoder.DecoderHead.linear_c1().permute", "c1.size", "c1.size", "c1.size", "MLPDecoder.DecoderHead.linear_c4", "MLPDecoder.DecoderHead.linear_c3", "MLPDecoder.DecoderHead.linear_c2", "MLPDecoder.DecoderHead.linear_c1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# len=4, 1/4,1/8,1/16,1/32", "\n", "        ", "c1", ",", "c2", ",", "c3", ",", "c4", "=", "inputs", "\n", "\n", "############## MLP decoder on C1-C4 ###########", "\n", "n", ",", "_", ",", "h", ",", "w", "=", "c4", ".", "shape", "\n", "\n", "_c4", "=", "self", ".", "linear_c4", "(", "c4", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "n", ",", "-", "1", ",", "c4", ".", "shape", "[", "2", "]", ",", "c4", ".", "shape", "[", "3", "]", ")", "\n", "_c4", "=", "F", ".", "interpolate", "(", "_c4", ",", "size", "=", "c1", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n", "_c3", "=", "self", ".", "linear_c3", "(", "c3", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "n", ",", "-", "1", ",", "c3", ".", "shape", "[", "2", "]", ",", "c3", ".", "shape", "[", "3", "]", ")", "\n", "_c3", "=", "F", ".", "interpolate", "(", "_c3", ",", "size", "=", "c1", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n", "_c2", "=", "self", ".", "linear_c2", "(", "c2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "n", ",", "-", "1", ",", "c2", ".", "shape", "[", "2", "]", ",", "c2", ".", "shape", "[", "3", "]", ")", "\n", "_c2", "=", "F", ".", "interpolate", "(", "_c2", ",", "size", "=", "c1", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n", "_c1", "=", "self", ".", "linear_c1", "(", "c1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "n", ",", "-", "1", ",", "c1", ".", "shape", "[", "2", "]", ",", "c1", ".", "shape", "[", "3", "]", ")", "\n", "\n", "_c", "=", "self", ".", "linear_fuse", "(", "torch", ".", "cat", "(", "[", "_c4", ",", "_c3", ",", "_c2", ",", "_c1", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "_c", ")", "\n", "x", "=", "self", ".", "linear_pred", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.Mlp.__init__": [[29, 37], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.Mlp.forward": [[38, 45], ["dual_swin.Mlp.fc1", "dual_swin.Mlp.act", "dual_swin.Mlp.drop", "dual_swin.Mlp.fc2", "dual_swin.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.WindowAttention.__init__": [[90, 123], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "dual_swin.WindowAttention.register_buffer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "timm.models.layers.trunc_normal_", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "window_size", ",", "num_heads", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "window_size", "=", "window_size", "# Wh, Ww", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "# define a parameter table of relative position bias", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "window_size", "[", "1", "]", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "0", "]", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "1", "]", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "self", ".", "window_size", "[", "0", "]", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.WindowAttention.forward": [[124, 156], ["dual_swin.WindowAttention.qkv().reshape().permute", "dual_swin.WindowAttention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "dual_swin.WindowAttention.attn_drop", "dual_swin.WindowAttention.proj", "dual_swin.WindowAttention.proj_drop", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "dual_swin.WindowAttention.view", "dual_swin.WindowAttention.softmax", "dual_swin.WindowAttention.softmax", "dual_swin.WindowAttention.qkv().reshape", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "dual_swin.WindowAttention.view", "mask.unsqueeze().unsqueeze", "dual_swin.WindowAttention.qkv", "dual_swin.WindowAttention.relative_position_index.view", "mask.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" Forward function.\n        Args:\n            x: input features with shape of (num_windows*B, N, C)\n            mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None\n        \"\"\"", "\n", "B_", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B_", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "nW", "=", "mask", ".", "shape", "[", "0", "]", "\n", "attn", "=", "attn", ".", "view", "(", "B_", "//", "nW", ",", "nW", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "+", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "attn", "=", "attn", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "\n", "", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B_", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.SwinTransformerBlock.__init__": [[175, 198], ["torch.Module.__init__", "norm_layer", "dual_swin.WindowAttention", "norm_layer", "int", "dual_swin.Mlp", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "timm.models.layers.to_2tuple"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "window_size", "=", "7", ",", "shift_size", "=", "0", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "shift_size", "=", "shift_size", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "assert", "0", "<=", "self", ".", "shift_size", "<", "self", ".", "window_size", ",", "\"shift_size must in 0-window_size\"", "\n", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "WindowAttention", "(", "\n", "dim", ",", "window_size", "=", "to_2tuple", "(", "self", ".", "window_size", ")", ",", "num_heads", "=", "num_heads", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n", "self", ".", "H", "=", "None", "\n", "self", ".", "W", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.SwinTransformerBlock.forward": [[199, 256], ["dual_swin.SwinTransformerBlock.norm1", "x[].contiguous.view", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "dual_swin.window_partition", "x_windows.view.view.view", "dual_swin.SwinTransformerBlock.attn", "attn_windows.view.view.view", "dual_swin.window_reverse", "x[].contiguous.view", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "x[].contiguous", "dual_swin.SwinTransformerBlock.drop_path", "dual_swin.SwinTransformerBlock.drop_path", "dual_swin.SwinTransformerBlock.mlp", "dual_swin.SwinTransformerBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.window_partition", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.window_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask_matrix", ")", ":", "\n", "        ", "\"\"\" Forward function.\n        Args:\n            x: Input feature, tensor size (B, H*W, C).\n            H, W: Spatial resolution of the input feature.\n            mask_matrix: Attention mask for cyclic shift.\n        \"\"\"", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "H", ",", "W", "=", "self", ".", "H", ",", "self", ".", "W", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "\n", "shortcut", "=", "x", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# pad feature maps to multiples of window size", "\n", "pad_l", "=", "pad_t", "=", "0", "\n", "pad_r", "=", "(", "self", ".", "window_size", "-", "W", "%", "self", ".", "window_size", ")", "%", "self", ".", "window_size", "\n", "pad_b", "=", "(", "self", ".", "window_size", "-", "H", "%", "self", ".", "window_size", ")", "%", "self", ".", "window_size", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "pad_l", ",", "pad_r", ",", "pad_t", ",", "pad_b", ")", ")", "\n", "_", ",", "Hp", ",", "Wp", ",", "_", "=", "x", ".", "shape", "\n", "\n", "# cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "shifted_x", "=", "torch", ".", "roll", "(", "x", ",", "shifts", "=", "(", "-", "self", ".", "shift_size", ",", "-", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "attn_mask", "=", "mask_matrix", "\n", "", "else", ":", "\n", "            ", "shifted_x", "=", "x", "\n", "attn_mask", "=", "None", "\n", "\n", "# partition windows", "\n", "", "x_windows", "=", "window_partition", "(", "shifted_x", ",", "self", ".", "window_size", ")", "# nW*B, window_size, window_size, C", "\n", "x_windows", "=", "x_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# W-MSA/SW-MSA", "\n", "attn_windows", "=", "self", ".", "attn", "(", "x_windows", ",", "mask", "=", "attn_mask", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# merge windows", "\n", "attn_windows", "=", "attn_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "shifted_x", "=", "window_reverse", "(", "attn_windows", ",", "self", ".", "window_size", ",", "Hp", ",", "Wp", ")", "# B H' W' C", "\n", "\n", "# reverse cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "x", "=", "torch", ".", "roll", "(", "shifted_x", ",", "shifts", "=", "(", "self", ".", "shift_size", ",", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "shifted_x", "\n", "\n", "", "if", "pad_r", ">", "0", "or", "pad_b", ">", "0", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", "H", ",", ":", "W", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "# FFN", "\n", "x", "=", "shortcut", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.PatchMerging.__init__": [[264, 269], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "reduction", "=", "nn", ".", "Linear", "(", "4", "*", "dim", ",", "2", "*", "dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "4", "*", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.PatchMerging.forward": [[270, 298], ["torch.pad.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.pad.view", "dual_swin.PatchMerging.norm", "dual_swin.PatchMerging.reduction", "torch.pad", "torch.pad", "torch.pad", "torch.pad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "\"\"\" Forward function.\n        Args:\n            x: Input feature, tensor size (B, H*W, C).\n            H, W: Spatial resolution of the input feature.\n        \"\"\"", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# padding", "\n", "pad_input", "=", "(", "H", "%", "2", "==", "1", ")", "or", "(", "W", "%", "2", "==", "1", ")", "\n", "if", "pad_input", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "W", "%", "2", ",", "0", ",", "H", "%", "2", ")", ")", "\n", "\n", "", "x0", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x1", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x2", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x3", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x0", ",", "x1", ",", "x2", ",", "x3", "]", ",", "-", "1", ")", "# B H/2 W/2 4*C", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "4", "*", "C", ")", "# B H/2*W/2 4*C", "\n", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "reduction", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.BasicLayer.__init__": [[318, 352], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "dual_swin.SwinTransformerBlock", "range", "isinstance"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "\n", "dim", ",", "\n", "depth", ",", "\n", "num_heads", ",", "\n", "window_size", "=", "7", ",", "\n", "mlp_ratio", "=", "4.", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop", "=", "0.", ",", "\n", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "\n", "use_checkpoint", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "shift_size", "=", "window_size", "//", "2", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "\n", "# build blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "SwinTransformerBlock", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "window_size", "=", "window_size", ",", "\n", "shift_size", "=", "0", "if", "(", "i", "%", "2", "==", "0", ")", "else", "window_size", "//", "2", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", "[", "i", "]", "if", "isinstance", "(", "drop_path", ",", "list", ")", "else", "drop_path", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.BasicLayer.forward": [[355, 390], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "dual_swin.window_partition", "mask_windows.view.view.view", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill().masked_fill", "int", "int", "slice", "slice", "slice", "slice", "slice", "slice", "mask_windows.view.view.unsqueeze", "mask_windows.view.view.unsqueeze", "float", "numpy.ceil", "numpy.ceil", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "blk", "float"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.window_partition"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "\"\"\" Forward function.\n        Args:\n            x: Input feature, tensor size (B, H*W, C).\n            H, W: Spatial resolution of the input feature.\n        \"\"\"", "\n", "\n", "# calculate attention mask for SW-MSA", "\n", "Hp", "=", "int", "(", "np", ".", "ceil", "(", "H", "/", "self", ".", "window_size", ")", ")", "*", "self", ".", "window_size", "\n", "Wp", "=", "int", "(", "np", ".", "ceil", "(", "W", "/", "self", ".", "window_size", ")", ")", "*", "self", ".", "window_size", "\n", "img_mask", "=", "torch", ".", "zeros", "(", "(", "1", ",", "Hp", ",", "Wp", ",", "1", ")", ",", "device", "=", "x", ".", "device", ")", "# 1 Hp Wp 1", "\n", "h_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "w_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "cnt", "=", "0", "\n", "for", "h", "in", "h_slices", ":", "\n", "            ", "for", "w", "in", "w_slices", ":", "\n", "                ", "img_mask", "[", ":", ",", "h", ",", "w", ",", ":", "]", "=", "cnt", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "mask_windows", "=", "window_partition", "(", "img_mask", ",", "self", ".", "window_size", ")", "# nW, window_size, window_size, 1", "\n", "mask_windows", "=", "mask_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ")", "\n", "attn_mask", "=", "mask_windows", ".", "unsqueeze", "(", "1", ")", "-", "mask_windows", ".", "unsqueeze", "(", "2", ")", "\n", "attn_mask", "=", "attn_mask", ".", "masked_fill", "(", "attn_mask", "!=", "0", ",", "float", "(", "-", "100.0", ")", ")", ".", "masked_fill", "(", "attn_mask", "==", "0", ",", "float", "(", "0.0", ")", ")", "\n", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "blk", ".", "H", ",", "blk", ".", "W", "=", "H", ",", "W", "\n", "if", "self", ".", "use_checkpoint", ":", "\n", "                ", "x", "=", "checkpoint", ".", "checkpoint", "(", "blk", ",", "x", ",", "attn_mask", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "blk", "(", "x", ",", "attn_mask", ")", "\n", "", "", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.PatchEmbed.__init__": [[401, 414], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "96", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "if", "norm_layer", "is", "not", "None", ":", "\n", "            ", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.PatchEmbed.forward": [[415, 432], ["x.transpose().view.transpose().view.size", "dual_swin.PatchEmbed.proj", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "x.transpose().view.transpose().view.flatten().transpose", "dual_swin.PatchEmbed.norm", "x.transpose().view.transpose().view.transpose().view", "x.transpose().view.transpose().view.size", "x.transpose().view.transpose().view.size", "x.transpose().view.transpose().view.flatten", "x.transpose().view.transpose().view.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "# padding", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "if", "W", "%", "self", ".", "patch_size", "[", "1", "]", "!=", "0", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "self", ".", "patch_size", "[", "1", "]", "-", "W", "%", "self", ".", "patch_size", "[", "1", "]", ")", ")", "\n", "", "if", "H", "%", "self", ".", "patch_size", "[", "0", "]", "!=", "0", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "self", ".", "patch_size", "[", "0", "]", "-", "H", "%", "self", ".", "patch_size", "[", "0", "]", ")", ")", "\n", "\n", "", "x", "=", "self", ".", "proj", "(", "x", ")", "# B C Wh Ww", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "Wh", ",", "Ww", "=", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "-", "1", ",", "self", ".", "embed_dim", ",", "Wh", ",", "Ww", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.DualSwinTransformer.__init__": [[462, 584], ["torch.Module.__init__", "len", "dual_swin.PatchEmbed", "dual_swin.PatchEmbed", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "dual_swin.DualSwinTransformer._freeze_stages", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.trunc_normal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.trunc_normal_", "x.item", "dual_swin.BasicLayer", "dual_swin.DualSwinTransformer.layers.append", "dual_swin.BasicLayer", "dual_swin.DualSwinTransformer.layers_d.append", "net_utils.FeatureRectifyModule", "dual_swin.DualSwinTransformer.FRMs.append", "net_utils.FeatureFusionModule", "dual_swin.DualSwinTransformer.FFMs.append", "int", "norm_layer", "dual_swin.DualSwinTransformer.add_module", "norm_layer", "dual_swin.DualSwinTransformer.add_module", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "dual_swin.PatchMerging", "dual_swin.DualSwinTransformer.downsamples.append", "dual_swin.PatchMerging", "dual_swin.DualSwinTransformer.downsamples_d.append", "range", "sum", "int", "int", "int", "int", "int", "int", "sum", "sum", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.DualSwinTransformer._freeze_stages"], ["def", "__init__", "(", "self", ",", "\n", "pretrain_img_size", "=", "224", ",", "\n", "patch_size", "=", "4", ",", "\n", "in_chans", "=", "3", ",", "\n", "embed_dim", "=", "96", ",", "\n", "depths", "=", "[", "2", ",", "2", ",", "6", ",", "2", "]", ",", "\n", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "window_size", "=", "7", ",", "\n", "mlp_ratio", "=", "4.", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.", ",", "\n", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.2", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "\n", "norm_fuse", "=", "nn", ".", "BatchNorm2d", ",", "\n", "ape", "=", "False", ",", "\n", "patch_norm", "=", "True", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "use_checkpoint", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pretrain_img_size", "=", "pretrain_img_size", "\n", "self", ".", "num_layers", "=", "len", "(", "depths", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "ape", "=", "ape", "\n", "self", ".", "patch_norm", "=", "patch_norm", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "\n", "# split image into non-overlapping patches", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ",", "\n", "norm_layer", "=", "norm_layer", "if", "self", ".", "patch_norm", "else", "None", ")", "\n", "\n", "# split depth into non-overlapping patches", "\n", "self", ".", "patch_embed_d", "=", "PatchEmbed", "(", "\n", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ",", "\n", "norm_layer", "=", "norm_layer", "if", "self", ".", "patch_norm", "else", "None", ")", "\n", "\n", "# absolute position embedding", "\n", "if", "self", ".", "ape", ":", "\n", "            ", "pretrain_img_size", "=", "to_2tuple", "(", "pretrain_img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "patches_resolution", "=", "[", "pretrain_img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "pretrain_img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", "]", "\n", "\n", "self", ".", "absolute_pos_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "embed_dim", ",", "patches_resolution", "[", "0", "]", ",", "patches_resolution", "[", "1", "]", ")", ")", "\n", "trunc_normal_", "(", "self", ".", "absolute_pos_embed", ",", "std", "=", ".02", ")", "\n", "\n", "self", ".", "absolute_pos_embed_d", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "embed_dim", ",", "patches_resolution", "[", "0", "]", ",", "patches_resolution", "[", "1", "]", ")", ")", "\n", "trunc_normal_", "(", "self", ".", "absolute_pos_embed_d", ",", "std", "=", ".02", ")", "\n", "\n", "", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "self", ".", "pos_drop_d", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "# stochastic depth", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "# stochastic depth decay rule", "\n", "\n", "# build layers and fusemodules", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "layers_d", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "downsamples", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "downsamples_d", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "FRMs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "FFMs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i_layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layer", "=", "BasicLayer", "(", "\n", "dim", "=", "int", "(", "embed_dim", "*", "2", "**", "i_layer", ")", ",", "\n", "depth", "=", "depths", "[", "i_layer", "]", ",", "\n", "num_heads", "=", "num_heads", "[", "i_layer", "]", ",", "\n", "window_size", "=", "window_size", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "sum", "(", "depths", "[", ":", "i_layer", "]", ")", ":", "sum", "(", "depths", "[", ":", "i_layer", "+", "1", "]", ")", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "\n", "layer_d", "=", "BasicLayer", "(", "\n", "dim", "=", "int", "(", "embed_dim", "*", "2", "**", "i_layer", ")", ",", "\n", "depth", "=", "depths", "[", "i_layer", "]", ",", "\n", "num_heads", "=", "num_heads", "[", "i_layer", "]", ",", "\n", "window_size", "=", "window_size", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "sum", "(", "depths", "[", ":", "i_layer", "]", ")", ":", "sum", "(", "depths", "[", ":", "i_layer", "+", "1", "]", ")", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ")", "\n", "self", ".", "layers_d", ".", "append", "(", "layer_d", ")", "\n", "\n", "fr", "=", "FRM", "(", "dim", "=", "int", "(", "embed_dim", "*", "2", "**", "i_layer", ")", ",", "reduction", "=", "1", ")", "\n", "self", ".", "FRMs", ".", "append", "(", "fr", ")", "\n", "# patch merging layer", "\n", "if", "i_layer", "<", "self", ".", "num_layers", "-", "1", ":", "\n", "                ", "downsample", "=", "PatchMerging", "(", "dim", "=", "int", "(", "embed_dim", "*", "2", "**", "i_layer", ")", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "downsamples", ".", "append", "(", "downsample", ")", "\n", "downsample_d", "=", "PatchMerging", "(", "dim", "=", "int", "(", "embed_dim", "*", "2", "**", "i_layer", ")", ",", "norm_layer", "=", "norm_layer", ")", "\n", "self", ".", "downsamples_d", ".", "append", "(", "downsample_d", ")", "\n", "\n", "", "fuse", "=", "FFM", "(", "dim", "=", "int", "(", "embed_dim", "*", "2", "**", "i_layer", ")", ",", "reduction", "=", "1", ",", "num_heads", "=", "num_heads", "[", "i_layer", "]", ",", "norm_layer", "=", "norm_fuse", ")", "\n", "self", ".", "FFMs", ".", "append", "(", "fuse", ")", "\n", "\n", "", "num_features", "=", "[", "int", "(", "embed_dim", "*", "2", "**", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", "]", "\n", "self", ".", "num_features", "=", "num_features", "\n", "\n", "# add a norm layer for each output", "\n", "for", "i_layer", "in", "out_indices", ":", "\n", "            ", "layer", "=", "norm_layer", "(", "num_features", "[", "i_layer", "]", ")", "\n", "layer_name", "=", "f'norm{i_layer}'", "\n", "self", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "layer_d", "=", "norm_layer", "(", "num_features", "[", "i_layer", "]", ")", "\n", "layer_name_d", "=", "f'norm_d{i_layer}'", "\n", "self", ".", "add_module", "(", "layer_name_d", ",", "layer_d", ")", "\n", "\n", "", "self", ".", "_freeze_stages", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.DualSwinTransformer._freeze_stages": [[585, 601], ["dual_swin.DualSwinTransformer.patch_embed.eval", "dual_swin.DualSwinTransformer.patch_embed.parameters", "dual_swin.DualSwinTransformer.pos_drop.eval", "range", "m.eval", "m.parameters"], "methods", ["None"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "self", ".", "patch_embed", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "patch_embed", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "if", "self", ".", "frozen_stages", ">=", "1", "and", "self", ".", "ape", ":", "\n", "            ", "self", ".", "absolute_pos_embed", ".", "requires_grad", "=", "False", "\n", "\n", "", "if", "self", ".", "frozen_stages", ">=", "2", ":", "\n", "            ", "self", ".", "pos_drop", ".", "eval", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "frozen_stages", "-", "1", ")", ":", "\n", "                ", "m", "=", "self", ".", "layers", "[", "i", "]", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.DualSwinTransformer.init_weights": [[602, 624], ["isinstance", "isinstance", "dual_swin.DualSwinTransformer.apply", "dual_swin.load_dualpath_model", "timm.models.layers.trunc_normal_", "isinstance", "dual_swin.DualSwinTransformer.apply", "TypeError", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.load_dualpath_model"], ["", "", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the weights in backbone.\n        Args:\n            pretrained (str, optional): Path to pre-trained weights.\n                Defaults to None.\n        \"\"\"", "\n", "def", "_init_weights", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n", "", "", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "self", ".", "apply", "(", "_init_weights", ")", "\n", "load_dualpath_model", "(", "self", ",", "pretrained", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "self", ".", "apply", "(", "_init_weights", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.DualSwinTransformer.forward": [[625, 679], ["dual_swin.DualSwinTransformer.patch_embed", "dual_swin.DualSwinTransformer.patch_embed_d", "dual_swin.DualSwinTransformer.pos_drop", "dual_swin.DualSwinTransformer.pos_drop_d", "range", "tuple", "x_d.flatten().transpose.flatten().transpose.size", "x_d.flatten().transpose.flatten().transpose.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "x_d.flatten().transpose.flatten().transpose.flatten().transpose", "x_d.flatten().transpose.flatten().transpose.flatten().transpose", "layer", "layer_d", "x_d.flatten().transpose.flatten().transpose.view().permute().contiguous", "x_d.flatten().transpose.flatten().transpose.view().permute().contiguous", "x_d.flatten().transpose.flatten().transpose.flatten().transpose", "x_d.flatten().transpose.flatten().transpose.flatten().transpose", "getattr", "getattr.", "getattr", "getattr.", "x_out.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "x_out_d.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "outs.append", "x_d.flatten().transpose.flatten().transpose.flatten", "x_d.flatten().transpose.flatten().transpose.flatten", "x_d.flatten().transpose.flatten().transpose.view().permute", "x_d.flatten().transpose.flatten().transpose.view().permute", "x_d.flatten().transpose.flatten().transpose.flatten", "x_d.flatten().transpose.flatten().transpose.flatten", "x_out.view().permute().contiguous.view().permute().contiguous.view().permute", "x_out_d.view().permute().contiguous.view().permute().contiguous.view().permute", "x_d.flatten().transpose.flatten().transpose.view", "x_d.flatten().transpose.flatten().transpose.view", "x_out.view().permute().contiguous.view().permute().contiguous.view", "x_out_d.view().permute().contiguous.view().permute().contiguous.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "x_d", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "x_d", "=", "self", ".", "patch_embed_d", "(", "x_d", ")", "\n", "\n", "Wh", ",", "Ww", "=", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "if", "self", ".", "ape", ":", "\n", "# interpolate the position embedding to the corresponding size", "\n", "            ", "absolute_pos_embed", "=", "F", ".", "interpolate", "(", "self", ".", "absolute_pos_embed", ",", "size", "=", "(", "Wh", ",", "Ww", ")", ",", "mode", "=", "'bicubic'", ")", "\n", "x", "=", "(", "x", "+", "absolute_pos_embed", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# B Wh*Ww C", "\n", "absolute_pos_embed_d", "=", "F", ".", "interpolate", "(", "self", ".", "absolute_pos_embed_d", ",", "size", "=", "(", "Wh", ",", "Ww", ")", ",", "mode", "=", "'bicubic'", ")", "\n", "x_d", "=", "(", "x_d", "+", "absolute_pos_embed_d", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# B Wh*Ww C", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x_d", "=", "x_d", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "x_d", "=", "self", ".", "pos_drop_d", "(", "x_d", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layer", "=", "self", ".", "layers", "[", "i", "]", "\n", "layer_d", "=", "self", ".", "layers_d", "[", "i", "]", "\n", "\n", "x", ",", "H", ",", "W", "=", "layer", "(", "x", ",", "Wh", ",", "Ww", ")", "\n", "x_d", ",", "_", ",", "_", "=", "layer_d", "(", "x_d", ",", "Wh", ",", "Ww", ")", "\n", "\n", "# Feature Rectify", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "H", ",", "W", ",", "self", ".", "num_features", "[", "i", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x_d", "=", "x", ".", "view", "(", "-", "1", ",", "H", ",", "W", ",", "self", ".", "num_features", "[", "i", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x", ",", "x_d", "=", "self", ".", "FRMs", "[", "i", "]", "(", "x", ",", "x_d", ")", "\n", "x", "=", "x_d", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x_d", "=", "x_d", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "x_out", ",", "x_out_d", "=", "x", ",", "x_d", "\n", "\n", "if", "i", "<", "self", ".", "num_layers", "-", "1", ":", "\n", "                ", "x", "=", "self", ".", "downsamples", "[", "i", "]", "(", "x", ",", "H", ",", "W", ")", "\n", "x_d", "=", "self", ".", "downsamples_d", "[", "i", "]", "(", "x_d", ",", "H", ",", "W", ")", "\n", "Wh", ",", "Ww", "=", "(", "H", "+", "1", ")", "//", "2", ",", "(", "W", "+", "1", ")", "//", "2", "\n", "\n", "", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "norm_layer", "=", "getattr", "(", "self", ",", "f'norm{i}'", ")", "\n", "x_out", "=", "norm_layer", "(", "x_out", ")", "\n", "\n", "norm_layer_d", "=", "getattr", "(", "self", ",", "f'norm_d{i}'", ")", "\n", "x_out_d", "=", "norm_layer_d", "(", "x_out_d", ")", "\n", "\n", "x_out", "=", "x_out", ".", "view", "(", "-", "1", ",", "H", ",", "W", ",", "self", ".", "num_features", "[", "i", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x_out_d", "=", "x_out_d", ".", "view", "(", "-", "1", ",", "H", ",", "W", ",", "self", ".", "num_features", "[", "i", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "out", "=", "self", ".", "FFMs", "[", "i", "]", "(", "x_out", ",", "x_out_d", ")", "\n", "\n", "outs", ".", "append", "(", "out", ")", "\n", "\n", "", "", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.DualSwinTransformer.train": [[680, 684], ["super().train", "dual_swin.DualSwinTransformer._freeze_stages"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.DualSwinTransformer.train", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.DualSwinTransformer._freeze_stages"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Convert the model into training mode while keep layers freezed.\"\"\"", "\n", "super", "(", "DualSwinTransformer", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.swin_s.__init__": [[687, 691], ["dual_swin.DualSwinTransformer.__init__"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "swin_s", ",", "self", ")", ".", "__init__", "(", "pretrain_img_size", "=", "224", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "96", ",", "depths", "=", "[", "2", ",", "2", ",", "18", ",", "2", "]", ",", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "window_size", "=", "7", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.3", ",", "drop_path_rate", "=", "0.1", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "ape", "=", "False", ",", "patch_norm", "=", "True", ",", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "frozen_stages", "=", "-", "1", ",", "use_checkpoint", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.swin_b.__init__": [[693, 697], ["dual_swin.DualSwinTransformer.__init__"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "swin_b", ",", "self", ")", ".", "__init__", "(", "pretrain_img_size", "=", "384", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "128", ",", "depths", "=", "[", "2", ",", "2", ",", "18", ",", "2", "]", ",", "num_heads", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ",", "\n", "window_size", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.3", ",", "drop_path_rate", "=", "0.1", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "ape", "=", "False", ",", "patch_norm", "=", "True", ",", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "frozen_stages", "=", "-", "1", ",", "use_checkpoint", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.window_partition": [[47, 59], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.window_reverse": [[61, 75], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_swin.load_dualpath_model": [[699, 746], ["time.time", "isinstance", "torch.load.items", "time.time", "model.load_state_dict", "time.time", "logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "OrderedDict", "state_dict.items", "torch.load.keys", "k.replace", "name.replace.replace", "name.replace.replace", "torch.device", "torch.device", "torch.device", "torch.device", "k.find", "k.find", "k.find", "k.find", "k.replace", "k.find", "k.replace", "k.replace"], "function", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.load_utils.load_state_dict"], ["", "", "def", "load_dualpath_model", "(", "model", ",", "model_file", ",", "is_restore", "=", "False", ")", ":", "\n", "# load raw state_dict", "\n", "    ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "if", "isinstance", "(", "model_file", ",", "str", ")", ":", "\n", "        ", "raw_state_dict", "=", "torch", ".", "load", "(", "model_file", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "#raw_state_dict = torch.load(model_file)", "\n", "if", "'model'", "in", "raw_state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "raw_state_dict", "=", "raw_state_dict", "[", "'model'", "]", "\n", "", "", "else", ":", "\n", "        ", "raw_state_dict", "=", "model_file", "\n", "# copy to  hha backbone", "\n", "", "state_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "raw_state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "find", "(", "'downsample'", ")", ">=", "0", "and", "k", ".", "find", "(", "'layer'", ")", ">=", "0", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'downsample.'", ",", "''", ")", "\n", "name", "=", "name", ".", "replace", "(", "'layers'", ",", "'downsamples'", ")", "\n", "state_dict", "[", "name", "]", "=", "v", "\n", "name", "=", "name", ".", "replace", "(", "'downsamples'", ",", "'downsamples_d'", ")", "\n", "state_dict", "[", "name", "]", "=", "v", "\n", "", "elif", "k", ".", "find", "(", "'patch_embed'", ")", ">=", "0", ":", "\n", "            ", "state_dict", "[", "k", "]", "=", "v", "\n", "state_dict", "[", "k", ".", "replace", "(", "'patch_embed'", ",", "'patch_embed_d'", ")", "]", "=", "v", "\n", "", "elif", "k", ".", "find", "(", "'layer'", ")", ">=", "0", ":", "\n", "            ", "state_dict", "[", "k", "]", "=", "v", "\n", "state_dict", "[", "k", ".", "replace", "(", "'layers'", ",", "'layers_d'", ")", "]", "=", "v", "\n", "", "elif", "k", ".", "find", "(", "'norm'", ")", ">=", "0", ":", "\n", "            ", "state_dict", "[", "k", "]", "=", "v", "\n", "state_dict", "[", "k", ".", "replace", "(", "'norm'", ",", "'norm_d'", ")", "]", "=", "v", "\n", "\n", "", "", "t_ioend", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "is_restore", ":", "\n", "        ", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "'module.'", "+", "k", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "del", "state_dict", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Load model, Time usage:\\n\\tIO: {}, initialize parameters: {}\"", ".", "format", "(", "\n", "t_ioend", "-", "t_start", ",", "t_end", "-", "t_ioend", ")", ")", "\n", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.DWConv.__init__": [[20, 23], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "dim", "=", "768", ")", ":", "\n", "        ", "super", "(", "DWConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dwconv", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "groups", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.DWConv.forward": [[24, 31], ["x.flatten().transpose.flatten().transpose.permute().reshape().contiguous", "dual_segformer.DWConv.dwconv", "x.flatten().transpose.flatten().transpose.flatten().transpose", "x.flatten().transpose.flatten().transpose.permute().reshape", "x.flatten().transpose.flatten().transpose.flatten", "x.flatten().transpose.flatten().transpose.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", ".", "contiguous", "(", ")", "# B N C -> B C N -> B C H W", "\n", "x", "=", "self", ".", "dwconv", "(", "x", ")", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# B C H W -> B N C", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.Mlp.__init__": [[34, 48], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "dual_segformer.DWConv", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "dual_segformer.Mlp.apply"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        MLP Block: \n        \"\"\"", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "dwconv", "=", "DWConv", "(", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.Mlp._init_weights": [[49, 63], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.Mlp.forward": [[64, 72], ["dual_segformer.Mlp.fc1", "dual_segformer.Mlp.dwconv", "dual_segformer.Mlp.act", "dual_segformer.Mlp.drop", "dual_segformer.Mlp.fc2", "dual_segformer.Mlp.drop"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "dwconv", "(", "x", ",", "H", ",", "W", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.Attention.__init__": [[75, 97], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "dual_segformer.Attention.apply", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "sr_ratio", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "dim", "%", "num_heads", "==", "0", ",", "f\"dim {dim} should be divided by num_heads {num_heads}.\"", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "# Linear embedding", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "kv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "2", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "self", ".", "sr_ratio", "=", "sr_ratio", "\n", "if", "sr_ratio", ">", "1", ":", "\n", "            ", "self", ".", "sr", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "sr_ratio", ",", "stride", "=", "sr_ratio", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.Attention._init_weights": [[98, 112], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.Attention.forward": [[113, 136], ["dual_segformer.Attention.q().reshape().permute", "dual_segformer.Attention.softmax", "dual_segformer.Attention.attn_drop", "dual_segformer.Attention.proj", "dual_segformer.Attention.proj_drop", "dual_segformer.Attention.permute().reshape", "dual_segformer.Attention.sr().reshape().permute", "dual_segformer.Attention.norm", "dual_segformer.Attention.kv().reshape().permute", "dual_segformer.Attention.kv().reshape().permute", "dual_segformer.Attention.q().reshape", "k.transpose", "dual_segformer.Attention.permute", "dual_segformer.Attention.sr().reshape", "dual_segformer.Attention.kv().reshape", "dual_segformer.Attention.kv().reshape", "dual_segformer.Attention.q", "dual_segformer.Attention.sr", "dual_segformer.Attention.kv", "dual_segformer.Attention.kv"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "# B N C -> B N num_head C//num_head -> B C//num_head N num_heads", "\n", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "if", "self", ".", "sr_ratio", ">", "1", ":", "\n", "            ", "x_", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "x_", "=", "self", ".", "sr", "(", "x_", ")", ".", "reshape", "(", "B", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_", "=", "self", ".", "norm", "(", "x_", ")", "\n", "kv", "=", "self", ".", "kv", "(", "x_", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "2", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "kv", "=", "self", ".", "kv", "(", "x", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "2", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "k", ",", "v", "=", "kv", "[", "0", "]", ",", "kv", "[", "1", "]", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.Block.__init__": [[142, 157], ["torch.Module.__init__", "norm_layer", "dual_segformer.Attention", "norm_layer", "int", "dual_segformer.Mlp", "dual_segformer.Block.apply", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "sr_ratio", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "\n", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "sr_ratio", "=", "sr_ratio", ")", "\n", "# NOTE: drop path for stochastic depth, we shall see if this is better than dropout here", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.Block._init_weights": [[158, 172], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.Block.forward": [[173, 178], ["dual_segformer.Block.drop_path", "dual_segformer.Block.drop_path", "dual_segformer.Block.attn", "dual_segformer.Block.mlp", "dual_segformer.Block.norm1", "dual_segformer.Block.norm2"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ",", "H", ",", "W", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ",", "H", ",", "W", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.OverlapPatchEmbed.__init__": [[184, 198], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "dual_segformer.OverlapPatchEmbed.apply"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "7", ",", "stride", "=", "4", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "H", ",", "self", ".", "W", "=", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", "\n", "self", ".", "num_patches", "=", "self", ".", "H", "*", "self", ".", "W", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "(", "patch_size", "[", "0", "]", "//", "2", ",", "patch_size", "[", "1", "]", "//", "2", ")", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "embed_dim", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.OverlapPatchEmbed._init_weights": [[199, 213], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.OverlapPatchEmbed.forward": [[214, 223], ["dual_segformer.OverlapPatchEmbed.proj", "dual_segformer.OverlapPatchEmbed.flatten().transpose", "dual_segformer.OverlapPatchEmbed.norm", "dual_segformer.OverlapPatchEmbed.flatten"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# B C H W", "\n", "        ", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# B H*W/16 C", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "\n", "return", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.RGBXTransformer.__init__": [[226, 333], ["torch.Module.__init__", "dual_segformer.OverlapPatchEmbed", "dual_segformer.OverlapPatchEmbed", "dual_segformer.OverlapPatchEmbed", "dual_segformer.OverlapPatchEmbed", "dual_segformer.OverlapPatchEmbed", "dual_segformer.OverlapPatchEmbed", "dual_segformer.OverlapPatchEmbed", "dual_segformer.OverlapPatchEmbed", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "dual_segformer.RGBXTransformer.apply", "x.item", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "dual_segformer.Block", "dual_segformer.Block", "dual_segformer.Block", "dual_segformer.Block", "dual_segformer.Block", "dual_segformer.Block", "dual_segformer.Block", "dual_segformer.Block", "net_utils.FeatureRectifyModule", "net_utils.FeatureRectifyModule", "net_utils.FeatureRectifyModule", "net_utils.FeatureRectifyModule", "net_utils.FeatureFusionModule", "net_utils.FeatureFusionModule", "net_utils.FeatureFusionModule", "net_utils.FeatureFusionModule", "sum", "range", "range", "range", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", ",", "\n", "num_heads", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "drop_rate", "=", "0.", ",", "\n", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "norm_fuse", "=", "nn", ".", "BatchNorm2d", ",", "\n", "depths", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "depths", "=", "depths", "\n", "\n", "# patch_embed", "\n", "self", ".", "patch_embed1", "=", "OverlapPatchEmbed", "(", "img_size", "=", "img_size", ",", "patch_size", "=", "7", ",", "stride", "=", "4", ",", "in_chans", "=", "in_chans", ",", "\n", "embed_dim", "=", "embed_dims", "[", "0", "]", ")", "\n", "self", ".", "patch_embed2", "=", "OverlapPatchEmbed", "(", "img_size", "=", "img_size", "//", "4", ",", "patch_size", "=", "3", ",", "stride", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "0", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "1", "]", ")", "\n", "self", ".", "patch_embed3", "=", "OverlapPatchEmbed", "(", "img_size", "=", "img_size", "//", "8", ",", "patch_size", "=", "3", ",", "stride", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "1", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "2", "]", ")", "\n", "self", ".", "patch_embed4", "=", "OverlapPatchEmbed", "(", "img_size", "=", "img_size", "//", "16", ",", "patch_size", "=", "3", ",", "stride", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "2", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "3", "]", ")", "\n", "\n", "self", ".", "extra_patch_embed1", "=", "OverlapPatchEmbed", "(", "img_size", "=", "img_size", ",", "patch_size", "=", "7", ",", "stride", "=", "4", ",", "in_chans", "=", "in_chans", ",", "\n", "embed_dim", "=", "embed_dims", "[", "0", "]", ")", "\n", "self", ".", "extra_patch_embed2", "=", "OverlapPatchEmbed", "(", "img_size", "=", "img_size", "//", "4", ",", "patch_size", "=", "3", ",", "stride", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "0", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "1", "]", ")", "\n", "self", ".", "extra_patch_embed3", "=", "OverlapPatchEmbed", "(", "img_size", "=", "img_size", "//", "8", ",", "patch_size", "=", "3", ",", "stride", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "1", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "2", "]", ")", "\n", "self", ".", "extra_patch_embed4", "=", "OverlapPatchEmbed", "(", "img_size", "=", "img_size", "//", "16", ",", "patch_size", "=", "3", ",", "stride", "=", "2", ",", "in_chans", "=", "embed_dims", "[", "2", "]", ",", "\n", "embed_dim", "=", "embed_dims", "[", "3", "]", ")", "\n", "\n", "# transformer encoder", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "# stochastic depth decay rule", "\n", "cur", "=", "0", "\n", "\n", "self", ".", "block1", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "0", "]", ",", "num_heads", "=", "num_heads", "[", "0", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "0", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "0", "]", ")", "]", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "embed_dims", "[", "0", "]", ")", "\n", "\n", "self", ".", "extra_block1", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "0", "]", ",", "num_heads", "=", "num_heads", "[", "0", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "0", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "0", "]", ")", "]", ")", "\n", "self", ".", "extra_norm1", "=", "norm_layer", "(", "embed_dims", "[", "0", "]", ")", "\n", "cur", "+=", "depths", "[", "0", "]", "\n", "\n", "self", ".", "block2", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "1", "]", ",", "num_heads", "=", "num_heads", "[", "1", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "1", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "1", "]", ")", "]", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "embed_dims", "[", "1", "]", ")", "\n", "\n", "self", ".", "extra_block2", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "1", "]", ",", "num_heads", "=", "num_heads", "[", "1", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "1", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "1", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "1", "]", ")", "]", ")", "\n", "self", ".", "extra_norm2", "=", "norm_layer", "(", "embed_dims", "[", "1", "]", ")", "\n", "\n", "cur", "+=", "depths", "[", "1", "]", "\n", "\n", "self", ".", "block3", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "2", "]", ",", "num_heads", "=", "num_heads", "[", "2", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "2", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "2", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "2", "]", ")", "]", ")", "\n", "self", ".", "norm3", "=", "norm_layer", "(", "embed_dims", "[", "2", "]", ")", "\n", "\n", "self", ".", "extra_block3", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "2", "]", ",", "num_heads", "=", "num_heads", "[", "2", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "2", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "2", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "2", "]", ")", "]", ")", "\n", "self", ".", "extra_norm3", "=", "norm_layer", "(", "embed_dims", "[", "2", "]", ")", "\n", "\n", "cur", "+=", "depths", "[", "2", "]", "\n", "\n", "self", ".", "block4", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "3", "]", ",", "num_heads", "=", "num_heads", "[", "3", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "3", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "3", "]", ")", "]", ")", "\n", "self", ".", "norm4", "=", "norm_layer", "(", "embed_dims", "[", "3", "]", ")", "\n", "\n", "self", ".", "extra_block4", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "\n", "dim", "=", "embed_dims", "[", "3", "]", ",", "num_heads", "=", "num_heads", "[", "3", "]", ",", "mlp_ratio", "=", "mlp_ratios", "[", "3", "]", ",", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "dpr", "[", "cur", "+", "i", "]", ",", "norm_layer", "=", "norm_layer", ",", "\n", "sr_ratio", "=", "sr_ratios", "[", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "depths", "[", "3", "]", ")", "]", ")", "\n", "self", ".", "extra_norm4", "=", "norm_layer", "(", "embed_dims", "[", "3", "]", ")", "\n", "\n", "cur", "+=", "depths", "[", "3", "]", "\n", "\n", "self", ".", "FRMs", "=", "nn", ".", "ModuleList", "(", "[", "\n", "FRM", "(", "dim", "=", "embed_dims", "[", "0", "]", ",", "reduction", "=", "1", ")", ",", "\n", "FRM", "(", "dim", "=", "embed_dims", "[", "1", "]", ",", "reduction", "=", "1", ")", ",", "\n", "FRM", "(", "dim", "=", "embed_dims", "[", "2", "]", ",", "reduction", "=", "1", ")", ",", "\n", "FRM", "(", "dim", "=", "embed_dims", "[", "3", "]", ",", "reduction", "=", "1", ")", "]", ")", "\n", "\n", "self", ".", "FFMs", "=", "nn", ".", "ModuleList", "(", "[", "\n", "FFM", "(", "dim", "=", "embed_dims", "[", "0", "]", ",", "reduction", "=", "1", ",", "num_heads", "=", "num_heads", "[", "0", "]", ",", "norm_layer", "=", "norm_fuse", ")", ",", "\n", "FFM", "(", "dim", "=", "embed_dims", "[", "1", "]", ",", "reduction", "=", "1", ",", "num_heads", "=", "num_heads", "[", "1", "]", ",", "norm_layer", "=", "norm_fuse", ")", ",", "\n", "FFM", "(", "dim", "=", "embed_dims", "[", "2", "]", ",", "reduction", "=", "1", ",", "num_heads", "=", "num_heads", "[", "2", "]", ",", "norm_layer", "=", "norm_fuse", ")", ",", "\n", "FFM", "(", "dim", "=", "embed_dims", "[", "3", "]", ",", "reduction", "=", "1", ",", "num_heads", "=", "num_heads", "[", "3", "]", ",", "norm_layer", "=", "norm_fuse", ")", "]", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.RGBXTransformer._init_weights": [[334, 348], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.RGBXTransformer.init_weights": [[349, 354], ["isinstance", "dual_segformer.load_dualpath_model", "TypeError"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.load_dualpath_model"], ["", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "load_dualpath_model", "(", "self", ",", "pretrained", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.RGBXTransformer.forward_features": [[355, 432], ["dual_segformer.RGBXTransformer.patch_embed1", "dual_segformer.RGBXTransformer.extra_patch_embed1", "enumerate", "enumerate", "dual_segformer.RGBXTransformer.norm1", "dual_segformer.RGBXTransformer.extra_norm1", "blk.reshape().permute().contiguous", "blk.reshape().permute().contiguous", "outs.append", "dual_segformer.RGBXTransformer.patch_embed2", "dual_segformer.RGBXTransformer.extra_patch_embed2", "enumerate", "enumerate", "dual_segformer.RGBXTransformer.norm2", "dual_segformer.RGBXTransformer.extra_norm2", "blk.reshape().permute().contiguous", "blk.reshape().permute().contiguous", "outs.append", "dual_segformer.RGBXTransformer.patch_embed3", "dual_segformer.RGBXTransformer.extra_patch_embed3", "enumerate", "enumerate", "dual_segformer.RGBXTransformer.norm3", "dual_segformer.RGBXTransformer.extra_norm3", "blk.reshape().permute().contiguous", "blk.reshape().permute().contiguous", "outs.append", "dual_segformer.RGBXTransformer.patch_embed4", "dual_segformer.RGBXTransformer.extra_patch_embed4", "enumerate", "enumerate", "dual_segformer.RGBXTransformer.norm4", "dual_segformer.RGBXTransformer.extra_norm4", "blk.reshape().permute().contiguous", "blk.reshape().permute().contiguous", "outs.append", "blk", "blk", "blk", "blk", "blk", "blk", "blk", "blk", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape().permute", "blk.reshape", "blk.reshape", "blk.reshape", "blk.reshape", "blk.reshape", "blk.reshape", "blk.reshape", "blk.reshape"], "methods", ["None"], ["", "", "def", "forward_features", "(", "self", ",", "x_rgb", ",", "x_e", ")", ":", "\n", "        ", "\"\"\"\n        x_rgb: B x N x H x W\n        \"\"\"", "\n", "B", "=", "x_rgb", ".", "shape", "[", "0", "]", "\n", "outs", "=", "[", "]", "\n", "outs_fused", "=", "[", "]", "\n", "\n", "# stage 1", "\n", "x_rgb", ",", "H", ",", "W", "=", "self", ".", "patch_embed1", "(", "x_rgb", ")", "\n", "# B H*W/16 C", "\n", "x_e", ",", "_", ",", "_", "=", "self", ".", "extra_patch_embed1", "(", "x_e", ")", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "block1", ")", ":", "\n", "            ", "x_rgb", "=", "blk", "(", "x_rgb", ",", "H", ",", "W", ")", "\n", "", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "extra_block1", ")", ":", "\n", "            ", "x_e", "=", "blk", "(", "x_e", ",", "H", ",", "W", ")", "\n", "", "x_rgb", "=", "self", ".", "norm1", "(", "x_rgb", ")", "\n", "x_e", "=", "self", ".", "extra_norm1", "(", "x_e", ")", "\n", "\n", "x_rgb", "=", "x_rgb", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x_e", "=", "x_e", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x_rgb", ",", "x_e", "=", "self", ".", "FRMs", "[", "0", "]", "(", "x_rgb", ",", "x_e", ")", "\n", "x_fused", "=", "self", ".", "FFMs", "[", "0", "]", "(", "x_rgb", ",", "x_e", ")", "\n", "outs", ".", "append", "(", "x_fused", ")", "\n", "\n", "\n", "# stage 2", "\n", "x_rgb", ",", "H", ",", "W", "=", "self", ".", "patch_embed2", "(", "x_rgb", ")", "\n", "x_e", ",", "_", ",", "_", "=", "self", ".", "extra_patch_embed2", "(", "x_e", ")", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "block2", ")", ":", "\n", "            ", "x_rgb", "=", "blk", "(", "x_rgb", ",", "H", ",", "W", ")", "\n", "", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "extra_block2", ")", ":", "\n", "            ", "x_e", "=", "blk", "(", "x_e", ",", "H", ",", "W", ")", "\n", "", "x_rgb", "=", "self", ".", "norm2", "(", "x_rgb", ")", "\n", "x_e", "=", "self", ".", "extra_norm2", "(", "x_e", ")", "\n", "\n", "x_rgb", "=", "x_rgb", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x_e", "=", "x_e", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x_rgb", ",", "x_e", "=", "self", ".", "FRMs", "[", "1", "]", "(", "x_rgb", ",", "x_e", ")", "\n", "x_fused", "=", "self", ".", "FFMs", "[", "1", "]", "(", "x_rgb", ",", "x_e", ")", "\n", "outs", ".", "append", "(", "x_fused", ")", "\n", "\n", "\n", "# stage 3", "\n", "x_rgb", ",", "H", ",", "W", "=", "self", ".", "patch_embed3", "(", "x_rgb", ")", "\n", "x_e", ",", "_", ",", "_", "=", "self", ".", "extra_patch_embed3", "(", "x_e", ")", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "block3", ")", ":", "\n", "            ", "x_rgb", "=", "blk", "(", "x_rgb", ",", "H", ",", "W", ")", "\n", "", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "extra_block3", ")", ":", "\n", "            ", "x_e", "=", "blk", "(", "x_e", ",", "H", ",", "W", ")", "\n", "", "x_rgb", "=", "self", ".", "norm3", "(", "x_rgb", ")", "\n", "x_e", "=", "self", ".", "extra_norm3", "(", "x_e", ")", "\n", "\n", "x_rgb", "=", "x_rgb", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x_e", "=", "x_e", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x_rgb", ",", "x_e", "=", "self", ".", "FRMs", "[", "2", "]", "(", "x_rgb", ",", "x_e", ")", "\n", "x_fused", "=", "self", ".", "FFMs", "[", "2", "]", "(", "x_rgb", ",", "x_e", ")", "\n", "outs", ".", "append", "(", "x_fused", ")", "\n", "\n", "\n", "# stage 4", "\n", "x_rgb", ",", "H", ",", "W", "=", "self", ".", "patch_embed4", "(", "x_rgb", ")", "\n", "x_e", ",", "_", ",", "_", "=", "self", ".", "extra_patch_embed4", "(", "x_e", ")", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "block4", ")", ":", "\n", "            ", "x_rgb", "=", "blk", "(", "x_rgb", ",", "H", ",", "W", ")", "\n", "", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "extra_block4", ")", ":", "\n", "            ", "x_e", "=", "blk", "(", "x_e", ",", "H", ",", "W", ")", "\n", "", "x_rgb", "=", "self", ".", "norm4", "(", "x_rgb", ")", "\n", "x_e", "=", "self", ".", "extra_norm4", "(", "x_e", ")", "\n", "\n", "x_rgb", "=", "x_rgb", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x_e", "=", "x_e", ".", "reshape", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x_rgb", ",", "x_e", "=", "self", ".", "FRMs", "[", "3", "]", "(", "x_rgb", ",", "x_e", ")", "\n", "x_fused", "=", "self", ".", "FFMs", "[", "3", "]", "(", "x_rgb", ",", "x_e", ")", "\n", "outs", ".", "append", "(", "x_fused", ")", "\n", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.RGBXTransformer.forward": [[433, 436], ["dual_segformer.RGBXTransformer.forward_features"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.RGBXTransformer.forward_features"], ["", "def", "forward", "(", "self", ",", "x_rgb", ",", "x_e", ")", ":", "\n", "        ", "out", "=", "self", ".", "forward_features", "(", "x_rgb", ",", "x_e", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.mit_b0.__init__": [[473, 478], ["dual_segformer.RGBXTransformer.__init__", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fuse_cfg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "mit_b0", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "32", ",", "64", ",", "160", ",", "256", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "\n", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.mit_b1.__init__": [[481, 486], ["dual_segformer.RGBXTransformer.__init__", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fuse_cfg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "mit_b1", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "\n", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.mit_b2.__init__": [[489, 494], ["dual_segformer.RGBXTransformer.__init__", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fuse_cfg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "mit_b2", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "\n", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.mit_b3.__init__": [[497, 502], ["dual_segformer.RGBXTransformer.__init__", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fuse_cfg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "mit_b3", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "4", ",", "18", ",", "3", "]", ",", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "\n", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.mit_b4.__init__": [[505, 510], ["dual_segformer.RGBXTransformer.__init__", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fuse_cfg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "mit_b4", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "8", ",", "27", ",", "3", "]", ",", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "\n", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.mit_b5.__init__": [[513, 518], ["dual_segformer.RGBXTransformer.__init__", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fuse_cfg", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "mit_b5", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "4", ",", "embed_dims", "=", "[", "64", ",", "128", ",", "320", ",", "512", "]", ",", "num_heads", "=", "[", "1", ",", "2", ",", "5", ",", "8", "]", ",", "mlp_ratios", "=", "[", "4", ",", "4", ",", "4", ",", "4", "]", ",", "\n", "qkv_bias", "=", "True", ",", "norm_layer", "=", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", ",", "depths", "=", "[", "3", ",", "6", ",", "40", ",", "3", "]", ",", "sr_ratios", "=", "[", "8", ",", "4", ",", "2", ",", "1", "]", ",", "\n", "drop_rate", "=", "0.0", ",", "drop_path_rate", "=", "0.1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.encoders.dual_segformer.load_dualpath_model": [[438, 470], ["time.time", "isinstance", "torch.load.items", "time.time", "model.load_state_dict", "time.time", "logger.info", "torch.load", "torch.load", "torch.load", "torch.load.keys", "k.find", "torch.device", "torch.device", "torch.device", "k.find", "k.replace", "k.find", "k.replace", "k.replace"], "function", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.load_utils.load_state_dict"], ["", "", "def", "load_dualpath_model", "(", "model", ",", "model_file", ")", ":", "\n", "# load raw state_dict", "\n", "    ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "if", "isinstance", "(", "model_file", ",", "str", ")", ":", "\n", "        ", "raw_state_dict", "=", "torch", ".", "load", "(", "model_file", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "#raw_state_dict = torch.load(model_file)", "\n", "if", "'model'", "in", "raw_state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "raw_state_dict", "=", "raw_state_dict", "[", "'model'", "]", "\n", "", "", "else", ":", "\n", "        ", "raw_state_dict", "=", "model_file", "\n", "\n", "", "state_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "raw_state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "find", "(", "'patch_embed'", ")", ">=", "0", ":", "\n", "            ", "state_dict", "[", "k", "]", "=", "v", "\n", "state_dict", "[", "k", ".", "replace", "(", "'patch_embed'", ",", "'extra_patch_embed'", ")", "]", "=", "v", "\n", "", "elif", "k", ".", "find", "(", "'block'", ")", ">=", "0", ":", "\n", "            ", "state_dict", "[", "k", "]", "=", "v", "\n", "state_dict", "[", "k", ".", "replace", "(", "'block'", ",", "'extra_block'", ")", "]", "=", "v", "\n", "", "elif", "k", ".", "find", "(", "'norm'", ")", ">=", "0", ":", "\n", "            ", "state_dict", "[", "k", "]", "=", "v", "\n", "state_dict", "[", "k", ".", "replace", "(", "'norm'", ",", "'extra_norm'", ")", "]", "=", "v", "\n", "\n", "", "", "t_ioend", "=", "time", ".", "time", "(", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "del", "state_dict", "\n", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Load model, Time usage:\\n\\tIO: {}, initialize parameters: {}\"", ".", "format", "(", "\n", "t_ioend", "-", "t_start", ",", "t_end", "-", "t_ioend", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.State.__init__": [[15, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "1", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "dataloader", "=", "None", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "optimizer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.State.register": [[22, 27], ["kwargs.items", "setattr"], "methods", ["None"], ["", "def", "register", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "assert", "k", "in", "[", "'epoch'", ",", "'iteration'", ",", "'dataloader'", ",", "'model'", ",", "\n", "'optimizer'", "]", "\n", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.Engine.__init__": [[30, 60], ["logger.info", "engine.State", "engine.Engine.inject_default_parser", "engine.Engine.parser.parse_args", "argparse.ArgumentParser", "isinstance", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.init_process_group", "utils.pyt_utils.parse_devices", "int", "range"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.Engine.inject_default_parser", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.parse_devices"], ["    ", "def", "__init__", "(", "self", ",", "custom_parser", "=", "None", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"PyTorch Version {}\"", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "self", ".", "state", "=", "State", "(", ")", "\n", "self", ".", "devices", "=", "None", "\n", "self", ".", "distributed", "=", "False", "\n", "\n", "if", "custom_parser", "is", "None", ":", "\n", "            ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "custom_parser", ",", "argparse", ".", "ArgumentParser", ")", "\n", "self", ".", "parser", "=", "custom_parser", "\n", "\n", "", "self", ".", "inject_default_parser", "(", ")", "\n", "self", ".", "args", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "\n", "self", ".", "continue_state_object", "=", "self", ".", "args", ".", "continue_fpath", "\n", "\n", "if", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "            ", "self", ".", "distributed", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", ">", "1", "\n", "\n", "", "if", "self", ".", "distributed", ":", "\n", "            ", "self", ".", "local_rank", "=", "self", ".", "args", ".", "local_rank", "\n", "self", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "local_rank", ")", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "self", ".", "args", ".", "port", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", ",", "world_size", "=", "self", ".", "world_size", ",", "init_method", "=", "'env://'", ")", "\n", "self", ".", "devices", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "world_size", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "devices", "=", "parse_devices", "(", "self", ".", "args", ".", "devices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.Engine.inject_default_parser": [[62, 76], ["p.add_argument", "p.add_argument", "p.add_argument", "p.add_argument"], "methods", ["None"], ["", "", "def", "inject_default_parser", "(", "self", ")", ":", "\n", "        ", "p", "=", "self", ".", "parser", "\n", "p", ".", "add_argument", "(", "'-d'", ",", "'--devices'", ",", "default", "=", "''", ",", "\n", "help", "=", "'set data parallel training'", ")", "\n", "p", ".", "add_argument", "(", "'-c'", ",", "'--continue'", ",", "type", "=", "extant_file", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "dest", "=", "\"continue_fpath\"", ",", "\n", "help", "=", "'continue from one certain checkpoint'", ")", "\n", "p", ".", "add_argument", "(", "'--local_rank'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'process rank on node'", ")", "\n", "p", ".", "add_argument", "(", "'-p'", ",", "'--port'", ",", "type", "=", "str", ",", "\n", "default", "=", "'16005'", ",", "\n", "dest", "=", "\"port\"", ",", "\n", "help", "=", "'port for init_process_group'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.Engine.register_state": [[77, 79], ["engine.Engine.state.register"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.State.register"], ["", "def", "register_state", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "state", ".", "register", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.Engine.update_iteration": [[80, 83], ["None"], "methods", ["None"], ["", "def", "update_iteration", "(", "self", ",", "epoch", ",", "iteration", ")", ":", "\n", "        ", "self", ".", "state", ".", "epoch", "=", "epoch", "\n", "self", ".", "state", ".", "iteration", "=", "iteration", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.Engine.save_checkpoint": [[84, 111], ["logger.info", "time.time", "OrderedDict", "engine.Engine.state.model.state_dict().items", "engine.Engine.state.optimizer.state_dict", "time.time", "torch.save", "torch.save", "torch.save", "torch.save", "time.time", "logger.info", "engine.Engine.state.model.state_dict", "k.split"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "path", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Saving checkpoint to file {}\"", ".", "format", "(", "path", ")", ")", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "state_dict", "=", "{", "}", "\n", "\n", "from", "collections", "import", "OrderedDict", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "state", ".", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "key", "=", "k", "\n", "if", "k", ".", "split", "(", "'.'", ")", "[", "0", "]", "==", "'module'", ":", "\n", "                ", "key", "=", "k", "[", "7", ":", "]", "\n", "", "new_state_dict", "[", "key", "]", "=", "v", "\n", "", "state_dict", "[", "'model'", "]", "=", "new_state_dict", "\n", "state_dict", "[", "'optimizer'", "]", "=", "self", ".", "state", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "state_dict", "[", "'epoch'", "]", "=", "self", ".", "state", ".", "epoch", "\n", "state_dict", "[", "'iteration'", "]", "=", "self", ".", "state", ".", "iteration", "\n", "\n", "t_iobegin", "=", "time", ".", "time", "(", ")", "\n", "torch", ".", "save", "(", "state_dict", ",", "path", ")", "\n", "del", "state_dict", "\n", "del", "new_state_dict", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Save checkpoint to file {}, \"", "\n", "\"Time usage:\\n\\tprepare checkpoint: {}, IO: {}\"", ".", "format", "(", "\n", "path", ",", "t_iobegin", "-", "t_start", ",", "t_end", "-", "t_iobegin", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.Engine.link_tb": [[112, 116], ["utils.pyt_utils.ensure_dir", "utils.pyt_utils.ensure_dir", "utils.pyt_utils.link_file"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.ensure_dir", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.ensure_dir", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.link_file"], ["", "def", "link_tb", "(", "self", ",", "source", ",", "target", ")", ":", "\n", "        ", "ensure_dir", "(", "source", ")", "\n", "ensure_dir", "(", "target", ")", "\n", "link_file", "(", "source", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.Engine.save_and_link_checkpoint": [[118, 127], ["utils.pyt_utils.ensure_dir", "os.join", "os.join", "engine.Engine.save_checkpoint", "os.join", "os.join", "utils.pyt_utils.link_file", "os.exists", "os.exists", "utils.pyt_utils.link_file"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.ensure_dir", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.Engine.save_checkpoint", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.link_file", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.link_file"], ["", "def", "save_and_link_checkpoint", "(", "self", ",", "checkpoint_dir", ",", "log_dir", ",", "log_dir_link", ")", ":", "\n", "        ", "ensure_dir", "(", "checkpoint_dir", ")", "\n", "if", "not", "osp", ".", "exists", "(", "log_dir_link", ")", ":", "\n", "            ", "link_file", "(", "log_dir", ",", "log_dir_link", ")", "\n", "", "current_epoch_checkpoint", "=", "osp", ".", "join", "(", "checkpoint_dir", ",", "'epoch-{}.pth'", ".", "format", "(", "\n", "self", ".", "state", ".", "epoch", ")", ")", "\n", "self", ".", "save_checkpoint", "(", "current_epoch_checkpoint", ")", "\n", "last_epoch_checkpoint", "=", "osp", ".", "join", "(", "checkpoint_dir", ",", "'epoch-last.pth'", ")", "\n", "link_file", "(", "current_epoch_checkpoint", ",", "last_epoch_checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.Engine.restore_checkpoint": [[129, 151], ["time.time", "time.time", "utils.pyt_utils.load_model", "engine.Engine.state.optimizer.load_state_dict", "time.time", "logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.load_model", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.load_utils.load_state_dict"], ["", "def", "restore_checkpoint", "(", "self", ")", ":", "\n", "        ", "t_start", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "distributed", ":", "\n", "# load the model on cpu first to avoid GPU RAM surge", "\n", "# when loading a model checkpoint", "\n", "# tmp = torch.load(self.continue_state_object,", "\n", "#                  map_location=lambda storage, loc: storage.cuda(", "\n", "#                      self.local_rank))", "\n", "            ", "tmp", "=", "torch", ".", "load", "(", "self", ".", "continue_state_object", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "", "else", ":", "\n", "            ", "tmp", "=", "torch", ".", "load", "(", "self", ".", "continue_state_object", ")", "\n", "", "t_ioend", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "state", ".", "model", "=", "load_model", "(", "self", ".", "state", ".", "model", ",", "tmp", "[", "'model'", "]", ",", "is_restore", "=", "True", ")", "\n", "self", ".", "state", ".", "optimizer", ".", "load_state_dict", "(", "tmp", "[", "'optimizer'", "]", ")", "\n", "self", ".", "state", ".", "epoch", "=", "tmp", "[", "'epoch'", "]", "+", "1", "\n", "self", ".", "state", ".", "iteration", "=", "tmp", "[", "'iteration'", "]", "\n", "del", "tmp", "\n", "t_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"Load checkpoint from file {}, \"", "\n", "\"Time usage:\\n\\tIO: {}, restore checkpoint: {}\"", ".", "format", "(", "\n", "self", ".", "continue_state_object", ",", "t_ioend", "-", "t_start", ",", "t_end", "-", "t_ioend", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.Engine.__enter__": [[153, 155], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.engine.Engine.__exit__": [[157, 164], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "logger.warning"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "tb", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "if", "type", "is", "not", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "\"A exception occurred during Engine initialization, \"", "\n", "\"give up running process\"", ")", "\n", "return", "False", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.dist_test.Evaluator.__init__": [[20, 42], ["dist_test.Evaluator.dataset.get_length", "torch.get_context", "torch.get_context", "torch.get_context", "dist_test.Evaluator.context.Queue", "utils.pyt_utils.ensure_dir"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset.get_length", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.ensure_dir"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "class_num", ",", "image_mean", ",", "image_std", ",", "network", ",", "\n", "multi_scales", ",", "is_flip", ",", "devices", ",", "\n", "verbose", "=", "False", ",", "save_path", "=", "None", ",", "show_image", "=", "False", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "ndata", "=", "self", ".", "dataset", ".", "get_length", "(", ")", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "image_mean", "=", "image_mean", "\n", "self", ".", "image_std", "=", "image_std", "\n", "self", ".", "multi_scales", "=", "multi_scales", "\n", "self", ".", "is_flip", "=", "is_flip", "\n", "self", ".", "network", "=", "network", "\n", "self", ".", "devices", "=", "devices", "\n", "\n", "self", ".", "context", "=", "mp", ".", "get_context", "(", "'spawn'", ")", "\n", "self", ".", "val_func", "=", "None", "\n", "self", ".", "results_queue", "=", "self", ".", "context", ".", "Queue", "(", "self", ".", "ndata", ")", "\n", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "save_path", "=", "save_path", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "            ", "ensure_dir", "(", "save_path", ")", "\n", "", "self", ".", "show_image", "=", "show_image", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.dist_test.Evaluator.run": [[43, 95], ["open", "utils.pyt_utils.link_file", "open.close", "logger.info", "utils.pyt_utils.load_model", "dist_test.Evaluator.multi_process_evaluation", "open.write", "open.write", "open.write", "open.flush", "int", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir.remove", "os.listdir.remove", "enumerate", "numpy.array", "model_indice.split", "len", "len", "len", "int", "numpy.array", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "model_indice.split", "[].split", "int", "m.split"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.link_file", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.load_model", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.multi_process_evaluation"], ["", "def", "run", "(", "self", ",", "model_path", ",", "model_indice", ",", "log_file", ",", "log_file_link", ")", ":", "\n", "        ", "\"\"\"There are four evaluation modes:\n            1.only eval a .pth model: -e *.pth\n            2.only eval a certain epoch: -e epoch\n            3.eval all epochs in a given section: -e start_epoch-end_epoch\n            4.eval all epochs from a certain started epoch: -e start_epoch-\n            \"\"\"", "\n", "if", "'.pth'", "in", "model_indice", ":", "\n", "            ", "models", "=", "[", "model_indice", ",", "]", "\n", "", "elif", "\"-\"", "in", "model_indice", ":", "\n", "            ", "start_epoch", "=", "int", "(", "model_indice", ".", "split", "(", "\"-\"", ")", "[", "0", "]", ")", "\n", "end_epoch", "=", "model_indice", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "\n", "models", "=", "os", ".", "listdir", "(", "model_path", ")", "\n", "models", ".", "remove", "(", "\"epoch-last.pth\"", ")", "\n", "sorted_models", "=", "[", "None", "]", "*", "len", "(", "models", ")", "\n", "model_idx", "=", "[", "0", "]", "*", "len", "(", "models", ")", "\n", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "models", ")", ":", "\n", "                ", "num", "=", "m", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "model_idx", "[", "idx", "]", "=", "num", "\n", "sorted_models", "[", "idx", "]", "=", "m", "\n", "", "model_idx", "=", "np", ".", "array", "(", "[", "int", "(", "i", ")", "for", "i", "in", "model_idx", "]", ")", "\n", "\n", "down_bound", "=", "model_idx", ">=", "start_epoch", "\n", "up_bound", "=", "[", "True", "]", "*", "len", "(", "sorted_models", ")", "\n", "if", "end_epoch", ":", "\n", "                ", "end_epoch", "=", "int", "(", "end_epoch", ")", "\n", "assert", "start_epoch", "<", "end_epoch", "\n", "up_bound", "=", "model_idx", "<=", "end_epoch", "\n", "", "bound", "=", "up_bound", "*", "down_bound", "\n", "model_slice", "=", "np", ".", "array", "(", "sorted_models", ")", "[", "bound", "]", "\n", "models", "=", "[", "os", ".", "path", ".", "join", "(", "model_path", ",", "model", ")", "for", "model", "in", "\n", "model_slice", "]", "\n", "", "else", ":", "\n", "            ", "models", "=", "[", "os", ".", "path", ".", "join", "(", "model_path", ",", "\n", "'epoch-%s.pth'", "%", "model_indice", ")", ",", "]", "\n", "\n", "", "results", "=", "open", "(", "log_file", ",", "'a'", ")", "\n", "link_file", "(", "log_file", ",", "log_file_link", ")", "\n", "\n", "for", "model", "in", "models", ":", "\n", "            ", "logger", ".", "info", "(", "\"Load Model: %s\"", "%", "model", ")", "\n", "self", ".", "val_func", "=", "load_model", "(", "self", ".", "network", ",", "model", ")", "\n", "result_line", "=", "self", ".", "multi_process_evaluation", "(", ")", "\n", "\n", "results", ".", "write", "(", "'Model: '", "+", "model", "+", "'\\n'", ")", "\n", "results", ".", "write", "(", "result_line", ")", "\n", "results", ".", "write", "(", "'\\n'", ")", "\n", "results", ".", "flush", "(", ")", "\n", "\n", "", "results", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.dist_test.Evaluator.multi_process_evaluation": [[96, 131], ["time.perf_counter", "len", "int", "range", "tqdm.tqdm.tqdm", "dist_test.Evaluator.compute_metric", "logger.info", "numpy.ceil", "min", "list", "logger.info", "dist_test.Evaluator.context.Process", "procs.append", "dist_test.Evaluator.start", "range", "dist_test.Evaluator.results_queue.get", "all_results.append", "dist_test.Evaluator.join", "range", "dist_test.Evaluator.compute_metric", "time.perf_counter", "len"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.compute_metric", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.compute_metric"], ["", "def", "multi_process_evaluation", "(", "self", ")", ":", "\n", "        ", "start_eval_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "nr_devices", "=", "len", "(", "self", ".", "devices", ")", "\n", "stride", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "ndata", "/", "nr_devices", ")", ")", "\n", "\n", "# start multi-process on multi-gpu", "\n", "procs", "=", "[", "]", "\n", "for", "d", "in", "range", "(", "nr_devices", ")", ":", "\n", "            ", "e_record", "=", "min", "(", "(", "d", "+", "1", ")", "*", "stride", ",", "self", ".", "ndata", ")", "\n", "shred_list", "=", "list", "(", "range", "(", "d", "*", "stride", ",", "e_record", ")", ")", "\n", "device", "=", "self", ".", "devices", "[", "d", "]", "\n", "logger", ".", "info", "(", "\n", "'GPU %s handle %d data.'", "%", "(", "device", ",", "len", "(", "shred_list", ")", ")", ")", "\n", "p", "=", "self", ".", "context", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "shred_list", ",", "device", ")", ")", "\n", "procs", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "procs", ":", "\n", "            ", "p", ".", "start", "(", ")", "\n", "\n", "", "all_results", "=", "[", "]", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "self", ".", "ndata", ")", ")", ":", "\n", "            ", "t", "=", "self", ".", "results_queue", ".", "get", "(", ")", "\n", "all_results", ".", "append", "(", "t", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "self", ".", "compute_metric", "(", "all_results", ")", "\n", "\n", "", "", "for", "p", "in", "procs", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n", "", "result_line", "=", "self", ".", "compute_metric", "(", "all_results", ")", "\n", "logger", ".", "info", "(", "\n", "'Evaluation Elapsed Time: %.2fs'", "%", "(", "\n", "time", ".", "perf_counter", "(", ")", "-", "start_eval_time", ")", ")", "\n", "return", "result_line", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.dist_test.Evaluator.worker": [[132, 140], ["time.time", "logger.info", "dist_test.Evaluator.func_per_iteration", "dist_test.Evaluator.results_queue.put", "time.time"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.func_per_iteration"], ["", "def", "worker", "(", "self", ",", "shred_list", ",", "device", ")", ":", "\n", "        ", "start_load_time", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "'Load Model on Device %d: %.2fs'", "%", "(", "\n", "device", ",", "time", ".", "time", "(", ")", "-", "start_load_time", ")", ")", "\n", "for", "idx", "in", "shred_list", ":", "\n", "            ", "dd", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "results_dict", "=", "self", ".", "func_per_iteration", "(", "dd", ",", "device", ")", "\n", "self", ".", "results_queue", ".", "put", "(", "results_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.dist_test.Evaluator.func_per_iteration": [[141, 143], ["None"], "methods", ["None"], ["", "", "def", "func_per_iteration", "(", "self", ",", "data", ",", "device", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.dist_test.Evaluator.compute_metric": [[144, 146], ["None"], "methods", ["None"], ["", "def", "compute_metric", "(", "self", ",", "results", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.dist_test.Evaluator.whole_eval": [[148, 168], ["dist_test.Evaluator.val_func_process", "cv2.resize.permute", "cv2.resize.cpu().numpy", "cv2.resize.argmax", "dist_test.Evaluator.process_image", "dist_test.Evaluator.process_image", "cv2.resize", "cv2.resize.cpu"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.val_func_process", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.process_image", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.process_image"], ["", "def", "whole_eval", "(", "self", ",", "img", ",", "output_size", ",", "input_size", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "        ", "if", "input_size", "is", "not", "None", ":", "\n", "            ", "img", ",", "margin", "=", "self", ".", "process_image", "(", "img", ",", "input_size", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "self", ".", "process_image", "(", "img", ",", "input_size", ")", "\n", "\n", "", "pred", "=", "self", ".", "val_func_process", "(", "img", ",", "device", ")", "\n", "if", "input_size", "is", "not", "None", ":", "\n", "            ", "pred", "=", "pred", "[", ":", ",", "margin", "[", "0", "]", ":", "(", "pred", ".", "shape", "[", "1", "]", "-", "margin", "[", "1", "]", ")", ",", "\n", "margin", "[", "2", "]", ":", "(", "pred", ".", "shape", "[", "2", "]", "-", "margin", "[", "3", "]", ")", "]", "\n", "", "pred", "=", "pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "output_size", "is", "not", "None", ":", "\n", "            ", "pred", "=", "cv2", ".", "resize", "(", "pred", ",", "\n", "(", "output_size", "[", "1", "]", ",", "output_size", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "", "pred", "=", "pred", ".", "argmax", "(", "2", ")", "\n", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.dist_test.Evaluator.sliding_eval": [[170, 185], ["numpy.zeros", "numpy.zeros.argmax", "cv2.resize", "dist_test.Evaluator.scale_process"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.scale_process"], ["", "def", "sliding_eval", "(", "self", ",", "img", ",", "crop_size", ",", "stride_rate", ",", "device", "=", "None", ")", ":", "\n", "        ", "ori_rows", ",", "ori_cols", ",", "c", "=", "img", ".", "shape", "\n", "processed_pred", "=", "np", ".", "zeros", "(", "(", "ori_rows", ",", "ori_cols", ",", "self", ".", "class_num", ")", ")", "\n", "\n", "for", "s", "in", "self", ".", "multi_scales", ":", "\n", "            ", "img_scale", "=", "cv2", ".", "resize", "(", "img", ",", "None", ",", "fx", "=", "s", ",", "fy", "=", "s", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "new_rows", ",", "new_cols", ",", "_", "=", "img_scale", ".", "shape", "\n", "processed_pred", "+=", "self", ".", "scale_process", "(", "img_scale", ",", "\n", "(", "ori_rows", ",", "ori_cols", ")", ",", "\n", "crop_size", ",", "stride_rate", ",", "device", ")", "\n", "\n", "", "pred", "=", "processed_pred", ".", "argmax", "(", "2", ")", "\n", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.dist_test.Evaluator.scale_process": [[186, 238], ["dist_test.Evaluator.permute", "cv2.resize", "dist_test.Evaluator.process_image", "dist_test.Evaluator.val_func_process", "int", "utils.transforms.pad_image_to_shape", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "dist_test.Evaluator.cpu().numpy", "numpy.ceil", "int", "int", "range", "numpy.ceil", "numpy.ceil", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "min", "min", "dist_test.Evaluator.process_image", "dist_test.Evaluator.val_func_process", "dist_test.Evaluator.cpu"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.process_image", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.val_func_process", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.pad_image_to_shape", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.process_image", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.val_func_process"], ["", "def", "scale_process", "(", "self", ",", "img", ",", "ori_shape", ",", "crop_size", ",", "stride_rate", ",", "\n", "device", "=", "None", ")", ":", "\n", "        ", "new_rows", ",", "new_cols", ",", "c", "=", "img", ".", "shape", "\n", "long_size", "=", "new_cols", "if", "new_cols", ">", "new_rows", "else", "new_rows", "\n", "\n", "if", "long_size", "<=", "crop_size", ":", "\n", "            ", "input_data", ",", "margin", "=", "self", ".", "process_image", "(", "img", ",", "crop_size", ")", "\n", "score", "=", "self", ".", "val_func_process", "(", "input_data", ",", "device", ")", "\n", "score", "=", "score", "[", ":", ",", "margin", "[", "0", "]", ":", "(", "score", ".", "shape", "[", "1", "]", "-", "margin", "[", "1", "]", ")", ",", "\n", "margin", "[", "2", "]", ":", "(", "score", ".", "shape", "[", "2", "]", "-", "margin", "[", "3", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "stride", "=", "int", "(", "np", ".", "ceil", "(", "crop_size", "*", "stride_rate", ")", ")", "\n", "img_pad", ",", "margin", "=", "pad_image_to_shape", "(", "img", ",", "crop_size", ",", "\n", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "\n", "pad_rows", "=", "img_pad", ".", "shape", "[", "0", "]", "\n", "pad_cols", "=", "img_pad", ".", "shape", "[", "1", "]", "\n", "r_grid", "=", "int", "(", "np", ".", "ceil", "(", "(", "pad_rows", "-", "crop_size", ")", "/", "stride", ")", ")", "+", "1", "\n", "c_grid", "=", "int", "(", "np", ".", "ceil", "(", "(", "pad_cols", "-", "crop_size", ")", "/", "stride", ")", ")", "+", "1", "\n", "data_scale", "=", "torch", ".", "zeros", "(", "self", ".", "class_num", ",", "pad_rows", ",", "pad_cols", ")", ".", "cuda", "(", "\n", "device", ")", "\n", "count_scale", "=", "torch", ".", "zeros", "(", "self", ".", "class_num", ",", "pad_rows", ",", "pad_cols", ")", ".", "cuda", "(", "\n", "device", ")", "\n", "\n", "for", "grid_yidx", "in", "range", "(", "r_grid", ")", ":", "\n", "                ", "for", "grid_xidx", "in", "range", "(", "c_grid", ")", ":", "\n", "                    ", "s_x", "=", "grid_xidx", "*", "stride", "\n", "s_y", "=", "grid_yidx", "*", "stride", "\n", "e_x", "=", "min", "(", "s_x", "+", "crop_size", ",", "pad_cols", ")", "\n", "e_y", "=", "min", "(", "s_y", "+", "crop_size", ",", "pad_rows", ")", "\n", "s_x", "=", "e_x", "-", "crop_size", "\n", "s_y", "=", "e_y", "-", "crop_size", "\n", "img_sub", "=", "img_pad", "[", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", ",", ":", "]", "\n", "count_scale", "[", ":", ",", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", "]", "+=", "1", "\n", "\n", "input_data", ",", "tmargin", "=", "self", ".", "process_image", "(", "img_sub", ",", "crop_size", ")", "\n", "temp_score", "=", "self", ".", "val_func_process", "(", "input_data", ",", "device", ")", "\n", "temp_score", "=", "temp_score", "[", ":", ",", "\n", "tmargin", "[", "0", "]", ":", "(", "temp_score", ".", "shape", "[", "1", "]", "-", "tmargin", "[", "1", "]", ")", ",", "\n", "tmargin", "[", "2", "]", ":", "(", "temp_score", ".", "shape", "[", "2", "]", "-", "tmargin", "[", "3", "]", ")", "]", "\n", "data_scale", "[", ":", ",", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", "]", "+=", "temp_score", "\n", "# score = data_scale / count_scale", "\n", "", "", "score", "=", "data_scale", "\n", "score", "=", "score", "[", ":", ",", "margin", "[", "0", "]", ":", "(", "score", ".", "shape", "[", "1", "]", "-", "margin", "[", "1", "]", ")", ",", "\n", "margin", "[", "2", "]", ":", "(", "score", ".", "shape", "[", "2", "]", "-", "margin", "[", "3", "]", ")", "]", "\n", "\n", "", "score", "=", "score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "data_output", "=", "cv2", ".", "resize", "(", "score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "(", "ori_shape", "[", "1", "]", ",", "ori_shape", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "data_output", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.dist_test.Evaluator.val_func_process": [[239, 263], ["numpy.ascontiguousarray", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "dist_test.Evaluator.val_func.eval", "dist_test.Evaluator.val_func.to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "input_data.flip.flip.get_device", "input_data.flip.flip.get_device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dist_test.Evaluator.val_func", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "input_data.flip.flip.flip", "dist_test.Evaluator.val_func", "dist_test.Evaluator.flip"], "methods", ["None"], ["", "def", "val_func_process", "(", "self", ",", "input_data", ",", "device", "=", "None", ")", ":", "\n", "        ", "input_data", "=", "np", ".", "ascontiguousarray", "(", "input_data", "[", "None", ",", ":", ",", ":", ",", ":", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "# input_data = torch.FloatTensor(input_data).to(device)", "\n", "# input_data = torch.tensor(input_data, device=device)", "\n", "input_data", "=", "torch", ".", "from_numpy", "(", "input_data", ")", ".", "to", "(", "device", ")", "\n", "# print(torch.cuda.current_device(), device)", "\n", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "input_data", ".", "get_device", "(", ")", ")", ":", "\n", "            ", "self", ".", "val_func", ".", "eval", "(", ")", "\n", "self", ".", "val_func", ".", "to", "(", "input_data", ".", "get_device", "(", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "score", "=", "self", ".", "val_func", "(", "input_data", ")", "\n", "score", "=", "score", "[", "0", "]", "\n", "\n", "if", "self", ".", "is_flip", ":", "\n", "                    ", "input_data", "=", "input_data", ".", "flip", "(", "-", "1", ")", "\n", "score_flip", "=", "self", ".", "val_func", "(", "input_data", ")", "\n", "score_flip", "=", "score_flip", "[", "0", "]", "\n", "score", "+=", "score_flip", ".", "flip", "(", "-", "1", ")", "\n", "", "score", "=", "torch", ".", "exp", "(", "score", ")", "\n", "# score = score.data", "\n", "\n", "", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.dist_test.Evaluator.process_image": [[264, 285], ["utils.transforms.normalize", "p_img.transpose.transpose.transpose", "numpy.concatenate", "utils.transforms.pad_image_to_shape", "p_img.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.normalize", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.pad_image_to_shape"], ["", "def", "process_image", "(", "self", ",", "img", ",", "crop_size", "=", "None", ")", ":", "\n", "        ", "p_img", "=", "img", "\n", "\n", "if", "img", ".", "shape", "[", "2", "]", "<", "3", ":", "\n", "            ", "im_b", "=", "p_img", "\n", "im_g", "=", "p_img", "\n", "im_r", "=", "p_img", "\n", "p_img", "=", "np", ".", "concatenate", "(", "(", "im_b", ",", "im_g", ",", "im_r", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "p_img", "=", "normalize", "(", "p_img", ",", "self", ".", "image_mean", ",", "self", ".", "image_std", ")", "\n", "\n", "if", "crop_size", "is", "not", "None", ":", "\n", "            ", "p_img", ",", "margin", "=", "pad_image_to_shape", "(", "p_img", ",", "crop_size", ",", "\n", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "p_img", "=", "p_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "p_img", ",", "margin", "\n", "\n", "", "p_img", "=", "p_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "p_img", "", "", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.logger.LogFormatter.format": [[24, 49], ["logger.LogFormatter.__set_fmt", "logging.Formatter.format", "logger.LogFormatter.__set_fmt", "logging.Formatter.format", "logger.LogFormatter._color_date", "mcl"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.logger.LogFormatter.format", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.logger.LogFormatter.format", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.logger.LogFormatter._color_date"], ["def", "format", "(", "self", ",", "record", ")", ":", "\n", "        ", "if", "record", ".", "levelno", "==", "logging", ".", "DEBUG", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_dbg", ",", "'DBG'", "\n", "", "elif", "record", ".", "levelno", "==", "logging", ".", "WARNING", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_warn", ",", "'WRN'", "\n", "", "elif", "record", ".", "levelno", "==", "logging", ".", "ERROR", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_err", ",", "'ERR'", "\n", "", "else", ":", "\n", "            ", "mcl", ",", "mtxt", "=", "self", ".", "_color_normal", ",", "''", "\n", "\n", "", "if", "mtxt", ":", "\n", "            ", "mtxt", "+=", "' '", "\n", "\n", "", "if", "self", ".", "log_fout", ":", "\n", "            ", "self", ".", "__set_fmt", "(", "self", ".", "date_full", "+", "mtxt", "+", "self", ".", "msg", ")", "\n", "formatted", "=", "super", "(", "LogFormatter", ",", "self", ")", ".", "format", "(", "record", ")", "\n", "# self.log_fout.write(formatted)", "\n", "# self.log_fout.write('\\n')", "\n", "# self.log_fout.flush()", "\n", "return", "formatted", "\n", "\n", "", "self", ".", "__set_fmt", "(", "self", ".", "_color_date", "(", "self", ".", "date", ")", "+", "mcl", "(", "mtxt", "+", "self", ".", "msg", ")", ")", "\n", "formatted", "=", "super", "(", "LogFormatter", ",", "self", ")", ".", "format", "(", "record", ")", "\n", "\n", "return", "formatted", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.logger.LogFormatter._color_dbg": [[57, 60], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_color_dbg", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[36m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.logger.LogFormatter._color_warn": [[61, 64], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_warn", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[1;31m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.logger.LogFormatter._color_err": [[65, 68], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_err", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[1;4;31m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.logger.LogFormatter._color_omitted": [[69, 72], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_omitted", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[35m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.logger.LogFormatter._color_normal": [[73, 76], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_normal", "(", "msg", ")", ":", "\n", "        ", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.logger.LogFormatter._color_date": [[77, 80], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_color_date", "(", "msg", ")", ":", "\n", "        ", "return", "'\\x1b[32m{}\\x1b[0m'", ".", "format", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.logger.get_logger": [[82, 100], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "utils.pyt_utils.ensure_dir", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "formatter"], "function", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.ensure_dir"], ["", "", "def", "get_logger", "(", "log_dir", "=", "None", ",", "log_file", "=", "None", ",", "formatter", "=", "LogFormatter", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "_default_level", ")", "\n", "del", "logger", ".", "handlers", "[", ":", "]", "\n", "\n", "if", "log_dir", "and", "log_file", ":", "\n", "        ", "pyt_utils", ".", "ensure_dir", "(", "log_dir", ")", "\n", "LogFormatter", ".", "log_fout", "=", "True", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "mode", "=", "'a'", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "", "stream_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "stream_handler", ".", "setFormatter", "(", "formatter", "(", "datefmt", "=", "'%d %H:%M:%S'", ")", ")", "\n", "stream_handler", ".", "setLevel", "(", "0", ")", "\n", "logger", ".", "addHandler", "(", "stream_handler", ")", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.__init__": [[19, 41], ["evaluator.Evaluator.dataset.get_length", "multiprocessing.get_context", "evaluator.Evaluator.context.Queue", "utils.pyt_utils.ensure_dir"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.dataloader.RGBXDataset.RGBXDataset.get_length", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.ensure_dir"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "class_num", ",", "norm_mean", ",", "norm_std", ",", "network", ",", "multi_scales", ",", "\n", "is_flip", ",", "devices", ",", "verbose", "=", "False", ",", "save_path", "=", "None", ",", "show_image", "=", "False", ")", ":", "\n", "        ", "self", ".", "eval_time", "=", "0", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "ndata", "=", "self", ".", "dataset", ".", "get_length", "(", ")", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "norm_mean", "=", "norm_mean", "\n", "self", ".", "norm_std", "=", "norm_std", "\n", "self", ".", "multi_scales", "=", "multi_scales", "\n", "self", ".", "is_flip", "=", "is_flip", "\n", "self", ".", "network", "=", "network", "\n", "self", ".", "devices", "=", "devices", "\n", "\n", "self", ".", "context", "=", "mp", ".", "get_context", "(", "'spawn'", ")", "\n", "self", ".", "val_func", "=", "None", "\n", "self", ".", "results_queue", "=", "self", ".", "context", ".", "Queue", "(", "self", ".", "ndata", ")", "\n", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "save_path", "=", "save_path", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "            ", "ensure_dir", "(", "save_path", ")", "\n", "", "self", ".", "show_image", "=", "show_image", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.run": [[42, 99], ["open", "utils.pyt_utils.link_file", "open.close", "logger.info", "utils.pyt_utils.load_model", "open.write", "open.write", "open.write", "open.flush", "int", "os.listdir", "os.listdir.remove", "enumerate", "numpy.array", "os.path.exists", "len", "evaluator.Evaluator.single_process_evalutation", "evaluator.Evaluator.multi_process_evaluation", "model_indice.split", "len", "len", "len", "int", "numpy.array", "os.path.join", "model_indice.split", "[].split", "int", "os.path.join", "m.split"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.link_file", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.pyt_utils.load_model", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.single_process_evalutation", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.multi_process_evaluation"], ["", "def", "run", "(", "self", ",", "model_path", ",", "model_indice", ",", "log_file", ",", "log_file_link", ")", ":", "\n", "        ", "\"\"\"There are four evaluation modes:\n            1.only eval a .pth model: -e *.pth\n            2.only eval a certain epoch: -e epoch\n            3.eval all epochs in a given section: -e start_epoch-end_epoch\n            4.eval all epochs from a certain started epoch: -e start_epoch-\n            \"\"\"", "\n", "if", "'.pth'", "in", "model_indice", ":", "\n", "            ", "models", "=", "[", "model_indice", ",", "]", "\n", "", "elif", "\"-\"", "in", "model_indice", ":", "\n", "            ", "start_epoch", "=", "int", "(", "model_indice", ".", "split", "(", "\"-\"", ")", "[", "0", "]", ")", "\n", "end_epoch", "=", "model_indice", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "\n", "models", "=", "os", ".", "listdir", "(", "model_path", ")", "\n", "models", ".", "remove", "(", "\"epoch-last.pth\"", ")", "\n", "sorted_models", "=", "[", "None", "]", "*", "len", "(", "models", ")", "\n", "model_idx", "=", "[", "0", "]", "*", "len", "(", "models", ")", "\n", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "models", ")", ":", "\n", "                ", "num", "=", "m", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "model_idx", "[", "idx", "]", "=", "num", "\n", "sorted_models", "[", "idx", "]", "=", "m", "\n", "", "model_idx", "=", "np", ".", "array", "(", "[", "int", "(", "i", ")", "for", "i", "in", "model_idx", "]", ")", "\n", "\n", "down_bound", "=", "model_idx", ">=", "start_epoch", "\n", "up_bound", "=", "[", "True", "]", "*", "len", "(", "sorted_models", ")", "\n", "if", "end_epoch", ":", "\n", "                ", "end_epoch", "=", "int", "(", "end_epoch", ")", "\n", "assert", "start_epoch", "<", "end_epoch", "\n", "up_bound", "=", "model_idx", "<=", "end_epoch", "\n", "", "bound", "=", "up_bound", "*", "down_bound", "\n", "model_slice", "=", "np", ".", "array", "(", "sorted_models", ")", "[", "bound", "]", "\n", "models", "=", "[", "os", ".", "path", ".", "join", "(", "model_path", ",", "model", ")", "for", "model", "in", "\n", "model_slice", "]", "\n", "", "else", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "                ", "models", "=", "[", "os", ".", "path", ".", "join", "(", "model_path", ",", "'epoch-%s.pth'", "%", "model_indice", ")", ",", "]", "\n", "", "else", ":", "\n", "                ", "models", "=", "[", "None", "]", "\n", "\n", "", "", "results", "=", "open", "(", "log_file", ",", "'a'", ")", "\n", "link_file", "(", "log_file", ",", "log_file_link", ")", "\n", "\n", "for", "model", "in", "models", ":", "\n", "            ", "logger", ".", "info", "(", "\"Load Model: %s\"", "%", "model", ")", "\n", "self", ".", "val_func", "=", "load_model", "(", "self", ".", "network", ",", "model", ")", "\n", "if", "len", "(", "self", ".", "devices", ")", "==", "1", ":", "\n", "                ", "result_line", "=", "self", ".", "single_process_evalutation", "(", ")", "\n", "", "else", ":", "\n", "                ", "result_line", "=", "self", ".", "multi_process_evaluation", "(", ")", "\n", "\n", "", "results", ".", "write", "(", "'Model: '", "+", "model", "+", "'\\n'", ")", "\n", "results", ".", "write", "(", "result_line", ")", "\n", "results", ".", "write", "(", "'\\n'", ")", "\n", "results", ".", "flush", "(", ")", "\n", "\n", "", "results", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.single_process_evalutation": [[101, 115], ["time.perf_counter", "logger.info", "tqdm.tqdm.tqdm", "evaluator.Evaluator.compute_metric", "logger.info", "range", "evaluator.Evaluator.func_per_iteration", "all_results.append", "time.perf_counter"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.compute_metric", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.func_per_iteration"], ["", "def", "single_process_evalutation", "(", "self", ")", ":", "\n", "        ", "start_eval_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "logger", ".", "info", "(", "'GPU %s handle %d data.'", "%", "(", "self", ".", "devices", "[", "0", "]", ",", "self", ".", "ndata", ")", ")", "\n", "all_results", "=", "[", "]", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "self", ".", "ndata", ")", ")", ":", "\n", "            ", "dd", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "results_dict", "=", "self", ".", "func_per_iteration", "(", "dd", ",", "self", ".", "devices", "[", "0", "]", ")", "\n", "all_results", ".", "append", "(", "results_dict", ")", "\n", "", "result_line", "=", "self", ".", "compute_metric", "(", "all_results", ")", "\n", "logger", ".", "info", "(", "\n", "'Evaluation Elapsed Time: %.2fs'", "%", "(", "\n", "time", ".", "perf_counter", "(", ")", "-", "start_eval_time", ")", ")", "\n", "return", "result_line", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.multi_process_evaluation": [[117, 154], ["time.perf_counter", "len", "int", "range", "tqdm.tqdm.tqdm", "evaluator.Evaluator.compute_metric", "logger.info", "numpy.ceil", "min", "list", "logger.info", "evaluator.Evaluator.context.Process", "procs.append", "evaluator.Evaluator.start", "range", "evaluator.Evaluator.results_queue.get", "all_results.append", "evaluator.Evaluator.join", "range", "evaluator.Evaluator.compute_metric", "time.perf_counter", "len"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.compute_metric", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.compute_metric"], ["", "def", "multi_process_evaluation", "(", "self", ")", ":", "\n", "        ", "start_eval_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "nr_devices", "=", "len", "(", "self", ".", "devices", ")", "\n", "stride", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "ndata", "/", "nr_devices", ")", ")", "\n", "\n", "# start multi-process on multi-gpu", "\n", "procs", "=", "[", "]", "\n", "for", "d", "in", "range", "(", "nr_devices", ")", ":", "\n", "\n", "            ", "e_record", "=", "min", "(", "(", "d", "+", "1", ")", "*", "stride", ",", "self", ".", "ndata", ")", "\n", "shred_list", "=", "list", "(", "range", "(", "d", "*", "stride", ",", "e_record", ")", ")", "\n", "device", "=", "self", ".", "devices", "[", "d", "]", "\n", "logger", ".", "info", "(", "'GPU %s handle %d data.'", "%", "(", "device", ",", "len", "(", "shred_list", ")", ")", ")", "\n", "\n", "p", "=", "self", ".", "context", ".", "Process", "(", "target", "=", "self", ".", "worker", ",", "\n", "args", "=", "(", "shred_list", ",", "device", ")", ")", "\n", "procs", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "procs", ":", "\n", "\n", "            ", "p", ".", "start", "(", ")", "\n", "\n", "", "all_results", "=", "[", "]", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "self", ".", "ndata", ")", ")", ":", "\n", "            ", "t", "=", "self", ".", "results_queue", ".", "get", "(", ")", "\n", "all_results", ".", "append", "(", "t", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "self", ".", "compute_metric", "(", "all_results", ")", "\n", "\n", "", "", "for", "p", "in", "procs", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n", "", "result_line", "=", "self", ".", "compute_metric", "(", "all_results", ")", "\n", "logger", ".", "info", "(", "\n", "'Evaluation Elapsed Time: %.2fs'", "%", "(", "\n", "time", ".", "perf_counter", "(", ")", "-", "start_eval_time", ")", ")", "\n", "return", "result_line", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.worker": [[155, 164], ["time.time", "logger.info", "evaluator.Evaluator.func_per_iteration", "evaluator.Evaluator.results_queue.put", "time.time"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.func_per_iteration"], ["", "def", "worker", "(", "self", ",", "shred_list", ",", "device", ")", ":", "\n", "        ", "start_load_time", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "'Load Model on Device %d: %.2fs'", "%", "(", "\n", "device", ",", "time", ".", "time", "(", ")", "-", "start_load_time", ")", ")", "\n", "\n", "for", "idx", "in", "shred_list", ":", "\n", "            ", "dd", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "results_dict", "=", "self", ".", "func_per_iteration", "(", "dd", ",", "device", ")", "\n", "self", ".", "results_queue", ".", "put", "(", "results_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.func_per_iteration": [[165, 167], ["None"], "methods", ["None"], ["", "", "def", "func_per_iteration", "(", "self", ",", "data", ",", "device", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.compute_metric": [[168, 170], ["None"], "methods", ["None"], ["", "def", "compute_metric", "(", "self", ",", "results", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.whole_eval": [[172, 189], ["numpy.zeros", "numpy.zeros.argmax", "cv2.resize", "evaluator.Evaluator.process_image", "evaluator.Evaluator.val_func_process", "pred.permute.permute.permute", "cv2.resize", "pred.permute.permute.cpu().numpy", "pred.permute.permute.cpu"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.process_image", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.val_func_process"], ["", "def", "whole_eval", "(", "self", ",", "img", ",", "output_size", ",", "device", "=", "None", ")", ":", "\n", "        ", "processed_pred", "=", "np", ".", "zeros", "(", "\n", "(", "output_size", "[", "0", "]", ",", "output_size", "[", "1", "]", ",", "self", ".", "class_num", ")", ")", "\n", "\n", "for", "s", "in", "self", ".", "multi_scales", ":", "\n", "            ", "scaled_img", "=", "cv2", ".", "resize", "(", "img", ",", "None", ",", "fx", "=", "s", ",", "fy", "=", "s", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "scaled_img", "=", "self", ".", "process_image", "(", "scaled_img", ",", "None", ")", "\n", "pred", "=", "self", ".", "val_func_process", "(", "scaled_img", ",", "device", ")", "\n", "pred", "=", "pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "processed_pred", "+=", "cv2", ".", "resize", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "(", "output_size", "[", "1", "]", ",", "output_size", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "", "pred", "=", "processed_pred", ".", "argmax", "(", "2", ")", "\n", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.sliding_eval": [[191, 206], ["numpy.zeros", "numpy.zeros.argmax", "cv2.resize", "evaluator.Evaluator.scale_process"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.scale_process"], ["", "def", "sliding_eval", "(", "self", ",", "img", ",", "crop_size", ",", "stride_rate", ",", "device", "=", "None", ")", ":", "\n", "        ", "ori_rows", ",", "ori_cols", ",", "c", "=", "img", ".", "shape", "\n", "processed_pred", "=", "np", ".", "zeros", "(", "(", "ori_rows", ",", "ori_cols", ",", "self", ".", "class_num", ")", ")", "\n", "\n", "for", "s", "in", "self", ".", "multi_scales", ":", "\n", "            ", "img_scale", "=", "cv2", ".", "resize", "(", "img", ",", "None", ",", "fx", "=", "s", ",", "fy", "=", "s", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "new_rows", ",", "new_cols", ",", "_", "=", "img_scale", ".", "shape", "\n", "processed_pred", "+=", "self", ".", "scale_process", "(", "img_scale", ",", "\n", "(", "ori_rows", ",", "ori_cols", ")", ",", "\n", "crop_size", ",", "stride_rate", ",", "device", ")", "\n", "\n", "", "pred", "=", "processed_pred", ".", "argmax", "(", "2", ")", "\n", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.scale_process": [[207, 259], ["evaluator.Evaluator.permute", "cv2.resize", "evaluator.Evaluator.process_image", "evaluator.Evaluator.val_func_process", "int", "utils.transforms.pad_image_to_shape", "torch.zeros().cuda", "torch.zeros().cuda", "range", "evaluator.Evaluator.cpu().numpy", "numpy.ceil", "int", "int", "range", "numpy.ceil", "numpy.ceil", "torch.zeros", "torch.zeros", "min", "min", "evaluator.Evaluator.process_image", "evaluator.Evaluator.val_func_process", "evaluator.Evaluator.cpu"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.process_image", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.val_func_process", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.pad_image_to_shape", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.process_image", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.val_func_process"], ["", "def", "scale_process", "(", "self", ",", "img", ",", "ori_shape", ",", "crop_size", ",", "stride_rate", ",", "\n", "device", "=", "None", ")", ":", "\n", "        ", "new_rows", ",", "new_cols", ",", "c", "=", "img", ".", "shape", "\n", "long_size", "=", "new_cols", "if", "new_cols", ">", "new_rows", "else", "new_rows", "\n", "\n", "if", "long_size", "<=", "crop_size", ":", "\n", "            ", "input_data", ",", "margin", "=", "self", ".", "process_image", "(", "img", ",", "crop_size", ")", "\n", "score", "=", "self", ".", "val_func_process", "(", "input_data", ",", "device", ")", "\n", "score", "=", "score", "[", ":", ",", "margin", "[", "0", "]", ":", "(", "score", ".", "shape", "[", "1", "]", "-", "margin", "[", "1", "]", ")", ",", "\n", "margin", "[", "2", "]", ":", "(", "score", ".", "shape", "[", "2", "]", "-", "margin", "[", "3", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "stride", "=", "int", "(", "np", ".", "ceil", "(", "crop_size", "*", "stride_rate", ")", ")", "\n", "img_pad", ",", "margin", "=", "pad_image_to_shape", "(", "img", ",", "crop_size", ",", "\n", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "\n", "pad_rows", "=", "img_pad", ".", "shape", "[", "0", "]", "\n", "pad_cols", "=", "img_pad", ".", "shape", "[", "1", "]", "\n", "r_grid", "=", "int", "(", "np", ".", "ceil", "(", "(", "pad_rows", "-", "crop_size", ")", "/", "stride", ")", ")", "+", "1", "\n", "c_grid", "=", "int", "(", "np", ".", "ceil", "(", "(", "pad_cols", "-", "crop_size", ")", "/", "stride", ")", ")", "+", "1", "\n", "data_scale", "=", "torch", ".", "zeros", "(", "self", ".", "class_num", ",", "pad_rows", ",", "pad_cols", ")", ".", "cuda", "(", "\n", "device", ")", "\n", "count_scale", "=", "torch", ".", "zeros", "(", "self", ".", "class_num", ",", "pad_rows", ",", "pad_cols", ")", ".", "cuda", "(", "\n", "device", ")", "\n", "\n", "for", "grid_yidx", "in", "range", "(", "r_grid", ")", ":", "\n", "                ", "for", "grid_xidx", "in", "range", "(", "c_grid", ")", ":", "\n", "                    ", "s_x", "=", "grid_xidx", "*", "stride", "\n", "s_y", "=", "grid_yidx", "*", "stride", "\n", "e_x", "=", "min", "(", "s_x", "+", "crop_size", ",", "pad_cols", ")", "\n", "e_y", "=", "min", "(", "s_y", "+", "crop_size", ",", "pad_rows", ")", "\n", "s_x", "=", "e_x", "-", "crop_size", "\n", "s_y", "=", "e_y", "-", "crop_size", "\n", "img_sub", "=", "img_pad", "[", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", ",", ":", "]", "\n", "count_scale", "[", ":", ",", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", "]", "+=", "1", "\n", "\n", "input_data", ",", "tmargin", "=", "self", ".", "process_image", "(", "img_sub", ",", "crop_size", ")", "\n", "temp_score", "=", "self", ".", "val_func_process", "(", "input_data", ",", "device", ")", "\n", "temp_score", "=", "temp_score", "[", ":", ",", "\n", "tmargin", "[", "0", "]", ":", "(", "temp_score", ".", "shape", "[", "1", "]", "-", "tmargin", "[", "1", "]", ")", ",", "\n", "tmargin", "[", "2", "]", ":", "(", "temp_score", ".", "shape", "[", "2", "]", "-", "tmargin", "[", "3", "]", ")", "]", "\n", "data_scale", "[", ":", ",", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", "]", "+=", "temp_score", "\n", "# score = data_scale / count_scale", "\n", "", "", "score", "=", "data_scale", "\n", "score", "=", "score", "[", ":", ",", "margin", "[", "0", "]", ":", "(", "score", ".", "shape", "[", "1", "]", "-", "margin", "[", "1", "]", ")", ",", "\n", "margin", "[", "2", "]", ":", "(", "score", ".", "shape", "[", "2", "]", "-", "margin", "[", "3", "]", ")", "]", "\n", "\n", "", "score", "=", "score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "data_output", "=", "cv2", ".", "resize", "(", "score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "(", "ori_shape", "[", "1", "]", ",", "ori_shape", "[", "0", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "data_output", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.val_func_process": [[260, 281], ["numpy.ascontiguousarray", "torch.FloatTensor().cuda", "torch.cuda.device", "evaluator.Evaluator.val_func.eval", "evaluator.Evaluator.val_func.to", "torch.FloatTensor", "input_data.flip.flip.get_device", "input_data.flip.flip.get_device", "torch.no_grad", "evaluator.Evaluator.val_func", "input_data.flip.flip.flip", "evaluator.Evaluator.val_func", "evaluator.Evaluator.flip"], "methods", ["None"], ["", "def", "val_func_process", "(", "self", ",", "input_data", ",", "device", "=", "None", ")", ":", "\n", "        ", "input_data", "=", "np", ".", "ascontiguousarray", "(", "input_data", "[", "None", ",", ":", ",", ":", ",", ":", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "input_data", "=", "torch", ".", "FloatTensor", "(", "input_data", ")", ".", "cuda", "(", "device", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "input_data", ".", "get_device", "(", ")", ")", ":", "\n", "            ", "self", ".", "val_func", ".", "eval", "(", ")", "\n", "self", ".", "val_func", ".", "to", "(", "input_data", ".", "get_device", "(", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "score", "=", "self", ".", "val_func", "(", "input_data", ")", "\n", "score", "=", "score", "[", "0", "]", "\n", "\n", "if", "self", ".", "is_flip", ":", "\n", "                    ", "input_data", "=", "input_data", ".", "flip", "(", "-", "1", ")", "\n", "score_flip", "=", "self", ".", "val_func", "(", "input_data", ")", "\n", "score_flip", "=", "score_flip", "[", "0", "]", "\n", "score", "+=", "score_flip", ".", "flip", "(", "-", "1", ")", "\n", "# score = torch.exp(score)", "\n", "# score = score.data", "\n", "\n", "", "", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.process_image": [[282, 303], ["utils.transforms.normalize", "p_img.transpose.transpose.transpose", "numpy.concatenate", "utils.transforms.pad_image_to_shape", "p_img.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.normalize", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.pad_image_to_shape"], ["", "def", "process_image", "(", "self", ",", "img", ",", "crop_size", "=", "None", ")", ":", "\n", "        ", "p_img", "=", "img", "\n", "\n", "if", "img", ".", "shape", "[", "2", "]", "<", "3", ":", "\n", "            ", "im_b", "=", "p_img", "\n", "im_g", "=", "p_img", "\n", "im_r", "=", "p_img", "\n", "p_img", "=", "np", ".", "concatenate", "(", "(", "im_b", ",", "im_g", ",", "im_r", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "p_img", "=", "normalize", "(", "p_img", ",", "self", ".", "norm_mean", ",", "self", ".", "norm_std", ")", "\n", "\n", "if", "crop_size", "is", "not", "None", ":", "\n", "            ", "p_img", ",", "margin", "=", "pad_image_to_shape", "(", "p_img", ",", "crop_size", ",", "\n", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "p_img", "=", "p_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "p_img", ",", "margin", "\n", "\n", "", "p_img", "=", "p_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "return", "p_img", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.sliding_eval_rgbX": [[306, 325], ["timm.models.layers.to_2tuple", "numpy.zeros", "numpy.zeros.argmax", "cv2.resize", "evaluator.Evaluator.scale_process_rgbX", "len", "cv2.resize", "cv2.resize"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.scale_process_rgbX"], ["", "def", "sliding_eval_rgbX", "(", "self", ",", "img", ",", "modal_x", ",", "crop_size", ",", "stride_rate", ",", "device", "=", "None", ")", ":", "\n", "        ", "crop_size", "=", "to_2tuple", "(", "crop_size", ")", "\n", "ori_rows", ",", "ori_cols", ",", "_", "=", "img", ".", "shape", "\n", "processed_pred", "=", "np", ".", "zeros", "(", "(", "ori_rows", ",", "ori_cols", ",", "self", ".", "class_num", ")", ")", "\n", "\n", "for", "s", "in", "self", ".", "multi_scales", ":", "\n", "            ", "img_scale", "=", "cv2", ".", "resize", "(", "img", ",", "None", ",", "fx", "=", "s", ",", "fy", "=", "s", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "if", "len", "(", "modal_x", ".", "shape", ")", "==", "2", ":", "\n", "                ", "modal_x_scale", "=", "cv2", ".", "resize", "(", "modal_x", ",", "None", ",", "fx", "=", "s", ",", "fy", "=", "s", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "", "else", ":", "\n", "                ", "modal_x_scale", "=", "cv2", ".", "resize", "(", "modal_x", ",", "None", ",", "fx", "=", "s", ",", "fy", "=", "s", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "", "new_rows", ",", "new_cols", ",", "_", "=", "img_scale", ".", "shape", "\n", "processed_pred", "+=", "self", ".", "scale_process_rgbX", "(", "img_scale", ",", "modal_x_scale", ",", "(", "ori_rows", ",", "ori_cols", ")", ",", "\n", "crop_size", ",", "stride_rate", ",", "device", ")", "\n", "\n", "", "pred", "=", "processed_pred", ".", "argmax", "(", "2", ")", "\n", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.scale_process_rgbX": [[326, 373], ["evaluator.Evaluator.permute", "cv2.resize", "evaluator.Evaluator.process_image_rgbX", "evaluator.Evaluator.val_func_process_rgbX", "utils.transforms.pad_image_to_shape", "utils.transforms.pad_image_to_shape", "torch.zeros().cuda", "range", "evaluator.Evaluator.cpu().numpy", "int", "int", "int", "int", "range", "numpy.ceil", "numpy.ceil", "numpy.ceil", "numpy.ceil", "torch.zeros", "min", "min", "evaluator.Evaluator.process_image_rgbX", "evaluator.Evaluator.val_func_process_rgbX", "evaluator.Evaluator.cpu", "len"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.process_image_rgbX", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.val_func_process_rgbX", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.pad_image_to_shape", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.pad_image_to_shape", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.process_image_rgbX", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.val_func_process_rgbX"], ["", "def", "scale_process_rgbX", "(", "self", ",", "img", ",", "modal_x", ",", "ori_shape", ",", "crop_size", ",", "stride_rate", ",", "device", "=", "None", ")", ":", "\n", "        ", "new_rows", ",", "new_cols", ",", "c", "=", "img", ".", "shape", "\n", "long_size", "=", "new_cols", "if", "new_cols", ">", "new_rows", "else", "new_rows", "\n", "\n", "if", "new_cols", "<=", "crop_size", "[", "1", "]", "or", "new_rows", "<=", "crop_size", "[", "0", "]", ":", "\n", "            ", "input_data", ",", "input_modal_x", ",", "margin", "=", "self", ".", "process_image_rgbX", "(", "img", ",", "modal_x", ",", "crop_size", ")", "\n", "score", "=", "self", ".", "val_func_process_rgbX", "(", "input_data", ",", "input_modal_x", ",", "device", ")", "\n", "score", "=", "score", "[", ":", ",", "margin", "[", "0", "]", ":", "(", "score", ".", "shape", "[", "1", "]", "-", "margin", "[", "1", "]", ")", ",", "margin", "[", "2", "]", ":", "(", "score", ".", "shape", "[", "2", "]", "-", "margin", "[", "3", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "stride", "=", "(", "int", "(", "np", ".", "ceil", "(", "crop_size", "[", "0", "]", "*", "stride_rate", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "crop_size", "[", "1", "]", "*", "stride_rate", ")", ")", ")", "\n", "img_pad", ",", "margin", "=", "pad_image_to_shape", "(", "img", ",", "crop_size", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "modal_x_pad", ",", "margin", "=", "pad_image_to_shape", "(", "modal_x", ",", "crop_size", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "\n", "pad_rows", "=", "img_pad", ".", "shape", "[", "0", "]", "\n", "pad_cols", "=", "img_pad", ".", "shape", "[", "1", "]", "\n", "r_grid", "=", "int", "(", "np", ".", "ceil", "(", "(", "pad_rows", "-", "crop_size", "[", "0", "]", ")", "/", "stride", "[", "0", "]", ")", ")", "+", "1", "\n", "c_grid", "=", "int", "(", "np", ".", "ceil", "(", "(", "pad_cols", "-", "crop_size", "[", "1", "]", ")", "/", "stride", "[", "1", "]", ")", ")", "+", "1", "\n", "data_scale", "=", "torch", ".", "zeros", "(", "self", ".", "class_num", ",", "pad_rows", ",", "pad_cols", ")", ".", "cuda", "(", "device", ")", "\n", "\n", "for", "grid_yidx", "in", "range", "(", "r_grid", ")", ":", "\n", "                ", "for", "grid_xidx", "in", "range", "(", "c_grid", ")", ":", "\n", "                    ", "s_x", "=", "grid_xidx", "*", "stride", "[", "0", "]", "\n", "s_y", "=", "grid_yidx", "*", "stride", "[", "1", "]", "\n", "e_x", "=", "min", "(", "s_x", "+", "crop_size", "[", "0", "]", ",", "pad_cols", ")", "\n", "e_y", "=", "min", "(", "s_y", "+", "crop_size", "[", "1", "]", ",", "pad_rows", ")", "\n", "s_x", "=", "e_x", "-", "crop_size", "[", "0", "]", "\n", "s_y", "=", "e_y", "-", "crop_size", "[", "1", "]", "\n", "img_sub", "=", "img_pad", "[", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", ",", ":", "]", "\n", "if", "len", "(", "modal_x_pad", ".", "shape", ")", "==", "2", ":", "\n", "                        ", "modal_x_sub", "=", "modal_x_pad", "[", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", "]", "\n", "", "else", ":", "\n", "                        ", "modal_x_sub", "=", "modal_x_pad", "[", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", ",", ":", "]", "\n", "\n", "", "input_data", ",", "input_modal_x", ",", "tmargin", "=", "self", ".", "process_image_rgbX", "(", "img_sub", ",", "modal_x_sub", ",", "crop_size", ")", "\n", "temp_score", "=", "self", ".", "val_func_process_rgbX", "(", "input_data", ",", "input_modal_x", ",", "device", ")", "\n", "\n", "temp_score", "=", "temp_score", "[", ":", ",", "tmargin", "[", "0", "]", ":", "(", "temp_score", ".", "shape", "[", "1", "]", "-", "tmargin", "[", "1", "]", ")", ",", "\n", "tmargin", "[", "2", "]", ":", "(", "temp_score", ".", "shape", "[", "2", "]", "-", "tmargin", "[", "3", "]", ")", "]", "\n", "data_scale", "[", ":", ",", "s_y", ":", "e_y", ",", "s_x", ":", "e_x", "]", "+=", "temp_score", "\n", "", "", "score", "=", "data_scale", "\n", "score", "=", "score", "[", ":", ",", "margin", "[", "0", "]", ":", "(", "score", ".", "shape", "[", "1", "]", "-", "margin", "[", "1", "]", ")", ",", "\n", "margin", "[", "2", "]", ":", "(", "score", ".", "shape", "[", "2", "]", "-", "margin", "[", "3", "]", ")", "]", "\n", "\n", "", "score", "=", "score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "data_output", "=", "cv2", ".", "resize", "(", "score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "(", "ori_shape", "[", "1", "]", ",", "ori_shape", "[", "0", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "data_output", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.val_func_process_rgbX": [[374, 396], ["numpy.ascontiguousarray", "torch.FloatTensor().cuda", "numpy.ascontiguousarray", "torch.FloatTensor().cuda", "torch.cuda.device", "evaluator.Evaluator.val_func.eval", "evaluator.Evaluator.val_func.to", "torch.FloatTensor", "torch.FloatTensor", "input_data.flip.flip.get_device", "input_data.flip.flip.get_device", "torch.no_grad", "evaluator.Evaluator.val_func", "torch.exp", "input_data.flip.flip.flip", "input_modal_x.flip.flip.flip", "evaluator.Evaluator.val_func", "evaluator.Evaluator.flip"], "methods", ["None"], ["", "def", "val_func_process_rgbX", "(", "self", ",", "input_data", ",", "input_modal_x", ",", "device", "=", "None", ")", ":", "\n", "        ", "input_data", "=", "np", ".", "ascontiguousarray", "(", "input_data", "[", "None", ",", ":", ",", ":", ",", ":", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "input_data", "=", "torch", ".", "FloatTensor", "(", "input_data", ")", ".", "cuda", "(", "device", ")", "\n", "\n", "input_modal_x", "=", "np", ".", "ascontiguousarray", "(", "input_modal_x", "[", "None", ",", ":", ",", ":", ",", ":", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "input_modal_x", "=", "torch", ".", "FloatTensor", "(", "input_modal_x", ")", ".", "cuda", "(", "device", ")", "\n", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "input_data", ".", "get_device", "(", ")", ")", ":", "\n", "            ", "self", ".", "val_func", ".", "eval", "(", ")", "\n", "self", ".", "val_func", ".", "to", "(", "input_data", ".", "get_device", "(", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "score", "=", "self", ".", "val_func", "(", "input_data", ",", "input_modal_x", ")", "\n", "score", "=", "score", "[", "0", "]", "\n", "if", "self", ".", "is_flip", ":", "\n", "                    ", "input_data", "=", "input_data", ".", "flip", "(", "-", "1", ")", "\n", "input_modal_x", "=", "input_modal_x", ".", "flip", "(", "-", "1", ")", "\n", "score_flip", "=", "self", ".", "val_func", "(", "input_data", ",", "input_modal_x", ")", "\n", "score_flip", "=", "score_flip", "[", "0", "]", "\n", "score", "+=", "score_flip", ".", "flip", "(", "-", "1", ")", "\n", "", "score", "=", "torch", ".", "exp", "(", "score", ")", "\n", "\n", "", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.engine.evaluator.Evaluator.process_image_rgbX": [[398, 433], ["utils.transforms.normalize", "p_img.transpose.transpose.transpose", "numpy.concatenate", "len", "utils.transforms.normalize", "utils.transforms.normalize", "utils.transforms.pad_image_to_shape", "utils.transforms.pad_image_to_shape", "p_img.transpose.transpose.transpose", "len", "p_modal_x.transpose.transpose.transpose", "len", "p_modal_x.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.normalize", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.normalize", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.normalize", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.pad_image_to_shape", "home.repos.pwc.inspect_result.huaaaliu_rgbx_semantic_segmentation.utils.transforms.pad_image_to_shape"], ["", "def", "process_image_rgbX", "(", "self", ",", "img", ",", "modal_x", ",", "crop_size", "=", "None", ")", ":", "\n", "        ", "p_img", "=", "img", "\n", "p_modal_x", "=", "modal_x", "\n", "\n", "if", "img", ".", "shape", "[", "2", "]", "<", "3", ":", "\n", "            ", "im_b", "=", "p_img", "\n", "im_g", "=", "p_img", "\n", "im_r", "=", "p_img", "\n", "p_img", "=", "np", ".", "concatenate", "(", "(", "im_b", ",", "im_g", ",", "im_r", ")", ",", "amodal_xis", "=", "2", ")", "\n", "\n", "", "p_img", "=", "normalize", "(", "p_img", ",", "self", ".", "norm_mean", ",", "self", ".", "norm_std", ")", "\n", "if", "len", "(", "modal_x", ".", "shape", ")", "==", "2", ":", "\n", "            ", "p_modal_x", "=", "normalize", "(", "p_modal_x", ",", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "p_modal_x", "=", "normalize", "(", "p_modal_x", ",", "self", ".", "norm_mean", ",", "self", ".", "norm_std", ")", "\n", "\n", "", "if", "crop_size", "is", "not", "None", ":", "\n", "            ", "p_img", ",", "margin", "=", "pad_image_to_shape", "(", "p_img", ",", "crop_size", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "p_modal_x", ",", "_", "=", "pad_image_to_shape", "(", "p_modal_x", ",", "crop_size", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "0", ")", "\n", "p_img", "=", "p_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "if", "len", "(", "modal_x", ".", "shape", ")", "==", "2", ":", "\n", "                ", "p_modal_x", "=", "p_modal_x", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "else", ":", "\n", "                ", "p_modal_x", "=", "p_modal_x", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# 3 H W", "\n", "\n", "", "return", "p_img", ",", "p_modal_x", ",", "margin", "\n", "\n", "", "p_img", "=", "p_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# 3 H W", "\n", "\n", "if", "len", "(", "modal_x", ".", "shape", ")", "==", "2", ":", "\n", "            ", "p_modal_x", "=", "p_modal_x", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "else", ":", "\n", "            ", "p_modal_x", "=", "p_modal_x", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "return", "p_img", ",", "p_modal_x", "", "", "", ""]]}