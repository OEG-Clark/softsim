{"home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.PreprocessSentences.PreprocessSentences.__init__": [[12, 17], ["os.path.dirname", "os.path.abspath", "os.path.join", "print", "os.path.abspath", "os.path.dirname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "PATH", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "self", ".", "ROOT_DIR_PATH", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "PATH", ")", ")", "\n", "self", ".", "DATA_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ROOT_DIR_PATH", ",", "'data\\\\dialog_data\\\\'", ")", "\n", "print", "(", "'object created'", ")", "\n", "", "def", "seeker_sentences_parser", "(", "self", ",", "line", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.PreprocessSentences.PreprocessSentences.seeker_sentences_parser": [[17, 25], ["re.compile().search", "re.compile().search.group", "re.compile().search", "re.compile().search.group", "seeker_line.lower().strip.lower().strip.lower().strip", "str", "re.compile", "re.compile", "seeker_line.lower().strip.lower().strip.lower"], "methods", ["None"], ["", "def", "seeker_sentences_parser", "(", "self", ",", "line", ")", ":", "\n", "        ", "if", "line", ":", "\n", "            ", "p", "=", "re", ".", "compile", "(", "\"SEEKER:(.*)\"", ")", ".", "search", "(", "str", "(", "line", ")", ")", "\n", "temp_line", "=", "p", ".", "group", "(", "1", ")", "\n", "m", "=", "re", ".", "compile", "(", "'<s>(.*?)</s>'", ")", ".", "search", "(", "temp_line", ")", "\n", "seeker_line", "=", "m", ".", "group", "(", "1", ")", "\n", "seeker_line", "=", "seeker_line", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "return", "seeker_line", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.PreprocessSentences.PreprocessSentences.gt_sentence_parser": [[26, 42], ["re.compile().search", "re.compile().search.group", "re.compile().search", "re.compile().search.group", "gt_line.lower().strip.lower().strip.lower().strip", "print", "print", "print", "str", "re.compile", "re.compile", "gt_line.lower().strip.lower().strip.lower"], "methods", ["None"], ["", "", "def", "gt_sentence_parser", "(", "self", ",", "line", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "not", "line", "==", "'\\n'", ":", "\n", "                ", "p", "=", "re", ".", "compile", "(", "\"GROUND TRUTH:(.*)\"", ")", ".", "search", "(", "str", "(", "line", ")", ")", "\n", "temp_line", "=", "p", ".", "group", "(", "1", ")", "\n", "m", "=", "re", ".", "compile", "(", "'<s>(.*?)</s>'", ")", ".", "search", "(", "temp_line", ")", "\n", "gt_line", "=", "m", ".", "group", "(", "1", ")", "\n", "gt_line", "=", "gt_line", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "# gt_line = re.sub('[^A-Za-z0-9]+', ' ', gt_line)", "\n", "", "else", ":", "\n", "                ", "gt_line", "=", "\"\"", "\n", "", "", "except", "AttributeError", "as", "err", ":", "\n", "                ", "print", "(", "'exception accured while parsing ground truth.. \\n'", ")", "\n", "print", "(", "line", ")", "\n", "print", "(", "err", ")", "\n", "return", "gt_line", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.PreprocessSentences.PreprocessSentences.read_preprocess_sentences": [[44, 82], ["open", "PreprocessSentences.PreprocessSentences.__contains__", "print", "print", "print", "redial_dialogues.append", "PreprocessSentences.PreprocessSentences.replace_movieIds_withPL", "[].strip().lower", "PreprocessSentences.PreprocessSentences.convert_contractions", "re.sub", "PreprocessSentences.PreprocessSentences.replace().strip", "PreprocessSentences.PreprocessSentences.remove_stopwords", "PreprocessSentences.PreprocessSentences.replace", "len", "redial_dialogues.append", "redial_dialogues.append", "[].strip", "PreprocessSentences.PreprocessSentences.replace", "PreprocessSentences.PreprocessSentences.split"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.replace_movieIds_withPL", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.convert_contractions", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.remove_stopwords"], ["", "", "def", "read_preprocess_sentences", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "redial_dialogues", "=", "[", "]", "\n", "counter", "=", "0", "\n", "previous_line", "=", "''", "\n", "counter", "=", "0", "\n", "with", "open", "(", "file_name", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "input", ":", "\n", "            ", "for", "line", "in", "input", ":", "\n", "                ", "try", ":", "\n", "#if line.__contains__('~') and line.__contains__('SKR~'):", "\n", "                    ", "if", "line", ":", "\n", "                        ", "if", "line", ".", "__contains__", "(", "'CONVERSATION:'", ")", ":", "\n", "                            ", "redial_dialogues", ".", "append", "(", "line", ".", "replace", "(", "'\\n'", ",", "''", ")", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                            ", "previous_line", "=", "line", "\n", "line", "=", "self", ".", "replace_movieIds_withPL", "(", "line", ")", "\n", "line", "=", "line", ".", "split", "(", "'~'", ")", "[", "1", "]", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "line", "=", "self", ".", "convert_contractions", "(", "line", ")", "\n", "line", "=", "re", ".", "sub", "(", "'[^A-Za-z0-9]+'", ",", "' '", ",", "line", ")", "\n", "line", "=", "line", ".", "replace", "(", "'im'", ",", "'i am'", ")", ".", "strip", "(", ")", "\n", "line", "=", "self", ".", "remove_stopwords", "(", "line", ")", "\n", "if", "len", "(", "line", ")", "<", "1", ":", "\n", "                                ", "redial_dialogues", ".", "append", "(", "'**'", ")", "\n", "", "else", ":", "\n", "                                ", "redial_dialogues", ".", "append", "(", "line", ")", "\n", "", "", "", "else", ":", "\n", "#print('not found')", "\n", "#print(line)", "\n", "#print('previous line is ...' +previous_line)", "\n", "                        ", "print", "(", "'line issue'", ")", "\n", "counter", "=", "counter", "+", "1", "\n", "", "", "except", ":", "\n", "                    ", "print", "(", "(", "previous_line", ")", ")", "\n", "print", "(", "line", ")", "\n", "continue", "\n", "#print(counter)", "\n", "\n", "", "", "", "return", "redial_dialogues", "\n", "", "def", "remove_stopwords", "(", "self", ",", "line", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.PreprocessSentences.PreprocessSentences.remove_stopwords": [[82, 88], ["nltk.tokenize.word_tokenize", "print", "nltk.corpus.stopwords.words"], "methods", ["None"], ["", "def", "remove_stopwords", "(", "self", ",", "line", ")", ":", "\n", "        ", "text_tokens", "=", "word_tokenize", "(", "line", ")", "\n", "tokens_without_sw", "=", "[", "word", "for", "word", "in", "text_tokens", "if", "not", "word", "in", "stopwords", ".", "words", "(", ")", "]", "\n", "filtered_sentence", "=", "(", "\" \"", ")", ".", "join", "(", "tokens_without_sw", ")", "\n", "print", "(", "filtered_sentence", ")", "\n", "return", "filtered_sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.PreprocessSentences.PreprocessSentences.convert_contractions": [[90, 102], ["os.path.join", "open", "line.replace.replace.split", "key_line.split", "word.lower", "line.replace.replace.replace", "word.lower"], "methods", ["None"], ["", "def", "convert_contractions", "(", "self", ",", "line", ")", ":", "\n", "#line = \"What's the best way to ensure this?\"", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ROOT_DIR_PATH", ",", "'data\\contractions.txt'", ")", "\n", "contraction_dict", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "            ", "for", "key_line", "in", "f", ":", "\n", "               ", "(", "key", ",", "val", ")", "=", "key_line", ".", "split", "(", "':'", ")", "\n", "contraction_dict", "[", "key", "]", "=", "val", "\n", "", "for", "word", "in", "line", ".", "split", "(", ")", ":", "\n", "                ", "if", "word", ".", "lower", "(", ")", "in", "contraction_dict", ":", "\n", "                    ", "line", "=", "line", ".", "replace", "(", "word", ",", "contraction_dict", "[", "word", ".", "lower", "(", ")", "]", ")", "\n", "", "", "", "return", "line", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.PreprocessSentences.PreprocessSentences.replace_movieIds_withPL": [[103, 115], ["print", "re.findall", "lines.append", "print", "line.replace.replace.replace"], "methods", ["None"], ["", "def", "replace_movieIds_withPL", "(", "self", ",", "line", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "\"@\"", "in", "line", ":", "\n", "                ", "ids", "=", "re", ".", "findall", "(", "r'@\\S+'", ",", "line", ")", "\n", "for", "id", "in", "ids", ":", "\n", "                    ", "line", "=", "line", ".", "replace", "(", "id", ",", "'movieid'", ")", "\n", "#id = re.sub('[^0-9@]+', 'movieid', id)", "\n", "", "", "", "except", ":", "\n", "            ", "lines", ".", "append", "(", "line", ")", "\n", "print", "(", "'exception occured here'", ")", "\n", "", "return", "line", "\n", "print", "(", "'execution ends here'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.PrepareTrainingData.PrepareTrainingData.__init__": [[8, 14], ["os.path.dirname", "os.path.abspath", "os.path.join", "print", "os.path.abspath", "os.path.dirname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "redial_data", "=", "None", "\n", "self", ".", "PATH", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "self", ".", "ROOT_DIR_PATH", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "PATH", ")", ")", "\n", "self", ".", "DATA_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ROOT_DIR_PATH", ",", "'data\\\\dialog_data\\\\'", ")", "\n", "print", "(", "'object created'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.PrepareTrainingData.PrepareTrainingData.read_input_json_file": [[15, 18], ["open", "simplejson.load"], "methods", ["None"], ["", "def", "read_input_json_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "json_file", ":", "\n", "            ", "self", ".", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.PrepareTrainingData.PrepareTrainingData.parse_dialogues": [[19, 56], ["enumerate", "text_messages_raw.append", "enumerate", "text_messages_raw.append", "str", "text_messages_raw.append", "text_messages_raw.append", "text_messages_raw.append"], "methods", ["None"], ["", "", "def", "parse_dialogues", "(", "self", ",", "data", ")", ":", "\n", "        ", "dialogs", "=", "data", "[", "'foo'", "]", "\n", "text_messages_raw", "=", "[", "]", "\n", "counter", "=", "0", "\n", "for", "key", ",", "d", "in", "enumerate", "(", "dialogs", ")", ":", "\n", "#text_messages_raw = []", "\n", "            ", "messages", "=", "dialogs", "[", "key", "]", "[", "'messages'", "]", "\n", "seeker_id", "=", "dialogs", "[", "key", "]", "[", "'initiatorWorkerId'", "]", "\n", "recommender_id", "=", "dialogs", "[", "key", "]", "[", "'respondentWorkerId'", "]", "\n", "seeker_text", "=", "''", "\n", "gt_text", "=", "''", "\n", "counter", "=", "counter", "+", "1", "\n", "text_messages_raw", ".", "append", "(", "'CONVERSATION:'", "+", "str", "(", "counter", ")", ")", "\n", "for", "msgid", ",", "msg", "in", "enumerate", "(", "messages", ")", ":", "\n", "\n", "                ", "senderId", "=", "messages", "[", "msgid", "]", "[", "'senderWorkerId'", "]", "\n", "if", "senderId", "==", "seeker_id", ":", "\n", "                    ", "if", "gt_text", ":", "\n", "                        ", "text_messages_raw", ".", "append", "(", "'GT~'", "+", "gt_text", ")", "\n", "gt_text", "=", "''", "\n", "seeker_text", "=", "seeker_text", "+", "' '", "+", "messages", "[", "msgid", "]", "[", "'text'", "]", "\n", "", "else", ":", "\n", "                        ", "seeker_text", "=", "seeker_text", "+", "' '", "+", "messages", "[", "msgid", "]", "[", "'text'", "]", "\n", "\n", "", "", "elif", "senderId", "==", "recommender_id", ":", "\n", "                    ", "if", "seeker_text", ":", "\n", "                        ", "text_messages_raw", ".", "append", "(", "'SKR~'", "+", "seeker_text", ")", "\n", "seeker_text", "=", "''", "\n", "gt_text", "=", "gt_text", "+", "' '", "+", "messages", "[", "msgid", "]", "[", "'text'", "]", "\n", "", "else", ":", "\n", "                        ", "gt_text", "=", "gt_text", "+", "' '", "+", "messages", "[", "msgid", "]", "[", "'text'", "]", "\n", "\n", "", "", "", "if", "gt_text", ":", "\n", "                ", "text_messages_raw", ".", "append", "(", "'GT~'", "+", "gt_text", ")", "\n", "", "elif", "seeker_text", ":", "\n", "                ", "text_messages_raw", ".", "append", "(", "'SKR~'", "+", "seeker_text", ")", "\n", "", "", "return", "text_messages_raw", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.PrepareTrainingData.PrepareTrainingData.write_data": [[57, 61], ["open", "filehandle.write"], "methods", ["None"], ["", "def", "write_data", "(", "self", ",", "raw_messages_data", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "DATA_path", "+", "'TrainingDataParsed_Con.txt'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "filehandle", ":", "\n", "            ", "for", "line", "in", "raw_messages_data", ":", "\n", "                ", "filehandle", ".", "write", "(", "\"%s\\n\"", "%", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.__init__": [[14, 36], ["os.path.dirname", "os.path.abspath", "os.path.join", "pandas.DataFrame", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "os.path.abspath", "os.path.dirname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "PATH", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "self", ".", "ROOT_DIR_PATH", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "PATH", ")", ")", "\n", "self", ".", "ITEM_DATA_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ROOT_DIR_PATH", ",", "'data\\\\recommenders_item_data\\\\'", ")", "\n", "self", ".", "rec", "=", "None", "\n", "self", ".", "genre_rec", "=", "None", "\n", "self", ".", "rec_only_genre", "=", "None", "\n", "self", ".", "mentioned_movies", "=", "[", "]", "\n", "self", ".", "gt_pref_keywords", "=", "[", "]", "\n", "self", ".", "recommended_movies", "=", "[", "]", "\n", "self", ".", "seeker_movies", "=", "[", "]", "\n", "self", ".", "groundtruth_movies", "=", "[", "]", "\n", "self", ".", "sk_pref_tokens", "=", "[", "]", "\n", "self", ".", "isActorTemplate", "=", "False", "\n", "self", ".", "isExplnation", "=", "False", "\n", "self", ".", "movie_mentions_data", "=", "pd", ".", "DataFrame", "(", ")", "\n", "self", ".", "df_movies_metadata", "=", "pd", ".", "read_csv", "(", "self", ".", "ITEM_DATA_path", "+", "'movies_metadata.csv'", ")", "\n", "self", ".", "movie_mentions_data", "=", "pd", ".", "read_csv", "(", "self", ".", "ITEM_DATA_path", "+", "'movies_with_mentions.csv'", ",", "','", ",", "encoding", "=", "'utf-8'", ",", "dtype", "=", "object", ",", "low_memory", "=", "False", ")", "\n", "self", ".", "movies_metadata", "=", "pd", ".", "read_csv", "(", "self", ".", "ITEM_DATA_path", "+", "'combined_metadata.csv'", ")", "\n", "self", ".", "pref_keywords", "=", "[", "'scary'", ",", "'horror'", ",", "'pixar'", ",", "'graphic'", ",", "'classic'", ",", "'comedy'", ",", "'kids'", ",", "'funny'", ",", "'disney'", ",", "'comedies'", ",", "'action'", ",", "'family'", ",", "'adventure'", ",", "'crime'", ",", "'fantasy'", ",", "'thriller'", ",", "'scifi'", ",", "'documentary'", ",", "'science fiction'", ",", "'drama'", ",", "'romance'", ",", "'romances'", ",", "'romantic'", ",", "'mystery'", ",", "'mysteries'", ",", "'history'", ",", "'no preference'", ",", "'suspense'", "]", "\n", "self", ".", "country_keywords", "=", "[", "'american'", ",", "'asian'", ",", "'european'", ",", "'british'", "]", "\n", "self", ".", "asser_tags", "=", "[", "'good'", ",", "'great'", ",", "'nice'", ",", "'awesome'", ",", "'fine'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.read_dialogs_input_file": [[38, 57], ["redial_dialogues.append", "open", "dialog[].__contains__", "line.strip", "redial_dialogues.append", "dialog.append", "dialog.append"], "methods", ["None"], ["", "def", "read_dialogs_input_file", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "is_visited", "=", "False", "\n", "redial_dialogues", "=", "[", "]", "\n", "dialog", "=", "[", "]", "\n", "with", "open", "(", "file_name", ",", "'r'", ")", "as", "input", ":", "\n", "            ", "for", "line", "in", "input", ":", "\n", "                ", "if", "not", "line", ".", "strip", "(", ")", ":", "continue", "\n", "if", "'CONVERSATION:'", "in", "line", "and", "is_visited", ":", "\n", "                    ", "redial_dialogues", ".", "append", "(", "dialog", ")", "\n", "dialog", "=", "[", "]", "\n", "dialog", ".", "append", "(", "line", ")", "\n", "is_visited", "=", "False", "\n", "", "else", ":", "\n", "                    ", "dialog", ".", "append", "(", "line", ")", "\n", "is_visited", "=", "True", "\n", "", "", "", "if", "not", "dialog", "[", "0", "]", ".", "__contains__", "(", "'CONVERSATION:'", ")", ":", "\n", "            ", "return", "\n", "", "redial_dialogues", ".", "append", "(", "dialog", ")", "\n", "return", "redial_dialogues", "\n", "## parse seeeker utterance in a text line", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.seeker_sentences_parser": [[58, 66], ["re.compile().search", "re.compile().search.group", "re.compile().search", "re.compile().search.group", "seeker_line.lower().strip.lower().strip.lower().strip", "str", "re.compile", "re.compile", "seeker_line.lower().strip.lower().strip.lower"], "methods", ["None"], ["", "def", "seeker_sentences_parser", "(", "self", ",", "line", ")", ":", "\n", "        ", "if", "line", ":", "\n", "            ", "p", "=", "re", ".", "compile", "(", "\"SEEKER:(.*)\"", ")", ".", "search", "(", "str", "(", "line", ")", ")", "\n", "temp_line", "=", "p", ".", "group", "(", "1", ")", "\n", "m", "=", "re", ".", "compile", "(", "'<s>(.*?)</s>'", ")", ".", "search", "(", "temp_line", ")", "\n", "seeker_line", "=", "m", ".", "group", "(", "1", ")", "\n", "seeker_line", "=", "seeker_line", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "return", "seeker_line", "\n", "## parse ground truth utterance in a text line", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.gt_sentence_parser": [[67, 84], ["re.compile().search", "re.compile().search.group", "re.compile().search", "re.compile().search.group", "gt_line.lower().strip.lower().strip.lower().strip", "print", "print", "print", "str", "re.compile", "re.compile", "gt_line.lower().strip.lower().strip.lower"], "methods", ["None"], ["", "", "def", "gt_sentence_parser", "(", "self", ",", "line", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "not", "line", "==", "'\\n'", ":", "\n", "                ", "p", "=", "re", ".", "compile", "(", "\"GROUND TRUTH:(.*)\"", ")", ".", "search", "(", "str", "(", "line", ")", ")", "\n", "temp_line", "=", "p", ".", "group", "(", "1", ")", "\n", "m", "=", "re", ".", "compile", "(", "'<s>(.*?)</s>'", ")", ".", "search", "(", "temp_line", ")", "\n", "gt_line", "=", "m", ".", "group", "(", "1", ")", "\n", "gt_line", "=", "gt_line", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "# gt_line = re.sub('[^A-Za-z0-9]+', ' ', gt_line)", "\n", "", "else", ":", "\n", "                ", "gt_line", "=", "\"\"", "\n", "\n", "", "return", "gt_line", "\n", "", "except", "AttributeError", "as", "err", ":", "\n", "            ", "print", "(", "'exception accured while parsing ground truth.. \\n'", ")", "\n", "print", "(", "line", ")", "\n", "print", "(", "err", ")", "\n", "##parse all the seeker movie IDs from the utterance into a list", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.check_if_movieid_mention": [[85, 95], ["query.__contains__", "re.findall", "IntegrateRecommendations.IntegrateRecommendations.mentioned_movies.extend", "id.replace"], "methods", ["None"], ["", "", "def", "check_if_movieid_mention", "(", "self", ",", "query", ",", "isGTSentence", "=", "False", ")", ":", "\n", "# check if there is a movie mention", "\n", "        ", "parsed_IDs", "=", "[", "]", "\n", "if", "query", ".", "__contains__", "(", "'@'", ")", ":", "\n", "            ", "IDs", "=", "re", ".", "findall", "(", "'@\\\\S+'", ",", "query", ")", "\n", "parsed_IDs", "=", "[", "id", ".", "replace", "(", "'@'", ",", "''", ")", "for", "id", "in", "IDs", "]", "\n", "self", ".", "mentioned_movies", ".", "extend", "(", "parsed_IDs", ")", "\n", "", "else", ":", "\n", "            ", "parsed_IDs", "=", "[", "]", "\n", "", "return", "parsed_IDs", "\n", "##parse all the ground truth movie IDs from the utterance into a list", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.check_GT_movie_mention": [[96, 105], ["query.__contains__", "re.findall", "[].strip", "id.split"], "methods", ["None"], ["", "def", "check_GT_movie_mention", "(", "self", ",", "query", ")", ":", "\n", "# check if there is a movie mention", "\n", "        ", "parsed_IDs", "=", "[", "]", "\n", "if", "query", ".", "__contains__", "(", "'@'", ")", ":", "\n", "            ", "IDs", "=", "re", ".", "findall", "(", "'@(.*)'", ",", "query", ")", "\n", "parsed_IDs", "=", "[", "id", ".", "split", "(", "'('", ")", "[", "0", "]", ".", "strip", "(", ")", "for", "id", "in", "IDs", "]", "\n", "", "else", ":", "\n", "            ", "parsed_IDs", "=", "[", "]", "\n", "", "return", "parsed_IDs", "\n", "## input: a complete dialog with retrieved candidate responses from the previous retriveal process", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.integrate_recommendations": [[109, 193], ["enumerate", "line.__contains__", "completed_dialog_list.append", "line.__contains__", "completed_dialog_list.append", "IntegrateRecommendations.IntegrateRecommendations.seeker_sentences_parser", "re.sub", "re.sub.split", "list", "IntegrateRecommendations.IntegrateRecommendations.check_if_movieid_mention", "set().intersection", "len", "IntegrateRecommendations.IntegrateRecommendations.sk_pref_tokens.append", "len", "IntegrateRecommendations.IntegrateRecommendations.seeker_movies.extend", "line.__contains__", "line.__contains__", "IntegrateRecommendations.IntegrateRecommendations.check_if_movieid_mention", "len", "completed_dialog_list.append", "IntegrateRecommendations.IntegrateRecommendations.gt_sentence_parser", "re.sub", "re.sub.split", "list", "IntegrateRecommendations.IntegrateRecommendations.check_if_movieid_mention", "set", "line.split", "completed_dialog_list.append", "completed_dialog_list.append", "completed_dialog_list.append", "set().intersection", "len", "IntegrateRecommendations.IntegrateRecommendations.gt_pref_keywords.append", "groundtruth_movies.append", "len", "IntegrateRecommendations.IntegrateRecommendations.get_recommendation", "IntegrateRecommendations.IntegrateRecommendations.replace_recommendations", "len", "IntegrateRecommendations.IntegrateRecommendations.get_recommendation_by_genre", "IntegrateRecommendations.IntegrateRecommendations.replace_recommendations", "set", "len", "IntegrateRecommendations.IntegrateRecommendations.get_recommendation", "IntegrateRecommendations.IntegrateRecommendations.replace_recommendations", "len", "IntegrateRecommendations.IntegrateRecommendations.get_recommendation_by_genre", "IntegrateRecommendations.IntegrateRecommendations.replace_recommendations", "len", "len", "len", "IntegrateRecommendations.IntegrateRecommendations.get_recommendation_by_genre", "IntegrateRecommendations.IntegrateRecommendations.replace_recommendations", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.seeker_sentences_parser", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.check_if_movieid_mention", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.check_if_movieid_mention", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.gt_sentence_parser", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.check_if_movieid_mention", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.get_recommendation", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.replace_recommendations", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.get_recommendation_by_genre", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.replace_recommendations", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.get_recommendation", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.replace_recommendations", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.get_recommendation_by_genre", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.replace_recommendations", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.get_recommendation_by_genre", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.replace_recommendations"], ["", "def", "integrate_recommendations", "(", "self", ",", "dialog", ")", ":", "\n", "        ", "self", ".", "mentioned_movies", "=", "[", "]", "\n", "completed_dialog_list", "=", "[", "]", "\n", "self", ".", "seeker_movies", "=", "[", "]", "\n", "groundtruth_movies", "=", "[", "]", "\n", "pref_common_tokens", "=", "[", "]", "\n", "self", ".", "recommended_movies", "=", "[", "]", "\n", "self", ".", "sk_pref_tokens", "=", "[", "]", "\n", "self", ".", "gt_pref_keywords", "=", "[", "]", "\n", "self", ".", "groundtruth_movies", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "dialog", ")", ":", "\n", "            ", "if", "line", ".", "__contains__", "(", "'CONVERSATION:'", ")", ":", "\n", "                ", "completed_dialog_list", ".", "append", "(", "line", ")", "\n", "continue", "\n", "", "elif", "line", ".", "__contains__", "(", "'SEEKER:'", ")", ":", "\n", "                ", "completed_dialog_list", ".", "append", "(", "line", ")", "\n", "is_GT_parsed", "=", "False", "\n", "seeker_query", "=", "self", ".", "seeker_sentences_parser", "(", "line", ")", "\n", "seeker_query", "=", "re", ".", "sub", "(", "'[^A-Za-z0-9@]+'", ",", "' '", ",", "seeker_query", ")", "\n", "seekerk_query_list", "=", "seeker_query", ".", "split", "(", "' '", ")", "\n", "pref_common_tokens", "=", "list", "(", "set", "(", "seekerk_query_list", ")", ".", "intersection", "(", "self", ".", "pref_keywords", ")", ")", "\n", "if", "len", "(", "pref_common_tokens", ")", ">", "0", ":", "\n", "                    ", "self", ".", "sk_pref_tokens", ".", "append", "(", "pref_common_tokens", ")", "\n", "", "movieids", "=", "self", ".", "check_if_movieid_mention", "(", "seeker_query", ")", "\n", "if", "len", "(", "movieids", ")", ">", "0", ":", "\n", "                    ", "self", ".", "seeker_movies", ".", "extend", "(", "movieids", ")", "\n", "## is_GT_parsed means flag for first candidate resoponse to be process while ignore the rest", "\n", "## in case of multiple retrived response candidates, e.g., in this N=5", "\n", "", "", "elif", "line", ".", "__contains__", "(", "'GT~'", ")", "and", "not", "is_GT_parsed", ":", "\n", "                ", "try", ":", "\n", "                    ", "is_GT_parsed", "=", "True", "\n", "orginal_response", "=", "line", ".", "split", "(", "'|'", ")", "[", "0", "]", "\n", "recomendation_list", "=", "[", "]", "\n", "movieids", "=", "self", ".", "check_if_movieid_mention", "(", "orginal_response", ")", "\n", "total_recommendations", "=", "len", "(", "movieids", ")", "\n", "#check  if GT contains recommendation,", "\n", "if", "total_recommendations", ">", "0", ":", "\n", "#get recommendations based on the user context i.e.,", "\n", "# 1) last seeker movie id, 2) last ground_truth movie id, 3) preference keywords like genres.", "\n", "                        ", "if", "len", "(", "self", ".", "seeker_movies", ")", ">", "0", ":", "\n", "#pass last seeker movie to get recommendations and count of movies mentioned in a response", "\n", "                            ", "recomendation_list", "=", "self", ".", "get_recommendation", "(", "self", ".", "seeker_movies", "[", "len", "(", "self", ".", "seeker_movies", ")", "-", "1", "]", ",", "total_recommendations", ",", "self", ".", "recommended_movies", ")", "\n", "parsed_line", "=", "self", ".", "replace_recommendations", "(", "orginal_response", ",", "movieids", ",", "recomendation_list", ")", "\n", "\n", "#retrieve new recommendations based on genre in the immidiate current seeker utterance.", "\n", "", "elif", "len", "(", "pref_common_tokens", ")", ">", "0", ":", "\n", "                            ", "mentioned_genre", "=", "pref_common_tokens", "[", "len", "(", "pref_common_tokens", ")", "-", "1", "]", "\n", "recomendation_list", "=", "self", ".", "get_recommendation_by_genre", "(", "mentioned_genre", ",", "total_recommendations", ",", "self", ".", "recommended_movies", ")", "\n", "parsed_line", "=", "self", ".", "replace_recommendations", "(", "orginal_response", ",", "movieids", ",", "recomendation_list", ")", "\n", "# if none of the above case is true, retrieve new recommendations based on ground_truth movies", "\n", "", "elif", "len", "(", "groundtruth_movies", ")", ">", "0", ":", "\n", "#pass last ground truth movie to get recommendations and length of movies in a response", "\n", "                            ", "recomendation_list", "=", "self", ".", "get_recommendation", "(", "groundtruth_movies", "[", "len", "(", "groundtruth_movies", ")", "-", "1", "]", "[", "0", "]", ",", "total_recommendations", ",", "self", ".", "recommended_movies", ")", "\n", "parsed_line", "=", "self", ".", "replace_recommendations", "(", "orginal_response", ",", "movieids", ",", "recomendation_list", ")", "\n", "#retrieve new recommendations based on genre from the previous seeker utterances.", "\n", "", "elif", "len", "(", "self", ".", "sk_pref_tokens", ")", ">", "0", ":", "\n", "                            ", "mentioned_genre", "=", "self", ".", "sk_pref_tokens", "[", "len", "(", "self", ".", "sk_pref_tokens", ")", "-", "1", "]", "[", "0", "]", "\n", "recomendation_list", "=", "self", ".", "get_recommendation_by_genre", "(", "mentioned_genre", ",", "total_recommendations", ",", "self", ".", "recommended_movies", ")", "\n", "parsed_line", "=", "self", ".", "replace_recommendations", "(", "orginal_response", ",", "movieids", ",", "recomendation_list", ")", "\n", "#retrieve new recommendations based on genre from the previous ground_truth utterances.", "\n", "", "elif", "len", "(", "self", ".", "gt_pref_keywords", ")", ">", "0", ":", "\n", "                            ", "mentioned_genre", "=", "self", ".", "gt_pref_keywords", "[", "len", "(", "self", ".", "gt_pref_keywords", ")", "-", "1", "]", "[", "0", "]", "\n", "recomendation_list", "=", "self", ".", "get_recommendation_by_genre", "(", "mentioned_genre", ",", "total_recommendations", ",", "self", ".", "recommended_movies", ")", "\n", "parsed_line", "=", "self", ".", "replace_recommendations", "(", "orginal_response", ",", "movieids", ",", "recomendation_list", ")", "\n", "", "completed_dialog_list", ".", "append", "(", "parsed_line", ")", "\n", "", "else", ":", "\n", "                        ", "completed_dialog_list", ".", "append", "(", "orginal_response", ")", "\n", "", "", "except", ":", "\n", "                    ", "completed_dialog_list", ".", "append", "(", "orginal_response", ")", "\n", "continue", "\n", "##process ground_truth response here and extract mentioned movie ids", "\n", "", "", "elif", "line", ".", "__contains__", "(", "'GROUND TRUTH:'", ")", ":", "\n", "                ", "completed_dialog_list", ".", "append", "(", "line", ")", "\n", "gt_response", "=", "self", ".", "gt_sentence_parser", "(", "line", ")", "\n", "gt_response", "=", "re", ".", "sub", "(", "'[^A-Za-z0-9@]+'", ",", "' '", ",", "gt_response", ")", "\n", "gt_query_list", "=", "gt_response", ".", "split", "(", "' '", ")", "\n", "keywds", "=", "list", "(", "set", "(", "gt_query_list", ")", ".", "intersection", "(", "self", ".", "pref_keywords", ")", ")", "\n", "if", "len", "(", "keywds", ")", ">", "0", ":", "\n", "                    ", "self", ".", "gt_pref_keywords", ".", "append", "(", "keywds", ")", "\n", "", "movie_mentions", "=", "self", ".", "check_if_movieid_mention", "(", "line", ")", "\n", "if", "movie_mentions", ":", "\n", "                    ", "groundtruth_movies", ".", "append", "(", "movie_mentions", ")", "\n", "\n", "", "", "", "return", "completed_dialog_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.replace_recommendations": [[194, 201], ["len", "enumerate", "str", "IntegrateRecommendations.IntegrateRecommendations.recommended_movies.append", "line.replace.replace.replace", "str.split"], "methods", ["None"], ["", "def", "replace_recommendations", "(", "self", ",", "line", ",", "movieids", ",", "rec_list", ")", ":", "\n", "        ", "if", "len", "(", "rec_list", ")", ">", "0", ":", "\n", "            ", "for", "i", ",", "id", "in", "enumerate", "(", "movieids", ")", ":", "\n", "                ", "recomendation", "=", "str", "(", "rec_list", "[", "i", "]", ")", "\n", "self", ".", "recommended_movies", ".", "append", "(", "recomendation", ".", "split", "(", "'('", ")", "[", "0", "]", ")", "\n", "line", "=", "line", ".", "replace", "(", "id", ",", "recomendation", "+", "'\"'", ")", "\n", "", "", "return", "line", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.process_dialog": [[204, 214], ["IntegrateRecommendations.IntegrateRecommendations.replace_movieIDs_with_titles", "print", "IntegrateRecommendations.IntegrateRecommendations.integrate_recommendations", "IntegrateRecommendations.IntegrateRecommendations.integrate_metadata", "IntegrateRecommendations.IntegrateRecommendations.append"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.replace_movieIDs_with_titles", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.integrate_recommendations", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.integrate_metadata"], ["", "def", "process_dialog", "(", "self", ",", "input_dialogs", ")", ":", "\n", "        ", "final_dialogues", "=", "[", "]", "\n", "for", "dlg", "in", "input_dialogs", ":", "\n", "            ", "print", "(", "'new dialog is processing.......'", ")", "\n", "recs_dialogue", "=", "self", ".", "integrate_recommendations", "(", "dlg", ")", "\n", "final_dialog", "=", "self", ".", "integrate_metadata", "(", "recs_dialogue", ")", "\n", "final_dialogues", ".", "append", "(", "final_dialog", ")", "\n", "##after integeration of movie recommendations and related metadata, replace redial movie Ids with actual movie titles", "\n", "", "final_dialogues", "=", "self", ".", "replace_movieIDs_with_titles", "(", "final_dialogues", ")", "\n", "return", "final_dialogues", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.get_recommendation": [[216, 233], ["IntegrateRecommendations.IntegrateRecommendations.get_seeker_movie_titles", "IntegrateRecommendations.IntegrateRecommendations.rec.get_similar_movies_based_on_user_ratings", "src.Recommender_MF.Recommender_MF", "len", "IntegrateRecommendations.IntegrateRecommendations.genre_rec.get_similar_movies_based_on_content", "print", "src.Recommender.Recommender"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.get_seeker_movie_titles", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.get_similar_movies_based_on_user_ratings", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender.Recommender.get_similar_movies_based_on_content"], ["", "def", "get_recommendation", "(", "self", ",", "movie_id", ",", "nb_recommendations", ",", "prev_movie_mentions", ")", ":", "\n", "        ", "prev_movie_mentions", "=", "self", ".", "get_seeker_movie_titles", "(", "prev_movie_mentions", ")", "\n", "try", ":", "\n", "            ", "if", "self", ".", "rec", "is", "None", ":", "\n", "                ", "self", ".", "rec", "=", "Recommender_MF", "(", ")", "\n", "", "suggestion_list", "=", "self", ".", "rec", ".", "get_similar_movies_based_on_user_ratings", "(", "movie_id", ",", "nb_recommendations", ",", "prev_movie_mentions", ")", "\n", "\n", "# ##backup recommender in case movie is not present in movielens data, identifier means, recommendation request is actual", "\n", "if", "len", "(", "suggestion_list", ")", "==", "0", ":", "\n", "                ", "if", "self", ".", "genre_rec", "is", "None", ":", "\n", "                    ", "self", ".", "genre_rec", "=", "Recommender", "(", ")", "\n", "", "suggestion_list", "=", "self", ".", "genre_rec", ".", "get_similar_movies_based_on_content", "(", "movie_id", ",", "nb_recommendations", ",", "prev_movie_mentions", ")", "\n", "\n", "", "", "except", "RuntimeError", "as", "err", ":", "\n", "            ", "print", "(", "err", ")", "\n", "suggestion_list", "=", "[", "]", "\n", "", "return", "suggestion_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.get_seeker_movie_titles": [[237, 246], ["len", "[].strip", "prev_movie_mentions.append", "str", "[].strip.split"], "methods", ["None"], ["", "def", "get_seeker_movie_titles", "(", "self", ",", "prev_movie_mentions", ")", ":", "\n", "        ", "for", "id", "in", "self", ".", "seeker_movies", ":", "\n", "            ", "temp", "=", "self", ".", "movie_mentions_data", "[", "self", ".", "movie_mentions_data", "[", "'databaseId'", "]", "==", "str", "(", "id", ")", "]", "\n", "if", "len", "(", "temp", ")", ">", "0", ":", "\n", "                ", "movieName", "=", "temp", "[", "'title'", "]", ".", "iloc", "[", "0", "]", "\n", "movieName", "=", "movieName", ".", "split", "(", "'('", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "if", "movieName", "not", "in", "prev_movie_mentions", ":", "\n", "                    ", "prev_movie_mentions", ".", "append", "(", "movieName", ")", "\n", "", "", "", "return", "prev_movie_mentions", "\n", "#get recommendations based on movie genre", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.get_recommendation_by_genre": [[247, 258], ["IntegrateRecommendations.IntegrateRecommendations.get_seeker_movie_titles", "IntegrateRecommendations.IntegrateRecommendations.rec_only_genre.get_similar_movies_based_on_genre", "src.Recommender_with_genre.Recommender_with_genre", "print"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.get_seeker_movie_titles", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_with_genre.Recommender_with_genre.get_similar_movies_based_on_genre"], ["", "def", "get_recommendation_by_genre", "(", "self", ",", "genre", ",", "nb_recom", ",", "recommendations", ")", ":", "\n", "        ", "recommendations", "=", "self", ".", "get_seeker_movie_titles", "(", "recommendations", ")", "\n", "try", ":", "\n", "            ", "suggestion_list", "=", "[", "]", "\n", "if", "self", ".", "rec_only_genre", "is", "None", ":", "\n", "                ", "self", ".", "rec_only_genre", "=", "Recommender_with_genre", "(", ")", "\n", "", "suggestion_list", "=", "self", ".", "rec_only_genre", ".", "get_similar_movies_based_on_genre", "(", "genre", ",", "nb_recom", ",", "recommendations", ")", "\n", "", "except", "RuntimeError", "as", "err", ":", "\n", "            ", "print", "(", "err", ")", "\n", "suggestion_list", "=", "[", "]", "\n", "", "return", "suggestion_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.contains_word": [[259, 261], ["None"], "methods", ["None"], ["", "def", "contains_word", "(", "self", ",", "input_str", ",", "word", ")", ":", "\n", "        ", "return", "f' {word} '", "in", "f' {input_str} '", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.integrate_metadata": [[265, 327], ["enumerate", "line.lower.lower.replace", "line.lower.lower.__contains__", "completed_dialog_list.append", "line.lower.lower.__contains__", "completed_dialog_list.append", "line.lower.lower.lower().split", "list", "line.lower.lower.lower", "line.lower.lower.__contains__", "set().intersection", "len", "seeker_pref_keywords.extend", "line.lower.lower.__contains__", "line.lower.lower.__contains__", "line.lower.lower.__contains__", "line.lower.lower.__contains__", "line.lower.lower.__contains__", "line.lower.lower.__contains__", "line.lower.lower.lower", "IntegrateRecommendations.IntegrateRecommendations.check_GT_movie_mention", "re.sub", "len", "line.lower.lower.lower", "line.lower.lower.split", "line.lower.lower.split", "list", "original_response.replace.replace.replace().replace().replace().replace", "completed_dialog_list.append", "completed_dialog_list.append", "IntegrateRecommendations.IntegrateRecommendations.check_if_movieid_mention", "set", "set().intersection", "IntegrateRecommendations.IntegrateRecommendations.retrive_explnation", "completed_dialog_list.append", "IntegrateRecommendations.IntegrateRecommendations.retrieve_genres", "IntegrateRecommendations.IntegrateRecommendations.retrieve_actors_template", "completed_dialog_list.append", "IntegrateRecommendations.IntegrateRecommendations.groundtruth_movies.extend", "len", "len", "original_response.replace.replace.replace", "original_response.replace.replace.replace().replace().replace", "original_response.replace.replace.replace", "set", "len", "len", "original_response.replace.replace.replace().replace", "len", "len", "len", "len", "original_response.replace.replace.replace"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.check_GT_movie_mention", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.check_if_movieid_mention", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.retrive_explnation", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.retrieve_genres", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.retrieve_actors_template"], ["", "def", "integrate_metadata", "(", "self", ",", "dialog", ")", ":", "\n", "        ", "completed_dialog_list", "=", "[", "]", "\n", "seeker_pref_keywords", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "dialog", ")", ":", "\n", "            ", "line", "=", "line", ".", "replace", "(", "'\\n'", ",", "''", ")", "\n", "if", "line", ".", "__contains__", "(", "'CONVERSATION:'", ")", ":", "\n", "                ", "completed_dialog_list", ".", "append", "(", "line", ")", "\n", "continue", "\n", "", "elif", "line", ".", "__contains__", "(", "'SEEKER:'", ")", ":", "\n", "                ", "completed_dialog_list", ".", "append", "(", "line", ")", "\n", "seekerk_query_list", "=", "line", ".", "lower", "(", ")", ".", "split", "(", "' '", ")", "\n", "sk_pref_keywords", "=", "list", "(", "set", "(", "seekerk_query_list", ")", ".", "intersection", "(", "self", ".", "pref_keywords", ")", ")", "\n", "if", "len", "(", "sk_pref_keywords", ")", ">", "0", ":", "\n", "                    ", "seeker_pref_keywords", ".", "extend", "(", "sk_pref_keywords", ")", "\n", "", "if", "line", ".", "__contains__", "(", "'it about'", ")", "or", "line", ".", "__contains__", "(", "'about it'", ")", "or", "line", ".", "__contains__", "(", "'that about'", ")", ":", "\n", "                    ", "self", ".", "isExplnation", "=", "True", "\n", "", "sk_line", "=", "line", ".", "lower", "(", ")", "\n", "if", "sk_line", ".", "__contains__", "(", "'who is'", ")", "or", "sk_line", ".", "__contains__", "(", "\"who's\"", ")", ":", "\n", "                    ", "self", ".", "isActorTemplate", "=", "True", "\n", "", "", "elif", "line", ".", "__contains__", "(", "'GT~'", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "original_response", "=", "line", "\n", "movie_titles", "=", "self", ".", "check_GT_movie_mention", "(", "line", ")", "\n", "line", "=", "re", ".", "sub", "(", "'[^A-Za-z0-9@()]+'", ",", "' '", ",", "line", ")", "\n", "total_recommendations", "=", "len", "(", "movie_titles", ")", "\n", "line", "=", "line", ".", "lower", "(", ")", "\n", "GT_response_list", "=", "line", ".", "split", "(", "' '", ")", "\n", "region_list", "=", "line", ".", "split", "(", "' '", ")", "\n", "GT_pref_keywords", "=", "list", "(", "set", "(", "GT_response_list", ")", ".", "intersection", "(", "self", ".", "pref_keywords", ")", ")", "\n", "\n", "#if seeker is asking for explnation, retrived it based on previous Ground-truth response", "\n", "if", "self", ".", "isExplnation", ":", "\n", "                        ", "original_response", "=", "self", ".", "retrive_explnation", "(", "original_response", ",", "self", ".", "groundtruth_movies", "[", "len", "(", "self", ".", "groundtruth_movies", ")", "-", "1", "]", ")", "\n", "completed_dialog_list", ".", "append", "(", "original_response", ")", "\n", "self", ".", "isExplnation", "=", "False", "\n", "continue", "\n", "#A block for genre replacement", "\n", "#check  if retrieved candidate response contains recommendation,", "\n", "", "if", "len", "(", "GT_pref_keywords", ")", ">", "0", "and", "len", "(", "sk_pref_keywords", ")", ">", "0", "and", "total_recommendations", ">", "0", ":", "\n", "                        ", "first_movie_rec", "=", "movie_titles", "[", "0", "]", "\n", "#fetch and replace genres context", "\n", "original_response", "=", "self", ".", "retrieve_genres", "(", "original_response", ",", "GT_pref_keywords", ",", "first_movie_rec", ")", "\n", "", "elif", "len", "(", "GT_pref_keywords", ")", ">", "0", "and", "len", "(", "seeker_pref_keywords", ")", ">", "0", ":", "\n", "                        ", "original_response", "=", "original_response", ".", "replace", "(", "GT_pref_keywords", "[", "len", "(", "GT_pref_keywords", ")", "-", "1", "]", ",", "seeker_pref_keywords", "[", "len", "(", "seeker_pref_keywords", ")", "-", "1", "]", ")", "\n", "\n", "##integrate actors/director details", "\n", "", "if", "self", ".", "isActorTemplate", ":", "\n", "                        ", "original_response", "=", "self", ".", "retrieve_actors_template", "(", "self", ".", "groundtruth_movies", "[", "len", "(", "self", ".", "groundtruth_movies", ")", "-", "1", "]", ")", "\n", "self", ".", "isActorTemplate", "=", "False", "\n", "", "original_response", "=", "original_response", ".", "replace", "(", "'comedy'", ",", "'funny'", ")", ".", "replace", "(", "'laugh'", ",", "'movie'", ")", ".", "replace", "(", "'romance'", ",", "'romantic'", ")", ".", "replace", "(", "'@'", ",", "'\"'", ")", "\n", "completed_dialog_list", ".", "append", "(", "original_response", ")", "\n", "\n", "", "except", ":", "\n", "                    ", "completed_dialog_list", ".", "append", "(", "original_response", ".", "replace", "(", "'@'", ",", "'\"'", ")", ")", "\n", "continue", "\n", "", "", "elif", "line", ".", "__contains__", "(", "'GROUND TRUTH:'", ")", ":", "\n", "                ", "completed_dialog_list", ".", "append", "(", "line", ")", "\n", "movie_mentions", "=", "self", ".", "check_if_movieid_mention", "(", "line", ")", "\n", "if", "movie_mentions", ":", "\n", "                    ", "self", ".", "groundtruth_movies", ".", "extend", "(", "movie_mentions", ")", "\n", "\n", "", "", "", "return", "completed_dialog_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.retrive_explnation": [[331, 347], ["[].strip.__contains__", "[].strip", "len", "[].strip.split", "str"], "methods", ["None"], ["", "def", "retrive_explnation", "(", "self", ",", "line", ",", "movieID", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "overview", "=", "''", "\n", "movieName", "=", "self", ".", "movie_mentions_data", "[", "self", ".", "movie_mentions_data", "[", "'databaseId'", "]", "==", "str", "(", "movieID", ")", "]", "[", "'title'", "]", ".", "iloc", "[", "0", "]", "\n", "if", "movieName", ".", "__contains__", "(", "'('", ")", ":", "\n", "                ", "movieName", "=", "movieName", ".", "split", "(", "'('", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "\n", "", "if", "movieName", ":", "\n", "                ", "temp2", "=", "self", ".", "df_movies_metadata", "[", "self", ".", "df_movies_metadata", "[", "'title'", "]", "==", "movieName", "]", "\n", "if", "len", "(", "temp2", ")", ">", "0", ":", "\n", "                    ", "overview", "=", "temp2", "[", "'overview'", "]", ".", "iloc", "[", "0", "]", "\n", "", "", "", "except", ":", "\n", "            ", "return", "line", "\n", "", "if", "overview", "==", "''", ":", "\n", "            ", "return", "line", "\n", "", "return", "overview", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.retrieve_actors_template": [[349, 356], ["[].tolist", "len", "len", "df.head", "int"], "methods", ["None"], ["", "def", "retrieve_actors_template", "(", "self", ",", "movie_mention", ")", ":", "\n", "        ", "if", "len", "(", "movie_mention", ")", ">", "0", ":", "\n", "            ", "df", "=", "self", ".", "movies_metadata", ".", "loc", "[", "self", ".", "movies_metadata", "[", "'databaseId'", "]", "==", "int", "(", "movie_mention", ")", "]", "\n", "", "actors", "=", "df", ".", "head", "(", "1", ")", "[", "'actors'", "]", ".", "tolist", "(", ")", "\n", "if", "len", "(", "actors", ")", ">", "0", ":", "\n", "            ", "original_line", "=", "'GT~ It stars '", "+", "(", "\", \"", ")", ".", "join", "(", "actors", ")", "\n", "", "return", "original_line", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.retrieve_genres": [[357, 387], ["[].strip.__contains__", "[].tolist", "line.replace().replace.replace().replace.lower().__contains__", "[].strip", "len", "[].strip.__contains__", "len", "genres[].lower().split", "enumerate", "line.replace().replace.replace().replace.replace", "len", "[].strip", "[].strip.lower().__contains__", "line.replace().replace.replace().replace.lower", "[].strip", "df.head", "genres[].lower", "len", "line.replace().replace.replace().replace.replace", "line.replace().replace.replace().replace.replace", "line.replace().replace.replace().replace.replace", "line.replace().replace.replace().replace.replace().replace", "re.sub", "dict.fromkeys", "[].strip.split", "IntegrateRecommendations.IntegrateRecommendations.movies_metadata[].str.contains", "[].strip.lower", "pref_key.title", "re.sub.split", "random.randint", "[].strip.split", "IntegrateRecommendations.IntegrateRecommendations.movies_metadata[].str.contains", "line.replace().replace.replace().replace.replace", "len", "[].strip.split"], "methods", ["None"], ["", "def", "retrieve_genres", "(", "self", ",", "line", ",", "prefer_keywords", ",", "movie_mention", ")", ":", "\n", "        ", "if", "line", ".", "lower", "(", ")", ".", "__contains__", "(", "'not a'", ")", "and", "len", "(", "prefer_keywords", ")", ">", "0", ":", "\n", "            ", "return", "line", "\n", "", "if", "movie_mention", ".", "__contains__", "(", "'('", ")", ":", "\n", "            ", "movie_mention", "=", "movie_mention", ".", "split", "(", "'('", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "", "df", "=", "self", ".", "movies_metadata", ".", "loc", "[", "self", ".", "movies_metadata", "[", "'title'", "]", "==", "movie_mention", "]", "\n", "if", "len", "(", "df", ")", "<", "1", ":", "\n", "                ", "if", "movie_mention", ".", "__contains__", "(", "','", ")", ":", "\n", "                    ", "movie_mention", "=", "movie_mention", ".", "split", "(", "','", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "df", "=", "self", ".", "movies_metadata", "[", "self", ".", "movies_metadata", "[", "'title'", "]", ".", "str", ".", "contains", "(", "movie_mention", ")", "]", "\n", "", "elif", "movie_mention", ".", "lower", "(", ")", ".", "__contains__", "(", "'the'", ")", ":", "\n", "                    ", "movie_mention", "=", "movie_mention", ".", "split", "(", "'the'", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "df", "=", "self", ".", "movies_metadata", "[", "self", ".", "movies_metadata", "[", "'title'", "]", ".", "str", ".", "contains", "(", "movie_mention", ")", "]", "\n", "", "", "genres", "=", "df", ".", "head", "(", "1", ")", "[", "'genres'", "]", ".", "tolist", "(", ")", "\n", "if", "len", "(", "genres", ")", ">", "0", ":", "\n", "            ", "genres_list", "=", "genres", "[", "0", "]", ".", "lower", "(", ")", ".", "split", "(", "'|'", ")", "\n", "for", "i", ",", "pref_key", "in", "enumerate", "(", "prefer_keywords", ")", ":", "\n", "                ", "if", "i", ">", "len", "(", "genres_list", ")", ":", "\n", "                    ", "line", "=", "line", ".", "replace", "(", "pref_key", ",", "''", ")", "\n", "", "else", ":", "\n", "                    ", "line", "=", "line", ".", "replace", "(", "pref_key", ",", "genres_list", "[", "i", "]", ")", "\n", "line", "=", "line", ".", "replace", "(", "pref_key", ".", "title", "(", ")", ",", "genres_list", "[", "i", "]", ")", "\n", "line", "=", "line", ".", "replace", "(", "'comedy'", ",", "'funny'", ")", ".", "replace", "(", "'romance'", ",", "'romantic'", ")", "\n", "#remove consective repeated genres", "\n", "temp_line", "=", "re", ".", "sub", "(", "'[^A-Za-z0-9@().~]+'", ",", "' '", ",", "line", ")", "\n", "unique_words", "=", "dict", ".", "fromkeys", "(", "temp_line", ".", "split", "(", ")", ")", "\n", "line", "=", "' '", ".", "join", "(", "unique_words", ")", "\n", "", "", "", "else", ":", "\n", "            ", "line", "=", "line", ".", "replace", "(", "prefer_keywords", "[", "0", "]", ",", "self", ".", "asser_tags", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "asser_tags", ")", ")", "]", ")", "\n", "", "return", "line", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.IntegrateRecommendations.IntegrateRecommendations.replace_movieIDs_with_titles": [[388, 430], ["print", "final_dialogues.append", "re.findall", "lines.append", "lines.append", "re.sub", "re.findall", "lines.append", "lines.append", "re.sub.split", "len", "row.replace.replace.replace", "re.sub", "re.sub.split", "len", "row.replace.replace.replace", "str", "str"], "methods", ["None"], ["", "def", "replace_movieIDs_with_titles", "(", "self", ",", "input_dialogue_data", ")", ":", "\n", "        ", "final_dialogues", "=", "[", "]", "\n", "for", "dlg", "in", "input_dialogue_data", ":", "\n", "            ", "lines", "=", "[", "]", "\n", "for", "row", "in", "dlg", ":", "\n", "                ", "try", ":", "\n", "# replace movie IDs  of the format, e.g. @1234, with movie title", "\n", "                    ", "if", "\"@\"", "in", "row", ":", "\n", "                        ", "ids", "=", "re", ".", "findall", "(", "r'@\\S+'", ",", "row", ")", "\n", "for", "id", "in", "ids", ":", "\n", "                            ", "id", "=", "re", ".", "sub", "(", "'[^0-9@]+'", ",", "''", ",", "id", ")", "\n", "onlyid", "=", "id", ".", "split", "(", "'@'", ")", "[", "1", "]", "\n", "temp", "=", "self", ".", "movie_mentions_data", "[", "self", ".", "movie_mentions_data", "[", "'databaseId'", "]", "==", "str", "(", "onlyid", ")", "]", "\n", "if", "len", "(", "temp", ")", ">", "0", ":", "\n", "                                ", "movieName", "=", "temp", "[", "'title'", "]", ".", "iloc", "[", "0", "]", "\n", "# m = movieName.index('(')", "\n", "# movieName = movieName[:m]", "\n", "row", "=", "row", ".", "replace", "(", "id", ",", "'\"'", "+", "movieName", "+", "'\"'", ")", "\n", "\n", "", "", "lines", ".", "append", "(", "row", ")", "\n", "# replace movie IDs  of the format, e.g. \"1234, with movie title", "\n", "", "elif", "'\"'", "in", "row", ":", "\n", "                        ", "ids", "=", "re", ".", "findall", "(", "r'\"\\S+'", ",", "row", ")", "\n", "for", "id", "in", "ids", ":", "\n", "                            ", "id", "=", "re", ".", "sub", "(", "'[^0-9\"]+'", ",", "''", ",", "id", ")", "\n", "onlyid", "=", "id", ".", "split", "(", "'\"'", ")", "[", "1", "]", "\n", "temp", "=", "self", ".", "movie_mentions_data", "[", "self", ".", "movie_mentions_data", "[", "'databaseId'", "]", "==", "str", "(", "onlyid", ")", "]", "\n", "if", "len", "(", "temp", ")", ">", "0", ":", "\n", "                                ", "movieName", "=", "temp", "[", "'title'", "]", ".", "iloc", "[", "0", "]", "\n", "# m = movieName.index('(')", "\n", "# movieName = movieName[:m]", "\n", "row", "=", "row", ".", "replace", "(", "id", ",", "'\"'", "+", "movieName", "+", "'\"'", ")", "\n", "\n", "", "", "lines", ".", "append", "(", "row", ")", "\n", "", "else", ":", "\n", "                        ", "lines", ".", "append", "(", "row", ")", "\n", "", "", "except", ":", "\n", "                    ", "lines", ".", "append", "(", "row", ")", "\n", "continue", "\n", "", "", "final_dialogues", ".", "append", "(", "lines", ")", "\n", "", "print", "(", "'execution ends here'", ")", "\n", "return", "final_dialogues", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_with_genre.Recommender_with_genre.__init__": [[9, 19], ["os.path.dirname", "os.path.abspath", "os.path.join", "pandas.DataFrame", "os.path.abspath", "os.path.dirname", "Recommender_with_genre.Recommender_with_genre.df_movie_content.__len__", "Recommender_with_genre.Recommender_with_genre.data_initialization"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.data_initialization"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "self", ".", "PATH", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "self", ".", "ROOT_DIR_PATH", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "PATH", ")", ")", "\n", "self", ".", "ITEM_DATA_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ROOT_DIR_PATH", ",", "'data\\\\recommenders_item_data\\\\'", ")", "\n", "self", ".", "df_movie_content", "=", "pd", ".", "DataFrame", "(", ")", "\n", "self", ".", "recommended_movies", "=", "[", "]", "\n", "self", ".", "C", "=", "0", "\n", "self", ".", "m", "=", "0", "\n", "if", "self", ".", "df_movie_content", ".", "__len__", "(", ")", "==", "0", ":", "\n", "                ", "self", ".", "df_movie_content", "=", "self", ".", "data_initialization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_with_genre.Recommender_with_genre.get_similar_movies_based_on_genre": [[20, 72], ["print", "print", "genre.title.title.title", "[].astype", "[].astype", "[].astype.mean", "[].astype.quantile", "qualified[].astype", "qualified[].astype", "qualified.sort_values.sort_values.apply", "qualified.sort_values.sort_values.sort_values().head().reset_index", "qualified.sort_values.sort_values.sort_values", "qualified.sort_values.sort_values.values.tolist", "Recommender_with_genre.Recommender_with_genre.diff", "genre.title.title.lower", "print", "print", "qualified.sort_values.sort_values.sort_values().head", "enumerate", "genre.title.title.lower", "genre.title.title.lower", "genre.title.title.lower", "genre.title.title.lower", "df[].notnull", "qualified.sort_values.sort_values.sort_values", "genre.title.title.lower", "df[].notnull", "df[].notnull", "df[].notnull", "genre.title.title.lower", "genre.title.title.lower", "genre.title.title.lower", "genre.title.title.lower"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.diff"], ["", "", "def", "get_similar_movies_based_on_genre", "(", "self", ",", "genre", ",", "nb_recom", ",", "recommended_movies", ",", "percentile", "=", "0.85", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "movie_titles_list", "=", "[", "]", "\n", "print", "(", "'the genre is '", "+", "genre", ")", "\n", "if", "genre", ".", "lower", "(", ")", "==", "'scary'", ":", "\n", "                ", "genre", "=", "'Horror'", "\n", "", "elif", "genre", ".", "lower", "(", ")", "==", "'romantic'", "or", "genre", ".", "lower", "(", ")", "==", "'romances'", ":", "\n", "                ", "genre", "=", "'Romance'", "\n", "", "elif", "genre", ".", "lower", "(", ")", "==", "'preference'", ":", "\n", "                ", "genre", "=", "'Adventure'", "\n", "", "elif", "genre", ".", "lower", "(", ")", "==", "'suspense'", ":", "\n", "                ", "genre", "=", "'Thriller'", "\n", "", "elif", "genre", ".", "lower", "(", ")", "==", "'funny'", ":", "\n", "                ", "genre", "=", "'Comedy'", "\n", "", "elif", "genre", ".", "lower", "(", ")", "==", "'comedies'", ":", "\n", "                ", "genre", "=", "'Comedy'", "\n", "", "elif", "genre", ".", "lower", "(", ")", "==", "'scifi'", ":", "\n", "                ", "genre", "=", "'Science Fiction'", "\n", "", "elif", "genre", ".", "lower", "(", ")", "==", "'kids'", ":", "\n", "                ", "genre", "=", "'Comedy'", "\n", "", "elif", "genre", ".", "lower", "(", ")", "==", "'mysteries'", ":", "\n", "                ", "genre", "=", "'mystery'", "\n", "\n", "", "genre", "=", "genre", ".", "title", "(", ")", "\n", "df", "=", "self", ".", "df_movie_content", "[", "self", ".", "df_movie_content", "[", "'genre'", "]", "==", "genre", "]", "\n", "vote_counts", "=", "df", "[", "df", "[", "'vote_count'", "]", ".", "notnull", "(", ")", "]", "[", "'vote_count'", "]", ".", "astype", "(", "'int'", ")", "\n", "vote_averages", "=", "df", "[", "df", "[", "'vote_average'", "]", ".", "notnull", "(", ")", "]", "[", "'vote_average'", "]", ".", "astype", "(", "'int'", ")", "\n", "self", ".", "C", "=", "vote_averages", ".", "mean", "(", ")", "\n", "self", ".", "m", "=", "vote_counts", ".", "quantile", "(", ".85", ")", "\n", "\n", "col_list", "=", "[", "'title'", ",", "'year'", ",", "'vote_count'", ",", "'vote_average'", ",", "'popularity'", ",", "'genre'", "]", "\n", "qualified", "=", "df", "[", "(", "df", "[", "'vote_count'", "]", ">=", "self", ".", "m", ")", "&", "(", "df", "[", "'vote_count'", "]", ".", "notnull", "(", ")", ")", "&", "(", "df", "[", "'vote_average'", "]", ".", "notnull", "(", ")", ")", "]", "[", "col_list", "]", "\n", "qualified", "[", "'vote_count'", "]", "=", "qualified", "[", "'vote_count'", "]", ".", "astype", "(", "'int'", ")", "\n", "qualified", "[", "'vote_average'", "]", "=", "qualified", "[", "'vote_average'", "]", ".", "astype", "(", "'int'", ")", "\n", "\n", "qualified", "[", "'weighted_rating'", "]", "=", "qualified", ".", "apply", "(", "lambda", "x", ":", "\n", "(", "x", "[", "'vote_count'", "]", "/", "(", "x", "[", "'vote_count'", "]", "+", "self", ".", "m", ")", "*", "x", "[", "'vote_average'", "]", ")", "+", "(", "self", ".", "m", "/", "(", "self", ".", "m", "+", "x", "[", "'vote_count'", "]", ")", "*", "self", ".", "C", ")", ",", "\n", "axis", "=", "1", ")", "\n", "qualified", "=", "qualified", ".", "sort_values", "(", "\"weighted_rating\"", ",", "ascending", "=", "False", ")", ".", "head", "(", "10", ")", ".", "reset_index", "(", ")", "\n", "qualified", "=", "qualified", ".", "sort_values", "(", "'year'", ",", "ascending", "=", "False", ")", "\n", "movies_list", "=", "qualified", ".", "values", ".", "tolist", "(", ")", "\n", "movie_titles_list", "=", "[", "lst", "[", "1", "]", "+", "' ('", "+", "lst", "[", "2", "]", "+", "')'", "for", "i", ",", "lst", "in", "enumerate", "(", "movies_list", ")", "]", "\n", "movie_titles_list", "=", "self", ".", "diff", "(", "movie_titles_list", ",", "recommended_movies", ")", "\n", "#movie_titles_list = self.unique(movie_titles_list)", "\n", "movie_titles_list", "=", "movie_titles_list", "[", ":", "nb_recom", "]", "\n", "\n", "", "except", "(", "RuntimeError", ",", "TypeError", ",", "NameError", ")", "as", "err", ":", "\n", "            ", "print", "(", "err", ")", "\n", "print", "(", "\"exception accured here\"", ")", "\n", "movie_titles_list", "=", "[", "]", "\n", "", "print", "(", "movie_titles_list", ")", "\n", "return", "movie_titles_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_with_genre.Recommender_with_genre.unique": [[73, 79], ["set", "list"], "methods", ["None"], ["", "def", "unique", "(", "self", ",", "list1", ")", ":", "\n", "# insert the list to the set", "\n", "        ", "list_set", "=", "set", "(", "list1", ")", "\n", "# convert the set to the list", "\n", "unique_list", "=", "(", "list", "(", "list_set", ")", ")", "\n", "return", "unique_list", "\n", "", "def", "weighted_rating", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_with_genre.Recommender_with_genre.weighted_rating": [[79, 83], ["None"], "methods", ["None"], ["", "def", "weighted_rating", "(", "x", ")", ":", "\n", "        ", "v", "=", "x", "[", "'vote_count'", "]", "\n", "R", "=", "x", "[", "'vote_average'", "]", "\n", "return", "(", "v", "/", "(", "v", "+", "self", ".", "m", ")", "*", "R", ")", "+", "(", "self", ".", "m", "/", "(", "self", ".", "m", "+", "v", ")", "*", "self", ".", "C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_with_genre.Recommender_with_genre.diff": [[84, 87], ["i.split"], "methods", ["None"], ["", "def", "diff", "(", "self", ",", "li1", ",", "li2", ")", ":", "\n", "        ", "li_dif", "=", "[", "i", "for", "i", "in", "li1", "if", "i", ".", "split", "(", "'('", ")", "[", "0", "]", "not", "in", "li2", "]", "\n", "return", "li_dif", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_with_genre.Recommender_with_genre.data_initialization": [[88, 101], ["pandas.read_csv", "m_df[].fillna().apply().apply", "pandas.to_datetime().apply", "pandas.read_csv.apply().stack().reset_index", "pandas.read_csv.drop().join", "m_df[].fillna().apply", "pandas.to_datetime", "pandas.read_csv.apply().stack", "pandas.read_csv.drop", "isinstance", "m_df[].fillna", "str().split", "pandas.read_csv.apply", "str", "pandas.Series"], "methods", ["None"], ["", "def", "data_initialization", "(", "self", ")", ":", "\n", "        ", "m_df", "=", "pd", ".", "read_csv", "(", "self", ".", "ITEM_DATA_path", "+", "'movies_metadata.csv'", ",", "low_memory", "=", "False", ")", "\n", "m_df", "[", "'genres'", "]", "=", "m_df", "[", "'genres'", "]", ".", "fillna", "(", "'[]'", ")", ".", "apply", "(", "literal_eval", ")", ".", "apply", "(", "lambda", "x", ":", "[", "i", "[", "'name'", "]", "for", "i", "in", "x", "]", "\n", "if", "isinstance", "(", "x", ",", "list", ")", "else", "[", "]", ")", "\n", "# extracting release year from release_date", "\n", "m_df", "[", "'year'", "]", "=", "pd", ".", "to_datetime", "(", "m_df", "[", "'release_date'", "]", ",", "errors", "=", "'coerce'", ")", ".", "apply", "(", "lambda", "x", ":", "str", "(", "x", ")", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "if", "x", "!=", "np", ".", "nan", "else", "np", ".", "nan", ")", "\n", "\n", "#Now, building list for particular genres. For that, cutoff is relaxed to 85% instead of 95", "\n", "temp", "=", "m_df", ".", "apply", "(", "lambda", "x", ":", "pd", ".", "Series", "(", "x", "[", "'genres'", "]", ")", ",", "axis", "=", "1", ")", ".", "stack", "(", ")", ".", "reset_index", "(", "level", "=", "1", ",", "drop", "=", "True", ")", "\n", "temp", ".", "name", "=", "'genre'", "\n", "mges_df", "=", "m_df", ".", "drop", "(", "'genres'", ",", "axis", "=", "1", ")", ".", "join", "(", "temp", ")", "\n", "return", "mges_df", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender.Recommender.__init__": [[9, 20], ["os.path.dirname", "os.path.abspath", "os.path.join", "numpy.array", "pandas.DataFrame", "pandas.DataFrame", "os.path.abspath", "os.path.dirname", "Recommender.Recommender.data_initialization"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.data_initialization"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "PATH", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "self", ".", "ROOT_DIR_PATH", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "PATH", ")", ")", "\n", "self", ".", "ITEM_DATA_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ROOT_DIR_PATH", ",", "'data\\\\recommenders_item_data\\\\'", ")", "\n", "self", ".", "cosine_sim", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "self", ".", "df_movie_content", "=", "pd", ".", "DataFrame", "(", ")", "\n", "self", ".", "recommended_movies", "=", "[", "]", "\n", "self", ".", "movies_mentions", "=", "pd", ".", "DataFrame", "(", ")", "\n", "self", ".", "is_session_changed", "=", "False", "\n", "if", "self", ".", "cosine_sim", ".", "size", "==", "0", ":", "\n", "            ", "self", ".", "cosine_sim", ",", "self", ".", "df_movie_content", "=", "self", ".", "data_initialization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender.Recommender.data_initialization": [[21, 63], ["pandas.read_csv", "pandas.read_csv", "movie_ratings_list.reset_index.reset_index.reset_index", "movie_ratings_list.reset_index.reset_index.iterrows", "movie_ratings_list.reset_index.reset_index.iterrows", "genre_list.split", "list", "list.remove", "movie_ratings_list.reset_index.reset_index.copy", "movie_ratings_list.reset_index.copy.copy", "movie_ratings_list.copy.copy.set_index", "movie_ratings_list.copy.copy.drop", "numpy.delete", "numpy.delete", "sklearn.metrics.pairwise.linear_kernel", "str", "set", "movie_ratings_list.reset_index.copy.apply", "str.__contains__", "str.__contains__", "int", "year_list.append", "year_list.append", "title[].replace", "int", "len"], "methods", ["None"], ["", "", "def", "data_initialization", "(", "self", ")", ":", "\n", "#reading the movies dataset", "\n", "        ", "movie_ratings_list", "=", "pd", ".", "read_csv", "(", "self", ".", "ITEM_DATA_path", "+", "'movies_rating_data.csv'", ",", "encoding", "=", "\"Latin1\"", ")", "\n", "Recommender", ".", "movies_mentions", "=", "pd", ".", "read_csv", "(", "self", ".", "ITEM_DATA_path", "+", "\"movies_data.csv\"", ",", "encoding", "=", "\"Latin1\"", ")", "\n", "movie_ratings_list", "=", "movie_ratings_list", ".", "reset_index", "(", ")", "\n", "year_list", "=", "[", "]", "\n", "for", "index", ",", "row", "in", "movie_ratings_list", ".", "iterrows", "(", ")", ":", "\n", "            ", "title", "=", "str", "(", "row", "[", "'title'", "]", ")", "\n", "if", "title", ".", "__contains__", "(", "'('", ")", "and", "title", ".", "__contains__", "(", "')'", ")", ":", "\n", "                ", "year", "=", "int", "(", "title", "[", "len", "(", "title", ")", "-", "5", ":", "]", ".", "replace", "(", "')'", ",", "''", ")", ")", "\n", "year_list", ".", "append", "(", "year", ")", "\n", "", "else", ":", "\n", "                ", "year", "=", "0000", "\n", "year_list", ".", "append", "(", "year", ")", "\n", "\n", "", "", "movie_ratings_list", "[", "'year'", "]", "=", "year_list", "\n", "genre_list", "=", "\"\"", "\n", "for", "index", ",", "row", "in", "movie_ratings_list", ".", "iterrows", "(", ")", ":", "\n", "                ", "genre_list", "+=", "row", ".", "genres", "+", "\"|\"", "\n", "#split the string into a list of values", "\n", "", "genre_list_split", "=", "genre_list", ".", "split", "(", "'|'", ")", "\n", "#drop-duplicate values", "\n", "new_list", "=", "list", "(", "set", "(", "genre_list_split", ")", ")", "\n", "#remove the value that is blank", "\n", "new_list", ".", "remove", "(", "''", ")", "\n", "#Enriching the movies dataset by adding the various genres columns.", "\n", "movies_with_genres", "=", "movie_ratings_list", ".", "copy", "(", ")", "\n", "\n", "for", "genre", "in", "new_list", ":", "\n", "            ", "movies_with_genres", "[", "genre", "]", "=", "movies_with_genres", ".", "apply", "(", "lambda", "_", ":", "int", "(", "genre", "in", "_", ".", "genres", ")", ",", "axis", "=", "1", ")", "\n", "\n", "#Getting the movies list with only genres like Musical and other such columns", "\n", "", "movie_content_df_temp", "=", "movies_with_genres", ".", "copy", "(", ")", "\n", "movie_content_df_temp", ".", "set_index", "(", "'databaseId'", ")", "\n", "movie_content_df", "=", "movie_content_df_temp", ".", "drop", "(", "columns", "=", "[", "'movieId'", ",", "'rating_mean'", ",", "'title'", ",", "'genres'", ",", "'year'", ",", "'databaseId'", "]", ")", "\n", "movie_content_df", "=", "movie_content_df", ".", "values", "\n", "movie_content_df", "=", "np", ".", "delete", "(", "movie_content_df", ",", "0", ",", "1", ")", "\n", "movie_content_df", "=", "np", ".", "delete", "(", "movie_content_df", ",", "0", ",", "1", ")", "\n", "# Compute the cosine similarity matrix", "\n", "Recommender", ".", "cosine_sim", "=", "linear_kernel", "(", "movie_content_df", ",", "movie_content_df", ")", "\n", "Recommender", ".", "df_movie_content", "=", "movie_content_df_temp", "\n", "return", "Recommender", ".", "cosine_sim", ",", "Recommender", ".", "df_movie_content", "\n", "#Gets the top 10 similar movies based on the content", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender.Recommender.get_similar_movies_based_on_content": [[64, 98], ["print", "pandas.Series", "Recommender.cosine_sim[].tolist", "pandas.DataFrame", "df_score.head.head.sort_values", "df_score.head.head.head", "df_score[].tolist", "df_score.head.head.index.values.tolist", "pandas.DataFrame", "similar_movies.sort_values().reset_index.sort_values().reset_index.sort_values().head().reset_index", "similar_movies.sort_values().reset_index.sort_values().reset_index.sort_values().reset_index", "similar_movies.sort_values().reset_index.sort_values().reset_index.values.tolist", "Recommender.Recommender.diff", "len", "similar_movies.sort_values().reset_index.sort_values().reset_index.sort_values().head", "similar_movies.sort_values().reset_index.sort_values().reset_index.sort_values", "enumerate", "Recommender.df_movie_content.columns.str.contains", "int", "similar_movies.sort_values().reset_index.sort_values().reset_index.sort_values"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.diff"], ["", "def", "get_similar_movies_based_on_content", "(", "self", ",", "input_movieId", ",", "nb_recom", ",", "recommended_movies", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "suggestion_list", "=", "[", "]", "\n", "#cosine_sim, movie_content_df_temp =self.data_initialization(movies_data)", "\n", "#create a series of the movie id and title", "\n", "movie_content_df_temp", "=", "Recommender", ".", "df_movie_content", ".", "loc", "[", ":", ",", "~", "Recommender", ".", "df_movie_content", ".", "columns", ".", "str", ".", "contains", "(", "'^Unnamed'", ")", "]", "\n", "indicies", "=", "pd", ".", "Series", "(", "movie_content_df_temp", ".", "index", ",", "movie_content_df_temp", "[", "'title'", "]", ")", "\n", "title", "=", "movie_content_df_temp", ".", "loc", "[", "movie_content_df_temp", "[", "'databaseId'", "]", "==", "int", "(", "input_movieId", ")", "]", "[", "'title'", "]", "\n", "title", "=", "title", ".", "iloc", "[", "0", "]", "\n", "if", "len", "(", "title", ")", "<", "2", ":", "\n", "                ", "return", "suggestion_list", "\n", "", "movie_index", "=", "indicies", "[", "title", "]", "\n", "sim_scores", "=", "Recommender", ".", "cosine_sim", "[", "movie_index", "]", ".", "tolist", "(", ")", "\n", "df_score", "=", "pd", ".", "DataFrame", "(", "sim_scores", ",", "columns", "=", "[", "'scores'", "]", ")", "\n", "df_score", "=", "df_score", ".", "sort_values", "(", "by", "=", "[", "'scores'", "]", ",", "ascending", "=", "False", ")", "\n", "df_score", "=", "df_score", ".", "head", "(", "15", ")", "\n", "movie_sim_scores", "=", "df_score", "[", "'scores'", "]", ".", "tolist", "(", ")", "\n", "# Get the movie indices", "\n", "movie_indices", "=", "df_score", ".", "index", ".", "values", ".", "tolist", "(", ")", "\n", "similar_movies", "=", "pd", ".", "DataFrame", "(", "movie_content_df_temp", "[", "[", "'title'", ",", "'genres'", ",", "'year'", ",", "'rating_mean'", "]", "]", ".", "iloc", "[", "movie_indices", "]", ")", "\n", "similar_movies", "=", "similar_movies", "[", "similar_movies", ".", "title", "!=", "title", "]", "\n", "similar_movies", "=", "similar_movies", ".", "sort_values", "(", "by", "=", "'rating_mean'", ",", "ascending", "=", "False", ")", ".", "head", "(", "5", ")", ".", "reset_index", "(", ")", "\n", "similar_movies", "=", "similar_movies", ".", "sort_values", "(", "by", "=", "'year'", ",", "ascending", "=", "False", ")", ".", "reset_index", "(", ")", "\n", "candidate_movies", "=", "similar_movies", ".", "values", ".", "tolist", "(", ")", "\n", "movie_titles_list", "=", "[", "lst", "[", "2", "]", "for", "i", ",", "lst", "in", "enumerate", "(", "candidate_movies", ")", "]", "\n", "movie_titles_list", "=", "self", ".", "diff", "(", "movie_titles_list", ",", "recommended_movies", ")", "\n", "#movie_titles_list = self.unique(movie_titles_list)", "\n", "movie_titles_list", "=", "movie_titles_list", "[", ":", "nb_recom", "]", "\n", "\n", "", "except", ":", "\n", "            ", "movie_titles_list", "=", "[", "]", "\n", "\n", "", "print", "(", "movie_titles_list", ")", "\n", "return", "movie_titles_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender.Recommender.diff": [[99, 102], ["i.split"], "methods", ["None"], ["", "def", "diff", "(", "self", ",", "li1", ",", "li2", ")", ":", "\n", "        ", "li_dif", "=", "[", "i", "for", "i", "in", "li1", "if", "i", ".", "split", "(", "'('", ")", "[", "0", "]", "not", "in", "li2", "]", "\n", "return", "li_dif", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender.Recommender.unique": [[103, 109], ["set", "list"], "methods", ["None"], ["", "def", "unique", "(", "self", ",", "list1", ")", ":", "\n", "# insert the list to the set", "\n", "        ", "list_set", "=", "set", "(", "list1", ")", "\n", "# convert the set to the list", "\n", "unique_list", "=", "(", "list", "(", "list_set", ")", ")", "\n", "return", "unique_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.__init__": [[26, 61], ["os.path.dirname", "os.path.abspath", "os.path.join", "os.path.join", "sklearn.feature_extraction.text.TfidfVectorizer", "sklearn.feature_extraction.text.TfidfVectorizer", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.vectorizerSW.fit_transform", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.vectorizer.fit_transform", "os.path.abspath", "os.path.dirname", "open", "f.read().splitlines", "open", "f.read().splitlines", "open", "f.read().splitlines", "open", "f.read().splitlines", "len", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.read_input_dialogs", "open", "f.read().splitlines", "f.read", "f.read", "f.read", "f.read", "f.read"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.read_input_dialogs"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "PATH", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "self", ".", "ROOT_DIR_PATH", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "PATH", ")", ")", "\n", "self", ".", "DATA_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ROOT_DIR_PATH", ",", "'data'", ")", "\n", "self", ".", "DATA_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DATA_path", ",", "'dialog_data'", ",", "\"\"", ")", "\n", "self", ".", "corpus_dataSW", "=", "[", "]", "\n", "self", ".", "corpus_data", "=", "[", "]", "\n", "self", ".", "original_corpus", "=", "[", "]", "\n", "self", ".", "input_dialogs", "=", "[", "]", "\n", "self", ".", "generated_dialogs", "=", "[", "]", "\n", "self", ".", "corpus_tfidfSW", "=", "None", "\n", "self", ".", "corpus_tfidf", "=", "None", "\n", "self", ".", "stored_sentences", "=", "None", "\n", "self", ".", "stored_embeddings", "=", "None", "\n", "self", ".", "vectorizerSW", "=", "None", "\n", "self", ".", "vectorizer", "=", "None", "\n", "self", ".", "error", "=", "None", "\n", "self", ".", "MLE", "=", "None", "\n", "self", ".", "pref_keywords", "=", "[", "'scary'", ",", "'horror'", ",", "'pixar'", ",", "'graphic'", ",", "'classic'", ",", "'comedy'", ",", "'kids'", ",", "'funny'", ",", "'disney'", ",", "'comedies'", ",", "'action'", ",", "'family'", ",", "'adventure'", ",", "'crime'", ",", "'fantasy'", ",", "'thriller'", ",", "'scifi'", ",", "'documentary'", ",", "'science fiction'", ",", "'drama'", ",", "'romance'", ",", "'romances'", ",", "'romantic'", ",", "'mystery'", ",", "'mysteries'", ",", "'history'", ",", "'no preference'", ",", "'suspense'", "]", "\n", "with", "open", "(", "self", ".", "DATA_path", "+", "'ParsedData_PLSW.txt'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "self", ".", "corpus_dataSW", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "with", "open", "(", "self", ".", "DATA_path", "+", "'ParsedData_PL.txt'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "self", ".", "corpus_data", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "with", "open", "(", "self", ".", "DATA_path", "+", "'TrainingDataParsed_Con.txt'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "self", ".", "original_corpus", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "with", "open", "(", "self", ".", "DATA_path", "+", "'GT_corpus_tokens.txt'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "self", ".", "GT_corpus", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "if", "len", "(", "self", ".", "input_dialogs", ")", "<", "1", ":", "\n", "             ", "with", "open", "(", "self", ".", "DATA_path", "+", "'test.txt'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "                 ", "self", ".", "input_dialogs", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "self", ".", "input_dialogs_for_history", "=", "self", ".", "read_input_dialogs", "(", "self", ".", "DATA_path", "+", "'test.txt'", ")", "\n", "", "self", ".", "vectorizerSW", "=", "TfidfVectorizer", "(", ")", "\n", "self", ".", "vectorizer", "=", "TfidfVectorizer", "(", ")", "\n", "self", ".", "corpus_tfidfSW", "=", "self", ".", "vectorizerSW", ".", "fit_transform", "(", "self", ".", "corpus_dataSW", ")", "\n", "self", ".", "corpus_tfidf", "=", "self", ".", "vectorizer", ".", "fit_transform", "(", "self", ".", "corpus_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.seeker_sentences_parser": [[62, 70], ["re.compile().search", "re.compile().search.group", "re.compile().search", "re.compile().search.group", "seeker_line.lower().strip.lower().strip.lower().strip", "str", "re.compile", "re.compile", "seeker_line.lower().strip.lower().strip.lower"], "methods", ["None"], ["", "def", "seeker_sentences_parser", "(", "self", ",", "line", ")", ":", "\n", "        ", "if", "line", ":", "\n", "            ", "p", "=", "re", ".", "compile", "(", "\"SEEKER:(.*)\"", ")", ".", "search", "(", "str", "(", "line", ")", ")", "\n", "temp_line", "=", "p", ".", "group", "(", "1", ")", "\n", "m", "=", "re", ".", "compile", "(", "'<s>(.*?)</s>'", ")", ".", "search", "(", "temp_line", ")", "\n", "seeker_line", "=", "m", ".", "group", "(", "1", ")", "\n", "seeker_line", "=", "seeker_line", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "return", "seeker_line", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.read_input_dialogs": [[71, 89], ["dialogues.append", "open", "line.strip", "dialogues.append", "dialog.append", "dialog.append"], "methods", ["None"], ["", "", "def", "read_input_dialogs", "(", "self", ",", "path_to_input_file", ")", ":", "\n", "            ", "is_visited", "=", "False", "\n", "#print(path_to_input_file)", "\n", "dialogues", "=", "[", "]", "\n", "dialog", "=", "[", "]", "\n", "with", "open", "(", "path_to_input_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "input", ":", "\n", "                ", "for", "line", "in", "input", ":", "\n", "                    ", "if", "not", "line", ".", "strip", "(", ")", ":", "continue", "\n", "if", "'CONVERSATION:'", "in", "line", "and", "is_visited", ":", "\n", "                        ", "dialogues", ".", "append", "(", "dialog", ")", "\n", "dialog", "=", "[", "]", "\n", "dialog", ".", "append", "(", "line", ")", "\n", "is_visited", "=", "False", "\n", "", "else", ":", "\n", "                        ", "dialog", ".", "append", "(", "line", ")", "\n", "is_visited", "=", "True", "\n", "", "", "", "dialogues", ".", "append", "(", "dialog", ")", "\n", "return", "dialogues", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.preprocess_sentences": [[90, 97], ["RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.replace_movieIds_withPL", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.convert_contractions", "re.sub", "gt_line.replace().strip.replace().strip.replace().strip", "gt_line.replace().strip.replace().strip.replace"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.replace_movieIds_withPL", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.convert_contractions"], ["", "def", "preprocess_sentences", "(", "self", ",", "line", ")", ":", "\n", "        ", "gt_line", "=", "self", ".", "replace_movieIds_withPL", "(", "line", ")", "\n", "#gt_line = gt_line.split('~')[1].strip().lower()", "\n", "gt_line", "=", "self", ".", "convert_contractions", "(", "gt_line", ")", "\n", "gt_line", "=", "re", ".", "sub", "(", "'[^A-Za-z0-9]+'", ",", "' '", ",", "gt_line", ")", "\n", "gt_line", "=", "gt_line", ".", "replace", "(", "'im'", ",", "'i am'", ")", ".", "strip", "(", ")", "\n", "return", "gt_line", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.convert_contractions": [[98, 110], ["os.path.join", "open", "line.replace.replace.split", "key_line.split", "word.lower", "line.replace.replace.replace", "word.lower"], "methods", ["None"], ["", "def", "convert_contractions", "(", "self", ",", "line", ")", ":", "\n", "#line = \"What's the best way to ensure this?\"", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DATA_path", "+", "'//contractions.txt'", ")", "\n", "contraction_dict", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "            ", "for", "key_line", "in", "f", ":", "\n", "               ", "(", "key", ",", "val", ")", "=", "key_line", ".", "split", "(", "':'", ")", "\n", "contraction_dict", "[", "key", "]", "=", "val", "\n", "", "for", "word", "in", "line", ".", "split", "(", ")", ":", "\n", "                ", "if", "word", ".", "lower", "(", ")", "in", "contraction_dict", ":", "\n", "                    ", "line", "=", "line", ".", "replace", "(", "word", ",", "contraction_dict", "[", "word", ".", "lower", "(", ")", "]", ")", "\n", "", "", "", "return", "line", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.remove_stopwords": [[111, 117], ["nltk.tokenize.word_tokenize", "nltk.corpus.stopwords.words"], "methods", ["None"], ["", "def", "remove_stopwords", "(", "self", ",", "line", ")", ":", "\n", "        ", "text_tokens", "=", "word_tokenize", "(", "line", ")", "\n", "tokens_without_sw", "=", "[", "word", "for", "word", "in", "text_tokens", "if", "not", "word", "in", "stopwords", ".", "words", "(", ")", "]", "\n", "filtered_sentence", "=", "(", "\" \"", ")", ".", "join", "(", "tokens_without_sw", ")", "\n", "#print(filtered_sentence)", "\n", "return", "filtered_sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.retrieve_candidates_by_last_seeker_query": [[119, 164], ["query.__contains__", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.seeker_sentences_parser", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.preprocess_sentences", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.remove_stopwords", "nltk.tokenize.word_tokenize", "zip", "len", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.vectorizerSW.transform", "sklearn.metrics.pairwise.cosine_similarity().flatten", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.vectorizer.transform", "sklearn.metrics.pairwise.cosine_similarity().flatten", "sklearn.metrics.pairwise.cosine_similarity().flatten.argsort", "sklearn.metrics.pairwise.cosine_similarity", "sklearn.metrics.pairwise.cosine_similarity", "len", "re.sub", "nltk.tokenize.word_tokenize", "len", "re.sub.__contains__", "rt_sentence.__contains__", "GT_candidate_list.append", "[].strip", "str", "re.sub.split"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.seeker_sentences_parser", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.preprocess_sentences", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.remove_stopwords"], ["", "def", "retrieve_candidates_by_last_seeker_query", "(", "self", ",", "query", ",", "nb_candidates", ")", ":", "\n", "#Find the closest 5 sentences of the corpus for each query sentence based on cosine similarity", "\n", "        ", "top_k", "=", "500", "\n", "counter", "=", "0", "\n", "GT_candidate_list", "=", "[", "]", "\n", "if", "query", ".", "__contains__", "(", "'SEEKER:'", ")", ":", "\n", "            ", "parsed_sentence", "=", "self", ".", "seeker_sentences_parser", "(", "query", ")", "\n", "preproc_sentence", "=", "self", ".", "preprocess_sentences", "(", "parsed_sentence", ")", "\n", "seeker_sentence", "=", "self", ".", "remove_stopwords", "(", "preproc_sentence", ")", "\n", "tokens", "=", "word_tokenize", "(", "seeker_sentence", ")", "\n", "if", "len", "(", "tokens", ")", ">", "2", ":", "\n", "                ", "query_tfidf", "=", "self", ".", "vectorizerSW", ".", "transform", "(", "[", "seeker_sentence", "]", ")", "\n", "cosine_matrix", "=", "cosine_similarity", "(", "query_tfidf", ",", "self", ".", "corpus_tfidfSW", ")", ".", "flatten", "(", ")", "\n", "#similarity check for tokens less than 2", "\n", "", "else", ":", "\n", "                ", "seeker_sentence", "=", "preproc_sentence", "\n", "query_tfidf", "=", "self", ".", "vectorizer", ".", "transform", "(", "[", "seeker_sentence", "]", ")", "\n", "cosine_matrix", "=", "cosine_similarity", "(", "query_tfidf", ",", "self", ".", "corpus_tfidf", ")", ".", "flatten", "(", ")", "\n", "\n", "", "sim_sent_indices", "=", "cosine_matrix", ".", "argsort", "(", ")", "[", ":", "-", "top_k", ":", "-", "1", "]", "\n", "sim_sent_scores", "=", "cosine_matrix", "[", "sim_sent_indices", "]", "\n", "\n", "for", "score", ",", "idx", "in", "zip", "(", "sim_sent_scores", ",", "sim_sent_indices", ")", ":", "\n", "                ", "rt_corres_token_count", "=", "0", "\n", "rt_sentence", "=", "self", ".", "original_corpus", "[", "idx", "]", "\n", "if", "idx", "<", "len", "(", "self", ".", "original_corpus", ")", "-", "1", ":", "\n", "                    ", "try", ":", "\n", "                        ", "rt_corres_sentence", "=", "self", ".", "original_corpus", "[", "idx", "+", "1", "]", "\n", "rt_corres_sentence", "=", "re", ".", "sub", "(", "'[^A-Za-z0-9~]+'", ",", "' '", ",", "rt_corres_sentence", ")", "\n", "text_tokens", "=", "word_tokenize", "(", "rt_corres_sentence", ".", "split", "(", "'~'", ")", "[", "1", "]", ".", "strip", "(", ")", ")", "\n", "rt_corres_token_count", "=", "len", "(", "text_tokens", ")", "\n", "", "except", "IndexError", "as", "err", ":", "\n", "                        ", "continue", "\n", "", "", "else", ":", "\n", "                    ", "rt_corres_sentence", "=", "rt_sentence", "\n", "", "if", "not", "rt_corres_sentence", ".", "__contains__", "(", "'GT~'", ")", "or", "rt_corres_token_count", "<=", "3", "or", "rt_corres_token_count", ">", "20", ":", "\n", "                    ", "continue", "\n", "", "elif", "not", "rt_sentence", ".", "__contains__", "(", "'SKR~'", ")", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "counter", "=", "counter", "+", "1", "\n", "GT_candidate_list", ".", "append", "(", "str", "(", "self", ".", "original_corpus", "[", "idx", "+", "1", "]", ")", ")", "\n", "if", "counter", "==", "nb_candidates", ":", "\n", "                        ", "break", "\n", "", "", "", "", "return", "GT_candidate_list", ",", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.gt_sentence_parser": [[165, 182], ["re.compile().search", "re.compile().search.group", "re.compile().search", "re.compile().search.group", "gt_line.strip().lower.strip().lower.strip().lower", "print", "print", "str", "re.compile", "re.compile", "gt_line.strip().lower.strip().lower.strip"], "methods", ["None"], ["", "def", "gt_sentence_parser", "(", "self", ",", "line", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "not", "line", "==", "'\\n'", ":", "\n", "                ", "p", "=", "re", ".", "compile", "(", "\"GROUND TRUTH:(.*)\"", ")", ".", "search", "(", "str", "(", "line", ")", ")", "\n", "temp_line", "=", "p", ".", "group", "(", "1", ")", "\n", "m", "=", "re", ".", "compile", "(", "'<s>(.*?)</s>'", ")", ".", "search", "(", "temp_line", ")", "\n", "gt_line", "=", "m", ".", "group", "(", "1", ")", "\n", "gt_line", "=", "gt_line", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "return", "gt_line", "\n", "# gt_line = re.sub('[^A-Za-z0-9]+', ' ', gt_line)", "\n", "", "else", ":", "\n", "                ", "gt_line", "=", "\"\"", "\n", "", "", "except", "AttributeError", "as", "err", ":", "\n", "                ", "print", "(", "'exception accured while parsing ground truth.. \\n'", ")", "\n", "#print(line)", "\n", "print", "(", "err", ")", "\n", "return", "gt_line", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.replace_movieIds_withPL": [[183, 194], ["re.findall", "lines.append", "print", "line.replace.replace.replace"], "methods", ["None"], ["", "", "def", "replace_movieIds_withPL", "(", "self", ",", "line", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "\"@\"", "in", "line", ":", "\n", "                ", "ids", "=", "re", ".", "findall", "(", "r'@\\S+'", ",", "line", ")", "\n", "for", "id", "in", "ids", ":", "\n", "                    ", "line", "=", "line", ".", "replace", "(", "id", ",", "'movieid'", ")", "\n", "#id = re.sub('[^0-9@]+', 'movieid', id)", "\n", "", "", "", "except", ":", "\n", "            ", "lines", ".", "append", "(", "line", ")", "\n", "print", "(", "'exception occured here'", ")", "\n", "", "return", "line", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.retrieve_sentences_history": [[197, 240], ["dialog_history[].__contains__", "zip", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.preprocess_sentences", "final_query.replace.replace.replace", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.vectorizerSW.transform", "sklearn.metrics.pairwise.cosine_similarity().flatten", "sklearn.metrics.pairwise.cosine_similarity().flatten.argsort", "q.__contains__", "sklearn.metrics.pairwise.cosine_similarity", "len", "re.sub", "nltk.tokenize.word_tokenize", "len", "re.sub.__contains__", "rt_sentence.__contains__", "GT_candidate_list.append", "[].strip", "str", "len", "str", "str", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.seeker_sentences_parser", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.gt_sentence_parser", "re.sub.split"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.preprocess_sentences", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.seeker_sentences_parser", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.gt_sentence_parser"], ["", "def", "retrieve_sentences_history", "(", "self", ",", "dialog_history", ",", "nb_candidates", ")", ":", "\n", "#Find the closest 5 sentences of the corpus for each query sentence based on cosine similarity", "\n", "        ", "counter", "=", "0", "\n", "GT_candidate_list", "=", "[", "]", "\n", "final_query", "=", "''", "\n", "if", "dialog_history", "[", "len", "(", "dialog_history", ")", "-", "1", "]", ".", "__contains__", "(", "'SEEKER:'", ")", ":", "\n", "            ", "query", "=", "''", "\n", "for", "q", "in", "dialog_history", ":", "\n", "                ", "if", "q", ".", "__contains__", "(", "'SEEKER:'", ")", ":", "\n", "                    ", "final_query", "=", "final_query", "+", "str", "(", "self", ".", "seeker_sentences_parser", "(", "q", ")", ")", "+", "','", "\n", "", "else", ":", "\n", "                    ", "final_query", "=", "final_query", "+", "str", "(", "self", ".", "gt_sentence_parser", "(", "q", ")", ")", "+", "','", "\n", "\n", "", "", "final_query", "=", "self", ".", "preprocess_sentences", "(", "final_query", ")", "\n", "final_query", "=", "final_query", ".", "replace", "(", "'None,'", ",", "''", ")", "\n", "query_tfidf", "=", "self", ".", "vectorizerSW", ".", "transform", "(", "[", "final_query", "]", ")", "\n", "cosine_matrix", "=", "cosine_similarity", "(", "query_tfidf", ",", "self", ".", "corpus_tfidfSW", ")", ".", "flatten", "(", ")", "\n", "", "top_k", "=", "500", "\n", "sim_sent_indices", "=", "cosine_matrix", ".", "argsort", "(", ")", "[", ":", "-", "top_k", ":", "-", "1", "]", "\n", "sim_sent_scores", "=", "cosine_matrix", "[", "sim_sent_indices", "]", "\n", "for", "score", ",", "idx", "in", "zip", "(", "sim_sent_scores", ",", "sim_sent_indices", ")", ":", "\n", "            ", "rt_corres_token_count", "=", "0", "\n", "rt_sentence", "=", "self", ".", "original_corpus", "[", "idx", "]", "\n", "if", "idx", "<", "len", "(", "self", ".", "original_corpus", ")", "-", "1", ":", "\n", "                ", "try", ":", "\n", "                    ", "rt_corres_sentence", "=", "self", ".", "original_corpus", "[", "idx", "+", "1", "]", "\n", "rt_corres_sentence", "=", "re", ".", "sub", "(", "'[^A-Za-z0-9~]+'", ",", "' '", ",", "rt_corres_sentence", ")", "\n", "text_tokens", "=", "word_tokenize", "(", "rt_corres_sentence", ".", "split", "(", "'~'", ")", "[", "1", "]", ".", "strip", "(", ")", ")", "\n", "rt_corres_token_count", "=", "len", "(", "text_tokens", ")", "\n", "", "except", "IndexError", "as", "err", ":", "\n", "                    ", "continue", "\n", "", "", "else", ":", "\n", "                ", "rt_corres_sentence", "=", "rt_sentence", "\n", "", "if", "not", "rt_corres_sentence", ".", "__contains__", "(", "'GT~'", ")", "or", "rt_corres_token_count", "<=", "3", "or", "rt_corres_token_count", ">", "20", ":", "\n", "                ", "continue", "\n", "", "elif", "not", "rt_sentence", ".", "__contains__", "(", "'SKR~'", ")", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "counter", "=", "counter", "+", "1", "\n", "GT_candidate_list", ".", "append", "(", "str", "(", "self", ".", "original_corpus", "[", "idx", "+", "1", "]", ")", ")", "\n", "if", "counter", "==", "nb_candidates", ":", "\n", "                    ", "break", "\n", "", "", "", "return", "GT_candidate_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.process_dialogs": [[242, 289], ["enumerate", "generated_dialogs.append", "input_query.__contains__", "input_query.replace", "input_query.__contains__", "print", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.rank_candidates_by_fluency_score", "enumerate", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.retrieve_candidates_by_last_seeker_query", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.filter_outliers_from_set", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.retrieve_candidates_by_last_seeker_query", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.filter_outliers_from_set", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.retrieve_sentences_history", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.filter_outliers_from_set", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.retrieve_sentences_history", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.filter_outliers_from_set", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.retrieve_sentences_history", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.filter_outliers_from_set", "generated_dialogs.append", "len", "str"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.rank_candidates_by_fluency_score", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.retrieve_candidates_by_last_seeker_query", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.filter_outliers_from_set", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.retrieve_candidates_by_last_seeker_query", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.filter_outliers_from_set", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.retrieve_sentences_history", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.filter_outliers_from_set", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.retrieve_sentences_history", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.filter_outliers_from_set", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.retrieve_sentences_history", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.filter_outliers_from_set"], ["", "def", "process_dialogs", "(", "self", ",", "nb_candidates", "=", "5", ")", ":", "\n", "        ", "generated_dialogs", "=", "[", "]", "\n", "for", "dlg", "in", "self", ".", "input_dialogs_for_history", ":", "\n", "            ", "for", "index", ",", "input_query", ",", "in", "enumerate", "(", "dlg", ")", ":", "\n", "                ", "candidate_list_K1", "=", "[", "]", "\n", "candidate_list_K2", "=", "[", "]", "\n", "candidate_list_K3", "=", "[", "]", "\n", "candidate_list_K4", "=", "[", "]", "\n", "valid_pair_list_1", "=", "[", "]", "\n", "valid_pair_list_2", "=", "[", "]", "\n", "valid_pair_list_3", "=", "[", "]", "\n", "valid_pair_list_4", "=", "[", "]", "\n", "dialog", "=", "dlg", "[", "1", ":", "]", "\n", "generated_dialogs", ".", "append", "(", "input_query", ".", "replace", "(", "'\\n'", ",", "''", ")", ")", "\n", "if", "input_query", ".", "__contains__", "(", "'CONVERSATION:'", ")", ":", "\n", "                    ", "continue", "\n", "", "elif", "input_query", ".", "__contains__", "(", "'SEEKER:'", ")", ":", "\n", "                    ", "if", "index", "==", "1", ":", "\n", "                        ", "candidate_list_K1", ",", "seeker_tokens", "=", "self", ".", "retrieve_candidates_by_last_seeker_query", "(", "input_query", ",", "nb_candidates", ")", "\n", "valid_pair_list_1", "=", "self", ".", "filter_outliers_from_set", "(", "candidate_list_K1", ",", "nb_candidates", ")", "\n", "", "else", ":", "\n", "                        ", "candidate_list_K1", ",", "seeker_tokens", "=", "self", ".", "retrieve_candidates_by_last_seeker_query", "(", "input_query", ",", "nb_candidates", ")", "\n", "valid_pair_list_1", "=", "self", ".", "filter_outliers_from_set", "(", "candidate_list_K1", ",", "nb_candidates", ")", "\n", "query_2", "=", "dialog", "[", "index", "-", "2", ":", "index", "]", "\n", "candidate_list_K2", "=", "self", ".", "retrieve_sentences_history", "(", "query_2", ",", "nb_candidates", ")", "\n", "valid_pair_list_2", "=", "self", ".", "filter_outliers_from_set", "(", "candidate_list_K2", ",", "nb_candidates", ")", "\n", "query_3", "=", "dialog", "[", "index", "-", "3", ":", "index", "]", "\n", "if", "len", "(", "query_3", ")", "==", "0", ":", "## when dialog starts with ground-truth sentence,", "\n", "                            ", "query_3", "=", "dialog", "[", "index", "-", "2", ":", "index", "]", "\n", "", "candidate_list_K3", "=", "self", ".", "retrieve_sentences_history", "(", "query_3", ",", "nb_candidates", ")", "\n", "valid_pair_list_3", "=", "self", ".", "filter_outliers_from_set", "(", "candidate_list_K3", ",", "nb_candidates", ")", "\n", "complete_history", "=", "dlg", "[", "1", ":", "index", "+", "1", "]", "\n", "candidate_list_K4", "=", "self", ".", "retrieve_sentences_history", "(", "complete_history", ",", "nb_candidates", ")", "\n", "valid_pair_list_4", "=", "self", ".", "filter_outliers_from_set", "(", "candidate_list_K4", ",", "nb_candidates", ")", "\n", "\n", "# combine candidates from all the valid filtered lists after discarding outliers in each candidate set", "\n", "", "valid_candidates_list", "=", "[", "]", "\n", "valid_candidates_list", "=", "valid_candidates_list", "+", "valid_pair_list_1", "\n", "valid_candidates_list", "=", "valid_candidates_list", "+", "valid_pair_list_2", "\n", "valid_candidates_list", "=", "valid_candidates_list", "+", "valid_pair_list_3", "\n", "valid_candidates_list", "=", "valid_candidates_list", "+", "valid_pair_list_4", "\n", "print", "(", "'here'", ")", "\n", "ranked_candidates", "=", "self", ".", "rank_candidates_by_fluency_score", "(", "seeker_tokens", ",", "valid_candidates_list", ")", "\n", "for", "index", ",", "candi", ",", "in", "enumerate", "(", "ranked_candidates", ")", ":", "\n", "                        ", "generated_dialogs", ".", "append", "(", "candi", "[", "0", "]", "+", "'|score:'", "+", "str", "(", "candi", "[", "1", "]", ")", ")", "\n", "\n", "", "", "", "", "return", "generated_dialogs", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.rank_candidates_by_fluency_score": [[294, 333], ["enumerate", "ranked_response_list.sort", "[].strip().lower", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.preprocess_sentences", "nltk.tokenize.word_tokenize", "list", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.MLE.sentence_probability", "print", "list", "list", "list", "list", "list", "resp_score_list_temp.append", "resp_score_list_temp.append", "ranked_response_list.append", "nltk.util.ngrams", "src.Cacululate_MLE_Probs.Cacululate_MLE_Probs", "len", "set().intersection", "set().intersection", "set().intersection", "set().intersection", "set().intersection", "len", "[].strip", "len", "len", "len", "len", "len", "len", "len", "len", "len", "set", "set", "set", "set", "set", "candid.split"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.preprocess_sentences", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.sentence_probability"], ["def", "rank_candidates_by_fluency_score", "(", "self", ",", "seeker_tokens", ",", "unique_response_list", ")", ":", "\n", "        ", "ranked_response_list", "=", "[", "]", "\n", "for", "index", ",", "candid", ",", "in", "enumerate", "(", "unique_response_list", ")", ":", "\n", "            ", "resp_score_list_temp", "=", "[", "]", "\n", "response", "=", "candid", ".", "split", "(", "'~'", ")", "[", "1", "]", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "response", "=", "self", ".", "preprocess_sentences", "(", "response", ")", "\n", "candidate_token_list", "=", "word_tokenize", "(", "response", ")", "\n", "bigrams", "=", "list", "(", "ngrams", "(", "candidate_token_list", ",", "2", ")", ")", "\n", "if", "self", ".", "MLE", "==", "None", ":", "\n", "                ", "self", ".", "MLE", "=", "Cacululate_MLE_Probs", "(", "2", ",", "corpus_file", "=", "None", ",", "cache", "=", "True", ")", "\n", "", "probability", "=", "self", ".", "MLE", ".", "sentence_probability", "(", "response", ",", "n", "=", "2", ")", "\n", "avg_score", "=", "probability", "/", "len", "(", "bigrams", ")", "\n", "print", "(", "avg_score", ")", "\n", "movie_context", "=", "[", "'movie'", ",", "'movies'", ",", "'movieid'", "]", "\n", "chit_chat_tokens", "=", "[", "'thanks'", ",", "'bye'", ",", "'goodbye'", ",", "'thank'", "]", "\n", "common_tokens_sk", "=", "list", "(", "set", "(", "seeker_tokens", ")", ".", "intersection", "(", "movie_context", ")", ")", "\n", "common_tokens_gt", "=", "list", "(", "set", "(", "candidate_token_list", ")", ".", "intersection", "(", "movie_context", ")", ")", "\n", "common_pref_tokens_gt", "=", "list", "(", "set", "(", "candidate_token_list", ")", ".", "intersection", "(", "self", ".", "pref_keywords", ")", ")", "\n", "common_pref_tokens_sk", "=", "list", "(", "set", "(", "seeker_tokens", ")", ".", "intersection", "(", "self", ".", "pref_keywords", ")", ")", "\n", "common_chit_chat_tokens", "=", "list", "(", "set", "(", "chit_chat_tokens", ")", ".", "intersection", "(", "seeker_tokens", ")", ")", "\n", "\n", "# if there is no 'movie' type tokens in both seeker and candidate, increase the score of candidate", "\n", "if", "len", "(", "common_tokens_sk", ")", "==", "0", "and", "len", "(", "common_tokens_gt", ")", "==", "0", "and", "len", "(", "common_chit_chat_tokens", ")", "==", "0", ":", "\n", "                ", "avg_score", "=", "avg_score", "+", "1.0", "\n", "\n", "#if there is movie tokens in both seeker and candidate utterances but is not a chit-chit response", "\n", "", "if", "len", "(", "common_tokens_sk", ")", ">", "0", "and", "len", "(", "common_tokens_gt", ")", ">", "0", "and", "len", "(", "common_chit_chat_tokens", ")", "==", "0", ":", "\n", "                ", "avg_score", "=", "avg_score", "+", "1.0", "\n", "\n", "#if there is common preference token between seeker and candidate, rank it at first position", "\n", "", "if", "len", "(", "common_pref_tokens_gt", ")", ">", "0", "and", "len", "(", "common_pref_tokens_sk", ")", ">", "0", "and", "len", "(", "common_chit_chat_tokens", ")", "==", "0", ":", "\n", "                ", "avg_score", "=", "avg_score", "+", "5.0", "\n", "", "if", "len", "(", "common_chit_chat_tokens", ")", ">", "0", ":", "\n", "                ", "avg_score", "=", "avg_score", "+", "2.0", "\n", "", "resp_score_list_temp", ".", "append", "(", "candid", ")", "\n", "resp_score_list_temp", ".", "append", "(", "avg_score", ")", "\n", "ranked_response_list", ".", "append", "(", "resp_score_list_temp", ")", "\n", "", "ranked_response_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "return", "ranked_response_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.filter_outliers_from_set": [[335, 366], ["len", "list", "math.floor", "list", "enumerate", "list.sort", "enumerate", "list", "itertools.combinations", "map", "[].strip", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.preprocess_sentences", "[].strip", "RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.preprocess_sentences", "sent2vec.vectorizer.Vectorizer", "sent2vec.vectorizer.Vectorizer.bert", "scipy.spatial.distance.cosine", "score_pair_list[].append", "print", "only_response_list.append", "only_response_list.append", "set", "len", "round", "pair[].split", "pair[].split"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.preprocess_sentences", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.RetrieveCandidatesByHistory.RetrieveCandidateResponses_TFIDF.preprocess_sentences"], ["", "def", "filter_outliers_from_set", "(", "self", ",", "candidates_set", ",", "nb_candidates", ")", ":", "\n", "# this function creates pairwise combinations of candidates,", "\n", "# compute similarity score with bert embeddings,", "\n", "# and return only valid nb of candidate pairs,", "\n", "# e.g., in case of 5 candidates, there will be 10 unique pairs, only two will be retained", "\n", "        ", "valid_candidate_pairs", "=", "[", "]", "\n", "if", "len", "(", "candidates_set", ")", "!=", "0", ":", "\n", "            ", "pair_order_list", "=", "list", "(", "itertools", ".", "combinations", "(", "candidates_set", ",", "2", ")", ")", "# create pairwise combinations from retrieved candidates", "\n", "valid_nb_pairs", "=", "math", ".", "floor", "(", "len", "(", "pair_order_list", ")", "/", "nb_candidates", ")", "# compute how many pairs need to be retained in the final stage", "\n", "score_pair_list", "=", "list", "(", "map", "(", "list", ",", "pair_order_list", ")", ")", "# convert list of tuples to list of lists", "\n", "for", "index", ",", "pair", ",", "in", "enumerate", "(", "score_pair_list", ")", ":", "\n", "                ", "GT1", "=", "pair", "[", "0", "]", ".", "split", "(", "'~'", ")", "[", "1", "]", ".", "strip", "(", ")", "\n", "gt1_processed", "=", "self", ".", "preprocess_sentences", "(", "GT1", ")", "\n", "GT2", "=", "pair", "[", "1", "]", ".", "split", "(", "'~'", ")", "[", "1", "]", ".", "strip", "(", ")", "\n", "gt2_processed", "=", "self", ".", "preprocess_sentences", "(", "GT2", ")", "\n", "vectorizer", "=", "Vectorizer", "(", ")", "\n", "vectorizer", ".", "bert", "(", "[", "gt1_processed", ",", "gt2_processed", "]", ")", "\n", "vectors_bert", "=", "vectorizer", ".", "vectors", "\n", "dist_1", "=", "spatial", ".", "distance", ".", "cosine", "(", "vectors_bert", "[", "0", "]", ",", "vectors_bert", "[", "1", "]", ")", "# compute spatial distance between two sentences using bert model", "\n", "score_pair_list", "[", "index", "]", ".", "append", "(", "round", "(", "dist_1", ",", "4", ")", ")", "\n", "print", "(", "'dist_1: {0}'", ".", "format", "(", "dist_1", ")", ")", "\n", "\n", "## sort list based on scores after all the pairswise scores are calculated", "\n", "", "score_pair_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ",", "reverse", "=", "True", ")", "\n", "valid_candidate_pairs", "=", "score_pair_list", "[", ":", "valid_nb_pairs", "]", "# retaine only valid nb of pairs with scores", "\n", "only_response_list", "=", "[", "]", "\n", "for", "index", ",", "candidate", ",", "in", "enumerate", "(", "valid_candidate_pairs", ")", ":", "\n", "                ", "only_response_list", ".", "append", "(", "candidate", "[", "0", "]", ")", "# candidate", "\n", "only_response_list", ".", "append", "(", "candidate", "[", "1", "]", ")", "#score", "\n", "", "unique_response_list", "=", "list", "(", "set", "(", "only_response_list", ")", ")", "\n", "", "return", "unique_response_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.__init__": [[16, 39], ["os.path.dirname", "os.path.abspath", "os.path.join", "numpy.array", "numpy.array", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.read_csv", "pandas.read_csv", "Recommender_MF.Recommender_MF.load_model", "os.path.abspath", "os.path.dirname", "open", "filehandle.readlines", "i.strip", "pandas.read_csv", "Recommender_MF.Recommender_MF.data_initialization", "Recommender_MF.Recommender_MF.load_model"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.load_model", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.data_initialization", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.load_model"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "PATH", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "self", ".", "ROOT_DIR_PATH", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "PATH", ")", ")", "\n", "self", ".", "ITEM_DATA_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ROOT_DIR_PATH", ",", "'data\\\\recommenders_item_data\\\\'", ")", "\n", "self", ".", "model", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "self", ".", "loaded_model", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "self", ".", "movie_title_list", "=", "None", "\n", "self", ".", "df_ratings", "=", "pd", ".", "DataFrame", "(", ")", "\n", "self", ".", "df_movies", "=", "pd", ".", "DataFrame", "(", ")", "\n", "self", ".", "movies_mentions", "=", "pd", ".", "DataFrame", "(", ")", "\n", "self", ".", "is_session_changed", "=", "False", "\n", "self", ".", "recommended_movies", "=", "[", "]", "\n", "#self.df_ratings = pd.read_csv(self.ITEM_DATA_path+ \"ratings_latest.csv\")", "\n", "self", ".", "df_movies", "=", "pd", ".", "read_csv", "(", "self", ".", "ITEM_DATA_path", "+", "\"dfmovies.csv\"", ")", "\n", "self", ".", "movies_mentions", "=", "pd", ".", "read_csv", "(", "self", ".", "ITEM_DATA_path", "+", "\"movies_data.csv\"", ",", "encoding", "=", "\"utf-8\"", ")", "\n", "with", "open", "(", "self", ".", "ITEM_DATA_path", "+", "'movie_titles.txt'", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "filehandle", ":", "\n", "            ", "self", ".", "movie_title_list", "=", "filehandle", ".", "readlines", "(", ")", "\n", "", "self", ".", "movie_title_list", "=", "[", "i", ".", "strip", "(", ")", "for", "i", "in", "self", ".", "movie_title_list", "]", "\n", "self", ".", "load_model", "(", ")", "\n", "if", "self", ".", "loaded_model", ".", "size", "==", "0", ":", "\n", "            ", "self", ".", "df_ratings", "=", "pd", ".", "read_csv", "(", "self", ".", "ITEM_DATA_path", "+", "\"ratings_latest.csv\"", ",", "usecols", "=", "[", "'userId'", ",", "'movieId'", ",", "'rating'", "]", ")", "\n", "self", ".", "data_initialization", "(", ")", "\n", "self", ".", "load_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.store_model": [[40, 45], ["numpy.save", "print"], "methods", ["None"], ["", "", "def", "store_model", "(", "self", ",", "data", ")", ":", "\n", "# save numpy array as npy file", "\n", "# save to npy file", "\n", "        ", "save", "(", "self", ".", "ITEM_DATA_path", "+", "'model.npy'", ",", "data", ")", "\n", "print", "(", "'model data saved'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.load_model": [[46, 50], ["numpy.load", "print"], "methods", ["None"], ["", "def", "load_model", "(", "self", ")", ":", "\n", "# load numpy array from npy file", "\n", "        ", "self", ".", "loaded_model", "=", "load", "(", "self", ".", "ITEM_DATA_path", "+", "'model.npy'", ")", "\n", "print", "(", "'model data loaded'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.data_initialization": [[51, 94], ["pandas.merge", "combine_movie_rating.dropna.dropna.dropna", "combine_movie_rating.dropna.dropna.merge", "combine_movie_rating.dropna.merge.drop_duplicates", "combine_movie_rating.merge.drop_duplicates.drop_duplicates", "Recommender_MF.Recommender_MF.df_movies.iterrows", "pandas.merge().fillna", "Recommender_MF.Recommender_MF.df_movies.to_csv", "pandas.pivot_table().fillna", "sklearn.decomposition.TruncatedSVD", "sklearn.decomposition.TruncatedSVD.fit_transform", "numpy.corrcoef", "list", "Recommender_MF.Recommender_MF.store_model", "print", "[].mean().reset_index().rename", "open", "file.writelines", "str", "pandas.merge", "pandas.pivot_table", "[].mean().reset_index", "str.__contains__", "str.__contains__", "int", "year_list.append", "year_list.append", "year_list.append", "title[].replace", "[].mean", "combine_movie_rating.dropna.dropna.groupby", "len"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.store_model"], ["", "def", "data_initialization", "(", "self", ")", ":", "\n", "        ", "self", ".", "df_ratings", "=", "self", ".", "df_ratings", "[", ":", "15000000", "]", "\n", "combine_movie_rating", "=", "pd", ".", "merge", "(", "self", ".", "df_ratings", ",", "self", ".", "df_movies", ",", "on", "=", "'movieId'", ")", "\n", "combine_movie_rating", "=", "combine_movie_rating", ".", "dropna", "(", "axis", "=", "0", ",", "subset", "=", "[", "'title'", "]", ")", "\n", "movie_ratingCount", "=", "(", "combine_movie_rating", ".", "\n", "groupby", "(", "by", "=", "[", "'title'", "]", ")", "[", "'rating'", "]", ".", "\n", "mean", "(", ")", ".", "\n", "reset_index", "(", ")", ".", "\n", "rename", "(", "columns", "=", "{", "'rating'", ":", "'ratingMean'", "}", ")", "\n", "[", "[", "'title'", ",", "'ratingMean'", "]", "]", "\n", ")", "\n", "rating_with_totalRatingCount", "=", "combine_movie_rating", ".", "merge", "(", "movie_ratingCount", ",", "left_on", "=", "'title'", ",", "right_on", "=", "'title'", ",", "how", "=", "'left'", ")", "\n", "user_rating", "=", "rating_with_totalRatingCount", ".", "drop_duplicates", "(", "[", "'userId'", ",", "'title'", "]", ")", "\n", "\n", "df_temp_rating_count", "=", "user_rating", ".", "drop_duplicates", "(", "[", "'title'", "]", ",", "keep", "=", "'first'", ")", "\n", "year_list", "=", "[", "]", "\n", "for", "index", ",", "row", "in", "self", ".", "df_movies", ".", "iterrows", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "title", "=", "str", "(", "row", "[", "'title'", "]", ")", "\n", "if", "title", ".", "__contains__", "(", "'('", ")", "and", "title", ".", "__contains__", "(", "')'", ")", ":", "\n", "                    ", "year", "=", "int", "(", "title", "[", "len", "(", "title", ")", "-", "5", ":", "]", ".", "replace", "(", "')'", ",", "''", ")", ")", "\n", "year_list", ".", "append", "(", "year", ")", "\n", "", "else", ":", "\n", "                    ", "year", "=", "0000", "\n", "year_list", ".", "append", "(", "year", ")", "\n", "", "", "except", ":", "\n", "                ", "year_list", ".", "append", "(", "0000", ")", "\n", "continue", "\n", "\n", "", "", "self", ".", "df_movies", "[", "'year'", "]", "=", "year_list", "\n", "self", ".", "df_movies", "=", "pd", ".", "merge", "(", "self", ".", "df_movies", "[", "[", "'movieId'", ",", "'title'", ",", "'genres'", ",", "'year'", "]", "]", ",", "df_temp_rating_count", "[", "[", "'title'", ",", "'ratingMean'", "]", "]", ",", "left_on", "=", "'title'", ",", "right_on", "=", "'title'", ",", "how", "=", "'left'", ")", ".", "fillna", "(", "0", ")", "\n", "self", ".", "df_movies", ".", "to_csv", "(", "self", ".", "ITEM_DATA_path", "+", "'dfmovies.csv'", ")", "\n", "movie_user_rating_pivot", "=", "pd", ".", "pivot_table", "(", "user_rating", ",", "index", "=", "'userId'", ",", "columns", "=", "'title'", ",", "values", "=", "'rating'", ")", ".", "fillna", "(", "0", ")", "\n", "X", "=", "movie_user_rating_pivot", ".", "values", ".", "T", "\n", "SVD", "=", "TruncatedSVD", "(", "n_components", "=", "20", ",", "random_state", "=", "10", ")", "\n", "matrix", "=", "SVD", ".", "fit_transform", "(", "X", ")", "\n", "self", ".", "model", "=", "np", ".", "corrcoef", "(", "matrix", ")", "\n", "movie_title", "=", "movie_user_rating_pivot", ".", "columns", "\n", "movie_titles_list", "=", "list", "(", "movie_title", ")", "\n", "with", "open", "(", "self", ".", "ITEM_DATA_path", "+", "'movie_titles_o.txt'", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "file", ".", "writelines", "(", "[", "\"%s\\n\"", "%", "item", "for", "item", "in", "movie_titles_list", "]", ")", "\n", "", "self", ".", "store_model", "(", "self", ".", "model", ")", "\n", "print", "(", "'model data saved!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.get_similar_movies_based_on_user_ratings": [[96, 128], ["print", "[].iloc[].split", "Recommender_MF.Recommender_MF.movie_title_list.index", "list", "sorted", "pandas.DataFrame", "pandas.merge", "Recommender_MF.Recommender_MF.match_genres", "similar_movies.sort_values().head.sort_values().head.sort_values().head().reset_index", "similar_movies.sort_values().head.sort_values().head.sort_values().reset_index", "similar_movies.sort_values().head.sort_values().head.sort_values().head", "similar_movies.sort_values().head.sort_values().head.values.tolist", "Recommender_MF.Recommender_MF.diff", "len", "enumerate", "similar_movies.sort_values().head.sort_values().head.sort_values().head", "similar_movies.sort_values().head.sort_values().head.sort_values", "similar_movies.sort_values().head.sort_values().head.sort_values", "enumerate", "int", "similar_movies.sort_values().head.sort_values().head.sort_values", "int"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.match_genres", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.diff"], ["", "def", "get_similar_movies_based_on_user_ratings", "(", "self", ",", "input_movieId", ",", "nb_rec", ",", "recommended_movies", ")", ":", "\n", "        ", "try", ":", "\n", "\n", "            ", "movies_list", "=", "[", "]", "\n", "title", "=", "self", ".", "movies_mentions", ".", "loc", "[", "self", ".", "movies_mentions", "[", "'databaseId'", "]", "==", "int", "(", "input_movieId", ")", "]", "[", "'title'", "]", "\n", "title", "=", "title", ".", "iloc", "[", "0", "]", "\n", "if", "len", "(", "title", ")", "<", "2", ":", "\n", "                ", "return", "movies_list", "\n", "", "input_genres", "=", "self", ".", "movies_mentions", ".", "loc", "[", "self", ".", "movies_mentions", "[", "'databaseId'", "]", "==", "int", "(", "input_movieId", ")", "]", "[", "'genres'", "]", ".", "iloc", "[", "0", "]", ".", "split", "(", "'|'", ")", "\n", "movie_index", "=", "self", ".", "movie_title_list", ".", "index", "(", "title", ")", "\n", "sim_scores", "=", "list", "(", "enumerate", "(", "self", ".", "loaded_model", "[", "movie_index", "]", ")", ")", "\n", "sim_scores", "=", "sorted", "(", "sim_scores", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "sim_scores", "=", "sim_scores", "[", "1", ":", "15", "]", "\n", "movie_indices", "=", "[", "i", "[", "0", "]", "for", "i", "in", "sim_scores", "]", "\n", "movie_sim_scores", "=", "[", "i", "[", "1", "]", "for", "i", "in", "sim_scores", "]", "\n", "similar_movies", "=", "pd", ".", "DataFrame", "(", "[", "self", ".", "movie_title_list", "[", "i", "]", "for", "i", "in", "movie_indices", "]", ",", "columns", "=", "[", "'title'", "]", ")", "\n", "similar_movies", "=", "pd", ".", "merge", "(", "similar_movies", "[", "[", "'title'", "]", "]", ",", "self", ".", "df_movies", "[", "[", "'title'", ",", "'genres'", ",", "'year'", ",", "'ratingMean'", "]", "]", ",", "how", "=", "'left'", ",", "on", "=", "'title'", ")", "\n", "similar_movies", "=", "self", ".", "match_genres", "(", "input_genres", ",", "similar_movies", ")", "\n", "\n", "similar_movies", "=", "similar_movies", ".", "sort_values", "(", "by", "=", "'ratingMean'", ",", "ascending", "=", "False", ")", ".", "head", "(", "10", ")", ".", "reset_index", "(", ")", "\n", "similar_movies", "=", "similar_movies", ".", "sort_values", "(", "by", "=", "'year'", ",", "ascending", "=", "False", ")", ".", "reset_index", "(", ")", "\n", "similar_movies", "=", "similar_movies", ".", "sort_values", "(", "by", "=", "'matchCount'", ",", "ascending", "=", "False", ")", ".", "head", "(", "5", ")", "\n", "similar_movies", "=", "similar_movies", "[", "similar_movies", ".", "year", "!=", "1500", "]", "\n", "candidate_movies", "=", "similar_movies", ".", "values", ".", "tolist", "(", ")", "\n", "movie_titles_list", "=", "[", "lst", "[", "2", "]", "for", "i", ",", "lst", "in", "enumerate", "(", "candidate_movies", ")", "]", "\n", "movie_titles_list", "=", "self", ".", "diff", "(", "movie_titles_list", ",", "recommended_movies", ")", "\n", "movie_titles_list", "=", "movie_titles_list", "[", ":", "nb_rec", "]", "\n", "\n", "", "except", ":", "\n", "            ", "movie_titles_list", "=", "[", "]", "\n", "", "print", "(", "movie_titles_list", ")", "\n", "return", "movie_titles_list", "\n", "", "def", "match_genres", "(", "self", ",", "input_genre_list", ",", "recommended_list", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.match_genres": [[128, 137], ["recommended_list.iterrows", "[].split", "len", "matching_count_list.append", "list", "set().intersection", "set"], "methods", ["None"], ["", "def", "match_genres", "(", "self", ",", "input_genre_list", ",", "recommended_list", ")", ":", "\n", "        ", "matching_count_list", "=", "[", "]", "\n", "for", "row", "in", "recommended_list", ".", "iterrows", "(", ")", ":", "\n", "            ", "rec_genres_list", "=", "row", "[", "1", "]", "[", "'genres'", "]", ".", "split", "(", "'|'", ")", "\n", "count", "=", "len", "(", "list", "(", "set", "(", "input_genre_list", ")", ".", "intersection", "(", "rec_genres_list", ")", ")", ")", "\n", "matching_count_list", ".", "append", "(", "count", ")", "\n", "\n", "", "recommended_list", "[", "'matchCount'", "]", "=", "matching_count_list", "\n", "return", "recommended_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.unique": [[139, 145], ["set", "list"], "methods", ["None"], ["", "def", "unique", "(", "self", ",", "list1", ")", ":", "\n", "# insert the list to the set", "\n", "        ", "list_set", "=", "set", "(", "list1", ")", "\n", "# convert the set to the list", "\n", "unique_list", "=", "(", "list", "(", "list_set", ")", ")", "\n", "return", "unique_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.filter_duplicate_movies": [[146, 149], ["list", "set().difference", "set"], "methods", ["None"], ["", "def", "filter_duplicate_movies", "(", "self", ",", "rec_list", ",", "mentioned_list", ")", ":", "\n", "        ", "unique_movies", "=", "list", "(", "set", "(", "rec_list", ")", ".", "difference", "(", "mentioned_list", ")", ")", "\n", "return", "unique_movies", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Recommender_MF.Recommender_MF.diff": [[150, 153], ["i.split"], "methods", ["None"], ["", "def", "diff", "(", "self", ",", "li1", ",", "li2", ")", ":", "\n", "        ", "li_dif", "=", "[", "i", "for", "i", "in", "li1", "if", "i", ".", "split", "(", "'('", ")", "[", "0", "]", "not", "in", "li2", "]", "\n", "return", "li_dif", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.__init__": [[16, 35], ["os.path.dirname", "os.path.abspath", "os.path.join", "os.path.join", "Cacululate_MLE_Probs.Cacululate_MLE_Probs.load_corpus", "Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_unigram", "os.path.abspath", "os.path.dirname", "Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_bigram", "Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_trigram", "Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_quadrigram", "Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_pentigram"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.load_corpus", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_unigram", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_bigram", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_trigram", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_quadrigram", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_pentigram"], ["def", "__init__", "(", "self", ",", "n", "=", "1", ",", "corpus_file", "=", "None", ",", "cache", "=", "False", ")", ":", "\n", "        ", "\"\"\"Constructor method which loads the corpus from file and creates ngrams based on imput parameters.\"\"\"", "\n", "self", ".", "PATH", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "self", ".", "ROOT_DIR_PATH", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "PATH", ")", ")", "\n", "self", ".", "DATA_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ROOT_DIR_PATH", ",", "'data'", ")", "\n", "self", ".", "DATA_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "DATA_path", ",", "'dialog_data'", ",", "\"\"", ")", "\n", "self", ".", "words", "=", "[", "]", "\n", "self", ".", "load_corpus", "(", "corpus_file", ")", "\n", "self", ".", "unigram", "=", "self", ".", "bigram", "=", "self", ".", "trigram", "=", "self", ".", "quadrigram", "=", "self", ".", "pentigram", "=", "None", "\n", "self", ".", "create_unigram", "(", "cache", ")", "\n", "if", "n", ">=", "2", ":", "\n", "            ", "self", ".", "create_bigram", "(", "cache", ")", "\n", "", "if", "n", ">=", "3", ":", "\n", "            ", "self", ".", "create_trigram", "(", "cache", ")", "\n", "", "if", "n", ">=", "4", ":", "\n", "            ", "self", ".", "create_quadrigram", "(", "cache", ")", "\n", "", "if", "n", ">=", "5", ":", "\n", "            ", "self", ".", "create_pentigram", "(", "cache", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.load_corpus": [[36, 46], ["print", "open", "open.read", "open.close", "print", "open.read.split"], "methods", ["None"], ["", "def", "load_corpus", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "\"\"\"Method to load external file which contains raw corpus.\"\"\"", "\n", "print", "(", "\"Loading Corpus from data file\"", ")", "\n", "if", "file_name", "is", "None", ":", "\n", "            ", "file_name", "=", "self", ".", "DATA_path", "+", "'GT_corpus_tokens.txt'", "\n", "", "corpus_file", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "corpus", "=", "corpus_file", ".", "read", "(", ")", "\n", "corpus_file", ".", "close", "(", ")", "\n", "print", "(", "\"Processing Corpus\"", ")", "\n", "self", ".", "words", "=", "corpus", ".", "split", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_unigram": [[47, 59], ["print", "print", "collections.Counter", "open", "open.write", "open.close", "str"], "methods", ["None"], ["", "def", "create_unigram", "(", "self", ",", "cache", ")", ":", "\n", "        ", "\"\"\"Method to create Unigram Model for words loaded from corpus.\"\"\"", "\n", "print", "(", "\"Creating Unigram Model\"", ")", "\n", "unigram_file", "=", "None", "\n", "if", "cache", ":", "\n", "            ", "unigram_file", "=", "open", "(", "self", ".", "DATA_path", "+", "'unigram.data'", ",", "'w'", ")", "\n", "", "print", "(", "\"Calculating Count for Unigram Model\"", ")", "\n", "unigram", "=", "Counter", "(", "self", ".", "words", ")", "\n", "if", "cache", ":", "\n", "            ", "unigram_file", ".", "write", "(", "str", "(", "unigram", ")", ")", "\n", "unigram_file", ".", "close", "(", ")", "\n", "", "self", ".", "unigram", "=", "unigram", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_bigram": [[60, 78], ["print", "enumerate", "print", "collections.Counter", "biwords.append", "open", "open.write", "open.close", "str", "len"], "methods", ["None"], ["", "def", "create_bigram", "(", "self", ",", "cache", ")", ":", "\n", "        ", "\"\"\"Method to create Bigram Model for words loaded from corpus.\"\"\"", "\n", "print", "(", "\"Creating Bigram Model\"", ")", "\n", "words", "=", "self", ".", "words", "\n", "biwords", "=", "[", "]", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "words", ")", ":", "\n", "            ", "if", "index", "==", "len", "(", "words", ")", "-", "1", ":", "\n", "                ", "break", "\n", "", "biwords", ".", "append", "(", "item", "+", "' '", "+", "words", "[", "index", "+", "1", "]", ")", "\n", "", "print", "(", "\"Calculating Count for Bigram Model\"", ")", "\n", "bigram_file", "=", "None", "\n", "if", "cache", ":", "\n", "            ", "bigram_file", "=", "open", "(", "self", ".", "DATA_path", "+", "'bigram.data'", ",", "'w'", ")", "\n", "", "bigram", "=", "Counter", "(", "biwords", ")", "\n", "if", "cache", ":", "\n", "            ", "bigram_file", ".", "write", "(", "str", "(", "bigram", ")", ")", "\n", "bigram_file", ".", "close", "(", ")", "\n", "", "self", ".", "bigram", "=", "bigram", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_trigram": [[79, 96], ["print", "enumerate", "print", "collections.Counter", "triwords.append", "open", "open.write", "open.close", "str", "len"], "methods", ["None"], ["", "def", "create_trigram", "(", "self", ",", "cache", ")", ":", "\n", "        ", "\"\"\"Method to create Trigram Model for words loaded from corpus.\"\"\"", "\n", "print", "(", "\"Creating Trigram Model\"", ")", "\n", "words", "=", "self", ".", "words", "\n", "triwords", "=", "[", "]", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "words", ")", ":", "\n", "            ", "if", "index", "==", "len", "(", "words", ")", "-", "2", ":", "\n", "                ", "break", "\n", "", "triwords", ".", "append", "(", "item", "+", "' '", "+", "words", "[", "index", "+", "1", "]", "+", "' '", "+", "words", "[", "index", "+", "2", "]", ")", "\n", "", "print", "(", "\"Calculating Count for Trigram Model\"", ")", "\n", "if", "cache", ":", "\n", "            ", "trigram_file", "=", "open", "(", "'trigram.data'", ",", "'w'", ")", "\n", "", "trigram", "=", "Counter", "(", "triwords", ")", "\n", "if", "cache", ":", "\n", "            ", "trigram_file", ".", "write", "(", "str", "(", "trigram", ")", ")", "\n", "trigram_file", ".", "close", "(", ")", "\n", "", "self", ".", "trigram", "=", "trigram", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_quadrigram": [[97, 114], ["print", "enumerate", "print", "collections.Counter", "quadriwords.append", "open", "open.write", "open.close", "str", "len"], "methods", ["None"], ["", "def", "create_quadrigram", "(", "self", ",", "cache", ")", ":", "\n", "        ", "\"\"\"Method to create Quadrigram Model for words loaded from corpus.\"\"\"", "\n", "print", "(", "\"Creating Quadrigram Model\"", ")", "\n", "words", "=", "self", ".", "words", "\n", "quadriwords", "=", "[", "]", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "words", ")", ":", "\n", "            ", "if", "index", "==", "len", "(", "words", ")", "-", "3", ":", "\n", "                ", "break", "\n", "", "quadriwords", ".", "append", "(", "item", "+", "' '", "+", "words", "[", "index", "+", "1", "]", "+", "' '", "+", "words", "[", "index", "+", "2", "]", "+", "' '", "+", "words", "[", "index", "+", "3", "]", ")", "\n", "", "print", "(", "\"Calculating Count for Quadrigram Model\"", ")", "\n", "if", "cache", ":", "\n", "            ", "quadrigram_file", "=", "open", "(", "'fourgram.data'", ",", "'w'", ")", "\n", "", "quadrigram", "=", "Counter", "(", "quadriwords", ")", "\n", "if", "cache", ":", "\n", "            ", "quadrigram_file", ".", "write", "(", "str", "(", "quadrigram", ")", ")", "\n", "quadrigram_file", ".", "close", "(", ")", "\n", "", "self", ".", "quadrigram", "=", "quadrigram", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.create_pentigram": [[115, 132], ["print", "enumerate", "print", "collections.Counter", "pentiwords.append", "open", "open.write", "open.close", "str", "len"], "methods", ["None"], ["", "def", "create_pentigram", "(", "self", ",", "cache", ")", ":", "\n", "        ", "\"\"\"Method to create Pentigram Model for words loaded from corpus.\"\"\"", "\n", "print", "(", "\"Creating pentigram Model\"", ")", "\n", "words", "=", "self", ".", "words", "\n", "pentiwords", "=", "[", "]", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "words", ")", ":", "\n", "            ", "if", "index", "==", "len", "(", "words", ")", "-", "4", ":", "\n", "                ", "break", "\n", "", "pentiwords", ".", "append", "(", "item", "+", "' '", "+", "words", "[", "index", "+", "1", "]", "+", "' '", "+", "words", "[", "index", "+", "2", "]", "+", "' '", "+", "words", "[", "index", "+", "3", "]", "+", "' '", "+", "words", "[", "index", "+", "4", "]", ")", "\n", "", "print", "(", "\"Calculating Count for pentigram Model\"", ")", "\n", "if", "cache", ":", "\n", "            ", "pentigram_file", "=", "open", "(", "'pentagram.data'", ",", "'w'", ")", "\n", "", "pentigram", "=", "Counter", "(", "pentiwords", ")", "\n", "if", "cache", ":", "\n", "            ", "pentigram_file", ".", "write", "(", "str", "(", "pentigram", ")", ")", "\n", "pentigram_file", ".", "close", "(", ")", "\n", "", "self", ".", "pentigram", "=", "pentigram", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.probability": [[133, 145], ["math.log", "math.log", "math.log", "len", "len", "math.log", "len", "math.log", "len", "len", "len"], "methods", ["None"], ["", "def", "probability", "(", "self", ",", "word", ",", "words", "=", "\"\"", ",", "n", "=", "1", ")", ":", "\n", "        ", "\"\"\"Method to calculate the Maximum Likelihood Probability of n-Grams on the basis of various parameters.\"\"\"", "\n", "if", "n", "==", "1", ":", "\n", "            ", "return", "calc", ".", "log", "(", "(", "self", ".", "unigram", "[", "word", "]", "+", "1", ")", "/", "(", "len", "(", "self", ".", "words", ")", "+", "len", "(", "self", ".", "unigram", ")", ")", ")", "\n", "", "elif", "n", "==", "2", ":", "\n", "            ", "return", "calc", ".", "log", "(", "(", "self", ".", "bigram", "[", "words", "]", "+", "1", ")", "/", "(", "self", ".", "unigram", "[", "word", "]", "+", "len", "(", "self", ".", "unigram", ")", ")", ")", "\n", "", "elif", "n", "==", "3", ":", "\n", "            ", "return", "calc", ".", "log", "(", "(", "self", ".", "trigram", "[", "words", "]", "+", "1", ")", "/", "(", "self", ".", "bigram", "[", "word", "]", "+", "len", "(", "self", ".", "unigram", ")", ")", ")", "\n", "", "elif", "n", "==", "4", ":", "\n", "            ", "return", "calc", ".", "log", "(", "(", "self", ".", "quadrigram", "[", "words", "]", "+", "1", ")", "/", "(", "self", ".", "trigram", "[", "word", "]", "+", "len", "(", "self", ".", "unigram", ")", ")", ")", "\n", "", "elif", "n", "==", "5", ":", "\n", "            ", "return", "calc", ".", "log", "(", "(", "self", ".", "pentigram", "[", "words", "]", "+", "1", ")", "/", "(", "self", ".", "quadrigram", "[", "word", "]", "+", "len", "(", "self", ".", "unigram", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.sentence_probability": [[146, 177], ["sentence.lower().split", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "sentence.lower", "Cacululate_MLE_Probs.Cacululate_MLE_Probs.probability", "Cacululate_MLE_Probs.Cacululate_MLE_Probs.probability", "Cacululate_MLE_Probs.Cacululate_MLE_Probs.probability", "Cacululate_MLE_Probs.Cacululate_MLE_Probs.probability", "Cacululate_MLE_Probs.Cacululate_MLE_Probs.probability", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.probability", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.probability", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.probability", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.probability", "home.repos.pwc.inspect_result.ahtsham58_crb-crs.src.Cacululate_MLE_Probs.Cacululate_MLE_Probs.probability"], ["", "", "def", "sentence_probability", "(", "self", ",", "sentence", ",", "n", "=", "1", ")", ":", "\n", "        ", "\"\"\"Method to calculate cumulative n-gram Maximum Likelihood Probability of a phrase or sentence.\"\"\"", "\n", "words", "=", "sentence", ".", "lower", "(", ")", ".", "split", "(", ")", "\n", "P", "=", "0", "\n", "if", "n", "==", "1", ":", "\n", "            ", "for", "index", ",", "item", "in", "enumerate", "(", "words", ")", ":", "\n", "                ", "P", "+=", "self", ".", "probability", "(", "item", ")", "\n", "", "", "if", "n", "==", "2", ":", "\n", "            ", "for", "index", ",", "item", "in", "enumerate", "(", "words", ")", ":", "\n", "                ", "if", "index", ">=", "len", "(", "words", ")", "-", "1", ":", "\n", "                    ", "break", "\n", "", "P", "+=", "self", ".", "probability", "(", "item", ",", "item", "+", "' '", "+", "words", "[", "index", "+", "1", "]", ",", "2", ")", "\n", "", "", "if", "n", "==", "3", ":", "\n", "            ", "for", "index", ",", "item", "in", "enumerate", "(", "words", ")", ":", "\n", "                ", "if", "index", ">=", "len", "(", "words", ")", "-", "2", ":", "\n", "                    ", "break", "\n", "", "P", "+=", "self", ".", "probability", "(", "item", "+", "' '", "+", "words", "[", "index", "+", "1", "]", ",", "item", "+", "' '", "+", "words", "[", "index", "+", "1", "]", "+", "' '", "+", "words", "[", "index", "+", "2", "]", ",", "3", ")", "\n", "", "", "if", "n", "==", "4", ":", "\n", "            ", "for", "index", ",", "item", "in", "enumerate", "(", "words", ")", ":", "\n", "                ", "if", "index", ">=", "len", "(", "words", ")", "-", "3", ":", "\n", "                    ", "break", "\n", "", "P", "+=", "self", ".", "probability", "(", "item", "+", "' '", "+", "words", "[", "index", "+", "1", "]", "+", "' '", "+", "words", "[", "index", "+", "2", "]", ",", "item", "+", "' '", "+", "words", "[", "index", "+", "1", "]", "+", "' '", "+", "\n", "words", "[", "index", "+", "2", "]", "+", "' '", "+", "words", "[", "index", "+", "3", "]", ",", "4", ")", "\n", "", "", "if", "n", "==", "5", ":", "\n", "            ", "for", "index", ",", "item", "in", "enumerate", "(", "words", ")", ":", "\n", "                ", "if", "index", ">=", "len", "(", "words", ")", "-", "4", ":", "\n", "                    ", "break", "\n", "", "P", "+=", "self", ".", "probability", "(", "item", "+", "' '", "+", "words", "[", "index", "+", "1", "]", "+", "' '", "+", "words", "[", "index", "+", "2", "]", "+", "' '", "+", "words", "[", "index", "+", "3", "]", ",", "item", "+", "' '", "+", "\n", "words", "[", "index", "+", "1", "]", "+", "' '", "+", "words", "[", "index", "+", "2", "]", "+", "' '", "+", "words", "[", "index", "+", "3", "]", "+", "' '", "+", "words", "[", "index", "+", "4", "]", ",", "5", ")", "\n", "\n", "", "", "return", "P", "\n", "\n"]]}