{"home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.base_models.LSiM_Base.__init__": [[13, 42], ["super().__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LSiM_Base", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "[", "32", ",", "96", ",", "192", ",", "128", ",", "128", "]", "\n", "self", ".", "featureMapSize", "=", "[", "55", ",", "26", ",", "12", ",", "12", ",", "12", "]", "\n", "\n", "self", ".", "slice1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "12", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "4", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "96", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "4", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "96", ",", "192", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "192", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "self", ".", "layerList", "=", "[", "self", ".", "slice1", ",", "self", ".", "slice2", ",", "self", ".", "slice3", ",", "self", ".", "slice4", ",", "self", ".", "slice5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.base_models.LSiM_Base.forward": [[43, 59], ["base_models.LSiM_Base.slice1", "base_models.LSiM_Base.slice2", "base_models.LSiM_Base.slice3", "base_models.LSiM_Base.slice4", "base_models.LSiM_Base.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "\n", "outputs", "=", "namedtuple", "(", "\"LSiMBaseOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", "]", ")", "\n", "out", "=", "outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.base_models.LSiM_Skip.__init__": [[63, 104], ["super().__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LSiM_Skip", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "[", "32", ",", "64", ",", "128", ",", "128", ",", "64", ",", "64", ",", "32", ",", "32", "]", "\n", "self", ".", "featureMapSize", "=", "[", "55", ",", "26", ",", "12", ",", "12", ",", "12", ",", "26", ",", "55", ",", "55", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "12", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "4", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "4", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "conv4", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "deconv3", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "deconv2", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "128", "+", "64", ",", "64", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "deconv1", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "64", "+", "64", ",", "32", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "32", "+", "32", ",", "32", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "N_slices", "=", "8", "\n", "self", ".", "layerList", "=", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "conv3", ",", "self", ".", "conv4", ",", "self", ".", "deconv3", ",", "self", ".", "deconv2", ",", "self", ".", "deconv1", ",", "self", ".", "conv5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.base_models.LSiM_Skip.forward": [[106, 129], ["base_models.LSiM_Skip.conv1", "base_models.LSiM_Skip.conv2", "base_models.LSiM_Skip.conv3", "base_models.LSiM_Skip.conv4", "base_models.LSiM_Skip.deconv3", "base_models.LSiM_Skip.deconv2", "base_models.LSiM_Skip.deconv1", "base_models.LSiM_Skip.conv5", "collections.namedtuple", "collections.namedtuple.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "con1", "=", "self", ".", "conv1", "(", "X", ")", "\n", "#print(\"con1: \" + str(con1.shape))", "\n", "con2", "=", "self", ".", "conv2", "(", "con1", ")", "\n", "#print(\"con2: \" + str(con2.shape))", "\n", "con3", "=", "self", ".", "conv3", "(", "con2", ")", "\n", "#print(\"con3: \" + str(con3.shape))", "\n", "con4", "=", "self", ".", "conv4", "(", "con3", ")", "\n", "#print(\"con4: \" + str(con4.shape))", "\n", "\n", "dec3", "=", "self", ".", "deconv3", "(", "con4", ")", "\n", "#print(\"dec3: \" + str(dec3.shape) + \"\\t(con4)\")", "\n", "dec2", "=", "self", ".", "deconv2", "(", "torch", ".", "cat", "(", "(", "con3", ",", "dec3", ")", ",", "1", ")", ")", "\n", "#print(\"dec2: \" + str(dec2.shape) + \"\\t(con3+dec3)\")", "\n", "dec1", "=", "self", ".", "deconv1", "(", "torch", ".", "cat", "(", "(", "con2", ",", "dec2", ")", ",", "1", ")", ")", "\n", "#print(\"dec1: \" + str(dec1.shape) + \"\\t(con2+dec2)\")", "\n", "con5", "=", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "con1", ",", "dec1", ")", ",", "1", ")", ")", "\n", "#print(\"con5: \" + str(con5.shape) + \"\\t(con1+dec1)\\n\")", "\n", "\n", "outputs", "=", "namedtuple", "(", "\"LSiMSkipOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", ",", "'relu6'", ",", "'relu7'", ",", "'relu8'", "]", ")", "\n", "out", "=", "outputs", "(", "con1", ",", "con2", ",", "con3", ",", "con4", ",", "dec3", ",", "dec2", ",", "dec1", ",", "con5", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.base_models.Squeezenet.__init__": [[137, 166], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "torchvision.models.squeezenet1_1", "base_models.Squeezenet.slice1.add_module", "base_models.Squeezenet.slice2.add_module", "base_models.Squeezenet.slice3.add_module", "base_models.Squeezenet.slice4.add_module", "base_models.Squeezenet.slice5.add_module", "base_models.Squeezenet.slice6.add_module", "base_models.Squeezenet.slice7.add_module", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "Squeezenet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "squeeze_pretrained_features", "=", "models", ".", "squeezenet1_1", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "channels", "=", "[", "64", ",", "128", ",", "256", ",", "384", ",", "384", ",", "512", ",", "512", "]", "\n", "self", ".", "featureMapSize", "=", "[", "111", ",", "55", ",", "27", ",", "13", ",", "13", ",", "13", ",", "13", "]", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice6", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice7", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "7", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "squeeze_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "squeeze_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "squeeze_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "squeeze_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "11", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "squeeze_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "11", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice6", ".", "add_module", "(", "str", "(", "x", ")", ",", "squeeze_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "12", ",", "13", ")", ":", "\n", "            ", "self", ".", "slice7", ".", "add_module", "(", "str", "(", "x", ")", ",", "squeeze_pretrained_features", "[", "x", "]", ")", "\n", "\n", "", "self", ".", "layerList", "=", "[", "self", ".", "slice1", ",", "self", ".", "slice2", ",", "self", ".", "slice3", ",", "self", ".", "slice4", ",", "self", ".", "slice5", ",", "self", ".", "slice6", ",", "self", ".", "slice7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.base_models.Squeezenet.forward": [[168, 187], ["base_models.Squeezenet.slice1", "base_models.Squeezenet.slice2", "base_models.Squeezenet.slice3", "base_models.Squeezenet.slice4", "base_models.Squeezenet.slice5", "base_models.Squeezenet.slice6", "base_models.Squeezenet.slice7", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "h", "=", "self", ".", "slice6", "(", "h", ")", "\n", "h_relu6", "=", "h", "\n", "h", "=", "self", ".", "slice7", "(", "h", ")", "\n", "h_relu7", "=", "h", "\n", "outputs", "=", "namedtuple", "(", "\"SqueezeOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", ",", "'relu6'", ",", "'relu7'", "]", ")", "\n", "out", "=", "outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ",", "h_relu6", ",", "h_relu7", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.base_models.Alexnet.__init__": [[190, 213], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.alexnet", "base_models.Alexnet.slice1.add_module", "base_models.Alexnet.slice2.add_module", "base_models.Alexnet.slice3.add_module", "base_models.Alexnet.slice4.add_module", "base_models.Alexnet.slice5.add_module", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "Alexnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "alexnet_pretrained_features", "=", "models", ".", "alexnet", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "channels", "=", "[", "64", ",", "192", ",", "384", ",", "256", ",", "256", "]", "\n", "self", ".", "featureMapSize", "=", "[", "55", ",", "27", ",", "13", ",", "13", ",", "13", "]", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "2", ",", "5", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "5", ",", "8", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "8", ",", "10", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "10", ",", "12", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "alexnet_pretrained_features", "[", "x", "]", ")", "\n", "\n", "", "self", ".", "layerList", "=", "[", "self", ".", "slice1", ",", "self", ".", "slice2", ",", "self", ".", "slice3", ",", "self", ".", "slice4", ",", "self", ".", "slice5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.base_models.Alexnet.forward": [[214, 229], ["base_models.Alexnet.slice1", "base_models.Alexnet.slice2", "base_models.Alexnet.slice3", "base_models.Alexnet.slice4", "base_models.Alexnet.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5", "=", "h", "\n", "outputs", "=", "namedtuple", "(", "\"AlexnetOutputs\"", ",", "[", "'relu1'", ",", "'relu2'", ",", "'relu3'", ",", "'relu4'", ",", "'relu5'", "]", ")", "\n", "out", "=", "outputs", "(", "h_relu1", ",", "h_relu2", ",", "h_relu3", ",", "h_relu4", ",", "h_relu5", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.base_models.Vgg16.__init__": [[232, 255], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "torchvision.models.vgg16", "base_models.Vgg16.slice1.add_module", "base_models.Vgg16.slice2.add_module", "base_models.Vgg16.slice3.add_module", "base_models.Vgg16.slice4.add_module", "base_models.Vgg16.slice5.add_module", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "Vgg16", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg_pretrained_features", "=", "models", ".", "vgg16", "(", "pretrained", "=", "pretrained", ")", ".", "features", "\n", "self", ".", "channels", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", "]", "\n", "self", ".", "featureMapSize", "=", "[", "224", ",", "112", ",", "56", ",", "28", ",", "14", "]", "\n", "self", ".", "slice1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "slice5", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "N_slices", "=", "5", "\n", "for", "x", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "slice1", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "4", ",", "9", ")", ":", "\n", "            ", "self", ".", "slice2", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "9", ",", "16", ")", ":", "\n", "            ", "self", ".", "slice3", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "16", ",", "23", ")", ":", "\n", "            ", "self", ".", "slice4", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "23", ",", "30", ")", ":", "\n", "            ", "self", ".", "slice5", ".", "add_module", "(", "str", "(", "x", ")", ",", "vgg_pretrained_features", "[", "x", "]", ")", "\n", "\n", "", "self", ".", "layerList", "=", "[", "self", ".", "slice1", ",", "self", ".", "slice2", ",", "self", ".", "slice3", ",", "self", ".", "slice4", ",", "self", ".", "slice5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.base_models.Vgg16.forward": [[256, 271], ["base_models.Vgg16.slice1", "base_models.Vgg16.slice2", "base_models.Vgg16.slice3", "base_models.Vgg16.slice4", "base_models.Vgg16.slice5", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "h", "=", "self", ".", "slice1", "(", "X", ")", "\n", "h_relu1_2", "=", "h", "\n", "h", "=", "self", ".", "slice2", "(", "h", ")", "\n", "h_relu2_2", "=", "h", "\n", "h", "=", "self", ".", "slice3", "(", "h", ")", "\n", "h_relu3_3", "=", "h", "\n", "h", "=", "self", ".", "slice4", "(", "h", ")", "\n", "h_relu4_3", "=", "h", "\n", "h", "=", "self", ".", "slice5", "(", "h", ")", "\n", "h_relu5_3", "=", "h", "\n", "outputs", "=", "namedtuple", "(", "\"VggOutputs\"", ",", "[", "'relu1_2'", ",", "'relu2_2'", ",", "'relu3_3'", ",", "'relu4_3'", ",", "'relu5_3'", "]", ")", "\n", "out", "=", "outputs", "(", "h_relu1_2", ",", "h_relu2_2", ",", "h_relu3_3", ",", "h_relu4_3", ",", "h_relu5_3", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.base_models.DfpNet.__init__": [[280, 308], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "base_models.DfpNet.layer1.add_module", "base_models.DfpNet.blockUNet", "base_models.DfpNet.blockUNet", "base_models.DfpNet.blockUNet", "base_models.DfpNet.blockUNet", "base_models.DfpNet.blockUNet", "base_models.DfpNet.blockUNet", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "dict", "base_models.DfpNet.load_state_dict", "base_models.DfpNet.apply", "torch.load.pop", "torch.load.pop", "torch.load.pop"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.__init__", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.blockUNet", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.blockUNet", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.blockUNet", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.blockUNet", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.blockUNet", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.blockUNet", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", "=", "True", ",", "channelExponent", "=", "6", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", "DfpNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "[", "64", ",", "128", ",", "128", ",", "256", ",", "512", ",", "512", ",", "512", "]", "\n", "self", ".", "featureMapSize", "=", "[", "112", ",", "58", ",", "28", ",", "14", ",", "7", ",", "3", ",", "1", "]", "\n", "\n", "chn", "=", "int", "(", "2", "**", "channelExponent", "+", "0.5", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "layer1", ".", "add_module", "(", "'layer1_conv'", ",", "nn", ".", "Conv2d", "(", "3", ",", "chn", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", ")", "\n", "\n", "self", ".", "layer2", "=", "self", ".", "blockUNet", "(", "chn", ",", "chn", "*", "2", ",", "'layer2'", ",", "transposed", "=", "False", ",", "bn", "=", "True", ",", "relu", "=", "False", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "layer2x", "=", "self", ".", "blockUNet", "(", "chn", "*", "2", ",", "chn", "*", "2", ",", "'layer2x'", ",", "transposed", "=", "False", ",", "bn", "=", "True", ",", "relu", "=", "False", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "layer3", "=", "self", ".", "blockUNet", "(", "chn", "*", "2", ",", "chn", "*", "4", ",", "'layer3'", ",", "transposed", "=", "False", ",", "bn", "=", "True", ",", "relu", "=", "False", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "layer4", "=", "self", ".", "blockUNet", "(", "chn", "*", "4", ",", "chn", "*", "8", ",", "'layer4'", ",", "transposed", "=", "False", ",", "bn", "=", "True", ",", "relu", "=", "False", ",", "dropout", "=", "dropout", ",", "size", "=", "2", ",", "pad", "=", "0", ")", "\n", "self", ".", "layer5", "=", "self", ".", "blockUNet", "(", "chn", "*", "8", ",", "chn", "*", "8", ",", "'layer5'", ",", "transposed", "=", "False", ",", "bn", "=", "True", ",", "relu", "=", "False", ",", "dropout", "=", "dropout", ",", "size", "=", "2", ",", "pad", "=", "0", ")", "\n", "self", ".", "layer6", "=", "self", ".", "blockUNet", "(", "chn", "*", "8", ",", "chn", "*", "8", ",", "'layer6'", ",", "transposed", "=", "False", ",", "bn", "=", "False", ",", "relu", "=", "False", ",", "dropout", "=", "dropout", ",", "size", "=", "2", ",", "pad", "=", "0", ")", "\n", "self", ".", "N_slices", "=", "7", "\n", "\n", "if", "pretrained", ":", "\n", "            ", "pretrained_dict", "=", "torch", ".", "load", "(", "\"../Models/Base/DfpNet_modelGa\"", ")", "\n", "temp", "=", "dict", "(", "pretrained_dict", ")", "\n", "for", "key", "in", "temp", ":", "\n", "                ", "if", "'dlayer'", "in", "key", ":", "\n", "                    ", "pretrained_dict", ".", "pop", "(", "key", ")", "\n", "", "", "self", ".", "load_state_dict", "(", "pretrained_dict", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "apply", "(", "self", ".", "weights_init", ")", "\n", "\n", "", "self", ".", "layerList", "=", "[", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer2x", ",", "self", ".", "layer3", ",", "self", ".", "layer4", ",", "self", ".", "layer5", ",", "self", ".", "layer6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.base_models.DfpNet.blockUNet": [[309, 325], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d"], "methods", ["None"], ["", "def", "blockUNet", "(", "self", ",", "in_c", ",", "out_c", ",", "name", ",", "transposed", "=", "False", ",", "bn", "=", "True", ",", "relu", "=", "True", ",", "size", "=", "4", ",", "pad", "=", "1", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "block", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "relu", ":", "\n", "            ", "block", ".", "add_module", "(", "'%s_relu'", "%", "name", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "block", ".", "add_module", "(", "'%s_leakyrelu'", "%", "name", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "", "if", "not", "transposed", ":", "\n", "            ", "block", ".", "add_module", "(", "'%s_conv'", "%", "name", ",", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", ",", "kernel_size", "=", "size", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "bias", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "            ", "block", ".", "add_module", "(", "'%s_upsam'", "%", "name", ",", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ")", "\n", "block", ".", "add_module", "(", "'%s_tconv'", "%", "name", ",", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", ",", "kernel_size", "=", "(", "size", "-", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "bias", "=", "True", ")", ")", "\n", "", "if", "bn", ":", "\n", "            ", "block", ".", "add_module", "(", "'%s_bn'", "%", "name", ",", "nn", ".", "BatchNorm2d", "(", "out_c", ")", ")", "\n", "", "if", "dropout", ">", "0.", ":", "\n", "            ", "block", ".", "add_module", "(", "'%s_dropout'", "%", "name", ",", "nn", ".", "Dropout2d", "(", "dropout", ",", "inplace", "=", "True", ")", ")", "\n", "", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.base_models.DfpNet.weights_init": [[326, 333], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "methods", ["None"], ["", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.base_models.DfpNet.forward": [[334, 353], ["base_models.DfpNet.layer1", "base_models.DfpNet.layer2", "base_models.DfpNet.layer2x", "base_models.DfpNet.layer3", "base_models.DfpNet.layer4", "base_models.DfpNet.layer5", "base_models.DfpNet.layer6", "collections.namedtuple", "collections.namedtuple."], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "layer1", "(", "x", ")", "\n", "h_block1", "=", "h", "\n", "h", "=", "self", ".", "layer2", "(", "h", ")", "\n", "h_block2", "=", "h", "\n", "h", "=", "self", ".", "layer2x", "(", "h", ")", "\n", "h_block2x", "=", "h", "\n", "h", "=", "self", ".", "layer3", "(", "h", ")", "\n", "h_block3", "=", "h", "\n", "h", "=", "self", ".", "layer4", "(", "h", ")", "\n", "h_block4", "=", "h", "\n", "h", "=", "self", ".", "layer5", "(", "h", ")", "\n", "h_block5", "=", "h", "\n", "h", "=", "self", ".", "layer6", "(", "h", ")", "\n", "h_block6", "=", "h", "\n", "outputs", "=", "namedtuple", "(", "\"DfpNetOutputs\"", ",", "[", "'block1'", ",", "'block2'", ",", "'block2x'", ",", "'block3'", ",", "'block4'", ",", "'block5'", ",", "'block6'", "]", ")", "\n", "out", "=", "outputs", "(", "h_block1", ",", "h_block2", ",", "h_block2x", ",", "h_block3", ",", "h_block4", ",", "h_block5", ",", "h_block6", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.TurbNetD.__init__": [[55, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch", "=", "64", ")", ":", "# 1-\u5b9a\u4e49\u67b6\u6784", "\n", "        ", "super", "(", "TurbNetD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c0", "=", "nn", ".", "Conv2d", "(", "3", ",", "ch", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "self", ".", "c1", "=", "nn", ".", "Conv2d", "(", "ch", ",", "ch", "*", "2", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "self", ".", "c2", "=", "nn", ".", "Conv2d", "(", "ch", "*", "2", ",", "ch", "*", "4", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "self", ".", "c3", "=", "nn", ".", "Conv2d", "(", "ch", "*", "4", ",", "ch", "*", "8", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "self", ".", "c4", "=", "nn", ".", "Conv2d", "(", "ch", "*", "8", ",", "ch", "*", "16", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", "\n", "self", ".", "c5", "=", "nn", ".", "Conv2d", "(", "ch", "*", "16", ",", "1", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "\n", "self", ".", "bnc1", "=", "nn", ".", "BatchNorm2d", "(", "ch", "*", "2", ")", "\n", "self", ".", "bnc2", "=", "nn", ".", "BatchNorm2d", "(", "ch", "*", "4", ")", "\n", "self", ".", "bnc3", "=", "nn", ".", "BatchNorm2d", "(", "ch", "*", "8", ")", "\n", "self", ".", "bnc4", "=", "nn", ".", "BatchNorm2d", "(", "ch", "*", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.TurbNetD.forward": [[71, 80], ["base_models.DfpNet.TurbNetD.c0", "base_models.DfpNet.TurbNetD.bnc1", "base_models.DfpNet.TurbNetD.bnc2", "base_models.DfpNet.TurbNetD.bnc3", "base_models.DfpNet.TurbNetD.bnc4", "base_models.DfpNet.TurbNetD.c5", "base_models.DfpNet.TurbNetD.c1", "base_models.DfpNet.TurbNetD.c2", "base_models.DfpNet.TurbNetD.c3", "base_models.DfpNet.TurbNetD.c4", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "c0", "(", "x", ")", "\n", "h", "=", "self", ".", "bnc1", "(", "self", ".", "c1", "(", "F", ".", "leaky_relu", "(", "h", ",", "negative_slope", "=", "0.2", ")", ")", ")", "\n", "h", "=", "self", ".", "bnc2", "(", "self", ".", "c2", "(", "F", ".", "leaky_relu", "(", "h", ",", "negative_slope", "=", "0.2", ")", ")", ")", "\n", "h", "=", "self", ".", "bnc3", "(", "self", ".", "c3", "(", "F", ".", "leaky_relu", "(", "h", ",", "negative_slope", "=", "0.2", ")", ")", ")", "\n", "h", "=", "self", ".", "bnc4", "(", "self", ".", "c4", "(", "F", ".", "leaky_relu", "(", "h", ",", "negative_slope", "=", "0.2", ")", ")", ")", "\n", "h", "=", "self", ".", "c5", "(", "F", ".", "leaky_relu", "(", "h", ",", "negative_slope", "=", "0.2", ")", ")", "\n", "# h = F.sigmoid(h)", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceNS.__init__": [[84, 127], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "base_models.DfpNet.DistanceNS.cuda", "base_models.DfpNet.DistanceNS.train", "base_models.DfpNet.DistanceNS.eval"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.__init__", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.Trainer.train"], ["    ", "def", "__init__", "(", "self", ",", "initBase", "=", "\"none\"", ",", "isTrain", "=", "False", ",", "useGPU", "=", "False", ")", ":", "\n", "        ", "super", "(", "DistanceNS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "useGPU", "=", "useGPU", "\n", "self", ".", "isTrain", "=", "isTrain", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "12", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "MaxPool2d", "(", "4", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "96", ",", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "MaxPool2d", "(", "4", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "96", ",", "192", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "192", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "6", ",", "6", ")", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", "*", "6", "*", "6", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "1", ")", ",", "\n", ")", "\n", "\n", "# GPU and evaluation mode setup", "\n", "if", "self", ".", "useGPU", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceNS.forward": [[128, 138], ["base_models.DfpNet.DistanceNS.features", "feat.view.view.view", "base_models.DfpNet.DistanceNS.classifier", "input.cuda.cuda.cuda", "feat.view.view.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input", "=", "x", "\n", "\n", "if", "self", ".", "useGPU", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "\n", "", "feat", "=", "self", ".", "features", "(", "input", ")", "\n", "feat", "=", "feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "128", "*", "6", "*", "6", ")", "\n", "result", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.__init__": [[140, 225], ["torch.Module.__init__", "range", "base_models.DfpNet.DistanceModel.linearLayer", "base_models.DfpNet.DistanceModel.linearLayer", "base_models.DfpNet.DistanceModel.linearLayer", "base_models.DfpNet.DistanceModel.linearLayer", "base_models.DfpNet.DistanceModel.linearLayer", "base_models.Alexnet", "base_models.DfpNet.DistanceModel.linearLayer", "base_models.DfpNet.DistanceModel.linearLayer", "base_models.DfpNet.DistanceModel.cuda", "base_models.DfpNet.DistanceModel.train", "base_models.DfpNet.DistanceModel.eval", "base_models.Vgg16", "base_models.DfpNet.DistanceModel.linearLayer", "base_models.DfpNet.DistanceModel.apply", "isinstance", "len", "base_models.DfpNet.DistanceModel.basenet.layerList[].parameters", "base_models.Squeezenet", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "base_models.DfpNet.DistanceModel.apply", "layer.weight.data.fill_", "base_models.DfpNet", "base_models.DfpNet.DistanceModel.apply", "base_models.LSiM_Base", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "base_models.DfpNet.DistanceModel.apply", "ValueError", "base_models.LSiM_Skip", "ValueError"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.__init__", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.linearLayer", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.linearLayer", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.linearLayer", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.linearLayer", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.linearLayer", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.linearLayer", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.linearLayer", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.Trainer.train", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.linearLayer"], ["    ", "def", "__init__", "(", "self", ",", "baseType", "=", "\"\"", ",", "initBase", "=", "\"pretrained\"", ",", "initLin", "=", "0.25", ",", "featureDistance", "=", "\"L1\"", ",", "\n", "frozenLayers", "=", "[", "]", ",", "normMode", "=", "\"normUnit\"", ",", "useNormUpdate", "=", "False", ",", "isTrain", "=", "False", ",", "useGPU", "=", "False", ")", ":", "\n", "        ", "super", "(", "DistanceModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "useGPU", "=", "useGPU", "\n", "self", ".", "useDropout", "=", "True", "\n", "self", ".", "featureDistance", "=", "featureDistance", "\n", "self", ".", "normMode", "=", "normMode", "\n", "self", ".", "useNormUpdate", "=", "useNormUpdate", "\n", "self", ".", "isTrain", "=", "isTrain", "\n", "\n", "# create base model and feature map weights (lin)", "\n", "if", "baseType", "==", "\"alex\"", ":", "\n", "            ", "self", ".", "basenet", "=", "Alexnet", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "baseType", "==", "\"vgg\"", ":", "\n", "            ", "self", ".", "basenet", "=", "Vgg16", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "baseType", "==", "\"squeeze\"", ":", "\n", "            ", "self", ".", "basenet", "=", "Squeezenet", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "baseType", "==", "\"dfp\"", ":", "\n", "            ", "self", ".", "basenet", "=", "DfpNet", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "baseType", "==", "\"lsim\"", ":", "\n", "            ", "self", ".", "basenet", "=", "LSiM_Base", "(", ")", "\n", "", "elif", "baseType", "==", "\"lsimSkip\"", ":", "\n", "            ", "self", ".", "basenet", "=", "LSiM_Skip", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown base network type.'", ")", "\n", "\n", "", "self", ".", "normAcc", "=", "[", "]", "\n", "self", ".", "normM2", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "basenet", ".", "N_slices", ")", ":", "\n", "            ", "if", "self", ".", "useGPU", ":", "\n", "                ", "self", ".", "normAcc", "+=", "[", "torch", ".", "tensor", "(", "[", "0.0", "]", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "]", "\n", "self", ".", "normM2", "+=", "[", "torch", ".", "tensor", "(", "[", "0.0", "]", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "normAcc", "+=", "[", "torch", ".", "tensor", "(", "[", "0.0", "]", ",", "requires_grad", "=", "False", ")", "]", "\n", "self", ".", "normM2", "+=", "[", "torch", ".", "tensor", "(", "[", "0.0", "]", ",", "requires_grad", "=", "False", ")", "]", "\n", "", "", "self", ".", "normCount", "=", "[", "0", "]", "*", "self", ".", "basenet", ".", "N_slices", "\n", "\n", "self", ".", "lin0", "=", "self", ".", "linearLayer", "(", "self", ".", "basenet", ".", "channels", "[", "0", "]", ",", "self", ".", "basenet", ".", "featureMapSize", "[", "0", "]", ")", "\n", "self", ".", "lin1", "=", "self", ".", "linearLayer", "(", "self", ".", "basenet", ".", "channels", "[", "1", "]", ",", "self", ".", "basenet", ".", "featureMapSize", "[", "1", "]", ")", "\n", "self", ".", "lin2", "=", "self", ".", "linearLayer", "(", "self", ".", "basenet", ".", "channels", "[", "2", "]", ",", "self", ".", "basenet", ".", "featureMapSize", "[", "2", "]", ")", "\n", "self", ".", "lin3", "=", "self", ".", "linearLayer", "(", "self", ".", "basenet", ".", "channels", "[", "3", "]", ",", "self", ".", "basenet", ".", "featureMapSize", "[", "3", "]", ")", "\n", "self", ".", "lin4", "=", "self", ".", "linearLayer", "(", "self", ".", "basenet", ".", "channels", "[", "4", "]", ",", "self", ".", "basenet", ".", "featureMapSize", "[", "4", "]", ")", "\n", "self", ".", "linear", "=", "[", "self", ".", "lin0", ",", "self", ".", "lin1", ",", "self", ".", "lin2", ",", "self", ".", "lin3", ",", "self", ".", "lin4", "]", "\n", "if", "baseType", "in", "[", "\"squeeze\"", ",", "\"dfp\"", ",", "\"lsimSkip\"", "]", ":", "\n", "            ", "self", ".", "lin5", "=", "self", ".", "linearLayer", "(", "self", ".", "basenet", ".", "channels", "[", "5", "]", ",", "self", ".", "basenet", ".", "featureMapSize", "[", "5", "]", ")", "\n", "self", ".", "lin6", "=", "self", ".", "linearLayer", "(", "self", ".", "basenet", ".", "channels", "[", "6", "]", ",", "self", ".", "basenet", ".", "featureMapSize", "[", "6", "]", ")", "\n", "self", ".", "linear", "=", "self", ".", "linear", "+", "[", "self", ".", "lin5", ",", "self", ".", "lin6", "]", "\n", "if", "baseType", "==", "\"lsimSkip\"", ":", "\n", "                ", "self", ".", "lin7", "=", "self", ".", "linearLayer", "(", "self", ".", "basenet", ".", "channels", "[", "7", "]", ",", "self", ".", "basenet", ".", "featureMapSize", "[", "7", "]", ")", "\n", "self", ".", "linear", "=", "self", ".", "linear", "+", "[", "self", ".", "lin7", "]", "\n", "\n", "# override pretrained initialization if required", "\n", "", "", "if", "initBase", "==", "\"pretrained\"", ":", "\n", "            ", "pass", "\n", "", "elif", "initBase", "==", "\"randomSmall\"", ":", "\n", "            ", "self", ".", "apply", "(", "self", ".", "initializeRandomSmall", ")", "\n", "", "elif", "initBase", "==", "\"randomLarge\"", ":", "\n", "            ", "self", ".", "apply", "(", "self", ".", "initializeRandomLarge", ")", "\n", "", "elif", "initBase", "==", "\"xavier\"", ":", "\n", "            ", "self", ".", "apply", "(", "self", ".", "initializeXavier", ")", "\n", "", "elif", "initBase", "==", "\"layerwiseMean\"", ":", "\n", "            ", "self", ".", "apply", "(", "self", ".", "initializeLayerwiseMean", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown initialization.\"", ")", "\n", "\n", "# initialize feature map weights", "\n", "", "for", "linLayer", "in", "self", ".", "linear", ":", "\n", "            ", "for", "layer", "in", "linLayer", ":", "\n", "                ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "layer", ".", "weight", ".", "data", ".", "fill_", "(", "initLin", ")", "\n", "\n", "# freeze layers of basenet", "\n", "", "", "", "for", "i", "in", "frozenLayers", ":", "\n", "            ", "if", "i", "<", "len", "(", "self", ".", "basenet", ".", "layerList", ")", ":", "\n", "                ", "for", "param", "in", "self", ".", "basenet", ".", "layerList", "[", "i", "]", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "# GPU and evaluation mode setup", "\n", "", "", "", "if", "self", ".", "useGPU", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.forward": [[227, 264], ["base_models.DfpNet.DistanceModel.clampWeights", "base_models.DfpNet.DistanceModel.basenet.forward", "range", "input1.cuda.cuda.cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "base_models.DfpNet.DistanceModel.normalizeTensor", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "result.cuda.cuda.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "ValueError", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.clampWeights", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.forward", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.normalizeTensor"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input1", "=", "x", "\n", "\n", "if", "self", ".", "useGPU", ":", "\n", "            ", "input1", "=", "input1", ".", "cuda", "(", ")", "\n", "\n", "\n", "\n", "", "self", ".", "clampWeights", "(", ")", "\n", "\n", "outBase1", "=", "self", ".", "basenet", ".", "forward", "(", "input1", ")", "\n", "\n", "\n", "result", "=", "torch", ".", "tensor", "(", "[", "[", "0.0", "]", "]", ")", ".", "cuda", "(", ")", "if", "self", ".", "useGPU", "else", "torch", ".", "tensor", "(", "[", "[", "0.0", "]", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "outBase1", ")", ")", ":", "\n", "            ", "updateNorm", "=", "self", ".", "isTrain", "and", "self", ".", "useNormUpdate", "\n", "normalized1", "=", "self", ".", "normalizeTensor", "(", "outBase1", "[", "i", "]", ",", "i", ",", "updateAcc", "=", "updateNorm", ")", "\n", "\n", "\n", "if", "self", ".", "featureDistance", "==", "\"L1\"", ":", "\n", "                ", "diff", "=", "torch", ".", "abs", "(", "normalized1", ")", "\n", "", "elif", "self", ".", "featureDistance", "==", "\"L2\"", ":", "\n", "                ", "diff", "=", "(", "normalized1", ")", "**", "2", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown feature distance.'", ")", "\n", "\n", "", "weightedDiff", "=", "self", ".", "linear", "[", "i", "]", "(", "diff", ")", "\n", "if", "self", ".", "useGPU", ":", "\n", "                ", "result", "=", "result", ".", "cuda", "(", ")", "\n", "", "result", "=", "result", "+", "torch", ".", "mean", "(", "torch", ".", "mean", "(", "weightedDiff", ",", "dim", "=", "3", ")", ",", "dim", "=", "2", ")", "\n", "del", "weightedDiff", "\n", "\n", "", "if", "self", ".", "featureDistance", "==", "\"L2\"", ":", "\n", "            ", "result", "=", "torch", ".", "sqrt", "(", "result", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.clampWeights": [[268, 273], ["isinstance", "isinstance", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "clampWeights", "(", "self", ")", ":", "\n", "        ", "for", "linLayer", "in", "self", ".", "linear", ":", "\n", "            ", "for", "layer", "in", "linLayer", ":", "\n", "                ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "layer", ".", "weight", ".", "data", "=", "torch", ".", "clamp", "(", "layer", ".", "weight", ".", "data", ",", "min", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.linearLayer": [[276, 288], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "", "", "", "def", "linearLayer", "(", "self", ",", "channelsIn", ",", "featureMapSize", ")", ":", "\n", "        ", "if", "self", ".", "useDropout", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channelsIn", ",", "1", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "return", "layer", "\n", "", "else", ":", "\n", "            ", "layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channelsIn", ",", "1", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.initializeRandomSmall": [[290, 299], ["m.weight.data.normal_", "classname.find", "classname.find", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "initializeRandomSmall", "(", "self", ",", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.01", ")", "\n", "if", "not", "m", ".", "bias", "is", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.initializeRandomLarge": [[300, 309], ["m.weight.data.normal_", "classname.find", "classname.find", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "initializeRandomLarge", "(", "self", ",", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "1.0", ")", "\n", "if", "not", "m", ".", "bias", "is", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.initializeXavier": [[310, 319], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "classname.find", "classname.find", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "initializeXavier", "(", "self", ",", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "not", "m", ".", "bias", "is", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.01", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.initializeLayerwiseMean": [[320, 326], ["m.weight.data.normal_", "classname.find", "classname.find", "classname.find", "m.weight.data.mean", "m.weight.data.std", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "initializeLayerwiseMean", "(", "self", ",", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "m", ".", "weight", ".", "data", ".", "mean", "(", ")", ",", "m", ".", "weight", ".", "data", ".", "std", "(", ")", ")", "\n", "if", "not", "m", ".", "bias", "is", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.updateNorm": [[329, 345], ["base_models.DfpNet.DistanceModel.clampWeights", "base_models.DfpNet.DistanceModel.basenet.forward", "range", "input1.cuda.cuda.cuda", "len", "base_models.DfpNet.DistanceModel.normalizeTensor"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.clampWeights", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.forward", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.normalizeTensor"], ["", "", "", "def", "updateNorm", "(", "self", ",", "sample", ")", ":", "\n", "        ", "input1", "=", "sample", "\n", "\n", "\n", "if", "self", ".", "useGPU", ":", "\n", "            ", "input1", "=", "input1", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "self", ".", "clampWeights", "(", ")", "\n", "\n", "outBase1", "=", "self", ".", "basenet", ".", "forward", "(", "input1", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "outBase1", ")", ")", ":", "\n", "#print(outBase1[i].shape)", "\n", "            ", "normalized1", "=", "self", ".", "normalizeTensor", "(", "outBase1", "[", "i", "]", ",", "i", ",", "updateAcc", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.normalizeTensor": [[349, 413], ["tensorIn.size", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt.view", "torch.sqrt.view", "torch.sqrt.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "normMax.view.view.view", "torch.sqrt.expand_as", "torch.sqrt.expand_as", "torch.sqrt.expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "normAvg.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "normMax.view.view.expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "normAvg.view.view.expand_as", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "mean.view.view.view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "std.view.view.view", "base_models.DfpNet.DistanceModel.normAcc[].detach", "mean.view.view.view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "std.view.view.view", "ValueError", "base_models.DfpNet.DistanceModel.normAcc[].detach().expand_as", "base_models.DfpNet.DistanceModel.normAcc[].detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "base_models.DfpNet.DistanceModel.normM2[].detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.Upsample.", "torch.Upsample.", "mean.view.view.expand_as", "std.view.view.expand_as", "math.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "base_models.DfpNet.DistanceModel.normM2[].detach", "base_models.DfpNet.DistanceModel.normAcc[].detach", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "base_models.DfpNet.DistanceModel.normAcc[].detach", "base_models.DfpNet.DistanceModel.normM2[].detach", "base_models.DfpNet.DistanceModel.normAcc[].detach().expand_as", "base_models.DfpNet.DistanceModel.normAcc[].detach"], "methods", ["None"], ["", "", "def", "normalizeTensor", "(", "self", ",", "tensorIn", ",", "layer", ",", "epsilon", "=", "1e-10", ",", "updateAcc", "=", "False", ")", ":", "\n", "        ", "size", "=", "tensorIn", ".", "size", "(", ")", "\n", "\n", "# unit normalize tensor", "\n", "if", "self", ".", "normMode", "==", "\"normUnit\"", ":", "\n", "            ", "norm", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "tensorIn", "**", "2", ",", "dim", "=", "1", ")", ")", "\n", "norm", "=", "norm", ".", "view", "(", "size", "[", "0", "]", ",", "1", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "return", "tensorIn", "/", "(", "norm", ".", "expand_as", "(", "tensorIn", ")", "+", "epsilon", ")", "\n", "\n", "# normalize by max over all samples of all batches", "\n", "", "elif", "self", ".", "normMode", "==", "\"normMax\"", ":", "\n", "            ", "if", "updateAcc", ":", "\n", "                ", "norm", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "tensorIn", "**", "2", ",", "dim", "=", "1", ")", ")", "\n", "temp", "=", "torch", ".", "max", "(", "norm", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "self", ".", "normAcc", "[", "layer", "]", "=", "torch", ".", "max", "(", "self", ".", "normAcc", "[", "layer", "]", ",", "temp", ")", "\n", "", "normMax", "=", "self", ".", "normAcc", "[", "layer", "]", "\n", "normMax", "=", "normMax", ".", "view", "(", "1", ",", "1", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "return", "tensorIn", "/", "(", "normMax", ".", "expand_as", "(", "tensorIn", ")", "+", "epsilon", ")", "\n", "\n", "# normalize by avg over all samples of all batches", "\n", "", "elif", "self", ".", "normMode", "==", "\"normAvg\"", ":", "\n", "            ", "if", "updateAcc", ":", "\n", "                ", "norm", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "tensorIn", "**", "2", ",", "dim", "=", "1", ")", ")", "\n", "temp", "=", "torch", ".", "sum", "(", "norm", ",", "dim", "=", "0", ")", "\n", "self", ".", "normAcc", "[", "layer", "]", "=", "(", "self", ".", "normAcc", "[", "layer", "]", "+", "temp", ")", "\n", "self", ".", "normCount", "[", "layer", "]", "=", "self", ".", "normCount", "[", "layer", "]", "+", "size", "[", "0", "]", "\n", "", "normAvg", "=", "self", ".", "normAcc", "[", "layer", "]", "/", "self", ".", "normCount", "[", "layer", "]", "\n", "normAvg", "=", "normAvg", ".", "view", "(", "1", ",", "1", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "return", "tensorIn", "/", "(", "normAvg", ".", "expand_as", "(", "tensorIn", ")", "+", "epsilon", ")", "\n", "\n", "# create normal distribution for each feature map component by subtracting mean and dividing by the std. dev.", "\n", "# over all samples of all batches", "\n", "", "elif", "self", ".", "normMode", "==", "\"normDist\"", ":", "\n", "            ", "if", "updateAcc", ":", "\n", "                ", "self", ".", "normCount", "[", "layer", "]", "=", "self", ".", "normCount", "[", "layer", "]", "+", "size", "[", "0", "]", "\n", "delta", "=", "tensorIn", "-", "self", ".", "normAcc", "[", "layer", "]", ".", "detach", "(", ")", ".", "expand_as", "(", "tensorIn", ")", "\n", "self", ".", "normAcc", "[", "layer", "]", "=", "self", ".", "normAcc", "[", "layer", "]", ".", "detach", "(", ")", "+", "torch", ".", "sum", "(", "torch", ".", "mean", "(", "delta", "/", "self", ".", "normCount", "[", "layer", "]", ",", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", "\n", "self", ".", "normM2", "[", "layer", "]", "=", "self", ".", "normM2", "[", "layer", "]", ".", "detach", "(", ")", "+", "torch", ".", "sum", "(", "torch", ".", "mean", "(", "delta", "*", "(", "tensorIn", "-", "self", ".", "normAcc", "[", "layer", "]", ".", "detach", "(", ")", ".", "expand_as", "(", "tensorIn", ")", ")", ",", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# rescale norm accumulators for differently sized inputs", "\n", "", "if", "size", "[", "2", "]", "!=", "self", ".", "normAcc", "[", "layer", "]", ".", "shape", "[", "0", "]", "or", "size", "[", "3", "]", "!=", "self", ".", "normAcc", "[", "layer", "]", ".", "shape", "[", "1", "]", ":", "\n", "                ", "up", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "normAcc", "=", "torch", ".", "squeeze", "(", "up", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "self", ".", "normAcc", "[", "layer", "]", ".", "detach", "(", ")", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", ")", ")", "\n", "normM2", "=", "torch", ".", "squeeze", "(", "up", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "self", ".", "normM2", "[", "layer", "]", ".", "detach", "(", ")", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", ")", ")", "\n", "\n", "mean", "=", "normAcc", "\n", "mean", "=", "mean", ".", "view", "(", "1", ",", "1", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "std", "=", "torch", ".", "sqrt", "(", "normM2", "/", "(", "self", ".", "normCount", "[", "layer", "]", "-", "1", ")", ")", "\n", "std", "=", "std", ".", "view", "(", "1", ",", "1", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "# directly use norm accumulators for input size 224x224", "\n", "", "else", ":", "\n", "                ", "mean", "=", "self", ".", "normAcc", "[", "layer", "]", ".", "detach", "(", ")", "\n", "mean", "=", "mean", ".", "view", "(", "1", ",", "1", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "std", "=", "torch", ".", "sqrt", "(", "self", ".", "normM2", "[", "layer", "]", ".", "detach", "(", ")", "/", "(", "self", ".", "normCount", "[", "layer", "]", "-", "1", ")", ")", "\n", "std", "=", "std", ".", "view", "(", "1", ",", "1", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "", "normalized", "=", "(", "tensorIn", "-", "mean", ".", "expand_as", "(", "tensorIn", ")", ")", "/", "(", "std", ".", "expand_as", "(", "tensorIn", ")", "+", "epsilon", ")", "\n", "normalized", "=", "normalized", "/", "(", "math", ".", "sqrt", "(", "size", "[", "1", "]", ")", "-", "1", ")", "\n", "return", "normalized", "\n", "\n", "# no normalization", "\n", "", "elif", "self", ".", "normMode", "==", "\"normNone\"", ":", "\n", "            ", "return", "tensorIn", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown norm mode.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.printNumParams": [[414, 418], ["filter", "sum", "print", "base_models.DfpNet.DistanceModel.parameters", "numpy.prod", "p.size"], "methods", ["None"], ["", "", "def", "printNumParams", "(", "self", ")", ":", "\n", "        ", "parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "parameters", "]", ")", "\n", "print", "(", "\"Trainable parameters: %d\"", "%", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save": [[420, 434], ["print", "os.path.isfile", "ValueError", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "base_models.DfpNet.DistanceModel.state_dict", "base_models.DfpNet.DistanceModel.state_dict"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save"], ["", "def", "save", "(", "self", ",", "path", ",", "override", "=", "False", ",", "noPrint", "=", "False", ")", ":", "\n", "        ", "if", "not", "noPrint", ":", "\n", "            ", "print", "(", "'Saving model to %s'", "%", "path", ")", "\n", "", "if", "not", "override", "and", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Override warning!\"", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "normMode", "!=", "\"normUnit\"", ":", "\n", "                ", "saveDict", "=", "{", "'stateDict'", ":", "self", ".", "state_dict", "(", ")", ",", "\n", "'normAcc'", ":", "self", ".", "normAcc", ",", "\n", "'normM2'", ":", "self", ".", "normM2", ",", "\n", "'normCount'", ":", "self", ".", "normCount", ",", "}", "\n", "torch", ".", "save", "(", "saveDict", ",", "path", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "state_dict", "(", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load": [[437, 456], ["base_models.DfpNet.DistanceModel.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "base_models.DfpNet.DistanceModel.load_state_dict", "print", "base_models.DfpNet.DistanceModel.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load"], ["", "", "", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "if", "self", ".", "normMode", "!=", "\"normUnit\"", ":", "\n", "            ", "if", "self", ".", "useGPU", ":", "\n", "                ", "print", "(", "'Loading model from %s'", "%", "path", ")", "\n", "loaded", "=", "torch", ".", "load", "(", "path", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'CPU - Loading model from %s'", "%", "path", ")", "\n", "loaded", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "", "self", ".", "load_state_dict", "(", "loaded", "[", "'stateDict'", "]", ")", "\n", "self", ".", "normAcc", "=", "loaded", "[", "'normAcc'", "]", "\n", "self", ".", "normM2", "=", "loaded", "[", "'normM2'", "]", "\n", "self", ".", "normCount", "=", "loaded", "[", "'normCount'", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "useGPU", ":", "\n", "                ", "print", "(", "'Loading model from %s'", "%", "path", ")", "\n", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'CPU - Loading model from %s'", "%", "path", ")", "\n", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.weights_init": [[18, 25], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.blockUNet": [[26, 51], ["torch.Sequential", "nn.Sequential.add_module", "nn.Sequential.add_module", "nn.Sequential.add_module", "nn.Sequential.add_module", "nn.Sequential.add_module", "nn.Sequential.add_module", "nn.Sequential.add_module", "torch.ReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Upsample", "torch.Conv2d", "torch.BatchNorm2d", "torch.Dropout2d"], "function", ["None"], ["", "", "def", "blockUNet", "(", "in_c", ",", "out_c", ",", "name", ",", "transposed", "=", "False", ",", "bn", "=", "True", ",", "relu", "=", "True", ",", "size", "=", "4", ",", "pad", "=", "1", ",", "dropout", "=", "0.", ")", ":", "\n", "\n", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "if", "relu", ":", "\n", "        ", "block", ".", "add_module", "(", "'%s_relu'", "%", "name", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "block", ".", "add_module", "(", "'%s_leakyrelu'", "%", "name", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "\n", "", "if", "not", "transposed", ":", "\n", "        ", "block", ".", "add_module", "(", "'%s_conv'", "%", "name", ",", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", ",", "kernel_size", "=", "size", ",", "stride", "=", "2", ",", "padding", "=", "pad", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "block", ".", "add_module", "(", "'%s_upsam'", "%", "name", ",", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ")", "\n", "block", ".", "add_module", "(", "'%s_tconv'", "%", "name", ",", "nn", ".", "Conv2d", "(", "in_c", ",", "out_c", ",", "kernel_size", "=", "(", "size", "-", "1", ")", ",", "stride", "=", "1", ",", "padding", "=", "pad", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "if", "bn", ":", "\n", "        ", "block", ".", "add_module", "(", "'%s_bn'", "%", "name", ",", "nn", ".", "BatchNorm2d", "(", "out_c", ")", ")", "\n", "\n", "", "if", "dropout", ">", "0.", ":", "\n", "        ", "block", ".", "add_module", "(", "'%s_dropout'", "%", "name", ",", "nn", ".", "Dropout2d", "(", "dropout", ",", "inplace", "=", "True", ")", ")", "\n", "", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.TurbDataset.__init__": [[133, 142], ["dataset.imageLoader_train"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.imageLoader_train"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "\n", "# load & normalize data", "\n", "        ", "dataDir", "=", "\".\\inputs\\Train Data\"", "\n", "self", "=", "imageLoader_train", "(", "self", ",", "dataDir", ")", "\n", "self", ".", "inputs", "=", "self", ".", "train", "\n", "self", ".", "output", "=", "self", ".", "win", "\n", "self", ".", "totalLength", "=", "self", ".", "totalLength", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.TurbDataset.__len__": [[143, 145], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "totalLength", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.TurbDataset.__getitem__": [[146, 148], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "train", "[", "idx", "]", ",", "self", ".", "win", "[", "idx", "]", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.ValiDataset.__init__": [[160, 164], ["dataset.imageLoader_vali"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.imageLoader_vali"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "dataDir", "=", "\".\\inputs\\Validation Data\"", "\n", "self", "=", "imageLoader_vali", "(", "self", ",", "dataDir", ")", "\n", "self", ".", "totalLength", "=", "self", ".", "totalLength", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.ValiDataset.__len__": [[165, 167], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "totalLength", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.ValiDataset.__getitem__": [[168, 170], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "out", "[", "idx", "]", ",", "self", ".", "scores", "[", "idx", "]", ",", "self", ".", "filenames", "[", "idx", "]", ",", "self", ".", "foldername", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.TestDataset.__init__": [[172, 176], ["dataset.imageLoader_vali"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.imageLoader_vali"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "dataDir", "=", "\".\\inputs\\Test Data\"", "\n", "self", "=", "imageLoader_vali", "(", "self", ",", "dataDir", ")", "\n", "self", ".", "totalLength", "=", "self", ".", "totalLength", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.TestDataset.__len__": [[177, 179], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "totalLength", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.TestDataset.__getitem__": [[180, 182], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "out", "[", "idx", "]", ",", "self", ".", "scores", "[", "idx", "]", ",", "self", ".", "filenames", "[", "idx", "]", ",", "self", ".", "foldername", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.CNN_Dataset.__init__": [[186, 195], ["dataset.imageLoader_train"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.imageLoader_train"], ["    ", "def", "__init__", "(", "self", ",", "dataDir", ")", ":", "\n", "\n", "\n", "# load & normalize data", "\n", "#dataDir = \"./inputs/Train Data\"", "\n", "        ", "self", "=", "imageLoader_train", "(", "self", ",", "dataDir", ")", "\n", "self", ".", "inputs", "=", "self", ".", "train", "\n", "self", ".", "output", "=", "self", ".", "win", "\n", "self", ".", "totalLength", "=", "self", ".", "totalLength", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.CNN_Dataset.__len__": [[196, 198], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "totalLength", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.CNN_Dataset.__getitem__": [[199, 201], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "train", "[", "idx", "]", ",", "self", ".", "win", "[", "idx", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.imageLoader_AVA": [[15, 26], ["click.echo", "NIMA.nima.clean_dataset.clean_and_split", "click.echo"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.clean_dataset.clean_and_split"], ["def", "imageLoader_AVA", "(", "path_images", ")", ":", "\n", "    ", "numworkers", "=", "12", "\n", "click", ".", "echo", "(", "f\"Clean and split dataset to train|val|test in {numworkers} threads. It will takes several minutes\"", ")", "\n", "clean_and_split", "(", "\n", "path_to_ava_txt", "=", "\"./images/AVA.txt\"", ",", "\n", "path_to_save_csv", "=", "\"./images\"", ",", "\n", "path_to_images", "=", "path_images", ",", "\n", "train_size", "=", "0.8", ",", "\n", "num_workers", "=", "numworkers", ",", "\n", ")", "\n", "click", ".", "echo", "(", "\"Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.imageLoader_train": [[27, 76], ["os.listdir", "os.listdir.sort", "torch.as_tensor", "torch.as_tensor", "enumerate", "len", "matplotlib.imshow", "matplotlib.show", "os.listdir", "enumerate", "range", "imgs_plot.cpu", "len", "range", "cv2.imread", "numpy.transpose", "torch.from_numpy().float", "torch.from_numpy().float", "torch.unsqueeze", "torch.unsqueeze", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "data.imgs.append", "re.findall", "data.score.append", "data.file.append", "len", "float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "data.win.append", "data.filename.append", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "imageLoader_train", "(", "data", ",", "dataDir", ")", ":", "\n", "    ", "folders", "=", "os", ".", "listdir", "(", "dataDir", ")", "\n", "folders", ".", "sort", "(", ")", "\n", "data", ".", "win", "=", "[", "]", "\n", "data", ".", "filename", "=", "[", "]", "\n", "data", ".", "train", "=", "[", "]", "\n", "data", ".", "train", "=", "torch", ".", "as_tensor", "(", "data", ".", "train", ")", "\n", "\n", "for", "i", ",", "folder", "in", "enumerate", "(", "folders", ")", ":", "\n", "        ", "filelist", "=", "os", ".", "listdir", "(", "dataDir", "+", "\"/\"", "+", "folder", ")", "\n", "data", ".", "imgs", "=", "[", "]", "\n", "data", ".", "score", "=", "[", "]", "\n", "data", ".", "file", "=", "[", "]", "\n", "\n", "for", "j", ",", "file", "in", "enumerate", "(", "filelist", ")", ":", "\n", "            ", "if", "file", "!=", "\"0.jpg\"", ":", "\n", "                ", "npfile", "=", "cv2", ".", "imread", "(", "dataDir", "+", "\"/\"", "+", "folder", "+", "\"/\"", "+", "file", ")", "\n", "npfile", "=", "np", ".", "transpose", "(", "npfile", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "data", ".", "imgs_tensor", "=", "torch", ".", "from_numpy", "(", "npfile", ")", ".", "float", "(", ")", "\n", "data", ".", "imgs_tensor", "=", "torch", ".", "unsqueeze", "(", "data", ".", "imgs_tensor", ",", "0", ")", "\n", "data", ".", "imgs_small", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "data", ".", "imgs_tensor", ",", "size", "=", "(", "224", ",", "224", ")", ",", "scale_factor", "=", "None", ",", "\n", "mode", "=", "'nearest'", ",", "align_corners", "=", "None", ")", "\n", "data", ".", "imgs", ".", "append", "(", "data", ".", "imgs_small", ")", "\n", "string", "=", "re", ".", "findall", "(", "\"\\d+\\.\\d+\"", ",", "file", ")", "\n", "for", "item", "in", "string", ":", "\n", "                    ", "score", "=", "float", "(", "item", ")", "\n", "", "data", ".", "score", ".", "append", "(", "score", ")", "\n", "data", ".", "file", ".", "append", "(", "file", ")", "\n", "", "", "for", "k", "in", "range", "(", "len", "(", "data", ".", "imgs", ")", ")", ":", "\n", "            ", "for", "l", "in", "range", "(", "len", "(", "data", ".", "imgs", ")", ")", ":", "\n", "                ", "if", "k", "!=", "l", ":", "\n", "                    ", "batch", "=", "torch", ".", "cat", "(", "[", "data", ".", "imgs", "[", "k", "]", ",", "data", ".", "imgs", "[", "l", "]", "]", ",", "1", ")", "\n", "data", ".", "train", "=", "torch", ".", "cat", "(", "[", "data", ".", "train", ",", "batch", "]", ",", "0", ")", "\n", "data", ".", "win", ".", "append", "(", "data", ".", "score", "[", "k", "]", "/", "(", "data", ".", "score", "[", "k", "]", "+", "data", ".", "score", "[", "l", "]", ")", ")", "\n", "data", ".", "filename", ".", "append", "(", "[", "data", ".", "file", "[", "k", "]", ",", "data", ".", "file", "[", "l", "]", "]", ")", "\n", "\n", "", "", "", "", "data", ".", "totalLength", "=", "len", "(", "data", ".", "train", ")", "\n", "# data.totalLength = totalLength", "\n", "# find a picture to plot as the experimental reference", "\n", "imgs_plot", "=", "data", ".", "imgs", "[", "0", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", "\n", "# plt.imshow(imgs_plot.cpu(), cmap='Greys_r')", "\n", "plt", ".", "imshow", "(", "imgs_plot", ".", "cpu", "(", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "\n", "\n", "# print(\"=====================Finished===========================\")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.dataset.imageLoader_vali": [[80, 127], ["os.listdir", "os.listdir.sort", "enumerate", "len", "os.listdir", "torch.as_tensor", "torch.as_tensor", "enumerate", "data.out.append", "data.scores.append", "data.filenames.append", "cv2.imread", "numpy.transpose", "torch.from_numpy().float", "torch.from_numpy().float", "torch.unsqueeze", "torch.unsqueeze", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "re.findall", "data.score.append", "torch.cat", "torch.cat", "data.filename.append", "float", "torch.from_numpy", "torch.from_numpy", "file.split"], "function", ["None"], ["", "def", "imageLoader_vali", "(", "data", ",", "dataDir", ")", ":", "\n", "    ", "folders", "=", "os", ".", "listdir", "(", "dataDir", ")", "\n", "folders", ".", "sort", "(", ")", "\n", "data", ".", "out", "=", "[", "]", "\n", "data", ".", "scores", "=", "[", "]", "\n", "data", ".", "filenames", "=", "[", "]", "\n", "data", ".", "foldername", "=", "folders", "\n", "\n", "for", "i", ",", "folder", "in", "enumerate", "(", "folders", ")", ":", "\n", "        ", "filelist", "=", "os", ".", "listdir", "(", "dataDir", "+", "\"/\"", "+", "folder", ")", "\n", "data", ".", "score", "=", "[", "]", "\n", "data", ".", "filename", "=", "[", "]", "\n", "data", ".", "train", "=", "[", "]", "\n", "data", ".", "train", "=", "torch", ".", "as_tensor", "(", "data", ".", "train", ")", "\n", "\n", "for", "j", ",", "file", "in", "enumerate", "(", "filelist", ")", ":", "\n", "            ", "if", "file", "!=", "\"0.jpg\"", ":", "\n", "                ", "npfile", "=", "cv2", ".", "imread", "(", "dataDir", "+", "\"/\"", "+", "folder", "+", "\"/\"", "+", "file", ")", "\n", "npfile", "=", "np", ".", "transpose", "(", "npfile", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "data", ".", "imgs_tensor", "=", "torch", ".", "from_numpy", "(", "npfile", ")", ".", "float", "(", ")", "\n", "data", ".", "imgs_tensor", "=", "torch", ".", "unsqueeze", "(", "data", ".", "imgs_tensor", ",", "0", ")", "\n", "data", ".", "imgs_small", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "data", ".", "imgs_tensor", ",", "size", "=", "(", "224", ",", "224", ")", ",", "scale_factor", "=", "None", ",", "\n", "mode", "=", "'nearest'", ",", "align_corners", "=", "None", ")", "\n", "string", "=", "re", ".", "findall", "(", "\"\\d+\\.\\d+\"", ",", "file", ")", "\n", "for", "item", "in", "string", ":", "\n", "                    ", "score", "=", "float", "(", "item", ")", "\n", "", "data", ".", "score", ".", "append", "(", "score", ")", "\n", "\n", "\n", "data", ".", "train", "=", "torch", ".", "cat", "(", "[", "data", ".", "train", ",", "data", ".", "imgs_small", "]", ",", "0", ")", "\n", "file_name", "=", "'image_'", "+", "file", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "data", ".", "filename", ".", "append", "(", "file_name", ")", "\n", "\n", "\n", "", "", "data", ".", "out", ".", "append", "(", "data", ".", "train", ")", "\n", "data", ".", "scores", ".", "append", "(", "data", ".", "score", ")", "\n", "data", ".", "filenames", ".", "append", "(", "data", ".", "filename", ")", "\n", "\n", "", "data", ".", "totalLength", "=", "len", "(", "data", ".", "out", ")", "\n", "# data.totalLength = totalLength", "\n", "# find a picture to plot as the experimental reference", "\n", "\n", "\n", "\n", "# print(\"=====================Finished===========================\")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.utils.log": [[35, 40], ["open", "open.write", "open.close", "print"], "function", ["None"], ["", "def", "log", "(", "file", ",", "line", ",", "doPrint", "=", "True", ")", ":", "\n", "    ", "f", "=", "open", "(", "file", ",", "\"a+\"", ")", "\n", "f", ".", "write", "(", "line", "+", "\"\\n\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "if", "doPrint", ":", "print", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.utils.resetLog": [[42, 45], ["open", "open.close"], "function", ["None"], ["", "def", "resetLog", "(", "file", ")", ":", "\n", "    ", "f", "=", "open", "(", "file", ",", "\"w\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.utils.computeLR": [[47, 57], ["math.pow", "float"], "function", ["None"], ["", "def", "computeLR", "(", "i", ",", "epochs", ",", "minLR", ",", "maxLR", ")", ":", "\n", "    ", "if", "i", "<", "epochs", "*", "0.5", ":", "\n", "        ", "return", "maxLR", "\n", "", "e", "=", "(", "i", "/", "float", "(", "epochs", ")", "-", "0.5", ")", "*", "2.", "\n", "# rescale second half to min/max range", "\n", "fmin", "=", "0.", "\n", "fmax", "=", "6.", "\n", "e", "=", "fmin", "+", "e", "*", "(", "fmax", "-", "fmin", ")", "\n", "f", "=", "math", ".", "pow", "(", "0.5", ",", "e", ")", "\n", "return", "minLR", "+", "(", "maxLR", "-", "minLR", ")", "*", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.utils.autolabel": [[58, 62], ["rect.get_height", "matplotlib.text", "rect.get_x", "rect.get_width"], "function", ["None"], ["", "def", "autolabel", "(", "rects", ")", ":", "\n", "    ", "for", "rect", "in", "rects", ":", "\n", "        ", "height", "=", "rect", ".", "get_height", "(", ")", "\n", "plt", ".", "text", "(", "rect", ".", "get_x", "(", ")", "-", "rect", ".", "get_width", "(", ")", "/", "6.", ",", "1.03", "*", "height", ",", "'{:.3f}'", ".", "format", "(", "height", ")", ",", "size", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.utils.image_vali": [[64, 91], ["numpy.arange", "matplotlib.bar", "utils.autolabel", "matplotlib.bar", "utils.autolabel", "matplotlib.legend", "matplotlib.xticks", "matplotlib.ylabel", "matplotlib.title", "matplotlib.savefig", "matplotlib.cla", "matplotlib.close", "len", "format", "format"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.utils.autolabel", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.utils.autolabel"], ["", "", "def", "image_vali", "(", "epoch", ",", "i", ",", "scores_vali", ",", "pred_score", ",", "photoname_vali", ",", "foldername", ",", "corr_pearson", ",", "corr_spearman", ",", "error_vali", ")", ":", "\n", "\n", "# plt.rcParams['font.sans-serif'] = ['SimHei']", "\n", "# plt.rcParams['axes.unicode_minus'] = False", "\n", "\n", "\n", "    ", "bar_width", "=", "0.3", "\n", "index_survey", "=", "np", ".", "arange", "(", "len", "(", "scores_vali", ")", ")", "\n", "index_pred", "=", "index_survey", "+", "bar_width", "\n", "\n", "rect1", "=", "plt", ".", "bar", "(", "index_survey", ",", "height", "=", "scores_vali", ",", "width", "=", "bar_width", ",", "color", "=", "'b'", ",", "label", "=", "'survey'", ")", "\n", "autolabel", "(", "rect1", ")", "\n", "rect2", "=", "plt", ".", "bar", "(", "index_pred", ",", "height", "=", "pred_score", ",", "width", "=", "bar_width", ",", "color", "=", "'g'", ",", "label", "=", "'prediction by CNN'", ")", "\n", "autolabel", "(", "rect2", ")", "\n", "\n", "\n", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "xticks", "(", "index_survey", "+", "bar_width", "/", "2", ",", "photoname_vali", ")", "\n", "plt", ".", "ylabel", "(", "'Winning probability'", ")", "\n", "plt", ".", "title", "(", "foldername", "+", "': Comparison between survey and prediction\\nThe Pearson\u00b4s correlation is {:.2}\\nThe Spearman\u00b4s correlation is {:.2}\\nThe relative error is {:.2%}'", ".", "format", "(", "corr_pearson", ",", "corr_spearman", ",", "error_vali", ")", ")", "\n", "\n", "\n", "\n", "plt", ".", "savefig", "(", "'./result_train/result_validation'", "+", "format", "(", "epoch", ")", "+", "'_'", "+", "format", "(", "i", ")", "+", "'.png'", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.utils.image_test": [[93, 117], ["numpy.arange", "matplotlib.bar", "utils.autolabel", "matplotlib.bar", "utils.autolabel", "matplotlib.legend", "matplotlib.xticks", "matplotlib.ylabel", "matplotlib.title", "matplotlib.savefig", "matplotlib.cla", "matplotlib.close", "len", "format", "format"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.utils.autolabel", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.utils.autolabel"], ["", "def", "image_test", "(", "epoch", ",", "i", ",", "scores_vali", ",", "pred_score", ",", "photoname_vali", ",", "foldername", ",", "corr_pearson", ",", "corr_spearman", ",", "error_test", ")", ":", "\n", "# plt.rcParams['font.sans-serif'] = ['SimHei']", "\n", "# plt.rcParams['axes.unicode_minus'] = False", "\n", "\n", "    ", "bar_width", "=", "0.3", "\n", "index_survey", "=", "np", ".", "arange", "(", "len", "(", "scores_vali", ")", ")", "\n", "index_pred", "=", "index_survey", "+", "bar_width", "\n", "\n", "\n", "rect1", "=", "plt", ".", "bar", "(", "index_survey", ",", "height", "=", "scores_vali", ",", "width", "=", "bar_width", ",", "color", "=", "'b'", ",", "label", "=", "'survey'", ")", "\n", "autolabel", "(", "rect1", ")", "\n", "rect2", "=", "plt", ".", "bar", "(", "index_pred", ",", "height", "=", "pred_score", ",", "width", "=", "bar_width", ",", "color", "=", "'g'", ",", "label", "=", "'prediction by CNN'", ")", "\n", "autolabel", "(", "rect2", ")", "\n", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "xticks", "(", "index_survey", "+", "bar_width", "/", "2", ",", "\n", "photoname_vali", ")", "\n", "plt", ".", "ylabel", "(", "'Winning probability'", ")", "\n", "plt", ".", "title", "(", "foldername", "+", "': Comparison between survey and prediction\\nThe Pearson\u00b4s correlation is {:.2}\\nThe Spearman\u00b4s correlation is {:.2}\\n The relative error is {:.2%}'", ".", "format", "(", "corr_pearson", ",", "corr_spearman", ",", "error_test", ")", ")", "\n", "\n", "\n", "plt", ".", "savefig", "(", "'./result_train/result_test'", "+", "format", "(", "epoch", ")", "+", "'_'", "+", "format", "(", "i", ")", "+", "'.png'", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.utils.readProportions": [[119, 131], ["input", "input.split", "float", "print", "print"], "function", ["None"], ["", "def", "readProportions", "(", ")", ":", "\n", "    ", "flag", "=", "True", "\n", "while", "flag", ":", "\n", "        ", "input_proportions", "=", "input", "(", "\"Enter total numer for training files and proportions for training (normal, superimposed, sheared respectively) seperated by a comma such that they add up to 1: \"", ")", "\n", "input_p", "=", "input_proportions", ".", "split", "(", "\",\"", ")", "\n", "prop", "=", "[", "float", "(", "x", ")", "for", "x", "in", "input_p", "]", "\n", "if", "prop", "[", "1", "]", "+", "prop", "[", "2", "]", "+", "prop", "[", "3", "]", "==", "1", ":", "\n", "            ", "flag", "=", "False", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"\\n\\nError: poportions don't sum to 1\"", ")", "\n", "print", "(", "\"##################################\\n\"", ")", "\n", "", "", "return", "(", "prop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.utils.makeDirs": [[133, 137], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "makeDirs", "(", "directoryList", ")", ":", "\n", "    ", "for", "directory", "in", "directoryList", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.cli.init_logging": [[13, 15], ["logging.basicConfig"], "function", ["None"], ["def", "init_logging", "(", ")", "->", "None", ":", "\n", "    ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ",", "format", "=", "\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.cli.cli": [[17, 20], ["click.group", "cli.prepare_dataset", "cli.train_model", "cli.validate_model", "cli.get_image_score", "cli.run_web_api"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.cli.prepare_dataset", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.Trainer.train_model", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.cli.validate_model", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.cli.get_image_score", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.cli.run_web_api"], ["", "@", "click", ".", "group", "(", ")", "\n", "def", "cli", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.cli.prepare_dataset": [[22, 40], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.echo", "nima.clean_dataset.clean_and_split", "click.echo"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.clean_dataset.clean_and_split"], ["", "@", "click", ".", "command", "(", "\"prepare-dataset\"", ",", "short_help", "=", "\"Parse, clean and split dataset\"", ")", "\n", "@", "click", ".", "option", "(", "\"--path_to_ava_txt\"", ",", "help", "=", "\"origin AVA.txt file\"", ",", "required", "=", "True", ",", "type", "=", "Path", ")", "\n", "@", "click", ".", "option", "(", "\"--path_to_save_csv\"", ",", "help", "=", "\"where save train.csv|val.csv|test.csv\"", ",", "required", "=", "True", ",", "type", "=", "Path", ")", "\n", "@", "click", ".", "option", "(", "\"--path_to_images\"", ",", "help", "=", "\"images directory\"", ",", "required", "=", "True", ",", "type", "=", "Path", ")", "\n", "@", "click", ".", "option", "(", "\"--train_size\"", ",", "help", "=", "\"train dataset size\"", ",", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "\"--num_workers\"", ",", "help", "=", "\"num workers for parallel processing\"", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "def", "prepare_dataset", "(", "\n", "path_to_ava_txt", ":", "Path", ",", "path_to_save_csv", ":", "Path", ",", "path_to_images", ":", "Path", ",", "train_size", ":", "float", ",", "num_workers", ":", "int", "\n", ")", ":", "\n", "    ", "click", ".", "echo", "(", "f\"Clean and split dataset to train|val|test in {num_workers} threads. It will takes several minutes\"", ")", "\n", "clean_and_split", "(", "\n", "path_to_ava_txt", "=", "path_to_ava_txt", ",", "\n", "path_to_save_csv", "=", "path_to_save_csv", ",", "\n", "path_to_images", "=", "path_to_images", ",", "\n", "train_size", "=", "train_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "click", ".", "echo", "(", "\"Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.cli.train_model": [[42, 83], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "click.echo", "nima.common.set_up_seed", "nima.trainer.Trainer", "nima.trainer.Trainer.train_model", "click.echo"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.set_up_seed", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.Trainer.train_model"], ["", "@", "click", ".", "command", "(", "\"train-model\"", ",", "short_help", "=", "\"Train model\"", ")", "\n", "@", "click", ".", "option", "(", "\"--path_to_save_csv\"", ",", "help", "=", "\"where save train.csv|val.csv|test.csv\"", ",", "required", "=", "True", ",", "type", "=", "Path", ")", "\n", "@", "click", ".", "option", "(", "\"--path_to_images\"", ",", "help", "=", "\"images directory\"", ",", "required", "=", "True", ",", "type", "=", "Path", ")", "\n", "@", "click", ".", "option", "(", "\"--experiment_dir\"", ",", "help", "=", "\"directory name to save all logs and weight\"", ",", "required", "=", "True", ",", "type", "=", "Path", ")", "\n", "@", "click", ".", "option", "(", "\"--model_type\"", ",", "help", "=", "\"res net model type\"", ",", "default", "=", "\"resnet18\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--batch_size\"", ",", "help", "=", "\"batch size\"", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--num_workers\"", ",", "help", "=", "\"number of reading workers\"", ",", "default", "=", "16", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--num_epoch\"", ",", "help", "=", "\"number of epoch\"", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--init_lr\"", ",", "help", "=", "\"initial learning rate\"", ",", "default", "=", "0.0001", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "\"--drop_out\"", ",", "help", "=", "\"drop out\"", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "@", "click", ".", "option", "(", "\"--optimizer_type\"", ",", "help", "=", "\"optimizer type\"", ",", "default", "=", "\"adam\"", ",", "type", "=", "str", ")", "\n", "@", "click", ".", "option", "(", "\"--seed\"", ",", "help", "=", "\"random seed\"", ",", "default", "=", "42", ",", "type", "=", "int", ")", "\n", "def", "train_model", "(", "\n", "path_to_save_csv", ":", "Path", ",", "\n", "path_to_images", ":", "Path", ",", "\n", "experiment_dir", ":", "Path", ",", "\n", "model_type", ":", "str", ",", "\n", "batch_size", ":", "int", ",", "\n", "num_workers", ":", "int", ",", "\n", "num_epoch", ":", "int", ",", "\n", "init_lr", ":", "float", ",", "\n", "drop_out", ":", "float", ",", "\n", "optimizer_type", ":", "str", ",", "\n", "seed", ":", "int", ",", "\n", ")", ":", "\n", "    ", "click", ".", "echo", "(", "\"Train and validate model\"", ")", "\n", "set_up_seed", "(", "seed", ")", "\n", "trainer", "=", "Trainer", "(", "\n", "path_to_save_csv", "=", "path_to_save_csv", ",", "\n", "path_to_images", "=", "path_to_images", ",", "\n", "experiment_dir", "=", "experiment_dir", ",", "\n", "model_type", "=", "model_type", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "num_epoch", "=", "num_epoch", ",", "\n", "init_lr", "=", "init_lr", ",", "\n", "drop_out", "=", "drop_out", ",", "\n", "optimizer_type", "=", "optimizer_type", ",", "\n", ")", "\n", "trainer", ".", "train_model", "(", ")", "\n", "click", ".", "echo", "(", "\"Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.cli.get_image_score": [[85, 92], ["click.command", "click.option", "click.option", "nima.inference_model.InferenceModel", "nima.inference_model.InferenceModel.predict_from_file", "click.echo"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.inference_model.InferenceModel.predict_from_file"], ["", "@", "click", ".", "command", "(", "\"get-image-score\"", ",", "short_help", "=", "\"Get image scores\"", ")", "\n", "@", "click", ".", "option", "(", "\"--path_to_model_state\"", ",", "help", "=", "\"path to model weight .pth file\"", ",", "required", "=", "True", ",", "type", "=", "Path", ")", "\n", "@", "click", ".", "option", "(", "\"--path_to_image\"", ",", "help", "=", "\"image \"", ",", "required", "=", "True", ",", "type", "=", "Path", ")", "\n", "def", "get_image_score", "(", "path_to_model_state", ",", "path_to_image", ")", ":", "\n", "    ", "model", "=", "InferenceModel", "(", "path_to_model_state", "=", "path_to_model_state", ")", "\n", "result", "=", "model", ".", "predict_from_file", "(", "path_to_image", ")", "\n", "click", ".", "echo", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.cli.validate_model": [[94, 111], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "click.option", "nima.trainer.validate_and_test", "click.echo"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.validate_and_test"], ["", "@", "click", ".", "command", "(", "\"validate-model\"", ",", "short_help", "=", "\"Validate model\"", ")", "\n", "@", "click", ".", "option", "(", "\"--path_to_model_state\"", ",", "help", "=", "\"path to model weight .pth file\"", ",", "required", "=", "True", ",", "type", "=", "Path", ")", "\n", "@", "click", ".", "option", "(", "\"--path_to_save_csv\"", ",", "help", "=", "\"where save train.csv|val.csv|test.csv\"", ",", "required", "=", "True", ",", "type", "=", "Path", ")", "\n", "@", "click", ".", "option", "(", "\"--path_to_images\"", ",", "help", "=", "\"images directory\"", ",", "required", "=", "True", ",", "type", "=", "Path", ")", "\n", "@", "click", ".", "option", "(", "\"--batch_size\"", ",", "help", "=", "\"batch size\"", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--num_workers\"", ",", "help", "=", "\"number of reading workers\"", ",", "default", "=", "16", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--drop_out\"", ",", "help", "=", "\"drop out\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "def", "validate_model", "(", "path_to_model_state", ",", "path_to_save_csv", ",", "path_to_images", ",", "batch_size", ",", "num_workers", ",", "drop_out", ")", ":", "\n", "    ", "validate_and_test", "(", "\n", "path_to_model_state", "=", "path_to_model_state", ",", "\n", "path_to_save_csv", "=", "path_to_save_csv", ",", "\n", "path_to_images", "=", "path_to_images", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "drop_out", "=", "drop_out", ",", "\n", ")", "\n", "click", ".", "echo", "(", "\"Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.cli.run_web_api": [[113, 119], ["click.command", "click.option", "click.option", "click.option", "nima.api.run_api"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.api.run_api"], ["", "@", "click", ".", "command", "(", "\"run-web-api\"", ",", "short_help", "=", "\"Start server for model serving\"", ")", "\n", "@", "click", ".", "option", "(", "\"--path_to_model_state\"", ",", "help", "=", "\"path to model weight .pth file\"", ",", "required", "=", "True", ",", "type", "=", "Path", ")", "\n", "@", "click", ".", "option", "(", "\"--port\"", ",", "help", "=", "\"port for web app\"", ",", "default", "=", "8080", ",", "type", "=", "int", ")", "\n", "@", "click", ".", "option", "(", "\"--host\"", ",", "help", "=", "\"host for web app\"", ",", "default", "=", "\"0.0.0.0\"", ",", "type", "=", "str", ")", "\n", "def", "run_web_api", "(", "path_to_model_state", ":", "Path", ",", "port", ":", "int", ",", "host", ":", "str", ")", ":", "\n", "    ", "run_api", "(", "path_to_model_state", "=", "path_to_model_state", ",", "port", "=", "port", ",", "host", "=", "host", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.cli.main": [[121, 129], ["cli.init_logging", "cli.add_command", "cli.add_command", "cli.add_command", "cli.add_command", "cli.add_command", "cli.cli"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.cli.init_logging", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.cli.cli"], ["", "def", "main", "(", ")", ":", "\n", "    ", "init_logging", "(", ")", "\n", "cli", ".", "add_command", "(", "prepare_dataset", ")", "\n", "cli", ".", "add_command", "(", "train_model", ")", "\n", "cli", ".", "add_command", "(", "validate_model", ")", "\n", "cli", ".", "add_command", "(", "get_image_score", ")", "\n", "cli", ".", "add_command", "(", "run_web_api", ")", "\n", "cli", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.worker.warm": [[18, 25], ["logger.info", "nima.inference_model.InferenceModel", "logger.info"], "function", ["None"], ["def", "warm", "(", "path_to_model_state", ":", "Path", ")", "->", "None", ":", "\n", "    ", "logger", ".", "info", "(", "f\"warm model\"", ")", "\n", "global", "_model", "\n", "if", "_model", "is", "None", ":", "\n", "# load model", "\n", "        ", "_model", "=", "InferenceModel", "(", "path_to_model_state", "=", "path_to_model_state", ")", "\n", "logger", ".", "info", "(", "f\"created model {_model}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.worker.clean": [[27, 30], ["None"], "function", ["None"], ["", "", "def", "clean", "(", ")", "->", "None", ":", "\n", "    ", "global", "_model", "\n", "_model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.worker.predict": [[32, 40], ["model.predict_from_pil_image", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.inference_model.InferenceModel.predict_from_pil_image"], ["", "def", "predict", "(", "image", ":", "Image", ".", "Image", ",", "model", ":", "Optional", "[", "InferenceModel", "]", "=", "None", ")", ":", "\n", "    ", "if", "model", "is", "None", ":", "\n", "        ", "model", "=", "_model", "\n", "\n", "", "if", "model", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Model should be loaded first\"", ")", "\n", "", "result", "=", "model", ".", "predict_from_pil_image", "(", "image", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.Transform.__init__": [[17, 31], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "IMAGE_NET_MEAN", ",", "std", "=", "IMAGE_NET_STD", ")", "\n", "\n", "self", ".", "_train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "_val_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.Transform.train_transform": [[32, 35], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "train_transform", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_train_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.Transform.val_transform": [[36, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "val_transform", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_val_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.AverageMeter.__init__": [[55, 57], ["common.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.AverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.AverageMeter.reset": [[58, 63], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.AverageMeter.update": [[64, 69], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.get_mean_score": [[41, 45], ["numpy.arange"], "function", ["None"], ["", "", "def", "get_mean_score", "(", "score", ")", ":", "\n", "    ", "buckets", "=", "np", ".", "arange", "(", "1", ",", "11", ")", "\n", "mu", "=", "(", "buckets", "*", "score", ")", ".", "sum", "(", ")", "\n", "return", "mu", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.get_std_score": [[47, 52], ["numpy.arange", "common.get_mean_score", "numpy.sqrt", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.get_mean_score"], ["", "def", "get_std_score", "(", "scores", ")", ":", "\n", "    ", "si", "=", "np", ".", "arange", "(", "1", ",", "11", ")", "\n", "mean", "=", "get_mean_score", "(", "scores", ")", "\n", "std", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "(", "si", "-", "mean", ")", "**", "2", ")", "*", "scores", ")", ")", "\n", "return", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.set_up_seed": [[71, 76], ["torch.manual_seed", "numpy.random.seed"], "function", ["None"], ["", "", "def", "set_up_seed", "(", "seed", "=", "42", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.format_output": [[78, 80], ["float", "float", "float"], "function", ["None"], ["", "def", "format_output", "(", "mean_score", ",", "std_score", ",", "prob", ")", ":", "\n", "    ", "return", "{", "\"mean_score\"", ":", "float", "(", "mean_score", ")", ",", "\"std_score\"", ":", "float", "(", "std_score", ")", ",", "\"scores\"", ":", "[", "float", "(", "x", ")", "for", "x", "in", "prob", "]", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.inference_model.InferenceModel.__init__": [[16, 23], ["torch.load", "nima.model.create_model", "inference_model.InferenceModel.model.load_state_dict", "inference_model.InferenceModel.model.to", "inference_model.InferenceModel.model.eval", "nima.common.Transform"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.create_model"], ["    ", "def", "__init__", "(", "self", ",", "path_to_model_state", ":", "Path", ")", ":", "\n", "        ", "self", ".", "transform", "=", "Transform", "(", ")", ".", "val_transform", "\n", "model_state", "=", "torch", ".", "load", "(", "path_to_model_state", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "model", "=", "create_model", "(", "model_type", "=", "model_state", "[", "\"model_type\"", "]", ",", "drop_out", "=", "0", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "model_state", "[", "\"state_dict\"", "]", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.inference_model.InferenceModel.predict_from_file": [[24, 27], ["torchvision.datasets.folder.default_loader", "inference_model.InferenceModel.predict"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.inference_model.InferenceModel.predict"], ["", "def", "predict_from_file", "(", "self", ",", "image_path", ":", "Path", ")", ":", "\n", "        ", "image", "=", "default_loader", "(", "image_path", ")", "\n", "return", "self", ".", "predict", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.inference_model.InferenceModel.predict_from_pil_image": [[28, 31], ["image.convert.convert.convert", "inference_model.InferenceModel.predict"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.inference_model.InferenceModel.predict"], ["", "def", "predict_from_pil_image", "(", "self", ",", "image", ":", "Image", ")", ":", "\n", "        ", "image", "=", "image", ".", "convert", "(", "\"RGB\"", ")", "\n", "return", "self", ".", "predict", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.inference_model.InferenceModel.predict": [[32, 43], ["torch.no_grad", "inference_model.InferenceModel.transform", "image.to.to.unsqueeze_", "image.to.to.to", "nima.common.get_mean_score", "nima.common.get_std_score", "nima.common.format_output", "inference_model.InferenceModel.model().data.cpu().numpy", "inference_model.InferenceModel.model().data.cpu", "inference_model.InferenceModel.model"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.get_mean_score", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.get_std_score", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.format_output"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "predict", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "image", "=", "image", ".", "unsqueeze_", "(", "0", ")", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "prob", "=", "self", ".", "model", "(", "image", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n", "mean_score", "=", "get_mean_score", "(", "prob", ")", "\n", "std_score", "=", "get_std_score", "(", "prob", ")", "\n", "\n", "return", "format_output", "(", "mean_score", ",", "std_score", ",", "prob", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.Trainer.__init__": [[89, 132], ["trainer.get_dataloaders", "torch.device", "torch.device", "torch.device", "torch.device", "nima.model.create_model().to", "trainer.get_optimizer", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "nima.emd_loss.EDMLoss().to", "experiment_dir.mkdir", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "nima.model.create_model", "nima.emd_loss.EDMLoss"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.get_dataloaders", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.get_optimizer", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.create_model"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "path_to_save_csv", ":", "Path", ",", "\n", "path_to_images", ":", "Path", ",", "\n", "num_epoch", ":", "int", ",", "\n", "model_type", ":", "str", ",", "\n", "num_workers", ":", "int", ",", "\n", "batch_size", ":", "int", ",", "\n", "init_lr", ":", "float", ",", "\n", "experiment_dir", ":", "Path", ",", "\n", "drop_out", ":", "float", ",", "\n", "optimizer_type", ":", "str", ",", "\n", ")", ":", "\n", "\n", "        ", "train_loader", ",", "val_loader", ",", "_", "=", "get_dataloaders", "(", "\n", "path_to_save_csv", "=", "path_to_save_csv", ",", "\n", "path_to_images", "=", "path_to_images", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", ")", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "val_loader", "=", "val_loader", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "model", "=", "create_model", "(", "model_type", ",", "drop_out", "=", "drop_out", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "optimizer", "=", "get_optimizer", "(", "optimizer_type", "=", "optimizer_type", ",", "model", "=", "model", ",", "init_lr", "=", "init_lr", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", "=", "self", ".", "optimizer", ",", "mode", "=", "\"min\"", ",", "patience", "=", "5", ")", "\n", "self", ".", "criterion", "=", "EDMLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model_type", "=", "model_type", "\n", "\n", "experiment_dir", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "self", ".", "experiment_dir", "=", "experiment_dir", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "str", "(", "experiment_dir", "/", "\"logs\"", ")", ")", "\n", "self", ".", "num_epoch", "=", "num_epoch", "\n", "self", ".", "global_train_step", "=", "0", "\n", "self", ".", "global_val_step", "=", "0", "\n", "self", ".", "print_freq", "=", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.Trainer.train_model": [[133, 154], ["float", "range", "trainer.Trainer.train", "trainer.Trainer.validate", "trainer.Trainer.scheduler.step", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "trainer.Trainer.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.Trainer.train", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.Trainer.validate", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save"], ["", "def", "train_model", "(", "self", ")", ":", "\n", "        ", "best_loss", "=", "float", "(", "\"inf\"", ")", "\n", "best_state", "=", "None", "\n", "for", "e", "in", "range", "(", "1", ",", "self", ".", "num_epoch", "+", "1", ")", ":", "\n", "            ", "train_loss", "=", "self", ".", "train", "(", ")", "\n", "val_loss", "=", "self", ".", "validate", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", "metrics", "=", "val_loss", ")", "\n", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"train/loss\"", ",", "train_loss", ",", "global_step", "=", "e", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"val/loss\"", ",", "val_loss", ",", "global_step", "=", "e", ")", "\n", "\n", "if", "best_state", "is", "None", "or", "val_loss", "<", "best_loss", ":", "\n", "                ", "logger", ".", "info", "(", "f\"updated loss from {best_loss} to {val_loss}\"", ")", "\n", "best_loss", "=", "val_loss", "\n", "best_state", "=", "{", "\n", "\"state_dict\"", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "\"model_type\"", ":", "self", ".", "model_type", ",", "\n", "\"epoch\"", ":", "e", ",", "\n", "\"best_loss\"", ":", "best_loss", ",", "\n", "}", "\n", "torch", ".", "save", "(", "best_state", ",", "self", ".", "experiment_dir", "/", "\"best_state.pth\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.Trainer.train": [[155, 185], ["trainer.Trainer.model.train", "nima.common.AverageMeter", "enumerate", "len", "time.monotonic", "x.to.to.to", "y.to.to.to", "trainer.Trainer.model", "trainer.Trainer.criterion", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.backward", "trainer.Trainer.optimizer.step", "nima.common.AverageMeter.update", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "time.monotonic", "trainer.Trainer.item", "x.to.to.size", "print"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.Trainer.train", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.AverageMeter.update"], ["", "", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "train_losses", "=", "AverageMeter", "(", ")", "\n", "total_iter", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "//", "self", ".", "train_loader", ".", "batch_size", "\n", "\n", "for", "idx", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "s", "=", "time", ".", "monotonic", "(", ")", "\n", "\n", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "self", ".", "device", ")", "\n", "y_pred", "=", "self", ".", "model", "(", "x", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "p_target", "=", "y", ",", "p_estimate", "=", "y_pred", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "train_losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"train/current_loss\"", ",", "train_losses", ".", "val", ",", "self", ".", "global_train_step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"train/avg_loss\"", ",", "train_losses", ".", "avg", ",", "self", ".", "global_train_step", ")", "\n", "self", ".", "global_train_step", "+=", "1", "\n", "\n", "e", "=", "time", ".", "monotonic", "(", ")", "\n", "if", "idx", "%", "self", ".", "print_freq", ":", "\n", "                ", "log_time", "=", "self", ".", "print_freq", "*", "(", "e", "-", "s", ")", "\n", "eta", "=", "(", "(", "total_iter", "-", "idx", ")", "*", "log_time", ")", "/", "60.0", "\n", "print", "(", "f\"iter #[{idx}/{total_iter}] \"", "f\"loss = {loss:.3f} \"", "f\"time = {log_time:.2f} \"", "f\"eta = {eta:.2f}\"", ")", "\n", "\n", "", "", "return", "train_losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.Trainer.validate": [[186, 203], ["trainer.Trainer.model.eval", "nima.common.AverageMeter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "x.to.to.to", "y.to.to.to", "trainer.Trainer.model", "trainer.Trainer.criterion", "nima.common.AverageMeter.update", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.writer.add_scalar", "trainer.Trainer.item", "x.to.to.size"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.AverageMeter.update"], ["", "def", "validate", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "validate_losses", "=", "AverageMeter", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "idx", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "                ", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "self", ".", "device", ")", "\n", "y_pred", "=", "self", ".", "model", "(", "x", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "p_target", "=", "y", ",", "p_estimate", "=", "y_pred", ")", "\n", "validate_losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"val/current_loss\"", ",", "validate_losses", ".", "val", ",", "self", ".", "global_val_step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"val/avg_loss\"", ",", "validate_losses", ".", "avg", ",", "self", ".", "global_val_step", ")", "\n", "self", ".", "global_val_step", "+=", "1", "\n", "\n", "", "", "return", "validate_losses", ".", "avg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.get_dataloaders": [[21, 34], ["nima.common.Transform", "nima.dataset.AVADataset", "nima.dataset.AVADataset", "nima.dataset.AVADataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["def", "get_dataloaders", "(", "\n", "path_to_save_csv", ":", "Path", ",", "path_to_images", ":", "Path", ",", "batch_size", ":", "int", ",", "num_workers", ":", "int", "\n", ")", "->", "Tuple", "[", "DataLoader", ",", "DataLoader", ",", "DataLoader", "]", ":", "\n", "    ", "transform", "=", "Transform", "(", ")", "\n", "\n", "train_ds", "=", "AVADataset", "(", "path_to_save_csv", "/", "\"train.csv\"", ",", "path_to_images", ",", "transform", ".", "train_transform", ")", "\n", "val_ds", "=", "AVADataset", "(", "path_to_save_csv", "/", "\"val.csv\"", ",", "path_to_images", ",", "transform", ".", "val_transform", ")", "\n", "test_ds", "=", "AVADataset", "(", "path_to_save_csv", "/", "\"test.csv\"", ",", "path_to_images", ",", "transform", ".", "val_transform", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_ds", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ",", "shuffle", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_ds", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ",", "shuffle", "=", "False", ")", "\n", "test_ds", "=", "DataLoader", "(", "test_ds", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ",", "shuffle", "=", "False", ")", "\n", "return", "train_loader", ",", "val_loader", ",", "test_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.validate_and_test": [[36, 76], ["trainer.get_dataloaders", "torch.device", "torch.device", "nima.emd_loss.EDMLoss().to", "torch.load", "torch.load", "nima.model.create_model().to", "create_model().to.load_state_dict", "create_model().to.eval", "nima.common.AverageMeter", "nima.common.AverageMeter", "logger.info", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "torch.cuda.is_available", "torch.cuda.is_available", "nima.emd_loss.EDMLoss", "nima.model.create_model", "x.to.to", "y.to.to", "create_model().to.", "EDMLoss().to.", "nima.common.AverageMeter.update", "x.to.to", "y.to.to", "create_model().to.", "EDMLoss().to.", "nima.common.AverageMeter.update", "criterion.item", "x.to.size", "criterion.item", "x.to.size"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.get_dataloaders", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.create_model", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.AverageMeter.update", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.common.AverageMeter.update"], ["", "def", "validate_and_test", "(", "\n", "path_to_save_csv", ":", "Path", ",", "\n", "path_to_images", ":", "Path", ",", "\n", "batch_size", ":", "int", ",", "\n", "num_workers", ":", "int", ",", "\n", "drop_out", ":", "float", ",", "\n", "path_to_model_state", ":", "Path", ",", "\n", ")", "->", "None", ":", "\n", "    ", "_", ",", "val_loader", ",", "test_loader", "=", "get_dataloaders", "(", "\n", "path_to_save_csv", "=", "path_to_save_csv", ",", "path_to_images", "=", "path_to_images", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", "\n", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "criterion", "=", "EDMLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "best_state", "=", "torch", ".", "load", "(", "path_to_model_state", ")", "\n", "\n", "model", "=", "create_model", "(", "best_state", "[", "\"model_type\"", "]", ",", "drop_out", "=", "drop_out", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "load_state_dict", "(", "best_state", "[", "\"state_dict\"", "]", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "validate_losses", "=", "AverageMeter", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "x", ",", "y", ")", "in", "tqdm", "(", "val_loader", ")", ":", "\n", "            ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "y_pred", "=", "model", "(", "x", ")", "\n", "loss", "=", "criterion", "(", "p_target", "=", "y", ",", "p_estimate", "=", "y_pred", ")", "\n", "validate_losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "", "test_losses", "=", "AverageMeter", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "x", ",", "y", ")", "in", "tqdm", "(", "test_loader", ")", ":", "\n", "            ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "y_pred", "=", "model", "(", "x", ")", "\n", "loss", "=", "criterion", "(", "p_target", "=", "y", ",", "p_estimate", "=", "y_pred", ")", "\n", "test_losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "x", ".", "size", "(", "0", ")", ")", "\n", "", "", "logger", ".", "info", "(", "f\"val loss {validate_losses.avg}; test loss {test_losses.avg}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.trainer.get_optimizer": [[78, 86], ["torch.optim.Adam", "torch.optim.Adam", "model.parameters", "torch.optim.SGD", "torch.optim.SGD", "ValueError", "model.parameters"], "function", ["None"], ["", "def", "get_optimizer", "(", "optimizer_type", ":", "str", ",", "model", ":", "NIMA", ",", "init_lr", ":", "float", ")", "->", "torch", ".", "optim", ".", "Optimizer", ":", "\n", "    ", "if", "optimizer_type", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "init_lr", ")", "\n", "", "elif", "optimizer_type", "==", "\"sgd\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "init_lr", ",", "momentum", "=", "0.5", ",", "weight_decay", "=", "9", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"not such optimizer {optimizer_type}\"", ")", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.dataset.AVADataset.__init__": [[18, 22], ["pandas.read_csv"], "methods", ["None"], ["clean_and_split", "(", "\n", "path_to_ava_txt", "=", "\"./images/AVA.txt\"", ",", "\n", "path_to_save_csv", "=", "\"./images\"", ",", "\n", "path_to_images", "=", "path_images", ",", "\n", "train_size", "=", "0.8", ",", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.dataset.AVADataset.__len__": [[23, 25], ["None"], "methods", ["None"], ["num_workers", "=", "numworkers", ",", "\n", ")", "\n", "click", ".", "echo", "(", "\"Done!\"", ")", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.dataset.AVADataset.__getitem__": [[26, 39], ["torchvision.datasets.folder.default_loader", "dataset.AVADataset.transform", "row[].values.astype", "row[].values.astype.sum"], "methods", ["None"], ["\n", "", "def", "imageLoader_train", "(", "data", ",", "dataDir", ")", ":", "\n", "    ", "folders", "=", "os", ".", "listdir", "(", "dataDir", ")", "\n", "folders", ".", "sort", "(", ")", "\n", "data", ".", "win", "=", "[", "]", "\n", "data", ".", "filename", "=", "[", "]", "\n", "data", ".", "train", "=", "[", "]", "\n", "data", ".", "train", "=", "torch", ".", "as_tensor", "(", "data", ".", "train", ")", "\n", "\n", "for", "i", ",", "folder", "in", "enumerate", "(", "folders", ")", ":", "\n", "        ", "filelist", "=", "os", ".", "listdir", "(", "dataDir", "+", "\"/\"", "+", "folder", ")", "\n", "data", ".", "imgs", "=", "[", "]", "\n", "data", ".", "score", "=", "[", "]", "\n", "data", ".", "file", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.clean_dataset._remove_all_not_found_image": [[15, 28], ["df.iterrows", "pandas.DataFrame", "torchvision.datasets.folder.default_loader", "clean_rows.append", "logger.info"], "function", ["None"], ["def", "_remove_all_not_found_image", "(", "df", ":", "pd", ".", "DataFrame", ",", "path_to_images", ":", "Path", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "clean_rows", "=", "[", "]", "\n", "for", "_", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "image_id", "=", "row", "[", "\"image_id\"", "]", "\n", "try", ":", "\n", "            ", "file_name", "=", "path_to_images", "+", "\"/\"", "+", "f\"{image_id}.jpg\"", "\n", "_", "=", "default_loader", "(", "file_name", ")", "\n", "", "except", "(", "FileNotFoundError", ",", "OSError", ",", "UnboundLocalError", ")", "as", "ex", ":", "\n", "            ", "logger", ".", "info", "(", "f\"broken image {file_name} : {ex}\"", ")", "\n", "", "else", ":", "\n", "            ", "clean_rows", ".", "append", "(", "row", ")", "\n", "", "", "df_clean", "=", "pd", ".", "DataFrame", "(", "clean_rows", ")", "\n", "return", "df_clean", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.clean_dataset.remove_all_not_found_image": [[30, 41], ["pandas.concat", "concurrent.futures.ThreadPoolExecutor", "numpy.array_split", "tqdm.tqdm", "executor.submit", "futures.append", "concurrent.futures.as_completed", "results.append", "len", "executor.submit.result"], "function", ["None"], ["", "def", "remove_all_not_found_image", "(", "df", ":", "pd", ".", "DataFrame", ",", "path_to_images", ":", "Path", ",", "num_workers", ":", "int", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "futures", "=", "[", "]", "\n", "results", "=", "[", "]", "\n", "with", "ThreadPoolExecutor", "(", "max_workers", "=", "num_workers", ")", "as", "executor", ":", "\n", "        ", "for", "df_batch", "in", "np", ".", "array_split", "(", "df", ",", "num_workers", ")", ":", "\n", "            ", "future", "=", "executor", ".", "submit", "(", "_remove_all_not_found_image", ",", "df", "=", "df_batch", ",", "path_to_images", "=", "path_to_images", ")", "\n", "futures", ".", "append", "(", "future", ")", "\n", "", "for", "future", "in", "tqdm", "(", "as_completed", "(", "futures", ")", ",", "total", "=", "len", "(", "futures", ")", ")", ":", "\n", "            ", "results", ".", "append", "(", "future", ".", "result", "(", ")", ")", "\n", "", "", "new_df", "=", "pd", ".", "concat", "(", "results", ")", "\n", "return", "new_df", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.clean_dataset.read_ava_txt": [[43, 57], ["pandas.read_csv", "range", "range"], "function", ["None"], ["", "def", "read_ava_txt", "(", "path_to_ava", ":", "Path", ")", "->", "pd", ".", "DataFrame", ":", "\n", "# NIMA origin file format and indexes", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "path_to_ava", ",", "header", "=", "None", ",", "sep", "=", "\" \"", ")", "\n", "del", "df", "[", "0", "]", "\n", "score_first_column", "=", "2", "\n", "score_last_column", "=", "12", "\n", "tag_first_column", "=", "1", "\n", "tag_last_column", "=", "4", "\n", "score_names", "=", "[", "f\"score{i}\"", "for", "i", "in", "range", "(", "score_first_column", ",", "score_last_column", ")", "]", "\n", "tag_names", "=", "[", "f\"tag{i}\"", "for", "i", "in", "range", "(", "tag_first_column", ",", "tag_last_column", ")", "]", "\n", "df", ".", "columns", "=", "[", "\"image_id\"", "]", "+", "score_names", "+", "tag_names", "\n", "# leave only score columns", "\n", "df", "=", "df", "[", "[", "\"image_id\"", "]", "+", "score_names", "]", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.clean_dataset.clean_and_split": [[59, 76], ["logger.info", "clean_dataset.read_ava_txt", "logger.info", "clean_dataset.remove_all_not_found_image", "logger.info", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "logger.info", "df_train.to_csv", "df_val.to_csv", "df_test.to_csv"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.clean_dataset.read_ava_txt", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.clean_dataset.remove_all_not_found_image"], ["", "def", "clean_and_split", "(", "\n", "path_to_ava_txt", ":", "Path", ",", "path_to_save_csv", ":", "Path", ",", "path_to_images", ":", "Path", ",", "train_size", ":", "float", ",", "num_workers", ":", "int", "\n", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"read ava txt\"", ")", "\n", "df", "=", "read_ava_txt", "(", "path_to_ava_txt", ")", "\n", "logger", ".", "info", "(", "\"removing broken images\"", ")", "\n", "df", "=", "remove_all_not_found_image", "(", "df", ",", "path_to_images", ",", "num_workers", "=", "num_workers", ")", "\n", "logger", ".", "info", "(", "\"train val test split\"", ")", "\n", "df_train", ",", "df_val_test", "=", "train_test_split", "(", "df", ",", "train_size", "=", "train_size", ")", "\n", "df_val", ",", "df_test", "=", "train_test_split", "(", "df_val_test", ",", "train_size", "=", "0.5", ")", "\n", "train_path", "=", "path_to_save_csv", "+", "\"/\"", "+", "\"train.csv\"", "\n", "val_path", "=", "path_to_save_csv", "+", "\"/\"", "+", "\"val.csv\"", "\n", "test_path", "=", "path_to_save_csv", "+", "\"/\"", "+", "\"test.csv\"", "\n", "logger", ".", "info", "(", "f\"saving to {train_path} {val_path} and {test_path}\"", ")", "\n", "df_train", ".", "to_csv", "(", "train_path", ",", "index", "=", "False", ")", "\n", "df_val", ".", "to_csv", "(", "val_path", ",", "index", "=", "False", ")", "\n", "df_test", ".", "to_csv", "(", "test_path", ",", "index", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.emd_loss.EDMLoss.__init__": [[6, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EDMLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.emd_loss.EDMLoss.forward": [[9, 18], ["torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt.mean", "torch.sqrt.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "p_target", ":", "torch", ".", "Tensor", ",", "p_estimate", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "assert", "p_target", ".", "shape", "==", "p_estimate", ".", "shape", "\n", "# cdf for values [1, 2, ..., 10]", "\n", "cdf_target", "=", "torch", ".", "cumsum", "(", "p_target", ",", "dim", "=", "1", ")", "\n", "# cdf for values [1, 2, ..., 10]", "\n", "cdf_estimate", "=", "torch", ".", "cumsum", "(", "p_estimate", ",", "dim", "=", "1", ")", "\n", "cdf_diff", "=", "cdf_estimate", "-", "cdf_target", "\n", "samplewise_emd", "=", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "torch", ".", "abs", "(", "cdf_diff", ")", ",", "2", ")", ")", ")", "\n", "return", "samplewise_emd", ".", "mean", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.api.ModelHandler.__init__": [[20, 23], ["asyncio.get_event_loop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "executor", ":", "ThreadPoolExecutor", ")", ":", "\n", "        ", "self", ".", "_loop", "=", "asyncio", ".", "get_event_loop", "(", ")", "\n", "self", ".", "_executor", "=", "executor", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.api.ModelHandler.register": [[24, 27], ["app.add_routes", "app.add_routes", "aiohttp.web.post", "aiohttp.web.post", "aiohttp.web.post", "aiohttp.web.post", "aiohttp.web.get", "aiohttp.web.get", "aiohttp.web.get", "aiohttp.web.get"], "methods", ["None"], ["", "def", "register", "(", "self", ",", "app", ":", "aiohttp", ".", "web", ".", "Application", ")", "->", "None", ":", "\n", "        ", "app", ".", "add_routes", "(", "(", "aiohttp", ".", "web", ".", "post", "(", "\"/predict\"", ",", "self", ".", "handle_predict", ",", "name", "=", "\"predict\"", ")", ",", ")", ")", "\n", "app", ".", "add_routes", "(", "(", "aiohttp", ".", "web", ".", "get", "(", "\"/ping\"", ",", "self", ".", "handle_ping", ")", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.api.run_api": [[93, 101], ["api.Config", "logging.info", "asyncio.get_event_loop", "asyncio.get_event_loop.run_until_complete", "aiohttp.web.run_app", "aiohttp.web.run_app", "create_app", "api.ServerConfig", "nima.worker.WorkersConfig"], "function", ["None"], ["", "def", "run_api", "(", "path_to_model_state", ":", "Path", ",", "port", ":", "int", "=", "8080", ",", "host", ":", "str", "=", "\"0.0.0.0\"", ")", "->", "None", ":", "\n", "    ", "config", "=", "Config", "(", "\n", "server", "=", "ServerConfig", "(", "port", "=", "port", ",", "host", "=", "host", ")", ",", "worker", "=", "WorkersConfig", "(", "path_to_model_state", "=", "path_to_model_state", ")", "\n", ")", "\n", "logging", ".", "info", "(", "\"Loaded config: %r\"", ",", "config", ")", "\n", "loop", "=", "asyncio", ".", "get_event_loop", "(", ")", "\n", "app", "=", "loop", ".", "run_until_complete", "(", "create_app", "(", "config", ")", ")", "\n", "aiohttp", ".", "web", ".", "run_app", "(", "app", ",", "host", "=", "config", ".", "server", ".", "host", ",", "port", "=", "config", ".", "server", ".", "port", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.__init__": [[15, 21], ["torch.Module.__init__", "torch.Sequential", "torch.ReLU", "torch.Dropout", "torch.Linear", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_model", ":", "nn", ".", "Module", ",", "input_features", ":", "int", ",", "drop_out", ":", "float", ")", ":", "\n", "        ", "super", "(", "NIMA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_model", "=", "base_model", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "drop_out", ")", ",", "nn", ".", "Linear", "(", "input_features", ",", "10", ")", ",", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.NIMA.forward": [[23, 28], ["model.NIMA.base_model", "model.NIMA.view", "model.NIMA.head", "model.NIMA.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "base_model", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.create_model": [[30, 35], ["create_function", "torch.Sequential", "model.NIMA", "list", "nn.Sequential.children"], "function", ["None"], ["", "", "def", "create_model", "(", "model_type", ":", "str", ",", "drop_out", ":", "float", ")", "->", "NIMA", ":", "\n", "    ", "create_function", ",", "input_features", "=", "MODELS", "[", "model_type", "]", "\n", "base_model", "=", "create_function", "(", "pretrained", "=", "True", ")", "\n", "base_model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "base_model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "return", "NIMA", "(", "base_model", "=", "base_model", ",", "input_features", "=", "input_features", ",", "drop_out", "=", "drop_out", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.test_cli.TestCli.test_get_image_score": [[11, 22], ["cli_runner.invoke", "ast.literal_eval", "len"], "methods", ["None"], ["    ", "def", "test_get_image_score", "(", "self", ",", "cli_runner", ":", "CliRunner", ",", "state_dict_path", ":", "Path", ",", "image_path", ":", "Path", ")", ":", "\n", "        ", "result", "=", "cli_runner", ".", "invoke", "(", "\n", "get_image_score", ",", "f\"--path_to_model_state {state_dict_path} --path_to_image {image_path}\"", "\n", ")", "\n", "res", "=", "ast", ".", "literal_eval", "(", "result", ".", "output", ")", "\n", "\n", "assert", "\"mean_score\"", "in", "res", "\n", "assert", "\"std_score\"", "in", "res", "\n", "assert", "\"scores\"", "in", "res", "\n", "assert", "len", "(", "res", "[", "\"scores\"", "]", ")", "==", "10", "\n", "assert", "result", ".", "exit_code", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.test_cli.TestCli.test_prepare_dataset": [[23, 37], ["cli_runner.invoke"], "methods", ["None"], ["", "def", "test_prepare_dataset", "(", "\n", "self", ",", "cli_runner", ":", "CliRunner", ",", "ava_csv_path", ":", "Path", ",", "path_to_save_result", ":", "Path", ",", "images_path", ":", "Path", "\n", ")", ":", "\n", "\n", "        ", "result", "=", "cli_runner", ".", "invoke", "(", "\n", "prepare_dataset", ",", "\n", "f\"--path_to_ava_txt {ava_csv_path} \"", "\n", "f\"--path_to_save_csv {path_to_save_result} \"", "\n", "f\"--path_to_images {images_path}\"", ",", "\n", ")", "\n", "assert", "(", "path_to_save_result", "/", "\"train.csv\"", ")", ".", "exists", "(", ")", "\n", "assert", "(", "path_to_save_result", "/", "\"val.csv\"", ")", ".", "exists", "(", ")", "\n", "assert", "(", "path_to_save_result", "/", "\"test.csv\"", ")", ".", "exists", "(", ")", "\n", "assert", "result", ".", "exit_code", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.test_cli.TestCli.test_train_model": [[38, 60], ["cli_runner.invoke", "torch.load"], "methods", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.load"], ["", "def", "test_train_model", "(", "self", ",", "cli_runner", ":", "CliRunner", ",", "images_path", ":", "Path", ",", "experiment_dir", ":", "Path", ",", "folder_with_csv", ":", "Path", ")", ":", "\n", "        ", "assert", "not", "(", "experiment_dir", "/", "\"logs\"", ")", ".", "exists", "(", ")", "\n", "assert", "not", "(", "experiment_dir", "/", "\"best_state.pth\"", ")", ".", "exists", "(", ")", "\n", "\n", "result", "=", "cli_runner", ".", "invoke", "(", "\n", "train_model", ",", "\n", "f\"--path_to_save_csv {folder_with_csv} \"", "\n", "f\"--path_to_images {images_path} \"", "\n", "f\"--experiment_dir {experiment_dir} \"", "\n", "f\"--batch_size 1 --num_epoch 5\"", ",", "\n", ")", "\n", "\n", "assert", "result", ".", "exit_code", "==", "0", "\n", "assert", "(", "experiment_dir", "/", "\"logs\"", ")", ".", "exists", "(", ")", "\n", "assert", "(", "experiment_dir", "/", "\"best_state.pth\"", ")", ".", "exists", "(", ")", "\n", "\n", "best_state", "=", "torch", ".", "load", "(", "experiment_dir", "/", "\"best_state.pth\"", ")", "\n", "\n", "assert", "\"state_dict\"", "in", "best_state", "\n", "assert", "\"model_type\"", "in", "best_state", "\n", "assert", "\"epoch\"", "in", "best_state", "\n", "assert", "\"best_loss\"", "in", "best_state", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.test_cli.TestCli.test_validate_model": [[61, 71], ["cli_runner.invoke"], "methods", ["None"], ["", "def", "test_validate_model", "(", "\n", "self", ",", "cli_runner", ":", "CliRunner", ",", "images_path", ":", "Path", ",", "state_dict_path", ":", "Path", ",", "folder_with_csv", ":", "Path", "\n", ")", ":", "\n", "        ", "result", "=", "cli_runner", ".", "invoke", "(", "\n", "validate_model", ",", "\n", "f\"--path_to_model_state {state_dict_path} \"", "\n", "f\"--path_to_save_csv {folder_with_csv} \"", "\n", "f\"--path_to_images {images_path}\"", ",", "\n", ")", "\n", "assert", "result", ".", "exit_code", "==", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.test_api.ApiConfig.endpoint": [[23, 26], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "endpoint", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f\"http://{self.host}:{self.port}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.test_api.ApiConfig.model_base_url": [[27, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_base_url", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "endpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.test_api.ApiConfig.ping_url": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ping_url", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "endpoint", "+", "\"/ping\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.test_api.config": [[12, 17], ["nima.api.ServerConfig", "nima.api.WorkersConfig", "nima.api.Config"], "function", ["None"], ["@", "pytest", ".", "fixture", "\n", "def", "config", "(", "state_dict_path", ")", "->", "Config", ":", "\n", "    ", "server_config", "=", "ServerConfig", "(", ")", "\n", "workers_config", "=", "WorkersConfig", "(", "path_to_model_state", "=", "state_dict_path", ")", "\n", "return", "Config", "(", "server", "=", "server_config", ",", "worker", "=", "workers_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.conftest.data_dir": [[15, 18], ["pathlib.Path"], "function", ["None"], ["@", "pytest", ".", "fixture", "\n", "def", "data_dir", "(", ")", "->", "Path", ":", "\n", "    ", "return", "Path", "(", "\"tests/data\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.conftest.model_type": [[20, 23], ["None"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "\n", "def", "model_type", "(", ")", "->", "str", ":", "\n", "    ", "return", "\"resnet18\"", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.conftest.state_dict_path": [[25, 36], ["nima.model.create_model", "torch.save", "os.remove", "nima.model.create_model.state_dict"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.nima.model.create_model", "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save"], ["", "@", "pytest", ".", "yield_fixture", "\n", "def", "state_dict_path", "(", "data_dir", ":", "Path", ",", "model_type", ":", "str", ")", ":", "\n", "    ", "model", "=", "create_model", "(", "model_type", "=", "model_type", ",", "drop_out", "=", "0.0", ")", "\n", "\n", "best_state", "=", "{", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\"model_type\"", ":", "model_type", ",", "\"epoch\"", ":", "100", ",", "\"best_loss\"", ":", "0.0", "}", "\n", "\n", "best_state_path", "=", "data_dir", "/", "\"tmp_test_best_state_path.pth\"", "\n", "torch", ".", "save", "(", "best_state", ",", "best_state_path", ")", "\n", "yield", "best_state_path", "\n", "\n", "os", ".", "remove", "(", "best_state_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.conftest.image_path": [[38, 47], ["PIL.Image.new", "Image.new.save", "os.remove"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save"], ["", "@", "pytest", ".", "yield_fixture", "\n", "def", "image_path", "(", "data_dir", ":", "Path", ")", ":", "\n", "    ", "im", "=", "Image", ".", "new", "(", "\"RGB\"", ",", "(", "1024", ",", "1024", ")", ")", "\n", "\n", "image_path", "=", "data_dir", "/", "\"tmp_test_image.jpg\"", "\n", "im", ".", "save", "(", "image_path", ")", "\n", "yield", "image_path", "\n", "\n", "os", ".", "remove", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.conftest.image_file_obj": [[49, 58], ["io.BytesIO", "PIL.Image.open().save", "io.BytesIO.seek", "io.BytesIO.close", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.None.DfpNet.DistanceModel.save"], ["", "@", "pytest", ".", "yield_fixture", "\n", "def", "image_file_obj", "(", "image_path", ":", "Image", ".", "Image", ")", ":", "\n", "    ", "byte_io", "=", "io", ".", "BytesIO", "(", ")", "\n", "Image", ".", "open", "(", "image_path", ")", ".", "save", "(", "byte_io", ",", "\"JPEG\"", ")", "\n", "byte_io", ".", "seek", "(", "0", ")", "\n", "\n", "yield", "byte_io", "\n", "\n", "byte_io", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.conftest.images_path": [[60, 63], ["None"], "function", ["None"], ["", "@", "pytest", ".", "yield_fixture", "\n", "def", "images_path", "(", "image_path", ":", "Path", ")", "->", "Path", ":", "\n", "    ", "return", "image_path", ".", "parents", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.conftest.ava_csv_path": [[65, 85], ["os.remove", "open", "f.writelines"], "function", ["None"], ["", "@", "pytest", ".", "yield_fixture", "\n", "def", "ava_csv_path", "(", "data_dir", ":", "Path", ")", ":", "\n", "    ", "data", "=", "[", "\n", "\"1 tmp_test_image 0 1 5 17 38 36 15 6 5 1 1 22 1396\\n\"", ",", "\n", "\"1 tmp_test_image 0 1 5 17 38 36 15 6 5 1 1 22 1396\\n\"", ",", "\n", "\"1 tmp_test_image 0 1 5 17 38 36 15 6 5 1 1 22 1396\\n\"", ",", "\n", "\"1 tmp_test_image 0 1 5 17 38 36 15 6 5 1 1 22 1396\\n\"", ",", "\n", "\"1 tmp_test_image 0 1 5 17 38 36 15 6 5 1 1 22 1396\\n\"", ",", "\n", "\"1 tmp_test_image 0 1 5 17 38 36 15 6 5 1 1 22 1396\\n\"", ",", "\n", "\"1 tmp_test_image 0 1 5 17 38 36 15 6 5 1 1 22 1396\\n\"", ",", "\n", "\"1 tmp_test_image 0 1 5 17 38 36 15 6 5 1 1 22 1396\\n\"", ",", "\n", "\"1 tmp_test_image 0 1 5 17 38 36 15 6 5 1 1 22 1396\\n\"", ",", "\n", "\"1 tmp_test_image 0 1 5 17 38 36 15 6 5 1 1 22 1396\\n\"", ",", "\n", "]", "\n", "\n", "temp_ava_path", "=", "data_dir", "/", "\"tmp_test_ava.csv\"", "\n", "with", "open", "(", "temp_ava_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "writelines", "(", "data", ")", "\n", "", "yield", "temp_ava_path", "\n", "os", ".", "remove", "(", "temp_ava_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.conftest.path_to_save_result": [[87, 93], ["temp_dir_with_results.mkdir", "shutil.rmtree"], "function", ["None"], ["", "@", "pytest", ".", "yield_fixture", "\n", "def", "path_to_save_result", "(", "data_dir", ":", "Path", ")", ":", "\n", "    ", "temp_dir_with_results", "=", "data_dir", "/", "\"temp_results\"", "\n", "temp_dir_with_results", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "False", ")", "\n", "yield", "temp_dir_with_results", "\n", "shutil", ".", "rmtree", "(", "temp_dir_with_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.conftest.experiment_dir": [[95, 101], ["temp_experiment_dir.mkdir", "shutil.rmtree"], "function", ["None"], ["", "@", "pytest", ".", "yield_fixture", "\n", "def", "experiment_dir", "(", "path_to_save_result", ":", "Path", ")", ":", "\n", "    ", "temp_experiment_dir", "=", "path_to_save_result", "/", "\"temp_exp\"", "\n", "temp_experiment_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "False", ")", "\n", "yield", "temp_experiment_dir", "\n", "shutil", ".", "rmtree", "(", "temp_experiment_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.conftest.folder_with_csv": [[103, 130], ["pandas.DataFrame", "pd.DataFrame.to_csv", "pd.DataFrame.to_csv", "pd.DataFrame.to_csv", "os.remove", "os.remove", "os.remove"], "function", ["None"], ["", "@", "pytest", ".", "yield_fixture", "\n", "def", "folder_with_csv", "(", "path_to_save_result", ":", "Path", ")", ":", "\n", "    ", "df", "=", "pd", ".", "DataFrame", "(", "\n", "{", "\n", "\"image_id\"", ":", "[", "\"tmp_test_image\"", "]", ",", "\n", "\"score10\"", ":", "[", "5", "]", ",", "\n", "\"score11\"", ":", "[", "1", "]", ",", "\n", "\"score2\"", ":", "[", "0", "]", ",", "\n", "\"score3\"", ":", "[", "1", "]", ",", "\n", "\"score4\"", ":", "[", "5", "]", ",", "\n", "\"score5\"", ":", "[", "17", "]", ",", "\n", "\"score6\"", ":", "[", "38", "]", ",", "\n", "\"score7\"", ":", "[", "36", "]", ",", "\n", "\"score8\"", ":", "[", "15", "]", ",", "\n", "\"score9\"", ":", "[", "6", "]", ",", "\n", "}", "\n", ")", "\n", "\n", "df", ".", "to_csv", "(", "path_to_save_result", "/", "\"train.csv\"", ",", "index", "=", "False", ")", "\n", "df", ".", "to_csv", "(", "path_to_save_result", "/", "\"val.csv\"", ",", "index", "=", "False", ")", "\n", "df", ".", "to_csv", "(", "path_to_save_result", "/", "\"test.csv\"", ",", "index", "=", "False", ")", "\n", "\n", "yield", "path_to_save_result", "\n", "\n", "os", ".", "remove", "(", "path_to_save_result", "/", "\"train.csv\"", ")", "\n", "os", ".", "remove", "(", "path_to_save_result", "/", "\"val.csv\"", ")", "\n", "os", ".", "remove", "(", "path_to_save_result", "/", "\"test.csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.integration.conftest.cli_runner": [[132, 136], ["click.testing.CliRunner"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "\n", "def", "cli_runner", "(", ")", "->", "CliRunner", ":", "\n", "    ", "runner", "=", "CliRunner", "(", ")", "\n", "return", "runner", "\n", "", ""]], "home.repos.pwc.inspect_result.lishiyu0088_neural_bradley-terry.unit.test_emd_loss.test_emd_loss": [[1, 3], ["None"], "function", ["None"], ["def", "test_emd_loss", "(", ")", ":", "\n", "    ", "assert", "1", "==", "1", "\n", "", ""]]}