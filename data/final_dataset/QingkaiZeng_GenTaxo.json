{"home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.opts.fill_config": [[5, 11], ["torch.device"], "function", ["None"], ["def", "fill_config", "(", "args", ")", ":", "\n", "# dirty work", "\n", "    ", "args", ".", "device", "=", "torch", ".", "device", "(", "args", ".", "gpu", ")", "\n", "args", ".", "dec_ninp", "=", "args", ".", "nhid", "*", "3", "if", "args", ".", "seq", "else", "args", ".", "nhid", "*", "2", "\n", "args", ".", "fnames", "=", "[", "args", ".", "train_file", ",", "args", ".", "valid_file", ",", "args", ".", "test_file", "]", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.opts.vocab_config": [[13, 21], ["None"], "function", ["None"], ["", "def", "vocab_config", "(", "args", ",", "ent_vocab", ",", "rel_vocab", ",", "text_vocab", ",", "ent_text_vocab", ",", "seq_vocab", ")", ":", "\n", "# dirty work", "\n", "    ", "args", ".", "ent_vocab", "=", "ent_vocab", "\n", "args", ".", "rel_vocab", "=", "rel_vocab", "\n", "args", ".", "text_vocab", "=", "text_vocab", "\n", "args", ".", "ent_text_vocab", "=", "ent_text_vocab", "\n", "args", ".", "seq_vocab", "=", "seq_vocab", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.opts.get_args": [[23, 56], ["argparse.ArgumentParser", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.add_argument", "fill_config.parse_args", "opts.fill_config"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.opts.fill_config"], ["", "def", "get_args", "(", ")", ":", "\n", "    ", "args", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'GenTaxo'", ")", "\n", "args", ".", "add_argument", "(", "'--nhid'", ",", "default", "=", "500", ",", "type", "=", "int", ",", "help", "=", "'hidden size'", ")", "\n", "args", ".", "add_argument", "(", "'--nhead'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'number of heads'", ")", "\n", "args", ".", "add_argument", "(", "'--head_dim'", ",", "default", "=", "125", ",", "type", "=", "int", ",", "help", "=", "'head dim'", ")", "\n", "args", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "help", "=", "'weight decay'", ")", "\n", "args", ".", "add_argument", "(", "'--prop'", ",", "default", "=", "6", ",", "type", "=", "int", ",", "help", "=", "'number of layers of gnn'", ")", "\n", "args", ".", "add_argument", "(", "'--seq'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use sequence input'", ")", "\n", "args", ".", "add_argument", "(", "'--test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'inference mode'", ")", "\n", "args", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "help", "=", "'batch_size'", ")", "\n", "args", ".", "add_argument", "(", "'--beam_size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'beam size, 1 for greedy'", ")", "\n", "args", ".", "add_argument", "(", "'--epoch'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "help", "=", "'training epoch'", ")", "\n", "args", ".", "add_argument", "(", "'--beam_max_len'", ",", "default", "=", "20", ",", "type", "=", "int", ",", "help", "=", "'max length of the generated text'", ")", "\n", "args", ".", "add_argument", "(", "'--enc_seq_layers'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'number of layers of sequence encoder'", ")", "\n", "args", ".", "add_argument", "(", "'--enc_seq_type'", ",", "default", "=", "\"GRU\"", ",", "type", "=", "str", ",", "help", "=", "'type of sequence encoder'", ")", "\n", "args", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "1e-1", ",", "type", "=", "float", ",", "help", "=", "'learning rate'", ")", "\n", "#args.add_argument('--lr_decay', default=1e-8, type=float, help='')", "\n", "args", ".", "add_argument", "(", "'--clip'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "'gradient clip'", ")", "\n", "args", ".", "add_argument", "(", "'--emb_drop'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "help", "=", "'embedding dropout'", ")", "\n", "args", ".", "add_argument", "(", "'--attn_drop'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'attention dropout'", ")", "\n", "args", ".", "add_argument", "(", "'--drop'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'dropout'", ")", "\n", "args", ".", "add_argument", "(", "'--lp'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'length penalty'", ")", "\n", "args", ".", "add_argument", "(", "'--graph_enc'", ",", "default", "=", "'gtrans'", ",", "type", "=", "str", ",", "help", "=", "'gnn mode'", ")", "\n", "args", ".", "add_argument", "(", "'--train_file'", ",", "default", "=", "'data/unprocessed.train.json'", ",", "type", "=", "str", ",", "help", "=", "'training file'", ")", "\n", "args", ".", "add_argument", "(", "'--valid_file'", ",", "default", "=", "'data/unprocessed.val.json'", ",", "type", "=", "str", ",", "help", "=", "'validation file'", ")", "\n", "args", ".", "add_argument", "(", "'--test_file'", ",", "default", "=", "'data/unprocessed.test.json'", ",", "type", "=", "str", ",", "help", "=", "'test file'", ")", "\n", "args", ".", "add_argument", "(", "'--save_dataset'", ",", "default", "=", "'data.pickle'", ",", "type", "=", "str", ",", "help", "=", "'save path of dataset'", ")", "\n", "args", ".", "add_argument", "(", "'--save_model'", ",", "default", "=", "'saved_model.pt'", ",", "type", "=", "str", ",", "help", "=", "'save path of model'", ")", "\n", "\n", "args", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'gpu mode'", ")", "\n", "args", "=", "args", ".", "parse_args", "(", ")", "\n", "args", "=", "fill_config", "(", "args", ")", "\n", "return", "args", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.gentaxo.GenTaxo.__init__": [[9, 37], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.init.xavier_normal_", "torch.nn.Embedding", "torch.nn.init.xavier_normal_", "modules.GraphTrans", "modules.MSA", "modules.MSA", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Embedding", "modules.BiGRU", "modules.MSA", "len", "len", "torch.nn.init.xavier_normal_", "len", "torch.nn.LSTMCell", "modules.BiLSTM", "torch.nn.GRUCell", "modules.BiGRU", "len", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "GenTaxo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "if", "args", ".", "seq", ":", "\n", "            ", "self", ".", "seq_emb", "=", "nn", ".", "Embedding", "(", "len", "(", "args", ".", "seq_vocab", ")", ",", "args", ".", "nhid", ",", "padding_idx", "=", "0", ")", "\n", "# self.seq_enc = BiLSTM(args, enc_type='title')", "\n", "self", ".", "seq_enc", "=", "BiGRU", "(", "args", ",", "enc_type", "=", "'seq'", ")", "\n", "self", ".", "seq_attn", "=", "MSA", "(", "args", ")", "\n", "", "self", ".", "ent_emb", "=", "nn", ".", "Embedding", "(", "len", "(", "args", ".", "ent_text_vocab", ")", ",", "args", ".", "nhid", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "tar_emb", "=", "nn", ".", "Embedding", "(", "len", "(", "args", ".", "text_vocab", ")", ",", "args", ".", "nhid", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "linear_combine", "=", "nn", ".", "Linear", "(", "args", ".", "nhid", ",", "1", ")", "\n", "self", ".", "activate_f", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "if", "args", ".", "seq", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "seq_emb", ".", "weight", ")", "\n", "", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "ent_emb", ".", "weight", ")", "\n", "self", ".", "rel_emb", "=", "nn", ".", "Embedding", "(", "len", "(", "args", ".", "rel_vocab", ")", ",", "args", ".", "nhid", ",", "padding_idx", "=", "0", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "rel_emb", ".", "weight", ")", "\n", "if", "args", ".", "enc_seq_type", "==", "\"LSTM\"", ":", "\n", "            ", "self", ".", "decode_seq", "=", "nn", ".", "LSTMCell", "(", "args", ".", "dec_ninp", ",", "args", ".", "nhid", ")", "\n", "self", ".", "ent_enc", "=", "BiLSTM", "(", "args", ",", "enc_type", "=", "'entity'", ")", "\n", "", "if", "args", ".", "enc_seq_type", "==", "\"GRU\"", ":", "\n", "            ", "self", ".", "decode_seq", "=", "nn", ".", "GRUCell", "(", "args", ".", "dec_ninp", ",", "args", ".", "nhid", ")", "\n", "self", ".", "ent_enc", "=", "BiGRU", "(", "args", ",", "enc_type", "=", "'entity'", ")", "\n", "", "self", ".", "graph_enc", "=", "GraphTrans", "(", "args", ")", "\n", "self", ".", "ent_attn", "=", "MSA", "(", "args", ")", "\n", "self", ".", "copy_attn", "=", "MSA", "(", "args", ",", "mode", "=", "'copy'", ")", "\n", "self", ".", "copy_fc", "=", "nn", ".", "Linear", "(", "args", ".", "dec_ninp", ",", "1", ")", "\n", "self", ".", "pred_v_fc", "=", "nn", ".", "Linear", "(", "args", ".", "dec_ninp", ",", "len", "(", "args", ".", "text_vocab", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.gentaxo.GenTaxo.enc_forward": [[38, 62], ["gentaxo.GenTaxo.ent_enc", "gentaxo.GenTaxo.rel_emb", "gentaxo.GenTaxo.graph_enc", "gentaxo.GenTaxo.seq_attn", "gentaxo.GenTaxo.seq_attn", "gentaxo.GenTaxo.seq_attn", "gentaxo.GenTaxo.activate_f", "gentaxo.GenTaxo.activate_f", "gentaxo.GenTaxo.activate_f", "torch.cat", "torch.cat", "torch.nn.Softmax", "torch.nn.Softmax.", "gentaxo.GenTaxo.seq_enc", "gentaxo.GenTaxo.seq_enc", "gentaxo.GenTaxo.seq_enc", "gentaxo.GenTaxo.ent_emb", "gentaxo.GenTaxo.linear_combine", "gentaxo.GenTaxo.linear_combine", "gentaxo.GenTaxo.linear_combine", "gentaxo.GenTaxo.seq_emb", "gentaxo.GenTaxo.seq_emb", "gentaxo.GenTaxo.seq_emb"], "methods", ["None"], ["", "def", "enc_forward", "(", "self", ",", "batch", ",", "ent_mask", ",", "ent_text_mask", ",", "ent_len", ",", "rel_mask", ",", "parent_mask", ",", "child_mask", ",", "sibling_mask", ")", ":", "\n", "        ", "seq_enc", "=", "None", "\n", "if", "self", ".", "args", ".", "seq", ":", "\n", "            ", "parent_enc", "=", "self", ".", "seq_enc", "(", "self", ".", "seq_emb", "(", "batch", "[", "'parent'", "]", ")", ",", "parent_mask", ")", "\n", "child_enc", "=", "self", ".", "seq_enc", "(", "self", ".", "seq_emb", "(", "batch", "[", "'child'", "]", ")", ",", "child_mask", ")", "\n", "sibling_enc", "=", "self", ".", "seq_enc", "(", "self", ".", "seq_emb", "(", "batch", "[", "'sibling'", "]", ")", ",", "sibling_mask", ")", "\n", "\n", "", "ent_enc", "=", "self", ".", "ent_enc", "(", "self", ".", "ent_emb", "(", "batch", "[", "'ent_text'", "]", ")", ",", "ent_text_mask", ",", "ent_len", "=", "batch", "[", "'ent_len'", "]", ")", "\n", "rel_emb", "=", "self", ".", "rel_emb", "(", "batch", "[", "'rel'", "]", ")", "\n", "g_ent", ",", "g_root", "=", "self", ".", "graph_enc", "(", "ent_enc", ",", "ent_mask", ",", "ent_len", ",", "rel_emb", ",", "rel_mask", ",", "batch", "[", "'graph'", "]", ")", "\n", "parent_enc", "=", "self", ".", "seq_attn", "(", "g_root", ",", "parent_enc", ")", "\n", "child_enc", "=", "self", ".", "seq_attn", "(", "g_root", ",", "child_enc", ")", "\n", "sibling_enc", "=", "self", ".", "seq_attn", "(", "g_root", ",", "sibling_enc", ")", "\n", "\n", "w_p", "=", "self", ".", "activate_f", "(", "(", "self", ".", "linear_combine", "(", "parent_enc", ")", ")", ")", "\n", "w_c", "=", "self", ".", "activate_f", "(", "(", "self", ".", "linear_combine", "(", "child_enc", ")", ")", ")", "\n", "w_s", "=", "self", ".", "activate_f", "(", "(", "self", ".", "linear_combine", "(", "sibling_enc", ")", ")", ")", "\n", "w", "=", "torch", ".", "cat", "(", "[", "w_p", ",", "w_c", ",", "w_s", "]", ",", "1", ")", "\n", "seq_enc", "=", "torch", ".", "cat", "(", "[", "parent_enc", ",", "child_enc", ",", "sibling_enc", "]", ",", "0", ")", "\n", "m", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "w", "=", "m", "(", "w", ")", "\n", "seq_enc", "=", "w", "@", "seq_enc", "\n", "\n", "return", "g_ent", ",", "g_root", ",", "seq_enc", ",", "ent_enc", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.gentaxo.GenTaxo.forward": [[63, 208], ["utlis.len2mask", "gentaxo.GenTaxo.enc_forward", "torch.cat", "g_root.clone().detach", "gentaxo.GenTaxo.ent_attn", "gentaxo.GenTaxo.tar_emb", "enumerate", "torch.stack", "torch.sigmoid", "torch.cat", "batch[].transpose", "torch.cat", "torch.stack.append", "gentaxo.GenTaxo.copy_fc", "torch.log", "torch.log_softmax", "torch.log", "torch.log_softmax", "batch[].view", "range", "gentaxo.GenTaxo.view().repeat().view", "[].view.view().repeat().view", "ent_mask.view().repeat().view.view().repeat().view.view().repeat().view", "torch.cat.view().repeat().view", "batch[].view().repeat().view", "g_ent.view().repeat().view.view().repeat().view.view().repeat().view", "ent_enc.view().repeat().view.view().repeat().view.view().repeat().view", "torch.zeros().to", "torch.zeros", "range", "g_root.clone", "gentaxo.GenTaxo.decode_seq", "gentaxo.GenTaxo.decode_seq", "gentaxo.GenTaxo.ent_attn", "torch.cat", "torch.cat", "gentaxo.GenTaxo.pred_v_fc", "gentaxo.GenTaxo.copy_attn", "utlis.replace_ent", "gentaxo.GenTaxo.tar_emb", "torch.cat", "torch.cat", "torch.sigmoid", "torch.cat().view", "torch.cat().view.max", "torch.cat", "title_mask.view().repeat().view.view().repeat().view.view().repeat().view", "title_enc.view().repeat().view.view().repeat().view.view().repeat().view", "g_ent.view().repeat().view.view().repeat().view.size", "ent_enc.view().repeat().view.view().repeat().view.size", "torch.zeros().to", "utlis.replace_ent", "gentaxo.GenTaxo.tar_emb", "torch.cat", "gentaxo.GenTaxo.decode_seq", "torch.cat", "torch.sigmoid", "torch.cat().view", "cum_score.topk", "gentaxo.GenTaxo.args.text_vocab", "range", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.LongTensor().view().to", "torch.Tensor().view().to", "torch.cat", "[].view", "[].view", "[].view", "len", "gentaxo.GenTaxo.decode_seq", "gentaxo.GenTaxo.decode_seq", "gentaxo.GenTaxo.ent_attn", "torch.cat", "gentaxo.GenTaxo.copy_fc", "torch.log", "torch.log_softmax", "torch.log", "torch.log_softmax", "gentaxo.GenTaxo.view().repeat", "[].view.view().repeat", "ent_mask.view().repeat().view.view().repeat().view.view().repeat", "title_enc.view().repeat().view.view().repeat().view.size", "torch.cat.view().repeat", "batch[].view().repeat", "g_ent.view().repeat().view.view().repeat().view.view().repeat", "ent_enc.view().repeat().view.view().repeat().view.view().repeat", "torch.zeros", "beam_seq[].view", "len", "gentaxo.GenTaxo.ent_attn", "torch.cat", "gentaxo.GenTaxo.copy_fc", "torch.log", "torch.log_softmax", "torch.log", "torch.log_softmax", "torch.zeros().to.view", "score.view", "word.view", "torch.cat.size", "torch.arange().to", "new_idx[].repeat", "score.topk", "torch.cat.size", "range", "torch.cat.view", "torch.ones().long().to", "gentaxo.GenTaxo.args.text_vocab", "gentaxo.GenTaxo.pred_v_fc", "gentaxo.GenTaxo.copy_attn().squeeze", "torch.cat", "word.unsqueeze", "title_mask.view().repeat().view.view().repeat().view.view().repeat", "title_enc.view().repeat().view.view().repeat().view.view().repeat", "torch.zeros", "torch.ones().long().to", "gentaxo.GenTaxo.args.text_vocab", "gentaxo.GenTaxo.title_attn", "gentaxo.GenTaxo.pred_v_fc", "gentaxo.GenTaxo.copy_attn().squeeze", "torch.cat", "torch.LongTensor().view().to.append", "torch.Tensor().view().to.append", "torch.Tensor().view", "torch.Tensor().view", "torch.LongTensor().view", "torch.Tensor().view", "torch.Tensor().view().to.unsqueeze", "gentaxo.GenTaxo.view", "[].view.view", "ent_mask.view().repeat().view.view().repeat().view.view", "torch.cat.view", "batch[].view", "g_ent.view().repeat().view.view().repeat().view.view", "ent_enc.view().repeat().view.view().repeat().view.view", "torch.arange", "torch.Tensor().view().to.append", "torch.Tensor().view().to.append", "torch.Tensor().view().to.append", "torch.Tensor().view().to.append", "[].to", "gentaxo.GenTaxo.view", "[].view.view", "torch.cat.view", "torch.ones().long", "gentaxo.GenTaxo.copy_attn", "gentaxo.GenTaxo.args.text_vocab", "title_mask.view().repeat().view.view().repeat().view.view", "title_enc.view().repeat().view.view().repeat().view.view", "g_ent.view().repeat().view.view().repeat().view.size", "ent_enc.view().repeat().view.view().repeat().view.size", "torch.ones().long", "gentaxo.GenTaxo.copy_attn", "gentaxo.GenTaxo.args.text_vocab", "gentaxo.GenTaxo.args.text_vocab", "gentaxo.GenTaxo.args.text_vocab", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "torch.Tensor", "torch.cat.unsqueeze", "title_enc.view().repeat().view.view().repeat().view.size", "torch.cat.unsqueeze", "[].to", "[].to", "[].to", "torch.ones", "torch.ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.len2mask", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.gentaxo.GenTaxo.enc_forward", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.replace_ent", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.replace_ent", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size"], ["", "def", "forward", "(", "self", ",", "batch", ",", "beam_size", "=", "-", "1", ")", ":", "\n", "        ", "ent_mask", "=", "len2mask", "(", "batch", "[", "'ent_len'", "]", ",", "self", ".", "args", ".", "device", ")", "\n", "ent_text_mask", "=", "batch", "[", "'ent_text'", "]", "==", "0", "\n", "rel_mask", "=", "batch", "[", "'rel'", "]", "==", "0", "# 0 means the <PAD>", "\n", "parent_mask", "=", "batch", "[", "'parent'", "]", "==", "0", "\n", "child_mask", "=", "batch", "[", "'child'", "]", "==", "0", "\n", "sibling_mask", "=", "batch", "[", "'sibling'", "]", "==", "0", "\n", "g_ent", ",", "g_root", ",", "seq_enc", ",", "ent_enc", "=", "self", ".", "enc_forward", "(", "batch", ",", "ent_mask", ",", "ent_text_mask", ",", "batch", "[", "'ent_len'", "]", ",", "rel_mask", ",", "parent_mask", ",", "child_mask", ",", "sibling_mask", ")", "\n", "_h", ",", "_c", "=", "g_root", ",", "g_root", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "ctx", "=", "_h", "+", "self", ".", "ent_attn", "(", "_h", ",", "g_ent", ",", "mask", "=", "ent_mask", ")", "\n", "ctx", "=", "torch", ".", "cat", "(", "[", "ctx", ",", "seq_enc", "]", ",", "1", ")", "\n", "if", "beam_size", "<", "1", ":", "\n", "# training", "\n", "            ", "outs", "=", "[", "]", "\n", "tar_inp", "=", "self", ".", "tar_emb", "(", "batch", "[", "'text'", "]", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "for", "t", ",", "xt", "in", "enumerate", "(", "tar_inp", ")", ":", "\n", "                ", "_xt", "=", "torch", ".", "cat", "(", "[", "ctx", ",", "xt", "]", ",", "1", ")", "\n", "if", "self", ".", "args", ".", "enc_seq_type", "==", "\"LSTM\"", ":", "\n", "                    ", "_h", ",", "_c", "=", "self", ".", "decode_seq", "(", "_xt", ",", "(", "_h", ",", "_c", ")", ")", "\n", "", "if", "self", ".", "args", ".", "enc_seq_type", "==", "\"GRU\"", ":", "\n", "                    ", "_h", "=", "self", ".", "decode_seq", "(", "_xt", ",", "_h", ")", "\n", "", "ctx", "=", "_h", "+", "self", ".", "ent_attn", "(", "_h", ",", "g_ent", ",", "mask", "=", "ent_mask", ")", "\n", "if", "self", ".", "args", ".", "seq", ":", "\n", "                    ", "ctx", "=", "torch", ".", "cat", "(", "[", "ctx", ",", "seq_enc", "]", ",", "1", ")", "\n", "", "outs", ".", "append", "(", "torch", ".", "cat", "(", "[", "_h", ",", "ctx", "]", ",", "1", ")", ")", "\n", "", "outs", "=", "torch", ".", "stack", "(", "outs", ",", "1", ")", "\n", "copy_gate", "=", "torch", ".", "sigmoid", "(", "self", ".", "copy_fc", "(", "outs", ")", ")", "\n", "EPSI", "=", "1e-6", "\n", "# copy", "\n", "pred_v", "=", "torch", ".", "log", "(", "copy_gate", "+", "EPSI", ")", "+", "torch", ".", "log_softmax", "(", "self", ".", "pred_v_fc", "(", "outs", ")", ",", "-", "1", ")", "\n", "pred_c", "=", "torch", ".", "log", "(", "(", "1.", "-", "copy_gate", ")", "+", "EPSI", ")", "+", "torch", ".", "log_softmax", "(", "self", ".", "copy_attn", "(", "outs", ",", "ent_enc", ",", "mask", "=", "ent_mask", ")", ",", "-", "1", ")", "\n", "pred", "=", "torch", ".", "cat", "(", "[", "pred_v", ",", "pred_c", "]", ",", "-", "1", ")", "\n", "return", "pred", "\n", "", "else", ":", "\n", "            ", "if", "beam_size", "==", "1", ":", "\n", "# greedy", "\n", "                ", "device", "=", "g_ent", ".", "device", "\n", "B", "=", "g_ent", ".", "shape", "[", "0", "]", "\n", "ent_type", "=", "batch", "[", "'ent_type'", "]", ".", "view", "(", "B", ",", "-", "1", ")", "\n", "seq", "=", "(", "torch", ".", "ones", "(", "B", ",", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "*", "self", ".", "args", ".", "text_vocab", "(", "'<BOS>'", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "for", "t", "in", "range", "(", "self", ".", "args", ".", "beam_max_len", ")", ":", "\n", "                    ", "_inp", "=", "replace_ent", "(", "seq", "[", ":", ",", "-", "1", "]", ",", "ent_type", ",", "len", "(", "self", ".", "args", ".", "text_vocab", ")", ")", "\n", "xt", "=", "self", ".", "tar_emb", "(", "_inp", ")", "\n", "_xt", "=", "torch", ".", "cat", "(", "[", "ctx", ",", "xt", "]", ",", "1", ")", "\n", "if", "self", ".", "args", ".", "enc_seq_type", "==", "\"LSTM\"", ":", "\n", "                        ", "_h", ",", "_c", "=", "self", ".", "decode_seq", "(", "_xt", ",", "(", "_h", ",", "_c", ")", ")", "\n", "", "if", "self", ".", "args", ".", "enc_seq_type", "==", "\"GRU\"", ":", "\n", "                        ", "_h", "=", "self", ".", "decode_seq", "(", "_xt", ",", "_h", ")", "\n", "", "ctx", "=", "_h", "+", "self", ".", "ent_attn", "(", "_h", ",", "g_ent", ",", "mask", "=", "ent_mask", ")", "\n", "if", "self", ".", "args", ".", "seq", ":", "\n", "                        ", "ctx", "=", "torch", ".", "cat", "(", "[", "ctx", ",", "seq_enc", "]", ",", "1", ")", "\n", "", "_y", "=", "torch", ".", "cat", "(", "[", "_h", ",", "ctx", "]", ",", "1", ")", "\n", "copy_gate", "=", "torch", ".", "sigmoid", "(", "self", ".", "copy_fc", "(", "_y", ")", ")", "\n", "pred_v", "=", "torch", ".", "log", "(", "copy_gate", ")", "+", "torch", ".", "log_softmax", "(", "self", ".", "pred_v_fc", "(", "_y", ")", ",", "-", "1", ")", "\n", "pred_c", "=", "torch", ".", "log", "(", "(", "1.", "-", "copy_gate", ")", ")", "+", "torch", ".", "log_softmax", "(", "self", ".", "copy_attn", "(", "_y", ".", "unsqueeze", "(", "1", ")", ",", "ent_enc", ",", "mask", "=", "ent_mask", ")", ".", "squeeze", "(", "1", ")", ",", "-", "1", ")", "\n", "pred", "=", "torch", ".", "cat", "(", "[", "pred_v", ",", "pred_c", "]", ",", "-", "1", ")", ".", "view", "(", "B", ",", "-", "1", ")", "\n", "for", "ban_item", "in", "[", "'<BOS>'", ",", "'<PAD>'", ",", "'<UNK>'", "]", ":", "\n", "                        ", "pred", "[", ":", ",", "self", ".", "args", ".", "text_vocab", "(", "ban_item", ")", "]", "=", "-", "1e8", "\n", "", "_", ",", "word", "=", "pred", ".", "max", "(", "-", "1", ")", "\n", "seq", "=", "torch", ".", "cat", "(", "[", "seq", ",", "word", ".", "unsqueeze", "(", "1", ")", "]", ",", "1", ")", "\n", "", "return", "seq", "\n", "", "else", ":", "\n", "# beam search", "\n", "                ", "device", "=", "g_ent", ".", "device", "\n", "B", "=", "g_ent", ".", "shape", "[", "0", "]", "\n", "BSZ", "=", "B", "*", "beam_size", "\n", "_h", "=", "_h", ".", "view", "(", "B", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "beam_size", ",", "1", ")", ".", "view", "(", "BSZ", ",", "-", "1", ")", "\n", "_c", "=", "_c", ".", "view", "(", "B", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "beam_size", ",", "1", ")", ".", "view", "(", "BSZ", ",", "-", "1", ")", "\n", "ent_mask", "=", "ent_mask", ".", "view", "(", "B", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "beam_size", ",", "1", ")", ".", "view", "(", "BSZ", ",", "-", "1", ")", "\n", "if", "self", ".", "args", ".", "title", ":", "\n", "                    ", "title_mask", "=", "title_mask", ".", "view", "(", "B", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "beam_size", ",", "1", ")", ".", "view", "(", "BSZ", ",", "-", "1", ")", "\n", "title_enc", "=", "title_enc", ".", "view", "(", "B", ",", "1", ",", "title_enc", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "beam_size", ",", "1", ",", "1", ")", ".", "view", "(", "BSZ", ",", "title_enc", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "", "ctx", "=", "ctx", ".", "view", "(", "B", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "beam_size", ",", "1", ")", ".", "view", "(", "BSZ", ",", "-", "1", ")", "\n", "ent_type", "=", "batch", "[", "'ent_type'", "]", ".", "view", "(", "B", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "beam_size", ",", "1", ")", ".", "view", "(", "BSZ", ",", "-", "1", ")", "\n", "g_ent", "=", "g_ent", ".", "view", "(", "B", ",", "1", ",", "g_ent", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "beam_size", ",", "1", ",", "1", ")", ".", "view", "(", "BSZ", ",", "g_ent", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "ent_enc", "=", "ent_enc", ".", "view", "(", "B", ",", "1", ",", "ent_enc", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "beam_size", ",", "1", ",", "1", ")", ".", "view", "(", "BSZ", ",", "ent_enc", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "\n", "beam_best", "=", "torch", ".", "zeros", "(", "B", ")", ".", "to", "(", "device", ")", "-", "1e9", "\n", "beam_best_seq", "=", "[", "None", "]", "*", "B", "\n", "beam_seq", "=", "(", "torch", ".", "ones", "(", "B", ",", "beam_size", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "*", "self", ".", "args", ".", "text_vocab", "(", "'<BOS>'", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "beam_score", "=", "torch", ".", "zeros", "(", "B", ",", "beam_size", ")", ".", "to", "(", "device", ")", "\n", "done_flag", "=", "torch", ".", "zeros", "(", "B", ",", "beam_size", ")", "\n", "for", "t", "in", "range", "(", "self", ".", "args", ".", "beam_max_len", ")", ":", "\n", "                    ", "_inp", "=", "replace_ent", "(", "beam_seq", "[", ":", ",", ":", ",", "-", "1", "]", ".", "view", "(", "-", "1", ")", ",", "ent_type", ",", "len", "(", "self", ".", "args", ".", "text_vocab", ")", ")", "\n", "xt", "=", "self", ".", "tar_emb", "(", "_inp", ")", "\n", "_xt", "=", "torch", ".", "cat", "(", "[", "ctx", ",", "xt", "]", ",", "1", ")", "\n", "_h", ",", "_c", "=", "self", ".", "decode_seq", "(", "_xt", ",", "(", "_h", ",", "_c", ")", ")", "\n", "ctx", "=", "_h", "+", "self", ".", "ent_attn", "(", "_h", ",", "g_ent", ",", "mask", "=", "ent_mask", ")", "\n", "if", "self", ".", "args", ".", "title", ":", "\n", "                        ", "attn", "=", "_h", "+", "self", ".", "title_attn", "(", "_h", ",", "title_enc", ",", "mask", "=", "title_mask", ")", "\n", "ctx", "=", "torch", ".", "cat", "(", "[", "ctx", ",", "attn", "]", ",", "1", ")", "\n", "", "_y", "=", "torch", ".", "cat", "(", "[", "_h", ",", "ctx", "]", ",", "1", ")", "\n", "copy_gate", "=", "torch", ".", "sigmoid", "(", "self", ".", "copy_fc", "(", "_y", ")", ")", "\n", "pred_v", "=", "torch", ".", "log", "(", "copy_gate", ")", "+", "torch", ".", "log_softmax", "(", "self", ".", "pred_v_fc", "(", "_y", ")", ",", "-", "1", ")", "\n", "pred_c", "=", "torch", ".", "log", "(", "(", "1.", "-", "copy_gate", ")", ")", "+", "torch", ".", "log_softmax", "(", "self", ".", "copy_attn", "(", "_y", ".", "unsqueeze", "(", "1", ")", ",", "ent_enc", ",", "mask", "=", "ent_mask", ")", ".", "squeeze", "(", "1", ")", ",", "-", "1", ")", "\n", "pred", "=", "torch", ".", "cat", "(", "[", "pred_v", ",", "pred_c", "]", ",", "-", "1", ")", ".", "view", "(", "B", ",", "beam_size", ",", "-", "1", ")", "\n", "for", "ban_item", "in", "[", "'<BOS>'", ",", "'<PAD>'", ",", "'<UNK>'", "]", ":", "\n", "                        ", "pred", "[", ":", ",", ":", ",", "self", ".", "args", ".", "text_vocab", "(", "ban_item", ")", "]", "=", "-", "1e8", "\n", "", "if", "t", "==", "self", ".", "args", ".", "beam_max_len", "-", "1", ":", "# force ending ", "\n", "                        ", "tt", "=", "pred", "[", ":", ",", ":", ",", "self", ".", "args", ".", "text_vocab", "(", "'<EOS>'", ")", "]", "\n", "pred", "=", "pred", "*", "0", "-", "1e8", "\n", "pred", "[", ":", ",", ":", ",", "self", ".", "args", ".", "text_vocab", "(", "'<EOS>'", ")", "]", "=", "tt", "\n", "", "cum_score", "=", "beam_score", ".", "view", "(", "B", ",", "beam_size", ",", "1", ")", "+", "pred", "\n", "score", ",", "word", "=", "cum_score", ".", "topk", "(", "dim", "=", "-", "1", ",", "k", "=", "beam_size", ")", "# B, beam_size, beam_size", "\n", "score", ",", "word", "=", "score", ".", "view", "(", "B", ",", "-", "1", ")", ",", "word", ".", "view", "(", "B", ",", "-", "1", ")", "\n", "eos_idx", "=", "self", ".", "args", ".", "text_vocab", "(", "'<EOS>'", ")", "\n", "if", "beam_seq", ".", "size", "(", "2", ")", "==", "1", ":", "\n", "                        ", "new_idx", "=", "torch", ".", "arange", "(", "beam_size", ")", ".", "to", "(", "word", ")", "\n", "new_idx", "=", "new_idx", "[", "None", ",", ":", "]", ".", "repeat", "(", "B", ",", "1", ")", "\n", "", "else", ":", "\n", "                        ", "_", ",", "new_idx", "=", "score", ".", "topk", "(", "dim", "=", "-", "1", ",", "k", "=", "beam_size", ")", "\n", "", "new_src", ",", "new_score", ",", "new_word", ",", "new_done", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "LP", "=", "beam_seq", ".", "size", "(", "2", ")", "**", "self", ".", "args", ".", "lp", "\n", "for", "i", "in", "range", "(", "B", ")", ":", "\n", "                        ", "for", "j", "in", "range", "(", "beam_size", ")", ":", "\n", "                            ", "tmp_score", "=", "score", "[", "i", "]", "[", "new_idx", "[", "i", "]", "[", "j", "]", "]", "\n", "tmp_word", "=", "word", "[", "i", "]", "[", "new_idx", "[", "i", "]", "[", "j", "]", "]", "\n", "src_idx", "=", "new_idx", "[", "i", "]", "[", "j", "]", "//", "beam_size", "\n", "new_src", ".", "append", "(", "src_idx", ")", "\n", "if", "tmp_word", "==", "eos_idx", ":", "\n", "                                ", "new_score", ".", "append", "(", "-", "1e8", ")", "\n", "", "else", ":", "\n", "                                ", "new_score", ".", "append", "(", "tmp_score", ")", "\n", "", "new_word", ".", "append", "(", "tmp_word", ")", "\n", "\n", "if", "tmp_word", "==", "eos_idx", "and", "done_flag", "[", "i", "]", "[", "src_idx", "]", "==", "0", "and", "tmp_score", "/", "LP", ">", "beam_best", "[", "i", "]", ":", "\n", "                                ", "beam_best", "[", "i", "]", "=", "tmp_score", "/", "LP", "\n", "beam_best_seq", "[", "i", "]", "=", "beam_seq", "[", "i", "]", "[", "src_idx", "]", "\n", "", "if", "tmp_word", "==", "eos_idx", ":", "\n", "                                ", "new_done", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                                ", "new_done", ".", "append", "(", "done_flag", "[", "i", "]", "[", "src_idx", "]", ")", "\n", "", "", "", "new_score", "=", "torch", ".", "Tensor", "(", "new_score", ")", ".", "view", "(", "B", ",", "beam_size", ")", ".", "to", "(", "beam_score", ")", "\n", "new_word", "=", "torch", ".", "Tensor", "(", "new_word", ")", ".", "view", "(", "B", ",", "beam_size", ")", ".", "to", "(", "beam_seq", ")", "\n", "new_src", "=", "torch", ".", "LongTensor", "(", "new_src", ")", ".", "view", "(", "B", ",", "beam_size", ")", ".", "to", "(", "device", ")", "\n", "new_done", "=", "torch", ".", "Tensor", "(", "new_done", ")", ".", "view", "(", "B", ",", "beam_size", ")", ".", "to", "(", "done_flag", ")", "\n", "beam_score", "=", "new_score", "\n", "done_flag", "=", "new_done", "\n", "beam_seq", "=", "beam_seq", ".", "view", "(", "B", ",", "beam_size", ",", "-", "1", ")", "[", "torch", ".", "arange", "(", "B", ")", "[", ":", ",", "None", "]", ".", "to", "(", "device", ")", ",", "new_src", "]", "\n", "beam_seq", "=", "torch", ".", "cat", "(", "[", "beam_seq", ",", "new_word", ".", "unsqueeze", "(", "2", ")", "]", ",", "2", ")", "\n", "_h", "=", "_h", ".", "view", "(", "B", ",", "beam_size", ",", "-", "1", ")", "[", "torch", ".", "arange", "(", "B", ")", "[", ":", ",", "None", "]", ".", "to", "(", "device", ")", ",", "new_src", "]", ".", "view", "(", "BSZ", ",", "-", "1", ")", "\n", "_c", "=", "_c", ".", "view", "(", "B", ",", "beam_size", ",", "-", "1", ")", "[", "torch", ".", "arange", "(", "B", ")", "[", ":", ",", "None", "]", ".", "to", "(", "device", ")", ",", "new_src", "]", ".", "view", "(", "BSZ", ",", "-", "1", ")", "\n", "ctx", "=", "ctx", ".", "view", "(", "B", ",", "beam_size", ",", "-", "1", ")", "[", "torch", ".", "arange", "(", "B", ")", "[", ":", ",", "None", "]", ".", "to", "(", "device", ")", ",", "new_src", "]", ".", "view", "(", "BSZ", ",", "-", "1", ")", "\n", "\n", "", "return", "beam_best_seq", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.modules.MSA.__init__": [[19, 33], ["torch.nn.Module.__init__", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "mode", "=", "'normal'", ")", ":", "\n", "        ", "super", "(", "MSA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "mode", "==", "'copy'", ":", "\n", "            ", "nhead", ",", "head_dim", "=", "1", ",", "args", ".", "nhid", "\n", "qninp", ",", "kninp", "=", "args", ".", "dec_ninp", ",", "args", ".", "nhid", "\n", "", "if", "mode", "==", "'normal'", ":", "\n", "            ", "nhead", ",", "head_dim", "=", "args", ".", "nhead", ",", "args", ".", "head_dim", "\n", "qninp", ",", "kninp", "=", "args", ".", "nhid", ",", "args", ".", "nhid", "\n", "", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "self", ".", "WQ", "=", "nn", ".", "Linear", "(", "qninp", ",", "nhead", "*", "head_dim", ",", "bias", "=", "True", "if", "mode", "==", "'copy'", "else", "False", ")", "\n", "if", "mode", "!=", "'copy'", ":", "\n", "            ", "self", ".", "WK", "=", "nn", ".", "Linear", "(", "kninp", ",", "nhead", "*", "head_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "WV", "=", "nn", ".", "Linear", "(", "kninp", ",", "nhead", "*", "head_dim", ",", "bias", "=", "False", ")", "\n", "", "self", ".", "args", ",", "self", ".", "nhead", ",", "self", ".", "head_dim", ",", "self", ".", "mode", "=", "args", ",", "nhead", ",", "head_dim", ",", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.modules.MSA.forward": [[34, 60], ["q.view().permute.view().permute.view().permute", "k.view().permute.view().permute.view().permute", "v.view().permute.view().permute.view().permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pre_attn.masked_fill.masked_fill.masked_fill", "pre_attn.masked_fill.masked_fill.squeeze", "modules.MSA.attn_drop", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "torch.matmul().permute().contiguous().view", "modules.MSA.WQ", "modules.MSA.WQ", "modules.MSA.WK", "modules.MSA.WV", "math.sqrt", "q.view().permute.view().permute.view", "k.view().permute.view().permute.view", "v.view().permute.view().permute.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "ret.squeeze", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute().contiguous", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul().permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp1", ",", "inp2", ",", "mask", "=", "None", ")", ":", "\n", "        ", "B", ",", "L2", ",", "H", "=", "inp2", ".", "shape", "\n", "NH", ",", "HD", "=", "self", ".", "nhead", ",", "self", ".", "head_dim", "\n", "if", "self", ".", "mode", "==", "'copy'", ":", "\n", "            ", "q", ",", "k", ",", "v", "=", "self", ".", "WQ", "(", "inp1", ")", ",", "inp2", ",", "inp2", "\n", "", "else", ":", "\n", "            ", "q", ",", "k", ",", "v", "=", "self", ".", "WQ", "(", "inp1", ")", ",", "self", ".", "WK", "(", "inp2", ")", ",", "self", ".", "WV", "(", "inp2", ")", "\n", "", "L1", "=", "1", "if", "inp1", ".", "ndim", "==", "2", "else", "inp1", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "mode", "!=", "'copy'", ":", "\n", "            ", "q", "=", "q", "/", "math", ".", "sqrt", "(", "H", ")", "\n", "", "q", "=", "q", ".", "view", "(", "B", ",", "L1", ",", "NH", ",", "HD", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "k", "=", "k", ".", "view", "(", "B", ",", "L2", ",", "NH", ",", "HD", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "v", "=", "v", ".", "view", "(", "B", ",", "L2", ",", "NH", ",", "HD", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "pre_attn", "=", "torch", ".", "matmul", "(", "q", ",", "k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "pre_attn", "=", "pre_attn", ".", "masked_fill", "(", "mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", ",", "-", "1e8", ")", "\n", "", "if", "self", ".", "mode", "==", "'copy'", ":", "\n", "            ", "return", "pre_attn", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "alpha", "=", "self", ".", "attn_drop", "(", "torch", ".", "softmax", "(", "pre_attn", ",", "-", "1", ")", ")", "\n", "attn", "=", "torch", ".", "matmul", "(", "alpha", ",", "v", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "L1", ",", "NH", "*", "HD", ")", "\n", "ret", "=", "attn", "\n", "if", "inp1", ".", "ndim", "==", "2", ":", "\n", "                ", "return", "ret", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.modules.BiLSTM.__init__": [[64, 70], ["torch.nn.Module.__init__", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LSTM", "torch.nn.LSTM"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "enc_type", "=", "'seq'", ")", ":", "\n", "        ", "super", "(", "BiLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "enc_type", "=", "enc_type", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "args", ".", "emb_drop", ")", "\n", "self", ".", "bilstm", "=", "nn", ".", "LSTM", "(", "args", ".", "nhid", ",", "args", ".", "nhid", "//", "2", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "args", ".", "enc_seq_layers", ",", "batch_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.modules.BiLSTM.forward": [[71, 84], ["modules.BiLSTM.drop", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "modules.BiLSTM.bilstm", "_h[].view.transpose().contiguous", "_h[].view", "utlis.pad", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "_h[].view.size", "_h[].view.split", "_h[].view.transpose"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.pad", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size"], ["", "def", "forward", "(", "self", ",", "inp", ",", "mask", ",", "ent_len", "=", "None", ")", ":", "\n", "        ", "inp", "=", "self", ".", "drop", "(", "inp", ")", "\n", "lens", "=", "(", "mask", "==", "0", ")", ".", "sum", "(", "-", "1", ")", ".", "long", "(", ")", ".", "tolist", "(", ")", "\n", "pad_seq", "=", "pack_padded_sequence", "(", "inp", ",", "lens", ",", "batch_first", "=", "True", ",", "enforce_sorted", "=", "False", ")", "\n", "y", ",", "(", "_h", ",", "_c", ")", "=", "self", ".", "bilstm", "(", "pad_seq", ")", "\n", "if", "self", ".", "enc_type", "==", "'seq'", ":", "\n", "            ", "y", "=", "pad_packed_sequence", "(", "y", ",", "batch_first", "=", "True", ")", "[", "0", "]", "\n", "return", "y", "\n", "", "if", "self", ".", "enc_type", "==", "'entity'", ":", "\n", "            ", "_h", "=", "_h", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "_h", "=", "_h", "[", ":", ",", "-", "2", ":", "]", ".", "view", "(", "_h", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# two directions of the top-layer", "\n", "ret", "=", "pad", "(", "_h", ".", "split", "(", "ent_len", ")", ",", "out_type", "=", "'tensor'", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.modules.BiGRU.__init__": [[88, 94], ["torch.nn.Module.__init__", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.GRU", "torch.nn.GRU"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "enc_type", "=", "'seq'", ")", ":", "\n", "        ", "super", "(", "BiGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "enc_type", "=", "enc_type", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "args", ".", "emb_drop", ")", "\n", "self", ".", "bigru", "=", "nn", ".", "GRU", "(", "args", ".", "nhid", ",", "args", ".", "nhid", "//", "2", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "args", ".", "enc_seq_layers", ",", "batch_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.modules.BiGRU.forward": [[95, 108], ["modules.BiGRU.drop", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "modules.BiGRU.bigru", "_h[].view.transpose().contiguous", "_h[].view", "utlis.pad", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "_h[].view.size", "_h[].view.split", "_h[].view.transpose"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.pad", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size"], ["", "def", "forward", "(", "self", ",", "inp", ",", "mask", ",", "ent_len", "=", "None", ")", ":", "\n", "        ", "inp", "=", "self", ".", "drop", "(", "inp", ")", "\n", "lens", "=", "(", "mask", "==", "0", ")", ".", "sum", "(", "-", "1", ")", ".", "long", "(", ")", ".", "tolist", "(", ")", "\n", "pad_seq", "=", "pack_padded_sequence", "(", "inp", ",", "lens", ",", "batch_first", "=", "True", ",", "enforce_sorted", "=", "False", ")", "\n", "y", ",", "_h", "=", "self", ".", "bigru", "(", "pad_seq", ")", "\n", "if", "self", ".", "enc_type", "==", "'seq'", ":", "\n", "            ", "y", "=", "pad_packed_sequence", "(", "y", ",", "batch_first", "=", "True", ")", "[", "0", "]", "\n", "return", "y", "\n", "", "if", "self", ".", "enc_type", "==", "'entity'", ":", "\n", "            ", "_h", "=", "_h", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "_h", "=", "_h", "[", ":", ",", "-", "2", ":", "]", ".", "view", "(", "_h", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# two directions of the top-layer", "\n", "ret", "=", "pad", "(", "_h", ".", "split", "(", "ent_len", ")", ",", "out_type", "=", "'tensor'", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.modules.GAT.__init__": [[111, 137], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_feats", ",", "\n", "out_feats", ",", "\n", "num_heads", ",", "\n", "ffn_drop", "=", "0.", ",", "\n", "attn_drop", "=", "0.", ",", "\n", "trans", "=", "True", ")", ":", "\n", "        ", "super", "(", "GAT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_num_heads", "=", "num_heads", "\n", "self", ".", "_in_feats", "=", "in_feats", "\n", "self", ".", "_out_feats", "=", "out_feats", "\n", "self", ".", "q_proj", "=", "nn", ".", "Linear", "(", "in_feats", ",", "num_heads", "*", "out_feats", ",", "bias", "=", "False", ")", "\n", "self", ".", "k_proj", "=", "nn", ".", "Linear", "(", "in_feats", ",", "num_heads", "*", "out_feats", ",", "bias", "=", "False", ")", "\n", "self", ".", "v_proj", "=", "nn", ".", "Linear", "(", "in_feats", ",", "num_heads", "*", "out_feats", ",", "bias", "=", "False", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "self", ".", "ln1", "=", "nn", ".", "LayerNorm", "(", "in_feats", ")", "\n", "self", ".", "ln2", "=", "nn", ".", "LayerNorm", "(", "in_feats", ")", "\n", "if", "trans", ":", "\n", "            ", "self", ".", "FFN", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_feats", ",", "4", "*", "in_feats", ")", ",", "\n", "nn", ".", "PReLU", "(", "4", "*", "in_feats", ")", ",", "\n", "nn", ".", "Linear", "(", "4", "*", "in_feats", ",", "in_feats", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ")", ",", "\n", ")", "\n", "# a strange FFN, see the author's code", "\n", "", "self", ".", "_trans", "=", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.modules.GAT.forward": [[138, 161], ["graph.local_var.local_var.local_var", "feat.clone().detach().requires_grad_", "q.view.view.view", "k.view.view.view", "v.view.view.view", "graph.local_var.local_var.ndata.update", "graph.local_var.local_var.apply_edges", "dgl.nn.functional.edge_softmax", "graph.local_var.local_var.update_all", "modules.GAT.q_proj", "modules.GAT.k_proj", "modules.GAT.v_proj", "dgl.u_dot_v", "graph.local_var.local_var.edata.pop", "math.sqrt", "dgl.u_mul_e", "dgl.sum", "modules.GAT.view", "modules.GAT.ln1", "modules.GAT.ln1", "feat.clone().detach", "modules.GAT.FFN", "feat.clone"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.GATLayer.edge_softmax"], ["", "def", "forward", "(", "self", ",", "graph", ",", "feat", ")", ":", "\n", "        ", "graph", "=", "graph", ".", "local_var", "(", ")", "\n", "feat_c", "=", "feat", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "False", ")", "\n", "q", ",", "k", ",", "v", "=", "self", ".", "q_proj", "(", "feat", ")", ",", "self", ".", "k_proj", "(", "feat_c", ")", ",", "self", ".", "v_proj", "(", "feat_c", ")", "\n", "q", "=", "q", ".", "view", "(", "-", "1", ",", "self", ".", "_num_heads", ",", "self", ".", "_out_feats", ")", "\n", "k", "=", "k", ".", "view", "(", "-", "1", ",", "self", ".", "_num_heads", ",", "self", ".", "_out_feats", ")", "\n", "v", "=", "v", ".", "view", "(", "-", "1", ",", "self", ".", "_num_heads", ",", "self", ".", "_out_feats", ")", "\n", "graph", ".", "ndata", ".", "update", "(", "{", "'ft'", ":", "v", ",", "'el'", ":", "k", ",", "'er'", ":", "q", "}", ")", "# k,q instead of q,k, the edge_softmax is applied on incoming edges", "\n", "# compute edge attention", "\n", "graph", ".", "apply_edges", "(", "fn", ".", "u_dot_v", "(", "'el'", ",", "'er'", ",", "'e'", ")", ")", "\n", "e", "=", "graph", ".", "edata", ".", "pop", "(", "'e'", ")", "/", "math", ".", "sqrt", "(", "self", ".", "_out_feats", "*", "self", ".", "_num_heads", ")", "\n", "graph", ".", "edata", "[", "'a'", "]", "=", "edge_softmax", "(", "graph", ",", "e", ")", "\n", "# message passing", "\n", "graph", ".", "update_all", "(", "fn", ".", "u_mul_e", "(", "'ft'", ",", "'a'", ",", "'m'", ")", ",", "\n", "fn", ".", "sum", "(", "'m'", ",", "'ft2'", ")", ")", "\n", "rst", "=", "graph", ".", "ndata", "[", "'ft2'", "]", "\n", "# residual", "\n", "rst", "=", "rst", ".", "view", "(", "feat", ".", "shape", ")", "+", "feat", "\n", "if", "self", ".", "_trans", ":", "\n", "            ", "rst", "=", "self", ".", "ln1", "(", "rst", ")", "\n", "rst", "=", "self", ".", "ln1", "(", "rst", "+", "self", ".", "FFN", "(", "rst", ")", ")", "\n", "# use the same layer norm, see the author's code", "\n", "", "return", "rst", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.modules.GraphTrans.__init__": [[164, 173], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "modules.GAT", "modules.GAT", "range", "range"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "if", "args", ".", "graph_enc", "==", "\"gat\"", ":", "\n", "# we only support gtrans, don't use this one", "\n", "            ", "self", ".", "gat", "=", "nn", ".", "ModuleList", "(", "[", "GAT", "(", "args", ".", "nhid", ",", "args", ".", "nhid", "//", "4", ",", "4", ",", "attn_drop", "=", "args", ".", "attn_drop", ",", "trans", "=", "False", ")", "for", "_", "in", "range", "(", "args", ".", "prop", ")", "]", ")", "#untested", "\n", "", "else", ":", "\n", "            ", "self", ".", "gat", "=", "nn", ".", "ModuleList", "(", "[", "GAT", "(", "args", ".", "nhid", ",", "args", ".", "nhid", "//", "4", ",", "4", ",", "attn_drop", "=", "args", ".", "attn_drop", ",", "ffn_drop", "=", "args", ".", "drop", ",", "trans", "=", "True", ")", "for", "_", "in", "range", "(", "args", ".", "prop", ")", "]", ")", "\n", "", "self", ".", "prop", "=", "args", ".", "prop", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.modules.GraphTrans.forward": [[174, 190], ["graphs.to.to.to", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "feats.index_select", "utlis.pad", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "graphs.to.to.filter_nodes().to", "feats.index_select().split", "graphs.to.to.filter_nodes", "feats.index_select", "graphs.to.to.filter_nodes().to", "graphs.to.to.filter_nodes"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.pad"], ["", "def", "forward", "(", "self", ",", "ent", ",", "ent_mask", ",", "ent_len", ",", "rel", ",", "rel_mask", ",", "graphs", ")", ":", "\n", "        ", "device", "=", "ent", ".", "device", "\n", "graphs", "=", "graphs", ".", "to", "(", "device", ")", "\n", "ent_mask", "=", "(", "ent_mask", "==", "0", ")", "# reverse mask", "\n", "rel_mask", "=", "(", "rel_mask", "==", "0", ")", "\n", "init_h", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "graphs", ".", "batch_size", ")", ":", "\n", "            ", "init_h", ".", "append", "(", "ent", "[", "i", "]", "[", "ent_mask", "[", "i", "]", "]", ")", "\n", "init_h", ".", "append", "(", "rel", "[", "i", "]", "[", "rel_mask", "[", "i", "]", "]", ")", "\n", "", "init_h", "=", "torch", ".", "cat", "(", "init_h", ",", "0", ")", "\n", "feats", "=", "init_h", "\n", "for", "i", "in", "range", "(", "self", ".", "prop", ")", ":", "\n", "            ", "feats", "=", "self", ".", "gat", "[", "i", "]", "(", "graphs", ",", "feats", ")", "\n", "", "g_root", "=", "feats", ".", "index_select", "(", "0", ",", "graphs", ".", "filter_nodes", "(", "lambda", "x", ":", "x", ".", "data", "[", "'type'", "]", "==", "NODE_TYPE", "[", "'root'", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "g_ent", "=", "pad", "(", "feats", ".", "index_select", "(", "0", ",", "graphs", ".", "filter_nodes", "(", "lambda", "x", ":", "x", ".", "data", "[", "'type'", "]", "==", "NODE_TYPE", "[", "'entity'", "]", ")", ".", "to", "(", "device", ")", ")", ".", "split", "(", "ent_len", ")", ",", "out_type", "=", "'tensor'", ")", "\n", "return", "g_ent", ",", "g_root", "", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.train.train_one_epoch": [[19, 41], ["model.train", "time.time", "print", "torch.save", "torch.save", "torch.save", "tqdm.tqdm", "str", "model", "torch.nll_loss", "optimizer.zero_grad", "loss.item.backward", "torch.utils.clip_grad_norm_", "optimizer.step", "loss.item.item", "len", "tq.set_postfix", "time.time", "str", "model.view", "batch[].view", "model.parameters", "ValueError", "len", "str", "torch.cuda.max_memory_cached", "torch.cuda.max_memory_cached", "torch.cuda.max_memory_cached"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.save", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.save", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.save", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.nll_loss"], ["def", "train_one_epoch", "(", "model", ",", "dataloader", ",", "optimizer", ",", "args", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "tloss", "=", "0.", "\n", "tcnt", "=", "0.", "\n", "st_time", "=", "time", ".", "time", "(", ")", "\n", "with", "tqdm", "(", "dataloader", ",", "desc", "=", "'Train Ep '", "+", "str", "(", "epoch", ")", ",", "mininterval", "=", "60", ")", "as", "tq", ":", "\n", "        ", "for", "batch", "in", "tq", ":", "\n", "            ", "pred", "=", "model", "(", "batch", ")", "\n", "nll_loss", "=", "F", ".", "nll_loss", "(", "pred", ".", "view", "(", "-", "1", ",", "pred", ".", "shape", "[", "-", "1", "]", ")", ",", "batch", "[", "'tgt_text'", "]", ".", "view", "(", "-", "1", ")", ",", "ignore_index", "=", "0", ")", "\n", "loss", "=", "nll_loss", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss", "=", "loss", ".", "item", "(", ")", "\n", "if", "loss", "!=", "loss", ":", "\n", "                ", "raise", "ValueError", "(", "'NaN appear'", ")", "\n", "", "tloss", "+=", "loss", "*", "len", "(", "batch", "[", "'tgt_text'", "]", ")", "\n", "tcnt", "+=", "len", "(", "batch", "[", "'tgt_text'", "]", ")", "\n", "tq", ".", "set_postfix", "(", "{", "'loss'", ":", "tloss", "/", "tcnt", "}", ",", "refresh", "=", "False", ")", "\n", "", "", "print", "(", "'Train Ep '", ",", "str", "(", "epoch", ")", ",", "'AVG Loss '", ",", "tloss", "/", "tcnt", ",", "'Steps '", ",", "tcnt", ",", "'Time '", ",", "time", ".", "time", "(", ")", "-", "st_time", ",", "'GPU'", ",", "torch", ".", "cuda", ".", "max_memory_cached", "(", ")", "/", "1024.0", "/", "1024.0", "/", "1024.0", ")", "\n", "torch", ".", "save", "(", "model", ",", "args", ".", "save_model", "+", "str", "(", "epoch", "%", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.train.eval_it": [[44, 65], ["model.eval", "time.time", "print", "tqdm.tqdm", "str", "print", "torch.save", "torch.save", "torch.save", "loss.item.item", "len", "tq.set_postfix", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.nll_loss", "len", "str", "model.view", "batch[].view"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.save", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.save", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.save", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.nll_loss"], ["def", "eval_it", "(", "model", ",", "dataloader", ",", "args", ",", "epoch", ")", ":", "\n", "    ", "global", "val_loss", "\n", "model", ".", "eval", "(", ")", "\n", "tloss", "=", "0.", "\n", "tcnt", "=", "0.", "\n", "st_time", "=", "time", ".", "time", "(", ")", "\n", "with", "tqdm", "(", "dataloader", ",", "desc", "=", "'Eval Ep '", "+", "str", "(", "epoch", ")", ",", "mininterval", "=", "60", ")", "as", "tq", ":", "\n", "        ", "for", "batch", "in", "tq", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", "=", "model", "(", "batch", ")", "\n", "nll_loss", "=", "F", ".", "nll_loss", "(", "pred", ".", "view", "(", "-", "1", ",", "pred", ".", "shape", "[", "-", "1", "]", ")", ",", "batch", "[", "'tgt_text'", "]", ".", "view", "(", "-", "1", ")", ",", "ignore_index", "=", "0", ")", "\n", "", "loss", "=", "nll_loss", "\n", "loss", "=", "loss", ".", "item", "(", ")", "\n", "tloss", "+=", "loss", "*", "len", "(", "batch", "[", "'tgt_text'", "]", ")", "\n", "tcnt", "+=", "len", "(", "batch", "[", "'tgt_text'", "]", ")", "\n", "tq", ".", "set_postfix", "(", "{", "'loss'", ":", "tloss", "/", "tcnt", "}", ",", "refresh", "=", "False", ")", "\n", "", "", "print", "(", "'Eval Ep '", ",", "str", "(", "epoch", ")", ",", "'AVG Loss '", ",", "tloss", "/", "tcnt", ",", "'Steps '", ",", "tcnt", ",", "'Time '", ",", "time", ".", "time", "(", ")", "-", "st_time", ")", "\n", "if", "tloss", "/", "tcnt", "<", "val_loss", ":", "\n", "        ", "print", "(", "'Saving best model '", ",", "'Ep '", ",", "epoch", ",", "' loss '", ",", "tloss", "/", "tcnt", ")", "\n", "torch", ".", "save", "(", "model", ",", "args", ".", "save_model", "+", "'best'", ")", "\n", "val_loss", "=", "tloss", "/", "tcnt", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.train.test": [[67, 93], ["pycocoevalcap.bleu.bleu.Bleu", "pycocoevalcap.meteor.meteor.Meteor", "pycocoevalcap.rouge.rouge.Rouge", "model.eval", "open", "open", "dict", "dict", "print", "print", "print", "print", "print", "open.close", "open.close", "tqdm.tqdm", "zip", "zip", "len", "len", "utlis.write_txt", "utlis.write_txt", "dict.extend", "dict.extend", "range", "range", "pycocoevalcap.bleu.bleu.Bleu.compute_score", "pycocoevalcap.meteor.meteor.Meteor.compute_score", "pycocoevalcap.rouge.rouge.Rouge.compute_score", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "len", "len"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.write_txt", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.write_txt", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider.Cider.compute_score", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider.Cider.compute_score", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider.Cider.compute_score"], ["", "", "def", "test", "(", "model", ",", "dataloader", ",", "args", ")", ":", "\n", "    ", "scorer", "=", "Bleu", "(", "4", ")", "\n", "m_scorer", "=", "Meteor", "(", ")", "\n", "r_scorer", "=", "Rouge", "(", ")", "\n", "hyp", "=", "[", "]", "\n", "ref", "=", "[", "]", "\n", "model", ".", "eval", "(", ")", "\n", "gold_file", "=", "open", "(", "'tmp_gold.txt'", ",", "'w'", ")", "\n", "pred_file", "=", "open", "(", "'tmp_pred.txt'", ",", "'w'", ")", "\n", "with", "tqdm", "(", "dataloader", ",", "desc", "=", "'Test '", ",", "mininterval", "=", "1", ")", "as", "tq", ":", "\n", "        ", "for", "batch", "in", "tq", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "seq", "=", "model", "(", "batch", ",", "beam_size", "=", "args", ".", "beam_size", ")", "\n", "", "r", "=", "write_txt", "(", "batch", ",", "batch", "[", "'tgt_text'", "]", ",", "gold_file", ",", "args", ")", "\n", "h", "=", "write_txt", "(", "batch", ",", "seq", ",", "pred_file", ",", "args", ")", "\n", "hyp", ".", "extend", "(", "h", ")", "\n", "ref", ".", "extend", "(", "r", ")", "\n", "", "", "hyp", "=", "dict", "(", "zip", "(", "range", "(", "len", "(", "hyp", ")", ")", ",", "hyp", ")", ")", "\n", "ref", "=", "dict", "(", "zip", "(", "range", "(", "len", "(", "ref", ")", ")", ",", "ref", ")", ")", "\n", "print", "(", "hyp", "[", "0", "]", ",", "ref", "[", "0", "]", ")", "\n", "print", "(", "'BLEU INP'", ",", "len", "(", "hyp", ")", ",", "len", "(", "ref", ")", ")", "\n", "print", "(", "'BLEU'", ",", "scorer", ".", "compute_score", "(", "ref", ",", "hyp", ")", "[", "0", "]", ")", "\n", "print", "(", "'METEOR'", ",", "m_scorer", ".", "compute_score", "(", "ref", ",", "hyp", ")", "[", "0", "]", ")", "\n", "print", "(", "'ROUGE_L'", ",", "r_scorer", ".", "compute_score", "(", "ref", ",", "hyp", ")", "[", "0", "]", ")", "\n", "gold_file", ".", "close", "(", ")", "\n", "pred_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.train.main": [[95, 121], ["os.path.exists", "opts.vocab_config", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "gentaxo.GenTaxo", "torch.load.to", "pickle.load", "utlis.get_datasets", "torch.load", "torch.load", "torch.load", "print", "train.test", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "print", "range", "open", "utlis.BucketSampler", "torch.load.parameters", "train.train_one_epoch", "train.eval_it"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.opts.vocab_config", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.load", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.get_datasets", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.load", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.load", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.load", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer.test", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.train.train_one_epoch", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.train.eval_it"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dataset", ")", ":", "\n", "        ", "train_dataset", ",", "valid_dataset", ",", "test_dataset", "=", "pickle", ".", "load", "(", "open", "(", "args", ".", "save_dataset", ",", "'rb'", ")", ")", "\n", "", "else", ":", "\n", "        ", "train_dataset", ",", "valid_dataset", ",", "test_dataset", "=", "get_datasets", "(", "args", ".", "fnames", ",", "device", "=", "args", ".", "device", ",", "save", "=", "args", ".", "save_dataset", ")", "\n", "", "args", "=", "vocab_config", "(", "args", ",", "train_dataset", ".", "ent_vocab", ",", "train_dataset", ".", "rel_vocab", ",", "train_dataset", ".", "text_vocab", ",", "train_dataset", ".", "ent_text_vocab", ",", "train_dataset", ".", "seq_vocab", ")", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_sampler", "=", "BucketSampler", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ")", ",", "collate_fn", "=", "train_dataset", ".", "batch_fn", ")", "\n", "valid_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valid_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "train_dataset", ".", "batch_fn", ")", "\n", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "train_dataset", ".", "batch_fn", ")", "\n", "\n", "model", "=", "GenTaxo", "(", "args", ")", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "if", "args", ".", "test", ":", "\n", "        ", "model", "=", "torch", ".", "load", "(", "args", ".", "save_model", ")", "\n", "model", ".", "args", "=", "args", "\n", "print", "(", "model", ")", "\n", "test", "(", "model", ",", "test_dataloader", ",", "args", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "momentum", "=", "0.9", ")", "\n", "print", "(", "model", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch", ")", ":", "\n", "            ", "train_one_epoch", "(", "model", ",", "train_dataloader", ",", "optimizer", ",", "args", ",", "epoch", ")", "\n", "eval_it", "(", "model", ",", "valid_dataloader", ",", "args", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.__init__": [[71, 76], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_vocab", "=", "2", "**", "31", ",", "min_freq", "=", "-", "1", ",", "sp", "=", "[", "'<PAD>'", ",", "'<BOS>'", ",", "'<EOS>'", ",", "'<UNK>'", "]", ")", ":", "\n", "        ", "self", ".", "i2s", "=", "[", "]", "\n", "self", ".", "s2i", "=", "{", "}", "\n", "self", ".", "wf", "=", "{", "}", "\n", "self", ".", "max_vocab", ",", "self", ".", "min_freq", ",", "self", ".", "sp", "=", "max_vocab", ",", "min_freq", ",", "sp", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.__len__": [[77, 79], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "i2s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.__str__": [[80, 82], ["str", "str", "len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'Total '", "+", "str", "(", "len", "(", "self", ".", "i2s", ")", ")", "+", "str", "(", "self", ".", "i2s", "[", ":", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update": [[83, 89], ["isinstance", "utlis.Vocab.update", "utlis.Vocab.wf.get"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update"], ["", "def", "update", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "isinstance", "(", "token", ",", "list", ")", ":", "\n", "            ", "for", "t", "in", "token", ":", "\n", "                ", "self", ".", "update", "(", "t", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "wf", "[", "token", "]", "=", "self", ".", "wf", ".", "get", "(", "token", ",", "0", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.build": [[90, 97], ["utlis.Vocab.i2s.extend", "sorted", "utlis.Vocab.s2i.update", "utlis.Vocab.wf.items", "list", "utlis.Vocab.i2s.append", "zip", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update"], ["", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "i2s", ".", "extend", "(", "self", ".", "sp", ")", "\n", "sort_kv", "=", "sorted", "(", "self", ".", "wf", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "for", "k", ",", "v", "in", "sort_kv", ":", "\n", "            ", "if", "len", "(", "self", ".", "i2s", ")", "<", "self", ".", "max_vocab", "and", "v", ">=", "self", ".", "min_freq", "and", "k", "not", "in", "self", ".", "sp", ":", "\n", "                ", "self", ".", "i2s", ".", "append", "(", "k", ")", "\n", "", "", "self", ".", "s2i", ".", "update", "(", "list", "(", "zip", "(", "self", ".", "i2s", ",", "range", "(", "len", "(", "self", ".", "i2s", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.__call__": [[98, 103], ["isinstance", "utlis.Vocab.s2i.get"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "int", ")", ":", "\n", "            ", "return", "self", ".", "i2s", "[", "x", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "s2i", ".", "get", "(", "x", ",", "self", ".", "s2i", "[", "'<UNK>'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.save": [[104, 106], ["None"], "methods", ["None"], ["", "", "def", "save", "(", "self", ",", "fname", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.load": [[107, 109], ["None"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "fname", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Example.__init__": [[118, 136], ["parent.split", "child.split", "sibling.split", "str", "ent_type.split", "text.split", "utlis.Example.build_graph", "utlis.at_least", "min", "r.split", "range", "x.split", "len", "len", "utlis.Example.raw_rel.append", "rel_list[].lower", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Example.build_graph", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.at_least"], ["    ", "def", "__init__", "(", "self", ",", "parent", ",", "child", ",", "sibling", ",", "ent_text", ",", "ent_type", ",", "rel", ",", "text", ")", ":", "\n", "# one object corresponds to a data sample", "\n", "        ", "self", ".", "raw_parent", "=", "parent", ".", "split", "(", ")", "\n", "self", ".", "raw_child", "=", "child", ".", "split", "(", ")", "\n", "self", ".", "raw_sibling", "=", "sibling", ".", "split", "(", ")", "\n", "self", ".", "raw_ent_text", "=", "[", "at_least", "(", "x", ".", "split", "(", ")", ")", "for", "x", "in", "ent_text", "]", "\n", "assert", "min", "(", "[", "len", "(", "x", ")", "for", "x", "in", "self", ".", "raw_ent_text", "]", ")", ">", "0", ",", "str", "(", "self", ".", "raw_ent_text", ")", "\n", "self", ".", "raw_ent_type", "=", "ent_type", ".", "split", "(", ")", "# <method> .. <>", "\n", "self", ".", "raw_rel", "=", "[", "]", "\n", "for", "r", "in", "rel", ":", "\n", "            ", "rel_list", "=", "r", ".", "split", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rel_list", ")", ")", ":", "\n", "                ", "if", "i", ">", "0", "and", "i", "<", "len", "(", "rel_list", ")", "-", "1", "and", "rel_list", "[", "i", "-", "1", "]", "==", "'--'", "and", "rel_list", "[", "i", "]", "!=", "rel_list", "[", "i", "]", ".", "lower", "(", ")", "and", "rel_list", "[", "i", "+", "1", "]", "==", "'--'", ":", "\n", "                    ", "self", ".", "raw_rel", ".", "append", "(", "[", "rel_list", "[", ":", "i", "-", "1", "]", ",", "rel_list", "[", "i", "-", "1", "]", "+", "rel_list", "[", "i", "]", "+", "rel_list", "[", "i", "+", "1", "]", ",", "rel_list", "[", "i", "+", "2", ":", "]", "]", ")", "\n", "break", "\n", "\n", "", "", "", "self", ".", "raw_text", "=", "text", ".", "split", "(", ")", "\n", "self", ".", "graph", "=", "self", ".", "build_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Example.__str__": [[137, 139], ["str", "utlis.Example.__dict__.items", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'\\n'", ".", "join", "(", "[", "str", "(", "k", ")", "+", "':\\t'", "+", "str", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Example.__len__": [[140, 142], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "raw_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Example.from_json": [[143, 146], ["utlis.Example"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "from_json", "(", "json_data", ")", ":", "\n", "        ", "return", "Example", "(", "json_data", "[", "'parent'", "]", ",", "json_data", "[", "'child'", "]", ",", "json_data", "[", "'sibling'", "]", ",", "json_data", "[", "'entities'", "]", ",", "json_data", "[", "'types'", "]", ",", "json_data", "[", "'relations'", "]", ",", "json_data", "[", "'abstract'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Example.build_graph": [[147, 172], ["dgl.DGLGraph", "len", "len", "dgl.DGLGraph.add_nodes", "dgl.DGLGraph.add_nodes", "dgl.DGLGraph.add_nodes", "dgl.DGLGraph.add_edges", "dgl.DGLGraph.add_edges", "dgl.DGLGraph.add_edges", "enumerate", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "str", "adj_edges.append", "adj_edges.append", "adj_edges.append", "adj_edges.append", "len", "dgl.DGLGraph.add_edges", "len", "utlis.Example.raw_ent_text.index", "utlis.Example.raw_ent_text.index", "torch.ones", "torch.ones", "torch.ones", "list", "map", "zip"], "methods", ["None"], ["", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "graph", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "ent_len", "=", "len", "(", "self", ".", "raw_ent_text", ")", "\n", "rel_len", "=", "len", "(", "self", ".", "raw_rel", ")", "# treat the repeated relation as different nodes, refer to the author's code", "\n", "\n", "graph", ".", "add_nodes", "(", "ent_len", ",", "{", "'type'", ":", "torch", ".", "ones", "(", "ent_len", ")", "*", "NODE_TYPE", "[", "'entity'", "]", "}", ")", "\n", "graph", ".", "add_nodes", "(", "1", ",", "{", "'type'", ":", "torch", ".", "ones", "(", "1", ")", "*", "NODE_TYPE", "[", "'root'", "]", "}", ")", "\n", "graph", ".", "add_nodes", "(", "rel_len", "*", "2", ",", "{", "'type'", ":", "torch", ".", "ones", "(", "rel_len", "*", "2", ")", "*", "NODE_TYPE", "[", "'relation'", "]", "}", ")", "\n", "graph", ".", "add_edges", "(", "ent_len", ",", "torch", ".", "arange", "(", "ent_len", ")", ")", "\n", "graph", ".", "add_edges", "(", "torch", ".", "arange", "(", "ent_len", ")", ",", "ent_len", ")", "\n", "graph", ".", "add_edges", "(", "torch", ".", "arange", "(", "ent_len", "+", "1", "+", "rel_len", "*", "2", ")", ",", "torch", ".", "arange", "(", "ent_len", "+", "1", "+", "rel_len", "*", "2", ")", ")", "\n", "adj_edges", "=", "[", "]", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "self", ".", "raw_rel", ")", ":", "\n", "            ", "assert", "len", "(", "r", ")", "==", "3", ",", "str", "(", "r", ")", "\n", "st", ",", "rt", ",", "ed", "=", "r", "\n", "st_ent", ",", "ed_ent", "=", "self", ".", "raw_ent_text", ".", "index", "(", "st", ")", ",", "self", ".", "raw_ent_text", ".", "index", "(", "ed", ")", "\n", "# according to the edge_softmax operator, we need to reverse the graph", "\n", "adj_edges", ".", "append", "(", "[", "ent_len", "+", "1", "+", "2", "*", "i", ",", "st_ent", "]", ")", "\n", "adj_edges", ".", "append", "(", "[", "ed_ent", ",", "ent_len", "+", "1", "+", "2", "*", "i", "]", ")", "\n", "adj_edges", ".", "append", "(", "[", "ent_len", "+", "1", "+", "2", "*", "i", "+", "1", ",", "ed_ent", "]", ")", "\n", "adj_edges", ".", "append", "(", "[", "st_ent", ",", "ent_len", "+", "1", "+", "2", "*", "i", "+", "1", "]", ")", "\n", "\n", "", "if", "len", "(", "adj_edges", ")", ">", "0", ":", "\n", "            ", "graph", ".", "add_edges", "(", "*", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "adj_edges", ")", ")", ")", ")", "\n", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Example.get_tensor": [[173, 203], ["hasattr", "enumerate", "title_vocab", "title_vocab", "title_vocab", "text_vocab", "sum", "rel_vocab", "text_vocab", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "ent_text_vocab", "str1[].split", "text_vocab", "tgt_text.append", "tgt_text.append", "torch.LongTensor", "len", "int"], "methods", ["None"], ["", "def", "get_tensor", "(", "self", ",", "ent_vocab", ",", "rel_vocab", ",", "text_vocab", ",", "ent_text_vocab", ",", "title_vocab", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'_cached_tensor'", ")", ":", "\n", "            ", "return", "self", ".", "_cached_tensor", "\n", "", "else", ":", "\n", "            ", "parent_data", "=", "[", "'<BOS>'", "]", "+", "self", ".", "raw_parent", "+", "[", "'<EOS>'", "]", "\n", "child_data", "=", "[", "'<BOS>'", "]", "+", "self", ".", "raw_child", "+", "[", "'<EOS>'", "]", "\n", "sibling_data", "=", "[", "'<BOS>'", "]", "+", "self", ".", "raw_sibling", "+", "[", "\"EOS\"", "]", "\n", "parent", "=", "[", "title_vocab", "(", "x", ")", "for", "x", "in", "parent_data", "]", "\n", "child", "=", "[", "title_vocab", "(", "x", ")", "for", "x", "in", "child_data", "]", "\n", "sibling", "=", "[", "title_vocab", "(", "x", ")", "for", "x", "in", "sibling_data", "]", "\n", "ent_text", "=", "[", "[", "ent_text_vocab", "(", "y", ")", "for", "y", "in", "x", "]", "for", "x", "in", "self", ".", "raw_ent_text", "]", "\n", "ent_type", "=", "[", "text_vocab", "(", "x", ")", "for", "x", "in", "self", ".", "raw_ent_type", "]", "# for inference", "\n", "rel_data", "=", "[", "'--root--'", "]", "+", "sum", "(", "[", "[", "x", "[", "1", "]", ",", "x", "[", "1", "]", "+", "'_INV'", "]", "for", "x", "in", "self", ".", "raw_rel", "]", ",", "[", "]", ")", "\n", "rel", "=", "[", "rel_vocab", "(", "x", ")", "for", "x", "in", "rel_data", "]", "\n", "\n", "text_data", "=", "[", "'<BOS>'", "]", "+", "self", ".", "raw_text", "+", "[", "'<EOS>'", "]", "\n", "text", "=", "[", "text_vocab", "(", "x", ")", "for", "x", "in", "text_data", "]", "\n", "tgt_text", "=", "[", "]", "\n", "# the input text and decoding target are different since the consideration of the copy mechanism.", "\n", "for", "i", ",", "str1", "in", "enumerate", "(", "text_data", ")", ":", "\n", "                ", "if", "str1", "[", "0", "]", "==", "'<'", "and", "str1", "[", "-", "1", "]", "==", "'>'", "and", "'_'", "in", "str1", ":", "\n", "                    ", "a", ",", "b", "=", "str1", "[", "1", ":", "-", "1", "]", ".", "split", "(", "'_'", ")", "\n", "text", "[", "i", "]", "=", "text_vocab", "(", "'<'", "+", "a", "+", "'>'", ")", "\n", "tgt_text", ".", "append", "(", "len", "(", "text_vocab", ")", "+", "int", "(", "b", ")", ")", "\n", "", "else", ":", "\n", "                    ", "tgt_text", ".", "append", "(", "text", "[", "i", "]", ")", "\n", "", "", "self", ".", "_cached_tensor", "=", "{", "'parent'", ":", "torch", ".", "LongTensor", "(", "parent", ")", ",", "'child'", ":", "torch", ".", "LongTensor", "(", "child", ")", ",", "'sibling'", ":", "torch", ".", "LongTensor", "(", "sibling", ")", ",", "'ent_text'", ":", "[", "torch", ".", "LongTensor", "(", "x", ")", "for", "x", "in", "ent_text", "]", ",", "'ent_type'", ":", "torch", ".", "LongTensor", "(", "ent_type", ")", ",", "'rel'", ":", "torch", ".", "LongTensor", "(", "rel", ")", ",", "'text'", ":", "torch", ".", "LongTensor", "(", "text", "[", ":", "-", "1", "]", ")", ",", "'tgt_text'", ":", "torch", ".", "LongTensor", "(", "tgt_text", "[", "1", ":", "]", ")", ",", "'graph'", ":", "self", ".", "graph", ",", "'raw_ent_text'", ":", "self", ".", "raw_ent_text", "}", "\n", "return", "self", ".", "_cached_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Example.update_vocab": [[204, 216], ["ent_vocab.update", "ent_text_vocab.update", "seq_vocab.update", "seq_vocab.update", "seq_vocab.update", "seq_vocab.update", "seq_vocab.update", "rel_vocab.update", "text_vocab.update", "text_vocab.update"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update"], ["", "", "def", "update_vocab", "(", "self", ",", "ent_vocab", ",", "rel_vocab", ",", "text_vocab", ",", "ent_text_vocab", ",", "seq_vocab", ")", ":", "\n", "        ", "ent_vocab", ".", "update", "(", "self", ".", "raw_ent_type", ")", "\n", "ent_text_vocab", ".", "update", "(", "self", ".", "raw_ent_text", ")", "\n", "seq_vocab", ".", "update", "(", "self", ".", "raw_parent", ")", "\n", "seq_vocab", ".", "update", "(", "self", ".", "raw_child", ")", "\n", "seq_vocab", ".", "update", "(", "self", ".", "raw_sibling", ")", "\n", "seq_vocab", ".", "update", "(", "self", ".", "raw_ent_text", ")", "\n", "seq_vocab", ".", "update", "(", "self", ".", "raw_text", ")", "\n", "rel_vocab", ".", "update", "(", "[", "'--root--'", "]", "+", "[", "x", "[", "1", "]", "for", "x", "in", "self", ".", "raw_rel", "]", "+", "[", "x", "[", "1", "]", "+", "'_INV'", "for", "x", "in", "self", ".", "raw_rel", "]", ")", "\n", "# text_vocab.update(self.raw_ent_type)", "\n", "text_vocab", ".", "update", "(", "self", ".", "raw_text", ")", "\n", "text_vocab", ".", "update", "(", "self", ".", "raw_ent_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.BucketSampler.__init__": [[218, 222], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", "=", "32", ",", "bucket", "=", "3", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "bucket", "=", "bucket", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.BucketSampler.__iter__": [[223, 252], ["torch.randperm", "torch.Tensor", "enumerate", "random.shuffle", "sum", "torch.Tensor", "len", "batch.append", "max", "len", "len", "t1.append", "len", "t2.append", "t3.append", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# the magic number comes from the author's code", "\n", "        ", "perm", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "data_source", ")", ")", "\n", "lens", "=", "torch", ".", "Tensor", "(", "[", "len", "(", "x", ")", "for", "x", "in", "self", ".", "data_source", "]", ")", "\n", "lens", "=", "lens", "[", "perm", "]", "\n", "t1", "=", "[", "]", "\n", "t2", "=", "[", "]", "\n", "t3", "=", "[", "]", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "lens", ")", ":", "\n", "            ", "if", "(", "l", "<", "100", ")", ":", "\n", "                ", "t1", ".", "append", "(", "perm", "[", "i", "]", ")", "\n", "", "elif", "(", "l", ">", "100", "and", "l", "<", "220", ")", ":", "\n", "                ", "t2", ".", "append", "(", "perm", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "t3", ".", "append", "(", "perm", "[", "i", "]", ")", "\n", "", "", "datas", "=", "[", "t1", ",", "t2", ",", "t3", "]", "\n", "random", ".", "shuffle", "(", "datas", ")", "\n", "idxs", "=", "sum", "(", "datas", ",", "[", "]", ")", "\n", "batch", "=", "[", "]", "\n", "\n", "lens", "=", "torch", ".", "Tensor", "(", "[", "len", "(", "x", ")", "for", "x", "in", "self", ".", "data_source", "]", ")", "\n", "for", "idx", "in", "idxs", ":", "\n", "            ", "batch", ".", "append", "(", "idx", ")", "\n", "mlen", "=", "max", "(", "[", "0", "]", "+", "[", "lens", "[", "x", "]", "for", "x", "in", "batch", "]", ")", "\n", "if", "(", "mlen", "<", "100", "and", "len", "(", "batch", ")", "==", "32", ")", "or", "(", "mlen", ">", "100", "and", "mlen", "<", "220", "and", "len", "(", "batch", ")", ">=", "24", ")", "or", "(", "mlen", ">", "220", "and", "len", "(", "batch", ")", ">=", "8", ")", "or", "len", "(", "batch", ")", "==", "32", ":", "\n", "                ", "yield", "batch", "\n", "batch", "=", "[", "]", "\n", "", "", "if", "len", "(", "batch", ")", ">", "0", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.BucketSampler.__len__": [[253, 255], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "(", "len", "(", "self", ".", "data_source", ")", "+", "self", ".", "batch_size", "-", "1", ")", "//", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.GenTaxodataset.__init__": [[258, 263], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "exs", ",", "ent_vocab", "=", "None", ",", "rel_vocab", "=", "None", ",", "text_vocab", "=", "None", ",", "ent_text_vocab", "=", "None", ",", "seq_vocab", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "        ", "super", "(", "GenTaxodataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "exs", "=", "exs", "\n", "self", ".", "ent_vocab", ",", "self", ".", "rel_vocab", ",", "self", ".", "text_vocab", ",", "self", ".", "ent_text_vocab", ",", "self", ".", "seq_vocab", ",", "self", ".", "device", "=", "ent_vocab", ",", "rel_vocab", ",", "text_vocab", ",", "ent_text_vocab", ",", "seq_vocab", ",", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.GenTaxodataset.__iter__": [[264, 266], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "exs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.GenTaxodataset.__getitem__": [[267, 269], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "exs", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.GenTaxodataset.__len__": [[270, 272], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "exs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.GenTaxodataset.batch_fn": [[273, 302], ["utlis.pad", "utlis.pad", "utlis.pad", "utlis.pad", "utlis.pad", "utlis.pad", "utlis.pad", "utlis.pad", "dgl.batch", "dgl.batch.to", "ex.get_tensor", "pad.append", "pad.append", "pad.append", "batch_ent_text.append", "pad.append", "pad.append", "pad.append", "pad.append", "dgl.batch.append", "batch_raw_ent_text.append", "pad.to", "pad.to", "pad.to", "batch_ent_text.to", "pad.to", "pad.to", "pad.to", "pad.to"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.pad", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.pad", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.pad", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.pad", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.pad", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.pad", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.pad", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.pad", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Example.get_tensor"], ["", "def", "batch_fn", "(", "self", ",", "batch_ex", ")", ":", "\n", "        ", "batch_parent", ",", "batch_child", ",", "batch_sibling", ",", "batch_ent_text", ",", "batch_ent_type", ",", "batch_rel", ",", "batch_text", ",", "batch_tgt_text", ",", "batch_graph", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "batch_raw_ent_text", "=", "[", "]", "\n", "for", "ex", "in", "batch_ex", ":", "\n", "            ", "ex_data", "=", "ex", ".", "get_tensor", "(", "self", ".", "ent_vocab", ",", "self", ".", "rel_vocab", ",", "self", ".", "text_vocab", ",", "self", ".", "ent_text_vocab", ",", "self", ".", "seq_vocab", ")", "\n", "batch_parent", ".", "append", "(", "ex_data", "[", "'parent'", "]", ")", "\n", "batch_child", ".", "append", "(", "ex_data", "[", "'child'", "]", ")", "\n", "batch_sibling", ".", "append", "(", "ex_data", "[", "'sibling'", "]", ")", "\n", "batch_ent_text", ".", "append", "(", "ex_data", "[", "'ent_text'", "]", ")", "\n", "batch_ent_type", ".", "append", "(", "ex_data", "[", "'ent_type'", "]", ")", "\n", "batch_rel", ".", "append", "(", "ex_data", "[", "'rel'", "]", ")", "\n", "batch_text", ".", "append", "(", "ex_data", "[", "'text'", "]", ")", "\n", "batch_tgt_text", ".", "append", "(", "ex_data", "[", "'tgt_text'", "]", ")", "\n", "batch_graph", ".", "append", "(", "ex_data", "[", "'graph'", "]", ")", "\n", "batch_raw_ent_text", ".", "append", "(", "ex_data", "[", "'raw_ent_text'", "]", ")", "\n", "", "batch_parent", "=", "pad", "(", "batch_parent", ",", "out_type", "=", "'tensor'", ")", "\n", "batch_child", "=", "pad", "(", "batch_child", ",", "out_type", "=", "'tensor'", ")", "\n", "batch_sibling", "=", "pad", "(", "batch_sibling", ",", "out_type", "=", "'tensor'", ")", "\n", "batch_ent_text", ",", "ent_len", "=", "pad", "(", "batch_ent_text", ",", "out_type", "=", "'tensor'", ",", "flatten", "=", "True", ")", "\n", "batch_ent_type", "=", "pad", "(", "batch_ent_type", ",", "out_type", "=", "'tensor'", ")", "\n", "batch_rel", "=", "pad", "(", "batch_rel", ",", "out_type", "=", "'tensor'", ")", "\n", "batch_text", "=", "pad", "(", "batch_text", ",", "out_type", "=", "'tensor'", ")", "\n", "batch_tgt_text", "=", "pad", "(", "batch_tgt_text", ",", "out_type", "=", "'tensor'", ")", "\n", "batch_graph", "=", "dgl", ".", "batch", "(", "batch_graph", ")", "\n", "batch_graph", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "{", "'parent'", ":", "batch_parent", ".", "to", "(", "self", ".", "device", ")", ",", "'child'", ":", "batch_child", ".", "to", "(", "self", ".", "device", ")", ",", "'sibling'", ":", "batch_sibling", ".", "to", "(", "self", ".", "device", ")", ",", "'ent_text'", ":", "batch_ent_text", ".", "to", "(", "self", ".", "device", ")", ",", "'ent_len'", ":", "ent_len", ",", "'ent_type'", ":", "batch_ent_type", ".", "to", "(", "self", ".", "device", ")", ",", "'rel'", ":", "batch_rel", ".", "to", "(", "self", ".", "device", ")", ",", "'text'", ":", "batch_text", ".", "to", "(", "self", ".", "device", ")", ",", "'tgt_text'", ":", "batch_tgt_text", ".", "to", "(", "self", ".", "device", ")", ",", "'graph'", ":", "batch_graph", ",", "'raw_ent_text'", ":", "batch_raw_ent_text", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.write_txt": [[12, 31], ["enumerate", "w_file.write", "ret.append", "len", "filter", "txt.extend", "int", "args.text_vocab", "int", "txt.append", "args.text_vocab", "args.text_vocab", "str", "str", "len", "int"], "function", ["None"], ["def", "write_txt", "(", "batch", ",", "seqs", ",", "w_file", ",", "args", ")", ":", "\n", "# converting the prediction to real text.", "\n", "    ", "ret", "=", "[", "]", "\n", "for", "b", ",", "seq", "in", "enumerate", "(", "seqs", ")", ":", "\n", "        ", "txt", "=", "[", "]", "\n", "for", "token", "in", "seq", ":", "\n", "# copy the entity", "\n", "            ", "if", "token", ">=", "len", "(", "args", ".", "text_vocab", ")", ":", "\n", "                ", "ent_text", "=", "batch", "[", "'raw_ent_text'", "]", "[", "b", "]", "[", "token", "-", "len", "(", "args", ".", "text_vocab", ")", "]", "\n", "ent_text", "=", "filter", "(", "lambda", "x", ":", "x", "!=", "'<PAD>'", ",", "ent_text", ")", "\n", "txt", ".", "extend", "(", "ent_text", ")", "\n", "", "else", ":", "\n", "                ", "if", "int", "(", "token", ")", "not", "in", "[", "args", ".", "text_vocab", "(", "x", ")", "for", "x", "in", "[", "'<PAD>'", ",", "'<BOS>'", ",", "'<EOS>'", "]", "]", ":", "\n", "                    ", "txt", ".", "append", "(", "args", ".", "text_vocab", "(", "int", "(", "token", ")", ")", ")", "\n", "", "", "if", "int", "(", "token", ")", "==", "args", ".", "text_vocab", "(", "'<EOS>'", ")", ":", "\n", "                ", "break", "\n", "", "", "w_file", ".", "write", "(", "' '", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "txt", "]", ")", "+", "'\\n'", ")", "\n", "ret", ".", "append", "(", "[", "' '", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "txt", "]", ")", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.replace_ent": [[33, 42], ["mask.nonzero", "x.masked_scatter.masked_scatter", "mask.sum"], "function", ["None"], ["", "def", "replace_ent", "(", "x", ",", "ent", ",", "V", ")", ":", "\n", "# replace the entity", "\n", "    ", "mask", "=", "x", ">=", "V", "\n", "if", "mask", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "return", "x", "\n", "", "nz", "=", "mask", ".", "nonzero", "(", ")", "\n", "fill_ent", "=", "ent", "[", "nz", ",", "x", "[", "mask", "]", "-", "V", "]", "\n", "x", "=", "x", ".", "masked_scatter", "(", "mask", ",", "fill_ent", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.len2mask": [[44, 49], ["max", "torch.arange().unsqueeze().expand", "len", "torch.LongTensor().to().unsqueeze", "torch.arange().unsqueeze", "torch.LongTensor().to", "torch.arange", "torch.LongTensor"], "function", ["None"], ["", "def", "len2mask", "(", "lens", ",", "device", ")", ":", "\n", "    ", "max_len", "=", "max", "(", "lens", ")", "\n", "mask", "=", "torch", ".", "arange", "(", "max_len", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "len", "(", "lens", ")", ",", "max_len", ")", "\n", "mask", "=", "mask", ">=", "torch", ".", "LongTensor", "(", "lens", ")", ".", "to", "(", "mask", ")", ".", "unsqueeze", "(", "1", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.pad": [[51, 68], ["max", "sum", "len", "len", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "len", "torch.zeros().type_as", "len", "torch.zeros().type_as", "torch.zeros", "torch.zeros", "list", "list", "len", "len"], "function", ["None"], ["", "def", "pad", "(", "var_len_list", ",", "out_type", "=", "'list'", ",", "flatten", "=", "False", ")", ":", "\n", "    ", "if", "flatten", ":", "\n", "        ", "lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "var_len_list", "]", "\n", "var_len_list", "=", "sum", "(", "var_len_list", ",", "[", "]", ")", "\n", "", "max_len", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "var_len_list", "]", ")", "\n", "if", "out_type", "==", "'list'", ":", "\n", "        ", "if", "flatten", ":", "\n", "            ", "return", "[", "x", "+", "[", "'<PAD>'", "]", "*", "(", "max_len", "-", "len", "(", "x", ")", ")", "for", "x", "in", "var_len_list", "]", ",", "lens", "\n", "", "else", ":", "\n", "            ", "return", "[", "x", "+", "[", "'<PAD>'", "]", "*", "(", "max_len", "-", "len", "(", "x", ")", ")", "for", "x", "in", "var_len_list", "]", "\n", "", "", "if", "out_type", "==", "'tensor'", ":", "\n", "        ", "if", "flatten", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "[", "torch", ".", "cat", "(", "[", "x", ",", "torch", ".", "zeros", "(", "[", "max_len", "-", "len", "(", "x", ")", "]", "+", "list", "(", "x", ".", "shape", "[", "1", ":", "]", ")", ")", ".", "type_as", "(", "x", ")", "]", ",", "0", ")", "for", "x", "in", "var_len_list", "]", ",", "0", ")", ",", "lens", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "[", "torch", ".", "cat", "(", "[", "x", ",", "torch", ".", "zeros", "(", "[", "max_len", "-", "len", "(", "x", ")", "]", "+", "list", "(", "x", ".", "shape", "[", "1", ":", "]", ")", ")", ".", "type_as", "(", "x", ")", "]", ",", "0", ")", "for", "x", "in", "var_len_list", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.at_least": [[110, 116], ["len"], "function", ["None"], ["", "", "def", "at_least", "(", "x", ")", ":", "\n", "# handling the illegal data", "\n", "    ", "if", "len", "(", "x", ")", "==", "0", ":", "\n", "        ", "return", "[", "'<UNK>'", "]", "\n", "", "else", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.get_datasets": [[304, 333], ["utlis.Vocab", "utlis.Vocab", "utlis.Vocab", "utlis.Vocab", "utlis.Vocab", "utlis.Vocab.build", "utlis.Vocab.build", "utlis.Vocab.build", "utlis.Vocab.build", "utlis.Vocab.build", "json.loads", "datasets.append", "utlis.GenTaxodataset", "open", "pickle.dump", "open().read", "utlis.Example.from_json", "exs.append", "Example.from_json.update_vocab", "open"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.build", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.build", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.build", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.build", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.build", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Example.from_json", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Example.update_vocab"], ["", "", "def", "get_datasets", "(", "fnames", ",", "min_freq", "=", "-", "1", ",", "sep", "=", "';'", ",", "joint_vocab", "=", "True", ",", "device", "=", "None", ",", "save", "=", "'tmp.pickle'", ")", ":", "\n", "# min_freq : not support now since it's very sensitive to the final results, but you can set it via passing min_freq to the Vocab class.", "\n", "# sep : not support now", "\n", "# joint_vocab : not support now", "\n", "    ", "ent_vocab", "=", "Vocab", "(", "sp", "=", "[", "'<PAD>'", ",", "'<UNK>'", "]", ")", "\n", "seq_vocab", "=", "Vocab", "(", "min_freq", "=", "1", ")", "\n", "rel_vocab", "=", "Vocab", "(", "sp", "=", "[", "'<PAD>'", ",", "'<UNK>'", "]", ")", "\n", "text_vocab", "=", "Vocab", "(", "min_freq", "=", "1", ")", "\n", "ent_text_vocab", "=", "Vocab", "(", "sp", "=", "[", "'<PAD>'", ",", "'<UNK>'", "]", ")", "\n", "datasets", "=", "[", "]", "\n", "for", "fname", "in", "fnames", ":", "\n", "        ", "exs", "=", "[", "]", "\n", "json_datas", "=", "json", ".", "loads", "(", "open", "(", "fname", ")", ".", "read", "(", ")", ")", "\n", "for", "json_data", "in", "json_datas", ":", "\n", "# construct one data example", "\n", "            ", "ex", "=", "Example", ".", "from_json", "(", "json_data", ")", "\n", "if", "fname", "==", "fnames", "[", "0", "]", ":", "# only training set", "\n", "                ", "ex", ".", "update_vocab", "(", "ent_vocab", ",", "rel_vocab", ",", "text_vocab", ",", "ent_text_vocab", ",", "seq_vocab", ")", "\n", "", "exs", ".", "append", "(", "ex", ")", "\n", "", "datasets", ".", "append", "(", "exs", ")", "\n", "", "ent_vocab", ".", "build", "(", ")", "\n", "rel_vocab", ".", "build", "(", ")", "\n", "text_vocab", ".", "build", "(", ")", "\n", "ent_text_vocab", ".", "build", "(", ")", "\n", "seq_vocab", ".", "build", "(", ")", "\n", "datasets", "=", "[", "GenTaxodataset", "(", "exs", ",", "ent_vocab", ",", "rel_vocab", ",", "text_vocab", ",", "ent_text_vocab", ",", "seq_vocab", ",", "device", ")", "for", "exs", "in", "datasets", "]", "\n", "with", "open", "(", "save", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "datasets", ",", "f", ")", "\n", "", "return", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu.Bleu.__init__": [[13, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "4", ")", ":", "\n", "# default compute Blue score up to 4", "\n", "        ", "self", ".", "_n", "=", "n", "\n", "self", ".", "_hypo_for_image", "=", "{", "}", "\n", "self", ".", "ref_for_image", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu.Bleu.compute_score": [[19, 40], ["bleu_scorer.BleuScorer.BleuScorer", "sorted", "bleu_scorer.BleuScorer.BleuScorer.compute_score", "gts.keys", "type", "len", "type", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider.Cider.compute_score"], ["", "def", "compute_score", "(", "self", ",", "gts", ",", "res", ")", ":", "\n", "\n", "        ", "bleu_scorer", "=", "BleuScorer", "(", "n", "=", "self", ".", "_n", ")", "\n", "for", "id", "in", "sorted", "(", "gts", ".", "keys", "(", ")", ")", ":", "\n", "            ", "hypo", "=", "res", "[", "id", "]", "\n", "ref", "=", "gts", "[", "id", "]", "\n", "\n", "# Sanity check.", "\n", "assert", "(", "type", "(", "hypo", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "hypo", ")", "==", "1", ")", "\n", "assert", "(", "type", "(", "ref", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "ref", ")", ">=", "1", ")", "\n", "\n", "bleu_scorer", "+=", "(", "hypo", "[", "0", "]", ",", "ref", ")", "\n", "\n", "#score, scores = bleu_scorer.compute_score(option='shortest')", "\n", "#score, scores = bleu_scorer.compute_score(option='average', verbose=1)", "\n", "", "score", ",", "scores", "=", "bleu_scorer", ".", "compute_score", "(", "option", "=", "'closest'", ",", "verbose", "=", "0", ")", "\n", "\n", "# return (bleu, bleu_info)", "\n", "return", "score", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu.Bleu.method": [[41, 43], ["None"], "methods", ["None"], ["", "def", "method", "(", "self", ")", ":", "\n", "        ", "return", "\"Bleu\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.copy": [[91, 98], ["bleu_scorer.BleuScorer", "copy.copy", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.copy", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.copy"], ["def", "copy", "(", "self", ")", ":", "\n", "        ", "''' copy the refs.'''", "\n", "new", "=", "BleuScorer", "(", "n", "=", "self", ".", "n", ")", "\n", "new", ".", "ctest", "=", "copy", ".", "copy", "(", "self", ".", "ctest", ")", "\n", "new", ".", "crefs", "=", "copy", ".", "copy", "(", "self", ".", "crefs", ")", "\n", "new", ".", "_score", "=", "None", "\n", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.__init__": [[99, 107], ["bleu_scorer.BleuScorer.cook_append"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.cook_append"], ["", "def", "__init__", "(", "self", ",", "test", "=", "None", ",", "refs", "=", "None", ",", "n", "=", "4", ",", "special_reflen", "=", "None", ")", ":", "\n", "        ", "''' singular instance '''", "\n", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "crefs", "=", "[", "]", "\n", "self", ".", "ctest", "=", "[", "]", "\n", "self", ".", "cook_append", "(", "test", ",", "refs", ")", "\n", "self", ".", "special_reflen", "=", "special_reflen", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.cook_append": [[108, 120], ["bleu_scorer.BleuScorer.crefs.append", "bleu_scorer.cook_refs", "bleu_scorer.cook_test", "bleu_scorer.BleuScorer.ctest.append", "bleu_scorer.BleuScorer.ctest.append"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.cook_refs", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.cook_test"], ["", "def", "cook_append", "(", "self", ",", "test", ",", "refs", ")", ":", "\n", "        ", "'''called by constructor and __iadd__ to avoid creating new instances.'''", "\n", "\n", "if", "refs", "is", "not", "None", ":", "\n", "            ", "self", ".", "crefs", ".", "append", "(", "cook_refs", "(", "refs", ")", ")", "\n", "if", "test", "is", "not", "None", ":", "\n", "                ", "cooked_test", "=", "cook_test", "(", "test", ",", "self", ".", "crefs", "[", "-", "1", "]", ")", "\n", "self", ".", "ctest", ".", "append", "(", "cooked_test", ")", "## N.B.: -1", "\n", "", "else", ":", "\n", "                ", "self", ".", "ctest", ".", "append", "(", "None", ")", "# lens of crefs and ctest have to match", "\n", "\n", "", "", "self", ".", "_score", "=", "None", "## need to recompute", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.ratio": [[121, 124], ["bleu_scorer.BleuScorer.compute_score"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider.Cider.compute_score"], ["", "def", "ratio", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "self", ".", "compute_score", "(", "option", "=", "option", ")", "\n", "return", "self", ".", "_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.score_ratio": [[125, 128], ["bleu_scorer.BleuScorer.fscore", "bleu_scorer.BleuScorer.ratio"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.ratio"], ["", "def", "score_ratio", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "'''return (bleu, len_ratio) pair'''", "\n", "return", "(", "self", ".", "fscore", "(", "option", "=", "option", ")", ",", "self", ".", "ratio", "(", "option", "=", "option", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.score_ratio_str": [[129, 131], ["bleu_scorer.BleuScorer.score_ratio"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.score_ratio"], ["", "def", "score_ratio_str", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "return", "\"%.4f (%.2f)\"", "%", "self", ".", "score_ratio", "(", "option", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.reflen": [[132, 135], ["bleu_scorer.BleuScorer.compute_score"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider.Cider.compute_score"], ["", "def", "reflen", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "self", ".", "compute_score", "(", "option", "=", "option", ")", "\n", "return", "self", ".", "_reflen", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.testlen": [[136, 139], ["bleu_scorer.BleuScorer.compute_score"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider.Cider.compute_score"], ["", "def", "testlen", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "self", ".", "compute_score", "(", "option", "=", "option", ")", "\n", "return", "self", ".", "_testlen", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.retest": [[140, 150], ["zip", "type", "len", "len", "bleu_scorer.BleuScorer.ctest.append", "bleu_scorer.cook_test"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.cook_test"], ["", "def", "retest", "(", "self", ",", "new_test", ")", ":", "\n", "        ", "if", "type", "(", "new_test", ")", "is", "str", ":", "\n", "            ", "new_test", "=", "[", "new_test", "]", "\n", "", "assert", "len", "(", "new_test", ")", "==", "len", "(", "self", ".", "crefs", ")", ",", "new_test", "\n", "self", ".", "ctest", "=", "[", "]", "\n", "for", "t", ",", "rs", "in", "zip", "(", "new_test", ",", "self", ".", "crefs", ")", ":", "\n", "            ", "self", ".", "ctest", ".", "append", "(", "cook_test", "(", "t", ",", "rs", ")", ")", "\n", "", "self", ".", "_score", "=", "None", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.rescore": [[151, 155], ["bleu_scorer.BleuScorer.retest().compute_score", "bleu_scorer.BleuScorer.retest"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider.Cider.compute_score", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.retest"], ["", "def", "rescore", "(", "self", ",", "new_test", ")", ":", "\n", "        ", "''' replace test(s) with new test(s), and returns the new score.'''", "\n", "\n", "return", "self", ".", "retest", "(", "new_test", ")", ".", "compute_score", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.size": [[156, 159], ["len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "crefs", ")", "==", "len", "(", "self", ".", "ctest", ")", ",", "\"refs/test mismatch! %d<>%d\"", "%", "(", "len", "(", "self", ".", "crefs", ")", ",", "len", "(", "self", ".", "ctest", ")", ")", "\n", "return", "len", "(", "self", ".", "crefs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.__iadd__": [[160, 173], ["type", "bleu_scorer.BleuScorer.cook_append", "bleu_scorer.BleuScorer.compatible", "bleu_scorer.BleuScorer.ctest.extend", "bleu_scorer.BleuScorer.crefs.extend"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.cook_append", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.compatible"], ["", "def", "__iadd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "'''add an instance (e.g., from another sentence).'''", "\n", "\n", "if", "type", "(", "other", ")", "is", "tuple", ":", "\n", "## avoid creating new BleuScorer instances", "\n", "            ", "self", ".", "cook_append", "(", "other", "[", "0", "]", ",", "other", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "compatible", "(", "other", ")", ",", "\"incompatible BLEUs.\"", "\n", "self", ".", "ctest", ".", "extend", "(", "other", ".", "ctest", ")", "\n", "self", ".", "crefs", ".", "extend", "(", "other", ".", "crefs", ")", "\n", "self", ".", "_score", "=", "None", "## need to recompute", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.compatible": [[174, 176], ["isinstance"], "methods", ["None"], ["", "def", "compatible", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "isinstance", "(", "other", ",", "BleuScorer", ")", "and", "self", ".", "n", "==", "other", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.single_reflen": [[177, 179], ["bleu_scorer.BleuScorer._single_reflen"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer._single_reflen"], ["", "def", "single_reflen", "(", "self", ",", "option", "=", "\"average\"", ")", ":", "\n", "        ", "return", "self", ".", "_single_reflen", "(", "self", ".", "crefs", "[", "0", "]", "[", "0", "]", ",", "option", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer._single_reflen": [[180, 192], ["min", "float", "len", "sum", "min", "abs"], "methods", ["None"], ["", "def", "_single_reflen", "(", "self", ",", "reflens", ",", "option", "=", "None", ",", "testlen", "=", "None", ")", ":", "\n", "\n", "        ", "if", "option", "==", "\"shortest\"", ":", "\n", "            ", "reflen", "=", "min", "(", "reflens", ")", "\n", "", "elif", "option", "==", "\"average\"", ":", "\n", "            ", "reflen", "=", "float", "(", "sum", "(", "reflens", ")", ")", "/", "len", "(", "reflens", ")", "\n", "", "elif", "option", "==", "\"closest\"", ":", "\n", "            ", "reflen", "=", "min", "(", "(", "abs", "(", "l", "-", "testlen", ")", ",", "l", ")", "for", "l", "in", "reflens", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"unsupported reflen option %s\"", "%", "option", "\n", "\n", "", "return", "reflen", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.recompute_score": [[193, 196], ["bleu_scorer.BleuScorer.compute_score"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider.Cider.compute_score"], ["", "def", "recompute_score", "(", "self", ",", "option", "=", "None", ",", "verbose", "=", "0", ")", ":", "\n", "        ", "self", ".", "_score", "=", "None", "\n", "return", "self", ".", "compute_score", "(", "option", ",", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer.compute_score": [[197, 265], ["range", "range", "bleus.append", "range", "print", "print", "range", "bleu_scorer.BleuScorer._single_reflen", "range", "bleu_list[].append", "range", "print", "float", "math.exp", "len", "math.exp", "float", "float"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.BleuScorer._single_reflen"], ["", "def", "compute_score", "(", "self", ",", "option", "=", "None", ",", "verbose", "=", "0", ")", ":", "\n", "        ", "n", "=", "self", ".", "n", "\n", "small", "=", "1e-9", "\n", "tiny", "=", "1e-15", "## so that if guess is 0 still return 0", "\n", "bleu_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "n", ")", "]", "\n", "\n", "if", "self", ".", "_score", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_score", "\n", "\n", "", "if", "option", "is", "None", ":", "\n", "            ", "option", "=", "\"average\"", "if", "len", "(", "self", ".", "crefs", ")", "==", "1", "else", "\"closest\"", "\n", "\n", "", "self", ".", "_testlen", "=", "0", "\n", "self", ".", "_reflen", "=", "0", "\n", "totalcomps", "=", "{", "'testlen'", ":", "0", ",", "'reflen'", ":", "0", ",", "'guess'", ":", "[", "0", "]", "*", "n", ",", "'correct'", ":", "[", "0", "]", "*", "n", "}", "\n", "\n", "# for each sentence", "\n", "for", "comps", "in", "self", ".", "ctest", ":", "\n", "            ", "testlen", "=", "comps", "[", "'testlen'", "]", "\n", "self", ".", "_testlen", "+=", "testlen", "\n", "\n", "if", "self", ".", "special_reflen", "is", "None", ":", "## need computation", "\n", "                ", "reflen", "=", "self", ".", "_single_reflen", "(", "comps", "[", "'reflen'", "]", ",", "option", ",", "testlen", ")", "\n", "", "else", ":", "\n", "                ", "reflen", "=", "self", ".", "special_reflen", "\n", "\n", "", "self", ".", "_reflen", "+=", "reflen", "\n", "\n", "for", "key", "in", "[", "'guess'", ",", "'correct'", "]", ":", "\n", "                ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "                    ", "totalcomps", "[", "key", "]", "[", "k", "]", "+=", "comps", "[", "key", "]", "[", "k", "]", "\n", "\n", "# append per image bleu score", "\n", "", "", "bleu", "=", "1.", "\n", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "                ", "bleu", "*=", "(", "float", "(", "comps", "[", "'correct'", "]", "[", "k", "]", ")", "+", "tiny", ")", "/", "(", "float", "(", "comps", "[", "'guess'", "]", "[", "k", "]", ")", "+", "small", ")", "\n", "bleu_list", "[", "k", "]", ".", "append", "(", "bleu", "**", "(", "1.", "/", "(", "k", "+", "1", ")", ")", ")", "\n", "", "ratio", "=", "(", "testlen", "+", "tiny", ")", "/", "(", "reflen", "+", "small", ")", "## N.B.: avoid zero division", "\n", "if", "ratio", "<", "1", ":", "\n", "                ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "                    ", "bleu_list", "[", "k", "]", "[", "-", "1", "]", "*=", "math", ".", "exp", "(", "1", "-", "1", "/", "ratio", ")", "\n", "\n", "", "", "if", "verbose", ">", "1", ":", "\n", "                ", "print", "(", "comps", ",", "reflen", ")", "\n", "\n", "", "", "totalcomps", "[", "'reflen'", "]", "=", "self", ".", "_reflen", "\n", "totalcomps", "[", "'testlen'", "]", "=", "self", ".", "_testlen", "\n", "\n", "bleus", "=", "[", "]", "\n", "bleu", "=", "1.", "\n", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "bleu", "*=", "float", "(", "totalcomps", "[", "'correct'", "]", "[", "k", "]", "+", "tiny", ")", "/", "(", "totalcomps", "[", "'guess'", "]", "[", "k", "]", "+", "small", ")", "\n", "bleus", ".", "append", "(", "bleu", "**", "(", "1.", "/", "(", "k", "+", "1", ")", ")", ")", "\n", "", "ratio", "=", "(", "self", ".", "_testlen", "+", "tiny", ")", "/", "(", "self", ".", "_reflen", "+", "small", ")", "## N.B.: avoid zero division", "\n", "if", "ratio", "<", "1", ":", "\n", "            ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "                ", "bleus", "[", "k", "]", "*=", "math", ".", "exp", "(", "1", "-", "1", "/", "ratio", ")", "\n", "\n", "", "", "if", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "totalcomps", ")", "\n", "print", "(", "\"ratio:\"", ",", "ratio", ")", "\n", "\n", "# Normalize to percentage", "\n", "", "bleus", "=", "[", "100", "*", "b", "for", "b", "in", "bleus", "]", "\n", "self", ".", "_score", "=", "bleus", "\n", "return", "self", ".", "_score", ",", "bleu_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.precook": [[22, 33], ["s.split", "collections.defaultdict", "range", "range", "len", "tuple", "len"], "function", ["None"], ["def", "precook", "(", "s", ",", "n", "=", "4", ",", "out", "=", "False", ")", ":", "\n", "    ", "\"\"\"Takes a string as input and returns an object that can be given to\n    either cook_refs or cook_test. This is optional: cook_refs and cook_test\n    can take string arguments as well.\"\"\"", "\n", "words", "=", "s", ".", "split", "(", ")", "\n", "counts", "=", "defaultdict", "(", "int", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "n", "+", "1", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "words", ")", "-", "k", "+", "1", ")", ":", "\n", "            ", "ngram", "=", "tuple", "(", "words", "[", "i", ":", "i", "+", "k", "]", ")", "\n", "counts", "[", "ngram", "]", "+=", "1", "\n", "", "", "return", "(", "len", "(", "words", ")", ",", "counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.cook_refs": [[34, 58], ["bleu_scorer.precook", "min.append", "counts.items", "min", "max", "maxcounts.get", "float", "len", "sum"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.precook"], ["", "def", "cook_refs", "(", "refs", ",", "eff", "=", "None", ",", "n", "=", "4", ")", ":", "## lhuang: oracle will call with \"average\"", "\n", "    ", "'''Takes a list of reference sentences for a single segment\n    and returns an object that encapsulates everything that BLEU\n    needs to know about them.'''", "\n", "\n", "reflen", "=", "[", "]", "\n", "maxcounts", "=", "{", "}", "\n", "for", "ref", "in", "refs", ":", "\n", "        ", "rl", ",", "counts", "=", "precook", "(", "ref", ",", "n", ")", "\n", "reflen", ".", "append", "(", "rl", ")", "\n", "for", "(", "ngram", ",", "count", ")", "in", "counts", ".", "items", "(", ")", ":", "\n", "            ", "maxcounts", "[", "ngram", "]", "=", "max", "(", "maxcounts", ".", "get", "(", "ngram", ",", "0", ")", ",", "count", ")", "\n", "\n", "# Calculate effective reference sentence length.", "\n", "", "", "if", "eff", "==", "\"shortest\"", ":", "\n", "        ", "reflen", "=", "min", "(", "reflen", ")", "\n", "", "elif", "eff", "==", "\"average\"", ":", "\n", "        ", "reflen", "=", "float", "(", "sum", "(", "reflen", ")", ")", "/", "len", "(", "reflen", ")", "\n", "\n", "## lhuang: N.B.: leave reflen computaiton to the very end!!", "\n", "\n", "## lhuang: N.B.: in case of \"closest\", keep a list of reflens!! (bad design)", "\n", "\n", "", "return", "(", "reflen", ",", "maxcounts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.bleu.bleu_scorer.cook_test": [[59, 83], ["bleu_scorer.precook", "counts.items", "max", "min", "min", "range", "refmaxcounts.get", "len", "abs"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.precook"], ["", "def", "cook_test", "(", "test", ",", "ref_len_counts", ",", "eff", "=", "None", ",", "n", "=", "4", ")", ":", "\n", "    ", "'''Takes a test sentence and returns an object that\n    encapsulates everything that BLEU needs to know about it.'''", "\n", "(", "reflen", ",", "refmaxcounts", ")", "=", "ref_len_counts", "\n", "testlen", ",", "counts", "=", "precook", "(", "test", ",", "n", ",", "True", ")", "\n", "\n", "result", "=", "{", "}", "\n", "\n", "# Calculate effective reference sentence length.", "\n", "\n", "if", "eff", "==", "\"closest\"", ":", "\n", "        ", "result", "[", "\"reflen\"", "]", "=", "min", "(", "(", "abs", "(", "l", "-", "testlen", ")", ",", "l", ")", "for", "l", "in", "reflen", ")", "[", "1", "]", "\n", "", "else", ":", "## i.e., \"average\" or \"shortest\" or None", "\n", "        ", "result", "[", "\"reflen\"", "]", "=", "reflen", "\n", "\n", "", "result", "[", "\"testlen\"", "]", "=", "testlen", "\n", "\n", "result", "[", "\"guess\"", "]", "=", "[", "max", "(", "0", ",", "testlen", "-", "k", "+", "1", ")", "for", "k", "in", "range", "(", "1", ",", "n", "+", "1", ")", "]", "\n", "\n", "result", "[", "'correct'", "]", "=", "[", "0", "]", "*", "n", "\n", "for", "(", "ngram", ",", "count", ")", "in", "counts", ".", "items", "(", ")", ":", "\n", "        ", "result", "[", "\"correct\"", "]", "[", "len", "(", "ngram", ")", "-", "1", "]", "+=", "min", "(", "refmaxcounts", ".", "get", "(", "ngram", ",", "0", ")", ",", "count", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.rouge.rouge.Rouge.__init__": [[38, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "# vrama91: updated the value below based on discussion with Hovey", "\n", "        ", "self", ".", "beta", "=", "1.2", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.rouge.rouge.Rouge.calc_score": [[42, 73], ["candidate[].split", "max", "max", "len", "len", "reference.split", "rouge.my_lcs", "prec.append", "rec.append", "float", "float", "float", "len", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.rouge.rouge.my_lcs"], ["", "def", "calc_score", "(", "self", ",", "candidate", ",", "refs", ")", ":", "\n", "        ", "\"\"\"\n        Compute ROUGE-L score given one candidate and references for an image\n        :param candidate: str : candidate sentence to be evaluated\n        :param refs: list of str : COCO reference sentences for the particular image to be evaluated\n        :returns score: int (ROUGE-L score for the candidate evaluated against references)\n        \"\"\"", "\n", "assert", "(", "len", "(", "candidate", ")", "==", "1", ")", "\n", "assert", "(", "len", "(", "refs", ")", ">", "0", ")", "\n", "prec", "=", "[", "]", "\n", "rec", "=", "[", "]", "\n", "\n", "# split into tokens", "\n", "token_c", "=", "candidate", "[", "0", "]", ".", "split", "(", "\" \"", ")", "\n", "\n", "for", "reference", "in", "refs", ":", "\n", "# split into tokens", "\n", "            ", "token_r", "=", "reference", ".", "split", "(", "\" \"", ")", "\n", "# compute the longest common subsequence", "\n", "lcs", "=", "my_lcs", "(", "token_r", ",", "token_c", ")", "\n", "prec", ".", "append", "(", "lcs", "/", "float", "(", "len", "(", "token_c", ")", ")", ")", "\n", "rec", ".", "append", "(", "lcs", "/", "float", "(", "len", "(", "token_r", ")", ")", ")", "\n", "\n", "", "prec_max", "=", "max", "(", "prec", ")", "\n", "rec_max", "=", "max", "(", "rec", ")", "\n", "\n", "if", "(", "prec_max", "!=", "0", "and", "rec_max", "!=", "0", ")", ":", "\n", "            ", "score", "=", "(", "(", "1", "+", "self", ".", "beta", "**", "2", ")", "*", "prec_max", "*", "rec_max", ")", "/", "float", "(", "rec_max", "+", "self", ".", "beta", "**", "2", "*", "prec_max", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "0.0", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.rouge.rouge.Rouge.compute_score": [[74, 98], ["sorted", "numpy.mean", "gts.keys", "score.append", "numpy.array", "numpy.array", "rouge.Rouge.calc_score", "type", "len", "type", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.rouge.rouge.Rouge.calc_score"], ["", "def", "compute_score", "(", "self", ",", "gts", ",", "res", ")", ":", "\n", "        ", "\"\"\"\n        Computes Rouge-L score given a set of reference and candidate sentences for the dataset\n        Invoked by evaluate_captions.py\n        :param hypo_for_image: dict : candidate / test sentences with \"image name\" key and \"tokenized sentences\" as values\n        :param ref_for_image: dict : reference MS-COCO sentences with \"image name\" key and \"tokenized sentences\" as values\n        :returns: average_score: float (mean ROUGE-L score computed by averaging scores for all the images)\n        \"\"\"", "\n", "score", "=", "[", "]", "\n", "for", "id", "in", "sorted", "(", "gts", ".", "keys", "(", ")", ")", ":", "\n", "            ", "hypo", "=", "res", "[", "id", "]", "\n", "ref", "=", "gts", "[", "id", "]", "\n", "\n", "score", ".", "append", "(", "self", ".", "calc_score", "(", "hypo", ",", "ref", ")", ")", "\n", "\n", "# Sanity check.", "\n", "assert", "(", "type", "(", "hypo", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "hypo", ")", "==", "1", ")", "\n", "assert", "(", "type", "(", "ref", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "ref", ")", ">", "0", ")", "\n", "\n", "", "average_score", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "score", ")", ")", "\n", "#cconvert to percentage", "\n", "return", "100", "*", "average_score", ",", "np", ".", "array", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.rouge.rouge.Rouge.method": [[99, 101], ["None"], "methods", ["None"], ["", "def", "method", "(", "self", ")", ":", "\n", "        ", "return", "\"Rouge\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.rouge.rouge.my_lcs": [[12, 33], ["range", "len", "len", "range", "range", "len", "len", "range", "len", "max", "len", "len", "len"], "function", ["None"], ["def", "my_lcs", "(", "string", ",", "sub", ")", ":", "\n", "    ", "\"\"\"\n    Calculates longest common subsequence for a pair of tokenized strings\n    :param string : list of str : tokens from a string split using whitespace\n    :param sub : list of str : shorter string, also split using whitespace\n    :returns: length (list of int): length of the longest common subsequence between the two strings\n    Note: my_lcs only gives length of the longest common subsequence, not the actual LCS\n    \"\"\"", "\n", "if", "(", "len", "(", "string", ")", "<", "len", "(", "sub", ")", ")", ":", "\n", "        ", "sub", ",", "string", "=", "string", ",", "sub", "\n", "\n", "", "lengths", "=", "[", "[", "0", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sub", ")", "+", "1", ")", "]", "for", "j", "in", "range", "(", "0", ",", "len", "(", "string", ")", "+", "1", ")", "]", "\n", "\n", "for", "j", "in", "range", "(", "1", ",", "len", "(", "sub", ")", "+", "1", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "len", "(", "string", ")", "+", "1", ")", ":", "\n", "            ", "if", "(", "string", "[", "i", "-", "1", "]", "==", "sub", "[", "j", "-", "1", "]", ")", ":", "\n", "                ", "lengths", "[", "i", "]", "[", "j", "]", "=", "lengths", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "lengths", "[", "i", "]", "[", "j", "]", "=", "max", "(", "lengths", "[", "i", "-", "1", "]", "[", "j", "]", ",", "lengths", "[", "i", "]", "[", "j", "-", "1", "]", ")", "\n", "\n", "", "", "", "return", "lengths", "[", "len", "(", "string", ")", "]", "[", "len", "(", "sub", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.meteor.meteor.Meteor.__init__": [[12, 23], ["subprocess.Popen", "threading.Lock", "meteor.Meteor.meteor_cmd.append", "os.path.dirname", "os.path.abspath"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "language", "=", "'en'", ",", "norm", "=", "True", ")", ":", "\n", "        ", "self", ".", "meteor_cmd", "=", "[", "'java'", ",", "'-jar'", ",", "'-Xmx2G'", ",", "METEOR_JAR", ",", "'-'", ",", "'-'", ",", "'-stdio'", ",", "'-l'", ",", "language", "]", "\n", "\n", "if", "norm", ":", "\n", "            ", "self", ".", "meteor_cmd", ".", "append", "(", "'-norm'", ")", "\n", "\n", "", "self", ".", "meteor_p", "=", "subprocess", ".", "Popen", "(", "self", ".", "meteor_cmd", ",", "stdin", "=", "subprocess", ".", "PIPE", ",", "\n", "cwd", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\n", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "PIPE", ",", "universal_newlines", "=", "True", ",", "bufsize", "=", "1", ")", "\n", "# Used to guarantee thread safety", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.meteor.meteor.Meteor.method": [[24, 26], ["None"], "methods", ["None"], ["", "def", "method", "(", "self", ")", ":", "\n", "        ", "return", "\"METEOR\"", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.meteor.meteor.Meteor.compute_score": [[27, 57], ["sorted", "meteor.Meteor.lock.acquire", "meteor.Meteor.meteor_p.stdin.write", "range", "meteor.Meteor.lock.release", "list", "[].replace().replace", "meteor.Meteor.meteor_p.stdin.write", "meteor.Meteor.meteor_p.stdout.readline().strip", "len", "float", "scores.append", "float", "gts.keys", "len", "meteor.Meteor.meteor_p.stdout.readline().strip", "meteor.Meteor.meteor_p.stdout.readline().strip", "[].replace", "meteor.Meteor.meteor_p.stdout.readline", "meteor.Meteor.meteor_p.stdout.readline", "meteor.Meteor.meteor_p.stdout.readline"], "methods", ["None"], ["", "def", "compute_score", "(", "self", ",", "gts", ",", "res", ")", ":", "\n", "        ", "imgIds", "=", "sorted", "(", "list", "(", "gts", ".", "keys", "(", ")", ")", ")", "\n", "scores", "=", "[", "]", "\n", "\n", "eval_line", "=", "'EVAL'", "\n", "self", ".", "lock", ".", "acquire", "(", ")", "\n", "for", "i", "in", "imgIds", ":", "\n", "            ", "assert", "(", "len", "(", "res", "[", "i", "]", ")", "==", "1", ")", "\n", "\n", "hypothesis_str", "=", "res", "[", "i", "]", "[", "0", "]", ".", "replace", "(", "'|||'", ",", "''", ")", ".", "replace", "(", "'  '", ",", "' '", ")", "\n", "score_line", "=", "' ||| '", ".", "join", "(", "(", "'SCORE'", ",", "' ||| '", ".", "join", "(", "gts", "[", "i", "]", ")", ",", "hypothesis_str", ")", ")", "\n", "\n", "# We obtained --> SCORE ||| reference 1 words ||| reference n words ||| hypothesis words", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "write", "(", "score_line", "+", "'\\n'", ")", "\n", "stat", "=", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "eval_line", "+=", "' ||| {}'", ".", "format", "(", "stat", ")", "\n", "\n", "# Send to METEOR", "\n", "", "self", ".", "meteor_p", ".", "stdin", ".", "write", "(", "eval_line", "+", "'\\n'", ")", "\n", "\n", "# Collect segment scores", "\n", "for", "i", "in", "range", "(", "len", "(", "imgIds", ")", ")", ":", "\n", "            ", "score", "=", "float", "(", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", ".", "strip", "(", ")", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "\n", "# Final score", "\n", "", "final_score", "=", "100", "*", "float", "(", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", ".", "strip", "(", ")", ")", "\n", "self", ".", "lock", ".", "release", "(", ")", "\n", "\n", "return", "final_score", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.meteor.meteor.Meteor.__del__": [[58, 63], ["meteor.Meteor.lock.acquire", "meteor.Meteor.meteor_p.stdin.close", "meteor.Meteor.meteor_p.wait", "meteor.Meteor.lock.release"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "lock", ".", "acquire", "(", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "close", "(", ")", "\n", "self", ".", "meteor_p", ".", "wait", "(", ")", "\n", "self", ".", "lock", ".", "release", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.copy": [[50, 56], ["cider_scorer.CiderScorer", "copy.copy", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.copy", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.copy"], ["def", "copy", "(", "self", ")", ":", "\n", "        ", "''' copy the refs.'''", "\n", "new", "=", "CiderScorer", "(", "n", "=", "self", ".", "n", ")", "\n", "new", ".", "ctest", "=", "copy", ".", "copy", "(", "self", ".", "ctest", ")", "\n", "new", ".", "crefs", "=", "copy", ".", "copy", "(", "self", ".", "crefs", ")", "\n", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.__init__": [[57, 66], ["collections.defaultdict", "cider_scorer.CiderScorer.cook_append"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.cook_append"], ["", "def", "__init__", "(", "self", ",", "test", "=", "None", ",", "refs", "=", "None", ",", "n", "=", "4", ",", "sigma", "=", "6.0", ")", ":", "\n", "        ", "''' singular instance '''", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "crefs", "=", "[", "]", "\n", "self", ".", "ctest", "=", "[", "]", "\n", "self", ".", "document_frequency", "=", "defaultdict", "(", "float", ")", "\n", "self", ".", "cook_append", "(", "test", ",", "refs", ")", "\n", "self", ".", "ref_len", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.cook_append": [[67, 76], ["cider_scorer.CiderScorer.crefs.append", "cider_scorer.cook_refs", "cider_scorer.CiderScorer.ctest.append", "cider_scorer.CiderScorer.ctest.append", "cider_scorer.cook_test"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.cook_refs", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.cook_test"], ["", "def", "cook_append", "(", "self", ",", "test", ",", "refs", ")", ":", "\n", "        ", "'''called by constructor and __iadd__ to avoid creating new instances.'''", "\n", "\n", "if", "refs", "is", "not", "None", ":", "\n", "            ", "self", ".", "crefs", ".", "append", "(", "cook_refs", "(", "refs", ")", ")", "\n", "if", "test", "is", "not", "None", ":", "\n", "                ", "self", ".", "ctest", ".", "append", "(", "cook_test", "(", "test", ")", ")", "## N.B.: -1", "\n", "", "else", ":", "\n", "                ", "self", ".", "ctest", ".", "append", "(", "None", ")", "# lens of crefs and ctest have to match", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size": [[77, 80], ["len", "len", "len", "len", "len"], "methods", ["None"], ["", "", "", "def", "size", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "crefs", ")", "==", "len", "(", "self", ".", "ctest", ")", ",", "\"refs/test mismatch! %d<>%d\"", "%", "(", "len", "(", "self", ".", "crefs", ")", ",", "len", "(", "self", ".", "ctest", ")", ")", "\n", "return", "len", "(", "self", ".", "crefs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.__iadd__": [[81, 92], ["type", "cider_scorer.CiderScorer.cook_append", "cider_scorer.CiderScorer.ctest.extend", "cider_scorer.CiderScorer.crefs.extend"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.cook_append"], ["", "def", "__iadd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "'''add an instance (e.g., from another sentence).'''", "\n", "\n", "if", "type", "(", "other", ")", "is", "tuple", ":", "\n", "## avoid creating new CiderScorer instances", "\n", "            ", "self", ".", "cook_append", "(", "other", "[", "0", "]", ",", "other", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ctest", ".", "extend", "(", "other", ".", "ctest", ")", "\n", "self", ".", "crefs", ".", "extend", "(", "other", ".", "crefs", ")", "\n", "\n", "", "return", "self", "\n", "", "def", "compute_doc_freq", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.compute_doc_freq": [[92, 103], ["set", "ref.items"], "methods", ["None"], ["", "def", "compute_doc_freq", "(", "self", ")", ":", "\n", "        ", "'''\n        Compute term frequency for reference data.\n        This will be used to compute idf (inverse document frequency later)\n        The term frequency is stored in the object\n        :return: None\n        '''", "\n", "for", "refs", "in", "self", ".", "crefs", ":", "\n", "# refs, k ref captions of one image", "\n", "            ", "for", "ngram", "in", "set", "(", "[", "ngram", "for", "ref", "in", "refs", "for", "(", "ngram", ",", "count", ")", "in", "ref", ".", "items", "(", ")", "]", ")", ":", "\n", "                ", "self", ".", "document_frequency", "[", "ngram", "]", "+=", "1", "\n", "# maxcounts[ngram] = max(maxcounts.get(ngram,0), count)", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.compute_cider": [[105, 181], ["numpy.log", "zip", "cnts.items", "float", "numpy.array", "range", "float", "cider_scorer.CiderScorer.compute_cider.counts2vec"], "methods", ["None"], ["", "", "", "def", "compute_cider", "(", "self", ")", ":", "\n", "        ", "def", "counts2vec", "(", "cnts", ")", ":", "\n", "            ", "\"\"\"\n            Function maps counts of ngram to vector of tfidf weights.\n            The function returns vec, an array of dictionary that store mapping of n-gram and tf-idf weights.\n            The n-th entry of array denotes length of n-grams.\n            :param cnts:\n            :return: vec (array of dict), norm (array of float), length (int)\n            \"\"\"", "\n", "vec", "=", "[", "defaultdict", "(", "float", ")", "for", "_", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "length", "=", "0", "\n", "norm", "=", "[", "0.0", "for", "_", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "for", "(", "ngram", ",", "term_freq", ")", "in", "cnts", ".", "items", "(", ")", ":", "\n", "# give word count 1 if it doesn't appear in reference corpus", "\n", "                ", "df", "=", "np", ".", "log", "(", "max", "(", "1.0", ",", "self", ".", "document_frequency", "[", "ngram", "]", ")", ")", "\n", "# ngram index", "\n", "n", "=", "len", "(", "ngram", ")", "-", "1", "\n", "# tf (term_freq) * idf (precomputed idf) for n-grams", "\n", "vec", "[", "n", "]", "[", "ngram", "]", "=", "float", "(", "term_freq", ")", "*", "(", "self", ".", "ref_len", "-", "df", ")", "\n", "# compute norm for the vector.  the norm will be used for computing similarity", "\n", "norm", "[", "n", "]", "+=", "pow", "(", "vec", "[", "n", "]", "[", "ngram", "]", ",", "2", ")", "\n", "\n", "if", "n", "==", "1", ":", "\n", "                    ", "length", "+=", "term_freq", "\n", "", "", "norm", "=", "[", "np", ".", "sqrt", "(", "n", ")", "for", "n", "in", "norm", "]", "\n", "return", "vec", ",", "norm", ",", "length", "\n", "\n", "", "def", "sim", "(", "vec_hyp", ",", "vec_ref", ",", "norm_hyp", ",", "norm_ref", ",", "length_hyp", ",", "length_ref", ")", ":", "\n", "            ", "'''\n            Compute the cosine similarity of two vectors.\n            :param vec_hyp: array of dictionary for vector corresponding to hypothesis\n            :param vec_ref: array of dictionary for vector corresponding to reference\n            :param norm_hyp: array of float for vector corresponding to hypothesis\n            :param norm_ref: array of float for vector corresponding to reference\n            :param length_hyp: int containing length of hypothesis\n            :param length_ref: int containing length of reference\n            :return: array of score for each n-grams cosine similarity\n            '''", "\n", "delta", "=", "float", "(", "length_hyp", "-", "length_ref", ")", "\n", "# measure consine similarity", "\n", "val", "=", "np", ".", "array", "(", "[", "0.0", "for", "_", "in", "range", "(", "self", ".", "n", ")", "]", ")", "\n", "for", "n", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "# ngram", "\n", "                ", "for", "(", "ngram", ",", "count", ")", "in", "vec_hyp", "[", "n", "]", ".", "items", "(", ")", ":", "\n", "# vrama91 : added clipping", "\n", "                    ", "val", "[", "n", "]", "+=", "min", "(", "vec_hyp", "[", "n", "]", "[", "ngram", "]", ",", "vec_ref", "[", "n", "]", "[", "ngram", "]", ")", "*", "vec_ref", "[", "n", "]", "[", "ngram", "]", "\n", "\n", "", "if", "(", "norm_hyp", "[", "n", "]", "!=", "0", ")", "and", "(", "norm_ref", "[", "n", "]", "!=", "0", ")", ":", "\n", "                    ", "val", "[", "n", "]", "/=", "(", "norm_hyp", "[", "n", "]", "*", "norm_ref", "[", "n", "]", ")", "\n", "\n", "", "assert", "(", "not", "math", ".", "isnan", "(", "val", "[", "n", "]", ")", ")", "\n", "# vrama91: added a length based gaussian penalty", "\n", "val", "[", "n", "]", "*=", "np", ".", "e", "**", "(", "-", "(", "delta", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", "**", "2", ")", ")", "\n", "", "return", "val", "\n", "\n", "# compute log reference length", "\n", "", "self", ".", "ref_len", "=", "np", ".", "log", "(", "float", "(", "len", "(", "self", ".", "crefs", ")", ")", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "for", "test", ",", "refs", "in", "zip", "(", "self", ".", "ctest", ",", "self", ".", "crefs", ")", ":", "\n", "# compute vector for test captions", "\n", "            ", "vec", ",", "norm", ",", "length", "=", "counts2vec", "(", "test", ")", "\n", "# compute vector for ref captions", "\n", "score", "=", "np", ".", "array", "(", "[", "0.0", "for", "_", "in", "range", "(", "self", ".", "n", ")", "]", ")", "\n", "for", "ref", "in", "refs", ":", "\n", "                ", "vec_ref", ",", "norm_ref", ",", "length_ref", "=", "counts2vec", "(", "ref", ")", "\n", "score", "+=", "sim", "(", "vec", ",", "vec_ref", ",", "norm", ",", "norm_ref", ",", "length", ",", "length_ref", ")", "\n", "# change by vrama91 - mean of ngram scores, instead of sum", "\n", "", "score_avg", "=", "np", ".", "mean", "(", "score", ")", "\n", "# divide by number of references", "\n", "score_avg", "/=", "len", "(", "refs", ")", "\n", "# multiply score by 10", "\n", "score_avg", "*=", "10.0", "\n", "# append score of an image to the score list", "\n", "scores", ".", "append", "(", "score_avg", ")", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.compute_score": [[182, 190], ["cider_scorer.CiderScorer.compute_doc_freq", "cider_scorer.CiderScorer.compute_cider", "len", "max", "numpy.mean", "numpy.array", "cider_scorer.CiderScorer.document_frequency.values", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.compute_doc_freq", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.compute_cider"], ["", "def", "compute_score", "(", "self", ",", "option", "=", "None", ",", "verbose", "=", "0", ")", ":", "\n", "# compute idf", "\n", "        ", "self", ".", "compute_doc_freq", "(", ")", "\n", "# assert to check document frequency", "\n", "assert", "(", "len", "(", "self", ".", "ctest", ")", ">=", "max", "(", "self", ".", "document_frequency", ".", "values", "(", ")", ")", ")", "\n", "# compute cider score", "\n", "score", "=", "self", ".", "compute_cider", "(", ")", "\n", "return", "np", ".", "mean", "(", "np", ".", "array", "(", "score", ")", ")", ",", "np", ".", "array", "(", "score", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.precook": [[10, 26], ["s.split", "collections.defaultdict", "range", "range", "tuple", "len"], "function", ["None"], ["def", "precook", "(", "s", ",", "n", "=", "4", ",", "out", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Takes a string as input and returns an object that can be given to\n    either cook_refs or cook_test. This is optional: cook_refs and cook_test\n    can take string arguments as well.\n    :param s: string : sentence to be converted into ngrams\n    :param n: int    : number of ngrams for which representation is calculated\n    :return: term frequency vector for occuring ngrams\n    \"\"\"", "\n", "words", "=", "s", ".", "split", "(", ")", "\n", "counts", "=", "defaultdict", "(", "int", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "n", "+", "1", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "words", ")", "-", "k", "+", "1", ")", ":", "\n", "            ", "ngram", "=", "tuple", "(", "words", "[", "i", ":", "i", "+", "k", "]", ")", "\n", "counts", "[", "ngram", "]", "+=", "1", "\n", "", "", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.cook_refs": [[27, 36], ["cider_scorer.precook"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.precook"], ["", "def", "cook_refs", "(", "refs", ",", "n", "=", "4", ")", ":", "## lhuang: oracle will call with \"average\"", "\n", "    ", "'''Takes a list of reference sentences for a single segment\n    and returns an object that encapsulates everything that BLEU\n    needs to know about them.\n    :param refs: list of string : reference sentences for some image\n    :param n: int : number of ngrams for which (ngram) representation is calculated\n    :return: result (list of dict)\n    '''", "\n", "return", "[", "precook", "(", "ref", ",", "n", ")", "for", "ref", "in", "refs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.cook_test": [[37, 45], ["cider_scorer.precook"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.precook"], ["", "def", "cook_test", "(", "test", ",", "n", "=", "4", ")", ":", "\n", "    ", "'''Takes a test sentence and returns an object that\n    encapsulates everything that BLEU needs to know about it.\n    :param test: list of string : hypothesis sentence for some image\n    :param n: int : number of ngrams for which (ngram) representation is calculated\n    :return: result (dict)\n    '''", "\n", "return", "precook", "(", "test", ",", "n", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider.Cider.__init__": [[17, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "test", "=", "None", ",", "refs", "=", "None", ",", "n", "=", "4", ",", "sigma", "=", "6.0", ")", ":", "\n", "# set cider to sum over 1 to 4-grams", "\n", "        ", "self", ".", "_n", "=", "n", "\n", "# set the standard deviation parameter for gaussian penalty", "\n", "self", ".", "_sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider.Cider.compute_score": [[23, 48], ["cider_scorer.CiderScorer.CiderScorer", "sorted", "cider_scorer.CiderScorer.CiderScorer.compute_score", "gts.keys", "type", "len", "type", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider.Cider.compute_score"], ["", "def", "compute_score", "(", "self", ",", "gts", ",", "res", ")", ":", "\n", "        ", "\"\"\"\n        Main function to compute CIDEr score\n        :param  hypo_for_image (dict) : dictionary with key <image> and value <tokenized hypothesis / candidate sentence>\n                ref_for_image (dict)  : dictionary with key <image> and value <tokenized reference sentence>\n        :return: cider (float) : computed CIDEr score for the corpus\n        \"\"\"", "\n", "\n", "cider_scorer", "=", "CiderScorer", "(", "n", "=", "self", ".", "_n", ",", "sigma", "=", "self", ".", "_sigma", ")", "\n", "\n", "for", "id", "in", "sorted", "(", "gts", ".", "keys", "(", ")", ")", ":", "\n", "            ", "hypo", "=", "res", "[", "id", "]", "\n", "ref", "=", "gts", "[", "id", "]", "\n", "\n", "# Sanity check.", "\n", "assert", "(", "type", "(", "hypo", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "hypo", ")", "==", "1", ")", "\n", "assert", "(", "type", "(", "ref", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "ref", ")", ">", "0", ")", "\n", "\n", "cider_scorer", "+=", "(", "hypo", "[", "0", "]", ",", "ref", ")", "\n", "\n", "", "(", "score", ",", "scores", ")", "=", "cider_scorer", ".", "compute_score", "(", ")", "\n", "\n", "return", "score", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider.Cider.method": [[49, 51], ["None"], "methods", ["None"], ["", "def", "method", "(", "self", ")", ":", "\n", "        ", "return", "\"CIDEr\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestneighbor.rearrange": [[15, 22], ["numpy.array().any", "torch.cat().int", "torch.cat().int", "torch.cat", "torch.cat", "numpy.where", "numpy.where", "numpy.array", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "len", "len"], "function", ["None"], ["def", "rearrange", "(", "energy_scores", ",", "candidate_position_idx", ",", "true_position_idx", ")", ":", "\n", "    ", "tmp", "=", "np", ".", "array", "(", "[", "[", "x", "==", "y", "for", "x", "in", "candidate_position_idx", "]", "for", "y", "in", "true_position_idx", "]", ")", ".", "any", "(", "0", ")", "\n", "correct", "=", "np", ".", "where", "(", "tmp", ")", "[", "0", "]", "\n", "incorrect", "=", "np", ".", "where", "(", "~", "tmp", ")", "[", "0", "]", "\n", "labels", "=", "torch", ".", "cat", "(", "(", "torch", ".", "ones", "(", "len", "(", "correct", ")", ")", ",", "torch", ".", "zeros", "(", "len", "(", "incorrect", ")", ")", ")", ")", ".", "int", "(", ")", "\n", "energy_scores", "=", "torch", ".", "cat", "(", "(", "energy_scores", "[", "correct", "]", ",", "energy_scores", "[", "incorrect", "]", ")", ")", "\n", "return", "energy_scores", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestneighbor.find_insert_posistion": [[24, 49], ["set", "set", "collections.deque", "collections.deque", "holdout_graph.predecessors", "holdout_graph.successors", "collections.deque.popleft", "collections.deque.popleft", "set.add", "set.add", "list", "set.add", "list", "holdout_graph.predecessors", "holdout_graph.successors"], "function", ["None"], ["", "def", "find_insert_posistion", "(", "node_ids", ",", "core_subgraph", ",", "holdout_graph", ",", "pseudo_leaf_node", ")", ":", "\n", "    ", "node2pos", "=", "{", "}", "\n", "subgraph", "=", "core_subgraph", "\n", "for", "node", "in", "node_ids", ":", "\n", "        ", "parents", "=", "set", "(", ")", "\n", "children", "=", "set", "(", ")", "\n", "ps", "=", "deque", "(", "holdout_graph", ".", "predecessors", "(", "node", ")", ")", "\n", "cs", "=", "deque", "(", "holdout_graph", ".", "successors", "(", "node", ")", ")", "\n", "while", "ps", ":", "\n", "            ", "p", "=", "ps", ".", "popleft", "(", ")", "\n", "if", "p", "in", "subgraph", ":", "\n", "                ", "parents", ".", "add", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "ps", "+=", "list", "(", "holdout_graph", ".", "predecessors", "(", "p", ")", ")", "\n", "", "", "while", "cs", ":", "\n", "            ", "c", "=", "cs", ".", "popleft", "(", ")", "\n", "if", "c", "in", "subgraph", ":", "\n", "                ", "children", ".", "add", "(", "c", ")", "\n", "", "else", ":", "\n", "                ", "cs", "+=", "list", "(", "holdout_graph", ".", "successors", "(", "c", ")", ")", "\n", "", "", "if", "not", "children", ":", "\n", "            ", "children", ".", "add", "(", "pseudo_leaf_node", ")", "\n", "", "position", "=", "[", "(", "p", ",", "c", ")", "for", "p", "in", "parents", "for", "c", "in", "children", "]", "\n", "node2pos", "[", "node", "]", "=", "position", "\n", "", "return", "node2pos", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestneighbor.get_holdout_subgraph": [[51, 85], ["full_graph.subgraph().copy", "full_graph.subgraph().copy.nodes", "set", "set", "collections.deque", "collections.deque", "set", "full_graph.subgraph", "full_graph.predecessors", "full_graph.successors", "collections.deque.popleft", "collections.deque.popleft", "networkx.algorithms.descendants", "full_graph.subgraph().copy.out_degree", "set", "set", "set.intersection", "set.add", "list", "set.add", "list", "full_graph.subgraph().copy.add_edge", "full_graph.subgraph().copy.successors", "itertools.chain.from_iterable", "full_graph.predecessors", "full_graph.successors", "full_graph.subgraph().copy.remove_edge"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.copy"], ["", "def", "get_holdout_subgraph", "(", "node_ids", ",", "full_graph", ")", ":", "\n", "    ", "node_to_remove", "=", "[", "n", "for", "n", "in", "full_graph", ".", "nodes", "if", "n", "not", "in", "node_ids", "]", "\n", "subgraph", "=", "full_graph", ".", "subgraph", "(", "node_ids", ")", ".", "copy", "(", ")", "\n", "for", "node", "in", "node_to_remove", ":", "\n", "        ", "parents", "=", "set", "(", ")", "\n", "children", "=", "set", "(", ")", "\n", "ps", "=", "deque", "(", "full_graph", ".", "predecessors", "(", "node", ")", ")", "\n", "cs", "=", "deque", "(", "full_graph", ".", "successors", "(", "node", ")", ")", "\n", "while", "ps", ":", "\n", "            ", "p", "=", "ps", ".", "popleft", "(", ")", "\n", "if", "p", "in", "subgraph", ":", "\n", "                ", "parents", ".", "add", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "ps", "+=", "list", "(", "full_graph", ".", "predecessors", "(", "p", ")", ")", "\n", "", "", "while", "cs", ":", "\n", "            ", "c", "=", "cs", ".", "popleft", "(", ")", "\n", "if", "c", "in", "subgraph", ":", "\n", "                ", "children", ".", "add", "(", "c", ")", "\n", "", "else", ":", "\n", "                ", "cs", "+=", "list", "(", "full_graph", ".", "successors", "(", "c", ")", ")", "\n", "", "", "for", "p", "in", "parents", ":", "\n", "            ", "for", "c", "in", "children", ":", "\n", "                ", "subgraph", ".", "add_edge", "(", "p", ",", "c", ")", "\n", "# remove jump edges", "\n", "", "", "", "node2descendants", "=", "{", "n", ":", "set", "(", "descendants", "(", "subgraph", ",", "n", ")", ")", "for", "n", "in", "subgraph", ".", "nodes", "}", "\n", "for", "node", "in", "subgraph", ".", "nodes", "(", ")", ":", "\n", "        ", "if", "subgraph", ".", "out_degree", "(", "node", ")", ">", "1", ":", "\n", "            ", "successors1", "=", "set", "(", "subgraph", ".", "successors", "(", "node", ")", ")", "\n", "successors2", "=", "set", "(", "chain", ".", "from_iterable", "(", "[", "node2descendants", "[", "n", "]", "for", "n", "in", "successors1", "]", ")", ")", "\n", "checkset", "=", "successors1", ".", "intersection", "(", "successors2", ")", "\n", "if", "checkset", ":", "\n", "                ", "for", "s", "in", "checkset", ":", "\n", "                    ", "subgraph", ".", "remove_edge", "(", "node", ",", "s", ")", "\n", "", "", "", "", "return", "subgraph", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestneighbor.distances": [[87, 108], ["kv.distances().mean", "dists.append", "kv.distance", "str", "kv.distance", "kv.distances", "str"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.distances"], ["", "def", "distances", "(", "query_node", ",", "edges", ",", "edge2nbs", ",", "kv", ",", "pseudo_leaf_node", ")", ":", "\n", "    ", "node2dist", "=", "{", "}", "\n", "dists", "=", "[", "]", "\n", "for", "u", ",", "v", "in", "edges", ":", "\n", "        ", "if", "u", "in", "node2dist", ":", "\n", "            ", "du", "=", "node2dist", "[", "u", "]", "\n", "", "else", ":", "\n", "            ", "du", "=", "kv", ".", "distance", "(", "query_node", ",", "str", "(", "u", ")", ")", "\n", "node2dist", "[", "u", "]", "=", "du", "\n", "", "if", "v", "==", "pseudo_leaf_node", ":", "\n", "            ", "dist", "=", "du", "\n", "", "else", ":", "\n", "            ", "if", "v", "in", "node2dist", ":", "\n", "                ", "dv", "=", "node2dist", "[", "v", "]", "\n", "", "else", ":", "\n", "                ", "dv", "=", "kv", ".", "distance", "(", "query_node", ",", "str", "(", "v", ")", ")", "\n", "node2dist", "[", "v", "]", "=", "dv", "\n", "", "dist", "=", "(", "du", "+", "dv", ")", "/", "2", "\n", "", "nb_dist", "=", "kv", ".", "distances", "(", "query_node", ",", "edge2nbs", "[", "(", "u", ",", "v", ")", "]", ")", ".", "mean", "(", ")", "\n", "dists", ".", "append", "(", "dist", "+", "nb_dist", ")", "\n", "", "return", "dists", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestneighbor.main": [[110, 157], ["data_loader.dataset.MAGDataset", "functools.partial", "data_loader.dataset.MAGDataset.g_full.to_networkx", "closestneighbor.get_holdout_subgraph", "list", "list", "closestneighbor.get_holdout_subgraph", "closestneighbor.find_insert_posistion", "torch.normalize", "gensim.models.KeyedVectors", "gensim.models.KeyedVectors.add", "tqdm.tqdm", "enumerate", "getattr", "get_holdout_subgraph.nodes", "get_holdout_subgraph.add_edge", "set", "set", "set", "set", "set.union().union().union", "list", "F.normalize.numpy", "closestneighbor.distances", "closestneighbor.rearrange", "all_ranks.extend", "metric", "print", "networkx.algorithms.descendants", "itertools.chain.from_iterable", "get_holdout_subgraph.predecessors", "get_holdout_subgraph.successors", "set", "set", "set", "set", "pu.union().union().union.remove", "map", "str", "str", "torch.Tensor", "torch.Tensor", "functools.partial.", "get_holdout_subgraph.predecessors", "get_holdout_subgraph.successors", "set.union().union", "range", "len", "node2descendants.items", "set.union"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.get_holdout_subgraph", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.get_holdout_subgraph", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.find_insert_posistion", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.distances", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.rearrange"], ["", "def", "main", "(", "args", ",", "metrics", ")", ":", "\n", "    ", "graph_dataset", "=", "MAGDataset", "(", "name", "=", "\"\"", ",", "path", "=", "args", ".", "data_path", ",", "raw", "=", "False", ")", "\n", "metrics", "=", "[", "getattr", "(", "module_metric", ",", "met", ")", "for", "met", "in", "metrics", "]", "\n", "pre_metric", "=", "partial", "(", "module_metric", ".", "obtain_ranks", ",", "mode", "=", "0", ")", "\n", "\n", "full_graph", "=", "graph_dataset", ".", "g_full", ".", "to_networkx", "(", ")", "\n", "core_subgraph", "=", "get_holdout_subgraph", "(", "graph_dataset", ".", "train_node_ids", ",", "full_graph", ")", "\n", "pseudo_leaf_node", "=", "-", "1", "\n", "for", "node", "in", "list", "(", "core_subgraph", ".", "nodes", "(", ")", ")", ":", "\n", "        ", "core_subgraph", ".", "add_edge", "(", "node", ",", "pseudo_leaf_node", ")", "\n", "", "node2descendants", "=", "{", "n", ":", "set", "(", "descendants", "(", "core_subgraph", ",", "n", ")", ")", "for", "n", "in", "core_subgraph", ".", "nodes", "}", "\n", "candidate_positions", "=", "list", "(", "set", "(", "chain", ".", "from_iterable", "(", "[", "[", "(", "n", ",", "d", ")", "for", "d", "in", "ds", "]", "for", "n", ",", "ds", "in", "node2descendants", ".", "items", "(", ")", "]", ")", ")", ")", "\n", "\n", "edge2nbs", "=", "{", "}", "\n", "for", "u", ",", "v", "in", "candidate_positions", ":", "\n", "        ", "pu", "=", "set", "(", "core_subgraph", ".", "predecessors", "(", "u", ")", ")", "\n", "cu", "=", "set", "(", "core_subgraph", ".", "successors", "(", "u", ")", ")", "\n", "if", "v", "==", "pseudo_leaf_node", ":", "\n", "            ", "pv", "=", "set", "(", ")", "\n", "cv", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "            ", "pv", "=", "set", "(", "core_subgraph", ".", "predecessors", "(", "v", ")", ")", "\n", "cv", "=", "set", "(", "core_subgraph", ".", "successors", "(", "v", ")", ")", "\n", "", "nbs", "=", "pu", ".", "union", "(", "pv", ")", ".", "union", "(", "cu", ")", ".", "union", "(", "cv", ")", "\n", "if", "pseudo_leaf_node", "in", "nbs", ":", "\n", "            ", "nbs", ".", "remove", "(", "pseudo_leaf_node", ")", "\n", "", "edge2nbs", "[", "(", "u", ",", "v", ")", "]", "=", "list", "(", "map", "(", "str", ",", "nbs", ")", ")", "\n", "\n", "", "holdout_subgraph", "=", "get_holdout_subgraph", "(", "graph_dataset", ".", "train_node_ids", "+", "graph_dataset", ".", "test_node_ids", ",", "full_graph", ")", "\n", "node2pos", "=", "find_insert_posistion", "(", "graph_dataset", ".", "test_node_ids", ",", "core_subgraph", ",", "holdout_subgraph", ",", "pseudo_leaf_node", ")", "\n", "\n", "node_features", "=", "graph_dataset", ".", "g_full", ".", "ndata", "[", "'x'", "]", "\n", "node_features", "=", "F", ".", "normalize", "(", "node_features", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "kv", "=", "KeyedVectors", "(", "vector_size", "=", "node_features", ".", "shape", "[", "1", "]", ")", "\n", "kv", ".", "add", "(", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "node_features", ")", ")", "]", ",", "node_features", ".", "numpy", "(", ")", ")", "\n", "\n", "all_ranks", "=", "[", "]", "\n", "for", "node", "in", "tqdm", "(", "graph_dataset", ".", "test_node_ids", ")", ":", "\n", "        ", "dists", "=", "distances", "(", "str", "(", "node", ")", ",", "candidate_positions", ",", "edge2nbs", ",", "kv", ",", "pseudo_leaf_node", ")", "\n", "scores", ",", "labels", "=", "rearrange", "(", "torch", ".", "Tensor", "(", "dists", ")", ",", "candidate_positions", ",", "node2pos", "[", "node", "]", ")", "\n", "all_ranks", ".", "extend", "(", "pre_metric", "(", "scores", ",", "labels", ")", ")", "\n", "", "total_metrics", "=", "[", "metric", "(", "all_ranks", ")", "for", "metric", "in", "metrics", "]", "\n", "\n", "for", "i", ",", "mtr", "in", "enumerate", "(", "metrics", ")", ":", "\n", "        ", "print", "(", "'    {:15s}: {}'", ".", "format", "(", "mtr", ".", "__name__", ",", "total_metrics", "[", "i", "]", ")", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.train.main": [[16, 55], ["config.get_logger", "config.initialize", "config.get_logger.info", "node_features.size", "config.initialize", "config.initialize.set_embedding", "config.get_logger.info", "getattr", "config[].startswith", "filter", "config.initialize", "config.initialize", "time.time", "config.initialize_trainer", "config.initialize_trainer.", "Trainer.train", "time.time", "config.get_logger.info", "loss.", "getattr", "config[].startswith", "config[].startswith", "functools.partial", "functools.partial", "config.initialize.parameters"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.initialize", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.initialize", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.set_embedding", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.initialize", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.initialize", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.initialize_trainer", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer.train"], ["from", "pycocoevalcap", ".", "meteor", ".", "meteor", "import", "Meteor", "\n", "\n", "\n", "def", "train_one_epoch", "(", "model", ",", "dataloader", ",", "optimizer", ",", "args", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "tloss", "=", "0.", "\n", "tcnt", "=", "0.", "\n", "st_time", "=", "time", ".", "time", "(", ")", "\n", "with", "tqdm", "(", "dataloader", ",", "desc", "=", "'Train Ep '", "+", "str", "(", "epoch", ")", ",", "mininterval", "=", "60", ")", "as", "tq", ":", "\n", "        ", "for", "batch", "in", "tq", ":", "\n", "            ", "pred", "=", "model", "(", "batch", ")", "\n", "nll_loss", "=", "F", ".", "nll_loss", "(", "pred", ".", "view", "(", "-", "1", ",", "pred", ".", "shape", "[", "-", "1", "]", ")", ",", "batch", "[", "'tgt_text'", "]", ".", "view", "(", "-", "1", ")", ",", "ignore_index", "=", "0", ")", "\n", "loss", "=", "nll_loss", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss", "=", "loss", ".", "item", "(", ")", "\n", "if", "loss", "!=", "loss", ":", "\n", "                ", "raise", "ValueError", "(", "'NaN appear'", ")", "\n", "", "tloss", "+=", "loss", "*", "len", "(", "batch", "[", "'tgt_text'", "]", ")", "\n", "tcnt", "+=", "len", "(", "batch", "[", "'tgt_text'", "]", ")", "\n", "tq", ".", "set_postfix", "(", "{", "'loss'", ":", "tloss", "/", "tcnt", "}", ",", "refresh", "=", "False", ")", "\n", "", "", "print", "(", "'Train Ep '", ",", "str", "(", "epoch", ")", ",", "'AVG Loss '", ",", "tloss", "/", "tcnt", ",", "'Steps '", ",", "tcnt", ",", "'Time '", ",", "time", ".", "time", "(", ")", "-", "st_time", ",", "'GPU'", ",", "torch", ".", "cuda", ".", "max_memory_cached", "(", ")", "/", "1024.0", "/", "1024.0", "/", "1024.0", ")", "\n", "torch", ".", "save", "(", "model", ",", "args", ".", "save_model", "+", "str", "(", "epoch", "%", "100", ")", ")", "\n", "\n", "\n", "", "val_loss", "=", "2", "**", "31", "\n", "def", "eval_it", "(", "model", ",", "dataloader", ",", "args", ",", "epoch", ")", ":", "\n", "    ", "global", "val_loss", "\n", "model", ".", "eval", "(", ")", "\n", "tloss", "=", "0.", "\n", "tcnt", "=", "0.", "\n", "st_time", "=", "time", ".", "time", "(", ")", "\n", "with", "tqdm", "(", "dataloader", ",", "desc", "=", "'Eval Ep '", "+", "str", "(", "epoch", ")", ",", "mininterval", "=", "60", ")", "as", "tq", ":", "\n", "        ", "for", "batch", "in", "tq", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", "=", "model", "(", "batch", ")", "\n", "nll_loss", "=", "F", ".", "nll_loss", "(", "pred", ".", "view", "(", "-", "1", ",", "pred", ".", "shape", "[", "-", "1", "]", ")", ",", "batch", "[", "'tgt_text'", "]", ".", "view", "(", "-", "1", ")", ",", "ignore_index", "=", "0", ")", "\n", "", "loss", "=", "nll_loss", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.infer.prepare_device": [[15, 31], ["torch.cuda.device_count", "torch.device", "list", "logger.warning", "logger.warning", "range"], "function", ["None"], ["def", "prepare_device", "(", "n_gpu_use", ",", "logger", ")", ":", "\n", "    ", "\"\"\"\n    setup GPU device if available, move model into configured device\n    \"\"\"", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "n_gpu_use", ">", "0", "and", "n_gpu", "==", "0", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Warning: There\\'s no GPU available on this machine,\"", "\n", "\"training will be performed on CPU.\"", ")", "\n", "n_gpu_use", "=", "0", "\n", "", "if", "n_gpu_use", ">", "n_gpu", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Warning: The number of GPU\\'s configured to use is {}, but only {} are available \"", "\n", "\"on this machine.\"", ".", "format", "(", "n_gpu_use", ",", "n_gpu", ")", ")", "\n", "n_gpu_use", "=", "n_gpu", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "n_gpu_use", ">", "0", "else", "'cpu'", ")", "\n", "list_ids", "=", "list", "(", "range", "(", "n_gpu_use", ")", ")", "\n", "return", "device", ",", "list_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.infer.main": [[33, 143], ["numpy.array", "gensim.models.KeyedVectors", "gensim.models.KeyedVectors.add", "config.get_logger", "torch.multiprocessing.set_sharing_strategy", "data_loader.UnifiedDataLoader", "config.get_logger.info", "config.initialize", "node_features.size", "torch.nn.DataParallel.set_embedding", "config.get_logger.info", "config.get_logger.info", "torch.load", "torch.nn.DataParallel.load_state_dict", "infer.prepare_device", "torch.nn.DataParallel.to", "torch.nn.DataParallel.set_device", "torch.nn.DataParallel.eval", "tqdm.tqdm", "pathlib.Path", "pathlib.Path.parent.mkdir", "open", "torch.tensor().to.sum", "torch.nn.DataParallel", "more_itertools.sliced", "list", "torch.nn.DataParallel.forward_encoders", "batched_model.append", "batched_positions.append", "torch.no_grad", "open", "fout.write", "tqdm.tqdm", "line.strip.strip", "test_dataset._get_subgraph_and_node_pair", "zip", "torch.tensor", "torch.tensor", "zip", "test_dataset._get_batch_edge_node_path", "len", "enumerate", "torch.tensor().to", "zip", "torch.cat", "torch.cat.cpu().squeeze_().tolist", "fout.write", "line.strip.split", "vocab.append", "torch.tensor().to.append", "tqdm.tqdm", "ur.to.detach().cpu", "vr.to.detach().cpu", "torch.tensor().to.expand", "ur.to.to", "vr.to.to", "torch.nn.DataParallel.match", "torch.cat.append", "config[].startswith", "config[].startswith", "torch.tensor", "torch.cat.cpu().squeeze_", "segs[].split", "float", "ur.to.detach", "vr.to.detach", "segs[].split", "torch.cat.cpu", "sorted", "sorted", "str", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.initialize", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.set_embedding", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.load", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.infer.prepare_device", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.set_device", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.ExpanMatchModel.forward_encoders", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph_and_node_pair", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_batch_edge_node_path"], ["", "def", "main", "(", "config", ",", "args_outer", ")", ":", "\n", "# Load new taxons and normalize embeddings if needed", "\n", "    ", "vocab", "=", "[", "]", "\n", "nf", "=", "[", "]", "\n", "with", "open", "(", "args_outer", ".", "taxon", ",", "'r'", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "                ", "segs", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "vocab", ".", "append", "(", "\"_\"", ".", "join", "(", "segs", "[", "0", "]", ".", "split", "(", "\" \"", ")", ")", ")", "\n", "nf", ".", "append", "(", "[", "float", "(", "ele", ")", "for", "ele", "in", "segs", "[", "1", "]", ".", "split", "(", "\" \"", ")", "]", ")", "\n", "\n", "", "", "", "nf", "=", "np", ".", "array", "(", "nf", ")", "\n", "if", "config", "[", "'train_data_loader'", "]", "[", "'args'", "]", "[", "'normalize_embed'", "]", ":", "\n", "        ", "row_sums", "=", "nf", ".", "sum", "(", "axis", "=", "1", ")", "\n", "nf", "=", "nf", "/", "row_sums", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "kv", "=", "KeyedVectors", "(", "vector_size", "=", "nf", ".", "shape", "[", "1", "]", ")", "\n", "kv", ".", "add", "(", "vocab", ",", "nf", ")", "\n", "\n", "# Load trained model and existing taxonomy", "\n", "mode", "=", "config", "[", "'mode'", "]", "\n", "logger", "=", "config", ".", "get_logger", "(", "'test'", ")", "\n", "torch", ".", "multiprocessing", ".", "set_sharing_strategy", "(", "'file_system'", ")", "\n", "test_data_loader", "=", "module_data", ".", "UnifiedDataLoader", "(", "\n", "mode", "=", "mode", ",", "\n", "data_path", "=", "config", "[", "'data_path'", "]", ",", "\n", "sampling_mode", "=", "0", ",", "\n", "batch_size", "=", "1", ",", "\n", "expand_factor", "=", "config", "[", "'train_data_loader'", "]", "[", "'args'", "]", "[", "'expand_factor'", "]", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "8", ",", "\n", "cache_refresh_time", "=", "config", "[", "'train_data_loader'", "]", "[", "'args'", "]", "[", "'cache_refresh_time'", "]", ",", "\n", "normalize_embed", "=", "config", "[", "'train_data_loader'", "]", "[", "'args'", "]", "[", "'normalize_embed'", "]", ",", "\n", "# test_topk=args_outer.topk,", "\n", "test", "=", "1", "\n", ")", "\n", "logger", ".", "info", "(", "test_data_loader", ")", "\n", "test_dataset", "=", "test_data_loader", ".", "dataset", "\n", "indice2word", "=", "test_dataset", ".", "vocab", "\n", "\n", "# build model architecture", "\n", "model", "=", "config", ".", "initialize", "(", "'arch'", ",", "module_arch", ",", "mode", ")", "\n", "node_features", "=", "test_dataset", ".", "node_features", "\n", "vocab_size", ",", "embed_dim", "=", "node_features", ".", "size", "(", ")", "\n", "model", ".", "set_embedding", "(", "vocab_size", "=", "vocab_size", ",", "embed_dim", "=", "embed_dim", ")", "\n", "logger", ".", "info", "(", "model", ")", "\n", "\n", "# load saved model", "\n", "logger", ".", "info", "(", "'Loading checkpoint: {} ...'", ".", "format", "(", "config", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", ".", "resume", ")", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "if", "config", "[", "'n_gpu'", "]", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "# prepare model for inference", "\n", "device", ",", "device_ids", "=", "prepare_device", "(", "config", "[", "'n_gpu'", "]", ",", "logger", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "set_device", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "\"\"\"Start inference\"\"\"", "\n", "candidate_positions", "=", "test_dataset", ".", "all_edges", "\n", "if", "'g'", "in", "mode", ":", "\n", "        ", "edge2subgraph", "=", "{", "e", ":", "test_dataset", ".", "_get_subgraph_and_node_pair", "(", "-", "1", ",", "e", "[", "0", "]", ",", "e", "[", "1", "]", ")", "for", "e", "in", "tqdm", "(", "candidate_positions", ",", "desc", "=", "'collecting nodegraph'", ")", "}", "\n", "\n", "", "batched_model", "=", "[", "]", "# save the CPU graph representation", "\n", "batched_positions", "=", "[", "]", "\n", "for", "edges", "in", "tqdm", "(", "mit", ".", "sliced", "(", "candidate_positions", ",", "args_outer", ".", "batch_size", ")", ",", "desc", "=", "\"Generating graph encoding ...\"", ")", ":", "\n", "        ", "edges", "=", "list", "(", "edges", ")", "\n", "us", ",", "vs", ",", "bgu", ",", "bgv", ",", "bpu", ",", "bpv", ",", "lens", "=", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "if", "'r'", "in", "mode", ":", "\n", "            ", "us", ",", "vs", "=", "zip", "(", "*", "edges", ")", "\n", "us", "=", "torch", ".", "tensor", "(", "us", ")", "\n", "vs", "=", "torch", ".", "tensor", "(", "vs", ")", "\n", "", "if", "'g'", "in", "mode", ":", "\n", "            ", "bgs", "=", "[", "edge2subgraph", "[", "e", "]", "for", "e", "in", "edges", "]", "\n", "bgu", ",", "bgv", "=", "zip", "(", "*", "bgs", ")", "\n", "", "if", "'p'", "in", "mode", ":", "\n", "            ", "bpu", ",", "bpv", ",", "lens", "=", "test_dataset", ".", "_get_batch_edge_node_path", "(", "edges", ")", "\n", "bpu", "=", "bpu", "\n", "bpv", "=", "bpv", "\n", "lens", "=", "lens", "\n", "\n", "", "ur", ",", "vr", "=", "model", ".", "forward_encoders", "(", "us", ",", "vs", ",", "bgu", ",", "bgv", ",", "bpu", ",", "bpv", ",", "lens", ")", "\n", "batched_model", ".", "append", "(", "(", "ur", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "vr", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "batched_positions", ".", "append", "(", "len", "(", "edges", ")", ")", "\n", "\n", "# start per query prediction", "\n", "", "save_path", "=", "Path", "(", "args_outer", ".", "save", ")", "\n", "save_path", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ",", "open", "(", "args_outer", ".", "save", ",", "\"w\"", ")", "as", "fout", ":", "\n", "        ", "fout", ".", "write", "(", "f\"Query\\tPredicted positions\\n\"", ")", "\n", "for", "i", ",", "query", "in", "tqdm", "(", "enumerate", "(", "vocab", ")", ")", ":", "\n", "            ", "batched_energy_scores", "=", "[", "]", "\n", "nf", "=", "torch", ".", "tensor", "(", "kv", "[", "str", "(", "query", ")", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "for", "(", "ur", ",", "vr", ")", ",", "n_position", "in", "zip", "(", "batched_model", ",", "batched_positions", ")", ":", "\n", "                ", "expanded_nf", "=", "nf", ".", "expand", "(", "n_position", ",", "-", "1", ")", "\n", "ur", "=", "ur", ".", "to", "(", "device", ")", "\n", "vr", "=", "vr", ".", "to", "(", "device", ")", "\n", "energy_scores", "=", "model", ".", "match", "(", "ur", ",", "vr", ",", "expanded_nf", ")", "\n", "batched_energy_scores", ".", "append", "(", "energy_scores", ")", "\n", "", "batched_energy_scores", "=", "torch", ".", "cat", "(", "batched_energy_scores", ")", "\n", "predicted_scores", "=", "batched_energy_scores", ".", "cpu", "(", ")", ".", "squeeze_", "(", ")", ".", "tolist", "(", ")", "\n", "if", "config", "[", "'loss'", "]", ".", "startswith", "(", "\"info_nce\"", ")", "or", "config", "[", "'loss'", "]", ".", "startswith", "(", "\"bce_loss\"", ")", ":", "# select top-5 predicted parents", "\n", "                ", "predict_candidate_positions", "=", "[", "candidate_positions", "[", "ele", "[", "0", "]", "]", "for", "ele", "in", "sorted", "(", "enumerate", "(", "predicted_scores", ")", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "[", ":", "args_outer", ".", "topm", "]", "]", "\n", "", "else", ":", "\n", "                ", "predict_candidate_positions", "=", "[", "candidate_positions", "[", "ele", "[", "0", "]", "]", "for", "ele", "in", "sorted", "(", "enumerate", "(", "predicted_scores", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", ":", "args_outer", ".", "topm", "]", "]", "\n", "", "predict_parents", "=", "\"\\t\"", ".", "join", "(", "[", "f'({indice2word[u]}, {indice2word[v]})'", "for", "(", "u", ",", "v", ")", "in", "predict_candidate_positions", "]", ")", "\n", "fout", ".", "write", "(", "f\"{query}\\t{predict_parents}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.generate_dataset_binary.main": [[4, 8], ["data_loader.dataset.MAGDataset"], "function", ["None"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "binary_dataset", "=", "MAGDataset", "(", "name", "=", "args", ".", "taxon_name", ",", "path", "=", "args", ".", "data_dir", ",", "embed_suffix", "=", "args", ".", "embed_suffix", ",", "raw", "=", "True", ",", "\n", "existing_partition", "=", "args", ".", "existing_partition", ",", "partition_pattern", "=", "args", ".", "partition_pattern", ",", "\n", "shortest_path", "=", "args", ".", "shortest_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.__init__": [[12, 59], ["args.parse_args.parse_args.parse_args", "utils.read_json", "parse_config._update_config", "pathlib.Path", "parse_config.ConfigParser.save_dir.mkdir", "parse_config.ConfigParser.log_dir.mkdir", "utils.write_json", "logger.setup_logging", "args.parse_args.parse_args.add_argument", "pathlib.Path", "pathlib.Path", "datetime.datetime.datetime.now().strftime", "pathlib.Path", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.read_json", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config._update_config", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.write_json", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.logger.logger.setup_logging"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "options", "=", "''", ",", "timestamp", "=", "True", ")", ":", "\n", "# parse default and custom cli options", "\n", "        ", "for", "opt", "in", "options", ":", "\n", "            ", "args", ".", "add_argument", "(", "*", "opt", ".", "flags", ",", "default", "=", "None", ",", "type", "=", "opt", ".", "type", ")", "\n", "", "args", "=", "args", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "device", ":", "\n", "            ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "device", "\n", "", "if", "args", ".", "resume", ":", "\n", "            ", "self", ".", "resume", "=", "Path", "(", "args", ".", "resume", ")", "\n", "if", "args", ".", "config", "is", "not", "None", ":", "\n", "                ", "self", ".", "cfg_fname", "=", "Path", "(", "args", ".", "config", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "cfg_fname", "=", "self", ".", "resume", ".", "parent", ".", "parent", "/", "'config.json'", "\n", "", "", "else", ":", "\n", "            ", "msg_no_cfg", "=", "\"Configuration file need to be specified. Add '-c config.json', for example.\"", "\n", "assert", "args", ".", "config", "is", "not", "None", ",", "msg_no_cfg", "\n", "self", ".", "resume", "=", "None", "\n", "self", ".", "cfg_fname", "=", "Path", "(", "args", ".", "config", ")", "\n", "\n", "# load config file and apply custom cli options", "\n", "", "config", "=", "read_json", "(", "self", ".", "cfg_fname", ")", "\n", "self", ".", "__config", "=", "_update_config", "(", "config", ",", "options", ",", "args", ")", "\n", "\n", "# set save_dir where trained model and log will be saved.", "\n", "save_dir", "=", "Path", "(", "self", ".", "config", "[", "'trainer'", "]", "[", "'save_dir'", "]", ")", "\n", "timestamp", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "r'%m%d_%H%M%S'", ")", "if", "timestamp", "else", "''", "\n", "if", "\"suffix\"", "in", "args", "and", "args", ".", "suffix", "!=", "\"\"", ":", "\n", "            ", "timestamp", "=", "timestamp", "+", "\"_\"", "+", "args", ".", "suffix", "\n", "\n", "", "exper_name", "=", "self", ".", "config", "[", "'name'", "]", "\n", "self", ".", "__save_dir", "=", "save_dir", "/", "exper_name", "/", "timestamp", "/", "'models'", "\n", "self", ".", "__log_dir", "=", "save_dir", "/", "exper_name", "/", "timestamp", "/", "'log'", "\n", "\n", "self", ".", "save_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "origin_save_fir", "=", "self", ".", "save_dir", "\n", "\n", "# save updated config file to the checkpoint dir", "\n", "write_json", "(", "self", ".", "config", ",", "self", ".", "save_dir", "/", "'config.json'", ")", "\n", "\n", "# configure logging module", "\n", "setup_logging", "(", "self", ".", "log_dir", ")", "\n", "self", ".", "log_levels", "=", "{", "\n", "0", ":", "logging", ".", "WARNING", ",", "\n", "1", ":", "logging", ".", "INFO", ",", "\n", "2", ":", "logging", ".", "DEBUG", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.set_save_dir": [[61, 64], ["parse_config.ConfigParser.save_dir.mkdir"], "methods", ["None"], ["", "def", "set_save_dir", "(", "self", ",", "trial_id", ")", ":", "\n", "        ", "self", ".", "__save_dir", "=", "self", ".", "origin_save_fir", "/", "f'trial{trial_id}'", "\n", "self", ".", "save_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.initialize": [[65, 73], ["getattr"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "name", ",", "module", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"\n        finds a function handle with the name given as 'type' in config, and returns the \n        instance initialized with corresponding keyword args given as 'args'.\n        \"\"\"", "\n", "module_cfg", "=", "self", "[", "name", "]", "\n", "# following is essentially module[module_cfg['type]](*args, **module_cfg['args'])", "\n", "return", "getattr", "(", "module", ",", "module_cfg", "[", "'type'", "]", ")", "(", "*", "args", ",", "**", "module_cfg", "[", "'args'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.initialize_trainer": [[74, 82], ["getattr", "module_cfg.get"], "methods", ["None"], ["", "def", "initialize_trainer", "(", "self", ",", "name", ",", "module", ")", ":", "\n", "        ", "\"\"\"\n        finds a function handle with the name given as 'type' in config, and returns the\n        instance initialized with corresponding keyword args given as 'args'.\n        \"\"\"", "\n", "module_cfg", "=", "self", "[", "name", "]", "\n", "# following is essentially module[module_cfg['type]](*args, **module_cfg['args'])", "\n", "return", "getattr", "(", "module", ",", "module_cfg", ".", "get", "(", "'trainer'", ",", "'Trainer'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.__getitem__": [[83, 85], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "config", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.get_logger": [[86, 92], ["logging.getLogger", "logging.getLogger.setLevel", "parse_config.ConfigParser.log_levels.keys"], "methods", ["None"], ["", "def", "get_logger", "(", "self", ",", "name", ",", "verbosity", "=", "2", ")", ":", "\n", "        ", "msg_verbosity", "=", "'verbosity option {} is invalid. Valid options are {}.'", ".", "format", "(", "verbosity", ",", "self", ".", "log_levels", ".", "keys", "(", ")", ")", "\n", "assert", "verbosity", "in", "self", ".", "log_levels", ",", "msg_verbosity", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "self", ".", "log_levels", "[", "verbosity", "]", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.config": [[94, 97], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__config", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.save_dir": [[98, 101], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "save_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.log_dir": [[102, 105], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "log_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config._update_config": [[107, 113], ["getattr", "parse_config._get_opt_name", "parse_config._set_by_path"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config._get_opt_name", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config._set_by_path"], ["", "", "def", "_update_config", "(", "config", ",", "options", ",", "args", ")", ":", "\n", "    ", "for", "opt", "in", "options", ":", "\n", "        ", "value", "=", "getattr", "(", "args", ",", "_get_opt_name", "(", "opt", ".", "flags", ")", ")", "\n", "if", "value", "is", "not", "None", ":", "\n", "            ", "_set_by_path", "(", "config", ",", "opt", ".", "target", ",", "value", ")", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config._get_opt_name": [[114, 119], ["flags[].replace", "flg.startswith", "flg.replace"], "function", ["None"], ["", "def", "_get_opt_name", "(", "flags", ")", ":", "\n", "    ", "for", "flg", "in", "flags", ":", "\n", "        ", "if", "flg", ".", "startswith", "(", "'--'", ")", ":", "\n", "            ", "return", "flg", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "", "", "return", "flags", "[", "0", "]", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config._set_by_path": [[120, 123], ["parse_config._get_by_path"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config._get_by_path"], ["", "def", "_set_by_path", "(", "tree", ",", "keys", ",", "value", ")", ":", "\n", "    ", "\"\"\"Set a value in a nested object in tree by sequence of keys.\"\"\"", "\n", "_get_by_path", "(", "tree", ",", "keys", "[", ":", "-", "1", "]", ")", "[", "keys", "[", "-", "1", "]", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config._get_by_path": [[124, 127], ["functools.reduce"], "function", ["None"], ["", "def", "_get_by_path", "(", "tree", ",", "keys", ")", ":", "\n", "    ", "\"\"\"Access a nested object in tree by sequence of keys.\"\"\"", "\n", "return", "reduce", "(", "getitem", ",", "keys", ",", "tree", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.rearrange": [[16, 23], ["numpy.array().any", "torch.cat().int", "torch.cat().int", "torch.cat", "torch.cat", "numpy.where", "numpy.where", "numpy.array", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "len", "len"], "function", ["None"], ["def", "rearrange", "(", "energy_scores", ",", "candidate_position_idx", ",", "true_position_idx", ")", ":", "\n", "    ", "tmp", "=", "np", ".", "array", "(", "[", "[", "x", "==", "y", "for", "x", "in", "candidate_position_idx", "]", "for", "y", "in", "true_position_idx", "]", ")", ".", "any", "(", "0", ")", "\n", "correct", "=", "np", ".", "where", "(", "tmp", ")", "[", "0", "]", "\n", "incorrect", "=", "np", ".", "where", "(", "~", "tmp", ")", "[", "0", "]", "\n", "labels", "=", "torch", ".", "cat", "(", "(", "torch", ".", "ones", "(", "len", "(", "correct", ")", ")", ",", "torch", ".", "zeros", "(", "len", "(", "incorrect", ")", ")", ")", ")", ".", "int", "(", ")", "\n", "energy_scores", "=", "torch", ".", "cat", "(", "(", "energy_scores", "[", "correct", "]", ",", "energy_scores", "[", "incorrect", "]", ")", ")", "\n", "return", "energy_scores", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.find_insert_posistion": [[25, 50], ["set", "set", "collections.deque", "collections.deque", "holdout_graph.predecessors", "holdout_graph.successors", "collections.deque.popleft", "collections.deque.popleft", "set.add", "set.add", "list", "set.add", "list", "holdout_graph.predecessors", "holdout_graph.successors"], "function", ["None"], ["", "def", "find_insert_posistion", "(", "node_ids", ",", "core_subgraph", ",", "holdout_graph", ",", "pseudo_leaf_node", ")", ":", "\n", "    ", "node2pos", "=", "{", "}", "\n", "subgraph", "=", "core_subgraph", "\n", "for", "node", "in", "node_ids", ":", "\n", "        ", "parents", "=", "set", "(", ")", "\n", "children", "=", "set", "(", ")", "\n", "ps", "=", "deque", "(", "holdout_graph", ".", "predecessors", "(", "node", ")", ")", "\n", "cs", "=", "deque", "(", "holdout_graph", ".", "successors", "(", "node", ")", ")", "\n", "while", "ps", ":", "\n", "            ", "p", "=", "ps", ".", "popleft", "(", ")", "\n", "if", "p", "in", "subgraph", ":", "\n", "                ", "parents", ".", "add", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "ps", "+=", "list", "(", "holdout_graph", ".", "predecessors", "(", "p", ")", ")", "\n", "", "", "while", "cs", ":", "\n", "            ", "c", "=", "cs", ".", "popleft", "(", ")", "\n", "if", "c", "in", "subgraph", ":", "\n", "                ", "children", ".", "add", "(", "c", ")", "\n", "", "else", ":", "\n", "                ", "cs", "+=", "list", "(", "holdout_graph", ".", "successors", "(", "c", ")", ")", "\n", "", "", "if", "not", "children", ":", "\n", "            ", "children", ".", "add", "(", "pseudo_leaf_node", ")", "\n", "", "position", "=", "[", "(", "p", ",", "c", ")", "for", "p", "in", "parents", "for", "c", "in", "children", "]", "\n", "node2pos", "[", "node", "]", "=", "position", "\n", "", "return", "node2pos", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.get_holdout_subgraph": [[52, 86], ["full_graph.subgraph().copy", "full_graph.subgraph().copy.nodes", "set", "set", "collections.deque", "collections.deque", "set", "full_graph.subgraph", "full_graph.predecessors", "full_graph.successors", "collections.deque.popleft", "collections.deque.popleft", "networkx.algorithms.descendants", "full_graph.subgraph().copy.out_degree", "set", "set", "set.intersection", "set.add", "list", "set.add", "list", "full_graph.subgraph().copy.add_edge", "full_graph.subgraph().copy.successors", "itertools.chain.from_iterable", "full_graph.predecessors", "full_graph.successors", "full_graph.subgraph().copy.remove_edge"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.copy"], ["", "def", "get_holdout_subgraph", "(", "node_ids", ",", "full_graph", ")", ":", "\n", "    ", "node_to_remove", "=", "[", "n", "for", "n", "in", "full_graph", ".", "nodes", "if", "n", "not", "in", "node_ids", "]", "\n", "subgraph", "=", "full_graph", ".", "subgraph", "(", "node_ids", ")", ".", "copy", "(", ")", "\n", "for", "node", "in", "node_to_remove", ":", "\n", "        ", "parents", "=", "set", "(", ")", "\n", "children", "=", "set", "(", ")", "\n", "ps", "=", "deque", "(", "full_graph", ".", "predecessors", "(", "node", ")", ")", "\n", "cs", "=", "deque", "(", "full_graph", ".", "successors", "(", "node", ")", ")", "\n", "while", "ps", ":", "\n", "            ", "p", "=", "ps", ".", "popleft", "(", ")", "\n", "if", "p", "in", "subgraph", ":", "\n", "                ", "parents", ".", "add", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "ps", "+=", "list", "(", "full_graph", ".", "predecessors", "(", "p", ")", ")", "\n", "", "", "while", "cs", ":", "\n", "            ", "c", "=", "cs", ".", "popleft", "(", ")", "\n", "if", "c", "in", "subgraph", ":", "\n", "                ", "children", ".", "add", "(", "c", ")", "\n", "", "else", ":", "\n", "                ", "cs", "+=", "list", "(", "full_graph", ".", "successors", "(", "c", ")", ")", "\n", "", "", "for", "p", "in", "parents", ":", "\n", "            ", "for", "c", "in", "children", ":", "\n", "                ", "subgraph", ".", "add_edge", "(", "p", ",", "c", ")", "\n", "# remove jump edges", "\n", "", "", "", "node2descendants", "=", "{", "n", ":", "set", "(", "descendants", "(", "subgraph", ",", "n", ")", ")", "for", "n", "in", "subgraph", ".", "nodes", "}", "\n", "for", "node", "in", "subgraph", ".", "nodes", "(", ")", ":", "\n", "        ", "if", "subgraph", ".", "out_degree", "(", "node", ")", ">", "1", ":", "\n", "            ", "successors1", "=", "set", "(", "subgraph", ".", "successors", "(", "node", ")", ")", "\n", "successors2", "=", "set", "(", "chain", ".", "from_iterable", "(", "[", "node2descendants", "[", "n", "]", "for", "n", "in", "successors1", "]", ")", ")", "\n", "checkset", "=", "successors1", ".", "intersection", "(", "successors2", ")", "\n", "if", "checkset", ":", "\n", "                ", "for", "s", "in", "checkset", ":", "\n", "                    ", "subgraph", ".", "remove_edge", "(", "node", ",", "s", ")", "\n", "", "", "", "", "return", "subgraph", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.distances": [[88, 107], ["kv.distance", "dists.append", "dists.append", "str", "kv.distance", "str"], "function", ["None"], ["", "def", "distances", "(", "query_node", ",", "edges", ",", "kv", ",", "pseudo_leaf_node", ")", ":", "\n", "    ", "node2dist", "=", "{", "}", "\n", "dists", "=", "[", "]", "\n", "for", "u", ",", "v", "in", "edges", ":", "\n", "        ", "if", "u", "in", "node2dist", ":", "\n", "            ", "du", "=", "node2dist", "[", "u", "]", "\n", "", "else", ":", "\n", "            ", "du", "=", "kv", ".", "distance", "(", "query_node", ",", "str", "(", "u", ")", ")", "\n", "node2dist", "[", "u", "]", "=", "du", "\n", "", "if", "v", "==", "pseudo_leaf_node", ":", "\n", "            ", "dists", ".", "append", "(", "du", ")", "\n", "", "else", ":", "\n", "            ", "if", "v", "in", "node2dist", ":", "\n", "                ", "dv", "=", "node2dist", "[", "v", "]", "\n", "", "else", ":", "\n", "                ", "dv", "=", "kv", ".", "distance", "(", "query_node", ",", "str", "(", "v", ")", ")", "\n", "node2dist", "[", "v", "]", "=", "dv", "\n", "", "dists", ".", "append", "(", "(", "du", "+", "dv", ")", "/", "2", ")", "\n", "", "", "return", "dists", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.calculate_depth": [[109, 123], ["graph.successors", "max", "set", "itertools.chain.from_iterable", "graph.in_degree", "closestedge.calculate_depth.depth"], "function", ["None"], ["", "def", "calculate_depth", "(", "graph", ")", ":", "\n", "    ", "def", "depth", "(", "node", ")", ":", "\n", "        ", "l", "=", "graph", ".", "successors", "(", "node", ")", "\n", "d", "=", "1", "\n", "while", "True", ":", "\n", "            ", "next_level", "=", "set", "(", "chain", ".", "from_iterable", "(", "[", "graph", ".", "successors", "(", "n", ")", "for", "n", "in", "l", "]", ")", ")", "\n", "if", "next_level", ":", "\n", "                ", "l", "=", "next_level", "\n", "d", "+=", "1", "\n", "", "else", ":", "\n", "                ", "return", "d", "\n", "", "", "", "roots", "=", "[", "n", "for", "n", "in", "graph", "if", "graph", ".", "in_degree", "(", "n", ")", "==", "0", "]", "\n", "d", "=", "max", "(", "[", "depth", "(", "r", ")", "for", "r", "in", "roots", "]", ")", "+", "1", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.main": [[125, 157], ["data_loader.dataset.MAGDataset", "functools.partial", "data_loader.dataset.MAGDataset.g_full.to_networkx", "closestedge.get_holdout_subgraph", "list", "list", "closestedge.get_holdout_subgraph", "closestedge.find_insert_posistion", "torch.normalize", "gensim.models.KeyedVectors", "gensim.models.KeyedVectors.add", "tqdm.tqdm", "enumerate", "getattr", "get_holdout_subgraph.nodes", "get_holdout_subgraph.add_edge", "set", "set", "F.normalize.numpy", "closestedge.distances", "closestedge.rearrange", "all_ranks.extend", "metric", "print", "networkx.algorithms.descendants", "itertools.chain.from_iterable", "str", "str", "torch.Tensor", "torch.Tensor", "functools.partial.", "range", "len", "node2descendants.items"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.get_holdout_subgraph", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.get_holdout_subgraph", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.find_insert_posistion", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.closestedge.distances", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.rearrange"], ["", "def", "main", "(", "args", ",", "metrics", ")", ":", "\n", "    ", "graph_dataset", "=", "MAGDataset", "(", "name", "=", "\"\"", ",", "path", "=", "args", ".", "data_path", ",", "raw", "=", "False", ")", "\n", "metrics", "=", "[", "getattr", "(", "module_metric", ",", "met", ")", "for", "met", "in", "metrics", "]", "\n", "pre_metric", "=", "partial", "(", "module_metric", ".", "obtain_ranks", ",", "mode", "=", "0", ")", "\n", "\n", "full_graph", "=", "graph_dataset", ".", "g_full", ".", "to_networkx", "(", ")", "\n", "core_subgraph", "=", "get_holdout_subgraph", "(", "graph_dataset", ".", "train_node_ids", ",", "full_graph", ")", "\n", "pseudo_leaf_node", "=", "-", "1", "\n", "for", "node", "in", "list", "(", "core_subgraph", ".", "nodes", "(", ")", ")", ":", "\n", "        ", "core_subgraph", ".", "add_edge", "(", "node", ",", "pseudo_leaf_node", ")", "\n", "", "node2descendants", "=", "{", "n", ":", "set", "(", "descendants", "(", "core_subgraph", ",", "n", ")", ")", "for", "n", "in", "core_subgraph", ".", "nodes", "}", "\n", "candidate_positions", "=", "list", "(", "set", "(", "chain", ".", "from_iterable", "(", "[", "[", "(", "n", ",", "d", ")", "for", "d", "in", "ds", "]", "for", "n", ",", "ds", "in", "node2descendants", ".", "items", "(", ")", "]", ")", ")", ")", "\n", "\n", "holdout_subgraph", "=", "get_holdout_subgraph", "(", "graph_dataset", ".", "train_node_ids", "+", "graph_dataset", ".", "test_node_ids", ",", "full_graph", ")", "\n", "node2pos", "=", "find_insert_posistion", "(", "graph_dataset", ".", "test_node_ids", ",", "core_subgraph", ",", "holdout_subgraph", ",", "pseudo_leaf_node", ")", "\n", "\n", "node_features", "=", "graph_dataset", ".", "g_full", ".", "ndata", "[", "'x'", "]", "\n", "node_features", "=", "F", ".", "normalize", "(", "node_features", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "kv", "=", "KeyedVectors", "(", "vector_size", "=", "node_features", ".", "shape", "[", "1", "]", ")", "\n", "kv", ".", "add", "(", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "node_features", ")", ")", "]", ",", "node_features", ".", "numpy", "(", ")", ")", "\n", "\n", "all_ranks", "=", "[", "]", "\n", "for", "node", "in", "tqdm", "(", "graph_dataset", ".", "test_node_ids", ")", ":", "\n", "        ", "dists", "=", "distances", "(", "str", "(", "node", ")", ",", "candidate_positions", ",", "kv", ",", "pseudo_leaf_node", ")", "\n", "scores", ",", "labels", "=", "rearrange", "(", "torch", ".", "Tensor", "(", "dists", ")", ",", "candidate_positions", ",", "node2pos", "[", "node", "]", ")", "\n", "all_ranks", ".", "extend", "(", "pre_metric", "(", "scores", ",", "labels", ")", ")", "\n", "", "total_metrics", "=", "[", "metric", "(", "all_ranks", ")", "for", "metric", "in", "metrics", "]", "\n", "\n", "for", "i", ",", "mtr", "in", "enumerate", "(", "metrics", ")", ":", "\n", "        ", "print", "(", "'    {:15s}: {}'", ".", "format", "(", "mtr", ".", "__name__", ",", "total_metrics", "[", "i", "]", ")", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.Timer.__init__": [[31, 33], ["datetime.datetime.datetime.now"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "cache", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.Timer.check": [[34, 39], ["datetime.datetime.datetime.now", "duration.total_seconds"], "methods", ["None"], ["", "def", "check", "(", "self", ")", ":", "\n", "        ", "now", "=", "datetime", ".", "now", "(", ")", "\n", "duration", "=", "now", "-", "self", ".", "cache", "\n", "self", ".", "cache", "=", "now", "\n", "return", "duration", ".", "total_seconds", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.Timer.reset": [[40, 42], ["datetime.datetime.datetime.now"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "cache", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.Taxon.__init__": [[44, 54], ["int", "int", "int", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tx_id", ",", "rank", "=", "-", "1", ",", "norm_name", "=", "\"none\"", ",", "display_name", "=", "\"None\"", ",", "main_type", "=", "\"\"", ",", "level", "=", "\"-100\"", ",", "p_count", "=", "0", ",", "c_count", "=", "0", ",", "create_date", "=", "\"None\"", ")", ":", "\n", "        ", "self", ".", "tx_id", "=", "int", "(", "tx_id", ")", "\n", "self", ".", "rank", "=", "int", "(", "rank", ")", "\n", "self", ".", "norm_name", "=", "norm_name", "\n", "self", ".", "display_name", "=", "display_name", "\n", "self", ".", "main_type", "=", "main_type", "\n", "self", ".", "level", "=", "int", "(", "level", ")", "\n", "self", ".", "p_count", "=", "int", "(", "p_count", ")", "\n", "self", ".", "c_count", "=", "int", "(", "c_count", ")", "\n", "self", ".", "create_date", "=", "create_date", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.Taxon.__str__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Taxon {} (name: {}, level: {})\"", ".", "format", "(", "self", ".", "tx_id", ",", "self", ".", "norm_name", ",", "self", ".", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.Taxon.__lt__": [[58, 63], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "another_taxon", ")", ":", "\n", "        ", "if", "self", ".", "level", "<", "another_taxon", ".", "level", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "rank", "<", "another_taxon", ".", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.custom_cat": [[9, 15], ["y.size", "x.reshape.reshape", "torch.cat", "torch.cat.flatten", "y.view"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size"], ["def", "custom_cat", "(", "x", ",", "y", ")", ":", "\n", "    ", "import", "torch", "\n", "n", "=", "y", ".", "size", "(", "0", ")", "\n", "x", "=", "x", ".", "reshape", "(", "n", ",", "-", "1", ")", "\n", "c", "=", "torch", ".", "cat", "(", "(", "y", ".", "view", "(", "-", "1", ",", "1", ")", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "return", "c", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.ensure_dir": [[17, 21], ["pathlib.Path", "pathlib.Path.is_dir", "pathlib.Path.mkdir"], "function", ["None"], ["", "def", "ensure_dir", "(", "dirname", ")", ":", "\n", "    ", "dirname", "=", "Path", "(", "dirname", ")", "\n", "if", "not", "dirname", ".", "is_dir", "(", ")", ":", "\n", "        ", "dirname", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.read_json": [[22, 25], ["fname.open", "json.load"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.load"], ["", "", "def", "read_json", "(", "fname", ")", ":", "\n", "    ", "with", "fname", ".", "open", "(", "'rt'", ")", "as", "handle", ":", "\n", "        ", "return", "json", ".", "load", "(", "handle", ",", "object_hook", "=", "OrderedDict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.write_json": [[26, 29], ["fname.open", "json.dump"], "function", ["None"], ["", "", "def", "write_json", "(", "content", ",", "fname", ")", ":", "\n", "    ", "with", "fname", ".", "open", "(", "'wt'", ")", "as", "handle", ":", "\n", "        ", "json", ".", "dump", "(", "content", ",", "handle", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.Taxonomy": [[64, 74], ["networkx.DiGraph", "util..taxonomy.add_nodes_from", "util..taxonomy.add_edges_from"], "function", ["None"], ["", "", "", "def", "Taxonomy", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "name", "=", "\"\"", ",", "node_list", "=", "[", "]", ",", "edge_list", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "taxonomy", "=", "nx", ".", "DiGraph", "(", ")", "\n", "\n", "", "def", "add_nodes_from", "(", "self", ",", "node_list", ")", ":", "\n", "        ", "self", ".", "taxonomy", ".", "add_nodes_from", "(", "node_list", ")", "\n", "\n", "", "def", "add_edges_from", "(", "self", ",", "edge_list", ")", ":", "\n", "        ", "self", ".", "taxonomy", ".", "add_edges_from", "(", "edge_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.GCNLayer.__init__": [[19, 32], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "model_zoo.GCNLayer.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.GCNLayer.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_feats", ",", "out_feats", ",", "activation", ",", "dropout", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GCNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_feats", ",", "out_feats", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_feats", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "", "self", ".", "activation", "=", "activation", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "0.", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.GCNLayer.reset_parameters": [[33, 38], ["model_zoo.GCNLayer.weight.data.uniform_", "math.sqrt", "model_zoo.GCNLayer.bias.data.uniform_", "model_zoo.GCNLayer.weight.size"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.GCNLayer.forward": [[39, 56], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "g.update_all", "g.ndata.pop", "model_zoo.GCNLayer.dropout", "dgl.copy_src", "dgl.copy_src", "dgl.sum", "dgl.sum", "model_zoo.GCNLayer.activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "g", ",", "h", ")", ":", "\n", "        ", "if", "self", ".", "dropout", ":", "\n", "            ", "h", "=", "self", ".", "dropout", "(", "h", ")", "\n", "", "h", "=", "torch", ".", "mm", "(", "h", ",", "self", ".", "weight", ")", "\n", "# normalization by square root of src degree", "\n", "h", "=", "h", "*", "g", ".", "ndata", "[", "'norm'", "]", "\n", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "g", ".", "update_all", "(", "fn", ".", "copy_src", "(", "src", "=", "'h'", ",", "out", "=", "'m'", ")", ",", "fn", ".", "sum", "(", "msg", "=", "'m'", ",", "out", "=", "'h'", ")", ")", "\n", "h", "=", "g", ".", "ndata", ".", "pop", "(", "'h'", ")", "\n", "# normalization by square root of dst degree", "\n", "h", "=", "h", "*", "g", ".", "ndata", "[", "'norm'", "]", "\n", "# bias", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "h", "=", "h", "+", "self", ".", "bias", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.GATLayer.__init__": [[58, 84], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "num_heads", "=", "1", ",", "feat_drop", "=", "0.5", ",", "attn_drop", "=", "0.5", ",", "leaky_relu_alpha", "=", "0.2", ",", "residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "GATLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_dim", ",", "num_heads", "*", "out_dim", ",", "bias", "=", "False", ")", "\n", "if", "feat_drop", ":", "\n", "            ", "self", ".", "feat_drop", "=", "nn", ".", "Dropout", "(", "feat_drop", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "feat_drop", "=", "lambda", "x", ":", "x", "\n", "", "if", "attn_drop", ":", "\n", "            ", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attn_drop", "=", "lambda", "x", ":", "x", "\n", "", "self", ".", "attn_l", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "size", "=", "(", "1", ",", "num_heads", ",", "out_dim", ")", ")", ")", "\n", "self", ".", "attn_r", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "size", "=", "(", "1", ",", "num_heads", ",", "out_dim", ")", ")", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "attn_l", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "attn_r", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "leaky_relu_alpha", ")", "\n", "self", ".", "softmax", "=", "dgl_edge_softmax", "\n", "self", ".", "residual", "=", "residual", "\n", "if", "residual", ":", "\n", "            ", "if", "in_dim", "!=", "out_dim", ":", "\n", "                ", "self", ".", "res_fc", "=", "nn", ".", "Linear", "(", "in_dim", ",", "num_heads", "*", "out_dim", ",", "bias", "=", "False", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "res_fc", ".", "weight", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "res_fc", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.GATLayer.forward": [[85, 110], ["model_zoo.GATLayer.feat_drop", "model_zoo.GATLayer.fc().reshape", "g.apply_edges", "model_zoo.GATLayer.edge_softmax", "g.update_all", "dgl.src_mul_edge", "dgl.src_mul_edge", "dgl.sum", "dgl.sum", "model_zoo.GATLayer.fc", "model_zoo.GATLayer.res_fc().reshape", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "model_zoo.GATLayer.res_fc"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.GATLayer.edge_softmax"], ["", "", "", "def", "forward", "(", "self", ",", "g", ",", "feature", ")", ":", "\n", "# prepare", "\n", "        ", "h", "=", "self", ".", "feat_drop", "(", "feature", ")", "# NxD", "\n", "ft", "=", "self", ".", "fc", "(", "h", ")", ".", "reshape", "(", "(", "h", ".", "shape", "[", "0", "]", ",", "self", ".", "num_heads", ",", "-", "1", ")", ")", "# NxHxD'", "\n", "a1", "=", "(", "ft", "*", "self", ".", "attn_l", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# N x H x 1", "\n", "a2", "=", "(", "ft", "*", "self", ".", "attn_r", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# N x H x 1", "\n", "g", ".", "ndata", "[", "'ft'", "]", "=", "ft", "\n", "g", ".", "ndata", "[", "'a1'", "]", "=", "a1", "\n", "g", ".", "ndata", "[", "'a2'", "]", "=", "a2", "\n", "# 1. compute edge attention", "\n", "g", ".", "apply_edges", "(", "self", ".", "edge_attention", ")", "\n", "# 2. compute softmax", "\n", "self", ".", "edge_softmax", "(", "g", ")", "\n", "# 3. compute the aggregated node features scaled by the dropped,", "\n", "# unnormalized attention values.", "\n", "g", ".", "update_all", "(", "fn", ".", "src_mul_edge", "(", "'ft'", ",", "'a_drop'", ",", "'ft'", ")", ",", "fn", ".", "sum", "(", "'ft'", ",", "'ft'", ")", ")", "\n", "ret", "=", "g", ".", "ndata", "[", "'ft'", "]", "\n", "# 4. residual", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "if", "self", ".", "res_fc", "is", "not", "None", ":", "\n", "                ", "resval", "=", "self", ".", "res_fc", "(", "h", ")", ".", "reshape", "(", "(", "h", ".", "shape", "[", "0", "]", ",", "self", ".", "num_heads", ",", "-", "1", ")", ")", "# NxHxD'", "\n", "", "else", ":", "\n", "                ", "resval", "=", "torch", ".", "unsqueeze", "(", "h", ",", "1", ")", "# Nx1xD'", "\n", "", "ret", "=", "resval", "+", "ret", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.GATLayer.edge_attention": [[111, 115], ["model_zoo.GATLayer.leaky_relu"], "methods", ["None"], ["", "def", "edge_attention", "(", "self", ",", "edges", ")", ":", "\n", "# an edge UDF to compute unnormalized attention values from src and dst", "\n", "        ", "a", "=", "self", ".", "leaky_relu", "(", "edges", ".", "src", "[", "'a1'", "]", "+", "edges", ".", "dst", "[", "'a2'", "]", ")", "\n", "return", "{", "'a'", ":", "a", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.GATLayer.edge_softmax": [[116, 120], ["model_zoo.GATLayer.softmax", "model_zoo.GATLayer.attn_drop", "g.edata.pop"], "methods", ["None"], ["", "def", "edge_softmax", "(", "self", ",", "g", ")", ":", "\n", "        ", "attention", "=", "self", ".", "softmax", "(", "g", ",", "g", ".", "edata", ".", "pop", "(", "'a'", ")", ")", "\n", "# Dropout attention scores and save them", "\n", "g", ".", "edata", "[", "'a_drop'", "]", "=", "self", ".", "attn_drop", "(", "attention", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.GCN.__init__": [[122, 132], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_zoo.GCN.layers.append", "range", "model_zoo.GCN.layers.append", "model_zoo.GCNLayer", "model_zoo.GCN.layers.append", "model_zoo.GCNLayer", "model_zoo.GCNLayer"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "hidden_dim", ",", "out_dim", ",", "num_layers", ",", "activation", ",", "in_dropout", "=", "0.1", ",", "hidden_dropout", "=", "0.1", ",", "output_dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# input layer", "\n", "self", ".", "layers", ".", "append", "(", "GCNLayer", "(", "in_dim", ",", "hidden_dim", ",", "activation", ",", "in_dropout", ")", ")", "\n", "# hidden layers", "\n", "for", "l", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "GCNLayer", "(", "hidden_dim", ",", "hidden_dim", ",", "activation", ",", "hidden_dropout", ")", ")", "\n", "# output layer", "\n", "", "self", ".", "layers", ".", "append", "(", "GCNLayer", "(", "hidden_dim", ",", "out_dim", ",", "None", ",", "output_dropout", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.GCN.forward": [[133, 143], ["g.in_degrees().float", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "norm.to.to.to", "norm.to.to.unsqueeze", "layer", "g.in_degrees", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "features", ")", ":", "\n", "        ", "h", "=", "features", "\n", "degs", "=", "g", ".", "in_degrees", "(", ")", ".", "float", "(", ")", "\n", "norm", "=", "torch", ".", "pow", "(", "degs", ",", "-", "0.5", ")", "\n", "norm", "[", "torch", ".", "isinf", "(", "norm", ")", "]", "=", "0", "\n", "norm", "=", "norm", ".", "to", "(", "h", ".", "device", ")", "\n", "g", ".", "ndata", "[", "'norm'", "]", "=", "norm", ".", "unsqueeze", "(", "1", ")", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "h", "=", "layer", "(", "g", ",", "h", ")", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.PGCN.__init__": [[145, 159], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_zoo.PGCN.layers.append", "model_zoo.PGCN.prop_position_embeddings.append", "range", "model_zoo.PGCN.layers.append", "model_zoo.PGCN.prop_position_embeddings.append", "model_zoo.GCNLayer", "torch.Embedding", "torch.Embedding", "torch.Embedding", "model_zoo.PGCN.layers.append", "model_zoo.PGCN.prop_position_embeddings.append", "model_zoo.GCNLayer", "torch.Embedding", "torch.Embedding", "torch.Embedding", "model_zoo.GCNLayer", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "hidden_dim", ",", "out_dim", ",", "pos_dim", ",", "num_layers", ",", "activation", ",", "in_dropout", "=", "0.1", ",", "hidden_dropout", "=", "0.1", ",", "output_dropout", "=", "0.0", ",", "position_vocab_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "PGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "prop_position_embeddings", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# input layer", "\n", "self", ".", "layers", ".", "append", "(", "GCNLayer", "(", "in_dim", "+", "pos_dim", ",", "hidden_dim", ",", "activation", ",", "in_dropout", ")", ")", "\n", "self", ".", "prop_position_embeddings", ".", "append", "(", "nn", ".", "Embedding", "(", "position_vocab_size", ",", "pos_dim", ")", ")", "\n", "# hidden layers", "\n", "for", "l", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "GCNLayer", "(", "hidden_dim", "+", "pos_dim", ",", "hidden_dim", ",", "activation", ",", "hidden_dropout", ")", ")", "\n", "self", ".", "prop_position_embeddings", ".", "append", "(", "nn", ".", "Embedding", "(", "position_vocab_size", ",", "pos_dim", ")", ")", "\n", "# output layer", "\n", "", "self", ".", "layers", ".", "append", "(", "GCNLayer", "(", "hidden_dim", "+", "pos_dim", ",", "out_dim", ",", "None", ",", "output_dropout", ")", ")", "\n", "self", ".", "prop_position_embeddings", ".", "append", "(", "nn", ".", "Embedding", "(", "position_vocab_size", ",", "pos_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.PGCN.forward": [[160, 173], ["g.in_degrees().float", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "norm.to.to.to", "norm.to.to.unsqueeze", "g.ndata.pop().to", "enumerate", "layer", "g.in_degrees", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "g.ndata.pop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "features", ")", ":", "\n", "        ", "h", "=", "features", "\n", "degs", "=", "g", ".", "in_degrees", "(", ")", ".", "float", "(", ")", "\n", "norm", "=", "torch", ".", "pow", "(", "degs", ",", "-", "0.5", ")", "\n", "norm", "[", "torch", ".", "isinf", "(", "norm", ")", "]", "=", "0", "\n", "norm", "=", "norm", ".", "to", "(", "h", ".", "device", ")", "\n", "g", ".", "ndata", "[", "'norm'", "]", "=", "norm", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "positions", "=", "g", ".", "ndata", ".", "pop", "(", "'pos'", ")", ".", "to", "(", "h", ".", "device", ")", "\n", "for", "idx", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "p", "=", "self", ".", "prop_position_embeddings", "[", "idx", "]", "(", "positions", ")", "\n", "h", "=", "layer", "(", "g", ",", "torch", ".", "cat", "(", "(", "h", ",", "p", ")", ",", "1", ")", ")", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.GAT.__init__": [[175, 187], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_zoo.GAT.gat_layers.append", "range", "model_zoo.GAT.gat_layers.append", "model_zoo.GATLayer", "model_zoo.GAT.gat_layers.append", "model_zoo.GATLayer", "model_zoo.GATLayer"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "hidden_dim", ",", "out_dim", ",", "num_layers", ",", "heads", ",", "activation", ",", "feat_drop", "=", "0.5", ",", "attn_drop", "=", "0.5", ",", "leaky_relu_alpha", "=", "0.2", ",", "residual", "=", "False", ")", ":", "\n", "        ", "super", "(", "GAT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "gat_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "# input layer, no residual", "\n", "self", ".", "gat_layers", ".", "append", "(", "GATLayer", "(", "in_dim", ",", "hidden_dim", ",", "heads", "[", "0", "]", ",", "feat_drop", ",", "attn_drop", ",", "leaky_relu_alpha", ",", "False", ")", ")", "\n", "# hidden layers, due to multi-head, the in_dim = hidden_dim * num_heads", "\n", "for", "l", "in", "range", "(", "1", ",", "num_layers", ")", ":", "\n", "            ", "self", ".", "gat_layers", ".", "append", "(", "GATLayer", "(", "hidden_dim", "*", "heads", "[", "l", "-", "1", "]", ",", "hidden_dim", ",", "heads", "[", "l", "]", ",", "feat_drop", ",", "attn_drop", ",", "leaky_relu_alpha", ",", "residual", ")", ")", "\n", "# output layer", "\n", "", "self", ".", "gat_layers", ".", "append", "(", "GATLayer", "(", "hidden_dim", "*", "heads", "[", "-", "2", "]", ",", "out_dim", ",", "heads", "[", "-", "1", "]", ",", "feat_drop", ",", "attn_drop", ",", "leaky_relu_alpha", ",", "residual", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.GAT.forward": [[188, 196], ["range", "model_zoo.GAT.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "features", ")", ":", "\n", "        ", "h", "=", "features", "\n", "for", "l", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "h", "=", "self", ".", "gat_layers", "[", "l", "]", "(", "g", ",", "h", ")", ".", "flatten", "(", "1", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "# output projection", "\n", "", "h", "=", "self", ".", "gat_layers", "[", "-", "1", "]", "(", "g", ",", "h", ")", ".", "mean", "(", "1", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.PGAT.__init__": [[198, 214], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_zoo.PGAT.gat_layers.append", "model_zoo.PGAT.prop_position_embeddings.append", "range", "model_zoo.PGAT.gat_layers.append", "model_zoo.PGAT.prop_position_embeddings.append", "model_zoo.GATLayer", "torch.Embedding", "torch.Embedding", "torch.Embedding", "model_zoo.PGAT.gat_layers.append", "model_zoo.PGAT.prop_position_embeddings.append", "model_zoo.GATLayer", "torch.Embedding", "torch.Embedding", "torch.Embedding", "model_zoo.GATLayer", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "hidden_dim", ",", "out_dim", ",", "pos_dim", ",", "num_layers", ",", "heads", ",", "activation", ",", "feat_drop", "=", "0.5", ",", "attn_drop", "=", "0.5", ",", "leaky_relu_alpha", "=", "0.2", ",", "residual", "=", "False", ",", "position_vocab_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "PGAT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "gat_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "prop_position_embeddings", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "# input layer, no residual", "\n", "self", ".", "gat_layers", ".", "append", "(", "GATLayer", "(", "in_dim", "+", "pos_dim", ",", "hidden_dim", ",", "heads", "[", "0", "]", ",", "feat_drop", ",", "attn_drop", ",", "leaky_relu_alpha", ",", "False", ")", ")", "\n", "self", ".", "prop_position_embeddings", ".", "append", "(", "nn", ".", "Embedding", "(", "position_vocab_size", ",", "pos_dim", ")", ")", "\n", "# hidden layers, due to multi-head, the in_dim = hidden_dim * num_heads", "\n", "for", "l", "in", "range", "(", "1", ",", "num_layers", ")", ":", "\n", "            ", "self", ".", "gat_layers", ".", "append", "(", "GATLayer", "(", "hidden_dim", "*", "heads", "[", "l", "-", "1", "]", "+", "pos_dim", ",", "hidden_dim", ",", "heads", "[", "l", "]", ",", "feat_drop", ",", "attn_drop", ",", "leaky_relu_alpha", ",", "residual", ")", ")", "\n", "self", ".", "prop_position_embeddings", ".", "append", "(", "nn", ".", "Embedding", "(", "position_vocab_size", ",", "pos_dim", ")", ")", "\n", "# output layer", "\n", "", "self", ".", "gat_layers", ".", "append", "(", "GATLayer", "(", "hidden_dim", "*", "heads", "[", "-", "2", "]", "+", "pos_dim", ",", "out_dim", ",", "heads", "[", "-", "1", "]", ",", "feat_drop", ",", "attn_drop", ",", "leaky_relu_alpha", ",", "residual", ")", ")", "\n", "self", ".", "prop_position_embeddings", ".", "append", "(", "nn", ".", "Embedding", "(", "position_vocab_size", ",", "pos_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.PGAT.forward": [[215, 226], ["g.ndata.pop().to", "range", "model_zoo.PGAT.activation", "g.ndata.pop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "features", ")", ":", "\n", "        ", "h", "=", "features", "\n", "positions", "=", "g", ".", "ndata", ".", "pop", "(", "'pos'", ")", ".", "to", "(", "h", ".", "device", ")", "\n", "for", "l", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "p", "=", "self", ".", "prop_position_embeddings", "[", "l", "]", "(", "positions", ")", "\n", "h", "=", "self", ".", "gat_layers", "[", "l", "]", "(", "g", ",", "torch", ".", "cat", "(", "(", "h", ",", "p", ")", ",", "1", ")", ")", ".", "flatten", "(", "1", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "# output projection", "\n", "", "p", "=", "self", ".", "prop_position_embeddings", "[", "-", "1", "]", "(", "positions", ")", "\n", "h", "=", "self", ".", "gat_layers", "[", "-", "1", "]", "(", "g", ",", "torch", ".", "cat", "(", "(", "h", ",", "p", ")", ",", "1", ")", ")", ".", "mean", "(", "1", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.MeanReadout.__init__": [[233, 235], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MeanReadout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.MeanReadout.forward": [[236, 238], ["dgl.mean_nodes", "dgl.mean_nodes", "dgl.mean_nodes", "dgl.mean_nodes"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "pos", "=", "None", ")", ":", "\n", "        ", "return", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.WeightedMeanReadout.__init__": [[240, 244], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "position_vocab_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "WeightedMeanReadout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "position_weights", "=", "nn", ".", "Embedding", "(", "position_vocab_size", ",", "1", ")", "\n", "self", ".", "nonlinear", "=", "F", ".", "softplus", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.WeightedMeanReadout.forward": [[245, 248], ["model_zoo.WeightedMeanReadout.nonlinear", "dgl.mean_nodes", "dgl.mean_nodes", "dgl.mean_nodes", "dgl.mean_nodes", "model_zoo.WeightedMeanReadout.position_weights"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "pos", ")", ":", "\n", "        ", "g", ".", "ndata", "[", "'a'", "]", "=", "self", ".", "nonlinear", "(", "self", ".", "position_weights", "(", "pos", ")", ")", "\n", "return", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.ConcatReadout.__init__": [[250, 252], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ConcatReadout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.ConcatReadout.forward": [[253, 264], ["torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "dgl.mean_nodes", "dgl.mean_nodes", "dgl.mean_nodes", "dgl.mean_nodes", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "pos", ")", ":", "\n", "        ", "normalizer", "=", "torch", ".", "tensor", "(", "g", ".", "batch_num_nodes", ")", ".", "unsqueeze_", "(", "1", ")", ".", "float", "(", ")", ".", "to", "(", "pos", ".", "device", ")", "\n", "\n", "g", ".", "ndata", "[", "'a_gp'", "]", "=", "(", "pos", "==", "0", ")", ".", "float", "(", ")", "\n", "gp_embed", "=", "dgl", ".", "sum_nodes", "(", "g", ",", "'h'", ",", "'a_gp'", ")", "/", "normalizer", "\n", "g", ".", "ndata", "[", "'a_p'", "]", "=", "(", "pos", "==", "1", ")", ".", "float", "(", ")", "\n", "p_embed", "=", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ",", "'a_p'", ")", "\n", "g", ".", "ndata", "[", "'a_sib'", "]", "=", "(", "pos", "==", "2", ")", ".", "float", "(", ")", "\n", "sib_embed", "=", "dgl", ".", "sum_nodes", "(", "g", ",", "'h'", ",", "'a_sib'", ")", "/", "normalizer", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "gp_embed", ",", "p_embed", ",", "sib_embed", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.ConcatEdgeReadout.__init__": [[267, 269], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ConcatEdgeReadout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.ConcatEdgeReadout.forward": [[270, 291], ["torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "torch.tensor().unsqueeze_().float().to", "dgl.mean_nodes", "dgl.mean_nodes", "dgl.mean_nodes", "dgl.mean_nodes", "dgl.mean_nodes", "dgl.mean_nodes", "dgl.mean_nodes", "dgl.mean_nodes", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "dgl.sum_nodes", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_().float", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor().unsqueeze_", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "pos", ")", ":", "\n", "        ", "normalizer", "=", "torch", ".", "tensor", "(", "g", ".", "batch_num_nodes", ")", ".", "unsqueeze_", "(", "1", ")", ".", "float", "(", ")", ".", "to", "(", "pos", ".", "device", ")", "\n", "\n", "g", ".", "ndata", "[", "'a_pu'", "]", "=", "(", "pos", "==", "0", ")", ".", "float", "(", ")", "\n", "pu_embed", "=", "dgl", ".", "sum_nodes", "(", "g", ",", "'h'", ",", "'a_pu'", ")", "/", "normalizer", "\n", "g", ".", "ndata", "[", "'a_u'", "]", "=", "(", "pos", "==", "1", ")", ".", "float", "(", ")", "\n", "u_embed", "=", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ",", "'a_u'", ")", "\n", "g", ".", "ndata", "[", "'a_cu'", "]", "=", "(", "pos", "==", "2", ")", ".", "float", "(", ")", "\n", "cu_embed", "=", "dgl", ".", "sum_nodes", "(", "g", ",", "'h'", ",", "'a_cu'", ")", "/", "normalizer", "\n", "\n", "g", ".", "ndata", "[", "'a_pseudo'", "]", "=", "(", "pos", "==", "3", ")", ".", "float", "(", ")", "\n", "pseudo_embed", "=", "dgl", ".", "sum_nodes", "(", "g", ",", "'h'", ",", "'a_pseudo'", ")", "/", "normalizer", "\n", "\n", "g", ".", "ndata", "[", "'a_pv'", "]", "=", "(", "pos", "==", "4", ")", ".", "float", "(", ")", "\n", "pv_embed", "=", "dgl", ".", "sum_nodes", "(", "g", ",", "'h'", ",", "'a_pv'", ")", "/", "normalizer", "\n", "g", ".", "ndata", "[", "'a_v'", "]", "=", "(", "pos", "==", "5", ")", ".", "float", "(", ")", "\n", "v_embed", "=", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ",", "'a_v'", ")", "\n", "g", ".", "ndata", "[", "'a_cv'", "]", "=", "(", "pos", "==", "6", ")", ".", "float", "(", ")", "\n", "cv_embed", "=", "dgl", ".", "sum_nodes", "(", "g", ",", "'h'", ",", "'a_cv'", ")", "/", "normalizer", "\n", "\n", "return", "torch", ".", "cat", "(", "(", "pu_embed", ",", "u_embed", ",", "cu_embed", ",", "pseudo_embed", ",", "pv_embed", ",", "v_embed", ",", "cv_embed", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.SumReadout.__init__": [[293, 296], ["torch.Module.__init__", "dgl.nn.pytorch.glob.SumPooling", "dgl.nn.pytorch.glob.SumPooling"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SumReadout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sum_pooler", "=", "SumPooling", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.SumReadout.forward": [[297, 300], ["model_zoo.SumReadout.sum_pooler"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ")", ":", "\n", "        ", "feat", "=", "g", ".", "ndata", "[", "'h'", "]", "\n", "return", "self", ".", "sum_pooler", "(", "g", ",", "feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.MaxReadout.__init__": [[302, 305], ["torch.Module.__init__", "dgl.nn.pytorch.glob.MaxPooling", "dgl.nn.pytorch.glob.MaxPooling"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MaxReadout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_pooler", "=", "MaxPooling", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.MaxReadout.forward": [[306, 309], ["model_zoo.MaxReadout.max_pooler"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ")", ":", "\n", "        ", "feat", "=", "g", ".", "ndata", "[", "'h'", "]", "\n", "return", "self", ".", "max_pooler", "(", "g", ",", "feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.DST.__init__": [[316, 322], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "non_linear", "=", "F", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "DST", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ffn1", "=", "nn", ".", "Linear", "(", "l_dim", "*", "2", ",", "r_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "ffn2", "=", "nn", ".", "Linear", "(", "r_dim", ",", "r_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "u_R", "=", "nn", ".", "Linear", "(", "r_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f", "=", "non_linear", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.DST.forward": [[323, 332], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "model_zoo.DST.ffn1", "model_zoo.DST.ffn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e1", ",", "e2", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        e1: tensor of size (*, l_dim)\n        e2: tensor of size (*, r_dim)\n\n        return: tensor of size (*, 1)\n        \"\"\"", "\n", "e", "=", "torch", ".", "cat", "(", "(", "e1", ",", "e2", ")", ",", "-", "1", ")", "\n", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "self", ".", "ffn1", "(", "e", ")", "-", "self", ".", "ffn2", "(", "q", ")", ")", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "# return self.u_R(self.f(torch.abs(self.ffn1(e) - self.ffn2(q))))", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.SLP.__init__": [[336, 341], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "hidden_dim", ",", "non_linear", "=", "F", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "SLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "u_R", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f", "=", "non_linear", "\n", "self", ".", "ffn", "=", "nn", ".", "Linear", "(", "l_dim", "*", "2", "+", "r_dim", ",", "hidden_dim", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.SLP.forward": [[342, 350], ["model_zoo.SLP.u_R", "model_zoo.SLP.f", "model_zoo.SLP.ffn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e1", ",", "e2", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        e1: tensor of size (*, l_dim)\n        e2: tensor of size (*, r_dim)\n\n        return: tensor of size (*, 1)\n        \"\"\"", "\n", "return", "self", ".", "u_R", "(", "self", ".", "f", "(", "self", ".", "ffn", "(", "torch", ".", "cat", "(", "(", "e1", ",", "e2", ",", "q", ")", ",", "1", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.MLP.__init__": [[353, 363], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "hidden_dim", ",", "k", ",", "non_linear", "=", "F", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "ffn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "l_dim", "*", "2", "+", "r_dim", ",", "hidden_dim", ")", ",", "\n", "activation", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", ")", "\n", "self", ".", "u_R", "=", "nn", ".", "Linear", "(", "k", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f", "=", "non_linear", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.MLP.forward": [[364, 372], ["model_zoo.MLP.u_R", "model_zoo.MLP.f", "model_zoo.MLP.ffn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e1", ",", "e2", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        e1: tensor of size (*, l_dim)\n        e2: tensor of size (*, r_dim)\n\n        return: tensor of size (*, 1)\n        \"\"\"", "\n", "return", "self", ".", "u_R", "(", "self", ".", "f", "(", "self", ".", "ffn", "(", "torch", ".", "cat", "(", "(", "e1", ",", "e2", ",", "q", ")", ",", "1", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.RawMLP.__init__": [[375, 385], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "hidden_dim", ",", "k", ",", "non_linear", "=", "F", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "RawMLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "ffn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "l_dim", "+", "r_dim", ",", "hidden_dim", ")", ",", "\n", "activation", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", ")", "\n", "self", ".", "u_R", "=", "nn", ".", "Linear", "(", "k", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f", "=", "non_linear", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.RawMLP.forward": [[386, 394], ["model_zoo.RawMLP.u_R", "model_zoo.RawMLP.f", "model_zoo.RawMLP.ffn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        e1: tensor of size (*, l_dim)\n        e2: tensor of size (*, r_dim)\n\n        return: tensor of size (*, 1)\n        \"\"\"", "\n", "return", "self", ".", "u_R", "(", "self", ".", "f", "(", "self", ".", "ffn", "(", "torch", ".", "cat", "(", "(", "e", ",", "q", ")", ",", "1", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.BIM.__init__": [[397, 400], ["torch.Module.__init__", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ")", ":", "\n", "        ", "super", "(", "BIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W", "=", "nn", ".", "Bilinear", "(", "l_dim", "*", "2", ",", "r_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.BIM.forward": [[401, 410], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_zoo.BIM.W"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e1", ",", "e2", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        e1: tensor of size (*, l_dim)\n        e2: tensor of size (*, r_dim)\n\n        return: tensor of size (*, 1)\n        \"\"\"", "\n", "e", "=", "torch", ".", "cat", "(", "(", "e1", ",", "e2", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "W", "(", "e", ",", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.RawBIM.__init__": [[413, 416], ["torch.Module.__init__", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ")", ":", "\n", "        ", "super", "(", "RawBIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W", "=", "nn", ".", "Bilinear", "(", "l_dim", ",", "r_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.RawBIM.forward": [[417, 425], ["model_zoo.RawBIM.W"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        e1: tensor of size (*, l_dim)\n        e2: tensor of size (*, r_dim)\n\n        return: tensor of size (*, 1)\n        \"\"\"", "\n", "return", "self", ".", "W", "(", "e", ",", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.LBM.__init__": [[428, 431], ["torch.Module.__init__", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ")", ":", "\n", "        ", "super", "(", "LBM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W", "=", "nn", ".", "Bilinear", "(", "l_dim", "*", "2", ",", "r_dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.LBM.forward": [[432, 441], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "model_zoo.LBM.W"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e1", ",", "e2", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        e1: tensor of size (*, l_dim)\n        e2: tensor of size (*, r_dim)\n\n        return: tensor of size (*, 1)\n        \"\"\"", "\n", "e", "=", "torch", ".", "cat", "(", "(", "e1", ",", "e2", ")", ",", "-", "1", ")", "\n", "return", "torch", ".", "exp", "(", "self", ".", "W", "(", "e", ",", "q", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.Arborist.__init__": [[444, 448], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "k", "=", "5", ")", ":", "\n", "        ", "super", "(", "Arborist", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "u", "=", "nn", ".", "Linear", "(", "l_dim", "*", "2", ",", "k", ",", "bias", "=", "False", ")", "\n", "self", ".", "W", "=", "nn", ".", "Bilinear", "(", "l_dim", "*", "2", ",", "r_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.Arborist.forward": [[449, 460], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_zoo.Arborist.u", "model_zoo.Arborist.W", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e1", ",", "e2", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        e1: tensor of size (*, l_dim)\n        e2: tensor of size (*, r_dim)\n\n        return: tensor of size (*, 1)\n        \"\"\"", "\n", "e", "=", "torch", ".", "cat", "(", "(", "e1", ",", "e2", ")", ",", "-", "1", ")", "\n", "u", "=", "self", ".", "u", "(", "e", ")", "\n", "w", "=", "self", ".", "W", "(", "e", ",", "q", ")", "\n", "return", "torch", ".", "sum", "(", "u", "*", "w", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.RawArborist.__init__": [[463, 467], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "k", "=", "5", ")", ":", "\n", "        ", "super", "(", "RawArborist", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "u", "=", "nn", ".", "Linear", "(", "l_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", "self", ".", "W", "=", "nn", ".", "Bilinear", "(", "l_dim", ",", "r_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.RawArborist.forward": [[468, 472], ["model_zoo.RawArborist.u", "model_zoo.RawArborist.W", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e", ",", "q", ")", ":", "\n", "        ", "u", "=", "self", ".", "u", "(", "e", ")", "\n", "w", "=", "self", ".", "W", "(", "e", ",", "q", ")", "\n", "return", "torch", ".", "sum", "(", "u", "*", "w", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.NTN.__init__": [[475, 481], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "k", "=", "5", ",", "non_linear", "=", "F", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "NTN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "u_R", "=", "nn", ".", "Linear", "(", "k", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f", "=", "non_linear", "\n", "self", ".", "W", "=", "nn", ".", "Bilinear", "(", "l_dim", "*", "2", ",", "r_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", "self", ".", "V", "=", "nn", ".", "Linear", "(", "l_dim", "*", "2", "+", "r_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.NTN.forward": [[482, 491], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_zoo.NTN.u_R", "model_zoo.NTN.f", "model_zoo.NTN.W", "model_zoo.NTN.V", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e1", ",", "e2", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        e1: tensor of size (*, l_dim)\n        e2: tensor of size (*, r_dim)\n\n        return: tensor of size (*, 1)\n        \"\"\"", "\n", "e", "=", "torch", ".", "cat", "(", "(", "e1", ",", "e2", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "u_R", "(", "self", ".", "f", "(", "self", ".", "W", "(", "e", ",", "q", ")", "+", "self", ".", "V", "(", "torch", ".", "cat", "(", "(", "e", ",", "q", ")", ",", "1", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.RawNTN.__init__": [[494, 500], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "k", "=", "5", ",", "non_linear", "=", "torch", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "RawNTN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "u_R", "=", "nn", ".", "Linear", "(", "k", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f", "=", "non_linear", "\n", "self", ".", "W", "=", "nn", ".", "Bilinear", "(", "l_dim", ",", "r_dim", ",", "k", ",", "bias", "=", "True", ")", "\n", "self", ".", "V", "=", "nn", ".", "Linear", "(", "l_dim", "+", "r_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.RawNTN.forward": [[501, 509], ["model_zoo.RawNTN.u_R", "model_zoo.RawNTN.f", "model_zoo.RawNTN.W", "model_zoo.RawNTN.V", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        e1: tensor of size (*, l_dim)\n        e2: tensor of size (*, r_dim)\n\n        return: tensor of size (*, 1)\n        \"\"\"", "\n", "return", "self", ".", "u_R", "(", "self", ".", "f", "(", "self", ".", "W", "(", "e", ",", "q", ")", "+", "self", ".", "V", "(", "torch", ".", "cat", "(", "(", "e", ",", "q", ")", ",", "1", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.TriNTN.__init__": [[512, 517], ["torch.Module.__init__", "model_zoo.RawNTN", "model_zoo.RawNTN", "model_zoo.RawNTN"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "k", "=", "5", ",", "non_linear", "=", "F", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "TriNTN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "match_l", "=", "RawNTN", "(", "l_dim", ",", "r_dim", ",", "k", ",", "non_linear", ")", "\n", "self", ".", "match_r", "=", "RawNTN", "(", "l_dim", ",", "r_dim", ",", "k", ",", "non_linear", ")", "\n", "self", ".", "match", "=", "RawNTN", "(", "l_dim", "*", "2", ",", "r_dim", ",", "k", ",", "non_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.TriNTN.forward": [[518, 523], ["model_zoo.TriNTN.match_l", "model_zoo.TriNTN.match_r", "model_zoo.TriNTN.match", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e1", ",", "e2", ",", "q", ")", ":", "\n", "        ", "l_scores", "=", "self", ".", "match_l", "(", "e1", ",", "q", ")", "\n", "r_scores", "=", "self", ".", "match_r", "(", "e2", ",", "q", ")", "\n", "scores", "=", "self", ".", "match", "(", "torch", ".", "cat", "(", "(", "e1", ",", "e2", ")", ",", "-", "1", ")", ",", "q", ")", "+", "l_scores", "+", "r_scores", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.CNTN.__init__": [[526, 533], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "k", "=", "5", ",", "non_linear", "=", "F", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "CNTN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "u_R", "=", "nn", ".", "Linear", "(", "k", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f", "=", "non_linear", "\n", "self", ".", "W", "=", "nn", ".", "Bilinear", "(", "l_dim", "*", "2", ",", "r_dim", ",", "k", ",", "bias", "=", "True", ")", "\n", "self", ".", "V", "=", "nn", ".", "Linear", "(", "l_dim", "*", "2", "+", "r_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", "self", ".", "control", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "l_dim", "*", "2", "+", "r_dim", ",", "l_dim", "*", "2", ",", "bias", "=", "False", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.CNTN.forward": [[534, 549], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_zoo.CNTN.control", "model_zoo.CNTN.u_R", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_zoo.CNTN.f", "model_zoo.CNTN.W", "model_zoo.CNTN.V", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e1", ",", "e2", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        e1: tensor of size (*, l_dim)\n        e2: tensor of size (*, r_dim)\n\n        return: tensor of size (*, 1)\n        \"\"\"", "\n", "# ec1 = e1 * self.control_l(torch.cat((e1, q), -1))", "\n", "# ec2 = e2 * self.control_r(torch.cat((e2, q), -1))", "\n", "# ec = torch.cat((ec1, ec2), -1)", "\n", "\n", "e", "=", "torch", ".", "cat", "(", "(", "e1", ",", "e2", ")", ",", "-", "1", ")", "\n", "c", "=", "self", ".", "control", "(", "torch", ".", "cat", "(", "(", "e", ",", "q", ")", ",", "-", "1", ")", ")", "\n", "ec", "=", "e", "*", "c", "\n", "return", "self", ".", "u_R", "(", "self", ".", "f", "(", "self", ".", "W", "(", "ec", ",", "q", ")", "+", "self", ".", "V", "(", "torch", ".", "cat", "(", "(", "ec", ",", "q", ")", ",", "1", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.RawCNTN.__init__": [[552, 559], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "k", "=", "5", ",", "non_linear", "=", "torch", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "RawCNTN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "u_R", "=", "nn", ".", "Linear", "(", "k", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f", "=", "non_linear", "\n", "self", ".", "W", "=", "nn", ".", "Bilinear", "(", "l_dim", ",", "r_dim", ",", "k", ",", "bias", "=", "True", ")", "\n", "self", ".", "V", "=", "nn", ".", "Linear", "(", "l_dim", "+", "r_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", "self", ".", "control", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "l_dim", "+", "r_dim", ",", "l_dim", ",", "bias", "=", "False", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.RawCNTN.forward": [[560, 570], ["model_zoo.RawCNTN.control", "model_zoo.RawCNTN.u_R", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_zoo.RawCNTN.f", "model_zoo.RawCNTN.W", "model_zoo.RawCNTN.V", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e", ",", "q", ")", ":", "\n", "        ", "\"\"\"\n        e1: tensor of size (*, l_dim)\n        e2: tensor of size (*, r_dim)\n\n        return: tensor of size (*, 1)\n        \"\"\"", "\n", "c", "=", "self", ".", "control", "(", "torch", ".", "cat", "(", "(", "e", ",", "q", ")", ",", "-", "1", ")", ")", "\n", "ec", "=", "e", "*", "c", "\n", "return", "self", ".", "u_R", "(", "self", ".", "f", "(", "self", ".", "W", "(", "ec", ",", "q", ")", "+", "self", ".", "V", "(", "torch", ".", "cat", "(", "(", "ec", ",", "q", ")", ",", "1", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.TriCNTN.__init__": [[573, 578], ["torch.Module.__init__", "model_zoo.RawCNTN", "model_zoo.RawCNTN", "model_zoo.RawCNTN"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "k", "=", "5", ",", "non_linear", "=", "F", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "TriCNTN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "match_l", "=", "RawCNTN", "(", "l_dim", ",", "r_dim", ",", "k", ",", "non_linear", ")", "\n", "self", ".", "match_r", "=", "RawCNTN", "(", "l_dim", ",", "r_dim", ",", "k", ",", "non_linear", ")", "\n", "self", ".", "match", "=", "RawCNTN", "(", "l_dim", "*", "2", ",", "r_dim", ",", "k", ",", "non_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.TriCNTN.forward": [[579, 584], ["model_zoo.TriCNTN.match_l", "model_zoo.TriCNTN.match_r", "model_zoo.TriCNTN.match", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e1", ",", "e2", ",", "q", ")", ":", "\n", "        ", "l_scores", "=", "self", ".", "match_l", "(", "e1", ",", "q", ")", "\n", "r_scores", "=", "self", ".", "match_r", "(", "e2", ",", "q", ")", "\n", "scores", "=", "self", ".", "match", "(", "torch", ".", "cat", "(", "(", "e1", ",", "e2", ")", ",", "-", "1", ")", ",", "q", ")", "+", "l_scores", "+", "r_scores", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.TMN.__init__": [[587, 606], ["torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "k", "=", "5", ",", "non_linear", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", ")", ":", "\n", "# def __init__(self, l_dim, r_dim, k=5, non_linear=nn.Tanh()):", "\n", "        ", "super", "(", "TMN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "u", "=", "nn", ".", "Linear", "(", "k", "*", "3", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "u_l", "=", "nn", ".", "Linear", "(", "k", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "u_r", "=", "nn", ".", "Linear", "(", "k", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "u_e", "=", "nn", ".", "Linear", "(", "k", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f", "=", "non_linear", "# if GNN/LSTM encoders are used, tanh should not, because they are not compatible", "\n", "self", ".", "W_l", "=", "nn", ".", "Bilinear", "(", "l_dim", ",", "r_dim", ",", "k", ",", "bias", "=", "True", ")", "\n", "self", ".", "W_r", "=", "nn", ".", "Bilinear", "(", "l_dim", ",", "r_dim", ",", "k", ",", "bias", "=", "True", ")", "\n", "self", ".", "W", "=", "nn", ".", "Bilinear", "(", "l_dim", "*", "2", ",", "r_dim", ",", "k", ",", "bias", "=", "True", ")", "\n", "self", ".", "V_l", "=", "nn", ".", "Linear", "(", "l_dim", "+", "r_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", "self", ".", "V_r", "=", "nn", ".", "Linear", "(", "l_dim", "+", "r_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", "self", ".", "V", "=", "nn", ".", "Linear", "(", "l_dim", "*", "2", "+", "r_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "control", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "l_dim", "*", "2", "+", "r_dim", ",", "l_dim", "*", "2", ",", "bias", "=", "False", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "control_l", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "l_dim", "+", "r_dim", ",", "l_dim", ",", "bias", "=", "False", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "control_r", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "l_dim", "+", "r_dim", ",", "l_dim", ",", "bias", "=", "False", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.TMN.forward": [[607, 623], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_zoo.TMN.u_l", "model_zoo.TMN.u_r", "model_zoo.TMN.u_e", "model_zoo.TMN.u", "model_zoo.TMN.control_l", "model_zoo.TMN.control_r", "model_zoo.TMN.control", "model_zoo.TMN.W_l", "model_zoo.TMN.V_l", "model_zoo.TMN.W_r", "model_zoo.TMN.V_r", "model_zoo.TMN.W", "model_zoo.TMN.V", "model_zoo.TMN.f", "model_zoo.TMN.f", "model_zoo.TMN.f", "model_zoo.TMN.f", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "l.detach", "r.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e1", ",", "e2", ",", "q", ")", ":", "\n", "        ", "ec1", "=", "e1", "*", "self", ".", "control_l", "(", "torch", ".", "cat", "(", "(", "e1", ",", "q", ")", ",", "-", "1", ")", ")", "\n", "ec2", "=", "e2", "*", "self", ".", "control_r", "(", "torch", ".", "cat", "(", "(", "e2", ",", "q", ")", ",", "-", "1", ")", ")", "\n", "e", "=", "torch", ".", "cat", "(", "(", "e1", ",", "e2", ")", ",", "1", ")", "\n", "ec", "=", "e", "*", "self", ".", "control", "(", "torch", ".", "cat", "(", "(", "e", ",", "q", ")", ",", "-", "1", ")", ")", "\n", "l", "=", "self", ".", "W_l", "(", "ec1", ",", "q", ")", "+", "self", ".", "V_l", "(", "torch", ".", "cat", "(", "(", "ec1", ",", "q", ")", ",", "1", ")", ")", "\n", "r", "=", "self", ".", "W_r", "(", "ec2", ",", "q", ")", "+", "self", ".", "V_r", "(", "torch", ".", "cat", "(", "(", "ec2", ",", "q", ")", ",", "1", ")", ")", "\n", "e", "=", "self", ".", "W", "(", "ec", ",", "q", ")", "+", "self", ".", "V", "(", "torch", ".", "cat", "(", "(", "ec", ",", "q", ")", ",", "1", ")", ")", "\n", "l_scores", "=", "self", ".", "u_l", "(", "self", ".", "f", "(", "l", ")", ")", "\n", "r_scores", "=", "self", ".", "u_r", "(", "self", ".", "f", "(", "r", ")", ")", "\n", "e_scores", "=", "self", ".", "u_e", "(", "self", ".", "f", "(", "e", ")", ")", "\n", "scores", "=", "self", ".", "u", "(", "self", ".", "f", "(", "torch", ".", "cat", "(", "(", "e", ".", "detach", "(", ")", ",", "l", ".", "detach", "(", ")", ",", "r", ".", "detach", "(", ")", ")", ",", "-", "1", ")", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "scores", ",", "l_scores", ",", "r_scores", ",", "e_scores", "\n", "", "else", ":", "\n", "            ", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.AbstractMultiViewTMN.__init__": [[626, 646], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "k", "=", "5", ",", "non_linear", "=", "torch", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "AbstractMultiViewTMN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "u_l", "=", "nn", ".", "Linear", "(", "k", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "u_r", "=", "nn", ".", "Linear", "(", "k", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "u_t", "=", "nn", ".", "Linear", "(", "k", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "u_e", "=", "nn", ".", "Linear", "(", "k", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "f", "=", "non_linear", "\n", "self", ".", "W_l", "=", "nn", ".", "Bilinear", "(", "l_dim", ",", "r_dim", ",", "k", ",", "bias", "=", "True", ")", "\n", "self", ".", "W_r", "=", "nn", ".", "Bilinear", "(", "l_dim", ",", "r_dim", ",", "k", ",", "bias", "=", "True", ")", "\n", "self", ".", "W_t", "=", "nn", ".", "Bilinear", "(", "l_dim", ",", "l_dim", ",", "k", ",", "bias", "=", "True", ")", "\n", "self", ".", "W", "=", "nn", ".", "Bilinear", "(", "l_dim", "*", "2", ",", "r_dim", ",", "k", ",", "bias", "=", "True", ")", "\n", "self", ".", "V_l", "=", "nn", ".", "Linear", "(", "l_dim", "+", "r_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", "self", ".", "V_t", "=", "nn", ".", "Linear", "(", "l_dim", "+", "r_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", "self", ".", "V_r", "=", "nn", ".", "Linear", "(", "l_dim", "*", "2", ",", "k", ",", "bias", "=", "False", ")", "\n", "self", ".", "V", "=", "nn", ".", "Linear", "(", "l_dim", "*", "2", "+", "r_dim", ",", "k", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "control", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "l_dim", "*", "2", "+", "r_dim", ",", "l_dim", "*", "2", ",", "bias", "=", "False", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "control_l", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "l_dim", "+", "r_dim", ",", "l_dim", ",", "bias", "=", "False", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "control_r", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "l_dim", "+", "r_dim", ",", "l_dim", ",", "bias", "=", "False", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.AbstractMultiViewTMN.forward": [[647, 664], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_zoo.AbstractMultiViewTMN.u_l", "model_zoo.AbstractMultiViewTMN.u_r", "model_zoo.AbstractMultiViewTMN.u_t", "model_zoo.AbstractMultiViewTMN.u_e", "model_zoo.AbstractMultiViewTMN.control_l", "model_zoo.AbstractMultiViewTMN.control_r", "model_zoo.AbstractMultiViewTMN.control", "model_zoo.AbstractMultiViewTMN.W_l", "model_zoo.AbstractMultiViewTMN.V_l", "model_zoo.AbstractMultiViewTMN.W_r", "model_zoo.AbstractMultiViewTMN.V_r", "model_zoo.AbstractMultiViewTMN.W_t", "model_zoo.AbstractMultiViewTMN.V_t", "model_zoo.AbstractMultiViewTMN.W", "model_zoo.AbstractMultiViewTMN.V", "model_zoo.AbstractMultiViewTMN.f", "model_zoo.AbstractMultiViewTMN.f", "model_zoo.AbstractMultiViewTMN.f", "model_zoo.AbstractMultiViewTMN.f", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "l.detach", "r.detach", "t.detach", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e1", ",", "e2", ",", "q", ",", "partial", ")", ":", "\n", "        ", "ec1", "=", "e1", "*", "self", ".", "control_l", "(", "torch", ".", "cat", "(", "(", "e1", ",", "q", ")", ",", "-", "1", ")", ")", "\n", "ec2", "=", "e2", "*", "self", ".", "control_r", "(", "torch", ".", "cat", "(", "(", "e2", ",", "q", ")", ",", "-", "1", ")", ")", "\n", "e", "=", "torch", ".", "cat", "(", "(", "e1", ",", "e2", ")", ",", "1", ")", "\n", "ec", "=", "e", "*", "self", ".", "control", "(", "torch", ".", "cat", "(", "(", "e", ",", "q", ")", ",", "-", "1", ")", ")", "\n", "l", "=", "self", ".", "W_l", "(", "ec1", ",", "q", ")", "+", "self", ".", "V_l", "(", "torch", ".", "cat", "(", "(", "ec1", ",", "q", ")", ",", "1", ")", ")", "\n", "r", "=", "self", ".", "W_r", "(", "ec2", ",", "q", ")", "+", "self", ".", "V_r", "(", "torch", ".", "cat", "(", "(", "ec2", ",", "q", ")", ",", "1", ")", ")", "\n", "t", "=", "self", ".", "W_t", "(", "ec1", ",", "ec2", ")", "+", "self", ".", "V_t", "(", "torch", ".", "cat", "(", "(", "ec1", ",", "ec2", ")", ",", "1", ")", ")", "\n", "e", "=", "self", ".", "W", "(", "ec", ",", "q", ")", "+", "self", ".", "V", "(", "torch", ".", "cat", "(", "(", "ec", ",", "q", ")", ",", "1", ")", ")", "\n", "l_scores", "=", "self", ".", "u_l", "(", "self", ".", "f", "(", "l", ")", ")", "\n", "r_scores", "=", "self", ".", "u_r", "(", "self", ".", "f", "(", "r", ")", ")", "\n", "t_scores", "=", "self", ".", "u_t", "(", "self", ".", "f", "(", "t", ")", ")", "\n", "e_scores", "=", "self", ".", "u_e", "(", "self", ".", "f", "(", "e", ")", ")", "\n", "if", "partial", ":", "\n", "            ", "return", "(", "l_scores", ",", "r_scores", ",", "t_scores", ",", "e_scores", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "(", "l", ".", "detach", "(", ")", ",", "r", ".", "detach", "(", ")", ",", "t", ".", "detach", "(", ")", ",", "e", ".", "detach", "(", ")", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.PairViewTMN.__init__": [[667, 680], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model_zoo.AbstractMultiViewTMN", "model_zoo.AbstractMultiViewTMN", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "k", "=", "5", ",", "non_linear", "=", "torch", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "PairViewTMN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "f", "=", "non_linear", "\n", "self", ".", "u", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "k", "*", "4", "*", "2", ",", "k", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "k", "*", "4", ",", "1", ")", ",", "\n", ")", "\n", "# self.u = nn.Linear(k*4*2, 1, bias=False)", "\n", "\n", "self", ".", "singleview_match1", "=", "AbstractMultiViewTMN", "(", "l_dim", ",", "r_dim", ",", "k", ",", "non_linear", ")", "\n", "self", ".", "singleview_match2", "=", "AbstractMultiViewTMN", "(", "l_dim", ",", "r_dim", ",", "k", ",", "non_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.PairViewTMN.forward": [[681, 696], ["model_zoo.PairViewTMN.singleview_match1", "model_zoo.PairViewTMN.singleview_match2", "model_zoo.PairViewTMN.singleview_match1", "model_zoo.PairViewTMN.singleview_match2", "model_zoo.PairViewTMN.u", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_zoo.PairViewTMN.f", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e1", ",", "e2", ",", "q", ",", "partial", "=", "False", ")", ":", "\n", "        ", "e11", ",", "e12", "=", "e1", "\n", "e21", ",", "e22", "=", "e2", "\n", "if", "partial", "and", "self", ".", "training", ":", "\n", "            ", "(", "l_scores1", ",", "r_scores1", ",", "t_scores1", ",", "e_scores1", ")", "=", "self", ".", "singleview_match1", "(", "e11", ",", "e21", ",", "q", ",", "True", ")", "\n", "(", "l_scores2", ",", "r_scores2", ",", "t_scores2", ",", "e_scores2", ")", "=", "self", ".", "singleview_match2", "(", "e12", ",", "e22", ",", "q", ",", "True", ")", "\n", "return", "torch", ".", "cat", "(", "(", "l_scores1", ",", "l_scores2", ")", ",", "-", "1", ")", ",", "torch", ".", "cat", "(", "(", "r_scores1", ",", "r_scores2", ")", ",", "-", "1", ")", ",", "torch", ".", "cat", "(", "(", "t_scores1", ",", "t_scores2", ")", ",", "-", "1", ")", ",", "torch", ".", "cat", "(", "(", "e_scores1", ",", "e_scores2", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "f1", "=", "self", ".", "singleview_match1", "(", "e11", ",", "e21", ",", "q", ",", "False", ")", "\n", "f2", "=", "self", ".", "singleview_match2", "(", "e12", ",", "e22", ",", "q", ",", "False", ")", "\n", "scores", "=", "self", ".", "u", "(", "self", ".", "f", "(", "torch", ".", "cat", "(", "(", "f1", ",", "f2", ")", ",", "-", "1", ")", ")", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.MultiViewTMN.__init__": [[699, 713], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model_zoo.AbstractMultiViewTMN", "model_zoo.AbstractMultiViewTMN", "model_zoo.AbstractMultiViewTMN", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "l_dim", ",", "r_dim", ",", "k", "=", "5", ",", "non_linear", "=", "torch", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "MultiViewTMN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "f", "=", "non_linear", "\n", "# self.u = nn.Linear(k*4*3, 1, bias=False)", "\n", "self", ".", "u", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "k", "*", "4", "*", "3", ",", "k", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "k", "*", "4", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "singleview_match1", "=", "AbstractMultiViewTMN", "(", "l_dim", ",", "r_dim", ",", "k", ",", "non_linear", ")", "\n", "self", ".", "singleview_match2", "=", "AbstractMultiViewTMN", "(", "l_dim", ",", "r_dim", ",", "k", ",", "non_linear", ")", "\n", "self", ".", "singleview_match3", "=", "AbstractMultiViewTMN", "(", "l_dim", ",", "r_dim", ",", "k", ",", "non_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.MultiViewTMN.forward": [[714, 731], ["model_zoo.MultiViewTMN.singleview_match1", "model_zoo.MultiViewTMN.singleview_match2", "model_zoo.MultiViewTMN.singleview_match3", "model_zoo.MultiViewTMN.singleview_match1", "model_zoo.MultiViewTMN.singleview_match2", "model_zoo.MultiViewTMN.singleview_match3", "model_zoo.MultiViewTMN.u", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_zoo.MultiViewTMN.f", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "e1", ",", "e2", ",", "q", ",", "partial", "=", "False", ")", ":", "\n", "        ", "e11", ",", "e12", ",", "e13", "=", "e1", "\n", "e21", ",", "e22", ",", "e23", "=", "e2", "\n", "if", "partial", "and", "self", ".", "training", ":", "\n", "            ", "(", "l_scores1", ",", "r_scores1", ",", "t_scores1", ",", "e_scores1", ")", "=", "self", ".", "singleview_match1", "(", "e11", ",", "e21", ",", "q", ",", "True", ")", "\n", "(", "l_scores2", ",", "r_scores2", ",", "t_scores2", ",", "e_scores2", ")", "=", "self", ".", "singleview_match2", "(", "e12", ",", "e22", ",", "q", ",", "True", ")", "\n", "(", "l_scores3", ",", "r_scores3", ",", "t_scores3", ",", "e_scores3", ")", "=", "self", ".", "singleview_match3", "(", "e13", ",", "e23", ",", "q", ",", "True", ")", "\n", "return", "torch", ".", "cat", "(", "(", "l_scores1", ",", "l_scores2", ",", "l_scores3", ")", ",", "-", "1", ")", ",", "torch", ".", "cat", "(", "(", "r_scores1", ",", "r_scores2", ",", "r_scores3", ")", ",", "-", "1", ")", ",", "torch", ".", "cat", "(", "(", "t_scores1", ",", "t_scores2", ",", "t_scores3", ")", ",", "-", "1", ")", ",", "torch", ".", "cat", "(", "(", "e_scores1", ",", "e_scores2", ",", "e_scores3", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "f1", "=", "self", ".", "singleview_match1", "(", "e11", ",", "e21", ",", "q", ",", "False", ")", "\n", "f2", "=", "self", ".", "singleview_match2", "(", "e12", ",", "e22", ",", "q", ",", "False", ")", "\n", "f3", "=", "self", ".", "singleview_match3", "(", "e13", ",", "e23", ",", "q", ",", "False", ")", "\n", "scores", "=", "self", ".", "u", "(", "self", ".", "f", "(", "torch", ".", "cat", "(", "(", "f1", ",", "f2", ",", "f3", ")", ",", "-", "1", ")", ")", ")", "\n", "return", "scores", "", "", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model_zoo.BinarySelector": [[11, 13], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["def", "BinarySelector", "(", "x", ",", "a", "=", "1000", ")", ":", "\n", "    ", "return", "torch", ".", "sigmoid", "(", "a", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.DistMarginLoss.__init__": [[84, 87], ["torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "loss.DistMarginLoss.spdist.max"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "spdist", ")", ":", "\n", "        ", "self", ".", "spdist", "=", "torch", ".", "FloatTensor", "(", "spdist", ")", "# vocab_size x vocab_size", "\n", "self", ".", "spdist", "/=", "self", ".", "spdist", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.DistMarginLoss.loss": [[88, 114], ["target.cpu().numpy", "numpy.array", "numpy.array", "end_indices.append", "zip", "zip", "list", "list", "loss.DistMarginLoss.spdist[].to", "output.view.view.view", "loss.mean", "len", "pair_indices.extend", "target.cpu", "re.finditer", "re.finditer", "list", "m.start", "numpy.array.tostring", "target.cpu().numpy.tostring", "m.start", "numpy.array.tostring", "target.cpu().numpy.tostring", "itertools.product", "loss.DistMarginLoss.clamp", "range", "range", "output[].sigmoid().clamp", "output[].sigmoid().clamp", "output[].sigmoid", "output[].sigmoid"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "output", ",", "target", ",", "nodes", ")", ":", "\n", "        ", "label", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sep_01", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ",", "dtype", "=", "label", ".", "dtype", ")", "\n", "sep_10", "=", "np", ".", "array", "(", "[", "1", ",", "0", "]", ",", "dtype", "=", "label", ".", "dtype", ")", "\n", "\n", "# fast way to find subarray indices in a large array, c.f. https://stackoverflow.com/questions/14890216/return-the-indexes-of-a-sub-array-in-an-array", "\n", "sep10_indices", "=", "[", "(", "m", ".", "start", "(", ")", "//", "label", ".", "itemsize", ")", "+", "1", "for", "m", "in", "re", ".", "finditer", "(", "sep_10", ".", "tostring", "(", ")", ",", "label", ".", "tostring", "(", ")", ")", "]", "\n", "end_indices", "=", "[", "(", "m", ".", "start", "(", ")", "//", "label", ".", "itemsize", ")", "+", "1", "for", "m", "in", "re", ".", "finditer", "(", "sep_01", ".", "tostring", "(", ")", ",", "label", ".", "tostring", "(", ")", ")", "]", "\n", "end_indices", ".", "append", "(", "len", "(", "label", ")", ")", "\n", "start_indices", "=", "[", "0", "]", "+", "end_indices", "[", ":", "-", "1", "]", "\n", "\n", "pair_indices", "=", "[", "]", "\n", "for", "start", ",", "middle", ",", "end", "in", "zip", "(", "start_indices", ",", "sep10_indices", ",", "end_indices", ")", ":", "\n", "            ", "pair_indices", ".", "extend", "(", "list", "(", "product", "(", "range", "(", "start", ",", "middle", ")", ",", "range", "(", "middle", ",", "end", ")", ")", ")", ")", "\n", "", "positive_indices", ",", "negative_indices", "=", "zip", "(", "*", "pair_indices", ")", "\n", "positive_indices", "=", "list", "(", "positive_indices", ")", "\n", "negative_indices", "=", "list", "(", "negative_indices", ")", "\n", "positive_node_ids", "=", "[", "nodes", "[", "i", "]", "for", "i", "in", "positive_indices", "]", "\n", "negative_node_ids", "=", "[", "nodes", "[", "i", "]", "for", "i", "in", "negative_indices", "]", "\n", "margins", "=", "self", ".", "spdist", "[", "positive_node_ids", ",", "negative_node_ids", "]", ".", "to", "(", "target", ".", "device", ")", "\n", "output", "=", "output", ".", "view", "(", "-", "1", ")", "\n", "\n", "# y = -1 * torch.ones(output[positive_indices,:].shape[0]).to(target.device)", "\n", "# loss = F.margin_ranking_loss(output[positive_indices,:], output[negative_indices,:], y, margin=margin, reduction=\"sum\")", "\n", "loss", "=", "(", "-", "output", "[", "positive_indices", "]", ".", "sigmoid", "(", ")", ".", "clamp", "(", "min", "=", "EPS", ")", "+", "output", "[", "negative_indices", "]", ".", "sigmoid", "(", ")", ".", "clamp", "(", "min", "=", "EPS", ")", "+", "margins", ".", "clamp", "(", "min", "=", "EPS", ")", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.nll_loss": [[13, 15], ["torch.nll_loss"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.nll_loss"], ["def", "nll_loss", "(", "output", ",", "target", ")", ":", "\n", "    ", "return", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.square_exp_loss": [[17, 25], ["torch.exp().sum", "torch.exp().sum", "torch.exp().sum", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "square_exp_loss", "(", "output", ",", "target", ",", "beta", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    output: a (batch_size, 1) tensor, value should be positive\n    target: a (batch_size, ) tensor of dtype int\n    beta: a float weight of negative samples\n    \"\"\"", "\n", "loss", "=", "(", "output", "[", "target", "==", "1", "]", "**", "2", ")", ".", "sum", "(", ")", "+", "beta", "*", "torch", ".", "exp", "(", "-", "1.0", "*", "output", "[", "target", "==", "0", "]", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.bce_loss": [[27, 36], ["torch.binary_cross_entropy_with_logits", "output.squeeze", "target.float"], "function", ["None"], ["", "def", "bce_loss", "(", "output", ",", "target", ",", "reduction", "=", "\"mean\"", ")", ":", "\n", "    ", "\"\"\"\n    output: a (batch_size, 1) tensor\n    target: a (batch_size, ) tensor of dtype int\n    \n    Note: here we revert the `target` because `output` is the \"energy score\" and thus smaller value indicates it is more likely to be a true position \n    \"\"\"", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "output", ".", "squeeze", "(", ")", ",", "target", ".", "float", "(", ")", ",", "reduction", "=", "reduction", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.weighted_bce_loss": [[38, 41], ["torch.binary_cross_entropy_with_logits", "loss.sum", "weight.sum", "output.squeeze", "target.float"], "function", ["None"], ["", "def", "weighted_bce_loss", "(", "output", ",", "target", ",", "weight", ")", ":", "\n", "    ", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "output", ".", "squeeze", "(", ")", ",", "target", ".", "float", "(", ")", ",", "reduction", "=", "\"none\"", ")", "*", "weight", "\n", "return", "loss", ".", "sum", "(", ")", "/", "weight", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.cross_entropy_loss": [[43, 46], ["torch.cross_entropy", "target.long"], "function", ["None"], ["", "def", "cross_entropy_loss", "(", "output", ",", "target", ",", "beta", "=", "1.0", ")", ":", "\n", "    ", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ".", "long", "(", ")", ",", "reduction", "=", "\"mean\"", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.kl_div_loss": [[48, 51], ["torch.kl_div", "output.log_softmax"], "function", ["None"], ["", "def", "kl_div_loss", "(", "output", ",", "target", ")", ":", "\n", "    ", "loss", "=", "F", ".", "kl_div", "(", "output", ".", "log_softmax", "(", "1", ")", ",", "target", ",", "reduction", "=", "\"batchmean\"", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.margin_rank_loss": [[53, 73], ["target.cpu().numpy", "enumerate", "torch.margin_ranking_loss", "more_itertools.sliced", "enumerate", "len", "len", "pos_indices.extend", "neg_indices.extend", "torch.ones().to", "torch.ones().to", "torch.ones().to", "target.cpu", "pos.append", "neg.append", "torch.ones", "torch.ones", "torch.ones", "range"], "function", ["None"], ["", "def", "margin_rank_loss", "(", "output", ",", "target", ",", "sample_size", "=", "32", ",", "margin", "=", "1.0", ")", ":", "\n", "    ", "label", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pos_indices", "=", "[", "]", "\n", "neg_indices", "=", "[", "]", "\n", "for", "cnt", ",", "sublabel", "in", "enumerate", "(", "mit", ".", "sliced", "(", "label", ",", "sample_size", ")", ")", ":", "\n", "        ", "pos", ",", "neg", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "sublabel", ")", ":", "\n", "            ", "i", "+=", "cnt", "*", "sample_size", "\n", "if", "l", ":", "\n", "                ", "pos", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "neg", ".", "append", "(", "i", ")", "\n", "", "", "len_p", "=", "len", "(", "pos", ")", "\n", "len_n", "=", "len", "(", "neg", ")", "\n", "pos_indices", ".", "extend", "(", "[", "i", "for", "i", "in", "pos", "for", "_", "in", "range", "(", "len_n", ")", "]", ")", "\n", "neg_indices", ".", "extend", "(", "neg", "*", "len_p", ")", "\n", "\n", "", "y", "=", "-", "1", "*", "torch", ".", "ones", "(", "output", "[", "pos_indices", ",", ":", "]", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "target", ".", "device", ")", "\n", "loss", "=", "F", ".", "margin_ranking_loss", "(", "output", "[", "pos_indices", ",", ":", "]", ",", "output", "[", "neg_indices", ",", ":", "]", ",", "y", ",", "margin", "=", "margin", ",", "reduction", "=", "\"mean\"", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.info_nce_loss": [[75, 81], ["torch.cross_entropy"], "function", ["None"], ["", "def", "info_nce_loss", "(", "output", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    output: a (batch_size, 1+negative_size) tensor\n    target: a (batch_size, ) tensor of dtype long, all zeros\n    \"\"\"", "\n", "return", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "reduction", "=", "\"mean\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractPathModel.__init__": [[12, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AbstractPathModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractPathModel.init": [[15, 23], ["torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "**", "options", ")", ":", "\n", "        ", "self", ".", "hidden_size", "=", "options", "[", "'out_dim'", "]", "\n", "in_dim", "=", "options", "[", "'in_dim'", "]", "\n", "out_dim", "=", "options", "[", "'out_dim'", "]", "\n", "self", ".", "p_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "in_dim", ",", "hidden_size", "=", "self", ".", "hidden_size", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "c_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "in_dim", ",", "hidden_size", "=", "self", ".", "hidden_size", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "p_control", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ",", "bias", "=", "False", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "c_control", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ",", "bias", "=", "False", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractPathModel.init_hidden": [[24, 27], ["torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ",", "device", ")", ":", "\n", "        ", "hidden", "=", "(", "torch", ".", "randn", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "randn", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "to", "(", "device", ")", ")", "\n", "return", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractPathModel.encode_parent_path": [[28, 38], ["model.AbstractPathModel.size", "model.AbstractPathModel.init_hidden", "model.AbstractPathModel.embedding", "model.AbstractPathModel.p_control().view", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "model.AbstractPathModel.p_lstm", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "model.AbstractPathModel.p_control"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractPathModel.init_hidden"], ["", "def", "encode_parent_path", "(", "self", ",", "p", ",", "lens", ")", ":", "\n", "        ", "batch_size", ",", "seq_len", "=", "p", ".", "size", "(", ")", "\n", "hidden", "=", "self", ".", "init_hidden", "(", "batch_size", ",", "self", ".", "device", ")", "\n", "p", "=", "self", ".", "embedding", "(", "p", ")", "\n", "c", "=", "self", ".", "p_control", "(", "p", "[", ":", ",", "0", ",", ":", "]", ")", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", "\n", "X", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "p", ",", "lens", ",", "batch_first", "=", "True", ",", "enforce_sorted", "=", "False", ")", "\n", "X", ",", "hidden", "=", "self", ".", "p_lstm", "(", "X", ",", "hidden", ")", "\n", "X", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "X", ",", "batch_first", "=", "True", ")", "\n", "X", "=", "(", "c", "*", "X", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractPathModel.encode_child_path": [[39, 49], ["model.AbstractPathModel.size", "model.AbstractPathModel.init_hidden", "model.AbstractPathModel.embedding", "model.AbstractPathModel.c_control().view", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "model.AbstractPathModel.c_lstm", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "model.AbstractPathModel.c_control"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractPathModel.init_hidden"], ["", "def", "encode_child_path", "(", "self", ",", "p", ",", "lens", ")", ":", "\n", "        ", "batch_size", ",", "seq_len", "=", "p", ".", "size", "(", ")", "\n", "hidden", "=", "self", ".", "init_hidden", "(", "batch_size", ",", "self", ".", "device", ")", "\n", "p", "=", "self", ".", "embedding", "(", "p", ")", "\n", "c", "=", "self", ".", "c_control", "(", "p", "[", ":", ",", "0", ",", ":", "]", ")", ".", "view", "(", "batch_size", ",", "1", ",", "-", "1", ")", "\n", "X", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "p", ",", "lens", ",", "batch_first", "=", "True", ",", "enforce_sorted", "=", "False", ")", "\n", "X", ",", "hidden", "=", "self", ".", "c_lstm", "(", "X", ",", "hidden", ")", "\n", "X", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "X", ",", "batch_first", "=", "True", ")", "\n", "X", "=", "(", "c", "*", "X", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractPathModel.forward_path_encoders": [[50, 57], ["pu.to.to.to", "pv.to.to.to", "lens.to.to.to", "model.AbstractPathModel.encode_parent_path", "model.AbstractPathModel.encode_child_path"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractPathModel.encode_parent_path", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractPathModel.encode_child_path"], ["", "def", "forward_path_encoders", "(", "self", ",", "pu", ",", "pv", ",", "lens", ")", ":", "\n", "        ", "pu", "=", "pu", ".", "to", "(", "self", ".", "device", ")", "\n", "pv", "=", "pv", ".", "to", "(", "self", ".", "device", ")", "\n", "lens", "=", "lens", ".", "to", "(", "self", ".", "device", ")", "\n", "hpu", "=", "self", ".", "encode_parent_path", "(", "pu", ",", "lens", "[", ":", ",", "0", "]", ")", "\n", "hpv", "=", "self", ".", "encode_child_path", "(", "pv", ",", "lens", "[", ":", ",", "1", "]", ")", "\n", "return", "hpu", ",", "hpv", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractGraphModel.__init__": [[60, 62], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AbstractGraphModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractGraphModel.init": [[63, 114], ["model_zoo.GCN", "model_zoo.GCN", "model_zoo.MeanReadout", "model_zoo.MeanReadout", "model_zoo.PGCN", "model_zoo.PGCN", "model_zoo.WeightedMeanReadout", "model_zoo.WeightedMeanReadout", "model_zoo.GAT", "model_zoo.GAT", "model_zoo.PGAT", "model_zoo.PGAT"], "methods", ["None"], ["", "def", "init", "(", "self", ",", "**", "options", ")", ":", "\n", "        ", "propagation_method", "=", "options", "[", "'propagation_method'", "]", "\n", "readout_method", "=", "options", "[", "'readout_method'", "]", "\n", "options", "=", "options", "\n", "if", "propagation_method", "==", "\"GCN\"", ":", "\n", "            ", "self", ".", "parent_graph_propagate", "=", "GCN", "(", "\n", "options", "[", "\"in_dim\"", "]", ",", "options", "[", "\"hidden_dim\"", "]", ",", "options", "[", "\"out_dim\"", "]", ",", "num_layers", "=", "options", "[", "\"num_layers\"", "]", ",", "\n", "activation", "=", "F", ".", "leaky_relu", ",", "in_dropout", "=", "options", "[", "\"feat_drop\"", "]", ",", "hidden_dropout", "=", "options", "[", "\"hidden_drop\"", "]", ",", "\n", "output_dropout", "=", "options", "[", "\"out_drop\"", "]", ")", "\n", "self", ".", "child_graph_propagate", "=", "GCN", "(", "\n", "options", "[", "\"in_dim\"", "]", ",", "options", "[", "\"hidden_dim\"", "]", ",", "options", "[", "\"out_dim\"", "]", ",", "num_layers", "=", "options", "[", "\"num_layers\"", "]", ",", "\n", "activation", "=", "F", ".", "leaky_relu", ",", "in_dropout", "=", "options", "[", "\"feat_drop\"", "]", ",", "hidden_dropout", "=", "options", "[", "\"hidden_drop\"", "]", ",", "\n", "output_dropout", "=", "options", "[", "\"out_drop\"", "]", ")", "\n", "", "elif", "propagation_method", "==", "\"PGCN\"", ":", "\n", "            ", "self", ".", "parent_graph_propagate", "=", "PGCN", "(", "\n", "options", "[", "\"in_dim\"", "]", ",", "options", "[", "\"hidden_dim\"", "]", ",", "options", "[", "\"out_dim\"", "]", ",", "options", "[", "\"pos_dim\"", "]", ",", "\n", "num_layers", "=", "options", "[", "\"num_layers\"", "]", ",", "activation", "=", "F", ".", "leaky_relu", ",", "in_dropout", "=", "options", "[", "\"feat_drop\"", "]", ",", "\n", "hidden_dropout", "=", "options", "[", "\"hidden_drop\"", "]", ",", "output_dropout", "=", "options", "[", "\"out_drop\"", "]", ")", "\n", "self", ".", "child_graph_propagate", "=", "PGCN", "(", "\n", "options", "[", "\"in_dim\"", "]", ",", "options", "[", "\"hidden_dim\"", "]", ",", "options", "[", "\"out_dim\"", "]", ",", "options", "[", "\"pos_dim\"", "]", ",", "\n", "num_layers", "=", "options", "[", "\"num_layers\"", "]", ",", "activation", "=", "F", ".", "leaky_relu", ",", "in_dropout", "=", "options", "[", "\"feat_drop\"", "]", ",", "\n", "hidden_dropout", "=", "options", "[", "\"hidden_drop\"", "]", ",", "output_dropout", "=", "options", "[", "\"out_drop\"", "]", ")", "\n", "", "elif", "propagation_method", "==", "\"GAT\"", ":", "\n", "            ", "self", ".", "parent_graph_propagate", "=", "GAT", "(", "\n", "options", "[", "\"in_dim\"", "]", ",", "options", "[", "\"hidden_dim\"", "]", ",", "options", "[", "\"out_dim\"", "]", ",", "num_layers", "=", "options", "[", "\"num_layers\"", "]", ",", "\n", "heads", "=", "options", "[", "\"heads\"", "]", ",", "activation", "=", "F", ".", "leaky_relu", ",", "feat_drop", "=", "options", "[", "\"feat_drop\"", "]", ",", "\n", "attn_drop", "=", "options", "[", "\"attn_drop\"", "]", ")", "\n", "self", ".", "child_graph_propagate", "=", "GAT", "(", "\n", "options", "[", "\"in_dim\"", "]", ",", "options", "[", "\"hidden_dim\"", "]", ",", "options", "[", "\"out_dim\"", "]", ",", "num_layers", "=", "options", "[", "\"num_layers\"", "]", ",", "\n", "heads", "=", "options", "[", "\"heads\"", "]", ",", "activation", "=", "F", ".", "leaky_relu", ",", "feat_drop", "=", "options", "[", "\"feat_drop\"", "]", ",", "\n", "attn_drop", "=", "options", "[", "\"attn_drop\"", "]", ")", "\n", "", "elif", "propagation_method", "==", "\"PGAT\"", ":", "\n", "            ", "self", ".", "parent_graph_propagate", "=", "PGAT", "(", "\n", "options", "[", "\"in_dim\"", "]", ",", "options", "[", "\"hidden_dim\"", "]", ",", "options", "[", "\"out_dim\"", "]", ",", "options", "[", "\"pos_dim\"", "]", ",", "\n", "num_layers", "=", "options", "[", "\"num_layers\"", "]", ",", "heads", "=", "options", "[", "\"heads\"", "]", ",", "activation", "=", "F", ".", "leaky_relu", ",", "\n", "feat_drop", "=", "options", "[", "\"feat_drop\"", "]", ",", "attn_drop", "=", "options", "[", "\"attn_drop\"", "]", ")", "\n", "self", ".", "child_graph_propagate", "=", "PGAT", "(", "\n", "options", "[", "\"in_dim\"", "]", ",", "options", "[", "\"hidden_dim\"", "]", ",", "options", "[", "\"out_dim\"", "]", ",", "options", "[", "\"pos_dim\"", "]", ",", "\n", "num_layers", "=", "options", "[", "\"num_layers\"", "]", ",", "heads", "=", "options", "[", "\"heads\"", "]", ",", "activation", "=", "F", ".", "leaky_relu", ",", "\n", "feat_drop", "=", "options", "[", "\"feat_drop\"", "]", ",", "attn_drop", "=", "options", "[", "\"attn_drop\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "f\"Unacceptable Graph Propagation Method: {self.propagation_method}\"", "\n", "\n", "", "if", "readout_method", "==", "\"MR\"", ":", "\n", "            ", "self", ".", "p_readout", "=", "MeanReadout", "(", ")", "\n", "self", ".", "c_readout", "=", "MeanReadout", "(", ")", "\n", "", "elif", "readout_method", "==", "\"WMR\"", ":", "\n", "            ", "self", ".", "p_readout", "=", "WeightedMeanReadout", "(", ")", "\n", "self", ".", "c_readout", "=", "WeightedMeanReadout", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "f\"Unacceptable Readout Method: {self.readout_method}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractGraphModel.encode_parent_graph": [[115, 121], ["model.AbstractGraphModel.embedding", "g.ndata[].to", "model.AbstractGraphModel.parent_graph_propagate", "model.AbstractGraphModel.p_readout", "g.ndata[].to"], "methods", ["None"], ["", "", "def", "encode_parent_graph", "(", "self", ",", "g", ")", ":", "\n", "        ", "h", "=", "self", ".", "embedding", "(", "g", ".", "ndata", "[", "'_id'", "]", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "pos", "=", "g", ".", "ndata", "[", "'pos'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "g", ".", "ndata", "[", "'h'", "]", "=", "self", ".", "parent_graph_propagate", "(", "g", ",", "h", ")", "\n", "h", "=", "self", ".", "p_readout", "(", "g", ",", "pos", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractGraphModel.encode_child_graph": [[122, 128], ["model.AbstractGraphModel.embedding", "g.ndata[].to", "model.AbstractGraphModel.child_graph_propagate", "model.AbstractGraphModel.c_readout", "g.ndata[].to"], "methods", ["None"], ["", "def", "encode_child_graph", "(", "self", ",", "g", ")", ":", "\n", "        ", "h", "=", "self", ".", "embedding", "(", "g", ".", "ndata", "[", "'_id'", "]", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "pos", "=", "g", ".", "ndata", "[", "'pos'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "g", ".", "ndata", "[", "'h'", "]", "=", "self", ".", "child_graph_propagate", "(", "g", ",", "h", ")", "\n", "h", "=", "self", ".", "c_readout", "(", "g", ",", "pos", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractGraphModel.forward_graph_encoders": [[129, 133], ["model.AbstractGraphModel.encode_parent_graph", "model.AbstractGraphModel.encode_child_graph"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractGraphModel.encode_parent_graph", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractGraphModel.encode_child_graph"], ["", "def", "forward_graph_encoders", "(", "self", ",", "gu", ",", "gv", ")", ":", "\n", "        ", "hgu", "=", "self", ".", "encode_parent_graph", "(", "gu", ")", "\n", "hgv", "=", "self", ".", "encode_child_graph", "(", "gv", ")", "\n", "return", "hgu", ",", "hgv", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.MatchModel.__init__": [[136, 173], ["base.BaseModel.__init__", "model.AbstractGraphModel.init", "model.AbstractPathModel.init", "model_zoo.MLP", "model_zoo.SLP", "model_zoo.DST", "model_zoo.LBM", "model_zoo.BIM", "model_zoo.Arborist", "model_zoo.NTN", "model_zoo.CNTN", "model_zoo.TMN"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractGraphModel.init", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractGraphModel.init"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "**", "options", ")", ":", "\n", "        ", "super", "(", "MatchModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "options", "=", "options", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "l_dim", "=", "0", "\n", "if", "'r'", "in", "self", ".", "mode", ":", "\n", "            ", "l_dim", "+=", "options", "[", "\"in_dim\"", "]", "\n", "", "if", "'g'", "in", "self", ".", "mode", ":", "\n", "            ", "l_dim", "+=", "options", "[", "\"out_dim\"", "]", "\n", "AbstractGraphModel", ".", "init", "(", "self", ",", "**", "options", ")", "\n", "", "if", "'p'", "in", "self", ".", "mode", ":", "\n", "            ", "l_dim", "+=", "options", "[", "\"out_dim\"", "]", "\n", "AbstractPathModel", ".", "init", "(", "self", ",", "**", "options", ")", "\n", "", "self", ".", "l_dim", "=", "l_dim", "\n", "self", ".", "r_dim", "=", "options", "[", "\"in_dim\"", "]", "\n", "\n", "if", "options", "[", "'matching_method'", "]", "==", "\"MLP\"", ":", "\n", "            ", "self", ".", "match", "=", "MLP", "(", "self", ".", "l_dim", ",", "self", ".", "r_dim", ",", "100", ",", "options", "[", "\"k\"", "]", ")", "\n", "", "elif", "options", "[", "'matching_method'", "]", "==", "\"SLP\"", ":", "\n", "            ", "self", ".", "match", "=", "SLP", "(", "self", ".", "l_dim", ",", "self", ".", "r_dim", ",", "100", ")", "\n", "", "elif", "options", "[", "'matching_method'", "]", "==", "\"DST\"", ":", "\n", "            ", "self", ".", "match", "=", "DST", "(", "self", ".", "l_dim", ",", "self", ".", "r_dim", ")", "\n", "", "elif", "options", "[", "'matching_method'", "]", "==", "\"LBM\"", ":", "\n", "            ", "self", ".", "match", "=", "LBM", "(", "self", ".", "l_dim", ",", "self", ".", "r_dim", ")", "\n", "", "elif", "options", "[", "'matching_method'", "]", "==", "\"BIM\"", ":", "\n", "            ", "self", ".", "match", "=", "BIM", "(", "self", ".", "l_dim", ",", "self", ".", "r_dim", ")", "\n", "", "elif", "options", "[", "'matching_method'", "]", "==", "\"Arborist\"", ":", "\n", "            ", "self", ".", "match", "=", "Arborist", "(", "self", ".", "l_dim", ",", "self", ".", "r_dim", ",", "options", "[", "\"k\"", "]", ")", "\n", "", "elif", "options", "[", "'matching_method'", "]", "==", "\"NTN\"", ":", "\n", "            ", "self", ".", "match", "=", "NTN", "(", "self", ".", "l_dim", ",", "self", ".", "r_dim", ",", "options", "[", "\"k\"", "]", ")", "\n", "", "elif", "options", "[", "'matching_method'", "]", "==", "\"CNTN\"", ":", "\n", "            ", "self", ".", "match", "=", "CNTN", "(", "self", ".", "l_dim", ",", "self", ".", "r_dim", ",", "options", "[", "\"k\"", "]", ")", "\n", "", "elif", "options", "[", "'matching_method'", "]", "==", "\"TMN\"", ":", "\n", "            ", "self", ".", "match", "=", "TMN", "(", "self", ".", "l_dim", ",", "self", ".", "r_dim", ",", "options", "[", "\"k\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "f\"Unacceptable Matching Method: {options['matching_method']}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.MatchModel.forward_encoders": [[174, 194], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MatchModel.embedding", "model.MatchModel.embedding", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "dgl.batch", "dgl.batch", "dgl.batch", "dgl.batch", "dgl.batch", "dgl.batch", "dgl.batch", "dgl.batch", "model.MatchModel.forward_graph_encoders", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "model.MatchModel.forward_path_encoders", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "u.to", "v.to"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractGraphModel.forward_graph_encoders", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractPathModel.forward_path_encoders"], ["", "", "def", "forward_encoders", "(", "self", ",", "u", "=", "None", ",", "v", "=", "None", ",", "gu", "=", "None", ",", "gv", "=", "None", ",", "pu", "=", "None", ",", "pv", "=", "None", ",", "lens", "=", "None", ")", ":", "\n", "        ", "ur", ",", "vr", "=", "[", "]", ",", "[", "]", "\n", "if", "'r'", "in", "self", ".", "mode", ":", "\n", "            ", "hu", "=", "self", ".", "embedding", "(", "u", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "hv", "=", "self", ".", "embedding", "(", "v", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "ur", ".", "append", "(", "hu", ")", "\n", "vr", ".", "append", "(", "hv", ")", "\n", "", "if", "'g'", "in", "self", ".", "mode", ":", "\n", "            ", "gu", "=", "dgl", ".", "batch", "(", "gu", ")", "\n", "gv", "=", "dgl", ".", "batch", "(", "gv", ")", "\n", "hgu", ",", "hgv", "=", "self", ".", "forward_graph_encoders", "(", "gu", ",", "gv", ")", "\n", "ur", ".", "append", "(", "hgu", ")", "\n", "vr", ".", "append", "(", "hgv", ")", "\n", "", "if", "'p'", "in", "self", ".", "mode", ":", "\n", "            ", "hpu", ",", "hpv", "=", "self", ".", "forward_path_encoders", "(", "pu", ",", "pv", ",", "lens", ")", "\n", "ur", ".", "append", "(", "hpu", ")", "\n", "vr", ".", "append", "(", "hpv", ")", "\n", "", "ur", "=", "torch", ".", "cat", "(", "ur", ",", "-", "1", ")", "\n", "vr", "=", "torch", ".", "cat", "(", "vr", ",", "-", "1", ")", "\n", "return", "ur", ",", "vr", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.MatchModel.forward": [[195, 200], ["model.MatchModel.embedding", "model.MatchModel.forward_encoders", "model.MatchModel.match", "q.to"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.ExpanMatchModel.forward_encoders"], ["", "def", "forward", "(", "self", ",", "q", ",", "*", "inputs", ")", ":", "\n", "        ", "qf", "=", "self", ".", "embedding", "(", "q", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "ur", ",", "vr", "=", "self", ".", "forward_encoders", "(", "*", "inputs", ")", "\n", "scores", "=", "self", ".", "match", "(", "ur", ",", "vr", ",", "qf", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.ExpanMatchModel.__init__": [[203, 230], ["base.BaseModel.__init__", "model.AbstractGraphModel.init", "model.AbstractPathModel.init", "model_zoo.RawNTN", "model_zoo.RawBIM", "model_zoo.RawMLP", "model_zoo.RawArborist"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractGraphModel.init", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractGraphModel.init"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "**", "options", ")", ":", "\n", "        ", "super", "(", "ExpanMatchModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "options", "=", "options", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "l_dim", "=", "0", "\n", "if", "'r'", "in", "self", ".", "mode", ":", "\n", "            ", "l_dim", "+=", "options", "[", "\"in_dim\"", "]", "\n", "", "if", "'g'", "in", "self", ".", "mode", ":", "\n", "            ", "l_dim", "+=", "options", "[", "\"out_dim\"", "]", "\n", "AbstractGraphModel", ".", "init", "(", "self", ",", "**", "options", ")", "\n", "", "if", "'p'", "in", "self", ".", "mode", ":", "\n", "            ", "l_dim", "+=", "options", "[", "\"out_dim\"", "]", "\n", "AbstractPathModel", ".", "init", "(", "self", ",", "**", "options", ")", "\n", "", "self", ".", "l_dim", "=", "l_dim", "\n", "self", ".", "r_dim", "=", "options", "[", "\"in_dim\"", "]", "\n", "\n", "if", "options", "[", "'matching_method'", "]", "==", "\"NTN\"", ":", "\n", "            ", "self", ".", "match", "=", "RawNTN", "(", "self", ".", "l_dim", ",", "self", ".", "r_dim", ",", "options", "[", "\"k\"", "]", ")", "\n", "", "if", "options", "[", "'matching_method'", "]", "==", "\"BIM\"", ":", "\n", "            ", "self", ".", "match", "=", "RawBIM", "(", "self", ".", "l_dim", ",", "self", ".", "r_dim", ")", "\n", "", "if", "options", "[", "'matching_method'", "]", "==", "\"MLP\"", ":", "\n", "            ", "self", ".", "match", "=", "RawMLP", "(", "self", ".", "l_dim", ",", "self", ".", "r_dim", ",", "100", ",", "options", "[", "\"k\"", "]", ")", "\n", "", "elif", "options", "[", "'matching_method'", "]", "==", "\"ARB\"", ":", "\n", "            ", "self", ".", "match", "=", "RawArborist", "(", "self", ".", "l_dim", ",", "self", ".", "r_dim", ",", "options", "[", "\"k\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "f\"Unacceptable Matching Method: {options['matching_method']}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.ExpanMatchModel.forward_encoders": [[231, 247], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.ExpanMatchModel.embedding", "torch.cat.append", "torch.cat.append", "torch.cat.append", "dgl.batch", "dgl.batch", "dgl.batch", "dgl.batch", "model.ExpanMatchModel.encode_parent_graph", "torch.cat.append", "torch.cat.append", "torch.cat.append", "pu.to.to.to", "lens.to.to.to", "model.ExpanMatchModel.encode_parent_path", "torch.cat.append", "torch.cat.append", "torch.cat.append", "u.to"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractGraphModel.encode_parent_graph", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.AbstractPathModel.encode_parent_path"], ["", "", "def", "forward_encoders", "(", "self", ",", "u", "=", "None", ",", "gu", "=", "None", ",", "pu", "=", "None", ",", "lens", "=", "None", ")", ":", "\n", "        ", "ur", "=", "[", "]", "\n", "if", "'r'", "in", "self", ".", "mode", ":", "\n", "            ", "hu", "=", "self", ".", "embedding", "(", "u", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "ur", ".", "append", "(", "hu", ")", "\n", "", "if", "'g'", "in", "self", ".", "mode", ":", "\n", "            ", "gu", "=", "dgl", ".", "batch", "(", "gu", ")", "\n", "hgu", "=", "self", ".", "encode_parent_graph", "(", "gu", ")", "\n", "ur", ".", "append", "(", "hgu", ")", "\n", "", "if", "'p'", "in", "self", ".", "mode", ":", "\n", "            ", "pu", "=", "pu", ".", "to", "(", "self", ".", "device", ")", "\n", "lens", "=", "lens", ".", "to", "(", "self", ".", "device", ")", "\n", "hpu", "=", "self", ".", "encode_parent_path", "(", "pu", ",", "lens", ")", "\n", "ur", ".", "append", "(", "hpu", ")", "\n", "", "ur", "=", "torch", ".", "cat", "(", "ur", ",", "-", "1", ")", "\n", "return", "ur", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.ExpanMatchModel.forward": [[248, 253], ["model.ExpanMatchModel.embedding", "model.ExpanMatchModel.forward_encoders", "model.ExpanMatchModel.match", "q.to"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.ExpanMatchModel.forward_encoders"], ["", "def", "forward", "(", "self", ",", "q", ",", "us", ",", "graphs", ",", "paths", ",", "lens", ")", ":", "\n", "        ", "qf", "=", "self", ".", "embedding", "(", "q", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "ur", "=", "self", ".", "forward_encoders", "(", "us", ",", "graphs", ",", "paths", ",", "lens", ")", "\n", "scores", "=", "self", ".", "match", "(", "ur", ",", "qf", ")", "\n", "return", "scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.acc": [[7, 12], ["targets.cpu().numpy", "outputs.cpu().numpy().squeeze", "len", "targets.cpu", "outputs.cpu().numpy", "outputs.cpu"], "function", ["None"], ["def", "acc", "(", "outputs", ",", "targets", ")", ":", "\n", "    ", "prediction", "=", "outputs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ">", "0", "\n", "label", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "acc", "=", "(", "prediction", "==", "label", ")", ".", "sum", "(", ")", "/", "len", "(", "prediction", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.calculate_ranks_from_similarities": [[14, 28], ["list", "numpy.argsort", "numpy.argsort"], "function", ["None"], ["", "def", "calculate_ranks_from_similarities", "(", "all_similarities", ",", "positive_relations", ")", ":", "\n", "    ", "\"\"\"\n    all_similarities: a np array\n    positive_relations: a list of array indices\n\n    return a list\n    \"\"\"", "\n", "# positive_relation_similarities = all_similarities[positive_relations]", "\n", "# negative_relation_similarities = np.ma.array(all_similarities, mask=False)", "\n", "# negative_relation_similarities.mask[positive_relations] = True", "\n", "# ranks = list((negative_relation_similarities > positive_relation_similarities[:, np.newaxis]).sum(axis=1) + 1)", "\n", "# ranks = list((all_similarities > positive_relation_similarities[:, np.newaxis]).sum(axis=1) + 1)", "\n", "ranks", "=", "list", "(", "np", ".", "argsort", "(", "np", ".", "argsort", "(", "-", "all_similarities", ")", ")", "[", "positive_relations", "]", "+", "1", ")", "\n", "return", "ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.calculate_ranks_from_distance": [[29, 43], ["list", "numpy.argsort", "numpy.argsort"], "function", ["None"], ["", "def", "calculate_ranks_from_distance", "(", "all_distances", ",", "positive_relations", ")", ":", "\n", "    ", "\"\"\"\n    all_distances: a np array\n    positive_relations: a list of array indices\n\n    return a list\n    \"\"\"", "\n", "# positive_relation_distance = all_distances[positive_relations]", "\n", "# negative_relation_distance = np.ma.array(all_distances, mask=False)", "\n", "# negative_relation_distance.mask[positive_relations] = True", "\n", "# ranks = list((negative_relation_distance < positive_relation_distance[:, np.newaxis]).sum(axis=1) + 1)", "\n", "# ranks = list((all_distances < positive_relation_distance[:, np.newaxis]).sum(axis=1) + 1)", "\n", "ranks", "=", "list", "(", "np", ".", "argsort", "(", "np", ".", "argsort", "(", "all_distances", ")", ")", "[", "positive_relations", "]", "+", "1", ")", "\n", "return", "ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.obtain_ranks": [[44, 72], ["outputs.cpu().numpy().squeeze", "targets.cpu().numpy", "numpy.array", "end_indices.append", "zip", "list", "calculate_ranks", "all_ranks.append", "outputs.cpu().numpy", "targets.cpu", "re.finditer", "len", "m.start", "np.array.tostring", "targets.cpu().numpy.tostring", "numpy.where", "outputs.cpu"], "function", ["None"], ["", "def", "obtain_ranks", "(", "outputs", ",", "targets", ",", "mode", "=", "0", ")", ":", "\n", "    ", "\"\"\" \n    outputs : tensor of size (batch_size, 1), required_grad = False, model predictions\n    targets : tensor of size (batch_size, ), required_grad = False, labels\n        Assume to be of format [1, 0, ..., 0, 1, 0, ..., 0, ..., 0]\n    mode == 0: rank from distance (smaller is preferred)\n    mode == 1: rank from similarity (larger is preferred)\n    \"\"\"", "\n", "if", "mode", "==", "0", ":", "\n", "        ", "calculate_ranks", "=", "calculate_ranks_from_distance", "\n", "", "else", ":", "\n", "        ", "calculate_ranks", "=", "calculate_ranks_from_similarities", "\n", "", "all_ranks", "=", "[", "]", "\n", "prediction", "=", "outputs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "label", "=", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "sep", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ",", "dtype", "=", "label", ".", "dtype", ")", "\n", "\n", "# fast way to find subarray indices in a large array, c.f. https://stackoverflow.com/questions/14890216/return-the-indexes-of-a-sub-array-in-an-array", "\n", "end_indices", "=", "[", "(", "m", ".", "start", "(", ")", "//", "label", ".", "itemsize", ")", "+", "1", "for", "m", "in", "re", ".", "finditer", "(", "sep", ".", "tostring", "(", ")", ",", "label", ".", "tostring", "(", ")", ")", "]", "\n", "end_indices", ".", "append", "(", "len", "(", "label", ")", "+", "1", ")", "\n", "start_indices", "=", "[", "0", "]", "+", "end_indices", "[", ":", "-", "1", "]", "\n", "for", "start_idx", ",", "end_idx", "in", "zip", "(", "start_indices", ",", "end_indices", ")", ":", "\n", "        ", "distances", "=", "prediction", "[", "start_idx", ":", "end_idx", "]", "\n", "labels", "=", "label", "[", "start_idx", ":", "end_idx", "]", "\n", "positive_relations", "=", "list", "(", "np", ".", "where", "(", "labels", "==", "1", ")", "[", "0", "]", ")", "\n", "ranks", "=", "calculate_ranks", "(", "distances", ",", "positive_relations", ")", "\n", "all_ranks", ".", "append", "(", "ranks", ")", "\n", "", "return", "all_ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.macro_mr": [[73, 76], ["numpy.array().mean", "numpy.array", "numpy.array().mean", "numpy.array"], "function", ["None"], ["", "def", "macro_mr", "(", "all_ranks", ")", ":", "\n", "    ", "macro_mr", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "all_rank", ")", ".", "mean", "(", ")", "for", "all_rank", "in", "all_ranks", "]", ")", ".", "mean", "(", ")", "\n", "return", "macro_mr", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.micro_mr": [[77, 80], ["numpy.array().mean", "numpy.array", "list", "itertools.chain"], "function", ["None"], ["", "def", "micro_mr", "(", "all_ranks", ")", ":", "\n", "    ", "micro_mr", "=", "np", ".", "array", "(", "list", "(", "itertools", ".", "chain", "(", "*", "all_ranks", ")", ")", ")", ".", "mean", "(", ")", "\n", "return", "micro_mr", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.hit_at_1": [[81, 85], ["numpy.array", "numpy.sum", "list", "len", "itertools.chain"], "function", ["None"], ["", "def", "hit_at_1", "(", "all_ranks", ")", ":", "\n", "    ", "rank_positions", "=", "np", ".", "array", "(", "list", "(", "itertools", ".", "chain", "(", "*", "all_ranks", ")", ")", ")", "\n", "hits", "=", "np", ".", "sum", "(", "rank_positions", "<=", "1", ")", "\n", "return", "1.0", "*", "hits", "/", "len", "(", "rank_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.hit_at_3": [[86, 90], ["numpy.array", "numpy.sum", "list", "len", "itertools.chain"], "function", ["None"], ["", "def", "hit_at_3", "(", "all_ranks", ")", ":", "\n", "    ", "rank_positions", "=", "np", ".", "array", "(", "list", "(", "itertools", ".", "chain", "(", "*", "all_ranks", ")", ")", ")", "\n", "hits", "=", "np", ".", "sum", "(", "rank_positions", "<=", "3", ")", "\n", "return", "1.0", "*", "hits", "/", "len", "(", "rank_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.hit_at_5": [[91, 95], ["numpy.array", "numpy.sum", "list", "len", "itertools.chain"], "function", ["None"], ["", "def", "hit_at_5", "(", "all_ranks", ")", ":", "\n", "    ", "rank_positions", "=", "np", ".", "array", "(", "list", "(", "itertools", ".", "chain", "(", "*", "all_ranks", ")", ")", ")", "\n", "hits", "=", "np", ".", "sum", "(", "rank_positions", "<=", "5", ")", "\n", "return", "1.0", "*", "hits", "/", "len", "(", "rank_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.hit_at_10": [[96, 100], ["numpy.array", "numpy.sum", "list", "len", "itertools.chain"], "function", ["None"], ["", "def", "hit_at_10", "(", "all_ranks", ")", ":", "\n", "    ", "rank_positions", "=", "np", ".", "array", "(", "list", "(", "itertools", ".", "chain", "(", "*", "all_ranks", ")", ")", ")", "\n", "hits", "=", "np", ".", "sum", "(", "rank_positions", "<=", "10", ")", "\n", "return", "1.0", "*", "hits", "/", "len", "(", "rank_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.precision_at_1": [[101, 105], ["numpy.array", "numpy.sum", "list", "len", "itertools.chain"], "function", ["None"], ["", "def", "precision_at_1", "(", "all_ranks", ")", ":", "\n", "    ", "rank_positions", "=", "np", ".", "array", "(", "list", "(", "itertools", ".", "chain", "(", "*", "all_ranks", ")", ")", ")", "\n", "hits", "=", "np", ".", "sum", "(", "rank_positions", "<=", "1", ")", "\n", "return", "1.0", "*", "hits", "/", "len", "(", "all_ranks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.precision_at_3": [[106, 110], ["numpy.array", "numpy.sum", "list", "itertools.chain", "len"], "function", ["None"], ["", "def", "precision_at_3", "(", "all_ranks", ")", ":", "\n", "    ", "rank_positions", "=", "np", ".", "array", "(", "list", "(", "itertools", ".", "chain", "(", "*", "all_ranks", ")", ")", ")", "\n", "hits", "=", "np", ".", "sum", "(", "rank_positions", "<=", "3", ")", "\n", "return", "1.0", "*", "hits", "/", "(", "len", "(", "all_ranks", ")", "*", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.precision_at_5": [[111, 115], ["numpy.array", "numpy.sum", "list", "itertools.chain", "len"], "function", ["None"], ["", "def", "precision_at_5", "(", "all_ranks", ")", ":", "\n", "    ", "rank_positions", "=", "np", ".", "array", "(", "list", "(", "itertools", ".", "chain", "(", "*", "all_ranks", ")", ")", ")", "\n", "hits", "=", "np", ".", "sum", "(", "rank_positions", "<=", "5", ")", "\n", "return", "1.0", "*", "hits", "/", "(", "len", "(", "all_ranks", ")", "*", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.precision_at_10": [[116, 120], ["numpy.array", "numpy.sum", "list", "itertools.chain", "len"], "function", ["None"], ["", "def", "precision_at_10", "(", "all_ranks", ")", ":", "\n", "    ", "rank_positions", "=", "np", ".", "array", "(", "list", "(", "itertools", ".", "chain", "(", "*", "all_ranks", ")", ")", ")", "\n", "hits", "=", "np", ".", "sum", "(", "rank_positions", "<=", "10", ")", "\n", "return", "1.0", "*", "hits", "/", "(", "len", "(", "all_ranks", ")", "*", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.mrr_scaled_10": [[121, 127], ["numpy.array", "numpy.ceil", "list", "itertools.chain"], "function", ["None"], ["", "def", "mrr_scaled_10", "(", "all_ranks", ")", ":", "\n", "    ", "\"\"\" Scaled MRR score, check eq. (2) in the PinSAGE paper: https://arxiv.org/pdf/1806.01973.pdf\n    \"\"\"", "\n", "rank_positions", "=", "np", ".", "array", "(", "list", "(", "itertools", ".", "chain", "(", "*", "all_ranks", ")", ")", ")", "\n", "scaled_rank_positions", "=", "np", ".", "ceil", "(", "rank_positions", "/", "10", ")", "\n", "return", "(", "1.0", "/", "scaled_rank_positions", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.combined_metrics": [[128, 134], ["max", "metric.macro_mr", "max", "metric.hit_at_1", "max", "metric.hit_at_3", "metric.mrr_scaled_10"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.macro_mr", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.hit_at_1", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.hit_at_3", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.metric.mrr_scaled_10"], ["", "def", "combined_metrics", "(", "all_ranks", ")", ":", "\n", "    ", "\"\"\" \n    combination of three metrics, used in early stop \n    \"\"\"", "\n", "score", "=", "macro_mr", "(", "all_ranks", ")", "*", "(", "1.0", "/", "max", "(", "mrr_scaled_10", "(", "all_ranks", ")", ",", "0.0001", ")", ")", "*", "(", "1.0", "/", "max", "(", "hit_at_3", "(", "all_ranks", ")", ",", "0.0001", ")", ")", "*", "(", "1.0", "/", "max", "(", "hit_at_1", "(", "all_ranks", ")", ",", "0.0001", ")", ")", "\n", "return", "score", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.data_loaders.UnifiedDataLoader.__init__": [[11, 53], ["dataset.MAGDataset", "torch.utils.data.DataLoader.__init__", "len", "dataset.GraphPathDataset", "dataset.GraphDataset", "dataset.PathDataset", "dataset.RawDataset"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "data_path", ",", "sampling_mode", "=", "1", ",", "batch_size", "=", "10", ",", "negative_size", "=", "20", ",", "max_pos_size", "=", "100", ",", "\n", "expand_factor", "=", "50", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "cache_refresh_time", "=", "64", ",", "normalize_embed", "=", "False", ",", "\n", "test_topk", "=", "-", "1", ",", "test", "=", "0", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "sampling_mode", "=", "sampling_mode", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "negative_size", "=", "negative_size", "\n", "self", ".", "max_pos_size", "=", "max_pos_size", "\n", "self", ".", "expand_factor", "=", "expand_factor", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "cache_refresh_time", "=", "cache_refresh_time", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "test_flag", "=", "'test'", "if", "test", "else", "'train'", "\n", "\n", "raw_graph_dataset", "=", "MAGDataset", "(", "name", "=", "\"\"", ",", "path", "=", "data_path", ",", "raw", "=", "False", ")", "\n", "if", "'g'", "in", "mode", "and", "'p'", "in", "mode", ":", "\n", "            ", "msk_graph_dataset", "=", "GraphPathDataset", "(", "raw_graph_dataset", ",", "mode", "=", "test_flag", ",", "sampling_mode", "=", "sampling_mode", ",", "\n", "negative_size", "=", "negative_size", ",", "max_pos_size", "=", "max_pos_size", ",", "\n", "expand_factor", "=", "expand_factor", ",", "cache_refresh_time", "=", "cache_refresh_time", ",", "\n", "normalize_embed", "=", "normalize_embed", ",", "test_topk", "=", "test_topk", ")", "\n", "", "elif", "'g'", "in", "mode", ":", "\n", "            ", "msk_graph_dataset", "=", "GraphDataset", "(", "raw_graph_dataset", ",", "mode", "=", "test_flag", ",", "sampling_mode", "=", "sampling_mode", ",", "\n", "negative_size", "=", "negative_size", ",", "\n", "max_pos_size", "=", "max_pos_size", ",", "expand_factor", "=", "expand_factor", ",", "\n", "cache_refresh_time", "=", "cache_refresh_time", ",", "normalize_embed", "=", "normalize_embed", ",", "\n", "test_topk", "=", "test_topk", ")", "\n", "", "elif", "'p'", "in", "mode", ":", "\n", "            ", "msk_graph_dataset", "=", "PathDataset", "(", "raw_graph_dataset", ",", "mode", "=", "test_flag", ",", "sampling_mode", "=", "sampling_mode", ",", "negative_size", "=", "negative_size", ",", "\n", "max_pos_size", "=", "max_pos_size", ",", "expand_factor", "=", "expand_factor", ",", "\n", "cache_refresh_time", "=", "cache_refresh_time", ",", "normalize_embed", "=", "normalize_embed", ",", "\n", "test_topk", "=", "test_topk", ")", "\n", "", "else", ":", "\n", "            ", "msk_graph_dataset", "=", "RawDataset", "(", "raw_graph_dataset", ",", "mode", "=", "test_flag", ",", "sampling_mode", "=", "sampling_mode", ",", "negative_size", "=", "negative_size", ",", "\n", "max_pos_size", "=", "max_pos_size", ",", "expand_factor", "=", "expand_factor", ",", "\n", "cache_refresh_time", "=", "cache_refresh_time", ",", "normalize_embed", "=", "normalize_embed", ",", "\n", "test_topk", "=", "test_topk", ")", "\n", "", "self", ".", "dataset", "=", "msk_graph_dataset", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "super", "(", "UnifiedDataLoader", ",", "self", ")", ".", "__init__", "(", "dataset", "=", "self", ".", "dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "self", ".", "shuffle", ",", "\n", "collate_fn", "=", "self", ".", "collate_fn", ",", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "self", ".", "n_samples", "=", "len", "(", "self", ".", "dataset", ")", "# total number of samples that will be emitted by this data loader", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.data_loaders.UnifiedDataLoader.collate_fn": [[54, 78], ["map", "torch.tensor", "zip", "torch.tensor.max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "map", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "map", "torch.tensor", "map", "itertools.chain", "zip", "torch.tensor.max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "len", "itertools.chain", "itertools.chain", "itertools.chain", "len", "len"], "methods", ["None"], ["", "def", "collate_fn", "(", "self", ",", "samples", ")", ":", "\n", "        ", "if", "'g'", "in", "self", ".", "mode", "and", "'p'", "in", "self", ".", "mode", ":", "\n", "            ", "us", ",", "vs", ",", "graphs_u", ",", "graphs_v", ",", "paths_u", ",", "paths_v", ",", "lens", ",", "queries", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "chain", "(", "*", "samples", ")", ")", ")", "\n", "lens", "=", "torch", ".", "tensor", "(", "lens", ")", "\n", "max_u", ",", "max_v", "=", "lens", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "paths_u", "=", "[", "p", "+", "[", "self", ".", "dataset", ".", "pseudo_leaf_node", "]", "*", "(", "max_u", "-", "len", "(", "p", ")", ")", "for", "p", "in", "paths_u", "]", "\n", "paths_v", "=", "[", "p", "+", "[", "self", ".", "dataset", ".", "pseudo_leaf_node", "]", "*", "(", "max_v", "-", "len", "(", "p", ")", ")", "for", "p", "in", "paths_v", "]", "\n", "return", "torch", ".", "tensor", "(", "queries", ")", ",", "torch", ".", "tensor", "(", "labels", ")", ",", "torch", ".", "tensor", "(", "us", ")", ",", "torch", ".", "tensor", "(", "vs", ")", ",", "graphs_u", ",", "graphs_v", ",", "torch", ".", "tensor", "(", "paths_u", ")", ",", "torch", ".", "tensor", "(", "paths_v", ")", ",", "lens", "\n", "", "elif", "'g'", "in", "self", ".", "mode", ":", "\n", "            ", "us", ",", "vs", ",", "graphs_u", ",", "graphs_v", ",", "queries", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "chain", "(", "*", "samples", ")", ")", ")", "\n", "return", "torch", ".", "tensor", "(", "queries", ")", ",", "torch", ".", "tensor", "(", "labels", ")", ",", "torch", ".", "tensor", "(", "us", ")", ",", "torch", ".", "tensor", "(", "vs", ")", ",", "graphs_u", ",", "graphs_v", ",", "None", ",", "None", ",", "None", "\n", "", "elif", "'p'", "in", "self", ".", "mode", ":", "\n", "            ", "us", ",", "vs", ",", "paths_u", ",", "paths_v", ",", "lens", ",", "queries", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "chain", "(", "*", "samples", ")", ")", ")", "\n", "lens", "=", "torch", ".", "tensor", "(", "lens", ")", "\n", "max_u", ",", "max_v", "=", "lens", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "paths_u", "=", "[", "p", "+", "[", "self", ".", "dataset", ".", "pseudo_leaf_node", "]", "*", "(", "max_u", "-", "len", "(", "p", ")", ")", "for", "p", "in", "paths_u", "]", "\n", "paths_v", "=", "[", "p", "+", "[", "self", ".", "dataset", ".", "pseudo_leaf_node", "]", "*", "(", "max_v", "-", "len", "(", "p", ")", ")", "for", "p", "in", "paths_v", "]", "\n", "return", "torch", ".", "tensor", "(", "queries", ")", ",", "torch", ".", "tensor", "(", "labels", ")", ",", "torch", ".", "tensor", "(", "us", ")", ",", "torch", ".", "tensor", "(", "vs", ")", ",", "None", ",", "None", ",", "torch", ".", "tensor", "(", "paths_u", ")", ",", "torch", ".", "tensor", "(", "paths_v", ")", ",", "lens", "\n", "", "else", ":", "\n", "            ", "us", ",", "vs", ",", "queries", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "chain", "(", "*", "samples", ")", ")", ")", "\n", "return", "torch", ".", "tensor", "(", "queries", ")", ",", "torch", ".", "tensor", "(", "labels", ")", ",", "torch", ".", "tensor", "(", "us", ")", ",", "torch", ".", "tensor", "(", "vs", ")", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.data_loaders.UnifiedDataLoader.__str__": [[79, 88], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"\\n\\t\"", ".", "join", "(", "[", "\n", "f\"UnifiedDataLoader mode: {self.mode}\"", ",", "\n", "f\"sampling_mode: {self.sampling_mode}\"", ",", "\n", "f\"batch_size: {self.batch_size}\"", ",", "\n", "f\"negative_size: {self.negative_size}\"", ",", "\n", "f\"expand_factor: {self.expand_factor}\"", ",", "\n", "f\"cache_refresh_time: {self.cache_refresh_time}\"", ",", "\n", "f\"normalize_embed: {self.normalize_embed}\"", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.data_loaders.TaxoExpanDataLoader.__init__": [[92, 117], ["dataset.MAGDataset", "dataset.ExpanDataset", "torch.utils.data.DataLoader.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "data_path", ",", "sampling_mode", "=", "1", ",", "batch_size", "=", "10", ",", "negative_size", "=", "20", ",", "max_pos_size", "=", "100", ",", "\n", "expand_factor", "=", "50", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "cache_refresh_time", "=", "64", ",", "normalize_embed", "=", "False", ",", "\n", "test_topk", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "sampling_mode", "=", "sampling_mode", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "negative_size", "=", "negative_size", "\n", "self", ".", "max_pos_size", "=", "max_pos_size", "\n", "self", ".", "expand_factor", "=", "expand_factor", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "cache_refresh_time", "=", "cache_refresh_time", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "\n", "raw_graph_dataset", "=", "MAGDataset", "(", "name", "=", "\"\"", ",", "path", "=", "data_path", ",", "raw", "=", "False", ")", "\n", "msk_graph_dataset", "=", "ExpanDataset", "(", "raw_graph_dataset", ",", "sampling_mode", "=", "sampling_mode", ",", "\n", "negative_size", "=", "negative_size", ",", "\n", "max_pos_size", "=", "max_pos_size", ",", "expand_factor", "=", "expand_factor", ",", "\n", "cache_refresh_time", "=", "cache_refresh_time", ",", "normalize_embed", "=", "normalize_embed", ",", "\n", "test_topk", "=", "test_topk", ")", "\n", "self", ".", "dataset", "=", "msk_graph_dataset", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "super", "(", "TaxoExpanDataLoader", ",", "self", ")", ".", "__init__", "(", "dataset", "=", "self", ".", "dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "self", ".", "shuffle", ",", "\n", "collate_fn", "=", "self", ".", "collate_fn", ",", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "self", ".", "n_samples", "=", "len", "(", "self", ".", "dataset", ")", "# total number of samples that will be emitted by this data loader", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.data_loaders.TaxoExpanDataLoader.collate_fn": [[118, 131], ["map", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.max", "itertools.chain", "len"], "methods", ["None"], ["", "def", "collate_fn", "(", "self", ",", "samples", ")", ":", "\n", "        ", "us", ",", "graphs_u", ",", "paths_u", ",", "lens", ",", "queries", ",", "labels", "=", "map", "(", "list", ",", "zip", "(", "*", "chain", "(", "*", "samples", ")", ")", ")", "\n", "if", "'g'", "not", "in", "self", ".", "mode", ":", "\n", "            ", "graphs_u", "=", "None", "\n", "", "if", "'r'", "in", "self", ".", "mode", ":", "\n", "            ", "lens", "=", "torch", ".", "tensor", "(", "lens", ")", "\n", "max_u", "=", "lens", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "paths_u", "=", "[", "p", "+", "[", "self", ".", "dataset", ".", "pseudo_leaf_node", "]", "*", "(", "max_u", "-", "len", "(", "p", ")", ")", "for", "p", "in", "paths_u", "]", "\n", "paths_u", "=", "torch", ".", "tensor", "(", "paths_u", ")", "\n", "", "else", ":", "\n", "            ", "lens", "=", "None", "\n", "paths_u", "=", "None", "\n", "", "return", "torch", ".", "tensor", "(", "queries", ")", ",", "torch", ".", "tensor", "(", "labels", ")", ",", "torch", ".", "tensor", "(", "us", ")", ",", "graphs_u", ",", "paths_u", ",", "lens", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.data_loaders.TaxoExpanDataLoader.__str__": [[132, 141], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"\\n\\t\"", ".", "join", "(", "[", "\n", "f\"TaxoExpanDataLoader mode: {self.mode}\"", ",", "\n", "f\"sampling_mode: {self.sampling_mode}\"", ",", "\n", "f\"batch_size: {self.batch_size}\"", ",", "\n", "f\"negative_size: {self.negative_size}\"", ",", "\n", "f\"expand_factor: {self.expand_factor}\"", ",", "\n", "f\"cache_refresh_time: {self.cache_refresh_time}\"", ",", "\n", "f\"normalize_embed: {self.normalize_embed}\"", ",", "\n", "]", ")", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.Taxon.__init__": [[95, 105], ["int", "int", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tx_id", ",", "rank", "=", "-", "1", ",", "norm_name", "=", "\"none\"", ",", "display_name", "=", "\"None\"", ",", "main_type", "=", "\"\"", ",", "level", "=", "\"-100\"", ",", "p_count", "=", "0", ",", "c_count", "=", "0", ",", "create_date", "=", "\"None\"", ")", ":", "\n", "        ", "self", ".", "tx_id", "=", "tx_id", "\n", "self", ".", "rank", "=", "int", "(", "rank", ")", "\n", "self", ".", "norm_name", "=", "norm_name", "\n", "self", ".", "display_name", "=", "display_name", "\n", "self", ".", "main_type", "=", "main_type", "\n", "self", ".", "level", "=", "int", "(", "level", ")", "\n", "self", ".", "p_count", "=", "int", "(", "p_count", ")", "\n", "self", ".", "c_count", "=", "int", "(", "c_count", ")", "\n", "self", ".", "create_date", "=", "create_date", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.Taxon.__str__": [[106, 108], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Taxon {} (name: {}, level: {})\"", ".", "format", "(", "self", ".", "tx_id", ",", "self", ".", "norm_name", ",", "self", ".", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.Taxon.__lt__": [[109, 114], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "another_taxon", ")", ":", "\n", "        ", "if", "self", ".", "level", "<", "another_taxon", ".", "level", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "rank", "<", "another_taxon", ".", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.MAGDataset.__init__": [[117, 148], ["dgl.DGLGraph", "dataset.MAGDataset._load_dataset_raw", "dataset.MAGDataset._load_dataset_pickled"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.MAGDataset._load_dataset_raw", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.MAGDataset._load_dataset_pickled"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "path", ",", "embed_suffix", "=", "\"\"", ",", "raw", "=", "True", ",", "existing_partition", "=", "False", ",", "partition_pattern", "=", "'leaf'", ",", "shortest_path", "=", "False", ")", ":", "\n", "        ", "\"\"\" Raw dataset class for MAG dataset\n\n        Parameters\n        ----------\n        name : str\n            taxonomy name\n        path : str\n            path to dataset, if raw=True, this is the directory path to dataset, if raw=False, this is the pickle path\n        embed_suffix : str\n            suffix of embedding file name, by default \"\"\n        raw : bool, optional\n            load raw dataset from txt (True) files or load pickled dataset (False), by default True\n        existing_partition : bool, optional\n            whether to use the existing the train/validation/test partitions or randomly sample new ones, by default False\n        \"\"\"", "\n", "self", ".", "name", "=", "name", "# taxonomy name", "\n", "self", ".", "embed_suffix", "=", "embed_suffix", "\n", "self", ".", "existing_partition", "=", "existing_partition", "\n", "self", ".", "partition_pattern", "=", "partition_pattern", "\n", "self", ".", "g_full", "=", "dgl", ".", "DGLGraph", "(", ")", "# full graph, including masked train/validation node indices", "\n", "self", ".", "vocab", "=", "[", "]", "# from node_id to human-readable concept string", "\n", "self", ".", "train_node_ids", "=", "[", "]", "# a list of train node_ids", "\n", "self", ".", "validation_node_ids", "=", "[", "]", "# a list of validation node_ids", "\n", "self", ".", "test_node_ids", "=", "[", "]", "# a list of test node_ids", "\n", "self", ".", "shortest_path", "=", "shortest_path", "\n", "\n", "if", "raw", ":", "\n", "            ", "self", ".", "_load_dataset_raw", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_load_dataset_pickled", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.MAGDataset._load_dataset_pickled": [[149, 161], ["open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.load"], ["", "", "def", "_load_dataset_pickled", "(", "self", ",", "pickle_path", ")", ":", "\n", "        ", "with", "open", "(", "pickle_path", ",", "\"rb\"", ")", "as", "fin", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "fin", ")", "\n", "\n", "", "self", ".", "name", "=", "data", "[", "\"name\"", "]", "\n", "self", ".", "g_full", "=", "data", "[", "\"g_full\"", "]", "\n", "self", ".", "vocab", "=", "data", "[", "\"vocab\"", "]", "\n", "self", ".", "train_node_ids", "=", "data", "[", "\"train_node_ids\"", "]", "\n", "self", ".", "validation_node_ids", "=", "data", "[", "\"validation_node_ids\"", "]", "\n", "self", ".", "test_node_ids", "=", "data", "[", "\"test_node_ids\"", "]", "\n", "if", "self", ".", "shortest_path", ":", "\n", "            ", "self", ".", "shortest_path", "=", "data", "[", "'shortest_path'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.MAGDataset._load_dataset_raw": [[162, 305], ["os.path.join", "os.path.join", "networkx.DiGraph", "print", "gensim.models.KeyedVectors.load_word2vec_format", "print", "networkx.DiGraph.edges", "numpy.zeros", "node_id2tx_id.items", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "dataset.MAGDataset.g_full.add_nodes", "dataset.MAGDataset.g_full.add_edges", "print", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "tqdm.tqdm.tqdm", "open", "tqdm.tqdm.tqdm", "print", "dataset.MAGDataset._load_node_list", "dataset.MAGDataset._load_node_list", "dataset.MAGDataset._load_node_list", "edges.append", "len", "print", "print", "dataset.MAGDataset._get_holdout_subgraph().to_undirected", "len", "dataset.parallel_all_pairs_shortest_path_length", "parallel_all_pairs_shortest_path_length.items", "int", "open", "pickle.dump", "line.strip.strip.strip", "line.strip.strip.strip", "enumerate", "tx_id2node_id.items", "str", "networkx.DiGraph.nodes", "random.seed", "random.seed", "random.seed", "random.seed", "random.shuffle", "random.shuffle", "random.shuffle", "random.shuffle", "min", "min", "numpy.ones", "dists.items", "spdists.max", "line.strip.strip.split", "dataset.Taxon", "networkx.DiGraph.add_node", "line.strip.strip.split", "networkx.DiGraph.add_edge", "networkx.DiGraph.nodes", "int", "int", "random.seed", "random.seed", "random.seed", "random.seed", "random.shuffle", "random.shuffle", "random.shuffle", "random.shuffle", "min", "min", "ValueError", "dataset.MAGDataset._get_holdout_subgraph", "int", "len", "len", "networkx.DiGraph.out_degree", "leaf_node_ids.append", "int", "int", "len", "len", "networkx.DiGraph.nodes", "networkx.DiGraph.nodes", "networkx.DiGraph.in_degree", "len", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.MAGDataset._load_node_list", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.MAGDataset._load_node_list", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.MAGDataset._load_node_list", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.parallel_all_pairs_shortest_path_length", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._get_holdout_subgraph"], ["", "", "def", "_load_dataset_raw", "(", "self", ",", "dir_path", ")", ":", "\n", "        ", "\"\"\" Load data from three seperated files, generate train/validation/test partitions, and save to binary pickled dataset.\n        Please refer to the README.md file for details.\n\n\n        Parameters\n        ----------\n        dir_path : str\n            The path to a directory containing three input files.\n        \"\"\"", "\n", "node_file_name", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "f\"{self.name}.terms\"", ")", "\n", "edge_file_name", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "f\"{self.name}.taxo\"", ")", "\n", "if", "self", ".", "embed_suffix", "==", "\"\"", ":", "\n", "            ", "embedding_file_name", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "f\"{self.name}.terms.embed\"", ")", "\n", "output_pickle_file_name", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "f\"{self.name}.pickle.bin\"", ")", "\n", "", "else", ":", "\n", "            ", "embedding_file_name", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "f\"{self.name}.terms.{self.embed_suffix}.embed\"", ")", "\n", "output_pickle_file_name", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "f\"{self.name}.{self.embed_suffix}.pickle.bin\"", ")", "\n", "", "if", "self", ".", "existing_partition", ":", "\n", "            ", "train_node_file_name", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "f\"{self.name}.terms.train\"", ")", "\n", "validation_node_file_name", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "f\"{self.name}.terms.validation\"", ")", "\n", "test_file_name", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "f\"{self.name}.terms.test\"", ")", "\n", "\n", "", "tx_id2taxon", "=", "{", "}", "\n", "taxonomy", "=", "nx", ".", "DiGraph", "(", ")", "\n", "\n", "# load nodes", "\n", "with", "open", "(", "node_file_name", ",", "\"r\"", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "tqdm", "(", "fin", ",", "desc", "=", "\"Loading terms\"", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "                    ", "segs", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "assert", "len", "(", "segs", ")", "==", "2", ",", "f\"Wrong number of segmentations {line}\"", "\n", "taxon", "=", "Taxon", "(", "tx_id", "=", "segs", "[", "0", "]", ",", "norm_name", "=", "segs", "[", "1", "]", ",", "display_name", "=", "segs", "[", "1", "]", ")", "\n", "tx_id2taxon", "[", "segs", "[", "0", "]", "]", "=", "taxon", "\n", "taxonomy", ".", "add_node", "(", "taxon", ")", "\n", "\n", "# load edges", "\n", "", "", "", "with", "open", "(", "edge_file_name", ",", "\"r\"", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "tqdm", "(", "fin", ",", "desc", "=", "\"Loading relations\"", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "                    ", "segs", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "assert", "len", "(", "segs", ")", "==", "2", ",", "f\"Wrong number of segmentations {line}\"", "\n", "parent_taxon", "=", "tx_id2taxon", "[", "segs", "[", "0", "]", "]", "\n", "child_taxon", "=", "tx_id2taxon", "[", "segs", "[", "1", "]", "]", "\n", "taxonomy", ".", "add_edge", "(", "parent_taxon", ",", "child_taxon", ")", "\n", "\n", "# load embedding features", "\n", "", "", "", "print", "(", "\"Loading embedding ...\"", ")", "\n", "embeddings", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "embedding_file_name", ")", "\n", "print", "(", "f\"Finish loading embedding of size {embeddings.vectors.shape}\"", ")", "\n", "\n", "# load train/validation/test partition files if needed", "\n", "if", "self", ".", "existing_partition", ":", "\n", "            ", "print", "(", "\"Loading existing train/validation/test partitions\"", ")", "\n", "raw_train_node_list", "=", "self", ".", "_load_node_list", "(", "train_node_file_name", ")", "\n", "raw_validation_node_list", "=", "self", ".", "_load_node_list", "(", "validation_node_file_name", ")", "\n", "raw_test_node_list", "=", "self", ".", "_load_node_list", "(", "test_file_name", ")", "\n", "\n", "# generate vocab, tx_id is the old taxon_id read from {self.name}.terms file, node_id is the new taxon_id from 0 to len(vocab)", "\n", "", "tx_id2node_id", "=", "{", "node", ".", "tx_id", ":", "idx", "for", "idx", ",", "node", "in", "enumerate", "(", "taxonomy", ".", "nodes", "(", ")", ")", "}", "\n", "node_id2tx_id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "tx_id2node_id", ".", "items", "(", ")", "}", "\n", "self", ".", "vocab", "=", "[", "tx_id2taxon", "[", "node_id2tx_id", "[", "node_id", "]", "]", ".", "norm_name", "+", "\"@@@\"", "+", "str", "(", "node_id", ")", "for", "node_id", "in", "node_id2tx_id", "]", "\n", "\n", "# generate dgl.DGLGraph()", "\n", "edges", "=", "[", "]", "\n", "for", "edge", "in", "taxonomy", ".", "edges", "(", ")", ":", "\n", "            ", "parent_node_id", "=", "tx_id2node_id", "[", "edge", "[", "0", "]", ".", "tx_id", "]", "\n", "child_node_id", "=", "tx_id2node_id", "[", "edge", "[", "1", "]", ".", "tx_id", "]", "\n", "edges", ".", "append", "(", "[", "parent_node_id", ",", "child_node_id", "]", ")", "\n", "\n", "", "node_features", "=", "np", ".", "zeros", "(", "embeddings", ".", "vectors", ".", "shape", ")", "\n", "for", "node_id", ",", "tx_id", "in", "node_id2tx_id", ".", "items", "(", ")", ":", "\n", "            ", "node_features", "[", "node_id", ",", ":", "]", "=", "embeddings", "[", "tx_id", "]", "\n", "", "node_features", "=", "torch", ".", "FloatTensor", "(", "node_features", ")", "\n", "\n", "self", ".", "g_full", ".", "add_nodes", "(", "len", "(", "node_id2tx_id", ")", ",", "{", "'x'", ":", "node_features", "}", ")", "\n", "self", ".", "g_full", ".", "add_edges", "(", "[", "e", "[", "0", "]", "for", "e", "in", "edges", "]", ",", "[", "e", "[", "1", "]", "for", "e", "in", "edges", "]", ")", "\n", "\n", "# generate validation/test node_indices using either existing partitions or randomly sampled partition", "\n", "if", "self", ".", "existing_partition", ":", "\n", "            ", "self", ".", "train_node_ids", "=", "[", "tx_id2node_id", "[", "tx_id", "]", "for", "tx_id", "in", "raw_train_node_list", "]", "\n", "self", ".", "validation_node_ids", "=", "[", "tx_id2node_id", "[", "tx_id", "]", "for", "tx_id", "in", "raw_validation_node_list", "]", "\n", "self", ".", "test_node_ids", "=", "[", "tx_id2node_id", "[", "tx_id", "]", "for", "tx_id", "in", "raw_test_node_list", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Partition graph ...\"", ")", "\n", "if", "self", ".", "partition_pattern", "==", "'leaf'", ":", "\n", "                ", "leaf_node_ids", "=", "[", "]", "\n", "for", "node", "in", "taxonomy", ".", "nodes", "(", ")", ":", "\n", "                    ", "if", "taxonomy", ".", "out_degree", "(", "node", ")", "==", "0", ":", "\n", "                        ", "leaf_node_ids", ".", "append", "(", "tx_id2node_id", "[", "node", ".", "tx_id", "]", ")", "\n", "\n", "", "", "random", ".", "seed", "(", "47", ")", "\n", "random", ".", "shuffle", "(", "leaf_node_ids", ")", "\n", "validation_size", "=", "min", "(", "int", "(", "len", "(", "leaf_node_ids", ")", "*", "0.1", ")", ",", "MAX_VALIDATION_SIZE", ")", "\n", "test_size", "=", "min", "(", "int", "(", "len", "(", "leaf_node_ids", ")", "*", "0.1", ")", ",", "MAX_TEST_SIZE", ")", "\n", "self", ".", "validation_node_ids", "=", "leaf_node_ids", "[", ":", "validation_size", "]", "\n", "self", ".", "test_node_ids", "=", "leaf_node_ids", "[", "validation_size", ":", "(", "validation_size", "+", "test_size", ")", "]", "\n", "self", ".", "train_node_ids", "=", "[", "node_id", "for", "node_id", "in", "node_id2tx_id", "if", "node_id", "not", "in", "self", ".", "validation_node_ids", "and", "node_id", "not", "in", "self", ".", "test_node_ids", "]", "\n", "", "elif", "self", ".", "partition_pattern", "==", "'internal'", ":", "\n", "                ", "root_node", "=", "[", "node", "for", "node", "in", "taxonomy", ".", "nodes", "(", ")", "if", "taxonomy", ".", "in_degree", "(", "node", ")", "==", "0", "]", "\n", "sampled_node_ids", "=", "[", "tx_id2node_id", "[", "node", ".", "tx_id", "]", "for", "node", "in", "taxonomy", ".", "nodes", "(", ")", "if", "node", "not", "in", "root_node", "]", "\n", "random", ".", "seed", "(", "47", ")", "\n", "random", ".", "shuffle", "(", "sampled_node_ids", ")", "\n", "\n", "validation_size", "=", "min", "(", "int", "(", "len", "(", "sampled_node_ids", ")", "*", "0.1", ")", ",", "MAX_VALIDATION_SIZE", ")", "\n", "test_size", "=", "min", "(", "int", "(", "len", "(", "sampled_node_ids", ")", "*", "0.1", ")", ",", "MAX_TEST_SIZE", ")", "\n", "self", ".", "validation_node_ids", "=", "sampled_node_ids", "[", ":", "validation_size", "]", "\n", "self", ".", "test_node_ids", "=", "sampled_node_ids", "[", "validation_size", ":", "(", "validation_size", "+", "test_size", ")", "]", "\n", "self", ".", "train_node_ids", "=", "[", "node_id", "for", "node_id", "in", "node_id2tx_id", "if", "node_id", "not", "in", "self", ".", "validation_node_ids", "and", "node_id", "not", "in", "self", ".", "test_node_ids", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown partition method!'", ")", "\n", "", "print", "(", "\"Finish partition graph ...\"", ")", "\n", "\n", "# Compute shortest path distances", "\n", "", "if", "self", ".", "shortest_path", ":", "\n", "            ", "dag", "=", "self", ".", "_get_holdout_subgraph", "(", "self", ".", "train_node_ids", ")", ".", "to_undirected", "(", ")", "\n", "numnodes", "=", "len", "(", "node_id2tx_id", ")", "\n", "spdists", "=", "-", "1", "*", "(", "np", ".", "ones", "(", "(", "numnodes", ",", "numnodes", ")", ",", "dtype", "=", "np", ".", "float", ")", ")", "\n", "res", "=", "parallel_all_pairs_shortest_path_length", "(", "dag", ",", "self", ".", "train_node_ids", ")", "\n", "for", "u", ",", "dists", "in", "res", ".", "items", "(", ")", ":", "\n", "                ", "for", "v", ",", "dist", "in", "dists", ".", "items", "(", ")", ":", "\n", "                    ", "spdists", "[", "u", "]", "[", "v", "]", "=", "int", "(", "dist", ")", "\n", "\n", "", "", "spdists", "[", "spdists", "==", "-", "1", "]", "=", "int", "(", "spdists", ".", "max", "(", ")", ")", "\n", "self", ".", "shortest_path", "=", "spdists", "\n", "\n", "# save to pickle for faster loading next time", "\n", "", "print", "(", "\"start saving pickle data\"", ")", "\n", "with", "open", "(", "output_pickle_file_name", ",", "'wb'", ")", "as", "fout", ":", "\n", "# Pickle the 'data' dictionary using the highest protocol available.", "\n", "            ", "data", "=", "{", "\n", "\"name\"", ":", "self", ".", "name", ",", "\n", "\"g_full\"", ":", "self", ".", "g_full", ",", "\n", "\"vocab\"", ":", "self", ".", "vocab", ",", "\n", "\"train_node_ids\"", ":", "self", ".", "train_node_ids", ",", "\n", "\"validation_node_ids\"", ":", "self", ".", "validation_node_ids", ",", "\n", "\"test_node_ids\"", ":", "self", ".", "test_node_ids", ",", "\n", "\"shortest_path\"", ":", "self", ".", "shortest_path", "\n", "}", "\n", "pickle", ".", "dump", "(", "data", ",", "fout", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "f\"Save pickled dataset to {output_pickle_file_name}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.MAGDataset._load_node_list": [[306, 314], ["open", "line.strip.strip.strip", "node_list.append"], "methods", ["None"], ["", "def", "_load_node_list", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "node_list", "=", "[", "]", "\n", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "                    ", "node_list", ".", "append", "(", "line", ")", "\n", "", "", "", "return", "node_list", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.MAGDataset._get_holdout_subgraph": [[315, 349], ["dataset.MAGDataset.g_full.to_networkx", "dataset.MAGDataset.subgraph().copy", "dataset.MAGDataset.subgraph().copy.nodes", "set", "set", "collections.deque", "collections.deque", "itertools.product", "set", "dataset.MAGDataset.subgraph", "dataset.MAGDataset.predecessors", "dataset.MAGDataset.successors", "collections.deque.popleft", "collections.deque.popleft", "dataset.MAGDataset.subgraph().copy.add_edge", "networkx.algorithms.descendants", "dataset.MAGDataset.subgraph().copy.out_degree", "set", "set", "set.intersection", "set.add", "list", "set.add", "list", "dataset.MAGDataset.subgraph().copy.successors", "itertools.chain.from_iterable", "dataset.MAGDataset.predecessors", "dataset.MAGDataset.successors", "dataset.MAGDataset.subgraph().copy.remove_edge"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.copy"], ["", "def", "_get_holdout_subgraph", "(", "self", ",", "node_ids", ")", ":", "\n", "        ", "full_graph", "=", "self", ".", "g_full", ".", "to_networkx", "(", ")", "\n", "node_to_remove", "=", "[", "n", "for", "n", "in", "full_graph", ".", "nodes", "if", "n", "not", "in", "node_ids", "]", "\n", "subgraph", "=", "full_graph", ".", "subgraph", "(", "node_ids", ")", ".", "copy", "(", ")", "\n", "for", "node", "in", "node_to_remove", ":", "\n", "            ", "parents", "=", "set", "(", ")", "\n", "children", "=", "set", "(", ")", "\n", "ps", "=", "deque", "(", "full_graph", ".", "predecessors", "(", "node", ")", ")", "\n", "cs", "=", "deque", "(", "full_graph", ".", "successors", "(", "node", ")", ")", "\n", "while", "ps", ":", "\n", "                ", "p", "=", "ps", ".", "popleft", "(", ")", "\n", "if", "p", "in", "subgraph", ":", "\n", "                    ", "parents", ".", "add", "(", "p", ")", "\n", "", "else", ":", "\n", "                    ", "ps", "+=", "list", "(", "full_graph", ".", "predecessors", "(", "p", ")", ")", "\n", "", "", "while", "cs", ":", "\n", "                ", "c", "=", "cs", ".", "popleft", "(", ")", "\n", "if", "c", "in", "subgraph", ":", "\n", "                    ", "children", ".", "add", "(", "c", ")", "\n", "", "else", ":", "\n", "                    ", "cs", "+=", "list", "(", "full_graph", ".", "successors", "(", "c", ")", ")", "\n", "", "", "for", "p", ",", "c", "in", "product", "(", "parents", ",", "children", ")", ":", "\n", "                ", "subgraph", ".", "add_edge", "(", "p", ",", "c", ")", "\n", "# remove jump edges", "\n", "", "", "node2descendants", "=", "{", "n", ":", "set", "(", "descendants", "(", "subgraph", ",", "n", ")", ")", "for", "n", "in", "subgraph", ".", "nodes", "}", "\n", "for", "node", "in", "subgraph", ".", "nodes", "(", ")", ":", "\n", "            ", "if", "subgraph", ".", "out_degree", "(", "node", ")", ">", "1", ":", "\n", "                ", "successors1", "=", "set", "(", "subgraph", ".", "successors", "(", "node", ")", ")", "\n", "successors2", "=", "set", "(", "chain", ".", "from_iterable", "(", "[", "node2descendants", "[", "n", "]", "for", "n", "in", "successors1", "]", ")", ")", "\n", "checkset", "=", "successors1", ".", "intersection", "(", "successors2", ")", "\n", "if", "checkset", ":", "\n", "                    ", "for", "s", "in", "checkset", ":", "\n", "                        ", "subgraph", ".", "remove_edge", "(", "node", ",", "s", ")", "\n", "", "", "", "", "return", "subgraph", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset.__init__": [[352, 448], ["time.time", "graph_dataset.g_full.to_networkx", "time.time", "print", "len", "len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train_node_ids.append", "dataset.RawDataset._get_holdout_subgraph", "len", "list", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "set", "dataset.RawDataset._get_holdout_subgraph", "dataset.RawDataset._find_insert_posistion", "dataset.RawDataset._get_holdout_subgraph", "dataset.RawDataset._find_insert_posistion", "list", "random.shuffle", "random.shuffle", "random.shuffle", "random.shuffle", "graph_dataset.g_full.to_networkx.nodes", "graph_dataset.g_full.to_networkx.add_edge", "dataset.RawDataset.core_subgraph.nodes", "dataset.RawDataset.core_subgraph.add_edge", "torch.normalize", "torch.normalize", "set", "set", "set", "set", "set().union", "set.union", "dataset.RawDataset._get_candidate_positions", "networkx.shortest_path_length", "len", "list", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "graph_dataset.g_full.to_networkx.in_degree", "dataset.RawDataset.core_subgraph.nodes", "dataset.RawDataset.node_features.size", "dataset.RawDataset.core_subgraph.predecessors", "dataset.RawDataset.core_subgraph.successors", "len", "set", "dataset.RawDataset.core_subgraph.nodes", "dataset.RawDataset.core_subgraph.add_edge", "torch.normalize", "torch.normalize", "dataset.RawDataset._get_candidate_positions", "dataset.RawDataset.core_subgraph.out_degree", "set", "dataset.RawDataset.core_subgraph.out_edges", "dataset.RawDataset.core_subgraph.successors", "dataset.RawDataset.core_subgraph.nodes", "dataset.RawDataset.node_features.size", "dataset.RawDataset.core_subgraph.in_edges", "dataset.RawDataset.core_subgraph.out_degree"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._get_holdout_subgraph", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._get_holdout_subgraph", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._find_insert_posistion", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._get_holdout_subgraph", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._find_insert_posistion", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._get_candidate_positions", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._get_candidate_positions", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size"], ["    ", "def", "__init__", "(", "self", ",", "graph_dataset", ",", "mode", "=", "\"train\"", ",", "sampling_mode", "=", "1", ",", "negative_size", "=", "32", ",", "max_pos_size", "=", "100", ",", "\n", "expand_factor", "=", "64", ",", "cache_refresh_time", "=", "128", ",", "normalize_embed", "=", "False", ",", "test_topk", "=", "-", "1", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "sampling_mode", "=", "sampling_mode", "\n", "self", ".", "negative_size", "=", "negative_size", "\n", "self", ".", "max_pos_size", "=", "max_pos_size", "\n", "self", ".", "expand_factor", "=", "expand_factor", "\n", "self", ".", "cache_refresh_time", "=", "cache_refresh_time", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "test_topk", "=", "test_topk", "\n", "\n", "self", ".", "node_features", "=", "graph_dataset", ".", "g_full", ".", "ndata", "[", "'x'", "]", "\n", "full_graph", "=", "graph_dataset", ".", "g_full", ".", "to_networkx", "(", ")", "\n", "train_node_ids", "=", "graph_dataset", ".", "train_node_ids", "\n", "roots", "=", "[", "node", "for", "node", "in", "full_graph", ".", "nodes", "(", ")", "if", "full_graph", ".", "in_degree", "(", "node", ")", "==", "0", "]", "\n", "if", "len", "(", "roots", ")", ">", "1", ":", "\n", "            ", "self", ".", "root", "=", "len", "(", "full_graph", ".", "nodes", ")", "\n", "for", "r", "in", "roots", ":", "\n", "                ", "full_graph", ".", "add_edge", "(", "self", ".", "root", ",", "r", ")", "\n", "", "root_vector", "=", "torch", ".", "mean", "(", "self", ".", "node_features", "[", "roots", "]", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "node_features", "=", "torch", ".", "cat", "(", "(", "self", ".", "node_features", ",", "root_vector", ")", ",", "0", ")", "\n", "self", ".", "vocab", "=", "graph_dataset", ".", "vocab", "+", "[", "'root'", ",", "'leaf'", "]", "\n", "train_node_ids", ".", "append", "(", "self", ".", "root", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "root", "=", "roots", "[", "0", "]", "\n", "self", ".", "vocab", "=", "graph_dataset", ".", "vocab", "+", "[", "'leaf'", "]", "\n", "", "self", ".", "full_graph", "=", "full_graph", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "# add pseudo leaf node to core graph", "\n", "            ", "self", ".", "core_subgraph", "=", "self", ".", "_get_holdout_subgraph", "(", "train_node_ids", ")", "\n", "self", ".", "pseudo_leaf_node", "=", "len", "(", "full_graph", ".", "nodes", ")", "\n", "for", "node", "in", "list", "(", "self", ".", "core_subgraph", ".", "nodes", "(", ")", ")", ":", "\n", "                ", "self", ".", "core_subgraph", ".", "add_edge", "(", "node", ",", "self", ".", "pseudo_leaf_node", ")", "\n", "", "self", ".", "leaf_nodes", "=", "[", "node", "for", "node", "in", "self", ".", "core_subgraph", ".", "nodes", "(", ")", "if", "self", ".", "core_subgraph", ".", "out_degree", "(", "node", ")", "==", "1", "]", "\n", "# for pseudo leaf node", "\n", "leaf_vector", "=", "torch", ".", "zeros", "(", "(", "1", ",", "self", ".", "node_features", ".", "size", "(", "1", ")", ")", ")", "# zero vector works best", "\n", "self", ".", "node_features", "=", "torch", ".", "cat", "(", "(", "self", ".", "node_features", ",", "leaf_vector", ")", ",", "0", ")", "\n", "if", "self", ".", "normalize_embed", ":", "\n", "                ", "self", ".", "node_features", "=", "F", ".", "normalize", "(", "self", ".", "node_features", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "# add interested node list and subgraph", "\n", "# remove supersource nodes (i.e., nodes without in-degree 0)", "\n", "", "interested_node_set", "=", "set", "(", "train_node_ids", ")", "-", "set", "(", "[", "self", ".", "root", "]", ")", "\n", "self", ".", "node_list", "=", "list", "(", "interested_node_set", ")", "\n", "\n", "# build node2pos, node2nbs, node2edge", "\n", "self", ".", "node2pos", ",", "self", ".", "node2edge", "=", "{", "}", ",", "{", "}", "\n", "self", ".", "node2parents", ",", "self", ".", "node2children", ",", "self", ".", "node2nbs", "=", "{", "}", ",", "{", "}", ",", "{", "self", ".", "pseudo_leaf_node", ":", "[", "]", "}", "\n", "for", "node", "in", "interested_node_set", ":", "\n", "                ", "parents", "=", "set", "(", "self", ".", "core_subgraph", ".", "predecessors", "(", "node", ")", ")", "\n", "children", "=", "set", "(", "self", ".", "core_subgraph", ".", "successors", "(", "node", ")", ")", "\n", "if", "len", "(", "children", ")", ">", "1", ":", "\n", "                    ", "children", "=", "[", "i", "for", "i", "in", "children", "if", "i", "!=", "self", ".", "pseudo_leaf_node", "]", "\n", "", "node_pos_edges", "=", "[", "(", "pre", ",", "suc", ")", "for", "pre", "in", "parents", "for", "suc", "in", "children", "if", "pre", "!=", "suc", "]", "\n", "self", ".", "node2edge", "[", "node", "]", "=", "set", "(", "self", ".", "core_subgraph", ".", "in_edges", "(", "node", ")", ")", ".", "union", "(", "set", "(", "self", ".", "core_subgraph", ".", "out_edges", "(", "node", ")", ")", ")", "\n", "self", ".", "node2pos", "[", "node", "]", "=", "node_pos_edges", "\n", "self", ".", "node2parents", "[", "node", "]", "=", "parents", "\n", "self", ".", "node2children", "[", "node", "]", "=", "children", "\n", "self", ".", "node2nbs", "[", "node", "]", "=", "parents", ".", "union", "(", "children", ")", "\n", "", "self", ".", "node2nbs", "[", "self", ".", "root", "]", "=", "set", "(", "[", "n", "for", "n", "in", "self", ".", "core_subgraph", ".", "successors", "(", "self", ".", "root", ")", "if", "n", "!=", "self", ".", "pseudo_leaf_node", "]", ")", "\n", "\n", "self", ".", "valid_node_list", "=", "graph_dataset", ".", "validation_node_ids", "\n", "holdout_subgraph", "=", "self", ".", "_get_holdout_subgraph", "(", "graph_dataset", ".", "train_node_ids", "+", "graph_dataset", ".", "validation_node_ids", ")", "\n", "self", ".", "valid_node2pos", "=", "self", ".", "_find_insert_posistion", "(", "graph_dataset", ".", "validation_node_ids", ",", "holdout_subgraph", ")", "\n", "\n", "self", ".", "test_node_list", "=", "graph_dataset", ".", "test_node_ids", "\n", "holdout_subgraph", "=", "self", ".", "_get_holdout_subgraph", "(", "graph_dataset", ".", "train_node_ids", "+", "graph_dataset", ".", "test_node_ids", ")", "\n", "self", ".", "test_node2pos", "=", "self", ".", "_find_insert_posistion", "(", "graph_dataset", ".", "test_node_ids", ",", "holdout_subgraph", ")", "\n", "\n", "# used for sampling negative positions during train/validation stage", "\n", "self", ".", "pointer", "=", "0", "\n", "self", ".", "all_edges", "=", "list", "(", "self", ".", "_get_candidate_positions", "(", "self", ".", "core_subgraph", ")", ")", "\n", "self", ".", "edge2dist", "=", "{", "(", "u", ",", "v", ")", ":", "nx", ".", "shortest_path_length", "(", "self", ".", "core_subgraph", ",", "u", ",", "v", ")", "for", "(", "u", ",", "v", ")", "in", "self", ".", "all_edges", "}", "\n", "random", ".", "shuffle", "(", "self", ".", "all_edges", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "# add pseudo leaf node to core graph", "\n", "            ", "self", ".", "core_subgraph", "=", "self", ".", "full_graph", "\n", "self", ".", "pseudo_leaf_node", "=", "len", "(", "full_graph", ".", "nodes", ")", "\n", "self", ".", "node_list", "=", "list", "(", "self", ".", "core_subgraph", ".", "nodes", "(", ")", ")", "\n", "for", "node", "in", "self", ".", "node_list", ":", "\n", "                ", "self", ".", "core_subgraph", ".", "add_edge", "(", "node", ",", "self", ".", "pseudo_leaf_node", ")", "\n", "", "self", ".", "leaf_nodes", "=", "[", "node", "for", "node", "in", "self", ".", "core_subgraph", ".", "nodes", "(", ")", "if", "\n", "self", ".", "core_subgraph", ".", "out_degree", "(", "node", ")", "==", "1", "]", "\n", "# for pseudo leaf node", "\n", "leaf_vector", "=", "torch", ".", "zeros", "(", "(", "1", ",", "self", ".", "node_features", ".", "size", "(", "1", ")", ")", ")", "# zero vector works best", "\n", "self", ".", "node_features", "=", "torch", ".", "cat", "(", "(", "self", ".", "node_features", ",", "leaf_vector", ")", ",", "0", ")", "\n", "if", "self", ".", "normalize_embed", ":", "\n", "                ", "self", ".", "node_features", "=", "F", ".", "normalize", "(", "self", ".", "node_features", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "# used for sampling negative positions during train/validation stage", "\n", "", "self", ".", "all_edges", "=", "list", "(", "self", ".", "_get_candidate_positions", "(", "self", ".", "core_subgraph", ")", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "f\"Finish loading dataset ({end - start} seconds)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset.__str__": [[449, 451], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f\"{self.__class__.__name__} mode:{self.mode}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset.__len__": [[452, 454], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "node_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset.__getitem__": [[455, 491], ["dataset.RawDataset._get_negative_anchors", "tuple", "len", "int", "int", "int", "res.append", "random.sample", "random.sample", "random.sample", "random.sample", "res.append", "random.choice", "random.choice", "random.choice", "random.choice", "res.append", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_negative_anchors"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\" Generate an data instance based on train/validation/test mode.\n\n        One data instance is a list of (anchor_egonet, query_node_feature, label) triplets.\n\n        If self.sampling_mode == 0:\n            This list may contain more than one triplets with label = 1\n        If self.sampling_mode == 1:\n            This list contain one and ONLY one triplet with label = 1, others have label = 0\n        \"\"\"", "\n", "res", "=", "[", "]", "\n", "query_node", "=", "self", ".", "node_list", "[", "idx", "]", "\n", "\n", "# generate positive triplet(s)", "\n", "if", "self", ".", "sampling_mode", "==", "0", ":", "\n", "            ", "pos_positions", "=", "self", ".", "node2pos", "[", "query_node", "]", "\n", "if", "len", "(", "pos_positions", ")", ">", "self", ".", "max_pos_size", "and", "self", ".", "mode", "==", "'train'", ":", "\n", "                ", "pos_positions", "=", "random", ".", "sample", "(", "pos_positions", ",", "k", "=", "self", ".", "max_pos_size", ")", "\n", "", "for", "u", ",", "v", "in", "pos_positions", ":", "\n", "                ", "res", ".", "append", "(", "[", "u", ",", "v", ",", "query_node", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", "]", ")", "\n", "", "", "elif", "self", ".", "sampling_mode", ">", "0", ":", "\n", "            ", "u", ",", "v", "=", "random", ".", "choice", "(", "self", ".", "node2pos", "[", "query_node", "]", ")", "\n", "res", ".", "append", "(", "[", "u", ",", "v", ",", "query_node", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", "]", ")", "\n", "\n", "# select negative parents", "\n", "", "negative_size", "=", "len", "(", "res", ")", "if", "self", ".", "negative_size", "==", "-", "1", "else", "self", ".", "negative_size", "\n", "negative_anchors", "=", "self", ".", "_get_negative_anchors", "(", "query_node", ",", "negative_size", ")", "\n", "\n", "# generate negative triplets", "\n", "for", "u", ",", "v", "in", "negative_anchors", ":", "\n", "            ", "u_flag", "=", "int", "(", "u", "in", "self", ".", "node2parents", "[", "query_node", "]", ")", "\n", "v_flag", "=", "int", "(", "v", "in", "self", ".", "node2children", "[", "query_node", "]", ")", "\n", "e_flag", "=", "int", "(", "self", ".", "edge2dist", "[", "(", "u", ",", "v", ")", "]", "<=", "2", ")", "\n", "res", ".", "append", "(", "[", "u", ",", "v", ",", "query_node", ",", "(", "0", ",", "u_flag", ",", "v_flag", ",", "e_flag", ")", "]", ")", "\n", "\n", "", "return", "tuple", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._get_holdout_subgraph": [[492, 526], ["dataset.RawDataset.full_graph.subgraph().copy", "dataset.RawDataset.nodes", "set", "set", "collections.deque", "collections.deque", "set", "dataset.RawDataset.full_graph.subgraph", "dataset.RawDataset.full_graph.predecessors", "dataset.RawDataset.full_graph.successors", "collections.deque.popleft", "collections.deque.popleft", "networkx.algorithms.descendants", "dataset.RawDataset.out_degree", "set", "set", "set.intersection", "set.add", "list", "set.add", "list", "dataset.RawDataset.add_edge", "dataset.RawDataset.successors", "itertools.chain.from_iterable", "dataset.RawDataset.full_graph.predecessors", "dataset.RawDataset.full_graph.successors", "dataset.RawDataset.remove_edge"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.copy"], ["", "def", "_get_holdout_subgraph", "(", "self", ",", "node_ids", ")", ":", "\n", "        ", "node_to_remove", "=", "[", "n", "for", "n", "in", "self", ".", "full_graph", ".", "nodes", "if", "n", "not", "in", "node_ids", "]", "\n", "subgraph", "=", "self", ".", "full_graph", ".", "subgraph", "(", "node_ids", ")", ".", "copy", "(", ")", "\n", "for", "node", "in", "node_to_remove", ":", "\n", "            ", "parents", "=", "set", "(", ")", "\n", "children", "=", "set", "(", ")", "\n", "ps", "=", "deque", "(", "self", ".", "full_graph", ".", "predecessors", "(", "node", ")", ")", "\n", "cs", "=", "deque", "(", "self", ".", "full_graph", ".", "successors", "(", "node", ")", ")", "\n", "while", "ps", ":", "\n", "                ", "p", "=", "ps", ".", "popleft", "(", ")", "\n", "if", "p", "in", "subgraph", ":", "\n", "                    ", "parents", ".", "add", "(", "p", ")", "\n", "", "else", ":", "\n", "                    ", "ps", "+=", "list", "(", "self", ".", "full_graph", ".", "predecessors", "(", "p", ")", ")", "\n", "", "", "while", "cs", ":", "\n", "                ", "c", "=", "cs", ".", "popleft", "(", ")", "\n", "if", "c", "in", "subgraph", ":", "\n", "                    ", "children", ".", "add", "(", "c", ")", "\n", "", "else", ":", "\n", "                    ", "cs", "+=", "list", "(", "self", ".", "full_graph", ".", "successors", "(", "c", ")", ")", "\n", "", "", "for", "p", "in", "parents", ":", "\n", "                ", "for", "c", "in", "children", ":", "\n", "                    ", "subgraph", ".", "add_edge", "(", "p", ",", "c", ")", "\n", "# remove jump edges", "\n", "", "", "", "node2descendants", "=", "{", "n", ":", "set", "(", "descendants", "(", "subgraph", ",", "n", ")", ")", "for", "n", "in", "subgraph", ".", "nodes", "}", "\n", "for", "node", "in", "subgraph", ".", "nodes", "(", ")", ":", "\n", "            ", "if", "subgraph", ".", "out_degree", "(", "node", ")", ">", "1", ":", "\n", "                ", "successors1", "=", "set", "(", "subgraph", ".", "successors", "(", "node", ")", ")", "\n", "successors2", "=", "set", "(", "chain", ".", "from_iterable", "(", "[", "node2descendants", "[", "n", "]", "for", "n", "in", "successors1", "]", ")", ")", "\n", "checkset", "=", "successors1", ".", "intersection", "(", "successors2", ")", "\n", "if", "checkset", ":", "\n", "                    ", "for", "s", "in", "checkset", ":", "\n", "                        ", "subgraph", ".", "remove_edge", "(", "node", ",", "s", ")", "\n", "", "", "", "", "return", "subgraph", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._get_candidate_positions": [[527, 531], ["set", "set", "itertools.chain.from_iterable", "networkx.algorithms.descendants", "node2descendants.items"], "methods", ["None"], ["", "def", "_get_candidate_positions", "(", "self", ",", "graph", ")", ":", "\n", "        ", "node2descendants", "=", "{", "n", ":", "set", "(", "descendants", "(", "graph", ",", "n", ")", ")", "for", "n", "in", "graph", ".", "nodes", "}", "\n", "candidates", "=", "set", "(", "chain", ".", "from_iterable", "(", "[", "[", "(", "n", ",", "d", ")", "for", "d", "in", "ds", "]", "for", "n", ",", "ds", "in", "node2descendants", ".", "items", "(", ")", "]", ")", ")", "\n", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._find_insert_posistion": [[532, 559], ["set", "set", "collections.deque", "collections.deque", "holdout_graph.predecessors", "holdout_graph.successors", "collections.deque.popleft", "collections.deque.popleft", "set.add", "set.add", "list", "set.add", "list", "holdout_graph.predecessors", "holdout_graph.successors"], "methods", ["None"], ["", "def", "_find_insert_posistion", "(", "self", ",", "node_ids", ",", "holdout_graph", ",", "ignore", "=", "[", "]", ")", ":", "\n", "        ", "node2pos", "=", "{", "}", "\n", "subgraph", "=", "self", ".", "core_subgraph", "\n", "for", "node", "in", "node_ids", ":", "\n", "            ", "if", "node", "in", "ignore", ":", "\n", "                ", "continue", "\n", "", "parents", "=", "set", "(", ")", "\n", "children", "=", "set", "(", ")", "\n", "ps", "=", "deque", "(", "holdout_graph", ".", "predecessors", "(", "node", ")", ")", "\n", "cs", "=", "deque", "(", "holdout_graph", ".", "successors", "(", "node", ")", ")", "\n", "while", "ps", ":", "\n", "                ", "p", "=", "ps", ".", "popleft", "(", ")", "\n", "if", "p", "in", "subgraph", ":", "\n", "                    ", "parents", ".", "add", "(", "p", ")", "\n", "", "else", ":", "\n", "                    ", "ps", "+=", "list", "(", "holdout_graph", ".", "predecessors", "(", "p", ")", ")", "\n", "", "", "while", "cs", ":", "\n", "                ", "c", "=", "cs", ".", "popleft", "(", ")", "\n", "if", "c", "in", "subgraph", ":", "\n", "                    ", "children", ".", "add", "(", "c", ")", "\n", "", "else", ":", "\n", "                    ", "cs", "+=", "list", "(", "holdout_graph", ".", "successors", "(", "c", ")", ")", "\n", "", "", "if", "not", "children", ":", "\n", "                ", "children", ".", "add", "(", "self", ".", "pseudo_leaf_node", ")", "\n", "", "position", "=", "[", "(", "p", ",", "c", ")", "for", "p", "in", "parents", "for", "c", "in", "children", "if", "p", "!=", "c", "]", "\n", "node2pos", "[", "node", "]", "=", "position", "\n", "", "return", "node2pos", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._get_negative_anchors": [[560, 565], ["dataset.RawDataset._get_at_most_k_negatives", "dataset.RawDataset._get_exactly_k_negatives"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_at_most_k_negatives", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_exactly_k_negatives"], ["", "def", "_get_negative_anchors", "(", "self", ",", "query_node", ",", "negative_size", ")", ":", "\n", "        ", "if", "self", ".", "sampling_mode", "==", "0", ":", "\n", "            ", "return", "self", ".", "_get_at_most_k_negatives", "(", "query_node", ",", "negative_size", ")", "\n", "", "elif", "self", ".", "sampling_mode", "==", "1", ":", "\n", "            ", "return", "self", ".", "_get_exactly_k_negatives", "(", "query_node", ",", "negative_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._get_at_most_k_negatives": [[566, 582], ["random.shuffle", "random.shuffle", "random.shuffle", "random.shuffle", "len", "len"], "methods", ["None"], ["", "", "def", "_get_at_most_k_negatives", "(", "self", ",", "query_node", ",", "negative_size", ")", ":", "\n", "        ", "\"\"\" Generate AT MOST negative_size samples for the query node\n        \"\"\"", "\n", "if", "self", ".", "pointer", "==", "0", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "all_edges", ")", "\n", "\n", "", "while", "True", ":", "\n", "            ", "negatives", "=", "[", "ele", "for", "ele", "in", "self", ".", "all_edges", "[", "self", ".", "pointer", ":", "self", ".", "pointer", "+", "negative_size", "]", "if", "\n", "ele", "not", "in", "self", ".", "node2pos", "[", "query_node", "]", "and", "ele", "not", "in", "self", ".", "node2edge", "[", "query_node", "]", "]", "\n", "if", "len", "(", "negatives", ")", ">", "0", ":", "\n", "                ", "break", "\n", "", "self", ".", "pointer", "+=", "negative_size", "\n", "if", "self", ".", "pointer", ">=", "len", "(", "self", ".", "all_edges", ")", ":", "\n", "                ", "self", ".", "pointer", "=", "0", "\n", "\n", "", "", "return", "negatives", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._get_exactly_k_negatives": [[583, 602], ["random.shuffle", "random.shuffle", "random.shuffle", "random.shuffle", "len", "negatives.extend", "len", "len", "len", "random.shuffle", "random.shuffle", "random.shuffle", "random.shuffle"], "methods", ["None"], ["", "def", "_get_exactly_k_negatives", "(", "self", ",", "query_node", ",", "negative_size", ",", "ignore", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\" Generate EXACTLY negative_size samples for the query node\n        \"\"\"", "\n", "if", "self", ".", "pointer", "==", "0", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "all_edges", ")", "\n", "\n", "", "negatives", "=", "[", "]", "\n", "while", "len", "(", "negatives", ")", "!=", "negative_size", ":", "\n", "            ", "n_lack", "=", "negative_size", "-", "len", "(", "negatives", ")", "\n", "negatives", ".", "extend", "(", "[", "ele", "for", "ele", "in", "self", ".", "all_edges", "[", "self", ".", "pointer", ":", "self", ".", "pointer", "+", "n_lack", "]", "if", "\n", "ele", "not", "in", "self", ".", "node2pos", "[", "query_node", "]", "and", "ele", "not", "in", "self", ".", "node2edge", "[", "query_node", "]", "and", "ele", "not", "in", "ignore", "]", ")", "\n", "self", ".", "pointer", "+=", "n_lack", "\n", "if", "self", ".", "pointer", ">=", "len", "(", "self", ".", "all_edges", ")", ":", "\n", "                ", "self", ".", "pointer", "=", "0", "\n", "random", ".", "shuffle", "(", "self", ".", "all_edges", ")", "\n", "", "", "if", "len", "(", "negatives", ")", ">", "negative_size", ":", "\n", "            ", "negatives", "=", "negatives", "[", ":", "negative_size", "]", "\n", "\n", "", "return", "negatives", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.GraphDataset.__init__": [[605, 618], ["dataset.RawDataset.__init__", "dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "dgl.DGLGraph.add_edges", "dgl.DGLGraph.nodes", "dgl.DGLGraph.nodes", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "graph_dataset", ",", "mode", "=", "\"train\"", ",", "sampling_mode", "=", "1", ",", "negative_size", "=", "32", ",", "max_pos_size", "=", "100", ",", "\n", "expand_factor", "=", "64", ",", "cache_refresh_time", "=", "128", ",", "normalize_embed", "=", "False", ",", "test_topk", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "GraphDataset", ",", "self", ")", ".", "__init__", "(", "graph_dataset", ",", "mode", ",", "sampling_mode", ",", "negative_size", ",", "max_pos_size", ",", "\n", "expand_factor", ",", "cache_refresh_time", ",", "normalize_embed", ",", "test_topk", ")", "\n", "\n", "# used for caching local subgraphs", "\n", "self", ".", "cache", "=", "{", "}", "# if g = self.cache[anchor_node], then g is the egonet centered on the anchor_node", "\n", "self", ".", "cache_counter", "=", "{", "}", "# if n = self.cache[anchor_node], then n is the number of times you used this cache", "\n", "\n", "lg", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "lg", ".", "add_nodes", "(", "1", ",", "{", "\"_id\"", ":", "torch", ".", "tensor", "(", "[", "self", ".", "pseudo_leaf_node", "]", ")", ",", "\"pos\"", ":", "torch", ".", "tensor", "(", "[", "1", "]", ")", "}", ")", "\n", "lg", ".", "add_edges", "(", "lg", ".", "nodes", "(", ")", ",", "lg", ".", "nodes", "(", ")", ")", "\n", "self", ".", "cache", "[", "self", ".", "pseudo_leaf_node", "]", "=", "lg", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.GraphDataset.__getitem__": [[619, 658], ["dataset.GraphDataset._get_negative_anchors", "tuple", "len", "dataset.GraphDataset._get_subgraph_and_node_pair", "int", "int", "int", "res.append", "random.sample", "random.sample", "random.sample", "random.sample", "dataset.GraphDataset._get_subgraph_and_node_pair", "res.append", "random.choice", "random.choice", "random.choice", "random.choice", "dataset.GraphDataset._get_subgraph_and_node_pair", "res.append", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_negative_anchors", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph_and_node_pair", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph_and_node_pair", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph_and_node_pair"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\" Generate an data instance based on train/validation/test mode.\n\n        One data instance is a list of (anchor_egonet, query_node_feature, label) triplets.\n\n        If self.sampling_mode == 0:\n            This list may contain more than one triplets with label = 1\n        If self.sampling_mode == 1:\n            This list contain one and ONLY one triplet with label = 1, others have label = 0\n        \"\"\"", "\n", "res", "=", "[", "]", "\n", "query_node", "=", "self", ".", "node_list", "[", "idx", "]", "\n", "\n", "# generate positive triplet(s)", "\n", "if", "self", ".", "sampling_mode", "==", "0", ":", "\n", "            ", "pos_positions", "=", "self", ".", "node2pos", "[", "query_node", "]", "\n", "if", "len", "(", "pos_positions", ")", ">", "self", ".", "max_pos_size", "and", "self", ".", "mode", "==", "'train'", ":", "\n", "                ", "pos_positions", "=", "random", ".", "sample", "(", "pos_positions", ",", "k", "=", "self", ".", "max_pos_size", ")", "\n", "", "for", "u", ",", "v", "in", "pos_positions", ":", "\n", "                ", "u_egonet", ",", "v_egonet", "=", "self", ".", "_get_subgraph_and_node_pair", "(", "query_node", ",", "u", ",", "v", ")", "\n", "res", ".", "append", "(", "[", "u", ",", "v", ",", "u_egonet", ",", "v_egonet", ",", "query_node", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", "]", ")", "\n", "", "", "elif", "self", ".", "sampling_mode", ">", "0", ":", "\n", "            ", "u", ",", "v", "=", "random", ".", "choice", "(", "self", ".", "node2pos", "[", "query_node", "]", ")", "\n", "u_egonet", ",", "v_egonet", "=", "self", ".", "_get_subgraph_and_node_pair", "(", "query_node", ",", "u", ",", "v", ")", "\n", "res", ".", "append", "(", "[", "u", ",", "v", ",", "u_egonet", ",", "v_egonet", ",", "query_node", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", "]", ")", "\n", "\n", "# select negative parents", "\n", "", "negative_size", "=", "len", "(", "res", ")", "if", "self", ".", "negative_size", "==", "-", "1", "else", "self", ".", "negative_size", "\n", "negative_anchors", "=", "self", ".", "_get_negative_anchors", "(", "query_node", ",", "negative_size", ")", "\n", "\n", "# generate negative triplets", "\n", "for", "u", ",", "v", "in", "negative_anchors", ":", "\n", "            ", "u_egonet", ",", "v_egonet", "=", "self", ".", "_get_subgraph_and_node_pair", "(", "query_node", ",", "u", ",", "v", ")", "\n", "u_flag", "=", "int", "(", "u", "in", "self", ".", "node2parents", "[", "query_node", "]", ")", "\n", "v_flag", "=", "int", "(", "v", "in", "self", ".", "node2children", "[", "query_node", "]", ")", "\n", "e_flag", "=", "int", "(", "self", ".", "edge2dist", "[", "(", "u", ",", "v", ")", "]", "<=", "2", ")", "\n", "res", ".", "append", "(", "[", "u", ",", "v", ",", "u_egonet", ",", "v_egonet", ",", "query_node", ",", "(", "0", ",", "u_flag", ",", "v_flag", ",", "e_flag", ")", "]", ")", "\n", "\n", "", "return", "tuple", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.GraphDataset._check_cache_flag": [[659, 661], ["None"], "methods", ["None"], ["", "def", "_check_cache_flag", "(", "self", ",", "node", ")", ":", "\n", "        ", "return", "(", "node", "in", "self", ".", "cache", ")", "and", "(", "self", ".", "cache_counter", "[", "node", "]", "<", "self", ".", "cache_refresh_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.GraphDataset._get_subgraph_and_node_pair": [[662, 701], ["dataset.GraphDataset._check_cache_flag", "dataset.GraphDataset._check_cache_flag", "dataset.GraphDataset._get_subgraph", "dataset.GraphDataset._get_subgraph"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.GraphDataset._check_cache_flag", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.GraphDataset._check_cache_flag", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph"], ["", "def", "_get_subgraph_and_node_pair", "(", "self", ",", "query_node", ",", "anchor_node_u", ",", "anchor_node_v", ")", ":", "\n", "        ", "\"\"\" Generate anchor_egonet and obtain query_node feature\n\n        instance_mode: 0 means negative example, 1 means positive example\n        \"\"\"", "\n", "\n", "# [IMPORTANT]", "\n", "# if anchor_node_u == self.pseudo_leaf_node:", "\n", "#     return self.cache[anchor_node_u]", "\n", "\n", "if", "anchor_node_u", "==", "self", ".", "pseudo_leaf_node", ":", "\n", "            ", "g_u", "=", "self", ".", "cache", "[", "anchor_node_u", "]", "\n", "", "else", ":", "\n", "            ", "u_cache_flag", "=", "self", ".", "_check_cache_flag", "(", "anchor_node_u", ")", "\n", "u_flag", "=", "(", "(", "query_node", "<", "0", ")", "or", "(", "anchor_node_u", "not", "in", "self", ".", "node2nbs", "[", "query_node", "]", ")", ")", "and", "(", "anchor_node_u", "not", "in", "self", ".", "node2nbs", "[", "anchor_node_v", "]", ")", "\n", "if", "u_flag", "and", "u_cache_flag", ":", "\n", "                ", "g_u", "=", "self", ".", "cache", "[", "anchor_node_u", "]", "\n", "self", ".", "cache_counter", "[", "anchor_node_u", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "g_u", "=", "self", ".", "_get_subgraph", "(", "query_node", ",", "anchor_node_u", ",", "anchor_node_v", ",", "u_flag", ")", "\n", "if", "u_flag", ":", "# save to cache", "\n", "                    ", "self", ".", "cache", "[", "anchor_node_u", "]", "=", "g_u", "\n", "self", ".", "cache_counter", "[", "anchor_node_u", "]", "=", "0", "\n", "\n", "", "", "", "if", "anchor_node_v", "==", "self", ".", "pseudo_leaf_node", ":", "\n", "            ", "g_v", "=", "self", ".", "cache", "[", "anchor_node_v", "]", "\n", "", "else", ":", "\n", "            ", "v_cache_flag", "=", "self", ".", "_check_cache_flag", "(", "anchor_node_v", ")", "\n", "v_flag", "=", "(", "(", "query_node", "<", "0", ")", "or", "(", "anchor_node_v", "not", "in", "self", ".", "node2nbs", "[", "query_node", "]", ")", ")", "and", "(", "anchor_node_v", "not", "in", "self", ".", "node2nbs", "[", "anchor_node_u", "]", ")", "\n", "if", "v_flag", "and", "v_cache_flag", ":", "\n", "                ", "g_v", "=", "self", ".", "cache", "[", "anchor_node_v", "]", "\n", "self", ".", "cache_counter", "[", "anchor_node_v", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "g_v", "=", "self", ".", "_get_subgraph", "(", "query_node", ",", "anchor_node_v", ",", "anchor_node_u", ",", "v_flag", ")", "\n", "if", "v_flag", ":", "# save to cache", "\n", "                    ", "self", ".", "cache", "[", "anchor_node_v", "]", "=", "g_v", "\n", "self", ".", "cache_counter", "[", "anchor_node_v", "]", "=", "0", "\n", "\n", "", "", "", "return", "g_u", ",", "g_v", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.GraphDataset._get_subgraph": [[702, 775], ["dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "dataset.add_edge_for_dgl", "dataset.add_edge_for_dgl", "dgl.DGLGraph.add_edges", "len", "list", "list", "dgl.DGLGraph.nodes", "dgl.DGLGraph.nodes", "len", "nodes.append", "nodes_pos.append", "len", "nodes.append", "nodes_pos.append", "nodes.extend", "nodes_pos.extend", "len", "nodes.append", "nodes_pos.append", "len", "nodes.append", "nodes_pos.append", "nodes.extend", "nodes_pos.extend", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "range", "len", "len", "dataset.GraphDataset.core_subgraph.out_degree", "len", "len", "dataset.GraphDataset.core_subgraph.out_degree", "len", "random.choices", "random.choices", "random.choices", "random.choices", "dataset.GraphDataset.core_subgraph.predecessors", "len", "random.choices", "random.choices", "random.choices", "random.choices", "dataset.GraphDataset.core_subgraph.predecessors", "len", "dataset.GraphDataset.core_subgraph.successors", "random.choices", "random.choices", "random.choices", "random.choices", "dataset.GraphDataset.core_subgraph.successors", "random.choices", "random.choices", "random.choices", "random.choices", "list", "list", "dataset.GraphDataset.core_subgraph.successors", "dataset.GraphDataset.core_subgraph.successors"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.add_edge_for_dgl", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.add_edge_for_dgl"], ["", "def", "_get_subgraph", "(", "self", ",", "query_node", ",", "anchor_node", ",", "other_anchor_node", ",", "instance_mode", ")", ":", "\n", "        ", "if", "instance_mode", ":", "# do not need to worry about query_node appears to be the child of anchor_node", "\n", "# parents of anchor node", "\n", "            ", "if", "anchor_node", "==", "self", ".", "pseudo_leaf_node", ":", "\n", "                ", "nodes", "=", "[", "n", "for", "n", "in", "random", ".", "choices", "(", "self", ".", "leaf_nodes", ",", "k", "=", "self", ".", "expand_factor", ")", "]", "\n", "nodes_pos", "=", "[", "0", "]", "*", "len", "(", "nodes", ")", "\n", "# anchor node itself", "\n", "parent_node_idx", "=", "len", "(", "nodes", ")", "\n", "nodes", ".", "append", "(", "anchor_node", ")", "\n", "nodes_pos", ".", "append", "(", "1", ")", "\n", "\n", "# # anchor node itself", "\n", "# parent_node_idx = 0", "\n", "# nodes = [anchor_node]", "\n", "# nodes_pos = [1]", "\n", "\n", "", "else", ":", "\n", "                ", "nodes", "=", "[", "n", "for", "n", "in", "self", ".", "core_subgraph", ".", "predecessors", "(", "anchor_node", ")", "]", "\n", "nodes_pos", "=", "[", "0", "]", "*", "len", "(", "nodes", ")", "\n", "# anchor node itself", "\n", "parent_node_idx", "=", "len", "(", "nodes", ")", "\n", "nodes", ".", "append", "(", "anchor_node", ")", "\n", "nodes_pos", ".", "append", "(", "1", ")", "\n", "# siblings of query node (i.e., children of anchor node)", "\n", "if", "self", ".", "core_subgraph", ".", "out_degree", "(", "anchor_node", ")", "<=", "self", ".", "expand_factor", ":", "\n", "                    ", "siblings", "=", "[", "n", "for", "n", "in", "self", ".", "core_subgraph", ".", "successors", "(", "anchor_node", ")", "if", "n", "!=", "self", ".", "pseudo_leaf_node", "]", "\n", "", "else", ":", "\n", "                    ", "siblings", "=", "[", "n", "for", "n", "in", "\n", "random", ".", "choices", "(", "list", "(", "self", ".", "core_subgraph", ".", "successors", "(", "anchor_node", ")", ")", ",", "k", "=", "self", ".", "expand_factor", ")", "if", "\n", "n", "!=", "self", ".", "pseudo_leaf_node", "]", "\n", "", "nodes", ".", "extend", "(", "siblings", ")", "\n", "nodes_pos", ".", "extend", "(", "[", "2", "]", "*", "len", "(", "siblings", ")", ")", "\n", "", "", "else", ":", "# remove query_node from the children set of anchor_node", "\n", "# TODO maybe include query node's neighbor", "\n", "            ", "if", "anchor_node", "==", "self", ".", "pseudo_leaf_node", ":", "\n", "                ", "nodes", "=", "[", "n", "for", "n", "in", "random", ".", "choices", "(", "self", ".", "leaf_nodes", ",", "k", "=", "self", ".", "expand_factor", ")", "if", "n", "!=", "query_node", "and", "n", "!=", "other_anchor_node", "]", "\n", "nodes_pos", "=", "[", "0", "]", "*", "len", "(", "nodes", ")", "\n", "# anchor node itself", "\n", "parent_node_idx", "=", "len", "(", "nodes", ")", "\n", "nodes", ".", "append", "(", "anchor_node", ")", "\n", "nodes_pos", ".", "append", "(", "1", ")", "\n", "# parent_node_idx = 0", "\n", "# nodes = [anchor_node]", "\n", "# nodes_pos = [1]", "\n", "# parents of anchor node", "\n", "", "else", ":", "\n", "                ", "nodes", "=", "[", "n", "for", "n", "in", "self", ".", "core_subgraph", ".", "predecessors", "(", "anchor_node", ")", "if", "n", "!=", "query_node", "and", "n", "!=", "other_anchor_node", "]", "\n", "nodes_pos", "=", "[", "0", "]", "*", "len", "(", "nodes", ")", "\n", "# anchor node itself", "\n", "parent_node_idx", "=", "len", "(", "nodes", ")", "\n", "nodes", ".", "append", "(", "anchor_node", ")", "\n", "nodes_pos", ".", "append", "(", "1", ")", "\n", "# siblings of query node (i.e., children of anchor node)", "\n", "if", "self", ".", "core_subgraph", ".", "out_degree", "(", "anchor_node", ")", "<=", "self", ".", "expand_factor", ":", "\n", "                    ", "siblings", "=", "[", "n", "for", "n", "in", "self", ".", "core_subgraph", ".", "successors", "(", "anchor_node", ")", "if", "\n", "n", "!=", "self", ".", "pseudo_leaf_node", "and", "n", "!=", "query_node", "and", "n", "!=", "other_anchor_node", "]", "\n", "", "else", ":", "\n", "                    ", "siblings", "=", "[", "n", "for", "n", "in", "\n", "random", ".", "choices", "(", "list", "(", "self", ".", "core_subgraph", ".", "successors", "(", "anchor_node", ")", ")", ",", "k", "=", "self", ".", "expand_factor", ")", "if", "\n", "n", "!=", "self", ".", "pseudo_leaf_node", "and", "n", "!=", "query_node", "and", "n", "!=", "other_anchor_node", "]", "\n", "", "nodes", ".", "extend", "(", "siblings", ")", "\n", "nodes_pos", ".", "extend", "(", "[", "2", "]", "*", "len", "(", "siblings", ")", ")", "\n", "\n", "# create dgl graph with features", "\n", "", "", "g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "g", ".", "add_nodes", "(", "len", "(", "nodes", ")", ",", "{", "\"_id\"", ":", "torch", ".", "tensor", "(", "nodes", ")", ",", "\"pos\"", ":", "torch", ".", "tensor", "(", "nodes_pos", ")", "}", ")", "\n", "add_edge_for_dgl", "(", "g", ",", "list", "(", "range", "(", "parent_node_idx", ")", ")", ",", "parent_node_idx", ")", "\n", "add_edge_for_dgl", "(", "g", ",", "parent_node_idx", ",", "list", "(", "range", "(", "parent_node_idx", "+", "1", ",", "len", "(", "nodes", ")", ")", ")", ")", "\n", "\n", "# add self-cycle", "\n", "g", ".", "add_edges", "(", "g", ".", "nodes", "(", ")", ",", "g", ".", "nodes", "(", ")", ")", "\n", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.PathDataset.__init__": [[778, 784], ["dataset.RawDataset.__init__", "dataset.PathDataset._get_path_to_root", "dataset.PathDataset._get_path_to_leaf"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.PathDataset._get_path_to_root", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.PathDataset._get_path_to_leaf"], ["    ", "def", "__init__", "(", "self", ",", "graph_dataset", ",", "mode", "=", "\"train\"", ",", "sampling_mode", "=", "1", ",", "negative_size", "=", "32", ",", "max_pos_size", "=", "100", ",", "\n", "expand_factor", "=", "64", ",", "cache_refresh_time", "=", "128", ",", "normalize_embed", "=", "False", ",", "test_topk", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "PathDataset", ",", "self", ")", ".", "__init__", "(", "graph_dataset", ",", "mode", ",", "sampling_mode", ",", "negative_size", ",", "max_pos_size", ",", "\n", "expand_factor", ",", "cache_refresh_time", ",", "normalize_embed", ",", "test_topk", ")", "\n", "self", ".", "node2root_path", "=", "self", ".", "_get_path_to_root", "(", ")", "\n", "self", ".", "node2leaf_path", "=", "self", ".", "_get_path_to_leaf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.PathDataset.__getitem__": [[785, 824], ["dataset.PathDataset._get_negative_anchors", "tuple", "len", "int", "int", "int", "dataset.PathDataset._get_edge_node_path", "res.append", "random.sample", "random.sample", "random.sample", "random.sample", "dataset.PathDataset._get_edge_node_path", "res.append", "random.choice", "random.choice", "random.choice", "random.choice", "dataset.PathDataset._get_edge_node_path", "res.append", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_negative_anchors", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_edge_node_path", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_edge_node_path", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_edge_node_path"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\" Generate an data instance based on train/validation/test mode.\n\n        One data instance is a list of (anchor_egonet, query_node_feature, label) triplets.\n\n        If self.sampling_mode == 0:\n            This list may contain more than one triplets with label = 1\n        If self.sampling_mode == 1:\n            This list contain one and ONLY one triplet with label = 1, others have label = 0\n        \"\"\"", "\n", "res", "=", "[", "]", "\n", "query_node", "=", "self", ".", "node_list", "[", "idx", "]", "\n", "\n", "# generate positive triplet(s)", "\n", "if", "self", ".", "sampling_mode", "==", "0", ":", "\n", "            ", "pos_positions", "=", "self", ".", "node2pos", "[", "query_node", "]", "\n", "if", "len", "(", "pos_positions", ")", ">", "self", ".", "max_pos_size", "and", "self", ".", "mode", "==", "'train'", ":", "\n", "                ", "pos_positions", "=", "random", ".", "sample", "(", "pos_positions", ",", "k", "=", "self", ".", "max_pos_size", ")", "\n", "", "for", "u", ",", "v", "in", "pos_positions", ":", "\n", "                ", "u_path", ",", "v_path", ",", "lens", "=", "self", ".", "_get_edge_node_path", "(", "query_node", ",", "(", "u", ",", "v", ")", ")", "\n", "res", ".", "append", "(", "[", "u", ",", "v", ",", "u_path", ",", "v_path", ",", "lens", ",", "query_node", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", "]", ")", "\n", "", "", "elif", "self", ".", "sampling_mode", ">", "0", ":", "\n", "            ", "u", ",", "v", "=", "random", ".", "choice", "(", "self", ".", "node2pos", "[", "query_node", "]", ")", "\n", "u_path", ",", "v_path", ",", "lens", "=", "self", ".", "_get_edge_node_path", "(", "query_node", ",", "(", "u", ",", "v", ")", ")", "\n", "res", ".", "append", "(", "[", "u", ",", "v", ",", "u_path", ",", "v_path", ",", "lens", ",", "query_node", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", "]", ")", "\n", "\n", "# select negative parents", "\n", "", "negative_size", "=", "len", "(", "res", ")", "if", "self", ".", "negative_size", "==", "-", "1", "else", "self", ".", "negative_size", "\n", "negative_anchors", "=", "self", ".", "_get_negative_anchors", "(", "query_node", ",", "negative_size", ")", "\n", "\n", "# generate negative triplets", "\n", "for", "u", ",", "v", "in", "negative_anchors", ":", "\n", "            ", "u_flag", "=", "int", "(", "u", "in", "self", ".", "node2parents", "[", "query_node", "]", ")", "\n", "v_flag", "=", "int", "(", "v", "in", "self", ".", "node2children", "[", "query_node", "]", ")", "\n", "e_flag", "=", "int", "(", "self", ".", "edge2dist", "[", "(", "u", ",", "v", ")", "]", "<=", "2", ")", "\n", "u_path", ",", "v_path", ",", "lens", "=", "self", ".", "_get_edge_node_path", "(", "query_node", ",", "(", "u", ",", "v", ")", ")", "\n", "res", ".", "append", "(", "[", "u", ",", "v", ",", "u_path", ",", "v_path", ",", "lens", ",", "query_node", ",", "(", "0", ",", "u_flag", ",", "v_flag", ",", "e_flag", ")", "]", ")", "\n", "\n", "", "return", "tuple", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.PathDataset._get_path_to_root": [[825, 845], ["collections.deque", "collections.deque.popleft", "dataset.PathDataset.core_subgraph.successors", "visit.append", "collections.deque.append", "node2root_path[].append"], "methods", ["None"], ["", "def", "_get_path_to_root", "(", "self", ")", ":", "\n", "        ", "node2root_path", "=", "{", "n", ":", "[", "]", "for", "n", "in", "self", ".", "node_list", "}", "\n", "q", "=", "deque", "(", "[", "self", ".", "root", "]", ")", "\n", "node2root_path", "[", "self", ".", "root", "]", "=", "[", "[", "self", ".", "root", "]", "]", "\n", "visit", "=", "[", "]", "\n", "while", "q", ":", "\n", "            ", "i", "=", "q", ".", "popleft", "(", ")", "\n", "if", "i", "in", "visit", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "visit", ".", "append", "(", "i", ")", "\n", "", "children", "=", "self", ".", "core_subgraph", ".", "successors", "(", "i", ")", "\n", "for", "c", "in", "children", ":", "\n", "                ", "if", "c", "==", "self", ".", "pseudo_leaf_node", ":", "\n", "                    ", "continue", "\n", "", "if", "c", "not", "in", "q", ":", "\n", "                    ", "q", ".", "append", "(", "c", ")", "\n", "", "for", "path", "in", "node2root_path", "[", "i", "]", ":", "\n", "                    ", "node2root_path", "[", "c", "]", ".", "append", "(", "[", "c", "]", "+", "path", ")", "\n", "", "", "", "return", "node2root_path", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.PathDataset._get_path_to_leaf": [[846, 868], ["collections.deque", "collections.deque.popleft", "dataset.PathDataset.core_subgraph.predecessors", "visit.append", "dataset.PathDataset.core_subgraph.out_degree", "collections.deque.append", "node2leaf_path[].append"], "methods", ["None"], ["", "def", "_get_path_to_leaf", "(", "self", ")", ":", "\n", "        ", "leafs", "=", "[", "n", "for", "n", "in", "self", ".", "core_subgraph", ".", "nodes", "if", "self", ".", "core_subgraph", ".", "out_degree", "(", "n", ")", "==", "1", "]", "\n", "node2leaf_path", "=", "{", "n", ":", "[", "]", "for", "n", "in", "self", ".", "node_list", "}", "\n", "q", "=", "deque", "(", "leafs", ")", "\n", "for", "n", "in", "leafs", ":", "\n", "            ", "node2leaf_path", "[", "n", "]", "=", "[", "[", "n", ",", "self", ".", "pseudo_leaf_node", "]", "]", "\n", "", "visit", "=", "[", "]", "\n", "while", "q", ":", "\n", "            ", "i", "=", "q", ".", "popleft", "(", ")", "\n", "if", "i", "in", "visit", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "visit", ".", "append", "(", "i", ")", "\n", "", "parents", "=", "self", ".", "core_subgraph", ".", "predecessors", "(", "i", ")", "\n", "for", "p", "in", "parents", ":", "\n", "                ", "if", "p", "==", "self", ".", "root", ":", "\n", "                    ", "continue", "\n", "", "if", "p", "not", "in", "q", ":", "\n", "                    ", "q", ".", "append", "(", "p", ")", "\n", "", "for", "path", "in", "node2leaf_path", "[", "i", "]", ":", "\n", "                    ", "node2leaf_path", "[", "p", "]", ".", "append", "(", "[", "p", "]", "+", "path", ")", "\n", "", "", "", "return", "node2leaf_path", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.PathDataset._get_edge_node_path": [[869, 880], ["random.choice", "random.choice", "random.choice", "random.choice", "len", "len", "random.choice", "random.choice", "random.choice", "random.choice"], "methods", ["None"], ["", "def", "_get_edge_node_path", "(", "self", ",", "query_node", ",", "edge", ")", ":", "\n", "        ", "pu", "=", "random", ".", "choice", "(", "self", ".", "node2root_path", "[", "edge", "[", "0", "]", "]", ")", "\n", "pu", "=", "[", "n", "for", "n", "in", "pu", "if", "n", "!=", "query_node", "]", "\n", "if", "edge", "[", "1", "]", "==", "self", ".", "pseudo_leaf_node", ":", "\n", "            ", "pv", "=", "[", "self", ".", "pseudo_leaf_node", "]", "\n", "", "else", ":", "\n", "            ", "pv", "=", "random", ".", "choice", "(", "self", ".", "node2leaf_path", "[", "edge", "[", "1", "]", "]", ")", "\n", "pv", "=", "[", "n", "for", "n", "in", "pv", "if", "n", "!=", "query_node", "]", "\n", "", "len_pu", "=", "len", "(", "pu", ")", "\n", "len_pv", "=", "len", "(", "pv", ")", "\n", "return", "pu", ",", "pv", ",", "(", "len_pu", ",", "len_pv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.PathDataset._get_batch_edge_node_path": [[881, 888], ["zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.max", "torch.tensor.max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "dataset.PathDataset._get_edge_node_path", "len", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_edge_node_path"], ["", "def", "_get_batch_edge_node_path", "(", "self", ",", "edges", ")", ":", "\n", "        ", "bpu", ",", "bpv", ",", "lens", "=", "zip", "(", "*", "[", "self", ".", "_get_edge_node_path", "(", "None", ",", "edge", ")", "for", "edge", "in", "edges", "]", ")", "\n", "lens", "=", "torch", ".", "tensor", "(", "lens", ")", "\n", "max_u", ",", "max_v", "=", "lens", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "bpu", "=", "[", "p", "+", "[", "self", ".", "pseudo_leaf_node", "]", "*", "(", "max_u", "-", "len", "(", "p", ")", ")", "for", "p", "in", "bpu", "]", "\n", "bpv", "=", "[", "p", "+", "[", "self", ".", "pseudo_leaf_node", "]", "*", "(", "max_v", "-", "len", "(", "p", ")", ")", "for", "p", "in", "bpv", "]", "\n", "return", "torch", ".", "tensor", "(", "bpu", ")", ",", "torch", ".", "tensor", "(", "bpv", ")", ",", "lens", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.GraphPathDataset.__init__": [[891, 895], ["dataset.GraphDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "graph_dataset", ",", "mode", "=", "\"train\"", ",", "sampling_mode", "=", "1", ",", "negative_size", "=", "32", ",", "max_pos_size", "=", "100", ",", "\n", "expand_factor", "=", "64", ",", "cache_refresh_time", "=", "128", ",", "normalize_embed", "=", "False", ",", "test_topk", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "GraphPathDataset", ",", "self", ")", ".", "__init__", "(", "graph_dataset", ",", "mode", ",", "sampling_mode", ",", "negative_size", ",", "max_pos_size", ",", "\n", "expand_factor", ",", "cache_refresh_time", ",", "normalize_embed", ",", "test_topk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.GraphPathDataset.__getitem__": [[896, 929], ["dataset.GraphPathDataset._get_negative_anchors", "tuple", "len", "dataset.GraphPathDataset._get_subgraph_and_node_pair", "dataset.GraphPathDataset._get_edge_node_path", "int", "int", "int", "res.append", "random.sample", "random.sample", "random.sample", "random.sample", "dataset.GraphPathDataset._get_subgraph_and_node_pair", "dataset.GraphPathDataset._get_edge_node_path", "res.append", "random.choice", "random.choice", "random.choice", "random.choice", "dataset.GraphPathDataset._get_subgraph_and_node_pair", "dataset.GraphPathDataset._get_edge_node_path", "res.append", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_negative_anchors", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph_and_node_pair", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_edge_node_path", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph_and_node_pair", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_edge_node_path", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph_and_node_pair", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_edge_node_path"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "query_node", "=", "self", ".", "node_list", "[", "idx", "]", "\n", "\n", "# generate positive triplet(s)", "\n", "if", "self", ".", "sampling_mode", "==", "0", ":", "\n", "            ", "pos_positions", "=", "self", ".", "node2pos", "[", "query_node", "]", "\n", "if", "len", "(", "pos_positions", ")", ">", "self", ".", "max_pos_size", "and", "self", ".", "mode", "==", "'train'", ":", "\n", "                ", "pos_positions", "=", "random", ".", "sample", "(", "pos_positions", ",", "k", "=", "self", ".", "max_pos_size", ")", "\n", "", "for", "u", ",", "v", "in", "pos_positions", ":", "\n", "                ", "u_egonet", ",", "v_egonet", "=", "self", ".", "_get_subgraph_and_node_pair", "(", "query_node", ",", "u", ",", "v", ")", "\n", "u_path", ",", "v_path", ",", "lens", "=", "self", ".", "_get_edge_node_path", "(", "query_node", ",", "(", "u", ",", "v", ")", ")", "\n", "res", ".", "append", "(", "[", "u", ",", "v", ",", "u_egonet", ",", "v_egonet", ",", "u_path", ",", "v_path", ",", "lens", ",", "query_node", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", "]", ")", "\n", "", "", "elif", "self", ".", "sampling_mode", ">", "0", ":", "\n", "            ", "u", ",", "v", "=", "random", ".", "choice", "(", "self", ".", "node2pos", "[", "query_node", "]", ")", "\n", "u_egonet", ",", "v_egonet", "=", "self", ".", "_get_subgraph_and_node_pair", "(", "query_node", ",", "u", ",", "v", ")", "\n", "u_path", ",", "v_path", ",", "lens", "=", "self", ".", "_get_edge_node_path", "(", "query_node", ",", "(", "u", ",", "v", ")", ")", "\n", "res", ".", "append", "(", "[", "u", ",", "v", ",", "u_egonet", ",", "v_egonet", ",", "u_path", ",", "v_path", ",", "lens", ",", "query_node", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", "]", ")", "\n", "\n", "# select negative parents", "\n", "", "negative_size", "=", "len", "(", "res", ")", "if", "self", ".", "negative_size", "==", "-", "1", "else", "self", ".", "negative_size", "\n", "negative_anchors", "=", "self", ".", "_get_negative_anchors", "(", "query_node", ",", "negative_size", ")", "\n", "\n", "# generate negative triplets", "\n", "for", "u", ",", "v", "in", "negative_anchors", ":", "\n", "            ", "u_egonet", ",", "v_egonet", "=", "self", ".", "_get_subgraph_and_node_pair", "(", "query_node", ",", "u", ",", "v", ")", "\n", "u_path", ",", "v_path", ",", "lens", "=", "self", ".", "_get_edge_node_path", "(", "query_node", ",", "(", "u", ",", "v", ")", ")", "\n", "u_flag", "=", "int", "(", "u", "in", "self", ".", "node2parents", "[", "query_node", "]", ")", "\n", "v_flag", "=", "int", "(", "v", "in", "self", ".", "node2children", "[", "query_node", "]", ")", "\n", "e_flag", "=", "int", "(", "self", ".", "edge2dist", "[", "(", "u", ",", "v", ")", "]", "<=", "2", ")", "\n", "res", ".", "append", "(", "[", "u", ",", "v", ",", "u_egonet", ",", "v_egonet", ",", "u_path", ",", "v_path", ",", "lens", ",", "query_node", ",", "(", "0", ",", "u_flag", ",", "v_flag", ",", "e_flag", ")", "]", ")", "\n", "\n", "", "return", "tuple", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset.__init__": [[932, 1015], ["time.time", "graph_dataset.g_full.to_networkx", "dataset.ExpanDataset._get_holdout_subgraph", "len", "list", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "dataset.ExpanDataset._get_holdout_subgraph", "dataset.ExpanDataset._find_insert_posistion", "dataset.ExpanDataset._get_holdout_subgraph", "dataset.ExpanDataset._find_insert_posistion", "list", "random.shuffle", "random.shuffle", "random.shuffle", "random.shuffle", "dataset.ExpanDataset._get_path_to_root", "time.time", "print", "len", "len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train_node_ids.append", "dataset.ExpanDataset.core_subgraph.nodes", "dataset.ExpanDataset.core_subgraph.add_edge", "torch.normalize", "torch.normalize", "set", "set", "set", "set", "list", "set.union", "set", "set", "set", "set", "dataset.ExpanDataset.core_subgraph.nodes", "graph_dataset.g_full.to_networkx.nodes", "graph_dataset.g_full.to_networkx.add_edge", "dataset.ExpanDataset.core_subgraph.nodes", "dataset.ExpanDataset.node_features.size", "dataset.ExpanDataset.core_subgraph.predecessors", "dataset.ExpanDataset.core_subgraph.successors", "len", "dataset.ExpanDataset.items", "dataset.ExpanDataset.items", "dataset.ExpanDataset.valid_node2pos.items", "len", "dataset.ExpanDataset.items", "dataset.ExpanDataset.items", "dataset.ExpanDataset.test_node2pos.items", "len", "graph_dataset.g_full.to_networkx.in_degree", "dataset.ExpanDataset.core_subgraph.out_degree"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._get_holdout_subgraph", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._get_holdout_subgraph", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._find_insert_posistion", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._get_holdout_subgraph", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.RawDataset._find_insert_posistion", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.PathDataset._get_path_to_root", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size"], ["    ", "def", "__init__", "(", "self", ",", "graph_dataset", ",", "mode", "=", "\"train\"", ",", "sampling_mode", "=", "1", ",", "negative_size", "=", "32", ",", "max_pos_size", "=", "100", ",", "expand_factor", "=", "64", ",", "cache_refresh_time", "=", "128", ",", "normalize_embed", "=", "False", ",", "test_topk", "=", "-", "1", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "sampling_mode", "=", "sampling_mode", "\n", "self", ".", "negative_size", "=", "negative_size", "\n", "self", ".", "max_pos_size", "=", "max_pos_size", "\n", "self", ".", "expand_factor", "=", "expand_factor", "\n", "self", ".", "cache_refresh_time", "=", "cache_refresh_time", "\n", "self", ".", "normalize_embed", "=", "normalize_embed", "\n", "self", ".", "test_topk", "=", "test_topk", "\n", "\n", "self", ".", "node_features", "=", "graph_dataset", ".", "g_full", ".", "ndata", "[", "'x'", "]", "\n", "full_graph", "=", "graph_dataset", ".", "g_full", ".", "to_networkx", "(", ")", "\n", "train_node_ids", "=", "graph_dataset", ".", "train_node_ids", "\n", "roots", "=", "[", "node", "for", "node", "in", "full_graph", ".", "nodes", "(", ")", "if", "full_graph", ".", "in_degree", "(", "node", ")", "==", "0", "]", "\n", "if", "len", "(", "roots", ")", ">", "1", ":", "\n", "            ", "self", ".", "root", "=", "len", "(", "full_graph", ".", "nodes", ")", "\n", "for", "r", "in", "roots", ":", "\n", "                ", "full_graph", ".", "add_edge", "(", "self", ".", "root", ",", "r", ")", "\n", "", "root_vector", "=", "torch", ".", "mean", "(", "self", ".", "node_features", "[", "roots", "]", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "self", ".", "node_features", "=", "torch", ".", "cat", "(", "(", "self", ".", "node_features", ",", "root_vector", ")", ",", "0", ")", "\n", "self", ".", "vocab", "=", "graph_dataset", ".", "vocab", "+", "[", "'root'", ",", "'leaf'", "]", "\n", "train_node_ids", ".", "append", "(", "self", ".", "root", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "root", "=", "roots", "[", "0", "]", "\n", "self", ".", "vocab", "=", "graph_dataset", ".", "vocab", "+", "[", "'leaf'", "]", "\n", "", "self", ".", "full_graph", "=", "full_graph", "\n", "\n", "# add pseudo leaf node to core graph", "\n", "self", ".", "core_subgraph", "=", "self", ".", "_get_holdout_subgraph", "(", "train_node_ids", ")", "\n", "self", ".", "pseudo_leaf_node", "=", "len", "(", "full_graph", ".", "nodes", ")", "\n", "for", "node", "in", "list", "(", "self", ".", "core_subgraph", ".", "nodes", "(", ")", ")", ":", "\n", "            ", "self", ".", "core_subgraph", ".", "add_edge", "(", "node", ",", "self", ".", "pseudo_leaf_node", ")", "\n", "", "self", ".", "leaf_nodes", "=", "[", "node", "for", "node", "in", "self", ".", "core_subgraph", ".", "nodes", "(", ")", "if", "self", ".", "core_subgraph", ".", "out_degree", "(", "node", ")", "==", "1", "]", "\n", "# for pseudo leaf node", "\n", "leaf_vector", "=", "torch", ".", "zeros", "(", "(", "1", ",", "self", ".", "node_features", ".", "size", "(", "1", ")", ")", ")", "# zero vector works best", "\n", "self", ".", "node_features", "=", "torch", ".", "cat", "(", "(", "self", ".", "node_features", ",", "leaf_vector", ")", ",", "0", ")", "\n", "if", "self", ".", "normalize_embed", ":", "\n", "            ", "self", ".", "node_features", "=", "F", ".", "normalize", "(", "self", ".", "node_features", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "# add interested node list and subgraph", "\n", "# remove supersource nodes (i.e., nodes without in-degree 0)", "\n", "", "interested_node_set", "=", "set", "(", "train_node_ids", ")", "-", "set", "(", "[", "self", ".", "root", "]", ")", "\n", "self", ".", "node_list", "=", "list", "(", "interested_node_set", ")", "\n", "\n", "# build node2pos, node2nbs, node2edge", "\n", "self", ".", "node2pos", "=", "{", "}", "\n", "self", ".", "node2parents", ",", "self", ".", "node2children", ",", "self", ".", "node2nbs", "=", "{", "}", ",", "{", "}", ",", "{", "self", ".", "pseudo_leaf_node", ":", "[", "]", "}", "\n", "for", "node", "in", "interested_node_set", ":", "\n", "            ", "parents", "=", "set", "(", "self", ".", "core_subgraph", ".", "predecessors", "(", "node", ")", ")", "\n", "children", "=", "set", "(", "self", ".", "core_subgraph", ".", "successors", "(", "node", ")", ")", "\n", "if", "len", "(", "children", ")", ">", "1", ":", "\n", "                ", "children", "=", "[", "i", "for", "i", "in", "children", "if", "i", "!=", "self", ".", "pseudo_leaf_node", "]", "\n", "", "self", ".", "node2pos", "[", "node", "]", "=", "list", "(", "parents", ")", "\n", "self", ".", "node2parents", "[", "node", "]", "=", "parents", "\n", "self", ".", "node2children", "[", "node", "]", "=", "children", "\n", "self", ".", "node2nbs", "[", "node", "]", "=", "parents", ".", "union", "(", "children", ")", "\n", "\n", "", "holdout_subgraph", "=", "self", ".", "_get_holdout_subgraph", "(", "graph_dataset", ".", "train_node_ids", "+", "graph_dataset", ".", "validation_node_ids", ")", "\n", "valid_node2pos", "=", "self", ".", "_find_insert_posistion", "(", "graph_dataset", ".", "validation_node_ids", ",", "holdout_subgraph", ")", "\n", "self", ".", "valid_node2pos", "=", "{", "node", ":", "set", "(", "[", "p", "for", "(", "p", ",", "c", ")", "in", "pos_l", "if", "c", "==", "self", ".", "pseudo_leaf_node", "]", ")", "for", "node", ",", "pos_l", "in", "valid_node2pos", ".", "items", "(", ")", "}", "\n", "self", ".", "valid_node2parents", "=", "{", "node", ":", "set", "(", "[", "p", "for", "(", "p", ",", "c", ")", "in", "pos_l", "]", ")", "for", "node", ",", "pos_l", "in", "valid_node2pos", ".", "items", "(", ")", "}", "\n", "self", ".", "valid_node_list", "=", "[", "node", "for", "node", ",", "pos", "in", "self", ".", "valid_node2pos", ".", "items", "(", ")", "if", "len", "(", "pos", ")", "]", "\n", "\n", "holdout_subgraph", "=", "self", ".", "_get_holdout_subgraph", "(", "graph_dataset", ".", "train_node_ids", "+", "graph_dataset", ".", "test_node_ids", ")", "\n", "test_node2pos", "=", "self", ".", "_find_insert_posistion", "(", "graph_dataset", ".", "test_node_ids", ",", "holdout_subgraph", ")", "\n", "self", ".", "test_node2pos", "=", "{", "node", ":", "set", "(", "[", "p", "for", "(", "p", ",", "c", ")", "in", "pos_l", "if", "c", "==", "self", ".", "pseudo_leaf_node", "]", ")", "for", "node", ",", "pos_l", "in", "test_node2pos", ".", "items", "(", ")", "}", "\n", "self", ".", "test_node2parent", "=", "{", "node", ":", "set", "(", "[", "p", "for", "(", "p", ",", "c", ")", "in", "pos_l", "]", ")", "for", "node", ",", "pos_l", "in", "test_node2pos", ".", "items", "(", ")", "}", "\n", "self", ".", "test_node_list", "=", "[", "node", "for", "node", ",", "pos", "in", "self", ".", "test_node2pos", ".", "items", "(", ")", "if", "len", "(", "pos", ")", "]", "\n", "\n", "# used for sampling negative positions during train/validation stage", "\n", "self", ".", "pointer", "=", "0", "\n", "self", ".", "all_nodes", "=", "list", "(", "self", ".", "core_subgraph", ".", "nodes", "(", ")", ")", "\n", "random", ".", "shuffle", "(", "self", ".", "all_nodes", ")", "\n", "\n", "# used for caching local subgraphs", "\n", "self", ".", "cache", "=", "{", "}", "# if g = self.cache[anchor_node], then g is the egonet centered on the anchor_node", "\n", "self", ".", "cache_counter", "=", "{", "}", "# if n = self.cache[anchor_node], then n is the number of times you used this cache", "\n", "\n", "self", ".", "node2root_path", "=", "self", ".", "_get_path_to_root", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "f\"Finish loading dataset ({end - start} seconds)\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset.__getitem__": [[1016, 1055], ["dataset.ExpanDataset._get_negative_anchors", "tuple", "len", "dataset.ExpanDataset._get_subgraph_and_node_pair", "dataset.ExpanDataset._get_edge_node_path", "res.append", "random.sample", "random.sample", "random.sample", "random.sample", "dataset.ExpanDataset._get_subgraph_and_node_pair", "dataset.ExpanDataset._get_edge_node_path", "res.append", "random.choice", "random.choice", "random.choice", "random.choice", "dataset.ExpanDataset._get_subgraph_and_node_pair", "dataset.ExpanDataset._get_edge_node_path", "res.append", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_negative_anchors", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph_and_node_pair", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_edge_node_path", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph_and_node_pair", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_edge_node_path", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph_and_node_pair", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_edge_node_path"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\" Generate an data instance based on train/validation/test mode.\n\n        One data instance is a list of (anchor_egonet, query_node_feature, label) triplets.\n\n        If self.sampling_mode == 0:\n            This list may contain more than one triplets with label = 1\n        If self.sampling_mode == 1:\n            This list contain one and ONLY one triplet with label = 1, others have label = 0\n        \"\"\"", "\n", "res", "=", "[", "]", "\n", "query_node", "=", "self", ".", "node_list", "[", "idx", "]", "\n", "\n", "# generate positive triplet(s)", "\n", "if", "self", ".", "sampling_mode", "==", "0", ":", "\n", "            ", "pos_positions", "=", "self", ".", "node2pos", "[", "query_node", "]", "\n", "if", "len", "(", "pos_positions", ")", ">", "self", ".", "max_pos_size", "and", "self", ".", "mode", "==", "'train'", ":", "\n", "                ", "pos_positions", "=", "random", ".", "sample", "(", "pos_positions", ",", "k", "=", "self", ".", "max_pos_size", ")", "\n", "", "for", "u", "in", "pos_positions", ":", "\n", "                ", "u_egonet", "=", "self", ".", "_get_subgraph_and_node_pair", "(", "query_node", ",", "u", ")", "\n", "u_path", ",", "lens", "=", "self", ".", "_get_edge_node_path", "(", "query_node", ",", "u", ")", "\n", "res", ".", "append", "(", "[", "u", ",", "u_egonet", ",", "u_path", ",", "lens", ",", "query_node", ",", "1", "]", ")", "\n", "", "", "elif", "self", ".", "sampling_mode", ">", "0", ":", "\n", "            ", "u", "=", "random", ".", "choice", "(", "self", ".", "node2pos", "[", "query_node", "]", ")", "\n", "u_egonet", "=", "self", ".", "_get_subgraph_and_node_pair", "(", "query_node", ",", "u", ")", "\n", "u_path", ",", "lens", "=", "self", ".", "_get_edge_node_path", "(", "query_node", ",", "u", ")", "\n", "res", ".", "append", "(", "[", "u", ",", "u_egonet", ",", "u_path", ",", "lens", ",", "query_node", ",", "1", "]", ")", "\n", "\n", "# select negative parents", "\n", "", "negative_size", "=", "len", "(", "res", ")", "if", "self", ".", "negative_size", "==", "-", "1", "else", "self", ".", "negative_size", "\n", "negative_anchors", "=", "self", ".", "_get_negative_anchors", "(", "query_node", ",", "negative_size", ")", "\n", "\n", "# generate negative triplets", "\n", "for", "u", "in", "negative_anchors", ":", "\n", "            ", "u_egonet", "=", "self", ".", "_get_subgraph_and_node_pair", "(", "query_node", ",", "u", ")", "\n", "u_path", ",", "lens", "=", "self", ".", "_get_edge_node_path", "(", "query_node", ",", "u", ")", "\n", "res", ".", "append", "(", "[", "u", ",", "u_egonet", ",", "u_path", ",", "lens", ",", "query_node", ",", "0", "]", ")", "\n", "\n", "", "return", "tuple", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_negative_anchors": [[1056, 1061], ["dataset.ExpanDataset._get_at_most_k_negatives", "dataset.ExpanDataset._get_exactly_k_negatives"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_at_most_k_negatives", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_exactly_k_negatives"], ["", "def", "_get_negative_anchors", "(", "self", ",", "query_node", ",", "negative_size", ")", ":", "\n", "        ", "if", "self", ".", "sampling_mode", "==", "0", ":", "\n", "            ", "return", "self", ".", "_get_at_most_k_negatives", "(", "query_node", ",", "negative_size", ")", "\n", "", "elif", "self", ".", "sampling_mode", "==", "1", ":", "\n", "            ", "return", "self", ".", "_get_exactly_k_negatives", "(", "query_node", ",", "negative_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_at_most_k_negatives": [[1062, 1078], ["random.shuffle", "random.shuffle", "random.shuffle", "random.shuffle", "len", "len"], "methods", ["None"], ["", "", "def", "_get_at_most_k_negatives", "(", "self", ",", "query_node", ",", "negative_size", ")", ":", "\n", "        ", "\"\"\" Generate AT MOST negative_size samples for the query node\n        \"\"\"", "\n", "if", "self", ".", "pointer", "==", "0", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "all_nodes", ")", "\n", "\n", "", "while", "True", ":", "\n", "            ", "negatives", "=", "[", "ele", "for", "ele", "in", "self", ".", "all_nodes", "[", "self", ".", "pointer", ":", "self", ".", "pointer", "+", "negative_size", "]", "if", "\n", "ele", "not", "in", "self", ".", "node2pos", "[", "query_node", "]", "]", "\n", "if", "len", "(", "negatives", ")", ">", "0", ":", "\n", "                ", "break", "\n", "", "self", ".", "pointer", "+=", "negative_size", "\n", "if", "self", ".", "pointer", ">=", "len", "(", "self", ".", "all_nodes", ")", ":", "\n", "                ", "self", ".", "pointer", "=", "0", "\n", "\n", "", "", "return", "negatives", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_exactly_k_negatives": [[1079, 1097], ["random.shuffle", "random.shuffle", "random.shuffle", "random.shuffle", "len", "negatives.extend", "len", "len", "len", "random.shuffle", "random.shuffle", "random.shuffle", "random.shuffle"], "methods", ["None"], ["", "def", "_get_exactly_k_negatives", "(", "self", ",", "query_node", ",", "negative_size", ",", "ignore", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\" Generate EXACTLY negative_size samples for the query node\n        \"\"\"", "\n", "if", "self", ".", "pointer", "==", "0", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "all_nodes", ")", "\n", "\n", "", "negatives", "=", "[", "]", "\n", "while", "len", "(", "negatives", ")", "!=", "negative_size", ":", "\n", "            ", "n_lack", "=", "negative_size", "-", "len", "(", "negatives", ")", "\n", "negatives", ".", "extend", "(", "[", "ele", "for", "ele", "in", "self", ".", "all_nodes", "[", "self", ".", "pointer", ":", "self", ".", "pointer", "+", "n_lack", "]", "if", "ele", "not", "in", "self", ".", "node2pos", "[", "query_node", "]", "and", "ele", "not", "in", "ignore", "]", ")", "\n", "self", ".", "pointer", "+=", "n_lack", "\n", "if", "self", ".", "pointer", ">=", "len", "(", "self", ".", "all_nodes", ")", ":", "\n", "                ", "self", ".", "pointer", "=", "0", "\n", "random", ".", "shuffle", "(", "self", ".", "all_nodes", ")", "\n", "", "", "if", "len", "(", "negatives", ")", ">", "negative_size", ":", "\n", "            ", "negatives", "=", "negatives", "[", ":", "negative_size", "]", "\n", "\n", "", "return", "negatives", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph_and_node_pair": [[1098, 1117], ["dataset.ExpanDataset._check_cache_flag", "dataset.ExpanDataset._get_subgraph"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.GraphDataset._check_cache_flag", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph"], ["", "def", "_get_subgraph_and_node_pair", "(", "self", ",", "query_node", ",", "anchor_node_u", ")", ":", "\n", "        ", "\"\"\" Generate anchor_egonet and obtain query_node feature\n\n        instance_mode: 0 means negative example, 1 means positive example\n        \"\"\"", "\n", "\n", "# [IMPORTANT]", "\n", "cache_flag", "=", "self", ".", "_check_cache_flag", "(", "anchor_node_u", ")", "\n", "flag", "=", "(", "query_node", "<", "0", ")", "or", "(", "anchor_node_u", "not", "in", "self", ".", "node2nbs", "[", "query_node", "]", ")", "\n", "if", "flag", "and", "cache_flag", ":", "\n", "            ", "g_u", "=", "self", ".", "cache", "[", "anchor_node_u", "]", "\n", "# self.cache_counter[anchor_node_u] += 1", "\n", "", "else", ":", "\n", "            ", "g_u", "=", "self", ".", "_get_subgraph", "(", "query_node", ",", "anchor_node_u", ",", "flag", ")", "\n", "if", "flag", ":", "# save to cache", "\n", "                ", "self", ".", "cache", "[", "anchor_node_u", "]", "=", "g_u", "\n", "self", ".", "cache_counter", "[", "anchor_node_u", "]", "=", "0", "\n", "\n", "", "", "return", "g_u", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph": [[1118, 1193], ["dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "dataset.add_edge_for_dgl", "dataset.add_edge_for_dgl", "dgl.DGLGraph.add_edges", "len", "list", "list", "dgl.DGLGraph.nodes", "dgl.DGLGraph.nodes", "len", "nodes.append", "nodes_pos.append", "len", "nodes.append", "nodes_pos.append", "nodes.extend", "nodes_pos.extend", "len", "nodes.append", "nodes_pos.append", "len", "nodes.append", "nodes_pos.append", "nodes.extend", "nodes_pos.extend", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "range", "len", "len", "dataset.ExpanDataset.core_subgraph.out_degree", "len", "len", "dataset.ExpanDataset.core_subgraph.out_degree", "len", "random.choices", "random.choices", "random.choices", "random.choices", "dataset.ExpanDataset.core_subgraph.predecessors", "len", "random.choices", "random.choices", "random.choices", "random.choices", "dataset.ExpanDataset.core_subgraph.predecessors", "len", "dataset.ExpanDataset.core_subgraph.successors", "random.choices", "random.choices", "random.choices", "random.choices", "dataset.ExpanDataset.core_subgraph.successors", "random.choices", "random.choices", "random.choices", "random.choices", "list", "list", "dataset.ExpanDataset.core_subgraph.successors", "dataset.ExpanDataset.core_subgraph.successors"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.add_edge_for_dgl", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.add_edge_for_dgl"], ["", "def", "_get_subgraph", "(", "self", ",", "query_node", ",", "anchor_node", ",", "instance_mode", ")", ":", "\n", "        ", "if", "instance_mode", ":", "# do not need to worry about query_node appears to be the child of anchor_node", "\n", "# parents of anchor node", "\n", "            ", "if", "anchor_node", "==", "self", ".", "pseudo_leaf_node", ":", "\n", "                ", "nodes", "=", "[", "n", "for", "n", "in", "random", ".", "choices", "(", "self", ".", "leaf_nodes", ",", "k", "=", "self", ".", "expand_factor", ")", "]", "\n", "nodes_pos", "=", "[", "0", "]", "*", "len", "(", "nodes", ")", "\n", "# anchor node itself", "\n", "parent_node_idx", "=", "len", "(", "nodes", ")", "\n", "nodes", ".", "append", "(", "anchor_node", ")", "\n", "nodes_pos", ".", "append", "(", "1", ")", "\n", "\n", "# # anchor node itself", "\n", "# parent_node_idx = 0", "\n", "# nodes = [anchor_node]", "\n", "# nodes_pos = [1]", "\n", "\n", "", "else", ":", "\n", "                ", "nodes", "=", "[", "n", "for", "n", "in", "self", ".", "core_subgraph", ".", "predecessors", "(", "anchor_node", ")", "]", "\n", "nodes_pos", "=", "[", "0", "]", "*", "len", "(", "nodes", ")", "\n", "# anchor node itself", "\n", "parent_node_idx", "=", "len", "(", "nodes", ")", "\n", "nodes", ".", "append", "(", "anchor_node", ")", "\n", "nodes_pos", ".", "append", "(", "1", ")", "\n", "# siblings of query node (i.e., children of anchor node)", "\n", "if", "self", ".", "core_subgraph", ".", "out_degree", "(", "anchor_node", ")", "<=", "self", ".", "expand_factor", ":", "\n", "                    ", "siblings", "=", "[", "n", "for", "n", "in", "self", ".", "core_subgraph", ".", "successors", "(", "anchor_node", ")", "if", "n", "!=", "self", ".", "pseudo_leaf_node", "]", "\n", "", "else", ":", "\n", "                    ", "siblings", "=", "[", "n", "for", "n", "in", "\n", "random", ".", "choices", "(", "list", "(", "self", ".", "core_subgraph", ".", "successors", "(", "anchor_node", ")", ")", ",", "k", "=", "self", ".", "expand_factor", ")", "\n", "if", "\n", "n", "!=", "self", ".", "pseudo_leaf_node", "]", "\n", "", "nodes", ".", "extend", "(", "siblings", ")", "\n", "nodes_pos", ".", "extend", "(", "[", "2", "]", "*", "len", "(", "siblings", ")", ")", "\n", "", "", "else", ":", "# remove query_node from the children set of anchor_node", "\n", "# TODO maybe include query node's neighbor", "\n", "            ", "if", "anchor_node", "==", "self", ".", "pseudo_leaf_node", ":", "\n", "                ", "nodes", "=", "[", "n", "for", "n", "in", "random", ".", "choices", "(", "self", ".", "leaf_nodes", ",", "k", "=", "self", ".", "expand_factor", ")", "if", "n", "!=", "query_node", "]", "\n", "nodes_pos", "=", "[", "0", "]", "*", "len", "(", "nodes", ")", "\n", "# anchor node itself", "\n", "parent_node_idx", "=", "len", "(", "nodes", ")", "\n", "nodes", ".", "append", "(", "anchor_node", ")", "\n", "nodes_pos", ".", "append", "(", "1", ")", "\n", "# parent_node_idx = 0", "\n", "# nodes = [anchor_node]", "\n", "# nodes_pos = [1]", "\n", "# parents of anchor node", "\n", "", "else", ":", "\n", "                ", "nodes", "=", "[", "n", "for", "n", "in", "self", ".", "core_subgraph", ".", "predecessors", "(", "anchor_node", ")", "if", "n", "!=", "query_node", "]", "\n", "nodes_pos", "=", "[", "0", "]", "*", "len", "(", "nodes", ")", "\n", "# anchor node itself", "\n", "parent_node_idx", "=", "len", "(", "nodes", ")", "\n", "nodes", ".", "append", "(", "anchor_node", ")", "\n", "nodes_pos", ".", "append", "(", "1", ")", "\n", "# siblings of query node (i.e., children of anchor node)", "\n", "if", "self", ".", "core_subgraph", ".", "out_degree", "(", "anchor_node", ")", "<=", "self", ".", "expand_factor", ":", "\n", "                    ", "siblings", "=", "[", "n", "for", "n", "in", "self", ".", "core_subgraph", ".", "successors", "(", "anchor_node", ")", "if", "\n", "n", "!=", "self", ".", "pseudo_leaf_node", "and", "n", "!=", "query_node", "]", "\n", "", "else", ":", "\n", "                    ", "siblings", "=", "[", "n", "for", "n", "in", "\n", "random", ".", "choices", "(", "list", "(", "self", ".", "core_subgraph", ".", "successors", "(", "anchor_node", ")", ")", ",", "k", "=", "self", ".", "expand_factor", ")", "\n", "if", "\n", "n", "!=", "self", ".", "pseudo_leaf_node", "and", "n", "!=", "query_node", "]", "\n", "", "nodes", ".", "extend", "(", "siblings", ")", "\n", "nodes_pos", ".", "extend", "(", "[", "2", "]", "*", "len", "(", "siblings", ")", ")", "\n", "\n", "# create dgl graph with features", "\n", "", "", "g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "g", ".", "add_nodes", "(", "len", "(", "nodes", ")", ",", "{", "\"_id\"", ":", "torch", ".", "tensor", "(", "nodes", ")", ",", "\"pos\"", ":", "torch", ".", "tensor", "(", "nodes_pos", ")", "}", ")", "\n", "add_edge_for_dgl", "(", "g", ",", "list", "(", "range", "(", "parent_node_idx", ")", ")", ",", "parent_node_idx", ")", "\n", "add_edge_for_dgl", "(", "g", ",", "parent_node_idx", ",", "list", "(", "range", "(", "parent_node_idx", "+", "1", ",", "len", "(", "nodes", ")", ")", ")", ")", "\n", "\n", "# add self-cycle", "\n", "g", ".", "add_edges", "(", "g", ".", "nodes", "(", ")", ",", "g", ".", "nodes", "(", ")", ")", "\n", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_edge_node_path": [[1194, 1202], ["len", "random.choice", "random.choice", "random.choice", "random.choice"], "methods", ["None"], ["", "def", "_get_edge_node_path", "(", "self", ",", "query_node", ",", "parent", ")", ":", "\n", "        ", "if", "parent", "==", "self", ".", "pseudo_leaf_node", ":", "\n", "            ", "pu", "=", "[", "self", ".", "pseudo_leaf_node", "]", "\n", "", "else", ":", "\n", "            ", "pu", "=", "random", ".", "choice", "(", "self", ".", "node2root_path", "[", "parent", "]", ")", "\n", "pu", "=", "[", "n", "for", "n", "in", "pu", "if", "n", "!=", "query_node", "]", "\n", "", "len_pu", "=", "len", "(", "pu", ")", "\n", "return", "pu", ",", "len_pu", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_batch_edge_node_path": [[1203, 1209], ["zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.max", "torch.tensor.max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "dataset.ExpanDataset._get_edge_node_path", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_edge_node_path"], ["", "def", "_get_batch_edge_node_path", "(", "self", ",", "edges", ")", ":", "\n", "        ", "bpu", ",", "lens", "=", "zip", "(", "*", "[", "self", ".", "_get_edge_node_path", "(", "None", ",", "edge", ")", "for", "edge", "in", "edges", "]", ")", "\n", "lens", "=", "torch", ".", "tensor", "(", "lens", ")", "\n", "max_u", "=", "lens", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "\n", "bpu", "=", "[", "p", "+", "[", "self", ".", "pseudo_leaf_node", "]", "*", "(", "max_u", "-", "len", "(", "p", ")", ")", "for", "p", "in", "bpu", "]", "\n", "return", "torch", ".", "tensor", "(", "bpu", ")", ",", "lens", "", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.add_edge_for_dgl": [[27, 33], ["g.add_edges", "isinstance", "isinstance", "len", "len"], "function", ["None"], ["def", "add_edge_for_dgl", "(", "g", ",", "n1", ",", "n2", ")", ":", "\n", "    ", "\"\"\"\n    https://github.com/dmlc/dgl/issues/1476 there is a bug in dgl add edges, so we need a wrapper\n    \"\"\"", "\n", "if", "not", "(", "(", "isinstance", "(", "n1", ",", "list", ")", "and", "len", "(", "n1", ")", "==", "0", ")", "or", "(", "isinstance", "(", "n2", ",", "list", ")", "and", "len", "(", "n2", ")", "==", "0", ")", ")", ":", "\n", "        ", "g", ".", "add_edges", "(", "n1", ",", "n2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.single_source_shortest_path_length": [[35, 79], ["nextlevel.update"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update"], ["", "", "def", "single_source_shortest_path_length", "(", "source", ",", "G", ",", "cutoff", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the shortest path lengths from source to all reachable nodes.\n\n    Parameters\n    ----------\n    G : NetworkX graph\n\n    source : node\n       Starting node for path\n\n    cutoff : integer, optional\n        Depth to stop the search. Only paths of length <= cutoff are returned.\n\n    Returns\n    -------\n    lengths : dictionary\n        Dictionary of shortest path lengths keyed by target.\n\n    Examples\n    --------\n    >>> G=nx.path_graph(5)\n    >>> length=nx.single_source_shortest_path_length(G,0)\n    >>> length[4]\n    4\n    >>> print(length)\n    {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}\n\n    See Also\n    --------\n    shortest_path_length\n    \"\"\"", "\n", "seen", "=", "{", "}", "# level (number of hops) when seen in BFS", "\n", "level", "=", "0", "# the current level", "\n", "nextlevel", "=", "{", "source", ":", "1", "}", "# dict of nodes to check at next level", "\n", "while", "nextlevel", ":", "\n", "        ", "thislevel", "=", "nextlevel", "# advance to next level", "\n", "nextlevel", "=", "{", "}", "# and start a new list (fringe)", "\n", "for", "v", "in", "thislevel", ":", "\n", "            ", "if", "v", "not", "in", "seen", ":", "\n", "                ", "seen", "[", "v", "]", "=", "level", "# set the level of vertex v", "\n", "nextlevel", ".", "update", "(", "G", "[", "v", "]", ")", "# add neighbors of v", "\n", "", "", "if", "(", "cutoff", "is", "not", "None", "and", "cutoff", "<=", "level", ")", ":", "break", "\n", "level", "=", "level", "+", "1", "\n", "", "return", "(", "source", ",", "seen", ")", "# return all path lengths as dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.parallel_all_pairs_shortest_path_length": [[81, 92], ["multiprocessing.Pool", "functools.partial", "mp.Pool.map", "mp.Pool.close", "mp.Pool.join"], "function", ["None"], ["", "def", "parallel_all_pairs_shortest_path_length", "(", "g", ",", "node_ids", ",", "num_workers", "=", "20", ")", ":", "\n", "# TODO This can be trivially parallelized.", "\n", "    ", "res", "=", "{", "}", "\n", "pool", "=", "mp", ".", "Pool", "(", "processes", "=", "num_workers", ")", "\n", "p", "=", "partial", "(", "single_source_shortest_path_length", ",", "G", "=", "g", ",", "cutoff", "=", "None", ")", "\n", "result_list", "=", "pool", ".", "map", "(", "p", ",", "node_ids", ")", "\n", "for", "result", "in", "result_list", ":", "\n", "        ", "res", "[", "result", "[", "0", "]", "]", "=", "result", "[", "1", "]", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.logger.visualization.WriterTensorboardX.__init__": [[6, 26], ["utils.Timer", "str", "importlib.import_module().SummaryWriter", "logger.warning", "importlib.import_module"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "logger", ",", "enable", ")", ":", "\n", "        ", "self", ".", "writer", "=", "None", "\n", "if", "enable", ":", "\n", "            ", "log_dir", "=", "str", "(", "log_dir", ")", "\n", "try", ":", "\n", "                ", "self", ".", "writer", "=", "importlib", ".", "import_module", "(", "'tensorboardX'", ")", ".", "SummaryWriter", "(", "log_dir", ")", "\n", "", "except", "ImportError", ":", "\n", "                ", "message", "=", "\"Warning: TensorboardX visualization is configured to use, but currently not installed on \"", "\"this machine. Please install the package by 'pip install tensorboardx' command or turn \"", "\"off the option in the 'config.json' file.\"", "\n", "logger", ".", "warning", "(", "message", ")", "\n", "", "", "self", ".", "step", "=", "0", "\n", "self", ".", "mode", "=", "''", "\n", "\n", "self", ".", "tb_writer_ftns", "=", "[", "\n", "'add_scalar'", ",", "'add_scalars'", ",", "'add_image'", ",", "'add_images'", ",", "'add_audio'", ",", "\n", "'add_text'", ",", "'add_histogram'", ",", "'add_pr_curve'", ",", "'add_embedding'", "\n", "]", "\n", "self", ".", "tag_mode_exceptions", "=", "[", "'add_histogram'", ",", "'add_embedding'", "]", "\n", "self", ".", "timer", "=", "Timer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.logger.visualization.WriterTensorboardX.set_step": [[27, 35], ["visualization.WriterTensorboardX.timer.reset", "visualization.WriterTensorboardX.timer.check", "visualization.WriterTensorboardX.add_scalar"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.Timer.reset", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.Timer.check"], ["", "def", "set_step", "(", "self", ",", "step", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "step", "=", "step", "\n", "if", "step", "==", "0", ":", "\n", "            ", "self", ".", "timer", ".", "reset", "(", ")", "\n", "", "else", ":", "\n", "            ", "duration", "=", "self", ".", "timer", ".", "check", "(", ")", "\n", "self", ".", "add_scalar", "(", "'steps_per_sec'", ",", "1", "/", "duration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.logger.visualization.WriterTensorboardX.__getattr__": [[36, 60], ["getattr", "object.__getattr__", "getattr.", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.logger.visualization.WriterTensorboardX.__getattr__"], ["", "", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        If visualization is configured to use:\n            return add_data() methods of tensorboard with additional information (step, tag) added.\n        Otherwise:\n            return a blank function handle that does nothing\n        \"\"\"", "\n", "if", "name", "in", "self", ".", "tb_writer_ftns", ":", "\n", "            ", "add_data", "=", "getattr", "(", "self", ".", "writer", ",", "name", ",", "None", ")", "\n", "\n", "def", "wrapper", "(", "tag", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "if", "add_data", "is", "not", "None", ":", "\n", "# add mode(train/valid) tag", "\n", "                    ", "if", "name", "not", "in", "self", ".", "tag_mode_exceptions", ":", "\n", "                        ", "tag", "=", "'{}/{}'", ".", "format", "(", "tag", ",", "self", ".", "mode", ")", "\n", "", "add_data", "(", "tag", ",", "data", ",", "self", ".", "step", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "wrapper", "\n", "", "else", ":", "\n", "# default action for returning methods defined in this class, set_step() for instance.", "\n", "            ", "try", ":", "\n", "                ", "attr", "=", "object", ".", "__getattr__", "(", "name", ")", "\n", "", "except", "AttributeError", ":", "\n", "                ", "raise", "AttributeError", "(", "\"type object 'WriterTensorboardX' has no attribute '{}'\"", ".", "format", "(", "name", ")", ")", "\n", "", "return", "attr", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.logger.logger.setup_logging": [[7, 23], ["pathlib.Path", "pathlib.Path.is_file", "utils.read_json", "config[].items", "logging.config.dictConfig", "logging.config.dictConfig", "print", "logging.basicConfig", "logging.basicConfig", "str"], "function", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.utils.util.read_json"], ["def", "setup_logging", "(", "save_dir", ",", "log_config", "=", "'logger/logger_config.json'", ",", "default_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"\n    Setup logging configuration\n    \"\"\"", "\n", "log_config", "=", "Path", "(", "log_config", ")", "\n", "if", "log_config", ".", "is_file", "(", ")", ":", "\n", "        ", "config", "=", "read_json", "(", "log_config", ")", "\n", "# modify logging paths based on run config", "\n", "for", "_", ",", "handler", "in", "config", "[", "'handlers'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "'filename'", "in", "handler", ":", "\n", "                ", "handler", "[", "'filename'", "]", "=", "str", "(", "save_dir", "/", "handler", "[", "'filename'", "]", ")", "\n", "\n", "", "", "logging", ".", "config", ".", "dictConfig", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Warning: logging configuration file is not found in {}.\"", ".", "format", "(", "log_config", ")", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "default_level", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.Trainer.__init__": [[38, 54], ["base.BaseTrainer.__init__", "config[].startswith", "config[].startswith", "trainer.Trainer.writer.add_text", "trainer.Trainer.writer.add_text", "trainer.Trainer.writer.add_text", "trainer.Trainer.writer.add_text", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "loss", ",", "metrics", ",", "pre_metric", ",", "optimizer", ",", "config", ",", "data_loader", ",", "lr_scheduler", "=", "None", ")", ":", "\n", "        ", "super", "(", "Trainer", ",", "self", ")", ".", "__init__", "(", "model", ",", "loss", ",", "metrics", ",", "optimizer", ",", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "test_batch_size", "=", "config", "[", "'trainer'", "]", "[", "'test_batch_size'", "]", "\n", "self", ".", "is_infonce_training", "=", "config", "[", "'loss'", "]", ".", "startswith", "(", "\"info_nce\"", ")", "\n", "self", ".", "is_focal_loss", "=", "config", "[", "'loss'", "]", ".", "startswith", "(", "\"FocalLoss\"", ")", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "do_validation", "=", "True", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", "\n", "self", ".", "lr_scheduler_mode", "=", "self", ".", "config", "[", "'lr_scheduler'", "]", "[", "'args'", "]", "[", "'mode'", "]", "# \"min\" or \"max\"", "\n", "self", ".", "log_step", "=", "len", "(", "data_loader", ")", "//", "5", "\n", "self", ".", "pre_metric", "=", "pre_metric", "\n", "self", ".", "writer", ".", "add_text", "(", "'Text'", ",", "'Model Architecture: {}'", ".", "format", "(", "self", ".", "config", "[", "'arch'", "]", ")", ",", "0", ")", "\n", "self", ".", "writer", ".", "add_text", "(", "'Text'", ",", "'Training Data Loader: {}'", ".", "format", "(", "self", ".", "config", "[", "'train_data_loader'", "]", ")", ",", "0", ")", "\n", "self", ".", "writer", ".", "add_text", "(", "'Text'", ",", "'Loss Function: {}'", ".", "format", "(", "self", ".", "config", "[", "'loss'", "]", ")", ",", "0", ")", "\n", "self", ".", "writer", ".", "add_text", "(", "'Text'", ",", "'Optimizer: {}'", ".", "format", "(", "self", ".", "config", "[", "'optimizer'", "]", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.Trainer._eval_metrics": [[55, 62], ["numpy.zeros", "trainer.Trainer.pre_metric", "enumerate", "len", "metric", "trainer.Trainer.writer.add_scalar"], "methods", ["None"], ["", "def", "_eval_metrics", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "acc_metrics", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "metrics", ")", ")", "\n", "all_ranks", "=", "self", ".", "pre_metric", "(", "output", ",", "target", ")", "\n", "for", "i", ",", "metric", "in", "enumerate", "(", "self", ".", "metrics", ")", ":", "\n", "            ", "acc_metrics", "[", "i", "]", "+=", "metric", "(", "all_ranks", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'{}'", ".", "format", "(", "metric", ".", "__name__", ")", ",", "acc_metrics", "[", "i", "]", ")", "\n", "", "return", "acc_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.TrainerS.__init__": [[72, 90], ["trainer.Trainer.__init__", "len", "set", "list", "max", "sorted", "itertools.chain.from_iterable", "set().difference", "random.sample", "list", "list", "dataset._get_subgraph_and_node_pair", "dataset.valid_node2pos.values", "len", "tqdm.tqdm.tqdm", "set"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph_and_node_pair"], ["def", "__init__", "(", "self", ",", "mode", ",", "model", ",", "loss", ",", "metrics", ",", "pre_metric", ",", "optimizer", ",", "config", ",", "data_loader", ",", "lr_scheduler", "=", "None", ")", ":", "\n", "        ", "super", "(", "TrainerS", ",", "self", ")", ".", "__init__", "(", "model", ",", "loss", ",", "metrics", ",", "pre_metric", ",", "optimizer", ",", "config", ",", "data_loader", ",", "lr_scheduler", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "dataset", "=", "self", ".", "data_loader", ".", "dataset", "\n", "self", ".", "candidate_positions", "=", "data_loader", ".", "dataset", ".", "all_edges", "\n", "if", "len", "(", "self", ".", "candidate_positions", ")", ">", "MAX_CANDIDATE_NUM", ":", "\n", "            ", "valid_pos", "=", "set", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "dataset", ".", "valid_node2pos", ".", "values", "(", ")", ")", ")", "\n", "valid_neg", "=", "list", "(", "set", "(", "self", ".", "candidate_positions", ")", ".", "difference", "(", "valid_pos", ")", ")", "\n", "valid_sample_size", "=", "max", "(", "MAX_CANDIDATE_NUM", "-", "len", "(", "valid_pos", ")", ",", "0", ")", "\n", "self", ".", "valid_candidate_positions", "=", "random", ".", "sample", "(", "valid_neg", ",", "valid_sample_size", ")", "+", "list", "(", "valid_pos", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "valid_candidate_positions", "=", "self", ".", "candidate_positions", "\n", "", "self", ".", "valid_candidate_positions", "=", "self", ".", "candidate_positions", "\n", "\n", "if", "'g'", "in", "mode", ":", "\n", "            ", "self", ".", "all_nodes", "=", "sorted", "(", "list", "(", "dataset", ".", "core_subgraph", ".", "nodes", ")", ")", "\n", "self", ".", "edge2subgraph", "=", "{", "e", ":", "dataset", ".", "_get_subgraph_and_node_pair", "(", "-", "1", ",", "e", "[", "0", "]", ",", "e", "[", "1", "]", ")", "for", "e", "in", "tqdm", "(", "self", ".", "candidate_positions", ",", "desc", "=", "'collecting nodegraph'", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.TrainerS._train_epoch": [[91, 138], ["trainer.TrainerS.model.train", "enumerate", "trainer.TrainerS.optimizer.zero_grad", "trainer.TrainerS.model", "label[].to", "trainer.TrainerS.backward", "trainer.TrainerS.optimizer.step", "trainer.TrainerS.item", "isinstance", "label[].to.sum().detach", "prediction.reshape.reshape.reshape", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "trainer.TrainerS.loss", "trainer.TrainerS.loss", "trainer.TrainerS.logger.debug", "len", "trainer.TrainerS._test", "trainer.TrainerS.lr_scheduler.step", "trainer.TrainerS.lr_scheduler.step", "trainer.TrainerS.lr_scheduler.step", "label[].to.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "trainer.TrainerS.item", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.DistMarginLoss.loss", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.DistMarginLoss.loss", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._test"], ["", "", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "total_loss", "=", "0", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "data_loader", ")", ":", "\n", "            ", "nf", ",", "label", ",", "u", ",", "v", ",", "bgu", ",", "bgv", ",", "bpu", ",", "bpv", ",", "lens", "=", "batch", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "prediction", "=", "self", ".", "model", "(", "nf", ",", "u", ",", "v", ",", "bgu", ",", "bgv", ",", "bpu", ",", "bpv", ",", "lens", ")", "\n", "label", "=", "label", "[", ":", ",", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "is_infonce_training", ":", "\n", "                ", "n_batches", "=", "label", ".", "sum", "(", ")", ".", "detach", "(", ")", "\n", "prediction", "=", "prediction", ".", "reshape", "(", "n_batches", ",", "-", "1", ")", "\n", "target", "=", "torch", ".", "zeros", "(", "n_batches", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "loss", "=", "self", ".", "loss", "(", "prediction", ",", "target", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "loss", "(", "prediction", ",", "label", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "batch_idx", "%", "self", ".", "log_step", "==", "0", "or", "batch_idx", "==", "len", "(", "self", ".", "data_loader", ")", "-", "1", ":", "\n", "                ", "self", ".", "logger", ".", "debug", "(", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)] Loss: {:.4f}'", ".", "format", "(", "\n", "epoch", ",", "\n", "batch_idx", "*", "self", ".", "data_loader", ".", "batch_size", ",", "\n", "self", ".", "data_loader", ".", "n_samples", ",", "\n", "100.0", "*", "batch_idx", "/", "len", "(", "self", ".", "data_loader", ")", ",", "\n", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "log", "=", "{", "'loss'", ":", "total_loss", "/", "len", "(", "self", ".", "data_loader", ")", "}", "\n", "\n", "## Validation stage", "\n", "if", "self", ".", "do_validation", ":", "\n", "            ", "val_log", "=", "{", "'val_metrics'", ":", "self", ".", "_test", "(", "'validation'", ")", "}", "\n", "log", "=", "{", "**", "log", ",", "**", "val_log", "}", "\n", "\n", "", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "lr_scheduler", ",", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", ")", ":", "\n", "                ", "if", "self", ".", "lr_scheduler_mode", "==", "\"min\"", ":", "\n", "                    ", "self", ".", "lr_scheduler", ".", "step", "(", "log", "[", "'val_metrics'", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "lr_scheduler", ".", "step", "(", "log", "[", "'val_metrics'", "]", "[", "-", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.TrainerS._test": [[139, 197], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "model.eval", "trainer.TrainerS.model.cpu", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "trainer.TrainerS.logger.info", "more_itertools.sliced", "list", "trainer.TrainerS.model.forward_encoders", "batched_model.append", "batched_positions.append", "enumerate", "node_features[].to", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trainer.rearrange", "all_ranks.extend", "metric", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "zip", "dataset._get_batch_edge_node_path", "len", "node_features[].to.expand", "ur.to.to.to", "vr.to.to.to", "model.match", "torch.cat.append", "torch.cat.append", "trainer.TrainerS.pre_metric", "ur.to.to.detach().cpu", "vr.to.to.detach().cpu", "len", "ur.to.to.detach", "vr.to.to.detach"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.ExpanMatchModel.forward_encoders", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.rearrange", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_batch_edge_node_path"], ["", "def", "_test", "(", "self", ",", "mode", ",", "gpu", "=", "True", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "'test'", ",", "'validation'", "]", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", "=", "self", ".", "model", "if", "gpu", "else", "self", ".", "model", ".", "cpu", "(", ")", "\n", "\n", "batch_size", "=", "self", ".", "test_batch_size", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "dataset", "=", "self", ".", "data_loader", ".", "dataset", "\n", "node_features", "=", "dataset", ".", "node_features", "\n", "if", "mode", "==", "'test'", ":", "\n", "                ", "vocab", "=", "dataset", ".", "test_node_list", "\n", "node2pos", "=", "dataset", ".", "test_node2pos", "\n", "candidate_positions", "=", "self", ".", "candidate_positions", "\n", "self", ".", "logger", ".", "info", "(", "f'number of candidate positions: {len(candidate_positions)}'", ")", "\n", "", "else", ":", "\n", "                ", "vocab", "=", "dataset", ".", "valid_node_list", "\n", "node2pos", "=", "dataset", ".", "valid_node2pos", "\n", "candidate_positions", "=", "self", ".", "valid_candidate_positions", "\n", "", "batched_model", "=", "[", "]", "# save the CPU graph representation", "\n", "batched_positions", "=", "[", "]", "\n", "for", "edges", "in", "tqdm", "(", "mit", ".", "sliced", "(", "candidate_positions", ",", "batch_size", ")", ",", "desc", "=", "\"Generating graph encoding ...\"", ")", ":", "\n", "                ", "edges", "=", "list", "(", "edges", ")", "\n", "us", ",", "vs", ",", "bgu", ",", "bgv", ",", "bpu", ",", "bpv", ",", "lens", "=", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "if", "'r'", "in", "self", ".", "mode", ":", "\n", "                    ", "us", ",", "vs", "=", "zip", "(", "*", "edges", ")", "\n", "us", "=", "torch", ".", "tensor", "(", "us", ")", "\n", "vs", "=", "torch", ".", "tensor", "(", "vs", ")", "\n", "", "if", "'g'", "in", "self", ".", "mode", ":", "\n", "                    ", "bgs", "=", "[", "self", ".", "edge2subgraph", "[", "e", "]", "for", "e", "in", "edges", "]", "\n", "bgu", ",", "bgv", "=", "zip", "(", "*", "bgs", ")", "\n", "", "if", "'p'", "in", "self", ".", "mode", ":", "\n", "                    ", "bpu", ",", "bpv", ",", "lens", "=", "dataset", ".", "_get_batch_edge_node_path", "(", "edges", ")", "\n", "bpu", "=", "bpu", "\n", "bpv", "=", "bpv", "\n", "lens", "=", "lens", "\n", "\n", "", "ur", ",", "vr", "=", "self", ".", "model", ".", "forward_encoders", "(", "us", ",", "vs", ",", "bgu", ",", "bgv", ",", "bpu", ",", "bpv", ",", "lens", ")", "\n", "batched_model", ".", "append", "(", "(", "ur", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "vr", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "batched_positions", ".", "append", "(", "len", "(", "edges", ")", ")", "\n", "\n", "# start per query prediction", "\n", "", "all_ranks", "=", "[", "]", "\n", "for", "i", ",", "query", "in", "tqdm", "(", "enumerate", "(", "vocab", ")", ",", "desc", "=", "'testing'", ")", ":", "\n", "                ", "batched_energy_scores", "=", "[", "]", "\n", "nf", "=", "node_features", "[", "query", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "(", "ur", ",", "vr", ")", ",", "n_position", "in", "zip", "(", "batched_model", ",", "batched_positions", ")", ":", "\n", "                    ", "expanded_nf", "=", "nf", ".", "expand", "(", "n_position", ",", "-", "1", ")", "\n", "ur", "=", "ur", ".", "to", "(", "self", ".", "device", ")", "\n", "vr", "=", "vr", ".", "to", "(", "self", ".", "device", ")", "\n", "energy_scores", "=", "model", ".", "match", "(", "ur", ",", "vr", ",", "expanded_nf", ")", "\n", "batched_energy_scores", ".", "append", "(", "energy_scores", ")", "\n", "", "batched_energy_scores", "=", "torch", ".", "cat", "(", "batched_energy_scores", ")", "\n", "batched_energy_scores", ",", "labels", "=", "rearrange", "(", "batched_energy_scores", ",", "candidate_positions", ",", "node2pos", "[", "query", "]", ")", "\n", "all_ranks", ".", "extend", "(", "self", ".", "pre_metric", "(", "batched_energy_scores", ",", "labels", ")", ")", "\n", "", "total_metrics", "=", "[", "metric", "(", "all_ranks", ")", "for", "metric", "in", "self", ".", "metrics", "]", "\n", "", "return", "total_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.TrainerT.__init__": [[207, 212], ["trainer.TrainerS.__init__"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "mode", ",", "model", ",", "loss", ",", "metrics", ",", "pre_metric", ",", "optimizer", ",", "config", ",", "data_loader", ",", "lr_scheduler", "=", "None", ")", ":", "\n", "        ", "super", "(", "TrainerT", ",", "self", ")", ".", "__init__", "(", "mode", ",", "model", ",", "loss", ",", "metrics", ",", "pre_metric", ",", "optimizer", ",", "config", ",", "data_loader", ",", "lr_scheduler", ")", "\n", "self", ".", "l1", "=", "config", "[", "'trainer'", "]", "[", "'l1'", "]", "\n", "self", ".", "l2", "=", "config", "[", "'trainer'", "]", "[", "'l2'", "]", "\n", "self", ".", "l3", "=", "config", "[", "'trainer'", "]", "[", "'l3'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.TrainerT._train_epoch": [[213, 255], ["trainer.TrainerT.model.train", "enumerate", "trainer.TrainerT.optimizer.zero_grad", "trainer.TrainerT.model", "label.to.to.to", "trainer.TrainerT.loss", "trainer.TrainerT.loss", "trainer.TrainerT.loss", "loss.backward", "trainer.TrainerT.optimizer.step", "loss.item", "isinstance", "trainer.TrainerT.logger.debug", "len", "trainer.TrainerT._test", "trainer.TrainerT.lr_scheduler.step", "trainer.TrainerT.lr_scheduler.step", "trainer.TrainerT.lr_scheduler.step", "trainer.TrainerT.loss", "len", "loss.item", "trainer.TrainerT.item", "trainer.TrainerT.item", "trainer.TrainerT.item", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.DistMarginLoss.loss", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.DistMarginLoss.loss", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.DistMarginLoss.loss", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._test", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.DistMarginLoss.loss"], ["", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "total_loss", "=", "0", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "data_loader", ")", ":", "\n", "            ", "nf", ",", "label", ",", "u", ",", "v", ",", "bgu", ",", "bgv", ",", "bpu", ",", "bpv", ",", "lens", "=", "batch", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "scores", ",", "scores_p", ",", "scores_c", ",", "scores_e", "=", "self", ".", "model", "(", "nf", ",", "u", ",", "v", ",", "bgu", ",", "bgv", ",", "bpu", ",", "bpv", ",", "lens", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "loss_p", "=", "self", ".", "loss", "(", "scores_p", ",", "label", "[", ":", ",", "1", "]", ")", "\n", "loss_c", "=", "self", ".", "loss", "(", "scores_c", ",", "label", "[", ":", ",", "2", "]", ")", "\n", "loss_e", "=", "self", ".", "loss", "(", "scores_e", ",", "label", "[", ":", ",", "0", "]", ")", "\n", "loss", "=", "self", ".", "loss", "(", "scores", ",", "label", "[", ":", ",", "0", "]", ")", "+", "self", ".", "l1", "*", "loss_p", "+", "self", ".", "l2", "*", "loss_c", "+", "self", ".", "l3", "*", "loss_e", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "batch_idx", "%", "self", ".", "log_step", "==", "0", "or", "batch_idx", "==", "len", "(", "self", ".", "data_loader", ")", "-", "1", ":", "\n", "                ", "self", ".", "logger", ".", "debug", "(", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)] Loss: {:.6f} ELoss: {:.6f} PLoss: {:.6f} CLoss: {:.6f}'", "\n", ".", "format", "(", "epoch", ",", "batch_idx", "*", "self", ".", "data_loader", ".", "batch_size", ",", "self", ".", "data_loader", ".", "n_samples", ",", "\n", "100.0", "*", "batch_idx", "/", "len", "(", "self", ".", "data_loader", ")", ",", "\n", "loss", ".", "item", "(", ")", ",", "loss_e", ".", "item", "(", ")", ",", "loss_p", ".", "item", "(", ")", ",", "loss_c", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "log", "=", "{", "'loss'", ":", "total_loss", "/", "len", "(", "self", ".", "data_loader", ")", "}", "\n", "\n", "## Validation stage", "\n", "if", "self", ".", "do_validation", ":", "\n", "            ", "val_log", "=", "{", "'val_metrics'", ":", "self", ".", "_test", "(", "'validation'", ")", "}", "\n", "log", "=", "{", "**", "log", ",", "**", "val_log", "}", "\n", "\n", "", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "lr_scheduler", ",", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", ")", ":", "\n", "                ", "if", "self", ".", "lr_scheduler_mode", "==", "\"min\"", ":", "\n", "                    ", "self", ".", "lr_scheduler", ".", "step", "(", "log", "[", "'val_metrics'", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "lr_scheduler", ".", "step", "(", "log", "[", "'val_metrics'", "]", "[", "-", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.TrainerTExpan.__init__": [[264, 283], ["trainer.Trainer.__init__", "list", "set", "set", "set", "sorted", "dataset.valid_node2pos.items", "dataset.test_node2pos.items", "trainer.TrainerTExpan.valid_node2pos.items", "len", "trainer.TrainerTExpan.test_node2pos.items", "len", "list", "dataset._get_subgraph_and_node_pair", "tqdm.tqdm.tqdm"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph_and_node_pair"], ["def", "__init__", "(", "self", ",", "mode", ",", "model", ",", "loss", ",", "metrics", ",", "pre_metric", ",", "optimizer", ",", "config", ",", "data_loader", ",", "lr_scheduler", "=", "None", ")", ":", "\n", "        ", "super", "(", "TrainerTExpan", ",", "self", ")", ".", "__init__", "(", "model", ",", "loss", ",", "metrics", ",", "pre_metric", ",", "optimizer", ",", "config", ",", "data_loader", ",", "lr_scheduler", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "self", ".", "l1", "=", "config", "[", "'trainer'", "]", "[", "'l1'", "]", "\n", "self", ".", "l2", "=", "config", "[", "'trainer'", "]", "[", "'l2'", "]", "\n", "self", ".", "l3", "=", "config", "[", "'trainer'", "]", "[", "'l3'", "]", "\n", "\n", "dataset", "=", "self", ".", "data_loader", ".", "dataset", "\n", "self", ".", "pseudo_leaf", "=", "dataset", ".", "pseudo_leaf_node", "\n", "self", ".", "candidate_positions", "=", "list", "(", "set", "(", "[", "(", "p", ",", "c", ")", "for", "(", "p", ",", "c", ")", "in", "data_loader", ".", "dataset", ".", "all_edges", "if", "c", "==", "self", ".", "pseudo_leaf", "]", ")", ")", "\n", "self", ".", "valid_node2pos", "=", "{", "node", ":", "set", "(", "[", "(", "p", ",", "c", ")", "for", "(", "p", ",", "c", ")", "in", "pos_l", "if", "c", "==", "self", ".", "pseudo_leaf", "]", ")", "for", "node", ",", "pos_l", "in", "dataset", ".", "valid_node2pos", ".", "items", "(", ")", "}", "\n", "self", ".", "test_node2pos", "=", "{", "node", ":", "set", "(", "[", "(", "p", ",", "c", ")", "for", "(", "p", ",", "c", ")", "in", "pos_l", "if", "c", "==", "self", ".", "pseudo_leaf", "]", ")", "for", "node", ",", "pos_l", "in", "dataset", ".", "test_node2pos", ".", "items", "(", ")", "}", "\n", "self", ".", "valid_vocab", "=", "[", "node", "for", "node", ",", "pos", "in", "self", ".", "valid_node2pos", ".", "items", "(", ")", "if", "len", "(", "pos", ")", "]", "\n", "self", ".", "test_vocab", "=", "[", "node", "for", "node", ",", "pos", "in", "self", ".", "test_node2pos", ".", "items", "(", ")", "if", "len", "(", "pos", ")", "]", "\n", "\n", "if", "'g'", "in", "mode", ":", "\n", "            ", "self", ".", "all_nodes", "=", "sorted", "(", "list", "(", "dataset", ".", "core_subgraph", ".", "nodes", ")", ")", "\n", "self", ".", "edge2subgraph", "=", "{", "e", ":", "dataset", ".", "_get_subgraph_and_node_pair", "(", "-", "1", ",", "e", "[", "0", "]", ",", "e", "[", "1", "]", ")", "for", "e", "in", "tqdm", "(", "self", ".", "candidate_positions", ",", "desc", "=", "'collecting nodegraph'", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.TrainerTExpan._train_epoch": [[284, 326], ["trainer.TrainerTExpan.model.train", "enumerate", "trainer.TrainerTExpan.optimizer.zero_grad", "trainer.TrainerTExpan.model", "label.to.to.to", "trainer.TrainerTExpan.loss", "trainer.TrainerTExpan.loss", "trainer.TrainerTExpan.loss", "loss.backward", "trainer.TrainerTExpan.optimizer.step", "loss.item", "isinstance", "trainer.TrainerTExpan.logger.debug", "len", "trainer.TrainerTExpan._test", "trainer.TrainerTExpan.lr_scheduler.step", "trainer.TrainerTExpan.lr_scheduler.step", "trainer.TrainerTExpan.lr_scheduler.step", "trainer.TrainerTExpan.loss", "len", "loss.item", "trainer.TrainerTExpan.item", "trainer.TrainerTExpan.item", "trainer.TrainerTExpan.item", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.DistMarginLoss.loss", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.DistMarginLoss.loss", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.DistMarginLoss.loss", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._test", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.DistMarginLoss.loss"], ["", "", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "total_loss", "=", "0", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "data_loader", ")", ":", "\n", "            ", "nf", ",", "label", ",", "u", ",", "v", ",", "bgu", ",", "bgv", ",", "bpu", ",", "bpv", ",", "lens", "=", "batch", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "scores", ",", "scores_p", ",", "scores_c", ",", "scores_e", "=", "self", ".", "model", "(", "nf", ",", "u", ",", "v", ",", "bgu", ",", "bgv", ",", "bpu", ",", "bpv", ",", "lens", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "loss_p", "=", "self", ".", "loss", "(", "scores_p", ",", "label", "[", ":", ",", "1", "]", ")", "\n", "loss_c", "=", "self", ".", "loss", "(", "scores_c", ",", "label", "[", ":", ",", "2", "]", ")", "\n", "loss_e", "=", "self", ".", "loss", "(", "scores_e", ",", "label", "[", ":", ",", "0", "]", ")", "\n", "loss", "=", "self", ".", "loss", "(", "scores", ",", "label", "[", ":", ",", "0", "]", ")", "+", "self", ".", "l1", "*", "loss_p", "+", "self", ".", "l2", "*", "loss_c", "+", "self", ".", "l3", "*", "loss_e", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "batch_idx", "%", "self", ".", "log_step", "==", "0", "or", "batch_idx", "==", "len", "(", "self", ".", "data_loader", ")", "-", "1", ":", "\n", "                ", "self", ".", "logger", ".", "debug", "(", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)] Loss: {:.6f} ELoss: {:.6f} PLoss: {:.6f} CLoss: {:.6f}'", "\n", ".", "format", "(", "epoch", ",", "batch_idx", "*", "self", ".", "data_loader", ".", "batch_size", ",", "self", ".", "data_loader", ".", "n_samples", ",", "\n", "100.0", "*", "batch_idx", "/", "len", "(", "self", ".", "data_loader", ")", ",", "\n", "loss", ".", "item", "(", ")", ",", "loss_e", ".", "item", "(", ")", ",", "loss_p", ".", "item", "(", ")", ",", "loss_c", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "log", "=", "{", "'loss'", ":", "total_loss", "/", "len", "(", "self", ".", "data_loader", ")", "}", "\n", "\n", "## Validation stage", "\n", "if", "self", ".", "do_validation", ":", "\n", "            ", "val_log", "=", "{", "'val_metrics'", ":", "self", ".", "_test", "(", "'validation'", ")", "}", "\n", "log", "=", "{", "**", "log", ",", "**", "val_log", "}", "\n", "\n", "", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "lr_scheduler", ",", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", ")", ":", "\n", "                ", "if", "self", ".", "lr_scheduler_mode", "==", "\"min\"", ":", "\n", "                    ", "self", ".", "lr_scheduler", ".", "step", "(", "log", "[", "'val_metrics'", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "lr_scheduler", ".", "step", "(", "log", "[", "'val_metrics'", "]", "[", "-", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.TrainerTExpan._test": [[327, 384], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "model.eval", "trainer.TrainerTExpan.model.cpu", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "more_itertools.sliced", "list", "trainer.TrainerTExpan.model.forward_encoders", "batched_model.append", "batched_positions.append", "enumerate", "node_features[].to", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trainer.rearrange", "all_ranks.extend", "metric", "zip", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "zip", "dataset._get_batch_edge_node_path", "len", "node_features[].to.expand", "ur.to.to.to", "vr.to.to.to", "model.match", "torch.cat.append", "torch.cat.append", "trainer.TrainerTExpan.pre_metric", "ur.to.to.detach().cpu", "vr.to.to.detach().cpu", "ur.to.to.detach", "vr.to.to.detach"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.ExpanMatchModel.forward_encoders", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.rearrange", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_batch_edge_node_path"], ["", "def", "_test", "(", "self", ",", "mode", ",", "gpu", "=", "True", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "'test'", ",", "'validation'", "]", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", "=", "self", ".", "model", "if", "gpu", "else", "self", ".", "model", ".", "cpu", "(", ")", "\n", "\n", "batch_size", "=", "self", ".", "test_batch_size", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "dataset", "=", "self", ".", "data_loader", ".", "dataset", "\n", "node_features", "=", "dataset", ".", "node_features", "\n", "if", "mode", "==", "'test'", ":", "\n", "                ", "vocab", "=", "self", ".", "test_vocab", "\n", "node2pos", "=", "self", ".", "test_node2pos", "\n", "", "else", ":", "\n", "                ", "vocab", "=", "self", ".", "valid_vocab", "\n", "node2pos", "=", "self", ".", "valid_node2pos", "\n", "", "candidate_positions", "=", "self", ".", "candidate_positions", "\n", "batched_model", "=", "[", "]", "# save the CPU graph representation", "\n", "batched_positions", "=", "[", "]", "\n", "for", "edges", "in", "tqdm", "(", "mit", ".", "sliced", "(", "candidate_positions", ",", "batch_size", ")", ",", "desc", "=", "\"Generating graph encoding ...\"", ")", ":", "\n", "                ", "edges", "=", "list", "(", "edges", ")", "\n", "us", ",", "vs", ",", "bgu", ",", "bgv", ",", "bpu", ",", "bpv", ",", "lens", "=", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "if", "'r'", "in", "self", ".", "mode", ":", "\n", "                    ", "us", ",", "vs", "=", "zip", "(", "*", "edges", ")", "\n", "us", "=", "torch", ".", "tensor", "(", "us", ")", "\n", "vs", "=", "torch", ".", "tensor", "(", "vs", ")", "\n", "", "if", "'g'", "in", "self", ".", "mode", ":", "\n", "                    ", "bgs", "=", "[", "self", ".", "edge2subgraph", "[", "e", "]", "for", "e", "in", "edges", "]", "\n", "bgu", ",", "bgv", "=", "zip", "(", "*", "bgs", ")", "\n", "", "if", "'p'", "in", "self", ".", "mode", ":", "\n", "                    ", "bpu", ",", "bpv", ",", "lens", "=", "dataset", ".", "_get_batch_edge_node_path", "(", "edges", ")", "\n", "bpu", "=", "bpu", "\n", "bpv", "=", "bpv", "\n", "lens", "=", "lens", "\n", "\n", "", "ur", ",", "vr", "=", "self", ".", "model", ".", "forward_encoders", "(", "us", ",", "vs", ",", "bgu", ",", "bgv", ",", "bpu", ",", "bpv", ",", "lens", ")", "\n", "batched_model", ".", "append", "(", "(", "ur", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "vr", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", "batched_positions", ".", "append", "(", "len", "(", "edges", ")", ")", "\n", "\n", "# start per query prediction", "\n", "", "all_ranks", "=", "[", "]", "\n", "for", "i", ",", "query", "in", "tqdm", "(", "enumerate", "(", "vocab", ")", ",", "desc", "=", "'testing'", ")", ":", "\n", "                ", "batched_energy_scores", "=", "[", "]", "\n", "nf", "=", "node_features", "[", "query", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "(", "ur", ",", "vr", ")", ",", "n_position", "in", "zip", "(", "batched_model", ",", "batched_positions", ")", ":", "\n", "                    ", "expanded_nf", "=", "nf", ".", "expand", "(", "n_position", ",", "-", "1", ")", "\n", "ur", "=", "ur", ".", "to", "(", "self", ".", "device", ")", "\n", "vr", "=", "vr", ".", "to", "(", "self", ".", "device", ")", "\n", "energy_scores", "=", "model", ".", "match", "(", "ur", ",", "vr", ",", "expanded_nf", ")", "\n", "batched_energy_scores", ".", "append", "(", "energy_scores", ")", "\n", "", "batched_energy_scores", "=", "torch", ".", "cat", "(", "batched_energy_scores", ")", "\n", "batched_energy_scores", ",", "labels", "=", "rearrange", "(", "batched_energy_scores", ",", "candidate_positions", ",", "node2pos", "[", "query", "]", ")", "\n", "all_ranks", ".", "extend", "(", "self", ".", "pre_metric", "(", "batched_energy_scores", ",", "labels", ")", ")", "\n", "", "total_metrics", "=", "[", "metric", "(", "all_ranks", ")", "for", "metric", "in", "self", ".", "metrics", "]", "\n", "\n", "", "return", "total_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.TrainerExpan.__init__": [[394, 408], ["trainer.Trainer.__init__", "sorted", "list", "dataset._get_subgraph_and_node_pair", "tqdm.tqdm.tqdm"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_subgraph_and_node_pair"], ["def", "__init__", "(", "self", ",", "mode", ",", "model", ",", "loss", ",", "metrics", ",", "pre_metric", ",", "optimizer", ",", "config", ",", "data_loader", ",", "lr_scheduler", "=", "None", ")", ":", "\n", "        ", "super", "(", "TrainerExpan", ",", "self", ")", ".", "__init__", "(", "model", ",", "loss", ",", "metrics", ",", "pre_metric", ",", "optimizer", ",", "config", ",", "data_loader", ",", "lr_scheduler", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "dataset", "=", "self", ".", "data_loader", ".", "dataset", "\n", "self", ".", "candidate_positions", "=", "dataset", ".", "all_nodes", "\n", "self", ".", "valid_node2pos", "=", "dataset", ".", "valid_node2pos", "\n", "self", ".", "test_node2pos", "=", "dataset", ".", "test_node2pos", "\n", "self", ".", "valid_vocab", "=", "dataset", ".", "valid_node_list", "\n", "self", ".", "test_vocab", "=", "dataset", ".", "test_node_list", "\n", "\n", "if", "'g'", "in", "mode", ":", "\n", "            ", "self", ".", "all_nodes", "=", "sorted", "(", "list", "(", "dataset", ".", "core_subgraph", ".", "nodes", ")", ")", "\n", "self", ".", "node2subgraph", "=", "{", "node", ":", "dataset", ".", "_get_subgraph_and_node_pair", "(", "-", "1", ",", "node", ")", "for", "node", "in", "tqdm", "(", "self", ".", "all_nodes", ",", "desc", "=", "'collecting nodegraph'", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.TrainerExpan._train_epoch": [[409, 454], ["trainer.TrainerExpan.model.train", "enumerate", "trainer.TrainerExpan.optimizer.zero_grad", "trainer.TrainerExpan.model", "label.to.to.to", "trainer.TrainerExpan.backward", "trainer.TrainerExpan.optimizer.step", "trainer.TrainerExpan.item", "isinstance", "label.to.to.sum().detach", "trainer.TrainerExpan.reshape", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "trainer.TrainerExpan.loss", "trainer.TrainerExpan.loss", "trainer.TrainerExpan.logger.debug", "len", "trainer.TrainerExpan._test", "trainer.TrainerExpan.lr_scheduler.step", "trainer.TrainerExpan.lr_scheduler.step", "trainer.TrainerExpan.lr_scheduler.step", "label.to.to.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "trainer.TrainerExpan.item", "len"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.DistMarginLoss.loss", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.loss.DistMarginLoss.loss", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._test"], ["", "", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "total_loss", "=", "0", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "data_loader", ")", ":", "\n", "            ", "nf", ",", "label", ",", "u", ",", "graphs", ",", "paths", ",", "lens", "=", "batch", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "scores", "=", "self", ".", "model", "(", "nf", ",", "u", ",", "graphs", ",", "paths", ",", "lens", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "is_infonce_training", ":", "\n", "                ", "n_batches", "=", "label", ".", "sum", "(", ")", ".", "detach", "(", ")", "\n", "prediction", "=", "scores", ".", "reshape", "(", "n_batches", ",", "-", "1", ")", "\n", "target", "=", "torch", ".", "zeros", "(", "n_batches", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "loss", "=", "self", ".", "loss", "(", "prediction", ",", "target", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "loss", "(", "scores", ",", "label", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "batch_idx", "%", "self", ".", "log_step", "==", "0", "or", "batch_idx", "==", "len", "(", "self", ".", "data_loader", ")", "-", "1", ":", "\n", "                ", "self", ".", "logger", ".", "debug", "(", "\n", "'Train Epoch: {} [{}/{} ({:.0f}%)] Loss: {:.6f}'", "\n", ".", "format", "(", "epoch", ",", "batch_idx", "*", "self", ".", "data_loader", ".", "batch_size", ",", "self", ".", "data_loader", ".", "n_samples", ",", "\n", "100.0", "*", "batch_idx", "/", "len", "(", "self", ".", "data_loader", ")", ",", "\n", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "log", "=", "{", "'loss'", ":", "total_loss", "/", "len", "(", "self", ".", "data_loader", ")", "}", "\n", "\n", "## Validation stage", "\n", "if", "self", ".", "do_validation", ":", "\n", "            ", "val_log", "=", "{", "'val_metrics'", ":", "self", ".", "_test", "(", "'validation'", ")", "}", "\n", "log", "=", "{", "**", "log", ",", "**", "val_log", "}", "\n", "\n", "", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "lr_scheduler", ",", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", ")", ":", "\n", "                ", "if", "self", ".", "lr_scheduler_mode", "==", "\"min\"", ":", "\n", "                    ", "self", ".", "lr_scheduler", ".", "step", "(", "log", "[", "'val_metrics'", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "lr_scheduler", ".", "step", "(", "log", "[", "'val_metrics'", "]", "[", "-", "1", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.TrainerExpan._test": [[455, 508], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "model.eval", "trainer.TrainerExpan.model.cpu", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "list", "more_itertools.sliced", "trainer.TrainerExpan.model.forward_encoders", "batched_model.append", "batched_positions.append", "enumerate", "node_features[].to", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trainer.rearrange", "all_ranks.extend", "metric", "node2pos.keys", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "dataset._get_batch_edge_node_path", "ur.to.to.detach().cpu", "len", "node_features[].to.expand", "ur.to.to.to", "model.match", "torch.cat.append", "torch.cat.append", "trainer.TrainerExpan.pre_metric", "ur.to.to.detach"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.model.model.ExpanMatchModel.forward_encoders", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.rearrange", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.data_loader.dataset.ExpanDataset._get_batch_edge_node_path"], ["", "def", "_test", "(", "self", ",", "mode", ",", "gpu", "=", "True", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "'test'", ",", "'validation'", "]", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", "=", "self", ".", "model", "if", "gpu", "else", "self", ".", "model", ".", "cpu", "(", ")", "\n", "\n", "batch_size", "=", "self", ".", "test_batch_size", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "dataset", "=", "self", ".", "data_loader", ".", "dataset", "\n", "node_features", "=", "dataset", ".", "node_features", "\n", "if", "mode", "==", "'test'", ":", "\n", "# vocab = self.test_vocab", "\n", "# node2pos = self.test_node2pos", "\n", "                ", "node2pos", "=", "dataset", ".", "test_node2parent", "\n", "vocab", "=", "list", "(", "node2pos", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "vocab", "=", "self", ".", "valid_vocab", "\n", "node2pos", "=", "self", ".", "valid_node2pos", "\n", "", "candidate_positions", "=", "self", ".", "candidate_positions", "\n", "batched_model", "=", "[", "]", "# save the CPU graph representation", "\n", "batched_positions", "=", "[", "]", "\n", "for", "us_l", "in", "tqdm", "(", "mit", ".", "sliced", "(", "candidate_positions", ",", "batch_size", ")", ",", "desc", "=", "\"Generating graph encoding ...\"", ")", ":", "\n", "\n", "                ", "bgu", ",", "bpu", ",", "lens", "=", "None", ",", "None", ",", "None", "\n", "if", "'r'", "in", "self", ".", "mode", ":", "\n", "                    ", "us", "=", "torch", ".", "tensor", "(", "us_l", ")", "\n", "", "if", "'g'", "in", "self", ".", "mode", ":", "\n", "                    ", "bgu", "=", "[", "self", ".", "node2subgraph", "[", "e", "]", "for", "e", "in", "us_l", "]", "\n", "", "if", "'p'", "in", "self", ".", "mode", ":", "\n", "                    ", "bpu", ",", "lens", "=", "dataset", ".", "_get_batch_edge_node_path", "(", "us_l", ")", "\n", "bpu", "=", "bpu", "\n", "lens", "=", "lens", "\n", "", "ur", "=", "self", ".", "model", ".", "forward_encoders", "(", "us", ",", "bgu", ",", "bpu", ",", "lens", ")", "\n", "batched_model", ".", "append", "(", "ur", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "batched_positions", ".", "append", "(", "len", "(", "us", ")", ")", "\n", "\n", "# start per query prediction", "\n", "", "all_ranks", "=", "[", "]", "\n", "for", "i", ",", "query", "in", "tqdm", "(", "enumerate", "(", "vocab", ")", ",", "desc", "=", "'testing'", ")", ":", "\n", "                ", "batched_energy_scores", "=", "[", "]", "\n", "nf", "=", "node_features", "[", "query", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "ur", ",", "n_position", "in", "zip", "(", "batched_model", ",", "batched_positions", ")", ":", "\n", "                    ", "expanded_nf", "=", "nf", ".", "expand", "(", "n_position", ",", "-", "1", ")", "\n", "ur", "=", "ur", ".", "to", "(", "self", ".", "device", ")", "\n", "energy_scores", "=", "model", ".", "match", "(", "ur", ",", "expanded_nf", ")", "\n", "batched_energy_scores", ".", "append", "(", "energy_scores", ")", "\n", "", "batched_energy_scores", "=", "torch", ".", "cat", "(", "batched_energy_scores", ")", "\n", "batched_energy_scores", ",", "labels", "=", "rearrange", "(", "batched_energy_scores", ",", "candidate_positions", ",", "node2pos", "[", "query", "]", ")", "\n", "all_ranks", ".", "extend", "(", "self", ".", "pre_metric", "(", "batched_energy_scores", ",", "labels", ")", ")", "\n", "", "total_metrics", "=", "[", "metric", "(", "all_ranks", ")", "for", "metric", "in", "self", ".", "metrics", "]", "\n", "\n", "", "return", "total_metrics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.trainer.trainer.rearrange": [[22, 29], ["numpy.array().any", "torch.cat().int", "torch.cat().int", "torch.cat", "torch.cat", "numpy.where", "numpy.where", "numpy.array", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "len", "len"], "function", ["None"], ["def", "rearrange", "(", "energy_scores", ",", "candidate_position_idx", ",", "true_position_idx", ")", ":", "\n", "    ", "tmp", "=", "np", ".", "array", "(", "[", "[", "x", "==", "y", "for", "x", "in", "candidate_position_idx", "]", "for", "y", "in", "true_position_idx", "]", ")", ".", "any", "(", "0", ")", "\n", "correct", "=", "np", ".", "where", "(", "tmp", ")", "[", "0", "]", "\n", "incorrect", "=", "np", ".", "where", "(", "~", "tmp", ")", "[", "0", "]", "\n", "labels", "=", "torch", ".", "cat", "(", "(", "torch", ".", "ones", "(", "len", "(", "correct", ")", ")", ",", "torch", ".", "zeros", "(", "len", "(", "incorrect", ")", ")", ")", ")", ".", "int", "(", ")", "\n", "energy_scores", "=", "torch", ".", "cat", "(", "(", "energy_scores", "[", "correct", "]", ",", "energy_scores", "[", "incorrect", "]", ")", ")", "\n", "return", "energy_scores", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer.__init__": [[12, 52], ["config.get_logger", "base_trainer.BaseTrainer._prepare_device", "model.to", "base_trainer.BaseTrainer.model.set_device", "cfg_trainer.get", "logger.WriterTensorboardX", "len", "torch.nn.DataParallel", "base_trainer.BaseTrainer.monitor.split", "cfg_trainer.get", "base_trainer.BaseTrainer._resume_checkpoint"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Taxonomy_Completion_Module.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._prepare_device", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.set_device", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._resume_checkpoint"], ["def", "__init__", "(", "self", ",", "model", ",", "loss", ",", "metrics", ",", "optimizer", ",", "config", ",", "save_flag", "=", "1", ")", ":", "\n", "        ", "self", ".", "save_flag", "=", "save_flag", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "logger", "=", "config", ".", "get_logger", "(", "'trainer'", ",", "config", "[", "'trainer'", "]", "[", "'verbosity'", "]", ")", "\n", "\n", "# setup GPU device if available, move model into configured device", "\n", "self", ".", "device", ",", "device_ids", "=", "self", ".", "_prepare_device", "(", "config", "[", "'n_gpu'", "]", ")", "\n", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "set_device", "(", "self", ".", "device", ")", "\n", "if", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "            ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "\n", "", "self", ".", "loss", "=", "loss", "\n", "self", ".", "metrics", "=", "metrics", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "cfg_trainer", "=", "config", "[", "'trainer'", "]", "\n", "self", ".", "epochs", "=", "cfg_trainer", "[", "'epochs'", "]", "\n", "self", ".", "save_period", "=", "cfg_trainer", "[", "'save_period'", "]", "\n", "self", ".", "monitor", "=", "cfg_trainer", ".", "get", "(", "'monitor'", ",", "'off'", ")", "\n", "\n", "# configuration to monitor model performance and save best", "\n", "if", "self", ".", "monitor", "==", "'off'", ":", "\n", "            ", "self", ".", "mnt_mode", "=", "'off'", "\n", "self", ".", "mnt_best", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "mnt_mode", ",", "self", ".", "mnt_metric", "=", "self", ".", "monitor", ".", "split", "(", ")", "\n", "assert", "self", ".", "mnt_mode", "in", "[", "'min'", ",", "'max'", "]", "\n", "\n", "self", ".", "mnt_best", "=", "inf", "if", "self", ".", "mnt_mode", "==", "'min'", "else", "-", "inf", "\n", "self", ".", "early_stop", "=", "cfg_trainer", ".", "get", "(", "'early_stop'", ",", "inf", ")", "\n", "\n", "", "self", ".", "start_epoch", "=", "1", "\n", "\n", "self", ".", "checkpoint_dir", "=", "config", ".", "save_dir", "\n", "# setup visualization writer instance", "\n", "self", ".", "writer", "=", "WriterTensorboardX", "(", "config", ".", "log_dir", ",", "self", ".", "logger", ",", "cfg_trainer", "[", "'tensorboardX'", "]", ")", "\n", "\n", "if", "config", ".", "resume", "is", "not", "None", ":", "\n", "            ", "self", ".", "_resume_checkpoint", "(", "config", ".", "resume", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._train_epoch": [[53, 61], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for an epoch\n\n        :param epoch: Current epoch number\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._test": [[62, 70], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_test", "(", "self", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for an epoch\n\n        :param epoch: Current epoch number\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._save_record": [[71, 74], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_save_record", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer.test": [[75, 80], ["base_trainer.BaseTrainer._test", "enumerate", "base_trainer.BaseTrainer.logger.info"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._test"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "test_values", "=", "self", ".", "_test", "(", "'test'", ")", "\n", "for", "i", ",", "mtr", "in", "enumerate", "(", "self", ".", "metrics", ")", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'    {:15s}: {:.3f}'", ".", "format", "(", "'test_'", "+", "mtr", ".", "__name__", ",", "test_values", "[", "i", "]", ")", ")", "\n", "", "return", "test_values", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer.train": [[81, 142], ["range", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.model.load_state_dict", "base_trainer.BaseTrainer.test", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer._train_epoch", "base_trainer.BaseTrainer.items", "log.items", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer._save_checkpoint", "log.update", "base_trainer.BaseTrainer.logger.info", "copy.deepcopy", "log.update", "str", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.model.state_dict", "log.update", "enumerate", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer.test", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._train_epoch", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._save_checkpoint", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.update"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Full training logic\n        \"\"\"", "\n", "not_improved_count", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "result", "=", "self", ".", "_train_epoch", "(", "epoch", ")", "\n", "# save logged informations into log dict", "\n", "log", "=", "{", "'epoch'", ":", "epoch", "}", "\n", "for", "key", ",", "value", "in", "result", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "==", "'metrics'", ":", "\n", "                    ", "log", ".", "update", "(", "{", "mtr", ".", "__name__", ":", "value", "[", "i", "]", "for", "i", ",", "mtr", "in", "enumerate", "(", "self", ".", "metrics", ")", "}", ")", "\n", "", "elif", "key", "==", "'val_metrics'", ":", "\n", "                    ", "log", ".", "update", "(", "{", "'val_'", "+", "mtr", ".", "__name__", ":", "value", "[", "i", "]", "for", "i", ",", "mtr", "in", "enumerate", "(", "self", ".", "metrics", ")", "}", ")", "\n", "", "elif", "key", "==", "'edge_val_metrics'", ":", "\n", "                    ", "log", ".", "update", "(", "{", "'egde_val_'", "+", "mtr", ".", "__name__", ":", "value", "[", "i", "]", "for", "i", ",", "mtr", "in", "enumerate", "(", "self", ".", "metrics", ")", "}", ")", "\n", "", "else", ":", "\n", "                    ", "log", "[", "key", "]", "=", "value", "\n", "\n", "# print logged informations to the screen", "\n", "", "", "for", "key", ",", "value", "in", "log", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'    {:15s}: {}'", ".", "format", "(", "str", "(", "key", ")", ",", "value", ")", ")", "\n", "\n", "# evaluate model performance according to configured metric, save best checkpoint as model_best", "\n", "", "best", "=", "False", "\n", "if", "self", ".", "mnt_mode", "!=", "'off'", ":", "\n", "                ", "try", ":", "\n", "# check whether model performance improved or not, according to specified metric(mnt_metric)", "\n", "                    ", "improved", "=", "(", "self", ".", "mnt_mode", "==", "'min'", "and", "log", "[", "self", ".", "mnt_metric", "]", "<=", "self", ".", "mnt_best", ")", "or", "(", "self", ".", "mnt_mode", "==", "'max'", "and", "log", "[", "self", ".", "mnt_metric", "]", ">=", "self", ".", "mnt_best", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Metric '{}' is not found. \"", "\n", "\"Model performance monitoring is disabled.\"", ".", "format", "(", "self", ".", "mnt_metric", ")", ")", "\n", "self", ".", "mnt_mode", "=", "'off'", "\n", "improved", "=", "False", "\n", "not_improved_count", "=", "0", "\n", "\n", "", "if", "improved", ":", "\n", "                    ", "self", ".", "mnt_best", "=", "log", "[", "self", ".", "mnt_metric", "]", "\n", "not_improved_count", "=", "0", "\n", "best", "=", "True", "\n", "", "else", ":", "\n", "                    ", "not_improved_count", "+=", "1", "\n", "\n", "", "if", "not_improved_count", ">", "self", ".", "early_stop", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"Validation performance didn\\'t improve for {} epochs. \"", "\n", "\"Training stops.\"", ".", "format", "(", "self", ".", "early_stop", ")", ")", "\n", "\n", "break", "\n", "\n", "", "", "if", "epoch", "%", "self", ".", "save_period", "==", "0", "or", "best", ":", "\n", "                ", "save_path", "=", "self", ".", "_save_checkpoint", "(", "epoch", ",", "save_best", "=", "best", ")", "\n", "if", "best", ":", "\n", "                    ", "best_state", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ".", "state_dict", "(", ")", ")", "\n", "best_saved", "=", "save_path", "\n", "\n", "", "", "", "self", ".", "logger", ".", "info", "(", "\"Testing with best model...\"", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "best_state", ")", "\n", "evaluations", "=", "self", ".", "test", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"The best model saved in: {} ...\"", ".", "format", "(", "best_saved", ")", ")", "\n", "return", "evaluations", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._prepare_device": [[143, 159], ["torch.cuda.device_count", "torch.device", "list", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.logger.warning", "range"], "methods", ["None"], ["", "def", "_prepare_device", "(", "self", ",", "n_gpu_use", ")", ":", "\n", "        ", "\"\"\"\n        setup GPU device if available, move model into configured device\n        \"\"\"", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "n_gpu_use", ">", "0", "and", "n_gpu", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: There\\'s no GPU available on this machine,\"", "\n", "\"training will be performed on CPU.\"", ")", "\n", "n_gpu_use", "=", "0", "\n", "", "if", "n_gpu_use", ">", "n_gpu", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: The number of GPU\\'s configured to use is {}, but only {} are available \"", "\n", "\"on this machine.\"", ".", "format", "(", "n_gpu_use", ",", "n_gpu", ")", ")", "\n", "n_gpu_use", "=", "n_gpu", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "n_gpu_use", ">", "0", "else", "'cpu'", ")", "\n", "list_ids", "=", "list", "(", "range", "(", "n_gpu_use", ")", ")", "\n", "return", "device", ",", "list_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer.set_save_flag": [[160, 162], ["None"], "methods", ["None"], ["", "def", "set_save_flag", "(", "self", ",", "flag", ")", ":", "\n", "        ", "self", ".", "save_flag", "=", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._save_checkpoint": [[163, 196], ["type", "base_trainer.BaseTrainer.model.state_dict", "base_trainer.BaseTrainer.optimizer.state_dict", "str", "base_trainer.BaseTrainer.logger.info", "str", "base_trainer.BaseTrainer.logger.info", "torch.save", "torch.save"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.save", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.save"], ["", "def", "_save_checkpoint", "(", "self", ",", "epoch", ",", "save_best", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Saving checkpoints\n\n        :param epoch: current epoch number\n        :param log: logging information of the epoch\n        :param save_best: if True, rename the saved checkpoint to 'model_best.pth'\n        \"\"\"", "\n", "arch", "=", "type", "(", "self", ".", "model", ")", ".", "__name__", "\n", "state", "=", "{", "\n", "'arch'", ":", "arch", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'monitor_best'", ":", "self", ".", "mnt_best", ",", "\n", "'config'", ":", "self", ".", "config", "\n", "}", "\n", "\n", "# if not self.save_flag:", "\n", "#     return ' '", "\n", "\n", "if", "save_best", ":", "\n", "            ", "filename", "=", "str", "(", "self", ".", "checkpoint_dir", "/", "'model_best.pth'", ")", "\n", "if", "self", ".", "save_flag", ":", "\n", "                ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Saving current best: model_best.pth ...\"", ")", "\n", "", "else", ":", "\n", "            ", "filename", "=", "str", "(", "self", ".", "checkpoint_dir", "/", "'checkpoint-epoch{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "if", "self", ".", "save_flag", ":", "\n", "                ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Saving checkpoint: {} ...\"", ".", "format", "(", "filename", ")", ")", "\n", "\n", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_trainer.BaseTrainer._resume_checkpoint": [[197, 223], ["str", "base_trainer.BaseTrainer.logger.info", "torch.load", "base_trainer.BaseTrainer.model.load_state_dict", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.Concept_Name_Generation.utlis.Vocab.load"], ["", "def", "_resume_checkpoint", "(", "self", ",", "resume_path", ")", ":", "\n", "        ", "\"\"\"\n        Resume from saved checkpoints\n\n        :param resume_path: Checkpoint path to be resumed\n        \"\"\"", "\n", "resume_path", "=", "str", "(", "resume_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint: {} ...\"", ".", "format", "(", "resume_path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_path", ")", "\n", "self", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "self", ".", "mnt_best", "=", "checkpoint", "[", "'monitor_best'", "]", "\n", "\n", "# load architecture params from checkpoint.", "\n", "if", "checkpoint", "[", "'config'", "]", "[", "'arch'", "]", "!=", "self", ".", "config", "[", "'arch'", "]", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Architecture configuration given in config file is different from that of \"", "\n", "\"checkpoint. This may yield an exception while state_dict is being loaded.\"", ")", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "# load optimizer state from checkpoint only when optimizer type is not changed.", "\n", "if", "checkpoint", "[", "'config'", "]", "[", "'optimizer'", "]", "[", "'type'", "]", "!=", "self", ".", "config", "[", "'optimizer'", "]", "[", "'type'", "]", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Optimizer type given in config file is different from that of checkpoint. \"", "\n", "\"Optimizer parameters not being resumed.\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Checkpoint loaded. Resume training from epoch {}\"", ".", "format", "(", "self", ".", "start_epoch", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_data_loader.BaseDataLoader.__init__": [[11, 28], ["len", "base_data_loader.BaseDataLoader._split_sampler", "torch.utils.data.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_data_loader.BaseDataLoader._split_sampler", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", ",", "shuffle", ",", "validation_split", ",", "num_workers", ",", "collate_fn", "=", "default_collate", ")", ":", "\n", "        ", "self", ".", "validation_split", "=", "validation_split", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n", "self", ".", "batch_idx", "=", "0", "\n", "self", ".", "n_samples", "=", "len", "(", "dataset", ")", "\n", "\n", "self", ".", "sampler", ",", "self", ".", "valid_sampler", "=", "self", ".", "_split_sampler", "(", "self", ".", "validation_split", ")", "\n", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'dataset'", ":", "dataset", ",", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "self", ".", "shuffle", ",", "\n", "'collate_fn'", ":", "collate_fn", ",", "\n", "'num_workers'", ":", "num_workers", "\n", "}", "\n", "super", "(", "BaseDataLoader", ",", "self", ")", ".", "__init__", "(", "sampler", "=", "self", ".", "sampler", ",", "**", "self", ".", "init_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_data_loader.BaseDataLoader._split_sampler": [[29, 56], ["numpy.arange", "numpy.random.seed", "numpy.random.shuffle", "isinstance", "numpy.delete", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "int", "numpy.arange"], "methods", ["None"], ["", "def", "_split_sampler", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "0.0", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "idx_full", "=", "np", ".", "arange", "(", "self", ".", "n_samples", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_full", ")", "\n", "\n", "if", "isinstance", "(", "split", ",", "int", ")", ":", "\n", "            ", "assert", "split", ">", "0", "\n", "assert", "split", "<", "self", ".", "n_samples", ",", "\"validation set size is configured to be larger than entire dataset.\"", "\n", "len_valid", "=", "split", "\n", "", "else", ":", "\n", "            ", "len_valid", "=", "int", "(", "self", ".", "n_samples", "*", "split", ")", "\n", "\n", "", "valid_idx", "=", "idx_full", "[", "0", ":", "len_valid", "]", "\n", "train_idx", "=", "np", ".", "delete", "(", "idx_full", ",", "np", ".", "arange", "(", "0", ",", "len_valid", ")", ")", "\n", "\n", "train_sampler", "=", "SubsetRandomSampler", "(", "train_idx", ")", "\n", "valid_sampler", "=", "SubsetRandomSampler", "(", "valid_idx", ")", "\n", "\n", "# turn off shuffle option which is mutually exclusive with sampler", "\n", "self", ".", "shuffle", "=", "False", "\n", "self", ".", "n_samples", "=", "len", "(", "train_idx", ")", "\n", "\n", "return", "train_sampler", ",", "valid_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_data_loader.BaseDataLoader.split_validation": [[57, 62], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "valid_sampler", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "DataLoader", "(", "sampler", "=", "self", ".", "valid_sampler", ",", "**", "self", ".", "init_kwargs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__": [[10, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "None", "\n", "self", ".", "device", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.set_device": [[15, 17], ["None"], "methods", ["None"], ["", "def", "set_device", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.set_embedding": [[18, 23], ["torch.Embedding.from_pretrained", "torch.Embedding"], "methods", ["None"], ["", "def", "set_embedding", "(", "self", ",", "vocab_size", ",", "embed_dim", ",", "pretrained_embedding", "=", "None", ")", ":", "\n", "        ", "if", "pretrained_embedding", "is", "not", "None", ":", "\n", "            ", "self", ".", "embedding", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "pretrained_embedding", ",", "freeze", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.forward": [[24, 32], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass logic\n\n        :return: Model output\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__str__": [[33, 40], ["filter", "sum", "base_model.BaseModel.parameters", "torch.Module.__str__", "numpy.prod", "p.size"], "methods", ["home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.base.base_model.BaseModel.__str__", "home.repos.pwc.inspect_result.QingkaiZeng_GenTaxo.cider.cider_scorer.CiderScorer.size"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Model prints with number of trainable parameters\n        \"\"\"", "\n", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "return", "super", "(", "BaseModel", ",", "self", ")", ".", "__str__", "(", ")", "+", "'\\nTrainable parameters: {}'", ".", "format", "(", "params", ")", "\n", "", "", ""]]}