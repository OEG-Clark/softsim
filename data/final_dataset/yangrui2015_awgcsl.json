{"home.repos.pwc.inspect_result.yangrui2015_awgcsl.offline_data.convert_buffer_to_npy.make_env": [[11, 27], ["gym.make", "env_name.startswith", "env_name.startswith", "rlkit.envs.wrappers_for_rlkit.FlattenGoalWrapper", "gym.wrappers.TimeLimit", "rlkit.envs.wrappers_for_rlkit.SawyerGoalWrapper", "env_name.startswith", "rlkit.envs.wrappers_for_rlkit.RewardWrapper", "gym.wrappers.TimeLimit", "rlkit.envs.wrappers_for_rlkit.PointGoalWrapper", "env_name.startswith", "rlkit.envs.wrappers_for_rlkit.ReacherGoalWrapper", "gym.wrappers.TimeLimit"], "function", ["None"], ["def", "make_env", "(", "env_name", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "if", "env_name", ".", "startswith", "(", "'Fetch'", ")", ":", "\n", "        ", "env", ".", "_max_episode_steps", "=", "50", "\n", "", "if", "env_name", ".", "startswith", "(", "'Sawyer'", ")", ":", "\n", "        ", "env", "=", "gym", ".", "wrappers", ".", "TimeLimit", "(", "env", ",", "max_episode_steps", "=", "50", ")", "\n", "env", "=", "SawyerGoalWrapper", "(", "env", ")", "\n", "", "elif", "env_name", ".", "startswith", "(", "'Point2D'", ")", ":", "\n", "        ", "env", "=", "gym", ".", "wrappers", ".", "TimeLimit", "(", "env", ",", "max_episode_steps", "=", "50", ")", "\n", "env", "=", "PointGoalWrapper", "(", "env", ")", "\n", "", "elif", "env_name", ".", "startswith", "(", "'Reacher'", ")", ":", "\n", "        ", "env", ".", "_max_episode_steps", "=", "50", "\n", "env", "=", "ReacherGoalWrapper", "(", "env", ")", "\n", "", "else", ":", "\n", "        ", "env", "=", "gym", ".", "wrappers", ".", "TimeLimit", "(", "env", ",", "max_episode_steps", "=", "50", ")", "\n", "", "return", "FlattenGoalWrapper", "(", "RewardWrapper", "(", "env", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.offline_data.convert_buffer_to_npy.convert_buffer": [[40, 81], ["print", "convert_buffer_to_npy.make_env", "path.rstrip", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "pdb.set_trace", "path.split", "open", "pickle.load", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "buffer[].reshape", "buffer[].reshape", "numpy.concatenate", "numpy.concatenate", "range", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.zeros", "numpy.zeros", "make_env.env.compute_reward", "rewards.min"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.env_util.make_env", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.save", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.save", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.save", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.save", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.save", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.save", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.load", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_reward"], ["def", "convert_buffer", "(", "path", ")", ":", "\n", "    ", "print", "(", "'converting path: '", "+", "path", ")", "\n", "env_name", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "env", "=", "make_env", "(", "env_name", ")", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "buffer", "=", "pickle", ".", "load", "(", "f", ")", "\n", "N", "=", "buffer", "[", "'u'", "]", ".", "shape", "[", "0", "]", "\n", "L", "=", "buffer", "[", "'u'", "]", ".", "shape", "[", "1", "]", "\n", "size", "=", "N", "*", "L", "\n", "state_dim", ",", "goal_dim", ",", "action_dim", "=", "buffer", "[", "'o'", "]", ".", "shape", "[", "-", "1", "]", ",", "buffer", "[", "'g'", "]", ".", "shape", "[", "-", "1", "]", ",", "buffer", "[", "'u'", "]", ".", "shape", "[", "-", "1", "]", "\n", "states", "=", "np", ".", "zeros", "(", "(", "size", ",", "state_dim", ")", ")", "\n", "next_states", "=", "np", ".", "zeros", "(", "(", "size", ",", "state_dim", ")", ")", "\n", "achieved_goals", "=", "np", ".", "zeros", "(", "(", "size", ",", "goal_dim", ")", ")", "\n", "next_achieved_goals", "=", "np", ".", "zeros", "(", "(", "size", ",", "goal_dim", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "states", "[", "i", "*", "L", ":", "(", "i", "+", "1", ")", "*", "L", "]", "=", "buffer", "[", "'o'", "]", "[", "i", "]", "[", ":", "-", "1", "]", "\n", "next_states", "[", "i", "*", "L", ":", "(", "i", "+", "1", ")", "*", "L", "]", "=", "buffer", "[", "'o'", "]", "[", "i", "]", "[", "1", ":", "]", "\n", "achieved_goals", "[", "i", "*", "L", ":", "(", "i", "+", "1", ")", "*", "L", "]", "=", "buffer", "[", "'ag'", "]", "[", "i", "]", "[", ":", "-", "1", "]", "\n", "next_achieved_goals", "[", "i", "*", "L", ":", "(", "i", "+", "1", ")", "*", "L", "]", "=", "buffer", "[", "'ag'", "]", "[", "i", "]", "[", "1", ":", "]", "\n", "\n", "", "goals", "=", "buffer", "[", "'g'", "]", ".", "reshape", "(", "-", "1", ",", "goal_dim", ")", "\n", "actions", "=", "buffer", "[", "'u'", "]", ".", "reshape", "(", "-", "1", ",", "action_dim", ")", "\n", "state_goals", "=", "np", ".", "concatenate", "(", "(", "states", ",", "goals", ",", "achieved_goals", ")", ",", "axis", "=", "1", ")", "\n", "next_state_goals", "=", "np", ".", "concatenate", "(", "(", "next_states", ",", "goals", ",", "next_achieved_goals", ")", ",", "axis", "=", "1", ")", "\n", "rewards", ",", "dones", "=", "np", ".", "zeros", "(", "(", "size", ",", "1", ")", ")", ",", "np", ".", "zeros", "(", "(", "size", ",", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "dones", "[", "(", "i", "+", "1", ")", "*", "L", "-", "1", "]", "=", "1", "\n", "", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "rewards", "[", "i", "]", "=", "env", ".", "env", ".", "compute_reward", "(", "achieved_goals", "[", "i", "]", ",", "goals", "[", "i", "]", ",", "None", ")", "\n", "", "if", "rewards", ".", "min", "(", ")", "==", "-", "1", ":", "\n", "            ", "rewards", "+=", "1", "\n", "\n", "", "", "save_path", "=", "path", ".", "rstrip", "(", "'buffer.pkl'", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'state.npy'", ")", ",", "state_goals", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'next_state.npy'", ")", ",", "next_state_goals", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'action.npy'", ")", ",", "actions", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'reward.npy'", ")", ",", "rewards", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'not_done.npy'", ")", ",", "1", "-", "dones", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'done.npy'", ")", ",", "dones", ")", "\n", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.wgcsl.run.train": [[20, 48], ["wgcsl.common.env_util.get_env_type", "print", "wgcsl.common.parse_args.get_learn_function_defaults", "wgcsl.common.parse_args.get_learn_function_defaults.update", "wgcsl.common.env_util.build_env", "print", "wgcsl.algo.train.learn", "os.makedirs", "os.makedirs", "os.path.expanduser", "os.path.expanduser"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.env_util.get_env_type", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.parse_args.get_learn_function_defaults", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.env_util.build_env", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.train.learn"], ["def", "train", "(", "args", ",", "extra_args", ")", ":", "\n", "    ", "env_type", ",", "env_id", "=", "get_env_type", "(", "args", ",", "_game_envs", ")", "\n", "print", "(", "'env_type: {}'", ".", "format", "(", "env_type", ")", ")", "\n", "seed", "=", "args", ".", "seed", "\n", "alg_kwargs", "=", "get_learn_function_defaults", "(", "'her'", ",", "env_type", ")", "\n", "alg_kwargs", ".", "update", "(", "extra_args", ")", "\n", "env", "=", "build_env", "(", "args", ",", "_game_envs", ")", "\n", "print", "(", "'Training {} on {}:{} with arguments \\n{}'", ".", "format", "(", "args", ".", "mode", ",", "env_type", ",", "env_id", ",", "alg_kwargs", ")", ")", "\n", "\n", "## make save dir", "\n", "if", "args", ".", "save_path", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "expanduser", "(", "args", ".", "save_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "model", "=", "learn", "(", "\n", "env", "=", "env", ",", "\n", "seed", "=", "seed", ",", "\n", "num_epoch", "=", "args", ".", "num_epoch", ",", "\n", "save_path", "=", "args", ".", "save_path", ",", "\n", "load_model", "=", "args", ".", "load_model", ",", "\n", "load_buffer", "=", "args", ".", "load_buffer", ",", "\n", "load_path", "=", "args", ".", "load_path", ",", "\n", "play_no_training", "=", "args", ".", "play_no_training", ",", "\n", "offline_train", "=", "args", ".", "offline_train", ",", "\n", "mode", "=", "args", ".", "mode", ",", "\n", "su_method", "=", "args", ".", "su_method", ",", "\n", "**", "alg_kwargs", "\n", ")", "\n", "return", "model", ",", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.wgcsl.run.main": [[50, 91], ["wgcsl.common.parse_args.common_arg_parser", "wgcsl.common.parse_args.common_arg_parser.parse_known_args", "wgcsl.common.parse_args.parse_cmdline_kwargs", "wgcsl.util.init_logger", "run.train", "env.close", "os.expanduser", "os.path.join", "os.path.join", "model.save", "wgcsl.common.logger.log", "env.reset", "numpy.zeros", "os.path.join", "os.path.join", "model.buffer.save", "hasattr", "isinstance", "numpy.zeros", "numpy.zeros", "env.step", "env.render", "model.step", "model.step", "isinstance", "done.any", "numpy.nonzero", "print"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.parse_args.common_arg_parser", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.parse_args.parse_cmdline_kwargs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.wgcsl.util.init_logger", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.train", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.save", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.log", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.save", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "arg_parser", "=", "common_arg_parser", "(", ")", "\n", "args", ",", "unknown_args", "=", "arg_parser", ".", "parse_known_args", "(", "args", ")", "\n", "extra_args", "=", "parse_cmdline_kwargs", "(", "unknown_args", ")", "\n", "rank", "=", "init_logger", "(", "args", ")", "\n", "\n", "model", ",", "env", "=", "train", "(", "args", ",", "extra_args", ")", "\n", "if", "args", ".", "save_path", "is", "not", "None", "and", "rank", "==", "0", ":", "\n", "        ", "save_path", "=", "osp", ".", "expanduser", "(", "args", ".", "save_path", ")", "\n", "last_policy_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'policy_last.pkl'", ")", "\n", "model", ".", "save", "(", "last_policy_path", ")", "\n", "if", "args", ".", "save_buffer", ":", "\n", "            ", "buffer_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'buffer.pkl'", ")", "\n", "model", ".", "buffer", ".", "save", "(", "buffer_path", ")", "\n", "\n", "", "", "if", "args", ".", "play", ":", "#  or args.play_no_training", "\n", "        ", "logger", ".", "log", "(", "\"Running trained model\"", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "state", "=", "model", ".", "initial_state", "if", "hasattr", "(", "model", ",", "'initial_state'", ")", "else", "None", "\n", "dones", "=", "np", ".", "zeros", "(", "(", "1", ",", ")", ")", "\n", "\n", "episode_rew", "=", "np", ".", "zeros", "(", "env", ".", "num_envs", ")", "if", "isinstance", "(", "env", ",", "VecEnv", ")", "else", "np", ".", "zeros", "(", "1", ")", "\n", "while", "True", ":", "\n", "            ", "if", "state", "is", "not", "None", ":", "\n", "                ", "actions", ",", "_", ",", "state", ",", "_", "=", "model", ".", "step", "(", "obs", ",", "S", "=", "state", ",", "M", "=", "dones", ")", "\n", "", "else", ":", "\n", "                ", "actions", ",", "_", ",", "_", ",", "_", "=", "model", ".", "step", "(", "obs", ")", "\n", "\n", "", "obs", ",", "rew", ",", "done", ",", "_", "=", "env", ".", "step", "(", "actions", ")", "\n", "episode_rew", "+=", "rew", "\n", "env", ".", "render", "(", ")", "\n", "done_any", "=", "done", ".", "any", "(", ")", "if", "isinstance", "(", "done", ",", "np", ".", "ndarray", ")", "else", "done", "\n", "if", "done_any", ":", "\n", "                ", "for", "i", "in", "np", ".", "nonzero", "(", "done", ")", "[", "0", "]", ":", "\n", "                    ", "print", "(", "'episode_rew={}'", ".", "format", "(", "episode_rew", "[", "i", "]", ")", ")", "\n", "episode_rew", "[", "i", "]", "=", "0", "\n", "\n", "", "", "", "", "env", ".", "close", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.wgcsl.util.configure_logger": [[8, 13], ["wgcsl.common.logger.configure", "wgcsl.common.logger.configure"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.configure", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.configure"], ["", "def", "configure_logger", "(", "log_path", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "log_path", "is", "not", "None", ":", "\n", "        ", "logger", ".", "configure", "(", "log_path", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "configure", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.wgcsl.util.init_logger": [[15, 23], ["util.configure_logger", "MPI.COMM_WORLD.Get_rank", "util.configure_logger", "MPI.COMM_WORLD.Get_rank"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.wgcsl.util.configure_logger", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.wgcsl.util.configure_logger"], ["", "", "def", "init_logger", "(", "args", ")", ":", "\n", "    ", "if", "MPI", "is", "None", "or", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "==", "0", ":", "\n", "        ", "rank", "=", "0", "\n", "configure_logger", "(", "args", ".", "log_path", ")", "\n", "", "else", ":", "\n", "        ", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "configure_logger", "(", "args", ".", "log_path", ",", "format_strs", "=", "[", "]", ")", "\n", "", "return", "rank", "\n", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.get_full_envname": [[11, 28], ["dic.keys"], "function", ["None"], ["def", "get_full_envname", "(", "name", ")", ":", "\n", "    ", "dic", "=", "{", "\n", "'PointReach'", ":", "'Point2DLargeEnv-v1'", ",", "\n", "'PointRooms'", ":", "'Point2D-FourRoom-v1'", ",", "\n", "'Reacher'", ":", "'Reacher-v2'", ",", "\n", "'SawyerReach'", ":", "'SawyerReachXYZEnv-v1'", ",", "\n", "'SawyerDoor'", ":", "'SawyerDoor-v0'", ",", "\n", "'FetchReach'", ":", "'FetchReach-v1'", ",", "\n", "'FetchPush'", ":", "'FetchPush-v1'", ",", "\n", "'FetchSlide'", ":", "'FetchSlide-v1'", ",", "\n", "'FetchPick'", ":", "'FetchPickAndPlace-v1'", ",", "\n", "'HandReach'", ":", "'HandReach-v0'", "\n", "}", "\n", "if", "name", "in", "dic", ".", "keys", "(", ")", ":", "\n", "        ", "return", "dic", "[", "name", "]", "\n", "", "else", ":", "\n", "        ", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict": [[30, 75], ["isinstance", "isinstance", "isinstance", "collections.OrderedDict", "collections.OrderedDict", "len", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "isinstance", "collections.OrderedDict", "numpy.max", "numpy.min", "env_util.create_stats_ordered_dict", "collections.OrderedDict.update", "iter", "numpy.concatenate", "float", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update"], ["", "", "def", "create_stats_ordered_dict", "(", "\n", "name", ",", "\n", "data", ",", "\n", "stat_prefix", "=", "None", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", "exclude_max_min", "=", "False", ",", "\n", ")", ":", "\n", "    ", "if", "stat_prefix", "is", "not", "None", ":", "\n", "        ", "name", "=", "\"{} {}\"", ".", "format", "(", "stat_prefix", ",", "name", ")", "\n", "", "if", "isinstance", "(", "data", ",", "Number", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "{", "name", ":", "data", "}", ")", "\n", "\n", "", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "        ", "return", "OrderedDict", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "data", ",", "tuple", ")", ":", "\n", "        ", "ordered_dict", "=", "OrderedDict", "(", ")", "\n", "for", "number", ",", "d", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "sub_dict", "=", "create_stats_ordered_dict", "(", "\n", "\"{0}_{1}\"", ".", "format", "(", "name", ",", "number", ")", ",", "\n", "d", ",", "\n", ")", "\n", "ordered_dict", ".", "update", "(", "sub_dict", ")", "\n", "", "return", "ordered_dict", "\n", "\n", "", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "iter", "(", "data", "[", "0", "]", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "data", "=", "np", ".", "concatenate", "(", "data", ")", "\n", "\n", "", "", "if", "(", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", "and", "data", ".", "size", "==", "1", "\n", "and", "not", "always_show_all_stats", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "{", "name", ":", "float", "(", "data", ")", "}", ")", "\n", "\n", "", "stats", "=", "OrderedDict", "(", "[", "\n", "(", "name", "+", "' Mean'", ",", "np", ".", "mean", "(", "data", ")", ")", ",", "\n", "(", "name", "+", "' Std'", ",", "np", ".", "std", "(", "data", ")", ")", ",", "\n", "]", ")", "\n", "if", "not", "exclude_max_min", ":", "\n", "        ", "stats", "[", "name", "+", "' Max'", "]", "=", "np", ".", "max", "(", "data", ")", "\n", "stats", "[", "name", "+", "' Min'", "]", "=", "np", ".", "min", "(", "data", ")", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.get_generic_path_information": [[77, 100], ["collections.OrderedDict", "numpy.vstack", "collections.OrderedDict.update", "collections.OrderedDict.update", "collections.OrderedDict.update", "len", "sum", "env_util.create_stats_ordered_dict", "env_util.create_stats_ordered_dict", "len", "numpy.hstack", "numpy.vstack", "env_util.create_stats_ordered_dict"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict"], ["", "def", "get_generic_path_information", "(", "paths", ",", "stat_prefix", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    Get an OrderedDict with a bunch of statistic names and values.\n    \"\"\"", "\n", "statistics", "=", "OrderedDict", "(", ")", "\n", "returns", "=", "[", "sum", "(", "path", "[", "\"rewards\"", "]", ")", "for", "path", "in", "paths", "]", "\n", "\n", "rewards", "=", "np", ".", "vstack", "(", "[", "path", "[", "\"rewards\"", "]", "for", "path", "in", "paths", "]", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "'Rewards'", ",", "rewards", ",", "\n", "stat_prefix", "=", "stat_prefix", ")", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "'Returns'", ",", "returns", ",", "\n", "stat_prefix", "=", "stat_prefix", ")", ")", "\n", "actions", "=", "[", "path", "[", "\"actions\"", "]", "for", "path", "in", "paths", "]", "\n", "if", "len", "(", "actions", "[", "0", "]", ".", "shape", ")", "==", "1", ":", "\n", "        ", "actions", "=", "np", ".", "hstack", "(", "[", "path", "[", "\"actions\"", "]", "for", "path", "in", "paths", "]", ")", "\n", "", "else", ":", "\n", "        ", "actions", "=", "np", ".", "vstack", "(", "[", "path", "[", "\"actions\"", "]", "for", "path", "in", "paths", "]", ")", "\n", "", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Actions'", ",", "actions", ",", "stat_prefix", "=", "stat_prefix", "\n", ")", ")", "\n", "statistics", "[", "'Num Paths'", "]", "=", "len", "(", "paths", ")", "\n", "\n", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.get_average_returns": [[102, 105], ["numpy.mean", "sum"], "function", ["None"], ["", "def", "get_average_returns", "(", "paths", ")", ":", "\n", "    ", "returns", "=", "[", "sum", "(", "path", "[", "\"rewards\"", "]", ")", "for", "path", "in", "paths", "]", "\n", "return", "np", ".", "mean", "(", "returns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.get_path_lengths": [[107, 109], ["len"], "function", ["None"], ["", "def", "get_path_lengths", "(", "paths", ")", ":", "\n", "    ", "return", "[", "len", "(", "path", "[", "'observations'", "]", ")", "for", "path", "in", "paths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.get_stat_in_paths": [[111, 122], ["len", "numpy.array", "type"], "function", ["None"], ["", "def", "get_stat_in_paths", "(", "paths", ",", "dict_name", ",", "scalar_name", ")", ":", "\n", "    ", "if", "len", "(", "paths", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "[", "]", "]", ")", "\n", "\n", "", "if", "type", "(", "paths", "[", "0", "]", "[", "dict_name", "]", ")", "==", "dict", ":", "\n", "# Support rllab interface", "\n", "        ", "return", "[", "path", "[", "dict_name", "]", "[", "scalar_name", "]", "for", "path", "in", "paths", "]", "\n", "\n", "", "return", "[", "\n", "[", "info", "[", "scalar_name", "]", "for", "info", "in", "path", "[", "dict_name", "]", "]", "\n", "for", "path", "in", "paths", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.get_asset_full_path": [[125, 127], ["os.path.join"], "function", ["None"], ["", "def", "get_asset_full_path", "(", "file_name", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "ENV_ASSET_DIR", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.concatenate_box_spaces": [[128, 135], ["numpy.concatenate", "numpy.concatenate", "gym.spaces.Box"], "function", ["None"], ["", "def", "concatenate_box_spaces", "(", "*", "spaces", ")", ":", "\n", "    ", "\"\"\"\n    Assumes dtypes of all spaces are the of the same type\n    \"\"\"", "\n", "low", "=", "np", ".", "concatenate", "(", "[", "space", ".", "low", "for", "space", "in", "spaces", "]", ")", "\n", "high", "=", "np", ".", "concatenate", "(", "[", "space", ".", "high", "for", "space", "in", "spaces", "]", ")", "\n", "return", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerMocapBase.__init__": [[19, 22], ["wgcsl.envs.mujoco_env.MujocoEnv.__init__", "base.SawyerMocapBase.reset_mocap_welds"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerMocapBase.reset_mocap_welds"], ["def", "__init__", "(", "self", ",", "model_name", ",", "frame_skip", "=", "50", ")", ":", "\n", "        ", "MujocoEnv", ".", "__init__", "(", "self", ",", "model_name", ",", "frame_skip", "=", "frame_skip", ")", "\n", "self", ".", "reset_mocap_welds", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerMocapBase.get_endeff_pos": [[23, 25], ["base.SawyerMocapBase.data.get_body_xpos().copy", "base.SawyerMocapBase.data.get_body_xpos"], "methods", ["None"], ["", "def", "get_endeff_pos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "get_body_xpos", "(", "'hand'", ")", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerMocapBase.get_gripper_pos": [[26, 28], ["numpy.array"], "methods", ["None"], ["", "def", "get_gripper_pos", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "self", ".", "data", ".", "qpos", "[", "7", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerMocapBase.get_env_state": [[29, 34], ["base.SawyerMocapBase.sim.get_state", "copy.deepcopy"], "methods", ["None"], ["", "def", "get_env_state", "(", "self", ")", ":", "\n", "        ", "joint_state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "mocap_state", "=", "self", ".", "data", ".", "mocap_pos", ",", "self", ".", "data", ".", "mocap_quat", "\n", "state", "=", "joint_state", ",", "mocap_state", "\n", "return", "copy", ".", "deepcopy", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerMocapBase.set_env_state": [[35, 42], ["base.SawyerMocapBase.sim.set_state", "base.SawyerMocapBase.data.set_mocap_pos", "base.SawyerMocapBase.data.set_mocap_quat", "base.SawyerMocapBase.sim.forward"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.set_state"], ["", "def", "set_env_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "joint_state", ",", "mocap_state", "=", "state", "\n", "self", ".", "sim", ".", "set_state", "(", "joint_state", ")", "\n", "mocap_pos", ",", "mocap_quat", "=", "mocap_state", "\n", "self", ".", "data", ".", "set_mocap_pos", "(", "'mocap'", ",", "mocap_pos", ")", "\n", "self", ".", "data", ".", "set_mocap_quat", "(", "'mocap'", ",", "mocap_quat", ")", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerMocapBase.__getstate__": [[43, 46], ["super().__getstate__", "base.SawyerMocapBase.get_env_state"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.CloudpickleWrapper.__getstate__", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.get_env_state"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "super", "(", ")", ".", "__getstate__", "(", ")", "\n", "return", "{", "**", "state", ",", "'env_state'", ":", "self", ".", "get_env_state", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerMocapBase.__setstate__": [[47, 50], ["super().__setstate__", "base.SawyerMocapBase.set_env_state"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.CloudpickleWrapper.__setstate__", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.set_env_state"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", ")", ".", "__setstate__", "(", "state", ")", "\n", "self", ".", "set_env_state", "(", "state", "[", "'env_state'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerMocapBase.reset_mocap_welds": [[51, 60], ["sim.forward", "range", "numpy.array"], "methods", ["None"], ["", "def", "reset_mocap_welds", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the mocap welds that we use for actuation.\"\"\"", "\n", "sim", "=", "self", ".", "sim", "\n", "if", "sim", ".", "model", ".", "nmocap", ">", "0", "and", "sim", ".", "model", ".", "eq_data", "is", "not", "None", ":", "\n", "            ", "for", "i", "in", "range", "(", "sim", ".", "model", ".", "eq_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "sim", ".", "model", ".", "eq_type", "[", "i", "]", "==", "mujoco_py", ".", "const", ".", "EQ_WELD", ":", "\n", "                    ", "sim", ".", "model", ".", "eq_data", "[", "i", ",", ":", "]", "=", "np", ".", "array", "(", "\n", "[", "0.", ",", "0.", ",", "0.", ",", "1.", ",", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "", "", "", "sim", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerXYZEnv.__init__": [[63, 83], ["base.SawyerMocapBase.__init__", "numpy.array", "numpy.array", "numpy.hstack", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", "args", ",", "\n", "hand_low", "=", "(", "-", "0.2", ",", "0.55", ",", "0.05", ")", ",", "\n", "hand_high", "=", "(", "0.2", ",", "0.75", ",", "0.3", ")", ",", "\n", "mocap_low", "=", "None", ",", "\n", "mocap_high", "=", "None", ",", "\n", "action_scale", "=", "2.", "/", "100", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "action_scale", "=", "action_scale", "\n", "self", ".", "hand_low", "=", "np", ".", "array", "(", "hand_low", ")", "\n", "self", ".", "hand_high", "=", "np", ".", "array", "(", "hand_high", ")", "\n", "if", "mocap_low", "is", "None", ":", "\n", "            ", "mocap_low", "=", "hand_low", "\n", "", "if", "mocap_high", "is", "None", ":", "\n", "            ", "mocap_high", "=", "hand_high", "\n", "", "self", ".", "mocap_low", "=", "np", ".", "hstack", "(", "mocap_low", ")", "\n", "self", ".", "mocap_high", "=", "np", ".", "hstack", "(", "mocap_high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerXYZEnv.set_xyz_action": [[84, 95], ["numpy.clip", "numpy.clip", "base.SawyerXYZEnv.data.set_mocap_pos", "base.SawyerXYZEnv.data.set_mocap_quat", "numpy.array"], "methods", ["None"], ["", "def", "set_xyz_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "action", "=", "np", ".", "clip", "(", "action", ",", "-", "1", ",", "1", ")", "\n", "pos_delta", "=", "action", "*", "self", ".", "action_scale", "\n", "new_mocap_pos", "=", "self", ".", "data", ".", "mocap_pos", "+", "pos_delta", "[", "None", "]", "\n", "new_mocap_pos", "[", "0", ",", ":", "]", "=", "np", ".", "clip", "(", "\n", "new_mocap_pos", "[", "0", ",", ":", "]", ",", "\n", "self", ".", "mocap_low", ",", "\n", "self", ".", "mocap_high", ",", "\n", ")", "\n", "self", ".", "data", ".", "set_mocap_pos", "(", "'mocap'", ",", "new_mocap_pos", ")", "\n", "self", ".", "data", ".", "set_mocap_quat", "(", "'mocap'", ",", "np", ".", "array", "(", "[", "1", ",", "0", ",", "1", ",", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerXYZEnv.set_xy_action": [[96, 100], ["numpy.hstack", "base.SawyerXYZEnv.set_xyz_action"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerXYZEnv.set_xyz_action"], ["", "def", "set_xy_action", "(", "self", ",", "xy_action", ",", "fixed_z", ")", ":", "\n", "        ", "delta_z", "=", "fixed_z", "-", "self", ".", "data", ".", "mocap_pos", "[", "0", ",", "2", "]", "\n", "xyz_action", "=", "np", ".", "hstack", "(", "(", "xy_action", ",", "delta_z", ")", ")", "\n", "self", ".", "set_xyz_action", "(", "xyz_action", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerViews.configure_viewer": [[35, 43], ["range"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "configure_viewer", "(", "cam", ",", "cam_pos", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "cam", ".", "lookat", "[", "i", "]", "=", "cam_pos", "[", "i", "]", "\n", "", "cam", ".", "distance", "=", "cam_pos", "[", "3", "]", "\n", "cam", ".", "elevation", "=", "cam_pos", "[", "4", "]", "\n", "cam", ".", "azimuth", "=", "cam_pos", "[", "5", "]", "\n", "cam", ".", "trackbodyid", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerViews.robot_view": [[44, 50], ["numpy.array", "sawyer_door.SawyerViews.configure_viewer"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerViews.configure_viewer"], ["", "@", "staticmethod", "\n", "def", "robot_view", "(", "cam", ")", ":", "\n", "        ", "rotation_angle", "=", "90", "\n", "cam_dist", "=", "1", "\n", "cam_pos", "=", "np", ".", "array", "(", "[", "0", ",", "0.5", ",", "0.2", ",", "cam_dist", ",", "-", "45", ",", "rotation_angle", "]", ")", "\n", "SawyerViews", ".", "configure_viewer", "(", "cam", ",", "cam_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerViews.third_person_view": [[51, 57], ["numpy.array", "sawyer_door.SawyerViews.configure_viewer"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerViews.configure_viewer"], ["", "@", "staticmethod", "\n", "def", "third_person_view", "(", "cam", ")", ":", "\n", "        ", "cam_dist", "=", "0.3", "\n", "rotation_angle", "=", "270", "\n", "cam_pos", "=", "np", ".", "array", "(", "[", "0", ",", "1.0", ",", "0.5", ",", "cam_dist", ",", "-", "45", ",", "rotation_angle", "]", ")", "\n", "SawyerViews", ".", "configure_viewer", "(", "cam", ",", "cam_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerViews.top_down_view": [[58, 64], ["numpy.array", "sawyer_door.SawyerViews.configure_viewer"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerViews.configure_viewer"], ["", "@", "staticmethod", "\n", "def", "top_down_view", "(", "cam", ")", ":", "\n", "        ", "cam_dist", "=", "0.2", "\n", "rotation_angle", "=", "0", "\n", "cam_pos", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1.5", ",", "cam_dist", ",", "-", "90", ",", "rotation_angle", "]", ")", "\n", "SawyerViews", ".", "configure_viewer", "(", "cam", ",", "cam_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerViews.default_view": [[65, 71], ["numpy.array", "sawyer_door.SawyerViews.configure_viewer"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerViews.configure_viewer"], ["", "@", "staticmethod", "\n", "def", "default_view", "(", "cam", ")", ":", "\n", "        ", "cam_dist", "=", "0.3", "\n", "rotation_angle", "=", "270", "\n", "cam_pos", "=", "np", ".", "array", "(", "[", "0", ",", "0.85", ",", "0.30", ",", "cam_dist", ",", "-", "55", ",", "rotation_angle", "]", ")", "\n", "SawyerViews", ".", "configure_viewer", "(", "cam", ",", "cam_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerDoorGoalEnv.__init__": [[73, 83], ["wgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv", "gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fixed_start", "=", "True", ",", "fixed_goal", "=", "False", ",", "threshold", "=", "0.06", ")", ":", "\n", "        ", "config_key", "=", "'all'", "\n", "if", "fixed_start", ":", "\n", "            ", "if", "fixed_goal", ":", "\n", "                ", "config_key", "=", "'fixed_start_fixed_goal'", "\n", "", "else", ":", "\n", "                ", "config_key", "=", "'all'", "#'fixed_start'", "\n", "", "", "self", ".", "env", "=", "sawyer_door_hook", ".", "SawyerDoorHookEnv", "(", "**", "door_configs", "[", "config_key", "]", ")", "\n", "Wrapper", ".", "__init__", "(", "self", ",", "self", ".", "env", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerDoorGoalEnv.step": [[85, 89], ["sawyer_door.SawyerDoorGoalEnv.env.step", "sawyer_door.SawyerDoorGoalEnv.compute_rewards"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_rewards"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "reward", "=", "self", ".", "compute_rewards", "(", "action", ",", "ob", ")", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerDoorGoalEnv.compute_rewards": [[90, 95], ["sawyer_door.SawyerDoorGoalEnv.goal_distance"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerDoorGoalEnv.goal_distance"], ["", "def", "compute_rewards", "(", "self", ",", "actions", ",", "obs", ")", ":", "\n", "        ", "achieved_goals", "=", "obs", "[", "'state_achieved_goal'", "]", "\n", "desired_goals", "=", "obs", "[", "'state_desired_goal'", "]", "\n", "distance", "=", "self", ".", "goal_distance", "(", "achieved_goals", ",", "desired_goals", ")", "\n", "return", "-", "(", "distance", ">", "self", ".", "threshold", ")", ".", "astype", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerDoorGoalEnv.compute_reward": [[96, 98], ["sawyer_door.SawyerDoorGoalEnv.compute_rewards"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_rewards"], ["", "def", "compute_reward", "(", "self", ",", "actions", ",", "obs", ")", ":", "\n", "        ", "return", "self", ".", "compute_rewards", "(", "actions", ",", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerDoorGoalEnv.goal_distance": [[100, 103], ["numpy.linalg.norm"], "methods", ["None"], ["", "def", "goal_distance", "(", "self", ",", "states", ",", "goal_states", ")", ":", "\n", "        ", "diff", "=", "states", "-", "goal_states", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "diff", "[", "...", ",", "-", "1", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.SawyerDoorGoalEnv.get_diagnostics": [[104, 127], ["numpy.array", "collections.OrderedDict", "collections.OrderedDict.update", "sawyer_door.SawyerDoorGoalEnv.door_distance", "numpy.min", "wgcsl.envs.env_util.create_stats_ordered_dict", "numpy.tile", "range"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict"], ["", "def", "get_diagnostics", "(", "self", ",", "trajectories", ",", "desired_goal_states", ")", ":", "\n", "        ", "\"\"\"\n        Logs things\n\n        Args:\n            trajectories: Numpy Array [# Trajectories x Max Path Length x State Dim]\n            desired_goal_states: Numpy Array [# Trajectories x State Dim]\n\n        \"\"\"", "\n", "puck_distances", "=", "np", ".", "array", "(", "[", "self", ".", "door_distance", "(", "trajectories", "[", "i", "]", ",", "np", ".", "tile", "(", "desired_goal_states", "[", "i", "]", ",", "(", "trajectories", ".", "shape", "[", "1", "]", ",", "1", ")", ")", ")", "for", "i", "in", "range", "(", "trajectories", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n", "statistics", "=", "OrderedDict", "(", ")", "\n", "for", "stat_name", ",", "stat", "in", "[", "\n", "(", "'final door distance'", ",", "puck_distances", "[", ":", ",", "-", "1", "]", ")", ",", "\n", "(", "'min door distance'", ",", "np", ".", "min", "(", "puck_distances", ",", "axis", "=", "-", "1", ")", ")", ",", "\n", "]", ":", "\n", "            ", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "stat_name", ",", "\n", "stat", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", ")", ")", "\n", "\n", "", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door.main": [[129, 140], ["sawyer_door.SawyerDoorGoalEnv", "range", "SawyerDoorGoalEnv.sample_goal", "SawyerDoorGoalEnv.reset", "range", "numpy.stack", "np.stack.append", "sawyer_door.SawyerDoorGoalEnv.step", "SawyerDoorGoalEnv.action_space.sample"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.sample_goal", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.sample"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "e", "=", "SawyerDoorGoalEnv", "(", "discrete_action", "=", "True", ",", "fixed_start", "=", "True", ")", "\n", "for", "traj", "in", "range", "(", "20", ")", ":", "\n", "        ", "desired_goal_state", "=", "e", ".", "sample_goal", "(", ")", "\n", "states", "=", "[", "]", "\n", "s", "=", "e", ".", "reset", "(", ")", "\n", "for", "step", "in", "range", "(", "1", ")", ":", "\n", "            ", "states", ".", "append", "(", "s", ")", "\n", "s", ",", "_", ",", "_", ",", "_", "=", "e", ".", "step", "(", "e", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "#e.render()", "\n", "", "states", "=", "np", ".", "stack", "(", "states", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.walls.Wall.__init__": [[19, 58], ["walls.Segment", "walls.Segment", "walls.Segment", "walls.Segment"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_x", ",", "max_x", ",", "min_y", ",", "max_y", ",", "min_dist", ",", "thickness", ",", "\n", "epsilon_from_wall", "=", "0.01", ")", ":", "\n", "        ", "self", ".", "top_segment", "=", "Segment", "(", "\n", "min_x", ",", "\n", "max_y", ",", "\n", "max_x", ",", "\n", "max_y", ",", "\n", ")", "\n", "self", ".", "bottom_segment", "=", "Segment", "(", "\n", "min_x", ",", "\n", "min_y", ",", "\n", "max_x", ",", "\n", "min_y", ",", "\n", ")", "\n", "self", ".", "left_segment", "=", "Segment", "(", "\n", "min_x", ",", "\n", "min_y", ",", "\n", "min_x", ",", "\n", "max_y", ",", "\n", ")", "\n", "self", ".", "right_segment", "=", "Segment", "(", "\n", "max_x", ",", "\n", "min_y", ",", "\n", "max_x", ",", "\n", "max_y", ",", "\n", ")", "\n", "self", ".", "segments", "=", "[", "\n", "self", ".", "top_segment", ",", "\n", "self", ".", "bottom_segment", ",", "\n", "self", ".", "right_segment", ",", "\n", "self", ".", "left_segment", ",", "\n", "]", "\n", "self", ".", "min_dist", "=", "min_dist", "\n", "self", ".", "thickness", "=", "thickness", "\n", "self", ".", "epsilon_from_wall", "=", "epsilon_from_wall", "\n", "self", ".", "max_x", "=", "max_x", "\n", "self", ".", "min_x", "=", "min_x", "\n", "self", ".", "max_y", "=", "max_y", "\n", "self", ".", "min_y", "=", "min_y", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.walls.Wall.contains_point": [[59, 62], ["None"], "methods", ["None"], ["", "def", "contains_point", "(", "self", ",", "point", ")", ":", "\n", "        ", "return", "(", "self", ".", "min_x", "<", "point", "[", "0", "]", "<", "self", ".", "max_x", ")", "and", "(", "\n", "self", ".", "min_y", "<", "point", "[", "1", "]", "<", "self", ".", "max_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.walls.Wall.handle_collision": [[63, 83], ["walls.Wall.top_segment.intersects_with", "walls.Wall.bottom_segment.intersects_with", "walls.Wall.right_segment.intersects_with", "walls.Wall.left_segment.intersects_with"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.walls.Segment.intersects_with", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.walls.Segment.intersects_with", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.walls.Segment.intersects_with", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.walls.Segment.intersects_with"], ["", "def", "handle_collision", "(", "self", ",", "start_point", ",", "end_point", ")", ":", "\n", "        ", "trajectory_segment", "=", "(", "\n", "start_point", "[", "0", "]", ",", "\n", "start_point", "[", "1", "]", ",", "\n", "end_point", "[", "0", "]", ",", "\n", "end_point", "[", "1", "]", ",", "\n", ")", "\n", "if", "(", "self", ".", "top_segment", ".", "intersects_with", "(", "trajectory_segment", ")", "and", "\n", "end_point", "[", "1", "]", "<=", "start_point", "[", "1", "]", ">=", "self", ".", "max_y", ")", ":", "\n", "            ", "end_point", "[", "1", "]", "=", "self", ".", "max_y", "+", "self", ".", "epsilon_from_wall", "\n", "", "if", "(", "self", ".", "bottom_segment", ".", "intersects_with", "(", "trajectory_segment", ")", "and", "\n", "end_point", "[", "1", "]", ">=", "start_point", "[", "1", "]", "<=", "self", ".", "min_y", ")", ":", "\n", "            ", "end_point", "[", "1", "]", "=", "self", ".", "min_y", "-", "self", ".", "epsilon_from_wall", "\n", "", "if", "(", "self", ".", "right_segment", ".", "intersects_with", "(", "trajectory_segment", ")", "and", "\n", "end_point", "[", "0", "]", "<=", "start_point", "[", "0", "]", ">=", "self", ".", "max_x", ")", ":", "\n", "            ", "end_point", "[", "0", "]", "=", "self", ".", "max_x", "+", "self", ".", "epsilon_from_wall", "\n", "", "if", "(", "self", ".", "left_segment", ".", "intersects_with", "(", "trajectory_segment", ")", "and", "\n", "end_point", "[", "0", "]", ">=", "start_point", "[", "0", "]", "<=", "self", ".", "min_x", ")", ":", "\n", "            ", "end_point", "[", "0", "]", "=", "self", ".", "min_x", "-", "self", ".", "epsilon_from_wall", "\n", "", "return", "end_point", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.walls.Segment.__init__": [[86, 91], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "x0", ",", "y0", ",", "x1", ",", "y1", ")", ":", "\n", "        ", "self", ".", "x0", "=", "x0", "\n", "self", ".", "y0", "=", "y0", "\n", "self", ".", "x1", "=", "x1", "\n", "self", ".", "y1", "=", "y1", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.walls.Segment.intersects_with": [[92, 102], ["max", "min", "max", "min", "min", "min", "max", "max", "min", "min", "max", "max"], "methods", ["None"], ["", "def", "intersects_with", "(", "self", ",", "s2", ")", ":", "\n", "        ", "left", "=", "max", "(", "min", "(", "self", ".", "x0", ",", "self", ".", "x1", ")", ",", "min", "(", "s2", "[", "0", "]", ",", "s2", "[", "2", "]", ")", ")", "\n", "right", "=", "min", "(", "max", "(", "self", ".", "x0", ",", "self", ".", "x1", ")", ",", "max", "(", "s2", "[", "0", "]", ",", "s2", "[", "2", "]", ")", ")", "\n", "bottom", "=", "max", "(", "min", "(", "self", ".", "y0", ",", "self", ".", "y1", ")", ",", "min", "(", "s2", "[", "1", "]", ",", "s2", "[", "3", "]", ")", ")", "\n", "top", "=", "min", "(", "max", "(", "self", ".", "y0", ",", "self", ".", "y1", ")", ",", "max", "(", "s2", "[", "1", "]", ",", "s2", "[", "3", "]", ")", ")", "\n", "\n", "if", "bottom", ">", "top", "or", "left", ">", "right", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.walls.VerticalWall.__init__": [[105, 123], ["walls.Wall.__init__"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "min_dist", ",", "x_pos", ",", "bottom_y", ",", "top_y", ",", "thickness", "=", "0.0", ")", ":", "\n", "        ", "min_y", "=", "bottom_y", "-", "min_dist", "-", "thickness", "\n", "max_y", "=", "top_y", "+", "min_dist", "+", "thickness", "\n", "assert", "min_y", "<", "max_y", "\n", "min_x", "=", "x_pos", "-", "min_dist", "-", "thickness", "\n", "max_x", "=", "x_pos", "+", "min_dist", "+", "thickness", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "min_x", "=", "min_x", ",", "\n", "max_x", "=", "max_x", ",", "\n", "min_y", "=", "min_y", ",", "\n", "max_y", "=", "max_y", ",", "\n", "min_dist", "=", "min_dist", ",", "\n", "thickness", "=", "thickness", ",", "\n", ")", "\n", "self", ".", "endpoint1", "=", "(", "x_pos", "+", "thickness", ",", "top_y", "+", "thickness", ")", "\n", "self", ".", "endpoint2", "=", "(", "x_pos", "+", "thickness", ",", "bottom_y", "-", "thickness", ")", "\n", "self", ".", "endpoint3", "=", "(", "x_pos", "-", "thickness", ",", "bottom_y", "-", "thickness", ")", "\n", "self", ".", "endpoint4", "=", "(", "x_pos", "-", "thickness", ",", "top_y", "+", "thickness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.walls.HorizontalWall.__init__": [[126, 144], ["walls.Wall.__init__"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "min_dist", ",", "y_pos", ",", "left_x", ",", "right_x", ",", "thickness", "=", "0.0", ")", ":", "\n", "        ", "min_y", "=", "y_pos", "-", "min_dist", "-", "thickness", "\n", "max_y", "=", "y_pos", "+", "min_dist", "+", "thickness", "\n", "min_x", "=", "left_x", "-", "min_dist", "-", "thickness", "\n", "max_x", "=", "right_x", "+", "min_dist", "+", "thickness", "\n", "assert", "min_x", "<", "max_x", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "min_x", "=", "min_x", ",", "\n", "max_x", "=", "max_x", ",", "\n", "min_y", "=", "min_y", ",", "\n", "max_y", "=", "max_y", ",", "\n", "min_dist", "=", "min_dist", ",", "\n", "thickness", "=", "thickness", ",", "\n", ")", "\n", "self", ".", "endpoint1", "=", "(", "right_x", "+", "thickness", ",", "y_pos", "+", "thickness", ")", "\n", "self", ".", "endpoint2", "=", "(", "right_x", "+", "thickness", ",", "y_pos", "-", "thickness", ")", "\n", "self", ".", "endpoint3", "=", "(", "left_x", "-", "thickness", ",", "y_pos", "-", "thickness", ")", "\n", "self", ".", "endpoint4", "=", "(", "left_x", "-", "thickness", ",", "y_pos", "+", "thickness", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.serializable.Serializable.__init__": [[13, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__args", "=", "args", "\n", "self", ".", "__kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.serializable.Serializable.quick_init": [[17, 44], ["getattr", "setattr", "inspect.getfullargspec", "inspect.getargspec", "tuple", "tuple", "locals_[].copy", "dict", "dict"], "methods", ["None"], ["", "def", "quick_init", "(", "self", ",", "locals_", ")", ":", "\n", "        ", "if", "getattr", "(", "self", ",", "\"_serializable_initialized\"", ",", "False", ")", ":", "\n", "            ", "return", "\n", "", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "            ", "spec", "=", "inspect", ".", "getfullargspec", "(", "self", ".", "__init__", ")", "\n", "# Exclude the first \"self\" parameter", "\n", "if", "spec", ".", "varkw", ":", "\n", "                ", "kwargs", "=", "locals_", "[", "spec", ".", "varkw", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "kwargs", "=", "dict", "(", ")", "\n", "", "if", "spec", ".", "kwonlyargs", ":", "\n", "                ", "for", "key", "in", "spec", ".", "kwonlyargs", ":", "\n", "                    ", "kwargs", "[", "key", "]", "=", "locals_", "[", "key", "]", "\n", "", "", "", "else", ":", "\n", "            ", "spec", "=", "inspect", ".", "getargspec", "(", "self", ".", "__init__", ")", "\n", "if", "spec", ".", "keywords", ":", "\n", "                ", "kwargs", "=", "locals_", "[", "spec", ".", "keywords", "]", "\n", "", "else", ":", "\n", "                ", "kwargs", "=", "dict", "(", ")", "\n", "", "", "if", "spec", ".", "varargs", ":", "\n", "            ", "varargs", "=", "locals_", "[", "spec", ".", "varargs", "]", "\n", "", "else", ":", "\n", "            ", "varargs", "=", "tuple", "(", ")", "\n", "", "in_order_args", "=", "[", "locals_", "[", "arg", "]", "for", "arg", "in", "spec", ".", "args", "]", "[", "1", ":", "]", "\n", "self", ".", "__args", "=", "tuple", "(", "in_order_args", ")", "+", "varargs", "\n", "self", ".", "__kwargs", "=", "kwargs", "\n", "setattr", "(", "self", ",", "\"_serializable_initialized\"", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.serializable.Serializable.__getstate__": [[45, 47], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"__args\"", ":", "self", ".", "__args", ",", "\"__kwargs\"", ":", "self", ".", "__kwargs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.serializable.Serializable.__setstate__": [[48, 57], ["serializable.Serializable.__dict__.update", "inspect.getfullargspec", "inspect.getargspec", "type", "dict", "zip"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "# convert all __args to keyword-based arguments", "\n", "        ", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "0", ")", ":", "\n", "            ", "spec", "=", "inspect", ".", "getfullargspec", "(", "self", ".", "__init__", ")", "\n", "", "else", ":", "\n", "            ", "spec", "=", "inspect", ".", "getargspec", "(", "self", ".", "__init__", ")", "\n", "", "in_order_args", "=", "spec", ".", "args", "[", "1", ":", "]", "\n", "out", "=", "type", "(", "self", ")", "(", "**", "dict", "(", "zip", "(", "in_order_args", ",", "d", "[", "\"__args\"", "]", ")", ",", "**", "d", "[", "\"__kwargs\"", "]", ")", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "out", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.serializable.Serializable.clone": [[58, 66], ["isinstance", "obj.__getstate__", "dict", "type().__new__", "type().__new__.__setstate__", "type", "type"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.CloudpickleWrapper.__getstate__", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.CloudpickleWrapper.__setstate__"], ["", "@", "classmethod", "\n", "def", "clone", "(", "cls", ",", "obj", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "obj", ",", "Serializable", ")", "\n", "d", "=", "obj", ".", "__getstate__", "(", ")", "\n", "d", "[", "\"__kwargs\"", "]", "=", "dict", "(", "d", "[", "\"__kwargs\"", "]", ",", "**", "kwargs", ")", "\n", "out", "=", "type", "(", "obj", ")", ".", "__new__", "(", "type", "(", "obj", ")", ")", "\n", "out", ".", "__setstate__", "(", "d", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.__init__": [[24, 87], ["sawyer_door_hook.SawyerDoorHookEnv.quick_init", "wgcsl.envs.env_util.get_asset_full_path", "wgcsl.envs.base.SawyerXYZEnv.__init__", "wgcsl.envs.multitask_env.MultitaskEnv.__init__", "numpy.array", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Dict", "sawyer_door_hook.SawyerDoorHookEnv.model.get_joint_qpos_addr", "sawyer_door_hook.SawyerDoorHookEnv.reset", "locals", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.get_asset_full_path", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "goal_low", "=", "(", "0", ",", ")", ",", "\n", "goal_high", "=", "(", "0.83", ",", ")", ",", "\n", "action_reward_scale", "=", "0", ",", "\n", "reward_type", "=", "'angle_difference'", ",", "\n", "indicator_threshold", "=", "(", ".02", ",", ".03", ")", ",", "\n", "fix_goal", "=", "False", ",", "\n", "fixed_goal", "=", "(", "-", ".25", ")", ",", "\n", "reset_free", "=", "False", ",", "\n", "fixed_hand_z", "=", "0.12", ",", "\n", "hand_low", "=", "(", "-", "0.1", ",", "0.45", ",", "0.15", ")", ",", "\n", "hand_high", "=", "(", "0.", ",", "0.65", ",", ".225", ")", ",", "\n", "target_pos_scale", "=", "1", ",", "\n", "target_angle_scale", "=", "1", ",", "\n", "min_angle", "=", "0", ",", "\n", "max_angle", "=", "0.83", ",", "\n", "xml_path", "=", "'sawyer_xyz/sawyer_door_pull_hook.xml'", ",", "\n", "**", "sawyer_xyz_kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "quick_init", "(", "locals", "(", ")", ")", "\n", "self", ".", "model_name", "=", "get_asset_full_path", "(", "xml_path", ")", "\n", "SawyerXYZEnv", ".", "__init__", "(", "\n", "self", ",", "\n", "self", ".", "model_name", ",", "\n", "hand_low", "=", "hand_low", ",", "\n", "hand_high", "=", "hand_high", ",", "\n", "**", "sawyer_xyz_kwargs", "\n", ")", "\n", "MultitaskEnv", ".", "__init__", "(", "self", ")", "\n", "# self.initialize_camera(camera)", "\n", "self", ".", "reward_type", "=", "reward_type", "\n", "self", ".", "indicator_threshold", "=", "indicator_threshold", "\n", "\n", "self", ".", "fix_goal", "=", "fix_goal", "\n", "self", ".", "fixed_goal", "=", "np", ".", "array", "(", "fixed_goal", ")", "\n", "self", ".", "goal_space", "=", "Box", "(", "np", ".", "array", "(", "goal_low", ")", ",", "np", ".", "array", "(", "goal_high", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_state_goal", "=", "None", "\n", "self", ".", "fixed_hand_z", "=", "fixed_hand_z", "\n", "\n", "self", ".", "action_space", "=", "Box", "(", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "state_space", "=", "Box", "(", "\n", "np", ".", "concatenate", "(", "(", "hand_low", ",", "[", "min_angle", "]", ")", ")", ",", "\n", "np", ".", "concatenate", "(", "(", "hand_high", ",", "[", "max_angle", "]", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", ")", "\n", "self", ".", "observation_space", "=", "Dict", "(", "[", "\n", "(", "'observation'", ",", "self", ".", "state_space", ")", ",", "\n", "(", "'desired_goal'", ",", "self", ".", "goal_space", ")", ",", "\n", "(", "'achieved_goal'", ",", "self", ".", "goal_space", ")", ",", "\n", "(", "'state_observation'", ",", "self", ".", "state_space", ")", ",", "\n", "(", "'state_desired_goal'", ",", "self", ".", "goal_space", ")", ",", "\n", "(", "'state_achieved_goal'", ",", "self", ".", "goal_space", ")", ",", "\n", "]", ")", "\n", "self", ".", "action_reward_scale", "=", "action_reward_scale", "\n", "self", ".", "target_pos_scale", "=", "target_pos_scale", "\n", "self", ".", "target_angle_scale", "=", "target_angle_scale", "\n", "self", ".", "reset_free", "=", "reset_free", "\n", "self", ".", "door_angle_idx", "=", "self", ".", "model", ".", "get_joint_qpos_addr", "(", "'doorjoint'", ")", "\n", "#ensure env does not start in weird positions", "\n", "self", ".", "reset_free", "=", "True", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "reset_free", "=", "reset_free", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.viewer_setup": [[88, 96], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "-", "1", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "0", "]", "=", "-", ".2", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "1", "]", "=", ".55", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "=", "0.6", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "0.25", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "60", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "360", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.step": [[97, 107], ["sawyer_door_hook.SawyerDoorHookEnv.set_xyz_action", "numpy.zeros", "sawyer_door_hook.SawyerDoorHookEnv.do_simulation", "sawyer_door_hook.SawyerDoorHookEnv._get_info", "sawyer_door_hook.SawyerDoorHookEnv._get_obs", "sawyer_door_hook.SawyerDoorHookEnv.compute_reward"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerXYZEnv.set_xyz_action", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._get_info", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._get_obs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "set_xyz_action", "(", "action", ")", "\n", "u", "=", "np", ".", "zeros", "(", "7", ")", "\n", "self", ".", "do_simulation", "(", "u", ",", "self", ".", "frame_skip", ")", "\n", "info", "=", "self", ".", "_get_info", "(", ")", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "reward", "=", "self", ".", "compute_reward", "(", "action", ",", "ob", ")", "\n", "done", "=", "False", "\n", "# self.render()", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv._get_obs": [[108, 119], ["sawyer_door_hook.SawyerDoorHookEnv.get_endeff_pos", "sawyer_door_hook.SawyerDoorHookEnv.get_door_angle", "numpy.concatenate", "dict"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerMocapBase.get_endeff_pos", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.get_door_angle"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "pos", "=", "self", ".", "get_endeff_pos", "(", ")", "\n", "angle", "=", "self", ".", "get_door_angle", "(", ")", "\n", "flat_obs", "=", "np", ".", "concatenate", "(", "(", "pos", ",", "angle", ")", ")", "\n", "return", "dict", "(", "\n", "observation", "=", "flat_obs", ",", "\n", "desired_goal", "=", "self", ".", "_state_goal", ",", "\n", "achieved_goal", "=", "flat_obs", "[", "-", "1", ":", "]", ",", "\n", "state_observation", "=", "flat_obs", ",", "\n", "state_desired_goal", "=", "self", ".", "_state_goal", ",", "\n", "state_achieved_goal", "=", "flat_obs", "[", "-", "1", ":", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv._get_info": [[121, 129], ["dict", "numpy.abs", "sawyer_door_hook.SawyerDoorHookEnv.get_door_angle"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.get_door_angle"], ["", "def", "_get_info", "(", "self", ")", ":", "\n", "        ", "angle_diff", "=", "np", ".", "abs", "(", "self", ".", "get_door_angle", "(", ")", "-", "self", ".", "_state_goal", "[", "-", "1", "]", ")", "[", "0", "]", "\n", "info", "=", "dict", "(", "\n", "angle_difference", "=", "angle_diff", ",", "\n", "angle_success", "=", "(", "angle_diff", "<", "self", ".", "indicator_threshold", "[", "0", "]", ")", ".", "astype", "(", "\n", "float", ")", ",", "\n", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.get_door_angle": [[130, 132], ["numpy.array", "sawyer_door_hook.SawyerDoorHookEnv.data.get_joint_qpos"], "methods", ["None"], ["", "def", "get_door_angle", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "self", ".", "data", ".", "get_joint_qpos", "(", "'doorjoint'", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.endeff_id": [[133, 136], ["sawyer_door_hook.SawyerDoorHookEnv.model.body_names.index"], "methods", ["None"], ["", "@", "property", "\n", "def", "endeff_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "body_names", ".", "index", "(", "'leftclaw'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.compute_rewards": [[137, 140], ["numpy.array"], "methods", ["None"], ["", "def", "compute_rewards", "(", "self", ",", "actions", ",", "obs", ")", ":", "\n", "        ", "r", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.reset_model": [[141, 149], ["sawyer_door_hook.SawyerDoorHookEnv.sample_goal", "sawyer_door_hook.SawyerDoorHookEnv.set_goal", "sawyer_door_hook.SawyerDoorHookEnv.reset_mocap_welds", "sawyer_door_hook.SawyerDoorHookEnv._get_obs", "sawyer_door_hook.SawyerDoorHookEnv._reset_hand", "sawyer_door_hook.SawyerDoorHookEnv._set_door_pos"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.sample_goal", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.set_goal", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerMocapBase.reset_mocap_welds", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._get_obs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._reset_hand", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv._set_door_pos"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "reset_free", ":", "\n", "            ", "self", ".", "_reset_hand", "(", ")", "\n", "self", ".", "_set_door_pos", "(", "0", ")", "\n", "", "goal", "=", "self", ".", "sample_goal", "(", ")", "\n", "self", ".", "set_goal", "(", "goal", ")", "\n", "self", ".", "reset_mocap_welds", "(", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.reset": [[150, 156], ["sawyer_door_hook.SawyerDoorHookEnv.reset_model", "sawyer_door_hook.SawyerDoorHookEnv.viewer_setup"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.reset_model", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.viewer_setup"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# super.reset() does not account for reset-free logic.", "\n", "        ", "ob", "=", "self", ".", "reset_model", "(", ")", "\n", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "self", ".", "viewer_setup", "(", ")", "\n", "", "return", "ob", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv._reset_hand": [[157, 164], ["sawyer_door_hook.SawyerDoorHookEnv.data.qvel.copy", "sawyer_door_hook.SawyerDoorHookEnv.data.qpos.copy", "sawyer_door_hook.SawyerDoorHookEnv.set_state", "sawyer_door_hook.SawyerDoorHookEnv._set_hand_pos", "sawyer_door_hook.SawyerDoorHookEnv.flatten", "sawyer_door_hook.SawyerDoorHookEnv.flatten", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv._set_hand_pos"], ["", "def", "_reset_hand", "(", "self", ")", ":", "\n", "        ", "velocities", "=", "self", ".", "data", ".", "qvel", ".", "copy", "(", ")", "\n", "angles", "=", "self", ".", "data", ".", "qpos", ".", "copy", "(", ")", "\n", "# Do this to make sure the robot isn't in some weird configuration.", "\n", "angles", "[", ":", "7", "]", "=", "self", ".", "init_arm_angles", "\n", "self", ".", "set_state", "(", "angles", ".", "flatten", "(", ")", ",", "velocities", ".", "flatten", "(", ")", ")", "\n", "self", ".", "_set_hand_pos", "(", "np", ".", "array", "(", "[", "-", ".05", ",", ".635", ",", ".225", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv._set_hand_pos": [[165, 170], ["range", "sawyer_door_hook.SawyerDoorHookEnv.data.set_mocap_pos", "sawyer_door_hook.SawyerDoorHookEnv.data.set_mocap_quat", "sawyer_door_hook.SawyerDoorHookEnv.do_simulation", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.do_simulation"], ["", "def", "_set_hand_pos", "(", "self", ",", "pos", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "self", ".", "data", ".", "set_mocap_pos", "(", "'mocap'", ",", "pos", ")", "\n", "self", ".", "data", ".", "set_mocap_quat", "(", "'mocap'", ",", "np", ".", "array", "(", "[", "1", ",", "0", ",", "1", ",", "0", "]", ")", ")", "\n", "self", ".", "do_simulation", "(", "None", ",", "self", ".", "frame_skip", ")", "\n", "", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.init_arm_angles": [[170, 173], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "init_arm_angles", "(", "self", ")", ":", "\n", "        ", "return", "[", "1.7244448", ",", "-", "0.92036369", ",", "0.10234232", ",", "2.11178144", ",", "2.97668632", ",", "-", "0.38664629", ",", "0.54065733", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv._set_door_pos": [[174, 180], ["sawyer_door_hook.SawyerDoorHookEnv.data.qpos.copy", "sawyer_door_hook.SawyerDoorHookEnv.data.qvel.copy", "sawyer_door_hook.SawyerDoorHookEnv.set_state", "sawyer_door_hook.SawyerDoorHookEnv.flatten", "sawyer_door_hook.SawyerDoorHookEnv.flatten"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.set_state"], ["", "def", "_set_door_pos", "(", "self", ",", "pos", ")", ":", "\n", "        ", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "copy", "(", ")", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", ".", "copy", "(", ")", "\n", "qpos", "[", "self", ".", "door_angle_idx", "]", "=", "pos", "\n", "qvel", "[", "self", ".", "door_angle_idx", "]", "=", "0", "\n", "self", ".", "set_state", "(", "qpos", ".", "flatten", "(", ")", ",", "qvel", ".", "flatten", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.goal_dim": [[183, 186], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "goal_dim", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.set_goal": [[187, 189], ["None"], "methods", ["None"], ["", "def", "set_goal", "(", "self", ",", "goal", ")", ":", "\n", "        ", "self", ".", "_state_goal", "=", "goal", "[", "'state_desired_goal'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.sample_goals": [[190, 206], ["numpy.repeat", "numpy.random.uniform", "sawyer_door_hook.SawyerDoorHookEnv.fixed_goal.copy"], "methods", ["None"], ["", "def", "sample_goals", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "fix_goal", ":", "\n", "            ", "goals", "=", "np", ".", "repeat", "(", "\n", "self", ".", "fixed_goal", ".", "copy", "(", ")", "[", "None", "]", ",", "\n", "batch_size", ",", "\n", "0", "\n", ")", "\n", "", "else", ":", "\n", "            ", "goals", "=", "np", ".", "random", ".", "uniform", "(", "\n", "self", ".", "goal_space", ".", "low", ",", "\n", "self", ".", "goal_space", ".", "high", ",", "\n", "size", "=", "(", "batch_size", ",", "self", ".", "goal_space", ".", "low", ".", "size", ")", ",", "\n", ")", "\n", "", "return", "{", "\n", "'desired_goal'", ":", "goals", ",", "\n", "'state_desired_goal'", ":", "goals", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.set_to_goal_angle": [[208, 215], ["angle.copy", "sawyer_door_hook.SawyerDoorHookEnv.data.qpos.flat.copy", "sawyer_door_hook.SawyerDoorHookEnv.data.qvel.flat.copy", "angle.copy", "sawyer_door_hook.SawyerDoorHookEnv.set_state"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.set_state"], ["", "def", "set_to_goal_angle", "(", "self", ",", "angle", ")", ":", "\n", "        ", "self", ".", "_state_goal", "=", "angle", ".", "copy", "(", ")", "\n", "qpos", "=", "self", ".", "data", ".", "qpos", ".", "flat", ".", "copy", "(", ")", "\n", "qvel", "=", "self", ".", "data", ".", "qvel", ".", "flat", ".", "copy", "(", ")", "\n", "qpos", "[", "-", "1", "]", "=", "angle", ".", "copy", "(", ")", "\n", "qvel", "[", "-", "1", "]", "=", "0", "\n", "self", ".", "set_state", "(", "qpos", ",", "qvel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.set_to_goal_pos": [[216, 222], ["range", "sawyer_door_hook.SawyerDoorHookEnv.data.set_mocap_pos", "sawyer_door_hook.SawyerDoorHookEnv.data.set_mocap_quat", "numpy.zeros", "sawyer_door_hook.SawyerDoorHookEnv.do_simulation", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.do_simulation"], ["", "def", "set_to_goal_pos", "(", "self", ",", "xyz", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "self", ".", "data", ".", "set_mocap_pos", "(", "'mocap'", ",", "np", ".", "array", "(", "xyz", ")", ")", "\n", "self", ".", "data", ".", "set_mocap_quat", "(", "'mocap'", ",", "np", ".", "array", "(", "[", "1", ",", "0", ",", "1", ",", "0", "]", ")", ")", "\n", "u", "=", "np", ".", "zeros", "(", "7", ")", "\n", "self", ".", "do_simulation", "(", "u", ",", "self", ".", "frame_skip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.get_goal": [[223, 227], ["None"], "methods", ["None"], ["", "", "def", "get_goal", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'desired_goal'", ":", "self", ".", "_state_goal", ",", "\n", "'state_desired_goal'", ":", "self", ".", "_state_goal", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.set_to_goal": [[229, 231], ["NotImplementedError"], "methods", ["None"], ["", "def", "set_to_goal", "(", "self", ",", "goal", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Hard to do because what if the hand is in \"", "\n", "\"the door? Use presampled goals.\"", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.get_diagnostics": [[233, 252], ["collections.OrderedDict", "wgcsl.envs.env_util.get_stat_in_paths", "collections.OrderedDict.update", "collections.OrderedDict.update", "wgcsl.envs.env_util.create_stats_ordered_dict", "wgcsl.envs.env_util.create_stats_ordered_dict"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.get_stat_in_paths", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict"], ["", "def", "get_diagnostics", "(", "self", ",", "paths", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "statistics", "=", "OrderedDict", "(", ")", "\n", "for", "stat_name", "in", "[", "\n", "'angle_difference'", ",", "\n", "'angle_success'", "\n", "]", ":", "\n", "            ", "stat_name", "=", "stat_name", "\n", "stat", "=", "get_stat_in_paths", "(", "paths", ",", "'env_infos'", ",", "stat_name", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'%s%s'", "%", "(", "prefix", ",", "stat_name", ")", ",", "\n", "stat", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", ")", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Final %s%s'", "%", "(", "prefix", ",", "stat_name", ")", ",", "\n", "[", "s", "[", "-", "1", "]", "for", "s", "in", "stat", "]", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", ")", ")", "\n", "", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.get_env_state": [[253, 257], ["super().get_env_state", "sawyer_door_hook.SawyerDoorHookEnv._state_goal.copy"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.get_env_state"], ["", "def", "get_env_state", "(", "self", ")", ":", "\n", "        ", "base_state", "=", "super", "(", ")", ".", "get_env_state", "(", ")", "\n", "goal", "=", "self", ".", "_state_goal", ".", "copy", "(", ")", "\n", "return", "base_state", ",", "goal", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_door_hook.SawyerDoorHookEnv.set_env_state": [[258, 262], ["super().set_env_state"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.set_env_state"], ["", "def", "set_env_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "base_state", ",", "goal", "=", "state", "\n", "super", "(", ")", ".", "set_env_state", "(", "base_state", ")", "\n", "self", ".", "_state_goal", "=", "goal", "", "", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.__init__": [[23, 116], ["point2d.Point2DEnv.quick_init", "numpy.zeros", "numpy.zeros", "numpy.ones", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Dict", "numpy.array", "numpy.array", "len", "logging.getLogger", "logging.getLogger.log", "locals", "numpy.ones", "wgcsl.envs.pygame_viewer.PygameViewer"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.log"], ["def", "__init__", "(", "\n", "self", ",", "\n", "render_dt_msec", "=", "0", ",", "\n", "action_l2norm_penalty", "=", "0", ",", "# disabled for now", "\n", "render_onscreen", "=", "False", ",", "\n", "render_size", "=", "84", ",", "\n", "get_image_base_render_size", "=", "None", ",", "\n", "reward_type", "=", "\"dense\"", ",", "\n", "action_scale", "=", "1.0", ",", "\n", "target_radius", "=", "0.60", ",", "\n", "boundary_dist", "=", "4", ",", "\n", "ball_radius", "=", "0.50", ",", "\n", "walls", "=", "None", ",", "\n", "fixed_goal", "=", "None", ",", "\n", "fixed_goal_set", "=", "None", ",", "\n", "fixed_init_position", "=", "None", ",", "\n", "randomize_position_on_reset", "=", "True", ",", "\n", "images_are_rgb", "=", "False", ",", "# else black and white", "\n", "show_goal", "=", "True", ",", "\n", "pointmass_color", "=", "\"blue\"", ",", "\n", "bg_color", "=", "\"black\"", ",", "\n", "wall_color", "=", "\"white\"", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "if", "walls", "is", "None", ":", "\n", "            ", "walls", "=", "[", "]", "\n", "", "if", "walls", "is", "None", ":", "\n", "            ", "walls", "=", "[", "]", "\n", "", "if", "fixed_goal", "is", "not", "None", ":", "\n", "            ", "fixed_goal", "=", "np", ".", "array", "(", "fixed_goal", ")", "\n", "", "if", "fixed_goal_set", "is", "not", "None", ":", "\n", "            ", "self", ".", "fixed_set", "=", "True", "\n", "self", ".", "fixed_goal_set", "=", "[", "(", "4", ",", "-", "4", ")", ",", "(", "-", "4", ",", "4", ")", ",", "(", "4", ",", "4", ")", ",", "(", "-", "4", ",", "-", "4", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "fixed_set", "=", "False", "\n", "", "if", "fixed_init_position", "is", "not", "None", ":", "\n", "            ", "fixed_init_position", "=", "np", ".", "array", "(", "fixed_init_position", ")", "\n", "", "if", "len", "(", "kwargs", ")", ">", "0", ":", "\n", "            ", "LOGGER", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "LOGGER", ".", "log", "(", "logging", ".", "WARNING", ",", "\"WARNING, ignoring kwargs:\"", ",", "kwargs", ")", "\n", "", "self", ".", "quick_init", "(", "locals", "(", ")", ")", "\n", "self", ".", "render_dt_msec", "=", "render_dt_msec", "\n", "self", ".", "action_l2norm_penalty", "=", "action_l2norm_penalty", "\n", "self", ".", "render_onscreen", "=", "render_onscreen", "\n", "self", ".", "render_size", "=", "render_size", "\n", "self", ".", "reward_type", "=", "reward_type", "\n", "self", ".", "action_scale", "=", "action_scale", "\n", "self", ".", "target_radius", "=", "target_radius", "\n", "self", ".", "boundary_dist", "=", "boundary_dist", "\n", "self", ".", "ball_radius", "=", "ball_radius", "\n", "self", ".", "walls", "=", "walls", "\n", "self", ".", "fixed_goal", "=", "fixed_goal", "\n", "self", ".", "_fixed_init_position", "=", "fixed_init_position", "\n", "self", ".", "randomize_position_on_reset", "=", "randomize_position_on_reset", "\n", "self", ".", "images_are_rgb", "=", "images_are_rgb", "\n", "self", ".", "show_goal", "=", "show_goal", "\n", "self", ".", "pointmass_color", "=", "pointmass_color", "\n", "self", ".", "bg_color", "=", "bg_color", "\n", "self", ".", "_wall_color", "=", "wall_color", "\n", "self", ".", "render_drawer", "=", "None", "\n", "\n", "self", ".", "max_target_distance", "=", "self", ".", "boundary_dist", "-", "self", ".", "target_radius", "\n", "\n", "self", ".", "_target_position", "=", "np", ".", "zeros", "(", "2", ")", "\n", "self", ".", "_position", "=", "np", ".", "zeros", "(", "2", ")", "\n", "\n", "u", "=", "np", ".", "ones", "(", "2", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "-", "u", ",", "u", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "o", "=", "self", ".", "boundary_dist", "*", "np", ".", "ones", "(", "2", ")", "\n", "self", ".", "obs_range", "=", "spaces", ".", "Box", "(", "-", "o", ",", "o", ",", "dtype", "=", "'float32'", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "[", "\n", "(", "'observation'", ",", "self", ".", "obs_range", ")", ",", "\n", "(", "'desired_goal'", ",", "self", ".", "obs_range", ")", ",", "\n", "(", "'achieved_goal'", ",", "self", ".", "obs_range", ")", ",", "\n", "(", "'state_observation'", ",", "self", ".", "obs_range", ")", ",", "\n", "(", "'state_desired_goal'", ",", "self", ".", "obs_range", ")", ",", "\n", "(", "'state_achieved_goal'", ",", "self", ".", "obs_range", ")", ",", "\n", "]", ")", "\n", "\n", "if", "get_image_base_render_size", ":", "\n", "            ", "base_width", ",", "base_height", "=", "get_image_base_render_size", "\n", "self", ".", "_drawer", "=", "PygameViewer", "(", "\n", "screen_width", "=", "base_width", ",", "\n", "screen_height", "=", "base_height", ",", "\n", "x_bounds", "=", "(", "-", "self", ".", "boundary_dist", "-", "self", ".", "ball_radius", ",", "self", ".", "boundary_dist", "+", "self", ".", "ball_radius", ")", ",", "\n", "y_bounds", "=", "(", "-", "self", ".", "boundary_dist", "-", "self", ".", "ball_radius", ",", "self", ".", "boundary_dist", "+", "self", ".", "ball_radius", ")", ",", "\n", "render_onscreen", "=", "self", ".", "render_onscreen", ",", "\n", ")", "\n", "self", ".", "_fixed_get_image_render_size", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "_drawer", "=", "None", "\n", "self", ".", "_fixed_get_image_render_size", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.step": [[117, 161], ["wall.handle_collision.copy", "numpy.clip", "numpy.linalg.norm", "point2d.Point2DEnv._get_obs", "point2d.Point2DEnv.compute_reward", "numpy.clip", "wall.handle_collision", "sum", "wall.handle_collision.copy.copy", "numpy.linalg.norm", "wall.handle_collision"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._get_obs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_reward", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.walls.Wall.handle_collision", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.walls.Wall.handle_collision"], ["", "", "def", "step", "(", "self", ",", "velocities", ")", ":", "\n", "        ", "assert", "self", ".", "action_scale", "<=", "1.0", "\n", "velocities", "=", "np", ".", "clip", "(", "velocities", ",", "a_min", "=", "-", "1", ",", "a_max", "=", "1", ")", "*", "self", ".", "action_scale", "\n", "new_position", "=", "self", ".", "_position", "+", "velocities", "\n", "orig_new_pos", "=", "new_position", ".", "copy", "(", ")", "\n", "for", "wall", "in", "self", ".", "walls", ":", "\n", "            ", "new_position", "=", "wall", ".", "handle_collision", "(", "\n", "self", ".", "_position", ",", "new_position", "\n", ")", "\n", "", "if", "sum", "(", "new_position", "!=", "orig_new_pos", ")", ">", "1", ":", "\n", "            ", "\"\"\"\n            Hack: sometimes you get caught on two walls at a time. If you\n            process the input in the other direction, you might only get\n            caught on one wall instead.\n            \"\"\"", "\n", "new_position", "=", "orig_new_pos", ".", "copy", "(", ")", "\n", "for", "wall", "in", "self", ".", "walls", "[", ":", ":", "-", "1", "]", ":", "\n", "                ", "new_position", "=", "wall", ".", "handle_collision", "(", "\n", "self", ".", "_position", ",", "new_position", "\n", ")", "\n", "\n", "", "", "self", ".", "_position", "=", "new_position", "\n", "self", ".", "_position", "=", "np", ".", "clip", "(", "\n", "self", ".", "_position", ",", "\n", "a_min", "=", "-", "self", ".", "boundary_dist", ",", "\n", "a_max", "=", "self", ".", "boundary_dist", ",", "\n", ")", "\n", "distance_to_target", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "self", ".", "_position", "-", "self", ".", "_target_position", "\n", ")", "\n", "is_success", "=", "distance_to_target", "<", "self", ".", "target_radius", "\n", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "reward", "=", "self", ".", "compute_reward", "(", "velocities", ",", "ob", ")", "\n", "info", "=", "{", "\n", "'radius'", ":", "self", ".", "target_radius", ",", "\n", "'target_position'", ":", "self", ".", "_target_position", ",", "\n", "'distance_to_target'", ":", "distance_to_target", ",", "\n", "'velocity'", ":", "velocities", ",", "\n", "'speed'", ":", "np", ".", "linalg", ".", "norm", "(", "velocities", ")", ",", "\n", "'is_success'", ":", "is_success", ",", "\n", "}", "\n", "done", "=", "False", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.reset": [[163, 174], ["point2d.Point2DEnv._get_obs", "point2d.Point2DEnv.sample_goal", "point2d.Point2DEnv._sample_position"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._get_obs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.sample_goal", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv._sample_position"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_target_position", "=", "self", ".", "sample_goal", "(", ")", "[", "'state_desired_goal'", "]", "\n", "if", "self", ".", "randomize_position_on_reset", ":", "\n", "            ", "self", ".", "_position", "=", "self", ".", "_sample_position", "(", "\n", "self", ".", "obs_range", ".", "low", ",", "\n", "self", ".", "obs_range", ".", "high", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_position", "=", "self", ".", "_fixed_init_position", "\n", "\n", "", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv._position_inside_wall": [[175, 180], ["wall.contains_point"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.walls.Wall.contains_point"], ["", "def", "_position_inside_wall", "(", "self", ",", "pos", ")", ":", "\n", "        ", "for", "wall", "in", "self", ".", "walls", ":", "\n", "            ", "if", "wall", ".", "contains_point", "(", "pos", ")", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv._sample_position": [[181, 186], ["numpy.random.uniform", "point2d.Point2DEnv._position_inside_wall", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv._position_inside_wall"], ["", "def", "_sample_position", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "pos", "=", "np", ".", "random", ".", "uniform", "(", "low", ",", "high", ")", "\n", "while", "self", ".", "_position_inside_wall", "(", "pos", ")", "is", "True", ":", "\n", "            ", "pos", "=", "np", ".", "random", ".", "uniform", "(", "low", ",", "high", ")", "\n", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv._get_obs": [[187, 195], ["dict", "point2d.Point2DEnv._position.copy", "point2d.Point2DEnv._target_position.copy", "point2d.Point2DEnv._position.copy", "point2d.Point2DEnv._position.copy", "point2d.Point2DEnv._target_position.copy", "point2d.Point2DEnv._position.copy"], "methods", ["None"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "\n", "observation", "=", "self", ".", "_position", ".", "copy", "(", ")", ",", "\n", "desired_goal", "=", "self", ".", "_target_position", ".", "copy", "(", ")", ",", "\n", "achieved_goal", "=", "self", ".", "_position", ".", "copy", "(", ")", ",", "\n", "state_observation", "=", "self", ".", "_position", ".", "copy", "(", ")", ",", "\n", "state_desired_goal", "=", "self", ".", "_target_position", ".", "copy", "(", ")", ",", "\n", "state_achieved_goal", "=", "self", ".", "_position", ".", "copy", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.compute_rewards": [[197, 209], ["numpy.linalg.norm", "NotImplementedError", "numpy.abs"], "methods", ["None"], ["", "def", "compute_rewards", "(", "self", ",", "actions", ",", "obs", ")", ":", "\n", "        ", "achieved_goals", "=", "obs", "[", "'state_achieved_goal'", "]", "\n", "desired_goals", "=", "obs", "[", "'state_desired_goal'", "]", "\n", "d", "=", "np", ".", "linalg", ".", "norm", "(", "achieved_goals", "-", "desired_goals", ",", "axis", "=", "-", "1", ")", "\n", "if", "self", ".", "reward_type", "==", "\"sparse\"", ":", "\n", "            ", "return", "-", "(", "d", ">", "self", ".", "target_radius", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "self", ".", "reward_type", "==", "\"dense\"", ":", "\n", "            ", "return", "-", "d", "\n", "", "elif", "self", ".", "reward_type", "==", "'vectorized_dense'", ":", "\n", "            ", "return", "-", "np", ".", "abs", "(", "achieved_goals", "-", "desired_goals", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.get_diagnostics": [[425, 443], ["collections.OrderedDict", "wgcsl.envs.env_util.get_stat_in_paths", "collections.OrderedDict.update", "collections.OrderedDict.update", "wgcsl.envs.env_util.create_stats_ordered_dict", "wgcsl.envs.env_util.create_stats_ordered_dict"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.get_stat_in_paths", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict"], ["", "", "def", "get_diagnostics", "(", "self", ",", "paths", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "statistics", "=", "OrderedDict", "(", ")", "\n", "for", "stat_name", "in", "[", "\n", "'distance_to_target'", ",", "\n", "]", ":", "\n", "            ", "stat_name", "=", "stat_name", "\n", "stat", "=", "get_stat_in_paths", "(", "paths", ",", "'env_infos'", ",", "stat_name", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'%s%s'", "%", "(", "prefix", ",", "stat_name", ")", ",", "\n", "stat", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", ")", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Final %s%s'", "%", "(", "prefix", ",", "stat_name", ")", ",", "\n", "[", "s", "[", "-", "1", "]", "for", "s", "in", "stat", "]", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", ")", ")", "\n", "", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.get_contextual_diagnostics": [[234, 263], ["collections.OrderedDict", "range", "collections.OrderedDict.update", "range", "collections.OrderedDict.update", "len", "numpy.linalg.norm", "values.append", "wgcsl.envs.env_util.create_stats_ordered_dict", "len", "range", "wgcsl.envs.env_util.create_stats_ordered_dict", "len", "numpy.linalg.norm", "values.append"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict"], ["", "def", "get_contextual_diagnostics", "(", "self", ",", "paths", ",", "contexts", ")", ":", "\n", "        ", "diagnostics", "=", "OrderedDict", "(", ")", "\n", "state_key", "=", "\"state_observation\"", "\n", "goal_key", "=", "\"state_desired_goal\"", "\n", "values", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "paths", ")", ")", ":", "\n", "            ", "state", "=", "paths", "[", "i", "]", "[", "\"observations\"", "]", "[", "-", "1", "]", "[", "state_key", "]", "\n", "goal", "=", "contexts", "[", "i", "]", "[", "goal_key", "]", "\n", "distance", "=", "np", ".", "linalg", ".", "norm", "(", "state", "-", "goal", ")", "\n", "values", ".", "append", "(", "distance", ")", "\n", "", "diagnostics_key", "=", "goal_key", "+", "\"/final/distance\"", "\n", "diagnostics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "diagnostics_key", ",", "\n", "values", ",", "\n", ")", ")", "\n", "\n", "values", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "paths", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "paths", "[", "i", "]", "[", "\"observations\"", "]", ")", ")", ":", "\n", "                ", "state", "=", "paths", "[", "i", "]", "[", "\"observations\"", "]", "[", "j", "]", "[", "state_key", "]", "\n", "goal", "=", "contexts", "[", "i", "]", "[", "goal_key", "]", "\n", "distance", "=", "np", ".", "linalg", ".", "norm", "(", "state", "-", "goal", ")", "\n", "values", ".", "append", "(", "distance", ")", "\n", "", "", "diagnostics_key", "=", "goal_key", "+", "\"/distance\"", "\n", "diagnostics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "diagnostics_key", ",", "\n", "values", ",", "\n", ")", ")", "\n", "return", "diagnostics", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.goal_conditioned_diagnostics": [[264, 298], ["collections.OrderedDict", "zip", "numpy.linalg.norm", "distance_to_target_list.append", "is_success_list.append", "collections.OrderedDict.update", "collections.OrderedDict.update", "collections.OrderedDict.update", "wgcsl.envs.env_util.create_stats_ordered_dict", "wgcsl.envs.env_util.create_stats_ordered_dict", "wgcsl.envs.env_util.create_stats_ordered_dict"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict"], ["", "def", "goal_conditioned_diagnostics", "(", "self", ",", "paths", ",", "goals", ")", ":", "\n", "        ", "statistics", "=", "OrderedDict", "(", ")", "\n", "distance_to_target_list", "=", "[", "]", "\n", "is_success_list", "=", "[", "]", "\n", "for", "path", ",", "goal", "in", "zip", "(", "paths", ",", "goals", ")", ":", "\n", "            ", "distance_to_target", "=", "np", ".", "linalg", ".", "norm", "(", "\n", "path", "[", "'observations'", "]", "-", "goal", ",", "\n", "axis", "=", "1", "\n", ")", "\n", "is_success", "=", "distance_to_target", "<", "self", ".", "target_radius", "\n", "distance_to_target_list", ".", "append", "(", "distance_to_target", ")", "\n", "is_success_list", ".", "append", "(", "is_success", ")", "\n", "", "for", "stat_name", ",", "stat_list", "in", "[", "\n", "(", "'distance_to_target'", ",", "distance_to_target_list", ")", ",", "\n", "(", "'is_success'", ",", "is_success_list", ")", ",", "\n", "]", ":", "\n", "            ", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "stat_name", ",", "\n", "stat_list", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", ")", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'{}/final'", ".", "format", "(", "stat_name", ")", ",", "\n", "[", "s", "[", "-", "1", ":", "]", "for", "s", "in", "stat_list", "]", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", "exclude_max_min", "=", "True", ",", "\n", ")", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'{}/initial'", ".", "format", "(", "stat_name", ")", ",", "\n", "[", "s", "[", ":", "1", "]", "for", "s", "in", "stat_list", "]", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", "exclude_max_min", "=", "True", ",", "\n", ")", ")", "\n", "", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.get_goal": [[299, 303], ["point2d.Point2DEnv._target_position.copy", "point2d.Point2DEnv._target_position.copy"], "methods", ["None"], ["", "def", "get_goal", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'desired_goal'", ":", "self", ".", "_target_position", ".", "copy", "(", ")", ",", "\n", "'state_desired_goal'", ":", "self", ".", "_target_position", ".", "copy", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.sample_goals": [[305, 334], ["numpy.random.randint", "len", "numpy.array", "numpy.repeat", "numpy.zeros", "len", "range", "numpy.random.uniform", "point2d.Point2DEnv.fixed_goal.copy", "logging.warning", "point2d.Point2DEnv._sample_position"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv._sample_position"], ["", "def", "sample_goals", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "fixed_set", ":", "\n", "            ", "idxes", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "fixed_goal_set", ")", ",", "size", "=", "batch_size", ")", "\n", "goals", "=", "np", ".", "array", "(", "self", ".", "fixed_goal_set", ")", "[", "idxes", "]", "\n", "", "elif", "not", "self", ".", "fixed_goal", "is", "None", ":", "\n", "            ", "goals", "=", "np", ".", "repeat", "(", "\n", "self", ".", "fixed_goal", ".", "copy", "(", ")", "[", "None", "]", ",", "\n", "batch_size", ",", "\n", "0", "\n", ")", "\n", "", "else", ":", "\n", "            ", "goals", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "obs_range", ".", "low", ".", "size", ")", ")", "\n", "if", "len", "(", "self", ".", "walls", ")", ">", "0", ":", "\n", "                ", "if", "batch_size", ">", "1", ":", "\n", "                    ", "logging", ".", "warning", "(", "\"This is very slow!\"", ")", "\n", "", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "goals", "[", "b", ",", ":", "]", "=", "self", ".", "_sample_position", "(", "\n", "self", ".", "obs_range", ".", "low", ",", "\n", "self", ".", "obs_range", ".", "high", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "                ", "goals", "=", "np", ".", "random", ".", "uniform", "(", "\n", "self", ".", "obs_range", ".", "low", ",", "\n", "self", ".", "obs_range", ".", "high", ",", "\n", "size", "=", "(", "batch_size", ",", "self", ".", "obs_range", ".", "low", ".", "size", ")", ",", "\n", ")", "\n", "", "", "return", "{", "\n", "'desired_goal'", ":", "goals", ",", "\n", "'state_desired_goal'", ":", "goals", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.set_position": [[336, 339], ["None"], "methods", ["None"], ["", "def", "set_position", "(", "self", ",", "pos", ")", ":", "\n", "        ", "self", ".", "_position", "[", "0", "]", "=", "pos", "[", "0", "]", "\n", "self", ".", "_position", "[", "1", "]", "=", "pos", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.get_image": [[342, 369], ["point2d.Point2DEnv.draw", "point2d.Point2DEnv._drawer.get_image", "wgcsl.envs.pygame_viewer.PygameViewer", "point2d.Point2DEnv.transpose", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.draw", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.get_image"], ["def", "get_image", "(", "self", ",", "width", "=", "None", ",", "height", "=", "None", ")", ":", "\n", "        ", "\"\"\"Returns a black and white image\"\"\"", "\n", "if", "self", ".", "_drawer", "is", "None", "or", "(", "\n", "not", "self", ".", "_fixed_get_image_render_size", "\n", "and", "(", "self", ".", "_drawer", ".", "width", "!=", "width", "or", "self", ".", "_drawer", ".", "height", "!=", "height", ")", "\n", ")", ":", "\n", "            ", "if", "width", "!=", "height", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "self", ".", "_drawer", "=", "PygameViewer", "(", "\n", "screen_width", "=", "width", ",", "\n", "screen_height", "=", "height", ",", "\n", "x_bounds", "=", "(", "-", "self", ".", "boundary_dist", "-", "self", ".", "ball_radius", ",", "self", ".", "boundary_dist", "+", "self", ".", "ball_radius", ")", ",", "\n", "y_bounds", "=", "(", "-", "self", ".", "boundary_dist", "-", "self", ".", "ball_radius", ",", "self", ".", "boundary_dist", "+", "self", ".", "ball_radius", ")", ",", "\n", "render_onscreen", "=", "self", ".", "render_onscreen", ",", "\n", ")", "\n", "", "self", ".", "draw", "(", "self", ".", "_drawer", ")", "\n", "if", "width", "and", "height", ":", "\n", "            ", "wh_size", "=", "(", "width", ",", "height", ")", "\n", "", "else", ":", "\n", "            ", "wh_size", "=", "None", "\n", "", "img", "=", "self", ".", "_drawer", ".", "get_image", "(", "wh_size", ")", "\n", "if", "self", ".", "images_are_rgb", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "r", ",", "g", ",", "b", "=", "img", "[", ":", ",", ":", ",", "0", "]", ",", "img", "[", ":", ",", ":", ",", "1", "]", ",", "img", "[", ":", ",", ":", ",", "2", "]", "\n", "img", "=", "(", "-", "r", "+", "b", ")", ".", "transpose", "(", ")", ".", "flatten", "(", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.set_to_goal": [[370, 374], ["None"], "methods", ["None"], ["", "", "def", "set_to_goal", "(", "self", ",", "goal_dict", ")", ":", "\n", "        ", "goal", "=", "goal_dict", "[", "\"state_desired_goal\"", "]", "\n", "self", ".", "_position", "=", "goal", "\n", "self", ".", "_target_position", "=", "goal", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.get_env_state": [[375, 377], ["point2d.Point2DEnv._get_obs"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._get_obs"], ["", "def", "get_env_state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.set_env_state": [[378, 383], ["None"], "methods", ["None"], ["", "def", "set_env_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "position", "=", "state", "[", "\"state_observation\"", "]", "\n", "goal", "=", "state", "[", "\"state_desired_goal\"", "]", "\n", "self", ".", "_position", "=", "position", "\n", "self", ".", "_target_position", "=", "goal", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.draw": [[384, 406], ["drawer.fill", "drawer.draw_solid_circle", "drawer.render", "pygame.Color", "drawer.draw_solid_circle", "pygame.Color", "drawer.draw_rect", "pygame.Color", "pygame.Color"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.fill", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.draw_solid_circle", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.draw_solid_circle", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.draw_rect"], ["", "def", "draw", "(", "self", ",", "drawer", ")", ":", "\n", "        ", "drawer", ".", "fill", "(", "Color", "(", "self", ".", "bg_color", ")", ")", "\n", "if", "self", ".", "show_goal", ":", "\n", "            ", "drawer", ".", "draw_solid_circle", "(", "\n", "self", ".", "_target_position", ",", "\n", "self", ".", "target_radius", ",", "\n", "Color", "(", "'green'", ")", ",", "\n", ")", "\n", "", "drawer", ".", "draw_solid_circle", "(", "\n", "self", ".", "_position", ",", "\n", "self", ".", "ball_radius", ",", "\n", "Color", "(", "self", ".", "pointmass_color", ")", ",", "\n", ")", "\n", "for", "wall", "in", "self", ".", "walls", ":", "\n", "            ", "drawer", ".", "draw_rect", "(", "\n", "wall", ".", "endpoint4", ",", "\n", "wall", ".", "endpoint1", "[", "0", "]", "-", "wall", ".", "endpoint4", "[", "0", "]", ",", "\n", "-", "wall", ".", "endpoint1", "[", "1", "]", "+", "wall", ".", "endpoint2", "[", "1", "]", ",", "\n", "Color", "(", "self", ".", "_wall_color", ")", ",", "\n", "thickness", "=", "1", ",", "\n", ")", "\n", "", "drawer", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.render": [[407, 424], ["point2d.Point2DEnv.draw", "point2d.Point2DEnv.render_drawer.tick", "wgcsl.envs.pygame_viewer.PygameViewer", "point2d.Point2DEnv.render_drawer.check_for_exit"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.draw", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.tick", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.check_for_exit"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ")", ":", "\n", "        ", "if", "close", ":", "\n", "            ", "self", ".", "render_drawer", "=", "None", "\n", "return", "\n", "\n", "", "if", "self", ".", "render_drawer", "is", "None", "or", "self", ".", "render_drawer", ".", "terminated", ":", "\n", "            ", "self", ".", "render_drawer", "=", "PygameViewer", "(", "\n", "self", ".", "render_size", ",", "\n", "self", ".", "render_size", ",", "\n", "x_bounds", "=", "(", "-", "self", ".", "boundary_dist", "-", "self", ".", "ball_radius", ",", "self", ".", "boundary_dist", "+", "self", ".", "ball_radius", ")", ",", "\n", "y_bounds", "=", "(", "-", "self", ".", "boundary_dist", "-", "self", ".", "ball_radius", ",", "self", ".", "boundary_dist", "+", "self", ".", "ball_radius", ")", ",", "\n", "render_onscreen", "=", "True", ",", "\n", ")", "\n", "", "self", ".", "draw", "(", "self", ".", "render_drawer", ")", "\n", "self", ".", "render_drawer", ".", "tick", "(", "self", ".", "render_dt_msec", ")", "\n", "if", "mode", "!=", "'interactive'", ":", "\n", "            ", "self", ".", "render_drawer", ".", "check_for_exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.true_model": [[446, 455], ["numpy.clip", "numpy.clip"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "true_model", "(", "state", ",", "action", ")", ":", "\n", "        ", "velocities", "=", "np", ".", "clip", "(", "action", ",", "a_min", "=", "-", "1", ",", "a_max", "=", "1", ")", "\n", "position", "=", "state", "\n", "new_position", "=", "position", "+", "velocities", "\n", "return", "np", ".", "clip", "(", "\n", "new_position", ",", "\n", "a_min", "=", "-", "Point2DEnv", ".", "boundary_dist", ",", "\n", "a_max", "=", "Point2DEnv", ".", "boundary_dist", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.true_states": [[457, 465], ["point2d.Point2DEnv.true_model", "real_states.append"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.true_model"], ["", "@", "staticmethod", "\n", "def", "true_states", "(", "state", ",", "actions", ")", ":", "\n", "        ", "real_states", "=", "[", "state", "]", "\n", "for", "action", "in", "actions", ":", "\n", "            ", "next_state", "=", "Point2DEnv", ".", "true_model", "(", "state", ",", "action", ")", "\n", "real_states", ".", "append", "(", "next_state", ")", "\n", "state", "=", "next_state", "\n", "", "return", "real_states", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.plot_trajectory": [[466, 541], ["len", "plt.get_cmap", "enumerate", "ax.quiver", "ax.quiver", "ax.plot", "ax.plot", "ax.plot", "ax.plot", "ax.set_ylim", "ax.set_xlim", "len", "plt.get_cmap.", "ax.plot", "ax.plot", "len", "float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "plot_trajectory", "(", "ax", ",", "states", ",", "actions", ",", "goal", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "states", ")", "==", "len", "(", "actions", ")", "+", "1", "\n", "x", "=", "states", "[", ":", ",", "0", "]", "\n", "y", "=", "-", "states", "[", ":", ",", "1", "]", "\n", "num_states", "=", "len", "(", "states", ")", "\n", "plasma_cm", "=", "plt", ".", "get_cmap", "(", "'plasma'", ")", "\n", "for", "i", ",", "state", "in", "enumerate", "(", "states", ")", ":", "\n", "            ", "color", "=", "plasma_cm", "(", "float", "(", "i", ")", "/", "num_states", ")", "\n", "ax", ".", "plot", "(", "state", "[", "0", "]", ",", "-", "state", "[", "1", "]", ",", "\n", "marker", "=", "'o'", ",", "color", "=", "color", ",", "markersize", "=", "10", ",", "\n", ")", "\n", "\n", "", "actions_x", "=", "actions", "[", ":", ",", "0", "]", "\n", "actions_y", "=", "-", "actions", "[", ":", ",", "1", "]", "\n", "\n", "ax", ".", "quiver", "(", "x", "[", ":", "-", "1", "]", ",", "y", "[", ":", "-", "1", "]", ",", "x", "[", "1", ":", "]", "-", "x", "[", ":", "-", "1", "]", ",", "y", "[", "1", ":", "]", "-", "y", "[", ":", "-", "1", "]", ",", "\n", "scale_units", "=", "'xy'", ",", "angles", "=", "'xy'", ",", "scale", "=", "1", ",", "width", "=", "0.005", ")", "\n", "ax", ".", "quiver", "(", "x", "[", ":", "-", "1", "]", ",", "y", "[", ":", "-", "1", "]", ",", "actions_x", ",", "actions_y", ",", "scale_units", "=", "'xy'", ",", "\n", "angles", "=", "'xy'", ",", "scale", "=", "1", ",", "color", "=", "'r'", ",", "\n", "width", "=", "0.0035", ",", ")", "\n", "ax", ".", "plot", "(", "\n", "[", "\n", "-", "Point2DEnv", ".", "boundary_dist", ",", "\n", "-", "Point2DEnv", ".", "boundary_dist", ",", "\n", "]", ",", "\n", "[", "\n", "Point2DEnv", ".", "boundary_dist", ",", "\n", "-", "Point2DEnv", ".", "boundary_dist", ",", "\n", "]", ",", "\n", "color", "=", "'k'", ",", "linestyle", "=", "'-'", ",", "\n", ")", "\n", "ax", ".", "plot", "(", "\n", "[", "\n", "Point2DEnv", ".", "boundary_dist", ",", "\n", "-", "Point2DEnv", ".", "boundary_dist", ",", "\n", "]", ",", "\n", "[", "\n", "Point2DEnv", ".", "boundary_dist", ",", "\n", "Point2DEnv", ".", "boundary_dist", ",", "\n", "]", ",", "\n", "color", "=", "'k'", ",", "linestyle", "=", "'-'", ",", "\n", ")", "\n", "ax", ".", "plot", "(", "\n", "[", "\n", "Point2DEnv", ".", "boundary_dist", ",", "\n", "Point2DEnv", ".", "boundary_dist", ",", "\n", "]", ",", "\n", "[", "\n", "Point2DEnv", ".", "boundary_dist", ",", "\n", "-", "Point2DEnv", ".", "boundary_dist", ",", "\n", "]", ",", "\n", "color", "=", "'k'", ",", "linestyle", "=", "'-'", ",", "\n", ")", "\n", "ax", ".", "plot", "(", "\n", "[", "\n", "Point2DEnv", ".", "boundary_dist", ",", "\n", "-", "Point2DEnv", ".", "boundary_dist", ",", "\n", "]", ",", "\n", "[", "\n", "-", "Point2DEnv", ".", "boundary_dist", ",", "\n", "-", "Point2DEnv", ".", "boundary_dist", ",", "\n", "]", ",", "\n", "color", "=", "'k'", ",", "linestyle", "=", "'-'", ",", "\n", ")", "\n", "\n", "if", "goal", "is", "not", "None", ":", "\n", "            ", "ax", ".", "plot", "(", "goal", "[", "0", "]", ",", "-", "goal", "[", "1", "]", ",", "marker", "=", "'*'", ",", "color", "=", "'g'", ",", "markersize", "=", "15", ")", "\n", "", "ax", ".", "set_ylim", "(", "\n", "-", "Point2DEnv", ".", "boundary_dist", "-", "1", ",", "\n", "Point2DEnv", ".", "boundary_dist", "+", "1", ",", "\n", ")", "\n", "ax", ".", "set_xlim", "(", "\n", "-", "Point2DEnv", ".", "boundary_dist", "-", "1", ",", "\n", "Point2DEnv", ".", "boundary_dist", "+", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DEnv.initialize_camera": [[543, 545], ["None"], "methods", ["None"], ["", "def", "initialize_camera", "(", "self", ",", "init_fctn", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.point2d.Point2DWallEnv.__init__": [[550, 782], ["point2d.Point2DWallEnv.quick_init", "point2d.Point2DEnv.__init__", "locals", "wgcsl.envs.walls.VerticalWall", "wgcsl.envs.walls.VerticalWall", "wgcsl.envs.walls.HorizontalWall", "wgcsl.envs.walls.HorizontalWall", "wgcsl.envs.walls.HorizontalWall", "wgcsl.envs.walls.HorizontalWall", "wgcsl.envs.walls.VerticalWall", "wgcsl.envs.walls.VerticalWall", "wgcsl.envs.walls.HorizontalWall", "wgcsl.envs.walls.VerticalWall", "wgcsl.envs.walls.VerticalWall", "wgcsl.envs.walls.HorizontalWall", "wgcsl.envs.walls.HorizontalWall", "wgcsl.envs.walls.VerticalWall", "wgcsl.envs.walls.HorizontalWall", "wgcsl.envs.walls.HorizontalWall", "wgcsl.envs.walls.HorizontalWall", "wgcsl.envs.walls.VerticalWall", "wgcsl.envs.walls.VerticalWall", "wgcsl.envs.walls.VerticalWall", "wgcsl.envs.walls.HorizontalWall", "wgcsl.envs.walls.HorizontalWall", "wgcsl.envs.walls.HorizontalWall", "wgcsl.envs.walls.VerticalWall", "wgcsl.envs.walls.VerticalWall", "wgcsl.envs.walls.VerticalWall"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "wall_shape", "=", "\"\"", ",", "\n", "wall_thickness", "=", "1.0", ",", "\n", "inner_wall_max_dist", "=", "1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "quick_init", "(", "locals", "(", ")", ")", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "inner_wall_max_dist", "=", "inner_wall_max_dist", "\n", "self", ".", "wall_shape", "=", "wall_shape", "\n", "self", ".", "wall_thickness", "=", "wall_thickness", "\n", "if", "wall_shape", "==", "\"u\"", ":", "\n", "            ", "self", ".", "walls", "=", "[", "\n", "# Right wall", "\n", "VerticalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", "-", "self", ".", "inner_wall_max_dist", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", ")", ",", "\n", "# Left wall", "\n", "VerticalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "-", "self", ".", "inner_wall_max_dist", ",", "\n", "-", "self", ".", "inner_wall_max_dist", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", ")", ",", "\n", "# Bottom wall", "\n", "HorizontalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", "-", "self", ".", "inner_wall_max_dist", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", ")", "\n", "]", "\n", "", "if", "wall_shape", "==", "\"-\"", "or", "wall_shape", "==", "\"h\"", ":", "\n", "            ", "self", ".", "walls", "=", "[", "\n", "HorizontalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", "-", "self", ".", "inner_wall_max_dist", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", ")", "\n", "]", "\n", "", "if", "wall_shape", "==", "\"--\"", ":", "\n", "            ", "self", ".", "walls", "=", "[", "\n", "HorizontalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "-", "self", ".", "inner_wall_max_dist", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", ")", "\n", "]", "\n", "", "if", "wall_shape", "==", "\"---\"", ":", "\n", "            ", "self", ".", "walls", "=", "[", "\n", "HorizontalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "-", "self", ".", "inner_wall_max_dist", "*", "2", ",", "\n", "self", ".", "inner_wall_max_dist", "*", "2", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "]", "\n", "", "if", "wall_shape", "==", "\"big-u\"", ":", "\n", "            ", "self", ".", "walls", "=", "[", "\n", "VerticalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "self", ".", "inner_wall_max_dist", "*", "2", ",", "\n", "-", "self", ".", "inner_wall_max_dist", "*", "2", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "# Left wall", "\n", "VerticalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "-", "self", ".", "inner_wall_max_dist", "*", "2", ",", "\n", "-", "self", ".", "inner_wall_max_dist", "*", "2", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "# Bottom wall", "\n", "HorizontalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", "-", "self", ".", "inner_wall_max_dist", "*", "2", ",", "\n", "self", ".", "inner_wall_max_dist", "*", "2", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "]", "\n", "", "if", "wall_shape", "==", "\"easy-u\"", ":", "\n", "            ", "self", ".", "walls", "=", "[", "\n", "VerticalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "self", ".", "inner_wall_max_dist", "*", "2", ",", "\n", "-", "self", ".", "inner_wall_max_dist", "*", "0.5", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "# Left wall", "\n", "VerticalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "-", "self", ".", "inner_wall_max_dist", "*", "2", ",", "\n", "-", "self", ".", "inner_wall_max_dist", "*", "0.5", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "# Bottom wall", "\n", "HorizontalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", "-", "self", ".", "inner_wall_max_dist", "*", "2", ",", "\n", "self", ".", "inner_wall_max_dist", "*", "2", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "]", "\n", "", "if", "wall_shape", "==", "\"big-h\"", ":", "\n", "            ", "self", ".", "walls", "=", "[", "\n", "# Bottom wall", "\n", "HorizontalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "self", ".", "inner_wall_max_dist", ",", "\n", "-", "self", ".", "inner_wall_max_dist", "*", "2", ",", "\n", "self", ".", "inner_wall_max_dist", "*", "2", ",", "\n", ")", ",", "\n", "]", "\n", "", "if", "wall_shape", "==", "\"box\"", ":", "\n", "            ", "self", ".", "walls", "=", "[", "\n", "# Bottom wall", "\n", "VerticalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "0", ",", "\n", "0", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "]", "\n", "", "if", "wall_shape", "==", "'four-room-v0'", ":", "\n", "            ", "self", ".", "walls", "=", "[", "\n", "HorizontalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "-", "self", ".", "boundary_dist", ",", "\n", "-", "self", ".", "ball_radius", "*", "6", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "HorizontalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "-", "self", ".", "ball_radius", "*", "1.5", ",", "\n", "self", ".", "ball_radius", "*", "1.5", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "HorizontalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "self", ".", "ball_radius", "*", "6", ",", "\n", "self", ".", "boundary_dist", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "VerticalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "self", ".", "ball_radius", "*", "6", ",", "\n", "self", ".", "boundary_dist", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "VerticalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "-", "self", ".", "ball_radius", "*", "1.5", ",", "\n", "self", ".", "ball_radius", "*", "1.5", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "VerticalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "-", "self", ".", "boundary_dist", ",", "\n", "-", "self", ".", "ball_radius", "*", "6", ",", "\n", "self", ".", "wall_thickness", "\n", ")", "\n", "\n", "]", "\n", "", "if", "wall_shape", "==", "'four-room-v1'", ":", "\n", "            ", "self", ".", "walls", "=", "[", "\n", "HorizontalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "-", "self", ".", "boundary_dist", "*", "1.2", ",", "\n", "-", "self", ".", "boundary_dist", "*", "1.05", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "HorizontalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "-", "self", ".", "boundary_dist", "*", "0.17", ",", "\n", "self", ".", "boundary_dist", "*", "0.17", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "HorizontalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "self", ".", "boundary_dist", "*", "1.05", ",", "\n", "self", ".", "boundary_dist", "*", "1.2", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "VerticalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "self", ".", "boundary_dist", "*", "1.05", ",", "\n", "self", ".", "boundary_dist", "*", "1.2", ",", "\n", "self", ".", "wall_thickness", "\n", ")", ",", "\n", "VerticalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "-", "self", ".", "boundary_dist", "*", "0.17", ",", "\n", "self", ".", "boundary_dist", "*", "0.17", ",", "\n", "self", ".", "wall_thickness", "\n", "\n", ")", ",", "\n", "VerticalWall", "(", "\n", "self", ".", "ball_radius", ",", "\n", "0", ",", "\n", "-", "self", ".", "boundary_dist", "*", "1.2", ",", "\n", "-", "self", ".", "boundary_dist", "*", "1.05", ",", "\n", "self", ".", "wall_thickness", "\n", ")", "\n", "\n", "]", "\n", "", "if", "wall_shape", "==", "\"none\"", ":", "\n", "            ", "self", ".", "walls", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.__init__.register_envs": [[4, 81], ["gym.envs.registration.register", "gym.envs.registration.register", "gym.envs.registration.register", "gym.envs.registration.register", "gym.envs.registration.register"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.FetchGoalWrapper.__init__": [[9, 14], ["gym.core.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "action_space", "=", "env", ".", "action_space", "\n", "self", ".", "observation_space", "=", "env", ".", "observation_space", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.FetchGoalWrapper.reset": [[15, 17], ["multi_world_wrapper.FetchGoalWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.FetchGoalWrapper.compute_rewards": [[18, 20], ["multi_world_wrapper.FetchGoalWrapper.env.compute_rewards"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_rewards"], ["", "def", "compute_rewards", "(", "self", ",", "achieved_goal", ",", "desired_goal", ",", "info", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "compute_rewards", "(", "achieved_goal", ",", "desired_goal", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.FetchGoalWrapper.compute_reward": [[21, 23], ["multi_world_wrapper.FetchGoalWrapper.env.compute_reward"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_reward"], ["", "def", "compute_reward", "(", "self", ",", "achieved_goal", ",", "desired_goal", ",", "info", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "compute_reward", "(", "achieved_goal", ",", "desired_goal", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.FetchGoalWrapper.step": [[24, 26], ["multi_world_wrapper.FetchGoalWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.FetchGoalWrapper.render": [[27, 29], ["multi_world_wrapper.FetchGoalWrapper.env.render"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.FetchGoalWrapper.sample_goal": [[30, 33], ["multi_world_wrapper.FetchGoalWrapper.env.env._sample_goal"], "methods", ["None"], ["", "def", "sample_goal", "(", "self", ")", ":", "\n", "        ", "import", "pdb", ";", "pdb", ".", "set_trace", "\n", "return", "self", ".", "env", ".", "env", ".", "_sample_goal", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.ReacherGoalWrapper.__init__": [[37, 50], ["gym.core.Wrapper.__init__", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Dict", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "threshold", "=", "0.05", ")", ":", "\n", "        ", "Wrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "action_space", "=", "env", ".", "action_space", "\n", "desired_goal_box", "=", "Box", "(", "np", ".", "array", "(", "[", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", "]", ")", ",", "np", ".", "array", "(", "[", "np", ".", "inf", ",", "np", ".", "inf", "]", ")", ")", "\n", "achieved_goal_box", "=", "Box", "(", "np", ".", "array", "(", "[", "-", "np", ".", "inf", ",", "-", "np", ".", "inf", "]", ")", ",", "np", ".", "array", "(", "[", "np", ".", "inf", ",", "np", ".", "inf", "]", ")", ")", "\n", "self", ".", "observation_space", "=", "Dict", "(", "[", "\n", "(", "'observation'", ",", "env", ".", "observation_space", ")", ",", "\n", "(", "'desired_goal'", ",", "desired_goal_box", ")", ",", "\n", "(", "'achieved_goal'", ",", "achieved_goal_box", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.ReacherGoalWrapper.reset": [[51, 55], ["multi_world_wrapper.ReacherGoalWrapper.env.reset", "multi_world_wrapper.ReacherGoalWrapper.obs_to_dict"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.util.obs_to_dict"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "obs_dict", "=", "self", ".", "obs_to_dict", "(", "obs", ")", "\n", "return", "obs_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.ReacherGoalWrapper.compute_rewards": [[56, 61], ["numpy.linalg.norm", "numpy.zeros", "numpy.zeros.reshape", "numpy.where"], "methods", ["None"], ["", "def", "compute_rewards", "(", "self", ",", "achieved_goal", ",", "desired_goal", ",", "info", "=", "None", ")", ":", "\n", "        ", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "achieved_goal", "-", "desired_goal", ",", "axis", "=", "1", ")", "\n", "reward", "=", "np", ".", "zeros", "(", "(", "achieved_goal", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "reward", "[", "np", ".", "where", "(", "dist", ">", "self", ".", "threshold", ")", "]", "=", "-", "1", "\n", "return", "reward", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.ReacherGoalWrapper.compute_reward": [[62, 69], ["numpy.linalg.norm", "multi_world_wrapper.ReacherGoalWrapper.compute_rewards", "len"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_rewards"], ["", "def", "compute_reward", "(", "self", ",", "achieved_goal", ",", "desired_goal", ",", "info", "=", "None", ")", ":", "\n", "        ", "if", "len", "(", "achieved_goal", ".", "shape", ")", "==", "2", "and", "achieved_goal", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "            ", "return", "self", ".", "compute_rewards", "(", "achieved_goal", ",", "desired_goal", ")", "\n", "\n", "", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "achieved_goal", "-", "desired_goal", ")", "\n", "reward", "=", "-", "1", "if", "dist", ">", "self", ".", "threshold", "else", "0", "\n", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.ReacherGoalWrapper.obs_to_dict": [[70, 80], ["multi_world_wrapper.ReacherGoalWrapper.env.goal.copy", "obs[].copy"], "methods", ["None"], ["", "def", "obs_to_dict", "(", "self", ",", "obs", ")", ":", "\n", "        ", "obs_g", "=", "self", ".", "env", ".", "goal", ".", "copy", "(", ")", "\n", "obs", "[", "-", "3", ":", "-", "1", "]", "+=", "obs_g", "\n", "obs_ag", "=", "obs", "[", "-", "3", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "obs_dict", "=", "{", "\n", "'observation'", ":", "obs", ",", "\n", "'desired_goal'", ":", "obs_g", ",", "\n", "'achieved_goal'", ":", "obs_ag", "\n", "}", "\n", "return", "obs_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.ReacherGoalWrapper.step": [[82, 91], ["multi_world_wrapper.ReacherGoalWrapper.env.step", "multi_world_wrapper.ReacherGoalWrapper.obs_to_dict", "multi_world_wrapper.ReacherGoalWrapper.compute_reward"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.util.obs_to_dict", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "obs_dict", "=", "self", ".", "obs_to_dict", "(", "obs", ")", "\n", "reward", "=", "self", ".", "compute_reward", "(", "obs_dict", "[", "'desired_goal'", "]", ",", "obs_dict", "[", "'achieved_goal'", "]", ")", "\n", "if", "reward", "==", "0", ":", "\n", "            ", "info", "[", "'is_success'", "]", "=", "True", "\n", "", "else", ":", "\n", "            ", "info", "[", "'is_success'", "]", "=", "False", "\n", "", "return", "obs_dict", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.ReacherGoalWrapper.render": [[92, 94], ["multi_world_wrapper.ReacherGoalWrapper.env.render"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.ReacherGoalWrapper.sample_goal": [[95, 101], ["multi_world_wrapper.ReacherGoalWrapper.np_random.uniform", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "sample_goal", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "goal", "=", "self", ".", "np_random", ".", "uniform", "(", "low", "=", "-", ".2", ",", "high", "=", ".2", ",", "size", "=", "2", ")", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "goal", ")", "<", "0.2", ":", "\n", "                ", "break", "\n", "", "", "return", "goal", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.PointGoalWrapper.__init__": [[106, 117], ["gym.core.Wrapper.__init__", "list", "env.observation_space.spaces.keys"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "Wrapper", ".", "__init__", "(", "self", ",", "env", "=", "env", ")", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "action_space", "=", "env", ".", "action_space", "\n", "# observation", "\n", "for", "key", "in", "list", "(", "env", ".", "observation_space", ".", "spaces", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "observation_keys", ":", "\n", "                ", "del", "env", ".", "observation_space", ".", "spaces", "[", "key", "]", "\n", "\n", "", "", "self", ".", "observation_space", "=", "env", ".", "observation_space", "\n", "self", ".", "env", ".", "env", ".", "reward_type", "=", "'sparse'", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.PointGoalWrapper.reset": [[118, 120], ["multi_world_wrapper.PointGoalWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.PointGoalWrapper.step": [[121, 129], ["multi_world_wrapper.PointGoalWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs_dict", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "obs", "=", "{", "\n", "'observation'", ":", "obs_dict", "[", "'observation'", "]", ",", "\n", "'desired_goal'", ":", "obs_dict", "[", "'desired_goal'", "]", ",", "\n", "'achieved_goal'", ":", "obs_dict", "[", "'achieved_goal'", "]", "\n", "}", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.PointGoalWrapper.render": [[130, 132], ["multi_world_wrapper.PointGoalWrapper.env.render"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.PointGoalWrapper.compute_reward": [[133, 140], ["numpy.array", "multi_world_wrapper.PointGoalWrapper.env.compute_rewards"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_rewards"], ["", "def", "compute_reward", "(", "self", ",", "achieved_goal", ",", "desired_goal", ",", "info", "=", "None", ")", ":", "\n", "        ", "obs", "=", "{", "\n", "'state_achieved_goal'", ":", "achieved_goal", ",", "\n", "'state_desired_goal'", ":", "desired_goal", "\n", "}", "\n", "action", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "return", "self", ".", "env", ".", "compute_rewards", "(", "action", ",", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.PointGoalWrapper.sample_goal": [[141, 144], ["multi_world_wrapper.PointGoalWrapper.env.sample_goal"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.sample_goal"], ["", "def", "sample_goal", "(", "self", ")", ":", "\n", "        ", "goal_dict", "=", "self", ".", "env", ".", "sample_goal", "(", ")", "\n", "return", "goal_dict", "[", "'desired_goal'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.SawyerGoalWrapper.__init__": [[153, 176], ["gym.core.Wrapper.__init__", "list", "hasattr", "env.observation_space.spaces.keys", "hasattr", "multi_world_wrapper.SawyerGoalWrapper.env.__str__", "hasattr", "hasattr", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "reward_type", "=", "'sparse'", ")", ":", "\n", "        ", "Wrapper", ".", "__init__", "(", "self", ",", "env", "=", "env", ")", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "action_space", "=", "env", ".", "action_space", "\n", "# observation", "\n", "for", "key", "in", "list", "(", "env", ".", "observation_space", ".", "spaces", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "observation_keys", ":", "\n", "                ", "del", "env", ".", "observation_space", ".", "spaces", "[", "key", "]", "\n", "\n", "", "", "self", ".", "observation_space", "=", "env", ".", "observation_space", "\n", "self", ".", "reward_type", "=", "reward_type", "\n", "if", "hasattr", "(", "self", ".", "env", ",", "'puck_space'", ")", ":", "\n", "            ", "self", ".", "reward_type", "=", "'puck_success'", "\n", "self", ".", "env", ".", "reward_type", "=", "'puck_success'", "\n", "if", "hasattr", "(", "self", ".", "env", ",", "'env'", ")", "and", "hasattr", "(", "self", ".", "env", ".", "env", ",", "'reward_type'", ")", ":", "\n", "                ", "self", ".", "env", ".", "env", ".", "reward_type", "=", "'puck_success'", "\n", "", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "env", ",", "'reward_type'", ")", ":", "\n", "                ", "self", ".", "env", ".", "reward_type", "=", "self", ".", "reward_type_dict", "[", "self", ".", "reward_type", "]", "\n", "", "if", "hasattr", "(", "self", ".", "env", ",", "'env'", ")", "and", "hasattr", "(", "self", ".", "env", ".", "env", ",", "'reward_type'", ")", ":", "\n", "                ", "self", ".", "env", ".", "env", ".", "reward_type", "=", "self", ".", "reward_type_dict", "[", "self", ".", "reward_type", "]", "\n", "", "", "if", "'Door'", "in", "self", ".", "env", ".", "__str__", "(", ")", ":", "\n", "            ", "self", ".", "reward_type", "=", "'angle_success'", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.SawyerGoalWrapper.reset": [[178, 180], ["multi_world_wrapper.SawyerGoalWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.SawyerGoalWrapper.step": [[181, 198], ["multi_world_wrapper.SawyerGoalWrapper.env.step", "info.keys", "info.keys"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs_dict", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "obs", "=", "{", "\n", "'observation'", ":", "obs_dict", "[", "'observation'", "]", ",", "\n", "'desired_goal'", ":", "obs_dict", "[", "'desired_goal'", "]", ",", "\n", "'achieved_goal'", ":", "obs_dict", "[", "'achieved_goal'", "]", "\n", "}", "\n", "if", "'hand_success'", "in", "info", ".", "keys", "(", ")", ":", "\n", "            ", "info", "[", "'is_success'", "]", "=", "info", "[", "'hand_success'", "]", "\n", "", "if", "'success'", "in", "info", ".", "keys", "(", ")", ":", "\n", "            ", "info", "[", "'is_success'", "]", "=", "info", "[", "'success'", "]", "\n", "", "if", "self", ".", "reward_type", "==", "'puck_success'", ":", "\n", "            ", "info", "[", "'is_success'", "]", "=", "info", "[", "'puck_success'", "]", "\n", "", "elif", "self", ".", "reward_type", "==", "'angle_success'", ":", "\n", "            ", "info", "[", "'is_success'", "]", "=", "info", "[", "'angle_success'", "]", "\n", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.SawyerGoalWrapper.render": [[199, 201], ["multi_world_wrapper.SawyerGoalWrapper.env.render"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.SawyerGoalWrapper.compute_reward": [[202, 204], ["multi_world_wrapper.SawyerGoalWrapper.compute_rewards"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_rewards"], ["", "def", "compute_reward", "(", "self", ",", "achieved_goal", ",", "desired_goal", ",", "info", ")", ":", "\n", "        ", "return", "self", ".", "compute_rewards", "(", "achieved_goal", ",", "desired_goal", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.SawyerGoalWrapper.compute_rewards": [[205, 212], ["numpy.array", "multi_world_wrapper.SawyerGoalWrapper.env.compute_rewards"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_rewards"], ["", "def", "compute_rewards", "(", "self", ",", "achieved_goal", ",", "desired_goal", ",", "info", ")", ":", "\n", "        ", "obs", "=", "{", "\n", "'state_achieved_goal'", ":", "achieved_goal", ",", "\n", "'state_desired_goal'", ":", "desired_goal", "\n", "}", "\n", "action", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "return", "self", ".", "env", ".", "compute_rewards", "(", "action", ",", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multi_world_wrapper.SawyerGoalWrapper.sample_goal": [[213, 216], ["multi_world_wrapper.SawyerGoalWrapper.env.sample_goal"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.sample_goal"], ["", "def", "sample_goal", "(", "self", ")", ":", "\n", "        ", "goal_dict", "=", "self", ".", "env", ".", "sample_goal", "(", ")", "\n", "return", "goal_dict", "[", "'desired_goal'", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.__init__": [[12, 50], ["sawyer_reach.SawyerReachXYZEnv.quick_init", "wgcsl.envs.multitask_env.MultitaskEnv.__init__", "wgcsl.envs.base.SawyerXYZEnv.__init__", "numpy.array", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Dict", "sawyer_reach.SawyerReachXYZEnv.reset", "locals", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "reward_type", "=", "'hand_distance'", ",", "\n", "norm_order", "=", "1", ",", "\n", "indicator_threshold", "=", "0.06", ",", "\n", "\n", "fix_goal", "=", "False", ",", "\n", "fixed_goal", "=", "(", "0.15", ",", "0.6", ",", "0.3", ")", ",", "\n", "hide_goal_markers", "=", "False", ",", "\n", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "quick_init", "(", "locals", "(", ")", ")", "\n", "MultitaskEnv", ".", "__init__", "(", "self", ")", "\n", "SawyerXYZEnv", ".", "__init__", "(", "self", ",", "model_name", "=", "self", ".", "model_name", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "reward_type", "=", "reward_type", "\n", "self", ".", "norm_order", "=", "norm_order", "\n", "self", ".", "indicator_threshold", "=", "indicator_threshold", "\n", "\n", "self", ".", "fix_goal", "=", "fix_goal", "\n", "self", ".", "fixed_goal", "=", "np", ".", "array", "(", "fixed_goal", ")", "\n", "self", ".", "_state_goal", "=", "None", "\n", "self", ".", "hide_goal_markers", "=", "hide_goal_markers", "\n", "self", ".", "action_space", "=", "Box", "(", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "1", ",", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "hand_space", "=", "Box", "(", "self", ".", "hand_low", ",", "self", ".", "hand_high", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "observation_space", "=", "Dict", "(", "[", "\n", "(", "'observation'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'desired_goal'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'achieved_goal'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'state_observation'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'state_desired_goal'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'state_achieved_goal'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'proprio_observation'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'proprio_desired_goal'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'proprio_achieved_goal'", ",", "self", ".", "hand_space", ")", ",", "\n", "]", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.step": [[51, 62], ["sawyer_reach.SawyerReachXYZEnv.set_xyz_action", "sawyer_reach.SawyerReachXYZEnv.do_simulation", "sawyer_reach.SawyerReachXYZEnv._set_goal_marker", "sawyer_reach.SawyerReachXYZEnv._get_obs", "sawyer_reach.SawyerReachXYZEnv.compute_reward", "sawyer_reach.SawyerReachXYZEnv._get_info", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerXYZEnv.set_xyz_action", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.do_simulation", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._set_goal_marker", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._get_obs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_reward", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._get_info"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "set_xyz_action", "(", "action", ")", "\n", "# keep gripper closed", "\n", "self", ".", "do_simulation", "(", "np", ".", "array", "(", "[", "1", "]", ")", ")", "\n", "# The marker seems to get reset every time you do a simulation", "\n", "self", ".", "_set_goal_marker", "(", "self", ".", "_state_goal", ")", "\n", "ob", "=", "self", ".", "_get_obs", "(", ")", "\n", "reward", "=", "self", ".", "compute_reward", "(", "action", ",", "ob", ")", "\n", "info", "=", "self", ".", "_get_info", "(", ")", "\n", "done", "=", "False", "\n", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._get_obs": [[63, 75], ["sawyer_reach.SawyerReachXYZEnv.get_endeff_pos", "dict"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerMocapBase.get_endeff_pos"], ["", "def", "_get_obs", "(", "self", ")", ":", "\n", "        ", "flat_obs", "=", "self", ".", "get_endeff_pos", "(", ")", "\n", "return", "dict", "(", "\n", "observation", "=", "flat_obs", ",", "\n", "desired_goal", "=", "self", ".", "_state_goal", ",", "\n", "achieved_goal", "=", "flat_obs", ",", "\n", "state_observation", "=", "flat_obs", ",", "\n", "state_desired_goal", "=", "self", ".", "_state_goal", ",", "\n", "state_achieved_goal", "=", "flat_obs", ",", "\n", "proprio_observation", "=", "flat_obs", ",", "\n", "proprio_desired_goal", "=", "self", ".", "_state_goal", ",", "\n", "proprio_achieved_goal", "=", "flat_obs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._get_info": [[77, 87], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "dict", "sawyer_reach.SawyerReachXYZEnv.get_endeff_pos", "float"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.base.SawyerMocapBase.get_endeff_pos"], ["", "def", "_get_info", "(", "self", ")", ":", "\n", "        ", "hand_diff", "=", "self", ".", "_state_goal", "-", "self", ".", "get_endeff_pos", "(", ")", "\n", "hand_distance", "=", "np", ".", "linalg", ".", "norm", "(", "hand_diff", ",", "ord", "=", "self", ".", "norm_order", ")", "\n", "hand_distance_l1", "=", "np", ".", "linalg", ".", "norm", "(", "hand_diff", ",", "ord", "=", "1", ")", "\n", "hand_distance_l2", "=", "np", ".", "linalg", ".", "norm", "(", "hand_diff", ",", "ord", "=", "2", ")", "\n", "return", "dict", "(", "\n", "hand_distance", "=", "hand_distance", ",", "\n", "hand_distance_l1", "=", "hand_distance_l1", ",", "\n", "hand_distance_l2", "=", "hand_distance_l2", ",", "\n", "hand_success", "=", "float", "(", "hand_distance", "<", "self", ".", "indicator_threshold", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._set_goal_marker": [[89, 100], ["sawyer_reach.SawyerReachXYZEnv.model.site_name2id", "sawyer_reach.SawyerReachXYZEnv.model.site_name2id"], "methods", ["None"], ["", "def", "_set_goal_marker", "(", "self", ",", "goal", ")", ":", "\n", "        ", "\"\"\"\n        This should be use ONLY for visualization. Use self._state_goal for\n        logging, learning, etc.\n        \"\"\"", "\n", "self", ".", "data", ".", "site_xpos", "[", "self", ".", "model", ".", "site_name2id", "(", "'hand-goal-site'", ")", "]", "=", "(", "\n", "goal", "\n", ")", "\n", "if", "self", ".", "hide_goal_markers", ":", "\n", "            ", "self", ".", "data", ".", "site_xpos", "[", "self", ".", "model", ".", "site_name2id", "(", "'hand-goal-site'", ")", ",", "2", "]", "=", "(", "\n", "-", "1000", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.model_name": [[102, 105], ["wgcsl.envs.env_util.get_asset_full_path"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.get_asset_full_path"], ["", "", "@", "property", "\n", "def", "model_name", "(", "self", ")", ":", "\n", "        ", "return", "get_asset_full_path", "(", "'sawyer_xyz/sawyer_reach.xml'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.viewer_setup": [[106, 115], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "0", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "0", "]", "=", "0", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "1", "]", "=", "1.0", "\n", "self", ".", "viewer", ".", "cam", ".", "lookat", "[", "2", "]", "=", "0.5", "\n", "self", ".", "viewer", ".", "cam", ".", "distance", "=", "0.3", "\n", "self", ".", "viewer", ".", "cam", ".", "elevation", "=", "-", "45", "\n", "self", ".", "viewer", ".", "cam", ".", "azimuth", "=", "270", "\n", "self", ".", "viewer", ".", "cam", ".", "trackbodyid", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.reset_model": [[116, 125], ["sawyer_reach.SawyerReachXYZEnv.data.qvel.copy", "sawyer_reach.SawyerReachXYZEnv.data.qpos.copy", "sawyer_reach.SawyerReachXYZEnv.set_state", "sawyer_reach.SawyerReachXYZEnv._reset_hand", "sawyer_reach.SawyerReachXYZEnv.set_goal", "sawyer_reach.SawyerReachXYZEnv.sim.forward", "sawyer_reach.SawyerReachXYZEnv._get_obs", "sawyer_reach.SawyerReachXYZEnv.flatten", "sawyer_reach.SawyerReachXYZEnv.flatten", "sawyer_reach.SawyerReachXYZEnv.sample_goal"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.set_state", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._reset_hand", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.set_goal", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._get_obs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.sample_goal"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "velocities", "=", "self", ".", "data", ".", "qvel", ".", "copy", "(", ")", "\n", "angles", "=", "self", ".", "data", ".", "qpos", ".", "copy", "(", ")", "\n", "angles", "[", ":", "7", "]", "=", "[", "1.7244448", ",", "-", "0.92036369", ",", "0.10234232", ",", "2.11178144", ",", "2.97668632", ",", "-", "0.38664629", ",", "0.54065733", "]", "\n", "self", ".", "set_state", "(", "angles", ".", "flatten", "(", ")", ",", "velocities", ".", "flatten", "(", ")", ")", "\n", "self", ".", "_reset_hand", "(", ")", "\n", "self", ".", "set_goal", "(", "self", ".", "sample_goal", "(", ")", ")", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "return", "self", ".", "_get_obs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._reset_hand": [[126, 131], ["range", "sawyer_reach.SawyerReachXYZEnv.data.set_mocap_pos", "sawyer_reach.SawyerReachXYZEnv.data.set_mocap_quat", "sawyer_reach.SawyerReachXYZEnv.do_simulation", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.do_simulation"], ["", "def", "_reset_hand", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "self", ".", "data", ".", "set_mocap_pos", "(", "'mocap'", ",", "np", ".", "array", "(", "[", "0", ",", "0.5", ",", "0.02", "]", ")", ")", "\n", "self", ".", "data", ".", "set_mocap_quat", "(", "'mocap'", ",", "np", ".", "array", "(", "[", "1", ",", "0", ",", "1", ",", "0", "]", ")", ")", "\n", "self", ".", "do_simulation", "(", "None", ",", "self", ".", "frame_skip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.get_goal": [[135, 139], ["None"], "methods", ["None"], ["def", "get_goal", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'desired_goal'", ":", "self", ".", "_state_goal", ",", "\n", "'state_desired_goal'", ":", "self", ".", "_state_goal", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.set_goal": [[141, 144], ["sawyer_reach.SawyerReachXYZEnv._set_goal_marker"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._set_goal_marker"], ["", "def", "set_goal", "(", "self", ",", "goal", ")", ":", "\n", "        ", "self", ".", "_state_goal", "=", "goal", "[", "'state_desired_goal'", "]", "\n", "self", ".", "_set_goal_marker", "(", "self", ".", "_state_goal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.set_to_goal": [[145, 152], ["range", "sawyer_reach.SawyerReachXYZEnv.data.set_mocap_pos", "sawyer_reach.SawyerReachXYZEnv.data.set_mocap_quat", "sawyer_reach.SawyerReachXYZEnv.do_simulation", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.do_simulation"], ["", "def", "set_to_goal", "(", "self", ",", "goal", ")", ":", "\n", "        ", "state_goal", "=", "goal", "[", "'state_desired_goal'", "]", "\n", "for", "_", "in", "range", "(", "30", ")", ":", "\n", "            ", "self", ".", "data", ".", "set_mocap_pos", "(", "'mocap'", ",", "state_goal", ")", "\n", "self", ".", "data", ".", "set_mocap_quat", "(", "'mocap'", ",", "np", ".", "array", "(", "[", "1", ",", "0", ",", "1", ",", "0", "]", ")", ")", "\n", "# keep gripper closed", "\n", "self", ".", "do_simulation", "(", "np", ".", "array", "(", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.sample_goals": [[153, 169], ["numpy.repeat", "numpy.random.uniform", "sawyer_reach.SawyerReachXYZEnv.fixed_goal.copy"], "methods", ["None"], ["", "", "def", "sample_goals", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "if", "self", ".", "fix_goal", ":", "\n", "            ", "goals", "=", "np", ".", "repeat", "(", "\n", "self", ".", "fixed_goal", ".", "copy", "(", ")", "[", "None", "]", ",", "\n", "batch_size", ",", "\n", "0", "\n", ")", "\n", "", "else", ":", "\n", "            ", "goals", "=", "np", ".", "random", ".", "uniform", "(", "\n", "self", ".", "hand_space", ".", "low", ",", "\n", "self", ".", "hand_space", ".", "high", ",", "\n", "size", "=", "(", "batch_size", ",", "self", ".", "hand_space", ".", "low", ".", "size", ")", ",", "\n", ")", "\n", "", "return", "{", "\n", "'desired_goal'", ":", "goals", ",", "\n", "'state_desired_goal'", ":", "goals", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.compute_rewards": [[171, 187], ["numpy.linalg.norm", "numpy.abs", "NotImplementedError", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "compute_rewards", "(", "self", ",", "actions", ",", "obs", ")", ":", "\n", "        ", "achieved_goals", "=", "obs", "[", "'state_achieved_goal'", "]", "\n", "desired_goals", "=", "obs", "[", "'state_desired_goal'", "]", "\n", "hand_pos", "=", "achieved_goals", "\n", "goals", "=", "desired_goals", "\n", "hand_diff", "=", "hand_pos", "-", "goals", "\n", "if", "self", ".", "reward_type", "==", "'hand_distance'", ":", "\n", "            ", "r", "=", "-", "np", ".", "linalg", ".", "norm", "(", "hand_diff", ",", "ord", "=", "self", ".", "norm_order", ",", "axis", "=", "1", ")", "\n", "", "elif", "self", ".", "reward_type", "==", "'vectorized_hand_distance'", ":", "\n", "            ", "r", "=", "-", "np", ".", "abs", "(", "hand_diff", ")", "\n", "", "elif", "self", ".", "reward_type", "==", "'hand_success'", ":", "\n", "            ", "r", "=", "-", "(", "np", ".", "linalg", ".", "norm", "(", "hand_diff", ",", "ord", "=", "self", ".", "norm_order", ",", "axis", "=", "1", ")", "\n", ">", "self", ".", "indicator_threshold", ")", ".", "astype", "(", "float", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Invalid/no reward type.\"", ")", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.get_diagnostics": [[188, 209], ["collections.OrderedDict", "wgcsl.envs.env_util.get_stat_in_paths", "collections.OrderedDict.update", "collections.OrderedDict.update", "wgcsl.envs.env_util.create_stats_ordered_dict", "wgcsl.envs.env_util.create_stats_ordered_dict"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.get_stat_in_paths", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.create_stats_ordered_dict"], ["", "def", "get_diagnostics", "(", "self", ",", "paths", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "statistics", "=", "OrderedDict", "(", ")", "\n", "for", "stat_name", "in", "[", "\n", "'hand_distance'", ",", "\n", "'hand_distance_l1'", ",", "\n", "'hand_distance_l2'", ",", "\n", "'hand_success'", ",", "\n", "]", ":", "\n", "            ", "stat_name", "=", "stat_name", "\n", "stat", "=", "get_stat_in_paths", "(", "paths", ",", "'env_infos'", ",", "stat_name", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'%s%s'", "%", "(", "prefix", ",", "stat_name", ")", ",", "\n", "stat", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", ")", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Final %s%s'", "%", "(", "prefix", ",", "stat_name", ")", ",", "\n", "[", "s", "[", "-", "1", "]", "for", "s", "in", "stat", "]", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", ")", ")", "\n", "", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.get_env_state": [[210, 214], ["super().get_env_state", "sawyer_reach.SawyerReachXYZEnv._state_goal.copy"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.get_env_state"], ["", "def", "get_env_state", "(", "self", ")", ":", "\n", "        ", "base_state", "=", "super", "(", ")", ".", "get_env_state", "(", ")", "\n", "goal", "=", "self", ".", "_state_goal", ".", "copy", "(", ")", "\n", "return", "base_state", ",", "goal", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.set_env_state": [[215, 220], ["super().set_env_state", "sawyer_reach.SawyerReachXYZEnv._set_goal_marker"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv.set_env_state", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYZEnv._set_goal_marker"], ["", "def", "set_env_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "base_state", ",", "goal", "=", "state", "\n", "super", "(", ")", ".", "set_env_state", "(", "base_state", ")", "\n", "self", ".", "_state_goal", "=", "goal", "\n", "self", ".", "_set_goal_marker", "(", "goal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYEnv.__init__": [[223, 250], ["sawyer_reach.SawyerReachXYEnv.quick_init", "sawyer_reach.SawyerReachXYZEnv.__init__", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Dict", "locals", "numpy.array", "numpy.array", "numpy.hstack", "numpy.hstack"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.serializable.Serializable.quick_init", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "\n", "fixed_goal", "=", "(", "0.15", ",", "0.6", ")", ",", "\n", "hand_z_position", "=", "0.055", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "quick_init", "(", "locals", "(", ")", ")", "\n", "SawyerReachXYZEnv", ".", "__init__", "(", "\n", "self", ",", "\n", "*", "args", ",", "\n", "fixed_goal", "=", "(", "fixed_goal", "[", "0", "]", ",", "fixed_goal", "[", "1", "]", ",", "hand_z_position", ")", ",", "\n", "**", "kwargs", "\n", ")", "\n", "self", ".", "hand_z_position", "=", "hand_z_position", "\n", "self", ".", "action_space", "=", "Box", "(", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", "]", ")", ",", "np", ".", "array", "(", "[", "1", ",", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "hand_space", "=", "Box", "(", "\n", "np", ".", "hstack", "(", "(", "self", ".", "hand_space", ".", "low", "[", ":", "2", "]", ",", "self", ".", "hand_z_position", ")", ")", ",", "\n", "np", ".", "hstack", "(", "(", "self", ".", "hand_space", ".", "high", "[", ":", "2", "]", ",", "self", ".", "hand_z_position", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "self", ".", "observation_space", "=", "Dict", "(", "[", "\n", "(", "'observation'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'desired_goal'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'achieved_goal'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'state_observation'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'state_desired_goal'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'state_achieved_goal'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'proprio_observation'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'proprio_desired_goal'", ",", "self", ".", "hand_space", ")", ",", "\n", "(", "'proprio_achieved_goal'", ",", "self", ".", "hand_space", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.sawyer_reach.SawyerReachXYEnv.step": [[252, 256], ["numpy.hstack", "sawyer_reach.SawyerReachXYZEnv.step"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "delta_z", "=", "self", ".", "hand_z_position", "-", "self", ".", "data", ".", "mocap_pos", "[", "0", ",", "2", "]", "\n", "action", "=", "np", ".", "hstack", "(", "(", "action", ",", "delta_z", ")", ")", "\n", "return", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.__init__": [[24, 62], ["model_path.startswith", "mujoco_py.load_model_from_path", "mujoco_py.MjSim", "mujoco_env.MujocoEnv.sim.data.qpos.ravel().copy", "mujoco_env.MujocoEnv.sim.data.qvel.ravel().copy", "mujoco_env.MujocoEnv.seed", "os.path.join", "os.path.exists", "IOError", "int", "int", "mujoco_env.MujocoEnv.step", "mujoco_env.MujocoEnv.model.actuator_ctrlrange.copy", "gym.spaces.Box", "gym.spaces.Box", "os.path.dirname", "numpy.round", "mujoco_env.MujocoEnv.sim.data.qpos.ravel", "mujoco_env.MujocoEnv.sim.data.qvel.ravel", "numpy.zeros", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.seed", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step"], ["def", "__init__", "(", "self", ",", "model_path", ",", "frame_skip", ",", "device_id", "=", "-", "1", ",", "automatically_set_spaces", "=", "False", ")", ":", "\n", "        ", "if", "model_path", ".", "startswith", "(", "\"/\"", ")", ":", "\n", "            ", "fullpath", "=", "model_path", "\n", "", "else", ":", "\n", "            ", "fullpath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"assets\"", ",", "model_path", ")", "\n", "", "if", "not", "path", ".", "exists", "(", "fullpath", ")", ":", "\n", "            ", "raise", "IOError", "(", "\"File %s does not exist\"", "%", "fullpath", ")", "\n", "", "self", ".", "frame_skip", "=", "frame_skip", "\n", "self", ".", "model", "=", "mujoco_py", ".", "load_model_from_path", "(", "fullpath", ")", "\n", "self", ".", "sim", "=", "mujoco_py", ".", "MjSim", "(", "self", ".", "model", ")", "\n", "self", ".", "data", "=", "self", ".", "sim", ".", "data", "\n", "self", ".", "viewer", "=", "None", "\n", "self", ".", "_viewers", "=", "{", "}", "\n", "\n", "self", ".", "metadata", "=", "{", "\n", "'render.modes'", ":", "[", "'human'", ",", "'rgb_array'", "]", ",", "\n", "'video.frames_per_second'", ":", "int", "(", "np", ".", "round", "(", "1.0", "/", "self", ".", "dt", ")", ")", "\n", "}", "\n", "if", "device_id", "==", "-", "1", "and", "'gpu_id'", "in", "os", ".", "environ", ":", "\n", "            ", "device_id", "=", "int", "(", "os", ".", "environ", "[", "'gpu_id'", "]", ")", "\n", "", "self", ".", "device_id", "=", "device_id", "\n", "self", ".", "init_qpos", "=", "self", ".", "sim", ".", "data", ".", "qpos", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "self", ".", "init_qvel", "=", "self", ".", "sim", ".", "data", ".", "qvel", ".", "ravel", "(", ")", ".", "copy", "(", ")", "\n", "if", "automatically_set_spaces", ":", "\n", "            ", "observation", ",", "_reward", ",", "done", ",", "_info", "=", "self", ".", "step", "(", "np", ".", "zeros", "(", "self", ".", "model", ".", "nu", ")", ")", "\n", "assert", "not", "done", "\n", "self", ".", "obs_dim", "=", "observation", ".", "size", "\n", "\n", "bounds", "=", "self", ".", "model", ".", "actuator_ctrlrange", ".", "copy", "(", ")", "\n", "low", "=", "bounds", "[", ":", ",", "0", "]", "\n", "high", "=", "bounds", "[", ":", ",", "1", "]", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ")", "\n", "\n", "high", "=", "np", ".", "inf", "*", "np", ".", "ones", "(", "self", ".", "obs_dim", ")", "\n", "low", "=", "-", "high", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "low", ",", "high", ")", "\n", "\n", "", "self", ".", "seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.seed": [[63, 66], ["gym.utils.seeding.np_random"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.reset_model": [[70, 76], ["None"], "methods", ["None"], ["", "def", "reset_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset the robot degrees of freedom (qpos and qvel).\n        Implement this in each subclass.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.viewer_setup": [[77, 84], ["None"], "methods", ["None"], ["", "def", "viewer_setup", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This method is called when the viewer is initialized and after every reset\n        Optionally implement this method, if you need to tinker with camera position\n        and so forth.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.reset": [[87, 93], ["mujoco_env.MujocoEnv.sim.reset", "mujoco_env.MujocoEnv.reset_model", "mujoco_env.MujocoEnv.viewer_setup"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.reset_model", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.viewer_setup"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "sim", ".", "reset", "(", ")", "\n", "ob", "=", "self", ".", "reset_model", "(", ")", "\n", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "self", ".", "viewer_setup", "(", ")", "\n", "", "return", "ob", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.set_state": [[94, 101], ["mujoco_env.MujocoEnv.sim.get_state", "mujoco_py.MjSimState", "mujoco_env.MujocoEnv.sim.set_state", "mujoco_env.MujocoEnv.sim.forward"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.set_state"], ["", "def", "set_state", "(", "self", ",", "qpos", ",", "qvel", ")", ":", "\n", "        ", "assert", "qpos", ".", "shape", "==", "(", "self", ".", "model", ".", "nq", ",", ")", "and", "qvel", ".", "shape", "==", "(", "self", ".", "model", ".", "nv", ",", ")", "\n", "old_state", "=", "self", ".", "sim", ".", "get_state", "(", ")", "\n", "new_state", "=", "mujoco_py", ".", "MjSimState", "(", "old_state", ".", "time", ",", "qpos", ",", "qvel", ",", "\n", "old_state", ".", "act", ",", "old_state", ".", "udd_state", ")", "\n", "self", ".", "sim", ".", "set_state", "(", "new_state", ")", "\n", "self", ".", "sim", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.dt": [[102, 105], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dt", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "opt", ".", "timestep", "*", "self", ".", "frame_skip", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.do_simulation": [[106, 113], ["range", "mujoco_env.MujocoEnv.sim.step"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step"], ["", "def", "do_simulation", "(", "self", ",", "ctrl", ",", "n_frames", "=", "None", ")", ":", "\n", "        ", "if", "n_frames", "is", "None", ":", "\n", "            ", "n_frames", "=", "self", ".", "frame_skip", "\n", "", "if", "self", ".", "sim", ".", "data", ".", "ctrl", "is", "not", "None", "and", "ctrl", "is", "not", "None", ":", "\n", "            ", "self", ".", "sim", ".", "data", ".", "ctrl", "[", ":", "]", "=", "ctrl", "\n", "", "for", "_", "in", "range", "(", "n_frames", ")", ":", "\n", "            ", "self", ".", "sim", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.render": [[114, 130], ["mujoco_env.MujocoEnv._get_viewer().render", "mujoco_env.MujocoEnv._get_viewer().read_pixels", "mujoco_env.MujocoEnv._get_viewer().render", "mujoco_env.MujocoEnv._get_viewer", "mujoco_env.MujocoEnv._get_viewer", "mujoco_env.MujocoEnv._get_viewer().read_pixels", "mujoco_env.MujocoEnv._get_viewer().render", "mujoco_env.MujocoEnv._get_viewer", "mujoco_env.MujocoEnv._get_viewer", "mujoco_env.MujocoEnv._get_viewer"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv._get_viewer", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv._get_viewer"], ["", "", "def", "render", "(", "self", ",", "mode", "=", "'human'", ",", "width", "=", "DEFAULT_SIZE", ",", "height", "=", "DEFAULT_SIZE", ")", ":", "\n", "\n", "        ", "if", "mode", "==", "'rgb_array'", ":", "\n", "            ", "self", ".", "_get_viewer", "(", "mode", ")", ".", "render", "(", "width", ",", "height", ")", "\n", "data", "=", "self", ".", "_get_viewer", "(", "mode", ")", ".", "read_pixels", "(", "width", ",", "height", ",", "depth", "=", "False", ")", "\n", "# original image is upside-down, so flip it", "\n", "return", "data", "[", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "", "elif", "mode", "==", "'depth_array'", ":", "\n", "            ", "self", ".", "_get_viewer", "(", "mode", ")", ".", "render", "(", "width", ",", "height", ")", "\n", "# window size used for old mujoco-py:", "\n", "# Extract depth part of the read_pixels() tuple", "\n", "data", "=", "self", ".", "_get_viewer", "(", "mode", ")", ".", "read_pixels", "(", "width", ",", "height", ",", "depth", "=", "True", ")", "[", "1", "]", "\n", "# original image is upside-down, so flip it", "\n", "return", "data", "[", ":", ":", "-", "1", ",", ":", "]", "\n", "", "elif", "mode", "==", "'human'", ":", "\n", "            ", "self", ".", "_get_viewer", "(", "mode", ")", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.close": [[131, 136], ["None"], "methods", ["None"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "# self.viewer.finish()", "\n", "            ", "self", ".", "viewer", "=", "None", "\n", "self", ".", "_viewers", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv._get_viewer": [[137, 148], ["mujoco_env.MujocoEnv._viewers.get", "mujoco_env.MujocoEnv.viewer_setup", "mujoco_py.MjViewer", "mujoco_py.MjRenderContextOffscreen"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.adv_que.Advque.get", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.viewer_setup"], ["", "", "def", "_get_viewer", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "viewer", "=", "self", ".", "_viewers", ".", "get", "(", "mode", ")", "\n", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "if", "mode", "==", "'human'", ":", "\n", "                ", "self", ".", "viewer", "=", "mujoco_py", ".", "MjViewer", "(", "self", ".", "sim", ")", "\n", "", "elif", "mode", "==", "'rgb_array'", "or", "mode", "==", "'depth_array'", ":", "\n", "                ", "self", ".", "viewer", "=", "mujoco_py", ".", "MjRenderContextOffscreen", "(", "self", ".", "sim", ",", "-", "1", ")", "\n", "\n", "", "self", ".", "viewer_setup", "(", ")", "\n", "self", ".", "_viewers", "[", "mode", "]", "=", "self", ".", "viewer", "\n", "", "return", "self", ".", "viewer", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.get_body_com": [[149, 151], ["mujoco_env.MujocoEnv.data.get_body_xpos"], "methods", ["None"], ["", "def", "get_body_com", "(", "self", ",", "body_name", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "get_body_xpos", "(", "body_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.state_vector": [[152, 156], ["numpy.concatenate"], "methods", ["None"], ["", "def", "state_vector", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "sim", ".", "data", ".", "qpos", ".", "flat", ",", "\n", "self", ".", "sim", ".", "data", ".", "qvel", ".", "flat", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.get_image": [[158, 163], ["mujoco_env.MujocoEnv.sim.render"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render"], ["", "def", "get_image", "(", "self", ",", "width", "=", "84", ",", "height", "=", "84", ",", "camera_name", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "sim", ".", "render", "(", "\n", "width", "=", "width", ",", "\n", "height", "=", "height", ",", "\n", "camera_name", "=", "camera_name", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.initialize_camera": [[165, 171], ["mujoco_py.MjRenderContextOffscreen", "init_fctn", "sim.add_render_context"], "methods", ["None"], ["", "def", "initialize_camera", "(", "self", ",", "init_fctn", ",", "mode", "=", "'rgb_array'", ")", ":", "\n", "        ", "sim", "=", "self", ".", "sim", "\n", "viewer", "=", "mujoco_py", ".", "MjRenderContextOffscreen", "(", "sim", ",", "device_id", "=", "self", ".", "device_id", ")", "\n", "# viewer = mujoco_py.MjViewer(sim)", "\n", "init_fctn", "(", "viewer", ".", "cam", ")", "\n", "sim", ".", "add_render_context", "(", "viewer", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.__init__": [[5, 37], ["pygame_viewer.LinearMapper", "pygame_viewer.LinearMapper", "pygame.time.Clock", "pygame.display.set_mode", "pygame.Surface"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "screen_width", "=", "640", ",", "\n", "screen_height", "=", "480", ",", "\n", "x_bounds", "=", "(", "0", ",", "640", ")", ",", "\n", "y_bounds", "=", "(", "0", ",", "480", ")", ",", "\n", "render_onscreen", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        All xy-coordinates are scaled linear to map from\n            x_bounds --> [0, screen_width-1]\n        and similarly for y.\n\n        Width and heights are also scaled. For radius, the min of the x-scale\n        and y-scale is taken.\n\n        :param screen_width:\n        :param screen_height:\n        :param x_bounds:\n        :param y_bounds:\n        \"\"\"", "\n", "self", ".", "width", "=", "screen_width", "\n", "self", ".", "height", "=", "screen_width", "\n", "self", ".", "x_scaler", "=", "LinearMapper", "(", "x_bounds", ",", "(", "0", ",", "screen_width", "-", "1", ")", ")", "\n", "self", ".", "y_scaler", "=", "LinearMapper", "(", "y_bounds", ",", "(", "0", ",", "screen_height", "-", "1", ")", ")", "\n", "self", ".", "terminated", "=", "False", "\n", "self", ".", "clock", "=", "pygame", ".", "time", ".", "Clock", "(", ")", "\n", "self", ".", "render_onscreen", "=", "render_onscreen", "\n", "if", "self", ".", "render_onscreen", ":", "\n", "            ", "self", ".", "screen", "=", "pygame", ".", "display", ".", "set_mode", "(", "(", "screen_width", ",", "screen_height", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "screen", "=", "pygame", ".", "Surface", "(", "(", "screen_width", ",", "screen_height", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.render": [[38, 41], ["pygame.display.update"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update"], ["", "", "def", "render", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "render_onscreen", ":", "\n", "            ", "pygame", ".", "display", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.fill": [[42, 44], ["pygame_viewer.PygameViewer.screen.fill"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.fill"], ["", "", "def", "fill", "(", "self", ",", "color", ")", ":", "\n", "        ", "self", ".", "screen", ".", "fill", "(", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.tick": [[45, 47], ["pygame_viewer.PygameViewer.clock.tick"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.tick"], ["", "def", "tick", "(", "self", ",", "dt", ")", ":", "\n", "        ", "self", ".", "clock", ".", "tick", "(", "dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.check_for_exit": [[48, 53], ["pygame.event.get", "pygame.quit"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.adv_que.Advque.get"], ["", "def", "check_for_exit", "(", "self", ")", ":", "\n", "        ", "for", "event", "in", "pygame", ".", "event", ".", "get", "(", ")", ":", "\n", "            ", "if", "event", ".", "type", "==", "pygame", ".", "QUIT", ":", "\n", "                ", "pygame", ".", "quit", "(", ")", "\n", "self", ".", "terminated", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.draw_segment": [[54, 58], ["pygame_viewer.PygameViewer.convert_xy", "pygame_viewer.PygameViewer.convert_xy", "pygame.draw.aaline"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.convert_xy", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.convert_xy"], ["", "", "", "def", "draw_segment", "(", "self", ",", "p1", ",", "p2", ",", "color", ")", ":", "\n", "        ", "p1", "=", "self", ".", "convert_xy", "(", "p1", ")", "\n", "p2", "=", "self", ".", "convert_xy", "(", "p2", ")", "\n", "pygame", ".", "draw", ".", "aaline", "(", "self", ".", "screen", ",", "color", ",", "p1", ",", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.draw_circle": [[59, 64], ["pygame_viewer.PygameViewer.convert_xy", "pygame_viewer.PygameViewer.scale_min", "pygame.draw.circle"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.convert_xy", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.scale_min"], ["", "def", "draw_circle", "(", "self", ",", "center", ",", "radius", ",", "color", ",", "thickness", "=", "1", ")", ":", "\n", "        ", "center", "=", "self", ".", "convert_xy", "(", "center", ")", "\n", "radius", "=", "self", ".", "scale_min", "(", "radius", ")", "\n", "\n", "pygame", ".", "draw", ".", "circle", "(", "self", ".", "screen", ",", "color", ",", "center", ",", "radius", ",", "thickness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.draw_solid_circle": [[65, 67], ["pygame_viewer.PygameViewer.draw_circle"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.draw_circle"], ["", "def", "draw_solid_circle", "(", "self", ",", "center", ",", "radius", ",", "color", ")", ":", "\n", "        ", "self", ".", "draw_circle", "(", "center", ",", "radius", ",", "color", ",", "thickness", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.draw_rect": [[68, 73], ["pygame_viewer.PygameViewer.convert_xy", "pygame_viewer.PygameViewer.scale_x", "pygame_viewer.PygameViewer.scale_y", "pygame.draw.rect"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.convert_xy", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.scale_x", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.scale_y"], ["", "def", "draw_rect", "(", "self", ",", "point", ",", "width", ",", "height", ",", "color", ",", "thickness", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "convert_xy", "(", "point", ")", "\n", "width", "=", "self", ".", "scale_x", "(", "width", ")", "\n", "height", "=", "self", ".", "scale_y", "(", "height", ")", "\n", "pygame", ".", "draw", ".", "rect", "(", "self", ".", "screen", ",", "color", ",", "(", "x", ",", "y", ",", "width", ",", "height", ")", ",", "thickness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.convert_xy": [[74, 77], ["int", "int", "pygame_viewer.PygameViewer.x_scaler.convert", "pygame_viewer.PygameViewer.y_scaler.convert"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.LinearMapper.convert", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.LinearMapper.convert"], ["", "def", "convert_xy", "(", "self", ",", "point", ")", ":", "\n", "        ", "x", ",", "y", "=", "point", "\n", "return", "int", "(", "self", ".", "x_scaler", ".", "convert", "(", "x", ")", ")", ",", "int", "(", "self", ".", "y_scaler", ".", "convert", "(", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.scale_x": [[78, 80], ["int", "pygame_viewer.PygameViewer.x_scaler.scale"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.LinearMapper.scale"], ["", "def", "scale_x", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "x_scaler", ".", "scale", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.scale_y": [[81, 83], ["int", "pygame_viewer.PygameViewer.y_scaler.scale"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.LinearMapper.scale"], ["", "def", "scale_y", "(", "self", ",", "y", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "y_scaler", ".", "scale", "(", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.scale_min": [[84, 86], ["min", "pygame_viewer.PygameViewer.scale_y", "pygame_viewer.PygameViewer.scale_y"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.scale_y", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.scale_y"], ["", "def", "scale_min", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "min", "(", "self", ".", "scale_y", "(", "value", ")", ",", "self", ".", "scale_y", "(", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.get_image": [[87, 93], ["pygame.surfarray.array3d", "pygame.transform.smoothscale"], "methods", ["None"], ["", "def", "get_image", "(", "self", ",", "wh_size", "=", "None", ")", ":", "\n", "        ", "if", "wh_size", "is", "not", "None", ":", "\n", "            ", "screen", "=", "pygame", ".", "transform", ".", "smoothscale", "(", "self", ".", "screen", ",", "wh_size", ")", "\n", "", "else", ":", "\n", "            ", "screen", "=", "self", ".", "screen", "\n", "", "return", "pygame", ".", "surfarray", ".", "array3d", "(", "screen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.PygameViewer.reinit_screen": [[94, 100], ["pygame.display.set_mode", "pygame.Surface"], "methods", ["None"], ["", "def", "reinit_screen", "(", "self", ",", "render_onscreen", ")", ":", "\n", "        ", "self", ".", "render_onscreen", "=", "render_onscreen", "\n", "if", "self", ".", "render_onscreen", ":", "\n", "            ", "self", ".", "screen", "=", "pygame", ".", "display", ".", "set_mode", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "screen", "=", "pygame", ".", "Surface", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.LinearMapper.__init__": [[110, 115], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "in_bounds", ",", "out_bounds", ")", ":", "\n", "        ", "self", ".", "in_min", ",", "in_max", "=", "in_bounds", "\n", "self", ".", "out_min", ",", "out_max", "=", "out_bounds", "\n", "self", ".", "in_range", "=", "in_max", "-", "self", ".", "in_min", "\n", "self", ".", "out_range", "=", "out_max", "-", "self", ".", "out_min", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.LinearMapper.convert": [[116, 120], ["None"], "methods", ["None"], ["", "def", "convert", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "(", "\n", "(", "(", "(", "value", "-", "self", ".", "in_min", ")", "*", "self", ".", "out_range", ")", "/", "self", ".", "in_range", ")", "\n", "+", "self", ".", "out_min", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.pygame_viewer.LinearMapper.scale": [[122, 124], ["None"], "methods", ["None"], ["", "def", "scale", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "value", "*", "self", ".", "out_range", "/", "self", ".", "in_range", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.get_goal": [[17, 23], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "get_goal", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.sample_goals": [[27, 35], ["None"], "methods", ["None"], ["@", "abc", ".", "abstractmethod", "\n", "def", "sample_goals", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        :param batch_size:\n        :return: Returns a dictionary mapping desired goal keys to arrays of\n        size BATCH_SIZE x Z, where Z depends on the key.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_rewards": [[36, 45], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "compute_rewards", "(", "self", ",", "actions", ",", "obs", ")", ":", "\n", "        ", "\"\"\"\n        :param actions: Np array of actions\n        :param obs: Batch dictionary\n        :return:\n        \"\"\"", "\n", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.sample_goal": [[46, 49], ["multitask_env.MultitaskEnv.sample_goals", "multitask_env.MultitaskEnv.unbatchify_dict"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.sample_goals", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.unbatchify_dict"], ["", "def", "sample_goal", "(", "self", ")", ":", "\n", "        ", "goals", "=", "self", ".", "sample_goals", "(", "1", ")", "\n", "return", "self", ".", "unbatchify_dict", "(", "goals", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_reward": [[50, 56], ["multitask_env.MultitaskEnv.compute_rewards", "obs.items"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_rewards"], ["", "def", "compute_reward", "(", "self", ",", "action", ",", "obs", ")", ":", "\n", "        ", "actions", "=", "action", "[", "None", "]", "\n", "next_obs", "=", "{", "\n", "k", ":", "v", "[", "None", "]", "for", "k", ",", "v", "in", "obs", ".", "items", "(", ")", "\n", "}", "\n", "return", "self", ".", "compute_rewards", "(", "actions", ",", "next_obs", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.get_diagnostics": [[57, 73], ["collections.OrderedDict"], "methods", ["None"], ["", "def", "get_diagnostics", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param rollouts: List where each element is a dictionary describing a\n        rollout. Typical dictionary might look like:\n        {\n            'observations': np array,\n            'actions': np array,\n            'next_observations': np array,\n            'rewards': np array,\n            'terminals': np array,\n            'env_infos': list of dictionaries,\n            'agent_infos': list of dictionaries,\n        }\n        :return: OrderedDict. Statistics to save.\n        \"\"\"", "\n", "return", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.unbatchify_dict": [[74, 85], ["batch_dict.keys"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "unbatchify_dict", "(", "batch_dict", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        :param batch_dict: A batch dict is a dict whose values are batch.\n        :return: the dictionary returns a dict whose values are just elements of\n        the batch.\n        \"\"\"", "\n", "new_d", "=", "{", "}", "\n", "for", "k", "in", "batch_dict", ".", "keys", "(", ")", ":", "\n", "            ", "new_d", "[", "k", "]", "=", "batch_dict", "[", "k", "]", "[", "i", "]", "\n", "", "return", "new_d", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.batchify_dict": [[86, 97], ["batch_dict.keys"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "batchify_dict", "(", "batch_dict", ",", "i", ")", ":", "\n", "        ", "\"\"\"\n        :param batch_dict: A batch dict is a dict whose values are batch.\n        :return: the dictionary returns a dict whose values are just elements of\n        the batch.\n        \"\"\"", "\n", "new_d", "=", "{", "}", "\n", "for", "k", "in", "batch_dict", ".", "keys", "(", ")", ":", "\n", "            ", "new_d", "[", "k", "]", "=", "batch_dict", "[", "k", "]", "[", "i", "]", "\n", "", "return", "new_d", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.__init__": [[10, 42], ["collections.deque", "collections.deque", "collections.deque", "collections.deque", "collections.deque", "rollout.RolloutWorker.reset_all_rollouts", "rollout.RolloutWorker.clear_history", "key.replace", "dims.keys", "key.startswith"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.reset_all_rollouts", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.clear_history"], ["    ", "@", "store_args", "\n", "def", "__init__", "(", "self", ",", "venv", ",", "policy", ",", "dims", ",", "logger", ",", "T", ",", "rollout_batch_size", "=", "1", ",", "\n", "exploit", "=", "False", ",", "use_target_net", "=", "False", ",", "compute_Q", "=", "False", ",", "noise_eps", "=", "0", ",", "\n", "random_eps", "=", "0", ",", "history_len", "=", "100", ",", "render", "=", "False", ",", "monitor", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Rollout worker generates experience by interacting with one or many environments.\n        Args:\n            venv: vectorized gym environments.\n            policy (object): the policy that is used to act\n            dims (dict of ints): the dimensions for observations (o), goals (g), and actions (u)\n            logger (object): the logger that is used by the rollout worker\n            rollout_batch_size (int): the number of parallel rollouts that should be used\n            exploit (boolean): whether or not to exploit, i.e. to act optimally according to the\n                current policy without any exploration\n            use_target_net (boolean): whether or not to use the target net for rollouts\n            compute_Q (boolean): whether or not to compute the Q values alongside the actions\n            noise_eps (float): scale of the additive Gaussian noise\n            random_eps (float): probability of selecting a completely random action\n            history_len (int): length of history for statistics smoothing\n            render (boolean): whether or not to render the rollouts\n        \"\"\"", "\n", "assert", "self", ".", "T", ">", "0", "\n", "self", ".", "info_keys", "=", "[", "key", ".", "replace", "(", "'info_'", ",", "''", ")", "for", "key", "in", "dims", ".", "keys", "(", ")", "if", "key", ".", "startswith", "(", "'info_'", ")", "]", "\n", "\n", "self", ".", "success_history", "=", "deque", "(", "maxlen", "=", "history_len", ")", "\n", "self", ".", "Q_history", "=", "deque", "(", "maxlen", "=", "history_len", ")", "\n", "self", ".", "return_history", "=", "deque", "(", "maxlen", "=", "history_len", ")", "\n", "self", ".", "dis_return_history", "=", "deque", "(", "maxlen", "=", "history_len", ")", "\n", "self", ".", "distances", "=", "deque", "(", "maxlen", "=", "history_len", ")", "\n", "\n", "self", ".", "n_episodes", "=", "0", "\n", "self", ".", "reset_all_rollouts", "(", ")", "\n", "self", ".", "clear_history", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.reset_all_rollouts": [[43, 48], ["rollout.RolloutWorker.venv.reset"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset"], ["", "def", "reset_all_rollouts", "(", "self", ")", ":", "\n", "        ", "self", ".", "obs_dict", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "self", ".", "initial_o", "=", "self", ".", "obs_dict", "[", "'observation'", "]", "\n", "self", ".", "initial_ag", "=", "self", ".", "obs_dict", "[", "'achieved_goal'", "]", "\n", "self", ".", "g", "=", "self", ".", "obs_dict", "[", "'desired_goal'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.generate_rollouts": [[49, 151], ["rollout.RolloutWorker.reset_all_rollouts", "numpy.empty", "numpy.empty", "range", "obs.append", "achieved_goals.append", "dict", "zip", "numpy.mean", "rollout.RolloutWorker.success_history.append", "wgcsl.algo.util.discounted_return", "rollout.RolloutWorker.return_history.append", "rollout.RolloutWorker.dis_return_history.append", "rollout.RolloutWorker.distances.append", "wgcsl.algo.util.convert_episode_to_batch_major", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.zeros", "rollout.RolloutWorker.venv.step", "numpy.array", "enumerate", "numpy.isnan().any", "dones.append", "obs.append", "achieved_goals.append", "successes.append", "acts.append", "goals.append", "rewards.append", "numpy.empty.copy", "numpy.empty.copy", "numpy.array", "numpy.linalg.norm", "rollout.RolloutWorker.Q_history.append", "rollout.RolloutWorker.policy._random_action", "rollout.RolloutWorker.policy.get_actions", "u.reshape.reshape.reshape", "any", "enumerate", "rollout.RolloutWorker.logger.warn", "rollout.RolloutWorker.reset_all_rollouts", "rollout.RolloutWorker.generate_rollouts", "numpy.empty.copy", "numpy.empty.copy", "numpy.array.copy", "u.reshape.reshape.copy", "rollout.RolloutWorker.g.copy", "reward.copy", "numpy.mean", "Qs.append", "i.get", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.reset_all_rollouts", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.discounted_return", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.convert_episode_to_batch_major", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._random_action", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.get_actions", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.warn", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.reset_all_rollouts", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.generate_rollouts", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.adv_que.Advque.get"], ["", "def", "generate_rollouts", "(", "self", ",", "random_ac", "=", "False", ",", "assign_goal", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs `rollout_batch_size` rollouts in parallel for time horizon `T` with the current\n        policy acting on it accordingly.\n        \"\"\"", "\n", "self", ".", "reset_all_rollouts", "(", ")", "\n", "\n", "# compute observations", "\n", "o", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'o'", "]", ")", ",", "np", ".", "float32", ")", "# observations", "\n", "ag", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'g'", "]", ")", ",", "np", ".", "float32", ")", "# achieved goals", "\n", "o", "[", ":", "]", "=", "self", ".", "initial_o", "\n", "ag", "[", ":", "]", "=", "self", ".", "initial_ag", "\n", "\n", "if", "assign_goal", "is", "not", "None", ":", "\n", "            ", "self", ".", "g", "=", "assign_goal", "\n", "\n", "# generate episodes", "\n", "", "obs", ",", "achieved_goals", ",", "acts", ",", "goals", ",", "successes", ",", "rewards", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "dones", "=", "[", "]", "\n", "info_values", "=", "[", "np", ".", "empty", "(", "(", "self", ".", "T", "-", "1", ",", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'info_'", "+", "key", "]", ")", ",", "np", ".", "float32", ")", "for", "key", "in", "self", ".", "info_keys", "]", "\n", "Qs", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "self", ".", "T", ")", ":", "\n", "            ", "if", "random_ac", ":", "\n", "                ", "u", "=", "self", ".", "policy", ".", "_random_action", "(", "self", ".", "rollout_batch_size", ")", "\n", "", "else", ":", "\n", "                ", "policy_output", "=", "self", ".", "policy", ".", "get_actions", "(", "\n", "o", ",", "ag", ",", "self", ".", "g", ",", "\n", "compute_Q", "=", "self", ".", "compute_Q", ",", "\n", "noise_eps", "=", "self", ".", "noise_eps", "if", "not", "self", ".", "exploit", "else", "0.", ",", "\n", "random_eps", "=", "self", ".", "random_eps", "if", "not", "self", ".", "exploit", "else", "0.", ",", "\n", "use_target_net", "=", "self", ".", "use_target_net", ")", "\n", "\n", "if", "self", ".", "compute_Q", ":", "\n", "                    ", "u", ",", "Q", "=", "policy_output", "\n", "Qs", ".", "append", "(", "Q", ")", "\n", "", "else", ":", "\n", "                    ", "u", "=", "policy_output", "\n", "\n", "", "", "if", "u", ".", "ndim", "==", "1", ":", "\n", "# The non-batched case should still have a reasonable shape.", "\n", "                ", "u", "=", "u", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "\n", "", "o_new", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'o'", "]", ")", ")", "\n", "ag_new", "=", "np", ".", "empty", "(", "(", "self", ".", "rollout_batch_size", ",", "self", ".", "dims", "[", "'g'", "]", ")", ")", "\n", "success", "=", "np", ".", "zeros", "(", "self", ".", "rollout_batch_size", ")", "\n", "# compute new states and observations", "\n", "obs_dict_new", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "venv", ".", "step", "(", "u", ")", "\n", "o_new", "=", "obs_dict_new", "[", "'observation'", "]", "\n", "ag_new", "=", "obs_dict_new", "[", "'achieved_goal'", "]", "\n", "success", "=", "np", ".", "array", "(", "[", "i", ".", "get", "(", "'is_success'", ",", "0.0", ")", "for", "i", "in", "info", "]", ")", "\n", "\n", "if", "any", "(", "done", ")", "or", "t", "==", "self", ".", "T", "-", "1", ":", "\n", "# here we assume all environments are done is ~same number of steps, so we terminate rollouts whenever any of the envs returns done", "\n", "# trick with using vecenvs is not to add the obs from the environments that are \"done\", because those are already observations", "\n", "# after a reset", "\n", "                ", "break", "\n", "\n", "", "for", "i", ",", "info_dict", "in", "enumerate", "(", "info", ")", ":", "\n", "                ", "for", "idx", ",", "key", "in", "enumerate", "(", "self", ".", "info_keys", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "info_values", "[", "idx", "]", "[", "t", ",", "i", "]", "=", "info", "[", "i", "]", "[", "key", "]", "\n", "", "except", ":", "\n", "                        ", "pass", "\n", "\n", "", "", "", "if", "np", ".", "isnan", "(", "o_new", ")", ".", "any", "(", ")", ":", "\n", "                ", "self", ".", "logger", ".", "warn", "(", "'NaN caught during rollout generation. Trying again...'", ")", "\n", "self", ".", "reset_all_rollouts", "(", ")", "\n", "return", "self", ".", "generate_rollouts", "(", ")", "\n", "\n", "", "dones", ".", "append", "(", "done", ")", "\n", "obs", ".", "append", "(", "o", ".", "copy", "(", ")", ")", "\n", "achieved_goals", ".", "append", "(", "ag", ".", "copy", "(", ")", ")", "\n", "successes", ".", "append", "(", "success", ".", "copy", "(", ")", ")", "\n", "acts", ".", "append", "(", "u", ".", "copy", "(", ")", ")", "\n", "goals", ".", "append", "(", "self", ".", "g", ".", "copy", "(", ")", ")", "\n", "rewards", ".", "append", "(", "reward", ".", "copy", "(", ")", ")", "\n", "o", "[", "...", "]", "=", "o_new", "\n", "ag", "[", "...", "]", "=", "ag_new", "\n", "", "obs", ".", "append", "(", "o", ".", "copy", "(", ")", ")", "\n", "achieved_goals", ".", "append", "(", "ag", ".", "copy", "(", ")", ")", "\n", "\n", "episode", "=", "dict", "(", "o", "=", "obs", ",", "\n", "u", "=", "acts", ",", "\n", "g", "=", "goals", ",", "\n", "ag", "=", "achieved_goals", ",", "\n", "r", "=", "rewards", ")", "\n", "\n", "for", "key", ",", "value", "in", "zip", "(", "self", ".", "info_keys", ",", "info_values", ")", ":", "\n", "            ", "episode", "[", "'info_{}'", ".", "format", "(", "key", ")", "]", "=", "value", "\n", "", "successful", "=", "np", ".", "array", "(", "successes", ")", "[", "-", "1", ",", ":", "]", "\n", "assert", "successful", ".", "shape", "==", "(", "self", ".", "rollout_batch_size", ",", ")", "\n", "success_rate", "=", "np", ".", "mean", "(", "successful", ")", "\n", "self", ".", "success_history", ".", "append", "(", "success_rate", ")", "\n", "dis_return", ",", "undis_return", "=", "discounted_return", "(", "rewards", ",", "self", ".", "gamma", ")", "\n", "self", ".", "return_history", ".", "append", "(", "undis_return", ")", "\n", "self", ".", "dis_return_history", ".", "append", "(", "dis_return", ")", "\n", "self", ".", "distances", ".", "append", "(", "np", ".", "linalg", ".", "norm", "(", "achieved_goals", "[", "-", "1", "]", "-", "goals", "[", "-", "1", "]", ")", ")", "\n", "\n", "if", "self", ".", "compute_Q", ":", "\n", "            ", "self", ".", "Q_history", ".", "append", "(", "np", ".", "mean", "(", "Qs", ")", ")", "\n", "", "self", ".", "n_episodes", "+=", "self", ".", "rollout_batch_size", "\n", "# change shape to (rollout, steps, dim)", "\n", "return", "convert_episode_to_batch_major", "(", "episode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.clear_history": [[152, 159], ["rollout.RolloutWorker.success_history.clear", "rollout.RolloutWorker.Q_history.clear", "rollout.RolloutWorker.return_history.clear", "rollout.RolloutWorker.dis_return_history.clear"], "methods", ["None"], ["", "def", "clear_history", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clears all histories that are used for statistics\n        \"\"\"", "\n", "self", ".", "success_history", ".", "clear", "(", ")", "\n", "self", ".", "Q_history", ".", "clear", "(", ")", "\n", "self", ".", "return_history", ".", "clear", "(", ")", "\n", "self", ".", "dis_return_history", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.current_success_rate": [[160, 162], ["numpy.mean"], "methods", ["None"], ["", "def", "current_success_rate", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "success_history", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.current_mean_Q": [[163, 165], ["numpy.mean"], "methods", ["None"], ["", "def", "current_mean_Q", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "Q_history", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.current_mean_return": [[166, 168], ["numpy.mean"], "methods", ["None"], ["", "def", "current_mean_return", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "return_history", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.save_policy": [[169, 173], ["rollout.RolloutWorker.policy.save"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.save"], ["", "def", "save_policy", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Pickles the current policy for later inspection.\n        \"\"\"", "\n", "self", ".", "policy", ".", "save", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.logs": [[174, 191], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "prefix.endswith", "numpy.mean"], "methods", ["None"], ["", "def", "logs", "(", "self", ",", "prefix", "=", "'worker'", ")", ":", "\n", "        ", "\"\"\"Generates a dictionary that contains all collected statistics.\n        \"\"\"", "\n", "logs", "=", "[", "]", "\n", "logs", "+=", "[", "(", "'success_rate'", ",", "np", ".", "mean", "(", "self", ".", "success_history", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'return'", ",", "np", ".", "mean", "(", "self", ".", "return_history", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'discount_return'", ",", "np", ".", "mean", "(", "self", ".", "dis_return_history", ")", ")", "]", "\n", "if", "self", ".", "compute_Q", ":", "\n", "            ", "logs", "+=", "[", "(", "'mean_Q'", ",", "np", ".", "mean", "(", "self", ".", "Q_history", ")", ")", "]", "\n", "", "logs", "+=", "[", "(", "'episode'", ",", "self", ".", "n_episodes", ")", "]", "\n", "logs", "+=", "[", "(", "'distance'", ",", "np", ".", "mean", "(", "self", ".", "distances", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'distance_std'", ",", "np", ".", "std", "(", "self", ".", "distances", ")", ")", "]", "\n", "\n", "if", "prefix", "!=", "''", "and", "not", "prefix", ".", "endswith", "(", "'/'", ")", ":", "\n", "            ", "return", "[", "(", "prefix", "+", "'/'", "+", "key", ",", "val", ")", "for", "key", ",", "val", "in", "logs", "]", "\n", "", "else", ":", "\n", "            ", "return", "logs", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.adv_que.Advque.__init__": [[4, 9], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "50000", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "current_size", "=", "0", "\n", "self", ".", "que", "=", "np", ".", "zeros", "(", "size", ")", "\n", "self", ".", "idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.adv_que.Advque.update": [[10, 23], ["len", "values.reshape", "min", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.concatenate"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "values", ")", ":", "\n", "        ", "l", "=", "len", "(", "values", ")", "\n", "\n", "if", "self", ".", "idx", "+", "l", "<=", "self", ".", "size", ":", "\n", "            ", "idxes", "=", "np", ".", "arange", "(", "self", ".", "idx", ",", "self", ".", "idx", "+", "l", ")", "\n", "", "else", ":", "\n", "            ", "idx1", "=", "np", ".", "arange", "(", "self", ".", "idx", ",", "self", ".", "size", ")", "\n", "idx2", "=", "np", ".", "arange", "(", "0", ",", "self", ".", "idx", "+", "l", "-", "self", ".", "size", ")", "\n", "idxes", "=", "np", ".", "concatenate", "(", "(", "idx1", ",", "idx2", ")", ")", "\n", "", "self", ".", "que", "[", "idxes", "]", "=", "values", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "self", ".", "idx", "=", "(", "self", ".", "idx", "+", "l", ")", "%", "self", ".", "size", "\n", "self", ".", "current_size", "=", "min", "(", "self", ".", "current_size", "+", "l", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.adv_que.Advque.get": [[24, 26], ["numpy.percentile"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "threshold", ")", ":", "\n", "        ", "return", "np", ".", "percentile", "(", "self", ".", "que", "[", ":", "self", ".", "current_size", "]", ",", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.cached_make_env": [[126, 136], ["config.prepare_params.make_env"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.env_util.make_env"], ["def", "cached_make_env", "(", "make_env", ")", ":", "\n", "    ", "\"\"\"\n    Only creates a new environment from the provided function if one has not yet already been\n    created. This is useful here because we need to infer certain properties of the env, e.g.\n    its observation and action spaces, without any intend of actually using it.\n    \"\"\"", "\n", "if", "make_env", "not", "in", "CACHED_ENVS", ":", "\n", "        ", "env", "=", "make_env", "(", ")", "\n", "CACHED_ENVS", "[", "make_env", "]", "=", "env", "\n", "", "return", "CACHED_ENVS", "[", "make_env", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.prepare_mode": [[137, 147], ["kwargs.keys"], "function", ["None"], ["", "def", "prepare_mode", "(", "kwargs", ")", ":", "\n", "    ", "if", "'mode'", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "        ", "mode", "=", "kwargs", "[", "'mode'", "]", "\n", "if", "mode", "==", "'supervised'", ":", "\n", "            ", "kwargs", "[", "'use_supervised'", "]", "=", "True", "\n", "", "else", ":", "\n", "            ", "kwargs", "[", "'use_supervised'", "]", "=", "False", "\n", "", "", "else", ":", "\n", "        ", "kwargs", "[", "'use_supervised'", "]", "=", "False", "\n", "", "return", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.prepare_params": [[149, 218], ["config.prepare_mode", "dict", "config.cached_make_env", "hasattr", "env_name.startswith", "isinstance", "numpy.array", "gym.make", "wgcsl.envs.multi_world_wrapper.FetchGoalWrapper", "env_name.startswith", "hasattr", "wgcsl.common.monitor.Monitor", "gym.wrappers.TimeLimit", "wgcsl.common.logger.log", "gym.make", "env_name.startswith", "wgcsl.common.logger.get_dir", "MPI.COMM_WORLD.Get_rank", "os.path.join", "wgcsl.envs.multi_world_wrapper.PointGoalWrapper", "env_name.startswith", "wgcsl.common.logger.warn", "wgcsl.common.logger.get_dir", "wgcsl.envs.multi_world_wrapper.SawyerGoalWrapper", "env_name.startswith", "str", "wgcsl.envs.multi_world_wrapper.ReacherGoalWrapper", "str"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.prepare_mode", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.cached_make_env", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.log", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_dir", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.warn", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_dir"], ["", "def", "prepare_params", "(", "kwargs", ")", ":", "\n", "# default max episode steps", "\n", "    ", "kwargs", "=", "prepare_mode", "(", "kwargs", ")", "\n", "default_max_episode_steps", "=", "50", "\n", "# WGCSL params", "\n", "wgcsl_params", "=", "dict", "(", ")", "\n", "env_name", "=", "kwargs", "[", "'env_name'", "]", "\n", "def", "make_env", "(", "subrank", "=", "None", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "env", "=", "gym", ".", "make", "(", "env_name", ",", "rewrad_type", "=", "'sparse'", ")", "\n", "", "except", ":", "\n", "            ", "logger", ".", "log", "(", "'Can not make sparse reward environment'", ")", "\n", "env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "# add wrapper for multiworld environment", "\n", "", "if", "env_name", ".", "startswith", "(", "'Fetch'", ")", ":", "\n", "            ", "env", ".", "_max_episode_steps", "=", "50", "\n", "env", "=", "FetchGoalWrapper", "(", "env", ")", "\n", "", "elif", "env_name", ".", "startswith", "(", "'HandManipulate'", ")", ":", "\n", "            ", "env", ".", "_max_episode_steps", "=", "100", "\n", "", "elif", "env_name", ".", "startswith", "(", "'Point'", ")", ":", "\n", "            ", "env", "=", "PointGoalWrapper", "(", "env", ")", "\n", "env", ".", "env", ".", "_max_episode_steps", "=", "50", "\n", "", "elif", "env_name", ".", "startswith", "(", "'Sawyer'", ")", ":", "\n", "            ", "env", "=", "SawyerGoalWrapper", "(", "env", ")", "\n", "", "elif", "env_name", ".", "startswith", "(", "'Reacher'", ")", ":", "\n", "            ", "env", "=", "ReacherGoalWrapper", "(", "env", ")", "\n", "\n", "", "if", "(", "subrank", "is", "not", "None", "and", "logger", ".", "get_dir", "(", ")", "is", "not", "None", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "from", "mpi4py", "import", "MPI", "\n", "mpi_rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "", "except", "ImportError", ":", "\n", "                ", "MPI", "=", "None", "\n", "mpi_rank", "=", "0", "\n", "logger", ".", "warn", "(", "'Running with a single MPI process. This should work, but the results may differ from the ones publshed in Plappert et al.'", ")", "\n", "\n", "", "if", "hasattr", "(", "env", ",", "'_max_episode_steps'", ")", ":", "\n", "                ", "max_episode_steps", "=", "env", ".", "_max_episode_steps", "\n", "", "else", ":", "\n", "                ", "max_episode_steps", "=", "default_max_episode_steps", "# otherwise use defaulit max episode steps", "\n", "", "env", "=", "Monitor", "(", "env", ",", "\n", "os", ".", "path", ".", "join", "(", "logger", ".", "get_dir", "(", ")", ",", "str", "(", "mpi_rank", ")", "+", "'.'", "+", "str", "(", "subrank", ")", ")", ",", "\n", "allow_early_resets", "=", "True", ")", "\n", "# hack to re-expose _max_episode_steps (ideally should replace reliance on it downstream)", "\n", "env", "=", "gym", ".", "wrappers", ".", "TimeLimit", "(", "env", ",", "max_episode_steps", "=", "max_episode_steps", ")", "\n", "", "return", "env", "\n", "\n", "", "kwargs", "[", "'make_env'", "]", "=", "make_env", "\n", "tmp_env", "=", "cached_make_env", "(", "kwargs", "[", "'make_env'", "]", ")", "\n", "if", "hasattr", "(", "tmp_env", ",", "'_max_episode_steps'", ")", ":", "\n", "        ", "kwargs", "[", "'T'", "]", "=", "tmp_env", ".", "_max_episode_steps", "\n", "", "else", ":", "\n", "        ", "kwargs", "[", "'T'", "]", "=", "default_max_episode_steps", "\n", "\n", "", "kwargs", "[", "'max_u'", "]", "=", "np", ".", "array", "(", "kwargs", "[", "'max_u'", "]", ")", "if", "isinstance", "(", "kwargs", "[", "'max_u'", "]", ",", "list", ")", "else", "kwargs", "[", "'max_u'", "]", "\n", "kwargs", "[", "'gamma'", "]", "=", "1.", "-", "1.", "/", "kwargs", "[", "'T'", "]", "\n", "if", "'lr'", "in", "kwargs", ":", "\n", "        ", "kwargs", "[", "'pi_lr'", "]", "=", "kwargs", "[", "'lr'", "]", "\n", "kwargs", "[", "'Q_lr'", "]", "=", "kwargs", "[", "'lr'", "]", "\n", "del", "kwargs", "[", "'lr'", "]", "\n", "", "for", "name", "in", "[", "'buffer_size'", ",", "'hidden'", ",", "'layers'", ",", "'network_class'", ",", "'polyak'", ",", "'batch_size'", ",", "\n", "'Q_lr'", ",", "'pi_lr'", ",", "'norm_eps'", ",", "'norm_clip'", ",", "'max_u'", ",", "'action_l2'", ",", "'clip_obs'", ",", "\n", "'scope'", ",", "'relative_goals'", ",", "'use_supervised'", "]", ":", "\n", "        ", "wgcsl_params", "[", "name", "]", "=", "kwargs", "[", "name", "]", "\n", "kwargs", "[", "'_'", "+", "name", "]", "=", "kwargs", "[", "name", "]", "\n", "del", "kwargs", "[", "name", "]", "\n", "\n", "", "kwargs", "[", "'wgcsl_params'", "]", "=", "wgcsl_params", "\n", "return", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.log_params": [[220, 223], ["sorted", "params.keys", "wgcsl.common.logger.info"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.info"], ["", "def", "log_params", "(", "params", ",", "logger", "=", "logger", ")", ":", "\n", "    ", "for", "key", "in", "sorted", "(", "params", ".", "keys", "(", ")", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "key", ",", "params", "[", "key", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.configure_her": [[225, 250], ["config.cached_make_env", "cached_make_env.reset", "wgcsl.algo.supervised_sampler.make_sample_transitions", "wgcsl.algo.supervised_sampler.make_random_sample", "cached_make_env.compute_reward"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.cached_make_env", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.supervised_sampler.make_sample_transitions", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.supervised_sampler.make_random_sample", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.multitask_env.MultitaskEnv.compute_reward"], ["", "", "def", "configure_her", "(", "params", ")", ":", "\n", "    ", "env", "=", "cached_make_env", "(", "params", "[", "'make_env'", "]", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "def", "reward_fun", "(", "ag_2", ",", "g", ",", "info", ")", ":", "# vectorized", "\n", "        ", "return", "env", ".", "compute_reward", "(", "achieved_goal", "=", "ag_2", ",", "desired_goal", "=", "g", ",", "info", "=", "info", ")", "\n", "\n", "# Prepare configuration for HER.", "\n", "", "her_params", "=", "{", "\n", "'reward_fun'", ":", "reward_fun", ",", "\n", "'no_relabel'", ":", "params", "[", "'no_relabel'", "]", "\n", "}", "\n", "for", "name", "in", "[", "'replay_strategy'", ",", "'replay_k'", "]", ":", "\n", "        ", "her_params", "[", "name", "]", "=", "params", "[", "name", "]", "\n", "params", "[", "'_'", "+", "name", "]", "=", "her_params", "[", "name", "]", "\n", "del", "params", "[", "name", "]", "\n", "\n", "", "sample_supervised", ",", "her_sampler", "=", "make_sample_transitions", "(", "**", "her_params", ")", "\n", "random_sampler", "=", "make_random_sample", "(", "her_params", "[", "'reward_fun'", "]", ")", "\n", "samplers", "=", "{", "\n", "'random'", ":", "random_sampler", ",", "\n", "'her'", ":", "her_sampler", ",", "\n", "'supervised'", ":", "sample_supervised", "\n", "}", "\n", "return", "samplers", ",", "reward_fun", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.simple_goal_subtract": [[251, 254], ["None"], "function", ["None"], ["", "def", "simple_goal_subtract", "(", "a", ",", "b", ")", ":", "\n", "    ", "assert", "a", ".", "shape", "==", "b", ".", "shape", "\n", "return", "a", "-", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.configure_wgcsl": [[255, 285], ["config.configure_her", "dims.copy", "config.cached_make_env", "cached_make_env.reset", "wgcsl_params.update", "wgcsl.algo.wgcsl.WGCSL"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.configure_her", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.cached_make_env", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update"], ["", "def", "configure_wgcsl", "(", "dims", ",", "params", ",", "reuse", "=", "False", ",", "use_mpi", "=", "True", ",", "clip_return", "=", "True", ",", "offline_train", "=", "False", ")", ":", "\n", "    ", "samplers", ",", "reward_fun", "=", "configure_her", "(", "params", ")", "\n", "# Extract relevant parameters.", "\n", "rollout_batch_size", "=", "params", "[", "'rollout_batch_size'", "]", "\n", "wgcsl_params", "=", "params", "[", "'wgcsl_params'", "]", "\n", "\n", "input_dims", "=", "dims", ".", "copy", "(", ")", "\n", "# WGCSL agent", "\n", "env", "=", "cached_make_env", "(", "params", "[", "'make_env'", "]", ")", "\n", "env", ".", "reset", "(", ")", "\n", "wgcsl_params", ".", "update", "(", "{", "'input_dims'", ":", "input_dims", ",", "# agent takes an input observations", "\n", "'T'", ":", "params", "[", "'T'", "]", ",", "\n", "'clip_pos_returns'", ":", "True", ",", "# clip positive returns", "\n", "'clip_return'", ":", "(", "1.", "/", "(", "1.", "-", "params", "[", "'gamma'", "]", ")", ")", "if", "clip_return", "else", "np", ".", "inf", ",", "# max abs of return ", "\n", "'rollout_batch_size'", ":", "rollout_batch_size", ",", "\n", "'subtract_goals'", ":", "simple_goal_subtract", ",", "\n", "'sample_transitions'", ":", "samplers", "[", "'her'", "]", ",", "\n", "'random_sampler'", ":", "samplers", "[", "'random'", "]", ",", "\n", "'supervised_sampler'", ":", "samplers", "[", "'supervised'", "]", ",", "\n", "'gamma'", ":", "params", "[", "'gamma'", "]", ",", "\n", "'su_method'", ":", "params", "[", "'su_method'", "]", ",", "\n", "'baw_delta'", ":", "params", "[", "'baw_delta'", "]", ",", "\n", "'baw_max'", ":", "params", "[", "'baw_max'", "]", ",", "\n", "}", ")", "\n", "wgcsl_params", "[", "'info'", "]", "=", "{", "\n", "'env_name'", ":", "params", "[", "'env_name'", "]", ",", "\n", "'reward_fun'", ":", "reward_fun", "\n", "}", "\n", "policy", "=", "WGCSL", "(", "reuse", "=", "reuse", ",", "**", "wgcsl_params", ",", "use_mpi", "=", "use_mpi", ",", "offline_train", "=", "offline_train", ")", "\n", "return", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.configure_dims": [[287, 297], ["config.cached_make_env", "cached_make_env.reset", "cached_make_env.step", "cached_make_env.action_space.sample"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.cached_make_env", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.sample"], ["", "def", "configure_dims", "(", "params", ")", ":", "\n", "    ", "env", "=", "cached_make_env", "(", "params", "[", "'make_env'", "]", ")", "\n", "env", ".", "reset", "(", ")", "\n", "obs", ",", "_", ",", "_", ",", "info", "=", "env", ".", "step", "(", "env", ".", "action_space", ".", "sample", "(", ")", ")", "\n", "dims", "=", "{", "\n", "'o'", ":", "obs", "[", "'observation'", "]", ".", "shape", "[", "0", "]", ",", "\n", "'u'", ":", "env", ".", "action_space", ".", "shape", "[", "0", "]", ",", "\n", "'g'", ":", "obs", "[", "'desired_goal'", "]", ".", "shape", "[", "0", "]", ",", "\n", "}", "\n", "return", "dims", "\n", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.supervised_sampler.make_random_sample": [[9, 37], ["numpy.random.randint", "numpy.random.randint", "transitions.items", "reward_fun", "[].copy", "key.startswith", "transitions[].reshape", "episode_batch.keys", "transitions.keys", "key.replace"], "function", ["None"], ["def", "make_random_sample", "(", "reward_fun", ")", ":", "\n", "    ", "def", "_random_sample", "(", "episode_batch", ",", "batch_size_in_transitions", ")", ":", "\n", "        ", "\"\"\"episode_batch is {key: array(buffer_size x T x dim_key)}\n        \"\"\"", "\n", "T", "=", "episode_batch", "[", "'u'", "]", ".", "shape", "[", "1", "]", "# steps of a episode", "\n", "rollout_batch_size", "=", "episode_batch", "[", "'u'", "]", ".", "shape", "[", "0", "]", "# number of episodes", "\n", "batch_size", "=", "batch_size_in_transitions", "# number of goals sample from rollout", "\n", "episode_idxs", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "rollout_batch_size", ",", "batch_size", ")", "\n", "t_samples", "=", "np", ".", "random", ".", "randint", "(", "T", ",", "size", "=", "batch_size", ")", "\n", "transitions", "=", "{", "key", ":", "episode_batch", "[", "key", "]", "[", "episode_idxs", ",", "t_samples", "]", ".", "copy", "(", ")", "\n", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", "}", "\n", "# Reconstruct info dictionary for reward computation.", "\n", "info", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "transitions", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'info_'", ")", ":", "\n", "                ", "info", "[", "key", ".", "replace", "(", "'info_'", ",", "''", ")", "]", "=", "value", "\n", "\n", "# # Re-compute reward since we may have substituted the u and o_2 ag_2", "\n", "", "", "reward_params", "=", "{", "k", ":", "transitions", "[", "k", "]", "for", "k", "in", "[", "'ag_2'", ",", "'g'", "]", "}", "\n", "reward_params", "[", "'info'", "]", "=", "info", "\n", "transitions", "[", "'r'", "]", "=", "reward_fun", "(", "**", "reward_params", ")", "\n", "\n", "transitions", "=", "{", "k", ":", "transitions", "[", "k", "]", ".", "reshape", "(", "batch_size", ",", "*", "transitions", "[", "k", "]", ".", "shape", "[", "1", ":", "]", ")", "\n", "for", "k", "in", "transitions", ".", "keys", "(", ")", "}", "\n", "assert", "(", "transitions", "[", "'u'", "]", ".", "shape", "[", "0", "]", "==", "batch_size_in_transitions", ")", "\n", "\n", "return", "transitions", "\n", "", "return", "_random_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.supervised_sampler.make_sample_transitions": [[39, 156], ["print", "numpy.random.randint", "numpy.random.randint", "future_offset.astype.astype", "supervised_sampler.make_sample_transitions._preprocess"], "function", ["None"], ["", "def", "make_sample_transitions", "(", "replay_strategy", ",", "replay_k", ",", "reward_fun", ",", "no_relabel", "=", "False", ")", ":", "\n", "    ", "if", "replay_strategy", "==", "'future'", ":", "\n", "        ", "future_p", "=", "1", "-", "(", "1.", "/", "(", "1", "+", "replay_k", ")", ")", "\n", "", "else", ":", "\n", "        ", "future_p", "=", "0", "\n", "\n", "", "if", "no_relabel", ":", "\n", "        ", "print", "(", "'*'", "*", "10", "+", "'Do not use relabeling in this method'", "+", "'*'", "*", "10", ")", "\n", "\n", "", "def", "_preprocess", "(", "episode_batch", ",", "batch_size_in_transitions", ")", ":", "\n", "        ", "T", "=", "episode_batch", "[", "'u'", "]", ".", "shape", "[", "1", "]", "# steps of a episode", "\n", "rollout_batch_size", "=", "episode_batch", "[", "'u'", "]", ".", "shape", "[", "0", "]", "# number of episodes", "\n", "batch_size", "=", "batch_size_in_transitions", "# number of goals sample from rollout", "\n", "episode_idxs", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "rollout_batch_size", ",", "batch_size", ")", "\n", "t_samples", "=", "np", ".", "random", ".", "randint", "(", "T", ",", "size", "=", "batch_size", ")", "\n", "transitions", "=", "{", "key", ":", "episode_batch", "[", "key", "]", "[", "episode_idxs", ",", "t_samples", "]", ".", "copy", "(", ")", "\n", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", "}", "\n", "return", "transitions", ",", "episode_idxs", ",", "t_samples", ",", "batch_size", ",", "T", "\n", "\n", "", "def", "_get_reward", "(", "ag_2", ",", "g", ")", ":", "\n", "        ", "info", "=", "{", "}", "\n", "reward_params", "=", "{", "'ag_2'", ":", "ag_2", ",", "'g'", ":", "g", "}", "\n", "reward_params", "[", "'info'", "]", "=", "info", "\n", "# make rewards -1/0 --->0/1", "\n", "return", "reward_fun", "(", "**", "reward_params", ")", "+", "1", "\n", "\n", "", "def", "_get_future_ags", "(", "episode_batch", ",", "episode_idxs", ",", "t_samples", ",", "batch_size", ",", "T", ",", "future_p", "=", "future_p", ",", "return_t", "=", "False", ")", ":", "\n", "        ", "her_indexes", "=", "(", "np", ".", "random", ".", "uniform", "(", "size", "=", "batch_size", ")", "<", "future_p", ")", "\n", "future_offset", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "batch_size", ")", "*", "(", "T", "-", "t_samples", ")", "\n", "future_offset", "=", "future_offset", ".", "astype", "(", "int", ")", "\n", "future_t", "=", "(", "t_samples", "+", "1", "+", "future_offset", ")", "[", "her_indexes", "]", "\n", "future_ag", "=", "episode_batch", "[", "'ag'", "]", "[", "episode_idxs", "[", "her_indexes", "]", ",", "future_t", "]", "\n", "if", "not", "return_t", ":", "\n", "            ", "return", "future_ag", ".", "copy", "(", ")", ",", "her_indexes", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "future_ag", ".", "copy", "(", ")", ",", "her_indexes", ".", "copy", "(", ")", ",", "future_offset", "\n", "\n", "\n", "", "", "def", "_reshape_transitions", "(", "transitions", ",", "batch_size", ",", "batch_size_in_transitions", ")", ":", "\n", "        ", "transitions", "=", "{", "k", ":", "transitions", "[", "k", "]", ".", "reshape", "(", "batch_size", ",", "*", "transitions", "[", "k", "]", ".", "shape", "[", "1", ":", "]", ")", "\n", "for", "k", "in", "transitions", ".", "keys", "(", ")", "}", "\n", "\n", "assert", "(", "transitions", "[", "'u'", "]", ".", "shape", "[", "0", "]", "==", "batch_size_in_transitions", ")", "\n", "return", "transitions", "\n", "\n", "", "def", "_sample_her_transitions", "(", "episode_batch", ",", "batch_size_in_transitions", ",", "info", "=", "None", ")", ":", "\n", "        ", "\"\"\"episode_batch is {key: array(buffer_size x T x dim_key)}\n        \"\"\"", "\n", "transitions", ",", "episode_idxs", ",", "t_samples", ",", "batch_size", ",", "T", "=", "_preprocess", "(", "episode_batch", ",", "batch_size_in_transitions", ")", "\n", "if", "not", "no_relabel", ":", "\n", "            ", "future_ag", ",", "her_indexes", "=", "_get_future_ags", "(", "episode_batch", ",", "episode_idxs", ",", "t_samples", ",", "batch_size", ",", "T", ")", "\n", "if", "len", "(", "transitions", "[", "'g'", "]", ".", "shape", ")", "==", "1", ":", "\n", "                ", "transitions", "[", "'g'", "]", "[", "her_indexes", "]", "=", "future_ag", ".", "reshape", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "transitions", "[", "'g'", "]", "[", "her_indexes", "]", "=", "future_ag", "\n", "\n", "", "", "transitions", "[", "'r'", "]", "=", "_get_reward", "(", "transitions", "[", "'ag_2'", "]", ",", "transitions", "[", "'g'", "]", ")", "\n", "return", "_reshape_transitions", "(", "transitions", ",", "batch_size", ",", "batch_size_in_transitions", ")", "\n", "\n", "", "def", "_sample_supervised_transitions", "(", "episode_batch", ",", "batch_size_in_transitions", ",", "info", ")", ":", "\n", "        ", "train_policy", ",", "gamma", ",", "get_Q_pi", ",", "method", "=", "info", "[", "'train_policy'", "]", ",", "info", "[", "'gamma'", "]", ",", "info", "[", "'get_Q_pi'", "]", ",", "info", "[", "'method'", "]", "\n", "baw_delta", ",", "baw_max", "=", "info", "[", "'baw_delta'", "]", ",", "info", "[", "'baw_max'", "]", "\n", "transitions", ",", "episode_idxs", ",", "t_samples", ",", "batch_size", ",", "T", "=", "_preprocess", "(", "episode_batch", ",", "batch_size_in_transitions", ")", "\n", "\n", "random_log", "(", "'using supervide policy learning with method {} and no relabel {}'", ".", "format", "(", "method", ",", "no_relabel", ")", ")", "\n", "original_g", "=", "transitions", "[", "'g'", "]", ".", "copy", "(", ")", "# save to train the value function", "\n", "if", "not", "no_relabel", ":", "\n", "            ", "future_ag", ",", "her_indexes", ",", "offset", "=", "_get_future_ags", "(", "episode_batch", ",", "episode_idxs", ",", "t_samples", ",", "batch_size", ",", "T", ",", "future_p", "=", "1", ",", "return_t", "=", "True", ")", "\n", "transitions", "[", "'g'", "]", "[", "her_indexes", "]", "=", "future_ag", "\n", "", "else", ":", "\n", "            ", "offset", "=", "np", ".", "zeros", "(", "batch_size", ")", "\n", "\n", "", "if", "method", "==", "''", ":", "# do not use weights for GCSL", "\n", "            ", "loss", "=", "train_policy", "(", "o", "=", "transitions", "[", "'o'", "]", ",", "g", "=", "transitions", "[", "'g'", "]", ",", "u", "=", "transitions", "[", "'u'", "]", ")", "\n", "", "else", ":", "\n", "            ", "method_lis", "=", "method", ".", "split", "(", "'_'", ")", "\n", "if", "'gamma'", "in", "method_lis", ":", "\n", "                ", "weights", "=", "pow", "(", "gamma", ",", "offset", ")", "\n", "", "else", ":", "\n", "                ", "weights", "=", "np", ".", "ones", "(", "batch_size", ")", "\n", "\n", "", "if", "'adv'", "in", "method_lis", ":", "\n", "                ", "value", "=", "get_Q_pi", "(", "o", "=", "transitions", "[", "'o'", "]", ",", "g", "=", "transitions", "[", "'g'", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "next_value", "=", "get_Q_pi", "(", "o", "=", "transitions", "[", "'o_2'", "]", ",", "g", "=", "transitions", "[", "'g'", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "adv", "=", "_get_reward", "(", "transitions", "[", "'ag_2'", "]", ",", "transitions", "[", "'g'", "]", ")", "+", "gamma", "*", "next_value", "-", "value", "\n", "\n", "if", "'baw'", "in", "method_lis", ":", "\n", "                    ", "advque", ".", "update", "(", "adv", ")", "\n", "global", "global_threshold", "\n", "global_threshold", "=", "min", "(", "global_threshold", "+", "baw_delta", ",", "baw_max", ")", "\n", "threshold", "=", "advque", ".", "get", "(", "global_threshold", ")", "\n", "\n", "", "if", "'exp'", "in", "method_lis", ":", "# exp weights", "\n", "                    ", "if", "'clip10'", "in", "method_lis", ":", "\n", "                        ", "weights", "*=", "np", ".", "clip", "(", "np", ".", "exp", "(", "adv", ")", ",", "0", ",", "10", ")", "\n", "", "elif", "'clip5'", "in", "method_lis", ":", "\n", "                        ", "weights", "*=", "np", ".", "clip", "(", "np", ".", "exp", "(", "adv", ")", ",", "0", ",", "5", ")", "\n", "", "elif", "'clip1'", "in", "method_lis", ":", "\n", "                        ", "weights", "*=", "np", ".", "clip", "(", "np", ".", "exp", "(", "adv", ")", ",", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "                        ", "weights", "*=", "np", ".", "exp", "(", "adv", ")", "\n", "\n", "", "", "if", "'baw'", "in", "method_lis", ":", "\n", "                    ", "positive", "=", "adv", ".", "copy", "(", ")", "\n", "positive", "[", "adv", ">=", "threshold", "]", "=", "1", "\n", "positive", "[", "adv", "<", "threshold", "]", "=", "0.05", "\n", "weights", "*=", "positive", "\n", "\n", "", "", "loss", "=", "train_policy", "(", "o", "=", "transitions", "[", "'o'", "]", ",", "g", "=", "transitions", "[", "'g'", "]", ",", "u", "=", "transitions", "[", "'u'", "]", ",", "weights", "=", "weights", ")", "\n", "\n", "", "keep_origin_rate", "=", "0.2", "\n", "origin_index", "=", "(", "np", ".", "random", ".", "uniform", "(", "size", "=", "batch_size", ")", "<", "keep_origin_rate", ")", "\n", "transitions", "[", "'g'", "]", "[", "origin_index", "]", "=", "original_g", "[", "origin_index", "]", "\n", "transitions", "[", "'r'", "]", "=", "_get_reward", "(", "transitions", "[", "'ag_2'", "]", ",", "transitions", "[", "'g'", "]", ")", "\n", "return", "_reshape_transitions", "(", "transitions", ",", "batch_size", ",", "batch_size_in_transitions", ")", "\n", "\n", "", "return", "_sample_supervised_transitions", ",", "_sample_her_transitions", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.__init__": [[7, 31], ["threading.Lock", "numpy.empty", "buffer_shapes.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "buffer_shapes", ",", "size_in_transitions", ",", "T", ",", "sample_transitions", ",", "default_sampler", ",", "info", "=", "None", ")", ":", "\n", "        ", "\"\"\"Creates a replay buffer.\n        Args:\n            buffer_shapes (dict of ints): the shape for all buffers that are used in the replay\n                buffer\n            size_in_transitions (int): the size of the buffer, measured in transitions\n            T (int): the time horizon for episodes\n            sample_transitions (function): a function that samples from the replay buffer\n        \"\"\"", "\n", "self", ".", "buffer_shapes", "=", "buffer_shapes", "\n", "self", ".", "size", "=", "size_in_transitions", "//", "T", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "sample_transitions", "=", "sample_transitions", "\n", "self", ".", "default_sampler", "=", "default_sampler", "\n", "self", ".", "info", "=", "info", "\n", "# self.buffers is {key: array(size_in_episodes x T or T+1 x dim_key)}", "\n", "self", ".", "buffers", "=", "{", "key", ":", "np", ".", "empty", "(", "[", "self", ".", "size", ",", "*", "shape", "]", ")", "\n", "for", "key", ",", "shape", "in", "buffer_shapes", ".", "items", "(", ")", "}", "\n", "\n", "# memory management", "\n", "self", ".", "point", "=", "0", "\n", "self", ".", "current_size", "=", "0", "\n", "self", ".", "n_transitions_stored", "=", "0", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.full": [[32, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "full", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "==", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.sample": [[37, 60], ["replay_buffer.ReplayBuffer.buffers.keys", "replay_buffer.ReplayBuffer.default_sampler", "replay_buffer.ReplayBuffer.sample_transitions", "list", "replay_buffer.ReplayBuffer.buffers.keys"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ",", "batch_size", ",", "random", "=", "False", ")", ":", "\n", "        ", "\"\"\"Returns a dict {key: array(batch_size x shapes[key])}\n        \"\"\"", "\n", "buffers", "=", "{", "}", "\n", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "assert", "self", ".", "current_size", ">", "0", "\n", "for", "key", "in", "self", ".", "buffers", ".", "keys", "(", ")", ":", "\n", "                ", "buffers", "[", "key", "]", "=", "self", ".", "buffers", "[", "key", "]", "[", ":", "self", ".", "current_size", "]", "\n", "\n", "", "", "if", "'o_2'", "not", "in", "buffers", "and", "'ag_2'", "not", "in", "buffers", ":", "\n", "            ", "buffers", "[", "'o_2'", "]", "=", "buffers", "[", "'o'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "buffers", "[", "'ag_2'", "]", "=", "buffers", "[", "'ag'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "\n", "", "if", "random", ":", "\n", "            ", "transitions", "=", "self", ".", "default_sampler", "(", "buffers", ",", "batch_size", ",", "self", ".", "info", ")", "\n", "", "else", ":", "\n", "            ", "transitions", "=", "self", ".", "sample_transitions", "(", "buffers", ",", "batch_size", ",", "self", ".", "info", ")", "\n", "\n", "", "for", "key", "in", "(", "[", "'r'", ",", "'o_2'", ",", "'ag_2'", "]", "+", "list", "(", "self", ".", "buffers", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "assert", "key", "in", "transitions", ",", "\"key %s missing from transitions\"", "%", "key", "\n", "\n", "", "return", "transitions", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.store_episode": [[61, 77], ["numpy.all", "len", "replay_buffer.ReplayBuffer._get_ordered_storage_idx", "episode_batch.keys", "episode_batch.keys", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer._get_ordered_storage_idx"], ["", "def", "store_episode", "(", "self", ",", "episode_batch", ")", ":", "\n", "        ", "\"\"\"episode_batch: array(rollout_batch_size x (T or T+1) x dim_key)\n        \"\"\"", "\n", "batch_sizes", "=", "[", "len", "(", "episode_batch", "[", "key", "]", ")", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", "]", "\n", "assert", "np", ".", "all", "(", "np", ".", "array", "(", "batch_sizes", ")", "==", "batch_sizes", "[", "0", "]", ")", "\n", "batch_size", "=", "batch_sizes", "[", "0", "]", "\n", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "idxs", "=", "self", ".", "_get_ordered_storage_idx", "(", "batch_size", ")", "\n", "\n", "# load inputs into buffers", "\n", "for", "key", "in", "episode_batch", ".", "keys", "(", ")", ":", "\n", "                ", "if", "key", "in", "self", ".", "buffers", ":", "\n", "                    ", "self", ".", "buffers", "[", "key", "]", "[", "idxs", "]", "=", "episode_batch", "[", "key", "]", "\n", "\n", "", "", "self", ".", "n_transitions_stored", "+=", "batch_size", "*", "self", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.get_current_episode_size": [[79, 82], ["None"], "methods", ["None"], ["", "", "def", "get_current_episode_size", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.get_current_size": [[83, 86], ["None"], "methods", ["None"], ["", "", "def", "get_current_size", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "current_size", "*", "self", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.get_transitions_stored": [[87, 90], ["None"], "methods", ["None"], ["", "", "def", "get_transitions_stored", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "return", "self", ".", "n_transitions_stored", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.clear_buffer": [[91, 94], ["None"], "methods", ["None"], ["", "", "def", "clear_buffer", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "current_size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer._get_ordered_storage_idx": [[96, 117], ["numpy.arange", "numpy.arange", "numpy.arange", "numpy.concatenate", "min"], "methods", ["None"], ["", "", "def", "_get_ordered_storage_idx", "(", "self", ",", "inc", "=", "None", ")", ":", "\n", "        ", "inc", "=", "inc", "or", "1", "# size increment", "\n", "assert", "inc", "<=", "self", ".", "size", ",", "\"Batch committed to replay is too large!\"", "\n", "\n", "if", "self", ".", "point", "+", "inc", "<=", "self", ".", "size", "-", "1", ":", "\n", "            ", "idx", "=", "np", ".", "arange", "(", "self", ".", "point", ",", "self", ".", "point", "+", "inc", ")", "\n", "", "else", ":", "\n", "            ", "overflow", "=", "inc", "-", "(", "self", ".", "size", "-", "self", ".", "point", ")", "\n", "idx_a", "=", "np", ".", "arange", "(", "self", ".", "point", ",", "self", ".", "size", ")", "\n", "idx_b", "=", "np", ".", "arange", "(", "0", ",", "overflow", ")", "\n", "idx", "=", "np", ".", "concatenate", "(", "[", "idx_a", ",", "idx_b", "]", ")", "\n", "\n", "", "self", ".", "point", "=", "(", "self", ".", "point", "+", "inc", ")", "%", "self", ".", "size", "\n", "\n", "# update replay size, don't add when it already surpass self.size", "\n", "if", "self", ".", "current_size", "<", "self", ".", "size", ":", "\n", "            ", "self", ".", "current_size", "=", "min", "(", "self", ".", "size", ",", "self", ".", "current_size", "+", "inc", ")", "\n", "\n", "", "if", "inc", "==", "1", ":", "\n", "            ", "idx", "=", "idx", "[", "0", "]", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.save": [[118, 122], ["open", "pickle.dump", "replay_buffer.ReplayBuffer.buffer_shapes.keys"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "save_buffer", "=", "{", "key", ":", "self", ".", "buffers", "[", "key", "]", "[", ":", "self", ".", "current_size", "]", "for", "key", "in", "self", ".", "buffer_shapes", ".", "keys", "(", ")", "}", "\n", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "save_buffer", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.load": [[123, 133], ["open", "pickle.load", "replay_buffer.ReplayBuffer.buffer_shapes.keys", "numpy.empty", "replay_buffer.ReplayBuffer.buffer_shapes.items"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.load"], ["", "", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "size", "=", "data", "[", "'o'", "]", ".", "shape", "[", "0", "]", "\n", "self", ".", "current_size", "=", "size", "\n", "if", "size", ">", "self", ".", "size", ":", "\n", "                ", "self", ".", "buffers", "=", "{", "key", ":", "np", ".", "empty", "(", "[", "size", ",", "*", "shape", "]", ")", "for", "key", ",", "shape", "in", "self", ".", "buffer_shapes", ".", "items", "(", ")", "}", "\n", "self", ".", "size", "=", "size", "\n", "", "for", "key", "in", "self", ".", "buffer_shapes", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "buffers", "[", "key", "]", "[", ":", "size", "]", "=", "data", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.train.mpi_average": [[15, 21], ["isinstance", "any", "wgcsl.common.mpi_moments.mpi_moments", "numpy.array"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_moments.mpi_moments"], ["def", "mpi_average", "(", "value", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "        ", "value", "=", "[", "value", "]", "\n", "", "if", "not", "any", "(", "value", ")", ":", "\n", "        ", "value", "=", "[", "0.", "]", "\n", "", "return", "mpi_moments", "(", "np", ".", "array", "(", "value", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.train.train": [[23, 96], ["mpi4py.MPI.COMM_WORLD.Get_rank", "wgcsl.common.logger.info", "range", "os.path.join", "os.path.join", "os.path.join", "wgcsl.common.logger.info", "rollout_worker.clear_history", "range", "time.time", "rollout_worker.clear_history", "range", "evaluator.clear_history", "range", "time.time", "wgcsl.common.logger.record_tabular", "wgcsl.common.logger.record_tabular", "evaluator.logs", "rollout_worker.logs", "policy.logs", "train.mpi_average", "numpy.random.uniform", "np.random.uniform.copy", "mpi4py.MPI.COMM_WORLD.Bcast", "rollout_worker.generate_rollouts", "policy.store_episode", "range", "policy.update_target_net", "evaluator.generate_rollouts", "wgcsl.common.logger.record_tabular", "wgcsl.common.logger.record_tabular", "wgcsl.common.logger.record_tabular", "wgcsl.common.logger.dump_tabular", "evaluator.current_success_rate", "wgcsl.common.logger.info", "evaluator.save_policy", "evaluator.save_policy", "os.path.join.format", "wgcsl.common.logger.info", "evaluator.save_policy", "int", "rollout_worker.generate_rollouts", "policy.store_episode", "policy.train", "train.mpi_average", "train.mpi_average", "train.mpi_average"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.info", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.info", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.clear_history", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.clear_history", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.clear_history", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.logs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.logs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.logs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.train.mpi_average", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.generate_rollouts", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.store_episode", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.update_target_net", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.generate_rollouts", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.current_success_rate", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.info", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.save_policy", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.save_policy", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.info", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.save_policy", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.generate_rollouts", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.store_episode", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.train", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.train.mpi_average", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.train.mpi_average", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.train.mpi_average"], ["", "def", "train", "(", "*", ",", "policy", ",", "rollout_worker", ",", "evaluator", ",", "\n", "n_epochs", ",", "n_test_rollouts", ",", "n_cycles", ",", "n_batches", ",", "policy_save_interval", ",", "\n", "save_path", ",", "random_init", ",", "play_no_training", ",", "offline_train", ",", "**", "kwargs", ")", ":", "\n", "    ", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "\n", "if", "save_path", "and", "not", "play_no_training", ":", "\n", "        ", "latest_policy_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'policy_latest.pkl'", ")", "\n", "best_policy_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'policy_best.pkl'", ")", "\n", "periodic_policy_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'policy_{}.pkl'", ")", "\n", "\n", "# random_init for o/g/rnd stat and model training", "\n", "", "if", "random_init", "and", "not", "play_no_training", "and", "not", "offline_train", ":", "\n", "        ", "logger", ".", "info", "(", "'Random initializing ...'", ")", "\n", "rollout_worker", ".", "clear_history", "(", ")", "\n", "for", "epi", "in", "range", "(", "int", "(", "random_init", ")", "//", "rollout_worker", ".", "rollout_batch_size", ")", ":", "\n", "            ", "episode", "=", "rollout_worker", ".", "generate_rollouts", "(", "random_ac", "=", "True", ")", "\n", "policy", ".", "store_episode", "(", "episode", ")", "\n", "\n", "", "", "best_success_rate", "=", "-", "1", "\n", "logger", ".", "info", "(", "'Start training...'", ")", "\n", "# num_timesteps = n_epochs * n_cycles * rollout_length * number of rollout workers", "\n", "for", "epoch", "in", "range", "(", "n_epochs", ")", ":", "\n", "        ", "time_start", "=", "time", ".", "time", "(", ")", "\n", "rollout_worker", ".", "clear_history", "(", ")", "\n", "for", "i", "in", "range", "(", "n_cycles", ")", ":", "\n", "            ", "policy", ".", "dynamic_batch", "=", "False", "\n", "if", "not", "offline_train", ":", "\n", "                ", "episode", "=", "rollout_worker", ".", "generate_rollouts", "(", ")", "\n", "policy", ".", "store_episode", "(", "episode", ")", "\n", "", "for", "_", "in", "range", "(", "n_batches", ")", ":", "\n", "                ", "policy", ".", "train", "(", ")", "\n", "", "policy", ".", "update_target_net", "(", ")", "\n", "\n", "# test", "\n", "", "evaluator", ".", "clear_history", "(", ")", "\n", "evaluator", ".", "render", "=", "True", "\n", "for", "_", "in", "range", "(", "n_test_rollouts", ")", ":", "\n", "            ", "evaluator", ".", "generate_rollouts", "(", ")", "\n", "\n", "# record logs", "\n", "", "time_end", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "record_tabular", "(", "'epoch'", ",", "epoch", ")", "\n", "logger", ".", "record_tabular", "(", "'epoch time(min)'", ",", "(", "time_end", "-", "time_start", ")", "/", "60", ")", "\n", "for", "key", ",", "val", "in", "evaluator", ".", "logs", "(", "'test'", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "key", ",", "mpi_average", "(", "val", ")", ")", "\n", "", "for", "key", ",", "val", "in", "rollout_worker", ".", "logs", "(", "'train'", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "key", ",", "mpi_average", "(", "val", ")", ")", "\n", "", "for", "key", ",", "val", "in", "policy", ".", "logs", "(", ")", ":", "\n", "            ", "logger", ".", "record_tabular", "(", "key", ",", "mpi_average", "(", "val", ")", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "            ", "logger", ".", "dump_tabular", "(", ")", "\n", "\n", "# save the policy if it's better than the previous ones", "\n", "", "success_rate", "=", "mpi_average", "(", "evaluator", ".", "current_success_rate", "(", ")", ")", "\n", "if", "rank", "==", "0", "and", "success_rate", ">", "best_success_rate", "and", "save_path", "and", "not", "play_no_training", ":", "\n", "            ", "best_success_rate", "=", "success_rate", "\n", "logger", ".", "info", "(", "'New best success rate: {}. Saving policy to {} ...'", ".", "format", "(", "best_success_rate", ",", "best_policy_path", ")", ")", "\n", "evaluator", ".", "save_policy", "(", "best_policy_path", ")", "\n", "evaluator", ".", "save_policy", "(", "latest_policy_path", ")", "\n", "", "if", "rank", "==", "0", "and", "policy_save_interval", ">", "0", "and", "epoch", "%", "policy_save_interval", "==", "0", "and", "save_path", "and", "not", "play_no_training", ":", "\n", "            ", "policy_path", "=", "periodic_policy_path", ".", "format", "(", "epoch", ")", "\n", "logger", ".", "info", "(", "'Saving periodic policy to {} ...'", ".", "format", "(", "policy_path", ")", ")", "\n", "evaluator", ".", "save_policy", "(", "policy_path", ")", "\n", "\n", "# make sure that different threads have different seeds", "\n", "", "local_uniform", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "1", ",", ")", ")", "\n", "root_uniform", "=", "local_uniform", ".", "copy", "(", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Bcast", "(", "root_uniform", ",", "root", "=", "0", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "            ", "assert", "local_uniform", "[", "0", "]", "!=", "root_uniform", "[", "0", "]", "\n", "\n", "", "", "return", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.train.learn": [[98, 197], ["mpi4py.MPI.COMM_WORLD.Get_rank", "wgcsl.common.util.set_global_seeds", "config.prepare_params.update", "config.prepare_params.update", "wgcsl.prepare_params", "wgcsl.algo.util.dump_params", "wgcsl.configure_dims", "wgcsl.configure_wgcsl", "wgcsl.algo.rollout.RolloutWorker", "wgcsl.algo.rollout.RolloutWorker", "train.train", "mpi4py.MPI.COMM_WORLD.Get_rank", "mpi4py.MPI.COMM_WORLD.Get_size", "config.prepare_params.update", "wgcsl.log_params", "config.configure_wgcsl.buffer.clear_buffer", "range", "wgcsl.common.tf_util.load_variables", "config.configure_wgcsl.buffer.load", "wgcsl.algo.rollout.RolloutWorker.generate_rollouts", "config.configure_wgcsl.store_episode", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.util.set_global_seeds", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.prepare_params", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.dump_params", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.configure_dims", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.configure_wgcsl", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.train", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.config.log_params", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.clear_buffer", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.load_variables", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.load", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.rollout.RolloutWorker.generate_rollouts", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.store_episode"], ["", "def", "learn", "(", "*", ",", "env", ",", "num_epoch", ",", "\n", "seed", "=", "None", ",", "\n", "eval_env", "=", "None", ",", "\n", "replay_strategy", "=", "'future'", ",", "\n", "policy_save_interval", "=", "5", ",", "\n", "clip_return", "=", "True", ",", "\n", "demo_file", "=", "None", ",", "\n", "override_params", "=", "None", ",", "\n", "load_model", "=", "False", ",", "\n", "load_buffer", "=", "False", ",", "\n", "load_path", "=", "None", ",", "\n", "save_path", "=", "None", ",", "\n", "play_no_training", "=", "False", ",", "\n", "offline_train", "=", "False", ",", "\n", "mode", "=", "None", ",", "\n", "su_method", "=", "''", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\n", "    ", "override_params", "=", "override_params", "or", "{", "}", "\n", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "if", "MPI", "is", "not", "None", ":", "\n", "        ", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "num_cpu", "=", "MPI", ".", "COMM_WORLD", ".", "Get_size", "(", ")", "\n", "\n", "# Seed everything.", "\n", "", "rank_seed", "=", "seed", "+", "1000000", "*", "rank", "if", "seed", "is", "not", "None", "else", "None", "\n", "set_global_seeds", "(", "rank_seed", ")", "\n", "\n", "# Prepare params.", "\n", "params", "=", "config", ".", "DEFAULT_PARAMS", "\n", "env_name", "=", "env", ".", "spec", ".", "id", "\n", "\n", "params", "[", "'env_name'", "]", "=", "env_name", "\n", "params", "[", "'replay_strategy'", "]", "=", "replay_strategy", "\n", "if", "env_name", "in", "config", ".", "DEFAULT_ENV_PARAMS", ":", "\n", "        ", "params", ".", "update", "(", "config", ".", "DEFAULT_ENV_PARAMS", "[", "env_name", "]", ")", "# merge env-specific parameters in", "\n", "", "params", ".", "update", "(", "**", "override_params", ")", "# makes it possible to override any parameter", "\n", "\n", "params", ".", "update", "(", "kwargs", ")", "# make kwargs part of params", "\n", "if", "'num_epoch'", "in", "params", ":", "\n", "        ", "num_epoch", "=", "params", "[", "'num_epoch'", "]", "\n", "", "params", "[", "'mode'", "]", "=", "mode", "\n", "params", "[", "'su_method'", "]", "=", "su_method", "\n", "params", "=", "config", ".", "prepare_params", "(", "params", ")", "\n", "params", "[", "'rollout_batch_size'", "]", "=", "env", ".", "num_envs", "\n", "random_init", "=", "params", "[", "'random_init'", "]", "\n", "# save total params", "\n", "dump_params", "(", "logger", ",", "params", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "config", ".", "log_params", "(", "params", ",", "logger", "=", "logger", ")", "\n", "\n", "", "dims", "=", "config", ".", "configure_dims", "(", "params", ")", "\n", "policy", "=", "config", ".", "configure_wgcsl", "(", "dims", "=", "dims", ",", "params", "=", "params", ",", "clip_return", "=", "clip_return", ",", "offline_train", "=", "offline_train", ")", "\n", "if", "load_path", "is", "not", "None", ":", "\n", "        ", "if", "load_model", ":", "\n", "            ", "tf_util", ".", "load_variables", "(", "os", ".", "path", ".", "join", "(", "load_path", ",", "'policy_last.pkl'", ")", ")", "\n", "", "if", "load_buffer", ":", "\n", "            ", "policy", ".", "buffer", ".", "load", "(", "os", ".", "path", ".", "join", "(", "load_path", ",", "'buffer.pkl'", ")", ")", "\n", "\n", "", "", "rollout_params", "=", "{", "\n", "'exploit'", ":", "False", ",", "\n", "'use_target_net'", ":", "False", ",", "\n", "'use_demo_states'", ":", "True", ",", "\n", "'compute_Q'", ":", "False", ",", "\n", "'T'", ":", "params", "[", "'T'", "]", ",", "\n", "}", "\n", "eval_params", "=", "{", "\n", "'exploit'", ":", "True", ",", "\n", "'use_target_net'", ":", "params", "[", "'test_with_polyak'", "]", ",", "\n", "'use_demo_states'", ":", "False", ",", "\n", "'compute_Q'", ":", "True", ",", "\n", "'T'", ":", "params", "[", "'T'", "]", ",", "\n", "}", "\n", "for", "name", "in", "[", "'T'", ",", "'rollout_batch_size'", ",", "'gamma'", ",", "'noise_eps'", ",", "'random_eps'", "]", ":", "\n", "        ", "rollout_params", "[", "name", "]", "=", "params", "[", "name", "]", "\n", "eval_params", "[", "name", "]", "=", "params", "[", "name", "]", "\n", "\n", "", "eval_env", "=", "eval_env", "or", "env", "\n", "rollout_worker", "=", "RolloutWorker", "(", "env", ",", "policy", ",", "dims", ",", "logger", ",", "monitor", "=", "True", ",", "**", "rollout_params", ")", "\n", "evaluator", "=", "RolloutWorker", "(", "eval_env", ",", "policy", ",", "dims", ",", "logger", ",", "**", "eval_params", ")", "\n", "\n", "# no training", "\n", "if", "play_no_training", ":", "\n", "# sample trajetories", "\n", "        ", "num_episode", "=", "20", "\n", "policy", ".", "buffer", ".", "clear_buffer", "(", ")", "\n", "for", "_", "in", "range", "(", "num_episode", ")", ":", "\n", "            ", "episode", "=", "evaluator", ".", "generate_rollouts", "(", ")", "\n", "policy", ".", "store_episode", "(", "episode", ")", "\n", "", "return", "policy", "\n", "\n", "", "return", "train", "(", "\n", "save_path", "=", "save_path", ",", "policy", "=", "policy", ",", "rollout_worker", "=", "rollout_worker", ",", "\n", "evaluator", "=", "evaluator", ",", "n_epochs", "=", "num_epoch", ",", "n_test_rollouts", "=", "params", "[", "'n_test_rollouts'", "]", ",", "\n", "n_cycles", "=", "params", "[", "'n_cycles'", "]", ",", "n_batches", "=", "params", "[", "'n_batches'", "]", ",", "\n", "policy_save_interval", "=", "policy_save_interval", ",", "demo_file", "=", "demo_file", ",", "random_init", "=", "random_init", ",", "\n", "play_no_training", "=", "play_no_training", ",", "offline_train", "=", "offline_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer.__init__": [[11, 63], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.group", "tensorflow.group", "threading.Lock", "tensorflow.get_default_session", "normalizer.Normalizer.count_tf.assign_add", "normalizer.Normalizer.sum_tf.assign_add", "normalizer.Normalizer.sumsq_tf.assign_add", "tensorflow.assign", "tensorflow.assign", "tensorflow.zeros_initializer", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "tensorflow.sqrt", "tensorflow.maximum", "tensorflow.square", "tensorflow.square"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "eps", "=", "1e-2", ",", "default_clip_range", "=", "np", ".", "inf", ",", "sess", "=", "None", ")", ":", "\n", "        ", "\"\"\"A normalizer that ensures that observations are approximately distributed according to\n        a standard Normal distribution (i.e. have mean zero and variance one).\n\n        Args:\n            size (int): the size of the observation to be normalized\n            eps (float): a small constant that avoids underflows\n            default_clip_range (float): normalized observations are clipped to be in\n                [-default_clip_range, default_clip_range]\n            sess (object): the TensorFlow session to be used\n        \"\"\"", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "default_clip_range", "=", "default_clip_range", "\n", "self", ".", "sess", "=", "sess", "if", "sess", "is", "not", "None", "else", "tf", ".", "get_default_session", "(", ")", "\n", "\n", "self", ".", "local_sum", "=", "np", ".", "zeros", "(", "self", ".", "size", ",", "np", ".", "float32", ")", "\n", "self", ".", "local_sumsq", "=", "np", ".", "zeros", "(", "self", ".", "size", ",", "np", ".", "float32", ")", "\n", "self", ".", "local_count", "=", "np", ".", "zeros", "(", "1", ",", "np", ".", "float32", ")", "\n", "\n", "self", ".", "sum_tf", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "shape", "=", "self", ".", "local_sum", ".", "shape", ",", "name", "=", "'sum'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "sumsq_tf", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "shape", "=", "self", ".", "local_sumsq", ".", "shape", ",", "name", "=", "'sumsq'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "count_tf", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "shape", "=", "self", ".", "local_count", ".", "shape", ",", "name", "=", "'count'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "mean", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "shape", "=", "(", "self", ".", "size", ",", ")", ",", "name", "=", "'mean'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "std", "=", "tf", ".", "get_variable", "(", "\n", "initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "shape", "=", "(", "self", ".", "size", ",", ")", ",", "name", "=", "'std'", ",", "\n", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "count_pl", "=", "tf", ".", "placeholder", "(", "name", "=", "'count_pl'", ",", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "sum_pl", "=", "tf", ".", "placeholder", "(", "name", "=", "'sum_pl'", ",", "shape", "=", "(", "self", ".", "size", ",", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "sumsq_pl", "=", "tf", ".", "placeholder", "(", "name", "=", "'sumsq_pl'", ",", "shape", "=", "(", "self", ".", "size", ",", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "update_op", "=", "tf", ".", "group", "(", "\n", "self", ".", "count_tf", ".", "assign_add", "(", "self", ".", "count_pl", ")", ",", "\n", "self", ".", "sum_tf", ".", "assign_add", "(", "self", ".", "sum_pl", ")", ",", "\n", "self", ".", "sumsq_tf", ".", "assign_add", "(", "self", ".", "sumsq_pl", ")", "\n", ")", "\n", "self", ".", "recompute_op", "=", "tf", ".", "group", "(", "\n", "tf", ".", "assign", "(", "self", ".", "mean", ",", "self", ".", "sum_tf", "/", "self", ".", "count_tf", ")", ",", "\n", "tf", ".", "assign", "(", "self", ".", "std", ",", "tf", ".", "sqrt", "(", "tf", ".", "maximum", "(", "\n", "tf", ".", "square", "(", "self", ".", "eps", ")", ",", "\n", "self", ".", "sumsq_tf", "/", "self", ".", "count_tf", "-", "tf", ".", "square", "(", "self", ".", "sum_tf", "/", "self", ".", "count_tf", ")", "\n", ")", ")", ")", ",", "\n", ")", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer.update": [[64, 71], ["v.reshape.reshape.reshape", "v.reshape.reshape.sum", "numpy.square().sum", "numpy.square"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "v", ")", ":", "\n", "        ", "v", "=", "v", ".", "reshape", "(", "-", "1", ",", "self", ".", "size", ")", "\n", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "self", ".", "local_sum", "+=", "v", ".", "sum", "(", "axis", "=", "0", ")", "\n", "self", ".", "local_sumsq", "+=", "(", "np", ".", "square", "(", "v", ")", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "self", ".", "local_count", "[", "0", "]", "+=", "v", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer.normalize": [[72, 78], ["wgcsl.algo.util.reshape_for_broadcasting", "wgcsl.algo.util.reshape_for_broadcasting", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.reshape_for_broadcasting", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.reshape_for_broadcasting"], ["", "", "def", "normalize", "(", "self", ",", "v", ",", "clip_range", "=", "None", ")", ":", "\n", "        ", "if", "clip_range", "is", "None", ":", "\n", "            ", "clip_range", "=", "self", ".", "default_clip_range", "\n", "", "mean", "=", "reshape_for_broadcasting", "(", "self", ".", "mean", ",", "v", ")", "\n", "std", "=", "reshape_for_broadcasting", "(", "self", ".", "std", ",", "v", ")", "\n", "return", "tf", ".", "clip_by_value", "(", "(", "v", "-", "mean", ")", "/", "std", ",", "-", "clip_range", ",", "clip_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer.denormalize": [[79, 83], ["wgcsl.algo.util.reshape_for_broadcasting", "wgcsl.algo.util.reshape_for_broadcasting"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.reshape_for_broadcasting", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.reshape_for_broadcasting"], ["", "def", "denormalize", "(", "self", ",", "v", ")", ":", "\n", "        ", "mean", "=", "reshape_for_broadcasting", "(", "self", ".", "mean", ",", "v", ")", "\n", "std", "=", "reshape_for_broadcasting", "(", "self", ".", "std", ",", "v", ")", "\n", "return", "mean", "+", "v", "*", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer._mpi_average": [[84, 89], ["numpy.zeros_like", "mpi4py.MPI.COMM_WORLD.Allreduce", "mpi4py.MPI.COMM_WORLD.Get_size"], "methods", ["None"], ["", "def", "_mpi_average", "(", "self", ",", "x", ")", ":", "\n", "        ", "buf", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "MPI", ".", "COMM_WORLD", ".", "Allreduce", "(", "x", ",", "buf", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "buf", "/=", "MPI", ".", "COMM_WORLD", ".", "Get_size", "(", ")", "\n", "return", "buf", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer.synchronize": [[90, 95], ["normalizer.Normalizer._mpi_average", "normalizer.Normalizer._mpi_average", "normalizer.Normalizer._mpi_average"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer._mpi_average", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer._mpi_average", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer._mpi_average"], ["", "def", "synchronize", "(", "self", ",", "local_sum", ",", "local_sumsq", ",", "local_count", ",", "root", "=", "None", ")", ":", "\n", "        ", "local_sum", "[", "...", "]", "=", "self", ".", "_mpi_average", "(", "local_sum", ")", "\n", "local_sumsq", "[", "...", "]", "=", "self", ".", "_mpi_average", "(", "local_sumsq", ")", "\n", "local_count", "[", "...", "]", "=", "self", ".", "_mpi_average", "(", "local_count", ")", "\n", "return", "local_sum", ",", "local_sumsq", ",", "local_count", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer.recompute_stats": [[96, 118], ["normalizer.Normalizer.synchronize", "normalizer.Normalizer.sess.run", "normalizer.Normalizer.sess.run", "normalizer.Normalizer.local_count.copy", "normalizer.Normalizer.local_sum.copy", "normalizer.Normalizer.local_sumsq.copy"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer.synchronize"], ["", "def", "recompute_stats", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "# Copy over results.", "\n", "            ", "local_count", "=", "self", ".", "local_count", ".", "copy", "(", ")", "\n", "local_sum", "=", "self", ".", "local_sum", ".", "copy", "(", ")", "\n", "local_sumsq", "=", "self", ".", "local_sumsq", ".", "copy", "(", ")", "\n", "\n", "# Reset.", "\n", "self", ".", "local_count", "[", "...", "]", "=", "0", "\n", "self", ".", "local_sum", "[", "...", "]", "=", "0", "\n", "self", ".", "local_sumsq", "[", "...", "]", "=", "0", "\n", "\n", "# We perform the synchronization outside of the lock to keep the critical section as short as possible.", "\n", "", "synced_sum", ",", "synced_sumsq", ",", "synced_count", "=", "self", ".", "synchronize", "(", "\n", "local_sum", "=", "local_sum", ",", "local_sumsq", "=", "local_sumsq", ",", "local_count", "=", "local_count", ")", "\n", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "update_op", ",", "feed_dict", "=", "{", "\n", "self", ".", "count_pl", ":", "synced_count", ",", "\n", "self", ".", "sum_pl", ":", "synced_sum", ",", "\n", "self", ".", "sumsq_pl", ":", "synced_sumsq", ",", "\n", "}", ")", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "recompute_op", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.actor_critic.ActorCritic.__init__": [[5, 43], ["actor_critic.ActorCritic.o_stats.normalize", "actor_critic.ActorCritic.g_stats.normalize", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.concat", "wgcsl.algo.util.nn", "tensorflow.concat", "wgcsl.algo.util.nn", "tensorflow.tanh", "wgcsl.algo.util.nn"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer.normalize", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer.normalize", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.nn", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.nn", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.nn"], ["    ", "@", "store_args", "\n", "def", "__init__", "(", "self", ",", "inputs_tf", ",", "dimo", ",", "dimg", ",", "dimu", ",", "max_u", ",", "o_stats", ",", "g_stats", ",", "hidden", ",", "layers", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"The actor-critic network and related training code.\n\n        Args:\n            inputs_tf (dict of tensors): all necessary inputs for the network: the\n                observation (o), the goal (g), and the action (u)\n            dimo (int): the dimension of the observations\n            dimg (int): the dimension of the goals\n            dimu (int): the dimension of the actions\n            max_u (float): the maximum magnitude of actions; action outputs will be scaled\n                accordingly\n            o_stats (wgcsl.algo.Normalizer): normalizer for observations\n            g_stats (wgcsl.algo.Normalizer): normalizer for goals\n            hidden (int): number of hidden units that should be used in hidden layers\n            layers (int): number of hidden layers\n        \"\"\"", "\n", "self", ".", "o_tf", "=", "inputs_tf", "[", "'o'", "]", "\n", "self", ".", "g_tf", "=", "inputs_tf", "[", "'g'", "]", "\n", "self", ".", "u_tf", "=", "inputs_tf", "[", "'u'", "]", "\n", "\n", "# Prepare inputs for actor and critic.", "\n", "o", "=", "self", ".", "o_stats", ".", "normalize", "(", "self", ".", "o_tf", ")", "\n", "g", "=", "self", ".", "g_stats", ".", "normalize", "(", "self", ".", "g_tf", ")", "\n", "input_pi", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "o", ",", "g", "]", ")", "# for actor", "\n", "\n", "# Networks.", "\n", "with", "tf", ".", "variable_scope", "(", "'pi'", ")", ":", "\n", "            ", "self", ".", "pi_tf", "=", "self", ".", "max_u", "*", "tf", ".", "tanh", "(", "nn", "(", "\n", "input_pi", ",", "[", "self", ".", "hidden", "]", "*", "self", ".", "layers", "+", "[", "self", ".", "dimu", "]", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Q'", ")", ":", "\n", "# for policy training", "\n", "            ", "input_Q", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "o", ",", "g", ",", "self", ".", "pi_tf", "/", "self", ".", "max_u", "]", ")", "\n", "self", ".", "Q_pi_tf", "=", "nn", "(", "input_Q", ",", "[", "self", ".", "hidden", "]", "*", "self", ".", "layers", "+", "[", "1", "]", ")", "\n", "# for critic training", "\n", "input_Q", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "o", ",", "g", ",", "self", ".", "u_tf", "/", "self", ".", "max_u", "]", ")", "\n", "self", ".", "_input_Q", "=", "input_Q", "# exposed for tests", "\n", "self", ".", "Q_tf", "=", "nn", "(", "input_Q", ",", "[", "self", ".", "hidden", "]", "*", "self", ".", "layers", "+", "[", "1", "]", ",", "reuse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.store_args": [[14, 39], ["inspect.getfullargspec", "functools.wraps", "dict", "dict.update", "dict.copy", "zip", "defaults.copy.update", "util..__dict__.update", "method", "zip", "len"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update"], ["\n", "", "", "def", "init_logger", "(", "args", ")", ":", "\n", "    ", "if", "MPI", "is", "None", "or", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "==", "0", ":", "\n", "        ", "rank", "=", "0", "\n", "configure_logger", "(", "args", ".", "log_path", ")", "\n", "", "else", ":", "\n", "        ", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "configure_logger", "(", "args", ".", "log_path", ",", "format_strs", "=", "[", "]", ")", "\n", "", "return", "rank", "\n", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.import_function": [[41, 48], ["spec.split", "importlib.import_module", "getattr"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.flatten_grads": [[50, 55], ["tensorflow.concat", "tensorflow.reshape", "zip", "wgcsl.common.tf_util.numel"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.numel"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.nn": [[57, 81], ["enumerate", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.layers.dense", "tensorflow.reshape", "tensorflow.random_uniform_initializer", "activation", "len", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.install_mpi_excepthook": [[83, 94], ["old_hook", "sys.stdout.flush", "sys.stderr.flush", "MPI.COMM_WORLD.Abort"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.mpi_fork": [[96, 120], ["os.getenv", "os.environ.copy", "os.environ.copy.update", "subprocess.check_call", "util.install_mpi_excepthook", "str"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.install_mpi_excepthook"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.convert_episode_to_batch_major": [[122, 133], ["episode.keys", "numpy.array().copy", "np.array().copy.swapaxes", "numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.transitions_in_episode_batch": [[135, 140], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.reshape_for_broadcasting": [[142, 149], ["len", "tensorflow.reshape", "target.get_shape", "tensorflow.cast"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.g_to_ag": [[151, 159], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.dump_params": [[161, 169], ["open", "copy.deepcopy", "params.items", "json.dump", "os.path.join", "str", "logger.get_dir"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_dir"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.write_to_file": [[170, 174], ["open", "file.writelines", "file.flush"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.random_log": [[175, 178], ["numpy.random.random", "print"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.discounted_return": [[179, 193], ["len", "numpy.power().reshape", "np.array().reshape.sum", "len", "numpy.array().reshape", "dis_return.mean", "rewards.sum.mean", "type", "numpy.array", "numpy.power", "numpy.array", "numpy.arange"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.__init__": [[21, 83], ["wgcsl.algo.util.import_function", "wgcsl.dims_to_shapes", "collections.OrderedDict", "sorted", "wgcsl.algo.replay_buffer.ReplayBuffer", "wgcsl.WGCSL.input_dims.keys", "key.startswith", "tensorflow.variable_scope", "tensorflow.contrib.staging.StagingArea", "wgcsl.WGCSL.staging_tf.put", "wgcsl.WGCSL._create_network", "tensorflow.placeholder", "dims_to_shapes.items", "list", "wgcsl.WGCSL.stage_shapes.values", "wgcsl.WGCSL.stage_shapes.values", "wgcsl.WGCSL.stage_shapes.keys"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.import_function", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.dims_to_shapes", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._create_network"], ["    ", "@", "store_args", "\n", "def", "__init__", "(", "self", ",", "input_dims", ",", "buffer_size", ",", "hidden", ",", "layers", ",", "network_class", ",", "polyak", ",", "batch_size", ",", "\n", "Q_lr", ",", "pi_lr", ",", "norm_eps", ",", "norm_clip", ",", "max_u", ",", "action_l2", ",", "clip_obs", ",", "scope", ",", "T", ",", "\n", "rollout_batch_size", ",", "subtract_goals", ",", "relative_goals", ",", "clip_pos_returns", ",", "clip_return", ",", "\n", "sample_transitions", ",", "random_sampler", ",", "gamma", ",", "supervised_sampler", ",", "use_supervised", ",", "su_method", ",", "\n", "reuse", "=", "False", ",", "offline_train", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Implementation of policy with value funcion that is used in combination with WGCSL\n        \"\"\"", "\n", "if", "self", ".", "clip_return", "is", "None", ":", "\n", "            ", "self", ".", "clip_return", "=", "np", ".", "inf", "\n", "\n", "", "self", ".", "create_actor_critic", "=", "import_function", "(", "self", ".", "network_class", ")", "\n", "input_shapes", "=", "dims_to_shapes", "(", "self", ".", "input_dims", ")", "\n", "self", ".", "dimo", "=", "self", ".", "input_dims", "[", "'o'", "]", "\n", "self", ".", "dimg", "=", "self", ".", "input_dims", "[", "'g'", "]", "\n", "self", ".", "dimu", "=", "self", ".", "input_dims", "[", "'u'", "]", "\n", "\n", "# Prepare staging area for feeding data to the model. ", "\n", "stage_shapes", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "sorted", "(", "self", ".", "input_dims", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'info_'", ")", ":", "\n", "                ", "continue", "\n", "", "stage_shapes", "[", "key", "]", "=", "(", "None", ",", "*", "input_shapes", "[", "key", "]", ")", "\n", "", "for", "key", "in", "[", "'o'", ",", "'g'", "]", ":", "\n", "            ", "stage_shapes", "[", "key", "+", "'_2'", "]", "=", "stage_shapes", "[", "key", "]", "\n", "", "stage_shapes", "[", "'r'", "]", "=", "(", "None", ",", ")", "\n", "self", ".", "stage_shapes", "=", "stage_shapes", "\n", "\n", "# Create network.", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ")", ":", "\n", "            ", "self", ".", "staging_tf", "=", "StagingArea", "(", "\n", "dtypes", "=", "[", "tf", ".", "float32", "for", "_", "in", "self", ".", "stage_shapes", ".", "keys", "(", ")", "]", ",", "\n", "shapes", "=", "list", "(", "self", ".", "stage_shapes", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "buffer_ph_tf", "=", "[", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "shape", ")", "for", "shape", "in", "self", ".", "stage_shapes", ".", "values", "(", ")", "]", "\n", "self", ".", "stage_op", "=", "self", ".", "staging_tf", ".", "put", "(", "self", ".", "buffer_ph_tf", ")", "\n", "self", ".", "_create_network", "(", "reuse", "=", "reuse", ")", "\n", "\n", "# Configure the replay buffer.", "\n", "", "buffer_shapes", "=", "{", "key", ":", "(", "self", ".", "T", "-", "1", "if", "key", "!=", "'o'", "else", "self", ".", "T", ",", "*", "input_shapes", "[", "key", "]", ")", "for", "key", ",", "val", "in", "input_shapes", ".", "items", "(", ")", "}", "\n", "buffer_shapes", "[", "'g'", "]", "=", "(", "buffer_shapes", "[", "'g'", "]", "[", "0", "]", ",", "self", ".", "dimg", ")", "\n", "buffer_shapes", "[", "'ag'", "]", "=", "(", "self", ".", "T", ",", "self", ".", "dimg", ")", "\n", "# buffer_size % rollout_batch_size should be zero", "\n", "buffer_size", "=", "(", "self", ".", "buffer_size", "//", "self", ".", "rollout_batch_size", ")", "*", "self", ".", "rollout_batch_size", "\n", "\n", "if", "self", ".", "use_supervised", ":", "\n", "            ", "sampler", "=", "self", ".", "supervised_sampler", "\n", "info", "=", "{", "\n", "'use_supervised'", ":", "True", ",", "\n", "'gamma'", ":", "self", ".", "gamma", ",", "\n", "'train_policy'", ":", "self", ".", "train_policy", ",", "\n", "'get_Q_pi'", ":", "self", ".", "get_Q_pi", ",", "\n", "'get_Q'", ":", "self", ".", "get_Q", ",", "\n", "'method'", ":", "self", ".", "su_method", ",", "\n", "'baw_delta'", ":", "self", ".", "baw_delta", ",", "\n", "'baw_max'", ":", "self", ".", "baw_max", ",", "\n", "}", "\n", "", "else", ":", "# for HER", "\n", "            ", "sampler", "=", "self", ".", "sample_transitions", "\n", "info", "=", "{", "}", "\n", "\n", "", "self", ".", "buffer", "=", "ReplayBuffer", "(", "buffer_shapes", ",", "buffer_size", ",", "self", ".", "T", ",", "sampler", ",", "self", ".", "sample_transitions", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._random_action": [[84, 86], ["numpy.random.uniform"], "methods", ["None"], ["", "def", "_random_action", "(", "self", ",", "n", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "self", ".", "max_u", ",", "high", "=", "self", ".", "max_u", ",", "size", "=", "(", "n", ",", "self", ".", "dimu", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._preprocess_og": [[87, 97], ["numpy.clip", "numpy.clip", "g.reshape.reshape.reshape", "ag.reshape.reshape.reshape", "wgcsl.WGCSL.subtract_goals", "g.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "_preprocess_og", "(", "self", ",", "o", ",", "ag", ",", "g", ",", ")", ":", "\n", "        ", "if", "self", ".", "relative_goals", ":", "\n", "            ", "g_shape", "=", "g", ".", "shape", "\n", "g", "=", "g", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", "\n", "ag", "=", "ag", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", "\n", "g", "=", "self", ".", "subtract_goals", "(", "g", ",", "ag", ")", "\n", "g", "=", "g", ".", "reshape", "(", "*", "g_shape", ")", "\n", "", "o", "=", "np", ".", "clip", "(", "o", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "g", "=", "np", ".", "clip", "(", "g", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "return", "o", ",", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.step": [[98, 101], ["wgcsl.WGCSL.get_actions"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.get_actions"], ["", "def", "step", "(", "self", ",", "obs", ")", ":", "\n", "        ", "actions", "=", "self", ".", "get_actions", "(", "obs", "[", "'observation'", "]", ",", "obs", "[", "'achieved_goal'", "]", ",", "obs", "[", "'desired_goal'", "]", ",", "use_target_net", "=", "use_target_net", ")", "\n", "return", "actions", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.action_only": [[102, 112], ["numpy.clip", "numpy.clip", "wgcsl.WGCSL.sess.run", "numpy.clip.reshape", "numpy.clip.reshape"], "methods", ["None"], ["", "def", "action_only", "(", "self", ",", "o", ",", "g", ")", ":", "\n", "        ", "o", "=", "np", ".", "clip", "(", "o", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "g", "=", "np", ".", "clip", "(", "g", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "\n", "policy", "=", "self", ".", "target", "#self.target if use_target_net else", "\n", "action", "=", "self", ".", "sess", ".", "run", "(", "policy", ".", "pi_tf", ",", "feed_dict", "=", "{", "\n", "policy", ".", "o_tf", ":", "o", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimo", ")", ",", "\n", "policy", ".", "g_tf", ":", "g", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", "\n", "}", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.get_actions": [[113, 146], ["wgcsl.WGCSL._preprocess_og", "wgcsl.WGCSL.sess.run", "numpy.clip", "u.copy.copy.copy", "o.reshape", "g.reshape", "numpy.zeros", "numpy.random.randn", "numpy.random.binomial().reshape", "len", "wgcsl.WGCSL._random_action", "numpy.random.binomial"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._preprocess_og", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._random_action"], ["", "def", "get_actions", "(", "self", ",", "o", ",", "ag", ",", "g", ",", "noise_eps", "=", "0.", ",", "random_eps", "=", "0.", ",", "use_target_net", "=", "False", ",", "\n", "compute_Q", "=", "False", ")", ":", "\n", "        ", "o", ",", "g", "=", "self", ".", "_preprocess_og", "(", "o", ",", "ag", ",", "g", ")", "\n", "policy", "=", "self", ".", "target", "if", "use_target_net", "else", "self", ".", "main", "\n", "if", "self", ".", "use_supervised", ":", "\n", "            ", "policy", "=", "self", ".", "main", "\n", "# values to compute", "\n", "", "vals", "=", "[", "policy", ".", "pi_tf", "]", "\n", "if", "compute_Q", ":", "\n", "            ", "vals", "+=", "[", "policy", ".", "Q_pi_tf", "]", "\n", "# feed", "\n", "", "feed", "=", "{", "\n", "policy", ".", "o_tf", ":", "o", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimo", ")", ",", "\n", "policy", ".", "g_tf", ":", "g", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", ",", "\n", "policy", ".", "u_tf", ":", "np", ".", "zeros", "(", "(", "o", ".", "size", "//", "self", ".", "dimo", ",", "self", ".", "dimu", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "}", "\n", "\n", "ret", "=", "self", ".", "sess", ".", "run", "(", "vals", ",", "feed_dict", "=", "feed", ")", "\n", "# action postprocessing", "\n", "u", "=", "ret", "[", "0", "]", "\n", "noise", "=", "noise_eps", "*", "self", ".", "max_u", "*", "np", ".", "random", ".", "randn", "(", "*", "u", ".", "shape", ")", "# gaussian noise", "\n", "u", "+=", "noise", "\n", "u", "=", "np", ".", "clip", "(", "u", ",", "-", "self", ".", "max_u", ",", "self", ".", "max_u", ")", "\n", "u", "+=", "np", ".", "random", ".", "binomial", "(", "1", ",", "random_eps", ",", "u", ".", "shape", "[", "0", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "*", "(", "self", ".", "_random_action", "(", "u", ".", "shape", "[", "0", "]", ")", "-", "u", ")", "# eps-greedy", "\n", "if", "u", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "u", "=", "u", "[", "0", "]", "\n", "", "u", "=", "u", ".", "copy", "(", ")", "\n", "ret", "[", "0", "]", "=", "u", "\n", "\n", "if", "len", "(", "ret", ")", "==", "1", ":", "\n", "            ", "return", "ret", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.get_Q": [[147, 159], ["numpy.clip", "numpy.clip", "wgcsl.WGCSL.sess.run", "numpy.clip.reshape", "numpy.clip.reshape", "u.reshape"], "methods", ["None"], ["", "", "def", "get_Q", "(", "self", ",", "o", ",", "g", ",", "u", ")", ":", "\n", "        ", "o", "=", "np", ".", "clip", "(", "o", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "g", "=", "np", ".", "clip", "(", "g", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "\n", "policy", "=", "self", ".", "main", "\n", "feed", "=", "{", "\n", "policy", ".", "o_tf", ":", "o", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimo", ")", ",", "\n", "policy", ".", "g_tf", ":", "g", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", ",", "\n", "policy", ".", "u_tf", ":", "u", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimu", ")", "\n", "}", "\n", "ret", "=", "self", ".", "sess", ".", "run", "(", "policy", ".", "Q_tf", ",", "feed_dict", "=", "feed", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.get_Q_pi": [[160, 170], ["numpy.clip", "numpy.clip", "wgcsl.WGCSL.sess.run", "numpy.clip.reshape", "numpy.clip.reshape"], "methods", ["None"], ["", "def", "get_Q_pi", "(", "self", ",", "o", ",", "g", ")", ":", "\n", "        ", "o", "=", "np", ".", "clip", "(", "o", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "g", "=", "np", ".", "clip", "(", "g", ",", "-", "self", ".", "clip_obs", ",", "self", ".", "clip_obs", ")", "\n", "policy", "=", "self", ".", "main", "#self.target", "\n", "feed", "=", "{", "\n", "policy", ".", "o_tf", ":", "o", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimo", ")", ",", "\n", "policy", ".", "g_tf", ":", "g", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", "\n", "}", "\n", "ret", "=", "self", ".", "sess", ".", "run", "(", "policy", ".", "Q_pi_tf", ",", "feed_dict", "=", "feed", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.get_target_Q": [[171, 183], ["wgcsl.WGCSL._preprocess_og", "wgcsl.WGCSL.sess.run", "o.reshape", "g.reshape", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._preprocess_og"], ["", "def", "get_target_Q", "(", "self", ",", "o", ",", "g", ",", "a", ",", "ag", ")", ":", "\n", "        ", "o", ",", "g", "=", "self", ".", "_preprocess_og", "(", "o", ",", "ag", ",", "g", ")", "\n", "policy", "=", "self", ".", "main", "\n", "# feed", "\n", "feed", "=", "{", "\n", "policy", ".", "o_tf", ":", "o", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimo", ")", ",", "\n", "policy", ".", "g_tf", ":", "g", ".", "reshape", "(", "-", "1", ",", "self", ".", "dimg", ")", ",", "\n", "policy", ".", "u_tf", ":", "np", ".", "zeros", "(", "(", "o", ".", "size", "//", "self", ".", "dimo", ",", "self", ".", "dimu", ")", ",", "dtype", "=", "np", ".", "float32", ")", "#??", "\n", "}", "\n", "\n", "ret", "=", "self", ".", "sess", ".", "run", "(", "policy", ".", "Q_tf", ",", "feed_dict", "=", "feed", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.store_episode": [[184, 206], ["wgcsl.WGCSL.buffer.store_episode", "wgcsl.algo.util.transitions_in_episode_batch", "wgcsl.WGCSL.sample_transitions", "wgcsl.WGCSL._preprocess_og", "wgcsl.WGCSL.o_stats.update", "wgcsl.WGCSL.g_stats.update", "wgcsl.WGCSL.o_stats.recompute_stats", "wgcsl.WGCSL.g_stats.recompute_stats", "wgcsl.WGCSL.u_stats.update", "wgcsl.WGCSL.u_stats.recompute_stats"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.store_episode", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.transitions_in_episode_batch", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._preprocess_og", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer.recompute_stats", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer.recompute_stats", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer.recompute_stats"], ["", "def", "store_episode", "(", "self", ",", "episode_batch", ",", "update_stats", "=", "True", ")", ":", "#init=False", "\n", "        ", "\"\"\"\n        episode_batch: array of batch_size x (T or T+1) x dim_key 'o' is of size T+1, others are of size T\n        \"\"\"", "\n", "self", ".", "buffer", ".", "store_episode", "(", "episode_batch", ")", "\n", "if", "update_stats", ":", "\n", "# episode doesn't has key o_2", "\n", "            ", "episode_batch", "[", "'o_2'", "]", "=", "episode_batch", "[", "'o'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "episode_batch", "[", "'ag_2'", "]", "=", "episode_batch", "[", "'ag'", "]", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "num_normalizing_transitions", "=", "transitions_in_episode_batch", "(", "episode_batch", ")", "\n", "# add transitions to normalizer", "\n", "transitions", "=", "self", ".", "sample_transitions", "(", "episode_batch", ",", "num_normalizing_transitions", ")", "\n", "\n", "o", ",", "g", ",", "ag", "=", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'g'", "]", ",", "transitions", "[", "'ag'", "]", "\n", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'g'", "]", "=", "self", ".", "_preprocess_og", "(", "o", ",", "ag", ",", "g", ")", "\n", "# training normalizer online ", "\n", "self", ".", "o_stats", ".", "update", "(", "transitions", "[", "'o'", "]", ")", "\n", "self", ".", "g_stats", ".", "update", "(", "transitions", "[", "'g'", "]", ")", "\n", "self", ".", "o_stats", ".", "recompute_stats", "(", ")", "\n", "self", ".", "g_stats", ".", "recompute_stats", "(", ")", "\n", "self", ".", "u_stats", ".", "update", "(", "transitions", "[", "'u'", "]", ")", "\n", "self", ".", "u_stats", ".", "recompute_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.train_policy": [[207, 222], ["wgcsl.WGCSL.sess.run", "wgcsl.WGCSL.pi_adam.update", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update"], ["", "", "def", "train_policy", "(", "self", ",", "o", ",", "g", ",", "u", ",", "weights", "=", "None", ")", ":", "\n", "        ", "if", "weights", "is", "None", ":", "\n", "            ", "weights", "=", "np", ".", "ones", "(", "o", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "pi_sl_loss", ",", "pi_sl_grad", "=", "self", ".", "sess", ".", "run", "(", "\n", "[", "self", ".", "policy_sl_loss", ",", "self", ".", "pi_sl_grad_tf", "]", ",", "\n", "feed_dict", "=", "{", "\n", "self", ".", "gcsl_weight_tf", ":", "weights", ",", "\n", "self", ".", "main", ".", "o_tf", ":", "o", ",", "\n", "self", ".", "main", ".", "g_tf", ":", "g", ",", "\n", "self", ".", "main", ".", "u_tf", ":", "u", "\n", "}", "\n", ")", "\n", "self", ".", "pi_adam", ".", "update", "(", "pi_sl_grad", ",", "self", ".", "pi_lr", ")", "\n", "return", "pi_sl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._sync_optimizers": [[223, 226], ["wgcsl.WGCSL.Q_adam.sync", "wgcsl.WGCSL.pi_adam.sync"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_adam.MpiAdam.sync", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_adam.MpiAdam.sync"], ["", "def", "_sync_optimizers", "(", "self", ")", ":", "\n", "        ", "self", ".", "Q_adam", ".", "sync", "(", ")", "\n", "self", ".", "pi_adam", ".", "sync", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._grads": [[227, 236], ["wgcsl.WGCSL.sess.run"], "methods", ["None"], ["", "def", "_grads", "(", "self", ")", ":", "\n", "# Avoid feed_dict here for performance!", "\n", "        ", "critic_loss", ",", "actor_loss", ",", "Q_grad", ",", "pi_grad", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "Q_loss_tf", ",", "\n", "self", ".", "main", ".", "Q_pi_tf", ",", "\n", "self", ".", "Q_grad_tf", ",", "\n", "self", ".", "pi_grad_tf", ",", "\n", "]", ")", "\n", "return", "critic_loss", ",", "actor_loss", ",", "Q_grad", ",", "pi_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._update": [[237, 240], ["wgcsl.WGCSL.Q_adam.update", "wgcsl.WGCSL.pi_adam.update"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update"], ["", "def", "_update", "(", "self", ",", "Q_grad", ",", "pi_grad", ")", ":", "\n", "        ", "self", ".", "Q_adam", ".", "update", "(", "Q_grad", ",", "self", ".", "Q_lr", ")", "\n", "self", ".", "pi_adam", ".", "update", "(", "pi_grad", ",", "self", ".", "pi_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.sample_batch": [[242, 260], ["wgcsl.WGCSL.buffer.sample", "wgcsl.WGCSL._preprocess_og", "wgcsl.WGCSL._preprocess_og", "wgcsl.WGCSL.o_stats.update", "wgcsl.WGCSL.g_stats.update", "wgcsl.WGCSL.o_stats.recompute_stats", "wgcsl.WGCSL.g_stats.recompute_stats", "wgcsl.WGCSL.stage_shapes.keys"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.sample", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._preprocess_og", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._preprocess_og", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer.recompute_stats", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.normalizer.Normalizer.recompute_stats"], ["", "def", "sample_batch", "(", "self", ",", "method", "=", "'list'", ")", ":", "\n", "        ", "transitions", "=", "self", ".", "buffer", ".", "sample", "(", "self", ".", "batch_size", ")", "\n", "o", ",", "o_2", ",", "g", "=", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'o_2'", "]", ",", "transitions", "[", "'g'", "]", "\n", "ag", ",", "ag_2", "=", "transitions", "[", "'ag'", "]", ",", "transitions", "[", "'ag_2'", "]", "\n", "transitions", "[", "'o'", "]", ",", "transitions", "[", "'g'", "]", "=", "self", ".", "_preprocess_og", "(", "o", ",", "ag", ",", "g", ")", "\n", "transitions", "[", "'o_2'", "]", ",", "transitions", "[", "'g_2'", "]", "=", "self", ".", "_preprocess_og", "(", "o_2", ",", "ag_2", ",", "g", ")", "\n", "\n", "if", "self", ".", "offline_train", ":", "\n", "            ", "self", ".", "o_stats", ".", "update", "(", "transitions", "[", "'o'", "]", ")", "\n", "self", ".", "g_stats", ".", "update", "(", "transitions", "[", "'g'", "]", ")", "\n", "self", ".", "o_stats", ".", "recompute_stats", "(", ")", "\n", "self", ".", "g_stats", ".", "recompute_stats", "(", ")", "\n", "\n", "", "if", "method", "==", "'list'", ":", "\n", "            ", "transitions_batch", "=", "[", "transitions", "[", "key", "]", "for", "key", "in", "self", ".", "stage_shapes", ".", "keys", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "transitions_batch", "=", "transitions", "\n", "", "return", "transitions_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.stage_batch": [[261, 267], ["wgcsl.WGCSL.sess.run", "wgcsl.WGCSL.sample_batch", "len", "len", "dict", "zip"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.sample_batch"], ["", "def", "stage_batch", "(", "self", ",", "batch", "=", "None", ")", ":", "\n", "        ", "if", "batch", "is", "None", ":", "\n", "            ", "batch", "=", "self", ".", "sample_batch", "(", ")", "\n", "self", ".", "temp_batch", "=", "batch", "\n", "", "assert", "len", "(", "self", ".", "buffer_ph_tf", ")", "==", "len", "(", "batch", ")", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "stage_op", ",", "feed_dict", "=", "dict", "(", "zip", "(", "self", ".", "buffer_ph_tf", ",", "batch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.train": [[268, 280], ["wgcsl.WGCSL.stage_batch", "wgcsl.WGCSL._grads", "wgcsl.WGCSL._update", "wgcsl.WGCSL.update_critic_only"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.stage_batch", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._grads", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.update_critic_only"], ["", "def", "train", "(", "self", ",", "stage", "=", "True", ")", ":", "\n", "        ", "if", "stage", ":", "\n", "            ", "self", ".", "stage_batch", "(", ")", "\n", "", "if", "not", "self", ".", "use_supervised", ":", "\n", "            ", "critic_loss", ",", "actor_loss", ",", "Q_grad", ",", "pi_grad", "=", "self", ".", "_grads", "(", ")", "\n", "self", ".", "_update", "(", "Q_grad", ",", "pi_grad", ")", "\n", "return", "critic_loss", ",", "actor_loss", "\n", "# WGCSL needs to learn the value function", "\n", "", "elif", "self", ".", "use_supervised", "and", "self", ".", "su_method", "not", "in", "[", "''", ",", "'gamma'", "]", ":", "\n", "            ", "self", ".", "update_critic_only", "(", ")", "\n", "", "else", ":", "# GCSL does not need to learn value function", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.update_critic_only": [[281, 291], ["wgcsl.WGCSL.sess.run", "wgcsl.WGCSL.Q_adam.update"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update"], ["", "", "def", "update_critic_only", "(", "self", ")", ":", "\n", "        ", "V", ",", "r", ",", "target_tf", ",", "main_tf", ",", "critic_loss", ",", "Q_grad", "=", "self", ".", "sess", ".", "run", "(", "[", "\n", "self", ".", "target", ".", "Q_pi_tf", ",", "\n", "self", ".", "batch_r", ",", "\n", "self", ".", "target_tf", ",", "\n", "self", ".", "main", ".", "Q_tf", ",", "\n", "self", ".", "Q_loss_tf", ",", "\n", "self", ".", "Q_grad_tf", ",", "\n", "]", ")", "\n", "self", ".", "Q_adam", ".", "update", "(", "Q_grad", ",", "self", ".", "Q_lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._init_target_net": [[292, 294], ["wgcsl.WGCSL.sess.run"], "methods", ["None"], ["", "def", "_init_target_net", "(", "self", ")", ":", "\n", "        ", "self", ".", "sess", ".", "run", "(", "self", ".", "init_target_net_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.update_target_net": [[295, 297], ["wgcsl.WGCSL.sess.run"], "methods", ["None"], ["", "def", "update_target_net", "(", "self", ")", ":", "\n", "        ", "self", ".", "sess", ".", "run", "(", "self", ".", "update_target_net_op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.clear_buffer": [[298, 300], ["wgcsl.WGCSL.buffer.clear_buffer"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.clear_buffer"], ["", "def", "clear_buffer", "(", "self", ")", ":", "\n", "        ", "self", ".", "buffer", ".", "clear_buffer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars": [[301, 305], ["tensorflow.get_collection", "len"], "methods", ["None"], ["", "def", "_vars", "(", "self", ",", "scope", ")", ":", "\n", "        ", "res", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "self", ".", "scope", "+", "'/'", "+", "scope", ")", "\n", "assert", "len", "(", "res", ")", ">", "0", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._global_vars": [[306, 309], ["tensorflow.get_collection"], "methods", ["None"], ["", "def", "_global_vars", "(", "self", ",", "scope", ")", ":", "\n", "        ", "res", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "scope", "+", "'/'", "+", "scope", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._create_network": [[310, 398], ["wgcsl.common.logger.info", "wgcsl.common.tf_util.get_session", "wgcsl.WGCSL.staging_tf.get", "collections.OrderedDict", "tensorflow.reshape", "tensorflow.clip_by_value", "tensorflow.reduce_mean", "tensorflow.placeholder", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.gradients", "tensorflow.gradients", "tensorflow.gradients", "zip", "zip", "zip", "wgcsl.algo.util.flatten_grads", "wgcsl.algo.util.flatten_grads", "wgcsl.algo.util.flatten_grads", "wgcsl.common.mpi_adam.MpiAdam", "wgcsl.common.mpi_adam.MpiAdam", "list", "list", "tensorflow.variables_initializer().run", "wgcsl.WGCSL._sync_optimizers", "wgcsl.WGCSL._init_target_net", "tensorflow.variable_scope", "wgcsl.algo.normalizer.Normalizer", "tensorflow.variable_scope", "wgcsl.algo.normalizer.Normalizer", "tensorflow.variable_scope", "wgcsl.algo.normalizer.Normalizer", "tensorflow.variable_scope", "wgcsl.WGCSL.create_actor_critic", "vs.reuse_variables", "tensorflow.variable_scope", "collections.OrderedDict.copy", "wgcsl.WGCSL.create_actor_critic", "vs.reuse_variables", "len", "len", "tensorflow.square", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.square", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._vars", "len", "len", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._global_vars", "wgcsl.WGCSL._global_vars", "map", "map", "vs.reuse_variables", "vs.reuse_variables", "vs.reuse_variables", "vs.reuse_variables", "vs.reuse_variables", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._vars", "tensorflow.square", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.square", "wgcsl.WGCSL._vars", "len", "len", "len", "len", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._vars", "zip", "zip", "tensorflow.variables_initializer", "enumerate", "tensorflow.stop_gradient", "tensorflow.square", "wgcsl.WGCSL._vars", "wgcsl.WGCSL._vars", "v[].assign", "v[].assign", "wgcsl.WGCSL._global_vars", "wgcsl.WGCSL.stage_shapes.keys"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.info", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.get_session", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.adv_que.Advque.get", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.flatten_grads", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.flatten_grads", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.util.flatten_grads", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._sync_optimizers", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._init_target_net", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._global_vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._global_vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._vars", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL._global_vars"], ["", "def", "_create_network", "(", "self", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Creating a WGCSL agent with action space %d x %s...\"", "%", "(", "self", ".", "dimu", ",", "self", ".", "max_u", ")", ")", "\n", "self", ".", "sess", "=", "tf_util", ".", "get_session", "(", ")", "\n", "\n", "# running averages", "\n", "with", "tf", ".", "variable_scope", "(", "'o_stats'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "o_stats", "=", "Normalizer", "(", "self", ".", "dimo", ",", "self", ".", "norm_eps", ",", "self", ".", "norm_clip", ",", "sess", "=", "self", ".", "sess", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'g_stats'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "g_stats", "=", "Normalizer", "(", "self", ".", "dimg", ",", "self", ".", "norm_eps", ",", "self", ".", "norm_clip", ",", "sess", "=", "self", ".", "sess", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'u_stats'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "u_stats", "=", "Normalizer", "(", "self", ".", "dimu", ",", "self", ".", "norm_eps", ",", "self", ".", "norm_clip", ",", "sess", "=", "self", ".", "sess", ")", "\n", "\n", "# mini-batch sampling.", "\n", "", "batch", "=", "self", ".", "staging_tf", ".", "get", "(", ")", "\n", "batch_tf", "=", "OrderedDict", "(", "[", "(", "key", ",", "batch", "[", "i", "]", ")", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "stage_shapes", ".", "keys", "(", ")", ")", "]", ")", "\n", "batch_tf", "[", "'r'", "]", "=", "tf", ".", "reshape", "(", "batch_tf", "[", "'r'", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "# networks", "\n", "with", "tf", ".", "variable_scope", "(", "'main'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "self", ".", "main", "=", "self", ".", "create_actor_critic", "(", "batch_tf", ",", "net_type", "=", "'main'", ",", "**", "self", ".", "__dict__", ")", "\n", "vs", ".", "reuse_variables", "(", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'target'", ")", "as", "vs", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "vs", ".", "reuse_variables", "(", ")", "\n", "", "target_batch_tf", "=", "batch_tf", ".", "copy", "(", ")", "\n", "target_batch_tf", "[", "'o'", "]", "=", "batch_tf", "[", "'o_2'", "]", "\n", "target_batch_tf", "[", "'g'", "]", "=", "batch_tf", "[", "'g_2'", "]", "\n", "self", ".", "target", "=", "self", ".", "create_actor_critic", "(", "target_batch_tf", ",", "net_type", "=", "'target'", ",", "**", "self", ".", "__dict__", ")", "\n", "vs", ".", "reuse_variables", "(", ")", "\n", "", "assert", "len", "(", "self", ".", "_vars", "(", "\"main\"", ")", ")", "==", "len", "(", "self", ".", "_vars", "(", "\"target\"", ")", ")", "\n", "\n", "# loss functions", "\n", "target_Q_pi_tf", "=", "self", ".", "target", ".", "Q_pi_tf", "\n", "self", ".", "batch_r", "=", "batch_tf", "[", "'r'", "]", "\n", "clip_range", "=", "(", "-", "self", ".", "clip_return", ",", "self", ".", "clip_return", ")", "\n", "target_tf", "=", "tf", ".", "clip_by_value", "(", "batch_tf", "[", "'r'", "]", "+", "self", ".", "gamma", "*", "target_Q_pi_tf", ",", "*", "clip_range", ")", "\n", "\n", "self", ".", "target_tf", "=", "target_tf", "\n", "self", ".", "Q_loss_tf", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "tf", ".", "stop_gradient", "(", "target_tf", ")", "-", "self", ".", "main", ".", "Q_tf", ")", ")", "\n", "\n", "self", ".", "pi_loss_tf", "=", "-", "tf", ".", "reduce_mean", "(", "self", ".", "main", ".", "Q_pi_tf", ")", "\n", "self", ".", "pi_loss_tf", "+=", "self", ".", "action_l2", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "self", ".", "main", ".", "pi_tf", "/", "self", ".", "max_u", ")", ")", "\n", "self", ".", "temp_pi_loss", "=", "-", "tf", ".", "reduce_mean", "(", "self", ".", "main", ".", "Q_pi_tf", ")", "+", "self", ".", "action_l2", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "self", ".", "main", ".", "pi_tf", "/", "self", ".", "max_u", ")", ")", "\n", "self", ".", "temp_action_loss", "=", "self", ".", "action_l2", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "self", ".", "main", ".", "pi_tf", "/", "self", ".", "max_u", ")", ")", "\n", "\n", "# training policy with supervised learning (GCSL)", "\n", "self", ".", "gcsl_weight_tf", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", ")", ",", "name", "=", "'weights'", ")", "\n", "self", ".", "weighted_sl_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "self", ".", "main", ".", "u_tf", "-", "self", ".", "main", ".", "pi_tf", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "policy_sl_loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "gcsl_weight_tf", "*", "self", ".", "weighted_sl_loss", ")", "#  + 0.01 * self.temp_action_loss", "\n", "\n", "Q_grads_tf", "=", "tf", ".", "gradients", "(", "self", ".", "Q_loss_tf", ",", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "\n", "pi_grads_tf", "=", "tf", ".", "gradients", "(", "self", ".", "pi_loss_tf", ",", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "pi_sl_grads_tf", "=", "tf", ".", "gradients", "(", "self", ".", "policy_sl_loss", ",", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "assert", "len", "(", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "==", "len", "(", "Q_grads_tf", ")", "\n", "assert", "len", "(", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "==", "len", "(", "pi_grads_tf", ")", "and", "len", "(", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "==", "len", "(", "pi_sl_grads_tf", ")", "\n", "self", ".", "Q_grads_vars_tf", "=", "zip", "(", "Q_grads_tf", ",", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "\n", "self", ".", "pi_grads_vars_tf", "=", "zip", "(", "pi_grads_tf", ",", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "self", ".", "pi_sl_grads_vars_tf", "=", "zip", "(", "pi_sl_grads_tf", ",", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "self", ".", "Q_grad_tf", "=", "flatten_grads", "(", "grads", "=", "Q_grads_tf", ",", "var_list", "=", "self", ".", "_vars", "(", "'main/Q'", ")", ")", "\n", "self", ".", "pi_grad_tf", "=", "flatten_grads", "(", "grads", "=", "pi_grads_tf", ",", "var_list", "=", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "self", ".", "pi_sl_grad_tf", "=", "flatten_grads", "(", "grads", "=", "pi_sl_grads_tf", ",", "var_list", "=", "self", ".", "_vars", "(", "'main/pi'", ")", ")", "\n", "\n", "# optimizers", "\n", "self", ".", "Q_adam", "=", "MpiAdam", "(", "self", ".", "_vars", "(", "'main/Q'", ")", ",", "scale_grad_by_procs", "=", "False", ")", "\n", "self", ".", "pi_adam", "=", "MpiAdam", "(", "self", ".", "_vars", "(", "'main/pi'", ")", ",", "scale_grad_by_procs", "=", "False", ")", "\n", "\n", "# polyak averaging", "\n", "self", ".", "main_vars", "=", "self", ".", "_vars", "(", "'main/Q'", ")", "+", "self", ".", "_vars", "(", "'main/pi'", ")", "\n", "self", ".", "target_vars", "=", "self", ".", "_vars", "(", "'target/Q'", ")", "+", "self", ".", "_vars", "(", "'target/pi'", ")", "\n", "self", ".", "stats_vars", "=", "self", ".", "_global_vars", "(", "'o_stats'", ")", "+", "self", ".", "_global_vars", "(", "'g_stats'", ")", "\n", "\n", "self", ".", "init_target_net_op", "=", "list", "(", "\n", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ".", "assign", "(", "v", "[", "1", "]", ")", ",", "zip", "(", "self", ".", "target_vars", ",", "self", ".", "main_vars", ")", ")", ")", "\n", "self", ".", "update_target_net_op", "=", "list", "(", "\n", "map", "(", "lambda", "v", ":", "v", "[", "0", "]", ".", "assign", "(", "self", ".", "polyak", "*", "v", "[", "0", "]", "+", "(", "1.", "-", "self", ".", "polyak", ")", "*", "v", "[", "1", "]", ")", ",", "zip", "(", "self", ".", "target_vars", ",", "self", ".", "main_vars", ")", ")", ")", "\n", "\n", "# initialize all variables", "\n", "tf", ".", "variables_initializer", "(", "self", ".", "_global_vars", "(", "''", ")", ")", ".", "run", "(", ")", "\n", "self", ".", "_sync_optimizers", "(", ")", "\n", "self", ".", "_init_target_net", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.logs": [[399, 411], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "prefix.endswith", "wgcsl.WGCSL.sess.run", "wgcsl.WGCSL.sess.run", "wgcsl.WGCSL.sess.run", "wgcsl.WGCSL.sess.run", "wgcsl.WGCSL.sess.run", "wgcsl.WGCSL.sess.run"], "methods", ["None"], ["", "def", "logs", "(", "self", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "logs", "=", "[", "]", "\n", "logs", "+=", "[", "(", "'stats_o/mean'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "o_stats", ".", "mean", "]", ")", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'stats_o/std'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "o_stats", ".", "std", "]", ")", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'stats_g/mean'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "g_stats", ".", "mean", "]", ")", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'stats_g/std'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "g_stats", ".", "std", "]", ")", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'stats_u/mean'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "u_stats", ".", "mean", "]", ")", ")", ")", "]", "\n", "logs", "+=", "[", "(", "'stats_u/std'", ",", "np", ".", "mean", "(", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "u_stats", ".", "std", "]", ")", ")", ")", "]", "\n", "if", "prefix", "!=", "''", "and", "not", "prefix", ".", "endswith", "(", "'/'", ")", ":", "\n", "            ", "return", "[", "(", "prefix", "+", "'/'", "+", "key", ",", "val", ")", "for", "key", ",", "val", "in", "logs", "]", "\n", "", "else", ":", "\n", "            ", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.save": [[412, 414], ["wgcsl.common.tf_util.save_variables"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.save_variables"], ["", "", "def", "save", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "tf_util", ".", "save_variables", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.dims_to_shapes": [[16, 18], ["tuple", "tuple", "input_dims.items"], "function", ["None"], ["def", "dims_to_shapes", "(", "input_dims", ")", ":", "\n", "    ", "return", "{", "key", ":", "tuple", "(", "[", "val", "]", ")", "if", "val", ">", "0", "else", "tuple", "(", ")", "for", "key", ",", "val", "in", "input_dims", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.wrappers.TimeLimit.__init__": [[4, 8], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "max_episode_steps", "=", "None", ")", ":", "\n", "        ", "super", "(", "TimeLimit", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "_max_episode_steps", "=", "max_episode_steps", "\n", "self", ".", "_elapsed_steps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.wrappers.TimeLimit.step": [[9, 16], ["wrappers.TimeLimit.env.step"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step"], ["", "def", "step", "(", "self", ",", "ac", ")", ":", "\n", "        ", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "ac", ")", "\n", "self", ".", "_elapsed_steps", "+=", "1", "\n", "if", "self", ".", "_elapsed_steps", ">=", "self", ".", "_max_episode_steps", ":", "\n", "            ", "done", "=", "True", "\n", "info", "[", "'TimeLimit.truncated'", "]", "=", "True", "\n", "", "return", "observation", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.wrappers.TimeLimit.reset": [[17, 20], ["wrappers.TimeLimit.env.reset"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_elapsed_steps", "=", "0", "\n", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.wrappers.ClipActionsWrapper.step": [[22, 27], ["np.nan_to_num", "np.clip", "wrappers.ClipActionsWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step"], ["    ", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "import", "numpy", "as", "np", "\n", "action", "=", "np", ".", "nan_to_num", "(", "action", ")", "\n", "action", "=", "np", ".", "clip", "(", "action", ",", "self", ".", "action_space", ".", "low", ",", "self", ".", "action_space", ".", "high", ")", "\n", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.wrappers.ClipActionsWrapper.reset": [[28, 30], ["wrappers.ClipActionsWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.env_util.get_game_envs": [[30, 40], ["collections.defaultdict", "gym.envs.registry.all", "_game_envs[].add", "[].split", "env.entry_point.split"], "function", ["None"], ["", "", "def", "create_stats_ordered_dict", "(", "\n", "name", ",", "\n", "data", ",", "\n", "stat_prefix", "=", "None", ",", "\n", "always_show_all_stats", "=", "True", ",", "\n", "exclude_max_min", "=", "False", ",", "\n", ")", ":", "\n", "    ", "if", "stat_prefix", "is", "not", "None", ":", "\n", "        ", "name", "=", "\"{} {}\"", ".", "format", "(", "stat_prefix", ",", "name", ")", "\n", "", "if", "isinstance", "(", "data", ",", "Number", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "{", "name", ":", "data", "}", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.env_util.make_vec_env": [[41, 79], ["wgcsl.common.logger.get_dir", "wgcsl.common.util.set_global_seeds", "MPI.COMM_WORLD.Get_rank", "wgcsl.common.subproc_vec_env.SubprocVecEnv", "wgcsl.common.dummy_vec_env.DummyVecEnv", "env_util.make_env", "env_util.make_vec_env.make_thunk"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_dir", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.util.set_global_seeds", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.env_util.make_env"], ["\n", "", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "        ", "return", "OrderedDict", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "data", ",", "tuple", ")", ":", "\n", "        ", "ordered_dict", "=", "OrderedDict", "(", ")", "\n", "for", "number", ",", "d", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "sub_dict", "=", "create_stats_ordered_dict", "(", "\n", "\"{0}_{1}\"", ".", "format", "(", "name", ",", "number", ")", ",", "\n", "d", ",", "\n", ")", "\n", "ordered_dict", ".", "update", "(", "sub_dict", ")", "\n", "", "return", "ordered_dict", "\n", "\n", "", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "iter", "(", "data", "[", "0", "]", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "data", "=", "np", ".", "concatenate", "(", "data", ")", "\n", "\n", "", "", "if", "(", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", "and", "data", ".", "size", "==", "1", "\n", "and", "not", "always_show_all_stats", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "{", "name", ":", "float", "(", "data", ")", "}", ")", "\n", "\n", "", "stats", "=", "OrderedDict", "(", "[", "\n", "(", "name", "+", "' Mean'", ",", "np", ".", "mean", "(", "data", ")", ")", ",", "\n", "(", "name", "+", "' Std'", ",", "np", ".", "std", "(", "data", ")", ")", ",", "\n", "]", ")", "\n", "if", "not", "exclude_max_min", ":", "\n", "        ", "stats", "[", "name", "+", "' Max'", "]", "=", "np", ".", "max", "(", "data", ")", "\n", "stats", "[", "name", "+", "' Min'", "]", "=", "np", ".", "min", "(", "data", ")", "\n", "", "return", "stats", "\n", "\n", "\n", "", "def", "get_generic_path_information", "(", "paths", ",", "stat_prefix", "=", "''", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.env_util.make_env": [[81, 128], ["gym.make", "re.sub.startswith", "gym.wrappers.TimeLimit.seed", "wgcsl.common.monitor.Monitor", "isinstance", "initializer", "re.sub", "re.sub", "importlib.import_module", "FetchGoalWrapper", "re.sub.startswith", "isinstance", "gym.wrappers.FlattenObservation", "wgcsl.common.wrappers.ClipActionsWrapper", "re.sub.startswith", "os.path.join", "SawyerGoalWrapper", "re.sub.startswith", "hasattr", "gym.wrappers.TimeLimit", "gym.wrappers.TimeLimit", "PointGoalWrapper", "re.sub.startswith", "str", "ReacherGoalWrapper", "gym.wrappers.TimeLimit", "str"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.seed"], ["statistics", "=", "OrderedDict", "(", ")", "\n", "returns", "=", "[", "sum", "(", "path", "[", "\"rewards\"", "]", ")", "for", "path", "in", "paths", "]", "\n", "\n", "rewards", "=", "np", ".", "vstack", "(", "[", "path", "[", "\"rewards\"", "]", "for", "path", "in", "paths", "]", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "'Rewards'", ",", "rewards", ",", "\n", "stat_prefix", "=", "stat_prefix", ")", ")", "\n", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "'Returns'", ",", "returns", ",", "\n", "stat_prefix", "=", "stat_prefix", ")", ")", "\n", "actions", "=", "[", "path", "[", "\"actions\"", "]", "for", "path", "in", "paths", "]", "\n", "if", "len", "(", "actions", "[", "0", "]", ".", "shape", ")", "==", "1", ":", "\n", "        ", "actions", "=", "np", ".", "hstack", "(", "[", "path", "[", "\"actions\"", "]", "for", "path", "in", "paths", "]", ")", "\n", "", "else", ":", "\n", "        ", "actions", "=", "np", ".", "vstack", "(", "[", "path", "[", "\"actions\"", "]", "for", "path", "in", "paths", "]", ")", "\n", "", "statistics", ".", "update", "(", "create_stats_ordered_dict", "(", "\n", "'Actions'", ",", "actions", ",", "stat_prefix", "=", "stat_prefix", "\n", ")", ")", "\n", "statistics", "[", "'Num Paths'", "]", "=", "len", "(", "paths", ")", "\n", "\n", "return", "statistics", "\n", "\n", "\n", "", "def", "get_average_returns", "(", "paths", ")", ":", "\n", "    ", "returns", "=", "[", "sum", "(", "path", "[", "\"rewards\"", "]", ")", "for", "path", "in", "paths", "]", "\n", "return", "np", ".", "mean", "(", "returns", ")", "\n", "\n", "\n", "", "def", "get_path_lengths", "(", "paths", ")", ":", "\n", "    ", "return", "[", "len", "(", "path", "[", "'observations'", "]", ")", "for", "path", "in", "paths", "]", "\n", "\n", "\n", "", "def", "get_stat_in_paths", "(", "paths", ",", "dict_name", ",", "scalar_name", ")", ":", "\n", "    ", "if", "len", "(", "paths", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "[", "]", "]", ")", "\n", "\n", "", "if", "type", "(", "paths", "[", "0", "]", "[", "dict_name", "]", ")", "==", "dict", ":", "\n", "# Support rllab interface", "\n", "        ", "return", "[", "path", "[", "dict_name", "]", "[", "scalar_name", "]", "for", "path", "in", "paths", "]", "\n", "\n", "", "return", "[", "\n", "[", "info", "[", "scalar_name", "]", "for", "info", "in", "path", "[", "dict_name", "]", "]", "\n", "for", "path", "in", "paths", "\n", "]", "\n", "\n", "\n", "", "def", "get_asset_full_path", "(", "file_name", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "ENV_ASSET_DIR", ",", "file_name", ")", "\n", "\n", "", "def", "concatenate_box_spaces", "(", "*", "spaces", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.env_util.get_env_type": [[132, 159], ["wgcsl.envs.env_util.get_full_envname", "gym.envs.registry.all", "_game_envs.keys", "_game_envs.items", "_game_envs[].add", "re.sub", "_game_envs.keys", "[].split", "env.entry_point.split"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.env_util.get_full_envname"], ["low", "=", "np", ".", "concatenate", "(", "[", "space", ".", "low", "for", "space", "in", "spaces", "]", ")", "\n", "high", "=", "np", ".", "concatenate", "(", "[", "space", ".", "high", "for", "space", "in", "spaces", "]", ")", "\n", "return", "Box", "(", "low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.env_util.build_env": [[161, 175], ["multiprocessing.cpu_count", "env_util.get_env_type", "tensorflow.ConfigProto", "wgcsl.common.tf_util.get_session", "env_util.make_vec_env"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.env_util.get_env_type", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.get_session", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.env_util.make_vec_env"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_moments.mpi_mean": [[6, 19], ["numpy.asarray", "np.asarray.sum", "numpy.zeros", "x.sum.ravel", "comm.allreduce", "globalsum[].reshape"], "function", ["None"], ["def", "mpi_mean", "(", "x", ",", "axis", "=", "0", ",", "comm", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "assert", "x", ".", "ndim", ">", "0", "\n", "if", "comm", "is", "None", ":", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "xsum", "=", "x", ".", "sum", "(", "axis", "=", "axis", ",", "keepdims", "=", "keepdims", ")", "\n", "n", "=", "xsum", ".", "size", "\n", "localsum", "=", "np", ".", "zeros", "(", "n", "+", "1", ",", "x", ".", "dtype", ")", "\n", "localsum", "[", ":", "n", "]", "=", "xsum", ".", "ravel", "(", ")", "\n", "localsum", "[", "n", "]", "=", "x", ".", "shape", "[", "axis", "]", "\n", "# globalsum = np.zeros_like(localsum)", "\n", "# comm.Allreduce(localsum, globalsum, op=MPI.SUM)", "\n", "globalsum", "=", "comm", ".", "allreduce", "(", "localsum", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "return", "globalsum", "[", ":", "n", "]", ".", "reshape", "(", "xsum", ".", "shape", ")", "/", "globalsum", "[", "n", "]", ",", "globalsum", "[", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_moments.mpi_moments": [[20, 33], ["numpy.asarray", "mpi_moments.mpi_mean", "numpy.square", "mpi_moments.mpi_mean", "numpy.sqrt", "mean.reshape.reshape", "std.reshape.reshape"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_moments.mpi_mean", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_moments.mpi_mean"], ["", "def", "mpi_moments", "(", "x", ",", "axis", "=", "0", ",", "comm", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "assert", "x", ".", "ndim", ">", "0", "\n", "mean", ",", "count", "=", "mpi_mean", "(", "x", ",", "axis", "=", "axis", ",", "comm", "=", "comm", ",", "keepdims", "=", "True", ")", "\n", "sqdiffs", "=", "np", ".", "square", "(", "x", "-", "mean", ")", "\n", "meansqdiff", ",", "count1", "=", "mpi_mean", "(", "sqdiffs", ",", "axis", "=", "axis", ",", "comm", "=", "comm", ",", "keepdims", "=", "True", ")", "\n", "assert", "count1", "==", "count", "\n", "std", "=", "np", ".", "sqrt", "(", "meansqdiff", ")", "\n", "if", "not", "keepdims", ":", "\n", "        ", "newshape", "=", "mean", ".", "shape", "[", ":", "axis", "]", "+", "mean", ".", "shape", "[", "axis", "+", "1", ":", "]", "\n", "mean", "=", "mean", ".", "reshape", "(", "newshape", ")", "\n", "std", "=", "std", ".", "reshape", "(", "newshape", ")", "\n", "", "return", "mean", ",", "std", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_moments.test_runningmeanstd": [[35, 40], ["subprocess.check_call"], "function", ["None"], ["", "def", "test_runningmeanstd", "(", ")", ":", "\n", "    ", "import", "subprocess", "\n", "subprocess", ".", "check_call", "(", "[", "'mpirun'", ",", "'-np'", ",", "'3'", ",", "\n", "'python'", ",", "'-c'", ",", "\n", "'from wgcsl.common.mpi_moments import _helper_runningmeanstd; _helper_runningmeanstd()'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_moments._helper_runningmeanstd": [[41, 61], ["numpy.random.seed", "numpy.concatenate", "mpi_moments.mpi_moments", "wgcsl.common.util.zipsame", "np.concatenate.mean", "np.concatenate.std", "print", "numpy.allclose", "print", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "numpy.random.randn", "comm.Get_rank"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.seed", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_moments.mpi_moments", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.util.zipsame"], ["", "def", "_helper_runningmeanstd", "(", ")", ":", "\n", "    ", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "for", "(", "triple", ",", "axis", ")", "in", "[", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ")", ")", ",", "0", ")", ",", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "3", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "4", ",", "2", ")", ",", "np", ".", "random", ".", "randn", "(", "5", ",", "2", ")", ")", ",", "0", ")", ",", "\n", "(", "(", "np", ".", "random", ".", "randn", "(", "2", ",", "3", ")", ",", "np", ".", "random", ".", "randn", "(", "2", ",", "4", ")", ",", "np", ".", "random", ".", "randn", "(", "2", ",", "4", ")", ")", ",", "1", ")", ",", "\n", "]", ":", "\n", "\n", "\n", "        ", "x", "=", "np", ".", "concatenate", "(", "triple", ",", "axis", "=", "axis", ")", "\n", "ms1", "=", "[", "x", ".", "mean", "(", "axis", "=", "axis", ")", ",", "x", ".", "std", "(", "axis", "=", "axis", ")", ",", "x", ".", "shape", "[", "axis", "]", "]", "\n", "\n", "\n", "ms2", "=", "mpi_moments", "(", "triple", "[", "comm", ".", "Get_rank", "(", ")", "]", ",", "axis", "=", "axis", ")", "\n", "\n", "for", "(", "a1", ",", "a2", ")", "in", "zipsame", "(", "ms1", ",", "ms2", ")", ":", "\n", "            ", "print", "(", "a1", ",", "a2", ")", "\n", "assert", "np", ".", "allclose", "(", "a1", ",", "a2", ")", "\n", "print", "(", "\"ok!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.parse_args.get_default_network": [[3, 8], ["None"], "function", ["None"], ["def", "get_default_network", "(", "env_type", ")", ":", "\n", "    ", "if", "env_type", "in", "{", "'atari'", ",", "'retro'", "}", ":", "\n", "        ", "return", "'cnn'", "\n", "", "else", ":", "\n", "        ", "return", "'mlp'", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.parse_args.get_alg_module": [[9, 19], ["importlib.import_module", "importlib.import_module"], "function", ["None"], ["", "", "def", "get_alg_module", "(", "alg", ",", "submodule", "=", "None", ")", ":", "\n", "    ", "submodule", "=", "submodule", "or", "alg", "\n", "try", ":", "\n", "# first try to import the alg module from baselines", "\n", "        ", "alg_module", "=", "import_module", "(", "'.'", ".", "join", "(", "[", "'baselines'", ",", "alg", ",", "submodule", "]", ")", ")", "\n", "", "except", "ImportError", ":", "\n", "# then from rl_algs", "\n", "        ", "alg_module", "=", "import_module", "(", "'.'", ".", "join", "(", "[", "'rl_'", "+", "'algs'", ",", "alg", ",", "submodule", "]", ")", ")", "\n", "\n", "", "return", "alg_module", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.parse_args.get_learn_function": [[21, 23], ["parse_args.get_alg_module"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.parse_args.get_alg_module"], ["", "def", "get_learn_function", "(", "alg", ")", ":", "\n", "    ", "return", "get_alg_module", "(", "alg", ")", ".", "learn", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.parse_args.get_learn_function_defaults": [[25, 32], ["parse_args.get_alg_module", "getattr"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.parse_args.get_alg_module"], ["", "def", "get_learn_function_defaults", "(", "alg", ",", "env_type", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "alg_defaults", "=", "get_alg_module", "(", "alg", ",", "'defaults'", ")", "\n", "kwargs", "=", "getattr", "(", "alg_defaults", ",", "env_type", ")", "(", ")", "\n", "", "except", "(", "ImportError", ",", "AttributeError", ")", ":", "\n", "        ", "kwargs", "=", "{", "}", "\n", "", "return", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.parse_args.parse_cmdline_kwargs": [[34, 47], ["isinstance", "parse_args.parse_cmdline_kwargs.parse"], "function", ["None"], ["", "def", "parse_cmdline_kwargs", "(", "args", ")", ":", "\n", "    ", "'''\n    convert a list of '='-spaced command-line arguments to a dictionary, evaluating python objects when possible\n    '''", "\n", "def", "parse", "(", "v", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "v", ",", "str", ")", "\n", "try", ":", "\n", "            ", "return", "eval", "(", "v", ")", "\n", "", "except", "(", "NameError", ",", "SyntaxError", ")", ":", "\n", "            ", "return", "v", "\n", "\n", "", "", "return", "{", "k", ":", "parse", "(", "v", ")", "for", "k", ",", "v", "in", "parse_unknown_args", "(", "args", ")", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.parse_args.arg_parser": [[49, 55], ["argparse.ArgumentParser"], "function", ["None"], ["", "def", "arg_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create an empty argparse.ArgumentParser.\n    \"\"\"", "\n", "import", "argparse", "\n", "return", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.parse_args.common_arg_parser": [[57, 81], ["parse_args.arg_parser", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.parse_args.arg_parser"], ["", "def", "common_arg_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create an argparse.ArgumentParser for run_mujoco.py.\n    \"\"\"", "\n", "parser", "=", "arg_parser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--env'", ",", "help", "=", "'environment ID'", ",", "type", "=", "str", ",", "default", "=", "'Reacher-v2'", ")", "\n", "parser", ".", "add_argument", "(", "'--env_type'", ",", "help", "=", "'type of environment, used when the environment type cannot be automatically determined'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "help", "=", "'RNG seed'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "# parser.add_argument('--alg', help='Algorithm', type=str, default='her')", "\n", "parser", ".", "add_argument", "(", "'--network'", ",", "help", "=", "'network type mlp'", ",", "default", "=", "'mlp'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_epoch'", ",", "help", "=", "'number of epochs to train'", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "'--num_env'", ",", "help", "=", "'Number of environment copies being run'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_path'", ",", "help", "=", "'Path to save trained model to'", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--load_path'", ",", "help", "=", "'Path to load trained model to'", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--log_path'", ",", "help", "=", "'Directory to save learning curve data.'", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--save_buffer'", ",", "help", "=", "'If save the buffer or not'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_buffer'", ",", "help", "=", "'If to load the offline buffer'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_model'", ",", "help", "=", "'If to load the saved model'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--play'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--play_no_training'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "help", "=", "'mode of algorithms \"dynamic\", \"supervised\"'", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--su_method'", ",", "help", "=", "'method for supervised learning'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--offline_train'", ",", "help", "=", "'If training offline or not'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.parse_args.parse_unknown_args": [[83, 103], ["arg.startswith", "arg.split", "arg.split"], "function", ["None"], ["", "def", "parse_unknown_args", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Parse arguments not consumed by arg parser into a dictionary\n    \"\"\"", "\n", "retval", "=", "{", "}", "\n", "preceded_by_key", "=", "False", "\n", "for", "arg", "in", "args", ":", "\n", "        ", "if", "arg", ".", "startswith", "(", "'--'", ")", ":", "\n", "            ", "if", "'='", "in", "arg", ":", "\n", "                ", "key", "=", "arg", ".", "split", "(", "'='", ")", "[", "0", "]", "[", "2", ":", "]", "\n", "value", "=", "arg", ".", "split", "(", "'='", ")", "[", "1", "]", "\n", "retval", "[", "key", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "key", "=", "arg", "[", "2", ":", "]", "\n", "preceded_by_key", "=", "True", "\n", "", "", "elif", "preceded_by_key", ":", "\n", "            ", "retval", "[", "key", "]", "=", "arg", "\n", "preceded_by_key", "=", "False", "\n", "\n", "", "", "return", "retval", "\n", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.AlreadySteppingError.__init__": [[33, 36], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "msg", "=", "'already running an async step'", "\n", "Exception", ".", "__init__", "(", "self", ",", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.NotSteppingError.__init__": [[44, 47], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "msg", "=", "'not running an async step'", "\n", "Exception", ".", "__init__", "(", "self", ",", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnv.__init__": [[63, 67], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_envs", ",", "observation_space", ",", "action_space", ")", ":", "\n", "        ", "self", ".", "num_envs", "=", "num_envs", "\n", "self", ".", "observation_space", "=", "observation_space", "\n", "self", ".", "action_space", "=", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnv.reset": [[68, 79], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset all the environments and return an array of\n        observations, or a dict of observation arrays.\n\n        If step_async is still doing work, that work will\n        be cancelled and step_wait() should not be called\n        until step_async() is invoked again.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnv.step_async": [[80, 91], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "\"\"\"\n        Tell all the environments to start taking a step\n        with the given actions.\n        Call step_wait() to get the results of the step.\n\n        You should not call this if a step_async run is\n        already pending.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnv.step_wait": [[92, 105], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Wait for the step taken with step_async().\n\n        Returns (obs, rews, dones, infos):\n         - obs: an array of observations, or a dict of\n                arrays of observations.\n         - rews: an array of rewards\n         - dones: an array of \"episode done\" booleans\n         - infos: a sequence of info objects\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnv.close_extras": [[106, 112], ["None"], "methods", ["None"], ["", "def", "close_extras", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Clean up the  extra resources, beyond what's in this base class.\n        Only runs when not self.closed.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnv.close": [[113, 120], ["vec_env.VecEnv.close_extras", "vec_env.VecEnv.viewer.close"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env.SubprocVecEnv.close_extras", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "closed", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "self", ".", "viewer", ".", "close", "(", ")", "\n", "", "self", ".", "close_extras", "(", ")", "\n", "self", ".", "closed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnv.step": [[121, 129], ["vec_env.VecEnv.step_async", "vec_env.VecEnv.step_wait"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.step_async", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.step_wait"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "\"\"\"\n        Step the environments synchronously.\n\n        This is available for backwards compatibility.\n        \"\"\"", "\n", "self", ".", "step_async", "(", "actions", ")", "\n", "return", "self", ".", "step_wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnv.render": [[130, 140], ["vec_env.VecEnv.get_images", "vec_env.tile_images", "vec_env.VecEnv.get_viewer().imshow", "vec_env.VecEnv.get_viewer", "vec_env.VecEnv.get_viewer"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.get_images", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.tile_images", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnv.get_viewer", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnv.get_viewer"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "imgs", "=", "self", ".", "get_images", "(", ")", "\n", "bigimg", "=", "tile_images", "(", "imgs", ")", "\n", "if", "mode", "==", "'human'", ":", "\n", "            ", "self", ".", "get_viewer", "(", ")", ".", "imshow", "(", "bigimg", ")", "\n", "return", "self", ".", "get_viewer", "(", ")", ".", "isopen", "\n", "", "elif", "mode", "==", "'rgb_array'", ":", "\n", "            ", "return", "bigimg", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnv.get_images": [[141, 146], ["None"], "methods", ["None"], ["", "", "def", "get_images", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return RGB images from each environment\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnv.unwrapped": [[147, 153], ["isinstance"], "methods", ["None"], ["", "@", "property", "\n", "def", "unwrapped", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ",", "VecEnvWrapper", ")", ":", "\n", "            ", "return", "self", ".", "venv", ".", "unwrapped", "\n", "", "else", ":", "\n", "            ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnv.get_viewer": [[154, 159], ["rendering.SimpleImageViewer"], "methods", ["None"], ["", "", "def", "get_viewer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "from", "gym", ".", "envs", ".", "classic_control", "import", "rendering", "\n", "self", ".", "viewer", "=", "rendering", ".", "SimpleImageViewer", "(", ")", "\n", "", "return", "self", ".", "viewer", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnvWrapper.__init__": [[166, 171], ["vec_env.VecEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["def", "__init__", "(", "self", ",", "venv", ",", "observation_space", "=", "None", ",", "action_space", "=", "None", ")", ":", "\n", "        ", "self", ".", "venv", "=", "venv", "\n", "super", "(", ")", ".", "__init__", "(", "num_envs", "=", "venv", ".", "num_envs", ",", "\n", "observation_space", "=", "observation_space", "or", "venv", ".", "observation_space", ",", "\n", "action_space", "=", "action_space", "or", "venv", ".", "action_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnvWrapper.step_async": [[172, 174], ["vec_env.VecEnvWrapper.venv.step_async"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.step_async"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "self", ".", "venv", ".", "step_async", "(", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnvWrapper.reset": [[175, 178], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnvWrapper.step_wait": [[179, 182], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnvWrapper.close": [[183, 185], ["vec_env.VecEnvWrapper.venv.close"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "venv", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnvWrapper.render": [[186, 188], ["vec_env.VecEnvWrapper.venv.render"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "return", "self", ".", "venv", ".", "render", "(", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnvWrapper.get_images": [[189, 191], ["vec_env.VecEnvWrapper.venv.get_images"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.get_images"], ["", "def", "get_images", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "venv", ".", "get_images", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnvWrapper.__getattr__": [[192, 196], ["name.startswith", "getattr", "AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "'_'", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\"attempted to get missing private attribute '{}'\"", ".", "format", "(", "name", ")", ")", "\n", "", "return", "getattr", "(", "self", ".", "venv", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnvObservationWrapper.process": [[198, 201], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "process", "(", "self", ",", "obs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnvObservationWrapper.reset": [[202, 205], ["vec_env.VecEnvObservationWrapper.venv.reset", "vec_env.VecEnvObservationWrapper.process"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnvObservationWrapper.process"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "return", "self", ".", "process", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnvObservationWrapper.step_wait": [[206, 209], ["vec_env.VecEnvObservationWrapper.venv.step_wait", "vec_env.VecEnvObservationWrapper.process"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.step_wait", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.VecEnvObservationWrapper.process"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "obs", ",", "rews", ",", "dones", ",", "infos", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "return", "self", ".", "process", "(", "obs", ")", ",", "rews", ",", "dones", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.CloudpickleWrapper.__init__": [[215, 217], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "x", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.CloudpickleWrapper.__getstate__": [[218, 221], ["cloudpickle.dumps"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "import", "cloudpickle", "\n", "return", "cloudpickle", ".", "dumps", "(", "self", ".", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.CloudpickleWrapper.__setstate__": [[222, 225], ["pickle.loads"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "ob", ")", ":", "\n", "        ", "import", "pickle", "\n", "self", ".", "x", "=", "pickle", ".", "loads", "(", "ob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.tile_images": [[6, 26], ["numpy.asarray", "int", "int", "numpy.array", "np.array.reshape", "img_nhwc.reshape.transpose", "img_HWhwc.transpose.reshape", "numpy.ceil", "numpy.ceil", "numpy.sqrt", "list", "float", "range"], "function", ["None"], ["def", "tile_images", "(", "img_nhwc", ")", ":", "\n", "    ", "\"\"\"\n    Tile N images into one big PxQ image\n    (P,Q) are chosen to be as close as possible, and if N\n    is square, then P=Q.\n\n    input: img_nhwc, list or array of images, ndim=4 once turned into array\n        n = batch index, h = height, w = width, c = channel\n    returns:\n        bigim_HWc, ndarray with ndim=3\n    \"\"\"", "\n", "img_nhwc", "=", "np", ".", "asarray", "(", "img_nhwc", ")", "\n", "N", ",", "h", ",", "w", ",", "c", "=", "img_nhwc", ".", "shape", "\n", "H", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "sqrt", "(", "N", ")", ")", ")", "\n", "W", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "N", ")", "/", "H", ")", ")", "\n", "img_nhwc", "=", "np", ".", "array", "(", "list", "(", "img_nhwc", ")", "+", "[", "img_nhwc", "[", "0", "]", "*", "0", "for", "_", "in", "range", "(", "N", ",", "H", "*", "W", ")", "]", ")", "\n", "img_HWhwc", "=", "img_nhwc", ".", "reshape", "(", "H", ",", "W", ",", "h", ",", "w", ",", "c", ")", "\n", "img_HhWwc", "=", "img_HWhwc", ".", "transpose", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", "\n", "img_Hh_Ww_c", "=", "img_HhWwc", ".", "reshape", "(", "H", "*", "h", ",", "W", "*", "w", ",", "c", ")", "\n", "return", "img_Hh_Ww_c", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.clear_mpi_env_vars": [[227, 244], ["list", "os.environ.items", "os.environ.update", "k.startswith"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update"], ["", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "clear_mpi_env_vars", "(", ")", ":", "\n", "    ", "\"\"\"\n    from mpi4py import MPI will call MPI_Init by default.  If the child process has MPI environment variables, MPI will think that the child process is an MPI process just like the parent and do bad things such as hang.\n    This context manager is a hacky way to clear those environment variables temporarily such as when we are starting multiprocessing\n    Processes.\n    \"\"\"", "\n", "removed_environment", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "list", "(", "os", ".", "environ", ".", "items", "(", ")", ")", ":", "\n", "        ", "for", "prefix", "in", "[", "'OMPI_'", ",", "'PMI_'", "]", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "prefix", ")", ":", "\n", "                ", "removed_environment", "[", "k", "]", "=", "v", "\n", "del", "os", ".", "environ", "[", "k", "]", "\n", "", "", "", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "os", ".", "environ", ".", "update", "(", "removed_environment", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env.SubprocVecEnv.__init__": [[44, 74], ["len", "numpy.array_split", "multiprocessing.get_context", "zip", "subproc_vec_env.SubprocVecEnv.remotes[].send", "vec_env.VecEnv.__init__", "multiprocessing.get_context.Process", "remote.close", "subproc_vec_env.SubprocVecEnv.remotes[].recv", "zip", "vec_env.clear_mpi_env_vars", "p.start", "multiprocessing.get_context.Pipe", "range", "vec_env.CloudpickleWrapper"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.vec_env.clear_mpi_env_vars"], ["def", "__init__", "(", "self", ",", "env_fns", ",", "spaces", "=", "None", ",", "context", "=", "'spawn'", ",", "in_series", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n\n        env_fns: iterable of callables -  functions that create environments to run in subprocesses. Need to be cloud-pickleable\n        in_series: number of environments to run in series in a single process\n        (e.g. when len(env_fns) == 12 and in_series == 3, it will run 4 processes, each running 3 envs in series)\n        \"\"\"", "\n", "self", ".", "waiting", "=", "False", "\n", "self", ".", "closed", "=", "False", "\n", "self", ".", "in_series", "=", "in_series", "\n", "nenvs", "=", "len", "(", "env_fns", ")", "\n", "assert", "nenvs", "%", "in_series", "==", "0", ",", "\"Number of envs must be divisible by number of envs to run in series\"", "\n", "self", ".", "nremotes", "=", "nenvs", "//", "in_series", "\n", "env_fns", "=", "np", ".", "array_split", "(", "env_fns", ",", "self", ".", "nremotes", ")", "\n", "ctx", "=", "mp", ".", "get_context", "(", "context", ")", "\n", "self", ".", "remotes", ",", "self", ".", "work_remotes", "=", "zip", "(", "*", "[", "ctx", ".", "Pipe", "(", ")", "for", "_", "in", "range", "(", "self", ".", "nremotes", ")", "]", ")", "\n", "self", ".", "ps", "=", "[", "ctx", ".", "Process", "(", "target", "=", "worker", ",", "args", "=", "(", "work_remote", ",", "remote", ",", "CloudpickleWrapper", "(", "env_fn", ")", ")", ")", "\n", "for", "(", "work_remote", ",", "remote", ",", "env_fn", ")", "in", "zip", "(", "self", ".", "work_remotes", ",", "self", ".", "remotes", ",", "env_fns", ")", "]", "\n", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "daemon", "=", "True", "# if the main process crashes, we should not cause things to hang", "\n", "with", "clear_mpi_env_vars", "(", ")", ":", "\n", "                ", "p", ".", "start", "(", ")", "\n", "", "", "for", "remote", "in", "self", ".", "work_remotes", ":", "\n", "            ", "remote", ".", "close", "(", ")", "\n", "\n", "", "self", ".", "remotes", "[", "0", "]", ".", "send", "(", "(", "'get_spaces_spec'", ",", "None", ")", ")", "\n", "observation_space", ",", "action_space", ",", "self", ".", "spec", "=", "self", ".", "remotes", "[", "0", "]", ".", "recv", "(", ")", ".", "x", "\n", "self", ".", "viewer", "=", "None", "\n", "VecEnv", ".", "__init__", "(", "self", ",", "nenvs", ",", "observation_space", ",", "action_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env.SubprocVecEnv.step_async": [[75, 81], ["subproc_vec_env.SubprocVecEnv._assert_not_closed", "numpy.array_split", "zip", "remote.send"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env.SubprocVecEnv._assert_not_closed"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "actions", "=", "np", ".", "array_split", "(", "actions", ",", "self", ".", "nremotes", ")", "\n", "for", "remote", ",", "action", "in", "zip", "(", "self", ".", "remotes", ",", "actions", ")", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'step'", ",", "action", ")", ")", "\n", "", "self", ".", "waiting", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env.SubprocVecEnv.step_wait": [[82, 89], ["subproc_vec_env.SubprocVecEnv._assert_not_closed", "subproc_vec_env._flatten_list", "zip", "remote.recv", "subproc_vec_env._flatten_obs", "numpy.stack", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env.SubprocVecEnv._assert_not_closed", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env._flatten_list", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env._flatten_obs"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "results", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "results", "=", "_flatten_list", "(", "results", ")", "\n", "self", ".", "waiting", "=", "False", "\n", "obs", ",", "rews", ",", "dones", ",", "infos", "=", "zip", "(", "*", "results", ")", "\n", "return", "_flatten_obs", "(", "obs", ")", ",", "np", ".", "stack", "(", "rews", ")", ",", "np", ".", "stack", "(", "dones", ")", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env.SubprocVecEnv.reset": [[90, 97], ["subproc_vec_env.SubprocVecEnv._assert_not_closed", "subproc_vec_env._flatten_list", "subproc_vec_env._flatten_obs", "remote.send", "remote.recv"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env.SubprocVecEnv._assert_not_closed", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env._flatten_list", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env._flatten_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'reset'", ",", "None", ")", ")", "\n", "", "obs", "=", "[", "remote", ".", "recv", "(", ")", "for", "remote", "in", "self", ".", "remotes", "]", "\n", "obs", "=", "_flatten_list", "(", "obs", ")", "\n", "return", "_flatten_obs", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env.SubprocVecEnv.close_extras": [[98, 107], ["remote.send", "p.join", "remote.recv"], "methods", ["None"], ["", "def", "close_extras", "(", "self", ")", ":", "\n", "        ", "self", ".", "closed", "=", "True", "\n", "if", "self", ".", "waiting", ":", "\n", "            ", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "                ", "remote", ".", "recv", "(", ")", "\n", "", "", "for", "remote", "in", "self", ".", "remotes", ":", "\n", "            ", "remote", ".", "send", "(", "(", "'close'", ",", "None", ")", ")", "\n", "", "for", "p", "in", "self", ".", "ps", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env.SubprocVecEnv.get_images": [[108, 115], ["subproc_vec_env.SubprocVecEnv._assert_not_closed", "subproc_vec_env._flatten_list", "pipe.send", "pipe.recv"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env.SubprocVecEnv._assert_not_closed", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env._flatten_list"], ["", "", "def", "get_images", "(", "self", ")", ":", "\n", "        ", "self", ".", "_assert_not_closed", "(", ")", "\n", "for", "pipe", "in", "self", ".", "remotes", ":", "\n", "            ", "pipe", ".", "send", "(", "(", "'render'", ",", "None", ")", ")", "\n", "", "imgs", "=", "[", "pipe", ".", "recv", "(", ")", "for", "pipe", "in", "self", ".", "remotes", "]", "\n", "imgs", "=", "_flatten_list", "(", "imgs", ")", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env.SubprocVecEnv._assert_not_closed": [[116, 118], ["None"], "methods", ["None"], ["", "def", "_assert_not_closed", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "closed", ",", "\"Trying to operate on a SubprocVecEnv after calling close()\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env.SubprocVecEnv.__del__": [[119, 122], ["subproc_vec_env.SubprocVecEnv.close"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "closed", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env.worker": [[7, 37], ["parent_remote.close", "env.step", "env_fn_wrapper", "env.reset", "remote.recv", "print", "env.close", "remote.send", "remote.send", "subproc_vec_env.worker.step_env"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close"], ["def", "worker", "(", "remote", ",", "parent_remote", ",", "env_fn_wrappers", ")", ":", "\n", "    ", "def", "step_env", "(", "env", ",", "action", ")", ":", "\n", "        ", "ob", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "done", ":", "\n", "            ", "ob", "=", "env", ".", "reset", "(", ")", "\n", "", "return", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n", "", "parent_remote", ".", "close", "(", ")", "\n", "envs", "=", "[", "env_fn_wrapper", "(", ")", "for", "env_fn_wrapper", "in", "env_fn_wrappers", ".", "x", "]", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "cmd", ",", "data", "=", "remote", ".", "recv", "(", ")", "\n", "if", "cmd", "==", "'step'", ":", "\n", "                ", "remote", ".", "send", "(", "[", "step_env", "(", "env", ",", "action", ")", "for", "env", ",", "action", "in", "zip", "(", "envs", ",", "data", ")", "]", ")", "\n", "", "elif", "cmd", "==", "'reset'", ":", "\n", "                ", "remote", ".", "send", "(", "[", "env", ".", "reset", "(", ")", "for", "env", "in", "envs", "]", ")", "\n", "", "elif", "cmd", "==", "'render'", ":", "\n", "                ", "remote", ".", "send", "(", "[", "env", ".", "render", "(", "mode", "=", "'rgb_array'", ")", "for", "env", "in", "envs", "]", ")", "\n", "", "elif", "cmd", "==", "'close'", ":", "\n", "                ", "remote", ".", "close", "(", ")", "\n", "break", "\n", "", "elif", "cmd", "==", "'get_spaces_spec'", ":", "\n", "                ", "remote", ".", "send", "(", "CloudpickleWrapper", "(", "(", "envs", "[", "0", "]", ".", "observation_space", ",", "envs", "[", "0", "]", ".", "action_space", ",", "envs", "[", "0", "]", ".", "spec", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "print", "(", "'SubprocVecEnv worker: got KeyboardInterrupt'", ")", "\n", "", "finally", ":", "\n", "        ", "for", "env", "in", "envs", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env._flatten_obs": [[123, 132], ["isinstance", "isinstance", "len", "obs[].keys", "numpy.stack", "numpy.stack"], "function", ["None"], ["", "", "", "def", "_flatten_obs", "(", "obs", ")", ":", "\n", "    ", "assert", "isinstance", "(", "obs", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "obs", ")", ">", "0", "\n", "\n", "if", "isinstance", "(", "obs", "[", "0", "]", ",", "dict", ")", ":", "\n", "        ", "keys", "=", "obs", "[", "0", "]", ".", "keys", "(", ")", "\n", "return", "{", "k", ":", "np", ".", "stack", "(", "[", "o", "[", "k", "]", "for", "o", "in", "obs", "]", ")", "for", "k", "in", "keys", "}", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "stack", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.subproc_vec_env._flatten_list": [[133, 139], ["isinstance", "all", "len", "len"], "function", ["None"], ["", "", "def", "_flatten_list", "(", "l", ")", ":", "\n", "    ", "assert", "isinstance", "(", "l", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "l", ")", ">", "0", "\n", "assert", "all", "(", "[", "len", "(", "l_", ")", ">", "0", "for", "l_", "in", "l", "]", ")", "\n", "\n", "return", "[", "l__", "for", "l_", "in", "l", "for", "l__", "in", "l_", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.KVWriter.writekvs": [[39, 41], ["None"], "methods", ["None"], ["    ", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.SeqWriter.writeseq": [[43, 45], ["None"], "methods", ["None"], ["    ", "def", "writeseq", "(", "self", ",", "seq", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.HumanOutputFormat.__init__": [[47, 55], ["isinstance", "open", "hasattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename_or_file", ")", ":", "\n", "        ", "if", "isinstance", "(", "filename_or_file", ",", "str", ")", ":", "\n", "            ", "self", ".", "file", "=", "open", "(", "filename_or_file", ",", "'wt'", ")", "\n", "self", ".", "own_file", "=", "True", "\n", "", "else", ":", "\n", "            ", "assert", "hasattr", "(", "filename_or_file", ",", "'read'", ")", ",", "'expected file or str, got %s'", "%", "filename_or_file", "\n", "self", ".", "file", "=", "filename_or_file", "\n", "self", ".", "own_file", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.HumanOutputFormat.writekvs": [[56, 89], ["sorted", "sorted", "lines.append", "logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "kvs.items", "hasattr", "logger.HumanOutputFormat._truncate", "len", "print", "max", "max", "key2str.items", "lines.append", "str", "map", "map", "logger.HumanOutputFormat._truncate", "key2str.keys", "key2str.values", "kv[].lower", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.HumanOutputFormat._truncate", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.HumanOutputFormat._truncate"], ["", "", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "# Create strings for printing", "\n", "        ", "key2str", "=", "{", "}", "\n", "for", "(", "key", ",", "val", ")", "in", "sorted", "(", "kvs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "val", ",", "'__float__'", ")", ":", "\n", "                ", "valstr", "=", "'%-8.3g'", "%", "val", "\n", "", "else", ":", "\n", "                ", "valstr", "=", "str", "(", "val", ")", "\n", "", "key2str", "[", "self", ".", "_truncate", "(", "key", ")", "]", "=", "self", ".", "_truncate", "(", "valstr", ")", "\n", "\n", "# Find max widths", "\n", "", "if", "len", "(", "key2str", ")", "==", "0", ":", "\n", "            ", "print", "(", "'WARNING: tried to write empty key-value dict'", ")", "\n", "return", "\n", "", "else", ":", "\n", "            ", "keywidth", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "keys", "(", ")", ")", ")", "\n", "valwidth", "=", "max", "(", "map", "(", "len", ",", "key2str", ".", "values", "(", ")", ")", ")", "\n", "\n", "# Write out the data", "\n", "", "dashes", "=", "'-'", "*", "(", "keywidth", "+", "valwidth", "+", "7", ")", "\n", "lines", "=", "[", "dashes", "]", "\n", "for", "(", "key", ",", "val", ")", "in", "sorted", "(", "key2str", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "0", "]", ".", "lower", "(", ")", ")", ":", "\n", "            ", "lines", ".", "append", "(", "'| %s%s | %s%s |'", "%", "(", "\n", "key", ",", "\n", "' '", "*", "(", "keywidth", "-", "len", "(", "key", ")", ")", ",", "\n", "val", ",", "\n", "' '", "*", "(", "valwidth", "-", "len", "(", "val", ")", ")", ",", "\n", ")", ")", "\n", "", "lines", ".", "append", "(", "dashes", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\n'", ".", "join", "(", "lines", ")", "+", "'\\n'", ")", "\n", "\n", "# Flush the output to the file", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.HumanOutputFormat._truncate": [[90, 93], ["len"], "methods", ["None"], ["", "def", "_truncate", "(", "self", ",", "s", ")", ":", "\n", "        ", "maxlen", "=", "30", "\n", "return", "s", "[", ":", "maxlen", "-", "3", "]", "+", "'...'", "if", "len", "(", "s", ")", ">", "maxlen", "else", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.HumanOutputFormat.writeseq": [[94, 102], ["list", "enumerate", "logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.flush", "logger.HumanOutputFormat.file.write", "logger.HumanOutputFormat.file.write", "len"], "methods", ["None"], ["", "def", "writeseq", "(", "self", ",", "seq", ")", ":", "\n", "        ", "seq", "=", "list", "(", "seq", ")", "\n", "for", "(", "i", ",", "elem", ")", "in", "enumerate", "(", "seq", ")", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "elem", ")", "\n", "if", "i", "<", "len", "(", "seq", ")", "-", "1", ":", "# add space unless this is the last one", "\n", "                ", "self", ".", "file", ".", "write", "(", "' '", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.HumanOutputFormat.close": [[103, 106], ["logger.HumanOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "own_file", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.JSONOutputFormat.__init__": [[108, 110], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "file", "=", "open", "(", "filename", ",", "'wt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.JSONOutputFormat.writekvs": [[111, 117], ["sorted", "logger.JSONOutputFormat.file.write", "logger.JSONOutputFormat.file.flush", "kvs.items", "hasattr", "float", "json.dumps"], "methods", ["None"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "sorted", "(", "kvs", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "v", ",", "'dtype'", ")", ":", "\n", "                ", "kvs", "[", "k", "]", "=", "float", "(", "v", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "json", ".", "dumps", "(", "kvs", ")", "+", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.JSONOutputFormat.close": [[118, 120], ["logger.JSONOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.CSVOutputFormat.__init__": [[122, 126], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "file", "=", "open", "(", "filename", ",", "'w+t'", ")", "\n", "self", ".", "keys", "=", "[", "]", "\n", "self", ".", "sep", "=", "','", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.CSVOutputFormat.writekvs": [[127, 153], ["list", "list.sort", "enumerate", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.flush", "logger.CSVOutputFormat.keys.extend", "logger.CSVOutputFormat.file.seek", "logger.CSVOutputFormat.file.readlines", "logger.CSVOutputFormat.file.seek", "enumerate", "logger.CSVOutputFormat.file.write", "kvs.get", "kvs.keys", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "logger.CSVOutputFormat.file.write", "str", "len"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.adv_que.Advque.get"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "# Add our current row to the history", "\n", "        ", "extra_keys", "=", "list", "(", "kvs", ".", "keys", "(", ")", "-", "self", ".", "keys", ")", "\n", "extra_keys", ".", "sort", "(", ")", "\n", "if", "extra_keys", ":", "\n", "            ", "self", ".", "keys", ".", "extend", "(", "extra_keys", ")", "\n", "self", ".", "file", ".", "seek", "(", "0", ")", "\n", "lines", "=", "self", ".", "file", ".", "readlines", "(", ")", "\n", "self", ".", "file", ".", "seek", "(", "0", ")", "\n", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "self", ".", "keys", ")", ":", "\n", "                ", "if", "i", ">", "0", ":", "\n", "                    ", "self", ".", "file", ".", "write", "(", "','", ")", "\n", "", "self", ".", "file", ".", "write", "(", "k", ")", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "line", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "file", ".", "write", "(", "self", ".", "sep", "*", "len", "(", "extra_keys", ")", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "", "", "for", "(", "i", ",", "k", ")", "in", "enumerate", "(", "self", ".", "keys", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "','", ")", "\n", "", "v", "=", "kvs", ".", "get", "(", "k", ")", "\n", "if", "v", "is", "not", "None", ":", "\n", "                ", "self", ".", "file", ".", "write", "(", "str", "(", "v", ")", ")", "\n", "", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.CSVOutputFormat.close": [[154, 156], ["logger.CSVOutputFormat.file.close"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.TensorBoardOutputFormat.__init__": [[162, 177], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "logger.del_files", "os.join", "os.join", "pywrap_tensorflow.EventsWriter", "os.abspath", "os.abspath", "compat.as_bytes"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.del_files"], ["def", "__init__", "(", "self", ",", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ",", "exist_ok", "=", "True", ")", "\n", "del_files", "(", "dir", ")", "# \u5220\u9664\u4e4b\u524d\u7684log\u6587\u4ef6", "\n", "self", ".", "dir", "=", "dir", "\n", "self", ".", "step", "=", "1", "\n", "prefix", "=", "'events'", "\n", "path", "=", "osp", ".", "join", "(", "osp", ".", "abspath", "(", "dir", ")", ",", "prefix", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", ".", "python", "import", "pywrap_tensorflow", "\n", "from", "tensorflow", ".", "core", ".", "util", "import", "event_pb2", "\n", "from", "tensorflow", ".", "python", ".", "util", "import", "compat", "\n", "self", ".", "tf", "=", "tf", "\n", "self", ".", "event_pb2", "=", "event_pb2", "\n", "self", ".", "pywrap_tensorflow", "=", "pywrap_tensorflow", "\n", "self", ".", "writer", "=", "pywrap_tensorflow", ".", "EventsWriter", "(", "compat", ".", "as_bytes", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.TensorBoardOutputFormat.writekvs": [[178, 188], ["logger.TensorBoardOutputFormat.tf.Summary", "logger.TensorBoardOutputFormat.event_pb2.Event", "logger.TensorBoardOutputFormat.writer.WriteEvent", "logger.TensorBoardOutputFormat.writer.Flush", "logger.TensorBoardOutputFormat.tf.Summary.Value", "float", "time.time", "logger.TensorBoardOutputFormat.writekvs.summary_val"], "methods", ["None"], ["", "def", "writekvs", "(", "self", ",", "kvs", ")", ":", "\n", "        ", "def", "summary_val", "(", "k", ",", "v", ")", ":", "\n", "            ", "kwargs", "=", "{", "'tag'", ":", "k", ",", "'simple_value'", ":", "float", "(", "v", ")", "}", "\n", "return", "self", ".", "tf", ".", "Summary", ".", "Value", "(", "**", "kwargs", ")", "\n", "", "summary", "=", "self", ".", "tf", ".", "Summary", "(", "value", "=", "[", "summary_val", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "kvs", ".", "items", "(", ")", "]", ")", "\n", "event", "=", "self", ".", "event_pb2", ".", "Event", "(", "wall_time", "=", "time", ".", "time", "(", ")", ",", "summary", "=", "summary", ")", "\n", "event", ".", "step", "=", "self", ".", "step", "# is there any reason why you'd want to specify the step?", "\n", "self", ".", "writer", ".", "WriteEvent", "(", "event", ")", "\n", "self", ".", "writer", ".", "Flush", "(", ")", "\n", "self", ".", "step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.TensorBoardOutputFormat.close": [[189, 193], ["logger.TensorBoardOutputFormat.writer.Close"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "writer", ":", "\n", "            ", "self", ".", "writer", ".", "Close", "(", ")", "\n", "self", ".", "writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.Logger.__init__": [[335, 342], ["collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dir", ",", "output_formats", ",", "comm", "=", "None", ")", ":", "\n", "        ", "self", ".", "name2val", "=", "defaultdict", "(", "float", ")", "# values this iteration", "\n", "self", ".", "name2cnt", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "level", "=", "INFO", "\n", "self", ".", "dir", "=", "dir", "\n", "self", ".", "output_formats", "=", "output_formats", "\n", "self", ".", "comm", "=", "comm", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.Logger.logkv": [[345, 347], ["None"], "methods", ["None"], ["", "def", "logkv", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "self", ".", "name2val", "[", "key", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.Logger.logkv_mean": [[348, 352], ["None"], "methods", ["None"], ["", "def", "logkv_mean", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "oldval", ",", "cnt", "=", "self", ".", "name2val", "[", "key", "]", ",", "self", ".", "name2cnt", "[", "key", "]", "\n", "self", ".", "name2val", "[", "key", "]", "=", "oldval", "*", "cnt", "/", "(", "cnt", "+", "1", ")", "+", "val", "/", "(", "cnt", "+", "1", ")", "\n", "self", ".", "name2cnt", "[", "key", "]", "=", "cnt", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.Logger.dumpkvs": [[353, 370], ["mpi_util.mpi_weighted_mean.copy", "logger.Logger.name2val.clear", "logger.Logger.name2cnt.clear", "mpi_util.mpi_weighted_mean", "isinstance", "fmt.writekvs", "logger.Logger.name2cnt.get", "logger.Logger.name2val.items"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.TensorBoardOutputFormat.writekvs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.adv_que.Advque.get"], ["", "def", "dumpkvs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "comm", "is", "None", ":", "\n", "            ", "d", "=", "self", ".", "name2val", "\n", "", "else", ":", "\n", "            ", "from", "wgcsl", ".", "common", "import", "mpi_util", "\n", "d", "=", "mpi_util", ".", "mpi_weighted_mean", "(", "self", ".", "comm", ",", "\n", "{", "name", ":", "(", "val", ",", "self", ".", "name2cnt", ".", "get", "(", "name", ",", "1", ")", ")", "\n", "for", "(", "name", ",", "val", ")", "in", "self", ".", "name2val", ".", "items", "(", ")", "}", ")", "\n", "if", "self", ".", "comm", ".", "rank", "!=", "0", ":", "\n", "                ", "d", "[", "'dummy'", "]", "=", "1", "# so we don't get a warning about empty dict", "\n", "", "", "out", "=", "d", ".", "copy", "(", ")", "# Return the dict for unit testing purposes", "\n", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "if", "isinstance", "(", "fmt", ",", "KVWriter", ")", ":", "\n", "                ", "fmt", ".", "writekvs", "(", "d", ")", "\n", "", "", "self", ".", "name2val", ".", "clear", "(", ")", "\n", "self", ".", "name2cnt", ".", "clear", "(", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.Logger.log": [[371, 374], ["logger.Logger._do_log"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.Logger._do_log"], ["", "def", "log", "(", "self", ",", "*", "args", ",", "level", "=", "INFO", ")", ":", "\n", "        ", "if", "self", ".", "level", "<=", "level", ":", "\n", "            ", "self", ".", "_do_log", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.Logger.set_level": [[377, 379], ["None"], "methods", ["None"], ["", "", "def", "set_level", "(", "self", ",", "level", ")", ":", "\n", "        ", "self", ".", "level", "=", "level", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.Logger.set_comm": [[380, 382], ["None"], "methods", ["None"], ["", "def", "set_comm", "(", "self", ",", "comm", ")", ":", "\n", "        ", "self", ".", "comm", "=", "comm", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.Logger.get_dir": [[383, 385], ["None"], "methods", ["None"], ["", "def", "get_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dir", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.Logger.close": [[386, 389], ["fmt.close"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "fmt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.Logger._do_log": [[392, 396], ["isinstance", "fmt.writeseq", "map"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.HumanOutputFormat.writeseq"], ["", "", "def", "_do_log", "(", "self", ",", "args", ")", ":", "\n", "        ", "for", "fmt", "in", "self", ".", "output_formats", ":", "\n", "            ", "if", "isinstance", "(", "fmt", ",", "SeqWriter", ")", ":", "\n", "                ", "fmt", ".", "writeseq", "(", "map", "(", "str", ",", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.del_dir_tree": [[19, 25], ["os.path.exists", "os.path.exists", "shutil.rmtree", "print"], "function", ["None"], ["def", "del_dir_tree", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "path", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"remove path tree {} failed!\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.del_files": [[26, 37], ["os.path.isdir", "os.path.isdir", "os.listdir", "os.listdir", "print", "os.path.isfile", "os.path.isfile", "os.remove", "os.remove", "os.remove", "os.remove", "print", "print", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "", "def", "del_files", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "files", "=", "os", ".", "listdir", "(", "path", ")", "\n", "for", "file", "in", "files", ":", "\n", "          ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "path", ",", "file", ")", ")", "\n", "", "print", "(", "\"Remove files in {}\"", ".", "format", "(", "path", ")", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "        ", "os", ".", "remove", "(", "path", ")", "\n", "print", "(", "\"Remove file {}\"", ".", "format", "(", "path", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"{} not a file or a directory\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.make_output_format": [[194, 208], ["os.makedirs", "os.makedirs", "logger.HumanOutputFormat", "logger.HumanOutputFormat", "os.join", "logger.JSONOutputFormat", "os.join", "logger.CSVOutputFormat", "os.join", "logger.TensorBoardOutputFormat", "ValueError", "os.join"], "function", ["None"], ["", "", "", "def", "make_output_format", "(", "format", ",", "ev_dir", ",", "log_suffix", "=", "''", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "ev_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "format", "==", "'stdout'", ":", "\n", "        ", "return", "HumanOutputFormat", "(", "sys", ".", "stdout", ")", "\n", "", "elif", "format", "==", "'log'", ":", "\n", "        ", "return", "HumanOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "'log%s.txt'", "%", "log_suffix", ")", ")", "\n", "", "elif", "format", "==", "'json'", ":", "\n", "        ", "return", "JSONOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "'progress%s.json'", "%", "log_suffix", ")", ")", "\n", "", "elif", "format", "==", "'csv'", ":", "\n", "        ", "return", "CSVOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "'progress%s.csv'", "%", "log_suffix", ")", ")", "\n", "", "elif", "format", "==", "'tensorboard'", ":", "\n", "        ", "return", "TensorBoardOutputFormat", "(", "osp", ".", "join", "(", "ev_dir", ",", "'tb%s'", "%", "log_suffix", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown format specified: %s'", "%", "(", "format", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkv": [[213, 220], ["get_current().logkv", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkv", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_current"], ["", "", "def", "logkv", "(", "key", ",", "val", ")", ":", "\n", "    ", "\"\"\"\n    Log a value of some diagnostic\n    Call this once for each diagnostic quantity, each iteration\n    If called many times, last value will be used.\n    \"\"\"", "\n", "get_current", "(", ")", ".", "logkv", "(", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkv_mean": [[221, 226], ["get_current().logkv_mean", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkv_mean", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_current"], ["", "def", "logkv_mean", "(", "key", ",", "val", ")", ":", "\n", "    ", "\"\"\"\n    The same as logkv(), but if called many times, values averaged.\n    \"\"\"", "\n", "get_current", "(", ")", ".", "logkv_mean", "(", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkvs": [[227, 233], ["d.items", "logger.logkv"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkv"], ["", "def", "logkvs", "(", "d", ")", ":", "\n", "    ", "\"\"\"\n    Log a dictionary of key-value pairs\n    \"\"\"", "\n", "for", "(", "k", ",", "v", ")", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "logkv", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.dumpkvs": [[234, 239], ["get_current().dumpkvs", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.dumpkvs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_current"], ["", "", "def", "dumpkvs", "(", ")", ":", "\n", "    ", "\"\"\"\n    Write all of the diagnostics from the current iteration\n    \"\"\"", "\n", "return", "get_current", "(", ")", ".", "dumpkvs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.getkvs": [[240, 242], ["logger.get_current"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_current"], ["", "def", "getkvs", "(", ")", ":", "\n", "    ", "return", "get_current", "(", ")", ".", "name2val", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.log": [[244, 249], ["get_current().log", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.log", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_current"], ["", "def", "log", "(", "*", "args", ",", "level", "=", "INFO", ")", ":", "\n", "    ", "\"\"\"\n    Write the sequence of args, with no separators, to the console and output files (if you've configured an output file).\n    \"\"\"", "\n", "get_current", "(", ")", ".", "log", "(", "*", "args", ",", "level", "=", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.debug": [[250, 252], ["logger.log"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.log"], ["", "def", "debug", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "DEBUG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.info": [[253, 255], ["logger.log"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.log"], ["", "def", "info", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.warn": [[256, 258], ["logger.log"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.log"], ["", "def", "warn", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "WARN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.error": [[259, 261], ["logger.log"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.log"], ["", "def", "error", "(", "*", "args", ")", ":", "\n", "    ", "log", "(", "*", "args", ",", "level", "=", "ERROR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.set_level": [[263, 268], ["get_current().set_level", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.set_level", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_current"], ["", "def", "set_level", "(", "level", ")", ":", "\n", "    ", "\"\"\"\n    Set logging threshold on current logger.\n    \"\"\"", "\n", "get_current", "(", ")", ".", "set_level", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.set_comm": [[269, 271], ["get_current().set_comm", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.set_comm", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_current"], ["", "def", "set_comm", "(", "comm", ")", ":", "\n", "    ", "get_current", "(", ")", ".", "set_comm", "(", "comm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_dir": [[272, 278], ["get_current().get_dir", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_dir", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_current"], ["", "def", "get_dir", "(", ")", ":", "\n", "    ", "\"\"\"\n    Get directory that log files are being written to.\n    will be None if there is no output directory (i.e., if you didn't call start)\n    \"\"\"", "\n", "return", "get_current", "(", ")", ".", "get_dir", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.profile_kv": [[282, 290], ["time.time", "time.time", "logger.get_current"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_current"], ["@", "contextmanager", "\n", "def", "profile_kv", "(", "scopename", ")", ":", "\n", "    ", "logkey", "=", "'wait_'", "+", "scopename", "\n", "tstart", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "get_current", "(", ")", ".", "name2val", "[", "logkey", "]", "+=", "time", ".", "time", "(", ")", "-", "tstart", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.profile": [[291, 303], ["logger.profile_kv", "func"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.profile_kv"], ["", "", "def", "profile", "(", "n", ")", ":", "\n", "    ", "\"\"\"\n    Usage:\n    @profile(\"my_func\")\n    def my_func(): code\n    \"\"\"", "\n", "def", "decorator_with_name", "(", "func", ")", ":", "\n", "        ", "def", "func_wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "with", "profile_kv", "(", "n", ")", ":", "\n", "                ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "func_wrapper", "\n", "", "return", "decorator_with_name", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_current": [[309, 314], ["logger._configure_default_logger"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger._configure_default_logger"], ["", "def", "get_current", "(", ")", ":", "\n", "    ", "if", "Logger", ".", "CURRENT", "is", "None", ":", "\n", "        ", "_configure_default_logger", "(", ")", "\n", "\n", "", "return", "Logger", ".", "CURRENT", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_time": [[315, 328], ["time.gmtime", "range", "str", "len", "str", "range"], "function", ["None"], ["", "def", "get_time", "(", ")", ":", "\n", "    ", "import", "time", "\n", "gm", "=", "time", ".", "gmtime", "(", ")", "\n", "day_info", "=", "[", "gm", ".", "tm_year", ",", "gm", ".", "tm_mon", ",", "gm", ".", "tm_mday", "]", "\n", "time_info", "=", "[", "gm", ".", "tm_hour", ",", "gm", ".", "tm_min", ",", "gm", ".", "tm_sec", "]", "\n", "day_str", "=", "[", "str", "(", "x", ")", "for", "x", "in", "day_info", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "3", ")", ":", "\n", "        ", "if", "len", "(", "day_str", ")", "==", "1", ":", "\n", "            ", "day_str", "[", "i", "]", "=", "'0'", "+", "day_str", "[", "i", "]", "\n", "", "", "day_str", "=", "'-'", ".", "join", "(", "day_str", ")", "\n", "time_later", "=", "[", "'h'", ",", "'m'", ",", "'s'", "]", "\n", "time_str", "=", "\"\"", ".", "join", "(", "[", "str", "(", "time_info", "[", "i", "]", ")", "+", "time_later", "[", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", ")", "\n", "return", "day_str", "+", "'_'", "+", "time_str", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_rank_without_mpi_import": [[397, 404], ["int"], "function", ["None"], ["", "", "", "", "def", "get_rank_without_mpi_import", "(", ")", ":", "\n", "# check environment variables here instead of importing mpi4py", "\n", "# to avoid calling MPI_Init() when this module is imported", "\n", "    ", "for", "varname", "in", "[", "'PMI_RANK'", ",", "'OMPI_COMM_WORLD_RANK'", "]", ":", "\n", "        ", "if", "varname", "in", "os", ".", "environ", ":", "\n", "            ", "return", "int", "(", "os", ".", "environ", "[", "varname", "]", ")", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.configure": [[406, 445], ["isinstance", "os.path.expanduser", "os.path.expanduser", "os.makedirs", "os.makedirs", "logger.get_rank_without_mpi_import", "filter", "logger.Logger", "os.getenv", "os.getenv", "os.join", "logger.get_time", "os.path.expanduser", "os.path.expanduser", "logger.make_output_format", "logger.log", "tempfile.gettempdir", "datetime.datetime.now().strftime", "os.getenv().split", "os.getenv().split", "os.getenv().split", "os.getenv().split", "os.getenv().split.split", "os.getenv().split", "os.getenv().split", "datetime.datetime.now", "os.getenv", "os.getenv", "os.getenv", "os.getenv", "os.getenv", "os.getenv"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_rank_without_mpi_import", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.get_time", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.make_output_format", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.log"], ["", "def", "configure", "(", "dir", "=", "None", ",", "format_strs", "=", "'stdout,log,csv'", ",", "comm", "=", "None", ",", "log_suffix", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    If comm is provided, average all numerical stats across that comm\n    \"\"\"", "\n", "if", "dir", "is", "None", ":", "\n", "        ", "dir", "=", "os", ".", "getenv", "(", "'OPENAI_LOGDIR'", ")", "\n", "", "if", "dir", "is", "None", ":", "\n", "        ", "dir", "=", "osp", ".", "join", "(", "tempfile", ".", "gettempdir", "(", ")", ",", "\n", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"openai-%Y-%m-%d-%H-%M-%S-%f\"", ")", ")", "\n", "", "try", ":", "\n", "        ", "dir", "+=", "get_time", "(", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "assert", "isinstance", "(", "dir", ",", "str", ")", "\n", "dir", "=", "os", ".", "path", ".", "expanduser", "(", "dir", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "expanduser", "(", "dir", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "rank", "=", "get_rank_without_mpi_import", "(", ")", "\n", "if", "rank", ">", "0", ":", "\n", "        ", "log_suffix", "=", "log_suffix", "+", "\"-rank%03i\"", "%", "rank", "\n", "\n", "", "if", "format_strs", "is", "None", ":", "\n", "        ", "if", "rank", "==", "0", ":", "\n", "            ", "format_strs", "=", "os", ".", "getenv", "(", "'OPENAI_LOG_FORMAT'", ",", "'stdout,log,csv'", ")", ".", "split", "(", "','", ")", "\n", "", "else", ":", "\n", "            ", "format_strs", "=", "os", ".", "getenv", "(", "'OPENAI_LOG_FORMAT_MPI'", ",", "'log'", ")", ".", "split", "(", "','", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "rank", "==", "0", ":", "\n", "            ", "format_strs", "=", "format_strs", ".", "split", "(", "','", ")", "\n", "", "else", ":", "\n", "            ", "format_strs", "=", "os", ".", "getenv", "(", "'OPENAI_LOG_FORMAT_MPI'", ",", "'log'", ")", ".", "split", "(", "','", ")", "\n", "\n", "", "", "format_strs", "=", "filter", "(", "None", ",", "format_strs", ")", "\n", "output_formats", "=", "[", "make_output_format", "(", "f", ",", "dir", ",", "log_suffix", ")", "for", "f", "in", "format_strs", "]", "\n", "\n", "Logger", ".", "CURRENT", "=", "Logger", "(", "dir", "=", "dir", ",", "output_formats", "=", "output_formats", ",", "comm", "=", "comm", ")", "\n", "if", "output_formats", ":", "\n", "        ", "log", "(", "'Logging to %s'", "%", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger._configure_default_logger": [[446, 449], ["logger.configure"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.configure"], ["", "", "def", "_configure_default_logger", "(", ")", ":", "\n", "    ", "configure", "(", ")", "\n", "Logger", ".", "DEFAULT", "=", "Logger", ".", "CURRENT", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.reset": [[450, 455], ["Logger.CURRENT.close", "logger.log"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.log"], ["", "def", "reset", "(", ")", ":", "\n", "    ", "if", "Logger", ".", "CURRENT", "is", "not", "Logger", ".", "DEFAULT", ":", "\n", "        ", "Logger", ".", "CURRENT", ".", "close", "(", ")", "\n", "Logger", ".", "CURRENT", "=", "Logger", ".", "DEFAULT", "\n", "log", "(", "'Reset logger'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.scoped_configure": [[456, 465], ["logger.configure", "Logger.CURRENT.close"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.configure", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close"], ["", "", "@", "contextmanager", "\n", "def", "scoped_configure", "(", "dir", "=", "None", ",", "format_strs", "=", "None", ",", "comm", "=", "None", ")", ":", "\n", "    ", "prevlogger", "=", "Logger", ".", "CURRENT", "\n", "configure", "(", "dir", "=", "dir", ",", "format_strs", "=", "format_strs", ",", "comm", "=", "comm", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "Logger", ".", "CURRENT", ".", "close", "(", ")", "\n", "Logger", ".", "CURRENT", "=", "prevlogger", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger._demo": [[468, 495], ["logger.info", "logger.debug", "logger.set_level", "logger.debug", "os.path.exists", "os.path.exists", "logger.configure", "logger.logkv", "logger.logkv", "logger.dumpkvs", "logger.logkv", "logger.logkv", "logger.dumpkvs", "logger.info", "logger.logkv_mean", "logger.logkv_mean", "logger.logkv", "logger.dumpkvs", "logger.info", "logger.logkv", "logger.dumpkvs", "logger.logkv", "logger.dumpkvs", "shutil.rmtree"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.info", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.debug", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.set_level", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.debug", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.configure", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkv", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkv", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.dumpkvs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkv", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkv", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.dumpkvs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.info", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkv_mean", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkv_mean", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkv", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.dumpkvs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.info", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkv", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.dumpkvs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.logkv", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.dumpkvs"], ["", "", "def", "_demo", "(", ")", ":", "\n", "    ", "info", "(", "\"hi\"", ")", "\n", "debug", "(", "\"shouldn't appear\"", ")", "\n", "set_level", "(", "DEBUG", ")", "\n", "debug", "(", "\"should appear\"", ")", "\n", "dir", "=", "\"/tmp/testlogging\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "dir", ")", "\n", "", "configure", "(", "dir", "=", "dir", ")", "\n", "logkv", "(", "\"a\"", ",", "3", ")", "\n", "logkv", "(", "\"b\"", ",", "2.5", ")", "\n", "dumpkvs", "(", ")", "\n", "logkv", "(", "\"b\"", ",", "-", "2.5", ")", "\n", "logkv", "(", "\"a\"", ",", "5.5", ")", "\n", "dumpkvs", "(", ")", "\n", "info", "(", "\"^^^ should see a = 5.5\"", ")", "\n", "logkv_mean", "(", "\"b\"", ",", "-", "22.5", ")", "\n", "logkv_mean", "(", "\"b\"", ",", "-", "44.4", ")", "\n", "logkv", "(", "\"a\"", ",", "5.5", ")", "\n", "dumpkvs", "(", ")", "\n", "info", "(", "\"^^^ should see b = -33.3\"", ")", "\n", "\n", "logkv", "(", "\"b\"", ",", "-", "2.5", ")", "\n", "dumpkvs", "(", ")", "\n", "\n", "logkv", "(", "\"a\"", ",", "\"longasslongasslongasslongasslongasslongassvalue\"", ")", "\n", "dumpkvs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.read_json": [[501, 508], ["pandas.DataFrame", "open", "ds.append", "json.loads"], "function", ["None"], ["", "def", "read_json", "(", "fname", ")", ":", "\n", "    ", "import", "pandas", "\n", "ds", "=", "[", "]", "\n", "with", "open", "(", "fname", ",", "'rt'", ")", "as", "fh", ":", "\n", "        ", "for", "line", "in", "fh", ":", "\n", "            ", "ds", ".", "append", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "", "", "return", "pandas", ".", "DataFrame", "(", "ds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.read_csv": [[509, 512], ["pandas.read_csv"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.read_csv"], ["", "def", "read_csv", "(", "fname", ")", ":", "\n", "    ", "import", "pandas", "\n", "return", "pandas", ".", "read_csv", "(", "fname", ",", "index_col", "=", "None", ",", "comment", "=", "'#'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.read_tb": [[513, 545], ["os.isdir", "collections.defaultdict", "np.empty", "sorted", "enumerate", "pandas.DataFrame", "glob", "os.basename().startswith", "tf.train.summary_iterator", "collections.defaultdict.keys", "os.join", "NotImplementedError", "len", "os.basename", "max", "tag2pairs[].append"], "function", ["None"], ["", "def", "read_tb", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    path : a tensorboard file OR a directory, where we will find all TB files\n           of the form events.*\n    \"\"\"", "\n", "import", "pandas", "\n", "import", "numpy", "as", "np", "\n", "from", "glob", "import", "glob", "\n", "import", "tensorflow", "as", "tf", "\n", "if", "osp", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "fnames", "=", "glob", "(", "osp", ".", "join", "(", "path", ",", "\"events.*\"", ")", ")", "\n", "", "elif", "osp", ".", "basename", "(", "path", ")", ".", "startswith", "(", "\"events.\"", ")", ":", "\n", "        ", "fnames", "=", "[", "path", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Expected tensorboard file or directory containing them. Got %s\"", "%", "path", ")", "\n", "", "tag2pairs", "=", "defaultdict", "(", "list", ")", "\n", "maxstep", "=", "0", "\n", "for", "fname", "in", "fnames", ":", "\n", "        ", "for", "summary", "in", "tf", ".", "train", ".", "summary_iterator", "(", "fname", ")", ":", "\n", "            ", "if", "summary", ".", "step", ">", "0", ":", "\n", "                ", "for", "v", "in", "summary", ".", "summary", ".", "value", ":", "\n", "                    ", "pair", "=", "(", "summary", ".", "step", ",", "v", ".", "simple_value", ")", "\n", "tag2pairs", "[", "v", ".", "tag", "]", ".", "append", "(", "pair", ")", "\n", "", "maxstep", "=", "max", "(", "summary", ".", "step", ",", "maxstep", ")", "\n", "", "", "", "data", "=", "np", ".", "empty", "(", "(", "maxstep", ",", "len", "(", "tag2pairs", ")", ")", ")", "\n", "data", "[", ":", "]", "=", "np", ".", "nan", "\n", "tags", "=", "sorted", "(", "tag2pairs", ".", "keys", "(", ")", ")", "\n", "for", "(", "colidx", ",", "tag", ")", "in", "enumerate", "(", "tags", ")", ":", "\n", "        ", "pairs", "=", "tag2pairs", "[", "tag", "]", "\n", "for", "(", "step", ",", "value", ")", "in", "pairs", ":", "\n", "            ", "data", "[", "step", "-", "1", ",", "colidx", "]", "=", "value", "\n", "", "", "return", "pandas", ".", "DataFrame", "(", "data", ",", "columns", "=", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_adam.MpiAdam.__init__": [[11, 24], ["sum", "numpy.zeros", "numpy.zeros", "wgcsl.SetFromFlat", "wgcsl.GetFlat", "wgcsl.numel"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.numel"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ",", "*", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "epsilon", "=", "1e-08", ",", "scale_grad_by_procs", "=", "True", ",", "comm", "=", "None", ")", ":", "\n", "        ", "self", ".", "var_list", "=", "var_list", "\n", "self", ".", "beta1", "=", "beta1", "\n", "self", ".", "beta2", "=", "beta2", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "scale_grad_by_procs", "=", "scale_grad_by_procs", "\n", "size", "=", "sum", "(", "U", ".", "numel", "(", "v", ")", "for", "v", "in", "var_list", ")", "\n", "self", ".", "m", "=", "np", ".", "zeros", "(", "size", ",", "'float32'", ")", "\n", "self", ".", "v", "=", "np", ".", "zeros", "(", "size", ",", "'float32'", ")", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "setfromflat", "=", "U", ".", "SetFromFlat", "(", "var_list", ")", "\n", "self", ".", "getflat", "=", "U", ".", "GetFlat", "(", "var_list", ")", "\n", "self", ".", "comm", "=", "MPI", ".", "COMM_WORLD", "if", "comm", "is", "None", "and", "MPI", "is", "not", "None", "else", "comm", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_adam.MpiAdam.update": [[25, 43], ["localg.astype.astype.astype", "mpi_adam.MpiAdam.setfromflat", "mpi_adam.MpiAdam.check_synced", "numpy.zeros_like", "mpi_adam.MpiAdam.comm.Allreduce", "numpy.copy", "mpi_adam.MpiAdam.comm.Get_size", "numpy.sqrt", "numpy.sqrt", "mpi_adam.MpiAdam.getflat"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_adam.MpiAdam.check_synced"], ["", "def", "update", "(", "self", ",", "localg", ",", "stepsize", ")", ":", "\n", "        ", "if", "self", ".", "t", "%", "100", "==", "0", ":", "\n", "            ", "self", ".", "check_synced", "(", ")", "\n", "", "localg", "=", "localg", ".", "astype", "(", "'float32'", ")", "\n", "if", "self", ".", "comm", "is", "not", "None", ":", "\n", "            ", "globalg", "=", "np", ".", "zeros_like", "(", "localg", ")", "\n", "self", ".", "comm", ".", "Allreduce", "(", "localg", ",", "globalg", ",", "op", "=", "MPI", ".", "SUM", ")", "\n", "if", "self", ".", "scale_grad_by_procs", ":", "\n", "                ", "globalg", "/=", "self", ".", "comm", ".", "Get_size", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "globalg", "=", "np", ".", "copy", "(", "localg", ")", "\n", "\n", "", "self", ".", "t", "+=", "1", "\n", "a", "=", "stepsize", "*", "np", ".", "sqrt", "(", "1", "-", "self", ".", "beta2", "**", "self", ".", "t", ")", "/", "(", "1", "-", "self", ".", "beta1", "**", "self", ".", "t", ")", "\n", "self", ".", "m", "=", "self", ".", "beta1", "*", "self", ".", "m", "+", "(", "1", "-", "self", ".", "beta1", ")", "*", "globalg", "\n", "self", ".", "v", "=", "self", ".", "beta2", "*", "self", ".", "v", "+", "(", "1", "-", "self", ".", "beta2", ")", "*", "(", "globalg", "*", "globalg", ")", "\n", "step", "=", "(", "-", "a", ")", "*", "self", ".", "m", "/", "(", "np", ".", "sqrt", "(", "self", ".", "v", ")", "+", "self", ".", "epsilon", ")", "\n", "self", ".", "setfromflat", "(", "self", ".", "getflat", "(", ")", "+", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_adam.MpiAdam.sync": [[44, 50], ["mpi_adam.MpiAdam.getflat", "mpi_adam.MpiAdam.comm.Bcast", "mpi_adam.MpiAdam.setfromflat"], "methods", ["None"], ["", "def", "sync", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "comm", "is", "None", ":", "\n", "            ", "return", "\n", "", "theta", "=", "self", ".", "getflat", "(", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "theta", ",", "root", "=", "0", ")", "\n", "self", ".", "setfromflat", "(", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_adam.MpiAdam.check_synced": [[51, 62], ["mpi_adam.MpiAdam.comm.Get_rank", "mpi_adam.MpiAdam.getflat", "mpi_adam.MpiAdam.comm.Bcast", "mpi_adam.MpiAdam.getflat", "numpy.empty_like", "mpi_adam.MpiAdam.comm.Bcast"], "methods", ["None"], ["", "def", "check_synced", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "comm", "is", "None", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "comm", ".", "Get_rank", "(", ")", "==", "0", ":", "# this is root", "\n", "            ", "theta", "=", "self", ".", "getflat", "(", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "theta", ",", "root", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "thetalocal", "=", "self", ".", "getflat", "(", ")", "\n", "thetaroot", "=", "np", ".", "empty_like", "(", "thetalocal", ")", "\n", "self", ".", "comm", ".", "Bcast", "(", "thetaroot", ",", "root", "=", "0", ")", "\n", "assert", "(", "thetaroot", "==", "thetalocal", ")", ".", "all", "(", ")", ",", "(", "thetaroot", ",", "thetalocal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.mpi_adam.test_MpiAdam": [[63, 100], ["numpy.random.seed", "tensorflow.set_random_seed", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.train.AdamOptimizer().minimize", "wgcsl.function", "tensorflow.get_default_session().run", "range", "tensorflow.set_random_seed", "tensorflow.get_default_session().run", "wgcsl.function", "mpi_adam.MpiAdam", "range", "numpy.testing.assert_allclose", "numpy.random.randn().astype", "numpy.random.randn().astype", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.global_variables_initializer", "U.function.", "print", "losslist_ref.append", "tensorflow.global_variables_initializer", "U.function.", "mpi_adam.MpiAdam.update", "print", "losslist_test.append", "numpy.array", "numpy.array", "tensorflow.square", "tensorflow.sin", "tensorflow.train.AdamOptimizer", "tensorflow.get_default_session", "tensorflow.get_default_session", "wgcsl.flatgrad", "numpy.random.randn", "numpy.random.randn"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.seed", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.function", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.function", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.flatgrad"], ["", "", "", "@", "U", ".", "in_session", "\n", "def", "test_MpiAdam", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "\n", "a", "=", "tf", ".", "Variable", "(", "np", ".", "random", ".", "randn", "(", "3", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "np", ".", "random", ".", "randn", "(", "2", ",", "5", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "a", ")", ")", "+", "tf", ".", "reduce_sum", "(", "tf", ".", "sin", "(", "b", ")", ")", "\n", "\n", "stepsize", "=", "1e-2", "\n", "update_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "stepsize", ")", ".", "minimize", "(", "loss", ")", "\n", "do_update", "=", "U", ".", "function", "(", "[", "]", ",", "loss", ",", "updates", "=", "[", "update_op", "]", ")", "\n", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "losslist_ref", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "l", "=", "do_update", "(", ")", "\n", "print", "(", "i", ",", "l", ")", "\n", "losslist_ref", ".", "append", "(", "l", ")", "\n", "\n", "\n", "\n", "", "tf", ".", "set_random_seed", "(", "0", ")", "\n", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "var_list", "=", "[", "a", ",", "b", "]", "\n", "lossandgrad", "=", "U", ".", "function", "(", "[", "]", ",", "[", "loss", ",", "U", ".", "flatgrad", "(", "loss", ",", "var_list", ")", "]", ")", "\n", "adam", "=", "MpiAdam", "(", "var_list", ")", "\n", "\n", "losslist_test", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "l", ",", "g", "=", "lossandgrad", "(", ")", "\n", "adam", ".", "update", "(", "g", ",", "stepsize", ")", "\n", "print", "(", "i", ",", "l", ")", "\n", "losslist_test", ".", "append", "(", "l", ")", "\n", "\n", "", "np", ".", "testing", ".", "assert_allclose", "(", "np", ".", "array", "(", "losslist_ref", ")", ",", "np", ".", "array", "(", "losslist_test", ")", ",", "atol", "=", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.__init__": [[12, 30], ["vec_env.VecEnv.__init__", "util.obs_space_info", "numpy.zeros", "numpy.zeros", "fn", "len", "numpy.zeros", "range", "tuple"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.util.obs_space_info"], ["def", "__init__", "(", "self", ",", "env_fns", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n\n        env_fns: iterable of callables      functions that build environments\n        \"\"\"", "\n", "self", ".", "envs", "=", "[", "fn", "(", ")", "for", "fn", "in", "env_fns", "]", "\n", "env", "=", "self", ".", "envs", "[", "0", "]", "\n", "VecEnv", ".", "__init__", "(", "self", ",", "len", "(", "env_fns", ")", ",", "env", ".", "observation_space", ",", "env", ".", "action_space", ")", "\n", "obs_space", "=", "env", ".", "observation_space", "\n", "self", ".", "keys", ",", "shapes", ",", "dtypes", "=", "obs_space_info", "(", "obs_space", ")", "\n", "\n", "self", ".", "buf_obs", "=", "{", "k", ":", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", "+", "tuple", "(", "shapes", "[", "k", "]", ")", ",", "dtype", "=", "dtypes", "[", "k", "]", ")", "for", "k", "in", "self", ".", "keys", "}", "\n", "self", ".", "buf_dones", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "self", ".", "buf_rews", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_envs", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "buf_infos", "=", "[", "{", "}", "for", "_", "in", "range", "(", "self", ".", "num_envs", ")", "]", "\n", "self", ".", "actions", "=", "None", "\n", "self", ".", "spec", "=", "self", ".", "envs", "[", "0", "]", ".", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.step_async": [[31, 44], ["len"], "methods", ["None"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "listify", "=", "True", "\n", "try", ":", "\n", "            ", "if", "len", "(", "actions", ")", "==", "self", ".", "num_envs", ":", "\n", "                ", "listify", "=", "False", "\n", "", "", "except", "TypeError", ":", "\n", "            ", "pass", "\n", "\n", "", "if", "not", "listify", ":", "\n", "            ", "self", ".", "actions", "=", "actions", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "num_envs", "==", "1", ",", "\"actions {} is either not a list or has a wrong size - cannot match to {} environments\"", ".", "format", "(", "actions", ",", "self", ".", "num_envs", ")", "\n", "self", ".", "actions", "=", "[", "actions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.step_wait": [[45, 57], ["range", "dummy_vec_env.DummyVecEnv.envs[].step", "dummy_vec_env.DummyVecEnv._save_obs", "dummy_vec_env.DummyVecEnv._obs_from_buf", "numpy.copy", "numpy.copy", "dummy_vec_env.DummyVecEnv.buf_infos.copy", "dummy_vec_env.DummyVecEnv.envs[].reset"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv._save_obs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv._obs_from_buf", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset"], ["", "", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "for", "e", "in", "range", "(", "self", ".", "num_envs", ")", ":", "\n", "            ", "action", "=", "self", ".", "actions", "[", "e", "]", "\n", "# if isinstance(self.envs[e].action_space, spaces.Discrete):", "\n", "#    action = int(action)", "\n", "\n", "obs", ",", "self", ".", "buf_rews", "[", "e", "]", ",", "self", ".", "buf_dones", "[", "e", "]", ",", "self", ".", "buf_infos", "[", "e", "]", "=", "self", ".", "envs", "[", "e", "]", ".", "step", "(", "action", ")", "\n", "if", "self", ".", "buf_dones", "[", "e", "]", ":", "\n", "                ", "obs", "=", "self", ".", "envs", "[", "e", "]", ".", "reset", "(", ")", "\n", "", "self", ".", "_save_obs", "(", "e", ",", "obs", ")", "\n", "", "return", "(", "self", ".", "_obs_from_buf", "(", ")", ",", "np", ".", "copy", "(", "self", ".", "buf_rews", ")", ",", "np", ".", "copy", "(", "self", ".", "buf_dones", ")", ",", "\n", "self", ".", "buf_infos", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.reset": [[58, 63], ["range", "dummy_vec_env.DummyVecEnv._obs_from_buf", "dummy_vec_env.DummyVecEnv.envs[].reset", "dummy_vec_env.DummyVecEnv._save_obs"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv._obs_from_buf", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv._save_obs"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "e", "in", "range", "(", "self", ".", "num_envs", ")", ":", "\n", "            ", "obs", "=", "self", ".", "envs", "[", "e", "]", ".", "reset", "(", ")", "\n", "self", ".", "_save_obs", "(", "e", ",", "obs", ")", "\n", "", "return", "self", ".", "_obs_from_buf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv._save_obs": [[64, 70], ["None"], "methods", ["None"], ["", "def", "_save_obs", "(", "self", ",", "e", ",", "obs", ")", ":", "\n", "        ", "for", "k", "in", "self", ".", "keys", ":", "\n", "            ", "if", "k", "is", "None", ":", "\n", "                ", "self", ".", "buf_obs", "[", "k", "]", "[", "e", "]", "=", "obs", "\n", "", "else", ":", "\n", "                ", "self", ".", "buf_obs", "[", "k", "]", "[", "e", "]", "=", "obs", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv._obs_from_buf": [[71, 73], ["util.dict_to_obs", "util.copy_obs_dict"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.util.dict_to_obs", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.util.copy_obs_dict"], ["", "", "", "def", "_obs_from_buf", "(", "self", ")", ":", "\n", "        ", "return", "dict_to_obs", "(", "copy_obs_dict", "(", "self", ".", "buf_obs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.get_images": [[74, 76], ["env.render"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render"], ["", "def", "get_images", "(", "self", ")", ":", "\n", "        ", "return", "[", "env", ".", "render", "(", "mode", "=", "'rgb_array'", ")", "for", "env", "in", "self", ".", "envs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render": [[77, 82], ["dummy_vec_env.DummyVecEnv.envs[].render", "super().render"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.dummy_vec_env.DummyVecEnv.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "if", "self", ".", "num_envs", "==", "1", ":", "\n", "            ", "return", "self", ".", "envs", "[", "0", "]", ".", "render", "(", "mode", "=", "mode", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "render", "(", "mode", "=", "mode", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util._Function.__init__": [[183, 193], ["tensorflow.group", "list", "[].split", "hasattr", "type", "len", "inp.name.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "outputs", ",", "updates", ",", "givens", ")", ":", "\n", "        ", "for", "inpt", "in", "inputs", ":", "\n", "            ", "if", "not", "hasattr", "(", "inpt", ",", "'make_feed_dict'", ")", "and", "not", "(", "type", "(", "inpt", ")", "is", "tf", ".", "Tensor", "and", "len", "(", "inpt", ".", "op", ".", "inputs", ")", "==", "0", ")", ":", "\n", "                ", "assert", "False", ",", "\"inputs should all be placeholders, constants, or have a make_feed_dict method\"", "\n", "", "", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "input_names", "=", "{", "inp", ".", "name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\":\"", ")", "[", "0", "]", ":", "inp", "for", "inp", "in", "inputs", "}", "\n", "updates", "=", "updates", "or", "[", "]", "\n", "self", ".", "update_group", "=", "tf", ".", "group", "(", "*", "updates", ")", "\n", "self", ".", "outputs_update", "=", "list", "(", "outputs", ")", "+", "[", "self", ".", "update_group", "]", "\n", "self", ".", "givens", "=", "{", "}", "if", "givens", "is", "None", "else", "givens", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util._Function._feed_input": [[194, 199], ["hasattr", "feed_dict.update", "tf_util.adjust_shape", "inpt.make_feed_dict"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.adjust_shape"], ["", "def", "_feed_input", "(", "self", ",", "feed_dict", ",", "inpt", ",", "value", ")", ":", "\n", "        ", "if", "hasattr", "(", "inpt", ",", "'make_feed_dict'", ")", ":", "\n", "            ", "feed_dict", ".", "update", "(", "inpt", ".", "make_feed_dict", "(", "value", ")", ")", "\n", "", "else", ":", "\n", "            ", "feed_dict", "[", "inpt", "]", "=", "adjust_shape", "(", "inpt", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util._Function.__call__": [[200, 213], ["zip", "kwargs.items", "len", "tf_util.adjust_shape", "tf_util._Function._feed_input", "tf_util._Function._feed_input", "get_session().run", "len", "len", "feed_dict.get", "tf_util.get_session"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.adjust_shape", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util._Function._feed_input", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util._Function._feed_input", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.adv_que.Advque.get", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.get_session"], ["", "", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "len", "(", "args", ")", "+", "len", "(", "kwargs", ")", "<=", "len", "(", "self", ".", "inputs", ")", ",", "\"Too many arguments provided\"", "\n", "feed_dict", "=", "{", "}", "\n", "# Update feed dict with givens.", "\n", "for", "inpt", "in", "self", ".", "givens", ":", "\n", "            ", "feed_dict", "[", "inpt", "]", "=", "adjust_shape", "(", "inpt", ",", "feed_dict", ".", "get", "(", "inpt", ",", "self", ".", "givens", "[", "inpt", "]", ")", ")", "\n", "# Update the args", "\n", "", "for", "inpt", ",", "value", "in", "zip", "(", "self", ".", "inputs", ",", "args", ")", ":", "\n", "            ", "self", ".", "_feed_input", "(", "feed_dict", ",", "inpt", ",", "value", ")", "\n", "", "for", "inpt_name", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_feed_input", "(", "feed_dict", ",", "self", ".", "input_names", "[", "inpt_name", "]", ",", "value", ")", "\n", "", "results", "=", "get_session", "(", ")", ".", "run", "(", "self", ".", "outputs_update", ",", "feed_dict", "=", "feed_dict", ")", "[", ":", "-", "1", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.SetFromFlat.__init__": [[240, 253], ["list", "numpy.sum", "tensorflow.placeholder", "zip", "tensorflow.group", "map", "tf_util.intprod", "assigns.append", "tf_util.intprod", "tensorflow.assign", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.intprod", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.intprod"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "        ", "assigns", "=", "[", "]", "\n", "shapes", "=", "list", "(", "map", "(", "var_shape", ",", "var_list", ")", ")", "\n", "total_size", "=", "np", ".", "sum", "(", "[", "intprod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", ")", "\n", "\n", "self", ".", "theta", "=", "theta", "=", "tf", ".", "placeholder", "(", "dtype", ",", "[", "total_size", "]", ")", "\n", "start", "=", "0", "\n", "assigns", "=", "[", "]", "\n", "for", "(", "shape", ",", "v", ")", "in", "zip", "(", "shapes", ",", "var_list", ")", ":", "\n", "            ", "size", "=", "intprod", "(", "shape", ")", "\n", "assigns", ".", "append", "(", "tf", ".", "assign", "(", "v", ",", "tf", ".", "reshape", "(", "theta", "[", "start", ":", "start", "+", "size", "]", ",", "shape", ")", ")", ")", "\n", "start", "+=", "size", "\n", "", "self", ".", "op", "=", "tf", ".", "group", "(", "*", "assigns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.SetFromFlat.__call__": [[254, 256], ["tensorflow.get_default_session().run", "tensorflow.get_default_session"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "theta", ")", ":", "\n", "        ", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "self", ".", "op", ",", "feed_dict", "=", "{", "self", ".", "theta", ":", "theta", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.GetFlat.__init__": [[258, 260], ["tensorflow.concat", "tensorflow.reshape", "tf_util.numel"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.numel"], ["    ", "def", "__init__", "(", "self", ",", "var_list", ")", ":", "\n", "        ", "self", ".", "op", "=", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "tf", ".", "reshape", "(", "v", ",", "[", "numel", "(", "v", ")", "]", ")", "for", "v", "in", "var_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.GetFlat.__call__": [[261, 263], ["tensorflow.get_default_session().run", "tensorflow.get_default_session"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "self", ".", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.switch": [[9, 25], ["copy.copy", "tensorflow.cond", "tf.cond.set_shape", "then_expression.get_shape", "tensorflow.cast"], "function", ["None"], ["def", "switch", "(", "condition", ",", "then_expression", ",", "else_expression", ")", ":", "\n", "    ", "\"\"\"Switches between two operations depending on a scalar value (int or bool).\n    Note that both `then_expression` and `else_expression`\n    should be symbolic tensors of the *same shape*.\n\n    # Arguments\n        condition: scalar tensor.\n        then_expression: TensorFlow operation.\n        else_expression: TensorFlow operation.\n    \"\"\"", "\n", "x_shape", "=", "copy", ".", "copy", "(", "then_expression", ".", "get_shape", "(", ")", ")", "\n", "x", "=", "tf", ".", "cond", "(", "tf", ".", "cast", "(", "condition", ",", "'bool'", ")", ",", "\n", "lambda", ":", "then_expression", ",", "\n", "lambda", ":", "else_expression", ")", "\n", "x", ".", "set_shape", "(", "x_shape", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.lrelu": [[30, 34], ["abs"], "function", ["None"], ["", "def", "lrelu", "(", "x", ",", "leak", "=", "0.2", ")", ":", "\n", "    ", "f1", "=", "0.5", "*", "(", "1", "+", "leak", ")", "\n", "f2", "=", "0.5", "*", "(", "1", "-", "leak", ")", "\n", "return", "f1", "*", "x", "+", "f2", "*", "abs", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.huber_loss": [[39, 45], ["tensorflow.where", "tensorflow.abs", "tensorflow.square", "tensorflow.abs"], "function", ["None"], ["", "def", "huber_loss", "(", "x", ",", "delta", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Reference: https://en.wikipedia.org/wiki/Huber_loss\"\"\"", "\n", "return", "tf", ".", "where", "(", "\n", "tf", ".", "abs", "(", "x", ")", "<", "delta", ",", "\n", "tf", ".", "square", "(", "x", ")", "*", "0.5", ",", "\n", "delta", "*", "(", "tf", ".", "abs", "(", "x", ")", "-", "0.5", "*", "delta", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.get_session": [[51, 57], ["tensorflow.get_default_session", "tf_util.make_session"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.make_session"], ["", "def", "get_session", "(", "config", "=", "None", ")", ":", "\n", "    ", "\"\"\"Get default session or create one with a given config\"\"\"", "\n", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "if", "sess", "is", "None", ":", "\n", "        ", "sess", "=", "make_session", "(", "config", "=", "config", ",", "make_default", "=", "True", ")", "\n", "", "return", "sess", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.make_session": [[58, 73], ["int", "tensorflow.ConfigProto", "tensorflow.InteractiveSession", "tensorflow.Session", "os.getenv", "multiprocessing.cpu_count"], "function", ["None"], ["", "def", "make_session", "(", "config", "=", "None", ",", "num_cpu", "=", "None", ",", "make_default", "=", "False", ",", "graph", "=", "None", ")", ":", "\n", "    ", "\"\"\"Returns a session that will use <num_cpu> CPU's only\"\"\"", "\n", "if", "num_cpu", "is", "None", ":", "\n", "        ", "num_cpu", "=", "int", "(", "os", ".", "getenv", "(", "'RCALL_NUM_CPU'", ",", "multiprocessing", ".", "cpu_count", "(", ")", ")", ")", "\n", "", "if", "config", "is", "None", ":", "\n", "        ", "config", "=", "tf", ".", "ConfigProto", "(", "\n", "allow_soft_placement", "=", "True", ",", "\n", "inter_op_parallelism_threads", "=", "num_cpu", ",", "\n", "intra_op_parallelism_threads", "=", "num_cpu", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "", "if", "make_default", ":", "\n", "        ", "return", "tf", ".", "InteractiveSession", "(", "config", "=", "config", ",", "graph", "=", "graph", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "Session", "(", "config", "=", "config", ",", "graph", "=", "graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.single_threaded_session": [[74, 77], ["tf_util.make_session"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.make_session"], ["", "", "def", "single_threaded_session", "(", ")", ":", "\n", "    ", "\"\"\"Returns a session which will only use a single CPU\"\"\"", "\n", "return", "make_session", "(", "num_cpu", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.in_session": [[78, 84], ["functools.wraps", "tensorflow.Session", "f"], "function", ["None"], ["", "def", "in_session", "(", "f", ")", ":", "\n", "    ", "@", "functools", ".", "wraps", "(", "f", ")", "\n", "def", "newfunc", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", ":", "\n", "            ", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "newfunc", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.initialize": [[87, 92], ["get_session().run", "ALREADY_INITIALIZED.update", "set", "tensorflow.variables_initializer", "tensorflow.global_variables", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.get_session"], ["def", "initialize", "(", ")", ":", "\n", "    ", "\"\"\"Initialize all the uninitialized variables in the global scope.\"\"\"", "\n", "new_variables", "=", "set", "(", "tf", ".", "global_variables", "(", ")", ")", "-", "ALREADY_INITIALIZED", "\n", "get_session", "(", ")", ".", "run", "(", "tf", ".", "variables_initializer", "(", "new_variables", ")", ")", "\n", "ALREADY_INITIALIZED", ".", "update", "(", "new_variables", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.normc_initializer": [[97, 103], ["numpy.random.randn().astype", "tensorflow.constant", "numpy.sqrt", "numpy.random.randn", "numpy.square().sum", "numpy.square"], "function", ["None"], ["", "def", "normc_initializer", "(", "std", "=", "1.0", ",", "axis", "=", "0", ")", ":", "\n", "    ", "def", "_initializer", "(", "shape", ",", "dtype", "=", "None", ",", "partition_info", "=", "None", ")", ":", "# pylint: disable=W0613", "\n", "        ", "out", "=", "np", ".", "random", ".", "randn", "(", "*", "shape", ")", ".", "astype", "(", "dtype", ".", "as_numpy_dtype", ")", "\n", "out", "*=", "std", "/", "np", ".", "sqrt", "(", "np", ".", "square", "(", "out", ")", ".", "sum", "(", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "tf", ".", "constant", "(", "out", ")", "\n", "", "return", "_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.conv2d": [[104, 132], ["tensorflow.variable_scope", "tf_util.intprod", "numpy.sqrt", "tensorflow.get_variable", "tensorflow.get_variable", "int", "tf_util.intprod", "tensorflow.random_uniform_initializer", "tensorflow.summary.image", "tensorflow.nn.conv2d", "tensorflow.zeros_initializer", "tensorflow.transpose", "x.get_shape", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.intprod", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.intprod", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.conv2d"], ["", "def", "conv2d", "(", "x", ",", "num_filters", ",", "name", ",", "filter_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "pad", "=", "\"SAME\"", ",", "dtype", "=", "tf", ".", "float32", ",", "collections", "=", "None", ",", "\n", "summary_tag", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "stride_shape", "=", "[", "1", ",", "stride", "[", "0", "]", ",", "stride", "[", "1", "]", ",", "1", "]", "\n", "filter_shape", "=", "[", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ",", "int", "(", "x", ".", "get_shape", "(", ")", "[", "3", "]", ")", ",", "num_filters", "]", "\n", "\n", "# there are \"num input feature maps * filter height * filter width\"", "\n", "# inputs to each hidden unit", "\n", "fan_in", "=", "intprod", "(", "filter_shape", "[", ":", "3", "]", ")", "\n", "# each unit in the lower layer receives a gradient from:", "\n", "# \"num output feature maps * filter height * filter width\" /", "\n", "#   pooling size", "\n", "fan_out", "=", "intprod", "(", "filter_shape", "[", ":", "2", "]", ")", "*", "num_filters", "\n", "# initialize weights with random weights", "\n", "w_bound", "=", "np", ".", "sqrt", "(", "6.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "w", "=", "tf", ".", "get_variable", "(", "\"W\"", ",", "filter_shape", ",", "dtype", ",", "tf", ".", "random_uniform_initializer", "(", "-", "w_bound", ",", "w_bound", ")", ",", "\n", "collections", "=", "collections", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "1", ",", "1", ",", "1", ",", "num_filters", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "collections", "=", "collections", ")", "\n", "\n", "if", "summary_tag", "is", "not", "None", ":", "\n", "            ", "tf", ".", "summary", ".", "image", "(", "summary_tag", ",", "\n", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "w", ",", "[", "filter_size", "[", "0", "]", ",", "filter_size", "[", "1", "]", ",", "-", "1", ",", "1", "]", ")", ",", "\n", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", ",", "\n", "max_images", "=", "10", ")", "\n", "\n", "", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "stride_shape", ",", "pad", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.function": [[137, 180], ["isinstance", "tf_util._Function", "isinstance", "tf_util._Function", "tf_util._Function", "outputs.values", "type", "zip", "_Function.", "outputs.keys", "_Function."], "function", ["None"], ["", "", "def", "function", "(", "inputs", ",", "outputs", ",", "updates", "=", "None", ",", "givens", "=", "None", ")", ":", "\n", "    ", "\"\"\"Just like Theano function. Take a bunch of tensorflow placeholders and expressions\n    computed based on those placeholders and produces f(inputs) -> outputs. Function f takes\n    values to be fed to the input's placeholders and produces the values of the expressions\n    in outputs.\n\n    Input values can be passed in the same order as inputs or can be provided as kwargs based\n    on placeholder name (passed to constructor or accessible via placeholder.op.name).\n\n    Example:\n        x = tf.placeholder(tf.int32, (), name=\"x\")\n        y = tf.placeholder(tf.int32, (), name=\"y\")\n        z = 3 * x + 2 * y\n        lin = function([x, y], z, givens={y: 0})\n\n        with single_threaded_session():\n            initialize()\n\n            assert lin(2) == 6\n            assert lin(x=3) == 9\n            assert lin(2, 2) == 10\n            assert lin(x=2, y=3) == 12\n\n    Parameters\n    ----------\n    inputs: [tf.placeholder, tf.constant, or object with make_feed_dict method]\n        list of input arguments\n    outputs: [tf.Variable] or tf.Variable\n        list of outputs or a single output to be returned from function. Returned\n        value will also have the same shape.\n    updates: [tf.Operation] or tf.Operation\n        list of update functions or single update function that will be run whenever\n        the function is called. The return is ignored.\n\n    \"\"\"", "\n", "if", "isinstance", "(", "outputs", ",", "list", ")", ":", "\n", "        ", "return", "_Function", "(", "inputs", ",", "outputs", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "", "elif", "isinstance", "(", "outputs", ",", "(", "dict", ",", "collections", ".", "OrderedDict", ")", ")", ":", "\n", "        ", "f", "=", "_Function", "(", "inputs", ",", "outputs", ".", "values", "(", ")", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "return", "lambda", "*", "args", ",", "**", "kwargs", ":", "type", "(", "outputs", ")", "(", "zip", "(", "outputs", ".", "keys", "(", ")", ",", "f", "(", "*", "args", ",", "**", "kwargs", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "f", "=", "_Function", "(", "inputs", ",", "[", "outputs", "]", ",", "updates", ",", "givens", "=", "givens", ")", "\n", "return", "lambda", "*", "args", ",", "**", "kwargs", ":", "f", "(", "*", "args", ",", "**", "kwargs", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.var_shape": [[218, 223], ["x.get_shape().as_list", "all", "x.get_shape", "isinstance"], "function", ["None"], ["", "", "def", "var_shape", "(", "x", ")", ":", "\n", "    ", "out", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "assert", "all", "(", "isinstance", "(", "a", ",", "int", ")", "for", "a", "in", "out", ")", ",", "\"shape function assumes that shape is fully known\"", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.numel": [[224, 226], ["tf_util.intprod", "tf_util.var_shape"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.intprod", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.var_shape"], ["", "def", "numel", "(", "x", ")", ":", "\n", "    ", "return", "intprod", "(", "var_shape", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.intprod": [[227, 229], ["int", "numpy.prod"], "function", ["None"], ["", "def", "intprod", "(", "x", ")", ":", "\n", "    ", "return", "int", "(", "np", ".", "prod", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.flatgrad": [[230, 237], ["tensorflow.gradients", "tensorflow.concat", "tensorflow.clip_by_norm", "tensorflow.reshape", "zip", "tensorflow.zeros_like", "tf_util.numel"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.numel"], ["", "def", "flatgrad", "(", "loss", ",", "var_list", ",", "clip_norm", "=", "None", ")", ":", "\n", "    ", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "var_list", ")", "\n", "if", "clip_norm", "is", "not", "None", ":", "\n", "        ", "grads", "=", "[", "tf", ".", "clip_by_norm", "(", "grad", ",", "clip_norm", "=", "clip_norm", ")", "for", "grad", "in", "grads", "]", "\n", "", "return", "tf", ".", "concat", "(", "axis", "=", "0", ",", "values", "=", "[", "\n", "tf", ".", "reshape", "(", "grad", "if", "grad", "is", "not", "None", "else", "tf", ".", "zeros_like", "(", "v", ")", ",", "[", "numel", "(", "v", ")", "]", ")", "\n", "for", "(", "v", ",", "grad", ")", "in", "zip", "(", "var_list", ",", "grads", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.flattenallbut0": [[264, 266], ["tensorflow.reshape", "tf_util.intprod", "x.get_shape().as_list", "x.get_shape"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.intprod"], ["", "", "def", "flattenallbut0", "(", "x", ")", ":", "\n", "    ", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "intprod", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.get_placeholder": [[273, 284], ["tensorflow.placeholder", "tensorflow.get_default_graph"], "function", ["None"], ["def", "get_placeholder", "(", "name", ",", "dtype", ",", "shape", ")", ":", "\n", "    ", "if", "name", "in", "_PLACEHOLDER_CACHE", ":", "\n", "        ", "out", ",", "dtype1", ",", "shape1", "=", "_PLACEHOLDER_CACHE", "[", "name", "]", "\n", "if", "out", ".", "graph", "==", "tf", ".", "get_default_graph", "(", ")", ":", "\n", "            ", "assert", "dtype1", "==", "dtype", "and", "shape1", "==", "shape", ",", "'Placeholder with name {} has already been registered and has shape {}, different from requested {}'", ".", "format", "(", "name", ",", "shape1", ",", "shape", ")", "\n", "return", "out", "\n", "\n", "", "", "out", "=", "tf", ".", "placeholder", "(", "dtype", "=", "dtype", ",", "shape", "=", "shape", ",", "name", "=", "name", ")", "\n", "_PLACEHOLDER_CACHE", "[", "name", "]", "=", "(", "out", ",", "dtype", ",", "shape", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.get_placeholder_cached": [[285, 287], ["None"], "function", ["None"], ["", "def", "get_placeholder_cached", "(", "name", ")", ":", "\n", "    ", "return", "_PLACEHOLDER_CACHE", "[", "name", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.display_var_info": [[294, 306], ["logger.info", "numpy.prod", "logger.info", "v.shape.as_list", "str", "len"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.info", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.info"], ["", "def", "display_var_info", "(", "vars", ")", ":", "\n", "    ", "from", "wgcsl", ".", "common", "import", "logger", "\n", "count_params", "=", "0", "\n", "for", "v", "in", "vars", ":", "\n", "        ", "name", "=", "v", ".", "name", "\n", "if", "\"/Adam\"", "in", "name", "or", "\"beta1_power\"", "in", "name", "or", "\"beta2_power\"", "in", "name", ":", "continue", "\n", "v_params", "=", "np", ".", "prod", "(", "v", ".", "shape", ".", "as_list", "(", ")", ")", "\n", "count_params", "+=", "v_params", "\n", "if", "\"/b:\"", "in", "name", "or", "\"/bias\"", "in", "name", ":", "continue", "# Wx+b, bias is not interesting to look at => count params, but not print", "\n", "logger", ".", "info", "(", "\"   %s%s %i params %s\"", "%", "(", "name", ",", "\" \"", "*", "(", "55", "-", "len", "(", "name", ")", ")", ",", "v_params", ",", "str", "(", "v", ".", "shape", ")", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Total model parameters: %0.2f million\"", "%", "(", "count_params", "*", "1e-6", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.get_available_gpus": [[308, 320], ["device_lib.list_local_devices", "tf_util.get_session"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.get_session"], ["", "def", "get_available_gpus", "(", "session_config", "=", "None", ")", ":", "\n", "# based on recipe from https://stackoverflow.com/a/38580201", "\n", "\n", "# Unless we allocate a session here, subsequent attempts to create one", "\n", "# will ignore our custom config (in particular, allow_growth=True will have", "\n", "# no effect).", "\n", "    ", "if", "session_config", "is", "None", ":", "\n", "        ", "session_config", "=", "get_session", "(", ")", ".", "_config", "\n", "\n", "", "from", "tensorflow", ".", "python", ".", "client", "import", "device_lib", "\n", "local_device_protos", "=", "device_lib", ".", "list_local_devices", "(", "session_config", ")", "\n", "return", "[", "x", ".", "name", "for", "x", "in", "local_device_protos", "if", "x", ".", "device_type", "==", "'GPU'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.load_state": [[325, 331], ["logger.warn", "tensorflow.train.Saver", "tf.train.Saver.restore", "tf_util.get_session", "tensorflow.get_default_session"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.warn", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.get_session"], ["", "def", "load_state", "(", "fname", ",", "sess", "=", "None", ")", ":", "\n", "    ", "from", "wgcsl", ".", "common", "import", "logger", "\n", "logger", ".", "warn", "(", "'load_state method is deprecated, please use load_variables instead'", ")", "\n", "sess", "=", "sess", "or", "get_session", "(", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "tf", ".", "get_default_session", "(", ")", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.save_state": [[332, 341], ["logger.warn", "os.path.dirname", "any", "tensorflow.train.Saver", "tf.train.Saver.save", "tf_util.get_session", "os.makedirs", "tensorflow.get_default_session"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.warn", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.wgcsl.WGCSL.save", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.get_session"], ["", "def", "save_state", "(", "fname", ",", "sess", "=", "None", ")", ":", "\n", "    ", "from", "wgcsl", ".", "common", "import", "logger", "\n", "logger", ".", "warn", "(", "'save_state method is deprecated, please use save_variables instead'", ")", "\n", "sess", "=", "sess", "or", "get_session", "(", ")", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "fname", ")", "\n", "if", "any", "(", "dirname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ",", "exist_ok", "=", "True", ")", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "save", "(", "tf", ".", "get_default_session", "(", ")", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.save_variables": [[345, 356], ["sess.run", "os.path.dirname", "any", "joblib.dump", "tf_util.get_session", "tensorflow.get_collection", "os.makedirs", "zip"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.get_session"], ["", "def", "save_variables", "(", "save_path", ",", "variables", "=", "None", ",", "sess", "=", "None", ")", ":", "\n", "    ", "import", "joblib", "\n", "sess", "=", "sess", "or", "get_session", "(", ")", "\n", "variables", "=", "variables", "or", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ")", "\n", "\n", "ps", "=", "sess", ".", "run", "(", "variables", ")", "\n", "save_dict", "=", "{", "v", ".", "name", ":", "value", "for", "v", ",", "value", "in", "zip", "(", "variables", ",", "ps", ")", "}", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "save_path", ")", "\n", "if", "any", "(", "dirname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ",", "exist_ok", "=", "True", ")", "\n", "", "joblib", ".", "dump", "(", "save_dict", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.load_variables": [[357, 373], ["joblib.load", "isinstance", "sess.run", "tf_util.get_session", "tensorflow.get_collection", "os.path.expanduser", "zip", "len", "len", "restores.append", "restores.append", "v.assign", "v.assign"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.replay_buffer.ReplayBuffer.load", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.get_session"], ["", "def", "load_variables", "(", "load_path", ",", "variables", "=", "None", ",", "sess", "=", "None", ")", ":", "\n", "    ", "import", "joblib", "\n", "sess", "=", "sess", "or", "get_session", "(", ")", "\n", "variables", "=", "variables", "or", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ")", "\n", "\n", "loaded_params", "=", "joblib", ".", "load", "(", "os", ".", "path", ".", "expanduser", "(", "load_path", ")", ")", "\n", "restores", "=", "[", "]", "\n", "if", "isinstance", "(", "loaded_params", ",", "list", ")", ":", "\n", "        ", "assert", "len", "(", "loaded_params", ")", "==", "len", "(", "variables", ")", ",", "'number of variables loaded mismatches len(variables)'", "\n", "for", "d", ",", "v", "in", "zip", "(", "loaded_params", ",", "variables", ")", ":", "\n", "            ", "restores", ".", "append", "(", "v", ".", "assign", "(", "d", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "v", "in", "variables", ":", "\n", "            ", "restores", ".", "append", "(", "v", ".", "assign", "(", "loaded_params", "[", "v", ".", "name", "]", ")", ")", "\n", "\n", "", "", "sess", ".", "run", "(", "restores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.adjust_shape": [[377, 402], ["isinstance", "tf_util._check_shape", "numpy.reshape", "numpy.array", "isinstance", "isinstance", "placeholder.shape.as_list"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util._check_shape"], ["", "def", "adjust_shape", "(", "placeholder", ",", "data", ")", ":", "\n", "    ", "'''\n    adjust shape of the data to the shape of the placeholder if possible.\n    If shape is incompatible, AssertionError is thrown\n\n    Parameters:\n        placeholder     tensorflow input placeholder\n\n        data            input data to be (potentially) reshaped to be fed into placeholder\n\n    Returns:\n        reshaped data\n    '''", "\n", "\n", "if", "not", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", "and", "not", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "        ", "return", "data", "\n", "", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "        ", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "\n", "", "placeholder_shape", "=", "[", "x", "or", "-", "1", "for", "x", "in", "placeholder", ".", "shape", ".", "as_list", "(", ")", "]", "\n", "\n", "assert", "_check_shape", "(", "placeholder_shape", ",", "data", ".", "shape", ")", ",", "'Shape of data {} is not compatible with shape of the placeholder {}'", ".", "format", "(", "data", ".", "shape", ",", "placeholder_shape", ")", "\n", "\n", "return", "np", ".", "reshape", "(", "data", ",", "placeholder_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util._check_shape": [[404, 417], ["tf_util._squeeze_shape", "tf_util._squeeze_shape", "enumerate"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util._squeeze_shape", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util._squeeze_shape"], ["", "def", "_check_shape", "(", "placeholder_shape", ",", "data_shape", ")", ":", "\n", "    ", "''' check if two shapes are compatible (i.e. differ only by dimensions of size 1, or by the batch dimension)'''", "\n", "\n", "return", "True", "\n", "squeezed_placeholder_shape", "=", "_squeeze_shape", "(", "placeholder_shape", ")", "\n", "squeezed_data_shape", "=", "_squeeze_shape", "(", "data_shape", ")", "\n", "\n", "for", "i", ",", "s_data", "in", "enumerate", "(", "squeezed_data_shape", ")", ":", "\n", "        ", "s_placeholder", "=", "squeezed_placeholder_shape", "[", "i", "]", "\n", "if", "s_placeholder", "!=", "-", "1", "and", "s_data", "!=", "s_placeholder", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util._squeeze_shape": [[419, 421], ["None"], "function", ["None"], ["", "def", "_squeeze_shape", "(", "shape", ")", ":", "\n", "    ", "return", "[", "x", "for", "x", "in", "shape", "if", "x", "!=", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.tf_util.launch_tensorboard_in_background": [[426, 444], ["subprocess.Popen"], "function", ["None"], ["", "def", "launch_tensorboard_in_background", "(", "log_dir", ")", ":", "\n", "    ", "'''\n    To log the Tensorflow graph when using rl-algs\n    algorithms, you can run the following code\n    in your main script:\n        import threading, time\n        def start_tensorboard(session):\n            time.sleep(10) # Wait until graph is setup\n            tb_path = osp.join(logger.get_dir(), 'tb')\n            summary_writer = tf.summary.FileWriter(tb_path, graph=session.graph)\n            summary_op = tf.summary.merge_all()\n            launch_tensorboard_in_background(tb_path)\n        session = tf.get_default_session()\n        t = threading.Thread(target=start_tensorboard, args=([session]))\n        t.start()\n    '''", "\n", "import", "subprocess", "\n", "subprocess", ".", "Popen", "(", "[", "'tensorboard'", ",", "'--logdir'", ",", "log_dir", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.util.zipsame": [[12, 16], ["len", "all", "zip", "len"], "function", ["None"], ["        ", "logger", ".", "configure", "(", "**", "kwargs", ")", "\n", "\n", "\n", "", "", "def", "init_logger", "(", "args", ")", ":", "\n", "    ", "if", "MPI", "is", "None", "or", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.util.set_global_seeds": [[18, 33], ["numpy.random.seed", "random.seed", "MPI.COMM_WORLD.Get_rank", "tf.set_random_seed"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.seed", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.envs.mujoco_env.MujocoEnv.seed"], ["configure_logger", "(", "args", ".", "log_path", ")", "\n", "", "else", ":", "\n", "        ", "rank", "=", "MPI", ".", "COMM_WORLD", ".", "Get_rank", "(", ")", "\n", "configure_logger", "(", "args", ".", "log_path", ",", "format_strs", "=", "[", "]", ")", "\n", "", "return", "rank", "\n", "", ""]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.util.copy_obs_dict": [[35, 40], ["numpy.copy", "obs.items"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.util.dict_to_obs": [[42, 50], ["set", "obs_dict.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.util.obs_space_info": [[52, 78], ["isinstance", "subspaces.items", "isinstance", "isinstance", "keys.append", "isinstance", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.util.obs_to_dict": [[80, 87], ["isinstance"], "function", ["None"], []], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.__init__": [[14, 34], ["gym.core.Wrapper.__init__", "time.time", "monitor.ResultsWriter", "time.time"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "filename", ",", "allow_early_resets", "=", "False", ",", "reset_keywords", "=", "(", ")", ",", "info_keywords", "=", "(", ")", ")", ":", "\n", "        ", "Wrapper", ".", "__init__", "(", "self", ",", "env", "=", "env", ")", "\n", "self", ".", "tstart", "=", "time", ".", "time", "(", ")", "\n", "if", "filename", ":", "\n", "            ", "self", ".", "results_writer", "=", "ResultsWriter", "(", "filename", ",", "\n", "header", "=", "{", "\"t_start\"", ":", "time", ".", "time", "(", ")", ",", "'env_id'", ":", "env", ".", "spec", "and", "env", ".", "spec", ".", "id", "}", ",", "\n", "extra_keys", "=", "reset_keywords", "+", "info_keywords", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "results_writer", "=", "None", "\n", "", "self", ".", "reset_keywords", "=", "reset_keywords", "\n", "self", ".", "info_keywords", "=", "info_keywords", "\n", "self", ".", "allow_early_resets", "=", "allow_early_resets", "\n", "self", ".", "rewards", "=", "None", "\n", "self", ".", "needs_reset", "=", "True", "\n", "self", ".", "episode_rewards", "=", "[", "]", "\n", "self", ".", "episode_lengths", "=", "[", "]", "\n", "self", ".", "episode_times", "=", "[", "]", "\n", "self", ".", "total_steps", "=", "0", "\n", "self", ".", "current_reset_info", "=", "{", "}", "# extra info about the current episode, that was passed in during reset()", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset": [[35, 43], ["monitor.Monitor.reset_state", "monitor.Monitor.env.reset", "kwargs.get", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset_state", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.algo.adv_que.Advque.get"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "reset_state", "(", ")", "\n", "for", "k", "in", "self", ".", "reset_keywords", ":", "\n", "            ", "v", "=", "kwargs", ".", "get", "(", "k", ")", "\n", "if", "v", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Expected you to pass kwarg %s into reset'", "%", "k", ")", "\n", "", "self", ".", "current_reset_info", "[", "k", "]", "=", "v", "\n", "", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.reset_state": [[44, 49], ["RuntimeError"], "methods", ["None"], ["", "def", "reset_state", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "allow_early_resets", "and", "not", "self", ".", "needs_reset", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Tried to reset an environment before done. If you want to allow early resets, wrap your env with Monitor(env, path, allow_early_resets=True)\"", ")", "\n", "", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "needs_reset", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step": [[51, 57], ["monitor.Monitor.env.step", "monitor.Monitor.update", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.step", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "needs_reset", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Tried to step environment that needs reset\"", ")", "\n", "", "ob", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "self", ".", "update", "(", "ob", ",", "rew", ",", "done", ",", "info", ")", "\n", "return", "(", "ob", ",", "rew", ",", "done", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update": [[58, 78], ["monitor.Monitor.rewards.append", "sum", "len", "monitor.Monitor.episode_rewards.append", "monitor.Monitor.episode_lengths.append", "monitor.Monitor.episode_times.append", "epinfo.update", "isinstance", "isinstance", "round", "round", "monitor.Monitor.results_writer.write_row", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.update", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.write_row"], ["", "def", "update", "(", "self", ",", "ob", ",", "rew", ",", "done", ",", "info", ")", ":", "\n", "        ", "self", ".", "rewards", ".", "append", "(", "rew", ")", "\n", "if", "done", ":", "\n", "            ", "self", ".", "needs_reset", "=", "True", "\n", "eprew", "=", "sum", "(", "self", ".", "rewards", ")", "\n", "eplen", "=", "len", "(", "self", ".", "rewards", ")", "\n", "epinfo", "=", "{", "\"r\"", ":", "round", "(", "eprew", ",", "6", ")", ",", "\"l\"", ":", "eplen", ",", "\"t\"", ":", "round", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ",", "6", ")", "}", "\n", "for", "k", "in", "self", ".", "info_keywords", ":", "\n", "                ", "epinfo", "[", "k", "]", "=", "info", "[", "k", "]", "\n", "", "self", ".", "episode_rewards", ".", "append", "(", "eprew", ")", "\n", "self", ".", "episode_lengths", ".", "append", "(", "eplen", ")", "\n", "self", ".", "episode_times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tstart", ")", "\n", "epinfo", ".", "update", "(", "self", ".", "current_reset_info", ")", "\n", "if", "self", ".", "results_writer", ":", "\n", "                ", "self", ".", "results_writer", ".", "write_row", "(", "epinfo", ")", "\n", "", "assert", "isinstance", "(", "info", ",", "dict", ")", "\n", "if", "isinstance", "(", "info", ",", "dict", ")", ":", "\n", "                ", "info", "[", "'episode'", "]", "=", "epinfo", "\n", "\n", "", "", "self", ".", "total_steps", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close": [[79, 83], ["super().close", "monitor.Monitor.f.close"], "methods", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close", "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "super", "(", "Monitor", ",", "self", ")", ".", "close", "(", ")", "\n", "if", "self", ".", "f", "is", "not", "None", ":", "\n", "            ", "self", ".", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.get_total_steps": [[84, 86], ["None"], "methods", ["None"], ["", "", "def", "get_total_steps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.get_episode_rewards": [[87, 89], ["None"], "methods", ["None"], ["", "def", "get_episode_rewards", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episode_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.get_episode_lengths": [[90, 92], ["None"], "methods", ["None"], ["", "def", "get_episode_lengths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episode_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.Monitor.get_episode_times": [[93, 95], ["None"], "methods", ["None"], ["", "def", "get_episode_times", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "episode_times", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.__init__": [[101, 116], ["open", "isinstance", "monitor.ResultsWriter.f.write", "csv.DictWriter", "monitor.ResultsWriter.logger.writeheader", "monitor.ResultsWriter.f.flush", "os.join.endswith", "os.isdir", "os.join", "json.dumps", "tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ",", "header", "=", "''", ",", "extra_keys", "=", "(", ")", ")", ":", "\n", "        ", "self", ".", "extra_keys", "=", "extra_keys", "\n", "assert", "filename", "is", "not", "None", "\n", "if", "not", "filename", ".", "endswith", "(", "Monitor", ".", "EXT", ")", ":", "\n", "            ", "if", "osp", ".", "isdir", "(", "filename", ")", ":", "\n", "                ", "filename", "=", "osp", ".", "join", "(", "filename", ",", "Monitor", ".", "EXT", ")", "\n", "", "else", ":", "\n", "                ", "filename", "=", "filename", "+", "\".\"", "+", "Monitor", ".", "EXT", "\n", "", "", "self", ".", "f", "=", "open", "(", "filename", ",", "\"wt\"", ")", "\n", "if", "isinstance", "(", "header", ",", "dict", ")", ":", "\n", "            ", "header", "=", "'# {} \\n'", ".", "format", "(", "json", ".", "dumps", "(", "header", ")", ")", "\n", "", "self", ".", "f", ".", "write", "(", "header", ")", "\n", "self", ".", "logger", "=", "csv", ".", "DictWriter", "(", "self", ".", "f", ",", "fieldnames", "=", "(", "'r'", ",", "'l'", ",", "'t'", ")", "+", "tuple", "(", "extra_keys", ")", ")", "\n", "self", ".", "logger", ".", "writeheader", "(", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.ResultsWriter.write_row": [[117, 121], ["monitor.ResultsWriter.logger.writerow", "monitor.ResultsWriter.f.flush"], "methods", ["None"], ["", "def", "write_row", "(", "self", ",", "epinfo", ")", ":", "\n", "        ", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "writerow", "(", "epinfo", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.get_monitor_files": [[123, 125], ["glob.glob", "os.join"], "function", ["None"], ["", "", "", "def", "get_monitor_files", "(", "dir", ")", ":", "\n", "    ", "return", "glob", "(", "osp", ".", "join", "(", "dir", ",", "\"*\"", "+", "Monitor", ".", "EXT", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.monitor.load_results": [[126, 164], ["pandas.concat", "pandas.DataFrame.sort_values", "pandas.DataFrame.reset_index", "min", "glob.glob", "glob.glob", "monitor.LoadMonitorResultsError", "dfs.append", "os.join", "os.join", "open", "fname.endswith", "fh.readline", "json.loads", "pandas.read_csv", "headers.append", "fname.endswith", "fh.readlines", "json.loads", "headers.append", "pandas.DataFrame", "json.loads", "episodes.append"], "function", ["home.repos.pwc.inspect_result.yangrui2015_awgcsl.common.logger.read_csv"], ["", "def", "load_results", "(", "dir", ")", ":", "\n", "    ", "import", "pandas", "\n", "monitor_files", "=", "(", "\n", "glob", "(", "osp", ".", "join", "(", "dir", ",", "\"*monitor.json\"", ")", ")", "+", "\n", "glob", "(", "osp", ".", "join", "(", "dir", ",", "\"*monitor.csv\"", ")", ")", ")", "# get both csv and (old) json files", "\n", "if", "not", "monitor_files", ":", "\n", "        ", "raise", "LoadMonitorResultsError", "(", "\"no monitor files of the form *%s found in %s\"", "%", "(", "Monitor", ".", "EXT", ",", "dir", ")", ")", "\n", "", "dfs", "=", "[", "]", "\n", "headers", "=", "[", "]", "\n", "for", "fname", "in", "monitor_files", ":", "\n", "        ", "with", "open", "(", "fname", ",", "'rt'", ")", "as", "fh", ":", "\n", "            ", "if", "fname", ".", "endswith", "(", "'csv'", ")", ":", "\n", "                ", "firstline", "=", "fh", ".", "readline", "(", ")", "\n", "if", "not", "firstline", ":", "\n", "                    ", "continue", "\n", "", "assert", "firstline", "[", "0", "]", "==", "'#'", "\n", "header", "=", "json", ".", "loads", "(", "firstline", "[", "1", ":", "]", ")", "\n", "df", "=", "pandas", ".", "read_csv", "(", "fh", ",", "index_col", "=", "None", ")", "\n", "headers", ".", "append", "(", "header", ")", "\n", "", "elif", "fname", ".", "endswith", "(", "'json'", ")", ":", "# Deprecated json format", "\n", "                ", "episodes", "=", "[", "]", "\n", "lines", "=", "fh", ".", "readlines", "(", ")", "\n", "header", "=", "json", ".", "loads", "(", "lines", "[", "0", "]", ")", "\n", "headers", ".", "append", "(", "header", ")", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "                    ", "episode", "=", "json", ".", "loads", "(", "line", ")", "\n", "episodes", ".", "append", "(", "episode", ")", "\n", "", "df", "=", "pandas", ".", "DataFrame", "(", "episodes", ")", "\n", "", "else", ":", "\n", "                ", "assert", "0", ",", "'unreachable'", "\n", "", "df", "[", "'t'", "]", "+=", "header", "[", "'t_start'", "]", "\n", "", "dfs", ".", "append", "(", "df", ")", "\n", "", "df", "=", "pandas", ".", "concat", "(", "dfs", ")", "\n", "df", ".", "sort_values", "(", "'t'", ",", "inplace", "=", "True", ")", "\n", "df", ".", "reset_index", "(", "inplace", "=", "True", ")", "\n", "df", "[", "'t'", "]", "-=", "min", "(", "header", "[", "'t_start'", "]", "for", "header", "in", "headers", ")", "\n", "df", ".", "headers", "=", "headers", "# HACK to preserve backwards compatibility", "\n", "return", "df", "\n", "", ""]]}