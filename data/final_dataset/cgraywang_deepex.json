{"home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.Folder": [[16, 18], ["PATH.split"], "function", ["None"], ["def", "Folder", "(", "PATH", ")", ":", "\n", "    ", "return", "\"/\"", ".", "join", "(", "PATH", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", "+", "\"/\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.File": [[19, 21], ["PATH.split"], "function", ["None"], ["", "def", "File", "(", "PATH", ")", ":", "\n", "    ", "return", "PATH", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.Prefix": [[22, 24], ["PATH.split"], "function", ["None"], ["", "def", "Prefix", "(", "PATH", ")", ":", "\n", "    ", "return", "\".\"", ".", "join", "(", "PATH", ".", "split", "(", "'.'", ")", "[", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.Suffix": [[25, 27], ["PATH.split"], "function", ["None"], ["", "def", "Suffix", "(", "PATH", ")", ":", "\n", "    ", "return", "PATH", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.Create": [[28, 30], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "Create", "(", "PATH", ")", ":", "\n", "    ", "None", "if", "os", ".", "path", ".", "exists", "(", "PATH", ")", "else", "os", ".", "makedirs", "(", "PATH", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.Delete": [[31, 33], ["os.path.exists", "shutil.rmtree"], "function", ["None"], ["", "def", "Delete", "(", "PATH", ")", ":", "\n", "    ", "shutil", ".", "rmtree", "(", "PATH", ")", "if", "os", ".", "path", ".", "exists", "(", "PATH", ")", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.Clear": [[34, 36], ["os.makedirs", "os.path.exists", "shutil.rmtree"], "function", ["None"], ["", "def", "Clear", "(", "PATH", ")", ":", "\n", "    ", "shutil", ".", "rmtree", "(", "PATH", ")", "if", "os", ".", "path", ".", "exists", "(", "PATH", ")", "else", "None", ";", "os", ".", "makedirs", "(", "PATH", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.SaveJSON": [[38, 46], ["jsonlines.open", "open", "json.dump", "f.write"], "function", ["None"], ["", "def", "SaveJSON", "(", "object", ",", "FILE", ",", "jsonl", "=", "False", ",", "indent", "=", "None", ")", ":", "\n", "    ", "if", "jsonl", ":", "\n", "        ", "with", "jsonlines", ".", "open", "(", "FILE", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "data", "in", "object", ":", "\n", "                ", "f", ".", "write", "(", "data", ")", "\n", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "FILE", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "object", ",", "f", ",", "indent", "=", "indent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.PrettifyJSON": [[47, 53], ["os.listdir", "utils.SaveJSON", "utils.SaveJSON", "utils.LoadJSON", "utils.LoadJSON"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.SaveJSON", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.SaveJSON", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.LoadJSON", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.LoadJSON"], ["", "", "", "def", "PrettifyJSON", "(", "PATH", ")", ":", "\n", "    ", "if", "PATH", "[", "-", "1", "]", "==", "'/'", ":", "\n", "        ", "for", "FILE", "in", "os", ".", "listdir", "(", "PATH", ")", ":", "\n", "            ", "SaveJSON", "(", "LoadJSON", "(", "PATH", "+", "FILE", ")", ",", "PATH", "+", "FILE", ",", "indent", "=", "4", ")", "\n", "", "", "else", ":", "\n", "        ", "SaveJSON", "(", "LoadJSON", "(", "PATH", ")", ",", "PATH", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.LoadJSON": [[54, 61], ["open", "open", "json.load", "jsonlines.Reader"], "function", ["None"], ["", "", "def", "LoadJSON", "(", "FILE", ",", "jsonl", "=", "False", ")", ":", "\n", "    ", "if", "jsonl", ":", "\n", "        ", "with", "open", "(", "FILE", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "return", "[", "data", "for", "data", "in", "jsonlines", ".", "Reader", "(", "f", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "FILE", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "return", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.View": [[62, 64], ["print", "str", "len", "str", "str"], "function", ["None"], ["", "", "", "def", "View", "(", "something", ",", "length", "=", "4096", ")", ":", "\n", "    ", "print", "(", "str", "(", "something", ")", "[", ":", "length", "]", "+", "\" ...\"", "if", "len", "(", "str", "(", "something", ")", ")", ">", "length", "+", "3", "else", "str", "(", "something", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.ViewS": [[65, 67], ["str", "len", "str", "str"], "function", ["None"], ["", "def", "ViewS", "(", "something", ",", "length", "=", "4096", ")", ":", "\n", "    ", "return", "(", "str", "(", "something", ")", "[", ":", "length", "]", "+", "\" ...\"", "if", "len", "(", "str", "(", "something", ")", ")", ">", "length", "+", "3", "else", "str", "(", "something", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.ViewDict": [[68, 75], ["print", "enumerate", "print", "something.items", "print", "print", "utils.ViewS", "str"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.ViewS"], ["", "def", "ViewDict", "(", "something", ",", "length", "=", "4096", ",", "limit", "=", "512", ")", ":", "\n", "    ", "print", "(", "\"{\"", ")", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "something", ".", "items", "(", ")", ")", ":", "\n", "        ", "print", "(", "\"\\t\"", "+", "str", "(", "item", "[", "0", "]", ")", "+", "\": \"", "+", "(", "ViewS", "(", "item", "[", "1", "]", ")", "+", "','", ")", ")", "\n", "if", "i", ">=", "limit", ":", "\n", "            ", "print", "(", "\"\\t...\"", ")", ";", "break", "\n", "", "", "print", "(", "\"}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.ViewDictS": [[76, 83], ["enumerate", "something.items", "utils.ViewS", "str"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.ViewS"], ["", "def", "ViewDictS", "(", "something", ",", "length", "=", "4096", ",", "limit", "=", "512", ")", ":", "\n", "    ", "s", "=", "\"{\\n\"", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "something", ".", "items", "(", ")", ")", ":", "\n", "        ", "s", "+=", "\"\\t\"", "+", "str", "(", "item", "[", "0", "]", ")", "+", "\": \"", "+", "(", "ViewS", "(", "item", "[", "1", "]", ")", "+", "','", ")", "+", "\"\\n\"", "\n", "if", "i", ">=", "limit", ":", "\n", "            ", "s", "+=", "\"\\t...\\n\"", ";", "break", "\n", "", "", "s", "+=", "\"}\\n\"", ";", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.ViewJSON": [[84, 86], ["print", "utils.ViewS", "json.dumps"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.ViewS"], ["", "def", "ViewJSON", "(", "json_dict", ",", "length", "=", "4096", ")", ":", "\n", "    ", "print", "(", "ViewS", "(", "json", ".", "dumps", "(", "json_dict", ",", "indent", "=", "4", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.ViewJSONS": [[87, 89], ["utils.ViewS", "json.dumps"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.ViewS"], ["", "def", "ViewJSONS", "(", "json_dict", ",", "length", "=", "4096", ")", ":", "\n", "    ", "return", "ViewS", "(", "json", ".", "dumps", "(", "json_dict", ",", "indent", "=", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.DATE": [[90, 92], ["time.strftime", "time.localtime", "time.time"], "function", ["None"], ["", "def", "DATE", "(", ")", ":", "\n", "    ", "return", "time", ".", "strftime", "(", "\"%Y-%m-%d\"", ",", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.CMD": [[93, 95], ["subprocess.Popen", "subprocess.Popen.wait"], "function", ["None"], ["", "def", "CMD", "(", "command", ",", "wait", "=", "True", ")", ":", "\n", "    ", "h", "=", "subprocess", ".", "Popen", "(", "command", ",", "shell", "=", "True", ")", ";", "return", "h", ".", "wait", "(", ")", "if", "wait", "else", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.PrintConsole": [[96, 98], ["print"], "function", ["None"], ["", "def", "PrintConsole", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "*", "args", ",", "file", "=", "sys", ".", "stdout", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.PrintError": [[99, 101], ["print"], "function", ["None"], ["", "def", "PrintError", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "*", "args", ",", "file", "=", "sys", ".", "stderr", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.LineToFloats": [[102, 104], ["float", "re.findall"], "function", ["None"], ["", "def", "LineToFloats", "(", "line", ")", ":", "\n", "    ", "return", "[", "float", "(", "s", ")", "for", "s", "in", "re", ".", "findall", "(", "r\"(?<!\\w)[-+]?\\d*\\.?\\d+(?!\\d)\"", ",", "line", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.ERROR": [[105, 107], ["str"], "function", ["None"], ["", "def", "ERROR", "(", "something", ")", ":", "\n", "    ", "return", "\"\\033[31m\"", "+", "str", "(", "something", ")", "+", "\"\\033[0m\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.SUCCESS": [[108, 110], ["str"], "function", ["None"], ["", "def", "SUCCESS", "(", "something", ")", ":", "\n", "    ", "return", "\"\\033[32m\"", "+", "str", "(", "something", ")", "+", "\"\\033[0m\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.WARN": [[111, 113], ["str"], "function", ["None"], ["", "def", "WARN", "(", "something", ")", ":", "\n", "    ", "return", "\"\\033[33m\"", "+", "str", "(", "something", ")", "+", "\"\\033[0m\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.cached_path": [[115, 118], ["os.makedirs", "wget.download", "url.split", "path.split"], "function", ["None"], ["def", "cached_path", "(", "url", ")", ":", "\n", "    ", "CACHE_DIR", "=", "\".cache/\"", ";", "path", "=", "CACHE_DIR", "+", "\"/\"", ".", "join", "(", "url", ".", "split", "(", "'/'", ")", "[", "3", ":", "]", ")", "\n", "os", ".", "makedirs", "(", "\"/\"", ".", "join", "(", "path", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "1", "]", ")", ")", ";", "wget", ".", "download", "(", "url", ",", "out", "=", "path", ")", ";", "return", "path", "", "", ""]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.distillation.Distillation.__init__": [[11, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_dir", ",", "filepath", ")", ":", "\n", "        ", "self", ".", "input_dir", "=", "input_dir", "\n", "self", ".", "filepath", "=", "filepath", "\n", "self", ".", "search_res", "=", "[", "]", "\n", "self", ".", "corpus_dedup_triplets", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.distillation.Distillation.merge_search_res": [[17, 23], ["search_res.items", "global_search_res[].extend"], "methods", ["None"], ["", "def", "merge_search_res", "(", "self", ",", "search_res", ",", "global_search_res", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "search_res", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "global_search_res", ":", "\n", "                ", "global_search_res", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "                ", "global_search_res", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.distillation.Distillation.load_search_res": [[24, 32], ["os.listdir", "os.path.isdir", "os.path.join", "print", "distillation.Distillation.merge_search_res", "os.path.join", "json.load", "os.path.join", "open", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.merge_search_res"], ["", "", "", "def", "load_search_res", "(", "self", ")", ":", "\n", "        ", "search_res", "=", "{", "}", "\n", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "input_dir", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "f", ")", ")", ":", "\n", "                ", "print", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "f", ")", ",", "'search_res.json'", ")", ")", "\n", "self", ".", "merge_search_res", "(", "\n", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "f", ")", ",", "'search_res.json'", ")", ",", "'r'", ")", ")", ",", "search_res", ")", "\n", "", "", "return", "search_res", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.distillation.Distillation.rank_entity_seqs_with_score_freq": [[33, 54], ["sorted", "x.items", "sorted", "warnings.warn", "x.items", "sorted", "ValueError", "x.items", "sorted", "x.items", "sorted", "x.items", "len", "item[].strip().split", "item[].strip"], "methods", ["None"], ["", "def", "rank_entity_seqs_with_score_freq", "(", "self", ",", "x", ",", "dedup_ranking_type", ")", ":", "\n", "        ", "if", "dedup_ranking_type", "==", "'freq'", ":", "\n", "            ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "0", "]", ",", "reverse", "=", "True", ")", "}", "\n", "", "elif", "dedup_ranking_type", "==", "'score'", ":", "\n", "            ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "1", "]", ",", "reverse", "=", "True", ")", "}", "\n", "", "elif", "dedup_ranking_type", "==", "'score_freq'", ":", "\n", "            ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "1", "]", "/", "item", "[", "1", "]", "[", "0", "]", ",", "reverse", "=", "True", ")", "}", "\n", "", "elif", "dedup_ranking_type", "==", "'score_freq_len'", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'use score_len instead! score_freq_len is not recommended since it incorporates extended as a result of continous relation span constrain'", ")", "\n", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "1", "]", "/", "(", "\n", "item", "[", "1", "]", "[", "0", "]", "*", "len", "(", "item", "[", "0", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ")", ")", ",", "reverse", "=", "True", ")", "}", "\n", "", "elif", "dedup_ranking_type", "==", "'score_len'", ":", "\n", "            ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "1", "]", "/", "item", "[", "1", "]", "[", "3", "]", ",", "reverse", "=", "True", ")", "}", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'support (freq, score, score_freq, score_freq_len, score_len)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.distillation.Distillation.rank_entity_seqs_with_attached_score": [[55, 79], ["sorted", "x.items", "sorted", "warnings.warn", "x.items", "sorted", "ValueError", "x.items", "sorted", "x.items", "sorted", "len", "x.items", "k.strip().split", "k.strip", "len", "item[].strip().split", "item[].strip"], "methods", ["None"], ["", "", "def", "rank_entity_seqs_with_attached_score", "(", "self", ",", "x", ",", "dedup_ranking_type", ")", ":", "\n", "        ", "if", "dedup_ranking_type", "==", "'freq'", ":", "\n", "            ", "return", "{", "k", ":", "[", "v", ",", "v", "[", "0", "]", "]", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "0", "]", ",", "reverse", "=", "True", ")", "}", "\n", "", "elif", "dedup_ranking_type", "==", "'score'", ":", "\n", "            ", "return", "{", "k", ":", "[", "v", ",", "v", "[", "1", "]", "]", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "1", "]", ",", "reverse", "=", "True", ")", "}", "\n", "", "elif", "dedup_ranking_type", "==", "'score_freq'", ":", "\n", "            ", "return", "{", "k", ":", "[", "v", ",", "v", "[", "1", "]", "/", "v", "[", "0", "]", "]", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "1", "]", "/", "item", "[", "1", "]", "[", "0", "]", ",", "reverse", "=", "True", ")", "}", "\n", "", "elif", "dedup_ranking_type", "==", "'score_freq_len'", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'use score_len instead! score_freq_len is not recommended since it incorporates extended as a result of continous relation span constrain'", ")", "\n", "return", "{", "k", ":", "[", "v", ",", "v", "[", "1", "]", "/", "(", "v", "[", "0", "]", "*", "len", "(", "k", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ")", ")", "]", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "1", "]", "/", "(", "\n", "item", "[", "1", "]", "[", "0", "]", "*", "len", "(", "\n", "item", "[", "0", "]", ".", "strip", "(", ")", ".", "split", "(", "\n", "' '", ")", ")", ")", ",", "\n", "reverse", "=", "True", ")", "}", "\n", "", "elif", "dedup_ranking_type", "==", "'score_len'", ":", "\n", "            ", "return", "{", "k", ":", "[", "v", ",", "v", "[", "1", "]", "/", "v", "[", "3", "]", "]", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "1", "]", "/", "item", "[", "1", "]", "[", "3", "]", ",", "reverse", "=", "True", ")", "}", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'support (freq, score, score_freq, score_freq_len, score_len)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.distillation.Distillation.deduplicate": [[80, 99], ["distillation.Distillation.load_search_res", "distillation.Distillation.rank_entity_seqs_with_score_freq", "json.dump", "sent_dedup_triplets.items", "open", "k.strip", "itertools.islice", "[].items"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.distillation.Distillation.load_search_res", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.rank_entity_seqs_with_score_freq"], ["", "", "def", "deduplicate", "(", "self", ",", "topk", "=", "100", ",", "dedup_ranking_type", "=", "'freq'", ")", ":", "\n", "        ", "self", ".", "search_res", "=", "self", ".", "load_search_res", "(", ")", "\n", "for", "res", "in", "self", ".", "search_res", ":", "\n", "            ", "if", "topk", "is", "None", ":", "\n", "                ", "sent_dedup_triplets", "=", "res", "[", "1", "]", "[", "'deduplicated:'", "]", "\n", "", "else", ":", "\n", "                ", "sent_dedup_triplets", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "itertools", ".", "islice", "(", "res", "[", "1", "]", "[", "'deduplicated:'", "]", ".", "items", "(", ")", ",", "topk", ")", "}", "\n", "", "for", "k", ",", "v", "in", "sent_dedup_triplets", ".", "items", "(", ")", ":", "\n", "                ", "triplet", "=", "k", ".", "strip", "(", ")", "\n", "freq", "=", "v", "[", "0", "]", "\n", "score", "=", "v", "[", "1", "]", "\n", "if", "triplet", "not", "in", "self", ".", "corpus_dedup_triplets", ":", "\n", "                    ", "self", ".", "corpus_dedup_triplets", "[", "triplet", "]", "=", "[", "freq", ",", "score", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "corpus_dedup_triplets", "[", "triplet", "]", "[", "0", "]", "+=", "freq", "\n", "self", ".", "corpus_dedup_triplets", "[", "triplet", "]", "[", "1", "]", "+=", "score", "\n", "", "", "", "self", ".", "corpus_dedup_triplets", "=", "self", ".", "rank_entity_seqs_with_score_freq", "(", "self", ".", "corpus_dedup_triplets", ",", "\n", "dedup_ranking_type", ")", "\n", "json", ".", "dump", "(", "self", ".", "corpus_dedup_triplets", ",", "open", "(", "self", ".", "filepath", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.distillation.Distillation.remove_non_ascii": [[100, 102], ["re.sub().strip", "re.sub"], "methods", ["None"], ["", "def", "remove_non_ascii", "(", "self", ",", "text", ")", ":", "\n", "        ", "return", "re", ".", "sub", "(", "r'[^\\x00-\\x7F]+'", ",", "' '", ",", "text", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.distillation.Distillation.convert_to_eval_format": [[103, 118], ["k_triplet.split", "h_r_t[].strip", "h_r_t[].strip", "h_r_t[].strip", "distillation.Distillation.remove_non_ascii", "len"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.distillation.Distillation.remove_non_ascii"], ["", "def", "convert_to_eval_format", "(", "self", ",", "k_triplet", ",", "v_triplet", ",", "return_reverse", "=", "True", ",", "remove_relation_non_ascii", "=", "True", ")", ":", "\n", "        ", "h_r_t", "=", "k_triplet", ".", "split", "(", "'[SEP]'", ")", "\n", "h", "=", "h_r_t", "[", "0", "]", ".", "strip", "(", ")", "\n", "h_span", "=", "v_triplet", "[", "2", "]", "[", "0", "]", "\n", "r", "=", "h_r_t", "[", "1", "]", ".", "strip", "(", ")", "\n", "t", "=", "h_r_t", "[", "2", "]", ".", "strip", "(", ")", "\n", "t_span", "=", "v_triplet", "[", "2", "]", "[", "1", "]", "\n", "if", "remove_relation_non_ascii", ":", "\n", "            ", "r", "=", "self", ".", "remove_non_ascii", "(", "r", ")", "\n", "", "if", "len", "(", "r", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "if", "return_reverse", ":", "\n", "            ", "return", "{", "\"subject\"", ":", "h", ",", "\"subject_char_span\"", ":", "h_span", ",", "\"relation\"", ":", "r", ",", "\"object\"", ":", "t", ",", "\"object_char_span\"", ":", "t_span", "}", ",", "{", "\"subject\"", ":", "t", ",", "\"subject_char_span\"", ":", "t_span", ",", "\"relation\"", ":", "r", ",", "\"object\"", ":", "h", ",", "\"object_char_span\"", ":", "h_span", "}", "\n", "", "return", "{", "\"subject\"", ":", "h", ",", "\"subject_char_span\"", ":", "h_span", ",", "\"relation\"", ":", "r", ",", "\"object\"", ":", "t", ",", "\"object_char_span\"", ":", "t_span", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.distillation.Distillation.deduplicate_for_eval_fast": [[119, 197], ["tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "json.dump", "copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "os.listdir", "os.path.isdir", "dedup_triplets_with_sent.items", "dedup_triplets_with_sent.items", "open", "copy.deepcopy.pop", "existset.append", "os.path.join", "print", "json.load", "tqdm.tqdm.tqdm", "sent_dedup_triplets_with_sent.append", "ValueError", "os.path.join", "open", "json.load.items", "sorted", "os.path.join", "os.path.join", "distillation.Distillation.rank_entity_seqs_with_attached_score", "distillation.Distillation.items", "dedup_triplets[].extend", "dedup_triplets_with_sent[].extend", "os.path.join", "distillation.Distillation.convert_to_eval_format", "sent_dedup_triplets.append", "sent_dedup_triplets.append", "copy.deepcopy", "sent_dedup_triplets_with_sent.append", "sent_dedup_triplets_with_sent.append", "sent_dedup_triplets.append", "copy.deepcopy", "sent_dedup_triplets_with_sent.append", "itertools.islice", "[].items"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.distillation.Distillation.rank_entity_seqs_with_attached_score", "home.repos.pwc.inspect_result.cgraywang_deepex.model.distillation.Distillation.convert_to_eval_format"], ["", "def", "deduplicate_for_eval_fast", "(", "self", ",", "filepath", ",", "topk", "=", "None", ",", "dedup_ranking_type", "=", "'freq'", ",", "sent_dedup_type", "=", "'entity_pair'", ",", "\n", "doc_dedup_type", "=", "'whole'", ",", "return_reverse", "=", "True", ")", ":", "\n", "\n", "        ", "def", "existstriplet", "(", "cand_triplet", ",", "existset", ",", "dedup_type", ")", ":", "\n", "            ", "triplet", "=", "copy", ".", "deepcopy", "(", "cand_triplet", ")", "\n", "triplet", ".", "pop", "(", "'score'", ")", "\n", "triplet", ".", "pop", "(", "'sentence'", ")", "\n", "triplet", ".", "pop", "(", "'offset'", ")", "\n", "if", "dedup_type", "==", "'entity_pair'", ":", "\n", "                ", "triplet", ".", "pop", "(", "'relation'", ")", "\n", "", "elif", "dedup_type", "==", "'whole'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'support entity_pair or whole'", ")", "\n", "", "if", "triplet", "not", "in", "existset", ":", "\n", "                ", "existset", ".", "append", "(", "triplet", ")", "\n", "return", "False", "\n", "", "return", "True", "\n", "\n", "", "dedup_triplets", "=", "{", "}", "\n", "dedup_triplets_with_sent", "=", "{", "}", "\n", "for", "f", "in", "tqdm", "(", "os", ".", "listdir", "(", "self", ".", "input_dir", ")", ",", "desc", "=", "'deduplicating batch'", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "f", ")", ")", ":", "\n", "                ", "print", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "f", ")", ",", "'search_res.json'", ")", ")", "\n", "search_res", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "self", ".", "input_dir", ",", "f", ")", ",", "'search_res.json'", ")", ",", "'r'", ")", ")", "\n", "for", "k", ",", "v", "in", "tqdm", "(", "search_res", ".", "items", "(", ")", ",", "desc", "=", "'deduplicating doc'", ")", ":", "\n", "                    ", "sent_dedup_triplets", "=", "[", "]", "\n", "sent_dedup_triplets_with_sent", "=", "[", "]", "\n", "for", "res", "in", "v", ":", "\n", "                        ", "cands", "=", "[", "]", "\n", "if", "topk", "is", "None", ":", "\n", "                            ", "raw_per_sent_dedup_triplets", "=", "res", "[", "1", "]", "[", "'deduplicated:'", "]", "\n", "", "else", ":", "\n", "                            ", "raw_per_sent_dedup_triplets", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "\n", "itertools", ".", "islice", "(", "res", "[", "1", "]", "[", "'deduplicated:'", "]", ".", "items", "(", ")", ",", "topk", ")", "}", "\n", "", "raw_per_sent_dedup_triplets", "=", "self", ".", "rank_entity_seqs_with_attached_score", "(", "\n", "raw_per_sent_dedup_triplets", ",", "dedup_ranking_type", ")", "\n", "for", "k_triplet", ",", "v_triplet", "in", "raw_per_sent_dedup_triplets", ".", "items", "(", ")", ":", "\n", "                                ", "eval_format", "=", "self", ".", "convert_to_eval_format", "(", "k_triplet", ",", "v_triplet", "[", "0", "]", ",", "return_reverse", ")", "\n", "if", "eval_format", "is", "None", ":", "\n", "                                    ", "continue", "\n", "", "if", "return_reverse", ":", "\n", "                                    ", "sent_dedup_triplets", ".", "append", "(", "eval_format", "[", "0", "]", ")", "\n", "sent_dedup_triplets", ".", "append", "(", "eval_format", "[", "1", "]", ")", "\n", "eval_format_sent", "=", "copy", ".", "deepcopy", "(", "eval_format", ")", "\n", "eval_format_sent", "[", "0", "]", "[", "'sentence'", "]", "=", "res", "[", "0", "]", "\n", "eval_format_sent", "[", "0", "]", "[", "'score'", "]", "=", "v_triplet", "[", "1", "]", "\n", "eval_format_sent", "[", "0", "]", "[", "'offset'", "]", "=", "v_triplet", "[", "0", "]", "[", "4", "]", "\n", "eval_format_sent", "[", "1", "]", "[", "'sentence'", "]", "=", "res", "[", "0", "]", "\n", "eval_format_sent", "[", "1", "]", "[", "'score'", "]", "=", "v_triplet", "[", "1", "]", "\n", "eval_format_sent", "[", "1", "]", "[", "'offset'", "]", "=", "v_triplet", "[", "0", "]", "[", "4", "]", "\n", "sent_dedup_triplets_with_sent", ".", "append", "(", "eval_format_sent", "[", "0", "]", ")", "\n", "sent_dedup_triplets_with_sent", ".", "append", "(", "eval_format_sent", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                                    ", "sent_dedup_triplets", ".", "append", "(", "eval_format", ")", "\n", "eval_format_sent", "=", "copy", ".", "deepcopy", "(", "eval_format", ")", "\n", "eval_format_sent", "[", "'sentence'", "]", "=", "res", "[", "0", "]", "\n", "eval_format_sent", "[", "'score'", "]", "=", "v_triplet", "[", "1", "]", "\n", "eval_format_sent", "[", "'offset'", "]", "=", "v_triplet", "[", "0", "]", "[", "4", "]", "\n", "sent_dedup_triplets_with_sent", ".", "append", "(", "eval_format_sent", ")", "\n", "", "", "", "if", "k", "not", "in", "dedup_triplets", ":", "\n", "                        ", "dedup_triplets", "[", "k", "]", "=", "sent_dedup_triplets", "\n", "", "else", ":", "\n", "                        ", "dedup_triplets", "[", "k", "]", ".", "extend", "(", "sent_dedup_triplets", ")", "\n", "", "if", "k", "not", "in", "dedup_triplets_with_sent", ":", "\n", "                        ", "dedup_triplets_with_sent", "[", "k", "]", "=", "sent_dedup_triplets_with_sent", "\n", "", "else", ":", "\n", "                        ", "dedup_triplets_with_sent", "[", "k", "]", ".", "extend", "(", "sent_dedup_triplets_with_sent", ")", "\n", "\n", "", "", "", "", "for", "k", ",", "v", "in", "tqdm", "(", "dedup_triplets_with_sent", ".", "items", "(", ")", ",", "desc", "=", "'sorting'", ")", ":", "\n", "            ", "dedup_triplets_with_sent", "[", "k", "]", "=", "[", "e", "for", "e", "in", "sorted", "(", "v", ",", "key", "=", "lambda", "item", ":", "item", "[", "'score'", "]", ",", "reverse", "=", "True", ")", "]", "\n", "", "for", "docid", ",", "cand_triplets", "in", "tqdm", "(", "dedup_triplets_with_sent", ".", "items", "(", ")", ",", "desc", "=", "'merging doc'", ")", ":", "\n", "            ", "sent_dedup_triplets_with_sent", "=", "[", "]", "\n", "existset", "=", "[", "]", "\n", "for", "cand_triplet", "in", "cand_triplets", ":", "\n", "                    ", "sent_dedup_triplets_with_sent", ".", "append", "(", "cand_triplet", ")", "\n", "", "dedup_triplets_with_sent", "[", "docid", "]", "=", "sent_dedup_triplets_with_sent", "\n", "", "json", ".", "dump", "(", "dedup_triplets_with_sent", ",", "open", "(", "filepath", ",", "'w'", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.eval.Eval.__init__": [[4, 6], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_triplets", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.eval.Eval.eval_number_of_triplets": [[7, 13], ["filepath.endswith", "json.load", "len", "ValueError", "open"], "methods", ["None"], ["", "def", "eval_number_of_triplets", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "if", "filepath", ".", "endswith", "(", "'.json'", ")", ":", "\n", "            ", "res", "=", "json", ".", "load", "(", "open", "(", "filepath", ",", "'r'", ")", ")", "\n", "self", ".", "num_triplets", "=", "len", "(", "res", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'the result format should be json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.eval.Eval.eval_number_of_triplets_with_docid": [[14, 19], ["json.load", "json.load.items", "open", "len"], "methods", ["None"], ["", "", "def", "eval_number_of_triplets_with_docid", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "self", ".", "num_triplets", "=", "0", "\n", "res", "=", "json", ".", "load", "(", "open", "(", "filepath", ",", "'r'", ")", ")", "\n", "for", "k", ",", "v", "in", "res", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "num_triplets", "+=", "len", "(", "v", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.layer_attention": [[30, 35], ["torch.stack", "torch.stack.mean"], "function", ["None"], ["def", "layer_attention", "(", "attention", ",", "layer_id", ")", ":", "\n", "    ", "if", "layer_id", "==", "-", "100", ":", "\n", "        ", "all_attention", "=", "torch", ".", "stack", "(", "attention", ",", "dim", "=", "0", ")", "\n", "return", "all_attention", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "return", "attention", "[", "layer_id", "]", "[", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.transform_layer_attention": [[36, 45], ["attention.mean", "attention.max", "attention.sum", "ValueError"], "function", ["None"], ["", "def", "transform_layer_attention", "(", "attention", ",", "type", ")", ":", "\n", "    ", "if", "type", "==", "'mean'", ":", "\n", "        ", "return", "attention", ".", "mean", "(", "1", ")", "\n", "", "elif", "type", "==", "'max'", ":", "\n", "        ", "return", "attention", ".", "max", "(", "1", ")", ".", "values", "\n", "", "elif", "type", "==", "'sum'", ":", "\n", "        ", "return", "attention", ".", "sum", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'support mean max sum'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_tokens_to_string": [[47, 57], ["isinstance", "isinstance", "isinstance", "bytearray().decode", "ValueError", "bytearray"], "function", ["None"], ["", "", "def", "convert_tokens_to_string", "(", "tokens", ",", "tokenizer", ")", ":", "\n", "    ", "if", "isinstance", "(", "tokenizer", ",", "BertTokenizerFast", ")", ":", "\n", "        ", "out_string", "=", "\" \"", ".", "join", "(", "tokens", ")", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "", "elif", "isinstance", "(", "tokenizer", ",", "GPT2TokenizerFast", ")", "or", "isinstance", "(", "tokenizer", ",", "GPT2Tokenizer", ")", ":", "\n", "        ", "text", "=", "\"\"", ".", "join", "(", "tokens", ")", "\n", "text", "=", "bytearray", "(", "[", "tokenizer", ".", "byte_decoder", "[", "c", "]", "for", "c", "in", "text", "]", ")", ".", "decode", "(", "\"utf-8\"", ",", "errors", "=", "tokenizer", ".", "errors", ")", "\n", "return", "text", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'only gpt2 and bert tokenizer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.find_seq_offsets": [[58, 77], ["kgm.convert_seq_id_to_subword", "convert_seq_id_to_subword.startswith", "range", "range", "kgm.convert_seq_id_to_subword", "kgm.convert_seq_id_to_subword", "convert_seq_id_to_subword.startswith", "convert_seq_id_to_subword.startswith"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_seq_id_to_subword", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_seq_id_to_subword", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_seq_id_to_subword"], ["", "", "def", "find_seq_offsets", "(", "seq_id", ",", "batch", ",", "inputs", ",", "tokenizer", ",", "begin_seq_id", ",", "end_seq_id", ")", ":", "\n", "    ", "if", "'input_ids'", "in", "inputs", ":", "\n", "        ", "inputs", "=", "inputs", "[", "'input_ids'", "]", "\n", "", "subword", "=", "convert_seq_id_to_subword", "(", "seq_id", ",", "batch", ",", "inputs", ",", "tokenizer", ")", "\n", "pre_offset", "=", "0", "\n", "if", "subword", ".", "startswith", "(", "'##'", ")", ":", "\n", "        ", "pre_offset", "=", "1", "\n", "for", "pre_id", "in", "range", "(", "seq_id", "-", "1", ",", "begin_seq_id", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "presubword", "=", "convert_seq_id_to_subword", "(", "pre_id", ",", "batch", ",", "inputs", ",", "tokenizer", ")", "\n", "if", "not", "presubword", ".", "startswith", "(", "'##'", ")", ":", "\n", "                ", "break", "\n", "", "pre_offset", "+=", "1", "\n", "", "", "next_offset", "=", "0", "\n", "for", "next_id", "in", "range", "(", "seq_id", "+", "1", ",", "end_seq_id", "+", "1", ",", "1", ")", ":", "\n", "        ", "nextsubword", "=", "convert_seq_id_to_subword", "(", "next_id", ",", "batch", ",", "inputs", ",", "tokenizer", ")", "\n", "if", "not", "nextsubword", ".", "startswith", "(", "'##'", ")", ":", "\n", "            ", "break", "\n", "", "next_offset", "+=", "1", "\n", "", "return", "pre_offset", ",", "next_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.is_same_span": [[79, 81], ["None"], "function", ["None"], ["", "def", "is_same_span", "(", "span0", ",", "span1", ")", ":", "\n", "    ", "return", "span0", "[", "0", "]", "==", "span1", "[", "0", "]", "and", "span0", "[", "1", "]", "==", "span1", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.find_rids": [[83, 102], ["range", "range", "kgm.is_same_span", "kgm.is_same_span", "len", "len"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.is_same_span", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.is_same_span"], ["", "def", "find_rids", "(", "seq", ",", "batch", ",", "inputs", ")", ":", "\n", "    ", "first_rid", "=", "seq", "[", "1", "]", "\n", "last_rid", "=", "seq", "[", "-", "2", "]", "\n", "entity_ids", "=", "[", "inputs", "[", "'entity_ids'", "]", "[", "batch", "]", "[", "ind", "]", "for", "ind", "in", "seq", "]", "\n", "h_span", "=", "entity_ids", "[", "0", "]", ".", "span", "\n", "t_span", "=", "entity_ids", "[", "-", "1", "]", ".", "span", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "entity_ids", ")", "-", "2", ",", "1", ")", ":", "\n", "        ", "if", "is_same_span", "(", "h_span", ",", "entity_ids", "[", "i", "]", ".", "span", ")", ":", "\n", "            ", "first_rid", "=", "seq", "[", "i", "+", "1", "]", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "entity_ids", ")", "-", "2", ",", "1", ",", "-", "1", ")", ":", "\n", "        ", "if", "is_same_span", "(", "t_span", ",", "entity_ids", "[", "i", "]", ".", "span", ")", ":", "\n", "            ", "last_rid", "=", "seq", "[", "i", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "if", "first_rid", ">", "last_rid", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "return", "first_rid", ",", "last_rid", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_to_triplet_relation": [[104, 122], ["kgm.find_rids", "kgm.find_seq_offsets", "kgm.find_seq_offsets", "kgm.convert_tokens_to_string", "tokenizer.convert_ids_to_tokens"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.find_rids", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.find_seq_offsets", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.find_seq_offsets", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_tokens_to_string"], ["", "def", "convert_to_triplet_relation", "(", "seq", ",", "batch", ",", "inputs", ",", "tokenizer", ")", ":", "\n", "    ", "hid", "=", "seq", "[", "0", "]", "\n", "tid", "=", "seq", "[", "-", "1", "]", "\n", "first_rid", ",", "last_rid", "=", "find_rids", "(", "seq", ",", "batch", ",", "inputs", ")", "\n", "if", "first_rid", "is", "None", "or", "last_rid", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "first_rid_pre_offset", ",", "first_rid_next_offset", "=", "find_seq_offsets", "(", "first_rid", ",", "batch", ",", "inputs", ",", "tokenizer", ",", "hid", ",", "tid", ")", "\n", "last_rid_pre_offset", ",", "last_rid_next_offset", "=", "find_seq_offsets", "(", "last_rid", ",", "batch", ",", "inputs", ",", "tokenizer", ",", "hid", ",", "tid", ")", "\n", "first_pruned_rid", "=", "first_rid", "\n", "last_pruned_rid", "=", "last_rid", "\n", "if", "first_rid", "-", "first_rid_pre_offset", "<=", "hid", ":", "\n", "        ", "first_pruned_rid", "=", "first_rid", "+", "first_rid_next_offset", "+", "1", "\n", "", "if", "last_rid", "+", "last_rid_next_offset", ">=", "tid", ":", "\n", "        ", "last_pruned_rid", "=", "last_rid", "-", "last_rid_pre_offset", "-", "1", "\n", "", "if", "first_pruned_rid", ">", "last_pruned_rid", ":", "\n", "        ", "return", "None", "\n", "", "return", "convert_tokens_to_string", "(", "\n", "tokenizer", ".", "convert_ids_to_tokens", "(", "inputs", "[", "'input_ids'", "]", "[", "batch", "]", "[", "first_pruned_rid", ":", "last_pruned_rid", "+", "1", "]", ")", ",", "tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_tokens_to_triplet": [[124, 145], ["entity_ids[].name.title", "entity_ids[].name.title", "kgm.is_same_span", "len", "kgm.convert_to_triplet_relation"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.is_same_span", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_to_triplet_relation"], ["", "def", "convert_tokens_to_triplet", "(", "seq", ",", "batch", ",", "inputs", ",", "tokenizer", ",", "beam_mode", "=", "'IE'", ")", ":", "\n", "    ", "if", "len", "(", "seq", ")", "<", "3", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "if", "beam_mode", "==", "'RC'", ":", "\n", "        ", "entity_ids", "=", "[", "inputs", "[", "'head_entity_ids'", "]", "[", "batch", "]", "[", "seq", "[", "0", "]", "]", "]", "+", "[", "inputs", "[", "'relation_entity_ids'", "]", "[", "batch", "]", "[", "ind", "]", "for", "ind", "in", "seq", "[", "1", ":", "-", "1", "]", "]", "+", "[", "inputs", "[", "'tail_entity_ids'", "]", "[", "batch", "]", "[", "seq", "[", "-", "1", "]", "]", "]", "\n", "", "else", ":", "\n", "        ", "entity_ids", "=", "[", "inputs", "[", "'entity_ids'", "]", "[", "batch", "]", "[", "ind", "]", "for", "ind", "in", "seq", "]", "\n", "", "h", "=", "entity_ids", "[", "0", "]", ".", "name", ".", "title", "(", ")", "\n", "t", "=", "entity_ids", "[", "-", "1", "]", ".", "name", ".", "title", "(", ")", "\n", "h_span", "=", "entity_ids", "[", "0", "]", ".", "span", "\n", "t_span", "=", "entity_ids", "[", "-", "1", "]", ".", "span", "\n", "if", "is_same_span", "(", "h_span", ",", "t_span", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "h_t_spans", "=", "[", "h_span", ",", "t_span", "]", "\n", "if", "beam_mode", "==", "'RC'", ":", "\n", "        ", "r", "=", "entity_ids", "[", "1", "]", ".", "name", "\n", "", "else", ":", "\n", "        ", "r", "=", "convert_to_triplet_relation", "(", "seq", ",", "batch", ",", "inputs", ",", "tokenizer", ")", "\n", "", "if", "r", "is", "None", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "return", "h", "+", "' [SEP] '", "+", "r", "+", "' [SEP] '", "+", "t", ",", "h_t_spans", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.search_candidate_gen": [[147, 169], ["kgm.convert_tokens_to_string", "kgm.convert_tokens_to_triplet", "ValueError", "kgm.convert_seq_id_to_subword", "triplet.strip", "convert_tokens_to_string().strip", "kgm.convert_tokens_to_string", "kgm.convert_seq_id_to_subword"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_tokens_to_string", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_tokens_to_triplet", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_seq_id_to_subword", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_tokens_to_string", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_seq_id_to_subword"], ["", "def", "search_candidate_gen", "(", "seq", ",", "batch", ",", "inputs", ",", "tokenizer", ",", "model_args", ")", ":", "\n", "    ", "cand_type", "=", "model_args", ".", "search_cand_type", "\n", "if", "cand_type", "==", "'word'", ":", "\n", "        ", "return", "convert_tokens_to_string", "(", "\n", "[", "convert_seq_id_to_subword", "(", "ind", ",", "batch", ",", "inputs", ",", "tokenizer", ")", "for", "ind", "in", "seq", "]", ",", "tokenizer", ")", "\n", "", "elif", "cand_type", "==", "'entity'", ":", "\n", "        ", "if", "'docid'", "in", "inputs", ":", "\n", "            ", "docid", "=", "inputs", "[", "'docid'", "]", "[", "batch", "]", "\n", "", "else", ":", "\n", "            ", "docid", "=", "-", "1", "\n", "", "if", "'offset'", "in", "inputs", ":", "\n", "            ", "offset", "=", "inputs", "[", "'offset'", "]", "[", "batch", "]", "\n", "", "else", ":", "\n", "            ", "offset", "=", "-", "1", "\n", "", "triplet", ",", "head_tail_spans", "=", "convert_tokens_to_triplet", "(", "seq", ",", "batch", ",", "inputs", ",", "tokenizer", ",", "model_args", ".", "beam_mode", ")", "\n", "if", "triplet", "is", "None", "or", "head_tail_spans", "is", "None", ":", "\n", "            ", "return", "triplet", ",", "None", ",", "head_tail_spans", ",", "docid", ",", "offset", "\n", "", "return", "triplet", ".", "strip", "(", ")", ",", "convert_tokens_to_string", "(", "[", "convert_seq_id_to_subword", "(", "ind", ",", "batch", ",", "inputs", ",", "tokenizer", ")", "\n", "for", "ind", "in", "seq", "]", ",", "tokenizer", ")", ".", "strip", "(", ")", ",", "head_tail_spans", ",", "docid", ",", "offset", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'candidate type can only be word or entity'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.filter_cand_by_min_len": [[171, 175], ["len", "k.strip().split", "k.strip"], "function", ["None"], ["", "", "def", "filter_cand_by_min_len", "(", "k", ",", "model_args", ")", ":", "\n", "    ", "if", "len", "(", "k", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ")", ">=", "model_args", ".", "cand_min_len", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.rank_entity_seqs_with_score_freq": [[176, 204], ["sorted", "x.items", "kgm.filter_cand_by_min_len", "sorted", "warnings.warn", "x.items", "kgm.filter_cand_by_min_len", "sorted", "ValueError", "x.items", "kgm.filter_cand_by_min_len", "sorted", "x.items", "kgm.filter_cand_by_min_len", "sorted", "x.items", "kgm.filter_cand_by_min_len", "len", "item[].strip().split", "item[].strip"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.filter_cand_by_min_len", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.filter_cand_by_min_len", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.filter_cand_by_min_len", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.filter_cand_by_min_len", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.filter_cand_by_min_len"], ["", "def", "rank_entity_seqs_with_score_freq", "(", "x", ",", "model_args", ")", ":", "\n", "\n", "    ", "if", "model_args", ".", "dedup_ranking_type", "==", "'freq'", ":", "\n", "        ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "if", "not", "filter_cand_by_min_len", "(", "k", ",", "model_args", ")", "}", "\n", "", "elif", "model_args", ".", "dedup_ranking_type", "==", "'score'", ":", "\n", "        ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "if", "not", "filter_cand_by_min_len", "(", "k", ",", "model_args", ")", "}", "\n", "", "elif", "model_args", ".", "dedup_ranking_type", "==", "'score_freq'", ":", "\n", "        ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "1", "]", "/", "item", "[", "1", "]", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "if", "not", "filter_cand_by_min_len", "(", "k", ",", "model_args", ")", "}", "\n", "", "elif", "model_args", ".", "dedup_ranking_type", "==", "'score_freq_len'", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "'use score_len instead! score_freq_len is not recommended since it incorporates extended as a result of continous relation span constrain'", ")", "\n", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "1", "]", "/", "(", "\n", "item", "[", "1", "]", "[", "0", "]", "*", "len", "(", "item", "[", "0", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", ")", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "if", "not", "filter_cand_by_min_len", "(", "k", ",", "model_args", ")", "}", "\n", "", "elif", "model_args", ".", "dedup_ranking_type", "==", "'score_len'", ":", "\n", "        ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sorted", "(", "x", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "1", "]", "/", "item", "[", "1", "]", "[", "3", "]", ",", "reverse", "=", "True", ")", "\n", "if", "not", "filter_cand_by_min_len", "(", "k", ",", "model_args", ")", "}", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'support (freq, score, score_freq, score_freq_len, score_len)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.assign_search_result": [[206, 219], ["search_res[].append", "kgm.rank_entity_seqs_with_score_freq", "kgm.rank_entity_seqs_with_score_freq"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.rank_entity_seqs_with_score_freq", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.rank_entity_seqs_with_score_freq"], ["", "", "def", "assign_search_result", "(", "search_res", ",", "subword_input", ",", "docid", ",", "entity_seqs_with_score_freq", ",", "subword_seqs_with_scores", ",", "\n", "model_args", ")", ":", "\n", "    ", "if", "docid", "is", "None", ":", "\n", "        ", "return", "\n", "", "subword_input", "=", "'$input_txt:$ '", "+", "subword_input", "\n", "if", "docid", "not", "in", "search_res", ":", "\n", "        ", "search_res", "[", "docid", "]", "=", "[", "\n", "[", "subword_input", ",", "\n", "{", "'deduplicated:'", ":", "rank_entity_seqs_with_score_freq", "(", "entity_seqs_with_score_freq", ",", "model_args", ")", "}", "]", "]", "\n", "", "else", ":", "\n", "        ", "search_res", "[", "docid", "]", ".", "append", "(", "\n", "[", "subword_input", ",", "\n", "{", "'deduplicated:'", ":", "rank_entity_seqs_with_score_freq", "(", "entity_seqs_with_score_freq", ",", "model_args", ")", "}", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.search_results_gen": [[221, 266], ["time.time", "set", "kgm.assign_search_result", "logger.debug", "tokenizer.special_tokens_map.values", "sorted", "kgm.search_candidate_gen", "len", "subword_seqs_with_scores.append", "list", "kgm.assign_search_result", "time.time", "reversed"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.assign_search_result", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.search_candidate_gen", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.assign_search_result"], ["", "", "def", "search_results_gen", "(", "res_indices", ",", "model_args", ",", "inputs", ",", "tokenizer", ")", ":", "\n", "    ", "tic", "=", "time", ".", "time", "(", ")", "\n", "special_tokens", "=", "set", "(", "tokenizer", ".", "special_tokens_map", ".", "values", "(", ")", ")", "\n", "search_res", "=", "{", "}", "\n", "pre_b", "=", "-", "1", "\n", "pre_docid", "=", "None", "\n", "subword_seqs_with_scores", "=", "[", "]", "\n", "entity_seqs_with_score_freq", "=", "{", "}", "\n", "docid", "=", "None", "\n", "for", "seq", "in", "res_indices", ":", "\n", "        ", "cur_b", "=", "seq", "[", "3", "]", "\n", "if", "model_args", ".", "beam_mode", "!=", "\"RC\"", ":", "\n", "            ", "seq", "[", "0", "]", "=", "seq", "[", "0", "]", "if", "seq", "[", "0", "]", "[", "0", "]", "<", "seq", "[", "0", "]", "[", "-", "1", "]", "else", "list", "(", "reversed", "(", "seq", "[", "0", "]", ")", ")", "\n", "", "seq", "[", "1", ":", "-", "1", "]", "=", "sorted", "(", "seq", "[", "1", ":", "-", "1", "]", ")", "\n", "entity_output", ",", "subword_output", ",", "head_tail_spans", ",", "docid", ",", "offset", "=", "search_candidate_gen", "(", "seq", "[", "0", "]", ",", "cur_b", ",", "inputs", ",", "\n", "tokenizer", ",", "\n", "model_args", ")", "\n", "if", "entity_output", "is", "None", "or", "subword_output", "is", "None", "or", "head_tail_spans", "is", "None", "or", "head_tail_spans", "[", "0", "]", "==", "[", "-", "1", ",", "-", "1", "]", "or", "head_tail_spans", "[", "1", "]", "==", "[", "-", "1", ",", "-", "1", "]", ":", "\n", "            ", "continue", "\n", "", "score", "=", "seq", "[", "1", "]", "\n", "attended_length", "=", "len", "(", "seq", "[", "0", "]", ")", "\n", "if", "pre_b", "!=", "cur_b", ":", "\n", "            ", "if", "pre_b", "!=", "-", "1", ":", "\n", "                ", "subword_input", "=", "inputs", "[", "'text'", "]", "[", "pre_b", "]", "\n", "\n", "assign_search_result", "(", "search_res", ",", "subword_input", ",", "pre_docid", ",", "entity_seqs_with_score_freq", ",", "\n", "subword_seqs_with_scores", ",", "model_args", ")", "\n", "\n", "", "subword_seqs_with_scores", "=", "[", "]", "\n", "entity_seqs_with_score_freq", "=", "{", "}", "\n", "", "subword_seqs_with_scores", ".", "append", "(", "[", "[", "entity_output", ",", "subword_output", "]", ",", "score", "]", ")", "\n", "if", "entity_output", "not", "in", "entity_seqs_with_score_freq", ":", "\n", "            ", "entity_seqs_with_score_freq", "[", "entity_output", "]", "=", "[", "1", ",", "score", ",", "head_tail_spans", ",", "attended_length", ",", "offset", "]", "\n", "", "else", ":", "\n", "            ", "entity_seqs_with_score_freq", "[", "entity_output", "]", "[", "0", "]", "+=", "1", "\n", "entity_seqs_with_score_freq", "[", "entity_output", "]", "[", "1", "]", "+=", "score", "\n", "entity_seqs_with_score_freq", "[", "entity_output", "]", "[", "3", "]", "+=", "attended_length", "\n", "", "pre_b", "=", "cur_b", "\n", "pre_docid", "=", "docid", "\n", "", "subword_input", "=", "inputs", "[", "'text'", "]", "[", "pre_b", "]", "\n", "\n", "assign_search_result", "(", "search_res", ",", "subword_input", ",", "pre_docid", ",", "entity_seqs_with_score_freq", ",", "subword_seqs_with_scores", ",", "\n", "model_args", ")", "\n", "logger", ".", "debug", "(", "'generation time cost {}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "return", "search_res", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.visited_all": [[267, 272], ["None"], "function", ["None"], ["", "def", "visited_all", "(", "res", ")", ":", "\n", "    ", "for", "seq", "in", "res", ":", "\n", "        ", "if", "not", "seq", "[", "2", "]", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.filter_sort_result": [[274, 295], ["sorted", "dict_filter_sort_res.items", "sorted", "dict_filter_sort_res[].append", "sorted.extend", "sorted.extend", "len", "len", "sorted.append", "len"], "function", ["None"], ["", "def", "filter_sort_result", "(", "res", ",", "n", ",", "max_len", ",", "min_len", ",", "score_threshold", "=", "0", ",", "search_ranking_type", "=", "'sum'", ")", ":", "\n", "    ", "filter_sort_res", "=", "[", "]", "\n", "for", "seq", "in", "res", ":", "\n", "        ", "if", "len", "(", "seq", "[", "0", "]", ")", ">=", "min_len", "and", "len", "(", "seq", "[", "0", "]", ")", "<=", "max_len", ":", "\n", "            ", "if", "search_ranking_type", "==", "'mean'", ":", "\n", "                ", "seq", "[", "1", "]", "=", "seq", "[", "1", "]", "/", "len", "(", "seq", "[", "0", "]", ")", "\n", "", "if", "seq", "[", "1", "]", ">", "score_threshold", ":", "\n", "                ", "filter_sort_res", ".", "append", "(", "seq", ")", "\n", "", "", "", "filter_sort_res", "=", "sorted", "(", "sorted", "(", "filter_sort_res", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "1", "]", ",", "reverse", "=", "True", ")", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "3", "]", ")", "\n", "dict_filter_sort_res", "=", "{", "}", "\n", "for", "tup", "in", "filter_sort_res", ":", "\n", "        ", "if", "tup", "[", "3", "]", "not", "in", "dict_filter_sort_res", ":", "\n", "            ", "dict_filter_sort_res", "[", "tup", "[", "3", "]", "]", "=", "[", "]", "\n", "", "dict_filter_sort_res", "[", "tup", "[", "3", "]", "]", ".", "append", "(", "tup", ")", "\n", "", "filter_sort_res", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "dict_filter_sort_res", ".", "items", "(", ")", ":", "\n", "        ", "if", "n", "is", "not", "None", "and", "n", "!=", "'None'", ":", "\n", "            ", "filter_sort_res", ".", "extend", "(", "v", "[", ":", "n", "]", ")", "\n", "", "else", ":", "\n", "            ", "filter_sort_res", ".", "extend", "(", "v", ")", "\n", "", "", "return", "filter_sort_res", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.entity_sent_gen_per_sample": [[297, 351], ["sorted", "len", "range", "len", "non_special_tokens_mask_indices[].item", "len", "range", "ValueError", "sorted", "sorted", "sorted.append", "non_special_tokens_mask_indices[].item", "sorted.append", "len", "range", "sent_eid_sids.append", "attention.size", "[].item", "convert_tokens_to_string().strip", "range", "len", "sorted", "len", "sorted.append", "sent_eid_sid.extend", "kgm.convert_tokens_to_string", "attention.size", "convert_tokens_to_string().strip", "convert_tokens_to_string().strip", "len", "sorted", "kgm.convert_seq_id_to_subword", "len", "sent_eid_sid.append", "len", "kgm.convert_tokens_to_string", "kgm.convert_tokens_to_string", "sent_eid_sid.append", "sent_eid_sid.append", "kgm.convert_seq_id_to_subword", "kgm.convert_seq_id_to_subword"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_tokens_to_string", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_seq_id_to_subword", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_tokens_to_string", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_tokens_to_string", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_seq_id_to_subword", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_seq_id_to_subword"], ["", "def", "entity_sent_gen_per_sample", "(", "attention", ",", "b", ",", "inputs", ",", "tokenizer", ",", "model_args", ",", "prefix", "=", "\"\"", ")", ":", "\n", "    ", "eid_sids", "=", "[", "seq_id", "for", "seq_id", "in", "range", "(", "attention", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "if", "inputs", "[", "'%sentity_ids'", "%", "prefix", "]", "[", "b", "]", "[", "seq_id", "]", ".", "name", "!=", "'$NIL$'", "\n", "and", "inputs", "[", "'special_tokens_mask'", "]", "[", "b", "]", "[", "seq_id", "]", ".", "item", "(", ")", "==", "0", "\n", "and", "convert_tokens_to_string", "(", "\n", "convert_seq_id_to_subword", "(", "seq_id", ",", "b", ",", "inputs", ",", "tokenizer", ")", ",", "\n", "tokenizer", ")", ".", "strip", "(", ")", "not", "in", "'!=?'", "]", "\n", "if", "model_args", ".", "add_extra_entity", ":", "\n", "        ", "non_special_tokens_mask_indices", "=", "(", "inputs", "[", "'special_tokens_mask'", "]", "[", "b", "]", "==", "0", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", "\n", "if", "len", "(", "non_special_tokens_mask_indices", ")", ">", "0", ":", "\n", "            ", "first_token_id", "=", "non_special_tokens_mask_indices", "[", "0", "]", ".", "item", "(", ")", "\n", "if", "first_token_id", "not", "in", "eid_sids", ":", "\n", "                ", "eid_sids", ".", "append", "(", "first_token_id", ")", "\n", "", "", "if", "len", "(", "non_special_tokens_mask_indices", ")", ">", "1", ":", "\n", "            ", "last_token_id", "=", "non_special_tokens_mask_indices", "[", "-", "1", "]", ".", "item", "(", ")", "-", "1", "\n", "if", "last_token_id", "not", "in", "eid_sids", ":", "\n", "                ", "eid_sids", ".", "append", "(", "last_token_id", ")", "\n", "", "", "", "if", "len", "(", "eid_sids", ")", "<", "1", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "eid_sids", "=", "sorted", "(", "eid_sids", ")", "\n", "if", "model_args", ".", "sentence", ":", "\n", "        ", "if", "'%sentity_ids'", "%", "prefix", "in", "inputs", ":", "\n", "            ", "split_indices", "=", "[", "seq_id", "for", "seq_id", "in", "range", "(", "attention", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "if", "convert_tokens_to_string", "(", "\n", "convert_seq_id_to_subword", "(", "seq_id", ",", "b", ",", "inputs", ",", "tokenizer", ")", ",", "tokenizer", ")", ".", "strip", "(", ")", "in", "'!=?'", "and", "\n", "convert_tokens_to_string", "(", "\n", "convert_seq_id_to_subword", "(", "seq_id", ",", "b", ",", "inputs", ",", "tokenizer", ")", ",", "tokenizer", ")", ".", "strip", "(", ")", "!=", "''", "]", "\n", "sent_eid_sids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "-", "1", ",", "len", "(", "split_indices", ")", ")", ":", "\n", "                ", "sent_eid_sid", "=", "[", "]", "\n", "if", "model_args", ".", "add_extra_entity", ":", "\n", "                    ", "if", "0", "<=", "i", "<", "len", "(", "split_indices", ")", "-", "1", ":", "\n", "                        ", "sent_eid_sid", ".", "extend", "(", "[", "split_indices", "[", "i", "]", "+", "1", ",", "split_indices", "[", "i", "+", "1", "]", "-", "1", "]", ")", "\n", "", "", "for", "j", "in", "range", "(", "len", "(", "eid_sids", ")", ")", ":", "\n", "                    ", "if", "i", "==", "-", "1", ":", "\n", "                        ", "if", "len", "(", "split_indices", ")", "==", "0", "or", "eid_sids", "[", "j", "]", "<", "split_indices", "[", "0", "]", ":", "\n", "                            ", "if", "eid_sids", "[", "j", "]", "not", "in", "sent_eid_sid", ":", "\n", "                                ", "sent_eid_sid", ".", "append", "(", "eid_sids", "[", "j", "]", ")", "\n", "", "", "", "elif", "i", "==", "len", "(", "split_indices", ")", "-", "1", ":", "\n", "                        ", "if", "eid_sids", "[", "j", "]", ">", "split_indices", "[", "i", "]", ":", "\n", "                            ", "if", "eid_sids", "[", "j", "]", "not", "in", "sent_eid_sid", ":", "\n", "                                ", "sent_eid_sid", ".", "append", "(", "eid_sids", "[", "j", "]", ")", "\n", "", "", "", "else", ":", "\n", "                        ", "if", "eid_sids", "[", "j", "]", ">", "split_indices", "[", "i", "]", "and", "eid_sids", "[", "j", "]", "<", "split_indices", "[", "i", "+", "1", "]", ":", "\n", "                            ", "if", "eid_sids", "[", "j", "]", "not", "in", "sent_eid_sid", ":", "\n", "                                ", "sent_eid_sid", ".", "append", "(", "eid_sids", "[", "j", "]", ")", "\n", "", "", "", "", "sent_eid_sids", ".", "append", "(", "sorted", "(", "sent_eid_sid", ")", ")", "\n", "if", "len", "(", "sent_eid_sid", ")", ">=", "1", ":", "\n", "                    ", "eid_sids", ".", "append", "(", "sorted", "(", "sent_eid_sid", ")", "[", "-", "1", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'entity ids must be provided in input to use the generation algs'", ")", "\n", "", "return", "sorted", "(", "eid_sids", ")", ",", "sent_eid_sids", "\n", "", "else", ":", "\n", "        ", "return", "sorted", "(", "eid_sids", ")", ",", "[", "eid_sids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.segment_location": [[352, 354], ["None"], "function", ["None"], ["", "", "def", "segment_location", "(", "a", ",", "u", ",", "v", ")", ":", "\n", "    ", "return", "(", "a", "<", "u", ")", "+", "(", "a", "<", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.cross_segment_check": [[355, 357], ["kgm.segment_location", "kgm.segment_location"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.segment_location", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.segment_location"], ["", "def", "cross_segment_check", "(", "a", ",", "l", ",", "u", ",", "v", ")", ":", "\n", "    ", "return", "l", "!=", "u", "and", "l", "!=", "v", "and", "(", "segment_location", "(", "a", ",", "u", ",", "v", ")", "!=", "segment_location", "(", "l", ",", "u", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.fast_unidirectional_beam_search_helper": [[358, 392], ["kgm.visited_all", "sorted", "range", "beam_new.append", "copy.deepcopy", "c_new[].append", "vals[].item", "beam_new.append", "indices.size", "indices[].item", "len", "indices[].item", "len", "kgm.cross_segment_check", "indices[].item", "indices[].item", "indices[].item", "indices[].item"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.visited_all", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.cross_segment_check"], ["", "def", "fast_unidirectional_beam_search_helper", "(", "node", ",", "offset", ",", "full_vals", ",", "full_indices", ",", "topk", ",", "b", ",", "direction", ",", "bound", ")", ":", "\n", "    ", "beam", "=", "[", "[", "[", "node", "]", ",", "0.0", ",", "False", ",", "b", "]", "]", "\n", "bound", "-=", "offset", "\n", "while", "not", "visited_all", "(", "beam", ")", ":", "\n", "        ", "beam_new", "=", "[", "]", "\n", "for", "c", "in", "beam", ":", "\n", "            ", "v", "=", "c", "[", "0", "]", "[", "-", "1", "]", "-", "offset", "\n", "if", "v", "!=", "bound", ":", "\n", "                ", "vals", ",", "indices", "=", "full_vals", "[", "v", "]", ",", "full_indices", "[", "v", "]", "\n", "tempk", "=", "0", "\n", "for", "ind", "in", "range", "(", "indices", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "                    ", "if", "tempk", "==", "topk", ":", "\n", "                        ", "break", "\n", "", "if", "(", "\n", "(", "indices", "[", "ind", "]", ".", "item", "(", ")", "!=", "bound", "and", "len", "(", "c", "[", "0", "]", ")", ">", "1", "and", "(", "\n", "(", "direction", "==", "'left'", "and", "indices", "[", "ind", "]", ".", "item", "(", ")", ">=", "v", ")", "\n", "or", "(", "direction", "==", "'right'", "and", "indices", "[", "ind", "]", ".", "item", "(", ")", "<=", "v", ")", "\n", "or", "cross_segment_check", "(", "indices", "[", "ind", "]", ".", "item", "(", ")", "+", "offset", ",", "v", "+", "offset", ",", "node", ",", "bound", "+", "offset", ")", "\n", ")", ")", "\n", "or", "indices", "[", "ind", "]", ".", "item", "(", ")", "+", "offset", "in", "c", "[", "0", "]", "\n", ")", ":", "\n", "                        ", "continue", "\n", "", "c_new", "=", "copy", ".", "deepcopy", "(", "c", ")", "\n", "c_new", "[", "0", "]", ".", "append", "(", "indices", "[", "ind", "]", ".", "item", "(", ")", "+", "offset", ")", "\n", "c_new", "[", "1", "]", "+=", "vals", "[", "ind", "]", ".", "item", "(", ")", "\n", "c_new", "[", "2", "]", "=", "False", "\n", "c_new", "[", "3", "]", "=", "b", "\n", "beam_new", ".", "append", "(", "c_new", ")", "\n", "tempk", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "c", "[", "2", "]", "=", "True", "\n", "beam_new", ".", "append", "(", "c", ")", "\n", "", "", "beam", "=", "sorted", "(", "beam_new", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "1", "]", "/", "len", "(", "tup", "[", "0", "]", ")", ",", "reverse", "=", "True", ")", "[", ":", "topk", "]", "\n", "", "return", "beam", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.fast_bidirectional_beam_search_alg": [[393, 506], ["range", "kgm.filter_sort_result", "kgm.entity_sent_gen_per_sample", "pruned_attention.sort", "range", "kgm.filter_sort_result", "attention.size", "pruned_attention.transpose().triu", "range", "kgm.entity_sent_gen_per_sample", "kgm.entity_sent_gen_per_sample", "kgm.entity_sent_gen_per_sample", "min", "max", "zip", "len", "range", "range", "attention.size", "pruned_attention.transpose().triu", "enumerate", "enumerate", "enumerate", "pruned_attention.transpose", "kgm.fast_unidirectional_beam_search_helper", "res.extend", "kgm.fast_unidirectional_beam_search_helper", "res.extend", "enumerate", "enumerate", "enumerate", "range", "pruned_attention.transpose", "heads.append", "tails.append", "relations.append", "range", "res.extend", "len", "len", "sum", "kgm.fast_bidirectional_beam_search_alg.sim_beam0"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.filter_sort_result", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.entity_sent_gen_per_sample", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.filter_sort_result", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.entity_sent_gen_per_sample", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.entity_sent_gen_per_sample", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.entity_sent_gen_per_sample", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.fast_unidirectional_beam_search_helper", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.fast_unidirectional_beam_search_helper"], ["", "def", "fast_bidirectional_beam_search_alg", "(", "attention", ",", "n", ",", "topk", ",", "max_len", ",", "min_len", ",", "score_threshold", ",", "inputs", ",", "tokenizer", ",", "model_args", ")", ":", "\n", "    ", "if", "model_args", ".", "beam_mode", "==", "\"IE\"", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "attention", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "eid_sids", ",", "sent_eid_sids", "=", "entity_sent_gen_per_sample", "(", "attention", ",", "b", ",", "inputs", ",", "tokenizer", ",", "model_args", ")", "\n", "if", "eid_sids", "is", "None", "or", "sent_eid_sids", "is", "None", ":", "\n", "                ", "continue", "\n", "", "offset", "=", "eid_sids", "[", "0", "]", "\n", "pruned_attention", "=", "attention", "[", "b", "]", "[", "offset", ":", "eid_sids", "[", "-", "1", "]", "+", "1", ",", "offset", ":", "eid_sids", "[", "-", "1", "]", "+", "1", "]", "\n", "if", "'gpt2'", "in", "model_args", ".", "model_name_or_path", ":", "\n", "                ", "pruned_attention_t", "=", "pruned_attention", ".", "transpose", "(", "0", ",", "1", ")", ".", "triu", "(", "diagonal", "=", "1", ")", "\n", "pruned_attention", "=", "pruned_attention", "+", "pruned_attention_t", "\n", "", "vals", ",", "indices", "=", "pruned_attention", ".", "sort", "(", "descending", "=", "True", ")", "\n", "for", "sent_eid_sid", "in", "sent_eid_sids", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "sent_eid_sid", ")", ")", ":", "\n", "                    ", "u", "=", "sent_eid_sid", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "i", "-", "1", ",", "i", "-", "1", "-", "model_args", ".", "dist_const", ",", "-", "1", ")", ":", "\n", "                        ", "if", "j", "<", "0", ":", "\n", "                            ", "break", "\n", "", "v", "=", "sent_eid_sid", "[", "j", "]", "\n", "left_cur_res", "=", "fast_unidirectional_beam_search_helper", "(", "u", ",", "offset", ",", "vals", ",", "indices", ",", "topk", ",", "b", ",", "'left'", ",", "v", ")", "\n", "res", ".", "extend", "(", "left_cur_res", ")", "\n", "", "for", "j", "in", "range", "(", "i", "+", "1", ",", "i", "+", "1", "+", "model_args", ".", "dist_const", ",", "1", ")", ":", "\n", "                        ", "if", "j", ">", "len", "(", "sent_eid_sid", ")", "-", "1", ":", "\n", "                            ", "break", "\n", "", "v", "=", "sent_eid_sid", "[", "j", "]", "\n", "right_cur_res", "=", "fast_unidirectional_beam_search_helper", "(", "u", ",", "offset", ",", "vals", ",", "indices", ",", "topk", ",", "b", ",", "'right'", ",", "v", ")", "\n", "res", ".", "extend", "(", "right_cur_res", ")", "\n", "", "", "", "", "return", "filter_sort_result", "(", "res", ",", "n", ",", "max_len", ",", "min_len", ",", "score_threshold", ",", "model_args", ".", "search_ranking_type", ")", "\n", "", "elif", "model_args", ".", "beam_mode", "==", "\"RC\"", ":", "\n", "        ", "model_args", ".", "add_extra_entity", "=", "False", ";", "res", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "attention", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "head_eid_sids", ",", "head_sent_eid_sids", "=", "entity_sent_gen_per_sample", "(", "attention", ",", "b", ",", "inputs", ",", "tokenizer", ",", "model_args", ",", "prefix", "=", "\"head_\"", ")", "\n", "tail_eid_sids", ",", "tail_sent_eid_sids", "=", "entity_sent_gen_per_sample", "(", "attention", ",", "b", ",", "inputs", ",", "tokenizer", ",", "model_args", ",", "prefix", "=", "\"tail_\"", ")", "\n", "relation_eid_sids", ",", "relation_sent_eid_sids", "=", "entity_sent_gen_per_sample", "(", "attention", ",", "b", ",", "inputs", ",", "tokenizer", ",", "model_args", ",", "prefix", "=", "\"relation_\"", ")", "\n", "if", "head_eid_sids", "is", "None", "or", "head_sent_eid_sids", "is", "None", "or", "tail_eid_sids", "is", "None", "or", "tail_sent_eid_sids", "is", "None", "or", "relation_eid_sids", "is", "None", "or", "relation_sent_eid_sids", "is", "None", ":", "\n", "                ", "continue", "\n", "", "offset", "=", "min", "(", "head_eid_sids", "[", "0", "]", ",", "tail_eid_sids", "[", "0", "]", ",", "relation_eid_sids", "[", "0", "]", ")", ";", "bound", "=", "max", "(", "head_eid_sids", "[", "-", "1", "]", ",", "tail_eid_sids", "[", "-", "1", "]", ",", "relation_eid_sids", "[", "-", "1", "]", ")", "\n", "pruned_attention", "=", "attention", "[", "b", "]", "[", "offset", ":", "bound", "+", "1", ",", "offset", ":", "bound", "+", "1", "]", "\n", "if", "'gpt2'", "in", "model_args", ".", "model_name_or_path", ":", "\n", "                ", "pruned_attention_t", "=", "pruned_attention", ".", "transpose", "(", "0", ",", "1", ")", ".", "triu", "(", "diagonal", "=", "1", ")", "\n", "pruned_attention", "=", "pruned_attention", "+", "pruned_attention_t", "\n", "", "for", "(", "head_sent_eid_sid", ",", "relation_sent_eid_sid", ",", "tail_sent_eid_sid", ")", "in", "zip", "(", "head_sent_eid_sids", ",", "relation_sent_eid_sids", ",", "tail_sent_eid_sids", ")", ":", "\n", "                ", "heads", "=", "[", "]", "\n", "for", "k", ",", "i", "in", "enumerate", "(", "head_sent_eid_sid", ")", ":", "\n", "                    ", "if", "inputs", "[", "'head_entity_ids'", "]", "[", "b", "]", "[", "i", "]", ".", "name", "==", "\"$NIL\"", ":", "\n", "                        ", "continue", "\n", "", "new", "=", "True", ";", "head", "=", "[", "]", "\n", "for", "p", ",", "j", "in", "enumerate", "(", "head_sent_eid_sid", ")", ":", "\n", "                        ", "if", "inputs", "[", "'head_entity_ids'", "]", "[", "b", "]", "[", "i", "]", ".", "span", "==", "inputs", "[", "'head_entity_ids'", "]", "[", "b", "]", "[", "j", "]", ".", "span", ":", "\n", "                            ", "if", "p", "<", "k", ":", "\n", "                                ", "new", "=", "False", ";", "break", "\n", "", "else", ":", "\n", "                                ", "head", ".", "append", "(", "j", ")", "\n", "", "", "", "if", "new", ":", "\n", "                        ", "heads", ".", "append", "(", "head", ")", "\n", "\n", "", "", "tails", "=", "[", "]", "\n", "for", "k", ",", "i", "in", "enumerate", "(", "tail_sent_eid_sid", ")", ":", "\n", "                    ", "if", "inputs", "[", "'tail_entity_ids'", "]", "[", "b", "]", "[", "i", "]", ".", "name", "==", "\"$NIL\"", ":", "\n", "                        ", "continue", "\n", "", "new", "=", "True", ";", "tail", "=", "[", "]", "\n", "for", "p", ",", "j", "in", "enumerate", "(", "tail_sent_eid_sid", ")", ":", "\n", "                        ", "if", "inputs", "[", "'tail_entity_ids'", "]", "[", "b", "]", "[", "i", "]", ".", "span", "==", "inputs", "[", "'tail_entity_ids'", "]", "[", "b", "]", "[", "j", "]", ".", "span", ":", "\n", "                            ", "if", "p", "<", "k", ":", "\n", "                                ", "new", "=", "False", ";", "break", "\n", "", "else", ":", "\n", "                                ", "tail", ".", "append", "(", "j", ")", "\n", "", "", "", "if", "new", ":", "\n", "                        ", "tails", ".", "append", "(", "tail", ")", "\n", "\n", "", "", "relations", "=", "[", "]", "\n", "for", "k", ",", "i", "in", "enumerate", "(", "relation_sent_eid_sid", ")", ":", "\n", "                    ", "if", "inputs", "[", "'relation_entity_ids'", "]", "[", "b", "]", "[", "i", "]", ".", "name", "==", "\"$NIL\"", ":", "\n", "                        ", "continue", "\n", "", "new", "=", "True", ";", "relation", "=", "[", "]", "\n", "for", "p", ",", "j", "in", "enumerate", "(", "relation_sent_eid_sid", ")", ":", "\n", "                        ", "if", "inputs", "[", "'relation_entity_ids'", "]", "[", "b", "]", "[", "i", "]", ".", "span", "==", "inputs", "[", "'relation_entity_ids'", "]", "[", "b", "]", "[", "j", "]", ".", "span", ":", "\n", "                            ", "if", "p", "<", "k", ":", "\n", "                                ", "new", "=", "False", ";", "break", "\n", "", "else", ":", "\n", "                                ", "relation", ".", "append", "(", "j", ")", "\n", "", "", "", "if", "new", ":", "\n", "                        ", "relations", ".", "append", "(", "relation", ")", "\n", "\n", "", "", "def", "sim_beam0", "(", "head", ",", "relation", ",", "tail", ")", ":", "\n", "                    ", "beam_score", "=", "-", "1", ";", "beam", "=", "[", "]", "\n", "for", "r", "in", "range", "(", "1", ",", "len", "(", "relation", ")", "+", "1", ")", ":", "\n", "                        ", "for", "l", "in", "range", "(", "r", ")", ":", "\n", "                            ", "part_rel", "=", "relation", "[", "l", ":", "r", "]", "\n", "rel_score", "=", "sum", "(", "[", "pruned_attention", "[", "i", "-", "offset", "]", "[", "j", "-", "offset", "]", "for", "i", ",", "j", "in", "zip", "(", "part_rel", ",", "part_rel", "[", "1", ":", "]", ")", "]", ")", "\n", "for", "h", "in", "head", ":", "\n", "                                ", "for", "t", "in", "tail", ":", "\n", "                                    ", "score", "=", "float", "(", "pruned_attention", "[", "h", "-", "offset", "]", "[", "relation", "[", "l", "]", "-", "offset", "]", "+", "rel_score", "+", "pruned_attention", "[", "relation", "[", "r", "-", "1", "]", "-", "offset", "]", "[", "t", "-", "offset", "]", ")", "\n", "if", "score", ">", "beam_score", ":", "\n", "                                        ", "beam_score", "=", "score", ";", "beam", "=", "[", "[", "h", "]", "+", "part_rel", "+", "[", "t", "]", ",", "score", ",", "True", ",", "b", "]", "\n", "", "", "", "", "", "return", "beam", "\n", "\n", "", "for", "head", "in", "heads", ":", "\n", "                    ", "for", "tail", "in", "tails", ":", "\n", "                        ", "cur_res", "=", "[", "]", "\n", "for", "relation", "in", "relations", ":", "\n", "                            ", "beam", "=", "sim_beam0", "(", "head", ",", "relation", ",", "tail", ")", "\n", "if", "beam", "!=", "[", "]", ":", "\n", "                                ", "cur_res", ".", "append", "(", "beam", ")", "\n", "", "beam", "=", "sim_beam0", "(", "tail", ",", "relation", ",", "head", ")", "\n", "beam", "[", "0", "]", "[", "0", "]", ",", "beam", "[", "0", "]", "[", "-", "1", "]", "=", "beam", "[", "0", "]", "[", "-", "1", "]", ",", "beam", "[", "0", "]", "[", "0", "]", "\n", "if", "beam", "!=", "[", "]", ":", "\n", "                                ", "cur_res", ".", "append", "(", "beam", ")", "\n", "", "", "res", ".", "extend", "(", "sorted", "(", "cur_res", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", "/", "len", "(", "x", "[", "0", "]", ")", ")", "[", ":", "topk", "*", "2", "]", ")", "\n", "", "", "", "", "return", "filter_sort_result", "(", "res", ",", "n", ",", "max_len", ",", "min_len", ",", "score_threshold", ",", "model_args", ".", "search_ranking_type", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.fast_unsupervised_bidirectional_beam_search": [[507, 517], ["time.time", "kgm.fast_bidirectional_beam_search_alg", "logger.info", "kgm.search_results_gen", "time.time"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.fast_bidirectional_beam_search_alg", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.search_results_gen"], ["", "", "def", "fast_unsupervised_bidirectional_beam_search", "(", "attention", ",", "model_args", ",", "inputs", ",", "tokenizer", ")", ":", "\n", "    ", "tic", "=", "time", ".", "time", "(", ")", "\n", "res_indices", "=", "fast_bidirectional_beam_search_alg", "(", "attention", ",", "model_args", ".", "search_n", ",", "\n", "model_args", ".", "beam_size", ",", "\n", "model_args", ".", "search_max_len", ",", "\n", "model_args", ".", "search_min_len", ",", "\n", "model_args", ".", "search_score_threshold", ",", "\n", "inputs", ",", "tokenizer", ",", "model_args", ")", "\n", "logger", ".", "info", "(", "'search time cost {}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "return", "search_results_gen", "(", "res_indices", ",", "model_args", ",", "inputs", ",", "tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.convert_seq_id_to_subword": [[518, 525], ["[].item", "isinstance", "tokenizer.convert_ids_to_tokens"], "function", ["None"], ["", "def", "convert_seq_id_to_subword", "(", "seq_id", ",", "batch", ",", "inputs", ",", "tokenizer", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "inputs", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "'input_ids'", "in", "inputs", ":", "\n", "            ", "inputs", "=", "inputs", "[", "'input_ids'", "]", "\n", "", "", "subword_id", "=", "inputs", "[", "batch", "]", "[", "seq_id", "]", ".", "item", "(", ")", "\n", "subword", "=", "tokenizer", ".", "convert_ids_to_tokens", "(", "[", "subword_id", "]", ")", "[", "0", "]", "\n", "return", "subword", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.merge_search_res": [[527, 533], ["search_res.items", "global_search_res[].extend"], "function", ["None"], ["", "def", "merge_search_res", "(", "search_res", ",", "global_search_res", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "search_res", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "global_search_res", ":", "\n", "            ", "global_search_res", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "global_search_res", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.predict_and_save_results": [[535, 648], ["logger.info", "logger.info", "logger.info", "torch.nn.DataParallel.eval", "transformers.training_args.is_torch_tpu_available", "tqdm.auto.tqdm", "sorted", "torch.nn.DataParallel", "trainer.num_examples", "pl.ParallelLoader().per_device_loader", "inputs.pop", "inputs.pop", "inputs.pop", "inputs.pop", "inputs.pop", "inputs.pop", "inputs.pop", "inputs.pop", "inputs.items", "list", "sorted.items", "any", "v.to", "torch.no_grad", "time.time", "torch.nn.DataParallel.", "logger.info", "inputs.items", "transformers.training_args.is_torch_tpu_available", "xm.mesh_reduce.cpu().numpy", "torch.cat.cpu().numpy", "trainer.compute_metrics", "len", "numpy.mean", "trainer.compute_metrics.keys", "transformers.trainer_utils.PredictionOutput", "pl.ParallelLoader", "v.cpu", "kgm.transform_layer_attention", "kgm.merge_search_res", "ValueError", "trainer.distributed_concat", "trainer.distributed_concat", "transformers.trainer_utils.EvalPrediction", "key.startswith", "trainer.compute_metrics.pop", "kgm.layer_attention", "kgm.fast_unsupervised_bidirectional_beam_search", "logits.detach", "torch.cat", "inputs.get", "xm.mesh_reduce", "xm.mesh_reduce", "xm.mesh_reduce.cpu", "torch.cat.cpu", "inputs.get", "time.time", "step_eval_loss.mean().item", "inputs[].detach", "torch.cat", "trainer.num_examples", "trainer.num_examples", "logits.detach", "step_eval_loss.mean", "inputs[].detach"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.transform_layer_attention", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.merge_search_res", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.layer_attention", "home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.fast_unsupervised_bidirectional_beam_search"], ["", "", "", "def", "predict_and_save_results", "(", "dataloader", ":", "DataLoader", ",", "description", ":", "str", ",", "trainer", ",", "\n", "model_args", ",", "tokenizer", ",", "prediction_loss_only", ":", "Optional", "[", "bool", "]", "=", "None", "\n", ")", ":", "\n", "    ", "if", "model_args", ".", "compute_loss", ":", "\n", "        ", "prediction_loss_only", "=", "prediction_loss_only", "if", "prediction_loss_only", "is", "not", "None", "else", "trainer", ".", "prediction_loss_only", "\n", "\n", "", "model", "=", "trainer", ".", "model", "\n", "if", "trainer", ".", "args", ".", "n_gpu", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "trainer", ".", "model", "\n", "\n", "", "batch_size", "=", "dataloader", ".", "batch_size", "\n", "logger", ".", "info", "(", "\"***** Running %s *****\"", ",", "description", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "trainer", ".", "num_examples", "(", "dataloader", ")", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "batch_size", ")", "\n", "if", "model_args", ".", "compute_loss", ":", "\n", "        ", "eval_losses", ":", "List", "[", "float", "]", "=", "[", "]", "\n", "preds", ":", "torch", ".", "Tensor", "=", "None", "\n", "label_ids", ":", "torch", ".", "Tensor", "=", "None", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "if", "is_torch_tpu_available", "(", ")", ":", "\n", "        ", "dataloader", "=", "pl", ".", "ParallelLoader", "(", "dataloader", ",", "[", "trainer", ".", "args", ".", "device", "]", ")", ".", "per_device_loader", "(", "trainer", ".", "args", ".", "device", ")", "\n", "\n", "", "res_dict", "=", "{", "}", "\n", "res_rel_dict", "=", "{", "}", "\n", "search_res", "=", "{", "}", "\n", "stats", "=", "{", "'max'", ":", "-", "1", ",", "'min'", ":", "1", ",", "'sum'", ":", "0", ",", "'num'", ":", "0", ",", "'plot'", ":", "None", "}", "\n", "for", "inputs", "in", "tqdm", "(", "dataloader", ",", "desc", "=", "description", ")", ":", "\n", "        ", "if", "model_args", ".", "compute_loss", ":", "\n", "            ", "has_labels", "=", "any", "(", "inputs", ".", "get", "(", "k", ")", "is", "not", "None", "for", "k", "in", "[", "\"labels\"", ",", "\"lm_labels\"", ",", "\"masked_lm_labels\"", "]", ")", "\n", "", "entity_ids", "=", "inputs", ".", "pop", "(", "'entity_ids'", ")", "\n", "head_entity_ids", "=", "inputs", ".", "pop", "(", "'head_entity_ids'", ")", "\n", "tail_entity_ids", "=", "inputs", ".", "pop", "(", "'tail_entity_ids'", ")", "\n", "relation_entity_ids", "=", "inputs", ".", "pop", "(", "'relation_entity_ids'", ")", "\n", "special_tokens_mask", "=", "inputs", ".", "pop", "(", "'special_tokens_mask'", ")", "\n", "docid", "=", "inputs", ".", "pop", "(", "'docid'", ")", "\n", "offset", "=", "inputs", ".", "pop", "(", "'offset'", ")", "\n", "text", "=", "inputs", ".", "pop", "(", "'text'", ")", "\n", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", ":", "\n", "            ", "inputs", "[", "k", "]", "=", "v", ".", "to", "(", "trainer", ".", "args", ".", "device", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "tic", "=", "time", ".", "time", "(", ")", "\n", "outputs", "=", "model", "(", "**", "inputs", ")", "\n", "logger", ".", "info", "(", "'forward time cost {}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", ":", "\n", "                ", "inputs", "[", "k", "]", "=", "v", ".", "cpu", "(", ")", "\n", "", "inputs", "[", "'entity_ids'", "]", "=", "entity_ids", "\n", "inputs", "[", "'head_entity_ids'", "]", "=", "head_entity_ids", "\n", "inputs", "[", "'tail_entity_ids'", "]", "=", "tail_entity_ids", "\n", "inputs", "[", "'relation_entity_ids'", "]", "=", "relation_entity_ids", "\n", "inputs", "[", "'special_tokens_mask'", "]", "=", "special_tokens_mask", "\n", "inputs", "[", "'docid'", "]", "=", "docid", "\n", "inputs", "[", "'offset'", "]", "=", "offset", "\n", "inputs", "[", "'text'", "]", "=", "text", "\n", "if", "model_args", ".", "generation_type", "==", "'fast_unsupervised_bidirectional_beam_search'", ":", "\n", "                ", "attentions", "=", "transform_layer_attention", "(", "layer_attention", "(", "outputs", "[", "-", "1", "]", ",", "model_args", ".", "search_layer_id", ")", ",", "\n", "model_args", ".", "search_attention_head_type", ")", "\n", "merge_search_res", "(", "fast_unsupervised_bidirectional_beam_search", "(", "attentions", ",", "model_args", ",", "inputs", ",", "tokenizer", ")", ",", "\n", "search_res", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'search not supported'", ")", "\n", "", "if", "model_args", ".", "compute_loss", ":", "\n", "                ", "if", "has_labels", ":", "\n", "                    ", "step_eval_loss", ",", "logits", "=", "outputs", "[", ":", "2", "]", "\n", "eval_losses", "+=", "[", "step_eval_loss", ".", "mean", "(", ")", ".", "item", "(", ")", "]", "\n", "", "else", ":", "\n", "                    ", "logits", "=", "outputs", "[", "0", "]", "\n", "", "", "", "if", "model_args", ".", "compute_loss", ":", "\n", "            ", "if", "not", "prediction_loss_only", ":", "\n", "                ", "if", "preds", "is", "None", ":", "\n", "                    ", "preds", "=", "logits", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                    ", "preds", "=", "torch", ".", "cat", "(", "(", "preds", ",", "logits", ".", "detach", "(", ")", ")", ",", "dim", "=", "0", ")", "\n", "", "if", "inputs", ".", "get", "(", "\"labels\"", ")", "is", "not", "None", ":", "\n", "                    ", "if", "label_ids", "is", "None", ":", "\n", "                        ", "label_ids", "=", "inputs", "[", "\"labels\"", "]", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "label_ids", "=", "torch", ".", "cat", "(", "(", "label_ids", ",", "inputs", "[", "\"labels\"", "]", ".", "detach", "(", ")", ")", ",", "dim", "=", "0", ")", "\n", "", "", "", "", "", "if", "model_args", ".", "compute_loss", ":", "\n", "        ", "if", "trainer", ".", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "            ", "if", "preds", "is", "not", "None", ":", "\n", "                ", "preds", "=", "trainer", ".", "distributed_concat", "(", "preds", ",", "num_total_examples", "=", "trainer", ".", "num_examples", "(", "dataloader", ")", ")", "\n", "", "if", "label_ids", "is", "not", "None", ":", "\n", "                ", "label_ids", "=", "trainer", ".", "distributed_concat", "(", "label_ids", ",", "num_total_examples", "=", "trainer", ".", "num_examples", "(", "dataloader", ")", ")", "\n", "", "", "elif", "is_torch_tpu_available", "(", ")", ":", "\n", "            ", "if", "preds", "is", "not", "None", ":", "\n", "                ", "preds", "=", "xm", ".", "mesh_reduce", "(", "\"eval_preds\"", ",", "preds", ",", "torch", ".", "cat", ")", "\n", "", "if", "label_ids", "is", "not", "None", ":", "\n", "                ", "label_ids", "=", "xm", ".", "mesh_reduce", "(", "\"eval_label_ids\"", ",", "label_ids", ",", "torch", ".", "cat", ")", "\n", "\n", "", "", "if", "preds", "is", "not", "None", ":", "\n", "            ", "preds", "=", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "label_ids", "is", "not", "None", ":", "\n", "            ", "label_ids", "=", "label_ids", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "trainer", ".", "compute_metrics", "is", "not", "None", "and", "preds", "is", "not", "None", "and", "label_ids", "is", "not", "None", ":", "\n", "            ", "metrics", "=", "trainer", ".", "compute_metrics", "(", "EvalPrediction", "(", "predictions", "=", "preds", ",", "label_ids", "=", "label_ids", ")", ")", "\n", "", "else", ":", "\n", "            ", "metrics", "=", "{", "}", "\n", "", "if", "len", "(", "eval_losses", ")", ">", "0", ":", "\n", "            ", "metrics", "[", "\"eval_loss\"", "]", "=", "np", ".", "mean", "(", "eval_losses", ")", "\n", "\n", "", "for", "key", "in", "list", "(", "metrics", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "not", "key", ".", "startswith", "(", "\"eval_\"", ")", ":", "\n", "                ", "metrics", "[", "f\"eval_{key}\"", "]", "=", "metrics", ".", "pop", "(", "key", ")", "\n", "", "", "", "res_dict", "=", "sorted", "(", "res_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "if", "model_args", ".", "compute_loss", ":", "\n", "        ", "return", "PredictionOutput", "(", "predictions", "=", "preds", ",", "label_ids", "=", "label_ids", ",", "metrics", "=", "metrics", ")", ",", "(", "res_dict", ",", "res_rel_dict", ",", "stats", ",", "search_res", ")", "\n", "", "return", "None", ",", "(", "res_dict", ",", "res_rel_dict", ",", "stats", ",", "search_res", ")", "", "", ""]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.generator_utils.WhitespaceTokenizer.__init__": [[22, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.generator_utils.WhitespaceTokenizer.__call__": [[25, 29], ["text.split", "spacy.tokens.Doc", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "text", ")", ":", "\n", "        ", "words", "=", "text", ".", "split", "(", "' '", ")", "\n", "spaces", "=", "[", "True", "]", "*", "len", "(", "words", ")", "\n", "return", "Doc", "(", "self", ".", "vocab", ",", "words", "=", "words", ",", "spaces", "=", "spaces", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.generator_utils.get_empty_candidates": [[35, 42], ["None"], "function", ["None"], ["", "def", "get_empty_candidates", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"candidate_spans\"", ":", "[", "[", "-", "1", ",", "-", "1", "]", "]", ",", "\n", "\"candidate_entities\"", ":", "[", "[", "\"@@PADDING@@\"", "]", "]", ",", "\n", "\"candidate_entity_priors\"", ":", "[", "[", "1.0", "]", "]", ",", "\n", "\"tokenized_text\"", ":", "None", ",", "\n", "\"candidate_positions\"", ":", "[", "[", "-", "1", ",", "-", "1", "]", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.generator_utils.span_filter_func": [[47, 54], ["any"], "function", ["None"], ["def", "span_filter_func", "(", "span", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "if", "span", "[", "0", "]", "in", "STOP_WORDS", "or", "span", "[", "-", "1", "]", "in", "STOP_WORDS", ":", "\n", "        ", "return", "False", "\n", "\n", "", "if", "any", "(", "[", "c", "in", "STOP_SYMBOLS", "for", "c", "in", "span", "]", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.SequentialDataset.__init__": [[55, 73], ["len", "logger.addHandler", "logging.FileHandler", "re_data.REDataset", "re_data.SequentialDataset.features.extend", "os.path.join", "filepaths[].split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filepaths", ",", "\n", "tokenizer", ",", "\n", "mention_generator", ",", "\n", "max_seq_length", ",", "\n", "overwrite_cache", ":", "Optional", "[", "bool", "]", "=", "False", ")", ":", "\n", "        ", "if", "len", "(", "filepaths", ")", "==", "0", ":", "\n", "            ", "self", ".", "features", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "logger", ".", "addHandler", "(", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "'/'", ".", "join", "(", "filepaths", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", ":", "-", "2", "]", ")", ",", "\n", "'run_kbp_{}_{}.log'", ".", "format", "(", "tokenizer", ".", "__class__", ".", "__name__", ",", "\n", "mention_generator", ".", "__class__", ".", "__name__", ")", ")", ")", ")", "\n", "self", ".", "features", "=", "[", "]", "\n", "for", "filepath", "in", "filepaths", ":", "\n", "                ", "dataset", "=", "REDataset", "(", "tokenizer", ",", "\n", "mention_generator", ",", "\n", "max_seq_length", ",", "\n", "overwrite_cache", ")", "\n", "self", ".", "features", ".", "extend", "(", "dataset", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.SequentialDataset.__len__": [[74, 76], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.SequentialDataset.__getitem__": [[77, 79], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", "->", "InputFeatures", ":", "\n", "        ", "return", "self", ".", "features", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.REDataset.__init__": [[81, 98], ["text_handler.TextHandler", "re_data.Processor"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "filedir", ",", "\n", "index", ",", "\n", "tokenizer", ",", "\n", "mention_generator", ",", "\n", "max_seq_length", ",", "\n", "example_batch_size", "=", "2048", ",", "\n", "overwrite_cache", ":", "Optional", "[", "bool", "]", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "filedir", "=", "filedir", "\n", "self", ".", "index", "=", "index", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "overwrite_cache", "=", "overwrite_cache", "\n", "self", ".", "use_coref", "=", "False", "\n", "self", ".", "text_handler", "=", "TextHandler", "(", "index", "=", "self", ".", "index", ",", "use_coref", "=", "self", ".", "use_coref", ",", "DIR", "=", "filedir", ")", "\n", "self", ".", "processor", "=", "Processor", "(", "tokenizer", ",", "self", ".", "text_handler", ",", "mention_generator", ",", "example_batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.REDataset.generate_batched_datasets": [[99, 107], ["enumerate", "tqdm.tqdm.tqdm", "logger.debug", "re_data.REDataset.processor._convert_batch_examples_to_features", "re_data.DatasetWrapper", "len"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor._convert_batch_examples_to_features"], ["", "def", "generate_batched_datasets", "(", "self", ")", ":", "\n", "        ", "for", "i", ",", "self", ".", "features", "in", "enumerate", "(", "\n", "tqdm", "(", "self", ".", "processor", ".", "_convert_batch_examples_to_features", "(", "\n", "self", ".", "filedir", ",", "self", ".", "index", ",", "self", ".", "overwrite_cache", ",", "\n", "max_length", "=", "self", ".", "max_seq_length", ",", "use_coref", "=", "self", ".", "use_coref", "\n", ")", ",", "desc", "=", "'process feature files...'", ")", ")", ":", "\n", "            ", "logger", ".", "debug", "(", "'features size {}'", ".", "format", "(", "len", "(", "self", ".", "features", ")", ")", ")", "\n", "yield", "DatasetWrapper", "(", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.DatasetWrapper.__init__": [[109, 114], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "features", ",", "\n", ")", ":", "\n", "        ", "self", ".", "features", "=", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.DatasetWrapper.__len__": [[115, 117], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.DatasetWrapper.__getitem__": [[118, 120], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", "->", "InputFeatures", ":", "\n", "        ", "return", "self", ".", "features", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor.__init__": [[122, 129], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tokenizer", ",", "text_handler", ",", "mention_generator", ",", "example_batch_size", "=", "2048", ")", ":", "\n", "        ", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "text_handler", "=", "text_handler", "\n", "self", ".", "mention_generator", "=", "mention_generator", "\n", "self", ".", "example_batch_size", "=", "example_batch_size", "\n", "self", ".", "examples", "=", "[", "]", "\n", "self", ".", "features", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor.overlap_span": [[130, 132], ["None"], "methods", ["None"], ["", "def", "overlap_span", "(", "self", ",", "span0", ",", "span1", ",", "tokenizer", ")", ":", "\n", "        ", "return", "span1", "[", "1", "]", ">", "span0", "[", "0", "]", "and", "span1", "[", "0", "]", "<", "span0", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor._create_batch_examples": [[133, 153], ["enumerate", "tqdm.tqdm.tqdm", "logger.debug", "logger.debug", "logger.debug", "logger.debug", "re_data.Processor.examples.append", "len", "re_data.InputExample", "logger.debug", "logger.debug", "len"], "methods", ["None"], ["", "def", "_create_batch_examples", "(", "self", ")", ":", "\n", "        ", "last_dir_name", "=", "None", "\n", "file_cnt", "=", "0", "\n", "for", "i", ",", "(", "text", ",", "offset", ",", "dir_name", ",", "filename", ")", "in", "enumerate", "(", "tqdm", "(", "self", ".", "text_handler", ",", "desc", "=", "'create batch examples...'", ")", ")", ":", "\n", "            ", "logger", ".", "debug", "(", "'text: {}'", ".", "format", "(", "text", ")", ")", "\n", "logger", ".", "debug", "(", "'offset: {}'", ".", "format", "(", "offset", ")", ")", "\n", "logger", ".", "debug", "(", "'dir_name: {}'", ".", "format", "(", "dir_name", ")", ")", "\n", "logger", ".", "debug", "(", "'filename: {}'", ".", "format", "(", "filename", ")", ")", "\n", "if", "last_dir_name", "!=", "dir_name", ":", "\n", "                ", "file_cnt", "+=", "1", "\n", "last_dir_name", "=", "dir_name", "\n", "", "self", ".", "examples", ".", "append", "(", "InputExample", "(", "docid", "=", "dir_name", ",", "text", "=", "text", ",", "offset", "=", "offset", ")", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "self", ".", "example_batch_size", "==", "0", ":", "\n", "                ", "logger", ".", "debug", "(", "'processed number of sentences/samples {}'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "yield", "self", ".", "examples", "\n", "self", ".", "examples", "=", "[", "]", "\n", "logger", ".", "debug", "(", "'cleaned example size {}'", ".", "format", "(", "len", "(", "self", ".", "examples", ")", ")", ")", "\n", "", "", "if", "len", "(", "self", ".", "examples", ")", "!=", "0", ":", "\n", "            ", "yield", "self", ".", "examples", "\n", "self", ".", "examples", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor._convert_to_coref": [[154, 164], ["re_data.Processor.text_handler.get_coref", "logger.debug", "coref[].strip", "logger.debug", "logger.debug", "logger.debug", "re_data.Processor.text_handler.cur_text[].strip().lower", "str", "str", "re_data.Processor.text_handler.cur_text[].strip"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.data.text_handler.TextHandler.get_coref"], ["", "", "def", "_convert_to_coref", "(", "self", ",", "name", ",", "span", ")", ":", "\n", "        ", "coref", "=", "self", ".", "text_handler", ".", "get_coref", "(", "span", ")", "\n", "if", "coref", "and", "self", ".", "text_handler", ".", "cur_text", "[", "coref", "[", "1", "]", "[", "0", "]", ":", "coref", "[", "1", "]", "[", "1", "]", "]", ".", "strip", "(", "' '", ")", ".", "lower", "(", ")", "in", "re_pronouns", ":", "\n", "            ", "logger", ".", "debug", "(", "'org name: {}'", ".", "format", "(", "name", ")", ")", "\n", "name", "=", "coref", "[", "0", "]", ".", "strip", "(", "'\\n'", ")", "\n", "logger", ".", "debug", "(", "'coref name: {}'", ".", "format", "(", "name", ")", ")", "\n", "logger", ".", "debug", "(", "'org span: {}'", ".", "format", "(", "str", "(", "span", ")", ")", ")", "\n", "span", "=", "coref", "[", "1", "]", "\n", "logger", ".", "debug", "(", "'coref span: {}'", ".", "format", "(", "str", "(", "span", ")", ")", ")", "\n", "", "return", "name", ",", "span", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor._convert_batch_examples_to_features": [[165, 352], ["enumerate", "tqdm.tqdm.tqdm", "logger.debug", "os.path.join", "os.path.join", "logger.debug", "re_data.Processor._create_batch_examples", "filelock.FileLock", "len", "os.path.exists", "time.time", "logger.debug", "re_data.Processor.tokenizer.batch_encode_plus", "range", "time.time", "torch.save", "torch.save", "logger.debug", "len", "len", "re_data.Processor.mention_generator.get_mentions_raw_text", "logger.debug", "enumerate", "enumerate", "enumerate", "enumerate", "inputs.pop", "re_data.InputFeatures", "re_data.Processor.features.append", "len", "logger.debug", "os.path.getsize", "logger.debug", "torch.load", "logger.debug", "logger.debug", "enumerate", "logger.debug", "enumerate", "logger.debug", "enumerate", "logger.debug", "enumerate", "time.time", "str", "entity_ids.append", "zip", "logger.debug", "re_data.Processor.overlap_span", "entity_ids.append", "head_entity_ids.append", "zip", "logger.debug", "re_data.Processor.overlap_span", "head_entity_ids.append", "tail_entity_ids.append", "zip", "logger.debug", "re_data.Processor.overlap_span", "tail_entity_ids.append", "relation_entity_ids.append", "zip", "logger.debug", "re_data.Processor.overlap_span", "relation_entity_ids.append", "time.time", "time.time", "time.time", "Entity", "re_data.Processor.tokenizer.convert_ids_to_tokens", "entity_ids.append", "Entity", "Entity", "re_data.Processor.tokenizer.convert_ids_to_tokens", "head_entity_ids.append", "Entity", "Entity", "re_data.Processor.tokenizer.convert_ids_to_tokens", "tail_entity_ids.append", "Entity", "Entity", "re_data.Processor.tokenizer.convert_ids_to_tokens", "relation_entity_ids.append", "Entity", "re_data.Processor._convert_to_coref", "Entity", "re_data.Processor._convert_to_coref", "Entity", "re_data.Processor._convert_to_coref", "Entity", "re_data.Processor._convert_to_coref", "Entity"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor._create_batch_examples", "home.repos.pwc.inspect_result.cgraywang_deepex.data.np.NPMentionGenerator.get_mentions_raw_text", "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor.overlap_span", "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor.overlap_span", "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor.overlap_span", "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor.overlap_span", "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor._convert_to_coref", "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor._convert_to_coref", "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor._convert_to_coref", "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.Processor._convert_to_coref"], ["", "def", "_convert_batch_examples_to_features", "(", "self", ",", "filedir", ",", "index", ",", "overwrite_cache", ",", "use_coref", "=", "False", ",", "\n", "max_length", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "for", "i", ",", "self", ".", "examples", "in", "enumerate", "(", "tqdm", "(", "self", ".", "_create_batch_examples", "(", ")", ",", "desc", "=", "'convert batch examples to features...'", ")", ")", ":", "\n", "            ", "logger", ".", "debug", "(", "'example size {}'", ".", "format", "(", "len", "(", "self", ".", "examples", ")", ")", ")", "\n", "cached_features_file", "=", "os", ".", "path", ".", "join", "(", "\n", "filedir", ",", "\n", "\"cached_{}_{}_{}_{}_{}_{}_{}\"", ".", "format", "(", "\n", "index", ",", "self", ".", "tokenizer", ".", "__class__", ".", "__name__", ",", "self", ".", "mention_generator", ".", "__class__", ".", "__name__", ",", "max_length", ",", "i", ",", "\n", "use_coref", ",", "self", ".", "example_batch_size", "\n", ")", ",", "\n", ")", "\n", "cached_mentions_file", "=", "os", ".", "path", ".", "join", "(", "\n", "filedir", ",", "\n", "\"cachedmentions_{}_{}_{}_{}_{}_{}_{}\"", ".", "format", "(", "\n", "index", ",", "self", ".", "tokenizer", ".", "__class__", ".", "__name__", ",", "self", ".", "mention_generator", ".", "__class__", ".", "__name__", ",", "max_length", ",", "i", ",", "\n", "use_coref", ",", "self", ".", "example_batch_size", "\n", ")", ",", "\n", ")", "\n", "lock_path", "=", "cached_features_file", "+", "\".lock\"", "\n", "with", "FileLock", "(", "lock_path", ")", ":", "\n", "\n", "                ", "if", "os", ".", "path", ".", "exists", "(", "cached_features_file", ")", "and", "not", "overwrite_cache", ":", "\n", "                    ", "start", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "                        ", "if", "os", ".", "path", ".", "getsize", "(", "cached_features_file", ")", "==", "0", ":", "\n", "                            ", "self", ".", "features", "=", "[", "]", "\n", "logger", ".", "debug", "(", "\n", "f\"Skipping features from cached file {cached_features_file} [took %.3f s]\"", ",", "time", ".", "time", "(", ")", "-", "start", "\n", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "features", "=", "torch", ".", "load", "(", "cached_features_file", ")", "\n", "logger", ".", "debug", "(", "\n", "f\"Loading features from cached file {cached_features_file} [took %.3f s]\"", ",", "time", ".", "time", "(", ")", "-", "start", "\n", ")", "\n", "", "", "except", ":", "\n", "                        ", "self", ".", "features", "=", "[", "]", "\n", "", "", "else", ":", "\n", "                    ", "logger", ".", "debug", "(", "f\"Creating features from dataset file at {index} {i}\"", ")", "\n", "if", "max_length", "is", "None", ":", "\n", "                        ", "max_length", "=", "self", ".", "tokenizer", ".", "max_len", "\n", "", "batch_encoding", "=", "self", ".", "tokenizer", ".", "batch_encode_plus", "(", "\n", "[", "example", ".", "text", "for", "example", "in", "self", ".", "examples", "]", ",", "\n", "max_length", "=", "max_length", ",", "\n", "padding", "=", "\"max_length\"", ",", "\n", "truncation", "=", "True", ",", "\n", "return_special_tokens_mask", "=", "True", ",", "\n", "return_offsets_mapping", "=", "True", "\n", ")", "\n", "all_mentions", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "examples", ")", ")", ":", "\n", "                        ", "inputs", "=", "{", "k", ":", "batch_encoding", "[", "k", "]", "[", "i", "]", "for", "k", "in", "batch_encoding", "}", "\n", "mentions", "=", "self", ".", "mention_generator", ".", "get_mentions_raw_text", "(", "self", ".", "examples", "[", "i", "]", ".", "text", ",", "extra", "=", "(", "self", ".", "examples", "[", "i", "]", ".", "docid", ",", "self", ".", "examples", "[", "i", "]", ".", "offset", ")", ")", "\n", "all_mentions", "[", "(", "self", ".", "examples", "[", "i", "]", ".", "docid", ",", "self", ".", "examples", "[", "i", "]", ".", "offset", ")", "]", "=", "mentions", "\n", "logger", ".", "debug", "(", "(", "'candidate entities: {}'", ".", "format", "(", "str", "(", "mentions", "[", "'candidate_entities'", "]", ")", ")", ")", ")", "\n", "\n", "entity_ids", "=", "[", "]", "\n", "for", "j", ",", "encoding_span", "in", "enumerate", "(", "batch_encoding", "[", "'offset_mapping'", "]", "[", "i", "]", ")", ":", "\n", "                            ", "if", "encoding_span", "[", "0", "]", "==", "0", "and", "encoding_span", "[", "1", "]", "==", "0", ":", "\n", "                                ", "entity_ids", ".", "append", "(", "Entity", "(", "name", "=", "'$NIL$'", ",", "span", "=", "[", "-", "1", ",", "-", "1", "]", ",", "score", "=", "1.0", ")", ")", "\n", "continue", "\n", "", "has_entity", "=", "False", "\n", "logger", ".", "debug", "(", "'encoding_span: {} name: {}'", ".", "format", "(", "encoding_span", ",", "\n", "self", ".", "tokenizer", ".", "convert_ids_to_tokens", "(", "\n", "batch_encoding", "[", "'input_ids'", "]", "[", "i", "]", "[", "j", "]", ")", ")", ")", "\n", "for", "m", ",", "(", "name", ",", "raw_span", ")", "in", "enumerate", "(", "\n", "zip", "(", "mentions", "[", "'candidate_entities'", "]", ",", "mentions", "[", "'candidate_positions'", "]", ")", ")", ":", "\n", "                                ", "if", "raw_span", "[", "0", "]", "==", "-", "1", "and", "raw_span", "[", "1", "]", "==", "-", "1", ":", "\n", "                                    ", "continue", "\n", "", "logger", ".", "debug", "(", "'raw_span: {} name: {}'", ".", "format", "(", "raw_span", ",", "name", ")", ")", "\n", "if", "self", ".", "overlap_span", "(", "encoding_span", ",", "raw_span", ",", "self", ".", "tokenizer", ")", ":", "\n", "                                    ", "char_span", "=", "[", "raw_span", "[", "0", "]", "+", "self", ".", "examples", "[", "i", "]", ".", "offset", ",", "\n", "raw_span", "[", "1", "]", "+", "self", ".", "examples", "[", "i", "]", ".", "offset", "]", "\n", "char_name", "=", "name", "[", "0", "]", "\n", "if", "use_coref", ":", "\n", "                                        ", "char_name", ",", "char_span", "=", "self", ".", "_convert_to_coref", "(", "char_name", ",", "char_span", ")", "\n", "", "entity_ids", ".", "append", "(", "Entity", "(", "name", "=", "char_name", ",", "span", "=", "char_span", ",", "\n", "score", "=", "1.0", ")", ")", "\n", "has_entity", "=", "True", "\n", "break", "\n", "", "", "if", "not", "has_entity", ":", "\n", "                                ", "entity_ids", ".", "append", "(", "Entity", "(", "name", "=", "'$NIL$'", ",", "span", "=", "[", "-", "1", ",", "-", "1", "]", ",", "score", "=", "1.0", ")", ")", "\n", "\n", "", "", "head_entity_ids", "=", "[", "]", "\n", "for", "j", ",", "encoding_span", "in", "enumerate", "(", "batch_encoding", "[", "'offset_mapping'", "]", "[", "i", "]", ")", ":", "\n", "                            ", "if", "encoding_span", "[", "0", "]", "==", "0", "and", "encoding_span", "[", "1", "]", "==", "0", ":", "\n", "                                ", "head_entity_ids", ".", "append", "(", "Entity", "(", "name", "=", "'$NIL$'", ",", "span", "=", "[", "-", "1", ",", "-", "1", "]", ",", "score", "=", "1.0", ")", ")", "\n", "continue", "\n", "", "has_entity", "=", "False", "\n", "logger", ".", "debug", "(", "'encoding_span: {} name: {}'", ".", "format", "(", "encoding_span", ",", "\n", "self", ".", "tokenizer", ".", "convert_ids_to_tokens", "(", "\n", "batch_encoding", "[", "'input_ids'", "]", "[", "i", "]", "[", "j", "]", ")", ")", ")", "\n", "for", "m", ",", "(", "name", ",", "raw_span", ")", "in", "enumerate", "(", "\n", "zip", "(", "mentions", "[", "'head_candidate_entities'", "]", ",", "mentions", "[", "'head_candidate_positions'", "]", ")", ")", ":", "\n", "                                ", "if", "raw_span", "[", "0", "]", "==", "-", "1", "and", "raw_span", "[", "1", "]", "==", "-", "1", ":", "\n", "                                    ", "continue", "\n", "", "logger", ".", "debug", "(", "'raw_span: {} name: {}'", ".", "format", "(", "raw_span", ",", "name", ")", ")", "\n", "if", "self", ".", "overlap_span", "(", "encoding_span", ",", "raw_span", ",", "self", ".", "tokenizer", ")", ":", "\n", "                                    ", "char_span", "=", "[", "raw_span", "[", "0", "]", "+", "self", ".", "examples", "[", "i", "]", ".", "offset", ",", "\n", "raw_span", "[", "1", "]", "+", "self", ".", "examples", "[", "i", "]", ".", "offset", "]", "\n", "char_name", "=", "name", "[", "0", "]", "\n", "if", "use_coref", ":", "\n", "                                        ", "char_name", ",", "char_span", "=", "self", ".", "_convert_to_coref", "(", "char_name", ",", "char_span", ")", "\n", "", "head_entity_ids", ".", "append", "(", "Entity", "(", "name", "=", "char_name", ",", "span", "=", "char_span", ",", "\n", "score", "=", "1.0", ")", ")", "\n", "has_entity", "=", "True", "\n", "break", "\n", "", "", "if", "not", "has_entity", ":", "\n", "                                ", "head_entity_ids", ".", "append", "(", "Entity", "(", "name", "=", "'$NIL$'", ",", "span", "=", "[", "-", "1", ",", "-", "1", "]", ",", "score", "=", "1.0", ")", ")", "\n", "\n", "", "", "tail_entity_ids", "=", "[", "]", "\n", "for", "j", ",", "encoding_span", "in", "enumerate", "(", "batch_encoding", "[", "'offset_mapping'", "]", "[", "i", "]", ")", ":", "\n", "                            ", "if", "encoding_span", "[", "0", "]", "==", "0", "and", "encoding_span", "[", "1", "]", "==", "0", ":", "\n", "                                ", "tail_entity_ids", ".", "append", "(", "Entity", "(", "name", "=", "'$NIL$'", ",", "span", "=", "[", "-", "1", ",", "-", "1", "]", ",", "score", "=", "1.0", ")", ")", "\n", "continue", "\n", "", "has_entity", "=", "False", "\n", "logger", ".", "debug", "(", "'encoding_span: {} name: {}'", ".", "format", "(", "encoding_span", ",", "\n", "self", ".", "tokenizer", ".", "convert_ids_to_tokens", "(", "\n", "batch_encoding", "[", "'input_ids'", "]", "[", "i", "]", "[", "j", "]", ")", ")", ")", "\n", "for", "m", ",", "(", "name", ",", "raw_span", ")", "in", "enumerate", "(", "\n", "zip", "(", "mentions", "[", "'tail_candidate_entities'", "]", ",", "mentions", "[", "'tail_candidate_positions'", "]", ")", ")", ":", "\n", "                                ", "if", "raw_span", "[", "0", "]", "==", "-", "1", "and", "raw_span", "[", "1", "]", "==", "-", "1", ":", "\n", "                                    ", "continue", "\n", "", "logger", ".", "debug", "(", "'raw_span: {} name: {}'", ".", "format", "(", "raw_span", ",", "name", ")", ")", "\n", "if", "self", ".", "overlap_span", "(", "encoding_span", ",", "raw_span", ",", "self", ".", "tokenizer", ")", ":", "\n", "                                    ", "char_span", "=", "[", "raw_span", "[", "0", "]", "+", "self", ".", "examples", "[", "i", "]", ".", "offset", ",", "\n", "raw_span", "[", "1", "]", "+", "self", ".", "examples", "[", "i", "]", ".", "offset", "]", "\n", "char_name", "=", "name", "[", "0", "]", "\n", "if", "use_coref", ":", "\n", "                                        ", "char_name", ",", "char_span", "=", "self", ".", "_convert_to_coref", "(", "char_name", ",", "char_span", ")", "\n", "", "tail_entity_ids", ".", "append", "(", "Entity", "(", "name", "=", "char_name", ",", "span", "=", "char_span", ",", "\n", "score", "=", "1.0", ")", ")", "\n", "has_entity", "=", "True", "\n", "break", "\n", "", "", "if", "not", "has_entity", ":", "\n", "                                ", "tail_entity_ids", ".", "append", "(", "Entity", "(", "name", "=", "'$NIL$'", ",", "span", "=", "[", "-", "1", ",", "-", "1", "]", ",", "score", "=", "1.0", ")", ")", "\n", "\n", "", "", "relation_entity_ids", "=", "[", "]", "\n", "for", "j", ",", "encoding_span", "in", "enumerate", "(", "batch_encoding", "[", "'offset_mapping'", "]", "[", "i", "]", ")", ":", "\n", "                            ", "if", "encoding_span", "[", "0", "]", "==", "0", "and", "encoding_span", "[", "1", "]", "==", "0", ":", "\n", "                                ", "relation_entity_ids", ".", "append", "(", "Entity", "(", "name", "=", "'$NIL$'", ",", "span", "=", "[", "-", "1", ",", "-", "1", "]", ",", "score", "=", "1.0", ")", ")", "\n", "continue", "\n", "", "has_entity", "=", "False", "\n", "logger", ".", "debug", "(", "'encoding_span: {} name: {}'", ".", "format", "(", "encoding_span", ",", "\n", "self", ".", "tokenizer", ".", "convert_ids_to_tokens", "(", "\n", "batch_encoding", "[", "'input_ids'", "]", "[", "i", "]", "[", "j", "]", ")", ")", ")", "\n", "for", "m", ",", "(", "name", ",", "raw_span", ")", "in", "enumerate", "(", "\n", "zip", "(", "mentions", "[", "'relation_candidate_entities'", "]", ",", "mentions", "[", "'relation_candidate_positions'", "]", ")", ")", ":", "\n", "                                ", "if", "raw_span", "[", "0", "]", "==", "-", "1", "and", "raw_span", "[", "1", "]", "==", "-", "1", ":", "\n", "                                    ", "continue", "\n", "", "logger", ".", "debug", "(", "'raw_span: {} name: {}'", ".", "format", "(", "raw_span", ",", "name", ")", ")", "\n", "if", "self", ".", "overlap_span", "(", "encoding_span", ",", "raw_span", ",", "self", ".", "tokenizer", ")", ":", "\n", "                                    ", "char_span", "=", "[", "raw_span", "[", "0", "]", "+", "self", ".", "examples", "[", "i", "]", ".", "offset", ",", "\n", "raw_span", "[", "1", "]", "+", "self", ".", "examples", "[", "i", "]", ".", "offset", "]", "\n", "char_name", "=", "name", "[", "0", "]", "\n", "if", "use_coref", ":", "\n", "                                        ", "char_name", ",", "char_span", "=", "self", ".", "_convert_to_coref", "(", "char_name", ",", "char_span", ")", "\n", "", "relation_entity_ids", ".", "append", "(", "Entity", "(", "name", "=", "char_name", ",", "span", "=", "char_span", ",", "\n", "score", "=", "1.0", ")", ")", "\n", "has_entity", "=", "True", "\n", "break", "\n", "", "", "if", "not", "has_entity", ":", "\n", "                                ", "relation_entity_ids", ".", "append", "(", "Entity", "(", "name", "=", "'$NIL$'", ",", "span", "=", "[", "-", "1", ",", "-", "1", "]", ",", "score", "=", "1.0", ")", ")", "\n", "\n", "", "", "inputs", "[", "'docid'", "]", "=", "self", ".", "examples", "[", "i", "]", ".", "docid", "\n", "inputs", "[", "'entity_ids'", "]", "=", "entity_ids", "\n", "inputs", "[", "'head_entity_ids'", "]", "=", "head_entity_ids", "\n", "inputs", "[", "'tail_entity_ids'", "]", "=", "tail_entity_ids", "\n", "inputs", "[", "'relation_entity_ids'", "]", "=", "relation_entity_ids", "\n", "inputs", "[", "'offset'", "]", "=", "self", ".", "examples", "[", "i", "]", ".", "offset", "\n", "inputs", "[", "'text'", "]", "=", "self", ".", "examples", "[", "i", "]", ".", "text", "\n", "inputs", ".", "pop", "(", "'offset_mapping'", ")", "\n", "\n", "feature", "=", "InputFeatures", "(", "**", "inputs", ")", "\n", "self", ".", "features", ".", "append", "(", "feature", ")", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "len", "(", "self", ".", "features", ")", "==", "0", ":", "\n", "                        ", "logger", ".", "debug", "(", "\n", "f\"Empty features to cached file {cached_features_file} [took %.3f s]\"", ",", "time", ".", "time", "(", ")", "-", "start", "\n", ")", "\n", "", "torch", ".", "save", "(", "self", ".", "features", ",", "cached_features_file", ")", "\n", "torch", ".", "save", "(", "all_mentions", ",", "cached_mentions_file", ")", "\n", "logger", ".", "debug", "(", "\n", "\"Saving features into cached file %s [took %.3f s]\"", ",", "cached_features_file", ",", "time", ".", "time", "(", ")", "-", "start", "\n", ")", "\n", "", "", "yield", "self", ".", "features", "\n", "self", ".", "features", "=", "[", "]", "\n", "logger", ".", "debug", "(", "'cleaned features size {}'", ".", "format", "(", "len", "(", "self", ".", "features", ")", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.collator.default_data_collator": [[6, 35], ["first.items", "isinstance", "torch.tensor", "vars", "isinstance", "first[].item", "isinstance", "isinstance", "isinstance", "torch.stack", "torch.tensor", "isinstance", "torch.stack", "torch.tensor", "type"], "function", ["None"], ["def", "default_data_collator", "(", "features", ":", "List", "[", "InputDataClass", "]", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "if", "not", "isinstance", "(", "features", "[", "0", "]", ",", "dict", ")", ":", "\n", "        ", "features", "=", "[", "vars", "(", "f", ")", "for", "f", "in", "features", "]", "\n", "\n", "", "first", "=", "features", "[", "0", "]", "\n", "batch", "=", "{", "}", "\n", "\n", "if", "\"label\"", "in", "first", "and", "first", "[", "\"label\"", "]", "is", "not", "None", ":", "\n", "        ", "label", "=", "first", "[", "\"label\"", "]", ".", "item", "(", ")", "if", "isinstance", "(", "first", "[", "\"label\"", "]", ",", "torch", ".", "Tensor", ")", "else", "first", "[", "\"label\"", "]", "\n", "dtype", "=", "torch", ".", "long", "if", "isinstance", "(", "label", ",", "int", ")", "else", "torch", ".", "float", "\n", "batch", "[", "\"labels\"", "]", "=", "torch", ".", "tensor", "(", "[", "f", "[", "\"label\"", "]", "for", "f", "in", "features", "]", ",", "dtype", "=", "dtype", ")", "\n", "", "elif", "\"label_ids\"", "in", "first", "and", "first", "[", "\"label_ids\"", "]", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "first", "[", "\"label_ids\"", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "batch", "[", "\"labels\"", "]", "=", "torch", ".", "stack", "(", "[", "f", "[", "\"label_ids\"", "]", "for", "f", "in", "features", "]", ")", "\n", "", "else", ":", "\n", "            ", "dtype", "=", "torch", ".", "long", "if", "type", "(", "first", "[", "\"label_ids\"", "]", "[", "0", "]", ")", "is", "int", "else", "torch", ".", "float", "\n", "batch", "[", "\"labels\"", "]", "=", "torch", ".", "tensor", "(", "[", "f", "[", "\"label_ids\"", "]", "for", "f", "in", "features", "]", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "first", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "(", "\"label\"", ",", "\"label_ids\"", ",", "\"entity_ids\"", ",", "\"head_entity_ids\"", ",", "\"tail_entity_ids\"", ",", "\"relation_entity_ids\"", ",", "\"docid\"", ",", "\"offset\"", ")", "and", "v", "is", "not", "None", "and", "not", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "batch", "[", "k", "]", "=", "torch", ".", "stack", "(", "[", "f", "[", "k", "]", "for", "f", "in", "features", "]", ")", "\n", "", "else", ":", "\n", "                ", "batch", "[", "k", "]", "=", "torch", ".", "tensor", "(", "[", "f", "[", "k", "]", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "", "elif", "k", "in", "(", "\"entity_ids\"", ",", "\"head_entity_ids\"", ",", "\"tail_entity_ids\"", ",", "\"relation_entity_ids\"", ",", "\"docid\"", ",", "\"offset\"", ",", "\"text\"", ")", ":", "\n", "            ", "batch", "[", "k", "]", "=", "[", "f", "[", "k", "]", "for", "f", "in", "features", "]", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "", "return", "batch", "", "", ""]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.rc.RCMentionGenerator.__init__": [[11, 23], ["rc.RCMentionGenerator.dataset.items", "spacy.load", "spacy.load", "generator_utils.WhitespaceTokenizer", "LoadJSON", "[].append", "[].keys"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.LoadJSON"], ["    ", "def", "__init__", "(", "self", ",", "dataset", "=", "'FewRel'", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "{", "record", "[", "'id'", "]", ":", "record", "for", "record", "in", "LoadJSON", "(", "f\"data/{dataset}/data.jsonl\"", ",", "jsonl", "=", "True", ")", "}", "\n", "for", "key", ",", "record", "in", "self", ".", "dataset", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "dataset", "[", "key", "]", "[", "'rel'", "]", "=", "{", "}", "\n", "for", "relation", "in", "self", ".", "dataset", "[", "key", "]", "[", "'rel_candidates'", "]", ":", "\n", "                ", "for", "rname", "in", "relation", "[", "'relation'", "]", ":", "\n", "                    ", "if", "rname", "not", "in", "self", ".", "dataset", "[", "key", "]", "[", "'rel'", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "self", ".", "dataset", "[", "key", "]", "[", "'rel'", "]", "[", "rname", "]", "=", "[", "]", "\n", "", "self", ".", "dataset", "[", "key", "]", "[", "'rel'", "]", "[", "rname", "]", ".", "append", "(", "relation", ")", "\n", "", "", "", "self", ".", "tokenizer", "=", "spacy", ".", "load", "(", "'en_core_web_sm'", ",", "disable", "=", "[", "'tagger'", ",", "'parser'", ",", "'ner'", ",", "'textcat'", "]", ")", "\n", "self", ".", "whitespace_tokenizer", "=", "spacy", ".", "load", "(", "'en_core_web_sm'", ",", "disable", "=", "[", "'tagger'", ",", "'parser'", ",", "'ner'", ",", "'textcat'", "]", ")", "\n", "self", ".", "whitespace_tokenizer", ".", "tokenizer", "=", "WhitespaceTokenizer", "(", "self", ".", "whitespace_tokenizer", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.rc.RCMentionGenerator.get_mentions_raw_text": [[24, 106], ["enumerate", "data[].items", "str", "entities.append", "int", "len", "len", "head_ents.append", "len", "tail_ents.append", "min", "max", "min", "max", "min", "max", "min", "max", "len", "rel_ents.append", "min", "max", "min", "max", "len"], "methods", ["None"], ["", "def", "get_mentions_raw_text", "(", "self", ",", "text", ":", "str", ",", "whitespace_tokenize", "=", "False", ",", "extra", "=", "None", ")", ":", "\n", "        ", "docid", ",", "offset", "=", "str", "(", "int", "(", "extra", "[", "0", "]", ")", ")", ",", "extra", "[", "1", "]", ";", "data", "=", "self", ".", "dataset", "[", "docid", "]", "\n", "\n", "tokens", "=", "data", "[", "'tokens'", "]", "\n", "\n", "entities", "=", "[", "]", ";", "idx", "=", "0", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "tokens", ")", ":", "\n", "            ", "entities", ".", "append", "(", "[", "[", "i", ",", "i", "]", ",", "word", ",", "1.0", ",", "[", "idx", ",", "idx", "+", "len", "(", "word", ")", "]", "]", ")", ";", "idx", "+=", "len", "(", "word", ")", "+", "1", "\n", "\n", "", "head_ents", "=", "[", "]", "\n", "for", "ss", "in", "data", "[", "'subject_spans'", "]", ":", "\n", "            ", "ents", "=", "[", "ent", "for", "ent", "in", "entities", "if", "ent", "[", "0", "]", "[", "0", "]", "+", "offset", "in", "ss", "]", "\n", "if", "len", "(", "ents", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "new_ent", "=", "[", "\n", "[", "min", "(", "[", "ent", "[", "0", "]", "[", "0", "]", "for", "ent", "in", "ents", "]", ")", ",", "max", "(", "[", "ent", "[", "0", "]", "[", "1", "]", "for", "ent", "in", "ents", "]", ")", "]", ",", "\n", "[", "' '", ".", "join", "(", "[", "ent", "[", "1", "]", "for", "ent", "in", "ents", "]", ")", "]", ",", "[", "1.0", "]", ",", "\n", "[", "min", "(", "[", "ent", "[", "3", "]", "[", "0", "]", "for", "ent", "in", "ents", "]", ")", ",", "max", "(", "[", "ent", "[", "3", "]", "[", "1", "]", "for", "ent", "in", "ents", "]", ")", "]", ",", "\n", "]", "\n", "flag", "=", "True", "\n", "for", "ent1", "in", "head_ents", ":", "\n", "                ", "if", "not", "(", "ent1", "[", "3", "]", "[", "1", "]", "<=", "new_ent", "[", "3", "]", "[", "0", "]", "or", "new_ent", "[", "3", "]", "[", "1", "]", "<=", "ent1", "[", "3", "]", "[", "0", "]", ")", ":", "\n", "                    ", "flag", "=", "False", ";", "break", "\n", "", "", "if", "flag", ":", "\n", "                ", "head_ents", ".", "append", "(", "new_ent", ")", "\n", "\n", "", "", "tail_ents", "=", "[", "]", "\n", "for", "ss", "in", "data", "[", "'object_spans'", "]", ":", "\n", "            ", "ents", "=", "[", "ent", "for", "ent", "in", "entities", "if", "ent", "[", "0", "]", "[", "0", "]", "+", "offset", "in", "ss", "]", "\n", "if", "len", "(", "ents", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "new_ent", "=", "[", "\n", "[", "min", "(", "[", "ent", "[", "0", "]", "[", "0", "]", "for", "ent", "in", "ents", "]", ")", ",", "max", "(", "[", "ent", "[", "0", "]", "[", "1", "]", "for", "ent", "in", "ents", "]", ")", "]", ",", "\n", "[", "' '", ".", "join", "(", "[", "ent", "[", "1", "]", "for", "ent", "in", "ents", "]", ")", "]", ",", "[", "1.0", "]", ",", "\n", "[", "min", "(", "[", "ent", "[", "3", "]", "[", "0", "]", "for", "ent", "in", "ents", "]", ")", ",", "max", "(", "[", "ent", "[", "3", "]", "[", "1", "]", "for", "ent", "in", "ents", "]", ")", "]", ",", "\n", "]", "\n", "flag", "=", "True", "\n", "for", "ent1", "in", "tail_ents", ":", "\n", "                ", "if", "not", "(", "ent1", "[", "3", "]", "[", "1", "]", "<=", "new_ent", "[", "3", "]", "[", "0", "]", "or", "new_ent", "[", "3", "]", "[", "1", "]", "<=", "ent1", "[", "3", "]", "[", "0", "]", ")", ":", "\n", "                    ", "flag", "=", "False", ";", "break", "\n", "", "", "if", "flag", ":", "\n", "                ", "tail_ents", ".", "append", "(", "new_ent", ")", "\n", "", "", "all_ents", "=", "head_ents", "+", "tail_ents", "\n", "\n", "rel_ents", "=", "[", "]", "\n", "for", "rname", ",", "rels", "in", "data", "[", "'rel'", "]", ".", "items", "(", ")", ":", "\n", "            ", "for", "rel", "in", "rels", ":", "\n", "                ", "rel_words", "=", "[", "ent", "for", "ent", "in", "entities", "if", "not", "(", "rel", "[", "'char_span'", "]", "[", "1", "]", "<=", "ent", "[", "3", "]", "[", "0", "]", "+", "offset", "or", "ent", "[", "3", "]", "[", "1", "]", "+", "offset", "<=", "rel", "[", "'char_span'", "]", "[", "0", "]", ")", "]", "\n", "if", "len", "(", "rel_words", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "rel_ent", "=", "[", "\n", "[", "min", "(", "[", "ent", "[", "0", "]", "[", "0", "]", "for", "ent", "in", "rel_words", "]", ")", ",", "max", "(", "[", "ent", "[", "0", "]", "[", "1", "]", "for", "ent", "in", "rel_words", "]", ")", "]", ",", "\n", "[", "' '", ".", "join", "(", "[", "ent", "[", "1", "]", "for", "ent", "in", "rel_words", "]", ")", "]", ",", "[", "1.0", "]", ",", "\n", "[", "min", "(", "[", "ent", "[", "3", "]", "[", "0", "]", "for", "ent", "in", "rel_words", "]", ")", ",", "max", "(", "[", "ent", "[", "3", "]", "[", "1", "]", "for", "ent", "in", "rel_words", "]", ")", "]", ",", "\n", "]", "\n", "flag", "=", "True", "\n", "if", "flag", ":", "\n", "                    ", "rel_ents", ".", "append", "(", "rel_ent", ")", "\n", "", "", "", "ret", "=", "{", "\n", "\"tokenized_text\"", ":", "tokens", ",", "\n", "\"candidate_spans\"", ":", "[", "]", ",", "\n", "\"candidate_entities\"", ":", "[", "]", ",", "\n", "\"candidate_entity_priors\"", ":", "[", "]", ",", "\n", "\"candidate_positions\"", ":", "[", "]", ",", "\n", "\n", "\"head_candidate_spans\"", ":", "[", "head_ent", "[", "0", "]", "for", "head_ent", "in", "head_ents", "]", ",", "\n", "\"head_candidate_entities\"", ":", "[", "head_ent", "[", "1", "]", "for", "head_ent", "in", "head_ents", "]", ",", "\n", "\"head_candidate_entity_priors\"", ":", "[", "head_ent", "[", "2", "]", "for", "head_ent", "in", "head_ents", "]", ",", "\n", "\"head_candidate_positions\"", ":", "[", "head_ent", "[", "3", "]", "for", "head_ent", "in", "head_ents", "]", ",", "\n", "\n", "\"tail_candidate_spans\"", ":", "[", "tail_ent", "[", "0", "]", "for", "tail_ent", "in", "tail_ents", "]", ",", "\n", "\"tail_candidate_entities\"", ":", "[", "tail_ent", "[", "1", "]", "for", "tail_ent", "in", "tail_ents", "]", ",", "\n", "\"tail_candidate_entity_priors\"", ":", "[", "tail_ent", "[", "2", "]", "for", "tail_ent", "in", "tail_ents", "]", ",", "\n", "\"tail_candidate_positions\"", ":", "[", "tail_ent", "[", "3", "]", "for", "tail_ent", "in", "tail_ents", "]", ",", "\n", "\n", "\"relation_candidate_spans\"", ":", "[", "rel_ent", "[", "0", "]", "for", "rel_ent", "in", "rel_ents", "]", ",", "\n", "\"relation_candidate_entities\"", ":", "[", "rel_ent", "[", "1", "]", "for", "rel_ent", "in", "rel_ents", "]", ",", "\n", "\"relation_candidate_entity_priors\"", ":", "[", "rel_ent", "[", "2", "]", "for", "rel_ent", "in", "rel_ents", "]", ",", "\n", "\"relation_candidate_positions\"", ":", "[", "rel_ent", "[", "3", "]", "for", "rel_ent", "in", "rel_ents", "]", ",", "\n", "}", "\n", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.np.NPMentionGenerator.__init__": [[8, 13], ["spacy.load", "spacy.load", "spacy.load", "generator_utils.WhitespaceTokenizer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "spacy", ".", "load", "(", "'en_core_web_sm'", ",", "disable", "=", "[", "'tagger'", ",", "'parser'", ",", "'textcat'", "]", ")", "\n", "self", ".", "tokenizer", "=", "spacy", ".", "load", "(", "'en_core_web_sm'", ")", "\n", "self", ".", "whitespace_tokenizer", "=", "spacy", ".", "load", "(", "'en_core_web_sm'", ")", "\n", "self", ".", "whitespace_tokenizer", ".", "tokenizer", "=", "WhitespaceTokenizer", "(", "self", ".", "whitespace_tokenizer", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.np.NPMentionGenerator.get_mentions_raw_text": [[14, 69], ["spans_to_candidates.items", "np.NPMentionGenerator.whitespace_tokenizer", "np.NPMentionGenerator.tokenizer", "spans.append", "entities.append", "sum", "priors.append", "positions.append", "len", "ret.update", "list", "generator_utils.get_empty_candidates"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.data.generator_utils.get_empty_candidates"], ["", "def", "get_mentions_raw_text", "(", "self", ",", "text", ":", "str", ",", "whitespace_tokenize", "=", "False", ",", "extra", "=", "None", ")", ":", "\n", "        ", "if", "whitespace_tokenize", ":", "\n", "            ", "tokens", "=", "self", ".", "whitespace_tokenizer", "(", "text", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tokenizer", ".", "max_length", "=", "1000000000", "\n", "tokens", "=", "self", ".", "tokenizer", "(", "text", ")", "\n", "\n", "", "_tokens", "=", "[", "t", ".", "text", "for", "t", "in", "tokens", "]", "\n", "spans_to_candidates", "=", "{", "}", "\n", "spans_to_positions", "=", "{", "}", "\n", "\n", "for", "cand", "in", "tokens", ".", "noun_chunks", ":", "\n", "            ", "spans_to_candidates", "[", "(", "cand", ".", "start", ",", "cand", ".", "end", "-", "1", ")", "]", "=", "[", "(", "None", ",", "cand", ".", "text", ",", "1.0", ")", "]", "\n", "spans_to_positions", "[", "(", "cand", ".", "start", ",", "cand", ".", "end", "-", "1", ")", "]", "=", "[", "cand", ".", "start_char", ",", "cand", ".", "end_char", "]", "\n", "\n", "", "spans", "=", "[", "]", "\n", "entities", "=", "[", "]", "\n", "priors", "=", "[", "]", "\n", "positions", "=", "[", "]", "\n", "for", "span", ",", "candidates", "in", "spans_to_candidates", ".", "items", "(", ")", ":", "\n", "            ", "spans", ".", "append", "(", "list", "(", "span", ")", ")", "\n", "entities", ".", "append", "(", "[", "x", "[", "1", "]", "for", "x", "in", "candidates", "]", ")", "\n", "mention_priors", "=", "[", "x", "[", "2", "]", "for", "x", "in", "candidates", "]", "\n", "\n", "sum_priors", "=", "sum", "(", "mention_priors", ")", "\n", "priors", ".", "append", "(", "[", "x", "/", "sum_priors", "for", "x", "in", "mention_priors", "]", ")", "\n", "\n", "positions", ".", "append", "(", "spans_to_positions", "[", "span", "]", ")", "\n", "", "ret", "=", "{", "\n", "\"tokenized_text\"", ":", "_tokens", ",", "\n", "\"candidate_spans\"", ":", "spans", ",", "\n", "\"candidate_entities\"", ":", "entities", ",", "\n", "\"candidate_entity_priors\"", ":", "priors", ",", "\n", "\"candidate_positions\"", ":", "positions", ",", "\n", "\n", "\"head_candidate_spans\"", ":", "[", "]", ",", "\n", "\"head_candidate_entities\"", ":", "[", "]", ",", "\n", "\"head_candidate_entity_priors\"", ":", "[", "]", ",", "\n", "\"head_candidate_positions\"", ":", "[", "]", ",", "\n", "\n", "\"tail_candidate_spans\"", ":", "[", "]", ",", "\n", "\"tail_candidate_entities\"", ":", "[", "]", ",", "\n", "\"tail_candidate_entity_priors\"", ":", "[", "]", ",", "\n", "\"tail_candidate_positions\"", ":", "[", "]", ",", "\n", "\n", "\"relation_candidate_spans\"", ":", "[", "]", ",", "\n", "\"relation_candidate_entities\"", ":", "[", "]", ",", "\n", "\"relation_candidate_entity_priors\"", ":", "[", "]", ",", "\n", "\"relation_candidate_positions\"", ":", "[", "]", ",", "\n", "}", "\n", "\n", "if", "len", "(", "spans", ")", "==", "0", ":", "\n", "            ", "ret", ".", "update", "(", "get_empty_candidates", "(", ")", ")", "\n", "\n", "", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.text_handler.TextHandler.__init__": [[21, 32], ["codecs.open", "spacy.lang.en.English", "text_handler.TextHandler.nlp.add_pipe", "os.path.join", "neuralcoref.add_to_pipe"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "index", ",", "use_coref", "=", "False", ",", "DIR", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "index", "=", "index", "\n", "self", ".", "use_coref", "=", "use_coref", "\n", "self", ".", "input", "=", "codecs", ".", "open", "(", "join", "(", "DIR", ",", "'P{}.jsonl'", ".", "format", "(", "self", ".", "index", ")", ")", ",", "'r'", ",", "'utf-8'", ")", "\n", "self", ".", "nlp", "=", "English", "(", ")", "\n", "self", ".", "nlp", ".", "add_pipe", "(", "'sentencizer'", ")", "\n", "if", "use_coref", ":", "\n", "            ", "neuralcoref", ".", "add_to_pipe", "(", "self", ".", "nlp", ")", "\n", "", "self", ".", "cur_doc", "=", "None", "\n", "self", ".", "cur_coref", "=", "None", "\n", "self", ".", "cur_text", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.text_handler.TextHandler.gen_coref": [[33, 39], ["collections.defaultdict"], "methods", ["None"], ["", "def", "gen_coref", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_coref", "=", "defaultdict", "(", "dict", ")", "\n", "for", "cluster", "in", "self", ".", "cur_doc", ".", "_", ".", "coref_clusters", ":", "\n", "            ", "main_entity", ",", "main_span", "=", "cluster", ".", "main", ".", "text", ",", "[", "cluster", ".", "main", ".", "start_char", ",", "cluster", ".", "main", ".", "end_char", "]", "\n", "for", "mention", "in", "cluster", ".", "mentions", ":", "\n", "                ", "self", ".", "cur_coref", "[", "mention", ".", "start_char", "]", "[", "mention", ".", "end_char", "]", "=", "[", "main_entity", ",", "main_span", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.text_handler.TextHandler.get_coref": [[40, 43], ["text_handler.TextHandler.cur_coref.get", "text_handler.TextHandler.cur_coref.get().get", "text_handler.TextHandler.cur_coref.get"], "methods", ["None"], ["", "", "", "def", "get_coref", "(", "self", ",", "span", ")", ":", "\n", "        ", "if", "self", ".", "cur_coref", ".", "get", "(", "span", "[", "0", "]", ")", ":", "\n", "            ", "return", "self", ".", "cur_coref", ".", "get", "(", "span", "[", "0", "]", ")", ".", "get", "(", "span", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.data.text_handler.TextHandler.__iter__": [[44, 60], ["enumerate", "json.loads", "re.sub", "re.sub", "text_handler.TextHandler.nlp", "text_handler.TextHandler.gen_coref", "len", "len", "re.sub.find", "m.group", "m.group", "len"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.data.text_handler.TextHandler.gen_coref"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "num_of_dir", "=", "0", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "self", ".", "input", ")", ":", "\n", "            ", "doc", "=", "json", ".", "loads", "(", "line", ")", "\n", "\n", "full_text", ",", "title", ",", "_id", "=", "doc", "[", "'text'", "]", ",", "doc", "[", "'title'", "]", ",", "doc", "[", "'id'", "]", "\n", "full_text", "=", "re", ".", "sub", "(", "r'\\(\\(.*?\\)\\)'", ",", "lambda", "m", ":", "' '", "*", "len", "(", "m", ".", "group", "(", ")", ")", ",", "full_text", ")", "\n", "full_text", "=", "re", ".", "sub", "(", "r'\\(.*?\\)'", ",", "lambda", "m", ":", "' '", "*", "len", "(", "m", ".", "group", "(", ")", ")", ",", "full_text", ")", "\n", "self", ".", "cur_text", "=", "full_text", "\n", "text", "=", "self", ".", "nlp", "(", "full_text", ")", "\n", "self", ".", "cur_doc", "=", "text", "\n", "if", "self", ".", "use_coref", ":", "\n", "                ", "self", ".", "gen_coref", "(", ")", "\n", "", "num_of_dir", "+=", "1", "\n", "for", "sentence", "in", "text", ".", "sents", ":", "\n", "                ", "yield", "sentence", ".", "text", ",", "full_text", ".", "find", "(", "sentence", ".", "text", ")", ",", "(", "None", "if", "_id", "is", "None", "else", "(", "'0'", "*", "(", "40", "-", "len", "(", "_id", ")", ")", "+", "_id", ")", ")", ",", "title", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.cgraywang_deepex.scripts.bert_contrastive.BERT.__init__": [[12, 18], ["torch.Module.__init__", "transformers.BertTokenizer.from_pretrained", "transformers.BertModel.from_pretrained().to", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "transformers.BertModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "super", "(", "BERT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "model", ")", "\n", "self", ".", "model", "=", "BertModel", ".", "from_pretrained", "(", "model", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.scripts.bert_contrastive.BERT.__get_input_tensors": [[19, 61], ["sentences.split.split.split", "bert_contrastive.BERT.tokenizer.tokenize", "numpy.zeros().tolist", "bert_contrastive.BERT.append", "numpy.zeros().tolist.append", "tokenized_text.insert", "segments_ids.insert", "range", "bert_contrastive.BERT.tokenizer.convert_tokens_to_ids", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "print", "ValueError", "len", "bert_contrastive.BERT.tokenizer.tokenize", "numpy.full().tolist", "bert_contrastive.BERT.append", "numpy.full().tolist.append", "len", "numpy.zeros", "masked_indices.append", "len", "numpy.full", "len"], "methods", ["None"], ["", "def", "__get_input_tensors", "(", "self", ",", "sentences", ")", ":", "\n", "\n", "        ", "sentences", "=", "sentences", ".", "split", "(", "'[SEP]'", ")", "\n", "\n", "if", "len", "(", "sentences", ")", ">", "2", ":", "\n", "            ", "print", "(", "sentences", ")", "\n", "raise", "ValueError", "(", "\"BERT accepts maximum two sentences in input for each data point\"", ")", "\n", "\n", "", "first_tokenized_sentence", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "sentences", "[", "0", "]", ")", "\n", "first_segment_id", "=", "np", ".", "zeros", "(", "len", "(", "first_tokenized_sentence", ")", ",", "dtype", "=", "int", ")", ".", "tolist", "(", ")", "\n", "\n", "first_tokenized_sentence", ".", "append", "(", "\"[SEP]\"", ")", "\n", "first_segment_id", ".", "append", "(", "0", ")", "\n", "\n", "if", "len", "(", "sentences", ")", ">", "1", ":", "\n", "            ", "second_tokenized_sentece", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "sentences", "[", "1", "]", ")", "\n", "second_segment_id", "=", "np", ".", "full", "(", "len", "(", "second_tokenized_sentece", ")", ",", "1", ",", "dtype", "=", "int", ")", ".", "tolist", "(", ")", "\n", "\n", "second_tokenized_sentece", ".", "append", "(", "\"[SEP]\"", ")", "\n", "second_segment_id", ".", "append", "(", "1", ")", "\n", "\n", "tokenized_text", "=", "first_tokenized_sentence", "+", "second_tokenized_sentece", "\n", "segments_ids", "=", "first_segment_id", "+", "second_segment_id", "\n", "", "else", ":", "\n", "            ", "tokenized_text", "=", "first_tokenized_sentence", "\n", "segments_ids", "=", "first_segment_id", "\n", "\n", "", "tokenized_text", ".", "insert", "(", "0", ",", "\"[CLS]\"", ")", "\n", "segments_ids", ".", "insert", "(", "0", ",", "0", ")", "\n", "\n", "masked_indices", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "tokenized_text", ")", ")", ":", "\n", "            ", "token", "=", "tokenized_text", "[", "i", "]", "\n", "if", "token", "==", "\"[MASK]\"", ":", "\n", "                ", "masked_indices", ".", "append", "(", "i", ")", "\n", "\n", "", "", "indexed_tokens", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokenized_text", ")", "\n", "\n", "tokens_tensor", "=", "torch", ".", "tensor", "(", "[", "indexed_tokens", "]", ")", "\n", "segments_tensors", "=", "torch", ".", "tensor", "(", "[", "segments_ids", "]", ")", "\n", "\n", "return", "tokens_tensor", ",", "segments_tensors", ",", "masked_indices", ",", "tokenized_text", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.scripts.bert_contrastive.BERT.__get_input_tensors_batch": [[63, 100], ["zip", "bert_contrastive.BERT.__get_input_tensors", "tokens_tensors_list.append", "segments_tensors_list.append", "masked_indices_list.append", "tokenized_text_list.append", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.full().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat.to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.scripts.bert_contrastive.BERT.__get_input_tensors"], ["", "def", "__get_input_tensors_batch", "(", "self", ",", "sentences_list", ")", ":", "\n", "        ", "tokens_tensors_list", "=", "[", "]", "\n", "segments_tensors_list", "=", "[", "]", "\n", "masked_indices_list", "=", "[", "]", "\n", "tokenized_text_list", "=", "[", "]", "\n", "max_tokens", "=", "0", "\n", "for", "sentences", "in", "sentences_list", ":", "\n", "            ", "tokens_tensor", ",", "segments_tensor", ",", "masked_indices", ",", "tokenized_text", "=", "self", ".", "__get_input_tensors", "(", "sentences", ")", "\n", "tokens_tensors_list", ".", "append", "(", "tokens_tensor", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "segments_tensors_list", ".", "append", "(", "segments_tensor", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "masked_indices_list", ".", "append", "(", "masked_indices", ")", "\n", "tokenized_text_list", ".", "append", "(", "tokenized_text", ")", "\n", "if", "(", "tokens_tensor", ".", "shape", "[", "1", "]", ">", "max_tokens", ")", ":", "\n", "                ", "max_tokens", "=", "tokens_tensor", ".", "shape", "[", "1", "]", "\n", "", "", "final_tokens_tensor", "=", "None", "\n", "final_segments_tensor", "=", "None", "\n", "final_attention_mask", "=", "None", "\n", "for", "tokens_tensor", ",", "segments_tensor", "in", "zip", "(", "tokens_tensors_list", ",", "segments_tensors_list", ")", ":", "\n", "            ", "dim_tensor", "=", "tokens_tensor", ".", "shape", "[", "1", "]", "\n", "pad_lenght", "=", "max_tokens", "-", "dim_tensor", "\n", "attention_tensor", "=", "torch", ".", "full", "(", "[", "1", ",", "dim_tensor", "]", ",", "1", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "pad_lenght", ">", "0", ":", "\n", "                ", "pad_1", "=", "torch", ".", "full", "(", "[", "1", ",", "pad_lenght", "]", ",", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "pad_2", "=", "torch", ".", "full", "(", "[", "1", ",", "pad_lenght", "]", ",", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "attention_pad", "=", "torch", ".", "full", "(", "[", "1", ",", "pad_lenght", "]", ",", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "tokens_tensor", "=", "torch", ".", "cat", "(", "(", "tokens_tensor", ",", "pad_1", ")", ",", "dim", "=", "1", ")", "\n", "segments_tensor", "=", "torch", ".", "cat", "(", "(", "segments_tensor", ",", "pad_2", ")", ",", "dim", "=", "1", ")", "\n", "attention_tensor", "=", "torch", ".", "cat", "(", "(", "attention_tensor", ",", "attention_pad", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "final_tokens_tensor", "is", "None", ":", "\n", "                ", "final_tokens_tensor", "=", "tokens_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "final_segments_tensor", "=", "segments_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "final_attention_mask", "=", "attention_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "final_tokens_tensor", "=", "torch", ".", "cat", "(", "(", "final_tokens_tensor", ",", "tokens_tensor", ")", ",", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "final_segments_tensor", "=", "torch", ".", "cat", "(", "(", "final_segments_tensor", ",", "segments_tensor", ")", ",", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "final_attention_mask", "=", "torch", ".", "cat", "(", "(", "final_attention_mask", ",", "attention_tensor", ")", ",", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "", "return", "final_tokens_tensor", ",", "final_segments_tensor", ",", "final_attention_mask", ",", "masked_indices_list", ",", "tokenized_text_list", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.scripts.bert_contrastive.BERT.forward": [[101, 132], ["bert_contrastive.BERT.__get_input_tensors_batch", "bert_contrastive.BERT.model", "embeddings.transpose.transpose.transpose", "token_type.reshape.reshape.float", "not_padding.reshape.reshape.float", "token_type.reshape.reshape.reshape", "not_padding.reshape.reshape.reshape", "token_type.reshape.reshape.mul().sum", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "token_type.reshape.reshape.mul", "not_padding.reshape.reshape.mul"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.scripts.bert_contrastive.BERT.__get_input_tensors_batch"], ["", "def", "forward", "(", "self", ",", "text_triple", ")", ":", "\n", "\n", "        ", "tokens_tensor", ",", "segments_tensor", ",", "attention_mask_tensor", ",", "masked_indices_list", ",", "tokenized_text_list", "=", "self", ".", "__get_input_tensors_batch", "(", "text_triple", ")", "\n", "\n", "outputs", "=", "self", ".", "model", "(", "\n", "input_ids", "=", "tokens_tensor", ",", "\n", "token_type_ids", "=", "segments_tensor", ",", "\n", "attention_mask", "=", "attention_mask_tensor", ",", "\n", "output_hidden_states", "=", "False", "\n", ")", "\n", "\n", "embeddings", "=", "outputs", "[", "0", "]", "\n", "\n", "embeddings", "=", "embeddings", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "token_type", "=", "segments_tensor", "\n", "not_padding", "=", "(", "tokens_tensor", ">", "0", ")", ".", "int", "(", ")", "\n", "\n", "token_type", "=", "token_type", ".", "float", "(", ")", "\n", "not_padding", "=", "not_padding", ".", "float", "(", ")", "\n", "\n", "token_type", "=", "token_type", ".", "reshape", "(", "token_type", ".", "shape", "[", "0", "]", ",", "1", ",", "token_type", ".", "shape", "[", "1", "]", ")", "\n", "not_padding", "=", "not_padding", ".", "reshape", "(", "not_padding", ".", "shape", "[", "0", "]", ",", "1", ",", "not_padding", ".", "shape", "[", "1", "]", ")", "\n", "\n", "triple_output", "=", "token_type", ".", "mul", "(", "embeddings", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "text_output", "=", "(", "1", "-", "token_type", ")", ".", "mul", "(", "not_padding", ".", "mul", "(", "embeddings", ")", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "\n", "text_output", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "text_output", ")", "\n", "triple_output", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "triple_output", ")", "\n", "\n", "return", "text_output", ",", "triple_output", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.scripts.bert_contrastive.Reranking": [[133, 152], ["BERT().to", "BERT().to.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "bert_contrastive.BERT", "list", "enumerate", "sorted", "data.items", "sorted", "batched_triples.append", "str", "BERT().to.", "range", "[].split", "len", "len", "text_vector.detach().cpu().numpy", "triple_vector.detach().cpu().numpy", "len", "float", "rerank_triples.append", "numpy.linalg.norm", "text_vector.detach().cpu", "triple_vector.detach().cpu", "text_vector.detach", "triple_vector.detach", "len"], "function", ["None"], ["", "", "def", "Reranking", "(", "data", ",", "MODEL_FOLDER", "=", "\"Magolor/deepex-ranking-model\"", ",", "batch_size", "=", "32", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "model", "=", "BERT", "(", "MODEL_FOLDER", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "docid", ",", "triples", ")", "in", "tqdm", ".", "tqdm", "(", "list", "(", "data", ".", "items", "(", ")", ")", ")", ":", "\n", "            ", "rerank_triples", "=", "[", "]", ";", "batched_triples", "=", "[", "]", "\n", "for", "i", ",", "triple", "in", "enumerate", "(", "sorted", "(", "triples", ",", "key", "=", "lambda", "x", ":", "x", "[", "'sentence'", "]", ")", ",", "1", ")", ":", "\n", "                ", "sentence", "=", "\" \"", ".", "join", "(", "triple", "[", "'sentence'", "]", "[", "13", ":", "]", ".", "split", "(", "\" \"", ")", "[", ":", "100", "]", ")", "\n", "text_triple", "=", "sentence", "+", "\"[SEP]\"", "+", "str", "(", "(", "triple", "[", "'subject'", "]", ",", "triple", "[", "'relation'", "]", ",", "triple", "[", "'object'", "]", ")", ")", "\n", "batched_triples", ".", "append", "(", "text_triple", ")", "\n", "if", "len", "(", "batched_triples", ")", "==", "batch_size", "or", "i", "==", "len", "(", "triples", ")", ":", "\n", "                    ", "text_vector", ",", "triple_vector", "=", "model", "(", "batched_triples", ")", "\n", "text_vector", ",", "triple_vector", "=", "text_vector", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "triple_vector", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "batched_triples", ")", ")", ":", "\n", "                        ", "triple", "=", "triples", "[", "i", "-", "len", "(", "batched_triples", ")", "+", "j", "]", "\n", "triple", "[", "'contrastive_dis'", "]", "=", "float", "(", "np", ".", "linalg", ".", "norm", "(", "text_vector", "[", "j", "]", "-", "triple_vector", "[", "j", "]", ")", ")", "\n", "rerank_triples", ".", "append", "(", "triple", ")", "\n", "", "batched_triples", "=", "[", "]", "\n", "", "", "data", "[", "docid", "]", "=", "sorted", "(", "rerank_triples", ",", "key", "=", "lambda", "x", ":", "x", "[", "'contrastive_dis'", "]", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.cgraywang_deepex.scripts.ranking.IP": [[9, 11], ["requests.get"], "function", ["None"], ["def", "IP", "(", ")", ":", "\n", "    ", "return", "get", "(", "'https://api.ipify.org'", ")", ".", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.scripts.ranking.Thresholding": [[12, 25], ["torch.no_grad", "tqdm.tqdm", "range", "list", "sorted", "data.items", "sieved_triples.append", "len", "len", "triple[].split", "triple[].split"], "function", ["None"], ["", "def", "Thresholding", "(", "data", ",", "score_thres", "=", "0.01", ",", "len_thres", "=", "20", ")", ":", "\n", "    ", "s", "=", "[", "0", "for", "_", "in", "range", "(", "2048", ")", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "(", "docid", ",", "triples", ")", "in", "tqdm", ".", "tqdm", "(", "list", "(", "data", ".", "items", "(", ")", ")", ")", ":", "\n", "            ", "sieved_triples", "=", "[", "]", "\n", "for", "triple", "in", "sorted", "(", "triples", ",", "key", "=", "lambda", "x", ":", "x", "[", "'sentence'", "]", ")", ":", "\n", "                ", "s", "[", "len", "(", "triple", "[", "'relation'", "]", ".", "split", "(", "' '", ")", ")", "]", "+=", "1", "\n", "if", "(", "\n", "triple", "[", "'score'", "]", ">=", "score_thres", "\n", "and", "len", "(", "triple", "[", "'relation'", "]", ".", "split", "(", "' '", ")", ")", "<=", "len_thres", "\n", ")", ":", "\n", "                    ", "sieved_triples", ".", "append", "(", "triple", ")", "\n", "", "", "data", "[", "docid", "]", "=", "sieved_triples", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.scripts.generator.main": [[49, 192], ["transformers.HfArgumentParser", "transformers.HfArgumentParser.parse_args_into_dataclasses", "logger.addHandler", "logging.basicConfig", "logger.warning", "transformers.set_seed", "AutoModelForMaskedLM.from_config.resize_token_embeddings", "time.time", "time.time", "logger.info", "tqdm", "logger.info", "os.path.exists", "os.path.exists", "logging.FileHandler", "os.path.exists", "os.listdir", "ValueError", "bool", "transformers.AutoConfig.from_pretrained", "logger.warning", "isinstance", "isinstance", "transformers.AutoModelForMaskedLM.from_pretrained", "logger.info", "transformers.AutoModelForMaskedLM.from_config", "len", "deepex.data.NPMentionGenerator", "sorted", "int", "deepex.data.REDataset", "enumerate", "os.mkdir", "os.mkdir", "os.path.join", "transformers.AutoTokenizer.from_pretrained", "transformers.AutoTokenizer.from_pretrained", "transformers.AutoTokenizer.from_pretrained", "transformers.AutoTokenizer.from_pretrained", "ValueError", "deepex.data.RCMentionGenerator", "os.listdir", "f.endswith", "tqdm", "os.path.join", "os.path.exists", "time.time", "transformers.Trainer", "transformers.Trainer.get_eval_dataloader", "deepex.model.predict_and_save_results", "logger.info", "time.time", "json.dump", "logger.info", "os.path.split", "transformers.AutoTokenizer.from_pretrained", "transformers.AutoTokenizer.from_pretrained", "transformers.AutoTokenizer.from_pretrained", "transformers.AutoTokenizer.from_pretrained", "bool", "time.time", "[].split", "deepex.data.REDataset.generate_batched_datasets", "os.path.join", "logger.info", "os.path.exists", "open", "time.time", "os.path.split", "os.mkdir", "os.path.join", "data_args.data_dir.split", "time.time", "time.time", "f.split"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.model.kgm.predict_and_save_results", "home.repos.pwc.inspect_result.cgraywang_deepex.data.re_data.REDataset.generate_batched_datasets"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "HfArgumentParser", "(", "(", "ModelArguments", ",", "DataTrainingArguments", ",", "TrainingArguments", ")", ")", "\n", "model_args", ",", "data_args", ",", "training_args", "=", "parser", ".", "parse_args_into_dataclasses", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "split", "(", "training_args", ".", "output_dir", ")", "[", "0", "]", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "split", "(", "training_args", ".", "output_dir", ")", "[", "0", "]", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "training_args", ".", "output_dir", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "mkdir", "(", "training_args", ".", "output_dir", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "", "logger", ".", "addHandler", "(", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "training_args", ".", "output_dir", ",", "'run.log'", ")", ")", ")", "\n", "\n", "if", "(", "\n", "os", ".", "path", ".", "exists", "(", "training_args", ".", "output_dir", ")", "\n", "and", "os", ".", "listdir", "(", "training_args", ".", "output_dir", ")", "\n", "and", "training_args", ".", "do_train", "\n", "and", "not", "training_args", ".", "overwrite_output_dir", "\n", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"Output directory ({training_args.output_dir}) already exists and is not empty. Use --overwrite_output_dir to overcome.\"", "\n", ")", "\n", "\n", "", "logging", ".", "basicConfig", "(", "\n", "format", "=", "\"%(asctime)s - %(levelname)s - %(name)s -   %(message)s\"", ",", "\n", "datefmt", "=", "\"%m/%d/%Y %H:%M:%S\"", ",", "\n", "level", "=", "logging", ".", "INFO", "if", "training_args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "else", "logging", ".", "WARN", ",", "\n", ")", "\n", "logger", ".", "warning", "(", "\n", "\"Process rank: %s, device: %s, n_gpu: %s, distributed training: %s, 16-bits training: %s\"", ",", "\n", "training_args", ".", "local_rank", ",", "\n", "training_args", ".", "device", ",", "\n", "training_args", ".", "n_gpu", ",", "\n", "bool", "(", "training_args", ".", "local_rank", "!=", "-", "1", ")", ",", "\n", "training_args", ".", "fp16", ",", "\n", ")", "\n", "\n", "set_seed", "(", "training_args", ".", "seed", ")", "\n", "\n", "\n", "if", "model_args", ".", "model_name_or_path", ":", "\n", "        ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_args", ".", "model_name_or_path", ",", "cache_dir", "=", "model_args", ".", "cache_dir", ")", "\n", "config", ".", "output_attentions", "=", "True", "\n", "", "else", ":", "\n", "        ", "config", "=", "CONFIG_MAPPING", "[", "model_args", ".", "model_type", "]", "(", ")", "\n", "logger", ".", "warning", "(", "\"You are instantiating a new config instance from scratch.\"", ")", "\n", "\n", "", "if", "model_args", ".", "tokenizer_name", ":", "\n", "        ", "if", "'gpt2'", "not", "in", "model_args", ".", "tokenizer_name", ":", "\n", "            ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_args", ".", "tokenizer_name", ",", "cache_dir", "=", "model_args", ".", "cache_dir", ",", "use_fast", "=", "True", ")", "\n", "tokenizer1", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_args", ".", "tokenizer_name", ",", "cache_dir", "=", "model_args", ".", "cache_dir", ",", "\n", "use_fast", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_args", ".", "tokenizer_name", ",", "cache_dir", "=", "model_args", ".", "cache_dir", ",", "\n", "use_fast", "=", "True", ")", "\n", "tokenizer1", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_args", ".", "tokenizer_name", ",", "cache_dir", "=", "model_args", ".", "cache_dir", ",", "\n", "use_fast", "=", "False", ")", "\n", "", "", "elif", "model_args", ".", "model_name_or_path", ":", "\n", "        ", "if", "'gpt2'", "not", "in", "model_args", ".", "model_name_or_path", ":", "\n", "            ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_args", ".", "model_name_or_path", ",", "cache_dir", "=", "model_args", ".", "cache_dir", ",", "use_fast", "=", "True", ")", "\n", "tokenizer1", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_args", ".", "model_name_or_path", ",", "cache_dir", "=", "model_args", ".", "cache_dir", ",", "\n", "use_fast", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_args", ".", "model_name_or_path", ",", "cache_dir", "=", "model_args", ".", "cache_dir", ",", "\n", "use_fast", "=", "True", ")", "\n", "tokenizer1", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_args", ".", "model_name_or_path", ",", "cache_dir", "=", "model_args", ".", "cache_dir", ",", "\n", "use_fast", "=", "False", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"You are instantiating a new tokenizer from scratch. This is not supported, but you can do it from another script, save it,\"", "\n", "\"and load it from here, using --tokenizer_name\"", "\n", ")", "\n", "", "if", "isinstance", "(", "tokenizer", ",", "GPT2TokenizerFast", ")", "or", "isinstance", "(", "tokenizer", ",", "GPT2Tokenizer", ")", ":", "\n", "        ", "tokenizer", ".", "pad_token", "=", "tokenizer", ".", "eos_token", "\n", "tokenizer1", ".", "pad_token", "=", "tokenizer1", ".", "eos_token", "\n", "", "if", "model_args", ".", "model_name_or_path", ":", "\n", "        ", "model", "=", "AutoModelForMaskedLM", ".", "from_pretrained", "(", "\n", "model_args", ".", "model_name_or_path", "\n", "if", "model_args", ".", "local_model_name_or_path", "is", "None", "or", "model_args", ".", "local_model_name_or_path", "==", "'None'", "\n", "else", "model_args", ".", "local_model_name_or_path", ",", "\n", "from_tf", "=", "bool", "(", "\".ckpt\"", "in", "model_args", ".", "model_name_or_path", ")", ",", "\n", "config", "=", "config", ",", "\n", "cache_dir", "=", "model_args", ".", "cache_dir", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Training new model from scratch\"", ")", "\n", "model", "=", "AutoModelForMaskedLM", ".", "from_config", "(", "config", ")", "\n", "\n", "", "model", ".", "resize_token_embeddings", "(", "len", "(", "tokenizer", ")", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "start_aug_time", "=", "time", ".", "time", "(", ")", "\n", "if", "data_args", ".", "data_aug", "==", "'np'", ":", "\n", "        ", "mention_generator", "=", "NPMentionGenerator", "(", ")", "\n", "", "elif", "data_args", ".", "data_aug", "==", "'rc'", ":", "\n", "        ", "mention_generator", "=", "RCMentionGenerator", "(", "dataset", "=", "data_args", ".", "data_dir", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "logger", ".", "info", "(", "'time spent on loading data augmentation: {}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_aug_time", ")", ")", "\n", "\n", "\n", "for", "f", "in", "tqdm", "(", "sorted", "(", "os", ".", "listdir", "(", "data_args", ".", "data_dir", ")", ")", ",", "desc", "=", "'Generate dataset and results'", ")", ":", "\n", "        ", "if", "not", "f", ".", "endswith", "(", "'.jsonl'", ")", ":", "\n", "            ", "continue", "\n", "", "index", "=", "int", "(", "f", ".", "split", "(", "'.jsonl'", ")", "[", "0", "]", ".", "split", "(", "'P'", ")", "[", "1", "]", ")", "\n", "redataset_processor", "=", "REDataset", "(", "data_args", ".", "data_dir", ",", "index", ",", "tokenizer", ",", "mention_generator", ",", "data_args", ".", "max_length", ")", "\n", "for", "i", ",", "eval_dataset", "in", "enumerate", "(", "\n", "tqdm", "(", "redataset_processor", ".", "generate_batched_datasets", "(", ")", ",", "\n", "desc", "=", "'Generate batch dataset and results'", ")", ")", ":", "\n", "            ", "res_dir", "=", "os", ".", "path", ".", "join", "(", "training_args", ".", "output_dir", ",", "\n", "\"{}_{}_{}_{}_{}_{}\"", ".", "format", "(", "index", ",", "tokenizer", ".", "__class__", ".", "__name__", ",", "\n", "mention_generator", ".", "__class__", ".", "__name__", ",", "data_args", ".", "max_length", ",", "\n", "i", ",", "training_args", ".", "local_rank", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "res_dir", ",", "\"search_res.json\"", ")", ")", ":", "\n", "                ", "logger", ".", "info", "(", "'skip for {}'", ".", "format", "(", "res_dir", ")", ")", "\n", "continue", "\n", "", "start_generation_time", "=", "time", ".", "time", "(", ")", "\n", "trainer", "=", "Trainer", "(", "\n", "model", "=", "model", ",", "\n", "args", "=", "training_args", ",", "\n", "eval_dataset", "=", "eval_dataset", ",", "\n", "data_collator", "=", "default_data_collator", "\n", ")", "\n", "eval_dataloader", "=", "trainer", ".", "get_eval_dataloader", "(", "eval_dataset", ")", "\n", "_", ",", "res", "=", "predict_and_save_results", "(", "eval_dataloader", ",", "\n", "description", "=", "\"Generate_triplets\"", ",", "\n", "trainer", "=", "trainer", ",", "\n", "model_args", "=", "model_args", ",", "\n", "tokenizer", "=", "tokenizer1", ")", "\n", "logger", ".", "info", "(", "'total producing triplets time: {}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_generation_time", ")", ")", "\n", "\n", "start_merge_time", "=", "time", ".", "time", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_dir", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "os", ".", "mkdir", "(", "res_dir", ")", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "", "", "_", ",", "_", ",", "_", ",", "search_res", "=", "res", "\n", "json", ".", "dump", "(", "search_res", ",", "open", "(", "os", ".", "path", ".", "join", "(", "res_dir", ",", "\"search_res.json\"", ")", ",", "'w'", ")", ")", "\n", "logger", ".", "info", "(", "'total dump triplets time: {}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_merge_time", ")", ")", "\n", "", "", "logger", ".", "info", "(", "'total time: {}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.scripts.generator._mp_fn": [[194, 196], ["generator.main"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.scripts.generator.main"], ["", "def", "_mp_fn", "(", "index", ")", ":", "\n", "    ", "main", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.scripts.manager.SysCall": [[8, 12], ["subprocess.Popen().wait", "subprocess.Popen"], "function", ["None"], ["def", "SysCall", "(", "command", ")", ":", "\n", "    ", "subprocess", ".", "Popen", "(", "\n", "command", ",", "\n", "shell", "=", "True", "\n", ")", ".", "wait", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.scripts.manager.PreprocessData": [[14, 48], ["Create", "enumerate", "os.path.exists", "SaveJSON", "Create", "LoadJSON", "SaveJSON", "Create", "SaveJSON", "open", "enumerate", "open", "enumerate", "Exception", "LoadJSON.append", "LoadJSON.append", "META_TASK.lower", "str", "str", "line[].replace().replace", "str", "str", "line[].replace().replace", "line[].replace", "line[].replace"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.Create", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.SaveJSON", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.Create", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.LoadJSON", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.SaveJSON", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.Create", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.SaveJSON"], ["", "def", "PreprocessData", "(", "META_TASK", ",", "RAW_PATH", ",", "DATA_PATH", ")", ":", "\n", "    ", "if", "META_TASK", "in", "[", "\"OIE_2016\"", "]", ":", "\n", "        ", "Create", "(", "DATA_PATH", ")", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "[", "'test'", ",", "'dev'", "]", ")", ":", "\n", "            ", "data", "=", "[", "]", ";", "file_path", "=", "RAW_PATH", "+", "f\"{t}.txt\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "                ", "with", "open", "(", "RAW_PATH", "+", "f\"{t}.txt\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "                    ", "for", "j", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                        ", "data", ".", "append", "(", "\n", "{", "\n", "\"id\"", ":", "str", "(", "j", "+", "1", ")", ",", "\n", "\"title\"", ":", "str", "(", "j", "+", "1", ")", ",", "\n", "\"text\"", ":", "line", "[", ":", "-", "1", "]", ".", "replace", "(", "'('", ",", "' '", ")", ".", "replace", "(", "')'", ",", "' '", ")", ",", "\n", "}", "\n", ")", "\n", "", "", "", "elif", "t", "==", "'test'", ":", "\n", "                ", "raise", "Exception", "(", "f\"Test data files not found at '{file_path}'!\"", ")", "\n", "", "SaveJSON", "(", "data", ",", "DATA_PATH", "+", "f\"P{i}.jsonl\"", ",", "jsonl", "=", "True", ")", "\n", "", "", "elif", "META_TASK", "in", "[", "\"FewRel\"", ",", "\"TACRED\"", "]", ":", "\n", "        ", "Create", "(", "DATA_PATH", ")", "\n", "data", "=", "LoadJSON", "(", "f\"data/{META_TASK}/data.jsonl\"", ",", "jsonl", "=", "True", ")", "\n", "SaveJSON", "(", "data", ",", "DATA_PATH", "+", "\"P0.jsonl\"", ",", "jsonl", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "Create", "(", "DATA_PATH", ")", ";", "data", "=", "[", "]", "\n", "with", "open", "(", "RAW_PATH", "+", "\"{0}.raw\"", ".", "format", "(", "META_TASK", ".", "lower", "(", ")", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "j", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "data", ".", "append", "(", "\n", "{", "\n", "\"id\"", ":", "str", "(", "j", "+", "1", ")", ",", "\n", "\"title\"", ":", "str", "(", "j", "+", "1", ")", ",", "\n", "\"text\"", ":", "line", "[", ":", "-", "1", "]", ".", "replace", "(", "'('", ",", "' '", ")", ".", "replace", "(", "')'", ",", "' '", ")", ",", "\n", "}", "\n", ")", "\n", "", "", "SaveJSON", "(", "data", ",", "DATA_PATH", "+", "\"P0.jsonl\"", ",", "jsonl", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.scripts.data_preprocess.PreprocessData": [[3, 34], ["Create", "os.path.exists", "SaveJSON", "Create", "LoadJSON", "SaveJSON", "Create", "SaveJSON", "open", "enumerate", "open", "enumerate", "LoadJSON.append", "LoadJSON.append", "str", "str", "line[].replace().replace", "META_TASK.lower", "str", "str", "line[].replace().replace", "line[].replace", "line[].replace"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.Create", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.SaveJSON", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.Create", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.LoadJSON", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.SaveJSON", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.Create", "home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.SaveJSON"], ["def", "PreprocessData", "(", "META_TASK", ",", "RAW_PATH", ",", "DATA_PATH", ")", ":", "\n", "    ", "if", "META_TASK", "in", "[", "\"OIE_2016\"", "]", ":", "\n", "        ", "Create", "(", "DATA_PATH", ")", "\n", "data", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "RAW_PATH", "+", "\"test.txt\"", ")", ":", "\n", "            ", "with", "open", "(", "RAW_PATH", "+", "\"test.txt\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "for", "j", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                    ", "data", ".", "append", "(", "\n", "{", "\n", "\"id\"", ":", "str", "(", "j", "+", "1", ")", ",", "\n", "\"title\"", ":", "str", "(", "j", "+", "1", ")", ",", "\n", "\"text\"", ":", "line", "[", ":", "-", "1", "]", ".", "replace", "(", "'('", ",", "' '", ")", ".", "replace", "(", "')'", ",", "' '", ")", ",", "\n", "}", "\n", ")", "\n", "", "", "", "SaveJSON", "(", "data", ",", "DATA_PATH", "+", "f\"P0.jsonl\"", ",", "jsonl", "=", "True", ")", "\n", "", "elif", "META_TASK", "in", "[", "\"FewRel\"", ",", "\"TACRED\"", "]", ":", "\n", "        ", "Create", "(", "DATA_PATH", ")", "\n", "data", "=", "LoadJSON", "(", "f\"data/{META_TASK}/data.jsonl\"", ",", "jsonl", "=", "True", ")", "\n", "SaveJSON", "(", "data", ",", "DATA_PATH", "+", "\"P0.jsonl\"", ",", "jsonl", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "Create", "(", "DATA_PATH", ")", ";", "data", "=", "[", "]", "\n", "with", "open", "(", "RAW_PATH", "+", "\"{0}.raw\"", ".", "format", "(", "META_TASK", ".", "lower", "(", ")", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "j", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "data", ".", "append", "(", "\n", "{", "\n", "\"id\"", ":", "str", "(", "j", "+", "1", ")", ",", "\n", "\"title\"", ":", "str", "(", "j", "+", "1", ")", ",", "\n", "\"text\"", ":", "line", "[", ":", "-", "1", "]", ".", "replace", "(", "'('", ",", "' '", ")", ".", "replace", "(", "')'", ",", "' '", ")", ",", "\n", "}", "\n", ")", "\n", "", "", "SaveJSON", "(", "data", ",", "DATA_PATH", "+", "\"P0.jsonl\"", ",", "jsonl", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.post_process.get_processed_output": [[8, 26], ["string_matcher.LemmatizeStringMatcher", "string_matcher.UnLemmatizeStringMatcher", "jsonlines.open", "open", "tqdm.tqdm", "dataset.lower", "dataset.lower", "dataset_preparation.get_relation_candidates", "writer.write", "dataset.lower", "dataset.lower", "jsonlines.Reader", "len", "item[].append", "elemrel.append"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.rc.dataset_preparation.get_relation_candidates"], ["def", "get_processed_output", "(", "dataset", ")", ":", "\n", "    ", "lemmatized_matcher", "=", "LemmatizeStringMatcher", "(", "f'{dataset.lower()}_aliases_lemmatized.json'", ")", "\n", "unlemmatized_matcher", "=", "UnLemmatizeStringMatcher", "(", "f'{dataset.lower()}_aliases_unlemmatized.json'", ")", "\n", "dev_relations", "=", "[", "'crosses'", ",", "'original language of film or TV show'", ",", "'competition class'", ",", "'part of'", ",", "'sport'", ",", "'constellation'", ",", "'position played on team / speciality'", ",", "'located in or next to body of water'", ",", "'voice type'", ",", "'follows'", ",", "'spouse'", ",", "'military rank'", ",", "'mother'", ",", "'member of'", ",", "'child'", ",", "'main subject'", "]", "\n", "with", "jsonlines", ".", "open", "(", "f'data/{dataset.lower()}_processed.jsonl'", ",", "mode", "=", "'w'", ")", "as", "writer", ":", "\n", "        ", "with", "open", "(", "f\"data/{dataset.lower()}_data.jsonl\"", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "            ", "for", "item", "in", "tqdm", ".", "tqdm", "(", "[", "i", "for", "i", "in", "jsonlines", ".", "Reader", "(", "f", ")", "]", ")", ":", "\n", "                ", "item", "[", "'rel_candidates'", "]", "=", "[", "]", "\n", "for", "elem", "in", "get_relation_candidates", "(", "item", ",", "lemmatized_matcher", ",", "unlemmatized_matcher", ")", ":", "\n", "                    ", "elemrel", "=", "[", "]", "\n", "for", "r", "in", "elem", "[", "\"relation\"", "]", ":", "\n", "                        ", "if", "r", "in", "dev_relations", ":", "\n", "                            ", "elemrel", ".", "append", "(", "r", ")", "\n", "", "", "elem", "[", "\"relation\"", "]", "=", "elemrel", "\n", "if", "len", "(", "elem", "[", "\"relation\"", "]", ")", ">", "0", ":", "\n", "                        ", "item", "[", "'rel_candidates'", "]", ".", "append", "(", "elem", ")", "\n", "\n", "", "", "writer", ".", "write", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.post_process.get_id_alias2relations_dict": [[27, 46], ["open", "jsonlines.Reader", "open", "json.dump", "range", "list", "dataset.lower", "rel_candidates.append", "int", "dataset.lower", "alias2relations_dict.keys", "set", "set"], "function", ["None"], ["", "", "", "", "def", "get_id_alias2relations_dict", "(", "dataset", ")", ":", "\n", "    ", "id_alias2relations_dict", "=", "{", "}", "\n", "with", "open", "(", "f'data/{dataset.lower()}_processed.jsonl'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "jsonlines", ".", "Reader", "(", "f", ")", ":", "\n", "            ", "alias2relations_dict", "=", "{", "}", "\n", "text", "=", "line", "[", "\"text\"", "]", "\n", "for", "elem", "in", "line", "[", "'rel_candidates'", "]", ":", "\n", "                ", "span", "=", "elem", "[", "'char_span'", "]", "\n", "rel_candidates", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "span", "[", "0", "]", ",", "span", "[", "1", "]", ")", ":", "\n", "                    ", "rel_candidates", ".", "append", "(", "text", "[", "i", "]", ")", "\n", "", "rel_candidate", "=", "''", ".", "join", "(", "rel_candidates", ")", "\n", "if", "not", "rel_candidate", "in", "alias2relations_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "alias2relations_dict", "[", "rel_candidate", "]", "=", "[", "]", "\n", "", "alias2relations_dict", "[", "rel_candidate", "]", "=", "list", "(", "set", "(", "alias2relations_dict", "[", "rel_candidate", "]", ")", "|", "set", "(", "elem", "[", "'relation'", "]", ")", ")", "\n", "", "id_alias2relations_dict", "[", "int", "(", "line", "[", "\"id\"", "]", ")", "]", "=", "alias2relations_dict", "\n", "\n", "", "", "with", "open", "(", "f'data/{dataset.lower()}_id_alias2relations_dict.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "id_alias2relations_dict", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.dataset_preparation.get_relation_candidates": [[9, 37], ["unlemmatized_matcher", "lemmatized_matcher", "enumerate", "enumerate", "list", "set", "set", "list", "merged_relation_candidates.append", "str", "str", "charspan_elem_dict.keys", "un_charspan_elem_dict.keys", "charspan_elem_dict.keys", "un_charspan_elem_dict.keys", "charspan_elem_dict.keys", "merged_relation_candidates.append", "merged_relation_candidates.append", "set", "set"], "function", ["None"], ["def", "get_relation_candidates", "(", "item", ",", "lemmatized_matcher", ",", "unlemmatized_matcher", ")", ":", "\n", "    ", "text", "=", "item", "[", "'text'", "]", "\n", "\n", "un_relation_candidates", "=", "unlemmatized_matcher", "(", "text", ")", "\n", "relation_candidates", "=", "lemmatized_matcher", "(", "text", ")", "\n", "\n", "charspan_elem_dict", "=", "{", "}", "\n", "for", "i", ",", "elem", "in", "enumerate", "(", "relation_candidates", ")", ":", "\n", "        ", "charspan_elem_dict", "[", "str", "(", "elem", "[", "'char_span'", "]", ")", "]", "=", "elem", "\n", "\n", "", "un_charspan_elem_dict", "=", "{", "}", "\n", "for", "i", ",", "un_elem", "in", "enumerate", "(", "un_relation_candidates", ")", ":", "\n", "        ", "un_charspan_elem_dict", "[", "str", "(", "un_elem", "[", "'char_span'", "]", ")", "]", "=", "un_elem", "\n", "\n", "", "merged_alias_charspan", "=", "list", "(", "set", "(", "charspan_elem_dict", ".", "keys", "(", ")", ")", "|", "set", "(", "un_charspan_elem_dict", ".", "keys", "(", ")", ")", ")", "\n", "\n", "merged_relation_candidates", "=", "[", "]", "\n", "for", "chspan", "in", "merged_alias_charspan", ":", "\n", "        ", "if", "chspan", "in", "charspan_elem_dict", ".", "keys", "(", ")", "and", "chspan", "in", "un_charspan_elem_dict", ".", "keys", "(", ")", ":", "\n", "            ", "merged_relation", "=", "list", "(", "set", "(", "charspan_elem_dict", "[", "chspan", "]", "[", "\"relation\"", "]", ")", "|", "set", "(", "un_charspan_elem_dict", "[", "chspan", "]", "[", "\"relation\"", "]", ")", ")", "\n", "elem", "=", "charspan_elem_dict", "[", "chspan", "]", "\n", "elem", "[", "\"relation\"", "]", "=", "merged_relation", "\n", "merged_relation_candidates", ".", "append", "(", "elem", ")", "\n", "", "elif", "chspan", "in", "charspan_elem_dict", ".", "keys", "(", ")", ":", "\n", "            ", "merged_relation_candidates", ".", "append", "(", "charspan_elem_dict", "[", "chspan", "]", ")", "\n", "", "else", ":", "\n", "            ", "merged_relation_candidates", ".", "append", "(", "un_charspan_elem_dict", "[", "chspan", "]", ")", "\n", "", "", "return", "merged_relation_candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.dataset_preparation.Prepare": [[38, 93], ["string_matcher.LemmatizeStringMatcher", "string_matcher.UnLemmatizeStringMatcher", "json.load", "json.load", "open", "open", "jsonlines.open", "json.load.items", "json.load", "dataset.lower", "dataset.lower", "open", "jsonlines.open", "str", "dataset_preparation.get_relation_candidates", "w.write", "str", "dataset_preparation.get_relation_candidates", "w.write", "len", "item[].append", "len", "item[].append", "elemrel.append", "int", "int", "range", "range", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.rc.dataset_preparation.get_relation_candidates", "home.repos.pwc.inspect_result.cgraywang_deepex.rc.dataset_preparation.get_relation_candidates"], ["", "def", "Prepare", "(", "dataset", ")", ":", "\n", "    ", "lemmatized_matcher", "=", "LemmatizeStringMatcher", "(", "f'{dataset.lower()}_aliases_lemmatized.json'", ")", "\n", "unlemmatized_matcher", "=", "UnLemmatizeStringMatcher", "(", "f'{dataset.lower()}_aliases_unlemmatized.json'", ")", "\n", "if", "dataset", "==", "'FewRel'", ":", "\n", "        ", "dev_relations", "=", "[", "'crosses'", ",", "'original language of film or TV show'", ",", "'competition class'", ",", "'part of'", ",", "'sport'", ",", "'constellation'", ",", "'position played on team / speciality'", ",", "'located in or next to body of water'", ",", "'voice type'", ",", "'follows'", ",", "'spouse'", ",", "'military rank'", ",", "'mother'", ",", "'member of'", ",", "'child'", ",", "'main subject'", "]", "\n", "data_dict", "=", "json", ".", "load", "(", "open", "(", "\"../../data/FewRel/val_wiki.json\"", ")", ")", "\n", "pid2name", "=", "json", ".", "load", "(", "open", "(", "\"../../data/FewRel/pid2name.json\"", ")", ")", "\n", "index", "=", "0", "\n", "with", "jsonlines", ".", "open", "(", "f\"../../data/{dataset}/data.jsonl\"", ",", "'w'", ")", "as", "w", ":", "\n", "            ", "for", "k", ",", "vs", "in", "data_dict", ".", "items", "(", ")", ":", "\n", "                ", "for", "v", "in", "vs", ":", "\n", "                    ", "item", "=", "{", "}", "\n", "item", "[", "\"id\"", "]", "=", "str", "(", "index", ")", "\n", "item", "[", "\"title\"", "]", "=", "v", "[", "\"h\"", "]", "[", "0", "]", "\n", "item", "[", "\"answer\"", "]", "=", "v", "[", "\"t\"", "]", "[", "0", "]", "\n", "item", "[", "\"subject_spans\"", "]", "=", "[", "v", "[", "\"h\"", "]", "[", "2", "]", "[", "0", "]", "]", "\n", "item", "[", "\"object_spans\"", "]", "=", "[", "v", "[", "\"t\"", "]", "[", "2", "]", "[", "0", "]", "]", "\n", "item", "[", "\"tokens\"", "]", "=", "v", "[", "\"tokens\"", "]", "\n", "item", "[", "\"text\"", "]", "=", "' '", ".", "join", "(", "v", "[", "\"tokens\"", "]", ")", "\n", "item", "[", "\"true_relation\"", "]", "=", "pid2name", "[", "k", "]", "[", "0", "]", "\n", "\n", "item", "[", "'rel_candidates'", "]", "=", "[", "]", "\n", "for", "elem", "in", "get_relation_candidates", "(", "item", ",", "lemmatized_matcher", ",", "unlemmatized_matcher", ")", ":", "\n", "                        ", "elemrel", "=", "[", "]", "\n", "for", "r", "in", "elem", "[", "\"relation\"", "]", ":", "\n", "                            ", "if", "r", "in", "dev_relations", ":", "\n", "                                ", "elemrel", ".", "append", "(", "r", ")", "\n", "", "", "elem", "[", "\"relation\"", "]", "=", "elemrel", "\n", "if", "len", "(", "elem", "[", "\"relation\"", "]", ")", ">", "0", ":", "\n", "                            ", "item", "[", "'rel_candidates'", "]", ".", "append", "(", "elem", ")", "\n", "\n", "", "", "w", ".", "write", "(", "item", ")", "\n", "index", "+=", "1", "\n", "", "", "", "", "elif", "dataset", "==", "'TACRED'", ":", "\n", "        ", "data_list", "=", "json", ".", "load", "(", "open", "(", "\"../../data/TACRED/test.json\"", ")", ")", "\n", "index", "=", "0", "\n", "with", "jsonlines", ".", "open", "(", "\"../../data/TACRED/data.jsonl\"", ",", "'w'", ")", "as", "w", ":", "\n", "            ", "for", "v", "in", "data_list", ":", "\n", "                ", "item", "=", "{", "}", "\n", "item", "[", "\"id\"", "]", "=", "str", "(", "index", ")", "\n", "item", "[", "\"title\"", "]", "=", "' '", ".", "join", "(", "v", "[", "\"token\"", "]", "[", "int", "(", "v", "[", "\"subj_start\"", "]", ")", ":", "int", "(", "v", "[", "\"subj_end\"", "]", ")", "+", "1", "]", ")", "\n", "item", "[", "\"answer\"", "]", "=", "' '", ".", "join", "(", "v", "[", "\"token\"", "]", "[", "int", "(", "v", "[", "\"obj_start\"", "]", ")", ":", "int", "(", "v", "[", "\"obj_end\"", "]", ")", "+", "1", "]", ")", "\n", "item", "[", "\"subject_spans\"", "]", "=", "[", "[", "i", "for", "i", "in", "range", "(", "int", "(", "v", "[", "\"subj_start\"", "]", ")", ",", "int", "(", "v", "[", "\"subj_end\"", "]", ")", "+", "1", ")", "]", "]", "\n", "item", "[", "\"object_spans\"", "]", "=", "[", "[", "i", "for", "i", "in", "range", "(", "int", "(", "v", "[", "\"obj_start\"", "]", ")", ",", "int", "(", "v", "[", "\"obj_end\"", "]", ")", "+", "1", ")", "]", "]", "\n", "item", "[", "\"tokens\"", "]", "=", "v", "[", "\"token\"", "]", "\n", "item", "[", "\"text\"", "]", "=", "' '", ".", "join", "(", "v", "[", "\"token\"", "]", ")", "\n", "item", "[", "\"true_relation\"", "]", "=", "v", "[", "\"relation\"", "]", "\n", "\n", "item", "[", "'rel_candidates'", "]", "=", "[", "]", "\n", "for", "elem", "in", "get_relation_candidates", "(", "item", ",", "lemmatized_matcher", ",", "unlemmatized_matcher", ")", ":", "\n", "                    ", "if", "len", "(", "elem", "[", "\"relation\"", "]", ")", ">", "0", ":", "\n", "                        ", "item", "[", "'rel_candidates'", "]", ".", "append", "(", "elem", ")", "\n", "\n", "", "", "w", ".", "write", "(", "item", ")", "\n", "index", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.__init__": [[26, 28], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "data", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.lemmatize_relation": [[29, 43], ["nlp", "len", "w.lemma_.lower", "result.append", "ns2os.append", "len", "len", "len"], "methods", ["None"], ["", "def", "lemmatize_relation", "(", "self", ",", "relation", ")", ":", "\n", "        ", "_r", "=", "relation", "\n", "if", "len", "(", "_r", ")", "==", "0", ":", "\n", "            ", "_r", "=", "relation", "\n", "", "result", ",", "ns2os", "=", "[", "]", ",", "[", "]", "\n", "offset", "=", "-", "1", "\n", "for", "w", "in", "nlp", "(", "_r", ")", ":", "\n", "            ", "word", "=", "w", ".", "lemma_", ".", "lower", "(", ")", "\n", "result", ".", "append", "(", "word", ")", "\n", "new_span", "=", "[", "offset", "+", "1", ",", "offset", "+", "1", "+", "len", "(", "word", ")", "]", "\n", "old_span", "=", "[", "w", ".", "idx", ",", "w", ".", "idx", "+", "len", "(", "w", ".", "text", ")", "]", "\n", "ns2os", ".", "append", "(", "[", "new_span", ",", "old_span", "]", ")", "\n", "offset", "+=", "(", "1", "+", "len", "(", "word", ")", ")", "\n", "", "return", "' '", ".", "join", "(", "result", ")", ",", "ns2os", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.lemmatize_relation_with_time": [[44, 52], ["datetime.datetime.datetime.now", "string_matcher.remove_stopwords", "datetime.datetime.datetime.now", "len", "w.lemma_.lower", "datetime.datetime.datetime.now", "nlp"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.remove_stopwords"], ["", "def", "lemmatize_relation_with_time", "(", "self", ",", "relation", ")", ":", "\n", "        ", "start", "=", "datetime", ".", "now", "(", ")", "\n", "_r", "=", "remove_stopwords", "(", "relation", ")", "\n", "mid", "=", "datetime", ".", "now", "(", ")", "\n", "if", "len", "(", "_r", ")", "==", "0", ":", "\n", "            ", "_r", "=", "relation", "\n", "", "res", "=", "' '", ".", "join", "(", "[", "w", ".", "lemma_", ".", "lower", "(", ")", "for", "w", "in", "nlp", "(", "_r", ")", "]", ")", "\n", "return", "mid", "-", "start", ",", "datetime", ".", "now", "(", ")", "-", "mid", ",", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map": [[53, 57], ["string_matcher.LemmatizeHelper.lemmatize_relation"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.lemmatize_relation"], ["", "def", "map", "(", "self", ",", "relation", ")", ":", "\n", "        ", "lemmatized", ",", "ns2os", "=", "self", ".", "lemmatize_relation", "(", "relation", ")", "\n", "self", ".", "data", "[", "relation", "]", "=", "lemmatized", "\n", "return", "lemmatized", ",", "ns2os", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeStringMatcher.__init__": [[60, 66], ["string_matcher.LemmatizeHelper", "json.load", "flashtext.KeywordProcessor", "string_matcher.LemmatizeStringMatcher.processor.add_keywords_from_list", "open", "string_matcher.LemmatizeStringMatcher.o2w.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file", ")", ":", "\n", "        ", "self", ".", "helper", "=", "LemmatizeHelper", "(", ")", "\n", "self", ".", "o2w", "=", "json", ".", "load", "(", "open", "(", "file", ")", ")", "\n", "self", ".", "processor", "=", "KeywordProcessor", "(", "case_sensitive", "=", "False", ")", "\n", "keywords", "=", "[", "k", "for", "k", "in", "self", ".", "o2w", ".", "keys", "(", ")", "if", "k", "!=", "''", "]", "\n", "self", ".", "processor", ".", "add_keywords_from_list", "(", "keywords", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeStringMatcher.__call__": [[67, 88], ["string_matcher.LemmatizeStringMatcher.helper.map", "string_matcher.LemmatizeStringMatcher.processor.extract_keywords", "sorted", "list", "range", "sorted.append", "string_matcher.LemmatizeStringMatcher.o2w[].keys", "len", "len", "mention.split", "len"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map"], ["", "def", "__call__", "(", "self", ",", "raw_string", ")", ":", "\n", "        ", "lemmatized_string", ",", "ns2os", "=", "self", ".", "helper", ".", "map", "(", "raw_string", ")", "\n", "keywords_found", "=", "self", ".", "processor", ".", "extract_keywords", "(", "lemmatized_string", ",", "span_info", "=", "True", ")", "\n", "candidates", "=", "[", "]", "\n", "for", "keyword_tuple", "in", "keywords_found", ":", "\n", "            ", "mention", ",", "start", ",", "end", "=", "keyword_tuple", "\n", "relation", "=", "list", "(", "self", ".", "o2w", "[", "mention", "]", ".", "keys", "(", ")", ")", "\n", "pos_start", ",", "pos_end", "=", "None", ",", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "ns2os", ")", ")", ":", "\n", "                ", "if", "pos_start", "is", "None", "and", "ns2os", "[", "i", "]", "[", "0", "]", "[", "0", "]", ">=", "start", ":", "\n", "                    ", "pos_start", "=", "i", "\n", "", "if", "pos_end", "is", "None", "and", "(", "i", "+", "1", "==", "len", "(", "ns2os", ")", "or", "ns2os", "[", "i", "+", "1", "]", "[", "0", "]", "[", "0", "]", ">=", "end", ")", ":", "\n", "                    ", "pos_end", "=", "i", "\n", "break", "\n", "", "", "if", "pos_start", "is", "None", "or", "pos_end", "is", "None", ":", "\n", "                ", "continue", "\n", "", "candidates", ".", "append", "(", "\n", "{", "\"aliase\"", ":", "mention", ",", "\"relation\"", ":", "relation", ",", "\"len\"", ":", "len", "(", "mention", ".", "split", "(", "' '", ")", ")", ",", "\n", "\"char_span\"", ":", "[", "ns2os", "[", "pos_start", "]", "[", "1", "]", "[", "0", "]", ",", "ns2os", "[", "pos_end", "]", "[", "1", "]", "[", "1", "]", "]", "}", ")", "\n", "", "candidates", "=", "sorted", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "'len'", "]", ",", "reverse", "=", "True", ")", "\n", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.UnLemmatizeStringMatcher.__init__": [[91, 95], ["json.load", "flashtext.KeywordProcessor", "string_matcher.UnLemmatizeStringMatcher.processor.add_keywords_from_list", "open", "list", "string_matcher.UnLemmatizeStringMatcher.a2r.keys"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "file", ")", ":", "\n", "        ", "self", ".", "a2r", "=", "json", ".", "load", "(", "open", "(", "file", ")", ")", "\n", "self", ".", "processor", "=", "KeywordProcessor", "(", "case_sensitive", "=", "False", ")", "\n", "self", ".", "processor", ".", "add_keywords_from_list", "(", "list", "(", "self", ".", "a2r", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.UnLemmatizeStringMatcher.__call__": [[96, 106], ["string_matcher.UnLemmatizeStringMatcher.processor.extract_keywords", "sorted", "sorted.append", "len", "mention.split"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "raw_string", ")", ":", "\n", "        ", "keywords_found", "=", "self", ".", "processor", ".", "extract_keywords", "(", "raw_string", ",", "span_info", "=", "True", ")", "\n", "candidates", "=", "[", "]", "\n", "for", "keyword_tuple", "in", "keywords_found", ":", "\n", "            ", "mention", ",", "start", ",", "end", "=", "keyword_tuple", "\n", "relation", "=", "self", ".", "a2r", "[", "mention", "]", "\n", "candidates", ".", "append", "(", "\n", "{", "\"aliase\"", ":", "mention", ",", "\"relation\"", ":", "relation", ",", "\"len\"", ":", "len", "(", "mention", ".", "split", "(", "' '", ")", ")", ",", "\"char_span\"", ":", "[", "start", ",", "end", "]", "}", ")", "\n", "", "candidates", "=", "sorted", "(", "candidates", ",", "key", "=", "lambda", "x", ":", "x", "[", "'len'", "]", ",", "reverse", "=", "True", ")", "\n", "return", "candidates", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.remove_stopwords": [[22, 24], ["s.split", "w.lower"], "function", ["None"], ["", "def", "remove_stopwords", "(", "s", ")", ":", "\n", "    ", "return", "\" \"", ".", "join", "(", "[", "w", "for", "w", "in", "s", ".", "split", "(", ")", "if", "w", ".", "lower", "(", ")", "not", "in", "STOPWORDS", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.evaluation.SysCall": [[11, 15], ["subprocess.Popen().wait", "subprocess.Popen"], "function", ["None"], ["def", "SysCall", "(", "command", ")", ":", "\n", "    ", "subprocess", ".", "Popen", "(", "\n", "command", ",", "\n", "shell", "=", "True", "\n", ")", ".", "wait", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.rc.evaluation.Evaluate": [[17, 145], ["json.load.keys", "collections.defaultdict", "collections.defaultdict", "our_result.items", "list", "print", "open", "json.load", "open", "json.load", "map", "open", "jsonlines.Reader", "len", "len", "contrastive_diss.append", "heapq.nsmallest", "our_result[].append", "set", "set", "str", "Not_in_text.append", "val_data.keys", "our_result.keys", "dataset.lower", "dataset.lower", "int", "dataset.lower", "[].keys", "[].replace", "str", "int", "[].split"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map"], ["", "def", "Evaluate", "(", "dataset", ",", "top_k", ")", ":", "\n", "    ", "with", "open", "(", "f\"data/{dataset.lower()}_result.json\"", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "result", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "f'data/{dataset.lower()}_id_alias2relations_dict.json'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "id_alias2relations_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "our_result", "=", "{", "}", "\n", "for", "k", "in", "result", ".", "keys", "(", ")", ":", "\n", "        ", "min_dis", "=", "100", "\n", "min_elem", "=", "None", "\n", "contrastive_diss", "=", "[", "]", "\n", "\n", "for", "elem", "in", "result", "[", "k", "]", ":", "\n", "            ", "contrastive_dis", "=", "elem", "[", "'contrastive_dis'", "]", "\n", "contrastive_diss", ".", "append", "(", "contrastive_dis", ")", "\n", "\n", "", "min_dis_list", "=", "map", "(", "contrastive_diss", ".", "index", ",", "heapq", ".", "nsmallest", "(", "top_k", ",", "contrastive_diss", ")", ")", "\n", "\n", "our_result", "[", "str", "(", "int", "(", "k", ")", ")", "]", "=", "[", "]", "\n", "for", "index", "in", "min_dis_list", ":", "\n", "            ", "our_result", "[", "str", "(", "int", "(", "k", ")", ")", "]", ".", "append", "(", "result", "[", "k", "]", "[", "index", "]", "[", "'relation'", "]", ")", "\n", "\n", "", "", "val_data", "=", "{", "}", "\n", "with", "open", "(", "f\"data/{dataset.lower()}_processed.jsonl\"", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "jsonlines", ".", "Reader", "(", "f", ")", ":", "\n", "            ", "index", "=", "line", "[", "'id'", "]", "\n", "rels", "=", "[", "]", "\n", "for", "elem", "in", "line", "[", "'rel_candidates'", "]", ":", "\n", "                ", "rels", "+=", "elem", "[", "'relation'", "]", "\n", "", "covered", "=", "False", "\n", "if", "line", "[", "'true_relation'", "]", "in", "rels", ":", "\n", "                ", "covered", "=", "True", "\n", "", "if", "dataset", "==", "'FewRel'", "and", "line", "[", "'true_relation'", "]", "==", "\"main subject\"", ":", "\n", "                ", "if", "\"part of\"", "in", "rels", ":", "\n", "                    ", "covered", "=", "True", "\n", "", "", "val_data", "[", "index", "]", "=", "{", "\"true_relation\"", ":", "line", "[", "'true_relation'", "]", ",", "\"covered\"", ":", "covered", ",", "\"text\"", ":", "line", "[", "'text'", "]", ",", "\"head\"", ":", "line", "[", "\"title\"", "]", ",", "\"tail\"", ":", "line", "[", "\"answer\"", "]", ",", "\"alias2relation\"", ":", "id_alias2relations_dict", "[", "index", "]", "}", "\n", "\n", "", "", "analysis", "=", "{", "}", "\n", "false_analysis", "=", "{", "}", "\n", "not_in_text", "=", "{", "}", "\n", "\n", "accuracy", "=", "0", "\n", "\n", "Not_in_text", "=", "[", "]", "\n", "\n", "rel_correct", "=", "defaultdict", "(", "int", ")", "\n", "rel_all", "=", "defaultdict", "(", "int", ")", "\n", "\n", "for", "k", ",", "vs", "in", "our_result", ".", "items", "(", ")", ":", "\n", "        ", "correct", "=", "False", "\n", "rel_all", "[", "val_data", "[", "k", "]", "[", "\"true_relation\"", "]", "]", "+=", "1", "\n", "for", "v", "in", "vs", ":", "\n", "            ", "if", "not", "v", "in", "val_data", "[", "k", "]", "[", "\"alias2relation\"", "]", ".", "keys", "(", ")", ":", "\n", "                ", "not_in_text", "[", "k", "]", "=", "{", "}", "\n", "Not_in_text", ".", "append", "(", "{", "\"id\"", ":", "k", ",", "'val_data[k][\"alias2relation\"]'", ":", "val_data", "[", "k", "]", "[", "\"alias2relation\"", "]", ",", "'predict'", ":", "v", "}", ")", "\n", "not_in_text", "[", "k", "]", "[", "\"predict\"", "]", "=", "{", "\"alias\"", ":", "v", ",", "\"relations\"", ":", "None", "}", "\n", "not_in_text", "[", "k", "]", "[", "\"rel_candidates\"", "]", "=", "val_data", "[", "k", "]", "[", "\"alias2relation\"", "]", "\n", "not_in_text", "[", "k", "]", "[", "\"truth\"", "]", "=", "val_data", "[", "k", "]", "[", "\"true_relation\"", "]", "\n", "not_in_text", "[", "k", "]", "[", "\"is_correct\"", "]", "=", "correct", "\n", "not_in_text", "[", "k", "]", "[", "\"is_covered\"", "]", "=", "val_data", "[", "k", "]", "[", "\"covered\"", "]", "\n", "not_in_text", "[", "k", "]", "[", "\"text\"", "]", "=", "val_data", "[", "k", "]", "[", "\"text\"", "]", "\n", "not_in_text", "[", "k", "]", "[", "\"head\"", "]", "=", "val_data", "[", "k", "]", "[", "\"head\"", "]", "\n", "not_in_text", "[", "k", "]", "[", "\"tail\"", "]", "=", "val_data", "[", "k", "]", "[", "\"tail\"", "]", "\n", "\n", "if", "val_data", "[", "k", "]", "[", "\"true_relation\"", "]", "==", "\"no_relation\"", ":", "\n", "                    ", "correct", "+=", "True", "\n", "accuracy", "+=", "1", "\n", "\n", "analysis", "[", "k", "]", "=", "{", "}", "\n", "analysis", "[", "k", "]", "[", "\"truth\"", "]", "=", "val_data", "[", "k", "]", "[", "\"true_relation\"", "]", "\n", "analysis", "[", "k", "]", "[", "\"is_correct\"", "]", "=", "correct", "\n", "analysis", "[", "k", "]", "[", "\"is_covered\"", "]", "=", "val_data", "[", "k", "]", "[", "\"covered\"", "]", "\n", "analysis", "[", "k", "]", "[", "\"text\"", "]", "=", "val_data", "[", "k", "]", "[", "\"text\"", "]", "\n", "analysis", "[", "k", "]", "[", "\"head\"", "]", "=", "val_data", "[", "k", "]", "[", "\"head\"", "]", "\n", "analysis", "[", "k", "]", "[", "\"tail\"", "]", "=", "val_data", "[", "k", "]", "[", "\"tail\"", "]", "\n", "analysis", "[", "k", "]", "[", "\"predict\"", "]", "=", "{", "\"alias\"", ":", "v", ",", "\"relations\"", ":", "None", "}", "\n", "rel_correct", "[", "val_data", "[", "k", "]", "[", "\"true_relation\"", "]", "]", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "true_rel", "=", "val_data", "[", "k", "]", "[", "\"true_relation\"", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ".", "replace", "(", "'_'", ",", "' '", ")", "\n", "", "except", ":", "\n", "                    ", "true_rel", "=", "''", "\n", "\n", "", "if", "true_rel", "in", "val_data", "[", "k", "]", "[", "\"alias2relation\"", "]", "[", "v", "]", "or", "val_data", "[", "k", "]", "[", "\"true_relation\"", "]", "in", "val_data", "[", "k", "]", "[", "\"alias2relation\"", "]", "[", "v", "]", "or", "(", "val_data", "[", "k", "]", "[", "\"true_relation\"", "]", "==", "\"main subject\"", "and", "\"part of\"", "in", "val_data", "[", "k", "]", "[", "\"alias2relation\"", "]", "[", "v", "]", ")", ":", "\n", "                    ", "analysis", "[", "k", "]", "=", "{", "}", "\n", "correct", "=", "True", "\n", "accuracy", "+=", "1", "\n", "analysis", "[", "k", "]", "[", "\"truth\"", "]", "=", "val_data", "[", "k", "]", "[", "\"true_relation\"", "]", "\n", "analysis", "[", "k", "]", "[", "\"is_correct\"", "]", "=", "correct", "\n", "analysis", "[", "k", "]", "[", "\"is_covered\"", "]", "=", "val_data", "[", "k", "]", "[", "\"covered\"", "]", "\n", "analysis", "[", "k", "]", "[", "\"text\"", "]", "=", "val_data", "[", "k", "]", "[", "\"text\"", "]", "\n", "analysis", "[", "k", "]", "[", "\"head\"", "]", "=", "val_data", "[", "k", "]", "[", "\"head\"", "]", "\n", "analysis", "[", "k", "]", "[", "\"tail\"", "]", "=", "val_data", "[", "k", "]", "[", "\"tail\"", "]", "\n", "analysis", "[", "k", "]", "[", "\"predict\"", "]", "=", "{", "\"alias\"", ":", "v", ",", "\"relations\"", ":", "val_data", "[", "k", "]", "[", "\"alias2relation\"", "]", "[", "v", "]", "}", "\n", "\n", "rel_correct", "[", "val_data", "[", "k", "]", "[", "\"true_relation\"", "]", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "false_analysis", "[", "k", "]", "=", "{", "}", "\n", "false_analysis", "[", "k", "]", "[", "\"truth\"", "]", "=", "val_data", "[", "k", "]", "[", "\"true_relation\"", "]", "\n", "false_analysis", "[", "k", "]", "[", "\"is_correct\"", "]", "=", "correct", "\n", "false_analysis", "[", "k", "]", "[", "\"is_covered\"", "]", "=", "val_data", "[", "k", "]", "[", "\"covered\"", "]", "\n", "false_analysis", "[", "k", "]", "[", "\"text\"", "]", "=", "val_data", "[", "k", "]", "[", "\"text\"", "]", "\n", "false_analysis", "[", "k", "]", "[", "\"head\"", "]", "=", "val_data", "[", "k", "]", "[", "\"head\"", "]", "\n", "false_analysis", "[", "k", "]", "[", "\"tail\"", "]", "=", "val_data", "[", "k", "]", "[", "\"tail\"", "]", "\n", "false_analysis", "[", "k", "]", "[", "\"predict\"", "]", "=", "{", "\"alias\"", ":", "v", ",", "\"relations\"", ":", "val_data", "[", "k", "]", "[", "\"alias2relation\"", "]", "[", "v", "]", "}", "\n", "", "", "if", "correct", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "no_relation", "=", "list", "(", "set", "(", "val_data", ".", "keys", "(", ")", ")", "-", "set", "(", "our_result", ".", "keys", "(", ")", ")", ")", "\n", "\n", "not_gen", "=", "{", "}", "\n", "\n", "for", "k", "in", "no_relation", ":", "\n", "        ", "not_gen", "[", "k", "]", "=", "{", "}", "\n", "not_gen", "[", "k", "]", "[", "\"truth\"", "]", "=", "val_data", "[", "k", "]", "[", "\"true_relation\"", "]", "\n", "not_gen", "[", "k", "]", "[", "\"is_covered\"", "]", "=", "val_data", "[", "k", "]", "[", "\"covered\"", "]", "\n", "not_gen", "[", "k", "]", "[", "\"rel_candidates\"", "]", "=", "val_data", "[", "k", "]", "[", "\"alias2relation\"", "]", "\n", "not_gen", "[", "k", "]", "[", "\"text\"", "]", "=", "val_data", "[", "k", "]", "[", "\"text\"", "]", "\n", "not_gen", "[", "k", "]", "[", "\"head\"", "]", "=", "val_data", "[", "k", "]", "[", "\"head\"", "]", "\n", "not_gen", "[", "k", "]", "[", "\"tail\"", "]", "=", "val_data", "[", "k", "]", "[", "\"tail\"", "]", "\n", "\n", "", "recall", "=", "accuracy", "/", "len", "(", "val_data", ")", "\n", "percision", "=", "accuracy", "/", "len", "(", "our_result", ")", "\n", "f1", "=", "2", "*", "percision", "*", "recall", "/", "(", "percision", "+", "recall", ")", "\n", "\n", "print", "(", "f\"Top {top_k}: F1 = {f1}\"", ")", "\n", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.evaluate_oie.SysCall": [[4, 8], ["subprocess.Popen().wait", "subprocess.Popen"], "function", ["None"], ["def", "SysCall", "(", "command", ")", ":", "\n", "    ", "subprocess", ".", "Popen", "(", "\n", "command", ",", "\n", "shell", "=", "True", "\n", ")", ".", "wait", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.evaluate_oie.TopK": [[10, 21], ["open", "open", "line.strip().split", "task.lower", "len", "W.write", "task.lower", "line.strip", "W.write", "len"], "function", ["None"], ["", "def", "TopK", "(", "Ks", ",", "task", ")", ":", "\n", "    ", "for", "k", "in", "Ks", ":", "\n", "        ", "with", "open", "(", "f\"supervised-oie/supervised-oie-benchmark/systems_output/deepex.{task.lower()}.{k}.txt\"", ",", "\"w\"", ")", "as", "W", ":", "\n", "            ", "c", "=", "0", "\n", "with", "open", "(", "f\"supervised-oie/supervised-oie-benchmark/systems_output/deepex.{task.lower()}.txt\"", ",", "\"r\"", ")", "as", "R", ":", "\n", "                ", "for", "line", "in", "R", ":", "\n", "                    ", "data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "data", ")", "==", "1", ":", "\n", "                        ", "c", "=", "0", ";", "W", ".", "write", "(", "line", ")", "\n", "", "elif", "len", "(", "data", ")", "==", "5", "and", "c", "<", "k", ":", "\n", "                        ", "c", "+=", "1", ";", "W", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.evaluate_oie.BuildEvaluationScript": [[22, 44], ["LoadJSON", "open", "W.write", "W.write", "task.lower", "task.lower", "task.lower", "task.lower"], "function", ["home.repos.pwc.inspect_result.cgraywang_deepex.deepex.utils.LoadJSON"], ["", "", "", "", "", "", "def", "BuildEvaluationScript", "(", "Ks", ",", "task", ")", ":", "\n", "    ", "config", "=", "LoadJSON", "(", "f\"tasks/configs/{task}.json\"", ")", "\n", "with", "open", "(", "f\"supervised-oie/supervised-oie-benchmark/evaluate.{task.lower()}.sh\"", ",", "\"w\"", ")", "as", "W", ":", "\n", "        ", "W", ".", "write", "(", "\n", "\"\"\"\nmkdir -p ./eval_data/\nmkdir -p ./eval_log/\nmkdir -p ./eval_data/{0}/\nmkdir -p ./eval_log/{0}/\n\"\"\"", ".", "format", "(", "task", ")", "\n", ")", "\n", "\n", "for", "k", "in", "Ks", ":", "\n", "            ", "W", ".", "write", "(", "\n", "\"\"\"\npython3 benchmark.py --gold={0} --out={1} --clausie={2}\necho \"{4}\"\n\"\"\"", ".", "format", "(", "config", "[", "'gold'", "]", ",", "\n", "f\"eval_data/{task}/deepex.{task.lower()}.{k}.dat\"", ",", "\n", "f\"systems_output/deepex.{task.lower()}.{k}.txt\"", ",", "\n", "f\"eval_log/{task}/deepex.{task.lower()}.{k}.log\"", ",", "\n", "f\"{task} (top {k})\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.matcher.Matcher.bowMatch": [[11, 31], ["ref.bow", "ex.bow", "s1.lower.lower.split", "s2.lower.lower.split", "s1.lower.lower.lower", "s2.lower.lower.lower", "matcher.Matcher.removeStopwords", "matcher.Matcher.removeStopwords", "sorted", "sorted"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.bow", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.bow", "home.repos.pwc.inspect_result.cgraywang_deepex.oie.matcher.Matcher.removeStopwords", "home.repos.pwc.inspect_result.cgraywang_deepex.oie.matcher.Matcher.removeStopwords"], ["    ", "@", "staticmethod", "\n", "def", "bowMatch", "(", "ref", ",", "ex", ",", "ignoreStopwords", ",", "ignoreCase", ")", ":", "\n", "        ", "\"\"\"\n        A binary function testing for exact lexical match (ignoring ordering) between reference\n        and predicted extraction\n        \"\"\"", "\n", "s1", "=", "ref", ".", "bow", "(", ")", "\n", "s2", "=", "ex", ".", "bow", "(", ")", "\n", "if", "ignoreCase", ":", "\n", "            ", "s1", "=", "s1", ".", "lower", "(", ")", "\n", "s2", "=", "s2", ".", "lower", "(", ")", "\n", "\n", "", "s1Words", "=", "s1", ".", "split", "(", "' '", ")", "\n", "s2Words", "=", "s2", ".", "split", "(", "' '", ")", "\n", "\n", "if", "ignoreStopwords", ":", "\n", "            ", "s1Words", "=", "Matcher", ".", "removeStopwords", "(", "s1Words", ")", "\n", "s2Words", "=", "Matcher", ".", "removeStopwords", "(", "s2Words", ")", "\n", "\n", "", "return", "sorted", "(", "s1Words", ")", "==", "sorted", "(", "s2Words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.matcher.Matcher.predMatch": [[32, 51], ["ref.elementToStr", "ex.elementToStr", "s1.lower.lower.split", "s2.lower.lower.split", "s1.lower.lower.lower", "s2.lower.lower.lower", "matcher.Matcher.removeStopwords", "matcher.Matcher.removeStopwords"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.elementToStr", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.elementToStr", "home.repos.pwc.inspect_result.cgraywang_deepex.oie.matcher.Matcher.removeStopwords", "home.repos.pwc.inspect_result.cgraywang_deepex.oie.matcher.Matcher.removeStopwords"], ["", "@", "staticmethod", "\n", "def", "predMatch", "(", "ref", ",", "ex", ",", "ignoreStopwords", ",", "ignoreCase", ")", ":", "\n", "        ", "\"\"\"\n        Return whehter gold and predicted extractions agree on the predicate\n        \"\"\"", "\n", "s1", "=", "ref", ".", "elementToStr", "(", "ref", ".", "pred", ")", "\n", "s2", "=", "ex", ".", "elementToStr", "(", "ex", ".", "pred", ")", "\n", "if", "ignoreCase", ":", "\n", "            ", "s1", "=", "s1", ".", "lower", "(", ")", "\n", "s2", "=", "s2", ".", "lower", "(", ")", "\n", "\n", "", "s1Words", "=", "s1", ".", "split", "(", "' '", ")", "\n", "s2Words", "=", "s2", ".", "split", "(", "' '", ")", "\n", "\n", "if", "ignoreStopwords", ":", "\n", "            ", "s1Words", "=", "Matcher", ".", "removeStopwords", "(", "s1Words", ")", "\n", "s2Words", "=", "Matcher", ".", "removeStopwords", "(", "s2Words", ")", "\n", "\n", "", "return", "s1Words", "==", "s2Words", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.matcher.Matcher.argMatch": [[53, 75], ["float", "len", "ref.elementToStr", "ex.elementToStr"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.elementToStr", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.elementToStr"], ["", "@", "staticmethod", "\n", "def", "argMatch", "(", "ref", ",", "ex", ",", "ignoreStopwords", ",", "ignoreCase", ")", ":", "\n", "        ", "\"\"\"\n        Return whehter gold and predicted extractions agree on the arguments\n        \"\"\"", "\n", "sRef", "=", "' '", ".", "join", "(", "[", "ref", ".", "elementToStr", "(", "elem", ")", "for", "elem", "in", "ref", ".", "args", "]", ")", "\n", "sEx", "=", "' '", ".", "join", "(", "[", "ex", ".", "elementToStr", "(", "elem", ")", "for", "elem", "in", "ex", ".", "args", "]", ")", "\n", "\n", "count", "=", "0", "\n", "\n", "for", "w1", "in", "sRef", ":", "\n", "            ", "for", "w2", "in", "sEx", ":", "\n", "                ", "if", "w1", "==", "w2", ":", "\n", "                    ", "count", "+=", "1", "\n", "\n", "# We check how well does the extraction lexically cover the reference", "\n", "# Note: this is somewhat lenient as it doesn't penalize the extraction for", "\n", "#       being too long", "\n", "", "", "", "coverage", "=", "float", "(", "count", ")", "/", "len", "(", "sRef", ")", "\n", "\n", "\n", "return", "coverage", ">", "Matcher", ".", "LEXICAL_THRESHOLD", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.matcher.Matcher.bleuMatch": [[76, 82], ["ref.bow", "ex.bow", "nltk.translate.bleu_score.sentence_bleu", "ex.bow.split", "ref.bow.split"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.bow", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.bow"], ["", "@", "staticmethod", "\n", "def", "bleuMatch", "(", "ref", ",", "ex", ",", "ignoreStopwords", ",", "ignoreCase", ")", ":", "\n", "        ", "sRef", "=", "ref", ".", "bow", "(", ")", "\n", "sEx", "=", "ex", ".", "bow", "(", ")", "\n", "bleu", "=", "sentence_bleu", "(", "references", "=", "[", "sRef", ".", "split", "(", "' '", ")", "]", ",", "hypothesis", "=", "sEx", ".", "split", "(", "' '", ")", ")", "\n", "return", "bleu", ">", "Matcher", ".", "BLEU_THRESHOLD", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.matcher.Matcher.lexicalMatch": [[83, 101], ["ref.bow().split", "ex.bow().split", "float", "len", "ref.bow", "ex.bow"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.bow", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.bow"], ["", "@", "staticmethod", "\n", "def", "lexicalMatch", "(", "ref", ",", "ex", ",", "ignoreStopwords", ",", "ignoreCase", ")", ":", "\n", "        ", "sRef", "=", "ref", ".", "bow", "(", ")", ".", "split", "(", "' '", ")", "\n", "sEx", "=", "ex", ".", "bow", "(", ")", ".", "split", "(", "' '", ")", "\n", "count", "=", "0", "\n", "\n", "for", "w1", "in", "sRef", ":", "\n", "            ", "for", "w2", "in", "sEx", ":", "\n", "                ", "if", "w1", "==", "w2", ":", "\n", "                    ", "count", "+=", "1", "\n", "\n", "# We check how well does the extraction lexically cover the reference", "\n", "# Note: this is somewhat lenient as it doesn't penalize the extraction for", "\n", "#       being too long", "\n", "", "", "", "coverage", "=", "float", "(", "count", ")", "/", "len", "(", "sRef", ")", "\n", "\n", "\n", "return", "coverage", ">", "Matcher", ".", "LEXICAL_THRESHOLD", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.matcher.Matcher.removeStopwords": [[102, 105], ["w.lower"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "removeStopwords", "(", "ls", ")", ":", "\n", "        ", "return", "[", "w", "for", "w", "in", "ls", "if", "w", ".", "lower", "(", ")", "not", "in", "Matcher", ".", "stopwords", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.__init__": [[42, 47], ["oie_readers.goldReader.GoldReader", "oie_readers.goldReader.GoldReader.read"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.goldReader.GoldReader.read"], ["def", "__init__", "(", "self", ",", "gold_fn", ")", ":", "\n", "        ", "''' Load gold Open IE, this will serve to compare against using the compare function '''", "\n", "gr", "=", "GoldReader", "(", ")", "\n", "gr", ".", "read", "(", "gold_fn", ")", "\n", "self", ".", "gold", "=", "gr", ".", "oie", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.compare": [[48, 117], ["benchmark.Benchmark.normalizeDict", "benchmark.Benchmark.normalizeDict", "benchmark.Benchmark.normalizeDict", "benchmark.Benchmark.prCurve", "logging.info", "numpy.array", "numpy.array", "logging.info", "open", "fout.write", "sorted", "y_true.append", "y_scores.append", "sklearn.metrics.auc", "open", "fout.write", "zip", "fout.write", "len", "len", "matchingFunc", "errors.append", "float", "len", "y_true.append", "y_scores.append", "predictedEx.matched.append", "str"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.normalizeDict", "home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.normalizeDict", "home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.normalizeDict", "home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.prCurve"], ["", "def", "compare", "(", "self", ",", "predicted", ",", "matchingFunc", ",", "output_fn", ",", "error_file", "=", "None", ")", ":", "\n", "        ", "''' Compare gold against predicted using a specified matching function.\n            Outputs PR curve to output_fn '''", "\n", "\n", "y_true", "=", "[", "]", "\n", "y_scores", "=", "[", "]", "\n", "errors", "=", "[", "]", "\n", "\n", "correctTotal", "=", "0", "\n", "unmatchedCount", "=", "0", "\n", "predicted", "=", "Benchmark", ".", "normalizeDict", "(", "predicted", ")", "\n", "gold", "=", "Benchmark", ".", "normalizeDict", "(", "self", ".", "gold", ")", "\n", "\n", "for", "sent", ",", "goldExtractions", "in", "gold", ".", "items", "(", ")", ":", "\n", "            ", "if", "sent", "not", "in", "predicted", ":", "\n", "                ", "for", "goldEx", "in", "goldExtractions", ":", "\n", "                    ", "unmatchedCount", "+=", "len", "(", "goldExtractions", ")", "\n", "correctTotal", "+=", "len", "(", "goldExtractions", ")", "\n", "", "continue", "\n", "\n", "", "predictedExtractions", "=", "predicted", "[", "sent", "]", "\n", "\n", "for", "goldEx", "in", "goldExtractions", ":", "\n", "                ", "correctTotal", "+=", "1", "\n", "found", "=", "False", "\n", "\n", "for", "predictedEx", "in", "predictedExtractions", ":", "\n", "                    ", "if", "output_fn", "in", "predictedEx", ".", "matched", ":", "\n", "                        ", "continue", "\n", "\n", "", "if", "matchingFunc", "(", "goldEx", ",", "\n", "predictedEx", ",", "\n", "ignoreStopwords", "=", "True", ",", "\n", "ignoreCase", "=", "True", ")", ":", "\n", "\n", "                        ", "y_true", ".", "append", "(", "1", ")", "\n", "y_scores", ".", "append", "(", "predictedEx", ".", "confidence", ")", "\n", "predictedEx", ".", "matched", ".", "append", "(", "output_fn", ")", "\n", "found", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "not", "found", ":", "\n", "                    ", "errors", ".", "append", "(", "goldEx", ".", "index", ")", "\n", "unmatchedCount", "+=", "1", "\n", "\n", "", "", "for", "predictedEx", "in", "[", "x", "for", "x", "in", "predictedExtractions", "if", "(", "output_fn", "not", "in", "x", ".", "matched", ")", "]", ":", "\n", "                ", "y_true", ".", "append", "(", "0", ")", "\n", "y_scores", ".", "append", "(", "predictedEx", ".", "confidence", ")", "\n", "\n", "", "", "y_true", "=", "y_true", "\n", "y_scores", "=", "y_scores", "\n", "\n", "(", "p", ",", "r", ")", ",", "optimal", "=", "Benchmark", ".", "prCurve", "(", "np", ".", "array", "(", "y_true", ")", ",", "np", ".", "array", "(", "y_scores", ")", ",", "\n", "recallMultiplier", "=", "(", "(", "correctTotal", "-", "unmatchedCount", ")", "/", "float", "(", "correctTotal", ")", ")", ")", "\n", "logging", ".", "info", "(", "\"AUC: {}\\n Optimal (precision, recall, F1, threshold): {}\"", ".", "format", "(", "auc", "(", "r", ",", "p", ")", ",", "\n", "optimal", ")", ")", "\n", "\n", "if", "error_file", ":", "\n", "            ", "logging", ".", "info", "(", "\"Writing {} error indices to {}\"", ".", "format", "(", "len", "(", "errors", ")", ",", "\n", "error_file", ")", ")", "\n", "with", "open", "(", "error_file", ",", "'w'", ")", "as", "fout", ":", "\n", "                ", "fout", ".", "write", "(", "'\\n'", ".", "join", "(", "[", "str", "(", "error", ")", "\n", "for", "error", "\n", "in", "errors", "]", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "with", "open", "(", "output_fn", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "'{0}\\t{1}\\n'", ".", "format", "(", "\"Precision\"", ",", "\"Recall\"", ")", ")", "\n", "for", "cur_p", ",", "cur_r", "in", "sorted", "(", "zip", "(", "p", ",", "r", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", ":", "\n", "                ", "fout", ".", "write", "(", "'{0}\\t{1}\\n'", ".", "format", "(", "cur_p", ",", "cur_r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.prCurve": [[118, 135], ["sklearn.metrics.precision_recall_curve", "max", "operator.itemgetter", "benchmark.f_beta", "zip", "numpy.isnan", "zip", "numpy.isfinite"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.f_beta"], ["", "", "", "@", "staticmethod", "\n", "def", "prCurve", "(", "y_true", ",", "y_scores", ",", "recallMultiplier", ")", ":", "\n", "        ", "y_scores", "=", "[", "score", "if", "not", "(", "np", ".", "isnan", "(", "score", ")", "or", "(", "not", "np", ".", "isfinite", "(", "score", ")", ")", ")", "else", "0", "\n", "for", "score", "in", "y_scores", "]", "\n", "\n", "precision_ls", ",", "recall_ls", ",", "thresholds", "=", "precision_recall_curve", "(", "y_true", ",", "y_scores", ")", "\n", "recall_ls", "=", "recall_ls", "*", "recallMultiplier", "\n", "optimal", "=", "max", "(", "[", "(", "precision", ",", "recall", ",", "f_beta", "(", "precision", ",", "recall", ",", "beta", "=", "1", ")", ",", "threshold", ")", "\n", "for", "(", "(", "precision", ",", "recall", ")", ",", "threshold", ")", "\n", "in", "zip", "(", "zip", "(", "precision_ls", "[", ":", "-", "1", "]", ",", "recall_ls", "[", ":", "-", "1", "]", ")", ",", "\n", "thresholds", ")", "]", ",", "\n", "key", "=", "itemgetter", "(", "2", ")", ")", "\n", "\n", "return", "(", "(", "precision_ls", ",", "recall_ls", ")", ",", "\n", "optimal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.normalizeDict": [[136, 139], ["dict", "benchmark.Benchmark.normalizeKey", "d.items"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.normalizeKey"], ["", "@", "staticmethod", "\n", "def", "normalizeDict", "(", "d", ")", ":", "\n", "        ", "return", "dict", "(", "[", "(", "Benchmark", ".", "normalizeKey", "(", "k", ")", ",", "v", ")", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.normalizeKey": [[140, 143], ["benchmark.Benchmark.removePunct", "str", "benchmark.Benchmark.PTB_unescape", "k.replace"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.removePunct", "home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.PTB_unescape"], ["", "@", "staticmethod", "\n", "def", "normalizeKey", "(", "k", ")", ":", "\n", "        ", "return", "Benchmark", ".", "removePunct", "(", "str", "(", "Benchmark", ".", "PTB_unescape", "(", "k", ".", "replace", "(", "' '", ",", "''", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.PTB_escape": [[144, 149], ["s.replace.replace.replace"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "PTB_escape", "(", "s", ")", ":", "\n", "        ", "for", "u", ",", "e", "in", "Benchmark", ".", "PTB_ESCAPES", ":", "\n", "            ", "s", "=", "s", ".", "replace", "(", "u", ",", "e", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.PTB_unescape": [[150, 155], ["s.replace.replace.replace"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "PTB_unescape", "(", "s", ")", ":", "\n", "        ", "for", "u", ",", "e", "in", "Benchmark", ".", "PTB_ESCAPES", ":", "\n", "            ", "s", "=", "s", ".", "replace", "(", "e", ",", "u", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.Benchmark.removePunct": [[156, 159], ["Benchmark.regex.sub"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "removePunct", "(", "s", ")", ":", "\n", "        ", "return", "Benchmark", ".", "regex", ".", "sub", "(", "''", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie.benchmark.f_beta": [[170, 173], ["float", "pow", "pow"], "function", ["None"], ["", "def", "f_beta", "(", "precision", ",", "recall", ",", "beta", "=", "1", ")", ":", "\n", "    ", "beta", "=", "float", "(", "beta", ")", "\n", "return", "(", "1", "+", "pow", "(", "beta", ",", "2", ")", ")", "*", "(", "precision", "*", "recall", ")", "/", "(", "(", "pow", "(", "beta", ",", "2", ")", "*", "precision", ")", "+", "recall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.goldReader.GoldReader.__init__": [[9, 11], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "name", "=", "'Gold'", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.goldReader.GoldReader.read": [[12, 31], ["_collections.defaultdict", "open", "enumerate", "line.strip().split", "oie_readers.extraction.Extraction", "d[].append", "oie_readers.extraction.Extraction.addArg", "line.strip", "float"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.addArg"], ["", "def", "read", "(", "self", ",", "fn", ")", ":", "\n", "        ", "d", "=", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "with", "open", "(", "fn", ")", "as", "fin", ":", "\n", "            ", "for", "line_ind", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "                ", "data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "text", ",", "rel", "=", "data", "[", ":", "2", "]", "\n", "args", "=", "data", "[", "2", ":", "]", "\n", "confidence", "=", "1", "\n", "\n", "curExtraction", "=", "Extraction", "(", "pred", "=", "rel", ",", "\n", "head_pred_index", "=", "None", ",", "\n", "sent", "=", "text", ",", "\n", "confidence", "=", "float", "(", "confidence", ")", ",", "\n", "index", "=", "line_ind", ")", "\n", "for", "arg", "in", "args", ":", "\n", "                    ", "curExtraction", ".", "addArg", "(", "arg", ")", "\n", "\n", "", "d", "[", "text", "]", ".", "append", "(", "curExtraction", ")", "\n", "", "", "self", ".", "oie", "=", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.__init__": [[12, 24], ["collections.defaultdict", "set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pred", ",", "head_pred_index", ",", "sent", ",", "confidence", ",", "question_dist", "=", "''", ",", "index", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "pred", "=", "pred", "\n", "self", ".", "head_pred_index", "=", "head_pred_index", "\n", "self", ".", "sent", "=", "sent", "\n", "self", ".", "args", "=", "[", "]", "\n", "self", ".", "confidence", "=", "confidence", "\n", "self", ".", "matched", "=", "[", "]", "\n", "self", ".", "questions", "=", "{", "}", "\n", "self", ".", "indsForQuestions", "=", "defaultdict", "(", "lambda", ":", "set", "(", ")", ")", "\n", "self", ".", "is_mwp", "=", "False", "\n", "self", ".", "question_dist", "=", "question_dist", "\n", "self", ".", "index", "=", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.distArgFromPred": [[25, 33], ["min", "len", "dists.append", "abs"], "methods", ["None"], ["", "def", "distArgFromPred", "(", "self", ",", "arg", ")", ":", "\n", "        ", "assert", "(", "len", "(", "self", ".", "pred", ")", "==", "2", ")", "\n", "dists", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "pred", "[", "1", "]", ":", "\n", "            ", "for", "y", "in", "arg", ".", "indices", ":", "\n", "                ", "dists", ".", "append", "(", "abs", "(", "x", "-", "y", ")", ")", "\n", "\n", "", "", "return", "min", "(", "dists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.argsByDistFromPred": [[34, 36], ["sorted", "extraction.Extraction.distArgFromPred"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.distArgFromPred"], ["", "def", "argsByDistFromPred", "(", "self", ",", "question", ")", ":", "\n", "        ", "return", "sorted", "(", "self", ".", "questions", "[", "question", "]", ",", "key", "=", "lambda", "arg", ":", "self", ".", "distArgFromPred", "(", "arg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.addArg": [[37, 41], ["extraction.Extraction.args.append", "extraction.Extraction.questions.get", "oie_readers.argument.Argument"], "methods", ["None"], ["", "def", "addArg", "(", "self", ",", "arg", ",", "question", "=", "None", ")", ":", "\n", "        ", "self", ".", "args", ".", "append", "(", "arg", ")", "\n", "if", "question", ":", "\n", "            ", "self", ".", "questions", "[", "question", "]", "=", "self", ".", "questions", ".", "get", "(", "question", ",", "[", "]", ")", "+", "[", "Argument", "(", "arg", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.noPronounArgs": [[42, 50], ["nltk.word_tokenize", "len", "nltk.pos_tag"], "methods", ["None"], ["", "", "def", "noPronounArgs", "(", "self", ")", ":", "\n", "        ", "for", "(", "a", ",", "_", ")", "in", "self", ".", "args", ":", "\n", "            ", "tokenized_arg", "=", "nltk", ".", "word_tokenize", "(", "a", ")", "\n", "if", "len", "(", "tokenized_arg", ")", "==", "1", ":", "\n", "                ", "_", ",", "pos_tag", "=", "nltk", ".", "pos_tag", "(", "tokenized_arg", ")", "[", "0", "]", "\n", "if", "(", "'PRP'", "in", "pos_tag", ")", ":", "\n", "                    ", "return", "False", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.isContiguous": [[51, 53], ["all"], "methods", ["None"], ["", "def", "isContiguous", "(", "self", ")", ":", "\n", "        ", "return", "all", "(", "[", "indices", "for", "(", "_", ",", "indices", ")", "in", "self", ".", "args", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.toBinary": [[54, 74], ["extraction.Extraction.binarizeByIndex", "extraction.Extraction.elementToStr", "len", "extraction.Extraction.isContiguous", "extraction.Extraction.elementToStr"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.binarizeByIndex", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.elementToStr", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.isContiguous", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.elementToStr"], ["", "def", "toBinary", "(", "self", ")", ":", "\n", "        ", "''' Try to represent this extraction's arguments as binary\n        If fails, this function will return an empty list.  '''", "\n", "\n", "ret", "=", "[", "self", ".", "elementToStr", "(", "self", ".", "pred", ")", "]", "\n", "\n", "if", "len", "(", "self", ".", "args", ")", "==", "2", ":", "\n", "            ", "return", "ret", "+", "[", "self", ".", "elementToStr", "(", "arg", ")", "for", "arg", "in", "self", ".", "args", "]", "\n", "\n", "", "return", "[", "]", "\n", "\n", "if", "not", "self", ".", "isContiguous", "(", ")", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "binarized", "=", "self", ".", "binarizeByIndex", "(", ")", "\n", "\n", "if", "binarized", ":", "\n", "            ", "return", "ret", "+", "binarized", "\n", "\n", "", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.elementToStr": [[76, 89], ["isinstance", "isinstance", "str", "elem[].rstrip().lstrip", "elem[].rstrip"], "methods", ["None"], ["", "def", "elementToStr", "(", "self", ",", "elem", ",", "print_indices", "=", "True", ")", ":", "\n", "        ", "''' formats an extraction element (pred or arg) as a raw string\n        removes indices and trailing spaces '''", "\n", "if", "print_indices", ":", "\n", "            ", "return", "str", "(", "elem", ")", "\n", "", "if", "isinstance", "(", "elem", ",", "str", ")", ":", "\n", "            ", "return", "elem", "\n", "", "if", "isinstance", "(", "elem", ",", "tuple", ")", ":", "\n", "            ", "ret", "=", "elem", "[", "0", "]", ".", "rstrip", "(", ")", ".", "lstrip", "(", ")", "\n", "", "else", ":", "\n", "            ", "ret", "=", "' '", ".", "join", "(", "elem", ".", "words", ")", "\n", "", "assert", "ret", ",", "\"empty element? {0}\"", ".", "format", "(", "elem", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.binarizeByIndex": [[90, 101], ["sorted", "len", "enumerate", "s.split", "a.rstrip().lstrip", "extraction.Extraction.elementToStr", "extraction.Extraction.elementToStr", "a.rstrip"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.elementToStr", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.elementToStr"], ["", "def", "binarizeByIndex", "(", "self", ")", ":", "\n", "        ", "extraction", "=", "[", "self", ".", "pred", "]", "+", "self", ".", "args", "\n", "markPred", "=", "[", "(", "w", ",", "ind", ",", "i", "==", "0", ")", "for", "i", ",", "(", "w", ",", "ind", ")", "in", "enumerate", "(", "extraction", ")", "]", "\n", "sortedExtraction", "=", "sorted", "(", "markPred", ",", "key", "=", "lambda", "ws", ",", "indices", ",", "f", ":", "indices", "[", "0", "]", ")", "\n", "s", "=", "' '", ".", "join", "(", "[", "'{1} {0} {1}'", ".", "format", "(", "self", ".", "elementToStr", "(", "elem", ")", ",", "SEP", ")", "if", "elem", "[", "2", "]", "else", "self", ".", "elementToStr", "(", "elem", ")", "for", "elem", "in", "sortedExtraction", "]", ")", "\n", "binArgs", "=", "[", "a", "for", "a", "in", "s", ".", "split", "(", "SEP", ")", "if", "a", ".", "rstrip", "(", ")", ".", "lstrip", "(", ")", "]", "\n", "\n", "if", "len", "(", "binArgs", ")", "==", "2", ":", "\n", "            ", "return", "binArgs", "\n", "\n", "", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.bow": [[102, 104], ["extraction.Extraction.elementToStr"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.elementToStr"], ["", "def", "bow", "(", "self", ")", ":", "\n", "        ", "return", "' '", ".", "join", "(", "[", "self", ".", "elementToStr", "(", "elem", ")", "for", "elem", "in", "[", "self", ".", "pred", "]", "+", "self", ".", "args", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.getSortedArgs": [[105, 121], ["extraction.Extraction.questions.iteritems", "extraction.Extraction.sort_args_by_distribution", "list", "ls.append", "len", "logging.debug", "extraction.Extraction.indsForQuestions[].union", "logging.debug", "sorted", "min"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.sort_args_by_distribution"], ["", "def", "getSortedArgs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "question_dist", ":", "\n", "            ", "return", "self", ".", "sort_args_by_distribution", "(", ")", "\n", "", "ls", "=", "[", "]", "\n", "for", "q", ",", "args", "in", "self", ".", "questions", ".", "iteritems", "(", ")", ":", "\n", "            ", "if", "(", "len", "(", "args", ")", "!=", "1", ")", ":", "\n", "                ", "logging", ".", "debug", "(", "\"Not one argument: {}\"", ".", "format", "(", "args", ")", ")", "\n", "continue", "\n", "", "arg", "=", "args", "[", "0", "]", "\n", "indices", "=", "list", "(", "self", ".", "indsForQuestions", "[", "q", "]", ".", "union", "(", "arg", ".", "indices", ")", ")", "\n", "if", "not", "indices", ":", "\n", "                ", "logging", ".", "debug", "(", "\"Empty indexes for arg {} -- backing to zero\"", ".", "format", "(", "arg", ")", ")", "\n", "indices", "=", "[", "0", "]", "\n", "", "ls", ".", "append", "(", "(", "(", "arg", ",", "q", ")", ",", "indices", ")", ")", "\n", "", "return", "[", "a", "for", "a", ",", "_", "in", "sorted", "(", "ls", ",", "\n", "key", "=", "lambda", "indices", ":", "min", "(", "indices", "[", "1", "]", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.question_prob_for_loc": [[122, 130], ["extraction.generalize_question", "logging.debug", "float", "sum", "q_dist.get", "q_dist.values"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.generalize_question"], ["", "def", "question_prob_for_loc", "(", "self", ",", "question", ",", "loc", ")", ":", "\n", "        ", "gen_question", "=", "generalize_question", "(", "question", ")", "\n", "q_dist", "=", "self", ".", "question_dist", "[", "gen_question", "]", "\n", "logging", ".", "debug", "(", "\"distribution of {}: {}\"", ".", "format", "(", "gen_question", ",", "\n", "q_dist", ")", ")", "\n", "\n", "return", "float", "(", "q_dist", ".", "get", "(", "loc", ",", "0", ")", ")", "/", "sum", "(", "q_dist", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.sort_args_by_distribution": [[131, 171], ["logging.debug", "logging.debug", "max", "sorted", "logging.debug", "extraction.Extraction.questions.iteritems", "extraction.generalize_question", "sorted", "extraction.Extraction.question_dist[].iteritems", "logging.debug", "ret[].append", "sorted", "extraction.Extraction.question_prob_for_loc", "extraction.Extraction.questions.iteritems", "sum", "ret.iteritems", "extraction.Extraction.question_prob_for_loc", "extraction.Extraction.questions.iteritems", "extraction.Extraction.question_dist[].values", "int", "extraction.generalize_question"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.generalize_question", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.question_prob_for_loc", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.question_prob_for_loc", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.generalize_question"], ["", "def", "sort_args_by_distribution", "(", "self", ")", ":", "\n", "        ", "INF_LOC", "=", "100", "\n", "\n", "ret", "=", "{", "INF_LOC", ":", "[", "]", "}", "\n", "logging", ".", "debug", "(", "\"sorting: {}\"", ".", "format", "(", "self", ".", "questions", ")", ")", "\n", "\n", "logging", ".", "debug", "(", "\"probs for subject: {}\"", ".", "format", "(", "[", "(", "q", ",", "self", ".", "question_prob_for_loc", "(", "q", ",", "0", ")", ")", "\n", "for", "(", "q", ",", "_", ")", "in", "self", ".", "questions", ".", "iteritems", "(", ")", "]", ")", ")", "\n", "\n", "subj_question", ",", "subj_args", "=", "max", "(", "self", ".", "questions", ".", "iteritems", "(", ")", ",", "\n", "key", "=", "lambda", "q", ":", "self", ".", "question_prob_for_loc", "(", "q", "[", "0", "]", ",", "0", ")", ")", "\n", "\n", "ret", "[", "0", "]", "=", "[", "(", "subj_args", "[", "0", "]", ",", "subj_question", ")", "]", "\n", "\n", "for", "(", "question", ",", "args", ")", "in", "sorted", "(", "[", "(", "q", ",", "a", ")", "\n", "for", "(", "q", ",", "a", ")", "in", "self", ".", "questions", ".", "iteritems", "(", ")", "if", "(", "q", "not", "in", "[", "subj_question", "]", ")", "]", ",", "\n", "key", "=", "lambda", "q", ":", "sum", "(", "self", ".", "question_dist", "[", "generalize_question", "(", "q", "[", "0", "]", ")", "]", ".", "values", "(", ")", ")", ",", "\n", "reverse", "=", "True", ")", ":", "\n", "            ", "gen_question", "=", "generalize_question", "(", "question", ")", "\n", "arg", "=", "args", "[", "0", "]", "\n", "assigned_flag", "=", "False", "\n", "for", "(", "loc", ",", "count", ")", "in", "sorted", "(", "self", ".", "question_dist", "[", "gen_question", "]", ".", "iteritems", "(", ")", ",", "\n", "key", "=", "lambda", "c", ":", "c", "[", "1", "]", ",", "\n", "reverse", "=", "True", ")", ":", "\n", "                ", "if", "loc", "not", "in", "ret", ":", "\n", "                    ", "ret", "[", "loc", "]", "=", "[", "(", "arg", ",", "question", ")", "]", "\n", "assigned_flag", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "not", "assigned_flag", ":", "\n", "                ", "logging", ".", "debug", "(", "\"Couldn't find an open assignment for {}\"", ".", "format", "(", "(", "arg", ",", "gen_question", ")", ")", ")", "\n", "ret", "[", "INF_LOC", "]", ".", "append", "(", "(", "arg", ",", "question", ")", ")", "\n", "\n", "", "", "logging", ".", "debug", "(", "\"Linearizing arg list: {}\"", ".", "format", "(", "ret", ")", ")", "\n", "\n", "return", "[", "arg", "\n", "for", "(", "_", ",", "arg_ls", ")", "in", "sorted", "(", "ret", ".", "iteritems", "(", ")", ",", "\n", "key", "=", "lambda", "k", ",", "v", ":", "int", "(", "k", ")", ")", "\n", "for", "arg", "in", "arg_ls", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.__str__": [[302, 308], ["extraction.Extraction.elementToStr", "extraction.Extraction.elementToStr"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.elementToStr", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.elementToStr"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'{0}\\t{1}'", ".", "format", "(", "self", ".", "elementToStr", "(", "self", ".", "pred", ",", "\n", "print_indices", "=", "True", ")", ",", "\n", "'\\t'", ".", "join", "(", "[", "self", ".", "elementToStr", "(", "arg", ")", "\n", "for", "arg", "\n", "in", "self", ".", "args", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.get_base_verb": [[182, 184], ["surface_pred.split"], "methods", ["None"], ["", "def", "get_base_verb", "(", "self", ",", "surface_pred", ")", ":", "\n", "        ", "return", "surface_pred", ".", "split", "(", "' '", ")", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.compute_global_pred": [[186, 222], ["surface_pred.split", "map", "map", "len", "map", "len", "ret.append", "len", "ret.append", "map", "map", "question.split", "operator.itemgetter", "set", "set", "map", "map", "len", "ret.append", "operator.itemgetter", "operator.itemgetter", "set"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map", "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map", "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map", "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map", "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map", "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map", "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map"], ["", "def", "compute_global_pred", "(", "self", ",", "surface_pred", ",", "questions", ")", ":", "\n", "        ", "from", "operator", "import", "itemgetter", "\n", "split_surface", "=", "surface_pred", ".", "split", "(", "' '", ")", "\n", "\n", "if", "len", "(", "split_surface", ")", ">", "1", ":", "\n", "            ", "verb", "=", "split_surface", "[", "-", "1", "]", "\n", "ret", "=", "split_surface", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "verb", "=", "split_surface", "[", "0", "]", "\n", "ret", "=", "[", "]", "\n", "\n", "", "split_questions", "=", "map", "(", "lambda", "question", ":", "question", ".", "split", "(", "' '", ")", ",", "\n", "questions", ")", "\n", "\n", "preds", "=", "map", "(", "normalize_element", ",", "\n", "map", "(", "itemgetter", "(", "QUESTION_TRG_INDEX", ")", ",", "\n", "split_questions", ")", ")", "\n", "if", "len", "(", "set", "(", "preds", ")", ")", ">", "1", ":", "\n", "            ", "ret", ".", "append", "(", "verb", ")", "\n", "\n", "", "if", "len", "(", "set", "(", "preds", ")", ")", "==", "1", ":", "\n", "            ", "ret", ".", "append", "(", "preds", "[", "0", "]", ")", "\n", "\n", "pps", "=", "map", "(", "normalize_element", ",", "\n", "map", "(", "itemgetter", "(", "QUESTION_PP_INDEX", ")", ",", "\n", "split_questions", ")", ")", "\n", "\n", "obj2s", "=", "map", "(", "normalize_element", ",", "\n", "map", "(", "itemgetter", "(", "QUESTION_OBJ2_INDEX", ")", ",", "\n", "split_questions", ")", ")", "\n", "\n", "if", "(", "len", "(", "set", "(", "pps", ")", ")", "==", "1", ")", ":", "\n", "                ", "self", ".", "is_mwp", "=", "True", "\n", "ret", ".", "append", "(", "pps", "[", "0", "]", ")", "\n", "\n", "", "", "return", "\" \"", ".", "join", "(", "ret", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.augment_arg_with_question": [[224, 234], ["map", "question.split", "arg.startswith"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map"], ["", "def", "augment_arg_with_question", "(", "self", ",", "arg", ",", "question", ")", ":", "\n", "        ", "wh", ",", "aux", ",", "sbj", ",", "trg", ",", "obj1", ",", "pp", ",", "obj2", "=", "map", "(", "normalize_element", ",", "\n", "question", ".", "split", "(", "' '", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "if", "(", "not", "self", ".", "is_mwp", ")", "and", "pp", "and", "(", "not", "obj2", ")", ":", "\n", "            ", "if", "not", "(", "arg", ".", "startswith", "(", "\"{} \"", ".", "format", "(", "pp", ")", ")", ")", ":", "\n", "                ", "return", "\" \"", ".", "join", "(", "[", "pp", ",", "\n", "arg", "]", ")", "\n", "\n", "", "", "return", "arg", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.clusterScore": [[235, 243], ["logging.debug", "numpy.array", "logging.debug", "numpy.average", "numpy.sum", "max", "abs"], "methods", ["None"], ["", "def", "clusterScore", "(", "self", ",", "cluster", ")", ":", "\n", "        ", "logging", ".", "debug", "(", "\"*-*-*- Cluster: {}\"", ".", "format", "(", "cluster", ")", ")", "\n", "\n", "arr", "=", "np", ".", "array", "(", "[", "x", "for", "ls", "in", "cluster", "for", "x", "in", "ls", "]", ")", "\n", "centroid", "=", "np", ".", "sum", "(", "arr", ")", "/", "arr", ".", "shape", "[", "0", "]", "\n", "logging", ".", "debug", "(", "\"Centroid: {}\"", ".", "format", "(", "centroid", ")", ")", "\n", "\n", "return", "np", ".", "average", "(", "[", "max", "(", "[", "abs", "(", "x", "-", "centroid", ")", "for", "x", "in", "ls", "]", ")", "for", "ls", "in", "cluster", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.resolveAmbiguity": [[244, 263], ["logging.debug", "list", "logging.debug", "zip", "logging.debug", "itertools.product", "map", "min", "len", "operator.itemgetter", "map", "operator.itemgetter", "extraction.Extraction.clusterScore"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map", "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.clusterScore"], ["", "def", "resolveAmbiguity", "(", "self", ")", ":", "\n", "\n", "        ", "elements", "=", "[", "self", ".", "pred", "]", "+", "[", "(", "s", ",", "indices", ")", "\n", "for", "(", "s", ",", "indices", ")", "\n", "in", "self", ".", "args", "\n", "if", "indices", "]", "\n", "logging", ".", "debug", "(", "\"Resolving ambiguity in: {}\"", ".", "format", "(", "elements", ")", ")", "\n", "\n", "all_combinations", "=", "list", "(", "itertools", ".", "product", "(", "*", "map", "(", "itemgetter", "(", "1", ")", ",", "elements", ")", ")", ")", "\n", "logging", ".", "debug", "(", "\"Number of combinations: {}\"", ".", "format", "(", "len", "(", "all_combinations", ")", ")", ")", "\n", "\n", "resolved_elements", "=", "zip", "(", "map", "(", "itemgetter", "(", "0", ")", ",", "elements", ")", ",", "\n", "min", "(", "all_combinations", ",", "\n", "key", "=", "lambda", "cluster", ":", "self", ".", "clusterScore", "(", "cluster", ")", ")", ")", "\n", "logging", ".", "debug", "(", "\"Resolved elements = {}\"", ".", "format", "(", "resolved_elements", ")", ")", "\n", "\n", "self", ".", "pred", "=", "resolved_elements", "[", "0", "]", "\n", "self", ".", "args", "=", "resolved_elements", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.conll": [[264, 273], ["map", "enumerate", "extraction.Extraction.sent.split", "extraction.Extraction.get_label", "list"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map", "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.get_label"], ["", "def", "conll", "(", "self", ",", "external_feats", "=", "{", "}", ")", ":", "\n", "        ", "return", "'\\n'", ".", "join", "(", "[", "\"\\t\"", ".", "join", "(", "map", "(", "str", ",", "\n", "[", "i", ",", "w", "]", "+", "list", "(", "self", ".", "pred", ")", "+", "[", "self", ".", "head_pred_index", "]", "+", "external_feats", "+", "[", "self", ".", "get_label", "(", "i", ")", "]", ")", ")", "\n", "for", "(", "i", ",", "w", ")", "\n", "in", "enumerate", "(", "self", ".", "sent", ".", "split", "(", "\" \"", ")", ")", "]", ")", "+", "'\\n'", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.Extraction.get_label": [[274, 301], ["min", "len", "logging.warn", "enumerate", "map", "len", "operator.itemgetter", "map"], "methods", ["home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map", "home.repos.pwc.inspect_result.cgraywang_deepex.rc.string_matcher.LemmatizeHelper.map"], ["", "def", "get_label", "(", "self", ",", "index", ")", ":", "\n", "        ", "ent", "=", "[", "(", "elem_ind", ",", "elem", ")", "\n", "for", "(", "elem_ind", ",", "elem", ")", "\n", "in", "enumerate", "(", "map", "(", "itemgetter", "(", "1", ")", ",", "\n", "[", "self", ".", "pred", "]", "+", "self", ".", "args", ")", ")", "\n", "if", "index", "in", "elem", "]", "\n", "\n", "if", "not", "ent", ":", "\n", "            ", "return", "\"O\"", "\n", "\n", "", "if", "len", "(", "ent", ")", ">", "1", ":", "\n", "            ", "logging", ".", "warn", "(", "\"Index {} appears in one than more element: {}\"", ".", "format", "(", "index", ",", "\n", "\"\\t\"", ".", "join", "(", "map", "(", "str", ",", "\n", "[", "ent", ",", "\n", "self", ".", "sent", ",", "\n", "self", ".", "pred", ",", "\n", "self", ".", "args", "]", ")", ")", ")", ")", "\n", "\n", "\n", "", "elem_ind", ",", "elem", "=", "min", "(", "ent", ",", "key", "=", "lambda", "ls", ":", "len", "(", "ls", "[", "1", "]", ")", ")", "\n", "\n", "prefix", "=", "\"P\"", "if", "elem_ind", "==", "0", "else", "\"A{}\"", ".", "format", "(", "elem_ind", "-", "1", ")", "\n", "\n", "suffix", "=", "\"B\"", "if", "index", "==", "elem", "[", "0", "]", "else", "\"I\"", "\n", "\n", "return", "\"{}-{}\"", ".", "format", "(", "prefix", ",", "suffix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.normalize_element": [[312, 316], ["elem.replace"], "function", ["None"], ["def", "normalize_element", "(", "elem", ")", ":", "\n", "    ", "return", "elem", ".", "replace", "(", "\"_\"", ",", "\" \"", ")", "if", "(", "elem", "!=", "\"_\"", ")", "else", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.escape_special_chars": [[317, 319], ["s.replace"], "function", ["None"], ["", "def", "escape_special_chars", "(", "s", ")", ":", "\n", "    ", "return", "s", ".", "replace", "(", "'\\t'", ",", "'\\\\t'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cgraywang_deepex.oie_readers.extraction.generalize_question": [[321, 325], ["question.split"], "function", ["None"], ["", "def", "generalize_question", "(", "question", ")", ":", "\n", "    ", "import", "nltk", "\n", "wh", ",", "aux", ",", "sbj", ",", "trg", ",", "obj1", ",", "pp", ",", "obj2", "=", "question", ".", "split", "(", "' '", ")", "[", ":", "-", "1", "]", "\n", "return", "' '", ".", "join", "(", "[", "wh", ",", "sbj", ",", "obj1", "]", ")", "\n", "\n"]]}