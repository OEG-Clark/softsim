{"home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.dummy_data.__init__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "dims", ")", ":", "\n", "        ", "self", ".", "dims", "=", "dims", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.dummy_data.shape": [[18, 21], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dims", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.CrossConvolutions.__init__": [[26, 81], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "warnings.warn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.Score_Observer.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "channels_hidden", "=", "512", ",", "\n", "stride", "=", "None", ",", "kernel_size", "=", "3", ",", "last_kernel_size", "=", "1", ",", "leaky_slope", "=", "0.1", ",", "\n", "batch_norm", "=", "False", ",", "block_no", "=", "0", ")", ":", "\n", "        ", "super", "(", "CrossConvolutions", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "stride", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Stride doesn't do anything, the argument should be \"", "\n", "\"removed\"", ",", "DeprecationWarning", ")", "\n", "", "if", "not", "channels_hidden", ":", "\n", "            ", "channels_hidden", "=", "channels", "\n", "\n", "", "pad", "=", "kernel_size", "//", "2", "\n", "self", ".", "leaky_slope", "=", "leaky_slope", "\n", "pad_mode", "=", "'zeros'", "\n", "\n", "self", ".", "gamma0", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "gamma1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "gamma2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "self", ".", "conv_scale0_0", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "channels_hidden", ",", "\n", "kernel_size", "=", "kernel_size", ",", "padding", "=", "pad", ",", "\n", "bias", "=", "not", "batch_norm", ",", "padding_mode", "=", "pad_mode", ")", "\n", "\n", "self", ".", "conv_scale1_0", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "channels_hidden", ",", "\n", "kernel_size", "=", "kernel_size", ",", "padding", "=", "pad", ",", "\n", "bias", "=", "not", "batch_norm", ",", "padding_mode", "=", "pad_mode", ")", "\n", "self", ".", "conv_scale2_0", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "channels_hidden", ",", "\n", "kernel_size", "=", "kernel_size", ",", "padding", "=", "pad", ",", "\n", "bias", "=", "not", "batch_norm", ",", "padding_mode", "=", "pad_mode", ")", "\n", "self", ".", "conv_scale0_1", "=", "nn", ".", "Conv2d", "(", "channels_hidden", "*", "1", ",", "channels", ",", "#", "\n", "kernel_size", "=", "kernel_size", ",", "padding", "=", "pad", ",", "\n", "bias", "=", "not", "batch_norm", ",", "padding_mode", "=", "pad_mode", ",", "dilation", "=", "1", ")", "\n", "self", ".", "conv_scale1_1", "=", "nn", ".", "Conv2d", "(", "channels_hidden", "*", "1", ",", "channels", ",", "#", "\n", "kernel_size", "=", "kernel_size", ",", "padding", "=", "pad", "*", "1", ",", "\n", "bias", "=", "not", "batch_norm", ",", "padding_mode", "=", "pad_mode", ",", "dilation", "=", "1", ")", "\n", "self", ".", "conv_scale2_1", "=", "nn", ".", "Conv2d", "(", "channels_hidden", "*", "1", ",", "channels", ",", "#", "\n", "kernel_size", "=", "kernel_size", ",", "padding", "=", "pad", ",", "\n", "bias", "=", "not", "batch_norm", ",", "padding_mode", "=", "pad_mode", ")", "\n", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "self", ".", "up_conv10", "=", "nn", ".", "Conv2d", "(", "channels_hidden", ",", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "padding", "=", "pad", ",", "bias", "=", "True", ",", "padding_mode", "=", "pad_mode", ")", "\n", "\n", "self", ".", "up_conv21", "=", "nn", ".", "Conv2d", "(", "channels_hidden", ",", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "padding", "=", "pad", ",", "bias", "=", "True", ",", "padding_mode", "=", "pad_mode", ")", "\n", "\n", "self", ".", "down_conv01", "=", "nn", ".", "Conv2d", "(", "channels_hidden", ",", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "padding", "=", "pad", ",", "\n", "bias", "=", "not", "batch_norm", ",", "stride", "=", "2", ",", "padding_mode", "=", "pad_mode", ",", "dilation", "=", "1", ")", "\n", "\n", "self", ".", "down_conv12", "=", "nn", ".", "Conv2d", "(", "channels_hidden", ",", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "padding", "=", "pad", ",", "\n", "bias", "=", "not", "batch_norm", ",", "stride", "=", "2", ",", "padding_mode", "=", "pad_mode", ",", "dilation", "=", "1", ")", "\n", "\n", "self", ".", "lr", "=", "nn", ".", "LeakyReLU", "(", "self", ".", "leaky_slope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.CrossConvolutions.forward": [[82, 110], ["freia_funcs.CrossConvolutions.conv_scale0_0", "freia_funcs.CrossConvolutions.conv_scale1_0", "freia_funcs.CrossConvolutions.conv_scale2_0", "freia_funcs.CrossConvolutions.lr", "freia_funcs.CrossConvolutions.lr", "freia_funcs.CrossConvolutions.lr", "freia_funcs.CrossConvolutions.conv_scale0_1", "freia_funcs.CrossConvolutions.conv_scale1_1", "freia_funcs.CrossConvolutions.conv_scale2_1", "freia_funcs.CrossConvolutions.up_conv10", "freia_funcs.CrossConvolutions.up_conv21", "freia_funcs.CrossConvolutions.down_conv01", "freia_funcs.CrossConvolutions.down_conv12", "freia_funcs.CrossConvolutions.upsample", "freia_funcs.CrossConvolutions.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "out0", "=", "self", ".", "conv_scale0_0", "(", "x0", ")", "\n", "out1", "=", "self", ".", "conv_scale1_0", "(", "x1", ")", "\n", "out2", "=", "self", ".", "conv_scale2_0", "(", "x2", ")", "\n", "\n", "y0", "=", "self", ".", "lr", "(", "out0", ")", "\n", "y1", "=", "self", ".", "lr", "(", "out1", ")", "\n", "y2", "=", "self", ".", "lr", "(", "out2", ")", "\n", "\n", "out0", "=", "self", ".", "conv_scale0_1", "(", "y0", ")", "\n", "out1", "=", "self", ".", "conv_scale1_1", "(", "y1", ")", "\n", "out2", "=", "self", ".", "conv_scale2_1", "(", "y2", ")", "\n", "\n", "y1_up", "=", "self", ".", "up_conv10", "(", "self", ".", "upsample", "(", "y1", ")", ")", "\n", "y2_up", "=", "self", ".", "up_conv21", "(", "self", ".", "upsample", "(", "y2", ")", ")", "\n", "\n", "y0_down", "=", "self", ".", "down_conv01", "(", "y0", ")", "\n", "y1_down", "=", "self", ".", "down_conv12", "(", "y1", ")", "\n", "\n", "out0", "=", "out0", "+", "y1_up", "\n", "out1", "=", "out1", "+", "y0_down", "+", "y2_up", "\n", "out2", "=", "out2", "+", "y1_down", "\n", "\n", "if", "c", ".", "use_gamma", ":", "\n", "            ", "out0", "=", "out0", "*", "self", ".", "gamma0", "\n", "out1", "=", "out1", "*", "self", ".", "gamma1", "\n", "out2", "=", "out2", "*", "self", ".", "gamma2", "\n", "", "return", "out0", ",", "out1", ",", "out2", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ParallelPermute.__init__": [[115, 131], ["torch.Module.__init__", "len", "numpy.random.seed", "freia_funcs.ParallelPermute.get_random_perm", "range", "freia_funcs.ParallelPermute.get_random_perm", "freia_funcs.ParallelPermute.perm.append", "freia_funcs.ParallelPermute.perm_inv.append", "range"], "methods", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.Score_Observer.__init__", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ParallelPermute.get_random_perm", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ParallelPermute.get_random_perm"], ["def", "__init__", "(", "self", ",", "dims_in", ",", "seed", ")", ":", "\n", "        ", "super", "(", "ParallelPermute", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# print('dims in', dims_in)", "\n", "# exit()", "\n", "self", ".", "n_inputs", "=", "len", "(", "dims_in", ")", "\n", "self", ".", "in_channels", "=", "[", "dims_in", "[", "i", "]", "[", "0", "]", "for", "i", "in", "range", "(", "self", ".", "n_inputs", ")", "]", "\n", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "perm", ",", "perm_inv", "=", "self", ".", "get_random_perm", "(", "0", ")", "\n", "self", ".", "perm", "=", "[", "perm", "]", "\n", "self", ".", "perm_inv", "=", "[", "perm_inv", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "n_inputs", ")", ":", "\n", "            ", "perm", ",", "perm_inv", "=", "self", ".", "get_random_perm", "(", "i", ")", "\n", "self", ".", "perm", ".", "append", "(", "perm", ")", "\n", "self", ".", "perm_inv", ".", "append", "(", "perm_inv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ParallelPermute.get_random_perm": [[132, 141], ["numpy.random.permutation", "numpy.zeros_like", "enumerate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "", "def", "get_random_perm", "(", "self", ",", "i", ")", ":", "\n", "        ", "perm", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "in_channels", "[", "i", "]", ")", "\n", "perm_inv", "=", "np", ".", "zeros_like", "(", "perm", ")", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "perm", ")", ":", "\n", "            ", "perm_inv", "[", "p", "]", "=", "i", "\n", "\n", "", "perm", "=", "torch", ".", "LongTensor", "(", "perm", ")", "\n", "perm_inv", "=", "torch", ".", "LongTensor", "(", "perm_inv", ")", "\n", "return", "perm", ",", "perm_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ParallelPermute.forward": [[142, 147], ["range", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "rev", "=", "False", ")", ":", "\n", "        ", "if", "not", "rev", ":", "\n", "            ", "return", "[", "x", "[", "i", "]", "[", ":", ",", "self", ".", "perm", "[", "i", "]", "]", "for", "i", "in", "range", "(", "self", ".", "n_inputs", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "x", "[", "i", "]", "[", ":", ",", "self", ".", "perm_inv", "[", "i", "]", "]", "for", "i", "in", "range", "(", "self", ".", "n_inputs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ParallelPermute.jacobian": [[148, 151], ["None"], "methods", ["None"], ["", "", "def", "jacobian", "(", "self", ",", "x", ",", "rev", "=", "False", ")", ":", "\n", "# TODO: use batch size, set as nn.Parameter so cuda() works", "\n", "        ", "return", "[", "0.", "]", "*", "self", ".", "n_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ParallelPermute.output_dims": [[152, 154], ["None"], "methods", ["None"], ["", "def", "output_dims", "(", "self", ",", "input_dims", ")", ":", "\n", "        ", "return", "input_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.__init__": [[157, 173], ["torch.Module.__init__", "len", "math.exp", "math.exp", "F_class", "F_class"], "methods", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.Score_Observer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dims_in", ",", "F_class", "=", "CrossConvolutions", ",", "F_args", "=", "{", "}", ",", "\n", "clamp", "=", "5.", ")", ":", "\n", "        ", "super", "(", "parallel_glow_coupling_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "channels", "=", "dims_in", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "ndims", "=", "len", "(", "dims_in", "[", "0", "]", ")", "\n", "\n", "self", ".", "split_len1", "=", "channels", "//", "2", "\n", "self", ".", "split_len2", "=", "channels", "-", "channels", "//", "2", "\n", "\n", "self", ".", "clamp", "=", "clamp", "\n", "\n", "self", ".", "max_s", "=", "exp", "(", "clamp", ")", "\n", "self", ".", "min_s", "=", "exp", "(", "-", "clamp", ")", "\n", "\n", "self", ".", "s1", "=", "F_class", "(", "self", ".", "split_len1", ",", "self", ".", "split_len2", "*", "2", ",", "**", "F_args", ")", "\n", "self", ".", "s2", "=", "F_class", "(", "self", ".", "split_len2", ",", "self", ".", "split_len1", "*", "2", ",", "**", "F_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.e": [[174, 179], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "freia_funcs.parallel_glow_coupling_layer.log_e"], "methods", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.log_e"], ["", "def", "e", "(", "self", ",", "s", ")", ":", "\n", "        ", "if", "self", ".", "clamp", ">", "0", ":", "\n", "            ", "return", "torch", ".", "exp", "(", "self", ".", "log_e", "(", "s", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "exp", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.log_e": [[180, 185], ["torch.atan", "torch.atan", "torch.atan", "torch.atan"], "methods", ["None"], ["", "", "def", "log_e", "(", "self", ",", "s", ")", ":", "\n", "        ", "if", "self", ".", "clamp", ">", "0", ":", "\n", "            ", "return", "self", ".", "clamp", "*", "0.636", "*", "torch", ".", "atan", "(", "s", "/", "self", ".", "clamp", ")", "\n", "", "else", ":", "\n", "            ", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.forward": [[186, 249], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "x[].narrow", "x[].narrow", "x[].narrow", "x[].narrow", "x[].narrow", "x[].narrow", "freia_funcs.parallel_glow_coupling_layer.s2", "freia_funcs.parallel_glow_coupling_layer.s1", "freia_funcs.parallel_glow_coupling_layer.s1", "freia_funcs.parallel_glow_coupling_layer.s2", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "freia_funcs.parallel_glow_coupling_layer.e", "freia_funcs.parallel_glow_coupling_layer.e", "freia_funcs.parallel_glow_coupling_layer.e", "freia_funcs.parallel_glow_coupling_layer.e", "freia_funcs.parallel_glow_coupling_layer.e", "freia_funcs.parallel_glow_coupling_layer.e", "freia_funcs.parallel_glow_coupling_layer.log_e", "freia_funcs.parallel_glow_coupling_layer.log_e", "freia_funcs.parallel_glow_coupling_layer.log_e", "freia_funcs.parallel_glow_coupling_layer.log_e", "freia_funcs.parallel_glow_coupling_layer.log_e", "freia_funcs.parallel_glow_coupling_layer.log_e", "freia_funcs.parallel_glow_coupling_layer.e", "freia_funcs.parallel_glow_coupling_layer.e", "freia_funcs.parallel_glow_coupling_layer.e", "freia_funcs.parallel_glow_coupling_layer.e", "freia_funcs.parallel_glow_coupling_layer.e", "freia_funcs.parallel_glow_coupling_layer.e"], "methods", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.log_e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.log_e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.log_e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.log_e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.log_e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.log_e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.e", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.e"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "rev", "=", "False", ")", ":", "\n", "        ", "x01", ",", "x02", "=", "(", "x", "[", "0", "]", ".", "narrow", "(", "1", ",", "0", ",", "self", ".", "split_len1", ")", ",", "\n", "x", "[", "0", "]", ".", "narrow", "(", "1", ",", "self", ".", "split_len1", ",", "self", ".", "split_len2", ")", ")", "\n", "x11", ",", "x12", "=", "(", "x", "[", "1", "]", ".", "narrow", "(", "1", ",", "0", ",", "self", ".", "split_len1", ")", ",", "\n", "x", "[", "1", "]", ".", "narrow", "(", "1", ",", "self", ".", "split_len1", ",", "self", ".", "split_len2", ")", ")", "\n", "x21", ",", "x22", "=", "(", "x", "[", "2", "]", ".", "narrow", "(", "1", ",", "0", ",", "self", ".", "split_len1", ")", ",", "\n", "x", "[", "2", "]", ".", "narrow", "(", "1", ",", "self", ".", "split_len1", ",", "self", ".", "split_len2", ")", ")", "\n", "\n", "if", "not", "rev", ":", "\n", "            ", "r02", ",", "r12", ",", "r22", "=", "self", ".", "s2", "(", "x02", ",", "x12", ",", "x22", ")", "\n", "\n", "s02", ",", "t02", "=", "r02", "[", ":", ",", ":", "self", ".", "split_len1", "]", ",", "r02", "[", ":", ",", "self", ".", "split_len1", ":", "]", "\n", "s12", ",", "t12", "=", "r12", "[", ":", ",", ":", "self", ".", "split_len1", "]", ",", "r12", "[", ":", ",", "self", ".", "split_len1", ":", "]", "\n", "s22", ",", "t22", "=", "r22", "[", ":", ",", ":", "self", ".", "split_len1", "]", ",", "r22", "[", ":", ",", "self", ".", "split_len1", ":", "]", "\n", "\n", "y01", "=", "self", ".", "e", "(", "s02", ")", "*", "x01", "+", "t02", "\n", "y11", "=", "self", ".", "e", "(", "s12", ")", "*", "x11", "+", "t12", "\n", "y21", "=", "self", ".", "e", "(", "s22", ")", "*", "x21", "+", "t22", "\n", "\n", "r01", ",", "r11", ",", "r21", "=", "self", ".", "s1", "(", "y01", ",", "y11", ",", "y21", ")", "\n", "\n", "s01", ",", "t01", "=", "r01", "[", ":", ",", ":", "self", ".", "split_len2", "]", ",", "r01", "[", ":", ",", "self", ".", "split_len2", ":", "]", "\n", "s11", ",", "t11", "=", "r11", "[", ":", ",", ":", "self", ".", "split_len2", "]", ",", "r11", "[", ":", ",", "self", ".", "split_len2", ":", "]", "\n", "s21", ",", "t21", "=", "r21", "[", ":", ",", ":", "self", ".", "split_len2", "]", ",", "r21", "[", ":", ",", "self", ".", "split_len2", ":", "]", "\n", "y02", "=", "self", ".", "e", "(", "s01", ")", "*", "x02", "+", "t01", "\n", "y12", "=", "self", ".", "e", "(", "s11", ")", "*", "x12", "+", "t11", "\n", "y22", "=", "self", ".", "e", "(", "s21", ")", "*", "x22", "+", "t21", "\n", "\n", "", "else", ":", "# names of x and y are swapped!", "\n", "            ", "r01", ",", "r11", ",", "r21", "=", "self", ".", "s1", "(", "x01", ",", "x11", ",", "x21", ")", "\n", "\n", "s01", ",", "t01", "=", "r01", "[", ":", ",", ":", "self", ".", "split_len2", "]", ",", "r01", "[", ":", ",", "self", ".", "split_len2", ":", "]", "\n", "s11", ",", "t11", "=", "r11", "[", ":", ",", ":", "self", ".", "split_len2", "]", ",", "r11", "[", ":", ",", "self", ".", "split_len2", ":", "]", "\n", "s21", ",", "t21", "=", "r21", "[", ":", ",", ":", "self", ".", "split_len2", "]", ",", "r21", "[", ":", ",", "self", ".", "split_len2", ":", "]", "\n", "\n", "y02", "=", "(", "x02", "-", "t01", ")", "/", "self", ".", "e", "(", "s01", ")", "\n", "y12", "=", "(", "x12", "-", "t11", ")", "/", "self", ".", "e", "(", "s11", ")", "\n", "y22", "=", "(", "x22", "-", "t21", ")", "/", "self", ".", "e", "(", "s21", ")", "\n", "\n", "r02", ",", "r12", ",", "r22", "=", "self", ".", "s2", "(", "y02", ",", "y12", ",", "y22", ")", "\n", "\n", "s02", ",", "t02", "=", "r02", "[", ":", ",", ":", "self", ".", "split_len2", "]", ",", "r01", "[", ":", ",", "self", ".", "split_len2", ":", "]", "\n", "s12", ",", "t12", "=", "r12", "[", ":", ",", ":", "self", ".", "split_len2", "]", ",", "r11", "[", ":", ",", "self", ".", "split_len2", ":", "]", "\n", "s22", ",", "t22", "=", "r22", "[", ":", ",", ":", "self", ".", "split_len2", "]", ",", "r21", "[", ":", ",", "self", ".", "split_len2", ":", "]", "\n", "\n", "y01", "=", "(", "x01", "-", "t02", ")", "/", "self", ".", "e", "(", "s02", ")", "\n", "y11", "=", "(", "x11", "-", "t12", ")", "/", "self", ".", "e", "(", "s12", ")", "\n", "y21", "=", "(", "x21", "-", "t22", ")", "/", "self", ".", "e", "(", "s22", ")", "\n", "\n", "", "y0", "=", "torch", ".", "cat", "(", "(", "y01", ",", "y02", ")", ",", "1", ")", "\n", "y1", "=", "torch", ".", "cat", "(", "(", "y11", ",", "y12", ")", ",", "1", ")", "\n", "y2", "=", "torch", ".", "cat", "(", "(", "y21", ",", "y22", ")", ",", "1", ")", "\n", "\n", "y0", "=", "torch", ".", "clamp", "(", "y0", ",", "-", "1e6", ",", "1e6", ")", "\n", "y1", "=", "torch", ".", "clamp", "(", "y1", ",", "-", "1e6", ",", "1e6", ")", "\n", "y2", "=", "torch", ".", "clamp", "(", "y2", ",", "-", "1e6", ",", "1e6", ")", "\n", "\n", "jac0", "=", "torch", ".", "sum", "(", "self", ".", "log_e", "(", "s01", ")", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "torch", ".", "sum", "(", "self", ".", "log_e", "(", "s02", ")", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "jac1", "=", "torch", ".", "sum", "(", "self", ".", "log_e", "(", "s11", ")", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "torch", ".", "sum", "(", "self", ".", "log_e", "(", "s12", ")", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "jac2", "=", "torch", ".", "sum", "(", "self", ".", "log_e", "(", "s21", ")", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "+", "torch", ".", "sum", "(", "self", ".", "log_e", "(", "s22", ")", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "self", ".", "last_jac", "=", "[", "jac0", ",", "jac1", ",", "jac2", "]", "\n", "\n", "return", "[", "y0", ",", "y1", ",", "y2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.jacobian": [[250, 252], ["None"], "methods", ["None"], ["", "def", "jacobian", "(", "self", ",", "x", ",", "rev", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "last_jac", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.output_dims": [[253, 255], ["None"], "methods", ["None"], ["", "def", "output_dims", "(", "self", ",", "input_dims", ")", ":", "\n", "        ", "return", "input_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.Node.__init__": [[261, 278], ["range", "exec", "hex", "id"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "inputs", ",", "module_type", ",", "module_args", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "outputs", "=", "[", "]", "\n", "self", ".", "module_type", "=", "module_type", "\n", "self", ".", "module_args", "=", "module_args", "\n", "\n", "self", ".", "input_dims", ",", "self", ".", "module", "=", "None", ",", "None", "\n", "self", ".", "computed", "=", "None", "\n", "self", ".", "computed_rev", "=", "None", "\n", "self", ".", "id", "=", "None", "\n", "\n", "if", "name", ":", "\n", "            ", "self", ".", "name", "=", "name", "\n", "", "else", ":", "\n", "            ", "self", ".", "name", "=", "hex", "(", "id", "(", "self", ")", ")", "[", "-", "6", ":", "]", "\n", "", "for", "i", "in", "range", "(", "255", ")", ":", "\n", "            ", "exec", "(", "'self.out{0} = (self, {0})'", ".", "format", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.Node.build_modules": [[279, 305], ["freia_funcs.Node.module.output_dims", "len", "freia_funcs.Node.module_type", "print", "zip", "print", "n.build_modules", "print", "print"], "methods", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.parallel_glow_coupling_layer.output_dims", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.InputNode.build_modules"], ["", "", "def", "build_modules", "(", "self", ",", "verbose", "=", "VERBOSE", ")", ":", "\n", "        ", "''' Returns a list with the dimension of each output of this node,\n        recursively calling build_modules of the nodes connected to the input.\n        Use this information to initialize the pytorch nn.Module of this node.\n        '''", "\n", "\n", "if", "not", "self", ".", "input_dims", ":", "# Only do it if this hasn't been computed yet", "\n", "            ", "self", ".", "input_dims", "=", "[", "n", ".", "build_modules", "(", "verbose", "=", "verbose", ")", "[", "c", "]", "\n", "for", "n", ",", "c", "in", "self", ".", "inputs", "]", "\n", "try", ":", "\n", "                ", "self", ".", "module", "=", "self", ".", "module_type", "(", "self", ".", "input_dims", ",", "\n", "**", "self", ".", "module_args", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "'Error in node %s'", "%", "(", "self", ".", "name", ")", ")", "\n", "raise", "e", "\n", "\n", "", "if", "verbose", ":", "\n", "                ", "print", "(", "\"Node %s has following input dimensions:\"", "%", "(", "self", ".", "name", ")", ")", "\n", "for", "d", ",", "(", "n", ",", "c", ")", "in", "zip", "(", "self", ".", "input_dims", ",", "self", ".", "inputs", ")", ":", "\n", "                    ", "print", "(", "\"\\t Output #%i of node %s:\"", "%", "(", "c", ",", "n", ".", "name", ")", ",", "d", ")", "\n", "", "print", "(", ")", "\n", "\n", "", "self", ".", "output_dims", "=", "self", ".", "module", ".", "output_dims", "(", "self", ".", "input_dims", ")", "\n", "self", ".", "n_outputs", "=", "len", "(", "self", ".", "output_dims", ")", "\n", "\n", "", "return", "self", ".", "output_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.Node.run_forward": [[306, 329], ["enumerate", "op_list.append", "freia_funcs.Node.input_vars.append", "n.outputs.append", "range", "n.run_forward"], "methods", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.InputNode.run_forward"], ["", "def", "run_forward", "(", "self", ",", "op_list", ")", ":", "\n", "        ", "'''Determine the order of operations needed to reach this node. Calls\n        run_forward of parent nodes recursively. Each operation is appended to\n        the global list op_list, in the form (node ID, input variable IDs,\n        output variable IDs)'''", "\n", "\n", "if", "not", "self", ".", "computed", ":", "\n", "\n", "# Compute all nodes which provide inputs, filter out the", "\n", "# channels you need", "\n", "            ", "self", ".", "input_vars", "=", "[", "]", "\n", "for", "i", ",", "(", "n", ",", "c", ")", "in", "enumerate", "(", "self", ".", "inputs", ")", ":", "\n", "                ", "self", ".", "input_vars", ".", "append", "(", "n", ".", "run_forward", "(", "op_list", ")", "[", "c", "]", ")", "\n", "# Register youself as an output in the input node", "\n", "n", ".", "outputs", ".", "append", "(", "(", "self", ",", "i", ")", ")", "\n", "\n", "# All outputs could now be computed", "\n", "", "self", ".", "computed", "=", "[", "(", "self", ".", "id", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "n_outputs", ")", "]", "\n", "op_list", ".", "append", "(", "(", "self", ".", "id", ",", "self", ".", "input_vars", ",", "self", ".", "computed", ")", ")", "\n", "\n", "# Return the variables you have computed (this happens mulitple times", "\n", "# without recomputing if called repeatedly)", "\n", "", "return", "self", ".", "computed", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.Node.run_backward": [[330, 351], ["len", "op_list.append", "n.run_backward", "range"], "methods", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.OutputNode.run_backward"], ["", "def", "run_backward", "(", "self", ",", "op_list", ")", ":", "\n", "        ", "'''See run_forward, this is the same, only for the reverse computation.\n        Need to call run_forward first, otherwise this function will not\n        work'''", "\n", "\n", "assert", "len", "(", "self", ".", "outputs", ")", ">", "0", ",", "\"Call run_forward first\"", "\n", "if", "not", "self", ".", "computed_rev", ":", "\n", "\n", "# These are the input variables that must be computed first", "\n", "            ", "output_vars", "=", "[", "(", "self", ".", "id", ",", "i", ")", "for", "i", "in", "range", "(", "self", ".", "n_outputs", ")", "]", "\n", "\n", "# Recursively compute these", "\n", "for", "n", ",", "c", "in", "self", ".", "outputs", ":", "\n", "                ", "n", ".", "run_backward", "(", "op_list", ")", "\n", "\n", "# The variables that this node computes are the input variables", "\n", "# from the forward pass", "\n", "", "self", ".", "computed_rev", "=", "self", ".", "input_vars", "\n", "op_list", ".", "append", "(", "(", "self", ".", "id", ",", "output_vars", ",", "self", ".", "computed_rev", ")", ")", "\n", "\n", "", "return", "self", ".", "computed_rev", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.InputNode.__init__": [[357, 366], ["freia_funcs.dummy_data"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "dims", ",", "name", "=", "'node'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "data", "=", "dummy_data", "(", "*", "dims", ")", "\n", "self", ".", "outputs", "=", "[", "]", "\n", "self", ".", "module", "=", "None", "\n", "self", ".", "computed_rev", "=", "None", "\n", "self", ".", "n_outputs", "=", "1", "\n", "self", ".", "input_vars", "=", "[", "]", "\n", "self", ".", "out0", "=", "(", "self", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.InputNode.build_modules": [[367, 369], ["None"], "methods", ["None"], ["", "def", "build_modules", "(", "self", ",", "verbose", "=", "VERBOSE", ")", ":", "\n", "        ", "return", "[", "self", ".", "data", ".", "shape", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.InputNode.run_forward": [[370, 372], ["None"], "methods", ["None"], ["", "def", "run_forward", "(", "self", ",", "op_list", ")", ":", "\n", "        ", "return", "[", "(", "self", ".", "id", ",", "0", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.OutputNode.__init__": [[389, 400], ["enumerate", "inp[].outputs.append"], "methods", ["None"], ["", "", "def", "__init__", "(", "self", ",", "inputs", ",", "name", "=", "'node'", ")", ":", "\n", "        ", "self", ".", "module_type", ",", "self", ".", "module_args", "=", "self", ".", "dummy", ",", "{", "}", "\n", "self", ".", "output_dims", "=", "[", "]", "\n", "self", ".", "inputs", "=", "inputs", "\n", "self", ".", "input_dims", ",", "self", ".", "module", "=", "None", ",", "None", "\n", "self", ".", "computed", "=", "None", "\n", "self", ".", "id", "=", "None", "\n", "self", ".", "name", "=", "name", "\n", "\n", "for", "c", ",", "inp", "in", "enumerate", "(", "self", ".", "inputs", ")", ":", "\n", "            ", "inp", "[", "0", "]", ".", "outputs", ".", "append", "(", "(", "self", ",", "c", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.OutputNode.run_backward": [[401, 403], ["None"], "methods", ["None"], ["", "", "def", "run_backward", "(", "self", ",", "op_list", ")", ":", "\n", "        ", "return", "[", "(", "self", ".", "id", ",", "0", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ReversibleGraphNet.__init__": [[410, 468], ["torch.Module.__init__", "enumerate", "set", "list", "freia_funcs.ReversibleGraphNet.ops_to_indexed", "torch.ModuleList", "torch.ModuleList", "freia_funcs.ReversibleGraphNet.ops_to_indexed", "isinstance", "isinstance", "node_list[].build_modules", "node_list[].run_forward", "variables.union.union.union", "torch.autograd.Variable", "torch.autograd.Variable", "node_list[].run_backward", "list", "len", "list", "len", "set", "range", "isinstance", "range", "isinstance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.Score_Observer.__init__", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ReversibleGraphNet.ops_to_indexed", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ReversibleGraphNet.ops_to_indexed", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.InputNode.build_modules", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.InputNode.run_forward", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.OutputNode.run_backward"], ["def", "__init__", "(", "self", ",", "node_list", ",", "ind_in", "=", "None", ",", "ind_out", "=", "None", ",", "verbose", "=", "False", ",", "n_jac", "=", "1", ")", ":", "\n", "        ", "'''node_list should be a list of all nodes involved, and ind_in,\n        ind_out are the indexes of the special nodes InputNode and OutputNode\n        in this list.'''", "\n", "super", "(", "ReversibleGraphNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Gather lists of input and output nodes", "\n", "if", "ind_in", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "ind_in", ",", "int", ")", ":", "\n", "                ", "self", ".", "ind_in", "=", "list", "(", "[", "ind_in", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "ind_in", "=", "ind_in", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "ind_in", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "node_list", ")", ")", "\n", "if", "isinstance", "(", "node_list", "[", "i", "]", ",", "InputNode", ")", "]", "\n", "assert", "len", "(", "self", ".", "ind_in", ")", ">", "0", ",", "\"No input nodes specified.\"", "\n", "", "if", "ind_out", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "ind_out", ",", "int", ")", ":", "\n", "                ", "self", ".", "ind_out", "=", "list", "(", "[", "ind_out", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "ind_out", "=", "ind_out", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "ind_out", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "node_list", ")", ")", "\n", "if", "isinstance", "(", "node_list", "[", "i", "]", ",", "OutputNode", ")", "]", "\n", "assert", "len", "(", "self", ".", "ind_out", ")", ">", "0", ",", "\"No output nodes specified.\"", "\n", "\n", "", "self", ".", "return_vars", "=", "[", "]", "\n", "self", ".", "input_vars", "=", "[", "]", "\n", "\n", "# Assign each node a unique ID", "\n", "self", ".", "node_list", "=", "node_list", "\n", "for", "i", ",", "n", "in", "enumerate", "(", "node_list", ")", ":", "\n", "            ", "n", ".", "id", "=", "i", "\n", "\n", "# Recursively build the nodes nn.Modules and determine order of", "\n", "# operations", "\n", "", "ops", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "ind_out", ":", "\n", "            ", "node_list", "[", "i", "]", ".", "build_modules", "(", "verbose", "=", "verbose", ")", "\n", "node_list", "[", "i", "]", ".", "run_forward", "(", "ops", ")", "\n", "\n", "# create list of Pytorch variables that are used", "\n", "", "variables", "=", "set", "(", ")", "\n", "for", "o", "in", "ops", ":", "\n", "            ", "variables", "=", "variables", ".", "union", "(", "set", "(", "o", "[", "1", "]", "+", "o", "[", "2", "]", ")", ")", "\n", "", "self", ".", "variables_ind", "=", "list", "(", "variables", ")", "\n", "\n", "self", ".", "indexed_ops", "=", "self", ".", "ops_to_indexed", "(", "ops", ")", "\n", "\n", "self", ".", "module_list", "=", "nn", ".", "ModuleList", "(", "[", "n", ".", "module", "for", "n", "in", "node_list", "]", ")", "\n", "self", ".", "variable_list", "=", "[", "Variable", "(", "requires_grad", "=", "True", ")", "for", "v", "in", "variables", "]", "\n", "\n", "# Find out the order of operations for reverse calculations", "\n", "ops_rev", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "ind_in", ":", "\n", "            ", "node_list", "[", "i", "]", ".", "run_backward", "(", "ops_rev", ")", "\n", "", "self", ".", "indexed_ops_rev", "=", "self", ".", "ops_to_indexed", "(", "ops_rev", ")", "\n", "self", ".", "n_jac", "=", "n_jac", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ReversibleGraphNet.ops_to_indexed": [[469, 499], ["freia_funcs.ReversibleGraphNet.return_vars.sort", "freia_funcs.ReversibleGraphNet.input_vars.sort", "result.append", "freia_funcs.ReversibleGraphNet.variables_ind.index", "freia_funcs.ReversibleGraphNet.return_vars.append", "freia_funcs.ReversibleGraphNet.input_vars.append", "freia_funcs.ReversibleGraphNet.variables_ind.index", "freia_funcs.ReversibleGraphNet.variables_ind.index", "freia_funcs.ReversibleGraphNet.variables_ind.index"], "methods", ["None"], ["", "def", "ops_to_indexed", "(", "self", ",", "ops", ")", ":", "\n", "        ", "'''Helper function to translate the list of variables (origin ID, channel),\n        to variable IDs.'''", "\n", "result", "=", "[", "]", "\n", "\n", "for", "o", "in", "ops", ":", "\n", "            ", "try", ":", "\n", "                ", "vars_in", "=", "[", "self", ".", "variables_ind", ".", "index", "(", "v", ")", "for", "v", "in", "o", "[", "1", "]", "]", "\n", "", "except", "ValueError", ":", "\n", "                ", "vars_in", "=", "-", "1", "\n", "\n", "", "vars_out", "=", "[", "self", ".", "variables_ind", ".", "index", "(", "v", ")", "for", "v", "in", "o", "[", "2", "]", "]", "\n", "\n", "# Collect input/output nodes in separate lists, but don't add to", "\n", "# indexed ops", "\n", "if", "o", "[", "0", "]", "in", "self", ".", "ind_out", ":", "\n", "                ", "self", ".", "return_vars", ".", "append", "(", "self", ".", "variables_ind", ".", "index", "(", "o", "[", "1", "]", "[", "0", "]", ")", ")", "\n", "continue", "\n", "", "if", "o", "[", "0", "]", "in", "self", ".", "ind_in", ":", "\n", "                ", "self", ".", "input_vars", ".", "append", "(", "self", ".", "variables_ind", ".", "index", "(", "o", "[", "1", "]", "[", "0", "]", ")", ")", "\n", "continue", "\n", "\n", "", "result", ".", "append", "(", "(", "o", "[", "0", "]", ",", "vars_in", ",", "vars_out", ")", ")", "\n", "\n", "# Sort input/output variables so they correspond to initial node list", "\n", "# order", "\n", "", "self", ".", "return_vars", ".", "sort", "(", "key", "=", "lambda", "i", ":", "self", ".", "variables_ind", "[", "i", "]", "[", "0", "]", ")", "\n", "self", ".", "input_vars", ".", "sort", "(", "key", "=", "lambda", "i", ":", "self", ".", "variables_ind", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ReversibleGraphNet.forward": [[500, 541], ["isinstance", "range", "zip", "len", "len", "len", "len", "len", "range", "len", "len", "len", "RuntimeError", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "rev", "=", "False", ")", ":", "\n", "        ", "'''Forward or backward computation of the whole net.'''", "\n", "if", "rev", ":", "\n", "            ", "use_list", "=", "self", ".", "indexed_ops_rev", "\n", "input_vars", ",", "output_vars", "=", "self", ".", "return_vars", ",", "self", ".", "input_vars", "\n", "", "else", ":", "\n", "            ", "use_list", "=", "self", ".", "indexed_ops", "\n", "input_vars", ",", "output_vars", "=", "self", ".", "input_vars", ",", "self", ".", "return_vars", "\n", "\n", "", "if", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "assert", "len", "(", "x", ")", "==", "len", "(", "input_vars", ")", ",", "(", "\n", "f\"Got list of {len(x)} input tensors for \"", "\n", "f\"{'inverse' if rev else 'forward'} pass, but expected \"", "\n", "f\"{len(input_vars)}.\"", "\n", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "input_vars", ")", ")", ":", "\n", "                ", "self", ".", "variable_list", "[", "input_vars", "[", "i", "]", "]", "=", "x", "[", "i", "]", "\n", "", "", "else", ":", "\n", "            ", "assert", "len", "(", "input_vars", ")", "==", "1", ",", "(", "f\"Got single input tensor for \"", "\n", "f\"{'inverse' if rev else 'forward'} \"", "\n", "f\"pass, but expected list of \"", "\n", "f\"{len(input_vars)}.\"", ")", "\n", "self", ".", "variable_list", "[", "input_vars", "[", "0", "]", "]", "=", "x", "\n", "\n", "", "for", "o", "in", "use_list", ":", "\n", "            ", "try", ":", "\n", "                ", "results", "=", "self", ".", "module_list", "[", "o", "[", "0", "]", "]", "(", "[", "self", ".", "variable_list", "[", "i", "]", "\n", "for", "i", "in", "o", "[", "1", "]", "]", ",", "rev", "=", "rev", ")", "\n", "", "except", "TypeError", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Are you sure all used Nodes are in the \"", "\n", "\"Node list?\"", ")", "\n", "", "for", "i", ",", "r", "in", "zip", "(", "o", "[", "2", "]", ",", "results", ")", ":", "\n", "                ", "self", ".", "variable_list", "[", "i", "]", "=", "r", "\n", "# self.variable_list[o[2][0]] = self.variable_list[o[1][0]]", "\n", "\n", "", "", "out", "=", "[", "self", ".", "variable_list", "[", "output_vars", "[", "i", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "output_vars", ")", ")", "]", "\n", "if", "len", "(", "out", ")", "==", "1", ":", "\n", "            ", "return", "out", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ReversibleGraphNet.jacobian": [[542, 571], ["freia_funcs.ReversibleGraphNet.forward", "RuntimeError", "freia_funcs.ReversibleGraphNet.module_list[].jacobian", "enumerate", "RuntimeError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.model.FeatureExtractor.forward", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ReversibleGraphNet.jacobian"], ["", "", "def", "jacobian", "(", "self", ",", "x", "=", "None", ",", "rev", "=", "False", ",", "run_forward", "=", "True", ")", ":", "\n", "        ", "'''Compute the jacobian determinant of the whole net.'''", "\n", "jacobian", "=", "[", "0.", "]", "*", "self", ".", "n_jac", "\n", "\n", "if", "rev", ":", "\n", "            ", "use_list", "=", "self", ".", "indexed_ops_rev", "\n", "", "else", ":", "\n", "            ", "use_list", "=", "self", ".", "indexed_ops", "\n", "\n", "", "if", "run_forward", ":", "\n", "            ", "if", "x", "is", "None", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"You need to provide an input if you want \"", "\n", "\"to run a forward pass\"", ")", "\n", "", "self", ".", "forward", "(", "x", ",", "rev", "=", "rev", ")", "\n", "\n", "", "for", "o", "in", "use_list", ":", "\n", "            ", "try", ":", "\n", "                ", "node_jac", "=", "self", ".", "module_list", "[", "o", "[", "0", "]", "]", ".", "jacobian", "(", "\n", "[", "self", ".", "variable_list", "[", "i", "]", "for", "i", "in", "o", "[", "1", "]", "]", ",", "rev", "=", "rev", "\n", ")", "\n", "node_jac", "=", "[", "node_jac", "]", "if", "not", "isinstance", "(", "node_jac", ",", "list", ")", "else", "node_jac", "\n", "for", "i_j", ",", "jac", "in", "enumerate", "(", "node_jac", ")", ":", "\n", "                    ", "jacobian", "[", "i_j", "]", "+=", "jac", "\n", "\n", "", "", "except", "TypeError", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Are you sure all used Nodes are in the \"", "\n", "\"Node list?\"", ")", "\n", "\n", "", "", "return", "jacobian", "\n", "", "", ""]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.evaluate.compare_histogram": [[24, 44], ["copy.deepcopy", "numpy.linspace", "matplotlib.clf", "matplotlib.hist", "matplotlib.hist", "numpy.linspace", "matplotlib.xticks", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.grid", "matplotlib.savefig", "numpy.min", "numpy.max", "os.path.join", "str", "str"], "function", ["None"], ["def", "compare_histogram", "(", "scores", ",", "classes", ",", "thresh", "=", "2.5", ",", "n_bins", "=", "64", ")", ":", "\n", "    ", "classes", "=", "deepcopy", "(", "classes", ")", "\n", "classes", "[", "classes", ">", "0", "]", "=", "1", "\n", "scores", "[", "scores", ">", "thresh", "]", "=", "thresh", "\n", "bins", "=", "np", ".", "linspace", "(", "np", ".", "min", "(", "scores", ")", ",", "np", ".", "max", "(", "scores", ")", ",", "n_bins", ")", "\n", "scores_norm", "=", "scores", "[", "classes", "==", "0", "]", "\n", "scores_ano", "=", "scores", "[", "classes", "==", "1", "]", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "hist", "(", "scores_norm", ",", "bins", ",", "alpha", "=", "0.5", ",", "density", "=", "True", ",", "label", "=", "'non-defects'", ",", "color", "=", "'cyan'", ",", "edgecolor", "=", "\"black\"", ")", "\n", "plt", ".", "hist", "(", "scores_ano", ",", "bins", ",", "alpha", "=", "0.5", ",", "density", "=", "True", ",", "label", "=", "'defects'", ",", "color", "=", "'crimson'", ",", "edgecolor", "=", "\"black\"", ")", "\n", "\n", "ticks", "=", "np", ".", "linspace", "(", "0.5", ",", "thresh", ",", "5", ")", "\n", "labels", "=", "[", "str", "(", "i", ")", "for", "i", "in", "ticks", "[", ":", "-", "1", "]", "]", "+", "[", "'>'", "+", "str", "(", "thresh", ")", "]", "\n", "plt", ".", "xticks", "(", "ticks", ",", "labels", "=", "labels", ")", "\n", "plt", ".", "xlabel", "(", "r'$-log(p(z))$'", ")", "\n", "plt", ".", "ylabel", "(", "'Count (normalized)'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "grid", "(", "axis", "=", "'y'", ")", "\n", "plt", ".", "savefig", "(", "join", "(", "score_export_dir", ",", "'score_histogram.png'", ")", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.evaluate.viz_roc": [[46, 75], ["evaluate.viz_roc.export_roc"], "function", ["None"], ["", "def", "viz_roc", "(", "values", ",", "classes", ",", "class_names", ")", ":", "\n", "    ", "def", "export_roc", "(", "values", ",", "classes", ",", "export_name", "=", "'all'", ")", ":", "\n", "# Compute ROC curve and ROC area for each class", "\n", "        ", "classes", "=", "deepcopy", "(", "classes", ")", "\n", "classes", "[", "classes", ">", "0", "]", "=", "1", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "classes", ",", "values", ")", "\n", "roc_auc", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "lw", "=", "2", "\n", "plt", ".", "plot", "(", "fpr", ",", "tpr", ",", "color", "=", "'darkorange'", ",", "\n", "lw", "=", "lw", ",", "label", "=", "'ROC curve (area = %0.4f)'", "%", "roc_auc", ")", "\n", "\n", "plt", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "color", "=", "'navy'", ",", "lw", "=", "lw", ",", "linestyle", "=", "'--'", ")", "\n", "plt", ".", "xlabel", "(", "'False Positive Rate'", ")", "\n", "plt", ".", "ylabel", "(", "'True Positive Rate'", ")", "\n", "plt", ".", "title", "(", "'Receiver operating characteristic for class '", "+", "c", ".", "class_name", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "\"lower right\"", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "savefig", "(", "join", "(", "score_export_dir", ",", "export_name", "+", "'.png'", ")", ")", "\n", "\n", "", "export_roc", "(", "values", ",", "classes", ")", "\n", "for", "cl", "in", "range", "(", "1", ",", "classes", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "        ", "filtered_indices", "=", "np", ".", "concatenate", "(", "[", "np", ".", "where", "(", "classes", "==", "0", ")", "[", "0", "]", ",", "np", ".", "where", "(", "classes", "==", "cl", ")", "[", "0", "]", "]", ")", "\n", "classes_filtered", "=", "classes", "[", "filtered_indices", "]", "\n", "values_filtered", "=", "values", "[", "filtered_indices", "]", "\n", "export_roc", "(", "values_filtered", ",", "classes_filtered", ",", "export_name", "=", "class_names", "[", "filtered_indices", "[", "-", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.evaluate.viz_maps": [[77, 98], ["PIL.Image.open().convert", "numpy.array", "matplotlib.clf", "matplotlib.imshow", "matplotlib.axis", "matplotlib.savefig", "utils.t2np", "os.path.join", "matplotlib.clf", "matplotlib.imshow", "matplotlib.axis", "matplotlib.savefig", "matplotlib.imshow", "matplotlib.savefig", "PIL.Image.open", "torch.interpolate", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.t2np"], ["", "", "def", "viz_maps", "(", "maps", ",", "name", ",", "label", ")", ":", "\n", "    ", "img_path", "=", "img_paths", "[", "c", ".", "viz_sample_count", "]", "\n", "image", "=", "PIL", ".", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ")", "\n", "\n", "map_to_viz", "=", "t2np", "(", "F", ".", "interpolate", "(", "maps", "[", "0", "]", "[", "None", ",", "None", "]", ",", "size", "=", "image", ".", "shape", "[", ":", "2", "]", ",", "mode", "=", "upscale_mode", ",", "align_corners", "=", "False", ")", ")", "[", "\n", "0", ",", "0", "]", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "imshow", "(", "map_to_viz", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "savefig", "(", "join", "(", "map_export_dir", ",", "name", "+", "'_map.jpg'", ")", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "\n", "if", "label", ">", "0", ":", "\n", "        ", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "savefig", "(", "join", "(", "map_export_dir", ",", "name", "+", "'_orig.jpg'", ")", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "imshow", "(", "map_to_viz", ",", "cmap", "=", "'viridis'", ",", "alpha", "=", "0.3", ")", "\n", "plt", ".", "savefig", "(", "join", "(", "map_export_dir", ",", "name", "+", "'_overlay.jpg'", ")", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.evaluate.viz_map_array": [[100, 143], ["matplotlib.clf", "matplotlib.subplots", "range", "range", "len", "PIL.Image.open().convert", "numpy.array", "[].imshow", "[].axis", "[].imshow", "[].axis", "[].set_title", "[].imshow", "[].axis", "[].imshow", "[].axis", "[].axis", "[].axis", "matplotlib.savefig", "matplotlib.subplots", "img_paths[].split", "utils.t2np", "os.path.join", "matplotlib.savefig", "matplotlib.close", "PIL.Image.open", "torch.interpolate", "os.path.join", "str", "str"], "function", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.t2np"], ["", "def", "viz_map_array", "(", "maps", ",", "labels", ",", "n_col", "=", "8", ",", "subsample", "=", "4", ",", "max_figures", "=", "-", "1", ")", ":", "\n", "    ", "plt", ".", "clf", "(", ")", "\n", "fig", ",", "subplots", "=", "plt", ".", "subplots", "(", "3", ",", "n_col", ")", "\n", "\n", "fig_count", "=", "-", "1", "\n", "col_count", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "maps", ")", ")", ":", "\n", "        ", "if", "i", "%", "subsample", "!=", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "labels", "[", "i", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "col_count", "=", "(", "col_count", "+", "1", ")", "%", "n_col", "\n", "if", "col_count", "==", "0", ":", "\n", "            ", "if", "fig_count", ">=", "0", ":", "\n", "                ", "plt", ".", "savefig", "(", "join", "(", "map_export_dir", ",", "str", "(", "fig_count", ")", "+", "'.jpg'", ")", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "fig", ",", "subplots", "=", "plt", ".", "subplots", "(", "3", ",", "n_col", ",", "figsize", "=", "(", "22", ",", "8", ")", ")", "\n", "fig_count", "+=", "1", "\n", "if", "fig_count", "==", "max_figures", ":", "\n", "                ", "return", "\n", "\n", "", "", "anomaly_description", "=", "img_paths", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "image", "=", "PIL", ".", "Image", ".", "open", "(", "img_paths", "[", "i", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ")", "\n", "map", "=", "t2np", "(", "F", ".", "interpolate", "(", "maps", "[", "i", "]", "[", "None", ",", "None", "]", ",", "size", "=", "image", ".", "shape", "[", ":", "2", "]", ",", "mode", "=", "upscale_mode", ",", "align_corners", "=", "False", ")", ")", "[", "\n", "0", ",", "0", "]", "\n", "subplots", "[", "1", "]", "[", "col_count", "]", ".", "imshow", "(", "map", ")", "\n", "subplots", "[", "1", "]", "[", "col_count", "]", ".", "axis", "(", "'off'", ")", "\n", "subplots", "[", "0", "]", "[", "col_count", "]", ".", "imshow", "(", "image", ")", "\n", "subplots", "[", "0", "]", "[", "col_count", "]", ".", "axis", "(", "'off'", ")", "\n", "subplots", "[", "0", "]", "[", "col_count", "]", ".", "set_title", "(", "c", ".", "class_name", "+", "\":\\n\"", "+", "anomaly_description", ")", "\n", "subplots", "[", "2", "]", "[", "col_count", "]", ".", "imshow", "(", "image", ")", "\n", "subplots", "[", "2", "]", "[", "col_count", "]", ".", "axis", "(", "'off'", ")", "\n", "subplots", "[", "2", "]", "[", "col_count", "]", ".", "imshow", "(", "map", ",", "cmap", "=", "'viridis'", ",", "alpha", "=", "0.3", ")", "\n", "", "for", "i", "in", "range", "(", "col_count", ",", "n_col", ")", ":", "\n", "        ", "subplots", "[", "0", "]", "[", "i", "]", ".", "axis", "(", "'off'", ")", "\n", "subplots", "[", "1", "]", "[", "i", "]", ".", "axis", "(", "'off'", ")", "\n", "subplots", "[", "2", "]", "[", "i", "]", ".", "axis", "(", "'off'", ")", "\n", "", "if", "col_count", ">", "0", ":", "\n", "        ", "plt", ".", "savefig", "(", "join", "(", "map_export_dir", ",", "str", "(", "fig_count", ")", "+", "'.jpg'", ")", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.evaluate.evaluate": [[145, 199], ["model.to", "model.eval", "print", "list", "list", "list", "numpy.concatenate", "numpy.concatenate", "evaluate.compare_histogram", "evaluate.viz_roc", "numpy.array", "sklearn.metrics.roc_auc_score", "print", "model.FeatureExtractor", "model.FeatureExtractor.eval", "model.FeatureExtractor.to", "model.FeatureExtractor.parameters", "torch.no_grad", "torch.no_grad", "enumerate", "evaluate.viz_map_array", "tqdm.tqdm", "utils.preprocess_batch", "model", "utils.t2np", "numpy.mean", "np.concatenate.append", "np.array.append", "img_path.split", "model.FeatureExtractor.", "utils.concat_maps", "utils.t2np", "list", "list", "range", "list.extend", "enumerate", "len", "list.append", "list.append", "utils.t2np", "z[].view", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.evaluate.compare_histogram", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.evaluate.viz_roc", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.evaluate.viz_map_array", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.preprocess_batch", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.t2np", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.concat_maps", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.t2np", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.t2np"], ["", "def", "evaluate", "(", "model", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "to", "(", "c", ".", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "if", "not", "c", ".", "pre_extracted", ":", "\n", "        ", "fe", "=", "FeatureExtractor", "(", ")", "\n", "fe", ".", "eval", "(", ")", "\n", "fe", ".", "to", "(", "c", ".", "device", ")", "\n", "for", "param", "in", "fe", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "print", "(", "'\\nCompute maps, loss and scores on test set:'", ")", "\n", "anomaly_score", "=", "list", "(", ")", "\n", "test_labels", "=", "list", "(", ")", "\n", "c", ".", "viz_sample_count", "=", "0", "\n", "all_maps", "=", "list", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "test_loader", ",", "disable", "=", "c", ".", "hide_tqdm_bar", ")", ")", ":", "\n", "            ", "inputs", ",", "labels", "=", "preprocess_batch", "(", "data", ")", "\n", "if", "not", "c", ".", "pre_extracted", ":", "\n", "                ", "inputs", "=", "fe", "(", "inputs", ")", "\n", "", "z", "=", "model", "(", "inputs", ")", "\n", "\n", "z_concat", "=", "t2np", "(", "concat_maps", "(", "z", ")", ")", "\n", "nll_score", "=", "np", ".", "mean", "(", "z_concat", "**", "2", "/", "2", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "anomaly_score", ".", "append", "(", "nll_score", ")", "\n", "test_labels", ".", "append", "(", "t2np", "(", "labels", ")", ")", "\n", "\n", "if", "localize", ":", "\n", "                ", "z_grouped", "=", "list", "(", ")", "\n", "likelihood_grouped", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "z", ")", ")", ":", "\n", "                    ", "z_grouped", ".", "append", "(", "z", "[", "i", "]", ".", "view", "(", "-", "1", ",", "*", "z", "[", "i", "]", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "likelihood_grouped", ".", "append", "(", "torch", ".", "mean", "(", "z_grouped", "[", "-", "1", "]", "**", "2", ",", "dim", "=", "(", "1", ",", ")", ")", ")", "\n", "", "all_maps", ".", "extend", "(", "likelihood_grouped", "[", "0", "]", ")", "\n", "for", "i_l", ",", "l", "in", "enumerate", "(", "t2np", "(", "labels", ")", ")", ":", "\n", "# viz_maps([lg[i_l] for lg in likelihood_grouped], c.modelname + '_' + str(c.viz_sample_count), label=l, show_scales = 1)", "\n", "                    ", "c", ".", "viz_sample_count", "+=", "1", "\n", "\n", "", "", "", "", "anomaly_score", "=", "np", ".", "concatenate", "(", "anomaly_score", ")", "\n", "test_labels", "=", "np", ".", "concatenate", "(", "test_labels", ")", "\n", "\n", "compare_histogram", "(", "anomaly_score", ",", "test_labels", ")", "\n", "\n", "class_names", "=", "[", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "for", "img_path", "in", "img_paths", "]", "\n", "viz_roc", "(", "anomaly_score", ",", "test_labels", ",", "class_names", ")", "\n", "\n", "test_labels", "=", "np", ".", "array", "(", "[", "1", "if", "l", ">", "0", "else", "0", "for", "l", "in", "test_labels", "]", ")", "\n", "auc_score", "=", "roc_auc_score", "(", "test_labels", ",", "anomaly_score", ")", "\n", "print", "(", "'AUC:'", ",", "auc_score", ")", "\n", "\n", "if", "localize", ":", "\n", "        ", "viz_map_array", "(", "all_maps", ",", "test_labels", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.extract_features.extract": [[10, 31], ["model.FeatureExtractor", "model.FeatureExtractor.to", "model.FeatureExtractor.eval", "torch.no_grad", "zip", "list", "enumerate", "enumerate", "list", "tqdm.tqdm", "utils.preprocess_batch", "np.concatenate.append", "model.FeatureExtractor.", "enumerate", "numpy.concatenate", "numpy.save", "numpy.concatenate", "numpy.save", "range", "utils.t2np", "features[].append", "utils.t2np", "str", "config.c.class_name"], "function", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.preprocess_batch", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.t2np", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.t2np"], ["def", "extract", "(", "train_loader", ",", "test_loader", ",", "class_name", ")", ":", "\n", "    ", "model", "=", "FeatureExtractor", "(", ")", "\n", "model", ".", "to", "(", "c", ".", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "name", ",", "loader", "in", "zip", "(", "[", "'train'", ",", "'test'", "]", ",", "[", "train_loader", ",", "test_loader", "]", ")", ":", "\n", "            ", "features", "=", "[", "list", "(", ")", "for", "_", "in", "range", "(", "c", ".", "n_scales", ")", "]", "\n", "labels", "=", "list", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "                ", "inputs", ",", "l", "=", "preprocess_batch", "(", "data", ")", "\n", "labels", ".", "append", "(", "t2np", "(", "l", ")", ")", "\n", "z", "=", "model", "(", "inputs", ")", "\n", "for", "iz", ",", "zi", "in", "enumerate", "(", "z", ")", ":", "\n", "                    ", "features", "[", "iz", "]", ".", "append", "(", "t2np", "(", "zi", ")", ")", "\n", "\n", "", "", "for", "i_f", ",", "f", "in", "enumerate", "(", "features", ")", ":", "\n", "                ", "f", "=", "np", ".", "concatenate", "(", "f", ",", "axis", "=", "0", ")", "\n", "np", ".", "save", "(", "export_dir", "+", "class_name", "+", "'_scale_'", "+", "str", "(", "i_f", ")", "+", "'_'", "+", "name", ",", "f", ")", "\n", "", "if", "name", "==", "'test'", ":", "\n", "                ", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "np", ".", "save", "(", "export_dir", "+", "class_name", "+", "'_labels'", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.train.train": [[10, 89], ["model.get_cs_flow_model", "torch.optim.Adam", "model.get_cs_flow_model.to", "utils.Score_Observer", "range", "model.get_cs_flow_model.parameters", "model.FeatureExtractor", "model.FeatureExtractor.eval", "model.FeatureExtractor.to", "model.FeatureExtractor.parameters", "model.get_cs_flow_model.train", "range", "model.get_cs_flow_model.eval", "list", "list", "list", "numpy.mean", "numpy.concatenate", "numpy.array", "numpy.concatenate", "utils.Score_Observer.update", "model.get_cs_flow_model.to", "model.save_model", "print", "list", "enumerate", "numpy.mean", "print", "torch.no_grad", "enumerate", "numpy.array", "print", "sklearn.metrics.roc_auc_score", "tqdm.tqdm", "torch.optim.Adam.zero_grad", "utils.preprocess_batch", "model.nf_forward", "utils.get_loss", "list.append", "utils.get_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "print", "tqdm.tqdm", "utils.preprocess_batch", "model.nf_forward", "utils.get_loss", "utils.t2np", "numpy.mean", "list.append", "np.mean.append", "np.concatenate.append", "model.FeatureExtractor.", "utils.t2np", "model.get_cs_flow_model.parameters", "model.FeatureExtractor.", "utils.concat_maps", "utils.t2np", "utils.t2np"], "function", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.model.get_cs_flow_model", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.train.train", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.Score_Observer.update", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.model.save_model", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.preprocess_batch", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.model.nf_forward", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.get_loss", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.preprocess_batch", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.model.nf_forward", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.get_loss", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.t2np", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.t2np", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.concat_maps", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.t2np", "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.t2np"], ["def", "train", "(", "train_loader", ",", "test_loader", ")", ":", "\n", "    ", "model", "=", "get_cs_flow_model", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "c", ".", "lr_init", ",", "eps", "=", "1e-04", ",", "weight_decay", "=", "1e-5", ")", "\n", "model", ".", "to", "(", "c", ".", "device", ")", "\n", "if", "not", "c", ".", "pre_extracted", ":", "\n", "        ", "fe", "=", "FeatureExtractor", "(", ")", "\n", "fe", ".", "eval", "(", ")", "\n", "fe", ".", "to", "(", "c", ".", "device", ")", "\n", "for", "param", "in", "fe", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "z_obs", "=", "Score_Observer", "(", "'AUROC'", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "c", ".", "meta_epochs", ")", ":", "\n", "# train some epochs", "\n", "        ", "model", ".", "train", "(", ")", "\n", "if", "c", ".", "verbose", ":", "\n", "            ", "print", "(", "F'\\nTrain epoch {epoch}'", ")", "\n", "", "for", "sub_epoch", "in", "range", "(", "c", ".", "sub_epochs", ")", ":", "\n", "            ", "train_loss", "=", "list", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "train_loader", ",", "disable", "=", "c", ".", "hide_tqdm_bar", ")", ")", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "inputs", ",", "labels", "=", "preprocess_batch", "(", "data", ")", "# move to device and reshape", "\n", "if", "not", "c", ".", "pre_extracted", ":", "\n", "                    ", "inputs", "=", "fe", "(", "inputs", ")", "\n", "\n", "", "z", ",", "jac", "=", "nf_forward", "(", "model", ",", "inputs", ")", "\n", "\n", "loss", "=", "get_loss", "(", "z", ",", "jac", ")", "\n", "train_loss", ".", "append", "(", "t2np", "(", "loss", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "c", ".", "max_grad_norm", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "mean_train_loss", "=", "np", ".", "mean", "(", "train_loss", ")", "\n", "if", "c", ".", "verbose", "and", "epoch", "==", "0", "and", "sub_epoch", "%", "4", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch: {:d}.{:d} \\t train loss: {:.4f}'", ".", "format", "(", "epoch", ",", "sub_epoch", ",", "mean_train_loss", ")", ")", "\n", "\n", "# evaluate", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "if", "c", ".", "verbose", ":", "\n", "            ", "print", "(", "'\\nCompute loss and scores on test set:'", ")", "\n", "", "test_loss", "=", "list", "(", ")", "\n", "test_z", "=", "list", "(", ")", "\n", "test_labels", "=", "list", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "test_loader", ",", "disable", "=", "c", ".", "hide_tqdm_bar", ")", ")", ":", "\n", "                ", "inputs", ",", "labels", "=", "preprocess_batch", "(", "data", ")", "\n", "if", "not", "c", ".", "pre_extracted", ":", "\n", "                    ", "inputs", "=", "fe", "(", "inputs", ")", "\n", "\n", "", "z", ",", "jac", "=", "nf_forward", "(", "model", ",", "inputs", ")", "\n", "loss", "=", "get_loss", "(", "z", ",", "jac", ")", "\n", "\n", "z_concat", "=", "t2np", "(", "concat_maps", "(", "z", ")", ")", "\n", "score", "=", "np", ".", "mean", "(", "z_concat", "**", "2", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "test_z", ".", "append", "(", "score", ")", "\n", "test_loss", ".", "append", "(", "t2np", "(", "loss", ")", ")", "\n", "test_labels", ".", "append", "(", "t2np", "(", "labels", ")", ")", "\n", "\n", "", "", "test_loss", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "test_loss", ")", ")", "\n", "if", "c", ".", "verbose", ":", "\n", "            ", "print", "(", "'Epoch: {:d} \\t test_loss: {:.4f}'", ".", "format", "(", "epoch", ",", "test_loss", ")", ")", "\n", "\n", "", "test_labels", "=", "np", ".", "concatenate", "(", "test_labels", ")", "\n", "is_anomaly", "=", "np", ".", "array", "(", "[", "0", "if", "l", "==", "0", "else", "1", "for", "l", "in", "test_labels", "]", ")", "\n", "\n", "anomaly_score", "=", "np", ".", "concatenate", "(", "test_z", ",", "axis", "=", "0", ")", "\n", "z_obs", ".", "update", "(", "roc_auc_score", "(", "is_anomaly", ",", "anomaly_score", ")", ",", "epoch", ",", "\n", "print_score", "=", "c", ".", "verbose", "or", "epoch", "==", "c", ".", "meta_epochs", "-", "1", ")", "\n", "\n", "", "if", "c", ".", "save_model", ":", "\n", "        ", "model", ".", "to", "(", "'cpu'", ")", "\n", "save_model", "(", "model", ",", "c", ".", "modelname", ")", "\n", "\n", "", "return", "z_obs", ".", "max_score", ",", "z_obs", ".", "last", ",", "z_obs", ".", "min_loss_score", "\n", "", ""]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.model.FeatureExtractor.__init__": [[43, 46], ["torch.nn.Module.__init__", "efficientnet_pytorch.EfficientNet.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.Score_Observer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_extractor", "=", "EfficientNet", ".", "from_pretrained", "(", "'efficientnet-b5'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.model.FeatureExtractor.eff_ext": [[47, 57], ["model.FeatureExtractor.feature_extractor._swish", "enumerate", "model.FeatureExtractor.feature_extractor._bn0", "block", "model.FeatureExtractor.feature_extractor._conv_stem", "float", "len"], "methods", ["None"], ["", "def", "eff_ext", "(", "self", ",", "x", ",", "use_layer", "=", "35", ")", ":", "\n", "        ", "x", "=", "self", ".", "feature_extractor", ".", "_swish", "(", "self", ".", "feature_extractor", ".", "_bn0", "(", "self", ".", "feature_extractor", ".", "_conv_stem", "(", "x", ")", ")", ")", "\n", "# Blocks", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "feature_extractor", ".", "_blocks", ")", ":", "\n", "            ", "drop_connect_rate", "=", "self", ".", "feature_extractor", ".", "_global_params", ".", "drop_connect_rate", "\n", "if", "drop_connect_rate", ":", "\n", "                ", "drop_connect_rate", "*=", "float", "(", "idx", ")", "/", "len", "(", "self", ".", "feature_extractor", ".", "_blocks", ")", "# scale drop connect_rate", "\n", "", "x", "=", "block", "(", "x", ",", "drop_connect_rate", "=", "drop_connect_rate", ")", "\n", "if", "idx", "==", "use_layer", ":", "\n", "                ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.model.FeatureExtractor.forward": [[58, 66], ["list", "range", "model.FeatureExtractor.eff_ext", "list.append", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.model.FeatureExtractor.eff_ext"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "list", "(", ")", "\n", "for", "s", "in", "range", "(", "c", ".", "n_scales", ")", ":", "\n", "            ", "feat_s", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "(", "c", ".", "img_size", "[", "0", "]", "//", "(", "2", "**", "s", ")", ",", "c", ".", "img_size", "[", "1", "]", "//", "(", "2", "**", "s", ")", ")", ")", "if", "s", ">", "0", "else", "x", "\n", "feat_s", "=", "self", ".", "eff_ext", "(", "feat_s", ")", "\n", "\n", "y", ".", "append", "(", "feat_s", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.model.get_cs_flow_model": [[14, 38], ["list", "list.append", "list.append", "list.append", "range", "list.append", "list.append", "list.append", "freia_funcs.ReversibleGraphNet", "freia_funcs.InputNode", "freia_funcs.InputNode", "freia_funcs.InputNode", "list.append", "list.append", "freia_funcs.OutputNode", "freia_funcs.OutputNode", "freia_funcs.OutputNode", "freia_funcs.Node", "freia_funcs.Node"], "function", ["None"], ["def", "get_cs_flow_model", "(", "input_dim", "=", "c", ".", "n_feat", ")", ":", "\n", "    ", "nodes", "=", "list", "(", ")", "\n", "nodes", ".", "append", "(", "InputNode", "(", "input_dim", ",", "c", ".", "map_size", "[", "0", "]", ",", "c", ".", "map_size", "[", "1", "]", ",", "name", "=", "'input'", ")", ")", "\n", "nodes", ".", "append", "(", "InputNode", "(", "input_dim", ",", "c", ".", "map_size", "[", "0", "]", "//", "2", ",", "c", ".", "map_size", "[", "1", "]", "//", "2", ",", "name", "=", "'input2'", ")", ")", "\n", "nodes", ".", "append", "(", "InputNode", "(", "input_dim", ",", "c", ".", "map_size", "[", "0", "]", "//", "4", ",", "c", ".", "map_size", "[", "1", "]", "//", "4", ",", "name", "=", "'input3'", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "c", ".", "n_coupling_blocks", ")", ":", "\n", "        ", "if", "k", "==", "0", ":", "\n", "            ", "node_to_permute", "=", "[", "nodes", "[", "-", "3", "]", ".", "out0", ",", "nodes", "[", "-", "2", "]", ".", "out0", ",", "nodes", "[", "-", "1", "]", ".", "out0", "]", "\n", "", "else", ":", "\n", "            ", "node_to_permute", "=", "[", "nodes", "[", "-", "1", "]", ".", "out0", ",", "nodes", "[", "-", "1", "]", ".", "out1", ",", "nodes", "[", "-", "1", "]", ".", "out2", "]", "\n", "\n", "", "nodes", ".", "append", "(", "Node", "(", "node_to_permute", ",", "ParallelPermute", ",", "{", "'seed'", ":", "k", "}", ",", "name", "=", "F'permute_{k}'", ")", ")", "\n", "nodes", ".", "append", "(", "Node", "(", "[", "nodes", "[", "-", "1", "]", ".", "out0", ",", "nodes", "[", "-", "1", "]", ".", "out1", ",", "nodes", "[", "-", "1", "]", ".", "out2", "]", ",", "parallel_glow_coupling_layer", ",", "\n", "{", "'clamp'", ":", "c", ".", "clamp", ",", "'F_class'", ":", "CrossConvolutions", ",", "\n", "'F_args'", ":", "{", "'channels_hidden'", ":", "c", ".", "fc_internal", ",", "\n", "'kernel_size'", ":", "c", ".", "kernel_sizes", "[", "k", "]", ",", "'block_no'", ":", "k", "}", "}", ",", "\n", "name", "=", "F'fc1_{k}'", ")", ")", "\n", "\n", "", "nodes", ".", "append", "(", "OutputNode", "(", "[", "nodes", "[", "-", "1", "]", ".", "out0", "]", ",", "name", "=", "'output_end0'", ")", ")", "\n", "nodes", ".", "append", "(", "OutputNode", "(", "[", "nodes", "[", "-", "2", "]", ".", "out1", "]", ",", "name", "=", "'output_end1'", ")", ")", "\n", "nodes", ".", "append", "(", "OutputNode", "(", "[", "nodes", "[", "-", "3", "]", ".", "out2", "]", ",", "name", "=", "'output_end2'", ")", ")", "\n", "nf", "=", "ReversibleGraphNet", "(", "nodes", ",", "n_jac", "=", "3", ")", "\n", "return", "nf", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.model.nf_forward": [[39, 41], ["model", "model.jacobian"], "function", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.freia_funcs.ReversibleGraphNet.jacobian"], ["", "def", "nf_forward", "(", "model", ",", "inputs", ")", ":", "\n", "    ", "return", "model", "(", "inputs", ")", ",", "model", ".", "jacobian", "(", "run_forward", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.model.save_model": [[68, 72], ["torch.save", "torch.save", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["None"], ["", "", "def", "save_model", "(", "model", ",", "filename", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "MODEL_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "MODEL_DIR", ")", "\n", "", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.model.load_model": [[74, 78], ["os.path.join", "torch.load", "torch.load"], "function", ["None"], ["", "def", "load_model", "(", "filename", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "filename", ")", "\n", "model", "=", "torch", ".", "load", "(", "path", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.FeatureDataset.__init__": [[103, 118], ["torch.utils.data.Dataset.__init__", "list", "range", "numpy.load", "utils.FeatureDataset.data.append", "numpy.load", "numpy.zeros", "os.path.join", "numpy.load", "os.path.join", "img_path.split", "len", "str"], "methods", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.Score_Observer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "\"data/features/\"", "+", "c", ".", "class_name", "+", "'/'", ",", "n_scales", "=", "c", ".", "n_scales", ",", "train", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "FeatureDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", "=", "list", "(", ")", "\n", "self", ".", "n_scales", "=", "n_scales", "\n", "self", ".", "train", "=", "train", "\n", "suffix", "=", "'train'", "if", "train", "else", "'test'", "\n", "\n", "for", "s", "in", "range", "(", "c", ".", "n_scales", ")", ":", "\n", "            ", "self", ".", "data", ".", "append", "(", "np", ".", "load", "(", "root", "+", "c", ".", "class_name", "+", "'_scale_'", "+", "str", "(", "s", ")", "+", "'_'", "+", "suffix", "+", "'.npy'", ")", ")", "\n", "\n", "", "self", ".", "labels", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "c", ".", "class_name", "+", "'_labels.npy'", ")", ")", "if", "not", "train", "else", "np", ".", "zeros", "(", "\n", "[", "len", "(", "self", ".", "data", "[", "0", "]", ")", "]", ")", "\n", "self", ".", "paths", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "c", ".", "class_name", "+", "'_image_paths.npy'", ")", ")", "\n", "self", ".", "class_names", "=", "[", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "for", "img_path", "in", "self", ".", "paths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.FeatureDataset.__len__": [[119, 121], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.FeatureDataset.__getitem__": [[122, 129], ["list", "torch.FloatTensor", "list.append"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "out", "=", "list", "(", ")", "\n", "for", "d", "in", "self", ".", "data", ":", "\n", "            ", "sample", "=", "d", "[", "index", "]", "\n", "sample", "=", "torch", ".", "FloatTensor", "(", "sample", ")", "\n", "out", ".", "append", "(", "sample", ")", "\n", "", "return", "out", ",", "self", ".", "labels", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.Score_Observer.__init__": [[156, 164], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "max_epoch", "=", "0", "\n", "self", ".", "max_score", "=", "None", "\n", "self", ".", "min_loss_epoch", "=", "0", "\n", "self", ".", "min_loss_score", "=", "0", "\n", "self", ".", "min_loss", "=", "None", "\n", "self", ".", "last", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.Score_Observer.update": [[165, 172], ["utils.Score_Observer.print_score"], "methods", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.Score_Observer.print_score"], ["", "def", "update", "(", "self", ",", "score", ",", "epoch", ",", "print_score", "=", "False", ")", ":", "\n", "        ", "self", ".", "last", "=", "score", "\n", "if", "self", ".", "max_score", "==", "None", "or", "score", ">", "self", ".", "max_score", ":", "\n", "            ", "self", ".", "max_score", "=", "score", "\n", "self", ".", "max_epoch", "=", "epoch", "\n", "", "if", "print_score", ":", "\n", "            ", "self", ".", "print_score", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.Score_Observer.print_score": [[173, 178], ["print"], "methods", ["None"], ["", "", "def", "print_score", "(", "self", ")", ":", "\n", "        ", "print", "(", "'{:s}: \\t last: {:.4f} \\t max: {:.4f} \\t epoch_max: {:d} \\t epoch_loss: {:d}'", ".", "format", "(", "self", ".", "name", ",", "self", ".", "last", ",", "\n", "self", ".", "max_score", ",", "\n", "self", ".", "max_epoch", ",", "\n", "self", ".", "min_loss_epoch", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.t2np": [[10, 13], ["tensor.cpu().data.numpy", "tensor.cpu"], "function", ["None"], ["def", "t2np", "(", "tensor", ")", ":", "\n", "    ", "'''pytorch tensor -> numpy array'''", "\n", "return", "tensor", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "if", "tensor", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.flat": [[15, 17], ["tensor.reshape"], "function", ["None"], ["", "def", "flat", "(", "tensor", ")", ":", "\n", "    ", "return", "tensor", ".", "reshape", "(", "tensor", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.concat_maps": [[19, 24], ["list", "list.append", "torch.cat", "utils.flat"], "function", ["home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.flat"], ["", "def", "concat_maps", "(", "maps", ")", ":", "\n", "    ", "flat_maps", "=", "list", "(", ")", "\n", "for", "m", "in", "maps", ":", "\n", "        ", "flat_maps", ".", "append", "(", "flat", "(", "m", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "flat_maps", ",", "dim", "=", "1", ")", "[", "...", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.get_loss": [[26, 30], ["torch.cat", "sum", "torch.mean", "z[].reshape", "range", "len", "torch.sum"], "function", ["None"], ["", "def", "get_loss", "(", "z", ",", "jac", ")", ":", "\n", "    ", "z", "=", "torch", ".", "cat", "(", "[", "z", "[", "i", "]", ".", "reshape", "(", "z", "[", "i", "]", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "for", "i", "in", "range", "(", "len", "(", "z", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "jac", "=", "sum", "(", "jac", ")", "\n", "return", "torch", ".", "mean", "(", "0.5", "*", "torch", ".", "sum", "(", "z", "**", "2", ",", "dim", "=", "(", "1", ",", ")", ")", "-", "jac", ")", "/", "z", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.cat_maps": [[32, 34], ["torch.cat", "z[].reshape", "range", "len"], "function", ["None"], ["", "def", "cat_maps", "(", "z", ")", ":", "\n", "    ", "return", "torch", ".", "cat", "(", "[", "z", "[", "i", "]", ".", "reshape", "(", "z", "[", "i", "]", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "for", "i", "in", "range", "(", "len", "(", "z", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.load_datasets": [[36, 100], ["utils.FeatureDataset", "utils.FeatureDataset", "os.path.join", "os.path.join", "os.listdir", "os.listdir.sort", "list", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "print", "exit", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "list.append", "list.append"], "function", ["None"], ["", "def", "load_datasets", "(", "dataset_path", ",", "class_name", ")", ":", "\n", "    ", "'''\n    Expected folder/file format to find anomalies of class <class_name> from dataset location <dataset_path>:\n\n    train data:\n\n            dataset_path/class_name/train/good/any_filename.png\n            dataset_path/class_name/train/good/another_filename.tif\n            dataset_path/class_name/train/good/xyz.png\n            [...]\n\n    test data:\n\n        'normal data' = non-anomalies\n\n            dataset_path/class_name/test/good/name_the_file_as_you_like_as_long_as_there_is_an_image_extension.webp\n            dataset_path/class_name/test/good/did_you_know_the_image_extension_webp?.png\n            dataset_path/class_name/test/good/did_you_know_that_filenames_may_contain_question_marks????.png\n            dataset_path/class_name/test/good/dont_know_how_it_is_with_windows.png\n            dataset_path/class_name/test/good/just_dont_use_windows_for_this.png\n            [...]\n\n        anomalies - assume there are anomaly classes 'crack' and 'curved'\n\n            dataset_path/class_name/test/crack/dat_crack_damn.png\n            dataset_path/class_name/test/crack/let_it_crack.png\n            dataset_path/class_name/test/crack/writing_docs_is_fun.png\n            [...]\n\n            dataset_path/class_name/test/curved/wont_make_a_difference_if_you_put_all_anomalies_in_one_class.png\n            dataset_path/class_name/test/curved/but_this_code_is_practicable_for_the_mvtec_dataset.png\n            [...]\n    '''", "\n", "\n", "def", "target_transform", "(", "target", ")", ":", "\n", "        ", "return", "class_perm", "[", "target", "]", "\n", "\n", "", "if", "c", ".", "pre_extracted", ":", "\n", "        ", "trainset", "=", "FeatureDataset", "(", "train", "=", "True", ")", "\n", "testset", "=", "FeatureDataset", "(", "train", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "data_dir_train", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "class_name", ",", "'train'", ")", "\n", "data_dir_test", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "class_name", ",", "'test'", ")", "\n", "\n", "classes", "=", "os", ".", "listdir", "(", "data_dir_test", ")", "\n", "if", "'good'", "not", "in", "classes", ":", "\n", "            ", "print", "(", "'There should exist a subdirectory \"good\". Read the doc of this function for further information.'", ")", "\n", "exit", "(", ")", "\n", "", "classes", ".", "sort", "(", ")", "\n", "class_perm", "=", "list", "(", ")", "\n", "class_idx", "=", "1", "\n", "for", "cl", "in", "classes", ":", "\n", "            ", "if", "cl", "==", "'good'", ":", "\n", "                ", "class_perm", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "class_perm", ".", "append", "(", "class_idx", ")", "\n", "class_idx", "+=", "1", "\n", "\n", "", "", "tfs", "=", "[", "transforms", ".", "Resize", "(", "c", ".", "img_size", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "c", ".", "norm_mean", ",", "c", ".", "norm_std", ")", "]", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "tfs", ")", "\n", "\n", "trainset", "=", "ImageFolder", "(", "data_dir_train", ",", "transform", "=", "transform_train", ")", "\n", "testset", "=", "ImageFolder", "(", "data_dir_test", ",", "transform", "=", "transform_train", ",", "target_transform", "=", "target_transform", ")", "\n", "", "return", "trainset", ",", "testset", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.make_dataloaders": [[131, 137], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "make_dataloaders", "(", "trainset", ",", "testset", ")", ":", "\n", "    ", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "pin_memory", "=", "True", ",", "batch_size", "=", "c", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "pin_memory", "=", "True", ",", "batch_size", "=", "c", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ")", "\n", "return", "trainloader", ",", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.marco-rudolph_cs-flow.None.utils.preprocess_batch": [[139, 151], ["range", "labels.to.to", "inputs.view.view", "len", "inputs[].to", "inputs.view.to", "labels.to.to"], "function", ["None"], ["", "def", "preprocess_batch", "(", "data", ")", ":", "\n", "    ", "'''move data to device and reshape image'''", "\n", "if", "c", ".", "pre_extracted", ":", "\n", "        ", "inputs", ",", "labels", "=", "data", "\n", "for", "i", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "            ", "inputs", "[", "i", "]", "=", "inputs", "[", "i", "]", ".", "to", "(", "c", ".", "device", ")", "\n", "", "labels", "=", "labels", ".", "to", "(", "c", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "inputs", ",", "labels", "=", "data", "\n", "inputs", ",", "labels", "=", "inputs", ".", "to", "(", "c", ".", "device", ")", ",", "labels", ".", "to", "(", "c", ".", "device", ")", "\n", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "*", "inputs", ".", "shape", "[", "-", "3", ":", "]", ")", "\n", "", "return", "inputs", ",", "labels", "\n", "\n"]]}