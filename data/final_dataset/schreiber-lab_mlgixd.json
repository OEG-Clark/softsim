{"home.repos.pwc.inspect_result.schreiber-lab_mlgixd.None.setup.read_file": [[7, 10], ["open", "f.read", "pathlib.Path"], "function", ["None"], ["def", "read_file", "(", "filename", ":", "str", ")", "->", "str", ":", "\n", "    ", "with", "open", "(", "Path", "(", "__file__", ")", ".", "parent", "/", "filename", ",", "mode", "=", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "return", "f", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.None.setup.get_package_info": [[12, 18], ["open", "exec", "str", "f.read", "pathlib.Path"], "function", ["None"], ["", "", "def", "get_package_info", "(", "package_name", ":", "str", ")", "->", "dict", ":", "\n", "    ", "package_info_dict", "=", "{", "}", "\n", "with", "open", "(", "str", "(", "Path", "(", "__file__", ")", ".", "parent", "/", "'src'", "/", "package_name", "/", "'package_info.py'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "exec", "(", "f", ".", "read", "(", ")", ",", "{", "}", ",", "package_info_dict", ")", "\n", "\n", "", "return", "package_info_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config._BaseConfig.__post_init__": [[35, 42], ["config._BaseConfig.__annotations__.items", "getattr", "isinstance", "getattr", "isinstance", "config._get_package_obj", "setattr"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config._get_package_obj"], ["    ", "def", "__post_init__", "(", "self", ")", ":", "\n", "        ", "for", "conf_name", ",", "conf_type", "in", "self", ".", "__annotations__", ".", "items", "(", ")", ":", "\n", "            ", "value", "=", "getattr", "(", "self", ",", "conf_name", ")", "\n", "if", "conf_type", "==", "type", "and", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "                ", "new_value", "=", "getattr", "(", "_get_package_obj", "(", ")", ",", "value", ",", "value", ")", "\n", "if", "isinstance", "(", "new_value", ",", "type", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "conf_name", ",", "new_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config._BaseConfig.asdict": [[43, 50], ["dataclasses.asdict", "config._BaseConfig.__annotations__.items", "isinstance"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.asdict"], ["", "", "", "", "def", "asdict", "(", "self", ")", ":", "\n", "        ", "data_dict", "=", "asdict", "(", "self", ")", "\n", "for", "conf_name", ",", "conf_type", "in", "self", ".", "__annotations__", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "data_dict", "[", "conf_name", "]", ",", "type", ")", ":", "\n", "                ", "data_dict", "[", "conf_name", "]", "=", "data_dict", "[", "conf_name", "]", ".", "__name__", "\n", "\n", "", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.GeneralConfig.asdict": [[65, 69], ["config._BaseConfig.asdict"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.asdict"], ["def", "asdict", "(", "self", ")", ":", "\n", "        ", "d", "=", "super", "(", ")", ".", "asdict", "(", ")", "\n", "d", "[", "'__version__'", "]", "=", "__version__", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.asdict": [[105, 107], ["getattr().asdict", "config.Config.__annotations__.keys", "getattr"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.asdict"], ["def", "asdict", "(", "self", ")", ":", "\n", "        ", "return", "{", "name", ":", "getattr", "(", "self", ",", "name", ")", ".", "asdict", "(", ")", "for", "name", "in", "self", ".", "__annotations__", ".", "keys", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.from_dict": [[108, 113], ["cls", "conf_type", "cls.__annotations__.items", "conf_dict.get"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "conf_dict", ":", "dict", ")", ":", "\n", "        ", "return", "cls", "(", "*", "[", "\n", "conf_type", "(", "**", "conf_dict", ".", "get", "(", "conf_name", ",", "{", "}", ")", ")", "\n", "for", "conf_name", ",", "conf_type", "in", "cls", ".", "__annotations__", ".", "items", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.load": [[115, 120], ["cls.from_dict", "open", "yaml.load", "str"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.from_dict", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.load"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "str", "(", "path", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "state_dict", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "SafeLoader", ")", "\n", "", "return", "cls", ".", "from_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.save": [[121, 124], ["open", "yaml.dump", "str", "config.Config.asdict"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.asdict"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "str", "(", "path", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "self", ".", "asdict", "(", ")", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.save_default": [[125, 136], ["Config.Config", "Config.Config.save", "Config.GeneralConfig", "Config.ModelConfig", "Config.TrainerConfig", "Config.SimMetricsConfig", "str().split", "str"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.save"], ["", "", "@", "staticmethod", "\n", "def", "save_default", "(", "path", ",", "name", ":", "str", "=", "'default'", ")", ":", "\n", "        ", "dest_path", "=", "'.'", ".", "join", "(", "str", "(", "path", ")", ".", "split", "(", "'.'", ")", "[", ":", "-", "1", "]", "+", "[", "'pt'", "]", ")", "\n", "\n", "config", "=", "Config", "(", "\n", "GeneralConfig", "(", "name", ",", "dest_path", "=", "dest_path", ")", ",", "\n", "ModelConfig", "(", ")", ",", "\n", "TrainerConfig", "(", ")", ",", "\n", "SimMetricsConfig", "(", ")", ",", "\n", ")", "\n", "config", ".", "save", "(", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config._get_package_obj": [[23, 27], ["functools.lru_cache"], "function", ["None"], ["@", "lru_cache", "(", "maxsize", "=", "1", ")", "\n", "def", "_get_package_obj", "(", ")", ":", "\n", "    ", "import", "mlgixd", "\n", "return", "mlgixd", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config._default_dict": [[29, 31], ["dataclasses.field", "copy.deepcopy"], "function", ["None"], ["", "def", "_default_dict", "(", "**", "kwargs", ")", "->", "Field", ":", "\n", "    ", "return", "field", "(", "default_factory", "=", "lambda", ":", "deepcopy", "(", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.EvaluateTime.__call__": [[28, 33], ["time.perf_counter", "tools.EvaluateTime.append", "time.perf_counter"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["    ", "@", "contextmanager", "\n", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "start", "=", "perf_counter", "(", ")", "\n", "yield", "\n", "self", ".", "append", "(", "perf_counter", "(", ")", "-", "start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.EvaluateTime.__repr__": [[34, 36], ["sum", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'EvaluateTime(total={sum(self)}, num_records={len(self)})'", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.EvaluateFPS.fps": [[39, 42], ["len", "sum"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "fps", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ")", "/", "sum", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.EvaluateFPS.print": [[43, 46], ["tools.EvaluateFPS.print"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.print"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "print", "(", "f'Average FPS = {self.fps:.1f}'", ")", "\n", "print", "(", "'Number of records ='", ",", "len", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.EvaluateFPS.__repr__": [[47, 49], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'EvaluateFPS(fps={self.fps:.1f}, num_frames={len(self)})'", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.to_np": [[51, 55], ["isinstance", "arr.detach().cpu().numpy.detach().cpu().numpy", "arr.detach().cpu().numpy.detach().cpu", "arr.detach().cpu().numpy.detach"], "function", ["None"], ["", "", "def", "to_np", "(", "arr", ")", ":", "\n", "    ", "if", "isinstance", "(", "arr", ",", "Tensor", ")", ":", "\n", "        ", "arr", "=", "arr", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.to_t": [[57, 61], ["isinstance", "torch.tensor"], "function", ["None"], ["", "def", "to_t", "(", "t", ",", "*", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "if", "isinstance", "(", "t", ",", "Tensor", ")", ":", "\n", "        ", "return", "t", "\n", "", "return", "torch", ".", "tensor", "(", "t", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.tensor_size": [[63, 66], ["print", "t.element_size", "t.nelement", "tools.get_size_str"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.print", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.get_size_str"], ["", "def", "tensor_size", "(", "t", ")", ":", "\n", "    ", "size", "=", "t", ".", "element_size", "(", ")", "*", "t", ".", "nelement", "(", ")", "\n", "print", "(", "get_size_str", "(", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.get_size_str": [[68, 76], ["None"], "function", ["None"], ["", "def", "get_size_str", "(", "n_bytes", ")", ":", "\n", "    ", "if", "n_bytes", ">=", "1000", "**", "3", ":", "\n", "        ", "size_str", "=", "f'{(n_bytes / 1000 ** 3):.2f} Gb'", "\n", "", "elif", "n_bytes", ">=", "1000", "**", "2", ":", "\n", "        ", "size_str", "=", "f'{(n_bytes / 1000 ** 2):.2f} Mb'", "\n", "", "else", ":", "\n", "        ", "size_str", "=", "f'{(n_bytes / 1000):.2f} Kb'", "\n", "", "return", "size_str", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.get_params_num": [[78, 80], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "get_params_num", "(", "model", ":", "Module", ")", "->", "int", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.get_model_size": [[82, 84], ["tools.get_size_str", "tools.get_params_num"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.get_size_str", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.get_params_num"], ["", "def", "get_model_size", "(", "model", ":", "Module", ")", "->", "str", ":", "\n", "    ", "return", "get_size_str", "(", "get_params_num", "(", "model", ")", "*", "4", ")", "# 32-bit floating number == 4 bytes", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.run.run": [[24, 36], ["warnings.filterwarnings", "run._parse_config_args", "config.Config.load", "run.run_from_config", "config.Config.save_default"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.run._parse_config_args", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.load", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.run.run_from_config", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.save_default"], ["def", "run", "(", ")", ":", "\n", "    ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ",", "category", "=", "UserWarning", ")", "\n", "\n", "args_dict", "=", "_parse_config_args", "(", ")", "\n", "\n", "if", "args_dict", "[", "'generate'", "]", ":", "\n", "        ", "Config", ".", "save_default", "(", "args_dict", "[", "'config_path'", "]", ")", "\n", "return", "\n", "\n", "", "config", "=", "Config", ".", "load", "(", "args_dict", "[", "'config_path'", "]", ")", "\n", "\n", "run_from_config", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.run.run_from_config": [[38, 89], ["logging.basicConfig", "logging.getLogger", "ml.init_model_from_config", "logging.getLogger.info", "simulations.SimDataset", "logging.getLogger.info", "config.asdict", "ml.init_model_from_config.get_params_num", "ml.init_model_from_config.get_model_size", "logging.getLogger.info", "ml.train_from_config", "logging.getLogger.info", "state_dict.update", "logging.info", "ml.init_model_from_config.evaluate_fps", "logging.getLogger.info", "state_dict.update", "logging.getLogger.info", "pathlib.Path", "torch.save", "ml.train_from_config.state_dict", "list", "metrics.get_sim_metrics_from_config", "pathlib.Path.parent.is_dir", "pathlib.Path.parent.mkdir", "str"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.init_model_from_config.init_model_from_config", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.asdict", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.get_params_num", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.get_model_size", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.train_from_config.train_from_config", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.evaluate_fps", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.save", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.state_dict", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.from_config.get_sim_metrics_from_config"], ["", "def", "run_from_config", "(", "config", ":", "Config", ")", ":", "\n", "    ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ",", "format", "=", "f'{config.general.name}: %(asctime)s %(message)s'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "state_dict", "=", "{", "'config'", ":", "config", ".", "asdict", "(", ")", "}", "\n", "\n", "model", "=", "init_model_from_config", "(", "config", ")", "\n", "\n", "logger", ".", "info", "(", "f'Model is loaded: {model.__class__.__name__}'", ")", "\n", "\n", "if", "config", ".", "general", ".", "save_model_size", ":", "\n", "        ", "state_dict", "[", "'num_parameters'", "]", "=", "model", ".", "get_params_num", "(", ")", "\n", "state_dict", "[", "'model_size'", "]", "=", "model", ".", "get_model_size", "(", ")", "\n", "\n", "", "dset", "=", "SimDataset", "(", ")", "\n", "\n", "if", "config", ".", "general", ".", "train", ":", "\n", "        ", "logger", ".", "info", "(", "'Start training'", ")", "\n", "\n", "trainer", "=", "train_from_config", "(", "model", ",", "dset", ",", "config", ")", "\n", "\n", "logger", ".", "info", "(", "'Training is completed.'", ")", "\n", "state_dict", ".", "update", "(", "trainer", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "if", "config", ".", "general", ".", "evaluate_fps", ":", "\n", "        ", "logging", ".", "info", "(", "'Evaluate FPS'", ")", "\n", "\n", "evaluate_fps", "=", "model", ".", "evaluate_fps", "(", "dset", ",", "config", ".", "general", ".", "evaluate_fps", ")", "\n", "\n", "state_dict", "[", "'evaluate_fps'", "]", "=", "{", "\n", "'records'", ":", "list", "(", "evaluate_fps", ")", ",", "\n", "'fps'", ":", "evaluate_fps", ".", "fps", "\n", "}", "\n", "\n", "", "if", "config", ".", "general", ".", "test", ":", "\n", "        ", "logger", ".", "info", "(", "'Start calculating metrics'", ")", "\n", "\n", "state_dict", ".", "update", "(", "get_sim_metrics_from_config", "(", "model", ",", "dset", ".", "sim", ",", "config", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'Metrics are calculated.'", ")", "\n", "\n", "", "if", "config", ".", "general", ".", "save", ":", "\n", "\n", "        ", "dest_path", "=", "Path", "(", "config", ".", "general", ".", "dest_path", ")", "\n", "\n", "if", "not", "dest_path", ".", "parent", ".", "is_dir", "(", ")", ":", "\n", "            ", "dest_path", ".", "parent", ".", "mkdir", "(", ")", "\n", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "str", "(", "dest_path", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "f'Successfully saved to {config.general.dest_path}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.run._parse_config_args": [[91, 102], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pathlib.Path"], "function", ["None"], ["", "def", "_parse_config_args", "(", ")", "->", "dict", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Train, test & save results for GIXD detectron model.'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "type", "=", "str", ",", "help", "=", "'Path to the configuration file'", ")", "\n", "parser", ".", "add_argument", "(", "'--generate'", ",", "'-G'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Save the default config to the provided path'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args_dict", "=", "{", "\n", "'config_path'", ":", "Path", "(", "args", ".", "config", ")", ",", "\n", "'generate'", ":", "args", ".", "generate", ",", "\n", "}", "\n", "\n", "return", "args_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors.FixedAnchorsGenerator.__init__": [[14, 28], ["fixed_anchors._convert_feature_map_sizes", "fixed_anchors.FixedAnchorsGenerator._generate_anchors", "len", "len", "len", "len", "set"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors._convert_feature_map_sizes", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors.FixedAnchorsGenerator._generate_anchors"], ["    ", "def", "__init__", "(", "self", ",", "\n", "height_weight_per_feature", ":", "Tuple", "[", "Tuple", "[", "Tuple", "[", "float", ",", "float", "]", ",", "...", "]", ",", "...", "]", ",", "\n", "img_shape", ":", "tuple", "=", "(", "512", ",", "512", ")", ",", "\n", "feature_map_sizes", ":", "Tuple", "[", "int", ",", "...", "]", "or", "Tuple", "[", "Tuple", "[", "int", ",", "int", "]", ",", "...", "]", "=", "(", "(", "32", ",", "128", ")", ",", "(", "16", ",", "128", ")", ")", ",", "\n", ")", ":", "\n", "\n", "        ", "assert", "len", "(", "height_weight_per_feature", ")", "==", "len", "(", "feature_map_sizes", ")", "\n", "num_anchors_per_location", "=", "[", "len", "(", "pairs", ")", "for", "pairs", "in", "height_weight_per_feature", "]", "\n", "assert", "len", "(", "set", "(", "num_anchors_per_location", ")", ")", "==", "1", ",", "'Different anchors number per location is not supported'", "\n", "\n", "self", ".", "height_weight_per_feature", "=", "height_weight_per_feature", "\n", "self", ".", "img_shape", "=", "img_shape", "\n", "self", ".", "feature_map_sizes", "=", "_convert_feature_map_sizes", "(", "feature_map_sizes", ")", "\n", "self", ".", "anchors", "=", "self", ".", "_generate_anchors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors.FixedAnchorsGenerator.set_img_shape": [[29, 33], ["fixed_anchors._convert_feature_map_sizes", "fixed_anchors.FixedAnchorsGenerator.update_anchors"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors._convert_feature_map_sizes", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors.FixedAnchorsGenerator.update_anchors"], ["", "def", "set_img_shape", "(", "self", ",", "img_shape", ":", "Tuple", "[", "int", ",", "int", "]", ",", "feature_map_sizes", ":", "Tuple", "[", "Tuple", "[", "int", ",", "int", "]", ",", "...", "]", ")", ":", "\n", "        ", "self", ".", "img_shape", "=", "img_shape", "\n", "self", ".", "feature_map_sizes", "=", "_convert_feature_map_sizes", "(", "feature_map_sizes", ")", "\n", "self", ".", "update_anchors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors.FixedAnchorsGenerator.__call__": [[34, 36], ["fixed_anchors.FixedAnchorsGenerator.get_anchors"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors.FixedAnchorsGenerator.get_anchors"], ["", "def", "__call__", "(", "self", ",", "img_num", ":", "int", ",", "device", ":", "torch", ".", "device", ")", ":", "\n", "        ", "return", "self", ".", "get_anchors", "(", "img_num", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors.FixedAnchorsGenerator.num_anchors_per_location": [[37, 39], ["len"], "methods", ["None"], ["", "def", "num_anchors_per_location", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "height_weight_per_feature", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors.FixedAnchorsGenerator.update_anchors": [[40, 42], ["fixed_anchors.FixedAnchorsGenerator._generate_anchors"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors.FixedAnchorsGenerator._generate_anchors"], ["", "def", "update_anchors", "(", "self", ")", ":", "\n", "        ", "self", ".", "anchors", "=", "self", ".", "_generate_anchors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors.FixedAnchorsGenerator._generate_anchors": [[43, 66], ["zip", "torch.cat", "torch.device", "fixed_anchors._generate_base_anchors", "fixed_anchors._generate_anchor_shifts", "anchors.append", "_generate_anchor_shifts.view", "_generate_base_anchors.view"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.device", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors._generate_base_anchors", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors._generate_anchor_shifts", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "def", "_generate_anchors", "(", "self", ")", ":", "\n", "        ", "device", ",", "dtype", "=", "torch", ".", "device", "(", "'cpu'", ")", ",", "torch", ".", "float32", "\n", "\n", "anchors", "=", "[", "]", "\n", "\n", "strides_width", "=", "[", "self", ".", "img_shape", "[", "1", "]", "//", "s", "[", "1", "]", "for", "s", "in", "self", ".", "feature_map_sizes", "]", "\n", "strides_height", "=", "[", "self", ".", "img_shape", "[", "0", "]", "//", "s", "[", "0", "]", "for", "s", "in", "self", ".", "feature_map_sizes", "]", "\n", "\n", "for", "stride_width", ",", "stride_height", ",", "f_size", ",", "height_weight_pairs", "in", "zip", "(", "\n", "strides_width", ",", "\n", "strides_height", ",", "\n", "self", ".", "feature_map_sizes", ",", "\n", "self", ".", "height_weight_per_feature", "\n", ")", ":", "\n", "            ", "base_anchors", "=", "_generate_base_anchors", "(", "height_weight_pairs", ",", "device", "=", "device", ",", "dtype", "=", "dtype", ")", "\n", "\n", "shifts", "=", "_generate_anchor_shifts", "(", "stride_width", ",", "stride_height", ",", "f_size", ",", "dtype", ",", "device", ")", "\n", "\n", "anchors", ".", "append", "(", "\n", "(", "shifts", ".", "view", "(", "-", "1", ",", "1", ",", "4", ")", "+", "base_anchors", ".", "view", "(", "1", ",", "-", "1", ",", "4", ")", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "anchors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors.FixedAnchorsGenerator.get_anchors": [[67, 71], ["fixed_anchors.FixedAnchorsGenerator.anchors.to", "range"], "methods", ["None"], ["", "def", "get_anchors", "(", "self", ",", "img_num", ":", "int", ",", "device", ":", "torch", ".", "device", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "        ", "if", "device", "!=", "self", ".", "anchors", ".", "device", ":", "\n", "            ", "self", ".", "anchors", "=", "self", ".", "anchors", ".", "to", "(", "device", ")", "\n", "", "return", "[", "self", ".", "anchors", "for", "_", "in", "range", "(", "img_num", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors._convert_feature_map_sizes": [[73, 75], ["isinstance"], "function", ["None"], ["", "", "def", "_convert_feature_map_sizes", "(", "feature_map_sizes", ")", ":", "\n", "    ", "return", "[", "(", "s", ",", "s", ")", "if", "isinstance", "(", "s", ",", "int", ")", "else", "s", "for", "s", "in", "feature_map_sizes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors._generate_anchor_shifts": [[77, 92], ["torch.meshgrid", "shift_x.reshape.reshape", "shift_y.reshape.reshape", "torch.stack", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "_generate_anchor_shifts", "(", "stride_width", ",", "stride_height", ",", "f_size", ",", "dtype", ",", "device", ")", ":", "\n", "    ", "shifts_x", "=", "torch", ".", "arange", "(", "\n", "0", ",", "f_size", "[", "1", "]", ",", "dtype", "=", "dtype", ",", "device", "=", "device", "\n", ")", "*", "stride_width", "\n", "\n", "shifts_y", "=", "torch", ".", "arange", "(", "\n", "0", ",", "f_size", "[", "0", "]", ",", "dtype", "=", "dtype", ",", "device", "=", "device", "\n", ")", "*", "stride_height", "\n", "\n", "shift_y", ",", "shift_x", "=", "torch", ".", "meshgrid", "(", "shifts_y", ",", "shifts_x", ")", "\n", "\n", "shift_x", "=", "shift_x", ".", "reshape", "(", "-", "1", ")", "\n", "shift_y", "=", "shift_y", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "return", "torch", ".", "stack", "(", "(", "shift_x", ",", "shift_y", ",", "shift_x", ",", "shift_y", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors._generate_base_anchors": [[94, 101], ["torch.as_tensor", "torch.stack"], "function", ["None"], ["", "def", "_generate_base_anchors", "(", "height_weight_pairs", ":", "Tuple", "[", "Tuple", "[", "float", ",", "float", "]", ",", "...", "]", ",", "\n", "device", ":", "torch", ".", "device", "=", "'cuda'", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "sizes", "=", "torch", ".", "as_tensor", "(", "height_weight_pairs", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "hs", ",", "ws", "=", "sizes", "[", ":", ",", "0", "]", ",", "sizes", "[", ":", ",", "1", "]", "\n", "base_anchors", "=", "torch", ".", "stack", "(", "[", "-", "ws", ",", "-", "hs", ",", "ws", ",", "hs", "]", ",", "dim", "=", "1", ")", "/", "2", "\n", "return", "base_anchors", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.box_predictor.TwoMLPHead.__init__": [[24, 30], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "representation_size", ":", "int", "=", "1024", ",", "slope", ":", "float", "=", "0.01", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "in_channels", ",", "representation_size", ")", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "representation_size", ",", "representation_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.box_predictor.TwoMLPHead.forward": [[31, 38], ["box_predictor.TwoMLPHead.flatten", "box_predictor.TwoMLPHead.leaky_relu", "box_predictor.TwoMLPHead.leaky_relu", "box_predictor.TwoMLPHead.fc6", "box_predictor.TwoMLPHead.fc7"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "\n", "x", "=", "self", ".", "leaky_relu", "(", "self", ".", "fc6", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "self", ".", "fc7", "(", "x", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.box_predictor.FastRCNNPredictor.__init__": [[49, 53], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cls_score", "=", "nn", ".", "Linear", "(", "in_channels", ",", "1", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Linear", "(", "in_channels", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.box_predictor.FastRCNNPredictor.forward": [[54, 63], ["x.flatten.flatten.flatten", "box_predictor.FastRCNNPredictor.cls_score", "box_predictor.FastRCNNPredictor.bbox_pred", "x.flatten.flatten.dim", "list"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "assert", "list", "(", "x", ".", "shape", "[", "2", ":", "]", ")", "==", "[", "1", ",", "1", "]", "\n", "\n", "", "x", "=", "x", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "scores", "=", "self", ".", "cls_score", "(", "x", ")", "\n", "bbox_deltas", "=", "self", ".", "bbox_pred", "(", "x", ")", "\n", "\n", "return", "scores", ",", "bbox_deltas", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.one_stage_detector.RPN.__init__": [[27, 66], ["modifiedfasterrcnn.ModifiedFasterRCNN.__init__"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ":", "'BackboneType'", ",", "\n", "height_weight_per_feature", ":", "Tuple", "[", "Tuple", "[", "Tuple", "[", "float", ",", "float", "]", ",", "...", "]", ",", "...", "]", "=", "None", ",", "\n", "img_shape", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "512", ",", "512", ")", ",", "\n", "transform_img", ":", "'TransformImg'", "=", "None", ",", "\n", "rpn_matcher", ":", "'Matcher'", "=", "None", ",", "\n", "rpn_sampler", ":", "'BalancedPositiveNegativeSampler'", "=", "None", ",", "\n", "rpn_filter", ":", "'FilterProposals'", "=", "None", ",", "\n", "rpn_head", ":", "'RPNHead'", "=", "None", ",", "\n", "anchor_generator", ":", "'FixedAnchorsGenerator'", "=", "None", ",", "\n", "rpn_reg_weight", ":", "float", "=", "10.", ",", "\n", "rpn_objectness_weight", ":", "float", "=", "1.", ",", "\n", "loss_func", "=", "None", ",", "\n", "use_box_padding", ":", "bool", "=", "False", ",", "\n", "rpn_box_similarity", "=", "box_iou", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "backbone", "=", "backbone", ",", "\n", "height_weight_per_feature", "=", "height_weight_per_feature", ",", "\n", "img_shape", "=", "img_shape", ",", "\n", "transform_img", "=", "transform_img", ",", "\n", "rpn_matcher", "=", "rpn_matcher", ",", "\n", "rpn_sampler", "=", "rpn_sampler", ",", "\n", "rpn_filter", "=", "rpn_filter", ",", "\n", "use_box_padding", "=", "use_box_padding", ",", "\n", "proposal_sampler", "=", "1", ",", "# bool(1) == True", "\n", "roi_matcher", "=", "1", ",", "\n", "roi_filter", "=", "1", ",", "\n", "rpn_head", "=", "rpn_head", ",", "\n", "anchor_generator", "=", "anchor_generator", ",", "\n", "roi_align", "=", "1", ",", "\n", "box_head", "=", "1", ",", "\n", "box_predictor", "=", "1", ",", "\n", "rpn_reg_weight", "=", "rpn_reg_weight", ",", "\n", "rpn_objectness_weight", "=", "rpn_objectness_weight", ",", "\n", "loss_func", "=", "loss_func", ",", "\n", "train_rpn", "=", "True", ",", "\n", "train_roi", "=", "False", ",", "\n", "rpn_box_similarity", "=", "rpn_box_similarity", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.one_stage_detector.RPN.default_model": [[68, 107], ["modifiedfasterrcnn.FilterProposals", "modifiedfasterrcnn.BackboneWithFPN", "cls().cuda", "modifiedfasterrcnn.VCompressResNet", "cls().cuda.load_model", "cls"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.load_model"], ["", "@", "classmethod", "\n", "def", "default_model", "(", "\n", "cls", ",", "\n", "name", ":", "str", "=", "None", ",", "\n", "pretrained", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "rpn_filter", "=", "FilterProposals", "(", "\n", "score_thresh", "=", "0.1", ",", "\n", "post_nms_top_n_test", "=", "300", ",", "\n", "nms_thresh", "=", "0.5", ",", "\n", ")", "\n", "\n", "backbone", "=", "BackboneWithFPN", "(", "\n", "VCompressResNet", "(", "\n", "channels", "=", "(", "64", ",", "128", ",", "256", ",", "256", ")", ",", "\n", "include_features_list", "=", "(", "2", ",", "3", ",", "4", ")", ",", "\n", "init_from_resnet", "=", "pretrained", ",", "\n", ")", ",", "\n", "backbone_channels", "=", "(", "128", ",", "256", ",", "256", ")", ",", "\n", "out_channels", "=", "64", ",", "\n", ")", "\n", "\n", "model", "=", "cls", "(", "\n", "backbone", ",", "\n", "height_weight_per_feature", "=", "(", "\n", "(", "(", "50", ",", "10", ")", ",", "(", "100", ",", "10", ")", ")", ",", "\n", "(", "(", "200", ",", "10", ")", ",", "(", "300", ",", "10", ")", ")", ",", "\n", "(", "(", "400", ",", "10", ")", ",", "(", "500", ",", "10", ")", ")", ",", "\n", ")", ",", "\n", "rpn_reg_weight", "=", "10", ",", "\n", "rpn_box_similarity", "=", "box_iou", ",", "\n", "rpn_filter", "=", "rpn_filter", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "name", ":", "\n", "            ", "model", ".", "load_model", "(", "name", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.one_stage_detector.RPN.forward": [[108, 112], ["one_stage_detector.RPN.get_rpn_proposals", "super().forward"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn.ModifiedFasterRCNN.get_rpn_proposals", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone.UNetBackbone.forward"], ["", "def", "forward", "(", "self", ",", "imgs", ":", "Tensor", ",", "targets", ":", "List", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "super", "(", ")", ".", "forward", "(", "imgs", ",", "targets", ")", "\n", "", "return", "self", ".", "get_rpn_proposals", "(", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn.ModifiedFasterRCNN.__init__": [[48, 152], ["super().__init__", "modifiedfasterrcnn._init_rpn_transformations", "transform_img.TransformImg", "utils.BalancedPositiveNegativeSampler", "utils.BalancedPositiveNegativeSampler", "proposal_sampler.ProposalSampler", "utils.Matcher", "utils.Matcher", "filter_proposals.FilterProposals", "filter_rois.FilterRois", "fixed_anchors.FixedAnchorsGenerator", "rpn_head.RPNHead", "roi_align_layer.RoiAlign", "box_predictor.TwoMLPHead", "box_predictor.FastRCNNPredictor", "modifiedfasterrcnn.ModifiedFasterRCNN.anchor_generator.num_anchors_per_location", "backbone.feature_map_sizes"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn._init_rpn_transformations", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors.FixedAnchorsGenerator.num_anchors_per_location", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.BackboneMixin.feature_map_sizes"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ":", "BackboneType", ",", "\n", "height_weight_per_feature", ":", "Tuple", "[", "Tuple", "[", "Tuple", "[", "float", ",", "float", "]", ",", "...", "]", ",", "...", "]", "=", "None", ",", "\n", "img_shape", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "512", ",", "512", ")", ",", "\n", "transform_img", ":", "TransformImg", "=", "None", ",", "\n", "rpn_matcher", ":", "Matcher", "=", "None", ",", "\n", "roi_matcher", ":", "Matcher", "=", "None", ",", "\n", "rpn_sampler", ":", "BalancedPositiveNegativeSampler", "=", "None", ",", "\n", "roi_sampler", ":", "BalancedPositiveNegativeSampler", "=", "None", ",", "\n", "rpn_filter", ":", "FilterProposals", "=", "None", ",", "\n", "roi_filter", ":", "FilterRois", "=", "None", ",", "\n", "rpn_head", ":", "RPNHead", "=", "None", ",", "\n", "anchor_generator", ":", "FixedAnchorsGenerator", "=", "None", ",", "\n", "roi_align", ":", "RoiAlign", "=", "None", ",", "\n", "box_head", ":", "TwoMLPHead", "=", "None", ",", "\n", "box_predictor", ":", "FastRCNNPredictor", "=", "None", ",", "\n", "max_num_per_image", ":", "int", "=", "250", ",", "\n", "representation_size", ":", "int", "=", "1024", ",", "\n", "rpn_reg_weight", ":", "float", "=", "10.", ",", "\n", "rpn_objectness_weight", ":", "float", "=", "1.", ",", "\n", "box_weight", ":", "float", "=", "10.", ",", "\n", "box_score_weight", ":", "float", "=", "1.", ",", "\n", "loss_func", "=", "None", ",", "\n", "train_rpn", ":", "bool", "=", "True", ",", "\n", "train_roi", ":", "bool", "=", "True", ",", "\n", "rpn_target_transforms", ":", "List", "[", "Callable", "[", "[", "List", "[", "Tensor", "]", "]", ",", "List", "[", "Tensor", "]", "]", "]", "=", "(", ")", ",", "\n", "use_box_padding", ":", "bool", "=", "True", ",", "\n", "proposal_sampler", ":", "ProposalSampler", "=", "None", ",", "\n", "rpn_box_similarity", "=", "box_iou", ",", "\n", "roi_box_similarity", "=", "box_iou", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "loss_weights", "=", "{", "\n", "'rpn_objectness'", ":", "rpn_objectness_weight", ",", "\n", "'rpn_box_reg'", ":", "rpn_reg_weight", ",", "\n", "'score'", ":", "box_score_weight", ",", "\n", "'box_reg'", ":", "box_weight", "\n", "}", "\n", "\n", "self", ".", "rpn_box_similarity", "=", "rpn_box_similarity", "\n", "self", ".", "roi_box_similarity", "=", "roi_box_similarity", "\n", "\n", "self", ".", "train_rpn", "=", "train_rpn", "\n", "self", ".", "train_roi", "=", "train_roi", "\n", "\n", "self", ".", "rpn_target_transforms", ":", "TransformList", "=", "_init_rpn_transformations", "(", "rpn_target_transforms", ",", "use_box_padding", ")", "\n", "\n", "self", ".", "loss_func", "=", "loss_func", "or", "calc_losses", "\n", "\n", "self", ".", "transform_img", "=", "transform_img", "or", "TransformImg", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "\n", "self", ".", "rpn_sampler", "=", "rpn_sampler", "or", "BalancedPositiveNegativeSampler", "(", "\n", "batch_size_per_image", "=", "256", ",", "positive_fraction", "=", "0.5", ")", "\n", "self", ".", "roi_sampler", "=", "roi_sampler", "or", "BalancedPositiveNegativeSampler", "(", "\n", "batch_size_per_image", "=", "128", ",", "positive_fraction", "=", "0.5", ")", "\n", "\n", "self", ".", "proposal_sampler", "=", "proposal_sampler", "or", "ProposalSampler", "(", ")", "\n", "\n", "self", ".", "rpn_matcher", "=", "rpn_matcher", "or", "Matcher", "(", "\n", "high_threshold", "=", "0.34", ",", "low_threshold", "=", "0.15", ",", "allow_low_quality_matches", "=", "True", "\n", ")", "\n", "self", ".", "roi_matcher", "=", "roi_matcher", "or", "Matcher", "(", "\n", "high_threshold", "=", "0.3", ",", "low_threshold", "=", "0.01", ",", "allow_low_quality_matches", "=", "False", "\n", ")", "\n", "\n", "self", ".", "_img_shape", "=", "img_shape", "\n", "\n", "self", ".", "rpn_filter", "=", "rpn_filter", "or", "FilterProposals", "(", "\n", "pre_nms_top_n_train", "=", "2000", ",", "\n", "pre_nms_top_n_test", "=", "1000", ",", "\n", "post_nms_top_n_train", "=", "2000", ",", "\n", "post_nms_top_n_test", "=", "1000", ",", "\n", "nms_thresh", "=", "0.9", ",", "\n", "score_thresh", "=", "0.", ",", "\n", "min_size", "=", "1e-3", ",", "\n", "img_shape", "=", "img_shape", "\n", ")", "\n", "\n", "self", ".", "roi_filter", "=", "roi_filter", "or", "FilterRois", "(", "\n", "nms_thresh", "=", "0.5", ",", "\n", "score_thresh", "=", "0.05", ",", "\n", "min_size", "=", "1e-3", ",", "\n", "max_num_per_image", "=", "max_num_per_image", ",", "\n", "img_shape", "=", "img_shape", "\n", ")", "\n", "\n", "self", ".", "anchor_generator", "=", "anchor_generator", "or", "FixedAnchorsGenerator", "(", "\n", "height_weight_per_feature", "=", "height_weight_per_feature", ",", "\n", "img_shape", "=", "img_shape", ",", "\n", "feature_map_sizes", "=", "backbone", ".", "feature_map_sizes", "(", "img_shape", ")", ",", "\n", ")", "\n", "\n", "self", ".", "rpn_head", "=", "rpn_head", "or", "RPNHead", "(", "\n", "backbone", ".", "out_channels", ",", "\n", "self", ".", "anchor_generator", ".", "num_anchors_per_location", "(", ")", "\n", ")", "\n", "\n", "self", ".", "roi_align", "=", "roi_align", "or", "RoiAlign", "(", ")", "\n", "\n", "self", ".", "box_head", "=", "box_head", "or", "TwoMLPHead", "(", "self", ".", "roi_align", ".", "size", "*", "backbone", ".", "out_channels", ",", "representation_size", ")", "\n", "self", ".", "box_predictor", "=", "box_predictor", "or", "FastRCNNPredictor", "(", "representation_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn.ModifiedFasterRCNN.default_model": [[153, 190], ["fpn.BackboneWithFPN", "roi_align_layer.RoiAlign", "cls().cuda", "fpn.BackboneWithFPN.VCompressResNet", "cls().cuda.load_model", "roi_align_layer.ChooseOneMap", "fpn.BackboneWithFPN.feature_map_sizes", "cls"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.load_model", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.BackboneMixin.feature_map_sizes"], ["", "@", "classmethod", "\n", "def", "default_model", "(", "\n", "cls", ",", "\n", "name", ":", "str", "=", "None", ",", "\n", "pretrained", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "backbone", "=", "BackboneWithFPN", "(", "\n", "VCompressResNet", "(", "\n", "channels", "=", "(", "64", ",", "128", ",", "256", ",", "256", ")", ",", "\n", "include_features_list", "=", "(", "2", ",", "3", ",", "4", ")", ",", "\n", "init_from_resnet", "=", "pretrained", ",", "\n", ")", ",", "\n", "backbone_channels", "=", "(", "128", ",", "256", ",", "256", ")", ",", "\n", "out_channels", "=", "64", "\n", ")", "\n", "\n", "roi_align", "=", "RoiAlign", "(", "\n", "height", "=", "16", ",", "width", "=", "16", ",", "\n", "choose_map", "=", "ChooseOneMap", "(", "0", ",", "3", ")", ",", "\n", "feature_map_sizes", "=", "backbone", ".", "feature_map_sizes", "(", "(", "512", ",", "512", ")", ")", ",", "\n", ")", "\n", "\n", "model", "=", "cls", "(", "\n", "backbone", ",", "\n", "height_weight_per_feature", "=", "(", "\n", "(", "(", "50", ",", "10", ")", ",", "(", "100", ",", "10", ")", ")", ",", "\n", "(", "(", "200", ",", "10", ")", ",", "(", "300", ",", "10", ")", ")", ",", "\n", "(", "(", "400", ",", "10", ")", ",", "(", "500", ",", "10", ")", ")", ",", "\n", ")", ",", "\n", "representation_size", "=", "32", ",", "\n", "roi_align", "=", "roi_align", ",", "\n", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "name", ":", "\n", "            ", "model", ".", "load_model", "(", "name", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn.ModifiedFasterRCNN.img_shape": [[195, 204], ["tuple", "modifiedfasterrcnn.ModifiedFasterRCNN.anchor_generator.set_img_shape", "modifiedfasterrcnn.ModifiedFasterRCNN.backbone.feature_map_sizes"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fixed_anchors.FixedAnchorsGenerator.set_img_shape", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.BackboneMixin.feature_map_sizes"], ["", "@", "img_shape", ".", "setter", "\n", "def", "img_shape", "(", "self", ",", "shape", ":", "Tuple", "[", "int", ",", "int", "]", ")", ":", "\n", "        ", "shape", "=", "tuple", "(", "shape", ")", "\n", "if", "shape", "==", "self", ".", "_img_shape", ":", "\n", "            ", "return", "\n", "", "self", ".", "_img_shape", "=", "shape", "\n", "self", ".", "anchor_generator", ".", "set_img_shape", "(", "shape", ",", "self", ".", "backbone", ".", "feature_map_sizes", "(", "shape", ")", ")", "\n", "self", ".", "rpn_filter", ".", "img_shape", "=", "shape", "\n", "self", ".", "roi_filter", ".", "img_shape", "=", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn.ModifiedFasterRCNN.get_rpn_proposals": [[205, 207], ["modifiedfasterrcnn.ModifiedFasterRCNN._get_proposals"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn.ModifiedFasterRCNN._get_proposals"], ["", "def", "get_rpn_proposals", "(", "self", ",", "imgs", ":", "Tensor", ",", "apply_filter", ":", "bool", "=", "True", ")", ":", "\n", "        ", "return", "self", ".", "_get_proposals", "(", "imgs", ",", "apply_rpn_filter", "=", "apply_filter", ",", "get_rpn_proposals", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn.ModifiedFasterRCNN.get_roi_proposals": [[208, 215], ["isinstance", "modifiedfasterrcnn.ModifiedFasterRCNN._get_proposals"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn.ModifiedFasterRCNN._get_proposals"], ["", "def", "get_roi_proposals", "(", "self", ",", "imgs", ":", "Tensor", ",", "\n", "apply_rpn_filter", ":", "bool", "=", "True", ",", "\n", "apply_roi_filter", ":", "bool", "=", "True", ",", "\n", "proposals", ":", "List", "[", "Tensor", "]", "or", "Tensor", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "proposals", ",", "Tensor", ")", ":", "\n", "            ", "proposals", "=", "[", "proposals", "]", "\n", "", "return", "self", ".", "_get_proposals", "(", "imgs", ",", "apply_rpn_filter", ",", "apply_roi_filter", ",", "False", ",", "proposals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn.ModifiedFasterRCNN._get_proposals": [[216, 266], ["torch.no_grad", "modifiedfasterrcnn.ModifiedFasterRCNN.transform_img", "modifiedfasterrcnn.ModifiedFasterRCNN.backbone", "modifiedfasterrcnn.ModifiedFasterRCNN.roi_align", "modifiedfasterrcnn.ModifiedFasterRCNN.box_head", "modifiedfasterrcnn.ModifiedFasterRCNN.box_predictor", "encode_boxes.decode_boxes", "modifiedfasterrcnn.ModifiedFasterRCNN.anchor_generator", "modifiedfasterrcnn.ModifiedFasterRCNN.rpn_head", "encode_boxes.decode_boxes().view", "torch.cat", "modifiedfasterrcnn.ModifiedFasterRCNN.roi_filter", "bool", "modifiedfasterrcnn.ModifiedFasterRCNN.rpn_filter", "scores.view", "encode_boxes.decode_boxes.split", "scores.view().split", "encode_boxes.decode_boxes", "rpn_proposals.split", "torch.sigmoid().split", "p.view", "s.view", "torch.cat", "scores.view", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.encode_boxes.decode_boxes", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.encode_boxes.decode_boxes"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_get_proposals", "(", "self", ",", "\n", "imgs", ":", "Tensor", ",", "\n", "apply_rpn_filter", ":", "bool", "=", "True", ",", "\n", "apply_roi_filter", ":", "bool", "=", "True", ",", "\n", "get_rpn_proposals", ":", "bool", "=", "False", ",", "\n", "proposals", ":", "List", "[", "Tensor", "]", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "assert", "not", "(", "get_rpn_proposals", "and", "bool", "(", "proposals", ")", ")", "\n", "\n", "num_images", ":", "int", "=", "imgs", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "img_shape", "=", "imgs", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "imgs", "=", "self", ".", "transform_img", "(", "imgs", ")", "\n", "\n", "features", ":", "List", "[", "Tensor", "]", "=", "self", ".", "backbone", "(", "imgs", ")", "\n", "\n", "if", "not", "proposals", ":", "\n", "\n", "            ", "anchors", "=", "self", ".", "anchor_generator", "(", "num_images", ",", "imgs", ".", "device", ")", "\n", "\n", "objectness", ",", "bbox_reg", ",", "num_anchors_per_level", "=", "self", ".", "rpn_head", "(", "features", ")", "\n", "\n", "rpn_proposals", ":", "Tensor", "=", "decode_boxes", "(", "bbox_reg", ",", "torch", ".", "cat", "(", "anchors", ")", ")", ".", "view", "(", "num_images", ",", "-", "1", ",", "4", ")", "\n", "\n", "if", "apply_rpn_filter", ":", "\n", "                ", "proposals", ",", "scores", "=", "self", ".", "rpn_filter", "(", "rpn_proposals", ",", "objectness", ",", "num_anchors_per_level", ")", "\n", "", "else", ":", "\n", "                ", "proposals", ",", "scores", "=", "rpn_proposals", ".", "split", "(", "1", ")", ",", "torch", ".", "sigmoid", "(", "objectness", ")", ".", "split", "(", "1", ")", "\n", "proposals", "=", "[", "p", ".", "view", "(", "-", "1", ",", "4", ")", "for", "p", "in", "proposals", "]", "\n", "scores", "=", "[", "s", ".", "view", "(", "-", "1", ")", "for", "s", "in", "scores", "]", "\n", "\n", "", "if", "get_rpn_proposals", ":", "\n", "                ", "return", "proposals", ",", "scores", "\n", "\n", "", "", "num_boxes_per_image", "=", "[", "p", ".", "shape", "[", "0", "]", "for", "p", "in", "proposals", "]", "\n", "\n", "box_features", "=", "self", ".", "roi_align", "(", "features", ",", "proposals", ")", "\n", "box_features", "=", "self", ".", "box_head", "(", "box_features", ")", "\n", "scores", ",", "box_regression", "=", "self", ".", "box_predictor", "(", "box_features", ")", "\n", "\n", "predicted_boxes", "=", "decode_boxes", "(", "box_regression", ",", "torch", ".", "cat", "(", "proposals", ")", ")", "\n", "\n", "if", "apply_roi_filter", ":", "\n", "            ", "boxes", ",", "scores", "=", "self", ".", "roi_filter", "(", "predicted_boxes", ",", "scores", ".", "view", "(", "-", "1", ")", ",", "num_boxes_per_image", ")", "\n", "", "else", ":", "\n", "            ", "boxes", ",", "scores", "=", "predicted_boxes", ".", "split", "(", "num_boxes_per_image", ")", ",", "scores", ".", "view", "(", "-", "1", ")", ".", "split", "(", "num_boxes_per_image", ")", "\n", "", "return", "boxes", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn.ModifiedFasterRCNN.forward": [[267, 320], ["modifiedfasterrcnn.ModifiedFasterRCNN.transform_img", "modifiedfasterrcnn.ModifiedFasterRCNN.backbone", "modifiedfasterrcnn.ModifiedFasterRCNN.anchor_generator", "modifiedfasterrcnn.ModifiedFasterRCNN.rpn_head", "encode_boxes.decode_boxes().view", "modifiedfasterrcnn.ModifiedFasterRCNN.rpn_filter", "modifiedfasterrcnn.ModifiedFasterRCNN.roi_align", "modifiedfasterrcnn.ModifiedFasterRCNN.box_head", "modifiedfasterrcnn.ModifiedFasterRCNN.box_predictor", "encode_boxes.decode_boxes", "modifiedfasterrcnn.ModifiedFasterRCNN.roi_filter", "modifiedfasterrcnn.ModifiedFasterRCNN.rpn_target_transforms", "losses.update", "objectness.detach", "modifiedfasterrcnn.ModifiedFasterRCNN.proposal_sampler", "losses.update", "torch.cat", "scores.view", "modifiedfasterrcnn.ModifiedFasterRCNN.calc_rpn_losses", "encode_boxes.decode_boxes", "modifiedfasterrcnn.ModifiedFasterRCNN.calc_roi_losses", "bbox_reg.detach", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.encode_boxes.decode_boxes", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn.ModifiedFasterRCNN.calc_rpn_losses", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.encode_boxes.decode_boxes", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn.ModifiedFasterRCNN.calc_roi_losses"], ["", "def", "forward", "(", "self", ",", "\n", "imgs", ":", "Tensor", ",", "\n", "targets", ":", "List", "[", "Tensor", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "num_images", ":", "int", "=", "imgs", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "img_shape", "=", "imgs", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "losses", ":", "Dict", "[", "str", ",", "Tensor", "]", "=", "{", "}", "\n", "\n", "assert", "num_images", ">", "0", "\n", "if", "self", ".", "training", ":", "\n", "            ", "assert", "targets", "is", "not", "None", "\n", "\n", "", "imgs", "=", "self", ".", "transform_img", "(", "imgs", ")", "\n", "\n", "features", ":", "List", "[", "Tensor", "]", "=", "self", ".", "backbone", "(", "imgs", ")", "\n", "\n", "anchors", ":", "List", "[", "Tensor", "]", "=", "self", ".", "anchor_generator", "(", "num_images", ",", "imgs", ".", "device", ")", "\n", "\n", "objectness", ",", "bbox_reg", ",", "num_anchors_per_level", "=", "self", ".", "rpn_head", "(", "features", ")", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "train_rpn", ":", "\n", "            ", "rpn_targets", "=", "self", ".", "rpn_target_transforms", "(", "targets", ")", "\n", "losses", ".", "update", "(", "self", ".", "calc_rpn_losses", "(", "anchors", ",", "rpn_targets", ",", "objectness", ",", "bbox_reg", ")", ")", "\n", "if", "not", "self", ".", "train_roi", ":", "\n", "                ", "return", "losses", "\n", "\n", "# detach proposals!", "\n", "", "", "rpn_proposals", ":", "Tensor", "=", "decode_boxes", "(", "bbox_reg", ".", "detach", "(", ")", ",", "torch", ".", "cat", "(", "anchors", ")", ")", ".", "view", "(", "num_images", ",", "-", "1", ",", "4", ")", "\n", "proposals", ":", "List", "[", "Tensor", "]", "\n", "roi_scores", ":", "List", "[", "Tensor", "]", "\n", "\n", "proposals", ",", "roi_scores", "=", "self", ".", "rpn_filter", "(", "rpn_proposals", ",", "objectness", ".", "detach", "(", ")", ",", "num_anchors_per_level", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "proposals", "=", "self", ".", "proposal_sampler", "(", "proposals", ",", "targets", ",", "anchors", "[", "0", "]", ")", "\n", "\n", "", "num_boxes_per_image", ":", "List", "[", "int", "]", "=", "[", "p", ".", "shape", "[", "0", "]", "for", "p", "in", "proposals", "]", "\n", "\n", "box_features", ":", "Tensor", "=", "self", ".", "roi_align", "(", "features", ",", "proposals", ")", "\n", "box_features", "=", "self", ".", "box_head", "(", "box_features", ")", "\n", "scores", ",", "box_regression", "=", "self", ".", "box_predictor", "(", "box_features", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "losses", ".", "update", "(", "self", ".", "calc_roi_losses", "(", "proposals", ",", "targets", ",", "scores", ",", "box_regression", ")", ")", "\n", "return", "losses", "\n", "\n", "", "predicted_boxes", "=", "decode_boxes", "(", "box_regression", ",", "torch", ".", "cat", "(", "proposals", ")", ")", "\n", "\n", "boxes", ",", "scores", "=", "self", ".", "roi_filter", "(", "predicted_boxes", ",", "scores", ".", "view", "(", "-", "1", ")", ",", "num_boxes_per_image", ")", "\n", "\n", "return", "boxes", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn.ModifiedFasterRCNN.calc_rpn_losses": [[321, 337], ["modifiedfasterrcnn.ModifiedFasterRCNN.loss_func"], "methods", ["None"], ["", "def", "calc_rpn_losses", "(", "self", ",", "\n", "anchors", ":", "List", "[", "Tensor", "]", ",", "\n", "targets", ":", "List", "[", "Tensor", "]", ",", "\n", "objectness", ":", "Tensor", ",", "\n", "bbox_reg", ":", "Tensor", ")", "->", "Dict", "[", "str", ",", "Tensor", "]", ":", "\n", "\n", "        ", "rpn_objectness_loss", ",", "rpn_box_reg_loss", "=", "self", ".", "loss_func", "(", "\n", "self", ".", "rpn_matcher", ",", "self", ".", "rpn_sampler", ",", "\n", "anchors", ",", "targets", ",", "objectness", ",", "bbox_reg", ",", "\n", "self", ".", "rpn_box_similarity", "\n", ")", "\n", "losses", ":", "Dict", "[", "str", ",", "Tensor", "]", "=", "{", "\n", "'rpn_objectness'", ":", "rpn_objectness_loss", "*", "self", ".", "loss_weights", "[", "'rpn_objectness'", "]", ",", "\n", "'rpn_box_reg'", ":", "rpn_box_reg_loss", "*", "self", ".", "loss_weights", "[", "'rpn_box_reg'", "]", "\n", "}", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn.ModifiedFasterRCNN.calc_roi_losses": [[338, 354], ["modifiedfasterrcnn.ModifiedFasterRCNN.loss_func"], "methods", ["None"], ["", "def", "calc_roi_losses", "(", "self", ",", "\n", "proposals", ":", "List", "[", "Tensor", "]", ",", "\n", "targets", ":", "List", "[", "Tensor", "]", ",", "\n", "scores", ":", "Tensor", ",", "\n", "bbox_reg", ":", "Tensor", "\n", ")", ":", "\n", "        ", "score_loss", ",", "box_reg_loss", "=", "self", ".", "loss_func", "(", "\n", "self", ".", "roi_matcher", ",", "self", ".", "roi_sampler", ",", "\n", "proposals", ",", "targets", ",", "scores", ",", "bbox_reg", ",", "\n", "self", ".", "roi_box_similarity", "\n", ")", "\n", "losses", ":", "Dict", "[", "str", ",", "Tensor", "]", "=", "{", "\n", "'score'", ":", "score_loss", "*", "self", ".", "loss_weights", "[", "'score'", "]", ",", "\n", "'box_reg'", ":", "box_reg_loss", "*", "self", ".", "loss_weights", "[", "'box_reg'", "]", "\n", "}", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.modifiedfasterrcnn._init_rpn_transformations": [[356, 361], ["list", "transform_list.TransformList", "list.insert", "transform_boxes.BoxWidthPadding"], "function", ["None"], ["", "", "def", "_init_rpn_transformations", "(", "rpn_target_transformations", ":", "list", ",", "use_box_padding", ":", "bool", ")", ":", "\n", "    ", "transforms", "=", "list", "(", "rpn_target_transformations", ")", "\n", "if", "use_box_padding", ":", "\n", "        ", "transforms", ".", "insert", "(", "0", ",", "BoxWidthPadding", "(", ")", ")", "\n", "", "return", "TransformList", "(", "transforms", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.filter_rois.FilterRois.__init__": [[22, 35], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "nms_thresh", "=", "0.7", ",", "\n", "score_thresh", "=", "0.05", ",", "\n", "min_size", ":", "float", "=", "1e-3", ",", "\n", "max_num_per_image", ":", "int", "=", "250", ",", "\n", "img_shape", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "512", ",", "512", ")", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "img_shape", "=", "img_shape", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "score_thresh", "=", "score_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "self", ".", "max_num_per_image", "=", "max_num_per_image", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.filter_rois.FilterRois.forward": [[36, 86], ["len", "utils.get_levels", "torchvision.ops.clip_boxes_to_image", "torchvision.ops.remove_small_boxes", "torchvision.ops.batched_nms", "torch.sigmoid", "range", "range"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.get_levels"], ["", "def", "forward", "(", "self", ",", "\n", "proposals", ":", "Tensor", ",", "\n", "scores", ":", "Tensor", ",", "\n", "num_boxes_per_img", ":", "List", "[", "int", "]", "\n", ")", "->", "Tuple", "[", "List", "[", "Tensor", "]", ",", "List", "[", "Tensor", "]", "]", ":", "\n", "        ", "\"\"\"\n        Filters final roi predictions by stages:\n            1. Remove low scoring boxes (score < self.score_thresh).\n            2. Remove small boxes (weight or height < self.min_size).\n            3. Filter by nms (iou >= self.nms_thresh)\n            4. Keep top self.max_num_per_image rois with respect to scores.\n\n        Total number of proposals = P = sum(num_boxes_per_img)\n\n        Args:\n            proposals (Tensor[P, 4]): Detected boxes.\n            scores (Tensor[P]): Confidence scores.\n            num_boxes_per_img (List[int]): Number of boxes per image.\n\n        Returns:\n            Tuple[List[Tensor[N, 4]], List[Tensor[N]]]: filtered_boxes, filtered_scores\n        \"\"\"", "\n", "\n", "num_images", ":", "int", "=", "len", "(", "num_boxes_per_img", ")", "\n", "img_indices", "=", "get_levels", "(", "0", ",", "num_boxes_per_img", ",", "proposals", ".", "device", ")", "\n", "score_prob", "=", "torch", ".", "sigmoid", "(", "scores", ")", "*", "2", "-", "1", "\n", "\n", "# Clip proposals to image shape", "\n", "proposals", "=", "clip_boxes_to_image", "(", "proposals", ",", "self", ".", "img_shape", ")", "\n", "\n", "# Remove low scoring boxes (score < self.score_thresh).", "\n", "keep", "=", "score_prob", ">=", "self", ".", "score_thresh", "\n", "img_indices", ",", "score_prob", ",", "proposals", "=", "img_indices", "[", "keep", "]", ",", "score_prob", "[", "keep", "]", ",", "proposals", "[", "keep", "]", "\n", "\n", "# Remove small boxes (weight or height < self.min_size).", "\n", "keep", "=", "remove_small_boxes", "(", "proposals", ",", "self", ".", "min_size", ")", "\n", "img_indices", ",", "score_prob", ",", "proposals", "=", "img_indices", "[", "keep", "]", ",", "score_prob", "[", "keep", "]", ",", "proposals", "[", "keep", "]", "\n", "\n", "# Filter by nms (iou >= self.nms_thresh).", "\n", "keep", "=", "batched_nms", "(", "proposals", ",", "score_prob", ",", "img_indices", ",", "self", ".", "nms_thresh", ")", "\n", "img_indices", ",", "score_prob", ",", "proposals", "=", "img_indices", "[", "keep", "]", ",", "score_prob", "[", "keep", "]", ",", "proposals", "[", "keep", "]", "\n", "\n", "# Separate by images.", "\n", "# Keep top self.max_num_per_image rois with respect to scores (already sorted by batched_nms)", "\n", "filtered_scores", ":", "List", "[", "Tensor", "]", "=", "[", "score_prob", "[", "img_indices", "==", "i", "]", "[", ":", "self", ".", "max_num_per_image", "]", "\n", "for", "i", "in", "range", "(", "num_images", ")", "]", "\n", "filtered_boxes", ":", "List", "[", "Tensor", "]", "=", "[", "proposals", "[", "img_indices", "==", "i", "]", "[", ":", "self", ".", "max_num_per_image", "]", "\n", "for", "i", "in", "range", "(", "num_images", ")", "]", "\n", "\n", "return", "filtered_boxes", ",", "filtered_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.roi_align_layer.ChooseFeatureMaps.forward": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "boxes", ":", "Tensor", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.roi_align_layer.ChooseByHeight.__init__": [[22, 25], ["torch.nn.Module.__init__", "roi_align_layer.ChooseByHeight.register_buffer", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "height_thresh", ":", "float", "=", "250", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'height_thresh'", ",", "torch", ".", "tensor", "(", "height_thresh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.roi_align_layer.ChooseByHeight.forward": [[26, 32], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "boxes", ":", "Tensor", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "        ", "heights", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "\n", "first_map_indices", ":", "Tensor", "=", "heights", "<", "self", ".", "height_thresh", "\n", "second_map_indices", ":", "Tensor", "=", "~", "first_map_indices", "\n", "\n", "return", "[", "first_map_indices", ",", "second_map_indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.roi_align_layer.ChooseFirstMap.forward": [[35, 37], ["torch.ones"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "boxes", ":", "Tensor", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "        ", "return", "[", "torch", ".", "ones", "(", "*", "boxes", ".", "shape", "[", ":", "-", "1", "]", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "boxes", ".", "device", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.roi_align_layer.ChooseOneMap.__init__": [[40, 44], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "idx", ":", "int", "=", "0", ",", "num_of_maps", ":", "int", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "idx", "=", "idx", "\n", "self", ".", "num_of_maps", "=", "num_of_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.roi_align_layer.ChooseOneMap.forward": [[45, 51], ["torch.ones", "torch.zeros", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "boxes", ":", "Tensor", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "        ", "return", "[", "\n", "torch", ".", "ones", "(", "*", "boxes", ".", "shape", "[", ":", "-", "1", "]", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "boxes", ".", "device", ")", "\n", "if", "i", "==", "self", ".", "idx", "else", "\n", "torch", ".", "zeros", "(", "*", "boxes", ".", "shape", "[", ":", "-", "1", "]", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "boxes", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_of_maps", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.roi_align_layer.RoiAlign.__init__": [[55, 67], ["torch.nn.Module.__init__", "roi_align_layer._init_scales", "roi_align_layer.RoiAlign.register_buffer", "torchvision.ops.roi_align.RoIAlign", "torch.tensor", "roi_align_layer.ChooseByHeight"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.roi_align_layer._init_scales"], ["    ", "def", "__init__", "(", "self", ",", "height", ":", "int", "=", "7", ",", "width", ":", "int", "=", "7", ",", "choose_map", ":", "ChooseFeatureMaps", "=", "None", ",", "\n", "feature_map_sizes", ":", "Tuple", "[", "Tuple", "[", "int", ",", "int", "]", ",", "...", "]", "=", "(", "(", "32", ",", "128", ")", ",", "(", "16", ",", "128", ")", ")", ",", "\n", "img_size", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "512", ",", "512", ")", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "scales", "=", "_init_scales", "(", "feature_map_sizes", ",", "img_size", ")", "\n", "self", ".", "register_buffer", "(", "'scales'", ",", "torch", ".", "tensor", "(", "scales", ")", ")", "\n", "self", ".", "choose_map", "=", "choose_map", "or", "ChooseByHeight", "(", ")", "\n", "self", ".", "roi_align", "=", "BasicRoiAlign", "(", "(", "height", ",", "width", ")", ",", "1.", ",", "-", "1", ",", "aligned", "=", "False", ")", "\n", "\n", "self", ".", "size", "=", "height", "*", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.roi_align_layer.RoiAlign.forward": [[68, 90], ["roi_align_layer._cat_boxes", "roi_align_layer.RoiAlign.choose_map", "zip", "torch.cat", "len", "len", "torch.any", "len", "torch.argsort", "roi_align_layer._rescale_boxes", "torch.cat", "torch.cat.append", "torch.cat", "roi_align_layer.RoiAlign.roi_align", "torch.where"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.roi_align_layer._cat_boxes", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.roi_align_layer._rescale_boxes", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "def", "forward", "(", "self", ",", "feature_maps", ":", "List", "[", "Tensor", "]", ",", "boxes", ":", "List", "[", "Tensor", "]", ")", ":", "\n", "        ", "boxes", ",", "img_indices", "=", "_cat_boxes", "(", "boxes", ")", "\n", "\n", "feature_indices", "=", "self", ".", "choose_map", "(", "boxes", ")", "\n", "\n", "assert", "len", "(", "feature_indices", ")", "==", "len", "(", "feature_maps", ")", "\n", "\n", "rescaled_boxes", "=", "[", "]", "\n", "\n", "for", "feature_map", ",", "indices", ",", "scales", "in", "zip", "(", "feature_maps", ",", "feature_indices", ",", "self", ".", "scales", ")", ":", "\n", "            ", "if", "torch", ".", "any", "(", "indices", ")", ":", "\n", "                ", "scaled_boxes", "=", "_rescale_boxes", "(", "boxes", "[", "indices", "]", ",", "scales", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "[", "img_indices", "[", "indices", "]", "[", ":", ",", "None", "]", ",", "scaled_boxes", "]", ",", "dim", "=", "1", ")", "\n", "rescaled_boxes", ".", "append", "(", "self", ".", "roi_align", "(", "feature_map", ",", "rois", ")", ")", "\n", "\n", "", "", "rescaled_boxes", "=", "torch", ".", "cat", "(", "rescaled_boxes", ")", "\n", "\n", "if", "len", "(", "feature_maps", ")", ">", "1", ":", "\n", "            ", "indices_order", "=", "torch", ".", "argsort", "(", "torch", ".", "cat", "(", "[", "torch", ".", "where", "(", "fi", ")", "[", "0", "]", "for", "fi", "in", "feature_indices", "]", ")", ")", "\n", "rescaled_boxes", "=", "rescaled_boxes", "[", "indices_order", "]", "\n", "\n", "", "return", "rescaled_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.roi_align_layer._init_scales": [[92, 94], ["None"], "function", ["None"], ["", "", "def", "_init_scales", "(", "feature_map_sizes", ":", "Tuple", "[", "Tuple", "[", "int", ",", "int", "]", ",", "...", "]", ",", "img_size", ":", "Tuple", "[", "int", ",", "int", "]", ")", ":", "\n", "    ", "return", "[", "(", "f", "[", "0", "]", "/", "img_size", "[", "0", "]", ",", "f", "[", "1", "]", "/", "img_size", "[", "1", "]", ")", "for", "f", "in", "feature_map_sizes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.roi_align_layer._cat_boxes": [[96, 103], ["torch.cat", "torch.cat", "torch.full", "enumerate"], "function", ["None"], ["", "def", "_cat_boxes", "(", "boxes", ":", "List", "[", "Tensor", "]", ")", ":", "\n", "    ", "device", "=", "boxes", "[", "0", "]", ".", "device", "\n", "indices", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "full", "(", "(", "b", ".", "shape", "[", "0", "]", ",", ")", ",", "n", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "device", ")", "for", "n", ",", "b", "in", "enumerate", "(", "boxes", ")", "\n", "]", ")", "\n", "boxes", "=", "torch", ".", "cat", "(", "boxes", ",", "0", ")", "\n", "return", "boxes", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.roi_align_layer._rescale_boxes": [[105, 109], ["boxes.split", "torch.stack"], "function", ["None"], ["", "def", "_rescale_boxes", "(", "boxes", ":", "Tensor", ",", "scales", ":", "Tuple", "[", "float", ",", "float", "]", ")", ":", "\n", "    ", "ys", ",", "xs", "=", "scales", "\n", "x0", ",", "y0", ",", "x1", ",", "y1", "=", "boxes", ".", "split", "(", "1", ",", "dim", "=", "1", ")", "\n", "return", "torch", ".", "stack", "(", "[", "x0", "*", "xs", ",", "y0", "*", "ys", ",", "x1", "*", "xs", ",", "y1", "*", "ys", "]", ",", "dim", "=", "1", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.proposal_sampler.ProposalSampler.__init__": [[19, 28], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "random_anchors_per_image", ":", "int", "=", "10", ",", "\n", "num_samples_from_targets", ":", "int", "=", "2", ",", "\n", "sample_x_std", ":", "float", "=", "1", ",", "\n", "sample_y_std", ":", "float", "=", "10", ",", "\n", ")", ":", "\n", "        ", "self", ".", "random_anchors_per_image", "=", "random_anchors_per_image", "\n", "self", ".", "num_samples_from_targets", "=", "num_samples_from_targets", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "[", "sample_x_std", ",", "sample_y_std", ",", "sample_x_std", ",", "sample_y_std", "]", ")", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.proposal_sampler.ProposalSampler.__call__": [[29, 53], ["proposal_sampler.ProposalSampler.std.to", "numpy.arange", "enumerate", "zip", "range", "training_proposals.append", "numpy.random.choice", "training_proposals_per_image.append", "torch.normal", "utils.valid_boxes", "training_proposals_per_image.append", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.valid_boxes", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "def", "__call__", "(", "self", ",", "proposals", ":", "List", "[", "Tensor", "]", ",", "targets", ":", "List", "[", "Tensor", "]", ",", "anchors", ":", "Tensor", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "        ", "std", "=", "self", ".", "std", ".", "to", "(", "anchors", ".", "device", ")", "\n", "num_anchors", "=", "anchors", ".", "shape", "[", "0", "]", "\n", "num_rand", "=", "self", ".", "random_anchors_per_image", "\n", "anchor_indices", "=", "arange", "(", "num_anchors", ")", "\n", "\n", "training_proposals", ":", "List", "[", "Tensor", "]", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "proposals_per_image", ",", "targets_per_image", ")", "in", "enumerate", "(", "zip", "(", "proposals", ",", "targets", ")", ")", ":", "\n", "            ", "training_proposals_per_image", "=", "[", "proposals_per_image", ",", "targets_per_image", "]", "\n", "\n", "if", "num_rand", ":", "\n", "                ", "indices", "=", "choice", "(", "anchor_indices", ",", "num_rand", ",", "replace", "=", "False", ")", "\n", "training_proposals_per_image", ".", "append", "(", "anchors", "[", "indices", "]", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "self", ".", "num_samples_from_targets", ")", ":", "\n", "                ", "sampled", "=", "torch", ".", "normal", "(", "targets_per_image", ",", "std", ")", "\n", "keep", "=", "valid_boxes", "(", "sampled", ")", "\n", "\n", "training_proposals_per_image", ".", "append", "(", "sampled", "[", "keep", "]", ")", "\n", "\n", "", "training_proposals", ".", "append", "(", "torch", ".", "cat", "(", "training_proposals_per_image", ")", ")", "\n", "\n", "", "return", "training_proposals", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.transform_list.TransformList.__init__": [[11, 13], ["list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ":", "List", "[", "Callable", "]", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "list", "(", "transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.transform_list.TransformList.__call__": [[14, 18], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "x", "=", "t", "(", "x", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.encode_boxes.encode_boxes": [[15, 41], ["torch.log", "torch.log", "torch.stack"], "function", ["None"], ["def", "encode_boxes", "(", "reference_boxes", ":", "Tensor", ",", "proposals", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"\n    Encode a set of proposals with respect to some\n    reference boxes\n    Args:\n        reference_boxes (Tensor): reference boxes\n        proposals (Tensor): boxes to be encoded\n    \"\"\"", "\n", "\n", "x_ref", "=", "(", "reference_boxes", "[", ":", ",", "0", "]", "+", "reference_boxes", "[", ":", ",", "2", "]", ")", "/", "2", "\n", "y_ref", "=", "(", "reference_boxes", "[", ":", ",", "1", "]", "+", "reference_boxes", "[", ":", ",", "3", "]", ")", "/", "2", "\n", "w_ref", "=", "(", "reference_boxes", "[", ":", ",", "2", "]", "-", "reference_boxes", "[", ":", ",", "0", "]", ")", "\n", "h_ref", "=", "(", "reference_boxes", "[", ":", ",", "3", "]", "-", "reference_boxes", "[", ":", ",", "1", "]", ")", "\n", "\n", "x_pr", "=", "(", "proposals", "[", ":", ",", "0", "]", "+", "proposals", "[", ":", ",", "2", "]", ")", "/", "2", "\n", "y_pr", "=", "(", "proposals", "[", ":", ",", "1", "]", "+", "proposals", "[", ":", ",", "3", "]", ")", "/", "2", "\n", "w_pr", "=", "(", "proposals", "[", ":", ",", "2", "]", "-", "proposals", "[", ":", ",", "0", "]", ")", "\n", "h_pr", "=", "(", "proposals", "[", ":", ",", "3", "]", "-", "proposals", "[", ":", ",", "1", "]", ")", "\n", "\n", "targets_dx", "=", "(", "x_pr", "-", "x_ref", ")", "/", "w_ref", "\n", "targets_dy", "=", "(", "y_pr", "-", "y_ref", ")", "/", "h_ref", "\n", "targets_dw", "=", "torch", ".", "log", "(", "w_pr", "/", "w_ref", ")", "\n", "targets_dh", "=", "torch", ".", "log", "(", "h_pr", "/", "h_ref", ")", "\n", "\n", "targets", "=", "torch", ".", "stack", "(", "(", "targets_dx", ",", "targets_dy", ",", "targets_dw", ",", "targets_dh", ")", ",", "dim", "=", "1", ")", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.encode_boxes.decode_boxes": [[43, 76], ["boxes.to.to", "torch.clamp", "torch.clamp", "torch.stack", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "decode_boxes", "(", "rel_codes", ":", "Tensor", ",", "boxes", ":", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    From a set of original boxes and encoded relative box offsets,\n    get the decoded boxes.\n    Args:\n        rel_codes (Tensor): encoded boxes\n        boxes (Tensor): reference boxes.\n    \"\"\"", "\n", "device", ",", "dtype", "=", "rel_codes", ".", "device", ",", "rel_codes", ".", "dtype", "\n", "\n", "boxes", "=", "boxes", ".", "to", "(", "dtype", ")", "\n", "\n", "widths", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "\n", "heights", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "\n", "ctr_x", "=", "boxes", "[", ":", ",", "0", "]", "+", "0.5", "*", "widths", "\n", "ctr_y", "=", "boxes", "[", ":", ",", "1", "]", "+", "0.5", "*", "heights", "\n", "\n", "dx", "=", "rel_codes", "[", ":", ",", "0", "]", "\n", "dy", "=", "rel_codes", "[", ":", ",", "1", "]", "\n", "dw", "=", "rel_codes", "[", ":", ",", "2", "]", "\n", "dh", "=", "rel_codes", "[", ":", ",", "3", "]", "\n", "\n", "# Prevent sending too large values into torch.exp()", "\n", "dw", "=", "torch", ".", "clamp", "(", "dw", ",", "max", "=", "_BBOX_XFORM_CLIP", ")", "\n", "dh", "=", "torch", ".", "clamp", "(", "dh", ",", "max", "=", "_BBOX_XFORM_CLIP", ")", "\n", "\n", "p_x", "=", "dx", "*", "widths", "+", "ctr_x", "\n", "p_y", "=", "dy", "*", "heights", "+", "ctr_y", "\n", "p_w", "=", "torch", ".", "exp", "(", "dw", ")", "*", "widths", "\n", "p_h", "=", "torch", ".", "exp", "(", "dh", ")", "*", "heights", "\n", "\n", "pred_boxes", "=", "torch", ".", "stack", "(", "(", "p_x", "-", "p_w", "/", "2", ",", "p_y", "-", "p_h", "/", "2", ",", "p_x", "+", "p_w", "/", "2", ",", "p_y", "+", "p_h", "/", "2", ")", ",", "dim", "=", "1", ")", "\n", "return", "pred_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fpn.FeaturePyramidNetwork.__init__": [[16, 37], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "fpn.FeaturePyramidNetwork.modules", "torch.nn.Conv2d", "torch.nn.Conv2d", "fpn.FeaturePyramidNetwork.inner_blocks.append", "fpn.FeaturePyramidNetwork.layer_blocks.append", "isinstance", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels_list", ":", "Tuple", "[", "int", ",", "...", "]", ",", "\n", "out_channels", ":", "int", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "inner_blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "layer_blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "in_channels", "in", "in_channels_list", ":", "\n", "            ", "inner_block_module", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ")", "\n", "layer_block_module", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "inner_blocks", ".", "append", "(", "inner_block_module", ")", "\n", "self", ".", "layer_blocks", ".", "append", "(", "layer_block_module", ")", "\n", "\n", "# initialize parameters now to avoid modifying the initialization of top_blocks", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fpn.FeaturePyramidNetwork.forward": [[38, 64], ["range", "torch.interpolate", "results.insert", "len"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "features", ":", "List", "[", "Tensor", "]", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Computes the FPN for a set of feature maps.\n\n        Args:\n            x (OrderedDict[Tensor]): feature maps for each feature level.\n\n        Returns:\n            results (OrderedDict[Tensor]): feature maps after FPN layers.\n                They are ordered from highest resolution first.\n        \"\"\"", "\n", "\n", "last_inner", "=", "self", ".", "inner_blocks", "[", "-", "1", "]", "(", "features", "[", "-", "1", "]", ")", "\n", "\n", "results", "=", "[", "\n", "self", ".", "layer_blocks", "[", "-", "1", "]", "(", "last_inner", ")", "\n", "]", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "features", ")", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "inner_lateral", "=", "self", ".", "inner_blocks", "[", "idx", "]", "(", "features", "[", "idx", "]", ")", "\n", "feat_shape", "=", "inner_lateral", ".", "shape", "[", "-", "2", ":", "]", "\n", "inner_top_down", "=", "F", ".", "interpolate", "(", "last_inner", ",", "size", "=", "feat_shape", ",", "mode", "=", "\"nearest\"", ")", "\n", "last_inner", "=", "inner_lateral", "+", "inner_top_down", "\n", "results", ".", "insert", "(", "0", ",", "self", ".", "layer_blocks", "[", "idx", "]", "(", "last_inner", ")", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fpn.BackboneWithFPN.__init__": [[67, 72], ["super().__init__", "fpn.FeaturePyramidNetwork"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "backbone_channels", ":", "Tuple", "[", "int", ",", "...", "]", ",", "out_channels", ":", "int", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "_out_channels", "=", "out_channels", "\n", "self", ".", "fpn", "=", "FeaturePyramidNetwork", "(", "backbone_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fpn.BackboneWithFPN.out_channels": [[73, 76], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "out_channels", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.fpn.BackboneWithFPN.forward": [[77, 81], ["fpn.BackboneWithFPN.backbone", "fpn.BackboneWithFPN.fpn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "imgs", ":", "Tensor", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "        ", "features", "=", "self", ".", "backbone", "(", "imgs", ")", "\n", "features", "=", "self", ".", "fpn", "(", "features", ")", "\n", "return", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.transform_img.TransformImg.__init__": [[15, 19], ["torch.nn.Module.__init__", "transform_img.TransformImg.register_buffer", "transform_img.TransformImg.register_buffer", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mean", ":", "float", "=", "0.3", ",", "std", ":", "float", "=", "0.3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'img_mean'", ",", "tensor", "(", "mean", ")", ")", "\n", "self", ".", "register_buffer", "(", "'img_std'", ",", "tensor", "(", "std", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.transform_img.TransformImg.forward": [[20, 22], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "imgs", ":", "Tensor", ")", ":", "\n", "        ", "return", "(", "imgs", "-", "self", ".", "img_mean", ")", "/", "self", ".", "img_std", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.filter_proposals.FilterProposals.__init__": [[21, 41], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "pre_nms_top_n_train", "=", "2000", ",", "\n", "pre_nms_top_n_test", "=", "1000", ",", "\n", "post_nms_top_n_train", "=", "2000", ",", "\n", "post_nms_top_n_test", "=", "1000", ",", "\n", "nms_thresh", "=", "0.7", ",", "\n", "score_thresh", "=", "0.0", ",", "\n", "min_size", ":", "float", "=", "1e-3", ",", "\n", "img_shape", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "512", ",", "512", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "img_shape", "=", "img_shape", "\n", "\n", "self", ".", "_pre_nms_top_n_train", "=", "pre_nms_top_n_train", "\n", "self", ".", "_pre_nms_top_n_test", "=", "pre_nms_top_n_test", "\n", "self", ".", "_post_nms_top_n_train", "=", "post_nms_top_n_train", "\n", "self", ".", "_post_nms_top_n_test", "=", "post_nms_top_n_test", "\n", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "score_thresh", "=", "score_thresh", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.filter_proposals.FilterProposals.pre_nms_top_n": [[42, 47], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pre_nms_top_n", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_pre_nms_top_n_train", "\n", "", "return", "self", ".", "_pre_nms_top_n_test", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.filter_proposals.FilterProposals.post_nms_top_n": [[48, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "post_nms_top_n", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "_post_nms_top_n_train", "\n", "", "return", "self", ".", "_post_nms_top_n_test", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.filter_proposals.FilterProposals.filter_score_before_nms": [[54, 88], ["utils.get_top_n_idx", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.get_top_n_idx"], ["", "def", "filter_score_before_nms", "(", "self", ",", "\n", "objectness", ":", "Tensor", ",", "\n", "levels", ":", "Tensor", ",", "\n", "proposals", ":", "Tensor", ",", "\n", "num_anchors_per_level", ":", "List", "[", "int", "]", ",", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Filters proposals by choosing by choosing top k = self.pre_nms_top_n proposals with respect to\n        objectness independently for each feature map and for each image.\n\n\n        Args:\n            objectness (Tensor): Objectness tensor;\n                                 shape (num_images, sum(num_anchors_per_level)).\n            levels (Tensor): Indices corresponding to source feature map;\n                             shape = (num_images, sum(num_anchors_per_level)).\n            proposals (Tensor): Proposal boxes;\n                                shape = (num_images, sum(num_anchors_per_level), 4)\n            num_anchors_per_level (List[int]): Number of anchors per feature map.\n\n        Returns:\n            Tuple[Tensor, Tensor, Tensor]: Filtered tensors (objectness, levels, proposals).\n        \"\"\"", "\n", "\n", "top_n_idx", "=", "get_top_n_idx", "(", "self", ".", "pre_nms_top_n", ",", "objectness", ",", "num_anchors_per_level", ")", "\n", "\n", "image_range", "=", "torch", ".", "arange", "(", "objectness", ".", "shape", "[", "0", "]", ",", "device", "=", "objectness", ".", "device", ")", "\n", "batch_idx", "=", "image_range", "[", ":", ",", "None", "]", "\n", "\n", "objectness", "=", "objectness", "[", "batch_idx", ",", "top_n_idx", "]", "\n", "levels", "=", "levels", "[", "batch_idx", ",", "top_n_idx", "]", "\n", "proposals", "=", "proposals", "[", "batch_idx", ",", "top_n_idx", "]", "\n", "\n", "return", "objectness", ",", "levels", ",", "proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.filter_proposals.FilterProposals.forward": [[89, 158], ["objectness.view.view.view", "utils.get_levels", "filter_proposals.FilterProposals.filter_score_before_nms", "torch.sigmoid", "zip", "torchvision.ops.clip_boxes_to_image", "torchvision.ops.remove_small_boxes", "torchvision.ops.batched_nms", "filtered_boxes.append", "filtered_scores.append", "torch.where"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.get_levels", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.filter_proposals.FilterProposals.filter_score_before_nms", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "def", "forward", "(", "self", ",", "\n", "proposals", ":", "Tensor", ",", "\n", "objectness", ":", "Tensor", ",", "\n", "num_anchors_per_level", ":", "List", "[", "int", "]", "\n", ")", "->", "Tuple", "[", "List", "[", "Tensor", "]", ",", "List", "[", "Tensor", "]", "]", ":", "\n", "        ", "\"\"\"\n\n        Filters proposals by five stages:\n            1. Filters by objectness score (leaves top k1 = self.pre_nms_top_n proposals\n            independently for each feature map and for each image).\n            2. Removes small boxes (width or height < self.min_size).\n            3. Removes proposals with scores below self.score_thresh.\n            4. Filters proposals via nms (iou <= self.nms_thresh) independently per feature map.\n            5. Keeps top k2 = self.post_nms_top_n proposals per IMAGE.\n\n        Thus, the maximum number of proposals per feature is self.post_nms_top_n.\n\n        Total number of anchors per level A = sum(num_anchors_per_level).\n        Number of images = N.\n\n        Args:\n            proposals (Tensor[N, A, 4]): Proposal boxes.\n            objectness (Tensor[N, A]) Proposal scores.\n            num_anchors_per_level (List[int]): Number of anchors per feature map.\n\n        Returns:\n            Tuple[List[Tensor], List[Tensor]]: filtered_boxes, filtered_scores.\n        \"\"\"", "\n", "\n", "img_shape", "=", "self", ".", "img_shape", "\n", "num_images", "=", "proposals", ".", "shape", "[", "0", "]", "\n", "device", "=", "proposals", ".", "device", "\n", "\n", "objectness", "=", "objectness", ".", "view", "(", "num_images", ",", "-", "1", ")", "\n", "\n", "levels", "=", "get_levels", "(", "num_images", ",", "num_anchors_per_level", ",", "device", ")", "\n", "\n", "# select top_n boxes independently per level before applying nms", "\n", "objectness", ",", "levels", ",", "proposals", "=", "self", ".", "filter_score_before_nms", "(", "\n", "objectness", ",", "levels", ",", "proposals", ",", "num_anchors_per_level", "\n", ")", "\n", "\n", "objectness_prob", "=", "torch", ".", "sigmoid", "(", "objectness", ")", "\n", "\n", "filtered_boxes", "=", "[", "]", "\n", "filtered_scores", "=", "[", "]", "\n", "\n", "for", "boxes", ",", "scores", ",", "lvl", "in", "zip", "(", "proposals", ",", "objectness_prob", ",", "levels", ")", ":", "\n", "            ", "boxes", "=", "clip_boxes_to_image", "(", "boxes", ",", "img_shape", ")", "\n", "\n", "# remove small boxes", "\n", "keep", "=", "remove_small_boxes", "(", "boxes", ",", "self", ".", "min_size", ")", "\n", "boxes", ",", "scores", ",", "lvl", "=", "boxes", "[", "keep", "]", ",", "scores", "[", "keep", "]", ",", "lvl", "[", "keep", "]", "\n", "\n", "# remove low scoring boxes", "\n", "keep", "=", "torch", ".", "where", "(", "scores", ">=", "self", ".", "score_thresh", ")", "[", "0", "]", "\n", "boxes", ",", "scores", ",", "lvl", "=", "boxes", "[", "keep", "]", ",", "scores", "[", "keep", "]", ",", "lvl", "[", "keep", "]", "\n", "\n", "# non-maximum suppression, independently done per level", "\n", "keep", "=", "batched_nms", "(", "boxes", ",", "scores", ",", "lvl", ",", "self", ".", "nms_thresh", ")", "\n", "\n", "# keep only top k scoring predictions", "\n", "keep", "=", "keep", "[", ":", "self", ".", "post_nms_top_n", "]", "\n", "boxes", ",", "scores", "=", "boxes", "[", "keep", "]", ",", "scores", "[", "keep", "]", "\n", "\n", "filtered_boxes", ".", "append", "(", "boxes", ")", "\n", "filtered_scores", ".", "append", "(", "scores", ")", "\n", "\n", "", "return", "filtered_boxes", ",", "filtered_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.transform_boxes.BoxWidthPadding.__init__": [[14, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "const_pad", ":", "float", "=", "1.5", ",", "lin_pad", ":", "float", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "const_pad", "=", "const_pad", "\n", "self", ".", "lin_pad", "=", "lin_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.transform_boxes.BoxWidthPadding.__call__": [[18, 27], ["transformed_boxes.append", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "def", "__call__", "(", "self", ",", "boxes_list", ":", "List", "[", "Tensor", "]", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "        ", "transformed_boxes", ":", "List", "[", "Tensor", "]", "=", "[", "]", "\n", "\n", "for", "boxes", "in", "boxes_list", ":", "\n", "            ", "widths", "=", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "\n", "pad", "=", "widths", "*", "self", ".", "lin_pad", "+", "self", ".", "const_pad", "\n", "transformed_boxes", ".", "append", "(", "stack", "(", "[", "boxes", "[", ":", ",", "0", "]", "-", "pad", ",", "boxes", "[", ":", ",", "1", "]", ",", "boxes", "[", ":", ",", "2", "]", "+", "pad", ",", "boxes", "[", ":", ",", "3", "]", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "", "return", "transformed_boxes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.rpn_head.RPNHead.__init__": [[25, 42], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "rpn_head.RPNHead.children", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_anchors", ")", ":", "\n", "        ", "super", "(", "RPNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_anchors", "=", "num_anchors", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "1", ")", "\n", ")", "\n", "self", ".", "cls_logits", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "num_anchors", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "bbox_pred", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "num_anchors", "*", "4", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ")", "\n", ")", "\n", "\n", "for", "layer", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "layer", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.rpn_head.RPNHead.forward": [[43, 55], ["rpn_head.RPNHead._concat_output", "torch.nn.functional.relu", "objectness.append", "bbox_reg.append", "int", "rpn_head.RPNHead.conv", "rpn_head.RPNHead.cls_logits", "rpn_head.RPNHead.bbox_pred", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.rpn_head.RPNHead._concat_output", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "", "def", "forward", "(", "self", ",", "features", ":", "List", "[", "Tensor", "]", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "List", "[", "int", "]", "]", ":", "\n", "        ", "objectness", "=", "[", "]", "# object / not object", "\n", "bbox_reg", "=", "[", "]", "\n", "\n", "for", "feature", "in", "features", ":", "\n", "            ", "t", "=", "relu", "(", "self", ".", "conv", "(", "feature", ")", ")", "\n", "objectness", ".", "append", "(", "self", ".", "cls_logits", "(", "t", ")", ")", "\n", "bbox_reg", ".", "append", "(", "self", ".", "bbox_pred", "(", "t", ")", ")", "\n", "\n", "", "num_anchors_per_level", "=", "[", "int", "(", "np", ".", "prod", "(", "o", ".", "shape", "[", "1", ":", "]", ")", ")", "for", "o", "in", "objectness", "]", "\n", "objectness", ",", "bbox_reg", "=", "self", ".", "_concat_output", "(", "objectness", ",", "bbox_reg", ")", "\n", "return", "objectness", ",", "bbox_reg", ",", "num_anchors_per_level", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.rpn_head.RPNHead._concat_output": [[56, 75], ["zip", "torch.cat().flatten", "torch.cat().reshape", "rpn_head.permute_and_flatten", "rpn_head.permute_and_flatten", "box_cls_flattened.append", "box_regression_flattened.append", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.rpn_head.permute_and_flatten", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.rpn_head.permute_and_flatten", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "@", "staticmethod", "\n", "def", "_concat_output", "(", "logits", ":", "List", "[", "Tensor", "]", ",", "bbox_reg", ":", "List", "[", "Tensor", "]", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "box_cls_flattened", "=", "[", "]", "\n", "box_regression_flattened", "=", "[", "]", "\n", "\n", "for", "box_cls_per_level", ",", "box_regression_per_level", "in", "zip", "(", "\n", "logits", ",", "bbox_reg", "\n", ")", ":", "\n", "            ", "n", ",", "a", ",", "h", ",", "w", "=", "box_cls_per_level", ".", "shape", "\n", "\n", "box_cls_per_level", "=", "permute_and_flatten", "(", "box_cls_per_level", ",", "n", ",", "1", ",", "h", ",", "w", ")", "\n", "box_regression_per_level", "=", "permute_and_flatten", "(", "box_regression_per_level", ",", "n", ",", "4", ",", "h", ",", "w", ")", "\n", "\n", "box_cls_flattened", ".", "append", "(", "box_cls_per_level", ")", "\n", "box_regression_flattened", ".", "append", "(", "box_regression_per_level", ")", "\n", "\n", "", "box_cls", "=", "torch", ".", "cat", "(", "box_cls_flattened", ",", "dim", "=", "1", ")", ".", "flatten", "(", "0", ",", "-", "2", ")", "\n", "box_regression", "=", "torch", ".", "cat", "(", "box_regression_flattened", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "return", "box_cls", ",", "box_regression", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.rpn_head.permute_and_flatten": [[77, 82], ["layer.reshape.view", "layer.reshape.permute", "layer.reshape.reshape"], "function", ["None"], ["", "", "def", "permute_and_flatten", "(", "layer", ":", "Tensor", ",", "n", ":", "int", ",", "c", ":", "int", ",", "h", ":", "int", ",", "w", ":", "int", ")", "->", "Tensor", ":", "\n", "    ", "layer", "=", "layer", ".", "view", "(", "n", ",", "-", "1", ",", "c", ",", "h", ",", "w", ")", "\n", "layer", "=", "layer", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", "layer", "=", "layer", ".", "reshape", "(", "n", ",", "-", "1", ",", "c", ")", "\n", "return", "layer", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.BalancedPositiveNegativeSampler.__init__": [[23, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_size_per_image", ":", "int", ",", "positive_fraction", ":", "float", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch_size_per_image (int): number of elements to be selected per image\n            positive_fraction (float): percentace of positive elements per batch\n        \"\"\"", "\n", "self", ".", "batch_size_per_image", "=", "batch_size_per_image", "\n", "self", ".", "positive_fraction", "=", "positive_fraction", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.BalancedPositiveNegativeSampler.__call__": [[32, 89], ["torch.cat", "torch.cat", "int", "min", "min", "torch.zeros_like", "torch.zeros_like", "pos_idx.append", "neg_idx.append", "torch.where", "torch.where", "positive.numel", "negative.numel", "torch.randperm", "torch.randperm", "positive.numel", "negative.numel"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.min", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.min", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "def", "__call__", "(", "self", ",", "matched_idxs", ":", "Union", "[", "List", "[", "Tensor", "]", ",", "Tensor", "]", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            matched idxs: list of tensors containing -1, 0 or positive values.\n                Each tensor corresponds to a specific image.\n                -1 values are ignored, 0 are considered as negatives and > 0 as\n                positives.\n\n        Returns:\n            pos_idx (list[tensor])\n            neg_idx (list[tensor])\n\n        Returns two lists of binary masks for each image.\n        The first list contains the positive elements that were selected,\n        and the second list the negative example.\n\n        \"\"\"", "\n", "pos_idx", "=", "[", "]", "\n", "neg_idx", "=", "[", "]", "\n", "for", "matched_idxs_per_image", "in", "matched_idxs", ":", "\n", "            ", "positive", "=", "torch", ".", "where", "(", "matched_idxs_per_image", ">=", "1", ")", "[", "0", "]", "\n", "negative", "=", "torch", ".", "where", "(", "matched_idxs_per_image", "==", "0", ")", "[", "0", "]", "\n", "\n", "num_pos", "=", "int", "(", "self", ".", "batch_size_per_image", "*", "self", ".", "positive_fraction", ")", "\n", "# protect against not enough positive examples", "\n", "num_pos", "=", "min", "(", "positive", ".", "numel", "(", ")", ",", "num_pos", ")", "\n", "num_neg", "=", "self", ".", "batch_size_per_image", "-", "num_pos", "\n", "# protect against not enough negative examples", "\n", "num_neg", "=", "min", "(", "negative", ".", "numel", "(", ")", ",", "num_neg", ")", "\n", "\n", "# randomly select positive and negative examples", "\n", "perm1", "=", "torch", ".", "randperm", "(", "positive", ".", "numel", "(", ")", ",", "device", "=", "positive", ".", "device", ")", "[", ":", "num_pos", "]", "\n", "perm2", "=", "torch", ".", "randperm", "(", "negative", ".", "numel", "(", ")", ",", "device", "=", "negative", ".", "device", ")", "[", ":", "num_neg", "]", "\n", "\n", "pos_idx_per_image", "=", "positive", "[", "perm1", "]", "\n", "neg_idx_per_image", "=", "negative", "[", "perm2", "]", "\n", "\n", "# create binary mask from indices", "\n", "pos_idx_per_image_mask", "=", "torch", ".", "zeros_like", "(", "\n", "matched_idxs_per_image", ",", "dtype", "=", "torch", ".", "bool", "\n", ")", "\n", "neg_idx_per_image_mask", "=", "torch", ".", "zeros_like", "(", "\n", "matched_idxs_per_image", ",", "dtype", "=", "torch", ".", "bool", "\n", ")", "\n", "\n", "pos_idx_per_image_mask", "[", "pos_idx_per_image", "]", "=", "True", "\n", "neg_idx_per_image_mask", "[", "neg_idx_per_image", "]", "=", "True", "\n", "\n", "pos_idx", ".", "append", "(", "pos_idx_per_image_mask", ")", "\n", "neg_idx", ".", "append", "(", "neg_idx_per_image_mask", ")", "\n", "\n", "", "sampled_pos_inds", "=", "torch", ".", "cat", "(", "pos_idx", ",", "dim", "=", "0", ")", "\n", "sampled_neg_inds", "=", "torch", ".", "cat", "(", "neg_idx", ",", "dim", "=", "0", ")", "\n", "\n", "sampled_inds", "=", "(", "sampled_pos_inds", "+", "sampled_neg_inds", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", "\n", "return", "sampled_inds", ",", "sampled_pos_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.Matcher.__init__": [[114, 134], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "high_threshold", ":", "float", ",", "low_threshold", ":", "float", ",", "allow_low_quality_matches", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            high_threshold (float): quality values greater than or equal to\n                this value are candidate matches.\n            low_threshold (float): a lower quality threshold used to stratify\n                matches into three levels:\n                1) matches >= high_threshold\n                2) BETWEEN_THRESHOLDS matches in [low_threshold, high_threshold)\n                3) BELOW_LOW_THRESHOLD matches in [0, low_threshold)\n            allow_low_quality_matches (bool): if True, produce additional matches\n                for predictions that have only low-quality match candidates. See\n                set_low_quality_matches_ for more details.\n        \"\"\"", "\n", "self", ".", "BELOW_LOW_THRESHOLD", "=", "-", "1", "\n", "self", ".", "BETWEEN_THRESHOLDS", "=", "-", "2", "\n", "assert", "low_threshold", "<=", "high_threshold", "\n", "self", ".", "high_threshold", "=", "high_threshold", "\n", "self", ".", "low_threshold", "=", "low_threshold", "\n", "self", ".", "allow_low_quality_matches", "=", "allow_low_quality_matches", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.Matcher.__call__": [[135, 178], ["match_quality_matrix.max", "match_quality_matrix.numel", "matches.clone", "utils.Matcher.set_low_quality_matches_", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.Matcher.set_low_quality_matches_"], ["", "def", "__call__", "(", "self", ",", "match_quality_matrix", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            match_quality_matrix (Tensor[float]): an MxN tensor, containing the\n            pairwise quality between M ground-truth elements and N predicted elements.\n\n        Returns:\n            matches (Tensor[int64]): an N tensor where N[i] is a matched gt in\n            [0, M - 1] or a negative value indicating that prediction i could not\n            be matched.\n        \"\"\"", "\n", "if", "match_quality_matrix", ".", "numel", "(", ")", "==", "0", ":", "\n", "# empty targets or proposals not supported during training", "\n", "            ", "if", "match_quality_matrix", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"No ground-truth boxes available for one of the images \"", "\n", "\"during training\"", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"No proposal boxes available for one of the images \"", "\n", "\"during training\"", ")", "\n", "\n", "# match_quality_matrix is M (gt) x N (predicted)", "\n", "# Max over gt elements (dim 0) to find best gt candidate for each prediction", "\n", "", "", "matched_vals", ",", "matches", "=", "match_quality_matrix", ".", "max", "(", "dim", "=", "0", ")", "\n", "if", "self", ".", "allow_low_quality_matches", ":", "\n", "            ", "all_matches", "=", "matches", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "all_matches", "=", "None", "\n", "\n", "# Assign candidate matches with low quality to negative (unassigned) values", "\n", "", "below_low_threshold", "=", "matched_vals", "<", "self", ".", "low_threshold", "\n", "between_thresholds", "=", "(", "matched_vals", ">=", "self", ".", "low_threshold", ")", "&", "(", "\n", "matched_vals", "<", "self", ".", "high_threshold", "\n", ")", "\n", "matches", "[", "below_low_threshold", "]", "=", "self", ".", "BELOW_LOW_THRESHOLD", "\n", "matches", "[", "between_thresholds", "]", "=", "self", ".", "BETWEEN_THRESHOLDS", "\n", "\n", "if", "self", ".", "allow_low_quality_matches", ":", "\n", "            ", "assert", "all_matches", "is", "not", "None", "\n", "self", ".", "set_low_quality_matches_", "(", "matches", ",", "all_matches", ",", "match_quality_matrix", ")", "\n", "\n", "", "return", "matches", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.Matcher.set_low_quality_matches_": [[179, 209], ["match_quality_matrix.max", "torch.where"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max"], ["", "def", "set_low_quality_matches_", "(", "self", ",", "matches", ",", "all_matches", ",", "match_quality_matrix", ")", ":", "\n", "        ", "\"\"\"\n        Produce additional matches for predictions that have only low-quality matches.\n        Specifically, for each ground-truth find the set of predictions that have\n        maximum overlap with it (including ties); for each prediction in that set, if\n        it is unmatched, then match it to the ground-truth with which it has the highest\n        quality value.\n        \"\"\"", "\n", "# For each gt, find the prediction with which it has highest quality", "\n", "highest_quality_foreach_gt", ",", "_", "=", "match_quality_matrix", ".", "max", "(", "dim", "=", "1", ")", "\n", "# Find highest quality match available, even if it is low, including ties", "\n", "gt_pred_pairs_of_highest_quality", "=", "torch", ".", "where", "(", "\n", "match_quality_matrix", "==", "highest_quality_foreach_gt", "[", ":", ",", "None", "]", "\n", ")", "\n", "# Example gt_pred_pairs_of_highest_quality:", "\n", "#   tensor([[    0, 39796],", "\n", "#           [    1, 32055],", "\n", "#           [    1, 32070],", "\n", "#           [    2, 39190],", "\n", "#           [    2, 40255],", "\n", "#           [    3, 40390],", "\n", "#           [    3, 41455],", "\n", "#           [    4, 45470],", "\n", "#           [    5, 45325],", "\n", "#           [    5, 46390]])", "\n", "# Each row is a (gt index, prediction index)", "\n", "# Note how gt items 1, 2, 3, and 5 each have two ties", "\n", "\n", "pred_inds_to_update", "=", "gt_pred_pairs_of_highest_quality", "[", "1", "]", "\n", "matches", "[", "pred_inds_to_update", "]", "=", "all_matches", "[", "pred_inds_to_update", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.assign_targets_to_anchors": [[211, 249], ["zip", "labels.append", "matched_gt_boxes.append", "gt_boxes_per_image.numel", "torch.zeros", "torch.zeros", "box_similarity", "proposal_matcher", "labels_per_image.to.to", "proposal_matcher.clamp"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "", "def", "assign_targets_to_anchors", "(", "\n", "proposal_matcher", ":", "Matcher", ",", "\n", "anchors", ":", "List", "[", "Tensor", "]", ",", "\n", "targets", ":", "List", "[", "Tensor", "]", ",", "\n", "box_similarity", ":", "Callable", "[", "[", "Tensor", ",", "Tensor", "]", ",", "Tensor", "]", "\n", ")", "->", "Tuple", "[", "List", "[", "Tensor", "]", ",", "List", "[", "Tensor", "]", "]", ":", "\n", "    ", "labels", "=", "[", "]", "\n", "matched_gt_boxes", "=", "[", "]", "\n", "\n", "for", "anchors_per_image", ",", "gt_boxes_per_image", "in", "zip", "(", "anchors", ",", "targets", ")", ":", "\n", "        ", "if", "gt_boxes_per_image", ".", "numel", "(", ")", "==", "0", ":", "\n", "# Background image (negative example)", "\n", "            ", "device", "=", "anchors_per_image", ".", "device", "\n", "matched_gt_boxes_per_image", "=", "torch", ".", "zeros", "(", "anchors_per_image", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "labels_per_image", "=", "torch", ".", "zeros", "(", "(", "anchors_per_image", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "match_quality_matrix", "=", "box_similarity", "(", "gt_boxes_per_image", ",", "anchors_per_image", ")", "\n", "matched_idxs", "=", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# get the targets corresponding GT for each proposal", "\n", "# NB: need to clamp the indices because we can have a single", "\n", "# GT in the image, and matched_idxs can be -2, which goes", "\n", "# out of bounds", "\n", "matched_gt_boxes_per_image", "=", "gt_boxes_per_image", "[", "matched_idxs", ".", "clamp", "(", "min", "=", "0", ")", "]", "\n", "\n", "labels_per_image", "=", "matched_idxs", ">=", "0", "\n", "labels_per_image", "=", "labels_per_image", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Background (negative examples)", "\n", "bg_indices", "=", "matched_idxs", "==", "proposal_matcher", ".", "BELOW_LOW_THRESHOLD", "\n", "labels_per_image", "[", "bg_indices", "]", "=", "0.0", "\n", "\n", "# discard indices that are between thresholds", "\n", "inds_to_discard", "=", "matched_idxs", "==", "proposal_matcher", ".", "BETWEEN_THRESHOLDS", "\n", "labels_per_image", "[", "inds_to_discard", "]", "=", "-", "1.0", "\n", "\n", "", "labels", ".", "append", "(", "labels_per_image", ")", "\n", "matched_gt_boxes", ".", "append", "(", "matched_gt_boxes_per_image", ")", "\n", "", "return", "labels", ",", "matched_gt_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.get_top_n_idx": [[251, 294], ["score.split", "torch.cat", "min", "ob.topk", "r.append"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.min", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "def", "get_top_n_idx", "(", "k", ":", "int", ",", "score", ":", "Tensor", ",", "num_anchors_per_level", ":", "List", "[", "int", "]", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"\n    Get top k indices with respect to score independently for each image and each feature map.\n\n    Args:\n        k (int): Number of top scores per feature map.\n        score (Tensor): Score tensor of shape (img_num, sum(num_anchors_per_level)).\n        num_anchors_per_level (List[int]): Number of anchors per feature map.\n\n    Returns:\n        Tensor: indices of shape (img_num, k * len(num_anchors_per_level))\n\n    >>> k_ = 2\n    >>> num_anchors_per_level_ = [6, 4]\n    >>> score_ = torch.stack([torch.arange(10), 10 - torch.arange(10)])\n    >>> num_images = score_.shape[0]\n    >>> score_\n    tensor([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],\n            [10,  9,  8,  7,  6,  5,  4,  3,  2,  1]])\n\n    >>> indices = get_top_n_idx(k_, score_, num_anchors_per_level_)\n    >>> indices\n    tensor([[5, 4, 9, 8],\n            [0, 1, 6, 7]])\n\n    >>> image_range = torch.arange(num_images)\n    >>> batch_idx = image_range[:, None]\n    >>> score_[batch_idx, indices]\n    tensor([[ 5,  4,  9,  8],\n            [10,  9,  4,  3]])\n    \"\"\"", "\n", "\n", "r", "=", "[", "]", "\n", "offset", "=", "0", "\n", "\n", "for", "ob", "in", "score", ".", "split", "(", "num_anchors_per_level", ",", "1", ")", ":", "\n", "        ", "num_anchors", "=", "ob", ".", "shape", "[", "1", "]", "\n", "k", "=", "min", "(", "k", ",", "num_anchors", ")", "\n", "_", ",", "top_n_idx", "=", "ob", ".", "topk", "(", "k", ",", "dim", "=", "1", ")", "\n", "r", ".", "append", "(", "top_n_idx", "+", "offset", ")", "\n", "offset", "+=", "num_anchors", "\n", "\n", "", "return", "torch", ".", "cat", "(", "r", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.get_levels": [[296, 319], ["torch.cat", "torch.full", "levels.reshape().repeat.reshape().repeat", "enumerate", "levels.reshape().repeat.reshape"], "function", ["None"], ["", "def", "get_levels", "(", "img_num", ":", "int", ",", "num_anchors_per_level", ":", "List", "[", "int", "]", ",", "device", ":", "torch", ".", "device", ")", "->", "Tensor", ":", "\n", "    ", "\"\"\"\n    Returns a 2D tensor of shape (img_num, sum(num_anchors_per_level)) with indices corresponding\n    to source feature maps. If img_num = 0 or None, returns a 1D tensor of shape (sum(num_anchors_per_level), ).\n\n\n    Args:\n        img_num (int): Number of images.\n        num_anchors_per_level (List[int]): Number of anchors per feature map.\n        device (torch.device): Device to allocate the result.\n\n    Returns:\n        Tensor: Feature map indices.\n\n    \"\"\"", "\n", "levels", "=", "[", "\n", "torch", ".", "full", "(", "(", "n", ",", ")", ",", "idx", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "device", ")", "\n", "for", "idx", ",", "n", "in", "enumerate", "(", "num_anchors_per_level", ")", "\n", "]", "\n", "levels", "=", "torch", ".", "cat", "(", "levels", ",", "0", ")", "\n", "if", "img_num", ":", "\n", "        ", "levels", "=", "levels", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "img_num", ",", "1", ")", "\n", "", "return", "levels", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.num_per_level_from_levels": [[321, 326], ["torch.arange", "torch.cat", "torch.searchsorted", "torch.tensor", "levels.size"], "function", ["None"], ["", "def", "num_per_level_from_levels", "(", "levels", ":", "Tensor", ",", "num_of_levels", ":", "int", ")", "->", "Tensor", ":", "\n", "    ", "level_numbers", "=", "torch", ".", "arange", "(", "num_of_levels", ",", "device", "=", "levels", ".", "device", ")", "\n", "indices", "=", "torch", ".", "cat", "(", "[", "torch", ".", "searchsorted", "(", "levels", ",", "level_numbers", ")", ",", "\n", "torch", ".", "tensor", "(", "levels", ".", "size", "(", ")", ",", "device", "=", "levels", ".", "device", ")", "]", ")", "\n", "return", "indices", "[", "1", ":", "]", "-", "indices", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.valid_boxes": [[328, 330], ["None"], "function", ["None"], ["", "def", "valid_boxes", "(", "boxes", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "return", "(", "boxes", "[", ":", ",", "2", "]", ">", "boxes", "[", ":", ",", "0", "]", ")", "&", "(", "boxes", "[", ":", ",", "3", "]", ">", "boxes", "[", ":", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.losses.calc_losses": [[31, 53], ["utils.assign_targets_to_anchors", "sampler", "torch.cat", "torch.cat", "encode_boxes.encode_boxes", "losses.calc_objectness_loss", "losses.calc_reg_box_loss", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sampled_ind.numel"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.assign_targets_to_anchors", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.encode_boxes.encode_boxes", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.losses.calc_objectness_loss", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.losses.calc_reg_box_loss"], ["def", "calc_losses", "(", "\n", "matcher", ":", "Matcher", ",", "\n", "sampler", ":", "BalancedPositiveNegativeSampler", ",", "\n", "anchors", ":", "List", "[", "Tensor", "]", ",", "\n", "targets", ":", "List", "[", "Tensor", "]", ",", "\n", "objectness", ":", "Tensor", ",", "\n", "bbox_reg", ":", "Tensor", ",", "\n", "box_similarity", ":", "Callable", "[", "[", "Tensor", ",", "Tensor", "]", ",", "Tensor", "]", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "    ", "labels", ",", "matched_gt_boxes", "=", "assign_targets_to_anchors", "(", "matcher", ",", "anchors", ",", "targets", ",", "box_similarity", ")", "\n", "sampled_ind", ",", "sampled_pos_ind", "=", "sampler", "(", "labels", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "encode_boxes", "(", "torch", ".", "cat", "(", "anchors", ")", ",", "torch", ".", "cat", "(", "matched_gt_boxes", ")", ")", "\n", "\n", "objectness_loss", "=", "calc_objectness_loss", "(", "labels", "[", "sampled_ind", "]", ",", "objectness", "[", "sampled_ind", "]", ")", "\n", "box_reg_loss", "=", "calc_reg_box_loss", "(", "\n", "regression_targets", "[", "sampled_pos_ind", "]", ",", "\n", "bbox_reg", "[", "sampled_pos_ind", "]", ",", "\n", "sampled_ind", ".", "numel", "(", ")", ")", "\n", "\n", "return", "objectness_loss", ",", "box_reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.losses.calc_objectness_loss": [[55, 57], ["torch.binary_cross_entropy_with_logits", "objectness.squeeze", "labels.squeeze"], "function", ["None"], ["", "def", "calc_objectness_loss", "(", "labels", ",", "objectness", ")", ":", "\n", "    ", "return", "F", ".", "binary_cross_entropy_with_logits", "(", "objectness", ".", "squeeze", "(", ")", ",", "labels", ".", "squeeze", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.losses.calc_reg_box_loss": [[59, 66], ["torch.smooth_l1_loss"], "function", ["None"], ["", "def", "calc_reg_box_loss", "(", "regression_targets", ",", "pred_bbox_deltas", ",", "norm", ":", "int", ")", ":", "\n", "    ", "return", "F", ".", "smooth_l1_loss", "(", "\n", "pred_bbox_deltas", ",", "\n", "regression_targets", ",", "\n", "beta", "=", "1", "/", "9", ",", "\n", "reduction", "=", "'sum'", ",", "\n", ")", "/", "norm", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.BackboneMixin.out_channels": [[26, 29], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "out_channels", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.BackboneMixin.feature_map_sizes": [[30, 33], ["functools.lru_cache", "backbone._calc_feature_map_sizes"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone._calc_feature_map_sizes"], ["", "@", "lru_cache", "(", ")", "\n", "def", "feature_map_sizes", "(", "self", ",", "img_shape", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "512", ",", "512", ")", ")", "->", "Tuple", "[", "Tuple", "[", "int", ",", "int", "]", ",", "...", "]", ":", "\n", "        ", "return", "_calc_feature_map_sizes", "(", "self", ",", "img_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.VCompressResNet.out_channels": [[39, 42], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "out_channels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.VCompressResNet.__init__": [[43, 87], ["super().__init__", "tuple", "torch.nn.Conv2d", "norm_layer", "torch.nn.ReLU", "torch.nn.MaxPool2d", "backbone.VCompressResNet._make_layer", "backbone.VCompressResNet._make_layer", "backbone.VCompressResNet._make_layer", "backbone.VCompressResNet._make_layer", "backbone.VCompressResNet._init_layers", "backbone.VCompressResNet.init_from_resnet"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.VCompressResNet._make_layer", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.VCompressResNet._make_layer", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.VCompressResNet._make_layer", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.VCompressResNet._make_layer", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.VCompressResNet._init_layers", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.VCompressResNet.init_from_resnet"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "layers", ":", "Tuple", "[", "int", "]", "=", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "zero_init_residual", ":", "bool", "=", "True", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "norm_layer", "=", "None", ",", "\n", "channels", ":", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", "=", "(", "64", ",", "128", ",", "256", ",", "256", ")", ",", "\n", "init_from_resnet", ":", "bool", "=", "True", ",", "\n", "include_features_list", ":", "Tuple", "[", "int", ",", "...", "]", "=", "(", "2", ",", "3", ",", "4", ")", ",", "\n", "asymmetric", ":", "bool", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "include_features_list", "=", "tuple", "(", "include_features_list", ")", "\n", "\n", "self", ".", "_out_channels", "=", "channels", "[", "-", "1", "]", "\n", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "(", "7", ",", "7", ")", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "3", ",", "3", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "strides", "=", "(", "2", ",", "1", ")", "if", "asymmetric", "else", "(", "2", ",", "2", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "channels", "[", "0", "]", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "channels", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "strides", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "channels", "[", "2", "]", ",", "layers", "[", "2", "]", ",", "stride", "=", "strides", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "channels", "[", "3", "]", ",", "layers", "[", "3", "]", ",", "stride", "=", "strides", ")", "\n", "\n", "self", ".", "_init_layers", "(", "zero_init_residual", ")", "\n", "\n", "if", "init_from_resnet", ":", "\n", "            ", "self", ".", "init_from_resnet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.VCompressResNet.init_from_resnet": [[88, 115], ["torch.no_grad", "torchvision.models.resnet.resnet18", "zip", "backbone.VCompressResNet.named_modules", "torchvision.models.resnet.resnet18.named_modules", "isinstance", "b_weight.copy_", "[].view", "b_weight.copy_", "numpy.prod", "numpy.prod", "torch.randperm", "int", "r_weight.view"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "init_from_resnet", "(", "self", ")", ":", "\n", "        ", "resnet", "=", "resnet18", "(", "True", ",", "False", ")", "\n", "\n", "for", "(", "b_name", ",", "b_m", ")", ",", "(", "r_name", ",", "r_m", ")", "in", "zip", "(", "self", ".", "named_modules", "(", ")", ",", "resnet", ".", "named_modules", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "b_m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "assert", "b_name", "==", "r_name", ",", "f'{b_name} != {r_name}'", "\n", "\n", "b_weight", "=", "b_m", ".", "weight", "\n", "r_weight", "=", "r_m", ".", "weight", "\n", "\n", "if", "b_weight", ".", "shape", "==", "r_weight", ".", "shape", ":", "\n", "                    ", "b_weight", ".", "copy_", "(", "r_weight", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "assert", "b_weight", ".", "shape", "[", "-", "2", ":", "]", "==", "r_weight", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "b_channels", ",", "r_channels", "=", "b_weight", ".", "shape", "[", ":", "2", "]", ",", "r_weight", ".", "shape", "[", ":", "2", "]", "\n", "b_size", ",", "r_size", "=", "np", ".", "prod", "(", "b_channels", ")", ",", "np", ".", "prod", "(", "r_channels", ")", "\n", "ratio", "=", "r_size", "//", "b_size", "\n", "\n", "assert", "ratio", ">", "0", "\n", "\n", "indices", "=", "torch", ".", "randperm", "(", "int", "(", "b_size", ")", ")", "*", "ratio", "\n", "\n", "sub_weights", "=", "r_weight", ".", "view", "(", "-", "1", ",", "*", "b_weight", ".", "shape", "[", "-", "2", ":", "]", ")", "[", "indices", "]", ".", "view", "(", "b_weight", ".", "shape", ")", "\n", "b_weight", ".", "copy_", "(", "sub_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.VCompressResNet._init_layers": [[116, 123], ["ml.init_kaiming", "backbone.VCompressResNet.modules", "isinstance", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.init_weights.init_kaiming"], ["", "", "", "", "def", "_init_layers", "(", "self", ",", "zero_init_residual", ")", ":", "\n", "        ", "init_kaiming", "(", "self", ")", "\n", "\n", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.VCompressResNet._make_layer": [[124, 149], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "torchvision.models.resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "\n", "planes", ":", "int", ",", "\n", "blocks", ":", "int", ",", "\n", "stride", ":", "Union", "[", "int", ",", "Tuple", "[", "int", ",", "int", "]", "]", "=", "1", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "block", "=", "BasicBlock", "\n", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "\n", "if", "stride", "not", "in", "(", "(", "1", ",", "1", ")", ",", "1", ")", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "norm_layer", "=", "norm_layer", ")", "]", "\n", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.VCompressResNet._forward_impl": [[150, 169], ["backbone.VCompressResNet.conv1", "backbone.VCompressResNet.bn1", "backbone.VCompressResNet.relu", "backbone.VCompressResNet.maxpool", "enumerate", "layer", "features.append"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "        ", "features", ":", "List", "[", "Tensor", "]", "=", "[", "]", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "(", "\n", "self", ".", "layer1", ",", "\n", "self", ".", "layer2", ",", "\n", "self", ".", "layer3", ",", "\n", "self", ".", "layer4", ",", "\n", ")", ",", "1", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "include_features_list", ":", "\n", "                ", "features", ".", "append", "(", "x", ")", "\n", "\n", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.VCompressResNet.forward": [[170, 172], ["backbone.VCompressResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone.VCompressResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.backbone._calc_feature_map_sizes": [[174, 178], ["torch.no_grad", "torch.ones", "tuple", "tuple", "model"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_calc_feature_map_sizes", "(", "model", ":", "ModelType", ",", "img_shape", ":", "Tuple", "[", "int", ",", "int", "]", ")", ":", "\n", "    ", "img", "=", "torch", ".", "ones", "(", "1", ",", "1", ",", "*", "img_shape", ",", "device", "=", "model", ".", "device", ")", "\n", "return", "tuple", "(", "tuple", "(", "f", ".", "shape", "[", "-", "2", ":", "]", ")", "for", "f", "in", "model", "(", "img", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.FastSimulation.__init__": [[28, 37], ["torch.flip", "torch.flip", "torch.flip", "torch.flip", "angle_limits.AngleLimits", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cos", "torch.cos", "torch.cos", "torch.cos"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", ":", "torch", ".", "device", "=", "'cuda'", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "x", "=", "torch", ".", "arange", "(", "512", ",", "device", "=", "device", ")", "[", "None", ",", ":", ",", "None", "]", "\n", "self", ".", "y", "=", "torch", ".", "arange", "(", "512", ",", "device", "=", "device", ")", "[", ":", ",", "None", ",", "None", "]", "\n", "\n", "self", ".", "mask_coords", "=", "torch", ".", "flip", "(", "(", "self", ".", "x", "*", "torch", ".", "cos", "(", "self", ".", "y", "/", "512", "*", "pi", "/", "2", ")", ")", ".", "squeeze", "(", ")", ",", "(", "0", ",", ")", ")", "\n", "self", ".", "angle_limits", "=", "AngleLimits", "(", ")", "\n", "\n", "self", ".", "kernel1", "=", "torch", ".", "tensor", "(", "_SMOOTH_KERNEL", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "1", ",", "3", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.FastSimulation.simulate_img": [[38, 75], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fast_simulation.FastSimulation.simulate_labels", "fast_simulation.gen_intensities", "fast_simulation.FastSimulation.img_from_labels", "fast_simulation.mul_perlin", "fast_simulation.background_perlin", "fast_simulation.add_glass", "fast_simulation.add_linear_background", "fast_simulation.apply_poisson_noise", "fast_simulation.apply_speckle_noise", "fast_simulation.digitalize_img", "fast_simulation.apply_stretch", "fast_simulation.apply_stretch", "fast_simulation.FastSimulation.add_dark_area", "fast_simulation.add_masks", "fast_simulation.apply_kernel", "fast_simulation.apply_he", "fast_simulation.apply_clip_img", "utils.normalize"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.simulate_labels", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.gen_intensities", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.FastSimulation.img_from_labels", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.mul_perlin", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.background_perlin", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.add_glass", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.add_linear_background", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.apply_poisson_noise", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.apply_speckle_noise", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.digitalize_img", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.apply_stretch", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.apply_stretch", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.FastSimulation.add_dark_area", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.add_masks", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.apply_kernel", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.apply_he", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.apply_clip_img", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.normalize"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "simulate_img", "(", "self", ")", ":", "\n", "# generate material-independent peak positions & intensities", "\n", "        ", "boxes", ",", "pos", ",", "widths", ",", "a_pos", ",", "a_widths", "=", "self", ".", "simulate_labels", "(", ")", "\n", "intensities", "=", "gen_intensities", "(", "boxes", ".", "shape", "[", "0", "]", ",", "pos", ",", "widths", ")", "\n", "\n", "# create an image with 2D-Gaussian peaks", "\n", "img", "=", "self", ".", "img_from_labels", "(", "pos", ",", "widths", ",", "a_pos", ",", "a_widths", ",", "intensities", ")", "\n", "\n", "# rings modification (simulate grain orientation distribution)", "\n", "img", "=", "mul_perlin", "(", "img", ")", "\n", "\n", "# add background", "\n", "img", "=", "background_perlin", "(", "img", ")", "\n", "img", "=", "add_glass", "(", "img", ",", "self", ".", "x", ",", "self", ".", "y", ")", "\n", "img", "=", "add_linear_background", "(", "img", ")", "\n", "\n", "# add noise", "\n", "img", "=", "apply_poisson_noise", "(", "img", ")", "\n", "img", "=", "apply_speckle_noise", "(", "img", ")", "\n", "img", "=", "digitalize_img", "(", "img", ")", "\n", "img", "=", "apply_stretch", "(", "img", ")", "\n", "img", "=", "apply_stretch", "(", "img", ",", "(", "20", ",", "50", ")", ",", "(", "7", ",", "10", ")", ")", "\n", "\n", "# add masks", "\n", "self", ".", "add_dark_area", "(", "img", ")", "\n", "img", "=", "add_masks", "(", "img", ",", "self", ".", "mask_coords", ")", "\n", "\n", "# apply kernels & contrast correction", "\n", "img", "=", "apply_kernel", "(", "img", ",", "self", ".", "kernel1", ")", "\n", "img", "=", "apply_he", "(", "img", ")", "\n", "img", "=", "apply_clip_img", "(", "img", ")", "\n", "\n", "# rescale intensities to [0, 1]", "\n", "img", "=", "normalize", "(", "img", ")", "\n", "\n", "return", "img", ",", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.FastSimulation.simulate_boxes": [[76, 80], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fast_simulation.FastSimulation.simulate_labels"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.simulate_labels"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "simulate_boxes", "(", "self", ")", ":", "\n", "        ", "boxes", ",", "*", "_", "=", "self", ".", "simulate_labels", "(", ")", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.FastSimulation.simulate_labels": [[81, 103], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fast_simulation.FastSimulation.angle_limits.update_params", "fast_simulation.FastSimulation.simulate_labels"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.update_params", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.simulate_labels"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "simulate_labels", "(", "self", ")", ":", "\n", "        ", "self", ".", "angle_limits", ".", "update_params", "(", ")", "\n", "\n", "pos", ",", "widths", ",", "a_pos", ",", "a_widths", "=", "simulate_labels", "(", "self", ".", "device", ")", "\n", "pos", ",", "widths", ",", "a_pos", ",", "a_widths", "=", "filter_nms", "(", "pos", ",", "widths", ",", "a_pos", ",", "a_widths", ")", "\n", "\n", "boxes", "=", "torch", ".", "stack", "(", "[", "pos", "-", "widths", ",", "\n", "a_pos", "-", "a_widths", "*", "2", ",", "\n", "pos", "+", "widths", ",", "\n", "a_pos", "+", "a_widths", "*", "2", "]", ",", "1", ")", "# x0, y0, x1, y1", "\n", "\n", "boxes", ",", "indices", "=", "self", ".", "filter_dark_area", "(", "pos", ",", "boxes", ")", "\n", "\n", "if", "not", "boxes", ".", "shape", "[", "0", "]", ":", "\n", "            ", "return", "self", ".", "simulate_labels", "(", ")", "\n", "\n", "", "clamp_boxes", "(", "boxes", ")", "\n", "\n", "pos", ",", "widths", ",", "a_pos", ",", "a_widths", "=", "pos", "[", "indices", "]", ",", "widths", "[", "indices", "]", ",", "a_pos", "[", "indices", "]", ",", "a_widths", "[", "indices", "]", "\n", "\n", "return", "boxes", ",", "pos", ",", "widths", ",", "a_pos", ",", "a_widths", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.FastSimulation.add_dark_area": [[104, 108], ["fast_simulation.FastSimulation.angle_limits.min", "fast_simulation.FastSimulation.angle_limits.max", "dark_area_idx.squeeze"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.min", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max"], ["", "def", "add_dark_area", "(", "self", ",", "img", ")", ":", "\n", "        ", "dark_area_idx", "=", "(", "self", ".", "y", "<=", "self", ".", "angle_limits", ".", "min", "(", "self", ".", "x", ")", ")", "|", "(", "self", ".", "y", ">=", "self", ".", "angle_limits", ".", "max", "(", "self", ".", "x", ")", ")", "\n", "\n", "img", "[", "dark_area_idx", ".", "squeeze", "(", ")", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.FastSimulation.filter_dark_area": [[109, 119], ["torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "fast_simulation.FastSimulation.angle_limits.max", "fast_simulation.FastSimulation.angle_limits.min"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.min"], ["", "def", "filter_dark_area", "(", "self", ",", "pos", ",", "boxes", ",", "min_angle", ":", "float", "=", "40", ")", ":", "\n", "        ", "angles", "=", "(", "boxes", "[", ":", ",", "3", "]", "+", "boxes", "[", ":", ",", "1", "]", ")", "/", "2", "\n", "boxes", "[", ":", ",", "3", "]", "=", "torch", ".", "minimum", "(", "boxes", "[", ":", ",", "3", "]", ",", "self", ".", "angle_limits", ".", "max", "(", "pos", ")", ")", "\n", "boxes", "[", ":", ",", "1", "]", "=", "torch", ".", "maximum", "(", "boxes", "[", ":", ",", "1", "]", ",", "self", ".", "angle_limits", ".", "min", "(", "pos", ")", ")", "\n", "\n", "widths", "=", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "\n", "\n", "indices", "=", "(", "widths", ">=", "min_angle", ")", "&", "(", "angles", "-", "boxes", "[", ":", ",", "1", "]", ">", "-", "widths", "/", "2", ")", "&", "(", "angles", "<", "boxes", "[", ":", ",", "3", "]", ")", "\n", "\n", "return", "boxes", "[", "indices", "]", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.FastSimulation.img_from_labels": [[120, 128], ["random.random", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "img_from_labels", "(", "self", ",", "pos", ",", "widths", ",", "a_pos", ",", "a_widths", ",", "intensities", ")", ":", "\n", "        ", "power", "=", "2", "if", "random", ".", "random", "(", ")", ">", "0.2", "else", "4", "\n", "return", "(", "intensities", "[", "None", ",", "None", "]", "*", "(", "\n", "torch", ".", "exp", "(", "\n", "-", "torch", ".", "abs", "(", "self", ".", "x", "-", "pos", "[", "None", ",", "None", "]", ")", "**", "power", "/", "widths", "[", "None", ",", "None", "]", "**", "power", "/", "2", "\n", "-", "(", "self", ".", "y", "-", "a_pos", "[", "None", ",", "None", "]", ")", "**", "2", "/", "a_widths", "[", "None", ",", "None", "]", "**", "2", "/", "2", "\n", ")", "\n", ")", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.get_power": [[130, 137], ["random.randint"], "function", ["None"], ["", "", "def", "get_power", "(", ")", ":", "\n", "    ", "r", "=", "random", ".", "randint", "(", "2", ",", "4", ")", "\n", "if", "r", ">", "0.3", ":", "\n", "        ", "return", "2", "\n", "", "elif", "r", ">", "0.1", ":", "\n", "        ", "return", "3", "\n", "", "return", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.apply_kernel": [[139, 142], ["utils.with_probability", "torch.conv2d().squeeze", "torch.conv2d"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.with_probability"], ["", "@", "with_probability", "(", "0.7", ")", "\n", "def", "apply_kernel", "(", "img", ",", "kernel", ")", ":", "\n", "    ", "return", "F", ".", "conv2d", "(", "img", "[", "None", ",", "None", "]", ",", "kernel", ",", "padding", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.apply_he": [[144, 147], ["utils.with_probability", "utils.hist_equalization"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.with_probability", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.hist_equalization"], ["", "@", "with_probability", "(", "0.7", ")", "\n", "def", "apply_he", "(", "img", ")", ":", "\n", "    ", "return", "hist_equalization", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.apply_clip_img": [[149, 153], ["utils.with_probability", "torch.clamp_", "torch.clamp_", "img.mean().item", "img.std().item", "random.uniform", "img.mean", "img.std"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.with_probability"], ["", "@", "with_probability", "(", "0.3", ")", "\n", "def", "apply_clip_img", "(", "img", ")", ":", "\n", "    ", "m", ",", "s", "=", "img", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "img", ".", "std", "(", ")", ".", "item", "(", ")", "*", "random", ".", "uniform", "(", "2", ",", "4", ")", "\n", "return", "torch", ".", "clamp_", "(", "img", ",", "m", "-", "s", ",", "m", "+", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.mul_perlin": [[155, 160], ["utils.with_probability", "tuple", "numpy.random.uniform", "perlin.perlin_noise", "random.random", "len"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.with_probability", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.perlin.perlin_noise"], ["", "@", "with_probability", "(", "0.9", ")", "\n", "def", "mul_perlin", "(", "img", ")", ":", "\n", "    ", "rates", "=", "(", "3", ",", "4", ")", "if", "random", ".", "random", "(", ")", ">", "0.3", "else", "(", "3", ",", "4", ",", "5", ")", "\n", "weights", "=", "tuple", "(", "np", ".", "random", ".", "uniform", "(", "1", ",", "3", ",", "len", "(", "rates", ")", ")", ")", "\n", "return", "img", "*", "perlin_noise", "(", "rates", ",", "weights", ",", "amp", "=", "1", ",", "device", "=", "img", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation._bernoulli": [[162, 164], ["torch.bernoulli", "torch.bernoulli", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty", "torch.empty"], "function", ["None"], ["", "def", "_bernoulli", "(", "p", ",", "shape", ",", "device", ")", ":", "\n", "    ", "return", "torch", ".", "bernoulli", "(", "torch", ".", "empty", "(", "*", "shape", ",", "device", "=", "device", ")", ".", "uniform_", "(", "0", ",", "2", "*", "p", ")", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.background_perlin": [[166, 169], ["utils.with_probability", "perlin.perlin_noise", "img.max"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.with_probability", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.perlin.perlin_noise", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max"], ["", "@", "with_probability", "(", "0.2", ")", "\n", "def", "background_perlin", "(", "img", ")", ":", "\n", "    ", "return", "img", "+", "perlin_noise", "(", "(", "1", ",", ")", ",", "device", "=", "img", ".", "device", ")", "*", "img", ".", "max", "(", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.apply_speckle_noise": [[171, 176], ["utils.with_probability", "random.uniform", "torch.normal", "torch.normal"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.with_probability"], ["", "@", "with_probability", "(", "0.3", ")", "\n", "def", "apply_speckle_noise", "(", "img", ")", ":", "\n", "    ", "var", "=", "random", ".", "uniform", "(", "0.1", ",", "0.25", ")", "\n", "noise", "=", "torch", ".", "normal", "(", "0", ",", "var", ",", "img", ".", "shape", ",", "device", "=", "img", ".", "device", ")", "\n", "return", "img", "+", "img", "*", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.apply_poisson_noise": [[178, 182], ["utils.with_probability", "torch.poisson", "torch.poisson", "random.random", "utils.normalize"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.with_probability", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.normalize"], ["", "@", "with_probability", "(", "1", ")", "\n", "def", "apply_poisson_noise", "(", "img", ")", ":", "\n", "    ", "coef", "=", "random", ".", "random", "(", ")", "*", "50", "+", "50", "\n", "return", "torch", ".", "poisson", "(", "coef", "*", "normalize", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.digitalize_img": [[184, 188], ["utils.with_probability", "random.randint", "utils.normalize"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.with_probability", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.normalize"], ["", "@", "with_probability", "(", "0.9", ")", "\n", "def", "digitalize_img", "(", "img", ")", ":", "\n", "    ", "channels", "=", "random", ".", "randint", "(", "10", ",", "32", ")", "\n", "return", "(", "normalize", "(", "img", ")", "*", "channels", ")", ".", "round", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.add_glass": [[190, 206], ["utils.with_probability", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "torch.exp().squeeze", "torch.exp().squeeze", "utils.normalize", "random.random", "torch.exp", "torch.exp", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.with_probability", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.normalize"], ["", "@", "with_probability", "(", "1", ")", "\n", "def", "add_glass", "(", "img", ",", "x", ",", "y", ",", "pos_range", ":", "tuple", "=", "(", "40", ",", "300", ")", ")", ":", "\n", "    ", "power", "=", "2", "if", "random", ".", "random", "(", ")", ">", "0.5", "else", "1", "\n", "\n", "r", "=", "random", ".", "uniform", "(", "*", "pos_range", ")", "\n", "w", "=", "random", ".", "uniform", "(", "50", ",", "140", ")", "\n", "a", "=", "random", ".", "uniform", "(", "50", ",", "450", ")", "\n", "aw", "=", "random", ".", "uniform", "(", "250", ",", "1050", ")", "\n", "weight", "=", "random", ".", "uniform", "(", "0.5", ",", "1.2", ")", "\n", "\n", "if", "power", "==", "1", ":", "\n", "        ", "weight", "*=", "2", "\n", "w", "*=", "2", "\n", "\n", "", "gauss", "=", "torch", ".", "exp", "(", "-", "torch", ".", "abs", "(", "x", "-", "r", ")", "**", "power", "/", "2", "/", "w", "**", "power", "-", "(", "y", "-", "a", ")", "**", "2", "/", "2", "/", "aw", "**", "2", ")", ".", "squeeze", "(", ")", "\n", "return", "normalize", "(", "img", ")", "+", "gauss", "*", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.add_masks": [[208, 220], ["utils.with_probability", "random.randint", "numpy.random.uniform", "numpy.random.uniform", "zip", "abs"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.with_probability"], ["", "@", "with_probability", "(", "0.5", ")", "\n", "def", "add_masks", "(", "img", ",", "coords", ")", ":", "\n", "    ", "n", "=", "random", ".", "randint", "(", "1", ",", "2", ")", "\n", "rs", "=", "np", ".", "random", ".", "uniform", "(", "130", ",", "280", ",", "n", ")", "\n", "ws", "=", "np", ".", "random", ".", "uniform", "(", "3", ",", "6", ",", "n", ")", "\n", "\n", "if", "n", "==", "2", "and", "abs", "(", "rs", "[", "1", "]", "-", "rs", "[", "0", "]", ")", "<", "100", ":", "\n", "        ", "rs", ",", "ws", "=", "rs", "[", ":", "1", "]", ",", "ws", "[", ":", "1", "]", "\n", "\n", "", "for", "r", ",", "w", "in", "zip", "(", "rs", ",", "ws", ")", ":", "\n", "        ", "img", "[", "(", "coords", "<=", "(", "r", "+", "w", ")", ")", "&", "(", "coords", ">=", "(", "r", "-", "w", ")", ")", "]", "=", "0", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.add_linear_background": [[222, 226], ["utils.with_probability", "numpy.random.uniform", "utils.normalize", "[].repeat", "torch.linspace", "torch.linspace"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.with_probability", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.normalize"], ["", "@", "with_probability", "(", "0.9", ")", "\n", "def", "add_linear_background", "(", "img", ")", ":", "\n", "    ", "start", ",", "end", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.1", ",", "2", ")", "\n", "return", "normalize", "(", "img", ")", "+", "torch", ".", "linspace", "(", "start", ",", "end", ",", "512", ",", "device", "=", "img", ".", "device", ")", "[", "None", "]", ".", "repeat", "(", "512", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.apply_stretch": [[228, 238], ["utils.with_probability", "random.randint", "random.randint", "torch.nn.functional.interpolate().squeeze", "torch.nn.functional.interpolate().squeeze", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.with_probability"], ["", "@", "with_probability", "(", "0.8", ")", "\n", "def", "apply_stretch", "(", "img", ",", "x_range", ":", "tuple", "=", "(", "50", ",", "150", ")", ",", "step_range", ":", "tuple", "=", "(", "3", ",", "6", ")", ")", ":", "\n", "    ", "x_max", "=", "random", ".", "randint", "(", "*", "x_range", ")", "\n", "step", "=", "random", ".", "randint", "(", "*", "step_range", ")", "\n", "stretched", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "img", "[", ":", ":", "step", ",", ":", "x_max", "]", "[", "None", ",", "None", "]", ",", "\n", "(", "512", ",", "x_max", ")", "\n", ")", ".", "squeeze", "(", ")", "\n", "img", "[", ":", ",", ":", "x_max", "]", "=", "stretched", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.gen_intensities": [[240, 244], ["torch.rand", "torch.rand"], "function", ["None"], ["", "def", "gen_intensities", "(", "num", ":", "int", ",", "pos", ",", "ws", ")", ":", "\n", "    ", "intensities", "=", "torch", ".", "rand", "(", "num", ",", "device", "=", "pos", ".", "device", ")", "*", "15", "+", "5", "\n", "intensities", "[", "(", "pos", "<", "160", ")", "|", "(", "ws", "<", "2", ")", "]", "*=", "2.5", "\n", "return", "intensities", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.filter_nms": [[246, 250], ["torch.stack", "torch.stack", "torchvision.ops.nms", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "filter_nms", "(", "pos", ",", "widths", ",", "a_pos", ",", "a_widths", ",", "min_nms", ":", "float", "=", "0.001", ")", ":", "\n", "    ", "idx_boxes", "=", "torch", ".", "stack", "(", "[", "pos", "-", "widths", "*", "2.5", ",", "a_pos", "-", "a_widths", "*", "2", ",", "pos", "+", "widths", "*", "2.5", ",", "a_pos", "+", "a_widths", "*", "2", "]", ",", "1", ")", "\n", "indices", "=", "nms", "(", "idx_boxes", ",", "torch", ".", "ones", "(", "idx_boxes", ".", "shape", "[", "0", "]", ",", "device", "=", "idx_boxes", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", ",", "min_nms", ")", "\n", "return", "pos", "[", "indices", "]", ",", "widths", "[", "indices", "]", ",", "a_pos", "[", "indices", "]", ",", "a_widths", "[", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.simulate_labels": [[252, 262], ["random.randint", "random.uniform", "fast_simulation.torch_uniform", "fast_simulation.torch_uniform", "fast_simulation.torch_uniform", "torch.poisson", "torch.poisson", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.torch_uniform", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.torch_uniform", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.torch_uniform"], ["", "def", "simulate_labels", "(", "device", ":", "torch", ".", "device", "=", "'cuda'", ")", ":", "\n", "    ", "n", "=", "random", ".", "randint", "(", "2", ",", "200", ")", "\n", "\n", "width_central", "=", "random", ".", "uniform", "(", "0.8", ",", "4.5", ")", "\n", "pos", "=", "torch_uniform", "(", "70", ",", "500", ",", "n", ",", "device", "=", "device", ")", "\n", "widths", "=", "torch", ".", "poisson", "(", "torch", ".", "tensor", "(", "[", "width_central", "]", "*", "n", ",", "device", "=", "device", ")", "*", "50", ")", "/", "50", "\n", "a_pos", "=", "torch_uniform", "(", "-", "20", ",", "532", ",", "n", ",", "device", "=", "device", ")", "\n", "a_widths", "=", "torch_uniform", "(", "40", ",", "500", ",", "n", ",", "device", "=", "device", ")", "\n", "\n", "return", "pos", ",", "widths", ",", "a_pos", ",", "a_widths", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.torch_uniform": [[264, 266], ["torch.rand", "torch.rand"], "function", ["None"], ["", "def", "torch_uniform", "(", "low", "=", "0", ",", "high", "=", "1", ",", "*", "sizes", ",", "device", ":", "torch", ".", "device", "=", "'cuda'", ")", ":", "\n", "    ", "return", "torch", ".", "rand", "(", "*", "sizes", ",", "device", "=", "device", ")", "*", "(", "high", "-", "low", ")", "+", "low", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.clamp_boxes": [[273, 278], ["torch.clamp_", "torch.clamp_", "torch.clamp_", "torch.clamp_", "torch.clamp_", "torch.clamp_", "torch.clamp_", "torch.clamp_"], "function", ["None"], ["def", "clamp_boxes", "(", "boxes", ",", "size", ":", "int", "=", "512", ")", ":", "\n", "    ", "torch", ".", "clamp_", "(", "boxes", "[", ":", ",", "0", "]", ",", "min", "=", "0", ")", "\n", "torch", ".", "clamp_", "(", "boxes", "[", ":", ",", "1", "]", ",", "min", "=", "0", ")", "\n", "torch", ".", "clamp_", "(", "boxes", "[", ":", ",", "2", "]", ",", "max", "=", "size", ")", "\n", "torch", ".", "clamp_", "(", "boxes", "[", ":", ",", "3", "]", ",", "max", "=", "size", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.__init__": [[15, 28], ["angle_limits.AngleLimits.update_params"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.update_params"], ["    ", "def", "__init__", "(", "self", ",", "\n", "slope_range", ":", "tuple", "=", "(", "0", ",", "0.1", ")", ",", "\n", "size_ratio_range", ":", "tuple", "=", "(", "-", "0.05", ",", "0.05", ")", ",", "\n", "r_size", ":", "int", "=", "512", ",", "\n", "phi_size", ":", "int", "=", "512", "\n", ")", ":", "\n", "        ", "self", ".", "r_size", "=", "r_size", "\n", "self", ".", "phi_size", "=", "phi_size", "\n", "self", ".", "slope_range", "=", "slope_range", "\n", "self", ".", "size_ratio_range", "=", "size_ratio_range", "\n", "self", ".", "slope", ",", "self", ".", "size_ratio", "=", "None", ",", "None", "\n", "self", ".", "_x_size", ",", "self", ".", "_y_size", "=", "None", ",", "None", "\n", "self", ".", "update_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max": [[29, 35], ["torch.nan_to_num", "torch.arcsin"], "methods", ["None"], ["", "def", "max", "(", "self", ",", "r", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "(", "\n", "(", "r", "<=", "self", ".", "_y_size", ")", "+", "\n", "(", "r", ">", "self", ".", "_y_size", ")", "*", "\n", "torch", ".", "nan_to_num", "(", "torch", ".", "arcsin", "(", "self", ".", "_y_size", "/", "r", ")", ")", "/", "pi", "*", "2", "\n", ")", "*", "self", ".", "phi_size", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.min": [[36, 40], ["torch.maximum", "torch.nan_to_num", "torch.arccos"], "methods", ["None"], ["", "def", "min", "(", "self", ",", "r", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "dark_area", "=", "r", "*", "self", ".", "slope", "\n", "geometry_area", "=", "(", "r", ">", "self", ".", "_x_size", ")", "*", "torch", ".", "nan_to_num", "(", "torch", ".", "arccos", "(", "self", ".", "_x_size", "/", "r", ")", ")", "/", "pi", "*", "2", "*", "self", ".", "phi_size", "\n", "return", "torch", ".", "maximum", "(", "geometry_area", ",", "dark_area", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.update_params": [[41, 48], ["random.uniform", "random.uniform", "math.sin", "math.cos"], "methods", ["None"], ["", "def", "update_params", "(", "self", ")", ":", "\n", "        ", "self", ".", "slope", "=", "random", ".", "uniform", "(", "*", "self", ".", "slope_range", ")", "\n", "self", ".", "size_ratio", "=", "random", ".", "uniform", "(", "*", "self", ".", "size_ratio_range", ")", "\n", "x_weight", "=", "pi", "/", "4", "-", "self", ".", "size_ratio", "\n", "\n", "self", ".", "_x_size", "=", "self", ".", "r_size", "*", "sin", "(", "x_weight", ")", "\n", "self", ".", "_y_size", "=", "self", ".", "phi_size", "*", "cos", "(", "x_weight", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.sim_dataset.SimDataset.__init__": [[13, 16], ["fast_simulation.FastSimulation"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sim", ":", "FastSimulation", "=", "None", ",", "*", ",", "in_channels", ":", "int", "=", "1", ")", ":", "\n", "        ", "self", ".", "sim", "=", "sim", "or", "FastSimulation", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.sim_dataset.SimDataset.get_batch": [[17, 31], ["range", "sim_dataset.SimDataset.sim.simulate_img", "images.repeat.repeat.append", "boxes.append", "torch.stack", "images.repeat.repeat.repeat"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.FastSimulation.simulate_img", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "def", "get_batch", "(", "self", ",", "size", ":", "int", ")", ":", "\n", "        ", "images", ",", "boxes", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "_", "in", "range", "(", "size", ")", ":", "\n", "            ", "img", ",", "bx", "=", "self", ".", "sim", ".", "simulate_img", "(", ")", "\n", "images", ".", "append", "(", "img", ")", "\n", "boxes", ".", "append", "(", "bx", ")", "\n", "\n", "", "images", "=", "torch", ".", "stack", "(", "images", ")", "[", ":", ",", "None", "]", "\n", "\n", "if", "self", ".", "in_channels", ">", "1", ":", "\n", "            ", "images", "=", "images", ".", "repeat", "(", "1", ",", "self", ".", "in_channels", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "images", ",", "boxes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.perlin.perlin_noise": [[12, 23], ["zip", "len", "perlin.perlin_octave", "p.min", "p.max", "p.min"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.perlin.perlin_octave", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.min", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.min"], ["def", "perlin_noise", "(", "octave_rates", ":", "tuple", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", ",", "\n", "weights", ":", "tuple", "=", "None", ",", "\n", "amp", ":", "float", "=", "1.", ",", "size", ":", "int", "=", "512", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "weights", "=", "weights", "or", "[", "1", "]", "*", "len", "(", "octave_rates", ")", "\n", "\n", "p", "=", "0", "\n", "\n", "for", "rate", ",", "weight", "in", "zip", "(", "octave_rates", ",", "weights", ")", ":", "\n", "        ", "octave", "=", "2", "**", "rate", "\n", "p", "+=", "perlin_octave", "(", "octave", ",", "octave", ",", "size", "//", "octave", ",", "device", "=", "device", ")", "*", "weight", "\n", "", "return", "(", "(", "p", "-", "p", ".", "min", "(", ")", ")", "/", "(", "p", ".", "max", "(", ")", "-", "p", ".", "min", "(", ")", ")", "-", "0.5", ")", "*", "amp", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.perlin.perlin_octave": [[25, 40], ["torch.randn", "[].to", "[].to", "dots.permute().contiguous().view", "perlin.interp", "perlin.interp", "dots.permute().contiguous", "torch.linspace", "torch.linspace", "dots.permute"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.perlin.interp", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.perlin.interp"], ["", "def", "perlin_octave", "(", "width", ",", "height", ",", "scale", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "gx", ",", "gy", "=", "torch", ".", "randn", "(", "2", ",", "width", "+", "1", ",", "height", "+", "1", ",", "1", ",", "1", ",", "device", "=", "device", ")", "\n", "xs", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "scale", "+", "1", ")", "[", ":", "-", "1", ",", "None", "]", ".", "to", "(", "device", ")", "\n", "ys", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "scale", "+", "1", ")", "[", "None", ",", ":", "-", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "wx", "=", "1", "-", "interp", "(", "xs", ")", "\n", "wy", "=", "1", "-", "interp", "(", "ys", ")", "\n", "\n", "dots", "=", "0", "\n", "dots", "+=", "wx", "*", "wy", "*", "(", "gx", "[", ":", "-", "1", ",", ":", "-", "1", "]", "*", "xs", "+", "gy", "[", ":", "-", "1", ",", ":", "-", "1", "]", "*", "ys", ")", "\n", "dots", "+=", "(", "1", "-", "wx", ")", "*", "wy", "*", "(", "-", "gx", "[", "1", ":", ",", ":", "-", "1", "]", "*", "(", "1", "-", "xs", ")", "+", "gy", "[", "1", ":", ",", ":", "-", "1", "]", "*", "ys", ")", "\n", "dots", "+=", "wx", "*", "(", "1", "-", "wy", ")", "*", "(", "gx", "[", ":", "-", "1", ",", "1", ":", "]", "*", "xs", "-", "gy", "[", ":", "-", "1", ",", "1", ":", "]", "*", "(", "1", "-", "ys", ")", ")", "\n", "dots", "+=", "(", "1", "-", "wx", ")", "*", "(", "1", "-", "wy", ")", "*", "(", "-", "gx", "[", "1", ":", ",", "1", ":", "]", "*", "(", "1", "-", "xs", ")", "-", "gy", "[", "1", ":", ",", "1", ":", "]", "*", "(", "1", "-", "ys", ")", ")", "\n", "\n", "return", "dots", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "width", "*", "scale", ",", "height", "*", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.perlin.interp": [[42, 44], ["None"], "function", ["None"], ["", "def", "interp", "(", "t", ")", ":", "\n", "    ", "return", "6", "*", "t", "**", "5", "-", "15", "*", "t", "**", "4", "+", "10", "*", "t", "**", "3", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.hist_equalization": [[13, 23], ["torch.no_grad", "torch.linspace", "img.view", "torch.histc", "torch.cumsum", "utils.interp1d", "interp1d.view", "img.min", "img.max"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.interp1d", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.min", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max"], ["\n", "import", "torch", "\n", "from", "torch", "import", "Tensor", "\n", "\n", "\n", "class", "BalancedPositiveNegativeSampler", "(", "object", ")", ":", "\n", "    ", "\"\"\"\n    This class samples batches, ensuring that they contain a fixed proportion of positives\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "batch_size_per_image", ":", "int", ",", "positive_fraction", ":", "float", ")", ":", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.interp1d": [[25, 31], ["torch.searchsorted", "torch.clamp", "torch.finfo", "x.contiguous", "x_new.contiguous"], "function", ["None"], ["\n", "self", ".", "batch_size_per_image", "=", "batch_size_per_image", "\n", "self", ".", "positive_fraction", "=", "positive_fraction", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.with_probability": [[33, 41], ["func", "random.random"], "function", ["None"], ["        "]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.utils.normalize": [[43, 45], ["img.min", "img.max", "img.min"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.min", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.min"], []], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.segmentation_adapter.SegmentationAdapter.__init__": [[17, 25], ["torch.Module.__init__", "torch.BCELoss", "torch.BCELoss", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ":", "nn", ".", "Module", ",", "thresh", ":", "float", "=", "0.5", ",", "train_shape", ":", "tuple", "=", "(", "512", ",", "512", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "thresh", "=", "thresh", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "shape", "=", "train_shape", "\n", "self", ".", "x", "=", "torch", ".", "arange", "(", "train_shape", "[", "1", "]", ")", "[", "None", ",", ":", ",", "None", "]", "\n", "self", ".", "y", "=", "torch", ".", "arange", "(", "train_shape", "[", "0", "]", ")", "[", ":", ",", "None", ",", "None", "]", "\n", "self", ".", "criterion", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.segmentation_adapter.SegmentationAdapter.forward": [[26, 31], ["segmentation_adapter.SegmentationAdapter.loss", "segmentation_adapter.SegmentationAdapter.get_prediction_boxes"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.segmentation_adapter.SegmentationAdapter.loss", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.segmentation_adapter.SegmentationAdapter.get_prediction_boxes"], ["", "def", "forward", "(", "self", ",", "imgs", ",", "targets", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "loss", "(", "imgs", ",", "targets", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "get_prediction_boxes", "(", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.segmentation_adapter.SegmentationAdapter.get_prediction_boxes": [[32, 39], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "segmentation_adapter.SegmentationAdapter.model", "zip", "segmentation_adapter.SegmentationAdapter.pred_mask_to_boxes"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.segmentation_adapter.SegmentationAdapter.pred_mask_to_boxes"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_prediction_boxes", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "pred_masks", "=", "self", ".", "model", "(", "imgs", ")", "\n", "\n", "boxes", ",", "scores", "=", "zip", "(", "*", "[", "self", ".", "pred_mask_to_boxes", "(", "pred_mask", ")", "for", "pred_mask", "in", "pred_masks", "]", ")", "\n", "\n", "return", "boxes", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.segmentation_adapter.SegmentationAdapter.pred_mask_to_boxes": [[40, 44], ["segmentation_adapter.SegmentationAdapter._peak_mask_to_boxes", "pred_mask.detach"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.segmentation_adapter.SegmentationAdapter._peak_mask_to_boxes"], ["", "def", "pred_mask_to_boxes", "(", "self", ",", "pred_mask", ":", "Tensor", ")", ":", "\n", "        ", "peak_mask", "=", "(", "pred_mask", ".", "detach", "(", ")", "[", "0", "]", ">", "self", ".", "thresh", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "\n", "return", "self", ".", "_peak_mask_to_boxes", "(", "peak_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.segmentation_adapter.SegmentationAdapter._peak_mask_to_boxes": [[45, 63], ["skimage.measure.label", "range", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.atleast_1d", "torch.atleast_1d", "torch.atleast_1d", "torch.atleast_1d", "torchvision.ops.remove_small_boxes", "peak_mask.cpu().numpy", "skimage.measure.label.max", "numpy.where", "boxes_list.append", "torch.atleast_1d.append", "torch.atleast_1d.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "peak_mask.cpu", "col_idx.min", "row_idx.min", "col_idx.max", "row_idx.max", "peak_mask[].mean"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.min", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.min", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max"], ["", "def", "_peak_mask_to_boxes", "(", "self", ",", "peak_mask", ":", "Tensor", ")", ":", "\n", "        ", "peak_indices", "=", "separate_peaks", "(", "peak_mask", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "boxes_list", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "\n", "for", "peak_idx", "in", "range", "(", "1", ",", "peak_indices", ".", "max", "(", ")", ")", ":", "\n", "            ", "row_idx", ",", "col_idx", "=", "np", ".", "where", "(", "peak_indices", "==", "peak_idx", ")", "\n", "boxes_list", ".", "append", "(", "[", "col_idx", ".", "min", "(", ")", ",", "row_idx", ".", "min", "(", ")", ",", "col_idx", ".", "max", "(", ")", ",", "row_idx", ".", "max", "(", ")", "]", ")", "# x0, y0, x1, y1", "\n", "scores", ".", "append", "(", "(", "peak_mask", "[", "row_idx", ",", "col_idx", "]", ".", "mean", "(", ")", "-", "self", ".", "thresh", ")", "/", "(", "1", "-", "self", ".", "thresh", ")", ")", "# rescale to [0, 1]", "\n", "\n", "", "boxes", "=", "torch", ".", "tensor", "(", "boxes_list", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "peak_mask", ".", "device", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "scores", "=", "torch", ".", "atleast_1d", "(", "torch", ".", "tensor", "(", "scores", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "peak_mask", ".", "device", ")", ")", "\n", "\n", "keep", "=", "remove_small_boxes", "(", "boxes", ",", "1e-2", ")", "\n", "boxes", ",", "scores", "=", "boxes", "[", "keep", "]", ",", "scores", "[", "keep", "]", "\n", "\n", "return", "boxes", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.segmentation_adapter.SegmentationAdapter.loss": [[64, 70], ["segmentation_adapter.SegmentationAdapter.model", "segmentation_adapter.SegmentationAdapter.targets_to_masks", "segmentation_adapter.SegmentationAdapter.criterion"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.segmentation_adapter.SegmentationAdapter.targets_to_masks"], ["", "def", "loss", "(", "self", ",", "imgs", ",", "targets", ")", "->", "dict", ":", "\n", "        ", "masks_pred", "=", "self", ".", "model", "(", "imgs", ")", "\n", "true_masks", "=", "self", ".", "targets_to_masks", "(", "targets", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "masks_pred", ",", "true_masks", ")", "\n", "return", "{", "\n", "'cross_entropy_loss'", ":", "loss", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.segmentation_adapter.SegmentationAdapter.targets_to_masks": [[72, 75], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "segmentation_adapter.SegmentationAdapter.boxes_to_masks"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.segmentation_adapter.SegmentationAdapter.boxes_to_masks"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "targets_to_masks", "(", "self", ",", "targets", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "self", ".", "boxes_to_masks", "(", "boxes", ")", "for", "boxes", "in", "targets", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.segmentation_adapter.SegmentationAdapter.boxes_to_masks": [[76, 88], ["segmentation_adapter.SegmentationAdapter.x.to", "segmentation_adapter.SegmentationAdapter.y.to"], "methods", ["None"], ["", "def", "boxes_to_masks", "(", "self", ",", "boxes", ":", "Tensor", ")", ":", "\n", "        ", "x0", ",", "y0", ",", "x1", ",", "y1", "=", "boxes", ".", "T", "\n", "x", ",", "y", "=", "self", ".", "x", ".", "to", "(", "boxes", ")", ",", "self", ".", "y", ".", "to", "(", "boxes", ")", "\n", "\n", "true_mask", "=", "(", "\n", "(", "x0", "[", "None", ",", "None", "]", "<", "x", ")", "&", "\n", "(", "x1", "[", "None", ",", "None", "]", ">", "x", ")", "&", "\n", "(", "y0", "[", "None", ",", "None", "]", "<", "y", ")", "&", "\n", "(", "y1", "[", "None", ",", "None", "]", ">", "y", ")", "\n", ")", ".", "sum", "(", "-", "1", ")", ".", "to", "(", "torch", ".", "float", ")", "[", "None", "]", "\n", "\n", "return", "true_mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.model_adapter.ModelAdapter.__init__": [[12, 15], ["torch.nn.Module.__init__", "model.cuda"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.model_adapter.ModelAdapter.forward": [[16, 29], ["imgs.repeat.repeat.repeat", "model_adapter.ModelAdapter.model", "model_adapter._convert_targets_to_dicts"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.model_adapter._convert_targets_to_dicts"], ["", "def", "forward", "(", "self", ",", "imgs", ",", "targets", "=", "None", ")", ":", "\n", "        ", "imgs", "=", "imgs", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "targets", "=", "_convert_targets_to_dicts", "(", "targets", ")", "\n", "", "res", "=", "self", ".", "model", "(", "imgs", ",", "targets", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "res", "\n", "\n", "", "boxes", "=", "[", "r", "[", "'boxes'", "]", "for", "r", "in", "res", "]", "\n", "scores", "=", "[", "r", "[", "'scores'", "]", "for", "r", "in", "res", "]", "\n", "\n", "return", "boxes", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.model_adapter._convert_targets_to_dicts": [[31, 37], ["torch.ones"], "function", ["None"], ["", "", "def", "_convert_targets_to_dicts", "(", "targets", ")", ":", "\n", "    ", "return", "[", "\n", "{", "\n", "'boxes'", ":", "target", ",", "'labels'", ":", "torch", ".", "ones", "(", "target", ".", "shape", "[", "0", "]", ",", "device", "=", "target", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "}", "\n", "for", "target", "in", "targets", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet.UNet.__init__": [[13, 15], ["segmentation_adapter.SegmentationAdapter.__init__", "unet_backbone.UNetBackbone"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "thresh", ":", "float", "=", "0.5", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "UNetBackbone", "(", ")", ",", "thresh", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet.UNet.default_model": [[16, 19], ["cls().cuda", "cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "default_model", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "cls", "(", ")", ".", "cuda", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.faster_rcnn.FasterRCNN.default_model": [[14, 18], ["torchvision.models.detection.fasterrcnn_resnet50_fpn", "cls"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "default_model", "(", "cls", ",", "pretrained", ":", "bool", "=", "True", ")", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "detection", ".", "fasterrcnn_resnet50_fpn", "(", "pretrained_backbone", "=", "pretrained", ",", "num_classes", "=", "2", ")", "\n", "return", "cls", "(", "model", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone.UNetBackbone.__init__": [[17, 38], ["torch.Module.__init__", "unet_backbone._double_conv", "unet_backbone._double_conv", "unet_backbone._double_conv", "unet_backbone._double_conv", "unet_backbone._double_conv", "unet_backbone._up_conv", "unet_backbone._double_conv", "unet_backbone._up_conv", "unet_backbone._double_conv", "unet_backbone._up_conv", "unet_backbone._double_conv", "unet_backbone._up_conv", "unet_backbone._double_conv", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sigmoid", "torch.Sigmoid", "ml.init_kaiming"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._double_conv", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._double_conv", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._double_conv", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._double_conv", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._double_conv", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._up_conv", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._double_conv", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._up_conv", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._double_conv", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._up_conv", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._double_conv", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._up_conv", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._double_conv", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.init_weights.init_kaiming"], ["    ", "def", "__init__", "(", "self", ",", "out_channels", ":", "int", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "_double_conv", "(", "1", ",", "64", ")", "\n", "self", ".", "conv2", "=", "_double_conv", "(", "64", ",", "128", ")", "\n", "self", ".", "conv3", "=", "_double_conv", "(", "128", ",", "256", ")", "\n", "self", ".", "conv4", "=", "_double_conv", "(", "256", ",", "512", ")", "\n", "self", ".", "bottleneck", "=", "_double_conv", "(", "512", ",", "1024", ")", "\n", "self", ".", "up_conv5", "=", "_up_conv", "(", "1024", ",", "512", ")", "\n", "self", ".", "conv5", "=", "_double_conv", "(", "1024", ",", "512", ")", "\n", "self", ".", "up_conv6", "=", "_up_conv", "(", "512", ",", "256", ")", "\n", "self", ".", "conv6", "=", "_double_conv", "(", "512", ",", "256", ")", "\n", "self", ".", "up_conv7", "=", "_up_conv", "(", "256", ",", "128", ")", "\n", "self", ".", "conv7", "=", "_double_conv", "(", "256", ",", "128", ")", "\n", "self", ".", "up_conv8", "=", "_up_conv", "(", "128", ",", "64", ")", "\n", "self", ".", "conv8", "=", "_double_conv", "(", "128", ",", "64", ")", "\n", "self", ".", "conv9", "=", "nn", ".", "Conv2d", "(", "64", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n", "init_kaiming", "(", "self", ",", "nonlinearity", "=", "'relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone.UNetBackbone.forward": [[39, 74], ["unet_backbone.UNetBackbone.conv1", "unet_backbone.UNetBackbone.maxpool", "unet_backbone.UNetBackbone.conv2", "unet_backbone.UNetBackbone.maxpool", "unet_backbone.UNetBackbone.conv3", "unet_backbone.UNetBackbone.maxpool", "unet_backbone.UNetBackbone.conv4", "unet_backbone.UNetBackbone.maxpool", "unet_backbone.UNetBackbone.bottleneck", "unet_backbone.UNetBackbone.up_conv5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_backbone.UNetBackbone.conv5", "unet_backbone.UNetBackbone.up_conv6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_backbone.UNetBackbone.conv6", "unet_backbone.UNetBackbone.up_conv7", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_backbone.UNetBackbone.conv7", "unet_backbone.UNetBackbone.up_conv8", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_backbone.UNetBackbone.conv8", "unet_backbone.UNetBackbone.conv9", "unet_backbone.UNetBackbone.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "conv1", ")", "\n", "\n", "conv2", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "conv2", ")", "\n", "\n", "conv3", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "conv3", ")", "\n", "\n", "conv4", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "conv4", ")", "\n", "\n", "bottleneck", "=", "self", ".", "bottleneck", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "up_conv5", "(", "bottleneck", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv4", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "up_conv6", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "up_conv7", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "up_conv8", "(", "x", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "conv1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._double_conv": [[76, 84], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU"], "function", ["None"], ["", "", "def", "_double_conv", "(", "in_channels", ",", "out_channels", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "# added BN layers compared with the vanilla Unet", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.model_zoo.unet_backbone._up_conv": [[87, 90], ["torch.ConvTranspose2d"], "function", ["None"], ["", "def", "_up_conv", "(", "in_channels", ",", "out_channels", ")", ":", "\n", "    ", "return", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.get_params_num": [[27, 29], ["tools.get_params_num"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.get_params_num"], ["    ", "def", "get_params_num", "(", "self", ":", "ModelType", ")", "->", "int", ":", "\n", "        ", "return", "get_params_num", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.get_model_size": [[30, 32], ["tools.get_model_size"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.get_model_size"], ["", "def", "get_model_size", "(", "self", ":", "ModelType", ")", "->", "str", ":", "\n", "        ", "return", "get_model_size", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.cpu_state_dict": [[33, 35], ["model_mixin._convert_state_dict", "model_mixin.ModelMixin.state_dict"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin._convert_state_dict", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.state_dict"], ["", "def", "cpu_state_dict", "(", "self", ":", "ModelType", ")", "->", "'OrderedDict[str, Tensor]'", ":", "\n", "        ", "return", "_convert_state_dict", "(", "self", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.load_model": [[36, 45], ["torch.load", "model_mixin.ModelMixin.load_state_dict", "model_mixin.ModelMixin.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.load", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.load_state_dict", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.load_state_dict"], ["", "def", "load_model", "(", "self", ":", "ModelType", ",", "name", ":", "str", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "name", ")", "\n", "if", "'model'", "in", "state_dict", ":", "\n", "            ", "try", ":", "\n", "                ", "model", "=", "self", ".", "load_state_dict", "(", "state_dict", "[", "'model'", "]", ")", "\n", "return", "model", "\n", "", "except", "RuntimeError", ":", "\n", "                ", "pass", "\n", "", "", "return", "self", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.save_model": [[46, 48], ["torch.save", "model_mixin.ModelMixin.state_dict"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.save", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.state_dict"], ["", "def", "save_model", "(", "self", ":", "ModelType", ",", "name", ":", "str", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "state_dict", "(", ")", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.is_cuda": [[49, 52], ["next", "model_mixin.ModelMixin.parameters"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_cuda", "(", "self", ":", "ModelType", ")", "->", "bool", ":", "\n", "        ", "return", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "is_cuda", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.device": [[53, 56], ["next", "model_mixin.ModelMixin.parameters"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ":", "ModelType", ")", "->", "torch", ".", "device", ":", "\n", "        ", "return", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.default_model": [[57, 60], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "default_model", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.evaluate_fps": [[61, 72], ["tools.EvaluateFPS", "model_mixin.ModelMixin.eval", "tqdm.trange", "dset.get_batch", "torch.cuda.synchronize", "tools.EvaluateFPS.", "model_mixin.ModelMixin.", "torch.cuda.synchronize"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.sim_dataset.SimDataset.get_batch"], ["", "def", "evaluate_fps", "(", "self", ":", "ModelType", ",", "dset", ":", "SimDataset", ",", "num", ":", "int", "=", "1000", ",", "*", ",", "disable_tqdm", ":", "bool", "=", "True", ")", "->", "EvaluateFPS", ":", "\n", "        ", "evaluate_fps", "=", "EvaluateFPS", "(", ")", "\n", "self", ".", "eval", "(", ")", "\n", "for", "_", "in", "trange", "(", "num", ",", "disable", "=", "disable_tqdm", ")", ":", "\n", "            ", "imgs", ",", "_", "=", "dset", ".", "get_batch", "(", "1", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "with", "evaluate_fps", "(", ")", ":", "\n", "                ", "_", "=", "self", "(", "imgs", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "", "", "return", "evaluate_fps", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin._convert_state_dict": [[74, 76], ["torch.device", "collections.OrderedDict", "v.to", "state_dict.items"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.device"], ["", "", "def", "_convert_state_dict", "(", "state_dict", ",", "device", ":", "torch", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "    ", "return", "OrderedDict", "(", "[", "(", "k", ",", "v", ".", "to", "(", "device", ")", ")", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.postprocessing.batch_filter": [[16, 34], ["len", "torch.cat", "torchvision.ops.batched_nms", "modified_faster_rcnn.utils.num_per_level_from_levels().tolist", "torch.cat", "torch.cat", "torch.sort", "predictions.split", "scores.split", "torch.full_like", "modified_faster_rcnn.utils.num_per_level_from_levels", "enumerate"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.modified_faster_rcnn.utils.num_per_level_from_levels"], ["def", "batch_filter", "(", "\n", "predictions", ":", "List", "[", "Tensor", "]", ",", "scores", ":", "List", "[", "Tensor", "]", ",", "\n", "nms_level", ":", "float", "=", "0.1", ",", "\n", "score_level", ":", "float", "=", "0.1", "\n", ")", "->", "Tuple", "[", "List", "[", "Tensor", "]", ",", "List", "[", "Tensor", "]", "]", ":", "\n", "\n", "    ", "num_imgs", "=", "len", "(", "scores", ")", "\n", "img_indices", "=", "torch", ".", "cat", "(", "[", "torch", ".", "full_like", "(", "s", ",", "i", ")", "for", "i", ",", "s", "in", "enumerate", "(", "scores", ")", "]", ")", "\n", "predictions", ",", "scores", "=", "torch", ".", "cat", "(", "predictions", ")", ",", "torch", ".", "cat", "(", "scores", ")", "\n", "keep", "=", "scores", ">", "score_level", "\n", "predictions", ",", "scores", ",", "img_indices", "=", "predictions", "[", "keep", "]", ",", "scores", "[", "keep", "]", ",", "img_indices", "[", "keep", "]", "\n", "keep", "=", "batched_nms", "(", "predictions", ",", "scores", ",", "img_indices", ",", "nms_level", ")", "\n", "keep", "=", "torch", ".", "sort", "(", "keep", ")", ".", "values", "\n", "predictions", ",", "scores", ",", "img_indices", "=", "predictions", "[", "keep", "]", ",", "scores", "[", "keep", "]", ",", "img_indices", "[", "keep", "]", "\n", "img_nums", "=", "num_per_level_from_levels", "(", "img_indices", ",", "num_imgs", ")", ".", "tolist", "(", ")", "\n", "predictions", ",", "scores", "=", "predictions", ".", "split", "(", "img_nums", ")", ",", "scores", ".", "split", "(", "img_nums", ")", "\n", "\n", "return", "predictions", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.postprocessing.filter_nms": [[36, 42], ["torchvision.ops.nms", "scores.numel"], "function", ["None"], ["", "def", "filter_nms", "(", "predictions", ":", "Tensor", ",", "scores", ":", "Tensor", ",", "level", ":", "float", "=", "0.1", ")", ":", "\n", "    ", "if", "not", "scores", ".", "numel", "(", ")", ":", "\n", "        ", "return", "predictions", ",", "scores", "\n", "\n", "", "indices", "=", "nms", "(", "predictions", ",", "scores", ",", "level", ")", "\n", "return", "predictions", "[", "indices", "]", ",", "scores", "[", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.postprocessing.filter_score": [[44, 53], ["scores.numel"], "function", ["None"], ["", "def", "filter_score", "(", "predictions", ":", "Tensor", ",", "scores", ":", "Tensor", ",", "level", ":", "float", "=", "0.1", ")", ":", "\n", "    ", "if", "not", "level", ":", "\n", "        ", "return", "predictions", ",", "scores", "\n", "\n", "", "if", "not", "scores", ".", "numel", "(", ")", ":", "\n", "        ", "return", "predictions", ",", "scores", "\n", "\n", "", "indices", "=", "scores", ">", "level", "\n", "return", "predictions", "[", "indices", "]", ",", "scores", "[", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.postprocessing.standard_filter": [[55, 63], ["postprocessing.filter_score", "postprocessing.filter_nms"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.postprocessing.filter_score", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.postprocessing.filter_nms"], ["", "def", "standard_filter", "(", "predictions", ":", "Tensor", ",", "scores", ":", "Tensor", ",", "\n", "nms_level", ":", "float", "=", "0.1", ",", "\n", "score_level", ":", "float", "=", "0.8", ",", "\n", ")", ":", "\n", "    ", "predictions", ",", "scores", "=", "filter_score", "(", "predictions", ",", "scores", ",", "score_level", ")", "\n", "predictions", ",", "scores", "=", "filter_nms", "(", "predictions", ",", "scores", ",", "nms_level", ")", "\n", "\n", "return", "predictions", ",", "scores", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.init_model_from_config.init_model_from_config": [[11, 23], ["model_cls", "isinstance", "ValueError", "model_cls.load_model", "type"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.load_model"], ["def", "init_model_from_config", "(", "config", ":", "Config", ")", "->", "ModelType", ":", "\n", "    ", "model_cls", "=", "config", ".", "model", ".", "model", "\n", "\n", "if", "not", "isinstance", "(", "model_cls", ",", "type", "(", "ModelMixin", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unexpected model class {model_cls}\"", ")", "\n", "\n", "", "if", "config", ".", "model", ".", "use_default", ":", "\n", "        ", "model_cls", "=", "model_cls", ".", "default_model", "\n", "", "model", "=", "model_cls", "(", "**", "config", ".", "model", ".", "params", ")", "\n", "if", "config", ".", "model", ".", "init_from_model", ":", "\n", "        ", "model", ".", "load_model", "(", "config", ".", "model", ".", "init_from_model", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.SaveBestModel.__init__": [[19, 33], ["pathlib.Path"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "loss_key", ":", "str", ",", "\n", "model_path", ":", "Path", "=", "None", ",", "\n", "load_best_model", ":", "bool", "=", "False", ",", "\n", "init_loss", ":", "float", "=", "None", ",", "\n", "save_every_epoch", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_state_dict", "=", "None", "\n", "self", ".", "_loss_key", "=", "loss_key", "\n", "self", ".", "_val_loss", "=", "init_loss", "\n", "self", ".", "_best_epoch", "=", "0", "\n", "self", ".", "_load_best_model", "=", "load_best_model", "\n", "self", ".", "model_path", "=", "model_path", "or", "Path", "(", "'models'", ")", "\n", "self", ".", "save_every_epoch", "=", "save_every_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.SaveBestModel.clear": [[34, 38], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "_state_dict", "=", "None", "\n", "self", ".", "_val_loss", "=", "None", "\n", "self", ".", "_best_epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.SaveBestModel.save_model": [[39, 42], ["torch.save"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.save"], ["", "def", "save_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "model_path", "and", "self", ".", "_state_dict", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "_state_dict", ",", "self", ".", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.SaveBestModel.load_best_model": [[43, 46], ["trainer.model.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.load_state_dict"], ["", "", "def", "load_best_model", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "if", "self", ".", "_state_dict", ":", "\n", "            ", "trainer", ".", "model", ".", "load_state_dict", "(", "self", ".", "_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.SaveBestModel.start_training": [[47, 51], ["trainer_callbacks.SaveBestModel.clear"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.clear"], ["", "", "def", "start_training", "(", "self", ",", "trainer", ":", "Trainer", ")", ":", "\n", "        ", "self", ".", "clear", "(", ")", "\n", "if", "'best_epoch'", "in", "trainer", ".", "callback_params", ":", "\n", "            ", "del", "trainer", ".", "callback_params", "[", "'best_epoch'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.SaveBestModel.end_training": [[52, 58], ["trainer_callbacks.SaveBestModel.load_best_model", "trainer_callbacks.SaveBestModel.save_model"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.SaveBestModel.load_best_model", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.SaveBestModel.save_model"], ["", "", "def", "end_training", "(", "self", ",", "trainer", ":", "Trainer", ")", ":", "\n", "        ", "if", "self", ".", "_load_best_model", ":", "\n", "            ", "self", ".", "load_best_model", "(", "trainer", ")", "\n", "\n", "", "if", "not", "self", ".", "save_every_epoch", ":", "\n", "            ", "self", ".", "save_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.SaveBestModel.end_batch": [[59, 68], ["trainer.model.cpu_state_dict", "trainer_callbacks.SaveBestModel.save_model"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.cpu_state_dict", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.SaveBestModel.save_model"], ["", "", "def", "end_batch", "(", "self", ",", "trainer", ":", "Trainer", ",", "batch_num", ":", "int", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "_val_loss", "is", "None", "or", "self", ".", "_val_loss", ">", "trainer", ".", "losses", "[", "self", ".", "_loss_key", "]", "[", "-", "1", "]", ":", "\n", "            ", "self", ".", "_val_loss", "=", "trainer", ".", "losses", "[", "self", ".", "_loss_key", "]", "[", "-", "1", "]", "\n", "self", ".", "_state_dict", "=", "trainer", ".", "model", ".", "cpu_state_dict", "(", ")", "\n", "self", ".", "_best_epoch", "=", "batch_num", "\n", "trainer", ".", "callback_params", "[", "'best_epoch'", "]", "=", "self", ".", "_best_epoch", "\n", "\n", "if", "self", ".", "save_every_epoch", ":", "\n", "                ", "self", ".", "save_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.LRSchedulerCallback.__init__": [[71, 78], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scheduler_class", ",", "*", ",", "freq", ":", "int", "=", "1", ",", "fixed_after", ":", "int", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_scheduler_class", "=", "scheduler_class", "\n", "self", ".", "_freq", "=", "freq", "\n", "self", ".", "_fixed_after", "=", "fixed_after", "\n", "self", ".", "_kwargs", "=", "kwargs", "\n", "self", ".", "lr_list", "=", "[", "]", "\n", "self", ".", "scheduler", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.LRSchedulerCallback.start_training": [[79, 81], ["trainer_callbacks.LRSchedulerCallback._scheduler_class"], "methods", ["None"], ["", "def", "start_training", "(", "self", ",", "trainer", ":", "Trainer", ")", "->", "None", ":", "\n", "        ", "self", ".", "scheduler", "=", "self", ".", "_scheduler_class", "(", "trainer", ".", "optim", ",", "**", "self", ".", "_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.LRSchedulerCallback.end_batch": [[82, 86], ["trainer_callbacks.LRSchedulerCallback.lr_list.append", "trainer_callbacks.LRSchedulerCallback.scheduler.step", "bool"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "def", "end_batch", "(", "self", ",", "trainer", ":", "Trainer", ",", "batch_num", ":", "int", ")", "->", "None", ":", "\n", "        ", "if", "not", "(", "batch_num", "+", "1", ")", "%", "self", ".", "_freq", "and", "not", "(", "bool", "(", "self", ".", "_fixed_after", ")", "and", "batch_num", ">=", "self", ".", "_fixed_after", ")", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "", "self", ".", "lr_list", ".", "append", "(", "trainer", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.LRSchedulerCallback.clear": [[87, 89], ["trainer_callbacks.LRSchedulerCallback.lr_list.clear"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.clear"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "lr_list", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer_callbacks.ExpDecayLRCallback.__init__": [[92, 95], ["trainer_callbacks.LRSchedulerCallback.__init__"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ":", "float", "=", "0.99", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'gamma'", "]", "=", "gamma", "\n", "super", "(", ")", ".", "__init__", "(", "lr_scheduler", ".", "ExponentialLR", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.Trainer.__init__": [[22, 31], ["losses.Losses", "optim", "model.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ":", "ModelType", ",", "dset", ",", "lr", ":", "float", ",", "optim", ":", "Type", "[", "torch", ".", "optim", ".", "Optimizer", "]", "=", "None", ")", ":", "\n", "        ", "optim", "=", "optim", "or", "torch", ".", "optim", ".", "AdamW", "\n", "self", ".", "losses", "=", "Losses", "(", ")", "\n", "self", ".", "dset", "=", "dset", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optim", "=", "optim", "(", "model", ".", "parameters", "(", ")", ",", "lr", ")", "\n", "self", ".", "callback_params", "=", "{", "}", "\n", "self", ".", "lrs", "=", "[", "]", "\n", "self", ".", "training_duration", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.Trainer.state_dict": [[32, 44], ["trainer.Trainer.losses.state_dict", "numpy.array", "trainer.Trainer.model.cpu_state_dict", "trainer.Trainer.optim.state_dict"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.state_dict", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.model_mixin.ModelMixin.cpu_state_dict", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.state_dict"], ["", "def", "state_dict", "(", "self", ",", "include_optim", ":", "bool", "=", "False", ")", ":", "\n", "        ", "state_dict", "=", "{", "\n", "'losses'", ":", "self", ".", "losses", ".", "state_dict", "(", ")", ",", "\n", "'lrs'", ":", "np", ".", "array", "(", "self", ".", "lrs", ")", ",", "\n", "'model'", ":", "self", ".", "model", ".", "cpu_state_dict", "(", ")", ",", "\n", "'training_duration'", ":", "self", ".", "training_duration", ",", "\n", "}", "\n", "\n", "if", "include_optim", ":", "\n", "            ", "state_dict", "[", "'optim'", "]", "=", "self", ".", "optim", ".", "state_dict", "(", ")", "\n", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.Trainer.train": [[46, 85], ["time.perf_counter", "trainer.Trainer.model.train", "trainer.StackedTrainerCallbacks.start_training", "trainer.StackedTrainerCallbacks.end_training", "isinstance", "trainer.StackedTrainerCallbacks", "tqdm.tqdm.tqdm", "range", "time.perf_counter", "trainer.Trainer.dset.get_batch", "trainer.Trainer.optim.zero_grad", "trainer.Trainer.model", "trainer.Trainer.losses.add_dict", "sum", "loss.item.item.backward", "trainer.Trainer.optim.step", "loss.item.item.item", "pbar.update", "pbar.set_description", "losses.append", "trainer.Trainer.lrs.append", "trainer.StackedTrainerCallbacks.end_batch", "trainer.Trainer.values"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.Trainer.train", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.StackedTrainerCallbacks.start_training", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.StackedTrainerCallbacks.end_training", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.sim_dataset.SimDataset.get_batch", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.losses.Losses.add_dict", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.StackedTrainerCallbacks.end_batch"], ["", "def", "train", "(", "self", ",", "\n", "num_batches", ":", "int", "=", "2000", ",", "\n", "batch_size", ":", "int", "=", "8", ",", "\n", "callbacks", ":", "Tuple", "[", "'TrainerCallback'", ",", "...", "]", "or", "'TrainerCallback'", "=", "(", ")", ",", "\n", "disable_tqdm", ":", "bool", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "start_time", "=", "perf_counter", "(", ")", "\n", "\n", "if", "not", "isinstance", "(", "callbacks", ",", "TrainerCallback", ")", ":", "\n", "            ", "callbacks", "=", "StackedTrainerCallbacks", "(", "callbacks", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "losses", "=", "[", "]", "\n", "\n", "callbacks", ".", "start_training", "(", "self", ")", "\n", "\n", "with", "tqdm", "(", "total", "=", "num_batches", ",", "disable", "=", "disable_tqdm", ")", "as", "pbar", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "imgs", ",", "targets", "=", "self", ".", "dset", ".", "get_batch", "(", "batch_size", ")", "\n", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "loss_dict", "=", "self", ".", "model", "(", "imgs", ",", "targets", ")", "\n", "self", ".", "losses", ".", "add_dict", "(", "loss_dict", ")", "\n", "loss", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "loss", "=", "loss", ".", "item", "(", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "pbar", ".", "set_description", "(", "f'Loss = {loss:.3e}'", ")", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "self", ".", "lrs", ".", "append", "(", "self", ".", "lr", ")", "\n", "\n", "callbacks", ".", "end_batch", "(", "self", ",", "i", ")", "\n", "\n", "", "", "callbacks", ".", "end_training", "(", "self", ")", "\n", "\n", "self", ".", "training_duration", "=", "perf_counter", "(", ")", "-", "start_time", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.Trainer.lr": [[90, 93], ["None"], "methods", ["None"], ["", "@", "lr", ".", "setter", "\n", "def", "lr", "(", "self", ",", "lr", ":", "float", ")", ":", "\n", "        ", "self", ".", "optim", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.TrainerCallback.start_training": [[96, 98], ["None"], "methods", ["None"], ["    ", "def", "start_training", "(", "self", ",", "trainer", ":", "Trainer", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.TrainerCallback.end_training": [[99, 101], ["None"], "methods", ["None"], ["", "def", "end_training", "(", "self", ",", "trainer", ":", "Trainer", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.TrainerCallback.end_batch": [[102, 104], ["None"], "methods", ["None"], ["", "def", "end_batch", "(", "self", ",", "trainer", ":", "Trainer", ",", "batch_num", ":", "int", ")", "->", "None", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.StackedTrainerCallbacks.__init__": [[107, 109], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "callbacks", ":", "Tuple", "[", "TrainerCallback", ",", "...", "]", ")", ":", "\n", "        ", "self", ".", "callbacks", "=", "tuple", "(", "callbacks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.StackedTrainerCallbacks.start_training": [[110, 113], ["c.start_training"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.StackedTrainerCallbacks.start_training"], ["", "def", "start_training", "(", "self", ",", "trainer", ":", "Trainer", ")", "->", "None", ":", "\n", "        ", "for", "c", "in", "self", ".", "callbacks", ":", "\n", "            ", "c", ".", "start_training", "(", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.StackedTrainerCallbacks.end_training": [[114, 117], ["c.end_training"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.StackedTrainerCallbacks.end_training"], ["", "", "def", "end_training", "(", "self", ",", "trainer", ":", "Trainer", ")", "->", "None", ":", "\n", "        ", "for", "c", "in", "self", ".", "callbacks", ":", "\n", "            ", "c", ".", "end_training", "(", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.StackedTrainerCallbacks.end_batch": [[118, 121], ["c.end_batch"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.StackedTrainerCallbacks.end_batch"], ["", "", "def", "end_batch", "(", "self", ",", "trainer", ":", "Trainer", ",", "batch_num", ":", "int", ")", ":", "\n", "        ", "for", "c", "in", "self", ".", "callbacks", ":", "\n", "            ", "c", ".", "end_batch", "(", "trainer", ",", "batch_num", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.init_weights.init_kaiming": [[10, 17], ["model.modules", "isinstance", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_"], "function", ["None"], ["def", "init_kaiming", "(", "model", ",", "nonlinearity", ":", "str", "=", "'relu'", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.train_from_config.train_from_config": [[12, 27], ["trainer.Trainer", "isinstance", "trainer.Trainer.train", "type", "callbacks.append", "tuple", "train_config.lr_scheduler"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.trainer.Trainer.train", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["def", "train_from_config", "(", "model", ",", "dset", ",", "config", ":", "Config", ")", "->", "Trainer", ":", "\n", "    ", "train_config", "=", "config", ".", "training", "\n", "trainer", "=", "Trainer", "(", "model", ",", "dset", ",", "train_config", ".", "init_lr", ")", "\n", "callbacks", "=", "[", "]", "\n", "\n", "if", "isinstance", "(", "train_config", ".", "lr_scheduler", ",", "type", "(", "LRSchedulerCallback", ")", ")", ":", "\n", "        ", "callbacks", ".", "append", "(", "train_config", ".", "lr_scheduler", "(", "**", "train_config", ".", "lr_scheduler_kwargs", ")", ")", "\n", "\n", "", "trainer", ".", "train", "(", "\n", "train_config", ".", "num_batches", ",", "\n", "train_config", ".", "batch_size", ",", "\n", "tuple", "(", "callbacks", ")", ",", "\n", "disable_tqdm", "=", "config", ".", "general", ".", "disable_tqdm", "\n", ")", "\n", "return", "trainer", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.losses.Losses.__init__": [[14, 16], ["collections.defaultdict.__init__"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__"], ["import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "from", "torch", "import", "Tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.losses.Losses.state_dict": [[17, 19], ["numpy.array", "losses.Losses.items"], "methods", ["None"], ["from", ".", "encode_boxes", "import", "encode_boxes", "\n", "from", ".", "utils", "import", "(", "\n", "assign_targets_to_anchors", ",", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.losses.Losses.add_dict": [[20, 25], ["epoch_loss.items", "isinstance", "losses.Losses.append", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["Matcher", ",", "\n", "BalancedPositiveNegativeSampler", ",", "\n", ")", "\n", "\n", "__all__", "=", "[", "\n", "'calc_losses'", ",", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.losses.Losses.add_batch_dict": [[26, 31], ["batch_loss.items", "isinstance", "losses.Losses.append", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["'calc_reg_box_loss'", ",", "\n", "'calc_objectness_loss'", "\n", "]", "\n", "\n", "\n", "def", "calc_losses", "(", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.losses.Losses.on_epoch_end": [[32, 46], ["losses.Losses.items", "k.startswith", "losses.Losses.append", "to_append.append", "to_delete.append", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["matcher", ":", "Matcher", ",", "\n", "sampler", ":", "BalancedPositiveNegativeSampler", ",", "\n", "anchors", ":", "List", "[", "Tensor", "]", ",", "\n", "targets", ":", "List", "[", "Tensor", "]", ",", "\n", "objectness", ":", "Tensor", ",", "\n", "bbox_reg", ":", "Tensor", ",", "\n", "box_similarity", ":", "Callable", "[", "[", "Tensor", ",", "Tensor", "]", ",", "Tensor", "]", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "    ", "labels", ",", "matched_gt_boxes", "=", "assign_targets_to_anchors", "(", "matcher", ",", "anchors", ",", "targets", ",", "box_similarity", ")", "\n", "sampled_ind", ",", "sampled_pos_ind", "=", "sampler", "(", "labels", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "dim", "=", "0", ")", "\n", "regression_targets", "=", "encode_boxes", "(", "torch", ".", "cat", "(", "anchors", ")", ",", "torch", ".", "cat", "(", "matched_gt_boxes", ")", ")", "\n", "\n", "objectness_loss", "=", "calc_objectness_loss", "(", "labels", "[", "sampled_ind", "]", ",", "objectness", "[", "sampled_ind", "]", ")", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.__init__": [[10, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "matched_num", ":", "int", "=", "0", ",", "fp_num", ":", "int", "=", "0", ",", "fn_num", ":", "int", "=", "0", ")", ":", "\n", "        ", "self", ".", "_matched_num", "=", "matched_num", "\n", "self", ".", "_fp_num", "=", "fp_num", "\n", "self", ".", "_fn_num", "=", "fn_num", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.clear": [[15, 19], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "_matched_num", "=", "0", "\n", "self", ".", "_fp_num", "=", "0", "\n", "self", ".", "_fn_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.matched_num": [[20, 23], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "matched_num", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_matched_num", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.fp_num": [[24, 27], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "fp_num", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_fp_num", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.fn_num": [[28, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "fn_num", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_fn_num", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.recall": [[32, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recall", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "_matched_num", "/", "(", "self", ".", "_matched_num", "+", "self", ".", "_fn_num", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.precision": [[39, 45], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "precision", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "_matched_num", "/", "(", "self", ".", "_matched_num", "+", "self", ".", "_fp_num", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.accuracy": [[46, 52], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "accuracy", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "_matched_num", "/", "(", "self", ".", "_matched_num", "+", "self", ".", "_fn_num", "+", "self", ".", "_fp_num", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.__add__": [[53, 61], ["scalar_metrics.ScalarMetrics", "isinstance"], "methods", ["None"], ["", "", "def", "__add__", "(", "self", ",", "other", ":", "'ScalarMetrics'", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "ScalarMetrics", ")", ":", "\n", "            ", "return", "NotImplemented", "\n", "\n", "", "return", "ScalarMetrics", "(", "\n", "self", ".", "matched_num", "+", "other", ".", "matched_num", ",", "\n", "self", ".", "fp_num", "+", "other", ".", "fp_num", ",", "\n", "self", ".", "fn_num", "+", "other", ".", "fn_num", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.__iadd__": [[63, 70], ["scalar_metrics.ScalarMetrics.append", "isinstance"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "def", "__iadd__", "(", "self", ",", "other", ":", "'ScalarMetrics'", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "ScalarMetrics", ")", ":", "\n", "            ", "return", "NotImplemented", "\n", "\n", "", "self", ".", "append", "(", "other", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.append": [[71, 75], ["None"], "methods", ["None"], ["", "def", "append", "(", "self", ",", "other", ":", "'ScalarMetrics'", ")", ":", "\n", "        ", "self", ".", "_matched_num", "+=", "other", ".", "matched_num", "\n", "self", ".", "_fp_num", "+=", "other", ".", "fp_num", "\n", "self", ".", "_fn_num", "+=", "other", ".", "fn_num", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.__repr__": [[76, 78], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'ScalarMetrics(matched_num={self.matched_num}, fp_num={self.fp_num}, fn_num={self.fn_num})'", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.print": [[79, 81], ["scalar_metrics.ScalarMetrics.print"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.print"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "metrics_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.scalar_metrics.ScalarMetrics.metrics_str": [[82, 85], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "metrics_str", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f'Accuracy = {self.accuracy * 100:.2f} %'", "f'; recall = {self.recall * 100:.2f} %'"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.calc_metrics.get_sim_metrics": [[27, 60], ["torch.no_grad", "model.eval", "tqdm.trange", "scalar_metrics.ScalarMetrics", "full_metrics.FullMetrics", "sim.simulate_img", "model", "ml.standard_filter", "calc_metrics_func"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.fast_simulation.FastSimulation.simulate_img", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.postprocessing.standard_filter"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_sim_metrics", "(", "model", ",", "sim", ",", "num", ":", "int", "=", "10000", ",", "\n", "nms_level", ":", "float", "=", "0.1", ",", "\n", "score_level", ":", "float", "=", "0.5", ",", "\n", "match_threshold", ":", "float", "=", "0.1", ",", "\n", "match_criterion", ":", "Union", "[", "MatchCriterion", ",", "str", "]", "=", "MatchCriterion", ".", "iou", ",", "\n", "disable_tqdm", ":", "bool", "=", "False", ",", "\n", "scalar", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", "->", "FullMetrics", "or", "ScalarMetrics", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "calc_metrics_func", "=", "get_scalar_metrics", "if", "scalar", "else", "get_full_metrics", "\n", "\n", "metrics", "=", "ScalarMetrics", "(", ")", "if", "scalar", "else", "FullMetrics", "(", ")", "\n", "\n", "for", "_", "in", "trange", "(", "num", ",", "disable", "=", "disable_tqdm", ")", ":", "\n", "        ", "img", ",", "boxes", "=", "sim", ".", "simulate_img", "(", ")", "\n", "predictions", ",", "scores", "=", "model", "(", "img", "[", "None", ",", "None", "]", ")", "\n", "predictions", ",", "scores", "=", "standard_filter", "(", "\n", "predictions", "[", "0", "]", ",", "scores", "[", "0", "]", ",", "\n", "nms_level", "=", "nms_level", ",", "\n", "score_level", "=", "score_level", "\n", ")", "\n", "metrics", "+=", "calc_metrics_func", "(", "\n", "boxes", ",", "predictions", ",", "scores", ",", "\n", "score_threshold", "=", "0", ",", "\n", "match_threshold", "=", "match_threshold", ",", "\n", "match_criterion", "=", "match_criterion", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.calc_metrics.get_batch_sim_metrics": [[62, 95], ["torch.no_grad", "tqdm.tqdm", "scalar_metrics.ScalarMetrics", "full_metrics.FullMetrics", "zip", "ml.standard_filter", "calc_metrics_func", "len"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.postprocessing.standard_filter"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_batch_sim_metrics", "(", "\n", "targets", ":", "List", "[", "Tensor", "]", ",", "\n", "predictions", ":", "List", "[", "Tensor", "]", ",", "\n", "scores", ":", "List", "[", "Tensor", "]", ",", "\n", "nms_level", ":", "float", "=", "0.1", ",", "\n", "score_threshold", ":", "float", "=", "0.5", ",", "\n", "match_threshold", ":", "float", "=", "0.1", ",", "\n", "match_criterion", ":", "MatchCriterion", "=", "MatchCriterion", ".", "iou", ",", "\n", "disable_tqdm", ":", "bool", "=", "True", ",", "\n", "scalar", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", "\n", "\n", ")", "->", "FullMetrics", "or", "ScalarMetrics", ":", "\n", "    ", "calc_metrics_func", "=", "get_scalar_metrics", "if", "scalar", "else", "get_full_metrics", "\n", "\n", "metrics", "=", "ScalarMetrics", "(", ")", "if", "scalar", "else", "FullMetrics", "(", ")", "\n", "\n", "for", "t", ",", "p", ",", "s", "in", "tqdm", "(", "zip", "(", "targets", ",", "predictions", ",", "scores", ")", ",", "total", "=", "len", "(", "targets", ")", ",", "disable", "=", "disable_tqdm", ")", ":", "\n", "        ", "p", ",", "s", "=", "standard_filter", "(", "\n", "p", ",", "s", ",", "\n", "nms_level", "=", "nms_level", ",", "\n", "score_level", "=", "score_threshold", "\n", ")", "\n", "metrics", "+=", "calc_metrics_func", "(", "\n", "t", ",", "p", ",", "s", ",", "\n", "score_threshold", "=", "0", ",", "\n", "match_threshold", "=", "match_threshold", ",", "\n", "match_criterion", "=", "match_criterion", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.calc_metrics.get_scalar_metrics": [[97, 121], ["torch.no_grad", "isinstance", "ml.filter_score", "match_criteria.get_match_function", "match_criteria.get_match_function.", "scalar_metrics.ScalarMetrics", "match_criteria.MatchCriterion"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.postprocessing.filter_score", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.match_criteria.get_match_function"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_scalar_metrics", "(", "\n", "target", ":", "Tensor", ",", "\n", "predicted", ":", "Tensor", ",", "\n", "scores", ":", "Tensor", ",", "\n", "score_threshold", ":", "float", "=", "0.5", ",", "\n", "match_threshold", ":", "float", "=", "0.1", ",", "\n", "match_criterion", ":", "Union", "[", "MatchCriterion", ",", "str", "]", "=", "MatchCriterion", ".", "iou", ",", "\n", "**", "kwargs", "\n", ")", "->", "ScalarMetrics", ":", "\n", "    ", "if", "isinstance", "(", "match_criterion", ",", "str", ")", ":", "\n", "        ", "match_criterion", "=", "MatchCriterion", "(", "match_criterion", ")", "\n", "\n", "", "predicted", ",", "scores", "=", "filter_score", "(", "predicted", ",", "scores", ",", "score_threshold", ")", "\n", "\n", "func", "=", "get_match_function", "(", "match_criterion", ")", "\n", "\n", "metric_mtx", ",", "row_ind", ",", "col_ind", "=", "func", "(", "target", ",", "predicted", ",", "match_threshold", ",", "**", "kwargs", ")", "\n", "\n", "num_targets", ",", "num_predicted", "=", "target", ".", "shape", "[", "0", "]", ",", "predicted", ".", "shape", "[", "0", "]", "\n", "\n", "matched_num", "=", "row_ind", ".", "size", "\n", "\n", "return", "ScalarMetrics", "(", "matched_num", ",", "num_predicted", "-", "matched_num", ",", "num_targets", "-", "matched_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.calc_metrics.get_full_metrics": [[123, 176], ["torch.no_grad", "isinstance", "torch.from_numpy", "ml.filter_score", "match_criteria.get_match_function", "match_criteria.get_match_function.", "calc_metrics._get_nonselected_indices", "calc_metrics._get_nonselected_indices", "full_metrics.FullMetrics", "match_criteria.MatchCriterion", "full_metrics.MatchedPair", "full_metrics.FalsePositive", "full_metrics.FalseNegative", "numpy.ones", "zip", "zip", "zip", "len", "len", "len", "target[].tolist", "predicted[].tolist", "iou_mtx[].tolist", "scores[].tolist", "intensities[].tolist", "predicted[].tolist", "scores[].tolist", "target[].tolist", "intensities[].tolist"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.postprocessing.filter_score", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.match_criteria.get_match_function", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.calc_metrics._get_nonselected_indices", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.calc_metrics._get_nonselected_indices"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_full_metrics", "(", "\n", "target", ":", "Tensor", ",", "\n", "predicted", ":", "Tensor", ",", "\n", "scores", ":", "Tensor", ",", "\n", "intensities", ":", "np", ".", "ndarray", "=", "None", ",", "\n", "score_threshold", ":", "float", "=", "0.5", ",", "\n", "match_threshold", ":", "float", "=", "1.", ",", "\n", "match_criterion", ":", "Union", "[", "MatchCriterion", ",", "str", "]", "=", "MatchCriterion", ".", "q_rel", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "if", "intensities", "is", "None", ":", "\n", "        ", "intensities", "=", "-", "np", ".", "ones", "(", "target", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "if", "isinstance", "(", "match_criterion", ",", "str", ")", ":", "\n", "        ", "match_criterion", "=", "MatchCriterion", "(", "match_criterion", ")", "\n", "\n", "", "intensities", "=", "torch", ".", "from_numpy", "(", "intensities", ")", "\n", "\n", "predicted", ",", "scores", "=", "filter_score", "(", "predicted", ",", "scores", ",", "score_threshold", ")", "\n", "\n", "func", "=", "get_match_function", "(", "match_criterion", ")", "\n", "\n", "iou_mtx", ",", "row_ind", ",", "col_ind", "=", "func", "(", "target", ",", "predicted", ",", "match_threshold", ",", "**", "kwargs", ")", "\n", "\n", "missed_indices", "=", "_get_nonselected_indices", "(", "row_ind", ",", "target", ".", "shape", "[", "0", "]", ")", "\n", "fp_indices", "=", "_get_nonselected_indices", "(", "col_ind", ",", "predicted", ".", "shape", "[", "0", "]", ")", "\n", "\n", "matched_pairs", "=", "[", "\n", "MatchedPair", "(", "t_box", ",", "p_box", ",", "iou", ",", "score", ",", "intensity", ")", "\n", "for", "t_box", ",", "p_box", ",", "iou", ",", "score", ",", "intensity", "in", "zip", "(", "\n", "target", "[", "row_ind", "]", ".", "tolist", "(", ")", ",", "\n", "predicted", "[", "col_ind", "]", ".", "tolist", "(", ")", ",", "\n", "iou_mtx", "[", "row_ind", ",", "col_ind", "]", ".", "tolist", "(", ")", ",", "\n", "scores", "[", "col_ind", "]", ".", "tolist", "(", ")", ",", "\n", "intensities", "[", "row_ind", "]", ".", "tolist", "(", ")", "\n", ")", "\n", "]", "\n", "\n", "false_positives", "=", "[", "\n", "FalsePositive", "(", "p_box", ",", "score", ")", "for", "p_box", ",", "score", "in", "zip", "(", "\n", "predicted", "[", "fp_indices", "]", ".", "tolist", "(", ")", ",", "scores", "[", "fp_indices", "]", ".", "tolist", "(", ")", "\n", ")", "\n", "]", "\n", "\n", "false_negatives", "=", "[", "\n", "FalseNegative", "(", "t_box", ",", "intensity", ")", "for", "t_box", ",", "intensity", "in", "zip", "(", "\n", "target", "[", "missed_indices", "]", ".", "tolist", "(", ")", ",", "intensities", "[", "missed_indices", "]", ".", "tolist", "(", ")", "\n", ")", "\n", "]", "\n", "\n", "return", "FullMetrics", "(", "\n", "matched_pairs", ",", "false_positives", ",", "false_negatives", ",", "\n", "[", "len", "(", "matched_pairs", ")", "]", ",", "[", "len", "(", "false_positives", ")", "]", ",", "[", "len", "(", "false_negatives", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.calc_metrics._get_nonselected_indices": [[179, 181], ["numpy.array", "list", "set().difference", "set", "numpy.arange"], "function", ["None"], ["", "def", "_get_nonselected_indices", "(", "selected_indices", ":", "np", ".", "ndarray", ",", "size", ":", "int", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "list", "(", "set", "(", "np", ".", "arange", "(", "size", ")", ")", ".", "difference", "(", "selected_indices", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.match_criteria.get_match_function": [[23, 33], ["ValueError"], "function", ["None"], ["", "def", "get_match_function", "(", "\n", "match_criterion", ":", "MatchCriterion", "\n", ")", ":", "\n", "    ", "if", "match_criterion", "==", "MatchCriterion", ".", "iou", ":", "\n", "        ", "return", "get_iou_match", "\n", "", "if", "match_criterion", "==", "MatchCriterion", ".", "q", ":", "\n", "        ", "return", "get_q_match", "\n", "", "if", "match_criterion", "==", "MatchCriterion", ".", "q_rel", ":", "\n", "        ", "return", "get_q_rel_match", "\n", "", "raise", "ValueError", "(", "f'Unknown match criterion {match_criterion}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.match_criteria.get_match": [[35, 42], ["match_criteria.get_match_function"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.match_criteria.get_match_function"], ["", "def", "get_match", "(", "\n", "match_criterion", ":", "MatchCriterion", ",", "\n", "target", ":", "Tensor", ",", "predicted", ":", "Tensor", ",", "\n", "thresh", ":", "float", "=", "0", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "return", "get_match_function", "(", "match_criterion", ")", "(", "target", ",", "predicted", ",", "thresh", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.match_criteria.get_iou_match": [[44, 54], ["torchvision.ops.box_iou().cpu().numpy", "scipy.optimize.linear_sum_assignment", "torchvision.ops.box_iou().cpu", "torchvision.ops.box_iou"], "function", ["None"], ["", "def", "get_iou_match", "(", "\n", "target", ":", "Tensor", ",", "predicted", ":", "Tensor", ",", "thresh", ":", "float", "=", "0", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "iou_mtx", "=", "box_iou", "(", "target", ",", "predicted", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "row_ind", ",", "col_ind", "=", "linear_sum_assignment", "(", "-", "iou_mtx", ")", "\n", "\n", "indices", "=", "iou_mtx", "[", "row_ind", ",", "col_ind", "]", ">", "thresh", "\n", "row_ind", ",", "col_ind", "=", "row_ind", "[", "indices", "]", ",", "col_ind", "[", "indices", "]", "\n", "\n", "return", "iou_mtx", ",", "row_ind", ",", "col_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.match_criteria.get_q_match": [[56, 67], ["match_criteria.calc_box_dq_mtx", "scipy.optimize.linear_sum_assignment"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.match_criteria.calc_box_dq_mtx"], ["", "def", "get_q_match", "(", "\n", "target", ":", "Tensor", ",", "predicted", ":", "Tensor", ",", "\n", "thresh", ":", "float", "=", "10.", ",", "rel", ":", "bool", "=", "False", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "q_mtx", "=", "calc_box_dq_mtx", "(", "target", ",", "predicted", ",", "rel", "=", "rel", ",", "**", "kwargs", ")", "\n", "row_ind", ",", "col_ind", "=", "linear_sum_assignment", "(", "q_mtx", ")", "\n", "\n", "indices", "=", "q_mtx", "[", "row_ind", ",", "col_ind", "]", "<", "thresh", "\n", "row_ind", ",", "col_ind", "=", "row_ind", "[", "indices", "]", ",", "col_ind", "[", "indices", "]", "\n", "\n", "return", "q_mtx", ",", "row_ind", ",", "col_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.match_criteria.get_q_rel_match": [[69, 74], ["match_criteria.get_q_match"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.match_criteria.get_q_match"], ["", "def", "get_q_rel_match", "(", "\n", "target", ":", "Tensor", ",", "predicted", ":", "Tensor", ",", "\n", "thresh", ":", "float", "=", "10", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "return", "get_q_match", "(", "target", ",", "predicted", ",", "thresh", ",", "rel", "=", "True", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.match_criteria.calc_box_dq_mtx": [[76, 89], ["torchvision.ops.box_iou().cpu().numpy", "numpy.abs", "torchvision.ops.box_iou().cpu", "qt[].cpu().numpy", "qp[].cpu().numpy", "torchvision.ops.box_iou", "qt[].cpu", "qp[].cpu"], "function", ["None"], ["", "def", "calc_box_dq_mtx", "(", "target", ",", "predicted", ",", "rel", ":", "bool", "=", "False", ",", "min_iou", ":", "float", "=", "0.5", ",", "**", "kwargs", ")", ":", "\n", "    ", "iou_mtx", "=", "box_iou", "(", "target", ",", "predicted", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "qt", "=", "(", "target", "[", ":", ",", "0", "]", "+", "target", "[", ":", ",", "2", "]", ")", "/", "2", "\n", "qp", "=", "(", "predicted", "[", ":", ",", "0", "]", "+", "predicted", "[", ":", ",", "2", "]", ")", "/", "2", "\n", "q_mtx", "=", "np", ".", "abs", "(", "qt", "[", ":", ",", "None", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "-", "qp", "[", "None", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "rel", ":", "\n", "        ", "widths", "=", "(", "target", "[", ":", ",", "2", "]", "-", "target", "[", ":", ",", "0", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "q_mtx", "=", "q_mtx", "/", "widths", "[", ":", ",", "None", "]", "\n", "\n", "", "q_mtx", "[", "iou_mtx", "<=", "min_iou", "]", "=", "1e7", "# inf not supported by linear_sum_assignment", "\n", "\n", "return", "q_mtx", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.calc_predictions.get_sim_predictions": [[17, 43], ["torch.no_grad", "model.eval", "tqdm.trange", "dset.get_batch", "model", "ml.batch_filter", "calc_predictions._list_to_cpu", "calc_predictions._list_to_cpu", "calc_predictions._list_to_cpu"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.sim_dataset.SimDataset.get_batch", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.ml.postprocessing.batch_filter", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.calc_predictions._list_to_cpu", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.calc_predictions._list_to_cpu", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.calc_predictions._list_to_cpu"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_sim_predictions", "(", "\n", "model", ",", "dset", ",", "\n", "num", ":", "int", "=", "1000", ",", "\n", "batch_num", ":", "int", "=", "10", ",", "\n", "min_score", ":", "float", "=", "0.1", ",", "\n", "max_nms", ":", "float", "=", "0.1", ",", "\n", "disable_tqdm", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "predictions_list", "=", "[", "]", "\n", "scores_list", "=", "[", "]", "\n", "targets_list", "=", "[", "]", "\n", "\n", "for", "_", "in", "trange", "(", "num", ",", "disable", "=", "disable_tqdm", ")", ":", "\n", "        ", "imgs", ",", "boxes", "=", "dset", ".", "get_batch", "(", "batch_num", ")", "\n", "\n", "predictions", ",", "scores", "=", "model", "(", "imgs", ")", "\n", "predictions", ",", "scores", "=", "batch_filter", "(", "predictions", ",", "scores", ",", "max_nms", ",", "min_score", ")", "\n", "\n", "targets_list", "+=", "_list_to_cpu", "(", "boxes", ")", "\n", "scores_list", "+=", "_list_to_cpu", "(", "scores", ")", "\n", "predictions_list", "+=", "_list_to_cpu", "(", "predictions", ")", "\n", "\n", "", "return", "targets_list", ",", "predictions_list", ",", "scores_list", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.calc_predictions._list_to_cpu": [[45, 47], ["a.detach().cpu", "a.detach"], "function", ["None"], ["", "def", "_list_to_cpu", "(", "arr", ":", "List", "[", "Tensor", "]", ")", "->", "List", "[", "Tensor", "]", ":", "\n", "    ", "return", "[", "a", ".", "detach", "(", ")", ".", "cpu", "(", ")", "for", "a", "in", "arr", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__init__": [[53, 86], ["list", "list", "list", "list", "list", "list", "ValueError", "sum", "len", "ValueError", "sum", "len", "ValueError", "sum", "len", "ValueError", "len", "len", "len", "len", "len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "matched_pairs", ":", "List", "[", "MatchedPair", "]", "=", "(", ")", ",", "\n", "false_positives", ":", "List", "[", "FalsePositive", "]", "=", "(", ")", ",", "\n", "false_negatives", ":", "List", "[", "FalseNegative", "]", "=", "(", ")", ",", "\n", "num_matched", ":", "List", "[", "int", "]", "=", "(", ")", ",", "\n", "num_fp", ":", "List", "[", "int", "]", "=", "(", ")", ",", "\n", "num_fn", ":", "List", "[", "int", "]", "=", "(", ")", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "_matched_pairs", "=", "list", "(", "matched_pairs", ")", "\n", "self", ".", "_fp", "=", "list", "(", "false_positives", ")", "\n", "self", ".", "_fn", "=", "list", "(", "false_negatives", ")", "\n", "self", ".", "_num_matched", "=", "list", "(", "num_matched", ")", "\n", "self", ".", "_num_fp", "=", "list", "(", "num_fp", ")", "\n", "self", ".", "_num_fn", "=", "list", "(", "num_fn", ")", "\n", "\n", "if", "not", "(", "\n", "len", "(", "self", ".", "_num_matched", ")", "==", "len", "(", "self", ".", "_num_fp", ")", "and", "\n", "len", "(", "self", ".", "_num_matched", ")", "==", "len", "(", "self", ".", "_num_fn", ")", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Inconsistent num lengths: '", ",", "\n", "len", "(", "self", ".", "_num_matched", ")", ",", "\n", "len", "(", "self", ".", "_num_fp", ")", ",", "\n", "len", "(", "self", ".", "_num_fn", ")", ",", "\n", ")", "\n", "\n", "", "if", "sum", "(", "self", ".", "_num_matched", ")", "!=", "len", "(", "self", ".", "_matched_pairs", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Inconsistent matched num'", ")", "\n", "", "if", "sum", "(", "self", ".", "_num_fp", ")", "!=", "len", "(", "self", ".", "_fp", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Inconsistent fp num'", ")", "\n", "", "if", "sum", "(", "self", ".", "_num_fn", ")", "!=", "len", "(", "self", ".", "_fn", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Inconsistent fn num'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.state_dict": [[87, 89], ["tools.to_t", "getattr"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.to_t"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "k", ":", "to_t", "(", "getattr", "(", "self", ",", "k", ")", ",", "device", "=", "'cpu'", ")", "for", "k", "in", "self", ".", "KEYS", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.load_state_dict": [[90, 94], ["cls.from_dict", "tools.to_np", "state_dict.items"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.from_dict", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.tools.to_np"], ["", "@", "classmethod", "\n", "def", "load_state_dict", "(", "cls", ",", "state_dict", ")", ":", "\n", "        ", "data_dict", "=", "{", "k", ":", "to_np", "(", "v", ")", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "return", "cls", ".", "from_dict", "(", "data_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.from_dict": [[95, 108], ["cls", "MatchedPair", "FalsePositive", "FalseNegative", "zip", "zip", "zip", "list", "list", "list"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "data_dict", ")", ":", "\n", "        ", "matched_pairs", "=", "[", "MatchedPair", "(", "*", "d", ")", "for", "d", "in", "zip", "(", "*", "[", "data_dict", "[", "key", "]", "for", "key", "in", "cls", ".", "MATCHED_PAIR_KEYS", "]", ")", "]", "\n", "false_positives", "=", "[", "FalsePositive", "(", "*", "d", ")", "for", "d", "in", "zip", "(", "*", "[", "data_dict", "[", "key", "]", "for", "key", "in", "cls", ".", "FP_KEYS", "]", ")", "]", "\n", "false_negatives", "=", "[", "FalseNegative", "(", "*", "d", ")", "for", "d", "in", "zip", "(", "*", "[", "data_dict", "[", "key", "]", "for", "key", "in", "cls", ".", "FN_KEYS", "]", ")", "]", "\n", "\n", "return", "cls", "(", "\n", "matched_pairs", "=", "matched_pairs", ",", "\n", "false_positives", "=", "false_positives", ",", "\n", "false_negatives", "=", "false_negatives", ",", "\n", "num_matched", "=", "list", "(", "data_dict", "[", "'num_matched_per_image'", "]", ")", ",", "\n", "num_fp", "=", "list", "(", "data_dict", "[", "'num_fp_per_image'", "]", ")", ",", "\n", "num_fn", "=", "list", "(", "data_dict", "[", "'num_fn_per_image'", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.get_q_error": [[110, 117], ["None"], "methods", ["None"], ["", "def", "get_q_error", "(", "self", ",", "min_score", ":", "float", "=", "0", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "indices", "=", "self", ".", "matched_scores", ">", "min_score", "if", "min_score", "else", "...", "\n", "q_err", "=", "(", "\n", "self", ".", "matched_p_boxes", "[", "indices", ",", "0", "]", "+", "self", ".", "matched_p_boxes", "[", "indices", ",", "2", "]", "-", "\n", "self", ".", "matched_t_boxes", "[", "indices", ",", "0", "]", "-", "self", ".", "matched_t_boxes", "[", "indices", ",", "2", "]", "\n", ")", "/", "2", "\n", "return", "q_err", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.matched_ious": [[118, 121], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "matched_ious", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "pair", ".", "iou", "for", "pair", "in", "self", ".", "_matched_pairs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.num_matched_per_image": [[122, 125], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_matched_per_image", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "array", "(", "self", ".", "_num_matched", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.num_fp_per_image": [[126, 129], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_fp_per_image", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "array", "(", "self", ".", "_num_fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.num_fn_per_image": [[130, 133], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_fn_per_image", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "array", "(", "self", ".", "_num_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.scalar_metrics": [[134, 137], ["scalar_metrics.ScalarMetrics", "len", "len", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "scalar_metrics", "(", "self", ")", "->", "ScalarMetrics", ":", "\n", "        ", "return", "ScalarMetrics", "(", "len", "(", "self", ".", "_matched_pairs", ")", ",", "len", "(", "self", ".", "_fp", ")", ",", "len", "(", "self", ".", "_fn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.matched_t_boxes": [[138, 141], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "matched_t_boxes", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "pair", ".", "t_box", "for", "pair", "in", "self", ".", "_matched_pairs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.matched_p_boxes": [[142, 145], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "matched_p_boxes", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "pair", ".", "p_box", "for", "pair", "in", "self", ".", "_matched_pairs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.fn_boxes": [[146, 149], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "fn_boxes", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "pair", ".", "t_box", "for", "pair", "in", "self", ".", "_fn", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.fp_boxes": [[150, 153], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "fp_boxes", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "pair", ".", "p_box", "for", "pair", "in", "self", ".", "_fp", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.matched_scores": [[154, 157], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "matched_scores", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "pair", ".", "score", "for", "pair", "in", "self", ".", "_matched_pairs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.fp_scores": [[158, 161], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "fp_scores", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "fp", ".", "score", "for", "fp", "in", "self", ".", "_fp", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.matched_intensities": [[162, 165], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "matched_intensities", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "pair", ".", "intensity", "for", "pair", "in", "self", ".", "_matched_pairs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.missed_intensities": [[166, 169], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "missed_intensities", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "fn", ".", "intensity", "for", "fn", "in", "self", ".", "_fn", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.matched_pairs": [[170, 173], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "matched_pairs", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_matched_pairs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.false_positives": [[174, 177], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "false_positives", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.false_negatives": [[178, 181], ["list"], "methods", ["None"], ["", "@", "property", "\n", "def", "false_negatives", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append": [[182, 189], ["None"], "methods", ["None"], ["", "def", "append", "(", "self", ",", "other", ":", "'FullMetrics'", ")", ":", "\n", "        ", "self", ".", "_matched_pairs", "+=", "other", ".", "_matched_pairs", "\n", "self", ".", "_fp", "+=", "other", ".", "_fp", "\n", "self", ".", "_fn", "+=", "other", ".", "_fn", "\n", "self", ".", "_num_matched", "+=", "other", ".", "_num_matched", "\n", "self", ".", "_num_fp", "+=", "other", ".", "_num_fp", "\n", "self", ".", "_num_fn", "+=", "other", ".", "_num_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__add__": [[190, 201], ["full_metrics.FullMetrics", "isinstance"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "FullMetrics", ")", ":", "\n", "            ", "return", "NotImplemented", "\n", "\n", "", "return", "FullMetrics", "(", "\n", "self", ".", "_matched_pairs", "+", "other", ".", "_matched_pairs", ",", "\n", "self", ".", "_fp", "+", "other", ".", "_fp", ",", "\n", "self", ".", "_fn", "+", "other", ".", "_fn", ",", "\n", "self", ".", "_num_matched", "+", "other", ".", "_num_matched", ",", "\n", "self", ".", "_num_fp", "+", "other", ".", "_num_fp", ",", "\n", "self", ".", "_num_fn", "+", "other", ".", "_num_fn", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__iadd__": [[203, 209], ["full_metrics.FullMetrics.append", "isinstance"], "methods", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append"], ["", "def", "__iadd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "FullMetrics", ")", ":", "\n", "            ", "return", "NotImplemented", "\n", "\n", "", "self", ".", "append", "(", "other", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.__eq__": [[210, 218], ["isinstance", "numpy.allclose", "getattr", "getattr"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "FullMetrics", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "for", "key", "in", "self", ".", "KEYS", ":", "\n", "            ", "if", "not", "np", ".", "allclose", "(", "getattr", "(", "self", ",", "key", ")", ",", "getattr", "(", "other", ",", "key", ")", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.precision_recall_curve.get_precision_recall_curve": [[13, 42], ["numpy.concatenate", "numpy.concatenate", "enumerate", "len", "len", "numpy.argsort", "recalls.append", "precisions.append", "accuracies.append", "precision_recall_curve._interpolate_precisions", "numpy.ones_like", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.precision_recall_curve._interpolate_precisions"], ["def", "get_precision_recall_curve", "(", "metrics", ":", "FullMetrics", ",", "interpolate_precision", ":", "bool", "=", "True", ")", ":", "\n", "    ", "scores", "=", "np", ".", "concatenate", "(", "[", "metrics", ".", "matched_scores", ",", "metrics", ".", "fp_scores", "]", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones_like", "(", "metrics", ".", "matched_scores", ")", ",", "np", ".", "zeros_like", "(", "metrics", ".", "fp_scores", ")", "]", ")", "\n", "\n", "if", "not", "labels", ".", "size", ":", "\n", "        ", "return", "[", "]", ",", "[", "]", ",", "[", "]", ",", "0", "\n", "\n", "", "num_fn", "=", "len", "(", "metrics", ".", "false_negatives", ")", "+", "len", "(", "metrics", ".", "matched_ious", ")", "\n", "num_fp", ",", "matched", "=", "0", ",", "0", "\n", "indices", "=", "np", ".", "argsort", "(", "scores", ")", "[", ":", ":", "-", "1", "]", "\n", "recalls", ",", "precisions", ",", "accuracies", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "labels", "=", "labels", "[", "indices", "]", "\n", "\n", "for", "total", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "if", "label", ":", "\n", "            ", "matched", "+=", "1", "\n", "num_fn", "-=", "1", "\n", "", "else", ":", "\n", "            ", "num_fp", "+=", "1", "\n", "\n", "", "recalls", ".", "append", "(", "matched", "/", "(", "matched", "+", "num_fn", ")", ")", "\n", "precisions", ".", "append", "(", "matched", "/", "(", "matched", "+", "num_fp", ")", ")", "\n", "accuracies", ".", "append", "(", "matched", "/", "(", "matched", "+", "num_fp", "+", "num_fn", ")", ")", "\n", "\n", "", "if", "interpolate_precision", ":", "\n", "        ", "_interpolate_precisions", "(", "precisions", ")", "\n", "\n", "", "return", "recalls", ",", "precisions", ",", "accuracies", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.precision_recall_curve.get_max_accuracy_metrics": [[44, 47], ["numpy.argmax"], "function", ["None"], ["", "def", "get_max_accuracy_metrics", "(", "recalls", ",", "precisions", ",", "accuracies", ")", ":", "\n", "    ", "idx", "=", "np", ".", "argmax", "(", "accuracies", ")", "\n", "return", "recalls", "[", "idx", "]", ",", "precisions", "[", "idx", "]", ",", "accuracies", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.precision_recall_curve._interpolate_precisions": [[49, 52], ["range", "max", "len"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max"], ["", "def", "_interpolate_precisions", "(", "precisions", ":", "List", "[", "float", "]", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "precisions", ")", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "precisions", "[", "i", "]", "=", "max", "(", "precisions", "[", "i", "]", ",", "precisions", "[", "i", "+", "1", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.from_config.get_sim_metrics_from_config": [[13, 41], ["from_config._sim_metrics_config_to_list", "calc_metrics.get_sim_metrics", "precision_recall_curve.get_precision_recall_curve", "precision_recall_curve.get_max_accuracy_metrics", "res_dict[].append", "calc_metrics.get_sim_metrics.state_dict"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.from_config._sim_metrics_config_to_list", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.calc_metrics.get_sim_metrics", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.precision_recall_curve.get_precision_recall_curve", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.precision_recall_curve.get_max_accuracy_metrics", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.append", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.full_metrics.FullMetrics.state_dict"], ["def", "get_sim_metrics_from_config", "(", "model", ",", "sim", ",", "config", ":", "Config", ")", "->", "dict", ":", "\n", "\n", "    ", "res_dict", "=", "{", "\n", "'sim_metrics'", ":", "[", "]", "\n", "}", "\n", "\n", "sim_params", "=", "_sim_metrics_config_to_list", "(", "config", ".", "sim_metrics", ")", "\n", "\n", "for", "params", "in", "sim_params", ":", "\n", "\n", "        ", "sim_metrics", "=", "get_sim_metrics", "(", "model", ",", "sim", ",", "disable_tqdm", "=", "config", ".", "general", ".", "disable_tqdm", ",", "**", "params", ")", "\n", "recalls", ",", "precisions", ",", "accuracies", "=", "get_precision_recall_curve", "(", "sim_metrics", ")", "\n", "recall", ",", "precision", ",", "accuracy", "=", "get_max_accuracy_metrics", "(", "recalls", ",", "precisions", ",", "accuracies", ")", "\n", "\n", "res_dict", "[", "'sim_metrics'", "]", ".", "append", "(", "{", "\n", "'params'", ":", "params", ",", "\n", "'metrics'", ":", "sim_metrics", ".", "state_dict", "(", ")", ",", "\n", "'recalls'", ":", "recalls", ",", "\n", "'precisions'", ":", "precisions", ",", "\n", "'accuracies'", ":", "accuracies", ",", "\n", "'best_metrics'", ":", "{", "\n", "'recall'", ":", "recall", ",", "\n", "'precision'", ":", "precision", ",", "\n", "'accuracy'", ":", "accuracy", ",", "\n", "}", "\n", "}", ")", "\n", "\n", "", "return", "res_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.metrics.from_config._sim_metrics_config_to_list": [[43, 56], ["set", "max", "ValueError", "sim_metrics_config.asdict().items", "len", "isinstance", "d.values", "range", "sim_metrics_config.asdict", "d.items", "max", "len"], "function", ["home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.mlgixd.config.Config.asdict", "home.repos.pwc.inspect_result.schreiber-lab_mlgixd.simulations.angle_limits.AngleLimits.max"], ["", "def", "_sim_metrics_config_to_list", "(", "sim_metrics_config", ":", "SimMetricsConfig", ")", ":", "\n", "\n", "    ", "d", "=", "{", "k", ":", "[", "v", "]", "if", "not", "isinstance", "(", "v", ",", "(", "tuple", ",", "list", ")", ")", "else", "v", "\n", "for", "k", ",", "v", "in", "sim_metrics_config", ".", "asdict", "(", ")", ".", "items", "(", ")", "}", "\n", "\n", "lengths", "=", "set", "(", "len", "(", "v", ")", "for", "v", "in", "d", ".", "values", "(", ")", ")", "\n", "max_length", "=", "max", "(", "lengths", ")", "\n", "\n", "if", "lengths", "in", "(", "{", "1", "}", ",", "{", "max_length", "}", ",", "{", "1", ",", "max_length", "}", ")", ":", "\n", "        ", "conf_dicts", "=", "[", "{", "k", ":", "v", "[", "i", "]", "if", "len", "(", "v", ")", ">", "1", "else", "v", "[", "0", "]", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "}", "for", "i", "in", "range", "(", "max", "(", "lengths", ")", ")", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'SimMetricsConfig values are not consistent.'", ")", "\n", "", "return", "conf_dicts", "\n", "", ""]]}