{"home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_main.parameter.__init__": [[10, 78], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "torch.device", "sgae_main.parameter.__dict__.update", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.parse_args", "os.path.exists", "os.makedirs", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_main.parameter.update"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# train parameter", "\n", "parser", ".", "add_argument", "(", "'--out_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "\n", "help", "=", "\"Output directory.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'Number of epochs to train.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "\n", "help", "=", "'Initial learning rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--early_stop'", ",", "action", "=", "'store_false'", ",", "default", "=", "True", ",", "\n", "help", "=", "'Whether to early stop.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "\n", "help", "=", "'Batch size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--run_num'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'Number of experiments'", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'Choose cuda'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "\"Random seed.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--stop_train'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'AUC to stop train.'", ")", "\n", "\n", "\n", "# train information parameter", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_false'", ",", "default", "=", "True", ",", "\n", "help", "=", "'Whether to print training details'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_step'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'Epoch steps to print training details'", ")", "\n", "# data parameter", "\n", "parser", ".", "add_argument", "(", "'--data_name'", ",", "type", "=", "str", ",", "default", "=", "'market'", ",", "\n", "help", "=", "'Dataset name'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "default", "=", "f'./data/'", ",", "\n", "help", "=", "'Wether to inject noise to train data'", ")", "\n", "parser", ".", "add_argument", "(", "'--inject_noise'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'Whether to inject noise to train data'", ")", "\n", "parser", ".", "add_argument", "(", "'--cont_rate'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "\n", "help", "=", "'Inject noise to contamination rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--anomal_rate'", ",", "type", "=", "str", ",", "default", "=", "'default'", ",", "\n", "help", "=", "'Adjust anomaly rate'", ")", "\n", "\n", "\n", "# model parameter", "\n", "## General", "\n", "parser", ".", "add_argument", "(", "'--lam_out'", ",", "type", "=", "float", ",", "default", "=", "20", ",", "\n", "help", "=", "'Parameter Lambda_outliers'", ")", "\n", "parser", ".", "add_argument", "(", "'--lam_dist'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "\n", "help", "=", "'Parameter Lambda_DE'", ")", "\n", "parser", ".", "add_argument", "(", "'--a'", ",", "type", "=", "float", ",", "default", "=", "6", ",", "\n", "help", "=", "'Parameter a'", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon'", ",", "type", "=", "float", ",", "default", "=", "90", ",", "\n", "help", "=", "'Parameter epsilon'", ")", "\n", "# Specific", "\n", "parser", ".", "add_argument", "(", "'--model_name'", ",", "type", "=", "str", ",", "default", "=", "'SG-AE'", ",", "\n", "help", "=", "'Choose model'", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "type", "=", "str", ",", "default", "=", "'auto'", ",", "\n", "help", "=", "'Hidden dimension of the model'", ")", "\n", "\n", "if", "__name__", "==", "'__main__'", ":", "\n", "            ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "", "else", ":", "\n", "            ", "args", "=", "parser", ".", "parse_args", "(", "[", "]", ")", "\n", "\n", "", "args", ".", "device", "=", "torch", ".", "device", "(", "f'cuda:{args.cuda}'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "out_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "out_dir", ")", "\n", "\n", "# Specific design        ", "\n", "\n", "", "self", ".", "__dict__", ".", "update", "(", "args", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_main.parameter.update": [[79, 90], ["update_dict.keys", "print"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "update_dict", ")", ":", "\n", "        ", "logs", "=", "'==== Parameter Update \\n'", "\n", "origin_dict", "=", "self", ".", "__dict__", "\n", "for", "key", "in", "update_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "in", "origin_dict", ":", "\n", "                ", "logs", "+=", "f'{key} ({origin_dict[key]} -> {update_dict[key]}), '", "\n", "origin_dict", "[", "key", "]", "=", "update_dict", "[", "key", "]", "\n", "", "else", ":", "\n", "                ", "logs", "+=", "f'{key} ({update_dict[key]}), '", "\n", "", "", "self", ".", "__dict__", "=", "origin_dict", "\n", "print", "(", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.train_image": [[22, 108], ["dataloader.LoadImageData", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "int", "numpy.zeros", "numpy.zeros", "tqdm.tqdm", "print", "range", "time.time", "sgae.SGAE().to", "torch.Adam", "range", "print", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "SGAE().to.parameters", "print", "time.time", "SGAE().to.train", "SGAE().to.", "sgae_train.calculate_norm", "numpy.percentile", "enumerate", "SGAE().to.eval", "SGAE().to.", "scores.detach().cpu().numpy.detach().cpu().numpy", "sklearn.metrics.roc_auc_score", "sklearn.metrics.average_precision_score", "sgae.SGAE", "sgae_train.data_batch", "data.to.to", "SGAE().to.", "sgae_train.recog_anomal", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "SGAE().to.loss_function", "loss_batch.item", "recon_error_batch.item", "dist_error_batch.item", "optim.Adam.zero_grad", "loss_batch.backward", "torch.utils.clip_grad_value_", "optim.Adam.step", "time.time", "SGAE().to.", "scores.detach().cpu().numpy.detach().cpu().numpy", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "SGAE().to.parameters", "scores.detach().cpu().numpy.detach().cpu", "print", "numpy.mean", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "scores.detach().cpu().numpy.detach().cpu", "scores.detach().cpu().numpy.detach", "scores.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.urbanmobility_sgm.None.dataloader.LoadImageData", "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.calculate_norm", "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.data_batch", "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.recog_anomal", "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae.SGAE.loss_function"], ["def", "train_image", "(", "params", ")", ":", "\n", "\n", "# Load data", "\n", "    ", "x_train", ",", "x_test", ",", "y_train", ",", "y_test", "=", "LoadImageData", "(", "params", ")", "\n", "x_train_device", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "params", ".", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "params", ".", "device", ")", "\n", "\n", "# Experiment settings", "\n", "nb_batch", "=", "int", "(", "x_train", ".", "shape", "[", "0", "]", "/", "params", ".", "batch_size", ")", "\n", "auc", "=", "np", ".", "zeros", "(", "params", ".", "run_num", ")", "\n", "ap", "=", "np", ".", "zeros", "(", "params", ".", "run_num", ")", "\n", "\n", "# Start Train", "\n", "for", "run_idx", "in", "tqdm", "(", "range", "(", "params", ".", "run_num", ")", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "model", "=", "SGAE", "(", "x_train", ".", "shape", "[", "1", "]", ",", "params", ".", "hidden_dim", ")", ".", "to", "(", "params", ".", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "params", ".", "lr", ")", "\n", "\n", "if", "params", ".", "verbose", "and", "run_idx", "==", "0", ":", "\n", "            ", "print", "(", "model", ")", "\n", "\n", "# One run", "\n", "", "for", "epoch", "in", "range", "(", "params", ".", "epochs", ")", ":", "\n", "            ", "epoch_time_start", "=", "time", ".", "time", "(", ")", "\n", "# train", "\n", "model", ".", "train", "(", ")", "\n", "\n", "# calculate norm thresh", "\n", "_", ",", "dec_train", ",", "_", "=", "model", "(", "x_train_device", ")", "\n", "norm", "=", "calculate_norm", "(", "x_train_device", ",", "dec_train", ")", "\n", "norm_thresh", "=", "np", ".", "percentile", "(", "norm", ",", "params", ".", "epsilon", ")", "\n", "\n", "loss", "=", "0", "\n", "recon_error", "=", "0", "\n", "dist_error", "=", "0", "\n", "\n", "for", "i_batch", ",", "data", "in", "enumerate", "(", "data_batch", "(", "x_train", ",", "params", ".", "batch_size", ")", ")", ":", "\n", "                ", "if", "i_batch", ">", "nb_batch", ":", "\n", "                    ", "break", "\n", "\n", "", "data", "=", "data", ".", "to", "(", "params", ".", "device", ")", "\n", "scores", ",", "x_dec", ",", "_", "=", "model", "(", "data", ")", "\n", "anomal_flag", "=", "recog_anomal", "(", "data", ",", "x_dec", ",", "norm_thresh", ")", "\n", "anomal_flag", "=", "torch", ".", "tensor", "(", "anomal_flag", ")", ".", "to", "(", "params", ".", "device", ")", "\n", "\n", "loss_batch", ",", "recon_error_batch", ",", "dist_error_batch", "=", "model", ".", "loss_function", "(", "data", ",", "x_dec", ",", "scores", ",", "anomal_flag", ",", "params", ")", "\n", "loss", "+=", "loss_batch", ".", "item", "(", ")", "\n", "recon_error", "+=", "recon_error_batch", ".", "item", "(", ")", "\n", "dist_error", "+=", "dist_error_batch", ".", "item", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_batch", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_value_", "(", "model", ".", "parameters", "(", ")", ",", "clip_value", "=", "1.0", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "epoch_time", "=", "time", ".", "time", "(", ")", "-", "epoch_time_start", "\n", "\n", "# test", "\n", "model", ".", "eval", "(", ")", "\n", "scores", ",", "_", ",", "_", "=", "model", "(", "x_test", ")", "\n", "scores", "=", "scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "auc", "[", "run_idx", "]", "=", "roc_auc_score", "(", "y_test", ",", "scores", ")", "\n", "ap", "[", "run_idx", "]", "=", "average_precision_score", "(", "y_test", ",", "scores", ")", "\n", "\n", "if", "params", ".", "verbose", ":", "\n", "                ", "if", "(", "epoch", "+", "1", ")", "%", "params", ".", "print_step", "==", "0", "or", "epoch", "==", "0", ":", "\n", "                    ", "print", "(", "f'Epoch num:[{epoch+1}/{params.epochs}], Time:{epoch_time:.3f} '", "+", "f'--Loss:{loss:.3f}, --RE:{recon_error:.3f}, --DE:{dist_error:.3f}, --DE_r:{dist_error*params.lam_dist:.3f},'", "+", "f'--AUC:{auc[run_idx]:.3f}'", ")", "\n", "\n", "# Early Stop", "\n", "", "", "if", "params", ".", "early_stop", ":", "\n", "                ", "scores", ",", "_", ",", "_", "=", "model", "(", "x_train_device", ")", "\n", "scores", "=", "scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "np", ".", "mean", "(", "scores", ")", ">", "params", ".", "a", "/", "2", ":", "\n", "                    ", "print", "(", "f'Early Stop at Epoch={epoch+1}, AUC={auc[run_idx]:.3f}'", ")", "\n", "break", "\n", "\n", "\n", "", "", "", "print", "(", "f'This run finished, AUC={auc[run_idx]:.3f}, AP={ap[run_idx]:.3f}'", ")", "\n", "\n", "", "print", "(", "f'Train Finshed, AUC={np.mean(auc):.3f}({np.std(auc):.3f}), AP={np.mean(ap):.3f}({np.std(ap):.3f})'", ")", "\n", "\n", "return", "{", "'AUC'", ":", "f'{np.mean(auc):.3f}({np.std(auc):.3f})'", ",", "'AP'", ":", "f'{np.mean(ap):.3f}({np.std(ap):.3f})'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.train_document": [[112, 209], ["dataloader.LoadDocumentData", "numpy.zeros", "numpy.zeros", "tqdm.tqdm", "print", "range", "time.time", "range", "print", "print", "dataloader.LoadDocumentData.preprocess", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "int", "sgae.SGAE().to", "torch.Adam", "range", "print", "print", "SGAE().to.parameters", "print", "time.time", "SGAE().to.train", "SGAE().to.", "sgae_train.calculate_norm", "numpy.percentile", "enumerate", "SGAE().to.eval", "SGAE().to.", "scores.detach().cpu().numpy.detach().cpu().numpy", "sklearn.metrics.roc_auc_score", "sklearn.metrics.average_precision_score", "numpy.mean", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "sgae.SGAE", "sgae_train.data_batch", "data.to.to", "SGAE().to.", "sgae_train.recog_anomal", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "SGAE().to.loss_function", "loss_batch.item", "recon_error_batch.item", "dist_error_batch.item", "optim.Adam.zero_grad", "loss_batch.backward", "torch.utils.clip_grad_value_", "optim.Adam.step", "time.time", "SGAE().to.", "scores.detach().cpu().numpy.detach().cpu().numpy", "numpy.mean", "numpy.mean", "SGAE().to.parameters", "scores.detach().cpu().numpy.detach().cpu", "print", "numpy.mean", "print", "numpy.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "scores.detach().cpu().numpy.detach().cpu", "scores.detach().cpu().numpy.detach", "scores.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.urbanmobility_sgm.None.dataloader.LoadDocumentData.preprocess", "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.calculate_norm", "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.data_batch", "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.recog_anomal", "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae.SGAE.loss_function"], ["", "def", "train_document", "(", "params", ")", ":", "\n", "\n", "# Load data", "\n", "    ", "dataloader", "=", "LoadDocumentData", "(", "params", ")", "\n", "\n", "# Experiment settings", "\n", "auc", "=", "np", ".", "zeros", "(", "(", "params", ".", "run_num", ",", "dataloader", ".", "class_num", ")", ")", "\n", "ap", "=", "np", ".", "zeros", "(", "(", "params", ".", "run_num", ",", "dataloader", ".", "class_num", ")", ")", "\n", "\n", "# Start Train", "\n", "for", "run_idx", "in", "tqdm", "(", "range", "(", "params", ".", "run_num", ")", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Iterate for normal class", "\n", "for", "normal_idx", "in", "range", "(", "dataloader", ".", "class_num", ")", ":", "\n", "            ", "x_train", ",", "x_test", ",", "y_train", ",", "y_test", "=", "dataloader", ".", "preprocess", "(", "normal_idx", ")", "\n", "x_train_device", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "params", ".", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "params", ".", "device", ")", "\n", "nb_batch", "=", "int", "(", "x_train", ".", "shape", "[", "0", "]", "/", "params", ".", "batch_size", ")", "\n", "\n", "model", "=", "SGAE", "(", "x_train", ".", "shape", "[", "1", "]", ",", "params", ".", "hidden_dim", ")", ".", "to", "(", "params", ".", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "params", ".", "lr", ")", "\n", "\n", "if", "params", ".", "verbose", "and", "normal_idx", "==", "0", "and", "run_idx", "==", "0", ":", "\n", "                ", "print", "(", "model", ")", "\n", "\n", "\n", "# One run", "\n", "", "for", "epoch", "in", "range", "(", "params", ".", "epochs", ")", ":", "\n", "                ", "epoch_time_start", "=", "time", ".", "time", "(", ")", "\n", "# train", "\n", "model", ".", "train", "(", ")", "\n", "\n", "# calculate norm thresh", "\n", "_", ",", "dec_train", ",", "_", "=", "model", "(", "x_train_device", ")", "\n", "norm", "=", "calculate_norm", "(", "x_train_device", ",", "dec_train", ")", "\n", "norm_thresh", "=", "np", ".", "percentile", "(", "norm", ",", "params", ".", "epsilon", ")", "\n", "\n", "loss", "=", "0", "\n", "recon_error", "=", "0", "\n", "dist_error", "=", "0", "\n", "\n", "for", "i_batch", ",", "data", "in", "enumerate", "(", "data_batch", "(", "x_train", ",", "params", ".", "batch_size", ")", ")", ":", "\n", "                    ", "if", "i_batch", ">", "nb_batch", ":", "\n", "                        ", "break", "\n", "\n", "", "data", "=", "data", ".", "to", "(", "params", ".", "device", ")", "\n", "scores", ",", "x_dec", ",", "_", "=", "model", "(", "data", ")", "\n", "anomal_flag", "=", "recog_anomal", "(", "data", ",", "x_dec", ",", "norm_thresh", ")", "\n", "anomal_flag", "=", "torch", ".", "tensor", "(", "anomal_flag", ")", ".", "to", "(", "params", ".", "device", ")", "\n", "\n", "loss_batch", ",", "recon_error_batch", ",", "dist_error_batch", "=", "model", ".", "loss_function", "(", "data", ",", "x_dec", ",", "scores", ",", "anomal_flag", ",", "params", ")", "\n", "loss", "+=", "loss_batch", ".", "item", "(", ")", "\n", "recon_error", "+=", "recon_error_batch", ".", "item", "(", ")", "\n", "dist_error", "+=", "dist_error_batch", ".", "item", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_batch", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_value_", "(", "model", ".", "parameters", "(", ")", ",", "clip_value", "=", "1.0", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "", "epoch_time", "=", "time", ".", "time", "(", ")", "-", "epoch_time_start", "\n", "\n", "# test", "\n", "model", ".", "eval", "(", ")", "\n", "scores", ",", "_", ",", "_", "=", "model", "(", "x_test", ")", "\n", "scores", "=", "scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "auc", "[", "run_idx", "]", "[", "normal_idx", "]", "=", "roc_auc_score", "(", "y_test", ",", "scores", ")", "\n", "ap", "[", "run_idx", "]", "[", "normal_idx", "]", "=", "average_precision_score", "(", "y_test", ",", "scores", ")", "\n", "\n", "if", "params", ".", "verbose", ":", "\n", "                    ", "if", "(", "epoch", "+", "1", ")", "%", "params", ".", "print_step", "==", "0", "or", "epoch", "==", "0", ":", "\n", "                        ", "print", "(", "f'Epoch num:[{epoch+1}/{params.epochs}], Time:{epoch_time:.3f} '", "+", "f'--Loss:{loss:.3f}, --RE:{recon_error:.3f}, --DE:{dist_error:.3f}, --DE_r:{dist_error*params.lam_dist:.3f},'", "+", "f'--AUC:{auc[run_idx][normal_idx]:.3f}'", ")", "\n", "# Early Stop", "\n", "", "", "if", "params", ".", "early_stop", ":", "\n", "                    ", "scores", ",", "_", ",", "_", "=", "model", "(", "x_train_device", ")", "\n", "scores", "=", "scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "np", ".", "mean", "(", "scores", ")", ">", "params", ".", "a", "/", "2", ":", "\n", "                        ", "print", "(", "f'Early Stop at Epoch={epoch+1}, AUC={auc[run_idx][normal_idx]:.3f}'", ")", "\n", "break", "\n", "\n", "", "", "", "", "print", "(", "f'This run finished, AUC={np.mean(auc[run_idx]):.3f}, AP={np.mean(ap[run_idx]):.3f}'", ")", "\n", "print", "(", "f'RE/DE = {recon_error/dist_error:.2f}'", ")", "\n", "\n", "# RUN JUMP", "\n", "if", "np", ".", "mean", "(", "auc", "[", ":", "run_idx", "+", "1", "]", ")", "<", "params", ".", "stop_train", "and", "run_idx", ">=", "3", ":", "\n", "            ", "print", "(", "f'Stop train, this parameter aborted. Mean AUC={np.mean(auc[:run_idx+1])}'", ")", "\n", "print", "(", "f'AUC: {auc}'", ")", "\n", "break", "\n", "\n", "", "", "print", "(", "f'Train Finished, AUC={np.mean(auc):.3f}({np.std(auc):.3f}), AP={np.mean(ap):.3f}({np.std(ap):.3f})'", ")", "\n", "\n", "return", "{", "'AUC'", ":", "f'{np.mean(auc):.3f}({np.std(auc):.3f})'", ",", "'AP'", ":", "f'{np.mean(ap):.3f}({np.std(ap):.3f})'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.train_tabular": [[211, 304], ["dataloader.LoadTabularData", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "int", "numpy.zeros", "numpy.zeros", "tqdm.tqdm", "print", "range", "time.time", "sgae.SGAE().to", "torch.Adam", "range", "print", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "SGAE().to.parameters", "print", "time.time", "SGAE().to.train", "SGAE().to.", "sgae_train.calculate_norm", "numpy.percentile", "enumerate", "SGAE().to.eval", "SGAE().to.", "scores.detach().cpu().numpy.detach().cpu().numpy", "sklearn.metrics.roc_auc_score", "sklearn.metrics.average_precision_score", "print", "print", "print", "sgae.SGAE", "sgae_train.data_batch", "data.to.to", "SGAE().to.", "sgae_train.recog_anomal", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "SGAE().to.loss_function", "loss_batch.item", "recon_error_batch.item", "dist_error_batch.item", "optim.Adam.zero_grad", "loss_batch.backward", "torch.utils.clip_grad_value_", "optim.Adam.step", "time.time", "SGAE().to.", "scores.detach().cpu().numpy.detach().cpu().numpy", "numpy.mean", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "SGAE().to.parameters", "scores.detach().cpu().numpy.detach().cpu", "print", "numpy.mean", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "scores.detach().cpu().numpy.detach().cpu", "numpy.mean", "scores.detach().cpu().numpy.detach", "scores.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.urbanmobility_sgm.None.dataloader.LoadTabularData", "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.calculate_norm", "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.data_batch", "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.recog_anomal", "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae.SGAE.loss_function"], ["", "def", "train_tabular", "(", "params", ")", ":", "\n", "\n", "# Load data", "\n", "    ", "x_train", ",", "y_train", ",", "x_val", ",", "y_val", ",", "x_test", ",", "y_test", "=", "LoadTabularData", "(", "params", ")", "\n", "x_train_device", "=", "torch", ".", "FloatTensor", "(", "x_train", ")", ".", "to", "(", "params", ".", "device", ")", "\n", "x_test", "=", "torch", ".", "FloatTensor", "(", "x_test", ")", ".", "to", "(", "params", ".", "device", ")", "\n", "\n", "# Experiment settings", "\n", "nb_batch", "=", "int", "(", "x_train", ".", "shape", "[", "0", "]", "/", "params", ".", "batch_size", ")", "\n", "auc", "=", "np", ".", "zeros", "(", "params", ".", "run_num", ")", "\n", "ap", "=", "np", ".", "zeros", "(", "params", ".", "run_num", ")", "\n", "\n", "# Start Train", "\n", "for", "run_idx", "in", "tqdm", "(", "range", "(", "params", ".", "run_num", ")", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "model", "=", "SGAE", "(", "x_train", ".", "shape", "[", "1", "]", ",", "params", ".", "hidden_dim", ")", ".", "to", "(", "params", ".", "device", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "params", ".", "lr", ")", "\n", "\n", "if", "params", ".", "verbose", "and", "run_idx", "==", "0", ":", "\n", "            ", "print", "(", "model", ")", "\n", "\n", "# One run", "\n", "", "for", "epoch", "in", "range", "(", "params", ".", "epochs", ")", ":", "\n", "            ", "epoch_time_start", "=", "time", ".", "time", "(", ")", "\n", "# train", "\n", "model", ".", "train", "(", ")", "\n", "\n", "# calculate norm thresh", "\n", "_", ",", "dec_train", ",", "_", "=", "model", "(", "x_train_device", ")", "\n", "norm", "=", "calculate_norm", "(", "x_train_device", ",", "dec_train", ")", "\n", "norm_thresh", "=", "np", ".", "percentile", "(", "norm", ",", "params", ".", "epsilon", ")", "\n", "\n", "loss", "=", "0", "\n", "recon_error", "=", "0", "\n", "dist_error", "=", "0", "\n", "\n", "for", "i_batch", ",", "data", "in", "enumerate", "(", "data_batch", "(", "x_train", ",", "params", ".", "batch_size", ")", ")", ":", "\n", "                ", "if", "i_batch", ">", "nb_batch", ":", "\n", "                    ", "break", "\n", "\n", "", "data", "=", "data", ".", "to", "(", "params", ".", "device", ")", "\n", "scores", ",", "x_dec", ",", "_", "=", "model", "(", "data", ")", "\n", "anomal_flag", "=", "recog_anomal", "(", "data", ",", "x_dec", ",", "norm_thresh", ")", "\n", "anomal_flag", "=", "torch", ".", "tensor", "(", "anomal_flag", ")", ".", "to", "(", "params", ".", "device", ")", "\n", "\n", "loss_batch", ",", "recon_error_batch", ",", "dist_error_batch", "=", "model", ".", "loss_function", "(", "data", ",", "x_dec", ",", "scores", ",", "anomal_flag", ",", "params", ")", "\n", "loss", "+=", "loss_batch", ".", "item", "(", ")", "\n", "recon_error", "+=", "recon_error_batch", ".", "item", "(", ")", "\n", "dist_error", "+=", "dist_error_batch", ".", "item", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_batch", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_value_", "(", "model", ".", "parameters", "(", ")", ",", "clip_value", "=", "1.0", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "epoch_time", "=", "time", ".", "time", "(", ")", "-", "epoch_time_start", "\n", "\n", "# test", "\n", "model", ".", "eval", "(", ")", "\n", "scores", ",", "_", ",", "_", "=", "model", "(", "x_test", ")", "\n", "scores", "=", "scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "auc", "[", "run_idx", "]", "=", "roc_auc_score", "(", "y_test", ",", "scores", ")", "\n", "ap", "[", "run_idx", "]", "=", "average_precision_score", "(", "y_test", ",", "scores", ")", "\n", "\n", "if", "params", ".", "verbose", ":", "\n", "                ", "if", "(", "epoch", "+", "1", ")", "%", "params", ".", "print_step", "==", "0", "or", "epoch", "==", "0", ":", "\n", "                    ", "print", "(", "f'Epoch num:[{epoch+1}/{params.epochs}], Time:{epoch_time:.3f} '", "+", "f'--Loss:{loss:.3f}, --RE:{recon_error:.3f}, --DE:{dist_error:.3f}, --DE_r:{dist_error*params.lam_dist:.3f},'", "+", "f'--AUC:{auc[run_idx]:.3f}'", ")", "\n", "\n", "# Early Stop", "\n", "", "", "if", "params", ".", "early_stop", ":", "\n", "                ", "scores", ",", "_", ",", "_", "=", "model", "(", "x_train_device", ")", "\n", "scores", "=", "scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "np", ".", "mean", "(", "scores", ")", ">", "params", ".", "a", "/", "2", ":", "\n", "                    ", "print", "(", "f'Early Stop at Epoch={epoch+1}, AUC={auc[run_idx]:.3f}'", ")", "\n", "break", "\n", "\n", "\n", "", "", "", "print", "(", "f'This run finished, AUC={auc[run_idx]:.3f}, AP={ap[run_idx]:.3f}'", ")", "\n", "\n", "# RUN JUMP", "\n", "if", "run_idx", ">", "5", "and", "np", ".", "mean", "(", "auc", "[", ":", "run_idx", "]", ")", "<", "0.5", ":", "\n", "            ", "print", "(", "'RUN JUMP'", ")", "\n", "print", "(", "f'Average AUC is : {np.mean(auc[:run_idx]):.3f}'", ")", "\n", "print", "(", "f'AUC is : {auc}'", ")", "\n", "break", "\n", "\n", "", "", "print", "(", "f'Train Finished, AUC={np.mean(auc):.3f}({np.std(auc):.3f}), AP={np.mean(ap):.3f}({np.std(ap):.3f})'", ")", "\n", "\n", "return", "{", "'AUC'", ":", "f'{np.mean(auc):.3f}({np.std(auc):.3f})'", ",", "'AP'", ":", "f'{np.mean(ap):.3f}({np.std(ap):.3f})'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.data_batch": [[306, 315], ["len", "numpy.random.choice", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "data_batch", "(", "x_train", ",", "batch_size", ")", ":", "\n", "    ", "''' Generate data batch, return tensor.\n    '''", "\n", "n", "=", "len", "(", "x_train", ")", "\n", "while", "(", "1", ")", ":", "\n", "        ", "idx", "=", "np", ".", "random", ".", "choice", "(", "n", ",", "batch_size", ",", "replace", "=", "False", ")", "\n", "data", "=", "x_train", "[", "idx", "]", "\n", "data", "=", "torch", ".", "FloatTensor", "(", "data", ")", "\n", "yield", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.recog_anomal": [[316, 324], ["sgae_train.calculate_norm", "calculate_norm.copy"], "function", ["home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.calculate_norm"], ["", "", "def", "recog_anomal", "(", "data", ",", "x_dec", ",", "thresh", ")", ":", "\n", "    ", "''' Recognize anomaly\n    '''", "\n", "norm", "=", "calculate_norm", "(", "data", ",", "x_dec", ")", "\n", "anomal_flag", "=", "norm", ".", "copy", "(", ")", "\n", "anomal_flag", "[", "norm", "<", "thresh", "]", "=", "0", "\n", "anomal_flag", "[", "norm", ">=", "thresh", "]", "=", "1", "\n", "return", "anomal_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae_train.calculate_norm": [[325, 331], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "calculate_norm", "(", "data", ",", "x_dec", ")", ":", "\n", "    ", "''' Calculate l2 norm\n    '''", "\n", "delta", "=", "(", "data", "-", "x_dec", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "delta", ",", "ord", "=", "2", ",", "axis", "=", "1", ")", "\n", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.dataloader.LoadDocumentData.__init__": [[182, 204], ["isinstance", "len", "open", "pickle.load", "isinstance", "list", "print", "print", "eval", "set"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "\n", "# data name: reuters, 20news", "\n", "        ", "filepath", "=", "f'{params.data_path}{params.data_name}.data'", "\n", "\n", "with", "open", "(", "filepath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "seed", "=", "params", ".", "seed", "\n", "self", ".", "x_origin", "=", "data", "[", "\"X\"", "]", "\n", "self", ".", "y_origin", "=", "data", "[", "\"y\"", "]", "\n", "if", "isinstance", "(", "params", ".", "anomal_rate", ",", "str", ")", ":", "\n", "            ", "if", "params", ".", "anomal_rate", "==", "'default'", ":", "\n", "                ", "self", ".", "anomal_rate", "=", "0.05", "\n", "", "else", ":", "\n", "                ", "self", ".", "anomal_rate", "=", "eval", "(", "params", ".", "anomal_rate", ")", "\n", "", "", "elif", "isinstance", "(", "params", ".", "anomal_rate", ",", "float", ")", ":", "\n", "            ", "self", ".", "anomal_rate", "=", "params", ".", "anomal_rate", "\n", "", "self", ".", "class_num", "=", "len", "(", "list", "(", "set", "(", "self", ".", "y_origin", ")", ")", ")", "\n", "\n", "if", "params", ".", "verbose", ":", "\n", "            ", "print", "(", "f'==== Load data {params.data_name} ===='", ")", "\n", "print", "(", "f'data shape: {self.x_origin.shape}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.dataloader.LoadDocumentData.preprocess": [[205, 225], ["numpy.random.choice", "numpy.delete", "numpy.delete", "print", "sklearn.model_selection.train_test_split", "print", "numpy.where", "len", "int", "numpy.array", "len", "len", "len", "len"], "methods", ["None"], ["", "", "def", "preprocess", "(", "self", ",", "anomal_class", ")", ":", "\n", "        ", "'''\n        Choose one class to be anomaly\n        '''", "\n", "y", "=", "(", "np", ".", "array", "(", "self", ".", "y_origin", ")", "!=", "anomal_class", ")", ".", "astype", "(", "int", ")", "\n", "anomal_idx", "=", "np", ".", "where", "(", "y", "==", "1", ")", "[", "0", "]", "\n", "\n", "rm_num", "=", "len", "(", "anomal_idx", ")", "-", "int", "(", "360", "*", "self", ".", "anomal_rate", "/", "(", "1", "-", "self", ".", "anomal_rate", ")", ")", "\n", "anomal_idx_rm", "=", "np", ".", "random", ".", "choice", "(", "anomal_idx", ",", "rm_num", ",", "replace", "=", "False", ")", "\n", "x", "=", "np", ".", "delete", "(", "self", ".", "x_origin", ",", "anomal_idx_rm", ",", "axis", "=", "0", ")", "\n", "y", "=", "np", ".", "delete", "(", "y", ",", "anomal_idx_rm", ",", "axis", "=", "0", ")", "\n", "\n", "print", "(", "f'Anomay rate is {len(y[y==1])} / {len(y)} = {len(y[y==1])/len(y):.4f}'", ")", "\n", "\n", "x_train", ",", "x_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "x", ",", "y", ",", "test_size", "=", "0.2", ",", "random_state", "=", "self", ".", "seed", ",", "stratify", "=", "y", ")", "\n", "\n", "print", "(", "f'Train data shape: {x_train.shape}, Test data shape: {x_test.shape}'", ")", "\n", "\n", "return", "x_train", ",", "x_test", ",", "y_train", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.dataloader.LoadTabularData": [[25, 171], ["pandas.read_csv", "time.time", "data[].values.copy", "pd.read_csv.drop", "dtypes[].index.to_list", "list", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "set().difference", "len", "len", "range", "len", "len", "sklearn.preprocessing.scale", "numpy.hstack", "time.time", "len", "int", "numpy.empty", "int", "numpy.arange", "numpy.append", "numpy.append", "eval", "time.time", "numpy.delete", "numpy.delete", "print", "set", "len", "len", "len", "len", "pandas.get_dummies", "numpy.where", "numpy.random.choice", "numpy.random.choice", "x_train[].copy", "numpy.zeros", "len", "int", "numpy.random.choice", "len", "int", "numpy.random.choice", "len", "len", "set", "data[].astype", "time.time", "numpy.where", "len", "numpy.where", "len", "time.time", "list", "time.time", "time.time", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["def", "LoadTabularData", "(", "params", ")", ":", "\n", "    ", "'''Load tabular data'''", "\n", "\n", "target", "=", "'labels'", "\n", "filepath", "=", "f'{params.data_path}{params.data_name}.csv'", "\n", "data", "=", "pd", ".", "read_csv", "(", "filepath", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# divide X and y", "\n", "labels", "=", "data", "[", "target", "]", ".", "values", ".", "copy", "(", ")", "# array", "\n", "data", ".", "drop", "(", "target", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "\n", "# divide numerical and categorical", "\n", "cols", "=", "{", "}", "\n", "dtypes", "=", "data", ".", "dtypes", "\n", "cols", "[", "'cat'", "]", "=", "dtypes", "[", "dtypes", "==", "'object'", "]", ".", "index", ".", "to_list", "(", ")", "\n", "cols", "[", "'num'", "]", "=", "list", "(", "set", "(", "list", "(", "data", ".", "columns", ")", ")", ".", "difference", "(", "set", "(", "cols", "[", "'cat'", "]", ")", ")", ")", "\n", "# regard part numerical data to category", "\n", "#     if params.feature_mode == 0:  ", "\n", "#         cols['num'] = list(set(list(data.columns)).difference(set(cols['cat'])))", "\n", "#     elif params.feature_mode == 1:", "\n", "#         for i in data.columns:", "\n", "#             if len(data[i].unique()) <= params.boundary:", "\n", "#                 cols['cat'].append(i)", "\n", "#         cols['cat'] = set(cols['cat'])", "\n", "#         cols['num'] = list(set(list(data.columns)).difference(set(cols['cat'])))", "\n", "\n", "anomal_rate_o", "=", "len", "(", "labels", "[", "labels", "==", "1", "]", ")", "/", "len", "(", "labels", ")", "\n", "\n", "info", "=", "f'==== Dataset: {params.data_name}\\n'", "\n", "info", "+=", "'@Original Info: (without labels)\\n'", "\n", "info", "+=", "f'Original shape: data={data.shape}, num={len(cols[\"num\"])}, cat={len(cols[\"cat\"])} \\n'", "\n", "info", "+=", "f'Original anomal rate is: {anomal_rate_o*100:.2f}% \\n'", "\n", "info", "+=", "f'Normal data is {len(labels[labels==0])}; Anomaly data is {len(labels[labels==1])} \\n'", "\n", "\n", "\n", "\n", "# Divide data to train and test ", "\n", "train_idx", ",", "test_idx", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "range", "(", "data", ".", "shape", "[", "0", "]", ")", ",", "labels", ",", "test_size", "=", "0.2", ",", "random_state", "=", "params", ".", "seed", ",", "stratify", "=", "labels", ")", "\n", "# store test data", "\n", "#     # wait to add", "\n", "#     if params.save_test_data:", "\n", "#         data.loc[test_idx,:].to_csv(f'{params.output_path}test_x.csv', index=False)", "\n", "#         np.savetxt(f'{params.output_path}test_y.txt', labels[test_idx])", "\n", "\n", "# Code", "\n", "cat_num", "=", "0", "\n", "if", "len", "(", "cols", "[", "'cat'", "]", ")", ">", "0", ":", "\n", "        ", "x_cat", "=", "pd", ".", "get_dummies", "(", "data", "[", "cols", "[", "'cat'", "]", "]", ".", "astype", "(", "'object'", ")", ")", ".", "values", "\n", "cat_num", "=", "x_cat", ".", "shape", "[", "1", "]", "\n", "\n", "# Scale/standardization", "\n", "", "num_num", "=", "0", "\n", "if", "len", "(", "cols", "[", "'num'", "]", ")", ">", "0", ":", "\n", "        ", "x_num", "=", "scale", "(", "data", "[", "cols", "[", "'num'", "]", "]", ")", "\n", "num_num", "=", "x_num", ".", "shape", "[", "1", "]", "\n", "\n", "# Concate num and cat", "\n", "", "if", "num_num", ">", "0", "and", "cat_num", ">", "0", ":", "\n", "        ", "x", "=", "np", ".", "hstack", "(", "(", "x_num", ",", "x_cat", ")", ")", "\n", "", "elif", "num_num", ">", "0", ":", "\n", "        ", "x", "=", "x_num", "\n", "", "elif", "cat_num", ">", "0", ":", "\n", "        ", "x", "=", "x_cat", "\n", "\n", "", "x_train", "=", "x", "[", "train_idx", "]", "\n", "x_test", "=", "x", "[", "test_idx", "]", "\n", "\n", "# Extract validate set from train set", "\n", "x_train", ",", "x_val", ",", "y_train", ",", "y_val", "=", "train_test_split", "(", "x_train", ",", "y_train", ",", "test_size", "=", "0.25", ",", "random_state", "=", "params", ".", "seed", ",", "stratify", "=", "y_train", ")", "\n", "\n", "\n", "info", "+=", "'@Preprocess Info: \\n'", "\n", "info", "+=", "f'== Feature Process == \\n'", "\n", "info", "+=", "f'Time cost is {time.time() - start:.2f} seconds\\n'", "\n", "info", "+=", "f'Data shape: data={x.shape}, num={num_num}, cat={cat_num} \\n'", "\n", "info", "+=", "f'Train/Validate/test data shape is: {x_train.shape} / {x_val.shape} / {x_test.shape} \\n'", "\n", "\n", "# Inject noise to train data:", "\n", "if", "params", ".", "inject_noise", ":", "\n", "        ", "start_inject", "=", "time", ".", "time", "(", ")", "\n", "idx", "=", "np", ".", "where", "(", "y_train", "==", "0", ")", "[", "0", "]", "\n", "dim", "=", "x_train", ".", "shape", "[", "1", "]", "\n", "normal_num", "=", "len", "(", "y_train", "[", "y_train", "==", "0", "]", ")", "\n", "noise_num", "=", "int", "(", "normal_num", "*", "params", ".", "cont_rate", "/", "(", "1", "-", "params", ".", "cont_rate", ")", ")", "\n", "noise", "=", "np", ".", "empty", "(", "(", "noise_num", ",", "dim", ")", ")", "\n", "swap_rate", "=", "0.05", "\n", "swap_feature_num", "=", "int", "(", "dim", "*", "swap_rate", ")", "\n", "if", "swap_feature_num", "<", "1", ":", "\n", "            ", "swap_feature_num", "=", "1", "\n", "", "for", "i", "in", "np", ".", "arange", "(", "noise_num", ")", ":", "\n", "            ", "swap_idx", "=", "np", ".", "random", ".", "choice", "(", "idx", ",", "2", ",", "replace", "=", "False", ")", "\n", "swap_feature", "=", "np", ".", "random", ".", "choice", "(", "dim", ",", "swap_feature_num", ",", "replace", "=", "False", ")", "\n", "noise", "[", "i", "]", "=", "x_train", "[", "swap_idx", "[", "0", "]", "]", ".", "copy", "(", ")", "\n", "noise", "[", "i", ",", "swap_feature", "]", "=", "x_train", "[", "swap_idx", "[", "1", "]", ",", "swap_feature", "]", "\n", "\n", "", "x_train", "=", "np", ".", "append", "(", "x_train", ",", "noise", ",", "axis", "=", "0", ")", "\n", "y_train", "=", "np", ".", "append", "(", "y_train", ",", "np", ".", "zeros", "(", "(", "noise_num", ",", ")", ")", ")", "\n", "\n", "info", "+=", "f'== Inject Noise == \\n'", "\n", "info", "+=", "f'Time cost is {time.time() - start_inject:.2f} seconds\\n'", "\n", "info", "+=", "f'Noise inject number is {noise_num}, cont_rate={params.cont_rate}\\n'", "\n", "info", "+=", "f'Train data: shape={x_train.shape}, anomal rate={len(y_train[y_train==1])/len(y_train)*100:.2f}%\\n'", "\n", "info", "+=", "f'Val data: shape={x_val.shape}, anomal rate={len(y_val[y_val==1])/len(y_val)*100:.2f}%\\n'", "\n", "info", "+=", "f'Test data: shape={x_test.shape}, anomal_rate={len(y_test[y_test==1])/len(y_test)*100:.2f}%\\n'", "\n", "\n", "# Generate data with anomaly rate", "\n", "", "anomal_rate", "=", "params", ".", "anomal_rate", "\n", "if", "anomal_rate", "!=", "'default'", ":", "\n", "        ", "anomal_rate", "=", "eval", "(", "anomal_rate", ")", "\n", "start_adjust", "=", "time", ".", "time", "(", ")", "\n", "if", "anomal_rate", ">=", "anomal_rate_o", ":", "\n", "            ", "idx", "=", "np", ".", "where", "(", "y_train", "==", "0", ")", "[", "0", "]", "\n", "anomal_num", "=", "len", "(", "y_train", "[", "y_train", "==", "1", "]", ")", "\n", "normal_num", "=", "int", "(", "anomal_num", "*", "(", "1", "-", "anomal_rate", ")", "/", "anomal_rate", ")", "\n", "delta_num", "=", "len", "(", "y_train", "[", "y_train", "==", "0", "]", ")", "-", "normal_num", "\n", "delta_idx", "=", "np", ".", "random", ".", "choice", "(", "idx", ",", "delta_num", ",", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "np", ".", "where", "(", "y_train", "==", "1", ")", "[", "0", "]", "\n", "normal_num", "=", "len", "(", "y_train", "[", "y_train", "==", "0", "]", ")", "\n", "anomal_num", "=", "int", "(", "normal_num", "*", "anomal_rate", "/", "(", "1", "-", "anomal_rate", ")", ")", "\n", "delta_num", "=", "len", "(", "y_train", "[", "y_train", "==", "1", "]", ")", "-", "anomal_num", "\n", "delta_idx", "=", "np", ".", "random", ".", "choice", "(", "idx", ",", "delta_num", ",", "replace", "=", "False", ")", "\n", "\n", "", "x_train", "=", "np", ".", "delete", "(", "x_train", ",", "delta_idx", ",", "axis", "=", "0", ")", "\n", "y_train", "=", "np", ".", "delete", "(", "y_train", ",", "delta_idx", ",", "axis", "=", "0", ")", "\n", "\n", "info", "+=", "f'== Adjust anomaly rate == \\n'", "\n", "info", "+=", "f'Time cost is {time.time() - start_adjust:.2f} seconds\\n'", "\n", "info", "+=", "f'Train data: shape={x_train.shape}, anomaly rate={len(y_train[y_train==1])/len(y_train)*100:.2f}%\\n'", "\n", "info", "+=", "f'Test data: shape={x_test.shape}, anomaly rate={len(y_test[y_test==1])/len(y_test)*100:.2f}%\\n'", "\n", "", "else", ":", "\n", "        ", "params", ".", "anomal_rate", "=", "len", "(", "y_train", "[", "y_train", "==", "1", "]", ")", "/", "len", "(", "y_train", ")", "\n", "\n", "\n", "", "info", "+=", "f'== Finished == \\n'", "\n", "info", "+=", "f'Total time cost is {time.time()-start:.2f} seconds\\n'", "\n", "\n", "if", "params", ".", "verbose", ":", "\n", "        ", "print", "(", "info", ")", "\n", "\n", "", "return", "x_train", ",", "y_train", ",", "x_val", ",", "y_val", ",", "x_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.dataloader.LoadImageData": [[228, 247], ["numpy.loadtxt", "numpy.loadtxt", "print", "sklearn.model_selection.train_test_split", "print", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "LoadImageData", "(", "params", ")", ":", "\n", "    ", "'''Lad image data'''", "\n", "\n", "filepath", "=", "f'{params.data_path}{params.data_name}_'", "\n", "\n", "x_origin", "=", "np", ".", "loadtxt", "(", "f\"{filepath}data.txt\"", ",", "delimiter", "=", "\",\"", ")", "\n", "y_origin", "=", "np", ".", "loadtxt", "(", "f\"{filepath}y.txt\"", ",", "delimiter", "=", "\",\"", ")", "\n", "\n", "y", "=", "(", "y_origin", "!=", "4.0", ")", ".", "astype", "(", "int", ")", "\n", "params", ".", "anomal_rate", "=", "len", "(", "y", "[", "y", "==", "1", "]", ")", "/", "len", "(", "y", ")", "\n", "print", "(", "f'Anomay rate is {len(y[y==1])} / {len(y)} = {params.anomal_rate:.4f}'", ")", "\n", "\n", "\n", "x_train", ",", "x_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "x_origin", ",", "y", ",", "test_size", "=", "0.2", ",", "random_state", "=", "params", ".", "seed", ",", "stratify", "=", "y", ")", "\n", "\n", "print", "(", "f'Train data shape: {x_train.shape}, Test data shape: {x_test.shape}'", ")", "\n", "\n", "return", "x_train", ",", "x_test", ",", "y_train", ",", "y_test", "", "", ""]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae.SGAE.__init__": [[10, 56], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "sgae.SGAE.decoder.add_module", "torch.Sequential", "torch.Sequential", "torch.Sequential", "sgae.SGAE.scores.add_module", "sgae.SGAE.scores.add_module", "hidden_dim.reverse", "print", "eval", "hidden_dim.insert", "sgae.SGAE.encoder.add_module", "sgae.SGAE.encoder.add_module", "sgae.SGAE.decoder.add_module", "sgae.SGAE.decoder.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "hidden_dim.append", "hidden_dim.append", "hidden_dim.append"], "methods", ["home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae.SGAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "hidden_dim_input", ",", "layer_list", "=", "[", "20", ",", "40", ",", "80", ",", "256", ",", "1024", "]", ")", ":", "\n", "        ", "'''\n        hidden_dim_input: str\n        '''", "\n", "super", "(", "SGAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "hidden_dim_input", "==", "'auto'", ":", "\n", "            ", "hidden_dim", "=", "[", "]", "\n", "if", "input_shape", "<", "20", ":", "\n", "                ", "hidden_dim", "=", "[", "10", ",", "input_shape", "]", "\n", "", "else", ":", "\n", "                ", "for", "idx", "in", "range", "(", "len", "(", "layer_list", ")", ")", ":", "\n", "                    ", "if", "layer_list", "[", "idx", "]", "<", "input_shape", ":", "\n", "                        ", "hidden_dim", ".", "append", "(", "layer_list", "[", "idx", "]", ")", "\n", "", "elif", "input_shape", "-", "layer_list", "[", "idx", "-", "1", "]", "<", "layer_list", "[", "idx", "-", "1", "]", "*", "0.1", ":", "\n", "                        ", "hidden_dim", "[", "-", "1", "]", "=", "input_shape", "\n", "", "else", ":", "\n", "                        ", "hidden_dim", ".", "append", "(", "input_shape", ")", "\n", "", "", "if", "input_shape", ">", "layer_list", "[", "-", "1", "]", "*", "1.5", ":", "\n", "                    ", "hidden_dim", ".", "append", "(", "input_shape", ")", "\n", "", "else", ":", "\n", "                    ", "hidden_dim", "[", "-", "1", "]", "=", "input_shape", "\n", "", "", "hidden_dim", ".", "reverse", "(", ")", "\n", "print", "(", "f'Model hidden dim is {hidden_dim}'", ")", "\n", "", "else", ":", "\n", "            ", "hidden_dim_input", "=", "eval", "(", "hidden_dim_input", ")", "\n", "hidden_dim", "=", "hidden_dim_input", "[", ":", "]", "\n", "hidden_dim", ".", "insert", "(", "0", ",", "input_shape", ")", "\n", "# encoder", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "hidden_dim", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "encoder", ".", "add_module", "(", "f'en_lr{idx+1}'", ",", "nn", ".", "Linear", "(", "hidden_dim", "[", "idx", "]", ",", "hidden_dim", "[", "idx", "+", "1", "]", ")", ")", "\n", "self", ".", "encoder", ".", "add_module", "(", "f'en_relu{idx+1}'", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "#self.encoder.add_module(f'en_tan{idx}', nn.Tanh())", "\n", "# decoder", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "hidden_dim", ")", "-", "1", ",", "1", ",", "-", "1", ")", ":", "\n", "            ", "self", ".", "decoder", ".", "add_module", "(", "f'de_lr{idx}'", ",", "nn", ".", "Linear", "(", "hidden_dim", "[", "idx", "]", ",", "hidden_dim", "[", "idx", "-", "1", "]", ")", ")", "\n", "self", ".", "decoder", ".", "add_module", "(", "f'de_relu{idx}'", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "#self.decoder.add_module(f'de_tan{idx}', nn.Tanh())", "\n", "", "self", ".", "decoder", ".", "add_module", "(", "f'de_lr{1}'", ",", "nn", ".", "Linear", "(", "hidden_dim", "[", "1", "]", ",", "hidden_dim", "[", "0", "]", ")", ")", "\n", "\n", "\n", "# scoring network", "\n", "self", ".", "scores", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "scores", ".", "add_module", "(", "f'scores1'", ",", "nn", ".", "Linear", "(", "hidden_dim", "[", "-", "1", "]", ",", "10", ")", ")", "\n", "self", ".", "scores", ".", "add_module", "(", "f'scores2'", ",", "nn", ".", "Linear", "(", "10", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae.SGAE.forward": [[59, 67], ["sgae.SGAE.encoder", "sgae.SGAE.decoder", "sgae.SGAE.scores"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "enc", "=", "self", ".", "encoder", "(", "x", ")", "\n", "dec", "=", "self", ".", "decoder", "(", "enc", ")", "\n", "\n", "# scores", "\n", "scores", "=", "self", ".", "scores", "(", "enc", ")", "\n", "\n", "return", "scores", ",", "dec", ",", "enc", "\n", "\n"]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae.SGAE.loss_function": [[68, 75], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "sgae.SGAE.compute_dist_error"], "methods", ["home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae.SGAE.compute_dist_error"], ["", "def", "loss_function", "(", "self", ",", "x", ",", "x_dec", ",", "scores", ",", "anomal_flag", ",", "params", ")", ":", "\n", "        ", "'''Reoconstruction error'''", "\n", "recon_error", "=", "torch", ".", "mean", "(", "(", "x", "-", "x_dec", ")", "**", "2", ")", "\n", "dist_error", "=", "self", ".", "compute_dist_error", "(", "scores", ",", "anomal_flag", ",", "params", ")", "\n", "loss", "=", "recon_error", "+", "params", ".", "lam_dist", "*", "dist_error", "\n", "\n", "return", "loss", ",", "recon_error", ",", "dist_error", "\n", "\n"]], "home.repos.pwc.inspect_result.urbanmobility_sgm.None.sgae.SGAE.compute_dist_error": [[76, 88], ["torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.normal", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "anomal_flag.unsqueeze.unsqueeze.unsqueeze", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "compute_dist_error", "(", "self", ",", "scores", ",", "anomal_flag", ",", "params", ")", ":", "\n", "\n", "# inlier loss", "\n", "        ", "ref", "=", "torch", ".", "normal", "(", "mean", "=", "0", ",", "std", "=", "1.0", ",", "size", "=", "(", "10000", ",", ")", ")", "\n", "dev", "=", "scores", "-", "torch", ".", "mean", "(", "ref", ")", "\n", "inlier_loss", "=", "torch", ".", "abs", "(", "dev", ")", "\n", "# outlier loss", "\n", "anomal_flag", "=", "anomal_flag", ".", "unsqueeze", "(", "1", ")", "\n", "outlier_loss", "=", "torch", ".", "abs", "(", "torch", ".", "max", "(", "params", ".", "a", "-", "scores", ",", "torch", ".", "zeros", "(", "scores", ".", "shape", ")", ".", "to", "(", "params", ".", "device", ")", ")", ")", "\n", "dist_error", "=", "torch", ".", "mean", "(", "(", "1", "-", "anomal_flag", ")", "*", "inlier_loss", "+", "params", ".", "lam_out", "*", "anomal_flag", "*", "outlier_loss", ")", "\n", "\n", "return", "dist_error", "\n", "\n"]]}