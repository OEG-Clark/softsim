{"home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.random_sample": [[195, 198], ["numpy.random.choice"], "function", ["None"], ["", "def", "random_sample", "(", "m", ",", "X", ",", "y", ")", ":", "\n", "  ", "index", "=", "np", ".", "random", ".", "choice", "(", "X", ".", "shape", "[", "0", "]", ",", "m", ",", "replace", "=", "False", ")", "\n", "return", "X", "[", "index", "]", ",", "y", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.ini_model": [[28, 40], ["unbalanced_utils.random_sample", "sklearn.utils.shuffle", "print", "fmnist_loader", "Exception"], "function", ["home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.random_sample"], ["", "def", "ini_model", "(", "opt", ")", ":", "\n", "    ", "nb_classes", "=", "10", "\n", "if", "opt", ".", "dataset", "==", "'mfashion'", ":", "\n", "        ", "X_train_All", ",", "y_train_All", ",", "X_test", ",", "y_test", "=", "fmnist_loader", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'should be mfashion'", ")", "\n", "", "X", ",", "y", ",", "X_tr", ",", "y_tr", "=", "X_train_All", "[", ":", "10000", ",", ":", "]", ",", "y_train_All", "[", ":", "10000", "]", ",", "X_train_All", "[", "10000", ":", ",", ":", "]", ",", "y_train_All", "[", "10000", ":", "]", "\n", "m", "=", "opt", ".", "ini_number", "\n", "X_ini", ",", "y_ini", "=", "random_sample", "(", "m", ",", "X", ",", "y", ")", "\n", "X_ini", ",", "y_ini", "=", "shuffle", "(", "X_ini", ",", "y_ini", ")", "\n", "print", "(", "\"initial size \"", ",", "X_ini", ".", "shape", ")", "\n", "return", "X_ini", ",", "y_ini", ",", "X_test", ",", "y_test", ",", "X_train_All", ",", "y_train_All", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.ini_model_train": [[41, 71], ["unbalanced_utils.ini_model", "network.Model().to", "torch.SGD", "torch.CrossEntropyLoss", "Model().to.train", "range", "Model().to.parameters", "range", "Model().to.eval", "unbalanced_utils.test_without_dropout", "print", "network.Model", "get_slice", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "optim.SGD.zero_grad", "Model().to.", "nn.CrossEntropyLoss.", "criterion.backward", "optim.SGD.step", "range", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "loss.item", "os.path.join", "Model().to.state_dict", "optim.SGD.state_dict", "loss.item", "Model().to.state_dict", "optim.SGD.state_dict", "loss.item", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "str"], "function", ["home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.ini_model", "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.test_without_dropout"], ["", "def", "ini_model_train", "(", "opt", ")", ":", "\n", "    ", "X_ini", ",", "y_ini", ",", "X_test", ",", "y_test", ",", "X_train_All", ",", "y_train_All", "=", "ini_model", "(", "opt", ")", "\n", "mod", "=", "Model", "(", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "mod", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "ini_lr", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "num_batches_train", "=", "X_ini", ".", "shape", "[", "0", "]", "//", "opt", ".", "ini_batch_size", "\n", "mod", ".", "train", "(", ")", "\n", "for", "i", "in", "range", "(", "opt", ".", "ini_epoch", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "for", "j", "in", "range", "(", "num_batches_train", ")", ":", "\n", "            ", "slce", "=", "get_slice", "(", "j", ",", "opt", ".", "ini_batch_size", ")", "\n", "X_tra", "=", "torch", ".", "from_numpy", "(", "X_ini", "[", "slce", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "Y_tra", "=", "torch", ".", "from_numpy", "(", "y_ini", "[", "slce", "]", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "out", "=", "mod", "(", "X_tra", ")", "\n", "batch_loss", "=", "criterion", "(", "out", ",", "Y_tra", ")", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss", "+=", "batch_loss", "\n", "", "mod", ".", "eval", "(", ")", "\n", "acc", "=", "test_without_dropout", "(", "X_test", ",", "y_test", ",", "mod", ",", "device", ")", "\n", "print", "(", "'\\n[{}/{} epoch], training loss:{:.4f}, test accuracy is:{} \\n'", ".", "format", "(", "i", ",", "opt", ".", "ini_epoch", ",", "loss", ".", "item", "(", ")", "/", "num_batches_train", ",", "acc", ")", ")", "\n", "if", "i", "+", "1", "==", "opt", ".", "ini_epoch", ":", "\n", "            ", "for", "d", "in", "range", "(", "opt", ".", "num_dev", ")", ":", "\n", "                ", "torch", ".", "save", "(", "{", "'epoch'", ":", "i", ",", "\n", "'model_state_dict'", ":", "mod", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "ini_model_path", ",", "'device'", "+", "str", "(", "d", ")", ",", "\"ini.model.pth.tar\"", ")", ")", "\n", "", "torch", ".", "save", "(", "{", "'epoch'", ":", "i", ",", "'model_state_dict'", ":", "mod", ".", "state_dict", "(", ")", ",", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ",", "opt", ".", "ini_model_path", ")", "\n", "", "", "return", "X_test", ",", "y_test", ",", "X_train_All", ",", "y_train_All", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.sample_generator": [[75, 97], ["print", "print", "range", "numpy.random.randint", "enumerate", "sum", "numpy.random.randint", "conx.append", "cony.append", "record.append"], "function", ["None"], ["", "def", "sample_generator", "(", "L", ",", "nr_dev", ",", "X", ",", "y", ",", "target", "=", "10", ",", "nr_dist", "=", "None", ")", ":", "\n", "    ", "conx", "=", "[", "]", "\n", "cony", "=", "[", "]", "\n", "print", "(", "'num of devices is: '", ",", "nr_dev", ")", "\n", "#nr_dev= len(nr_dist)", "\n", "if", "nr_dist", "is", "None", ":", "\n", "        ", "nr_dist", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "target", ",", "size", "=", "(", "nr_dev", ",", ")", ")", "\n", "while", "sum", "(", "nr_dist", ")", "!=", "target", ":", "\n", "            ", "nr_dist", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "target", ",", "size", "=", "(", "4", ",", ")", ")", "\n", "", "", "print", "(", "nr_dist", ")", "\n", "record", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nr_dev", ")", ":", "\n", "        ", "ls", "=", "L", "[", ":", "nr_dist", "[", "i", "]", "]", "\n", "L", "=", "L", "[", "nr_dist", "[", "i", "]", ":", "]", "\n", "#print('dev {} has {} labels'.format(i+1,ls))", "\n", "for", "j", ",", "l", "in", "enumerate", "(", "ls", ")", ":", "\n", "#print('dev {} has {} labels, {}th label is {} '.format(i+1,ls,j+1,l))", "\n", "#print('label {} has {} data'.format(l,X[y==l,:,:,:].shape[0]))", "\n", "            ", "conx", ".", "append", "(", "X", "[", "y", "==", "l", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "cony", ".", "append", "(", "y", "[", "y", "==", "l", "]", ")", "\n", "record", ".", "append", "(", "X", "[", "y", "==", "l", ",", ":", ",", ":", ",", ":", "]", ".", "shape", "[", "0", "]", ")", "\n", "", "", "return", "conx", ",", "cony", ",", "record", ",", "nr_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.unbalanced_data": [[98, 120], ["numpy.unique", "unbalanced_utils.sample_generator", "numpy.vstack", "numpy.hstack", "list", "sklearn.utils.shuffle", "sklearn.utils.shuffle", "sklearn.utils.shuffle", "sklearn.utils.shuffle", "print", "print", "print", "print", "len", "ValueError", "numpy.cumsum", "numpy.array", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum"], "function", ["home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.sample_generator"], ["", "def", "unbalanced_data", "(", "X_train_All", ",", "y_train_All", ",", "opt", ",", "nr_dist", ")", ":", "\n", "    ", "if", "len", "(", "nr_dist", ")", "!=", "4", ":", "\n", "        ", "raise", "ValueError", "(", "'device number should be four'", ")", "\n", "", "L", "=", "np", ".", "unique", "(", "y_train_All", ")", "\n", "X_tr", ",", "y_tr", "=", "X_train_All", "[", "10000", ":", ",", ":", "]", ",", "y_train_All", "[", "10000", ":", "]", "\n", "conx", ",", "cony", ",", "record", ",", "tmp", "=", "sample_generator", "(", "L", ",", "opt", ".", "num_dev", ",", "X_tr", ",", "y_tr", ",", "nr_dist", "=", "nr_dist", ")", "\n", "conx", "=", "np", ".", "vstack", "(", "conx", ")", "\n", "cony", "=", "np", ".", "hstack", "(", "cony", ")", "\n", "tmp", "=", "list", "(", "np", ".", "cumsum", "(", "np", ".", "array", "(", "tmp", ")", ")", ")", "\n", "X1", ",", "y1", "=", "conx", "[", ":", "sum", "(", "record", "[", ":", "tmp", "[", "0", "]", "]", ")", ",", ":", ",", ":", ",", ":", "]", ",", "cony", "[", ":", "sum", "(", "record", "[", ":", "tmp", "[", "0", "]", "]", ")", "]", "\n", "X2", ",", "y2", "=", "conx", "[", "sum", "(", "record", "[", ":", "tmp", "[", "0", "]", "]", ")", ":", "sum", "(", "record", "[", ":", "tmp", "[", "1", "]", "]", ")", ",", ":", ",", ":", ",", ":", "]", ",", "cony", "[", "sum", "(", "record", "[", ":", "tmp", "[", "0", "]", "]", ")", ":", "sum", "(", "record", "[", ":", "tmp", "[", "1", "]", "]", ")", "]", "\n", "X3", ",", "y3", "=", "conx", "[", "sum", "(", "record", "[", ":", "tmp", "[", "1", "]", "]", ")", ":", "sum", "(", "record", "[", ":", "tmp", "[", "2", "]", "]", ")", ",", ":", ",", ":", ",", ":", "]", ",", "cony", "[", "sum", "(", "record", "[", ":", "tmp", "[", "1", "]", "]", ")", ":", "sum", "(", "record", "[", ":", "tmp", "[", "2", "]", "]", ")", "]", "\n", "X4", ",", "y4", "=", "conx", "[", "sum", "(", "record", "[", ":", "tmp", "[", "2", "]", "]", ")", ":", "sum", "(", "record", "[", ":", "tmp", "[", "3", "]", "]", ")", ",", ":", ",", ":", ",", ":", "]", ",", "cony", "[", "sum", "(", "record", "[", ":", "tmp", "[", "2", "]", "]", ")", ":", "sum", "(", "record", "[", ":", "tmp", "[", "3", "]", "]", ")", "]", "\n", "X1", ",", "y1", "=", "shuffle", "(", "X1", ",", "y1", ")", "\n", "X2", ",", "y2", "=", "shuffle", "(", "X2", ",", "y2", ")", "\n", "X3", ",", "y3", "=", "shuffle", "(", "X3", ",", "y3", ")", "\n", "X4", ",", "y4", "=", "shuffle", "(", "X4", ",", "y4", ")", "\n", "print", "(", "'device1 has {} data'", ".", "format", "(", "X1", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "'device2 has {} data'", ".", "format", "(", "X2", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "'device3 has {} data'", ".", "format", "(", "X3", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "'device4 has {} data'", ".", "format", "(", "X4", ".", "shape", "[", "0", "]", ")", ")", "\n", "return", "X1", ",", "y1", ",", "X2", ",", "y2", ",", "X3", ",", "y3", ",", "X4", ",", "y4", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.en_ave": [[122, 132], ["print", "network.Model().to", "zip", "unbalanced_utils.test_without_dropout", "torch.save", "torch.save", "torch.save", "torch.save", "Model().to.parameters", "mod1.parameters", "mod2.parameters", "mod3.parameters", "mod4.parameters", "p.data.copy_", "network.Model", "p1.data.mul().add().add().add", "str", "Model().to.state_dict", "p4.data.mul", "p1.data.mul().add().add", "os.path.join", "str", "p3.data.mul", "p1.data.mul().add", "p2.data.mul", "p1.data.mul"], "function", ["home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.test_without_dropout"], ["", "def", "en_ave", "(", "mod1", ",", "mod2", ",", "mod3", ",", "mod4", ",", "X_test", ",", "y_test", ",", "state", ")", ":", "\n", "    ", "print", "(", "'=> load average ensemble'", ")", "\n", "mod", "=", "Model", "(", ")", ".", "to", "(", "device", ")", "\n", "for", "p", ",", "p1", ",", "p2", ",", "p3", ",", "p4", "in", "zip", "(", "mod", ".", "parameters", "(", ")", ",", "mod1", ".", "parameters", "(", ")", ",", "mod2", ".", "parameters", "(", ")", ",", "mod3", ".", "parameters", "(", ")", ",", "mod4", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "p", ".", "data", ".", "copy_", "(", "p1", ".", "data", ".", "mul", "(", "0.25", ")", ".", "add", "(", "p2", ".", "data", ".", "mul", "(", "0.25", ")", ")", ".", "add", "(", "p3", ".", "data", ".", "mul", "(", "0.25", ")", ")", ".", "add", "(", "p4", ".", "data", ".", "mul", "(", "0.25", ")", ")", ")", "\n", "", "acc", "=", "test_without_dropout", "(", "X_test", ",", "y_test", ",", "mod", ",", "device", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "'exp'", ",", "'ensemble.'", ")", "+", "str", "(", "state", "[", "'itr'", "]", ")", "+", "'epoch.'", "+", "str", "(", "state", "[", "'acq'", "]", ")", "+", "'acq.pth.tar'", "\n", "state", "[", "'rep'", "]", "=", "path", "\n", "torch", ".", "save", "(", "{", "'model_state_dict'", ":", "mod", ".", "state_dict", "(", ")", "}", ",", "state", "[", "'rep'", "]", ")", "\n", "return", "mod", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.en_opt": [[133, 144], ["print", "M.append", "M.append", "M.append", "M.append", "numpy.argmax", "numpy.max"], "function", ["None"], ["", "def", "en_opt", "(", "mod1", ",", "mod2", ",", "mod3", ",", "mod4", ",", "acc1", ",", "acc2", ",", "acc3", ",", "acc4", ")", ":", "\n", "    ", "print", "(", "'=> load optimal ensemble'", ")", "\n", "M", "=", "[", "]", "\n", "M", ".", "append", "(", "mod1", ")", "\n", "M", ".", "append", "(", "mod2", ")", "\n", "M", ".", "append", "(", "mod3", ")", "\n", "M", ".", "append", "(", "mod4", ")", "\n", "ind_max", "=", "np", ".", "argmax", "(", "[", "acc1", ",", "acc2", ",", "acc3", ",", "acc4", "]", ")", "\n", "acc", "=", "np", ".", "max", "(", "[", "acc1", ",", "acc2", ",", "acc3", ",", "acc4", "]", ")", "\n", "mod", "=", "M", "[", "ind_max", "]", "\n", "return", "mod", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.en_mix": [[145, 160], ["print", "unbalanced_utils.en_ave", "unbalanced_utils.en_opt", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "str", "mod_ave.state_dict", "str", "mod_opt.state_dict", "os.path.join", "str", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.en_ave", "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.en_opt"], ["", "def", "en_mix", "(", "mod1", ",", "mod2", ",", "mod3", ",", "mod4", ",", "X_test", ",", "y_test", ",", "acc1", ",", "acc2", ",", "acc3", ",", "acc4", ",", "state", ")", ":", "\n", "    ", "print", "(", "'=> load mix ensemble'", ")", "\n", "mod_ave", ",", "acc_ave", "=", "en_ave", "(", "mod1", ",", "mod2", ",", "mod3", ",", "mod4", ",", "X_test", ",", "y_test", ")", "\n", "mod_opt", ",", "acc_opt", "=", "en_opt", "(", "mod1", ",", "mod2", ",", "mod3", ",", "mod4", ",", "acc1", ",", "acc2", ",", "acc3", ",", "acc4", ")", "\n", "print", "(", "'ensembled acc_ave: {:.3f}, ensembled acc_opt: {:.3f}'", ".", "format", "(", "acc_ave", ",", "acc_opt", ")", ")", "\n", "if", "acc_ave", ">=", "acc_opt", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "'exp'", ",", "'ensemble.'", ")", "+", "str", "(", "state", "[", "'itr'", "]", ")", "+", "'epoch.'", "+", "str", "(", "state", "[", "'acq'", "]", ")", "+", "'acq.pth.tar'", "\n", "state", "[", "'rep'", "]", "=", "path", "\n", "torch", ".", "save", "(", "{", "'model_state_dict'", ":", "mod_ave", ".", "state_dict", "(", ")", "}", ",", "state", "[", "'rep'", "]", ")", "\n", "return", "mod_ave", ",", "acc_ave", "\n", "", "else", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "'exp'", ",", "'ensemble.'", ")", "+", "str", "(", "state", "[", "'itr'", "]", ")", "+", "'epoch.'", "+", "str", "(", "state", "[", "'acq'", "]", ")", "+", "'acq.pth.tar'", "\n", "state", "[", "'rep'", "]", "=", "path", "\n", "torch", ".", "save", "(", "{", "'model_state_dict'", ":", "mod_opt", ".", "state_dict", "(", ")", "}", ",", "state", "[", "'rep'", "]", ")", "\n", "return", "mod_opt", ",", "acc_opt", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.test_without_dropout": [[162, 173], ["mod.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "mod", "sklearn.metrics.accuracy_score", "torch.cross_entropy().item", "torch.max", "torch.max", "torch.max", "torch.max", "torch.from_numpy().long().to.cpu", "preds.cpu", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.cross_entropy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "", "def", "test_without_dropout", "(", "X_test", ",", "y_test", ",", "mod", ",", "device", ")", ":", "\n", "\n", "    ", "mod", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "X_va", "=", "torch", ".", "from_numpy", "(", "X_test", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "Y_va", "=", "torch", ".", "from_numpy", "(", "y_test", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "output", "=", "mod", "(", "X_va", ")", "\n", "test_loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "Y_va", ")", ".", "item", "(", ")", "/", "X_test", ".", "shape", "[", "0", "]", "\n", "preds", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "[", "1", "]", "\n", "acc", "=", "accuracy_score", "(", "Y_va", ".", "cpu", "(", ")", ",", "preds", ".", "cpu", "(", ")", ")", "\n", "", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.ensemble": [[174, 194], ["network.Model().to", "network.Model().to", "network.Model().to", "network.Model().to", "network.Model().to", "Model().to.load_state_dict", "Model().to.load_state_dict", "Model().to.load_state_dict", "Model().to.load_state_dict", "zip", "Model().to.state_dict", "test_with_dropout", "torch.save", "torch.save", "torch.save", "torch.save", "Model().to.parameters", "Model().to.parameters", "Model().to.parameters", "Model().to.parameters", "Model().to.parameters", "p.data.copy_", "network.Model", "network.Model", "network.Model", "network.Model", "network.Model", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "p1.data.mul().add().add().add", "str", "Model().to.state_dict", "p4.data.mul", "p1.data.mul().add().add", "str", "p3.data.mul", "p1.data.mul().add", "p2.data.mul", "p1.data.mul"], "function", ["None"], ["", "def", "ensemble", "(", "state", ",", "X_test", ",", "y_test", ",", "g", ")", ":", "\n", "    ", "mod1", "=", "Model", "(", ")", ".", "to", "(", "state", "[", "'device'", "]", ")", "\n", "mod2", "=", "Model", "(", ")", ".", "to", "(", "state", "[", "'device'", "]", ")", "\n", "mod3", "=", "Model", "(", ")", ".", "to", "(", "state", "[", "'device'", "]", ")", "\n", "mod4", "=", "Model", "(", ")", ".", "to", "(", "state", "[", "'device'", "]", ")", "\n", "mod", "=", "Model", "(", ")", ".", "to", "(", "state", "[", "'device'", "]", ")", "\n", "mod1", ".", "load_state_dict", "(", "torch", ".", "load", "(", "state", "[", "'path1'", "]", ")", "[", "'model_state_dict'", "]", ")", "\n", "mod2", ".", "load_state_dict", "(", "torch", ".", "load", "(", "state", "[", "'path2'", "]", ")", "[", "'model_state_dict'", "]", ")", "\n", "mod3", ".", "load_state_dict", "(", "torch", ".", "load", "(", "state", "[", "'path3'", "]", ")", "[", "'model_state_dict'", "]", ")", "\n", "mod4", ".", "load_state_dict", "(", "torch", ".", "load", "(", "state", "[", "'path4'", "]", ")", "[", "'model_state_dict'", "]", ")", "\n", "\n", "for", "p", ",", "p1", ",", "p2", ",", "p3", ",", "p4", "in", "zip", "(", "mod", ".", "parameters", "(", ")", ",", "mod1", ".", "parameters", "(", ")", ",", "mod2", ".", "parameters", "(", ")", ",", "mod3", ".", "parameters", "(", ")", ",", "mod4", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "p", ".", "data", ".", "copy_", "(", "p1", ".", "data", ".", "mul", "(", "0.25", ")", ".", "add", "(", "p2", ".", "data", ".", "mul", "(", "0.25", ")", ")", ".", "add", "(", "p3", ".", "data", ".", "mul", "(", "0.25", ")", ")", ".", "add", "(", "p4", ".", "data", ".", "mul", "(", "0.25", ")", ")", ")", "\n", "", "mod", ".", "state_dict", "(", ")", "\n", "acc", "=", "test_with_dropout", "(", "X_test", ",", "y_test", ",", "mod", ",", "state", "[", "'device'", "]", ",", "state", "[", "'cuda'", "]", ")", "\n", "path", "=", "g", "+", "str", "(", "state", "[", "'itr'", "]", ")", "+", "'epoch.'", "+", "str", "(", "state", "[", "'acq'", "]", ")", "+", "'acq.pth.tar'", "\n", "state", "[", "'rep'", "]", "=", "path", "\n", "torch", ".", "save", "(", "{", "'model_state_dict'", ":", "mod", ".", "state_dict", "(", ")", "}", ",", "state", "[", "'rep'", "]", ")", "\n", "\n", "return", "mod", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.ini_train": [[199, 235], ["network.Model().to", "torch.SGD", "torch.CrossEntropyLoss", "print", "Model().to.train", "range", "Model().to.parameters", "range", "Model().to.eval", "print", "network.Model", "get_slice", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "optim.SGD.zero_grad", "Model().to.", "nn.CrossEntropyLoss.", "criterion.backward", "optim.SGD.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "Model().to.", "sklearn.metrics.accuracy_score", "torch.save", "torch.save", "torch.save", "torch.save", "torch.max", "torch.max", "torch.max", "torch.max", "os.path.join", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "loss.item", "Model().to.state_dict", "optim.SGD.state_dict", "loss.item", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "ini_train", "(", "X_ini", ",", "y_ini", ",", "X_te", ",", "y_te", ",", "epochs", ",", "paths", ",", "device", ",", "batch_size", ",", "lr", ",", "momentum", ",", "arr_drop", ")", ":", "\n", "    ", "mod", "=", "Model", "(", "arr_drop", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "mod", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "momentum", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "#batch_size = 200", "\n", "num_batches_train", "=", "X_ini", ".", "shape", "[", "0", "]", "//", "batch_size", "\n", "print", "(", "\"number of batch \"", ",", "num_batches_train", ")", "\n", "mod", ".", "train", "(", ")", "\n", "for", "i", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "for", "j", "in", "range", "(", "num_batches_train", ")", ":", "\n", "            ", "slce", "=", "get_slice", "(", "j", ",", "batch_size", ")", "\n", "X_tra", "=", "torch", ".", "from_numpy", "(", "X_ini", "[", "slce", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "Y_tra", "=", "torch", ".", "from_numpy", "(", "y_ini", "[", "slce", "]", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "out", "=", "mod", "(", "X_tra", ")", "\n", "batch_loss", "=", "criterion", "(", "out", ",", "Y_tra", ")", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss", "+=", "batch_loss", "\n", "", "mod", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "X_va", "=", "torch", ".", "from_numpy", "(", "X_te", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "Y_va", "=", "torch", ".", "from_numpy", "(", "y_te", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "output", "=", "mod", "(", "X_va", ")", "\n", "preds", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "[", "1", "]", "\n", "acc", "=", "accuracy_score", "(", "Y_va", ",", "preds", ")", "\n", "", "print", "(", "'\\n[{}/{} epoch], training loss:{:.4f}, test accuracy is:{} \\n'", ".", "format", "(", "i", ",", "epochs", ",", "loss", ".", "item", "(", ")", "/", "num_batches_train", ",", "acc", ")", ")", "\n", "", "if", "i", "+", "1", "==", "epochs", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "i", ",", "\n", "'model_state_dict'", ":", "mod", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ",", "os", ".", "path", ".", "join", "(", "path", ",", "\"ini.model.pth.tar\"", ")", ")", "\n", "", "", "return", "mod", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.random_run": [[237, 307], ["network.Model().to", "Model().to.load_state_dict", "torch.Adam", "optim.Adam.load_state_dict", "torch.CrossEntropyLoss", "numpy.empty", "numpy.empty", "test", "AA.append", "print", "range", "torch.save", "torch.save", "torch.save", "torch.save", "torch.load", "torch.load", "torch.load", "torch.load", "print", "torch.load", "torch.load", "torch.load", "torch.load", "Model().to.parameters", "numpy.asarray", "numpy.random.choice", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.concatenate", "numpy.concatenate", "print", "numpy.concatenate", "numpy.concatenate", "print", "numpy.vstack", "numpy.hstack", "sklearn.utils.shuffle", "print", "Model().to.train", "range", "test", "print", "AA.append", "network.Model", "random.sample", "range", "losses_train.append", "Model().to.state_dict", "optim.Adam.state_dict", "range", "get_slice", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "torch.from_numpy().long().to", "optim.Adam.zero_grad", "Model().to.", "nn.CrossEntropyLoss.", "criterion.backward", "optim.Adam.step", "losses.item", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "random_run", "(", "acquisition_iterations", ",", "X_Pool", ",", "y_Pool", ",", "pool_subset", ",", "dropout_iterations", ",", "\n", "nb_classes", ",", "Queries", ",", "X_test", ",", "y_test", ",", "rep", ",", "X_old", ",", "y_old", ",", "device", ",", "itr", ",", "cuda", ",", "g", ")", ":", "\n", "        ", "mod", "=", "Model", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "cuda", ":", "\n", "            ", "cp", "=", "torch", ".", "load", "(", "rep", ")", "\n", "print", "(", "\"\\n ********load gpu version******* \\n\"", ")", "\n", "", "else", ":", "\n", "            ", "cp", "=", "torch", ".", "load", "(", "rep", ",", "map_location", "=", "'cpu'", ")", "\n", "", "mod", ".", "load_state_dict", "(", "cp", "[", "'model_state_dict'", "]", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "mod", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ",", "weight_decay", "=", "0.5", ")", "#,weight_decay=0.5", "\n", "#optimizer = optim.SGD(mod.parameters(), lr=0.001,weight_decay=0.5)", "\n", "optimizer", ".", "load_state_dict", "(", "cp", "[", "'optimizer_state_dict'", "]", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "X_train", "=", "np", ".", "empty", "(", "[", "0", ",", "1", ",", "28", ",", "28", "]", ")", "\n", "y_train", "=", "np", ".", "empty", "(", "[", "0", ",", "]", ")", "\n", "AA", "=", "[", "]", "\n", "losses_train", "=", "[", "]", "\n", "#acc = test(test_loader,mod,device,cuda)", "\n", "acc", "=", "test", "(", "X_test", ",", "y_test", ",", "mod", ",", "device", ",", "cuda", ")", "\n", "AA", ".", "append", "(", "acc", ")", "\n", "print", "(", "'initial test accuracy: '", ",", "acc", ")", "\n", "for", "i", "in", "range", "(", "acquisition_iterations", ")", ":", "\n", "            ", "pool_subset_dropout", "=", "np", ".", "asarray", "(", "random", ".", "sample", "(", "range", "(", "0", ",", "X_Pool", ".", "shape", "[", "0", "]", ")", ",", "pool_subset", ")", ")", "\n", "X_Pool_Dropout", "=", "X_Pool", "[", "pool_subset_dropout", ",", ":", ",", ":", ",", ":", "]", "\n", "y_Pool_Dropout", "=", "y_Pool", "[", "pool_subset_dropout", "]", "\n", "\n", "x_pool_index", "=", "np", ".", "random", ".", "choice", "(", "X_Pool_Dropout", ".", "shape", "[", "0", "]", ",", "Queries", ",", "replace", "=", "False", ")", "\n", "Pooled_X", "=", "X_Pool_Dropout", "[", "x_pool_index", ",", ":", ",", ":", ",", ":", "]", "\n", "Pooled_Y", "=", "y_Pool_Dropout", "[", "x_pool_index", "]", "\n", "\n", "delete_Pool_X", "=", "np", ".", "delete", "(", "X_Pool", ",", "(", "pool_subset_dropout", ")", ",", "axis", "=", "0", ")", "\n", "delete_Pool_Y", "=", "np", ".", "delete", "(", "y_Pool", ",", "(", "pool_subset_dropout", ")", ",", "axis", "=", "0", ")", "\n", "\n", "delete_Pool_X_Dropout", "=", "np", ".", "delete", "(", "X_Pool_Dropout", ",", "(", "x_pool_index", ")", ",", "axis", "=", "0", ")", "\n", "delete_Pool_Y_Dropout", "=", "np", ".", "delete", "(", "y_Pool_Dropout", ",", "(", "x_pool_index", ")", ",", "axis", "=", "0", ")", "\n", "\n", "X_Pool", "=", "np", ".", "concatenate", "(", "(", "delete_Pool_X", ",", "delete_Pool_X_Dropout", ")", ",", "axis", "=", "0", ")", "\n", "y_Pool", "=", "np", ".", "concatenate", "(", "(", "delete_Pool_Y", ",", "delete_Pool_Y_Dropout", ")", ",", "axis", "=", "0", ")", "\n", "print", "(", "'updated pool size is '", ",", "X_Pool", ".", "shape", "[", "0", "]", ")", "\n", "\n", "\n", "X_train", "=", "np", ".", "concatenate", "(", "(", "X_train", ",", "Pooled_X", ")", ",", "axis", "=", "0", ")", "\n", "y_train", "=", "np", ".", "concatenate", "(", "(", "y_train", ",", "Pooled_Y", ")", ",", "axis", "=", "0", ")", "\n", "print", "(", "'number of data points from pool'", ",", "X_train", ".", "shape", "[", "0", "]", ")", "\n", "\n", "batch_size", "=", "100", "\n", "X", "=", "np", ".", "vstack", "(", "(", "X_old", ",", "Pooled_X", ")", ")", "\n", "y", "=", "np", ".", "hstack", "(", "(", "y_old", ",", "Pooled_Y", ")", ")", "\n", "X", ",", "y", "=", "shuffle", "(", "X", ",", "y", ")", "\n", "num_batch", "=", "X", ".", "shape", "[", "0", "]", "//", "batch_size", "\n", "print", "(", "\"number of batch: \"", ",", "num_batch", ")", "\n", "mod", ".", "train", "(", ")", "\n", "for", "h", "in", "range", "(", "itr", ")", ":", "\n", "                ", "losses", "=", "0", "\n", "for", "j", "in", "range", "(", "num_batch", ")", ":", "\n", "                    ", "slce", "=", "get_slice", "(", "j", ",", "batch_size", ")", "\n", "X_fog_", "=", "torch", ".", "from_numpy", "(", "X", "[", "slce", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "y_fog_", "=", "torch", ".", "from_numpy", "(", "y", "[", "slce", "]", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "out", "=", "mod", "(", "X_fog_", ")", "\n", "train_loss", "=", "criterion", "(", "out", ",", "y_fog_", ")", "\n", "losses", "+=", "train_loss", "\n", "train_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "losses_train", ".", "append", "(", "losses", ".", "item", "(", ")", "/", "num_batch", ")", "\n", "", "acc", "=", "test", "(", "X_test", ",", "y_test", ",", "mod", ",", "device", ",", "cuda", ")", "\n", "print", "(", "'test accuracy: '", ",", "acc", ")", "\n", "AA", ".", "append", "(", "acc", ")", "\n", "", "torch", ".", "save", "(", "{", "'model_state_dict'", ":", "mod", ".", "state_dict", "(", ")", ",", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "g", ")", "\n", "return", "AA", ",", "mod", ",", "X_train", ",", "y_train", ",", "losses_train", ",", "optimizer", "", "", ""]], "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.main.train_with_pool": [[44, 99], ["network.Model().to", "Model().to.load_state_dict", "optim.SGD", "optim.SGD.load_state_dict", "nn.CrossEntropyLoss", "np.empty", "np.empty", "unbalanced_utils.test_without_dropout", "print", "A.append", "range", "os.path.join", "print", "torch.save", "Model().to.parameters", "np.random.choice", "np.delete", "np.delete", "print", "np.concatenate", "np.concatenate", "Model().to.train", "range", "unbalanced_utils.test_without_dropout", "print", "network.Model", "torch.load", "torch.load", "range", "loss_log.append", "Model().to.state_dict", "optim.SGD.state_dict", "get_slice", "torch.from_numpy().float().to", "torch.from_numpy().long().to", "optim.SGD.zero_grad", "Model().to.", "nn.CrossEntropyLoss.", "criterion.item", "criterion.backward", "optim.SGD.step", "str", "str", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.test_without_dropout", "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.unbalanced_utils.test_without_dropout"], ["def", "train_with_pool", "(", "acq", ",", "X_pool", ",", "y_pool", ",", "state", ",", "pp", ",", "n", ",", "dd", ")", ":", "\n", "\t", "mod", "=", "Model", "(", ")", ".", "to", "(", "device", ")", "\n", "mod", ".", "load_state_dict", "(", "torch", ".", "load", "(", "state", "[", "'rep'", "]", ")", "[", "'model_state_dict'", "]", ")", "#,map_location='cpu'", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "mod", ".", "parameters", "(", ")", ",", "lr", "=", "0.05", ",", "momentum", "=", "0.95", ")", "\n", "optimizer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "state", "[", "'path1'", "]", ")", "[", "'optimizer_state_dict'", "]", ")", "#map_location='cpu'", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "X_train", "=", "np", ".", "empty", "(", "[", "0", ",", "1", ",", "28", ",", "28", "]", ")", "\n", "y_train", "=", "np", ".", "empty", "(", "[", "0", ",", "]", ")", "\n", "A", "=", "[", "]", "\n", "loss_log", "=", "[", "]", "\n", "acc", "=", "test_without_dropout", "(", "X_test", ",", "y_test", ",", "mod", ",", "device", ")", "\n", "print", "(", "'initial test accuracy: '", ",", "acc", ")", "\n", "A", ".", "append", "(", "acc", ")", "\n", "for", "i", "in", "range", "(", "acq", ")", ":", "\n", "\t\t", "index", "=", "np", ".", "random", ".", "choice", "(", "X_pool", ".", "shape", "[", "0", "]", ",", "state", "[", "'Queries'", "]", ",", "replace", "=", "False", ")", "\n", "X", "=", "X_pool", "[", "index", ",", ":", ",", ":", ",", ":", "]", "\n", "y", "=", "y_pool", "[", "index", "]", "\n", "#print('pool size: ',X_pool.shape[0])", "\n", "X_pool", "=", "np", ".", "delete", "(", "X_pool", ",", "index", ",", "axis", "=", "0", ")", "\n", "y_pool", "=", "np", ".", "delete", "(", "y_pool", ",", "index", ",", "axis", "=", "0", ")", "\n", "print", "(", "'updated pool size is {}'", ".", "format", "(", "X_pool", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "X_train", "=", "np", ".", "concatenate", "(", "(", "X_train", ",", "X", ")", ",", "axis", "=", "0", ")", "\n", "y_train", "=", "np", ".", "concatenate", "(", "(", "y_train", ",", "y", ")", ",", "axis", "=", "0", ")", "\n", "\n", "num_batch", "=", "X", ".", "shape", "[", "0", "]", "//", "state", "[", "'batch_size'", "]", "\n", "\n", "mod", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "state", "[", "'itr'", "]", ")", ":", "\n", "\t\t\t", "loss", "=", "0", "\n", "for", "j", "in", "range", "(", "num_batch", ")", ":", "\n", "\t\t\t\t", "slce", "=", "get_slice", "(", "j", ",", "state", "[", "'batch_size'", "]", ")", "\n", "X_batch", "=", "torch", ".", "from_numpy", "(", "X", "[", "slce", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "y_batch", "=", "torch", ".", "from_numpy", "(", "y", "[", "slce", "]", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "out", "=", "mod", "(", "X_batch", ")", "\n", "# print('out',out.size())", "\n", "# print(y_batch.size())", "\n", "bloss", "=", "criterion", "(", "out", ",", "y_batch", ")", "\n", "loss", "+=", "bloss", ".", "item", "(", ")", "\n", "bloss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "loss_log", ".", "append", "(", "loss", "/", "num_batch", ")", "\n", "# save model", "\n", "", "acc", "=", "test_without_dropout", "(", "X_test", ",", "y_test", ",", "mod", ",", "device", ")", "\n", "print", "(", "'device{} in [{}/{}] acq, acc is {:.3f} '", ".", "format", "(", "n", ",", "i", "+", "1", ",", "acq", ",", "acc", ")", ")", "\n", "\n", "", "state", "[", "pp", "]", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "ini_model_path", ",", "dd", ",", "str", "(", "state", "[", "'itr'", "]", ")", "+", "'epoch.'", "+", "str", "(", "state", "[", "'acq'", "]", ")", "+", "'acq.pth.tar'", ")", "\n", "print", "(", "'update {} to {}'", ".", "format", "(", "pp", ",", "state", "[", "pp", "]", ")", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "mod", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss'", ":", "loss_log", "[", "0", "]", "}", ",", "state", "[", "pp", "]", ")", "\n", "return", "mod", ",", "acc", ",", "X_pool", ",", "y_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.network.Model.__init__": [[10, 32], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.network.Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.arr_drop = arr_drop", "\n", "self", ".", "lay1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.25", ")", "\n", ")", "\n", "self", ".", "lay2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "4", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "32", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "4", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "padding", "=", "0", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.25", ")", "\n", ")", "\n", "self", ".", "num_fea", "=", "16", "*", "14", "*", "14", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "num_fea", ",", "out_features", "=", "128", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "in_features", "=", "128", ",", "out_features", "=", "10", ",", "bias", "=", "False", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaqian_robustness_of_FL.None.network.Model.forward": [[32, 38], ["network.Model.lay1", "network.Model.lay2", "network.Model.view", "network.Model.fc1", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "lay1", "(", "x", ")", "\n", "x2", "=", "self", ".", "lay2", "(", "x1", ")", "\n", "x3", "=", "x2", ".", "view", "(", "-", "1", ",", "self", ".", "num_fea", ")", "\n", "x4", "=", "self", ".", "fc1", "(", "x3", ")", "\n", "return", "F", ".", "softmax", "(", "x4", ",", "dim", "=", "1", ")", "\n", "", "", ""]]}