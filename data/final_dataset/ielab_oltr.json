{"home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.online_mrr_at_k": [[4, 12], ["len", "range", "min"], "function", ["None"], ["def", "online_mrr_at_k", "(", "clicks", ",", "k", ")", ":", "\n", "    ", "reciprocal_rank", "=", "0.0", "\n", "n_docs", "=", "len", "(", "clicks", ")", "\n", "for", "i", "in", "range", "(", "min", "(", "k", ",", "n_docs", ")", ")", ":", "\n", "        ", "if", "clicks", "[", "i", "]", ">", "0", ":", "\n", "            ", "reciprocal_rank", "=", "1.0", "/", "(", "1.0", "+", "i", ")", "\n", "break", "\n", "", "", "return", "reciprocal_rank", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k": [[13, 40], ["range", "sorted", "range", "len", "set", "min", "dataset.get_relevance_label_by_query_and_docid", "sorted.append", "len", "dataset.get_relevance_docids_by_query", "dataset.get_relevance_docids_by_query", "len", "numpy.log2", "dataset.get_relevance_label_by_query_and_docid", "len", "numpy.log2"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "query_ndcg_at_k", "(", "dataset", ",", "result_list", ",", "query", ",", "k", ")", ":", "\n", "# try:", "\n", "#     pos_docid_set = set(dataset.get_relevance_docids_by_query(query))", "\n", "# except:", "\n", "#     return 0.0", "\n", "    ", "if", "len", "(", "dataset", ".", "get_relevance_docids_by_query", "(", "query", ")", ")", "==", "0", ":", "\n", "        ", "return", "0.0", "\n", "", "else", ":", "\n", "        ", "pos_docid_set", "=", "set", "(", "dataset", ".", "get_relevance_docids_by_query", "(", "query", ")", ")", "\n", "\n", "", "dcg", "=", "0.0", "\n", "for", "i", "in", "range", "(", "0", ",", "min", "(", "k", ",", "len", "(", "result_list", ")", ")", ")", ":", "\n", "        ", "docid", "=", "result_list", "[", "i", "]", "\n", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "docid", ")", "\n", "dcg", "+=", "(", "(", "2", "**", "relevance", "-", "1", ")", "/", "np", ".", "log2", "(", "i", "+", "2", ")", ")", "\n", "", "rel_set", "=", "[", "]", "\n", "\n", "for", "docid", "in", "pos_docid_set", ":", "\n", "        ", "rel_set", ".", "append", "(", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "docid", ")", ")", "\n", "", "rel_set", "=", "sorted", "(", "rel_set", ",", "reverse", "=", "True", ")", "\n", "n", "=", "len", "(", "pos_docid_set", ")", "if", "len", "(", "pos_docid_set", ")", "<", "k", "else", "k", "\n", "idcg", "=", "0", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "idcg", "+=", "(", "(", "2", "**", "rel_set", "[", "i", "]", "-", "1", ")", "/", "np", ".", "log2", "(", "i", "+", "2", ")", ")", "\n", "\n", "", "ndcg", "=", "(", "dcg", "/", "idcg", ")", "\n", "return", "ndcg", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k": [[41, 75], ["dataset.get_all_querys", "range", "sorted", "range", "float", "len", "set", "min", "dataset.get_relevance_label_by_query_and_docid", "sorted.append", "len", "dataset.get_relevance_docids_by_query", "dataset.get_relevance_docids_by_query", "len", "numpy.log2", "dataset.get_relevance_label_by_query_and_docid", "len", "numpy.log2"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "average_ndcg_at_k", "(", "dataset", ",", "query_result_list", ",", "k", ",", "count_bad_query", "=", "False", ")", ":", "\n", "    ", "ndcg", "=", "0.0", "\n", "num_query", "=", "0", "\n", "for", "query", "in", "dataset", ".", "get_all_querys", "(", ")", ":", "\n", "# try:", "\n", "#     pos_docid_set = set(dataset.get_relevance_docids_by_query(query))", "\n", "# except:", "\n", "#     print(\"Query:\", query, \"has no relevant document!\")", "\n", "#     continue", "\n", "        ", "if", "len", "(", "dataset", ".", "get_relevance_docids_by_query", "(", "query", ")", ")", "==", "0", ":", "\n", "            ", "if", "count_bad_query", ":", "\n", "                ", "num_query", "+=", "1", "\n", "", "continue", "\n", "", "else", ":", "\n", "            ", "pos_docid_set", "=", "set", "(", "dataset", ".", "get_relevance_docids_by_query", "(", "query", ")", ")", "\n", "", "dcg", "=", "0.0", "\n", "for", "i", "in", "range", "(", "0", ",", "min", "(", "k", ",", "len", "(", "query_result_list", "[", "query", "]", ")", ")", ")", ":", "\n", "            ", "docid", "=", "query_result_list", "[", "query", "]", "[", "i", "]", "\n", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "docid", ")", "\n", "dcg", "+=", "(", "(", "2", "**", "relevance", "-", "1", ")", "/", "np", ".", "log2", "(", "i", "+", "2", ")", ")", "\n", "\n", "", "rel_set", "=", "[", "]", "\n", "for", "docid", "in", "pos_docid_set", ":", "\n", "            ", "rel_set", ".", "append", "(", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "docid", ")", ")", "\n", "", "rel_set", "=", "sorted", "(", "rel_set", ",", "reverse", "=", "True", ")", "\n", "n", "=", "len", "(", "pos_docid_set", ")", "if", "len", "(", "pos_docid_set", ")", "<", "k", "else", "k", "\n", "\n", "idcg", "=", "0", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "idcg", "+=", "(", "(", "2", "**", "rel_set", "[", "i", "]", "-", "1", ")", "/", "np", ".", "log2", "(", "i", "+", "2", ")", ")", "\n", "\n", "", "ndcg", "+=", "(", "dcg", "/", "idcg", ")", "\n", "num_query", "+=", "1", "\n", "", "return", "ndcg", "/", "float", "(", "num_query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.get_all_query_ndcg": [[76, 104], ["dataset.get_all_querys", "range", "sorted", "range", "set", "min", "dataset.get_relevance_label_by_query_and_docid", "sorted.append", "len", "dataset.get_relevance_docids_by_query", "len", "numpy.log2", "dataset.get_relevance_label_by_query_and_docid", "len", "numpy.log2"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "get_all_query_ndcg", "(", "dataset", ",", "query_result_list", ",", "k", ")", ":", "\n", "    ", "query_ndcg", "=", "{", "}", "\n", "for", "query", "in", "dataset", ".", "get_all_querys", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "pos_docid_set", "=", "set", "(", "dataset", ".", "get_relevance_docids_by_query", "(", "query", ")", ")", "\n", "", "except", ":", "\n", "# print(\"Query:\", query, \"has no relevant document!\")", "\n", "            ", "query_ndcg", "[", "query", "]", "=", "0", "\n", "continue", "\n", "", "dcg", "=", "0.0", "\n", "for", "i", "in", "range", "(", "0", ",", "min", "(", "k", ",", "len", "(", "query_result_list", "[", "query", "]", ")", ")", ")", ":", "\n", "            ", "docid", "=", "query_result_list", "[", "query", "]", "[", "i", "]", "\n", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "docid", ")", "\n", "dcg", "+=", "(", "(", "2", "**", "relevance", "-", "1", ")", "/", "np", ".", "log2", "(", "i", "+", "2", ")", ")", "\n", "\n", "", "rel_set", "=", "[", "]", "\n", "for", "docid", "in", "pos_docid_set", ":", "\n", "            ", "rel_set", ".", "append", "(", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "docid", ")", ")", "\n", "", "rel_set", "=", "sorted", "(", "rel_set", ",", "reverse", "=", "True", ")", "\n", "n", "=", "len", "(", "pos_docid_set", ")", "if", "len", "(", "pos_docid_set", ")", "<", "k", "else", "k", "\n", "\n", "idcg", "=", "0", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "idcg", "+=", "(", "(", "2", "**", "rel_set", "[", "i", "]", "-", "1", ")", "/", "np", ".", "log2", "(", "i", "+", "2", ")", ")", "\n", "\n", "", "ndcg", "=", "(", "dcg", "/", "idcg", ")", "\n", "query_ndcg", "[", "query", "]", "=", "ndcg", "\n", "", "return", "query_ndcg", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.ttest": [[105, 108], ["scipy.stats.ttest_ind"], "function", ["None"], ["", "def", "ttest", "(", "l1", ",", "l2", ")", ":", "\n", "    ", "_", ",", "p", "=", "stats", ".", "ttest_ind", "(", "l1", ",", "l2", ",", "equal_var", "=", "False", ")", "\n", "return", "p", "\n", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_all_query_result_list": [[6, 21], ["dataset.get_all_querys", "numpy.array", "docid_list.reshape.reshape", "dataset.get_all_features_by_query", "utility.get_scores", "numpy.column_stack", "numpy.flip", "dataset.get_candidate_docids_by_query", "len", "docid_score_list[].argsort"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query"], ["def", "get_all_query_result_list", "(", "weights", ",", "dataset", ")", ":", "\n", "    ", "query_result_list", "=", "{", "}", "\n", "\n", "for", "query", "in", "dataset", ".", "get_all_querys", "(", ")", ":", "\n", "        ", "docid_list", "=", "np", ".", "array", "(", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "docid_list", "=", "docid_list", ".", "reshape", "(", "(", "len", "(", "docid_list", ")", ",", "1", ")", ")", "\n", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "score_list", "=", "get_scores", "(", "weights", ",", "feature_matrix", ")", "\n", "\n", "docid_score_list", "=", "np", ".", "column_stack", "(", "(", "docid_list", ",", "score_list", ")", ")", "\n", "docid_score_list", "=", "np", ".", "flip", "(", "docid_score_list", "[", "docid_score_list", "[", ":", ",", "1", "]", ".", "argsort", "(", ")", "]", ",", "0", ")", "\n", "\n", "query_result_list", "[", "query", "]", "=", "docid_score_list", "[", ":", ",", "0", "]", "\n", "\n", "", "return", "query_result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_query_result_list": [[23, 37], ["dataset.get_candidate_docids_by_query", "dataset.get_all_features_by_query", "utility.get_scores", "zip", "sorted", "range", "len", "query_result_list.append"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores"], ["", "def", "get_query_result_list", "(", "weights", ",", "dataset", ",", "query", ")", ":", "\n", "    ", "docid_list", "=", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", "\n", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "\n", "score_list", "=", "get_scores", "(", "weights", ",", "feature_matrix", ")", "\n", "\n", "docid_score_list", "=", "zip", "(", "docid_list", ",", "score_list", ")", "\n", "docid_score_list", "=", "sorted", "(", "docid_score_list", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "query_result_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "docid_list", ")", ")", ":", "\n", "        ", "(", "docid", ",", "socre", ")", "=", "docid_score_list", "[", "i", "]", "\n", "query_result_list", ".", "append", "(", "docid", ")", "\n", "", "return", "query_result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_scores": [[39, 43], ["numpy.array", "numpy.dot"], "function", ["None"], ["", "def", "get_scores", "(", "weights", ",", "features", ")", ":", "\n", "    ", "weights", "=", "np", ".", "array", "(", "[", "weights", "]", ")", "\n", "score", "=", "np", ".", "dot", "(", "features", ",", "weights", ".", "T", ")", "[", ":", ",", "0", "]", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.send_progress": [[45, 54], ["requests.put"], "function", ["None"], ["", "def", "send_progress", "(", "name", ",", "current", ",", "total", ",", "comment", ")", ":", "\n", "    ", "url", "=", "\"https://ielab-sysrev1.uqcloud.net?name={}&current={}&total={}&comment={}\"", ".", "format", "(", "name", ",", "current", ",", "total", ",", "\n", "comment", ")", "\n", "try", ":", "\n", "        ", "requests", ".", "put", "(", "url", ")", "\n", "success", "=", "True", "\n", "", "except", ":", "\n", "        ", "success", "=", "False", "\n", "", "return", "success", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_DCG_rewards": [[56, 80], ["numpy.zeros", "range", "len", "len", "numpy.log2"], "function", ["None"], ["", "def", "get_DCG_rewards", "(", "click_labels", ",", "propensities", ",", "method", "=", "\"both\"", ")", ":", "\n", "    ", "reward", "=", "np", ".", "zeros", "(", "len", "(", "click_labels", ")", ")", "\n", "\n", "for", "iPos", "in", "range", "(", "len", "(", "click_labels", ")", ")", ":", "\n", "        ", "reward", "[", "iPos", "]", "=", "1", "/", "np", ".", "log2", "(", "iPos", "+", "2.0", ")", "\n", "\n", "if", "click_labels", "[", "iPos", "]", "==", "1", ":", "\n", "# reward[iPos] = 0", "\n", "            ", "if", "method", "==", "\"positive\"", ":", "\n", "                ", "reward", "[", "iPos", "]", "=", "reward", "[", "iPos", "]", "/", "propensities", "[", "iPos", "]", "\n", "", "if", "method", "==", "\"negative\"", ":", "\n", "                ", "reward", "[", "iPos", "]", "=", "(", "reward", "[", "iPos", "]", "/", "propensities", "[", "iPos", "]", ")", "-", "reward", "[", "iPos", "]", "\n", "", "if", "method", "==", "\"both\"", ":", "\n", "                ", "reward", "[", "iPos", "]", "=", "2", "*", "(", "reward", "[", "iPos", "]", "/", "propensities", "[", "iPos", "]", ")", "-", "reward", "[", "iPos", "]", "\n", "# reward[iPos] = reward[iPos] / np.max([propensities[iPos], 0.5])  # propensity clipping", "\n", "", "", "else", ":", "\n", "# unbiased negative rewards", "\n", "            ", "if", "method", "==", "\"positive\"", ":", "\n", "                ", "reward", "[", "iPos", "]", "=", "0", "\n", "", "if", "method", "==", "\"negative\"", ":", "\n", "                ", "reward", "[", "iPos", "]", "=", "-", "reward", "[", "iPos", "]", "\n", "", "if", "method", "==", "\"both\"", ":", "\n", "                ", "reward", "[", "iPos", "]", "=", "-", "reward", "[", "iPos", "]", "\n", "", "", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_real_DCGs": [[93, 106], ["numpy.array", "numpy.zeros", "range", "dataset.get_all_relevance_label_by_query", "len", "len", "numpy.log"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_relevance_label_by_query"], ["", "def", "get_real_DCGs", "(", "query", ",", "result_list", ",", "dataset", ")", ":", "\n", "    ", "result_list", "=", "result_list", "[", ":", "10", "]", "\n", "rels", "=", "np", ".", "array", "(", "dataset", ".", "get_all_relevance_label_by_query", "(", "query", ")", ")", "\n", "labels", "=", "rels", "[", "result_list", "]", "\n", "\n", "DCGs", "=", "np", ".", "zeros", "(", "len", "(", "labels", ")", ")", "\n", "for", "iPos", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "        ", "if", "iPos", "==", "0", ":", "\n", "            ", "DCGs", "[", "iPos", "]", "=", "labels", "[", "iPos", "]", "\n", "", "else", ":", "\n", "            ", "DCGs", "[", "iPos", "]", "=", "labels", "[", "iPos", "]", "/", "np", ".", "log", "(", "iPos", "+", "1.0", ")", "\n", "\n", "", "", "return", "DCGs", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_DCG_MDPrewards": [[107, 117], ["len", "numpy.zeros", "utility.get_DCG_rewards", "numpy.logspace", "range", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_DCG_rewards"], ["", "def", "get_DCG_MDPrewards", "(", "click_labels", ",", "propensities", ",", "method", "=", "\"both\"", ",", "gamma", "=", "0.99", ")", ":", "\n", "    ", "M", "=", "len", "(", "click_labels", ")", "\n", "MDP_rewards", "=", "np", ".", "zeros", "(", "M", ")", "\n", "DCG_rewards", "=", "get_DCG_rewards", "(", "click_labels", ",", "propensities", ",", "method", ")", "\n", "\n", "discounts", "=", "np", ".", "logspace", "(", "0", ",", "M", "-", "1", ",", "M", ",", "base", "=", "gamma", ")", "\n", "for", "t", "in", "range", "(", "M", ")", ":", "\n", "        ", "MDP_rewards", "[", "t", "]", "=", "np", ".", "sum", "(", "discounts", "[", ":", "M", "-", "t", "]", "*", "DCG_rewards", "[", "t", ":", "]", ")", "\n", "\n", "", "return", "MDP_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.GetReward_ARP": [[119, 129], ["numpy.zeros", "range", "len", "len", "numpy.max", "numpy.log"], "function", ["None"], ["", "def", "GetReward_ARP", "(", "rates", ",", "propensities", ")", ":", "\n", "    ", "reward", "=", "np", ".", "zeros", "(", "len", "(", "rates", ")", ")", "\n", "for", "iPos", "in", "range", "(", "len", "(", "rates", ")", ")", ":", "\n", "        ", "if", "iPos", "==", "0", ":", "\n", "            ", "reward", "[", "iPos", "]", "=", "(", "2", "**", "rates", "[", "iPos", "]", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "reward", "[", "iPos", "]", "=", "(", "2", "**", "rates", "[", "iPos", "]", "-", "1", ")", "/", "np", ".", "log", "(", "iPos", "+", "1.0", ")", "\n", "", "reward", "[", "iPos", "]", "=", "reward", "[", "iPos", "]", "/", "np", ".", "max", "(", "[", "propensities", "[", "iPos", "]", ",", "0.5", "]", ")", "\n", "\n", "", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.read_intent_qrel": [[131, 143], ["open", "line.strip().split", "qrel_dic.keys", "int", "line.strip", "int"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "read_intent_qrel", "(", "path", ":", "str", ")", ":", "\n", "# q-d pair dictionary", "\n", "    ", "qrel_dic", "=", "{", "}", "\n", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "qid", ",", "_", ",", "docid", ",", "rel", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "qid", "in", "qrel_dic", ".", "keys", "(", ")", ":", "\n", "                ", "qrel_dic", "[", "qid", "]", "[", "docid", "]", "=", "int", "(", "rel", ")", "\n", "", "else", ":", "\n", "                ", "qrel_dic", "[", "qid", "]", "=", "{", "docid", ":", "int", "(", "rel", ")", "}", "\n", "", "", "", "return", "qrel_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_intent_dataset": [[145, 152], ["copy.deepcopy", "copy.deepcopy", "utility.read_intent_qrel", "copy.deepcopy.update_relevance_label", "copy.deepcopy.update_relevance_label"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.utility.read_intent_qrel", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.update_relevance_label", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.update_relevance_label"], ["", "def", "get_intent_dataset", "(", "train_set", ",", "test_set", ",", "intent_path", ")", ":", "\n", "    ", "new_train_set", "=", "copy", ".", "deepcopy", "(", "train_set", ")", "\n", "new_test_set", "=", "copy", ".", "deepcopy", "(", "test_set", ")", "\n", "qrel_dic", "=", "read_intent_qrel", "(", "intent_path", ")", "\n", "new_train_set", ".", "update_relevance_label", "(", "qrel_dic", ")", "\n", "new_test_set", ".", "update_relevance_label", "(", "qrel_dic", ")", "\n", "return", "new_train_set", ",", "new_test_set", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_groups_dataset": [[154, 182], ["print", "print", "qrel_dics[].keys", "print", "qrel_dics.append", "random.shuffle", "range", "copy.deepcopy", "copy.deepcopy.update_relevance_label", "datasets.append", "utility.read_intent_qrel", "qrel_dic[].keys", "qid_rel_lists.append", "len", "[].keys"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.update_relevance_label", "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.read_intent_qrel", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "get_groups_dataset", "(", "train_set", ",", "intent_paths", ",", "num_groups", "=", "4", ")", ":", "\n", "    ", "qrel_dics", "=", "[", "]", "\n", "\n", "print", "(", "\"Reading intents......\"", ")", "\n", "for", "path", "in", "intent_paths", ":", "\n", "        ", "qrel_dics", ".", "append", "(", "read_intent_qrel", "(", "path", ")", ")", "\n", "\n", "", "print", "(", "\"Randomly assign groups......\"", ")", "\n", "for", "qid", "in", "qrel_dics", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "qid_rel_lists", "=", "[", "]", "\n", "for", "qrel_dic", "in", "qrel_dics", ":", "\n", "            ", "doc_rels", "=", "{", "}", "\n", "for", "docid", "in", "qrel_dic", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "doc_rels", "[", "docid", "]", "=", "qrel_dic", "[", "qid", "]", "[", "docid", "]", "\n", "", "qid_rel_lists", ".", "append", "(", "doc_rels", ")", "\n", "\n", "", "random", ".", "shuffle", "(", "qid_rel_lists", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "qrel_dics", ")", ")", ":", "\n", "            ", "for", "docid", "in", "qrel_dics", "[", "i", "]", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "qrel_dics", "[", "i", "]", "[", "qid", "]", "[", "docid", "]", "=", "qid_rel_lists", "[", "i", "]", "[", "docid", "]", "\n", "\n", "", "", "", "datasets", "=", "[", "]", "\n", "print", "(", "\"Generating new datasets......\"", ")", "\n", "for", "qrel_dic", "in", "qrel_dics", ":", "\n", "        ", "new_train_set", "=", "copy", ".", "deepcopy", "(", "train_set", ")", "\n", "new_train_set", ".", "update_relevance_label", "(", "qrel_dic", ")", "\n", "datasets", ".", "append", "(", "new_train_set", ")", "\n", "", "return", "datasets", "[", ":", "num_groups", "]", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.utils.read_file.read_click_log": [[5, 23], ["print", "f.close", "print", "numpy.array", "tensorflow.data.TFRecordDataset", "print", "open", "path.split", "line.strip().split", "tf.data.TFRecordDataset.append", "line.strip"], "function", ["None"], ["def", "read_click_log", "(", "path", ")", ":", "\n", "    ", "print", "(", "\"reading {}.......\"", ".", "format", "(", "path", ")", ")", "\n", "if", "path", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "\"tfrecord\"", ":", "\n", "        ", "log", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "filenames", "=", "'test.tfrecord'", ")", "\n", "print", "(", "\"test\"", ")", "\n", "return", "log", "\n", "", "log", "=", "[", "]", "\n", "num_session", "=", "0", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "num_session", "+=", "1", "\n", "cols", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "log", ".", "append", "(", "cols", ")", "\n", "# if num_seesion % 10000 == 0:", "\n", "#     print(\"read %d sessions\" % (num_seesion))", "\n", "", "", "f", ".", "close", "(", ")", "\n", "print", "(", "\"reading finished, there are %d sessions in the log\"", "%", "num_session", ")", "\n", "return", "np", ".", "array", "(", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.read_file.read_query_frequency": [[25, 36], ["f.close", "open", "line.strip().split", "cols[].split", "line.strip"], "function", ["None"], ["", "def", "read_query_frequency", "(", "path", ")", ":", "\n", "    ", "query_freq_dict", "=", "{", "}", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "cols", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "freq", "=", "cols", "[", "0", "]", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "queries", "=", "cols", "[", "1", ":", "]", "\n", "for", "qid", "in", "queries", ":", "\n", "                ", "query_freq_dict", "[", "qid", "]", "=", "freq", "\n", "", "", "", "f", ".", "close", "(", ")", "\n", "return", "query_freq_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.utils.ndcg_plot.plot": [[8, 32], ["print", "numpy.zeros", "print", "numpy.mean", "scipy.stats.sem", "numpy.subtract", "numpy.add", "matplotlib.plot", "matplotlib.fill_between", "scipy.stats.t.ppf", "range", "range", "open", "pickle.load", "numpy.array", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot"], ["def", "plot", "(", "path", ",", "parameters", ",", "folds", ",", "runs", ",", "click_model", ",", "num_interactions", ",", "color", ")", ":", "\n", "    ", "print", "(", "path", ")", "\n", "color_index", "=", "0", "\n", "for", "p", "in", "parameters", ":", "\n", "        ", "result", "=", "np", ".", "zeros", "(", "num_interactions", ")", "\n", "for", "f", "in", "folds", ":", "\n", "            ", "for", "r", "in", "runs", ":", "\n", "                ", "with", "open", "(", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "path", ",", "f", ",", "click_model", ",", "r", ")", ",", "\n", "\"rb\"", ")", "as", "fp", ":", "\n", "                    ", "data", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "data", "=", "np", ".", "array", "(", "data", "[", ":", "num_interactions", "]", ")", "\n", "result", "=", "np", ".", "vstack", "(", "(", "result", ",", "data", ")", ")", "\n", "", "", "", "result", "=", "result", "[", "1", ":", "]", ".", "T", "\n", "print", "(", "result", ".", "shape", ")", "\n", "result_mean", "=", "np", ".", "mean", "(", "result", ",", "axis", "=", "1", ")", "\n", "result_std_err", "=", "sem", "(", "result", ",", "axis", "=", "1", ")", "\n", "result_h", "=", "result_std_err", "*", "t", ".", "ppf", "(", "(", "1", "+", "0.95", ")", "/", "2", ",", "25", "-", "1", ")", "\n", "result_low", "=", "np", ".", "subtract", "(", "result_mean", ",", "result_h", ")", "\n", "result_high", "=", "np", ".", "add", "(", "result_mean", ",", "result_h", ")", "\n", "\n", "plt", ".", "plot", "(", "range", "(", "num_interactions", ")", ",", "result_mean", ",", "color", "=", "COLORS", "[", "color", "]", ",", "alpha", "=", "1", ")", "\n", "\n", "plt", ".", "fill_between", "(", "range", "(", "num_interactions", ")", ",", "result_low", ",", "result_high", ",", "color", "=", "COLORS", "[", "color", "]", ",", "alpha", "=", "0.2", ")", "\n", "color_index", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.ndcg_plot.plot_mrr": [[34, 59], ["matplotlib.subplots", "axs[].set_title", "axs[].plot", "open", "pickle.load", "numpy.array", "range", "sum", "zip", "iter"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot"], ["", "", "def", "plot_mrr", "(", "path", ",", "folds", ",", "runs", ",", "click_models", ",", "num_interactions", ",", "color", ")", ":", "\n", "    ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "3", ",", "5", ")", "\n", "row", "=", "0", "\n", "column", "=", "0", "\n", "for", "click_model", "in", "click_models", ":", "\n", "        ", "axs", "[", "row", ",", "column", "]", ".", "set_title", "(", "click_model", ")", "\n", "\n", "for", "f", "in", "folds", ":", "\n", "\n", "            ", "for", "r", "in", "runs", ":", "\n", "                ", "with", "open", "(", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "path", ",", "f", ",", "click_model", ",", "r", ")", ",", "\n", "\"rb\"", ")", "as", "fp", ":", "\n", "                    ", "data", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "\n", "", "axs", "[", "row", ",", "column", "]", ".", "plot", "(", "range", "(", "num_interactions", ")", ",", "[", "sum", "(", "group", ")", "/", "8000", "for", "group", "in", "zip", "(", "*", "[", "iter", "(", "data", ")", "]", "*", "8000", ")", "]", ",", "color", "=", "COLORS", "[", "color", "]", ")", "\n", "# if click_model == 'informational':", "\n", "#     axs[row, column].set_ylim([0.70, 0.76])", "\n", "# elif click_model == 'navigational':", "\n", "#     axs[row, column].set_ylim([0.43, 0.52])", "\n", "# else:", "\n", "#     axs[row, column].set_ylim([0.4, 0.47])", "\n", "", "column", "+=", "1", "\n", "", "row", "+=", "1", "\n", "column", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.click_model_plot.read_seen_result_file": [[11, 24], ["open", "open.readline", "perplexities[].append", "MSEs[].append", "list", "list", "map", "map", "line.split", "open.readline().split", "open.readline"], "function", ["None"], ["def", "read_seen_result_file", "(", "simulator", ",", "click_model", ",", "id", ")", ":", "\n", "    ", "path", "=", "\"../click_model_results/{}/seen_set{}_{}_result.txt\"", ".", "format", "(", "simulator", ",", "id", ",", "click_model", ")", "\n", "f", "=", "open", "(", "path", ",", "\"r\"", ")", "\n", "f", ".", "readline", "(", ")", "\n", "perplexities", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "MSEs", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "i", "=", "0", "\n", "for", "line", "in", "f", ":", "\n", "        ", "perplexities", "[", "i", "]", ".", "append", "(", "list", "(", "map", "(", "float", ",", "line", ".", "split", "(", "\" \"", ")", "[", "3", ":", "]", ")", ")", ")", "\n", "MSEs", "[", "i", "]", ".", "append", "(", "list", "(", "map", "(", "float", ",", "f", ".", "readline", "(", ")", ".", "split", "(", "\" \"", ")", "[", "3", ":", "]", ")", ")", ")", "\n", "i", "+=", "1", "\n", "\n", "", "return", "perplexities", ",", "MSEs", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.click_model_plot.read_unseen_result_file": [[25, 34], ["open", "open.readline", "list", "list", "map", "map", "line.split", "open.readline().split", "open.readline"], "function", ["None"], ["", "def", "read_unseen_result_file", "(", "simulator", ",", "click_model", ",", "id", ")", ":", "\n", "    ", "path", "=", "\"../click_model_results/{}/unseen_set{}_{}_result.txt\"", ".", "format", "(", "simulator", ",", "id", ",", "click_model", ")", "\n", "f", "=", "open", "(", "path", ",", "\"r\"", ")", "\n", "f", ".", "readline", "(", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "perplexity", "=", "list", "(", "map", "(", "float", ",", "line", ".", "split", "(", "\" \"", ")", "[", "1", ":", "]", ")", ")", "\n", "MSE", "=", "list", "(", "map", "(", "float", ",", "f", ".", "readline", "(", ")", ".", "split", "(", "\" \"", ")", "[", "1", ":", "]", ")", ")", "\n", "\n", "", "return", "perplexity", ",", "MSE", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.click_model_plot.plot_perplexity_MSE_for_unseen_queries": [[35, 85], ["print", "click_model_plot.read_unseen_result_file", "np.array.append", "np.sqrt.append", "range", "numpy.array", "numpy.sqrt", "numpy.mean", "scipy.stats.sem", "numpy.subtract", "numpy.add", "numpy.mean", "scipy.stats.sem", "numpy.subtract", "numpy.add", "p1.plot", "p1.fill_between", "p1.set_ylabel", "p1.set_ylim", "p1.set_xlim", "p2.plot", "p2.fill_between", "p2.set_ylabel", "p2.set_ylim", "p2.set_xlim", "print", "click_model_plot.read_unseen_result_file", "np.array.append", "np.sqrt.append", "scipy.stats.t.ppf", "scipy.stats.t.ppf", "range", "range", "range", "range", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.click_model_plot.read_unseen_result_file", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot", "home.repos.pwc.inspect_result.ielab_oltr.utils.click_model_plot.read_unseen_result_file"], ["", "def", "plot_perplexity_MSE_for_unseen_queries", "(", "simulator", ",", "click_models", ",", "p1", ",", "p2", ")", ":", "\n", "    ", "color_index", "=", "0", "\n", "print", "(", "simulator", ")", "\n", "for", "click_model", "in", "click_models", ":", "\n", "        ", "perplexities", "=", "[", "]", "\n", "MSEs", "=", "[", "]", "\n", "perplexity", ",", "MSE", "=", "read_unseen_result_file", "(", "simulator", ",", "click_model", ",", "1", ")", "\n", "perplexities", ".", "append", "(", "perplexity", ")", "\n", "MSEs", ".", "append", "(", "MSE", ")", "\n", "\n", "for", "id", "in", "range", "(", "2", ",", "9", ")", ":", "\n", "            ", "perplexity", ",", "MSE", "=", "read_unseen_result_file", "(", "simulator", ",", "click_model", ",", "id", ")", "\n", "\n", "perplexities", ".", "append", "(", "perplexity", ")", "\n", "MSEs", ".", "append", "(", "MSE", ")", "\n", "\n", "", "perplexities", "=", "np", ".", "array", "(", "perplexities", ")", "\n", "# MSEs = np.array(MSEs)", "\n", "MSEs", "=", "np", ".", "sqrt", "(", "MSEs", ")", "\n", "\n", "mse_mean", "=", "np", ".", "mean", "(", "MSEs", ".", "T", ",", "axis", "=", "1", ")", "\n", "mse_std_err", "=", "sem", "(", "MSEs", ".", "T", ",", "axis", "=", "1", ")", "\n", "mse_h", "=", "mse_std_err", "*", "t", ".", "ppf", "(", "(", "1", "+", "0.95", ")", "/", "2", ",", "25", "-", "1", ")", "\n", "mse_low", "=", "np", ".", "subtract", "(", "mse_mean", ",", "mse_h", ")", "\n", "mse_high", "=", "np", ".", "add", "(", "mse_mean", ",", "mse_h", ")", "\n", "\n", "perp_mean", "=", "np", ".", "mean", "(", "perplexities", ".", "T", ",", "axis", "=", "1", ")", "\n", "perp_std_err", "=", "sem", "(", "perplexities", ".", "T", ",", "axis", "=", "1", ")", "\n", "perp_h", "=", "perp_std_err", "*", "t", ".", "ppf", "(", "(", "1", "+", "0.95", ")", "/", "2", ",", "25", "-", "1", ")", "\n", "perp_low", "=", "np", ".", "subtract", "(", "perp_mean", ",", "perp_h", ")", "\n", "perp_high", "=", "np", ".", "add", "(", "perp_mean", ",", "perp_h", ")", "\n", "\n", "\n", "p1", ".", "plot", "(", "range", "(", "1", ",", "11", ")", ",", "mse_mean", ",", "color", "=", "COLORS", "[", "color_index", "]", ",", "alpha", "=", "1", ")", "\n", "p1", ".", "fill_between", "(", "range", "(", "1", ",", "11", ")", ",", "mse_low", ",", "mse_high", ",", "color", "=", "COLORS", "[", "color_index", "]", ",", "alpha", "=", "0.2", ")", "\n", "p1", ".", "set_ylabel", "(", "'RMSE'", ")", "\n", "p1", ".", "set_ylim", "(", "[", "0.02", ",", "0.3", "]", ")", "\n", "p1", ".", "set_xlim", "(", "[", "1", ",", "10", "]", ")", "\n", "\n", "\n", "p2", ".", "plot", "(", "range", "(", "1", ",", "11", ")", ",", "perp_mean", ",", "color", "=", "COLORS", "[", "color_index", "]", ",", "alpha", "=", "1", ")", "\n", "p2", ".", "fill_between", "(", "range", "(", "1", ",", "11", ")", ",", "perp_low", ",", "perp_high", ",", "color", "=", "COLORS", "[", "color_index", "]", ",", "alpha", "=", "0.2", ")", "\n", "p2", ".", "set_ylabel", "(", "'Perplexity'", ")", "\n", "p2", ".", "set_ylim", "(", "[", "1", ",", "2.2", "]", ")", "\n", "p2", ".", "set_xlim", "(", "[", "1", ",", "10", "]", ")", "\n", "color_index", "+=", "1", "\n", "\n", "print", "(", "click_model", ",", "np", ".", "sum", "(", "mse_mean", ")", "/", "10", ",", "np", ".", "sum", "(", "perp_mean", ")", "/", "10", ")", "\n", "\n", "", "return", "perplexities", ",", "MSEs", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.click_model_plot.plot_perplexity_MSE_for_each_rank": [[89, 154], ["click_model_plot.read_seen_result_file", "range", "numpy.array", "numpy.sqrt", "range", "print", "range", "print", "print", "range", "click_model_plot.read_seen_result_file", "range", "print", "mse_runs.append", "perp_runs.append", "numpy.mean", "scipy.stats.sem", "numpy.subtract", "numpy.add", "numpy.mean", "scipy.stats.sem", "numpy.subtract", "numpy.add", "p1.plot", "p1.fill_between", "p1.set_title", "p1.set_ylabel", "p1.set_ylim", "p1.set_xlim", "p2.plot", "p2.fill_between", "p2.set_title", "p2.set_ylabel", "p2.set_ylim", "p1.set_xlim", "print", "len", "range", "len", "range", "avg_perplexities[].append", "avg_MSEs[].append", "numpy.mean", "numpy.mean", "scipy.stats.t.ppf", "scipy.stats.t.ppf", "range", "range", "range", "range", "len", "print", "len", "print", "numpy.sum", "numpy.sum", "scipy.stats.ttest_ind", "scipy.stats.ttest_ind"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.click_model_plot.read_seen_result_file", "home.repos.pwc.inspect_result.ielab_oltr.utils.click_model_plot.read_seen_result_file", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot"], ["", "def", "plot_perplexity_MSE_for_each_rank", "(", "simulator", ",", "click_model", ",", "p1", ",", "p2", ")", ":", "\n", "\n", "    ", "avg_perplexities", ",", "avg_MSEs", "=", "read_seen_result_file", "(", "simulator", ",", "click_model", ",", "1", ")", "\n", "mse_runs", "=", "[", "]", "\n", "perp_runs", "=", "[", "]", "\n", "\n", "for", "id", "in", "range", "(", "2", ",", "9", ")", ":", "\n", "        ", "perplexities", ",", "MSEs", "=", "read_seen_result_file", "(", "simulator", ",", "click_model", ",", "id", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "avg_perplexities", "[", "i", "]", ".", "append", "(", "perplexities", "[", "i", "]", "[", "0", "]", ")", "\n", "avg_MSEs", "[", "i", "]", ".", "append", "(", "MSEs", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "", "", "avg_perplexities", "=", "np", ".", "array", "(", "avg_perplexities", ")", "\n", "# avg_MSEs = np.array(avg_MSEs)", "\n", "avg_MSEs", "=", "np", ".", "sqrt", "(", "avg_MSEs", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "\n", "        ", "print", "(", ")", "\n", "mse_runs", ".", "append", "(", "np", ".", "mean", "(", "avg_MSEs", "[", "i", "]", ",", "axis", "=", "1", ")", ")", "\n", "perp_runs", ".", "append", "(", "np", ".", "mean", "(", "avg_perplexities", "[", "i", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "mse_mean", "=", "np", ".", "mean", "(", "avg_MSEs", "[", "i", "]", ".", "T", ",", "axis", "=", "1", ")", "\n", "mse_std_err", "=", "sem", "(", "avg_MSEs", "[", "i", "]", ".", "T", ",", "axis", "=", "1", ")", "\n", "mse_h", "=", "mse_std_err", "*", "t", ".", "ppf", "(", "(", "1", "+", "0.95", ")", "/", "2", ",", "25", "-", "1", ")", "\n", "mse_low", "=", "np", ".", "subtract", "(", "mse_mean", ",", "mse_h", ")", "\n", "mse_high", "=", "np", ".", "add", "(", "mse_mean", ",", "mse_h", ")", "\n", "\n", "perp_mean", "=", "np", ".", "mean", "(", "avg_perplexities", "[", "i", "]", ".", "T", ",", "axis", "=", "1", ")", "\n", "perp_std_err", "=", "sem", "(", "avg_perplexities", "[", "i", "]", ".", "T", ",", "axis", "=", "1", ")", "\n", "perp_h", "=", "perp_std_err", "*", "t", ".", "ppf", "(", "(", "1", "+", "0.95", ")", "/", "2", ",", "25", "-", "1", ")", "\n", "perp_low", "=", "np", ".", "subtract", "(", "perp_mean", ",", "perp_h", ")", "\n", "perp_high", "=", "np", ".", "add", "(", "perp_mean", ",", "perp_h", ")", "\n", "\n", "p1", ".", "plot", "(", "range", "(", "1", ",", "11", ")", ",", "mse_mean", ",", "color", "=", "COLORS", "[", "i", "]", ",", "alpha", "=", "1", ")", "\n", "p1", ".", "fill_between", "(", "range", "(", "1", ",", "11", ")", ",", "mse_low", ",", "mse_high", ",", "color", "=", "COLORS", "[", "i", "]", ",", "alpha", "=", "0.2", ")", "\n", "\n", "if", "click_model", "==", "\"FBNCM\"", ":", "\n", "            ", "click_model", "=", "\"F-NCM\"", "\n", "", "if", "click_model", "==", "\"NCM\"", ":", "\n", "            ", "click_model", "=", "\"DR-NCM\"", "\n", "\n", "", "p1", ".", "set_title", "(", "\"click model: {}\"", ".", "format", "(", "click_model", ")", ")", "\n", "p1", ".", "set_ylabel", "(", "'RMSE'", ")", "\n", "p1", ".", "set_ylim", "(", "[", "0", ",", "0.3", "]", ")", "\n", "p1", ".", "set_xlim", "(", "[", "1", ",", "10", "]", ")", "\n", "\n", "p2", ".", "plot", "(", "range", "(", "1", ",", "11", ")", ",", "perp_mean", ",", "color", "=", "COLORS", "[", "i", "]", ",", "alpha", "=", "1", ")", "\n", "p2", ".", "fill_between", "(", "range", "(", "1", ",", "11", ")", ",", "perp_low", ",", "perp_high", ",", "color", "=", "COLORS", "[", "i", "]", ",", "alpha", "=", "0.2", ")", "\n", "p2", ".", "set_title", "(", "\"click model: {}\"", ".", "format", "(", "click_model", ")", ")", "\n", "p2", ".", "set_ylabel", "(", "'Perplexity'", ")", "\n", "p2", ".", "set_ylim", "(", "[", "1", ",", "2", "]", ")", "\n", "p1", ".", "set_xlim", "(", "[", "1", ",", "10", "]", ")", "\n", "print", "(", "click_model", ",", "np", ".", "sum", "(", "mse_mean", ")", "/", "10", ",", "click_model", ",", "np", ".", "sum", "(", "perp_mean", ")", "/", "10", ")", "\n", "", "print", "(", "\"MSE t test\"", ")", "\n", "for", "x", "in", "range", "(", "len", "(", "mse_runs", ")", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "x", ",", "len", "(", "mse_runs", ")", ")", ":", "\n", "            ", "print", "(", "x", ",", "y", ",", "ttest_ind", "(", "mse_runs", "[", "x", "]", ",", "mse_runs", "[", "y", "]", ")", ")", "\n", "\n", "", "", "print", "(", ")", "\n", "print", "(", "\"Perplexity t test\"", ")", "\n", "for", "x", "in", "range", "(", "len", "(", "perp_runs", ")", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "x", ",", "len", "(", "perp_runs", ")", ")", ":", "\n", "            ", "print", "(", "x", ",", "y", ",", "ttest_ind", "(", "perp_runs", "[", "x", "]", ",", "perp_runs", "[", "y", "]", ")", ")", "\n", "\n", "", "", "return", "avg_perplexities", ",", "avg_MSEs", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.click_model_plot.plot_for_each_simulator": [[155, 239], ["print", "print", "print", "range", "print", "print", "range", "click_model_plot.read_seen_result_file", "range", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "range", "mse_runs.append", "perp_runs.append", "numpy.mean", "scipy.stats.sem", "numpy.subtract", "numpy.add", "numpy.mean", "scipy.stats.sem", "numpy.subtract", "numpy.add", "print", "p1.fill_between", "p1.set_ylabel", "p1.set_ylim", "p1.set_xlim", "p2.fill_between", "p2.set_ylabel", "p2.set_ylim", "p2.set_xlim", "len", "range", "len", "range", "click_model_plot.read_seen_result_file", "range", "numpy.sqrt", "numpy.mean", "numpy.mean", "scipy.stats.t.ppf", "scipy.stats.t.ppf", "p1.plot", "p1.plot", "range", "p2.plot", "p2.plot", "range", "len", "print", "len", "print", "avg_perplexities[].append", "avg_MSEs[].append", "numpy.sum", "numpy.sum", "range", "range", "range", "range", "scipy.stats.ttest_ind", "scipy.stats.ttest_ind"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.click_model_plot.read_seen_result_file", "home.repos.pwc.inspect_result.ielab_oltr.utils.click_model_plot.read_seen_result_file", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot"], ["", "def", "plot_for_each_simulator", "(", "simulator", ",", "click_models", ",", "p1", ",", "p2", ")", ":", "\n", "\n", "    ", "mse_runs", "=", "[", "]", "\n", "perp_runs", "=", "[", "]", "\n", "color_index", "=", "0", "\n", "print", "(", ")", "\n", "print", "(", "simulator", ")", "\n", "for", "click_model", "in", "click_models", ":", "\n", "        ", "avg_perplexities", ",", "avg_MSEs", "=", "read_seen_result_file", "(", "simulator", ",", "click_model", ",", "1", ")", "\n", "\n", "for", "id", "in", "range", "(", "2", ",", "9", ")", ":", "\n", "            ", "perplexities", ",", "MSEs", "=", "read_seen_result_file", "(", "simulator", ",", "click_model", ",", "id", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "avg_perplexities", "[", "i", "]", ".", "append", "(", "perplexities", "[", "i", "]", "[", "0", "]", ")", "\n", "avg_MSEs", "[", "i", "]", ".", "append", "(", "MSEs", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "\n", "", "", "avg_perplexities", "=", "np", ".", "array", "(", "avg_perplexities", ")", "\n", "avg_MSEs", "=", "np", ".", "array", "(", "avg_MSEs", ")", "\n", "# avg_MSEs = np.sqrt(avg_MSEs)", "\n", "\n", "\n", "num_runs", "=", "avg_perplexities", ".", "shape", "[", "1", "]", "\n", "num_freq", "=", "avg_perplexities", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "model_perplexity", "=", "np", ".", "zeros", "(", "(", "num_runs", ",", "10", ")", ")", "\n", "model_MSE", "=", "np", ".", "zeros", "(", "(", "num_runs", ",", "10", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "            ", "model_perplexity", "+=", "avg_perplexities", "[", "i", "]", "\n", "model_MSE", "+=", "np", ".", "sqrt", "(", "avg_MSEs", "[", "i", "]", ")", "\n", "\n", "\n", "", "model_perplexity", "=", "model_perplexity", "/", "num_freq", "\n", "model_MSE", "=", "model_MSE", "/", "num_freq", "\n", "# model_MSE = np.sqrt(model_MSE)", "\n", "mse_runs", ".", "append", "(", "np", ".", "mean", "(", "model_MSE", ",", "axis", "=", "1", ")", ")", "\n", "perp_runs", ".", "append", "(", "np", ".", "mean", "(", "model_perplexity", ",", "axis", "=", "1", ")", ")", "\n", "\n", "mse_mean", "=", "np", ".", "mean", "(", "model_MSE", ".", "T", ",", "axis", "=", "1", ")", "\n", "mse_std_err", "=", "sem", "(", "model_MSE", ".", "T", ",", "axis", "=", "1", ")", "\n", "mse_h", "=", "mse_std_err", "*", "t", ".", "ppf", "(", "(", "1", "+", "0.95", ")", "/", "2", ",", "25", "-", "1", ")", "\n", "mse_low", "=", "np", ".", "subtract", "(", "mse_mean", ",", "mse_h", ")", "\n", "mse_high", "=", "np", ".", "add", "(", "mse_mean", ",", "mse_h", ")", "\n", "\n", "perp_mean", "=", "np", ".", "mean", "(", "model_perplexity", ".", "T", ",", "axis", "=", "1", ")", "\n", "perp_std_err", "=", "sem", "(", "model_perplexity", ".", "T", ",", "axis", "=", "1", ")", "\n", "perp_h", "=", "perp_std_err", "*", "t", ".", "ppf", "(", "(", "1", "+", "0.95", ")", "/", "2", ",", "25", "-", "1", ")", "\n", "perp_low", "=", "np", ".", "subtract", "(", "perp_mean", ",", "perp_h", ")", "\n", "perp_high", "=", "np", ".", "add", "(", "perp_mean", ",", "perp_h", ")", "\n", "\n", "print", "(", "click_model", ",", "np", ".", "sum", "(", "mse_mean", ")", "/", "10", ",", "np", ".", "sum", "(", "perp_mean", ")", "/", "10", ")", "\n", "if", "simulator", "==", "click_model", ":", "\n", "            ", "p1", ".", "plot", "(", "range", "(", "1", ",", "11", ")", ",", "mse_mean", ",", "color", "=", "COLORS", "[", "color_index", "]", ",", "alpha", "=", "1", ",", "linestyle", "=", "'dashed'", ",", "marker", "=", "'x'", ")", "\n", "", "else", ":", "\n", "            ", "p1", ".", "plot", "(", "range", "(", "1", ",", "11", ")", ",", "mse_mean", ",", "color", "=", "COLORS", "[", "color_index", "]", ",", "alpha", "=", "1", ",", ")", "\n", "", "p1", ".", "fill_between", "(", "range", "(", "1", ",", "11", ")", ",", "mse_low", ",", "mse_high", ",", "color", "=", "COLORS", "[", "color_index", "]", ",", "alpha", "=", "0.2", ")", "\n", "p1", ".", "set_ylabel", "(", "'RMSE'", ")", "\n", "p1", ".", "set_ylim", "(", "[", "0.02", ",", "0.3", "]", ")", "\n", "p1", ".", "set_xlim", "(", "[", "1", ",", "10", "]", ")", "\n", "\n", "if", "simulator", "==", "click_model", ":", "\n", "            ", "p2", ".", "plot", "(", "range", "(", "1", ",", "11", ")", ",", "perp_mean", ",", "color", "=", "COLORS", "[", "color_index", "]", ",", "alpha", "=", "1", ",", "linestyle", "=", "'dashed'", ",", "marker", "=", "'x'", ")", "\n", "", "else", ":", "\n", "            ", "p2", ".", "plot", "(", "range", "(", "1", ",", "11", ")", ",", "perp_mean", ",", "color", "=", "COLORS", "[", "color_index", "]", ",", "alpha", "=", "1", ",", ")", "\n", "\n", "", "p2", ".", "fill_between", "(", "range", "(", "1", ",", "11", ")", ",", "perp_low", ",", "perp_high", ",", "color", "=", "COLORS", "[", "color_index", "]", ",", "alpha", "=", "0.2", ")", "\n", "p2", ".", "set_ylabel", "(", "'Perplexity'", ")", "\n", "p2", ".", "set_ylim", "(", "[", "1", ",", "2.2", "]", ")", "\n", "p2", ".", "set_xlim", "(", "[", "1", ",", "10", "]", ")", "\n", "color_index", "+=", "1", "\n", "\n", "\n", "", "print", "(", "\"MSE t test\"", ")", "\n", "for", "x", "in", "range", "(", "len", "(", "mse_runs", ")", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "x", ",", "len", "(", "mse_runs", ")", ")", ":", "\n", "            ", "print", "(", "click_models", "[", "x", "]", ",", "click_models", "[", "y", "]", ",", "ttest_ind", "(", "mse_runs", "[", "x", "]", ",", "mse_runs", "[", "y", "]", ")", ")", "\n", "\n", "", "", "print", "(", ")", "\n", "print", "(", "\"Perplexity t test\"", ")", "\n", "for", "x", "in", "range", "(", "len", "(", "perp_runs", ")", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "x", ",", "len", "(", "perp_runs", ")", ")", ":", "\n", "            ", "print", "(", "click_models", "[", "x", "]", ",", "click_models", "[", "y", "]", ",", "ttest_ind", "(", "perp_runs", "[", "x", "]", ",", "perp_runs", "[", "y", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.cndcg_plot.plot": [[8, 35], ["matplotlib.figure", "numpy.zeros", "numpy.mean", "scipy.stats.sem", "numpy.subtract", "numpy.add", "matplotlib.plot", "range", "print", "scipy.stats.t.ppf", "range", "len", "open", "pickle.load", "numpy.array", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot"], ["def", "plot", "(", "path", ",", "parameters", ",", "folds", ",", "runs", ",", "click_model", ",", "num_interactions", ",", "color", ")", ":", "\n", "    ", "color_index", "=", "0", "\n", "for", "p", "in", "parameters", ":", "\n", "        ", "result", "=", "np", ".", "zeros", "(", "num_interactions", ")", "\n", "for", "f", "in", "folds", ":", "\n", "            ", "for", "r", "in", "runs", ":", "\n", "                ", "with", "open", "(", "\"{}/fold{}/{}_tau{}_run{}_cndcg.txt\"", ".", "format", "(", "path", ",", "f", ",", "click_model", ",", "p", ",", "r", ")", ",", "\n", "\"rb\"", ")", "as", "fp", ":", "\n", "                    ", "data", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "data", "=", "np", ".", "array", "(", "data", "[", ":", "num_interactions", "]", ")", "\n", "result", "=", "np", ".", "vstack", "(", "(", "result", ",", "data", ")", ")", "\n", "", "", "", "result", "=", "result", "[", "1", ":", "]", ".", "T", "\n", "result_mean", "=", "np", ".", "mean", "(", "result", ",", "axis", "=", "1", ")", "\n", "result_std_err", "=", "sem", "(", "result", ",", "axis", "=", "1", ")", "\n", "result_h", "=", "result_std_err", "*", "t", ".", "ppf", "(", "(", "1", "+", "0.95", ")", "/", "2", ",", "25", "-", "1", ")", "\n", "result_low", "=", "np", ".", "subtract", "(", "result_mean", ",", "result_h", ")", "\n", "result_high", "=", "np", ".", "add", "(", "result_mean", ",", "result_h", ")", "\n", "\n", "plt", ".", "plot", "(", "range", "(", "num_interactions", ")", ",", "result_mean", ",", "color", "=", "COLORS", "[", "color", "]", ",", "alpha", "=", "1", ")", "\n", "# plt.fill_between(range(num_interactions), result_low, result_high, color='black', alpha=0.2)", "\n", "color_index", "+=", "1", "\n", "cndcg", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "result_mean", ")", "+", "1", ")", ":", "\n", "            ", "cndcg", "+=", "0.9995", "**", "i", "*", "result_mean", "[", "i", "-", "1", "]", "\n", "", "print", "(", "p", ",", "cndcg", ")", "\n", "\n", "", "plt", ".", "figure", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.__init__": [[52, 70], ["lshash.LSHash._init_uniform_planes", "lshash.LSHash._init_hashtables", "ValueError", "matrices_filename.endswith"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash._init_uniform_planes", "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash._init_hashtables"], ["def", "__init__", "(", "self", ",", "hash_size", ",", "input_dim", ",", "num_hashtables", "=", "1", ",", "\n", "storage_config", "=", "None", ",", "matrices_filename", "=", "None", ",", "overwrite", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "hash_size", "=", "hash_size", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "num_hashtables", "=", "num_hashtables", "\n", "\n", "if", "storage_config", "is", "None", ":", "\n", "            ", "storage_config", "=", "{", "'dict'", ":", "None", "}", "\n", "", "self", ".", "storage_config", "=", "storage_config", "\n", "\n", "if", "matrices_filename", "and", "not", "matrices_filename", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The specified file name must end with .npz\"", ")", "\n", "", "self", ".", "matrices_filename", "=", "matrices_filename", "\n", "self", ".", "overwrite", "=", "overwrite", "\n", "\n", "self", ".", "_init_uniform_planes", "(", ")", "\n", "self", ".", "_init_hashtables", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash._init_uniform_planes": [[71, 106], ["os.path.isfile", "lshash.LSHash._generate_uniform_planes", "numpy.load", "sorted", "lshash.LSHash._generate_uniform_planes", "numpy.savez_compressed", "xrange", "print", "sorted.items", "xrange", "print"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash._generate_uniform_planes", "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash._generate_uniform_planes"], ["", "def", "_init_uniform_planes", "(", "self", ")", ":", "\n", "        ", "\"\"\" Initialize uniform planes used to calculate the hashes\n        if file `self.matrices_filename` exist and `self.overwrite` is\n        selected, save the uniform planes to the specified file.\n        if file `self.matrices_filename` exist and `self.overwrite` is not\n        selected, load the matrix with `np.load`.\n        if file `self.matrices_filename` does not exist and regardless of\n        `self.overwrite`, only set `self.uniform_planes`.\n        \"\"\"", "\n", "if", "\"uniform_planes\"", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "matrices_filename", ":", "\n", "            ", "file_exist", "=", "os", ".", "path", ".", "isfile", "(", "self", ".", "matrices_filename", ")", "\n", "if", "file_exist", "and", "not", "self", ".", "overwrite", ":", "\n", "                ", "try", ":", "\n", "                    ", "npzfiles", "=", "np", ".", "load", "(", "self", ".", "matrices_filename", ")", "\n", "", "except", "IOError", ":", "\n", "                    ", "print", "(", "\"Cannot load specified file as a numpy array\"", ")", "\n", "raise", "\n", "", "else", ":", "\n", "                    ", "npzfiles", "=", "sorted", "(", "npzfiles", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "self", ".", "uniform_planes", "=", "[", "t", "[", "1", "]", "for", "t", "in", "npzfiles", "]", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "uniform_planes", "=", "[", "self", ".", "_generate_uniform_planes", "(", ")", "\n", "for", "_", "in", "xrange", "(", "self", ".", "num_hashtables", ")", "]", "\n", "try", ":", "\n", "                    ", "np", ".", "savez_compressed", "(", "self", ".", "matrices_filename", ",", "\n", "*", "self", ".", "uniform_planes", ")", "\n", "", "except", "IOError", ":", "\n", "                    ", "print", "(", "\"IOError when saving matrices to specificed path\"", ")", "\n", "raise", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "uniform_planes", "=", "[", "self", ".", "_generate_uniform_planes", "(", ")", "\n", "for", "_", "in", "xrange", "(", "self", ".", "num_hashtables", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash._init_hashtables": [[107, 112], ["utils.storage.storage", "xrange"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.storage"], ["", "", "def", "_init_hashtables", "(", "self", ")", ":", "\n", "        ", "\"\"\" Initialize the hash tables such that each record will be in the\n        form of \"[storage1, storage2, ...]\" \"\"\"", "\n", "self", ".", "hash_tables", "=", "[", "storage", "(", "self", ".", "storage_config", ",", "i", ")", "\n", "for", "i", "in", "xrange", "(", "self", ".", "num_hashtables", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash._generate_uniform_planes": [[113, 119], ["numpy.random.randn"], "methods", ["None"], ["", "def", "_generate_uniform_planes", "(", "self", ")", ":", "\n", "        ", "\"\"\" Generate uniformly distributed hyperplanes and return it as a 2D\n        numpy array.\n        \"\"\"", "\n", "\n", "return", "np", ".", "random", ".", "randn", "(", "self", ".", "hash_size", ",", "self", ".", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash._hash": [[120, 143], ["numpy.array", "numpy.dot", "print", "print"], "methods", ["None"], ["", "def", "_hash", "(", "self", ",", "planes", ",", "input_point", ")", ":", "\n", "        ", "\"\"\" Generates the binary hash for `input_point` and returns it.\n        :param planes:\n            The planes are random uniform planes with a dimension of\n            `hash_size` * `input_dim`.\n        :param input_point:\n            A Python tuple or list object that contains only numbers.\n            The dimension needs to be 1 * `input_dim`.\n        \"\"\"", "\n", "\n", "try", ":", "\n", "            ", "input_point", "=", "np", ".", "array", "(", "input_point", ")", "# for faster dot product", "\n", "projections", "=", "np", ".", "dot", "(", "planes", ",", "input_point", ")", "\n", "", "except", "TypeError", "as", "e", ":", "\n", "            ", "print", "(", "\"\"\"The input point needs to be an array-like object with\n                  numbers only elements\"\"\"", ")", "\n", "raise", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "            ", "print", "(", "\"\"\"The input point needs to be of the same dimension as\n                  `input_dim` when initializing this LSHash instance\"\"\"", ",", "e", ")", "\n", "raise", "\n", "", "else", ":", "\n", "            ", "return", "\"\"", ".", "join", "(", "[", "'1'", "if", "i", ">", "0", "else", "'0'", "for", "i", "in", "projections", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash._as_np_array": [[144, 175], ["isinstance", "isinstance", "numpy.asarray", "isinstance", "TypeError", "json.loads", "print", "numpy.asarray", "print"], "methods", ["None"], ["", "", "def", "_as_np_array", "(", "self", ",", "json_or_tuple", ")", ":", "\n", "        ", "\"\"\" Takes either a JSON-serialized data structure or a tuple that has\n        the original input points stored, and returns the original input point\n        in numpy array format.\n        \"\"\"", "\n", "if", "isinstance", "(", "json_or_tuple", ",", "basestring", ")", ":", "\n", "# JSON-serialized in the case of Redis", "\n", "            ", "try", ":", "\n", "# Return the point stored as list, without the extra data", "\n", "                ", "tuples", "=", "json", ".", "loads", "(", "json_or_tuple", ")", "[", "0", "]", "\n", "", "except", "TypeError", ":", "\n", "                ", "print", "(", "\"The value stored is not JSON-serilizable\"", ")", "\n", "raise", "\n", "", "", "else", ":", "\n", "# If extra_data exists, `tuples` is the entire", "\n", "# (point:tuple, extra_data). Otherwise (i.e., extra_data=None),", "\n", "# return the point stored as a tuple", "\n", "            ", "tuples", "=", "json_or_tuple", "\n", "\n", "", "if", "isinstance", "(", "tuples", "[", "0", "]", ",", "tuple", ")", ":", "\n", "# in this case extra data exists", "\n", "            ", "return", "np", ".", "asarray", "(", "tuples", "[", "0", "]", ")", "\n", "\n", "", "elif", "isinstance", "(", "tuples", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "return", "np", ".", "asarray", "(", "tuples", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "                ", "print", "(", "\"The input needs to be an array-like object\"", ",", "e", ")", "\n", "raise", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"query data is not supported\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.index": [[176, 203], ["isinstance", "enumerate", "input_point.tolist.tolist.tolist", "tuple", "table.append_val", "tuple", "lshash.LSHash._hash"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.append_val", "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash._hash"], ["", "", "def", "index", "(", "self", ",", "input_point", ",", "extra_data", "=", "None", ")", ":", "\n", "        ", "\"\"\" Index a single input point by adding it to the selected storage.\n        If `extra_data` is provided, it will become the value of the dictionary\n        {input_point: extra_data}, which in turn will become the value of the\n        hash table. `extra_data` needs to be JSON serializable if in-memory\n        dict is not used as storage.\n        :param input_point:\n            A list, or tuple, or numpy ndarray object that contains numbers\n            only. The dimension needs to be 1 * `input_dim`.\n            This object will be converted to Python tuple and stored in the\n            selected storage.\n        :param extra_data:\n            (optional) Needs to be a JSON-serializable object: list, dicts and\n            basic types such as strings and integers.\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "input_point", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "input_point", "=", "input_point", ".", "tolist", "(", ")", "\n", "\n", "", "if", "extra_data", ":", "\n", "            ", "value", "=", "(", "tuple", "(", "input_point", ")", ",", "extra_data", ")", "\n", "", "else", ":", "\n", "            ", "value", "=", "tuple", "(", "input_point", ")", "\n", "\n", "", "for", "i", ",", "table", "in", "enumerate", "(", "self", ".", "hash_tables", ")", ":", "\n", "            ", "table", ".", "append_val", "(", "self", ".", "_hash", "(", "self", ".", "uniform_planes", "[", "i", "]", ",", "input_point", ")", ",", "\n", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.query": [[204, 265], ["set", "set.sort", "enumerate", "enumerate", "ImportError", "lshash.LSHash._hash", "table.keys", "lshash.LSHash._hash", "set.update", "d_func", "lshash.LSHash.hamming_dist", "table.get_list", "lshash.LSHash._as_np_array", "set.update", "table.get_list", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash._hash", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash._hash", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.update", "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.hamming_dist", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.get_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash._as_np_array", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.update", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.get_list"], ["", "", "def", "query", "(", "self", ",", "query_point", ",", "num_results", "=", "None", ",", "distance_func", "=", "None", ")", ":", "\n", "        ", "\"\"\" Takes `query_point` which is either a tuple or a list of numbers,\n        returns `num_results` of results as a list of tuples that are ranked\n        based on the supplied metric function `distance_func`.\n        :param query_point:\n            A list, or tuple, or numpy ndarray that only contains numbers.\n            The dimension needs to be 1 * `input_dim`.\n            Used by :meth:`._hash`.\n        :param num_results:\n            (optional) Integer, specifies the max amount of results to be\n            returned. If not specified all candidates will be returned as a\n            list in ranked order.\n        :param distance_func:\n            (optional) The distance function to be used. Currently it needs to\n            be one of (\"hamming\", \"euclidean\", \"true_euclidean\",\n            \"centred_euclidean\", \"cosine\", \"l1norm\"). By default \"euclidean\"\n            will used.\n        \"\"\"", "\n", "\n", "candidates", "=", "set", "(", ")", "\n", "if", "not", "distance_func", ":", "\n", "            ", "distance_func", "=", "\"euclidean\"", "\n", "\n", "", "if", "distance_func", "==", "\"hamming\"", ":", "\n", "            ", "if", "not", "bitarray", ":", "\n", "                ", "raise", "ImportError", "(", "\" Bitarray is required for hamming distance\"", ")", "\n", "\n", "", "for", "i", ",", "table", "in", "enumerate", "(", "self", ".", "hash_tables", ")", ":", "\n", "                ", "binary_hash", "=", "self", ".", "_hash", "(", "self", ".", "uniform_planes", "[", "i", "]", ",", "query_point", ")", "\n", "for", "key", "in", "table", ".", "keys", "(", ")", ":", "\n", "                    ", "distance", "=", "LSHash", ".", "hamming_dist", "(", "key", ",", "binary_hash", ")", "\n", "if", "distance", "<", "2", ":", "\n", "                        ", "candidates", ".", "update", "(", "table", ".", "get_list", "(", "key", ")", ")", "\n", "\n", "", "", "", "d_func", "=", "LSHash", ".", "euclidean_dist_square", "\n", "\n", "", "else", ":", "\n", "            ", "if", "distance_func", "==", "\"euclidean\"", ":", "\n", "                ", "d_func", "=", "LSHash", ".", "euclidean_dist_square", "\n", "", "elif", "distance_func", "==", "\"true_euclidean\"", ":", "\n", "                ", "d_func", "=", "LSHash", ".", "euclidean_dist", "\n", "", "elif", "distance_func", "==", "\"centred_euclidean\"", ":", "\n", "                ", "d_func", "=", "LSHash", ".", "euclidean_dist_centred", "\n", "", "elif", "distance_func", "==", "\"cosine\"", ":", "\n", "                ", "d_func", "=", "LSHash", ".", "cosine_dist", "\n", "", "elif", "distance_func", "==", "\"l1norm\"", ":", "\n", "                ", "d_func", "=", "LSHash", ".", "l1norm_dist", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"The distance function name is invalid.\"", ")", "\n", "\n", "", "for", "i", ",", "table", "in", "enumerate", "(", "self", ".", "hash_tables", ")", ":", "\n", "                ", "binary_hash", "=", "self", ".", "_hash", "(", "self", ".", "uniform_planes", "[", "i", "]", ",", "query_point", ")", "\n", "candidates", ".", "update", "(", "table", ".", "get_list", "(", "binary_hash", ")", ")", "\n", "\n", "# rank candidates by distance function", "\n", "\n", "", "", "candidates", "=", "[", "(", "ix", ",", "d_func", "(", "query_point", ",", "self", ".", "_as_np_array", "(", "ix", ")", ")", ")", "\n", "for", "ix", "in", "candidates", "]", "\n", "candidates", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "\n", "return", "candidates", "[", ":", "num_results", "]", "if", "num_results", "else", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.hamming_dist": [[268, 272], ["xor_result.count", "bitarray", "bitarray"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "hamming_dist", "(", "bitarray1", ",", "bitarray2", ")", ":", "\n", "        ", "xor_result", "=", "bitarray", "(", "bitarray1", ")", "^", "bitarray", "(", "bitarray2", ")", "\n", "return", "xor_result", ".", "count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.euclidean_dist": [[273, 278], ["numpy.sqrt", "numpy.array", "numpy.dot"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\" This is a hot function, hence some optimizations are made. \"\"\"", "\n", "diff", "=", "np", ".", "array", "(", "x", ")", "-", "y", "\n", "return", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "diff", ",", "diff", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.euclidean_dist_square": [[279, 284], ["numpy.dot", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "euclidean_dist_square", "(", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\" This is a hot function, hence some optimizations are made. \"\"\"", "\n", "diff", "=", "np", ".", "array", "(", "x", ")", "-", "y", "\n", "return", "np", ".", "dot", "(", "diff", ",", "diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.euclidean_dist_centred": [[285, 290], ["numpy.dot", "numpy.mean", "numpy.mean"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "euclidean_dist_centred", "(", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\" This is a hot function, hence some optimizations are made. \"\"\"", "\n", "diff", "=", "np", ".", "mean", "(", "x", ")", "-", "np", ".", "mean", "(", "y", ")", "\n", "return", "np", ".", "dot", "(", "diff", ",", "diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.l1norm_dist": [[291, 294], ["sum", "abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "l1norm_dist", "(", "x", ",", "y", ")", ":", "\n", "        ", "return", "sum", "(", "abs", "(", "x", "-", "y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.cosine_dist": [[295, 298], ["numpy.dot", "numpy.dot", "numpy.dot"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "cosine_dist", "(", "x", ",", "y", ")", ":", "\n", "        ", "return", "1", "-", "np", ".", "dot", "(", "x", ",", "y", ")", "/", "(", "(", "np", ".", "dot", "(", "x", ",", "x", ")", "*", "np", ".", "dot", "(", "y", ",", "y", ")", ")", "**", "0.5", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.BaseStorage.__init__": [[31, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\" An abstract class used as an adapter for storages. \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.BaseStorage.keys": [[35, 38], ["None"], "methods", ["None"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns a list of binary hashes that are used as dict keys. \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.BaseStorage.set_val": [[39, 42], ["None"], "methods", ["None"], ["", "def", "set_val", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "\"\"\" Set `val` at `key`, note that the `val` must be a string. \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.BaseStorage.get_val": [[43, 46], ["None"], "methods", ["None"], ["", "def", "get_val", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\" Return `val` at `key`, note that the `val` must be a string. \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.BaseStorage.append_val": [[47, 53], ["None"], "methods", ["None"], ["", "def", "append_val", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "\"\"\" Append `val` to the list stored at `key`.\n        If the key is not yet present in storage, create a list with `val` at\n        `key`.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.BaseStorage.get_list": [[54, 60], ["None"], "methods", ["None"], ["", "def", "get_list", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\" Returns a list stored in storage at `key`.\n        This method should return a list of values stored at `key`. `[]` should\n        be returned if the list is empty or if `key` is not present in storage.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.InMemoryStorage.__init__": [[63, 66], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "name", "=", "'dict'", "\n", "self", ".", "storage", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.InMemoryStorage.keys": [[67, 69], ["storage.InMemoryStorage.storage.keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "storage", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.InMemoryStorage.set_val": [[70, 72], ["None"], "methods", ["None"], ["", "def", "set_val", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "self", ".", "storage", "[", "key", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.InMemoryStorage.get_val": [[73, 78], ["storage.InMemoryStorage.storage.keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "get_val", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "not", "in", "self", ".", "storage", ".", "keys", "(", ")", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "storage", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.InMemoryStorage.append_val": [[79, 82], ["print", "storage.InMemoryStorage.storage.setdefault().append", "storage.InMemoryStorage.storage.setdefault"], "methods", ["None"], ["", "", "def", "append_val", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "print", "(", "val", ")", "\n", "self", ".", "storage", ".", "setdefault", "(", "key", ",", "[", "]", ")", ".", "append", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.InMemoryStorage.get_list": [[83, 85], ["storage.InMemoryStorage.storage.get"], "methods", ["None"], ["", "def", "get_list", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "storage", ".", "get", "(", "key", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.InMemoryStorage.add_time": [[86, 91], ["storage.InMemoryStorage.storage.keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "add_time", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "not", "in", "self", ".", "storage", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "storage", "[", "key", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "storage", "[", "key", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.__init__": [[94, 99], ["redis.StrictRedis", "ImportError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "not", "redis", ":", "\n", "            ", "raise", "ImportError", "(", "\"redis-py is required to use Redis as storage.\"", ")", "\n", "", "self", ".", "name", "=", "'redis'", "\n", "self", ".", "storage", "=", "redis", ".", "StrictRedis", "(", "**", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys": [[100, 102], ["storage.RedisStorage.storage.keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "keys", "(", "self", ",", "pattern", "=", "\"*\"", ")", ":", "\n", "        ", "return", "self", ".", "storage", ".", "keys", "(", "pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.set_val": [[103, 105], ["storage.RedisStorage.storage.set"], "methods", ["None"], ["", "def", "set_val", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "self", ".", "storage", ".", "set", "(", "key", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.get_val": [[106, 108], ["storage.RedisStorage.storage.get"], "methods", ["None"], ["", "def", "get_val", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "storage", ".", "get", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.append_val": [[109, 111], ["storage.RedisStorage.storage.rpush", "json.dumps"], "methods", ["None"], ["", "def", "append_val", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "self", ".", "storage", ".", "rpush", "(", "key", ",", "json", ".", "dumps", "(", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.get_list": [[112, 114], ["storage.RedisStorage.storage.lrange"], "methods", ["None"], ["", "def", "get_list", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "storage", ".", "lrange", "(", "key", ",", "0", ",", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.storage": [[17, 28], ["storage.InMemoryStorage", "storage.RedisStorage", "ValueError"], "function", ["None"], ["def", "storage", "(", "storage_config", ",", "index", ")", ":", "\n", "    ", "\"\"\" Given the configuration for storage and the index, return the\n    configured storage instance.\n    \"\"\"", "\n", "if", "'dict'", "in", "storage_config", ":", "\n", "        ", "return", "InMemoryStorage", "(", "storage_config", "[", "'dict'", "]", ")", "\n", "", "elif", "'redis'", "in", "storage_config", ":", "\n", "        ", "storage_config", "[", "'redis'", "]", "[", "'db'", "]", "=", "index", "\n", "return", "RedisStorage", "(", "storage_config", "[", "'redis'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Only in-memory dictionary and Redis are supported.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_MDP_mq2007.run": [[16, 62], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "numpy.power", "utils.utility.get_DCG_MDPrewards", "ranker.update_policy", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "len", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "numpy.divide", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_DCG_MDPrewards", "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRankerV2.MDPRankerV2.update_policy", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "reward_method", ",", "num_interation", ",", "click_model", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "clicked_doces", ",", "click_labels", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "# no click then skip", "\n", "if", "len", "(", "clicked_doces", ")", "==", "0", ":", "\n", "            ", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "num_iter", "+=", "1", "\n", "continue", "\n", "\n", "", "propensities", "=", "np", ".", "power", "(", "np", ".", "divide", "(", "1", ",", "np", ".", "arange", "(", "1.0", ",", "len", "(", "click_labels", ")", "+", "1", ")", ")", ",", "eta", ")", "\n", "\n", "\n", "# directly using pointwise rewards", "\n", "# rewards = get_DCG_rewards(click_labels, propensities, reward_method)", "\n", "\n", "# using listwise rewards", "\n", "rewards", "=", "get_DCG_MDPrewards", "(", "click_labels", ",", "propensities", ",", "reward_method", ",", "gamma", "=", "0", ")", "\n", "\n", "# ranker.record_episode(qid, result_list, rewards)", "\n", "\n", "ranker", ".", "update_policy", "(", "qid", ",", "result_list", ",", "rewards", ",", "train_set", ")", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "\n", "# print(num_iter)", "\n", "num_iter", "+=", "1", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_MDP_mq2007.job": [[64, 102], ["clickModel.PBM.PBM", "range", "ranker.MDPRankerV2.MDPRankerV2", "print", "run_MDP_mq2007.run", "os.makedirs", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "learning_rate", ",", "eta", ",", "reward_method", ",", "f", ",", "train_set", ",", "test_set", ",", "num_features", ",", "output_fold", ")", ":", "\n", "\n", "# if model_type == \"perfect\":", "\n", "#     pc = [0.0, 0.2, 0.4, 0.8, 1.0]", "\n", "#     ps = [0.0, 0.0, 0.0, 0.0, 0.0]", "\n", "# elif model_type == \"navigational\":", "\n", "#     pc = [0.05, 0.3, 0.5, 0.7, 0.95]", "\n", "#     ps = [0.2, 0.3, 0.5, 0.7, 0.9]", "\n", "# elif model_type == \"informational\":", "\n", "#     pc = [0.4, 0.6, 0.7, 0.8, 0.9]", "\n", "#     ps = [0.1, 0.2, 0.3, 0.4, 0.5]", "\n", "#", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.5", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.5", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.5", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.7", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.3", ",", "0.5", "]", "\n", "", "cm", "=", "PBM", "(", "pc", ",", "1", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "16", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "MDPRankerV2", "(", "256", ",", "num_features", ",", "learning_rate", ",", "loss_type", "=", "'pairwise'", ")", "\n", "print", "(", "\"MDP Adam mq2007 fold{} {} eta{} reward {} run{} start!\"", ".", "format", "(", "f", ",", "model_type", ",", "eta", ",", "reward_method", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "reward_method", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_MDP_mslr10k.run": [[15, 62], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "numpy.power", "ranker.TFupdate_policy_trust", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "len", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "numpy.divide", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRanker.MDPRanker.TFupdate_policy_trust", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "reward_method", ",", "num_interation", ",", "click_model", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "clicked_doces", ",", "click_labels", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "if", "len", "(", "clicked_doces", ")", "==", "0", ":", "\n", "            ", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "num_iter", "+=", "1", "\n", "continue", "\n", "\n", "", "propensities", "=", "np", ".", "power", "(", "np", ".", "divide", "(", "1", ",", "np", ".", "arange", "(", "1.0", ",", "len", "(", "click_labels", ")", "+", "1", ")", ")", ",", "eta", ")", "\n", "\n", "# point_wise_rewards", "\n", "rewards", "=", "click_labels", "/", "propensities", "\n", "\n", "# directly using pointwise rewards", "\n", "# rewards = get_DCG_rewards(click_labels, propensities, reward_method)", "\n", "\n", "# using listwise rewards", "\n", "# rewards = get_DCG_MDPrewards(click_labels, propensities, reward_method, gamma=1)", "\n", "\n", "# ranker.record_episode(qid, result_list, rewards)", "\n", "\n", "ranker", ".", "TFupdate_policy_trust", "(", "qid", ",", "result_list", ",", "rewards", ",", "train_set", ")", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "\n", "# print(num_iter)", "\n", "num_iter", "+=", "1", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_MDP_mslr10k.job": [[64, 90], ["clickModel.PBM.PBM", "range", "ranker.MDPRanker.MDPRanker", "print", "run_MDP_mslr10k.run", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "learning_rate", ",", "eta", ",", "reward_method", ",", "f", ",", "train_set", ",", "test_set", ",", "num_features", ",", "output_fold", ")", ":", "\n", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.2", ",", "0.4", ",", "0.8", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "", "cm", "=", "PBM", "(", "pc", ",", "1", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "16", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "MDPRanker", "(", "256", ",", "num_features", ",", "learning_rate", ")", "\n", "print", "(", "\"MDP MSLR10K fold{} {} eta{} reward {} run{} start!\"", ".", "format", "(", "f", ",", "model_type", ",", "eta", ",", "reward_method", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "reward_method", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_ReOLTR.run": [[16, 63], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "numpy.power", "utils.utility.get_DCG_MDPrewards", "ranker.update_policy", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "len", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "numpy.divide", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_DCG_MDPrewards", "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRankerV2.MDPRankerV2.update_policy", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "gamma", ",", "reward_method", ",", "num_interation", ",", "click_model", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "clicked_doces", ",", "click_labels", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "# if no click data, skip this session", "\n", "if", "len", "(", "clicked_doces", ")", "==", "0", ":", "\n", "            ", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "num_iter", "+=", "1", "\n", "continue", "\n", "\n", "", "propensities", "=", "np", ".", "power", "(", "np", ".", "divide", "(", "1", ",", "np", ".", "arange", "(", "1.0", ",", "len", "(", "click_labels", ")", "+", "1", ")", ")", ",", "eta", ")", "\n", "\n", "\n", "# directly using pointwise rewards", "\n", "# rewards = get_DCG_rewards(click_labels, propensities, reward_method)", "\n", "\n", "# using listwise rewards", "\n", "rewards", "=", "get_DCG_MDPrewards", "(", "click_labels", ",", "propensities", ",", "reward_method", ",", "gamma", "=", "gamma", ")", "\n", "\n", "# ranker.record_episode(qid, result_list, rewards)", "\n", "\n", "ranker", ".", "update_policy", "(", "qid", ",", "result_list", ",", "rewards", ",", "train_set", ")", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "\n", "# all_result = ranker.get_all_query_result_list(test_set)", "\n", "# ndcg = evl_tool.average_ndcg_at_k(test_set, all_result, 10)", "\n", "# print(num_iter, ndcg)", "\n", "num_iter", "+=", "1", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_ReOLTR.job": [[65, 105], ["clickModel.PBM.PBM", "range", "ranker.MDPRankerV2.MDPRankerV2", "print", "run_ReOLTR.run", "os.makedirs", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "learning_rate", ",", "eta", ",", "gamma", ",", "reward_method", ",", "f", ",", "train_set", ",", "test_set", ",", "num_features", ",", "output_fold", ")", ":", "\n", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.2", ",", "0.4", ",", "0.8", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "# #", "\n", "# if model_type == \"perfect\":", "\n", "#     pc = [0.0, 0.5, 1.0]", "\n", "#     ps = [0.0, 0.0, 0.0]", "\n", "# elif model_type == \"navigational\":", "\n", "#     pc = [0.05, 0.5, 0.95]", "\n", "#     ps = [0.2, 0.5, 0.9]", "\n", "# elif model_type == \"informational\":", "\n", "#     pc = [0.4, 0.7, 0.9]", "\n", "#     ps = [0.1, 0.3, 0.5]", "\n", "", "cm", "=", "PBM", "(", "pc", ",", "1", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "16", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "MDPRankerV2", "(", "256", ",", "num_features", ",", "learning_rate", ")", "\n", "print", "(", "\"MDP Adam MSLR10K fold{} {} eta{} reward {} run{} start!\"", ".", "format", "(", "f", ",", "model_type", ",", "eta", ",", "reward_method", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "gamma", ",", "reward_method", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "print", "(", "\"MDP MSLR10K fold{} {} eta{} reward{} run{} done!\"", ".", "format", "(", "f", ",", "model_type", ",", "eta", ",", "reward_method", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_COLTR.run": [[16, 96], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "ranker.sample_unit_vectors", "ranker.sample_canditate_rankers", "ranker.infer_winners", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "ranker.get_current_weights", "len", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "ranker.get_current_weights", "ranker.update", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "numpy.where", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.sample_unit_vectors", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.sample_canditate_rankers", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.infer_winners", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.update", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "num_rankers", ")", ":", "\n", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "\n", "num_interation", "=", "0", "\n", "\n", "# correct = 0", "\n", "# wrong = 0", "\n", "for", "i", "in", "index", ":", "\n", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "# if no clicks, skip.", "\n", "if", "len", "(", "clicked_doc", ")", "==", "0", ":", "\n", "            ", "if", "num_interation", "%", "1000", "==", "0", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "num_interation", "+=", "1", "\n", "continue", "\n", "\n", "# flip click label. exp: [1,0,1,0,0] -> [0,1,0,0,0]", "\n", "", "last_click", "=", "np", ".", "where", "(", "click_label", "==", "1", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "click_label", "[", ":", "last_click", "+", "1", "]", "=", "1", "-", "click_label", "[", ":", "last_click", "+", "1", "]", "\n", "\n", "# propensities = np.power(np.divide(1, np.arange(1.0, len(click_label) + 1)), 1)", "\n", "#", "\n", "# # directly using pointwise rewards", "\n", "# rewards = get_DCG_rewards(click_label, propensities, \"both\")", "\n", "\n", "# bandit record", "\n", "record", "=", "(", "qid", ",", "result_list", ",", "click_label", ",", "ranker", ".", "get_current_weights", "(", ")", ")", "\n", "\n", "unit_vectors", "=", "ranker", ".", "sample_unit_vectors", "(", "num_rankers", ")", "\n", "canditate_rankers", "=", "ranker", ".", "sample_canditate_rankers", "(", "unit_vectors", ")", "# canditate_rankers are ranker weights, not ranker class", "\n", "\n", "winner_rankers", "=", "ranker", ".", "infer_winners", "(", "canditate_rankers", "[", ":", "num_rankers", "]", ",", "record", ")", "# winner_rankers are index of candidates rankers who win the evaluation", "\n", "\n", "#### This part of code is used to test correctness of counterfactual evaluation ####", "\n", "# if winner_rankers is not None:", "\n", "#     all_result = utility.get_query_result_list(ranker.get_current_weights(), train_set, qid)", "\n", "#     current_ndcg = evl_tool.query_ndcg_at_k(train_set, all_result, qid, 10)", "\n", "#     for weights in canditate_rankers[winner_rankers - 1]:", "\n", "#         canditate_all_result = utility.get_query_result_list(weights, train_set, qid)", "\n", "#         canditate_all_result_ndcg = evl_tool.query_ndcg_at_k(train_set, canditate_all_result, qid, 10)", "\n", "#", "\n", "#         if canditate_all_result_ndcg >= current_ndcg:", "\n", "#             correct += 1", "\n", "#         else:", "\n", "#             wrong += 1", "\n", "#     print(correct, wrong, correct / (correct + wrong))", "\n", "######################################################################################", "\n", "\n", "if", "winner_rankers", "is", "not", "None", ":", "\n", "            ", "gradient", "=", "np", ".", "sum", "(", "unit_vectors", "[", "winner_rankers", "-", "1", "]", ",", "axis", "=", "0", ")", "/", "winner_rankers", ".", "shape", "[", "0", "]", "\n", "ranker", ".", "update", "(", "gradient", ")", "\n", "\n", "", "if", "num_interation", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "final_weight", "=", "ranker", ".", "get_current_weights", "(", ")", "\n", "num_interation", "+=", "1", "\n", "\n", "# print(num_interation, ndcg)", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_COLTR.job": [[98, 140], ["clickModel.PBM.PBM", "range", "ranker.COLTRLinearRanker.COLTRLinearRanker", "print", "run_COLTR.run", "os.makedirs", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ",", "tau", ",", "step_size", ",", "gamma", ",", "num_rankers", ",", "learning_rate_decay", ",", "output_fold", ")", ":", "\n", "# if model_type == \"perfect\":", "\n", "#     pc = [0.0, 0.5, 1.0]", "\n", "#     ps = [0.0, 0.0, 0.0]", "\n", "# elif model_type == \"navigational\":", "\n", "#     pc = [0.05, 0.5, 0.95]", "\n", "#     ps = [0.2, 0.5, 0.9]", "\n", "# elif model_type == \"informational\":", "\n", "#     pc = [0.4, 0.7, 0.9]", "\n", "#     ps = [0.1, 0.3, 0.5]", "\n", "\n", "# click setting for 4-grade relevance label datasets.", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.2", ",", "0.4", ",", "0.8", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "\n", "# using PBM click model to simulate clicks.", "\n", "# cm = SDBN(pc, ps)", "\n", "", "cm", "=", "PBM", "(", "pc", ",", "1", ")", "\n", "for", "r", "in", "range", "(", "16", ",", "26", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "COLTRLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "step_size", ",", "tau", ",", "gamma", ",", "learning_rate_decay", "=", "learning_rate_decay", ")", "\n", "print", "(", "\"COTLR {} tau{} fold{} {} run{} start!\"", ".", "format", "(", "output_fold", ",", "tau", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "num_rankers", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist", "\n", "# store the results.", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.ndcg_plot.bar_plot": [[9, 31], ["print", "numpy.zeros", "numpy.mean", "numpy.mean", "scipy.stats.sem", "scipy.t.interval", "print", "matplotlib.bar", "matplotlib.ylabel", "int", "open", "pickle.load", "numpy.array", "numpy.vstack", "int"], "function", ["None"], ["    ", "print", "(", "path", ")", "\n", "color_index", "=", "0", "\n", "for", "p", "in", "parameters", ":", "\n", "        ", "result", "=", "np", ".", "zeros", "(", "num_interactions", ")", "\n", "for", "f", "in", "folds", ":", "\n", "            ", "for", "r", "in", "runs", ":", "\n", "                ", "with", "open", "(", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "path", ",", "f", ",", "click_model", ",", "r", ")", ",", "\n", "\"rb\"", ")", "as", "fp", ":", "\n", "                    ", "data", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "data", "=", "np", ".", "array", "(", "data", "[", ":", "num_interactions", "]", ")", "\n", "result", "=", "np", ".", "vstack", "(", "(", "result", ",", "data", ")", ")", "\n", "", "", "", "result", "=", "result", "[", "1", ":", "]", ".", "T", "\n", "print", "(", "result", ".", "shape", ")", "\n", "result_mean", "=", "np", ".", "mean", "(", "result", ",", "axis", "=", "1", ")", "\n", "result_std_err", "=", "sem", "(", "result", ",", "axis", "=", "1", ")", "\n", "result_h", "=", "result_std_err", "*", "t", ".", "ppf", "(", "(", "1", "+", "0.95", ")", "/", "2", ",", "25", "-", "1", ")", "\n", "result_low", "=", "np", ".", "subtract", "(", "result_mean", ",", "result_h", ")", "\n", "result_high", "=", "np", ".", "add", "(", "result_mean", ",", "result_h", ")", "\n", "\n", "plt", ".", "plot", "(", "range", "(", "num_interactions", ")", ",", "result_mean", ",", "color", "=", "COLORS", "[", "color", "]", ",", "alpha", "=", "1", ")", "\n", "\n", "plt", ".", "fill_between", "(", "range", "(", "num_interactions", ")", ",", "result_low", ",", "result_high", ",", "color", "=", "COLORS", "[", "color", "]", ",", "alpha", "=", "0.2", ")", "\n", "color_index", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.ndcg_plot.plot": [[32, 91], ["print", "matplotlib.subplot", "matplotlib.title", "numpy.zeros", "numpy.mean", "scipy.stats.sem", "scipy.t.interval", "matplotlib.xlim", "matplotlib.xlabel", "matplotlib.yticks", "matplotlib.xticks", "print", "matplotlib.title", "matplotlib.title", "int", "matplotlib.axhline", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.ylabel", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.xlabel", "range", "numpy.append", "range", "numpy.append", "numpy.append", "numpy.arange", "open", "pickle.load", "numpy.array", "numpy.vstack", "int"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot"], ["\n", "\n", "", "", "def", "plot_mrr", "(", "path", ",", "folds", ",", "runs", ",", "click_models", ",", "num_interactions", ",", "color", ")", ":", "\n", "    ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "3", ",", "5", ")", "\n", "row", "=", "0", "\n", "column", "=", "0", "\n", "for", "click_model", "in", "click_models", ":", "\n", "        ", "axs", "[", "row", ",", "column", "]", ".", "set_title", "(", "click_model", ")", "\n", "\n", "for", "f", "in", "folds", ":", "\n", "\n", "            ", "for", "r", "in", "runs", ":", "\n", "                ", "with", "open", "(", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "path", ",", "f", ",", "click_model", ",", "r", ")", ",", "\n", "\"rb\"", ")", "as", "fp", ":", "\n", "                    ", "data", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "\n", "", "axs", "[", "row", ",", "column", "]", ".", "plot", "(", "range", "(", "num_interactions", ")", ",", "[", "sum", "(", "group", ")", "/", "8000", "for", "group", "in", "zip", "(", "*", "[", "iter", "(", "data", ")", "]", "*", "8000", ")", "]", ",", "color", "=", "COLORS", "[", "color", "]", ")", "\n", "# if click_model == 'informational':", "\n", "#     axs[row, column].set_ylim([0.70, 0.76])", "\n", "# elif click_model == 'navigational':", "\n", "#     axs[row, column].set_ylim([0.43, 0.52])", "\n", "# else:", "\n", "#     axs[row, column].set_ylim([0.4, 0.47])", "\n", "", "column", "+=", "1", "\n", "", "row", "+=", "1", "\n", "column", "=", "0", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "# path1 = \"../results/PDGD/mq2007\"", "\n", "    ", "path1", "=", "\"../results/exploration/PDGD/istella/random\"", "\n", "path2", "=", "\"../results/exploration/PDGD/istella/original\"", "\n", "# path2 = \"../results/reduction/mq2007/PDGD\"", "\n", "folds", "=", "list", "(", "range", "(", "1", ",", "2", ")", ")", "\n", "runs", "=", "list", "(", "range", "(", "1", ",", "2", ")", ")", "\n", "click_models", "=", "[", "\"navigational\"", ",", "'informational'", ",", "\"perfect\"", "]", "\n", "# parameters = [0.03, 0.05, 0.08, 0.1, 0.5, 1.0, 5.0]", "\n", "parameters", "=", "[", "0.1", "]", "\n", "num_interactions", "=", "1000", "\n", "\n", "# plot(path1, parameters, folds, runs, 'informational', num_interactions, 1)", "\n", "plot", "(", "path1", ",", "parameters", ",", "folds", ",", "runs", ",", "'perfect'", ",", "num_interactions", ",", "2", ")", "\n", "plot", "(", "path2", ",", "parameters", ",", "folds", ",", "runs", ",", "'perfect'", ",", "num_interactions", ",", "1", ")", "\n", "# plot_mrr(path1, folds, runs, click_models, num_interactions, 2)", "\n", "plt", ".", "ylabel", "(", "'NDCG'", ")", "\n", "plt", ".", "xlabel", "(", "'EPOCH'", ")", "\n", "\n", "# plt.legend(click_models, loc='lower right')", "\n", "plt", ".", "show", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_PDGD.run": [[14, 42], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "ranker.update_to_clicks", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "ranker.get_current_weights", "train_set.get_all_features_by_query", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "num_interation", ",", "click_model", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "result_list", ",", "scores", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "ranker", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores", ",", "train_set", ".", "get_all_features_by_query", "(", "qid", ")", ")", "\n", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "# print(ndcg)", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "final_weight", "=", "ranker", ".", "get_current_weights", "(", ")", "\n", "num_iter", "+=", "1", "\n", "\n", "# print(num_iter, ndcg)", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_PDGD.job": [[44, 85], ["clickModel.PBM.PBM", "range", "ranker.PDGDLinearRanker.PDGDLinearRanker", "print", "run_PDGD.run", "os.makedirs", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ",", "tau", ",", "output_fold", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.2", ",", "0.4", ",", "0.8", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "# if model_type == \"perfect\":", "\n", "#     pc = [0.0, 0.5, 1.0]", "\n", "#     ps = [0.0, 0.0, 0.0]", "\n", "# elif model_type == \"navigational\":", "\n", "#     pc = [0.05, 0.5, 0.95]", "\n", "#     ps = [0.2, 0.5, 0.9]", "\n", "# elif model_type == \"informational\":", "\n", "#     pc = [0.4, 0.7, 0.9]", "\n", "#     ps = [0.1, 0.3, 0.5]", "\n", "", "cm", "=", "PBM", "(", "pc", ",", "1", ")", "\n", "\n", "for", "r", "in", "range", "(", "16", ",", "26", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "tau", ")", "\n", "print", "(", "\"PDGD tau{} fold{} {} run{} start!\"", ".", "format", "(", "tau", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"../results/exploration/mq2007/PDGD/fold{}/{}_tau{}_run{}_final_weight.txt\"", ".", "format", "(", "f", ",", "model_type", ",", "tau", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "final_weight", ",", "fp", ")", "\n", "", "print", "(", "\"PDGD tau{} fold{} {} run{} finished!\"", ".", "format", "(", "tau", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_AC_mslr10k.run": [[16, 62], ["train_set.get_all_querys", "numpy.random.randint", "ranker.sess.close", "ranker.get_query_result_list", "click_model.simulate", "numpy.power", "utils.utility.get_DCG_rewards", "ranker.update_actor_critic", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "len", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "numpy.divide", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_DCG_rewards", "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorNoiseCriticLinearRanker.ActorNoiseCriticLinearRanker.update_actor_critic", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "reward_method", ",", "num_interation", ",", "click_model", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "clicked_doces", ",", "click_labels", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "if", "len", "(", "clicked_doces", ")", "==", "0", ":", "\n", "            ", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "num_iter", "+=", "1", "\n", "continue", "\n", "\n", "", "propensities", "=", "np", ".", "power", "(", "np", ".", "divide", "(", "1", ",", "np", ".", "arange", "(", "1.0", ",", "len", "(", "click_labels", ")", "+", "1", ")", ")", ",", "eta", ")", "\n", "\n", "\n", "# directly using pointwise rewards", "\n", "rewards", "=", "get_DCG_rewards", "(", "click_labels", ",", "propensities", ",", "reward_method", ")", "\n", "\n", "# using listwise rewards", "\n", "# rewards = get_DCG_MDPrewards(click_labels, propensities, reward_method, gamma=1)", "\n", "\n", "# ranker.record_episode(qid, result_list, rewards)", "\n", "\n", "ranker", ".", "update_actor_critic", "(", "qid", ",", "result_list", ",", "rewards", ",", "train_set", ")", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "\n", "# print(num_iter)", "\n", "num_iter", "+=", "1", "\n", "", "ranker", ".", "sess", ".", "close", "(", ")", "\n", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_AC_mslr10k.job": [[64, 91], ["clickModel.PBM.PBM", "range", "ranker.ActorNoiseCriticLinearRanker.ActorNoiseCriticLinearRanker", "print", "run_AC_mslr10k.run", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "learning_rate", ",", "eta", ",", "reward_method", ",", "f", ",", "train_set", ",", "test_set", ",", "num_features", ",", "output_fold", ")", ":", "\n", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.2", ",", "0.4", ",", "0.8", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "", "cm", "=", "PBM", "(", "pc", ",", "1", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "16", ")", ":", "\n", "# np.random.seed(r)", "\n", "\n", "        ", "ranker", "=", "ActorNoiseCriticLinearRanker", "(", "num_features", ",", "learning_rate", ",", "256", ")", "\n", "print", "(", "\"ActorCritic MSLR10K fold{} {} eta{} reward {} run{} start!\"", ".", "format", "(", "f", ",", "model_type", ",", "eta", ",", "reward_method", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "reward_method", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_MDPRank.run": [[16, 44], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "utils.utility.get_real_DCGs", "ranker.update_policy", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "print"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_real_DCGs", "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRankerV2.MDPRankerV2.update_policy", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "num_interation", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "DCGs", "=", "get_real_DCGs", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "# ranker.record_episode(qid, result_list, rewards)", "\n", "\n", "ranker", ".", "update_policy", "(", "qid", ",", "result_list", ",", "DCGs", ",", "train_set", ")", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "print", "(", "num_iter", ",", "ndcg", ")", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "\n", "# all_result = ranker.get_all_query_result_list(test_set)", "\n", "# ndcg = evl_tool.average_ndcg_at_k(test_set, all_result, 10)", "\n", "\n", "num_iter", "+=", "1", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_MDPRank.job": [[46, 66], ["range", "ranker.MDPRankerV2.MDPRankerV2", "print", "run_MDPRank.run", "os.makedirs", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "learning_rate", ",", "f", ",", "train_set", ",", "test_set", ",", "num_features", ",", "output_fold", ")", ":", "\n", "\n", "\n", "    ", "for", "r", "in", "range", "(", "1", ",", "2", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "MDPRankerV2", "(", "256", ",", "num_features", ",", "learning_rate", ")", "\n", "print", "(", "\"MDP fold{} run{} start!\"", ".", "format", "(", "f", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "\"MDPRank\"", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "\"MDPRank\"", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "print", "(", "\"MDP fold{} run{} done!\"", ".", "format", "(", "f", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_ROLTR_get_variance.run": [[16, 39], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "numpy.power", "utils.utility.get_DCG_MDPrewards", "ranker.update_policy", "vars.append", "len", "vars.append", "numpy.divide", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_DCG_MDPrewards", "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRankerV2.MDPRankerV2.update_policy"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "gamma", ",", "reward_method", ",", "num_interation", ",", "click_model", ")", ":", "\n", "    ", "vars", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "clicked_doces", ",", "click_labels", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "# if no click data, skip this session", "\n", "if", "len", "(", "clicked_doces", ")", "==", "0", ":", "\n", "            ", "vars", ".", "append", "(", "0", ")", "\n", "continue", "\n", "\n", "", "propensities", "=", "np", ".", "power", "(", "np", ".", "divide", "(", "1", ",", "np", ".", "arange", "(", "1.0", ",", "len", "(", "click_labels", ")", "+", "1", ")", ")", ",", "eta", ")", "\n", "\n", "rewards", "=", "get_DCG_MDPrewards", "(", "click_labels", ",", "propensities", ",", "reward_method", ",", "gamma", "=", "gamma", ")", "\n", "\n", "gradient_var", "=", "ranker", ".", "update_policy", "(", "qid", ",", "result_list", ",", "rewards", ",", "train_set", ")", "\n", "vars", ".", "append", "(", "gradient_var", ")", "\n", "\n", "", "return", "vars", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_ROLTR_get_variance.job": [[41, 77], ["clickModel.PBM.PBM", "range", "ranker.MDPRankerV2.MDPRankerV2", "print", "run_ROLTR_get_variance.run", "os.makedirs", "print", "os.path.dirname", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "learning_rate", ",", "eta", ",", "gamma", ",", "reward_method", ",", "f", ",", "train_set", ",", "test_set", ",", "num_features", ",", "output_fold", ")", ":", "\n", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.2", ",", "0.4", ",", "0.8", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "# #", "\n", "# if model_type == \"perfect\":", "\n", "#     pc = [0.0, 0.5, 1.0]", "\n", "#     ps = [0.0, 0.0, 0.0]", "\n", "# elif model_type == \"navigational\":", "\n", "#     pc = [0.05, 0.5, 0.95]", "\n", "#     ps = [0.2, 0.5, 0.9]", "\n", "# elif model_type == \"informational\":", "\n", "#     pc = [0.4, 0.7, 0.9]", "\n", "#     ps = [0.1, 0.3, 0.5]", "\n", "", "cm", "=", "PBM", "(", "pc", ",", "1", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "16", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "MDPRankerV2", "(", "256", ",", "num_features", ",", "learning_rate", ")", "\n", "print", "(", "\"MDP Adam MSLR10K fold{} {} eta{} reward {} run{} start!\"", ".", "format", "(", "f", ",", "model_type", ",", "eta", ",", "reward_method", ",", "r", ")", ")", "\n", "vars", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "gamma", ",", "reward_method", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "vars", ",", "fp", ")", "\n", "\n", "", "print", "(", "\"MDP MSLR10K fold{} {} eta{} reward{} run{} done!\"", ".", "format", "(", "f", ",", "model_type", ",", "eta", ",", "reward_method", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_ROLTR_one_at_time.run": [[17, 66], ["train_set.get_all_querys", "numpy.random.randint", "range", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "ranker.get_query_result_list", "click_model.simulate_with_position", "ranker.update_policy", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "len", "len", "numpy.log2", "displayed_docids.append", "candidate_docids.append"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.PBM.PBM.simulate_with_position", "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRankerV2.MDPRankerV2.update_policy", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "gamma", ",", "reward_method", ",", "num_interation", ",", "click_model", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "displayed_docids", "=", "[", "]", "\n", "for", "rank", "in", "range", "(", "10", ")", ":", "\n", "            ", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "\n", "if", "len", "(", "displayed_docids", ")", "==", "len", "(", "result_list", ")", ":", "\n", "                ", "break", "\n", "\n", "", "for", "docid", "in", "result_list", ":", "\n", "                ", "if", "docid", "not", "in", "displayed_docids", ":", "\n", "                    ", "displayed_docids", ".", "append", "(", "docid", ")", "\n", "break", "\n", "\n", "", "", "candidate_docids", "=", "[", "]", "\n", "for", "id", "in", "result_list", ":", "\n", "                ", "if", "id", "==", "docid", "or", "id", "not", "in", "displayed_docids", ":", "\n", "                    ", "candidate_docids", ".", "append", "(", "id", ")", "\n", "\n", "", "", "click_label", ",", "propensity", "=", "click_model", ".", "simulate_with_position", "(", "qid", ",", "docid", ",", "train_set", ",", "rank", ")", "\n", "\n", "dcg", "=", "1", "/", "np", ".", "log2", "(", "rank", "+", "2.0", ")", "\n", "neg_reward", "=", "dcg", "*", "(", "click_label", "-", "1", ")", "+", "(", "(", "1", "-", "propensity", ")", "/", "propensity", ")", "*", "dcg", "*", "click_label", "\n", "pos_reward", "=", "dcg", "/", "propensity", "*", "click_label", "\n", "reward", "=", "pos_reward", "+", "neg_reward", "\n", "#", "\n", "ranker", ".", "update_policy", "(", "qid", ",", "candidate_docids", ",", "[", "reward", "]", ",", "train_set", ")", "\n", "\n", "", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "# print(num_iter, ndcg)", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "displayed_docids", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "\n", "# all_result = ranker.get_all_query_result_list(test_set)", "\n", "# ndcg = evl_tool.average_ndcg_at_k(test_set, all_result, 10)", "\n", "# print(num_iter, ndcg)", "\n", "num_iter", "+=", "1", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_ROLTR_one_at_time.job": [[68, 108], ["clickModel.PBM.PBM", "range", "ranker.MDPRankerV2.MDPRankerV2", "print", "run_ROLTR_one_at_time.run", "os.makedirs", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "learning_rate", ",", "eta", ",", "gamma", ",", "reward_method", ",", "f", ",", "train_set", ",", "test_set", ",", "num_features", ",", "output_fold", ")", ":", "\n", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.2", ",", "0.4", ",", "0.8", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "# #", "\n", "# if model_type == \"perfect\":", "\n", "#     pc = [0.0, 0.5, 1.0]", "\n", "#     ps = [0.0, 0.0, 0.0]", "\n", "# elif model_type == \"navigational\":", "\n", "#     pc = [0.05, 0.5, 0.95]", "\n", "#     ps = [0.2, 0.5, 0.9]", "\n", "# elif model_type == \"informational\":", "\n", "#     pc = [0.4, 0.7, 0.9]", "\n", "#     ps = [0.1, 0.3, 0.5]", "\n", "", "cm", "=", "PBM", "(", "pc", ",", "1", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "16", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "MDPRankerV2", "(", "256", ",", "num_features", ",", "learning_rate", ",", "Lenepisode", "=", "1", ")", "\n", "print", "(", "\"MDP Adam MSLR10K fold{} {} eta{} reward {} run{} start!\"", ".", "format", "(", "f", ",", "model_type", ",", "eta", ",", "reward_method", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "gamma", ",", "reward_method", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "print", "(", "\"MDP MSLR10K fold{} {} eta{} reward{} run{} done!\"", ".", "format", "(", "f", ",", "model_type", ",", "eta", ",", "reward_method", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_PMGD.run": [[14, 56], ["train_set.get_all_querys", "numpy.random.randint", "train_set.get_all_features_by_query", "rankers.append", "range", "ranker.probabilistic_multileave", "click_model.simulate", "ranker.probabilistic_multileave_outcome", "numpy.where", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "ranker.get_new_candidate", "rankers.append", "us.append", "numpy.zeros", "ranker.update_weights", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "numpy.array", "numpy.shape", "ranker.get_current_weights", "numpy.shape"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.probabilistic_multileave", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.probabilistic_multileave_outcome", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.get_new_candidate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.update_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "num_rankers", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "query_features", "=", "train_set", ".", "get_all_features_by_query", "(", "qid", ")", "\n", "rankers", "=", "[", "]", "\n", "us", "=", "[", "]", "\n", "rankers", ".", "append", "(", "ranker", ")", "\n", "for", "i", "in", "range", "(", "num_rankers", ")", ":", "\n", "            ", "new_ranker", ",", "new_u", "=", "ranker", ".", "get_new_candidate", "(", ")", "\n", "rankers", ".", "append", "(", "new_ranker", ")", "\n", "us", ".", "append", "(", "new_u", ")", "\n", "\n", "", "(", "inter_list", ",", "a", ")", "=", "ranker", ".", "probabilistic_multileave", "(", "rankers", ",", "query_features", ",", "10", ")", "\n", "\n", "_", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "inter_list", ",", "train_set", ")", "\n", "\n", "outcome", "=", "ranker", ".", "probabilistic_multileave_outcome", "(", "inter_list", ",", "rankers", ",", "click_label", ",", "query_features", ")", "\n", "winners", "=", "np", ".", "where", "(", "np", ".", "array", "(", "outcome", ")", ">", "outcome", "[", "0", "]", ")", "\n", "\n", "if", "np", ".", "shape", "(", "winners", ")", "[", "1", "]", "!=", "0", ":", "\n", "            ", "u", "=", "np", ".", "zeros", "(", "ranker", ".", "feature_size", ")", "\n", "for", "winner", "in", "winners", "[", "0", "]", ":", "\n", "                ", "u", "+=", "us", "[", "winner", "-", "1", "]", "\n", "", "u", "=", "u", "/", "np", ".", "shape", "(", "winners", ")", "[", "1", "]", "\n", "ranker", ".", "update_weights", "(", "u", ",", "alpha", "=", "ranker", ".", "learning_rate", ")", "\n", "\n", "", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ",", "ranker", ".", "get_current_weights", "(", ")", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "inter_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "num_iter", "+=", "1", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_PMGD.job": [[58, 96], ["clickModel.PBM.PBM", "range", "ranker.ProbabilisticRanker.ProbabilisticRanker", "print", "run_PMGD.run", "os.makedirs", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ",", "delta", ",", "alpha", ",", "FEATURE_SIZE", ",", "num_rankers", ",", "output_fold", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.2", ",", "0.4", ",", "0.8", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "#", "\n", "# if model_type == \"perfect\":", "\n", "#     pc = [0.0, 0.5, 1.0]", "\n", "#     ps = [0.0, 0.0, 0.0]", "\n", "# elif model_type == \"navigational\":", "\n", "#     pc = [0.05, 0.5, 0.95]", "\n", "#     ps = [0.2, 0.5, 0.9]", "\n", "# elif model_type == \"informational\":", "\n", "#     pc = [0.4, 0.7, 0.9]", "\n", "#     ps = [0.1, 0.3, 0.5]", "\n", "", "cm", "=", "PBM", "(", "pc", ",", "1", ")", "\n", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "ProbabilisticRanker", "(", "delta", ",", "alpha", ",", "FEATURE_SIZE", ")", "\n", "print", "(", "\"DBGD fold{} run{} start!\"", ".", "format", "(", "f", ",", "model_type", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "num_rankers", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.cndcg_plot.smooth": [[9, 18], ["numpy.linspace", "numpy.linspace", "scipy.interpolate.make_lsq_spline", "scipy.interpolate.make_lsq_spline."], "function", ["None"], ["    ", "color_index", "=", "0", "\n", "for", "p", "in", "parameters", ":", "\n", "        ", "result", "=", "np", ".", "zeros", "(", "num_interactions", ")", "\n", "for", "f", "in", "folds", ":", "\n", "            ", "for", "r", "in", "runs", ":", "\n", "                ", "with", "open", "(", "\"{}/fold{}/{}_tau{}_run{}_cndcg.txt\"", ".", "format", "(", "path", ",", "f", ",", "click_model", ",", "p", ",", "r", ")", ",", "\n", "\"rb\"", ")", "as", "fp", ":", "\n", "                    ", "data", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "data", "=", "np", ".", "array", "(", "data", "[", ":", "num_interactions", "]", ")", "\n", "result", "=", "np", ".", "vstack", "(", "(", "result", ",", "data", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.cndcg_plot.plot": [[19, 57], ["numpy.zeros", "numpy.cumsum", "numpy.mean", "scipy.stats.sem", "numpy.subtract", "numpy.add", "matplotlib.plot", "matplotlib.fill_between", "print", "matplotlib.figure", "scipy.stats.t.ppf", "range", "cndcg_plot.smooth", "range", "cndcg_plot.smooth", "cndcg_plot.smooth", "range", "cndcgs.append", "numpy.mean", "open", "pickle.load", "numpy.array", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot", "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.cndcg_plot.smooth", "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.cndcg_plot.smooth", "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.cndcg_plot.smooth"], ["", "", "", "result", "=", "result", "[", "1", ":", "]", ".", "T", "\n", "result_mean", "=", "np", ".", "mean", "(", "result", ",", "axis", "=", "1", ")", "\n", "result_std_err", "=", "sem", "(", "result", ",", "axis", "=", "1", ")", "\n", "result_h", "=", "result_std_err", "*", "t", ".", "ppf", "(", "(", "1", "+", "0.95", ")", "/", "2", ",", "25", "-", "1", ")", "\n", "result_low", "=", "np", ".", "subtract", "(", "result_mean", ",", "result_h", ")", "\n", "result_high", "=", "np", ".", "add", "(", "result_mean", ",", "result_h", ")", "\n", "\n", "plt", ".", "plot", "(", "range", "(", "num_interactions", ")", ",", "result_mean", ",", "color", "=", "COLORS", "[", "color", "]", ",", "alpha", "=", "1", ")", "\n", "# plt.fill_between(range(num_interactions), result_low, result_high, color='black', alpha=0.2)", "\n", "color_index", "+=", "1", "\n", "cndcg", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "result_mean", ")", "+", "1", ")", ":", "\n", "            ", "cndcg", "+=", "0.9995", "**", "i", "*", "result_mean", "[", "i", "-", "1", "]", "\n", "", "print", "(", "p", ",", "cndcg", ")", "\n", "\n", "", "plt", ".", "figure", "(", "1", ")", "\n", "\n", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "path1", "=", "\"../results/COLTR/mq2007\"", "\n", "# path2 = \"../results/reduction/mq2007/PDGD\"", "\n", "folds", "=", "list", "(", "range", "(", "1", ",", "6", ")", ")", "\n", "runs", "=", "list", "(", "range", "(", "1", ",", "26", ")", ")", "\n", "click_models", "=", "[", "'navigational'", "]", "\n", "# parameters = [0.03, 0.05, 0.08, 0.1, 0.5, 1.0, 5.0]", "\n", "parameters", "=", "[", "0.1", "]", "\n", "num_interactions", "=", "10000", "\n", "\n", "plot", "(", "path1", ",", "parameters", ",", "folds", ",", "runs", ",", "'perfect'", ",", "num_interactions", ",", "1", ")", "\n", "# plot(path2, parameters, folds, runs, 'informational', num_interactions, 2)", "\n", "plt", ".", "ylabel", "(", "'NDCG'", ")", "\n", "plt", ".", "xlabel", "(", "'EPOCH'", ")", "\n", "plt", ".", "legend", "(", "parameters", ",", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "show", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_AC_mq2007.run": [[16, 61], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "numpy.power", "utils.utility.get_DCG_rewards", "ranker.update_actor_critic", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "print", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "len", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "numpy.divide", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "numpy.arange", "len"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_DCG_rewards", "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorNoiseCriticLinearRanker.ActorNoiseCriticLinearRanker.update_actor_critic", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "reward_method", ",", "num_interation", ",", "click_model", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "clicked_doces", ",", "click_labels", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "if", "len", "(", "clicked_doces", ")", "==", "0", ":", "\n", "            ", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "num_iter", "+=", "1", "\n", "# print(num_iter, ndcg)", "\n", "continue", "\n", "\n", "", "propensities", "=", "np", ".", "power", "(", "np", ".", "divide", "(", "1", ",", "np", ".", "arange", "(", "1.0", ",", "len", "(", "result_list", ")", "+", "1", ")", ")", ",", "eta", ")", "\n", "\n", "# directly using pointwise rewards", "\n", "rewards", "=", "get_DCG_rewards", "(", "click_labels", ",", "propensities", ",", "reward_method", ")", "\n", "# using listwise rewards", "\n", "\n", "# rewards = get_DCG_MDPrewards(click_labels, propensities, reward_method, gamma=0.99)", "\n", "\n", "# ranker.record_episode(qid, result_list, rewards)", "\n", "\n", "ranker", ".", "update_actor_critic", "(", "qid", ",", "result_list", ",", "rewards", ",", "train_set", ")", "\n", "\n", "# if num_iter % 1000 == 0:", "\n", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "print", "(", "num_iter", ",", "ndcg", ")", "\n", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "\n", "num_iter", "+=", "1", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_AC_mq2007.job": [[63, 81], ["clickModel.PBM.PBM", "range", "ranker.ActorCriticLinearRankerV2.ActorCriticLinearRankerV2", "print", "run_AC_mq2007.run"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "learning_rate", ",", "eta", ",", "reward_method", ",", "f", ",", "train_set", ",", "test_set", ",", "num_features", ",", "output_fold", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.5", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.5", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.5", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.7", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.3", ",", "0.5", "]", "\n", "\n", "", "cm", "=", "PBM", "(", "pc", ",", "1", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "16", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "ActorCriticLinearRankerV2", "(", "num_features", ",", "learning_rate", ",", "256", ")", "\n", "print", "(", "\"ActorCritic mq2007 fold{} {} eta{} reward{} run{} start!\"", ".", "format", "(", "f", ",", "model_type", ",", "eta", ",", "reward_method", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "reward_method", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "# with open(", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_MDP_Adam_mslr10k.run": [[16, 64], ["train_set.get_all_querys", "numpy.random.randint", "numpy.power", "numpy.divide", "ranker.get_query_result_list", "click_model.simulate", "utils.utility.get_DCG_MDPrewards", "ranker.update_policy", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "numpy.arange", "len", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "numpy.where", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_DCG_MDPrewards", "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRankerV2.MDPRankerV2.update_policy", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "gamma", ",", "reward_method", ",", "num_interation", ",", "click_model", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "\n", "propensities", "=", "np", ".", "power", "(", "np", ".", "divide", "(", "1", ",", "np", ".", "arange", "(", "1.0", ",", "10", "+", "1", ")", ")", ",", "eta", ")", "\n", "propensities", "[", "np", ".", "where", "(", "propensities", "<", "0.05", ")", "[", "0", "]", "]", "=", "0.1", "# propensity clipping", "\n", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "clicked_doces", ",", "click_labels", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "if", "len", "(", "clicked_doces", ")", "==", "0", ":", "\n", "            ", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "num_iter", "+=", "1", "\n", "continue", "\n", "\n", "\n", "\n", "# directly using pointwise rewards", "\n", "# rewards = get_DCG_rewards(click_labels, propensities, reward_method)", "\n", "\n", "# using listwise rewards", "\n", "", "rewards", "=", "get_DCG_MDPrewards", "(", "click_labels", ",", "propensities", ",", "reward_method", ",", "gamma", "=", "gamma", ")", "\n", "\n", "# ranker.record_episode(qid, result_list, rewards)", "\n", "\n", "ranker", ".", "update_policy", "(", "qid", ",", "result_list", ",", "rewards", ",", "train_set", ")", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "\n", "# print(num_iter)", "\n", "num_iter", "+=", "1", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ROLTR.run_MDP_Adam_mslr10k.job": [[66, 94], ["clickModel.PBM.PBM", "range", "ranker.MDPRankerV2.MDPRankerV2", "print", "run_MDP_Adam_mslr10k.run", "os.makedirs", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "learning_rate", ",", "eta", ",", "gamma", ",", "reward_method", ",", "f", ",", "train_set", ",", "test_set", ",", "num_features", ",", "output_fold", ")", ":", "\n", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.2", ",", "0.4", ",", "0.8", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "", "cm", "=", "PBM", "(", "pc", ",", "2", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "16", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "MDPRankerV2", "(", "256", ",", "num_features", ",", "learning_rate", ")", "\n", "print", "(", "\"MDP Adam MSLR10K fold{} {} eta{} reward {} run{} start!\"", ".", "format", "(", "f", ",", "model_type", ",", "eta", ",", "reward_method", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "eta", ",", "gamma", ",", "reward_method", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_CMAES.run": [[13, 67], ["train_set.get_all_querys", "numpy.random.randint", "cma.CMAEvolutionStrategy", "cma.CMAOptions", "cma.CMAOptions.set", "range", "numpy.zeros", "cma.CMAEvolutionStrategy.ask", "numpy.zeros", "cma.CMAEvolutionStrategy.tell", "numpy.argmax", "ranker.assign_weights", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "utils.evl_tool.query_ndcg_at_k", "ndcg_scores.append", "cndcg_scores.append", "ranker.get_current_weights", "print", "len", "ranker.get_query_result_list", "click_model.simulate", "record.append", "len", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "utils.evl_tool.query_ndcg_at_k", "ndcg_scores.append", "cndcg_scores.append", "ranker.fitness", "numpy.where", "ranker.get_current_weights"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.assign_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.CMAESLinearRanker.CMAESLinearRanker.fitness", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "num_rankers", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "es", "=", "cma", ".", "CMAEvolutionStrategy", "(", "np", ".", "zeros", "(", "(", "FEATURE_SIZE", ",", ")", ")", ",", "3", ")", "\n", "opt", "=", "cma", ".", "CMAOptions", "(", ")", "\n", "opt", ".", "set", "(", "'CSA_dampfac'", ",", "0.3", ")", "\n", "#es.sp.popsize = 500", "\n", "record", "=", "[", "]", "\n", "batch_size", "=", "10", "\n", "for", "j", "in", "range", "(", "0", ",", "num_interation", "//", "batch_size", ")", ":", "\n", "        ", "canditate_rankers", "=", "es", ".", "ask", "(", ")", "\n", "fitness", "=", "np", ".", "zeros", "(", "(", "len", "(", "canditate_rankers", ",", ")", ")", ")", "\n", "for", "i", "in", "index", "[", "j", "*", "batch_size", ":", "j", "*", "batch_size", "+", "batch_size", "]", ":", "\n", "            ", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "# if no clicks, skip.", "\n", "if", "len", "(", "clicked_doc", ")", "==", "0", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "continue", "\n", "\n", "# flip click label. exp: [1,0,1,0,0] -> [0,1,0,0,0]", "\n", "", "last_click", "=", "np", ".", "where", "(", "click_label", "==", "1", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "click_label", "[", ":", "last_click", "+", "1", "]", "=", "1", "-", "click_label", "[", ":", "last_click", "+", "1", "]", "\n", "\n", "# bandit record", "\n", "record", ".", "append", "(", "(", "qid", ",", "result_list", ",", "click_label", ",", "ranker", ".", "get_current_weights", "(", ")", ")", ")", "\n", "fitness", "+=", "ranker", ".", "fitness", "(", "canditate_rankers", ",", "record", ",", "train_set", ")", "[", "1", ":", "]", "\n", "\n", "", "es", ".", "tell", "(", "canditate_rankers", ",", "fitness", "/", "10", ")", "\n", "\n", "best", "=", "np", ".", "argmax", "(", "fitness", "[", "1", ":", "]", ")", "\n", "ranker", ".", "assign_weights", "(", "canditate_rankers", "[", "best", "]", ")", "\n", "\n", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "final_weight", "=", "ranker", ".", "get_current_weights", "(", ")", "\n", "print", "(", "ndcg", ",", "cndcg", ")", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_CMAES.job": [[69, 100], ["clickModel.SDBN.SDBN", "range", "ranker.CMAESLinearRanker.CMAESLinearRanker", "print", "run_CMAES.run", "print", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ",", "tau", ",", "step_size", ",", "gamma", ",", "num_rankers", ",", "learning_rate_decay", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.5", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.5", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.5", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.7", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.3", ",", "0.5", "]", "\n", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "CMAESLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "step_size", ",", "tau", ",", "gamma", ",", "learning_rate_decay", "=", "learning_rate_decay", ")", "\n", "print", "(", "\"COTLR start!\"", ")", "\n", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "num_rankers", ")", "\n", "with", "open", "(", "\n", "\"../results/COLTR/mq2007/fold{}/{}_tau{}_run{}_ndcg.txt\"", ".", "format", "(", "f", ",", "model_type", ",", "tau", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"../results/COLTR/mq2007/fold{}/{}_tau{}_run{}_cndcg.txt\"", ".", "format", "(", "f", ",", "model_type", ",", "tau", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"../results/COLTR/mq2007/fold{}/{}_tau{}_run{}_final_weight.txt\"", ".", "format", "(", "f", ",", "model_type", ",", "tau", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "final_weight", ",", "fp", ")", "\n", "", "print", "(", "\"COTLR tau{} fold{} {} run{} finished!\"", ".", "format", "(", "tau", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_NOLTR.run": [[12, 38], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "utils.evl_tool.query_ndcg_at_k", "ndcg_scores.append", "cndcg_scores.append", "ranker.get_current_weights", "print", "len", "ranker.update", "train_set.get_all_features_by_query"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.update", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "num_interation", ",", "click_model", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_interation", "=", "0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "num_interation", "+=", "1", "\n", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "result_list", ",", "scores", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "if", "len", "(", "clicked_doc", ")", ">", "0", ":", "\n", "            ", "ranker", ".", "update", "(", "click_label", ",", "result_list", ",", "train_set", ".", "get_all_features_by_query", "(", "qid", ")", ")", "\n", "\n", "", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "final_weight", "=", "ranker", ".", "get_current_weights", "(", ")", "\n", "print", "(", "num_interation", ",", "ndcg", ",", "cndcg", ")", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_NOLTR.job": [[40, 59], ["clickModel.SDBN.CascadeClickModel", "range", "ranker.NeuralRanker.NeuralRanker", "run_NOLTR.run"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.5", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.5", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.5", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.7", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.3", ",", "0.5", "]", "\n", "\n", "", "output_fold", "=", "\"mq2007\"", "\n", "cm", "=", "CascadeClickModel", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "NeuralRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ")", "\n", "# print(\"PDGD tau{} fold{} {} run{} start!\".format(f, model_type, r))", "\n", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "# with open(", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_ES.run": [[12, 73], ["train_set.get_all_querys", "numpy.random.randint", "range", "numpy.zeros", "ranker.sample_random_vectors", "ranker.sample_canditate_rankers", "ranker.update", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.extend", "ranker.get_current_weights", "print", "ranker.get_query_result_list", "click_model.simulate", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "record.append", "ranker.get_SNIPS", "numpy.std", "numpy.dot", "len", "numpy.mean", "numpy.where", "ranker.get_current_weights"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.sample_random_vectors", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.sample_canditate_rankers", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.update", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.get_SNIPS", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "num_rankers", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "\n", "batch_size", "=", "1", "\n", "iterated", "=", "0", "\n", "record", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "num_interation", "//", "batch_size", ")", ":", "\n", "        ", "R", "=", "np", ".", "zeros", "(", "(", "num_rankers", "+", "1", ",", ")", ")", "\n", "unit_vectors", "=", "ranker", ".", "sample_random_vectors", "(", "num_rankers", ")", "\n", "canditate_rankers", "=", "ranker", ".", "sample_canditate_rankers", "(", "unit_vectors", ")", "\n", "for", "i", "in", "index", "[", "j", "*", "batch_size", ":", "j", "*", "batch_size", "+", "batch_size", "]", ":", "\n", "            ", "iterated", "+=", "1", "\n", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "\n", "# if no clicks, skip.", "\n", "if", "len", "(", "clicked_doc", ")", "==", "0", ":", "\n", "# all_result = ranker.get_all_query_result_list(test_set)", "\n", "# ndcg = evl_tool.average_ndcg_at_k(test_set, all_result, 10)", "\n", "# cndcg = evl_tool.query_ndcg_at_k(train_set, result_list, qid, 10)", "\n", "#", "\n", "# ndcg_scores.append(ndcg)", "\n", "# cndcg_scores.append(cndcg)", "\n", "                ", "continue", "\n", "\n", "# flip click label. exp: [1,0,1,0,0] -> [0,1,0,0,0]", "\n", "", "last_click", "=", "np", ".", "where", "(", "click_label", "==", "1", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "click_label", "[", ":", "last_click", "+", "1", "]", "=", "1", "-", "click_label", "[", ":", "last_click", "+", "1", "]", "\n", "\n", "# bandit record", "\n", "record", ".", "append", "(", "(", "qid", ",", "result_list", ",", "click_label", ",", "ranker", ".", "get_current_weights", "(", ")", ")", ")", "\n", "snips", "=", "ranker", ".", "get_SNIPS", "(", "canditate_rankers", ",", "record", ",", "train_set", ")", "\n", "\n", "if", "snips", "is", "not", "None", ":", "\n", "                ", "R", "+=", "snips", "\n", "\n", "", "", "R", "=", "R", "[", "1", ":", "]", "/", "batch_size", "\n", "A", "=", "(", "R", "-", "np", ".", "mean", "(", "R", ")", ")", "/", "np", ".", "std", "(", "R", ")", "\n", "gradient", "=", "np", ".", "dot", "(", "unit_vectors", ".", "T", ",", "A", ")", "/", "(", "num_rankers", "*", "sigma", ")", "\n", "ranker", ".", "update", "(", "gradient", ")", "\n", "\n", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "\n", "\n", "ndcg", "=", "[", "ndcg", "]", "*", "batch_size", "\n", "ndcg_scores", ".", "extend", "(", "ndcg", ")", "\n", "# print(len(ndcg_scores))", "\n", "final_weight", "=", "ranker", ".", "get_current_weights", "(", ")", "\n", "print", "(", "iterated", ",", "ndcg", ",", "cndcg", ")", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_ES.job": [[75, 116], ["clickModel.SDBN.SDBN", "range", "ranker.ESLinearRanker.ESLinearRanker", "print", "run_ES.run", "print", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ",", "tau", ",", "sigma", ",", "gamma", ",", "num_rankers", ",", "learning_rate_decay", ",", "output_fold", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.5", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.5", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.5", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.7", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.3", ",", "0.5", "]", "\n", "\n", "", "\"\"\"if model_type == \"perfect\":\n        pc = [0.0, 0.2, 0.4, 0.8, 1.0]\n        ps = [0.0, 0.0, 0.0, 0.0, 0.0]\n    elif model_type == \"navigational\":\n        pc = [0.05, 0.3, 0.5, 0.7, 0.95]\n        ps = [0.2, 0.3, 0.5, 0.7, 0.9]\n    elif model_type == \"informational\":\n        pc = [0.4, 0.6, 0.7, 0.8, 0.9]\n        ps = [0.1, 0.2, 0.3, 0.4, 0.5]\"\"\"", "\n", "\n", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "ESLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "sigma", ",", "tau", ",", "gamma", ",", "learning_rate_decay", "=", "learning_rate_decay", ")", "\n", "print", "(", "\"ES fold{} {} run{} start!\"", ".", "format", "(", "f", ",", "model_type", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "num_rankers", ")", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_sigma{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "sigma", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_sigma{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "sigma", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_sigma{}_run{}_final_weight.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "sigma", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "final_weight", ",", "fp", ")", "\n", "", "print", "(", "\"ES sigma{} fold{} {} run{} finished!\"", ".", "format", "(", "output_fold", ",", "sigma", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_PDGD_batch_update.run": [[15, 54], ["train_set.get_all_querys", "numpy.random.randint", "numpy.zeros", "tqdm.tqdm", "ranker.get_query_result_list", "click_model.simulate", "ranker.update_to_clicks", "utils.evl_tool.online_mrr_at_k", "utils.evl_tool.query_ndcg_at_k", "ranker.get_current_weights", "train_set.get_all_features_by_query", "cmrr_scores.append", "cndcg_scores.append", "ranker.update_to_gradients", "numpy.zeros", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.online_mrr_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_gradients", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "batch_size", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "cmrr_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "gradients", "=", "np", ".", "zeros", "(", "train_set", ".", "_feature_size", ")", "\n", "cmrr", "=", "0", "\n", "cndcg", "=", "0", "\n", "for", "i", "in", "tqdm", "(", "index", ")", ":", "\n", "        ", "num_iter", "+=", "1", "\n", "\n", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "result_list", ",", "scores", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "gradients", "+=", "ranker", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores", ",", "train_set", ".", "get_all_features_by_query", "(", "qid", ")", ",", "return_gradients", "=", "True", ")", "\n", "\n", "cmrr", "+=", "evl_tool", ".", "online_mrr_at_k", "(", "click_label", ",", "10", ")", "\n", "cndcg", "+=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "if", "num_iter", "%", "batch_size", "==", "0", ":", "\n", "            ", "cmrr_scores", ".", "append", "(", "cmrr", "/", "batch_size", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", "/", "batch_size", ")", "\n", "cmrr", "=", "0", "\n", "cndcg", "=", "0", "\n", "\n", "# gradients = gradients/batch_size", "\n", "ranker", ".", "update_to_gradients", "(", "gradients", ")", "\n", "gradients", "=", "np", ".", "zeros", "(", "train_set", ".", "_feature_size", ")", "\n", "\n", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "# print(ndcg)", "\n", "\n", "", "final_weights", "=", "ranker", ".", "get_current_weights", "(", ")", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", ",", "cmrr_scores", ",", "final_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_PDGD_batch_update.job": [[56, 83], ["clickModel.SDBN.SDBN", "range", "ranker.PDGDLinearRanker.PDGDLinearRanker", "print", "run_PDGD_batch_update.run", "os.makedirs", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ",", "output_fold", ",", "batch_size", ",", "pc", ",", "ps", ")", ":", "\n", "    ", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "2", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ")", "\n", "print", "(", "\"PDGD fold{} {} run{} start!\"", ".", "format", "(", "f", ",", "model_type", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", ",", "cmrr_scores", ",", "final_weights", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "batch_size", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cmrr.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cmrr_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_weights.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "final_weights", ",", "fp", ")", "\n", "", "print", "(", "\"PDGD fold{} {} run{} finished!\"", ".", "format", "(", "f", ",", "model_type", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_COLTR.run": [[14, 93], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "ranker.sample_unit_vectors", "ranker.sample_canditate_rankers", "ranker.infer_winners", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "utils.evl_tool.query_ndcg_at_k", "ndcg_scores.append", "cndcg_scores.append", "ranker.get_current_weights", "len", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "utils.evl_tool.query_ndcg_at_k", "ndcg_scores.append", "cndcg_scores.append", "ranker.get_current_weights", "numpy.vstack", "utils.utility.get_query_result_list", "utils.evl_tool.query_ndcg_at_k", "print", "ranker.update", "numpy.where", "ranker.get_current_weights", "utils.utility.get_query_result_list", "utils.evl_tool.query_ndcg_at_k", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.sample_unit_vectors", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.sample_canditate_rankers", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.infer_winners", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.update", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k"], ["\n", "\n", "def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "num_rankers", ")", ":", "\n", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "\n", "num_interation", "=", "0", "\n", "\n", "# correct = 0", "\n", "# wrong = 0", "\n", "for", "i", "in", "index", ":", "\n", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "# if no clicks, skip.", "\n", "if", "len", "(", "clicked_doc", ")", "==", "0", ":", "\n", "            ", "if", "num_interation", "%", "1000", "==", "0", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "num_interation", "+=", "1", "\n", "continue", "\n", "\n", "# flip click label. exp: [1,0,1,0,0] -> [0,1,0,0,0]", "\n", "", "last_click", "=", "np", ".", "where", "(", "click_label", "==", "1", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "click_label", "[", ":", "last_click", "+", "1", "]", "=", "1", "-", "click_label", "[", ":", "last_click", "+", "1", "]", "\n", "\n", "# propensities = np.power(np.divide(1, np.arange(1.0, len(click_label) + 1)), 1)", "\n", "#", "\n", "# # directly using pointwise rewards", "\n", "# rewards = get_DCG_rewards(click_label, propensities, \"both\")", "\n", "\n", "# bandit record", "\n", "record", "=", "(", "qid", ",", "result_list", ",", "click_label", ",", "ranker", ".", "get_current_weights", "(", ")", ")", "\n", "\n", "unit_vectors", "=", "ranker", ".", "sample_unit_vectors", "(", "num_rankers", ")", "\n", "canditate_rankers", "=", "ranker", ".", "sample_canditate_rankers", "(", "unit_vectors", ")", "# canditate_rankers are ranker weights, not ranker class", "\n", "\n", "winner_rankers", "=", "ranker", ".", "infer_winners", "(", "canditate_rankers", "[", ":", "num_rankers", "]", ",", "record", ")", "# winner_rankers are index of candidates rankers who win the evaluation", "\n", "\n", "#### This part of code is used to test correctness of counterfactual evaluation ####", "\n", "# if winner_rankers is not None:", "\n", "#     all_result = utility.get_query_result_list(ranker.get_current_weights(), train_set, qid)", "\n", "#     current_ndcg = evl_tool.query_ndcg_at_k(train_set, all_result, qid, 10)", "\n", "#     for weights in canditate_rankers[winner_rankers - 1]:", "\n", "#         canditate_all_result = utility.get_query_result_list(weights, train_set, qid)", "\n", "#         canditate_all_result_ndcg = evl_tool.query_ndcg_at_k(train_set, canditate_all_result, qid, 10)", "\n", "#", "\n", "#         if canditate_all_result_ndcg >= current_ndcg:", "\n", "#             correct += 1", "\n", "#         else:", "\n", "#             wrong += 1", "\n", "#     print(correct, wrong, correct / (correct + wrong))", "\n", "######################################################################################", "\n", "\n", "if", "winner_rankers", "is", "not", "None", ":", "\n", "            ", "gradient", "=", "np", ".", "sum", "(", "unit_vectors", "[", "winner_rankers", "-", "1", "]", ",", "axis", "=", "0", ")", "/", "winner_rankers", ".", "shape", "[", "0", "]", "\n", "ranker", ".", "update", "(", "gradient", ")", "\n", "\n", "", "if", "num_interation", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "final_weight", "=", "ranker", ".", "get_current_weights", "(", ")", "\n", "num_interation", "+=", "1", "\n", "\n", "# print(num_interation, ndcg)", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_COLTR.job": [[95, 140], ["clickModel.SDBN.SDBN", "range", "ranker.COLTRLinearRanker.COLTRLinearRanker", "print", "run_COLTR.run", "utils.utility.send_progress"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.send_progress"], ["", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n", "\n", "", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ",", "tau", ",", "step_size", ",", "gamma", ",", "num_rankers", ",", "learning_rate_decay", ",", "output_fold", ")", ":", "\n", "# if model_type == \"perfect\":", "\n", "#     pc = [0.0, 0.5, 1.0]", "\n", "#     ps = [0.0, 0.0, 0.0]", "\n", "# elif model_type == \"navigational\":", "\n", "#     pc = [0.05, 0.5, 0.95]", "\n", "#     ps = [0.2, 0.5, 0.9]", "\n", "# elif model_type == \"informational\":", "\n", "#     pc = [0.4, 0.7, 0.9]", "\n", "#     ps = [0.1, 0.3, 0.5]", "\n", "\n", "# click setting for 4-grade relevance label datasets.", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.2", ",", "0.4", ",", "0.8", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "\n", "# using PBM click model to simulate clicks.", "\n", "# cm = SDBN(pc, ps)", "\n", "", "cm", "=", "PBM", "(", "pc", ",", "1", ")", "\n", "for", "r", "in", "range", "(", "16", ",", "26", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "COLTRLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "step_size", ",", "tau", ",", "gamma", ",", "learning_rate_decay", "=", "learning_rate_decay", ")", "\n", "print", "(", "\"COTLR {} tau{} fold{} {} run{} start!\"", ".", "format", "(", "output_fold", ",", "tau", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "num_rankers", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist", "\n", "# store the results.", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_ECIR_COLTR.run": [[13, 83], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "ranker.sample_unit_vectors", "ranker.sample_canditate_rankers", "ranker.infer_winners", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "utils.evl_tool.query_ndcg_at_k", "ndcg_scores.append", "cndcg_scores.append", "ranker.get_current_weights", "print", "len", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "utils.evl_tool.query_ndcg_at_k", "ndcg_scores.append", "cndcg_scores.append", "ranker.get_current_weights", "ranker.update", "numpy.where", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.sample_unit_vectors", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.sample_canditate_rankers", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.infer_winners", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.update"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "num_rankers", ")", ":", "\n", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "\n", "num_interation", "=", "0", "\n", "\n", "# correct = 0", "\n", "# wrong = 0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "num_interation", "+=", "1", "\n", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "# if no clicks, skip.", "\n", "if", "len", "(", "clicked_doc", ")", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "continue", "\n", "\n", "# flip click label. exp: [1,0,1,0,0] -> [0,1,0,0,0]", "\n", "", "last_click", "=", "np", ".", "where", "(", "click_label", "==", "1", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "click_label", "[", ":", "last_click", "+", "1", "]", "=", "1", "-", "click_label", "[", ":", "last_click", "+", "1", "]", "\n", "\n", "# bandit record", "\n", "record", "=", "(", "qid", ",", "result_list", ",", "click_label", ",", "ranker", ".", "get_current_weights", "(", ")", ")", "\n", "\n", "unit_vectors", "=", "ranker", ".", "sample_unit_vectors", "(", "num_rankers", ")", "\n", "canditate_rankers", "=", "ranker", ".", "sample_canditate_rankers", "(", "unit_vectors", ")", "# canditate_rankers are ranker weights, not ranker class", "\n", "\n", "winner_rankers", "=", "ranker", ".", "infer_winners", "(", "canditate_rankers", "[", ":", "num_rankers", "]", ",", "record", ")", "# winner_rankers are index of candidates rankers who win the evaluation", "\n", "\n", "#### This part of code is used to test correctness of counterfactual evaluation ####", "\n", "# if winner_rankers is not None:", "\n", "#     all_result = utility.get_query_result_list(ranker.get_current_weights(), train_set, qid)", "\n", "#     current_ndcg = evl_tool.query_ndcg_at_k(train_set, all_result, qid, 10)", "\n", "#     for weights in canditate_rankers[winner_rankers - 1]:", "\n", "#         canditate_all_result = utility.get_query_result_list(weights, train_set, qid)", "\n", "#         canditate_all_result_ndcg = evl_tool.query_ndcg_at_k(train_set, canditate_all_result, qid, 10)", "\n", "#", "\n", "#         if canditate_all_result_ndcg >= current_ndcg:", "\n", "#             correct += 1", "\n", "#         else:", "\n", "#             wrong += 1", "\n", "#     print(correct, wrong, correct / (correct + wrong))", "\n", "######################################################################################", "\n", "\n", "if", "winner_rankers", "is", "not", "None", ":", "\n", "            ", "gradient", "=", "np", ".", "sum", "(", "unit_vectors", "[", "winner_rankers", "-", "1", "]", ",", "axis", "=", "0", ")", "/", "winner_rankers", ".", "shape", "[", "0", "]", "\n", "ranker", ".", "update", "(", "gradient", ")", "\n", "\n", "", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "final_weight", "=", "ranker", ".", "get_current_weights", "(", ")", "\n", "print", "(", "num_interation", ",", "ndcg", ")", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_ECIR_COLTR.job": [[85, 133], ["clickModel.SDBN.SDBN", "range", "ranker.COLTRLinearRanker.COLTRLinearRanker", "print", "run_ECIR_COLTR.run", "print", "utils.utility.send_progress", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.send_progress"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ",", "tau", ",", "step_size", ",", "gamma", ",", "num_rankers", ",", "learning_rate_decay", ",", "output_fold", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.5", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.5", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.5", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.7", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.3", ",", "0.5", "]", "\n", "\n", "# click setting for 4-grade relevance label datasets.", "\n", "# if model_type == \"perfect\":", "\n", "#     pc = [0.0, 0.2, 0.4, 0.8, 1.0]", "\n", "#     ps = [0.0, 0.0, 0.0, 0.0, 0.0]", "\n", "# elif model_type == \"navigational\":", "\n", "#     pc = [0.05, 0.3, 0.5, 0.7, 0.95]", "\n", "#     ps = [0.2, 0.3, 0.5, 0.7, 0.9]", "\n", "# elif model_type == \"informational\":", "\n", "#     pc = [0.4, 0.6, 0.7, 0.8, 0.9]", "\n", "#     ps = [0.1, 0.2, 0.3, 0.4, 0.5]", "\n", "\n", "# using SDBN click model to simulate clicks.", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "COLTRLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "step_size", ",", "tau", ",", "gamma", ",", "learning_rate_decay", "=", "learning_rate_decay", ")", "\n", "print", "(", "\"COTLR {} tau{} fold{} {} run{} start!\"", ".", "format", "(", "output_fold", ",", "tau", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "\n", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "num_rankers", ")", "\n", "\n", "# store the results.", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_tau{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "tau", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_tau{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "tau", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_tau{}_run{}_final_weight.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "tau", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "final_weight", ",", "fp", ")", "\n", "", "print", "(", "\"COTLR {} tau{} fold{} {} run{} finished!\"", ".", "format", "(", "output_fold", ",", "tau", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "\n", "utility", ".", "send_progress", "(", "\"@arvin {}\"", ".", "format", "(", "model_type", ")", ",", "r", ",", "25", ",", "\"final ndcg {}\"", ".", "format", "(", "ndcg_scores", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_LSH_multiranker.run": [[13, 38], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "ranker.update_to_clicks", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "utils.evl_tool.query_ndcg_at_k", "ndcg_scores.append", "cndcg_scores.append", "ranker.get_current_weights", "train_set.get_all_features_by_query"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "num_interation", ",", "click_model", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "result_list", ",", "scores", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "ranker", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores", ",", "train_set", ".", "get_all_features_by_query", "(", "qid", ")", ")", "\n", "\n", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "final_weight", "=", "ranker", ".", "get_current_weights", "(", ")", "\n", "# print(ndcg, cndcg)", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_LSH_multiranker.job": [[40, 72], ["clickModel.SDBN.CascadeClickModel", "range", "ranker.PDGDLinearRanker.PDGDLinearRanker", "print", "run_LSH_multiranker.run", "print", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ",", "tau", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.5", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.5", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.5", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.7", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.3", ",", "0.5", "]", "\n", "\n", "", "output_fold", "=", "\"mq2007\"", "\n", "cm", "=", "CascadeClickModel", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "tau", ")", "\n", "print", "(", "\"PDGD tau{} fold{} {} run{} start!\"", ".", "format", "(", "tau", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "with", "open", "(", "\n", "\"../results/exploration/mq2007/PDGD/fold{}/{}_tau{}_run{}_ndcg.txt\"", ".", "format", "(", "f", ",", "model_type", ",", "tau", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"../results/exploration/mq2007/PDGD/fold{}/{}_tau{}_run{}_cndcg.txt\"", ".", "format", "(", "f", ",", "model_type", ",", "tau", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"../results/exploration/mq2007/PDGD/fold{}/{}_tau{}_run{}_final_weight.txt\"", ".", "format", "(", "f", ",", "model_type", ",", "tau", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "final_weight", ",", "fp", ")", "\n", "", "print", "(", "\"PDGD tau{} fold{} {} run{} finished!\"", ".", "format", "(", "tau", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_PDGD.run": [[18, 44], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "ranker.update_to_clicks", "utils.evl_tool.online_mrr_at_k", "cndcg_scores.append", "ranker.get_current_weights", "train_set.get_all_features_by_query", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.online_mrr_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "result_list", ",", "scores", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "ranker", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores", ",", "train_set", ".", "get_all_features_by_query", "(", "qid", ")", ")", "\n", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "# print(ndcg)", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "final_weight", "=", "ranker", ".", "get_current_weights", "(", ")", "\n", "num_iter", "+=", "1", "\n", "\n", "# print(num_iter, ndcg)", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "\n", "\n", "\n", "", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ",", "tau", ",", "output_fold", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_PDGD.job": [[46, 90], ["clickModel.SDBN.SDBN", "range", "ranker.PDGDLinearRanker.PDGDLinearRanker", "print", "run_PDGD.run", "os.makedirs", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["        ", "pc", "=", "[", "0.0", ",", "0.2", ",", "0.4", ",", "0.8", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "# if model_type == \"perfect\":", "\n", "#     pc = [0.0, 0.5, 1.0]", "\n", "#     ps = [0.0, 0.0, 0.0]", "\n", "# elif model_type == \"navigational\":", "\n", "#     pc = [0.05, 0.5, 0.95]", "\n", "#     ps = [0.2, 0.5, 0.9]", "\n", "# elif model_type == \"informational\":", "\n", "#     pc = [0.4, 0.7, 0.9]", "\n", "#     ps = [0.1, 0.3, 0.5]", "\n", "", "cm", "=", "PBM", "(", "pc", ",", "1", ")", "\n", "\n", "for", "r", "in", "range", "(", "16", ",", "26", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "tau", ")", "\n", "print", "(", "\"PDGD tau{} fold{} {} run{} start!\"", ".", "format", "(", "tau", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"../results/exploration/mq2007/PDGD/fold{}/{}_tau{}_run{}_final_weight.txt\"", ".", "format", "(", "f", ",", "model_type", ",", "tau", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "final_weight", ",", "fp", ")", "\n", "", "print", "(", "\"PDGD tau{} fold{} {} run{} finished!\"", ".", "format", "(", "tau", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "\n", "    ", "FEATURE_SIZE", "=", "220", "\n", "NUM_INTERACTION", "=", "100000", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_PDGD_random_sample.run": [[19, 45], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "ranker.update_to_clicks", "utils.evl_tool.online_mrr_at_k", "cndcg_scores.append", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.online_mrr_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "num_interation", ",", "click_model", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "for", "i", "in", "index", ":", "\n", "        ", "num_iter", "+=", "1", "\n", "\n", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "result_list", ",", "scores", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ",", "random", "=", "True", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "# ranker.update_to_clicks(click_label, result_list, scores, train_set.get_all_features_by_query(qid))", "\n", "ranker", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores", ")", "\n", "if", "num_iter", "%", "1000", "==", "0", "or", "num_iter", "==", "1", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "# print(ndcg)", "\n", "", "cndcg", "=", "evl_tool", ".", "online_mrr_at_k", "(", "click_label", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "# final_weights = ranker.get_current_weights()", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_PDGD_random_sample.job": [[47, 87], ["clickModel.SDBN.SDBN", "range", "ranker.PDGDNeuralRanker.PDGDNeuralRanker", "print", "run_PDGD_random_sample.run", "os.makedirs", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ",", "output_fold", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.2", ",", "0.4", ",", "0.8", ",", "1.0", "]", "\n", "# pc = [0.0, 0.5, 1.0]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "# ps = [0.0, 0.0, 0.0]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.95", "]", "\n", "# pc = [0.05, 0.5, 0.95]", "\n", "ps", "=", "[", "0.2", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.9", "]", "\n", "# ps = [0.2, 0.5, 0.9]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.6", ",", "0.7", ",", "0.8", ",", "0.9", "]", "\n", "# pc = [0.4, 0.7, 0.9]", "\n", "ps", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "\n", "# ps = [0.1, 0.3, 0.5]", "\n", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "16", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "FEATURE_SIZE", "=", "220", "\n", "ranker", "=", "PDGDNeuralRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "[", "128", "]", ")", "\n", "print", "(", "\"PDGD fold{} {} run{} start!\"", ".", "format", "(", "f", ",", "model_type", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "# with open(", "\n", "#         \"{}/fold{}/{}_run{}_weights.txt\".format(output_fold, f, model_type, r),", "\n", "#         \"wb\") as fp:", "\n", "#     pickle.dump(final_weights, fp)", "\n", "", "print", "(", "\"PDGD fold{} {} run{} finished!\"", ".", "format", "(", "f", ",", "model_type", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.query_analysis.run": [[58, 104], ["train_set.get_all_querys", "numpy.random.randint", "ranker1.get_current_weights", "ranker2.get_current_weights", "ranker1.set_learning_rate", "ranker2.set_learning_rate", "ranker2.get_query_result_list", "ranker1.get_query_result_list", "click_model.simulate", "ranker2.update_to_clicks", "ranker1.update_to_clicks", "ranker1.set_learning_rate", "ranker2.set_learning_rate", "ranker1.get_query_result_list", "ranker2.get_query_result_list", "click_model.simulate", "ranker2.update_to_clicks", "ranker1.update_to_clicks", "train_set.get_all_features_by_query", "train_set.get_all_features_by_query", "train_set.get_all_features_by_query", "train_set.get_all_features_by_query"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.set_learning_rate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.set_learning_rate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.set_learning_rate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.set_learning_rate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker1", ",", "ranker2", ",", "num_interation", ",", "click_model", ")", ":", "\n", "    ", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "if", "qid", "in", "low_perform_queries", ":", "\n", "            ", "ranker1", ".", "set_learning_rate", "(", "0.01", ")", "\n", "ranker2", ".", "set_learning_rate", "(", "0.1", ")", "\n", "\n", "result_list", ",", "scores2", "=", "ranker2", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "_", ",", "scores1", "=", "ranker1", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ")", "\n", "\n", "ranker2", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores2", ",", "train_set", ".", "get_all_features_by_query", "(", "qid", ")", ")", "\n", "ranker1", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores1", ",", "train_set", ".", "get_all_features_by_query", "(", "qid", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "ranker1", ".", "set_learning_rate", "(", "0.1", ")", "\n", "ranker2", ".", "set_learning_rate", "(", "0.01", ")", "\n", "\n", "result_list", ",", "scores1", "=", "ranker1", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "_", ",", "scores2", "=", "ranker2", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ")", "\n", "\n", "ranker2", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores2", ",", "train_set", ".", "get_all_features_by_query", "(", "qid", ")", ")", "\n", "ranker1", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores1", ",", "train_set", ".", "get_all_features_by_query", "(", "qid", ")", ")", "\n", "\n", "# if qid in low_perform_queries:", "\n", "#", "\n", "#     result_list, scores2 = ranker2.get_query_result_list(train_set, qid)", "\n", "#", "\n", "#     clicked_doc, click_label = click_model.simulate(qid, result_list)", "\n", "#", "\n", "#     ranker2.update_to_clicks(click_label, result_list, scores2, train_set.get_all_features_by_query(qid))", "\n", "# else:", "\n", "#", "\n", "#     result_list, scores1 = ranker1.get_query_result_list(train_set, qid)", "\n", "#", "\n", "#     clicked_doc, click_label = click_model.simulate(qid, result_list)", "\n", "#", "\n", "#     ranker1.update_to_clicks(click_label, result_list, scores1, train_set.get_all_features_by_query(qid))", "\n", "\n", "", "", "return", "ranker1", ".", "get_current_weights", "(", ")", ",", "ranker2", ".", "get_current_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.query_analysis.job": [[106, 132], ["clickModel.SDBN.SDBN", "ranker.PDGDLinearRanker.PDGDLinearRanker", "ranker.PDGDLinearRanker.PDGDLinearRanker", "print", "query_analysis.run", "print", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ",", "tau", ",", "r", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.5", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.5", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.5", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.7", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.3", ",", "0.5", "]", "\n", "\n", "", "cm", "=", "SDBN", "(", "train_set", ",", "pc", ",", "ps", ")", "\n", "# np.random.seed(r)", "\n", "ranker1", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "tau", ")", "\n", "ranker2", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "tau", ")", "\n", "print", "(", "\"PDGD tau{} fold{} {} run{} start!\"", ".", "format", "(", "tau", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "final_weight1", ",", "final_weight2", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker1", ",", "ranker2", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "with", "open", "(", "\n", "\"./results/multiple_ranker/mq2007/PDGD/fold{}/{}_tau{}_run{}_ranker1_weights.txt\"", ".", "format", "(", "f", ",", "model_type", ",", "tau", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "final_weight1", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"./results/multiple_ranker/mq2007/PDGD/fold{}/{}_tau{}_run{}_ranker2_weights.txt\"", ".", "format", "(", "f", ",", "model_type", ",", "tau", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "        ", "pickle", ".", "dump", "(", "final_weight2", ",", "fp", ")", "\n", "", "print", "(", "\"PDGD tau{} fold{} {} run{} finished!\"", ".", "format", "(", "tau", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_ES_test.run": [[12, 70], ["train_set.get_all_querys", "numpy.random.randint", "numpy.zeros", "ranker.sample_random_vectors", "ranker.sample_canditate_rankers", "ranker.get_query_result_list", "click_model.simulate", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "ranker.get_nomalized_SNIPS", "ranker.update", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ranker.get_current_weights", "print", "len", "ranker.get_current_weights", "numpy.std", "numpy.dot", "numpy.where", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.sample_random_vectors", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.sample_canditate_rankers", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.ESLinearRanker.ESLinearRanker.get_nomalized_SNIPS", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.update", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights"], ["def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "num_rankers", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "\n", "iterated", "=", "0", "\n", "\n", "for", "i", "in", "index", ":", "\n", "        ", "R", "=", "np", ".", "zeros", "(", "(", "num_rankers", "+", "1", ",", ")", ")", "\n", "unit_vectors", "=", "ranker", ".", "sample_random_vectors", "(", "num_rankers", ")", "\n", "canditate_rankers", "=", "ranker", ".", "sample_canditate_rankers", "(", "unit_vectors", ")", "\n", "\n", "iterated", "+=", "1", "\n", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "\n", "# if no clicks, skip.", "\n", "if", "len", "(", "clicked_doc", ")", "==", "0", ":", "\n", "# all_result = ranker.get_all_query_result_list(test_set)", "\n", "# ndcg = evl_tool.average_ndcg_at_k(test_set, all_result, 10)", "\n", "# cndcg = evl_tool.query_ndcg_at_k(train_set, result_list, qid, 10)", "\n", "#", "\n", "# ndcg_scores.append(ndcg)", "\n", "# cndcg_scores.append(cndcg)", "\n", "            ", "continue", "\n", "\n", "# flip click label. exp: [1,0,1,0,0] -> [0,1,0,0,0]", "\n", "", "last_click", "=", "np", ".", "where", "(", "click_label", "==", "1", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "click_label", "[", ":", "last_click", "+", "1", "]", "=", "1", "-", "click_label", "[", ":", "last_click", "+", "1", "]", "\n", "\n", "# bandit record", "\n", "record", "=", "(", "qid", ",", "result_list", ",", "click_label", ",", "ranker", ".", "get_current_weights", "(", ")", ")", "\n", "snips", "=", "ranker", ".", "get_nomalized_SNIPS", "(", "canditate_rankers", ",", "record", ")", "\n", "\n", "if", "snips", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "", "R", "=", "snips", "[", "1", ":", "]", "\n", "\n", "A", "=", "(", "R", "-", "np", ".", "mean", "(", "R", ")", ")", "/", "np", ".", "std", "(", "R", ")", "\n", "gradient", "=", "np", ".", "dot", "(", "unit_vectors", ".", "T", ",", "A", ")", "/", "(", "num_rankers", "*", "sigma", ")", "\n", "ranker", ".", "update", "(", "gradient", ")", "\n", "\n", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "\n", "# print(len(ndcg_scores))", "\n", "final_weight", "=", "ranker", ".", "get_current_weights", "(", ")", "\n", "print", "(", "iterated", ",", "ndcg", ",", "cndcg", ")", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_ES_test.job": [[72, 113], ["clickModel.SDBN.SDBN", "range", "ranker.ESLinearRanker.ESLinearRanker", "print", "run_ES_test.run", "print", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ",", "tau", ",", "sigma", ",", "gamma", ",", "num_rankers", ",", "learning_rate_decay", ",", "output_fold", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.5", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.5", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.5", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.7", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.3", ",", "0.5", "]", "\n", "\n", "", "\"\"\"if model_type == \"perfect\":\n        pc = [0.0, 0.2, 0.4, 0.8, 1.0]\n        ps = [0.0, 0.0, 0.0, 0.0, 0.0]\n    elif model_type == \"navigational\":\n        pc = [0.05, 0.3, 0.5, 0.7, 0.95]\n        ps = [0.2, 0.3, 0.5, 0.7, 0.9]\n    elif model_type == \"informational\":\n        pc = [0.4, 0.6, 0.7, 0.8, 0.9]\n        ps = [0.1, 0.2, 0.3, 0.4, 0.5]\"\"\"", "\n", "\n", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "ranker", "=", "ESLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "sigma", ",", "tau", ",", "gamma", ",", "learning_rate_decay", "=", "learning_rate_decay", ")", "\n", "print", "(", "\"ES fold{} {} run{} start!\"", ".", "format", "(", "f", ",", "model_type", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "num_rankers", ")", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_sigma{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "sigma", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_sigma{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "sigma", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_sigma{}_run{}_final_weight.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "sigma", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "final_weight", ",", "fp", ")", "\n", "", "print", "(", "\"ES sigma{} fold{} {} run{} finished!\"", ".", "format", "(", "output_fold", ",", "sigma", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_NES.ForkedPdb.interaction": [[19, 26], ["open", "pdb.Pdb.interaction"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.experiments.run_NES.ForkedPdb.interaction"], ["def", "interaction", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "_stdin", "=", "sys", ".", "stdin", "\n", "try", ":", "\n", "            ", "sys", ".", "stdin", "=", "open", "(", "'/dev/stdin'", ")", "\n", "pdb", ".", "Pdb", ".", "interaction", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "finally", ":", "\n", "            ", "sys", ".", "stdin", "=", "_stdin", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_NES.run": [[28, 126], ["train_set.get_all_querys", "numpy.random.randint", "range", "numpy.zeros", "ranker.sample_new_pop", "ranker.get_current_weights", "train_set.get_all_features_by_query", "ranker.probabilistic_multileave", "click_model.simulate", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "numpy.array", "numpy.interp", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.matmul", "numpy.matmul", "ranker.update", "ranker.assign_weights", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ranker.get_current_weights", "print", "copy.deepcopy", "copy.deepcopy.assign_weights", "new_rankers.append", "len", "ranker.probabilistic_multileave_outcome", "difference.reshape.reshape", "numpy.linalg.inv", "numpy.matmul", "numpy.matmul", "dlogPidmu.flatten.flatten", "numpy.matmul", "numpy.linalg.inv", "numpy.linalg.inv", "np.interp.min", "np.interp.max", "numpy.matmul", "numpy.matmul", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.sample_new_pop", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.probabilistic_multileave", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.update", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.assign_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.assign_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.probabilistic_multileave_outcome"], ["", "", "", "def", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "num_rankers", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "\n", "batch_size", "=", "100", "\n", "iterated", "=", "0", "\n", "# for j in range(0, num_interation // batch_size):", "\n", "for", "i", "in", "range", "(", "num_interation", ")", ":", "\n", "        ", "R", "=", "np", ".", "zeros", "(", "(", "num_rankers", ",", ")", ")", "\n", "canditate_rankers", "=", "ranker", ".", "sample_new_pop", "(", "num_rankers", ")", "\n", "canditate_rankers", "[", "0", "]", "=", "ranker", ".", "get_current_weights", "(", ")", "\n", "\n", "new_rankers", "=", "[", "]", "\n", "for", "weights", "in", "canditate_rankers", ":", "\n", "            ", "new_ranker", "=", "copy", ".", "deepcopy", "(", "ranker", ")", "\n", "new_ranker", ".", "assign_weights", "(", "weights", ")", "\n", "new_rankers", ".", "append", "(", "new_ranker", ")", "\n", "# for i in index[j * batch_size:j * batch_size + batch_size]:", "\n", "# record = []", "\n", "", "iterated", "+=", "1", "\n", "qid", "=", "query_set", "[", "index", "[", "i", "]", "]", "\n", "\n", "# result_list = ranker.get_query_result_list(train_set, qid)", "\n", "query_features", "=", "train_set", ".", "get_all_features_by_query", "(", "qid", ")", "\n", "(", "result_list", ",", "a", ")", "=", "ranker", ".", "probabilistic_multileave", "(", "new_rankers", ",", "query_features", ",", "10", ")", "\n", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "train_set", ")", "\n", "\n", "\n", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "\n", "# if no clicks, skip.", "\n", "if", "len", "(", "clicked_doc", ")", "==", "0", ":", "\n", "# all_result = ranker.get_all_query_result_list(test_set)", "\n", "# ndcg = evl_tool.average_ndcg_at_k(test_set, all_result, 10)", "\n", "# cndcg = evl_tool.query_ndcg_at_k(train_set, result_list, qid, 10)", "\n", "#", "\n", "# ndcg_scores.append(ndcg)", "\n", "# cndcg_scores.append(cndcg)", "\n", "            ", "continue", "\n", "\n", "# flip click label. exp: [1,0,1,0,0] -> [0,1,0,0,0]", "\n", "# last_click = np.where(click_label == 1)[0][-1]", "\n", "# click_label[:last_click + 1] = 1 - click_label[:last_click + 1]", "\n", "\n", "# bandit record", "\n", "# record.append((qid, result_list, click_label, ranker.get_current_weights()))", "\n", "# snips = ranker.get_SNIPS(canditate_rankers, record, train_set)", "\n", "\n", "", "R", "=", "np", ".", "array", "(", "ranker", ".", "probabilistic_multileave_outcome", "(", "result_list", ",", "new_rankers", ",", "click_label", ",", "query_features", ")", ")", "\n", "\n", "# if snips is not None:", "\n", "#     R += snips", "\n", "\n", "#R = R[1:]", "\n", "R", "=", "np", ".", "interp", "(", "R", ",", "(", "R", ".", "min", "(", ")", ",", "R", ".", "max", "(", ")", ")", ",", "(", "0", ",", "1", ")", ")", "\n", "\n", "dmu", "=", "np", ".", "zeros", "(", "(", "FEATURE_SIZE", ")", ")", "\n", "dcov", "=", "np", ".", "zeros", "(", "(", "FEATURE_SIZE", ",", "FEATURE_SIZE", ")", ")", "\n", "Fmu", "=", "np", ".", "zeros", "(", "(", "FEATURE_SIZE", ",", "FEATURE_SIZE", ")", ")", "\n", "Fcov", "=", "np", ".", "zeros", "(", "(", "FEATURE_SIZE", ",", "FEATURE_SIZE", ")", ")", "\n", "for", "k", "in", "range", "(", "0", ",", "num_rankers", ")", ":", "\n", "            ", "difference", "=", "canditate_rankers", "[", "k", "]", "-", "ranker", ".", "mu", "\n", "difference", "=", "difference", ".", "reshape", "(", "(", "FEATURE_SIZE", ",", "1", ")", ")", "\n", "\n", "covinv", "=", "np", ".", "linalg", ".", "inv", "(", "ranker", ".", "cov", ")", "\n", "dlogPidmu", "=", "np", ".", "matmul", "(", "covinv", ",", "difference", ")", "\n", "Fmu", "+=", "np", ".", "matmul", "(", "dlogPidmu", ",", "dlogPidmu", ".", "T", ")", "\n", "dlogPidmu", "=", "dlogPidmu", ".", "flatten", "(", ")", "\n", "dlogPidcov", "=", "-", "0.5", "*", "covinv", "+", "0.5", "*", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "covinv", ",", "difference", ")", ",", "difference", ".", "T", ")", ",", "covinv", ")", "\n", "Fcov", "+=", "np", ".", "matmul", "(", "dlogPidcov", ",", "dlogPidcov", ".", "T", ")", "\n", "dmu", "+=", "dlogPidmu", "*", "R", "[", "k", "]", "\n", "dcov", "+=", "dlogPidcov", "*", "R", "[", "k", "]", "\n", "", "dmu", "/=", "num_rankers", "\n", "dcov", "/=", "num_rankers", "\n", "Fmu", "/=", "num_rankers", "\n", "Fcov", "/=", "num_rankers", "\n", "mu_update", "=", "np", ".", "matmul", "(", "np", ".", "linalg", ".", "inv", "(", "Fmu", ")", ",", "dmu", ")", "\n", "cov_update", "=", "np", ".", "matmul", "(", "np", ".", "linalg", ".", "inv", "(", "Fcov", ")", ",", "dcov", ")", "\n", "ranker", ".", "update", "(", "mu_update", ",", "cov_update", ")", "\n", "#ranker.assign_weights(canditate_rankers[np.argmax(R)])", "\n", "ranker", ".", "assign_weights", "(", "ranker", ".", "mu", ")", "\n", "# print(ranker.mu)", "\n", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "test_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "test_set", ",", "all_result", ",", "10", ")", "\n", "\n", "\n", "#ndcg = [ndcg] * batch_size", "\n", "#ndcg_scores.extend(ndcg)", "\n", "# print(len(ndcg_scores))", "\n", "final_weight", "=", "ranker", ".", "get_current_weights", "(", ")", "\n", "print", "(", "iterated", ",", "ndcg", ",", "cndcg", ")", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.experiments.run_NES.job": [[128, 172], ["clickModel.SDBN.SDBN", "range", "numpy.zeros", "ranker.NESLinearRanker.NESLinearRanker", "print", "run_NES.run", "print", "numpy.eye", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "test_set", ",", "tau", ",", "sigma", ",", "gamma", ",", "num_rankers", ",", "learning_rate_decay", ",", "output_fold", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "0.5", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.5", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.5", ",", "0.9", "]", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.7", ",", "0.9", "]", "\n", "ps", "=", "[", "0.1", ",", "0.3", ",", "0.5", "]", "\n", "\n", "", "\"\"\"if model_type == \"perfect\":\n        pc = [0.0, 0.2, 0.4, 0.8, 1.0]\n        ps = [0.0, 0.0, 0.0, 0.0, 0.0]\n    elif model_type == \"navigational\":\n        pc = [0.05, 0.3, 0.5, 0.7, 0.95]\n        ps = [0.2, 0.3, 0.5, 0.7, 0.9]\n    elif model_type == \"informational\":\n        pc = [0.4, 0.6, 0.7, 0.8, 0.9]\n        ps = [0.1, 0.2, 0.3, 0.4, 0.5]\"\"\"", "\n", "\n", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "# np.random.seed(r)", "\n", "        ", "mu", "=", "np", ".", "zeros", "(", "(", "FEATURE_SIZE", ")", ")", "\n", "cov", "=", "np", ".", "eye", "(", "FEATURE_SIZE", ")", "*", "0.1", "\n", "\n", "ranker", "=", "NESLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "mu", ",", "cov", ",", "sigma", ",", "tau", ",", "gamma", ",", "learning_rate_decay", "=", "learning_rate_decay", ")", "\n", "print", "(", "\"ES fold{} {} run{} start!\"", ".", "format", "(", "f", ",", "model_type", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", ",", "final_weight", "=", "run", "(", "train_set", ",", "test_set", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "num_rankers", ")", "\n", "with", "open", "(", "\n", "\"{}/fold{}/{}_sigma{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "sigma", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_sigma{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "sigma", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/fold{}/{}_sigma{}_run{}_final_weight.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "sigma", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "final_weight", ",", "fp", ")", "\n", "", "print", "(", "\"ES sigma{} fold{} {} run{} finished!\"", ".", "format", "(", "output_fold", ",", "sigma", ",", "f", ",", "model_type", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.AbstractDataset.AbstractDataset.__init__": [[3, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "path", ",", "\n", "feature_size", ",", "\n", "query_level_norm", "=", "False", ")", ":", "\n", "        ", "self", ".", "_path", "=", "path", "\n", "self", ".", "_feature_size", "=", "feature_size", "\n", "self", ".", "_query_docid_get_features", "=", "{", "}", "\n", "self", ".", "_query_get_docids", "=", "{", "}", "\n", "self", ".", "_query_get_all_features", "=", "{", "}", "\n", "self", ".", "_query_docid_get_rel", "=", "{", "}", "\n", "self", ".", "_query_pos_docids", "=", "{", "}", "\n", "self", ".", "_query_relevant_labels", "=", "{", "}", "\n", "self", ".", "_query_level_norm", "=", "query_level_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.AbstractDataset.AbstractDataset._load_data": [[17, 19], ["NotImplementedError"], "methods", ["None"], ["", "def", "_load_data", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"_load_data.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.AbstractDataset.AbstractDataset.get_features_by_query_and_docid": [[21, 23], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_features_by_query_and_docid", "(", "self", ",", "query", ",", "docid", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"get_features_by_query_and_docid.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.AbstractDataset.AbstractDataset.get_candidate_docids_by_query": [[25, 27], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_candidate_docids_by_query", "(", "self", ",", "query", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"get_candidate_docids_by_query.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.AbstractDataset.AbstractDataset.get_all_features_by_query": [[29, 31], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_all_features_by_query", "(", "self", ",", "query", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"get_all_features_by_query.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.AbstractDataset.AbstractDataset.get_relevance_label_by_query_and_docid": [[33, 35], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_relevance_label_by_query_and_docid", "(", "self", ",", "query", ",", "docid", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"get_relevance_by_query_and_docid.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.AbstractDataset.AbstractDataset.get_relevance_docids_by_query": [[38, 40], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_relevance_docids_by_query", "(", "self", ",", "query", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"get_relevance_docids_by_query.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.AbstractDataset.AbstractDataset.get_all_querys": [[42, 44], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_all_querys", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"get_all_querys.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.__init__": [[11, 38], ["dataset.AbstractDataset.AbstractDataset.__init__", "LetorDataset.LetorDataset.from_path", "LetorDataset.LetorDataset._load_data", "LetorDataset.LetorDataset.__dict__.update", "LetorDataset.LetorDataset._load_data", "print", "open", "pickle.dump", "hashlib.md5().hexdigest", "hashlib.md5", "path.encode"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.from_path", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset._load_data", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.update", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset._load_data"], ["    ", "def", "__init__", "(", "self", ",", "\n", "path", ",", "\n", "feature_size", ",", "\n", "query_level_norm", "=", "False", ",", "\n", "binary_label", "=", "0", ",", "\n", "cache_root", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", ",", "feature_size", ",", "query_level_norm", ")", "\n", "self", ".", "_binary_label", "=", "binary_label", "\n", "self", ".", "_comments", "=", "{", "}", "\n", "self", ".", "_docid_map", "=", "{", "}", "\n", "# self._docstr_map = {}", "\n", "\n", "if", "cache_root", "is", "not", "None", ":", "\n", "            ", "new", "=", "self", ".", "from_path", "(", "path", ",", "cache_root", ")", "\n", "if", "new", "is", "not", "None", ":", "\n", "                ", "self", ".", "__dict__", ".", "update", "(", "new", ".", "__dict__", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_load_data", "(", ")", "\n", "cache_name", "=", "f\"{hashlib.md5(path.encode()).hexdigest()}.pkl\"", "\n", "file_path", "=", "f'./{cache_root}/{cache_name}'", "\n", "\n", "with", "open", "(", "file_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "self", ",", "f", ")", "\n", "", "print", "(", "f\"Cached the array to {file_path}\"", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_load_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.from_path": [[39, 59], ["os.path.exists", "print", "print", "hashlib.md5().hexdigest", "open", "pickle.load", "hashlib.md5", "path.encode"], "methods", ["None"], ["", "", "def", "from_path", "(", "self", ",", "path", ":", "str", ",", "cache_root", ":", "str", ")", "->", "'LetorDataset'", ":", "\n", "        ", "\"\"\"\n        Constructs a dataset by reading form a disk\n        :param root_path: A path to the root that contains (Fold1, Fold2, ...)\n        :param cache_root: None if no caching is needed, otherwise a path to the cache dir;\n                        if the cache dir already contains the data it will be used. Hence, cleaning\n                        of the cache has to be done manually if needed.\n        :return: Constructed Dataset instance\n        \"\"\"", "\n", "\n", "cache_name", "=", "f\"{hashlib.md5(path.encode()).hexdigest()}.pkl\"", "\n", "file_path", "=", "f'./{cache_root}/{cache_name}'", "\n", "if", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "            ", "print", "(", "f\"Loading from cache file {file_path}\"", ")", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "data", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"no cache found for\"", ",", "path", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset._load_data": [[60, 132], ["print", "open", "LetorDataset.LetorDataset._normalise", "line.strip().split", "line.split", "float", "int.is_integer", "range", "cols[].split", "len", "len", "LetorDataset.LetorDataset._comments[].append", "int", "len", "float", "math.isnan", "LetorDataset.LetorDataset._query_pos_docids[].append", "numpy.array", "LetorDataset.LetorDataset._query_get_docids[].append", "numpy.vstack", "LetorDataset.LetorDataset._query_relevant_labels[].append", "numpy.array", "line.strip", "LetorDataset.LetorDataset._normalise", "comments_part[].strip", "cols[].split", "feature_id.isdigit", "int", "numpy.array", "cols[].split"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset._normalise", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset._normalise"], ["", "", "def", "_load_data", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Loading {}......\"", ".", "format", "(", "self", ".", "_path", ")", ")", "\n", "with", "open", "(", "self", ".", "_path", ",", "\"r\"", ")", "as", "fin", ":", "\n", "            ", "current_query", "=", "None", "\n", "for", "line", "in", "fin", ":", "\n", "                ", "cols", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "query", "=", "cols", "[", "1", "]", ".", "split", "(", "':'", ")", "[", "1", "]", "\n", "if", "query", "==", "current_query", ":", "\n", "                    ", "docid", "=", "len", "(", "self", ".", "_query_get_docids", "[", "query", "]", ")", "\n", "old_query", "=", "True", "\n", "\n", "", "else", ":", "\n", "                    ", "if", "current_query", "!=", "None", "and", "self", ".", "_query_level_norm", ":", "\n", "                        ", "self", ".", "_normalise", "(", "current_query", ")", "\n", "", "old_query", "=", "False", "\n", "docid", "=", "0", "\n", "current_query", "=", "query", "\n", "self", ".", "_docid_map", "[", "query", "]", "=", "{", "}", "\n", "# self._docstr_map[query] = {}", "\n", "self", ".", "_query_pos_docids", "[", "query", "]", "=", "[", "]", "\n", "\n", "", "comments_part", "=", "line", ".", "split", "(", "\"#\"", ")", "\n", "if", "len", "(", "comments_part", ")", "==", "2", ":", "\n", "                    ", "if", "query", "not", "in", "self", ".", "_comments", ":", "\n", "                        ", "self", ".", "_comments", "[", "query", "]", "=", "[", "]", "\n", "", "self", ".", "_comments", "[", "query", "]", ".", "append", "(", "comments_part", "[", "1", "]", ".", "strip", "(", ")", ")", "\n", "\n", "", "relevence", "=", "float", "(", "cols", "[", "0", "]", ")", "# Sometimes the relevance label can be a float.", "\n", "if", "relevence", ".", "is_integer", "(", ")", ":", "\n", "                    ", "relevence", "=", "int", "(", "relevence", ")", "# But if it is indeed an int, cast it into one.", "\n", "", "if", "self", ".", "_binary_label", "!=", "0", ":", "\n", "                    ", "if", "relevence", ">=", "self", ".", "_binary_label", ":", "\n", "                        ", "relevence", "=", "1", "\n", "", "else", ":", "\n", "                        ", "relevence", "=", "0", "\n", "\n", "", "", "features", "=", "[", "0", "]", "*", "self", ".", "_feature_size", "\n", "\n", "for", "i", "in", "range", "(", "2", ",", "len", "(", "cols", ")", ")", ":", "\n", "                    ", "feature_id", "=", "cols", "[", "i", "]", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "\n", "if", "not", "feature_id", ".", "isdigit", "(", ")", ":", "\n", "                        ", "if", "feature_id", "[", "0", "]", "==", "\"#\"", ":", "\n", "                            ", "self", ".", "_docid_map", "[", "query", "]", "[", "docid", "]", "=", "cols", "[", "i", "]", "[", "1", ":", "]", "\n", "# self._docstr_map[query][cols[i][1:]] = docid", "\n", "", "break", "\n", "\n", "", "feature_id", "=", "int", "(", "feature_id", ")", "-", "1", "\n", "feature_value", "=", "float", "(", "cols", "[", "i", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "if", "math", ".", "isnan", "(", "feature_value", ")", ":", "\n", "                        ", "feature_value", "=", "0", "\n", "\n", "", "features", "[", "feature_id", "]", "=", "feature_value", "\n", "\n", "", "if", "relevence", ">", "0", ":", "\n", "                    ", "self", ".", "_query_pos_docids", "[", "query", "]", ".", "append", "(", "docid", ")", "\n", "\n", "", "if", "old_query", ":", "\n", "                    ", "self", ".", "_query_docid_get_features", "[", "query", "]", "[", "docid", "]", "=", "np", ".", "array", "(", "features", ")", "\n", "self", ".", "_query_get_docids", "[", "query", "]", ".", "append", "(", "docid", ")", "\n", "self", ".", "_query_get_all_features", "[", "query", "]", "=", "np", ".", "vstack", "(", "(", "self", ".", "_query_get_all_features", "[", "query", "]", ",", "features", ")", ")", "\n", "self", ".", "_query_docid_get_rel", "[", "query", "]", "[", "docid", "]", "=", "relevence", "\n", "self", ".", "_query_relevant_labels", "[", "query", "]", ".", "append", "(", "relevence", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "_query_docid_get_features", "[", "query", "]", "=", "{", "docid", ":", "np", ".", "array", "(", "features", ")", "}", "\n", "self", ".", "_query_get_docids", "[", "query", "]", "=", "[", "docid", "]", "\n", "self", ".", "_query_get_all_features", "[", "query", "]", "=", "np", ".", "array", "(", "[", "features", "]", ")", "\n", "self", ".", "_query_docid_get_rel", "[", "query", "]", "=", "{", "docid", ":", "relevence", "}", "\n", "self", ".", "_query_relevant_labels", "[", "query", "]", "=", "[", "relevence", "]", "\n", "\n", "", "", "", "if", "self", ".", "_query_level_norm", ":", "\n", "            ", "self", ".", "_normalise", "(", "current_query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset._normalise": [[133, 144], ["numpy.zeros", "numpy.amin", "numpy.amax", "len"], "methods", ["None"], ["", "", "def", "_normalise", "(", "self", ",", "query", ")", ":", "\n", "        ", "norm", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "_query_get_docids", "[", "query", "]", ")", ",", "self", ".", "_feature_size", ")", ")", "\n", "# if there is more than 1 candidate docs, do the norm", "\n", "if", "norm", ".", "shape", "[", "0", "]", "!=", "1", ":", "\n", "            ", "query_features", "=", "self", ".", "_query_get_all_features", "[", "query", "]", "\n", "min", "=", "np", ".", "amin", "(", "query_features", ",", "axis", "=", "0", ")", "\n", "max", "=", "np", ".", "amax", "(", "query_features", ",", "axis", "=", "0", ")", "\n", "safe_ind", "=", "max", "-", "min", "!=", "0", "\n", "norm", "[", ":", ",", "safe_ind", "]", "=", "(", "query_features", "[", ":", ",", "safe_ind", "]", "-", "min", "[", "safe_ind", "]", ")", "/", "(", "\n", "max", "[", "safe_ind", "]", "-", "min", "[", "safe_ind", "]", ")", "\n", "self", ".", "_query_get_all_features", "[", "query", "]", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.update_relevance_label": [[145, 161], ["LetorDataset.LetorDataset._query_docid_get_rel.keys", "LetorDataset.LetorDataset._query_docid_get_rel[].keys", "qrel_dic[].keys", "LetorDataset.LetorDataset._query_pos_docids[].append"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "def", "update_relevance_label", "(", "self", ",", "qrel_dic", ":", "dict", ")", ":", "\n", "        ", "for", "qid", "in", "self", ".", "_query_docid_get_rel", ".", "keys", "(", ")", ":", "\n", "\n", "            ", "self", ".", "_query_pos_docids", "[", "qid", "]", "=", "[", "]", "\n", "ind", "=", "0", "\n", "for", "docid", "in", "self", ".", "_query_docid_get_rel", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "if", "self", ".", "_docid_map", "[", "qid", "]", "[", "docid", "]", "in", "qrel_dic", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "rel", "=", "qrel_dic", "[", "qid", "]", "[", "self", ".", "_docid_map", "[", "qid", "]", "[", "docid", "]", "]", "\n", "", "else", ":", "\n", "                    ", "rel", "=", "0", "\n", "", "self", ".", "_query_docid_get_rel", "[", "qid", "]", "[", "docid", "]", "=", "rel", "\n", "self", ".", "_query_relevant_labels", "[", "qid", "]", "[", "ind", "]", "=", "rel", "\n", "\n", "if", "rel", ">", "0", ":", "\n", "                    ", "self", ".", "_query_pos_docids", "[", "qid", "]", ".", "append", "(", "docid", ")", "\n", "", "ind", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.update_relevance_by_qrel": [[180, 193], ["LetorDataset.LetorDataset.update_relevance_label", "open", "line.strip().split", "qrel_dic.keys", "int", "line.strip", "int"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.update_relevance_label", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "", "def", "update_relevance_by_qrel", "(", "self", ",", "path", ":", "str", ")", ":", "\n", "\n", "# q-d pair dictionary", "\n", "        ", "qrel_dic", "=", "{", "}", "\n", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "qid", ",", "_", ",", "docid", ",", "rel", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "qid", "in", "qrel_dic", ".", "keys", "(", ")", ":", "\n", "                    ", "qrel_dic", "[", "qid", "]", "[", "docid", "]", "=", "int", "(", "rel", ")", "\n", "", "else", ":", "\n", "                    ", "qrel_dic", "[", "qid", "]", "=", "{", "docid", ":", "int", "(", "rel", ")", "}", "\n", "", "", "", "self", ".", "update_relevance_label", "(", "qrel_dic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_features_by_query_and_docid": [[194, 196], ["None"], "methods", ["None"], ["", "def", "get_features_by_query_and_docid", "(", "self", ",", "query", ",", "docid", ")", ":", "\n", "        ", "return", "self", ".", "_query_docid_get_features", "[", "query", "]", "[", "docid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query": [[197, 199], ["None"], "methods", ["None"], ["", "def", "get_candidate_docids_by_query", "(", "self", ",", "query", ")", ":", "\n", "        ", "return", "self", ".", "_query_get_docids", "[", "query", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query": [[200, 202], ["None"], "methods", ["None"], ["", "def", "get_all_features_by_query", "(", "self", ",", "query", ")", ":", "\n", "        ", "return", "self", ".", "_query_get_all_features", "[", "query", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid": [[203, 205], ["None"], "methods", ["None"], ["", "def", "get_relevance_label_by_query_and_docid", "(", "self", ",", "query", ",", "docid", ")", ":", "\n", "        ", "return", "self", ".", "_query_docid_get_rel", "[", "query", "]", "[", "docid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_relevance_label_by_query": [[206, 208], ["None"], "methods", ["None"], ["", "def", "get_all_relevance_label_by_query", "(", "self", ",", "query", ")", ":", "\n", "        ", "return", "self", ".", "_query_relevant_labels", "[", "query", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_docids_by_query": [[209, 211], ["None"], "methods", ["None"], ["", "def", "get_relevance_docids_by_query", "(", "self", ",", "query", ")", ":", "\n", "        ", "return", "self", ".", "_query_pos_docids", "[", "query", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys": [[212, 214], ["numpy.array", "list", "LetorDataset.LetorDataset._query_get_all_features.keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "get_all_querys", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "list", "(", "self", ".", "_query_get_all_features", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_comments_by_query": [[215, 217], ["None"], "methods", ["None"], ["", "def", "get_all_comments_by_query", "(", "self", ",", "query", ")", ":", "\n", "        ", "return", "self", ".", "_comments", "[", "query", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.write": [[218, 233], ["LetorDataset.LetorDataset.get_all_querys", "LetorDataset.LetorDataset.get_all_comments_by_query", "enumerate", "open", "f.write", "LetorDataset.LetorDataset.get_all_features_by_query", "LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid", "enumerate"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_comments_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.write", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "write", "(", "self", ",", "output_file", ")", ":", "\n", "        ", "s", "=", "\"\"", "\n", "for", "query", "in", "self", ".", "get_all_querys", "(", ")", ":", "\n", "            ", "comments", "=", "self", ".", "get_all_comments_by_query", "(", "query", ")", "\n", "for", "i", ",", "features", "in", "enumerate", "(", "self", ".", "get_all_features_by_query", "(", "query", ")", ")", ":", "\n", "                ", "comment", "=", "comments", "[", "i", "]", "\n", "label", "=", "self", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "i", ")", "\n", "features_str", "=", "\"\"", "\n", "for", "i", ",", "feature", "in", "enumerate", "(", "features", ")", ":", "\n", "# if feature == 0:", "\n", "#     continue", "\n", "                    ", "features_str", "+=", "\"{}:{} \"", ".", "format", "(", "i", "+", "1", ",", "feature", ")", "\n", "", "s", "+=", "\"{} qid:{} {}#{}\\n\"", ".", "format", "(", "label", ",", "query", ",", "features_str", ",", "comment", ")", "\n", "", "", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.write_by_queries": [[234, 249], ["LetorDataset.LetorDataset.get_all_comments_by_query", "enumerate", "open", "f.write", "LetorDataset.LetorDataset.get_all_features_by_query", "LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid", "enumerate"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_comments_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.write", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "", "def", "write_by_queries", "(", "self", ",", "output_file", ",", "queries", ")", ":", "\n", "        ", "s", "=", "\"\"", "\n", "for", "query", "in", "queries", ":", "\n", "            ", "comments", "=", "self", ".", "get_all_comments_by_query", "(", "query", ")", "\n", "for", "i", ",", "features", "in", "enumerate", "(", "self", ".", "get_all_features_by_query", "(", "query", ")", ")", ":", "\n", "                ", "comment", "=", "comments", "[", "i", "]", "\n", "label", "=", "self", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "i", ")", "\n", "features_str", "=", "\"\"", "\n", "for", "i", ",", "feature", "in", "enumerate", "(", "features", ")", ":", "\n", "# if feature == 0:", "\n", "#     continue", "\n", "                    ", "features_str", "+=", "\"{}:{} \"", ".", "format", "(", "i", "+", "1", ",", "feature", ")", "\n", "", "s", "+=", "\"{} qid:{} {}#{}\\n\"", ".", "format", "(", "label", ",", "query", ",", "features_str", ",", "comment", ")", "\n", "", "", "with", "open", "(", "output_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.write_cross_validation_datasets": [[250, 282], ["range", "LetorDataset.LetorDataset.get_all_querys", "numpy.random.shuffle", "numpy.array_split", "range", "train_chunks.extend", "numpy.concatenate", "LetorDataset.LetorDataset.write_by_queries", "LetorDataset.LetorDataset.write_by_queries", "os.path.exists", "os.mkdir", "print", "print"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.write_by_queries", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.write_by_queries"], ["", "", "def", "write_cross_validation_datasets", "(", "self", ",", "path", ":", "str", ",", "fold_num", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        :param fold_num: number of fold to do cross validation.\n        :param path: folder address to store the cross sets.\n        :return:\n        \"\"\"", "\n", "\n", "for", "fold", "in", "range", "(", "fold_num", ")", ":", "\n", "            ", "fold_path", "=", "\"{}/fold{}\"", ".", "format", "(", "path", ",", "fold", "+", "1", ")", "\n", "# Create target Directory if don't exist", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "fold_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "fold_path", ")", "\n", "print", "(", "\"Directory \"", ",", "fold_path", ",", "\" Created \"", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Directory \"", ",", "fold_path", ",", "\" already exists\"", ")", "\n", "\n", "", "", "all_queries", "=", "self", ".", "get_all_querys", "(", ")", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "all_queries", ")", "\n", "\n", "query_chunks", "=", "np", ".", "array_split", "(", "all_queries", ",", "fold_num", ")", "\n", "\n", "for", "i", "in", "range", "(", "fold_num", ")", ":", "\n", "            ", "test_path", "=", "\"{}/Fold{}/test.txt\"", ".", "format", "(", "path", ",", "i", "+", "1", ")", "\n", "train_path", "=", "\"{}/Fold{}/train.txt\"", ".", "format", "(", "path", ",", "i", "+", "1", ")", "\n", "test_queries", "=", "query_chunks", "[", "i", "]", "\n", "train_chunks", "=", "query_chunks", "[", ":", "i", "]", "\n", "train_chunks", ".", "extend", "(", "query_chunks", "[", "i", "+", "1", ":", "]", ")", "\n", "train_queries", "=", "np", ".", "concatenate", "(", "train_chunks", ")", "\n", "\n", "self", ".", "write_by_queries", "(", "test_path", ",", "test_queries", ")", "\n", "self", ".", "write_by_queries", "(", "train_path", ",", "train_queries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.runs_to_letor": [[283, 326], ["os.listdir", "len", "range", "query_dic.keys", "range", "query_dic[].keys", "open", "f.write", "len", "open", "f.write", "open", "os.path.join", "line.strip().split", "query_dic.keys", "line.strip", "query_dic[].keys", "[].append"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.write", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.write", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "@", "staticmethod", "\n", "def", "runs_to_letor", "(", "input_folder", ":", "str", ",", "output_folder", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Convert run files into LTR dataset.\n        :param input_folder: folder path that contains all run files.\n        :param output_folder:\n        :return:\n        \"\"\"", "\n", "files", "=", "os", ".", "listdir", "(", "input_folder", ")", "\n", "num_feature", "=", "len", "(", "files", ")", "\n", "\n", "# q-d pair dictionary", "\n", "query_dic", "=", "{", "}", "\n", "for", "feature_id", "in", "range", "(", "num_feature", ")", ":", "\n", "# feature id in standard letor datasets start from 1.", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "input_folder", ",", "files", "[", "feature_id", "]", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "f", ":", "\n", "                    ", "qid", ",", "_", ",", "docid", ",", "rank", ",", "score", ",", "rname", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "qid", "in", "query_dic", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "docid", "in", "query_dic", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                            ", "query_dic", "[", "qid", "]", "[", "docid", "]", ".", "append", "(", "(", "feature_id", "+", "1", ",", "score", ")", ")", "\n", "", "else", ":", "\n", "                            ", "query_dic", "[", "qid", "]", "[", "docid", "]", "=", "[", "(", "feature_id", "+", "1", ",", "score", ")", "]", "\n", "", "", "else", ":", "\n", "                        ", "query_dic", "[", "qid", "]", "=", "{", "docid", ":", "[", "(", "feature_id", "+", "1", ",", "score", ")", "]", "}", "\n", "", "", "", "", "s", "=", "\"\"", "\n", "for", "qid", "in", "query_dic", ".", "keys", "(", ")", ":", "\n", "            ", "for", "docid", "in", "query_dic", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "# the first column is relevance label, dont know for now.", "\n", "                ", "s", "+=", "\"0 \"", "\n", "s", "+=", "\"qid:{} \"", ".", "format", "(", "qid", ")", "\n", "\n", "for", "feature_id", ",", "socre", "in", "query_dic", "[", "qid", "]", "[", "docid", "]", ":", "\n", "                    ", "s", "+=", "\"{}:{} \"", ".", "format", "(", "feature_id", ",", "socre", ")", "\n", "", "s", "+=", "\"#docid = {}\\n\"", ".", "format", "(", "docid", ")", "\n", "", "", "with", "open", "(", "output_folder", "+", "\"letor.txt\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "s", ")", "\n", "\n", "", "s", "=", "\"\"", "\n", "for", "fid", "in", "range", "(", "len", "(", "files", ")", ")", ":", "\n", "            ", "s", "+=", "\"{}:{}\\n\"", ".", "format", "(", "fid", "+", "1", ",", "files", "[", "fid", "]", ")", "\n", "", "with", "open", "(", "output_folder", "+", "\"feature_description.txt\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_query_docid_get_feature": [[328, 330], ["None"], "methods", ["None"], ["", "", "def", "get_query_docid_get_feature", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_query_docid_get_features", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_query_get_all_features": [[331, 333], ["None"], "methods", ["None"], ["", "def", "get_query_get_all_features", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_query_get_all_features", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_query_get_docids": [[334, 336], ["None"], "methods", ["None"], ["", "def", "get_query_get_docids", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_query_get_docids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRanker.MDPRanker.__init__": [[9, 86], ["ranker.AbstractRanker.AbstractRanker.__init__", "numpy.random.rand", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.Variable", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.nn.softmax", "tensorflow.global_variables_initializer", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.train.GradientDescentOptimizer", "tensorflow.train.GradientDescentOptimizer.compute_gradients", "tensorflow.train.GradientDescentOptimizer.apply_gradients", "tensorflow.Session", "tensorflow.Session.run", "tensorflow.truncated_normal", "numpy.sqrt", "float"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["    ", "def", "__init__", "(", "self", ",", "\n", "Nhidden_unit", ",", "\n", "Nfeature", ",", "\n", "Learningrate", ",", "\n", "Lenepisode", "=", "10", ",", "\n", "memory_size", "=", "100", ",", "\n", "batch_size", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "Nfeature", ")", "\n", "self", ".", "Nfeature", "=", "Nfeature", "\n", "self", ".", "Lenepisode", "=", "Lenepisode", "\n", "self", ".", "memory_size", "=", "memory_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "W", "=", "np", ".", "random", ".", "rand", "(", "Nfeature", ")", "\n", "# self.W = np.zeros(Nfeature)", "\n", "self", ".", "lr", "=", "Learningrate", "\n", "\n", "self", ".", "Ntop", "=", "10", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "ite", "=", "0", "\n", "\n", "self", ".", "Nhidden_unit", "=", "Nhidden_unit", "\n", "\n", "global", "scores", ",", "input_docs", ",", "position", ",", "learning_rate", ",", "sess", ",", "train_step_pos", ",", "train_step_neg", ",", "cross_entropy_pos", ",", "cross_entropy_neg", ",", "grads_vars", ",", "prob", ",", "cross_entropy", ",", "train_step", ",", "doc_length", "\n", "\n", "input_docs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "Nfeature", "]", ")", "\n", "position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "learning_rate", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ")", "\n", "doc_length", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "\n", "########## Liner ranker ########", "\n", "W1", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "self", ".", "Nfeature", ",", "1", "]", ",", "stddev", "=", "0.1", "/", "np", ".", "sqrt", "(", "float", "(", "Nfeature", ")", ")", ")", ")", "\n", "# b1 = tf.Variable(tf.zeros([1, hidden_units]))", "\n", "h1", "=", "tf", ".", "matmul", "(", "input_docs", ",", "W1", ")", "\n", "scores", "=", "tf", ".", "transpose", "(", "h1", ")", "\n", "##################################", "\n", "\n", "########## neural ranker ########", "\n", "# Generate hidden layer", "\n", "# W1 = tf.Variable(tf.truncated_normal([self.Nfeature, self.Nhidden_unit], stddev=0.1 / np.sqrt(float(Nfeature))))", "\n", "# # b1 = tf.Variable(tf.zeros([1, hidden_units]))", "\n", "# h1 = tf.tanh(tf.matmul(input_docs, W1))", "\n", "#", "\n", "# # Second layer -- linear classifier for action logits", "\n", "# W2 = tf.Variable(tf.truncated_normal([self.Nhidden_unit, 1], stddev=0.1 / np.sqrt(float(self.Nhidden_unit))))", "\n", "# # b2 = tf.Variable(tf.zeros([1]))", "\n", "# scores = tf.transpose(tf.matmul(h1, W2))  # + b2", "\n", "##################################", "\n", "prob", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", ")", "\n", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "\n", "cross_entropy", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "scores", ",", "labels", "=", "position", ")", "\n", "opt", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", ")", "\n", "grads_vars", "=", "opt", ".", "compute_gradients", "(", "cross_entropy", ")", "\n", "train_step", "=", "opt", ".", "apply_gradients", "(", "grads_vars", ")", "\n", "\n", "# cross_entropy_pos = tf.reduce_sum(", "\n", "#     -tf.log(tf.clip_by_value(prob, 1e-10, 1.0)) * tf.one_hot(position, doc_length),", "\n", "#     axis=1)", "\n", "# pos_train_opt = tf.train.GradientDescentOptimizer(learning_rate)", "\n", "# grads_vars_pos = pos_train_opt.compute_gradients(cross_entropy_pos)", "\n", "# train_step_pos = pos_train_opt.apply_gradients(grads_vars_pos)", "\n", "# #", "\n", "#", "\n", "# cross_entropy_neg = tf.reduce_sum(", "\n", "#     -tf.log(tf.clip_by_value(1.0 - prob, 1e-10, 1.0)) * tf.one_hot(position, doc_length),", "\n", "#     axis=1)", "\n", "# neg_train_opt = tf.train.GradientDescentOptimizer(learning_rate)", "\n", "# grads_vars_neg = neg_train_opt.compute_gradients(cross_entropy_neg)", "\n", "# train_step_neg = neg_train_opt.apply_gradients(grads_vars_neg)", "\n", "\n", "# Start TF session", "\n", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRanker.MDPRanker.TFupdate_policy_trust": [[103, 113], ["dataset.get_all_features_by_query", "len", "min", "range", "sess.run", "numpy.delete"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "TFupdate_policy_trust", "(", "self", ",", "query", ",", "ranklist", ",", "rewards", ",", "dataset", ")", ":", "\n", "        ", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "ndoc", "=", "len", "(", "ranklist", ")", "\n", "lenghth", "=", "min", "(", "self", ".", "Lenepisode", ",", "ndoc", ")", "\n", "\n", "for", "pos", "in", "range", "(", "lenghth", ")", ":", "\n", "            ", "loss", ",", "_", "=", "sess", ".", "run", "(", "[", "cross_entropy", ",", "train_step", "]", ",", "\n", "feed_dict", "=", "{", "input_docs", ":", "feature_matrix", "[", "ranklist", "]", ",", "position", ":", "[", "0", "]", ",", "\n", "learning_rate", ":", "self", ".", "lr", "*", "rewards", "[", "pos", "]", "}", ")", "\n", "ranklist", "=", "np", ".", "delete", "(", "ranklist", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRanker.MDPRanker.TFupdate_reward_trust": [[137, 157], ["dataset.get_all_features_by_query", "len", "min", "range", "numpy.delete", "sess.run", "sess.run", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "", "def", "TFupdate_reward_trust", "(", "self", ",", "query", ",", "ranklist", ",", "rewards", ",", "dataset", ")", ":", "\n", "        ", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "ndoc", "=", "len", "(", "ranklist", ")", "\n", "lenghth", "=", "min", "(", "self", ".", "Lenepisode", ",", "ndoc", ")", "\n", "\n", "for", "pos", "in", "range", "(", "lenghth", ")", ":", "\n", "            ", "if", "rewards", "[", "pos", "]", ">", "0", ":", "\n", "                ", "loss", ",", "_", "=", "sess", ".", "run", "(", "[", "cross_entropy_pos", ",", "train_step_pos", "]", ",", "\n", "feed_dict", "=", "{", "input_docs", ":", "feature_matrix", "[", "ranklist", "]", ",", "\n", "position", ":", "[", "0", "]", ",", "\n", "doc_length", ":", "len", "(", "ranklist", ")", ",", "\n", "learning_rate", ":", "self", ".", "lr", "*", "rewards", "[", "pos", "]", "}", ")", "\n", "", "else", ":", "\n", "                ", "loss", ",", "_", "=", "sess", ".", "run", "(", "[", "cross_entropy_neg", ",", "train_step_neg", "]", ",", "\n", "feed_dict", "=", "{", "input_docs", ":", "feature_matrix", "[", "ranklist", "]", ",", "\n", "position", ":", "[", "0", "]", ",", "\n", "doc_length", ":", "len", "(", "ranklist", ")", ",", "\n", "learning_rate", ":", "self", ".", "lr", "*", "-", "rewards", "[", "pos", "]", "}", ")", "\n", "\n", "", "ranklist", "=", "np", ".", "delete", "(", "ranklist", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRanker.MDPRanker.record_episode": [[158, 169], ["hasattr", "len", "MDPRanker.MDPRanker.memory.append"], "methods", ["None"], ["", "", "def", "record_episode", "(", "self", ",", "query", ",", "ranklist", ",", "rewards", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'memory_counter'", ")", ":", "\n", "            ", "self", ".", "memory_counter", "=", "0", "\n", "\n", "", "if", "self", ".", "memory_size", ">", "len", "(", "self", ".", "memory", ")", ":", "\n", "            ", "self", ".", "memory", ".", "append", "(", "[", "query", ",", "ranklist", ",", "rewards", "]", ")", "\n", "", "else", ":", "\n", "            ", "index", "=", "self", ".", "memory_counter", "%", "self", ".", "memory_size", "\n", "\n", "self", ".", "memory", "[", "index", "]", "=", "[", "query", ",", "ranklist", ",", "rewards", "]", "\n", "", "self", ".", "memory_counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRanker.MDPRanker.get_query_result_list": [[170, 214], ["dataset.get_all_features_by_query", "dataset.get_candidate_docids_by_query", "len", "MDPRanker.MDPRanker.get_scores", "MDPRanker.MDPRanker.tolist", "list", "numpy.zeros", "range", "range", "MDPRanker.MDPRanker.softmax", "numpy.random.choice", "len"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax"], ["", "def", "get_query_result_list", "(", "self", ",", "dataset", ",", "query", ")", ":", "\n", "        ", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "docid_list", "=", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", "\n", "ndoc", "=", "len", "(", "docid_list", ")", "\n", "\n", "# k = np.minimum(k, ndoc)", "\n", "\n", "doc_scores", "=", "self", ".", "get_scores", "(", "feature_matrix", ")", "\n", "\n", "scoretmp", "=", "doc_scores", ".", "tolist", "(", ")", "\n", "\n", "positions", "=", "list", "(", "range", "(", "ndoc", ")", ")", "\n", "ranklist", "=", "np", ".", "zeros", "(", "ndoc", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "if", "ndoc", "==", "1", ":", "\n", "            ", "ranklist", "[", "0", "]", "=", "positions", "[", "0", "]", "\n", "return", "ranklist", "\n", "\n", "", "for", "position", "in", "range", "(", "ndoc", ")", ":", "\n", "# policy = np.exp((scoretmp - np.max(scoretmp)) / 10)", "\n", "# policy = policy / np.sum(policy)", "\n", "\n", "# softmax does not handle nan", "\n", "# probabilities = np.exp(scoretmp) / np.sum(np.exp(scoretmp))", "\n", "            ", "probabilities", "=", "self", ".", "softmax", "(", "scoretmp", ")", "\n", "\n", "# useless, extremely slow", "\n", "# probabilities = tf.nn.softmax(scoretmp)", "\n", "# probabilities = sess.run(probabilities).ravel()", "\n", "\n", "# check if policy contains Nan", "\n", "# array_sum = np.sum(probabilities)", "\n", "# if np.isnan(array_sum):", "\n", "#     print(query)", "\n", "#     print(scoretmp)", "\n", "#     print(probabilities)", "\n", "\n", "choice", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "probabilities", ")", ",", "1", ",", "p", "=", "probabilities", ")", "[", "0", "]", "\n", "ranklist", "[", "position", "]", "=", "positions", "[", "choice", "]", "\n", "\n", "del", "scoretmp", "[", "choice", "]", "\n", "del", "positions", "[", "choice", "]", "\n", "\n", "", "return", "ranklist", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRanker.MDPRanker.softmax": [[215, 218], ["numpy.exp", "numpy.exp.sum", "numpy.max"], "methods", ["None"], ["", "def", "softmax", "(", "self", ",", "x", ")", ":", "\n", "        ", "f", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "# shift values", "\n", "return", "f", "/", "f", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRanker.MDPRanker.get_all_query_result_list": [[219, 234], ["dataset.get_all_querys", "numpy.array", "docid_list.reshape.reshape.reshape", "dataset.get_all_features_by_query", "MDPRanker.MDPRanker.get_scores", "numpy.column_stack", "numpy.flip", "dataset.get_candidate_docids_by_query", "len", "docid_score_list[].argsort"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query"], ["", "def", "get_all_query_result_list", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "query_result_list", "=", "{", "}", "\n", "\n", "for", "query", "in", "dataset", ".", "get_all_querys", "(", ")", ":", "\n", "            ", "docid_list", "=", "np", ".", "array", "(", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "docid_list", "=", "docid_list", ".", "reshape", "(", "(", "len", "(", "docid_list", ")", ",", "1", ")", ")", "\n", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "score_list", "=", "self", ".", "get_scores", "(", "feature_matrix", ")", "\n", "\n", "docid_score_list", "=", "np", ".", "column_stack", "(", "(", "docid_list", ",", "score_list", ")", ")", "\n", "docid_score_list", "=", "np", ".", "flip", "(", "docid_score_list", "[", "docid_score_list", "[", ":", ",", "1", "]", ".", "argsort", "(", ")", "]", ",", "0", ")", "\n", "\n", "query_result_list", "[", "query", "]", "=", "docid_score_list", "[", ":", ",", "0", "]", "\n", "\n", "", "return", "query_result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRanker.MDPRanker.get_scores": [[235, 243], ["[].reshape", "sess.run"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "get_scores", "(", "self", ",", "features", ")", ":", "\n", "\n", "        ", "result", "=", "sess", ".", "run", "(", "[", "scores", "]", ",", "feed_dict", "=", "{", "input_docs", ":", "features", "}", ")", "[", "0", "]", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "# array_sum = np.sum(result)", "\n", "# if np.isnan(array_sum):", "\n", "#     print(sess.run([scores], feed_dict={input_docs: features}))", "\n", "#     print(sess.run([prob], feed_dict={input_docs: features}))", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.LinearRanker.LinearRanker.__init__": [[10, 22], ["ranker.AbstractRanker.AbstractRanker.__init__", "numpy.random.randn", "scipy.linalg.norm", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "learning_rate", ",", "learning_rate_decay", "=", "1", ",", "learning_rate_clip", "=", "0.01", ",", "random_initial", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_features", ")", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "learning_rate_decay", "=", "learning_rate_decay", "\n", "self", ".", "learning_rate_clip", "=", "learning_rate_clip", "\n", "\n", "if", "random_initial", ":", "\n", "            ", "unit_vector", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "num_features", ")", "\n", "unit_vector", "/=", "norm", "(", "unit_vector", ")", "\n", "self", ".", "weights", "=", "unit_vector", "*", "0.01", "\n", "", "else", ":", "\n", "            ", "self", ".", "weights", "=", "np", ".", "zeros", "(", "self", ".", "num_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.LinearRanker.LinearRanker.update": [[23, 29], ["None"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "self", ".", "weights", "+=", "self", ".", "learning_rate", "*", "gradient", "\n", "if", "self", ".", "learning_rate", ">", "self", ".", "learning_rate_clip", ":", "\n", "            ", "self", ".", "learning_rate", "*=", "self", ".", "learning_rate_decay", "\n", "", "else", ":", "\n", "            ", "self", ".", "learning_rate", "=", "self", ".", "learning_rate_clip", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.LinearRanker.LinearRanker.assign_weights": [[30, 32], ["None"], "methods", ["None"], ["", "", "def", "assign_weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "self", ".", "weights", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.LinearRanker.LinearRanker.get_current_weights": [[33, 35], ["copy.copy"], "methods", ["None"], ["", "def", "get_current_weights", "(", "self", ")", ":", "\n", "        ", "return", "copy", ".", "copy", "(", "self", ".", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.LinearRanker.LinearRanker.get_query_result_list": [[36, 50], ["dataset.get_candidate_docids_by_query", "dataset.get_all_features_by_query", "LinearRanker.LinearRanker.get_scores", "zip", "sorted", "range", "len", "query_result_list.append"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores"], ["", "def", "get_query_result_list", "(", "self", ",", "dataset", ",", "query", ")", ":", "\n", "        ", "docid_list", "=", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", "\n", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "\n", "score_list", "=", "self", ".", "get_scores", "(", "feature_matrix", ")", "\n", "\n", "docid_score_list", "=", "zip", "(", "docid_list", ",", "score_list", ")", "\n", "docid_score_list", "=", "sorted", "(", "docid_score_list", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "query_result_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "docid_list", ")", ")", ":", "\n", "            ", "(", "docid", ",", "socre", ")", "=", "docid_score_list", "[", "i", "]", "\n", "query_result_list", ".", "append", "(", "docid", ")", "\n", "", "return", "query_result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.LinearRanker.LinearRanker.get_all_query_result_list": [[51, 66], ["dataset.get_all_querys", "numpy.array", "docid_list.reshape.reshape.reshape", "dataset.get_all_features_by_query", "LinearRanker.LinearRanker.get_scores", "numpy.column_stack", "numpy.flip", "dataset.get_candidate_docids_by_query", "len", "docid_score_list[].argsort"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query"], ["", "def", "get_all_query_result_list", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "query_result_list", "=", "{", "}", "\n", "\n", "for", "query", "in", "dataset", ".", "get_all_querys", "(", ")", ":", "\n", "            ", "docid_list", "=", "np", ".", "array", "(", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "docid_list", "=", "docid_list", ".", "reshape", "(", "(", "len", "(", "docid_list", ")", ",", "1", ")", ")", "\n", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "score_list", "=", "self", ".", "get_scores", "(", "feature_matrix", ")", "\n", "\n", "docid_score_list", "=", "np", ".", "column_stack", "(", "(", "docid_list", ",", "score_list", ")", ")", "\n", "docid_score_list", "=", "np", ".", "flip", "(", "docid_score_list", "[", "docid_score_list", "[", ":", ",", "1", "]", ".", "argsort", "(", ")", "]", ",", "0", ")", "\n", "\n", "query_result_list", "[", "query", "]", "=", "docid_score_list", "[", ":", ",", "0", "]", "\n", "\n", "", "return", "query_result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.LinearRanker.LinearRanker.get_scores": [[67, 77], ["numpy.array", "numpy.dot"], "methods", ["None"], ["", "def", "get_scores", "(", "self", ",", "features", ")", ":", "\n", "# num = 0", "\n", "# for i in features:", "\n", "#     print(num, i)", "\n", "#     num+=1", "\n", "        ", "weights", "=", "np", ".", "array", "(", "[", "self", ".", "weights", "]", ")", "\n", "\n", "score", "=", "np", ".", "dot", "(", "features", ",", "weights", ".", "T", ")", "[", ":", ",", "0", "]", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.LinearRanker.LinearRanker.set_learning_rate": [[78, 80], ["None"], "methods", ["None"], ["", "def", "set_learning_rate", "(", "self", ",", "learning_rate", ")", ":", "\n", "        ", "self", ".", "learning_rate", "=", "learning_rate", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.CMAESLinearRanker.CMAESLinearRanker.__init__": [[6, 12], ["ranker.LinearRanker.LinearRanker.__init__"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "learning_rate", ",", "step_size", ",", "tau", ",", "gamma", ",", "\n", "learning_rate_decay", "=", "1", ",", "random_initial", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_features", ",", "learning_rate", ",", "learning_rate_decay", ",", "random_initial", ")", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.CMAESLinearRanker.CMAESLinearRanker.get_query_result_list": [[13, 27], ["numpy.array", "dataset.get_all_features_by_query", "CMAESLinearRanker.CMAESLinearRanker.get_scores", "CMAESLinearRanker.CMAESLinearRanker._softmax_with_tau().reshape", "numpy.minimum", "numpy.random.choice", "dataset.get_candidate_docids_by_query", "len", "CMAESLinearRanker.CMAESLinearRanker._softmax_with_tau", "len"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker._softmax_with_tau"], ["", "def", "get_query_result_list", "(", "self", ",", "dataset", ",", "query", ")", ":", "\n", "# listwise ranking with linear model", "\n", "        ", "self", ".", "docid_list", "=", "np", ".", "array", "(", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "self", ".", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "\n", "scores", "=", "self", ".", "get_scores", "(", "self", ".", "feature_matrix", ")", "\n", "props", "=", "self", ".", "_softmax_with_tau", "(", "scores", ")", ".", "reshape", "(", "-", "1", ")", "\n", "props", "=", "(", "props", "+", "1e-5", ")", "/", "(", "1", "+", "len", "(", "props", ")", "*", "1e-5", ")", "\n", "\n", "sample_size", "=", "np", ".", "minimum", "(", "10", ",", "len", "(", "self", ".", "docid_list", ")", ")", "\n", "\n", "self", ".", "query_result_list", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "docid_list", ",", "sample_size", ",", "\n", "replace", "=", "False", ",", "p", "=", "props", ")", "\n", "return", "self", ".", "query_result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.CMAESLinearRanker.CMAESLinearRanker._softmax_with_tau": [[28, 33], ["numpy.exp", "numpy.exp.sum", "numpy.max"], "methods", ["None"], ["", "def", "_softmax_with_tau", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Compute softmax values for each sets of scores in x.\"\"\"", "\n", "e_x", "=", "np", ".", "exp", "(", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "/", "self", ".", "tau", ")", "\n", "\n", "return", "e_x", "/", "e_x", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.CMAESLinearRanker.CMAESLinearRanker.sample_unit_vectors": [[34, 39], ["numpy.random.randn", "numpy.sum"], "methods", ["None"], ["", "def", "sample_unit_vectors", "(", "self", ",", "num_rankers", ")", ":", "\n", "        ", "unit_vectors", "=", "np", ".", "random", ".", "randn", "(", "num_rankers", ",", "self", ".", "num_features", ")", "\n", "vector_norms", "=", "np", ".", "sum", "(", "unit_vectors", "**", "2", ",", "axis", "=", "1", ")", "**", "(", "1.", "/", "2", ")", "\n", "unit_vectors", "=", "unit_vectors", "/", "vector_norms", "[", ":", ",", "None", "]", "\n", "return", "unit_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.CMAESLinearRanker.CMAESLinearRanker.sample_canditate_rankers": [[40, 45], ["None"], "methods", ["None"], ["", "def", "sample_canditate_rankers", "(", "self", ",", "unit_vectors", ")", ":", "\n", "# sample unit vectors", "\n", "# sample new candidate weights", "\n", "        ", "new_weights", "=", "self", ".", "weights", "+", "self", ".", "step_size", "*", "unit_vectors", "\n", "return", "new_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.CMAESLinearRanker.CMAESLinearRanker.fitness": [[46, 71], ["numpy.vstack", "numpy.array", "CMAESLinearRanker.get_doc_indexes", "dataset.get_all_features_by_query", "numpy.dot", "numpy.dot", "log_propensity.reshape.reshape.reshape", "CMAESLinearRanker.CMAESLinearRanker.compute_SNIPS", "numpy.set_printoptions", "dataset.get_candidate_docids_by_query", "CMAESLinearRanker.CMAESLinearRanker.softmax", "CMAESLinearRanker.CMAESLinearRanker.softmax", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.get_doc_indexes", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.compute_SNIPS", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax"], ["", "def", "fitness", "(", "self", ",", "canditate_rankers", ",", "records", ",", "dataset", ")", ":", "\n", "        ", "result", "=", "0", "\n", "current_ranker", "=", "self", ".", "weights", "\n", "all_ranker", "=", "np", ".", "vstack", "(", "(", "current_ranker", ",", "canditate_rankers", ")", ")", "# all rankers weights", "\n", "#for record in records:", "\n", "record", "=", "records", "[", "len", "(", "records", ")", "-", "1", "]", "\n", "query", "=", "record", "[", "0", "]", "\n", "result_list", "=", "record", "[", "1", "]", "\n", "click_label", "=", "record", "[", "2", "]", "\n", "log_weight", "=", "np", ".", "array", "(", "record", "[", "3", "]", ")", "\n", "\n", "doc_indexes", "=", "get_doc_indexes", "(", "result_list", ",", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "\n", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "scores", "=", "np", ".", "dot", "(", "feature_matrix", ",", "all_ranker", ".", "T", ")", "\n", "log_score", "=", "np", ".", "dot", "(", "feature_matrix", ",", "log_weight", ".", "T", ")", "\n", "\n", "propensities", "=", "self", ".", "softmax", "(", "scores", ")", "[", "doc_indexes", "]", "\n", "log_propensity", "=", "self", ".", "softmax", "(", "log_score", ")", "[", "doc_indexes", "]", "\n", "log_propensity", "=", "log_propensity", ".", "reshape", "(", "len", "(", "result_list", ")", ",", "1", ")", "\n", "\n", "SNIPS", "=", "self", ".", "compute_SNIPS", "(", "log_propensity", ",", "propensities", ",", "click_label", ")", "\n", "np", ".", "set_printoptions", "(", "suppress", "=", "True", ")", "\n", "result", "-=", "SNIPS", "\n", "return", "result", "/", "len", "(", "record", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.CMAESLinearRanker.CMAESLinearRanker.compute_SNIPS": [[72, 83], ["numpy.array().reshape", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "numpy.sum", "numpy.array", "numpy.sqrt", "len"], "methods", ["None"], ["", "def", "compute_SNIPS", "(", "self", ",", "log_propensity", ",", "propensities", ",", "click_label", ")", ":", "\n", "        ", "click_label", "=", "np", ".", "array", "(", "click_label", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "IPS", "=", "np", ".", "sum", "(", "(", "propensities", "/", "log_propensity", ")", "*", "click_label", ",", "axis", "=", "0", ")", "/", "len", "(", "click_label", ")", "\n", "\n", "S", "=", "np", ".", "sum", "(", "(", "propensities", "/", "log_propensity", ")", ",", "axis", "=", "0", ")", "/", "len", "(", "click_label", ")", "\n", "SNIPS", "=", "IPS", "/", "S", "\n", "\n", "Var", "=", "np", ".", "sum", "(", "(", "click_label", "-", "SNIPS", ")", "**", "2", "*", "(", "propensities", "/", "log_propensity", ")", "**", "2", ",", "axis", "=", "0", ")", "/", "np", ".", "sum", "(", "\n", "(", "propensities", "/", "log_propensity", ")", "**", "2", ",", "axis", "=", "0", ")", "\n", "\n", "return", "SNIPS", "+", "self", ".", "gamma", "*", "np", ".", "sqrt", "(", "Var", "/", "len", "(", "click_label", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.CMAESLinearRanker.CMAESLinearRanker.compute_IPS": [[84, 88], ["numpy.array().reshape", "numpy.sum", "len", "numpy.array"], "methods", ["None"], ["", "def", "compute_IPS", "(", "self", ",", "log_propensity", ",", "propensities", ",", "click_label", ")", ":", "\n", "        ", "click_label", "=", "np", ".", "array", "(", "click_label", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "IPS", "=", "np", ".", "sum", "(", "(", "propensities", "/", "log_propensity", ")", "*", "click_label", ",", "axis", "=", "0", ")", "/", "len", "(", "click_label", ")", "\n", "return", "IPS", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.CMAESLinearRanker.CMAESLinearRanker.softmax": [[89, 92], ["numpy.exp", "e_x.sum", "numpy.max"], "methods", ["None"], ["", "def", "softmax", "(", "self", ",", "x", ")", ":", "\n", "        ", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "+", "1e-6", "\n", "return", "e_x", "/", "(", "e_x", ".", "sum", "(", "axis", "=", "0", ")", "+", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.CMAESLinearRanker.get_doc_indexes": [[94, 98], ["numpy.array", "numpy.where"], "function", ["None"], ["", "", "def", "get_doc_indexes", "(", "result_list", ",", "doc_ids", ")", ":", "\n", "    ", "doc_ids", "=", "np", ".", "array", "(", "doc_ids", ")", "\n", "#return np.searchsorted(doc_ids,result_list, sorter=range(len(doc_ids)))", "\n", "return", "[", "np", ".", "where", "(", "doc_ids", "==", "i", ")", "[", "0", "]", "[", "0", "]", "for", "i", "in", "result_list", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRankerV2.MDPRankerV2.__init__": [[9, 87], ["ranker.AbstractRanker.AbstractRanker.__init__", "tensorflow.reset_default_graph", "numpy.random.rand", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.Variable", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.Variable", "tensorflow.train.GradientDescentOptimizer", "tensorflow.trainable_variables", "MDPRankerV2.MDPRankerV2.train_op.compute_gradients", "MDPRankerV2.MDPRankerV2.train_op.apply_gradients", "tensorflow.global_variables_initializer", "tensorflow.Session", "MDPRankerV2.MDPRankerV2.sess.run", "tensorflow.truncated_normal", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.placeholder", "tensorflow.math.exp", "tensorflow.math.divide", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.train.exponential_decay", "tensorflow.Variable", "tv.assign", "accum_vars[].assign_add", "tensorflow.clip_by_value", "tensorflow.zeros_like", "tensorflow.zeros_like", "enumerate", "tensorflow.one_hot", "tensorflow.one_hot", "tv.initialized_value", "enumerate", "numpy.sqrt", "tensorflow.log", "tensorflow.log", "float", "tensorflow.clip_by_value", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax"], ["    ", "def", "__init__", "(", "self", ",", "\n", "Nhidden_unit", ",", "\n", "Nfeature", ",", "\n", "Learningrate", ",", "\n", "Lenepisode", "=", "10", ",", "\n", "memory_size", "=", "100", ",", "\n", "batch_size", "=", "1", ",", "\n", "lr_decay", "=", "False", ",", "\n", "loss_type", "=", "'pointwise'", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "Nfeature", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "# used for multiprocessor training, otherwise has errors", "\n", "\n", "self", ".", "Nfeature", "=", "Nfeature", "\n", "self", ".", "Lenepisode", "=", "Lenepisode", "\n", "self", ".", "memory_size", "=", "memory_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "W", "=", "np", ".", "random", ".", "rand", "(", "Nfeature", ")", "\n", "# self.W = np.zeros(Nfeature)", "\n", "self", ".", "lr", "=", "Learningrate", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "self", ".", "Ntop", "=", "10", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "ite", "=", "0", "\n", "\n", "self", ".", "Nhidden_unit", "=", "Nhidden_unit", "\n", "\n", "self", ".", "input_docs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "Nfeature", "]", ")", "\n", "self", ".", "position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "self", ".", "doc_length", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "advantage", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "aW1", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "self", ".", "Nfeature", ",", "1", "]", ",", "stddev", "=", "0.1", "/", "np", ".", "sqrt", "(", "float", "(", "self", ".", "Nfeature", ")", ")", ")", ")", "\n", "# b1 = tf.Variable(tf.zeros([1, hidden_units]))", "\n", "ah1", "=", "tf", ".", "matmul", "(", "self", ".", "input_docs", ",", "self", ".", "aW1", ")", "\n", "self", ".", "doc_scores", "=", "tf", ".", "transpose", "(", "ah1", ")", "\n", "\n", "if", "loss_type", "==", "'pointwise'", ":", "\n", "            ", "self", ".", "prob", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "doc_scores", ")", "\n", "\n", "neg_log_prob", "=", "tf", ".", "reduce_sum", "(", "\n", "-", "tf", ".", "log", "(", "tf", ".", "clip_by_value", "(", "self", ".", "prob", ",", "1e-10", ",", "1.0", ")", ")", "*", "tf", ".", "one_hot", "(", "self", ".", "position", ",", "self", ".", "doc_length", ")", ",", "\n", "axis", "=", "1", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "neg_log_prob", "*", "self", ".", "advantage", ")", "\n", "\n", "", "if", "loss_type", "==", "'pairwise'", ":", "\n", "            ", "self", ".", "position2", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "self", ".", "exp", "=", "tf", ".", "math", ".", "exp", "(", "tf", ".", "clip_by_value", "(", "self", ".", "doc_scores", "[", "0", "]", "[", "self", ".", "position", "]", "-", "self", ".", "doc_scores", "[", "0", "]", "[", "self", ".", "position2", "]", ",", "-", "100", ",", "70", ")", ")", "\n", "self", ".", "P", "=", "tf", ".", "math", ".", "divide", "(", "self", ".", "exp", ",", "(", "1", "+", "self", ".", "exp", ")", ")", "\n", "\n", "\n", "neg_log_prob", "=", "tf", ".", "reduce_sum", "(", "\n", "-", "tf", ".", "log", "(", "tf", ".", "clip_by_value", "(", "self", ".", "P", ",", "1e-10", ",", "1.0", ")", ")", "*", "tf", ".", "one_hot", "(", "[", "0", "]", ",", "self", ".", "doc_length", ")", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "neg_log_prob", "*", "self", ".", "advantage", ")", "\n", "\n", "", "step", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ")", "\n", "\n", "if", "lr_decay", ":", "\n", "            ", "rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "self", ".", "lr", ",", "step", ",", "1000", ",", "0.95", ")", "\n", "", "else", ":", "\n", "            ", "rate", "=", "self", ".", "lr", "\n", "\n", "# self.train_op = tf.train.AdamOptimizer(rate)", "\n", "", "self", ".", "train_op", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "rate", ")", "\n", "\n", "# train with gradients accumulative style", "\n", "tvs", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "accum_vars", "=", "[", "tf", ".", "Variable", "(", "tf", ".", "zeros_like", "(", "tv", ".", "initialized_value", "(", ")", ")", ",", "trainable", "=", "False", ")", "for", "tv", "in", "tvs", "]", "\n", "self", ".", "zero_ops", "=", "[", "tv", ".", "assign", "(", "tf", ".", "zeros_like", "(", "tv", ")", ")", "for", "tv", "in", "accum_vars", "]", "\n", "self", ".", "gvs", "=", "self", ".", "train_op", ".", "compute_gradients", "(", "self", ".", "loss", ",", "tvs", ")", "\n", "self", ".", "accum_ops", "=", "[", "accum_vars", "[", "i", "]", ".", "assign_add", "(", "gv", "[", "0", "]", ")", "for", "i", ",", "gv", "in", "enumerate", "(", "self", ".", "gvs", ")", "]", "\n", "self", ".", "actor_train_step", "=", "self", ".", "train_op", ".", "apply_gradients", "(", "[", "(", "accum_vars", "[", "i", "]", ",", "gv", "[", "1", "]", ")", "for", "i", ",", "gv", "in", "enumerate", "(", "self", ".", "gvs", ")", "]", ")", "# gv[1] is equal to the current tvs", "\n", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRankerV2.MDPRankerV2.update_policy": [[104, 132], ["dataset.get_all_features_by_query", "len", "min", "numpy.zeros", "MDPRankerV2.MDPRankerV2.sess.run", "range", "numpy.sum", "MDPRankerV2.MDPRankerV2.sess.run", "MDPRankerV2.MDPRankerV2.sess.run", "gradient.reshape", "numpy.var", "len", "MDPRankerV2.MDPRankerV2.sess.run", "len"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "update_policy", "(", "self", ",", "query", ",", "ranklist", ",", "rewards", ",", "dataset", ")", ":", "\n", "        ", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "ndoc", "=", "len", "(", "ranklist", ")", "\n", "lenghth", "=", "min", "(", "self", ".", "Lenepisode", ",", "ndoc", ")", "\n", "\n", "# print(self.sess.run([self.prob], feed_dict={self.input_docs: feature_matrix[ranklist[:10]]}))", "\n", "\n", "gradient_vectors", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_features", ",", "lenghth", ")", ")", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "zero_ops", ")", "\n", "\n", "if", "self", ".", "loss_type", "==", "\"pointwise\"", ":", "\n", "            ", "for", "pos", "in", "range", "(", "lenghth", ")", ":", "\n", "\n", "\n", "                ", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "accum_ops", "]", ",", "feed_dict", "=", "{", "self", ".", "input_docs", ":", "feature_matrix", "[", "ranklist", "[", "pos", ":", "]", "]", ",", "\n", "self", ".", "position", ":", "[", "0", "]", ",", "\n", "self", ".", "doc_length", ":", "len", "(", "ranklist", "[", "pos", ":", "]", ")", ",", "\n", "self", ".", "advantage", ":", "rewards", "[", "pos", "]", "}", ")", "\n", "\n", "gradient", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "gvs", "]", ",", "feed_dict", "=", "{", "self", ".", "input_docs", ":", "feature_matrix", "[", "ranklist", "[", "pos", ":", "]", "]", ",", "\n", "self", ".", "position", ":", "[", "0", "]", ",", "\n", "self", ".", "doc_length", ":", "len", "(", "ranklist", "[", "pos", ":", "]", ")", ",", "\n", "self", ".", "advantage", ":", "rewards", "[", "pos", "]", "}", ")", "[", "0", "]", "[", "0", "]", "[", "0", "]", "# get gradient as np.array", "\n", "gradient_vectors", "[", ":", ",", "pos", "]", "=", "gradient", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "", "gradient_var", "=", "np", ".", "sum", "(", "np", ".", "var", "(", "gradient_vectors", ",", "axis", "=", "1", ")", ")", "\n", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "actor_train_step", "]", ")", "\n", "return", "gradient_var", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRankerV2.MDPRankerV2.record_episode": [[168, 179], ["hasattr", "len", "MDPRankerV2.MDPRankerV2.memory.append"], "methods", ["None"], ["", "", "def", "record_episode", "(", "self", ",", "query", ",", "ranklist", ",", "rewards", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'memory_counter'", ")", ":", "\n", "            ", "self", ".", "memory_counter", "=", "0", "\n", "\n", "", "if", "self", ".", "memory_size", ">", "len", "(", "self", ".", "memory", ")", ":", "\n", "            ", "self", ".", "memory", ".", "append", "(", "[", "query", ",", "ranklist", ",", "rewards", "]", ")", "\n", "", "else", ":", "\n", "            ", "index", "=", "self", ".", "memory_counter", "%", "self", ".", "memory_size", "\n", "\n", "self", ".", "memory", "[", "index", "]", "=", "[", "query", ",", "ranklist", ",", "rewards", "]", "\n", "", "self", ".", "memory_counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRankerV2.MDPRankerV2.get_query_result_list": [[180, 224], ["dataset.get_all_features_by_query", "dataset.get_candidate_docids_by_query", "len", "MDPRankerV2.MDPRankerV2.get_scores", "MDPRankerV2.MDPRankerV2.tolist", "list", "numpy.zeros", "range", "range", "MDPRankerV2.MDPRankerV2.softmax", "numpy.random.choice", "len"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax"], ["", "def", "get_query_result_list", "(", "self", ",", "dataset", ",", "query", ")", ":", "\n", "        ", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "docid_list", "=", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", "\n", "ndoc", "=", "len", "(", "docid_list", ")", "\n", "\n", "# k = np.minimum(k, ndoc)", "\n", "\n", "doc_scores", "=", "self", ".", "get_scores", "(", "feature_matrix", ")", "\n", "\n", "scoretmp", "=", "doc_scores", ".", "tolist", "(", ")", "\n", "\n", "positions", "=", "list", "(", "range", "(", "ndoc", ")", ")", "\n", "ranklist", "=", "np", ".", "zeros", "(", "ndoc", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "if", "ndoc", "==", "1", ":", "\n", "            ", "ranklist", "[", "0", "]", "=", "positions", "[", "0", "]", "\n", "return", "ranklist", "\n", "\n", "", "for", "position", "in", "range", "(", "ndoc", ")", ":", "\n", "# policy = np.exp((scoretmp - np.max(scoretmp)) / 10)", "\n", "# policy = policy / np.sum(policy)", "\n", "\n", "# softmax does not handle nan", "\n", "# probabilities = np.exp(scoretmp) / np.sum(np.exp(scoretmp))", "\n", "            ", "probabilities", "=", "self", ".", "softmax", "(", "scoretmp", ")", "\n", "\n", "# useless, extremely slow", "\n", "# probabilities = tf.nn.softmax(scoretmp)", "\n", "# probabilities = sess.run(probabilities).ravel()", "\n", "\n", "# check if policy contains Nan", "\n", "# array_sum = np.sum(probabilities)", "\n", "# if np.isnan(array_sum):", "\n", "#     print(query)", "\n", "#     print(scoretmp)", "\n", "#     print(probabilities)", "\n", "\n", "choice", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "probabilities", ")", ",", "1", ",", "p", "=", "probabilities", ")", "[", "0", "]", "\n", "ranklist", "[", "position", "]", "=", "positions", "[", "choice", "]", "\n", "\n", "del", "scoretmp", "[", "choice", "]", "\n", "del", "positions", "[", "choice", "]", "\n", "\n", "", "return", "ranklist", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRankerV2.MDPRankerV2.softmax": [[225, 228], ["numpy.exp", "numpy.exp.sum", "numpy.max"], "methods", ["None"], ["", "def", "softmax", "(", "self", ",", "x", ")", ":", "\n", "        ", "f", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "# shift values", "\n", "return", "f", "/", "f", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRankerV2.MDPRankerV2.get_all_query_result_list": [[229, 244], ["dataset.get_all_querys", "numpy.array", "docid_list.reshape.reshape.reshape", "dataset.get_all_features_by_query", "MDPRankerV2.MDPRankerV2.get_scores", "numpy.column_stack", "numpy.flip", "dataset.get_candidate_docids_by_query", "len", "docid_score_list[].argsort"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query"], ["", "def", "get_all_query_result_list", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "query_result_list", "=", "{", "}", "\n", "\n", "for", "query", "in", "dataset", ".", "get_all_querys", "(", ")", ":", "\n", "            ", "docid_list", "=", "np", ".", "array", "(", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "docid_list", "=", "docid_list", ".", "reshape", "(", "(", "len", "(", "docid_list", ")", ",", "1", ")", ")", "\n", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "score_list", "=", "self", ".", "get_scores", "(", "feature_matrix", ")", "\n", "\n", "docid_score_list", "=", "np", ".", "column_stack", "(", "(", "docid_list", ",", "score_list", ")", ")", "\n", "docid_score_list", "=", "np", ".", "flip", "(", "docid_score_list", "[", "docid_score_list", "[", ":", ",", "1", "]", ".", "argsort", "(", ")", "]", ",", "0", ")", "\n", "\n", "query_result_list", "[", "query", "]", "=", "docid_score_list", "[", ":", ",", "0", "]", "\n", "\n", "", "return", "query_result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.MDPRankerV2.MDPRankerV2.get_scores": [[245, 256], ["[].reshape", "MDPRankerV2.MDPRankerV2.sess.run"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "get_scores", "(", "self", ",", "features", ")", ":", "\n", "\n", "        ", "result", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "doc_scores", "]", ",", "feed_dict", "=", "{", "self", ".", "input_docs", ":", "features", "}", ")", "[", "0", "]", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "# array_sum = np.sum(result)", "\n", "# if np.isnan(array_sum):", "\n", "#     print(features)", "\n", "#     x = self.sess.run(self.aW1)", "\n", "#     print(x, x.shape)", "\n", "#     print(self.sess.run([self.doc_scores], feed_dict={self.input_docs: features}))", "\n", "# print(self.sess.run([self.prob], feed_dict={self.input_docs: features}))", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorCriticLinearRanker.ActorCriticLinearRanker.__init__": [[9, 42], ["ranker.AbstractRanker.AbstractRanker.__init__", "tensorflow.reset_default_graph", "numpy.random.rand", "ActorCriticLinearRanker.ActorCriticLinearRanker._build_actor", "ActorCriticLinearRanker.ActorCriticLinearRanker._build_critic", "tensorflow.global_variables_initializer", "tensorflow.Session", "ActorCriticLinearRanker.ActorCriticLinearRanker.sess.run"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__", "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorCriticLinearRanker.ActorCriticLinearRanker._build_actor", "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorNoiseCriticLinearRanker.ActorNoiseCriticLinearRanker._build_critic", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["    ", "def", "__init__", "(", "self", ",", "\n", "Nfeature", ",", "\n", "Learningrate", ",", "\n", "Nhidden_unit", "=", "256", ",", "\n", "Lenepisode", "=", "10", ",", "\n", "memory_size", "=", "100", ",", "\n", "batch_size", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "Nfeature", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "# used for multiprocessor training, otherwise has errors", "\n", "\n", "self", ".", "Nfeature", "=", "Nfeature", "\n", "self", ".", "Lenepisode", "=", "Lenepisode", "\n", "self", ".", "memory_size", "=", "memory_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "W", "=", "np", ".", "random", ".", "rand", "(", "Nfeature", ")", "\n", "# self.W = np.zeros(Nfeature)", "\n", "self", ".", "lr", "=", "Learningrate", "\n", "\n", "self", ".", "Ntop", "=", "10", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "ite", "=", "0", "\n", "\n", "self", ".", "Nhidden_unit", "=", "Nhidden_unit", "\n", "\n", "\n", "\n", "self", ".", "_build_actor", "(", ")", "\n", "self", ".", "_build_critic", "(", ")", "\n", "# Start TF session", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorCriticLinearRanker.ActorCriticLinearRanker._build_actor": [[43, 69], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.Variable", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer", "tensorflow.trainable_variables", "ActorCriticLinearRanker.ActorCriticLinearRanker.train_op.compute_gradients", "ActorCriticLinearRanker.ActorCriticLinearRanker.train_op.apply_gradients", "tensorflow.truncated_normal", "tensorflow.Variable", "tv.assign", "accum_vars[].assign_add", "tensorflow.one_hot", "tensorflow.zeros_like", "tensorflow.zeros_like", "enumerate", "tensorflow.log", "tv.initialized_value", "enumerate", "numpy.sqrt", "tensorflow.clip_by_value", "float"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax"], ["", "def", "_build_actor", "(", "self", ")", ":", "\n", "        ", "self", ".", "input_docs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "Nfeature", "]", ")", "\n", "self", ".", "position", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "self", ".", "doc_length", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "advantage", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "\n", "aW1", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "self", ".", "Nfeature", ",", "1", "]", ",", "stddev", "=", "0.1", "/", "np", ".", "sqrt", "(", "float", "(", "self", ".", "Nfeature", ")", ")", ")", ")", "\n", "# b1 = tf.Variable(tf.zeros([1, hidden_units]))", "\n", "ah1", "=", "tf", ".", "matmul", "(", "self", ".", "input_docs", ",", "aW1", ")", "\n", "self", ".", "doc_scores", "=", "tf", ".", "transpose", "(", "ah1", ")", "\n", "self", ".", "prob", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "doc_scores", ")", "\n", "\n", "neg_log_prob", "=", "tf", ".", "reduce_sum", "(", "\n", "-", "tf", ".", "log", "(", "tf", ".", "clip_by_value", "(", "self", ".", "prob", ",", "1e-10", ",", "1.0", ")", ")", "*", "tf", ".", "one_hot", "(", "self", ".", "position", ",", "self", ".", "doc_length", ")", ",", "\n", "axis", "=", "1", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "neg_log_prob", "*", "self", ".", "advantage", ")", "\n", "\n", "self", ".", "train_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", "\n", "\n", "# train with gradients accumulative style", "\n", "tvs", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "accum_vars", "=", "[", "tf", ".", "Variable", "(", "tf", ".", "zeros_like", "(", "tv", ".", "initialized_value", "(", ")", ")", ",", "trainable", "=", "False", ")", "for", "tv", "in", "tvs", "]", "\n", "self", ".", "zero_ops", "=", "[", "tv", ".", "assign", "(", "tf", ".", "zeros_like", "(", "tv", ")", ")", "for", "tv", "in", "accum_vars", "]", "\n", "gvs", "=", "self", ".", "train_op", ".", "compute_gradients", "(", "loss", ",", "tvs", ")", "\n", "self", ".", "accum_ops", "=", "[", "accum_vars", "[", "i", "]", ".", "assign_add", "(", "gv", "[", "0", "]", ")", "for", "i", ",", "gv", "in", "enumerate", "(", "gvs", ")", "]", "\n", "self", ".", "actor_train_step", "=", "self", ".", "train_op", ".", "apply_gradients", "(", "[", "(", "accum_vars", "[", "i", "]", ",", "gv", "[", "1", "]", ")", "for", "i", ",", "gv", "in", "enumerate", "(", "gvs", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorCriticLinearRanker.ActorCriticLinearRanker._build_critic": [[70, 86], ["tensorflow.placeholder", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.add", "tensorflow.nn.relu", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.add", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.truncated_normal", "tensorflow.zeros", "tensorflow.matmul", "tensorflow.truncated_normal", "tensorflow.zeros", "tensorflow.matmul", "tensorflow.squared_difference", "tensorflow.train.AdamOptimizer", "numpy.sqrt", "numpy.sqrt", "float", "float"], "methods", ["None"], ["", "def", "_build_critic", "(", "self", ")", ":", "\n", "        ", "self", ".", "R", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "\n", "cW1", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "self", ".", "Nfeature", ",", "self", ".", "Nhidden_unit", "]", ",", "stddev", "=", "0.1", "/", "np", ".", "sqrt", "(", "float", "(", "self", ".", "Nfeature", ")", ")", ")", ")", "\n", "cb1", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", ",", "self", ".", "Nhidden_unit", "]", ")", ")", "\n", "ch1", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "self", ".", "input_docs", ",", "cW1", ")", ",", "cb1", ")", "\n", "ch1", "=", "tf", ".", "nn", ".", "relu", "(", "ch1", ")", "\n", "\n", "# Second layer -- linear classifier for action logits", "\n", "cW2", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "self", ".", "Nhidden_unit", ",", "1", "]", ",", "stddev", "=", "0.1", "/", "np", ".", "sqrt", "(", "float", "(", "self", ".", "Nhidden_unit", ")", ")", ")", ")", "\n", "cb2", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", "]", ")", ")", "\n", "ch2", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "ch1", ",", "cW2", ")", ",", "cb2", ")", "\n", "ch2", "=", "tf", ".", "transpose", "(", "ch2", ")", "\n", "self", ".", "_estimate_advantage", "=", "tf", ".", "reduce_sum", "(", "ch2", ",", "axis", "=", "1", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "squared_difference", "(", "self", ".", "_estimate_advantage", ",", "self", ".", "R", ")", ")", "\n", "self", ".", "critic_train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", ".", "minimize", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorCriticLinearRanker.ActorCriticLinearRanker.update_actor_critic": [[87, 111], ["dataset.get_all_features_by_query", "len", "min", "ActorCriticLinearRanker.ActorCriticLinearRanker.sess.run", "range", "ActorCriticLinearRanker.ActorCriticLinearRanker.sess.run", "range", "ActorCriticLinearRanker.ActorCriticLinearRanker.sess.run", "ActorCriticLinearRanker.ActorCriticLinearRanker.sess.run", "ActorCriticLinearRanker.ActorCriticLinearRanker.sess.run", "len"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "update_actor_critic", "(", "self", ",", "query", ",", "ranklist", ",", "rewards", ",", "dataset", ")", ":", "\n", "        ", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "ndoc", "=", "len", "(", "ranklist", ")", "\n", "lenghth", "=", "min", "(", "self", ".", "Lenepisode", ",", "ndoc", ")", "\n", "\n", "\n", "# print(self.sess.run([self.prob], feed_dict={self.input_docs: feature_matrix[ranklist[:10]]}))", "\n", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "zero_ops", ")", "\n", "\n", "for", "pos", "in", "range", "(", "lenghth", ")", ":", "\n", "            ", "estimate_advantage", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "_estimate_advantage", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "input_docs", ":", "feature_matrix", "[", "ranklist", "[", "pos", ":", "]", "]", "}", ")", "[", "0", "]", "[", "0", "]", "\n", "advantage", "=", "rewards", "[", "pos", "]", "-", "estimate_advantage", "\n", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "accum_ops", "]", ",", "feed_dict", "=", "{", "self", ".", "input_docs", ":", "feature_matrix", "[", "ranklist", "[", "pos", ":", "]", "]", ",", "\n", "self", ".", "position", ":", "[", "0", "]", ",", "\n", "self", ".", "doc_length", ":", "len", "(", "ranklist", "[", "pos", ":", "]", ")", ",", "\n", "self", ".", "advantage", ":", "advantage", "}", ")", "\n", "", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "actor_train_step", "]", ")", "\n", "\n", "for", "pos", "in", "range", "(", "lenghth", ")", ":", "\n", "            ", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "critic_train_step", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "input_docs", ":", "feature_matrix", "[", "ranklist", "[", "pos", ":", "]", "]", ",", "\n", "self", ".", "R", ":", "rewards", "[", "pos", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorCriticLinearRanker.ActorCriticLinearRanker.record_episode": [[114, 125], ["hasattr", "len", "ActorCriticLinearRanker.ActorCriticLinearRanker.memory.append"], "methods", ["None"], ["", "", "def", "record_episode", "(", "self", ",", "query", ",", "ranklist", ",", "rewards", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'memory_counter'", ")", ":", "\n", "            ", "self", ".", "memory_counter", "=", "0", "\n", "\n", "", "if", "self", ".", "memory_size", ">", "len", "(", "self", ".", "memory", ")", ":", "\n", "            ", "self", ".", "memory", ".", "append", "(", "[", "query", ",", "ranklist", ",", "rewards", "]", ")", "\n", "", "else", ":", "\n", "            ", "index", "=", "self", ".", "memory_counter", "%", "self", ".", "memory_size", "\n", "\n", "self", ".", "memory", "[", "index", "]", "=", "[", "query", ",", "ranklist", ",", "rewards", "]", "\n", "", "self", ".", "memory_counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorCriticLinearRanker.ActorCriticLinearRanker.get_query_result_list": [[126, 154], ["dataset.get_all_features_by_query", "dataset.get_candidate_docids_by_query", "len", "ActorCriticLinearRanker.ActorCriticLinearRanker.get_scores", "ActorCriticLinearRanker.ActorCriticLinearRanker.tolist", "list", "numpy.zeros", "range", "range", "ActorCriticLinearRanker.ActorCriticLinearRanker.softmax", "numpy.random.choice", "len"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax"], ["", "def", "get_query_result_list", "(", "self", ",", "dataset", ",", "query", ")", ":", "\n", "        ", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "docid_list", "=", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", "\n", "ndoc", "=", "len", "(", "docid_list", ")", "\n", "\n", "# k = np.minimum(k, ndoc)", "\n", "\n", "doc_scores", "=", "self", ".", "get_scores", "(", "feature_matrix", ")", "\n", "\n", "scoretmp", "=", "doc_scores", ".", "tolist", "(", ")", "\n", "\n", "positions", "=", "list", "(", "range", "(", "ndoc", ")", ")", "\n", "ranklist", "=", "np", ".", "zeros", "(", "ndoc", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "if", "ndoc", "==", "1", ":", "\n", "            ", "ranklist", "[", "0", "]", "=", "positions", "[", "0", "]", "\n", "return", "ranklist", "\n", "\n", "", "for", "position", "in", "range", "(", "ndoc", ")", ":", "\n", "            ", "probabilities", "=", "self", ".", "softmax", "(", "scoretmp", ")", "\n", "\n", "choice", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "probabilities", ")", ",", "1", ",", "p", "=", "probabilities", ")", "[", "0", "]", "\n", "ranklist", "[", "position", "]", "=", "positions", "[", "choice", "]", "\n", "\n", "del", "scoretmp", "[", "choice", "]", "\n", "del", "positions", "[", "choice", "]", "\n", "\n", "", "return", "ranklist", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorCriticLinearRanker.ActorCriticLinearRanker.softmax": [[155, 158], ["numpy.exp", "numpy.exp.sum", "numpy.max"], "methods", ["None"], ["", "def", "softmax", "(", "self", ",", "x", ")", ":", "\n", "        ", "f", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "# shift values", "\n", "return", "f", "/", "f", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorCriticLinearRanker.ActorCriticLinearRanker.get_all_query_result_list": [[159, 174], ["dataset.get_all_querys", "numpy.array", "docid_list.reshape.reshape.reshape", "dataset.get_all_features_by_query", "ActorCriticLinearRanker.ActorCriticLinearRanker.get_scores", "numpy.column_stack", "numpy.flip", "dataset.get_candidate_docids_by_query", "len", "docid_score_list[].argsort"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query"], ["", "def", "get_all_query_result_list", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "query_result_list", "=", "{", "}", "\n", "\n", "for", "query", "in", "dataset", ".", "get_all_querys", "(", ")", ":", "\n", "            ", "docid_list", "=", "np", ".", "array", "(", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "docid_list", "=", "docid_list", ".", "reshape", "(", "(", "len", "(", "docid_list", ")", ",", "1", ")", ")", "\n", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "score_list", "=", "self", ".", "get_scores", "(", "feature_matrix", ")", "\n", "\n", "docid_score_list", "=", "np", ".", "column_stack", "(", "(", "docid_list", ",", "score_list", ")", ")", "\n", "docid_score_list", "=", "np", ".", "flip", "(", "docid_score_list", "[", "docid_score_list", "[", ":", ",", "1", "]", ".", "argsort", "(", ")", "]", ",", "0", ")", "\n", "\n", "query_result_list", "[", "query", "]", "=", "docid_score_list", "[", ":", ",", "0", "]", "\n", "\n", "", "return", "query_result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorCriticLinearRanker.ActorCriticLinearRanker.get_scores": [[175, 178], ["[].reshape", "ActorCriticLinearRanker.ActorCriticLinearRanker.sess.run"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "get_scores", "(", "self", ",", "features", ")", ":", "\n", "        ", "result", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "doc_scores", "]", ",", "feed_dict", "=", "{", "self", ".", "input_docs", ":", "features", "}", ")", "[", "0", "]", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorNoiseCriticLinearRanker.ActorNoiseCriticLinearRanker.__init__": [[9, 17], ["ranker.ActorCriticLinearRanker.ActorCriticLinearRanker.__init__"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "Nfeature", ",", "\n", "Learningrate", ",", "\n", "Nhidden_unit", "=", "256", ",", "\n", "Lenepisode", "=", "10", ",", "\n", "memory_size", "=", "100", ",", "\n", "batch_size", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "Nfeature", ",", "Learningrate", ",", "Nhidden_unit", ",", "Lenepisode", ",", "memory_size", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorNoiseCriticLinearRanker.ActorNoiseCriticLinearRanker._build_critic": [[18, 39], ["tensorflow.placeholder", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.add", "tensorflow.nn.relu", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.add", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.sigmoid", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.truncated_normal", "tensorflow.zeros", "tensorflow.matmul", "tensorflow.truncated_normal", "tensorflow.zeros", "tensorflow.matmul", "tensorflow.train.AdamOptimizer", "numpy.sqrt", "numpy.sqrt", "float", "float"], "methods", ["None"], ["", "def", "_build_critic", "(", "self", ")", ":", "\n", "        ", "self", ".", "c", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "\n", "cW1", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "truncated_normal", "(", "[", "self", ".", "Nfeature", ",", "self", ".", "Nhidden_unit", "]", ",", "stddev", "=", "0.1", "/", "np", ".", "sqrt", "(", "float", "(", "self", ".", "Nfeature", ")", ")", ")", ")", "\n", "cb1", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", ",", "self", ".", "Nhidden_unit", "]", ")", ")", "\n", "ch1", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "self", ".", "input_docs", ",", "cW1", ")", ",", "cb1", ")", "\n", "ch1", "=", "tf", ".", "nn", ".", "relu", "(", "ch1", ")", "\n", "\n", "# Second layer -- linear classifier for action logits", "\n", "cW2", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "self", ".", "Nhidden_unit", ",", "1", "]", ",", "stddev", "=", "0.1", "/", "np", ".", "sqrt", "(", "float", "(", "self", ".", "Nhidden_unit", ")", ")", ")", ")", "\n", "cb2", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", "]", ")", ")", "\n", "ch2", "=", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "ch1", ",", "cW2", ")", ",", "cb2", ")", "\n", "ch2", "=", "tf", ".", "transpose", "(", "ch2", ")", "\n", "logits", "=", "tf", ".", "reduce_sum", "(", "ch2", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "_click_prob", "=", "tf", ".", "sigmoid", "(", "logits", ")", "\n", "\n", "loss", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "c", ",", "logits", "=", "logits", ")", "\n", "\n", "self", ".", "critic_train_step", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", ".", "minimize", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ActorNoiseCriticLinearRanker.ActorNoiseCriticLinearRanker.update_actor_critic": [[40, 70], ["dataset.get_all_features_by_query", "len", "min", "ActorNoiseCriticLinearRanker.ActorNoiseCriticLinearRanker.sess.run", "range", "ActorNoiseCriticLinearRanker.ActorNoiseCriticLinearRanker.sess.run", "range", "ActorNoiseCriticLinearRanker.ActorNoiseCriticLinearRanker.sess.run", "ActorNoiseCriticLinearRanker.ActorNoiseCriticLinearRanker.sess.run", "ActorNoiseCriticLinearRanker.ActorNoiseCriticLinearRanker.sess.run", "len"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "update_actor_critic", "(", "self", ",", "query", ",", "ranklist", ",", "rewards", ",", "dataset", ")", ":", "\n", "        ", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "ndoc", "=", "len", "(", "ranklist", ")", "\n", "lenghth", "=", "min", "(", "self", ".", "Lenepisode", ",", "ndoc", ")", "\n", "\n", "# print(self.sess.run([self.prob], feed_dict={self.input_docs: feature_matrix[ranklist[:10]]}))", "\n", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "zero_ops", ")", "\n", "\n", "for", "pos", "in", "range", "(", "lenghth", ")", ":", "\n", "            ", "click_prob", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "_click_prob", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "input_docs", ":", "feature_matrix", "[", "ranklist", "[", "pos", ":", "]", "]", "}", ")", "[", "0", "]", "[", "0", "]", "\n", "if", "rewards", "[", "pos", "]", ">", "0", ":", "\n", "                ", "advantage", "=", "rewards", "[", "pos", "]", "*", "click_prob", "\n", "", "else", ":", "\n", "                ", "advantage", "=", "rewards", "[", "pos", "]", "*", "(", "1", "-", "click_prob", ")", "\n", "", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "accum_ops", "]", ",", "feed_dict", "=", "{", "self", ".", "input_docs", ":", "feature_matrix", "[", "ranklist", "[", "pos", ":", "]", "]", ",", "\n", "self", ".", "position", ":", "[", "0", "]", ",", "\n", "self", ".", "doc_length", ":", "len", "(", "ranklist", "[", "pos", ":", "]", ")", ",", "\n", "self", ".", "advantage", ":", "advantage", "}", ")", "\n", "", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "actor_train_step", "]", ")", "\n", "\n", "for", "pos", "in", "range", "(", "lenghth", ")", ":", "\n", "            ", "if", "rewards", "[", "pos", "]", ">", "0", ":", "\n", "                ", "click_label", "=", "1", "\n", "", "else", ":", "\n", "                ", "click_label", "=", "0", "\n", "", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "critic_train_step", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "input_docs", ":", "feature_matrix", "[", "ranklist", "[", "pos", ":", "]", "]", ",", "\n", "self", ".", "c", ":", "click_label", "}", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ESLinearRanker.ESLinearRanker.__init__": [[6, 10], ["ranker.COLTRLinearRanker.COLTRLinearRanker.__init__"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "learning_rate", ",", "sigma", ",", "tau", ",", "gamma", ",", "\n", "learning_rate_decay", "=", "1", ",", "random_initial", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_features", ",", "learning_rate", ",", "1", ",", "tau", ",", "gamma", ",", "learning_rate_decay", ",", "random_initial", ")", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ESLinearRanker.ESLinearRanker.sample_random_vectors": [[11, 14], ["numpy.random.randn"], "methods", ["None"], ["", "def", "sample_random_vectors", "(", "self", ",", "n", ")", ":", "\n", "        ", "random_vectors", "=", "np", ".", "random", ".", "randn", "(", "n", ",", "self", ".", "num_features", ")", "*", "self", ".", "sigma", "\n", "return", "random_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ESLinearRanker.ESLinearRanker.sample_canditate_rankers": [[15, 18], ["None"], "methods", ["None"], ["", "def", "sample_canditate_rankers", "(", "self", ",", "unit_vectors", ")", ":", "\n", "        ", "new_weights", "=", "self", ".", "weights", "+", "unit_vectors", "\n", "return", "new_weights", "\n", "", "def", "get_nomalized_SNIPS", "(", "self", ",", "canditate_rankers", ",", "record", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ESLinearRanker.ESLinearRanker.get_nomalized_SNIPS": [[18, 78], ["numpy.vstack", "numpy.array", "numpy.dot", "numpy.dot", "ESLinearRanker.ESLinearRanker.softmax", "ESLinearRanker.ESLinearRanker.softmax", "log_probs.reshape.reshape.reshape", "numpy.amin", "numpy.amin", "numpy.amax", "numpy.amax", "numpy.exp", "numpy.exp", "log_probs.reshape.reshape.reshape", "range", "ESLinearRanker.ESLinearRanker.compute_SNIPS", "numpy.sum", "numpy.sum", "len", "numpy.vstack", "numpy.vstack", "numpy.amin", "numpy.amin", "numpy.amax", "numpy.amax", "numpy.exp", "numpy.exp", "log_probs.reshape.reshape.reshape", "numpy.where", "len", "numpy.sum", "numpy.where", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.compute_SNIPS"], ["", "def", "get_nomalized_SNIPS", "(", "self", ",", "canditate_rankers", ",", "record", ")", ":", "\n", "        ", "current_ranker", "=", "self", ".", "weights", "\n", "all_ranker", "=", "np", ".", "vstack", "(", "(", "current_ranker", ",", "canditate_rankers", ")", ")", "# all rankers weights", "\n", "query", "=", "record", "[", "0", "]", "\n", "result_list", "=", "record", "[", "1", "]", "\n", "click_label", "=", "record", "[", "2", "]", "\n", "log_weight", "=", "np", ".", "array", "(", "record", "[", "3", "]", ")", "\n", "\n", "doc_indexes", "=", "[", "np", ".", "where", "(", "self", ".", "docid_list", "==", "i", ")", "[", "0", "]", "[", "0", "]", "for", "i", "in", "result_list", "]", "\n", "scores", "=", "np", ".", "dot", "(", "self", ".", "feature_matrix", ",", "all_ranker", ".", "T", ")", "\n", "log_score", "=", "np", ".", "dot", "(", "self", ".", "feature_matrix", ",", "log_weight", ".", "T", ")", "\n", "\n", "probs", "=", "self", ".", "softmax", "(", "scores", ")", "\n", "log_probs", "=", "self", ".", "softmax", "(", "log_score", ")", "\n", "log_probs", "=", "log_probs", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "propensities", "=", "probs", "[", "doc_indexes", "[", "0", "]", "]", "\n", "log_propensity", "=", "log_probs", "[", "doc_indexes", "[", "0", "]", "]", "\n", "\n", "# renormalize", "\n", "scores", "[", "doc_indexes", "[", "0", "]", "]", "=", "np", ".", "amin", "(", "scores", ")", "\n", "log_score", "[", "doc_indexes", "[", "0", "]", "]", "=", "np", ".", "amin", "(", "log_score", ")", "\n", "\n", "scores", "-=", "np", ".", "amax", "(", "scores", ")", "\n", "log_score", "-=", "np", ".", "amax", "(", "log_score", ")", "\n", "\n", "exp_scores", "=", "np", ".", "exp", "(", "scores", ")", "\n", "exp_log_score", "=", "np", ".", "exp", "(", "log_score", ")", "\n", "\n", "exp_scores", "[", "doc_indexes", "[", "0", "]", "]", "=", "0", "\n", "exp_log_score", "[", "doc_indexes", "[", "0", "]", "]", "=", "0", "\n", "\n", "probs", "=", "exp_scores", "/", "np", ".", "sum", "(", "exp_scores", ")", "\n", "log_probs", "=", "exp_log_score", "/", "np", ".", "sum", "(", "exp_log_score", ")", "\n", "log_probs", "=", "log_probs", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "doc_indexes", ")", ")", ":", "\n", "            ", "propensities", "=", "np", ".", "vstack", "(", "(", "propensities", ",", "probs", "[", "doc_indexes", "[", "i", "]", "]", ")", ")", "\n", "log_propensity", "=", "np", ".", "vstack", "(", "(", "log_propensity", ",", "log_probs", "[", "doc_indexes", "[", "i", "]", "]", ")", ")", "\n", "scores", "[", "doc_indexes", "[", ":", "i", "+", "1", "]", "]", "=", "np", ".", "amin", "(", "scores", ")", "\n", "log_score", "[", "doc_indexes", "[", ":", "i", "+", "1", "]", "]", "=", "np", ".", "amin", "(", "log_score", ")", "\n", "scores", "-=", "np", ".", "amax", "(", "scores", ")", "\n", "log_score", "-=", "np", ".", "amax", "(", "log_score", ")", "\n", "exp_scores", "=", "np", ".", "exp", "(", "scores", ")", "\n", "exp_log_score", "=", "np", ".", "exp", "(", "log_score", ")", "\n", "exp_scores", "[", "doc_indexes", "[", ":", "i", "+", "1", "]", "]", "=", "0", "\n", "exp_log_score", "[", "doc_indexes", "[", ":", "i", "+", "1", "]", "]", "=", "0", "\n", "probs", "=", "exp_scores", "/", "np", ".", "sum", "(", "exp_scores", "+", "1e-8", ")", "\n", "log_probs", "=", "exp_log_score", "/", "(", "np", ".", "sum", "(", "exp_log_score", ")", "+", "1e-8", ")", "\n", "log_probs", "=", "log_probs", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "SNIPS", "=", "self", ".", "compute_SNIPS", "(", "log_propensity", ",", "propensities", ",", "click_label", ")", "\n", "winners", "=", "np", ".", "where", "(", "SNIPS", "<", "SNIPS", "[", "0", "]", ")", "[", "0", "]", "\n", "#", "\n", "# IPS = self.compute_IPS(log_propensity, propensities, click_label)", "\n", "# winners = np.where(IPS < IPS[0])[0]", "\n", "\n", "if", "len", "(", "winners", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "SNIPS", "*", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ESLinearRanker.ESLinearRanker.get_SNIPS": [[81, 119], ["numpy.vstack", "len", "len", "numpy.array", "ESLinearRanker.get_doc_indexes", "dataset.get_all_features_by_query", "numpy.dot", "numpy.dot", "log_propensity.reshape.reshape.reshape", "numpy.where", "len", "dataset.get_candidate_docids_by_query", "ESLinearRanker.ESLinearRanker.softmax", "ESLinearRanker.ESLinearRanker.softmax", "len", "ESLinearRanker.ESLinearRanker.compute_SNIPS", "ESLinearRanker.ESLinearRanker.compute_SNIPS"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.get_doc_indexes", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.compute_SNIPS", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.compute_SNIPS"], ["", "def", "get_SNIPS", "(", "self", ",", "canditate_rankers", ",", "records", ",", "dataset", ")", ":", "\n", "        ", "current_ranker", "=", "self", ".", "weights", "\n", "all_ranker", "=", "np", ".", "vstack", "(", "(", "current_ranker", ",", "canditate_rankers", ")", ")", "# all rankers weights", "\n", "select_size", "=", "50", "\n", "if", "(", "len", "(", "records", ")", "<", "select_size", ")", ":", "\n", "            ", "selected", "=", "records", "\n", "", "else", ":", "\n", "            ", "selected", "=", "records", "[", "-", "select_size", ":", "]", "\n", "", "for", "record", "in", "selected", ":", "\n", "            ", "query", "=", "record", "[", "0", "]", "\n", "result_list", "=", "record", "[", "1", "]", "\n", "click_label", "=", "record", "[", "2", "]", "\n", "log_weight", "=", "np", ".", "array", "(", "record", "[", "3", "]", ")", "\n", "\n", "doc_indexes", "=", "get_doc_indexes", "(", "result_list", ",", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "\n", "scores", "=", "np", ".", "dot", "(", "feature_matrix", ",", "all_ranker", ".", "T", ")", "\n", "log_score", "=", "np", ".", "dot", "(", "feature_matrix", ",", "log_weight", ".", "T", ")", "\n", "\n", "propensities", "=", "self", ".", "softmax", "(", "scores", ")", "[", "doc_indexes", "]", "\n", "log_propensity", "=", "self", ".", "softmax", "(", "log_score", ")", "[", "doc_indexes", "]", "\n", "log_propensity", "=", "log_propensity", ".", "reshape", "(", "len", "(", "result_list", ")", ",", "1", ")", "\n", "\n", "try", ":", "\n", "                ", "SNIPS", "+=", "self", ".", "compute_SNIPS", "(", "log_propensity", ",", "propensities", ",", "click_label", ")", "\n", "", "except", "NameError", ":", "\n", "                ", "SNIPS", "=", "self", ".", "compute_SNIPS", "(", "log_propensity", ",", "propensities", ",", "click_label", ")", "\n", "", "", "SNIPS", "/=", "len", "(", "records", ")", "\n", "#print(SNIPS)", "\n", "winners", "=", "np", ".", "where", "(", "SNIPS", "<", "SNIPS", "[", "0", "]", ")", "[", "0", "]", "\n", "\n", "# IPS = self.compute_IPS(log_propensity, propensities, click_label)", "\n", "# winners = np.where(IPS < IPS[0])[0]", "\n", "\n", "if", "len", "(", "winners", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "SNIPS", "*", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ESLinearRanker.ESLinearRanker.softmax": [[120, 123], ["numpy.exp", "e_x.sum", "numpy.max"], "methods", ["None"], ["", "def", "softmax", "(", "self", ",", "x", ")", ":", "\n", "        ", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "+", "1e-6", "\n", "return", "e_x", "/", "(", "e_x", ".", "sum", "(", "axis", "=", "0", ")", "+", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ESLinearRanker.get_doc_indexes": [[124, 128], ["numpy.array", "numpy.where"], "function", ["None"], ["", "", "def", "get_doc_indexes", "(", "result_list", ",", "doc_ids", ")", ":", "\n", "    ", "doc_ids", "=", "np", ".", "array", "(", "doc_ids", ")", "\n", "#return np.searchsorted(doc_ids,result_list, sorter=range(len(doc_ids)))", "\n", "return", "[", "np", ".", "where", "(", "doc_ids", "==", "i", ")", "[", "0", "]", "[", "0", "]", "for", "i", "in", "result_list", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDNeuralRanker.PDGDNeuralRanker.__init__": [[5, 23], ["PDGDNeuralRanker.PDGDNeuralRanker.hidden_layers.append", "numpy.random.normal", "PDGDNeuralRanker.PDGDNeuralRanker.hidden_layers.append", "PDGDNeuralRanker.PDGDNeuralRanker.biases.append", "PDGDNeuralRanker.PDGDNeuralRanker.__init__.normal"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "learning_rate", ",", "hidden_layers", ",", "tau", "=", "1", ",", "learning_rate_decay", "=", "1", ",", "random_initial", "=", "True", ")", ":", "\n", "        ", "def", "normal", "(", "init", ",", "shape", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "normal", "(", "0.", ",", "init", ",", "shape", ")", "\n", "\n", "", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "hidden_layer_nodes", "=", "hidden_layers", "\n", "self", ".", "hidden_layers", "=", "[", "]", "\n", "self", ".", "biases", "=", "[", "]", "\n", "prev_units", "=", "num_features", "\n", "for", "n_units", "in", "hidden_layers", ":", "\n", "            ", "init", "=", "1.", "/", "prev_units", "\n", "self", ".", "hidden_layers", ".", "append", "(", "normal", "(", "init", ",", "(", "prev_units", ",", "n_units", ")", ")", ")", "\n", "self", ".", "biases", ".", "append", "(", "normal", "(", "init", ",", "n_units", ")", "[", "None", ",", ":", "]", ")", "\n", "prev_units", "=", "n_units", "\n", "", "self", ".", "hidden_layers", ".", "append", "(", "normal", "(", "1.", "/", "prev_units", ",", "(", "prev_units", ",", "1", ")", ")", ")", "\n", "self", ".", "learning_rate_decay", "=", "learning_rate_decay", "\n", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDNeuralRanker.PDGDNeuralRanker.get_scores": [[24, 36], ["zip", "numpy.dot", "PDGDNeuralRanker.PDGDNeuralRanker.activations.append", "numpy.dot", "PDGDNeuralRanker.PDGDNeuralRanker.activations.append", "numpy.exp"], "methods", ["None"], ["", "def", "get_scores", "(", "self", ",", "features", ")", ":", "\n", "        ", "prev_layer", "=", "features", "\n", "self", ".", "input", "=", "features", "\n", "self", ".", "activations", "=", "[", "prev_layer", "]", "\n", "for", "hidden_layer", ",", "bias", "in", "zip", "(", "self", ".", "hidden_layers", "[", ":", "-", "1", "]", ",", "self", ".", "biases", ")", ":", "\n", "            ", "prev_layer", "=", "np", ".", "dot", "(", "prev_layer", ",", "hidden_layer", ")", "\n", "prev_layer", "+=", "bias", "\n", "prev_layer", "=", "1.", "/", "(", "1.", "+", "np", ".", "exp", "(", "-", "prev_layer", ")", ")", "\n", "self", ".", "activations", ".", "append", "(", "prev_layer", ")", "\n", "", "result", "=", "np", ".", "dot", "(", "prev_layer", ",", "self", ".", "hidden_layers", "[", "-", "1", "]", ")", "\n", "self", ".", "activations", ".", "append", "(", "result", ")", "\n", "return", "result", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDNeuralRanker.PDGDNeuralRanker.backpropagate": [[37, 53], ["numpy.expand_dims", "range", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.sum", "derivatives.append", "len"], "methods", ["None"], ["", "def", "backpropagate", "(", "self", ",", "doc_ind", ",", "doc_weights", ")", ":", "\n", "        ", "activations", "=", "[", "a", "[", "doc_ind", ",", ":", "]", "for", "a", "in", "self", ".", "activations", "]", "\n", "doc_weights", "=", "np", ".", "expand_dims", "(", "doc_weights", ",", "axis", "=", "1", ")", "\n", "cur_der", "=", "(", "np", ".", "dot", "(", "activations", "[", "-", "2", "]", ".", "T", ",", "doc_weights", ")", ",", "None", ")", "\n", "derivatives", "=", "[", "cur_der", "]", "\n", "prev_der", "=", "doc_weights", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "hidden_layers", ")", "-", "1", ")", ":", "\n", "            ", "prev_der", "=", "np", ".", "dot", "(", "prev_der", ",", "self", ".", "hidden_layers", "[", "-", "i", "-", "1", "]", ".", "T", ")", "\n", "prev_der", "*=", "activations", "[", "-", "i", "-", "2", "]", "*", "(", "1.", "-", "activations", "[", "-", "i", "-", "2", "]", ")", "\n", "\n", "w_der", "=", "np", ".", "dot", "(", "activations", "[", "-", "i", "-", "3", "]", ".", "T", ",", "prev_der", ")", "\n", "b_der", "=", "np", ".", "sum", "(", "prev_der", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "derivatives", ".", "append", "(", "(", "w_der", ",", "b_der", ")", ")", "\n", "\n", "", "return", "derivatives", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDNeuralRanker.PDGDNeuralRanker.get_query_result_list": [[54, 70], ["dataset.get_all_features_by_query", "numpy.array", "numpy.minimum", "PDGDNeuralRanker.PDGDNeuralRanker.get_scores", "PDGDNeuralRanker.PDGDNeuralRanker._recursive_choice", "dataset.get_candidate_docids_by_query", "numpy.amax", "numpy.copy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker._recursive_choice", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query"], ["", "def", "get_query_result_list", "(", "self", ",", "dataset", ",", "query", ",", "random", "=", "False", ")", ":", "\n", "        ", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "docid_list", "=", "np", ".", "array", "(", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "n_docs", "=", "docid_list", ".", "shape", "[", "0", "]", "\n", "\n", "k", "=", "np", ".", "minimum", "(", "10", ",", "n_docs", ")", "\n", "\n", "doc_scores", "=", "self", ".", "get_scores", "(", "feature_matrix", ")", "\n", "\n", "doc_scores", "+=", "18", "-", "np", ".", "amax", "(", "doc_scores", ")", "\n", "\n", "ranking", "=", "self", ".", "_recursive_choice", "(", "np", ".", "copy", "(", "doc_scores", ")", ",", "\n", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "k", ",", "\n", "random", ")", "\n", "return", "ranking", ",", "doc_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDNeuralRanker.PDGDNeuralRanker.get_all_query_result_list": [[71, 86], ["dataset.get_all_querys", "numpy.array", "docid_list.reshape.reshape.reshape", "dataset.get_all_features_by_query", "PDGDNeuralRanker.PDGDNeuralRanker.get_scores", "numpy.column_stack", "numpy.flip", "dataset.get_candidate_docids_by_query", "len", "docid_score_list[].argsort"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query"], ["", "def", "get_all_query_result_list", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "query_result_list", "=", "{", "}", "\n", "\n", "for", "query", "in", "dataset", ".", "get_all_querys", "(", ")", ":", "\n", "            ", "docid_list", "=", "np", ".", "array", "(", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "docid_list", "=", "docid_list", ".", "reshape", "(", "(", "len", "(", "docid_list", ")", ",", "1", ")", ")", "\n", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "score_list", "=", "self", ".", "get_scores", "(", "feature_matrix", ")", "\n", "\n", "docid_score_list", "=", "np", ".", "column_stack", "(", "(", "docid_list", ",", "score_list", ")", ")", "\n", "docid_score_list", "=", "np", ".", "flip", "(", "docid_score_list", "[", "docid_score_list", "[", ":", ",", "1", "]", ".", "argsort", "(", ")", "]", ",", "0", ")", "\n", "\n", "query_result_list", "[", "query", "]", "=", "docid_score_list", "[", ":", ",", "0", "]", "\n", "\n", "", "return", "query_result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDNeuralRanker.PDGDNeuralRanker._recursive_choice": [[87, 118], ["numpy.amin", "numpy.exp", "numpy.sum", "numpy.minimum", "numpy.concatenate", "numpy.amax", "numpy.sum", "numpy.random.choice", "numpy.random.choice", "PDGDNeuralRanker.PDGDNeuralRanker._recursive_choice", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker._recursive_choice"], ["", "def", "_recursive_choice", "(", "self", ",", "scores", ",", "incomplete_ranking", ",", "k_left", ",", "random", ")", ":", "\n", "        ", "n_docs", "=", "scores", ".", "shape", "[", "0", "]", "\n", "\n", "scores", "[", "incomplete_ranking", "]", "=", "np", ".", "amin", "(", "scores", ")", "\n", "\n", "scores", "+=", "18", "-", "np", ".", "amax", "(", "scores", ")", "\n", "exp_scores", "=", "np", ".", "exp", "(", "scores", "/", "self", ".", "tau", ")", "\n", "\n", "exp_scores", "[", "incomplete_ranking", "]", "=", "0", "\n", "probs", "=", "exp_scores", "/", "np", ".", "sum", "(", "exp_scores", ")", "\n", "\n", "safe_n", "=", "np", ".", "sum", "(", "probs", ">", "10", "**", "(", "-", "4", ")", "/", "n_docs", ")", "\n", "\n", "safe_k", "=", "np", ".", "minimum", "(", "safe_n", ",", "k_left", ")", "\n", "if", "random", ":", "\n", "            ", "next_ranking", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "n_docs", ")", ",", "\n", "replace", "=", "False", ",", "\n", "size", "=", "safe_k", ")", "\n", "", "else", ":", "\n", "            ", "next_ranking", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "n_docs", ")", ",", "\n", "replace", "=", "False", ",", "\n", "p", "=", "probs", ",", "\n", "size", "=", "safe_k", ")", "\n", "\n", "", "ranking", "=", "np", ".", "concatenate", "(", "(", "incomplete_ranking", ",", "next_ranking", ")", ")", "\n", "k_left", "=", "k_left", "-", "safe_k", "\n", "\n", "if", "k_left", ">", "0", ":", "\n", "            ", "return", "self", ".", "_recursive_choice", "(", "scores", ",", "ranking", ",", "k_left", ",", "random", ")", "\n", "", "else", ":", "\n", "            ", "return", "ranking", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDNeuralRanker.PDGDNeuralRanker.update_to_clicks": [[119, 183], ["numpy.tile", "numpy.repeat", "numpy.exp", "numpy.exp", "numpy.maximum", "numpy.minimum", "PDGDNeuralRanker.PDGDNeuralRanker._calculate_unbias_weights", "numpy.reshape", "numpy.sum", "numpy.concatenate", "numpy.concatenate", "PDGDNeuralRanker.PDGDNeuralRanker._update_to_documents", "numpy.array", "numpy.minimum", "numpy.ones", "numpy.maximum", "numpy.sum", "numpy.where", "numpy.where", "numpy.cumsum", "numpy.logical_xor", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker._calculate_unbias_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker._update_to_documents"], ["", "", "def", "update_to_clicks", "(", "self", ",", "click_label", ",", "ranking", ",", "doc_scores", ",", "last_exam", "=", "None", ")", ":", "\n", "\n", "        ", "if", "last_exam", "is", "None", ":", "\n", "\n", "            ", "clicks", "=", "np", ".", "array", "(", "click_label", "==", "1", ")", "\n", "\n", "n_docs", "=", "ranking", ".", "shape", "[", "0", "]", "\n", "n_results", "=", "10", "\n", "cur_k", "=", "np", ".", "minimum", "(", "n_docs", ",", "n_results", ")", "\n", "\n", "included", "=", "np", ".", "ones", "(", "cur_k", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "if", "not", "clicks", "[", "-", "1", "]", ":", "\n", "                ", "included", "[", "1", ":", "]", "=", "np", ".", "cumsum", "(", "clicks", "[", ":", ":", "-", "1", "]", ")", "[", ":", "0", ":", "-", "1", "]", "\n", "\n", "", "neg_ind", "=", "np", ".", "where", "(", "np", ".", "logical_xor", "(", "clicks", ",", "included", ")", ")", "[", "0", "]", "\n", "pos_ind", "=", "np", ".", "where", "(", "clicks", ")", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "if", "last_exam", "==", "10", ":", "\n", "                ", "neg_ind", "=", "np", ".", "where", "(", "click_label", "[", ":", "last_exam", "]", "==", "0", ")", "[", "0", "]", "\n", "pos_ind", "=", "np", ".", "where", "(", "click_label", "[", ":", "last_exam", "]", "==", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "neg_ind", "=", "np", ".", "where", "(", "click_label", "[", ":", "last_exam", "+", "1", "]", "==", "0", ")", "[", "0", "]", "\n", "pos_ind", "=", "np", ".", "where", "(", "click_label", "[", ":", "last_exam", "]", "==", "1", ")", "[", "0", "]", "\n", "\n", "\n", "", "", "n_pos", "=", "pos_ind", ".", "shape", "[", "0", "]", "\n", "n_neg", "=", "neg_ind", ".", "shape", "[", "0", "]", "\n", "n_pairs", "=", "n_pos", "*", "n_neg", "\n", "\n", "if", "n_pairs", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "pos_r_ind", "=", "ranking", "[", "pos_ind", "]", "\n", "neg_r_ind", "=", "ranking", "[", "neg_ind", "]", "\n", "\n", "pos_scores", "=", "doc_scores", "[", "pos_r_ind", "]", "\n", "neg_scores", "=", "doc_scores", "[", "neg_r_ind", "]", "\n", "\n", "log_pair_pos", "=", "np", ".", "tile", "(", "pos_scores", ",", "n_neg", ")", "\n", "log_pair_neg", "=", "np", ".", "repeat", "(", "neg_scores", ",", "n_pos", ")", "\n", "\n", "pair_trans", "=", "18", "-", "np", ".", "maximum", "(", "log_pair_pos", ",", "log_pair_neg", ")", "\n", "exp_pair_pos", "=", "np", ".", "exp", "(", "log_pair_pos", "+", "pair_trans", ")", "\n", "exp_pair_neg", "=", "np", ".", "exp", "(", "log_pair_neg", "+", "pair_trans", ")", "\n", "\n", "pair_denom", "=", "(", "exp_pair_pos", "+", "exp_pair_neg", ")", "\n", "pair_w", "=", "np", ".", "maximum", "(", "exp_pair_pos", ",", "exp_pair_neg", ")", "\n", "pair_w", "/=", "pair_denom", "\n", "pair_w", "/=", "pair_denom", "\n", "pair_w", "*=", "np", ".", "minimum", "(", "exp_pair_pos", ",", "exp_pair_neg", ")", "\n", "\n", "pair_w", "*=", "self", ".", "_calculate_unbias_weights", "(", "pos_ind", ",", "neg_ind", ",", "doc_scores", ",", "ranking", ")", "\n", "\n", "reshaped", "=", "np", ".", "reshape", "(", "pair_w", ",", "(", "n_neg", ",", "n_pos", ")", ")", "\n", "pos_w", "=", "np", ".", "sum", "(", "reshaped", ",", "axis", "=", "0", ")", "\n", "neg_w", "=", "-", "np", ".", "sum", "(", "reshaped", ",", "axis", "=", "1", ")", "\n", "\n", "all_w", "=", "np", ".", "concatenate", "(", "[", "pos_w", ",", "neg_w", "]", ")", "\n", "all_ind", "=", "np", ".", "concatenate", "(", "[", "pos_r_ind", ",", "neg_r_ind", "]", ")", "\n", "\n", "self", ".", "_update_to_documents", "(", "all_ind", ",", "all_w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDNeuralRanker.PDGDNeuralRanker._update_to_documents": [[184, 193], ["PDGDNeuralRanker.PDGDNeuralRanker.backpropagate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDNeuralRanker.PDGDNeuralRanker.backpropagate"], ["", "def", "_update_to_documents", "(", "self", ",", "doc_ind", ",", "doc_weights", ")", ":", "\n", "        ", "derivatives", "=", "self", ".", "backpropagate", "(", "doc_ind", ",", "doc_weights", ")", "\n", "\n", "first_wd", "=", "derivatives", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "hidden_layers", "[", "-", "1", "]", "+=", "first_wd", "*", "self", ".", "learning_rate", "\n", "for", "i", ",", "(", "wd", ",", "bd", ")", "in", "enumerate", "(", "derivatives", "[", "1", ":", "]", ",", "2", ")", ":", "\n", "            ", "self", ".", "hidden_layers", "[", "-", "i", "]", "+=", "wd", "*", "self", ".", "learning_rate", "\n", "self", ".", "biases", "[", "-", "i", "+", "1", "]", "+=", "bd", "*", "self", ".", "learning_rate", "\n", "", "self", ".", "learning_rate", "*=", "self", ".", "learning_rate_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDNeuralRanker.PDGDNeuralRanker._calculate_unbias_weights": [[194, 200], ["PDGDNeuralRanker.PDGDNeuralRanker._calculate_observed_prob", "PDGDNeuralRanker.PDGDNeuralRanker._calculate_flipped_prob"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker._calculate_observed_prob", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker._calculate_flipped_prob"], ["", "def", "_calculate_unbias_weights", "(", "self", ",", "pos_ind", ",", "neg_ind", ",", "doc_scores", ",", "ranking", ")", ":", "\n", "        ", "ranking_prob", "=", "self", ".", "_calculate_observed_prob", "(", "pos_ind", ",", "neg_ind", ",", "\n", "doc_scores", ",", "ranking", ")", "\n", "flipped_prob", "=", "self", ".", "_calculate_flipped_prob", "(", "pos_ind", ",", "neg_ind", ",", "\n", "doc_scores", ",", "ranking", ")", "\n", "return", "flipped_prob", "/", "(", "ranking_prob", "+", "flipped_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDNeuralRanker.PDGDNeuralRanker._calculate_flipped_prob": [[201, 251], ["numpy.arange", "numpy.arange", "numpy.arange", "numpy.tile", "numpy.repeat", "numpy.tile", "numpy.minimum", "numpy.maximum", "numpy.logical_and", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.zeros", "numpy.cumsum().astype", "numpy.amin", "numpy.amax", "numpy.exp", "numpy.exp", "numpy.sum", "numpy.ones", "numpy.prod", "numpy.cumsum"], "methods", ["None"], ["", "def", "_calculate_flipped_prob", "(", "self", ",", "pos_ind", ",", "neg_ind", ",", "doc_scores", ",", "ranking", ")", ":", "\n", "        ", "n_pos", "=", "pos_ind", ".", "shape", "[", "0", "]", "\n", "n_neg", "=", "neg_ind", ".", "shape", "[", "0", "]", "\n", "n_pairs", "=", "n_pos", "*", "n_neg", "\n", "n_results", "=", "ranking", ".", "shape", "[", "0", "]", "\n", "n_docs", "=", "doc_scores", ".", "shape", "[", "0", "]", "\n", "\n", "results_i", "=", "np", ".", "arange", "(", "n_results", ")", "\n", "pair_i", "=", "np", ".", "arange", "(", "n_pairs", ")", "\n", "doc_i", "=", "np", ".", "arange", "(", "n_docs", ")", "\n", "\n", "pos_pair_i", "=", "np", ".", "tile", "(", "pos_ind", ",", "n_neg", ")", "\n", "neg_pair_i", "=", "np", ".", "repeat", "(", "neg_ind", ",", "n_pos", ")", "\n", "\n", "flipped_rankings", "=", "np", ".", "tile", "(", "ranking", "[", "None", ",", ":", "]", ",", "\n", "[", "n_pairs", ",", "1", "]", ")", "\n", "flipped_rankings", "[", "pair_i", ",", "pos_pair_i", "]", "=", "ranking", "[", "neg_pair_i", "]", "\n", "flipped_rankings", "[", "pair_i", ",", "neg_pair_i", "]", "=", "ranking", "[", "pos_pair_i", "]", "\n", "\n", "min_pair_i", "=", "np", ".", "minimum", "(", "pos_pair_i", ",", "neg_pair_i", ")", "\n", "max_pair_i", "=", "np", ".", "maximum", "(", "pos_pair_i", ",", "neg_pair_i", ")", "\n", "range_mask", "=", "np", ".", "logical_and", "(", "min_pair_i", "[", ":", ",", "None", "]", "<=", "results_i", ",", "\n", "max_pair_i", "[", ":", ",", "None", "]", ">=", "results_i", ")", "\n", "\n", "flipped_log", "=", "doc_scores", "[", "flipped_rankings", "]", "\n", "\n", "safe_log", "=", "np", ".", "tile", "(", "doc_scores", "[", "None", ",", "None", ",", ":", "]", ",", "\n", "[", "n_pairs", ",", "n_results", ",", "1", "]", ")", "\n", "\n", "results_ij", "=", "np", ".", "tile", "(", "results_i", "[", "None", ",", "1", ":", "]", ",", "[", "n_pairs", ",", "1", "]", ")", "\n", "pair_ij", "=", "np", ".", "tile", "(", "pair_i", "[", ":", ",", "None", "]", ",", "[", "1", ",", "n_results", "-", "1", "]", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "n_pairs", ",", "n_results", ",", "n_docs", ")", ")", "\n", "mask", "[", "pair_ij", ",", "results_ij", ",", "flipped_rankings", "[", ":", ",", ":", "-", "1", "]", "]", "=", "True", "\n", "mask", "=", "np", ".", "cumsum", "(", "mask", ",", "axis", "=", "1", ")", ".", "astype", "(", "bool", ")", "\n", "\n", "safe_log", "[", "mask", "]", "=", "np", ".", "amin", "(", "safe_log", ")", "\n", "safe_max", "=", "np", ".", "amax", "(", "safe_log", ",", "axis", "=", "2", ")", "\n", "safe_log", "-=", "safe_max", "[", ":", ",", ":", ",", "None", "]", "-", "18", "\n", "flipped_log", "-=", "safe_max", "-", "18", "\n", "flipped_exp", "=", "np", ".", "exp", "(", "flipped_log", ")", "\n", "\n", "safe_exp", "=", "np", ".", "exp", "(", "safe_log", ")", "\n", "safe_exp", "[", "mask", "]", "=", "0", "\n", "safe_denom", "=", "np", ".", "sum", "(", "safe_exp", ",", "axis", "=", "2", ")", "\n", "safe_prob", "=", "np", ".", "ones", "(", "(", "n_pairs", ",", "n_results", ")", ")", "\n", "safe_prob", "[", "range_mask", "]", "=", "(", "flipped_exp", "/", "safe_denom", ")", "[", "range_mask", "]", "\n", "\n", "safe_pair_prob", "=", "np", ".", "prod", "(", "safe_prob", ",", "axis", "=", "1", ")", "\n", "\n", "return", "safe_pair_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDNeuralRanker.PDGDNeuralRanker._calculate_observed_prob": [[252, 298], ["numpy.arange", "numpy.tile", "numpy.repeat", "numpy.minimum", "numpy.maximum", "numpy.logical_and", "numpy.tile", "numpy.zeros", "numpy.cumsum().astype", "numpy.amin", "numpy.amax", "numpy.exp", "numpy.exp", "numpy.sum", "numpy.tile", "numpy.ones", "numpy.prod", "numpy.cumsum"], "methods", ["None"], ["", "def", "_calculate_observed_prob", "(", "self", ",", "pos_ind", ",", "neg_ind", ",", "doc_scores", ",", "ranking", ")", ":", "\n", "        ", "n_pos", "=", "pos_ind", ".", "shape", "[", "0", "]", "\n", "n_neg", "=", "neg_ind", ".", "shape", "[", "0", "]", "\n", "n_pairs", "=", "n_pos", "*", "n_neg", "\n", "n_results", "=", "ranking", ".", "shape", "[", "0", "]", "\n", "n_docs", "=", "doc_scores", ".", "shape", "[", "0", "]", "\n", "\n", "results_i", "=", "np", ".", "arange", "(", "n_results", ")", "\n", "# pair_i = np.arange(n_pairs)", "\n", "# doc_i = np.arange(n_docs)", "\n", "\n", "pos_pair_i", "=", "np", ".", "tile", "(", "pos_ind", ",", "n_neg", ")", "\n", "neg_pair_i", "=", "np", ".", "repeat", "(", "neg_ind", ",", "n_pos", ")", "\n", "\n", "min_pair_i", "=", "np", ".", "minimum", "(", "pos_pair_i", ",", "neg_pair_i", ")", "\n", "max_pair_i", "=", "np", ".", "maximum", "(", "pos_pair_i", ",", "neg_pair_i", ")", "\n", "range_mask", "=", "np", ".", "logical_and", "(", "min_pair_i", "[", ":", ",", "None", "]", "<=", "results_i", ",", "\n", "max_pair_i", "[", ":", ",", "None", "]", ">=", "results_i", ")", "\n", "\n", "safe_log", "=", "np", ".", "tile", "(", "doc_scores", "[", "None", ",", ":", "]", ",", "\n", "[", "n_results", ",", "1", "]", ")", "\n", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "n_results", ",", "n_docs", ")", ")", "\n", "mask", "[", "results_i", "[", "1", ":", "]", ",", "ranking", "[", ":", "-", "1", "]", "]", "=", "True", "\n", "mask", "=", "np", ".", "cumsum", "(", "mask", ",", "axis", "=", "0", ")", ".", "astype", "(", "bool", ")", "\n", "\n", "safe_log", "[", "mask", "]", "=", "np", ".", "amin", "(", "safe_log", ")", "\n", "safe_max", "=", "np", ".", "amax", "(", "safe_log", ",", "axis", "=", "1", ")", "\n", "safe_log", "-=", "safe_max", "[", ":", ",", "None", "]", "-", "18", "\n", "safe_exp", "=", "np", ".", "exp", "(", "safe_log", ")", "\n", "safe_exp", "[", "mask", "]", "=", "0", "\n", "\n", "ranking_log", "=", "doc_scores", "[", "ranking", "]", "-", "safe_max", "+", "18", "\n", "ranking_exp", "=", "np", ".", "exp", "(", "ranking_log", ")", "\n", "\n", "safe_denom", "=", "np", ".", "sum", "(", "safe_exp", ",", "axis", "=", "1", ")", "\n", "ranking_prob", "=", "ranking_exp", "/", "safe_denom", "\n", "\n", "tiled_prob", "=", "np", ".", "tile", "(", "ranking_prob", "[", "None", ",", ":", "]", ",", "[", "n_pairs", ",", "1", "]", ")", "\n", "\n", "safe_prob", "=", "np", ".", "ones", "(", "(", "n_pairs", ",", "n_results", ")", ")", "\n", "safe_prob", "[", "range_mask", "]", "=", "tiled_prob", "[", "range_mask", "]", "\n", "\n", "safe_pair_prob", "=", "np", ".", "prod", "(", "safe_prob", ",", "axis", "=", "1", ")", "\n", "\n", "return", "safe_pair_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDNeuralRanker.PDGDNeuralRanker.set_learning_rate": [[299, 301], ["None"], "methods", ["None"], ["", "def", "set_learning_rate", "(", "self", ",", "learning_rate", ")", ":", "\n", "        ", "self", ".", "learning_rate", "=", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDNeuralRanker.PDGDNeuralRanker.set_tau": [[302, 304], ["None"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau", ")", ":", "\n", "        ", "self", ".", "tau", "=", "tau", "", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.__init__": [[44, 53], ["numpy.random.randn", "scipy.linalg.norm"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "step_size", ",", "learning_rate", ",", "num_features", ")", ":", "\n", "        ", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "feature_size", "=", "num_features", "\n", "\n", "#random initialize weight", "\n", "unit_vector", "=", "np", ".", "random", ".", "randn", "(", "self", ".", "feature_size", ")", "\n", "unit_vector", "/=", "norm", "(", "unit_vector", ")", "\n", "self", ".", "weights", "=", "unit_vector", "*", "0.01", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.init_ranking": [[54, 73], ["numpy.dot", "ProbabilisticRanker.rank", "enumerate", "ranked_docids.sort", "numpy.asarray", "len", "ranked_docids.append", "pow", "sum", "sorted", "ProbabilisticRanker.rank"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.rank", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.rank"], ["", "def", "init_ranking", "(", "self", ",", "features", ")", ":", "\n", "        ", "scores", "=", "np", ".", "dot", "(", "features", ",", "self", ".", "weights", ".", "T", ")", "\n", "ranks", "=", "rank", "(", "scores", ",", "ties", "=", "\"random\"", ",", "reverse", "=", "False", ")", "\n", "\n", "ranked_docids", "=", "[", "]", "\n", "\n", "for", "docid", ",", "r", "in", "enumerate", "(", "ranks", ")", ":", "\n", "            ", "ranked_docids", ".", "append", "(", "(", "r", ",", "docid", ")", ")", "\n", "\n", "", "ranked_docids", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "\n", "self", ".", "docids", "=", "[", "docid", "for", "(", "_", ",", "docid", ")", "in", "ranked_docids", "]", "\n", "\n", "ranks", "=", "np", ".", "asarray", "(", "[", "i", "+", "1.0", "for", "i", "in", "\n", "sorted", "(", "rank", "(", "scores", ",", "ties", "=", "\"random\"", ",", "reverse", "=", "False", ")", ")", "]", ")", "\n", "\n", "max_rank", "=", "len", "(", "ranks", ")", "\n", "tmp_val", "=", "max_rank", "/", "pow", "(", "ranks", ",", "3", ")", "\n", "self", ".", "probs", "=", "tmp_val", "/", "sum", "(", "tmp_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.next": [[75, 111], ["numpy.cumsum", "random.random.random", "enumerate", "numpy.delete", "len", "Exception", "len", "numpy.delete", "ProbabilisticRanker.ProbabilisticRanker.docids.pop", "print", "print", "Exception", "sum", "ProbabilisticRanker.ProbabilisticRanker.docids.pop"], "methods", ["None"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "\"\"\"produce the next document by random sampling, or\n        deterministically\"\"\"", "\n", "\n", "# if there are no more documents", "\n", "if", "len", "(", "self", ".", "docids", ")", "<", "1", ":", "\n", "            ", "raise", "Exception", "(", "\"There are no more documents to be selected\"", ")", "\n", "\n", "# if there's only one document", "\n", "", "if", "len", "(", "self", ".", "docids", ")", "==", "1", ":", "\n", "            ", "self", ".", "probs", "=", "np", ".", "delete", "(", "self", ".", "probs", ",", "0", ")", "# should be empty now", "\n", "pick", "=", "self", ".", "docids", ".", "pop", "(", ")", "# pop, because it's a list", "\n", "return", "pick", "\n", "\n", "# sample if there are more documents", "\n", "# how to do this efficiently?", "\n", "# take cumulative probabilities, then do binary search?", "\n", "# if we sort docs and probabilities, we can start search at the", "\n", "# beginning. This will be efficient, because we'll look at the most", "\n", "# likely docs first.", "\n", "", "cumprobs", "=", "np", ".", "cumsum", "(", "self", ".", "probs", ")", "\n", "pick", "=", "-", "1", "\n", "rand", "=", "random", "(", ")", "# produces a float in range [0.0, 1.0)", "\n", "for", "pos", ",", "cp", "in", "enumerate", "(", "cumprobs", ")", ":", "\n", "            ", "if", "rand", "<", "cp", ":", "\n", "                ", "pick", "=", "self", ".", "docids", ".", "pop", "(", "pos", ")", "# pop, because it's a list", "\n", "break", "\n", "\n", "", "", "if", "(", "pick", "==", "-", "1", ")", ":", "\n", "            ", "print", "(", "\"Cumprobs:\"", ",", "cumprobs", ")", "\n", "print", "(", "\"rand\"", ",", "rand", ")", "\n", "raise", "Exception", "(", "\"Could not select document!\"", ")", "\n", "# renormalize", "\n", "", "self", ".", "probs", "=", "np", ".", "delete", "(", "self", ".", "probs", ",", "pos", ")", "# delete, it's a numpy array", "\n", "self", ".", "probs", "=", "self", ".", "probs", "/", "sum", "(", "self", ".", "probs", ")", "\n", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.get_candidate_weight": [[113, 120], ["ProbabilisticRanker.sample_unit_sphere"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.sample_unit_sphere"], ["", "def", "get_candidate_weight", "(", "self", ")", ":", "\n", "        ", "\"\"\"Delta is a change parameter: how much are your weights affected by\n        the weight change?\"\"\"", "\n", "# Some random value from the n-sphere,", "\n", "u", "=", "sample_unit_sphere", "(", "self", ".", "feature_size", ")", "\n", "\n", "return", "self", ".", "weights", "+", "self", ".", "step_size", "*", "u", ",", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.get_new_candidate": [[121, 130], ["ProbabilisticRanker.ProbabilisticRanker.get_candidate_weight", "copy.deepcopy", "copy.deepcopy.update_weights"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.get_candidate_weight", "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.update_weights"], ["", "def", "get_new_candidate", "(", "self", ")", ":", "\n", "# Get a new candidate whose weights are slightly changed with strength", "\n", "# delta.", "\n", "        ", "w", ",", "u", "=", "self", ".", "get_candidate_weight", "(", ")", "\n", "\n", "candidate_ranker", "=", "copy", ".", "deepcopy", "(", "self", ")", "\n", "candidate_ranker", ".", "update_weights", "(", "w", ")", "\n", "\n", "return", "candidate_ranker", ",", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.update_weights": [[131, 137], ["None"], "methods", ["None"], ["", "def", "update_weights", "(", "self", ",", "w", ",", "alpha", "=", "None", ")", ":", "\n", "        ", "\"\"\"update weight vector\"\"\"", "\n", "if", "alpha", "is", "None", ":", "\n", "            ", "self", ".", "weights", "=", "w", "\n", "", "else", ":", "\n", "            ", "self", ".", "weights", "=", "self", ".", "weights", "+", "alpha", "*", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.get_document_probability": [[138, 142], ["ProbabilisticRanker.ProbabilisticRanker.docids.index"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.index"], ["", "", "def", "get_document_probability", "(", "self", ",", "docid", ")", ":", "\n", "        ", "\"\"\"get probability of producing doc as the next document drawn\"\"\"", "\n", "pos", "=", "self", ".", "docids", ".", "index", "(", "docid", ")", "\n", "return", "self", ".", "probs", "[", "pos", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.document_count": [[143, 145], ["len"], "methods", ["None"], ["", "def", "document_count", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "docids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.rm_document": [[146, 156], ["ProbabilisticRanker.ProbabilisticRanker.docids.index", "ProbabilisticRanker.ProbabilisticRanker.docids.pop", "numpy.delete", "sum"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.index"], ["", "def", "rm_document", "(", "self", ",", "docid", ")", ":", "\n", "        ", "\"\"\"remove doc from list of available docs and adjust probabilities\"\"\"", "\n", "# find position of the document", "\n", "\n", "pos", "=", "self", ".", "docids", ".", "index", "(", "docid", ")", "\n", "\n", "# delete doc and renormalize", "\n", "self", ".", "docids", ".", "pop", "(", "pos", ")", "\n", "self", ".", "probs", "=", "np", ".", "delete", "(", "self", ".", "probs", ",", "pos", ")", "\n", "self", ".", "probs", "=", "self", ".", "probs", "/", "sum", "(", "self", ".", "probs", ")", "\n", "", "def", "get_current_weights", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.get_current_weights": [[156, 158], ["None"], "methods", ["None"], ["", "def", "get_current_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.get_score": [[159, 163], ["numpy.array", "numpy.dot"], "methods", ["None"], ["", "def", "get_score", "(", "self", ",", "features", ",", "weights", ")", ":", "\n", "        ", "weights", "=", "np", ".", "array", "(", "[", "weights", "]", ")", "\n", "score", "=", "np", ".", "dot", "(", "features", ",", "weights", ".", "T", ")", "[", ":", ",", "0", "]", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.get_all_query_result_list": [[164, 194], ["data_processor.get_query_docid_get_feature", "data_processor.get_query_get_all_features", "data_processor.get_query_get_docids", "data_processor.get_query_get_docids.keys", "list", "ProbabilisticRanker.ProbabilisticRanker.get_score", "zip", "sorted", "range", "query_docid_get_feature[].keys", "len", "query_result_list[].append"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_query_docid_get_feature", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_query_get_all_features", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_query_get_docids", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.get_score", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "get_all_query_result_list", "(", "self", ",", "data_processor", ",", "weights", ")", ":", "\n", "        ", "query_docid_get_feature", "=", "data_processor", ".", "get_query_docid_get_feature", "(", ")", "\n", "query_get_all_features", "=", "data_processor", ".", "get_query_get_all_features", "(", ")", "\n", "query_get_docids", "=", "data_processor", ".", "get_query_get_docids", "(", ")", "\n", "\n", "query_result_list", "=", "{", "}", "\n", "\n", "totalt", "=", "0", "\n", "for", "query", "in", "query_get_docids", ".", "keys", "(", ")", ":", "\n", "# listwise ranking with linear model", "\n", "            ", "docid_list", "=", "list", "(", "query_docid_get_feature", "[", "query", "]", ".", "keys", "(", ")", ")", "\n", "\n", "score_list", "=", "self", ".", "get_score", "(", "query_get_all_features", "[", "query", "]", ",", "weights", ")", "\n", "\n", "# score_list = score_list.tolist()", "\n", "\n", "docid_score_list", "=", "zip", "(", "docid_list", ",", "score_list", ")", "\n", "\n", "# 0.028", "\n", "\n", "docid_score_list", "=", "sorted", "(", "docid_score_list", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "(", "docid", ",", "socre", ")", "=", "docid_score_list", "[", "0", "]", "\n", "query_result_list", "[", "query", "]", "=", "[", "docid", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "docid_list", ")", ")", ":", "\n", "                ", "(", "docid", ",", "socre", ")", "=", "docid_score_list", "[", "i", "]", "\n", "\n", "query_result_list", "[", "query", "]", ".", "append", "(", "docid", ")", "\n", "\n", "", "", "return", "query_result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.probabilistic_multileave": [[195, 228], ["collections.defaultdict", "enumerate", "min", "r.init_ranking", "len", "a.append", "select.next", "l.append", "numpy.asarray", "len", "list", "random.random.shuffle", "list.pop", "o.rm_document", "r.document_count", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.init_ranking", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.next", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.rm_document", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.document_count"], ["", "def", "probabilistic_multileave", "(", "self", ",", "rankers", ",", "features", ",", "length", ")", ":", "\n", "        ", "d", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "rankers", ")", ":", "\n", "            ", "d", "[", "i", "]", "=", "r", ".", "init_ranking", "(", "features", ")", "\n", "\n", "", "length", "=", "min", "(", "[", "length", "]", "+", "[", "r", ".", "document_count", "(", ")", "for", "r", "in", "rankers", "]", ")", "\n", "\n", "# start with empty document list", "\n", "l", "=", "[", "]", "\n", "# random bits indicate which r to use at each rank", "\n", "# a = np.asarray([randint(0, len(rankers) - 1) for _ in range(length)])", "\n", "a", "=", "[", "]", "\n", "pool", "=", "[", "]", "\n", "\n", "while", "len", "(", "a", ")", "<", "length", ":", "\n", "            ", "if", "len", "(", "pool", ")", "==", "0", ":", "\n", "                ", "pool", "=", "list", "(", "range", "(", "len", "(", "rankers", ")", ")", ")", "\n", "shuffle", "(", "pool", ")", "\n", "", "a", ".", "append", "(", "pool", ".", "pop", "(", ")", ")", "\n", "\n", "\n", "", "for", "next_a", "in", "a", ":", "\n", "# flip coin - which r contributes doc (pre-computed in a)", "\n", "            ", "select", "=", "rankers", "[", "next_a", "]", "\n", "others", "=", "[", "r", "for", "r", "in", "rankers", "if", "r", "is", "not", "select", "]", "\n", "# draw doc", "\n", "pick", "=", "select", ".", "next", "(", ")", "\n", "l", ".", "append", "(", "pick", ")", "\n", "for", "o", "in", "others", ":", "\n", "                ", "o", ".", "rm_document", "(", "pick", ")", "\n", "\n", "", "", "return", "(", "np", ".", "asarray", "(", "l", ")", ",", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.probabilistic_multileave_outcome": [[229, 246], ["ProbabilisticRanker.ProbabilisticRanker.probability_of_list", "ProbabilisticRanker.ProbabilisticRanker.credits_of_list", "ProbabilisticRanker.ProbabilisticRanker.credits_to_outcome", "numpy.where", "len", "r.init_ranking", "len", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.probability_of_list", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.credits_of_list", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.credits_to_outcome", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.init_ranking"], ["", "def", "probabilistic_multileave_outcome", "(", "self", ",", "l", ",", "rankers", ",", "clicks", ",", "features", ")", ":", "\n", "        ", "click_ids", "=", "np", ".", "where", "(", "np", ".", "asarray", "(", "clicks", ")", "==", "1", ")", "[", "0", "]", "\n", "\n", "if", "not", "len", "(", "click_ids", ")", ":", "# no clicks, will be a tie", "\n", "# return [1/float(len(rankers))]*len(rankers)", "\n", "# the decision could be made to give each ranker equal credit in a", "\n", "# tie so all rankers get rank 1", "\n", "\n", "# return [1.0 / float(len(rankers))] * len(rankers)", "\n", "            ", "return", "[", "1", "]", "*", "len", "(", "rankers", ")", "\n", "", "for", "r", "in", "rankers", ":", "\n", "            ", "r", ".", "init_ranking", "(", "features", ")", "\n", "", "p", "=", "self", ".", "probability_of_list", "(", "l", ",", "rankers", ",", "click_ids", ")", "\n", "\n", "creds", "=", "self", ".", "credits_of_list", "(", "p", ")", "\n", "\n", "return", "self", ".", "credits_to_outcome", "(", "creds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.probability_of_list": [[247, 274], ["len", "numpy.sum", "numpy.zeros", "enumerate", "range", "list", "numpy.array", "range", "float", "len", "len", "ProbabilisticRanker.ProbabilisticRanker.get_rank", "len", "numpy.sum", "numpy.arange", "numpy.sum", "float"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.get_rank"], ["", "def", "probability_of_list", "(", "self", ",", "result_list", ",", "rankers", ",", "clickedDocs", ")", ":", "\n", "        ", "'''\n        ARGS:\n        - result_list: the multileaved list\n        - rankers: a list of rankers\n        - clickedDocs: the docIds in the result_list which recieved a click\n\n        RETURNS\n        -sigmas: list with for each click the list containing the probability\n         that the list comes from each ranker\n        '''", "\n", "tau", "=", "0.3", "\n", "n", "=", "len", "(", "rankers", "[", "0", "]", ".", "docids", ")", "\n", "sigmoid_total", "=", "np", ".", "sum", "(", "float", "(", "n", ")", "/", "(", "np", ".", "arange", "(", "n", ")", "+", "1", ")", "**", "tau", ")", "\n", "sigmas", "=", "np", ".", "zeros", "(", "[", "len", "(", "clickedDocs", ")", ",", "len", "(", "rankers", ")", "]", ")", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "rankers", ")", ":", "\n", "            ", "ranks", "=", "np", ".", "array", "(", "self", ".", "get_rank", "(", "r", ",", "result_list", ")", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "clickedDocs", ")", ")", ":", "\n", "                ", "click", "=", "clickedDocs", "[", "j", "]", "\n", "sigmas", "[", "j", ",", "i", "]", "=", "ranks", "[", "click", "]", "/", "(", "sigmoid_total", "\n", "-", "np", ".", "sum", "(", "float", "(", "n", ")", "/", "\n", "(", "ranks", "[", ":", "click", "]", "\n", "**", "tau", ")", ")", ")", "\n", "", "", "for", "i", "in", "range", "(", "sigmas", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "sigmas", "[", "i", ",", ":", "]", "=", "sigmas", "[", "i", ",", ":", "]", "/", "np", ".", "sum", "(", "sigmas", "[", "i", ",", ":", "]", ")", "\n", "\n", "", "return", "list", "(", "sigmas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.get_rank": [[275, 294], ["enumerate", "len", "docsInRanker.index"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.index"], ["", "def", "get_rank", "(", "self", ",", "ranker", ",", "documents", ")", ":", "\n", "        ", "'''\n        Return the rank of given documents in given ranker.\n        Note: rank is not index (rank is index+1)\n\n        ARGS:\n        - ranker\n        - documents\n\n        RETURN:\n        - a list containing the rank in the ranker for each of the documents\n        '''", "\n", "ranks", "=", "[", "None", "]", "*", "len", "(", "documents", ")", "\n", "docsInRanker", "=", "ranker", ".", "docids", "\n", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "documents", ")", ":", "\n", "            ", "if", "d", "in", "docsInRanker", ":", "\n", "                ", "ranks", "[", "i", "]", "=", "docsInRanker", ".", "index", "(", "d", ")", "+", "1", "\n", "", "", "return", "ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.credits_of_list": [[295, 306], ["numpy.average", "zip"], "methods", ["None"], ["", "def", "credits_of_list", "(", "self", ",", "p", ")", ":", "\n", "        ", "'''\n        ARGS:\n        -p: list with for each click the list containing the probability that\n            the list comes from each ranker\n\n        RETURNS:\n        - credits: list of credits for each ranker\n        '''", "\n", "creds", "=", "[", "np", ".", "average", "(", "col", ")", "for", "col", "in", "zip", "(", "*", "p", ")", "]", "\n", "return", "creds", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.credits_to_outcome": [[307, 325], ["sorted", "zip", "len", "range", "len"], "methods", ["None"], ["", "def", "credits_to_outcome", "(", "self", ",", "creds", ")", ":", "\n", "        ", "rankers_credits", "=", "sorted", "(", "zip", "(", "range", "(", "len", "(", "creds", ")", ")", ",", "creds", ")", ",", "reverse", "=", "True", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ")", "\n", "\n", "ranked_credits", "=", "len", "(", "rankers_credits", ")", "*", "[", "None", "]", "\n", "last_c", "=", "None", "\n", "last_rank", "=", "0", "\n", "rank", "=", "0", "\n", "for", "(", "r", ",", "c", ")", "in", "rankers_credits", ":", "\n", "            ", "rank", "+=", "1", "\n", "if", "not", "(", "c", "==", "last_c", ")", ":", "\n", "                ", "ranked_credits", "[", "r", "]", "=", "rank", "\n", "last_rank", "=", "rank", "\n", "", "else", ":", "\n", "                ", "ranked_credits", "[", "r", "]", "=", "last_rank", "\n", "", "last_c", "=", "c", "\n", "\n", "", "return", "ranked_credits", "", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.rank": [[11, 33], ["sorted", "isinstance", "print", "numpy.array", "len", "zip", "type", "reversed", "range", "zip", "sorted", "range", "range", "range", "zip", "Exception", "zip", "random.sample", "range", "range", "range"], "function", ["None"], ["def", "rank", "(", "x", ",", "ties", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "print", "(", "x", ",", "type", "(", "x", ")", ")", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "n", "=", "1", "\n", "", "else", ":", "\n", "        ", "n", "=", "len", "(", "x", ")", "\n", "", "if", "ties", "==", "\"first\"", ":", "\n", "        ", "ix", "=", "zip", "(", "x", ",", "reversed", "(", "range", "(", "n", ")", ")", ",", "range", "(", "n", ")", ")", "\n", "", "elif", "ties", "==", "\"last\"", ":", "\n", "        ", "ix", "=", "zip", "(", "x", ",", "range", "(", "n", ")", ",", "range", "(", "n", ")", ")", "\n", "", "elif", "ties", "==", "\"random\"", ":", "\n", "        ", "ix", "=", "zip", "(", "x", ",", "sample", "(", "range", "(", "n", ")", ",", "n", ")", ",", "range", "(", "n", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown method for breaking ties: \\\"%s\\\"\"", "%", "ties", ")", "\n", "\n", "", "ix", "=", "sorted", "(", "ix", ",", "reverse", "=", "reverse", ")", "\n", "\n", "# ix.sort(reverse=reverse)", "\n", "indexes", "=", "[", "i", "for", "_", ",", "_", ",", "i", "in", "ix", "]", "\n", "\n", "return", "[", "i", "for", "_", ",", "i", "in", "sorted", "(", "zip", "(", "indexes", ",", "range", "(", "n", ")", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.sample_unit_sphere": [[34, 40], ["numpy.random.randn", "scipy.linalg.norm"], "function", ["None"], ["", "def", "sample_unit_sphere", "(", "n", ")", ":", "\n", "    ", "\"\"\"See http://mathoverflow.net/questions/24688/efficiently-sampling-\n    points-uniformly-from-the-surface-of-an-n-sphere\"\"\"", "\n", "v", "=", "np", ".", "random", ".", "randn", "(", "n", ")", "\n", "v", "/=", "norm", "(", "v", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.__init__": [[9, 16], ["ranker.COLTRLinearRanker.COLTRLinearRanker.__init__", "NESLinearRanker.NESLinearRanker.sample_new_pop"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.sample_new_pop"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "learning_rate", ",", "mu", ",", "cov", ",", "sigma", ",", "tau", ",", "gamma", ",", "\n", "learning_rate_decay", "=", "1", ",", "random_initial", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_features", ",", "learning_rate", ",", "1", ",", "tau", ",", "gamma", ",", "learning_rate_decay", ",", "random_initial", ")", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "cov", "=", "cov", "\n", "self", ".", "weights", "=", "self", ".", "sample_new_pop", "(", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.update": [[17, 21], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "dmu", ",", "dcov", ")", ":", "\n", "        ", "self", ".", "mu", "+=", "self", ".", "learning_rate", "*", "dmu", "\n", "self", ".", "cov", "+=", "self", ".", "learning_rate", "*", "dcov", "\n", "self", ".", "learning_rate", "*=", "self", ".", "learning_rate_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.sample_random_vectors": [[22, 25], ["numpy.random.randn"], "methods", ["None"], ["", "def", "sample_random_vectors", "(", "self", ",", "n", ")", ":", "\n", "        ", "random_vectors", "=", "np", ".", "random", ".", "randn", "(", "n", ",", "self", ".", "num_features", ")", "*", "self", ".", "sigma", "\n", "return", "random_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.sample_canditate_rankers": [[26, 29], ["None"], "methods", ["None"], ["", "def", "sample_canditate_rankers", "(", "self", ",", "unit_vectors", ")", ":", "\n", "        ", "new_weights", "=", "self", ".", "weights", "+", "unit_vectors", "\n", "return", "new_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.sample_new_pop": [[30, 33], ["numpy.random.multivariate_normal"], "methods", ["None"], ["", "def", "sample_new_pop", "(", "self", ",", "n", ")", ":", "\n", "        ", "weights", "=", "np", ".", "random", ".", "multivariate_normal", "(", "self", ".", "mu", ",", "self", ".", "cov", ",", "n", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.get_SNIPS": [[34, 72], ["len", "len", "numpy.array", "NESLinearRanker.get_doc_indexes", "dataset.get_all_features_by_query", "numpy.dot", "numpy.dot", "log_propensity.reshape.reshape.reshape", "numpy.where", "len", "dataset.get_candidate_docids_by_query", "NESLinearRanker.NESLinearRanker.softmax", "NESLinearRanker.NESLinearRanker.softmax", "len", "NESLinearRanker.NESLinearRanker.compute_SNIPS", "NESLinearRanker.NESLinearRanker.compute_SNIPS"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.get_doc_indexes", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.compute_SNIPS", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.compute_SNIPS"], ["", "def", "get_SNIPS", "(", "self", ",", "canditate_rankers", ",", "records", ",", "dataset", ")", ":", "\n", "#current_ranker = self.weights", "\n", "#all_ranker = np.vstack((current_ranker, canditate_rankers))  # all rankers weights", "\n", "        ", "all_ranker", "=", "canditate_rankers", "\n", "select_size", "=", "1", "\n", "if", "(", "len", "(", "records", ")", "<", "select_size", ")", ":", "\n", "            ", "selected", "=", "records", "\n", "", "else", ":", "\n", "            ", "selected", "=", "records", "[", "-", "select_size", ":", "]", "\n", "", "for", "record", "in", "selected", ":", "\n", "            ", "query", "=", "record", "[", "0", "]", "\n", "result_list", "=", "record", "[", "1", "]", "\n", "click_label", "=", "record", "[", "2", "]", "\n", "log_weight", "=", "np", ".", "array", "(", "record", "[", "3", "]", ")", "\n", "\n", "doc_indexes", "=", "get_doc_indexes", "(", "result_list", ",", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "\n", "scores", "=", "np", ".", "dot", "(", "feature_matrix", ",", "all_ranker", ".", "T", ")", "\n", "log_score", "=", "np", ".", "dot", "(", "feature_matrix", ",", "log_weight", ".", "T", ")", "\n", "\n", "propensities", "=", "self", ".", "softmax", "(", "scores", ")", "[", "doc_indexes", "]", "\n", "log_propensity", "=", "self", ".", "softmax", "(", "log_score", ")", "[", "doc_indexes", "]", "\n", "log_propensity", "=", "log_propensity", ".", "reshape", "(", "len", "(", "result_list", ")", ",", "1", ")", "\n", "\n", "try", ":", "\n", "                ", "SNIPS", "+=", "self", ".", "compute_SNIPS", "(", "log_propensity", ",", "propensities", ",", "click_label", ")", "\n", "", "except", "NameError", ":", "\n", "                ", "SNIPS", "=", "self", ".", "compute_SNIPS", "(", "log_propensity", ",", "propensities", ",", "click_label", ")", "\n", "", "", "SNIPS", "/=", "len", "(", "records", ")", "\n", "winners", "=", "np", ".", "where", "(", "SNIPS", "<", "SNIPS", "[", "0", "]", ")", "[", "0", "]", "\n", "\n", "# IPS = self.compute_IPS(log_propensity, propensities, click_label)", "\n", "# winners = np.where(IPS < IPS[0])[0]", "\n", "\n", "if", "len", "(", "winners", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "SNIPS", "*", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.softmax": [[73, 76], ["numpy.exp", "e_x.sum", "numpy.max"], "methods", ["None"], ["", "def", "softmax", "(", "self", ",", "x", ")", ":", "\n", "        ", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "+", "1e-6", "\n", "return", "e_x", "/", "(", "e_x", ".", "sum", "(", "axis", "=", "0", ")", "+", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.next": [[77, 113], ["numpy.cumsum", "random.random.random", "enumerate", "numpy.delete", "len", "Exception", "len", "numpy.delete", "NESLinearRanker.NESLinearRanker.docids.pop", "print", "print", "Exception", "sum", "NESLinearRanker.NESLinearRanker.docids.pop"], "methods", ["None"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "\"\"\"produce the next document by random sampling, or\n        deterministically\"\"\"", "\n", "\n", "# if there are no more documents", "\n", "if", "len", "(", "self", ".", "docids", ")", "<", "1", ":", "\n", "            ", "raise", "Exception", "(", "\"There are no more documents to be selected\"", ")", "\n", "\n", "# if there's only one document", "\n", "", "if", "len", "(", "self", ".", "docids", ")", "==", "1", ":", "\n", "            ", "self", ".", "probs", "=", "np", ".", "delete", "(", "self", ".", "probs", ",", "0", ")", "# should be empty now", "\n", "pick", "=", "self", ".", "docids", ".", "pop", "(", ")", "# pop, because it's a list", "\n", "return", "pick", "\n", "\n", "# sample if there are more documents", "\n", "# how to do this efficiently?", "\n", "# take cumulative probabilities, then do binary search?", "\n", "# if we sort docs and probabilities, we can start search at the", "\n", "# beginning. This will be efficient, because we'll look at the most", "\n", "# likely docs first.", "\n", "", "cumprobs", "=", "np", ".", "cumsum", "(", "self", ".", "probs", ")", "\n", "pick", "=", "-", "1", "\n", "rand", "=", "random", "(", ")", "# produces a float in range [0.0, 1.0)", "\n", "for", "pos", ",", "cp", "in", "enumerate", "(", "cumprobs", ")", ":", "\n", "            ", "if", "rand", "<", "cp", ":", "\n", "                ", "pick", "=", "self", ".", "docids", ".", "pop", "(", "pos", ")", "# pop, because it's a list", "\n", "break", "\n", "\n", "", "", "if", "(", "pick", "==", "-", "1", ")", ":", "\n", "            ", "print", "(", "\"Cumprobs:\"", ",", "cumprobs", ")", "\n", "print", "(", "\"rand\"", ",", "rand", ")", "\n", "raise", "Exception", "(", "\"Could not select document!\"", ")", "\n", "# renormalize", "\n", "", "self", ".", "probs", "=", "np", ".", "delete", "(", "self", ".", "probs", ",", "pos", ")", "# delete, it's a numpy array", "\n", "self", ".", "probs", "=", "self", ".", "probs", "/", "sum", "(", "self", ".", "probs", ")", "\n", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.document_count": [[114, 116], ["len"], "methods", ["None"], ["", "def", "document_count", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "docids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.rm_document": [[117, 127], ["NESLinearRanker.NESLinearRanker.docids.index", "NESLinearRanker.NESLinearRanker.docids.pop", "numpy.delete", "sum"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.index"], ["", "def", "rm_document", "(", "self", ",", "docid", ")", ":", "\n", "        ", "\"\"\"remove doc from list of available docs and adjust probabilities\"\"\"", "\n", "# find position of the document", "\n", "\n", "pos", "=", "self", ".", "docids", ".", "index", "(", "docid", ")", "\n", "\n", "# delete doc and renormalize", "\n", "self", ".", "docids", ".", "pop", "(", "pos", ")", "\n", "self", ".", "probs", "=", "np", ".", "delete", "(", "self", ".", "probs", ",", "pos", ")", "\n", "self", ".", "probs", "=", "self", ".", "probs", "/", "sum", "(", "self", ".", "probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.probabilistic_multileave": [[128, 160], ["collections.defaultdict", "enumerate", "min", "r.init_ranking", "len", "a.append", "select.next", "l.append", "numpy.asarray", "len", "list", "random.random.shuffle", "list.pop", "o.rm_document", "r.document_count", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.init_ranking", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.next", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.rm_document", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.document_count"], ["", "def", "probabilistic_multileave", "(", "self", ",", "rankers", ",", "features", ",", "length", ")", ":", "\n", "        ", "d", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "rankers", ")", ":", "\n", "            ", "d", "[", "i", "]", "=", "r", ".", "init_ranking", "(", "features", ")", "\n", "\n", "", "length", "=", "min", "(", "[", "length", "]", "+", "[", "r", ".", "document_count", "(", ")", "for", "r", "in", "rankers", "]", ")", "\n", "\n", "# start with empty document list", "\n", "l", "=", "[", "]", "\n", "# random bits indicate which r to use at each rank", "\n", "# a = np.asarray([randint(0, len(rankers) - 1) for _ in range(length)])", "\n", "a", "=", "[", "]", "\n", "pool", "=", "[", "]", "\n", "\n", "while", "len", "(", "a", ")", "<", "length", ":", "\n", "            ", "if", "len", "(", "pool", ")", "==", "0", ":", "\n", "                ", "pool", "=", "list", "(", "range", "(", "len", "(", "rankers", ")", ")", ")", "\n", "shuffle", "(", "pool", ")", "\n", "", "a", ".", "append", "(", "pool", ".", "pop", "(", ")", ")", "\n", "\n", "", "for", "next_a", "in", "a", ":", "\n", "# flip coin - which r contributes doc (pre-computed in a)", "\n", "            ", "select", "=", "rankers", "[", "next_a", "]", "\n", "others", "=", "[", "r", "for", "r", "in", "rankers", "if", "r", "is", "not", "select", "]", "\n", "# draw doc", "\n", "pick", "=", "select", ".", "next", "(", ")", "\n", "l", ".", "append", "(", "pick", ")", "\n", "for", "o", "in", "others", ":", "\n", "                ", "o", ".", "rm_document", "(", "pick", ")", "\n", "\n", "", "", "return", "(", "np", ".", "asarray", "(", "l", ")", ",", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.probabilistic_multileave_outcome": [[161, 178], ["NESLinearRanker.probability_of_list", "NESLinearRanker.credits_of_list", "numpy.where", "len", "r.init_ranking", "len", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.probability_of_list", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.credits_of_list", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.init_ranking"], ["", "def", "probabilistic_multileave_outcome", "(", "self", ",", "l", ",", "rankers", ",", "clicks", ",", "features", ")", ":", "\n", "        ", "click_ids", "=", "np", ".", "where", "(", "np", ".", "asarray", "(", "clicks", ")", "==", "1", ")", "[", "0", "]", "\n", "\n", "if", "not", "len", "(", "click_ids", ")", ":", "# no clicks, will be a tie", "\n", "# return [1/float(len(rankers))]*len(rankers)", "\n", "# the decision could be made to give each ranker equal credit in a", "\n", "# tie so all rankers get rank 1", "\n", "\n", "# return [1.0 / float(len(rankers))] * len(rankers)", "\n", "            ", "return", "[", "1", "]", "*", "len", "(", "rankers", ")", "\n", "", "for", "r", "in", "rankers", ":", "\n", "            ", "r", ".", "init_ranking", "(", "features", ")", "\n", "", "p", "=", "probability_of_list", "(", "l", ",", "rankers", ",", "click_ids", ")", "\n", "\n", "creds", "=", "credits_of_list", "(", "p", ")", "\n", "\n", "return", "creds", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.init_ranking": [[180, 199], ["numpy.dot", "NESLinearRanker.rank", "enumerate", "ranked_docids.sort", "numpy.asarray", "len", "ranked_docids.append", "pow", "sum", "sorted", "NESLinearRanker.rank"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.rank", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.rank"], ["", "def", "init_ranking", "(", "self", ",", "features", ")", ":", "\n", "        ", "scores", "=", "np", ".", "dot", "(", "features", ",", "self", ".", "weights", ".", "T", ")", "\n", "ranks", "=", "rank", "(", "scores", ",", "ties", "=", "\"random\"", ",", "reverse", "=", "False", ")", "\n", "\n", "ranked_docids", "=", "[", "]", "\n", "\n", "for", "docid", ",", "r", "in", "enumerate", "(", "ranks", ")", ":", "\n", "            ", "ranked_docids", ".", "append", "(", "(", "r", ",", "docid", ")", ")", "\n", "\n", "", "ranked_docids", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "\n", "self", ".", "docids", "=", "[", "docid", "for", "(", "_", ",", "docid", ")", "in", "ranked_docids", "]", "\n", "\n", "ranks", "=", "np", ".", "asarray", "(", "[", "i", "+", "1.0", "for", "i", "in", "\n", "sorted", "(", "rank", "(", "scores", ",", "ties", "=", "\"random\"", ",", "reverse", "=", "False", ")", ")", "]", ")", "\n", "\n", "max_rank", "=", "len", "(", "ranks", ")", "\n", "tmp_val", "=", "max_rank", "/", "pow", "(", "ranks", ",", "3", ")", "\n", "self", ".", "probs", "=", "tmp_val", "/", "sum", "(", "tmp_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.probability_of_list": [[201, 227], ["len", "numpy.sum", "numpy.zeros", "enumerate", "range", "list", "numpy.array", "range", "float", "len", "len", "NESLinearRanker.get_rank", "len", "numpy.sum", "numpy.arange", "numpy.sum", "float"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.get_rank"], ["", "", "def", "probability_of_list", "(", "result_list", ",", "rankers", ",", "clickedDocs", ")", ":", "\n", "    ", "'''\n    ARGS:\n    - result_list: the multileaved list\n    - rankers: a list of rankers\n    - clickedDocs: the docIds in the result_list which recieved a click\n    RETURNS\n    -sigmas: list with for each click the list containing the probability\n     that the list comes from each ranker\n    '''", "\n", "tau", "=", "0.3", "\n", "n", "=", "len", "(", "rankers", "[", "0", "]", ".", "docids", ")", "\n", "sigmoid_total", "=", "np", ".", "sum", "(", "float", "(", "n", ")", "/", "(", "np", ".", "arange", "(", "n", ")", "+", "1", ")", "**", "tau", ")", "\n", "sigmas", "=", "np", ".", "zeros", "(", "[", "len", "(", "clickedDocs", ")", ",", "len", "(", "rankers", ")", "]", ")", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "rankers", ")", ":", "\n", "        ", "ranks", "=", "np", ".", "array", "(", "get_rank", "(", "r", ",", "result_list", ")", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "clickedDocs", ")", ")", ":", "\n", "            ", "click", "=", "clickedDocs", "[", "j", "]", "\n", "sigmas", "[", "j", ",", "i", "]", "=", "ranks", "[", "click", "]", "/", "(", "sigmoid_total", "\n", "-", "np", ".", "sum", "(", "float", "(", "n", ")", "/", "\n", "(", "ranks", "[", ":", "click", "]", "\n", "**", "tau", ")", ")", ")", "\n", "", "", "for", "i", "in", "range", "(", "sigmas", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "sigmas", "[", "i", ",", ":", "]", "=", "sigmas", "[", "i", ",", ":", "]", "/", "np", ".", "sum", "(", "sigmas", "[", "i", ",", ":", "]", ")", "\n", "\n", "", "return", "list", "(", "sigmas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.get_rank": [[228, 245], ["enumerate", "len", "docsInRanker.index"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.index"], ["", "def", "get_rank", "(", "ranker", ",", "documents", ")", ":", "\n", "    ", "'''\n    Return the rank of given documents in given ranker.\n    Note: rank is not index (rank is index+1)\n    ARGS:\n    - ranker\n    - documents\n    RETURN:\n    - a list containing the rank in the ranker for each of the documents\n    '''", "\n", "ranks", "=", "[", "None", "]", "*", "len", "(", "documents", ")", "\n", "docsInRanker", "=", "ranker", ".", "docids", "\n", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "documents", ")", ":", "\n", "        ", "if", "d", "in", "docsInRanker", ":", "\n", "            ", "ranks", "[", "i", "]", "=", "docsInRanker", ".", "index", "(", "d", ")", "+", "1", "\n", "", "", "return", "ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.credits_to_outcome": [[246, 265], ["sorted", "zip", "len", "range", "len"], "function", ["None"], ["", "def", "credits_to_outcome", "(", "creds", ")", ":", "\n", "    ", "rankers_credits", "=", "sorted", "(", "zip", "(", "range", "(", "len", "(", "creds", ")", ")", ",", "creds", ")", ",", "reverse", "=", "True", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ")", "\n", "\n", "\n", "ranked_credits", "=", "len", "(", "rankers_credits", ")", "*", "[", "None", "]", "\n", "last_c", "=", "None", "\n", "last_rank", "=", "0", "\n", "rank", "=", "0", "\n", "for", "(", "r", ",", "c", ")", "in", "rankers_credits", ":", "\n", "        ", "rank", "+=", "1", "\n", "if", "not", "(", "c", "==", "last_c", ")", ":", "\n", "            ", "ranked_credits", "[", "r", "]", "=", "rank", "\n", "last_rank", "=", "rank", "\n", "", "else", ":", "\n", "            ", "ranked_credits", "[", "r", "]", "=", "last_rank", "\n", "", "last_c", "=", "c", "\n", "\n", "", "return", "ranked_credits", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.credits_of_list": [[266, 276], ["numpy.average", "zip"], "function", ["None"], ["", "def", "credits_of_list", "(", "p", ")", ":", "\n", "    ", "'''\n    ARGS:\n    -p: list with for each click the list containing the probability that\n        the list comes from each ranker\n    RETURNS:\n    - credits: list of credits for each ranker\n    '''", "\n", "creds", "=", "[", "np", ".", "average", "(", "col", ")", "for", "col", "in", "zip", "(", "*", "p", ")", "]", "\n", "return", "creds", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.rank": [[277, 299], ["sorted", "isinstance", "print", "numpy.array", "len", "zip", "type", "reversed", "range", "zip", "sorted", "range", "range", "range", "zip", "Exception", "zip", "random.sample", "range", "range", "range"], "function", ["None"], ["", "def", "rank", "(", "x", ",", "ties", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "print", "(", "x", ",", "type", "(", "x", ")", ")", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "n", "=", "1", "\n", "", "else", ":", "\n", "        ", "n", "=", "len", "(", "x", ")", "\n", "", "if", "ties", "==", "\"first\"", ":", "\n", "        ", "ix", "=", "zip", "(", "x", ",", "reversed", "(", "range", "(", "n", ")", ")", ",", "range", "(", "n", ")", ")", "\n", "", "elif", "ties", "==", "\"last\"", ":", "\n", "        ", "ix", "=", "zip", "(", "x", ",", "range", "(", "n", ")", ",", "range", "(", "n", ")", ")", "\n", "", "elif", "ties", "==", "\"random\"", ":", "\n", "        ", "ix", "=", "zip", "(", "x", ",", "sample", "(", "range", "(", "n", ")", ",", "n", ")", ",", "range", "(", "n", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown method for breaking ties: \\\"%s\\\"\"", "%", "ties", ")", "\n", "\n", "", "ix", "=", "sorted", "(", "ix", ",", "reverse", "=", "reverse", ")", "\n", "\n", "# ix.sort(reverse=reverse)", "\n", "indexes", "=", "[", "i", "for", "_", ",", "_", ",", "i", "in", "ix", "]", "\n", "\n", "return", "[", "i", "for", "_", ",", "i", "in", "sorted", "(", "zip", "(", "indexes", ",", "range", "(", "n", ")", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.get_doc_indexes": [[301, 305], ["numpy.array", "numpy.where"], "function", ["None"], ["", "def", "get_doc_indexes", "(", "result_list", ",", "doc_ids", ")", ":", "\n", "    ", "doc_ids", "=", "np", ".", "array", "(", "doc_ids", ")", "\n", "#return np.searchsorted(doc_ids,result_list, sorter=range(len(doc_ids)))", "\n", "return", "[", "np", ".", "where", "(", "doc_ids", "==", "i", ")", "[", "0", "]", "[", "0", "]", "for", "i", "in", "result_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.AbstractRanker.AbstractRanker.__init__": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "self", ".", "num_features", "=", "num_features", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.AbstractRanker.AbstractRanker.update": [[5, 7], ["NotImplementedError"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "gradient", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"update.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.AbstractRanker.AbstractRanker.assign_weights": [[9, 11], ["NotImplementedError"], "methods", ["None"], ["", "def", "assign_weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"assign_weights.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.AbstractRanker.AbstractRanker.get_current_weights": [[13, 15], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_current_weights", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"get_current_weights.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.AbstractRanker.AbstractRanker.get_query_result_list": [[17, 19], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_query_result_list", "(", "self", ",", "dataset", ",", "query", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"get_query_result_list.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.AbstractRanker.AbstractRanker.get_all_query_result_list": [[21, 23], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_all_query_result_list", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"get_all_query_result_list.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.AbstractRanker.AbstractRanker.get_scores": [[25, 27], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_scores", "(", "self", ",", "features", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"features.\"", ")", ""]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.__init__": [[6, 12], ["ranker.LinearRanker.LinearRanker.__init__"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "learning_rate", ",", "step_size", ",", "tau", ",", "gamma", ",", "\n", "learning_rate_decay", "=", "1", ",", "random_initial", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_features", ",", "learning_rate", ",", "learning_rate_decay", ",", "random_initial", "=", "random_initial", ")", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.get_query_result_list": [[13, 34], ["numpy.array", "dataset.get_all_features_by_query", "COLTRLinearRanker.COLTRLinearRanker.get_scores", "COLTRLinearRanker.COLTRLinearRanker._softmax_with_tau().reshape", "numpy.minimum", "numpy.random.choice", "dataset.get_candidate_docids_by_query", "len", "numpy.sum", "numpy.sum", "numpy.random.choice", "numpy.setdiff1d", "numpy.random.shuffle", "numpy.append", "COLTRLinearRanker.COLTRLinearRanker._softmax_with_tau"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker._softmax_with_tau"], ["", "def", "get_query_result_list", "(", "self", ",", "dataset", ",", "query", ")", ":", "\n", "# listwise ranking with linear model", "\n", "        ", "self", ".", "docid_list", "=", "np", ".", "array", "(", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "self", ".", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "\n", "scores", "=", "self", ".", "get_scores", "(", "self", ".", "feature_matrix", ")", "\n", "probs", "=", "self", ".", "_softmax_with_tau", "(", "scores", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "sample_size", "=", "np", ".", "minimum", "(", "10", ",", "len", "(", "self", ".", "docid_list", ")", ")", "\n", "\n", "if", "np", ".", "sum", "(", "probs", ">", "0", ")", "<", "sample_size", ":", "\n", "            ", "safe_size", "=", "np", ".", "sum", "(", "probs", ">", "0", ")", "\n", "query_result_list", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "docid_list", ",", "safe_size", ",", "replace", "=", "False", ",", "p", "=", "probs", ")", "\n", "rest", "=", "np", ".", "setdiff1d", "(", "self", ".", "docid_list", ",", "query_result_list", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "rest", ")", "\n", "self", ".", "query_result_list", "=", "np", ".", "append", "(", "query_result_list", ",", "rest", ")", "\n", "return", "query_result_list", "[", ":", "sample_size", "]", "\n", "\n", "", "self", ".", "query_result_list", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "docid_list", ",", "sample_size", ",", "\n", "replace", "=", "False", ",", "p", "=", "probs", ")", "\n", "return", "self", ".", "query_result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker._softmax_with_tau": [[35, 40], ["numpy.exp", "numpy.exp.sum", "numpy.max"], "methods", ["None"], ["", "def", "_softmax_with_tau", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Compute softmax values for each sets of scores in x.\"\"\"", "\n", "e_x", "=", "np", ".", "exp", "(", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "/", "self", ".", "tau", ")", "\n", "\n", "return", "e_x", "/", "e_x", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.sample_unit_vectors": [[41, 46], ["numpy.random.randn", "numpy.sum"], "methods", ["None"], ["", "def", "sample_unit_vectors", "(", "self", ",", "num_rankers", ")", ":", "\n", "        ", "unit_vectors", "=", "np", ".", "random", ".", "randn", "(", "num_rankers", ",", "self", ".", "num_features", ")", "\n", "vector_norms", "=", "np", ".", "sum", "(", "unit_vectors", "**", "2", ",", "axis", "=", "1", ")", "**", "(", "1.", "/", "2", ")", "\n", "unit_vectors", "=", "unit_vectors", "/", "vector_norms", "[", ":", ",", "None", "]", "\n", "return", "unit_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.sample_canditate_rankers": [[47, 52], ["None"], "methods", ["None"], ["", "def", "sample_canditate_rankers", "(", "self", ",", "unit_vectors", ")", ":", "\n", "# sample unit vectors", "\n", "# sample new candidate weights", "\n", "        ", "new_weights", "=", "self", ".", "weights", "+", "self", ".", "step_size", "*", "unit_vectors", "\n", "return", "new_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.infer_winners_renomalize": [[53, 116], ["numpy.vstack", "numpy.array", "numpy.dot", "numpy.dot", "COLTRLinearRanker.COLTRLinearRanker.softmax", "COLTRLinearRanker.COLTRLinearRanker.softmax", "log_probs.reshape.reshape.reshape", "numpy.amin", "numpy.amin", "numpy.amax", "numpy.amax", "numpy.exp", "numpy.exp", "log_probs.reshape.reshape.reshape", "range", "COLTRLinearRanker.COLTRLinearRanker.compute_SNIPS", "numpy.sum", "numpy.sum", "len", "numpy.vstack", "numpy.vstack", "numpy.amin", "numpy.amin", "numpy.amax", "numpy.amax", "numpy.exp", "numpy.exp", "log_probs.reshape.reshape.reshape", "numpy.where", "len", "numpy.sum", "numpy.where", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.compute_SNIPS"], ["", "def", "infer_winners_renomalize", "(", "self", ",", "canditate_rankers", ",", "record", ")", ":", "\n", "        ", "current_ranker", "=", "self", ".", "weights", "\n", "all_ranker", "=", "np", ".", "vstack", "(", "(", "current_ranker", ",", "canditate_rankers", ")", ")", "# all rankers weights", "\n", "query", "=", "record", "[", "0", "]", "\n", "result_list", "=", "record", "[", "1", "]", "\n", "click_label", "=", "record", "[", "2", "]", "\n", "log_weight", "=", "np", ".", "array", "(", "record", "[", "3", "]", ")", "\n", "\n", "doc_indexes", "=", "[", "np", ".", "where", "(", "self", ".", "docid_list", "==", "i", ")", "[", "0", "]", "[", "0", "]", "for", "i", "in", "result_list", "]", "\n", "scores", "=", "np", ".", "dot", "(", "self", ".", "feature_matrix", ",", "all_ranker", ".", "T", ")", "\n", "log_score", "=", "np", ".", "dot", "(", "self", ".", "feature_matrix", ",", "log_weight", ".", "T", ")", "\n", "\n", "\n", "probs", "=", "self", ".", "softmax", "(", "scores", ")", "\n", "log_probs", "=", "self", ".", "softmax", "(", "log_score", ")", "\n", "log_probs", "=", "log_probs", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "propensities", "=", "probs", "[", "doc_indexes", "[", "0", "]", "]", "\n", "log_propensity", "=", "log_probs", "[", "doc_indexes", "[", "0", "]", "]", "\n", "\n", "#renormalize", "\n", "scores", "[", "doc_indexes", "[", "0", "]", "]", "=", "np", ".", "amin", "(", "scores", ")", "\n", "log_score", "[", "doc_indexes", "[", "0", "]", "]", "=", "np", ".", "amin", "(", "log_score", ")", "\n", "\n", "scores", "-=", "np", ".", "amax", "(", "scores", ")", "\n", "log_score", "-=", "np", ".", "amax", "(", "log_score", ")", "\n", "\n", "exp_scores", "=", "np", ".", "exp", "(", "scores", ")", "\n", "exp_log_score", "=", "np", ".", "exp", "(", "log_score", ")", "\n", "\n", "exp_scores", "[", "doc_indexes", "[", "0", "]", "]", "=", "0", "\n", "exp_log_score", "[", "doc_indexes", "[", "0", "]", "]", "=", "0", "\n", "\n", "probs", "=", "exp_scores", "/", "np", ".", "sum", "(", "exp_scores", ")", "\n", "log_probs", "=", "exp_log_score", "/", "np", ".", "sum", "(", "exp_log_score", ")", "\n", "log_probs", "=", "log_probs", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "doc_indexes", ")", ")", ":", "\n", "            ", "propensities", "=", "np", ".", "vstack", "(", "(", "propensities", ",", "probs", "[", "doc_indexes", "[", "i", "]", "]", ")", ")", "\n", "log_propensity", "=", "np", ".", "vstack", "(", "(", "log_propensity", ",", "log_probs", "[", "doc_indexes", "[", "i", "]", "]", ")", ")", "\n", "scores", "[", "doc_indexes", "[", ":", "i", "+", "1", "]", "]", "=", "np", ".", "amin", "(", "scores", ")", "\n", "log_score", "[", "doc_indexes", "[", ":", "i", "+", "1", "]", "]", "=", "np", ".", "amin", "(", "log_score", ")", "\n", "scores", "-=", "np", ".", "amax", "(", "scores", ")", "\n", "log_score", "-=", "np", ".", "amax", "(", "log_score", ")", "\n", "exp_scores", "=", "np", ".", "exp", "(", "scores", ")", "\n", "exp_log_score", "=", "np", ".", "exp", "(", "log_score", ")", "\n", "exp_scores", "[", "doc_indexes", "[", ":", "i", "+", "1", "]", "]", "=", "0", "\n", "exp_log_score", "[", "doc_indexes", "[", ":", "i", "+", "1", "]", "]", "=", "0", "\n", "probs", "=", "exp_scores", "/", "np", ".", "sum", "(", "exp_scores", "+", "1e-8", ")", "\n", "log_probs", "=", "exp_log_score", "/", "(", "np", ".", "sum", "(", "exp_log_score", ")", "+", "1e-8", ")", "\n", "log_probs", "=", "log_probs", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "\n", "\n", "", "SNIPS", "=", "self", ".", "compute_SNIPS", "(", "log_propensity", ",", "propensities", ",", "click_label", ")", "\n", "winners", "=", "np", ".", "where", "(", "SNIPS", "<", "SNIPS", "[", "0", "]", ")", "[", "0", "]", "\n", "#", "\n", "# IPS = self.compute_IPS(log_propensity, propensities, click_label)", "\n", "# winners = np.where(IPS < IPS[0])[0]", "\n", "\n", "if", "len", "(", "winners", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "winners", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.infer_winners": [[118, 147], ["numpy.vstack", "numpy.array", "numpy.dot", "numpy.dot", "log_propensity.reshape.reshape.reshape", "COLTRLinearRanker.COLTRLinearRanker.compute_SNIPS", "COLTRLinearRanker.COLTRLinearRanker.softmax", "COLTRLinearRanker.COLTRLinearRanker.softmax", "len", "numpy.where", "len", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.compute_SNIPS", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax"], ["", "def", "infer_winners", "(", "self", ",", "canditate_rankers", ",", "record", ")", ":", "\n", "        ", "current_ranker", "=", "self", ".", "weights", "\n", "all_ranker", "=", "np", ".", "vstack", "(", "(", "current_ranker", ",", "canditate_rankers", ")", ")", "# all rankers weights", "\n", "query", "=", "record", "[", "0", "]", "\n", "result_list", "=", "record", "[", "1", "]", "\n", "click_label", "=", "record", "[", "2", "]", "\n", "log_weight", "=", "np", ".", "array", "(", "record", "[", "3", "]", ")", "\n", "\n", "doc_indexes", "=", "[", "np", ".", "where", "(", "self", ".", "docid_list", "==", "i", ")", "[", "0", "]", "[", "0", "]", "for", "i", "in", "result_list", "]", "\n", "\n", "scores", "=", "np", ".", "dot", "(", "self", ".", "feature_matrix", ",", "all_ranker", ".", "T", ")", "\n", "log_score", "=", "np", ".", "dot", "(", "self", ".", "feature_matrix", ",", "log_weight", ".", "T", ")", "\n", "\n", "\n", "propensities", "=", "self", ".", "softmax", "(", "scores", ")", "[", "doc_indexes", "]", "\n", "log_propensity", "=", "self", ".", "softmax", "(", "log_score", ")", "[", "doc_indexes", "]", "\n", "log_propensity", "=", "log_propensity", ".", "reshape", "(", "len", "(", "result_list", ")", ",", "1", ")", "\n", "\n", "SNIPS", "=", "self", ".", "compute_SNIPS", "(", "log_propensity", ",", "propensities", ",", "click_label", ")", "\n", "\n", "winners", "=", "np", ".", "where", "(", "SNIPS", "<", "SNIPS", "[", "0", "]", ")", "[", "0", "]", "\n", "\n", "#", "\n", "# IPS = self.compute_IPS(log_propensity, propensities, click_label)", "\n", "# winners = np.where(IPS < IPS[0])[0]", "\n", "\n", "if", "len", "(", "winners", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "winners", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.compute_SNIPS": [[148, 161], ["numpy.array().reshape", "numpy.sum", "len", "numpy.sum", "len", "numpy.sum", "numpy.sum", "numpy.array", "numpy.sqrt", "len"], "methods", ["None"], ["", "def", "compute_SNIPS", "(", "self", ",", "log_propensity", ",", "propensities", ",", "click_label", ")", ":", "\n", "        ", "click_label", "=", "np", ".", "array", "(", "click_label", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "IPS", "=", "np", ".", "sum", "(", "(", "propensities", "/", "log_propensity", ")", "*", "click_label", ",", "axis", "=", "0", ")", "/", "len", "(", "click_label", ")", "\n", "\n", "S", "=", "np", ".", "sum", "(", "(", "propensities", "/", "log_propensity", ")", ",", "axis", "=", "0", ")", "/", "len", "(", "click_label", ")", "\n", "\n", "SNIPS", "=", "IPS", "/", "S", "\n", "\n", "Var", "=", "np", ".", "sum", "(", "(", "click_label", "-", "SNIPS", ")", "**", "2", "*", "(", "propensities", "/", "log_propensity", ")", "**", "2", ",", "axis", "=", "0", ")", "/", "np", ".", "sum", "(", "\n", "(", "propensities", "/", "log_propensity", ")", "**", "2", ",", "axis", "=", "0", ")", "\n", "\n", "return", "SNIPS", "+", "self", ".", "gamma", "*", "np", ".", "sqrt", "(", "Var", "/", "len", "(", "click_label", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.compute_IPS": [[162, 166], ["numpy.array().reshape", "numpy.sum", "len", "numpy.array"], "methods", ["None"], ["", "def", "compute_IPS", "(", "self", ",", "log_propensity", ",", "propensities", ",", "click_label", ")", ":", "\n", "        ", "click_label", "=", "np", ".", "array", "(", "click_label", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "IPS", "=", "np", ".", "sum", "(", "(", "propensities", "/", "log_propensity", ")", "*", "click_label", ",", "axis", "=", "0", ")", "/", "len", "(", "click_label", ")", "\n", "return", "IPS", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax": [[167, 170], ["numpy.exp", "numpy.exp.sum", "numpy.max"], "methods", ["None"], ["", "def", "softmax", "(", "self", ",", "x", ")", ":", "\n", "        ", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "\n", "return", "e_x", "/", "e_x", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.__init__": [[6, 9], ["ranker.LinearRanker.LinearRanker.__init__"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "learning_rate", ",", "tau", "=", "1", ",", "learning_rate_decay", "=", "1", ",", "random_initial", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_features", ",", "learning_rate", ",", "learning_rate_decay", ",", "random_initial", ")", "\n", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.get_query_result_list": [[10, 26], ["dataset.get_all_features_by_query", "numpy.array", "numpy.minimum", "PDGDLinearRanker.PDGDLinearRanker.get_scores", "PDGDLinearRanker.PDGDLinearRanker._recursive_choice", "dataset.get_candidate_docids_by_query", "numpy.amax", "numpy.copy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker._recursive_choice", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query"], ["", "def", "get_query_result_list", "(", "self", ",", "dataset", ",", "query", ",", "random", "=", "False", ")", ":", "\n", "        ", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "docid_list", "=", "np", ".", "array", "(", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "n_docs", "=", "docid_list", ".", "shape", "[", "0", "]", "\n", "\n", "k", "=", "np", ".", "minimum", "(", "10", ",", "n_docs", ")", "\n", "\n", "doc_scores", "=", "self", ".", "get_scores", "(", "feature_matrix", ")", "\n", "\n", "doc_scores", "+=", "18", "-", "np", ".", "amax", "(", "doc_scores", ")", "\n", "\n", "ranking", "=", "self", ".", "_recursive_choice", "(", "np", ".", "copy", "(", "doc_scores", ")", ",", "\n", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "k", ",", "\n", "random", ")", "\n", "return", "ranking", ",", "doc_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker._recursive_choice": [[27, 59], ["numpy.amin", "numpy.exp", "numpy.sum", "numpy.minimum", "numpy.concatenate", "numpy.amax", "numpy.sum", "numpy.random.choice", "numpy.random.choice", "PDGDLinearRanker.PDGDLinearRanker._recursive_choice", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker._recursive_choice"], ["", "def", "_recursive_choice", "(", "self", ",", "scores", ",", "incomplete_ranking", ",", "k_left", ",", "random", ")", ":", "\n", "        ", "n_docs", "=", "scores", ".", "shape", "[", "0", "]", "\n", "\n", "scores", "[", "incomplete_ranking", "]", "=", "np", ".", "amin", "(", "scores", ")", "\n", "\n", "scores", "+=", "18", "-", "np", ".", "amax", "(", "scores", ")", "\n", "exp_scores", "=", "np", ".", "exp", "(", "scores", "/", "self", ".", "tau", ")", "\n", "\n", "exp_scores", "[", "incomplete_ranking", "]", "=", "0", "\n", "probs", "=", "exp_scores", "/", "np", ".", "sum", "(", "exp_scores", ")", "\n", "\n", "safe_n", "=", "np", ".", "sum", "(", "probs", ">", "10", "**", "(", "-", "4", ")", "/", "n_docs", ")", "\n", "\n", "safe_k", "=", "np", ".", "minimum", "(", "safe_n", ",", "k_left", ")", "\n", "\n", "if", "random", ":", "\n", "            ", "next_ranking", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "n_docs", ")", ",", "\n", "replace", "=", "False", ",", "\n", "size", "=", "safe_k", ")", "\n", "", "else", ":", "\n", "            ", "next_ranking", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "n_docs", ")", ",", "\n", "replace", "=", "False", ",", "\n", "p", "=", "probs", ",", "\n", "size", "=", "safe_k", ")", "\n", "\n", "", "ranking", "=", "np", ".", "concatenate", "(", "(", "incomplete_ranking", ",", "next_ranking", ")", ")", "\n", "k_left", "=", "k_left", "-", "safe_k", "\n", "\n", "if", "k_left", ">", "0", ":", "\n", "            ", "return", "self", ".", "_recursive_choice", "(", "scores", ",", "ranking", ",", "k_left", ",", "random", ")", "\n", "", "else", ":", "\n", "            ", "return", "ranking", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks": [[60, 129], ["numpy.tile", "numpy.repeat", "numpy.exp", "numpy.exp", "numpy.maximum", "numpy.minimum", "PDGDLinearRanker.PDGDLinearRanker._calculate_unbias_weights", "numpy.reshape", "numpy.sum", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.minimum", "numpy.ones", "numpy.maximum", "numpy.sum", "PDGDLinearRanker.PDGDLinearRanker.get_update_gradients", "PDGDLinearRanker.PDGDLinearRanker._update_to_documents", "numpy.where", "numpy.where", "numpy.zeros", "numpy.cumsum", "numpy.logical_xor", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker._calculate_unbias_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.get_update_gradients", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker._update_to_documents"], ["", "", "def", "update_to_clicks", "(", "self", ",", "click_label", ",", "ranking", ",", "doc_scores", ",", "feature_matrix", ",", "last_exam", "=", "None", ",", "return_gradients", "=", "False", ")", ":", "\n", "\n", "        ", "if", "last_exam", "is", "None", ":", "\n", "\n", "            ", "clicks", "=", "np", ".", "array", "(", "click_label", "==", "1", ")", "\n", "\n", "n_docs", "=", "ranking", ".", "shape", "[", "0", "]", "\n", "n_results", "=", "10", "\n", "cur_k", "=", "np", ".", "minimum", "(", "n_docs", ",", "n_results", ")", "\n", "\n", "included", "=", "np", ".", "ones", "(", "cur_k", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "if", "not", "clicks", "[", "-", "1", "]", ":", "\n", "                ", "included", "[", "1", ":", "]", "=", "np", ".", "cumsum", "(", "clicks", "[", ":", ":", "-", "1", "]", ")", "[", ":", "0", ":", "-", "1", "]", "\n", "\n", "", "neg_ind", "=", "np", ".", "where", "(", "np", ".", "logical_xor", "(", "clicks", ",", "included", ")", ")", "[", "0", "]", "\n", "pos_ind", "=", "np", ".", "where", "(", "clicks", ")", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "if", "last_exam", "==", "10", ":", "\n", "                ", "neg_ind", "=", "np", ".", "where", "(", "click_label", "[", ":", "last_exam", "]", "==", "0", ")", "[", "0", "]", "\n", "pos_ind", "=", "np", ".", "where", "(", "click_label", "[", ":", "last_exam", "]", "==", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "neg_ind", "=", "np", ".", "where", "(", "click_label", "[", ":", "last_exam", "+", "1", "]", "==", "0", ")", "[", "0", "]", "\n", "pos_ind", "=", "np", ".", "where", "(", "click_label", "[", ":", "last_exam", "]", "==", "1", ")", "[", "0", "]", "\n", "\n", "\n", "", "", "n_pos", "=", "pos_ind", ".", "shape", "[", "0", "]", "\n", "n_neg", "=", "neg_ind", ".", "shape", "[", "0", "]", "\n", "n_pairs", "=", "n_pos", "*", "n_neg", "\n", "\n", "if", "n_pairs", "==", "0", ":", "\n", "            ", "if", "return_gradients", ":", "\n", "                ", "return", "np", ".", "zeros", "(", "feature_matrix", ".", "shape", "[", "1", "]", ")", "\n", "", "return", "\n", "\n", "", "pos_r_ind", "=", "ranking", "[", "pos_ind", "]", "\n", "neg_r_ind", "=", "ranking", "[", "neg_ind", "]", "\n", "\n", "pos_scores", "=", "doc_scores", "[", "pos_r_ind", "]", "\n", "neg_scores", "=", "doc_scores", "[", "neg_r_ind", "]", "\n", "\n", "log_pair_pos", "=", "np", ".", "tile", "(", "pos_scores", ",", "n_neg", ")", "\n", "log_pair_neg", "=", "np", ".", "repeat", "(", "neg_scores", ",", "n_pos", ")", "\n", "\n", "pair_trans", "=", "18", "-", "np", ".", "maximum", "(", "log_pair_pos", ",", "log_pair_neg", ")", "\n", "exp_pair_pos", "=", "np", ".", "exp", "(", "log_pair_pos", "+", "pair_trans", ")", "\n", "exp_pair_neg", "=", "np", ".", "exp", "(", "log_pair_neg", "+", "pair_trans", ")", "\n", "\n", "pair_denom", "=", "(", "exp_pair_pos", "+", "exp_pair_neg", ")", "\n", "pair_w", "=", "np", ".", "maximum", "(", "exp_pair_pos", ",", "exp_pair_neg", ")", "\n", "pair_w", "/=", "pair_denom", "\n", "pair_w", "/=", "pair_denom", "\n", "pair_w", "*=", "np", ".", "minimum", "(", "exp_pair_pos", ",", "exp_pair_neg", ")", "\n", "\n", "pair_w", "*=", "self", ".", "_calculate_unbias_weights", "(", "pos_ind", ",", "neg_ind", ",", "doc_scores", ",", "ranking", ")", "\n", "\n", "reshaped", "=", "np", ".", "reshape", "(", "pair_w", ",", "(", "n_neg", ",", "n_pos", ")", ")", "\n", "pos_w", "=", "np", ".", "sum", "(", "reshaped", ",", "axis", "=", "0", ")", "\n", "neg_w", "=", "-", "np", ".", "sum", "(", "reshaped", ",", "axis", "=", "1", ")", "\n", "\n", "all_w", "=", "np", ".", "concatenate", "(", "[", "pos_w", ",", "neg_w", "]", ")", "\n", "all_ind", "=", "np", ".", "concatenate", "(", "[", "pos_r_ind", ",", "neg_r_ind", "]", ")", "\n", "\n", "if", "return_gradients", ":", "\n", "            ", "return", "self", ".", "get_update_gradients", "(", "all_ind", ",", "all_w", ",", "feature_matrix", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_update_to_documents", "(", "all_ind", ",", "all_w", ",", "feature_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.get_update_gradients": [[131, 135], ["numpy.sum"], "methods", ["None"], ["", "", "def", "get_update_gradients", "(", "self", ",", "doc_ind", ",", "doc_weights", ",", "feature_matrix", ")", ":", "\n", "        ", "weighted_docs", "=", "feature_matrix", "[", "doc_ind", ",", ":", "]", "*", "doc_weights", "[", ":", ",", "None", "]", "\n", "gradients", "=", "np", ".", "sum", "(", "weighted_docs", ",", "axis", "=", "0", ")", "\n", "return", "gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_gradients": [[136, 139], ["None"], "methods", ["None"], ["", "def", "update_to_gradients", "(", "self", ",", "gradients", ")", ":", "\n", "        ", "self", ".", "weights", "+=", "self", ".", "learning_rate", "*", "gradients", "\n", "self", ".", "learning_rate", "*=", "self", ".", "learning_rate_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker._update_to_documents": [[140, 150], ["numpy.sum"], "methods", ["None"], ["", "def", "_update_to_documents", "(", "self", ",", "doc_ind", ",", "doc_weights", ",", "feature_matrix", ")", ":", "\n", "        ", "weighted_docs", "=", "feature_matrix", "[", "doc_ind", ",", ":", "]", "*", "doc_weights", "[", ":", ",", "None", "]", "\n", "gradients", "=", "np", ".", "sum", "(", "weighted_docs", ",", "axis", "=", "0", ")", "\n", "# print(\"gradient length\", np.sqrt(np.sum(gradient ** 2)))", "\n", "# # print(gradient)", "\n", "# print(\"weight length\", np.sqrt(np.sum(self.weights**2)))", "\n", "# # print(self.weights)", "\n", "# print()", "\n", "self", ".", "weights", "+=", "self", ".", "learning_rate", "*", "gradients", "\n", "self", ".", "learning_rate", "*=", "self", ".", "learning_rate_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker._calculate_unbias_weights": [[151, 157], ["PDGDLinearRanker.PDGDLinearRanker._calculate_observed_prob", "PDGDLinearRanker.PDGDLinearRanker._calculate_flipped_prob"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker._calculate_observed_prob", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker._calculate_flipped_prob"], ["", "def", "_calculate_unbias_weights", "(", "self", ",", "pos_ind", ",", "neg_ind", ",", "doc_scores", ",", "ranking", ")", ":", "\n", "        ", "ranking_prob", "=", "self", ".", "_calculate_observed_prob", "(", "pos_ind", ",", "neg_ind", ",", "\n", "doc_scores", ",", "ranking", ")", "\n", "flipped_prob", "=", "self", ".", "_calculate_flipped_prob", "(", "pos_ind", ",", "neg_ind", ",", "\n", "doc_scores", ",", "ranking", ")", "\n", "return", "flipped_prob", "/", "(", "ranking_prob", "+", "flipped_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker._calculate_flipped_prob": [[158, 208], ["numpy.arange", "numpy.arange", "numpy.arange", "numpy.tile", "numpy.repeat", "numpy.tile", "numpy.minimum", "numpy.maximum", "numpy.logical_and", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.zeros", "numpy.cumsum().astype", "numpy.amin", "numpy.amax", "numpy.exp", "numpy.exp", "numpy.sum", "numpy.ones", "numpy.prod", "numpy.cumsum"], "methods", ["None"], ["", "def", "_calculate_flipped_prob", "(", "self", ",", "pos_ind", ",", "neg_ind", ",", "doc_scores", ",", "ranking", ")", ":", "\n", "        ", "n_pos", "=", "pos_ind", ".", "shape", "[", "0", "]", "\n", "n_neg", "=", "neg_ind", ".", "shape", "[", "0", "]", "\n", "n_pairs", "=", "n_pos", "*", "n_neg", "\n", "n_results", "=", "ranking", ".", "shape", "[", "0", "]", "\n", "n_docs", "=", "doc_scores", ".", "shape", "[", "0", "]", "\n", "\n", "results_i", "=", "np", ".", "arange", "(", "n_results", ")", "\n", "pair_i", "=", "np", ".", "arange", "(", "n_pairs", ")", "\n", "doc_i", "=", "np", ".", "arange", "(", "n_docs", ")", "\n", "\n", "pos_pair_i", "=", "np", ".", "tile", "(", "pos_ind", ",", "n_neg", ")", "\n", "neg_pair_i", "=", "np", ".", "repeat", "(", "neg_ind", ",", "n_pos", ")", "\n", "\n", "flipped_rankings", "=", "np", ".", "tile", "(", "ranking", "[", "None", ",", ":", "]", ",", "\n", "[", "n_pairs", ",", "1", "]", ")", "\n", "flipped_rankings", "[", "pair_i", ",", "pos_pair_i", "]", "=", "ranking", "[", "neg_pair_i", "]", "\n", "flipped_rankings", "[", "pair_i", ",", "neg_pair_i", "]", "=", "ranking", "[", "pos_pair_i", "]", "\n", "\n", "min_pair_i", "=", "np", ".", "minimum", "(", "pos_pair_i", ",", "neg_pair_i", ")", "\n", "max_pair_i", "=", "np", ".", "maximum", "(", "pos_pair_i", ",", "neg_pair_i", ")", "\n", "range_mask", "=", "np", ".", "logical_and", "(", "min_pair_i", "[", ":", ",", "None", "]", "<=", "results_i", ",", "\n", "max_pair_i", "[", ":", ",", "None", "]", ">=", "results_i", ")", "\n", "\n", "flipped_log", "=", "doc_scores", "[", "flipped_rankings", "]", "\n", "\n", "safe_log", "=", "np", ".", "tile", "(", "doc_scores", "[", "None", ",", "None", ",", ":", "]", ",", "\n", "[", "n_pairs", ",", "n_results", ",", "1", "]", ")", "\n", "\n", "results_ij", "=", "np", ".", "tile", "(", "results_i", "[", "None", ",", "1", ":", "]", ",", "[", "n_pairs", ",", "1", "]", ")", "\n", "pair_ij", "=", "np", ".", "tile", "(", "pair_i", "[", ":", ",", "None", "]", ",", "[", "1", ",", "n_results", "-", "1", "]", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "n_pairs", ",", "n_results", ",", "n_docs", ")", ")", "\n", "mask", "[", "pair_ij", ",", "results_ij", ",", "flipped_rankings", "[", ":", ",", ":", "-", "1", "]", "]", "=", "True", "\n", "mask", "=", "np", ".", "cumsum", "(", "mask", ",", "axis", "=", "1", ")", ".", "astype", "(", "bool", ")", "\n", "\n", "safe_log", "[", "mask", "]", "=", "np", ".", "amin", "(", "safe_log", ")", "\n", "safe_max", "=", "np", ".", "amax", "(", "safe_log", ",", "axis", "=", "2", ")", "\n", "safe_log", "-=", "safe_max", "[", ":", ",", ":", ",", "None", "]", "-", "18", "\n", "flipped_log", "-=", "safe_max", "-", "18", "\n", "flipped_exp", "=", "np", ".", "exp", "(", "flipped_log", ")", "\n", "\n", "safe_exp", "=", "np", ".", "exp", "(", "safe_log", ")", "\n", "safe_exp", "[", "mask", "]", "=", "0", "\n", "safe_denom", "=", "np", ".", "sum", "(", "safe_exp", ",", "axis", "=", "2", ")", "\n", "safe_prob", "=", "np", ".", "ones", "(", "(", "n_pairs", ",", "n_results", ")", ")", "\n", "safe_prob", "[", "range_mask", "]", "=", "(", "flipped_exp", "/", "safe_denom", ")", "[", "range_mask", "]", "\n", "\n", "safe_pair_prob", "=", "np", ".", "prod", "(", "safe_prob", ",", "axis", "=", "1", ")", "\n", "\n", "return", "safe_pair_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker._calculate_observed_prob": [[209, 255], ["numpy.arange", "numpy.tile", "numpy.repeat", "numpy.minimum", "numpy.maximum", "numpy.logical_and", "numpy.tile", "numpy.zeros", "numpy.cumsum().astype", "numpy.amin", "numpy.amax", "numpy.exp", "numpy.exp", "numpy.sum", "numpy.tile", "numpy.ones", "numpy.prod", "numpy.cumsum"], "methods", ["None"], ["", "def", "_calculate_observed_prob", "(", "self", ",", "pos_ind", ",", "neg_ind", ",", "doc_scores", ",", "ranking", ")", ":", "\n", "        ", "n_pos", "=", "pos_ind", ".", "shape", "[", "0", "]", "\n", "n_neg", "=", "neg_ind", ".", "shape", "[", "0", "]", "\n", "n_pairs", "=", "n_pos", "*", "n_neg", "\n", "n_results", "=", "ranking", ".", "shape", "[", "0", "]", "\n", "n_docs", "=", "doc_scores", ".", "shape", "[", "0", "]", "\n", "\n", "results_i", "=", "np", ".", "arange", "(", "n_results", ")", "\n", "# pair_i = np.arange(n_pairs)", "\n", "# doc_i = np.arange(n_docs)", "\n", "\n", "pos_pair_i", "=", "np", ".", "tile", "(", "pos_ind", ",", "n_neg", ")", "\n", "neg_pair_i", "=", "np", ".", "repeat", "(", "neg_ind", ",", "n_pos", ")", "\n", "\n", "min_pair_i", "=", "np", ".", "minimum", "(", "pos_pair_i", ",", "neg_pair_i", ")", "\n", "max_pair_i", "=", "np", ".", "maximum", "(", "pos_pair_i", ",", "neg_pair_i", ")", "\n", "range_mask", "=", "np", ".", "logical_and", "(", "min_pair_i", "[", ":", ",", "None", "]", "<=", "results_i", ",", "\n", "max_pair_i", "[", ":", ",", "None", "]", ">=", "results_i", ")", "\n", "\n", "safe_log", "=", "np", ".", "tile", "(", "doc_scores", "[", "None", ",", ":", "]", ",", "\n", "[", "n_results", ",", "1", "]", ")", "\n", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "n_results", ",", "n_docs", ")", ")", "\n", "mask", "[", "results_i", "[", "1", ":", "]", ",", "ranking", "[", ":", "-", "1", "]", "]", "=", "True", "\n", "mask", "=", "np", ".", "cumsum", "(", "mask", ",", "axis", "=", "0", ")", ".", "astype", "(", "bool", ")", "\n", "\n", "safe_log", "[", "mask", "]", "=", "np", ".", "amin", "(", "safe_log", ")", "\n", "safe_max", "=", "np", ".", "amax", "(", "safe_log", ",", "axis", "=", "1", ")", "\n", "safe_log", "-=", "safe_max", "[", ":", ",", "None", "]", "-", "18", "\n", "safe_exp", "=", "np", ".", "exp", "(", "safe_log", ")", "\n", "safe_exp", "[", "mask", "]", "=", "0", "\n", "\n", "ranking_log", "=", "doc_scores", "[", "ranking", "]", "-", "safe_max", "+", "18", "\n", "ranking_exp", "=", "np", ".", "exp", "(", "ranking_log", ")", "\n", "\n", "safe_denom", "=", "np", ".", "sum", "(", "safe_exp", ",", "axis", "=", "1", ")", "\n", "ranking_prob", "=", "ranking_exp", "/", "safe_denom", "\n", "\n", "tiled_prob", "=", "np", ".", "tile", "(", "ranking_prob", "[", "None", ",", ":", "]", ",", "[", "n_pairs", ",", "1", "]", ")", "\n", "\n", "safe_prob", "=", "np", ".", "ones", "(", "(", "n_pairs", ",", "n_results", ")", ")", "\n", "safe_prob", "[", "range_mask", "]", "=", "tiled_prob", "[", "range_mask", "]", "\n", "\n", "safe_pair_prob", "=", "np", ".", "prod", "(", "safe_prob", ",", "axis", "=", "1", ")", "\n", "\n", "return", "safe_pair_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.set_learning_rate": [[256, 258], ["None"], "methods", ["None"], ["", "def", "set_learning_rate", "(", "self", ",", "learning_rate", ")", ":", "\n", "        ", "self", ".", "learning_rate", "=", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.set_tau": [[259, 261], ["None"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau", ")", ":", "\n", "        ", "self", ".", "tau", "=", "tau", "", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.__init__": [[7, 22], ["ranker.AbstractRanker.AbstractRanker.__init__", "tensorflow.placeholder", "tensorflow.placeholder", "NeuralRanker.NeuralRanker._add_layer", "NeuralRanker.NeuralRanker._add_layer", "NeuralRanker.NeuralRanker._add_layer", "tensorflow.reduce_mean", "tensorflow.train.GradientDescentOptimizer().minimize", "tensorflow.Session", "NeuralRanker.NeuralRanker.sess.run", "tensorflow.global_variables_initializer", "tensorflow.reduce_sum", "tensorflow.train.GradientDescentOptimizer", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker._add_layer", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker._add_layer", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker._add_layer", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "learning_rate", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_features", ")", "\n", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "\n", "self", ".", "xs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "num_features", "]", ")", "\n", "self", ".", "ys", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "2", "]", ")", "\n", "self", ".", "l1", "=", "self", ".", "_add_layer", "(", "self", ".", "xs", ",", "self", ".", "num_features", ",", "12", ",", "activation_function", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "self", ".", "l2", "=", "self", ".", "_add_layer", "(", "self", ".", "l1", ",", "12", ",", "4", ",", "activation_function", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "self", ".", "prediction", "=", "self", ".", "_add_layer", "(", "self", ".", "l2", ",", "4", ",", "2", ",", "activation_function", "=", "tf", ".", "nn", ".", "softmax", ")", "\n", "self", ".", "cross_entropy", "=", "tf", ".", "reduce_mean", "(", "-", "tf", ".", "reduce_sum", "(", "self", ".", "ys", "*", "tf", ".", "log", "(", "self", ".", "prediction", "+", "1e-10", ")", ",", "\n", "reduction_indices", "=", "[", "1", "]", ")", ")", "\n", "self", ".", "train_step", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "learning_rate", ")", ".", "minimize", "(", "self", ".", "cross_entropy", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker._add_layer": [[23, 33], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.random_normal", "tensorflow.matmul", "activation_function", "tensorflow.zeros"], "methods", ["None"], ["", "def", "_add_layer", "(", "self", ",", "inputs", ",", "in_size", ",", "out_size", ",", "activation_function", "=", "None", ",", ")", ":", "\n", "# add one more layer and return the output of this layer", "\n", "        ", "Weights", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "in_size", ",", "out_size", "]", ")", ")", "\n", "biases", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "1", ",", "out_size", "]", ")", "+", "0.1", ",", ")", "\n", "Wx_plus_b", "=", "tf", ".", "matmul", "(", "inputs", ",", "Weights", ")", "+", "biases", "\n", "if", "activation_function", "is", "None", ":", "\n", "            ", "outputs", "=", "Wx_plus_b", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "activation_function", "(", "Wx_plus_b", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.update": [[36, 43], ["NeuralRanker.NeuralRanker._clicks_to_bitmap", "NeuralRanker.NeuralRanker.sess.run"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2._clicks_to_bitmap", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "update", "(", "self", ",", "clicks", ",", "result_list", ",", "all_features", ")", ":", "\n", "        ", "last_click", ",", "click_bitmap", "=", "self", ".", "_clicks_to_bitmap", "(", "clicks", ")", "\n", "features", "=", "all_features", "[", "result_list", "]", "\n", "\n", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "train_step", ",", "self", ".", "cross_entropy", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "xs", ":", "features", "[", ":", "last_click", "+", "1", "]", ",", "\n", "self", ".", "ys", ":", "click_bitmap", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker._clicks_to_bitmap": [[44, 50], ["numpy.vstack", "numpy.where"], "methods", ["None"], ["", "def", "_clicks_to_bitmap", "(", "self", ",", "clicks", ")", ":", "\n", "        ", "last_click", "=", "np", ".", "where", "(", "clicks", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "click_label", "=", "clicks", "[", ":", "last_click", "+", "1", "]", "\n", "click_label_flip", "=", "1", "-", "clicks", "[", ":", "last_click", "+", "1", "]", "\n", "click_bitmap", "=", "np", ".", "vstack", "(", "(", "click_label", ",", "click_label_flip", ")", ")", ".", "T", "\n", "return", "last_click", ",", "click_bitmap", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list": [[53, 68], ["dataset.get_all_features_by_query", "numpy.array", "numpy.minimum", "NeuralRanker.NeuralRanker.get_scores", "NeuralRanker.NeuralRanker._recursive_choice", "dataset.get_candidate_docids_by_query", "numpy.copy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker._recursive_choice", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query"], ["", "def", "get_query_result_list", "(", "self", ",", "dataset", ",", "query", ")", ":", "\n", "        ", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "docid_list", "=", "np", ".", "array", "(", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "n_docs", "=", "docid_list", ".", "shape", "[", "0", "]", "\n", "\n", "k", "=", "np", ".", "minimum", "(", "10", ",", "n_docs", ")", "\n", "\n", "doc_scores", "=", "self", ".", "get_scores", "(", "feature_matrix", ")", "\n", "\n", "# doc_scores += 18 - np.amax(doc_scores)", "\n", "\n", "ranking", "=", "self", ".", "_recursive_choice", "(", "np", ".", "copy", "(", "doc_scores", ")", ",", "\n", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int32", ")", ",", "\n", "k", ")", "\n", "return", "ranking", ",", "doc_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker._recursive_choice": [[69, 98], ["numpy.amin", "numpy.exp", "numpy.sum", "numpy.minimum", "numpy.random.choice", "numpy.concatenate", "numpy.sum", "numpy.arange", "NeuralRanker.NeuralRanker._recursive_choice"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker._recursive_choice"], ["", "def", "_recursive_choice", "(", "self", ",", "scores", ",", "incomplete_ranking", ",", "k_left", ")", ":", "\n", "        ", "n_docs", "=", "scores", ".", "shape", "[", "0", "]", "\n", "\n", "scores", "[", "incomplete_ranking", "]", "=", "np", ".", "amin", "(", "scores", ")", "\n", "\n", "# scores += 18 - np.amax(scores)", "\n", "\n", "exp_scores", "=", "np", ".", "exp", "(", "scores", ")", "\n", "\n", "\n", "exp_scores", "[", "incomplete_ranking", "]", "=", "0", "\n", "probs", "=", "exp_scores", "/", "np", ".", "sum", "(", "exp_scores", ")", "\n", "\n", "safe_n", "=", "np", ".", "sum", "(", "probs", ">", "10", "**", "(", "-", "4", ")", "/", "n_docs", ")", "\n", "\n", "safe_k", "=", "np", ".", "minimum", "(", "safe_n", ",", "k_left", ")", "\n", "\n", "next_ranking", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "n_docs", ")", ",", "\n", "replace", "=", "False", ",", "\n", "p", "=", "probs", ",", "\n", "size", "=", "safe_k", ")", "\n", "\n", "ranking", "=", "np", ".", "concatenate", "(", "(", "incomplete_ranking", ",", "next_ranking", ")", ")", "\n", "k_left", "=", "k_left", "-", "safe_k", "\n", "\n", "if", "k_left", ">", "0", ":", "\n", "            ", "return", "self", ".", "_recursive_choice", "(", "scores", ",", "ranking", ",", "k_left", ")", "\n", "", "else", ":", "\n", "            ", "return", "ranking", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list": [[99, 114], ["dataset.get_all_querys", "numpy.array", "docid_list.reshape.reshape.reshape", "dataset.get_all_features_by_query", "NeuralRanker.NeuralRanker.get_scores", "numpy.column_stack", "numpy.flip", "dataset.get_candidate_docids_by_query", "len", "docid_score_list[].argsort"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_candidate_docids_by_query"], ["", "", "def", "get_all_query_result_list", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "query_result_list", "=", "{", "}", "\n", "\n", "for", "query", "in", "dataset", ".", "get_all_querys", "(", ")", ":", "\n", "            ", "docid_list", "=", "np", ".", "array", "(", "dataset", ".", "get_candidate_docids_by_query", "(", "query", ")", ")", "\n", "docid_list", "=", "docid_list", ".", "reshape", "(", "(", "len", "(", "docid_list", ")", ",", "1", ")", ")", "\n", "feature_matrix", "=", "dataset", ".", "get_all_features_by_query", "(", "query", ")", "\n", "score_list", "=", "self", ".", "get_scores", "(", "feature_matrix", ")", "\n", "\n", "docid_score_list", "=", "np", ".", "column_stack", "(", "(", "docid_list", ",", "score_list", ")", ")", "\n", "docid_score_list", "=", "np", ".", "flip", "(", "docid_score_list", "[", "docid_score_list", "[", ":", ",", "1", "]", ".", "argsort", "(", ")", "]", ",", "0", ")", "\n", "\n", "query_result_list", "[", "query", "]", "=", "docid_score_list", "[", ":", ",", "0", "]", "\n", "\n", "", "return", "query_result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_scores": [[115, 118], ["NeuralRanker.NeuralRanker.sess.run"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "get_scores", "(", "self", ",", "features", ")", ":", "\n", "        ", "predicts", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "prediction", ",", "feed_dict", "=", "{", "self", ".", "xs", ":", "features", "}", ")", "\n", "return", "predicts", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.assign_weights": [[119, 121], ["None"], "methods", ["None"], ["", "def", "assign_weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights": [[122, 124], ["None"], "methods", ["None"], ["", "def", "get_current_weights", "(", "self", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM.__init__": [[24, 48], ["clickModel.CM.CM.__init__", "keras.layers.Reshape", "keras.layers.LSTM", "keras.layers.Dense", "keras.layers.Dropout", "print", "NCM.NCM.model.get_layer", "NCM.NCM.model.get_layer", "NCM.NCM._build_inference_model", "NCM.NCM._build_model", "keras.optimizers.Adadelta", "NCM.NCM.model.compile", "NCM.NCM.model.summary"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM._build_inference_model", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF._build_model"], ["    ", "def", "__init__", "(", "self", ",", "n_a", ",", "q_dim", ",", "d_dim", ",", "model", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'NCM'", "\n", "self", ".", "n_a", "=", "n_a", "\n", "self", ".", "q_dim", "=", "q_dim", "\n", "self", ".", "d_dim", "=", "d_dim", "\n", "self", ".", "rep_dim", "=", "q_dim", "+", "1", "+", "d_dim", "\n", "self", ".", "reshapor", "=", "Reshape", "(", "(", "1", ",", "self", ".", "rep_dim", ")", ")", "\n", "self", ".", "LSTM_cell", "=", "LSTM", "(", "n_a", ",", "return_state", "=", "True", ",", "name", "=", "\"lstm_cell\"", ")", "\n", "self", ".", "densor", "=", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ",", "name", "=", "\"dense\"", ")", "\n", "self", ".", "dropout", "=", "Dropout", "(", "0.2", ")", "\n", "if", "model", "is", "not", "None", ":", "\n", "            ", "self", ".", "model", "=", "model", "\n", "self", ".", "LSTM_cell", "=", "self", ".", "model", ".", "get_layer", "(", "\"lstm_cell\"", ")", "\n", "self", ".", "densor", "=", "self", ".", "model", ".", "get_layer", "(", "\"dense\"", ")", "\n", "self", ".", "inference_model", "=", "self", ".", "_build_inference_model", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "_build_model", "(", ")", "\n", "opt", "=", "Adadelta", "(", ")", "\n", "self", ".", "model", ".", "compile", "(", "optimizer", "=", "opt", ",", "loss", "=", "'binary_crossentropy'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "", "print", "(", "self", ".", "model", ".", "summary", "(", ")", ")", "\n", "\n", "self", ".", "query_rep", "=", "{", "}", "\n", "self", ".", "doc_rep", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM._build_model": [[50, 71], ["keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "range", "keras.models.Model", "NCM.NCM.reshapor", "NCM.NCM.dropout", "NCM.NCM.LSTM_cell", "NCM.NCM.dropout", "keras.layers.Lambda", "NCM.NCM.densor", "outputs.append"], "methods", ["None"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "# Define the input layer and specify the shape", "\n", "        ", "X", "=", "Input", "(", "shape", "=", "(", "11", ",", "self", ".", "rep_dim", ")", ")", "\n", "a0", "=", "Input", "(", "shape", "=", "(", "self", ".", "n_a", ",", ")", ",", "name", "=", "'a0'", ")", "\n", "c0", "=", "Input", "(", "shape", "=", "(", "self", ".", "n_a", ",", ")", ",", "name", "=", "'c0'", ")", "\n", "a", "=", "a0", "\n", "c", "=", "c0", "\n", "outputs", "=", "[", "]", "\n", "\n", "for", "t", "in", "range", "(", "11", ")", ":", "\n", "            ", "x", "=", "Lambda", "(", "lambda", "X", ":", "X", "[", ":", ",", "t", ",", ":", "]", ")", "(", "X", ")", "\n", "x", "=", "self", ".", "reshapor", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "a", ",", "_", ",", "c", "=", "self", ".", "LSTM_cell", "(", "inputs", "=", "x", ",", "initial_state", "=", "[", "a", ",", "c", "]", ")", "\n", "a", "=", "self", ".", "dropout", "(", "a", ")", "\n", "if", "t", ">=", "1", ":", "\n", "                ", "out", "=", "self", ".", "densor", "(", "a", ")", "\n", "outputs", ".", "append", "(", "out", ")", "\n", "", "", "model", "=", "Model", "(", "inputs", "=", "[", "X", ",", "a0", ",", "c0", "]", ",", "outputs", "=", "outputs", ")", "\n", "# self.test_model = Model(inputs=[X, a0, c0], outputs=outputs)", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM._build_inference_model": [[73, 103], ["keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "range", "keras.models.Model", "NCM.NCM.LSTM_cell", "NCM.NCM.densor", "outputs.append", "keras.layers.Lambda", "keras.layers.Lambda", "keras.layers.Lambda"], "methods", ["None"], ["", "def", "_build_inference_model", "(", "self", ")", ":", "\n", "        ", "x0", "=", "Input", "(", "shape", "=", "(", "1", ",", "self", ".", "rep_dim", ")", ")", "\n", "\n", "# Define s0, initial hidden state for the decoder LSTM", "\n", "a0", "=", "Input", "(", "shape", "=", "(", "self", ".", "n_a", ",", ")", ",", "name", "=", "'a0'", ")", "\n", "c0", "=", "Input", "(", "shape", "=", "(", "self", ".", "n_a", ",", ")", ",", "name", "=", "'c0'", ")", "\n", "i0", "=", "Input", "(", "shape", "=", "(", "1", ",", ")", ",", "name", "=", "'i0'", ")", "\n", "q0", "=", "Input", "(", "shape", "=", "(", "self", ".", "q_dim", ",", ")", ",", "name", "=", "'q0'", ")", "\n", "D", "=", "Input", "(", "shape", "=", "(", "10", ",", "self", ".", "d_dim", ")", ",", "name", "=", "'D'", ")", "\n", "a", "=", "a0", "\n", "c", "=", "c0", "\n", "x", "=", "x0", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "11", ")", ":", "\n", "            ", "a", ",", "_", ",", "c", "=", "self", ".", "LSTM_cell", "(", "inputs", "=", "x", ",", "initial_state", "=", "[", "a", ",", "c", "]", ")", "\n", "\n", "if", "t", "<", "10", ":", "\n", "                ", "x", "=", "Lambda", "(", "lambda", "D", ":", "D", "[", ":", ",", "t", ",", ":", "]", ")", "(", "D", ")", "\n", "", "if", "t", ">", "0", ":", "\n", "                ", "out", "=", "self", ".", "densor", "(", "a", ")", "\n", "\n", "outputs", ".", "append", "(", "out", ")", "\n", "if", "t", "<", "10", ":", "\n", "                    ", "x", "=", "Lambda", "(", "self", ".", "_concatebate", ")", "(", "[", "q0", ",", "out", ",", "x", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "x", "=", "Lambda", "(", "self", ".", "_concatebate", ")", "(", "[", "q0", ",", "i0", ",", "x", "]", ")", "\n", "\n", "", "", "inference_model", "=", "Model", "(", "inputs", "=", "[", "x0", ",", "a0", ",", "c0", ",", "D", ",", "i0", ",", "q0", "]", ",", "outputs", "=", "outputs", ")", "\n", "return", "inference_model", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM._concatebate": [[104, 114], ["keras.backend.concatenate", "keras.layers.RepeatVector"], "methods", ["None"], ["", "def", "_concatebate", "(", "self", ",", "rep", ")", ":", "\n", "        ", "q", "=", "rep", "[", "0", "]", "\n", "out", "=", "rep", "[", "1", "]", "\n", "\n", "# out = K.round(out)", "\n", "\n", "x", "=", "rep", "[", "2", "]", "\n", "x", "=", "K", ".", "concatenate", "(", "(", "q", ",", "out", ",", "x", ")", ")", "\n", "x", "=", "RepeatVector", "(", "1", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM.train_with_numpy": [[116, 121], ["numpy.zeros", "numpy.zeros", "NCM.NCM.model.fit", "NCM.NCM._build_inference_model", "list"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM._build_inference_model"], ["", "def", "train_with_numpy", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "a0", "=", "np", ".", "zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "n_a", ")", ")", "\n", "c0", "=", "np", ".", "zeros", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "n_a", ")", ")", "\n", "self", ".", "model", ".", "fit", "(", "[", "X", ",", "a0", ",", "c0", "]", ",", "list", "(", "Y", ")", ",", "batch_size", "=", "30", ",", "epochs", "=", "300", ")", "\n", "self", ".", "inference_model", "=", "self", ".", "_build_inference_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM.train_tfrecord": [[122, 165], ["print", "tensorflow.data.TFRecordDataset", "tfrecord.batch.batch.map", "tfrecord.batch.batch.repeat", "tfrecord.batch.batch.shuffle", "tfrecord.batch.batch.batch", "numpy.zeros", "numpy.zeros", "NCM.NCM._build_inference_model", "tensorflow.reshape", "NCM.NCM.model.fit", "tensorflow.transpose", "list", "print", "utils.utility.send_progress", "print"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM._build_inference_model", "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.send_progress"], ["", "def", "train_tfrecord", "(", "self", ",", "path", ",", "batch_size", "=", "32", ",", "epoch", "=", "5", ",", "steps_per_epoch", "=", "1", ")", ":", "\n", "        ", "print", "(", "\"start training...\"", ")", "\n", "\n", "tfrecord", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "path", ",", "compression_type", "=", "'GZIP'", ")", "\n", "tfrecord", "=", "tfrecord", ".", "map", "(", "self", ".", "_read_tfrecord", ")", "\n", "tfrecord", "=", "tfrecord", ".", "repeat", "(", "epoch", ")", "\n", "tfrecord", "=", "tfrecord", ".", "shuffle", "(", "batch_size", "*", "10", ")", "\n", "tfrecord", "=", "tfrecord", ".", "batch", "(", "batch_size", ",", "drop_remainder", "=", "False", ")", "\n", "\n", "a0", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "n_a", ")", ")", "\n", "c0", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "n_a", ")", ")", "\n", "i", "=", "0", "\n", "num_batch", "=", "0", "\n", "epoch_loss", "=", "0", "\n", "num_epoch", "=", "0", "\n", "for", "batch", "in", "tfrecord", ":", "\n", "            ", "i", "+=", "1", "\n", "\n", "X", ",", "Y", "=", "batch", "\n", "\n", "Y", "=", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "Y", ")", ",", "[", "10", ",", "-", "1", ",", "1", "]", ")", "\n", "\n", "loss", "=", "self", ".", "model", ".", "fit", "(", "[", "X", ",", "a0", ",", "c0", "]", ",", "list", "(", "Y", ")", ",", "steps_per_epoch", "=", "steps_per_epoch", ",", "verbose", "=", "0", ")", "\n", "\n", "trained", "=", "i", "*", "batch_size", "\n", "if", "num_batch", "<", "400000", "/", "batch_size", ":", "\n", "                ", "num_batch", "+=", "1", "\n", "epoch_loss", "+=", "loss", ".", "history", "[", "\"loss\"", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "print", "(", "num_epoch", ",", "epoch_loss", "/", "num_batch", ")", "\n", "num_batch", "=", "0", "\n", "epoch_loss", "=", "0", "\n", "num_epoch", "+=", "1", "\n", "\n", "", "if", "trained", "%", "6400", "==", "0", ":", "\n", "# print(\"finished:\", trained/(400000 * epoch), \"loss:\", loss.history[\"loss\"][0])", "\n", "                ", "if", "not", "utility", ".", "send_progress", "(", "\"@arvin training {} model, file: {}\"", ".", "format", "(", "self", ".", "name", ",", "path", ")", ",", "\n", "trained", ",", "\n", "400000", "*", "epoch", ",", "\n", "\"epoch:{}, loss:{}\"", ".", "format", "(", "num_epoch", ",", "epoch_loss", "/", "num_batch", ")", ")", ":", "\n", "                    ", "print", "(", "\"internet disconnect\"", ")", "\n", "\n", "", "", "", "self", ".", "inference_model", "=", "self", ".", "_build_inference_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM.get_click_probs": [[167, 193], ["numpy.append", "x0.reshape.reshape.reshape", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "NCM.NCM.inference_model.predict", "numpy.append", "numpy.array", "numpy.zeros", "numpy.zeros", "NCM.NCM.doc_rep[].keys", "numpy.zeros", "unseen_docs.append", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "get_click_probs", "(", "self", ",", "session", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docids", "=", "session", "[", "1", ":", "11", "]", "\n", "clicks", "=", "session", "[", "11", ":", "21", "]", "\n", "q_rep", "=", "self", ".", "query_rep", "[", "qid", "]", "\n", "x0", "=", "np", ".", "append", "(", "q_rep", ",", "np", ".", "append", "(", "np", ".", "zeros", "(", "1", ")", ",", "np", ".", "zeros", "(", "self", ".", "d_dim", ")", ")", ")", "\n", "x0", "=", "x0", ".", "reshape", "(", "(", "1", ",", "1", ",", "-", "1", ")", ")", "# shape (1, 1, 11265)", "\n", "a0", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "n_a", ")", ")", "# shape (1, 64)", "\n", "c0", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "n_a", ")", ")", "# shape (1, 64)", "\n", "i0", "=", "np", ".", "zeros", "(", "(", "1", ",", "1", ")", ")", "# shape (1, 1)", "\n", "q0", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "q_dim", ")", ")", "# shape (1, 1024)", "\n", "\n", "D", "=", "np", ".", "zeros", "(", "(", "1", ",", "10", ",", "self", ".", "d_dim", ")", ")", "# shape (1, 1, 10240)", "\n", "unseen_docs", "=", "[", "]", "\n", "for", "rank", "in", "range", "(", "10", ")", ":", "\n", "            ", "if", "docids", "[", "rank", "]", "not", "in", "self", ".", "doc_rep", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "D", "[", "0", "]", "[", "rank", "]", "=", "np", ".", "zeros", "(", "self", ".", "d_dim", ")", "\n", "unseen_docs", ".", "append", "(", "rank", ")", "\n", "", "else", ":", "\n", "                ", "D", "[", "0", "]", "[", "rank", "]", "=", "np", ".", "array", "(", "self", ".", "doc_rep", "[", "qid", "]", "[", "docids", "[", "rank", "]", "]", ")", "\n", "\n", "", "", "pred", "=", "self", ".", "inference_model", ".", "predict", "(", "[", "x0", ",", "a0", ",", "c0", ",", "D", ",", "i0", ",", "q0", "]", ")", "\n", "pred", "=", "np", ".", "array", "(", "pred", ")", "[", ":", ",", "0", ",", "0", "]", "\n", "for", "rank", "in", "unseen_docs", ":", "\n", "            ", "pred", "[", "rank", "]", "=", "0.5", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM.initial_representation": [[194, 215], ["print", "range", "clicks.astype.astype.astype", "clicks.astype.astype.dot", "range", "NCM.NCM.query_rep.keys", "numpy.zeros", "numpy.arange", "NCM.NCM.doc_rep[].keys", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "initial_representation", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "print", "(", "\"{} processing log.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "dataset_size", "=", "click_log", ".", "shape", "[", "0", "]", "\n", "\n", "for", "line", "in", "range", "(", "dataset_size", ")", ":", "\n", "            ", "qid", "=", "click_log", "[", "line", "]", "[", "0", "]", "\n", "docIds", "=", "click_log", "[", "line", "]", "[", "1", ":", "11", "]", "\n", "clicks", "=", "click_log", "[", "line", "]", "[", "11", ":", "21", "]", "\n", "\n", "if", "qid", "not", "in", "self", ".", "query_rep", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "query_rep", "[", "qid", "]", "=", "np", ".", "zeros", "(", "self", ".", "q_dim", ")", "\n", "self", ".", "doc_rep", "[", "qid", "]", "=", "{", "}", "\n", "", "clicks", "=", "clicks", ".", "astype", "(", "np", ".", "int", ")", "\n", "pattern_index", "=", "clicks", ".", "dot", "(", "1", "<<", "np", ".", "arange", "(", "clicks", ".", "shape", "[", "-", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", "# binary to decimal", "\n", "self", ".", "query_rep", "[", "qid", "]", "[", "pattern_index", "]", "+=", "1", "\n", "\n", "for", "rank", "in", "range", "(", "10", ")", ":", "\n", "                ", "docid", "=", "docIds", "[", "rank", "]", "\n", "if", "docid", "not", "in", "self", ".", "doc_rep", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "doc_rep", "[", "qid", "]", "[", "docid", "]", "=", "np", ".", "zeros", "(", "self", ".", "d_dim", ")", "\n", "", "self", ".", "doc_rep", "[", "qid", "]", "[", "docid", "]", "[", "rank", "*", "self", ".", "q_dim", "+", "pattern_index", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM.save_training_tfrecord": [[216, 253], ["print", "tensorflow.io.TFRecordWriter", "numpy.zeros", "numpy.zeros", "numpy.zeros", "tensorflow.io.TFRecordWriter.close", "numpy.append", "numpy.append", "range", "numpy.array().reshape", "NCM.NCM.make_sequence_example", "NCM.NCM.SerializeToString", "tensorflow.io.TFRecordWriter.write", "numpy.append", "numpy.append", "numpy.append", "numpy.zeros", "numpy.append", "numpy.array", "utils.utility.send_progress", "print"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM.make_sequence_example", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.write", "home.repos.pwc.inspect_result.ielab_oltr.utils.utility.send_progress"], ["", "", "", "def", "save_training_tfrecord", "(", "self", ",", "train_log", ",", "path", ",", "simulator", ")", ":", "\n", "        ", "print", "(", "\"writing {} for {}.......\"", ".", "format", "(", "path", ",", "simulator", ")", ")", "\n", "writer", "=", "tf", ".", "io", ".", "TFRecordWriter", "(", "path", ",", "options", "=", "'GZIP'", ")", "\n", "\n", "num_session", "=", "0", "\n", "\n", "input", "=", "np", ".", "zeros", "(", "(", "11", ",", "self", ".", "rep_dim", ")", ")", "\n", "i0", "=", "np", ".", "zeros", "(", "1", ")", "\n", "q0", "=", "np", ".", "zeros", "(", "self", ".", "q_dim", ")", "\n", "\n", "for", "session", "in", "train_log", ":", "\n", "            ", "qid", "=", "session", "[", "0", "]", "\n", "docids", "=", "session", "[", "1", ":", "11", "]", "\n", "clicks", "=", "session", "[", "11", ":", "21", "]", "\n", "q_rep", "=", "self", ".", "query_rep", "[", "qid", "]", "\n", "\n", "t0", "=", "np", ".", "append", "(", "q_rep", ",", "np", ".", "append", "(", "i0", ",", "np", ".", "zeros", "(", "self", ".", "d_dim", ")", ")", ")", "\n", "t1", "=", "np", ".", "append", "(", "q0", ",", "np", ".", "append", "(", "i0", ",", "self", ".", "doc_rep", "[", "qid", "]", "[", "docids", "[", "0", "]", "]", ")", ")", "\n", "\n", "input", "[", "0", "]", "=", "t0", "\n", "input", "[", "1", "]", "=", "t1", "\n", "\n", "for", "rank", "in", "range", "(", "2", ",", "11", ")", ":", "\n", "                ", "t", "=", "np", ".", "append", "(", "q0", ",", "np", ".", "append", "(", "clicks", "[", "rank", "-", "2", "]", ",", "self", ".", "doc_rep", "[", "qid", "]", "[", "docids", "[", "rank", "-", "1", "]", "]", ")", ")", "\n", "input", "[", "rank", "]", "=", "t", "\n", "\n", "", "output", "=", "np", ".", "array", "(", "clicks", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "example", "=", "self", ".", "make_sequence_example", "(", "input", ",", "output", ")", "\n", "serialized", "=", "example", ".", "SerializeToString", "(", ")", "\n", "writer", ".", "write", "(", "serialized", ")", "\n", "num_session", "+=", "1", "\n", "if", "num_session", "%", "1000", "==", "0", ":", "\n", "                ", "if", "not", "utility", ".", "send_progress", "(", "\"@arvin {} generate for {}\"", ".", "format", "(", "self", ".", "name", ",", "simulator", ")", ",", "num_session", ",", "400000", ",", "\n", "path", ")", ":", "\n", "                    ", "print", "(", "\"internet disconnect\"", ")", "\n", "", "", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM.make_sequence_example": [[254, 276], ["tensorflow.train.FeatureLists", "tensorflow.train.SequenceExample", "tensorflow.train.Feature", "tensorflow.train.Feature", "tensorflow.train.FeatureList", "tensorflow.train.FeatureList", "tensorflow.train.FloatList", "tensorflow.train.Int64List"], "methods", ["None"], ["", "def", "make_sequence_example", "(", "self", ",", "inputs", ",", "labels", ")", ":", "\n", "        ", "\"\"\"Returns a SequenceExample for the given inputs and labels.\n\n        Args:\n          inputs: A list of input vectors. Each input vector is a list of floats.\n          labels: A list of ints.\n\n        Returns:\n          A tf.train.SequenceExample containing inputs and labels.\n        \"\"\"", "\n", "input_features", "=", "[", "\n", "tf", ".", "train", ".", "Feature", "(", "float_list", "=", "tf", ".", "train", ".", "FloatList", "(", "value", "=", "input_", ")", ")", "\n", "for", "input_", "in", "inputs", "]", "\n", "label_features", "=", "[", "\n", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "label", "]", ")", ")", "\n", "for", "label", "in", "labels", "]", "\n", "feature_list", "=", "{", "\n", "'inputs'", ":", "tf", ".", "train", ".", "FeatureList", "(", "feature", "=", "input_features", ")", ",", "\n", "'labels'", ":", "tf", ".", "train", ".", "FeatureList", "(", "feature", "=", "label_features", ")", "\n", "}", "\n", "feature_lists", "=", "tf", ".", "train", ".", "FeatureLists", "(", "feature_list", "=", "feature_list", ")", "\n", "return", "tf", ".", "train", ".", "SequenceExample", "(", "feature_lists", "=", "feature_lists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM.NCM._read_tfrecord": [[277, 286], ["tensorflow.io.parse_single_sequence_example", "tensorflow.io.FixedLenSequenceFeature", "tensorflow.io.FixedLenSequenceFeature"], "methods", ["None"], ["", "def", "_read_tfrecord", "(", "self", ",", "example", ")", ":", "\n", "        ", "sequence_features", "=", "{", "\n", "\"inputs\"", ":", "tf", ".", "io", ".", "FixedLenSequenceFeature", "(", "[", "self", ".", "rep_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "\"labels\"", ":", "tf", ".", "io", ".", "FixedLenSequenceFeature", "(", "[", "1", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "}", "\n", "# decode the TFRecord", "\n", "_", ",", "example", "=", "tf", ".", "io", ".", "parse_single_sequence_example", "(", "serialized", "=", "example", ",", "sequence_features", "=", "sequence_features", ")", "\n", "\n", "return", "example", "[", "'inputs'", "]", ",", "example", "[", "'labels'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCTR.RCTR.__init__": [[5, 8], ["clickModel.RCM.RCM.__init__"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "prob", ")", "\n", "self", ".", "name", "=", "\"RCTR\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCTR.RCTR.train": [[9, 21], ["print", "numpy.zeros", "range"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "print", "(", "\"{} training.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "num_clicks", "=", "np", ".", "zeros", "(", "10", ")", "\n", "num_docs", "=", "0", "\n", "for", "session", "in", "click_log", ":", "\n", "            ", "click_label", "=", "session", "[", "11", ":", "]", "\n", "num_docs", "+=", "1", "\n", "for", "rank", "in", "range", "(", "10", ")", ":", "\n", "                ", "if", "click_label", "[", "rank", "]", "==", "'1'", ":", "\n", "                    ", "num_clicks", "[", "rank", "]", "+=", "1", "\n", "\n", "", "", "", "self", ".", "prob", "=", "num_clicks", "/", "num_docs", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCTR.RCTR.get_click_probs": [[23, 25], ["numpy.array"], "methods", ["None"], ["", "def", "get_click_probs", "(", "self", ",", "session", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "self", ".", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCTR.RCTR.get_perplexity": [[26, 51], ["print", "numpy.zeros", "range", "RCTR.RCTR.get_click_probs", "enumerate", "numpy.errstate", "numpy.log2", "print", "print"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.get_click_probs"], ["", "def", "get_perplexity", "(", "self", ",", "test_click_log", ")", ":", "\n", "        ", "print", "(", "self", ".", "name", ",", "\"computing perplexity\"", ")", "\n", "perplexity", "=", "np", ".", "zeros", "(", "10", ")", "\n", "size", "=", "test_click_log", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "session", "=", "test_click_log", "[", "i", "]", "[", ":", "11", "]", "\n", "click_label", "=", "test_click_log", "[", "i", "]", "[", "11", ":", "]", "\n", "click_probs", "=", "self", ".", "get_click_probs", "(", "session", ")", "\n", "for", "rank", ",", "click_prob", "in", "enumerate", "(", "click_probs", ")", ":", "\n", "                ", "if", "click_label", "[", "rank", "]", "==", "'1'", ":", "\n", "                    ", "p", "=", "click_prob", "\n", "", "else", ":", "\n", "                    ", "p", "=", "1", "-", "click_prob", "\n", "\n", "", "with", "np", ".", "errstate", "(", "invalid", "=", "'raise'", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "p", "=", "0.001", "if", "p", "<", "0.001", "else", "p", "\n", "perplexity", "[", "rank", "]", "+=", "np", ".", "log2", "(", "p", ")", "\n", "", "except", ":", "\n", "                        ", "print", "(", "\"error!, p=\"", ",", "p", ")", "\n", "print", "(", "session", ",", "rank", "+", "1", ")", "\n", "perplexity", "[", "rank", "]", "+=", "0", "\n", "\n", "", "", "", "", "perplexity", "=", "[", "2", "**", "(", "-", "x", "/", "size", ")", "for", "x", "in", "perplexity", "]", "\n", "return", "perplexity", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCTR.RCTR.get_MSE": [[52, 63], ["print", "numpy.zeros", "range", "RCTR.RCTR.get_click_probs", "simulator.get_real_click_probs", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.get_click_probs", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.get_real_click_probs"], ["", "def", "get_MSE", "(", "self", ",", "test_click_log", ",", "dataset", ",", "simulator", ")", ":", "\n", "        ", "print", "(", "self", ".", "name", ",", "\"computing MSE\"", ")", "\n", "MSE", "=", "np", ".", "zeros", "(", "10", ")", "\n", "size", "=", "test_click_log", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "session", "=", "test_click_log", "[", "i", "]", "\n", "click_probs", "=", "self", ".", "get_click_probs", "(", "session", ")", "\n", "real_click_probs", "=", "simulator", ".", "get_real_click_probs", "(", "session", ",", "dataset", ")", "\n", "MSE", "+=", "np", ".", "square", "(", "click_probs", "-", "real_click_probs", ")", "\n", "\n", "", "return", "MSE", "/", "size", "", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.DCTR.DCTR.__init__": [[6, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pc", "=", "None", ",", "alpha", "=", "1", ",", "beta", "=", "1", ")", ":", "\n", "        ", "self", ".", "name", "=", "'DCTR'", "\n", "self", ".", "parameter_dict", "=", "{", "}", "\n", "self", ".", "stat_dict", "=", "{", "}", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "pc", "=", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.DCTR.DCTR.set_probs": [[15, 17], ["None"], "methods", ["None"], ["", "def", "set_probs", "(", "self", ",", "pc", ")", ":", "\n", "        ", "self", ".", "pc", "=", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.DCTR.DCTR.simulate": [[18, 33], ["numpy.zeros", "range", "len", "len", "numpy.random.rand", "dataset.get_relevance_label_by_query_and_docid", "clicked_doc.append"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "simulate", "(", "self", ",", "query", ",", "result_list", ",", "dataset", ")", ":", "\n", "        ", "clicked_doc", "=", "[", "]", "\n", "click_label", "=", "np", ".", "zeros", "(", "len", "(", "result_list", ")", ")", "\n", "satisfied", "=", "True", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "result_list", ")", ")", ":", "\n", "            ", "click_prob", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "docid", "=", "result_list", "[", "i", "]", "\n", "\n", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "docid", ")", "\n", "\n", "if", "click_prob", "<=", "self", ".", "pc", "[", "relevance", "]", ":", "\n", "                ", "click_label", "[", "i", "]", "=", "1", "\n", "clicked_doc", ".", "append", "(", "result_list", "[", "i", "]", ")", "\n", "\n", "", "", "return", "clicked_doc", ",", "click_label", ",", "satisfied", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.DCTR.DCTR.train": [[34, 43], ["DCTR.DCTR._get_train_stat", "print", "DCTR.DCTR.stat_dict.keys", "DCTR.DCTR.stat_dict[].keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse._get_train_stat", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "train", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "self", ".", "_get_train_stat", "(", "click_log", ")", "\n", "\n", "print", "(", "\"{} training.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "for", "qid", "in", "self", ".", "stat_dict", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "parameter_dict", "[", "qid", "]", "=", "{", "}", "\n", "for", "docID", "in", "self", ".", "stat_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "a", "=", "(", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "1", "]", "+", "self", ".", "alpha", ")", "/", "(", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "0", "]", "+", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docID", "]", "=", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.DCTR.DCTR._get_train_stat": [[44, 66], ["print", "range", "range", "DCTR.DCTR.stat_dict.keys", "doc_stat.keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "", "def", "_get_train_stat", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "print", "(", "\"{} processing log.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "dataset_size", "=", "click_log", ".", "shape", "[", "0", "]", "\n", "for", "line", "in", "range", "(", "dataset_size", ")", ":", "\n", "\n", "            ", "qid", "=", "click_log", "[", "line", "]", "[", "0", "]", "\n", "docIds", "=", "click_log", "[", "line", "]", "[", "1", ":", "11", "]", "\n", "clicks", "=", "click_log", "[", "line", "]", "[", "11", ":", "21", "]", "\n", "\n", "if", "qid", "not", "in", "self", ".", "stat_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "stat_dict", "[", "qid", "]", "=", "{", "}", "\n", "\n", "", "doc_stat", "=", "self", ".", "stat_dict", "[", "qid", "]", "\n", "for", "rank", "in", "range", "(", "10", ")", ":", "\n", "                ", "docID", "=", "docIds", "[", "rank", "]", "\n", "if", "docID", "not", "in", "doc_stat", ".", "keys", "(", ")", ":", "\n", "                    ", "doc_stat", "[", "docID", "]", "=", "(", "0", ",", "0", ")", "\n", "", "exam", "=", "doc_stat", "[", "docID", "]", "[", "0", "]", "+", "1", "\n", "c", "=", "doc_stat", "[", "docID", "]", "[", "1", "]", "\n", "if", "clicks", "[", "rank", "]", "==", "'1'", ":", "\n", "                    ", "c", "+=", "1", "\n", "", "doc_stat", "[", "docID", "]", "=", "(", "exam", ",", "c", ")", "\n", "# if line % 10000 == 0:", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.DCTR.DCTR.get_click_probs": [[69, 83], ["numpy.zeros", "range", "DCTR.DCTR.parameter_dict[].keys", "unseen_docs_index.append"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "", "def", "get_click_probs", "(", "self", ",", "session", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docIds", "=", "session", "[", "1", ":", "11", "]", "\n", "a_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "unseen_docs_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "if", "docIds", "[", "i", "]", "not", "in", "self", ".", "parameter_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "unseen_docs_index", ".", "append", "(", "i", ")", "\n", "a", "=", "self", ".", "alpha", "/", "(", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "", "else", ":", "\n", "                ", "a", "=", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docIds", "[", "i", "]", "]", "\n", "", "a_probs", "[", "i", "]", "=", "a", "\n", "\n", "", "return", "a_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.DCTR.DCTR.get_real_click_probs": [[84, 94], ["numpy.zeros", "range", "dataset.get_relevance_label_by_query_and_docid", "int"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "get_real_click_probs", "(", "self", ",", "session", ",", "dataset", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docIds", "=", "session", "[", "1", ":", "11", "]", "\n", "a_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "qid", ",", "int", "(", "docIds", "[", "i", "]", ")", ")", "\n", "a", "=", "self", ".", "pc", "[", "relevance", "]", "\n", "a_probs", "[", "i", "]", "=", "a", "\n", "", "return", "a_probs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.FBNCM.FBNCM.__init__": [[22, 26], ["clickModel.NCM.NCM.__init__"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_a", ",", "q_dim", ",", "d_dim", ",", "dataset", ",", "model", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_a", ",", "q_dim", ",", "d_dim", ",", "model", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "name", "=", "\"FBNCM\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.FBNCM.FBNCM.initial_representation": [[27, 45], ["print", "range", "range", "FBNCM.FBNCM.query_rep.keys", "FBNCM.FBNCM.dataset.get_all_features_by_query", "numpy.mean", "FBNCM.FBNCM.doc_rep[].keys", "FBNCM.FBNCM.dataset.get_features_by_query_and_docid", "int"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_features_by_query_and_docid"], ["", "def", "initial_representation", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "print", "(", "\"{} processing log.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "dataset_size", "=", "click_log", ".", "shape", "[", "0", "]", "\n", "\n", "for", "line", "in", "range", "(", "dataset_size", ")", ":", "\n", "            ", "qid", "=", "click_log", "[", "line", "]", "[", "0", "]", "\n", "docIds", "=", "click_log", "[", "line", "]", "[", "1", ":", "11", "]", "\n", "# clicks = click_log[line][11:21]", "\n", "\n", "if", "qid", "not", "in", "self", ".", "query_rep", ".", "keys", "(", ")", ":", "\n", "                ", "feature_matrix", "=", "self", ".", "dataset", ".", "get_all_features_by_query", "(", "qid", ")", "\n", "self", ".", "query_rep", "[", "qid", "]", "=", "np", ".", "mean", "(", "feature_matrix", ",", "axis", "=", "0", ")", "\n", "self", ".", "doc_rep", "[", "qid", "]", "=", "{", "}", "\n", "\n", "", "for", "rank", "in", "range", "(", "10", ")", ":", "\n", "                ", "docid", "=", "docIds", "[", "rank", "]", "\n", "if", "docid", "not", "in", "self", ".", "doc_rep", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "doc_rep", "[", "qid", "]", "[", "docid", "]", "=", "self", ".", "dataset", ".", "get_features_by_query_and_docid", "(", "qid", ",", "int", "(", "docid", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.FBNCM.FBNCM.get_click_probs": [[46, 71], ["numpy.append", "x0.reshape.reshape.reshape", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "FBNCM.FBNCM.inference_model.predict", "FBNCM.FBNCM.query_rep.keys", "FBNCM.FBNCM.dataset.get_all_features_by_query", "numpy.mean", "numpy.append", "numpy.array", "numpy.zeros", "numpy.zeros", "FBNCM.FBNCM.doc_rep[].keys", "FBNCM.FBNCM.dataset.get_features_by_query_and_docid", "numpy.array", "int"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_features_by_query_and_docid"], ["", "", "", "", "def", "get_click_probs", "(", "self", ",", "session", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docids", "=", "session", "[", "1", ":", "11", "]", "\n", "if", "qid", "not", "in", "self", ".", "query_rep", ".", "keys", "(", ")", ":", "\n", "            ", "feature_matrix", "=", "self", ".", "dataset", ".", "get_all_features_by_query", "(", "qid", ")", "\n", "self", ".", "query_rep", "[", "qid", "]", "=", "np", ".", "mean", "(", "feature_matrix", ",", "axis", "=", "0", ")", "\n", "self", ".", "doc_rep", "[", "qid", "]", "=", "{", "}", "\n", "", "q_rep", "=", "self", ".", "query_rep", "[", "qid", "]", "\n", "x0", "=", "np", ".", "append", "(", "q_rep", ",", "np", ".", "append", "(", "np", ".", "zeros", "(", "1", ")", ",", "np", ".", "zeros", "(", "self", ".", "d_dim", ")", ")", ")", "\n", "x0", "=", "x0", ".", "reshape", "(", "(", "1", ",", "1", ",", "-", "1", ")", ")", "# shape (1, 1, 11265)", "\n", "a0", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "n_a", ")", ")", "# shape (1, 64)", "\n", "c0", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "n_a", ")", ")", "# shape (1, 64)", "\n", "i0", "=", "np", ".", "zeros", "(", "(", "1", ",", "1", ")", ")", "# shape (1, 1)", "\n", "q0", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "q_dim", ")", ")", "# shape (1, 1024)", "\n", "\n", "D", "=", "np", ".", "zeros", "(", "(", "1", ",", "10", ",", "self", ".", "d_dim", ")", ")", "# shape (1, 1, 10240)", "\n", "for", "rank", "in", "range", "(", "10", ")", ":", "\n", "            ", "docid", "=", "docids", "[", "rank", "]", "\n", "if", "docid", "not", "in", "self", ".", "doc_rep", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "D", "[", "0", "]", "[", "rank", "]", "=", "self", ".", "dataset", ".", "get_features_by_query_and_docid", "(", "qid", ",", "int", "(", "docid", ")", ")", "\n", "", "else", ":", "\n", "                ", "D", "[", "0", "]", "[", "rank", "]", "=", "np", ".", "array", "(", "self", ".", "doc_rep", "[", "qid", "]", "[", "docids", "[", "rank", "]", "]", ")", "\n", "", "", "pred", "=", "self", ".", "inference_model", ".", "predict", "(", "[", "x0", ",", "a0", ",", "c0", ",", "D", ",", "i0", ",", "q0", "]", ")", "\n", "\n", "return", "np", ".", "array", "(", "pred", ")", "[", ":", ",", "0", ",", "0", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.AbstractClickModel.AbstractClickModel.set_probs": [[5, 7], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "set_probs", "(", "self", ",", "pc", ",", "ps", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"set_probs.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.AbstractClickModel.AbstractClickModel.simulate": [[9, 11], ["NotImplementedError"], "methods", ["None"], ["", "def", "simulate", "(", "self", ",", "query", ",", "result_list", ",", "dataset", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"simulate.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.AbstractClickModel.AbstractClickModel.train": [[13, 15], ["NotImplementedError"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"train.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.AbstractClickModel.AbstractClickModel.get_click_probs": [[17, 19], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_click_probs", "(", "self", ",", "session", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"get_click_probs.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.AbstractClickModel.AbstractClickModel.get_perplexity": [[21, 23], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_perplexity", "(", "self", ",", "test_click_log", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"get_perplexity.\"", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.AbstractClickModel.AbstractClickModel.get_MSE": [[24, 26], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_MSE", "(", "self", ",", "test_click_log", ",", "dataset", ",", "simulator", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Derived class needs to implement \"", "\n", "\"get_MSE.\"", ")", ""]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.PBM.PBM.__init__": [[6, 10], ["numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pc", "=", "None", ",", "eta", "=", "1", ")", ":", "\n", "        ", "self", ".", "name", "=", "'PBM'", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "pc", "=", "np", ".", "array", "(", "pc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.PBM.PBM.simulate": [[11, 23], ["numpy.power", "numpy.array", "numpy.random.rand", "clicks.astype.astype.astype", "numpy.divide", "dataset.get_all_relevance_label_by_query", "len", "numpy.arange", "len"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_relevance_label_by_query"], ["", "def", "simulate", "(", "self", ",", "query", ",", "result_list", ",", "dataset", ")", ":", "\n", "        ", "result_list", "=", "result_list", "[", ":", "10", "]", "\n", "propensities", "=", "np", ".", "power", "(", "np", ".", "divide", "(", "1", ",", "np", ".", "arange", "(", "1.0", ",", "len", "(", "result_list", ")", "+", "1", ")", ")", ",", "self", ".", "eta", ")", "\n", "rels", "=", "np", ".", "array", "(", "dataset", ".", "get_all_relevance_label_by_query", "(", "query", ")", ")", "\n", "click_probs", "=", "self", ".", "pc", "[", "rels", "[", "result_list", "]", "]", "\n", "click_probs", "=", "click_probs", "*", "propensities", "\n", "rand", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "result_list", ")", ")", "\n", "clicks", "=", "rand", "<", "click_probs", "\n", "clicked_doces", "=", "result_list", "[", "clicks", "]", "\n", "clicks", "=", "clicks", ".", "astype", "(", "int", ")", "\n", "\n", "return", "clicked_doces", ",", "clicks", ",", "propensities", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.PBM.PBM.simulate_with_position": [[24, 33], ["numpy.power", "numpy.array", "numpy.random.rand", "numpy.divide", "dataset.get_relevance_label_by_query_and_docid", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "simulate_with_position", "(", "self", ",", "query", ",", "docid", ",", "dataset", ",", "rank", ")", ":", "\n", "        ", "propensities", "=", "np", ".", "power", "(", "np", ".", "divide", "(", "1", ",", "np", ".", "arange", "(", "1.0", ",", "10", "+", "1", ")", ")", ",", "self", ".", "eta", ")", "\n", "propensity", "=", "propensities", "[", "rank", "]", "\n", "rel", "=", "np", ".", "array", "(", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "docid", ")", ")", "\n", "click_prob", "=", "self", ".", "pc", "[", "rel", "]", "*", "propensity", "\n", "rand", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "click", "=", "1", "if", "rand", "<", "click_prob", "else", "0", "\n", "\n", "return", "click", ",", "propensity", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDCM.SDCM.__init__": [[6, 25], ["numpy.power", "numpy.divide", "numpy.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pc", "=", "None", ",", "eta", "=", "1", ",", "alpha", "=", "1", ",", "beta", "=", "1", ")", ":", "\n", "        ", "self", ".", "name", "=", "'SDCM'", "\n", "self", ".", "parameter_dict", "=", "{", "}", "\n", "self", ".", "stat_dict", "=", "{", "}", "\n", "self", ".", "rank_stat", "=", "[", "[", "alpha", ",", "alpha", "+", "beta", "]", ",", "\n", "[", "alpha", ",", "alpha", "+", "beta", "]", ",", "\n", "[", "alpha", ",", "alpha", "+", "beta", "]", ",", "\n", "[", "alpha", ",", "alpha", "+", "beta", "]", ",", "\n", "[", "alpha", ",", "alpha", "+", "beta", "]", ",", "\n", "[", "alpha", ",", "alpha", "+", "beta", "]", ",", "\n", "[", "alpha", ",", "alpha", "+", "beta", "]", ",", "\n", "[", "alpha", ",", "alpha", "+", "beta", "]", ",", "\n", "[", "alpha", ",", "alpha", "+", "beta", "]", ",", "\n", "[", "alpha", ",", "alpha", "+", "beta", "]", "\n", "]", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "pc", "=", "pc", "\n", "self", ".", "ps", "=", "1", "-", "np", ".", "power", "(", "np", ".", "divide", "(", "0.9", ",", "np", ".", "arange", "(", "1.0", ",", "11.0", ")", ")", ",", "eta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDCM.SDCM.set_probs": [[27, 31], ["numpy.power", "numpy.divide", "numpy.arange"], "methods", ["None"], ["", "def", "set_probs", "(", "self", ",", "pc", ",", "eta", ")", ":", "\n", "        ", "self", ".", "pc", "=", "pc", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "ps", "=", "1", "-", "np", ".", "power", "(", "np", ".", "divide", "(", "0.9", ",", "np", ".", "arange", "(", "1.0", ",", "11.0", ")", ")", ",", "eta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDCM.SDCM.simulate": [[32, 51], ["numpy.zeros", "range", "len", "len", "numpy.random.rand", "numpy.random.rand", "dataset.get_relevance_label_by_query_and_docid", "clicked_doc.append"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "simulate", "(", "self", ",", "query", ",", "result_list", ",", "dataset", ")", ":", "\n", "        ", "clicked_doc", "=", "[", "]", "\n", "click_label", "=", "np", ".", "zeros", "(", "len", "(", "result_list", ")", ")", "\n", "satisfied", "=", "False", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "result_list", ")", ")", ":", "\n", "            ", "click_prob", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "stop_prob", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "docid", "=", "result_list", "[", "i", "]", "\n", "\n", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "docid", ")", "\n", "\n", "if", "click_prob", "<=", "self", ".", "pc", "[", "relevance", "]", ":", "\n", "                ", "click_label", "[", "i", "]", "=", "1", "\n", "clicked_doc", ".", "append", "(", "result_list", "[", "i", "]", ")", "\n", "if", "stop_prob", "<=", "self", ".", "ps", "[", "i", "]", ":", "\n", "                    ", "satisfied", "=", "True", "\n", "break", "\n", "\n", "", "", "", "return", "clicked_doc", ",", "click_label", ",", "satisfied", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDCM.SDCM.train": [[52, 61], ["SDCM.SDCM._get_train_stat", "print", "SDCM.SDCM.stat_dict.keys", "SDCM.SDCM.stat_dict[].keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse._get_train_stat", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "train", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "self", ".", "_get_train_stat", "(", "click_log", ")", "\n", "\n", "print", "(", "\"{} training.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "for", "qid", "in", "self", ".", "stat_dict", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "parameter_dict", "[", "qid", "]", "=", "{", "}", "\n", "for", "docID", "in", "self", ".", "stat_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "a", "=", "(", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "1", "]", "+", "self", ".", "alpha", ")", "/", "(", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "0", "]", "+", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docID", "]", "=", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDCM.SDCM._get_train_stat": [[67, 99], ["print", "range", "range", "SDCM.SDCM.stat_dict.keys", "doc_stat.keys", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "", "def", "_get_train_stat", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "print", "(", "\"{} processing log.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "dataset_size", "=", "click_log", ".", "shape", "[", "0", "]", "\n", "for", "line", "in", "range", "(", "dataset_size", ")", ":", "\n", "\n", "            ", "qid", "=", "click_log", "[", "line", "]", "[", "0", "]", "\n", "docIds", "=", "click_log", "[", "line", "]", "[", "1", ":", "11", "]", "\n", "clicks", "=", "click_log", "[", "line", "]", "[", "11", ":", "21", "]", "\n", "\n", "\n", "if", "qid", "not", "in", "self", ".", "stat_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "stat_dict", "[", "qid", "]", "=", "{", "}", "\n", "\n", "", "doc_stat", "=", "self", ".", "stat_dict", "[", "qid", "]", "\n", "\n", "if", "np", ".", "where", "(", "clicks", "==", "'1'", ")", "[", "0", "]", ".", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "lastClickRank", "=", "np", ".", "where", "(", "clicks", "==", "'1'", ")", "[", "0", "]", "[", "-", "1", "]", "+", "1", "\n", "\n", "for", "rank", "in", "range", "(", "lastClickRank", ")", ":", "\n", "                ", "docID", "=", "docIds", "[", "rank", "]", "\n", "if", "docID", "not", "in", "doc_stat", ".", "keys", "(", ")", ":", "\n", "                    ", "doc_stat", "[", "docID", "]", "=", "(", "0", ",", "0", ")", "\n", "", "exam", "=", "doc_stat", "[", "docID", "]", "[", "0", "]", "+", "1", "\n", "c", "=", "doc_stat", "[", "docID", "]", "[", "1", "]", "\n", "if", "clicks", "[", "rank", "]", "==", "'1'", ":", "\n", "                    ", "c", "+=", "1", "\n", "self", ".", "rank_stat", "[", "rank", "]", "[", "1", "]", "+=", "1", "\n", "if", "rank", "==", "lastClickRank", "-", "1", ":", "\n", "                        ", "self", ".", "rank_stat", "[", "rank", "]", "[", "0", "]", "+=", "1", "\n", "", "", "doc_stat", "[", "docID", "]", "=", "(", "exam", ",", "c", ")", "\n", "# if line % 10000 == 0:", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDCM.SDCM.get_click_probs": [[103, 125], ["numpy.zeros", "numpy.zeros", "range", "range", "numpy.multiply", "SDCM.SDCM.parameter_dict[].keys", "SDCM.SDCM.parameter_dict[].keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "", "def", "get_click_probs", "(", "self", ",", "session", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docIds", "=", "session", "[", "1", ":", "11", "]", "\n", "a_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "[", "0", "]", "=", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "            ", "continue_prob", "=", "1", "-", "(", "self", ".", "rank_stat", "[", "i", "-", "1", "]", "[", "0", "]", "/", "self", ".", "rank_stat", "[", "i", "-", "1", "]", "[", "1", "]", ")", "\n", "if", "docIds", "[", "i", "-", "1", "]", "not", "in", "self", ".", "parameter_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "ar", "=", "self", ".", "alpha", "/", "(", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "", "else", ":", "\n", "                ", "ar", "=", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docIds", "[", "i", "-", "1", "]", "]", "\n", "", "exam_probs", "[", "i", "]", "=", "exam_probs", "[", "i", "-", "1", "]", "*", "(", "ar", "*", "continue_prob", "+", "(", "1", "-", "ar", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "if", "docIds", "[", "i", "]", "not", "in", "self", ".", "parameter_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "a", "=", "self", ".", "alpha", "/", "(", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "", "else", ":", "\n", "                ", "a", "=", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docIds", "[", "i", "]", "]", "\n", "", "a_probs", "[", "i", "]", "=", "a", "\n", "\n", "", "return", "np", ".", "multiply", "(", "exam_probs", ",", "a_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDCM.SDCM.get_real_click_probs": [[126, 145], ["numpy.zeros", "numpy.zeros", "range", "range", "numpy.multiply", "dataset.get_relevance_label_by_query_and_docid", "dataset.get_relevance_label_by_query_and_docid", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "get_real_click_probs", "(", "self", ",", "session", ",", "dataset", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docIds", "=", "session", "[", "1", ":", "11", "]", "\n", "a_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "[", "0", "]", "=", "1", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "            ", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "qid", ",", "int", "(", "docIds", "[", "i", "-", "1", "]", ")", ")", "\n", "ar", "=", "self", ".", "pc", "[", "relevance", "]", "\n", "sr", "=", "self", ".", "ps", "[", "i", "-", "1", "]", "\n", "exam_probs", "[", "i", "]", "=", "exam_probs", "[", "i", "-", "1", "]", "*", "(", "ar", "*", "(", "1", "-", "sr", ")", "+", "(", "1", "-", "ar", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "qid", ",", "int", "(", "docIds", "[", "i", "]", ")", ")", "\n", "a", "=", "self", ".", "pc", "[", "relevance", "]", "\n", "a_probs", "[", "i", "]", "=", "a", "\n", "\n", "", "return", "np", ".", "multiply", "(", "exam_probs", ",", "a_probs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.Mixed.Mixed.__init__": [[11, 17], ["Mixed.Mixed.model_names.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "models", ")", ":", "\n", "        ", "self", ".", "models", "=", "models", "\n", "self", ".", "name", "=", "'Mixed'", "\n", "self", ".", "model_names", "=", "[", "]", "\n", "for", "model", "in", "models", ":", "\n", "            ", "self", ".", "model_names", ".", "append", "(", "model", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.Mixed.Mixed.simulate": [[18, 24], ["numpy.random.choice", "session.extend", "numpy.random.choice.simulate"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate"], ["", "", "def", "simulate", "(", "self", ",", "query", ",", "result_list", ",", "dataset", ")", ":", "\n", "        ", "simolator", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "models", ")", "\n", "session", "=", "[", "query", "]", "\n", "session", ".", "extend", "(", "result_list", ")", "\n", "clicked_doc", ",", "click_label", ",", "satisfied", "=", "simolator", ".", "simulate", "(", "query", ",", "result_list", ",", "dataset", ")", "\n", "return", "clicked_doc", ",", "click_label", ",", "satisfied", ",", "simolator", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.Mixed.Mixed.get_real_click_probs": [[25, 29], ["Mixed.Mixed.model_names.index", "Mixed.Mixed.models[].get_real_click_probs"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.lshash.LSHash.index", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.get_real_click_probs"], ["", "def", "get_real_click_probs", "(", "self", ",", "session", ",", "dataset", ")", ":", "\n", "        ", "simulator_name", "=", "session", "[", "-", "1", "]", "\n", "model_index", "=", "self", ".", "model_names", ".", "index", "(", "simulator_name", ")", "\n", "return", "self", ".", "models", "[", "model_index", "]", ".", "get_real_click_probs", "(", "session", ",", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN.SDBN.__init__": [[7, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pc", "=", "None", ",", "ps", "=", "None", ",", "alpha", "=", "1", ",", "beta", "=", "1", ")", ":", "\n", "        ", "self", ".", "name", "=", "'SDBN'", "\n", "self", ".", "parameter_dict", "=", "{", "}", "\n", "self", ".", "stat_dict", "=", "{", "}", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "pc", "=", "pc", "\n", "self", ".", "ps", "=", "ps", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN.SDBN.set_probs": [[16, 19], ["None"], "methods", ["None"], ["", "def", "set_probs", "(", "self", ",", "pc", ",", "ps", ")", ":", "\n", "        ", "self", ".", "pc", "=", "pc", "\n", "self", ".", "ps", "=", "ps", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN.SDBN.simulate": [[20, 39], ["numpy.zeros", "range", "len", "len", "numpy.random.rand", "numpy.random.rand", "dataset.get_relevance_label_by_query_and_docid", "clicked_doc.append"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "simulate", "(", "self", ",", "query", ",", "result_list", ",", "dataset", ")", ":", "\n", "        ", "clicked_doc", "=", "[", "]", "\n", "click_label", "=", "np", ".", "zeros", "(", "len", "(", "result_list", ")", ")", "\n", "satisfied", "=", "False", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "result_list", ")", ")", ":", "\n", "            ", "click_prob", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "stop_prob", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "docid", "=", "result_list", "[", "i", "]", "\n", "\n", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "docid", ")", "\n", "\n", "if", "click_prob", "<", "self", ".", "pc", "[", "relevance", "]", ":", "\n", "                ", "click_label", "[", "i", "]", "=", "1", "\n", "clicked_doc", ".", "append", "(", "result_list", "[", "i", "]", ")", "\n", "if", "stop_prob", "<", "self", ".", "ps", "[", "relevance", "]", ":", "\n", "                    ", "satisfied", "=", "True", "\n", "break", "\n", "\n", "", "", "", "return", "clicked_doc", ",", "click_label", ",", "satisfied", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN.SDBN.online_training": [[40, 57], ["range", "SDBN.SDBN.stat_dict.keys", "doc_stat.keys", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "online_training", "(", "self", ",", "qid", ",", "result_list", ",", "clicks", ")", ":", "\n", "        ", "lastClickRank", "=", "np", ".", "where", "(", "clicks", "==", "1", ")", "[", "0", "]", "[", "-", "1", "]", "+", "1", "\n", "if", "qid", "not", "in", "self", ".", "stat_dict", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "stat_dict", "[", "qid", "]", "=", "{", "}", "\n", "", "doc_stat", "=", "self", ".", "stat_dict", "[", "qid", "]", "\n", "for", "rank", "in", "range", "(", "lastClickRank", ")", ":", "\n", "            ", "docID", "=", "result_list", "[", "rank", "]", "\n", "if", "docID", "not", "in", "doc_stat", ".", "keys", "(", ")", ":", "\n", "                ", "doc_stat", "[", "docID", "]", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "", "exam", "=", "doc_stat", "[", "docID", "]", "[", "0", "]", "+", "1", "\n", "c", "=", "doc_stat", "[", "docID", "]", "[", "1", "]", "\n", "lc", "=", "doc_stat", "[", "docID", "]", "[", "2", "]", "\n", "if", "clicks", "[", "rank", "]", "==", "1", ":", "\n", "                ", "c", "+=", "1", "\n", "if", "rank", "==", "lastClickRank", "-", "1", ":", "\n", "                    ", "lc", "+=", "1", "\n", "", "", "doc_stat", "[", "docID", "]", "=", "(", "exam", ",", "c", ",", "lc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN.SDBN.click_noise_reduce": [[58, 74], ["range", "len", "SDBN.SDBN.stat_dict.keys", "SDBN.SDBN.stat_dict[].keys", "reduced_index.append"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "def", "click_noise_reduce", "(", "self", ",", "qid", ",", "result_list", ",", "clicks", ",", "threshold", ",", "num_exam", ")", ":", "\n", "        ", "reduce", "=", "False", "\n", "reduced_index", "=", "[", "]", "\n", "for", "rank", "in", "range", "(", "len", "(", "result_list", ")", ")", ":", "\n", "            ", "docID", "=", "result_list", "[", "rank", "]", "\n", "if", "qid", "in", "self", ".", "stat_dict", ".", "keys", "(", ")", ":", "\n", "                ", "if", "docID", "in", "self", ".", "stat_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "# print(self.stat_dict[qid][docID], clicks[rank])", "\n", "                    ", "if", "clicks", "[", "rank", "]", "==", "1", "and", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "0", "]", ">=", "num_exam", ":", "\n", "# print(self.stat_dict[qid][docID][1] / self.stat_dict[qid][docID][0])", "\n", "                        ", "if", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "1", "]", "/", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "0", "]", "<=", "threshold", ":", "\n", "                            ", "clicks", "[", "rank", "]", "=", "0", "\n", "reduced_index", ".", "append", "(", "rank", ")", "\n", "# print(\"reduce for \", qid, docID, self.stat_dict[qid][docID][0])", "\n", "reduce", "=", "True", "\n", "", "", "", "", "", "return", "reduce", ",", "reduced_index", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN.SDBN.train": [[77, 86], ["SDBN.SDBN._get_train_stat", "print", "SDBN.SDBN.stat_dict.keys", "SDBN.SDBN.stat_dict[].keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse._get_train_stat", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "train", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "self", ".", "_get_train_stat", "(", "click_log", ")", "\n", "print", "(", "\"{} training.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "for", "qid", "in", "self", ".", "stat_dict", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "parameter_dict", "[", "qid", "]", "=", "{", "}", "\n", "for", "docID", "in", "self", ".", "stat_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "a", "=", "(", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "1", "]", "+", "self", ".", "alpha", ")", "/", "(", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "0", "]", "+", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "s", "=", "(", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "2", "]", "+", "self", ".", "alpha", ")", "/", "(", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "1", "]", "+", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docID", "]", "=", "(", "a", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN.SDBN._get_train_stat": [[87, 118], ["print", "range", "range", "SDBN.SDBN.stat_dict.keys", "doc_stat.keys", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "", "def", "_get_train_stat", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "print", "(", "\"{} processing log.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "dataset_size", "=", "click_log", ".", "shape", "[", "0", "]", "\n", "for", "line", "in", "range", "(", "dataset_size", ")", ":", "\n", "\n", "            ", "qid", "=", "click_log", "[", "line", "]", "[", "0", "]", "\n", "docIds", "=", "click_log", "[", "line", "]", "[", "1", ":", "11", "]", "\n", "clicks", "=", "click_log", "[", "line", "]", "[", "11", ":", "21", "]", "\n", "\n", "if", "qid", "not", "in", "self", ".", "stat_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "stat_dict", "[", "qid", "]", "=", "{", "}", "\n", "\n", "", "doc_stat", "=", "self", ".", "stat_dict", "[", "qid", "]", "\n", "\n", "if", "np", ".", "where", "(", "clicks", "==", "'1'", ")", "[", "0", "]", ".", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "lastClickRank", "=", "np", ".", "where", "(", "clicks", "==", "'1'", ")", "[", "0", "]", "[", "-", "1", "]", "+", "1", "\n", "\n", "for", "rank", "in", "range", "(", "lastClickRank", ")", ":", "\n", "                ", "docID", "=", "docIds", "[", "rank", "]", "\n", "if", "docID", "not", "in", "doc_stat", ".", "keys", "(", ")", ":", "\n", "                    ", "doc_stat", "[", "docID", "]", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "", "exam", "=", "doc_stat", "[", "docID", "]", "[", "0", "]", "+", "1", "\n", "c", "=", "doc_stat", "[", "docID", "]", "[", "1", "]", "\n", "lc", "=", "doc_stat", "[", "docID", "]", "[", "2", "]", "\n", "if", "clicks", "[", "rank", "]", "==", "'1'", ":", "\n", "                    ", "c", "+=", "1", "\n", "if", "rank", "==", "lastClickRank", "-", "1", ":", "\n", "                        ", "lc", "+=", "1", "\n", "", "", "doc_stat", "[", "docID", "]", "=", "(", "exam", ",", "c", ",", "lc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN.SDBN.get_click_probs": [[122, 149], ["numpy.zeros", "numpy.zeros", "range", "range", "numpy.multiply", "SDBN.SDBN.parameter_dict[].keys", "SDBN.SDBN.parameter_dict[].keys", "unseen_docs_index.append"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "", "def", "get_click_probs", "(", "self", ",", "session", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docIds", "=", "session", "[", "1", ":", "11", "]", "\n", "a_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "[", "0", "]", "=", "1", "\n", "unseen_docs_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "            ", "if", "docIds", "[", "i", "-", "1", "]", "not", "in", "self", ".", "parameter_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "ar", "=", "self", ".", "alpha", "/", "(", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "sr", "=", "self", ".", "alpha", "/", "(", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "", "else", ":", "\n", "                ", "ar", "=", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docIds", "[", "i", "-", "1", "]", "]", "[", "0", "]", "\n", "sr", "=", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docIds", "[", "i", "-", "1", "]", "]", "[", "1", "]", "\n", "", "exam_probs", "[", "i", "]", "=", "exam_probs", "[", "i", "-", "1", "]", "*", "(", "ar", "*", "(", "1", "-", "sr", ")", "+", "(", "1", "-", "ar", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "if", "docIds", "[", "i", "]", "not", "in", "self", ".", "parameter_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "unseen_docs_index", ".", "append", "(", "i", ")", "\n", "a", "=", "self", ".", "alpha", "/", "(", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "", "else", ":", "\n", "                ", "a", "=", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docIds", "[", "i", "]", "]", "[", "0", "]", "\n", "", "a_probs", "[", "i", "]", "=", "a", "\n", "\n", "", "probs", "=", "np", ".", "multiply", "(", "exam_probs", ",", "a_probs", ")", "\n", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN.SDBN.get_real_click_probs": [[150, 169], ["numpy.zeros", "numpy.zeros", "range", "range", "numpy.multiply", "dataset.get_relevance_label_by_query_and_docid", "dataset.get_relevance_label_by_query_and_docid", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "get_real_click_probs", "(", "self", ",", "session", ",", "dataset", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docIds", "=", "session", "[", "1", ":", "11", "]", "\n", "a_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "[", "0", "]", "=", "1", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "            ", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "qid", ",", "int", "(", "docIds", "[", "i", "-", "1", "]", ")", ")", "\n", "ar", "=", "self", ".", "pc", "[", "relevance", "]", "\n", "sr", "=", "self", ".", "ps", "[", "relevance", "]", "\n", "exam_probs", "[", "i", "]", "=", "exam_probs", "[", "i", "-", "1", "]", "*", "(", "ar", "*", "(", "1", "-", "sr", ")", "+", "(", "1", "-", "ar", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "qid", ",", "int", "(", "docIds", "[", "i", "]", ")", ")", "\n", "a", "=", "self", ".", "pc", "[", "relevance", "]", "\n", "a_probs", "[", "i", "]", "=", "a", "\n", "\n", "", "return", "np", ".", "multiply", "(", "exam_probs", ",", "a_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTM.LSTM.__init__": [[10, 42], ["tensorflow.placeholder", "tensorflow.placeholder", "LSTM.LSTM._RNN", "LSTM.LSTM._predict", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.Session", "LSTM.LSTM.sess.run", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.global_variables_initializer", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.constant", "tensorflow.constant", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTM.LSTM._RNN", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTM.LSTM._predict", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["    ", "def", "__init__", "(", "self", ",", "num_feature", ",", "num_hidden_units", ",", "train_set", ",", "learning_rate", "=", "0.001", ")", ":", "\n", "        ", "self", ".", "name", "=", "\"LSTM_models\"", "\n", "self", ".", "lr", "=", "learning_rate", "\n", "self", ".", "num_feature", "=", "num_feature", "\n", "self", ".", "num_hidden_units", "=", "num_hidden_units", "\n", "self", ".", "train_set", "=", "train_set", "\n", "\n", "# Define weights", "\n", "self", ".", "weights", "=", "{", "\n", "# (10, num_hidden_units)", "\n", "'in'", ":", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "num_feature", ",", "self", ".", "num_hidden_units", "]", ")", ")", ",", "\n", "# (num_hidden_units, 2)", "\n", "'out'", ":", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "num_hidden_units", ",", "2", "]", ")", ")", "\n", "}", "\n", "self", ".", "biases", "=", "{", "\n", "# (num_hidden_units, )", "\n", "'in'", ":", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "self", ".", "num_hidden_units", ",", "]", ")", ")", ",", "\n", "# (2, )", "\n", "'out'", ":", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "2", ",", "]", ")", ")", "\n", "}", "\n", "\n", "self", ".", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "10", ",", "self", ".", "num_feature", "]", ")", "\n", "self", ".", "y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "10", ",", "2", "]", ")", "\n", "\n", "self", ".", "prediction", ",", "self", ".", "cell", "=", "self", ".", "_RNN", "(", "self", ".", "x", ")", "\n", "self", ".", "output", "=", "self", ".", "_predict", "(", "self", ".", "x", ",", "self", ".", "cell", ")", "\n", "\n", "self", ".", "cost", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "prediction", ",", "labels", "=", "self", ".", "y", ")", ")", "\n", "self", ".", "train_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "cost", ")", "\n", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTM.LSTM._RNN": [[43, 64], ["tensorflow.reshape", "tensorflow.cast", "tensorflow.reshape", "tensorflow.nn.rnn_cell.BasicLSTMCell", "tensorflow.nn.rnn_cell.BasicLSTMCell.zero_state", "tensorflow.nn.dynamic_rnn", "tensorflow.unstack", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.matmul"], "methods", ["None"], ["", "def", "_RNN", "(", "self", ",", "X", ")", ":", "\n", "\n", "        ", "X", "=", "tf", ".", "reshape", "(", "X", ",", "[", "-", "1", ",", "self", ".", "num_feature", "]", ")", "\n", "\n", "X", "=", "tf", ".", "cast", "(", "X", ",", "tf", ".", "float32", ")", "\n", "\n", "X_in", "=", "tf", ".", "matmul", "(", "X", ",", "self", ".", "weights", "[", "'in'", "]", ")", "+", "self", ".", "biases", "[", "'in'", "]", "\n", "\n", "X_in", "=", "tf", ".", "reshape", "(", "X_in", ",", "[", "-", "1", ",", "10", ",", "self", ".", "num_hidden_units", "]", ")", "\n", "\n", "cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "BasicLSTMCell", "(", "self", ".", "num_hidden_units", ",", "forget_bias", "=", "1.0", ",", "state_is_tuple", "=", "True", ")", "\n", "\n", "init_state", "=", "cell", ".", "zero_state", "(", "180", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "outputs", ",", "final_state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cell", ",", "X_in", ",", "initial_state", "=", "init_state", ",", "time_major", "=", "False", ")", "\n", "\n", "outputs", "=", "tf", ".", "unstack", "(", "tf", ".", "transpose", "(", "outputs", ",", "[", "1", ",", "0", ",", "2", "]", ")", ")", "\n", "\n", "results", "=", "tf", ".", "matmul", "(", "outputs", ",", "self", ".", "weights", "[", "'out'", "]", ")", "+", "self", ".", "biases", "[", "'out'", "]", "\n", "\n", "return", "results", ",", "cell", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTM.LSTM._predict": [[65, 83], ["tensorflow.reshape", "tensorflow.cast", "tensorflow.reshape", "cell.zero_state", "tensorflow.nn.dynamic_rnn", "tensorflow.unstack", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.matmul"], "methods", ["None"], ["", "def", "_predict", "(", "self", ",", "X", ",", "cell", ")", ":", "\n", "        ", "X", "=", "tf", ".", "reshape", "(", "X", ",", "[", "-", "1", ",", "self", ".", "num_feature", "]", ")", "\n", "\n", "X", "=", "tf", ".", "cast", "(", "X", ",", "tf", ".", "float32", ")", "\n", "\n", "X_in", "=", "tf", ".", "matmul", "(", "X", ",", "self", ".", "weights", "[", "'in'", "]", ")", "+", "self", ".", "biases", "[", "'in'", "]", "\n", "\n", "X_in", "=", "tf", ".", "reshape", "(", "X_in", ",", "[", "-", "1", ",", "10", ",", "self", ".", "num_hidden_units", "]", ")", "\n", "\n", "init_state", "=", "cell", ".", "zero_state", "(", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "outputs", ",", "final_state", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cell", ",", "X_in", ",", "initial_state", "=", "init_state", ",", "time_major", "=", "False", ")", "\n", "\n", "outputs", "=", "tf", ".", "unstack", "(", "tf", ".", "transpose", "(", "outputs", ",", "[", "1", ",", "0", ",", "2", "]", ")", ")", "\n", "\n", "results", "=", "tf", ".", "matmul", "(", "outputs", ",", "self", ".", "weights", "[", "'out'", "]", ")", "+", "self", ".", "biases", "[", "'out'", "]", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTM.LSTM.train": [[84, 91], ["LSTM.LSTM._sessions_to_features", "LSTM.LSTM._clicks_to_bitmap", "LSTM.LSTM.sess.run"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2._sessions_to_features", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2._clicks_to_bitmap", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "train", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "clicks", "=", "click_log", "[", ":", ",", "11", ":", "]", "\n", "features", "=", "self", ".", "_sessions_to_features", "(", "click_log", ")", "\n", "click_bitmap", "=", "self", ".", "_clicks_to_bitmap", "(", "clicks", ")", "\n", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "train_op", "]", ",", "feed_dict", "=", "{", "\n", "self", ".", "x", ":", "features", ",", "\n", "self", ".", "y", ":", "click_bitmap", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTM.LSTM._clicks_to_bitmap": [[93, 102], ["numpy.zeros", "clicks.astype.astype.astype", "range", "clicks[].reshape", "numpy.vstack", "numpy.vstack", "numpy.array"], "methods", ["None"], ["", "def", "_clicks_to_bitmap", "(", "self", ",", "clicks", ")", ":", "\n", "        ", "click_bitmap", "=", "np", ".", "zeros", "(", "(", "1", ",", "10", ",", "2", ")", ")", "\n", "clicks", "=", "clicks", ".", "astype", "(", "np", ".", "int", ")", "\n", "for", "i", "in", "range", "(", "clicks", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "sess_clicks", "=", "clicks", "[", "i", "]", ".", "reshape", "(", "-", "1", ")", "\n", "click_label_flip", "=", "1", "-", "sess_clicks", "\n", "sess_clicks", "=", "np", ".", "vstack", "(", "(", "sess_clicks", ",", "click_label_flip", ")", ")", ".", "T", "\n", "click_bitmap", "=", "np", ".", "vstack", "(", "(", "click_bitmap", ",", "np", ".", "array", "(", "[", "sess_clicks", "]", ")", ")", ")", "\n", "", "return", "click_bitmap", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTM.LSTM.get_click_probs": [[109, 114], ["tensorflow.nn.softmax", "LSTM.LSTM.sess.run", "LSTM.LSTM.reshape"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.softmax", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "get_click_probs", "(", "self", ",", "session", ")", ":", "\n", "        ", "logits", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "output", ")", "\n", "click_probs", "=", "self", ".", "sess", ".", "run", "(", "logits", ",", "feed_dict", "=", "{", "self", ".", "x", ":", "session", "}", ")", "\n", "\n", "return", "click_probs", ".", "reshape", "(", "-", "1", ",", "2", ")", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTM.LSTM.get_MSE": [[116, 129], ["print", "numpy.zeros", "range", "LSTM.LSTM._sessions_to_features", "LSTM.LSTM.get_click_probs", "simulator.get_real_click_probs", "numpy.square", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2._sessions_to_features", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.get_click_probs", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.get_real_click_probs"], ["", "def", "get_MSE", "(", "self", ",", "test_click_log", ",", "dataset", ",", "simulator", ")", ":", "\n", "        ", "print", "(", "self", ".", "name", ",", "\"computing MSE\"", ")", "\n", "MSE", "=", "np", ".", "zeros", "(", "10", ")", "\n", "size", "=", "test_click_log", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "# print(i)", "\n", "            ", "session", "=", "test_click_log", "[", "i", "]", "[", ":", "11", "]", "\n", "features", "=", "self", ".", "_sessions_to_features", "(", "np", ".", "array", "(", "[", "session", "]", ")", ")", "\n", "click_probs", "=", "self", ".", "get_click_probs", "(", "features", ")", "\n", "real_click_probs", "=", "simulator", ".", "get_real_click_probs", "(", "session", ",", "dataset", ")", "\n", "MSE", "+=", "np", ".", "square", "(", "click_probs", "-", "real_click_probs", ")", "\n", "\n", "", "return", "MSE", "/", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTM.LSTM.get_perplexity": [[130, 147], ["numpy.zeros", "range", "LSTM.LSTM.get_click_probs", "enumerate", "LSTM.LSTM._sessions_to_features", "numpy.log2"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.get_click_probs", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2._sessions_to_features"], ["", "def", "get_perplexity", "(", "self", ",", "test_click_log", ")", ":", "\n", "        ", "perplexity", "=", "np", ".", "zeros", "(", "10", ")", "\n", "size", "=", "test_click_log", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "session", "=", "test_click_log", "[", "i", "]", "[", ":", "11", "]", "\n", "click_label", "=", "test_click_log", "[", "i", "]", "[", "11", ":", "]", "\n", "features", "=", "self", ".", "_sessions_to_features", "(", "np", ".", "array", "[", "session", "]", ")", "[", "0", "]", "\n", "click_probs", "=", "self", ".", "get_click_probs", "(", "features", ")", "\n", "for", "rank", ",", "click_prob", "in", "enumerate", "(", "click_probs", ")", ":", "\n", "                ", "if", "click_label", "[", "rank", "]", "==", "'1'", ":", "\n", "                    ", "p", "=", "click_prob", "\n", "", "else", ":", "\n", "                    ", "p", "=", "1", "-", "click_prob", "\n", "", "perplexity", "[", "rank", "]", "+=", "np", ".", "log2", "(", "p", ")", "\n", "\n", "", "", "perplexity", "=", "[", "2", "**", "(", "-", "x", "/", "size", ")", "for", "x", "in", "perplexity", "]", "\n", "return", "perplexity", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTM.LSTM._sessions_to_features": [[148, 155], ["numpy.zeros", "range", "[].astype", "numpy.vstack", "numpy.array", "LSTM.LSTM.train_set.get_all_features_by_query"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query"], ["", "def", "_sessions_to_features", "(", "self", ",", "sessions", ")", ":", "\n", "        ", "qids", "=", "sessions", "[", ":", ",", "0", "]", "\n", "features", "=", "np", ".", "zeros", "(", "(", "1", ",", "10", ",", "700", ")", ")", "\n", "for", "i", "in", "range", "(", "qids", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "docids", "=", "sessions", "[", "i", "]", "[", "1", ":", "11", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "features", "=", "np", ".", "vstack", "(", "(", "features", ",", "np", ".", "array", "(", "[", "self", ".", "train_set", ".", "get_all_features_by_query", "(", "qids", "[", "i", "]", ")", "[", "docids", "]", "]", ")", ")", ")", "\n", "", "return", "features", "[", "1", ":", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.DFBNCM.DFBNCM.__init__": [[22, 29], ["clickModel.FBNCM.FBNCM.__init__"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_a", ",", "dq_dim", ",", "dd_dim", ",", "fq_dim", ",", "fd_dim", ",", "dataset", ",", "model", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "n_a", ",", "dq_dim", "+", "fq_dim", ",", "dd_dim", "+", "fd_dim", ",", "dataset", ",", "model", ")", "\n", "self", ".", "name", "=", "\"DFBNCM\"", "\n", "self", ".", "dq_dim", "=", "dq_dim", "\n", "self", ".", "dd_dim", "=", "dd_dim", "\n", "self", ".", "fq_dim", "=", "fq_dim", "\n", "self", ".", "fd_dim", "=", "fd_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.DFBNCM.DFBNCM.initial_representation": [[31, 64], ["print", "range", "clicks.astype.astype.astype", "clicks.astype.astype.dot", "range", "DFBNCM.DFBNCM.query_rep.keys", "DFBNCM.DFBNCM.dataset.get_all_features_by_query", "numpy.mean", "numpy.zeros", "numpy.append", "numpy.arange", "DFBNCM.DFBNCM.doc_rep[].keys", "DFBNCM.DFBNCM.dataset.get_features_by_query_and_docid", "numpy.zeros", "numpy.append", "int"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_features_by_query_and_docid"], ["", "def", "initial_representation", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "print", "(", "\"{} processing log.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "dataset_size", "=", "click_log", ".", "shape", "[", "0", "]", "\n", "\n", "for", "line", "in", "range", "(", "dataset_size", ")", ":", "\n", "            ", "qid", "=", "click_log", "[", "line", "]", "[", "0", "]", "\n", "docIds", "=", "click_log", "[", "line", "]", "[", "1", ":", "11", "]", "\n", "clicks", "=", "click_log", "[", "line", "]", "[", "11", ":", "21", "]", "\n", "\n", "clicks", "=", "clicks", ".", "astype", "(", "np", ".", "int", ")", "\n", "pattern_index", "=", "clicks", ".", "dot", "(", "1", "<<", "np", ".", "arange", "(", "clicks", ".", "shape", "[", "-", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", "# binary to decimal", "\n", "\n", "if", "qid", "not", "in", "self", ".", "query_rep", ".", "keys", "(", ")", ":", "\n", "                ", "feature_matrix", "=", "self", ".", "dataset", ".", "get_all_features_by_query", "(", "qid", ")", "\n", "feature_rep", "=", "np", ".", "mean", "(", "feature_matrix", ",", "axis", "=", "0", ")", "\n", "distribution_rep", "=", "np", ".", "zeros", "(", "self", ".", "dq_dim", ")", "\n", "\n", "distribution_rep", "[", "pattern_index", "]", "+=", "1", "\n", "\n", "self", ".", "query_rep", "[", "qid", "]", "=", "np", ".", "append", "(", "feature_rep", ",", "distribution_rep", ")", "\n", "self", ".", "doc_rep", "[", "qid", "]", "=", "{", "}", "\n", "", "else", ":", "\n", "                ", "self", ".", "query_rep", "[", "qid", "]", "[", "self", ".", "fq_dim", "+", "pattern_index", "]", "+=", "1", "\n", "\n", "", "for", "rank", "in", "range", "(", "10", ")", ":", "\n", "                ", "docid", "=", "docIds", "[", "rank", "]", "\n", "if", "docid", "not", "in", "self", ".", "doc_rep", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "feature_rep", "=", "self", ".", "dataset", ".", "get_features_by_query_and_docid", "(", "qid", ",", "int", "(", "docid", ")", ")", "\n", "distribution_rep", "=", "np", ".", "zeros", "(", "self", ".", "dd_dim", ")", "\n", "distribution_rep", "[", "rank", "*", "self", ".", "dq_dim", "+", "pattern_index", "]", "+=", "1", "\n", "self", ".", "doc_rep", "[", "qid", "]", "[", "docid", "]", "=", "np", ".", "append", "(", "feature_rep", ",", "distribution_rep", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "doc_rep", "[", "qid", "]", "[", "docid", "]", "[", "self", ".", "fd_dim", "+", "rank", "*", "self", ".", "dq_dim", "+", "pattern_index", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.DFBNCM.DFBNCM.get_click_probs": [[65, 97], ["numpy.append", "x0.reshape.reshape.reshape", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "DFBNCM.DFBNCM.inference_model.predict", "DFBNCM.DFBNCM.query_rep.keys", "DFBNCM.DFBNCM.dataset.get_all_features_by_query", "numpy.mean", "numpy.zeros", "numpy.append", "numpy.append", "numpy.array", "numpy.zeros", "numpy.zeros", "DFBNCM.DFBNCM.doc_rep[].keys", "DFBNCM.DFBNCM.dataset.get_features_by_query_and_docid", "numpy.zeros", "numpy.append", "numpy.array", "int"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_features_by_query_and_docid"], ["", "", "", "", "def", "get_click_probs", "(", "self", ",", "session", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docids", "=", "session", "[", "1", ":", "11", "]", "\n", "clicks", "=", "session", "[", "11", ":", "21", "]", "\n", "if", "qid", "not", "in", "self", ".", "query_rep", ".", "keys", "(", ")", ":", "\n", "            ", "feature_matrix", "=", "self", ".", "dataset", ".", "get_all_features_by_query", "(", "qid", ")", "\n", "feature_rep", "=", "np", ".", "mean", "(", "feature_matrix", ",", "axis", "=", "0", ")", "\n", "distribution_rep", "=", "np", ".", "zeros", "(", "self", ".", "dq_dim", ")", "\n", "\n", "self", ".", "query_rep", "[", "qid", "]", "=", "np", ".", "append", "(", "feature_rep", ",", "distribution_rep", ")", "\n", "self", ".", "doc_rep", "[", "qid", "]", "=", "{", "}", "\n", "", "else", ":", "\n", "            ", "q_rep", "=", "self", ".", "query_rep", "[", "qid", "]", "\n", "", "x0", "=", "np", ".", "append", "(", "q_rep", ",", "np", ".", "append", "(", "np", ".", "zeros", "(", "1", ")", ",", "np", ".", "zeros", "(", "self", ".", "d_dim", ")", ")", ")", "\n", "x0", "=", "x0", ".", "reshape", "(", "(", "1", ",", "1", ",", "-", "1", ")", ")", "# shape (1, 1, 11265)", "\n", "a0", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "n_a", ")", ")", "# shape (1, 64)", "\n", "c0", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "n_a", ")", ")", "# shape (1, 64)", "\n", "i0", "=", "np", ".", "zeros", "(", "(", "1", ",", "1", ")", ")", "# shape (1, 1)", "\n", "q0", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "q_dim", ")", ")", "# shape (1, 1024)", "\n", "\n", "D", "=", "np", ".", "zeros", "(", "(", "1", ",", "10", ",", "self", ".", "d_dim", ")", ")", "# shape (1, 1, 10240)", "\n", "for", "rank", "in", "range", "(", "10", ")", ":", "\n", "            ", "docid", "=", "docids", "[", "rank", "]", "\n", "if", "docid", "not", "in", "self", ".", "doc_rep", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "feature_rep", "=", "self", ".", "dataset", ".", "get_features_by_query_and_docid", "(", "qid", ",", "int", "(", "docid", ")", ")", "\n", "distribution_rep", "=", "np", ".", "zeros", "(", "self", ".", "dd_dim", ",", "dtype", "=", "int", ")", "\n", "D", "[", "0", "]", "[", "rank", "]", "=", "np", ".", "append", "(", "feature_rep", ",", "distribution_rep", ")", "\n", "", "else", ":", "\n", "                ", "D", "[", "0", "]", "[", "rank", "]", "=", "np", ".", "array", "(", "self", ".", "doc_rep", "[", "qid", "]", "[", "docids", "[", "rank", "]", "]", ")", "\n", "\n", "", "", "pred", "=", "self", ".", "inference_model", ".", "predict", "(", "[", "x0", ",", "a0", ",", "c0", ",", "D", ",", "i0", ",", "q0", "]", ")", "\n", "return", "np", ".", "array", "(", "pred", ")", "[", ":", ",", "0", ",", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.UBM.UBM.__init__": [[7, 18], ["numpy.power", "numpy.divide", "numpy.arange", "numpy.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pc", "=", "None", ",", "eta", "=", "0.5", ",", "iter", "=", "50", ")", ":", "\n", "        ", "self", ".", "name", "=", "'UBM'", "\n", "self", ".", "iter", "=", "iter", "\n", "self", ".", "pc", "=", "pc", "\n", "self", ".", "prr", "=", "np", ".", "power", "(", "np", ".", "divide", "(", "0.9", ",", "np", ".", "arange", "(", "1.0", ",", "11.0", ")", ")", ",", "eta", ")", "\n", "self", ".", "pr", "=", "np", ".", "arange", "(", ".55", ",", "1.05", ",", "0.05", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "self", ".", "attr_parameters", "=", "{", "}", "\n", "self", ".", "exam_parameters", "=", "{", "}", "\n", "self", ".", "query_stat", "=", "{", "}", "\n", "self", ".", "rank_stat", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.UBM.UBM.simulate": [[20, 40], ["numpy.zeros", "range", "len", "len", "numpy.random.rand", "numpy.random.rand", "dataset.get_relevance_label_by_query_and_docid", "clicked_doc.append"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "simulate", "(", "self", ",", "query", ",", "result_list", ",", "dataset", ")", ":", "\n", "        ", "clicked_doc", "=", "[", "]", "\n", "click_label", "=", "np", ".", "zeros", "(", "len", "(", "result_list", ")", ")", "\n", "satisfied", "=", "True", "\n", "last_click", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "result_list", ")", ")", ":", "\n", "            ", "click_prob", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "exam_prob", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "docid", "=", "result_list", "[", "i", "]", "\n", "\n", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "docid", ")", "\n", "\n", "if", "exam_prob", "<=", "self", ".", "pr", "[", "i", "]", "*", "self", ".", "prr", "[", "last_click", "]", ":", "\n", "                ", "if", "click_prob", "<=", "self", ".", "pc", "[", "relevance", "]", ":", "\n", "                    ", "click_label", "[", "i", "]", "=", "1", "\n", "clicked_doc", ".", "append", "(", "result_list", "[", "i", "]", ")", "\n", "last_click", "=", "0", "\n", "continue", "\n", "", "", "last_click", "+=", "1", "\n", "", "return", "clicked_doc", ",", "click_label", ",", "satisfied", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.UBM.UBM.train": [[41, 93], ["UBM.UBM._init_parameters", "print", "range", "print", "copy.deepcopy", "copy.deepcopy", "UBM.UBM.attr_parameters.keys", "UBM.UBM.exam_parameters.keys", "UBM.UBM.attr_parameters[].keys", "UBM.UBM.exam_parameters[].keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.UBM.UBM._init_parameters", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "train", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "self", ".", "_init_parameters", "(", "click_log", ")", "\n", "\n", "print", "(", "\"{} training.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "iter", ")", ":", "\n", "            ", "print", "(", "i", ")", "\n", "new_attr_params", "=", "copy", ".", "deepcopy", "(", "self", ".", "attr_parameters", ")", "\n", "new_exam_params", "=", "copy", ".", "deepcopy", "(", "self", ".", "exam_parameters", ")", "\n", "\n", "for", "qid", "in", "self", ".", "attr_parameters", ".", "keys", "(", ")", ":", "\n", "                ", "for", "docid", "in", "self", ".", "attr_parameters", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "\n", "# if qid == \"4726\" and docid == \"15\":", "\n", "#     print(new_attr_params[qid][docid])", "\n", "#     print(self.query_stat[qid][docid])", "\n", "\n", "                    ", "numerator", "=", "0", "\n", "denominator", "=", "0", "\n", "attr", "=", "self", ".", "attr_parameters", "[", "qid", "]", "[", "docid", "]", "\n", "for", "rank", ",", "click", ",", "last_click", "in", "self", ".", "query_stat", "[", "qid", "]", "[", "docid", "]", ":", "\n", "\n", "                        ", "if", "click", "==", "'1'", ":", "\n", "                            ", "numerator", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "exam", "=", "self", ".", "exam_parameters", "[", "rank", "]", "[", "last_click", "]", "\n", "numerator", "+=", "(", "(", "1", "-", "exam", ")", "*", "attr", ")", "/", "(", "1", "-", "exam", "*", "attr", ")", "\n", "\n", "", "denominator", "+=", "1", "\n", "\n", "# if qid == \"4726\" and docid == \"15\":", "\n", "#     print(numerator, denominator)", "\n", "\n", "\n", "", "new_attr_params", "[", "qid", "]", "[", "docid", "]", "=", "numerator", "/", "denominator", "\n", "\n", "", "", "for", "rank", "in", "self", ".", "exam_parameters", ".", "keys", "(", ")", ":", "\n", "                ", "for", "last_click", "in", "self", ".", "exam_parameters", "[", "rank", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "numerator", "=", "0", "\n", "denominator", "=", "0", "\n", "for", "rank", ",", "click", ",", "last_click", ",", "qid", ",", "docID", "in", "self", ".", "rank_stat", "[", "rank", "]", "[", "last_click", "]", ":", "\n", "                        ", "if", "click", "==", "'1'", ":", "\n", "                            ", "numerator", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "attr", "=", "self", ".", "attr_parameters", "[", "qid", "]", "[", "docID", "]", "\n", "exam", "=", "self", ".", "exam_parameters", "[", "rank", "]", "[", "last_click", "]", "\n", "numerator", "+=", "(", "exam", "*", "(", "1", "-", "attr", ")", ")", "/", "(", "1", "-", "exam", "*", "attr", ")", "\n", "", "denominator", "+=", "1", "\n", "\n", "", "new_exam_params", "[", "rank", "]", "[", "last_click", "]", "=", "numerator", "/", "denominator", "\n", "\n", "", "", "self", ".", "attr_parameters", "=", "new_attr_params", "\n", "self", ".", "exam_parameters", "=", "new_exam_params", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.UBM.UBM._init_parameters": [[98, 136], ["print", "range", "range", "range", "range", "UBM.UBM.attr_parameters.keys", "len", "[].append", "doc_stat[].append", "doc_attract.keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "def", "_init_parameters", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "print", "(", "\"{} processing log.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "dataset_size", "=", "click_log", ".", "shape", "[", "0", "]", "\n", "\n", "for", "rank", "in", "range", "(", "1", ",", "11", ")", ":", "\n", "            ", "self", ".", "exam_parameters", "[", "rank", "]", "=", "{", "}", "\n", "self", ".", "rank_stat", "[", "rank", "]", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "rank", "+", "1", ")", ":", "\n", "                ", "self", ".", "exam_parameters", "[", "rank", "]", "[", "i", "]", "=", "0.5", "\n", "self", ".", "rank_stat", "[", "rank", "]", "[", "i", "]", "=", "[", "]", "\n", "\n", "\n", "", "", "for", "line", "in", "range", "(", "dataset_size", ")", ":", "\n", "            ", "qid", "=", "click_log", "[", "line", "]", "[", "0", "]", "\n", "docIds", "=", "click_log", "[", "line", "]", "[", "1", ":", "11", "]", "\n", "clicks", "=", "click_log", "[", "line", "]", "[", "11", ":", "21", "]", "\n", "last_click", "=", "0", "\n", "if", "qid", "not", "in", "self", ".", "attr_parameters", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "attr_parameters", "[", "qid", "]", "=", "{", "}", "\n", "self", ".", "query_stat", "[", "qid", "]", "=", "{", "}", "\n", "\n", "", "doc_attract", "=", "self", ".", "attr_parameters", "[", "qid", "]", "\n", "doc_stat", "=", "self", ".", "query_stat", "[", "qid", "]", "\n", "\n", "for", "rank", "in", "range", "(", "len", "(", "docIds", ")", ")", ":", "\n", "                ", "docID", "=", "docIds", "[", "rank", "]", "\n", "\n", "self", ".", "rank_stat", "[", "rank", "+", "1", "]", "[", "rank", "+", "1", "-", "last_click", "]", ".", "append", "(", "(", "rank", "+", "1", ",", "clicks", "[", "rank", "]", ",", "rank", "+", "1", "-", "last_click", ",", "qid", ",", "docID", ")", ")", "\n", "\n", "\n", "if", "docID", "not", "in", "doc_attract", ".", "keys", "(", ")", ":", "\n", "                    ", "doc_attract", "[", "docID", "]", "=", "0.2", "\n", "doc_stat", "[", "docID", "]", "=", "[", "]", "\n", "\n", "", "doc_stat", "[", "docID", "]", ".", "append", "(", "(", "rank", "+", "1", ",", "clicks", "[", "rank", "]", ",", "rank", "+", "1", "-", "last_click", ")", ")", "# store rank, click, previous click.", "\n", "\n", "if", "clicks", "[", "rank", "]", "==", "'1'", ":", "\n", "                    ", "last_click", "=", "rank", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.UBM.UBM.get_click_probs": [[138, 174], ["numpy.zeros", "range", "range", "range", "UBM.UBM.attr_parameters[].keys", "UBM.UBM.attr_parameters[].keys", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "", "", "def", "get_click_probs", "(", "self", ",", "session", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docIds", "=", "session", "[", "1", ":", "11", "]", "\n", "\n", "click_probs", "=", "np", ".", "zeros", "(", "11", ")", "\n", "click_probs", "[", "0", "]", "=", "1", "\n", "\n", "for", "rank", "in", "range", "(", "1", ",", "11", ")", ":", "# rank = 2", "\n", "            ", "click_prob", "=", "0", "\n", "for", "prev_rank", "in", "range", "(", "rank", ")", ":", "# prev_rank = 0, 1", "\n", "                ", "no_click_between", "=", "1", "\n", "for", "rank_between", "in", "range", "(", "prev_rank", "+", "1", ",", "rank", ")", ":", "# rank_between = 1", "\n", "                    ", "if", "docIds", "[", "rank_between", "-", "1", "]", "not", "in", "self", ".", "attr_parameters", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                        ", "no_click_between", "*=", "(", "1", "-", "0.2", "*", "\n", "self", ".", "exam_parameters", "[", "rank_between", "]", "[", "rank_between", "-", "prev_rank", "]", ")", "\n", "", "else", ":", "\n", "                        ", "no_click_between", "*=", "(", "1", "-", "self", ".", "attr_parameters", "[", "qid", "]", "[", "docIds", "[", "rank_between", "-", "1", "]", "]", "*", "\n", "self", ".", "exam_parameters", "[", "rank_between", "]", "[", "rank_between", "-", "prev_rank", "]", ")", "\n", "\n", "", "", "if", "docIds", "[", "rank", "-", "1", "]", "not", "in", "self", ".", "attr_parameters", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "click_prob", "+=", "click_probs", "[", "prev_rank", "]", "*", "no_click_between", "*", "0.2", "*", "self", ".", "exam_parameters", "[", "rank", "]", "[", "rank", "-", "prev_rank", "]", "\n", "", "else", ":", "\n", "                    ", "click_prob", "+=", "click_probs", "[", "prev_rank", "]", "*", "no_click_between", "*", "self", ".", "attr_parameters", "[", "qid", "]", "[", "docIds", "[", "rank", "-", "1", "]", "]", "*", "self", ".", "exam_parameters", "[", "rank", "]", "[", "rank", "-", "prev_rank", "]", "\n", "\n", "# if click_prob > 1:", "\n", "#     print(qid, docIds, rank)", "\n", "\n", "# make sure every document has chance to be clicked (at lest 1%)", "\n", "\n", "", "", "click_probs", "[", "rank", "]", "=", "click_prob", "\n", "", "if", "np", ".", "where", "(", "click_probs", "<", "0.01", ")", "[", "0", "]", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "click_probs", "[", "np", ".", "where", "(", "click_probs", "<", "0.01", ")", "[", "0", "]", "]", "=", "0.01", "\n", "\n", "", "return", "click_probs", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.UBM.UBM.get_real_click_probs": [[175, 200], ["numpy.zeros", "range", "range", "range", "dataset.get_relevance_label_by_query_and_docid", "dataset.get_relevance_label_by_query_and_docid", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "get_real_click_probs", "(", "self", ",", "session", ",", "dataset", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docIds", "=", "session", "[", "1", ":", "11", "]", "\n", "\n", "click_probs", "=", "np", ".", "zeros", "(", "11", ")", "\n", "click_probs", "[", "0", "]", "=", "1", "\n", "\n", "for", "rank", "in", "range", "(", "1", ",", "11", ")", ":", "# rank = 2", "\n", "            ", "click_prob", "=", "0", "\n", "for", "prev_rank", "in", "range", "(", "rank", ")", ":", "# prev_rank = 0, 1", "\n", "                ", "no_click_between", "=", "1", "\n", "for", "rank_between", "in", "range", "(", "prev_rank", "+", "1", ",", "rank", ")", ":", "# rank_between = 1", "\n", "\n", "                    ", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "qid", ",", "int", "(", "docIds", "[", "rank_between", "-", "1", "]", ")", ")", "\n", "\n", "no_click_between", "*=", "(", "1", "-", "self", ".", "pc", "[", "relevance", "]", "*", "self", ".", "pr", "[", "rank_between", "-", "1", "]", "*", "self", ".", "prr", "[", "rank_between", "-", "prev_rank", "-", "1", "]", ")", "\n", "\n", "", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "qid", ",", "int", "(", "docIds", "[", "rank", "-", "1", "]", ")", ")", "\n", "\n", "click_prob", "+=", "click_probs", "[", "prev_rank", "]", "*", "no_click_between", "*", "self", ".", "pc", "[", "relevance", "]", "*", "self", ".", "pr", "[", "rank", "-", "1", "]", "*", "self", ".", "prr", "[", "rank", "-", "prev_rank", "-", "1", "]", "\n", "\n", "", "click_probs", "[", "rank", "]", "=", "click_prob", "\n", "\n", "", "return", "click_probs", "[", "1", ":", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.CM.CM.__init__": [[6, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pc", "=", "None", ",", "alpha", "=", "1", ",", "beta", "=", "1", ")", ":", "\n", "        ", "self", ".", "name", "=", "'CM'", "\n", "self", ".", "parameter_dict", "=", "{", "}", "\n", "self", ".", "stat_dict", "=", "{", "}", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "pc", "=", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.CM.CM.set_probs": [[15, 17], ["None"], "methods", ["None"], ["", "def", "set_probs", "(", "self", ",", "pc", ")", ":", "\n", "        ", "self", ".", "pc", "=", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.CM.CM.simulate": [[18, 36], ["numpy.zeros", "range", "len", "len", "numpy.random.rand", "dataset.get_relevance_label_by_query_and_docid", "clicked_doc.append"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "simulate", "(", "self", ",", "query", ",", "result_list", ",", "dataset", ")", ":", "\n", "        ", "clicked_doc", "=", "[", "]", "\n", "click_label", "=", "np", ".", "zeros", "(", "len", "(", "result_list", ")", ")", "\n", "satisfied", "=", "False", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "result_list", ")", ")", ":", "\n", "            ", "click_prob", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "docid", "=", "result_list", "[", "i", "]", "\n", "\n", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "docid", ")", "\n", "\n", "if", "click_prob", "<=", "self", ".", "pc", "[", "relevance", "]", ":", "\n", "                ", "click_label", "[", "i", "]", "=", "1", "\n", "clicked_doc", ".", "append", "(", "result_list", "[", "i", "]", ")", "\n", "\n", "satisfied", "=", "True", "\n", "break", "\n", "\n", "", "", "return", "clicked_doc", ",", "click_label", ",", "satisfied", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.CM.CM.train": [[37, 46], ["CM.CM._get_train_stat", "print", "CM.CM.stat_dict.keys", "CM.CM.stat_dict[].keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse._get_train_stat", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "train", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "self", ".", "_get_train_stat", "(", "click_log", ")", "\n", "\n", "print", "(", "\"{} training.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "for", "qid", "in", "self", ".", "stat_dict", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "parameter_dict", "[", "qid", "]", "=", "{", "}", "\n", "for", "docID", "in", "self", ".", "stat_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "a", "=", "(", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "1", "]", "+", "self", ".", "alpha", ")", "/", "(", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "0", "]", "+", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docID", "]", "=", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.CM.CM._get_train_stat": [[47, 76], ["print", "range", "range", "CM.CM.stat_dict.keys", "doc_stat.keys", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "", "def", "_get_train_stat", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "print", "(", "\"{} processing log.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "dataset_size", "=", "click_log", ".", "shape", "[", "0", "]", "\n", "for", "line", "in", "range", "(", "dataset_size", ")", ":", "\n", "\n", "            ", "qid", "=", "click_log", "[", "line", "]", "[", "0", "]", "\n", "docIds", "=", "click_log", "[", "line", "]", "[", "1", ":", "11", "]", "\n", "clicks", "=", "click_log", "[", "line", "]", "[", "11", ":", "21", "]", "\n", "\n", "if", "qid", "not", "in", "self", ".", "stat_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "stat_dict", "[", "qid", "]", "=", "{", "}", "\n", "\n", "", "doc_stat", "=", "self", ".", "stat_dict", "[", "qid", "]", "\n", "\n", "if", "np", ".", "where", "(", "clicks", "==", "'1'", ")", "[", "0", "]", ".", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "lastClickRank", "=", "np", ".", "where", "(", "clicks", "==", "'1'", ")", "[", "0", "]", "[", "-", "1", "]", "+", "1", "\n", "\n", "for", "rank", "in", "range", "(", "lastClickRank", ")", ":", "\n", "                ", "docID", "=", "docIds", "[", "rank", "]", "\n", "if", "docID", "not", "in", "doc_stat", ".", "keys", "(", ")", ":", "\n", "                    ", "doc_stat", "[", "docID", "]", "=", "(", "0", ",", "0", ")", "\n", "", "exam", "=", "doc_stat", "[", "docID", "]", "[", "0", "]", "+", "1", "\n", "c", "=", "doc_stat", "[", "docID", "]", "[", "1", "]", "\n", "if", "clicks", "[", "rank", "]", "==", "'1'", ":", "\n", "                    ", "c", "+=", "1", "\n", "\n", "", "doc_stat", "[", "docID", "]", "=", "(", "exam", ",", "c", ")", "\n", "# if line % 10000 == 0:", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.CM.CM.get_click_probs": [[79, 100], ["numpy.zeros", "numpy.zeros", "range", "range", "numpy.multiply", "CM.CM.parameter_dict[].keys", "CM.CM.parameter_dict[].keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "", "def", "get_click_probs", "(", "self", ",", "session", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docIds", "=", "session", "[", "1", ":", "11", "]", "\n", "a_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "[", "0", "]", "=", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "            ", "if", "docIds", "[", "i", "-", "1", "]", "not", "in", "self", ".", "parameter_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "ar", "=", "self", ".", "alpha", "/", "(", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "", "else", ":", "\n", "                ", "ar", "=", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docIds", "[", "i", "-", "1", "]", "]", "\n", "", "exam_probs", "[", "i", "]", "=", "exam_probs", "[", "i", "-", "1", "]", "*", "(", "1", "-", "ar", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "if", "docIds", "[", "i", "]", "not", "in", "self", ".", "parameter_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "a", "=", "self", ".", "alpha", "/", "(", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "", "else", ":", "\n", "                ", "a", "=", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docIds", "[", "i", "]", "]", "\n", "", "a_probs", "[", "i", "]", "=", "a", "\n", "\n", "", "return", "np", ".", "multiply", "(", "exam_probs", ",", "a_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.CM.CM.get_real_click_probs": [[101, 118], ["numpy.zeros", "numpy.zeros", "range", "range", "numpy.multiply", "dataset.get_relevance_label_by_query_and_docid", "dataset.get_relevance_label_by_query_and_docid", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "get_real_click_probs", "(", "self", ",", "session", ",", "dataset", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docIds", "=", "session", "[", "1", ":", "11", "]", "\n", "exam_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "[", "0", "]", "=", "1", "\n", "a_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "            ", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "qid", ",", "int", "(", "docIds", "[", "i", "-", "1", "]", ")", ")", "\n", "ar", "=", "self", ".", "pc", "[", "relevance", "]", "\n", "exam_probs", "[", "i", "]", "=", "exam_probs", "[", "i", "-", "1", "]", "*", "(", "1", "-", "ar", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "qid", ",", "int", "(", "docIds", "[", "i", "]", ")", ")", "\n", "a", "=", "self", ".", "pc", "[", "relevance", "]", "\n", "a_probs", "[", "i", "]", "=", "a", "\n", "", "return", "np", ".", "multiply", "(", "exam_probs", ",", "a_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.CM.CM.get_perplexity": [[119, 144], ["print", "numpy.zeros", "range", "CM.CM.get_click_probs", "enumerate", "numpy.errstate", "numpy.log2", "print", "print"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.get_click_probs"], ["", "def", "get_perplexity", "(", "self", ",", "test_click_log", ")", ":", "\n", "        ", "print", "(", "self", ".", "name", ",", "\"computing perplexity\"", ")", "\n", "perplexity", "=", "np", ".", "zeros", "(", "10", ")", "\n", "size", "=", "test_click_log", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "session", "=", "test_click_log", "[", "i", "]", "[", ":", "11", "]", "\n", "click_label", "=", "test_click_log", "[", "i", "]", "[", "11", ":", "]", "\n", "click_probs", "=", "self", ".", "get_click_probs", "(", "session", ")", "\n", "for", "rank", ",", "click_prob", "in", "enumerate", "(", "click_probs", ")", ":", "\n", "                ", "if", "click_label", "[", "rank", "]", "==", "'1'", ":", "\n", "                    ", "p", "=", "click_prob", "\n", "", "else", ":", "\n", "                    ", "p", "=", "1", "-", "click_prob", "\n", "\n", "", "with", "np", ".", "errstate", "(", "invalid", "=", "'raise'", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "p", "=", "0.001", "if", "p", "<", "0.001", "else", "p", "\n", "perplexity", "[", "rank", "]", "+=", "np", ".", "log2", "(", "p", ")", "\n", "", "except", ":", "\n", "                        ", "print", "(", "\"error!, p=\"", ",", "p", ")", "\n", "print", "(", "session", ",", "rank", "+", "1", ")", "\n", "perplexity", "[", "rank", "]", "+=", "0", "\n", "\n", "", "", "", "", "perplexity", "=", "[", "2", "**", "(", "-", "x", "/", "size", ")", "for", "x", "in", "perplexity", "]", "\n", "return", "perplexity", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.CM.CM.get_MSE": [[145, 156], ["print", "numpy.zeros", "range", "CM.CM.get_click_probs", "simulator.get_real_click_probs", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.get_click_probs", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.get_real_click_probs"], ["", "def", "get_MSE", "(", "self", ",", "test_click_log", ",", "dataset", ",", "simulator", ")", ":", "\n", "        ", "print", "(", "self", ".", "name", ",", "\"computing MSE\"", ")", "\n", "MSE", "=", "np", ".", "zeros", "(", "10", ")", "\n", "size", "=", "test_click_log", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "session", "=", "test_click_log", "[", "i", "]", "\n", "click_probs", "=", "self", ".", "get_click_probs", "(", "session", ")", "\n", "real_click_probs", "=", "simulator", ".", "get_real_click_probs", "(", "session", ",", "dataset", ")", "\n", "MSE", "+=", "np", ".", "square", "(", "click_probs", "-", "real_click_probs", ")", "\n", "\n", "", "return", "MSE", "/", "size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.__init__": [[7, 10], ["clickModel.SDBN.SDBN.__init__"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pc", "=", "None", ",", "ps", "=", "None", ",", "alpha", "=", "1", ",", "beta", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "pc", ",", "ps", ",", "alpha", ",", "beta", ")", "\n", "self", ".", "name", "=", "'SDBN_reverse'", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate": [[12, 33], ["numpy.zeros", "range", "len", "len", "numpy.random.rand", "numpy.random.rand", "dataset.get_relevance_label_by_query_and_docid", "clicked_doc.append"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "simulate", "(", "self", ",", "query", ",", "result_list", ",", "dataset", ")", ":", "\n", "        ", "clicked_doc", "=", "[", "]", "\n", "click_label", "=", "np", ".", "zeros", "(", "len", "(", "result_list", ")", ")", "\n", "result_list", "=", "result_list", "[", ":", ":", "-", "1", "]", "# reverse result_list", "\n", "satisfied", "=", "False", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "result_list", ")", ")", ":", "\n", "            ", "click_prob", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "stop_prob", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "docid", "=", "result_list", "[", "i", "]", "\n", "\n", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "query", ",", "docid", ")", "\n", "\n", "if", "click_prob", "<=", "self", ".", "pc", "[", "relevance", "]", ":", "\n", "                ", "click_label", "[", "i", "]", "=", "1", "\n", "clicked_doc", ".", "append", "(", "result_list", "[", "i", "]", ")", "\n", "if", "stop_prob", "<=", "self", ".", "ps", "[", "relevance", "]", ":", "\n", "                    ", "satisfied", "=", "True", "\n", "break", "\n", "", "", "", "click_label", "=", "click_label", "[", ":", ":", "-", "1", "]", "# reverse click_labels", "\n", "\n", "return", "clicked_doc", ",", "click_label", ",", "satisfied", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.train": [[36, 45], ["SDBN_reverse.SDBN_reverse._get_train_stat", "print", "SDBN_reverse.SDBN_reverse.stat_dict.keys", "SDBN_reverse.SDBN_reverse.stat_dict[].keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse._get_train_stat", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "train", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "self", ".", "_get_train_stat", "(", "click_log", ")", "\n", "print", "(", "\"{} training.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "for", "qid", "in", "self", ".", "stat_dict", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "parameter_dict", "[", "qid", "]", "=", "{", "}", "\n", "for", "docID", "in", "self", ".", "stat_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "a", "=", "(", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "1", "]", "+", "self", ".", "alpha", ")", "/", "(", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "0", "]", "+", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "s", "=", "(", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "2", "]", "+", "self", ".", "alpha", ")", "/", "(", "self", ".", "stat_dict", "[", "qid", "]", "[", "docID", "]", "[", "1", "]", "+", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docID", "]", "=", "(", "a", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse._get_train_stat": [[46, 80], ["print", "range", "range", "SDBN_reverse.SDBN_reverse.stat_dict.keys", "doc_stat.keys", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "", "def", "_get_train_stat", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "print", "(", "\"{} processing log.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "dataset_size", "=", "click_log", ".", "shape", "[", "0", "]", "\n", "for", "line", "in", "range", "(", "dataset_size", ")", ":", "\n", "\n", "            ", "qid", "=", "click_log", "[", "line", "]", "[", "0", "]", "\n", "docIds", "=", "click_log", "[", "line", "]", "[", "1", ":", "11", "]", "\n", "clicks", "=", "click_log", "[", "line", "]", "[", "11", ":", "21", "]", "\n", "\n", "docIds", "=", "docIds", "[", ":", ":", "-", "1", "]", "# reverse result_list", "\n", "clicks", "=", "clicks", "[", ":", ":", "-", "1", "]", "# reverse click_labels", "\n", "\n", "if", "qid", "not", "in", "self", ".", "stat_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "stat_dict", "[", "qid", "]", "=", "{", "}", "\n", "\n", "", "doc_stat", "=", "self", ".", "stat_dict", "[", "qid", "]", "\n", "\n", "if", "np", ".", "where", "(", "clicks", "==", "'1'", ")", "[", "0", "]", ".", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "lastClickRank", "=", "np", ".", "where", "(", "clicks", "==", "'1'", ")", "[", "0", "]", "[", "-", "1", "]", "+", "1", "\n", "\n", "for", "rank", "in", "range", "(", "lastClickRank", ")", ":", "\n", "                ", "docID", "=", "docIds", "[", "rank", "]", "\n", "if", "docID", "not", "in", "doc_stat", ".", "keys", "(", ")", ":", "\n", "                    ", "doc_stat", "[", "docID", "]", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "", "exam", "=", "doc_stat", "[", "docID", "]", "[", "0", "]", "+", "1", "\n", "c", "=", "doc_stat", "[", "docID", "]", "[", "1", "]", "\n", "lc", "=", "doc_stat", "[", "docID", "]", "[", "2", "]", "\n", "if", "clicks", "[", "rank", "]", "==", "'1'", ":", "\n", "                    ", "c", "+=", "1", "\n", "if", "rank", "==", "lastClickRank", "-", "1", ":", "\n", "                        ", "lc", "+=", "1", "\n", "", "", "doc_stat", "[", "docID", "]", "=", "(", "exam", ",", "c", ",", "lc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.get_click_probs": [[84, 108], ["numpy.zeros", "numpy.zeros", "range", "range", "numpy.multiply", "SDBN_reverse.SDBN_reverse.parameter_dict[].keys", "SDBN_reverse.SDBN_reverse.parameter_dict[].keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "", "def", "get_click_probs", "(", "self", ",", "session", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docIds", "=", "session", "[", "1", ":", "11", "]", "\n", "docIds", "=", "docIds", "[", ":", ":", "-", "1", "]", "# reverse result_list", "\n", "a_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "[", "0", "]", "=", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "            ", "if", "docIds", "[", "i", "-", "1", "]", "not", "in", "self", ".", "parameter_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "ar", "=", "self", ".", "alpha", "/", "(", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "sr", "=", "self", ".", "alpha", "/", "(", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "", "else", ":", "\n", "                ", "ar", "=", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docIds", "[", "i", "-", "1", "]", "]", "[", "0", "]", "\n", "sr", "=", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docIds", "[", "i", "-", "1", "]", "]", "[", "1", "]", "\n", "", "exam_probs", "[", "i", "]", "=", "exam_probs", "[", "i", "-", "1", "]", "*", "(", "ar", "*", "(", "1", "-", "sr", ")", "+", "(", "1", "-", "ar", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "if", "docIds", "[", "i", "]", "not", "in", "self", ".", "parameter_dict", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                ", "a", "=", "self", ".", "alpha", "/", "(", "self", ".", "alpha", "+", "self", ".", "beta", ")", "\n", "", "else", ":", "\n", "                ", "a", "=", "self", ".", "parameter_dict", "[", "qid", "]", "[", "docIds", "[", "i", "]", "]", "[", "0", "]", "\n", "", "a_probs", "[", "i", "]", "=", "a", "\n", "\n", "", "return", "np", ".", "multiply", "(", "exam_probs", ",", "a_probs", ")", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.get_real_click_probs": [[109, 129], ["numpy.zeros", "numpy.zeros", "range", "range", "dataset.get_relevance_label_by_query_and_docid", "dataset.get_relevance_label_by_query_and_docid", "numpy.multiply", "int", "int"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_relevance_label_by_query_and_docid"], ["", "def", "get_real_click_probs", "(", "self", ",", "session", ",", "dataset", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docIds", "=", "session", "[", "1", ":", "11", "]", "\n", "docIds", "=", "docIds", "[", ":", ":", "-", "1", "]", "# reverse result_list", "\n", "a_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "=", "np", ".", "zeros", "(", "10", ")", "\n", "exam_probs", "[", "0", "]", "=", "1", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "            ", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "qid", ",", "int", "(", "docIds", "[", "i", "-", "1", "]", ")", ")", "\n", "ar", "=", "self", ".", "pc", "[", "relevance", "]", "\n", "sr", "=", "self", ".", "ps", "[", "relevance", "]", "\n", "exam_probs", "[", "i", "]", "=", "exam_probs", "[", "i", "-", "1", "]", "*", "(", "ar", "*", "(", "1", "-", "sr", ")", "+", "(", "1", "-", "ar", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "relevance", "=", "dataset", ".", "get_relevance_label_by_query_and_docid", "(", "qid", ",", "int", "(", "docIds", "[", "i", "]", ")", ")", "\n", "a", "=", "self", ".", "pc", "[", "relevance", "]", "\n", "a_probs", "[", "i", "]", "=", "a", "\n", "\n", "", "return", "np", ".", "multiply", "(", "exam_probs", ",", "a_probs", ")", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2.__init__": [[14, 58], ["print", "tensorflow.keras.Sequential", "LSTMv2.LSTMv2.model.add", "LSTMv2.LSTMv2.model.add", "print", "tensorflow.keras.optimizers.Adam", "LSTMv2.LSTMv2.model.compile", "LSTMv2.LSTMv2.model.summary", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Dense", "LSTMv2.LSTMv2.model.summary", "tensorflow.keras.layers.LSTM"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_feature", ",", "\n", "num_hidden_units", ",", "\n", "dataset", ",", "\n", "learning_rate", "=", "0.001", ",", "\n", "batch_size", "=", "32", ",", "\n", "epoch", "=", "20", ",", "\n", "steps_per_epoch", "=", "None", ",", "\n", "model", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "name", "=", "\"LSTM_models\"", "\n", "self", ".", "lr", "=", "learning_rate", "\n", "self", ".", "num_feature", "=", "num_feature", "\n", "self", ".", "num_hidden_units", "=", "num_hidden_units", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "steps_per_epoch", "=", "steps_per_epoch", "\n", "\n", "if", "model", "is", "not", "None", ":", "\n", "            ", "self", ".", "model", "=", "model", "\n", "print", "(", "self", ".", "model", ".", "summary", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "tf", ".", "keras", ".", "Sequential", "(", ")", "\n", "# input shape (None, 10, 700), output shape", "\n", "self", ".", "model", ".", "add", "(", "layers", ".", "Bidirectional", "(", "layers", ".", "LSTM", "(", "num_hidden_units", ",", "return_sequences", "=", "True", ")", ",", "\n", "input_shape", "=", "(", "10", ",", "num_feature", ")", ")", ")", "\n", "\n", "# forward_layer = layers.LSTM(num_hidden_units, return_sequences=True)", "\n", "# backward_layer = layers.LSTM(num_hidden_units, activation='relu', return_sequences=True,", "\n", "#                      go_backwards=True)", "\n", "#", "\n", "# self.model.add(layers.Bidirectional(forward_layer, backward_layer=backward_layer,", "\n", "#                         input_shape=(10, num_feature)))", "\n", "\n", "# output shape (None, 10, 1)", "\n", "# self.model.add(layers.Dense(32, activation='relu'))", "\n", "self", ".", "model", ".", "add", "(", "layers", ".", "Dense", "(", "1", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "print", "(", "self", ".", "model", ".", "summary", "(", ")", ")", "\n", "\n", "adam", "=", "Adam", "(", "learning_rate", ")", "\n", "\n", "self", ".", "model", ".", "compile", "(", "optimizer", "=", "adam", ",", "\n", "loss", "=", "'binary_crossentropy'", ",", "\n", "metrics", "=", "[", "\"accuracy\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2.train": [[59, 69], ["click_log.batch.batch.map", "click_log.batch.batch.repeat", "click_log.batch.batch.shuffle", "click_log.batch.batch.batch", "LSTMv2.LSTMv2.model.fit"], "methods", ["None"], ["", "", "def", "train", "(", "self", ",", "click_log", ")", ":", "\n", "# print(\"training set shape:\", tf.data.experimental.cardinality(click_log))", "\n", "        ", "click_log", "=", "click_log", ".", "map", "(", "self", ".", "_read_tfrecord", ")", "\n", "click_log", "=", "click_log", ".", "repeat", "(", "1", ")", "\n", "click_log", "=", "click_log", ".", "shuffle", "(", "2048", ")", "\n", "click_log", "=", "click_log", ".", "batch", "(", "self", ".", "batch_size", ",", "drop_remainder", "=", "True", ")", "\n", "\n", "# test_log = test_log.map(self._read_tfrecord)", "\n", "# test_log = test_log.batch(self.batch_size, drop_remainder=False)", "\n", "self", ".", "model", ".", "fit", "(", "click_log", ",", "epochs", "=", "self", ".", "epoch", ",", "steps_per_epoch", "=", "self", ".", "steps_per_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2._clicks_to_bitmap": [[91, 98], ["numpy.zeros", "clicks.astype.astype.astype", "range", "clicks[].reshape", "numpy.vstack", "numpy.array"], "methods", ["None"], ["", "def", "_clicks_to_bitmap", "(", "self", ",", "clicks", ")", ":", "\n", "        ", "click_bitmap", "=", "np", ".", "zeros", "(", "(", "1", ",", "10", ",", "1", ")", ")", "\n", "clicks", "=", "clicks", ".", "astype", "(", "np", ".", "int", ")", "\n", "for", "i", "in", "range", "(", "clicks", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "sess_clicks", "=", "clicks", "[", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "click_bitmap", "=", "np", ".", "vstack", "(", "(", "click_bitmap", ",", "np", ".", "array", "(", "[", "sess_clicks", "]", ")", ")", ")", "\n", "", "return", "click_bitmap", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2.get_click_probs": [[99, 104], ["LSTMv2.LSTMv2.model.predict", "predicts[].reshape"], "methods", ["None"], ["", "def", "get_click_probs", "(", "self", ",", "session", ")", ":", "\n", "\n", "        ", "predicts", "=", "self", ".", "model", ".", "predict", "(", "session", ")", "\n", "\n", "return", "predicts", "[", "0", "]", ".", "reshape", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2.get_MSE": [[105, 124], ["print", "numpy.zeros", "range", "LSTMv2.LSTMv2._sessions_to_features", "LSTMv2.LSTMv2.get_click_probs", "simulator.get_real_click_probs", "numpy.square", "print", "print", "numpy.array", "str"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2._sessions_to_features", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.get_click_probs", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.get_real_click_probs"], ["", "def", "get_MSE", "(", "self", ",", "test_click_log", ",", "dataset", ",", "simulator", ")", ":", "\n", "        ", "print", "(", "self", ".", "name", ",", "\"computing MSE\"", ")", "\n", "MSE", "=", "np", ".", "zeros", "(", "10", ")", "\n", "size", "=", "test_click_log", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "# print(i)", "\n", "            ", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "\"\\r\"", ",", "end", "=", "''", ")", "\n", "print", "(", "str", "(", "i", "/", "size", ")", "+", "\" complete!\"", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "session", "=", "test_click_log", "[", "i", "]", "\n", "features", "=", "self", ".", "_sessions_to_features", "(", "np", ".", "array", "(", "[", "session", "]", ")", ")", "\n", "click_probs", "=", "self", ".", "get_click_probs", "(", "features", ")", "\n", "real_click_probs", "=", "simulator", ".", "get_real_click_probs", "(", "session", ",", "dataset", ")", "\n", "# print(\"predicts: \", click_probs)", "\n", "# print(\"real: \", real_click_probs)", "\n", "# print()", "\n", "MSE", "+=", "np", ".", "square", "(", "click_probs", "-", "real_click_probs", ")", "\n", "\n", "", "return", "MSE", "/", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2.get_perplexity": [[125, 146], ["print", "numpy.zeros", "range", "LSTMv2.LSTMv2._sessions_to_features", "LSTMv2.LSTMv2.get_click_probs", "enumerate", "print", "print", "numpy.array", "numpy.log2", "str"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2._sessions_to_features", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.get_click_probs"], ["", "def", "get_perplexity", "(", "self", ",", "test_click_log", ")", ":", "\n", "        ", "print", "(", "self", ".", "name", ",", "\"computing perplexity\"", ")", "\n", "perplexity", "=", "np", ".", "zeros", "(", "10", ")", "\n", "size", "=", "test_click_log", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "if", "i", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "\"\\r\"", ",", "end", "=", "''", ")", "\n", "print", "(", "str", "(", "i", "/", "size", ")", "+", "\" complete!\"", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "session", "=", "test_click_log", "[", "i", "]", "[", ":", "11", "]", "\n", "click_label", "=", "test_click_log", "[", "i", "]", "[", "11", ":", "]", "\n", "features", "=", "self", ".", "_sessions_to_features", "(", "np", ".", "array", "(", "[", "session", "]", ")", ")", "\n", "click_probs", "=", "self", ".", "get_click_probs", "(", "features", ")", "\n", "for", "rank", ",", "click_prob", "in", "enumerate", "(", "click_probs", ")", ":", "\n", "                ", "if", "click_label", "[", "rank", "]", "==", "'1'", ":", "\n", "                    ", "p", "=", "click_prob", "\n", "", "else", ":", "\n", "                    ", "p", "=", "1", "-", "click_prob", "\n", "", "perplexity", "[", "rank", "]", "+=", "np", ".", "log2", "(", "p", ")", "\n", "\n", "", "", "perplexity", "=", "[", "2", "**", "(", "-", "x", "/", "size", ")", "for", "x", "in", "perplexity", "]", "\n", "return", "perplexity", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2._sessions_to_features": [[147, 154], ["numpy.zeros", "range", "[].astype", "numpy.vstack", "numpy.array", "LSTMv2.LSTMv2.dataset.get_all_features_by_query"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query"], ["", "def", "_sessions_to_features", "(", "self", ",", "sessions", ")", ":", "\n", "        ", "qids", "=", "sessions", "[", ":", ",", "0", "]", "\n", "features", "=", "np", ".", "zeros", "(", "(", "1", ",", "10", ",", "700", ")", ")", "\n", "for", "i", "in", "range", "(", "qids", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "docids", "=", "sessions", "[", "i", "]", "[", "1", ":", "11", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "features", "=", "np", ".", "vstack", "(", "(", "features", ",", "np", ".", "array", "(", "[", "self", ".", "dataset", ".", "get_all_features_by_query", "(", "qids", "[", "i", "]", ")", "[", "docids", "]", "]", ")", ")", ")", "\n", "", "return", "features", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.LSTMv2.LSTMv2._read_tfrecord": [[155, 164], ["tensorflow.io.parse_single_sequence_example", "tensorflow.io.FixedLenSequenceFeature", "tensorflow.io.FixedLenSequenceFeature"], "methods", ["None"], ["", "def", "_read_tfrecord", "(", "self", ",", "example", ")", ":", "\n", "        ", "sequence_features", "=", "{", "\n", "\"inputs\"", ":", "tf", ".", "io", ".", "FixedLenSequenceFeature", "(", "[", "700", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "\"labels\"", ":", "tf", ".", "io", ".", "FixedLenSequenceFeature", "(", "[", "1", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "}", "\n", "# decode the TFRecord", "\n", "_", ",", "example", "=", "tf", ".", "io", ".", "parse_single_sequence_example", "(", "serialized", "=", "example", ",", "sequence_features", "=", "sequence_features", ")", "\n", "\n", "return", "example", "[", "'inputs'", "]", ",", "example", "[", "'labels'", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.__init__": [[5, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "\"RCM\"", "\n", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.train": [[9, 19], ["print", "print", "numpy.where"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "print", "(", "\"{} training.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "num_clicks", "=", "0", "\n", "num_docs", "=", "0", "\n", "for", "session", "in", "click_log", ":", "\n", "            ", "click_label", "=", "session", "[", "11", ":", "]", "\n", "num_clicks", "+=", "np", ".", "where", "(", "click_label", "==", "'1'", ")", "[", "0", "]", ".", "size", "\n", "num_docs", "+=", "10", "\n", "", "self", ".", "prob", "=", "num_clicks", "/", "num_docs", "\n", "print", "(", "\"{} training finished, prob={}\"", ".", "format", "(", "self", ".", "name", ",", "self", ".", "prob", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.get_click_probs": [[21, 23], ["numpy.ones"], "methods", ["None"], ["", "def", "get_click_probs", "(", "self", ",", "session", ")", ":", "\n", "        ", "return", "np", ".", "ones", "(", "10", ")", "*", "self", ".", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.get_perplexity": [[24, 49], ["print", "numpy.zeros", "range", "RCM.RCM.get_click_probs", "enumerate", "numpy.errstate", "numpy.log2", "print", "print"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.get_click_probs"], ["", "def", "get_perplexity", "(", "self", ",", "test_click_log", ")", ":", "\n", "        ", "print", "(", "self", ".", "name", ",", "\"computing perplexity\"", ")", "\n", "perplexity", "=", "np", ".", "zeros", "(", "10", ")", "\n", "size", "=", "test_click_log", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "session", "=", "test_click_log", "[", "i", "]", "[", ":", "11", "]", "\n", "click_label", "=", "test_click_log", "[", "i", "]", "[", "11", ":", "]", "\n", "click_probs", "=", "self", ".", "get_click_probs", "(", "session", ")", "\n", "for", "rank", ",", "click_prob", "in", "enumerate", "(", "click_probs", ")", ":", "\n", "                ", "if", "click_label", "[", "rank", "]", "==", "'1'", ":", "\n", "                    ", "p", "=", "click_prob", "\n", "", "else", ":", "\n", "                    ", "p", "=", "1", "-", "click_prob", "\n", "\n", "", "with", "np", ".", "errstate", "(", "invalid", "=", "'raise'", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "p", "=", "0.001", "if", "p", "<", "0.001", "else", "p", "\n", "perplexity", "[", "rank", "]", "+=", "np", ".", "log2", "(", "p", ")", "\n", "", "except", ":", "\n", "                        ", "print", "(", "\"error!, p=\"", ",", "p", ")", "\n", "print", "(", "session", ",", "rank", "+", "1", ")", "\n", "perplexity", "[", "rank", "]", "+=", "0", "\n", "\n", "", "", "", "", "perplexity", "=", "[", "2", "**", "(", "-", "x", "/", "size", ")", "for", "x", "in", "perplexity", "]", "\n", "return", "perplexity", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.get_MSE": [[50, 61], ["print", "numpy.zeros", "range", "RCM.RCM.get_click_probs", "simulator.get_real_click_probs", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.clickModel.RCM.RCM.get_click_probs", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.get_real_click_probs"], ["", "def", "get_MSE", "(", "self", ",", "test_click_log", ",", "dataset", ",", "simulator", ")", ":", "\n", "        ", "print", "(", "self", ".", "name", ",", "\"computing MSE\"", ")", "\n", "MSE", "=", "np", ".", "zeros", "(", "10", ")", "\n", "size", "=", "test_click_log", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "session", "=", "test_click_log", "[", "i", "]", "\n", "click_probs", "=", "self", ".", "get_click_probs", "(", "session", ")", "\n", "real_click_probs", "=", "simulator", ".", "get_real_click_probs", "(", "session", ",", "dataset", ")", "\n", "MSE", "+=", "np", ".", "square", "(", "click_probs", "-", "real_click_probs", ")", "\n", "\n", "", "return", "MSE", "/", "size", "", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF.__init__": [[15, 41], ["clickModel.CM.CM.__init__", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.reshape", "tensorflow.variable_scope", "NCM_TF.NCM_TF._build_model", "NCM_TF.NCM_TF.probabilities", "NCM_TF.NCM_TF.predictions", "NCM_TF.NCM_TF._compute_loss"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF._build_model", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF.probabilities", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF.predictions", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF._compute_loss"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "lstm_num_hidden", ",", "num_of_dims", ",", "lstm_num_layers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'NCM'", "\n", "self", ".", "query_rep", "=", "{", "}", "\n", "self", ".", "doc_rep", "=", "{", "}", "\n", "\n", "self", ".", "_lstm_num_hidden", "=", "lstm_num_hidden", "\n", "self", ".", "_lstm_num_layers", "=", "lstm_num_layers", "\n", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_representations_dims", "=", "num_of_dims", "\n", "\n", "# Initialization:", "\n", "self", ".", "_inputs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "self", ".", "_batch_size", ",", "11", ",", "self", ".", "_representations_dims", "]", ",", "\n", "name", "=", "'inputs'", ")", "\n", "self", ".", "_targets", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "self", ".", "_batch_size", ",", "10", "]", ",", "\n", "name", "=", "'targets'", ")", "\n", "\n", "self", ".", "_targets_rshaped", "=", "tf", ".", "reshape", "(", "self", ".", "_targets", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'model'", ")", ":", "\n", "            ", "self", ".", "_logits_per_step", "=", "self", ".", "_build_model", "(", ")", "\n", "self", ".", "_probabilities", "=", "self", ".", "probabilities", "(", ")", "\n", "self", ".", "_predictions", "=", "self", ".", "predictions", "(", ")", "\n", "self", ".", "_loss", "=", "self", ".", "_compute_loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF._build_model": [[43, 82], ["tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.nn.rnn_cell.MultiRNNCell", "tensorflow.placeholder", "tensorflow.unstack", "tuple", "tensorflow.nn.dynamic_rnn", "tensorflow.reshape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.bias_add", "tensorflow.matmul", "tensorflow.nn.rnn_cell.DropoutWrapper", "tensorflow.nn.rnn_cell.LSTMStateTuple", "tensorflow.variance_scaling_initializer", "tensorflow.constant_initializer", "tensorflow.nn.rnn_cell.BasicLSTMCell", "range", "range"], "methods", ["None"], ["", "", "def", "_build_model", "(", "self", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'states'", ")", ":", "\n", "            ", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'keep_prob'", ")", "\n", "\n", "stacked_cells", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "MultiRNNCell", "(", "\n", "[", "tf", ".", "nn", ".", "rnn_cell", ".", "DropoutWrapper", "(", "tf", ".", "nn", ".", "rnn_cell", ".", "BasicLSTMCell", "(", "num_units", "=", "self", ".", "_lstm_num_hidden", ",", "forget_bias", "=", "1.0", ")", ",", "\n", "output_keep_prob", "=", "self", ".", "keep_prob", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "_lstm_num_layers", ")", "]", ")", "\n", "\n", "self", ".", "_state_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "[", "self", ".", "_lstm_num_layers", ",", "2", ",", "None", ",", "self", ".", "_lstm_num_hidden", "]", ")", "\n", "\n", "l", "=", "tf", ".", "unstack", "(", "self", ".", "_state_placeholder", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "_rnn_tuple_state", "=", "tuple", "(", "[", "tf", ".", "nn", ".", "rnn_cell", ".", "LSTMStateTuple", "(", "l", "[", "idx", "]", "[", "0", "]", ",", "l", "[", "idx", "]", "[", "1", "]", ")", "\n", "for", "idx", "in", "range", "(", "self", ".", "_lstm_num_layers", ")", "]", ")", "\n", "\n", "outputs", ",", "self", ".", "_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cell", "=", "stacked_cells", ",", "\n", "inputs", "=", "self", ".", "_inputs", ",", "\n", "initial_state", "=", "self", ".", "_rnn_tuple_state", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# since for the first we only have s_0 and no click prediction", "\n", "outputs_", "=", "outputs", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "\n", "outputs_rshaped", "=", "tf", ".", "reshape", "(", "tensor", "=", "outputs_", ",", "shape", "=", "[", "-", "1", ",", "self", ".", "_lstm_num_hidden", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"predictions\"", ")", ":", "\n", "            ", "W_out", "=", "tf", ".", "get_variable", "(", "\"W_out\"", ",", "\n", "shape", "=", "[", "self", ".", "_lstm_num_hidden", ",", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "variance_scaling_initializer", "(", ")", ")", "\n", "\n", "b_out", "=", "tf", ".", "get_variable", "(", "\"b_out\"", ",", "shape", "=", "[", "1", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "predictions", "=", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "matmul", "(", "outputs_rshaped", ",", "W_out", ")", ",", "b_out", ")", "\n", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF._compute_loss": [[83, 91], ["tensorflow.name_scope", "tensorflow.reduce_mean", "tensorflow.log", "tensorflow.multiply", "tensorflow.multiply"], "methods", ["None"], ["", "def", "_compute_loss", "(", "self", ")", ":", "\n", "# Returns the log-likelihood", "\n", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'log_likelihood'", ")", ":", "\n", "            ", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "tf", ".", "multiply", "(", "self", ".", "_probabilities", ",", "self", ".", "_targets_rshaped", ")", "\n", "+", "tf", ".", "multiply", "(", "(", "1", "-", "self", ".", "_targets_rshaped", ")", ",", "(", "1", "-", "self", ".", "_probabilities", ")", ")", ")", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF.probabilities": [[92, 96], ["tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "probabilities", "(", "self", ")", ":", "\n", "# Returns the normalized per-step probabilities", "\n", "        ", "probabilities", "=", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "_logits_per_step", ")", "\n", "return", "probabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF.predictions": [[97, 101], ["tensorflow.round"], "methods", ["None"], ["", "def", "predictions", "(", "self", ")", ":", "\n", "# Returns the per-step predictions", "\n", "        ", "predictions", "=", "tf", ".", "round", "(", "self", ".", "_probabilities", ")", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF.train": [[102, 136], ["tensorflow.Variable", "tensorflow.train.AdadeltaOptimizer", "tensorflow.train.AdadeltaOptimizer.compute_gradients", "zip", "tensorflow.clip_by_global_norm", "tensorflow.train.AdadeltaOptimizer.apply_gradients", "tensorflow.Session", "NCM_TF.NCM_TF.sess.run", "range", "zip", "tensorflow.global_variables_initializer", "NCM_TF.NCM_TF.sess.run", "print", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "train", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "# train_log = train_log.reshape(-1, self._batch_size, 21)", "\n", "\n", "        ", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "int32", ",", "name", "=", "'global_step'", ")", "\n", "starter_learning_rate", "=", "0.01", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdadeltaOptimizer", "(", "starter_learning_rate", ",", "epsilon", "=", "1e-06", ")", "\n", "\n", "# Compute the gradients for each variable", "\n", "grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "-", "self", ".", "_loss", ")", "\n", "\n", "# gradient clipping", "\n", "grads", ",", "variables", "=", "zip", "(", "*", "grads_and_vars", ")", "\n", "grads_clipped", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "grads", ",", "clip_norm", "=", "1", ")", "\n", "apply_gradients_op", "=", "optimizer", ".", "apply_gradients", "(", "zip", "(", "grads_clipped", ",", "variables", ")", ",", "global_step", "=", "global_step", ")", "\n", "\n", "# start the Session", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "\n", "# for batch_session in train_log:", "\n", "# inputs, targets = self._get_batch_train_sample(batch_session)", "\n", "\n", "# get the loss and the probabilities that the model outputs", "\n", "for", "iter", "in", "range", "(", "1000", ")", ":", "\n", "            ", "_", ",", "loss_", ",", "pred", ",", "probs", "=", "self", ".", "sess", ".", "run", "(", "[", "apply_gradients_op", ",", "self", ".", "_loss", ",", "self", ".", "_predictions", ",", "self", ".", "_probabilities", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "_inputs", ":", "X", ",", "\n", "self", ".", "_targets", ":", "Y", ",", "\n", "self", ".", "_state_placeholder", ":", "np", ".", "zeros", "(", "(", "self", ".", "_lstm_num_layers", ",", "2", ",", "\n", "self", ".", "_batch_size", ",", "\n", "self", ".", "_lstm_num_hidden", ")", ")", ",", "\n", "self", ".", "keep_prob", ":", "0.9", "}", ")", "\n", "print", "(", "iter", ",", "loss_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF._get_batch_train_sample": [[137, 161], ["numpy.zeros", "numpy.zeros", "numpy.append", "numpy.append", "range", "numpy.append", "numpy.zeros", "numpy.append", "numpy.append", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.append"], "methods", ["None"], ["", "", "def", "_get_batch_train_sample", "(", "self", ",", "batch_session", ")", ":", "\n", "\n", "        ", "input", "=", "np", ".", "zeros", "(", "(", "self", ".", "_batch_size", ",", "11", ",", "self", ".", "_representations_dims", ")", ")", "\n", "target", "=", "np", ".", "zeros", "(", "(", "self", ".", "_batch_size", ",", "10", ")", ")", "\n", "\n", "index", "=", "0", "\n", "for", "session", "in", "batch_session", ":", "\n", "            ", "qid", "=", "session", "[", "0", "]", "\n", "docids", "=", "session", "[", "1", ":", "11", "]", "\n", "clicks", "=", "session", "[", "11", ":", "21", "]", "\n", "q_rep", "=", "self", ".", "query_rep", "[", "qid", "]", "\n", "\n", "t0", "=", "np", ".", "append", "(", "q_rep", ",", "np", ".", "append", "(", "np", ".", "zeros", "(", "1", ")", ",", "np", ".", "zeros", "(", "10240", ")", ")", ")", "\n", "t1", "=", "np", ".", "append", "(", "np", ".", "zeros", "(", "1024", ")", ",", "np", ".", "append", "(", "np", ".", "zeros", "(", "1", ")", ",", "self", ".", "doc_rep", "[", "qid", "]", "[", "docids", "[", "0", "]", "]", ")", ")", "\n", "input", "[", "index", "]", "[", "0", "]", "=", "t0", "\n", "input", "[", "index", "]", "[", "1", "]", "=", "t1", "\n", "\n", "for", "rank", "in", "range", "(", "1", ",", "10", ")", ":", "\n", "                ", "t", "=", "np", ".", "append", "(", "np", ".", "zeros", "(", "1024", ")", ",", "np", ".", "append", "(", "clicks", "[", "rank", "-", "1", "]", ",", "self", ".", "doc_rep", "[", "qid", "]", "[", "docids", "[", "rank", "]", "]", ")", ")", "\n", "input", "[", "index", "]", "[", "rank", "]", "=", "t", "\n", "\n", "", "target", "[", "index", "]", "=", "clicks", "\n", "index", "+=", "1", "\n", "", "return", "input", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF._session_to_representations": [[162, 178], ["numpy.append", "numpy.append", "range", "numpy.append", "numpy.zeros", "numpy.append", "numpy.append", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.append"], "methods", ["None"], ["", "def", "_session_to_representations", "(", "self", ",", "session", ")", ":", "\n", "        ", "qid", "=", "session", "[", "0", "]", "\n", "docids", "=", "session", "[", "1", ":", "11", "]", "\n", "clicks", "=", "session", "[", "11", ":", "21", "]", "\n", "q_rep", "=", "self", ".", "query_rep", "[", "qid", "]", "\n", "\n", "t0", "=", "np", ".", "append", "(", "q_rep", ",", "np", ".", "append", "(", "np", ".", "zeros", "(", "1", ")", ",", "np", ".", "zeros", "(", "10240", ")", ")", ")", "\n", "t1", "=", "np", ".", "append", "(", "np", ".", "zeros", "(", "1024", ")", ",", "np", ".", "append", "(", "np", ".", "zeros", "(", "1", ")", ",", "self", ".", "doc_rep", "[", "qid", "]", "[", "docids", "[", "0", "]", "]", ")", ")", "\n", "input", "[", "0", "]", "=", "t0", "\n", "input", "[", "1", "]", "=", "t1", "\n", "\n", "for", "rank", "in", "range", "(", "2", ",", "11", ")", ":", "\n", "            ", "t", "=", "np", ".", "append", "(", "np", ".", "zeros", "(", "1024", ")", ",", "np", ".", "append", "(", "clicks", "[", "rank", "-", "2", "]", ",", "self", ".", "doc_rep", "[", "qid", "]", "[", "docids", "[", "rank", "-", "1", "]", "]", ")", ")", "\n", "input", "[", "rank", "]", "=", "t", "\n", "\n", "", "target", "=", "clicks", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF.save_training_set": [[179, 216], ["numpy.zeros", "numpy.append", "numpy.append", "range", "training_inputs.append", "traninig_labels.append", "print", "bz2.BZ2File", "pickle.dump", "bz2.BZ2File", "pickle.dump", "numpy.append", "numpy.zeros", "numpy.append", "numpy.append", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.append"], "methods", ["None"], ["", "def", "save_training_set", "(", "self", ",", "train_log", ",", "path", ")", ":", "\n", "# train_log = train_log.reshape(-1, self._batch_size, 21)", "\n", "        ", "train_size", "=", "train_log", ".", "shape", "[", "0", "]", "\n", "training_inputs", "=", "[", "]", "\n", "traninig_labels", "=", "[", "]", "\n", "\n", "input", "=", "np", ".", "zeros", "(", "(", "11", ",", "self", ".", "_representations_dims", ")", ")", "\n", "\n", "i", "=", "0", "\n", "for", "session", "in", "train_log", ":", "\n", "            ", "qid", "=", "session", "[", "0", "]", "\n", "docids", "=", "session", "[", "1", ":", "11", "]", "\n", "clicks", "=", "session", "[", "11", ":", "21", "]", "\n", "q_rep", "=", "self", ".", "query_rep", "[", "qid", "]", "\n", "\n", "t0", "=", "np", ".", "append", "(", "q_rep", ",", "np", ".", "append", "(", "np", ".", "zeros", "(", "1", ")", ",", "np", ".", "zeros", "(", "10240", ")", ")", ")", "\n", "t1", "=", "np", ".", "append", "(", "np", ".", "zeros", "(", "1024", ")", ",", "np", ".", "append", "(", "np", ".", "zeros", "(", "1", ")", ",", "self", ".", "doc_rep", "[", "qid", "]", "[", "docids", "[", "0", "]", "]", ")", ")", "\n", "input", "[", "0", "]", "=", "t0", "\n", "input", "[", "1", "]", "=", "t1", "\n", "\n", "for", "rank", "in", "range", "(", "2", ",", "11", ")", ":", "\n", "                ", "t", "=", "np", ".", "append", "(", "np", ".", "zeros", "(", "1024", ")", ",", "np", ".", "append", "(", "clicks", "[", "rank", "-", "2", "]", ",", "self", ".", "doc_rep", "[", "qid", "]", "[", "docids", "[", "rank", "-", "1", "]", "]", ")", ")", "\n", "input", "[", "rank", "]", "=", "t", "\n", "\n", "", "target", "=", "clicks", "\n", "\n", "training_inputs", ".", "append", "(", "input", ")", "\n", "traninig_labels", ".", "append", "(", "target", ")", "\n", "i", "+=", "1", "\n", "print", "(", "i", "/", "train_size", ")", "\n", "\n", "\n", "\n", "", "with", "bz2", ".", "BZ2File", "(", "path", "+", "'Xv2.txt'", ",", "'w'", ")", "as", "sfile", ":", "\n", "            ", "pickle", ".", "dump", "(", "np", ".", "array", "(", "training_inputs", ")", ",", "sfile", ")", "\n", "", "with", "bz2", ".", "BZ2File", "(", "path", "+", "'Yv2.txt'", ",", "'w'", ")", "as", "sfile", ":", "\n", "            ", "pickle", ".", "dump", "(", "np", ".", "array", "(", "traninig_labels", ")", ",", "sfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.clickModel.NCM_TF.NCM_TF.initial_representation": [[222, 243], ["print", "range", "clicks.astype.astype.astype", "clicks.astype.astype.dot", "range", "NCM_TF.NCM_TF.query_rep.keys", "numpy.zeros", "numpy.arange", "NCM_TF.NCM_TF.doc_rep[].keys", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "", "def", "initial_representation", "(", "self", ",", "click_log", ")", ":", "\n", "        ", "print", "(", "\"{} processing log.......\"", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "dataset_size", "=", "click_log", ".", "shape", "[", "0", "]", "\n", "\n", "for", "line", "in", "range", "(", "dataset_size", ")", ":", "\n", "            ", "qid", "=", "click_log", "[", "line", "]", "[", "0", "]", "\n", "docIds", "=", "click_log", "[", "line", "]", "[", "1", ":", "11", "]", "\n", "clicks", "=", "click_log", "[", "line", "]", "[", "11", ":", "21", "]", "\n", "\n", "if", "qid", "not", "in", "self", ".", "query_rep", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "query_rep", "[", "qid", "]", "=", "np", ".", "zeros", "(", "1024", ")", "\n", "self", ".", "doc_rep", "[", "qid", "]", "=", "{", "}", "\n", "", "clicks", "=", "clicks", ".", "astype", "(", "np", ".", "int", ")", "\n", "pattern_index", "=", "clicks", ".", "dot", "(", "1", "<<", "np", ".", "arange", "(", "clicks", ".", "shape", "[", "-", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "self", ".", "query_rep", "[", "qid", "]", "[", "pattern_index", "]", "+=", "1", "\n", "\n", "for", "rank", "in", "range", "(", "10", ")", ":", "\n", "                ", "docid", "=", "docIds", "[", "rank", "]", "\n", "if", "docid", "not", "in", "self", ".", "doc_rep", "[", "qid", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "doc_rep", "[", "qid", "]", "[", "docid", "]", "=", "np", ".", "zeros", "(", "1024", "*", "10", ")", "\n", "", "self", ".", "doc_rep", "[", "qid", "]", "[", "docid", "]", "[", "rank", "*", "1024", "+", "pattern_index", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_abrupt_groups_change.run": [[17, 60], ["range", "train_intents[].get_all_querys", "numpy.random.randint", "ndcg_scores.append", "ranker.get_query_result_list", "click_model.simulate", "ranker.update_to_clicks", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "len", "print", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "range", "int", "len", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "int", "int"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_intents", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "group_sequence", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "len", "(", "train_intents", ")", "+", "1", ")", ":", "\n", "        ", "ndcg_scores", ".", "append", "(", "[", "]", ")", "\n", "", "cndcg_scores", "=", "[", "]", "\n", "\n", "query_set", "=", "train_intents", "[", "0", "]", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "\n", "num_iter", "=", "0", "\n", "\n", "current_train_set", "=", "train_intents", "[", "0", "]", "\n", "for", "i", "in", "index", ":", "\n", "        ", "if", "num_iter", "%", "50000", "==", "0", "and", "num_iter", ">", "0", ":", "\n", "            ", "print", "(", "\"Change intent to\"", ",", "int", "(", "num_iter", "/", "50000", ")", ",", "\"group id\"", ",", "group_sequence", "[", "int", "(", "num_iter", "/", "50000", ")", "]", ")", "\n", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "current_train_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "0", "]", ".", "append", "(", "ndcg", ")", "\n", "current_train_set", "=", "train_intents", "[", "group_sequence", "[", "int", "(", "num_iter", "/", "50000", ")", "]", "]", "\n", "\n", "", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", ",", "scores", "=", "ranker", ".", "get_query_result_list", "(", "current_train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "current_train_set", ")", "\n", "\n", "ranker", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores", ")", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "current_train_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "0", "]", ".", "append", "(", "ndcg", ")", "\n", "\n", "for", "intent", "in", "range", "(", "len", "(", "train_intents", ")", ")", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "train_intents", "[", "intent", "]", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "train_intents", "[", "intent", "]", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "intent", "+", "1", "]", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "current_train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "# print(num_iter, ndcg)", "\n", "num_iter", "+=", "1", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_abrupt_groups_change.job": [[62, 109], ["clickModel.SDBN.SDBN", "range", "random.seed", "numpy.random.seed", "utils.utility.get_groups_dataset", "ranker.PDGDNeuralRanker.PDGDNeuralRanker", "print", "run_deepPDGD_abrupt_groups_change.run", "os.makedirs", "range", "print", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump", "os.makedirs", "len", "os.path.dirname", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_groups_dataset", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "Learning_rate", ",", "NUM_INTERACTION", ",", "f", ",", "train_set", ",", "intent_paths", ",", "output_fold", ",", "num_groups", ",", "group_sequence", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", "]", "\n", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.9", "]", "\n", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.3", ",", "0.7", "]", "\n", "ps", "=", "[", "0.1", ",", "0.5", "]", "\n", "# cm = PBM(pc, 1)", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "        ", "random", ".", "seed", "(", "r", ")", "\n", "np", ".", "random", ".", "seed", "(", "r", ")", "\n", "datasets", "=", "get_groups_dataset", "(", "train_set", ",", "intent_paths", ",", "num_groups", "=", "num_groups", ")", "\n", "ranker", "=", "PDGDNeuralRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "[", "64", "]", ")", "\n", "\n", "print", "(", "\"PDGD intent change {} fold{} run{} start!\"", ".", "format", "(", "model_type", ",", "f", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "datasets", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "group_sequence", ")", "\n", "\n", "# create directory if not exist", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/current_intent/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "\n", "\"{}/current_intent/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "with", "open", "(", "\n", "\"{}/current_intent/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", "[", "0", "]", ",", "fp", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "ndcg_scores", ")", "-", "1", ")", ":", "# the intent ndcg start from 1.", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/intent{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist\\", "\n", "\n", "with", "open", "(", "\n", "\"{}/intent{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "ndcg_scores", "[", "i", "+", "1", "]", ",", "fp", ")", "\n", "\n", "", "", "print", "(", "\"PDGD intent change {} run{} finish!\"", ".", "format", "(", "model_type", ",", "r", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PDGD_intent_leaking.run": [[14, 71], ["range", "train_intents[].get_all_querys", "numpy.random.randint", "ndcg_scores.append", "ranker.get_query_result_list", "click_model.simulate", "ranker.update_to_clicks", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "len", "range", "numpy.array", "numpy.sum", "ndcg_scores[].append", "numpy.random.choice", "current_train_set.get_all_features_by_query", "range", "numpy.array", "numpy.sum", "ndcg_scores[].append", "len", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "np.sum.append", "int", "len", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "np.sum.append"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_intents", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "group_sequence", ")", ":", "\n", "    ", "leak_rate", "=", "0.6", "/", "50000", "\n", "intents_probs", "=", "[", "0.7", ",", "0.1", ",", "0.1", ",", "0.1", "]", "\n", "\n", "ndcg_scores", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "len", "(", "train_intents", ")", "+", "1", ")", ":", "\n", "        ", "ndcg_scores", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "cndcg_scores", "=", "[", "]", "\n", "\n", "query_set", "=", "train_intents", "[", "0", "]", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "\n", "for", "i", "in", "index", ":", "\n", "        ", "if", "num_iter", "%", "50000", "==", "0", "and", "num_iter", ">", "0", ":", "\n", "            ", "over_all_ndcg", "=", "[", "]", "\n", "for", "intent", "in", "range", "(", "len", "(", "train_intents", ")", ")", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "train_intents", "[", "intent", "]", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "train_intents", "[", "intent", "]", ",", "all_result", ",", "10", ")", "\n", "over_all_ndcg", ".", "append", "(", "ndcg", ")", "\n", "", "over_all_ndcg", "=", "np", ".", "array", "(", "over_all_ndcg", ")", "\n", "over_all_ndcg", "=", "np", ".", "sum", "(", "over_all_ndcg", "*", "intents_probs", ")", "\n", "ndcg_scores", "[", "0", "]", ".", "append", "(", "over_all_ndcg", ")", "\n", "\n", "", "intent_turn", "=", "(", "int", "(", "num_iter", "/", "50000", ")", "+", "1", ")", "%", "4", "\n", "intents_probs", "[", "intent_turn", "]", "+=", "leak_rate", "\n", "intents_probs", "[", "intent_turn", "-", "1", "]", "-=", "leak_rate", "\n", "\n", "current_intent", "=", "np", ".", "random", ".", "choice", "(", "4", ",", "1", ",", "p", "=", "intents_probs", ")", "[", "0", "]", "\n", "current_train_set", "=", "train_intents", "[", "current_intent", "]", "\n", "\n", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", ",", "scores", "=", "ranker", ".", "get_query_result_list", "(", "current_train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "current_train_set", ")", "\n", "\n", "ranker", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores", ",", "current_train_set", ".", "get_all_features_by_query", "(", "qid", ")", ")", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "over_all_ndcg", "=", "[", "]", "\n", "for", "intent", "in", "range", "(", "len", "(", "train_intents", ")", ")", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "train_intents", "[", "intent", "]", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "train_intents", "[", "intent", "]", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "intent", "+", "1", "]", ".", "append", "(", "ndcg", ")", "\n", "over_all_ndcg", ".", "append", "(", "ndcg", ")", "\n", "", "over_all_ndcg", "=", "np", ".", "array", "(", "over_all_ndcg", ")", "\n", "over_all_ndcg", "=", "np", ".", "sum", "(", "over_all_ndcg", "*", "intents_probs", ")", "\n", "ndcg_scores", "[", "0", "]", ".", "append", "(", "over_all_ndcg", ")", "\n", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "current_train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "# print(num_iter, ndcg)", "\n", "num_iter", "+=", "1", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PDGD_intent_leaking.job": [[73, 120], ["clickModel.SDBN.SDBN", "range", "random.seed", "numpy.random.seed", "utils.utility.get_groups_dataset", "ranker.PDGDLinearRanker.PDGDLinearRanker", "print", "run_PDGD_intent_leaking.run", "os.makedirs", "range", "print", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump", "os.makedirs", "len", "os.path.dirname", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_groups_dataset", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "Learning_rate", ",", "NUM_INTERACTION", ",", "f", ",", "train_set", ",", "intent_paths", ",", "output_fold", ",", "num_groups", ",", "group_sequence", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", "]", "\n", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.9", "]", "\n", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.3", ",", "0.7", "]", "\n", "ps", "=", "[", "0.1", ",", "0.5", "]", "\n", "# cm = PBM(pc, 1)", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "        ", "random", ".", "seed", "(", "r", ")", "\n", "np", ".", "random", ".", "seed", "(", "r", ")", "\n", "datasets", "=", "get_groups_dataset", "(", "train_set", ",", "intent_paths", ",", "num_groups", "=", "num_groups", ")", "\n", "ranker", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ")", "\n", "\n", "print", "(", "\"PDGD intent change {} fold{} run{} start!\"", ".", "format", "(", "model_type", ",", "f", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "datasets", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "group_sequence", ")", "\n", "\n", "# create directory if not exist", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/current_intent/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "\n", "\"{}/current_intent/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "with", "open", "(", "\n", "\"{}/current_intent/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", "[", "0", "]", ",", "fp", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "ndcg_scores", ")", "-", "1", ")", ":", "# the intent ndcg start from 1.", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/intent{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist\\", "\n", "\n", "with", "open", "(", "\n", "\"{}/intent{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "ndcg_scores", "[", "i", "+", "1", "]", ",", "fp", ")", "\n", "\n", "", "", "print", "(", "\"PDGD intent change {} run{} finish!\"", ".", "format", "(", "model_type", ",", "r", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.answerini_note.compute_field_bm25_term_weight": [[84, 87], ["JIndexReaderUtils", "JIndexReaderUtils.getFieldBM25TermWeight", "JString", "JString", "JString", "term.encode"], "function", ["None"], ["def", "compute_field_bm25_term_weight", "(", "reader", ",", "docid", ":", "str", ",", "field", ":", "str", ",", "term", ":", "str", ")", "->", "float", ":", "\n", "    ", "object", "=", "JIndexReaderUtils", "(", ")", "\n", "return", "object", ".", "getFieldBM25TermWeight", "(", "reader", ",", "JString", "(", "docid", ")", ",", "JString", "(", "field", ")", ",", "JString", "(", "term", ".", "encode", "(", "'utf-8'", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.answerini_note.compute_field_bm25_query_weight": [[88, 91], ["JIndexReaderUtils", "JIndexReaderUtils.getFieldBM25QueryWeight", "JString", "JString", "JString", "query.encode"], "function", ["None"], ["", "def", "compute_field_bm25_query_weight", "(", "reader", ",", "docid", ":", "str", ",", "field", ":", "str", ",", "query", ":", "str", ",", "analyzer", ")", "->", "float", ":", "\n", "    ", "object", "=", "JIndexReaderUtils", "(", ")", "\n", "return", "object", ".", "getFieldBM25QueryWeight", "(", "reader", ",", "JString", "(", "docid", ")", ",", "JString", "(", "field", ")", ",", "JString", "(", "query", ".", "encode", "(", "'utf-8'", ")", ")", ",", "analyzer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PDGD_abrupt_groups_change.run": [[17, 60], ["range", "train_intents[].get_all_querys", "numpy.random.randint", "ndcg_scores.append", "ranker.get_query_result_list", "click_model.simulate", "ranker.update_to_clicks", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "len", "print", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "current_train_set.get_all_features_by_query", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "range", "int", "len", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "int", "int"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_intents", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "group_sequence", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "len", "(", "train_intents", ")", "+", "1", ")", ":", "\n", "        ", "ndcg_scores", ".", "append", "(", "[", "]", ")", "\n", "", "cndcg_scores", "=", "[", "]", "\n", "\n", "query_set", "=", "train_intents", "[", "0", "]", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "\n", "num_iter", "=", "0", "\n", "\n", "current_train_set", "=", "train_intents", "[", "group_sequence", "[", "0", "]", "]", "\n", "for", "i", "in", "index", ":", "\n", "        ", "if", "num_iter", "%", "50000", "==", "0", "and", "num_iter", ">", "0", ":", "\n", "            ", "print", "(", "\"Change intent to\"", ",", "int", "(", "num_iter", "/", "50000", ")", ",", "\"group id\"", ",", "group_sequence", "[", "int", "(", "num_iter", "/", "50000", ")", "]", ")", "\n", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "current_train_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "0", "]", ".", "append", "(", "ndcg", ")", "\n", "current_train_set", "=", "train_intents", "[", "group_sequence", "[", "int", "(", "num_iter", "/", "50000", ")", "]", "]", "\n", "\n", "", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", ",", "scores", "=", "ranker", ".", "get_query_result_list", "(", "current_train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "current_train_set", ")", "\n", "\n", "ranker", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores", ",", "current_train_set", ".", "get_all_features_by_query", "(", "qid", ")", ")", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "current_train_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "0", "]", ".", "append", "(", "ndcg", ")", "\n", "\n", "for", "intent", "in", "range", "(", "len", "(", "train_intents", ")", ")", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "train_intents", "[", "intent", "]", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "train_intents", "[", "intent", "]", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "intent", "+", "1", "]", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "current_train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "# print(num_iter, ndcg)", "\n", "num_iter", "+=", "1", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PDGD_abrupt_groups_change.job": [[62, 113], ["clickModel.SDBN.SDBN", "range", "random.seed", "numpy.random.seed", "utils.utility.get_groups_dataset", "ranker.PDGDLinearRanker.PDGDLinearRanker", "print", "run_PDGD_abrupt_groups_change.run", "os.makedirs", "range", "print", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump", "os.makedirs", "len", "os.path.dirname", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_groups_dataset", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "Learning_rate", ",", "NUM_INTERACTION", ",", "f", ",", "train_set", ",", "intent_paths", ",", "output_fold", ",", "num_groups", ",", "group_sequence", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", "]", "\n", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.9", "]", "\n", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.3", ",", "0.7", "]", "\n", "ps", "=", "[", "0.1", ",", "0.5", "]", "\n", "\n", "", "elif", "model_type", "==", "\"noisy\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.6", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", "]", "\n", "# cm = PBM(pc, 1)", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "        ", "random", ".", "seed", "(", "r", ")", "\n", "np", ".", "random", ".", "seed", "(", "r", ")", "\n", "datasets", "=", "get_groups_dataset", "(", "train_set", ",", "intent_paths", ",", "num_groups", "=", "num_groups", ")", "\n", "ranker", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ")", "\n", "\n", "print", "(", "\"PDGD intent change {} fold{} run{} start!\"", ".", "format", "(", "model_type", ",", "f", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "datasets", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "group_sequence", ")", "\n", "\n", "# create directory if not exist", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/current_intent/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "\n", "\"{}/current_intent/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "with", "open", "(", "\n", "\"{}/current_intent/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", "[", "0", "]", ",", "fp", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "ndcg_scores", ")", "-", "1", ")", ":", "# the intent ndcg start from 1.", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/intent{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist\\", "\n", "\n", "with", "open", "(", "\n", "\"{}/intent{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "ndcg_scores", "[", "i", "+", "1", "]", ",", "fp", ")", "\n", "\n", "", "", "print", "(", "\"PDGD intent change {} run{} finish!\"", ".", "format", "(", "model_type", ",", "r", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PDGD_groups_fixed.run": [[15, 46], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "ranker.update_to_clicks", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "current_train_set.get_all_features_by_query", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "ranker", ",", "num_interation", ",", "click_model", ")", ":", "\n", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "\n", "num_iter", "=", "0", "\n", "current_train_set", "=", "train_set", "\n", "\n", "for", "i", "in", "index", ":", "\n", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", ",", "scores", "=", "ranker", ".", "get_query_result_list", "(", "current_train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "current_train_set", ")", "\n", "\n", "ranker", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores", ",", "current_train_set", ".", "get_all_features_by_query", "(", "qid", ")", ")", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "current_train_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "current_train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "# print(num_iter, ndcg)", "\n", "num_iter", "+=", "1", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PDGD_groups_fixed.job": [[48, 90], ["clickModel.SDBN.SDBN", "range", "random.seed", "numpy.random.seed", "utils.utility.get_groups_dataset", "ranker.PDGDLinearRanker.PDGDLinearRanker", "print", "run_PDGD_groups_fixed.run", "os.makedirs", "print", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_groups_dataset", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "Learning_rate", ",", "NUM_INTERACTION", ",", "f", ",", "train_set", ",", "intent_paths", ",", "output_fold", ",", "num_groups", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", "]", "\n", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.9", "]", "\n", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.3", ",", "0.7", "]", "\n", "ps", "=", "[", "0.1", ",", "0.5", "]", "\n", "\n", "", "elif", "model_type", "==", "\"noisy\"", ":", "\n", "        ", "pc", "=", "[", "0.4", ",", "0.6", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", "]", "\n", "# cm = PBM(pc, 1)", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "        ", "random", ".", "seed", "(", "r", ")", "\n", "np", ".", "random", ".", "seed", "(", "r", ")", "\n", "datasets", "=", "get_groups_dataset", "(", "train_set", ",", "intent_paths", ",", "num_groups", "=", "num_groups", ")", "\n", "\n", "# for i in range(len(datasets)):", "\n", "for", "i", "in", "[", "1", ",", "0", "]", ":", "\n", "            ", "ranker", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ")", "\n", "print", "(", "\"PDGD intent fixed {} intent {} run{} start!\"", ".", "format", "(", "model_type", ",", "i", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "datasets", "[", "i", "]", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/group{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "\n", "\"{}/group{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/group{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "print", "(", "\"PDGD intent fixed {} intent {} run{} finished!\"", ".", "format", "(", "model_type", ",", "i", ",", "r", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PDGD_groups_aware.run": [[15, 47], ["train_sets[].get_all_querys", "numpy.random.randint", "rankers[].get_query_result_list", "click_model.simulate", "rankers[].update_to_clicks", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "numpy.random.choice", "current_train_set.get_all_features_by_query", "rankers[].get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_sets", ",", "rankers", ",", "num_interation", ",", "click_model", ")", ":", "\n", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "\n", "query_set", "=", "train_sets", "[", "0", "]", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "intents_probs", "=", "[", "0.25", ",", "0.25", ",", "0.25", ",", "0.25", "]", "\n", "num_iter", "=", "0", "\n", "\n", "for", "i", "in", "index", ":", "\n", "        ", "current_intent", "=", "np", ".", "random", ".", "choice", "(", "4", ",", "1", ",", "p", "=", "intents_probs", ")", "[", "0", "]", "\n", "current_train_set", "=", "train_sets", "[", "current_intent", "]", "\n", "\n", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", ",", "scores", "=", "rankers", "[", "current_intent", "]", ".", "get_query_result_list", "(", "current_train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "current_train_set", ")", "\n", "\n", "rankers", "[", "current_intent", "]", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores", ",", "current_train_set", ".", "get_all_features_by_query", "(", "qid", ")", ")", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "rankers", "[", "current_intent", "]", ".", "get_all_query_result_list", "(", "current_train_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "current_train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "# print(num_iter, ndcg)", "\n", "num_iter", "+=", "1", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PDGD_groups_aware.job": [[49, 90], ["clickModel.SDBN.SDBN", "range", "random.seed", "numpy.random.seed", "utils.utility.get_groups_dataset", "ranker.PDGDLinearRanker.PDGDLinearRanker", "ranker.PDGDLinearRanker.PDGDLinearRanker", "ranker.PDGDLinearRanker.PDGDLinearRanker", "ranker.PDGDLinearRanker.PDGDLinearRanker", "print", "run_PDGD_groups_aware.run", "os.makedirs", "print", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_groups_dataset", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "Learning_rate", ",", "NUM_INTERACTION", ",", "f", ",", "train_set", ",", "intent_paths", ",", "output_fold", ",", "num_groups", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", "]", "\n", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.9", "]", "\n", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.3", ",", "0.7", "]", "\n", "ps", "=", "[", "0.1", ",", "0.5", "]", "\n", "# cm = PBM(pc, 1)", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "        ", "random", ".", "seed", "(", "r", ")", "\n", "np", ".", "random", ".", "seed", "(", "r", ")", "\n", "datasets", "=", "get_groups_dataset", "(", "train_set", ",", "intent_paths", ",", "num_groups", "=", "num_groups", ")", "\n", "\n", "ranker1", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ")", "\n", "ranker2", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ")", "\n", "ranker3", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ")", "\n", "ranker4", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ")", "\n", "rankers", "=", "[", "ranker1", ",", "ranker2", ",", "ranker3", ",", "ranker4", "]", "\n", "\n", "print", "(", "\"PDGD intent aware {} run{} start!\"", ".", "format", "(", "model_type", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "datasets", ",", "rankers", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/group_aware/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "\n", "\"{}/group_aware/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/group_aware/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "print", "(", "\"PDGD intent aware {} run{} finished!\"", ".", "format", "(", "model_type", ",", "r", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PDGD_groups_mixed.run": [[15, 52], ["train_sets[].get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "ranker.update_to_clicks", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "numpy.random.choice", "current_train_set.get_all_features_by_query", "range", "numpy.array", "numpy.sum", "ndcg_scores.append", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "np.sum.append"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_sets", ",", "ranker", ",", "num_interation", ",", "click_model", ")", ":", "\n", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "\n", "query_set", "=", "train_sets", "[", "0", "]", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "intents_probs", "=", "[", "0.25", ",", "0.25", ",", "0.25", ",", "0.25", "]", "\n", "num_iter", "=", "0", "\n", "\n", "for", "i", "in", "index", ":", "\n", "        ", "current_intent", "=", "np", ".", "random", ".", "choice", "(", "4", ",", "1", ",", "p", "=", "intents_probs", ")", "[", "0", "]", "\n", "current_train_set", "=", "train_sets", "[", "current_intent", "]", "\n", "\n", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", ",", "scores", "=", "ranker", ".", "get_query_result_list", "(", "current_train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "current_train_set", ")", "\n", "\n", "ranker", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores", ",", "current_train_set", ".", "get_all_features_by_query", "(", "qid", ")", ")", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "over_all_ndcg", "=", "[", "]", "\n", "for", "intent", "in", "range", "(", "4", ")", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "train_sets", "[", "intent", "]", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "train_sets", "[", "intent", "]", ",", "all_result", ",", "10", ")", "\n", "over_all_ndcg", ".", "append", "(", "ndcg", ")", "\n", "", "over_all_ndcg", "=", "np", ".", "array", "(", "over_all_ndcg", ")", "\n", "over_all_ndcg", "=", "np", ".", "sum", "(", "over_all_ndcg", "*", "intents_probs", ")", "\n", "ndcg_scores", ".", "append", "(", "over_all_ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "current_train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "# print(num_iter, ndcg)", "\n", "num_iter", "+=", "1", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PDGD_groups_mixed.job": [[54, 91], ["clickModel.SDBN.SDBN", "range", "random.seed", "numpy.random.seed", "utils.utility.get_groups_dataset", "ranker.PDGDLinearRanker.PDGDLinearRanker", "print", "run_PDGD_groups_mixed.run", "os.makedirs", "print", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_groups_dataset", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "Learning_rate", ",", "NUM_INTERACTION", ",", "f", ",", "train_set", ",", "intent_paths", ",", "output_fold", ",", "num_groups", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", "]", "\n", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.9", "]", "\n", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.3", ",", "0.7", "]", "\n", "ps", "=", "[", "0.1", ",", "0.5", "]", "\n", "# cm = PBM(pc, 1)", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "        ", "random", ".", "seed", "(", "r", ")", "\n", "np", ".", "random", ".", "seed", "(", "r", ")", "\n", "datasets", "=", "get_groups_dataset", "(", "train_set", ",", "intent_paths", ",", "num_groups", "=", "num_groups", ")", "\n", "\n", "ranker", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ")", "\n", "\n", "print", "(", "\"PDGD mixed intent {} run{} start!\"", ".", "format", "(", "model_type", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "datasets", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/mixed_group/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "\n", "\"{}/mixed_group/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/mixed_group/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "print", "(", "\"PDGD mixed intent {} run{} finished!\"", ".", "format", "(", "model_type", ",", "r", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.compute_onlineNDCG": [[10, 31], ["numpy.zeros", "range", "cndcgs.append", "print", "numpy.mean", "open", "pickle.load", "numpy.array", "numpy.vstack"], "function", ["None"], ["color_index", "=", "0", "\n", "for", "p", "in", "parameters", ":", "\n", "        ", "result", "=", "np", ".", "zeros", "(", "num_interactions", ")", "\n", "for", "f", "in", "folds", ":", "\n", "            ", "for", "r", "in", "runs", ":", "\n", "                ", "with", "open", "(", "\"{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "path", ",", "f", ",", "click_model", ",", "r", ")", ",", "\n", "\"rb\"", ")", "as", "fp", ":", "\n", "                    ", "data", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "data", "=", "np", ".", "array", "(", "data", "[", ":", "num_interactions", "]", ")", "\n", "result", "=", "np", ".", "vstack", "(", "(", "result", ",", "data", ")", ")", "\n", "", "", "", "result", "=", "result", "[", "1", ":", "]", ".", "T", "\n", "print", "(", "result", ".", "shape", ")", "\n", "result_mean", "=", "np", ".", "mean", "(", "result", ",", "axis", "=", "1", ")", "\n", "result_std_err", "=", "sem", "(", "result", ",", "axis", "=", "1", ")", "\n", "result_h", "=", "result_std_err", "*", "t", ".", "ppf", "(", "(", "1", "+", "0.95", ")", "/", "2", ",", "25", "-", "1", ")", "\n", "result_low", "=", "np", ".", "subtract", "(", "result_mean", ",", "result_h", ")", "\n", "result_high", "=", "np", ".", "add", "(", "result_mean", ",", "result_h", ")", "\n", "\n", "plt", ".", "plot", "(", "range", "(", "num_interactions", ")", ",", "result_mean", ",", "color", "=", "COLORS", "[", "color", "]", ",", "alpha", "=", "1", ")", "\n", "\n", "plt", ".", "fill_between", "(", "range", "(", "num_interactions", ")", ",", "result_low", ",", "result_high", ",", "color", "=", "COLORS", "[", "color", "]", ",", "alpha", "=", "0.2", ")", "\n", "color_index", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.compute_mertic": [[32, 56], ["print", "len", "open", "pickle.load", "numpy.array", "open", "pickle.load", "numpy.array", "difference.clip", "numpy.sum"], "function", ["None"], ["\n", "\n", "", "", "def", "plot_mrr", "(", "path", ",", "folds", ",", "runs", ",", "click_models", ",", "num_interactions", ",", "color", ")", ":", "\n", "    ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "3", ",", "5", ")", "\n", "row", "=", "0", "\n", "column", "=", "0", "\n", "for", "click_model", "in", "click_models", ":", "\n", "        ", "axs", "[", "row", ",", "column", "]", ".", "set_title", "(", "click_model", ")", "\n", "\n", "for", "f", "in", "folds", ":", "\n", "\n", "            ", "for", "r", "in", "runs", ":", "\n", "                ", "with", "open", "(", "\"{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "path", ",", "f", ",", "click_model", ",", "r", ")", ",", "\n", "\"rb\"", ")", "as", "fp", ":", "\n", "                    ", "data", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "\n", "", "axs", "[", "row", ",", "column", "]", ".", "plot", "(", "range", "(", "num_interactions", ")", ",", "[", "sum", "(", "group", ")", "/", "8000", "for", "group", "in", "zip", "(", "*", "[", "iter", "(", "data", ")", "]", "*", "8000", ")", "]", ",", "color", "=", "COLORS", "[", "color", "]", ")", "\n", "# if click_model == 'informational':", "\n", "#     axs[row, column].set_ylim([0.70, 0.76])", "\n", "# elif click_model == 'navigational':", "\n", "#     axs[row, column].set_ylim([0.43, 0.52])", "\n", "# else:", "\n", "#     axs[row, column].set_ylim([0.4, 0.47])", "\n", "", "column", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot": [[59, 101], ["matplotlib.subplot", "numpy.zeros", "numpy.mean", "scipy.stats.sem", "numpy.subtract", "numpy.add", "scipy.stats.t.ppf", "range", "matplotlib.plot", "matplotlib.fill_between", "range", "matplotlib.plot", "matplotlib.fill_between", "xs.append", "open", "pickle.load", "numpy.array", "numpy.vstack", "xs.append", "xs.append", "xs.append"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot"], ["\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "# path1 = \"../results/PDGD/mq2007\"", "\n", "    ", "path1", "=", "\"../results/exploration/PDGD/istella/random\"", "\n", "path2", "=", "\"../results/exploration/PDGD/istella/original\"", "\n", "# path2 = \"../results/reduction/mq2007/PDGD\"", "\n", "folds", "=", "list", "(", "range", "(", "1", ",", "2", ")", ")", "\n", "runs", "=", "list", "(", "range", "(", "1", ",", "2", ")", ")", "\n", "click_models", "=", "[", "\"navigational\"", ",", "'informational'", ",", "\"perfect\"", "]", "\n", "# parameters = [0.03, 0.05, 0.08, 0.1, 0.5, 1.0, 5.0]", "\n", "parameters", "=", "[", "0.1", "]", "\n", "num_interactions", "=", "1000", "\n", "\n", "# plot(path1, parameters, folds, runs, 'informational', num_interactions, 1)", "\n", "plot", "(", "path1", ",", "parameters", ",", "folds", ",", "runs", ",", "'perfect'", ",", "num_interactions", ",", "2", ")", "\n", "plot", "(", "path2", ",", "parameters", ",", "folds", ",", "runs", ",", "'perfect'", ",", "num_interactions", ",", "1", ")", "\n", "# plot_mrr(path1, folds, runs, click_models, num_interactions, 2)", "\n", "plt", ".", "ylabel", "(", "'NDCG'", ")", "\n", "plt", ".", "xlabel", "(", "'EPOCH'", ")", "\n", "\n", "# plt.legend(click_models, loc='lower right')", "\n", "plt", ".", "show", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot_slots": [[103, 316], ["ndcg_plot.plot", "ndcg_plot.plot", "ndcg_plot.plot", "print", "print", "ndcg_plot.compute_mertic", "ndcg_plot.compute_mertic", "ndcg_plot.compute_mertic", "print", "ndcg_plot.compute_mertic", "ndcg_plot.compute_mertic", "ndcg_plot.compute_mertic", "print", "ndcg_plot.compute_mertic", "ndcg_plot.compute_mertic", "ndcg_plot.compute_mertic", "matplotlib.xlim", "matplotlib.ylim", "range", "matplotlib.xlabel", "matplotlib.gca().set_title", "matplotlib.tight_layout", "xcoords.append", "matplotlib.axvline", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.yticks", "matplotlib.gca"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.plot", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.compute_mertic", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.compute_mertic", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.compute_mertic", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.compute_mertic", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.compute_mertic", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.compute_mertic", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.compute_mertic", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.compute_mertic", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.ndcg_plot.compute_mertic"], []], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.parser.parse_topics": [[4, 19], ["os.listdir", "open", "os.path.join", "line.split", "int", "cols[].strip", "cols[].split"], "function", ["None"], ["def", "parse_topics", "(", "input_folder", ":", "str", ")", "->", "dict", ":", "\n", "    ", "files", "=", "os", ".", "listdir", "(", "input_folder", ")", "\n", "\n", "topic_dic", "=", "{", "}", "\n", "for", "file", "in", "files", ":", "\n", "# feature id in standard letor datasets start from 1.", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "input_folder", ",", "file", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "cols", "=", "line", ".", "split", "(", "\":\"", ")", "\n", "if", "\"-\"", "in", "cols", "[", "0", "]", ":", "\n", "                    ", "cols", "[", "0", "]", "=", "cols", "[", "0", "]", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "\n", "", "topic_id", "=", "int", "(", "cols", "[", "0", "]", ")", "\n", "query", "=", "cols", "[", "1", "]", ".", "strip", "(", ")", "\n", "topic_dic", "[", "topic_id", "]", "=", "query", "\n", "", "", "", "return", "topic_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.parser.parse_qrel": [[21, 33], ["open", "line.strip().split", "int", "int", "qrel_dic.keys", "line.strip"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "parse_qrel", "(", "path", ":", "str", ")", "->", "dict", ":", "\n", "    ", "qrel_dic", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "qid", ",", "_", ",", "docid", ",", "rel", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "rel", "=", "int", "(", "rel", ")", "\n", "qid", "=", "int", "(", "qid", ")", "\n", "if", "qid", "in", "qrel_dic", ".", "keys", "(", ")", ":", "\n", "                ", "qrel_dic", "[", "qid", "]", "[", "docid", "]", "=", "rel", "\n", "", "else", ":", "\n", "                ", "qrel_dic", "[", "qid", "]", "=", "{", "docid", ":", "rel", "}", "\n", "", "", "", "return", "qrel_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.parser.get_relevant_docs_by_qid": [[35, 41], ["qrel_dic[].items", "rel_docs.append"], "function", ["None"], ["", "def", "get_relevant_docs_by_qid", "(", "qrel_dic", ":", "dict", ",", "qid", ":", "str", ")", "->", "list", ":", "\n", "    ", "rel_docs", "=", "[", "]", "\n", "for", "docid", ",", "rel", "in", "qrel_dic", "[", "qid", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "rel", ">", "0", ":", "\n", "            ", "rel_docs", ".", "append", "(", "docid", ")", "\n", "", "", "return", "rel_docs", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.parser.write_qrel": [[43, 51], ["qrel_dic.keys", "qrel_dic1[].items", "open", "f.write"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.write"], ["", "def", "write_qrel", "(", "qrel_dic", ":", "dict", ",", "path", ":", "str", ",", "intent", ":", "int", ")", ":", "\n", "    ", "s", "=", "''", "\n", "for", "qid", "in", "qrel_dic", ".", "keys", "(", ")", ":", "\n", "        ", "for", "docid", ",", "rel", "in", "qrel_dic1", "[", "qid", "]", ".", "items", "(", ")", ":", "\n", "            ", "s", "+=", "'{} {} {} {}\\n'", ".", "format", "(", "qid", ",", "intent", ",", "docid", ",", "rel", ")", "\n", "\n", "", "", "with", "open", "(", "path", "+", "\"{}.txt\"", ".", "format", "(", "intent", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.parser.make_exclusive": [[53, 68], ["range", "len", "parser.parse_qrel", "range", "len", "parser.parse_qrel", "parse_qrel.keys", "parser.get_relevant_docs_by_qid", "parser.get_relevant_docs_by_qid"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.parser.parse_qrel", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.parser.parse_qrel", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.parser.get_relevant_docs_by_qid", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.parser.get_relevant_docs_by_qid"], ["", "", "def", "make_exclusive", "(", ")", ":", "\n", "    ", "topics", "=", "[", "\"1.txt\"", ",", "\"2.txt\"", ",", "\"3.txt\"", ",", "\"4.txt\"", "]", "\n", "for", "topic1", "in", "range", "(", "len", "(", "topics", ")", ")", ":", "\n", "        ", "qrel_dic1", "=", "parse_qrel", "(", "topics", "[", "topic1", "]", ")", "\n", "for", "topic2", "in", "range", "(", "len", "(", "topics", ")", ")", ":", "\n", "            ", "qrel_dic2", "=", "parse_qrel", "(", "topics", "[", "topic2", "]", ")", "\n", "num_overlap", "=", "0", "\n", "\n", "for", "qid", "in", "qrel_dic1", ".", "keys", "(", ")", ":", "\n", "                ", "rel_docs1", "=", "get_relevant_docs_by_qid", "(", "qrel_dic1", ",", "qid", ")", "\n", "rel_docs2", "=", "get_relevant_docs_by_qid", "(", "qrel_dic2", ",", "qid", ")", "\n", "for", "docid", "in", "rel_docs1", ":", "\n", "\n", "                    ", "if", "docid", "in", "rel_docs2", ":", "\n", "                        ", "num_overlap", "+=", "1", "\n", "#                 if topic1 != topic2:", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_COLTR_abrupt_groups_change.run": [[15, 92], ["train_intents[].get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "ranker.sample_unit_vectors", "ranker.sample_canditate_rankers", "ranker.infer_winners", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "len", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "ranker.get_current_weights", "ranker.update", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "range", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "range", "numpy.where", "numpy.sum", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "int", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.sample_unit_vectors", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.sample_canditate_rankers", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.infer_winners", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.update", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_intents", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "num_rankers", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "\n", "query_set", "=", "train_intents", "[", "0", "]", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "\n", "current_train_set", "=", "train_intents", "[", "0", "]", "\n", "\n", "for", "i", "in", "index", ":", "\n", "        ", "if", "num_iter", "%", "50000", "==", "0", "and", "num_iter", ">", "0", ":", "\n", "# print(\"Change intent to\", int(num_iter/10000))", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "current_train_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "0", "]", ".", "append", "(", "ndcg", ")", "\n", "current_train_set", "=", "train_intents", "[", "int", "(", "num_iter", "/", "50000", ")", "]", "\n", "\n", "\n", "", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "current_train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "current_train_set", ")", "\n", "\n", "# if no clicks, skip.", "\n", "if", "len", "(", "clicked_doc", ")", "==", "0", ":", "\n", "            ", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "current_train_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "0", "]", ".", "append", "(", "ndcg", ")", "\n", "\n", "for", "intent", "in", "range", "(", "4", ")", ":", "\n", "                    ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "train_intents", "[", "intent", "]", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "train_intents", "[", "intent", "]", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "intent", "+", "1", "]", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "current_train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "# print(num_inter, ndcg, \"continue\")", "\n", "num_iter", "+=", "1", "\n", "continue", "\n", "\n", "# flip click label. exp: [1,0,1,0,0] -> [0,1,0,0,0]", "\n", "", "last_click", "=", "np", ".", "where", "(", "click_label", "==", "1", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "click_label", "[", ":", "last_click", "+", "1", "]", "=", "1", "-", "click_label", "[", ":", "last_click", "+", "1", "]", "\n", "\n", "# bandit record", "\n", "record", "=", "(", "qid", ",", "result_list", ",", "click_label", ",", "ranker", ".", "get_current_weights", "(", ")", ")", "\n", "\n", "unit_vectors", "=", "ranker", ".", "sample_unit_vectors", "(", "num_rankers", ")", "\n", "canditate_rankers", "=", "ranker", ".", "sample_canditate_rankers", "(", "\n", "unit_vectors", ")", "# canditate_rankers are ranker weights, not ranker class", "\n", "\n", "# winner_rankers are index of candidates rankers who win the evaluation", "\n", "winner_rankers", "=", "ranker", ".", "infer_winners", "(", "canditate_rankers", "[", ":", "num_rankers", "]", ",", "\n", "record", ")", "\n", "\n", "if", "winner_rankers", "is", "not", "None", ":", "\n", "            ", "gradient", "=", "np", ".", "sum", "(", "unit_vectors", "[", "winner_rankers", "-", "1", "]", ",", "axis", "=", "0", ")", "/", "winner_rankers", ".", "shape", "[", "0", "]", "\n", "ranker", ".", "update", "(", "gradient", ")", "\n", "\n", "", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "current_train_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "0", "]", ".", "append", "(", "ndcg", ")", "\n", "\n", "for", "intent", "in", "range", "(", "4", ")", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "train_intents", "[", "intent", "]", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "train_intents", "[", "intent", "]", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "intent", "+", "1", "]", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "current_train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "# print(num_inter, ndcg)", "\n", "num_iter", "+=", "1", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_COLTR_abrupt_groups_change.job": [[94, 142], ["clickModel.SDBN.SDBN", "range", "random.seed", "numpy.random.seed", "utils.utility.get_groups_dataset", "ranker.COLTRLinearRanker.COLTRLinearRanker", "print", "run_COLTR_abrupt_groups_change.run", "os.makedirs", "range", "print", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump", "os.makedirs", "len", "os.path.dirname", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_groups_dataset", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "intent_paths", ",", "tau", ",", "step_size", ",", "gamma", ",", "num_rankers", ",", "learning_rate_decay", ",", "output_fold", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", "]", "\n", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.9", "]", "\n", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.3", ",", "0.7", "]", "\n", "ps", "=", "[", "0.1", ",", "0.5", "]", "\n", "# cm = PBM(pc, 1)", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "        ", "random", ".", "seed", "(", "r", ")", "\n", "np", ".", "random", ".", "seed", "(", "r", ")", "\n", "datasets", "=", "get_groups_dataset", "(", "train_set", ",", "intent_paths", ")", "\n", "ranker", "=", "COLTRLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "step_size", ",", "tau", ",", "gamma", ",", "learning_rate_decay", "=", "learning_rate_decay", ")", "\n", "\n", "print", "(", "\"COLTR intent change {} fold{} run{} start!\"", ".", "format", "(", "model_type", ",", "f", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "datasets", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "num_rankers", ")", "\n", "\n", "# create directory if not exist", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/current_intent/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "\n", "\"{}/current_intent/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "with", "open", "(", "\n", "\"{}/current_intent/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", "[", "0", "]", ",", "fp", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "ndcg_scores", ")", "-", "1", ")", ":", "# the intent ndcg start from 1.", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/intent{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist\\", "\n", "\n", "with", "open", "(", "\n", "\"{}/intent{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "ndcg_scores", "[", "i", "+", "1", "]", ",", "fp", ")", "\n", "\n", "", "", "print", "(", "\"COLTR intent change {} run{} finish!\"", ".", "format", "(", "model_type", ",", "r", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.__init__": [[25, 34], ["pyserini.index.pyutils.IndexReaderUtils"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "index_path", ":", "str", ",", "analyzer", ")", ":", "\n", "        ", "\"\"\"\n        :param index_path: path to anserini index.\n        :param analyzer: lucene analyzer, suppose to be the same as used in the indexing.\n        \"\"\"", "\n", "self", ".", "index_utils", "=", "pyutils", ".", "IndexReaderUtils", "(", "index_path", ")", "\n", "self", ".", "reader", "=", "self", ".", "index_utils", ".", "reader", "\n", "self", ".", "analyzer", "=", "analyzer", "\n", "self", ".", "feature_description", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.add_feature_description": [[35, 37], ["featureExtractor.FeatureExtractor.feature_description.append"], "methods", ["None"], ["", "def", "add_feature_description", "(", "self", ",", "description", ":", "str", ")", ":", "\n", "        ", "self", ".", "feature_description", ".", "append", "(", "description", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor._analyze_query": [[38, 45], ["featureExtractor.FeatureExtractor.index_utils.analyze"], "methods", ["None"], ["", "def", "_analyze_query", "(", "self", ",", "query", ":", "str", ")", "->", "list", ":", "\n", "        ", "\"\"\"\n        stem and tokenize query string by using self lucene analyzer.\n        :param query: query string\n        :return: list of tokens.\n        \"\"\"", "\n", "return", "self", ".", "index_utils", ".", "analyze", "(", "query", ",", "analyzer", "=", "self", ".", "analyzer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.get_field_length": [[46, 61], ["featureExtractor.FeatureExtractor.values", "featureExtractor.FeatureExtractor.index_utils.get_document_vector_by_field"], "methods", ["None"], ["", "def", "get_field_length", "(", "self", ",", "docid", ":", "str", ",", "field", ":", "str", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Extract field length by given docid.\n        :param docid: docid, unique document id in index.\n        :param field: document field want to extract.\n        :return: field length\n        \"\"\"", "\n", "try", ":", "\n", "            ", "field_vector", "=", "self", ".", "index_utils", ".", "get_document_vector_by_field", "(", "docid", ",", "field", ")", "\n", "", "except", ":", "\n", "            ", "return", "0", "\n", "", "num_term", "=", "0", "\n", "for", "v", "in", "field_vector", ".", "values", "(", ")", ":", "\n", "            ", "num_term", "+=", "v", "\n", "", "return", "num_term", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.get_query_length": [[62, 69], ["len", "featureExtractor.FeatureExtractor._analyze_query"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor._analyze_query"], ["", "def", "get_query_length", "(", "self", ",", "query", ":", "str", ")", "->", "int", ":", "\n", "        ", "\"\"\"\n        Get query length, maybe not useful for LTR as the value won't change for a same topic.\n        :param query: raw query string\n        :return: query length\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "_analyze_query", "(", "query", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.get_tf": [[70, 81], ["featureExtractor.FeatureExtractor._analyze_query", "featureExtractor.FeatureExtractor.index_utils.get_document_vector_by_field", "featureExtractor.FeatureExtractor.keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor._analyze_query", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "get_tf", "(", "self", ",", "query", ":", "str", ",", "docid", ":", "str", ",", "field", ":", "str", ")", "->", "int", ":", "\n", "        ", "query_tokens", "=", "self", ".", "_analyze_query", "(", "query", ")", "\n", "try", ":", "\n", "            ", "field_vector", "=", "self", ".", "index_utils", ".", "get_document_vector_by_field", "(", "docid", ",", "field", ")", "\n", "", "except", ":", "\n", "            ", "return", "0", "\n", "", "tf", "=", "0", "\n", "for", "token", "in", "query_tokens", ":", "\n", "            ", "if", "token", "in", "field_vector", ".", "keys", "(", ")", ":", "\n", "                ", "tf", "+=", "field_vector", "[", "token", "]", "\n", "", "", "return", "tf", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.get_idf": [[82, 96], ["featureExtractor.FeatureExtractor.reader.getDocCount", "featureExtractor.FeatureExtractor._analyze_query", "JString", "featureExtractor.FeatureExtractor.index_utils.object.getDocFreq", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor._analyze_query"], ["", "def", "get_idf", "(", "self", ",", "query", ":", "str", ",", "field", ":", "str", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Get sum idf of a given query, maybe not useful for LTR as the value won't change for a same topic.\n        :param query: raw query string\n        :param field: field want to compute.\n        :return:\n        \"\"\"", "\n", "N", "=", "self", ".", "reader", ".", "getDocCount", "(", "JString", "(", "field", ")", ")", "# total num of docs.", "\n", "query_tokens", "=", "self", ".", "_analyze_query", "(", "query", ")", "\n", "idf", "=", "0", "\n", "for", "token", "in", "query_tokens", ":", "\n", "            ", "n", "=", "self", ".", "index_utils", ".", "object", ".", "getDocFreq", "(", "self", ".", "reader", ",", "token", ",", "field", ")", "\n", "idf", "+=", "np", ".", "log", "(", "N", "/", "(", "1", "+", "n", ")", ")", "\n", "", "return", "idf", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.get_tfidf": [[97, 112], ["featureExtractor.FeatureExtractor._analyze_query", "featureExtractor.FeatureExtractor.reader.getDocCount", "featureExtractor.FeatureExtractor.index_utils.get_document_vector_by_field", "JString", "featureExtractor.FeatureExtractor.keys", "featureExtractor.FeatureExtractor.index_utils.object.getDocFreq", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor._analyze_query", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "get_tfidf", "(", "self", ",", "query", ":", "str", ",", "docid", ":", "str", ",", "field", ":", "str", ")", "->", "float", ":", "\n", "        ", "query_tokens", "=", "self", ".", "_analyze_query", "(", "query", ")", "\n", "try", ":", "\n", "            ", "field_vector", "=", "self", ".", "index_utils", ".", "get_document_vector_by_field", "(", "docid", ",", "field", ")", "\n", "", "except", ":", "\n", "            ", "return", "0", "\n", "", "N", "=", "self", ".", "reader", ".", "getDocCount", "(", "JString", "(", "field", ")", ")", "# total num of docs.", "\n", "tfidf", "=", "0", "\n", "for", "token", "in", "query_tokens", ":", "\n", "            ", "if", "token", "in", "field_vector", ".", "keys", "(", ")", ":", "\n", "                ", "tf", "=", "field_vector", "[", "token", "]", "\n", "n", "=", "self", ".", "index_utils", ".", "object", ".", "getDocFreq", "(", "self", ".", "reader", ",", "token", ",", "field", ")", "\n", "idf", "=", "np", ".", "log", "(", "N", "/", "(", "1", "+", "n", ")", ")", "\n", "tfidf", "+=", "tf", "*", "idf", "\n", "", "", "return", "tfidf", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.get_query_cover_num": [[113, 124], ["featureExtractor.FeatureExtractor._analyze_query", "featureExtractor.FeatureExtractor.index_utils.get_document_vector_by_field", "featureExtractor.FeatureExtractor.keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor._analyze_query", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "get_query_cover_num", "(", "self", ",", "query", ":", "str", ",", "docid", ":", "str", ",", "field", ":", "str", ")", "->", "float", ":", "\n", "        ", "tokens", "=", "self", ".", "_analyze_query", "(", "query", ")", "\n", "try", ":", "\n", "            ", "field_vector", "=", "self", ".", "index_utils", ".", "get_document_vector_by_field", "(", "docid", ",", "field", ")", "\n", "", "except", ":", "\n", "            ", "return", "0", "\n", "", "cover_num", "=", "0", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "if", "token", "in", "field_vector", ".", "keys", "(", ")", ":", "\n", "                ", "cover_num", "+=", "1", "\n", "", "", "return", "cover_num", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.get_query_cover_ratio": [[125, 136], ["featureExtractor.FeatureExtractor._analyze_query", "featureExtractor.FeatureExtractor.index_utils.get_document_vector_by_field", "len", "featureExtractor.FeatureExtractor.keys"], "methods", ["home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor._analyze_query", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys"], ["", "def", "get_query_cover_ratio", "(", "self", ",", "query", ":", "str", ",", "docid", ":", "str", ",", "field", ":", "str", ")", "->", "float", ":", "\n", "        ", "tokens", "=", "self", ".", "_analyze_query", "(", "query", ")", "\n", "try", ":", "\n", "            ", "field_vector", "=", "self", ".", "index_utils", ".", "get_document_vector_by_field", "(", "docid", ",", "field", ")", "\n", "", "except", ":", "\n", "            ", "return", "0", "\n", "", "cover_num", "=", "0", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "if", "token", "in", "field_vector", ".", "keys", "(", ")", ":", "\n", "                ", "cover_num", "+=", "1", "\n", "", "", "return", "cover_num", "/", "len", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.featureExtractor.FeatureExtractor.get_fieldFeature": [[137, 154], ["featureExtractor.FeatureExtractor.index_utils.object.getFieldFeature", "JString", "JString", "JString", "JString", "query.encode"], "methods", ["None"], ["", "def", "get_fieldFeature", "(", "self", ",", "query", ":", "str", ",", "docid", ":", "str", ",", "field", ":", "str", ",", "method", ":", "str", ",", "sdm", "=", "False", ",", "slop", "=", "1", ",", "inOder", "=", "False", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        :param query: raw query string.\n        :param docid: unique document id.\n        :param field: document field.\n        :param method: feature model, options: BM25, Dirichlet, JelinekMercer.\n        :param sdm: using Sequential Dependence Model?\n        :param slop: parameter of sdm: https://lucene.apache.org/core/7_3_0/core/org/apache/lucene/search/spans/SpanNearQuery.html\n        :param inOder: parameter of sdm: https://lucene.apache.org/core/7_3_0/core/org/apache/lucene/search/spans/SpanNearQuery.html\n        :return: feature value.\n        \"\"\"", "\n", "return", "self", ".", "index_utils", ".", "object", ".", "getFieldFeature", "(", "self", ".", "reader", ",", "\n", "JString", "(", "docid", ")", ",", "\n", "JString", "(", "field", ")", ",", "\n", "JString", "(", "query", ".", "encode", "(", "'utf-8'", ")", ")", ",", "\n", "self", ".", "analyzer", ",", "JString", "(", "method", ")", ",", "\n", "sdm", ",", "slop", ",", "inOder", ")", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PMGD_abrupt_groups_change.run": [[17, 80], ["train_set.get_all_querys", "numpy.random.randint", "current_train_set.get_all_features_by_query", "rankers.append", "range", "ranker.probabilistic_multileave", "click_model.simulate", "ranker.probabilistic_multileave_outcome", "numpy.where", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "ranker.get_new_candidate", "rankers.append", "us.append", "numpy.zeros", "ranker.update_weights", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "range", "ranker.get_current_weights", "numpy.array", "numpy.shape", "ranker.get_current_weights", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "int", "numpy.shape", "ranker.get_current_weights"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.probabilistic_multileave", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.probabilistic_multileave_outcome", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.get_new_candidate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.update_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights"], ["def", "run", "(", "train_intents", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "num_rankers", ")", ":", "\n", "\n", "    ", "ndcg_scores", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "\n", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "\n", "current_train_set", "=", "train_intents", "[", "0", "]", "\n", "\n", "for", "i", "in", "index", ":", "\n", "        ", "if", "num_iter", "%", "50000", "==", "0", "and", "num_iter", ">", "0", ":", "\n", "# print(\"Change intent to\", int(num_iter/10000))", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "current_train_set", ",", "ranker", ".", "get_current_weights", "(", ")", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "0", "]", ".", "append", "(", "ndcg", ")", "\n", "\n", "current_train_set", "=", "train_intents", "[", "int", "(", "num_iter", "/", "50000", ")", "]", "\n", "\n", "\n", "", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "query_features", "=", "current_train_set", ".", "get_all_features_by_query", "(", "qid", ")", "\n", "rankers", "=", "[", "]", "\n", "us", "=", "[", "]", "\n", "rankers", ".", "append", "(", "ranker", ")", "\n", "for", "i", "in", "range", "(", "num_rankers", ")", ":", "\n", "            ", "new_ranker", ",", "new_u", "=", "ranker", ".", "get_new_candidate", "(", ")", "\n", "rankers", ".", "append", "(", "new_ranker", ")", "\n", "us", ".", "append", "(", "new_u", ")", "\n", "\n", "", "(", "inter_list", ",", "a", ")", "=", "ranker", ".", "probabilistic_multileave", "(", "rankers", ",", "query_features", ",", "10", ")", "\n", "\n", "_", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "inter_list", ",", "current_train_set", ")", "\n", "\n", "outcome", "=", "ranker", ".", "probabilistic_multileave_outcome", "(", "inter_list", ",", "rankers", ",", "click_label", ",", "query_features", ")", "\n", "winners", "=", "np", ".", "where", "(", "np", ".", "array", "(", "outcome", ")", ">", "outcome", "[", "0", "]", ")", "\n", "\n", "if", "np", ".", "shape", "(", "winners", ")", "[", "1", "]", "!=", "0", ":", "\n", "            ", "u", "=", "np", ".", "zeros", "(", "ranker", ".", "feature_size", ")", "\n", "for", "winner", "in", "winners", "[", "0", "]", ":", "\n", "                ", "u", "+=", "us", "[", "winner", "-", "1", "]", "\n", "", "u", "=", "u", "/", "np", ".", "shape", "(", "winners", ")", "[", "1", "]", "\n", "ranker", ".", "update_weights", "(", "u", ",", "alpha", "=", "ranker", ".", "learning_rate", ")", "\n", "\n", "", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "current_train_set", ",", "ranker", ".", "get_current_weights", "(", ")", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "0", "]", ".", "append", "(", "ndcg", ")", "\n", "\n", "for", "intent", "in", "range", "(", "4", ")", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "train_intents", "[", "intent", "]", ",", "ranker", ".", "get_current_weights", "(", ")", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "train_intents", "[", "intent", "]", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "intent", "+", "1", "]", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "current_train_set", ",", "inter_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "\n", "num_iter", "+=", "1", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PMGD_abrupt_groups_change.job": [[82, 129], ["clickModel.SDBN.SDBN", "range", "random.seed", "numpy.random.seed", "utils.utility.get_groups_dataset", "ranker.ProbabilisticRanker.ProbabilisticRanker", "print", "run_PMGD_abrupt_groups_change.run", "os.makedirs", "range", "print", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump", "os.makedirs", "len", "os.path.dirname", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_groups_dataset", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "intent_paths", ",", "delta", ",", "alpha", ",", "FEATURE_SIZE", ",", "num_rankers", ",", "output_fold", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", "]", "\n", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.9", "]", "\n", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.3", ",", "0.7", "]", "\n", "ps", "=", "[", "0.1", ",", "0.5", "]", "\n", "# cm = PBM(pc, 1)", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "        ", "random", ".", "seed", "(", "r", ")", "\n", "np", ".", "random", ".", "seed", "(", "r", ")", "\n", "datasets", "=", "get_groups_dataset", "(", "train_set", ",", "intent_paths", ")", "\n", "ranker", "=", "ProbabilisticRanker", "(", "delta", ",", "alpha", ",", "FEATURE_SIZE", ")", "\n", "\n", "print", "(", "\"PMGD intent change {} fold{} run{} start!\"", ".", "format", "(", "model_type", ",", "f", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "datasets", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "num_rankers", ")", "\n", "\n", "# create directory if not exist", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/current_intent/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "\n", "\"{}/current_intent/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "with", "open", "(", "\n", "\"{}/current_intent/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", "[", "0", "]", ",", "fp", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "ndcg_scores", ")", "-", "1", ")", ":", "# the intent ndcg start from 1.", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/intent{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist\\", "\n", "\n", "with", "open", "(", "\n", "\"{}/intent{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "ndcg_scores", "[", "i", "+", "1", "]", ",", "fp", ")", "\n", "\n", "", "", "print", "(", "\"PMGD intent change {} run{} finish!\"", ".", "format", "(", "model_type", ",", "r", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_COLTR_groups_fixed.run": [[15, 74], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "ranker.sample_unit_vectors", "ranker.sample_canditate_rankers", "ranker.infer_winners", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "len", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "ranker.get_current_weights", "ranker.update", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "numpy.where", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.sample_unit_vectors", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.sample_canditate_rankers", "home.repos.pwc.inspect_result.ielab_oltr.ranker.COLTRLinearRanker.COLTRLinearRanker.infer_winners", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.update", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "num_rankers", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "\n", "current_train_set", "=", "train_set", "\n", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", "=", "ranker", ".", "get_query_result_list", "(", "current_train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "current_train_set", ")", "\n", "\n", "# if no clicks, skip.", "\n", "if", "len", "(", "clicked_doc", ")", "==", "0", ":", "\n", "            ", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "current_train_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "current_train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "# print(num_inter, ndcg, \"continue\")", "\n", "num_iter", "+=", "1", "\n", "continue", "\n", "\n", "# flip click label. exp: [1,0,1,0,0] -> [0,1,0,0,0]", "\n", "", "last_click", "=", "np", ".", "where", "(", "click_label", "==", "1", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "click_label", "[", ":", "last_click", "+", "1", "]", "=", "1", "-", "click_label", "[", ":", "last_click", "+", "1", "]", "\n", "\n", "# bandit record", "\n", "record", "=", "(", "qid", ",", "result_list", ",", "click_label", ",", "ranker", ".", "get_current_weights", "(", ")", ")", "\n", "\n", "unit_vectors", "=", "ranker", ".", "sample_unit_vectors", "(", "num_rankers", ")", "\n", "canditate_rankers", "=", "ranker", ".", "sample_canditate_rankers", "(", "\n", "unit_vectors", ")", "# canditate_rankers are ranker weights, not ranker class", "\n", "\n", "# winner_rankers are index of candidates rankers who win the evaluation", "\n", "winner_rankers", "=", "ranker", ".", "infer_winners", "(", "canditate_rankers", "[", ":", "num_rankers", "]", ",", "\n", "record", ")", "\n", "\n", "if", "winner_rankers", "is", "not", "None", ":", "\n", "            ", "gradient", "=", "np", ".", "sum", "(", "unit_vectors", "[", "winner_rankers", "-", "1", "]", ",", "axis", "=", "0", ")", "/", "winner_rankers", ".", "shape", "[", "0", "]", "\n", "ranker", ".", "update", "(", "gradient", ")", "\n", "\n", "", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "current_train_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "current_train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "# print(num_inter, ndcg)", "\n", "num_iter", "+=", "1", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_COLTR_groups_fixed.job": [[76, 116], ["clickModel.SDBN.SDBN", "range", "random.seed", "numpy.random.seed", "utils.utility.get_groups_dataset", "range", "len", "ranker.COLTRLinearRanker.COLTRLinearRanker", "print", "run_COLTR_groups_fixed.run", "os.makedirs", "print", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_groups_dataset", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "intent_paths", ",", "tau", ",", "step_size", ",", "gamma", ",", "num_rankers", ",", "learning_rate_decay", ",", "output_fold", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", "]", "\n", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.9", "]", "\n", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.3", ",", "0.7", "]", "\n", "ps", "=", "[", "0.1", ",", "0.5", "]", "\n", "# cm = PBM(pc, 1)", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "        ", "random", ".", "seed", "(", "r", ")", "\n", "np", ".", "random", ".", "seed", "(", "r", ")", "\n", "datasets", "=", "get_groups_dataset", "(", "train_set", ",", "intent_paths", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "datasets", ")", ")", ":", "\n", "            ", "ranker", "=", "COLTRLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "step_size", ",", "tau", ",", "gamma", ",", "learning_rate_decay", "=", "learning_rate_decay", ")", "\n", "\n", "print", "(", "\"COLTR fixed intent {} fold{} run{} start!\"", ".", "format", "(", "model_type", ",", "f", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "datasets", "[", "i", "]", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "num_rankers", ")", "\n", "\n", "# create directory if not exist", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/group{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "\n", "\"{}/group{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/group{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "print", "(", "\"COLTR fixed intent {} run{} finish!\"", ".", "format", "(", "model_type", ",", "r", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PMGD_groups_fixed.run": [[16, 63], ["train_set.get_all_querys", "numpy.random.randint", "current_train_set.get_all_features_by_query", "rankers.append", "range", "ranker.probabilistic_multileave", "click_model.simulate", "ranker.probabilistic_multileave_outcome", "numpy.where", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "ranker.get_new_candidate", "rankers.append", "us.append", "numpy.zeros", "ranker.update_weights", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append", "numpy.array", "numpy.shape", "ranker.get_current_weights", "numpy.shape"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.probabilistic_multileave", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NESLinearRanker.NESLinearRanker.probabilistic_multileave_outcome", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.get_new_candidate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.ProbabilisticRanker.ProbabilisticRanker.update_weights", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_current_weights"], ["def", "run", "(", "train_set", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "num_rankers", ")", ":", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "\n", "current_train_set", "=", "train_set", "\n", "\n", "for", "i", "in", "index", ":", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "\n", "query_features", "=", "current_train_set", ".", "get_all_features_by_query", "(", "qid", ")", "\n", "rankers", "=", "[", "]", "\n", "us", "=", "[", "]", "\n", "rankers", ".", "append", "(", "ranker", ")", "\n", "for", "i", "in", "range", "(", "num_rankers", ")", ":", "\n", "            ", "new_ranker", ",", "new_u", "=", "ranker", ".", "get_new_candidate", "(", ")", "\n", "rankers", ".", "append", "(", "new_ranker", ")", "\n", "us", ".", "append", "(", "new_u", ")", "\n", "\n", "", "(", "inter_list", ",", "a", ")", "=", "ranker", ".", "probabilistic_multileave", "(", "rankers", ",", "query_features", ",", "10", ")", "\n", "\n", "_", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "inter_list", ",", "current_train_set", ")", "\n", "\n", "outcome", "=", "ranker", ".", "probabilistic_multileave_outcome", "(", "inter_list", ",", "rankers", ",", "click_label", ",", "query_features", ")", "\n", "winners", "=", "np", ".", "where", "(", "np", ".", "array", "(", "outcome", ")", ">", "outcome", "[", "0", "]", ")", "\n", "\n", "if", "np", ".", "shape", "(", "winners", ")", "[", "1", "]", "!=", "0", ":", "\n", "            ", "u", "=", "np", ".", "zeros", "(", "ranker", ".", "feature_size", ")", "\n", "for", "winner", "in", "winners", "[", "0", "]", ":", "\n", "                ", "u", "+=", "us", "[", "winner", "-", "1", "]", "\n", "", "u", "=", "u", "/", "np", ".", "shape", "(", "winners", ")", "[", "1", "]", "\n", "ranker", ".", "update_weights", "(", "u", ",", "alpha", "=", "ranker", ".", "learning_rate", ")", "\n", "\n", "", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "current_train_set", ",", "ranker", ".", "get_current_weights", "(", ")", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "current_train_set", ",", "inter_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "\n", "num_iter", "+=", "1", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PMGD_groups_fixed.job": [[65, 104], ["clickModel.SDBN.SDBN", "range", "random.seed", "numpy.random.seed", "utils.utility.get_groups_dataset", "range", "len", "ranker.ProbabilisticRanker.ProbabilisticRanker", "print", "run_PMGD_groups_fixed.run", "os.makedirs", "print", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_groups_dataset", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "f", ",", "train_set", ",", "intent_paths", ",", "delta", ",", "alpha", ",", "FEATURE_SIZE", ",", "num_rankers", ",", "output_fold", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", "]", "\n", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.9", "]", "\n", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.3", ",", "0.7", "]", "\n", "ps", "=", "[", "0.1", ",", "0.5", "]", "\n", "# cm = PBM(pc, 1)", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "        ", "random", ".", "seed", "(", "r", ")", "\n", "np", ".", "random", ".", "seed", "(", "r", ")", "\n", "datasets", "=", "get_groups_dataset", "(", "train_set", ",", "intent_paths", ")", "\n", "# create directory if not exist", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "datasets", ")", ")", ":", "\n", "            ", "ranker", "=", "ProbabilisticRanker", "(", "delta", ",", "alpha", ",", "FEATURE_SIZE", ")", "\n", "\n", "print", "(", "\"PDGD intent fixed {} intent {} run{} start!\"", ".", "format", "(", "model_type", ",", "i", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "datasets", "[", "i", "]", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "num_rankers", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/group{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "\n", "\"{}/group{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/group{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "print", "(", "\"PDGD intent fixed {} intent {} run{} finished!\"", ".", "format", "(", "model_type", ",", "i", ",", "r", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PDGD_abrupt_smooth.run": [[17, 76], ["range", "train_intents[].get_all_querys", "numpy.random.randint", "ndcg_scores.append", "ranker.get_query_result_list", "click_model.simulate", "ranker.update_to_clicks", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "len", "range", "numpy.array", "numpy.sum", "ndcg_scores[].append", "range", "numpy.random.choice", "current_train_set.get_all_features_by_query", "range", "numpy.array", "numpy.sum", "ndcg_scores[].append", "len", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "np.sum.append", "len", "len", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores[].append", "np.sum.append", "int"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_features_by_query", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_intents", ",", "ranker", ",", "num_interation", ",", "click_model", ",", "group_sequence", ")", ":", "\n", "    ", "intents_probs", "=", "[", "0.7", ",", "0.1", ",", "0.1", ",", "0.1", "]", "\n", "\n", "ndcg_scores", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "len", "(", "train_intents", ")", "+", "1", ")", ":", "\n", "        ", "ndcg_scores", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "cndcg_scores", "=", "[", "]", "\n", "\n", "query_set", "=", "train_intents", "[", "0", "]", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "num_iter", "=", "0", "\n", "\n", "\n", "for", "i", "in", "index", ":", "\n", "        ", "if", "num_iter", "%", "50000", "==", "0", "and", "num_iter", ">", "0", ":", "\n", "            ", "over_all_ndcg", "=", "[", "]", "\n", "for", "intent", "in", "range", "(", "len", "(", "train_intents", ")", ")", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "train_intents", "[", "intent", "]", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "train_intents", "[", "intent", "]", ",", "all_result", ",", "10", ")", "\n", "over_all_ndcg", ".", "append", "(", "ndcg", ")", "\n", "", "over_all_ndcg", "=", "np", ".", "array", "(", "over_all_ndcg", ")", "\n", "over_all_ndcg", "=", "np", ".", "sum", "(", "over_all_ndcg", "*", "intents_probs", ")", "\n", "ndcg_scores", "[", "0", "]", ".", "append", "(", "over_all_ndcg", ")", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "intents_probs", ")", ")", ":", "\n", "                ", "if", "int", "(", "num_iter", "/", "50000", ")", "==", "k", ":", "\n", "                    ", "intents_probs", "[", "k", "]", "=", "0.7", "\n", "", "else", ":", "\n", "                    ", "intents_probs", "[", "k", "]", "=", "0.1", "\n", "\n", "", "", "", "current_intent", "=", "np", ".", "random", ".", "choice", "(", "4", ",", "1", ",", "p", "=", "intents_probs", ")", "[", "0", "]", "\n", "current_train_set", "=", "train_intents", "[", "current_intent", "]", "\n", "\n", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", ",", "scores", "=", "ranker", ".", "get_query_result_list", "(", "current_train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "current_train_set", ")", "\n", "\n", "ranker", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores", ",", "current_train_set", ".", "get_all_features_by_query", "(", "qid", ")", ")", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "over_all_ndcg", "=", "[", "]", "\n", "for", "intent", "in", "range", "(", "len", "(", "train_intents", ")", ")", ":", "\n", "                ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "train_intents", "[", "intent", "]", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "train_intents", "[", "intent", "]", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", "[", "intent", "+", "1", "]", ".", "append", "(", "ndcg", ")", "\n", "over_all_ndcg", ".", "append", "(", "ndcg", ")", "\n", "", "over_all_ndcg", "=", "np", ".", "array", "(", "over_all_ndcg", ")", "\n", "over_all_ndcg", "=", "np", ".", "sum", "(", "over_all_ndcg", "*", "intents_probs", ")", "\n", "ndcg_scores", "[", "0", "]", ".", "append", "(", "over_all_ndcg", ")", "\n", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "current_train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "# print(num_iter, ndcg)", "\n", "num_iter", "+=", "1", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_PDGD_abrupt_smooth.job": [[78, 125], ["clickModel.SDBN.SDBN", "range", "random.seed", "numpy.random.seed", "utils.utility.get_groups_dataset", "ranker.PDGDLinearRanker.PDGDLinearRanker", "print", "run_PDGD_abrupt_smooth.run", "os.makedirs", "range", "print", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump", "os.makedirs", "len", "os.path.dirname", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_groups_dataset", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "Learning_rate", ",", "NUM_INTERACTION", ",", "f", ",", "train_set", ",", "intent_paths", ",", "output_fold", ",", "num_groups", ",", "group_sequence", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", "]", "\n", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.9", "]", "\n", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.3", ",", "0.7", "]", "\n", "ps", "=", "[", "0.1", ",", "0.5", "]", "\n", "# cm = PBM(pc, 1)", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "        ", "random", ".", "seed", "(", "r", ")", "\n", "np", ".", "random", ".", "seed", "(", "r", ")", "\n", "datasets", "=", "get_groups_dataset", "(", "train_set", ",", "intent_paths", ",", "num_groups", "=", "num_groups", ")", "\n", "ranker", "=", "PDGDLinearRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ")", "\n", "\n", "print", "(", "\"PDGD intent change {} fold{} run{} start!\"", ".", "format", "(", "model_type", ",", "f", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "datasets", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ",", "group_sequence", ")", "\n", "\n", "# create directory if not exist", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/current_intent/fold{}/\"", ".", "format", "(", "output_fold", ",", "f", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "\n", "\"{}/current_intent/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "with", "open", "(", "\n", "\"{}/current_intent/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "ndcg_scores", "[", "0", "]", ",", "fp", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "ndcg_scores", ")", "-", "1", ")", ":", "# the intent ndcg start from 1.", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/intent{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ")", ")", ",", "\n", "exist_ok", "=", "True", ")", "# create directory if not exist\\", "\n", "\n", "with", "open", "(", "\n", "\"{}/intent{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "ndcg_scores", "[", "i", "+", "1", "]", ",", "fp", ")", "\n", "\n", "", "", "print", "(", "\"PDGD intent change {} run{} finish!\"", ".", "format", "(", "model_type", ",", "r", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run": [[15, 46], ["train_set.get_all_querys", "numpy.random.randint", "ranker.get_query_result_list", "click_model.simulate", "ranker.update_to_clicks", "utils.evl_tool.query_ndcg_at_k", "cndcg_scores.append", "ranker.get_all_query_result_list", "utils.evl_tool.average_ndcg_at_k", "ndcg_scores.append"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.get_all_querys", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.clickModel.SDBN_reverse.SDBN_reverse.simulate", "home.repos.pwc.inspect_result.ielab_oltr.ranker.PDGDLinearRanker.PDGDLinearRanker.update_to_clicks", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.query_ndcg_at_k", "home.repos.pwc.inspect_result.ielab_oltr.ranker.NeuralRanker.NeuralRanker.get_all_query_result_list", "home.repos.pwc.inspect_result.ielab_oltr.utils.evl_tool.average_ndcg_at_k"], ["def", "run", "(", "train_set", ",", "ranker", ",", "num_interation", ",", "click_model", ")", ":", "\n", "\n", "    ", "ndcg_scores", "=", "[", "]", "\n", "cndcg_scores", "=", "[", "]", "\n", "\n", "query_set", "=", "train_set", ".", "get_all_querys", "(", ")", "\n", "index", "=", "np", ".", "random", ".", "randint", "(", "query_set", ".", "shape", "[", "0", "]", ",", "size", "=", "num_interation", ")", "\n", "\n", "num_iter", "=", "0", "\n", "current_train_set", "=", "train_set", "\n", "\n", "for", "i", "in", "index", ":", "\n", "\n", "        ", "qid", "=", "query_set", "[", "i", "]", "\n", "result_list", ",", "scores", "=", "ranker", ".", "get_query_result_list", "(", "current_train_set", ",", "qid", ")", "\n", "\n", "clicked_doc", ",", "click_label", ",", "_", "=", "click_model", ".", "simulate", "(", "qid", ",", "result_list", ",", "current_train_set", ")", "\n", "\n", "ranker", ".", "update_to_clicks", "(", "click_label", ",", "result_list", ",", "scores", ")", "\n", "\n", "if", "num_iter", "%", "1000", "==", "0", ":", "\n", "            ", "all_result", "=", "ranker", ".", "get_all_query_result_list", "(", "current_train_set", ")", "\n", "ndcg", "=", "evl_tool", ".", "average_ndcg_at_k", "(", "current_train_set", ",", "all_result", ",", "10", ")", "\n", "ndcg_scores", ".", "append", "(", "ndcg", ")", "\n", "\n", "", "cndcg", "=", "evl_tool", ".", "query_ndcg_at_k", "(", "current_train_set", ",", "result_list", ",", "qid", ",", "10", ")", "\n", "cndcg_scores", ".", "append", "(", "cndcg", ")", "\n", "\n", "num_iter", "+=", "1", "\n", "\n", "", "return", "ndcg_scores", ",", "cndcg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.job": [[48, 86], ["clickModel.SDBN.SDBN", "range", "random.seed", "numpy.random.seed", "utils.utility.get_groups_dataset", "range", "len", "ranker.PDGDNeuralRanker.PDGDNeuralRanker", "print", "run_deepPDGD_groups_fixed.run", "os.makedirs", "print", "print", "os.path.dirname", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.utility.get_groups_dataset", "home.repos.pwc.inspect_result.ielab_oltr.intent_change.run_deepPDGD_groups_fixed.run"], ["", "def", "job", "(", "model_type", ",", "Learning_rate", ",", "NUM_INTERACTION", ",", "f", ",", "train_set", ",", "intent_paths", ",", "output_fold", ",", "num_groups", ")", ":", "\n", "    ", "if", "model_type", "==", "\"perfect\"", ":", "\n", "        ", "pc", "=", "[", "0.0", ",", "1.0", "]", "\n", "ps", "=", "[", "0.0", ",", "0.0", "]", "\n", "\n", "", "elif", "model_type", "==", "\"navigational\"", ":", "\n", "        ", "pc", "=", "[", "0.05", ",", "0.95", "]", "\n", "ps", "=", "[", "0.2", ",", "0.9", "]", "\n", "\n", "", "elif", "model_type", "==", "\"informational\"", ":", "\n", "        ", "pc", "=", "[", "0.3", ",", "0.7", "]", "\n", "ps", "=", "[", "0.1", ",", "0.5", "]", "\n", "# cm = PBM(pc, 1)", "\n", "", "cm", "=", "SDBN", "(", "pc", ",", "ps", ")", "\n", "\n", "for", "r", "in", "range", "(", "1", ",", "26", ")", ":", "\n", "        ", "random", ".", "seed", "(", "r", ")", "\n", "np", ".", "random", ".", "seed", "(", "r", ")", "\n", "datasets", "=", "get_groups_dataset", "(", "train_set", ",", "intent_paths", ",", "num_groups", "=", "num_groups", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "datasets", ")", ")", ":", "\n", "            ", "ranker", "=", "PDGDNeuralRanker", "(", "FEATURE_SIZE", ",", "Learning_rate", ",", "[", "64", "]", ")", "\n", "\n", "print", "(", "\"PDGD intent fixed {} intent {} run{} start!\"", ".", "format", "(", "model_type", ",", "i", ",", "r", ")", ")", "\n", "ndcg_scores", ",", "cndcg_scores", "=", "run", "(", "datasets", "[", "i", "]", ",", "ranker", ",", "NUM_INTERACTION", ",", "cm", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "\"{}/group{}/fold{}/\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "\n", "\"{}/group{}/fold{}/{}_run{}_ndcg.txt\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "ndcg_scores", ",", "fp", ")", "\n", "", "with", "open", "(", "\n", "\"{}/group{}/fold{}/{}_run{}_cndcg.txt\"", ".", "format", "(", "output_fold", ",", "i", "+", "1", ",", "f", ",", "model_type", ",", "r", ")", ",", "\n", "\"wb\"", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "cndcg_scores", ",", "fp", ")", "\n", "\n", "", "print", "(", "\"PDGD intent fixed {} intent {} run{} finished!\"", ".", "format", "(", "model_type", ",", "i", ",", "r", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.add_feature.write_to_disk": [[2, 18], ["open", "query_doc_dict.keys", "query_doc_dict[].keys", "enumerate", "f.write"], "function", ["home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.utils.storage.RedisStorage.keys", "home.repos.pwc.inspect_result.ielab_oltr.dataset.LetorDataset.LetorDataset.write"], ["def", "write_to_disk", "(", "path", ",", "query_doc_dict", ")", ":", "\n", "\n", "    ", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "query", "in", "query_doc_dict", ".", "keys", "(", ")", ":", "\n", "            ", "for", "docid", "in", "query_doc_dict", "[", "query", "]", ".", "keys", "(", ")", ":", "\n", "                ", "s", "=", "\"\"", "\n", "label", ",", "features", "=", "query_doc_dict", "[", "query", "]", "[", "docid", "]", "\n", "\n", "\n", "features_str", "=", "\"\"", "\n", "for", "i", ",", "feature", "in", "enumerate", "(", "features", ")", ":", "\n", "# if feature == 0:", "\n", "#     continue", "\n", "                    ", "features_str", "+=", "\"{}:{} \"", ".", "format", "(", "i", "+", "1", ",", "feature", ")", "\n", "", "s", "+=", "\"{} qid:{} {}#{}\\n\"", ".", "format", "(", "label", ",", "query", ",", "features_str", ",", "docid", ")", "\n", "f", ".", "write", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ielab_oltr.intent_change.add_feature.load_data_set": [[20, 59], ["open", "line.strip().split", "range", "cols[].split", "len", "float", "math.isnan", "features.append", "len", "line.strip", "cols[].split", "feature_id.isdigit", "cols[].split"], "function", ["None"], ["", "", "", "", "def", "load_data_set", "(", "path", ")", ":", "\n", "    ", "query_doc_dict", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "fin", ":", "\n", "        ", "current_query", "=", "None", "\n", "for", "line", "in", "fin", ":", "\n", "            ", "cols", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "query", "=", "cols", "[", "1", "]", ".", "split", "(", "':'", ")", "[", "1", "]", "\n", "if", "query", "==", "current_query", ":", "\n", "                ", "old_query", "=", "True", "\n", "\n", "", "else", ":", "\n", "                ", "old_query", "=", "False", "\n", "current_query", "=", "query", "\n", "\n", "", "relevence", "=", "cols", "[", "0", "]", "\n", "\n", "features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ",", "len", "(", "cols", ")", ")", ":", "\n", "                ", "feature_id", "=", "cols", "[", "i", "]", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "\n", "if", "not", "feature_id", ".", "isdigit", "(", ")", ":", "\n", "                    ", "if", "feature_id", "[", "0", "]", "==", "\"#\"", ":", "\n", "                        ", "docid", "=", "cols", "[", "i", "]", "[", "1", ":", "]", "\n", "", "break", "\n", "\n", "", "feature_value", "=", "float", "(", "cols", "[", "i", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "if", "math", ".", "isnan", "(", "feature_value", ")", ":", "\n", "                    ", "feature_value", "=", "0", "\n", "\n", "", "features", ".", "append", "(", "feature_value", ")", "\n", "", "if", "len", "(", "features", ")", ">=", "106", ":", "\n", "                ", "features", "=", "features", "[", ":", "105", "]", "\n", "\n", "# features.append(-22.2287221840378)", "\n", "", "if", "old_query", ":", "\n", "                ", "query_doc_dict", "[", "query", "]", "[", "docid", "]", "=", "(", "relevence", ",", "features", ")", "\n", "", "else", ":", "\n", "                ", "query_doc_dict", "[", "query", "]", "=", "{", "docid", ":", "(", "relevence", ",", "features", ")", "}", "\n", "", "", "", "return", "query_doc_dict", "\n", "\n"]]}