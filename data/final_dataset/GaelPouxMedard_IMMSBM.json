{"home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_interactionPaires.writeMatrix": [[24, 35], ["sparse.save_npz", "filename.replace", "open", "outfile.truncate", "outfile.write", "numpy.savetxt", "outfile.write"], "function", ["None"], ["def", "writeMatrix", "(", "arr", ",", "filename", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "sparse", ".", "save_npz", "(", "filename", ".", "replace", "(", "\".txt\"", ",", "\"\"", ")", ",", "arr", ")", "\n", "", "except", ":", "\n", "\n", "        ", "with", "open", "(", "filename", ",", "'a'", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "truncate", "(", "0", ")", "\n", "outfile", ".", "write", "(", "'# Array shape: {0}\\n'", ".", "format", "(", "arr", ".", "shape", ")", ")", "\n", "for", "slice_2d", "in", "arr", ":", "\n", "                ", "np", ".", "savetxt", "(", "outfile", ",", "slice_2d", ")", "\n", "outfile", ".", "write", "(", "\"# New slice\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_interactionPaires.readMatrix": [[39, 50], ["sparse.load_npz", "filename.replace", "numpy.loadtxt().reshape", "open", "outfile.readline().replace().replace().replace().split", "range", "len", "int", "numpy.loadtxt", "outfile.readline().replace().replace().replace", "outfile.readline().replace().replace", "outfile.readline().replace", "outfile.readline"], "function", ["None"], ["", "", "", "", "def", "readMatrix", "(", "filename", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "sparse", ".", "load_npz", "(", "filename", ".", "replace", "(", "\".txt\"", ",", "\".npz\"", ")", ")", "\n", "", "except", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "outfile", ":", "\n", "            ", "dims", "=", "outfile", ".", "readline", "(", ")", ".", "replace", "(", "\"# Array shape: (\"", ",", "\"\"", ")", ".", "replace", "(", "\")\"", ",", "\"\"", ")", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\", \"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", ")", ":", "\n", "                ", "dims", "[", "i", "]", "=", "int", "(", "dims", "[", "i", "]", ")", "\n", "\n", "", "", "new_data", "=", "np", ".", "loadtxt", "(", "filename", ")", ".", "reshape", "(", "dims", ")", "\n", "return", "new_data", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_interactionPaires.writeToFile_params": [[54, 80], ["len", "MMSBM_interactionPaires.writeMatrix", "MMSBM_interactionPaires.writeMatrix", "open", "open.write", "open.close", "open", "open.write", "open.close", "print", "str", "str"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.writeMatrix", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.writeMatrix"], ["", "", "def", "writeToFile_params", "(", "folder", ",", "theta", ",", "p", ",", "maxL", ",", "HOL", ",", "T", ",", "selfInter", "=", "False", ",", "run", "=", "-", "1", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "I", "=", "len", "(", "theta", ")", "\n", "if", "selfInter", ":", "\n", "                ", "s", "=", "\"Self\"", "\n", "", "else", ":", "\n", "                ", "s", "=", "\"\"", "\n", "", "folderParams", "=", "\"Output/\"", "+", "folder", "+", "\"/\"", "\n", "pass", "\n", "writeMatrix", "(", "theta", ",", "folderParams", "+", "\"/T=%.0f_%.0f_\"", "%", "(", "T", ",", "run", ")", "+", "s", "+", "\"Inter_theta.txt\"", ")", "\n", "\n", "writeMatrix", "(", "p", ",", "folderParams", "+", "\"/T=%.0f_%.0f_\"", "%", "(", "T", ",", "run", ")", "+", "s", "+", "\"Inter_p.txt\"", ")", "\n", "\n", "f", "=", "open", "(", "folderParams", "+", "\"/T=%.0f_%.0f_\"", "%", "(", "T", ",", "run", ")", "+", "s", "+", "\"Inter_L.txt\"", ",", "\"w\"", ")", "\n", "f", ".", "write", "(", "str", "(", "maxL", ")", "+", "\"\\n\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "f", "=", "open", "(", "folderParams", "+", "\"/T=%.0f_%.0f_\"", "%", "(", "T", ",", "run", ")", "+", "s", "+", "\"Inter_HOL.txt\"", ",", "\"w\"", ")", "\n", "f", ".", "write", "(", "str", "(", "HOL", ")", "+", "\"\\n\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "break", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Retrying to write file -\"", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_interactionPaires.recoverData": [[82, 88], ["MMSBM_interactionPaires.readMatrix", "MMSBM_interactionPaires.readMatrix"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.readMatrix", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.readMatrix"], ["", "", "", "def", "recoverData", "(", "folder", ")", ":", "\n", "    ", "folderData", "=", "\"Data/\"", "+", "folder", "+", "\"/\"", "\n", "alpha_Tr", ",", "alpha_Te", "=", "readMatrix", "(", "folderData", "+", "\"/Inter_alpha_Tr.txt\"", ")", ",", "readMatrix", "(", "folderData", "+", "\"/Inter_alpha_Te.txt\"", ")", "\n", "\n", "\n", "return", "alpha_Tr", ",", "alpha_Te", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_interactionPaires.likelihood": [[96, 138], ["len", "alpha.nonzero", "zip", "sparse.COO", "vals.append", "theta[].dot", "theta[].dot", "numpy.log"], "function", ["None"], ["", "def", "likelihood", "(", "theta", ",", "p", ",", "alpha", ")", ":", "\n", "    ", "L", "=", "0.", "\n", "I", "=", "len", "(", "alpha", ")", "\n", "\n", "'''\n    I = len(alpha)\n    for i in range(I):\n        for j in range(I):\n            for inf in range(I):\n                temp = 0\n                for k in range(T):\n                    for l in range(T):\n                        temp+=theta[j,l]*theta[i,k]*p[k,l,inf]\n\n                L+=alpha[i,j,inf]*np.log(temp+1e-10)\n\n\n    I = len(alpha)\n    probs = theta.dot((theta.dot(p)))\n    for i in range(I):\n        for j in range(I):\n            for inf in range(I):\n                tmp=0.\n                for t in range(T):\n                    for s in range(T):\n                        tmp+=theta[i,t]*theta[j,s]*p[t,s,inf]\n                print(probs[i, j, inf] - tmp)\n\n    '''", "\n", "\n", "\n", "coords", "=", "alpha", ".", "nonzero", "(", ")", "\n", "vals", "=", "[", "]", "\n", "for", "(", "i", ",", "j", ",", "k", ")", "in", "zip", "(", "coords", "[", "0", "]", ",", "coords", "[", "1", "]", ",", "coords", "[", "2", "]", ")", ":", "\n", "        ", "vals", ".", "append", "(", "theta", "[", "j", "]", ".", "dot", "(", "theta", "[", "i", "]", ".", "dot", "(", "p", "[", ":", ",", ":", ",", "k", "]", ")", ")", ")", "\n", "", "probs", "=", "sparse", ".", "COO", "(", "coords", ",", "vals", ",", "shape", "=", "(", "I", ",", "I", ",", "I", ")", ")", "\n", "\n", "L", "=", "(", "alpha", "*", "(", "np", ".", "log", "(", "1e-10", "+", "probs", ")", ")", ")", ".", "sum", "(", ")", "\n", "\n", "# L = np.sum(alpha * (np.log(1e-10 + theta.dot((theta.dot(p))))))", "\n", "\n", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_interactionPaires.maximization_Theta": [[140, 195], ["alpha.nonzero", "zip", "numpy.swapaxes", "sparse.tensordot", "terme1.transpose.transpose", "numpy.swapaxes", "sparse.tensordot", "vals.append", "sparse.COO", "thetaPrev.dot", "thetaPrev.dot", "thetaPrev[].dot", "numpy.array", "numpy.swapaxes", "thetaPrev[].dot", "alpha.sum().sum", "alpha.sum().sum", "alpha.sum", "alpha.sum"], "function", ["None"], ["", "def", "maximization_Theta", "(", "alpha", ",", "I", ",", "T", ",", "thetaPrev", ",", "p", ")", ":", "\n", "    ", "'''\n    theta2 = np.zeros((I, T))\n    for m in range(I):\n        nonZG, nonZD = alpha[m, :, :].nonzero(), alpha[:, m, :].nonzero()\n        for n in range(T):\n            tmp=0.\n            for s in range(T):\n                for (i, inf) in zip(nonZG[0], nonZG[1]):\n                    tmp+=alpha[m, i, inf] * omega[m, i, s, n, inf]\n                for (i, inf) in zip(nonZD[0], nonZD[1]):\n                    tmp+=alpha[i, m, inf] * omega[i, m, n, s, inf]\n\n            theta2[m,n] = tmp / Cm[m]\n    '''", "\n", "\n", "'''  Memory consuming\n    divix = (thetaPrev.dot(thetaPrev.dot(p))) + 1e-10  # mrx\n    divix = np.swapaxes(divix, 0, 1)  # rmx  # Parce que alpha c'est dans l'ordre rmx\n\n    terme1 = np.swapaxes(alpha/divix, 0, 1)  # mrx\n    terme2 = np.swapaxes(thetaPrev.dot(p), 1, 2)  # rxk\n    theta = np.tensordot(terme1, terme2, axes=2)  # mk\n\n\n    terme1 = np.swapaxes(terme1, 0, 1)  # rmx\n    terme2 = np.swapaxes(thetaPrev.dot(np.swapaxes(p, 0, 1)), 1, 2)  # mxl\n    theta += np.tensordot(terme1, terme2, axes=2)  # rl\n\n    theta = theta / Cm[:, None]\n    theta *= thetaPrev\n    '''", "\n", "\n", "# Combinaisons : rl, mk, klx  ;  alpha(rmx)!=alpha(mrx) car on considere ici alpha_Tr", "\n", "\n", "coords", "=", "alpha", ".", "nonzero", "(", ")", "\n", "vals", "=", "[", "]", "\n", "for", "(", "r", ",", "m", ",", "k", ")", "in", "zip", "(", "coords", "[", "0", "]", ",", "coords", "[", "1", "]", ",", "coords", "[", "2", "]", ")", ":", "\n", "        ", "vals", ".", "append", "(", "thetaPrev", "[", "r", "]", ".", "dot", "(", "thetaPrev", "[", "m", "]", ".", "dot", "(", "p", "[", ":", ",", ":", ",", "k", "]", ")", ")", ")", "# rmx", "\n", "", "divix", "=", "sparse", ".", "COO", "(", "coords", ",", "np", ".", "array", "(", "vals", ")", ",", "shape", "=", "(", "I", ",", "I", ",", "I", ")", ")", "+", "1e-10", "\n", "\n", "Cm", "=", "(", "alpha", ".", "sum", "(", "axis", "=", "0", ")", ".", "sum", "(", "axis", "=", "1", ")", "+", "alpha", ".", "sum", "(", "axis", "=", "1", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", ".", "todense", "(", ")", "+", "1e-10", "\n", "\n", "terme1", "=", "alpha", "/", "divix", "# rmx", "\n", "terme2", "=", "np", ".", "swapaxes", "(", "thetaPrev", ".", "dot", "(", "np", ".", "swapaxes", "(", "p", ",", "0", ",", "1", ")", ")", ",", "1", ",", "2", ")", "# mxl", "\n", "theta", "=", "sparse", ".", "tensordot", "(", "terme1", ",", "terme2", ",", "axes", "=", "2", ")", "# rl", "\n", "\n", "terme1", "=", "terme1", ".", "transpose", "(", "axes", "=", "(", "1", ",", "0", ",", "2", ")", ")", "# mrx", "\n", "terme2", "=", "np", ".", "swapaxes", "(", "thetaPrev", ".", "dot", "(", "p", ")", ",", "1", ",", "2", ")", "# rxk", "\n", "theta", "+=", "sparse", ".", "tensordot", "(", "terme1", ",", "terme2", ",", "axes", "=", "2", ")", "# mk", "\n", "\n", "theta", "=", "theta", "/", "Cm", "[", ":", ",", "None", "]", "\n", "theta", "*=", "thetaPrev", "\n", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_interactionPaires.maximization_p": [[197, 246], ["alpha.nonzero", "zip", "terme1.dot", "p.transpose.transpose", "p.transpose.dot", "p.transpose.transpose", "vals.append", "sparse.COO", "theta[].dot", "numpy.array", "numpy.sum", "theta[].dot"], "function", ["None"], ["", "def", "maximization_p", "(", "alpha", ",", "I", ",", "T", ",", "theta", ",", "pPrev", ")", ":", "\n", "    ", "'''\n    nonZ = alpha.nonzero()\n\n    p2 = np.zeros((T, T, I))\n    for m in range(T):\n        for n in range(T):\n            div = 0.\n            for (i, j, inf) in zip(nonZ[0], nonZ[1], nonZ[2]):\n                div+=alpha[i,j,inf]*omega[i,j,m,n,inf]\n\n\n            for (i, j, inf) in zip(nonZ[0], nonZ[1], nonZ[2]):\n                p2[m,n,inf] += alpha[i,j,inf]*omega[i,j,m,n,inf]\n\n\n            p2[m,n] = p2[m,n, :]/div\n    '''", "\n", "\n", "''' Memory consuming\n    divrm = (theta.dot(theta.dot(np.swapaxes(pPrev, 0, 1)))) + 1e-10  # rmx\n\n    terme1 = np.swapaxes(alpha/divrm, 0, 2)  # xmr\n    p = np.tensordot(terme1, theta, axes=1)  # xml\n    p = np.swapaxes(p, 1, 2)  # xlm\n    p = np.tensordot(p, theta, axes=1)  # xlk\n    p = np.swapaxes(p, 0, 2)  # klx\n\n    grandDiv = np.sum(p * pPrev, axis=2)[:, :, None] + 1e-10\n    p = p * pPrev / grandDiv\n    '''", "\n", "\n", "\n", "coords", "=", "alpha", ".", "nonzero", "(", ")", "\n", "vals", "=", "[", "]", "\n", "for", "(", "r", ",", "m", ",", "k", ")", "in", "zip", "(", "coords", "[", "0", "]", ",", "coords", "[", "1", "]", ",", "coords", "[", "2", "]", ")", ":", "\n", "        ", "vals", ".", "append", "(", "theta", "[", "r", "]", ".", "dot", "(", "theta", "[", "m", "]", ".", "dot", "(", "pPrev", "[", ":", ",", ":", ",", "k", "]", ")", ")", ")", "# rmx", "\n", "", "divrm", "=", "sparse", ".", "COO", "(", "coords", ",", "np", ".", "array", "(", "vals", ")", ",", "shape", "=", "(", "I", ",", "I", ",", "I", ")", ")", "+", "1e-10", "\n", "\n", "terme1", "=", "(", "alpha", "/", "divrm", ")", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "# xmr", "\n", "p", "=", "terme1", ".", "dot", "(", "theta", ")", "# xml", "\n", "p", "=", "p", ".", "transpose", "(", "(", "0", ",", "2", ",", "1", ")", ")", "# xlm", "\n", "p", "=", "p", ".", "dot", "(", "theta", ")", "# xlk", "\n", "p", "=", "p", ".", "transpose", "(", "(", "2", ",", "1", ",", "0", ")", ")", "# klx", "\n", "\n", "grandDiv", "=", "np", ".", "sum", "(", "p", "*", "pPrev", ",", "axis", "=", "2", ")", "[", ":", ",", ":", ",", "None", "]", "+", "1e-10", "\n", "p", "=", "p", "*", "pPrev", "/", "grandDiv", "\n", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_interactionPaires.initVars": [[248, 258], ["range", "numpy.random.rand", "numpy.random.random", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "initVars", "(", "I", ",", "T", ")", ":", "\n", "    ", "theta", ",", "p", "=", "np", ".", "random", ".", "rand", "(", "I", ",", "T", ")", ",", "np", ".", "random", ".", "random", "(", "(", "T", ",", "T", ",", "I", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "I", ")", ":", "\n", "        ", "p", "[", ":", ",", ":", ",", "k", "]", "=", "(", "p", "[", ":", ",", ":", ",", "k", "]", "+", "p", "[", ":", ",", ":", ",", "k", "]", ".", "T", ")", "/", "2", "\n", "\n", "", "p", "=", "p", "/", "np", ".", "sum", "(", "p", ",", "axis", "=", "2", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "theta", "=", "theta", "/", "np", ".", "sum", "(", "theta", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "\n", "return", "theta", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_interactionPaires.EMLoop": [[260, 301], ["MMSBM_interactionPaires.initVars", "MMSBM_interactionPaires.initVars", "print", "MMSBM_interactionPaires.maximization_Theta", "MMSBM_interactionPaires.maximization_p", "MMSBM_interactionPaires.likelihood", "print", "abs", "MMSBM_interactionPaires.likelihood", "MMSBM_interactionPaires.writeToFile_params", "print"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.initVars", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.initVars", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.maximization_Theta", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.maximization_p", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.likelihood", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.likelihood", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.writeToFile_params"], ["", "def", "EMLoop", "(", "alpha", ",", "T", ",", "I", ",", "maxCnt", ",", "prec", ",", "alpha_Te", ",", "folder", ",", "selfInter", ",", "run", ")", ":", "\n", "    ", "theta", ",", "p", "=", "initVars", "(", "I", ",", "T", ")", "\n", "maxTheta", ",", "maxP", "=", "initVars", "(", "I", ",", "T", ")", "\n", "\n", "prevL", ",", "L", ",", "maxL", "=", "-", "1e10", ",", "0.", ",", "0.", "\n", "cnt", "=", "0", "\n", "\n", "i", "=", "0", "\n", "iPrev", "=", "0", "\n", "while", "i", "<", "1000", ":", "# 1000 iterations top ; prevent infinite loops but never reached in practice", "\n", "        ", "print", "(", "i", ")", "\n", "\n", "if", "i", "%", "10", "==", "0", ":", "# Compute the likelihood and possibly save the results every 10 iterations", "\n", "            ", "L", "=", "likelihood", "(", "theta", ",", "p", ",", "alpha", ")", "\n", "print", "(", "\"L =\"", ",", "L", ")", "\n", "\n", "if", "abs", "(", "(", "L", "-", "prevL", ")", "/", "L", ")", "<", "prec", ":", "\n", "                ", "cnt", "+=", "i", "-", "iPrev", "\n", "if", "cnt", ">", "maxCnt", ":", "\n", "                    ", "break", "\n", "", "", "else", ":", "\n", "                ", "cnt", "=", "0", "\n", "\n", "", "iPrev", "=", "i", "\n", "\n", "if", "L", ">", "prevL", ":", "\n", "                ", "maxTheta", ",", "maxP", "=", "theta", ",", "p", "\n", "maxL", "=", "L", "\n", "HOL", "=", "likelihood", "(", "theta", ",", "p", ",", "alpha_Te", ")", "\n", "writeToFile_params", "(", "folder", ",", "maxTheta", ",", "maxP", ",", "maxL", ",", "HOL", ",", "T", ",", "selfInter", ",", "run", ")", "\n", "print", "(", "\"Saved\"", ")", "\n", "\n", "", "prevL", "=", "L", "\n", "", "thetaNew", "=", "maximization_Theta", "(", "alpha", ",", "I", ",", "T", ",", "theta", ",", "p", ")", "\n", "pNew", "=", "maximization_p", "(", "alpha", ",", "I", ",", "T", ",", "theta", ",", "p", ")", "\n", "p", "=", "pNew", "\n", "theta", "=", "thetaNew", "\n", "\n", "i", "+=", "1", "\n", "\n", "", "return", "maxTheta", ",", "maxP", ",", "maxL", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_interactionPaires.runFit": [[306, 335], ["numpy.random.seed", "random.seed", "len", "print", "range", "MMSBM_buildObservations.getObservations", "MMSBM_interactionPaires.recoverData", "print", "MMSBM_interactionPaires.EMLoop", "MMSBM_interactionPaires.likelihood", "print", "MMSBM_interactionPaires.writeToFile_params", "print"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.getObservations", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.recoverData", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.EMLoop", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.likelihood", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.writeToFile_params"], ["", "def", "runFit", "(", "folder", ",", "T", ",", "prec", ",", "maxCnt", ",", "saveToFile", ",", "propTrainingSet", ",", "treatData", ",", "nbRuns", ",", "retreatEverything", ",", "seuil", ",", "selfInter", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "if", "treatData", ":", "\n", "        ", "import", "MMSBM_buildObservations", "\n", "alpha_Tr", ",", "alpha_Te", "=", "MMSBM_buildObservations", ".", "getObservations", "(", "folder", ",", "propTrainingSet", ",", "retreatEverything", ",", "seuil", ")", "\n", "\n", "", "else", ":", "\n", "        ", "alpha_Tr", ",", "alpha_Te", "=", "recoverData", "(", "folder", ")", "\n", "\n", "", "I", "=", "len", "(", "alpha_Tr", ")", "\n", "\n", "print", "(", "I", ",", "\"infs\"", ")", "\n", "\n", "alpha_Tr", "=", "alpha_Tr", "[", ":", "I", ",", ":", "I", ",", ":", "I", "]", "\n", "alpha_Te", "=", "alpha_Te", "[", ":", "I", ",", ":", "I", ",", ":", "I", "]", "\n", "\n", "\n", "maxL", "=", "-", "1e100", "\n", "for", "i", "in", "range", "(", "nbRuns", ")", ":", "\n", "        ", "print", "(", "\"RUN\"", ",", "i", ")", "\n", "theta", ",", "p", ",", "L", "=", "EMLoop", "(", "alpha_Tr", ",", "T", ",", "I", ",", "maxCnt", ",", "prec", ",", "alpha_Te", ",", "folder", ",", "selfInter", ",", "i", ")", "\n", "HOL", "=", "likelihood", "(", "theta", ",", "p", ",", "alpha_Te", ")", "\n", "if", "L", ">", "maxL", ":", "\n", "            ", "maxL", "=", "L", "\n", "writeToFile_params", "(", "folder", "+", "\"/Final/\"", ",", "theta", ",", "p", ",", "L", ",", "HOL", ",", "T", ",", "selfInter", ",", "-", "1", ")", "\n", "print", "(", "\"######saved####### MAX L =\"", ",", "L", ")", "\n", "", "print", "(", "\"=============================== END EM ==========================\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.writeMatrix": [[24, 35], ["sparse.save_npz", "filename.replace", "open", "outfile.truncate", "outfile.write", "numpy.savetxt", "outfile.write"], "function", ["None"], ["def", "writeMatrix", "(", "arr", ",", "filename", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "sparse", ".", "save_npz", "(", "filename", ".", "replace", "(", "\".txt\"", ",", "\"\"", ")", ",", "arr", ")", "\n", "", "except", ":", "\n", "\n", "        ", "with", "open", "(", "filename", ",", "'a'", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "truncate", "(", "0", ")", "\n", "outfile", ".", "write", "(", "'# Array shape: {0}\\n'", ".", "format", "(", "arr", ".", "shape", ")", ")", "\n", "for", "slice_2d", "in", "arr", ":", "\n", "                ", "np", ".", "savetxt", "(", "outfile", ",", "slice_2d", ")", "\n", "outfile", ".", "write", "(", "\"# New slice\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.readMatrix": [[39, 50], ["sparse.load_npz", "filename.replace", "numpy.loadtxt().reshape", "open", "outfile.readline().replace().replace().replace().split", "range", "len", "int", "numpy.loadtxt", "outfile.readline().replace().replace().replace", "outfile.readline().replace().replace", "outfile.readline().replace", "outfile.readline"], "function", ["None"], ["", "", "", "", "def", "readMatrix", "(", "filename", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "sparse", ".", "load_npz", "(", "filename", ".", "replace", "(", "\".txt\"", ",", "\".npz\"", ")", ")", "\n", "", "except", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "outfile", ":", "\n", "            ", "dims", "=", "outfile", ".", "readline", "(", ")", ".", "replace", "(", "\"# Array shape: (\"", ",", "\"\"", ")", ".", "replace", "(", "\")\"", ",", "\"\"", ")", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\", \"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", ")", ":", "\n", "                ", "dims", "[", "i", "]", "=", "int", "(", "dims", "[", "i", "]", ")", "\n", "\n", "", "", "new_data", "=", "np", ".", "loadtxt", "(", "filename", ")", ".", "reshape", "(", "dims", ")", "\n", "return", "new_data", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.writeToFile_params": [[54, 80], ["len", "MMSBM_noInteractionPaires.writeMatrix", "MMSBM_noInteractionPaires.writeMatrix", "open", "open.write", "open.close", "open", "open.write", "open.close", "print", "str", "str"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.writeMatrix", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.writeMatrix"], ["", "", "def", "writeToFile_params", "(", "folder", ",", "theta", ",", "p", ",", "maxL", ",", "HOL", ",", "T", ",", "selfInter", "=", "False", ",", "run", "=", "-", "1", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "I", "=", "len", "(", "theta", ")", "\n", "if", "selfInter", ":", "\n", "                ", "s", "=", "\"Self\"", "\n", "", "else", ":", "\n", "                ", "s", "=", "\"\"", "\n", "", "folderParams", "=", "\"Output/\"", "+", "folder", "+", "\"/\"", "\n", "pass", "\n", "writeMatrix", "(", "theta", ",", "folderParams", "+", "\"/T=%.0f_%.0f_\"", "%", "(", "T", ",", "run", ")", "+", "s", "+", "\"Inter_theta.txt\"", ")", "\n", "\n", "writeMatrix", "(", "p", ",", "folderParams", "+", "\"/T=%.0f_%.0f_\"", "%", "(", "T", ",", "run", ")", "+", "s", "+", "\"Inter_p.txt\"", ")", "\n", "\n", "f", "=", "open", "(", "folderParams", "+", "\"/T=%.0f_%.0f_\"", "%", "(", "T", ",", "run", ")", "+", "s", "+", "\"Inter_L.txt\"", ",", "\"w\"", ")", "\n", "f", ".", "write", "(", "str", "(", "maxL", ")", "+", "\"\\n\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "f", "=", "open", "(", "folderParams", "+", "\"/T=%.0f_%.0f_\"", "%", "(", "T", ",", "run", ")", "+", "s", "+", "\"Inter_HOL.txt\"", ",", "\"w\"", ")", "\n", "f", ".", "write", "(", "str", "(", "HOL", ")", "+", "\"\\n\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "break", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Retrying to write file -\"", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.recoverData": [[82, 88], ["MMSBM_noInteractionPaires.readMatrix", "MMSBM_noInteractionPaires.readMatrix"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.readMatrix", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.readMatrix"], ["", "", "", "def", "recoverData", "(", "folder", ")", ":", "\n", "    ", "folderData", "=", "\"Data/\"", "+", "folder", "+", "\"/\"", "\n", "alpha_Tr", ",", "alpha_Te", "=", "readMatrix", "(", "folderData", "+", "\"/Inter_alpha_Tr.txt\"", ")", ",", "readMatrix", "(", "folderData", "+", "\"/Inter_alpha_Te.txt\"", ")", "\n", "\n", "\n", "return", "alpha_Tr", ",", "alpha_Te", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.getAlphaSelfInter": [[91, 104], ["len", "numpy.zeros", "zip", "sparse.COO", "numpy.zeros", "zip", "sparse.COO", "sparse.COO.nonzero", "sparse.COO.nonzero", "sparse.COO.nonzero", "sparse.COO.nonzero", "sparse.COO.nonzero", "sparse.COO.nonzero"], "function", ["None"], ["", "def", "getAlphaSelfInter", "(", "alpha_Te", ",", "alpha_Tr", ")", ":", "\n", "    ", "I", "=", "len", "(", "alpha_Te", ")", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "I", ",", "I", ")", ")", "\n", "for", "(", "i", ",", "j", ",", "k", ")", "in", "zip", "(", "alpha_Te", ".", "nonzero", "(", ")", "[", "0", "]", ",", "alpha_Te", ".", "nonzero", "(", ")", "[", "1", "]", ",", "alpha_Te", ".", "nonzero", "(", ")", "[", "2", "]", ")", ":", "\n", "        ", "mat", "[", "i", ",", "k", "]", "+=", "alpha_Te", "[", "i", ",", "j", ",", "k", "]", "\n", "", "alpha_Te", "=", "sparse", ".", "COO", "(", "mat", ")", "\n", "\n", "mat", "=", "np", ".", "zeros", "(", "(", "I", ",", "I", ")", ")", "\n", "for", "(", "i", ",", "j", ",", "k", ")", "in", "zip", "(", "alpha_Tr", ".", "nonzero", "(", ")", "[", "0", "]", ",", "alpha_Tr", ".", "nonzero", "(", ")", "[", "1", "]", ",", "alpha_Tr", ".", "nonzero", "(", ")", "[", "2", "]", ")", ":", "\n", "        ", "mat", "[", "i", ",", "k", "]", "+=", "alpha_Tr", "[", "i", ",", "j", ",", "k", "]", "\n", "", "alpha_Tr", "=", "sparse", ".", "COO", "(", "mat", ")", "\n", "\n", "return", "alpha_Te", ",", "alpha_Tr", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.likelihood": [[111, 151], ["len", "alpha.nonzero", "zip", "sparse.COO", "vals.append", "theta[].dot", "numpy.log"], "function", ["None"], ["", "def", "likelihood", "(", "theta", ",", "p", ",", "alpha", ")", ":", "\n", "    ", "L", "=", "0.", "\n", "I", "=", "len", "(", "alpha", ")", "\n", "\n", "'''\n    I = len(alpha)\n    for i in range(I):\n        for j in range(I):\n            for inf in range(I):\n                temp = 0\n                for k in range(T):\n                    for l in range(T):\n                        temp+=theta[j,l]*theta[i,k]*p[k,l,inf]\n\n                L+=alpha[i,j,inf]*np.log(temp+1e-10)\n\n\n    I = len(alpha)\n    probs = theta.dot((theta.dot(p)))\n    for i in range(I):\n        for j in range(I):\n            for inf in range(I):\n                tmp=0.\n                for t in range(T):\n                    for s in range(T):\n                        tmp+=theta[i,t]*theta[j,s]*p[t,s,inf]\n                print(probs[i, j, inf] - tmp)\n\n    '''", "\n", "\n", "\n", "coords", "=", "alpha", ".", "nonzero", "(", ")", "\n", "vals", "=", "[", "]", "\n", "for", "(", "i", ",", "x", ")", "in", "zip", "(", "coords", "[", "0", "]", ",", "coords", "[", "1", "]", ")", ":", "\n", "        ", "vals", ".", "append", "(", "theta", "[", "i", "]", ".", "dot", "(", "p", "[", ":", ",", "x", "]", ")", ")", "\n", "", "probs", "=", "sparse", ".", "COO", "(", "coords", ",", "vals", ",", "shape", "=", "(", "I", ",", "I", ")", ")", "\n", "\n", "L", "=", "(", "alpha", "*", "(", "np", ".", "log", "(", "1e-10", "+", "probs", ")", ")", ")", ".", "sum", "(", ")", "\n", "\n", "return", "L", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.maximization_Theta": [[153, 205], ["alpha.nonzero", "zip", "numpy.swapaxes", "sparse.tensordot", "vals.append", "sparse.COO", "alpha.sum().todense", "thetaPrev[].dot", "numpy.array", "alpha.sum"], "function", ["None"], ["", "def", "maximization_Theta", "(", "alpha", ",", "I", ",", "T", ",", "thetaPrev", ",", "p", ")", ":", "\n", "    ", "'''\n    theta2 = np.zeros((I, T))\n    for m in range(I):\n        nonZG, nonZD = alpha[m, :, :].nonzero(), alpha[:, m, :].nonzero()\n        for n in range(T):\n            tmp=0.\n            for s in range(T):\n                for (i, inf) in zip(nonZG[0], nonZG[1]):\n                    tmp+=alpha[m, i, inf] * omega[m, i, s, n, inf]\n                for (i, inf) in zip(nonZD[0], nonZD[1]):\n                    tmp+=alpha[i, m, inf] * omega[i, m, n, s, inf]\n\n            theta2[m,n] = tmp / Cm[m]\n    '''", "\n", "\n", "'''  Memory consuming\n    divix = (thetaPrev.dot(thetaPrev.dot(p))) + 1e-10  # mrx\n    divix = np.swapaxes(divix, 0, 1)  # rmx  # Parce que alpha c'est dans l'ordre rmx\n\n    terme1 = np.swapaxes(alpha/divix, 0, 1)  # mrx\n    terme2 = np.swapaxes(thetaPrev.dot(p), 1, 2)  # rxk\n    theta = np.tensordot(terme1, terme2, axes=2)  # mk\n\n\n    terme1 = np.swapaxes(terme1, 0, 1)  # rmx\n    terme2 = np.swapaxes(thetaPrev.dot(np.swapaxes(p, 0, 1)), 1, 2)  # mxl\n    theta += np.tensordot(terme1, terme2, axes=2)  # rl\n\n    theta = theta / Cm[:, None]\n    theta *= thetaPrev\n    '''", "\n", "\n", "# Combinaisons : rl, mk, klx  ;  alpha(rmx)!=alpha(mrx) car on considere ici alpha_Tr", "\n", "\n", "coords", "=", "alpha", ".", "nonzero", "(", ")", "\n", "vals", "=", "[", "]", "\n", "for", "(", "i", ",", "x", ")", "in", "zip", "(", "coords", "[", "0", "]", ",", "coords", "[", "1", "]", ")", ":", "\n", "        ", "vals", ".", "append", "(", "thetaPrev", "[", "i", "]", ".", "dot", "(", "p", "[", ":", ",", "x", "]", ")", ")", "# ix", "\n", "", "divix", "=", "sparse", ".", "COO", "(", "coords", ",", "np", ".", "array", "(", "vals", ")", ",", "shape", "=", "(", "I", ",", "I", ")", ")", "+", "1e-10", "\n", "\n", "Cm", "=", "alpha", ".", "sum", "(", "axis", "=", "1", ")", ".", "todense", "(", ")", "+", "1e-10", "# i", "\n", "\n", "terme1", "=", "alpha", "/", "divix", "# ix", "\n", "terme2", "=", "np", ".", "swapaxes", "(", "p", ",", "0", ",", "1", ")", "# xk", "\n", "theta", "=", "sparse", ".", "tensordot", "(", "terme1", ",", "terme2", ",", "axes", "=", "1", ")", "# ik", "\n", "\n", "\n", "theta", "=", "theta", "/", "Cm", "[", ":", ",", "None", "]", "\n", "theta", "*=", "thetaPrev", "\n", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.maximization_p": [[207, 254], ["alpha.nonzero", "zip", "terme1.dot", "p.transpose.transpose", "vals.append", "sparse.COO", "theta[].dot", "numpy.array", "numpy.sum"], "function", ["None"], ["", "def", "maximization_p", "(", "alpha", ",", "I", ",", "T", ",", "theta", ",", "pPrev", ")", ":", "\n", "    ", "'''\n    nonZ = alpha.nonzero()\n\n    p2 = np.zeros((T, T, I))\n    for m in range(T):\n        for n in range(T):\n            div = 0.\n            for (i, j, inf) in zip(nonZ[0], nonZ[1], nonZ[2]):\n                div+=alpha[i,j,inf]*omega[i,j,m,n,inf]\n\n\n            for (i, j, inf) in zip(nonZ[0], nonZ[1], nonZ[2]):\n                p2[m,n,inf] += alpha[i,j,inf]*omega[i,j,m,n,inf]\n\n\n            p2[m,n] = p2[m,n, :]/div\n    '''", "\n", "\n", "''' Memory consuming\n    divrm = (theta.dot(theta.dot(np.swapaxes(pPrev, 0, 1)))) + 1e-10  # rmx\n\n    terme1 = np.swapaxes(alpha/divrm, 0, 2)  # xmr\n    p = np.tensordot(terme1, theta, axes=1)  # xml\n    p = np.swapaxes(p, 1, 2)  # xlm\n    p = np.tensordot(p, theta, axes=1)  # xlk\n    p = np.swapaxes(p, 0, 2)  # klx\n\n    grandDiv = np.sum(p * pPrev, axis=2)[:, :, None] + 1e-10\n    p = p * pPrev / grandDiv\n    '''", "\n", "\n", "\n", "coords", "=", "alpha", ".", "nonzero", "(", ")", "\n", "vals", "=", "[", "]", "\n", "for", "(", "i", ",", "x", ")", "in", "zip", "(", "coords", "[", "0", "]", ",", "coords", "[", "1", "]", ")", ":", "\n", "        ", "vals", ".", "append", "(", "theta", "[", "i", "]", ".", "dot", "(", "pPrev", "[", ":", ",", "x", "]", ")", ")", "# ix", "\n", "", "divrm", "=", "sparse", ".", "COO", "(", "coords", ",", "np", ".", "array", "(", "vals", ")", ",", "shape", "=", "(", "I", ",", "I", ")", ")", "+", "1e-10", "\n", "\n", "terme1", "=", "(", "alpha", "/", "divrm", ")", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "# xi", "\n", "p", "=", "terme1", ".", "dot", "(", "theta", ")", "# xk", "\n", "p", "=", "p", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", "# kx", "\n", "\n", "grandDiv", "=", "np", ".", "sum", "(", "p", "*", "pPrev", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "+", "1e-10", "\n", "p", "=", "p", "*", "pPrev", "/", "grandDiv", "\n", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.initVars": [[256, 263], ["numpy.random.rand", "numpy.random.random", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "initVars", "(", "I", ",", "T", ")", ":", "\n", "    ", "theta", ",", "p", "=", "np", ".", "random", ".", "rand", "(", "I", ",", "T", ")", ",", "np", ".", "random", ".", "random", "(", "(", "T", ",", "I", ")", ")", "\n", "\n", "p", "=", "p", "/", "np", ".", "sum", "(", "p", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "theta", "=", "theta", "/", "np", ".", "sum", "(", "theta", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "\n", "return", "theta", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.EMLoop": [[265, 306], ["MMSBM_noInteractionPaires.initVars", "MMSBM_noInteractionPaires.initVars", "print", "MMSBM_noInteractionPaires.maximization_Theta", "MMSBM_noInteractionPaires.maximization_p", "MMSBM_noInteractionPaires.likelihood", "print", "abs", "MMSBM_noInteractionPaires.likelihood", "MMSBM_noInteractionPaires.writeToFile_params", "print"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.initVars", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.initVars", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.maximization_Theta", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.maximization_p", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.likelihood", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.likelihood", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.writeToFile_params"], ["", "def", "EMLoop", "(", "alpha", ",", "T", ",", "I", ",", "maxCnt", ",", "prec", ",", "alpha_Te", ",", "folder", ",", "selfInter", ",", "run", ")", ":", "\n", "    ", "theta", ",", "p", "=", "initVars", "(", "I", ",", "T", ")", "\n", "maxTheta", ",", "maxP", "=", "initVars", "(", "I", ",", "T", ")", "\n", "\n", "prevL", ",", "L", ",", "maxL", "=", "-", "1e10", ",", "0.", ",", "0.", "\n", "cnt", "=", "0", "\n", "\n", "i", "=", "0", "\n", "iPrev", "=", "0", "\n", "while", "i", "<", "1000", ":", "\n", "        ", "print", "(", "i", ")", "\n", "\n", "if", "i", "%", "10", "==", "0", ":", "\n", "            ", "L", "=", "likelihood", "(", "theta", ",", "p", ",", "alpha", ")", "\n", "print", "(", "\"L =\"", ",", "L", ")", "\n", "\n", "if", "abs", "(", "(", "L", "-", "prevL", ")", "/", "L", ")", "<", "prec", ":", "\n", "                ", "cnt", "+=", "i", "-", "iPrev", "\n", "if", "cnt", ">", "maxCnt", ":", "\n", "                    ", "break", "\n", "", "", "else", ":", "\n", "                ", "cnt", "=", "0", "\n", "\n", "", "iPrev", "=", "i", "\n", "\n", "if", "L", ">", "prevL", ":", "\n", "                ", "maxTheta", ",", "maxP", "=", "theta", ",", "p", "\n", "maxL", "=", "L", "\n", "HOL", "=", "likelihood", "(", "theta", ",", "p", ",", "alpha_Te", ")", "\n", "writeToFile_params", "(", "folder", ",", "maxTheta", ",", "maxP", ",", "maxL", ",", "HOL", ",", "T", ",", "selfInter", ",", "run", ")", "\n", "print", "(", "\"Saved\"", ")", "\n", "\n", "", "prevL", "=", "L", "\n", "", "thetaNew", "=", "maximization_Theta", "(", "alpha", ",", "I", ",", "T", ",", "theta", ",", "p", ")", "\n", "pNew", "=", "maximization_p", "(", "alpha", ",", "I", ",", "T", ",", "theta", ",", "p", ")", "\n", "p", "=", "pNew", "\n", "theta", "=", "thetaNew", "\n", "\n", "i", "+=", "1", "\n", "\n", "", "return", "maxTheta", ",", "maxP", ",", "maxL", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.runFit": [[311, 343], ["numpy.random.seed", "random.seed", "len", "print", "MMSBM_noInteractionPaires.getAlphaSelfInter", "range", "MMSBM_buildObservations.getObservations", "MMSBM_noInteractionPaires.recoverData", "print", "MMSBM_noInteractionPaires.EMLoop", "MMSBM_noInteractionPaires.likelihood", "print", "MMSBM_noInteractionPaires.writeToFile_params", "print"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.getAlphaSelfInter", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.getObservations", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.recoverData", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.EMLoop", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.likelihood", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_noInteractionPaires.writeToFile_params"], ["", "def", "runFit", "(", "folder", ",", "T", ",", "prec", ",", "maxCnt", ",", "saveToFile", ",", "propTrainingSet", ",", "treatData", ",", "nbRuns", ",", "retreatEverything", ",", "seuil", ",", "selfInter", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "if", "treatData", ":", "\n", "        ", "import", "MMSBM_buildObservations", "\n", "alpha_Tr", ",", "alpha_Te", "=", "MMSBM_buildObservations", ".", "getObservations", "(", "folder", ",", "propTrainingSet", ",", "retreatEverything", ",", "seuil", ")", "\n", "\n", "", "else", ":", "\n", "        ", "alpha_Tr", ",", "alpha_Te", "=", "recoverData", "(", "folder", ")", "\n", "\n", "", "I", "=", "len", "(", "alpha_Tr", ")", "\n", "\n", "print", "(", "I", ",", "\"infs\"", ")", "\n", "\n", "alpha_Tr", "=", "alpha_Tr", "[", ":", "I", ",", ":", "I", ",", ":", "I", "]", "\n", "alpha_Te", "=", "alpha_Te", "[", ":", "I", ",", ":", "I", ",", ":", "I", "]", "\n", "\n", "\n", "alpha_Te", ",", "alpha_Tr", "=", "getAlphaSelfInter", "(", "alpha_Te", ",", "alpha_Tr", ")", "\n", "\n", "\n", "maxL", "=", "-", "1e100", "\n", "for", "i", "in", "range", "(", "nbRuns", ")", ":", "\n", "        ", "print", "(", "\"RUN\"", ",", "i", ")", "\n", "theta", ",", "p", ",", "L", "=", "EMLoop", "(", "alpha_Tr", ",", "T", ",", "I", ",", "maxCnt", ",", "prec", ",", "alpha_Te", ",", "folder", ",", "selfInter", ",", "i", ")", "\n", "HOL", "=", "likelihood", "(", "theta", ",", "p", ",", "alpha_Te", ")", "\n", "if", "L", ">", "maxL", ":", "\n", "            ", "maxL", "=", "L", "\n", "writeToFile_params", "(", "folder", "+", "\"/Final/\"", ",", "theta", ",", "p", ",", "L", ",", "HOL", ",", "T", ",", "selfInter", ",", "-", "1", ")", "\n", "print", "(", "\"######saved####### MAX L =\"", ",", "L", ")", "\n", "", "print", "(", "\"=============================== END EM ==========================\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.getData": [[29, 129], ["TP1.Graph().genFromFile", "print", "set", "print", "print", "list", "list", "set", "list", "open", "open", "mess.keys", "answer.keys", "sorted", "TP1.Graph", "l.replace().split", "l.replace().split", "nouns.split", "list.add", "list.add", "set", "nouns.split", "print", "random.random", "l.replace", "l.replace", "rt.lower.lower", "list.append", "nouns.split", "answer[].append", "set.add", "rt.lower.lower", "list.append", "mess[].append"], "function", ["None"], ["def", "getData", "(", "folder", ",", "seuil", "=", "50", ",", "propPosts", "=", "1.", ")", ":", "\n", "    ", "g", "=", "TP1", ".", "Graph", "(", ")", ".", "genFromFile", "(", "\"Data/\"", "+", "folder", "+", "\"/graph.txt\"", ",", "directed", "=", "True", ")", "\n", "\n", "mess", "=", "{", "}", "\n", "answer", "=", "{", "}", "\n", "listInfs", "=", "[", "]", "\n", "\n", "print", "(", "\"Count occurences\"", ")", "\n", "cntNouns", "=", "{", "}", "\n", "totLen", "=", "0", "\n", "\n", "with", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/nounsPost.txt\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "for", "l", "in", "f", ":", "\n", "            ", "id", ",", "nouns", "=", "l", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "nouns", "!=", "[", "]", ":", "\n", "                ", "for", "n", "in", "nouns", ".", "split", "(", "\" \"", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "cntNouns", "[", "n", "]", "+=", "1", "\n", "", "except", ":", "\n", "                        ", "cntNouns", "[", "n", "]", "=", "1", "\n", "", "", "", "totLen", "+=", "1", "\n", "\n", "\n", "", "", "idToSave", "=", "set", "(", ")", "\n", "\n", "print", "(", "\"Building contentPosts\"", ")", "\n", "i", "=", "0", "\n", "with", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/nounsPost.txt\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "for", "l", "in", "f", ":", "\n", "            ", "if", "i", "%", "10000", "==", "0", ":", "\n", "                ", "print", "(", "\"ContentPosts -\"", ",", "i", "*", "100.", "/", "totLen", ",", "\"%\"", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", ">", "propPosts", ":", "\n", "                ", "continue", "\n", "\n", "", "id", ",", "nouns", "=", "l", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "\n", "for", "rt", "in", "nouns", ".", "split", "(", "\" \"", ")", ":", "\n", "                ", "if", "cntNouns", "[", "rt", "]", ">", "seuil", ":", "\n", "                    ", "rt", "=", "rt", ".", "lower", "(", ")", "\n", "listInfs", ".", "append", "(", "rt", ")", "\n", "try", ":", "\n", "                        ", "answer", "[", "id", "]", ".", "append", "(", "rt", ")", "\n", "", "except", ":", "\n", "                        ", "answer", "[", "id", "]", "=", "[", "rt", "]", "\n", "\n", "\n", "\n", "", "", "", "if", "id", "in", "g", ".", "graphDict", ":", "\n", "                ", "for", "u", "in", "g", ".", "graphDict", "[", "id", "]", ":", "\n", "                    ", "for", "rt", "in", "nouns", ".", "split", "(", "\" \"", ")", ":", "\n", "                        ", "if", "cntNouns", "[", "rt", "]", ">", "seuil", ":", "\n", "                            ", "idToSave", ".", "add", "(", "id", ")", "\n", "rt", "=", "rt", ".", "lower", "(", ")", "\n", "listInfs", ".", "append", "(", "rt", ")", "\n", "try", ":", "\n", "                                ", "mess", "[", "u", "]", ".", "append", "(", "rt", ")", "\n", "", "except", ":", "\n", "                                ", "mess", "[", "u", "]", "=", "[", "rt", "]", "\n", "\n", "", "", "", "", "", "i", "+=", "1", "\n", "\n", "\n", "", "", "print", "(", "i", ",", "totLen", ")", "\n", "\n", "\n", "# Epurate the corpus so we only keep the pairs message-answer where none of them are empty", "\n", "keysMess", "=", "list", "(", "mess", ".", "keys", "(", ")", ")", "\n", "for", "u", "in", "keysMess", ":", "\n", "        ", "if", "u", "not", "in", "answer", ":", "\n", "            ", "del", "mess", "[", "u", "]", "\n", "\n", "", "elif", "answer", "[", "u", "]", "==", "[", "]", "or", "answer", "[", "u", "]", "==", "[", "\"\"", "]", ":", "\n", "            ", "del", "answer", "[", "u", "]", "\n", "del", "mess", "[", "u", "]", "\n", "\n", "\n", "", "", "keysAns", "=", "list", "(", "answer", ".", "keys", "(", ")", ")", "\n", "for", "u", "in", "keysAns", ":", "\n", "        ", "if", "u", "not", "in", "mess", ":", "\n", "            ", "del", "answer", "[", "u", "]", "\n", "\n", "", "elif", "mess", "[", "u", "]", "==", "[", "]", "or", "mess", "[", "u", "]", "==", "[", "\"\"", "]", ":", "\n", "            ", "del", "answer", "[", "u", "]", "\n", "del", "mess", "[", "u", "]", "\n", "\n", "\n", "", "", "listInfs", "=", "set", "(", ")", "\n", "for", "u", "in", "answer", ":", "\n", "        ", "for", "inf", "in", "answer", "[", "u", "]", ":", "\n", "            ", "listInfs", ".", "add", "(", "inf", ")", "\n", "", "for", "inf", "in", "mess", "[", "u", "]", ":", "\n", "            ", "listInfs", ".", "add", "(", "inf", ")", "\n", "\n", "\n", "\n", "", "", "listInfs", "=", "list", "(", "sorted", "(", "set", "(", "listInfs", ")", ")", ")", "\n", "\n", "del", "g", "\n", "return", "mess", ",", "answer", ",", "listInfs", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.writeMatrix": [[131, 142], ["sparse.save_npz", "filename.replace", "open", "outfile.truncate", "outfile.write", "numpy.savetxt", "outfile.write"], "function", ["None"], ["", "def", "writeMatrix", "(", "arr", ",", "filename", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "sparse", ".", "save_npz", "(", "filename", ".", "replace", "(", "\".txt\"", ",", "\"\"", ")", ",", "arr", ")", "\n", "", "except", ":", "\n", "\n", "        ", "with", "open", "(", "filename", ",", "'a'", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "truncate", "(", "0", ")", "\n", "outfile", ".", "write", "(", "'# Array shape: {0}\\n'", ".", "format", "(", "arr", ".", "shape", ")", ")", "\n", "for", "slice_2d", "in", "arr", ":", "\n", "                ", "np", ".", "savetxt", "(", "outfile", ",", "slice_2d", ")", "\n", "outfile", ".", "write", "(", "\"# New slice\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.writeToFile_data": [[146, 216], ["open", "open.write", "open.close", "open", "open.write", "open.close", "MMSBM_buildObservations.writeMatrix", "MMSBM_buildObservations.writeMatrix", "print", "open", "open.truncate", "open", "open.truncate", "open", "open.truncate", "str", "str", "open", "open.write", "open.write", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "str", "open.write", "open.write", "str", "str"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.writeMatrix", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.writeMatrix"], ["", "", "", "", "def", "writeToFile_data", "(", "folder", ",", "histUsr", "=", "None", ",", "tweetsUsr", "=", "None", ",", "listInfs", "=", "None", ",", "alpha_Tr", "=", "None", ",", "alpha_Te", "=", "None", ",", "propTrainingSet", "=", "None", ",", "propPosts", "=", "None", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "histUsr", "is", "not", "None", ":", "\n", "                ", "with", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/Inter_tweetsUsr.txt\"", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                    ", "f", ".", "truncate", "(", "0", ")", "\n", "", "with", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/Inter_histUsr.txt\"", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                    ", "f", ".", "truncate", "(", "0", ")", "\n", "", "for", "u", "in", "histUsr", ":", "\n", "                    ", "if", "u", "not", "in", "tweetsUsr", ":", "\n", "                        ", "continue", "\n", "", "if", "tweetsUsr", "[", "u", "]", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "", "if", "histUsr", "[", "u", "]", "==", "[", "]", ":", "\n", "                        ", "continue", "\n", "\n", "\n", "", "with", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/Inter_histUsr.txt\"", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "u", "+", "\"\\t\"", ")", "\n", "premPass", "=", "True", "\n", "for", "v", "in", "histUsr", "[", "u", "]", ":", "\n", "                            ", "if", "not", "premPass", ":", "\n", "                                ", "f", ".", "write", "(", "\" \"", ")", "\n", "", "f", ".", "write", "(", "str", "(", "v", ")", ")", "\n", "premPass", "=", "False", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "with", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/Inter_tweetsUsr.txt\"", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                        ", "if", "u", "in", "tweetsUsr", ":", "\n", "                            ", "f", ".", "write", "(", "u", "+", "\"\\t\"", ")", "\n", "premPass", "=", "True", "\n", "for", "v", "in", "tweetsUsr", "[", "u", "]", ":", "\n", "                                ", "if", "not", "premPass", ":", "\n", "                                    ", "f", ".", "write", "(", "\" \"", ")", "\n", "", "f", ".", "write", "(", "str", "(", "v", ")", ")", "\n", "premPass", "=", "False", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "                            ", "f", ".", "write", "(", "u", "+", "\"\\t-1\\n\"", ")", "\n", "\n", "\n", "\n", "", "", "", "", "if", "listInfs", "is", "not", "None", ":", "\n", "                ", "with", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/Inter_listInfs.txt\"", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                    ", "f", ".", "truncate", "(", "0", ")", "\n", "i", "=", "0", "\n", "for", "u", "in", "listInfs", ":", "\n", "                        ", "f", ".", "write", "(", "str", "(", "i", ")", "+", "\"\\t\"", "+", "u", "+", "\"\\n\"", ")", "\n", "i", "+=", "1", "\n", "\n", "", "", "", "if", "propTrainingSet", "is", "not", "None", ":", "\n", "                ", "f", "=", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/Inter_propTrainingSet.txt\"", ",", "\"w+\"", ",", "encoding", "=", "\"utf-8\"", ")", "\n", "f", ".", "write", "(", "str", "(", "propTrainingSet", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "if", "propPosts", "is", "not", "None", ":", "\n", "                ", "f", "=", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/Inter_propPosts.txt\"", ",", "\"w+\"", ",", "encoding", "=", "\"utf-8\"", ")", "\n", "f", ".", "write", "(", "str", "(", "propPosts", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "if", "alpha_Tr", "is", "not", "None", "and", "alpha_Te", "is", "not", "None", ":", "\n", "                ", "writeMatrix", "(", "alpha_Tr", ",", "\"Data/\"", "+", "folder", "+", "\"/Inter_alpha_Tr.txt\"", ")", "\n", "writeMatrix", "(", "alpha_Te", ",", "\"Data/\"", "+", "folder", "+", "\"/Inter_alpha_Te.txt\"", ")", "\n", "\n", "", "break", "\n", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Retrying to write file -\"", ",", "e", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.writePairs": [[223, 254], ["set", "alpha.nonzero", "zip", "beta.nonzero", "zip", "list", "len", "set.add", "list.append", "sorted", "open", "f.truncate", "open", "set.add", "int", "f.write", "print", "len", "str"], "function", ["None"], ["", "", "", "def", "writePairs", "(", "alpha", ",", "beta", ",", "propTr", ",", "folder", ",", "TrTe", ")", ":", "\n", "    ", "pairs", "=", "[", "]", "\n", "setInd", "=", "set", "(", ")", "\n", "nonZ", "=", "alpha", ".", "nonzero", "(", ")", "\n", "for", "(", "i", ",", "j", ",", "k", ")", "in", "zip", "(", "nonZ", "[", "0", "]", ",", "nonZ", "[", "1", "]", ",", "nonZ", "[", "2", "]", ")", ":", "\n", "        ", "setInd", ".", "add", "(", "(", "i", ",", "j", ",", "k", ")", ")", "\n", "", "del", "nonZ", "\n", "nonZ", "=", "beta", ".", "nonzero", "(", ")", "\n", "for", "(", "i", ",", "j", ",", "k", ")", "in", "zip", "(", "nonZ", "[", "0", "]", ",", "nonZ", "[", "1", "]", ",", "nonZ", "[", "2", "]", ")", ":", "\n", "        ", "if", "alpha", "[", "i", ",", "j", ",", "k", "]", "!=", "0", ":", "\n", "            ", "setInd", ".", "add", "(", "(", "i", ",", "j", ",", "k", ")", ")", "\n", "", "", "for", "(", "i", ",", "j", ",", "k", ")", "in", "setInd", ":", "\n", "        ", "pairs", ".", "append", "(", "(", "i", ",", "j", ",", "k", ")", ")", "\n", "\n", "", "pairs", "=", "list", "(", "sorted", "(", "pairs", ")", ")", "\n", "\n", "pairs", "=", "pairs", "[", ":", "int", "(", "len", "(", "pairs", ")", "*", "1", ")", "]", "\n", "\n", "with", "open", "(", "folder", "+", "\"/Inter_Pairs_\"", "+", "TrTe", "+", "\".txt\"", ",", "\"a\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "truncate", "(", "0", ")", "\n", "\n", "", "iterPerc", ",", "iter", "=", "0", ",", "0", "\n", "totL", "=", "len", "(", "pairs", ")", "\n", "with", "open", "(", "folder", "+", "\"/Inter_Pairs_\"", "+", "TrTe", "+", "\".txt\"", ",", "\"a\"", ")", "as", "f", ":", "\n", "        ", "for", "(", "i", ",", "j", ",", "k", ")", "in", "pairs", ":", "\n", "            ", "if", "iterPerc", "%", "100000", "==", "0", ":", "\n", "                ", "print", "(", "iterPerc", "*", "100.", "/", "totL", ")", "\n", "", "f", ".", "write", "(", "str", "(", "(", "i", ",", "j", ",", "k", ",", "alpha", "[", "i", ",", "j", ",", "k", "]", ",", "beta", "[", "i", ",", "j", ",", "k", "]", ")", ")", "+", "\"\\n\"", ")", "\n", "\n", "iter", "+=", "1", "\n", "iterPerc", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.seqWordsToVec": [[257, 265], ["numpy.zeros", "len", "numpy.array"], "function", ["None"], ["", "", "", "def", "seqWordsToVec", "(", "seq", ",", "infToInt", ",", "unit", "=", "True", ")", ":", "\n", "    ", "vec", "=", "np", ".", "zeros", "(", "len", "(", "infToInt", ")", ",", "dtype", "=", "int", ")", "\n", "for", "a", "in", "seq", ":", "\n", "        ", "vec", "[", "infToInt", "[", "a", "]", "]", "+=", "1", "\n", "", "if", "not", "unit", ":", "\n", "        ", "return", "vec", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array", "(", "(", "vec", ">", "0", ")", ".", "astype", "(", "int", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.getAlpha": [[267, 426], ["len", "random.seed", "random.sample", "len", "sparse.COO", "sparse.COO", "print", "MMSBM_buildObservations.writePairs", "int", "open", "open", "open", "f.write", "open", "open", "len", "lHist.replace.replace", "lHist.replace.split", "nouns.split.split", "f_tw.readline().replace().split", "nounsTw.split.split", "MMSBM_buildObservations.seqWordsToVec", "MMSBM_buildObservations.seqWordsToVec", "lHist.replace.replace", "lHist.replace.split", "nouns.split.split", "f_tw.readline().replace().split", "nounsTw.split.split", "MMSBM_buildObservations.seqWordsToVec", "MMSBM_buildObservations.seqWordsToVec", "coords[].append", "coords[].append", "coords[].append", "dataA.append", "str", "print", "numpy.sum", "print", "numpy.sum", "dataB.append", "f_tw.readline().replace", "seqWordsToVec.nonzero", "seqWordsToVec.nonzero", "f_tw.readline().replace", "seqWordsToVec.nonzero", "seqWordsToVec.nonzero", "dataB.append", "f_tw.readline", "f_tw.readline", "print"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.writePairs", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.seqWordsToVec", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.seqWordsToVec", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.seqWordsToVec", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.seqWordsToVec"], ["", "", "def", "getAlpha", "(", "listInfs", ",", "propTrainingSet", ",", "folder", ",", "TrTe", ",", "indPosts", ")", ":", "\n", "    ", "infToInt", "=", "{", "}", "\n", "ind", "=", "0", "\n", "for", "i", "in", "listInfs", ":", "\n", "        ", "infToInt", "[", "i", "]", "=", "ind", "\n", "ind", "+=", "1", "\n", "\n", "", "I", "=", "len", "(", "listInfs", ")", "\n", "\n", "dataAlphaComp", "=", "{", "}", "\n", "dataBetaComp", "=", "{", "}", "\n", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "listTest", "=", "random", ".", "sample", "(", "indPosts", ",", "int", "(", "(", "1.", "-", "propTrainingSet", ")", "*", "len", "(", "indPosts", ")", ")", ")", "\n", "with", "open", "(", "folder", "+", "\"/Inter_testMessages.txt\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "u", "in", "listTest", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "u", ")", "+", "\"\\n\"", ")", "\n", "", "", "nbPosts", "=", "len", "(", "indPosts", ")", "\n", "\n", "iter", "=", "0", "\n", "with", "open", "(", "folder", "+", "\"/Inter_histUsr.txt\"", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f_hi", ":", "\n", "        ", "with", "open", "(", "folder", "+", "\"/Inter_tweetsUsr.txt\"", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f_tw", ":", "\n", "            ", "for", "lHist", "in", "f_hi", ":", "\n", "                ", "lHist", "=", "lHist", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "u", ",", "nouns", "=", "lHist", ".", "split", "(", "\"\\t\"", ")", "\n", "nouns", "=", "nouns", ".", "split", "(", "\" \"", ")", "\n", "\n", "uTw", ",", "nounsTw", "=", "f_tw", ".", "readline", "(", ")", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "nounsTw", "=", "nounsTw", ".", "split", "(", "\" \"", ")", "\n", "\n", "iter", "+=", "1", "\n", "if", "iter", "%", "100", "==", "0", "or", "False", ":", "\n", "                    ", "print", "(", "\"a -\"", ",", "iter", "*", "100.", "/", "nbPosts", ",", "\"%\"", ")", "\n", "\n", "", "if", "nounsTw", "==", "[", "\"-1\"", "]", ":", "\n", "                    ", "continue", "\n", "", "if", "(", "uTw", "not", "in", "listTest", "and", "TrTe", "==", "\"Te\"", ")", "or", "(", "uTw", "in", "listTest", "and", "TrTe", "==", "\"Tr\"", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "vecWdsHist", "=", "seqWordsToVec", "(", "nouns", ",", "infToInt", ",", "unit", "=", "False", ")", "\n", "vecWdsTwts", "=", "seqWordsToVec", "(", "nounsTw", ",", "infToInt", ",", "unit", "=", "True", ")", "\n", "indHist", ",", "indTwts", "=", "vecWdsHist", ".", "nonzero", "(", ")", "[", "0", "]", ",", "vecWdsTwts", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "#indTwtsZero = np.setdiff1d(range(I), indTwts)", "\n", "\n", "if", "np", ".", "sum", "(", "vecWdsHist", ")", ">", "15", ":", "# On consid\u00e8re ce cas comme peu informatif (225 paires pour une r\u00e9ponse ?)", "\n", "                    ", "continue", "\n", "\n", "", "for", "i", "in", "indHist", ":", "\n", "                    ", "nbi", "=", "vecWdsHist", "[", "i", "]", "\n", "for", "j", "in", "indHist", ":", "\n", "                        ", "nbj", "=", "vecWdsHist", "[", "j", "]", "\n", "for", "k", "in", "indTwts", ":", "\n", "                            ", "try", ":", "\n", "                                ", "dataAlphaComp", "[", "i", "]", "[", "j", "]", "[", "k", "]", "+=", "nbi", "*", "nbj", "\n", "", "except", ":", "\n", "                                ", "try", ":", "\n", "                                    ", "dataAlphaComp", "[", "i", "]", "[", "j", "]", "[", "k", "]", "=", "nbi", "*", "nbj", "\n", "", "except", ":", "\n", "                                    ", "try", ":", "\n", "                                        ", "dataAlphaComp", "[", "i", "]", "[", "j", "]", "=", "{", "}", "\n", "dataAlphaComp", "[", "i", "]", "[", "j", "]", "[", "k", "]", "=", "nbi", "*", "nbj", "\n", "", "except", ":", "\n", "                                        ", "try", ":", "\n", "                                            ", "dataAlphaComp", "[", "i", "]", "=", "{", "}", "\n", "dataAlphaComp", "[", "i", "]", "[", "j", "]", "=", "{", "}", "\n", "dataAlphaComp", "[", "i", "]", "[", "j", "]", "[", "k", "]", "=", "nbi", "*", "nbj", "\n", "", "except", ":", "\n", "                                            ", "pass", "\n", "\n", "\n", "", "", "", "", "", "", "", "", "", "", "iter", "=", "0", "\n", "with", "open", "(", "folder", "+", "\"/Inter_histUsr.txt\"", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f_hi", ":", "\n", "        ", "with", "open", "(", "folder", "+", "\"/Inter_tweetsUsr.txt\"", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f_tw", ":", "\n", "            ", "for", "lHist", "in", "f_hi", ":", "\n", "                ", "lHist", "=", "lHist", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "u", ",", "nouns", "=", "lHist", ".", "split", "(", "\"\\t\"", ")", "\n", "nouns", "=", "nouns", ".", "split", "(", "\" \"", ")", "\n", "\n", "uTw", ",", "nounsTw", "=", "f_tw", ".", "readline", "(", ")", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "nounsTw", "=", "nounsTw", ".", "split", "(", "\" \"", ")", "\n", "\n", "if", "iter", "%", "100", "==", "0", "or", "False", ":", "\n", "                    ", "print", "(", "\"b -\"", ",", "iter", "*", "100.", "/", "nbPosts", ",", "\"%\"", ")", "\n", "", "iter", "+=", "1", "\n", "\n", "if", "nounsTw", "==", "[", "\"-1\"", "]", ":", "\n", "                    ", "continue", "\n", "", "if", "(", "uTw", "not", "in", "listTest", "and", "TrTe", "==", "\"Te\"", ")", "or", "(", "uTw", "in", "listTest", "and", "TrTe", "==", "\"Tr\"", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "vecWdsHist", "=", "seqWordsToVec", "(", "nouns", ",", "infToInt", ",", "unit", "=", "False", ")", "\n", "vecWdsTwts", "=", "seqWordsToVec", "(", "nounsTw", ",", "infToInt", ",", "unit", "=", "True", ")", "\n", "indHist", ",", "indTwts", "=", "vecWdsHist", ".", "nonzero", "(", ")", "[", "0", "]", ",", "vecWdsTwts", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "# indTwtsZero = np.where(vecWdsTwts == 0)[0]", "\n", "\n", "if", "np", ".", "sum", "(", "vecWdsHist", ")", ">", "15", ":", "# On consid\u00e8re ce cas comme peu informatif (225 paires pour une r\u00e9ponse ?)", "\n", "                    ", "continue", "\n", "\n", "", "for", "i", "in", "dataAlphaComp", ":", "\n", "                    ", "if", "i", "not", "in", "indHist", ":", "\n", "                        ", "continue", "\n", "", "nbi", "=", "vecWdsHist", "[", "i", "]", "\n", "for", "j", "in", "dataAlphaComp", "[", "i", "]", ":", "\n", "                        ", "if", "j", "not", "in", "indHist", ":", "\n", "                            ", "continue", "\n", "", "nbj", "=", "vecWdsHist", "[", "j", "]", "\n", "\n", "for", "k", "in", "dataAlphaComp", "[", "i", "]", "[", "j", "]", ":", "\n", "                            ", "if", "k", "in", "indTwts", ":", "\n", "                                ", "continue", "\n", "", "try", ":", "\n", "                                ", "dataBetaComp", "[", "i", "]", "[", "j", "]", "[", "k", "]", "+=", "nbi", "*", "nbj", "\n", "", "except", ":", "\n", "                                ", "try", ":", "\n", "                                    ", "dataBetaComp", "[", "i", "]", "[", "j", "]", "[", "k", "]", "=", "nbi", "*", "nbj", "\n", "", "except", ":", "\n", "                                    ", "try", ":", "\n", "                                        ", "dataBetaComp", "[", "i", "]", "[", "j", "]", "=", "{", "}", "\n", "dataBetaComp", "[", "i", "]", "[", "j", "]", "[", "k", "]", "=", "nbi", "*", "nbj", "\n", "", "except", ":", "\n", "                                        ", "try", ":", "\n", "                                            ", "dataBetaComp", "[", "i", "]", "=", "{", "}", "\n", "dataBetaComp", "[", "i", "]", "[", "j", "]", "=", "{", "}", "\n", "dataBetaComp", "[", "i", "]", "[", "j", "]", "[", "k", "]", "=", "nbi", "*", "nbj", "\n", "", "except", ":", "\n", "                                            ", "print", "(", "\"PROBLEM CONSTRUCT BETA\"", ")", "\n", "\n", "\n", "", "", "", "", "", "", "", "", "", "", "coords", ",", "dataA", ",", "dataB", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "dataAlphaComp", ":", "\n", "        ", "for", "j", "in", "dataAlphaComp", "[", "i", "]", ":", "\n", "            ", "for", "k", "in", "dataAlphaComp", "[", "i", "]", "[", "j", "]", ":", "\n", "                ", "coords", "[", "0", "]", ".", "append", "(", "i", ")", "\n", "coords", "[", "1", "]", ".", "append", "(", "j", ")", "\n", "coords", "[", "2", "]", ".", "append", "(", "k", ")", "\n", "dataA", ".", "append", "(", "dataAlphaComp", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "\n", "try", ":", "\n", "                    ", "dataB", ".", "append", "(", "dataBetaComp", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "", "except", ":", "\n", "                    ", "dataB", ".", "append", "(", "0", ")", "\n", "\n", "", "", "", "", "del", "dataAlphaComp", "\n", "del", "dataBetaComp", "\n", "\n", "alpha", "=", "sparse", ".", "COO", "(", "coords", ",", "dataA", ",", "shape", "=", "(", "I", ",", "I", ",", "I", ")", ",", ")", "\n", "del", "dataA", "\n", "beta", "=", "sparse", ".", "COO", "(", "coords", ",", "dataB", ",", "shape", "=", "(", "I", ",", "I", ",", "I", ")", ",", ")", "\n", "del", "coords", "\n", "del", "dataB", "\n", "\n", "# beta = beta * (alpha != 0).astype(int)", "\n", "\n", "print", "(", "\"Writing pairs\"", ")", "\n", "writePairs", "(", "alpha", ",", "beta", ",", "propTrainingSet", ",", "folder", ",", "TrTe", ")", "\n", "del", "beta", "\n", "\n", "return", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.getObservations": [[428, 457], ["print", "MMSBM_buildObservations.getData", "list", "print", "MMSBM_buildObservations.writeToFile_data", "print", "print", "MMSBM_buildObservations.getAlpha", "MMSBM_buildObservations.getAlpha", "print", "MMSBM_buildObservations.writeToFile_data", "answer.keys", "len"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.getData", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.writeToFile_data", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.getAlpha", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.getAlpha", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.None.MMSBM_buildObservations.writeToFile_data"], ["", "def", "getObservations", "(", "folder", ",", "propTrainingSet", ",", "retreatEverything", "=", "False", ",", "seuil", "=", "None", ")", ":", "\n", "    ", "propPosts", "=", "1.", "\n", "\n", "if", "folder", "==", "\"SymptomeDisease\"", ":", "# As stated in the article, we do not consider every pubmed publication but", "\n", "# only 60% of them", "\n", "        ", "propPosts", "=", "0.6", "\n", "\n", "", "print", "(", "\"Get data\"", ")", "\n", "mess", ",", "answer", ",", "listInfs", "=", "getData", "(", "folder", ",", "seuil", ",", "propPosts", ")", "\n", "\n", "indPosts", "=", "list", "(", "answer", ".", "keys", "(", ")", ")", "\n", "\n", "print", "(", "\"Saving data 1\"", ")", "\n", "writeToFile_data", "(", "folder", ",", "mess", ",", "answer", ",", "listInfs", ")", "\n", "del", "mess", "\n", "del", "answer", "\n", "print", "(", "\"Number infs :\"", ",", "len", "(", "listInfs", ")", ")", "\n", "\n", "\n", "print", "(", "\"Compute alpha\"", ")", "\n", "alpha_Tr", "=", "getAlpha", "(", "listInfs", ",", "propTrainingSet", ",", "folder", "=", "\"Data/\"", "+", "folder", "+", "\"/\"", ",", "TrTe", "=", "\"Tr\"", ",", "indPosts", "=", "indPosts", ")", "# Training set", "\n", "alpha_Te", "=", "getAlpha", "(", "listInfs", ",", "propTrainingSet", ",", "folder", "=", "\"Data/\"", "+", "folder", "+", "\"/\"", ",", "TrTe", "=", "\"Te\"", ",", "indPosts", "=", "indPosts", ")", "# Test set", "\n", "\n", "\n", "\n", "print", "(", "\"Saving data 2\"", ")", "\n", "writeToFile_data", "(", "folder", ",", "None", ",", "None", ",", "None", ",", "alpha_Tr", ",", "alpha_Te", ",", "propTrainingSet", ",", "propPosts", ")", "\n", "\n", "return", "alpha_Tr", ",", "alpha_Te", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Spotify.treatDataSpotify.saveData": [[15, 44], ["set", "open", "f.truncate", "open", "f.truncate", "print", "f.write", "f.write", "f.write", "set.add", "f.write", "str", "f.write", "str", "str", "str"], "function", ["None"], ["def", "saveData", "(", "folder", ",", "g", ",", "nounsPost", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "listInfs", "=", "set", "(", ")", "\n", "with", "open", "(", "folder", "+", "\"/nounsPost.txt\"", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "truncate", "(", "0", ")", "\n", "for", "u", "in", "nounsPost", ":", "\n", "                    ", "f", ".", "write", "(", "str", "(", "u", ")", "+", "\"\\t\"", ")", "\n", "premPass", "=", "True", "\n", "for", "v", "in", "nounsPost", "[", "u", "]", ":", "\n", "                        ", "if", "not", "premPass", ":", "\n", "                            ", "f", ".", "write", "(", "\" \"", ")", "\n", "", "f", ".", "write", "(", "str", "(", "v", ")", ")", "\n", "listInfs", ".", "add", "(", "v", ")", "\n", "premPass", "=", "False", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "", "with", "open", "(", "folder", "+", "\"graph.txt\"", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "truncate", "(", "0", ")", "\n", "for", "u", "in", "g", ".", "graphDict", ":", "\n", "                    ", "for", "v", "in", "g", ".", "graphDict", "[", "u", "]", ":", "\n", "                        ", "f", ".", "write", "(", "str", "(", "v", ")", "+", "\"\\t\"", "+", "str", "(", "u", ")", "+", "\"\\n\"", ")", "\n", "\n", "\n", "", "", "break", "\n", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "\"Retrying to write file\"", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Spotify.treatDataSpotify.retreatCorpus": [[46, 126], ["range", "sp.search", "print", "range", "print", "len", "len", "sp.user_playlist", "[].replace().lower", "artistsSongs.append", "g[].append", "range", "range", "[].replace().lower", "print", "[].replace", "art[].replace().lower", "contentPosts[].append", "artistsPar.append", "[].replace", "art[].replace().lower", "contentPosts[].append", "art[].replace", "art[].replace"], "function", ["None"], ["", "", "", "def", "retreatCorpus", "(", "songs", ")", ":", "\n", "    ", "nbPlaylists", "=", "2000", "\n", "tags", "=", "\"english,rock\"", "\n", "lgWindow", "=", "3", "\n", "\n", "g", "=", "{", "}", "\n", "contentPosts", "=", "{", "}", "\n", "\n", "borneSup", "=", "nbPlaylists", "//", "50", "+", "1", "\n", "iter", "=", "0", "\n", "tracksTot", "=", "0", "\n", "for", "page", "in", "range", "(", "0", ",", "borneSup", ")", ":", "\n", "        ", "query", "=", "sp", ".", "search", "(", "q", "=", "tags", ",", "type", "=", "\"playlist\"", ",", "limit", "=", "50", ",", "offset", "=", "50", "*", "page", ")", "\n", "for", "playlist", "in", "query", "[", "\"playlists\"", "]", "[", "\"items\"", "]", ":", "\n", "            ", "if", "iter", ">", "nbPlaylists", ":", "\n", "                ", "break", "\n", "", "iter", "+=", "1", "\n", "if", "iter", "%", "5", "==", "0", ":", "\n", "                ", "print", "(", "\"Playlist\"", ",", "iter", ",", "\"/\"", ",", "nbPlaylists", ")", "\n", "", "print", "(", "playlist", "[", "\"name\"", "]", ",", "playlist", "[", "\"tracks\"", "]", ",", "playlist", "[", "\"id\"", "]", ")", "\n", "playlistUsr", "=", "sp", ".", "user_playlist", "(", "playlist", "[", "\"owner\"", "]", "[", "\"id\"", "]", ",", "playlist", "[", "\"id\"", "]", ")", "[", "\"tracks\"", "]", "[", "\"items\"", "]", "\n", "\n", "if", "len", "(", "playlistUsr", ")", "<", "lgWindow", ":", "\n", "                ", "continue", "# On doit definir une fenetre dans laquelle on considere que les musiques ont une influence", "\n", "", "nbTrack", "=", "0", "\n", "for", "track_i", "in", "range", "(", "len", "(", "playlistUsr", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "track", "=", "playlistUsr", "[", "track_i", "]", "\n", "nameSongs", "=", "track", "[", "\"track\"", "]", "[", "\"name\"", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", ".", "lower", "(", ")", "\n", "artistsSongs", "=", "[", "]", "\n", "for", "art", "in", "track", "[", "\"track\"", "]", "[", "\"artists\"", "]", ":", "\n", "                        ", "artistsSongs", ".", "append", "(", "art", "[", "\"name\"", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", ".", "lower", "(", ")", ")", "\n", "\n", "", "time", "=", "track", "[", "\"added_at\"", "]", "\n", "nbTrack", "+=", "1", "\n", "tracksTot", "+=", "1", "\n", "\n", "if", "songs", ":", "\n", "                        ", "artists", "=", "[", "nameSongs", "]", "\n", "", "else", ":", "\n", "                        ", "artists", "=", "artistsSongs", "\n", "\n", "", "for", "name", "in", "artists", ":", "\n", "                        ", "try", ":", "\n", "                            ", "contentPosts", "[", "-", "tracksTot", "]", ".", "append", "(", "name", ")", "\n", "", "except", ":", "\n", "                            ", "contentPosts", "[", "-", "tracksTot", "]", "=", "[", "name", "]", "\n", "\n", "", "", "try", ":", "# Les +- tracktot c'est un moyen de simuler les couples message-reponse ; +tracksTot=message ; -tracksTot=reponse", "\n", "                        ", "g", "[", "tracksTot", "]", ".", "append", "(", "-", "tracksTot", ")", "\n", "", "except", ":", "\n", "                        ", "g", "[", "tracksTot", "]", "=", "[", "-", "tracksTot", "]", "\n", "\n", "\n", "", "if", "nbTrack", ">", "lgWindow", ":", "\n", "                        ", "fen", "=", "range", "(", "1", ",", "lgWindow", "+", "1", ")", "\n", "", "else", ":", "\n", "                        ", "fen", "=", "range", "(", "1", ",", "nbTrack", "+", "1", ")", "\n", "", "for", "w", "in", "fen", ":", "\n", "                        ", "txtPar", "=", "playlistUsr", "[", "track_i", "-", "w", "]", "[", "\"track\"", "]", "[", "\"name\"", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", ".", "lower", "(", ")", "\n", "artistsPar", "=", "[", "]", "\n", "for", "art", "in", "playlistUsr", "[", "track_i", "-", "w", "]", "[", "\"track\"", "]", "[", "\"artists\"", "]", ":", "\n", "                            ", "artistsPar", ".", "append", "(", "art", "[", "\"name\"", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", ".", "lower", "(", ")", ")", "\n", "\n", "", "if", "songs", ":", "\n", "                            ", "artistsPar", "=", "[", "txtPar", "]", "\n", "", "else", ":", "\n", "                            ", "artistsPar", "=", "artistsPar", "\n", "\n", "", "for", "name", "in", "artistsPar", ":", "\n", "                            ", "try", ":", "\n", "                                ", "contentPosts", "[", "tracksTot", "]", ".", "append", "(", "name", ")", "\n", "", "except", ":", "\n", "                                ", "contentPosts", "[", "tracksTot", "]", "=", "[", "name", "]", "\n", "\n", "", "", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "e", ")", "\n", "pass", "\n", "\n", "", "", "", "", "return", "g", ",", "contentPosts", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Spotify.treatDataSpotify.retreat": [[129, 137], ["treatDataSpotify.retreatCorpus", "TP1.Graph", "print", "treatDataSpotify.saveData"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Spotify.treatDataSpotify.retreatCorpus", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.saveData"], ["", "def", "retreat", "(", "folder", ",", "listFiles", "=", "None", ",", "songs", "=", "False", ")", ":", "\n", "    ", "g", ",", "contentPost", "=", "retreatCorpus", "(", "songs", "=", "songs", ")", "\n", "\n", "g", "=", "TP1", ".", "Graph", "(", "g", ")", "\n", "\n", "folder", "=", "\"Data/\"", "+", "folder", "+", "\"/\"", "\n", "print", "(", "\"Saving data\"", ")", "\n", "saveData", "(", "folder", ",", "g", ",", "contentPost", ")", "", "", ""]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.PubMed.treatDataPubMed.esearch_query": [[13, 33], ["list", "requests.get", "xml.fromstring", "time.sleep", "int", "ET.fromstring.findtext", "ET.fromstring.findall"], "function", ["None"], ["def", "esearch_query", "(", "payload", ",", "retmax", "=", "100", ",", "sleep", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Query the esearch E-utility.\n    \"\"\"", "\n", "url", "=", "'http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi'", "\n", "payload", "[", "'retmax'", "]", "=", "retmax", "\n", "payload", "[", "'retstart'", "]", "=", "0", "\n", "ids", "=", "list", "(", ")", "\n", "count", "=", "1", "\n", "while", "payload", "[", "'retstart'", "]", "<", "count", ":", "\n", "        ", "response", "=", "requests", ".", "get", "(", "url", ",", "params", "=", "payload", ")", "\n", "xml", "=", "ET", ".", "fromstring", "(", "response", ".", "content", ")", "\n", "try", ":", "\n", "            ", "count", "=", "int", "(", "xml", ".", "findtext", "(", "'Count'", ")", ")", "\n", "", "except", ":", "\n", "            ", "count", "=", "-", "1", "\n", "", "ids", "+=", "[", "xml_id", ".", "text", "for", "xml_id", "in", "xml", ".", "findall", "(", "'IdList/Id'", ")", "]", "\n", "payload", "[", "'retstart'", "]", "+=", "retmax", "\n", "time", ".", "sleep", "(", "sleep", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.PubMed.treatDataPubMed.harvest": [[35, 159], ["pandas.read_table", "print", "pandas.DataFrame", "print", "list", "pandas.DataFrame.iterrows", "pandas.DataFrame", "open", "open", "len", "gzip.open", "io.TextIOWrapper", "pandas.DataFrame.to_csv", "l.split", "nameQueryDis.append", "l.split", "nameQuerySym.append", "names.split", "names.split", "treatDataPubMed.esearch_query", "len", "list.append", "print", "print", "row.mesh_name.lower", "len", "pandas.DataFrame", "print", "print", "open", "io.TextIOWrapper.write", "open", "f.write", "open", "f.write", "row.mesh_name.replace", "str", "str", "len"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.PubMed.treatDataPubMed.esearch_query"], ["", "def", "harvest", "(", "folder", ")", ":", "\n", "# Read MeSH terms to MeSH names", "\n", "    ", "url", "=", "'https://raw.githubusercontent.com/dhimmel/mesh/e561301360e6de2140dedeaa7c7e17ce4714eb7f/data/terms.tsv'", "\n", "mesh_df", "=", "pandas", ".", "read_table", "(", "url", ")", "\n", "\n", "nameQueryDis", "=", "[", "]", "\n", "with", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/Raw/NamesDiseases.txt\"", ")", "as", "f", ":", "\n", "        ", "for", "l", "in", "f", ":", "\n", "            ", "names", ",", "_", "=", "l", ".", "split", "(", "\"\\t\"", ")", "\n", "name", "=", "names", ".", "split", "(", "', '", ")", "[", "0", "]", "\n", "nameQueryDis", ".", "append", "(", "name", ")", "\n", "\n", "", "", "nameQuerySym", "=", "[", "]", "\n", "with", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/Raw/NamesSymptoms.txt\"", ")", "as", "f", ":", "\n", "        ", "for", "l", "in", "f", ":", "\n", "            ", "names", ",", "_", "=", "l", ".", "split", "(", "\"\\t\"", ")", "\n", "name", "=", "names", ".", "split", "(", "', '", ")", "[", "0", "]", "\n", "nameQuerySym", ".", "append", "(", "name", ")", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "print", "(", "\"Diseases\"", ")", "\n", "# Diseases", "\n", "disease_df", "=", "pandas", ".", "DataFrame", "(", "nameQueryDis", ",", "columns", "=", "{", "\"mesh_name\"", "}", ")", "\n", "bornes", "=", "[", "0", ",", "len", "(", "disease_df", ")", "]", "\n", "print", "(", "bornes", ")", "\n", "disease_df", "=", "disease_df", "[", "disease_df", ".", "index", ">=", "bornes", "[", "0", "]", "]", "\n", "disease_df", "=", "disease_df", "[", "disease_df", ".", "index", "<", "bornes", "[", "1", "]", "]", "\n", "\n", "rows_out", "=", "list", "(", ")", "\n", "attemps", "=", "0", "\n", "\n", "# Query Diseases", "\n", "for", "i", ",", "row", "in", "disease_df", ".", "iterrows", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "term_query", "=", "'{disease}[MeSH Major Topic]'", ".", "format", "(", "disease", "=", "row", ".", "mesh_name", ".", "lower", "(", ")", ")", "\n", "payload", "=", "{", "'db'", ":", "'pubmed'", ",", "'term'", ":", "term_query", "}", "\n", "pmids", "=", "esearch_query", "(", "payload", ",", "retmax", "=", "10000", ")", "\n", "row", "[", "'term_query'", "]", "=", "term_query", "\n", "row", "[", "'n_articles'", "]", "=", "len", "(", "pmids", ")", "\n", "row", "[", "'pubmed_ids'", "]", "=", "'|'", ".", "join", "(", "pmids", ")", "\n", "rows_out", ".", "append", "(", "row", ")", "\n", "print", "(", "'{} articles for {}'", ".", "format", "(", "len", "(", "pmids", ")", ",", "row", ".", "mesh_name", ")", ")", "\n", "\n", "while", "True", ":", "\n", "                    ", "try", ":", "\n", "                        ", "disease_pmids_df", "=", "pandas", ".", "DataFrame", "(", "rows_out", ")", "\n", "print", "(", "\"begWrite\"", ")", "\n", "with", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/\"", "+", "'Raw/disease-pmids_'", "+", "str", "(", "i", ")", "+", "\"_\"", "+", "row", ".", "mesh_name", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "+", "'.tsv'", ",", "'w'", ")", "as", "write_file", ":", "\n", "#write_file = io.TextIOWrapper(write_file)", "\n", "#disease_pmids_df.to_csv(write_file, sep='\\t', index=False)", "\n", "                            ", "txt", "=", "\"mesh_name\\tterm_query\\tn_articles\\tpubmed_ids\\n\"", "\n", "txt", "+=", "row", ".", "mesh_name", "+", "\"\\t\"", "+", "term_query", "+", "\"\\t\"", "+", "str", "(", "len", "(", "pmids", ")", ")", "+", "\"\\t\"", "+", "'|'", ".", "join", "(", "pmids", ")", "+", "\"\\n\"", "\n", "#print(txt)", "\n", "write_file", ".", "write", "(", "txt", ")", "\n", "\n", "", "print", "(", "\"endWrite\"", ")", "\n", "break", "\n", "", "except", ":", "\n", "                        ", "attemps", "+=", "1", "\n", "if", "attemps", ">", "5", ":", "\n", "                            ", "with", "open", "(", "\"0_incorrects.txt\"", ",", "\"a\"", ")", "as", "f", ":", "\n", "                                ", "f", ".", "write", "(", "row", ".", "mesh_name", "+", "\"\\n\"", ")", "\n", "", "break", "\n", "", "pass", "\n", "\n", "", "", "attemps", "=", "0", "\n", "break", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "\"==========================\"", ",", "e", ")", "\n", "attemps", "+=", "1", "\n", "if", "attemps", ">", "5", ":", "\n", "                    ", "with", "open", "(", "\"0_incorrects.txt\"", ",", "\"a\"", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "row", ".", "mesh_name", "+", "\"\\n\"", ")", "\n", "", "break", "\n", "", "continue", "\n", "\n", "", "", "", "disease_pmids_df", "=", "pandas", ".", "DataFrame", "(", "rows_out", ")", "\n", "\n", "with", "gzip", ".", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/\"", "+", "'Raw/disease-pmids.tsv.gz'", ",", "'w'", ")", "as", "write_file", ":", "\n", "        ", "write_file", "=", "io", ".", "TextIOWrapper", "(", "write_file", ")", "\n", "disease_pmids_df", ".", "to_csv", "(", "write_file", ",", "sep", "=", "'\\t'", ",", "index", "=", "False", ")", "\n", "\n", "", "'''\n    print(\"Symptoms\")\n    # Symptoms\n\n    symptom_df = pandas.DataFrame(nameQuerySym, columns={\"mesh_name\"})\n\n    rows_out = list()\n\n    # Query symptoms\n    for i, row in symptom_df.iterrows():\n        while True:\n            try:\n                term_query = '{symptom}[MeSH Terms:noexp]'.format(symptom = row.mesh_name.lower())\n                payload = {'db': 'pubmed', 'term': term_query}\n                pmids = esearch_query(payload, retmax = 5000, sleep=2)\n                row['term_query'] = term_query\n                row['n_articles'] = len(pmids)\n                row['pubmed_ids'] = '|'.join(pmids)\n                rows_out.append(row)\n                print('{} articles for {}'.format(len(pmids), row.mesh_name))\n\n                symptom_pmids_df = pandas.DataFrame(rows_out)\n                with gzip.open(\"Data/\" + folder + \"/\" + 'Raw/symptom-pmids.tsv.gz', 'w') as write_file:\n                    write_file = io.TextIOWrapper(write_file)\n                    symptom_pmids_df.to_csv(write_file, sep='\\t', index=False)\n\n                break\n            except:\n                continue\n\n    symptom_pmids_df = pandas.DataFrame(rows_out)\n\n    with gzip.open(\"Data/\" + folder + \"/\"+'Raw/symptom-pmids.tsv.gz', 'w') as write_file:\n        write_file = io.TextIOWrapper(write_file)\n        symptom_pmids_df.to_csv(write_file, sep='\\t', index=False)\n\n    print(symptom_pmids_df.head())\n    '''", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.PubMed.treatDataPubMed.read_pmids_tsv": [[161, 165], ["pandas.read_table"], "function", ["None"], ["", "def", "read_pmids_tsv", "(", "path", ",", "key", ",", "min_articles", "=", "5", ")", ":", "\n", "    ", "pmids_df", "=", "pandas", ".", "read_table", "(", "path", ")", "#, compression='gzip')", "\n", "pmids_df", "=", "pmids_df", "[", "pmids_df", ".", "n_articles", ">=", "min_articles", "]", "\n", "return", "pmids_df", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.PubMed.treatDataPubMed.saveData": [[167, 196], ["set", "open", "f.truncate", "open", "f.truncate", "print", "f.write", "f.write", "f.write", "set.add", "f.write", "str", "f.write", "str", "str", "str"], "function", ["None"], ["", "def", "saveData", "(", "folder", ",", "g", ",", "nounsPost", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "listInfs", "=", "set", "(", ")", "\n", "with", "open", "(", "folder", "+", "\"/nounsPost.txt\"", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "truncate", "(", "0", ")", "\n", "for", "u", "in", "nounsPost", ":", "\n", "                    ", "f", ".", "write", "(", "str", "(", "u", ")", "+", "\"\\t\"", ")", "\n", "premPass", "=", "True", "\n", "for", "v", "in", "nounsPost", "[", "u", "]", ":", "\n", "                        ", "if", "not", "premPass", ":", "\n", "                            ", "f", ".", "write", "(", "\" \"", ")", "\n", "", "f", ".", "write", "(", "str", "(", "v", ")", ")", "\n", "listInfs", ".", "add", "(", "v", ")", "\n", "premPass", "=", "False", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "", "with", "open", "(", "folder", "+", "\"/graph.txt\"", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "truncate", "(", "0", ")", "\n", "for", "u", "in", "g", ".", "graphDict", ":", "\n", "                    ", "for", "v", "in", "g", ".", "graphDict", "[", "u", "]", ":", "\n", "                        ", "f", ".", "write", "(", "str", "(", "v", ")", "+", "\"\\t\"", "+", "str", "(", "u", ")", "+", "\"\\n\"", ")", "\n", "\n", "\n", "", "", "break", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Retrying to write file :\"", ",", "e", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.PubMed.treatDataPubMed.concatenateDiseases": [[198, 219], ["listdir", "list", "pandas.DataFrame", "temp.append", "open", "f.readline", "f.readline().split", "list.append", "f.readline"], "function", ["None"], ["", "", "", "def", "concatenateDiseases", "(", "folder", ")", ":", "\n", "    ", "from", "os", "import", "listdir", "\n", "listFiles", "=", "listdir", "(", "\"Data/\"", "+", "folder", "+", "\"/Raw/\"", ")", "\n", "temp", "=", "[", "]", "\n", "for", "n", "in", "listFiles", ":", "\n", "        ", "if", "\"disease\"", "in", "n", "and", "\".tsv\"", "in", "n", ":", "\n", "            ", "temp", ".", "append", "(", "n", ")", "\n", "", "", "listFiles", "=", "temp", "\n", "\n", "rows", "=", "list", "(", ")", "\n", "for", "file", "in", "listFiles", ":", "\n", "        ", "with", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/\"", "+", "'Raw/'", "+", "file", ",", "'r'", ")", "as", "f", ":", "\n", "#print(file)", "\n", "            ", "f", ".", "readline", "(", ")", "\n", "r", "=", "{", "}", "\n", "r", "[", "\"mesh_name\"", "]", ",", "r", "[", "\"term_query\"", "]", ",", "r", "[", "\"n_articles\"", "]", ",", "r", "[", "\"pubmed_ids\"", "]", "=", "f", ".", "readline", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "rows", ".", "append", "(", "r", ")", "\n", "\n", "", "", "disease_df", "=", "pandas", ".", "DataFrame", "(", "rows", ")", "\n", "\n", "return", "disease_df", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.PubMed.treatDataPubMed.treatHarvestedData": [[221, 282], ["treatDataPubMed.read_pmids_tsv", "treatDataPubMed.concatenateDiseases", "print", "zip", "print", "zip", "print", "len", "print", "set", "idPudDis.split", "[].replace", "listDis.append", "idPudSym.split", "[].replace", "listSym.append", "print", "g[].append", "tabPublis[].append", "tabPublis[].append", "[].replace.split", "[].replace.split", "contentPost[].append", "contentPost[].append"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.PubMed.treatDataPubMed.read_pmids_tsv", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.PubMed.treatDataPubMed.concatenateDiseases"], ["", "def", "treatHarvestedData", "(", "folder", ")", ":", "\n", "\n", "    ", "symptom_df", "=", "read_pmids_tsv", "(", "\"Data/\"", "+", "folder", "+", "\"/\"", "+", "'Raw/symptom-pmids.tsv.gz'", ",", "key", "=", "'mesh_id'", ")", "\n", "disease_df", "=", "concatenateDiseases", "(", "folder", ")", "\n", "\n", "print", "(", "\"Gathering diseases\"", ")", "\n", "tabPublis", "=", "{", "}", "\n", "listDis", "=", "[", "]", "\n", "for", "(", "dis", ",", "idPudDis", ")", "in", "zip", "(", "disease_df", "[", "\"mesh_name\"", "]", ",", "disease_df", "[", "\"pubmed_ids\"", "]", ")", ":", "\n", "        ", "tabIDsDis", "=", "idPudDis", ".", "split", "(", "\"|\"", ")", "\n", "dis", "=", "dis", ".", "split", "(", "\", \"", ")", "[", "0", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "listDis", ".", "append", "(", "dis", ")", "\n", "for", "IDDis", "in", "tabIDsDis", ":", "\n", "            ", "try", ":", "\n", "                ", "tabPublis", "[", "IDDis", "]", ".", "append", "(", "dis", ")", "\n", "", "except", ":", "\n", "                ", "tabPublis", "[", "IDDis", "]", "=", "[", "dis", "]", "\n", "\n", "\n", "", "", "", "print", "(", "\"Gathering symptoms\"", ")", "\n", "listSym", "=", "[", "]", "\n", "for", "(", "sym", ",", "idPudSym", ")", "in", "zip", "(", "symptom_df", "[", "\"mesh_name\"", "]", ",", "symptom_df", "[", "\"pubmed_ids\"", "]", ")", ":", "\n", "        ", "tabIDsSym", "=", "idPudSym", ".", "split", "(", "\"|\"", ")", "\n", "sym", "=", "sym", ".", "split", "(", "\", \"", ")", "[", "0", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "listSym", ".", "append", "(", "sym", ")", "\n", "for", "IDSym", "in", "tabIDsSym", ":", "\n", "            ", "try", ":", "\n", "                ", "tabPublis", "[", "IDSym", "]", ".", "append", "(", "sym", ")", "\n", "", "except", ":", "\n", "                ", "pass", "# Si y'a aucune maladie osef des symptomes", "\n", "\n", "", "", "", "print", "(", "\"Recreate articles\"", ")", "\n", "iter", "=", "1", "\n", "g", "=", "{", "}", "\n", "contentPost", "=", "{", "}", "\n", "lenLoop", "=", "len", "(", "tabPublis", ")", "\n", "print", "(", "lenLoop", ")", "\n", "listInfs", "=", "set", "(", ")", "\n", "for", "id", "in", "tabPublis", ":", "\n", "        ", "if", "iter", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "iter", "*", "100.", "/", "lenLoop", ",", "\"%\"", ")", "\n", "", "try", ":", "\n", "            ", "g", "[", "iter", "]", ".", "append", "(", "-", "iter", ")", "\n", "", "except", ":", "\n", "            ", "g", "[", "iter", "]", "=", "[", "-", "iter", "]", "\n", "\n", "", "for", "elem", "in", "tabPublis", "[", "id", "]", ":", "\n", "            ", "if", "elem", "in", "listSym", ":", "\n", "                ", "try", ":", "\n", "                    ", "contentPost", "[", "iter", "]", ".", "append", "(", "elem", ")", "\n", "", "except", ":", "\n", "                    ", "contentPost", "[", "iter", "]", "=", "[", "elem", "]", "\n", "", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "contentPost", "[", "-", "iter", "]", ".", "append", "(", "elem", ")", "\n", "", "except", ":", "\n", "                    ", "contentPost", "[", "-", "iter", "]", "=", "[", "elem", "]", "\n", "\n", "", "", "", "iter", "+=", "1", "\n", "\n", "", "return", "g", ",", "contentPost", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.PubMed.treatDataPubMed.retreat": [[284, 292], ["treatDataPubMed.treatHarvestedData", "TP1.Graph", "print", "treatDataPubMed.saveData"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.PubMed.treatDataPubMed.treatHarvestedData", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.saveData"], ["", "def", "retreat", "(", "folder", ",", "listFiles", "=", "None", ")", ":", "\n", "    ", "g", ",", "contentPost", "=", "treatHarvestedData", "(", "folder", ")", "\n", "\n", "g", "=", "TP1", ".", "Graph", "(", "g", ")", "\n", "\n", "folder", "=", "\"Data/\"", "+", "folder", "+", "\"/\"", "\n", "print", "(", "\"Saving data\"", ")", "\n", "saveData", "(", "folder", ",", "g", ",", "contentPost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Twitter.treatDataTwitter.saveData": [[224, 253], ["set", "open", "f.truncate", "open", "f.truncate", "print", "f.write", "f.write", "f.write", "set.add", "f.write", "str", "f.write", "str", "str", "str"], "function", ["None"], ["", "", "", "", "", "def", "saveData", "(", "folder", ",", "g", ",", "nounsPost", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "listInfs", "=", "set", "(", ")", "\n", "with", "open", "(", "folder", "+", "\"nounsPost.txt\"", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "truncate", "(", "0", ")", "\n", "for", "u", "in", "nounsPost", ":", "\n", "                    ", "f", ".", "write", "(", "str", "(", "u", ")", "+", "\"\\t\"", ")", "\n", "premPass", "=", "True", "\n", "for", "v", "in", "nounsPost", "[", "u", "]", ":", "\n", "                        ", "if", "not", "premPass", ":", "\n", "                            ", "f", ".", "write", "(", "\" \"", ")", "\n", "", "f", ".", "write", "(", "str", "(", "v", ")", ")", "\n", "listInfs", ".", "add", "(", "v", ")", "\n", "premPass", "=", "False", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "", "with", "open", "(", "folder", "+", "\"graph.txt\"", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "truncate", "(", "0", ")", "\n", "for", "u", "in", "g", ".", "graphDict", ":", "\n", "                    ", "for", "v", "in", "g", ".", "graphDict", "[", "u", "]", ":", "\n", "                        ", "f", ".", "write", "(", "str", "(", "v", ")", "+", "\"\\t\"", "+", "str", "(", "u", ")", "+", "\"\\n\"", ")", "\n", "\n", "\n", "", "", "break", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Retrying to write file :\"", ",", "e", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Twitter.treatDataTwitter.getCorpus": [[255, 296], ["print", "print", "open", "open", "line.replace().split", "infs.split.split", "infs.split.pop", "line.replace().split", "infs.split.split", "infs.split.pop", "inf.split", "inf.split", "line.replace", "twUsr[].append", "line.replace", "histUsr[].append"], "function", ["None"], ["", "", "", "def", "getCorpus", "(", ")", ":", "\n", "    ", "print", "(", "\"Get tweets\"", ")", "\n", "twUsr", "=", "{", "}", "\n", "with", "open", "(", "\"Data/Twitter/Raw/twUsrSsAds.txt\"", ",", "\"r\"", ")", "as", "fTw", ":", "\n", "        ", "for", "line", "in", "fTw", ":", "\n", "            ", "idUsr", ",", "infs", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "infs", "=", "infs", ".", "split", "(", "\";\"", ")", "\n", "infs", ".", "pop", "(", "-", "1", ")", "\n", "for", "inf", "in", "infs", ":", "\n", "                ", "time", ",", "url", "=", "inf", ".", "split", "(", "\" \"", ")", "\n", "try", ":", "\n", "                    ", "twUsr", "[", "idUsr", "]", ".", "append", "(", "(", "time", ",", "url", ",", "\"tw\"", ")", ")", "\n", "", "except", ":", "\n", "                    ", "twUsr", "[", "idUsr", "]", "=", "[", "(", "time", ",", "url", ",", "\"tw\"", ")", "]", "\n", "\n", "", "", "", "", "print", "(", "\"Get hist\"", ")", "\n", "histUsr", "=", "{", "}", "\n", "i", "=", "0", "\n", "with", "open", "(", "\"Data/Twitter/Raw/histUsrSsAds.txt\"", ",", "\"r\"", ")", "as", "fHist", ":", "\n", "        ", "for", "line", "in", "fHist", ":", "\n", "            ", "idUsr", ",", "infs", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "\n", "i", "+=", "1", "\n", "if", "i", ">", "200000", ":", "\n", "                ", "pass", "\n", "break", "\n", "\n", "", "if", "idUsr", "not", "in", "twUsr", ":", "\n", "                ", "continue", "\n", "", "infs", "=", "infs", ".", "split", "(", "\";\"", ")", "\n", "infs", ".", "pop", "(", "-", "1", ")", "\n", "for", "inf", "in", "infs", ":", "\n", "                ", "time", ",", "url", "=", "inf", ".", "split", "(", "\" \"", ")", "\n", "try", ":", "\n", "                    ", "histUsr", "[", "idUsr", "]", ".", "append", "(", "(", "time", ",", "url", ",", "\"hi\"", ")", ")", "\n", "", "except", ":", "\n", "                    ", "histUsr", "[", "idUsr", "]", "=", "[", "(", "time", ",", "url", ",", "\"hi\"", ")", "]", "\n", "\n", "\n", "\n", "", "", "", "", "return", "twUsr", ",", "histUsr", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Twitter.treatDataTwitter.getContentPosts": [[298, 353], ["print", "len", "print", "list", "reversed", "len", "sorted", "intervals[].append", "g[].append", "intervals[].append"], "function", ["None"], ["", "def", "getContentPosts", "(", "twUsr", ",", "histUsr", ")", ":", "\n", "    ", "print", "(", "\"Get contentPosts\"", ")", "\n", "intervals", "=", "{", "}", "\n", "g", "=", "{", "}", "\n", "packTweets", "=", "False", "\n", "indWin", "=", "0", "\n", "i", "=", "0", "\n", "lg", "=", "len", "(", "twUsr", ")", "\n", "ilg", "=", "0", "\n", "for", "u", "in", "twUsr", ":", "\n", "        ", "ilg", "+=", "1", "\n", "if", "ilg", "%", "10000", "==", "0", ":", "\n", "            ", "print", "(", "ilg", "*", "100.", "/", "lg", ",", "\"%\"", ")", "\n", "", "if", "u", "in", "histUsr", ":", "\n", "\n", "            ", "seq", "=", "twUsr", "[", "u", "]", "+", "histUsr", "[", "u", "]", "\n", "seq", "=", "list", "(", "reversed", "(", "sorted", "(", "seq", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", ")", ")", "\n", "\n", "indSeq", "=", "0", "\n", "selfEncounter", "=", "False", "\n", "while", "indSeq", "<", "len", "(", "seq", ")", ":", "\n", "                ", "s", "=", "seq", "[", "indSeq", "]", "\n", "if", "s", "[", "2", "]", "==", "\"tw\"", ":", "\n", "                    ", "if", "not", "packTweets", ":", "\n", "                        ", "i", "+=", "1", "\n", "try", ":", "\n", "                            ", "g", "[", "-", "i", "]", ".", "append", "(", "i", ")", "\n", "", "except", ":", "\n", "                            ", "g", "[", "-", "i", "]", "=", "[", "i", "]", "\n", "", "", "try", ":", "\n", "                        ", "intervals", "[", "i", "]", ".", "append", "(", "s", "[", "1", "]", ")", "\n", "", "except", ":", "\n", "                        ", "intervals", "[", "i", "]", "=", "[", "s", "[", "1", "]", "]", "\n", "", "packTweets", "=", "True", "\n", "selfEncounter", "=", "False", "\n", "indWin", "=", "0", "\n", "\n", "", "else", ":", "\n", "                    ", "packTweets", "=", "False", "\n", "if", "i", "in", "intervals", ":", "\n", "                        ", "if", "s", "[", "1", "]", "in", "intervals", "[", "i", "]", ":", "\n", "                            ", "selfEncounter", "=", "True", "\n", "\n", "", "", "if", "indWin", "<=", "2", "and", "-", "i", "in", "g", "and", "selfEncounter", ":", "\n", "                        ", "try", ":", "\n", "                            ", "intervals", "[", "-", "i", "]", ".", "append", "(", "s", "[", "1", "]", ")", "\n", "", "except", ":", "\n", "                            ", "intervals", "[", "-", "i", "]", "=", "[", "s", "[", "1", "]", "]", "\n", "", "indWin", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "pass", "\n", "\n", "", "", "indSeq", "+=", "1", "\n", "\n", "", "", "", "return", "g", ",", "intervals", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Twitter.treatDataTwitter.epurate": [[355, 364], ["range", "len"], "function", ["None"], ["", "def", "epurate", "(", "intervals", ")", ":", "\n", "    ", "lg", "=", "len", "(", "intervals", ")", "//", "2", "\n", "for", "i", "in", "range", "(", "1", ",", "lg", "+", "1", ")", ":", "\n", "        ", "u", "=", "intervals", "[", "i", "]", "[", "0", "]", "\n", "if", "u", "not", "in", "intervals", "[", "-", "i", "]", ":", "\n", "            ", "del", "intervals", "[", "i", "]", "\n", "del", "intervals", "[", "-", "i", "]", "\n", "\n", "", "", "return", "intervals", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Twitter.treatDataTwitter.retreat": [[365, 372], ["treatDataTwitter.getCorpus", "treatDataTwitter.getContentPosts", "TP1.Graph", "treatDataTwitter.saveData"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Twitter.treatDataTwitter.getCorpus", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Twitter.treatDataTwitter.getContentPosts", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.saveData"], ["", "def", "retreat", "(", "folder", ")", ":", "\n", "    ", "twUsr", ",", "histUsr", "=", "getCorpus", "(", ")", "\n", "g", ",", "intervals", "=", "getContentPosts", "(", "twUsr", ",", "histUsr", ")", "\n", "#intervals=epurate(intervals)", "\n", "\n", "g", "=", "TP1", ".", "Graph", "(", "g", ")", "\n", "saveData", "(", "\"Data/\"", "+", "folder", "+", "\"/\"", ",", "g", ",", "intervals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.preprocess_nltk": [[26, 32], ["nltk.word_tokenize", "nltk.pos_tag", "txt.replace.replace"], "function", ["None"], ["def", "preprocess_nltk", "(", "txt", ")", ":", "\n", "    ", "for", "punc", "in", "punctuations", ":", "\n", "        ", "txt", "=", "txt", ".", "replace", "(", "punc", ",", "\"\"", ")", "\n", "", "txt", "=", "nltk", ".", "word_tokenize", "(", "txt", ")", "\n", "txt", "=", "nltk", ".", "pos_tag", "(", "txt", ")", "\n", "return", "txt", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.preprocess_spacy": [[33, 39], ["spacy_nlp", "txt.replace.replace"], "function", ["None"], ["", "def", "preprocess_spacy", "(", "txt", ")", ":", "\n", "    ", "for", "punc", "in", "punctuations", ":", "\n", "        ", "txt", "=", "txt", ".", "replace", "(", "punc", ",", "\"\"", ")", "\n", "", "txt", "=", "spacy_nlp", "(", "txt", ")", "\n", "\n", "return", "txt", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.saveData": [[40, 69], ["set", "open", "f.truncate", "open", "f.truncate", "print", "f.write", "f.write", "f.write", "set.add", "f.write", "str", "f.write", "str", "str", "str"], "function", ["None"], ["", "def", "saveData", "(", "folder", ",", "g", ",", "nounsPost", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "listInfs", "=", "set", "(", ")", "\n", "with", "open", "(", "folder", "+", "\"nounsPost.txt\"", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "truncate", "(", "0", ")", "\n", "for", "u", "in", "nounsPost", ":", "\n", "                    ", "f", ".", "write", "(", "str", "(", "u", ")", "+", "\"\\t\"", ")", "\n", "premPass", "=", "True", "\n", "for", "v", "in", "nounsPost", "[", "u", "]", ":", "\n", "                        ", "if", "not", "premPass", ":", "\n", "                            ", "f", ".", "write", "(", "\" \"", ")", "\n", "", "f", ".", "write", "(", "str", "(", "v", ")", ")", "\n", "listInfs", ".", "add", "(", "v", ")", "\n", "premPass", "=", "False", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "", "with", "open", "(", "folder", "+", "\"graph.txt\"", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "truncate", "(", "0", ")", "\n", "for", "u", "in", "g", ".", "graphDict", ":", "\n", "                    ", "for", "v", "in", "g", ".", "graphDict", "[", "u", "]", ":", "\n", "                        ", "f", ".", "write", "(", "str", "(", "v", ")", "+", "\"\\t\"", "+", "str", "(", "u", ")", "+", "\"\\n\"", ")", "\n", "\n", "\n", "", "", "break", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Retrying to write file :\"", ",", "e", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.preprocess_word": [[71, 82], ["m.lower.lower", "InflectEngine.singular_noun"], "function", ["None"], ["", "", "", "def", "preprocess_word", "(", "m", ")", ":", "\n", "    ", "m", "=", "m", ".", "lower", "(", ")", "\n", "#m = delete repetitions", "\n", "try", ":", "\n", "        ", "sing", "=", "InflectEngine", ".", "singular_noun", "(", "m", ")", "\n", "if", "sing", "is", "not", "False", ":", "\n", "            ", "m", "=", "sing", "\n", "", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.retreatZST": [[84, 153], ["listdir", "open", "zstd.ZstdDecompressor", "temp.append", "zstd.ZstdDecompressor.stream_reader", "reader.read", "reader.read.decode", "chunk.decode.split", "print", "enumerate", "len", "json.loads", "treatDataReddit.preprocess_spacy", "g[].append", "treatDataReddit.preprocess_word", "words.append", "func.startswith", "func.startswith", "len", "len"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.preprocess_spacy", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.preprocess_word"], ["", "def", "retreatZST", "(", "folder", ",", "listFiles", ")", ":", "\n", "    ", "if", "listFiles", "is", "None", ":", "\n", "        ", "from", "os", "import", "listdir", "\n", "listFiles", "=", "listdir", "(", "\"Data/\"", "+", "folder", "+", "\"/Raw/\"", ")", "\n", "temp", "=", "[", "]", "\n", "for", "n", "in", "listFiles", ":", "\n", "            ", "if", "\"zst\"", "in", "n", ":", "\n", "                ", "temp", ".", "append", "(", "n", ")", "\n", "", "", "listFiles", "=", "temp", "\n", "\n", "#fSubRedNews = open(\"Data/\"+folder+\"/Raw/SubRedNews0419.txt\", \"a\")", "\n", "#fSubRedNews.truncate(0)", "\n", "", "g", "=", "{", "}", "\n", "contentPost", "=", "{", "}", "\n", "import", "zstandard", "as", "zstd", "\n", "for", "file", "in", "listFiles", ":", "\n", "        ", "with", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/Raw/\"", "+", "file", ",", "'rb'", ")", "as", "fh", ":", "\n", "            ", "dctx", "=", "zstd", ".", "ZstdDecompressor", "(", ")", "\n", "s", "=", "179369162500", "# Taille estimee du fichier decompresse", "\n", "with", "dctx", ".", "stream_reader", "(", "fh", ")", "as", "reader", ":", "\n", "                ", "previous_line", "=", "\"\"", "\n", "iterChunk", "=", "0", "\n", "while", "True", ":", "\n", "                    ", "chunk", "=", "reader", ".", "read", "(", "2", "**", "27", ")", "\n", "iterChunk", "+=", "1", "\n", "\n", "if", "not", "chunk", ":", "\n", "                        ", "break", "\n", "\n", "", "string_data", "=", "chunk", ".", "decode", "(", "'utf-8'", ")", "\n", "lines", "=", "string_data", ".", "split", "(", "\"\\n\"", ")", "\n", "print", "(", "iterChunk", "*", "2", "**", "27", "*", "100.", "/", "s", ",", "\"% -\"", ",", "len", "(", "lines", ")", ",", "\" lines\"", ")", "\n", "iter", "=", "0", "\n", "for", "iter", ",", "line", "in", "enumerate", "(", "lines", "[", ":", "-", "1", "]", ")", ":", "\n", "                        ", "if", "iter", "==", "0", ":", "\n", "                            ", "line", "=", "previous_line", "+", "line", "\n", "", "if", "iter", ">", "3000", ":", "\n", "                            ", "pass", "\n", "# break", "\n", "\n", "# print(line)", "\n", "# print()", "\n", "", "l", "=", "json", ".", "loads", "(", "line", ")", "\n", "\n", "# print(l)", "\n", "if", "l", "[", "\"subreddit\"", "]", "!=", "\"news\"", ":", "\n", "                            ", "continue", "\n", "\n", "", "txtPar", "=", "l", "[", "\"parent_id\"", "]", "[", "3", ":", "]", "\n", "txtSon", "=", "l", "[", "\"id\"", "]", "\n", "\n", "try", ":", "\n", "                            ", "g", "[", "txtPar", "]", ".", "append", "(", "txtSon", ")", "\n", "", "except", ":", "\n", "                            ", "g", "[", "txtPar", "]", "=", "[", "txtSon", "]", "\n", "\n", "", "taggedSent", "=", "preprocess_spacy", "(", "l", "[", "\"body\"", "]", ")", "\n", "words", "=", "[", "]", "\n", "for", "token", "in", "taggedSent", ":", "\n", "                            ", "word", ",", "func", "=", "token", ".", "text", ",", "token", ".", "tag_", "\n", "word", "=", "preprocess_word", "(", "word", ")", "\n", "if", "(", "func", ".", "startswith", "(", "'NN'", ")", "or", "func", ".", "startswith", "(", "'JJ'", ")", ")", "and", "len", "(", "word", ")", ">", "1", "and", "len", "(", "word", ")", "<", "20", ":", "\n", "                                ", "words", ".", "append", "(", "word", ")", "\n", "\n", "", "", "contentPost", "[", "txtSon", "]", "=", "words", "\n", "\n", "", "previous_line", "=", "lines", "[", "-", "1", "]", "\n", "\n", "", "", "", "", "return", "g", ",", "contentPost", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.retreatUncompressed": [[155, 212], ["listdir", "print", "open().readlines", "open", "temp.append", "open", "json.loads", "treatDataReddit.preprocess_spacy", "print", "g[].append", "treatDataReddit.preprocess_word", "func.startswith", "words.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.preprocess_spacy", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.preprocess_word"], ["", "def", "retreatUncompressed", "(", "folder", ",", "listFiles", "=", "None", ")", ":", "\n", "    ", "if", "listFiles", "is", "None", ":", "\n", "        ", "from", "os", "import", "listdir", "\n", "listFiles", "=", "listdir", "(", "\"Data/\"", "+", "folder", "+", "\"/Raw/\"", ")", "\n", "temp", "=", "[", "]", "\n", "for", "n", "in", "listFiles", ":", "\n", "            ", "if", "\"zst\"", "not", "in", "n", ":", "\n", "                ", "temp", ".", "append", "(", "n", ")", "\n", "", "", "listFiles", "=", "temp", "\n", "\n", "print", "(", "listFiles", ")", "\n", "\n", "", "g", "=", "{", "}", "\n", "contentPost", "=", "{", "}", "\n", "for", "file", "in", "listFiles", ":", "\n", "        ", "lenFile", "=", "0", "\n", "for", "_", "in", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/Raw/\"", "+", "file", ")", ".", "readlines", "(", ")", ":", "lenFile", "+=", "1", "\n", "with", "open", "(", "\"Data/\"", "+", "folder", "+", "\"/Raw/\"", "+", "file", ")", "as", "f", ":", "\n", "            ", "iter", "=", "0", "\n", "\n", "for", "line", "in", "f", ":", "\n", "                ", "iter", "+=", "1", "\n", "if", "iter", ">", "3000", ":", "\n", "                    ", "pass", "\n", "#break", "\n", "\n", "", "if", "iter", "%", "10000", "==", "0", ":", "\n", "                    ", "print", "(", "iter", "*", "100", "/", "lenFile", ",", "r\"%\"", ")", "\n", "\n", "", "l", "=", "json", ".", "loads", "(", "line", ")", "\n", "#print(l)", "\n", "# ['author', 'author_flair_css_class', 'author_flair_text', 'body', 'can_gild', 'controversiality', 'created_utc', 'distinguished', 'edited', 'gilded', 'id', 'is_submitter', 'link_id', 'parent_id', 'permalink', 'retrieved_on', 'score', 'stickied', 'subreddit', 'subreddit_id', 'subreddit_type']", "\n", "\n", "if", "l", "[", "\"subreddit\"", "]", "!=", "\"news\"", ":", "\n", "                    ", "continue", "\n", "\n", "#print(l)", "\n", "\n", "", "txtPar", "=", "l", "[", "\"parent_id\"", "]", "[", "3", ":", "]", "\n", "txtSon", "=", "l", "[", "\"id\"", "]", "\n", "\n", "try", ":", "\n", "                    ", "g", "[", "txtPar", "]", ".", "append", "(", "txtSon", ")", "\n", "", "except", ":", "\n", "                    ", "g", "[", "txtPar", "]", "=", "[", "txtSon", "]", "\n", "\n", "\n", "", "taggedSent", "=", "preprocess_spacy", "(", "l", "[", "\"body\"", "]", ")", "\n", "words", "=", "[", "]", "\n", "for", "token", "in", "taggedSent", ":", "\n", "                    ", "word", ",", "func", "=", "token", ".", "text", ",", "token", ".", "tag_", "\n", "word", "=", "preprocess_word", "(", "word", ")", "\n", "if", "func", ".", "startswith", "(", "'NN'", ")", "and", "len", "(", "word", ")", ">", "1", "and", "len", "(", "word", ")", "<", "30", ":", "\n", "                        ", "words", ".", "append", "(", "word", ")", "\n", "\n", "", "", "contentPost", "[", "txtSon", "]", "=", "words", "\n", "", "", "", "return", "g", ",", "contentPost", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.sliceContentPosts": [[214, 265], ["len", "toAppend.append", "print", "len", "toDel.append", "range", "len", "len", "range", "packWds.append", "g2[].append", "str", "str", "str"], "function", ["None"], ["", "def", "sliceContentPosts", "(", "contentPosts", ",", "g", ",", "K", "=", "1", ")", ":", "\n", "    ", "iter", "=", "0", "\n", "perc", "=", "0", "\n", "contentPosts2", ",", "g2", "=", "{", "}", ",", "{", "}", "\n", "lgTot", "=", "len", "(", "contentPosts", ")", "\n", "toDel", "=", "[", "]", "\n", "toAppend", "=", "[", "]", "\n", "for", "u", "in", "contentPosts", ":", "\n", "        ", "if", "perc", "%", "10000", "==", "0", ":", "\n", "            ", "print", "(", "perc", "*", "100", "/", "lgTot", ",", "\"%\"", ")", "\n", "", "perc", "+=", "1", "\n", "if", "u", "not", "in", "g", ":", "\n", "            ", "continue", "\n", "", "if", "len", "(", "contentPosts", "[", "u", "]", ")", "<", "2", "*", "K", "+", "1", ":", "\n", "            ", "toDel", ".", "append", "(", "u", ")", "\n", "continue", "\n", "", "toAppend", ".", "append", "(", "u", ")", "\n", "for", "v", "in", "g", "[", "u", "]", ":", "\n", "            ", "if", "v", "not", "in", "contentPosts", ":", "\n", "                ", "continue", "\n", "", "if", "contentPosts", "[", "u", "]", "==", "[", "\"\"", "]", "or", "contentPosts", "[", "v", "]", "==", "[", "\"\"", "]", ":", "\n", "                ", "continue", "\n", "", "for", "n", "in", "range", "(", "len", "(", "contentPosts", "[", "u", "]", ")", ")", ":", "\n", "                ", "packWds", "=", "[", "]", "\n", "nbWds", "=", "len", "(", "contentPosts", "[", "u", "]", ")", "\n", "indDeb", ",", "indFin", "=", "n", "-", "K", ",", "n", "+", "K", "+", "1", "\n", "indFin", "=", "n", "+", "1", "\n", "if", "indDeb", "<", "0", ":", "\n", "                    ", "indDeb", "=", "0", "\n", "", "if", "indFin", ">", "nbWds", ":", "\n", "                    ", "indFin", "=", "nbWds", "\n", "", "for", "m", "in", "range", "(", "indDeb", ",", "indFin", ")", ":", "\n", "                    ", "packWds", ".", "append", "(", "contentPosts", "[", "u", "]", "[", "m", "]", ")", "\n", "\n", "", "contentPosts2", "[", "iter", "]", "=", "packWds", "\n", "\n", "\n", "contentPosts2", "[", "v", "+", "str", "(", "iter", ")", "]", "=", "contentPosts", "[", "v", "]", "\n", "try", ":", "\n", "                    ", "g2", "[", "iter", "]", ".", "append", "(", "v", "+", "str", "(", "iter", ")", ")", "\n", "", "except", ":", "\n", "                    ", "g2", "[", "iter", "]", "=", "[", "v", "+", "str", "(", "iter", ")", "]", "\n", "\n", "", "iter", "+=", "1", "\n", "\n", "", "", "", "iter", "=", "0", "\n", "#for u in toAppend:", "\n", "#    contentPosts2[u]=contentPosts[u]", "\n", "\n", "\n", "return", "g2", ",", "contentPosts2", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.dataFromFiles": [[267, 287], ["open", "open", "l.replace.replace().split", "mots.split.split", "folder.replace", "l.replace.replace", "l.replace.split", "g2[].append", "l.replace.replace"], "function", ["None"], ["", "def", "dataFromFiles", "(", ")", ":", "\n", "    ", "folder", "=", "\"Data/Reddit/nounsPost_noWindow.txt\"", "\n", "contentPosts", "=", "{", "}", "\n", "with", "open", "(", "folder", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "for", "l", "in", "f", ":", "\n", "            ", "id", ",", "mots", "=", "l", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "mots", "=", "mots", ".", "split", "(", "\" \"", ")", "\n", "contentPosts", "[", "id", "]", "=", "mots", "\n", "\n", "", "", "with", "open", "(", "folder", ".", "replace", "(", "\"nounsPost\"", ",", "\"graph\"", ")", ")", "as", "f", ":", "# Sauve a l'envers par rapport au programme qui le traite", "\n", "        ", "g2", "=", "{", "}", "\n", "for", "l", "in", "f", ":", "\n", "            ", "l", "=", "l", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "v", ",", "u", "=", "l", ".", "split", "(", "\"\\t\"", ")", "\n", "try", ":", "\n", "                ", "g2", "[", "u", "]", ".", "append", "(", "v", ")", "\n", "", "except", ":", "\n", "                ", "g2", "[", "u", "]", "=", "[", "v", "]", "\n", "\n", "", "", "", "return", "contentPosts", ",", "g2", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.epurateCorpus": [[288, 295], ["list", "contentPosts.keys", "len"], "function", ["None"], ["", "def", "epurateCorpus", "(", "g", ",", "contentPosts", ",", "n", ")", ":", "\n", "    ", "listKeys", "=", "list", "(", "contentPosts", ".", "keys", "(", ")", ")", "\n", "for", "u", "in", "listKeys", ":", "\n", "        ", "if", "len", "(", "contentPosts", "[", "u", "]", ")", ">", "n", ":", "\n", "            ", "del", "contentPosts", "[", "u", "]", "\n", "\n", "", "", "return", "contentPosts", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.selectKeyWords": [[297, 325], ["list", "contentPost.keys"], "function", ["None"], ["", "def", "selectKeyWords", "(", "g", ",", "contentPost", ")", ":", "\n", "    ", "listKeys", "=", "list", "(", "contentPost", ".", "keys", "(", ")", ")", "\n", "KW", "=", "[", "\"paris\"", ",", "\"cathedral\"", ",", "\"notre\"", ",", "\"fire\"", ",", "\"church\"", ",", "\"prayers\"", ",", "\"france\"", ",", "\"macron\"", ",", "\"rebuild\"", ",", "\"roof\"", "]", "\n", "\n", "for", "u", "in", "listKeys", ":", "\n", "        ", "pres", "=", "False", "\n", "for", "w", "in", "contentPost", "[", "u", "]", ":", "\n", "            ", "for", "kw", "in", "KW", ":", "\n", "                ", "if", "kw", "in", "w", ":", "\n", "                    ", "pres", "=", "True", "\n", "break", "\n", "", "", "", "'''\n        if u in g:\n            for v in g[u]:\n                if v in contentPost:\n                    for w in contentPost[v]:\n                        for kw in KW:\n                            if kw in w:\n                                pres=True\n                                break\n                        if pres: break\n                if pres: break\n        '''", "\n", "\n", "if", "not", "pres", ":", "\n", "            ", "del", "contentPost", "[", "u", "]", "\n", "\n", "", "", "return", "g", ",", "contentPost", "\n", "\n"]], "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.retreat": [[329, 355], ["treatDataReddit.dataFromFiles", "treatDataReddit.epurateCorpus", "TP1.Graph", "TP1.Graph.degreeSequence", "print", "print", "treatDataReddit.saveData", "len", "TP1.Graph.degreeSequence"], "function", ["home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.dataFromFiles", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.epurateCorpus", "home.repos.pwc.inspect_result.GaelPouxMedard_IMMSBM.Reddit.treatDataReddit.saveData"], ["", "def", "retreat", "(", "folder", ",", "listFiles", "=", "None", ")", ":", "\n", "#g, contentPost = retreatUncompressed(folder, listFiles)", "\n", "#g, contentPost = retreatZST(folder, listFiles)", "\n", "\n", "    ", "contentPost", ",", "g", "=", "dataFromFiles", "(", ")", "\n", "contentPost", "=", "epurateCorpus", "(", "g", ",", "contentPost", ",", "15", ")", "\n", "\n", "#g, contentPost = sliceContentPosts(contentPost, g, 1)", "\n", "\n", "#g, contentPost = selectKeyWords(g, contentPost)", "\n", "\n", "\n", "\n", "\n", "g", "=", "TP1", ".", "Graph", "(", "g", ")", "\n", "\n", "\n", "i", "=", "0", "\n", "for", "u", "in", "g", ".", "degreeSequence", "(", ")", ":", "\n", "        ", "if", "u", ">", "1", ":", "\n", "            ", "i", "+=", "1", "\n", "", "", "print", "(", "i", ",", "len", "(", "g", ".", "degreeSequence", "(", ")", ")", ")", "\n", "\n", "folder", "=", "\"Data/\"", "+", "folder", "+", "\"/\"", "\n", "print", "(", "\"Saving data\"", ")", "\n", "saveData", "(", "folder", ",", "g", ",", "contentPost", ")", "\n", "\n"]]}