{"home.repos.pwc.inspect_result.cjf00000_StatQuant.None.main.add_parser_arguments": [[39, 156], ["image_classification.resnet_versions.keys", "image_classification.resnet_configs.keys", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "add_parser_arguments", "(", "parser", ")", ":", "\n", "    ", "model_names", "=", "models", ".", "resnet_versions", ".", "keys", "(", ")", "\n", "model_configs", "=", "models", ".", "resnet_configs", ".", "keys", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "metavar", "=", "'DIR'", ",", "\n", "help", "=", "'path to dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'imagenet'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-backend'", ",", "metavar", "=", "'BACKEND'", ",", "default", "=", "'pytorch'", ",", "\n", "choices", "=", "DATA_BACKEND_CHOICES", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "'-a'", ",", "metavar", "=", "'ARCH'", ",", "default", "=", "'resnet50'", ",", "\n", "choices", "=", "model_names", ",", "\n", "help", "=", "'model architecture: '", "+", "\n", "' | '", ".", "join", "(", "model_names", ")", "+", "\n", "' (default: resnet50)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model-config'", ",", "'-c'", ",", "metavar", "=", "'CONF'", ",", "default", "=", "'fanin'", ",", "\n", "choices", "=", "model_configs", ",", "\n", "help", "=", "'model configs: '", "+", "\n", "' | '", ".", "join", "(", "model_configs", ")", "+", "'(default: classic)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-j'", ",", "'--workers'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of data loading workers (default: 5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "90", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--start-epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'manual epoch number (useful on restarts)'", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch-size'", ",", "default", "=", "64", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'mini-batch size (default: 256) per gpu'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--optimizer-batch-size'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'size of a total batch size, for simulating bigger batches'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "'--learning-rate'", ",", "default", "=", "0.512", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'LR'", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-schedule'", ",", "default", "=", "'cosine'", ",", "type", "=", "str", ",", "metavar", "=", "'SCHEDULE'", ",", "choices", "=", "[", "'step'", ",", "'linear'", ",", "'cosine'", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--warmup'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'E'", ",", "help", "=", "'number of warmup epochs'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--label-smoothing'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'S'", ",", "help", "=", "'label smoothing'", ")", "\n", "parser", ".", "add_argument", "(", "'--mixup'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'ALPHA'", ",", "help", "=", "'mixup alpha'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.875", ",", "type", "=", "float", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "3.0517578125e-05", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'W'", ",", "help", "=", "'weight decay (default: 1e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--bn-weight-decay'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use weight_decay on batch normalization learnable parameters, default: false)'", ")", "\n", "parser", ".", "add_argument", "(", "'--nesterov'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use nesterov momentum, default: false)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--print-freq'", ",", "'-p'", ",", "default", "=", "100", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'print frequency (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to latest checkpoint (default: none)'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained-weights'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'load weights from here'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--fp16'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Run model fp16 mode.'", ")", "\n", "parser", ".", "add_argument", "(", "'--static-loss-scale'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'Static loss scale, positive power of 2 values can improve fp16 convergence.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dynamic-loss-scale'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use dynamic loss scaling.  If supplied, this argument supersedes '", "+", "\n", "'--static-loss-scale.'", ")", "\n", "parser", ".", "add_argument", "(", "'--prof'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Run only N iterations'", ")", "\n", "parser", ".", "add_argument", "(", "'--amp'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Run model AMP (automatic mixed precision) mode.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'random seed used for np and pytorch'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gather-checkpoints'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Gather checkpoints throughout the training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--raport-file'", ",", "default", "=", "'raport.json'", ",", "type", "=", "str", ",", "\n", "help", "=", "'file in which to store JSON experiment raport'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--final-weights'", ",", "default", "=", "'model.pth.tar'", ",", "type", "=", "str", ",", "\n", "help", "=", "'file in which to store final model weights'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--evaluate'", ",", "action", "=", "'store_true'", ",", "help", "=", "'evaluate checkpoint/model'", ")", "\n", "parser", ".", "add_argument", "(", "'--training-only'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not evaluate'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--no-checkpoints'", ",", "action", "=", "'store_false'", ",", "dest", "=", "'save_checkpoints'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--workspace'", ",", "type", "=", "str", ",", "default", "=", "'./'", ")", "\n", "\n", "def", "str2bool", "(", "v", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "            ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "            ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n", "", "", "parser", ".", "add_argument", "(", "'--qa'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "'quantize activation'", ")", "\n", "parser", ".", "add_argument", "(", "'--qw'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "'quantize weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--qg'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "'quantize gradients'", ")", "\n", "parser", ".", "add_argument", "(", "'--biased'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "'biased quantization'", ")", "\n", "parser", ".", "add_argument", "(", "'--abits'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'activation number of bits'", ")", "\n", "parser", ".", "add_argument", "(", "'--wbits'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'weight number of bits'", ")", "\n", "parser", ".", "add_argument", "(", "'--biasbits'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'bias number of bits'", ")", "\n", "parser", ".", "add_argument", "(", "'--bbits'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'backward number of bits'", ")", "\n", "parser", ".", "add_argument", "(", "'--bwbits'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'backward weight number of bits'", ")", "\n", "parser", ".", "add_argument", "(", "'--persample'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "'per-sample quantization of gradients'", ")", "\n", "parser", ".", "add_argument", "(", "'--hadamard'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "'apply Hadamard transformation on gradients'", ")", "\n", "parser", ".", "add_argument", "(", "'--biprecision'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "'Gradient bifurcation'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.None.main.main": [[158, 341], ["image_classification.preconditioner.init", "time.time", "image_classification.training.ModelAndLoss", "image_classification.dataloaders.get_dali_train_loader.", "image_classification.dataloaders.get_dali_val_loader.", "get_debug_loader", "image_classification.training.get_optimizer", "image_classification.training.ModelAndLoss.load_model_state", "print", "image_classification.training.train_loop", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "print", "exit", "print", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "int", "print", "os.path.isfile", "os.path.isfile", "image_classification.mixup.MixUpWrapper", "image_classification.Logger", "args.__dict__.items", "list", "image_classification.training.lr_step_policy", "amp.initialize", "image_classification.training.ModelAndLoss.distributed", "image_classification.utils.should_backup_checkpoint", "time.time", "log.Logger.end", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "numpy.random.seed", "random.seed", "print", "print", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "print", "image_classification.mixup.NLLMultiLabelSmooth", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "log.Logger.log_run_tag", "image_classification.training.ModelAndLoss.model.named_parameters", "image_classification.training.lr_cosine_policy", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "image_classification.smoothing.LabelSmoothing", "image_classification.dataloaders.get_dali_train_loader", "image_classification.dataloaders.get_dali_val_loader", "image_classification.JsonBackend", "image_classification.StdOut1LBackend", "image_classification.training.lr_linear_policy", "image_classification.dataloaders.get_dali_train_loader", "image_classification.dataloaders.get_dali_val_loader", "os.path.join", "storage.cuda"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.init", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.get_optimizer", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.ModelAndLoss.load_model_state", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.train_loop", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.lr_step_policy", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.ModelAndLoss.distributed", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.should_backup_checkpoint", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.end", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.log_run_tag", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.lr_cosine_policy", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.get_dali_train_loader", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.get_dali_val_loader", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.lr_linear_policy", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.get_dali_train_loader", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.get_dali_val_loader"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "config", ".", "quantize_activation", "=", "args", ".", "qa", "\n", "config", ".", "quantize_weights", "=", "args", ".", "qw", "\n", "config", ".", "quantize_gradient", "=", "args", ".", "qg", "\n", "config", ".", "activation_num_bits", "=", "args", ".", "abits", "\n", "config", ".", "weight_num_bits", "=", "args", ".", "wbits", "\n", "config", ".", "bias_num_bits", "=", "args", ".", "biasbits", "\n", "config", ".", "backward_num_bits", "=", "args", ".", "bbits", "\n", "config", ".", "bweight_num_bits", "=", "args", ".", "bwbits", "\n", "config", ".", "backward_persample", "=", "args", ".", "persample", "\n", "config", ".", "hadamard", "=", "args", ".", "hadamard", "\n", "config", ".", "biased", "=", "args", ".", "biased", "\n", "config", ".", "biprecision", "=", "args", ".", "biprecision", "\n", "init", "(", "args", ".", "batch_size", ")", "\n", "\n", "exp_start_time", "=", "time", ".", "time", "(", ")", "\n", "global", "best_prec1", "\n", "best_prec1", "=", "0", "\n", "\n", "args", ".", "distributed", "=", "False", "\n", "if", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "distributed", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", ">", "1", "\n", "\n", "", "args", ".", "gpu", "=", "0", "\n", "args", ".", "world_size", "=", "1", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "args", ".", "gpu", "=", "args", ".", "local_rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ")", "\n", "args", ".", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "\n", "", "if", "args", ".", "amp", "and", "args", ".", "fp16", ":", "\n", "        ", "print", "(", "\"Please use only one of the --fp16/--amp flags\"", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Using seed = {}\"", ".", "format", "(", "args", ".", "seed", ")", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", "+", "args", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", "+", "args", ".", "local_rank", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", "=", "args", ".", "seed", "+", "args", ".", "local_rank", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", "+", "args", ".", "local_rank", ")", "\n", "\n", "def", "_worker_init_fn", "(", "id", ")", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", "=", "args", ".", "seed", "+", "args", ".", "local_rank", "+", "id", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", "+", "args", ".", "local_rank", "+", "id", ")", "\n", "", "", "else", ":", "\n", "        ", "def", "_worker_init_fn", "(", "id", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "args", ".", "fp16", ":", "\n", "        ", "assert", "torch", ".", "backends", ".", "cudnn", ".", "enabled", ",", "\"fp16 mode requires cudnn backend to be enabled.\"", "\n", "\n", "", "if", "args", ".", "static_loss_scale", "!=", "1.0", ":", "\n", "        ", "if", "not", "args", ".", "fp16", ":", "\n", "            ", "print", "(", "\"Warning:  if --fp16 is not used, static_loss_scale will be ignored.\"", ")", "\n", "\n", "", "", "if", "args", ".", "optimizer_batch_size", "<", "0", ":", "\n", "        ", "batch_size_multiplier", "=", "1", "\n", "", "else", ":", "\n", "        ", "tbs", "=", "args", ".", "world_size", "*", "args", ".", "batch_size", "\n", "if", "args", ".", "optimizer_batch_size", "%", "tbs", "!=", "0", ":", "\n", "            ", "print", "(", "\"Warning: simulated batch size {} is not divisible by actual batch size {}\"", ".", "format", "(", "args", ".", "optimizer_batch_size", ",", "tbs", ")", ")", "\n", "", "batch_size_multiplier", "=", "int", "(", "args", ".", "optimizer_batch_size", "/", "tbs", ")", "\n", "print", "(", "\"BSM: {}\"", ".", "format", "(", "batch_size_multiplier", ")", ")", "\n", "\n", "", "pretrained_weights", "=", "None", "\n", "if", "args", ".", "pretrained_weights", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrained_weights", ")", ":", "\n", "            ", "print", "(", "\"=> loading pretrained weights from '{}'\"", ".", "format", "(", "args", ".", "pretrained_weights", ")", ")", "\n", "pretrained_weights", "=", "torch", ".", "load", "(", "args", ".", "pretrained_weights", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no pretrained weights found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", "args", ".", "gpu", ")", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "model_state", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "optimizer_state", "=", "checkpoint", "[", "'optimizer'", "]", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "model_state", "=", "None", "\n", "optimizer_state", "=", "None", "\n", "", "", "else", ":", "\n", "        ", "model_state", "=", "None", "\n", "optimizer_state", "=", "None", "\n", "\n", "\n", "", "loss", "=", "nn", ".", "CrossEntropyLoss", "\n", "if", "args", ".", "mixup", ">", "0.0", ":", "\n", "        ", "loss", "=", "lambda", ":", "NLLMultiLabelSmooth", "(", "args", ".", "label_smoothing", ")", "\n", "", "elif", "args", ".", "label_smoothing", ">", "0.0", ":", "\n", "        ", "loss", "=", "lambda", ":", "LabelSmoothing", "(", "args", ".", "label_smoothing", ")", "\n", "\n", "", "model_and_loss", "=", "ModelAndLoss", "(", "\n", "(", "args", ".", "arch", ",", "args", ".", "model_config", ")", ",", "\n", "loss", ",", "\n", "pretrained_weights", "=", "pretrained_weights", ",", "\n", "cuda", "=", "True", ",", "fp16", "=", "args", ".", "fp16", ")", "\n", "\n", "# Create data loaders and optimizers as needed", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "get_train_loader", "=", "get_pytorch_train_loader_cifar10", "\n", "get_val_loader", "=", "get_pytorch_val_loader_cifar10", "\n", "get_debug_loader", "=", "get_pytorch_debug_loader_cifar10", "\n", "", "elif", "args", ".", "data_backend", "==", "'pytorch'", ":", "\n", "        ", "get_train_loader", "=", "get_pytorch_train_loader", "\n", "get_val_loader", "=", "get_pytorch_val_loader", "\n", "get_debug_loader", "=", "get_pytorch_val_loader", "\n", "", "elif", "args", ".", "data_backend", "==", "'dali-gpu'", ":", "\n", "        ", "get_train_loader", "=", "get_dali_train_loader", "(", "dali_cpu", "=", "False", ")", "\n", "get_val_loader", "=", "get_dali_val_loader", "(", ")", "\n", "", "elif", "args", ".", "data_backend", "==", "'dali-cpu'", ":", "\n", "        ", "get_train_loader", "=", "get_dali_train_loader", "(", "dali_cpu", "=", "True", ")", "\n", "get_val_loader", "=", "get_dali_val_loader", "(", ")", "\n", "\n", "", "train_loader", ",", "train_loader_len", "=", "get_train_loader", "(", "args", ".", "data", ",", "args", ".", "batch_size", ",", "1000", ",", "args", ".", "mixup", ">", "0.0", ",", "workers", "=", "args", ".", "workers", ",", "fp16", "=", "args", ".", "fp16", ")", "\n", "if", "args", ".", "mixup", "!=", "0.0", ":", "\n", "        ", "train_loader", "=", "MixUpWrapper", "(", "args", ".", "mixup", ",", "1000", ",", "train_loader", ")", "\n", "\n", "", "val_loader", ",", "val_loader_len", "=", "get_val_loader", "(", "args", ".", "data", ",", "args", ".", "batch_size", ",", "1000", ",", "False", ",", "workers", "=", "args", ".", "workers", ",", "fp16", "=", "args", ".", "fp16", ")", "\n", "debug_loader", ",", "debug_loader_len", "=", "get_debug_loader", "(", "args", ".", "data", ",", "args", ".", "batch_size", ",", "1000", ",", "False", ",", "workers", "=", "args", ".", "workers", ",", "fp16", "=", "args", ".", "fp16", ")", "\n", "\n", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "logger", "=", "log", ".", "Logger", "(", "\n", "args", ".", "print_freq", ",", "\n", "[", "\n", "log", ".", "JsonBackend", "(", "os", ".", "path", ".", "join", "(", "args", ".", "workspace", ",", "args", ".", "raport_file", ")", ",", "log_level", "=", "1", ")", ",", "\n", "log", ".", "StdOut1LBackend", "(", "train_loader_len", ",", "val_loader_len", ",", "args", ".", "epochs", ",", "log_level", "=", "0", ")", ",", "\n", "]", ")", "\n", "\n", "for", "k", ",", "v", "in", "args", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "logger", ".", "log_run_tag", "(", "k", ",", "v", ")", "\n", "", "", "else", ":", "\n", "        ", "logger", "=", "None", "\n", "\n", "", "optimizer", "=", "get_optimizer", "(", "list", "(", "model_and_loss", ".", "model", ".", "named_parameters", "(", ")", ")", ",", "\n", "args", ".", "fp16", ",", "\n", "args", ".", "lr", ",", "args", ".", "momentum", ",", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ",", "\n", "bn_weight_decay", "=", "args", ".", "bn_weight_decay", ",", "\n", "# state=optimizer_state,", "\n", "static_loss_scale", "=", "args", ".", "static_loss_scale", ",", "\n", "dynamic_loss_scale", "=", "args", ".", "dynamic_loss_scale", ")", "\n", "\n", "if", "args", ".", "lr_schedule", "==", "'step'", ":", "\n", "        ", "lr_policy", "=", "lr_step_policy", "(", "args", ".", "lr", ",", "[", "30", ",", "60", ",", "80", "]", ",", "0.1", ",", "args", ".", "warmup", ",", "logger", "=", "logger", ")", "\n", "", "elif", "args", ".", "lr_schedule", "==", "'cosine'", ":", "\n", "        ", "lr_policy", "=", "lr_cosine_policy", "(", "args", ".", "lr", ",", "args", ".", "warmup", ",", "args", ".", "epochs", ",", "logger", "=", "logger", ")", "\n", "", "elif", "args", ".", "lr_schedule", "==", "'linear'", ":", "\n", "        ", "lr_policy", "=", "lr_linear_policy", "(", "args", ".", "lr", ",", "args", ".", "warmup", ",", "args", ".", "epochs", ",", "logger", "=", "logger", ")", "\n", "\n", "", "if", "args", ".", "amp", ":", "\n", "        ", "model_and_loss", ",", "optimizer", "=", "amp", ".", "initialize", "(", "\n", "model_and_loss", ",", "optimizer", ",", "\n", "opt_level", "=", "\"O2\"", ",", "\n", "loss_scale", "=", "\"dynamic\"", "if", "args", ".", "dynamic_loss_scale", "else", "args", ".", "static_loss_scale", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "model_and_loss", ".", "distributed", "(", ")", "\n", "\n", "", "model_and_loss", ".", "load_model_state", "(", "model_state", ")", "\n", "\n", "print", "(", "'Start epoch {}'", ".", "format", "(", "args", ".", "start_epoch", ")", ")", "\n", "train_loop", "(", "\n", "model_and_loss", ",", "optimizer", ",", "\n", "lr_policy", ",", "\n", "train_loader", ",", "val_loader", ",", "debug_loader", ",", "args", ".", "epochs", ",", "\n", "args", ".", "fp16", ",", "logger", ",", "should_backup_checkpoint", "(", "args", ")", ",", "use_amp", "=", "args", ".", "amp", ",", "\n", "batch_size_multiplier", "=", "batch_size_multiplier", ",", "\n", "start_epoch", "=", "args", ".", "start_epoch", ",", "best_prec1", "=", "best_prec1", ",", "prof", "=", "args", ".", "prof", ",", "\n", "skip_training", "=", "args", ".", "evaluate", ",", "skip_validation", "=", "args", ".", "training_only", ",", "\n", "save_checkpoints", "=", "args", ".", "save_checkpoints", "and", "not", "args", ".", "evaluate", ",", "checkpoint_dir", "=", "args", ".", "workspace", ")", "\n", "exp_duration", "=", "time", ".", "time", "(", ")", "-", "exp_start_time", "\n", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "logger", ".", "end", "(", ")", "\n", "", "print", "(", "\"Experiment ended\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.None.multiproc.parse_args": [[10, 51], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.None.multiproc.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function parsing the command line options\n    @retval ArgumentParser\n    \"\"\"", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "\"PyTorch distributed training launch \"", "\n", "\"helper utilty that will spawn up \"", "\n", "\"multiple distributed processes\"", ")", "\n", "\n", "# Optional arguments for the launch helper", "\n", "parser", ".", "add_argument", "(", "\"--nnodes\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"The number of nodes to use for distributed \"", "\n", "\"training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--node_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"The rank of the node for multi-node distributed \"", "\n", "\"training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nproc_per_node\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"The number of processes to launch on each node, \"", "\n", "\"for GPU training, this is recommended to be set \"", "\n", "\"to the number of GPUs in your system so that \"", "\n", "\"each process can be bound to a single GPU.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--master_addr\"", ",", "default", "=", "\"127.0.0.1\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Master node (rank 0)'s address, should be either \"", "\n", "\"the IP address or the hostname of node 0, for \"", "\n", "\"single node multi-proc training, the \"", "\n", "\"--master_addr can simply be 127.0.0.1\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--master_port\"", ",", "default", "=", "29500", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Master node (rank 0)'s free port that needs to \"", "\n", "\"be used for communciation during distributed \"", "\n", "\"training\"", ")", "\n", "\n", "# positional", "\n", "parser", ".", "add_argument", "(", "\"training_script\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"The full path to the single GPU training \"", "\n", "\"program/script to be launched in parallel, \"", "\n", "\"followed by all the arguments for the \"", "\n", "\"training script\"", ")", "\n", "\n", "# rest from the training program", "\n", "parser", ".", "add_argument", "(", "'training_script_args'", ",", "nargs", "=", "REMAINDER", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.None.multiproc.main": [[53, 116], ["multiproc.parse_args", "os.environ.copy", "str", "str", "range", "str", "print", "subprocess.Popen", "processes.append", "open", "time.sleep", "exit", "p.poll", "p.terminate", "p.terminate", "p.terminate", "p.poll", "p.terminate", "str"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.None.multiproc.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "# world size in terms of number of processes", "\n", "dist_world_size", "=", "args", ".", "nproc_per_node", "*", "args", ".", "nnodes", "\n", "\n", "# set PyTorch distributed related environmental variables", "\n", "current_env", "=", "os", ".", "environ", ".", "copy", "(", ")", "\n", "current_env", "[", "\"MASTER_ADDR\"", "]", "=", "args", ".", "master_addr", "\n", "current_env", "[", "\"MASTER_PORT\"", "]", "=", "str", "(", "args", ".", "master_port", ")", "\n", "current_env", "[", "\"WORLD_SIZE\"", "]", "=", "str", "(", "dist_world_size", ")", "\n", "\n", "processes", "=", "[", "]", "\n", "\n", "for", "local_rank", "in", "range", "(", "0", ",", "args", ".", "nproc_per_node", ")", ":", "\n", "# each process's rank", "\n", "        ", "dist_rank", "=", "args", ".", "nproc_per_node", "*", "args", ".", "node_rank", "+", "local_rank", "\n", "current_env", "[", "\"RANK\"", "]", "=", "str", "(", "dist_rank", ")", "\n", "\n", "# spawn the processes", "\n", "cmd", "=", "[", "sys", ".", "executable", ",", "\n", "\"-u\"", ",", "\n", "args", ".", "training_script", ",", "\n", "\"--local_rank={}\"", ".", "format", "(", "local_rank", ")", "]", "+", "args", ".", "training_script_args", "\n", "\n", "print", "(", "cmd", ")", "\n", "\n", "stdout", "=", "None", "if", "local_rank", "==", "0", "else", "open", "(", "\"GPU_\"", "+", "str", "(", "local_rank", ")", "+", "\".log\"", ",", "\"w\"", ")", "\n", "\n", "process", "=", "subprocess", ".", "Popen", "(", "cmd", ",", "env", "=", "current_env", ",", "stdout", "=", "stdout", ")", "\n", "processes", ".", "append", "(", "process", ")", "\n", "\n", "", "try", ":", "\n", "        ", "up", "=", "True", "\n", "error", "=", "False", "\n", "while", "up", "and", "not", "error", ":", "\n", "            ", "up", "=", "False", "\n", "for", "p", "in", "processes", ":", "\n", "                ", "ret", "=", "p", ".", "poll", "(", ")", "\n", "if", "ret", "is", "None", ":", "\n", "                    ", "up", "=", "True", "\n", "", "elif", "ret", "!=", "0", ":", "\n", "                    ", "error", "=", "True", "\n", "", "", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "", "if", "error", ":", "\n", "            ", "for", "p", "in", "processes", ":", "\n", "                ", "if", "p", ".", "poll", "(", ")", "is", "None", ":", "\n", "                    ", "p", ".", "terminate", "(", ")", "\n", "", "", "exit", "(", "1", ")", "\n", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "for", "p", "in", "processes", ":", "\n", "            ", "p", ".", "terminate", "(", ")", "\n", "", "raise", "\n", "", "except", "SystemExit", ":", "\n", "        ", "for", "p", "in", "processes", ":", "\n", "            ", "p", ".", "terminate", "(", ")", "\n", "", "raise", "\n", "", "except", ":", "\n", "        ", "for", "p", "in", "processes", ":", "\n", "            ", "p", ".", "terminate", "(", ")", "\n", "", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.DALIWrapper.gen_wrapper": [[104, 112], ["dalipipeline.reset", "[].squeeze().cuda().long", "dataloaders.expand", "[].squeeze().cuda", "[].squeeze"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.reset", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.expand"], ["    ", "def", "gen_wrapper", "(", "dalipipeline", ",", "num_classes", ",", "one_hot", ")", ":", "\n", "        ", "for", "data", "in", "dalipipeline", ":", "\n", "            ", "input", "=", "data", "[", "0", "]", "[", "\"data\"", "]", "\n", "target", "=", "data", "[", "0", "]", "[", "\"label\"", "]", ".", "squeeze", "(", ")", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "if", "one_hot", ":", "\n", "                ", "target", "=", "expand", "(", "num_classes", ",", "torch", ".", "float", ",", "target", ")", "\n", "", "yield", "input", ",", "target", "\n", "", "dalipipeline", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.DALIWrapper.__init__": [[113, 117], ["None"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "dalipipeline", ",", "num_classes", ",", "one_hot", ")", ":", "\n", "        ", "self", ".", "dalipipeline", "=", "dalipipeline", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "one_hot", "=", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.DALIWrapper.__iter__": [[118, 120], ["dataloaders.DALIWrapper.gen_wrapper"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.DALIWrapper.gen_wrapper"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "DALIWrapper", ".", "gen_wrapper", "(", "self", ".", "dalipipeline", ",", "self", ".", "num_classes", ",", "self", ".", "one_hot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.PrefetchedWrapper.prefetched_loader": [[190, 229], ["torch.cuda.Stream", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "mean.half.half.half", "std.half.half.half", "torch.cuda.current_stream().wait_stream", "torch.cuda.stream", "next_input.float.float.cuda", "expand.cuda", "next_input.float.float.sub_().div_", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "next_input.float.float.half", "next_input.float.float.float", "torch.cuda.current_stream", "dataloaders.expand", "dataloaders.expand", "next_input.float.float.sub_", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.expand", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.expand"], ["    ", "def", "prefetched_loader", "(", "loader", ",", "num_classes", ",", "fp16", ",", "one_hot", ")", ":", "\n", "        ", "if", "num_classes", "==", "10", ":", "# Cifar10", "\n", "            ", "mean", "=", "torch", ".", "tensor", "(", "[", "0.491", "*", "255", ",", "0.482", "*", "255", ",", "0.447", "*", "255", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "0.247", "*", "255", ",", "0.243", "*", "255", ",", "0.262", "*", "255", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "mean", "=", "torch", ".", "tensor", "(", "[", "0.485", "*", "255", ",", "0.456", "*", "255", ",", "0.406", "*", "255", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "0.229", "*", "255", ",", "0.224", "*", "255", ",", "0.225", "*", "255", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "", "if", "fp16", ":", "\n", "            ", "mean", "=", "mean", ".", "half", "(", ")", "\n", "std", "=", "std", ".", "half", "(", ")", "\n", "\n", "", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "first", "=", "True", "\n", "\n", "for", "next_input", ",", "next_target", "in", "loader", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "stream", "(", "stream", ")", ":", "\n", "                ", "next_input", "=", "next_input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "next_target", "=", "next_target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "if", "fp16", ":", "\n", "                    ", "next_input", "=", "next_input", ".", "half", "(", ")", "\n", "if", "one_hot", ":", "\n", "                        ", "next_target", "=", "expand", "(", "num_classes", ",", "torch", ".", "half", ",", "next_target", ")", "\n", "", "", "else", ":", "\n", "                    ", "next_input", "=", "next_input", ".", "float", "(", ")", "\n", "if", "one_hot", ":", "\n", "                        ", "next_target", "=", "expand", "(", "num_classes", ",", "torch", ".", "float", ",", "next_target", ")", "\n", "\n", "", "", "next_input", "=", "next_input", ".", "sub_", "(", "mean", ")", ".", "div_", "(", "std", ")", "\n", "\n", "", "if", "not", "first", ":", "\n", "                ", "yield", "input", ",", "target", "\n", "", "else", ":", "\n", "                ", "first", "=", "False", "\n", "\n", "", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "stream", ")", "\n", "input", "=", "next_input", "\n", "target", "=", "next_target", "\n", "\n", "", "yield", "input", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.PrefetchedWrapper.__init__": [[230, 236], ["None"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "dataloader", ",", "num_classes", ",", "fp16", ",", "one_hot", ")", ":", "\n", "        ", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "fp16", "=", "fp16", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "one_hot", "=", "one_hot", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.PrefetchedWrapper.__iter__": [[237, 245], ["dataloaders.PrefetchedWrapper.prefetched_loader", "isinstance", "dataloaders.PrefetchedWrapper.dataloader.sampler.set_epoch"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.PrefetchedWrapper.prefetched_loader"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "(", "self", ".", "dataloader", ".", "sampler", "is", "not", "None", "and", "\n", "isinstance", "(", "self", ".", "dataloader", ".", "sampler", ",", "\n", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", ")", ")", ":", "\n", "\n", "            ", "self", ".", "dataloader", ".", "sampler", ".", "set_epoch", "(", "self", ".", "epoch", ")", "\n", "", "self", ".", "epoch", "+=", "1", "\n", "return", "PrefetchedWrapper", ".", "prefetched_loader", "(", "self", ".", "dataloader", ",", "self", ".", "num_classes", ",", "self", ".", "fp16", ",", "self", ".", "one_hot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.get_dali_train_loader": [[121, 142], ["torch.distributed.is_initialized", "os.path.join", "HybridTrainPipe", "HybridTrainPipe.build", "DALIClassificationIterator", "torch.distributed.get_rank", "torch.distributed.get_world_size", "dataloaders.DALIWrapper", "int", "int", "HybridTrainPipe.epoch_size", "HybridTrainPipe.epoch_size"], "function", ["None"], ["", "", "def", "get_dali_train_loader", "(", "dali_cpu", "=", "False", ")", ":", "\n", "    ", "def", "gdtl", "(", "data_path", ",", "batch_size", ",", "num_classes", ",", "one_hot", ",", "workers", "=", "5", ",", "_worker_init_fn", "=", "None", ",", "fp16", "=", "False", ")", ":", "\n", "        ", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "            ", "local_rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "            ", "local_rank", "=", "0", "\n", "world_size", "=", "1", "\n", "\n", "", "traindir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'train'", ")", "\n", "\n", "pipe", "=", "HybridTrainPipe", "(", "batch_size", "=", "batch_size", ",", "num_threads", "=", "workers", ",", "\n", "device_id", "=", "local_rank", ",", "\n", "data_dir", "=", "traindir", ",", "crop", "=", "224", ",", "dali_cpu", "=", "dali_cpu", ")", "\n", "\n", "pipe", ".", "build", "(", ")", "\n", "train_loader", "=", "DALIClassificationIterator", "(", "pipe", ",", "size", "=", "int", "(", "pipe", ".", "epoch_size", "(", "\"Reader\"", ")", "/", "world_size", ")", ")", "\n", "\n", "return", "DALIWrapper", "(", "train_loader", ",", "num_classes", ",", "one_hot", ")", ",", "int", "(", "pipe", ".", "epoch_size", "(", "\"Reader\"", ")", "/", "(", "world_size", "*", "batch_size", ")", ")", "\n", "\n", "", "return", "gdtl", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.get_dali_val_loader": [[144, 164], ["torch.distributed.is_initialized", "os.path.join", "HybridValPipe", "HybridValPipe.build", "DALIClassificationIterator", "torch.distributed.get_rank", "torch.distributed.get_world_size", "dataloaders.DALIWrapper", "int", "int", "HybridValPipe.epoch_size", "HybridValPipe.epoch_size"], "function", ["None"], ["", "def", "get_dali_val_loader", "(", ")", ":", "\n", "    ", "def", "gdvl", "(", "data_path", ",", "batch_size", ",", "num_classes", ",", "one_hot", ",", "workers", "=", "5", ",", "_worker_init_fn", "=", "None", ",", "fp16", "=", "False", ")", ":", "\n", "        ", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "            ", "local_rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "            ", "local_rank", "=", "0", "\n", "world_size", "=", "1", "\n", "\n", "", "valdir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'val'", ")", "\n", "\n", "pipe", "=", "HybridValPipe", "(", "batch_size", "=", "batch_size", ",", "num_threads", "=", "workers", ",", "\n", "device_id", "=", "local_rank", ",", "\n", "data_dir", "=", "valdir", ",", "\n", "crop", "=", "224", ",", "size", "=", "256", ")", "\n", "pipe", ".", "build", "(", ")", "\n", "val_loader", "=", "DALIClassificationIterator", "(", "pipe", ",", "size", "=", "int", "(", "pipe", ".", "epoch_size", "(", "\"Reader\"", ")", "/", "world_size", ")", ")", "\n", "\n", "return", "DALIWrapper", "(", "val_loader", ",", "num_classes", ",", "one_hot", ")", ",", "int", "(", "pipe", ".", "epoch_size", "(", "\"Reader\"", ")", "/", "(", "world_size", "*", "batch_size", ")", ")", "\n", "", "return", "gdvl", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.fast_collate": [[166, 182], ["torch.tensor", "torch.zeros", "enumerate", "numpy.asarray", "torch.from_numpy", "numpy.rollaxis", "torch.from_numpy", "len", "numpy.expand_dims"], "function", ["None"], ["", "def", "fast_collate", "(", "batch", ")", ":", "\n", "    ", "imgs", "=", "[", "img", "[", "0", "]", "for", "img", "in", "batch", "]", "\n", "targets", "=", "torch", ".", "tensor", "(", "[", "target", "[", "1", "]", "for", "target", "in", "batch", "]", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "w", "=", "imgs", "[", "0", "]", ".", "size", "[", "0", "]", "\n", "h", "=", "imgs", "[", "0", "]", ".", "size", "[", "1", "]", "\n", "tensor", "=", "torch", ".", "zeros", "(", "(", "len", "(", "imgs", ")", ",", "3", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "        ", "nump_array", "=", "np", ".", "asarray", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "tens", "=", "torch", ".", "from_numpy", "(", "nump_array", ")", "\n", "if", "(", "nump_array", ".", "ndim", "<", "3", ")", ":", "\n", "            ", "nump_array", "=", "np", ".", "expand_dims", "(", "nump_array", ",", "axis", "=", "-", "1", ")", "\n", "", "nump_array", "=", "np", ".", "rollaxis", "(", "nump_array", ",", "2", ")", "\n", "\n", "tensor", "[", "i", "]", "+=", "torch", ".", "from_numpy", "(", "nump_array", ")", "\n", "\n", "", "return", "tensor", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.expand": [[184, 188], ["torch.zeros", "e.scatter.scatter", "tensor.size", "tensor.unsqueeze", "torch.device", "torch.float", "torch.half", "torch.float"], "function", ["None"], ["", "def", "expand", "(", "num_classes", ",", "dtype", ",", "tensor", ")", ":", "\n", "    ", "e", "=", "torch", ".", "zeros", "(", "tensor", ".", "size", "(", "0", ")", ",", "num_classes", ",", "dtype", "=", "dtype", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "e", "=", "e", ".", "scatter", "(", "1", ",", "tensor", ".", "unsqueeze", "(", "1", ")", ",", "1.0", ")", "\n", "return", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.get_pytorch_train_loader": [[246, 265], ["os.path.join", "torchvision.ImageFolder", "torch.distributed.is_initialized", "torch.utils.data.DataLoader", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "dataloaders.PrefetchedWrapper", "len", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip"], "function", ["None"], ["", "", "def", "get_pytorch_train_loader", "(", "data_path", ",", "batch_size", ",", "num_classes", ",", "one_hot", ",", "workers", "=", "5", ",", "_worker_init_fn", "=", "None", ",", "fp16", "=", "False", ")", ":", "\n", "    ", "traindir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'train'", ")", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "]", ")", ")", "\n", "\n", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "workers", ",", "worker_init_fn", "=", "_worker_init_fn", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "collate_fn", "=", "fast_collate", ",", "drop_last", "=", "True", ")", "\n", "\n", "return", "PrefetchedWrapper", "(", "train_loader", ",", "num_classes", ",", "fp16", ",", "one_hot", ")", ",", "len", "(", "train_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.get_pytorch_val_loader": [[266, 287], ["os.path.join", "torchvision.ImageFolder", "torch.distributed.is_initialized", "torch.utils.data.DataLoader", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "dataloaders.PrefetchedWrapper", "len", "torchvision.Resize", "torchvision.CenterCrop"], "function", ["None"], ["", "def", "get_pytorch_val_loader", "(", "data_path", ",", "batch_size", ",", "num_classes", ",", "one_hot", ",", "workers", "=", "5", ",", "_worker_init_fn", "=", "None", ",", "fp16", "=", "False", ")", ":", "\n", "    ", "valdir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'val'", ")", "\n", "val_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "]", ")", ")", "\n", "\n", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "", "else", ":", "\n", "        ", "val_sampler", "=", "None", "\n", "\n", "", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "sampler", "=", "val_sampler", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "workers", ",", "worker_init_fn", "=", "_worker_init_fn", ",", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "fast_collate", ")", "\n", "\n", "return", "PrefetchedWrapper", "(", "val_loader", ",", "num_classes", ",", "fp16", ",", "one_hot", ")", ",", "len", "(", "val_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.get_pytorch_train_loader_cifar10": [[289, 307], ["torchvision.Compose", "torchvision.CIFAR10", "torch.distributed.is_initialized", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "dataloaders.PrefetchedWrapper", "len", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip"], "function", ["None"], ["", "def", "get_pytorch_train_loader_cifar10", "(", "data_path", ",", "batch_size", ",", "num_classes", ",", "one_hot", ",", "workers", "=", "5", ",", "_worker_init_fn", "=", "None", ",", "fp16", "=", "False", ")", ":", "\n", "    ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", "\n", "]", ")", "\n", "train_dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "data_path", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "\n", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "workers", ",", "worker_init_fn", "=", "_worker_init_fn", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "\n", "collate_fn", "=", "fast_collate", ",", "drop_last", "=", "True", ")", "\n", "\n", "return", "PrefetchedWrapper", "(", "train_loader", ",", "num_classes", ",", "fp16", ",", "one_hot", ")", ",", "len", "(", "train_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.get_pytorch_val_loader_cifar10": [[309, 325], ["torchvision.CIFAR10", "torch.distributed.is_initialized", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "dataloaders.PrefetchedWrapper", "len"], "function", ["None"], ["", "def", "get_pytorch_val_loader_cifar10", "(", "data_path", ",", "batch_size", ",", "num_classes", ",", "one_hot", ",", "workers", "=", "5", ",", "_worker_init_fn", "=", "None", ",", "fp16", "=", "False", ")", ":", "\n", "    ", "val_dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "data_path", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "\n", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "", "else", ":", "\n", "        ", "val_sampler", "=", "None", "\n", "\n", "", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "sampler", "=", "val_sampler", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "workers", ",", "worker_init_fn", "=", "_worker_init_fn", ",", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "fast_collate", ")", "\n", "\n", "return", "PrefetchedWrapper", "(", "val_loader", ",", "num_classes", ",", "fp16", ",", "one_hot", ")", ",", "len", "(", "val_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.dataloaders.get_pytorch_debug_loader_cifar10": [[327, 347], ["torchvision.CIFAR10", "torch.distributed.is_initialized", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "dataloaders.PrefetchedWrapper", "len"], "function", ["None"], ["", "def", "get_pytorch_debug_loader_cifar10", "(", "data_path", ",", "batch_size", ",", "num_classes", ",", "one_hot", ",", "workers", "=", "5", ",", "_worker_init_fn", "=", "None", ",", "fp16", "=", "False", ")", ":", "\n", "    ", "val_dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "data_path", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "n", "=", "val_dataset", ".", "data", ".", "shape", "[", "0", "]", "\n", "n", "=", "n", "//", "batch_size", "*", "batch_size", "\n", "val_dataset", ".", "data", "=", "val_dataset", ".", "data", "[", ":", "n", "]", "\n", "val_dataset", ".", "targets", "=", "val_dataset", ".", "targets", "[", ":", "n", "]", "\n", "\n", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "", "else", ":", "\n", "        ", "val_sampler", "=", "None", "\n", "\n", "", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "sampler", "=", "val_sampler", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "workers", ",", "worker_init_fn", "=", "_worker_init_fn", ",", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "fast_collate", ")", "\n", "\n", "return", "PrefetchedWrapper", "(", "val_loader", ",", "num_classes", ",", "fp16", ",", "one_hot", ")", ",", "len", "(", "val_loader", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.IterationMeter.__init__": [[7, 9], ["logger.IterationMeter.reset"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.IterationMeter.reset": [[10, 12], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "last", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.IterationMeter.record": [[13, 15], ["None"], "methods", ["None"], ["", "def", "record", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "last", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.IterationMeter.get_val": [[16, 18], ["None"], "methods", ["None"], ["", "def", "get_val", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.IterationMeter.get_last": [[19, 21], ["None"], "methods", ["None"], ["", "def", "get_last", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "last", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.EpochMeter.__init__": [[24, 26], ["logger.EpochMeter.reset"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.EpochMeter.reset": [[27, 29], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.EpochMeter.record": [[30, 32], ["None"], "methods", ["None"], ["", "def", "record", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.EpochMeter.get_val": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_val", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.EpochMeter.get_last": [[36, 38], ["None"], "methods", ["None"], ["", "def", "get_last", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.AverageMeter.__init__": [[41, 45], ["logger.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.reset"], ["    ", "def", "__init__", "(", "self", ",", "ret_last", "=", "True", ",", "ret_val", "=", "True", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "self", ".", "ret_last", "=", "ret_last", "\n", "self", ".", "ret_val", "=", "ret_val", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.AverageMeter.reset": [[46, 50], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "n", "=", "0", "\n", "self", ".", "val", "=", "0", "\n", "self", ".", "last", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.AverageMeter.record": [[51, 55], ["None"], "methods", ["None"], ["", "def", "record", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "last", "=", "val", "\n", "self", ".", "n", "+=", "n", "\n", "self", ".", "val", "+=", "val", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.AverageMeter.get_val": [[56, 63], ["None"], "methods", ["None"], ["", "def", "get_val", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ret_val", ":", "\n", "            ", "if", "self", ".", "n", "==", "0", ":", "\n", "                ", "return", "0.0", "\n", "", "return", "self", ".", "val", "/", "self", ".", "n", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.AverageMeter.get_last": [[64, 69], ["None"], "methods", ["None"], ["", "", "def", "get_last", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ret_last", ":", "\n", "            ", "return", "self", ".", "last", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.__init__": [[72, 74], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "decay", ")", ":", "\n", "        ", "self", ".", "decay", "=", "decay", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.reset": [[75, 78], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "last", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.record": [[79, 83], ["None"], "methods", ["None"], ["", "def", "record", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "last", "=", "val", "\n", "decay", "=", "1", "-", "(", "(", "1", "-", "self", ".", "decay", ")", "**", "n", ")", "\n", "self", ".", "val", "=", "(", "1", "-", "decay", ")", "*", "self", ".", "val", "+", "decay", "*", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.get_val": [[84, 86], ["None"], "methods", ["None"], ["", "def", "get_val", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.get_last": [[87, 89], ["None"], "methods", ["None"], ["", "def", "get_last", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "last", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.__init__": [[92, 100], ["collections.OrderedDict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "print_interval", ",", "backends", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "-", "1", "\n", "self", ".", "iteration", "=", "-", "1", "\n", "self", ".", "val_iteration", "=", "-", "1", "\n", "self", ".", "metrics", "=", "OrderedDict", "(", ")", "\n", "self", ".", "backends", "=", "backends", "\n", "self", ".", "print_interval", "=", "print_interval", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_run_tag": [[101, 104], ["b.log_run_tag"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.log_run_tag"], ["", "def", "log_run_tag", "(", "self", ",", "name", ",", "val", ")", ":", "\n", "        ", "for", "b", "in", "self", ".", "backends", ":", "\n", "            ", "b", ".", "log_run_tag", "(", "name", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric": [[105, 109], ["print"], "methods", ["None"], ["", "", "def", "register_metric", "(", "self", ",", "metric_name", ",", "meter", ",", "log_level", "=", "0", ")", ":", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"Registering metric: {}\"", ".", "format", "(", "metric_name", ")", ")", "\n", "", "self", ".", "metrics", "[", "metric_name", "]", "=", "{", "'meter'", ":", "meter", ",", "'level'", ":", "log_level", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric": [[110, 112], ["[].record"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.record"], ["", "def", "log_metric", "(", "self", ",", "metric_name", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "metrics", "[", "metric_name", "]", "[", "'meter'", "]", ".", "record", "(", "val", ",", "n", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.start_iteration": [[113, 118], ["None"], "methods", ["None"], ["", "def", "start_iteration", "(", "self", ",", "val", "=", "False", ")", ":", "\n", "        ", "if", "val", ":", "\n", "            ", "self", ".", "val_iteration", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "iteration", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.end_iteration": [[119, 135], ["b.log_end_iteration", "b.log_iteration_metric", "b.log_iteration_metric", "filter", "m[].get_last", "logger.Logger.metrics.items", "b.log_iteration_metric", "n.startswith"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.log_end_iteration", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.log_iteration_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.log_iteration_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.get_last", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.log_iteration_metric"], ["", "", "def", "end_iteration", "(", "self", ",", "val", "=", "False", ")", ":", "\n", "        ", "it", "=", "self", ".", "val_iteration", "if", "val", "else", "self", ".", "iteration", "\n", "if", "(", "it", "%", "self", ".", "print_interval", "==", "0", ")", ":", "\n", "            ", "for", "b", "in", "self", ".", "backends", ":", "\n", "                ", "if", "val", ":", "\n", "                    ", "b", ".", "log_iteration_metric", "(", "'val.it'", ",", "it", ")", "\n", "", "else", ":", "\n", "                    ", "b", ".", "log_iteration_metric", "(", "'it'", ",", "it", ")", "\n", "\n", "", "f", "=", "lambda", "l", ":", "filter", "(", "lambda", "m", ":", "m", "[", "'level'", "]", "<=", "b", ".", "level", ")", "\n", "for", "n", ",", "m", "in", "[", "(", "n", ",", "m", ")", "for", "n", ",", "m", "in", "self", ".", "metrics", ".", "items", "(", ")", "if", "m", "[", "'level'", "]", "<=", "b", ".", "level", "and", "n", ".", "startswith", "(", "'val'", ")", "==", "val", "]", ":", "\n", "                    ", "mv", "=", "m", "[", "'meter'", "]", ".", "get_last", "(", ")", "\n", "if", "mv", "is", "not", "None", ":", "\n", "                        ", "b", ".", "log_iteration_metric", "(", "n", ",", "mv", ")", "\n", "\n", "", "", "b", ".", "log_end_iteration", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.start_epoch": [[136, 146], ["b.log_epoch_metric", "m[].reset", "logger.Logger.metrics.items"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.log_epoch_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.reset"], ["", "", "", "def", "start_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch", "+=", "1", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "val_iteration", "=", "0", "\n", "\n", "for", "b", "in", "self", ".", "backends", ":", "\n", "            ", "b", ".", "log_epoch_metric", "(", "'ep'", ",", "self", ".", "epoch", ")", "\n", "\n", "", "for", "n", ",", "m", "in", "[", "(", "n", ",", "m", ")", "for", "n", ",", "m", "in", "self", ".", "metrics", ".", "items", "(", ")", "if", "m", "[", "'level'", "]", "<=", "b", ".", "level", "]", ":", "\n", "            ", "m", "[", "'meter'", "]", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.end_epoch": [[147, 154], ["b.log_end_epoch", "m[].get_val", "logger.Logger.metrics.items", "b.log_epoch_metric"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.log_end_epoch", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.get_val", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.log_epoch_metric"], ["", "", "def", "end_epoch", "(", "self", ")", ":", "\n", "        ", "for", "b", "in", "self", ".", "backends", ":", "\n", "            ", "for", "n", ",", "m", "in", "[", "(", "n", ",", "m", ")", "for", "n", ",", "m", "in", "self", ".", "metrics", ".", "items", "(", ")", "if", "m", "[", "'level'", "]", "<=", "b", ".", "level", "]", ":", "\n", "                ", "mv", "=", "m", "[", "'meter'", "]", ".", "get_val", "(", ")", "\n", "if", "mv", "is", "not", "None", ":", "\n", "                    ", "b", ".", "log_epoch_metric", "(", "n", ",", "mv", ")", "\n", "", "", "b", ".", "log_end_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.end": [[155, 158], ["b.end"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.end"], ["", "", "def", "end", "(", "self", ")", ":", "\n", "        ", "for", "b", "in", "self", ".", "backends", ":", "\n", "            ", "b", ".", "end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.iteration_generator_wrapper": [[159, 164], ["logger.Logger.start_iteration", "logger.Logger.end_iteration"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.start_iteration", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.end_iteration"], ["", "", "def", "iteration_generator_wrapper", "(", "self", ",", "gen", ",", "val", "=", "False", ")", ":", "\n", "        ", "for", "g", "in", "gen", ":", "\n", "            ", "self", ".", "start_iteration", "(", "val", "=", "val", ")", "\n", "yield", "g", "\n", "self", ".", "end_iteration", "(", "val", "=", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.epoch_generator_wrapper": [[165, 170], ["logger.Logger.start_epoch", "logger.Logger.end_epoch"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.start_epoch", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.end_epoch"], ["", "", "def", "epoch_generator_wrapper", "(", "self", ",", "gen", ")", ":", "\n", "        ", "for", "g", "in", "gen", ":", "\n", "            ", "self", ".", "start_epoch", "(", ")", "\n", "yield", "g", "\n", "self", ".", "end_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.JsonBackend.__init__": [[173, 182], ["print", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ",", "log_level", "=", "0", ")", ":", "\n", "        ", "print", "(", "\"Logger: \"", ",", "filename", ")", "\n", "self", ".", "level", "=", "log_level", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "json_log", "=", "OrderedDict", "(", "[", "\n", "(", "'run'", ",", "OrderedDict", "(", ")", ")", ",", "\n", "(", "'epoch'", ",", "OrderedDict", "(", ")", ")", ",", "\n", "(", "'iter'", ",", "OrderedDict", "(", ")", ")", ",", "\n", "(", "'event'", ",", "OrderedDict", "(", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.JsonBackend.log_run_tag": [[184, 186], ["None"], "methods", ["None"], ["", "def", "log_run_tag", "(", "self", ",", "name", ",", "val", ")", ":", "\n", "        ", "self", ".", "json_log", "[", "'run'", "]", "[", "name", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.JsonBackend.log_end_epoch": [[187, 189], ["None"], "methods", ["None"], ["", "def", "log_end_epoch", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.JsonBackend.log_end_iteration": [[190, 192], ["None"], "methods", ["None"], ["", "def", "log_end_iteration", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.JsonBackend.log_epoch_metric": [[193, 207], ["[].append", "[].append", "logger.JsonBackend.json_log[].keys", "logger.JsonBackend.json_log[].keys", "[].append", "logger.JsonBackend.json_log[].keys"], "methods", ["None"], ["", "def", "log_epoch_metric", "(", "self", ",", "name", ",", "val", ")", ":", "\n", "        ", "if", "not", "name", "in", "self", ".", "json_log", "[", "'epoch'", "]", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "json_log", "[", "'epoch'", "]", "[", "name", "]", "=", "[", "]", "\n", "\n", "", "self", ".", "json_log", "[", "'epoch'", "]", "[", "name", "]", ".", "append", "(", "val", ")", "\n", "\n", "if", "name", "!=", "'ep'", ":", "\n", "            ", "if", "name", "in", "self", ".", "json_log", "[", "'iter'", "]", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "json_log", "[", "'iter'", "]", "[", "name", "]", ".", "append", "(", "[", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "not", "'it'", "in", "self", ".", "json_log", "[", "'iter'", "]", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "json_log", "[", "'iter'", "]", "[", "'it'", "]", "=", "[", "]", "\n", "\n", "", "self", ".", "json_log", "[", "'iter'", "]", "[", "'it'", "]", ".", "append", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.JsonBackend.log_iteration_metric": [[208, 213], ["[].append", "logger.JsonBackend.json_log[].keys"], "methods", ["None"], ["", "", "def", "log_iteration_metric", "(", "self", ",", "name", ",", "val", ")", ":", "\n", "        ", "if", "not", "(", "name", "in", "self", ".", "json_log", "[", "'iter'", "]", ".", "keys", "(", ")", ")", ":", "\n", "            ", "self", ".", "json_log", "[", "'iter'", "]", "[", "name", "]", "=", "[", "[", "]", "]", "\n", "\n", "", "self", ".", "json_log", "[", "'iter'", "]", "[", "name", "]", "[", "-", "1", "]", ".", "append", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.JsonBackend.end": [[214, 216], ["print", "json.dump", "open"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.dump"], ["", "def", "end", "(", "self", ")", ":", "\n", "        ", "print", "(", "json", ".", "dump", "(", "self", ".", "json_log", ",", "open", "(", "self", ".", "filename", ",", "'w'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOut1LBackend.__init__": [[219, 229], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "iters", ",", "val_iters", ",", "epochs", ",", "log_level", "=", "0", ")", ":", "\n", "        ", "self", ".", "level", "=", "log_level", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "total_iterations", "=", "iters", "\n", "self", ".", "total_val_iterations", "=", "val_iters", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "total_epochs", "=", "epochs", "\n", "self", ".", "iteration_metrics", "=", "{", "}", "\n", "self", ".", "epoch_metrics", "=", "{", "}", "\n", "self", ".", "mode", "=", "'train'", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOut1LBackend.log_run_tag": [[230, 232], ["print"], "methods", ["None"], ["", "def", "log_run_tag", "(", "self", ",", "name", ",", "val", ")", ":", "\n", "        ", "print", "(", "\"{} : {}\"", ".", "format", "(", "name", ",", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOut1LBackend.log_end_epoch": [[233, 239], ["print", "logger.StdOut1LBackend.epoch_metrics.items"], "methods", ["None"], ["", "def", "log_end_epoch", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Summary Epoch: {}/{};\\t{}\"", ".", "format", "(", "\n", "self", ".", "epoch", ",", "self", ".", "total_epochs", ",", "\n", "\"\\t\"", ".", "join", "(", "[", "\"{} : {:.3f}\"", ".", "format", "(", "m", ",", "v", ")", "for", "m", ",", "v", "in", "self", ".", "epoch_metrics", ".", "items", "(", ")", "]", ")", ")", ")", "\n", "\n", "self", ".", "epoch_metrics", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOut1LBackend.log_end_iteration": [[240, 248], ["print", "logger.StdOut1LBackend.iteration_metrics.items"], "methods", ["None"], ["", "def", "log_end_iteration", "(", "self", ")", ":", "\n", "        ", "md", "=", "\"Validation\"", "if", "self", ".", "mode", "==", "'val'", "else", "\"\"", "\n", "ti", "=", "self", ".", "total_val_iterations", "if", "self", ".", "mode", "==", "'val'", "else", "self", ".", "total_iterations", "\n", "print", "(", "\"Epoch: {}/{} {} Iteration: {}/{};\\t{}\"", ".", "format", "(", "\n", "self", ".", "epoch", ",", "self", ".", "total_epochs", ",", "md", ",", "self", ".", "iteration", ",", "ti", ",", "\n", "\"\\t\"", ".", "join", "(", "[", "\"{} : {:.3f}\"", ".", "format", "(", "m", ",", "v", ")", "for", "m", ",", "v", "in", "self", ".", "iteration_metrics", ".", "items", "(", ")", "]", ")", ")", ")", "\n", "\n", "self", ".", "iteration_metrics", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOut1LBackend.log_epoch_metric": [[249, 255], ["None"], "methods", ["None"], ["", "def", "log_epoch_metric", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "name", "==", "'ep'", ":", "\n", "            ", "self", ".", "epoch", "=", "value", "\n", "self", ".", "iteration", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "epoch_metrics", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOut1LBackend.log_iteration_metric": [[256, 262], ["None"], "methods", ["None"], ["", "", "def", "log_iteration_metric", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "name", "==", "'it'", "or", "name", "==", "'val.it'", ":", "\n", "            ", "self", ".", "mode", "=", "'train'", "if", "name", "==", "'it'", "else", "'val'", "\n", "self", ".", "iteration", "=", "value", "\n", "", "else", ":", "\n", "            ", "self", ".", "iteration_metrics", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOut1LBackend.end": [[263, 265], ["None"], "methods", ["None"], ["", "", "def", "end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.__init__": [[269, 273], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "iters", ",", "epochs", ",", "log_level", "=", "0", ")", ":", "\n", "        ", "self", ".", "level", "=", "log_level", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.log_run_tag": [[274, 276], ["print"], "methods", ["None"], ["", "def", "log_run_tag", "(", "self", ",", "name", ",", "val", ")", ":", "\n", "        ", "print", "(", "\"{} : {}\"", ".", "format", "(", "name", ",", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.log_end_epoch": [[277, 279], ["None"], "methods", ["None"], ["", "def", "log_end_epoch", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.log_end_iteration": [[280, 282], ["None"], "methods", ["None"], ["", "def", "log_end_iteration", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.log_epoch_metric": [[283, 289], ["print"], "methods", ["None"], ["", "def", "log_epoch_metric", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "name", "==", "'ep'", ":", "\n", "            ", "self", ".", "epoch", "=", "value", "\n", "self", ".", "iteration", "=", "0", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Summary Epoch: {};  {} = {:.3f}\"", ".", "format", "(", "self", ".", "epoch", ",", "name", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.log_iteration_metric": [[290, 295], ["print"], "methods", ["None"], ["", "", "def", "log_iteration_metric", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "name", "==", "'it'", "or", "name", "==", "'val.it'", ":", "\n", "            ", "self", ".", "iteration", "=", "value", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Epoch: {} Iteration: {};  {} = {:.3f}\"", ".", "format", "(", "self", ".", "epoch", ",", "self", ".", "iteration", ",", "name", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.end": [[296, 298], ["None"], "methods", ["None"], ["", "", "def", "end", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_error_grad": [[13, 32], ["hasattr", "enumerate", "enumerate", "hasattr", "enumerate", "clayers.extend", "clayer.grad.detach().cpu", "clayer.grad.detach"], "function", ["None"], ["def", "get_error_grad", "(", "m", ")", ":", "\n", "    ", "grad_dict", "=", "{", "}", "\n", "\n", "if", "hasattr", "(", "m", ",", "'layer4'", ")", ":", "\n", "        ", "layers", "=", "[", "m", ".", "layer1", ",", "m", ".", "layer2", ",", "m", ".", "layer3", ",", "m", ".", "layer4", "]", "\n", "", "else", ":", "\n", "        ", "layers", "=", "[", "m", ".", "layer1", ",", "m", ".", "layer2", ",", "m", ".", "layer3", "]", "\n", "\n", "", "for", "lid", ",", "layer", "in", "enumerate", "(", "layers", ")", ":", "\n", "        ", "for", "bid", ",", "block", "in", "enumerate", "(", "layer", ")", ":", "\n", "            ", "clayers", "=", "[", "block", ".", "conv1_in", ",", "block", ".", "conv2_in", "]", "\n", "if", "hasattr", "(", "block", ",", "'conv3'", ")", ":", "\n", "                ", "clayers", ".", "extend", "(", "[", "block", ".", "conv3_in", "]", ")", "\n", "\n", "", "for", "cid", ",", "clayer", "in", "enumerate", "(", "clayers", ")", ":", "\n", "                ", "layer_name", "=", "'conv_{}_{}_{}_error'", ".", "format", "(", "lid", "+", "1", ",", "bid", "+", "1", ",", "cid", "+", "1", ")", "\n", "grad_dict", "[", "layer_name", "]", "=", "clayer", ".", "grad", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "", "", "return", "grad_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad": [[34, 54], ["hasattr", "enumerate", "enumerate", "enumerate", "hasattr", "clayer.weight.detach().cpu", "clayer.weight.grad.detach().cpu", "clayer.weight.detach", "clayer.weight.grad.detach"], "function", ["None"], ["", "def", "get_grad", "(", "m", ")", ":", "\n", "    ", "grad_dict", "=", "{", "}", "\n", "\n", "if", "hasattr", "(", "m", ",", "'layer4'", ")", ":", "\n", "        ", "layers", "=", "[", "m", ".", "layer1", ",", "m", ".", "layer2", ",", "m", ".", "layer3", ",", "m", ".", "layer4", "]", "\n", "", "else", ":", "\n", "        ", "layers", "=", "[", "m", ".", "layer1", ",", "m", ".", "layer2", ",", "m", ".", "layer3", "]", "\n", "\n", "", "for", "lid", ",", "layer", "in", "enumerate", "(", "layers", ")", ":", "\n", "        ", "for", "bid", ",", "block", "in", "enumerate", "(", "layer", ")", ":", "\n", "            ", "clayers", "=", "[", "block", ".", "conv1", ",", "block", ".", "conv2", ",", "block", ".", "conv3", "]", "if", "hasattr", "(", "block", ",", "'conv3'", ")", "else", "[", "block", ".", "conv1", ",", "block", ".", "conv2", "]", "\n", "\n", "for", "cid", ",", "clayer", "in", "enumerate", "(", "clayers", ")", ":", "\n", "                ", "layer_name", "=", "'conv_{}_{}_{}_weight'", ".", "format", "(", "lid", "+", "1", ",", "bid", "+", "1", ",", "cid", "+", "1", ")", "\n", "grad_dict", "[", "layer_name", "]", "=", "clayer", ".", "weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "layer_name", "=", "'conv_{}_{}_{}_grad'", ".", "format", "(", "lid", "+", "1", ",", "bid", "+", "1", ",", "cid", "+", "1", ")", "\n", "grad_dict", "[", "layer_name", "]", "=", "clayer", ".", "weight", ".", "grad", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "", "", "", "return", "grad_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_batch_grad": [[56, 80], ["hasattr", "m.set_debug", "enumerate", "optimizer.zero_grad", "debug.get_grad", "debug.get_grad", "model_and_loss", "loss.backward", "torch.cuda.synchronize", "torch.save", "torch.distributed.is_initialized", "torch.distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet.set_debug", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.backward"], ["", "def", "get_batch_grad", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "ckpt_name", ")", ":", "\n", "    ", "if", "hasattr", "(", "model_and_loss", ".", "model", ",", "'module'", ")", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", "\n", "\n", "", "m", ".", "set_debug", "(", "True", ")", "\n", "data_iter", "=", "enumerate", "(", "val_loader", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "cnt", "=", "0", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "data_iter", ":", "\n", "        ", "loss", ",", "output", "=", "model_and_loss", "(", "input", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "cnt", "+=", "1", "\n", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "for", "param", "in", "param_group", "[", "'params'", "]", ":", "\n", "            ", "param", ".", "grad", "/=", "cnt", "\n", "\n", "", "", "grad", "=", "get_grad", "(", "m", ")", "\n", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "torch", ".", "save", "(", "grad", ",", "ckpt_name", ")", "\n", "", "return", "get_grad", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad_bias_std": [[82, 121], ["hasattr", "m.set_debug", "enumerate", "range", "utils.dict_sqrt", "utils.dict_minus", "torch.save", "optimizer.zero_grad", "model_and_loss", "loss.backward", "torch.cuda.synchronize", "torch.distributed.is_initialized", "torch.distributed.get_rank", "utils.dict_mul", "utils.dict_mul", "debug.get_grad", "utils.dict_sqr", "torch.distributed.is_initialized", "torch.distributed.get_rank", "utils.dict_minus", "utils.dict_add", "utils.dict_add"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet.set_debug", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_sqrt", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_minus", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_mul", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_mul", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_sqr", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_minus", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_add", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_add"], ["", "def", "get_grad_bias_std", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "mean_grad", ",", "ckpt_name", ",", "num_epochs", "=", "1", ")", ":", "\n", "    ", "if", "hasattr", "(", "model_and_loss", ".", "model", ",", "'module'", ")", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", "\n", "\n", "", "m", ".", "set_debug", "(", "True", ")", "\n", "data_iter", "=", "enumerate", "(", "val_loader", ")", "\n", "var_grad", "=", "None", "\n", "empirical_mean_grad", "=", "None", "\n", "cnt", "=", "0", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "data_iter", ":", "\n", "        ", "for", "e", "in", "range", "(", "num_epochs", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ",", "output", "=", "model_and_loss", "(", "input", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "grad_dict", "=", "get_grad", "(", "m", ")", "\n", "\n", "e_grad", "=", "dict_sqr", "(", "dict_minus", "(", "grad_dict", ",", "mean_grad", ")", ")", "\n", "if", "var_grad", "is", "None", ":", "\n", "                    ", "var_grad", "=", "e_grad", "\n", "", "else", ":", "\n", "                    ", "var_grad", "=", "dict_add", "(", "var_grad", ",", "e_grad", ")", "\n", "\n", "", "if", "empirical_mean_grad", "is", "None", ":", "\n", "                    ", "empirical_mean_grad", "=", "grad_dict", "\n", "", "else", ":", "\n", "                    ", "empirical_mean_grad", "=", "dict_add", "(", "empirical_mean_grad", ",", "grad_dict", ")", "\n", "\n", "", "", "cnt", "+=", "1", "\n", "\n", "", "", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "std_grad", "=", "dict_sqrt", "(", "dict_mul", "(", "var_grad", ",", "1.0", "/", "cnt", ")", ")", "\n", "bias_grad", "=", "dict_minus", "(", "dict_mul", "(", "empirical_mean_grad", ",", "1.0", "/", "cnt", ")", ",", "mean_grad", ")", "\n", "torch", ".", "save", "(", "std_grad", ",", "ckpt_name", ")", "\n", "return", "bias_grad", ",", "std_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad_std_naive": [[123, 159], ["hasattr", "m.set_debug", "enumerate", "utils.dict_sqrt", "optimizer.zero_grad", "model_and_loss", "loss.backward", "torch.cuda.synchronize", "utils.dict_clone", "range", "utils.dict_mul", "debug.get_grad", "optimizer.zero_grad", "model_and_loss", "loss.backward", "torch.cuda.synchronize", "debug.get_grad", "utils.dict_sqr", "utils.dict_minus", "utils.dict_add"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet.set_debug", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_sqrt", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_clone", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_mul", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_sqr", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_minus", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_add"], ["", "", "def", "get_grad_std_naive", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "num_epochs", "=", "1", ")", ":", "\n", "    ", "if", "hasattr", "(", "model_and_loss", ".", "model", ",", "'module'", ")", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", "\n", "\n", "", "m", ".", "set_debug", "(", "True", ")", "\n", "data_iter", "=", "enumerate", "(", "val_loader", ")", "\n", "var_grad", "=", "None", "\n", "cnt", "=", "0", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "data_iter", ":", "\n", "        ", "config", ".", "quantize_gradient", "=", "False", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ",", "output", "=", "model_and_loss", "(", "input", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "mean_grad", "=", "dict_clone", "(", "get_grad", "(", "m", ")", ")", "\n", "\n", "config", ".", "quantize_gradient", "=", "True", "\n", "for", "e", "in", "range", "(", "num_epochs", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ",", "output", "=", "model_and_loss", "(", "input", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "grad_dict", "=", "get_grad", "(", "m", ")", "\n", "\n", "e_grad", "=", "dict_sqr", "(", "dict_minus", "(", "grad_dict", ",", "mean_grad", ")", ")", "\n", "if", "var_grad", "is", "None", ":", "\n", "                ", "var_grad", "=", "e_grad", "\n", "", "else", ":", "\n", "                ", "var_grad", "=", "dict_add", "(", "var_grad", ",", "e_grad", ")", "\n", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "", "std_grad", "=", "dict_sqrt", "(", "dict_mul", "(", "var_grad", ",", "1.0", "/", "cnt", ")", ")", "\n", "return", "std_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.debug_bias": [[161, 201], ["hasattr", "m.set_debug", "enumerate", "optimizer.zero_grad", "model_and_loss", "loss.backward", "torch.cuda.synchronize", "debug.get_grad", "range", "optimizer.zero_grad", "model_and_loss", "loss.backward", "torch.cuda.synchronize", "debug.get_grad", "utils.dict_minus", "print", "torch.distributed.is_initialized", "torch.distributed.get_rank", "utils.dict_add", "utils.dict_mul", "bias_grad[].abs().mean", "bias_grad[].abs"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet.set_debug", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_minus", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_add", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_mul"], ["", "def", "debug_bias", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ")", ":", "\n", "    ", "if", "hasattr", "(", "model_and_loss", ".", "model", ",", "'module'", ")", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", "\n", "\n", "", "m", ".", "set_debug", "(", "True", ")", "\n", "data_iter", "=", "enumerate", "(", "val_loader", ")", "\n", "var_grad", "=", "None", "\n", "empirical_mean_grad", "=", "None", "\n", "cnt", "=", "0", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "data_iter", ":", "\n", "        ", "break", "\n", "\n", "", "config", ".", "quantize_gradient", "=", "False", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ",", "output", "=", "model_and_loss", "(", "input", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "exact_grad", "=", "get_grad", "(", "m", ")", "\n", "empirical_mean_grad", "=", "None", "\n", "config", ".", "quantize_gradient", "=", "True", "\n", "for", "e", "in", "range", "(", "100", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ",", "output", "=", "model_and_loss", "(", "input", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "cnt", "+=", "1", "\n", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "grad_dict", "=", "get_grad", "(", "m", ")", "\n", "\n", "if", "empirical_mean_grad", "is", "None", ":", "\n", "                ", "empirical_mean_grad", "=", "grad_dict", "\n", "", "else", ":", "\n", "                ", "empirical_mean_grad", "=", "dict_add", "(", "empirical_mean_grad", ",", "grad_dict", ")", "\n", "\n", "", "bias_grad", "=", "dict_minus", "(", "dict_mul", "(", "empirical_mean_grad", ",", "1.0", "/", "cnt", ")", ",", "exact_grad", ")", "\n", "print", "(", "e", ",", "bias_grad", "[", "'conv_1_1_1_grad'", "]", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_gradient": [[203, 230], ["hasattr", "m.set_debug", "model_and_loss", "optimizer.zero_grad", "loss.backward", "torch.cuda.synchronize", "debug.get_error_grad", "torch.save", "debug.get_grad", "torch.save", "torch.distributed.is_initialized", "torch.distributed.get_rank", "torch.distributed.is_initialized", "torch.distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet.set_debug", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_error_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad"], ["", "", "", "def", "get_gradient", "(", "model_and_loss", ",", "optimizer", ",", "input", ",", "target", ",", "prefix", ")", ":", "\n", "    ", "if", "hasattr", "(", "model_and_loss", ".", "model", ",", "'module'", ")", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", "\n", "\n", "", "m", ".", "set_debug", "(", "True", ")", "\n", "\n", "loss", ",", "output", "=", "model_and_loss", "(", "input", ",", "target", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "grad_dict", "=", "get_grad", "(", "m", ")", "\n", "ckpt_name", "=", "\"{}_weight.grad\"", ".", "format", "(", "prefix", ")", "\n", "torch", ".", "save", "(", "grad_dict", ",", "ckpt_name", ")", "\n", "\n", "", "grad_dict", "=", "get_error_grad", "(", "m", ")", "\n", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "rank", "=", "0", "\n", "", "else", ":", "\n", "        ", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "\n", "", "ckpt_name", "=", "\"{}_{}_error.grad\"", ".", "format", "(", "prefix", ",", "rank", ")", "\n", "torch", ".", "save", "(", "grad_dict", ",", "ckpt_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.dump": [[232, 254], ["print", "debug.get_batch_grad", "print", "enumerate", "debug.get_gradient", "range", "print", "debug.get_gradient"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_batch_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_gradient", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_gradient"], ["", "def", "dump", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "checkpoint_dir", ")", ":", "\n", "    ", "config", ".", "quantize_gradient", "=", "False", "\n", "print", "(", "\"Computing batch gradient...\"", ")", "\n", "grad", "=", "get_batch_grad", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "checkpoint_dir", "+", "\"/grad_mean.grad\"", ")", "\n", "\n", "# print(\"Computing gradient std...\")", "\n", "# get_grad_std(model_and_loss, optimizer, val_loader, grad, checkpoint_dir + \"/grad_std.grad\")", "\n", "\n", "print", "(", "\"Computing quantization noise...\"", ")", "\n", "data_iter", "=", "enumerate", "(", "val_loader", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "data_iter", ":", "\n", "        ", "break", "\n", "\n", "", "input", "=", "input", "[", ":", "128", "]", "\n", "target", "=", "target", "[", ":", "128", "]", "\n", "\n", "get_gradient", "(", "model_and_loss", ",", "optimizer", ",", "input", ",", "target", ",", "checkpoint_dir", "+", "\"/exact\"", ")", "\n", "\n", "config", ".", "quantize_gradient", "=", "True", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "print", "(", "i", ")", "\n", "get_gradient", "(", "model_and_loss", ",", "optimizer", ",", "input", ",", "target", ",", "checkpoint_dir", "+", "\"/sample_{}\"", ".", "format", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.key": [[259, 261], ["int", "a.split"], "function", ["None"], ["", "", "def", "key", "(", "a", ")", ":", "\n", "    ", "return", "[", "int", "(", "i", ")", "for", "i", "in", "a", ".", "split", "(", "'_'", ")", "[", "1", ":", "4", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.fast_dump": [[263, 293], ["print", "debug.get_batch_grad", "print", "debug.get_grad_bias_std", "debug.get_grad_bias_std", "list", "list", "list.sort", "torch.distributed.is_initialized", "torch.distributed.get_rank", "get_batch_grad.keys", "n.replace().replace", "set", "print", "n.replace", "grad_mean.abs().mean", "sg.mean", "bg.abs().mean", "sq.mean", "bq.abs().mean", "grad_mean.abs", "bg.abs", "bq.abs"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_batch_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad_bias_std", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad_bias_std"], ["", "def", "fast_dump", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "checkpoint_dir", ")", ":", "\n", "# debug_bias(model_and_loss, optimizer, val_loader)", "\n", "# exit(0)", "\n", "\n", "    ", "config", ".", "quantize_gradient", "=", "False", "\n", "print", "(", "\"Computing batch gradient...\"", ")", "\n", "grad", "=", "get_batch_grad", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "checkpoint_dir", "+", "\"/grad_mean.grad\"", ")", "\n", "\n", "print", "(", "\"Computing gradient std...\"", ")", "\n", "g_outputs", "=", "get_grad_bias_std", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "grad", ",", "checkpoint_dir", "+", "\"/grad_std.grad\"", ",", "num_epochs", "=", "1", ")", "\n", "\n", "config", ".", "quantize_gradient", "=", "True", "\n", "q_outputs", "=", "get_grad_bias_std", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "grad", ",", "checkpoint_dir", "+", "\"/grad_std_quan.grad\"", ",", "num_epochs", "=", "1", ")", "\n", "\n", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "bias_grad", ",", "std_grad", "=", "g_outputs", "\n", "bias_quan", ",", "std_quan", "=", "q_outputs", "\n", "weight_names", "=", "list", "(", "grad", ".", "keys", "(", ")", ")", "\n", "weight_names", "=", "[", "n", ".", "replace", "(", "'_grad'", ",", "''", ")", ".", "replace", "(", "'_weight'", ",", "''", ")", "for", "n", "in", "weight_names", "]", "\n", "weight_names", "=", "list", "(", "set", "(", "weight_names", ")", ")", "\n", "weight_names", ".", "sort", "(", "key", "=", "key", ")", "\n", "for", "k", "in", "weight_names", ":", "\n", "            ", "grad_mean", "=", "grad", "[", "k", "+", "'_grad'", "]", "\n", "sg", "=", "std_grad", "[", "k", "+", "'_grad'", "]", "\n", "bg", "=", "bias_grad", "[", "k", "+", "'_grad'", "]", "\n", "sq", "=", "std_quan", "[", "k", "+", "'_grad'", "]", "\n", "bq", "=", "bias_quan", "[", "k", "+", "'_grad'", "]", "\n", "\n", "print", "(", "'{}, batch grad mean={}, sample std={}, sample bias={}, overall std={}, overall bias={}'", ".", "format", "(", "\n", "k", ",", "grad_mean", ".", "abs", "(", ")", ".", "mean", "(", ")", ",", "sg", ".", "mean", "(", ")", ",", "bg", ".", "abs", "(", ")", ".", "mean", "(", ")", ",", "sq", ".", "mean", "(", ")", ",", "bq", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.fast_dump_2": [[295, 330], ["print", "debug.get_batch_grad", "print", "debug.get_grad_bias_std", "debug.get_grad_std_naive", "list", "list", "list.sort", "print", "torch.distributed.is_initialized", "torch.distributed.get_rank", "get_batch_grad.keys", "n.replace().replace", "set", "print", "sg.norm", "sq.norm", "n.replace", "grad_mean.norm", "sg.norm", "sq.norm", "sq.norm", "sg.norm"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_batch_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad_bias_std", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_grad_std_naive"], ["", "", "", "def", "fast_dump_2", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "checkpoint_dir", ")", ":", "\n", "    ", "config", ".", "quantize_gradient", "=", "False", "\n", "print", "(", "\"Computing batch gradient...\"", ")", "\n", "grad", "=", "get_batch_grad", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "checkpoint_dir", "+", "\"/grad_mean.grad\"", ")", "\n", "\n", "print", "(", "\"Computing gradient std...\"", ")", "\n", "g_outputs", "=", "get_grad_bias_std", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "grad", ",", "checkpoint_dir", "+", "\"/grad_std.grad\"", ",", "num_epochs", "=", "1", ")", "\n", "\n", "# config.quantize_gradient = True", "\n", "# q_outputs = get_grad_bias_std(model_and_loss, optimizer, val_loader, grad, checkpoint_dir + \"/grad_std_quan.grad\", num_epochs=3)", "\n", "std_quan", "=", "get_grad_std_naive", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "num_epochs", "=", "10", ")", "\n", "\n", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "bias_grad", ",", "std_grad", "=", "g_outputs", "\n", "# bias_quan, std_quan = q_outputs", "\n", "weight_names", "=", "list", "(", "grad", ".", "keys", "(", ")", ")", "\n", "weight_names", "=", "[", "n", ".", "replace", "(", "'_grad'", ",", "''", ")", ".", "replace", "(", "'_weight'", ",", "''", ")", "for", "n", "in", "weight_names", "]", "\n", "weight_names", "=", "list", "(", "set", "(", "weight_names", ")", ")", "\n", "weight_names", ".", "sort", "(", "key", "=", "key", ")", "\n", "\n", "sample_var", "=", "0.0", "\n", "quant_var", "=", "0.0", "\n", "for", "k", "in", "weight_names", ":", "\n", "            ", "grad_mean", "=", "grad", "[", "k", "+", "'_grad'", "]", "\n", "sg", "=", "std_grad", "[", "k", "+", "'_grad'", "]", "\n", "sq", "=", "std_quan", "[", "k", "+", "'_grad'", "]", "\n", "\n", "print", "(", "'{}, batch grad norm={}, sample var={}, quantization var={}, overall var={}'", ".", "format", "(", "\n", "k", ",", "grad_mean", ".", "norm", "(", ")", "**", "2", ",", "sg", ".", "norm", "(", ")", "**", "2", ",", "sq", ".", "norm", "(", ")", "**", "2", ",", "sq", ".", "norm", "(", ")", "**", "2", "+", "sg", ".", "norm", "(", ")", "**", "2", ")", ")", "\n", "\n", "sample_var", "+=", "sg", ".", "norm", "(", ")", "**", "2", "\n", "quant_var", "+=", "sq", ".", "norm", "(", ")", "**", "2", "\n", "\n", "", "print", "(", "'SampleVar = {}, QuantVar = {}, OverallVar = {}'", ".", "format", "(", "\n", "sample_var", ",", "quant_var", ",", "sample_var", "+", "quant_var", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.plot_bin_hist": [[333, 415], ["enumerate", "hasattr", "model_and_loss", "optimizer.zero_grad", "loss.backward", "torch.cuda.synchronize", "debug.plot_bin_hist.plot_each"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.backward"], ["", "", "def", "plot_bin_hist", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ")", ":", "\n", "    ", "config", ".", "grads", "=", "[", "]", "\n", "config", ".", "acts", "=", "[", "]", "\n", "data_iter", "=", "enumerate", "(", "val_loader", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "data_iter", ":", "\n", "        ", "break", "\n", "\n", "", "input", "=", "input", "[", ":", "128", "]", "\n", "target", "=", "target", "[", ":", "128", "]", "\n", "\n", "if", "hasattr", "(", "model_and_loss", ".", "model", ",", "'module'", ")", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", "\n", "\n", "", "loss", ",", "output", "=", "model_and_loss", "(", "input", ",", "target", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "# fig, ax = plt.subplots(figsize=(5, 5))", "\n", "g", "=", "config", ".", "grads", "[", "20", "]", "\n", "# ax.hist(g.cpu().numpy().ravel(), bins=2**config.backward_num_bits-1)", "\n", "# ax.set_yscale('log')", "\n", "# fig.savefig('grad_output_hist.pdf')", "\n", "\n", "for", "i", "in", "[", "1", ",", "2", "]", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "2.5", ",", "2.5", ")", ")", "\n", "ax", ".", "hist", "(", "g", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", ",", "bins", "=", "256", ",", "range", "=", "[", "-", "1e-5", ",", "1e-5", "]", ")", "\n", "ax", ".", "set_yscale", "(", "'log'", ")", "\n", "ax", ".", "set_xlim", "(", "[", "-", "1e-5", ",", "1e-5", "]", ")", "\n", "ax", ".", "set_xticks", "(", "[", "-", "1e-5", ",", "0", ",", "1e-5", "]", ")", "\n", "ax", ".", "set_xticklabels", "(", "[", "'$-10^{-5}$'", ",", "'$0$'", ",", "'$10^{-5}$'", "]", ")", "\n", "l", ",", "b", ",", "w", ",", "h", "=", "ax", ".", "get_position", "(", ")", ".", "bounds", "\n", "ax", ".", "set_position", "(", "[", "l", "+", "0.05", "*", "w", ",", "b", ",", "0.95", "*", "w", ",", "h", "]", ")", "\n", "fig", ".", "savefig", "(", "'{}_hist.pdf'", ".", "format", "(", "i", ")", ",", "transparent", "=", "True", ")", "\n", "\n", "", "from", "image_classification", ".", "quantize", "import", "quantize", "\n", "\n", "def", "plot_each", "(", "preconditioner", ",", "Preconditioner", ",", "name", ",", "g", ")", ":", "\n", "        ", "input", "=", "g", "\n", "prec", "=", "preconditioner", "(", "g", ",", "num_bits", "=", "config", ".", "backward_num_bits", ")", "\n", "g", "=", "prec", ".", "forward", "(", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "2.5", ",", "2.5", ")", ")", "\n", "ax", ".", "hist", "(", "g", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", ",", "bins", "=", "2", "**", "config", ".", "backward_num_bits", "-", "1", ",", "range", "=", "[", "0", ",", "255", "]", ")", "\n", "ax", ".", "set_yscale", "(", "'log'", ")", "\n", "ax", ".", "set_ylim", "(", "[", "1", ",", "1e6", "]", ")", "\n", "ax", ".", "set_xlim", "(", "[", "0", ",", "255", "]", ")", "\n", "ax", ".", "set_xticks", "(", "[", "0", ",", "255", "]", ")", "\n", "l", ",", "b", ",", "w", ",", "h", "=", "ax", ".", "get_position", "(", ")", ".", "bounds", "\n", "ax", ".", "set_position", "(", "[", "l", "+", "0.05", "*", "w", ",", "b", ",", "0.95", "*", "w", ",", "h", "]", ")", "\n", "fig", ".", "savefig", "(", "'{}_hist.pdf'", ".", "format", "(", "name", ")", ",", "transparent", "=", "True", ")", "\n", "\n", "prec", ".", "zero_point", "*=", "0", "\n", "bin_sizes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "128", ")", ":", "\n", "            ", "bin_sizes", ".", "append", "(", "float", "(", "prec", ".", "inverse_transform", "(", "torch", ".", "eye", "(", "128", ")", "[", ":", ",", "i", ":", "i", "+", "1", "]", ".", "cuda", "(", ")", ")", ".", "sum", "(", ")", ")", ")", "\n", "", "print", "(", "bin_sizes", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "2.5", ",", "2.5", ")", ")", "\n", "ax", ".", "hist", "(", "bin_sizes", ",", "bins", "=", "50", ",", "range", "=", "[", "0", ",", "1e-5", "]", ")", "\n", "# ax.set_yscale('log')", "\n", "ax", ".", "set_xlim", "(", "[", "0", ",", "1e-5", "]", ")", "\n", "ax", ".", "set_xticks", "(", "[", "0", ",", "1e-5", "]", ")", "\n", "ax", ".", "set_xticklabels", "(", "[", "'$0$'", ",", "'$10^{-5}$'", "]", ")", "\n", "l", ",", "b", ",", "w", ",", "h", "=", "ax", ".", "get_position", "(", ")", ".", "bounds", "\n", "ax", ".", "set_position", "(", "[", "l", "+", "0.05", "*", "w", ",", "b", ",", "0.95", "*", "w", ",", "h", "]", ")", "\n", "# ax.set_ylim([0, 128])", "\n", "fig", ".", "savefig", "(", "'{}_bin_size_hist.pdf'", ".", "format", "(", "name", ")", ",", "transparent", "=", "True", ")", "\n", "\n", "gs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "grad", "=", "quantize", "(", "input", ",", "Preconditioner", ",", "stochastic", "=", "True", ")", "\n", "gs", ".", "append", "(", "grad", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "var", "=", "np", ".", "stack", "(", "gs", ")", ".", "var", "(", "0", ")", ".", "sum", "(", ")", "\n", "print", "(", "var", ")", "\n", "\n", "", "from", "image_classification", ".", "preconditioner", "import", "ScalarPreconditionerAct", ",", "DiagonalPreconditioner", ",", "BlockwiseHouseholderPreconditioner", "\n", "plot_each", "(", "ScalarPreconditionerAct", ",", "lambda", "x", ":", "ScalarPreconditionerAct", "(", "x", ",", "config", ".", "backward_num_bits", ")", ",", "'PTQ'", ",", "g", ")", "\n", "plot_each", "(", "DiagonalPreconditioner", ",", "lambda", "x", ":", "DiagonalPreconditioner", "(", "x", ",", "config", ".", "backward_num_bits", ")", ",", "'PSQ'", ",", "g", ")", "\n", "plot_each", "(", "BlockwiseHouseholderPreconditioner", ",", "lambda", "x", ":", "BlockwiseHouseholderPreconditioner", "(", "x", ",", "config", ".", "backward_num_bits", ")", ",", "'BHQ'", ",", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.plot_weight_hist": [[443, 531], ["enumerate", "hasattr", "m.set_debug", "model_and_loss", "model_and_loss", "hasattr", "print", "print", "print", "print", "print", "enumerate", "len", "matplotlib.pyplot.subplots", "range", "fig.savefig", "numpy.savez", "numpy.savez", "numpy.savez", "numpy.savez", "hasattr", "enumerate", "numpy.savez", "numpy.savez", "torch.distributed.is_initialized", "torch.distributed.get_rank", "enumerate", "ax[].hist", "ax[].set_title", "print", "open", "pickle.dump", "torch.distributed.is_initialized", "torch.distributed.get_rank", "enumerate", "enumerate", "weight.ravel", "weight.min", "weight.max", "enumerate", "hasattr", "names.append", "exact_weights.append", "weights.append", "acts.append", "ins.append", "hasattr", "acts.append", "ins.append", "clayer.weight.detach().cpu().numpy", "clayer.qweight.detach().cpu().numpy", "clayer.act.detach().cpu().numpy", "clayer.iact.detach().cpu().numpy", "clayer.act.detach().cpu().numpy", "clayer.iact.detach().cpu().numpy", "clayer.weight.detach().cpu", "clayer.qweight.detach().cpu", "clayer.act.detach().cpu", "clayer.iact.detach().cpu", "clayer.act.detach().cpu", "clayer.iact.detach().cpu", "clayer.weight.detach", "clayer.qweight.detach", "clayer.act.detach", "clayer.iact.detach", "clayer.act.detach", "clayer.iact.detach"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet.set_debug", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.dump"], ["", "def", "plot_weight_hist", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ")", ":", "\n", "    ", "config", ".", "grads", "=", "[", "]", "\n", "config", ".", "acts", "=", "[", "]", "\n", "data_iter", "=", "enumerate", "(", "val_loader", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "data_iter", ":", "\n", "        ", "break", "\n", "\n", "", "input", "=", "input", "[", ":", "32", "]", "\n", "target", "=", "target", "[", ":", "32", "]", "\n", "\n", "if", "hasattr", "(", "model_and_loss", ".", "model", ",", "'module'", ")", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", "\n", "\n", "", "m", ".", "set_debug", "(", "True", ")", "\n", "loss", ",", "output", "=", "model_and_loss", "(", "input", ",", "target", ")", "\n", "\n", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "weights", "=", "[", "]", "\n", "exact_weights", "=", "[", "]", "\n", "acts", "=", "[", "]", "\n", "names", "=", "[", "]", "\n", "ins", "=", "[", "]", "\n", "\n", "if", "hasattr", "(", "m", ",", "'layer4'", ")", ":", "\n", "            ", "layers", "=", "[", "m", ".", "layer1", ",", "m", ".", "layer2", ",", "m", ".", "layer3", ",", "m", ".", "layer4", "]", "\n", "", "else", ":", "\n", "            ", "layers", "=", "[", "m", ".", "layer1", ",", "m", ".", "layer2", ",", "m", ".", "layer3", "]", "\n", "\n", "", "print", "(", "m", ".", "layer1", "[", "0", "]", ".", "conv1_out", "[", "0", ",", "10", "]", ")", "\n", "print", "(", "m", ".", "layer1", "[", "0", "]", ".", "conv1_bn_out", "[", "0", ",", "10", "]", ")", "\n", "print", "(", "m", ".", "layer1", "[", "0", "]", ".", "conv1_relu_out", "[", "0", ",", "10", "]", ")", "\n", "print", "(", "m", ".", "layer1", "[", "0", "]", ".", "conv2_in", "[", "0", ",", "10", "]", ")", "\n", "print", "(", "m", ".", "layer1", "[", "0", "]", ".", "bn1", ".", "running_mean", ",", "m", ".", "layer1", "[", "0", "]", ".", "bn1", ".", "running_var", ")", "\n", "\n", "for", "lid", ",", "layer", "in", "enumerate", "(", "layers", ")", ":", "\n", "            ", "for", "bid", ",", "block", "in", "enumerate", "(", "layer", ")", ":", "\n", "                ", "clayers", "=", "[", "block", ".", "conv1", ",", "block", ".", "conv2", ",", "block", ".", "conv3", "]", "if", "hasattr", "(", "block", ",", "'conv3'", ")", "else", "[", "block", ".", "conv1", ",", "block", ".", "conv2", "]", "\n", "\n", "for", "cid", ",", "clayer", "in", "enumerate", "(", "clayers", ")", ":", "\n", "                    ", "layer_name", "=", "'conv_{}_{}_{}'", ".", "format", "(", "lid", "+", "1", ",", "bid", "+", "1", ",", "cid", "+", "1", ")", "\n", "names", ".", "append", "(", "layer_name", ")", "\n", "exact_weights", ".", "append", "(", "clayer", ".", "weight", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "weights", ".", "append", "(", "clayer", ".", "qweight", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "acts", ".", "append", "(", "clayer", ".", "act", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "ins", ".", "append", "(", "clayer", ".", "iact", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "", "num_weights", "=", "len", "(", "weights", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "num_weights", ",", "figsize", "=", "(", "5", ",", "5", "*", "num_weights", ")", ")", "\n", "for", "i", "in", "range", "(", "num_weights", ")", ":", "\n", "            ", "weight", "=", "weights", "[", "i", "]", "\n", "ax", "[", "i", "]", ".", "hist", "(", "weight", ".", "ravel", "(", ")", ",", "bins", "=", "2", "**", "config", ".", "backward_num_bits", ")", "\n", "ax", "[", "i", "]", ".", "set_title", "(", "names", "[", "i", "]", ")", "\n", "print", "(", "i", ",", "weight", ".", "min", "(", ")", ",", "weight", ".", "max", "(", ")", ")", "\n", "\n", "", "fig", ".", "savefig", "(", "'weight_hist.pdf'", ")", "\n", "np", ".", "savez", "(", "'acts.pkl'", ",", "*", "acts", ")", "\n", "np", ".", "savez", "(", "'exact_weights.pkl'", ",", "*", "exact_weights", ")", "\n", "np", ".", "savez", "(", "'weights.pkl'", ",", "*", "weights", ")", "\n", "np", ".", "savez", "(", "'iacts.pkl'", ",", "*", "ins", ")", "\n", "with", "open", "(", "'layer_names.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "names", ",", "f", ")", "\n", "\n", "", "", "config", ".", "quantize_weights", "=", "False", "\n", "loss", ",", "output", "=", "model_and_loss", "(", "input", ",", "target", ")", "\n", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "acts", "=", "[", "]", "\n", "ins", "=", "[", "]", "\n", "\n", "if", "hasattr", "(", "m", ",", "'layer4'", ")", ":", "\n", "            ", "layers", "=", "[", "m", ".", "layer1", ",", "m", ".", "layer2", ",", "m", ".", "layer3", ",", "m", ".", "layer4", "]", "\n", "", "else", ":", "\n", "            ", "layers", "=", "[", "m", ".", "layer1", ",", "m", ".", "layer2", ",", "m", ".", "layer3", "]", "\n", "\n", "", "for", "lid", ",", "layer", "in", "enumerate", "(", "layers", ")", ":", "\n", "            ", "for", "bid", ",", "block", "in", "enumerate", "(", "layer", ")", ":", "\n", "                ", "clayers", "=", "[", "block", ".", "conv1", ",", "block", ".", "conv2", ",", "block", ".", "conv3", "]", "if", "hasattr", "(", "block", ",", "'conv3'", ")", "else", "[", "block", ".", "conv1", ",", "block", ".", "conv2", "]", "\n", "\n", "for", "cid", ",", "clayer", "in", "enumerate", "(", "clayers", ")", ":", "\n", "                    ", "layer_name", "=", "'conv_{}_{}_{}'", ".", "format", "(", "lid", "+", "1", ",", "bid", "+", "1", ",", "cid", "+", "1", ")", "\n", "acts", ".", "append", "(", "clayer", ".", "act", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "ins", ".", "append", "(", "clayer", ".", "iact", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "", "np", ".", "savez", "(", "'exact_acts.pkl'", ",", "*", "acts", ")", "\n", "np", ".", "savez", "(", "'exact_iacts.pkl'", ",", "*", "ins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.write_errors": [[533, 556], ["enumerate", "hasattr", "range", "print", "model_and_loss", "optimizer.zero_grad", "loss.backward", "torch.cuda.synchronize", "numpy.savez", "torch.distributed.is_initialized", "torch.distributed.get_rank"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.backward"], ["", "", "def", "write_errors", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ")", ":", "\n", "    ", "data_iter", "=", "enumerate", "(", "val_loader", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "data_iter", ":", "\n", "        ", "break", "\n", "\n", "", "input", "=", "input", "[", ":", "128", "]", "\n", "target", "=", "target", "[", ":", "128", "]", "\n", "\n", "if", "hasattr", "(", "model_and_loss", ".", "model", ",", "'module'", ")", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", "\n", "\n", "", "for", "iter", "in", "range", "(", "10", ")", ":", "\n", "        ", "print", "(", "iter", ")", "\n", "config", ".", "grads", "=", "[", "]", "\n", "loss", ",", "output", "=", "model_and_loss", "(", "input", ",", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "np", ".", "savez", "(", "'errors_{}.pkl'", ".", "format", "(", "iter", ")", ",", "*", "config", ".", "grads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.variance_profile": [[558, 651], ["hasattr", "m.set_debug", "m.set_name", "enumerate", "tqdm.tqdm", "utils.dict_mul", "tqdm.tqdm", "numpy.array", "range", "numpy.save", "numpy.maximum", "range", "matplotlib.pyplot.subplots", "ax.imshow", "ax.set_xticks", "ax.set_yticks", "ax.set_xticklabels", "ax.set_yticklabels", "ax.tick_params", "matplotlib.pyplot.setp", "ax.figure.colorbar", "range", "fig.savefig", "optimizer.zero_grad", "model_and_loss", "loss.backward", "torch.cuda.synchronize", "inputs.append", "targets.append", "debug.variance_profile.bp"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet.set_debug", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet.set_name", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_mul", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.backward"], ["", "", "", "def", "variance_profile", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "prefix", "=", "'.'", ",", "num_batches", "=", "10000", ")", ":", "\n", "    ", "if", "hasattr", "(", "model_and_loss", ".", "model", ",", "'module'", ")", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", "\n", "\n", "# Get top 10 batches", "\n", "", "m", ".", "set_debug", "(", "True", ")", "\n", "m", ".", "set_name", "(", ")", "\n", "weight_names", "=", "[", "layer", ".", "layer_name", "for", "layer", "in", "m", ".", "linear_layers", "]", "\n", "\n", "data_iter", "=", "enumerate", "(", "val_loader", ")", "\n", "inputs", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "batch_grad", "=", "None", "\n", "quant_var", "=", "None", "\n", "\n", "def", "bp", "(", "input", ",", "target", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ",", "output", "=", "model_and_loss", "(", "input", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "grad", "=", "{", "layer", ".", "layer_name", ":", "layer", ".", "weight", ".", "grad", ".", "detach", "(", ")", ".", "cpu", "(", ")", "for", "layer", "in", "m", ".", "linear_layers", "}", "\n", "return", "grad", "\n", "\n", "", "cnt", "=", "0", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "tqdm", "(", "data_iter", ")", ":", "\n", "        ", "cnt", "+=", "1", "\n", "\n", "inputs", ".", "append", "(", "input", ".", "clone", "(", ")", ")", "\n", "targets", ".", "append", "(", "target", ".", "clone", "(", ")", ")", "\n", "\n", "# Deterministic", "\n", "config", ".", "quantize_gradient", "=", "False", "\n", "mean_grad", "=", "bp", "(", "input", ",", "target", ")", "\n", "batch_grad", "=", "dict_add", "(", "batch_grad", ",", "mean_grad", ")", "\n", "\n", "if", "cnt", "==", "num_batches", ":", "\n", "            ", "break", "\n", "\n", "", "", "num_batches", "=", "cnt", "\n", "batch_grad", "=", "dict_mul", "(", "batch_grad", ",", "1.0", "/", "num_batches", ")", "\n", "\n", "def", "get_variance", "(", ")", ":", "\n", "        ", "total_var", "=", "None", "\n", "for", "i", ",", "input", ",", "target", "in", "tqdm", "(", "zip", "(", "range", "(", "num_batches", ")", ",", "inputs", ",", "targets", ")", ")", ":", "\n", "            ", "grad", "=", "bp", "(", "input", ",", "target", ")", "\n", "total_var", "=", "dict_add", "(", "total_var", ",", "dict_sqr", "(", "dict_minus", "(", "grad", ",", "batch_grad", ")", ")", ")", "\n", "\n", "", "grads", "=", "[", "total_var", "[", "k", "]", ".", "sum", "(", ")", "/", "num_batches", "for", "k", "in", "weight_names", "]", "\n", "print", "(", "grads", ")", "\n", "return", "grads", "\n", "\n", "", "config", ".", "quantize_gradient", "=", "True", "\n", "grads", "=", "[", "get_variance", "(", ")", "]", "\n", "for", "layer", "in", "tqdm", "(", "m", ".", "linear_layers", ")", ":", "\n", "        ", "layer", ".", "exact", "=", "True", "\n", "grads", ".", "append", "(", "get_variance", "(", ")", ")", "\n", "\n", "", "grads", "=", "np", ".", "array", "(", "grads", ")", "\n", "\n", "for", "i", "in", "range", "(", "grads", ".", "shape", "[", "0", "]", "-", "1", ")", ":", "\n", "        ", "grads", "[", "i", "]", "-=", "grads", "[", "i", "+", "1", "]", "\n", "\n", "", "np", ".", "save", "(", "prefix", "+", "'/error_profile.npy'", ",", "grads", ")", "\n", "with", "open", "(", "prefix", "+", "'/layer_names.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "weight_names", ",", "f", ")", "\n", "\n", "", "grads", "=", "np", ".", "maximum", "(", "grads", ",", "0", ")", "\n", "# grads = np.minimum(grads, 1)", "\n", "for", "i", "in", "range", "(", "grads", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "grads", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "j", ">", "i", ":", "\n", "                ", "grads", "[", "i", ",", "j", "]", "=", "0", "\n", "\n", "", "", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "20", ",", "20", ")", ")", "\n", "im", "=", "ax", ".", "imshow", "(", "grads", ",", "cmap", "=", "'Blues'", ",", "norm", "=", "LogNorm", "(", "vmin", "=", "0.01", ",", "vmax", "=", "10.0", ")", ")", "\n", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "len", "(", "weight_names", ")", ")", ")", "\n", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "len", "(", "weight_names", ")", ")", ")", "\n", "ax", ".", "set_xticklabels", "(", "weight_names", ")", "\n", "ax", ".", "set_yticklabels", "(", "weight_names", ")", "\n", "ax", ".", "tick_params", "(", "top", "=", "True", ",", "bottom", "=", "False", ",", "\n", "labeltop", "=", "True", ",", "labelbottom", "=", "False", ")", "\n", "plt", ".", "setp", "(", "ax", ".", "get_xticklabels", "(", ")", ",", "rotation", "=", "-", "30", ",", "ha", "=", "\"right\"", ",", "\n", "rotation_mode", "=", "\"anchor\"", ")", "\n", "cbar", "=", "ax", ".", "figure", ".", "colorbar", "(", "im", ",", "ax", "=", "ax", ")", "\n", "\n", "for", "i", "in", "range", "(", "grads", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "grads", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "text", "=", "ax", ".", "text", "(", "j", ",", "i", ",", "int", "(", "grads", "[", "i", ",", "j", "]", "*", "10", ")", ",", "\n", "ha", "=", "\"center\"", ",", "va", "=", "\"center\"", ")", "\n", "\n", "", "", "fig", ".", "savefig", "(", "'variance_profile.pdf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.get_var": [[653, 720], ["hasattr", "m.set_debug", "m.set_name", "enumerate", "tqdm.tqdm", "utils.dict_mul", "debug.variance_profile.get_variance"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet.set_debug", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet.set_name", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_mul"], ["", "def", "get_var", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ",", "num_batches", "=", "10000", ")", ":", "\n", "    ", "if", "hasattr", "(", "model_and_loss", ".", "model", ",", "'module'", ")", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", ".", "module", "\n", "", "else", ":", "\n", "        ", "m", "=", "model_and_loss", ".", "model", "\n", "\n", "# Get top 10 batches", "\n", "", "m", ".", "set_debug", "(", "True", ")", "\n", "m", ".", "set_name", "(", ")", "\n", "weight_names", "=", "[", "layer", ".", "layer_name", "for", "layer", "in", "m", ".", "linear_layers", "]", "\n", "\n", "data_iter", "=", "enumerate", "(", "val_loader", ")", "\n", "inputs", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "batch_grad", "=", "None", "\n", "quant_var", "=", "None", "\n", "\n", "def", "bp", "(", "input", ",", "target", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ",", "output", "=", "model_and_loss", "(", "input", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "grad", "=", "{", "layer", ".", "layer_name", ":", "layer", ".", "weight", ".", "grad", ".", "detach", "(", ")", ".", "cpu", "(", ")", "for", "layer", "in", "m", ".", "linear_layers", "}", "\n", "return", "grad", "\n", "\n", "", "cnt", "=", "0", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "tqdm", "(", "data_iter", ")", ":", "\n", "        ", "cnt", "+=", "1", "\n", "\n", "inputs", ".", "append", "(", "input", ".", "clone", "(", ")", ")", "\n", "targets", ".", "append", "(", "target", ".", "clone", "(", ")", ")", "\n", "\n", "# Deterministic", "\n", "config", ".", "quantize_gradient", "=", "False", "\n", "mean_grad", "=", "bp", "(", "input", ",", "target", ")", "\n", "batch_grad", "=", "dict_add", "(", "batch_grad", ",", "mean_grad", ")", "\n", "\n", "if", "cnt", "==", "num_batches", ":", "\n", "            ", "break", "\n", "\n", "", "", "num_batches", "=", "cnt", "\n", "batch_grad", "=", "dict_mul", "(", "batch_grad", ",", "1.0", "/", "num_batches", ")", "\n", "\n", "def", "get_variance", "(", ")", ":", "\n", "        ", "total_var", "=", "None", "\n", "for", "i", ",", "input", ",", "target", "in", "tqdm", "(", "zip", "(", "range", "(", "num_batches", ")", ",", "inputs", ",", "targets", ")", ")", ":", "\n", "            ", "grad", "=", "bp", "(", "input", ",", "target", ")", "\n", "total_var", "=", "dict_add", "(", "total_var", ",", "dict_sqr", "(", "dict_minus", "(", "grad", ",", "batch_grad", ")", ")", ")", "\n", "\n", "", "grads", "=", "[", "total_var", "[", "k", "]", ".", "sum", "(", ")", "/", "num_batches", "for", "k", "in", "weight_names", "]", "\n", "return", "grads", "\n", "\n", "", "config", ".", "quantize_gradient", "=", "True", "\n", "q_grads", "=", "get_variance", "(", ")", "\n", "config", ".", "quantize_gradient", "=", "False", "\n", "s_grads", "=", "get_variance", "(", ")", "\n", "\n", "all_qg", "=", "0", "\n", "all_sg", "=", "0", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "weight_names", ")", ":", "\n", "        ", "qg", "=", "q_grads", "[", "i", "]", ".", "sum", "(", ")", "\n", "sg", "=", "s_grads", "[", "i", "]", ".", "sum", "(", ")", "\n", "all_qg", "+=", "qg", "\n", "all_sg", "+=", "sg", "\n", "print", "(", "'{}, overall var = {}, quant var = {}, sample var = {}'", ".", "format", "(", "k", ",", "qg", ",", "qg", "-", "sg", ",", "sg", ")", ")", "\n", "\n", "", "print", "(", "'Overall Var = {}, Quant Var = {}, Sample Var = {}'", ".", "format", "(", "all_qg", ",", "all_qg", "-", "all_sg", ",", "all_sg", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.__init__": [[13, 18], ["sum"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "version", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "L", "=", "sum", "(", "version", "[", "'layers'", "]", ")", "\n", "self", ".", "M", "=", "version", "[", "'block'", "]", ".", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv": [[19, 41], ["torch.init.kaiming_normal_", "torch.init.kaiming_normal_"], "methods", ["None"], ["", "def", "conv", "(", "self", ",", "kernel_size", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "if", "kernel_size", "==", "3", ":", "\n", "            ", "conv", "=", "self", ".", "config", "[", "'conv'", "]", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "elif", "kernel_size", "==", "1", ":", "\n", "            ", "conv", "=", "self", ".", "config", "[", "'conv'", "]", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", "\n", "", "elif", "kernel_size", "==", "5", ":", "\n", "            ", "conv", "=", "self", ".", "config", "[", "'conv'", "]", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "2", ",", "bias", "=", "False", ")", "\n", "", "elif", "kernel_size", "==", "7", ":", "\n", "            ", "conv", "=", "self", ".", "config", "[", "'conv'", "]", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "self", ".", "config", "[", "'nonlinearity'", "]", "==", "'relu'", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "conv", ".", "weight", ",", "\n", "mode", "=", "self", ".", "config", "[", "'conv_init'", "]", ",", "\n", "nonlinearity", "=", "self", ".", "config", "[", "'nonlinearity'", "]", ")", "\n", "\n", "", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv3x3": [[42, 46], ["resnet.ResNetBuilder.conv"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv"], ["", "def", "conv3x3", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "3", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv1x1": [[47, 51], ["resnet.ResNetBuilder.conv"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv"], ["", "def", "conv1x1", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"\"\"1x1 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "1", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv7x7": [[52, 56], ["resnet.ResNetBuilder.conv"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv"], ["", "def", "conv7x7", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"\"\"7x7 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "7", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv5x5": [[57, 61], ["resnet.ResNetBuilder.conv"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv"], ["", "def", "conv5x5", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"\"\"5x5 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "5", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.batchnorm": [[62, 71], ["torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "batchnorm", "(", "self", ",", "planes", ",", "last_bn", "=", "False", ")", ":", "\n", "# bn = nn.BatchNorm2d(planes)", "\n", "        ", "bn", "=", "self", ".", "config", "[", "'bn'", "]", "(", "planes", ")", "\n", "\n", "gamma_init_val", "=", "0", "if", "last_bn", "and", "self", ".", "config", "[", "'last_bn_0_init'", "]", "else", "1", "\n", "nn", ".", "init", ".", "constant_", "(", "bn", ".", "weight", ",", "gamma_init_val", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "bn", ".", "bias", ",", "0", ")", "\n", "\n", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.linear": [[72, 74], ["None"], "methods", ["None"], ["", "def", "linear", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "return", "self", ".", "config", "[", "'linear'", "]", "(", "in_planes", ",", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.activation": [[75, 77], ["None"], "methods", ["None"], ["", "def", "activation", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "config", "[", "'activation'", "]", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.BasicBlock.__init__": [[85, 94], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "builder.activation", "builder.conv3x3", "builder.batchnorm"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv3x3", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.batchnorm", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.activation", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv3x3", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.BasicBlock.forward": [[95, 116], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.bn2", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "bn2", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "# BasicBlock }}}", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.Bottleneck.__init__": [[123, 135], ["torch.Module.__init__", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "builder.activation"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv1x1", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.batchnorm", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv3x3", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.batchnorm", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv1x1", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.batchnorm", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.activation"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "planes", "*", "self", ".", "expansion", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "debug", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.Bottleneck.forward": [[136, 184], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "x.retain_grad", "x.retain_grad", "x.retain_grad", "x.retain_grad", "resnet.Bottleneck.retain_grad", "resnet.Bottleneck.retain_grad", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "x", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv1_in", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "x", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv1_out", "=", "out", "\n", "\n", "", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "x", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv1_bn_out", "=", "out", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "x", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv1_relu_out", "=", "out", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "out", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv2_in", "=", "out", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "out", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv3_in", "=", "out", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "# Bottleneck }}}", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNet.__init__": [[188, 201], ["torch.Module.__init__", "builder.conv7x7", "builder.batchnorm", "builder.activation", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "builder.linear"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv7x7", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.batchnorm", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.activation", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.linear"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv7x7", "(", "3", ",", "64", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "builder", ".", "linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNet._make_layer": [[202, 220], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "builder.conv1x1", "builder.batchnorm", "block", "layers.append", "torch.Sequential", "torch.Sequential", "block"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv1x1", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.batchnorm"], ["", "def", "_make_layer", "(", "self", ",", "builder", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "dconv", "=", "builder", ".", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ")", "\n", "dbn", "=", "builder", ".", "batchnorm", "(", "planes", "*", "block", ".", "expansion", ")", "\n", "if", "dbn", "is", "not", "None", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "dconv", ",", "dbn", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "dconv", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNet.forward": [[221, 238], ["resnet.ResNet.conv1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.bn1", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNet.set_debug": [[239, 244], ["None"], "methods", ["None"], ["", "def", "set_debug", "(", "self", ",", "debug", ")", ":", "\n", "        ", "self", ".", "debug", "=", "True", "\n", "for", "l", "in", "[", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", ",", "self", ".", "layer4", "]", ":", "\n", "            ", "for", "b", "in", "l", ":", "\n", "                ", "b", ".", "debug", "=", "debug", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.build_resnet": [[356, 369], ["resnet.ResNetBuilder", "print", "print"], "function", ["None"], ["def", "build_resnet", "(", "version", ",", "config", ",", "model_state", "=", "None", ")", ":", "\n", "    ", "version", "=", "resnet_versions", "[", "version", "]", "\n", "config", "=", "resnet_configs", "[", "config", "]", "\n", "\n", "builder", "=", "ResNetBuilder", "(", "version", ",", "config", ")", "\n", "print", "(", "\"Version: {}\"", ".", "format", "(", "version", ")", ")", "\n", "print", "(", "\"Config: {}\"", ".", "format", "(", "config", ")", ")", "\n", "model", "=", "version", "[", "'net'", "]", "(", "builder", ",", "\n", "version", "[", "'block'", "]", ",", "\n", "version", "[", "'layers'", "]", ",", "\n", "version", "[", "'num_classes'", "]", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.mixup.MixUpWrapper.__init__": [[19, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "alpha", ",", "num_classes", ",", "dataloader", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.mixup.MixUpWrapper.mixup_loader": [[24, 28], ["mixup.mixup"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.mixup.mixup"], ["", "def", "mixup_loader", "(", "self", ",", "loader", ")", ":", "\n", "        ", "for", "input", ",", "target", "in", "loader", ":", "\n", "            ", "i", ",", "t", "=", "mixup", "(", "self", ".", "alpha", ",", "self", ".", "num_classes", ",", "input", ",", "target", ")", "\n", "yield", "i", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.mixup.MixUpWrapper.__iter__": [[29, 31], ["mixup.MixUpWrapper.mixup_loader"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.mixup.MixUpWrapper.mixup_loader"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mixup_loader", "(", "self", ".", "dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.mixup.NLLMultiLabelSmooth.__init__": [[34, 38], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NLLMultiLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.mixup.NLLMultiLabelSmooth.forward": [[39, 55], ["x.float.float.float", "target.float.float.float", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.sum.sum.sum", "loss.mean", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "x", "=", "x", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", "*", "target", "\n", "nll_loss", "=", "nll_loss", ".", "sum", "(", "-", "1", ")", "\n", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "x", ",", "target", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.mixup.mixup": [[6, 16], ["torch.no_grad", "torch.no_grad", "data.size", "numpy.random.beta", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm", "torch.randperm"], "function", ["None"], ["def", "mixup", "(", "alpha", ",", "num_classes", ",", "data", ",", "target", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "bs", "=", "data", ".", "size", "(", "0", ")", "\n", "c", "=", "np", ".", "random", ".", "beta", "(", "alpha", ",", "alpha", ")", "\n", "\n", "perm", "=", "torch", ".", "randperm", "(", "bs", ")", ".", "cuda", "(", ")", "\n", "\n", "md", "=", "c", "*", "data", "+", "(", "1", "-", "c", ")", "*", "data", "[", "perm", ",", ":", "]", "\n", "mt", "=", "c", "*", "target", "+", "(", "1", "-", "c", ")", "*", "target", "[", "perm", ",", ":", "]", "\n", "return", "md", ",", "mt", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.Preconditioner.__init__": [[33, 40], ["preconditioner.Preconditioner.flatten", "preconditioner.Preconditioner.transform"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.Preconditioner.flatten", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.BlockwiseHouseholderPreconditioner.transform"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "num_bits", ",", "left", "=", "True", ")", ":", "\n", "        ", "self", ".", "left", "=", "left", "\n", "self", ".", "x_shape", "=", "x", ".", "shape", "\n", "self", ".", "num_bins", "=", "2", "**", "num_bits", "-", "1", "\n", "\n", "self", ".", "x", "=", "self", ".", "flatten", "(", "x", ")", "\n", "self", ".", "Tx", "=", "self", ".", "transform", "(", "self", ".", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.Preconditioner.flatten": [[41, 44], ["x.view"], "methods", ["None"], ["", "def", "flatten", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "x_shape2", "=", "x", ".", "shape", "\n", "return", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.Preconditioner.deflatten": [[45, 48], ["Tx.view"], "methods", ["None"], ["", "def", "deflatten", "(", "self", ",", "Tx", ")", ":", "\n", "        ", "x", "=", "Tx", ".", "view", "(", "*", "self", ".", "x_shape2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.Preconditioner.forward": [[49, 51], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "Tx", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.Preconditioner.inverse": [[52, 55], ["preconditioner.Preconditioner.inverse_transform", "preconditioner.Preconditioner.deflatten"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.BlockwiseHouseholderPreconditioner.inverse_transform", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.Preconditioner.deflatten"], ["", "def", "inverse", "(", "self", ",", "Tx", ")", ":", "\n", "        ", "x", "=", "self", ".", "inverse_transform", "(", "Tx", ")", "\n", "return", "self", ".", "deflatten", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.ScalarPreconditioner.__init__": [[60, 62], ["preconditioner.Preconditioner.__init__"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "num_bits", ",", "left", "=", "True", ")", ":", "\n", "        ", "super", "(", "ScalarPreconditioner", ",", "self", ")", ".", "__init__", "(", "x", ",", "num_bits", ",", "left", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.ScalarPreconditioner.transform": [[63, 77], ["torch.floor", "torch.no_grad", "min", "max", "x.min", "x.max"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mn", "=", "min", "(", "x", ".", "min", "(", ")", "-", "1e-8", ",", "0", ")", "\n", "mx", "=", "max", "(", "x", ".", "max", "(", ")", "+", "1e-8", ",", "0", ")", "\n", "\n", "", "self", ".", "zero_point", "=", "mn", "\n", "self", ".", "scale", "=", "self", ".", "num_bins", "/", "(", "mx", "-", "mn", ")", "\n", "\n", "qzero", "=", "-", "self", ".", "zero_point", "*", "self", ".", "scale", "\n", "iqzero", "=", "torch", ".", "floor", "(", "qzero", ")", "\n", "mx", "=", "(", "iqzero", "-", "self", ".", "num_bins", ")", "*", "mn", "/", "iqzero", "\n", "self", ".", "scale", "=", "self", ".", "num_bins", "/", "(", "mx", "-", "mn", ")", "\n", "\n", "return", "(", "x", "-", "self", ".", "zero_point", ")", "*", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.ScalarPreconditioner.inverse_transform": [[78, 80], ["None"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "/", "self", ".", "scale", "+", "self", ".", "zero_point", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.ScalarPreconditionerAct.__init__": [[85, 87], ["preconditioner.Preconditioner.__init__"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "num_bits", ",", "left", "=", "True", ")", ":", "\n", "        ", "super", "(", "ScalarPreconditionerAct", ",", "self", ")", ".", "__init__", "(", "x", ",", "num_bits", ",", "left", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.ScalarPreconditionerAct.transform": [[88, 97], ["torch.no_grad", "x.min", "x.max"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mn", "=", "x", ".", "min", "(", ")", "-", "1e-8", "\n", "mx", "=", "x", ".", "max", "(", ")", "+", "1e-8", "\n", "\n", "", "self", ".", "zero_point", "=", "mn", "\n", "self", ".", "scale", "=", "self", ".", "num_bins", "/", "(", "mx", "-", "mn", ")", "\n", "\n", "return", "(", "x", "-", "self", ".", "zero_point", ")", "*", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.ScalarPreconditionerAct.inverse_transform": [[98, 100], ["None"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "/", "self", ".", "scale", "+", "self", ".", "zero_point", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.ForwardPreconditioner.__init__": [[105, 107], ["preconditioner.Preconditioner.__init__"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "num_bits", ",", "left", "=", "True", ")", ":", "\n", "        ", "super", "(", "ForwardPreconditioner", ",", "self", ")", ".", "__init__", "(", "x", ",", "num_bits", ",", "left", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.ForwardPreconditioner.transform": [[108, 117], ["torch.no_grad", "pytorch_minimax.min().mean", "pytorch_minimax.max().mean", "pytorch_minimax.min", "pytorch_minimax.max"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mn", "=", "pytorch_minimax", ".", "min", "(", "x", ")", ".", "mean", "(", ")", "-", "1e-8", "\n", "mx", "=", "pytorch_minimax", ".", "max", "(", "x", ")", ".", "mean", "(", ")", "+", "1e-8", "\n", "\n", "", "self", ".", "zero_point", "=", "mn", "\n", "self", ".", "scale", "=", "self", ".", "num_bins", "/", "(", "mx", "-", "mn", ")", "\n", "\n", "return", "(", "x", "-", "self", ".", "zero_point", ")", "*", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.ForwardPreconditioner.inverse_transform": [[118, 120], ["None"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "/", "self", ".", "scale", "+", "self", ".", "zero_point", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.DiagonalPreconditioner.__init__": [[125, 127], ["preconditioner.Preconditioner.__init__"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "num_bits", ",", "left", "=", "True", ")", ":", "\n", "        ", "super", "(", "DiagonalPreconditioner", ",", "self", ")", ".", "__init__", "(", "x", ",", "num_bits", ",", "left", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.DiagonalPreconditioner.transform": [[128, 141], ["torch.no_grad", "pytorch_minimax.min().unsqueeze", "pytorch_minimax.max().unsqueeze", "x.min", "x.max", "pytorch_minimax.min", "pytorch_minimax.max"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "left", ":", "\n", "                ", "mn", "=", "pytorch_minimax", ".", "min", "(", "x", ")", ".", "unsqueeze", "(", "1", ")", "-", "1e-8", "\n", "mx", "=", "pytorch_minimax", ".", "max", "(", "x", ")", ".", "unsqueeze", "(", "1", ")", "+", "1e-8", "\n", "", "else", ":", "\n", "                ", "mn", "=", "x", ".", "min", "(", "0", ",", "keepdims", "=", "True", ")", "[", "0", "]", "-", "1e-8", "\n", "mx", "=", "x", ".", "max", "(", "0", ",", "keepdims", "=", "True", ")", "[", "0", "]", "+", "1e-8", "\n", "\n", "", "", "self", ".", "zero_point", "=", "mn", "\n", "self", ".", "scale", "=", "self", ".", "num_bins", "/", "(", "mx", "-", "mn", ")", "\n", "\n", "return", "(", "x", "-", "self", ".", "zero_point", ")", "*", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.DiagonalPreconditioner.inverse_transform": [[142, 144], ["None"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "/", "self", ".", "scale", "+", "self", ".", "zero_point", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.BlockwiseHouseholderPreconditioner.__init__": [[152, 154], ["preconditioner.Preconditioner.__init__"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "num_bits", ",", "left", "=", "True", ")", ":", "\n", "        ", "super", "(", "BlockwiseHouseholderPreconditioner", ",", "self", ")", ".", "__init__", "(", "x", ",", "num_bits", ",", "left", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.BlockwiseHouseholderPreconditioner.transform": [[155, 174], ["quantizers.get_transform", "preconditioner.BlockwiseHouseholderPreconditioner.T.cuda", "preconditioner.BlockwiseHouseholderPreconditioner.T_inv.cuda", "torch.no_grad", "mvec.cpu", "torch.no_grad", "pytorch_minimax.min().unsqueeze", "pytorch_minimax.max().unsqueeze", "pytorch_minimax.max", "pytorch_minimax.min", "pytorch_minimax.min", "pytorch_minimax.max"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.BlockwiseHouseholderPreconditioner.get_transform"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "# self.T = self.get_transform(x)", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mvec", "=", "pytorch_minimax", ".", "max", "(", "x", ")", "-", "pytorch_minimax", ".", "min", "(", "x", ")", "+", "1e-8", "\n", "", "self", ".", "T", ",", "self", ".", "T_inv", "=", "get_transform", "(", "mvec", ".", "cpu", "(", ")", ",", "Qqs", ",", "Qmax", ")", "\n", "self", ".", "T", "=", "self", ".", "T", ".", "cuda", "(", ")", "\n", "self", ".", "T_inv", "=", "self", ".", "T_inv", ".", "cuda", "(", ")", "\n", "# self.T = torch.eye(x.shape[0]).cuda()", "\n", "\n", "x", "=", "self", ".", "T", "@", "x", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mn", "=", "pytorch_minimax", ".", "min", "(", "x", ")", ".", "unsqueeze", "(", "1", ")", "-", "1e-8", "\n", "mx", "=", "pytorch_minimax", ".", "max", "(", "x", ")", ".", "unsqueeze", "(", "1", ")", "+", "1e-8", "\n", "\n", "", "self", ".", "zero_point", "=", "mn", "\n", "self", ".", "scale", "=", "self", ".", "num_bins", "/", "(", "mx", "-", "mn", ")", "\n", "\n", "# print('fin')", "\n", "return", "(", "x", "-", "self", ".", "zero_point", ")", "*", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.BlockwiseHouseholderPreconditioner.inverse_transform": [[175, 178], ["None"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "/", "self", ".", "scale", "+", "self", ".", "zero_point", "\n", "return", "self", ".", "T_inv", "@", "x", "\n", "# return self.T.inverse() @ x", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.BlockwiseHouseholderPreconditioner.get_transform": [[181, 249], ["x.view.view.view", "values.sum", "torch.round().int", "torch.zeros().cuda", "torch.zeros().cuda", "range", "time.time", "torch.zeros().cuda", "torch.arange().cuda", "print", "pytorch_minimax.max", "pytorch_minimax.min", "indices.append", "torch.tensor", "torch.tensor", "range", "len", "torch.diag", "time.time", "torch.round", "torch.zeros", "torch.zeros", "indices.append", "torch.zeros", "torch.arange", "torch.cumsum", "math.sqrt"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_transform", "(", "x", ")", ":", "\n", "        ", "global", "total_time", "\n", "\n", "N", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "\n", "mvec", "=", "pytorch_minimax", ".", "max", "(", "x", ")", "-", "pytorch_minimax", ".", "min", "(", "x", ")", "\n", "rank", "=", "(", "-", "mvec", ")", ".", "argsort", "(", ")", "\n", "values", "=", "mvec", "[", "rank", "]", "\n", "\n", "# Get block configurations", "\n", "num_zeros", "=", "0", "\n", "total_values", "=", "values", ".", "sum", "(", ")", "\n", "while", "True", ":", "\n", "            ", "num_zeros", "+=", "1", "\n", "total_values", "-=", "values", "[", "N", "-", "num_zeros", "]", "\n", "num", "=", "num_zeros", "*", "values", "[", "N", "-", "num_zeros", "-", "1", "]", "/", "total_values", "\n", "if", "num", ">=", "1", ":", "\n", "                ", "break", "\n", "\n", "", "", "num_nonzeros", "=", "N", "-", "num_zeros", "\n", "nums", "=", "(", "num_zeros", "*", "values", "/", "total_values", ")", "[", ":", "num_nonzeros", "]", "\n", "nums", "=", "torch", ".", "round", "(", "torch", ".", "cumsum", "(", "nums", ",", "0", ")", ")", ".", "int", "(", ")", "\n", "\n", "# Construct the matrix", "\n", "T", "=", "torch", ".", "zeros", "(", "N", ",", "N", ")", ".", "cuda", "(", ")", "\n", "all_s", "=", "torch", ".", "zeros", "(", "N", ")", ".", "cuda", "(", ")", "\n", "\n", "cnt", "=", "num_nonzeros", "\n", "indices", "=", "[", "]", "\n", "index_cnt", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "num_nonzeros", ")", ":", "\n", "# [i] + [cnt ~ num_nonzeros + nums[i]]", "\n", "            ", "indices", ".", "append", "(", "i", ")", "\n", "lambda_1", "=", "values", "[", "i", "]", "\n", "lambda_2", "=", "values", "[", "cnt", "]", "\n", "sz", "=", "num_nonzeros", "+", "nums", "[", "i", "]", "-", "cnt", "+", "1", "\n", "Q", ",", "Qmax", "=", "Qs", "[", "sz", "]", "\n", "w", "=", "torch", ".", "tensor", "(", "[", "lambda_1", "/", "math", ".", "sqrt", "(", "sz", ")", ",", "lambda_2", "*", "Qmax", "]", ")", "\n", "s", "=", "torch", ".", "tensor", "(", "[", "w", "[", "0", "]", "**", "(", "-", "1", "/", "3", ")", ",", "(", "w", "[", "1", "]", "/", "(", "sz", "-", "1", ")", ")", "**", "(", "-", "1", "/", "3", ")", "]", ")", "\n", "s", "*=", "(", "1", "/", "s", ")", ".", "norm", "(", ")", "\n", "all_s", "[", "index_cnt", "]", "=", "s", "[", "0", "]", "\n", "all_s", "[", "index_cnt", "+", "1", ":", "index_cnt", "+", "sz", "]", "=", "s", "[", "1", "]", "\n", "T", "[", "index_cnt", ":", "index_cnt", "+", "sz", ",", "index_cnt", ":", "index_cnt", "+", "sz", "]", "=", "Q", "\n", "index_cnt", "+=", "sz", "\n", "for", "j", "in", "range", "(", "cnt", ",", "num_nonzeros", "+", "nums", "[", "i", "]", ")", ":", "\n", "                ", "indices", ".", "append", "(", "j", ")", "\n", "", "cnt", "=", "num_nonzeros", "+", "nums", "[", "i", "]", "\n", "\n", "", "t", "=", "time", ".", "time", "(", ")", "\n", "# print(nums)", "\n", "# print(indices)", "\n", "# print(num_nonzeros)", "\n", "assert", "len", "(", "indices", ")", "==", "N", "\n", "\n", "T", "=", "T", "@", "torch", ".", "diag", "(", "all_s", ")", "\n", "indices", "=", "rank", "[", "indices", "]", "\n", "inv_indices", "=", "torch", ".", "zeros", "(", "N", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "cuda", "(", ")", "\n", "inv_indices", "[", "indices", "]", "=", "torch", ".", "arange", "(", "N", ")", ".", "cuda", "(", ")", "\n", "\n", "T", "=", "T", "[", "inv_indices", "]", "\n", "T", "=", "T", "[", ":", ",", "inv_indices", "]", "\n", "total_time", "+=", "time", ".", "time", "(", ")", "-", "t", "\n", "print", "(", "total_time", ")", "\n", "\n", "return", "T", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.householder": [[8, 13], ["v.norm", "torch.eye", "v.view", "v.view"], "function", ["None"], ["def", "householder", "(", "src", ",", "tar", ")", ":", "\n", "    ", "N", "=", "src", ".", "shape", "[", "0", "]", "\n", "v", "=", "tar", "-", "src", "\n", "v", "=", "v", "/", "v", ".", "norm", "(", ")", "\n", "return", "torch", ".", "eye", "(", "N", ")", "-", "2", "*", "v", ".", "view", "(", "N", ",", "1", ")", "@", "v", ".", "view", "(", "1", ",", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.init": [[20, 30], ["range", "torch.zeros", "preconditioner.householder", "householder.abs().max", "Qs.append", "Qqs.append", "Qmax.append", "torch.ones", "math.sqrt", "householder.abs"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.householder"], ["def", "init", "(", "max_bs", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "2", ",", "max_bs", "+", "1", ")", ":", "\n", "        ", "e1", "=", "torch", ".", "zeros", "(", "i", ")", "\n", "e1", "[", "0", "]", "=", "1", "\n", "ones", "=", "torch", ".", "ones", "(", "i", ")", "/", "math", ".", "sqrt", "(", "i", ")", "\n", "H", "=", "householder", "(", "e1", ",", "ones", ")", "\n", "Hmax", "=", "H", ".", "abs", "(", ")", ".", "max", "(", ")", "\n", "Qs", ".", "append", "(", "[", "H", ",", "Hmax", "]", ")", "\n", "Qqs", ".", "append", "(", "H", ")", "\n", "Qmax", ".", "append", "(", "Hmax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.ModelAndLoss.__init__": [[21, 44], ["torch.Module.__init__", "print", "resnet.build_resnet", "loss", "print", "network_to_half.load_state_dict", "network_to_half.cuda", "network_to_half", "criterion.cuda.cuda.cuda"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.build_resnet"], ["    ", "def", "__init__", "(", "self", ",", "arch", ",", "loss", ",", "pretrained_weights", "=", "None", ",", "cuda", "=", "True", ",", "fp16", "=", "False", ")", ":", "\n", "        ", "super", "(", "ModelAndLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "arch", "=", "arch", "\n", "\n", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "arch", ")", ")", "\n", "model", "=", "models", ".", "build_resnet", "(", "arch", "[", "0", "]", ",", "arch", "[", "1", "]", ")", "\n", "if", "pretrained_weights", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"=> using pre-trained model from a file '{}'\"", ".", "format", "(", "arch", ")", ")", "\n", "model", ".", "load_state_dict", "(", "pretrained_weights", ")", "\n", "\n", "", "if", "cuda", ":", "\n", "            ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "", "if", "fp16", ":", "\n", "            ", "model", "=", "network_to_half", "(", "model", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "criterion", "=", "loss", "(", ")", "\n", "\n", "if", "cuda", ":", "\n", "            ", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "self", ".", "loss", "=", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.ModelAndLoss.forward": [[45, 50], ["training.ModelAndLoss.model", "training.ModelAndLoss.loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "loss", "=", "self", ".", "loss", "(", "output", ",", "target", ")", "\n", "\n", "return", "loss", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.ModelAndLoss.distributed": [[51, 53], ["DDP"], "methods", ["None"], ["", "def", "distributed", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "DDP", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.ModelAndLoss.load_model_state": [[54, 57], ["training.ModelAndLoss.model.load_state_dict"], "methods", ["None"], ["", "def", "load_model_state", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "not", "state", "is", "None", ":", "\n", "            ", "self", ".", "model", ".", "load_state_dict", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.get_optimizer": [[59, 93], ["print", "torch.optim.SGD", "torch.optim.SGD", "print", "print", "print", "torch.optim.SGD", "torch.optim.SGD", "FP16_Optimizer", "FP16_Optimizer.load_state_dict", "len", "len"], "function", ["None"], ["", "", "", "def", "get_optimizer", "(", "parameters", ",", "fp16", ",", "lr", ",", "momentum", ",", "weight_decay", ",", "\n", "nesterov", "=", "False", ",", "\n", "state", "=", "None", ",", "\n", "static_loss_scale", "=", "1.", ",", "dynamic_loss_scale", "=", "False", ",", "\n", "bn_weight_decay", "=", "False", ")", ":", "\n", "\n", "    ", "if", "bn_weight_decay", ":", "\n", "        ", "print", "(", "\" ! Weight decay applied to BN parameters \"", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "v", "for", "n", ",", "v", "in", "parameters", "]", ",", "lr", ",", "\n", "momentum", "=", "momentum", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "nesterov", "=", "nesterov", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\" ! Weight decay NOT applied to BN parameters \"", ")", "\n", "bn_params", "=", "[", "v", "for", "n", ",", "v", "in", "parameters", "if", "'bn'", "in", "n", "]", "\n", "rest_params", "=", "[", "v", "for", "n", ",", "v", "in", "parameters", "if", "not", "'bn'", "in", "n", "]", "\n", "print", "(", "len", "(", "bn_params", ")", ")", "\n", "print", "(", "len", "(", "rest_params", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "[", "{", "'params'", ":", "bn_params", ",", "'weight_decay'", ":", "0", "}", ",", "\n", "{", "'params'", ":", "rest_params", ",", "'weight_decay'", ":", "weight_decay", "}", "]", ",", "\n", "lr", ",", "\n", "momentum", "=", "momentum", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "nesterov", "=", "nesterov", ")", "\n", "", "if", "fp16", ":", "\n", "        ", "optimizer", "=", "FP16_Optimizer", "(", "optimizer", ",", "\n", "static_loss_scale", "=", "static_loss_scale", ",", "\n", "dynamic_loss_scale", "=", "dynamic_loss_scale", ",", "\n", "verbose", "=", "False", ")", "\n", "\n", "", "if", "not", "state", "is", "None", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "state", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.lr_policy": [[95, 107], ["logger.register_metric", "lr_fn", "logger.IterationMeter", "logger.log_metric"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric"], ["", "def", "lr_policy", "(", "lr_fn", ",", "logger", "=", "None", ")", ":", "\n", "    ", "if", "logger", "is", "not", "None", ":", "\n", "        ", "logger", ".", "register_metric", "(", "'lr'", ",", "log", ".", "IterationMeter", "(", ")", ",", "log_level", "=", "1", ")", "\n", "", "def", "_alr", "(", "optimizer", ",", "iteration", ",", "epoch", ")", ":", "\n", "        ", "lr", "=", "lr_fn", "(", "iteration", ",", "epoch", ")", "\n", "\n", "if", "logger", "is", "not", "None", ":", "\n", "            ", "logger", ".", "log_metric", "(", "'lr'", ",", "lr", ")", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "", "return", "_alr", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.lr_step_policy": [[109, 121], ["training.lr_policy"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.lr_policy"], ["", "def", "lr_step_policy", "(", "base_lr", ",", "steps", ",", "decay_factor", ",", "warmup_length", ",", "logger", "=", "None", ")", ":", "\n", "    ", "def", "_lr_fn", "(", "iteration", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", "<", "warmup_length", ":", "\n", "            ", "lr", "=", "base_lr", "*", "(", "epoch", "+", "1", ")", "/", "warmup_length", "\n", "", "else", ":", "\n", "            ", "lr", "=", "base_lr", "\n", "for", "s", "in", "steps", ":", "\n", "                ", "if", "epoch", ">=", "s", ":", "\n", "                    ", "lr", "*=", "decay_factor", "\n", "", "", "", "return", "lr", "\n", "\n", "", "return", "lr_policy", "(", "_lr_fn", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.lr_linear_policy": [[123, 134], ["training.lr_policy"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.lr_policy"], ["", "def", "lr_linear_policy", "(", "base_lr", ",", "warmup_length", ",", "epochs", ",", "logger", "=", "None", ")", ":", "\n", "    ", "def", "_lr_fn", "(", "iteration", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", "<", "warmup_length", ":", "\n", "            ", "lr", "=", "base_lr", "*", "(", "epoch", "+", "1", ")", "/", "warmup_length", "\n", "", "else", ":", "\n", "            ", "e", "=", "epoch", "-", "warmup_length", "\n", "es", "=", "epochs", "-", "warmup_length", "\n", "lr", "=", "base_lr", "*", "(", "1", "-", "(", "e", "/", "es", ")", ")", "\n", "", "return", "lr", "\n", "\n", "", "return", "lr_policy", "(", "_lr_fn", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.lr_cosine_policy": [[136, 147], ["training.lr_policy", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.lr_policy"], ["", "def", "lr_cosine_policy", "(", "base_lr", ",", "warmup_length", ",", "epochs", ",", "logger", "=", "None", ")", ":", "\n", "    ", "def", "_lr_fn", "(", "iteration", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", "<", "warmup_length", ":", "\n", "            ", "lr", "=", "base_lr", "*", "(", "epoch", "+", "1", ")", "/", "warmup_length", "\n", "", "else", ":", "\n", "            ", "e", "=", "epoch", "-", "warmup_length", "\n", "es", "=", "epochs", "-", "warmup_length", "\n", "lr", "=", "0.5", "*", "(", "1", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "e", "/", "es", ")", ")", "*", "base_lr", "\n", "", "return", "lr", "\n", "\n", "", "return", "lr_policy", "(", "_lr_fn", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.lr_exponential_policy": [[149, 162], ["numpy.power", "training.lr_policy", "numpy.log2"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.lr_policy"], ["", "def", "lr_exponential_policy", "(", "base_lr", ",", "warmup_length", ",", "epochs", ",", "final_multiplier", "=", "0.001", ",", "logger", "=", "None", ")", ":", "\n", "    ", "es", "=", "epochs", "-", "warmup_length", "\n", "epoch_decay", "=", "np", ".", "power", "(", "2", ",", "np", ".", "log2", "(", "final_multiplier", ")", "/", "es", ")", "\n", "\n", "def", "_lr_fn", "(", "iteration", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", "<", "warmup_length", ":", "\n", "            ", "lr", "=", "base_lr", "*", "(", "epoch", "+", "1", ")", "/", "warmup_length", "\n", "", "else", ":", "\n", "            ", "e", "=", "epoch", "-", "warmup_length", "\n", "lr", "=", "base_lr", "*", "(", "epoch_decay", "**", "e", ")", "\n", "", "return", "lr", "\n", "\n", "", "return", "lr_policy", "(", "_lr_fn", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.get_train_step": [[165, 201], ["torch.autograd.Variable", "torch.autograd.Variable", "model_and_loss", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.reduce_tensor", "optimizer.backward", "optimizer.step", "optimizer.zero_grad", "loss.backward", "isinstance", "amp.scale_loss", "scaled_loss.backward"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.reduce_tensor", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.backward", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.backward"], ["", "def", "get_train_step", "(", "model_and_loss", ",", "optimizer", ",", "fp16", ",", "use_amp", "=", "False", ",", "batch_size_multiplier", "=", "1", ")", ":", "\n", "    ", "def", "_step", "(", "input", ",", "target", ",", "optimizer_step", "=", "True", ")", ":", "\n", "        ", "input_var", "=", "Variable", "(", "input", ")", "\n", "target_var", "=", "Variable", "(", "target", ")", "\n", "loss", ",", "output", "=", "model_and_loss", "(", "input_var", ",", "target_var", ")", "\n", "prec1", ",", "prec5", "=", "torch", ".", "zeros", "(", "1", ")", ",", "torch", ".", "zeros", "(", "1", ")", "#utils.accuracy(output.data, target, topk=(1, 5))", "\n", "\n", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "            ", "reduced_loss", "=", "utils", ".", "reduce_tensor", "(", "loss", ".", "data", ")", "\n", "#prec1 = reduce_tensor(prec1)", "\n", "#prec5 = reduce_tensor(prec5)", "\n", "", "else", ":", "\n", "            ", "reduced_loss", "=", "loss", ".", "data", "\n", "\n", "", "if", "fp16", ":", "\n", "            ", "optimizer", ".", "backward", "(", "loss", ")", "\n", "", "elif", "use_amp", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "\n", "", "if", "optimizer_step", ":", "\n", "            ", "opt", "=", "optimizer", ".", "optimizer", "if", "isinstance", "(", "optimizer", ",", "FP16_Optimizer", ")", "else", "optimizer", "\n", "for", "param_group", "in", "opt", ".", "param_groups", ":", "\n", "                ", "for", "param", "in", "param_group", "[", "'params'", "]", ":", "\n", "                    ", "param", ".", "grad", "/=", "batch_size_multiplier", "\n", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "return", "reduced_loss", ",", "prec1", ",", "prec5", "\n", "\n", "", "return", "_step", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.train": [[203, 249], ["training.get_train_step", "model_and_loss.train", "time.time", "optimizer.zero_grad", "enumerate", "logger.register_metric", "logger.register_metric", "logger.register_metric", "logger.register_metric", "logger.register_metric", "logger.register_metric", "logger.register_metric", "logger.iteration_generator_wrapper", "input.size", "lr_scheduler", "get_train_step.", "time.time", "logger.AverageMeter", "logger.AverageMeter", "logger.AverageMeter", "logger.AverageMeter", "logger.AverageMeter", "logger.AverageMeter", "logger.AverageMeter", "time.time", "time.time", "logger.log_metric", "logger.log_metric", "logger.log_metric", "logger.log_metric", "logger.log_metric", "logger.log_metric", "logger.log_metric", "to_python_float", "to_python_float", "to_python_float", "training.calc_ips", "training.calc_ips"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.get_train_step", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.train", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.iteration_generator_wrapper", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.calc_ips", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.calc_ips"], ["", "def", "train", "(", "train_loader", ",", "model_and_loss", ",", "optimizer", ",", "lr_scheduler", ",", "fp16", ",", "logger", ",", "epoch", ",", "use_amp", "=", "False", ",", "prof", "=", "-", "1", ",", "batch_size_multiplier", "=", "1", ",", "register_metrics", "=", "True", ")", ":", "\n", "\n", "    ", "if", "register_metrics", "and", "logger", "is", "not", "None", ":", "\n", "        ", "logger", ".", "register_metric", "(", "'train.top1'", ",", "log", ".", "AverageMeter", "(", ")", ",", "log_level", "=", "0", ")", "\n", "logger", ".", "register_metric", "(", "'train.top5'", ",", "log", ".", "AverageMeter", "(", ")", ",", "log_level", "=", "0", ")", "\n", "logger", ".", "register_metric", "(", "'train.loss'", ",", "log", ".", "AverageMeter", "(", ")", ",", "log_level", "=", "0", ")", "\n", "logger", ".", "register_metric", "(", "'train.compute_ips'", ",", "log", ".", "AverageMeter", "(", ")", ",", "log_level", "=", "1", ")", "\n", "logger", ".", "register_metric", "(", "'train.total_ips'", ",", "log", ".", "AverageMeter", "(", ")", ",", "log_level", "=", "0", ")", "\n", "logger", ".", "register_metric", "(", "'train.data_time'", ",", "log", ".", "AverageMeter", "(", ")", ",", "log_level", "=", "1", ")", "\n", "logger", ".", "register_metric", "(", "'train.compute_time'", ",", "log", ".", "AverageMeter", "(", ")", ",", "log_level", "=", "1", ")", "\n", "\n", "", "step", "=", "get_train_step", "(", "model_and_loss", ",", "optimizer", ",", "fp16", ",", "use_amp", "=", "use_amp", ",", "batch_size_multiplier", "=", "batch_size_multiplier", ")", "\n", "\n", "model_and_loss", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "data_iter", "=", "enumerate", "(", "train_loader", ")", "\n", "if", "logger", "is", "not", "None", ":", "\n", "        ", "data_iter", "=", "logger", ".", "iteration_generator_wrapper", "(", "data_iter", ")", "\n", "\n", "", "for", "i", ",", "(", "input", ",", "target", ")", "in", "data_iter", ":", "\n", "        ", "bs", "=", "input", ".", "size", "(", "0", ")", "\n", "lr_scheduler", "(", "optimizer", ",", "i", ",", "epoch", ")", "\n", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "\n", "if", "prof", ">", "0", ":", "\n", "            ", "if", "i", ">=", "prof", ":", "\n", "                ", "break", "\n", "\n", "", "", "optimizer_step", "=", "(", "(", "i", "+", "1", ")", "%", "batch_size_multiplier", ")", "==", "0", "\n", "loss", ",", "prec1", ",", "prec5", "=", "step", "(", "input", ",", "target", ",", "optimizer_step", "=", "optimizer_step", ")", "\n", "\n", "it_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "\n", "if", "logger", "is", "not", "None", ":", "\n", "            ", "logger", ".", "log_metric", "(", "'train.top1'", ",", "to_python_float", "(", "prec1", ")", ")", "\n", "logger", ".", "log_metric", "(", "'train.top5'", ",", "to_python_float", "(", "prec5", ")", ")", "\n", "logger", ".", "log_metric", "(", "'train.loss'", ",", "to_python_float", "(", "loss", ")", ")", "\n", "logger", ".", "log_metric", "(", "'train.compute_ips'", ",", "calc_ips", "(", "bs", ",", "it_time", "-", "data_time", ")", ")", "\n", "logger", ".", "log_metric", "(", "'train.total_ips'", ",", "calc_ips", "(", "bs", ",", "it_time", ")", ")", "\n", "logger", ".", "log_metric", "(", "'train.data_time'", ",", "data_time", ")", "\n", "logger", ".", "log_metric", "(", "'train.compute_time'", ",", "it_time", "-", "data_time", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.get_val_step": [[252, 274], ["torch.autograd.Variable", "torch.autograd.Variable", "utils.accuracy", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.no_grad", "torch.no_grad", "model_and_loss", "utils.reduce_tensor", "utils.reduce_tensor", "utils.reduce_tensor"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.accuracy", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.reduce_tensor", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.reduce_tensor", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.reduce_tensor"], ["", "", "def", "get_val_step", "(", "model_and_loss", ")", ":", "\n", "    ", "def", "_step", "(", "input", ",", "target", ")", ":", "\n", "        ", "input_var", "=", "Variable", "(", "input", ")", "\n", "target_var", "=", "Variable", "(", "target", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "loss", ",", "output", "=", "model_and_loss", "(", "input_var", ",", "target_var", ")", "\n", "\n", "", "prec1", ",", "prec5", "=", "utils", ".", "accuracy", "(", "output", ".", "data", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "            ", "reduced_loss", "=", "utils", ".", "reduce_tensor", "(", "loss", ".", "data", ")", "\n", "prec1", "=", "utils", ".", "reduce_tensor", "(", "prec1", ")", "\n", "prec5", "=", "utils", ".", "reduce_tensor", "(", "prec5", ")", "\n", "", "else", ":", "\n", "            ", "reduced_loss", "=", "loss", ".", "data", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "return", "reduced_loss", ",", "prec1", ",", "prec5", "\n", "\n", "", "return", "_step", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.validate": [[276, 322], ["training.get_val_step", "logger.AverageMeter", "model_and_loss.eval", "time.time", "enumerate", "log.AverageMeter.get_val", "logger.register_metric", "logger.register_metric", "logger.register_metric", "logger.register_metric", "logger.register_metric", "logger.register_metric", "logger.register_metric", "logger.iteration_generator_wrapper", "input.size", "get_val_step.", "log.AverageMeter.record", "time.time", "logger.AverageMeter", "logger.AverageMeter", "logger.AverageMeter", "logger.AverageMeter", "logger.AverageMeter", "logger.AverageMeter", "logger.AverageMeter", "time.time", "time.time", "to_python_float", "logger.log_metric", "logger.log_metric", "logger.log_metric", "logger.log_metric", "logger.log_metric", "logger.log_metric", "logger.log_metric", "to_python_float", "to_python_float", "to_python_float", "training.calc_ips", "training.calc_ips"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.get_val_step", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.get_val", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.register_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.iteration_generator_wrapper", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.RunningMeter.record", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.log_metric", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.calc_ips", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.calc_ips"], ["", "def", "validate", "(", "val_loader", ",", "model_and_loss", ",", "fp16", ",", "logger", ",", "epoch", ",", "prof", "=", "-", "1", ",", "register_metrics", "=", "True", ")", ":", "\n", "    ", "if", "register_metrics", "and", "logger", "is", "not", "None", ":", "\n", "        ", "logger", ".", "register_metric", "(", "'val.top1'", ",", "log", ".", "AverageMeter", "(", ")", ",", "log_level", "=", "0", ")", "\n", "logger", ".", "register_metric", "(", "'val.top5'", ",", "log", ".", "AverageMeter", "(", ")", ",", "log_level", "=", "0", ")", "\n", "logger", ".", "register_metric", "(", "'val.loss'", ",", "log", ".", "AverageMeter", "(", ")", ",", "log_level", "=", "0", ")", "\n", "logger", ".", "register_metric", "(", "'val.compute_ips'", ",", "log", ".", "AverageMeter", "(", ")", ",", "log_level", "=", "1", ")", "\n", "logger", ".", "register_metric", "(", "'val.total_ips'", ",", "log", ".", "AverageMeter", "(", ")", ",", "log_level", "=", "1", ")", "\n", "logger", ".", "register_metric", "(", "'val.data_time'", ",", "log", ".", "AverageMeter", "(", ")", ",", "log_level", "=", "1", ")", "\n", "logger", ".", "register_metric", "(", "'val.compute_time'", ",", "log", ".", "AverageMeter", "(", ")", ",", "log_level", "=", "1", ")", "\n", "\n", "", "step", "=", "get_val_step", "(", "model_and_loss", ")", "\n", "\n", "top1", "=", "log", ".", "AverageMeter", "(", ")", "\n", "# switch to evaluate mode", "\n", "model_and_loss", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "data_iter", "=", "enumerate", "(", "val_loader", ")", "\n", "if", "not", "logger", "is", "None", ":", "\n", "        ", "data_iter", "=", "logger", ".", "iteration_generator_wrapper", "(", "data_iter", ",", "val", "=", "True", ")", "\n", "\n", "", "for", "i", ",", "(", "input", ",", "target", ")", "in", "data_iter", ":", "\n", "        ", "bs", "=", "input", ".", "size", "(", "0", ")", "\n", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "if", "prof", ">", "0", ":", "\n", "            ", "if", "i", ">", "prof", ":", "\n", "                ", "break", "\n", "\n", "", "", "loss", ",", "prec1", ",", "prec5", "=", "step", "(", "input", ",", "target", ")", "\n", "\n", "it_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "\n", "top1", ".", "record", "(", "to_python_float", "(", "prec1", ")", ",", "bs", ")", "\n", "if", "logger", "is", "not", "None", ":", "\n", "            ", "logger", ".", "log_metric", "(", "'val.top1'", ",", "to_python_float", "(", "prec1", ")", ")", "\n", "logger", ".", "log_metric", "(", "'val.top5'", ",", "to_python_float", "(", "prec5", ")", ")", "\n", "logger", ".", "log_metric", "(", "'val.loss'", ",", "to_python_float", "(", "loss", ")", ")", "\n", "logger", ".", "log_metric", "(", "'val.compute_ips'", ",", "calc_ips", "(", "bs", ",", "it_time", "-", "data_time", ")", ")", "\n", "logger", ".", "log_metric", "(", "'val.total_ips'", ",", "calc_ips", "(", "bs", ",", "it_time", ")", ")", "\n", "logger", ".", "log_metric", "(", "'val.data_time'", ",", "data_time", ")", "\n", "logger", ".", "log_metric", "(", "'val.compute_time'", ",", "it_time", "-", "data_time", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "return", "top1", ".", "get_val", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.calc_ips": [[324, 328], ["torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["", "def", "calc_ips", "(", "batch_size", ",", "time", ")", ":", "\n", "    ", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "else", "1", "\n", "tbs", "=", "world_size", "*", "batch_size", "\n", "return", "tbs", "/", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.train_loop": [[329, 370], ["range", "logger.epoch_generator_wrapper", "print", "debug.plot_bin_hist", "training.train", "training.validate", "logger.end", "max", "should_backup_checkpoint", "utils.save_checkpoint", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.get_rank", "torch.distributed.get_rank", "model_and_loss.model.state_dict", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.Logger.epoch_generator_wrapper", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.debug.plot_bin_hist", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.train", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.training.validate", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.logger.StdOutBackend.end", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.should_backup_checkpoint", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.save_checkpoint"], ["", "def", "train_loop", "(", "model_and_loss", ",", "optimizer", ",", "lr_scheduler", ",", "train_loader", ",", "val_loader", ",", "debug_loader", ",", "epochs", ",", "fp16", ",", "logger", ",", "\n", "should_backup_checkpoint", ",", "use_amp", "=", "False", ",", "\n", "batch_size_multiplier", "=", "1", ",", "\n", "best_prec1", "=", "0", ",", "start_epoch", "=", "0", ",", "prof", "=", "-", "1", ",", "skip_training", "=", "False", ",", "skip_validation", "=", "False", ",", "save_checkpoints", "=", "True", ",", "checkpoint_dir", "=", "'./'", ")", ":", "\n", "    ", "prec1", "=", "-", "1", "\n", "\n", "epoch_iter", "=", "range", "(", "start_epoch", ",", "epochs", ")", "\n", "if", "logger", "is", "not", "None", ":", "\n", "        ", "epoch_iter", "=", "logger", ".", "epoch_generator_wrapper", "(", "epoch_iter", ")", "\n", "", "for", "epoch", "in", "epoch_iter", ":", "\n", "        ", "print", "(", "'Epoch '", ",", "epoch", ")", "\n", "if", "not", "skip_training", ":", "\n", "            ", "train", "(", "train_loader", ",", "model_and_loss", ",", "optimizer", ",", "lr_scheduler", ",", "fp16", ",", "logger", ",", "epoch", ",", "use_amp", "=", "use_amp", ",", "prof", "=", "prof", ",", "register_metrics", "=", "epoch", "==", "start_epoch", ",", "batch_size_multiplier", "=", "batch_size_multiplier", ")", "\n", "\n", "", "if", "not", "skip_validation", ":", "\n", "            ", "prec1", "=", "validate", "(", "val_loader", ",", "model_and_loss", ",", "fp16", ",", "logger", ",", "epoch", ",", "prof", "=", "prof", ",", "register_metrics", "=", "epoch", "==", "start_epoch", ")", "\n", "\n", "", "if", "save_checkpoints", "and", "(", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ")", ":", "\n", "            ", "if", "not", "skip_training", ":", "\n", "                ", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "\n", "if", "should_backup_checkpoint", "(", "epoch", ")", ":", "\n", "                    ", "backup_filename", "=", "'checkpoint-{}.pth.tar'", ".", "format", "(", "epoch", "+", "1", ")", "\n", "", "else", ":", "\n", "                    ", "backup_filename", "=", "None", "\n", "", "utils", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "model_and_loss", ".", "arch", ",", "\n", "'state_dict'", ":", "model_and_loss", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "checkpoint_dir", "=", "checkpoint_dir", ",", "backup_filename", "=", "backup_filename", ")", "\n", "\n", "", "", "if", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "logger", ".", "end", "(", ")", "\n", "\n", "", "", "if", "skip_training", ":", "\n", "# fast_dump_2(model_and_loss, optimizer, train_loader, checkpoint_dir)", "\n", "# dump(model_and_loss, optimizer, train_loader, checkpoint_dir)", "\n", "        ", "plot_bin_hist", "(", "model_and_loss", ",", "optimizer", ",", "val_loader", ")", "\n", "# write_errors(model_and_loss, optimizer, debug_loader)", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.should_backup_checkpoint": [[8, 12], ["None"], "function", ["None"], ["def", "should_backup_checkpoint", "(", "args", ")", ":", "\n", "    ", "def", "_sbc", "(", "epoch", ")", ":", "\n", "        ", "return", "args", ".", "gather_checkpoints", "# and (epoch < 10 or epoch % 10 == 0)", "\n", "", "return", "_sbc", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.save_checkpoint": [[14, 23], ["os.path.join", "print", "torch.save", "torch.save", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.get_rank", "torch.distributed.get_rank", "shutil.copyfile", "shutil.copyfile", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ",", "checkpoint_dir", "=", "'./'", ",", "backup_filename", "=", "None", ")", ":", "\n", "    ", "if", "(", "not", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ")", "or", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "filename", ")", "\n", "print", "(", "\"SAVING {}\"", ".", "format", "(", "filename", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'model_best.pth.tar'", ")", ")", "\n", "", "if", "backup_filename", "is", "not", "None", ":", "\n", "            ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "backup_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.timed_generator": [[25, 32], ["time.time", "time.time", "time.time"], "function", ["None"], ["", "", "", "def", "timed_generator", "(", "gen", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "g", "in", "gen", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "t", "=", "end", "-", "start", "\n", "yield", "g", ",", "t", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.timed_function": [[34, 40], ["time.time", "f", "time.time"], "function", ["None"], ["", "", "def", "timed_function", "(", "f", ")", ":", "\n", "    ", "def", "_timed_function", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "ret", "=", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "ret", ",", "time", ".", "time", "(", ")", "-", "start", "\n", "", "return", "_timed_function", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.accuracy": [[42, 56], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.reduce_tensor": [[58, 63], ["tensor.clone", "torch.all_reduce", "torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["", "def", "reduce_tensor", "(", "tensor", ")", ":", "\n", "    ", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "rt", "/=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "else", "1", "\n", "return", "rt", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_add": [[65, 69], ["None"], "function", ["None"], ["", "def", "dict_add", "(", "x", ",", "y", ")", ":", "\n", "    ", "if", "x", "is", "None", ":", "\n", "        ", "return", "y", "\n", "", "return", "{", "k", ":", "x", "[", "k", "]", "+", "y", "[", "k", "]", "for", "k", "in", "x", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_minus": [[71, 73], ["None"], "function", ["None"], ["", "def", "dict_minus", "(", "x", ",", "y", ")", ":", "\n", "    ", "return", "{", "k", ":", "x", "[", "k", "]", "-", "y", "[", "k", "]", "for", "k", "in", "x", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_sqr": [[75, 77], ["None"], "function", ["None"], ["", "def", "dict_sqr", "(", "x", ")", ":", "\n", "    ", "return", "{", "k", ":", "x", "[", "k", "]", "**", "2", "for", "k", "in", "x", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_sqrt": [[79, 81], ["torch.sqrt", "torch.sqrt"], "function", ["None"], ["", "def", "dict_sqrt", "(", "x", ")", ":", "\n", "    ", "return", "{", "k", ":", "torch", ".", "sqrt", "(", "x", "[", "k", "]", ")", "for", "k", "in", "x", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_mul": [[83, 85], ["None"], "function", ["None"], ["", "def", "dict_mul", "(", "x", ",", "a", ")", ":", "\n", "    ", "return", "{", "k", ":", "x", "[", "k", "]", "*", "a", "for", "k", "in", "x", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.utils.dict_clone": [[87, 89], ["x[].clone"], "function", ["None"], ["", "def", "dict_clone", "(", "x", ")", ":", "\n", "    ", "return", "{", "k", ":", "x", "[", "k", "]", ".", "clone", "(", ")", "for", "k", "in", "x", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActBlock.__init__": [[16, 26], ["torch.Module.__init__", "builder.batchnorm", "torch.ReLU", "torch.ReLU", "builder.conv3x3", "builder.batchnorm", "builder.conv3x3"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.batchnorm", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv3x3", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.batchnorm", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv3x3"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "debug", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActBlock.forward": [[27, 62], ["preact_resnet.PreActBlock.bn1", "preact_resnet.PreActBlock.relu", "preact_resnet.PreActBlock.conv1", "preact_resnet.PreActBlock.bn2", "preact_resnet.PreActBlock.relu", "preact_resnet.PreActBlock.conv2", "preact_resnet.PreActBlock.downsample", "preact_resnet.PreActBlock.retain_grad", "preact_resnet.PreActBlock.retain_grad", "preact_resnet.PreActBlock.retain_grad", "preact_resnet.PreActBlock.retain_grad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "out", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv1_in", "=", "out", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "out", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv1_out", "=", "out", "\n", "\n", "", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "out", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv2_in", "=", "out", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "out", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv2_out", "=", "out", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActBottleneck.__init__": [[68, 80], ["torch.Module.__init__", "builder.batchnorm", "torch.ReLU", "torch.ReLU", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.batchnorm", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv1x1", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.batchnorm", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv3x3", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.batchnorm", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv1x1"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "planes", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "planes", ",", "planes", "*", "4", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "debug", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActBottleneck.forward": [[81, 129], ["preact_resnet.PreActBottleneck.bn1", "preact_resnet.PreActBottleneck.relu", "preact_resnet.PreActBottleneck.conv1", "preact_resnet.PreActBottleneck.bn2", "preact_resnet.PreActBottleneck.relu", "preact_resnet.PreActBottleneck.conv2", "preact_resnet.PreActBottleneck.bn3", "preact_resnet.PreActBottleneck.relu", "preact_resnet.PreActBottleneck.conv3", "preact_resnet.PreActBottleneck.downsample", "preact_resnet.PreActBottleneck.retain_grad", "preact_resnet.PreActBottleneck.retain_grad", "preact_resnet.PreActBottleneck.retain_grad", "preact_resnet.PreActBottleneck.retain_grad", "preact_resnet.PreActBottleneck.retain_grad", "preact_resnet.PreActBottleneck.retain_grad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "debug", ":", "\n", "            ", "out", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv1_in", "=", "out", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "out", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv1_out", "=", "out", "\n", "\n", "", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "out", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv2_in", "=", "out", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "out", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv2_out", "=", "out", "\n", "\n", "", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "out", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv3_in", "=", "out", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "out", ".", "retain_grad", "(", ")", "\n", "self", ".", "conv3_out", "=", "out", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet.__init__": [[132, 144], ["torch.Module.__init__", "builder.conv3x3", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "builder.batchnorm", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "builder.linear"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv3x3", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.batchnorm", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.linear"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "builder", "=", "builder", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn", "=", "builder", ".", "batchnorm", "(", "64", "*", "block", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "builder", ".", "linear", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet._make_layer": [[145, 158], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "preact_resnet.PreActResNet.builder.conv1x1", "block"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.conv1x1"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "builder", ".", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", "=", "stride", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet.forward": [[159, 173], ["preact_resnet.PreActResNet.conv1", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "preact_resnet.PreActResNet.bn", "preact_resnet.PreActResNet.relu", "preact_resnet.PreActResNet.avgpool", "preact_resnet.PreActResNet.view", "preact_resnet.PreActResNet.fc", "preact_resnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet.set_debug": [[174, 178], ["None"], "methods", ["None"], ["", "def", "set_debug", "(", "self", ",", "debug", ")", ":", "\n", "        ", "for", "l", "in", "[", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", "]", ":", "\n", "            ", "for", "b", "in", "l", ":", "\n", "                ", "b", ".", "debug", "=", "debug", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preact_resnet.PreActResNet.set_name": [[180, 194], ["enumerate", "preact_resnet.PreActResNet.linear_layers.append", "enumerate", "enumerate", "preact_resnet.PreActResNet.linear_layers.append", "preact_resnet.PreActResNet.linear_layers.append"], "methods", ["None"], ["", "", "", "def", "set_name", "(", "self", ")", ":", "\n", "        ", "self", ".", "linear_layers", "=", "[", "self", ".", "conv1", "]", "\n", "self", ".", "conv1", ".", "layer_name", "=", "'conv_0'", "\n", "for", "lid", ",", "layer", "in", "enumerate", "(", "[", "self", ".", "layer1", ",", "self", ".", "layer2", ",", "self", ".", "layer3", "]", ")", ":", "\n", "            ", "for", "bid", ",", "block", "in", "enumerate", "(", "layer", ")", ":", "\n", "                ", "for", "cid", ",", "convlayer", "in", "enumerate", "(", "[", "block", ".", "conv1", ",", "block", ".", "conv2", "]", ")", ":", "\n", "                    ", "convlayer", ".", "layer_name", "=", "'conv_{}_{}_{}'", ".", "format", "(", "lid", "+", "1", ",", "bid", "+", "1", ",", "cid", "+", "1", ")", "\n", "self", ".", "linear_layers", ".", "append", "(", "convlayer", ")", "\n", "", "if", "block", ".", "downsample", "is", "not", "None", ":", "\n", "                    ", "block", ".", "downsample", "[", "0", "]", ".", "layer_name", "=", "'conv_{}_{}_skip'", ".", "format", "(", "lid", "+", "1", ",", "bid", "+", "1", ")", "\n", "self", ".", "linear_layers", ".", "append", "(", "block", ".", "downsample", "[", "0", "]", ")", "\n", "\n", "", "", "", "self", ".", "fc", ".", "layer_name", "=", "'fc'", "\n", "self", ".", "linear_layers", ".", "append", "(", "self", ".", "fc", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.__init__": [[10, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "quantize_activation", "=", "True", "\n", "self", ".", "quantize_weights", "=", "True", "\n", "self", ".", "quantize_gradient", "=", "True", "\n", "self", ".", "activation_num_bits", "=", "8", "\n", "self", ".", "weight_num_bits", "=", "8", "\n", "self", ".", "bias_num_bits", "=", "16", "\n", "self", ".", "backward_num_bits", "=", "8", "\n", "self", ".", "bweight_num_bits", "=", "8", "\n", "self", ".", "backward_persample", "=", "False", "\n", "self", ".", "biased", "=", "False", "\n", "self", ".", "grads", "=", "None", "\n", "self", ".", "acts", "=", "None", "\n", "self", ".", "hadamard", "=", "False", "\n", "self", ".", "biprecision", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.activation_preconditioner": [[26, 29], ["image_classification.preconditioner.ScalarPreconditionerAct"], "methods", ["None"], ["", "def", "activation_preconditioner", "(", "self", ")", ":", "\n", "# return lambda x: ForwardPreconditioner(x, self.activation_num_bits)", "\n", "        ", "return", "lambda", "x", ":", "ScalarPreconditionerAct", "(", "x", ",", "self", ".", "activation_num_bits", ")", "\n", "# return lambda x: ScalarPreconditioner(x, 16)", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.weight_preconditioner": [[31, 33], ["image_classification.preconditioner.ScalarPreconditioner"], "methods", ["None"], ["", "def", "weight_preconditioner", "(", "self", ")", ":", "\n", "        ", "return", "lambda", "x", ":", "ScalarPreconditioner", "(", "x", ",", "self", ".", "weight_num_bits", ")", "\n", "# return lambda x: ForwardPreconditioner(x, self.weight_num_bits)", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.bias_preconditioner": [[36, 38], ["image_classification.preconditioner.ScalarPreconditioner"], "methods", ["None"], ["", "def", "bias_preconditioner", "(", "self", ")", ":", "\n", "        ", "return", "lambda", "x", ":", "ScalarPreconditioner", "(", "x", ",", "self", ".", "bias_num_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.activation_gradient_preconditioner": [[39, 46], ["image_classification.preconditioner.BlockwiseHouseholderPreconditioner", "image_classification.preconditioner.DiagonalPreconditioner", "image_classification.preconditioner.ScalarPreconditioner"], "methods", ["None"], ["", "def", "activation_gradient_preconditioner", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "hadamard", ":", "\n", "            ", "return", "lambda", "x", ":", "BlockwiseHouseholderPreconditioner", "(", "x", ",", "self", ".", "backward_num_bits", ")", "\n", "", "if", "self", ".", "backward_persample", ":", "\n", "            ", "return", "lambda", "x", ":", "DiagonalPreconditioner", "(", "x", ",", "self", ".", "backward_num_bits", ")", "\n", "", "else", ":", "\n", "            ", "return", "lambda", "x", ":", "ScalarPreconditioner", "(", "x", ",", "self", ".", "backward_num_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.weight_gradient_preconditioner": [[47, 52], ["image_classification.preconditioner.DiagonalPreconditioner", "image_classification.preconditioner.ScalarPreconditioner"], "methods", ["None"], ["", "", "def", "weight_gradient_preconditioner", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "backward_persample", ":", "\n", "            ", "return", "lambda", "x", ":", "DiagonalPreconditioner", "(", "x", ",", "self", ".", "bweight_num_bits", ",", "left", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "return", "lambda", "x", ":", "ScalarPreconditioner", "(", "x", ",", "self", ".", "bweight_num_bits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantize.forward": [[64, 93], ["ctx.mark_dirty", "input.clone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Preconditioner", "Preconditioner.forward", "Preconditioner.inverse.clamp_().round_", "Preconditioner.inverse", "Preconditioner.inverse.new().uniform_", "Preconditioner.inverse.add_", "Preconditioner.inverse.clamp_", "Preconditioner.inverse.new"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.forward", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.preconditioner.Preconditioner.inverse"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "Preconditioner", ",", "stochastic", "=", "False", ",", "inplace", "=", "False", ")", ":", "\n", "\n", "        ", "ctx", ".", "inplace", "=", "inplace", "\n", "\n", "if", "ctx", ".", "inplace", ":", "\n", "            ", "ctx", ".", "mark_dirty", "(", "input", ")", "\n", "output", "=", "input", "\n", "", "else", ":", "\n", "            ", "output", "=", "input", ".", "clone", "(", ")", "\n", "\n", "# if not torch.distributed.is_initialized() or torch.distributed.get_rank() == 0:", "\n", "#     print('---')", "\n", "#     print(input.view(-1)[:10], input.min(), input.max())", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "preconditioner", "=", "Preconditioner", "(", "output", ")", "\n", "output", "=", "preconditioner", ".", "forward", "(", ")", "\n", "\n", "if", "stochastic", ":", "\n", "                ", "noise", "=", "output", ".", "new", "(", "output", ".", "shape", ")", ".", "uniform_", "(", "-", "0.5", ",", "0.5", ")", "\n", "output", ".", "add_", "(", "noise", ")", "\n", "# quantize", "\n", "", "output", ".", "clamp_", "(", "0.0", ",", "preconditioner", ".", "num_bins", ")", ".", "round_", "(", ")", "\n", "\n", "output", "=", "preconditioner", ".", "inverse", "(", "output", ")", "\n", "\n", "# if not torch.distributed.is_initialized() or torch.distributed.get_rank() == 0:", "\n", "#     print(output.view(-1)[:10])", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantize.backward": [[94, 99], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# straight-through estimator", "\n", "        ", "grad_input", "=", "grad_output", "\n", "return", "grad_input", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.forward": [[102, 108], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "Preconditioner", ",", "stochastic", "=", "True", ")", ":", "\n", "        ", "ctx", ".", "stochastic", "=", "stochastic", "\n", "ctx", ".", "inplace", "=", "False", "\n", "ctx", ".", "Preconditioner", "=", "Preconditioner", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.UniformQuantizeGrad.backward": [[109, 118], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "quantize.quantize", "config.grads.append", "grad_output.detach"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.quantize"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "config", ".", "grads", "is", "not", "None", ":", "\n", "                ", "config", ".", "grads", ".", "append", "(", "grad_output", ".", "detach", "(", ")", ")", "\n", "\n", "", "grad_input", "=", "quantize", "(", "grad_output", ",", "ctx", ".", "Preconditioner", ",", "stochastic", "=", "ctx", ".", "stochastic", ",", "inplace", "=", "False", ")", "\n", "\n", "", "return", "grad_input", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantMeasure.__init__": [[159, 163], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__"], ["def", "__init__", "(", "self", ",", "inplace", "=", "False", ",", "stochastic", "=", "False", ")", ":", "\n", "        ", "super", "(", "QuantMeasure", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stochastic", "=", "stochastic", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantMeasure.forward": [[164, 168], ["quantize.quantize", "config.activation_preconditioner"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.quantize", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.activation_preconditioner"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "q_input", "=", "quantize", "(", "input", ",", "config", ".", "activation_preconditioner", "(", ")", ",", "\n", "stochastic", "=", "self", ".", "stochastic", ",", "inplace", "=", "self", ".", "inplace", ")", "\n", "return", "q_input", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QConv2d.__init__": [[173, 178], ["torch.Conv2d.__init__", "quantize.QuantMeasure"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "QConv2d", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QConv2d.forward": [[179, 212], ["hasattr", "config.acts.append", "quantize.QConv2d.quantize_input", "quantize.quantize", "torch.conv2d", "torch.conv2d", "torch.conv2d", "quantize.conv2d_biprec", "input.detach().cpu().numpy", "config.weight_preconditioner", "quantize.quantize", "config.bias_preconditioner", "input.detach().cpu", "input.detach"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.quantize", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.conv2d_biprec", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.weight_preconditioner", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.quantize", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.bias_preconditioner"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "config", ".", "acts", "is", "not", "None", ":", "\n", "            ", "config", ".", "acts", ".", "append", "(", "input", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "if", "config", ".", "quantize_activation", ":", "\n", "            ", "qinput", "=", "self", ".", "quantize_input", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "qinput", "=", "input", "\n", "\n", "", "if", "config", ".", "quantize_weights", ":", "# TODO weight quantization scheme...", "\n", "            ", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "config", ".", "weight_preconditioner", "(", ")", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                ", "qbias", "=", "quantize", "(", "self", ".", "bias", ",", "config", ".", "bias_preconditioner", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "qbias", "=", "None", "\n", "", "qbias", "=", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "qweight", "=", "self", ".", "weight", "\n", "qbias", "=", "self", ".", "bias", "\n", "\n", "", "self", ".", "qweight", "=", "qweight", "\n", "\n", "self", ".", "iact", "=", "qinput", "\n", "\n", "if", "hasattr", "(", "self", ",", "'exact'", ")", ":", "\n", "            ", "output", "=", "F", ".", "conv2d", "(", "qinput", ",", "qweight", ",", "qbias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "conv2d_biprec", "(", "qinput", ",", "qweight", ",", "qbias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "self", ".", "act", "=", "output", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QLinear.__init__": [[217, 220], ["torch.Linear.__init__", "quantize.QuantMeasure"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", ")", ":", "\n", "        ", "super", "(", "QLinear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QLinear.forward": [[221, 243], ["hasattr", "quantize.QLinear.quantize_input", "quantize.quantize", "torch.linear", "torch.linear", "torch.linear", "quantize.linear_biprec", "config.weight_preconditioner", "quantize.quantize", "config.bias_preconditioner"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.quantize", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.linear", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.linear", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.linear", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.linear_biprec", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.weight_preconditioner", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.quantize", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.bias_preconditioner"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "config", ".", "quantize_activation", ":", "\n", "            ", "qinput", "=", "self", ".", "quantize_input", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "qinput", "=", "input", "\n", "\n", "", "if", "config", ".", "quantize_weights", ":", "\n", "            ", "qweight", "=", "quantize", "(", "self", ".", "weight", ",", "config", ".", "weight_preconditioner", "(", ")", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "                ", "qbias", "=", "quantize", "(", "self", ".", "bias", ",", "config", ".", "bias_preconditioner", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "qbias", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "qweight", "=", "self", ".", "weight", "\n", "qbias", "=", "self", ".", "bias", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "'exact'", ")", ":", "\n", "            ", "output", "=", "F", ".", "linear", "(", "qinput", ",", "qweight", ",", "qbias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "linear_biprec", "(", "qinput", ",", "qweight", ",", "qbias", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QBatchNorm2D.__init__": [[246, 249], ["torch.BatchNorm2d.__init__", "quantize.QuantMeasure"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "super", "(", "QBatchNorm2D", ",", "self", ")", ".", "__init__", "(", "num_features", ")", "\n", "self", ".", "quantize_input", "=", "QuantMeasure", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QBatchNorm2D.forward": [[250, 287], ["quantize.QBatchNorm2D._check_input_dim", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "quantize.QBatchNorm2D.quantize_input", "float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "# TODO: weight is not quantized", "\n", "        ", "self", ".", "_check_input_dim", "(", "input", ")", "\n", "if", "config", ".", "quantize_activation", ":", "\n", "            ", "qinput", "=", "self", ".", "quantize_input", "(", "input", ")", "\n", "", "else", ":", "\n", "            ", "qinput", "=", "input", "\n", "\n", "# if config.quantize_weights:", "\n", "#     qweight = quantize(self.weight, config.bias_preconditioner())", "\n", "#     qbias = quantize(self.bias, config.bias_preconditioner())", "\n", "# else:", "\n", "#     qweight = self.weight", "\n", "#     qbias = self.bias", "\n", "\n", "", "qweight", "=", "self", ".", "weight", "\n", "qbias", "=", "self", ".", "bias", "\n", "\n", "# exponential_average_factor is set to self.momentum", "\n", "# (when it is available) only so that if gets updated", "\n", "# in ONNX graph when this node is exported to ONNX.", "\n", "if", "self", ".", "momentum", "is", "None", ":", "\n", "            ", "exponential_average_factor", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "exponential_average_factor", "=", "self", ".", "momentum", "\n", "\n", "", "if", "self", ".", "training", "and", "self", ".", "track_running_stats", ":", "\n", "            ", "if", "self", ".", "num_batches_tracked", "is", "not", "None", ":", "\n", "                ", "self", ".", "num_batches_tracked", "=", "self", ".", "num_batches_tracked", "+", "1", "\n", "if", "self", ".", "momentum", "is", "None", ":", "# use cumulative moving average", "\n", "                    ", "exponential_average_factor", "=", "1.0", "/", "float", "(", "self", ".", "num_batches_tracked", ")", "\n", "", "else", ":", "# use exponential moving average", "\n", "                    ", "exponential_average_factor", "=", "self", ".", "momentum", "\n", "\n", "", "", "", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "qweight", ",", "qbias", ",", "\n", "self", ".", "training", "or", "not", "self", ".", "track_running_stats", ",", "\n", "exponential_average_factor", ",", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.quantize": [[120, 122], ["UniformQuantize().apply", "quantize.UniformQuantize"], "function", ["None"], ["", "", "def", "quantize", "(", "x", ",", "Preconditioner", ",", "stochastic", "=", "False", ",", "inplace", "=", "False", ")", ":", "\n", "    ", "return", "UniformQuantize", "(", ")", ".", "apply", "(", "x", ",", "Preconditioner", ",", "stochastic", ",", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.quantize_grad": [[124, 126], ["UniformQuantizeGrad().apply", "quantize.UniformQuantizeGrad"], "function", ["None"], ["", "def", "quantize_grad", "(", "x", ",", "Preconditoner", ",", "stochastic", "=", "True", ")", ":", "\n", "    ", "return", "UniformQuantizeGrad", "(", ")", ".", "apply", "(", "x", ",", "Preconditoner", ",", "stochastic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.conv2d_biprec": [[128, 141], ["torch.conv2d", "torch.conv2d", "quantize.quantize_grad", "quantize.quantize_grad", "torch.conv2d", "input.detach", "weight.detach", "config.weight_gradient_preconditioner", "config.activation_gradient_preconditioner", "quantize_grad.detach", "bias.detach"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.quantize_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.quantize_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.weight_gradient_preconditioner", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.activation_gradient_preconditioner"], ["", "def", "conv2d_biprec", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "if", "config", ".", "quantize_gradient", ":", "\n", "        ", "out1", "=", "F", ".", "conv2d", "(", "input", ".", "detach", "(", ")", ",", "weight", ",", "bias", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "out2", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ".", "detach", "(", ")", ",", "bias", ".", "detach", "(", ")", "if", "bias", "is", "not", "None", "else", "None", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "out1", "=", "quantize_grad", "(", "out1", ",", "config", ".", "weight_gradient_preconditioner", "(", ")", ")", "\n", "out2", "=", "quantize_grad", "(", "out2", ",", "config", ".", "activation_gradient_preconditioner", "(", ")", ")", "\n", "return", "out1", "+", "out2", "-", "out1", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", ",", "\n", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.linear_biprec": [[143, 154], ["torch.linear", "torch.linear", "quantize.quantize_grad", "quantize.quantize_grad", "torch.linear", "input.detach", "weight.detach", "config.weight_gradient_preconditioner", "config.activation_gradient_preconditioner", "quantize_grad.detach", "bias.detach"], "function", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.linear", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.linear", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.quantize_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.quantize_grad", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.resnet.ResNetBuilder.linear", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.weight_gradient_preconditioner", "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.quantize.QuantizationConfig.activation_gradient_preconditioner"], ["", "", "def", "linear_biprec", "(", "input", ",", "weight", ",", "bias", "=", "None", ")", ":", "\n", "    ", "if", "config", ".", "quantize_gradient", ":", "\n", "        ", "out1", "=", "F", ".", "linear", "(", "input", ".", "detach", "(", ")", ",", "weight", ",", "bias", ")", "\n", "out2", "=", "F", ".", "linear", "(", "input", ",", "weight", ".", "detach", "(", ")", ",", "bias", ".", "detach", "(", ")", "\n", "if", "bias", "is", "not", "None", "else", "None", ")", "\n", "out1", "=", "quantize_grad", "(", "out1", ",", "config", ".", "weight_gradient_preconditioner", "(", ")", ")", "\n", "out2", "=", "quantize_grad", "(", "out2", ",", "config", ".", "activation_gradient_preconditioner", "(", ")", ")", "\n", "return", "out1", "+", "out2", "-", "out1", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "F", ".", "linear", "(", "input", ",", "weight", ",", "bias", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__": [[8, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.__init__"], ["def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for the LabelSmoothing module.\n\n        :param smoothing: label smoothing factor\n        \"\"\"", "\n", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.cjf00000_StatQuant.image_classification.smoothing.LabelSmoothing.forward": [[18, 26], ["torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "loss.mean", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "target.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]]}