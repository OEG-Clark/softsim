{"home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF.__init__": [[12, 126], ["DGCF_osci.DGCF.norm_adj.count_nonzero", "eval", "len", "eval", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "DGCF_osci.DGCF._init_weights", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "DGCF_osci.DGCF.create_bpr_loss", "tensorflow.train.AdamOptimizer().minimize", "DGCF_osci.DGCF._create_lightgcn_embed", "DGCF_osci.DGCF._create_dgcf_embed", "tensorflow.train.AdamOptimizer", "DGCF_osci.DGCF._create_dgcf_embed_wochp", "DGCF_osci.DGCF._create_dgcf_embed_wola", "print", "DGCF_osci.DGCF._create_dgcf_embed_final", "DGCF_osci.DGCF._create_gcn_embed", "DGCF_osci.DGCF._create_gcmc_embed"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.BPRMF.BPRMF._init_weights", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.BPRMF.BPRMF.create_bpr_loss", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._create_lightgcn_embed", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF._create_dgcf_embed", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF._create_dgcf_embed_wochp", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF._create_dgcf_embed_wola", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF._create_dgcf_embed_final", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._create_gcn_embed", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._create_gcmc_embed"], ["    ", "def", "__init__", "(", "self", ",", "data_config", ",", "pretrain_data", ")", ":", "\n", "# argument settings", "\n", "        ", "self", ".", "model_type", "=", "args", ".", "model_type", "\n", "self", ".", "adj_type", "=", "args", ".", "adj_type", "\n", "self", ".", "alg_type", "=", "args", ".", "alg_type", "\n", "\n", "self", ".", "pretrain_data", "=", "pretrain_data", "\n", "\n", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "\n", "self", ".", "n_fold", "=", "100", "\n", "\n", "self", ".", "norm_adj", "=", "data_config", "[", "'norm_adj'", "]", "\n", "self", ".", "cross_adj", "=", "data_config", "[", "'cross_adj'", "]", "\n", "self", ".", "n_nonzero_elems", "=", "self", ".", "norm_adj", ".", "count_nonzero", "(", ")", "\n", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "self", ".", "weight_size", "=", "eval", "(", "args", ".", "layer_size", ")", "\n", "self", ".", "n_layers", "=", "len", "(", "self", ".", "weight_size", ")", "\n", "\n", "self", ".", "model_type", "+=", "'_%s_%s_l%d'", "%", "(", "self", ".", "adj_type", ",", "self", ".", "alg_type", ",", "self", ".", "n_layers", ")", "\n", "\n", "self", ".", "regs", "=", "eval", "(", "args", ".", "regs", ")", "\n", "self", ".", "decay", "=", "self", ".", "regs", "[", "0", "]", "\n", "self", ".", "local_factor", "=", "args", ".", "local_factor", "\n", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "\n", "'''\n        *********************************************************\n        Create Placeholder for Input Data & Dropout.\n        '''", "\n", "# placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "# dropout: node dropout (adopted on the ego-networks);", "\n", "#          ... since the usage of node dropout have higher computational cost,", "\n", "#          ... please use the 'node_dropout_flag' to indicate whether use such technique.", "\n", "#          message dropout (adopted on the convolution operations).", "\n", "self", ".", "node_dropout_flag", "=", "args", ".", "node_dropout_flag", "\n", "self", ".", "node_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "mess_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Create Model Parameters (i.e., Initialize Weights).\n        \"\"\"", "\n", "# initialization of model parameters", "\n", "self", ".", "weights", "=", "self", ".", "_init_weights", "(", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Compute Graph-based Representations of all users & items via Message-Passing Mechanism of Graph Neural Networks.\n        Different Convolutional Layers:\n            1. ngcf: defined in 'Neural Graph Collaborative Filtering', SIGIR2019;\n            2. gcn:  defined in 'Semi-Supervised Classification with Graph Convolutional Networks', ICLR2018;\n            3. gcmc: defined in 'Graph Convolutional Matrix Completion', KDD2018;\n        \"\"\"", "\n", "if", "self", ".", "alg_type", "in", "[", "'lightgcn'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_lightgcn_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'dgcf'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_dgcf_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'dgcf-wochp'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_dgcf_embed_wochp", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'dgcf-wola'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_dgcf_embed_wola", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'dgcf_final'", "]", ":", "# only keep the last layers", "\n", "            ", "print", "(", "'using final embeddings '", ")", "\n", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_dgcf_embed_final", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'gcn'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_gcn_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'gcmc'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_gcmc_embed", "(", ")", "\n", "\n", "", "\"\"\"\n        *********************************************************\n        Establish the final representations for user-item pairs in batch.\n        \"\"\"", "\n", "self", ".", "u_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ua_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings", ",", "self", ".", "neg_items", ")", "\n", "self", ".", "u_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "neg_items", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Inference for the testing phase.\n        \"\"\"", "\n", "self", ".", "batch_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_g_embeddings", ",", "self", ".", "pos_i_g_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Generate Predictions & Optimize via BPR loss.\n        \"\"\"", "\n", "self", ".", "mf_loss", ",", "self", ".", "emb_loss", ",", "self", ".", "reg_loss", "=", "self", ".", "create_bpr_loss", "(", "self", ".", "u_g_embeddings", ",", "\n", "self", ".", "pos_i_g_embeddings", ",", "\n", "self", ".", "neg_i_g_embeddings", ")", "\n", "self", ".", "loss", "=", "self", ".", "mf_loss", "+", "self", ".", "emb_loss", "# + self.reg_loss", "\n", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "#         self.opt = tf.train.RMSPropOptimizer(learning_rate=self.lr).minimize(self.loss)", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF._init_weights": [[128, 149], ["dict", "tensorflow.contrib.layers.xavier_initializer", "range", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer."], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "all_weights", "=", "dict", "(", ")", "\n", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "if", "self", ".", "pretrain_data", "is", "None", ":", "\n", "            ", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_embedding'", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_embedding'", ")", "\n", "print", "(", "'using xavier initialization'", ")", "\n", "", "else", ":", "\n", "            ", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'user_embed'", "]", "[", ":", ",", "0", ":", "self", ".", "emb_dim", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'user_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'item_embed'", "]", "[", ":", ",", "0", ":", "self", ".", "emb_dim", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'item_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "print", "(", "'using pretrained embeddings'", ")", "\n", "\n", "", "self", ".", "weight_size_list", "=", "[", "self", ".", "emb_dim", "]", "+", "self", ".", "weight_size", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "all_weights", "[", "'locality_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", "+", "self", ".", "n_items", ",", "1", "]", ")", ",", "name", "=", "'locality_%d'", "%", "k", ")", "\n", "\n", "", "return", "all_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF._split_A_hat": [[150, 163], ["range", "A_fold_hat.append", "DGCF_osci.DGCF._convert_sp_mat_to_sp_tensor"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._convert_sp_mat_to_sp_tensor"], ["", "def", "_split_A_hat", "(", "self", ",", "X", ")", ":", "\n", "        ", "A_fold_hat", "=", "[", "]", "\n", "\n", "fold_len", "=", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ")", "//", "self", ".", "n_fold", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_users", "+", "self", ".", "n_items", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "\n", "", "A_fold_hat", ".", "append", "(", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "X", "[", "start", ":", "end", "]", ")", ")", "\n", "", "return", "A_fold_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF._split_A_hat_node_dropout": [[164, 181], ["range", "DGCF_osci.DGCF._convert_sp_mat_to_sp_tensor", "X[].count_nonzero", "A_fold_hat.append", "DGCF_osci.DGCF._dropout_sparse"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._convert_sp_mat_to_sp_tensor", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._dropout_sparse"], ["", "def", "_split_A_hat_node_dropout", "(", "self", ",", "X", ")", ":", "\n", "        ", "A_fold_hat", "=", "[", "]", "\n", "\n", "fold_len", "=", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ")", "//", "self", ".", "n_fold", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_users", "+", "self", ".", "n_items", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "\n", "# A_fold_hat.append(self._convert_sp_mat_to_sp_tensor(X[start:end]))", "\n", "", "temp", "=", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "X", "[", "start", ":", "end", "]", ")", "\n", "n_nonzero_temp", "=", "X", "[", "start", ":", "end", "]", ".", "count_nonzero", "(", ")", "\n", "A_fold_hat", ".", "append", "(", "self", ".", "_dropout_sparse", "(", "temp", ",", "1", "-", "self", ".", "node_dropout", "[", "0", "]", ",", "n_nonzero_temp", ")", ")", "\n", "\n", "", "return", "A_fold_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF._create_dgcf_embed": [[182, 208], ["tensorflow.concat", "range", "tensorflow.split", "DGCF_osci.DGCF._split_A_hat_node_dropout", "DGCF_osci.DGCF._split_A_hat", "tensorflow.multiply", "range", "tensorflow.concat", "tensorflow.nn.sigmoid", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat_node_dropout", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat"], ["", "def", "_create_dgcf_embed", "(", "self", ")", ":", "\n", "# Generate a set of adjacency sub-matrix.", "\n", "        ", "if", "self", ".", "node_dropout_flag", ":", "\n", "# node dropout.", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat_node_dropout", "(", "self", ".", "norm_adj", "+", "self", ".", "cross_adj", ")", "\n", "del", "self", ".", "norm_adj", ",", "self", ".", "cross_adj", "\n", "", "else", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", "+", "self", ".", "cross_adj", ")", "\n", "del", "self", ".", "norm_adj", ",", "self", ".", "cross_adj", "\n", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "all_embeddings", "=", "ego_embeddings", "/", "(", "self", ".", "n_layers", "+", "1", ")", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "residual_embed", "=", "[", "]", "\n", "ego_embeddings", "=", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "weights", "[", "'locality_%d'", "%", "k", "]", ")", ",", "ego_embeddings", ")", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "# save memory", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "ego_embeddings", ")", ")", "# sum messages of neighbors.", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "all_embeddings", "+=", "ego_embeddings", "/", "(", "self", ".", "n_layers", "+", "1", ")", "\n", "", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF._create_dgcf_embed_wochp": [[209, 235], ["tensorflow.concat", "range", "tensorflow.split", "DGCF_osci.DGCF._split_A_hat_node_dropout", "DGCF_osci.DGCF._split_A_hat", "tensorflow.multiply", "range", "tensorflow.concat", "tensorflow.nn.sigmoid", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat_node_dropout", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat"], ["", "def", "_create_dgcf_embed_wochp", "(", "self", ")", ":", "\n", "# Generate a set of adjacency sub-matrix.", "\n", "        ", "if", "self", ".", "node_dropout_flag", ":", "\n", "# node dropout.", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat_node_dropout", "(", "self", ".", "norm_adj", ")", "\n", "del", "self", ".", "norm_adj", ",", "self", ".", "cross_adj", "\n", "", "else", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "del", "self", ".", "norm_adj", ",", "self", ".", "cross_adj", "\n", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "all_embeddings", "=", "ego_embeddings", "/", "(", "self", ".", "n_layers", "+", "1", ")", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "residual_embed", "=", "[", "]", "\n", "ego_embeddings", "=", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "weights", "[", "'locality_%d'", "%", "k", "]", ")", ",", "ego_embeddings", ")", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "# save memory", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "ego_embeddings", ")", ")", "# sum messages of neighbors.", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "all_embeddings", "+=", "ego_embeddings", "/", "(", "self", ".", "n_layers", "+", "1", ")", "\n", "", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF._create_dgcf_embed_wola": [[236, 262], ["tensorflow.concat", "range", "tensorflow.split", "DGCF_osci.DGCF._split_A_hat_node_dropout", "DGCF_osci.DGCF._split_A_hat", "range", "tensorflow.concat", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat_node_dropout", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat"], ["", "def", "_create_dgcf_embed_wola", "(", "self", ")", ":", "\n", "# Generate a set of adjacency sub-matrix.", "\n", "        ", "if", "self", ".", "node_dropout_flag", ":", "\n", "# node dropout.", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat_node_dropout", "(", "self", ".", "norm_adj", ")", "\n", "del", "self", ".", "norm_adj", ",", "self", ".", "cross_adj", "\n", "", "else", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "del", "self", ".", "norm_adj", ",", "self", ".", "cross_adj", "\n", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "all_embeddings", "=", "ego_embeddings", "/", "(", "self", ".", "n_layers", "+", "1", ")", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "residual_embed", "=", "[", "]", "\n", "# ego_embeddings = tf.multiply(tf.nn.sigmoid(self.weights['locality_%d' % k]), ego_embeddings)", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "# save memory", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "ego_embeddings", ")", ")", "# sum messages of neighbors.", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "all_embeddings", "+=", "ego_embeddings", "/", "(", "self", ".", "n_layers", "+", "1", ")", "\n", "", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF._create_dgcf_embed_final": [[264, 290], ["tensorflow.concat", "range", "tensorflow.split", "DGCF_osci.DGCF._split_A_hat_node_dropout", "DGCF_osci.DGCF._split_A_hat", "tensorflow.multiply", "range", "tensorflow.concat", "tensorflow.nn.sigmoid", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat_node_dropout", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat"], ["", "def", "_create_dgcf_embed_final", "(", "self", ")", ":", "\n", "# Generate a set of adjacency sub-matrix.", "\n", "        ", "if", "self", ".", "node_dropout_flag", ":", "\n", "# node dropout.", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat_node_dropout", "(", "self", ".", "norm_adj", "+", "self", ".", "cross_adj", ")", "\n", "del", "self", ".", "norm_adj", ",", "self", ".", "cross_adj", "\n", "", "else", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", "+", "self", ".", "cross_adj", ")", "\n", "del", "self", ".", "norm_adj", ",", "self", ".", "cross_adj", "\n", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "all_embeddings", "=", "ego_embeddings", "/", "(", "self", ".", "n_layers", "+", "1", ")", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "residual_embed", "=", "[", "]", "\n", "ego_embeddings", "=", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "weights", "[", "'locality_%d'", "%", "k", "]", ")", ",", "ego_embeddings", ")", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "# save memory", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "ego_embeddings", ")", ")", "# sum messages of neighbors.", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "# all_embeddings += ego_embeddings / (self.n_layers+1)", "\n", "", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "ego_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF._create_lightgcn_embed": [[292, 316], ["tensorflow.concat", "range", "tensorflow.stack", "tensorflow.reduce_mean", "tensorflow.split", "DGCF_osci.DGCF._split_A_hat_node_dropout", "DGCF_osci.DGCF._split_A_hat", "range", "tensorflow.concat", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat_node_dropout", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat"], ["", "def", "_create_lightgcn_embed", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "node_dropout_flag", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat_node_dropout", "(", "self", ".", "norm_adj", ")", "\n", "del", "self", ".", "norm_adj", "\n", "", "else", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "del", "self", ".", "norm_adj", "\n", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "ego_embeddings", ")", ")", "\n", "\n", "", "side_embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "ego_embeddings", "=", "side_embeddings", "\n", "all_embeddings", "+=", "[", "ego_embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "stack", "(", "all_embeddings", ",", "1", ")", "\n", "all_embeddings", "=", "tf", ".", "reduce_mean", "(", "all_embeddings", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF.create_bpr_loss": [[318, 334], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.softplus", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "pos_i_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_g_embeddings_pre", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "mf_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softplus", "(", "-", "(", "pos_scores", "-", "neg_scores", ")", ")", ")", "\n", "\n", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF._convert_sp_mat_to_sp_tensor": [[335, 339], ["X.tocoo().astype", "np.mat().transpose", "tensorflow.SparseTensor", "X.tocoo", "np.mat"], "methods", ["None"], ["", "def", "_convert_sp_mat_to_sp_tensor", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "tf", ".", "SparseTensor", "(", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.DGCF._dropout_sparse": [[340, 351], ["tensorflow.random_uniform", "tensorflow.cast", "tensorflow.sparse_retain", "tensorflow.floor", "tensorflow.div"], "methods", ["None"], ["", "def", "_dropout_sparse", "(", "self", ",", "X", ",", "keep_prob", ",", "n_nonzero_elems", ")", ":", "\n", "        ", "\"\"\"\n        Dropout for sparse tensors.\n        \"\"\"", "\n", "noise_shape", "=", "[", "n_nonzero_elems", "]", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random_uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse_retain", "(", "X", ",", "dropout_mask", ")", "\n", "\n", "return", "pre_out", "*", "tf", ".", "div", "(", "1.", ",", "keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.None.DGCF_osci.load_pretrained_data": [[352, 361], ["print", "np.load", "print"], "function", ["None"], ["", "", "def", "load_pretrained_data", "(", ")", ":", "\n", "    ", "pretrain_path", "=", "'%spretrain/%s/%s.npz'", "%", "(", "args", ".", "proj_path", ",", "args", ".", "dataset", ",", "'embeddings'", ")", "\n", "print", "(", "pretrain_path", ")", "\n", "try", ":", "\n", "        ", "pretrain_data", "=", "np", ".", "load", "(", "pretrain_path", ")", "\n", "print", "(", "'load the pretrained embeddings.'", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pretrain_data", "=", "None", "\n", "", "return", "pretrain_data", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.__init__": [[18, 29], ["load_data.Data.load_org"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.load_org"], ["        ", "self", ".", "path", "=", "path", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "self", ".", "n_users", ",", "self", ".", "n_items", "=", "0", ",", "0", "\n", "self", ".", "n_train", ",", "self", ".", "n_valid", ",", "self", ".", "n_test", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "neg_pools", "=", "{", "}", "\n", "self", ".", "val_ratio", "=", "0", "\n", "self", ".", "exist_users", "=", "[", "]", "\n", "\n", "train_file", "=", "self", ".", "path", "+", "'/train.txt'", "\n", "valid_file", "=", "self", ".", "path", "+", "'/validation.txt'", "\n", "test_file", "=", "self", ".", "path", "+", "'/test.txt'", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.get_adj_mat": [[141, 173], ["time.time.time", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "print", "scipy.load_npz", "load_data.Data.create_adj_mat", "scipy.save_npz", "scipy.save_npz", "scipy.save_npz", "scipy.save_npz", "numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.diags.dot", "norm_adj.dot.dot.dot", "print", "norm_adj.dot.dot.tocsr", "scipy.save_npz", "time.time.time", "scipy.load_npz.sum", "numpy.power", "numpy.isinf"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.create_adj_mat"], ["R", "=", "self", ".", "R", ".", "tolil", "(", ")", "\n", "\n", "adj_mat", "[", ":", "self", ".", "n_users", ",", "self", ".", "n_users", ":", "]", "=", "R", "\n", "adj_mat", "[", "self", ".", "n_users", ":", ",", ":", "self", ".", "n_users", "]", "=", "R", ".", "T", "\n", "adj_mat", "=", "adj_mat", ".", "todok", "(", ")", "\n", "print", "(", "'already create adjacency matrix'", ",", "adj_mat", ".", "shape", ",", "time", "(", ")", "-", "t1", ")", "\n", "\n", "t2", "=", "time", "(", ")", "\n", "\n", "def", "normalized_adj_single", "(", "adj", ")", ":", "\n", "            ", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "\n", "norm_adj", "=", "d_mat_inv", ".", "dot", "(", "adj", ")", "\n", "# norm_adj = adj.dot(d_mat_inv)", "\n", "print", "(", "'generate single-normalized adjacency matrix.'", ")", "\n", "return", "norm_adj", ".", "tocoo", "(", ")", "\n", "\n", "", "def", "normalized_adj_laplacian", "(", "adj", ")", ":", "\n", "            ", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "row_norm_adj", "=", "d_mat_inv", ".", "dot", "(", "adj", ")", "\n", "norm_adj", "=", "row_norm_adj", ".", "dot", "(", "d_mat_inv", ")", "\n", "\n", "print", "(", "'generate laplacian-normalized adjacency matrix.'", ")", "\n", "return", "norm_adj", ".", "tocoo", "(", ")", "\n", "\n", "", "def", "normalize_cross_hop_laplacian", "(", "adj", ")", ":", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.create_adj_mat": [[174, 226], ["time.time.time", "scipy.dok_matrix", "adj_mat.todok.todok.tolil", "load_data.Data.R.tolil", "range", "adj_mat.todok.todok.todok", "print", "time.time.time", "load_data.Data.create_adj_mat.normalized_adj_single"], "methods", ["None"], ["            ", "cross_adj", "=", "adj", ".", "dot", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "cross_adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", "/", "2", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "row_norm_adj", "=", "d_mat_inv", ".", "dot", "(", "cross_adj", ")", "\n", "norm_adj", "=", "row_norm_adj", ".", "dot", "(", "d_mat_inv", ")", "\n", "norm_adj", ".", "eliminate_zeros", "(", ")", "\n", "print", "(", "'generate laplacian-normalized cross-hop adjacency matrix.'", ")", "\n", "return", "norm_adj", ".", "tocoo", "(", ")", "\n", "\n", "", "def", "laplacian_both_hop_adj", "(", "adj", ")", ":", "\n", "            ", "cross_adj", "=", "adj", ".", "dot", "(", "adj", ")", "\n", "cross_adj", "=", "adj", "+", "cross_adj", "+", "sp", ".", "eye", "(", "adj_mat", ".", "shape", "[", "0", "]", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "cross_adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", "/", "2", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "row_norm_adj", "=", "d_mat_inv", ".", "dot", "(", "cross_adj", ")", "\n", "norm_adj", "=", "row_norm_adj", ".", "dot", "(", "d_mat_inv", ")", "\n", "print", "(", "'generate laplacian-normalized both 1,2-order cross-hop adjacency matrix.'", ")", "\n", "return", "norm_adj", ".", "tocoo", "(", ")", "\n", "\n", "", "def", "filter_cross_hop_laplacian", "(", "adj", ",", "filter_numer", "=", "2", ")", ":", "\n", "            ", "cross_adj", "=", "adj", ".", "dot", "(", "adj", ")", "\n", "cross_adj", ".", "data", "=", "np", ".", "where", "(", "cross_adj", ".", "data", ">", "filter_numer", ",", "cross_adj", ".", "data", ",", "0.", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "cross_adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", "/", "2", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "row_norm_adj", "=", "d_mat_inv", ".", "dot", "(", "cross_adj", ")", "\n", "norm_adj", "=", "row_norm_adj", ".", "dot", "(", "d_mat_inv", ")", "\n", "norm_adj", ".", "data", "[", "np", ".", "isinf", "(", "norm_adj", ".", "data", ")", "]", "=", "0.", "\n", "norm_adj", ".", "eliminate_zeros", "(", ")", "\n", "print", "(", "'generate filtered laplacian-normalized cross-hop adjacency matrix.'", ")", "\n", "return", "norm_adj", ".", "tocoo", "(", ")", "\n", "\n", "", "def", "log_filter_cross_hop_laplacian", "(", "adj", ",", "filter_numer", "=", "0", ")", ":", "\n", "            ", "cross_adj", "=", "adj", ".", "dot", "(", "adj", ")", "\n", "cross_adj", ".", "data", "=", "np", ".", "log", "(", "cross_adj", ".", "data", ")", "\n", "cross_adj", ".", "data", "=", "np", ".", "where", "(", "cross_adj", ".", "data", ">", "filter_numer", ",", "cross_adj", ".", "data", ",", "0.", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "cross_adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", "/", "2", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "row_norm_adj", "=", "d_mat_inv", ".", "dot", "(", "cross_adj", ")", "\n", "norm_adj", "=", "row_norm_adj", ".", "dot", "(", "d_mat_inv", ")", "\n", "norm_adj", ".", "data", "[", "np", ".", "isinf", "(", "norm_adj", ".", "data", ")", "]", "=", "0.", "\n", "norm_adj", ".", "eliminate_zeros", "(", ")", "\n", "print", "(", "'generate log-based filtered laplacian-normalized cross-hop adjacency matrix.'", ")", "\n", "return", "norm_adj", ".", "tocoo", "(", ")", "\n", "\n", "", "def", "band_cross_hop_laplacian", "(", "adj", ",", "low_pass", "=", "0.0025", ",", "high_stop", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.negative_pool": [[227, 234], ["time.time.time", "load_data.Data.train_items.keys", "print", "list", "random.choice", "time.time.time", "set", "set", "range", "range"], "methods", ["None"], ["            ", "cross_adj", "=", "adj", ".", "dot", "(", "adj", ")", "\n", "# cross_adj.data = np.where(cross_adj.data>filter_numer, cross_adj.data, 0.)", "\n", "rowsum", "=", "np", ".", "array", "(", "cross_adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", "/", "2", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "row_norm_adj", "=", "d_mat_inv", ".", "dot", "(", "cross_adj", ")", "\n", "norm_adj", "=", "row_norm_adj", ".", "dot", "(", "d_mat_inv", ")", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.sample": [[235, 274], ["random.sample", "len", "list", "random.sample", "load_data.Data.sample.sample_pos_items_for_u"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.sample", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.sample"], ["norm_adj", ".", "data", "[", "np", ".", "isinf", "(", "norm_adj", ".", "data", ")", "]", "=", "0.", "\n", "norm_adj", ".", "data", "=", "np", ".", "where", "(", "norm_adj", ".", "data", ">", "low_pass", ",", "norm_adj", ".", "data", ",", "0.", ")", "\n", "norm_adj", ".", "data", "=", "np", ".", "where", "(", "norm_adj", ".", "data", "<", "high_stop", ",", "norm_adj", ".", "data", ",", "0.", ")", "\n", "norm_adj", ".", "eliminate_zeros", "(", ")", "\n", "print", "(", "'generate filtered laplacian-normalized cross-hop adjacency matrix.'", ")", "\n", "return", "norm_adj", ".", "tocoo", "(", ")", "\n", "\n", "", "def", "band_cross_hop_laplacian_nodiag", "(", "adj", ",", "low_pass", "=", "0.0025", ",", "high_stop", "=", "1", ")", ":", "\n", "            ", "cross_adj", "=", "adj", ".", "dot", "(", "adj", ")", "\n", "# cross_adj.data = np.where(cross_adj.data>filter_numer, cross_adj.data, 0.)", "\n", "rowsum", "=", "np", ".", "array", "(", "cross_adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", "/", "2", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "row_norm_adj", "=", "d_mat_inv", ".", "dot", "(", "cross_adj", ")", "\n", "norm_adj", "=", "row_norm_adj", ".", "dot", "(", "d_mat_inv", ")", "\n", "norm_adj", ".", "data", "[", "np", ".", "isinf", "(", "norm_adj", ".", "data", ")", "]", "=", "0.", "\n", "norm_adj", ".", "data", "=", "np", ".", "where", "(", "norm_adj", ".", "data", ">", "low_pass", ",", "norm_adj", ".", "data", ",", "0.", ")", "\n", "norm_adj", ".", "data", "=", "np", ".", "where", "(", "norm_adj", ".", "data", "<", "high_stop", ",", "norm_adj", ".", "data", ",", "0.", ")", "\n", "norm_adj", ".", "setdiag", "(", "0.0", ")", "\n", "norm_adj", ".", "eliminate_zeros", "(", ")", "\n", "print", "(", "'generate filtered laplacian-normalized cross-hop adjacency matrix.'", ")", "\n", "return", "norm_adj", ".", "tocoo", "(", ")", "\n", "\n", "", "def", "check_adj_if_equal", "(", "adj", ")", ":", "\n", "            ", "dense_A", "=", "np", ".", "array", "(", "adj", ".", "todense", "(", ")", ")", "\n", "degree", "=", "np", ".", "sum", "(", "dense_A", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "temp", "=", "np", ".", "dot", "(", "np", ".", "diag", "(", "np", ".", "power", "(", "degree", ",", "-", "1", ")", ")", ",", "dense_A", ")", "\n", "print", "(", "'check normalized adjacency matrix whether equal to this laplacian matrix.'", ")", "\n", "return", "temp", "\n", "\n", "# norm_adj_mat = normalized_adj_single(adj_mat + sp.eye(adj_mat.shape[0]))", "\n", "", "laplacian_adj_mat", "=", "normalized_adj_laplacian", "(", "adj_mat", "+", "sp", ".", "eye", "(", "adj_mat", ".", "shape", "[", "0", "]", ")", ")", "\n", "laplacian_adj_mat_noeye", "=", "normalized_adj_laplacian", "(", "adj_mat", ")", "\n", "# mean_adj_mat = normalized_adj_single(adj_mat)", "\n", "# cross_adj_mat = filter_cross_hop_laplacian(adj_mat + sp.eye(adj_mat.shape[0]))", "\n", "# cross_adj_mat = filter_cross_hop_laplacian(adj_mat)", "\n", "# cross_adj_mat = log_filter_cross_hop_laplacian(adj_mat)", "\n", "cross_adj_mat", "=", "band_cross_hop_laplacian", "(", "adj_mat", ",", "low_pass", "=", "low", ",", "high_stop", "=", "high", ")", "\n", "# cross_adj_mat_nodiag = band_cross_hop_laplacian_nodiag(adj_mat, low_pass=low, high_stop=high)", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.get_num_users_items": [[275, 278], ["print"], "methods", ["None"], ["\n", "print", "(", "'already normalize adjacency matrix'", ",", "time", "(", ")", "-", "t2", ")", "\n", "return", "adj_mat", ".", "tocsr", "(", ")", ",", "laplacian_adj_mat", ".", "tocsr", "(", ")", ",", "laplacian_adj_mat_noeye", ".", "tocsr", "(", ")", ",", "cross_adj_mat", ".", "tocsr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.print_statistics": [[279, 283], ["print", "print", "print"], "methods", ["None"], ["\n", "", "def", "negative_pool", "(", "self", ")", ":", "\n", "        ", "t1", "=", "time", "(", ")", "\n", "for", "u", "in", "self", ".", "train_items", ".", "keys", "(", ")", ":", "\n", "            ", "neg_items", "=", "list", "(", "set", "(", "range", "(", "self", ".", "n_items", ")", ")", "-", "set", "(", "self", ".", "train_items", "[", "u", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.get_sparsity_split": [[285, 307], ["open().readlines", "enumerate", "print", "load_data.Data.create_sparsity_split", "open", "range", "print", "open", "split_state.append", "print", "split_uids.append", "len", "open.write", "open.write", "line.strip", "line.strip", "int", "line.strip().split", "str", "line.strip"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.create_sparsity_split"], ["self", ".", "neg_pools", "[", "u", "]", "=", "pools", "\n", "", "print", "(", "'refresh negative pools'", ",", "time", "(", ")", "-", "t1", ")", "\n", "\n", "", "def", "sample", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "batch_size", "<=", "self", ".", "n_users", ":", "\n", "            ", "users", "=", "rd", ".", "sample", "(", "self", ".", "exist_users", ",", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "users", "=", "[", "rd", ".", "choice", "(", "self", ".", "exist_users", ")", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "\n", "\n", "", "def", "sample_pos_items_for_u", "(", "u", ",", "num", ")", ":", "\n", "            ", "pos_items", "=", "self", ".", "train_items", "[", "u", "]", "\n", "n_pos_items", "=", "len", "(", "pos_items", ")", "\n", "pos_batch", "=", "[", "]", "\n", "while", "True", ":", "\n", "                ", "if", "len", "(", "pos_batch", ")", "==", "num", ":", "break", "\n", "pos_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "n_pos_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "pos_i_id", "=", "pos_items", "[", "pos_id", "]", "\n", "\n", "if", "pos_i_id", "not", "in", "pos_batch", ":", "\n", "                    ", "pos_batch", ".", "append", "(", "pos_i_id", ")", "\n", "", "", "return", "pos_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.create_sparsity_split": [[310, 362], ["list", "dict", "list", "enumerate", "load_data.Data.test_set.keys", "sorted", "len", "dict.keys", "user_n_iid[].append", "len", "len", "list.append", "split_state.append", "print", "list.append", "split_state.append", "print", "len", "len", "len", "len", "len", "dict.keys"], "methods", ["None"], ["while", "True", ":", "\n", "                ", "if", "len", "(", "neg_items", ")", "==", "num", ":", "break", "\n", "neg_id", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "self", ".", "n_items", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "if", "neg_id", "not", "in", "self", ".", "train_items", "[", "u", "]", "and", "neg_id", "not", "in", "neg_items", ":", "\n", "                    ", "neg_items", ".", "append", "(", "neg_id", ")", "\n", "", "", "return", "neg_items", "\n", "\n", "", "def", "sample_neg_items_for_u_from_pools", "(", "u", ",", "num", ")", ":", "\n", "            ", "neg_items", "=", "list", "(", "set", "(", "self", ".", "neg_pools", "[", "u", "]", ")", "-", "set", "(", "self", ".", "train_items", "[", "u", "]", ")", ")", "\n", "return", "rd", ".", "sample", "(", "neg_items", ",", "num", ")", "\n", "\n", "", "pos_items", ",", "neg_items", "=", "[", "]", ",", "[", "]", "\n", "for", "u", "in", "users", ":", "\n", "            ", "pos_items", "+=", "sample_pos_items_for_u", "(", "u", ",", "1", ")", "\n", "neg_items", "+=", "sample_neg_items_for_u", "(", "u", ",", "1", ")", "\n", "\n", "", "return", "users", ",", "pos_items", ",", "neg_items", "\n", "\n", "", "def", "get_num_users_items", "(", "self", ")", ":", "\n", "        ", "print", "(", "'in get_num_users_items'", ",", "self", ".", "n_users", ",", "self", ".", "n_items", ")", "\n", "return", "self", ".", "n_users", ",", "self", ".", "n_items", "\n", "\n", "", "def", "print_statistics", "(", "self", ")", ":", "\n", "        ", "print", "(", "'n_users=%d, n_items=%d'", "%", "(", "self", ".", "n_users", ",", "self", ".", "n_items", ")", ")", "\n", "print", "(", "'n_interactions=%d'", "%", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", ")", "\n", "print", "(", "'n_train=%d, n_test=%d, sparsity=%.5f'", "%", "(", "self", ".", "n_train", ",", "self", ".", "n_test", ",", "(", "self", ".", "n_train", "+", "self", ".", "n_test", ")", "/", "(", "self", ".", "n_users", "*", "self", ".", "n_items", ")", ")", ")", "\n", "\n", "\n", "", "def", "get_sparsity_split", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "split_uids", ",", "split_state", "=", "[", "]", ",", "[", "]", "\n", "lines", "=", "open", "(", "self", ".", "path", "+", "'/sparsity.split'", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "                ", "if", "idx", "%", "2", "==", "0", ":", "\n", "                    ", "split_state", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "print", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "split_uids", ".", "append", "(", "[", "int", "(", "uid", ")", "for", "uid", "in", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "", "", "print", "(", "'get sparsity split.'", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "            ", "split_uids", ",", "split_state", "=", "self", ".", "create_sparsity_split", "(", ")", "\n", "f", "=", "open", "(", "self", ".", "path", "+", "'/sparsity.split'", ",", "'w'", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "split_state", ")", ")", ":", "\n", "                ", "f", ".", "write", "(", "split_state", "[", "idx", "]", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "' '", ".", "join", "(", "[", "str", "(", "uid", ")", "for", "uid", "in", "split_uids", "[", "idx", "]", "]", ")", "+", "'\\n'", ")", "\n", "", "print", "(", "'create sparsity split.'", ")", "\n", "# print(split_uids, split_state)", "\n", "", "return", "split_uids", ",", "split_state", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.recall": [[4, 6], ["len", "float", "len", "set", "set", "set"], "function", ["None"], ["def", "recall", "(", "rank", ",", "ground_truth", ",", "N", ")", ":", "\n", "    ", "return", "len", "(", "set", "(", "rank", "[", ":", "N", "]", ")", "&", "set", "(", "ground_truth", ")", ")", "/", "float", "(", "len", "(", "set", "(", "ground_truth", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.precision_at_k": [[8, 19], ["numpy.mean", "numpy.asarray"], "function", ["None"], ["", "def", "precision_at_k", "(", "r", ",", "k", ")", ":", "\n", "    ", "\"\"\"Score is precision @ k\n    Relevance is binary (nonzero is relevant).\n    Returns:\n        Precision @ k\n    Raises:\n        ValueError: len(r) must be >= k\n    \"\"\"", "\n", "assert", "k", ">=", "1", "\n", "r", "=", "np", ".", "asarray", "(", "r", ")", "[", ":", "k", "]", "\n", "return", "np", ".", "mean", "(", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.average_precision": [[21, 32], ["numpy.asarray", "metrics.precision_at_k", "numpy.sum", "float", "range", "min", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.precision_at_k"], ["", "def", "average_precision", "(", "r", ",", "cut", ")", ":", "\n", "    ", "\"\"\"Score is average precision (area under PR curve)\n    Relevance is binary (nonzero is relevant).\n    Returns:\n        Average precision\n    \"\"\"", "\n", "r", "=", "np", ".", "asarray", "(", "r", ")", "\n", "out", "=", "[", "precision_at_k", "(", "r", ",", "k", "+", "1", ")", "for", "k", "in", "range", "(", "cut", ")", "if", "r", "[", "k", "]", "]", "\n", "if", "not", "out", ":", "\n", "        ", "return", "0.", "\n", "", "return", "np", ".", "sum", "(", "out", ")", "/", "float", "(", "min", "(", "cut", ",", "np", ".", "sum", "(", "r", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.mean_average_precision": [[34, 41], ["numpy.mean", "metrics.average_precision"], "function", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.average_precision"], ["", "def", "mean_average_precision", "(", "rs", ")", ":", "\n", "    ", "\"\"\"Score is mean average precision\n    Relevance is binary (nonzero is relevant).\n    Returns:\n        Mean average precision\n    \"\"\"", "\n", "return", "np", ".", "mean", "(", "[", "average_precision", "(", "r", ")", "for", "r", "in", "rs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.dcg_at_k": [[43, 59], ["numpy.asfarray", "numpy.sum", "numpy.sum", "ValueError", "numpy.log2", "numpy.log2", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "dcg_at_k", "(", "r", ",", "k", ",", "method", "=", "1", ")", ":", "\n", "    ", "\"\"\"Score is discounted cumulative gain (dcg)\n    Relevance is positive real values.  Can use binary\n    as the previous methods.\n    Returns:\n        Discounted cumulative gain\n    \"\"\"", "\n", "r", "=", "np", ".", "asfarray", "(", "r", ")", "[", ":", "k", "]", "\n", "if", "r", ".", "size", ":", "\n", "        ", "if", "method", "==", "0", ":", "\n", "            ", "return", "r", "[", "0", "]", "+", "np", ".", "sum", "(", "r", "[", "1", ":", "]", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "1", ")", ")", ")", "\n", "", "elif", "method", "==", "1", ":", "\n", "            ", "return", "np", ".", "sum", "(", "r", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "2", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'method must be 0 or 1.'", ")", "\n", "", "", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.ndcg_at_k": [[61, 81], ["numpy.zeros", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.isnan", "numpy.log2", "numpy.log2", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "ndcg_at_k", "(", "r", ",", "k", ",", "pos", ")", ":", "\n", "    ", "\"\"\"Score is normalized discounted cumulative gain (ndcg)\n    Relevance is positive real values.  Can use binary\n    as the previous methods.\n    Returns:\n        Normalized discounted cumulative gain\n    \"\"\"", "\n", "pred_data", "=", "r", "[", ":", "k", "]", "\n", "\n", "idcg_rel", "=", "np", ".", "zeros", "(", "k", ")", "\n", "length", "=", "k", "if", "k", "<=", "pos", "else", "pos", "\n", "idcg_rel", "[", ":", "length", "]", "=", "1", "\n", "\n", "idcg", "=", "np", ".", "sum", "(", "idcg_rel", "*", "1.", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "k", "+", "2", ")", ")", ")", "\n", "dcg", "=", "pred_data", "*", "(", "1.", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "k", "+", "2", ")", ")", ")", "\n", "dcg", "=", "np", ".", "sum", "(", "dcg", ")", "\n", "ndcg", "=", "dcg", "/", "idcg", "\n", "if", "np", ".", "isnan", "(", "ndcg", ")", "==", "True", ":", "\n", "        ", "ndcg", "=", "0.", "\n", "", "return", "np", ".", "sum", "(", "ndcg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.recall_at_k": [[83, 86], ["numpy.asfarray", "numpy.sum"], "function", ["None"], ["", "def", "recall_at_k", "(", "r", ",", "k", ",", "all_pos_num", ")", ":", "\n", "    ", "r", "=", "np", ".", "asfarray", "(", "r", ")", "[", ":", "k", "]", "\n", "return", "np", ".", "sum", "(", "r", ")", "/", "all_pos_num", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.hit_at_k": [[88, 94], ["numpy.array", "numpy.sum"], "function", ["None"], ["", "def", "hit_at_k", "(", "r", ",", "k", ")", ":", "\n", "    ", "r", "=", "np", ".", "array", "(", "r", ")", "[", ":", "k", "]", "\n", "if", "np", ".", "sum", "(", "r", ")", ">", "0", ":", "\n", "        ", "return", "1.", "\n", "", "else", ":", "\n", "        ", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.F1": [[95, 100], ["None"], "function", ["None"], ["", "", "def", "F1", "(", "pre", ",", "rec", ")", ":", "\n", "    ", "if", "pre", "+", "rec", ">", "0", ":", "\n", "        ", "return", "(", "2.0", "*", "pre", "*", "rec", ")", "/", "(", "pre", "+", "rec", ")", "\n", "", "else", ":", "\n", "        ", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.auc": [[101, 107], ["sklearn.metrics.roc_auc_score"], "function", ["None"], ["", "", "def", "auc", "(", "ground_truth", ",", "prediction", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "res", "=", "roc_auc_score", "(", "y_true", "=", "ground_truth", ",", "y_score", "=", "prediction", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "res", "=", "0.", "\n", "", "return", "res", "", "", ""]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.parser.parse_args": [[10, 69], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.parser.parse_args"], ["parser", ".", "add_argument", "(", "'--data_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "'./Data/'", ",", "\n", "help", "=", "'Input data path.'", ")", "\n", "parser", ".", "add_argument", "(", "'--proj_path'", ",", "nargs", "=", "'?'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Project path.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "nargs", "=", "'?'", ",", "default", "=", "'ml100k'", ",", "\n", "help", "=", "'Choose a dataset from {ml100k, ratings_ml-1m, gowalla}'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0: No pretrain, -1: Pretrain with the learned embeddings, 1:Pretrain with stored models.'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Interval of evaluation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "'Number of epoch.'", ")", "\n", "parser", ".", "add_argument", "(", "'--residual'", ",", "type", "=", "str", ",", "default", "=", "'None'", ",", "help", "=", "'deprecated'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_fold'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'the number of folds for splitting adj'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--embed_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'Embedding size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--layer_num'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'The number of layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--layer_size'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[128,128]'", ",", "\n", "help", "=", "'Output sizes of every layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "\n", "help", "=", "'Batch size.'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'The epoch number for starting to test (validate).'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'The interval epoch number for testing (validating).'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lareg'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Regularizations for LA layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--regs'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[1e-5,1e-5,1e-2]'", ",", "\n", "help", "=", "'Regularizations.'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_factor'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'local_factor.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "\n", "help", "=", "'Learning rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--low'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "\n", "help", "=", "'low pass of the laplacian'", ")", "\n", "parser", ".", "add_argument", "(", "'--high'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'high stop of the laplacian'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'dgcf'", ",", "\n", "help", "=", "'Specify the name of model .'", ")", "\n", "parser", ".", "add_argument", "(", "'--adj_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'laplacian_no_eye'", ",", "\n", "help", "=", "'Specify the type of the adjacency (laplacian) matrix from {plain, laplacian, laplacian_no_eye}.'", ")", "\n", "parser", ".", "add_argument", "(", "'--alg_type'", ",", "nargs", "=", "'?'", ",", "default", "=", "'dgcf'", ",", "\n", "help", "=", "'Specify the type of the graph convolutional layer from {ngcf, gcn, gcmc}.'", ")", "\n", "parser", ".", "add_argument", "(", "'--interaction'", ",", "nargs", "=", "'?'", ",", "default", "=", "'deprecated'", ",", "\n", "help", "=", "'Specify the type of the interaction'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'0 for NAIS_prod, 1 for NAIS_concat'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--node_dropout_flag'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'0: Disable node dropout, 1: Activate node dropout'", ")", "\n", "parser", ".", "add_argument", "(", "'--node_dropout'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[0.1]'", ",", "\n", "help", "=", "'Keep probability w.r.t. node dropout (i.e., 1-dropout_ratio) for each deep layer. 1: no dropout.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mess_dropout'", ",", "nargs", "=", "'?'", ",", "default", "=", "'[0.1]'", ",", "\n", "help", "=", "'Keep probability w.r.t. message dropout (i.e., 1-dropout_ratio) for each deep layer. 1: no dropout.'", ")", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.helper.txt2list": [[9, 13], ["open", "open.readlines"], "function", ["None"], ["def", "txt2list", "(", "file_src", ")", ":", "\n", "    ", "orig_file", "=", "open", "(", "file_src", ",", "\"r\"", ")", "\n", "lines", "=", "orig_file", ".", "readlines", "(", ")", "\n", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.helper.ensureDir": [[14, 18], ["os.path.dirname", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "ensureDir", "(", "dir_path", ")", ":", "\n", "    ", "d", "=", "os", ".", "path", ".", "dirname", "(", "dir_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.helper.uni2str": [[19, 21], ["str().replace().strip", "str().replace", "str", "unicode_str.encode"], "function", ["None"], ["", "", "def", "uni2str", "(", "unicode_str", ")", ":", "\n", "    ", "return", "str", "(", "unicode_str", ".", "encode", "(", "'ascii'", ",", "'ignore'", ")", ")", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.helper.hasNumbers": [[22, 24], ["bool", "re.search"], "function", ["None"], ["", "def", "hasNumbers", "(", "inputString", ")", ":", "\n", "    ", "return", "bool", "(", "re", ".", "search", "(", "r'\\d'", ",", "inputString", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.helper.delMultiChar": [[25, 29], ["inputString.replace.replace"], "function", ["None"], ["", "def", "delMultiChar", "(", "inputString", ",", "chars", ")", ":", "\n", "    ", "for", "ch", "in", "chars", ":", "\n", "        ", "inputString", "=", "inputString", ".", "replace", "(", "ch", ",", "''", ")", "\n", "", "return", "inputString", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.helper.merge_two_dicts": [[30, 34], ["x.copy", "x.copy.update"], "function", ["None"], ["", "def", "merge_two_dicts", "(", "x", ",", "y", ")", ":", "\n", "    ", "z", "=", "x", ".", "copy", "(", ")", "# start with x's keys and values", "\n", "z", ".", "update", "(", "y", ")", "# modifies z with y's keys and values & returns None", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.helper.early_stopping": [[35, 51], ["print"], "function", ["None"], ["", "def", "early_stopping", "(", "log_value", ",", "best_value", ",", "stopping_step", ",", "expected_order", "=", "'acc'", ",", "flag_step", "=", "100", ")", ":", "\n", "# early stopping strategy:", "\n", "    ", "assert", "expected_order", "in", "[", "'acc'", ",", "'dec'", "]", "\n", "\n", "if", "(", "expected_order", "==", "'acc'", "and", "log_value", ">=", "best_value", ")", "or", "(", "expected_order", "==", "'dec'", "and", "log_value", "<=", "best_value", ")", ":", "\n", "        ", "stopping_step", "=", "0", "\n", "best_value", "=", "log_value", "\n", "", "else", ":", "\n", "        ", "stopping_step", "+=", "1", "\n", "\n", "", "if", "stopping_step", ">=", "flag_step", ":", "\n", "        ", "print", "(", "\"Early stopping is trigger at step: {} log:{}\"", ".", "format", "(", "flag_step", ",", "log_value", ")", ")", "\n", "should_stop", "=", "True", "\n", "", "else", ":", "\n", "        ", "should_stop", "=", "False", "\n", "", "return", "best_value", ",", "stopping_step", ",", "should_stop", "\n", "", ""]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.ranklist_by_heapq": [[23, 39], ["max", "heapq.nlargest", "r.append", "r.append"], "function", ["None"], ["    ", "item_score", "=", "{", "}", "\n", "for", "i", "in", "test_items", ":", "\n", "        ", "item_score", "[", "i", "]", "=", "rating", "[", "i", "]", "\n", "\n", "", "K_max", "=", "max", "(", "Ks", ")", "\n", "K_max_item_score", "=", "heapq", ".", "nlargest", "(", "K_max", ",", "item_score", ",", "key", "=", "item_score", ".", "get", ")", "\n", "\n", "r", "=", "[", "]", "\n", "for", "i", "in", "K_max_item_score", ":", "\n", "        ", "if", "i", "in", "user_pos_test", ":", "\n", "            ", "r", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "r", ".", "append", "(", "0", ")", "\n", "", "", "auc", "=", "0.", "\n", "return", "r", ",", "auc", "\n", "\n", "", "def", "get_auc", "(", "item_score", ",", "user_pos_test", ")", ":", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.get_auc": [[40, 54], ["sorted", "sorted.reverse", "utility.auc", "sorted.items", "r.append", "r.append"], "function", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.auc"], ["    ", "item_score", "=", "sorted", "(", "item_score", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", "\n", "item_score", ".", "reverse", "(", ")", "\n", "item_sort", "=", "[", "x", "[", "0", "]", "for", "x", "in", "item_score", "]", "\n", "posterior", "=", "[", "x", "[", "1", "]", "for", "x", "in", "item_score", "]", "\n", "\n", "r", "=", "[", "]", "\n", "for", "i", "in", "item_sort", ":", "\n", "        ", "if", "i", "in", "user_pos_test", ":", "\n", "            ", "r", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "r", ".", "append", "(", "0", ")", "\n", "", "", "auc", "=", "metrics", ".", "auc", "(", "ground_truth", "=", "r", ",", "prediction", "=", "posterior", ")", "\n", "return", "auc", "\n", "\n", "", "def", "ranklist_by_sorted", "(", "user_pos_test", ",", "test_items", ",", "rating", ",", "Ks", ")", ":", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.ranklist_by_sorted": [[55, 71], ["max", "heapq.nlargest", "batch_test.get_auc", "r.append", "r.append"], "function", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.get_auc"], ["    ", "item_score", "=", "{", "}", "\n", "for", "i", "in", "test_items", ":", "\n", "        ", "item_score", "[", "i", "]", "=", "rating", "[", "i", "]", "\n", "\n", "", "K_max", "=", "max", "(", "Ks", ")", "\n", "K_max_item_score", "=", "heapq", ".", "nlargest", "(", "K_max", ",", "item_score", ",", "key", "=", "item_score", ".", "get", ")", "\n", "\n", "r", "=", "[", "]", "\n", "for", "i", "in", "K_max_item_score", ":", "\n", "        ", "if", "i", "in", "user_pos_test", ":", "\n", "            ", "r", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "r", ".", "append", "(", "0", ")", "\n", "", "", "auc", "=", "get_auc", "(", "item_score", ",", "user_pos_test", ")", "\n", "return", "r", ",", "auc", "\n", "\n", "", "def", "get_performance", "(", "user_pos_test", ",", "r", ",", "auc", ",", "Ks", ")", ":", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.get_performance": [[72, 83], ["precision.append", "recall.append", "ndcg.append", "hit_ratio.append", "np.array", "np.array", "np.array", "np.array", "utility.precision_at_k", "utility.recall_at_k", "utility.ndcg_at_k", "utility.hit_at_k", "len", "len"], "function", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.precision_at_k", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.recall_at_k", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.ndcg_at_k", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.metrics.hit_at_k"], ["    ", "precision", ",", "recall", ",", "ndcg", ",", "hit_ratio", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "K", "in", "Ks", ":", "\n", "        ", "precision", ".", "append", "(", "metrics", ".", "precision_at_k", "(", "r", ",", "K", ")", ")", "\n", "recall", ".", "append", "(", "metrics", ".", "recall_at_k", "(", "r", ",", "K", ",", "len", "(", "user_pos_test", ")", ")", ")", "\n", "ndcg", ".", "append", "(", "metrics", ".", "ndcg_at_k", "(", "r", ",", "K", ",", "len", "(", "user_pos_test", ")", ")", ")", "\n", "hit_ratio", ".", "append", "(", "metrics", ".", "hit_at_k", "(", "r", ",", "K", ")", ")", "\n", "\n", "", "return", "{", "'recall'", ":", "np", ".", "array", "(", "recall", ")", ",", "'precision'", ":", "np", ".", "array", "(", "precision", ")", ",", "\n", "'ndcg'", ":", "np", ".", "array", "(", "ndcg", ")", ",", "'hit_ratio'", ":", "np", ".", "array", "(", "hit_ratio", ")", ",", "'auc'", ":", "auc", "}", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.test_one_user": [[109, 133], ["set", "list", "batch_test.get_performance", "range", "batch_test.ranklist_by_heapq", "batch_test.ranklist_by_sorted", "set"], "function", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.get_performance", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.ranklist_by_heapq", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.ranklist_by_sorted"], ["# user u's ratings for user u", "\n", "    ", "rating", "=", "x", "[", "0", "]", "\n", "#uid", "\n", "u", "=", "x", "[", "1", "]", "\n", "#user u's items in the training set", "\n", "try", ":", "\n", "        ", "training_items", "=", "data_generator", ".", "train_items", "[", "u", "]", "\n", "", "except", "Exception", ":", "\n", "        ", "training_items", "=", "[", "]", "\n", "#user u's items in the test set", "\n", "", "user_pos_valid", "=", "data_generator", ".", "valid_set", "[", "u", "]", "\n", "\n", "all_items", "=", "set", "(", "range", "(", "ITEM_NUM", ")", ")", "\n", "\n", "valid_items", "=", "list", "(", "all_items", "-", "set", "(", "training_items", ")", ")", "\n", "\n", "if", "args", ".", "test_flag", "==", "'part'", ":", "\n", "        ", "r", ",", "auc", "=", "ranklist_by_heapq", "(", "user_pos_valid", ",", "valid_items", ",", "rating", ",", "Ks", ")", "\n", "", "else", ":", "\n", "        ", "r", ",", "auc", "=", "ranklist_by_sorted", "(", "user_pos_valid", ",", "valid_items", ",", "rating", ",", "Ks", ")", "\n", "\n", "", "return", "get_performance", "(", "user_pos_valid", ",", "r", ",", "auc", ",", "Ks", ")", "\n", "\n", "\n", "", "def", "test", "(", "sess", ",", "model", ",", "users_to_test", ",", "drop_flag", "=", "False", ",", "batch_test_flag", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.valid_one_user": [[85, 108], ["set", "list", "batch_test.get_performance", "range", "batch_test.ranklist_by_heapq", "batch_test.ranklist_by_sorted", "set"], "function", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.get_performance", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.ranklist_by_heapq", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.ranklist_by_sorted"], ["# user u's ratings for user u", "\n", "    ", "rating", "=", "x", "[", "0", "]", "\n", "#uid", "\n", "u", "=", "x", "[", "1", "]", "\n", "#user u's items in the training set", "\n", "try", ":", "\n", "        ", "training_items", "=", "data_generator", ".", "train_items", "[", "u", "]", "\n", "", "except", "Exception", ":", "\n", "        ", "training_items", "=", "[", "]", "\n", "#user u's items in the test set", "\n", "", "user_pos_test", "=", "data_generator", ".", "test_set", "[", "u", "]", "\n", "\n", "all_items", "=", "set", "(", "range", "(", "ITEM_NUM", ")", ")", "\n", "\n", "test_items", "=", "list", "(", "all_items", "-", "set", "(", "training_items", ")", ")", "\n", "\n", "if", "args", ".", "test_flag", "==", "'part'", ":", "\n", "        ", "r", ",", "auc", "=", "ranklist_by_heapq", "(", "user_pos_test", ",", "test_items", ",", "rating", ",", "Ks", ")", "\n", "", "else", ":", "\n", "        ", "r", ",", "auc", "=", "ranklist_by_sorted", "(", "user_pos_test", ",", "test_items", ",", "rating", ",", "Ks", ")", "\n", "\n", "", "return", "get_performance", "(", "user_pos_test", ",", "r", ",", "auc", ",", "Ks", ")", "\n", "\n", "", "def", "valid_one_user", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.test": [[135, 212], ["multiprocessing.Pool", "len", "range", "multiprocessing.Pool.close", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "zip", "len", "len", "len", "len", "len", "np.zeros", "range", "range", "multiprocessing.Pool.map", "multiprocessing.Pool.map", "min", "range", "sess.run", "sess.run", "sess.run", "sess.run", "len", "len", "len", "len", "len", "eval", "eval", "eval", "eval"], "function", ["None"], ["'hit_ratio'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "'auc'", ":", "0.", "}", "\n", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "cores", ")", "\n", "\n", "u_batch_size", "=", "BATCH_SIZE", "*", "2", "\n", "i_batch_size", "=", "BATCH_SIZE", "\n", "\n", "test_users", "=", "users_to_test", "\n", "n_test_users", "=", "len", "(", "test_users", ")", "\n", "n_user_batchs", "=", "n_test_users", "//", "u_batch_size", "+", "1", "\n", "\n", "count", "=", "0", "\n", "\n", "for", "u_batch_id", "in", "range", "(", "n_user_batchs", ")", ":", "\n", "        ", "start", "=", "u_batch_id", "*", "u_batch_size", "\n", "end", "=", "(", "u_batch_id", "+", "1", ")", "*", "u_batch_size", "\n", "\n", "user_batch", "=", "test_users", "[", "start", ":", "end", "]", "\n", "\n", "if", "batch_test_flag", ":", "\n", "\n", "            ", "n_item_batchs", "=", "ITEM_NUM", "//", "i_batch_size", "+", "1", "\n", "rate_batch", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "user_batch", ")", ",", "ITEM_NUM", ")", ")", "\n", "\n", "i_count", "=", "0", "\n", "for", "i_batch_id", "in", "range", "(", "n_item_batchs", ")", ":", "\n", "                ", "i_start", "=", "i_batch_id", "*", "i_batch_size", "\n", "i_end", "=", "min", "(", "(", "i_batch_id", "+", "1", ")", "*", "i_batch_size", ",", "ITEM_NUM", ")", "\n", "\n", "item_batch", "=", "range", "(", "i_start", ",", "i_end", ")", "\n", "\n", "if", "drop_flag", "==", "False", ":", "\n", "                    ", "i_rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "else", ":", "\n", "                    ", "i_rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", ",", "\n", "model", ".", "node_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", ",", "\n", "model", ".", "mess_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", "}", ")", "\n", "", "rate_batch", "[", ":", ",", "i_start", ":", "i_end", "]", "=", "i_rate_batch", "\n", "i_count", "+=", "i_rate_batch", ".", "shape", "[", "1", "]", "\n", "\n", "", "assert", "i_count", "==", "ITEM_NUM", "\n", "\n", "", "else", ":", "\n", "            ", "item_batch", "=", "range", "(", "ITEM_NUM", ")", "\n", "\n", "if", "drop_flag", "==", "False", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "else", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", ",", "\n", "model", ".", "node_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", ",", "\n", "model", ".", "mess_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", "}", ")", "\n", "\n", "", "", "user_batch_rating_uid", "=", "zip", "(", "rate_batch", ",", "user_batch", ")", "\n", "batch_result", "=", "pool", ".", "map", "(", "test_one_user", ",", "user_batch_rating_uid", ")", "\n", "count", "+=", "len", "(", "batch_result", ")", "\n", "\n", "for", "re", "in", "batch_result", ":", "\n", "            ", "result", "[", "'precision'", "]", "+=", "re", "[", "'precision'", "]", "/", "n_test_users", "\n", "result", "[", "'recall'", "]", "+=", "re", "[", "'recall'", "]", "/", "n_test_users", "\n", "result", "[", "'ndcg'", "]", "+=", "re", "[", "'ndcg'", "]", "/", "n_test_users", "\n", "result", "[", "'hit_ratio'", "]", "+=", "re", "[", "'hit_ratio'", "]", "/", "n_test_users", "\n", "result", "[", "'auc'", "]", "+=", "re", "[", "'auc'", "]", "/", "n_test_users", "\n", "\n", "\n", "", "", "assert", "count", "==", "n_test_users", "\n", "pool", ".", "close", "(", ")", "\n", "return", "result", "\n", "\n", "", "def", "validate", "(", "sess", ",", "model", ",", "users_to_valid", ",", "drop_flag", "=", "False", ",", "batch_test_flag", "=", "False", ")", ":", "\n", "    ", "result", "=", "{", "'precision'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "'recall'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "'ndcg'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "'hit_ratio'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "'auc'", ":", "0.", "}", "\n", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "cores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.batch_test.validate": [[207, 280], ["multiprocessing.Pool", "len", "range", "multiprocessing.Pool.close", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "zip", "multiprocessing.Pool.map", "len", "len", "len", "len", "len", "np.zeros", "range", "range", "min", "range", "sess.run", "sess.run", "sess.run", "sess.run", "len", "len", "len", "len", "len", "eval", "eval", "eval", "eval"], "function", ["None"], ["", "def", "validate", "(", "sess", ",", "model", ",", "users_to_valid", ",", "drop_flag", "=", "False", ",", "batch_test_flag", "=", "False", ")", ":", "\n", "    ", "result", "=", "{", "'precision'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "'recall'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "'ndcg'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "\n", "'hit_ratio'", ":", "np", ".", "zeros", "(", "len", "(", "Ks", ")", ")", ",", "'auc'", ":", "0.", "}", "\n", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "cores", ")", "\n", "\n", "u_batch_size", "=", "BATCH_SIZE", "*", "2", "\n", "i_batch_size", "=", "BATCH_SIZE", "\n", "\n", "valid_users", "=", "users_to_valid", "\n", "n_valid_users", "=", "len", "(", "valid_users", ")", "\n", "n_user_batchs", "=", "n_valid_users", "//", "u_batch_size", "+", "1", "\n", "\n", "count", "=", "0", "\n", "\n", "for", "u_batch_id", "in", "range", "(", "n_user_batchs", ")", ":", "\n", "        ", "start", "=", "u_batch_id", "*", "u_batch_size", "\n", "end", "=", "(", "u_batch_id", "+", "1", ")", "*", "u_batch_size", "\n", "\n", "user_batch", "=", "valid_users", "[", "start", ":", "end", "]", "\n", "\n", "if", "batch_test_flag", ":", "\n", "\n", "            ", "n_item_batchs", "=", "ITEM_NUM", "//", "i_batch_size", "+", "1", "\n", "rate_batch", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "user_batch", ")", ",", "ITEM_NUM", ")", ")", "\n", "\n", "i_count", "=", "0", "\n", "for", "i_batch_id", "in", "range", "(", "n_item_batchs", ")", ":", "\n", "                ", "i_start", "=", "i_batch_id", "*", "i_batch_size", "\n", "i_end", "=", "min", "(", "(", "i_batch_id", "+", "1", ")", "*", "i_batch_size", ",", "ITEM_NUM", ")", "\n", "\n", "item_batch", "=", "range", "(", "i_start", ",", "i_end", ")", "\n", "\n", "if", "drop_flag", "==", "False", ":", "\n", "                    ", "i_rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "else", ":", "\n", "                    ", "i_rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", ",", "\n", "model", ".", "node_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", ",", "\n", "model", ".", "mess_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", "}", ")", "\n", "", "rate_batch", "[", ":", ",", "i_start", ":", "i_end", "]", "=", "i_rate_batch", "\n", "i_count", "+=", "i_rate_batch", ".", "shape", "[", "1", "]", "\n", "\n", "", "assert", "i_count", "==", "ITEM_NUM", "\n", "\n", "", "else", ":", "\n", "            ", "item_batch", "=", "range", "(", "ITEM_NUM", ")", "\n", "\n", "if", "drop_flag", "==", "False", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", "}", ")", "\n", "", "else", ":", "\n", "                ", "rate_batch", "=", "sess", ".", "run", "(", "model", ".", "batch_ratings", ",", "{", "model", ".", "users", ":", "user_batch", ",", "\n", "model", ".", "pos_items", ":", "item_batch", ",", "\n", "model", ".", "node_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", ",", "\n", "model", ".", "mess_dropout", ":", "[", "0.", "]", "*", "len", "(", "eval", "(", "args", ".", "layer_size", ")", ")", "}", ")", "\n", "\n", "", "", "user_batch_rating_uid", "=", "zip", "(", "rate_batch", ",", "user_batch", ")", "\n", "batch_result", "=", "pool", ".", "map", "(", "valid_one_user", ",", "user_batch_rating_uid", ")", "\n", "count", "+=", "len", "(", "batch_result", ")", "\n", "\n", "for", "re", "in", "batch_result", ":", "\n", "            ", "result", "[", "'precision'", "]", "+=", "re", "[", "'precision'", "]", "/", "n_valid_users", "\n", "result", "[", "'recall'", "]", "+=", "re", "[", "'recall'", "]", "/", "n_valid_users", "\n", "result", "[", "'ndcg'", "]", "+=", "re", "[", "'ndcg'", "]", "/", "n_valid_users", "\n", "result", "[", "'hit_ratio'", "]", "+=", "re", "[", "'hit_ratio'", "]", "/", "n_valid_users", "\n", "result", "[", "'auc'", "]", "+=", "re", "[", "'auc'", "]", "/", "n_valid_users", "\n", "\n", "\n", "", "", "assert", "count", "==", "n_valid_users", "\n", "pool", ".", "close", "(", ")", "\n", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.load_org": [[30, 118], ["load_data.Data.print_statistics", "scipy.dok_matrix", "open", "f.readlines", "open", "f.readlines", "open", "f.readlines", "open", "open", "len", "l.strip.strip.strip().split", "int", "load_data.Data.exist_users.append", "max", "max", "len", "len", "l.strip.strip.strip", "max", "len", "len", "l.strip.strip.strip", "max", "len", "open", "f_train.readlines", "f_valid.readlines", "f_test.readlines", "int", "max", "max", "max", "l.strip.strip.strip", "l.strip.strip.strip", "l.strip.strip.strip", "l.strip.strip.strip", "int", "int", "len", "int", "len", "len", "l.strip.strip.split", "int", "int", "l.strip.strip.split", "l.strip.strip.split", "l.strip.strip.split", "l.strip.strip.split"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.print_statistics"], ["#         test_file = self.path + '/sparsity_fold_1.txt'", "\n", "#         test_file = self.path + '/sparsity_fold_2.txt'", "\n", "#         test_file = self.path + '/sparsity_fold_3.txt'", "\n", "#         test_file = self.path + '/sparsity_fold_4.txt'", "\n", "\n", "\n", "with", "open", "(", "train_file", ")", "as", "f", ":", "\n", "            ", "for", "l", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                    ", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", "[", "1", ":", "]", "]", "\n", "uid", "=", "int", "(", "l", "[", "0", "]", ")", "\n", "self", ".", "exist_users", ".", "append", "(", "uid", ")", "\n", "self", ".", "n_items", "=", "max", "(", "self", ".", "n_items", ",", "max", "(", "items", ")", ")", "\n", "self", ".", "n_users", "=", "max", "(", "self", ".", "n_users", ",", "uid", ")", "\n", "self", ".", "n_train", "+=", "len", "(", "items", ")", "\n", "\n", "", "", "", "with", "open", "(", "valid_file", ")", "as", "f", ":", "\n", "            ", "for", "l", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                    ", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", "\n", "try", ":", "\n", "                        ", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "]", "\n", "", "except", "Exception", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "n_items", "=", "max", "(", "self", ".", "n_items", ",", "max", "(", "items", ")", ")", "\n", "self", ".", "n_valid", "+=", "len", "(", "items", ")", "\n", "\n", "", "", "", "with", "open", "(", "test_file", ")", "as", "f", ":", "\n", "            ", "for", "l", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "if", "len", "(", "l", ")", ">", "0", ":", "\n", "                    ", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", "\n", "try", ":", "\n", "                        ", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", "' '", ")", "[", "1", ":", "]", "]", "\n", "", "except", "Exception", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "n_items", "=", "max", "(", "self", ".", "n_items", ",", "max", "(", "items", ")", ")", "\n", "self", ".", "n_test", "+=", "len", "(", "items", ")", "\n", "", "", "", "self", ".", "n_items", "+=", "1", "\n", "self", ".", "n_users", "+=", "1", "\n", "\n", "self", ".", "print_statistics", "(", ")", "\n", "\n", "self", ".", "R", "=", "sp", ".", "dok_matrix", "(", "(", "self", ".", "n_users", ",", "self", ".", "n_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "self", ".", "train_items", ",", "self", ".", "valid_set", ",", "self", ".", "test_set", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "with", "open", "(", "train_file", ")", "as", "f_train", ":", "\n", "            ", "with", "open", "(", "valid_file", ")", "as", "f_valid", ":", "\n", "                ", "with", "open", "(", "test_file", ")", "as", "f_test", ":", "\n", "                    ", "for", "l", "in", "f_train", ".", "readlines", "(", ")", ":", "\n", "                        ", "if", "len", "(", "l", ")", "==", "0", ":", "break", "\n", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", "\n", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", "' '", ")", "]", "\n", "uid", ",", "train_items", "=", "items", "[", "0", "]", ",", "items", "[", "1", ":", "]", "\n", "\n", "for", "i", "in", "train_items", ":", "\n", "                            ", "self", ".", "R", "[", "uid", ",", "i", "]", "=", "1.", "\n", "# self.R[uid][i] = 1", "\n", "\n", "", "self", ".", "train_items", "[", "uid", "]", "=", "train_items", "\n", "# print('train',len(self.train_items[uid]))", "\n", "\n", "", "for", "l", "in", "f_valid", ".", "readlines", "(", ")", ":", "\n", "                        ", "if", "len", "(", "l", ")", "==", "0", ":", "break", "\n", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", "\n", "try", ":", "\n", "                            ", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", "' '", ")", "]", "\n", "", "except", "Exception", ":", "\n", "                            ", "continue", "\n", "", "uid", ",", "valid_items", "=", "items", "[", "0", "]", ",", "items", "[", "1", ":", "]", "\n", "self", ".", "valid_set", "[", "uid", "]", "=", "valid_items", "\n", "\n", "", "for", "l", "in", "f_test", ".", "readlines", "(", ")", ":", "\n", "                        ", "if", "len", "(", "l", ")", "==", "0", ":", "break", "\n", "l", "=", "l", ".", "strip", "(", "'\\n'", ")", "\n", "try", ":", "\n", "                            ", "items", "=", "[", "int", "(", "i", ")", "for", "i", "in", "l", ".", "split", "(", "' '", ")", "]", "\n", "", "except", "Exception", ":", "\n", "                            ", "continue", "\n", "\n", "", "uid", ",", "test_items", "=", "items", "[", "0", "]", ",", "items", "[", "1", ":", "]", "\n", "self", ".", "test_set", "[", "uid", "]", "=", "test_items", "\n", "\n", "\n", "", "", "", "", "", "def", "get_adj_mat", "(", "self", ",", "low", "=", "0.00006", ",", "high", "=", "1.0", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "t1", "=", "time", "(", ")", "\n", "adj_mat", "=", "sp", ".", "load_npz", "(", "self", ".", "path", "+", "'/s_adj_mat.npz'", ")", "\n", "norm_adj_mat", "=", "sp", ".", "load_npz", "(", "self", ".", "path", "+", "'/s_laplacian_adj_mat.npz'", ")", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.utility.load_data.Data.map_data": [[119, 140], ["list", "numpy.array", "len", "set", "list", "enumerate", "map", "sorted"], "methods", ["None"], ["norm_adj_mat_noeye", "=", "sp", ".", "load_npz", "(", "self", ".", "path", "+", "'/s_laplacian_adj_mat_noeye.npz'", ")", "\n", "# filter_cross_adj_mat = sp.load_npz(self.path+ '/s_filter_lap_cross_adj_mat.npz')", "\n", "cross_file_name", "=", "self", ".", "path", "+", "'/s_band_cross_adj_mat'", "+", "str", "(", "low", ")", "+", "'_'", "+", "str", "(", "high", ")", "+", "'.npz'", "\n", "band_cross_adj_mat", "=", "sp", ".", "load_npz", "(", "cross_file_name", ")", "\n", "# log_filter_cross_adj_mat = sp.load_npz(self.path+ '/s_log_filter_lap_cross_adj_mat.npz')", "\n", "print", "(", "'already load adj matrix'", ",", "adj_mat", ".", "shape", ",", "time", "(", ")", "-", "t1", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "adj_mat", ",", "norm_adj_mat", ",", "norm_adj_mat_noeye", ",", "band_cross_adj_mat", "=", "self", ".", "create_adj_mat", "(", "low", "=", "low", ",", "high", "=", "high", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_adj_mat.npz'", ",", "adj_mat", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_laplacian_adj_mat.npz'", ",", "norm_adj_mat", ")", "\n", "sp", ".", "save_npz", "(", "self", ".", "path", "+", "'/s_laplacian_adj_mat_noeye.npz'", ",", "norm_adj_mat_noeye", ")", "\n", "# sp.save_npz(self.path + '/s_filter_lap_cross_adj_mat.npz', filter_cross_adj_mat)", "\n", "cross_file_name", "=", "self", ".", "path", "+", "'/s_band_cross_adj_mat'", "+", "str", "(", "low", ")", "+", "'_'", "+", "str", "(", "high", ")", "+", "'.npz'", "\n", "sp", ".", "save_npz", "(", "cross_file_name", ",", "band_cross_adj_mat", ")", "\n", "# sp.save_npz(self.path + '/s_log_filter_lap_cross_adj_mat.npz', filter_cross_adj_mat)", "\n", "print", "(", "'already saving the generated adj matices'", ")", "\n", "", "return", "adj_mat", ",", "norm_adj_mat", ",", "norm_adj_mat_noeye", ",", "band_cross_adj_mat", "\n", "\n", "", "def", "create_adj_mat", "(", "self", ",", "low", "=", "0.0075", ",", "high", "=", "0.02", ")", ":", "\n", "        ", "t1", "=", "time", "(", ")", "\n", "adj_mat", "=", "sp", ".", "dok_matrix", "(", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ",", "self", ".", "n_users", "+", "self", ".", "n_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "adj_mat", "=", "adj_mat", ".", "tolil", "(", ")", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN.__init__": [[46, 151], ["lightGCN.LightGCN.norm_adj.count_nonzero", "eval", "len", "eval", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "lightGCN.LightGCN._init_weights", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "lightGCN.LightGCN.create_bpr_loss", "tensorflow.train.AdamOptimizer().minimize", "lightGCN.LightGCN._create_ngcf_embed", "lightGCN.LightGCN._create_lightgcn_embed", "tensorflow.train.AdamOptimizer", "lightGCN.LightGCN._create_gcn_embed", "lightGCN.LightGCN._create_gcmc_embed", "lightGCN.LightGCN._create_gcn_single_embed"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.BPRMF.BPRMF._init_weights", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.BPRMF.BPRMF.create_bpr_loss", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._create_ngcf_embed", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._create_lightgcn_embed", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._create_gcn_embed", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._create_gcmc_embed", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._create_gcn_single_embed"], ["    ", "def", "__init__", "(", "self", ",", "data_config", ",", "pretrain_data", ")", ":", "\n", "# argument settings", "\n", "        ", "self", ".", "model_type", "=", "'lightgcn'", "\n", "self", ".", "adj_type", "=", "args", ".", "adj_type", "\n", "self", ".", "alg_type", "=", "args", ".", "alg_type", "\n", "\n", "self", ".", "pretrain_data", "=", "pretrain_data", "\n", "\n", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "\n", "self", ".", "n_fold", "=", "100", "\n", "\n", "self", ".", "norm_adj", "=", "data_config", "[", "'norm_adj'", "]", "\n", "self", ".", "n_nonzero_elems", "=", "self", ".", "norm_adj", ".", "count_nonzero", "(", ")", "\n", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "self", ".", "weight_size", "=", "eval", "(", "args", ".", "layer_size", ")", "\n", "self", ".", "n_layers", "=", "len", "(", "self", ".", "weight_size", ")", "\n", "\n", "self", ".", "model_type", "+=", "'_%s_%s_l%d'", "%", "(", "self", ".", "adj_type", ",", "self", ".", "alg_type", ",", "self", ".", "n_layers", ")", "\n", "\n", "self", ".", "regs", "=", "eval", "(", "args", ".", "regs", ")", "\n", "self", ".", "decay", "=", "self", ".", "regs", "[", "0", "]", "\n", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "\n", "\n", "'''\n        *********************************************************\n        Create Placeholder for Input Data & Dropout.\n        '''", "\n", "# placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "# dropout: node dropout (adopted on the ego-networks);", "\n", "#          ... since the usage of node dropout have higher computational cost,", "\n", "#          ... please use the 'node_dropout_flag' to indicate whether use such technique.", "\n", "#          message dropout (adopted on the convolution operations).", "\n", "self", ".", "node_dropout_flag", "=", "args", ".", "node_dropout_flag", "\n", "self", ".", "node_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "mess_dropout", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", "]", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Create Model Parameters (i.e., Initialize Weights).\n        \"\"\"", "\n", "# initialization of model parameters", "\n", "self", ".", "weights", "=", "self", ".", "_init_weights", "(", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Compute Graph-based Representations of all users & items via Message-Passing Mechanism of Graph Neural Networks.\n        Different Convolutional Layers:\n            1. ngcf: defined in 'Neural Graph Collaborative Filtering', SIGIR2019;\n            2. gcn:  defined in 'Semi-Supervised Classification with Graph Convolutional Networks', ICLR2018;\n            3. gcmc: defined in 'Graph Convolutional Matrix Completion', KDD2018;\n        \"\"\"", "\n", "if", "self", ".", "alg_type", "in", "[", "'ngcf'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_ngcf_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'lightgcn'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_lightgcn_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'gcn'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_gcn_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'gcmc'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_gcmc_embed", "(", ")", "\n", "\n", "", "elif", "self", ".", "alg_type", "in", "[", "'gcnsingle'", "]", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "=", "self", ".", "_create_gcn_single_embed", "(", ")", "\n", "\n", "", "\"\"\"\n        *********************************************************\n        Establish the final representations for user-item pairs in batch.\n        \"\"\"", "\n", "self", ".", "u_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ua_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_g_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings", ",", "self", ".", "neg_items", ")", "\n", "self", ".", "u_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_g_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "neg_items", ")", "\n", "\"\"\"\n        *********************************************************\n        Inference for the testing phase.\n        \"\"\"", "\n", "self", ".", "batch_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_g_embeddings", ",", "self", ".", "pos_i_g_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "\"\"\"\n        *********************************************************\n        Generate Predictions & Optimize via BPR loss.\n        \"\"\"", "\n", "self", ".", "mf_loss", ",", "self", ".", "emb_loss", ",", "self", ".", "reg_loss", "=", "self", ".", "create_bpr_loss", "(", "self", ".", "u_g_embeddings", ",", "\n", "self", ".", "pos_i_g_embeddings", ",", "\n", "self", ".", "neg_i_g_embeddings", ")", "\n", "self", ".", "loss", "=", "self", ".", "mf_loss", "+", "self", ".", "emb_loss", "+", "self", ".", "reg_loss", "\n", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._init_weights": [[152, 192], ["dict", "tensorflow.contrib.layers.xavier_initializer", "range", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.Variable", "print", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer."], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "all_weights", "=", "dict", "(", ")", "\n", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "if", "self", ".", "pretrain_data", "is", "None", ":", "\n", "\n", "# print('=====================================No pretrain')", "\n", "            ", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "\n", "name", "=", "'user_embedding'", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "\n", "name", "=", "'item_embedding'", ")", "\n", "print", "(", "'using xavier initialization'", ")", "\n", "", "else", ":", "\n", "# print('=====================================non trainable')", "\n", "            ", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'user_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'user_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initial_value", "=", "self", ".", "pretrain_data", "[", "'item_embed'", "]", ",", "trainable", "=", "True", ",", "\n", "name", "=", "'item_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "print", "(", "'using pretrained initialization'", ")", "\n", "\n", "", "self", ".", "weight_size_list", "=", "[", "self", ".", "emb_dim", "]", "+", "self", ".", "weight_size", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "all_weights", "[", "'W_gc_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_gc_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_gc_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_gc_%d'", "%", "k", ")", "\n", "\n", "all_weights", "[", "'W_bi_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_bi_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_bi_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_bi_%d'", "%", "k", ")", "\n", "\n", "all_weights", "[", "'W_mlp_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "weight_size_list", "[", "k", "]", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_mlp_%d'", "%", "k", ")", "\n", "all_weights", "[", "'b_mlp_%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'b_mlp_%d'", "%", "k", ")", "\n", "\n", "", "return", "all_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat": [[193, 206], ["range", "A_fold_hat.append", "lightGCN.LightGCN._convert_sp_mat_to_sp_tensor"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._convert_sp_mat_to_sp_tensor"], ["", "def", "_split_A_hat", "(", "self", ",", "X", ")", ":", "\n", "        ", "A_fold_hat", "=", "[", "]", "\n", "\n", "fold_len", "=", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ")", "//", "self", ".", "n_fold", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_users", "+", "self", ".", "n_items", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "\n", "", "A_fold_hat", ".", "append", "(", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "X", "[", "start", ":", "end", "]", ")", ")", "\n", "", "return", "A_fold_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat_node_dropout": [[207, 224], ["range", "lightGCN.LightGCN._convert_sp_mat_to_sp_tensor", "X[].count_nonzero", "A_fold_hat.append", "lightGCN.LightGCN._dropout_sparse"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._convert_sp_mat_to_sp_tensor", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._dropout_sparse"], ["", "def", "_split_A_hat_node_dropout", "(", "self", ",", "X", ")", ":", "\n", "        ", "A_fold_hat", "=", "[", "]", "\n", "\n", "fold_len", "=", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ")", "//", "self", ".", "n_fold", "\n", "for", "i_fold", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "            ", "start", "=", "i_fold", "*", "fold_len", "\n", "if", "i_fold", "==", "self", ".", "n_fold", "-", "1", ":", "\n", "                ", "end", "=", "self", ".", "n_users", "+", "self", ".", "n_items", "\n", "", "else", ":", "\n", "                ", "end", "=", "(", "i_fold", "+", "1", ")", "*", "fold_len", "\n", "\n", "# A_fold_hat.append(self._convert_sp_mat_to_sp_tensor(X[start:end]))", "\n", "", "temp", "=", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "X", "[", "start", ":", "end", "]", ")", "\n", "n_nonzero_temp", "=", "X", "[", "start", ":", "end", "]", ".", "count_nonzero", "(", ")", "\n", "A_fold_hat", ".", "append", "(", "self", ".", "_dropout_sparse", "(", "temp", ",", "1", "-", "self", ".", "node_dropout", "[", "0", "]", ",", "n_nonzero_temp", ")", ")", "\n", "\n", "", "return", "A_fold_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._create_gcn_single_embed": [[226, 245], ["print", "lightGCN.LightGCN._split_A_hat", "tensorflow.concat", "range", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat"], ["", "def", "_create_gcn_single_embed", "(", "self", ")", ":", "\n", "        ", "print", "(", "'single layer gcn'", ")", "\n", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "all_embeddings", "=", "[", "embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "embeddings", ")", ")", "\n", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._create_lightgcn_embed": [[247, 269], ["print", "tensorflow.concat", "range", "tensorflow.stack", "tensorflow.reduce_mean", "tensorflow.split", "lightGCN.LightGCN._split_A_hat_node_dropout", "lightGCN.LightGCN._split_A_hat", "range", "tensorflow.concat", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat_node_dropout", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat"], ["", "def", "_create_lightgcn_embed", "(", "self", ")", ":", "\n", "        ", "print", "(", "'create lightgcn'", ")", "\n", "if", "self", ".", "node_dropout_flag", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat_node_dropout", "(", "self", ".", "norm_adj", ")", "\n", "", "else", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "ego_embeddings", ")", ")", "\n", "\n", "", "side_embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "ego_embeddings", "=", "side_embeddings", "\n", "all_embeddings", "+=", "[", "ego_embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "stack", "(", "all_embeddings", ",", "1", ")", "\n", "all_embeddings", "=", "tf", ".", "reduce_mean", "(", "all_embeddings", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._create_ngcf_embed": [[271, 316], ["print", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "lightGCN.LightGCN._split_A_hat_node_dropout", "lightGCN.LightGCN._split_A_hat", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.multiply", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "tensorflow.math.l2_normalize", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat_node_dropout", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat"], ["", "def", "_create_ngcf_embed", "(", "self", ")", ":", "\n", "        ", "print", "(", "'create ngcf'", ")", "\n", "# Generate a set of adjacency sub-matrix.", "\n", "if", "self", ".", "node_dropout_flag", ":", "\n", "# node dropout.", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat_node_dropout", "(", "self", ".", "norm_adj", ")", "\n", "", "else", ":", "\n", "            ", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "\n", "", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "# print('ego_embeddings', ego_embeddings.shape, self.weights['user_embedding'].shape, self.weights['item_embedding'].shape)", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "ego_embeddings", ")", ")", "\n", "\n", "# sum messages of neighbors.", "\n", "", "side_embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "# transformed sum messages of neighbors.", "\n", "sum_embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "\n", "tf", ".", "matmul", "(", "side_embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "\n", "# bi messages of neighbors.", "\n", "bi_embeddings", "=", "tf", ".", "multiply", "(", "ego_embeddings", ",", "side_embeddings", ")", "\n", "# transformed bi messages of neighbors.", "\n", "bi_embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "\n", "tf", ".", "matmul", "(", "bi_embeddings", ",", "self", ".", "weights", "[", "'W_bi_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_bi_%d'", "%", "k", "]", ")", "\n", "\n", "# non-linear activation.", "\n", "ego_embeddings", "=", "sum_embeddings", "+", "bi_embeddings", "\n", "\n", "# message dropout.", "\n", "ego_embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "ego_embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "# normalize the distribution of embeddings.", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "ego_embeddings", ",", "axis", "=", "1", ")", "\n", "\n", "all_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._create_gcn_embed": [[317, 339], ["print", "lightGCN.LightGCN._split_A_hat", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "temp_embed.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat"], ["", "def", "_create_gcn_embed", "(", "self", ")", ":", "\n", "        ", "print", "(", "'gcn'", ")", "\n", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "all_embeddings", "=", "[", "embeddings", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "embeddings", ")", ")", "\n", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "all_embeddings", "+=", "[", "embeddings", "]", "\n", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._create_gcmc_embed": [[340, 364], ["print", "lightGCN.LightGCN._split_A_hat", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.nn.leaky_relu", "tensorflow.nn.dropout", "temp_embed.append", "tensorflow.matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._split_A_hat"], ["", "def", "_create_gcmc_embed", "(", "self", ")", ":", "\n", "        ", "print", "(", "'gcmc'", ")", "\n", "A_fold_hat", "=", "self", ".", "_split_A_hat", "(", "self", ".", "norm_adj", ")", "\n", "\n", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "all_embeddings", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "            ", "temp_embed", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "n_fold", ")", ":", "\n", "                ", "temp_embed", ".", "append", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "A_fold_hat", "[", "f", "]", ",", "embeddings", ")", ")", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "temp_embed", ",", "0", ")", "\n", "# convolutional layer.", "\n", "embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_gc_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_gc_%d'", "%", "k", "]", ")", "\n", "# dense layer.", "\n", "mlp_embeddings", "=", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "weights", "[", "'W_mlp_%d'", "%", "k", "]", ")", "+", "self", ".", "weights", "[", "'b_mlp_%d'", "%", "k", "]", "\n", "mlp_embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "mlp_embeddings", ",", "1", "-", "self", ".", "mess_dropout", "[", "k", "]", ")", "\n", "\n", "all_embeddings", "+=", "[", "mlp_embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN.create_bpr_loss1": [[365, 381], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.softplus", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "create_bpr_loss1", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "# new version", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "pos_i_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_g_embeddings_pre", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "mf_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softplus", "(", "-", "(", "pos_scores", "-", "neg_scores", ")", ")", ")", "\n", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN.create_bpr_loss": [[382, 409], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.constant", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.softplus", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "# NGCF version", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "if", "self", ".", "alg_type", "in", "[", "'lightgcn'", "]", ":", "\n", "            ", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "pos_i_g_embeddings_pre", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_i_g_embeddings_pre", ")", "\n", "", "else", ":", "\n", "            ", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "# In the first version, we implement the bpr loss via the following codes:", "\n", "# We report the performance in our paper using this implementation.", "\n", "# maxi = tf.log(tf.nn.sigmoid(pos_scores - neg_scores))", "\n", "# mf_loss = tf.negative(tf.reduce_mean(maxi))", "\n", "\n", "## In the second version, we implement the bpr loss via the following codes to avoid 'NAN' loss during training:", "\n", "## However, it will change the training performance and training performance.", "\n", "## Please retrain the model and do a grid search for the best experimental setting.", "\n", "mf_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "softplus", "(", "-", "(", "pos_scores", "-", "neg_scores", ")", ")", ")", "\n", "\n", "\n", "emb_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "\n", "reg_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ",", "[", "1", "]", ")", "\n", "\n", "return", "mf_loss", ",", "emb_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._convert_sp_mat_to_sp_tensor": [[410, 414], ["X.tocoo().astype", "np.mat().transpose", "tensorflow.SparseTensor", "X.tocoo", "np.mat"], "methods", ["None"], ["", "def", "_convert_sp_mat_to_sp_tensor", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "tf", ".", "SparseTensor", "(", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.LightGCN._dropout_sparse": [[415, 426], ["tensorflow.random_uniform", "tensorflow.cast", "tensorflow.sparse_retain", "tensorflow.floor", "tensorflow.div"], "methods", ["None"], ["", "def", "_dropout_sparse", "(", "self", ",", "X", ",", "keep_prob", ",", "n_nonzero_elems", ")", ":", "\n", "        ", "\"\"\"\n        Dropout for sparse tensors.\n        \"\"\"", "\n", "noise_shape", "=", "[", "n_nonzero_elems", "]", "\n", "random_tensor", "=", "keep_prob", "\n", "random_tensor", "+=", "tf", ".", "random_uniform", "(", "noise_shape", ")", "\n", "dropout_mask", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "random_tensor", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "pre_out", "=", "tf", ".", "sparse_retain", "(", "X", ",", "dropout_mask", ")", "\n", "\n", "return", "pre_out", "*", "tf", ".", "div", "(", "1.", ",", "keep_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.lightGCN.load_pretrained_data": [[427, 435], ["np.load", "print"], "function", ["None"], ["", "", "def", "load_pretrained_data", "(", ")", ":", "\n", "    ", "pretrain_path", "=", "'%spretrain/%s/%s.npz'", "%", "(", "args", ".", "proj_path", ",", "args", ".", "dataset", ",", "'embedding'", ")", "\n", "try", ":", "\n", "        ", "pretrain_data", "=", "np", ".", "load", "(", "pretrain_path", ")", "\n", "print", "(", "'load the pretrained embeddings.'", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pretrain_data", "=", "None", "\n", "", "return", "pretrain_data", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.BPRMF.BPRMF.__init__": [[22, 68], ["eval", "len", "eval", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "BPRMF.BPRMF._init_weights", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.matmul", "BPRMF.BPRMF.create_bpr_loss", "tensorflow.train.RMSPropOptimizer().minimize", "BPRMF.BPRMF._statistics_params", "tensorflow.train.RMSPropOptimizer"], "methods", ["home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.BPRMF.BPRMF._init_weights", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.BPRMF.BPRMF.create_bpr_loss", "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.BPRMF.BPRMF._statistics_params"], ["    ", "def", "__init__", "(", "self", ",", "data_config", ")", ":", "\n", "        ", "self", ".", "model_type", "=", "'bprmf'", "\n", "\n", "self", ".", "n_users", "=", "data_config", "[", "'n_users'", "]", "\n", "self", ".", "n_items", "=", "data_config", "[", "'n_items'", "]", "\n", "\n", "self", ".", "lr", "=", "args", ".", "lr", "\n", "# self.lr_decay = args.lr_decay", "\n", "\n", "self", ".", "emb_dim", "=", "args", ".", "embed_size", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "\n", "\n", "self", ".", "weight_size", "=", "eval", "(", "args", ".", "layer_size", ")", "\n", "self", ".", "n_layers", "=", "len", "(", "self", ".", "weight_size", ")", "\n", "\n", "self", ".", "regs", "=", "eval", "(", "args", ".", "regs", ")", "\n", "self", ".", "decay", "=", "self", ".", "regs", "[", "0", "]", "\n", "\n", "self", ".", "verbose", "=", "args", ".", "verbose", "\n", "\n", "# placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "# self.global_step = tf.Variable(0, trainable=False)", "\n", "\n", "self", ".", "weights", "=", "self", ".", "_init_weights", "(", ")", "\n", "\n", "# Original embedding.", "\n", "u_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "users", ")", "\n", "pos_i_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "neg_i_e", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "neg_items", ")", "\n", "\n", "# All ratings for all users.", "\n", "self", ".", "batch_ratings", "=", "tf", ".", "matmul", "(", "u_e", ",", "pos_i_e", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "self", ".", "mf_loss", ",", "self", ".", "reg_loss", "=", "self", ".", "create_bpr_loss", "(", "u_e", ",", "pos_i_e", ",", "neg_i_e", ")", "\n", "self", ".", "loss", "=", "self", ".", "mf_loss", "+", "self", ".", "reg_loss", "\n", "\n", "# self.dy_lr = tf.train.exponential_decay(self.lr, self.global_step, 10000, self.lr_decay, staircase=True)", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n", "# self.updates = self.opt.minimize(self.loss, var_list=self.weights)", "\n", "\n", "self", ".", "_statistics_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.BPRMF.BPRMF._init_weights": [[69, 79], ["dict", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer."], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "all_weights", "=", "dict", "(", ")", "\n", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "\n", "all_weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'user_embedding'", ")", "\n", "all_weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ")", ",", "name", "=", "'item_embedding'", ")", "\n", "\n", "return", "all_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.BPRMF.BPRMF.create_bpr_loss": [[80, 92], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.softplus", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "regularizer", "=", "regularizer", "/", "self", ".", "batch_size", "\n", "\n", "# maxi = tf.log(tf.nn.sigmoid(pos_scores - neg_scores))", "\n", "# mf_loss = tf.negative(tf.reduce_mean(maxi))", "\n", "mf_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "softplus", "(", "-", "(", "pos_scores", "-", "neg_scores", ")", ")", ")", "\n", "reg_loss", "=", "self", ".", "decay", "*", "regularizer", "\n", "return", "mf_loss", ",", "reg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.JimLiu96_DeosciRec.baselines.BPRMF.BPRMF._statistics_params": [[94, 105], ["BPRMF.BPRMF.weights.values", "variable.get_shape", "print"], "methods", ["None"], ["", "def", "_statistics_params", "(", "self", ")", ":", "\n", "# number of params", "\n", "        ", "total_parameters", "=", "0", "\n", "for", "variable", "in", "self", ".", "weights", ".", "values", "(", ")", ":", "\n", "            ", "shape", "=", "variable", ".", "get_shape", "(", ")", "# shape is an array of tf.Dimension", "\n", "variable_parameters", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "                ", "variable_parameters", "*=", "dim", ".", "value", "\n", "", "total_parameters", "+=", "variable_parameters", "\n", "", "if", "self", ".", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "\"#params: %d\"", "%", "total_parameters", ")", "\n", "\n"]]}