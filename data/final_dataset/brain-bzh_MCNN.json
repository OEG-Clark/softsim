{"home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.Get_Hops.__init__": [[241, 243], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "graph", ")", ":", "\n", "        ", "self", ".", "graph", "=", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.Get_Hops.get_x_hop": [[244, 254], ["functools.lru_cache", "set", "set", "numpy.where", "translation_search.Get_Hops.get_x_hop"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.Get_Hops.get_x_hop"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "1024", ")", "\n", "def", "get_x_hop", "(", "self", ",", "node", ",", "x", ")", ":", "\n", "        ", "if", "x", "==", "0", ":", "\n", "            ", "return", "set", "(", "[", "node", "]", ")", "\n", "", "else", ":", "\n", "            ", "direct_vertexes", "=", "np", ".", "where", "(", "self", ".", "graph", "[", "node", "]", ">", "0", ")", "[", "0", "]", "\n", "nodes", "=", "set", "(", ")", "\n", "for", "direct_vertex", "in", "direct_vertexes", ":", "\n", "                 ", "nodes", "|=", "self", ".", "get_x_hop", "(", "direct_vertex", ",", "x", "-", "1", ")", "\n", "", "return", "nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.read_graph": [[13, 26], ["open", "open.readlines", "enumerate", "int", "numpy.zeros", "line.replace().split", "int", "line.replace"], "function", ["None"], ["def", "read_graph", "(", "file_name", ")", ":", "\n", "    ", "f", "=", "open", "(", "file_name", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "index", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "if", "index", "==", "0", ":", "\n", "            ", "N", "=", "int", "(", "line", ")", "\n", "A", "=", "np", ".", "zeros", "(", "(", "N", ",", "N", ")", ")", "\n", "", "else", ":", "\n", "            ", "splitted", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\" \"", ")", "\n", "for", "value", "in", "splitted", ":", "\n", "                ", "value", "=", "int", "(", "value", ")", "\n", "A", "[", "index", "-", "1", ",", "value", "]", "=", "1", "\n", "", "", "", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.generate_grid_graph": [[27, 40], ["numpy.zeros", "range"], "function", ["None"], ["", "def", "generate_grid_graph", "(", "W", "=", "4", ",", "H", "=", "4", ")", ":", "\n", "    ", "N", "=", "W", "*", "H", "\n", "A", "=", "np", ".", "zeros", "(", "(", "N", ",", "N", ")", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "if", "i", "%", "H", ">", "0", ":", "\n", "            ", "A", "[", "i", ",", "i", "-", "1", "]", "=", "1", "\n", "", "if", "(", "i", "+", "1", ")", "%", "H", ">", "0", ":", "\n", "            ", "A", "[", "i", ",", "i", "+", "1", "]", "=", "1", "\n", "", "if", "i", "+", "H", "<", "N", ":", "\n", "            ", "A", "[", "i", ",", "i", "+", "H", "]", "=", "1", "\n", "", "if", "i", "-", "H", ">=", "0", ":", "\n", "            ", "A", "[", "i", ",", "i", "-", "H", "]", "=", "1", "\n", "", "", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.get_center": [[41, 53], ["tqdm.tqdm", "range", "translation_search.get_distance", "get_distance.values"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.get_distance"], ["", "def", "get_center", "(", "A", ")", ":", "\n", "    ", "min_distance", "=", "np", ".", "inf", "\n", "center_node", "=", "-", "1", "\n", "for", "node", "in", "tqdm", ".", "tqdm", "(", "range", "(", "A", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "        ", "distance_dict", "=", "get_distance", "(", "A", ",", "node", ")", "\n", "distance", "=", "0", "\n", "for", "v", "in", "distance_dict", ".", "values", "(", ")", ":", "\n", "            ", "distance", "+=", "v", "\n", "", "if", "distance", "<", "min_distance", ":", "\n", "            ", "center_node", "=", "node", "\n", "min_distance", "=", "distance", "\n", "", "", "return", "min_distance", ",", "center_node", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.get_distance": [[54, 66], ["dict", "stack.pop", "list", "stack.extend", "numpy.where", "list.append"], "function", ["None"], ["", "def", "get_distance", "(", "A", ",", "start", ")", ":", "\n", "    ", "visited", ",", "stack", "=", "dict", "(", ")", ",", "[", "(", "start", ",", "0", ")", "]", "\n", "while", "stack", ":", "\n", "        ", "vertex", ",", "distance", "=", "stack", ".", "pop", "(", ")", "\n", "if", "vertex", "not", "in", "visited", "or", "visited", "[", "vertex", "]", ">", "distance", ":", "\n", "            ", "visited", "[", "vertex", "]", "=", "distance", "\n", "neighbours", "=", "np", ".", "where", "(", "A", "[", "vertex", "]", ">", "0", ")", "[", "0", "]", "\n", "neighbours_to_visit", "=", "list", "(", ")", "\n", "for", "a", "in", "neighbours", ":", "\n", "                ", "neighbours_to_visit", ".", "append", "(", "(", "a", ",", "distance", "+", "1", ")", ")", "\n", "", "stack", ".", "extend", "(", "neighbours_to_visit", ")", "\n", "", "", "return", "visited", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.compute_score": [[67, 104], ["range", "range", "range", "range", "range", "translation_search.compute_score.snp_score"], "function", ["None"], ["", "def", "compute_score", "(", "arguments", ",", "initial_graph", ",", "graph", ",", "index", ",", "translation", ",", "l", ",", "gts", ",", "stg", ")", ":", "\n", "    ", "def", "loss_score", "(", ")", ":", "\n", "        ", "score", "=", "0", "\n", "for", "i", "in", "range", "(", "index", "+", "1", ")", ":", "\n", "            ", "if", "translation", "[", "i", "]", "==", "-", "1", ":", "\n", "                ", "score", "+=", "1", "\n", "", "", "return", "score", "\n", "", "def", "injection_score", "(", ")", ":", "\n", "        ", "score", "=", "0", "\n", "for", "i", "in", "range", "(", "index", "+", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "if", "translation", "[", "i", "]", "==", "translation", "[", "j", "]", "and", "translation", "[", "i", "]", "!=", "-", "1", ":", "\n", "                    ", "score", "+=", "1", "\n", "", "", "", "return", "score", "\n", "", "def", "edge_constrained_score", "(", ")", ":", "\n", "        ", "score", "=", "0", "\n", "for", "i", "in", "range", "(", "index", "+", "1", ")", ":", "\n", "            ", "if", "translation", "[", "i", "]", "!=", "-", "1", "and", "translation", "[", "i", "]", "not", "in", "np", ".", "where", "(", "graph", "[", "stg", "[", "i", "]", "]", ">", "0", ")", "[", "0", "]", ":", "\n", "                ", "score", "+=", "1", "\n", "", "", "return", "score", "\n", "", "def", "snp_score", "(", ")", ":", "\n", "        ", "score", "=", "0", "\n", "for", "i", "in", "range", "(", "index", "+", "1", ")", ":", "\n", "            ", "if", "translation", "[", "i", "]", "!=", "(", "-", "1", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "index", "+", "1", ")", ":", "\n", "                    ", "if", "translation", "[", "j", "]", "!=", "(", "-", "1", ")", ":", "\n", "                        ", "try", ":", "\n", "                            ", "if", "stg", "[", "i", "]", "in", "np", ".", "where", "(", "initial_graph", "[", "stg", "[", "j", "]", "]", ">", "0", ")", "[", "0", "]", "and", "not", "(", "translation", "[", "i", "]", "in", "np", ".", "where", "(", "initial_graph", "[", "translation", "[", "j", "]", "]", ">", "0", ")", "[", "0", "]", ")", ":", "\n", "                                ", "score", "+=", "1", "\n", "", "if", "stg", "[", "i", "]", "not", "in", "np", ".", "where", "(", "initial_graph", "[", "stg", "[", "j", "]", "]", ">", "0", ")", "[", "0", "]", "and", "translation", "[", "i", "]", "in", "np", ".", "where", "(", "initial_graph", "[", "translation", "[", "j", "]", "]", ">", "0", ")", "[", "0", "]", ":", "\n", "                                ", "score", "+=", "1", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                            ", "print", "(", "e", ")", "\n", "", "", "", "", "", "return", "score", "\n", "", "score", "=", "arguments", ".", "alpha", "*", "loss_score", "(", ")", "+", "arguments", ".", "beta", "*", "injection_score", "(", ")", "+", "arguments", ".", "gamma", "*", "edge_constrained_score", "(", ")", "+", "arguments", ".", "delta", "*", "snp_score", "(", ")", "\n", "score", "+=", "1000000", "if", "translation", "[", "0", "]", "not", "in", "np", ".", "where", "(", "graph", "[", "stg", "[", "0", "]", "]", ">", "0", ")", "[", "0", "]", "else", "0", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.search": [[105, 123], ["translation_search.search.in_search"], "function", ["None"], ["", "def", "search", "(", "arguments", ",", "initial_graph", ",", "graph", ",", "l", ",", "gts", ",", "stg", ")", ":", "\n", "    ", "global", "best_score", ",", "best_translation", "\n", "best_score", "=", "np", ".", "inf", "\n", "best_translation", "=", "[", "]", "\n", "def", "in_search", "(", "score", ",", "index", ",", "translation", ")", ":", "\n", "        ", "global", "best_score", ",", "best_translation", "\n", "if", "index", "==", "l", ":", "\n", "            ", "if", "score", "<", "best_score", ":", "\n", "                ", "best_score", "=", "score", "\n", "best_translation", "=", "translation", ".", "copy", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "image", "in", "range", "(", "-", "1", ",", "len", "(", "stg", ")", ")", ":", "\n", "                ", "translation", "[", "index", "]", "=", "stg", "[", "image", "]", "if", "image", ">", "-", "1", "else", "-", "1", "\n", "new_score", "=", "compute_score", "(", "arguments", ",", "initial_graph", ",", "graph", ",", "index", ",", "translation", ",", "l", ",", "gts", ",", "stg", ")", "\n", "if", "new_score", "<", "best_score", ":", "\n", "                    ", "in_search", "(", "new_score", ",", "(", "index", "+", "1", ")", ",", "translation", ")", "\n", "", "", "", "", "in_search", "(", "0", ",", "0", ",", "[", "-", "1", "]", "*", "l", ")", "\n", "return", "best_score", ",", "best_translation", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.induced_subgraph": [[124, 144], ["random.shuffle", "_list.extend", "len", "dict", "numpy.where", "subgraph_to_graph.append", "enumerate", "subgraph_to_graph.copy", "subgraph_to_graph.append"], "function", ["None"], ["", "def", "induced_subgraph", "(", "graph", ",", "central_vertex", ")", ":", "\n", "    ", "_list", "=", "[", "central_vertex", "]", "\n", "direct_connections", "=", "np", ".", "where", "(", "graph", "[", "central_vertex", "]", ">", "0", ")", "[", "0", "]", "\n", "random", ".", "shuffle", "(", "direct_connections", ")", "\n", "_list", ".", "extend", "(", "direct_connections", ")", "\n", "l", "=", "len", "(", "_list", ")", "\n", "graph_to_subgraph", "=", "dict", "(", ")", "\n", "subgraph_to_graph", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "i", "in", "_list", ":", "\n", "        ", "graph_to_subgraph", "[", "i", "]", "=", "count", "\n", "subgraph_to_graph", ".", "append", "(", "i", ")", "\n", "count", "+=", "1", "\n", "", "for", "i", "in", "_list", ":", "\n", "        ", "for", "j", ",", "value", "in", "enumerate", "(", "graph", "[", "i", "]", ")", ":", "\n", "            ", "if", "value", "==", "1", "and", "j", "not", "in", "subgraph_to_graph", ":", "\n", "                ", "graph_to_subgraph", "[", "j", "]", "=", "count", "\n", "subgraph_to_graph", ".", "append", "(", "j", ")", "\n", "count", "+=", "1", "\n", "", "", "", "return", "l", ",", "graph_to_subgraph", ",", "subgraph_to_graph", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.identify_local_translations": [[145, 159], ["tqdm.tqdm", "translation_search.induced_subgraph", "range", "graph.copy", "range", "range", "range", "len", "translation_search.search", "res[].append", "range", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.induced_subgraph", "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.search"], ["", "def", "identify_local_translations", "(", "arguments", ",", "graph", ")", ":", "\n", "    ", "print", "\n", "res", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "graph", "[", "0", "]", ")", ")", "]", "\n", "tables", "=", "[", "induced_subgraph", "(", "graph", ",", "i", ")", "for", "i", "in", "range", "(", "len", "(", "graph", "[", "0", "]", ")", ")", "]", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "len", "(", "graph", "[", "0", "]", ")", ")", ")", ":", "\n", "        ", "l", ",", "gts", ",", "stg", "=", "tables", "[", "i", "]", "\n", "graph_copy", "=", "graph", ".", "copy", "(", ")", "\n", "for", "j", "in", "range", "(", "1", ",", "l", ")", ":", "\n", "            ", "best_cost", ",", "best_translation", "=", "search", "(", "arguments", ",", "graph", ",", "graph_copy", ",", "l", ",", "gts", ",", "stg", ")", "\n", "res", "[", "i", "]", ".", "append", "(", "[", "best_cost", ",", "best_translation", "]", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "best_translation", ")", ")", ":", "\n", "                ", "if", "best_translation", "[", "k", "]", ">", "-", "1", ":", "\n", "                    ", "graph_copy", "[", "stg", "[", "k", "]", "]", "[", "best_translation", "[", "k", "]", "]", "=", "0", "\n", "", "", "", "", "return", "res", ",", "tables", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.propagate_central_pattern": [[160, 184], ["translation_search.induced_subgraph", "range", "len", "print", "range", "numpy.array", "range", "sum", "len", "print", "len", "enumerate"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.induced_subgraph"], ["", "def", "propagate_central_pattern", "(", "graph", ",", "central_vertex", ",", "local_translations", ",", "tables", ")", ":", "\n", "    ", "l", ",", "gts", ",", "stg", "=", "induced_subgraph", "(", "graph", ",", "central_vertex", ")", "\n", "patterns", "=", "[", "[", "-", "1", "]", "*", "l", "for", "i", "in", "range", "(", "len", "(", "graph", ")", ")", "]", "\n", "costs", "=", "[", "10000", "]", "*", "len", "(", "graph", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "l", ")", ":", "\n", "        ", "patterns", "[", "central_vertex", "]", "[", "i", "]", "=", "stg", "[", "i", "]", "\n", "", "costs", "[", "central_vertex", "]", "=", "0", "\n", "while", "True", ":", "\n", "        ", "print", "(", "sum", "(", "costs", ")", ")", "\n", "modifications", "=", "False", "\n", "for", "line", "in", "range", "(", "len", "(", "tables", ")", ")", ":", "\n", "            ", "_", ",", "gts", ",", "_", "=", "tables", "[", "line", "]", "\n", "for", "cost", ",", "translation", "in", "local_translations", "[", "line", "]", ":", "\n", "                ", "new_cost", "=", "cost", "+", "costs", "[", "line", "]", "\n", "if", "new_cost", "<", "costs", "[", "translation", "[", "0", "]", "]", ":", "\n", "                    ", "modifications", "=", "True", "\n", "for", "reference", ",", "assignation", "in", "enumerate", "(", "patterns", "[", "line", "]", ")", ":", "\n", "                        ", "new_assignation", "=", "-", "1", "if", "assignation", "==", "-", "1", "else", "gts", "[", "assignation", "]", "\n", "patterns", "[", "translation", "[", "0", "]", "]", "[", "reference", "]", "=", "-", "1", "if", "new_assignation", "==", "-", "1", "else", "translation", "[", "new_assignation", "]", "\n", "", "costs", "[", "translation", "[", "0", "]", "]", "=", "new_cost", "\n", "", "", "", "if", "not", "modifications", ":", "\n", "            ", "print", "(", "\"finished propagating\"", ")", "\n", "break", "\n", "", "", "return", "np", ".", "array", "(", "patterns", ")", ",", "costs", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.discover_global_translations": [[185, 221], ["numpy.array", "translation_search.induced_subgraph", "range", "numpy.arange", "numpy.setdiff1d", "numpy.random.shuffle", "range", "collections.deque", "len", "len", "len", "numpy.array", "len", "range", "len", "random.shuffle", "print", "int", "enumerate", "len", "sum", "collections.deque.popleft", "range", "numpy.zeros", "len", "len", "collections.deque.extend", "len", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.induced_subgraph"], ["", "def", "discover_global_translations", "(", "graph", ",", "central_vertex", ",", "patterns", ")", ":", "\n", "    ", "patterns", "=", "np", ".", "array", "(", "patterns", ")", "\n", "l", ",", "gts", ",", "stg", "=", "induced_subgraph", "(", "graph", ",", "central_vertex", ")", "\n", "global_translations", "=", "[", "[", "-", "1", "]", "*", "len", "(", "graph", "[", "0", "]", ")", "for", "i", "in", "range", "(", "len", "(", "graph", "[", "0", "]", ")", ")", "]", "\n", "costs", "=", "[", "len", "(", "graph", "[", "0", "]", ")", "]", "*", "len", "(", "graph", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "l", ")", ":", "\n", "        ", "global_translations", "[", "central_vertex", "]", "[", "i", "]", "=", "patterns", "[", "central_vertex", "]", "[", "i", "]", "\n", "", "other_values", "=", "np", ".", "arange", "(", "len", "(", "graph", "[", "0", "]", ")", ")", "\n", "final", "=", "np", ".", "setdiff1d", "(", "other_values", ",", "patterns", "[", "central_vertex", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "final", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "len", "(", "final", ")", ")", ":", "\n", "        ", "global_translations", "[", "central_vertex", "]", "[", "j", "+", "i", "+", "1", "]", "=", "final", "[", "j", "]", "\n", "", "costs", "[", "central_vertex", "]", "=", "0", "\n", "nodes_to_spread", "=", "deque", "(", "[", "central_vertex", "]", ")", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "random", ".", "shuffle", "(", "nodes_to_spread", ")", "\n", "print", "(", "sum", "(", "costs", ")", ")", "\n", "node", "=", "int", "(", "nodes_to_spread", ".", "popleft", "(", ")", ")", "\n", "local_translations", "=", "patterns", "[", "node", "]", "\n", "for", "index_translation", ",", "translated_node", "in", "enumerate", "(", "local_translations", ")", ":", "\n", "                ", "if", "index_translation", "==", "0", "or", "translated_node", "==", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "new_line", "=", "np", ".", "zeros", "(", "len", "(", "graph", ")", ",", "dtype", "=", "np", ".", "int32", ")", "-", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "graph", ")", ")", ":", "\n", "                    ", "new_value", "=", "global_translations", "[", "node", "]", "[", "i", "]", "\n", "new_line", "[", "i", "]", "=", "patterns", "[", "new_value", "]", "[", "index_translation", "]", "\n", "", "new_cost", "=", "len", "(", "graph", "[", "0", "]", ")", "-", "np", ".", "unique", "(", "new_line", ")", ".", "shape", "[", "0", "]", "\n", "cost", "=", "costs", "[", "translated_node", "]", "\n", "if", "new_cost", "<", "cost", ":", "\n", "                    ", "global_translations", "[", "translated_node", "]", "=", "new_line", "\n", "nodes_to_spread", ".", "extend", "(", "[", "translated_node", "]", ")", "\n", "costs", "[", "translated_node", "]", "=", "new_cost", "\n", "", "", "", "except", "IndexError", ":", "\n", "            ", "break", "\n", "", "", "return", "np", ".", "array", "(", "global_translations", ")", ",", "costs", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.revive_nodes": [[222, 228], ["enumerate", "print", "enumerate"], "function", ["None"], ["", "def", "revive_nodes", "(", "global_translations", ",", "max_cost", ",", "costs", ",", "patterns", ")", ":", "\n", "    ", "for", "index", ",", "cost", "in", "enumerate", "(", "costs", ")", ":", "\n", "        ", "if", "cost", "==", "max_cost", ":", "\n", "            ", "print", "(", "index", ",", "cost", ")", "\n", "for", "index2", ",", "value", "in", "enumerate", "(", "patterns", "[", "index", "]", ")", ":", "\n", "                ", "global_translations", "[", "index", "]", "[", "index2", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.translations_to_dict": [[229, 236], ["enumerate", "dict", "enumerate", "range"], "function", ["None"], ["", "", "", "", "def", "translations_to_dict", "(", "translations", ")", ":", "\n", "    ", "dict_translations", "=", "[", "dict", "(", ")", "for", "i", "in", "range", "(", "translations", ".", "shape", "[", "0", "]", ")", "]", "\n", "for", "index_pattern", ",", "pattern", "in", "enumerate", "(", "translations", ")", ":", "\n", "        ", "for", "index_translation", ",", "node", "in", "enumerate", "(", "pattern", ",", "start", "=", "1", ")", ":", "\n", "            ", "if", "node", ">", "-", "1", ":", "\n", "                ", "dict_translations", "[", "index_pattern", "]", "[", "node", "]", "=", "index_translation", "\n", "", "", "", "return", "dict_translations", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.convert_list_dict_to_string": [[237, 239], ["list_dict.__str__().replace", "list_dict.__str__"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.__str__"], ["", "def", "convert_list_dict_to_string", "(", "list_dict", ")", ":", "\n", "    ", "return", "list_dict", ".", "__str__", "(", ")", ".", "replace", "(", "\"},\"", ",", "\"},\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.discover_stride_nodes": [[255, 284], ["set", "set", "dead_nodes.copy.copy", "translation_search.Get_Hops", "len", "set", "list", "set", "list", "list", "translation_search.Get_Hops.get_x_hop", "translation_search.Get_Hops.get_x_hop", "set", "set", "list.append"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.Get_Hops.get_x_hop", "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.translation_search.Get_Hops.get_x_hop"], ["", "", "", "def", "discover_stride_nodes", "(", "graph", ",", "central_vertex", ",", "hops_keep", "=", "2", ",", "hops_die", "=", "[", "1", "]", ",", "dead_nodes", "=", "set", "(", ")", ")", ":", "\n", "    ", "alive_nodes", "=", "set", "(", "[", "central_vertex", "]", ")", "\n", "central_list", "=", "[", "central_vertex", "]", "\n", "dead_nodes", "=", "dead_nodes", ".", "copy", "(", ")", "\n", "get_hops", "=", "Get_Hops", "(", "graph", ")", "\n", "while", "len", "(", "central_list", ")", ">", "0", ":", "\n", "        ", "list_to_die", "=", "set", "(", ")", "\n", "for", "new_central", "in", "central_list", ":", "\n", "            ", "for", "hops_die_index", "in", "hops_die", ":", "\n", "                ", "list_to_die", "|=", "get_hops", ".", "get_x_hop", "(", "new_central", ",", "hops_die_index", ")", "\n", "", "", "list_to_die", "=", "list", "(", "list_to_die", ")", "\n", "for", "node", "in", "list_to_die", ":", "\n", "            ", "if", "node", "not", "in", "alive_nodes", ":", "\n", "                ", "dead_nodes", "|=", "set", "(", "[", "node", "]", ")", "\n", "\n", "\n", "", "", "list_to_live", "=", "set", "(", ")", "\n", "for", "new_central", "in", "central_list", ":", "\n", "            ", "list_to_live", "|=", "get_hops", ".", "get_x_hop", "(", "new_central", ",", "hops_keep", ")", "\n", "", "list_to_live", "=", "list", "(", "list_to_live", ")", "\n", "\n", "central_list", "=", "list", "(", ")", "\n", "for", "node", "in", "list_to_live", ":", "\n", "            ", "if", "node", "not", "in", "dead_nodes", ":", "\n", "                ", "if", "node", "not", "in", "alive_nodes", ":", "\n", "                    ", "alive_nodes", "|=", "set", "(", "[", "node", "]", ")", "\n", "if", "node", "not", "in", "central_list", ":", "\n", "                        ", "central_list", ".", "append", "(", "node", ")", "\n", "", "", "", "", "", "return", "alive_nodes", ",", "dead_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.cov": [[7, 18], ["numpy.ones", "numpy.ones", "matrix.copy", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.dot"], "function", ["None"], ["def", "cov", "(", "matrix", ")", ":", "\n", "    ", "f", "=", "np", ".", "ones", "(", "matrix", ".", "shape", "[", "1", "]", ")", "\n", "a", "=", "np", ".", "ones", "(", "matrix", ".", "shape", "[", "1", "]", ")", "\n", "\n", "m", "=", "matrix", ".", "copy", "(", ")", "\n", "w", "=", "f", "*", "a", "\n", "v1", "=", "np", ".", "sum", "(", "w", ")", "\n", "v2", "=", "np", ".", "sum", "(", "a", ")", "\n", "m", "-=", "np", ".", "sum", "(", "m", "*", "w", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "/", "v1", "\n", "_cov", "=", "np", ".", "dot", "(", "m", "*", "w", ",", "m", ".", "T", ")", "*", "v1", "/", "(", "v1", "**", "2", ")", "\n", "return", "_cov", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.prepare_covariance_matrix": [[19, 23], ["generate_graph.cov", "numpy.fill_diagonal"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.cov"], ["", "def", "prepare_covariance_matrix", "(", "matrix", ")", ":", "\n", "    ", "covariance", "=", "cov", "(", "matrix", ")", "\n", "np", ".", "fill_diagonal", "(", "covariance", ",", "0", ")", "\n", "return", "covariance", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.create_adjacence_matrix_from_covariance": [[24, 30], ["generate_graph.knn_over_matrix", "generate_graph.force_symmetry", "generate_graph.force_symmetry"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.knn_over_matrix", "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.force_symmetry", "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.force_symmetry"], ["", "def", "create_adjacence_matrix_from_covariance", "(", "matrix", ",", "k", ",", "symmetric", ")", ":", "\n", "    ", "adjacence_matrix", ",", "weighted_adjacence_matrix", "=", "knn_over_matrix", "(", "matrix", ",", "k", ")", "\n", "if", "symmetric", ":", "\n", "        ", "return", "force_symmetry", "(", "adjacence_matrix", ")", ",", "force_symmetry", "(", "weighted_adjacence_matrix", ")", "\n", "", "else", ":", "\n", "        ", "return", "adjacence_matrix", ",", "weighted_adjacence_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.knn_over_matrix": [[32, 38], ["matrix[].reshape", "numpy.argsort", "numpy.arange"], "function", ["None"], ["", "", "def", "knn_over_matrix", "(", "matrix", ",", "k", ")", ":", "\n", "    ", "temp", "=", "np", ".", "argsort", "(", "-", "matrix", ",", "axis", "=", "1", ")", "[", ":", ",", "k", "-", "1", "]", "# Get K biggest index", "\n", "thresholds", "=", "matrix", "[", "np", ".", "arange", "(", "matrix", ".", "shape", "[", "0", "]", ")", ",", "temp", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "# Transform matrix into a column matrix of maximums", "\n", "adjacence_matrix", "=", "(", "matrix", ">=", "thresholds", ")", "*", "1.0", "# Create adjacence_matrix", "\n", "weighted_adjacence_matrix", "=", "adjacence_matrix", "*", "matrix", "# Create weigthed adjacence_matrix", "\n", "return", "adjacence_matrix", ",", "weighted_adjacence_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.force_symmetry": [[39, 41], ["numpy.minimum"], "function", ["None"], ["", "def", "force_symmetry", "(", "matrix", ")", ":", "\n", "    ", "return", "np", ".", "minimum", "(", "matrix", "+", "matrix", ".", "T", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.rgb2gray": [[42, 44], ["numpy.dot"], "function", ["None"], ["", "def", "rgb2gray", "(", "rgb", ")", ":", "\n", "    ", "return", "np", ".", "dot", "(", "rgb", "[", "...", ",", ":", "3", "]", ",", "[", "0.299", ",", "0.587", ",", "0.114", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.preprocessing": [[45, 49], ["generate_graph.prepare_covariance_matrix", "generate_graph.create_adjacence_matrix_from_covariance"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.prepare_covariance_matrix", "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.create_adjacence_matrix_from_covariance"], ["", "def", "preprocessing", "(", "x_train", ",", "k", ",", "symmetric", ")", ":", "\n", "    ", "covariance", "=", "prepare_covariance_matrix", "(", "x_train", ")", "\n", "adjacence_matrix", ",", "weighted_adjacence_matrix", "=", "create_adjacence_matrix_from_covariance", "(", "covariance", ",", "k", "=", "k", ",", "symmetric", "=", "symmetric", ")", "\n", "return", "covariance", ",", "convolution", ",", "adjacence_matrix", ",", "weighted_adjacence_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.prepare_cifar_dataset": [[50, 64], ["torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "numpy.concatenate", "numpy.transpose", "x_train.reshape.astype", "generate_graph.rgb2gray", "x_train.reshape.reshape", "x_train.reshape.append", "torchvision.ToTensor", "inputs.numpy"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.rgb2gray"], ["", "def", "prepare_cifar_dataset", "(", ")", ":", "\n", "\n", "    ", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'../data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "x_train", "=", "[", "]", "\n", "for", "inputs", ",", "_", "in", "trainloader", ":", "\n", "        ", "x_train", ".", "append", "(", "inputs", ".", "numpy", "(", ")", ")", "\n", "", "x_train", "=", "np", ".", "concatenate", "(", "x_train", ")", "\n", "x_train", "=", "np", ".", "transpose", "(", "x_train", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "x_train", "=", "x_train", ".", "astype", "(", "'float32'", ")", "\n", "x_train", "=", "rgb2gray", "(", "x_train", ")", "\n", "x_train", "=", "x_train", ".", "reshape", "(", "-", "1", ",", "x_train", ".", "shape", "[", "1", "]", "*", "x_train", ".", "shape", "[", "2", "]", ")", "\n", "return", "x_train", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.graph_processing.generate_graph.save_adjacence_matrix": [[66, 76], ["open", "adjacence_matrix.shape[].__str__", "open.write", "range", "open.close", "[].strip().replace", "open.write", "numpy.where", "[].strip", "list().__str__", "list"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.__str__", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.__str__"], ["", "def", "save_adjacence_matrix", "(", "adjacence_matrix", ",", "filename", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "size_string", "=", "adjacence_matrix", ".", "shape", "[", "0", "]", ".", "__str__", "(", ")", "\n", "f", ".", "write", "(", "size_string", "+", "\"\\n\"", ")", "\n", "for", "i", "in", "range", "(", "adjacence_matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "line", "=", "adjacence_matrix", "[", "i", ",", ":", "]", "\n", "values", "=", "np", ".", "where", "(", "line", ">", "0", ")", "[", "0", "]", "\n", "values_str", "=", "list", "(", "values", ")", ".", "__str__", "(", ")", "[", "1", ":", "-", "1", "]", ".", "strip", "(", ")", ".", "replace", "(", "\",\"", ",", "\"\"", ")", "\n", "f", ".", "write", "(", "values_str", "+", "\"\\n\"", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.cifar.train": [[89, 114], ["print", "net.train", "enumerate", "reorder", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "torch.nn.utils.clip_grad_norm", "optimizer.step", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "targets.size", "predicted.eq().cpu().sum", "utils.progress_bar", "torch.autograd.Variable", "torch.autograd.Variable", "net.parameters", "len", "reorder.cuda", "targets.cuda", "predicted.eq().cpu", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.cifar.train", "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.reorder", "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.my_sparse_mm.backward", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.utils.progress_bar"], ["def", "train", "(", "epoch", ")", ":", "\n", "    ", "print", "(", "'\\nEpoch: %d'", "%", "epoch", ")", "\n", "net", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "inputs", "=", "reorder", "(", "perm", ",", "inputs", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "inputs", ",", "targets", "=", "Variable", "(", "inputs", ")", ",", "Variable", "(", "targets", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm", "(", "net", ".", "parameters", "(", ")", ",", "args", ".", "clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "progress_bar", "(", "batch_idx", ",", "len", "(", "trainloader", ")", ",", "'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "%", "(", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.cifar.test": [[115, 151], ["net.eval", "enumerate", "reorder", "net", "criterion", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "targets.size", "predicted.eq().cpu().sum", "utils.progress_bar", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.autograd.Variable", "torch.autograd.Variable", "len", "os.path.isdir", "os.mkdir", "reorder.cuda", "targets.cuda", "predicted.eq().cpu", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.reorder", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.utils.progress_bar"], ["", "", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "global", "best_acc", "\n", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "inputs", "=", "reorder", "(", "perm", ",", "inputs", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "inputs", ",", "targets", "=", "Variable", "(", "inputs", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "targets", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "progress_bar", "(", "batch_idx", ",", "len", "(", "testloader", ")", ",", "'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "%", "(", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "\n", "# Save checkpoint.", "\n", "", "acc", "=", "100.", "*", "correct", "/", "total", "\n", "#if acc > best_acc:", "\n", "if", "True", ":", "\n", "#print('Saving..')", "\n", "        ", "state", "=", "{", "\n", "'net'", ":", "net", ".", "module", "if", "use_cuda", "else", "net", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/ckpt.t7'", ")", "\n", "best_acc", "=", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.GraphCrop.__init__": [[25, 38], ["ast.literal_eval", "list", "open().read", "dict", "translation.items", "graph.GraphCrop.inverted_translations.append", "open", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "translations_path", "=", "TRANSLATIONS_PATH_CROP", ",", "times_to_translate", "=", "4", ")", ":", "\n", "        ", "self", ".", "translations_path", "=", "translations_path", "\n", "self", ".", "translations", "=", "ast", ".", "literal_eval", "(", "open", "(", "translations_path", ",", "\"r\"", ")", ".", "read", "(", ")", ")", "\n", "self", ".", "inverted_translations", "=", "list", "(", ")", "\n", "for", "translation", "in", "self", ".", "translations", ":", "\n", "            ", "dict_", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "translation", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "                    ", "v", "=", "[", "v", "]", "\n", "", "for", "value", "in", "v", ":", "\n", "                    ", "dict_", "[", "value", "]", "=", "k", "\n", "", "", "self", ".", "inverted_translations", ".", "append", "(", "dict_", ")", "\n", "", "self", ".", "times_to_translate", "=", "times_to_translate", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.GraphCrop.shift_direction": [[39, 52], ["image.view.view.view", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "image.view.view.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "inverted_dict.keys", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "image.view.view.size", "image.view.view.size"], "methods", ["None"], ["", "def", "shift_direction", "(", "self", ",", "image", ",", "direction", ")", ":", "\n", "        ", "image", "=", "image", ".", "view", "(", "3", ",", "1024", ")", "\n", "zeros", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "zeros_like", "(", "image", ")", "[", ":", ",", "0", "]", ",", "1", ")", "\n", "directions", "=", "(", "torch", ".", "zeros", "(", "image", ".", "size", "(", ")", "[", "1", "]", ")", "-", "1", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "for", "index_node", ",", "inverted_dict", "in", "enumerate", "(", "self", ".", "inverted_translations", ")", ":", "\n", "            ", "if", "direction", "in", "inverted_dict", ".", "keys", "(", ")", ":", "\n", "                ", "directions", "[", "index_node", "]", "=", "inverted_dict", "[", "direction", "]", "\n", "", "else", ":", "\n", "                ", "directions", "[", "index_node", "]", "=", "image", ".", "size", "(", ")", "[", "1", "]", "\n", "", "", "image", "=", "torch", ".", "cat", "(", "[", "image", ",", "zeros", "]", ",", "dim", "=", "1", ")", "\n", "image", "=", "image", "[", ":", ",", "directions", "]", "\n", "image", "=", "image", ".", "view", "(", "3", ",", "32", ",", "32", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.GraphCrop.__call__": [[55, 67], ["numpy.random.randint", "range", "numpy.random.randint", "graph.GraphCrop.shift_direction"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphCrop.shift_direction"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (torch tensor): torch graph tensor to be cropped.\n        Returns:\n            torch tensor: cropped torch graph tensor\n        \"\"\"", "\n", "times", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "times_to_translate", "+", "1", ")", "\n", "for", "_", "in", "range", "(", "times", ")", ":", "\n", "            ", "direction", "=", "np", ".", "random", ".", "randint", "(", "2", ",", "6", ")", "\n", "img", "=", "self", ".", "shift_direction", "(", "img", ",", "direction", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.GraphCrop.__repr__": [[68, 70], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "translations_path", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.GraphCrop.__str__": [[71, 73], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "translations_path", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.GraphPreActBlock.__init__": [[79, 95], ["torch.Module.__init__", "pickle.load", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "graph.TernaryLayer", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "graph.TernaryLayer", "open", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.Sequential", "torch.Sequential", "torch.Sequential", "numpy.array", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "number_of_strides", ",", "stride", "=", "False", ",", "translations_path", "=", "TRANSLATIONS_PATH", ")", ":", "\n", "        ", "super", "(", "GraphPreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "translations", "=", "pickle", ".", "load", "(", "open", "(", "translations_path", ",", "\"rb\"", ")", ")", "\n", "if", "self", ".", "stride", ":", "\n", "            ", "self", ".", "alive_indexes", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "np", ".", "array", "(", "self", ".", "translations", "[", "number_of_strides", "]", "[", "\"alive\"", "]", ")", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "TernaryLayer", "(", "in_channels", "=", "in_planes", ",", "number_of_strides", "=", "number_of_strides", ",", "out_channels", "=", "planes", ",", "translations_path", "=", "translations_path", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "TernaryLayer", "(", "in_channels", "=", "planes", ",", "number_of_strides", "=", "number_of_strides", ",", "out_channels", "=", "planes", ",", "translations_path", "=", "translations_path", ")", "\n", "\n", "if", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.GraphPreActBlock.forward": [[97, 107], ["torch.relu", "torch.relu", "torch.relu", "graph.GraphPreActBlock.conv1", "graph.GraphPreActBlock.conv2", "graph.GraphPreActBlock.bn1", "hasattr", "graph.GraphPreActBlock.shortcut().view", "torch.relu", "torch.relu", "torch.relu", "graph.GraphPreActBlock.bn2", "graph.GraphPreActBlock.shortcut", "graph.GraphPreActBlock.size", "graph.GraphPreActBlock.view", "graph.GraphPreActBlock.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", ",", "self", ".", "alive_indexes", "]", "\n", "\n", "", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ".", "view", "(", "-", "1", ",", "self", ".", "in_planes", ",", "out", ".", "size", "(", ")", "[", "2", "]", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "planes", ",", "out", ".", "size", "(", ")", "[", "2", "]", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.GraphPreActResNet.__init__": [[110, 126], ["torch.Module.__init__", "graph.TernaryLayer", "graph.GraphPreActResNet._make_layer", "graph.GraphPreActResNet._make_layer", "graph.GraphPreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "graph.GraphPreActResNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "translations_path", "=", "TRANSLATIONS_PATH", ")", ":", "\n", "        ", "super", "(", "GraphPreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "number_of_strides", "=", "0", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "translations_path", "=", "translations_path", "\n", "\n", "self", ".", "conv1", "=", "TernaryLayer", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "translations_path", "=", "self", ".", "translations_path", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "False", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "True", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "True", ")", "\n", "self", ".", "last_layer", "=", "256", "\n", "if", "self", ".", "num_blocks", "[", "3", "]", ">", "0", ":", "\n", "            ", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "True", ")", "\n", "self", ".", "last_layer", "=", "512", "\n", "", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "last_layer", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.GraphPreActResNet._make_layer": [[127, 136], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "False", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "if", "stride", ":", "\n", "                ", "self", ".", "number_of_strides", "+=", "1", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "self", ".", "number_of_strides", ",", "stride", ",", "translations_path", "=", "self", ".", "translations_path", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.GraphPreActResNet.forward": [[137, 148], ["x.view.view.view", "graph.GraphPreActResNet.conv1", "graph.GraphPreActResNet.layer1", "graph.GraphPreActResNet.layer2", "graph.GraphPreActResNet.layer3", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "graph.GraphPreActResNet.linear", "graph.GraphPreActResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "32", "**", "2", ")", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "if", "self", ".", "num_blocks", "[", "3", "]", ">", "0", ":", "\n", "            ", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "", "out", "=", "torch", ".", "mean", "(", "out", ",", "2", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.TernaryLayer.__init__": [[156, 168], ["super().__init__", "graph.TernaryLayer.build", "numpy.ones", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "graph.TernaryLayer.reset_parameters", "pickle.load", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "open"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.TernaryLayer.build", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.TernaryLayer.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "number_of_strides", "=", "0", ",", "translations_path", "=", "TRANSLATIONS_PATH", ")", ":", "\n", "        ", "super", "(", "TernaryLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "translations_path", "=", "translations_path", "\n", "self", ".", "translations", "=", "pickle", ".", "load", "(", "open", "(", "self", ".", "translations_path", ",", "\"rb\"", ")", ")", "[", "number_of_strides", "]", "\n", "self", ".", "build", "(", ")", "\n", "\n", "weight", "=", "np", ".", "ones", "(", "(", "self", ".", "in_channels", "*", "self", ".", "kernel_size", ",", "self", ".", "out_channels", ")", ")", "\n", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "weight", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.TernaryLayer.build": [[169, 195], ["len", "max", "isinstance", "numpy.zeros", "numpy.zeros", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "range", "len", "translation.items", "RuntimeError", "isinstance", "max", "list", "str", "cnnFilter.values"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "lines", "=", "self", ".", "translations", "[", "\"translations\"", "]", "\n", "self", ".", "in_nodes", "=", "len", "(", "self", ".", "translations", "[", "\"alive\"", "]", ")", "\n", "assert", "self", ".", "in_nodes", "==", "len", "(", "lines", ")", "\n", "\n", "self", ".", "kernel_size", "=", "max", "(", "[", "value", "for", "value", "in", "[", "max", "(", "list", "(", "cnnFilter", ".", "values", "(", ")", ")", ")", "for", "cnnFilter", "in", "lines", "]", "]", ")", "\n", "if", "isinstance", "(", "self", ".", "kernel_size", ",", "list", ")", ":", "\n", "            ", "self", ".", "kernel_size", "=", "self", ".", "kernel_size", "[", "0", "]", "\n", "\n", "", "indices", "=", "np", ".", "zeros", "(", "(", "self", ".", "in_nodes", ",", "self", ".", "kernel_size", ")", ")", "\n", "counts", "=", "np", ".", "zeros", "(", "(", "self", ".", "in_nodes", ",", ")", ")", "\n", "\n", "i", "=", "0", "\n", "for", "translation", "in", "lines", ":", "\n", "            ", "for", "vertex", ",", "directions", "in", "translation", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "directions", ",", "list", ")", ":", "\n", "                    ", "directions", "=", "[", "directions", "]", "\n", "", "for", "direction", "in", "directions", ":", "\n", "                    ", "indices", "[", "i", ",", "(", "direction", "-", "1", ")", "%", "self", ".", "kernel_size", "]", "=", "vertex", "+", "1", "\n", "counts", "[", "i", "]", "+=", "1", "\n", "", "", "i", "+=", "1", "\n", "\n", "", "self", ".", "indices", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "indices", ")", "\n", "for", "node", "in", "range", "(", "self", ".", "in_nodes", ")", ":", "\n", "            ", "if", "not", "(", "counts", "[", "node", "]", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Node '", "+", "str", "(", ")", "+", "' has no input connection.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.TernaryLayer.reset_parameters": [[196, 201], ["graph.TernaryLayer.weight.data.uniform_", "math.sqrt"], "methods", ["None"], ["", "", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "n", "*=", "self", ".", "kernel_size", "\n", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.TernaryLayer.forward": [[202, 240], ["torch.pad", "torch.pad", "torch.pad", "col.view.view.transpose_().contiguous", "col.view.view.view", "col.view.view.matmul", "end.view.view.view", "end.view.view.transpose_().contiguous", "len", "x.view.view.view", "len", "end.view.view.view", "RuntimeError", "RuntimeError", "len", "RuntimeError", "col.view.view.transpose_", "end.view.view.transpose_", "RuntimeError", "RuntimeError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# checking shape", "\n", "        ", "in_shape", "=", "x", ".", "shape", "\n", "if", "len", "(", "in_shape", ")", "==", "4", ":", "\n", "            ", "b", ",", "p", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "n", "=", "h", "*", "w", "\n", "if", "p", "!=", "self", ".", "in_channels", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Second dimension of x is not equal to in_channels'", ")", "\n", "", "if", "n", "!=", "self", ".", "in_nodes", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Third*Fourth dimensions of x is not equal to in_nodes'", ")", "\n", "", "x", "=", "x", ".", "view", "(", "b", ",", "p", ",", "n", ")", "\n", "", "elif", "len", "(", "in_shape", ")", "==", "3", ":", "\n", "            ", "b", ",", "p", ",", "n", "=", "x", ".", "shape", "\n", "if", "p", "!=", "self", ".", "in_channels", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Second dimension of x is not equal to in_channels'", ")", "\n", "", "if", "n", "!=", "self", ".", "in_nodes", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Third dimension of x is not equal to in_nodes'", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'In shape length is neither 3 of 4'", ")", "\n", "\n", "# gathering col", "\n", "", "padded", "=", "F", ".", "pad", "(", "x", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ")", ",", "'constant'", ",", "0", ")", "\n", "col", "=", "padded", "[", ":", ",", ":", ",", "self", ".", "indices", "]", "\n", "\n", "# tensordot x<b,p,n,k> * w<p,k,q>", "\n", "col", ".", "transpose_", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "k", "=", "self", ".", "kernel_size", "\n", "col", "=", "col", ".", "view", "(", "b", "*", "n", ",", "p", "*", "k", ")", "\n", "q", "=", "self", ".", "out_channels", "\n", "end", "=", "col", ".", "matmul", "(", "self", ".", "weight", ")", "\n", "end", "=", "end", ".", "view", "(", "b", ",", "n", ",", "q", ")", "\n", "end", ".", "transpose_", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# reshaping", "\n", "if", "len", "(", "in_shape", ")", "==", "4", ":", "\n", "            ", "end", "=", "end", ".", "view", "(", "b", ",", "q", ",", "h", ",", "w", ")", "\n", "\n", "", "return", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.TernaryLayer.__repr__": [[241, 246], ["str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "'in_channels='", "+", "str", "(", "self", ".", "in_channels", ")", "+", "', out_channels='", "+", "str", "(", "self", ".", "out_channels", ")", "+", "', translations_files='", "+", "str", "(", "self", ".", "translations_path", ")", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.GraphPreActResNet18": [[149, 151], ["graph.GraphPreActResNet"], "function", ["None"], ["", "", "def", "GraphPreActResNet18", "(", "translations_path", "=", "TRANSLATIONS_PATH", ")", ":", "\n", "    ", "return", "GraphPreActResNet", "(", "GraphPreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "translations_path", "=", "translations_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.graph.GraphPreActResNet16": [[152, 154], ["graph.GraphPreActResNet"], "function", ["None"], ["", "def", "GraphPreActResNet16", "(", "translations_path", "=", "TRANSLATIONS_PATH", ")", ":", "\n", "    ", "return", "GraphPreActResNet", "(", "GraphPreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "0", "]", ",", "translations_path", "=", "translations_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.pines_aux.Class_Balancing.__init__": [[17, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "type", "=", "\"undersampling\"", ",", "transform", "=", "False", ")", ":", "\n", "        ", "self", ".", "type", "=", "type", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.pines_aux.Class_Balancing.class_balancing": [[21, 26], ["pines_aux.Class_Balancing.class_balancing_undersampling", "pines_aux.Class_Balancing.class_balancing_replication"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.class_balancing_undersampling", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.class_balancing_replication"], ["", "def", "class_balancing", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "type", "==", "\"undersampling\"", ":", "\n", "            ", "return", "self", ".", "class_balancing_undersampling", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "class_balancing_replication", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.pines_aux.Class_Balancing.class_balancing_replication": [[27, 41], ["numpy.where", "numpy.where", "numpy.random.shuffle", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "numpy.where", "pines_aux.Class_Balancing.transform", "numpy.where", "numpy.where"], "methods", ["None"], ["", "", "def", "class_balancing_replication", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "y_1", "=", "np", ".", "where", "(", "y", "==", "0", ")", "[", "0", "]", "\n", "y_5", "=", "np", ".", "where", "(", "y", "==", "1", ")", "[", "0", "]", "\n", "while", "y_1", ".", "shape", "[", "0", "]", ">", "y_5", ".", "shape", "[", "0", "]", ":", "\n", "            ", "y_5", "=", "np", ".", "where", "(", "y", "==", "1", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "y_5", ")", "\n", "new", "=", "x", "[", "y_5", "[", "0", "]", "]", "\n", "new", "=", "self", ".", "transform", "(", "new", ")", "if", "self", ".", "transform", "else", "new", "\n", "new", "=", "np", ".", "expand_dims", "(", "new", ",", "0", ")", "\n", "x", "=", "np", ".", "concatenate", "(", "[", "x", ",", "new", "]", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "[", "y", ",", "[", "1", "]", "]", ")", "\n", "y_1", "=", "np", ".", "where", "(", "y", "==", "0", ")", "[", "0", "]", "\n", "y_5", "=", "np", ".", "where", "(", "y", "==", "1", ")", "[", "0", "]", "\n", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.pines_aux.Class_Balancing.class_balancing_undersampling": [[42, 51], ["numpy.random.shuffle", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.where", "numpy.where", "numpy.append"], "methods", ["None"], ["", "def", "class_balancing_undersampling", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "y_1", "=", "np", ".", "where", "(", "y", "==", "0", ")", "[", "0", "]", "\n", "y_5", "=", "np", ".", "where", "(", "y", "==", "1", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "y_1", ")", "\n", "y_1", "=", "y_1", "[", ":", "y_5", ".", "shape", "[", "0", "]", "]", "\n", "indexes", "=", "torch", ".", "LongTensor", "(", "np", ".", "append", "(", "y_1", ",", "y_5", ")", ")", "\n", "x", "=", "x", "[", "indexes", "]", "\n", "y", "=", "y", "[", "indexes", "]", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.pines_aux.Class_Balancing.__repr__": [[52, 54], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "type", "+", "\" \"", "+", "str", "(", "self", ".", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.pines_aux.Class_Balancing.__str__": [[55, 57], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "type", "+", "\" \"", "+", "str", "(", "self", ".", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.pines_aux.MiniGraphPreActResNet.__init__": [[59, 100], ["torch.Module.__init__", "list", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "pines_aux.MiniGraphPreActResNet.layers.append", "pines_aux.MiniGraphPreActResNet.layers.append", "int", "dict", "pines_aux.MiniGraphPreActResNet.layers.append", "pines_aux.MiniGraphPreActResNet.layers.append", "torch.Linear().cuda", "torch.Linear().cuda", "torch.Linear().cuda", "torch.Linear().cuda", "torch.Linear().cuda", "pines_aux.MiniGraphPreActResNet.conv().cuda", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "pines_aux.MiniGraphPreActResNet.conv"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conv_type", ",", "num_classes", "=", "2", ",", "dropout", "=", "False", ",", "layers", "=", "1", ",", "pooling", "=", "False", ")", ":", "\n", "        ", "super", "(", "MiniGraphPreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "conv_type", "[", "0", "]", "\n", "self", ".", "conv_dict", "=", "conv_type", "[", "1", "]", "\n", "self", ".", "linear", "=", "self", ".", "conv", "==", "\"linear\"", "\n", "if", "self", ".", "linear", ":", "\n", "            ", "self", ".", "last_layer_size", "=", "369", "\n", "self", ".", "layer_size", "=", "64", "\n", "", "else", ":", "\n", "            ", "self", ".", "last_layer_size", "=", "1", "\n", "self", ".", "layer_size", "=", "64", "\n", "", "self", ".", "layers", "=", "list", "(", ")", "\n", "self", ".", "pooling", "=", "pooling", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "0.1", ")", "if", "dropout", "else", "False", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.1", ")", "if", "dropout", "else", "False", "\n", "\n", "\n", "for", "_", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "self", ".", "linear", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "last_layer_size", ",", "self", ".", "layer_size", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "F", ".", "relu", ")", "\n", "self", ".", "last_layer_size", "=", "self", ".", "layer_size", "\n", "self", ".", "layer_size", "/=", "2", "\n", "self", ".", "layer_size", "=", "int", "(", "self", ".", "layer_size", ")", "\n", "pass", "\n", "", "else", ":", "\n", "                ", "parameters_dict", "=", "dict", "(", "self", ".", "conv_dict", ",", "\n", "in_channels", "=", "self", ".", "last_layer_size", ",", "\n", "out_channels", "=", "self", ".", "layer_size", ")", "\n", "self", ".", "layers", ".", "append", "(", "self", ".", "conv", "(", "**", "parameters_dict", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "F", ".", "relu", ")", "\n", "self", ".", "last_layer_size", "=", "self", ".", "layer_size", "\n", "self", ".", "layer_size", "*=", "2", "\n", "", "", "if", "self", ".", "linear", ":", "\n", "            ", "self", ".", "linear_size", "=", "self", ".", "last_layer_size", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear_size", "=", "369", "*", "self", ".", "last_layer_size", "if", "not", "self", ".", "pooling", "else", "self", ".", "last_layer_size", "\n", "", "self", ".", "linear_layer", "=", "nn", ".", "Linear", "(", "self", ".", "linear_size", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.pines_aux.MiniGraphPreActResNet.forward": [[103, 119], ["pines_aux.MiniGraphPreActResNet.linear_layer", "pines_aux.MiniGraphPreActResNet.dropout1", "x.view.view.view", "layer", "pines_aux.MiniGraphPreActResNet.dropout2", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "dropout", ":", "\n", "            ", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "", "if", "self", ".", "linear", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "369", ")", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "if", "not", "self", ".", "linear", ":", "\n", "            ", "if", "self", ".", "pooling", ":", "\n", "                ", "x", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "linear_size", ")", "\n", "", "", "if", "self", ".", "dropout", ":", "\n", "            ", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "linear_layer", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.pines_aux.PINESDataset.__init__": [[123, 166], ["numpy.random.seed", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "print", "numpy.load", "numpy.load", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.round().astype", "numpy.expand_dims().astype", "numpy.load.astype", "class_balancing.class_balancing", "numpy.bincount", "os.path.join", "os.path.join", "numpy.load", "numpy.load", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.round().astype", "numpy.round", "os.path.join", "os.path.join", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.expand_dims", "numpy.round", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.class_balancing"], ["    ", "def", "__init__", "(", "self", ",", "directory", "=", "\"../data/PINES/\"", ",", "mode", "=", "\"train\"", ",", "transform", "=", "False", ",", "class_balancing", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            directory (string): Path to the dataset.\n            mode (str): train = 90% Train, validation=10% Train, train+validation=100% train else test.\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n\n        \"\"\"", "\n", "self", ".", "directory", "=", "directory", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "x", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"X_train_vol16_1_5.npy\"", ")", ")", "\n", "y", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"y_train_vol16_1_5.npy\"", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "x", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "y", ")", "\n", "examples_threshold", "=", "np", ".", "round", "(", "x", ".", "shape", "[", "0", "]", "*", "0.9", ",", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "x", "=", "x", "[", ":", "examples_threshold", "]", "\n", "y", "=", "y", "[", ":", "examples_threshold", "]", "\n", "", "elif", "self", ".", "mode", "==", "\"validation\"", ":", "\n", "            ", "x", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"X_train_vol16_1_5.npy\"", ")", ")", "\n", "y", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"y_train_vol16_1_5.npy\"", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "x", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "y", ")", "\n", "examples_threshold", "=", "np", ".", "round", "(", "x", ".", "shape", "[", "0", "]", "*", "0.9", ",", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "x", "=", "x", "[", "examples_threshold", ":", "]", "\n", "y", "=", "y", "[", "examples_threshold", ":", "]", "\n", "", "elif", "mode", "==", "\"train+validation\"", ":", "\n", "            ", "x", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"X_train_vol16_1_5.npy\"", ")", ")", "\n", "y", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"y_train_vol16_1_5.npy\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"X_test_vol16_1_5.npy\"", ")", ")", "\n", "y", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"y_test_vol16_1_5.npy\"", ")", ")", "\n", "", "self", ".", "X", "=", "torch", ".", "FloatTensor", "(", "np", ".", "expand_dims", "(", "x", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "self", ".", "Y", "=", "torch", ".", "LongTensor", "(", "y", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "\n", "if", "class_balancing", "and", "mode", "in", "(", "\"train\"", ",", "\"train+validation\"", ")", ":", "\n", "            ", "self", ".", "X", ",", "self", ".", "Y", "=", "class_balancing", ".", "class_balancing", "(", "self", ".", "X", ",", "self", ".", "Y", ")", "\n", "", "print", "(", "self", ".", "mode", ",", "self", ".", "X", ".", "shape", ",", "np", ".", "bincount", "(", "self", ".", "Y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.pines_aux.PINESDataset.__len__": [[167, 169], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.pines_aux.PINESDataset.__getitem__": [[170, 175], ["pines_aux.PINESDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "[", "self", ".", "X", "[", "idx", "]", ",", "self", ".", "Y", "[", "idx", "]", "]", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "[", "0", "]", "=", "self", ".", "transform", "(", "sample", "[", "0", "]", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.pines_aux.train_pines": [[176, 264], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "pines_aux.PINESDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "pines_aux.PINESDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "pines_aux.MiniGraphPreActResNet", "torch.CrossEntropyLoss", "torch.Adam", "range", "round", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.train", "enumerate", "torch.nn.DataParallel.eval", "enumerate", "pines_aux.train_pines.train"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.cifar.train", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.cifar.train"], ["", "", "def", "train_pines", "(", "class_balancing", ",", "layers", ",", "conv_type", ",", "\n", "dropout", ",", "epochs", ",", "pooling", ",", "data_augmentation", ",", "validation", ")", ":", "\n", "\n", "    ", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "if", "data_augmentation", ":", "\n", "        ", "if", "isinstance", "(", "conv_type", "[", "1", "]", ",", "dict", ")", "and", "\"translations_path\"", "in", "conv_type", "[", "1", "]", ".", "keys", "(", ")", ":", "\n", "            ", "transform_train", "=", "graph", ".", "GraphCrop", "(", "conv_type", "[", "1", "]", "[", "\"translations_path\"", "]", ".", "replace", "(", "\".pkl\"", ",", "\"\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "transform_train", "=", "graph", ".", "GraphCrop", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "transform_train", "=", "False", "\n", "\n", "", "if", "validation", ":", "\n", "        ", "mode_train", "=", "\"train\"", "\n", "mode_test", "=", "\"validation\"", "\n", "", "else", ":", "\n", "        ", "mode_train", "=", "\"train+validation\"", "\n", "mode_test", "=", "\"test\"", "\n", "\n", "", "trainset", "=", "PINESDataset", "(", "mode", "=", "mode_train", ",", "transform", "=", "transform_train", ",", "class_balancing", "=", "class_balancing", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "128", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "\n", "testset", "=", "PINESDataset", "(", "mode", "=", "mode_test", ",", "transform", "=", "False", ",", "class_balancing", "=", "class_balancing", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "\n", "\n", "net", "=", "MiniGraphPreActResNet", "(", "conv_type", "=", "conv_type", ",", "\n", "dropout", "=", "dropout", ",", "layers", "=", "layers", ",", "pooling", "=", "pooling", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "net", "=", "net", ".", "cuda", "(", "0", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "def", "train", "(", "epoch", ")", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "            ", "if", "use_cuda", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "inputs", ",", "targets", "=", "Variable", "(", "inputs", ")", ",", "Variable", "(", "targets", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "\n", "", "", "def", "test", "(", ")", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "if", "use_cuda", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "inputs", ",", "targets", "=", "Variable", "(", "inputs", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "targets", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "# Save checkpoint.", "\n", "", "acc", "=", "100.", "*", "correct", "/", "total", "\n", "return", "acc", "\n", "", "best_acc", "=", "0", "\n", "last_acc", "=", "0", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "train", "(", "epoch", ")", "\n", "acc", "=", "test", "(", ")", "\n", "last_acc", "=", "acc", "\n", "if", "acc", ">", "best_acc", ":", "\n", "            ", "best_acc", "=", "acc", "\n", "", "", "return", "round", "(", "last_acc", ",", "2", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.pines_test.test_pines": [[22, 103], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "MiniChebNet", "pines_aux.PINESDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "pines_aux.PINESDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.CrossEntropyLoss", "torch.SGD", "range", "pines_test.test_pines.test"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.MiniChebNet", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.cifar.test"], ["def", "test_pines", "(", "lr", "=", "0.1", ",", "clip", "=", "0.25", ",", "k", "=", "5", ")", ":", "\n", "\n", "    ", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "best_acc", "=", "0", "# best test accuracy", "\n", "start_epoch", "=", "0", "# start from epoch 0 or last checkpoint epoch", "\n", "\n", "# Model", "\n", "perm", ",", "net", "=", "MiniChebNet", "(", "k", ")", "\n", "\n", "# Data", "\n", "trainset", "=", "PINESDataset", "(", "mode", "=", "\"train+validation\"", ",", "transform", "=", "False", ",", "class_balancing", "=", "False", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "128", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "testset", "=", "PINESDataset", "(", "mode", "=", "\"test\"", ",", "transform", "=", "False", ",", "class_balancing", "=", "False", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "net", ".", "cuda", "(", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "5e-4", ")", "\n", "\n", "# Training", "\n", "def", "train", "(", "epoch", ")", ":", "\n", "#    print(\"Epoch: {}\".format(epoch))", "\n", "        ", "net", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "            ", "inputs", "=", "reorder", "(", "perm", ",", "inputs", ")", "\n", "if", "use_cuda", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "inputs", ",", "targets", "=", "Variable", "(", "inputs", ")", ",", "Variable", "(", "targets", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm", "(", "net", ".", "parameters", "(", ")", ",", "clip", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "#        progress_bar(batch_idx, len(trainloader), 'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "#            % (train_loss/(batch_idx+1), 100.*correct/total, correct, total))", "\n", "\n", "", "", "def", "test", "(", "epoch", ")", ":", "\n", "        ", "global", "best_acc", "\n", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", "=", "reorder", "(", "perm", ",", "inputs", ")", "\n", "if", "use_cuda", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "inputs", ",", "targets", "=", "Variable", "(", "inputs", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "targets", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "#        progress_bar(batch_idx, len(testloader), 'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "#            % (test_loss/(batch_idx+1), 100.*correct/total, correct, total))", "\n", "\n", "# Save checkpoint.", "\n", "", "acc", "=", "100.", "*", "correct", "/", "total", "\n", "return", "round", "(", "acc", ",", "2", ")", "\n", "\n", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "start_epoch", "+", "20", ")", ":", "\n", "        ", "train", "(", "epoch", ")", "\n", "", "last", "=", "test", "(", "epoch", ")", "\n", "return", "last", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.utils.get_mean_and_std": [[15, 28], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.utils.init_params": [[29, 43], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["", "def", "init_params", "(", "net", ")", ":", "\n", "    ", "'''Init layer parameters.'''", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.utils.progress_bar": [[53, 95], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "utils.format_time", "utils.format_time", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.utils.format_time", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.utils.format_time"], ["def", "progress_bar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.defferard.utils.format_time": [[96, 127], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "", ""]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.my_sparse_mm.forward": [[27, 31], ["chebnet_preact_resnet.my_sparse_mm.save_for_backward", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["def", "forward", "(", "self", ",", "W", ",", "x", ")", ":", "# W is SPARSE", "\n", "        ", "self", ".", "save_for_backward", "(", "W", ",", "x", ")", "\n", "y", "=", "torch", ".", "mm", "(", "W", ",", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.my_sparse_mm.backward": [[32, 38], ["grad_output.clone", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "x.t", "W.t"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "W", ",", "x", "=", "self", ".", "saved_tensors", "\n", "grad_input", "=", "grad_output", ".", "clone", "(", ")", "\n", "grad_input_dL_dW", "=", "torch", ".", "mm", "(", "grad_input", ",", "x", ".", "t", "(", ")", ")", "\n", "grad_input_dL_dx", "=", "torch", ".", "mm", "(", "W", ".", "t", "(", ")", ",", "grad_input", ")", "\n", "return", "grad_input_dL_dW", ",", "grad_input_dL_dx", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.ChebConv.__init__": [[41, 54], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "numpy.sqrt", "chebnet_preact_resnet.ChebConv.cl.weight.data.uniform_", "chebnet_preact_resnet.ChebConv.cl.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "Fin", ",", "Fout", ",", "L", ",", "K", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "ChebConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "L", "=", "L", "\n", "self", ".", "Fin", "=", "Fin", "\n", "self", ".", "Fout", "=", "Fout", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "cl", "=", "nn", ".", "Linear", "(", "K", "*", "Fin", ",", "Fout", ",", "bias", ")", "\n", "scale", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "Fin", "+", "Fout", ")", ")", "\n", "self", ".", "cl", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "scale", ",", "scale", ")", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "self", ".", "cl", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.ChebConv.forward": [[55, 113], ["torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "torch.cat.size", "torch.cat.size", "torch.cat.size", "lmax_L", "rescale_L", "L.cuda.cuda.tocoo", "indices.type.type.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "indices.type.type.type", "L.cuda.cuda.data.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "L_data.type.type.type", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "x0.view.view.view", "x0.view.view.unsqueeze", "range", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "torch.cat.view", "torch.cat.view", "torch.cat.view", "chebnet_preact_resnet.ChebConv.cl", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "int", "int", "int", "numpy.column_stack", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "L.cuda.cuda.cuda", "x_.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "chebnet_preact_resnet.my_sparse_mm", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "torch.cat.permute", "x1.unsqueeze", "x2.unsqueeze", "chebnet_preact_resnet.my_sparse_mm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#(x, cl, L, lmax, Fout, K):", "\n", "\n", "# parameters", "\n", "# B = batch size", "\n", "# V = nb vertices", "\n", "# Fin = nb input features", "\n", "# Fout = nb output features", "\n", "# K = Chebyshev order & support size", "\n", "\n", "        ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "B", ",", "V", ",", "Fin", "=", "x", ".", "size", "(", ")", ";", "B", ",", "V", ",", "Fin", "=", "int", "(", "B", ")", ",", "int", "(", "V", ")", ",", "int", "(", "Fin", ")", "\n", "\n", "# rescale Laplacian", "\n", "lmax", "=", "lmax_L", "(", "self", ".", "L", ")", "\n", "L", "=", "rescale_L", "(", "self", ".", "L", ",", "lmax", ")", "\n", "\n", "# convert scipy sparse matric L to pytorch", "\n", "L", "=", "L", ".", "tocoo", "(", ")", "\n", "indices", "=", "np", ".", "column_stack", "(", "(", "L", ".", "row", ",", "L", ".", "col", ")", ")", ".", "T", "\n", "indices", "=", "indices", ".", "astype", "(", "np", ".", "int64", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "indices", ")", "\n", "indices", "=", "indices", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "L_data", "=", "L", ".", "data", ".", "astype", "(", "np", ".", "float32", ")", "\n", "L_data", "=", "torch", ".", "from_numpy", "(", "L_data", ")", "\n", "L_data", "=", "L_data", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "L", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "L_data", ",", "torch", ".", "Size", "(", "L", ".", "shape", ")", ")", "\n", "L", "=", "Variable", "(", "L", ",", "requires_grad", "=", "False", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "L", "=", "L", ".", "cuda", "(", ")", "\n", "\n", "# transform to Chebyshev basis", "\n", "", "x0", "=", "x", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# V x Fin x B", "\n", "x0", "=", "x0", ".", "view", "(", "[", "V", ",", "Fin", "*", "B", "]", ")", "# V x Fin*B", "\n", "x", "=", "x0", ".", "unsqueeze", "(", "0", ")", "# 1 x V x Fin*B", "\n", "\n", "def", "concat", "(", "x", ",", "x_", ")", ":", "\n", "            ", "x_", "=", "x_", ".", "unsqueeze", "(", "0", ")", "# 1 x V x Fin*B", "\n", "return", "torch", ".", "cat", "(", "(", "x", ",", "x_", ")", ",", "0", ")", "# K x V x Fin*B  ", "\n", "\n", "", "if", "self", ".", "K", ">", "1", ":", "\n", "            ", "x1", "=", "my_sparse_mm", "(", ")", "(", "L", ",", "x0", ")", "# V x Fin*B", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x1", ".", "unsqueeze", "(", "0", ")", ")", ",", "0", ")", "# 2 x V x Fin*B", "\n", "", "for", "k", "in", "range", "(", "2", ",", "self", ".", "K", ")", ":", "\n", "            ", "x2", "=", "2", "*", "my_sparse_mm", "(", ")", "(", "L", ",", "x1", ")", "-", "x0", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "x2", ".", "unsqueeze", "(", "0", ")", ")", ",", "0", ")", "# M x Fin*B", "\n", "x0", ",", "x1", "=", "x1", ",", "x2", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "[", "self", ".", "K", ",", "V", ",", "Fin", ",", "B", "]", ")", "# K x V x Fin x B     ", "\n", "x", "=", "x", ".", "permute", "(", "3", ",", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# B x V x Fin x K", "\n", "x", "=", "x", ".", "view", "(", "[", "B", "*", "V", ",", "Fin", "*", "self", ".", "K", "]", ")", "# B*V x Fin*K", "\n", "\n", "# Compose linearly Fin features to get Fout features", "\n", "x", "=", "self", ".", "cl", "(", "x", ")", "# B*V x Fout  ", "\n", "x", "=", "x", ".", "view", "(", "[", "B", ",", "V", ",", "self", ".", "Fout", "]", ")", "# B x V x Fout", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.ChebPreActBlock.__init__": [[118, 133], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "chebnet_preact_resnet.ChebConv", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "chebnet_preact_resnet.ChebConv", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "L1", ",", "K1", ",", "L2", "=", "None", ",", "K2", "=", "None", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "ChebPreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "stride", "==", "1", ":", "\n", "            ", "assert", "(", "L2", "is", "None", "and", "K2", "is", "None", ")", "or", "(", "L2", "is", "L1", "and", "K2", "==", "K1", ")", "\n", "L2", ",", "K2", "=", "L1", ",", "K1", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "ChebConv", "(", "in_planes", ",", "planes", ",", "L1", ",", "K1", ",", "bias", "=", "False", ")", "#nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool1d", "(", "stride", ")", "#assuming vertices are correctly orderred", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "ChebConv", "(", "planes", ",", "planes", ",", "L2", ",", "K2", ",", "bias", "=", "False", ")", "#nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool1d", "(", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.ChebPreActBlock.forward": [[134, 142], ["torch.relu", "torch.relu", "torch.relu", "chebnet_preact_resnet.ChebPreActBlock.conv1", "chebnet_preact_resnet.ChebPreActBlock.pool1", "chebnet_preact_resnet.ChebPreActBlock.conv2", "chebnet_preact_resnet.ChebPreActBlock.bn1", "hasattr", "chebnet_preact_resnet.ChebPreActBlock.pool2", "torch.relu", "torch.relu", "torch.relu", "chebnet_preact_resnet.ChebPreActBlock.shortcut", "chebnet_preact_resnet.ChebPreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "pool2", "(", "self", ".", "shortcut", "(", "out", ")", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "pool1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.ChebPreActResNet.__init__": [[144, 157], ["torch.Module.__init__", "chebnet_preact_resnet.ChebConv", "chebnet_preact_resnet.ChebPreActResNet._make_layer", "chebnet_preact_resnet.ChebPreActResNet._make_layer", "chebnet_preact_resnet.ChebPreActResNet._make_layer", "chebnet_preact_resnet.ChebPreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "L_list", ",", "K_list", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ChebPreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "L_list", "=", "L_list", "\n", "self", ".", "K_list", "=", "K_list", "\n", "\n", "self", ".", "conv1", "=", "ChebConv", "(", "3", ",", "64", ",", "L_list", "[", "0", "]", ",", "K_list", "[", "0", "]", ",", "bias", "=", "False", ")", "#nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ",", "L1", "=", "L_list", "[", "0", "]", ",", "K1", "=", "K_list", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ",", "L1", "=", "L_list", "[", "0", "]", ",", "K1", "=", "K_list", "[", "0", "]", ",", "L2", "=", "L_list", "[", "1", "]", ",", "K2", "=", "K_list", "[", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ",", "L1", "=", "L_list", "[", "1", "]", ",", "K1", "=", "K_list", "[", "1", "]", ",", "L2", "=", "L_list", "[", "2", "]", ",", "K2", "=", "K_list", "[", "2", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ",", "L1", "=", "L_list", "[", "2", "]", ",", "K1", "=", "K_list", "[", "2", "]", ",", "L2", "=", "L_list", "[", "3", "]", ",", "K2", "=", "K_list", "[", "3", "]", ")", "\n", "#self.linear = nn.Linear(512*block.expansion, num_classes)", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", "*", "172", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.ChebPreActResNet._make_layer": [[158, 167], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ",", "L1", ",", "K1", ",", "L2", "=", "None", ",", "K2", "=", "None", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "L1", ",", "K1", ",", "L2", ",", "K2", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "if", "stride", ">", "1", ":", "\n", "                ", "L1", ",", "K1", "=", "L2", ",", "K2", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.ChebPreActResNet.forward": [[168, 178], ["chebnet_preact_resnet.ChebPreActResNet.conv1", "chebnet_preact_resnet.ChebPreActResNet.layer1", "chebnet_preact_resnet.ChebPreActResNet.layer2", "chebnet_preact_resnet.ChebPreActResNet.layer3", "chebnet_preact_resnet.ChebPreActResNet.layer4", "chebnet_preact_resnet.ChebPreActResNet.view", "chebnet_preact_resnet.ChebPreActResNet.linear", "chebnet_preact_resnet.ChebPreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "#out = F.avg_pool1d(out, 172) #F.avg_pool2d(out, 4)", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.SmallChebNet.__init__": [[180, 190], ["torch.Module.__init__", "chebnet_preact_resnet.ChebConv", "chebnet_preact_resnet.ChebConv", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "L_list", ",", "K_list", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "super", "(", "SmallChebNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "L_list", "=", "L_list", "\n", "self", ".", "K_list", "=", "K_list", "\n", "\n", "self", ".", "conv1", "=", "ChebConv", "(", "1", ",", "64", ",", "L_list", "[", "0", "]", ",", "K_list", "[", "0", "]", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "ChebConv", "(", "64", ",", "128", ",", "L_list", "[", "0", "]", ",", "K_list", "[", "0", "]", ",", "bias", "=", "False", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "128", "*", "369", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.SmallChebNet.forward": [[191, 203], ["chebnet_preact_resnet.SmallChebNet.view", "chebnet_preact_resnet.SmallChebNet.dropout1", "chebnet_preact_resnet.SmallChebNet.conv1", "torch.relu", "torch.relu", "torch.relu", "chebnet_preact_resnet.SmallChebNet.conv2", "torch.relu", "torch.relu", "torch.relu", "chebnet_preact_resnet.SmallChebNet.dropout2", "chebnet_preact_resnet.SmallChebNet.view", "chebnet_preact_resnet.SmallChebNet.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1", ",", "369", ")", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "128", "*", "369", ")", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.ChebPreActResNet18": [[205, 209], ["chebnet_preact_resnet.build_grid_graph", "len", "chebnet_preact_resnet.ChebPreActResNet"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.build_grid_graph"], ["", "", "def", "ChebPreActResNet18", "(", "K", "=", "25", ")", ":", "\n", "    ", "L_list", ",", "perm", "=", "build_grid_graph", "(", "4", ")", "\n", "K_list", "=", "[", "K", "]", "*", "len", "(", "L_list", ")", "\n", "return", "perm", ",", "ChebPreActResNet", "(", "ChebPreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "L_list", ",", "K_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.MiniChebNet": [[210, 214], ["chebnet_preact_resnet.read_graph", "len", "chebnet_preact_resnet.SmallChebNet"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.read_graph"], ["", "def", "MiniChebNet", "(", "K", "=", "25", ")", ":", "\n", "    ", "L_list", ",", "perm", "=", "read_graph", "(", "\"/home/crosarko/article-invite/graph_processing/ocaml/iaps-radius-small\"", ")", "\n", "K_list", "=", "[", "K", "]", "*", "len", "(", "L_list", ")", "\n", "return", "perm", ",", "SmallChebNet", "(", "L_list", ",", "K_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.ChebPreActResNet34": [[216, 220], ["chebnet_preact_resnet.build_grid_graph", "len", "chebnet_preact_resnet.ChebPreActResNet"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.build_grid_graph"], ["", "def", "ChebPreActResNet34", "(", "K", "=", "25", ")", ":", "\n", "    ", "L_list", ",", "perm", "=", "build_grid_graph", "(", "4", ")", "\n", "K_list", "=", "[", "K", "]", "*", "len", "(", "L_list", ")", "\n", "return", "perm", ",", "ChebPreActResNet", "(", "ChebPreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "L_list", ",", "K_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.build_grid_graph": [[221, 237], ["grid_graph", "coarsen", "range", "print", "lmax.append", "lmax_L", "str", "range"], "function", ["None"], ["", "def", "build_grid_graph", "(", "coarsening_levels", "=", "4", ")", ":", "\n", "    ", "grid_side", "=", "32", "\n", "number_edges", "=", "4", "\n", "metric", "=", "'euclidean'", "\n", "A", "=", "grid_graph", "(", "grid_side", ",", "number_edges", ",", "metric", ")", "# create graph of Euclidean grid", "\n", "\n", "# Compute coarsened graphs", "\n", "L_list", ",", "perm", "=", "coarsen", "(", "A", ",", "coarsening_levels", ")", "\n", "\n", "# Compute max eigenvalue of graph Laplacians", "\n", "lmax", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "coarsening_levels", ")", ":", "\n", "        ", "lmax", ".", "append", "(", "lmax_L", "(", "L_list", "[", "i", "]", ")", ")", "\n", "", "print", "(", "'lmax: '", "+", "str", "(", "[", "lmax", "[", "i", "]", "for", "i", "in", "range", "(", "coarsening_levels", ")", "]", ")", ")", "\n", "\n", "return", "L_list", ",", "perm", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.read_graph_aux": [[238, 254], ["open", "open.readlines", "enumerate", "sparse.csr_matrix", "int", "numpy.zeros", "print", "line.replace().split", "int", "line.replace"], "function", ["None"], ["", "def", "read_graph_aux", "(", "filename", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "index", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "if", "index", "==", "0", ":", "\n", "            ", "N", "=", "int", "(", "line", ")", "\n", "A", "=", "np", ".", "zeros", "(", "(", "N", ",", "N", ")", ")", "\n", "print", "(", "line", ")", "\n", "", "else", ":", "\n", "            ", "splitted", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", ".", "split", "(", "\" \"", ")", "\n", "for", "value", "in", "splitted", ":", "\n", "                ", "value", "=", "int", "(", "value", ")", "\n", "A", "[", "index", "-", "1", ",", "value", "]", "=", "1", "\n", "", "", "", "from", "scipy", "import", "sparse", "\n", "A", "=", "sparse", ".", "csr_matrix", "(", "A", ")", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.read_graph": [[255, 268], ["chebnet_preact_resnet.read_graph_aux", "coarsen", "range", "print", "lmax.append", "lmax_L", "str", "range"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.read_graph_aux"], ["", "def", "read_graph", "(", "filename", ",", "coarsening_levels", "=", "0", ")", ":", "\n", "    ", "A", "=", "read_graph_aux", "(", "filename", ")", "\n", "\n", "# Compute coarsened graphs", "\n", "L_list", ",", "perm", "=", "coarsen", "(", "A", ",", "coarsening_levels", ")", "\n", "\n", "# Compute max eigenvalue of graph Laplacians", "\n", "lmax", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "coarsening_levels", ")", ":", "\n", "        ", "lmax", ".", "append", "(", "lmax_L", "(", "L_list", "[", "i", "]", ")", ")", "\n", "", "print", "(", "'lmax: '", "+", "str", "(", "[", "lmax", "[", "i", "]", "for", "i", "in", "range", "(", "coarsening_levels", ")", "]", ")", ")", "\n", "\n", "return", "L_list", ",", "perm", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.reorder": [[282, 286], ["perm_data"], "function", ["None"], ["", "def", "reorder", "(", "perm", ",", "data", ",", ")", ":", "\n", "# Reindex nodes to satisfy a binary tree structure", "\n", "    ", "data", "=", "perm_data", "(", "data", ",", "perm", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.test": [[288, 292], ["chebnet_preact_resnet.ChebPreActResNet18", "ChebPreActResNet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.ChebPreActResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ChebPreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.PreActBlock.__init__": [[18, 28], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.PreActBlock.forward": [[30, 37], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.conv1", "preact_resnet.PreActBlock.conv2", "preact_resnet.PreActBlock.bn1", "hasattr", "preact_resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.PreActBottleneck.__init__": [[43, 55], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.PreActBottleneck.forward": [[57, 65], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.conv1", "preact_resnet.PreActBottleneck.conv2", "preact_resnet.PreActBottleneck.conv3", "preact_resnet.PreActBottleneck.bn1", "hasattr", "preact_resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.bn2", "preact_resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.PreActResNet.__init__": [[68, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "preact_resnet.PreActResNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "last_layer", "=", "256", "\n", "if", "num_blocks", "[", "3", "]", ">", "0", ":", "\n", "            ", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "last_layer", "=", "512", "\n", "", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "last_layer", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.PreActResNet._make_layer": [[83, 90], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.PreActResNet.forward": [[91, 103], ["preact_resnet.PreActResNet.conv1", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.PreActResNet.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "preact_resnet.PreActResNet.linear", "preact_resnet.PreActResNet.layer4", "preact_resnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "if", "self", ".", "num_blocks", "[", "3", "]", ">", "0", ":", "\n", "            ", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "self", ".", "last_layer", ",", "-", "1", ")", "\n", "out", "=", "torch", ".", "mean", "(", "out", ",", "2", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.PreActResNet18": [[105, 107], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "", "def", "PreActResNet18", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.PreActResNet34": [[111, 113], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet34", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.PreActResNet50": [[114, 116], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet50", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.PreActResNet101": [[117, 119], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet101", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.PreActResNet152": [[120, 122], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet152", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.test": [[124, 128], ["preact_resnet.PreActResNet18", "PreActResNet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.PreActResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.preact_resnet.PreActResNet16": [[108, 110], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet16", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.cifar.train": [[118, 141], ["print", "net.train", "enumerate", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "targets.size", "predicted.eq().cpu().sum", "utils.progress_bar", "torch.autograd.Variable", "torch.autograd.Variable", "len", "inputs.cuda", "targets.cuda", "predicted.eq().cpu", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.cifar.train", "home.repos.pwc.inspect_result.brain-bzh_MCNN.models.chebnet_preact_resnet.my_sparse_mm.backward", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.utils.progress_bar"], ["test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "inputs", "=", "reorder", "(", "perm", ",", "inputs", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "inputs", ",", "targets", "=", "Variable", "(", "inputs", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "targets", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "progress_bar", "(", "batch_idx", ",", "len", "(", "testloader", ")", ",", "'Loss: %.3f | Acc: %.3f%% (%d/%d)'", "\n", "%", "(", "test_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "\n", "# Save checkpoint.", "\n", "", "acc", "=", "100.", "*", "correct", "/", "total", "\n", "#if acc > best_acc:", "\n", "if", "True", ":", "\n", "#print('Saving..')", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.cifar.test": [[142, 175], ["net.eval", "enumerate", "net", "criterion", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "targets.size", "predicted.eq().cpu().sum", "utils.progress_bar", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.autograd.Variable", "torch.autograd.Variable", "len", "os.path.isdir", "os.mkdir", "inputs.cuda", "targets.cuda", "predicted.eq().cpu", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.utils.progress_bar"], ["        ", "state", "=", "{", "\n", "'net'", ":", "net", ".", "module", "if", "use_cuda", "else", "net", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/ckpt.t7'", ")", "\n", "best_acc", "=", "acc", "\n", "\n", "\n", "", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "start_epoch", "+", "args", ".", "epochs", ")", ":", "\n", "    ", "train", "(", "epoch", ")", "\n", "test", "(", "epoch", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphCrop.__init__": [[25, 38], ["ast.literal_eval", "list", "open().read", "dict", "translation.items", "graph.GraphCrop.inverted_translations.append", "open", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "translations_path", "=", "TRANSLATIONS_PATH_CROP", ",", "times_to_translate", "=", "4", ")", ":", "\n", "        ", "self", ".", "translations_path", "=", "translations_path", "\n", "self", ".", "translations", "=", "ast", ".", "literal_eval", "(", "open", "(", "translations_path", ",", "\"r\"", ")", ".", "read", "(", ")", ")", "\n", "self", ".", "inverted_translations", "=", "list", "(", ")", "\n", "for", "translation", "in", "self", ".", "translations", ":", "\n", "            ", "dict_", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "translation", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "                    ", "v", "=", "[", "v", "]", "\n", "", "for", "value", "in", "v", ":", "\n", "                    ", "dict_", "[", "value", "]", "=", "k", "\n", "", "", "self", ".", "inverted_translations", ".", "append", "(", "dict_", ")", "\n", "", "self", ".", "times_to_translate", "=", "times_to_translate", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphCrop.shift_direction": [[39, 52], ["image.view.view.view", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "image.view.view.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "inverted_dict.keys", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "image.view.view.size", "image.view.view.size"], "methods", ["None"], ["", "def", "shift_direction", "(", "self", ",", "image", ",", "direction", ")", ":", "\n", "        ", "image", "=", "image", ".", "view", "(", "3", ",", "1024", ")", "\n", "zeros", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "zeros_like", "(", "image", ")", "[", ":", ",", "0", "]", ",", "1", ")", "\n", "directions", "=", "(", "torch", ".", "zeros", "(", "image", ".", "size", "(", ")", "[", "1", "]", ")", "-", "1", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "for", "index_node", ",", "inverted_dict", "in", "enumerate", "(", "self", ".", "inverted_translations", ")", ":", "\n", "            ", "if", "direction", "in", "inverted_dict", ".", "keys", "(", ")", ":", "\n", "                ", "directions", "[", "index_node", "]", "=", "inverted_dict", "[", "direction", "]", "\n", "", "else", ":", "\n", "                ", "directions", "[", "index_node", "]", "=", "image", ".", "size", "(", ")", "[", "1", "]", "\n", "", "", "image", "=", "torch", ".", "cat", "(", "[", "image", ",", "zeros", "]", ",", "dim", "=", "1", ")", "\n", "image", "=", "image", "[", ":", ",", "directions", "]", "\n", "image", "=", "image", ".", "view", "(", "3", ",", "32", ",", "32", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphCrop.__call__": [[55, 67], ["numpy.random.randint", "range", "numpy.random.randint", "graph.GraphCrop.shift_direction"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphCrop.shift_direction"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (torch tensor): torch graph tensor to be cropped.\n        Returns:\n            torch tensor: cropped torch graph tensor\n        \"\"\"", "\n", "times", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "times_to_translate", "+", "1", ")", "\n", "for", "_", "in", "range", "(", "times", ")", ":", "\n", "            ", "direction", "=", "np", ".", "random", ".", "randint", "(", "2", ",", "6", ")", "\n", "img", "=", "self", ".", "shift_direction", "(", "img", ",", "direction", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphCrop.__repr__": [[68, 70], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "translations_path", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphCrop.__str__": [[71, 73], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "translations_path", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActBlock.__init__": [[79, 95], ["torch.Module.__init__", "pickle.load", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "graph.TernaryLayer", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "graph.TernaryLayer", "open", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.Sequential", "torch.Sequential", "torch.Sequential", "numpy.array", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "number_of_strides", ",", "stride", "=", "False", ",", "translations_path", "=", "TRANSLATIONS_PATH", ")", ":", "\n", "        ", "super", "(", "GraphPreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "translations", "=", "pickle", ".", "load", "(", "open", "(", "translations_path", ",", "\"rb\"", ")", ")", "\n", "if", "self", ".", "stride", ":", "\n", "            ", "self", ".", "alive_indexes", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "np", ".", "array", "(", "self", ".", "translations", "[", "number_of_strides", "]", "[", "\"alive\"", "]", ")", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "TernaryLayer", "(", "in_channels", "=", "in_planes", ",", "number_of_strides", "=", "number_of_strides", ",", "out_channels", "=", "planes", ",", "translations_path", "=", "translations_path", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "TernaryLayer", "(", "in_channels", "=", "planes", ",", "number_of_strides", "=", "number_of_strides", ",", "out_channels", "=", "planes", ",", "translations_path", "=", "translations_path", ")", "\n", "\n", "if", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActBlock.forward": [[97, 107], ["torch.relu", "torch.relu", "torch.relu", "graph.GraphPreActBlock.conv1", "graph.GraphPreActBlock.conv2", "graph.GraphPreActBlock.bn1", "hasattr", "graph.GraphPreActBlock.shortcut().view", "torch.relu", "torch.relu", "torch.relu", "graph.GraphPreActBlock.bn2", "graph.GraphPreActBlock.shortcut", "graph.GraphPreActBlock.size", "graph.GraphPreActBlock.view", "graph.GraphPreActBlock.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", ",", "self", ".", "alive_indexes", "]", "\n", "\n", "", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ".", "view", "(", "-", "1", ",", "self", ".", "in_planes", ",", "out", ".", "size", "(", ")", "[", "2", "]", ",", "1", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "planes", ",", "out", ".", "size", "(", ")", "[", "2", "]", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet.__init__": [[110, 126], ["torch.Module.__init__", "graph.TernaryLayer", "graph.GraphPreActResNet._make_layer", "graph.GraphPreActResNet._make_layer", "graph.GraphPreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "graph.GraphPreActResNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "translations_path", "=", "TRANSLATIONS_PATH", ")", ":", "\n", "        ", "super", "(", "GraphPreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "number_of_strides", "=", "0", "\n", "self", ".", "num_blocks", "=", "num_blocks", "\n", "self", ".", "translations_path", "=", "translations_path", "\n", "\n", "self", ".", "conv1", "=", "TernaryLayer", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "translations_path", "=", "self", ".", "translations_path", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "False", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "True", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "True", ")", "\n", "self", ".", "last_layer", "=", "256", "\n", "if", "self", ".", "num_blocks", "[", "3", "]", ">", "0", ":", "\n", "            ", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "True", ")", "\n", "self", ".", "last_layer", "=", "512", "\n", "", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "last_layer", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet._make_layer": [[127, 136], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "False", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "if", "stride", ":", "\n", "                ", "self", ".", "number_of_strides", "+=", "1", "\n", "", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "self", ".", "number_of_strides", ",", "stride", ",", "translations_path", "=", "self", ".", "translations_path", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet.forward": [[137, 148], ["x.view.view.view", "graph.GraphPreActResNet.conv1", "graph.GraphPreActResNet.layer1", "graph.GraphPreActResNet.layer2", "graph.GraphPreActResNet.layer3", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "graph.GraphPreActResNet.linear", "graph.GraphPreActResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "32", "**", "2", ")", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "if", "self", ".", "num_blocks", "[", "3", "]", ">", "0", ":", "\n", "            ", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "", "out", "=", "torch", ".", "mean", "(", "out", ",", "2", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.TernaryLayer.__init__": [[156, 168], ["super().__init__", "graph.TernaryLayer.build", "numpy.ones", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "graph.TernaryLayer.reset_parameters", "pickle.load", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "open"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.TernaryLayer.build", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.TernaryLayer.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "number_of_strides", "=", "0", ",", "translations_path", "=", "TRANSLATIONS_PATH", ")", ":", "\n", "        ", "super", "(", "TernaryLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "translations_path", "=", "translations_path", "\n", "self", ".", "translations", "=", "pickle", ".", "load", "(", "open", "(", "self", ".", "translations_path", ",", "\"rb\"", ")", ")", "[", "number_of_strides", "]", "\n", "self", ".", "build", "(", ")", "\n", "\n", "weight", "=", "np", ".", "ones", "(", "(", "self", ".", "in_channels", "*", "self", ".", "kernel_size", ",", "self", ".", "out_channels", ")", ")", "\n", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "weight", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.TernaryLayer.build": [[169, 195], ["len", "max", "isinstance", "numpy.zeros", "numpy.zeros", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "range", "len", "translation.items", "RuntimeError", "isinstance", "max", "list", "str", "cnnFilter.values"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "lines", "=", "self", ".", "translations", "[", "\"translations\"", "]", "\n", "self", ".", "in_nodes", "=", "len", "(", "self", ".", "translations", "[", "\"alive\"", "]", ")", "\n", "assert", "self", ".", "in_nodes", "==", "len", "(", "lines", ")", "\n", "\n", "self", ".", "kernel_size", "=", "max", "(", "[", "value", "for", "value", "in", "[", "max", "(", "list", "(", "cnnFilter", ".", "values", "(", ")", ")", ")", "for", "cnnFilter", "in", "lines", "]", "]", ")", "\n", "if", "isinstance", "(", "self", ".", "kernel_size", ",", "list", ")", ":", "\n", "            ", "self", ".", "kernel_size", "=", "self", ".", "kernel_size", "[", "0", "]", "\n", "\n", "", "indices", "=", "np", ".", "zeros", "(", "(", "self", ".", "in_nodes", ",", "self", ".", "kernel_size", ")", ")", "\n", "counts", "=", "np", ".", "zeros", "(", "(", "self", ".", "in_nodes", ",", ")", ")", "\n", "\n", "i", "=", "0", "\n", "for", "translation", "in", "lines", ":", "\n", "            ", "for", "vertex", ",", "directions", "in", "translation", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "directions", ",", "list", ")", ":", "\n", "                    ", "directions", "=", "[", "directions", "]", "\n", "", "for", "direction", "in", "directions", ":", "\n", "                    ", "indices", "[", "i", ",", "(", "direction", "-", "1", ")", "%", "self", ".", "kernel_size", "]", "=", "vertex", "+", "1", "\n", "counts", "[", "i", "]", "+=", "1", "\n", "", "", "i", "+=", "1", "\n", "\n", "", "self", ".", "indices", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "indices", ")", "\n", "for", "node", "in", "range", "(", "self", ".", "in_nodes", ")", ":", "\n", "            ", "if", "not", "(", "counts", "[", "node", "]", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Node '", "+", "str", "(", ")", "+", "' has no input connection.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.TernaryLayer.reset_parameters": [[196, 201], ["graph.TernaryLayer.weight.data.uniform_", "math.sqrt"], "methods", ["None"], ["", "", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "in_channels", "\n", "n", "*=", "self", ".", "kernel_size", "\n", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "n", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.TernaryLayer.forward": [[202, 240], ["torch.pad", "torch.pad", "torch.pad", "col.view.view.transpose_().contiguous", "col.view.view.view", "col.view.view.matmul", "end.view.view.view", "end.view.view.transpose_().contiguous", "len", "x.view.view.view", "len", "end.view.view.view", "RuntimeError", "RuntimeError", "len", "RuntimeError", "col.view.view.transpose_", "end.view.view.transpose_", "RuntimeError", "RuntimeError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# checking shape", "\n", "        ", "in_shape", "=", "x", ".", "shape", "\n", "if", "len", "(", "in_shape", ")", "==", "4", ":", "\n", "            ", "b", ",", "p", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "n", "=", "h", "*", "w", "\n", "if", "p", "!=", "self", ".", "in_channels", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Second dimension of x is not equal to in_channels'", ")", "\n", "", "if", "n", "!=", "self", ".", "in_nodes", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Third*Fourth dimensions of x is not equal to in_nodes'", ")", "\n", "", "x", "=", "x", ".", "view", "(", "b", ",", "p", ",", "n", ")", "\n", "", "elif", "len", "(", "in_shape", ")", "==", "3", ":", "\n", "            ", "b", ",", "p", ",", "n", "=", "x", ".", "shape", "\n", "if", "p", "!=", "self", ".", "in_channels", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Second dimension of x is not equal to in_channels'", ")", "\n", "", "if", "n", "!=", "self", ".", "in_nodes", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Third dimension of x is not equal to in_nodes'", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'In shape length is neither 3 of 4'", ")", "\n", "\n", "# gathering col", "\n", "", "padded", "=", "F", ".", "pad", "(", "x", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ")", ",", "'constant'", ",", "0", ")", "\n", "col", "=", "padded", "[", ":", ",", ":", ",", "self", ".", "indices", "]", "\n", "\n", "# tensordot x<b,p,n,k> * w<p,k,q>", "\n", "col", ".", "transpose_", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "k", "=", "self", ".", "kernel_size", "\n", "col", "=", "col", ".", "view", "(", "b", "*", "n", ",", "p", "*", "k", ")", "\n", "q", "=", "self", ".", "out_channels", "\n", "end", "=", "col", ".", "matmul", "(", "self", ".", "weight", ")", "\n", "end", "=", "end", ".", "view", "(", "b", ",", "n", ",", "q", ")", "\n", "end", ".", "transpose_", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "# reshaping", "\n", "if", "len", "(", "in_shape", ")", "==", "4", ":", "\n", "            ", "end", "=", "end", ".", "view", "(", "b", ",", "q", ",", "h", ",", "w", ")", "\n", "\n", "", "return", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.TernaryLayer.__repr__": [[241, 246], ["str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'('", "+", "'in_channels='", "+", "str", "(", "self", ".", "in_channels", ")", "+", "', out_channels='", "+", "str", "(", "self", ".", "out_channels", ")", "+", "', translations_files='", "+", "str", "(", "self", ".", "translations_path", ")", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet18": [[149, 151], ["graph.GraphPreActResNet"], "function", ["None"], ["", "", "def", "GraphPreActResNet18", "(", "translations_path", "=", "TRANSLATIONS_PATH", ")", ":", "\n", "    ", "return", "GraphPreActResNet", "(", "GraphPreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "translations_path", "=", "translations_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.graph.GraphPreActResNet16": [[152, 154], ["graph.GraphPreActResNet"], "function", ["None"], ["", "def", "GraphPreActResNet16", "(", "translations_path", "=", "TRANSLATIONS_PATH", ")", ":", "\n", "    ", "return", "GraphPreActResNet", "(", "GraphPreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "0", "]", ",", "translations_path", "=", "translations_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.__init__": [[17, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "type", "=", "\"undersampling\"", ",", "transform", "=", "False", ")", ":", "\n", "        ", "self", ".", "type", "=", "type", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.class_balancing": [[21, 26], ["pines_aux.Class_Balancing.class_balancing_undersampling", "pines_aux.Class_Balancing.class_balancing_replication"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.class_balancing_undersampling", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.class_balancing_replication"], ["", "def", "class_balancing", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "type", "==", "\"undersampling\"", ":", "\n", "            ", "return", "self", ".", "class_balancing_undersampling", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "class_balancing_replication", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.class_balancing_replication": [[27, 41], ["numpy.where", "numpy.where", "numpy.random.shuffle", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "numpy.where", "pines_aux.Class_Balancing.transform", "numpy.where", "numpy.where"], "methods", ["None"], ["", "", "def", "class_balancing_replication", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "y_1", "=", "np", ".", "where", "(", "y", "==", "0", ")", "[", "0", "]", "\n", "y_5", "=", "np", ".", "where", "(", "y", "==", "1", ")", "[", "0", "]", "\n", "while", "y_1", ".", "shape", "[", "0", "]", ">", "y_5", ".", "shape", "[", "0", "]", ":", "\n", "            ", "y_5", "=", "np", ".", "where", "(", "y", "==", "1", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "y_5", ")", "\n", "new", "=", "x", "[", "y_5", "[", "0", "]", "]", "\n", "new", "=", "self", ".", "transform", "(", "new", ")", "if", "self", ".", "transform", "else", "new", "\n", "new", "=", "np", ".", "expand_dims", "(", "new", ",", "0", ")", "\n", "x", "=", "np", ".", "concatenate", "(", "[", "x", ",", "new", "]", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "[", "y", ",", "[", "1", "]", "]", ")", "\n", "y_1", "=", "np", ".", "where", "(", "y", "==", "0", ")", "[", "0", "]", "\n", "y_5", "=", "np", ".", "where", "(", "y", "==", "1", ")", "[", "0", "]", "\n", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.class_balancing_undersampling": [[42, 51], ["numpy.random.shuffle", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.where", "numpy.where", "numpy.append"], "methods", ["None"], ["", "def", "class_balancing_undersampling", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "y_1", "=", "np", ".", "where", "(", "y", "==", "0", ")", "[", "0", "]", "\n", "y_5", "=", "np", ".", "where", "(", "y", "==", "1", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "y_1", ")", "\n", "y_1", "=", "y_1", "[", ":", "y_5", ".", "shape", "[", "0", "]", "]", "\n", "indexes", "=", "torch", ".", "LongTensor", "(", "np", ".", "append", "(", "y_1", ",", "y_5", ")", ")", "\n", "x", "=", "x", "[", "indexes", "]", "\n", "y", "=", "y", "[", "indexes", "]", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.__repr__": [[52, 54], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "type", "+", "\" \"", "+", "str", "(", "self", ".", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.__str__": [[55, 57], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "type", "+", "\" \"", "+", "str", "(", "self", ".", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.MiniGraphPreActResNet.__init__": [[59, 100], ["torch.Module.__init__", "list", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "pines_aux.MiniGraphPreActResNet.layers.append", "pines_aux.MiniGraphPreActResNet.layers.append", "int", "dict", "pines_aux.MiniGraphPreActResNet.layers.append", "pines_aux.MiniGraphPreActResNet.layers.append", "torch.Linear().cuda", "torch.Linear().cuda", "torch.Linear().cuda", "torch.Linear().cuda", "torch.Linear().cuda", "pines_aux.MiniGraphPreActResNet.conv().cuda", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "pines_aux.MiniGraphPreActResNet.conv"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conv_type", ",", "num_classes", "=", "2", ",", "dropout", "=", "False", ",", "layers", "=", "1", ",", "pooling", "=", "False", ")", ":", "\n", "        ", "super", "(", "MiniGraphPreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "conv_type", "[", "0", "]", "\n", "self", ".", "conv_dict", "=", "conv_type", "[", "1", "]", "\n", "self", ".", "linear", "=", "self", ".", "conv", "==", "\"linear\"", "\n", "if", "self", ".", "linear", ":", "\n", "            ", "self", ".", "last_layer_size", "=", "369", "\n", "self", ".", "layer_size", "=", "64", "\n", "", "else", ":", "\n", "            ", "self", ".", "last_layer_size", "=", "1", "\n", "self", ".", "layer_size", "=", "64", "\n", "", "self", ".", "layers", "=", "list", "(", ")", "\n", "self", ".", "pooling", "=", "pooling", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "0.1", ")", "if", "dropout", "else", "False", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "0.1", ")", "if", "dropout", "else", "False", "\n", "\n", "\n", "for", "_", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "self", ".", "linear", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "last_layer_size", ",", "self", ".", "layer_size", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "F", ".", "relu", ")", "\n", "self", ".", "last_layer_size", "=", "self", ".", "layer_size", "\n", "self", ".", "layer_size", "/=", "2", "\n", "self", ".", "layer_size", "=", "int", "(", "self", ".", "layer_size", ")", "\n", "pass", "\n", "", "else", ":", "\n", "                ", "parameters_dict", "=", "dict", "(", "self", ".", "conv_dict", ",", "\n", "in_channels", "=", "self", ".", "last_layer_size", ",", "\n", "out_channels", "=", "self", ".", "layer_size", ")", "\n", "self", ".", "layers", ".", "append", "(", "self", ".", "conv", "(", "**", "parameters_dict", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "F", ".", "relu", ")", "\n", "self", ".", "last_layer_size", "=", "self", ".", "layer_size", "\n", "self", ".", "layer_size", "*=", "2", "\n", "", "", "if", "self", ".", "linear", ":", "\n", "            ", "self", ".", "linear_size", "=", "self", ".", "last_layer_size", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear_size", "=", "369", "*", "self", ".", "last_layer_size", "if", "not", "self", ".", "pooling", "else", "self", ".", "last_layer_size", "\n", "", "self", ".", "linear_layer", "=", "nn", ".", "Linear", "(", "self", ".", "linear_size", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.MiniGraphPreActResNet.forward": [[103, 119], ["pines_aux.MiniGraphPreActResNet.linear_layer", "pines_aux.MiniGraphPreActResNet.dropout1", "x.view.view.view", "layer", "pines_aux.MiniGraphPreActResNet.dropout2", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "dropout", ":", "\n", "            ", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "", "if", "self", ".", "linear", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "369", ")", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "if", "not", "self", ".", "linear", ":", "\n", "            ", "if", "self", ".", "pooling", ":", "\n", "                ", "x", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "linear_size", ")", "\n", "", "", "if", "self", ".", "dropout", ":", "\n", "            ", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "linear_layer", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__init__": [[123, 166], ["numpy.random.seed", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "print", "numpy.load", "numpy.load", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.round().astype", "numpy.expand_dims().astype", "numpy.load.astype", "class_balancing.class_balancing", "numpy.bincount", "os.path.join", "os.path.join", "numpy.load", "numpy.load", "numpy.random.shuffle", "numpy.random.shuffle", "numpy.round().astype", "numpy.round", "os.path.join", "os.path.join", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.expand_dims", "numpy.round", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.Class_Balancing.class_balancing"], ["    ", "def", "__init__", "(", "self", ",", "directory", "=", "\"../data/PINES/\"", ",", "mode", "=", "\"train\"", ",", "transform", "=", "False", ",", "class_balancing", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            directory (string): Path to the dataset.\n            mode (str): train = 90% Train, validation=10% Train, train+validation=100% train else test.\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n\n        \"\"\"", "\n", "self", ".", "directory", "=", "directory", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "if", "self", ".", "mode", "==", "\"train\"", ":", "\n", "            ", "x", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"X_train_vol16_1_5.npy\"", ")", ")", "\n", "y", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"y_train_vol16_1_5.npy\"", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "x", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "y", ")", "\n", "examples_threshold", "=", "np", ".", "round", "(", "x", ".", "shape", "[", "0", "]", "*", "0.9", ",", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "x", "=", "x", "[", ":", "examples_threshold", "]", "\n", "y", "=", "y", "[", ":", "examples_threshold", "]", "\n", "", "elif", "self", ".", "mode", "==", "\"validation\"", ":", "\n", "            ", "x", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"X_train_vol16_1_5.npy\"", ")", ")", "\n", "y", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"y_train_vol16_1_5.npy\"", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "x", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "y", ")", "\n", "examples_threshold", "=", "np", ".", "round", "(", "x", ".", "shape", "[", "0", "]", "*", "0.9", ",", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "x", "=", "x", "[", "examples_threshold", ":", "]", "\n", "y", "=", "y", "[", "examples_threshold", ":", "]", "\n", "", "elif", "mode", "==", "\"train+validation\"", ":", "\n", "            ", "x", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"X_train_vol16_1_5.npy\"", ")", ")", "\n", "y", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"y_train_vol16_1_5.npy\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"X_test_vol16_1_5.npy\"", ")", ")", "\n", "y", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "\"y_test_vol16_1_5.npy\"", ")", ")", "\n", "", "self", ".", "X", "=", "torch", ".", "FloatTensor", "(", "np", ".", "expand_dims", "(", "x", ",", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "self", ".", "Y", "=", "torch", ".", "LongTensor", "(", "y", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "\n", "if", "class_balancing", "and", "mode", "in", "(", "\"train\"", ",", "\"train+validation\"", ")", ":", "\n", "            ", "self", ".", "X", ",", "self", ".", "Y", "=", "class_balancing", ".", "class_balancing", "(", "self", ".", "X", ",", "self", ".", "Y", ")", "\n", "", "print", "(", "self", ".", "mode", ",", "self", ".", "X", ".", "shape", ",", "np", ".", "bincount", "(", "self", ".", "Y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__len__": [[167, 169], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.PINESDataset.__getitem__": [[170, 175], ["pines_aux.PINESDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "[", "self", ".", "X", "[", "idx", "]", ",", "self", ".", "Y", "[", "idx", "]", "]", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "[", "0", "]", "=", "self", ".", "transform", "(", "sample", "[", "0", "]", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.pines_aux.train_pines": [[176, 264], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "pines_aux.PINESDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "pines_aux.PINESDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "pines_aux.MiniGraphPreActResNet", "torch.CrossEntropyLoss", "torch.Adam", "range", "round", "torch.nn.DataParallel.cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.train", "enumerate", "torch.nn.DataParallel.eval", "enumerate", "pines_aux.train_pines.train"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.cifar.train", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.cifar.train"], ["", "", "def", "train_pines", "(", "class_balancing", ",", "layers", ",", "conv_type", ",", "\n", "dropout", ",", "epochs", ",", "pooling", ",", "data_augmentation", ",", "validation", ")", ":", "\n", "\n", "    ", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "if", "data_augmentation", ":", "\n", "        ", "if", "isinstance", "(", "conv_type", "[", "1", "]", ",", "dict", ")", "and", "\"translations_path\"", "in", "conv_type", "[", "1", "]", ".", "keys", "(", ")", ":", "\n", "            ", "transform_train", "=", "graph", ".", "GraphCrop", "(", "conv_type", "[", "1", "]", "[", "\"translations_path\"", "]", ".", "replace", "(", "\".pkl\"", ",", "\"\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "transform_train", "=", "graph", ".", "GraphCrop", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "transform_train", "=", "False", "\n", "\n", "", "if", "validation", ":", "\n", "        ", "mode_train", "=", "\"train\"", "\n", "mode_test", "=", "\"validation\"", "\n", "", "else", ":", "\n", "        ", "mode_train", "=", "\"train+validation\"", "\n", "mode_test", "=", "\"test\"", "\n", "\n", "", "trainset", "=", "PINESDataset", "(", "mode", "=", "mode_train", ",", "transform", "=", "transform_train", ",", "class_balancing", "=", "class_balancing", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "128", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "\n", "testset", "=", "PINESDataset", "(", "mode", "=", "mode_test", ",", "transform", "=", "False", ",", "class_balancing", "=", "class_balancing", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "\n", "\n", "net", "=", "MiniGraphPreActResNet", "(", "conv_type", "=", "conv_type", ",", "\n", "dropout", "=", "dropout", ",", "layers", "=", "layers", ",", "pooling", "=", "pooling", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "net", "=", "net", ".", "cuda", "(", "0", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "def", "train", "(", "epoch", ")", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "            ", "if", "use_cuda", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "inputs", ",", "targets", "=", "Variable", "(", "inputs", ")", ",", "Variable", "(", "targets", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "\n", "", "", "def", "test", "(", ")", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "if", "use_cuda", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "inputs", ",", "targets", "=", "Variable", "(", "inputs", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "targets", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "# Save checkpoint.", "\n", "", "acc", "=", "100.", "*", "correct", "/", "total", "\n", "return", "acc", "\n", "", "best_acc", "=", "0", "\n", "last_acc", "=", "0", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "train", "(", "epoch", ")", "\n", "acc", "=", "test", "(", ")", "\n", "last_acc", "=", "acc", "\n", "if", "acc", ">", "best_acc", ":", "\n", "            ", "best_acc", "=", "acc", "\n", "", "", "return", "round", "(", "last_acc", ",", "2", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.utils.get_mean_and_std": [[15, 28], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.utils.init_params": [[29, 43], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["", "def", "init_params", "(", "net", ")", ":", "\n", "    ", "'''Init layer parameters.'''", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.utils.progress_bar": [[54, 96], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "utils.format_time", "utils.format_time", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.utils.format_time", "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.utils.format_time"], ["    ", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "def", "format_time", "(", "seconds", ")", ":", "\n"]], "home.repos.pwc.inspect_result.brain-bzh_MCNN.proposed.utils.format_time": [[97, 128], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "", ""]]}