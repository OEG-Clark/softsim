{"home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_SGNN.model_SGNN.__init__": [[8, 99], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.concat", "range", "tensorflow.split", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "model_SGNN.model_SGNN.bpr_loss", "tensorflow.train.RMSPropOptimizer", "model_SGNN.model_SGNN.opt.minimize", "tensorflow.matmul", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.concat", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "model_SGNN.model_SGNN.mse_loss", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "model_SGNN.model_SGNN.regularization", "tensorflow.nn.top_k", "range", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.tanh", "tensorflow.nn.tanh"], "methods", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.bpr_loss", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.mse_loss", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.regularization"], ["    ", "def", "__init__", "(", "self", ",", "n_users", ",", "n_items", ",", "lr", ",", "lamda", ",", "emb_dim", ",", "layer", ",", "pre_train_latent_factor", ",", "propagation_embeddings", ",", "\n", "if_pretrain", ",", "prop_emb", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "'SGNN'", "\n", "self", ".", "n_users", "=", "n_users", "\n", "self", ".", "n_items", "=", "n_items", "\n", "## hyperparameters", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "lamda", "=", "lamda", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "if", "prop_emb", "==", "'RM'", ":", "self", ".", "prop_dim", "=", "propagation_embeddings", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "layer", "=", "layer", "\n", "## model parameters", "\n", "self", ".", "U", ",", "self", ".", "V", "=", "pre_train_latent_factor", "\n", "if", "prop_emb", "==", "'RM'", ":", "[", "self", ".", "P", ",", "self", ".", "Q", "]", "=", "propagation_embeddings", "\n", "if", "prop_emb", "==", "'SF'", ":", "self", ".", "propagation_sf", "=", "propagation_embeddings", "\n", "self", ".", "if_pretrain", "=", "if_pretrain", "\n", "self", ".", "prop_emb", "=", "prop_emb", "\n", "self", ".", "layer_weight", "=", "[", "1", "/", "(", "l", "+", "1", ")", "**", "1", "for", "l", "in", "range", "(", "self", ".", "layer", "+", "1", ")", "]", "\n", "\n", "## placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ")", ")", "\n", "self", ".", "items_in_train_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ")", "\n", "self", ".", "top_k", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ")", "\n", "\n", "## learnable parameters", "\n", "if", "self", ".", "if_pretrain", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "U", ",", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "V", ",", "name", "=", "'item_embeddings'", ")", "\n", "if", "self", ".", "prop_emb", "==", "'RM'", ":", "\n", "                ", "self", ".", "user_propagation", "=", "tf", ".", "Variable", "(", "self", ".", "P", ",", "name", "=", "'user_propagation'", ")", "\n", "self", ".", "item_propagation", "=", "tf", ".", "Variable", "(", "self", ".", "Q", ",", "name", "=", "'item_propagation'", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "name", "=", "'item_embeddings'", ")", "\n", "if", "self", ".", "prop_emb", "==", "'RM'", ":", "\n", "                ", "self", ".", "user_propagation", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "n_users", ",", "self", ".", "prop_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "name", "=", "'user_propagation'", ")", "\n", "self", ".", "item_propagation", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "n_items", ",", "self", ".", "prop_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "name", "=", "'item_propagation'", ")", "\n", "", "", "if", "self", ".", "prop_emb", "!=", "'SF'", ":", "self", ".", "normalization", "=", "tf", ".", "Variable", "(", "1", "/", "(", "self", ".", "n_users", "+", "self", ".", "n_items", ")", ",", "name", "=", "'normalization'", ")", "\n", "\n", "## propagation layers definition", "\n", "self", ".", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "prop_emb", "==", "'RM'", ":", "self", ".", "propagation_rm", "=", "tf", ".", "concat", "(", "[", "self", ".", "user_propagation", ",", "self", ".", "item_propagation", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "all_embeddings", "=", "self", ".", "embeddings", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "## low-pass graph convolution", "\n", "            ", "if", "self", ".", "prop_emb", "==", "'RM'", ":", "self", ".", "embeddings", "=", "tf", ".", "matmul", "(", "self", ".", "propagation_rm", ",", "tf", ".", "matmul", "(", "self", ".", "propagation_rm", ",", "self", ".", "embeddings", ",", "transpose_a", "=", "True", ",", "transpose_b", "=", "False", ")", ")", "\n", "if", "self", ".", "prop_emb", "==", "'SF'", ":", "self", ".", "embeddings", "=", "tf", ".", "matmul", "(", "self", ".", "propagation_sf", ",", "tf", ".", "matmul", "(", "self", ".", "propagation_sf", ",", "self", ".", "embeddings", ",", "transpose_a", "=", "True", ",", "transpose_b", "=", "False", ")", ")", "\n", "if", "self", ".", "prop_emb", "==", "'PE'", ":", "self", ".", "embeddings", "=", "tf", ".", "matmul", "(", "self", ".", "all_embeddings", ",", "tf", ".", "matmul", "(", "self", ".", "all_embeddings", ",", "self", ".", "embeddings", ",", "transpose_a", "=", "True", ",", "transpose_b", "=", "False", ")", ")", "\n", "if", "self", ".", "prop_emb", "==", "'SF'", ":", "self", ".", "all_embeddings", "+=", "self", ".", "layer_weight", "[", "l", "+", "1", "]", "*", "tf", ".", "nn", ".", "tanh", "(", "self", ".", "embeddings", ")", "\n", "else", ":", "self", ".", "all_embeddings", "+=", "self", ".", "layer_weight", "[", "l", "+", "1", "]", "*", "tf", ".", "nn", ".", "tanh", "(", "self", ".", "normalization", "*", "self", ".", "embeddings", ")", "\n", "", "self", ".", "user_all_embeddings", ",", "self", ".", "item_all_embeddings", "=", "tf", ".", "split", "(", "self", ".", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "\n", "## make prediction", "\n", "self", ".", "u_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_all_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "if", "self", ".", "prop_emb", "==", "'RM'", ":", "\n", "            ", "self", ".", "u_propagation", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_propagation", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_propagation", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_propagation", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_propagation", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_propagation", ",", "self", ".", "neg_items", ")", "\n", "\n", "## generalization", "\n", "", "self", ".", "u_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "neg_items", ")", "\n", "self", ".", "reg_list", "=", "[", "self", ".", "u_embeddings_reg", ",", "self", ".", "pos_i_embeddings_reg", ",", "self", ".", "neg_i_embeddings_reg", "]", "\n", "\n", "## loss function and updating", "\n", "self", ".", "loss", "=", "self", ".", "bpr_loss", "(", "self", ".", "u_embeddings", ",", "self", ".", "pos_i_embeddings", ",", "self", ".", "neg_i_embeddings", ")", "\n", "self", ".", "var_list", "=", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", "## learnable parameter list", "\n", "if", "self", ".", "prop_emb", "!=", "'SF'", ":", "self", ".", "var_list", "+=", "[", "self", ".", "normalization", "]", "\n", "if", "self", ".", "prop_emb", "==", "'RM'", ":", "\n", "            ", "self", ".", "loss", "+=", "self", ".", "mse_loss", "(", "self", ".", "u_propagation", ",", "self", ".", "pos_i_propagation", ",", "self", ".", "neg_i_propagation", ")", "\n", "self", ".", "var_list", "+=", "[", "self", ".", "user_propagation", ",", "self", ".", "item_propagation", "]", "\n", "self", ".", "u_propagation_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_propagation", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_propagation_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_propagation", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_propagation_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_propagation", ",", "self", ".", "neg_items", ")", "\n", "self", ".", "reg_list", "+=", "[", "self", ".", "u_propagation_reg", ",", "self", ".", "pos_i_propagation_reg", ",", "self", ".", "neg_i_propagation_reg", "]", "\n", "", "self", ".", "loss", "+=", "self", ".", "lamda", "*", "self", ".", "regularization", "(", "self", ".", "reg_list", ")", "\n", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "self", ".", "updates", "=", "self", ".", "opt", ".", "minimize", "(", "self", ".", "loss", ",", "var_list", "=", "self", ".", "var_list", ")", "\n", "\n", "## prediction", "\n", "self", ".", "all_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_embeddings", ",", "self", ".", "item_all_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "all_ratings", "+=", "self", ".", "items_in_train_data", "## set a very small value for the items appearing in the training set to make sure they are at the end of the sorted list", "\n", "self", ".", "top_items", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "all_ratings", ",", "k", "=", "self", ".", "top_k", ",", "sorted", "=", "True", ")", ".", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_SGNN.model_SGNN.bpr_loss": [[100, 106], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.negative", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_sum", "(", "maxi", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_SGNN.model_SGNN.mse_loss": [[107, 112], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "mse_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "1", "-", "pos_scores", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_scores", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_SGNN.model_SGNN.regularization": [[113, 117], ["tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "regularization", "(", "self", ",", "reg_list", ")", ":", "\n", "        ", "reg", "=", "0", "\n", "for", "para", "in", "reg_list", ":", "reg", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "para", ")", "\n", "return", "reg", "", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_data": [[13, 28], ["f.close", "len", "range", "random.shuffle", "open", "f.readline", "json.loads", "interactions.append", "max"], "function", ["None"], ["def", "read_data", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "line", "=", "f", ".", "readline", "(", ")", "\n", "data", "=", "json", ".", "loads", "(", "line", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "user_num", "=", "len", "(", "data", ")", "\n", "item_num", "=", "0", "\n", "interactions", "=", "[", "]", "\n", "for", "user", "in", "range", "(", "user_num", ")", ":", "\n", "        ", "for", "item", "in", "data", "[", "user", "]", ":", "\n", "            ", "interactions", ".", "append", "(", "(", "user", ",", "item", ")", ")", "\n", "item_num", "=", "max", "(", "item", ",", "item_num", ")", "\n", "", "", "item_num", "+=", "1", "\n", "rd", ".", "shuffle", "(", "interactions", ")", "\n", "return", "(", "data", ",", "interactions", ",", "user_num", ",", "item_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_bases": [[29, 38], ["f.close", "[].astype", "[].astype", "open", "f.readline", "json.loads", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "read_bases", "(", "path", ",", "fre_u", ",", "fre_v", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "line", "=", "f", ".", "readline", "(", ")", "\n", "bases", "=", "json", ".", "loads", "(", "line", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "[", "feat_u", ",", "feat_v", "]", "=", "bases", "\n", "feat_u", "=", "np", ".", "array", "(", "feat_u", ")", "[", ":", ",", "0", ":", "fre_u", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "feat_v", "=", "np", ".", "array", "(", "feat_v", ")", "[", ":", ",", "0", ":", "fre_v", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "[", "feat_u", ",", "feat_v", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_bases1": [[39, 48], ["f.close", "[].astype", "open", "f.readline", "json.loads", "range", "len", "numpy.sqrt", "numpy.array", "numpy.dot"], "function", ["None"], ["", "def", "read_bases1", "(", "path", ",", "fre", ",", "_if_norm", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "line", "=", "f", ".", "readline", "(", ")", "\n", "bases", "=", "json", ".", "loads", "(", "line", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "if", "_if_norm", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "bases", ")", ")", ":", "\n", "            ", "bases", "[", "i", "]", "=", "bases", "[", "i", "]", "/", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "bases", "[", "i", "]", ",", "bases", "[", "i", "]", ")", ")", "\n", "", "", "return", "np", ".", "array", "(", "bases", ")", "[", ":", ",", "0", ":", "fre", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_all_data": [[49, 95], ["print", "read_data.read_data", "read_data.read_data", "read_data.read_bases", "dense2sparse.propagation_matrix", "str", "read_data.read_bases", "read_data.read_bases1", "read_data.read_bases", "read_data.read_bases", "read_data.read_bases", "read_data.read_bases1", "dense2sparse.propagation_matrix", "str", "print"], "function", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_data", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_data", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_bases", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.dense2sparse.propagation_matrix", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_bases", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_bases1", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_bases", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_bases", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_bases", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_bases1", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.dense2sparse.propagation_matrix"], ["", "def", "read_all_data", "(", "all_para", ")", ":", "\n", "    ", "[", "_", ",", "DATASET", ",", "MODEL", ",", "_", ",", "_", ",", "_", ",", "EMB_DIM", ",", "_", ",", "_", ",", "_", ",", "IF_PRETRAIN", ",", "TEST_VALIDATION", ",", "_", ",", "FREQUENCY_USER", ",", "FREQUENCY_ITEM", ",", "FREQUENCY", ",", "_", ",", "_", ",", "GRAPH_CONV", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "PROP_DIM", ",", "PROP_EMB", ",", "IF_NORM", "]", "=", "all_para", "\n", "[", "hypergraph_embeddings", ",", "graph_embeddings", ",", "propagation_embeddings", ",", "sparse_propagation_matrix", "]", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "## Paths of data", "\n", "DIR", "=", "'dataset/'", "+", "DATASET", "+", "'/'", "\n", "train_path", "=", "DIR", "+", "'train_data.json'", "\n", "test_path", "=", "DIR", "+", "'test_data.json'", "\n", "validation_path", "=", "DIR", "+", "'validation_data.json'", "\n", "hypergraph_embeddings_path", "=", "DIR", "+", "'hypergraph_embeddings.json'", "# hypergraph embeddings", "\n", "graph_embeddings_1d_path", "=", "DIR", "+", "'graph_embeddings_1d.json'", "# 1d graph embeddings", "\n", "graph_embeddings_2d_path", "=", "DIR", "+", "'graph_embeddings_2d.json'", "# 2d graph embeddings", "\n", "pre_train_feature_path", "=", "DIR", "+", "'pre_train_feature'", "+", "str", "(", "EMB_DIM", ")", "+", "'.json'", "# pretrained latent factors", "\n", "if", "MODEL", "==", "'SGNN'", ":", "propagation_embeddings_path", "=", "DIR", "+", "'pre_train_feature'", "+", "str", "(", "PROP_DIM", ")", "+", "'.json'", "# pretrained latent factors", "\n", "\n", "## Load data", "\n", "## load training data", "\n", "print", "(", "'Reading data...'", ")", "\n", "[", "train_data", ",", "train_data_interaction", ",", "user_num", ",", "item_num", "]", "=", "read_data", "(", "train_path", ")", "\n", "## load test data", "\n", "teat_vali_path", "=", "validation_path", "if", "TEST_VALIDATION", "==", "'Validation'", "else", "test_path", "\n", "test_data", "=", "read_data", "(", "teat_vali_path", ")", "[", "0", "]", "\n", "## load pre-trained embeddings for all deep models", "\n", "if", "IF_PRETRAIN", ":", "\n", "        ", "try", ":", "pre_train_feature", "=", "read_bases", "(", "pre_train_feature_path", ",", "EMB_DIM", ",", "EMB_DIM", ")", "\n", "except", ":", "\n", "            ", "print", "(", "'There is no pre-trained embeddings found!!'", ")", "\n", "pre_train_feature", "=", "[", "0", ",", "0", "]", "\n", "IF_PRETRAIN", "=", "False", "\n", "\n", "## load pre-trained transform bases for LCFN and SGNN", "\n", "", "", "if", "MODEL", "==", "'LCFN'", ":", "hypergraph_embeddings", "=", "read_bases", "(", "hypergraph_embeddings_path", ",", "FREQUENCY_USER", ",", "FREQUENCY_ITEM", ")", "\n", "if", "MODEL", "==", "'LGCN'", ":", "\n", "        ", "if", "GRAPH_CONV", "==", "'1D'", ":", "graph_embeddings", "=", "read_bases1", "(", "graph_embeddings_1d_path", ",", "FREQUENCY", ")", "\n", "if", "GRAPH_CONV", "==", "'2D_graph'", ":", "graph_embeddings", "=", "read_bases", "(", "graph_embeddings_2d_path", ",", "FREQUENCY_USER", ",", "FREQUENCY_ITEM", ")", "\n", "if", "GRAPH_CONV", "==", "'2D_hyper_graph'", ":", "graph_embeddings", "=", "read_bases", "(", "hypergraph_embeddings_path", ",", "FREQUENCY_USER", ",", "FREQUENCY_ITEM", ")", "\n", "", "if", "MODEL", "==", "'SGNN'", ":", "\n", "        ", "if", "PROP_EMB", "==", "'RM'", ":", "propagation_embeddings", "=", "read_bases", "(", "propagation_embeddings_path", ",", "PROP_DIM", ",", "PROP_DIM", ")", "\n", "if", "PROP_EMB", "==", "'SF'", ":", "propagation_embeddings", "=", "read_bases1", "(", "graph_embeddings_1d_path", ",", "PROP_DIM", ",", "IF_NORM", ")", "\n", "if", "PROP_EMB", "==", "'PE'", ":", "propagation_embeddings", "=", "0", "\n", "\n", "## convert dense graph to sparse graph", "\n", "", "if", "MODEL", "in", "[", "'GCMC'", ",", "'SCF'", ",", "'CGMC'", "]", ":", "sparse_propagation_matrix", "=", "propagation_matrix", "(", "train_data_interaction", ",", "user_num", ",", "item_num", ",", "'left_norm'", ")", "\n", "elif", "MODEL", "in", "[", "'NGCF'", ",", "'LightGCN'", "]", ":", "sparse_propagation_matrix", "=", "propagation_matrix", "(", "train_data_interaction", ",", "user_num", ",", "item_num", ",", "'sym_norm'", ")", "\n", "\n", "return", "train_data", ",", "train_data_interaction", ",", "user_num", ",", "item_num", ",", "test_data", ",", "pre_train_feature", ",", "hypergraph_embeddings", ",", "graph_embeddings", ",", "propagation_embeddings", ",", "sparse_propagation_matrix", ",", "IF_PRETRAIN", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_SCF.model_SCF.__init__": [[8, 66], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "range", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "model_SCF.model_SCF.create_bpr_loss", "tensorflow.train.RMSPropOptimizer", "model_SCF.model_SCF.opt.minimize", "tensorflow.matmul", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "model_SCF.model_SCF.filters.append", "tensorflow.nn.sigmoid", "tensorflow.nn.top_k", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.Variable", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul", "numpy.random.normal", "numpy.diag", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.create_bpr_loss"], ["    ", "def", "__init__", "(", "self", ",", "layer", ",", "n_users", ",", "n_items", ",", "emb_dim", ",", "lr", ",", "lamda", ",", "pre_train_latent_factor", ",", "if_pretrain", ",", "sparse_graph", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "'SCF'", "\n", "self", ".", "n_users", "=", "n_users", "\n", "self", ".", "n_items", "=", "n_items", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "layer", "=", "layer", "\n", "self", ".", "lamda", "=", "lamda", "\n", "self", ".", "lr", "=", "lr", "\n", "[", "self", ".", "U", ",", "self", ".", "V", "]", "=", "pre_train_latent_factor", "\n", "self", ".", "if_pretrain", "=", "if_pretrain", "\n", "self", ".", "A_hat", "=", "sparse_graph", "\n", "\n", "# placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ")", ")", "\n", "self", ".", "items_in_train_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ")", "\n", "self", ".", "top_k", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ")", "\n", "\n", "if", "self", ".", "if_pretrain", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "U", ",", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "V", ",", "name", "=", "'item_embeddings'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'item_embeddings'", ")", "\n", "\n", "", "self", ".", "filters", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "self", ".", "filters", ".", "append", "(", "\n", "tf", ".", "Variable", "(", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "0.001", ",", "(", "self", ".", "emb_dim", ",", "self", ".", "emb_dim", ")", ")", "+", "np", ".", "diag", "(", "np", ".", "random", ".", "normal", "(", "1", ",", "0.001", ",", "self", ".", "emb_dim", ")", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", ")", "\n", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "all_embeddings", "=", "[", "embeddings", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "## convolution of embedding: (U*U^T+U*\\Lambda*U^T)*emb = (I+L)*emb = (2*I-D^{-1}*A)*emb = 2*emb-H_hat*emb", "\n", "            ", "embeddings", "=", "2", "*", "embeddings", "-", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "A_hat", ",", "embeddings", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "filters", "[", "l", "]", ")", ")", "\n", "all_embeddings", "+=", "[", "embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "self", ".", "user_all_embeddings", ",", "self", ".", "item_all_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "\n", "self", ".", "u_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_all_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "loss", "=", "self", ".", "create_bpr_loss", "(", "self", ".", "u_embeddings", ",", "self", ".", "pos_i_embeddings", ",", "self", ".", "neg_i_embeddings", ")", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "self", ".", "updates", "=", "self", ".", "opt", ".", "minimize", "(", "self", ".", "loss", ",", "var_list", "=", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", "+", "self", ".", "filters", ")", "\n", "\n", "self", ".", "all_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_embeddings", ",", "self", ".", "item_all_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "all_ratings", "+=", "self", ".", "items_in_train_data", "## set a very small value for the items appearing in the training set to make sure they are at the end of the sorted list", "\n", "self", ".", "top_items", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "all_ratings", ",", "k", "=", "self", ".", "top_k", ",", "sorted", "=", "True", ")", ".", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_SCF.model_SCF.create_bpr_loss": [[67, 74], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.sigmoid", "tensorflow.negative", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_sum", "(", "maxi", ")", ")", "+", "self", ".", "lamda", "*", "regularizer", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_MF.model_MF.__init__": [[6, 39], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "model_MF.model_MF.create_bpr_loss", "tensorflow.train.GradientDescentOptimizer", "model_MF.model_MF.opt.minimize", "tensorflow.matmul", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.nn.top_k"], "methods", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.create_bpr_loss"], ["    ", "def", "__init__", "(", "self", ",", "n_users", ",", "n_items", ",", "emb_dim", ",", "lr", ",", "lamda", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "'MF'", "\n", "self", ".", "n_users", "=", "n_users", "\n", "self", ".", "n_items", "=", "n_items", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "lamda", "=", "lamda", "\n", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ")", ")", "\n", "self", ".", "items_in_train_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ")", "\n", "self", ".", "top_k", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ")", "\n", "\n", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'item_embeddings'", ")", "\n", "\n", "self", ".", "u_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "loss", "=", "self", ".", "create_bpr_loss", "(", "self", ".", "u_embeddings", ",", "self", ".", "pos_i_embeddings", ",", "self", ".", "neg_i_embeddings", ")", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "self", ".", "updates", "=", "self", ".", "opt", ".", "minimize", "(", "self", ".", "loss", ",", "var_list", "=", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ")", "\n", "\n", "self", ".", "all_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_embeddings", ",", "self", ".", "item_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "all_ratings", "+=", "self", ".", "items_in_train_data", "## set a very small value for the items appearing in the training set to make sure they are at the end of the sorted list", "\n", "self", ".", "top_items", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "all_ratings", ",", "k", "=", "self", ".", "top_k", ",", "sorted", "=", "True", ")", ".", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_MF.model_MF.create_bpr_loss": [[40, 47], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.negative", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_sum", "(", "maxi", ")", ")", "+", "self", ".", "lamda", "*", "regularizer", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.cross_tuning.cross_tuning": [[9, 77], ["numpy.zeros", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.concatenate", "numpy.array", "numpy.where", "numpy.array", "np.zeros.max", "numpy.zeros", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "get_hyperparameters.get_hyperparameter", "np.zeros.max", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "print_save.print_params", "print_save.save_params", "train_model.train_model", "print", "print", "numpy.where", "print", "print", "range", "get_hyperparameters.get_hyperparameter", "get_hyperparameters.get_hyperparameter", "numpy.zeros", "get_hyperparameters.get_hyperparameter", "numpy.zeros", "get_hyperparameters.get_hyperparameter", "numpy.zeros", "get_hyperparameters.get_hyperparameter", "numpy.zeros", "tensorflow.reset_default_graph", "np.zeros.max", "range", "str", "np.zeros.max", "np.zeros.max", "str", "int", "int", "random.uniform", "time.time"], "function", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.print_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.save_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.train_model.train_model", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter"], ["def", "cross_tuning", "(", "path_excel_dir", ",", "para_name", ",", "para", ",", "data", ",", "lr", ",", "lamda", ",", "min_num_fine", ",", "max_num_fine", ")", ":", "\n", "## fine tuning", "\n", "    ", "x_cen", ",", "y_cen", "=", "2", ",", "2", "\n", "score_matrix", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ")", ")", "\n", "score_matrix", "[", "x_cen", ",", "y_cen", "]", "=", "0.1", "**", "10", "\n", "num_matrix", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ")", ")", "\n", "hyper_matrix_lr", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "[", "get_hyperparameter", "(", "lr", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "hyper_matrix_lamda", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "[", "get_hyperparameter", "(", "lamda", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", ".", "T", ",", "axis", "=", "-", "1", ")", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "hyper_matrix_lr", ",", "hyper_matrix_lamda", ")", ",", "axis", "=", "-", "1", ")", "\n", "while", "num_matrix", "[", "x_cen", ",", "y_cen", "]", "<", "max_num_fine", "or", "score_matrix", ".", "max", "(", ")", "!=", "score_matrix", "[", "x_cen", ",", "y_cen", "]", ":", "\n", "        ", "x_cen", ",", "y_cen", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_cen", ",", "y_cen", "=", "x_cen", "[", "0", "]", ",", "y_cen", "[", "0", "]", "\n", "## extending matrices", "\n", "if", "y_cen", "==", "0", ":", "\n", "            ", "y_cen", "+=", "1", "\n", "pad", "=", "np", ".", "zeros", "(", "score_matrix", ".", "shape", "[", "0", "]", ")", "\n", "score_matrix", "=", "np", ".", "c_", "[", "pad", ",", "score_matrix", "]", "\n", "num_matrix", "=", "np", ".", "c_", "[", "pad", ",", "num_matrix", "]", "\n", "pad_lr", "=", "np", ".", "ones", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ")", "*", "get_hyperparameter", "(", "hyper_matrix", "[", "x_cen", ",", "y_cen", ",", "0", "]", ")", "[", "1", "]", "\n", "pad_lamda", "=", "hyper_matrix", "[", ":", ",", "0", ",", "1", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ",", "1", ",", "2", ")", ")", ",", "hyper_matrix", ")", ",", "axis", "=", "1", ")", "\n", "hyper_matrix", "[", ":", ",", "0", ",", "0", "]", "=", "pad_lr", "\n", "hyper_matrix", "[", ":", ",", "0", ",", "1", "]", "=", "pad_lamda", "\n", "", "if", "y_cen", "==", "score_matrix", ".", "shape", "[", "1", "]", "-", "1", ":", "\n", "            ", "pad", "=", "np", ".", "zeros", "(", "score_matrix", ".", "shape", "[", "0", "]", ")", "\n", "score_matrix", "=", "np", ".", "c_", "[", "score_matrix", ",", "pad", "]", "\n", "num_matrix", "=", "np", ".", "c_", "[", "num_matrix", ",", "pad", "]", "\n", "pad_lr", "=", "np", ".", "ones", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ")", "*", "get_hyperparameter", "(", "hyper_matrix", "[", "x_cen", ",", "y_cen", ",", "0", "]", ")", "[", "3", "]", "\n", "pad_lamda", "=", "hyper_matrix", "[", ":", ",", "0", ",", "1", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "hyper_matrix", ",", "np", ".", "zeros", "(", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ",", "1", ",", "2", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "hyper_matrix", "[", ":", ",", "-", "1", ",", "0", "]", "=", "pad_lr", "\n", "hyper_matrix", "[", ":", ",", "-", "1", ",", "1", "]", "=", "pad_lamda", "\n", "", "if", "x_cen", "==", "0", ":", "\n", "            ", "x_cen", "+=", "1", "\n", "pad", "=", "np", ".", "zeros", "(", "(", "1", ",", "score_matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "score_matrix", "=", "np", ".", "r_", "[", "pad", ",", "score_matrix", "]", "\n", "num_matrix", "=", "np", ".", "r_", "[", "pad", ",", "num_matrix", "]", "\n", "pad_lr", "=", "hyper_matrix", "[", "0", ",", ":", ",", "0", "]", "\n", "pad_lamda", "=", "np", ".", "ones", "(", "hyper_matrix", ".", "shape", "[", "1", "]", ")", "*", "get_hyperparameter", "(", "hyper_matrix", "[", "x_cen", ",", "y_cen", ",", "1", "]", ")", "[", "1", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "1", ",", "hyper_matrix", ".", "shape", "[", "1", "]", ",", "2", ")", ")", ",", "hyper_matrix", ")", ",", "axis", "=", "0", ")", "\n", "hyper_matrix", "[", "0", ",", ":", ",", "0", "]", "=", "pad_lr", "\n", "hyper_matrix", "[", "0", ",", ":", ",", "1", "]", "=", "pad_lamda", "\n", "", "if", "x_cen", "==", "score_matrix", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "            ", "pad", "=", "np", ".", "zeros", "(", "(", "1", ",", "score_matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "score_matrix", "=", "np", ".", "r_", "[", "score_matrix", ",", "pad", "]", "\n", "num_matrix", "=", "np", ".", "r_", "[", "num_matrix", ",", "pad", "]", "\n", "pad_lr", "=", "hyper_matrix", "[", "0", ",", ":", ",", "0", "]", "\n", "pad_lamda", "=", "np", ".", "ones", "(", "hyper_matrix", ".", "shape", "[", "1", "]", ")", "*", "get_hyperparameter", "(", "hyper_matrix", "[", "x_cen", ",", "y_cen", ",", "1", "]", ")", "[", "3", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "hyper_matrix", ",", "np", ".", "zeros", "(", "(", "1", ",", "hyper_matrix", ".", "shape", "[", "1", "]", ",", "2", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "hyper_matrix", "[", "-", "1", ",", ":", ",", "0", "]", "=", "pad_lr", "\n", "hyper_matrix", "[", "-", "1", ",", ":", ",", "1", "]", "=", "pad_lamda", "\n", "## finding the best performance", "\n", "", "for", "x_curr", ",", "y_curr", "in", "[", "[", "x_cen", ",", "y_cen", "]", ",", "[", "x_cen", "-", "1", ",", "y_cen", "]", ",", "[", "x_cen", ",", "y_cen", "-", "1", "]", ",", "[", "x_cen", "+", "1", ",", "y_cen", "]", ",", "[", "x_cen", ",", "y_cen", "+", "1", "]", "]", ":", "\n", "            ", "if", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "<", "min_num_fine", "or", "(", "x_curr", "==", "x_cen", "and", "y_curr", "==", "y_cen", ")", ")", "and", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "<", "0.5", "or", "score_matrix", "[", "x_curr", ",", "y_curr", "]", ">=", "0.7", "*", "score_matrix", ".", "max", "(", ")", ")", ":", "\n", "                ", "para", "[", "3", ":", "5", "]", "=", "hyper_matrix", "[", "x_curr", ",", "y_curr", "]", "\n", "print_params", "(", "para_name", ",", "para", ")", "\n", "path_excel", "=", "path_excel_dir", "+", "str", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "+", "str", "(", "int", "(", "rd", ".", "uniform", "(", "100", ",", "900", ")", ")", ")", "+", "'.xlsx'", "\n", "save_params", "(", "para_name", ",", "para", ",", "path_excel", ")", "\n", "score", "=", "train_model", "(", "para", ",", "data", ",", "path_excel", ")", "\n", "if", "para", "[", "2", "]", "not", "in", "[", "'GCMC'", ",", "'NGCF'", ",", "'SCF'", ",", "'CGMC'", ",", "'LightGCN'", "]", ":", "tf", ".", "reset_default_graph", "(", ")", "\n", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "=", "(", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "*", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "score", ")", "/", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "1", ")", "\n", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+=", "1", "\n", "print", "(", "score_matrix", ")", "\n", "print", "(", "num_matrix", ")", "\n", "x_argmax", ",", "y_argmax", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_argmax", ",", "y_argmax", "=", "x_argmax", "[", "0", "]", ",", "y_argmax", "[", "0", "]", "\n", "print", "(", "'When \\eta and \\lambda is: '", ",", "hyper_matrix", "[", "x_argmax", ",", "y_argmax", "]", ")", "\n", "print", "(", "'the model achieves the best performance: '", ",", "score_matrix", ".", "max", "(", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LCFN.model_LCFN.__init__": [[11, 104], ["int", "int", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "range", "range", "range", "range", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.train.AdamOptimizer", "model_LCFN.model_LCFN.opt.minimize", "tensorflow.matmul", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "model_LCFN.model_LCFN.user_filters.append", "model_LCFN.model_LCFN.item_filters.append", "model_LCFN.model_LCFN.transformers.append", "tensorflow.matmul", "tensorflow.nn.sigmoid", "tensorflow.matmul", "tensorflow.nn.sigmoid", "model_LCFN.model_LCFN.create_bpr_loss", "tensorflow.nn.top_k", "shape", "shape", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "model_LCFN.model_LCFN.regularization", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.diag", "tensorflow.diag", "numpy.random.normal", "numpy.diag", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.create_bpr_loss", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.regularization"], ["    ", "def", "__init__", "(", "self", ",", "layer", ",", "n_users", ",", "n_items", ",", "emb_dim", ",", "graph_embeddings", ",", "lr", ",", "lamda", ",", "pre_train_latent_factor", ",", "if_pretrain", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "'LCFN'", "\n", "self", ".", "n_users", "=", "n_users", "\n", "self", ".", "n_items", "=", "n_items", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "[", "self", ".", "P", ",", "self", ".", "Q", "]", "=", "graph_embeddings", "\n", "self", ".", "frequence_user", "=", "int", "(", "shape", "(", "self", ".", "P", ")", "[", "1", "]", ")", "\n", "self", ".", "frequence_item", "=", "int", "(", "shape", "(", "self", ".", "Q", ")", "[", "1", "]", ")", "\n", "self", ".", "layer", "=", "layer", "\n", "self", ".", "lamda", "=", "lamda", "\n", "self", ".", "lr", "=", "lr", "\n", "[", "self", ".", "U", ",", "self", ".", "V", "]", "=", "pre_train_latent_factor", "\n", "self", ".", "if_pretrain", "=", "if_pretrain", "\n", "\n", "# placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ")", ")", "\n", "self", ".", "items_in_train_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ")", "\n", "self", ".", "top_k", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ")", "\n", "\n", "if", "self", ".", "if_pretrain", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "U", ",", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "V", ",", "name", "=", "'item_embeddings'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'item_embeddings'", ")", "\n", "\n", "", "self", ".", "user_filters", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "self", ".", "user_filters", ".", "append", "(", "\n", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "frequence_user", "]", ",", "mean", "=", "1", ",", "stddev", "=", "0.001", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", ")", "\n", "", "self", ".", "item_filters", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "self", ".", "item_filters", ".", "append", "(", "\n", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "frequence_item", "]", ",", "mean", "=", "1", ",", "stddev", "=", "0.001", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", ")", "\n", "\n", "", "self", ".", "transformers", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "self", ".", "transformers", ".", "append", "(", "\n", "tf", ".", "Variable", "(", "\n", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "0.001", ",", "(", "self", ".", "emb_dim", ",", "self", ".", "emb_dim", ")", ")", "+", "np", ".", "diag", "(", "np", ".", "random", ".", "normal", "(", "1", ",", "0.001", ",", "self", ".", "emb_dim", ")", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", ")", "\n", "\n", "", "User_embedding", "=", "self", ".", "user_embeddings", "\n", "self", ".", "user_all_embeddings", "=", "[", "User_embedding", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "User_embedding", "=", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "self", ".", "P", ",", "tf", ".", "diag", "(", "self", ".", "user_filters", "[", "l", "]", ")", ")", ",", "\n", "tf", ".", "matmul", "(", "self", ".", "P", ",", "User_embedding", ",", "\n", "transpose_a", "=", "True", ",", "transpose_b", "=", "False", ")", ")", "\n", "User_embedding", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "User_embedding", ",", "self", ".", "transformers", "[", "l", "]", ")", ")", "\n", "# User_embedding = tf.nn.relu(tf.matmul(User_embedding, self.transformers[l]))", "\n", "self", ".", "user_all_embeddings", "+=", "[", "User_embedding", "]", "\n", "", "self", ".", "user_all_embeddings", "=", "tf", ".", "concat", "(", "self", ".", "user_all_embeddings", ",", "1", ")", "\n", "Item_embedding", "=", "self", ".", "item_embeddings", "\n", "self", ".", "item_all_embeddings", "=", "[", "Item_embedding", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "Item_embedding", "=", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "self", ".", "Q", ",", "tf", ".", "diag", "(", "self", ".", "item_filters", "[", "l", "]", ")", ")", ",", "\n", "tf", ".", "matmul", "(", "self", ".", "Q", ",", "Item_embedding", ",", "\n", "transpose_a", "=", "True", ",", "transpose_b", "=", "False", ")", ")", "\n", "Item_embedding", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "Item_embedding", ",", "self", ".", "transformers", "[", "l", "]", ")", ")", "\n", "#Item_embedding = tf.nn.relu(tf.matmul(Item_embedding, self.transformers[l]))", "\n", "self", ".", "item_all_embeddings", "+=", "[", "Item_embedding", "]", "\n", "", "self", ".", "item_all_embeddings", "=", "tf", ".", "concat", "(", "self", ".", "item_all_embeddings", ",", "1", ")", "\n", "\n", "self", ".", "u_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_all_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "u_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "loss", "=", "self", ".", "create_bpr_loss", "(", "self", ".", "u_embeddings", ",", "self", ".", "pos_i_embeddings", ",", "self", ".", "neg_i_embeddings", ")", "+", "self", ".", "lamda", "*", "self", ".", "regularization", "(", "self", ".", "u_embeddings_reg", ",", "self", ".", "pos_i_embeddings_reg", ",", "self", ".", "neg_i_embeddings_reg", ",", "\n", "self", ".", "user_filters", ",", "self", ".", "item_filters", ",", "self", ".", "transformers", ")", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "self", ".", "updates", "=", "self", ".", "opt", ".", "minimize", "(", "self", ".", "loss", ",", "var_list", "=", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", "\n", "+", "self", ".", "user_filters", "+", "self", ".", "item_filters", "+", "self", ".", "transformers", ")", "\n", "\n", "self", ".", "all_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_embeddings", ",", "self", ".", "item_all_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "all_ratings", "+=", "self", ".", "items_in_train_data", "## set a very small value for the items appearing in the training set to make sure they are at the end of the sorted list", "\n", "self", ".", "top_items", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "all_ratings", ",", "k", "=", "self", ".", "top_k", ",", "sorted", "=", "True", ")", ".", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LCFN.model_LCFN.create_bpr_loss": [[105, 111], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.negative", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_sum", "(", "maxi", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LCFN.model_LCFN.regularization": [[112, 117], ["range", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "regularization", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ",", "filter_u", ",", "filter_v", ",", "transform", ")", ":", "\n", "        ", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "regularizer", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "filter_u", "[", "l", "]", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "filter_v", "[", "l", "]", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "transform", "[", "l", "]", ")", "\n", "", "return", "regularizer", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.dense2sparse.propagation_matrix": [[7, 24], ["print", "numpy.zeros", "numpy.zeros", "tensorflow.SparseTensor", "max", "max", "max", "numpy.sqrt"], "function", ["None"], ["def", "propagation_matrix", "(", "graph", ",", "user_num", ",", "item_num", ",", "norm", ")", ":", "\n", "    ", "print", "(", "'Constructing the sparse graph...'", ")", "\n", "eps", "=", "0.1", "**", "10", "\n", "user_itemNum", "=", "np", ".", "zeros", "(", "user_num", ")", "\n", "item_userNum", "=", "np", ".", "zeros", "(", "item_num", ")", "\n", "for", "(", "user", ",", "item", ")", "in", "graph", ":", "\n", "        ", "user_itemNum", "[", "user", "]", "+=", "1", "\n", "item_userNum", "[", "item", "]", "+=", "1", "\n", "", "val", ",", "idx", "=", "[", "]", ",", "[", "]", "\n", "for", "(", "user", ",", "item", ")", "in", "graph", ":", "\n", "        ", "if", "norm", "==", "'left_norm'", ":", "\n", "            ", "val", "+=", "[", "1", "/", "max", "(", "user_itemNum", "[", "user", "]", ",", "eps", ")", ",", "1", "/", "max", "(", "item_userNum", "[", "item", "]", ",", "eps", ")", "]", "\n", "idx", "+=", "[", "[", "user", ",", "item", "+", "user_num", "]", ",", "[", "item", "+", "user_num", ",", "user", "]", "]", "\n", "", "if", "norm", "==", "'sym_norm'", ":", "\n", "            ", "val", "+=", "[", "1", "/", "(", "max", "(", "np", ".", "sqrt", "(", "user_itemNum", "[", "user", "]", "*", "item_userNum", "[", "item", "]", ")", ",", "eps", ")", ")", "]", "*", "2", "\n", "idx", "+=", "[", "[", "user", ",", "item", "+", "user_num", "]", ",", "[", "item", "+", "user_num", ",", "user", "]", "]", "\n", "", "", "return", "tf", ".", "SparseTensor", "(", "indices", "=", "idx", ",", "values", "=", "val", ",", "dense_shape", "=", "[", "user_num", "+", "item_num", ",", "user_num", "+", "item_num", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.train_model.train_model": [[22, 81], ["tensorflow.ConfigProto", "tensorflow.Session", "tf.Session.run", "list", "list.append", "pandas.DataFrame", "pandas.DataFrame", "time.clock", "range", "time.clock", "print", "model_MF.model_MF", "model_NCF.model_NCF", "model_GCMC.model_GCMC", "model_NGCF.model_NGCF", "model_SCF.model_SCF", "model_CGMC.model_CGMC", "model_LightGCN.model_LightGCN", "model_LCFN.model_LCFN", "model_LGCN", "model_SGNN.model_SGNN", "tensorflow.global_variables_initializer", "range", "len", "range", "test_model.test_model", "max", "print_save.save_value", "len", "range", "numpy.array", "tf.Session.run", "print", "len", "int", "random.uniform", "np.array.append"], "function", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.test_model.test_model", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.save_value"], ["def", "train_model", "(", "para", ",", "data", ",", "path_excel", ")", ":", "\n", "## data and hyperparameters", "\n", "    ", "[", "train_data", ",", "train_data_interaction", ",", "user_num", ",", "item_num", ",", "test_data", ",", "pre_train_feature", ",", "hypergraph_embeddings", ",", "graph_embeddings", ",", "propagation_embeddings", ",", "sparse_propagation_matrix", ",", "_", "]", "=", "data", "\n", "[", "_", ",", "_", ",", "MODEL", ",", "LR", ",", "LAMDA", ",", "LAYER", ",", "EMB_DIM", ",", "BATCH_SIZE", ",", "TEST_USER_BATCH", ",", "N_EPOCH", ",", "IF_PRETRAIN", ",", "_", ",", "TOP_K", "]", "=", "para", "[", "0", ":", "13", "]", "\n", "if", "MODEL", "==", "'LGCN'", ":", "[", "_", ",", "_", ",", "_", ",", "KEEP_PORB", ",", "SAMPLE_RATE", ",", "GRAPH_CONV", ",", "PREDICTION", ",", "LOSS_FUNCTION", ",", "GENERALIZATION", ",", "OPTIMIZATION", ",", "IF_TRASFORMATION", ",", "ACTIVATION", ",", "POOLING", "]", "=", "para", "[", "13", ":", "]", "\n", "if", "MODEL", "==", "'SGNN'", ":", "[", "_", ",", "PROP_EMB", ",", "_", "]", "=", "para", "[", "13", ":", "]", "\n", "para_test", "=", "[", "train_data", ",", "test_data", ",", "user_num", ",", "item_num", ",", "TOP_K", ",", "TEST_USER_BATCH", "]", "\n", "## Define the model", "\n", "if", "MODEL", "==", "'MF'", ":", "model", "=", "model_MF", "(", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ")", "\n", "if", "MODEL", "==", "'NCF'", ":", "model", "=", "model_NCF", "(", "layer", "=", "LAYER", ",", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "if_pretrain", "=", "IF_PRETRAIN", ")", "\n", "if", "MODEL", "==", "'GCMC'", ":", "model", "=", "model_GCMC", "(", "layer", "=", "LAYER", ",", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "sparse_graph", "=", "sparse_propagation_matrix", ")", "\n", "if", "MODEL", "==", "'NGCF'", ":", "model", "=", "model_NGCF", "(", "layer", "=", "LAYER", ",", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "sparse_graph", "=", "sparse_propagation_matrix", ")", "\n", "if", "MODEL", "==", "'SCF'", ":", "model", "=", "model_SCF", "(", "layer", "=", "LAYER", ",", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "sparse_graph", "=", "sparse_propagation_matrix", ")", "\n", "if", "MODEL", "==", "'CGMC'", ":", "model", "=", "model_CGMC", "(", "layer", "=", "LAYER", ",", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "sparse_graph", "=", "sparse_propagation_matrix", ")", "\n", "if", "MODEL", "==", "'LightGCN'", ":", "model", "=", "model_LightGCN", "(", "layer", "=", "LAYER", ",", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "sparse_graph", "=", "sparse_propagation_matrix", ")", "\n", "if", "MODEL", "==", "'LCFN'", ":", "model", "=", "model_LCFN", "(", "layer", "=", "LAYER", ",", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "graph_embeddings", "=", "hypergraph_embeddings", ")", "\n", "if", "MODEL", "==", "'LGCN'", ":", "model", "=", "model_LGCN", "(", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "emb_dim", "=", "EMB_DIM", ",", "layer", "=", "LAYER", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "graph_embeddings", "=", "graph_embeddings", ",", "graph_conv", "=", "GRAPH_CONV", ",", "prediction", "=", "PREDICTION", ",", "loss_function", "=", "LOSS_FUNCTION", ",", "generalization", "=", "GENERALIZATION", ",", "optimization", "=", "OPTIMIZATION", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "if_transformation", "=", "IF_TRASFORMATION", ",", "activation", "=", "ACTIVATION", ",", "pooling", "=", "POOLING", ")", "\n", "if", "MODEL", "==", "'SGNN'", ":", "model", "=", "model_SGNN", "(", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "emb_dim", "=", "EMB_DIM", ",", "layer", "=", "LAYER", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "propagation_embeddings", "=", "propagation_embeddings", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "prop_emb", "=", "PROP_EMB", ")", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "## Split the training samples into batches", "\n", "batches", "=", "list", "(", "range", "(", "0", ",", "len", "(", "train_data_interaction", ")", ",", "BATCH_SIZE", ")", ")", "\n", "batches", ".", "append", "(", "len", "(", "train_data_interaction", ")", ")", "\n", "## Training iteratively", "\n", "F1_max", "=", "0", "\n", "F1_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "TOP_K", ")", "\n", "NDCG_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "TOP_K", ")", "\n", "t1", "=", "time", ".", "clock", "(", ")", "\n", "for", "epoch", "in", "range", "(", "N_EPOCH", ")", ":", "\n", "        ", "for", "batch_num", "in", "range", "(", "len", "(", "batches", ")", "-", "1", ")", ":", "\n", "            ", "train_batch_data", "=", "[", "]", "\n", "for", "sample", "in", "range", "(", "batches", "[", "batch_num", "]", ",", "batches", "[", "batch_num", "+", "1", "]", ")", ":", "\n", "                ", "(", "user", ",", "pos_item", ")", "=", "train_data_interaction", "[", "sample", "]", "\n", "sample_num", "=", "0", "\n", "while", "sample_num", "<", "(", "SAMPLE_RATE", "if", "MODEL", "==", "'LGCN'", "else", "1", ")", ":", "\n", "                    ", "neg_item", "=", "int", "(", "rd", ".", "uniform", "(", "0", ",", "item_num", ")", ")", "\n", "if", "not", "(", "neg_item", "in", "train_data", "[", "user", "]", ")", ":", "\n", "                        ", "sample_num", "+=", "1", "\n", "train_batch_data", ".", "append", "(", "[", "user", ",", "pos_item", ",", "neg_item", "]", ")", "\n", "", "", "", "train_batch_data", "=", "np", ".", "array", "(", "train_batch_data", ")", "\n", "_", ",", "loss", "=", "sess", ".", "run", "(", "[", "model", ".", "updates", ",", "model", ".", "loss", "]", ",", "feed_dict", "=", "{", "model", ".", "users", ":", "train_batch_data", "[", ":", ",", "0", "]", ",", "model", ".", "pos_items", ":", "train_batch_data", "[", ":", ",", "1", "]", ",", "model", ".", "neg_items", ":", "train_batch_data", "[", ":", ",", "2", "]", ",", "model", ".", "keep_prob", ":", "KEEP_PORB", "if", "MODEL", "==", "'LGCN'", "else", "1", "}", ")", "\n", "## test the model each epoch", "\n", "", "F1", ",", "NDCG", "=", "test_model", "(", "sess", ",", "model", ",", "para_test", ")", "\n", "F1_max", "=", "max", "(", "F1_max", ",", "F1", "[", "0", "]", ")", "\n", "## print performance", "\n", "# print_value([epoch + 1, loss, F1_max, F1, NDCG])", "\n", "if", "epoch", "%", "10", "==", "0", ":", "print", "(", "'%.5f'", "%", "(", "F1_max", ")", ",", "end", "=", "' '", ",", "flush", "=", "True", ")", "\n", "## save performance", "\n", "F1_df", ".", "loc", "[", "epoch", "+", "1", "]", "=", "F1", "\n", "NDCG_df", ".", "loc", "[", "epoch", "+", "1", "]", "=", "NDCG", "\n", "save_value", "(", "[", "[", "F1_df", ",", "'F1'", "]", ",", "[", "NDCG_df", ",", "'NDCG'", "]", "]", ",", "path_excel", ",", "first_sheet", "=", "False", ")", "\n", "if", "loss", ">", "10", "**", "10", ":", "break", "\n", "", "t2", "=", "time", ".", "clock", "(", ")", "\n", "print", "(", "'time cost:'", ",", "(", "t2", "-", "t1", ")", "/", "200", ")", "\n", "return", "F1_max", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.test_model.test_one_user": [[11, 21], ["len", "numpy.zeros", "numpy.zeros", "top_item.tolist.tolist", "range", "evaluation.evaluation_F1", "evaluation.evaluation_NDCG"], "function", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.evaluation.evaluation_F1", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.evaluation.evaluation_NDCG"], ["def", "test_one_user", "(", "user", ",", "top_item", ",", "para_test_one_user", ")", ":", "\n", "    ", "[", "test_data", ",", "TOP_K", "]", "=", "para_test_one_user", "\n", "k_num", "=", "len", "(", "TOP_K", ")", "\n", "f1", "=", "np", ".", "zeros", "(", "k_num", ")", "\n", "ndcg", "=", "np", ".", "zeros", "(", "k_num", ")", "\n", "top_item", "=", "top_item", ".", "tolist", "(", ")", "## make testing fatser", "\n", "for", "i", "in", "range", "(", "k_num", ")", ":", "\n", "        ", "f1", "[", "i", "]", "=", "evaluation_F1", "(", "top_item", ",", "TOP_K", "[", "i", "]", ",", "test_data", "[", "user", "]", ")", "\n", "ndcg", "[", "i", "]", "=", "evaluation_NDCG", "(", "top_item", ",", "TOP_K", "[", "i", "]", ",", "test_data", "[", "user", "]", ")", "\n", "", "return", "f1", ",", "ndcg", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.test_model.test_model": [[22, 49], ["numpy.zeros().astype", "random.sample", "list", "list.append", "range", "enumerate", "numpy.array", "numpy.mean", "list", "range", "numpy.zeros", "enumerate", "sess.run", "numpy.array", "numpy.zeros", "range", "len", "len", "np.array.append", "test_model.test_one_user", "max", "max"], "function", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.test_model.test_one_user"], ["", "def", "test_model", "(", "sess", ",", "model", ",", "para_test", ")", ":", "\n", "    ", "[", "train_data", ",", "test_data", ",", "user_num", ",", "item_num", ",", "TOP_K", ",", "TEST_USER_BATCH", "]", "=", "para_test", "\n", "para_test_one_user", "=", "[", "test_data", ",", "TOP_K", "]", "\n", "## Since Amazon is too large to calculate user_num*item_num interactions, we select TEST_USER_BATCH users to test the model.", "\n", "## For some heavy models (e.g., NCF and LGCN with MLP as the predictor), calculating TEST_USER_BATCH*item_num interactions is still space-consuming, we split TEST_USER_BATCH users into mini batches further", "\n", "user_top_items", "=", "np", ".", "zeros", "(", "(", "TEST_USER_BATCH", ",", "max", "(", "TOP_K", ")", ")", ")", ".", "astype", "(", "dtype", "=", "int32", ")", "\n", "test_batch", "=", "rd", ".", "sample", "(", "list", "(", "range", "(", "user_num", ")", ")", ",", "TEST_USER_BATCH", ")", "\n", "mini_batch_num", "=", "100", "\n", "mini_batch_list", "=", "list", "(", "range", "(", "0", ",", "TEST_USER_BATCH", ",", "mini_batch_num", ")", ")", "\n", "mini_batch_list", ".", "append", "(", "TEST_USER_BATCH", ")", "\n", "score_min", "=", "-", "10", "**", "5", "\n", "for", "u", "in", "range", "(", "len", "(", "mini_batch_list", ")", "-", "1", ")", ":", "\n", "        ", "u1", ",", "u2", "=", "mini_batch_list", "[", "u", "]", ",", "mini_batch_list", "[", "u", "+", "1", "]", "\n", "user_batch", "=", "test_batch", "[", "u1", ":", "u2", "]", "\n", "items_in_train_data", "=", "np", ".", "zeros", "(", "(", "u2", "-", "u1", ",", "item_num", ")", ")", "\n", "for", "u_index", ",", "user", "in", "enumerate", "(", "user_batch", ")", ":", "\n", "            ", "for", "item", "in", "train_data", "[", "user", "]", ":", "\n", "                ", "items_in_train_data", "[", "u_index", ",", "item", "]", "=", "score_min", "\n", "", "", "user_top_items_batch", "=", "sess", ".", "run", "(", "model", ".", "top_items", ",", "feed_dict", "=", "{", "model", ".", "users", ":", "user_batch", ",", "model", ".", "keep_prob", ":", "1", ",", "model", ".", "items_in_train_data", ":", "items_in_train_data", ",", "model", ".", "top_k", ":", "max", "(", "TOP_K", ")", "}", ")", "\n", "user_top_items", "[", "u1", ":", "u2", "]", "=", "user_top_items_batch", "\n", "", "result", "=", "[", "]", "\n", "for", "u_index", ",", "user", "in", "enumerate", "(", "test_batch", ")", ":", "\n", "        ", "if", "len", "(", "test_data", "[", "user", "]", ")", ">", "0", ":", "\n", "            ", "result", ".", "append", "(", "test_one_user", "(", "user", ",", "user_top_items", "[", "u_index", "]", ",", "para_test_one_user", ")", ")", "\n", "", "", "result", "=", "np", ".", "array", "(", "result", ")", "\n", "F1", ",", "NDCG", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "result", ")", ",", "axis", "=", "0", ")", "\n", "return", "F1", ",", "NDCG", "\n", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.tuning.tuning": [[12, 181], ["numpy.zeros", "numpy.array", "numpy.zeros", "range", "numpy.where", "numpy.zeros", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.concatenate", "range", "numpy.where", "numpy.array", "numpy.where", "np.zeros.max", "numpy.zeros", "numpy.concatenate", "range", "numpy.zeros", "numpy.concatenate", "range", "numpy.zeros", "numpy.concatenate", "range", "numpy.zeros", "numpy.concatenate", "range", "np.zeros.max", "numpy.array", "print_save.print_params", "print_save.save_params", "train_model.train_model", "print", "print", "numpy.where", "print", "print", "np.zeros.max", "numpy.zeros", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "range", "print_save.print_params", "print_save.save_params", "train_model.train_model", "print", "print", "numpy.where", "print", "print", "np.zeros.max", "print_save.print_params", "print_save.save_params", "train_model.train_model", "print", "print", "numpy.where", "print", "print", "get_hyperparameters.get_hyperparameter", "tensorflow.reset_default_graph", "np.zeros.max", "np.zeros.max", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "print_save.print_params", "print_save.save_params", "train_model.train_model", "print", "print", "numpy.where", "print", "print", "range", "tensorflow.reset_default_graph", "np.zeros.max", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "tensorflow.reset_default_graph", "np.zeros.max", "range", "get_hyperparameters.get_hyperparameter", "str", "np.zeros.max", "get_hyperparameters.get_hyperparameter", "numpy.zeros", "get_hyperparameters.get_hyperparameter", "numpy.zeros", "get_hyperparameters.get_hyperparameter", "numpy.zeros", "get_hyperparameters.get_hyperparameter", "numpy.zeros", "tensorflow.reset_default_graph", "np.zeros.max", "str", "np.zeros.max", "str", "np.zeros.max", "range", "str", "int", "str", "np.zeros.max", "np.zeros.max", "str", "int", "np.zeros.max", "str", "int", "int", "random.uniform", "np.zeros.max", "str", "int", "int", "random.uniform", "int", "random.uniform", "time.time", "int", "random.uniform", "time.time", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.print_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.save_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.train_model.train_model", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.print_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.save_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.train_model.train_model", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.print_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.save_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.train_model.train_model", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.print_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.save_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.train_model.train_model", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter"], ["def", "tuning", "(", "path_excel_dir", ",", "para_name", ",", "para", ",", "data", ",", "lr", ",", "lamda", ",", "min_num_coarse", ",", "max_num_coarse", ",", "min_num_fine", ",", "max_num_fine", ")", ":", "\n", "## tuning settings", "\n", "    ", "x_cen", ",", "y_cen", "=", "1", ",", "1", "\n", "score_matrix", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "hyper_matrix", "=", "np", ".", "array", "(", "[", "[", "[", "lr", "*", "(", "10", "**", "i", ")", ",", "lamda", "*", "(", "10", "**", "j", ")", "]", "for", "i", "in", "range", "(", "-", "1", ",", "2", ")", "]", "for", "j", "in", "range", "(", "-", "1", ",", "2", ")", "]", ")", "\n", "num_matrix", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "## coarse tuning", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "x_curr", ",", "y_curr", "in", "[", "[", "x_cen", ",", "y_cen", "]", ",", "[", "x_cen", "-", "1", ",", "y_cen", "]", ",", "[", "x_cen", ",", "y_cen", "-", "1", "]", ",", "[", "x_cen", "+", "1", ",", "y_cen", "]", ",", "[", "x_cen", ",", "y_cen", "+", "1", "]", "]", ":", "\n", "            ", "if", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "<", "min_num_coarse", "or", "(", "x_curr", "==", "x_cen", "and", "y_curr", "==", "y_cen", ")", ")", "and", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "<", "0.5", "or", "score_matrix", "[", "x_curr", ",", "y_curr", "]", ">=", "0.7", "*", "score_matrix", ".", "max", "(", ")", ")", ":", "\n", "                ", "para", "[", "3", ":", "5", "]", "=", "hyper_matrix", "[", "x_curr", ",", "y_curr", "]", "\n", "print_params", "(", "para_name", ",", "para", ")", "\n", "path_excel", "=", "path_excel_dir", "+", "str", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "+", "str", "(", "int", "(", "rd", ".", "uniform", "(", "100", ",", "900", ")", ")", ")", "+", "'.xlsx'", "\n", "save_params", "(", "para_name", ",", "para", ",", "path_excel", ")", "\n", "score", "=", "train_model", "(", "para", ",", "data", ",", "path_excel", ")", "\n", "if", "para", "[", "2", "]", "not", "in", "[", "'GCMC'", ",", "'NGCF'", ",", "'SCF'", ",", "'CGMC'", ",", "'LightGCN'", "]", ":", "tf", ".", "reset_default_graph", "(", ")", "\n", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "=", "(", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "*", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "score", ")", "/", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "1", ")", "\n", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+=", "1", "\n", "print", "(", "score_matrix", ")", "\n", "print", "(", "num_matrix", ")", "\n", "x_argmax", ",", "y_argmax", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_argmax", ",", "y_argmax", "=", "x_argmax", "[", "0", "]", ",", "y_argmax", "[", "0", "]", "\n", "print", "(", "'When \\eta and \\lambda is: '", ",", "hyper_matrix", "[", "x_argmax", ",", "y_argmax", "]", ")", "\n", "print", "(", "'the model achieves the best performance: '", ",", "score_matrix", ".", "max", "(", ")", ")", "\n", "", "", "", "while", "num_matrix", "[", "x_cen", ",", "y_cen", "]", "<", "max_num_coarse", "or", "score_matrix", ".", "max", "(", ")", "!=", "score_matrix", "[", "x_cen", ",", "y_cen", "]", ":", "\n", "        ", "x_cen", ",", "y_cen", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_cen", ",", "y_cen", "=", "x_cen", "[", "0", "]", ",", "y_cen", "[", "0", "]", "\n", "## extending the matrices", "\n", "if", "y_cen", "==", "0", ":", "\n", "            ", "y_cen", "+=", "1", "\n", "pad", "=", "np", ".", "zeros", "(", "score_matrix", ".", "shape", "[", "0", "]", ")", "\n", "score_matrix", "=", "np", ".", "c_", "[", "pad", ",", "score_matrix", "]", "\n", "num_matrix", "=", "np", ".", "c_", "[", "pad", ",", "num_matrix", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ",", "1", ",", "2", ")", ")", ",", "hyper_matrix", ")", ",", "axis", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "hyper_matrix", "[", "i", ",", "0", ",", "0", "]", "=", "hyper_matrix", "[", "i", ",", "1", ",", "0", "]", "/", "10", "\n", "hyper_matrix", "[", "i", ",", "0", ",", "1", "]", "=", "hyper_matrix", "[", "i", ",", "1", ",", "1", "]", "\n", "", "", "if", "y_cen", "==", "score_matrix", ".", "shape", "[", "1", "]", "-", "1", ":", "\n", "            ", "pad", "=", "np", ".", "zeros", "(", "score_matrix", ".", "shape", "[", "0", "]", ")", "\n", "score_matrix", "=", "np", ".", "c_", "[", "score_matrix", ",", "pad", "]", "\n", "num_matrix", "=", "np", ".", "c_", "[", "num_matrix", ",", "pad", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "hyper_matrix", ",", "np", ".", "zeros", "(", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ",", "1", ",", "2", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "hyper_matrix", "[", "i", ",", "-", "1", ",", "0", "]", "=", "hyper_matrix", "[", "i", ",", "-", "1", "-", "1", ",", "0", "]", "*", "10", "\n", "hyper_matrix", "[", "i", ",", "-", "1", ",", "1", "]", "=", "hyper_matrix", "[", "i", ",", "-", "1", "-", "1", ",", "1", "]", "\n", "", "", "if", "x_cen", "==", "0", ":", "\n", "            ", "x_cen", "+=", "1", "\n", "pad", "=", "np", ".", "zeros", "(", "(", "1", ",", "score_matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "score_matrix", "=", "np", ".", "r_", "[", "pad", ",", "score_matrix", "]", "\n", "num_matrix", "=", "np", ".", "r_", "[", "pad", ",", "num_matrix", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "1", ",", "hyper_matrix", ".", "shape", "[", "1", "]", ",", "2", ")", ")", ",", "hyper_matrix", ")", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "hyper_matrix", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "hyper_matrix", "[", "0", ",", "i", ",", "0", "]", "=", "hyper_matrix", "[", "1", ",", "i", ",", "0", "]", "\n", "hyper_matrix", "[", "0", ",", "i", ",", "1", "]", "=", "hyper_matrix", "[", "1", ",", "i", ",", "1", "]", "/", "10", "\n", "", "", "if", "x_cen", "==", "score_matrix", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "            ", "pad", "=", "np", ".", "zeros", "(", "(", "1", ",", "score_matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "score_matrix", "=", "np", ".", "r_", "[", "score_matrix", ",", "pad", "]", "\n", "num_matrix", "=", "np", ".", "r_", "[", "num_matrix", ",", "pad", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "hyper_matrix", ",", "np", ".", "zeros", "(", "(", "1", ",", "hyper_matrix", ".", "shape", "[", "1", "]", ",", "2", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "hyper_matrix", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "hyper_matrix", "[", "-", "1", ",", "i", ",", "0", "]", "=", "hyper_matrix", "[", "-", "1", "-", "1", ",", "i", ",", "0", "]", "\n", "hyper_matrix", "[", "-", "1", ",", "i", ",", "1", "]", "=", "hyper_matrix", "[", "-", "1", "-", "1", ",", "i", ",", "1", "]", "*", "10", "\n", "## finding the best performance", "\n", "", "", "for", "x_curr", ",", "y_curr", "in", "[", "[", "x_cen", ",", "y_cen", "]", ",", "[", "x_cen", "-", "1", ",", "y_cen", "]", ",", "[", "x_cen", ",", "y_cen", "-", "1", "]", ",", "[", "x_cen", "+", "1", ",", "y_cen", "]", ",", "[", "x_cen", ",", "y_cen", "+", "1", "]", "]", ":", "\n", "            ", "if", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "<", "min_num_coarse", "or", "(", "x_curr", "==", "x_cen", "and", "y_curr", "==", "y_cen", ")", ")", "and", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "<", "0.5", "or", "score_matrix", "[", "x_curr", ",", "y_curr", "]", ">=", "0.7", "*", "score_matrix", ".", "max", "(", ")", ")", ":", "\n", "                ", "para", "[", "3", ":", "5", "]", "=", "hyper_matrix", "[", "x_curr", ",", "y_curr", "]", "\n", "print_params", "(", "para_name", ",", "para", ")", "\n", "path_excel", "=", "path_excel_dir", "+", "str", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "+", "str", "(", "int", "(", "rd", ".", "uniform", "(", "100", ",", "900", ")", ")", ")", "+", "'.xlsx'", "\n", "save_params", "(", "para_name", ",", "para", ",", "path_excel", ")", "\n", "score", "=", "train_model", "(", "para", ",", "data", ",", "path_excel", ")", "\n", "if", "para", "[", "2", "]", "not", "in", "[", "'GCMC'", ",", "'NGCF'", ",", "'SCF'", ",", "'CGMC'", ",", "'LightGCN'", "]", ":", "tf", ".", "reset_default_graph", "(", ")", "\n", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "=", "(", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "*", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "score", ")", "/", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "1", ")", "\n", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+=", "1", "\n", "print", "(", "score_matrix", ")", "\n", "print", "(", "num_matrix", ")", "\n", "x_argmax", ",", "y_argmax", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_argmax", ",", "y_argmax", "=", "x_argmax", "[", "0", "]", ",", "y_argmax", "[", "0", "]", "\n", "print", "(", "'When \\eta and \\lambda is: '", ",", "hyper_matrix", "[", "x_argmax", ",", "y_argmax", "]", ")", "\n", "print", "(", "'the model achieves the best performance: '", ",", "score_matrix", ".", "max", "(", ")", ")", "\n", "## fine tuning", "\n", "", "", "", "x_cen", ",", "y_cen", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_cen", ",", "y_cen", "=", "x_cen", "[", "0", "]", ",", "y_cen", "[", "0", "]", "\n", "score_max", "=", "score_matrix", "[", "x_cen", ",", "y_cen", "]", "\n", "num_max", "=", "num_matrix", "[", "x_cen", ",", "y_cen", "]", "\n", "lr", ",", "lamda", "=", "hyper_matrix", "[", "x_cen", ",", "y_cen", "]", "\n", "x_cen", ",", "y_cen", "=", "2", ",", "2", "\n", "score_matrix", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ")", ")", "\n", "score_matrix", "[", "x_cen", ",", "y_cen", "]", "=", "score_max", "\n", "num_matrix", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ")", ")", "\n", "num_matrix", "[", "x_cen", ",", "y_cen", "]", "=", "num_max", "\n", "hyper_matrix_lr", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "[", "get_hyperparameter", "(", "lr", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "hyper_matrix_lamda", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "[", "get_hyperparameter", "(", "lamda", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", ".", "T", ",", "axis", "=", "-", "1", ")", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "hyper_matrix_lr", ",", "hyper_matrix_lamda", ")", ",", "axis", "=", "-", "1", ")", "\n", "## initializing the score matrix", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "for", "x_curr", ",", "y_curr", "in", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "3", "]", ",", "[", "3", ",", "1", "]", ",", "[", "3", ",", "3", "]", "]", ":", "\n", "            ", "para", "[", "3", ":", "5", "]", "=", "hyper_matrix", "[", "x_curr", ",", "y_curr", "]", "\n", "print_params", "(", "para_name", ",", "para", ")", "\n", "path_excel", "=", "path_excel_dir", "+", "str", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "+", "str", "(", "int", "(", "rd", ".", "uniform", "(", "100", ",", "900", ")", ")", ")", "+", "'.xlsx'", "\n", "save_params", "(", "para_name", ",", "para", ",", "path_excel", ")", "\n", "score", "=", "train_model", "(", "para", ",", "data", ",", "path_excel", ")", "\n", "if", "para", "[", "2", "]", "not", "in", "[", "'GCMC'", ",", "'NGCF'", ",", "'SCF'", ",", "'CGMC'", ",", "'LightGCN'", "]", ":", "tf", ".", "reset_default_graph", "(", ")", "\n", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "=", "(", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "*", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "score", ")", "/", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "1", ")", "\n", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+=", "1", "\n", "print", "(", "score_matrix", ")", "\n", "print", "(", "num_matrix", ")", "\n", "x_argmax", ",", "y_argmax", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_argmax", ",", "y_argmax", "=", "x_argmax", "[", "0", "]", ",", "y_argmax", "[", "0", "]", "\n", "print", "(", "'When \\eta and \\lambda is: '", ",", "hyper_matrix", "[", "x_argmax", ",", "y_argmax", "]", ")", "\n", "print", "(", "'the model achieves the best performance: '", ",", "score_matrix", ".", "max", "(", ")", ")", "\n", "", "", "while", "num_matrix", "[", "x_cen", ",", "y_cen", "]", "<", "max_num_fine", "or", "score_matrix", ".", "max", "(", ")", "!=", "score_matrix", "[", "x_cen", ",", "y_cen", "]", ":", "\n", "        ", "x_cen", ",", "y_cen", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_cen", ",", "y_cen", "=", "x_cen", "[", "0", "]", ",", "y_cen", "[", "0", "]", "\n", "## extending matrices", "\n", "if", "y_cen", "==", "0", ":", "\n", "            ", "y_cen", "+=", "1", "\n", "pad", "=", "np", ".", "zeros", "(", "score_matrix", ".", "shape", "[", "0", "]", ")", "\n", "score_matrix", "=", "np", ".", "c_", "[", "pad", ",", "score_matrix", "]", "\n", "num_matrix", "=", "np", ".", "c_", "[", "pad", ",", "num_matrix", "]", "\n", "pad_lr", "=", "np", ".", "ones", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ")", "*", "get_hyperparameter", "(", "hyper_matrix", "[", "x_cen", ",", "y_cen", ",", "0", "]", ")", "[", "1", "]", "\n", "pad_lamda", "=", "hyper_matrix", "[", ":", ",", "0", ",", "1", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ",", "1", ",", "2", ")", ")", ",", "hyper_matrix", ")", ",", "axis", "=", "1", ")", "\n", "hyper_matrix", "[", ":", ",", "0", ",", "0", "]", "=", "pad_lr", "\n", "hyper_matrix", "[", ":", ",", "0", ",", "1", "]", "=", "pad_lamda", "\n", "", "if", "y_cen", "==", "score_matrix", ".", "shape", "[", "1", "]", "-", "1", ":", "\n", "            ", "pad", "=", "np", ".", "zeros", "(", "score_matrix", ".", "shape", "[", "0", "]", ")", "\n", "score_matrix", "=", "np", ".", "c_", "[", "score_matrix", ",", "pad", "]", "\n", "num_matrix", "=", "np", ".", "c_", "[", "num_matrix", ",", "pad", "]", "\n", "pad_lr", "=", "np", ".", "ones", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ")", "*", "get_hyperparameter", "(", "hyper_matrix", "[", "x_cen", ",", "y_cen", ",", "0", "]", ")", "[", "3", "]", "\n", "pad_lamda", "=", "hyper_matrix", "[", ":", ",", "0", ",", "1", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "hyper_matrix", ",", "np", ".", "zeros", "(", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ",", "1", ",", "2", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "hyper_matrix", "[", ":", ",", "-", "1", ",", "0", "]", "=", "pad_lr", "\n", "hyper_matrix", "[", ":", ",", "-", "1", ",", "1", "]", "=", "pad_lamda", "\n", "", "if", "x_cen", "==", "0", ":", "\n", "            ", "x_cen", "+=", "1", "\n", "pad", "=", "np", ".", "zeros", "(", "(", "1", ",", "score_matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "score_matrix", "=", "np", ".", "r_", "[", "pad", ",", "score_matrix", "]", "\n", "num_matrix", "=", "np", ".", "r_", "[", "pad", ",", "num_matrix", "]", "\n", "pad_lr", "=", "hyper_matrix", "[", "0", ",", ":", ",", "0", "]", "\n", "pad_lamda", "=", "np", ".", "ones", "(", "hyper_matrix", ".", "shape", "[", "1", "]", ")", "*", "get_hyperparameter", "(", "hyper_matrix", "[", "x_cen", ",", "y_cen", ",", "1", "]", ")", "[", "1", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "1", ",", "hyper_matrix", ".", "shape", "[", "1", "]", ",", "2", ")", ")", ",", "hyper_matrix", ")", ",", "axis", "=", "0", ")", "\n", "hyper_matrix", "[", "0", ",", ":", ",", "0", "]", "=", "pad_lr", "\n", "hyper_matrix", "[", "0", ",", ":", ",", "1", "]", "=", "pad_lamda", "\n", "", "if", "x_cen", "==", "score_matrix", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "            ", "pad", "=", "np", ".", "zeros", "(", "(", "1", ",", "score_matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "score_matrix", "=", "np", ".", "r_", "[", "score_matrix", ",", "pad", "]", "\n", "num_matrix", "=", "np", ".", "r_", "[", "num_matrix", ",", "pad", "]", "\n", "pad_lr", "=", "hyper_matrix", "[", "0", ",", ":", ",", "0", "]", "\n", "pad_lamda", "=", "np", ".", "ones", "(", "hyper_matrix", ".", "shape", "[", "1", "]", ")", "*", "get_hyperparameter", "(", "hyper_matrix", "[", "x_cen", ",", "y_cen", ",", "1", "]", ")", "[", "3", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "hyper_matrix", ",", "np", ".", "zeros", "(", "(", "1", ",", "hyper_matrix", ".", "shape", "[", "1", "]", ",", "2", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "hyper_matrix", "[", "-", "1", ",", ":", ",", "0", "]", "=", "pad_lr", "\n", "hyper_matrix", "[", "-", "1", ",", ":", ",", "1", "]", "=", "pad_lamda", "\n", "## finding the best performance", "\n", "", "for", "x_curr", ",", "y_curr", "in", "[", "[", "x_cen", ",", "y_cen", "]", ",", "[", "x_cen", "-", "1", ",", "y_cen", "]", ",", "[", "x_cen", ",", "y_cen", "-", "1", "]", ",", "[", "x_cen", "+", "1", ",", "y_cen", "]", ",", "[", "x_cen", ",", "y_cen", "+", "1", "]", "]", ":", "\n", "            ", "if", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "<", "min_num_fine", "or", "(", "x_curr", "==", "x_cen", "and", "y_curr", "==", "y_cen", ")", ")", "and", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "<", "0.5", "or", "score_matrix", "[", "x_curr", ",", "y_curr", "]", ">=", "0.7", "*", "score_matrix", ".", "max", "(", ")", ")", ":", "\n", "                ", "para", "[", "3", ":", "5", "]", "=", "hyper_matrix", "[", "x_curr", ",", "y_curr", "]", "\n", "print_params", "(", "para_name", ",", "para", ")", "\n", "path_excel", "=", "path_excel_dir", "+", "str", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "+", "str", "(", "int", "(", "rd", ".", "uniform", "(", "100", ",", "900", ")", ")", ")", "+", "'.xlsx'", "\n", "save_params", "(", "para_name", ",", "para", ",", "path_excel", ")", "\n", "score", "=", "train_model", "(", "para", ",", "data", ",", "path_excel", ")", "\n", "if", "para", "[", "2", "]", "not", "in", "[", "'GCMC'", ",", "'NGCF'", ",", "'SCF'", ",", "'CGMC'", ",", "'LightGCN'", "]", ":", "tf", ".", "reset_default_graph", "(", ")", "\n", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "=", "(", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "*", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "score", ")", "/", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "1", ")", "\n", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+=", "1", "\n", "print", "(", "score_matrix", ")", "\n", "print", "(", "num_matrix", ")", "\n", "x_argmax", ",", "y_argmax", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_argmax", ",", "y_argmax", "=", "x_argmax", "[", "0", "]", ",", "y_argmax", "[", "0", "]", "\n", "print", "(", "'When \\eta and \\lambda is: '", ",", "hyper_matrix", "[", "x_argmax", ",", "y_argmax", "]", ")", "\n", "print", "(", "'the model achieves the best performance: '", ",", "score_matrix", ".", "max", "(", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LightGCN.model_LightGCN.__init__": [[8, 63], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.concat", "range", "tensorflow.split", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.train.AdamOptimizer", "model_LightGCN.model_LightGCN.opt.minimize", "tensorflow.matmul", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.sparse_tensor_dense_matmul", "model_LightGCN.model_LightGCN.create_bpr_loss", "tensorflow.nn.top_k", "range", "tensorflow.random_normal", "tensorflow.random_normal", "model_LightGCN.model_LightGCN.regularization"], "methods", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.create_bpr_loss", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.regularization"], ["    ", "def", "__init__", "(", "self", ",", "layer", ",", "n_users", ",", "n_items", ",", "emb_dim", ",", "lr", ",", "lamda", ",", "pre_train_latent_factor", ",", "if_pretrain", ",", "sparse_graph", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "'LightGCN'", "\n", "self", ".", "n_users", "=", "n_users", "\n", "self", ".", "n_items", "=", "n_items", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "layer", "=", "layer", "\n", "self", ".", "lamda", "=", "lamda", "\n", "self", ".", "lr", "=", "lr", "\n", "[", "self", ".", "U", ",", "self", ".", "V", "]", "=", "pre_train_latent_factor", "\n", "self", ".", "if_pretrain", "=", "if_pretrain", "\n", "self", ".", "A_hat", "=", "sparse_graph", "\n", "self", ".", "layer_weight", "=", "[", "1", "/", "(", "i", "+", "1", ")", "for", "i", "in", "range", "(", "self", ".", "layer", "+", "1", ")", "]", "\n", "\n", "# placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ")", ")", "\n", "self", ".", "items_in_train_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ")", "\n", "self", ".", "top_k", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ")", "\n", "\n", "if", "self", ".", "if_pretrain", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "U", ",", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "V", ",", "name", "=", "'item_embeddings'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'item_embeddings'", ")", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "all_embeddings", "=", "embeddings", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "A_hat", ",", "embeddings", ")", "\n", "all_embeddings", "+=", "embeddings", "*", "self", ".", "layer_weight", "[", "l", "+", "1", "]", "\n", "", "self", ".", "user_all_embeddings", ",", "self", ".", "item_all_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "\n", "self", ".", "u_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_all_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "u_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "loss", "=", "self", ".", "create_bpr_loss", "(", "self", ".", "u_embeddings", ",", "self", ".", "pos_i_embeddings", ",", "self", ".", "neg_i_embeddings", ")", "+", "self", ".", "lamda", "*", "self", ".", "regularization", "(", "self", ".", "u_embeddings_reg", ",", "self", ".", "pos_i_embeddings_reg", ",", "\n", "self", ".", "neg_i_embeddings_reg", ")", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "self", ".", "updates", "=", "self", ".", "opt", ".", "minimize", "(", "self", ".", "loss", ",", "var_list", "=", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ")", "\n", "\n", "self", ".", "all_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_embeddings", ",", "self", ".", "item_all_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "all_ratings", "+=", "self", ".", "items_in_train_data", "## set a very small value for the items appearing in the training set to make sure they are at the end of the sorted list", "\n", "self", ".", "top_items", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "all_ratings", ",", "k", "=", "self", ".", "top_k", ",", "sorted", "=", "True", ")", ".", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LightGCN.model_LightGCN.create_bpr_loss": [[64, 70], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.negative", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_sum", "(", "maxi", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LightGCN.model_LightGCN.regularization": [[71, 74], ["tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "regularization", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "return", "regularizer", "", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NGCF.model_NGCF.__init__": [[8, 78], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "range", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.train.AdamOptimizer", "model_NGCF.model_NGCF.opt.minimize", "tensorflow.matmul", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "model_NGCF.model_NGCF.filters_1.append", "model_NGCF.model_NGCF.filters_2.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.multiply", "tensorflow.nn.sigmoid", "model_NGCF.model_NGCF.create_bpr_loss", "tensorflow.nn.top_k", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.Variable", "tensorflow.Variable", "model_NGCF.model_NGCF.regularization", "tensorflow.matmul", "tensorflow.matmul", "numpy.random.normal", "numpy.diag", "numpy.random.normal", "numpy.diag", "numpy.random.normal", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.create_bpr_loss", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.regularization"], ["    ", "def", "__init__", "(", "self", ",", "layer", ",", "n_users", ",", "n_items", ",", "emb_dim", ",", "lr", ",", "lamda", ",", "pre_train_latent_factor", ",", "if_pretrain", ",", "sparse_graph", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "'NGCF'", "\n", "self", ".", "n_users", "=", "n_users", "\n", "self", ".", "n_items", "=", "n_items", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "layer", "=", "layer", "\n", "self", ".", "lamda", "=", "lamda", "\n", "self", ".", "lr", "=", "lr", "\n", "[", "self", ".", "U", ",", "self", ".", "V", "]", "=", "pre_train_latent_factor", "\n", "self", ".", "if_pretrain", "=", "if_pretrain", "\n", "self", ".", "A_hat", "=", "sparse_graph", "\n", "\n", "# placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ")", ")", "\n", "self", ".", "items_in_train_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ")", "\n", "self", ".", "top_k", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ")", "\n", "\n", "if", "self", ".", "if_pretrain", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "U", ",", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "V", ",", "name", "=", "'item_embeddings'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'item_embeddings'", ")", "\n", "\n", "", "self", ".", "filters_1", "=", "[", "]", "\n", "self", ".", "filters_2", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "self", ".", "filters_1", ".", "append", "(", "\n", "tf", ".", "Variable", "(", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "0.001", ",", "(", "self", ".", "emb_dim", ",", "self", ".", "emb_dim", ")", ")", "+", "np", ".", "diag", "(", "np", ".", "random", ".", "normal", "(", "1", ",", "0.001", ",", "self", ".", "emb_dim", ")", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", ")", "\n", "self", ".", "filters_2", ".", "append", "(", "\n", "tf", ".", "Variable", "(", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "0.001", ",", "(", "self", ".", "emb_dim", ",", "self", ".", "emb_dim", ")", ")", "+", "np", ".", "diag", "(", "np", ".", "random", ".", "normal", "(", "1", ",", "0.001", ",", "self", ".", "emb_dim", ")", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", ")", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "all_embeddings", "=", "[", "embeddings", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "propagations", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "A_hat", ",", "embeddings", ")", "\n", "embeddings_1", "=", "propagations", "+", "embeddings", "\n", "embeddings_2", "=", "tf", ".", "multiply", "(", "propagations", ",", "embeddings", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "embeddings_1", ",", "self", ".", "filters_1", "[", "l", "]", ")", "+", "tf", ".", "matmul", "(", "embeddings_2", ",", "self", ".", "filters_2", "[", "l", "]", ")", ")", "\n", "# embeddings = tf.nn.relu(tf.matmul(embeddings_1, self.filters_1[l]) + tf.matmul(embeddings_2, self.filters_2[l]))", "\n", "# In the paper, authors choose relu for deep GNN. In our experiments, we try 1 layer+relu, 1 layer+sigmoid, n layers+relu, and n layers+sigmoid, and find 1 layer+sigmoid is the best choice.", "\n", "all_embeddings", "+=", "[", "embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "self", ".", "user_all_embeddings", ",", "self", ".", "item_all_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "\n", "self", ".", "u_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_all_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "u_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "loss", "=", "self", ".", "create_bpr_loss", "(", "self", ".", "u_embeddings", ",", "self", ".", "pos_i_embeddings", ",", "self", ".", "neg_i_embeddings", ")", "+", "self", ".", "lamda", "*", "self", ".", "regularization", "(", "self", ".", "u_embeddings_reg", ",", "self", ".", "pos_i_embeddings_reg", ",", "\n", "self", ".", "neg_i_embeddings_reg", ",", "self", ".", "filters_1", ",", "self", ".", "filters_2", ")", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "self", ".", "updates", "=", "self", ".", "opt", ".", "minimize", "(", "self", ".", "loss", ",", "var_list", "=", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", "+", "self", ".", "filters_1", "+", "self", ".", "filters_2", ")", "\n", "\n", "self", ".", "all_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_embeddings", ",", "self", ".", "item_all_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "all_ratings", "+=", "self", ".", "items_in_train_data", "## set a very small value for the items appearing in the training set to make sure they are at the end of the sorted list", "\n", "self", ".", "top_items", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "all_ratings", ",", "k", "=", "self", ".", "top_k", ",", "sorted", "=", "True", ")", ".", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NGCF.model_NGCF.create_bpr_loss": [[79, 85], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.negative", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_sum", "(", "maxi", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NGCF.model_NGCF.regularization": [[86, 91], ["range", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "regularization", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ",", "filters_1", ",", "filters_2", ")", ":", "\n", "        ", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "regularizer", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "filters_1", "[", "l", "]", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "filters_2", "[", "l", "]", ")", "\n", "", "return", "regularizer", "", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_GCMC.model_GCMC.__init__": [[8, 70], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "range", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.train.AdamOptimizer", "model_GCMC.model_GCMC.opt.minimize", "tensorflow.matmul", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "model_GCMC.model_GCMC.filters.append", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.nn.sigmoid", "model_GCMC.model_GCMC.create_bpr_loss", "tensorflow.nn.top_k", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.Variable", "tensorflow.matmul", "model_GCMC.model_GCMC.regularization", "numpy.random.normal", "numpy.diag", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.create_bpr_loss", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.regularization"], ["    ", "def", "__init__", "(", "self", ",", "layer", ",", "n_users", ",", "n_items", ",", "emb_dim", ",", "lr", ",", "lamda", ",", "pre_train_latent_factor", ",", "if_pretrain", ",", "sparse_graph", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "'GCMC'", "\n", "self", ".", "n_users", "=", "n_users", "\n", "self", ".", "n_items", "=", "n_items", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "layer", "=", "layer", "\n", "self", ".", "lamda", "=", "lamda", "\n", "self", ".", "lr", "=", "lr", "\n", "[", "self", ".", "U", ",", "self", ".", "V", "]", "=", "pre_train_latent_factor", "\n", "self", ".", "if_pretrain", "=", "if_pretrain", "\n", "self", ".", "A_hat", "=", "sparse_graph", "\n", "\n", "# placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ")", ")", "\n", "self", ".", "items_in_train_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ")", "\n", "self", ".", "top_k", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ")", "\n", "\n", "if", "self", ".", "if_pretrain", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "U", ",", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "V", ",", "name", "=", "'item_embeddings'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'item_embeddings'", ")", "\n", "\n", "", "self", ".", "filters", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "self", ".", "filters", ".", "append", "(", "\n", "tf", ".", "Variable", "(", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "0.001", ",", "(", "self", ".", "emb_dim", ",", "self", ".", "emb_dim", ")", ")", "+", "np", ".", "diag", "(", "np", ".", "random", ".", "normal", "(", "1", ",", "0.001", ",", "self", ".", "emb_dim", ")", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", ")", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "all_embeddings", "=", "[", "embeddings", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "A_hat", ",", "embeddings", ")", "\n", "embeddings", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "filters", "[", "l", "]", ")", ")", "\n", "all_embeddings", "+=", "[", "embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "self", ".", "user_all_embeddings", ",", "self", ".", "item_all_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "\n", "self", ".", "u_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_all_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "u_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "loss", "=", "self", ".", "create_bpr_loss", "(", "self", ".", "u_embeddings", ",", "self", ".", "pos_i_embeddings", ",", "self", ".", "neg_i_embeddings", ")", "+", "self", ".", "lamda", "*", "self", ".", "regularization", "(", "self", ".", "u_embeddings_reg", ",", "self", ".", "pos_i_embeddings_reg", ",", "\n", "self", ".", "neg_i_embeddings_reg", ",", "self", ".", "filters", ")", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "self", ".", "updates", "=", "self", ".", "opt", ".", "minimize", "(", "self", ".", "loss", ",", "var_list", "=", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", "+", "self", ".", "filters", ")", "\n", "\n", "self", ".", "all_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_embeddings", ",", "self", ".", "item_all_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "all_ratings", "+=", "self", ".", "items_in_train_data", "## set a very small value for the items appearing in the training set to make sure they are at the end of the sorted list", "\n", "self", ".", "top_items", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "all_ratings", ",", "k", "=", "self", ".", "top_k", ",", "sorted", "=", "True", ")", ".", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_GCMC.model_GCMC.create_bpr_loss": [[71, 77], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.negative", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_sum", "(", "maxi", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_GCMC.model_GCMC.regularization": [[78, 83], ["range", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "regularization", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ",", "filters", ")", ":", "\n", "        ", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "regularizer", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "filters", "[", "l", "]", ")", "\n", "", "return", "regularizer", "", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_CGMC.model_CGMC.__init__": [[8, 71], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "range", "tensorflow.concat", "range", "tensorflow.concat", "tensorflow.split", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.train.AdamOptimizer", "model_CGMC.model_CGMC.opt.minimize", "tensorflow.matmul", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "model_CGMC.model_CGMC.filters.append", "tensorflow.nn.sigmoid", "model_CGMC.model_CGMC.create_bpr_loss", "tensorflow.nn.top_k", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.Variable", "tensorflow.matmul", "model_CGMC.model_CGMC.regularization", "tensorflow.sparse_tensor_dense_matmul", "numpy.random.normal", "numpy.diag", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.create_bpr_loss", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.regularization"], ["    ", "def", "__init__", "(", "self", ",", "layer", ",", "n_users", ",", "n_items", ",", "emb_dim", ",", "lr", ",", "lamda", ",", "pre_train_latent_factor", ",", "if_pretrain", ",", "sparse_graph", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "'CGMC'", "\n", "self", ".", "n_users", "=", "n_users", "\n", "self", ".", "n_items", "=", "n_items", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "layer", "=", "layer", "\n", "self", ".", "lamda", "=", "lamda", "\n", "self", ".", "lr", "=", "lr", "\n", "[", "self", ".", "U", ",", "self", ".", "V", "]", "=", "pre_train_latent_factor", "\n", "self", ".", "if_pretrain", "=", "if_pretrain", "\n", "self", ".", "A_hat", "=", "sparse_graph", "\n", "self", ".", "balance_weight", "=", "0.2", "## hyperparameter in the paper", "\n", "\n", "# placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ")", ")", "\n", "self", ".", "items_in_train_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ")", "\n", "self", ".", "top_k", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ")", "\n", "\n", "if", "self", ".", "if_pretrain", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "U", ",", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "V", ",", "name", "=", "'item_embeddings'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_normal", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "name", "=", "'item_embeddings'", ")", "\n", "\n", "", "self", ".", "filters", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "self", ".", "filters", ".", "append", "(", "\n", "tf", ".", "Variable", "(", "(", "np", ".", "random", ".", "normal", "(", "0", ",", "0.001", ",", "(", "self", ".", "emb_dim", ",", "self", ".", "emb_dim", ")", ")", "+", "np", ".", "diag", "(", "np", ".", "random", ".", "normal", "(", "1", ",", "0.001", ",", "self", ".", "emb_dim", ")", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", ")", "\n", "", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "all_embeddings", "=", "[", "embeddings", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "embeddings", "=", "(", "1", "-", "self", ".", "balance_weight", ")", "*", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "A_hat", ",", "embeddings", ")", "+", "self", ".", "balance_weight", "*", "embeddings", "\n", "embeddings", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "embeddings", ",", "self", ".", "filters", "[", "l", "]", ")", ")", "\n", "all_embeddings", "+=", "[", "embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "self", ".", "user_all_embeddings", ",", "self", ".", "item_all_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "\n", "self", ".", "u_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_all_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "u_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "loss", "=", "self", ".", "create_bpr_loss", "(", "self", ".", "u_embeddings", ",", "self", ".", "pos_i_embeddings", ",", "self", ".", "neg_i_embeddings", ")", "+", "self", ".", "lamda", "*", "self", ".", "regularization", "(", "self", ".", "u_embeddings_reg", ",", "self", ".", "pos_i_embeddings_reg", ",", "\n", "self", ".", "neg_i_embeddings_reg", ",", "self", ".", "filters", ")", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "self", ".", "updates", "=", "self", ".", "opt", ".", "minimize", "(", "self", ".", "loss", ",", "var_list", "=", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", "+", "self", ".", "filters", ")", "\n", "\n", "self", ".", "all_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_embeddings", ",", "self", ".", "item_all_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "self", ".", "all_ratings", "+=", "self", ".", "items_in_train_data", "## set a very small value for the items appearing in the training set to make sure they are at the end of the sorted list", "\n", "self", ".", "top_items", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "all_ratings", ",", "k", "=", "self", ".", "top_k", ",", "sorted", "=", "True", ")", ".", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_CGMC.model_CGMC.create_bpr_loss": [[72, 78], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.negative", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.sigmoid", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ")", ":", "\n", "        ", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "pos_items", ")", ",", "axis", "=", "1", ")", "\n", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "users", ",", "neg_items", ")", ",", "axis", "=", "1", ")", "\n", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_sum", "(", "maxi", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_CGMC.model_CGMC.regularization": [[79, 84], ["range", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "regularization", "(", "self", ",", "users", ",", "pos_items", ",", "neg_items", ",", "filters", ")", ":", "\n", "        ", "regularizer", "=", "tf", ".", "nn", ".", "l2_loss", "(", "users", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "pos_items", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_items", ")", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "regularizer", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "filters", "[", "l", "]", ")", "\n", "", "return", "regularizer", "", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.coarse_tuning.coarse_tuning": [[12, 91], ["numpy.zeros", "numpy.array", "numpy.zeros", "range", "numpy.where", "np.zeros.max", "numpy.zeros", "numpy.concatenate", "range", "numpy.zeros", "numpy.concatenate", "range", "numpy.zeros", "numpy.concatenate", "range", "numpy.zeros", "numpy.concatenate", "range", "range", "print_save.print_params", "print_save.save_params", "train_model.train_model", "print", "print", "numpy.where", "print", "print", "np.zeros.max", "print_save.print_params", "print_save.save_params", "train_model.train_model", "print", "print", "numpy.where", "print", "print", "range", "tensorflow.reset_default_graph", "np.zeros.max", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "tensorflow.reset_default_graph", "np.zeros.max", "str", "np.zeros.max", "str", "np.zeros.max", "np.zeros.max", "str", "int", "np.zeros.max", "str", "int", "int", "random.uniform", "int", "random.uniform", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.print_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.save_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.train_model.train_model", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.print_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.save_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.train_model.train_model"], ["def", "coarse_tuning", "(", "path_excel_dir", ",", "para_name", ",", "para", ",", "data", ",", "lr", ",", "lamda", ",", "min_num_coarse", ",", "max_num_coarse", ")", ":", "\n", "## tuning settings", "\n", "    ", "x_cen", ",", "y_cen", "=", "1", ",", "1", "\n", "score_matrix", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "hyper_matrix", "=", "np", ".", "array", "(", "[", "[", "[", "lr", "*", "(", "10", "**", "i", ")", ",", "lamda", "*", "(", "10", "**", "j", ")", "]", "for", "i", "in", "range", "(", "-", "1", ",", "2", ")", "]", "for", "j", "in", "range", "(", "-", "1", ",", "2", ")", "]", ")", "\n", "num_matrix", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "## coarse tuning", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "x_curr", ",", "y_curr", "in", "[", "[", "x_cen", ",", "y_cen", "]", ",", "[", "x_cen", "-", "1", ",", "y_cen", "]", ",", "[", "x_cen", ",", "y_cen", "-", "1", "]", ",", "[", "x_cen", "+", "1", ",", "y_cen", "]", ",", "[", "x_cen", ",", "y_cen", "+", "1", "]", "]", ":", "\n", "            ", "if", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "<", "min_num_coarse", "or", "(", "x_curr", "==", "x_cen", "and", "y_curr", "==", "y_cen", ")", ")", "and", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "<", "0.5", "or", "score_matrix", "[", "x_curr", ",", "y_curr", "]", ">=", "0.7", "*", "score_matrix", ".", "max", "(", ")", ")", ":", "\n", "                ", "para", "[", "3", ":", "5", "]", "=", "hyper_matrix", "[", "x_curr", ",", "y_curr", "]", "\n", "print_params", "(", "para_name", ",", "para", ")", "\n", "path_excel", "=", "path_excel_dir", "+", "str", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "+", "str", "(", "int", "(", "rd", ".", "uniform", "(", "100", ",", "900", ")", ")", ")", "+", "'.xlsx'", "\n", "save_params", "(", "para_name", ",", "para", ",", "path_excel", ")", "\n", "score", "=", "train_model", "(", "para", ",", "data", ",", "path_excel", ")", "\n", "if", "para", "[", "2", "]", "not", "in", "[", "'GCMC'", ",", "'NGCF'", ",", "'SCF'", ",", "'CGMC'", ",", "'LightGCN'", "]", ":", "tf", ".", "reset_default_graph", "(", ")", "\n", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "=", "(", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "*", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "score", ")", "/", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "1", ")", "\n", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+=", "1", "\n", "print", "(", "score_matrix", ")", "\n", "print", "(", "num_matrix", ")", "\n", "x_argmax", ",", "y_argmax", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_argmax", ",", "y_argmax", "=", "x_argmax", "[", "0", "]", ",", "y_argmax", "[", "0", "]", "\n", "print", "(", "'When \\eta and \\lambda is: '", ",", "hyper_matrix", "[", "x_argmax", ",", "y_argmax", "]", ")", "\n", "print", "(", "'the model achieves the best performance: '", ",", "score_matrix", ".", "max", "(", ")", ")", "\n", "", "", "", "while", "num_matrix", "[", "x_cen", ",", "y_cen", "]", "<", "max_num_coarse", "or", "score_matrix", ".", "max", "(", ")", "!=", "score_matrix", "[", "x_cen", ",", "y_cen", "]", ":", "\n", "        ", "x_cen", ",", "y_cen", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_cen", ",", "y_cen", "=", "x_cen", "[", "0", "]", ",", "y_cen", "[", "0", "]", "\n", "## extending the matrices", "\n", "if", "y_cen", "==", "0", ":", "\n", "            ", "y_cen", "+=", "1", "\n", "pad", "=", "np", ".", "zeros", "(", "score_matrix", ".", "shape", "[", "0", "]", ")", "\n", "score_matrix", "=", "np", ".", "c_", "[", "pad", ",", "score_matrix", "]", "\n", "num_matrix", "=", "np", ".", "c_", "[", "pad", ",", "num_matrix", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ",", "1", ",", "2", ")", ")", ",", "hyper_matrix", ")", ",", "axis", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "hyper_matrix", "[", "i", ",", "0", ",", "0", "]", "=", "hyper_matrix", "[", "i", ",", "1", ",", "0", "]", "/", "10", "\n", "hyper_matrix", "[", "i", ",", "0", ",", "1", "]", "=", "hyper_matrix", "[", "i", ",", "1", ",", "1", "]", "\n", "", "", "if", "y_cen", "==", "score_matrix", ".", "shape", "[", "1", "]", "-", "1", ":", "\n", "            ", "pad", "=", "np", ".", "zeros", "(", "score_matrix", ".", "shape", "[", "0", "]", ")", "\n", "score_matrix", "=", "np", ".", "c_", "[", "score_matrix", ",", "pad", "]", "\n", "num_matrix", "=", "np", ".", "c_", "[", "num_matrix", ",", "pad", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "hyper_matrix", ",", "np", ".", "zeros", "(", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ",", "1", ",", "2", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "hyper_matrix", "[", "i", ",", "-", "1", ",", "0", "]", "=", "hyper_matrix", "[", "i", ",", "-", "1", "-", "1", ",", "0", "]", "*", "10", "\n", "hyper_matrix", "[", "i", ",", "-", "1", ",", "1", "]", "=", "hyper_matrix", "[", "i", ",", "-", "1", "-", "1", ",", "1", "]", "\n", "", "", "if", "x_cen", "==", "0", ":", "\n", "            ", "x_cen", "+=", "1", "\n", "pad", "=", "np", ".", "zeros", "(", "(", "1", ",", "score_matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "score_matrix", "=", "np", ".", "r_", "[", "pad", ",", "score_matrix", "]", "\n", "num_matrix", "=", "np", ".", "r_", "[", "pad", ",", "num_matrix", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "1", ",", "hyper_matrix", ".", "shape", "[", "1", "]", ",", "2", ")", ")", ",", "hyper_matrix", ")", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "hyper_matrix", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "hyper_matrix", "[", "0", ",", "i", ",", "0", "]", "=", "hyper_matrix", "[", "1", ",", "i", ",", "0", "]", "\n", "hyper_matrix", "[", "0", ",", "i", ",", "1", "]", "=", "hyper_matrix", "[", "1", ",", "i", ",", "1", "]", "/", "10", "\n", "", "", "if", "x_cen", "==", "score_matrix", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "            ", "pad", "=", "np", ".", "zeros", "(", "(", "1", ",", "score_matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "score_matrix", "=", "np", ".", "r_", "[", "score_matrix", ",", "pad", "]", "\n", "num_matrix", "=", "np", ".", "r_", "[", "num_matrix", ",", "pad", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "hyper_matrix", ",", "np", ".", "zeros", "(", "(", "1", ",", "hyper_matrix", ".", "shape", "[", "1", "]", ",", "2", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "hyper_matrix", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "hyper_matrix", "[", "-", "1", ",", "i", ",", "0", "]", "=", "hyper_matrix", "[", "-", "1", "-", "1", ",", "i", ",", "0", "]", "\n", "hyper_matrix", "[", "-", "1", ",", "i", ",", "1", "]", "=", "hyper_matrix", "[", "-", "1", "-", "1", ",", "i", ",", "1", "]", "*", "10", "\n", "## finding the best performance", "\n", "", "", "for", "x_curr", ",", "y_curr", "in", "[", "[", "x_cen", ",", "y_cen", "]", ",", "[", "x_cen", "-", "1", ",", "y_cen", "]", ",", "[", "x_cen", ",", "y_cen", "-", "1", "]", ",", "[", "x_cen", "+", "1", ",", "y_cen", "]", ",", "[", "x_cen", ",", "y_cen", "+", "1", "]", "]", ":", "\n", "            ", "if", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "<", "min_num_coarse", "or", "(", "x_curr", "==", "x_cen", "and", "y_curr", "==", "y_cen", ")", ")", "and", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "<", "0.5", "or", "score_matrix", "[", "x_curr", ",", "y_curr", "]", ">=", "0.7", "*", "score_matrix", ".", "max", "(", ")", ")", ":", "\n", "                ", "para", "[", "3", ":", "5", "]", "=", "hyper_matrix", "[", "x_curr", ",", "y_curr", "]", "\n", "print_params", "(", "para_name", ",", "para", ")", "\n", "path_excel", "=", "path_excel_dir", "+", "str", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "+", "str", "(", "int", "(", "rd", ".", "uniform", "(", "100", ",", "900", ")", ")", ")", "+", "'.xlsx'", "\n", "save_params", "(", "para_name", ",", "para", ",", "path_excel", ")", "\n", "score", "=", "train_model", "(", "para", ",", "data", ",", "path_excel", ")", "\n", "if", "para", "[", "2", "]", "not", "in", "[", "'GCMC'", ",", "'NGCF'", ",", "'SCF'", ",", "'CGMC'", ",", "'LightGCN'", "]", ":", "tf", ".", "reset_default_graph", "(", ")", "\n", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "=", "(", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "*", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "score", ")", "/", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "1", ")", "\n", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+=", "1", "\n", "print", "(", "score_matrix", ")", "\n", "print", "(", "num_matrix", ")", "\n", "x_argmax", ",", "y_argmax", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_argmax", ",", "y_argmax", "=", "x_argmax", "[", "0", "]", ",", "y_argmax", "[", "0", "]", "\n", "print", "(", "'When \\eta and \\lambda is: '", ",", "hyper_matrix", "[", "x_argmax", ",", "y_argmax", "]", ")", "\n", "print", "(", "'the model achieves the best performance: '", ",", "score_matrix", ".", "max", "(", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.print_params": [[5, 8], ["range", "len", "print"], "function", ["None"], ["def", "print_params", "(", "para_name", ",", "para", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "para", ")", ")", ":", "\n", "        ", "print", "(", "para_name", "[", "i", "]", "+", "':  '", ",", "para", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.print_value": [[9, 13], ["print", "print"], "function", ["None"], ["", "", "def", "print_value", "(", "value", ")", ":", "\n", "    ", "[", "inter", ",", "loss", ",", "f1_max", ",", "F1", ",", "NDCG", "]", "=", "value", "\n", "print", "(", "'iter: %d loss %.2f f1 %.4f'", "%", "(", "inter", ",", "loss", ",", "f1_max", ")", ",", "end", "=", "'  '", ")", "\n", "print", "(", "F1", ",", "NDCG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.save_params": [[14, 32], ["openpyxl.Workbook", "range", "enumerate", "openpyxl.Workbook.save", "len", "isinstance", "ldata.append", "enumerate", "isinstance", "parameter.append", "parameter.append", "parameter.append", "table.cell"], "function", ["None"], ["", "def", "save_params", "(", "para_name", ",", "para", ",", "path_excel", ")", ":", "\n", "    ", "wb", "=", "Workbook", "(", ")", "\n", "table", "=", "wb", ".", "active", "\n", "table", ".", "title", "=", "'Parameters'", "\n", "ldata", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "para_name", ")", ")", ":", "# do not save GPU_index", "\n", "        ", "parameter", "=", "[", "para_name", "[", "i", "]", "]", "\n", "parameter_value", "=", "para", "[", "i", "]", "\n", "if", "isinstance", "(", "parameter_value", ",", "list", ")", ":", "\n", "            ", "for", "value", "in", "parameter_value", ":", "\n", "                ", "parameter", ".", "append", "(", "value", ")", "\n", "", "", "elif", "isinstance", "(", "parameter_value", ",", "bool", ")", ":", "parameter", ".", "append", "(", "{", "True", ":", "'Yes'", ",", "False", ":", "'No'", "}", "[", "parameter_value", "]", ")", "\n", "else", ":", "parameter", ".", "append", "(", "parameter_value", ")", "\n", "ldata", ".", "append", "(", "parameter", ")", "\n", "", "for", "i", ",", "p", "in", "enumerate", "(", "ldata", ")", ":", "\n", "        ", "for", "j", ",", "q", "in", "enumerate", "(", "p", ")", ":", "\n", "            ", "table", ".", "cell", "(", "row", "=", "i", "+", "1", ",", "column", "=", "j", "+", "1", ")", ".", "value", "=", "q", "\n", "", "", "wb", ".", "save", "(", "path_excel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.save_value": [[33, 50], ["pandas.ExcelWriter", "pd.ExcelWriter.close", "openpyxl.load_workbook", "openpyxl.load_workbook.get_sheet_names", "df[].to_excel", "pd.ExcelWriter.save", "df[].to_excel", "pd.ExcelWriter.save", "openpyxl.load_workbook.remove_sheet", "openpyxl.load_workbook.get_sheet_by_name"], "function", ["None"], ["", "def", "save_value", "(", "df_list", ",", "path_excel", ",", "first_sheet", ")", ":", "\n", "    ", "excelWriter", "=", "pd", ".", "ExcelWriter", "(", "path_excel", ",", "engine", "=", "'openpyxl'", ")", "\n", "\n", "if", "first_sheet", "is", "False", ":", "\n", "        ", "workbook", "=", "load_workbook", "(", "path_excel", ")", "\n", "excelWriter", ".", "book", "=", "workbook", "\n", "exist_sheets", "=", "workbook", ".", "get_sheet_names", "(", ")", "\n", "for", "df", "in", "df_list", ":", "\n", "            ", "if", "df", "[", "1", "]", "in", "exist_sheets", ":", "\n", "                ", "workbook", ".", "remove_sheet", "(", "workbook", ".", "get_sheet_by_name", "(", "df", "[", "1", "]", ")", ")", "\n", "", "df", "[", "0", "]", ".", "to_excel", "(", "excel_writer", "=", "excelWriter", ",", "sheet_name", "=", "df", "[", "1", "]", ",", "index", "=", "True", ")", "\n", "excelWriter", ".", "save", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "df", "in", "df_list", ":", "\n", "            ", "df", "[", "0", "]", ".", "to_excel", "(", "excel_writer", "=", "excelWriter", ",", "sheet_name", "=", "df", "[", "1", "]", ",", "index", "=", "True", ")", "\n", "excelWriter", ".", "save", "(", ")", "\n", "", "", "excelWriter", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.df2str": [[51, 59], ["range", "df.iloc[].values.tolist", "str"], "function", ["None"], ["", "def", "df2str", "(", "df", ")", ":", "\n", "    ", "df_str", "=", "''", "\n", "for", "i", "in", "range", "(", "df", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "df_list", "=", "df", ".", "iloc", "[", "[", "i", "]", ",", ":", "]", ".", "values", ".", "tolist", "(", ")", "\n", "df_list2", "=", "[", "str", "(", "i", ")", "for", "i", "in", "df_list", "]", "\n", "str_temp", "=", "''", ".", "join", "(", "df_list2", ")", "\n", "df_str", "=", "df_str", "+", "str_temp", "+", "','", "\n", "", "return", "df_str", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.test.test": [[7, 14], ["range", "print_save.print_params", "print_save.save_params", "train_model.train_model", "tensorflow.reset_default_graph", "str", "str", "int", "int", "random.uniform", "time.time"], "function", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.print_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.save_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.train_model.train_model"], ["def", "test", "(", "path_excel_dir", ",", "para_name", ",", "para", ",", "data", ",", "iter_num", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "iter_num", ")", ":", "\n", "        ", "print_params", "(", "para_name", ",", "para", ")", "\n", "path_excel", "=", "path_excel_dir", "+", "str", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "+", "str", "(", "int", "(", "rd", ".", "uniform", "(", "100", ",", "900", ")", ")", ")", "+", "'.xlsx'", "\n", "save_params", "(", "para_name", ",", "para", ",", "path_excel", ")", "\n", "_", "=", "train_model", "(", "para", ",", "data", ",", "path_excel", ")", "\n", "if", "para", "[", "2", "]", "not", "in", "[", "'GCMC'", ",", "'NGCF'", ",", "'SCF'", ",", "'CGMC'", ",", "'LightGCN'", "]", ":", "tf", ".", "reset_default_graph", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.fine_tuning.fine_tuning": [[9, 93], ["numpy.zeros", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims", "numpy.concatenate", "range", "numpy.array", "numpy.where", "numpy.array", "print_save.print_params", "print_save.save_params", "train_model.train_model", "print", "print", "numpy.where", "print", "print", "np.zeros.max", "numpy.zeros", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "get_hyperparameters.get_hyperparameter", "tensorflow.reset_default_graph", "np.zeros.max", "np.zeros.max", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "print_save.print_params", "print_save.save_params", "train_model.train_model", "print", "print", "numpy.where", "print", "print", "range", "get_hyperparameters.get_hyperparameter", "str", "np.zeros.max", "get_hyperparameters.get_hyperparameter", "numpy.zeros", "get_hyperparameters.get_hyperparameter", "numpy.zeros", "get_hyperparameters.get_hyperparameter", "numpy.zeros", "get_hyperparameters.get_hyperparameter", "numpy.zeros", "tensorflow.reset_default_graph", "np.zeros.max", "range", "str", "int", "str", "np.zeros.max", "int", "random.uniform", "np.zeros.max", "str", "int", "time.time", "int", "random.uniform", "time.time"], "function", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.print_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.save_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.train_model.train_model", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.print_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.print_save.save_params", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.train_model.train_model", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter"], ["def", "fine_tuning", "(", "path_excel_dir", ",", "para_name", ",", "para", ",", "data", ",", "lr", ",", "lamda", ",", "min_num_fine", ",", "max_num_fine", ")", ":", "\n", "## fine tuning", "\n", "    ", "x_cen", ",", "y_cen", "=", "2", ",", "2", "\n", "score_matrix", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ")", ")", "\n", "num_matrix", "=", "np", ".", "zeros", "(", "(", "5", ",", "5", ")", ")", "\n", "hyper_matrix_lr", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "[", "get_hyperparameter", "(", "lr", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "hyper_matrix_lamda", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "[", "get_hyperparameter", "(", "lamda", ")", "for", "i", "in", "range", "(", "5", ")", "]", ")", ".", "T", ",", "axis", "=", "-", "1", ")", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "hyper_matrix_lr", ",", "hyper_matrix_lamda", ")", ",", "axis", "=", "-", "1", ")", "\n", "## initializing the score matrix", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "for", "x_curr", ",", "y_curr", "in", "[", "[", "2", ",", "2", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "3", "]", ",", "[", "3", ",", "1", "]", ",", "[", "3", ",", "3", "]", "]", ":", "\n", "            ", "para", "[", "3", ":", "5", "]", "=", "hyper_matrix", "[", "x_curr", ",", "y_curr", "]", "\n", "print_params", "(", "para_name", ",", "para", ")", "\n", "path_excel", "=", "path_excel_dir", "+", "str", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "+", "str", "(", "int", "(", "rd", ".", "uniform", "(", "100", ",", "900", ")", ")", ")", "+", "'.xlsx'", "\n", "save_params", "(", "para_name", ",", "para", ",", "path_excel", ")", "\n", "score", "=", "train_model", "(", "para", ",", "data", ",", "path_excel", ")", "\n", "if", "para", "[", "2", "]", "not", "in", "[", "'GCMC'", ",", "'NGCF'", ",", "'SCF'", ",", "'CGMC'", ",", "'LightGCN'", "]", ":", "tf", ".", "reset_default_graph", "(", ")", "\n", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "=", "(", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "*", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "score", ")", "/", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "1", ")", "\n", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+=", "1", "\n", "print", "(", "score_matrix", ")", "\n", "print", "(", "num_matrix", ")", "\n", "x_argmax", ",", "y_argmax", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_argmax", ",", "y_argmax", "=", "x_argmax", "[", "0", "]", ",", "y_argmax", "[", "0", "]", "\n", "print", "(", "'When \\eta and \\lambda is: '", ",", "hyper_matrix", "[", "x_argmax", ",", "y_argmax", "]", ")", "\n", "print", "(", "'the model achieves the best performance: '", ",", "score_matrix", ".", "max", "(", ")", ")", "\n", "", "", "while", "num_matrix", "[", "x_cen", ",", "y_cen", "]", "<", "max_num_fine", "or", "score_matrix", ".", "max", "(", ")", "!=", "score_matrix", "[", "x_cen", ",", "y_cen", "]", ":", "\n", "        ", "x_cen", ",", "y_cen", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_cen", ",", "y_cen", "=", "x_cen", "[", "0", "]", ",", "y_cen", "[", "0", "]", "\n", "## extending matrices", "\n", "if", "y_cen", "==", "0", ":", "\n", "            ", "y_cen", "+=", "1", "\n", "pad", "=", "np", ".", "zeros", "(", "score_matrix", ".", "shape", "[", "0", "]", ")", "\n", "score_matrix", "=", "np", ".", "c_", "[", "pad", ",", "score_matrix", "]", "\n", "num_matrix", "=", "np", ".", "c_", "[", "pad", ",", "num_matrix", "]", "\n", "pad_lr", "=", "np", ".", "ones", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ")", "*", "get_hyperparameter", "(", "hyper_matrix", "[", "x_cen", ",", "y_cen", ",", "0", "]", ")", "[", "1", "]", "\n", "pad_lamda", "=", "hyper_matrix", "[", ":", ",", "0", ",", "1", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ",", "1", ",", "2", ")", ")", ",", "hyper_matrix", ")", ",", "axis", "=", "1", ")", "\n", "hyper_matrix", "[", ":", ",", "0", ",", "0", "]", "=", "pad_lr", "\n", "hyper_matrix", "[", ":", ",", "0", ",", "1", "]", "=", "pad_lamda", "\n", "", "if", "y_cen", "==", "score_matrix", ".", "shape", "[", "1", "]", "-", "1", ":", "\n", "            ", "pad", "=", "np", ".", "zeros", "(", "score_matrix", ".", "shape", "[", "0", "]", ")", "\n", "score_matrix", "=", "np", ".", "c_", "[", "score_matrix", ",", "pad", "]", "\n", "num_matrix", "=", "np", ".", "c_", "[", "num_matrix", ",", "pad", "]", "\n", "pad_lr", "=", "np", ".", "ones", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ")", "*", "get_hyperparameter", "(", "hyper_matrix", "[", "x_cen", ",", "y_cen", ",", "0", "]", ")", "[", "3", "]", "\n", "pad_lamda", "=", "hyper_matrix", "[", ":", ",", "0", ",", "1", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "hyper_matrix", ",", "np", ".", "zeros", "(", "(", "hyper_matrix", ".", "shape", "[", "0", "]", ",", "1", ",", "2", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "hyper_matrix", "[", ":", ",", "-", "1", ",", "0", "]", "=", "pad_lr", "\n", "hyper_matrix", "[", ":", ",", "-", "1", ",", "1", "]", "=", "pad_lamda", "\n", "", "if", "x_cen", "==", "0", ":", "\n", "            ", "x_cen", "+=", "1", "\n", "pad", "=", "np", ".", "zeros", "(", "(", "1", ",", "score_matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "score_matrix", "=", "np", ".", "r_", "[", "pad", ",", "score_matrix", "]", "\n", "num_matrix", "=", "np", ".", "r_", "[", "pad", ",", "num_matrix", "]", "\n", "pad_lr", "=", "hyper_matrix", "[", "0", ",", ":", ",", "0", "]", "\n", "pad_lamda", "=", "np", ".", "ones", "(", "hyper_matrix", ".", "shape", "[", "1", "]", ")", "*", "get_hyperparameter", "(", "hyper_matrix", "[", "x_cen", ",", "y_cen", ",", "1", "]", ")", "[", "1", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "(", "1", ",", "hyper_matrix", ".", "shape", "[", "1", "]", ",", "2", ")", ")", ",", "hyper_matrix", ")", ",", "axis", "=", "0", ")", "\n", "hyper_matrix", "[", "0", ",", ":", ",", "0", "]", "=", "pad_lr", "\n", "hyper_matrix", "[", "0", ",", ":", ",", "1", "]", "=", "pad_lamda", "\n", "", "if", "x_cen", "==", "score_matrix", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "            ", "pad", "=", "np", ".", "zeros", "(", "(", "1", ",", "score_matrix", ".", "shape", "[", "1", "]", ")", ")", "\n", "score_matrix", "=", "np", ".", "r_", "[", "score_matrix", ",", "pad", "]", "\n", "num_matrix", "=", "np", ".", "r_", "[", "num_matrix", ",", "pad", "]", "\n", "pad_lr", "=", "hyper_matrix", "[", "0", ",", ":", ",", "0", "]", "\n", "pad_lamda", "=", "np", ".", "ones", "(", "hyper_matrix", ".", "shape", "[", "1", "]", ")", "*", "get_hyperparameter", "(", "hyper_matrix", "[", "x_cen", ",", "y_cen", ",", "1", "]", ")", "[", "3", "]", "\n", "hyper_matrix", "=", "np", ".", "concatenate", "(", "(", "hyper_matrix", ",", "np", ".", "zeros", "(", "(", "1", ",", "hyper_matrix", ".", "shape", "[", "1", "]", ",", "2", ")", ")", ")", ",", "axis", "=", "0", ")", "\n", "hyper_matrix", "[", "-", "1", ",", ":", ",", "0", "]", "=", "pad_lr", "\n", "hyper_matrix", "[", "-", "1", ",", ":", ",", "1", "]", "=", "pad_lamda", "\n", "## finding the best performance", "\n", "", "for", "x_curr", ",", "y_curr", "in", "[", "[", "x_cen", ",", "y_cen", "]", ",", "[", "x_cen", "-", "1", ",", "y_cen", "]", ",", "[", "x_cen", ",", "y_cen", "-", "1", "]", ",", "[", "x_cen", "+", "1", ",", "y_cen", "]", ",", "[", "x_cen", ",", "y_cen", "+", "1", "]", "]", ":", "\n", "            ", "if", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "<", "min_num_fine", "or", "(", "x_curr", "==", "x_cen", "and", "y_curr", "==", "y_cen", ")", ")", "and", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "<", "0.5", "or", "score_matrix", "[", "x_curr", ",", "y_curr", "]", ">=", "0.7", "*", "score_matrix", ".", "max", "(", ")", ")", ":", "\n", "                ", "para", "[", "3", ":", "5", "]", "=", "hyper_matrix", "[", "x_curr", ",", "y_curr", "]", "\n", "print_params", "(", "para_name", ",", "para", ")", "\n", "path_excel", "=", "path_excel_dir", "+", "str", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "+", "str", "(", "int", "(", "rd", ".", "uniform", "(", "100", ",", "900", ")", ")", ")", "+", "'.xlsx'", "\n", "save_params", "(", "para_name", ",", "para", ",", "path_excel", ")", "\n", "score", "=", "train_model", "(", "para", ",", "data", ",", "path_excel", ")", "\n", "if", "para", "[", "2", "]", "not", "in", "[", "'GCMC'", ",", "'NGCF'", ",", "'SCF'", ",", "'CGMC'", ",", "'LightGCN'", "]", ":", "tf", ".", "reset_default_graph", "(", ")", "\n", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "=", "(", "score_matrix", "[", "x_curr", ",", "y_curr", "]", "*", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "score", ")", "/", "(", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+", "1", ")", "\n", "num_matrix", "[", "x_curr", ",", "y_curr", "]", "+=", "1", "\n", "print", "(", "score_matrix", ")", "\n", "print", "(", "num_matrix", ")", "\n", "x_argmax", ",", "y_argmax", "=", "np", ".", "where", "(", "score_matrix", "==", "score_matrix", ".", "max", "(", ")", ")", "\n", "x_argmax", ",", "y_argmax", "=", "x_argmax", "[", "0", "]", ",", "y_argmax", "[", "0", "]", "\n", "print", "(", "'When \\eta and \\lambda is: '", ",", "hyper_matrix", "[", "x_argmax", ",", "y_argmax", "]", ")", "\n", "print", "(", "'the model achieves the best performance: '", ",", "score_matrix", ".", "max", "(", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.get_hyperparameters.get_hyperparameter": [[6, 20], ["numpy.array", "numpy.argwhere", "para_list[].tolist"], "function", ["None"], ["def", "get_hyperparameter", "(", "x", ")", ":", "\n", "    ", "para_list", "=", "np", ".", "array", "(", "[", "0.00000001", ",", "0.00000002", ",", "0.00000005", ",", "\n", "0.0000001", ",", "0.0000002", ",", "0.0000005", ",", "\n", "0.000001", ",", "0.000002", ",", "0.000005", ",", "\n", "0.00001", ",", "0.00002", ",", "0.00005", ",", "\n", "0.0001", ",", "0.0002", ",", "0.0005", ",", "\n", "0.001", ",", "0.002", ",", "0.005", ",", "\n", "0.01", ",", "0.02", ",", "0.05", ",", "\n", "0.1", ",", "0.2", ",", "0.5", ",", "\n", "1", ",", "2", ",", "5", ",", "\n", "10", ",", "20", ",", "50", ",", "\n", "100", ",", "200", ",", "500", "]", ")", "\n", "index", "=", "np", ".", "argwhere", "(", "para_list", "==", "x", ")", "\n", "return", "para_list", "[", "index", "[", "0", "]", "[", "0", "]", "-", "2", ":", "index", "[", "0", "]", "[", "0", "]", "+", "3", "]", ".", "tolist", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.__init__": [[8, 63], ["range", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "range", "tensorflow.Variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "model_NCF.model_NCF.predict", "model_NCF.model_NCF.predict", "model_NCF.model_NCF.create_bpr_loss", "tensorflow.train.GradientDescentOptimizer", "model_NCF.model_NCF.opt.minimize", "model_NCF.model_NCF.get_all_rating", "model_NCF.model_NCF.weight_size_list.append", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "model_NCF.model_NCF.W.append", "model_NCF.model_NCF.b.append", "tensorflow.random_normal", "tensorflow.nn.top_k", "max", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.Variable", "tensorflow.Variable", "int", "tensorflow.random_normal", "tensorflow.random_normal"], "methods", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.predict", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.predict", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.create_bpr_loss", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.get_all_rating"], ["    ", "def", "__init__", "(", "self", ",", "layer", ",", "n_users", ",", "n_items", ",", "emb_dim", ",", "lr", ",", "lamda", ",", "pre_train_latent_factor", ",", "if_pretrain", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "'NCF'", "\n", "self", ".", "n_users", "=", "n_users", "\n", "self", ".", "n_items", "=", "n_items", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "lamda", "=", "lamda", "\n", "self", ".", "layer", "=", "layer", "\n", "[", "self", ".", "U", ",", "self", ".", "V", "]", "=", "pre_train_latent_factor", "\n", "self", ".", "if_pretrain", "=", "if_pretrain", "\n", "self", ".", "weight_size_list", "=", "[", "2", "*", "self", ".", "emb_dim", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "self", ".", "weight_size_list", ".", "append", "(", "max", "(", "int", "(", "0.5", "**", "l", "*", "64", ")", ",", "4", ")", ")", "\n", "\n", "", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ")", ")", "\n", "self", ".", "items_in_train_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ")", "\n", "self", ".", "top_k", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ")", "\n", "\n", "if", "self", ".", "if_pretrain", ":", "\n", "            ", "self", ".", "user_embeddings_GMF", "=", "tf", ".", "Variable", "(", "self", ".", "U", ",", "name", "=", "'user_embeddings_GMF'", ")", "\n", "self", ".", "item_embeddings_GMF", "=", "tf", ".", "Variable", "(", "self", ".", "V", ",", "name", "=", "'item_embeddings_GMF'", ")", "\n", "self", ".", "user_embeddings_MLP", "=", "tf", ".", "Variable", "(", "self", ".", "U", ",", "name", "=", "'user_embeddings_MLP'", ")", "\n", "self", ".", "item_embeddings_MLP", "=", "tf", ".", "Variable", "(", "self", ".", "V", ",", "name", "=", "'item_embeddings_MLP'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "user_embeddings_GMF", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "name", "=", "'user_embeddings_GMF'", ")", "\n", "self", ".", "item_embeddings_GMF", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "name", "=", "'item_embeddings_GMF'", ")", "\n", "self", ".", "user_embeddings_MLP", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "name", "=", "'user_embeddings_MLP'", ")", "\n", "self", ".", "item_embeddings_MLP", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "name", "=", "'item_embeddings_MLP'", ")", "\n", "", "self", ".", "W", "=", "[", "]", "\n", "self", ".", "b", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "self", ".", "W", ".", "append", "(", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "weight_size_list", "[", "l", "]", ",", "self", ".", "weight_size_list", "[", "l", "+", "1", "]", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ")", ")", "\n", "self", ".", "b", ".", "append", "(", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "1", ",", "self", ".", "weight_size_list", "[", "l", "+", "1", "]", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ")", ")", "\n", "", "self", ".", "h", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "1", ",", "self", ".", "emb_dim", "+", "self", ".", "weight_size_list", "[", "-", "1", "]", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "name", "=", "'h'", ")", "\n", "\n", "self", ".", "u_embeddings_GMF", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings_GMF", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings_GMF", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings_GMF", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings_GMF", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings_GMF", ",", "self", ".", "neg_items", ")", "\n", "self", ".", "u_embeddings_MLP", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings_MLP", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings_MLP", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings_MLP", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings_MLP", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings_MLP", ",", "self", ".", "neg_items", ")", "\n", "\n", "self", ".", "pos_ratings", "=", "self", ".", "predict", "(", "self", ".", "u_embeddings_GMF", ",", "self", ".", "pos_i_embeddings_GMF", ",", "self", ".", "u_embeddings_MLP", ",", "self", ".", "pos_i_embeddings_MLP", ")", "\n", "self", ".", "neg_ratings", "=", "self", ".", "predict", "(", "self", ".", "u_embeddings_GMF", ",", "self", ".", "neg_i_embeddings_GMF", ",", "self", ".", "u_embeddings_MLP", ",", "self", ".", "neg_i_embeddings_MLP", ")", "\n", "self", ".", "loss", "=", "self", ".", "create_bpr_loss", "(", "self", ".", "pos_ratings", ",", "self", ".", "neg_ratings", ")", "\n", "self", ".", "opt", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "self", ".", "updates", "=", "self", ".", "opt", ".", "minimize", "(", "self", ".", "loss", ",", "var_list", "=", "[", "self", ".", "user_embeddings_GMF", ",", "self", ".", "item_embeddings_GMF", ",", "self", ".", "h", ",", "\n", "self", ".", "user_embeddings_MLP", ",", "self", ".", "item_embeddings_MLP", "]", "+", "self", ".", "W", "+", "self", ".", "b", ")", "\n", "\n", "self", ".", "all_ratings", "=", "self", ".", "get_all_rating", "(", "self", ".", "u_embeddings_GMF", ",", "self", ".", "item_embeddings_GMF", ",", "self", ".", "u_embeddings_MLP", ",", "self", ".", "item_embeddings_MLP", ")", "\n", "self", ".", "all_ratings", "+=", "self", ".", "items_in_train_data", "## set a very small value for the items appearing in the training set to make sure they are at the end of the sorted list", "\n", "self", ".", "top_items", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "all_ratings", ",", "k", "=", "self", ".", "top_k", ",", "sorted", "=", "True", ")", ".", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.create_bpr_loss": [[64, 67], ["tensorflow.log", "tensorflow.negative", "tensorflow.nn.sigmoid", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "create_bpr_loss", "(", "self", ",", "pos_scores", ",", "neg_scores", ")", ":", "\n", "        ", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "return", "tf", ".", "negative", "(", "tf", ".", "reduce_sum", "(", "maxi", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.regularization": [[68, 73], ["tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "regularization", "(", "self", ",", "Paras", ")", ":", "\n", "        ", "regularizer", "=", "0", "\n", "for", "para", "in", "Paras", ":", "\n", "            ", "regularizer", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "para", ")", "\n", "", "return", "regularizer", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.GMF": [[74, 77], ["tensorflow.multiply"], "methods", ["None"], ["", "def", "GMF", "(", "self", ",", "use_emb", ",", "item_emb", ")", ":", "\n", "        ", "emb", "=", "tf", ".", "multiply", "(", "use_emb", ",", "item_emb", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.MLP": [[78, 83], ["tensorflow.concat", "range", "tensorflow.nn.relu", "tensorflow.matmul"], "methods", ["None"], ["", "def", "MLP", "(", "self", ",", "use_emb", ",", "item_emb", ")", ":", "\n", "        ", "emb", "=", "tf", ".", "concat", "(", "[", "use_emb", ",", "item_emb", "]", ",", "axis", "=", "1", ")", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "            ", "emb", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "emb", ",", "self", ".", "W", "[", "l", "]", ")", "+", "self", ".", "b", "[", "l", "]", ")", "\n", "", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.predict": [[84, 90], ["model_NCF.model_NCF.GMF", "model_NCF.model_NCF.MLP", "tensorflow.concat", "tensorflow.reshape", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.GMF", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.MLP"], ["", "def", "predict", "(", "self", ",", "user_GMF", ",", "item_GMF", ",", "user_MLP", ",", "item_MLP", ")", ":", "\n", "        ", "emb_GMF", "=", "self", ".", "GMF", "(", "user_GMF", ",", "item_GMF", ")", "\n", "emb_MLP", "=", "self", ".", "MLP", "(", "user_MLP", ",", "item_MLP", ")", "\n", "emb", "=", "tf", ".", "concat", "(", "[", "emb_GMF", ",", "emb_MLP", "]", ",", "axis", "=", "1", ")", "\n", "# return tf.nn.sigmoid(tf.reshape(tf.matmul(emb, self.h, transpose_a=False, transpose_b=True), [-1]))   # there is a sigmoid in BPR thus we do not use sigmoid here", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "matmul", "(", "emb", ",", "self", ".", "h", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", ",", "[", "-", "1", "]", ")", "# reshpae is not necessary with bpr loss but crutial with cross entropy loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.get_all_rating": [[91, 101], ["tensorflow.reshape", "tensorflow.tile", "tensorflow.reshape", "tensorflow.tile", "model_NCF.model_NCF.predict", "tensorflow.reshape", "tensorflow.shape", "tensorflow.shape", "tensorflow.tile", "tensorflow.tile"], "methods", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_NCF.model_NCF.predict"], ["", "def", "get_all_rating", "(", "self", ",", "user_GMF", ",", "item_GMF", ",", "user_MLP", ",", "item_MLP", ")", ":", "\n", "        ", "n_user_b", "=", "tf", ".", "shape", "(", "user_GMF", ")", "[", "0", "]", "\n", "n_item_b", "=", "tf", ".", "shape", "(", "item_GMF", ")", "[", "0", "]", "\n", "user_GMF_b", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "user_GMF", ",", "[", "1", ",", "n_item_b", "]", ")", ",", "[", "-", "1", ",", "self", ".", "emb_dim", "]", ")", "\n", "item_GMF_b", "=", "tf", ".", "tile", "(", "item_GMF", ",", "[", "n_user_b", ",", "1", "]", ")", "\n", "user_MLP_b", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "user_MLP", ",", "[", "1", ",", "n_item_b", "]", ")", ",", "[", "-", "1", ",", "self", ".", "emb_dim", "]", ")", "\n", "item_MLP_b", "=", "tf", ".", "tile", "(", "item_MLP", ",", "[", "n_user_b", ",", "1", "]", ")", "\n", "score", "=", "self", ".", "predict", "(", "user_GMF_b", ",", "item_GMF_b", ",", "user_MLP_b", ",", "item_MLP_b", ")", "\n", "score", "=", "tf", ".", "reshape", "(", "score", ",", "[", "n_user_b", ",", "-", "1", "]", ")", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.change_params.change_params": [[10, 44], ["int", "range", "len"], "function", ["None"], ["def", "change_params", "(", "all_para", ",", "change_dic", ",", "pred_dim", ")", ":", "\n", "    ", "para_name2para_id", "=", "{", "'GPU_INDEX'", ":", "0", ",", "'DATASET'", ":", "1", ",", "'MODEL'", ":", "2", ",", "'LR'", ":", "3", ",", "'LAMDA'", ":", "4", ",", "'LAYER'", ":", "5", ",", "'EMB_DIM'", ":", "6", ",", "\n", "'BATCH_SIZE'", ":", "7", ",", "'TEST_USER_BATCH'", ":", "8", ",", "'N_EPOCH'", ":", "9", ",", "'IF_PRETRAIN'", ":", "10", ",", "'TEST_VALIDATION'", ":", "11", ",", "\n", "'TOP_K'", ":", "12", ",", "'FREQUENCY_USER'", ":", "13", ",", "'FREQUENCY_ITEM'", ":", "14", ",", "'FREQUENCY'", ":", "15", ",", "'KEEP_PORB'", ":", "16", ",", "\n", "'SAMPLE_RATE'", ":", "17", ",", "'GRAPH_CONV'", ":", "18", ",", "'PREDICTION'", ":", "19", ",", "'LOSS_FUNCTION'", ":", "20", ",", "\n", "'GENERALIZATION'", ":", "21", ",", "'OPTIMIZATION'", ":", "22", ",", "'IF_TRASFORMATION'", ":", "23", ",", "'ACTIVATION'", ":", "24", ",", "\n", "'POOLING'", ":", "25", ",", "'PROP_DIM'", ":", "26", ",", "'PROP_EMB'", ":", "27", ",", "'IF_NORM'", ":", "28", "}", "\n", "for", "para", "in", "change_dic", ":", "\n", "        ", "if", "para", "not", "in", "[", "'model'", ",", "'dataset'", ",", "'test_validation'", ",", "'pred_dim'", "]", ":", "\n", "            ", "all_para", "[", "para_name2para_id", "[", "para", "]", "]", "=", "change_dic", "[", "para", "]", "\n", "", "", "dataset", "=", "{", "'Amazon'", ":", "0", ",", "'Movielens'", ":", "1", "}", "[", "all_para", "[", "1", "]", "]", "\n", "model", "=", "{", "MODEL_list", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "MODEL_list", ")", ")", "}", "[", "all_para", "[", "2", "]", "]", "\n", "for", "para", "in", "change_dic", ":", "\n", "        ", "if", "para", "==", "'dataset'", ":", "\n", "            ", "dataset", "=", "change_dic", "[", "para", "]", "\n", "all_para", "[", "1", "]", "=", "[", "'Amazon'", ",", "'Movielens'", "]", "[", "change_dic", "[", "para", "]", "]", "\n", "", "if", "para", "==", "'model'", ":", "\n", "            ", "model", "=", "change_dic", "[", "para", "]", "\n", "all_para", "[", "2", "]", "=", "MODEL_list", "[", "change_dic", "[", "para", "]", "]", "\n", "", "if", "para", "==", "'test_validation'", ":", "all_para", "[", "11", "]", "=", "[", "'Validation'", ",", "'Test'", "]", "[", "change_dic", "[", "para", "]", "]", "\n", "if", "para", "==", "'pred_dim'", ":", "pred_dim", "=", "change_dic", "[", "para", "]", "\n", "", "all_para", "[", "3", "]", "=", "LR_list", "[", "dataset", "]", "[", "model", "]", "\n", "all_para", "[", "4", "]", "=", "LAMDA_list", "[", "dataset", "]", "[", "model", "]", "\n", "all_para", "[", "5", "]", "=", "LAYER_list", "[", "dataset", "]", "[", "model", "]", "\n", "all_para", "[", "6", "]", "=", "EMB_list", "[", "model", "]", "\n", "all_para", "[", "8", "]", "=", "TEST_USER_BATCH_list", "[", "dataset", "]", "\n", "all_para", "[", "13", "]", "=", "FREQUENCY_USER_list", "[", "dataset", "]", "\n", "all_para", "[", "14", "]", "=", "FREQUENCY_ITEM_list", "[", "dataset", "]", "\n", "## hyperparameters for LGCN", "\n", "if", "all_para", "[", "25", "]", "==", "'Concat'", ":", "all_para", "[", "6", "]", "=", "int", "(", "pred_dim", "/", "(", "all_para", "[", "5", "]", "+", "1", ")", ")", "\n", "for", "para", "in", "change_dic", ":", "\n", "        ", "if", "para", "not", "in", "[", "'model'", ",", "'dataset'", ",", "'test_validation'", ",", "'pred_dim'", "]", ":", "\n", "            ", "all_para", "[", "para_name2para_id", "[", "para", "]", "]", "=", "change_dic", "[", "para", "]", "\n", "", "", "return", "all_para", "", "", ""]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.evaluation.evaluation_F1": [[3, 11], ["set", "set", "len", "max", "len", "max", "max", "len", "len"], "function", ["None"], ["def", "evaluation_F1", "(", "order", ",", "top_k", ",", "positive_item", ")", ":", "\n", "    ", "epsilon", "=", "0.1", "**", "10", "\n", "top_k_items", "=", "set", "(", "order", "[", "0", ":", "top_k", "]", ")", "\n", "positive_item", "=", "set", "(", "positive_item", ")", "\n", "precision", "=", "len", "(", "top_k_items", "&", "positive_item", ")", "/", "max", "(", "len", "(", "top_k_items", ")", ",", "epsilon", ")", "\n", "recall", "=", "len", "(", "top_k_items", "&", "positive_item", ")", "/", "max", "(", "len", "(", "positive_item", ")", ",", "epsilon", ")", "\n", "F1", "=", "2", "*", "precision", "*", "recall", "/", "max", "(", "precision", "+", "recall", ",", "epsilon", ")", "\n", "return", "F1", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.evaluation.evaluation_NDCG": [[12, 24], ["range", "range", "min", "max", "len", "log2", "log2"], "function", ["None"], ["", "def", "evaluation_NDCG", "(", "order", ",", "top_k", ",", "positive_item", ")", ":", "\n", "    ", "top_k_item", "=", "order", "[", "0", ":", "top_k", "]", "\n", "epsilon", "=", "0.1", "**", "10", "\n", "DCG", "=", "0", "\n", "iDCG", "=", "0", "\n", "for", "i", "in", "range", "(", "top_k", ")", ":", "\n", "        ", "if", "top_k_item", "[", "i", "]", "in", "positive_item", ":", "\n", "            ", "DCG", "+=", "1", "/", "log2", "(", "i", "+", "2", ")", "\n", "", "", "for", "i", "in", "range", "(", "min", "(", "len", "(", "positive_item", ")", ",", "top_k", ")", ")", ":", "\n", "        ", "iDCG", "+=", "1", "/", "log2", "(", "i", "+", "2", ")", "\n", "", "NDCG", "=", "DCG", "/", "max", "(", "iDCG", ",", "epsilon", ")", "\n", "return", "NDCG", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.__init__": [[8, 145], ["generalization.split", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.concat", "range", "tensorflow.split", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "model_LGCN.model_LGCN.opt.minimize", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "int", "int", "tensorflow.concat", "tensorflow.reduce_max", "tensorflow.nn.tanh", "tensorflow.nn.l2_normalize", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "model_LGCN.model_LGCN.MLP", "model_LGCN.model_LGCN.MLP", "model_LGCN.model_LGCN.get_all_ratings", "tensorflow.nn.top_k", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "model_LGCN.model_LGCN.bpr_loss", "model_LGCN.model_LGCN.cross_entropy_loss", "model_LGCN.model_LGCN.mse_loss", "tensorflow.train.GradientDescentOptimizer", "tensorflow.train.RMSPropOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdagradOptimizer", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.matmul", "tensorflow.split", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.concat", "tensorflow.matmul", "tensorflow.nn.sigmoid", "tensorflow.nn.tanh", "tensorflow.nn.relu", "model_LGCN.model_LGCN.MLP", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.concat", "tensorflow.concat", "model_LGCN.model_LGCN.regularization", "tensorflow.random_normal", "range", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.random_normal", "range", "range", "tensorflow.random_normal", "range", "tensorflow.random_normal", "range", "tensorflow.random_normal", "range", "tensorflow.random_normal", "range", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.multiply", "tensorflow.concat", "tensorflow.random_normal", "range", "tensorflow.random_normal", "range", "range", "tensorflow.diag", "tensorflow.diag", "tensorflow.diag", "tensorflow.nn.sigmoid", "tensorflow.multiply", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.MLP", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.MLP", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.get_all_ratings", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.bpr_loss", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.cross_entropy_loss", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.mse_loss", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.MLP", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.regularization"], ["    ", "def", "__init__", "(", "self", ",", "n_users", ",", "n_items", ",", "lr", ",", "lamda", ",", "emb_dim", ",", "layer", ",", "pre_train_latent_factor", ",", "graph_embeddings", ",", "graph_conv", ",", "\n", "prediction", ",", "loss_function", ",", "generalization", ",", "optimization", ",", "if_pretrain", ",", "if_transformation", ",", "activation", ",", "pooling", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "'LGCN'", "\n", "self", ".", "n_users", "=", "n_users", "\n", "self", ".", "n_items", "=", "n_items", "\n", "## hyperparameters", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "lamda", "=", "lamda", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "emb_dim_predict", "=", "(", "layer", "+", "1", ")", "*", "emb_dim", "if", "pooling", "==", "'Concat'", "else", "emb_dim", "\n", "if", "graph_conv", "==", "'1D'", ":", "self", ".", "frequency", "=", "graph_embeddings", ".", "shape", "[", "1", "]", "\n", "else", ":", "self", ".", "frequency_U", ",", "self", ".", "frequency_V", "=", "graph_embeddings", "[", "0", "]", ".", "shape", "[", "1", "]", ",", "graph_embeddings", "[", "1", "]", ".", "shape", "[", "1", "]", "\n", "self", ".", "layer", "=", "layer", "\n", "## model parameters", "\n", "self", ".", "U", ",", "self", ".", "V", "=", "pre_train_latent_factor", "\n", "if", "graph_conv", "==", "'1D'", ":", "self", ".", "graph_emb", "=", "graph_embeddings", "\n", "else", ":", "self", ".", "graph_emb_U", ",", "self", ".", "graph_emb_V", "=", "graph_embeddings", "\n", "## network structure; model settings; and optimization setting", "\n", "self", ".", "graph_conv", "=", "graph_conv", "\n", "self", ".", "prediction", "=", "prediction", "\n", "self", ".", "loss_function", "=", "loss_function", "\n", "self", ".", "generalization", "=", "generalization", ".", "split", "(", "'+'", ")", "\n", "self", ".", "optimization", "=", "optimization", "\n", "self", ".", "if_pretrain", "=", "if_pretrain", "\n", "self", ".", "if_transformation", "=", "if_transformation", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "pooling", "=", "pooling", "\n", "\n", "## placeholder definition", "\n", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ")", ")", "\n", "self", ".", "items_in_train_data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "None", ")", ")", "\n", "self", ".", "top_k", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ")", ")", "\n", "\n", "## learnable parameters", "\n", "if", "self", ".", "if_pretrain", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "U", ",", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "V", ",", "name", "=", "'item_embeddings'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "n_users", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "name", "=", "'user_embeddings'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "n_items", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "name", "=", "'item_embeddings'", ")", "\n", "", "if", "graph_conv", "==", "'1D'", ":", "self", ".", "kernel", "=", "[", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "frequency", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "for", "l", "in", "range", "(", "self", ".", "layer", ")", "]", "\n", "else", ":", "self", ".", "kernel_U", ",", "self", ".", "kernel_V", "=", "[", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "frequency_U", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "for", "l", "in", "range", "(", "self", ".", "layer", ")", "]", ",", "[", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "frequency_V", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "for", "l", "in", "range", "(", "self", ".", "layer", ")", "]", "\n", "if", "self", ".", "if_transformation", ":", "self", ".", "transformation", "=", "[", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "emb_dim", ",", "self", ".", "emb_dim", "]", ",", "mean", "=", "0.01", ",", "stddev", "=", "0.02", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "for", "l", "in", "range", "(", "self", ".", "layer", ")", "]", "\n", "if", "self", ".", "pooling", "==", "'Sum'", ":", "self", ".", "layer_weight", "=", "[", "(", "1", "/", "(", "l", "+", "1", ")", ")", "**", "1", "for", "l", "in", "range", "(", "self", ".", "layer", "+", "1", ")", "]", "\n", "if", "self", ".", "pooling", "[", "0", ":", "3", "]", "==", "'MLP'", ":", "\n", "            ", "self", ".", "pooling_mlp_layer", "=", "int", "(", "self", ".", "pooling", "[", "3", ":", "]", ")", "\n", "self", ".", "pooling_layer_size", "=", "[", "(", "self", ".", "layer", "+", "1", ")", "*", "self", ".", "emb_dim", "]", "+", "[", "(", "self", ".", "pooling_mlp_layer", "-", "l", ")", "*", "self", ".", "emb_dim_predict", "for", "l", "in", "range", "(", "self", ".", "pooling_mlp_layer", ")", "]", "\n", "self", ".", "pooling_W", "=", "[", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "pooling_layer_size", "[", "l", "]", ",", "self", ".", "pooling_layer_size", "[", "l", "+", "1", "]", "]", ",", "mean", "=", "0", ",", "stddev", "=", "0.01", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "for", "l", "in", "range", "(", "self", ".", "pooling_mlp_layer", ")", "]", "\n", "self", ".", "pooling_b", "=", "[", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "pooling_layer_size", "[", "l", "+", "1", "]", "]", ",", "mean", "=", "0", ",", "stddev", "=", "0.01", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "for", "l", "in", "range", "(", "self", ".", "pooling_mlp_layer", ")", "]", "\n", "", "if", "self", ".", "prediction", "[", "0", ":", "3", "]", "==", "'MLP'", ":", "\n", "            ", "self", ".", "prediction_mlp_layer", "=", "int", "(", "self", ".", "prediction", "[", "3", ":", "]", ")", "\n", "self", ".", "prediction_layer_size", "=", "[", "3", "*", "self", ".", "emb_dim_predict", "]", "+", "[", "self", ".", "emb_dim_predict", "]", "*", "(", "self", ".", "prediction_mlp_layer", "-", "1", ")", "+", "[", "1", "]", "\n", "self", ".", "prediction_W", "=", "[", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "prediction_layer_size", "[", "l", "]", ",", "self", ".", "prediction_layer_size", "[", "l", "+", "1", "]", "]", ",", "mean", "=", "0", ",", "stddev", "=", "0.01", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "for", "l", "in", "range", "(", "self", ".", "prediction_mlp_layer", ")", "]", "\n", "self", ".", "prediction_b", "=", "[", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "prediction_layer_size", "[", "l", "+", "1", "]", "]", ",", "mean", "=", "0", ",", "stddev", "=", "0.01", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "for", "l", "in", "range", "(", "self", ".", "prediction_mlp_layer", ")", "]", "\n", "\n", "## convolutional layers definition", "\n", "", "self", ".", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "pooling", "in", "[", "'Sum'", ",", "'Product'", "]", ":", "self", ".", "all_embeddings", "=", "self", ".", "embeddings", "\n", "else", ":", "self", ".", "all_embeddings", "=", "[", "self", ".", "embeddings", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer", ")", ":", "\n", "## low-pass graph convolution", "\n", "            ", "if", "self", ".", "graph_conv", "==", "'1D'", ":", "self", ".", "embeddings", "=", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "self", ".", "graph_emb", ",", "tf", ".", "diag", "(", "self", ".", "kernel", "[", "l", "]", ")", ")", ",", "tf", ".", "matmul", "(", "self", ".", "graph_emb", ",", "self", ".", "embeddings", ",", "transpose_a", "=", "True", ",", "transpose_b", "=", "False", ")", ")", "\n", "else", ":", "\n", "                ", "self", ".", "embeddings_U", ",", "self", ".", "embeddings_V", "=", "tf", ".", "split", "(", "self", ".", "embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "embeddings_U", "=", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "self", ".", "graph_emb_U", ",", "tf", ".", "diag", "(", "self", ".", "kernel_U", "[", "l", "]", ")", ")", ",", "tf", ".", "matmul", "(", "self", ".", "graph_emb_U", ",", "self", ".", "embeddings_U", ",", "transpose_a", "=", "True", ",", "transpose_b", "=", "False", ")", ")", "\n", "self", ".", "embeddings_V", "=", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "self", ".", "graph_emb_V", ",", "tf", ".", "diag", "(", "self", ".", "kernel_V", "[", "l", "]", ")", ")", ",", "tf", ".", "matmul", "(", "self", ".", "graph_emb_V", ",", "self", ".", "embeddings_V", ",", "transpose_a", "=", "True", ",", "transpose_b", "=", "False", ")", ")", "\n", "self", ".", "embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "embeddings_U", ",", "self", ".", "embeddings_V", "]", ",", "axis", "=", "0", ")", "\n", "", "if", "self", ".", "if_transformation", ":", "self", ".", "embeddings", "=", "tf", ".", "matmul", "(", "self", ".", "embeddings", ",", "self", ".", "transformation", "[", "l", "]", ")", "\n", "## activations and pooling", "\n", "if", "self", ".", "activation", "==", "'Sigmoid'", ":", "self", ".", "embeddings", "=", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "embeddings", ")", "\n", "if", "self", ".", "activation", "==", "'Tanh'", ":", "self", ".", "embeddings", "=", "tf", ".", "nn", ".", "tanh", "(", "self", ".", "embeddings", ")", "\n", "if", "self", ".", "activation", "==", "'ReLU'", ":", "self", ".", "embeddings", "=", "tf", ".", "nn", ".", "relu", "(", "self", ".", "embeddings", ")", "\n", "if", "self", ".", "pooling", "==", "'Sum'", ":", "self", ".", "all_embeddings", "+=", "self", ".", "embeddings", "*", "self", ".", "layer_weight", "[", "l", "+", "1", "]", "\n", "elif", "self", ".", "pooling", "==", "'Product'", ":", "self", ".", "all_embeddings", "=", "tf", ".", "multiply", "(", "self", ".", "all_embeddings", ",", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "embeddings", ")", ")", "## product makes -- to + and confuses the model, thus needs to map the value to + first", "\n", "else", ":", "self", ".", "all_embeddings", "+=", "[", "self", ".", "embeddings", "]", "##concat, max, and mlp", "\n", "\n", "## pooling to get predictive embeddings", "\n", "", "if", "self", ".", "pooling", "==", "'Concat'", ":", "self", ".", "all_embeddings", "=", "tf", ".", "concat", "(", "self", ".", "all_embeddings", ",", "1", ")", "\n", "if", "self", ".", "pooling", "==", "'Max'", ":", "self", ".", "all_embeddings", "=", "tf", ".", "reduce_max", "(", "self", ".", "all_embeddings", ",", "0", ")", "\n", "if", "self", ".", "pooling", "[", "0", ":", "3", "]", "==", "'MLP'", ":", "self", ".", "all_embeddings", "=", "tf", ".", "nn", ".", "tanh", "(", "self", ".", "MLP", "(", "tf", ".", "concat", "(", "self", ".", "all_embeddings", ",", "1", ")", ",", "self", ".", "pooling_W", ",", "self", ".", "pooling_b", ")", ")", "\n", "if", "'L2Norm'", "in", "self", ".", "generalization", ":", "self", ".", "all_embeddings", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "all_embeddings", ",", "1", ")", "\n", "self", ".", "user_all_embeddings", ",", "self", ".", "item_all_embeddings", "=", "tf", ".", "split", "(", "self", ".", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "\n", "## make prediction", "\n", "self", ".", "u_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_all_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_all_embeddings", ",", "self", ".", "neg_items", ")", "\n", "if", "'DropOut'", "in", "self", ".", "generalization", ":", "\n", "            ", "self", ".", "u_embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "u_embeddings", ",", "self", ".", "keep_prob", ")", "\n", "self", ".", "pos_i_embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "pos_i_embeddings", ",", "self", ".", "keep_prob", ")", "\n", "self", ".", "neg_i_embeddings", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "neg_i_embeddings", ",", "self", ".", "keep_prob", ")", "\n", "", "if", "self", ".", "prediction", "==", "'InnerProduct'", ":", "\n", "            ", "self", ".", "pos_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embeddings", ",", "self", ".", "pos_i_embeddings", ")", ",", "1", ")", "\n", "self", ".", "neg_scores", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embeddings", ",", "self", ".", "neg_i_embeddings", ")", ",", "1", ")", "\n", "self", ".", "all_ratings", "=", "tf", ".", "matmul", "(", "self", ".", "u_embeddings", ",", "self", ".", "item_all_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pos_scores", "=", "self", ".", "MLP", "(", "tf", ".", "concat", "(", "[", "self", ".", "u_embeddings", ",", "self", ".", "pos_i_embeddings", ",", "tf", ".", "multiply", "(", "self", ".", "u_embeddings", ",", "self", ".", "pos_i_embeddings", ")", "]", ",", "1", ")", ",", "self", ".", "prediction_W", ",", "self", ".", "prediction_b", ")", "\n", "self", ".", "neg_scores", "=", "self", ".", "MLP", "(", "tf", ".", "concat", "(", "[", "self", ".", "u_embeddings", ",", "self", ".", "neg_i_embeddings", ",", "tf", ".", "multiply", "(", "self", ".", "u_embeddings", ",", "self", ".", "neg_i_embeddings", ")", "]", ",", "1", ")", ",", "self", ".", "prediction_W", ",", "self", ".", "prediction_b", ")", "\n", "self", ".", "all_ratings", "=", "self", ".", "get_all_ratings", "(", "self", ".", "u_embeddings", ",", "self", ".", "item_all_embeddings", ",", "self", ".", "prediction_W", ",", "self", ".", "prediction_b", ")", "\n", "", "self", ".", "all_ratings", "+=", "self", ".", "items_in_train_data", "## set a very small value for the items appearing in the training set to make sure they are at the end of the sorted list", "\n", "self", ".", "top_items", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "all_ratings", ",", "k", "=", "self", ".", "top_k", ",", "sorted", "=", "True", ")", ".", "indices", "\n", "\n", "## generalization", "\n", "if", "'Regularization'", "in", "self", ".", "generalization", ":", "\n", "            ", "self", ".", "u_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings", ",", "self", ".", "users", ")", "\n", "self", ".", "pos_i_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "pos_items", ")", "\n", "self", ".", "neg_i_embeddings_reg", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "neg_items", ")", "\n", "self", ".", "reg_list", "=", "[", "self", ".", "u_embeddings_reg", ",", "self", ".", "pos_i_embeddings_reg", ",", "self", ".", "neg_i_embeddings_reg", "]", "\n", "# if self.graph_conv == '1D': self.reg_list += self.kernel", "\n", "# else: self.reg_list += self.kernel_U + self.kernel_V", "\n", "# if self.if_transformation: self.reg_list += self.transformation", "\n", "# if self.pooling[0: 3] == 'MLP': self.reg_list += self.pooling_W", "\n", "# if self.prediction[0: 3] == 'MLP': self.reg_list += self.prediction_W", "\n", "\n", "## loss function", "\n", "", "if", "self", ".", "loss_function", "==", "'BPR'", ":", "self", ".", "loss", "=", "self", ".", "bpr_loss", "(", "self", ".", "pos_scores", ",", "self", ".", "neg_scores", ")", "\n", "if", "self", ".", "loss_function", "==", "'CrossEntropy'", ":", "self", ".", "loss", "=", "self", ".", "cross_entropy_loss", "(", "self", ".", "pos_scores", ",", "self", ".", "neg_scores", ")", "\n", "if", "self", ".", "loss_function", "==", "'MSE'", ":", "self", ".", "loss", "=", "self", ".", "mse_loss", "(", "self", ".", "pos_scores", ",", "self", ".", "neg_scores", ")", "\n", "if", "'Regularization'", "in", "self", ".", "generalization", ":", "self", ".", "loss", "+=", "self", ".", "lamda", "*", "self", ".", "regularization", "(", "self", ".", "reg_list", ")", "\n", "\n", "## optimizer", "\n", "if", "self", ".", "optimization", "==", "'SGD'", ":", "self", ".", "opt", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "if", "self", ".", "optimization", "==", "'RMSProp'", ":", "self", ".", "opt", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "if", "self", ".", "optimization", "==", "'Adam'", ":", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "if", "self", ".", "optimization", "==", "'Adagrad'", ":", "self", ".", "opt", "=", "tf", ".", "train", ".", "AdagradOptimizer", "(", "learning_rate", "=", "self", ".", "lr", ")", "\n", "\n", "## update parameters", "\n", "self", ".", "var_list", "=", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", "## learnable parameter list", "\n", "if", "self", ".", "graph_conv", "==", "'1D'", ":", "self", ".", "var_list", "+=", "self", ".", "kernel", "\n", "else", ":", "self", ".", "var_list", "+=", "self", ".", "kernel_U", "+", "self", ".", "kernel_V", "\n", "if", "self", ".", "if_transformation", ":", "self", ".", "var_list", "+=", "self", ".", "transformation", "\n", "if", "self", ".", "pooling", "[", "0", ":", "3", "]", "==", "'MLP'", ":", "self", ".", "var_list", "+=", "self", ".", "pooling_W", "+", "self", ".", "pooling_b", "\n", "if", "self", ".", "prediction", "[", "0", ":", "3", "]", "==", "'MLP'", ":", "self", ".", "var_list", "+=", "self", ".", "prediction_W", "+", "self", ".", "prediction_b", "\n", "self", ".", "updates", "=", "self", ".", "opt", ".", "minimize", "(", "self", ".", "loss", ",", "var_list", "=", "self", ".", "var_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.bpr_loss": [[146, 150], ["tensorflow.log", "tensorflow.negative", "tensorflow.nn.sigmoid", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "bpr_loss", "(", "self", ",", "pos_scores", ",", "neg_scores", ")", ":", "\n", "        ", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_sum", "(", "maxi", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.cross_entropy_loss": [[151, 155], ["tensorflow.negative", "tensorflow.log", "tensorflow.log", "tensorflow.reduce_sum", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "cross_entropy_loss", "(", "self", ",", "pos_scores", ",", "neg_scores", ")", ":", "\n", "        ", "maxi", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "sigmoid", "(", "pos_scores", ")", ")", "+", "tf", ".", "log", "(", "1", "-", "tf", ".", "nn", ".", "sigmoid", "(", "neg_scores", ")", ")", "\n", "loss", "=", "tf", ".", "negative", "(", "tf", ".", "reduce_sum", "(", "maxi", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.mse_loss": [[156, 159], ["tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "mse_loss", "(", "self", ",", "pos_scores", ",", "neg_scores", ")", ":", "\n", "        ", "loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "1", "-", "pos_scores", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "neg_scores", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.MLP": [[160, 166], ["range", "tensorflow.nn.tanh", "tensorflow.matmul", "len", "tensorflow.nn.dropout", "tensorflow.matmul"], "methods", ["None"], ["", "def", "MLP", "(", "self", ",", "x", ",", "W", ",", "b", ")", ":", "\n", "        ", "for", "l", "in", "range", "(", "len", "(", "W", ")", "-", "1", ")", ":", "\n", "            ", "x", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "matmul", "(", "x", ",", "W", "[", "l", "]", ")", "+", "b", "[", "l", "]", ")", "\n", "if", "'DropOut'", "in", "self", ".", "generalization", ":", "\n", "                ", "x", "=", "tf", ".", "nn", ".", "dropout", "(", "x", ",", "self", ".", "keep_prob", ")", "\n", "", "", "return", "tf", ".", "matmul", "(", "x", ",", "W", "[", "-", "1", "]", ")", "+", "b", "[", "-", "1", "]", "## do not perform activation on the output", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.get_all_ratings": [[167, 175], ["tensorflow.reshape", "tensorflow.tile", "model_LGCN.model_LGCN.MLP", "tensorflow.reshape", "tensorflow.shape", "tensorflow.shape", "tensorflow.tile", "tensorflow.concat", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.MLP"], ["", "def", "get_all_ratings", "(", "self", ",", "user_emb", ",", "item_emb", ",", "W", ",", "b", ")", ":", "\n", "        ", "user_num", "=", "tf", ".", "shape", "(", "user_emb", ")", "[", "0", "]", "\n", "item_num", "=", "tf", ".", "shape", "(", "item_emb", ")", "[", "0", "]", "\n", "user_emb_extend", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "user_emb", ",", "[", "1", ",", "item_num", "]", ")", ",", "[", "-", "1", ",", "self", ".", "emb_dim_predict", "]", ")", "\n", "item_emb_extend", "=", "tf", ".", "tile", "(", "item_emb", ",", "[", "user_num", ",", "1", "]", ")", "\n", "score", "=", "self", ".", "MLP", "(", "tf", ".", "concat", "(", "[", "user_emb_extend", ",", "item_emb_extend", ",", "tf", ".", "multiply", "(", "user_emb_extend", ",", "item_emb_extend", ")", "]", ",", "1", ")", ",", "W", ",", "b", ")", "\n", "score", "=", "tf", ".", "reshape", "(", "score", ",", "[", "user_num", ",", "-", "1", "]", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.model_LGCN.model_LGCN.regularization": [[176, 180], ["tensorflow.nn.l2_loss"], "methods", ["None"], ["", "def", "regularization", "(", "self", ",", "reg_list", ")", ":", "\n", "        ", "reg", "=", "0", "\n", "for", "para", "in", "reg_list", ":", "reg", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "para", ")", "\n", "return", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.result_collection.data_process.process_metric": [[21, 38], ["operator.eq", "df.apply", "column.sort_values", "range", "operator.eq", "df.apply", "x.max"], "function", ["None"], ["def", "process_metric", "(", "df", ",", "method", ",", "para", ")", ":", "# input\uff1adf\u662f\u6307\u8981\u88ab\u5904\u7406\u7684dataframe\uff1bmethod\u6709\u4e24\u79cd\u9009\u9879\uff1amax\u548ctop\uff1bpara\u662fmethod=top\u65f6\u8981\u7528\u5230\u7684\u53c2\u6570", "\n", "    ", "output_list", "=", "[", "]", "\n", "if", "operator", ".", "eq", "(", "method", ",", "'top'", ")", "==", "1", ":", "# \u53d6\u8fd9\u4e2ametric\u7684\u6bcf\u4e00\u5217\u7684top_para \u7684\u5e73\u5747\u503c", "\n", "        ", "if", "para", ">", "df", ".", "shape", "[", "0", "]", ":", "# \u5224\u65adpara\u662f\u4e0d\u662f\u6bd4metric\u7684\u884c\u6570\u591a", "\n", "            ", "para", "=", "df", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "top_average", "(", "column", ")", ":", "# \u8fd9\u4e2a\u51fd\u6570\u5b9a\u4e49\u4e86\u5982\u4f55\u6c42\u6bcf\u4e00\u5217top_para\u7684\u5e73\u5747\u503c", "\n", "            ", "num_sum", "=", "0", "\n", "new_column", "=", "column", ".", "sort_values", "(", "ascending", "=", "False", ")", "# \u5c06\u8fd9\u4e00\u5217\u964d\u5e8f\u6392\u5e8f", "\n", "for", "i", "in", "range", "(", "para", ")", ":", "# \u5c06\u524dpara\u4e2a\u6570\u76f8\u52a0", "\n", "                ", "num_sum", "=", "num_sum", "+", "new_column", ".", "iloc", "[", "i", "]", "\n", "", "return", "num_sum", "/", "para", "# \u6c42\u5e73\u5747", "\n", "", "output_list", "=", "df", ".", "apply", "(", "top_average", ")", "# \u5bf9metric\u7684\u6bcf\u4e00\u5217\u6c42top_para\u7684\u5e73\u5747\u503c", "\n", "", "else", ":", "\n", "        ", "if", "operator", ".", "eq", "(", "method", ",", "'max'", ")", "==", "1", ":", "\n", "            ", "output_list", "=", "df", ".", "apply", "(", "lambda", "x", ":", "x", ".", "max", "(", ")", ")", "\n", "", "", "return", "output_list", "# output\uff1a\u8f93\u51fa\u4e00\u4e2a\u5904\u7406\u540e\u7684list", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.result_collection.data_collection.read_data_from_sheet": [[19, 26], ["pandas.DataFrame", "pandas.read_excel"], "function", ["None"], ["def", "read_data_from_sheet", "(", "path", ",", "sheet", ",", "colu", ",", "ind", ")", ":", "\n", "    ", "df", "=", "pd", ".", "DataFrame", "(", "pd", ".", "read_excel", "(", "path", ",", "sheetname", "=", "sheet", ",", "header", "=", "0", ",", "index_col", "=", "0", ")", ")", "\n", "if", "colu", ">=", "0", ":", "\n", "        ", "data", "=", "df", ".", "loc", "[", "ind", ",", "colu", "]", "\n", "", "else", ":", "\n", "        ", "data", "=", "df", ".", "loc", "[", "ind", ",", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.Movielens.movielens.write_data": [[4, 9], ["open", "json.dumps", "open.write", "open.close"], "function", ["None"], ["def", "write_data", "(", "path", ",", "data", ")", ":", "\n", "    ", "f", "=", "open", "(", "path", ",", "'w'", ")", "\n", "jsObj", "=", "json", ".", "dumps", "(", "data", ")", "\n", "f", ".", "write", "(", "jsObj", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.Movielens.movielens.dataset_filtering": [[10, 88], ["print", "print", "print", "sort_user.sort", "sort_item.sort", "print", "print", "print", "print", "len", "len", "len", "len", "len", "sort_user.append", "sort_item.append", "set", "set", "sort_user.sort", "sort_item.sort", "print", "len", "len", "len", "sort_user.append", "sort_item.append", "len", "len", "set.add", "set.add", "interaction_filtered.append", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "dataset_filtering", "(", "interaction", ",", "core", ")", ":", "\n", "# filtering the dataset with core", "\n", "# movielens is filtered by only remaining only users with at least 20 interactions", "\n", "# we further filter the dataset by remaining users and items with at least 20 interactions", "\n", "    ", "user_id_dic", "=", "{", "}", "# record the number of interaction for each user and item", "\n", "item_id_dic", "=", "{", "}", "\n", "for", "(", "user_id", ",", "item_id", ")", "in", "interaction", ":", "\n", "        ", "try", ":", "\n", "            ", "user_id_dic", "[", "user_id", "]", "+=", "1", "\n", "", "except", ":", "\n", "            ", "user_id_dic", "[", "user_id", "]", "=", "1", "\n", "", "try", ":", "\n", "            ", "item_id_dic", "[", "item_id", "]", "+=", "1", "\n", "", "except", ":", "\n", "            ", "item_id_dic", "[", "item_id", "]", "=", "1", "\n", "", "", "print", "(", "'#Original dataset'", ")", "\n", "print", "(", "'  User:'", ",", "len", "(", "user_id_dic", ")", ",", "'Item:'", ",", "len", "(", "item_id_dic", ")", ")", "\n", "print", "(", "'  User:'", ",", "len", "(", "user_id_dic", ")", ",", "'Item:'", ",", "len", "(", "item_id_dic", ")", ",", "'Interaction:'", ",", "len", "(", "interaction", ")", ",", "'Sparsity:'", ",", "\n", "100", "-", "len", "(", "interaction", ")", "*", "100.0", "/", "len", "(", "user_id_dic", ")", "/", "len", "(", "item_id_dic", ")", ",", "'%'", ")", "\n", "sort_user", "=", "[", "]", "\n", "sort_item", "=", "[", "]", "\n", "for", "user_id", "in", "user_id_dic", ":", "\n", "        ", "sort_user", ".", "append", "(", "(", "user_id", ",", "user_id_dic", "[", "user_id", "]", ")", ")", "\n", "", "for", "item_id", "in", "item_id_dic", ":", "\n", "        ", "sort_item", ".", "append", "(", "(", "item_id", ",", "item_id_dic", "[", "item_id", "]", ")", ")", "\n", "", "sort_user", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "sort_item", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "print", "(", "'Fitering(core = '", ",", "core", ",", "'...'", ",", "end", "=", "''", ")", "\n", "while", "sort_user", "[", "0", "]", "[", "1", "]", "<", "core", "or", "sort_item", "[", "0", "]", "[", "1", "]", "<", "core", ":", "\n", "# find out all users and items with less than core recorders", "\n", "        ", "user_LessThanCore", "=", "set", "(", ")", "\n", "item_LessThanCore", "=", "set", "(", ")", "\n", "for", "pair", "in", "sort_user", ":", "\n", "            ", "if", "pair", "[", "1", "]", "<", "core", ":", "\n", "                ", "user_LessThanCore", ".", "add", "(", "pair", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "for", "pair", "in", "sort_item", ":", "\n", "            ", "if", "pair", "[", "1", "]", "<", "core", ":", "\n", "                ", "item_LessThanCore", ".", "add", "(", "pair", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "# reconstruct the interaction record, remove the cool one", "\n", "", "", "interaction_filtered", "=", "[", "]", "\n", "for", "(", "user_id", ",", "item_id", ")", "in", "interaction", ":", "\n", "            ", "if", "not", "(", "user_id", "in", "user_LessThanCore", "or", "item_id", "in", "item_LessThanCore", ")", ":", "\n", "                ", "interaction_filtered", ".", "append", "(", "(", "user_id", ",", "item_id", ")", ")", "\n", "# update the record", "\n", "", "", "interaction", "=", "interaction_filtered", "\n", "\n", "# count the number of each user and item in new data, check if all cool users and items are removed", "\n", "# reset all memory variables", "\n", "user_id_dic", "=", "{", "}", "# record the number of interaction for each user and item", "\n", "item_id_dic", "=", "{", "}", "\n", "for", "(", "user_id", ",", "item_id", ")", "in", "interaction", ":", "\n", "            ", "try", ":", "\n", "                ", "user_id_dic", "[", "user_id", "]", "+=", "1", "\n", "", "except", ":", "\n", "                ", "user_id_dic", "[", "user_id", "]", "=", "1", "\n", "", "try", ":", "\n", "                ", "item_id_dic", "[", "item_id", "]", "+=", "1", "\n", "", "except", ":", "\n", "                ", "item_id_dic", "[", "item_id", "]", "=", "1", "\n", "\n", "", "", "sort_user", "=", "[", "]", "\n", "sort_item", "=", "[", "]", "\n", "for", "user_id", "in", "user_id_dic", ":", "\n", "            ", "sort_user", ".", "append", "(", "(", "user_id", ",", "user_id_dic", "[", "user_id", "]", ")", ")", "\n", "", "for", "item_id", "in", "item_id_dic", ":", "\n", "            ", "sort_item", ".", "append", "(", "(", "item_id", ",", "item_id_dic", "[", "item_id", "]", ")", ")", "\n", "", "sort_user", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "sort_item", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "print", "(", "len", "(", "interaction", ")", ",", "end", "=", "' '", ")", "\n", "", "print", "(", ")", "\n", "print", "(", "'#Filtered dataset'", ")", "\n", "print", "(", "'  User:'", ",", "len", "(", "user_id_dic", ")", ",", "'Item:'", ",", "len", "(", "item_id_dic", ")", ",", "'Interaction:'", ",", "len", "(", "interaction", ")", ",", "'Sparsity:'", ",", "100", "-", "len", "(", "interaction", ")", "*", "100.0", "/", "len", "(", "user_id_dic", ")", "/", "len", "(", "item_id_dic", ")", ",", "'%'", ")", "\n", "return", "interaction", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.Movielens.movielens.index_encoding": [[89, 114], ["set", "set", "list", "list", "list.sort", "list.sort", "range", "range", "set.add", "set.add", "len", "len", "interaction_number.append"], "function", ["None"], ["", "def", "index_encoding", "(", "interaction", ")", ":", "\n", "# mapping in into number", "\n", "# after filtering the dataset, we need to re-encode the index of users and items", "\n", "    ", "user_id_set", "=", "set", "(", ")", "\n", "item_id_set", "=", "set", "(", ")", "\n", "\n", "for", "(", "user_id", ",", "item_id", ")", "in", "interaction", ":", "\n", "        ", "user_id_set", ".", "add", "(", "user_id", ")", "\n", "item_id_set", ".", "add", "(", "item_id", ")", "\n", "", "user_num2id", "=", "list", "(", "user_id_set", ")", "\n", "item_num2id", "=", "list", "(", "item_id_set", ")", "\n", "user_num2id", ".", "sort", "(", ")", "\n", "item_num2id", ".", "sort", "(", ")", "\n", "# user_id2num maps id to number, and user_num2id dictionary is not needed, user_ID", "\n", "user_id2num", "=", "{", "}", "\n", "for", "num", "in", "range", "(", "0", ",", "len", "(", "user_id_set", ")", ")", ":", "\n", "        ", "user_id2num", "[", "user_num2id", "[", "num", "]", "]", "=", "num", "\n", "", "item_id2num", "=", "{", "}", "\n", "for", "num", "in", "range", "(", "0", ",", "len", "(", "item_id_set", ")", ")", ":", "\n", "        ", "item_id2num", "[", "item_num2id", "[", "num", "]", "]", "=", "num", "\n", "", "interaction_number", "=", "[", "]", "\n", "for", "(", "user_id", ",", "item_id", ")", "in", "interaction", ":", "\n", "        ", "interaction_number", ".", "append", "(", "(", "user_id2num", "[", "user_id", "]", ",", "item_id2num", "[", "item_id", "]", ")", ")", "\n", "", "interaction", "=", "interaction_number", "\n", "return", "interaction", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.Movielens.movielens.dataset_split": [[115, 148], ["range", "range", "user_interaction[].append", "len", "validation_data.append", "test_data.append", "len", "range", "len", "user_interaction.append", "len", "item_interaction.append", "round", "int", "validation_data[].append", "interactions.pop", "int", "test_data[].append", "interactions.pop", "random.uniform", "int", "random.uniform", "int", "len", "len", "random.uniform", "len", "random.uniform", "len", "len"], "function", ["None"], ["", "def", "dataset_split", "(", "Interaction", ")", ":", "\n", "    ", "user_interaction", "=", "[", "]", "\n", "item_interaction", "=", "[", "]", "\n", "for", "interaction", "in", "Interaction", ":", "\n", "        ", "while", "len", "(", "user_interaction", ")", "<=", "interaction", "[", "0", "]", ":", "\n", "            ", "user_interaction", ".", "append", "(", "[", "]", ")", "\n", "", "while", "len", "(", "item_interaction", ")", "<=", "interaction", "[", "1", "]", ":", "\n", "            ", "item_interaction", ".", "append", "(", "0", ")", "\n", "", "user_interaction", "[", "interaction", "[", "0", "]", "]", ".", "append", "(", "interaction", "[", "1", "]", ")", "\n", "item_interaction", "[", "interaction", "[", "1", "]", "]", "+=", "1", "\n", "", "validation_data", "=", "[", "]", "\n", "test_data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "user_interaction", ")", ")", ":", "\n", "        ", "validation_data", ".", "append", "(", "[", "]", ")", "\n", "test_data", ".", "append", "(", "[", "]", ")", "\n", "#print(item_interaction)", "\n", "", "for", "i", "in", "range", "(", "len", "(", "user_interaction", ")", ")", ":", "\n", "        ", "interactions", "=", "user_interaction", "[", "i", "]", "\n", "for", "ii", "in", "range", "(", "round", "(", "0.1", "*", "len", "(", "interactions", ")", ")", ")", ":", "\n", "            ", "item", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "len", "(", "interactions", ")", ")", ")", "\n", "while", "item_interaction", "[", "interactions", "[", "item", "]", "]", "<=", "cold_thre", ":", "\n", "                ", "item", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "len", "(", "interactions", ")", ")", ")", "\n", "", "item_interaction", "[", "interactions", "[", "item", "]", "]", "-=", "1", "\n", "validation_data", "[", "i", "]", ".", "append", "(", "interactions", "[", "item", "]", ")", "\n", "interactions", ".", "pop", "(", "item", ")", "\n", "item", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "len", "(", "interactions", ")", ")", ")", "\n", "while", "item_interaction", "[", "interactions", "[", "item", "]", "]", "<=", "cold_thre", ":", "\n", "                ", "item", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "len", "(", "interactions", ")", ")", ")", "\n", "", "item_interaction", "[", "interactions", "[", "item", "]", "]", "-=", "1", "\n", "test_data", "[", "i", "]", ".", "append", "(", "interactions", "[", "item", "]", ")", "\n", "interactions", ".", "pop", "(", "item", ")", "\n", "#print(item_interaction)", "\n", "", "", "return", "user_interaction", ",", "validation_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.Amazon.amazon.write_data": [[4, 9], ["open", "json.dumps", "open.write", "open.close"], "function", ["None"], ["def", "write_data", "(", "path", ",", "data", ")", ":", "\n", "    ", "f", "=", "open", "(", "path", ",", "'w'", ")", "\n", "jsObj", "=", "json", ".", "dumps", "(", "data", ")", "\n", "f", ".", "write", "(", "jsObj", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.Amazon.amazon.dataset_filtering": [[10, 86], ["print", "print", "sort_user.sort", "sort_item.sort", "print", "print", "print", "print", "len", "len", "len", "sort_user.append", "sort_item.append", "set", "set", "sort_user.sort", "sort_item.sort", "print", "len", "len", "len", "sort_user.append", "sort_item.append", "len", "len", "set.add", "set.add", "interaction_filtered.append", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "dataset_filtering", "(", "interaction", ",", "core", ")", ":", "\n", "# filtering the dataset with core", "\n", "# movielens is filtered by only remaining only users with at least 20 interactions", "\n", "# we further filter the dataset by remaining users and items with at least 20 interactions", "\n", "    ", "user_id_dic", "=", "{", "}", "# record the number of interaction for each user and item", "\n", "item_id_dic", "=", "{", "}", "\n", "for", "(", "user_id", ",", "item_id", ")", "in", "interaction", ":", "\n", "        ", "try", ":", "\n", "            ", "user_id_dic", "[", "user_id", "]", "+=", "1", "\n", "", "except", ":", "\n", "            ", "user_id_dic", "[", "user_id", "]", "=", "1", "\n", "", "try", ":", "\n", "            ", "item_id_dic", "[", "item_id", "]", "+=", "1", "\n", "", "except", ":", "\n", "            ", "item_id_dic", "[", "item_id", "]", "=", "1", "\n", "", "", "print", "(", "'#Original dataset'", ")", "\n", "print", "(", "'  User:'", ",", "len", "(", "user_id_dic", ")", ",", "'Item:'", ",", "len", "(", "item_id_dic", ")", ",", "'Interaction:'", ",", "len", "(", "interaction", ")", ",", "'Sparsity:'", ",", "100", "-", "len", "(", "interaction", ")", "*", "100.0", "/", "len", "(", "user_id_dic", ")", "/", "len", "(", "item_id_dic", ")", ",", "'%'", ")", "\n", "sort_user", "=", "[", "]", "\n", "sort_item", "=", "[", "]", "\n", "for", "user_id", "in", "user_id_dic", ":", "\n", "        ", "sort_user", ".", "append", "(", "(", "user_id", ",", "user_id_dic", "[", "user_id", "]", ")", ")", "\n", "", "for", "item_id", "in", "item_id_dic", ":", "\n", "        ", "sort_item", ".", "append", "(", "(", "item_id", ",", "item_id_dic", "[", "item_id", "]", ")", ")", "\n", "", "sort_user", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "sort_item", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "print", "(", "'Fitering(core = '", ",", "core", ",", "'...'", ",", "end", "=", "''", ")", "\n", "while", "sort_user", "[", "0", "]", "[", "1", "]", "<", "core", "or", "sort_item", "[", "0", "]", "[", "1", "]", "<", "core", ":", "\n", "# find out all users and items with less than core recorders", "\n", "        ", "user_LessThanCore", "=", "set", "(", ")", "\n", "item_LessThanCore", "=", "set", "(", ")", "\n", "for", "pair", "in", "sort_user", ":", "\n", "            ", "if", "pair", "[", "1", "]", "<", "core", ":", "\n", "                ", "user_LessThanCore", ".", "add", "(", "pair", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "for", "pair", "in", "sort_item", ":", "\n", "            ", "if", "pair", "[", "1", "]", "<", "core", ":", "\n", "                ", "item_LessThanCore", ".", "add", "(", "pair", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "# reconstruct the interaction record, remove the cool one", "\n", "", "", "interaction_filtered", "=", "[", "]", "\n", "for", "(", "user_id", ",", "item_id", ")", "in", "interaction", ":", "\n", "            ", "if", "not", "(", "user_id", "in", "user_LessThanCore", "or", "item_id", "in", "item_LessThanCore", ")", ":", "\n", "                ", "interaction_filtered", ".", "append", "(", "(", "user_id", ",", "item_id", ")", ")", "\n", "# update the record", "\n", "", "", "interaction", "=", "interaction_filtered", "\n", "\n", "# count the number of each user and item in new data, check if all cool users and items are removed", "\n", "# reset all memory variables", "\n", "user_id_dic", "=", "{", "}", "# record the number of interaction for each user and item", "\n", "item_id_dic", "=", "{", "}", "\n", "for", "(", "user_id", ",", "item_id", ")", "in", "interaction", ":", "\n", "            ", "try", ":", "\n", "                ", "user_id_dic", "[", "user_id", "]", "+=", "1", "\n", "", "except", ":", "\n", "                ", "user_id_dic", "[", "user_id", "]", "=", "1", "\n", "", "try", ":", "\n", "                ", "item_id_dic", "[", "item_id", "]", "+=", "1", "\n", "", "except", ":", "\n", "                ", "item_id_dic", "[", "item_id", "]", "=", "1", "\n", "\n", "", "", "sort_user", "=", "[", "]", "\n", "sort_item", "=", "[", "]", "\n", "for", "user_id", "in", "user_id_dic", ":", "\n", "            ", "sort_user", ".", "append", "(", "(", "user_id", ",", "user_id_dic", "[", "user_id", "]", ")", ")", "\n", "", "for", "item_id", "in", "item_id_dic", ":", "\n", "            ", "sort_item", ".", "append", "(", "(", "item_id", ",", "item_id_dic", "[", "item_id", "]", ")", ")", "\n", "", "sort_user", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "sort_item", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "print", "(", "len", "(", "interaction", ")", ",", "end", "=", "' '", ")", "\n", "", "print", "(", ")", "\n", "print", "(", "'#Filtered dataset'", ")", "\n", "print", "(", "'  User:'", ",", "len", "(", "user_id_dic", ")", ",", "'Item:'", ",", "len", "(", "item_id_dic", ")", ",", "'Interaction:'", ",", "len", "(", "interaction", ")", ",", "'Sparsity:'", ",", "100", "-", "len", "(", "interaction", ")", "*", "100.0", "/", "len", "(", "user_id_dic", ")", "/", "len", "(", "item_id_dic", ")", ",", "'%'", ")", "\n", "return", "interaction", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.Amazon.amazon.index_encoding": [[87, 112], ["set", "set", "list", "list", "list.sort", "list.sort", "range", "range", "set.add", "set.add", "len", "len", "interaction_number.append"], "function", ["None"], ["", "def", "index_encoding", "(", "interaction", ")", ":", "\n", "# mapping in into number", "\n", "# after filtering the dataset, we need to re-encode the index of users and items", "\n", "    ", "user_id_set", "=", "set", "(", ")", "\n", "item_id_set", "=", "set", "(", ")", "\n", "\n", "for", "(", "user_id", ",", "item_id", ")", "in", "interaction", ":", "\n", "        ", "user_id_set", ".", "add", "(", "user_id", ")", "\n", "item_id_set", ".", "add", "(", "item_id", ")", "\n", "", "user_num2id", "=", "list", "(", "user_id_set", ")", "\n", "item_num2id", "=", "list", "(", "item_id_set", ")", "\n", "user_num2id", ".", "sort", "(", ")", "\n", "item_num2id", ".", "sort", "(", ")", "\n", "# user_id2num maps id to number, and user_num2id dictionary is not needed, user_ID", "\n", "user_id2num", "=", "{", "}", "\n", "for", "num", "in", "range", "(", "0", ",", "len", "(", "user_id_set", ")", ")", ":", "\n", "        ", "user_id2num", "[", "user_num2id", "[", "num", "]", "]", "=", "num", "\n", "", "item_id2num", "=", "{", "}", "\n", "for", "num", "in", "range", "(", "0", ",", "len", "(", "item_id_set", ")", ")", ":", "\n", "        ", "item_id2num", "[", "item_num2id", "[", "num", "]", "]", "=", "num", "\n", "", "interaction_number", "=", "[", "]", "\n", "for", "(", "user_id", ",", "item_id", ")", "in", "interaction", ":", "\n", "        ", "interaction_number", ".", "append", "(", "(", "user_id2num", "[", "user_id", "]", ",", "item_id2num", "[", "item_id", "]", ")", ")", "\n", "", "interaction", "=", "interaction_number", "\n", "return", "interaction", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.Amazon.amazon.dataset_split": [[113, 148], ["range", "range", "user_interaction[].append", "len", "validation_data.append", "test_data.append", "len", "range", "len", "user_interaction.append", "len", "item_interaction.append", "round", "int", "validation_data[].append", "interactions.pop", "int", "test_data[].append", "interactions.pop", "random.uniform", "int", "random.uniform", "int", "len", "len", "random.uniform", "len", "random.uniform", "len", "len"], "function", ["None"], ["", "def", "dataset_split", "(", "Interaction", ")", ":", "\n", "    ", "user_interaction", "=", "[", "]", "\n", "item_interaction", "=", "[", "]", "\n", "for", "interaction", "in", "Interaction", ":", "\n", "        ", "while", "len", "(", "user_interaction", ")", "<=", "interaction", "[", "0", "]", ":", "\n", "            ", "user_interaction", ".", "append", "(", "[", "]", ")", "\n", "", "while", "len", "(", "item_interaction", ")", "<=", "interaction", "[", "1", "]", ":", "\n", "            ", "item_interaction", ".", "append", "(", "0", ")", "\n", "", "user_interaction", "[", "interaction", "[", "0", "]", "]", ".", "append", "(", "interaction", "[", "1", "]", ")", "\n", "item_interaction", "[", "interaction", "[", "1", "]", "]", "+=", "1", "\n", "", "validation_data", "=", "[", "]", "\n", "test_data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "user_interaction", ")", ")", ":", "\n", "        ", "validation_data", ".", "append", "(", "[", "]", ")", "\n", "test_data", ".", "append", "(", "[", "]", ")", "\n", "#print(item_interaction)", "\n", "", "for", "i", "in", "range", "(", "len", "(", "user_interaction", ")", ")", ":", "\n", "        ", "interactions", "=", "user_interaction", "[", "i", "]", "\n", "for", "ii", "in", "range", "(", "round", "(", "0.1", "*", "len", "(", "interactions", ")", ")", ")", ":", "\n", "            ", "item", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "len", "(", "interactions", ")", ")", ")", "\n", "while", "item_interaction", "[", "interactions", "[", "item", "]", "]", "<=", "cold_thre", ":", "\n", "#print('aa',cold_thre)", "\n", "                ", "item", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "len", "(", "interactions", ")", ")", ")", "\n", "", "item_interaction", "[", "interactions", "[", "item", "]", "]", "-=", "1", "\n", "validation_data", "[", "i", "]", ".", "append", "(", "interactions", "[", "item", "]", ")", "\n", "interactions", ".", "pop", "(", "item", ")", "\n", "item", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "len", "(", "interactions", ")", ")", ")", "\n", "while", "item_interaction", "[", "interactions", "[", "item", "]", "]", "<=", "cold_thre", ":", "\n", "#print('bb', cold_thre)", "\n", "                ", "item", "=", "int", "(", "random", ".", "uniform", "(", "0", ",", "len", "(", "interactions", ")", ")", ")", "\n", "", "item_interaction", "[", "interactions", "[", "item", "]", "]", "-=", "1", "\n", "test_data", "[", "i", "]", ".", "append", "(", "interactions", "[", "item", "]", ")", "\n", "interactions", ".", "pop", "(", "item", ")", "\n", "#print(item_interaction)", "\n", "", "", "return", "user_interaction", ",", "validation_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.toy_example.GFTandFFT.GFT": [[10, 26], ["numpy.size", "numpy.identity", "numpy.zeros", "range", "numpy.linalg.eigh", "numpy.dot", "numpy.ones", "numpy.dot", "numpy.dot", "numpy.diag", "numpy.diag"], "function", ["None"], ["def", "GFT", "(", "x", ")", ":", "\n", "## graph Fourior transform", "\n", "    ", "n", "=", "np", ".", "size", "(", "x", ")", "\n", "I", "=", "np", ".", "identity", "(", "n", ")", "\n", "D", "=", "2", "*", "np", ".", "ones", "(", "n", ")", "\n", "D", "[", "0", "]", "=", "1", "\n", "D", "[", "-", "1", "]", "=", "1", "\n", "A", "=", "np", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "n", "-", "1", ")", ":", "\n", "        ", "A", "[", "i", ",", "i", "+", "1", "]", "=", "1", "\n", "A", "[", "i", "+", "1", ",", "i", "]", "=", "1", "\n", "", "L", "=", "I", "-", "np", ".", "dot", "(", "np", ".", "dot", "(", "np", ".", "diag", "(", "D", "**", "-", "0.5", ")", ",", "A", ")", ",", "np", ".", "diag", "(", "D", "**", "-", "0.5", ")", ")", "## Laplacian matrix", "\n", "# print(L)", "\n", "lamda", ",", "P", "=", "np", ".", "linalg", ".", "eigh", "(", "L", ")", "\n", "x", "=", "np", ".", "dot", "(", "x", ",", "P", ")", "\n", "return", "lamda", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.train_model.train_model": [[11, 61], ["read_data", "model_MF", "tf.ConfigProto", "tf.Session", "tf.Session.run", "list", "list.append", "range", "print_save.save_embeddings", "read_data", "tf.global_variables_initializer", "range", "len", "range", "test_model", "print_save.print_value", "len", "range", "np.array", "tf.Session.run", "tf.Session.run", "user_embeddings.tolist", "item_embeddings.tolist", "len", "int", "random.uniform", "np.array.append"], "function", ["home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_data", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.save_embeddings", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.read_data.read_data", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.None.test_model.test_model", "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.print_value"], ["from", "model_LCFN", "import", "model_LCFN", "\n", "from", "model_LGCN", "import", "LGCN", "\n", "from", "model_SGNN", "import", "model_SGNN", "\n", "from", "test_model", "import", "test_model", "\n", "from", "print_save", "import", "print_value", ",", "save_value", "\n", "import", "tensorflow", "as", "tf", "\n", "import", "numpy", "as", "np", "\n", "import", "random", "as", "rd", "\n", "import", "pandas", "as", "pd", "\n", "import", "time", "\n", "\n", "def", "train_model", "(", "para", ",", "data", ",", "path_excel", ")", ":", "\n", "## data and hyperparameters", "\n", "    ", "[", "train_data", ",", "train_data_interaction", ",", "user_num", ",", "item_num", ",", "test_data", ",", "pre_train_feature", ",", "hypergraph_embeddings", ",", "graph_embeddings", ",", "propagation_embeddings", ",", "sparse_propagation_matrix", ",", "_", "]", "=", "data", "\n", "[", "_", ",", "_", ",", "MODEL", ",", "LR", ",", "LAMDA", ",", "LAYER", ",", "EMB_DIM", ",", "BATCH_SIZE", ",", "TEST_USER_BATCH", ",", "N_EPOCH", ",", "IF_PRETRAIN", ",", "_", ",", "TOP_K", "]", "=", "para", "[", "0", ":", "13", "]", "\n", "if", "MODEL", "==", "'LGCN'", ":", "[", "_", ",", "_", ",", "_", ",", "KEEP_PORB", ",", "SAMPLE_RATE", ",", "GRAPH_CONV", ",", "PREDICTION", ",", "LOSS_FUNCTION", ",", "GENERALIZATION", ",", "OPTIMIZATION", ",", "IF_TRASFORMATION", ",", "ACTIVATION", ",", "POOLING", "]", "=", "para", "[", "13", ":", "]", "\n", "if", "MODEL", "==", "'SGNN'", ":", "[", "_", ",", "PROP_EMB", ",", "_", "]", "=", "para", "[", "13", ":", "]", "\n", "para_test", "=", "[", "train_data", ",", "test_data", ",", "user_num", ",", "item_num", ",", "TOP_K", ",", "TEST_USER_BATCH", "]", "\n", "## Define the model", "\n", "if", "MODEL", "==", "'MF'", ":", "model", "=", "model_MF", "(", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ")", "\n", "if", "MODEL", "==", "'NCF'", ":", "model", "=", "model_NCF", "(", "layer", "=", "LAYER", ",", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "if_pretrain", "=", "IF_PRETRAIN", ")", "\n", "if", "MODEL", "==", "'GCMC'", ":", "model", "=", "model_GCMC", "(", "layer", "=", "LAYER", ",", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "sparse_graph", "=", "sparse_propagation_matrix", ")", "\n", "if", "MODEL", "==", "'NGCF'", ":", "model", "=", "model_NGCF", "(", "layer", "=", "LAYER", ",", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "sparse_graph", "=", "sparse_propagation_matrix", ")", "\n", "if", "MODEL", "==", "'SCF'", ":", "model", "=", "model_SCF", "(", "layer", "=", "LAYER", ",", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "sparse_graph", "=", "sparse_propagation_matrix", ")", "\n", "if", "MODEL", "==", "'CGMC'", ":", "model", "=", "model_CGMC", "(", "layer", "=", "LAYER", ",", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "sparse_graph", "=", "sparse_propagation_matrix", ")", "\n", "if", "MODEL", "==", "'LightGCN'", ":", "model", "=", "model_LightGCN", "(", "layer", "=", "LAYER", ",", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "sparse_graph", "=", "sparse_propagation_matrix", ")", "\n", "if", "MODEL", "==", "'LCFN'", ":", "model", "=", "model_LCFN", "(", "layer", "=", "LAYER", ",", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "emb_dim", "=", "EMB_DIM", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "graph_embeddings", "=", "hypergraph_embeddings", ")", "\n", "if", "MODEL", "==", "'LGCN'", ":", "model", "=", "model_LGCN", "(", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "emb_dim", "=", "EMB_DIM", ",", "layer", "=", "LAYER", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "graph_embeddings", "=", "graph_embeddings", ",", "graph_conv", "=", "GRAPH_CONV", ",", "prediction", "=", "PREDICTION", ",", "loss_function", "=", "LOSS_FUNCTION", ",", "generalization", "=", "GENERALIZATION", ",", "optimization", "=", "OPTIMIZATION", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "if_transformation", "=", "IF_TRASFORMATION", ",", "activation", "=", "ACTIVATION", ",", "pooling", "=", "POOLING", ")", "\n", "if", "MODEL", "==", "'SGNN'", ":", "model", "=", "model_SGNN", "(", "n_users", "=", "user_num", ",", "n_items", "=", "item_num", ",", "lr", "=", "LR", ",", "lamda", "=", "LAMDA", ",", "emb_dim", "=", "EMB_DIM", ",", "layer", "=", "LAYER", ",", "pre_train_latent_factor", "=", "pre_train_feature", ",", "propagation_embeddings", "=", "propagation_embeddings", ",", "if_pretrain", "=", "IF_PRETRAIN", ",", "prop_emb", "=", "PROP_EMB", ")", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "## Split the training samples into batches", "\n", "batches", "=", "list", "(", "range", "(", "0", ",", "len", "(", "train_data_interaction", ")", ",", "BATCH_SIZE", ")", ")", "\n", "batches", ".", "append", "(", "len", "(", "train_data_interaction", ")", ")", "\n", "## Training iteratively", "\n", "F1_max", "=", "0", "\n", "F1_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "TOP_K", ")", "\n", "NDCG_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "TOP_K", ")", "\n", "t1", "=", "time", ".", "clock", "(", ")", "\n", "for", "epoch", "in", "range", "(", "N_EPOCH", ")", ":", "\n", "        ", "for", "batch_num", "in", "range", "(", "len", "(", "batches", ")", "-", "1", ")", ":", "\n", "            ", "train_batch_data", "=", "[", "]", "\n", "for", "sample", "in", "range", "(", "batches", "[", "batch_num", "]", ",", "batches", "[", "batch_num", "+", "1", "]", ")", ":", "\n", "                ", "(", "user", ",", "pos_item", ")", "=", "train_data_interaction", "[", "sample", "]", "\n", "sample_num", "=", "0", "\n", "while", "sample_num", "<", "(", "SAMPLE_RATE", "if", "MODEL", "==", "'LGCN'", "else", "1", ")", ":", "\n", "                    ", "neg_item", "=", "int", "(", "rd", ".", "uniform", "(", "0", ",", "item_num", ")", ")", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.print_params": [[5, 8], ["range", "len", "print"], "function", ["None"], ["def", "print_params", "(", "para_name", ",", "para", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "para", ")", ")", ":", "\n", "        ", "print", "(", "para_name", "[", "i", "]", "+", "':  '", ",", "para", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.print_value": [[9, 13], ["print", "print"], "function", ["None"], ["", "", "def", "print_value", "(", "value", ")", ":", "\n", "    ", "[", "inter", ",", "loss", ",", "f1_max", ",", "F1", ",", "NDCG", "]", "=", "value", "\n", "print", "(", "'iter: %d loss %.2f f1 %.4f'", "%", "(", "inter", ",", "loss", ",", "f1_max", ")", ",", "end", "=", "'  '", ")", "\n", "print", "(", "F1", ",", "NDCG", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Wenhui-Yu_LCFN.pretraining.print_save.save_embeddings": [[14, 20], ["open", "json.dumps", "open.write", "open.write"], "function", ["None"], ["", "def", "save_params", "(", "para_name", ",", "para", ",", "path_excel", ")", ":", "\n", "    ", "wb", "=", "Workbook", "(", ")", "\n", "table", "=", "wb", ".", "active", "\n", "table", ".", "title", "=", "'Parameters'", "\n", "ldata", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "para_name", ")", ")", ":", "# do not save GPU_index", "\n", "        ", "parameter", "=", "[", "para_name", "[", "i", "]", "]", "\n"]]}