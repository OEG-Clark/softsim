{"home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.coco_runner.get_argparser": [[17, 27], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_argparser", "(", ")", ":", "\n", "    ", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "__doc__", ")", "\n", "argparser", ".", "add_argument", "(", "'--config'", ",", "required", "=", "True", ",", "help", "=", "'yaml config file'", ")", "\n", "argparser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "'cuda'", ",", "help", "=", "'device'", ")", "\n", "argparser", ".", "add_argument", "(", "'--json'", ",", "help", "=", "'dictionary to overwrite config'", ")", "\n", "argparser", ".", "add_argument", "(", "'-train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'train a model'", ")", "\n", "# distributed training parameters", "\n", "argparser", ".", "add_argument", "(", "'--world_size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of distributed processes'", ")", "\n", "argparser", ".", "add_argument", "(", "'--dist_url'", ",", "default", "=", "'env://'", ",", "help", "=", "'url used to set up distributed training'", ")", "\n", "return", "argparser", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.coco_runner.train_model": [[29, 65], ["model.train", "utils.misc_util.MetricLogger", "misc_util.MetricLogger.add_meter", "misc_util.MetricLogger.log_every", "utils.misc_util.SmoothedValue", "min", "utils.main_util.warmup_lr_scheduler", "list", "model", "sum", "utils.misc_util.reduce_dict", "sum", "sum.item", "optimizer.zero_grad", "sum.backward", "optimizer.step", "misc_util.MetricLogger.update", "misc_util.MetricLogger.update", "math.isfinite", "print", "print", "sys.exit", "main_util.warmup_lr_scheduler.step", "len", "image.to", "v.to", "t.items", "model.values", "misc_util.reduce_dict.values"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.coco_runner.train", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.add_meter", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.log_every", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.warmup_lr_scheduler", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.reduce_dict", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.SwishImplementation.backward", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update"], ["", "def", "train_model", "(", "model", ",", "optimizer", ",", "data_loader", ",", "device", ",", "epoch", ",", "log_freq", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "metric_logger", "=", "misc_util", ".", "MetricLogger", "(", "delimiter", "=", "'  '", ")", "\n", "metric_logger", ".", "add_meter", "(", "'lr'", ",", "misc_util", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.6f}'", ")", ")", "\n", "header", "=", "'Epoch: [{}]'", ".", "format", "(", "epoch", ")", "\n", "lr_scheduler", "=", "None", "\n", "if", "epoch", "==", "0", ":", "\n", "        ", "warmup_factor", "=", "1.0", "/", "1000.0", "\n", "warmup_iters", "=", "min", "(", "1000", ",", "len", "(", "data_loader", ")", "-", "1", ")", "\n", "lr_scheduler", "=", "main_util", ".", "warmup_lr_scheduler", "(", "optimizer", ",", "warmup_iters", ",", "warmup_factor", ")", "\n", "\n", "", "for", "images", ",", "targets", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "log_freq", ",", "header", ")", ":", "\n", "        ", "images", "=", "list", "(", "image", ".", "to", "(", "device", ")", "for", "image", "in", "images", ")", "\n", "\n", "targets", "=", "[", "{", "k", ":", "v", ".", "to", "(", "device", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "for", "t", "in", "targets", "]", "\n", "loss_dict", "=", "model", "(", "images", ",", "targets", ")", "\n", "losses", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", ")", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "misc_util", ".", "reduce_dict", "(", "loss_dict", ")", "\n", "losses_reduced", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict_reduced", ".", "values", "(", ")", ")", "\n", "loss_value", "=", "losses_reduced", ".", "item", "(", ")", "\n", "\n", "if", "not", "math", ".", "isfinite", "(", "loss_value", ")", ":", "\n", "            ", "print", "(", "'Loss is {}, stopping training'", ".", "format", "(", "loss_value", ")", ")", "\n", "print", "(", "loss_dict_reduced", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "losses", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "metric_logger", ".", "update", "(", "loss", "=", "losses_reduced", ",", "**", "loss_dict_reduced", ")", "\n", "metric_logger", ".", "update", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.coco_runner.train": [[67, 101], ["myutils.pytorch.func_util.get_optimizer", "myutils.pytorch.func_util.get_scheduler", "myutils.common.file_util.check_if_exists", "time.time", "range", "torch.distributed.barrier", "str", "print", "models.load_ckpt", "coco_runner.train_model", "func_util.get_scheduler.step", "utils.main_util.evaluate", "func_util.get_scheduler.step", "time.time", "datetime.timedelta", "train_sampler.set_epoch", "print", "models.save_ckpt", "int", "torch.distributed"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.load_ckpt", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.coco_runner.train_model", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.evaluate", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.save_ckpt"], ["", "", "def", "train", "(", "model", ",", "train_sampler", ",", "train_data_loader", ",", "val_data_loader", ",", "device", ",", "distributed", ",", "config", ",", "args", ",", "ckpt_file_path", ")", ":", "\n", "    ", "train_config", "=", "config", "[", "'train'", "]", "\n", "optim_config", "=", "train_config", "[", "'optimizer'", "]", "\n", "optimizer", "=", "func_util", ".", "get_optimizer", "(", "model", ",", "optim_config", "[", "'type'", "]", ",", "optim_config", "[", "'params'", "]", ")", "\n", "scheduler_config", "=", "train_config", "[", "'scheduler'", "]", "\n", "lr_scheduler", "=", "func_util", ".", "get_scheduler", "(", "optimizer", ",", "scheduler_config", "[", "'type'", "]", ",", "scheduler_config", "[", "'params'", "]", ")", "\n", "best_val_map", "=", "0.0", "\n", "if", "file_util", ".", "check_if_exists", "(", "ckpt_file_path", ")", ":", "\n", "        ", "best_val_map", ",", "_", ",", "_", "=", "load_ckpt", "(", "ckpt_file_path", ",", "optimizer", "=", "optimizer", ",", "lr_scheduler", "=", "lr_scheduler", ")", "\n", "\n", "", "num_epochs", "=", "train_config", "[", "'num_epochs'", "]", "\n", "log_freq", "=", "train_config", "[", "'log_freq'", "]", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "        ", "if", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "train_model", "(", "model", ",", "optimizer", ",", "train_data_loader", ",", "device", ",", "epoch", ",", "log_freq", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# evaluate after every epoch", "\n", "coco_evaluator", "=", "main_util", ".", "evaluate", "(", "model", ",", "val_data_loader", ",", "device", "=", "device", ")", "\n", "# Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ]", "\n", "val_map", "=", "coco_evaluator", ".", "coco_eval", "[", "'bbox'", "]", ".", "stats", "[", "0", "]", "\n", "if", "val_map", ">", "best_val_map", ":", "\n", "            ", "print", "(", "'Updating ckpt (Best BBox mAP: {:.4f} -> {:.4f})'", ".", "format", "(", "best_val_map", ",", "val_map", ")", ")", "\n", "best_val_map", "=", "val_map", "\n", "save_ckpt", "(", "model", ",", "optimizer", ",", "lr_scheduler", ",", "best_val_map", ",", "config", ",", "args", ",", "ckpt_file_path", ")", "\n", "", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.coco_runner.main": [[103, 134], ["utils.main_util.init_distributed_mode", "myutils.common.yaml_util.load_yaml_file", "torch.device", "print", "print", "utils.data_util.get_coco_data_loaders", "print", "models.get_model", "print", "utils.main_util.evaluate", "utils.main_util.overwrite_config", "torch.nn.parallel.DistributedDataParallel", "print", "time.time", "coco_runner.train", "str", "print", "time.time", "datetime.timedelta", "int"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.init_distributed_mode", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.data_util.get_coco_data_loaders", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.get_model", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.evaluate", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.overwrite_config", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.coco_runner.train"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "distributed", ",", "device_ids", "=", "main_util", ".", "init_distributed_mode", "(", "args", ".", "world_size", ",", "args", ".", "dist_url", ")", "\n", "config", "=", "yaml_util", ".", "load_yaml_file", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "json", "is", "not", "None", ":", "\n", "        ", "main_util", ".", "overwrite_config", "(", "config", ",", "args", ".", "json", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "print", "(", "args", ")", "\n", "\n", "print", "(", "'Loading data'", ")", "\n", "train_config", "=", "config", "[", "'train'", "]", "\n", "train_sampler", ",", "train_data_loader", ",", "val_data_loader", ",", "test_data_loader", "=", "data_util", ".", "get_coco_data_loaders", "(", "config", "[", "'dataset'", "]", ",", "train_config", "[", "'batch_size'", "]", ",", "distributed", ")", "\n", "\n", "print", "(", "'Creating model'", ")", "\n", "model_config", "=", "config", "[", "'model'", "]", "\n", "model", "=", "get_model", "(", "model_config", ",", "device", ")", "\n", "print", "(", "'Model Created'", ")", "\n", "\n", "if", "distributed", ":", "\n", "        ", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "\n", "", "if", "args", ".", "train", ":", "\n", "        ", "print", "(", "'Start training'", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "train", "(", "model", ",", "train_sampler", ",", "train_data_loader", ",", "val_data_loader", ",", "device", ",", "distributed", ",", "\n", "config", ",", "args", ",", "model_config", "[", "'ckpt'", "]", ")", "\n", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "", "main_util", ".", "evaluate", "(", "model", ",", "test_data_loader", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.eval_dir.get_argparser": [[25, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_argparser", "(", ")", ":", "\n", "    ", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Mimic Runner'", ")", "\n", "argparser", ".", "add_argument", "(", "'--dir'", ",", "required", "=", "True", ",", "help", "=", "'yaml dir path'", ")", "\n", "argparser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "'cuda'", ",", "help", "=", "'device'", ")", "\n", "argparser", ".", "add_argument", "(", "'-resume'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Do not Re-run experiments'", ")", "\n", "argparser", ".", "add_argument", "(", "'-dry_run'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Validate configs without eval'", ")", "\n", "return", "argparser", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.eval_dir.distill_model": [[33, 56], ["utils.misc_util.MetricLogger", "misc_util.MetricLogger.add_meter", "enumerate", "utils.misc_util.SmoothedValue", "min", "utils.main_util.warmup_lr_scheduler", "misc_util.MetricLogger.log_every", "list", "optimizer.zero_grad", "distillation_box", "distillation_box.backward", "optimizer.step", "misc_util.MetricLogger.update", "misc_util.MetricLogger.update", "main_util.warmup_lr_scheduler.step", "len", "image.to", "v.to", "t.items"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.add_meter", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.warmup_lr_scheduler", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.log_every", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.SwishImplementation.backward", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update"], ["", "def", "distill_model", "(", "distillation_box", ",", "data_loader", ",", "optimizer", ",", "log_freq", ",", "device", ",", "epoch", ")", ":", "\n", "    ", "metric_logger", "=", "misc_util", ".", "MetricLogger", "(", "delimiter", "=", "'  '", ")", "\n", "metric_logger", ".", "add_meter", "(", "'lr'", ",", "misc_util", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.6f}'", ")", ")", "\n", "header", "=", "'Epoch: [{}]'", ".", "format", "(", "epoch", ")", "\n", "lr_scheduler", "=", "None", "\n", "if", "epoch", "==", "0", ":", "\n", "        ", "warmup_factor", "=", "1.0", "/", "1000.0", "\n", "warmup_iters", "=", "min", "(", "1000", ",", "len", "(", "data_loader", ")", "-", "1", ")", "\n", "lr_scheduler", "=", "main_util", ".", "warmup_lr_scheduler", "(", "optimizer", ",", "warmup_iters", ",", "warmup_factor", ")", "\n", "\n", "", "for", "idx", ",", "(", "images", ",", "targets", ")", "in", "enumerate", "(", "metric_logger", ".", "log_every", "(", "data_loader", ",", "log_freq", ",", "header", ")", ")", ":", "\n", "        ", "images", "=", "list", "(", "image", ".", "to", "(", "device", ")", "for", "image", "in", "images", ")", "\n", "targets", "=", "[", "{", "k", ":", "v", ".", "to", "(", "device", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "for", "t", "in", "targets", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "distillation_box", "(", "images", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "metric_logger", ".", "update", "(", "loss", "=", "loss", ")", "\n", "metric_logger", ".", "update", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "# torch.cuda.empty_cache()", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.eval_dir.evaluate": [[59, 67], ["utils.main_util.evaluate", "main_util.evaluate.coco_eval.items", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.evaluate"], ["", "", "def", "evaluate", "(", "model", ",", "test_data_loader", ",", "device", ")", ":", "\n", "    ", "coco_evaluator", "=", "main_util", ".", "evaluate", "(", "model", ",", "test_data_loader", ",", "device", "=", "device", ")", "\n", "for", "iou_type", ",", "coco_eval", "in", "coco_evaluator", ".", "coco_eval", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "\"***************************************\"", ")", "\n", "print", "(", "coco_eval", ".", "stats", ")", "\n", "print", "(", "iou_type", ")", "\n", "\n", "", "return", "coco_evaluator", ".", "coco_eval", "[", "'bbox'", "]", ".", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.eval_dir.experiment": [[68, 109], ["models.get_model", "myutils.pytorch.module_util.freeze_module_params", "models.get_model", "models.set_bottleneck_transformer", "utils.data_util.get_coco_data_loaders", "pandas.DataFrame", "eval_dir.evaluate", "df.append.append", "print", "models.mimic.base.set_width", "eval_dir.evaluate", "df.append.append", "models.slimmable.compute_post_bn.ComputeBN", "str"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.get_model", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.get_model", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.models.__init__.set_bottleneck_transformer", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.data_util.get_coco_data_loaders", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.evaluate", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.set_width", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.evaluate", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.compute_post_bn.ComputeBN"], ["", "def", "experiment", "(", "config", ",", "device", ",", "args", ")", ":", "\n", "# Load Model", "\n", "    ", "teacher_model", "=", "get_model", "(", "config", "[", "'teacher_model'", "]", ",", "device", ")", "\n", "module_util", ".", "freeze_module_params", "(", "teacher_model", ")", "\n", "student_model_config", "=", "config", "[", "'student_model'", "]", "\n", "student_model", "=", "get_model", "(", "student_model_config", ",", "device", ",", "strict", "=", "True", ",", "require_weights", "=", "True", ")", "\n", "set_bottleneck_transformer", "(", "student_model", ",", "True", ")", "\n", "if", "args", ".", "dry_run", ":", "\n", "        ", "return", "None", "\n", "\n", "#Load Dataset", "\n", "", "train_config", "=", "config", "[", "'train'", "]", "\n", "train_sampler", ",", "train_data_loader", ",", "val_data_loader", ",", "test_data_loader", "=", "data_util", ".", "get_coco_data_loaders", "(", "config", "[", "'dataset'", "]", ",", "train_config", "[", "'batch_size'", "]", ",", "distributed", "=", "False", ")", "\n", "\n", "\n", "\n", "# Prepare dataframe", "\n", "header", "=", "[", "\"Setting\"", ",", "\"Iou50:95\"", ",", "\"Iou50\"", "]", "\n", "df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "header", ")", "\n", "res", "=", "evaluate", "(", "teacher_model", ",", "test_data_loader", ",", "device", ")", "\n", "df", "=", "df", ".", "append", "(", "{", "\"Setting\"", ":", "\"Teacher\"", ",", "\n", "\"Iou50:95\"", ":", "res", "[", "0", "]", ",", "\"Iou50\"", ":", "res", "[", "1", "]", "}", ",", "ignore_index", "=", "True", ")", "\n", "\n", "post_bn", "=", "False", "\n", "if", "'post_batch_norm'", "in", "config", "[", "'train'", "]", ":", "\n", "        ", "post_bn", "=", "config", "[", "'train'", "]", "[", "'post_batch_norm'", "]", "\n", "\n", "", "width_mult_list", "=", "[", "1.0", "]", "\n", "if", "\"slimmable\"", "in", "student_model_config", "[", "'backbone'", "]", "[", "'params'", "]", ":", "\n", "        ", "width_mult_list", "=", "student_model_config", "[", "'backbone'", "]", "[", "'params'", "]", "[", "'width_mult_list'", "]", "\n", "", "for", "width", "in", "width_mult_list", ":", "\n", "        ", "print", "(", "'\\n[Student model@width={}]'", ".", "format", "(", "width", ")", ")", "\n", "set_width", "(", "student_model", ",", "width", ")", "\n", "if", "post_bn", ":", "\n", "            ", "ComputeBN", "(", "student_model", ",", "train_data_loader", ")", "\n", "", "res", "=", "evaluate", "(", "student_model", ",", "test_data_loader", ",", "device", ")", "\n", "df", "=", "df", ".", "append", "(", "{", "\"Setting\"", ":", "str", "(", "width", ")", ",", "\n", "\"Iou50:95\"", ":", "res", "[", "0", "]", ",", "\"Iou50\"", ":", "res", "[", "1", "]", "}", ",", "ignore_index", "=", "True", ")", "\n", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.eval_dir.main": [[110, 135], ["torch.device", "os.path.join", "pathlib.Path().mkdir", "config_file_list.sort", "os.path.join", "print", "print", "print", "myutils.common.yaml_util.load_yaml_file", "eval_dir.experiment", "print", "experiment.to_csv", "torch.cuda.is_available", "pathlib.Path", "os.listdir", "os.path.isfile", "f.endswith", "os.path.isfile", "print", "os.path.join", "os.path.join().split", "os.path.join"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.eval_dir.experiment"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "args", ".", "device", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "result_dir", "=", "join", "(", "args", ".", "dir", ",", "\"results\"", ")", "\n", "Path", "(", "result_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "config_file_list", "=", "[", "f", "for", "f", "in", "listdir", "(", "args", ".", "dir", ")", "if", "isfile", "(", "join", "(", "args", ".", "dir", ",", "f", ")", ")", "]", "\n", "config_file_list", "=", "[", "f", "for", "f", "in", "config_file_list", "if", "f", ".", "endswith", "(", "'.yaml'", ")", "]", "\n", "config_file_list", ".", "sort", "(", ")", "\n", "for", "config_file", "in", "config_file_list", ":", "\n", "        ", "result_file", "=", "join", "(", "result_dir", ",", "config_file", ")", ".", "split", "(", "'.yaml'", ")", "[", "0", "]", "+", "\".csv\"", "\n", "config_file", "=", "join", "(", "args", ".", "dir", ",", "config_file", ")", "\n", "\n", "print", "(", "\"#################################################################################\"", ")", "\n", "print", "(", "\"config_file: {},\"", ".", "format", "(", "config_file", ")", ")", "\n", "print", "(", "\"result_file: {},\"", ".", "format", "(", "result_file", ")", ")", "\n", "config", "=", "yaml_util", ".", "load_yaml_file", "(", "config_file", ")", "\n", "if", "args", ".", "resume", "and", "os", ".", "path", ".", "isfile", "(", "result_file", ")", ":", "\n", "            ", "print", "(", "\"Experiment Done: Skipping\"", ")", "\n", "continue", "\n", "", "results", "=", "experiment", "(", "config", ",", "device", ",", "args", ")", "\n", "if", "args", ".", "dry_run", ":", "\n", "            ", "continue", "\n", "\n", "", "print", "(", "results", ")", "\n", "results", ".", "to_csv", "(", "result_file", ",", "float_format", "=", "'%.4f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_analyzer.get_argparser": [[27, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_argparser", "(", ")", ":", "\n", "    ", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Mimic Runner'", ")", "\n", "argparser", ".", "add_argument", "(", "'--config'", ",", "required", "=", "False", ",", "help", "=", "'yaml file path'", ")", "\n", "argparser", ".", "add_argument", "(", "'--dir'", ",", "required", "=", "False", ",", "help", "=", "'yaml file path'", ")", "\n", "argparser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "'cuda'", ",", "help", "=", "'device'", ")", "\n", "argparser", ".", "add_argument", "(", "'-debug'", ",", "action", "=", "'store_true'", ",", "help", "=", "''", ")", "\n", "return", "argparser", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_analyzer.summarize": [[36, 55], ["print", "print", "print", "print", "print", "print", "print", "print", "print", "numpy.prod"], "function", ["None"], ["", "def", "summarize", "(", "results", ")", ":", "\n", "    ", "size", "=", "results", "[", "'input_size'", "]", "\n", "jpeg_size", "=", "results", "[", "\"jpeg_size\"", "]", "\n", "\n", "macs_encoder", "=", "results", "[", "'macs_base_encoder'", "]", "+", "results", "[", "'macs_compressor'", "]", "\n", "params_encoder", "=", "results", "[", "'params_base_encoder'", "]", "+", "results", "[", "'params_compressor'", "]", "\n", "\n", "macs_full", "=", "results", "[", "\"macs_decoder\"", "]", "+", "macs_encoder", "\n", "params_full", "=", "results", "[", "\"params_decoder\"", "]", "+", "params_encoder", "\n", "\n", "print", "(", "\"{}: input shape ({} Bytes)\"", ".", "format", "(", "(", "1", ",", "3", ",", "size", ",", "size", ")", ",", "size", "*", "size", "*", "3", ")", ")", "\n", "print", "(", "\"{}: output shape\"", ".", "format", "(", "results", "[", "'output_shape'", "]", ")", ")", "\n", "print", "(", "\"{} Encoder Bytes {:.2f}%: Compression\"", ".", "format", "(", "np", ".", "prod", "(", "results", "[", "\"output_shape\"", "]", ")", ",", "results", "[", "\"compression\"", "]", "*", "100", ")", ")", "\n", "print", "(", "\"{} JPEG Bytes {:.2f}%: JPEG 95 Compression\"", ".", "format", "(", "jpeg_size", ",", "results", "[", "\"jpeg_compression\"", "]", "*", "100", ")", ")", "\n", "print", "(", "\"{:<30}  {:.1f} GMacs {:.1f}k params\"", ".", "format", "(", "\"Base Encoder:\"", ",", "results", "[", "'macs_base_encoder'", "]", "/", "1e9", ",", "results", "[", "'params_base_encoder'", "]", "/", "1e3", ")", ")", "\n", "print", "(", "\"{:<30}  {:.1f} GMacs {:.1f}k params\"", ".", "format", "(", "\"Compression Encoder:\"", ",", "results", "[", "'macs_compressor'", "]", "/", "1e9", ",", "results", "[", "'params_compressor'", "]", "/", "1e3", ")", ")", "\n", "print", "(", "'{:<30}  {:.1f} GMacs {:.1f}k params'", ".", "format", "(", "'Full Encoder: '", ",", "macs_encoder", "/", "1e9", ",", "params_encoder", "/", "1e3", ")", ")", "\n", "print", "(", "'{:<30}  {:.1f} GMacs {:.1f}k params'", ".", "format", "(", "'Decoder: '", ",", "results", "[", "\"macs_decoder\"", "]", "/", "1e9", ",", "results", "[", "\"params_decoder\"", "]", "/", "1e3", ")", ")", "\n", "print", "(", "'{:<30}  {:.1f} GMacs {:.1f}k params'", ".", "format", "(", "'Full Model: '", ",", "macs_full", "/", "1e9", ",", "params_full", "/", "1e3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_analyzer.main": [[58, 127], ["print", "myutils.common.yaml_util.load_yaml_file", "analyzer.analysis.model_analysis", "print", "mimic_analyzer.summarize", "print", "analyzer.analysis.model_analysis", "mimic_analyzer.summarize", "os.path.join", "pathlib.Path().mkdir", "os.path.join", "print", "print", "print", "myutils.common.yaml_util.load_yaml_file", "os.path.isfile", "pd.read_csv.iterrows", "pandas.DataFrame", "pd.DataFrame.reset_index", "pd.DataFrame.set_index", "pd.DataFrame.to_csv", "pathlib.Path", "os.listdir", "os.path.isfile", "f.endswith", "pandas.read_csv", "pd.read_csv.reset_index", "pd.read_csv.set_index", "analyzer.analysis.model_analysis", "analyzer.analysis.model_analysis.update", "pd.DataFrame.append", "os.path.join", "os.path.join().split", "row.to_dict", "os.path.join", "pd.read_csv.columns.str.match"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.analysis.model_analysis", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.summarize", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.analysis.model_analysis", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.summarize", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.analysis.model_analysis", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "assert", "not", "(", "args", ".", "config", "and", "args", ".", "dir", ")", "\n", "\n", "if", "args", ".", "config", ":", "\n", "        ", "print", "(", "args", ".", "config", ")", "\n", "config", "=", "yaml_util", ".", "load_yaml_file", "(", "args", ".", "config", ")", "\n", "\n", "width_list", "=", "[", "1.0", "]", "\n", "if", "'slimmable'", "in", "config", "[", "'student_model'", "]", "[", "'backbone'", "]", "[", "'params'", "]", ":", "\n", "            ", "width_list", "=", "config", "[", "'student_model'", "]", "[", "'backbone'", "]", "[", "'params'", "]", "[", "'width_mult_list'", "]", "\n", "\n", "\n", "", "results", "=", "model_analysis", "(", "config", ",", "args", ".", "device", ",", "setting", "=", "'Teacher'", ",", "debug", "=", "False", ")", "\n", "print", "(", "\"************** Teacher *************\"", ")", "\n", "summarize", "(", "results", ")", "\n", "print", "(", "\"************** Student *************\"", ")", "\n", "for", "width", "in", "width_list", ":", "\n", "            ", "results", "=", "model_analysis", "(", "config", ",", "args", ".", "device", ",", "setting", "=", "width", ",", "debug", "=", "False", ")", "\n", "summarize", "(", "results", ")", "\n", "\n", "", "", "elif", "\"dir\"", "in", "args", ":", "\n", "        ", "result_dir", "=", "join", "(", "args", ".", "dir", ",", "\"results\"", ")", "\n", "Path", "(", "result_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "config_file_list", "=", "[", "f", "for", "f", "in", "listdir", "(", "args", ".", "dir", ")", "if", "isfile", "(", "join", "(", "args", ".", "dir", ",", "f", ")", ")", "]", "\n", "config_file_list", "=", "[", "f", "for", "f", "in", "config_file_list", "if", "f", ".", "endswith", "(", "'.yaml'", ")", "]", "\n", "for", "config_file", "in", "config_file_list", ":", "\n", "            ", "result_file", "=", "join", "(", "result_dir", ",", "config_file", ")", ".", "split", "(", "'.yaml'", ")", "[", "0", "]", "+", "\".csv\"", "\n", "config_file", "=", "join", "(", "args", ".", "dir", ",", "config_file", ")", "\n", "\n", "print", "(", "\"#################################################################################\"", ")", "\n", "print", "(", "\"config_file: {},\"", ".", "format", "(", "config_file", ")", ")", "\n", "print", "(", "\"result_file: {},\"", ".", "format", "(", "result_file", ")", ")", "\n", "\n", "# Build Model", "\n", "config", "=", "yaml_util", ".", "load_yaml_file", "(", "config_file", ")", "\n", "student_model_config", "=", "config", "[", "'student_model'", "]", "\n", "# student_model = get_model(student_model_config, device, strict=False)", "\n", "# encoder = full_encoder(student_model, student_model_config)", "\n", "\n", "if", "isfile", "(", "result_file", ")", ":", "\n", "                ", "df", "=", "pd", ".", "read_csv", "(", "result_file", ")", "\n", "df", "=", "df", ".", "loc", "[", ":", ",", "~", "df", ".", "columns", ".", "str", ".", "match", "(", "\"Unnamed\"", ")", "]", "\n", "df", ".", "reset_index", "(", ")", "\n", "df", ".", "set_index", "(", "\"Setting\"", ")", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "\n", "", "new_df", "=", "[", "]", "\n", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "                ", "setting", "=", "row", "[", "'Setting'", "]", "\n", "results", "=", "model_analysis", "(", "config", ",", "args", ".", "device", ",", "setting", "=", "setting", ",", "debug", "=", "args", ".", "debug", ")", "\n", "\n", "# attempts = 0", "\n", "# while attempts < 3:", "\n", "#     try:", "\n", "#         results = model_analysis(config, device, setting=setting, debug=False)", "\n", "#         break", "\n", "#     except RuntimeError as e:", "\n", "#         attempts += 1", "\n", "#         print(\"{}\".format(e.args))", "\n", "\n", "\n", "results", ".", "update", "(", "row", ".", "to_dict", "(", ")", ")", "\n", "new_df", ".", "append", "(", "results", ")", "\n", "", "new_df", "=", "pd", ".", "DataFrame", "(", "new_df", ")", "\n", "new_df", ".", "reset_index", "(", ")", "\n", "new_df", ".", "set_index", "(", "\"Setting\"", ")", "\n", "new_df", ".", "to_csv", "(", "result_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_runner.freeze_batch_norm_outside_bottleneck": [[20, 25], ["model.modules", "model.backbone_net.bottleneck.train", "isinstance", "m.eval"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.coco_runner.train"], ["def", "freeze_batch_norm_outside_bottleneck", "(", "model", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "            ", "m", ".", "eval", "(", ")", "\n", "", "", "model", ".", "backbone_net", ".", "bottleneck", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_runner.get_argparser": [[27, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "get_argparser", "(", ")", ":", "\n", "    ", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Mimic Runner'", ")", "\n", "argparser", ".", "add_argument", "(", "'--config'", ",", "required", "=", "True", ",", "help", "=", "'yaml file path'", ")", "\n", "argparser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "'cuda'", ",", "help", "=", "'device'", ")", "\n", "argparser", ".", "add_argument", "(", "'--json'", ",", "help", "=", "'dictionary to overwrite config'", ")", "\n", "argparser", ".", "add_argument", "(", "'-distill'", ",", "action", "=", "'store_true'", ",", "help", "=", "'distill a teacher model'", ")", "\n", "argparser", ".", "add_argument", "(", "'-skip_teacher_eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'skip teacher model evaluation in testing'", ")", "\n", "argparser", ".", "add_argument", "(", "'-transform_bottleneck'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use bottleneck transformer (if defined in yaml) in testing'", ")", "\n", "argparser", ".", "add_argument", "(", "'-require_weights'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Require preexisting weigths (used for eval)'", ")", "\n", "argparser", ".", "add_argument", "(", "'-ignore_optimizer'", ",", "action", "=", "'store_true'", ",", "help", "=", "''", ")", "\n", "# distributed training parameters", "\n", "argparser", ".", "add_argument", "(", "'--world_size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of distributed processes'", ")", "\n", "argparser", ".", "add_argument", "(", "'--dist_url'", ",", "default", "=", "'env://'", ",", "help", "=", "'url used to set up distributed training'", ")", "\n", "return", "argparser", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_runner.freeze_modules": [[44, 58], ["myutils.pytorch.module_util.get_module", "myutils.pytorch.module_util.freeze_module_params", "myutils.pytorch.module_util.freeze_module_params", "myutils.pytorch.module_util.get_module", "myutils.pytorch.module_util.unfreeze_module_params", "print", "models.efficientdet.utils.utils.init_weights"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.init_weights"], ["", "def", "freeze_modules", "(", "student_model", ",", "student_model_config", ",", "reset_unfrozen", "=", "False", ")", ":", "\n", "    ", "if", "'frozen_modules'", "in", "student_model_config", ":", "\n", "        ", "for", "student_path", "in", "student_model_config", "[", "'frozen_modules'", "]", ":", "\n", "            ", "student_module", "=", "module_util", ".", "get_module", "(", "student_model", ",", "student_path", ")", "\n", "module_util", ".", "freeze_module_params", "(", "student_module", ")", "\n", "\n", "", "", "elif", "'unfrozen_modules'", "in", "student_model_config", ":", "\n", "        ", "module_util", ".", "freeze_module_params", "(", "student_model", ")", "\n", "for", "student_path", "in", "student_model_config", "[", "'unfrozen_modules'", "]", ":", "\n", "            ", "student_module", "=", "module_util", ".", "get_module", "(", "student_model", ",", "student_path", ")", "\n", "module_util", ".", "unfreeze_module_params", "(", "student_module", ")", "\n", "if", "reset_unfrozen", ":", "\n", "                ", "print", "(", "\"Reinitializing module: {}\"", ".", "format", "(", "student_path", ")", ")", "\n", "init_weights", "(", "student_module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_runner.distill_model": [[59, 82], ["utils.misc_util.MetricLogger", "misc_util.MetricLogger.add_meter", "enumerate", "utils.misc_util.SmoothedValue", "min", "utils.main_util.warmup_lr_scheduler", "misc_util.MetricLogger.log_every", "list", "optimizer.zero_grad", "distillation_box", "distillation_box.backward", "optimizer.step", "misc_util.MetricLogger.update", "misc_util.MetricLogger.update", "main_util.warmup_lr_scheduler.step", "len", "image.to", "v.to", "t.items"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.add_meter", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.warmup_lr_scheduler", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.log_every", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.SwishImplementation.backward", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update"], ["", "", "", "", "def", "distill_model", "(", "distillation_box", ",", "data_loader", ",", "optimizer", ",", "log_freq", ",", "device", ",", "epoch", ")", ":", "\n", "    ", "metric_logger", "=", "misc_util", ".", "MetricLogger", "(", "delimiter", "=", "'  '", ")", "\n", "metric_logger", ".", "add_meter", "(", "'lr'", ",", "misc_util", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.6f}'", ")", ")", "\n", "header", "=", "'Epoch: [{}]'", ".", "format", "(", "epoch", ")", "\n", "lr_scheduler", "=", "None", "\n", "if", "epoch", "==", "0", ":", "\n", "        ", "warmup_factor", "=", "1.0", "/", "1000.0", "\n", "warmup_iters", "=", "min", "(", "1000", ",", "len", "(", "data_loader", ")", "-", "1", ")", "\n", "lr_scheduler", "=", "main_util", ".", "warmup_lr_scheduler", "(", "optimizer", ",", "warmup_iters", ",", "warmup_factor", ")", "\n", "\n", "", "for", "idx", ",", "(", "images", ",", "targets", ")", "in", "enumerate", "(", "metric_logger", ".", "log_every", "(", "data_loader", ",", "log_freq", ",", "header", ")", ")", ":", "\n", "        ", "images", "=", "list", "(", "image", ".", "to", "(", "device", ")", "for", "image", "in", "images", ")", "\n", "targets", "=", "[", "{", "k", ":", "v", ".", "to", "(", "device", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "for", "t", "in", "targets", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "distillation_box", "(", "images", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "metric_logger", ".", "update", "(", "loss", "=", "loss", ")", "\n", "metric_logger", ".", "update", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "# torch.cuda.empty_cache()", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_runner.distill": [[85, 158], ["distillation.tool.DistillationBox", "myutils.pytorch.func_util.get_optimizer", "myutils.pytorch.func_util.get_scheduler", "myutils.common.file_util.check_if_exists", "time.time", "range", "str", "print", "isinstance", "isinstance", "teacher_model.eval", "student_model.train", "models.set_bottleneck_transformer", "mimic_runner.distill_model", "models.set_bottleneck_transformer", "print", "func_util.get_scheduler.step", "torch.distributed.barrier", "time.time", "datetime.timedelta", "models.load_ckpt", "models.load_ckpt", "train_sampler.set_epoch", "models.mimic.base.set_width", "print", "utils.main_util.evaluate", "len", "utils.misc_util.is_main_process", "print", "models.save_ckpt", "models.slimmable.compute_post_bn.ComputeBN", "int", "torch.distributed"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.coco_runner.train", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.models.__init__.set_bottleneck_transformer", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_fix.distill_model", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.models.__init__.set_bottleneck_transformer", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.load_ckpt", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.load_ckpt", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.set_width", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.evaluate", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.is_main_process", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.save_ckpt", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.compute_post_bn.ComputeBN"], ["", "", "def", "distill", "(", "teacher_model", ",", "student_model", ",", "train_sampler", ",", "train_data_loader", ",", "val_data_loader", ",", "\n", "device", ",", "distributed", ",", "distill_backbone_only", ",", "config", ",", "args", ")", ":", "\n", "    ", "train_config", "=", "config", "[", "'train'", "]", "\n", "student_config", "=", "config", "[", "'student_model'", "]", "\n", "distillation_box", "=", "DistillationBox", "(", "teacher_model", ",", "student_model", ",", "\n", "train_config", "[", "'criterion'", "]", ",", "student_config", ")", "\n", "ckpt_file_path", "=", "config", "[", "'student_model'", "]", "[", "'ckpt'", "]", "\n", "optim_config", "=", "train_config", "[", "'optimizer'", "]", "\n", "optimizer", "=", "func_util", ".", "get_optimizer", "(", "student_model", ",", "optim_config", "[", "'type'", "]", ",", "optim_config", "[", "'params'", "]", ")", "\n", "scheduler_config", "=", "train_config", "[", "'scheduler'", "]", "\n", "lr_scheduler", "=", "func_util", ".", "get_scheduler", "(", "optimizer", ",", "scheduler_config", "[", "'type'", "]", ",", "scheduler_config", "[", "'params'", "]", ")", "\n", "use_bottleneck_transformer", "=", "args", ".", "transform_bottleneck", "\n", "best_val_map", "=", "0.0", "\n", "if", "file_util", ".", "check_if_exists", "(", "ckpt_file_path", ")", ":", "\n", "        ", "if", "args", ".", "ignore_optimizer", ":", "\n", "            ", "best_val_map", ",", "_", ",", "_", "=", "load_ckpt", "(", "ckpt_file_path", ",", "optimizer", "=", "None", ",", "lr_scheduler", "=", "None", ")", "\n", "", "else", ":", "\n", "            ", "best_val_map", ",", "_", ",", "_", "=", "load_ckpt", "(", "ckpt_file_path", ",", "optimizer", "=", "optimizer", ",", "lr_scheduler", "=", "lr_scheduler", ")", "\n", "\n", "", "", "num_epochs", "=", "train_config", "[", "'num_epochs'", "]", "\n", "log_freq", "=", "train_config", "[", "'log_freq'", "]", "\n", "teacher_model_without_dp", "=", "teacher_model", ".", "module", "if", "isinstance", "(", "teacher_model", ",", "DataParallel", ")", "else", "teacher_model", "\n", "student_model_without_ddp", "=", "student_model", ".", "module", "if", "isinstance", "(", "student_model", ",", "DistributedDataParallel", ")", "else", "student_model", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "post_bn", "=", "False", "\n", "if", "'post_batch_norm'", "in", "config", "[", "'train'", "]", ":", "\n", "        ", "post_bn", "=", "config", "[", "'train'", "]", "[", "'post_batch_norm'", "]", "\n", "\n", "", "for", "epoch", "in", "range", "(", "lr_scheduler", ".", "last_epoch", ",", "num_epochs", ")", ":", "\n", "        ", "if", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "teacher_model", ".", "eval", "(", ")", "\n", "student_model", ".", "train", "(", ")", "\n", "teacher_model_without_dp", ".", "distill_backbone_only", "=", "distill_backbone_only", "\n", "student_model_without_ddp", ".", "distill_backbone_only", "=", "distill_backbone_only", "\n", "set_bottleneck_transformer", "(", "student_model_without_ddp", ",", "False", ")", "\n", "\n", "distill_model", "(", "distillation_box", ",", "train_data_loader", ",", "optimizer", ",", "log_freq", ",", "device", ",", "epoch", ")", "\n", "student_model_without_ddp", ".", "distill_backbone_only", "=", "False", "\n", "set_bottleneck_transformer", "(", "student_model_without_ddp", ",", "use_bottleneck_transformer", ")", "\n", "\n", "val_map", "=", "0", "\n", "width_list", "=", "[", "1.0", "]", "\n", "if", "'slimmable'", "in", "student_config", "[", "'backbone'", "]", "[", "'params'", "]", ":", "\n", "            ", "width_list", "=", "[", "0.25", ",", "0.5", ",", "0.75", ",", "1.0", "]", "\n", "width_list", "=", "[", "w", "for", "w", "in", "width_list", "if", "w", "in", "student_config", "[", "'backbone'", "]", "[", "'params'", "]", "[", "'width_mult_list'", "]", "]", "\n", "\n", "", "for", "width", "in", "width_list", ":", "\n", "            ", "set_width", "(", "student_model", ",", "width", ")", "\n", "if", "post_bn", ":", "\n", "                ", "ComputeBN", "(", "student_model", ",", "train_data_loader", ")", "\n", "", "print", "(", "'\\n[Student model@width={}]'", ".", "format", "(", "width", ")", ")", "\n", "coco_evaluator", "=", "main_util", ".", "evaluate", "(", "student_model", ",", "val_data_loader", ",", "device", "=", "device", ")", "\n", "val_map", "+=", "coco_evaluator", ".", "coco_eval", "[", "'bbox'", "]", ".", "stats", "[", "0", "]", "\n", "", "val_map", "=", "val_map", "/", "len", "(", "width_list", ")", "\n", "\n", "print", "(", "'BBox mAP: {:.4f})'", ".", "format", "(", "val_map", ")", ")", "\n", "if", "val_map", ">", "best_val_map", "and", "misc_util", ".", "is_main_process", "(", ")", ":", "\n", "            ", "print", "(", "'Updating ckpt (Best BBox mAP: {:.4f} -> {:.4f})'", ".", "format", "(", "best_val_map", ",", "val_map", ")", ")", "\n", "best_val_map", "=", "val_map", "\n", "save_ckpt", "(", "student_model_without_ddp", ",", "optimizer", ",", "lr_scheduler", ",", "best_val_map", ",", "config", ",", "args", ",", "\n", "ckpt_file_path", ")", "\n", "\n", "", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "if", "distributed", ":", "\n", "        ", "dist", ".", "barrier", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_runner.evaluate": [[160, 184], ["models.set_bottleneck_transformer", "isinstance", "isinstance", "print", "utils.main_util.evaluate", "utils.main_util.evaluate", "print", "models.mimic.base.set_width", "utils.main_util.evaluate", "models.slimmable.compute_post_bn.ComputeBN"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.models.__init__.set_bottleneck_transformer", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.evaluate", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.evaluate", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.set_width", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.evaluate", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.compute_post_bn.ComputeBN"], ["", "def", "evaluate", "(", "teacher_model", ",", "student_model", ",", "test_data_loader", ",", "train_data_loader", ",", "\n", "device", ",", "student_only", ",", "use_bottleneck_transformer", ",", "student_model_config", ",", "post_bn", "=", "False", ")", ":", "\n", "    ", "teacher_model_without_dp", "=", "teacher_model", ".", "module", "if", "isinstance", "(", "teacher_model", ",", "DataParallel", ")", "else", "teacher_model", "\n", "student_model_without_ddp", "=", "student_model", ".", "module", "if", "isinstance", "(", "student_model", ",", "DistributedDataParallel", ")", "else", "student_model", "\n", "teacher_model_without_dp", ".", "distill_backbone_only", "=", "False", "\n", "student_model_without_ddp", ".", "distill_backbone_only", "=", "False", "\n", "set_bottleneck_transformer", "(", "student_model_without_ddp", ",", "use_bottleneck_transformer", ")", "\n", "\n", "if", "not", "student_only", ":", "\n", "        ", "print", "(", "'[Teacher model]'", ")", "\n", "main_util", ".", "evaluate", "(", "teacher_model", ",", "test_data_loader", ",", "device", "=", "device", ")", "\n", "\n", "", "if", "\"slimmable\"", "in", "student_model_config", "[", "'backbone'", "]", "[", "'params'", "]", ":", "\n", "        ", "width_mult_list", "=", "student_model_config", "[", "'backbone'", "]", "[", "'params'", "]", "[", "'width_mult_list'", "]", "\n", "for", "width", "in", "width_mult_list", ":", "\n", "            ", "print", "(", "'\\n[Student model@width={}]'", ".", "format", "(", "width", ")", ")", "\n", "set_width", "(", "student_model", ",", "width", ")", "\n", "if", "post_bn", ":", "\n", "                ", "ComputeBN", "(", "student_model", ",", "train_data_loader", ")", "\n", "", "main_util", ".", "evaluate", "(", "student_model", ",", "test_data_loader", ",", "device", "=", "device", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "main_util", ".", "evaluate", "(", "student_model", ",", "test_data_loader", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_runner.main": [[186, 224], ["myutils.common.yaml_util.load_yaml_file", "utils.main_util.init_distributed_mode", "torch.device", "models.get_model", "myutils.pytorch.module_util.freeze_module_params", "models.get_model", "mimic_runner.freeze_modules", "models.set_bottleneck_transformer", "utils.data_util.get_coco_data_loaders", "mimic_runner.evaluate", "utils.main_util.overwrite_config", "torch.nn.DataParallel", "torch.nn.parallel.distributed.DistributedDataParallel", "mimic_runner.distill", "models.load_ckpt", "torch.cuda.is_available", "isinstance"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.init_distributed_mode", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.get_model", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.get_model", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_fix.freeze_modules", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.models.__init__.set_bottleneck_transformer", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.data_util.get_coco_data_loaders", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.evaluate", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.overwrite_config", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_fix.distill", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.load_ckpt"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "config", "=", "yaml_util", ".", "load_yaml_file", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "json", "is", "not", "None", ":", "\n", "        ", "main_util", ".", "overwrite_config", "(", "config", ",", "args", ".", "json", ")", "\n", "\n", "", "distributed", ",", "device_ids", "=", "main_util", ".", "init_distributed_mode", "(", "args", ".", "world_size", ",", "args", ".", "dist_url", ")", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "device", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "teacher_model", "=", "get_model", "(", "config", "[", "'teacher_model'", "]", ",", "device", ")", "\n", "module_util", ".", "freeze_module_params", "(", "teacher_model", ")", "\n", "student_model_config", "=", "config", "[", "'student_model'", "]", "\n", "student_model", "=", "get_model", "(", "student_model_config", ",", "device", ",", "require_weights", "=", "args", ".", "require_weights", ")", "\n", "\n", "reset_unfrozen", "=", "False", "\n", "if", "'reset_unfrozen'", "in", "student_model_config", ":", "\n", "        ", "reset_unfrozen", "=", "student_model_config", "[", "'reset_unfrozen'", "]", "\n", "", "freeze_modules", "(", "student_model", ",", "student_model_config", ",", "reset_unfrozen", "=", "reset_unfrozen", ")", "\n", "set_bottleneck_transformer", "(", "student_model", ",", "True", ")", "\n", "post_bn", "=", "False", "\n", "if", "'post_batch_norm'", "in", "config", "[", "'train'", "]", ":", "\n", "        ", "post_bn", "=", "config", "[", "'train'", "]", "[", "'post_batch_norm'", "]", "\n", "\n", "# print('Updatable parameters: {}'.format(module_util.get_updatable_param_names(student_model)))", "\n", "", "distill_backbone_only", "=", "student_model_config", "[", "'distill_backbone_only'", "]", "\n", "train_config", "=", "config", "[", "'train'", "]", "\n", "\n", "train_sampler", ",", "train_data_loader", ",", "val_data_loader", ",", "test_data_loader", "=", "data_util", ".", "get_coco_data_loaders", "(", "config", "[", "'dataset'", "]", ",", "train_config", "[", "'batch_size'", "]", ",", "distributed", ")", "\n", "if", "distributed", ":", "\n", "        ", "teacher_model", "=", "DataParallel", "(", "teacher_model", ",", "device_ids", "=", "device_ids", ")", "\n", "student_model", "=", "DistributedDataParallel", "(", "student_model", ",", "device_ids", "=", "device_ids", ")", "\n", "\n", "", "if", "args", ".", "distill", ":", "\n", "        ", "distill", "(", "teacher_model", ",", "student_model", ",", "train_sampler", ",", "train_data_loader", ",", "val_data_loader", ",", "\n", "device", ",", "distributed", ",", "distill_backbone_only", ",", "config", ",", "args", ")", "\n", "load_ckpt", "(", "config", "[", "'student_model'", "]", "[", "'ckpt'", "]", ",", "\n", "model", "=", "student_model", ".", "module", "if", "isinstance", "(", "student_model", ",", "DistributedDataParallel", ")", "else", "student_model", ")", "\n", "", "evaluate", "(", "teacher_model", ",", "student_model", ",", "test_data_loader", ",", "train_data_loader", ",", "device", ",", "\n", "args", ".", "skip_teacher_eval", ",", "args", ".", "transform_bottleneck", ",", "student_model_config", ",", "post_bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_fix.freeze_batch_norm_outside_bottleneck": [[20, 25], ["model.modules", "model.backbone_net.bottleneck.train", "isinstance", "m.eval"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.coco_runner.train"], ["def", "freeze_batch_norm_outside_bottleneck", "(", "model", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "            ", "m", ".", "eval", "(", ")", "\n", "", "", "model", ".", "backbone_net", ".", "bottleneck", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_fix.get_argparser": [[27, 41], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "def", "get_argparser", "(", ")", ":", "\n", "    ", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Mimic Runner'", ")", "\n", "argparser", ".", "add_argument", "(", "'--config'", ",", "required", "=", "True", ",", "help", "=", "'yaml file path'", ")", "\n", "argparser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "'cuda'", ",", "help", "=", "'device'", ")", "\n", "argparser", ".", "add_argument", "(", "'--json'", ",", "help", "=", "'dictionary to overwrite config'", ")", "\n", "argparser", ".", "add_argument", "(", "'-distill'", ",", "action", "=", "'store_true'", ",", "help", "=", "'distill a teacher model'", ")", "\n", "argparser", ".", "add_argument", "(", "'-skip_teacher_eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'skip teacher model evaluation in testing'", ")", "\n", "argparser", ".", "add_argument", "(", "'-transform_bottleneck'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use bottleneck transformer (if defined in yaml) in testing'", ")", "\n", "argparser", ".", "add_argument", "(", "'-post_bn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use post traing batch norm calculation'", ")", "\n", "# distributed training parameters", "\n", "argparser", ".", "add_argument", "(", "'--world_size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of distributed processes'", ")", "\n", "argparser", ".", "add_argument", "(", "'--dist_url'", ",", "default", "=", "'env://'", ",", "help", "=", "'url used to set up distributed training'", ")", "\n", "return", "argparser", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_fix.freeze_modules": [[43, 54], ["myutils.pytorch.module_util.get_module", "myutils.pytorch.module_util.freeze_module_params", "myutils.pytorch.module_util.freeze_module_params", "myutils.pytorch.module_util.get_module", "myutils.pytorch.module_util.unfreeze_module_params"], "function", ["None"], ["", "def", "freeze_modules", "(", "student_model", ",", "student_model_config", ")", ":", "\n", "    ", "if", "'frozen_modules'", "in", "student_model_config", ":", "\n", "        ", "for", "student_path", "in", "student_model_config", "[", "'frozen_modules'", "]", ":", "\n", "            ", "student_module", "=", "module_util", ".", "get_module", "(", "student_model", ",", "student_path", ")", "\n", "module_util", ".", "freeze_module_params", "(", "student_module", ")", "\n", "\n", "", "", "elif", "'unfrozen_modules'", "in", "student_model_config", ":", "\n", "        ", "module_util", ".", "freeze_module_params", "(", "student_model", ")", "\n", "for", "student_path", "in", "student_model_config", "[", "'unfrozen_modules'", "]", ":", "\n", "            ", "student_module", "=", "module_util", ".", "get_module", "(", "student_model", ",", "student_path", ")", "\n", "module_util", ".", "unfreeze_module_params", "(", "student_module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_fix.distill_model": [[56, 79], ["utils.misc_util.MetricLogger", "misc_util.MetricLogger.add_meter", "misc_util.MetricLogger.log_every", "utils.misc_util.SmoothedValue", "min", "utils.main_util.warmup_lr_scheduler", "list", "optimizer.zero_grad", "distillation_box", "distillation_box.backward", "optimizer.step", "misc_util.MetricLogger.update", "misc_util.MetricLogger.update", "main_util.warmup_lr_scheduler.step", "len", "image.to", "v.to", "t.items"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.add_meter", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.log_every", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.warmup_lr_scheduler", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.SwishImplementation.backward", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update"], ["", "", "", "def", "distill_model", "(", "distillation_box", ",", "data_loader", ",", "optimizer", ",", "log_freq", ",", "device", ",", "epoch", ")", ":", "\n", "    ", "metric_logger", "=", "misc_util", ".", "MetricLogger", "(", "delimiter", "=", "'  '", ")", "\n", "metric_logger", ".", "add_meter", "(", "'lr'", ",", "misc_util", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.6f}'", ")", ")", "\n", "header", "=", "'Epoch: [{}]'", ".", "format", "(", "epoch", ")", "\n", "lr_scheduler", "=", "None", "\n", "if", "epoch", "==", "0", ":", "\n", "        ", "warmup_factor", "=", "1.0", "/", "1000.0", "\n", "warmup_iters", "=", "min", "(", "1000", ",", "len", "(", "data_loader", ")", "-", "1", ")", "\n", "lr_scheduler", "=", "main_util", ".", "warmup_lr_scheduler", "(", "optimizer", ",", "warmup_iters", ",", "warmup_factor", ")", "\n", "\n", "", "for", "images", ",", "targets", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "log_freq", ",", "header", ")", ":", "\n", "        ", "images", "=", "list", "(", "image", ".", "to", "(", "device", ")", "for", "image", "in", "images", ")", "\n", "targets", "=", "[", "{", "k", ":", "v", ".", "to", "(", "device", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "for", "t", "in", "targets", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "distillation_box", "(", "images", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "metric_logger", ".", "update", "(", "loss", "=", "loss", ")", "\n", "metric_logger", ".", "update", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "# torch.cuda.empty_cache()", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_fix.distill": [[82, 96], ["distillation.tool.DistillationBox", "myutils.pytorch.func_util.get_optimizer", "myutils.pytorch.func_util.get_scheduler", "myutils.common.file_util.check_if_exists", "models.load_ckpt", "models.save_ckpt"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.load_ckpt", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.save_ckpt"], ["", "", "def", "distill", "(", "teacher_model", ",", "student_model", ",", "train_sampler", ",", "train_data_loader", ",", "val_data_loader", ",", "\n", "device", ",", "distributed", ",", "distill_backbone_only", ",", "config", ",", "args", ")", ":", "\n", "    ", "train_config", "=", "config", "[", "'train'", "]", "\n", "student_config", "=", "config", "[", "'student_model'", "]", "\n", "distillation_box", "=", "DistillationBox", "(", "teacher_model", ",", "student_model", ",", "\n", "train_config", "[", "'criterion'", "]", ",", "student_config", ")", "\n", "ckpt_file_path", "=", "config", "[", "'student_model'", "]", "[", "'ckpt'", "]", "\n", "optim_config", "=", "train_config", "[", "'optimizer'", "]", "\n", "optimizer", "=", "func_util", ".", "get_optimizer", "(", "student_model", ",", "optim_config", "[", "'type'", "]", ",", "optim_config", "[", "'params'", "]", ")", "\n", "scheduler_config", "=", "train_config", "[", "'scheduler'", "]", "\n", "lr_scheduler", "=", "func_util", ".", "get_scheduler", "(", "optimizer", ",", "scheduler_config", "[", "'type'", "]", ",", "scheduler_config", "[", "'params'", "]", ")", "\n", "if", "file_util", ".", "check_if_exists", "(", "ckpt_file_path", ")", ":", "\n", "        ", "best_val_map", ",", "_", ",", "_", "=", "load_ckpt", "(", "ckpt_file_path", ",", "optimizer", "=", "optimizer", ",", "lr_scheduler", "=", "lr_scheduler", ")", "\n", "save_ckpt", "(", "student_model", ",", "optimizer", ",", "lr_scheduler", ",", "best_val_map", ",", "config", ",", "args", ",", "ckpt_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_fix.main": [[98, 119], ["myutils.common.yaml_util.load_yaml_file", "utils.main_util.init_distributed_mode", "torch.device", "models.get_model", "myutils.pytorch.module_util.freeze_module_params", "models.get_model", "mimic_fix.freeze_modules", "myutils.pytorch.func_util.get_optimizer", "myutils.pytorch.func_util.get_scheduler", "myutils.common.file_util.check_if_exists", "utils.main_util.overwrite_config", "models.load_ckpt", "models.save_ckpt", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.init_distributed_mode", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.get_model", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.get_model", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.mimic_fix.freeze_modules", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.overwrite_config", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.load_ckpt", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.save_ckpt"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "config", "=", "yaml_util", ".", "load_yaml_file", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "json", "is", "not", "None", ":", "\n", "        ", "main_util", ".", "overwrite_config", "(", "config", ",", "args", ".", "json", ")", "\n", "\n", "", "distributed", ",", "device_ids", "=", "main_util", ".", "init_distributed_mode", "(", "args", ".", "world_size", ",", "args", ".", "dist_url", ")", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "device", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "teacher_model", "=", "get_model", "(", "config", "[", "'teacher_model'", "]", ",", "device", ")", "\n", "module_util", ".", "freeze_module_params", "(", "teacher_model", ")", "\n", "student_model_config", "=", "config", "[", "'student_model'", "]", "\n", "student_model", "=", "get_model", "(", "student_model_config", ",", "device", ")", "\n", "freeze_modules", "(", "student_model", ",", "student_model_config", ")", "\n", "ckpt_file_path", "=", "config", "[", "'student_model'", "]", "[", "'ckpt'", "]", "\n", "train_config", "=", "config", "[", "'train'", "]", "\n", "optim_config", "=", "train_config", "[", "'optimizer'", "]", "\n", "optimizer", "=", "func_util", ".", "get_optimizer", "(", "student_model", ",", "optim_config", "[", "'type'", "]", ",", "optim_config", "[", "'params'", "]", ")", "\n", "scheduler_config", "=", "train_config", "[", "'scheduler'", "]", "\n", "lr_scheduler", "=", "func_util", ".", "get_scheduler", "(", "optimizer", ",", "scheduler_config", "[", "'type'", "]", ",", "scheduler_config", "[", "'params'", "]", ")", "\n", "if", "file_util", ".", "check_if_exists", "(", "ckpt_file_path", ")", ":", "\n", "        ", "best_val_map", ",", "_", ",", "_", "=", "load_ckpt", "(", "ckpt_file_path", ",", "optimizer", "=", "optimizer", ",", "lr_scheduler", "=", "lr_scheduler", ")", "\n", "save_ckpt", "(", "student_model", ",", "optimizer", ",", "lr_scheduler", ",", "best_val_map", ",", "config", ",", "args", ",", "ckpt_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.__init__": [[15, 22], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "'{median:.4f} ({global_avg:.4f})'", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.update": [[23, 27], ["misc_util.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.synchronize_between_processes": [[28, 40], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "misc_util.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.median": [[41, 45], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.median", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.avg": [[46, 50], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.global_avg": [[51, 54], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max": [[55, 58], ["misc_util.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.value": [[59, 62], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.__str__": [[63, 70], ["misc_util.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.__init__": [[143, 146], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "'\\t'", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.update": [[147, 153], ["kwargs.items", "isinstance", "isinstance", "misc_util.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.__getattr__": [[154, 161], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "'`{}` object has no attribute `{}`'", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.__str__": [[162, 169], ["misc_util.MetricLogger.meters.items", "misc_util.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "'{}: {}'", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.synchronize_between_processes": [[170, 173], ["misc_util.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.add_meter": [[174, 176], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.log_every": [[177, 230], ["time.time", "time.time", "misc_util.SmoothedValue", "misc_util.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str", "print", "misc_util.MetricLogger.delimiter.join", "misc_util.MetricLogger.delimiter.join", "misc_util.SmoothedValue.update", "misc_util.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "misc_util.MetricLogger.format", "misc_util.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", ",", "\n", "'max mem: {memory:.0f}'", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", "\n", "]", ")", "\n", "", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.4f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.all_gather": [[72, 113], ["misc_util.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.tensor", "torch.tensor", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.tensor", "torch.tensor", "int", "tensor_list.append", "torch.empty", "torch.empty", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "range", "size.item", "torch.empty", "torch.empty", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.get_world_size", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.all_gather", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.all_gather"], ["", "", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "'cuda'", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "tensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ",", "device", "=", "'cuda'", ")", "\n", "size_list", "=", "[", "torch", ".", "tensor", "(", "[", "0", "]", ",", "device", "=", "'cuda'", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "empty", "(", "(", "max_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "empty", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.reduce_dict": [[115, 140], ["misc_util.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.all_reduce", "input_dict.keys", "names.append", "torch.stack.append", "zip"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.get_world_size"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that all processes\n    have the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "all_reduce", "(", "values", ")", "\n", "if", "average", ":", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.collate_fn": [[232, 234], ["tuple", "zip"], "function", ["None"], ["", "", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "return", "tuple", "(", "zip", "(", "*", "batch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.is_dist_avail_and_initialized": [[236, 242], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.get_world_size": [[244, 248], ["torch.get_world_size", "misc_util.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.get_world_size", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.get_rank": [[250, 254], ["torch.get_rank", "misc_util.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.get_rank", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.is_main_process": [[256, 258], ["misc_util.get_rank"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.save_on_master": [[260, 263], ["misc_util.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.data_util.get_coco_dataset": [[9, 16], ["utils.coco_util.get_coco", "structure.transformer.ToTensor", "transforms.append", "structure.transformer.RandomHorizontalFlip", "structure.transformer.Compose"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.get_coco"], ["def", "get_coco_dataset", "(", "split_dict", ",", "is_train", ")", ":", "\n", "    ", "transforms", "=", "[", "ToTensor", "(", ")", "]", "\n", "if", "is_train", ":", "\n", "        ", "transforms", ".", "append", "(", "RandomHorizontalFlip", "(", "0.5", ")", ")", "\n", "", "return", "get_coco", "(", "img_dir_path", "=", "split_dict", "[", "'images'", "]", ",", "ann_file_path", "=", "split_dict", "[", "'annotations'", "]", ",", "\n", "transforms", "=", "Compose", "(", "transforms", ")", ",", "remove_non_annotated_imgs", "=", "split_dict", "[", "'remove_non_annotated_imgs'", "]", ",", "\n", "jpeg_quality", "=", "split_dict", "[", "'jpeg_quality'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.data_util.get_coco_data_loaders": [[18, 49], ["data_util.get_coco_dataset", "data_util.get_coco_dataset", "data_util.get_coco_dataset", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "structure.sampler.create_aspect_ratio_groups", "structure.sampler.GroupedBatchSampler", "torch.utils.data.BatchSampler"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.data_util.get_coco_dataset", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.data_util.get_coco_dataset", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.data_util.get_coco_dataset", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler.create_aspect_ratio_groups"], ["", "def", "get_coco_data_loaders", "(", "dataset_config", ",", "batch_size", ",", "distributed", ")", ":", "\n", "    ", "num_workers", "=", "dataset_config", "[", "'num_workers'", "]", "\n", "aspect_ratio_group_factor", "=", "dataset_config", "[", "'aspect_ratio_group_factor'", "]", "\n", "dataset_splits", "=", "dataset_config", "[", "'splits'", "]", "\n", "train_dataset", "=", "get_coco_dataset", "(", "dataset_splits", "[", "'train'", "]", ",", "True", ")", "\n", "val_dataset", "=", "get_coco_dataset", "(", "dataset_splits", "[", "'val'", "]", ",", "False", ")", "\n", "test_dataset", "=", "get_coco_dataset", "(", "dataset_splits", "[", "'test'", "]", ",", "False", ")", "\n", "\n", "print", "(", "'Creating data loaders'", ")", "\n", "if", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "test_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "RandomSampler", "(", "train_dataset", ")", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "SequentialSampler", "(", "val_dataset", ")", "\n", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "SequentialSampler", "(", "test_dataset", ")", "\n", "\n", "", "if", "aspect_ratio_group_factor", ">=", "0", ":", "\n", "        ", "group_ids", "=", "create_aspect_ratio_groups", "(", "train_dataset", ",", "k", "=", "aspect_ratio_group_factor", ")", "\n", "train_batch_sampler", "=", "GroupedBatchSampler", "(", "train_sampler", ",", "group_ids", ",", "batch_size", ")", "\n", "", "else", ":", "\n", "        ", "train_batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "BatchSampler", "(", "train_sampler", ",", "batch_size", ",", "drop_last", "=", "True", ")", "\n", "\n", "", "train_data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_sampler", "=", "train_batch_sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "collate_fn", "=", "misc_util", ".", "collate_fn", ")", "\n", "val_data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "val_sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "collate_fn", "=", "misc_util", ".", "collate_fn", ")", "\n", "test_data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "test_sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "collate_fn", "=", "misc_util", ".", "collate_fn", ")", "\n", "return", "train_sampler", ",", "train_data_loader", ",", "val_data_loader", ",", "test_data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.__init__": [[16, 27], ["isinstance", "copy.deepcopy", "pycocotools.cocoeval.COCOeval"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "coco_gt", ",", "iou_types", ")", ":", "\n", "        ", "assert", "isinstance", "(", "iou_types", ",", "(", "list", ",", "tuple", ")", ")", "\n", "coco_gt", "=", "copy", ".", "deepcopy", "(", "coco_gt", ")", "\n", "self", ".", "coco_gt", "=", "coco_gt", "\n", "self", ".", "iou_types", "=", "iou_types", "\n", "self", ".", "coco_eval", "=", "{", "}", "\n", "for", "iou_type", "in", "iou_types", ":", "\n", "            ", "self", ".", "coco_eval", "[", "iou_type", "]", "=", "COCOeval", "(", "coco_gt", ",", "iouType", "=", "iou_type", ")", "\n", "\n", "", "self", ".", "img_ids", "=", "[", "]", "\n", "self", ".", "eval_imgs", "=", "{", "k", ":", "[", "]", "for", "k", "in", "iou_types", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update": [[28, 42], ["list", "coco_eval_util.CocoEvaluator.img_ids.extend", "numpy.unique", "coco_eval_util.CocoEvaluator.prepare", "list", "coco_eval_util.evaluate", "coco_eval_util.CocoEvaluator.eval_imgs[].append", "list", "coco_eval_util.loadRes", "pycocotools.coco.COCO", "predictions.keys"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.prepare", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.evaluate", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.loadRes"], ["", "def", "update", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "img_ids", "=", "list", "(", "np", ".", "unique", "(", "list", "(", "predictions", ".", "keys", "(", ")", ")", ")", ")", "\n", "self", ".", "img_ids", ".", "extend", "(", "img_ids", ")", "\n", "\n", "for", "iou_type", "in", "self", ".", "iou_types", ":", "\n", "            ", "results", "=", "self", ".", "prepare", "(", "predictions", ",", "iou_type", ")", "\n", "coco_dt", "=", "loadRes", "(", "self", ".", "coco_gt", ",", "results", ")", "if", "results", "else", "COCO", "(", ")", "\n", "coco_eval", "=", "self", ".", "coco_eval", "[", "iou_type", "]", "\n", "\n", "coco_eval", ".", "cocoDt", "=", "coco_dt", "\n", "coco_eval", ".", "params", ".", "imgIds", "=", "list", "(", "img_ids", ")", "\n", "img_ids", ",", "eval_imgs", "=", "evaluate", "(", "coco_eval", ")", "\n", "\n", "self", ".", "eval_imgs", "[", "iou_type", "]", ".", "append", "(", "eval_imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.synchronize_between_processes": [[43, 47], ["numpy.concatenate", "coco_eval_util.create_common_coco_eval"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.create_common_coco_eval"], ["", "", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "iou_type", "in", "self", ".", "iou_types", ":", "\n", "            ", "self", ".", "eval_imgs", "[", "iou_type", "]", "=", "np", ".", "concatenate", "(", "self", ".", "eval_imgs", "[", "iou_type", "]", ",", "2", ")", "\n", "create_common_coco_eval", "(", "self", ".", "coco_eval", "[", "iou_type", "]", ",", "self", ".", "img_ids", ",", "self", ".", "eval_imgs", "[", "iou_type", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.accumulate": [[48, 51], ["coco_eval_util.CocoEvaluator.coco_eval.values", "coco_eval.accumulate"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.accumulate"], ["", "", "def", "accumulate", "(", "self", ")", ":", "\n", "        ", "for", "coco_eval", "in", "self", ".", "coco_eval", ".", "values", "(", ")", ":", "\n", "            ", "coco_eval", ".", "accumulate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.summarize": [[52, 56], ["coco_eval_util.CocoEvaluator.coco_eval.items", "print", "coco_eval.summarize"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.summarize"], ["", "", "def", "summarize", "(", "self", ")", ":", "\n", "        ", "for", "iou_type", ",", "coco_eval", "in", "self", ".", "coco_eval", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"IoU metric: {}\"", ".", "format", "(", "iou_type", ")", ")", "\n", "coco_eval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.prepare": [[57, 66], ["coco_eval_util.CocoEvaluator.prepare_for_coco_detection", "coco_eval_util.CocoEvaluator.prepare_for_coco_segmentation", "coco_eval_util.CocoEvaluator.prepare_for_coco_keypoint", "ValueError"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.prepare_for_coco_detection", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.prepare_for_coco_segmentation", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.prepare_for_coco_keypoint"], ["", "", "def", "prepare", "(", "self", ",", "predictions", ",", "iou_type", ")", ":", "\n", "        ", "if", "iou_type", "==", "\"bbox\"", ":", "\n", "            ", "return", "self", ".", "prepare_for_coco_detection", "(", "predictions", ")", "\n", "", "elif", "iou_type", "==", "\"segm\"", ":", "\n", "            ", "return", "self", ".", "prepare_for_coco_segmentation", "(", "predictions", ")", "\n", "", "elif", "iou_type", "==", "\"keypoints\"", ":", "\n", "            ", "return", "self", ".", "prepare_for_coco_keypoint", "(", "predictions", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown iou type {}\"", ".", "format", "(", "iou_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.prepare_for_coco_detection": [[67, 90], ["predictions.items", "convert_to_xywh().tolist", "prediction[].tolist", "prediction[].tolist", "coco_results.extend", "len", "coco_eval_util.convert_to_xywh", "enumerate"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.convert_to_xywh"], ["", "", "def", "prepare_for_coco_detection", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "coco_results", "=", "[", "]", "\n", "for", "original_id", ",", "prediction", "in", "predictions", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "boxes", "=", "prediction", "[", "\"boxes\"", "]", "\n", "boxes", "=", "convert_to_xywh", "(", "boxes", ")", ".", "tolist", "(", ")", "\n", "scores", "=", "prediction", "[", "\"scores\"", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", ".", "tolist", "(", ")", "\n", "\n", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "labels", "[", "k", "]", ",", "\n", "\"bbox\"", ":", "box", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "box", "in", "enumerate", "(", "boxes", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.prepare_for_coco_segmentation": [[91, 125], ["predictions.items", "prediction[].tolist", "prediction[].tolist", "coco_results.extend", "len", "rle[].decode", "pycocotools.encode", "numpy.array", "enumerate"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.BlockDecoder.decode", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.BlockDecoder.encode"], ["", "def", "prepare_for_coco_segmentation", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "coco_results", "=", "[", "]", "\n", "for", "original_id", ",", "prediction", "in", "predictions", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "scores", "=", "prediction", "[", "\"scores\"", "]", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", "\n", "masks", "=", "prediction", "[", "\"masks\"", "]", "\n", "\n", "masks", "=", "masks", ">", "0.5", "\n", "\n", "scores", "=", "prediction", "[", "\"scores\"", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", ".", "tolist", "(", ")", "\n", "\n", "rles", "=", "[", "\n", "mask_util", ".", "encode", "(", "np", ".", "array", "(", "mask", "[", "0", ",", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "dtype", "=", "np", ".", "uint8", ",", "order", "=", "\"F\"", ")", ")", "[", "0", "]", "\n", "for", "mask", "in", "masks", "\n", "]", "\n", "for", "rle", "in", "rles", ":", "\n", "                ", "rle", "[", "\"counts\"", "]", "=", "rle", "[", "\"counts\"", "]", ".", "decode", "(", "\"utf-8\"", ")", "\n", "\n", "", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "labels", "[", "k", "]", ",", "\n", "\"segmentation\"", ":", "rle", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "rle", "in", "enumerate", "(", "rles", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.prepare_for_coco_keypoint": [[126, 151], ["predictions.items", "convert_to_xywh().tolist", "prediction[].tolist", "prediction[].tolist", "keypoints.flatten().tolist.flatten().tolist.flatten().tolist", "coco_results.extend", "len", "coco_eval_util.convert_to_xywh", "keypoints.flatten().tolist.flatten().tolist.flatten", "enumerate"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.convert_to_xywh"], ["", "def", "prepare_for_coco_keypoint", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "coco_results", "=", "[", "]", "\n", "for", "original_id", ",", "prediction", "in", "predictions", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "prediction", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "boxes", "=", "prediction", "[", "\"boxes\"", "]", "\n", "boxes", "=", "convert_to_xywh", "(", "boxes", ")", ".", "tolist", "(", ")", "\n", "scores", "=", "prediction", "[", "\"scores\"", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "prediction", "[", "\"labels\"", "]", ".", "tolist", "(", ")", "\n", "keypoints", "=", "prediction", "[", "\"keypoints\"", "]", "\n", "keypoints", "=", "keypoints", ".", "flatten", "(", "start_dim", "=", "1", ")", ".", "tolist", "(", ")", "\n", "\n", "coco_results", ".", "extend", "(", "\n", "[", "\n", "{", "\n", "\"image_id\"", ":", "original_id", ",", "\n", "\"category_id\"", ":", "labels", "[", "k", "]", ",", "\n", "'keypoints'", ":", "keypoint", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "}", "\n", "for", "k", ",", "keypoint", "in", "enumerate", "(", "keypoints", ")", "\n", "]", "\n", ")", "\n", "", "return", "coco_results", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.convert_to_xywh": [[153, 156], ["boxes.unbind", "torch.stack", "torch.stack"], "function", ["None"], ["", "", "def", "convert_to_xywh", "(", "boxes", ")", ":", "\n", "    ", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "boxes", ".", "unbind", "(", "1", ")", "\n", "return", "torch", ".", "stack", "(", "(", "xmin", ",", "ymin", ",", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.merge": [[158, 178], ["utils.misc_util.all_gather", "utils.misc_util.all_gather", "numpy.array", "numpy.concatenate", "numpy.unique", "np.array.extend", "np.concatenate.append"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.all_gather", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.all_gather"], ["", "def", "merge", "(", "img_ids", ",", "eval_imgs", ")", ":", "\n", "    ", "all_img_ids", "=", "misc_util", ".", "all_gather", "(", "img_ids", ")", "\n", "all_eval_imgs", "=", "misc_util", ".", "all_gather", "(", "eval_imgs", ")", "\n", "\n", "merged_img_ids", "=", "[", "]", "\n", "for", "p", "in", "all_img_ids", ":", "\n", "        ", "merged_img_ids", ".", "extend", "(", "p", ")", "\n", "\n", "", "merged_eval_imgs", "=", "[", "]", "\n", "for", "p", "in", "all_eval_imgs", ":", "\n", "        ", "merged_eval_imgs", ".", "append", "(", "p", ")", "\n", "\n", "", "merged_img_ids", "=", "np", ".", "array", "(", "merged_img_ids", ")", "\n", "merged_eval_imgs", "=", "np", ".", "concatenate", "(", "merged_eval_imgs", ",", "2", ")", "\n", "\n", "# keep only unique (and in sorted order) images", "\n", "merged_img_ids", ",", "idx", "=", "np", ".", "unique", "(", "merged_img_ids", ",", "return_index", "=", "True", ")", "\n", "merged_eval_imgs", "=", "merged_eval_imgs", "[", "...", ",", "idx", "]", "\n", "\n", "return", "merged_img_ids", ",", "merged_eval_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.create_common_coco_eval": [[180, 188], ["coco_eval_util.merge", "list", "list", "copy.deepcopy", "list.flatten"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.merge"], ["", "def", "create_common_coco_eval", "(", "coco_eval", ",", "img_ids", ",", "eval_imgs", ")", ":", "\n", "    ", "img_ids", ",", "eval_imgs", "=", "merge", "(", "img_ids", ",", "eval_imgs", ")", "\n", "img_ids", "=", "list", "(", "img_ids", ")", "\n", "eval_imgs", "=", "list", "(", "eval_imgs", ".", "flatten", "(", ")", ")", "\n", "\n", "coco_eval", ".", "evalImgs", "=", "eval_imgs", "\n", "coco_eval", ".", "params", ".", "imgIds", "=", "img_ids", "\n", "coco_eval", ".", "_paramsEval", "=", "copy", ".", "deepcopy", "(", "coco_eval", ".", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.createIndex": [[198, 228], ["collections.defaultdict", "collections.defaultdict", "imgToAnns[].append", "catToImgs[].append"], "function", ["None"], ["", "def", "createIndex", "(", "self", ")", ":", "\n", "# create index", "\n", "# print('creating index...')", "\n", "    ", "anns", ",", "cats", ",", "imgs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "imgToAnns", ",", "catToImgs", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "if", "'annotations'", "in", "self", ".", "dataset", ":", "\n", "        ", "for", "ann", "in", "self", ".", "dataset", "[", "'annotations'", "]", ":", "\n", "            ", "imgToAnns", "[", "ann", "[", "'image_id'", "]", "]", ".", "append", "(", "ann", ")", "\n", "anns", "[", "ann", "[", "'id'", "]", "]", "=", "ann", "\n", "\n", "", "", "if", "'images'", "in", "self", ".", "dataset", ":", "\n", "        ", "for", "img", "in", "self", ".", "dataset", "[", "'images'", "]", ":", "\n", "            ", "imgs", "[", "img", "[", "'id'", "]", "]", "=", "img", "\n", "\n", "", "", "if", "'categories'", "in", "self", ".", "dataset", ":", "\n", "        ", "for", "cat", "in", "self", ".", "dataset", "[", "'categories'", "]", ":", "\n", "            ", "cats", "[", "cat", "[", "'id'", "]", "]", "=", "cat", "\n", "\n", "", "", "if", "'annotations'", "in", "self", ".", "dataset", "and", "'categories'", "in", "self", ".", "dataset", ":", "\n", "        ", "for", "ann", "in", "self", ".", "dataset", "[", "'annotations'", "]", ":", "\n", "            ", "catToImgs", "[", "ann", "[", "'category_id'", "]", "]", ".", "append", "(", "ann", "[", "'image_id'", "]", ")", "\n", "\n", "# print('index created!')", "\n", "\n", "# create class members", "\n", "", "", "self", ".", "anns", "=", "anns", "\n", "self", ".", "imgToAnns", "=", "imgToAnns", "\n", "self", ".", "catToImgs", "=", "catToImgs", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "cats", "=", "cats", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.loadRes": [[233, 293], ["pycocotools.coco.COCO", "isinstance", "coco_eval_util.createIndex", "json.load", "type", "set", "enumerate", "open", "type", "coco_eval_util..loadNumpyAnnotations", "set", "set", "set", "set", "copy.deepcopy", "enumerate", "coco_eval_util..getImgIds", "copy.deepcopy", "enumerate", "maskUtils.area", "copy.deepcopy", "enumerate", "maskUtils.toBbox", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.createIndex", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max"], ["def", "loadRes", "(", "self", ",", "resFile", ")", ":", "\n", "    ", "\"\"\"\n    Load result file and return a result api object.\n    :param   resFile (str)     : file name of result file\n    :return: res (obj)         : result api object\n    \"\"\"", "\n", "res", "=", "COCO", "(", ")", "\n", "res", ".", "dataset", "[", "'images'", "]", "=", "[", "img", "for", "img", "in", "self", ".", "dataset", "[", "'images'", "]", "]", "\n", "\n", "# print('Loading and preparing results...')", "\n", "# tic = time.time()", "\n", "if", "isinstance", "(", "resFile", ",", "torch", ".", "_six", ".", "string_classes", ")", ":", "\n", "        ", "anns", "=", "json", ".", "load", "(", "open", "(", "resFile", ")", ")", "\n", "", "elif", "type", "(", "resFile", ")", "==", "np", ".", "ndarray", ":", "\n", "        ", "anns", "=", "self", ".", "loadNumpyAnnotations", "(", "resFile", ")", "\n", "", "else", ":", "\n", "        ", "anns", "=", "resFile", "\n", "", "assert", "type", "(", "anns", ")", "==", "list", ",", "'results in not an array of objects'", "\n", "annsImgIds", "=", "[", "ann", "[", "'image_id'", "]", "for", "ann", "in", "anns", "]", "\n", "assert", "set", "(", "annsImgIds", ")", "==", "(", "set", "(", "annsImgIds", ")", "&", "set", "(", "self", ".", "getImgIds", "(", ")", ")", ")", ",", "'Results do not correspond to current coco set'", "\n", "if", "'caption'", "in", "anns", "[", "0", "]", ":", "\n", "        ", "imgIds", "=", "set", "(", "[", "img", "[", "'id'", "]", "for", "img", "in", "res", ".", "dataset", "[", "'images'", "]", "]", ")", "&", "set", "(", "[", "ann", "[", "'image_id'", "]", "for", "ann", "in", "anns", "]", ")", "\n", "res", ".", "dataset", "[", "'images'", "]", "=", "[", "img", "for", "img", "in", "res", ".", "dataset", "[", "'images'", "]", "if", "img", "[", "'id'", "]", "in", "imgIds", "]", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "            ", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "", "", "elif", "'bbox'", "in", "anns", "[", "0", "]", "and", "not", "anns", "[", "0", "]", "[", "'bbox'", "]", "==", "[", "]", ":", "\n", "        ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "            ", "bb", "=", "ann", "[", "'bbox'", "]", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "[", "bb", "[", "0", "]", ",", "bb", "[", "0", "]", "+", "bb", "[", "2", "]", ",", "bb", "[", "1", "]", ",", "bb", "[", "1", "]", "+", "bb", "[", "3", "]", "]", "\n", "if", "'segmentation'", "not", "in", "ann", ":", "\n", "                ", "ann", "[", "'segmentation'", "]", "=", "[", "[", "x1", ",", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "y2", ",", "x2", ",", "y1", "]", "]", "\n", "", "ann", "[", "'area'", "]", "=", "bb", "[", "2", "]", "*", "bb", "[", "3", "]", "\n", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'iscrowd'", "]", "=", "0", "\n", "", "", "elif", "'segmentation'", "in", "anns", "[", "0", "]", ":", "\n", "        ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "# now only support compressed RLE format as segmentation results", "\n", "            ", "ann", "[", "'area'", "]", "=", "maskUtils", ".", "area", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "if", "'bbox'", "not", "in", "ann", ":", "\n", "                ", "ann", "[", "'bbox'", "]", "=", "maskUtils", ".", "toBbox", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'iscrowd'", "]", "=", "0", "\n", "", "", "elif", "'keypoints'", "in", "anns", "[", "0", "]", ":", "\n", "        ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "            ", "s", "=", "ann", "[", "'keypoints'", "]", "\n", "x", "=", "s", "[", "0", ":", ":", "3", "]", "\n", "y", "=", "s", "[", "1", ":", ":", "3", "]", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "min", "(", "y", ")", ",", "np", ".", "max", "(", "y", ")", "\n", "ann", "[", "'area'", "]", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'bbox'", "]", "=", "[", "x1", ",", "y1", ",", "x2", "-", "x1", ",", "y2", "-", "y1", "]", "\n", "# print('DONE (t={:0.2f}s)'.format(time.time()- tic))", "\n", "\n", "", "", "res", ".", "dataset", "[", "'annotations'", "]", "=", "anns", "\n", "createIndex", "(", "res", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.evaluate": [[295, 341], ["list", "sorted", "coco_eval_util.._prepare", "numpy.asarray().reshape", "copy.deepcopy", "print", "numpy.unique", "list", "computeIoU", "evaluateImg", "len", "len", "len", "numpy.unique", "numpy.asarray"], "function", ["None"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Run per image evaluation on given images and store results (a list of dict) in self.evalImgs\n    :return: None\n    \"\"\"", "\n", "# tic = time.time()", "\n", "# print('Running per image evaluation...')", "\n", "p", "=", "self", ".", "params", "\n", "# add backward compatibility if useSegm is specified in params", "\n", "if", "p", ".", "useSegm", "is", "not", "None", ":", "\n", "        ", "p", ".", "iouType", "=", "'segm'", "if", "p", ".", "useSegm", "==", "1", "else", "'bbox'", "\n", "print", "(", "'useSegm (deprecated) is not None. Running {} evaluation'", ".", "format", "(", "p", ".", "iouType", ")", ")", "\n", "# print('Evaluate annotation type *{}*'.format(p.iouType))", "\n", "", "p", ".", "imgIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "imgIds", ")", ")", "\n", "if", "p", ".", "useCats", ":", "\n", "        ", "p", ".", "catIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "catIds", ")", ")", "\n", "", "p", ".", "maxDets", "=", "sorted", "(", "p", ".", "maxDets", ")", "\n", "self", ".", "params", "=", "p", "\n", "\n", "self", ".", "_prepare", "(", ")", "\n", "# loop through images, area range, max detection number", "\n", "catIds", "=", "p", ".", "catIds", "if", "p", ".", "useCats", "else", "[", "-", "1", "]", "\n", "\n", "if", "p", ".", "iouType", "==", "'segm'", "or", "p", ".", "iouType", "==", "'bbox'", ":", "\n", "        ", "computeIoU", "=", "self", ".", "computeIoU", "\n", "", "elif", "p", ".", "iouType", "==", "'keypoints'", ":", "\n", "        ", "computeIoU", "=", "self", ".", "computeOks", "\n", "", "self", ".", "ious", "=", "{", "\n", "(", "imgId", ",", "catId", ")", ":", "computeIoU", "(", "imgId", ",", "catId", ")", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "for", "catId", "in", "catIds", "}", "\n", "\n", "evaluateImg", "=", "self", ".", "evaluateImg", "\n", "maxDet", "=", "p", ".", "maxDets", "[", "-", "1", "]", "\n", "evalImgs", "=", "[", "\n", "evaluateImg", "(", "imgId", ",", "catId", ",", "areaRng", ",", "maxDet", ")", "\n", "for", "catId", "in", "catIds", "\n", "for", "areaRng", "in", "p", ".", "areaRng", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "]", "\n", "# this is NOT in the pycocotools code, but could be done outside", "\n", "evalImgs", "=", "np", ".", "asarray", "(", "evalImgs", ")", ".", "reshape", "(", "len", "(", "catIds", ")", ",", "len", "(", "p", ".", "areaRng", ")", ",", "len", "(", "p", ".", "imgIds", ")", ")", "\n", "self", ".", "_paramsEval", "=", "copy", ".", "deepcopy", "(", "self", ".", "params", ")", "\n", "# toc = time.time()", "\n", "# print('DONE (t={:0.2f}s).'.format(toc-tic))", "\n", "return", "p", ".", "imgIds", ",", "evalImgs", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.kp_connections": [[9, 28], ["keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index", "keypoints.index"], "function", ["None"], ["def", "kp_connections", "(", "keypoints", ")", ":", "\n", "    ", "kp_lines", "=", "[", "\n", "[", "keypoints", ".", "index", "(", "'left_eye'", ")", ",", "keypoints", ".", "index", "(", "'right_eye'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_eye'", ")", ",", "keypoints", ".", "index", "(", "'nose'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_eye'", ")", ",", "keypoints", ".", "index", "(", "'nose'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_eye'", ")", ",", "keypoints", ".", "index", "(", "'right_ear'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_eye'", ")", ",", "keypoints", ".", "index", "(", "'left_ear'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_shoulder'", ")", ",", "keypoints", ".", "index", "(", "'right_elbow'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_elbow'", ")", ",", "keypoints", ".", "index", "(", "'right_wrist'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_shoulder'", ")", ",", "keypoints", ".", "index", "(", "'left_elbow'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_elbow'", ")", ",", "keypoints", ".", "index", "(", "'left_wrist'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_hip'", ")", ",", "keypoints", ".", "index", "(", "'right_knee'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_knee'", ")", ",", "keypoints", ".", "index", "(", "'right_ankle'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_hip'", ")", ",", "keypoints", ".", "index", "(", "'left_knee'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'left_knee'", ")", ",", "keypoints", ".", "index", "(", "'left_ankle'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_shoulder'", ")", ",", "keypoints", ".", "index", "(", "'left_shoulder'", ")", "]", ",", "\n", "[", "keypoints", ".", "index", "(", "'right_hip'", ")", ",", "keypoints", ".", "index", "(", "'left_hip'", ")", "]", ",", "\n", "]", "\n", "return", "kp_lines", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.select_top_predictions": [[63, 69], ["predictions.items"], "function", ["None"], ["", "def", "select_top_predictions", "(", "predictions", ",", "threshold", ")", ":", "\n", "    ", "idx", "=", "(", "predictions", "[", "\"scores\"", "]", ">", "threshold", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "new_predictions", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "predictions", ".", "items", "(", ")", ":", "\n", "        ", "new_predictions", "[", "k", "]", "=", "v", "[", "idx", "]", "\n", "", "return", "new_predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.compute_colors_for_labels": [[71, 80], ["torch.tensor"], "function", ["None"], ["", "def", "compute_colors_for_labels", "(", "labels", ",", "palette", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Simple function that adds fixed colors depending on the class\n    \"\"\"", "\n", "if", "palette", "is", "None", ":", "\n", "        ", "palette", "=", "torch", ".", "tensor", "(", "[", "2", "**", "25", "-", "1", ",", "2", "**", "15", "-", "1", ",", "2", "**", "21", "-", "1", "]", ")", "\n", "", "colors", "=", "labels", "[", ":", ",", "None", "]", "*", "palette", "\n", "colors", "=", "(", "colors", "%", "255", ")", ".", "numpy", "(", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.overlay_boxes": [[82, 101], ["compute_colors_for_labels().tolist", "zip", "box.to.to", "cv2.rectangle", "visual_util.compute_colors_for_labels", "box[].tolist", "box[].tolist", "tuple", "tuple", "tuple"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.compute_colors_for_labels"], ["", "def", "overlay_boxes", "(", "image", ",", "predictions", ")", ":", "\n", "    ", "\"\"\"\n    Adds the predicted boxes on top of the image\n    Arguments:\n        image (np.ndarray): an image as returned by OpenCV\n        predictions (BoxList): the result of the computation by the model.\n            It should contain the field `labels`.\n    \"\"\"", "\n", "labels", "=", "predictions", "[", "\"labels\"", "]", "\n", "boxes", "=", "predictions", "[", "'boxes'", "]", "\n", "colors", "=", "compute_colors_for_labels", "(", "labels", ")", ".", "tolist", "(", ")", "\n", "\n", "for", "box", ",", "color", "in", "zip", "(", "boxes", ",", "colors", ")", ":", "\n", "        ", "box", "=", "box", ".", "to", "(", "torch", ".", "int64", ")", "\n", "top_left", ",", "bottom_right", "=", "box", "[", ":", "2", "]", ".", "tolist", "(", ")", ",", "box", "[", "2", ":", "]", ".", "tolist", "(", ")", "\n", "image", "=", "cv2", ".", "rectangle", "(", "\n", "image", ",", "tuple", "(", "top_left", ")", ",", "tuple", "(", "bottom_right", ")", ",", "tuple", "(", "color", ")", ",", "2", "\n", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.overlay_mask": [[103, 126], ["predictions[].ge().mul().byte().numpy", "compute_colors_for_labels().tolist", "zip", "cv2.findContours", "cv2.drawContours", "predictions[].ge().mul().byte", "visual_util.compute_colors_for_labels", "predictions[].ge().mul", "predictions[].ge"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.compute_colors_for_labels"], ["", "def", "overlay_mask", "(", "image", ",", "predictions", ")", ":", "\n", "    ", "\"\"\"\n    Adds the instances contours for each predicted object.\n    Each label has a different color.\n    Arguments:\n        image (np.ndarray): an image as returned by OpenCV\n        predictions (BoxList): the result of the computation by the model.\n            It should contain the field `mask` and `labels`.\n    \"\"\"", "\n", "masks", "=", "predictions", "[", "\"masks\"", "]", ".", "ge", "(", "0.5", ")", ".", "mul", "(", "255", ")", ".", "byte", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "predictions", "[", "\"labels\"", "]", "\n", "colors", "=", "compute_colors_for_labels", "(", "labels", ")", ".", "tolist", "(", ")", "\n", "\n", "for", "mask", ",", "color", "in", "zip", "(", "masks", ",", "colors", ")", ":", "\n", "        ", "thresh", "=", "mask", "[", "0", ",", ":", ",", ":", ",", "None", "]", "\n", "# _, contours, hierarchy = cv2.findContours(", "\n", "contours", ",", "hierarchy", "=", "cv2", ".", "findContours", "(", "\n", "thresh", ",", "cv2", ".", "RETR_TREE", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", "\n", ")", "\n", "image", "=", "cv2", ".", "drawContours", "(", "image", ",", "contours", ",", "-", "1", ",", "color", ",", "3", ")", "\n", "\n", "", "composite", "=", "image", "\n", "return", "composite", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.visualize_keypoints": [[128, 188], ["matplotlib.get_cmap", "numpy.copy", "numpy.minimum", "numpy.minimum", "dataset_keypoints.index", "range", "cv2.addWeighted", "plt.get_cmap.", "cv2.line", "cv2.line", "len", "numpy.linspace", "tuple", "tuple", "tuple", "tuple", "cv2.line", "cv2.circle", "cv2.circle", "len", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "dataset_keypoints.index", "len", "len"], "function", ["None"], ["", "def", "visualize_keypoints", "(", "img", ",", "kps", ",", "kp_thresh", "=", "2", ",", "alpha", "=", "0.7", ")", ":", "\n", "    ", "\"\"\"Visualizes keypoints (adapted from vis_one_image).\n    kps has shape (4, #keypoints) where 4 rows are (x, y, logit, prob).\n    \"\"\"", "\n", "dataset_keypoints", "=", "PersonKeypoints", ".", "NAMES", "\n", "kp_lines", "=", "PersonKeypoints", ".", "CONNECTIONS", "\n", "\n", "# Convert from plt 0-1 RGBA colors to 0-255 BGR colors for opencv.", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "'rainbow'", ")", "\n", "colors", "=", "[", "cmap", "(", "i", ")", "for", "i", "in", "np", ".", "linspace", "(", "0", ",", "1", ",", "len", "(", "kp_lines", ")", "+", "2", ")", "]", "\n", "colors", "=", "[", "(", "c", "[", "2", "]", "*", "255", ",", "c", "[", "1", "]", "*", "255", ",", "c", "[", "0", "]", "*", "255", ")", "for", "c", "in", "colors", "]", "\n", "\n", "# Perform the drawing on a copy of the image, to allow for blending.", "\n", "kp_mask", "=", "np", ".", "copy", "(", "img", ")", "\n", "\n", "# Draw mid shoulder / mid hip first for better visualization.", "\n", "mid_shoulder", "=", "(", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_shoulder'", ")", "]", "+", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_shoulder'", ")", "]", ")", "/", "2.0", "\n", "sc_mid_shoulder", "=", "np", ".", "minimum", "(", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_shoulder'", ")", "]", ",", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_shoulder'", ")", "]", ")", "\n", "mid_hip", "=", "(", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_hip'", ")", "]", "+", "\n", "kps", "[", ":", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_hip'", ")", "]", ")", "/", "2.0", "\n", "sc_mid_hip", "=", "np", ".", "minimum", "(", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'right_hip'", ")", "]", ",", "\n", "kps", "[", "2", ",", "dataset_keypoints", ".", "index", "(", "'left_hip'", ")", "]", ")", "\n", "nose_idx", "=", "dataset_keypoints", ".", "index", "(", "'nose'", ")", "\n", "if", "sc_mid_shoulder", ">", "kp_thresh", "and", "kps", "[", "2", ",", "nose_idx", "]", ">", "kp_thresh", ":", "\n", "        ", "cv2", ".", "line", "(", "\n", "kp_mask", ",", "tuple", "(", "mid_shoulder", ")", ",", "tuple", "(", "kps", "[", ":", "2", ",", "nose_idx", "]", ")", ",", "\n", "color", "=", "colors", "[", "len", "(", "kp_lines", ")", "]", ",", "thickness", "=", "2", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n", "", "if", "sc_mid_shoulder", ">", "kp_thresh", "and", "sc_mid_hip", ">", "kp_thresh", ":", "\n", "        ", "cv2", ".", "line", "(", "\n", "kp_mask", ",", "tuple", "(", "mid_shoulder", ")", ",", "tuple", "(", "mid_hip", ")", ",", "\n", "color", "=", "colors", "[", "len", "(", "kp_lines", ")", "+", "1", "]", ",", "thickness", "=", "2", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n", "# Draw the keypoints.", "\n", "", "for", "l", "in", "range", "(", "len", "(", "kp_lines", ")", ")", ":", "\n", "        ", "i1", "=", "kp_lines", "[", "l", "]", "[", "0", "]", "\n", "i2", "=", "kp_lines", "[", "l", "]", "[", "1", "]", "\n", "p1", "=", "kps", "[", "0", ",", "i1", "]", ",", "kps", "[", "1", ",", "i1", "]", "\n", "p2", "=", "kps", "[", "0", ",", "i2", "]", ",", "kps", "[", "1", ",", "i2", "]", "\n", "if", "kps", "[", "2", ",", "i1", "]", ">", "kp_thresh", "and", "kps", "[", "2", ",", "i2", "]", ">", "kp_thresh", ":", "\n", "            ", "cv2", ".", "line", "(", "\n", "kp_mask", ",", "p1", ",", "p2", ",", "\n", "color", "=", "colors", "[", "l", "]", ",", "thickness", "=", "2", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "if", "kps", "[", "2", ",", "i1", "]", ">", "kp_thresh", ":", "\n", "            ", "cv2", ".", "circle", "(", "\n", "kp_mask", ",", "p1", ",", "\n", "radius", "=", "3", ",", "color", "=", "colors", "[", "l", "]", ",", "thickness", "=", "-", "1", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "", "if", "kps", "[", "2", ",", "i2", "]", ">", "kp_thresh", ":", "\n", "            ", "cv2", ".", "circle", "(", "\n", "kp_mask", ",", "p2", ",", "\n", "radius", "=", "3", ",", "color", "=", "colors", "[", "l", "]", ",", "thickness", "=", "-", "1", ",", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n", "# Blend the keypoints.", "\n", "", "", "return", "cv2", ".", "addWeighted", "(", "img", ",", "1.0", "-", "alpha", ",", "kp_mask", ",", "alpha", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.overlay_keypoints": [[190, 197], ["torch.cat().numpy", "visual_util.visualize_keypoints", "torch.cat", "region.transpose"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.visualize_keypoints"], ["", "def", "overlay_keypoints", "(", "image", ",", "predictions", ")", ":", "\n", "    ", "kps", "=", "predictions", "[", "\"keypoints\"", "]", "\n", "scores", "=", "predictions", "[", "\"keypoints_scores\"", "]", "\n", "kps", "=", "torch", ".", "cat", "(", "(", "kps", "[", ":", ",", ":", ",", "0", ":", "2", "]", ",", "scores", "[", ":", ",", ":", ",", "None", "]", ")", ",", "dim", "=", "2", ")", ".", "numpy", "(", ")", "\n", "for", "region", "in", "kps", ":", "\n", "        ", "image", "=", "visualize_keypoints", "(", "image", ",", "region", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.overlay_class_names": [[293, 316], ["predictions[].tolist", "predictions[].tolist", "zip", "template.format", "cv2.putText"], "function", ["None"], ["def", "overlay_class_names", "(", "image", ",", "predictions", ")", ":", "\n", "    ", "\"\"\"\n    Adds detected class names and scores in the positions defined by the\n    top-left corner of the predicted bounding box\n    Arguments:\n        image (np.ndarray): an image as returned by OpenCV\n        predictions (BoxList): the result of the computation by the model.\n            It should contain the field `scores` and `labels`.\n    \"\"\"", "\n", "scores", "=", "predictions", "[", "\"scores\"", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "predictions", "[", "\"labels\"", "]", ".", "tolist", "(", ")", "\n", "labels", "=", "[", "CATEGORIES", "[", "i", "]", "for", "i", "in", "labels", "]", "\n", "boxes", "=", "predictions", "[", "'boxes'", "]", "\n", "\n", "template", "=", "\"{}: {:.2f}\"", "\n", "for", "box", ",", "score", ",", "label", "in", "zip", "(", "boxes", ",", "scores", ",", "labels", ")", ":", "\n", "        ", "x", ",", "y", "=", "box", "[", ":", "2", "]", "\n", "s", "=", "template", ".", "format", "(", "label", ",", "score", ")", "\n", "cv2", ".", "putText", "(", "\n", "image", ",", "s", ",", "(", "x", ",", "y", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", ".5", ",", "(", "255", ",", "255", ",", "255", ")", ",", "1", "\n", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.predict": [[318, 333], ["torchvision.transforms.functional.to_tensor().to", "visual_util.select_top_predictions", "cv_img.copy", "visual_util.overlay_boxes", "visual_util.overlay_class_names", "numpy.array", "torch.no_grad", "model", "v.cpu", "visual_util.overlay_mask", "visual_util.overlay_keypoints", "torchvision.transforms.functional.to_tensor", "select_top_predictions.items"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.select_top_predictions", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.overlay_boxes", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.overlay_class_names", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.overlay_mask", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.visual_util.overlay_keypoints"], ["", "def", "predict", "(", "model", ",", "img", ",", "device", ")", ":", "\n", "    ", "cv_img", "=", "np", ".", "array", "(", "img", ")", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "img_tensor", "=", "torchvision", ".", "transforms", ".", "functional", ".", "to_tensor", "(", "img", ")", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "output", "=", "model", "(", "[", "img_tensor", "]", ")", "\n", "", "top_predictions", "=", "select_top_predictions", "(", "output", "[", "0", "]", ",", "0.7", ")", "\n", "top_predictions", "=", "{", "k", ":", "v", ".", "cpu", "(", ")", "for", "k", ",", "v", "in", "top_predictions", ".", "items", "(", ")", "}", "\n", "result", "=", "cv_img", ".", "copy", "(", ")", "\n", "result", "=", "overlay_boxes", "(", "result", ",", "top_predictions", ")", "\n", "if", "'masks'", "in", "top_predictions", ":", "\n", "        ", "result", "=", "overlay_mask", "(", "result", ",", "top_predictions", ")", "\n", "", "if", "'keypoints'", "in", "top_predictions", ":", "\n", "        ", "result", "=", "overlay_keypoints", "(", "result", ",", "top_predictions", ")", "\n", "", "result", "=", "overlay_class_names", "(", "result", ",", "top_predictions", ")", "\n", "return", "result", ",", "output", ",", "top_predictions", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.FilterAndRemapCocoCategories.__init__": [[16, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "categories", ",", "remap", "=", "True", ")", ":", "\n", "        ", "self", ".", "categories", "=", "categories", "\n", "self", ".", "remap", "=", "remap", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.FilterAndRemapCocoCategories.__call__": [[20, 31], ["copy.deepcopy", "coco_util.FilterAndRemapCocoCategories.categories.index"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "anno", "=", "target", "[", "'annotations'", "]", "\n", "anno", "=", "[", "obj", "for", "obj", "in", "anno", "if", "obj", "[", "'category_id'", "]", "in", "self", ".", "categories", "]", "\n", "if", "not", "self", ".", "remap", ":", "\n", "            ", "target", "[", "'annotations'", "]", "=", "anno", "\n", "return", "image", ",", "target", "\n", "", "anno", "=", "copy", ".", "deepcopy", "(", "anno", ")", "\n", "for", "obj", "in", "anno", ":", "\n", "            ", "obj", "[", "'category_id'", "]", "=", "self", ".", "categories", ".", "index", "(", "obj", "[", "'category_id'", "]", ")", "\n", "", "target", "[", "'annotations'", "]", "=", "anno", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.ConvertCocoPolysToMask.__call__": [[51, 104], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "torch.as_tensor().reshape", "boxes[].clamp_", "boxes[].clamp_", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "coco_util.convert_coco_poly_to_mask", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "keypoints.view.view.view"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.convert_coco_poly_to_mask"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "w", ",", "h", "=", "image", ".", "size", "\n", "\n", "image_id", "=", "target", "[", "'image_id'", "]", "\n", "image_id", "=", "torch", ".", "tensor", "(", "[", "image_id", "]", ")", "\n", "\n", "anno", "=", "target", "[", "'annotations'", "]", "\n", "\n", "anno", "=", "[", "obj", "for", "obj", "in", "anno", "if", "obj", "[", "'iscrowd'", "]", "==", "0", "]", "\n", "\n", "boxes", "=", "[", "obj", "[", "'bbox'", "]", "for", "obj", "in", "anno", "]", "\n", "# guard against no boxes via resizing", "\n", "boxes", "=", "torch", ".", "as_tensor", "(", "boxes", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "boxes", "[", ":", ",", "2", ":", "]", "+=", "boxes", "[", ":", ",", ":", "2", "]", "\n", "boxes", "[", ":", ",", "0", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "w", ")", "\n", "boxes", "[", ":", ",", "1", ":", ":", "2", "]", ".", "clamp_", "(", "min", "=", "0", ",", "max", "=", "h", ")", "\n", "\n", "classes", "=", "[", "obj", "[", "'category_id'", "]", "for", "obj", "in", "anno", "]", "\n", "classes", "=", "torch", ".", "tensor", "(", "classes", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "segmentations", "=", "[", "obj", "[", "'segmentation'", "]", "for", "obj", "in", "anno", "]", "\n", "masks", "=", "convert_coco_poly_to_mask", "(", "segmentations", ",", "h", ",", "w", ")", "\n", "\n", "keypoints", "=", "None", "\n", "if", "anno", "and", "'keypoints'", "in", "anno", "[", "0", "]", ":", "\n", "            ", "keypoints", "=", "[", "obj", "[", "'keypoints'", "]", "for", "obj", "in", "anno", "]", "\n", "keypoints", "=", "torch", ".", "as_tensor", "(", "keypoints", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "num_keypoints", "=", "keypoints", ".", "shape", "[", "0", "]", "\n", "if", "num_keypoints", ":", "\n", "                ", "keypoints", "=", "keypoints", ".", "view", "(", "num_keypoints", ",", "-", "1", ",", "3", ")", "\n", "\n", "", "", "keep", "=", "(", "boxes", "[", ":", ",", "3", "]", ">", "boxes", "[", ":", ",", "1", "]", ")", "&", "(", "boxes", "[", ":", ",", "2", "]", ">", "boxes", "[", ":", ",", "0", "]", ")", "\n", "boxes", "=", "boxes", "[", "keep", "]", "\n", "classes", "=", "classes", "[", "keep", "]", "\n", "masks", "=", "masks", "[", "keep", "]", "\n", "if", "keypoints", "is", "not", "None", ":", "\n", "            ", "keypoints", "=", "keypoints", "[", "keep", "]", "\n", "\n", "", "target", "=", "{", "}", "\n", "target", "[", "'boxes'", "]", "=", "boxes", "\n", "target", "[", "'labels'", "]", "=", "classes", "\n", "target", "[", "'masks'", "]", "=", "masks", "\n", "target", "[", "'image_id'", "]", "=", "image_id", "\n", "if", "keypoints", "is", "not", "None", ":", "\n", "            ", "target", "[", "'keypoints'", "]", "=", "keypoints", "\n", "\n", "# for conversion to coco api", "\n", "", "area", "=", "torch", ".", "tensor", "(", "[", "obj", "[", "'area'", "]", "for", "obj", "in", "anno", "]", ")", "\n", "iscrowd", "=", "torch", ".", "tensor", "(", "[", "obj", "[", "'iscrowd'", "]", "for", "obj", "in", "anno", "]", ")", "\n", "target", "[", "'area'", "]", "=", "area", "\n", "target", "[", "'iscrowd'", "]", "=", "iscrowd", "\n", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.ExtCocoDetection.__init__": [[211, 215], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_folder", ",", "ann_file", ",", "transforms", ",", "jpeg_quality", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "img_folder", ",", "ann_file", ")", "\n", "self", ".", "additional_transforms", "=", "transforms", "\n", "self", ".", "jpeg_quality", "=", "jpeg_quality", "if", "jpeg_quality", "is", "not", "None", "and", "1", "<=", "jpeg_quality", "<=", "95", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.ExtCocoDetection.__getitem__": [[216, 236], ["coco.getAnnIds", "coco.loadAnns", "PIL.Image.open().convert", "dict", "io.BytesIO", "PIL.Image.open.save", "PIL.Image.open", "coco_util.ExtCocoDetection.transforms", "coco_util.ExtCocoDetection.additional_transforms", "coco.loadImgs", "PIL.Image.open", "os.path.join"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "coco", "=", "self", ".", "coco", "\n", "img_id", "=", "self", ".", "ids", "[", "index", "]", "\n", "ann_ids", "=", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", "\n", "target", "=", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "path", "=", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "[", "'file_name'", "]", "\n", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "path", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "jpeg_quality", "is", "not", "None", ":", "\n", "            ", "img_buffer", "=", "BytesIO", "(", ")", "\n", "img", ".", "save", "(", "img_buffer", ",", "'JPEG'", ",", "quality", "=", "self", ".", "jpeg_quality", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_buffer", ")", "\n", "\n", "", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "\n", "", "image_id", "=", "self", ".", "ids", "[", "index", "]", "\n", "target", "=", "dict", "(", "image_id", "=", "image_id", ",", "annotations", "=", "target", ")", "\n", "if", "self", ".", "additional_transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "additional_transforms", "(", "img", ",", "target", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.convert_coco_poly_to_mask": [[33, 48], ["pycocotools.mask.frPyObjects", "pycocotools.mask.decode", "torch.as_tensor", "torch.as_tensor", "mask.any.any", "torch.zeros.append", "torch.stack", "torch.stack", "torch.zeros", "torch.zeros", "len"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.BlockDecoder.decode"], ["", "", "def", "convert_coco_poly_to_mask", "(", "segmentations", ",", "height", ",", "width", ")", ":", "\n", "    ", "masks", "=", "[", "]", "\n", "for", "polygons", "in", "segmentations", ":", "\n", "        ", "rles", "=", "coco_mask", ".", "frPyObjects", "(", "polygons", ",", "height", ",", "width", ")", "\n", "mask", "=", "coco_mask", ".", "decode", "(", "rles", ")", "\n", "if", "len", "(", "mask", ".", "shape", ")", "<", "3", ":", "\n", "            ", "mask", "=", "mask", "[", "...", ",", "None", "]", "\n", "", "mask", "=", "torch", ".", "as_tensor", "(", "mask", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "mask", "=", "mask", ".", "any", "(", "dim", "=", "2", ")", "\n", "masks", ".", "append", "(", "mask", ")", "\n", "", "if", "masks", ":", "\n", "        ", "masks", "=", "torch", ".", "stack", "(", "masks", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "masks", "=", "torch", ".", "zeros", "(", "(", "0", ",", "height", ",", "width", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.has_only_empty_bbox": [[106, 108], ["all", "any"], "function", ["None"], ["", "", "def", "has_only_empty_bbox", "(", "anno", ")", ":", "\n", "    ", "return", "all", "(", "any", "(", "o", "<=", "1", "for", "o", "in", "obj", "[", "'bbox'", "]", "[", "2", ":", "]", ")", "for", "obj", "in", "anno", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.count_visible_keypoints": [[110, 112], ["sum", "sum"], "function", ["None"], ["", "def", "count_visible_keypoints", "(", "anno", ")", ":", "\n", "    ", "return", "sum", "(", "sum", "(", "1", "for", "v", "in", "ann", "[", "'keypoints'", "]", "[", "2", ":", ":", "3", "]", "if", "v", ">", "0", ")", "for", "ann", "in", "anno", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.has_valid_annotation": [[114, 130], ["coco_util.has_only_empty_bbox", "len", "coco_util.count_visible_keypoints"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.has_only_empty_bbox", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.count_visible_keypoints"], ["", "def", "has_valid_annotation", "(", "anno", ",", "min_keypoints_per_image", "=", "10", ")", ":", "\n", "# if it's empty, there is no annotation", "\n", "    ", "if", "len", "(", "anno", ")", "==", "0", ":", "\n", "        ", "return", "False", "\n", "# if all boxes have close to zero area, there is no annotation", "\n", "", "if", "has_only_empty_bbox", "(", "anno", ")", ":", "\n", "        ", "return", "False", "\n", "# keypoints task have a slight different criteria for considering", "\n", "# if an annotation is valid", "\n", "", "if", "'keypoints'", "not", "in", "anno", "[", "0", "]", ":", "\n", "        ", "return", "True", "\n", "# for keypoint detection tasks, only consider valid images those", "\n", "# containing at least min_keypoints_per_image", "\n", "", "if", "count_visible_keypoints", "(", "anno", ")", ">=", "min_keypoints_per_image", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.remove_images_without_annotations": [[132, 145], ["isinstance", "enumerate", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset.coco.getAnnIds", "torch.utils.data.Subset.coco.loadAnns", "coco_util.has_valid_annotation", "ids.append"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.has_valid_annotation"], ["", "def", "remove_images_without_annotations", "(", "dataset", ",", "cat_list", "=", "None", ")", ":", "\n", "    ", "assert", "isinstance", "(", "dataset", ",", "torchvision", ".", "datasets", ".", "CocoDetection", ")", "\n", "ids", "=", "[", "]", "\n", "for", "ds_idx", ",", "img_id", "in", "enumerate", "(", "dataset", ".", "ids", ")", ":", "\n", "        ", "ann_ids", "=", "dataset", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ",", "iscrowd", "=", "None", ")", "\n", "anno", "=", "dataset", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "if", "cat_list", ":", "\n", "            ", "anno", "=", "[", "obj", "for", "obj", "in", "anno", "if", "obj", "[", "'category_id'", "]", "in", "cat_list", "]", "\n", "", "if", "has_valid_annotation", "(", "anno", ")", ":", "\n", "            ", "ids", ".", "append", "(", "ds_idx", ")", "\n", "\n", "", "", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "dataset", ",", "ids", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.convert_to_coco_api": [[147, 197], ["pycocotools.coco.COCO", "set", "range", "pycocotools.coco.COCO.createIndex", "len", "targets[].item", "dataset[].append", "bboxes.tolist.tolist", "targets[].tolist", "targets[].tolist", "targets[].tolist", "len", "range", "masks.permute().contiguous().permute.permute().contiguous().permute", "keypoints.reshape().tolist.reshape().tolist", "set.add", "dataset[].append", "sorted", "pycocotools.mask.encode", "sum", "masks.permute().contiguous().permute.permute().contiguous", "keypoints.reshape().tolist.reshape", "masks[].numpy", "masks.permute().contiguous().permute.permute"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.createIndex", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.BlockDecoder.encode"], ["", "def", "convert_to_coco_api", "(", "ds", ")", ":", "\n", "    ", "coco_ds", "=", "COCO", "(", ")", "\n", "# annotation IDs need to start at 1, not 0, see torchvision issue #1530", "\n", "ann_id", "=", "1", "\n", "dataset", "=", "{", "'images'", ":", "[", "]", ",", "'categories'", ":", "[", "]", ",", "'annotations'", ":", "[", "]", "}", "\n", "categories", "=", "set", "(", ")", "\n", "for", "img_idx", "in", "range", "(", "len", "(", "ds", ")", ")", ":", "\n", "# find better way to get target", "\n", "# targets = ds.get_annotations(img_idx)", "\n", "        ", "img", ",", "targets", "=", "ds", "[", "img_idx", "]", "\n", "image_id", "=", "targets", "[", "'image_id'", "]", ".", "item", "(", ")", "\n", "img_dict", "=", "{", "}", "\n", "img_dict", "[", "'id'", "]", "=", "image_id", "\n", "img_dict", "[", "'height'", "]", "=", "img", ".", "shape", "[", "-", "2", "]", "\n", "img_dict", "[", "'width'", "]", "=", "img", ".", "shape", "[", "-", "1", "]", "\n", "dataset", "[", "'images'", "]", ".", "append", "(", "img_dict", ")", "\n", "bboxes", "=", "targets", "[", "'boxes'", "]", "\n", "bboxes", "[", ":", ",", "2", ":", "]", "-=", "bboxes", "[", ":", ",", ":", "2", "]", "\n", "bboxes", "=", "bboxes", ".", "tolist", "(", ")", "\n", "labels", "=", "targets", "[", "'labels'", "]", ".", "tolist", "(", ")", "\n", "areas", "=", "targets", "[", "'area'", "]", ".", "tolist", "(", ")", "\n", "iscrowd", "=", "targets", "[", "'iscrowd'", "]", ".", "tolist", "(", ")", "\n", "if", "'masks'", "in", "targets", ":", "\n", "            ", "masks", "=", "targets", "[", "'masks'", "]", "\n", "# make masks Fortran contiguous for coco_mask", "\n", "masks", "=", "masks", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "if", "'keypoints'", "in", "targets", ":", "\n", "            ", "keypoints", "=", "targets", "[", "'keypoints'", "]", "\n", "keypoints", "=", "keypoints", ".", "reshape", "(", "keypoints", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "tolist", "(", ")", "\n", "", "num_objs", "=", "len", "(", "bboxes", ")", "\n", "for", "i", "in", "range", "(", "num_objs", ")", ":", "\n", "            ", "ann", "=", "{", "}", "\n", "ann", "[", "'image_id'", "]", "=", "image_id", "\n", "ann", "[", "'bbox'", "]", "=", "bboxes", "[", "i", "]", "\n", "ann", "[", "'category_id'", "]", "=", "labels", "[", "i", "]", "\n", "categories", ".", "add", "(", "labels", "[", "i", "]", ")", "\n", "ann", "[", "'area'", "]", "=", "areas", "[", "i", "]", "\n", "ann", "[", "'iscrowd'", "]", "=", "iscrowd", "[", "i", "]", "\n", "ann", "[", "'id'", "]", "=", "ann_id", "\n", "if", "'masks'", "in", "targets", ":", "\n", "                ", "ann", "[", "'segmentation'", "]", "=", "coco_mask", ".", "encode", "(", "masks", "[", "i", "]", ".", "numpy", "(", ")", ")", "\n", "", "if", "'keypoints'", "in", "targets", ":", "\n", "                ", "ann", "[", "'keypoints'", "]", "=", "keypoints", "[", "i", "]", "\n", "ann", "[", "'num_keypoints'", "]", "=", "sum", "(", "k", "!=", "0", "for", "k", "in", "keypoints", "[", "i", "]", "[", "2", ":", ":", "3", "]", ")", "\n", "", "dataset", "[", "'annotations'", "]", ".", "append", "(", "ann", ")", "\n", "ann_id", "+=", "1", "\n", "", "", "dataset", "[", "'categories'", "]", "=", "[", "{", "'id'", ":", "i", "}", "for", "i", "in", "sorted", "(", "categories", ")", "]", "\n", "coco_ds", ".", "dataset", "=", "dataset", "\n", "coco_ds", ".", "createIndex", "(", ")", "\n", "return", "coco_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.get_coco_api_from_dataset": [[199, 208], ["range", "isinstance", "coco_util.convert_to_coco_api", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.convert_to_coco_api"], ["", "def", "get_coco_api_from_dataset", "(", "dataset", ")", ":", "\n", "    ", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "if", "isinstance", "(", "dataset", ",", "torchvision", ".", "datasets", ".", "CocoDetection", ")", ":", "\n", "            ", "break", "\n", "", "if", "isinstance", "(", "dataset", ",", "torch", ".", "utils", ".", "data", ".", "Subset", ")", ":", "\n", "            ", "dataset", "=", "dataset", ".", "dataset", "\n", "", "", "if", "isinstance", "(", "dataset", ",", "torchvision", ".", "datasets", ".", "CocoDetection", ")", ":", "\n", "        ", "return", "dataset", ".", "coco", "\n", "", "return", "convert_to_coco_api", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.get_coco": [[238, 249], ["structure.transformer.Compose", "coco_util.ExtCocoDetection", "coco_util.ConvertCocoPolysToMask", "t.append", "os.path.expanduser", "os.path.expanduser", "coco_util.remove_images_without_annotations"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.remove_images_without_annotations"], ["", "", "def", "get_coco", "(", "img_dir_path", ",", "ann_file_path", ",", "transforms", ",", "remove_non_annotated_imgs", ",", "jpeg_quality", "=", "None", ")", ":", "\n", "    ", "t", "=", "[", "ConvertCocoPolysToMask", "(", ")", "]", "\n", "if", "transforms", "is", "not", "None", ":", "\n", "        ", "t", ".", "append", "(", "transforms", ")", "\n", "\n", "", "transforms", "=", "Compose", "(", "t", ")", "\n", "dataset", "=", "ExtCocoDetection", "(", "os", ".", "path", ".", "expanduser", "(", "img_dir_path", ")", ",", "os", ".", "path", ".", "expanduser", "(", "ann_file_path", ")", ",", "\n", "transforms", "=", "transforms", ",", "jpeg_quality", "=", "jpeg_quality", ")", "\n", "if", "remove_non_annotated_imgs", ":", "\n", "        ", "dataset", "=", "remove_images_without_annotations", "(", "dataset", ")", "\n", "", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.overwrite_dict": [[14, 23], ["sub_dict.items", "isinstance", "main_util.overwrite_dict"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.overwrite_dict"], ["def", "overwrite_dict", "(", "org_dict", ",", "sub_dict", ")", ":", "\n", "    ", "for", "sub_key", ",", "sub_value", "in", "sub_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "sub_key", "in", "org_dict", ":", "\n", "            ", "if", "isinstance", "(", "sub_value", ",", "dict", ")", ":", "\n", "                ", "overwrite_dict", "(", "org_dict", "[", "sub_key", "]", ",", "sub_value", ")", "\n", "", "else", ":", "\n", "                ", "org_dict", "[", "sub_key", "]", "=", "sub_value", "\n", "", "", "else", ":", "\n", "            ", "org_dict", "[", "sub_key", "]", "=", "sub_value", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.overwrite_config": [[25, 27], ["main_util.overwrite_dict", "json.loads"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.overwrite_dict"], ["", "", "", "def", "overwrite_config", "(", "config", ",", "json_str", ")", ":", "\n", "    ", "overwrite_dict", "(", "config", ",", "json", ".", "loads", "(", "json_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.setup_for_distributed": [[29, 41], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.init_distributed_mode": [[43, 63], ["torch.cuda.set_device", "main_util.setup_for_distributed.print", "torch.distributed.init_process_group", "torch.distributed.barrier", "main_util.setup_for_distributed", "int", "int", "int", "int", "main_util.setup_for_distributed.print", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.setup_for_distributed"], ["", "def", "init_distributed_mode", "(", "world_size", "=", "1", ",", "dist_url", "=", "'env://'", ")", ":", "\n", "    ", "if", "'RANK'", "in", "os", ".", "environ", "and", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "device_id", "=", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "device_id", "=", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not using distributed mode'", ")", "\n", "return", "False", ",", "None", "\n", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "device_id", ")", "\n", "dist_backend", "=", "'nccl'", "\n", "print", "(", "'| distributed init (rank {}): {}'", ".", "format", "(", "rank", ",", "dist_url", ")", ",", "flush", "=", "True", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "dist_backend", ",", "init_method", "=", "dist_url", ",", "\n", "world_size", "=", "world_size", ",", "rank", "=", "rank", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "rank", "==", "0", ")", "\n", "return", "True", ",", "[", "device_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.warmup_lr_scheduler": [[65, 73], ["torch.optim.lr_scheduler.LambdaLR", "float"], "function", ["None"], ["", "def", "warmup_lr_scheduler", "(", "optimizer", ",", "warmup_iters", ",", "warmup_factor", ")", ":", "\n", "    ", "def", "f", "(", "x", ")", ":", "\n", "        ", "if", "x", ">=", "warmup_iters", ":", "\n", "            ", "return", "1", "\n", "", "alpha", "=", "float", "(", "x", ")", "/", "warmup_iters", "\n", "return", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "\n", "", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.main_util.evaluate": [[75, 119], ["torch.no_grad", "torch.get_num_threads", "torch.set_num_threads", "torch.device", "model.eval", "utils.misc_util.MetricLogger", "utils.coco_util.get_coco_api_from_dataset", "models.get_iou_types", "utils.coco_eval_util.CocoEvaluator", "enumerate", "misc_util.MetricLogger.synchronize_between_processes", "utils.coco_eval_util.CocoEvaluator.synchronize_between_processes", "utils.coco_eval_util.CocoEvaluator.accumulate", "utils.coco_eval_util.CocoEvaluator.summarize", "torch.set_num_threads", "misc_util.MetricLogger.log_every", "list", "torch.cuda.synchronize", "time.time", "model", "time.time", "utils.coco_eval_util.CocoEvaluator.update", "misc_util.MetricLogger.update", "time.time", "target[].item", "time.time", "img.to", "v.to", "v.to", "zip", "t.items", "t.items"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_util.get_coco_api_from_dataset", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.get_iou_types", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.synchronize_between_processes", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.synchronize_between_processes", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.accumulate", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.summarize", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.MetricLogger.log_every", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "model", ",", "data_loader", ",", "device", ")", ":", "\n", "    ", "n_threads", "=", "torch", ".", "get_num_threads", "(", ")", "\n", "# FIXME remove this and make paste_masks_in_image run on the GPU", "\n", "torch", ".", "set_num_threads", "(", "1", ")", "\n", "cpu_device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "metric_logger", "=", "misc_util", ".", "MetricLogger", "(", "delimiter", "=", "'  '", ")", "\n", "header", "=", "'Test:'", "\n", "coco", "=", "get_coco_api_from_dataset", "(", "data_loader", ".", "dataset", ")", "\n", "iou_types", "=", "get_iou_types", "(", "model", ")", "\n", "coco_evaluator", "=", "CocoEvaluator", "(", "coco", ",", "iou_types", ")", "\n", "for", "id", ",", "(", "image", ",", "targets", ")", "in", "enumerate", "(", "metric_logger", ".", "log_every", "(", "data_loader", ",", "100", ",", "header", ")", ")", ":", "\n", "        ", "image", "=", "list", "(", "img", ".", "to", "(", "device", ")", "for", "img", "in", "image", ")", "\n", "targets", "=", "[", "{", "k", ":", "v", ".", "to", "(", "device", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "for", "t", "in", "targets", "]", "\n", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "model_time", "=", "time", ".", "time", "(", ")", "\n", "outputs", "=", "model", "(", "image", ")", "\n", "outputs", "=", "[", "{", "k", ":", "v", ".", "to", "(", "cpu_device", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "for", "t", "in", "outputs", "]", "\n", "model_time", "=", "time", ".", "time", "(", ")", "-", "model_time", "\n", "\n", "# print(targets, outputs)", "\n", "res", "=", "{", "target", "[", "'image_id'", "]", ".", "item", "(", ")", ":", "output", "for", "target", ",", "output", "in", "zip", "(", "targets", ",", "outputs", ")", "}", "\n", "evaluator_time", "=", "time", ".", "time", "(", ")", "\n", "coco_evaluator", ".", "update", "(", "res", ")", "\n", "evaluator_time", "=", "time", ".", "time", "(", ")", "-", "evaluator_time", "\n", "metric_logger", ".", "update", "(", "model_time", "=", "model_time", ",", "evaluator_time", "=", "evaluator_time", ")", "\n", "# exit()", "\n", "#", "\n", "# if id > 30:", "\n", "#     break", "\n", "\n", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "# print('Averaged stats:', metric_logger)", "\n", "coco_evaluator", ".", "synchronize_between_processes", "(", ")", "\n", "\n", "# accumulate predictions from all images", "\n", "coco_evaluator", ".", "accumulate", "(", ")", "\n", "coco_evaluator", ".", "summarize", "(", ")", "\n", "torch", ".", "set_num_threads", "(", "n_threads", ")", "\n", "return", "coco_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.CustomDataParallel.__init__": [[201, 204], ["torch.nn.DataParallel.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["def", "__init__", "(", "self", ",", "module", ",", "num_gpus", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "module", ")", "\n", "self", ".", "num_gpus", "=", "num_gpus", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.CustomDataParallel.scatter": [[205, 218], ["Exception", "str", "range", "len", "[].to", "[].to", "range", "len"], "methods", ["None"], ["", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "# More like scatter and data prep at the same time. The point is we prep the data in such a way", "\n", "# that no scatter is necessary, and there's no need to shuffle stuff around different GPUs.", "\n", "        ", "devices", "=", "[", "'cuda:'", "+", "str", "(", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_gpus", ")", "]", "\n", "splits", "=", "inputs", "[", "0", "]", ".", "shape", "[", "0", "]", "//", "self", ".", "num_gpus", "\n", "\n", "if", "splits", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "'Batchsize must be greater than num_gpus.'", ")", "\n", "\n", "", "return", "[", "(", "inputs", "[", "0", "]", "[", "splits", "*", "device_idx", ":", "splits", "*", "(", "device_idx", "+", "1", ")", "]", ".", "to", "(", "f'cuda:{device_idx}'", ",", "non_blocking", "=", "True", ")", ",", "\n", "inputs", "[", "1", "]", "[", "splits", "*", "device_idx", ":", "splits", "*", "(", "device_idx", "+", "1", ")", "]", ".", "to", "(", "f'cuda:{device_idx}'", ",", "non_blocking", "=", "True", ")", ")", "\n", "for", "device_idx", "in", "range", "(", "len", "(", "devices", ")", ")", "]", ",", "[", "kwargs", "]", "*", "len", "(", "devices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.freeze_batch_norm": [[21, 25], ["model.modules", "isinstance", "m.eval"], "function", ["None"], ["def", "freeze_batch_norm", "(", "model", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "            ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.invert_affine": [[26, 39], ["range", "len", "len"], "function", ["None"], ["", "", "", "def", "invert_affine", "(", "metas", ":", "Union", "[", "float", ",", "list", ",", "tuple", "]", ",", "preds", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "preds", ")", ")", ":", "\n", "        ", "if", "len", "(", "preds", "[", "i", "]", "[", "'rois'", "]", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "if", "metas", "is", "float", ":", "\n", "                ", "preds", "[", "i", "]", "[", "'rois'", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "preds", "[", "i", "]", "[", "'rois'", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "/", "metas", "\n", "preds", "[", "i", "]", "[", "'rois'", "]", "[", ":", ",", "[", "1", ",", "3", "]", "]", "=", "preds", "[", "i", "]", "[", "'rois'", "]", "[", ":", ",", "[", "1", ",", "3", "]", "]", "/", "metas", "\n", "", "else", ":", "\n", "                ", "new_w", ",", "new_h", ",", "old_w", ",", "old_h", ",", "padding_w", ",", "padding_h", "=", "metas", "[", "i", "]", "\n", "preds", "[", "i", "]", "[", "'rois'", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "preds", "[", "i", "]", "[", "'rois'", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "/", "(", "new_w", "/", "old_w", ")", "\n", "preds", "[", "i", "]", "[", "'rois'", "]", "[", ":", ",", "[", "1", ",", "3", "]", "]", "=", "preds", "[", "i", "]", "[", "'rois'", "]", "[", ":", ",", "[", "1", ",", "3", "]", "]", "/", "(", "new_h", "/", "old_h", ")", "\n", "", "", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.aspectaware_resize_padding": [[41, 72], ["numpy.zeros", "int", "int", "cv2.resize", "cv2.resize", "len"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.CustomRCNNTransform.resize", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.CustomRCNNTransform.resize"], ["", "def", "aspectaware_resize_padding", "(", "image", ",", "width", ",", "height", ",", "interpolation", "=", "None", ",", "means", "=", "None", ")", ":", "\n", "    ", "old_h", ",", "old_w", ",", "c", "=", "image", ".", "shape", "\n", "if", "old_w", ">", "old_h", ":", "\n", "        ", "new_w", "=", "width", "\n", "new_h", "=", "int", "(", "width", "/", "old_w", "*", "old_h", ")", "\n", "", "else", ":", "\n", "        ", "new_w", "=", "int", "(", "height", "/", "old_h", "*", "old_w", ")", "\n", "new_h", "=", "height", "\n", "\n", "", "canvas", "=", "np", ".", "zeros", "(", "(", "height", ",", "height", ",", "c", ")", ",", "np", ".", "float32", ")", "\n", "if", "means", "is", "not", "None", ":", "\n", "        ", "canvas", "[", "...", "]", "=", "means", "\n", "\n", "", "if", "new_w", "!=", "old_w", "or", "new_h", "!=", "old_h", ":", "\n", "        ", "if", "interpolation", "is", "None", ":", "\n", "            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "new_w", ",", "new_h", ")", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "new_w", ",", "new_h", ")", ",", "interpolation", "=", "interpolation", ")", "\n", "\n", "", "", "padding_h", "=", "height", "-", "new_h", "\n", "padding_w", "=", "width", "-", "new_w", "\n", "\n", "if", "c", ">", "1", ":", "\n", "        ", "canvas", "[", ":", "new_h", ",", ":", "new_w", "]", "=", "image", "\n", "", "else", ":", "\n", "        ", "if", "len", "(", "image", ".", "shape", ")", "==", "2", ":", "\n", "            ", "canvas", "[", ":", "new_h", ",", ":", "new_w", ",", "0", "]", "=", "image", "\n", "", "else", ":", "\n", "            ", "canvas", "[", ":", "new_h", ",", ":", "new_w", "]", "=", "image", "\n", "\n", "", "", "return", "canvas", ",", "new_w", ",", "new_h", ",", "old_w", ",", "old_h", ",", "padding_w", ",", "padding_h", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.preprocess": [[74, 88], ["img.permute().cpu().numpy", "utils.aspectaware_resize_padding", "img.permute().cpu", "img.permute"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.aspectaware_resize_padding"], ["", "def", "preprocess", "(", "ori_imgs", ",", "max_size", "=", "512", ",", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "\n", "# print(ori_imgs[0].permute(1, 2, 0).cpu().numpy())", "\n", "# print(ori_imgs[0].permute(1, 2, 0).cpu().numpy().shape)", "\n", "    ", "ori_imgs", "=", "[", "img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "img", "in", "ori_imgs", "]", "\n", "ori_imgs", "=", "[", "255", "*", "img", "[", "...", ",", ":", ":", "-", "1", "]", "for", "img", "in", "ori_imgs", "]", "\n", "\n", "normalized_imgs", "=", "[", "(", "img", "[", "...", ",", ":", ":", "-", "1", "]", "/", "255", "-", "mean", ")", "/", "std", "for", "img", "in", "ori_imgs", "]", "\n", "imgs_meta", "=", "[", "aspectaware_resize_padding", "(", "img", ",", "max_size", ",", "max_size", ",", "\n", "means", "=", "None", ")", "for", "img", "in", "normalized_imgs", "]", "\n", "framed_imgs", "=", "[", "img_meta", "[", "0", "]", "for", "img_meta", "in", "imgs_meta", "]", "\n", "framed_metas", "=", "[", "img_meta", "[", "1", ":", "]", "for", "img_meta", "in", "imgs_meta", "]", "\n", "\n", "return", "ori_imgs", ",", "framed_imgs", ",", "framed_metas", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.preprocess_video": [[90, 99], ["utils.aspectaware_resize_padding"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.aspectaware_resize_padding"], ["", "def", "preprocess_video", "(", "*", "frame_from_video", ",", "max_size", "=", "512", ",", "mean", "=", "(", "0.406", ",", "0.456", ",", "0.485", ")", ",", "std", "=", "(", "0.225", ",", "0.224", ",", "0.229", ")", ")", ":", "\n", "    ", "ori_imgs", "=", "frame_from_video", "\n", "normalized_imgs", "=", "[", "(", "img", "[", "...", ",", ":", ":", "-", "1", "]", "/", "255", "-", "mean", ")", "/", "std", "for", "img", "in", "ori_imgs", "]", "\n", "imgs_meta", "=", "[", "aspectaware_resize_padding", "(", "img", ",", "max_size", ",", "max_size", ",", "\n", "means", "=", "None", ")", "for", "img", "in", "normalized_imgs", "]", "\n", "framed_imgs", "=", "[", "img_meta", "[", "0", "]", "for", "img_meta", "in", "imgs_meta", "]", "\n", "framed_metas", "=", "[", "img_meta", "[", "1", ":", "]", "for", "img_meta", "in", "imgs_meta", "]", "\n", "\n", "return", "ori_imgs", ",", "framed_imgs", ",", "framed_metas", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.postprocess": [[101, 140], ["regressBoxes", "clipBoxes", "range", "torch.max", "classification[].permute", "classification[].permute.max", "torchvision.ops.boxes.batched_nms", "scores_over_thresh[].sum", "out.append", "out.append", "out.append", "numpy.empty", "numpy.empty", "numpy.empty", "boxes_.detach().cpu().numpy", "classes_.detach().cpu().numpy", "scores_.detach().cpu().numpy", "numpy.array", "numpy.array", "numpy.array", "boxes_.detach().cpu", "classes_.detach().cpu", "scores_.detach().cpu", "boxes_.detach", "classes_.detach", "scores_.detach"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max"], ["", "def", "postprocess", "(", "x", ",", "anchors", ",", "regression", ",", "classification", ",", "regressBoxes", ",", "clipBoxes", ",", "threshold", ",", "iou_threshold", ")", ":", "\n", "    ", "transformed_anchors", "=", "regressBoxes", "(", "anchors", ",", "regression", ")", "\n", "transformed_anchors", "=", "clipBoxes", "(", "transformed_anchors", ",", "x", ")", "\n", "scores", "=", "torch", ".", "max", "(", "classification", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "scores_over_thresh", "=", "(", "scores", ">", "threshold", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "out", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "scores_over_thresh", "[", "i", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "out", ".", "append", "(", "{", "\n", "'rois'", ":", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ")", ",", "\n", "'class_ids'", ":", "np", ".", "empty", "(", "0", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "'scores'", ":", "np", ".", "empty", "(", "0", ")", ",", "\n", "}", ")", "\n", "continue", "\n", "\n", "", "classification_per", "=", "classification", "[", "i", ",", "scores_over_thresh", "[", "i", ",", ":", "]", ",", "...", "]", ".", "permute", "(", "1", ",", "0", ")", "\n", "transformed_anchors_per", "=", "transformed_anchors", "[", "i", ",", "scores_over_thresh", "[", "i", ",", ":", "]", ",", "...", "]", "\n", "scores_per", "=", "scores", "[", "i", ",", "scores_over_thresh", "[", "i", ",", ":", "]", ",", "...", "]", "\n", "scores_", ",", "classes_", "=", "classification_per", ".", "max", "(", "dim", "=", "0", ")", "\n", "anchors_nms_idx", "=", "batched_nms", "(", "transformed_anchors_per", ",", "scores_per", "[", ":", ",", "0", "]", ",", "classes_", ",", "iou_threshold", "=", "iou_threshold", ")", "\n", "\n", "if", "anchors_nms_idx", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "classes_", "=", "classes_", "[", "anchors_nms_idx", "]", "\n", "scores_", "=", "scores_", "[", "anchors_nms_idx", "]", "\n", "boxes_", "=", "transformed_anchors_per", "[", "anchors_nms_idx", ",", ":", "]", "\n", "\n", "out", ".", "append", "(", "{", "\n", "'rois'", ":", "boxes_", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'class_ids'", ":", "classes_", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'scores'", ":", "scores_", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "}", ")", "\n", "", "else", ":", "\n", "            ", "out", ".", "append", "(", "{", "\n", "'rois'", ":", "np", ".", "array", "(", "(", ")", ")", ",", "\n", "'class_ids'", ":", "np", ".", "array", "(", "(", ")", ")", ",", "\n", "'scores'", ":", "np", ".", "array", "(", "(", ")", ")", ",", "\n", "}", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.display": [[142, 163], ["range", "len", "imgs[].copy", "range", "len", "len", "[].astype", "float", "utils.plot_one_box", "cv2.imshow", "cv2.waitKey", "os.makedirs", "cv2.imwrite", "utils.get_index_label", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.plot_one_box", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.get_index_label"], ["", "def", "display", "(", "preds", ",", "imgs", ",", "obj_list", ",", "imshow", "=", "True", ",", "imwrite", "=", "False", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "imgs", ")", ")", ":", "\n", "        ", "if", "len", "(", "preds", "[", "i", "]", "[", "'rois'", "]", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "imgs", "[", "i", "]", "=", "imgs", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "preds", "[", "i", "]", "[", "'rois'", "]", ")", ")", ":", "\n", "            ", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "=", "preds", "[", "i", "]", "[", "'rois'", "]", "[", "j", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "obj", "=", "obj_list", "[", "preds", "[", "i", "]", "[", "'class_ids'", "]", "[", "j", "]", "]", "\n", "score", "=", "float", "(", "preds", "[", "i", "]", "[", "'scores'", "]", "[", "j", "]", ")", "\n", "\n", "plot_one_box", "(", "imgs", "[", "i", "]", ",", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "label", "=", "obj", ",", "score", "=", "score", ",", "\n", "color", "=", "color_list", "[", "get_index_label", "(", "obj", ",", "obj_list", ")", "]", ")", "\n", "", "if", "imshow", ":", "\n", "            ", "cv2", ".", "imshow", "(", "'img'", ",", "imgs", "[", "i", "]", ")", "\n", "cv2", ".", "waitKey", "(", "0", ")", "\n", "\n", "", "if", "imwrite", ":", "\n", "            ", "os", ".", "makedirs", "(", "'test/'", ",", "exist_ok", "=", "True", ")", "\n", "cv2", ".", "imwrite", "(", "f'test/{uuid.uuid4().hex}.jpg'", ",", "imgs", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.replace_w_sync_bn": [[165, 194], ["dir", "m.named_children", "getattr", "utils.replace_w_sync_bn", "type", "setattr", "getattr", "models.efficientdet.utils.sync_batchnorm.SynchronizedBatchNorm2d"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.replace_w_sync_bn"], ["", "", "", "def", "replace_w_sync_bn", "(", "m", ")", ":", "\n", "    ", "for", "var_name", "in", "dir", "(", "m", ")", ":", "\n", "        ", "target_attr", "=", "getattr", "(", "m", ",", "var_name", ")", "\n", "if", "type", "(", "target_attr", ")", "==", "torch", ".", "nn", ".", "BatchNorm2d", ":", "\n", "            ", "num_features", "=", "target_attr", ".", "num_features", "\n", "eps", "=", "target_attr", ".", "eps", "\n", "momentum", "=", "target_attr", ".", "momentum", "\n", "affine", "=", "target_attr", ".", "affine", "\n", "\n", "# get parameters", "\n", "running_mean", "=", "target_attr", ".", "running_mean", "\n", "running_var", "=", "target_attr", ".", "running_var", "\n", "if", "affine", ":", "\n", "                ", "weight", "=", "target_attr", ".", "weight", "\n", "bias", "=", "target_attr", ".", "bias", "\n", "\n", "", "setattr", "(", "m", ",", "var_name", ",", "\n", "SynchronizedBatchNorm2d", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ")", ")", "\n", "\n", "target_attr", "=", "getattr", "(", "m", ",", "var_name", ")", "\n", "# set parameters", "\n", "target_attr", ".", "running_mean", "=", "running_mean", "\n", "target_attr", ".", "running_var", "=", "running_var", "\n", "if", "affine", ":", "\n", "                ", "target_attr", ".", "weight", "=", "weight", "\n", "target_attr", ".", "bias", "=", "bias", "\n", "\n", "", "", "", "for", "var_name", ",", "children", "in", "m", ".", "named_children", "(", ")", ":", "\n", "        ", "replace_w_sync_bn", "(", "children", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.get_last_weights": [[220, 227], ["glob.glob", "print", "sorted", "int", "[].rsplit", "x.rsplit"], "function", ["None"], ["", "", "def", "get_last_weights", "(", "weights_path", ")", ":", "\n", "    ", "weights_path", "=", "glob", "(", "weights_path", "+", "f'/*.pth'", ")", "\n", "weights_path", "=", "sorted", "(", "weights_path", ",", "\n", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "rsplit", "(", "'_'", ")", "[", "-", "1", "]", ".", "rsplit", "(", "'.'", ")", "[", "0", "]", ")", ",", "\n", "reverse", "=", "True", ")", "[", "0", "]", "\n", "print", "(", "f'using weights {weights_path}'", ")", "\n", "return", "weights_path", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.init_weights": [[229, 249], ["model.named_modules", "isinstance", "isinstance", "print", "print", "module.reset_parameters", "utils.variance_scaling_", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_", "module.bias.data.zero_", "numpy.log"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.variance_scaling_"], ["", "def", "init_weights", "(", "model", ")", ":", "\n", "    ", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "is_conv_layer", "=", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", "\n", "if", "is_conv_layer", ":", "\n", "            ", "print", "(", "\"Initializing module: {}\"", ".", "format", "(", "name", ")", ")", "\n", "if", "\"conv_list\"", "or", "\"header\"", "in", "name", ":", "\n", "                ", "variance_scaling_", "(", "module", ".", "weight", ".", "data", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "module", ".", "weight", ".", "data", ")", "\n", "\n", "", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "if", "\"classifier.header\"", "in", "name", ":", "\n", "                    ", "bias_value", "=", "-", "np", ".", "log", "(", "(", "1", "-", "0.01", ")", "/", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias_value", ")", "\n", "", "else", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "print", "(", "\"Initializing module: {}\"", ".", "format", "(", "name", ")", ")", "\n", "module", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.variance_scaling_": [[251, 261], ["torch.nn.init._calculate_fan_in_and_fan_out", "math.sqrt", "torch.nn.init._no_grad_normal_", "float"], "function", ["None"], ["", "", "", "def", "variance_scaling_", "(", "tensor", ",", "gain", "=", "1.", ")", ":", "\n", "# type: (Tensor, float) -> Tensor", "\n", "    ", "r\"\"\"\n    initializer for SeparableConv in Regressor/Classifier\n    reference: https://keras.io/zh/initializers/  VarianceScaling\n    \"\"\"", "\n", "fan_in", ",", "fan_out", "=", "_calculate_fan_in_and_fan_out", "(", "tensor", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "gain", "/", "float", "(", "fan_in", ")", ")", "\n", "\n", "return", "_no_grad_normal_", "(", "tensor", ",", "0.", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.from_colorname_to_bgr": [[290, 294], ["webcolors.name_to_rgb"], "function", ["None"], ["def", "from_colorname_to_bgr", "(", "color", ")", ":", "\n", "    ", "rgb_color", "=", "webcolors", ".", "name_to_rgb", "(", "color", ")", "\n", "result", "=", "(", "rgb_color", ".", "blue", ",", "rgb_color", ".", "green", ",", "rgb_color", ".", "red", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.standard_to_bgr": [[296, 301], ["range", "standard.append", "len", "utils.from_colorname_to_bgr"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.from_colorname_to_bgr"], ["", "def", "standard_to_bgr", "(", "list_color_name", ")", ":", "\n", "    ", "standard", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_color_name", ")", "-", "36", ")", ":", "# -36 used to match the len(obj_list)", "\n", "        ", "standard", ".", "append", "(", "from_colorname_to_bgr", "(", "list_color_name", "[", "i", "]", ")", ")", "\n", "", "return", "standard", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.get_index_label": [[303, 306], ["int", "obj_list.index"], "function", ["None"], ["", "def", "get_index_label", "(", "label", ",", "obj_list", ")", ":", "\n", "    ", "index", "=", "int", "(", "obj_list", ".", "index", "(", "label", ")", ")", "\n", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.plot_one_box": [[308, 321], ["cv2.rectangle", "int", "max", "cv2.rectangle", "cv2.putText", "round", "int", "int", "int", "int", "cv2.getTextSize", "cv2.getTextSize", "str", "float", "max", "float", "float"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max"], ["", "def", "plot_one_box", "(", "img", ",", "coord", ",", "label", "=", "None", ",", "score", "=", "None", ",", "color", "=", "None", ",", "line_thickness", "=", "None", ")", ":", "\n", "    ", "tl", "=", "line_thickness", "or", "int", "(", "round", "(", "0.001", "*", "max", "(", "img", ".", "shape", "[", "0", ":", "2", "]", ")", ")", ")", "# line thickness", "\n", "color", "=", "color", "\n", "c1", ",", "c2", "=", "(", "int", "(", "coord", "[", "0", "]", ")", ",", "int", "(", "coord", "[", "1", "]", ")", ")", ",", "(", "int", "(", "coord", "[", "2", "]", ")", ",", "int", "(", "coord", "[", "3", "]", ")", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "thickness", "=", "tl", ")", "\n", "if", "label", ":", "\n", "        ", "tf", "=", "max", "(", "tl", "-", "2", ",", "1", ")", "# font thickness", "\n", "s_size", "=", "cv2", ".", "getTextSize", "(", "str", "(", "'{:.0%}'", ".", "format", "(", "score", ")", ")", ",", "0", ",", "fontScale", "=", "float", "(", "tl", ")", "/", "3", ",", "thickness", "=", "tf", ")", "[", "0", "]", "\n", "t_size", "=", "cv2", ".", "getTextSize", "(", "label", ",", "0", ",", "fontScale", "=", "float", "(", "tl", ")", "/", "3", ",", "thickness", "=", "tf", ")", "[", "0", "]", "\n", "c2", "=", "c1", "[", "0", "]", "+", "t_size", "[", "0", "]", "+", "s_size", "[", "0", "]", "+", "15", ",", "c1", "[", "1", "]", "-", "t_size", "[", "1", "]", "-", "3", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "-", "1", ")", "# filled", "\n", "cv2", ".", "putText", "(", "img", ",", "'{}: {:.0%}'", ".", "format", "(", "label", ",", "score", ")", ",", "(", "c1", "[", "0", "]", ",", "c1", "[", "1", "]", "-", "2", ")", ",", "0", ",", "float", "(", "tl", ")", "/", "3", ",", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "thickness", "=", "tf", ",", "lineType", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.boolean_string": [[326, 330], ["ValueError"], "function", ["None"], ["def", "boolean_string", "(", "s", ")", ":", "\n", "    ", "if", "s", "not", "in", "{", "'False'", ",", "'True'", "}", ":", "\n", "        ", "raise", "ValueError", "(", "'Not a valid boolean string'", ")", "\n", "", "return", "s", "==", "'True'", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.models.__init__.save_ckpt": [[21, 28], ["myutils.common.file_util.make_parent_dirs", "utils.misc_util.save_on_master", "isinstance", "model.module.state_dict", "model.state_dict", "optimizer.state_dict", "lr_scheduler.state_dict"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.save_on_master"], []], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.models.__init__.load_ckpt": [[30, 49], ["torch.load", "myutils.common.file_util.check_if_exists", "print", "print", "model.load_state_dict", "print", "optimizer.load_state_dict", "print", "lr_scheduler.load_state_dict", "torch.load.get", "ValueError"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get"], []], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.models.__init__.get_model": [[51, 76], ["__init__.load_ckpt", "_get_model.to", "_get_model", "ValueError", "structure.transformer.get_bottleneck_transformer", "__init__.load_ckpt", "_get_model.backbone.body.get_ext_classifier"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.load_ckpt", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.get_bottleneck_transformer", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.load_ckpt", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier"], []], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.models.__init__.get_iou_types": [[78, 89], ["isinstance", "isinstance", "isinstance", "iou_type_list.append", "iou_type_list.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.models.__init__.set_bottleneck_transformer": [[90, 95], ["hasattr", "hasattr"], "function", ["None"], []], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.CustomRCNNTransform.__init__": [[26, 28], ["torchvision.models.detection.transform.GeneralizedRCNNTransform.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "min_size", ",", "max_size", ",", "image_mean", ",", "image_std", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "min_size", ",", "max_size", ",", "image_mean", ",", "image_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.CustomRCNNTransform.resize": [[29, 65], ["torch.tensor", "float", "float", "torchvision.models.detection.transform.resize_boxes", "torch.min", "torch.max", "torch.nn.functional.interpolate", "random.choice"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max"], ["", "def", "resize", "(", "self", ",", "image", ",", "target", ",", "fixed_size", "=", "None", ")", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "shape", "[", "-", "2", ":", "]", "\n", "im_shape", "=", "torch", ".", "tensor", "(", "image", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "min_size", "=", "float", "(", "torch", ".", "min", "(", "im_shape", ")", ")", "\n", "max_size", "=", "float", "(", "torch", ".", "max", "(", "im_shape", ")", ")", "\n", "if", "fixed_size", "is", "not", "None", ":", "\n", "            ", "size", "=", "fixed_size", "\n", "", "elif", "self", ".", "training", ":", "\n", "            ", "size", "=", "random", ".", "choice", "(", "self", ".", "min_size", ")", "\n", "", "else", ":", "\n", "# FIXME assume for now that testing uses the largest scale", "\n", "            ", "size", "=", "self", ".", "min_size", "[", "-", "1", "]", "\n", "", "scale_factor", "=", "size", "/", "min_size", "\n", "\n", "if", "max_size", "*", "scale_factor", ">", "self", ".", "max_size", ":", "\n", "            ", "scale_factor", "=", "self", ".", "max_size", "/", "max_size", "\n", "", "image", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "image", "[", "None", "]", ",", "scale_factor", "=", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "0", "]", "\n", "\n", "if", "target", "is", "None", ":", "\n", "            ", "return", "image", ",", "target", "\n", "\n", "", "bbox", "=", "target", "[", "\"boxes\"", "]", "\n", "bbox", "=", "resize_boxes", "(", "bbox", ",", "(", "h", ",", "w", ")", ",", "image", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "target", "[", "\"boxes\"", "]", "=", "bbox", "\n", "\n", "# if \"masks\" in target:", "\n", "#     mask = target[\"masks\"]", "\n", "#     mask = misc_nn_ops.interpolate(mask[None].float(), scale_factor=scale_factor)[0].byte()", "\n", "#     target[\"masks\"] = mask", "\n", "#", "\n", "# if \"keypoints\" in target:", "\n", "#     keypoints = target[\"keypoints\"]", "\n", "#     keypoints = resize_keypoints(keypoints, (h, w), image.shape[-2:])", "\n", "#     target[\"keypoints\"] = keypoints", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.CustomRCNNTransform.forward": [[66, 84], ["range", "rcnn.CustomRCNNTransform.batch_images", "torchvision.models.detection.image_list.ImageList", "len", "rcnn.CustomRCNNTransform.normalize", "rcnn.CustomRCNNTransform.resize", "rcnn.CustomRCNNTransform.dim", "ValueError"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.CustomRCNNTransform.resize"], ["", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ",", "fixed_sizes", "=", "None", ")", ":", "\n", "        ", "images", "=", "[", "img", "for", "img", "in", "images", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "            ", "image", "=", "images", "[", "i", "]", "\n", "target", "=", "targets", "[", "i", "]", "if", "targets", "is", "not", "None", "else", "targets", "\n", "if", "image", ".", "dim", "(", ")", "!=", "3", ":", "\n", "                ", "raise", "ValueError", "(", "\"images is expected to be a list of 3d tensors \"", "\n", "\"of shape [C, H, W], got {}\"", ".", "format", "(", "image", ".", "shape", ")", ")", "\n", "", "image", "=", "self", ".", "normalize", "(", "image", ")", "\n", "image", ",", "target", "=", "self", ".", "resize", "(", "image", ",", "target", ",", "fixed_sizes", "[", "i", "]", "if", "fixed_sizes", "is", "not", "None", "else", "None", ")", "\n", "images", "[", "i", "]", "=", "image", "\n", "if", "targets", "is", "not", "None", ":", "\n", "                ", "targets", "[", "i", "]", "=", "target", "\n", "\n", "", "", "image_sizes", "=", "[", "img", ".", "shape", "[", "-", "2", ":", "]", "for", "img", "in", "images", "]", "\n", "images", "=", "self", ".", "batch_images", "(", "images", ")", "\n", "image_list", "=", "ImageList", "(", "images", ",", "image_sizes", ")", "\n", "return", "image_list", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.CustomRCNN.__init__": [[87, 96], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "rpn", ",", "roi_heads", ",", "transform", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "rpn", "=", "rpn", "\n", "self", ".", "roi_heads", "=", "roi_heads", "\n", "self", ".", "ext_training", "=", "False", "\n", "self", ".", "distill_backbone_only", "=", "False", "\n", "self", ".", "input_size", "=", "800", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.CustomRCNN.train_ext": [[97, 100], ["None"], "methods", ["None"], ["", "def", "train_ext", "(", "self", ")", ":", "\n", "        ", "self", ".", "ext_training", "=", "True", "\n", "self", ".", "backbone", ".", "body", ".", "ext_training", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.CustomRCNN.get_ext_classifier": [[101, 103], ["rcnn.CustomRCNN.backbone.body.get_ext_classifier"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier"], ["", "def", "get_ext_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "backbone", ".", "body", ".", "get_ext_classifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.CustomRCNN.forward": [[104, 140], ["rcnn.CustomRCNN.transform", "torch.cuda.empty_cache", "rcnn.CustomRCNN.backbone", "dict", "isinstance", "isinstance", "rcnn.CustomRCNN.rpn", "rcnn.CustomRCNN.roi_heads", "rcnn.CustomRCNN.transform.postprocess", "ValueError", "collections.OrderedDict", "dict.update", "dict.update", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.postprocess", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update"], ["", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ",", "fixed_sizes", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "training", "and", "targets", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"In training mode, targets should be passed\"", ")", "\n", "\n", "", "original_image_sizes", "=", "[", "img", ".", "shape", "[", "-", "2", ":", "]", "for", "img", "in", "images", "]", "\n", "images", ",", "targets", "=", "self", ".", "transform", "(", "images", ",", "targets", ",", "fixed_sizes", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "features", "=", "self", ".", "backbone", "(", "images", ".", "tensors", ")", "\n", "\n", "if", "self", ".", "distill_backbone_only", ":", "\n", "            ", "return", "features", "\n", "\n", "", "loss_dict", "=", "dict", "(", ")", "\n", "if", "isinstance", "(", "self", ".", "backbone", ".", "body", ",", "ExtIntermediateLayerGetter", ")", ":", "\n", "            ", "features", ",", "ext_logits", "=", "features", "\n", "if", "self", ".", "ext_training", ":", "\n", "                ", "return", "ext_logits", "\n", "", "elif", "not", "self", ".", "training", "and", "features", "is", "None", ":", "\n", "                ", "ch", ",", "height", ",", "width", "=", "images", ".", "tensors", ".", "shape", "[", "1", ":", "]", "\n", "pred_dict", "=", "{", "'boxes'", ":", "torch", ".", "empty", "(", "0", ",", "4", ")", ",", "'labels'", ":", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "int64", ")", ",", "\n", "'scores'", ":", "torch", ".", "empty", "(", "0", ")", ",", "'masks'", ":", "torch", ".", "zeros", "(", "100", ",", "ch", ",", "height", ",", "width", ")", ",", "\n", "'keypoints'", ":", "torch", ".", "empty", "(", "0", ",", "17", ",", "3", ")", ",", "'keypoints_scores'", ":", "torch", ".", "empty", "(", "0", ",", "17", ")", "}", "\n", "return", "[", "pred_dict", "]", "\n", "\n", "", "", "if", "isinstance", "(", "features", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "features", "=", "OrderedDict", "(", "[", "(", "0", ",", "features", ")", "]", ")", "\n", "\n", "", "proposals", ",", "proposal_losses", "=", "self", ".", "rpn", "(", "images", ",", "features", ",", "targets", ")", "\n", "detections", ",", "detector_losses", "=", "self", ".", "roi_heads", "(", "features", ",", "proposals", ",", "images", ".", "image_sizes", ",", "targets", ")", "\n", "detections", "=", "self", ".", "transform", ".", "postprocess", "(", "detections", ",", "images", ".", "image_sizes", ",", "original_image_sizes", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "loss_dict", ".", "update", "(", "detector_losses", ")", "\n", "loss_dict", ".", "update", "(", "proposal_losses", ")", "\n", "return", "loss_dict", "\n", "\n", "", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.__init__": [[143, 235], ["isinstance", "isinstance", "dict", "dict", "torchvision.models.detection.rpn.RegionProposalNetwork", "torchvision.models.detection.roi_heads.RoIHeads", "rcnn.CustomRCNNTransform", "rcnn.CustomRCNN.__init__", "hasattr", "ValueError", "torchvision.models.detection.rpn.AnchorGenerator", "torchvision.models.detection.rpn.RPNHead", "torchvision.ops.MultiScaleRoIAlign", "torchvision.models.detection.faster_rcnn.TwoMLPHead", "torchvision.models.detection.faster_rcnn.FastRCNNPredictor", "type", "type", "ValueError", "ValueError", "len", "torchvision.models.detection.rpn.AnchorGenerator.num_anchors_per_location"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "num_classes", "=", "None", ",", "\n", "# transform parameters", "\n", "min_size", "=", "800", ",", "max_size", "=", "1333", ",", "\n", "image_mean", "=", "None", ",", "image_std", "=", "None", ",", "\n", "# RPN parameters", "\n", "rpn_anchor_generator", "=", "None", ",", "rpn_head", "=", "None", ",", "\n", "rpn_pre_nms_top_n_train", "=", "2000", ",", "rpn_pre_nms_top_n_test", "=", "1000", ",", "\n", "rpn_post_nms_top_n_train", "=", "2000", ",", "rpn_post_nms_top_n_test", "=", "1000", ",", "\n", "rpn_nms_thresh", "=", "0.7", ",", "\n", "rpn_fg_iou_thresh", "=", "0.7", ",", "rpn_bg_iou_thresh", "=", "0.3", ",", "\n", "rpn_batch_size_per_image", "=", "256", ",", "rpn_positive_fraction", "=", "0.5", ",", "\n", "# Box parameters", "\n", "box_roi_pool", "=", "None", ",", "box_head", "=", "None", ",", "box_predictor", "=", "None", ",", "\n", "box_score_thresh", "=", "0.05", ",", "box_nms_thresh", "=", "0.5", ",", "box_detections_per_img", "=", "100", ",", "\n", "box_fg_iou_thresh", "=", "0.5", ",", "box_bg_iou_thresh", "=", "0.5", ",", "\n", "box_batch_size_per_image", "=", "512", ",", "box_positive_fraction", "=", "0.25", ",", "\n", "bbox_reg_weights", "=", "None", ")", ":", "\n", "\n", "        ", "if", "not", "hasattr", "(", "backbone", ",", "\"out_channels\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"backbone should contain an attribute out_channels \"", "\n", "\"specifying the number of output channels (assumed to be the \"", "\n", "\"same for all the levels)\"", ")", "\n", "\n", "", "assert", "isinstance", "(", "rpn_anchor_generator", ",", "(", "AnchorGenerator", ",", "type", "(", "None", ")", ")", ")", "\n", "assert", "isinstance", "(", "box_roi_pool", ",", "(", "MultiScaleRoIAlign", ",", "type", "(", "None", ")", ")", ")", "\n", "\n", "if", "num_classes", "is", "not", "None", ":", "\n", "            ", "if", "box_predictor", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"num_classes should be None when box_predictor is specified\"", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "box_predictor", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"num_classes should not be None when box_predictor \"", "\n", "\"is not specified\"", ")", "\n", "\n", "", "", "out_channels", "=", "backbone", ".", "out_channels", "\n", "\n", "if", "rpn_anchor_generator", "is", "None", ":", "\n", "            ", "anchor_sizes", "=", "(", "(", "32", ",", ")", ",", "(", "64", ",", ")", ",", "(", "128", ",", ")", ",", "(", "256", ",", ")", ",", "(", "512", ",", ")", ")", "\n", "aspect_ratios", "=", "(", "(", "0.5", ",", "1.0", ",", "2.0", ")", ",", ")", "*", "len", "(", "anchor_sizes", ")", "\n", "rpn_anchor_generator", "=", "AnchorGenerator", "(", "\n", "anchor_sizes", ",", "aspect_ratios", "\n", ")", "\n", "", "if", "rpn_head", "is", "None", ":", "\n", "            ", "rpn_head", "=", "RPNHead", "(", "\n", "out_channels", ",", "rpn_anchor_generator", ".", "num_anchors_per_location", "(", ")", "[", "0", "]", "\n", ")", "\n", "\n", "", "rpn_pre_nms_top_n", "=", "dict", "(", "training", "=", "rpn_pre_nms_top_n_train", ",", "testing", "=", "rpn_pre_nms_top_n_test", ")", "\n", "rpn_post_nms_top_n", "=", "dict", "(", "training", "=", "rpn_post_nms_top_n_train", ",", "testing", "=", "rpn_post_nms_top_n_test", ")", "\n", "\n", "rpn", "=", "RegionProposalNetwork", "(", "\n", "rpn_anchor_generator", ",", "rpn_head", ",", "\n", "rpn_fg_iou_thresh", ",", "rpn_bg_iou_thresh", ",", "\n", "rpn_batch_size_per_image", ",", "rpn_positive_fraction", ",", "\n", "rpn_pre_nms_top_n", ",", "rpn_post_nms_top_n", ",", "rpn_nms_thresh", ")", "\n", "\n", "if", "box_roi_pool", "is", "None", ":", "\n", "            ", "box_roi_pool", "=", "MultiScaleRoIAlign", "(", "\n", "featmap_names", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "\n", "output_size", "=", "7", ",", "\n", "sampling_ratio", "=", "2", ")", "\n", "\n", "", "if", "box_head", "is", "None", ":", "\n", "            ", "resolution", "=", "box_roi_pool", ".", "output_size", "[", "0", "]", "\n", "representation_size", "=", "1024", "\n", "box_head", "=", "TwoMLPHead", "(", "\n", "out_channels", "*", "resolution", "**", "2", ",", "\n", "representation_size", ")", "\n", "\n", "", "if", "box_predictor", "is", "None", ":", "\n", "            ", "representation_size", "=", "1024", "\n", "box_predictor", "=", "FastRCNNPredictor", "(", "\n", "representation_size", ",", "\n", "num_classes", ")", "\n", "\n", "", "roi_heads", "=", "RoIHeads", "(", "\n", "# Box", "\n", "box_roi_pool", ",", "box_head", ",", "box_predictor", ",", "\n", "box_fg_iou_thresh", ",", "box_bg_iou_thresh", ",", "\n", "box_batch_size_per_image", ",", "box_positive_fraction", ",", "\n", "bbox_reg_weights", ",", "\n", "box_score_thresh", ",", "box_nms_thresh", ",", "box_detections_per_img", ")", "\n", "\n", "if", "image_mean", "is", "None", ":", "\n", "            ", "image_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "\n", "", "if", "image_std", "is", "None", ":", "\n", "            ", "image_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "", "transform", "=", "CustomRCNNTransform", "(", "min_size", ",", "max_size", ",", "image_mean", ",", "image_std", ")", "\n", "super", "(", "FasterRCNN", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "rpn", ",", "roi_heads", ",", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict": [[236, 247], ["super().load_state_dict", "hasattr", "print", "state_dict.pop", "state_dict.pop", "state_dict.pop", "state_dict.pop", "state_dict.pop"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", ")", ":", "\n", "# Retrocompatibility with matsubara code", "\n", "        ", "if", "hasattr", "(", "self", ".", "backbone", ".", "body", ",", "\"layer0\"", ")", "and", "\"backbone.body.conv1.weight\"", "in", "state_dict", ":", "\n", "            ", "print", "(", "\"Aplying Retrocompatibility with Matsubara code\"", ")", "\n", "state_dict", "[", "\"backbone.body.layer0.0.weight\"", "]", "=", "state_dict", ".", "pop", "(", "\"backbone.body.conv1.weight\"", ")", "\n", "state_dict", "[", "\"backbone.body.layer0.1.weight\"", "]", "=", "state_dict", ".", "pop", "(", "\"backbone.body.bn1.weight\"", ")", "\n", "state_dict", "[", "\"backbone.body.layer0.1.bias\"", "]", "=", "state_dict", ".", "pop", "(", "\"backbone.body.bn1.bias\"", ")", "\n", "state_dict", "[", "\"backbone.body.layer0.1.running_mean\"", "]", "=", "state_dict", ".", "pop", "(", "\"backbone.body.bn1.running_mean\"", ")", "\n", "state_dict", "[", "\"backbone.body.layer0.1.running_var\"", "]", "=", "state_dict", ".", "pop", "(", "\"backbone.body.bn1.running_var\"", ")", "\n", "\n", "", "super", "(", ")", ".", "load_state_dict", "(", "state_dict", ",", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.MaskRCNN.__init__": [[250, 317], ["isinstance", "rcnn.FasterRCNN.__init__", "torchvision.ops.MultiScaleRoIAlign", "torchvision.models.detection.mask_rcnn.MaskRCNNHeads", "torchvision.models.detection.mask_rcnn.MaskRCNNPredictor", "type", "ValueError"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "num_classes", "=", "None", ",", "\n", "# transform parameters", "\n", "min_size", "=", "800", ",", "max_size", "=", "1333", ",", "\n", "image_mean", "=", "None", ",", "image_std", "=", "None", ",", "\n", "# RPN parameters", "\n", "rpn_anchor_generator", "=", "None", ",", "rpn_head", "=", "None", ",", "\n", "rpn_pre_nms_top_n_train", "=", "2000", ",", "rpn_pre_nms_top_n_test", "=", "1000", ",", "\n", "rpn_post_nms_top_n_train", "=", "2000", ",", "rpn_post_nms_top_n_test", "=", "1000", ",", "\n", "rpn_nms_thresh", "=", "0.7", ",", "\n", "rpn_fg_iou_thresh", "=", "0.7", ",", "rpn_bg_iou_thresh", "=", "0.3", ",", "\n", "rpn_batch_size_per_image", "=", "256", ",", "rpn_positive_fraction", "=", "0.5", ",", "\n", "# Box parameters", "\n", "box_roi_pool", "=", "None", ",", "box_head", "=", "None", ",", "box_predictor", "=", "None", ",", "\n", "box_score_thresh", "=", "0.05", ",", "box_nms_thresh", "=", "0.5", ",", "box_detections_per_img", "=", "100", ",", "\n", "box_fg_iou_thresh", "=", "0.5", ",", "box_bg_iou_thresh", "=", "0.5", ",", "\n", "box_batch_size_per_image", "=", "512", ",", "box_positive_fraction", "=", "0.25", ",", "\n", "bbox_reg_weights", "=", "None", ",", "\n", "# Mask parameters", "\n", "mask_roi_pool", "=", "None", ",", "mask_head", "=", "None", ",", "mask_predictor", "=", "None", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "mask_roi_pool", ",", "(", "MultiScaleRoIAlign", ",", "type", "(", "None", ")", ")", ")", "\n", "\n", "if", "num_classes", "is", "not", "None", ":", "\n", "            ", "if", "mask_predictor", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"num_classes should be None when mask_predictor is specified\"", ")", "\n", "\n", "", "", "out_channels", "=", "backbone", ".", "out_channels", "\n", "\n", "if", "mask_roi_pool", "is", "None", ":", "\n", "            ", "mask_roi_pool", "=", "MultiScaleRoIAlign", "(", "\n", "featmap_names", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "\n", "output_size", "=", "14", ",", "\n", "sampling_ratio", "=", "2", ")", "\n", "\n", "", "if", "mask_head", "is", "None", ":", "\n", "            ", "mask_layers", "=", "(", "256", ",", "256", ",", "256", ",", "256", ")", "\n", "mask_dilation", "=", "1", "\n", "mask_head", "=", "MaskRCNNHeads", "(", "out_channels", ",", "mask_layers", ",", "mask_dilation", ")", "\n", "\n", "", "if", "mask_predictor", "is", "None", ":", "\n", "            ", "mask_predictor_in_channels", "=", "256", "# == mask_layers[-1]", "\n", "mask_dim_reduced", "=", "256", "\n", "mask_predictor", "=", "MaskRCNNPredictor", "(", "mask_predictor_in_channels", ",", "\n", "mask_dim_reduced", ",", "num_classes", ")", "\n", "\n", "", "super", "(", "MaskRCNN", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", ",", "num_classes", ",", "\n", "# transform parameters", "\n", "min_size", ",", "max_size", ",", "\n", "image_mean", ",", "image_std", ",", "\n", "# RPN-specific parameters", "\n", "rpn_anchor_generator", ",", "rpn_head", ",", "\n", "rpn_pre_nms_top_n_train", ",", "rpn_pre_nms_top_n_test", ",", "\n", "rpn_post_nms_top_n_train", ",", "rpn_post_nms_top_n_test", ",", "\n", "rpn_nms_thresh", ",", "\n", "rpn_fg_iou_thresh", ",", "rpn_bg_iou_thresh", ",", "\n", "rpn_batch_size_per_image", ",", "rpn_positive_fraction", ",", "\n", "# Box parameters", "\n", "box_roi_pool", ",", "box_head", ",", "box_predictor", ",", "\n", "box_score_thresh", ",", "box_nms_thresh", ",", "box_detections_per_img", ",", "\n", "box_fg_iou_thresh", ",", "box_bg_iou_thresh", ",", "\n", "box_batch_size_per_image", ",", "box_positive_fraction", ",", "\n", "bbox_reg_weights", ")", "\n", "\n", "self", ".", "roi_heads", ".", "mask_roi_pool", "=", "mask_roi_pool", "\n", "self", ".", "roi_heads", ".", "mask_head", "=", "mask_head", "\n", "self", ".", "roi_heads", ".", "mask_predictor", "=", "mask_predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.KeypointRCNN.__init__": [[320, 387], ["isinstance", "rcnn.FasterRCNN.__init__", "torchvision.ops.MultiScaleRoIAlign", "tuple", "torchvision.models.detection.keypoint_rcnn.KeypointRCNNHeads", "torchvision.models.detection.keypoint_rcnn.KeypointRCNNPredictor", "type", "ValueError", "range"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "num_classes", "=", "None", ",", "\n", "# transform parameters", "\n", "min_size", "=", "None", ",", "max_size", "=", "1333", ",", "\n", "image_mean", "=", "None", ",", "image_std", "=", "None", ",", "\n", "# RPN parameters", "\n", "rpn_anchor_generator", "=", "None", ",", "rpn_head", "=", "None", ",", "\n", "rpn_pre_nms_top_n_train", "=", "2000", ",", "rpn_pre_nms_top_n_test", "=", "1000", ",", "\n", "rpn_post_nms_top_n_train", "=", "2000", ",", "rpn_post_nms_top_n_test", "=", "1000", ",", "\n", "rpn_nms_thresh", "=", "0.7", ",", "\n", "rpn_fg_iou_thresh", "=", "0.7", ",", "rpn_bg_iou_thresh", "=", "0.3", ",", "\n", "rpn_batch_size_per_image", "=", "256", ",", "rpn_positive_fraction", "=", "0.5", ",", "\n", "# Box parameters", "\n", "box_roi_pool", "=", "None", ",", "box_head", "=", "None", ",", "box_predictor", "=", "None", ",", "\n", "box_score_thresh", "=", "0.05", ",", "box_nms_thresh", "=", "0.5", ",", "box_detections_per_img", "=", "100", ",", "\n", "box_fg_iou_thresh", "=", "0.5", ",", "box_bg_iou_thresh", "=", "0.5", ",", "\n", "box_batch_size_per_image", "=", "512", ",", "box_positive_fraction", "=", "0.25", ",", "\n", "bbox_reg_weights", "=", "None", ",", "\n", "# keypoint parameters", "\n", "keypoint_roi_pool", "=", "None", ",", "keypoint_head", "=", "None", ",", "keypoint_predictor", "=", "None", ",", "\n", "num_keypoints", "=", "17", ")", ":", "\n", "\n", "        ", "assert", "isinstance", "(", "keypoint_roi_pool", ",", "(", "MultiScaleRoIAlign", ",", "type", "(", "None", ")", ")", ")", "\n", "if", "min_size", "is", "None", ":", "\n", "            ", "min_size", "=", "(", "640", ",", "672", ",", "704", ",", "736", ",", "768", ",", "800", ")", "\n", "\n", "", "if", "num_classes", "is", "not", "None", ":", "\n", "            ", "if", "keypoint_predictor", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"num_classes should be None when keypoint_predictor is specified\"", ")", "\n", "\n", "", "", "out_channels", "=", "backbone", ".", "out_channels", "\n", "\n", "if", "keypoint_roi_pool", "is", "None", ":", "\n", "            ", "keypoint_roi_pool", "=", "MultiScaleRoIAlign", "(", "\n", "featmap_names", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "\n", "output_size", "=", "14", ",", "\n", "sampling_ratio", "=", "2", ")", "\n", "\n", "", "if", "keypoint_head", "is", "None", ":", "\n", "            ", "keypoint_layers", "=", "tuple", "(", "512", "for", "_", "in", "range", "(", "8", ")", ")", "\n", "keypoint_head", "=", "KeypointRCNNHeads", "(", "out_channels", ",", "keypoint_layers", ")", "\n", "\n", "", "if", "keypoint_predictor", "is", "None", ":", "\n", "            ", "keypoint_dim_reduced", "=", "512", "# == keypoint_layers[-1]", "\n", "keypoint_predictor", "=", "KeypointRCNNPredictor", "(", "keypoint_dim_reduced", ",", "num_keypoints", ")", "\n", "\n", "", "super", "(", "KeypointRCNN", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", ",", "num_classes", ",", "\n", "# transform parameters", "\n", "min_size", ",", "max_size", ",", "\n", "image_mean", ",", "image_std", ",", "\n", "# RPN-specific parameters", "\n", "rpn_anchor_generator", ",", "rpn_head", ",", "\n", "rpn_pre_nms_top_n_train", ",", "rpn_pre_nms_top_n_test", ",", "\n", "rpn_post_nms_top_n_train", ",", "rpn_post_nms_top_n_test", ",", "\n", "rpn_nms_thresh", ",", "\n", "rpn_fg_iou_thresh", ",", "rpn_bg_iou_thresh", ",", "\n", "rpn_batch_size_per_image", ",", "rpn_positive_fraction", ",", "\n", "# Box parameters", "\n", "box_roi_pool", ",", "box_head", ",", "box_predictor", ",", "\n", "box_score_thresh", ",", "box_nms_thresh", ",", "box_detections_per_img", ",", "\n", "box_fg_iou_thresh", ",", "box_bg_iou_thresh", ",", "\n", "box_batch_size_per_image", ",", "box_positive_fraction", ",", "\n", "bbox_reg_weights", ")", "\n", "\n", "self", ".", "roi_heads", ".", "keypoint_roi_pool", "=", "keypoint_roi_pool", "\n", "self", ".", "roi_heads", ".", "keypoint_head", "=", "keypoint_head", "\n", "self", ".", "roi_heads", ".", "keypoint_predictor", "=", "keypoint_predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.get_base_backbone": [[405, 415], ["ValueError", "backbone_name.startswith", "backbone_name.startswith", "backbone_name.startswith", "backbone_name.startswith", "models.mimic.resnet_layer.get_mimic_layers"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.resnet_layer.get_mimic_layers"], ["def", "get_base_backbone", "(", "backbone_name", ",", "backbone_config", ",", "bottleneck_transformer", "=", "None", ")", ":", "\n", "    ", "pretrained", "=", "backbone_config", "[", "'params'", "]", "[", "'pretrained'", "]", "\n", "if", "backbone_name", ".", "startswith", "(", "'resne'", ")", "or", "backbone_name", ".", "startswith", "(", "'wide_resne'", ")", ":", "\n", "        ", "return", "resnet", ".", "__dict__", "[", "backbone_name", "]", "(", "pretrained", "=", "pretrained", ",", "norm_layer", "=", "misc_nn_ops", ".", "FrozenBatchNorm2d", ")", "\n", "", "elif", "backbone_name", ".", "startswith", "(", "'custom_resne'", ")", "or", "backbone_name", ".", "startswith", "(", "'custom_wide_resne'", ")", ":", "\n", "        ", "layer0", ",", "layer1", ",", "layer2", ",", "layer3", ",", "layer4", "=", "get_mimic_layers", "(", "backbone_name", ",", "backbone_config", ",", "bottleneck_transformer", ")", "\n", "return", "custom", ".", "resnet", ".", "__dict__", "[", "backbone_name", "]", "(", "pretrained", "=", "pretrained", ",", "norm_layer", "=", "misc_nn_ops", ".", "FrozenBatchNorm2d", ",", "\n", "layer0", "=", "layer0", ",", "layer1", "=", "layer1", ",", "layer2", "=", "layer2", ",", "\n", "layer3", "=", "layer3", ",", "layer4", "=", "layer4", ")", "\n", "", "raise", "ValueError", "(", "'backbone_name `{}` is not expected'", ".", "format", "(", "backbone_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.get_fpn_backbone": [[417, 434], ["print", "torchvision.models.detection.backbone_utils.BackboneWithFPN", "backbone.named_parameters", "parameter.requires_grad_"], "function", ["None"], ["", "def", "get_fpn_backbone", "(", "backbone", ",", "freeze_layers", ")", ":", "\n", "    ", "if", "freeze_layers", ":", "\n", "        ", "for", "name", ",", "parameter", "in", "backbone", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'layer2'", "not", "in", "name", "and", "'layer3'", "not", "in", "name", "and", "'layer4'", "not", "in", "name", ":", "\n", "                ", "parameter", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "", "", "", "return_layers", "=", "{", "'layer1'", ":", "0", ",", "'layer2'", ":", "1", ",", "'layer3'", ":", "2", ",", "'layer4'", ":", "3", "}", "\n", "in_channels_stage2", "=", "backbone", ".", "inplanes", "//", "8", "\n", "in_channels_list", "=", "[", "\n", "in_channels_stage2", ",", "\n", "in_channels_stage2", "*", "2", ",", "\n", "in_channels_stage2", "*", "4", ",", "\n", "in_channels_stage2", "*", "8", ",", "\n", "]", "\n", "out_channels", "=", "256", "\n", "print", "(", "\"FPN WITH BACKBONE\"", ")", "\n", "return", "BackboneWithFPN", "(", "backbone", ",", "return_layers", ",", "in_channels_list", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.get_model_config": [[436, 440], ["KeyError"], "function", ["None"], ["", "def", "get_model_config", "(", "model_name", ")", ":", "\n", "    ", "if", "model_name", "in", "MODEL_CLASS_DICT", ":", "\n", "        ", "return", "MODEL_CLASS_DICT", "[", "model_name", "]", "\n", "", "raise", "KeyError", "(", "'model_name `{}` is not expected'", ".", "format", "(", "model_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.get_model": [[442, 476], ["print", "rcnn.get_model_config", "model_class", "rcnn.get_base_backbone", "backbone_config.get", "backbone_name.endswith", "print", "torchvision.models.utils.load_state_dict_from_url", "model_class.load_state_dict", "models.ext.get_ext_fpn_backbone", "rcnn.get_fpn_backbone"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.get_model_config", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.get_base_backbone", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.__init__.get_ext_fpn_backbone", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.get_fpn_backbone"], ["", "def", "get_model", "(", "model_name", ",", "pretrained", ",", "num_classes", "=", "91", ",", "backbone_config", "=", "None", ",", "\n", "custom_backbone", "=", "None", ",", "strict", "=", "True", ",", "progress", "=", "True", ",", "bottleneck_transformer", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "backbone_name", "=", "backbone_config", "[", "'name'", "]", "\n", "backbone_params_config", "=", "backbone_config", "[", "'params'", "]", "\n", "\n", "print", "(", "\"rcnn.get_model\"", ")", "\n", "if", "pretrained", ":", "\n", "        ", "backbone_params_config", "[", "'pretrained'", "]", "=", "False", "\n", "\n", "", "if", "custom_backbone", "is", "None", ":", "\n", "        ", "base_backbone", "=", "get_base_backbone", "(", "backbone_name", ",", "backbone_config", ",", "bottleneck_transformer", ")", "\n", "ext_config", "=", "backbone_config", ".", "get", "(", "'ext_config'", ",", "None", ")", "\n", "freeze_layers", "=", "backbone_params_config", "[", "'freeze_layers'", "]", "\n", "if", "ext_config", "is", "not", "None", ":", "\n", "            ", "backbone", "=", "get_ext_fpn_backbone", "(", "base_backbone", ",", "ext_config", ",", "freeze_layers", ")", "\n", "strict", "=", "False", "\n", "", "else", ":", "\n", "            ", "backbone", "=", "get_fpn_backbone", "(", "base_backbone", ",", "freeze_layers", ")", "\n", "", "", "else", ":", "\n", "        ", "backbone", "=", "custom_backbone", "\n", "\n", "", "model_class", ",", "pretrained_key", "=", "get_model_config", "(", "model_name", ")", "\n", "model", "=", "model_class", "(", "backbone", ",", "num_classes", ",", "**", "kwargs", ")", "\n", "\n", "if", "pretrained", "and", "backbone_name", ".", "endswith", "(", "'resnet50'", ")", ":", "\n", "        ", "print", "(", "'Loading pretrained state dict of {}'", ".", "format", "(", "backbone_name", ")", ")", "\n", "if", "backbone_name", "!=", "'resnet50'", ":", "\n", "            ", "strict", "=", "False", "\n", "\n", "", "state_dict", "=", "load_state_dict_from_url", "(", "MODEL_URL_DICT", "[", "pretrained_key", "]", ",", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "strict", ")", "\n", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model_utils.BBoxTransform.forward": [[8, 36], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "regression[].exp", "regression[].exp"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "anchors", ",", "regression", ")", ":", "\n", "        ", "\"\"\"\n        decode_box_outputs adapted from https://github.com/google/automl/blob/master/efficientdet/anchors.py\n\n        Args:\n            anchors: [batchsize, boxes, (y1, x1, y2, x2)]\n            regression: [batchsize, boxes, (dy, dx, dh, dw)]\n\n        Returns:\n\n        \"\"\"", "\n", "y_centers_a", "=", "(", "anchors", "[", "...", ",", "0", "]", "+", "anchors", "[", "...", ",", "2", "]", ")", "/", "2", "\n", "x_centers_a", "=", "(", "anchors", "[", "...", ",", "1", "]", "+", "anchors", "[", "...", ",", "3", "]", ")", "/", "2", "\n", "ha", "=", "anchors", "[", "...", ",", "2", "]", "-", "anchors", "[", "...", ",", "0", "]", "\n", "wa", "=", "anchors", "[", "...", ",", "3", "]", "-", "anchors", "[", "...", ",", "1", "]", "\n", "\n", "w", "=", "regression", "[", "...", ",", "3", "]", ".", "exp", "(", ")", "*", "wa", "\n", "h", "=", "regression", "[", "...", ",", "2", "]", ".", "exp", "(", ")", "*", "ha", "\n", "\n", "y_centers", "=", "regression", "[", "...", ",", "0", "]", "*", "ha", "+", "y_centers_a", "\n", "x_centers", "=", "regression", "[", "...", ",", "1", "]", "*", "wa", "+", "x_centers_a", "\n", "\n", "ymin", "=", "y_centers", "-", "h", "/", "2.", "\n", "xmin", "=", "x_centers", "-", "w", "/", "2.", "\n", "ymax", "=", "y_centers", "+", "h", "/", "2.", "\n", "xmax", "=", "x_centers", "+", "w", "/", "2.", "\n", "\n", "return", "torch", ".", "stack", "(", "[", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "]", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model_utils.ClipBoxes.__init__": [[40, 42], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ClipBoxes", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model_utils.ClipBoxes.forward": [[43, 52], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "boxes", ",", "img", ")", ":", "\n", "        ", "batch_size", ",", "num_channels", ",", "height", ",", "width", "=", "img", ".", "shape", "\n", "boxes", "[", ":", ",", ":", ",", "0", "]", "=", "torch", ".", "clamp", "(", "boxes", "[", ":", ",", ":", ",", "0", "]", ",", "min", "=", "0", ")", "\n", "boxes", "[", ":", ",", ":", ",", "1", "]", "=", "torch", ".", "clamp", "(", "boxes", "[", ":", ",", ":", ",", "1", "]", ",", "min", "=", "0", ")", "\n", "\n", "boxes", "[", ":", ",", ":", ",", "2", "]", "=", "torch", ".", "clamp", "(", "boxes", "[", ":", ",", ":", ",", "2", "]", ",", "max", "=", "width", "-", "1", ")", "\n", "boxes", "[", ":", ",", ":", ",", "3", "]", "=", "torch", ".", "clamp", "(", "boxes", "[", ":", ",", ":", ",", "3", "]", ",", "max", "=", "height", "-", "1", ")", "\n", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model_utils.Anchors.__init__": [[59, 74], ["torch.Module.__init__", "kwargs.get", "numpy.array", "kwargs.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get"], ["def", "__init__", "(", "self", ",", "anchor_scale", "=", "4.", ",", "pyramid_levels", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "anchor_scale", "=", "anchor_scale", "\n", "\n", "if", "pyramid_levels", "is", "None", ":", "\n", "            ", "self", ".", "pyramid_levels", "=", "[", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "pyramid_levels", "=", "pyramid_levels", "\n", "\n", "", "self", ".", "strides", "=", "kwargs", ".", "get", "(", "'strides'", ",", "[", "2", "**", "x", "for", "x", "in", "self", ".", "pyramid_levels", "]", ")", "\n", "self", ".", "scales", "=", "np", ".", "array", "(", "kwargs", ".", "get", "(", "'scales'", ",", "[", "2", "**", "0", ",", "2", "**", "(", "1.0", "/", "3.0", ")", ",", "2", "**", "(", "2.0", "/", "3.0", ")", "]", ")", ")", "\n", "self", ".", "ratios", "=", "kwargs", ".", "get", "(", "'ratios'", ",", "[", "(", "1.0", ",", "1.0", ")", ",", "(", "1.4", ",", "0.7", ")", ",", "(", "0.7", ",", "1.4", ")", "]", ")", "\n", "\n", "self", ".", "last_anchors", "=", "{", "}", "\n", "self", ".", "last_shape", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model_utils.Anchors.forward": [[75, 139], ["numpy.vstack", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "anchor_boxes.unsqueeze.unsqueeze.unsqueeze", "itertools.product", "numpy.concatenate", "boxes_all.append", "numpy.arange", "numpy.arange", "numpy.meshgrid", "xv.reshape.reshape.reshape", "yv.reshape.reshape.reshape", "numpy.vstack", "numpy.swapaxes", "numpy.concatenate.append", "numpy.concatenate.reshape", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "ValueError", "numpy.expand_dims", "anchor_boxes.unsqueeze.unsqueeze.astype"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "        ", "\"\"\"Generates multiscale anchor boxes.\n\n        Args:\n          image_size: integer number of input image size. The input image has the\n            same dimension for width and height. The image_size should be divided by\n            the largest feature stride 2^max_level.\n          anchor_scale: float number representing the scale of size of the base\n            anchor to the feature stride 2^level.\n          anchor_configs: a dictionary with keys as the levels of anchors and\n            values as a list of anchor configuration.\n\n        Returns:\n          anchor_boxes: a numpy array with shape [N, 4], which stacks anchors on all\n            feature levels.\n        Raises:\n          ValueError: input size must be the multiple of largest feature stride.\n        \"\"\"", "\n", "image_shape", "=", "image", ".", "shape", "[", "2", ":", "]", "\n", "\n", "if", "image_shape", "==", "self", ".", "last_shape", "and", "image", ".", "device", "in", "self", ".", "last_anchors", ":", "\n", "            ", "return", "self", ".", "last_anchors", "[", "image", ".", "device", "]", "\n", "\n", "", "if", "self", ".", "last_shape", "is", "None", "or", "self", ".", "last_shape", "!=", "image_shape", ":", "\n", "            ", "self", ".", "last_shape", "=", "image_shape", "\n", "\n", "", "if", "dtype", "==", "torch", ".", "float16", ":", "\n", "            ", "dtype", "=", "np", ".", "float16", "\n", "", "else", ":", "\n", "            ", "dtype", "=", "np", ".", "float32", "\n", "\n", "", "boxes_all", "=", "[", "]", "\n", "for", "stride", "in", "self", ".", "strides", ":", "\n", "            ", "boxes_level", "=", "[", "]", "\n", "for", "scale", ",", "ratio", "in", "itertools", ".", "product", "(", "self", ".", "scales", ",", "self", ".", "ratios", ")", ":", "\n", "                ", "if", "image_shape", "[", "1", "]", "%", "stride", "!=", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "'input size must be divided by the stride.'", ")", "\n", "", "base_anchor_size", "=", "self", ".", "anchor_scale", "*", "stride", "*", "scale", "\n", "anchor_size_x_2", "=", "base_anchor_size", "*", "ratio", "[", "0", "]", "/", "2.0", "\n", "anchor_size_y_2", "=", "base_anchor_size", "*", "ratio", "[", "1", "]", "/", "2.0", "\n", "\n", "x", "=", "np", ".", "arange", "(", "stride", "/", "2", ",", "image_shape", "[", "1", "]", ",", "stride", ")", "\n", "y", "=", "np", ".", "arange", "(", "stride", "/", "2", ",", "image_shape", "[", "0", "]", ",", "stride", ")", "\n", "xv", ",", "yv", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "xv", "=", "xv", ".", "reshape", "(", "-", "1", ")", "\n", "yv", "=", "yv", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "# y1,x1,y2,x2", "\n", "boxes", "=", "np", ".", "vstack", "(", "(", "yv", "-", "anchor_size_y_2", ",", "xv", "-", "anchor_size_x_2", ",", "\n", "yv", "+", "anchor_size_y_2", ",", "xv", "+", "anchor_size_x_2", ")", ")", "\n", "boxes", "=", "np", ".", "swapaxes", "(", "boxes", ",", "0", ",", "1", ")", "\n", "boxes_level", ".", "append", "(", "np", ".", "expand_dims", "(", "boxes", ",", "axis", "=", "1", ")", ")", "\n", "# concat anchors on the same level to the reshape NxAx4", "\n", "", "boxes_level", "=", "np", ".", "concatenate", "(", "boxes_level", ",", "axis", "=", "1", ")", "\n", "boxes_all", ".", "append", "(", "boxes_level", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", ")", "\n", "\n", "", "anchor_boxes", "=", "np", ".", "vstack", "(", "boxes_all", ")", "\n", "\n", "anchor_boxes", "=", "torch", ".", "from_numpy", "(", "anchor_boxes", ".", "astype", "(", "dtype", ")", ")", ".", "to", "(", "image", ".", "device", ")", "\n", "anchor_boxes", "=", "anchor_boxes", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# save it for later use to reduce overhead", "\n", "self", ".", "last_anchors", "[", "image", ".", "device", "]", "=", "anchor_boxes", "\n", "return", "anchor_boxes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.CocoDataset.__init__": [[11, 21], ["pycocotools.coco.COCO", "dataset.CocoDataset.coco.getImgIds", "dataset.CocoDataset.load_classes", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.CocoDataset.load_classes"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "set", "=", "'train2017'", ",", "transform", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "set_name", "=", "set", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "coco", "=", "COCO", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'annotations'", ",", "'instances_'", "+", "self", ".", "set_name", "+", "'.json'", ")", ")", "\n", "self", ".", "image_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "\n", "self", ".", "load_classes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.CocoDataset.load_classes": [[22, 36], ["dataset.CocoDataset.coco.loadCats", "dataset.CocoDataset.sort", "dataset.CocoDataset.classes.items", "dataset.CocoDataset.coco.getCatIds", "len"], "methods", ["None"], ["", "def", "load_classes", "(", "self", ")", ":", "\n", "\n", "# load class names (name -> label)", "\n", "        ", "categories", "=", "self", ".", "coco", ".", "loadCats", "(", "self", ".", "coco", ".", "getCatIds", "(", ")", ")", "\n", "categories", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "'id'", "]", ")", "\n", "\n", "self", ".", "classes", "=", "{", "}", "\n", "for", "c", "in", "categories", ":", "\n", "            ", "self", ".", "classes", "[", "c", "[", "'name'", "]", "]", "=", "len", "(", "self", ".", "classes", ")", "\n", "\n", "# also load the reverse (label -> name)", "\n", "", "self", ".", "labels", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "self", ".", "classes", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "labels", "[", "value", "]", "=", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.CocoDataset.__len__": [[37, 39], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.CocoDataset.__getitem__": [[40, 48], ["dataset.CocoDataset.load_image", "dataset.CocoDataset.load_annotations", "dataset.CocoDataset.transform"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.CocoDataset.load_image", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.CocoDataset.load_annotations"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "img", "=", "self", ".", "load_image", "(", "idx", ")", "\n", "annot", "=", "self", ".", "load_annotations", "(", "idx", ")", "\n", "sample", "=", "{", "'img'", ":", "img", ",", "'annot'", ":", "annot", "}", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.CocoDataset.load_image": [[49, 56], ["os.path.join", "cv2.imread", "cv2.cvtColor", "dataset.CocoDataset.coco.loadImgs", "cv2.cvtColor.astype"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "image_info", "=", "self", ".", "coco", ".", "loadImgs", "(", "self", ".", "image_ids", "[", "image_index", "]", ")", "[", "0", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "set_name", ",", "image_info", "[", "'file_name'", "]", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "\n", "return", "img", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.CocoDataset.load_annotations": [[57, 84], ["dataset.CocoDataset.coco.getAnnIds", "numpy.zeros", "dataset.CocoDataset.coco.loadAnns", "enumerate", "len", "numpy.zeros", "numpy.append"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ",", "image_index", ")", ":", "\n", "# get ground truth annotations", "\n", "        ", "annotations_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "self", ".", "image_ids", "[", "image_index", "]", ",", "iscrowd", "=", "False", ")", "\n", "annotations", "=", "np", ".", "zeros", "(", "(", "0", ",", "5", ")", ")", "\n", "\n", "# some images appear to miss annotations", "\n", "if", "len", "(", "annotations_ids", ")", "==", "0", ":", "\n", "            ", "return", "annotations", "\n", "\n", "# parse annotations", "\n", "", "coco_annotations", "=", "self", ".", "coco", ".", "loadAnns", "(", "annotations_ids", ")", "\n", "for", "idx", ",", "a", "in", "enumerate", "(", "coco_annotations", ")", ":", "\n", "\n", "# some annotations have basically no width / height, skip them", "\n", "            ", "if", "a", "[", "'bbox'", "]", "[", "2", "]", "<", "1", "or", "a", "[", "'bbox'", "]", "[", "3", "]", "<", "1", ":", "\n", "                ", "continue", "\n", "\n", "", "annotation", "=", "np", ".", "zeros", "(", "(", "1", ",", "5", ")", ")", "\n", "annotation", "[", "0", ",", ":", "4", "]", "=", "a", "[", "'bbox'", "]", "\n", "annotation", "[", "0", ",", "4", "]", "=", "a", "[", "'category_id'", "]", "-", "1", "\n", "annotations", "=", "np", ".", "append", "(", "annotations", ",", "annotation", ",", "axis", "=", "0", ")", "\n", "\n", "# transform from [x, y, w, h] to [x1, y1, x2, y2]", "\n", "", "annotations", "[", ":", ",", "2", "]", "=", "annotations", "[", ":", ",", "0", "]", "+", "annotations", "[", ":", ",", "2", "]", "\n", "annotations", "[", ":", ",", "3", "]", "=", "annotations", "[", ":", ",", "1", "]", "+", "annotations", "[", ":", ",", "3", "]", "\n", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.Resizer.__init__": [[113, 115], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "img_size", "=", "512", ")", ":", "\n", "        ", "self", ".", "img_size", "=", "img_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.Resizer.__call__": [[116, 136], ["cv2.resize", "numpy.zeros", "int", "int", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.CustomRCNNTransform.resize"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "annots", "=", "sample", "[", "'img'", "]", ",", "sample", "[", "'annot'", "]", "\n", "height", ",", "width", ",", "_", "=", "image", ".", "shape", "\n", "if", "height", ">", "width", ":", "\n", "            ", "scale", "=", "self", ".", "img_size", "/", "height", "\n", "resized_height", "=", "self", ".", "img_size", "\n", "resized_width", "=", "int", "(", "width", "*", "scale", ")", "\n", "", "else", ":", "\n", "            ", "scale", "=", "self", ".", "img_size", "/", "width", "\n", "resized_height", "=", "int", "(", "height", "*", "scale", ")", "\n", "resized_width", "=", "self", ".", "img_size", "\n", "\n", "", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "resized_width", ",", "resized_height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "new_image", "=", "np", ".", "zeros", "(", "(", "self", ".", "img_size", ",", "self", ".", "img_size", ",", "3", ")", ")", "\n", "new_image", "[", "0", ":", "resized_height", ",", "0", ":", "resized_width", "]", "=", "image", "\n", "\n", "annots", "[", ":", ",", ":", "4", "]", "*=", "scale", "\n", "\n", "return", "{", "'img'", ":", "torch", ".", "from_numpy", "(", "new_image", ")", ".", "to", "(", "torch", ".", "float32", ")", ",", "'annot'", ":", "torch", ".", "from_numpy", "(", "annots", ")", ",", "'scale'", ":", "scale", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.Augmenter.__call__": [[141, 159], ["numpy.random.rand", "annots[].copy", "annots[].copy", "annots[].copy.copy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ",", "flip_x", "=", "0.5", ")", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "flip_x", ":", "\n", "            ", "image", ",", "annots", "=", "sample", "[", "'img'", "]", ",", "sample", "[", "'annot'", "]", "\n", "image", "=", "image", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "\n", "rows", ",", "cols", ",", "channels", "=", "image", ".", "shape", "\n", "\n", "x1", "=", "annots", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "\n", "x2", "=", "annots", "[", ":", ",", "2", "]", ".", "copy", "(", ")", "\n", "\n", "x_tmp", "=", "x1", ".", "copy", "(", ")", "\n", "\n", "annots", "[", ":", ",", "0", "]", "=", "cols", "-", "x2", "\n", "annots", "[", ":", ",", "2", "]", "=", "cols", "-", "x_tmp", "\n", "\n", "sample", "=", "{", "'img'", ":", "image", ",", "'annot'", ":", "annots", "}", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.Normalizer.__init__": [[163, 166], ["numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "array", "(", "[", "[", "mean", "]", "]", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "[", "[", "std", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.Normalizer.__call__": [[167, 171], ["image.astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "annots", "=", "sample", "[", "'img'", "]", ",", "sample", "[", "'annot'", "]", "\n", "\n", "return", "{", "'img'", ":", "(", "(", "image", ".", "astype", "(", "np", ".", "float32", ")", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", ",", "'annot'", ":", "annots", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.dataset.collater": [[86, 108], ["torch.from_numpy", "max", "imgs.permute.permute", "numpy.stack", "enumerate", "torch.ones", "torch.ones", "len", "len"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max"], ["", "", "def", "collater", "(", "data", ")", ":", "\n", "    ", "imgs", "=", "[", "s", "[", "'img'", "]", "for", "s", "in", "data", "]", "\n", "annots", "=", "[", "s", "[", "'annot'", "]", "for", "s", "in", "data", "]", "\n", "scales", "=", "[", "s", "[", "'scale'", "]", "for", "s", "in", "data", "]", "\n", "\n", "imgs", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "imgs", ",", "axis", "=", "0", ")", ")", "\n", "\n", "max_num_annots", "=", "max", "(", "annot", ".", "shape", "[", "0", "]", "for", "annot", "in", "annots", ")", "\n", "\n", "if", "max_num_annots", ">", "0", ":", "\n", "\n", "        ", "annot_padded", "=", "torch", ".", "ones", "(", "(", "len", "(", "annots", ")", ",", "max_num_annots", ",", "5", ")", ")", "*", "-", "1", "\n", "\n", "for", "idx", ",", "annot", "in", "enumerate", "(", "annots", ")", ":", "\n", "            ", "if", "annot", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "annot_padded", "[", "idx", ",", ":", "annot", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "annot", "\n", "", "", "", "else", ":", "\n", "        ", "annot_padded", "=", "torch", ".", "ones", "(", "(", "len", "(", "annots", ")", ",", "1", ",", "5", ")", ")", "*", "-", "1", "\n", "\n", "", "imgs", "=", "imgs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "return", "{", "'img'", ":", "imgs", ",", "'annot'", ":", "annot_padded", ",", "'scale'", ":", "scales", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.loss.FocalLoss.__init__": [[28, 30], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.loss.FocalLoss.forward": [[31, 187], ["range", "kwargs.get", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "loss.calc_iou", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge.sum", "torch.ge.sum", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.where", "torch.where", "torch.where", "torch.where", "classification_losses.append", "models.efficientdet.model_utils.BBoxTransform", "models.efficientdet.model_utils.ClipBoxes", "kwargs.get", "models.efficientdet.utils.utils.postprocess", "imgs.permute().cpu().numpy.permute().cpu().numpy.permute().cpu().numpy", "models.efficientdet.utils.utils.display", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "targets.t.t.cuda", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "alpha_factor.cuda.cuda.cuda", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "zeros.cuda.cuda.cuda", "torch.ne", "torch.ne", "torch.ne", "torch.ne", "torch.ge.sum", "torch.ge.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "targets.t.t.t", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.where", "torch.where", "torch.where", "torch.where", "regression_losses.append", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "imgs.permute().cpu().numpy.permute().cpu().numpy.detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "torch.stack().detach", "regressions.detach", "classifications.detach", "cv2.cvtColor", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "[].unsqueeze", "alpha_factor.cuda.cuda.cuda", "regression_losses.append", "classification_losses.append", "regression_losses.append", "classification_losses.append", "torch.where.sum", "torch.where.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.le", "torch.le", "torch.le", "torch.le", "torch.where.mean", "torch.where.mean", "regression_losses.append", "regression_losses.append", "imgs.permute().cpu().numpy.permute().cpu().numpy.permute().cpu", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.where.sum", "torch.where.sum", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.where.sum", "torch.where.sum", "torch.lt", "torch.lt", "torch.lt", "torch.lt", "assigned_annotations[].long", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.ge.sum.to", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to().cuda", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "imgs.permute().cpu().numpy.permute().cpu().numpy.permute", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.loss.calc_iou", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.postprocess", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.display"], ["", "def", "forward", "(", "self", ",", "classifications", ",", "regressions", ",", "anchors", ",", "annotations", ",", "**", "kwargs", ")", ":", "\n", "        ", "alpha", "=", "0.25", "\n", "gamma", "=", "2.0", "\n", "batch_size", "=", "classifications", ".", "shape", "[", "0", "]", "\n", "classification_losses", "=", "[", "]", "\n", "regression_losses", "=", "[", "]", "\n", "\n", "anchor", "=", "anchors", "[", "0", ",", ":", ",", ":", "]", "# assuming all image sizes are the same, which it is", "\n", "dtype", "=", "anchors", ".", "dtype", "\n", "\n", "anchor_widths", "=", "anchor", "[", ":", ",", "3", "]", "-", "anchor", "[", ":", ",", "1", "]", "\n", "anchor_heights", "=", "anchor", "[", ":", ",", "2", "]", "-", "anchor", "[", ":", ",", "0", "]", "\n", "anchor_ctr_x", "=", "anchor", "[", ":", ",", "1", "]", "+", "0.5", "*", "anchor_widths", "\n", "anchor_ctr_y", "=", "anchor", "[", ":", ",", "0", "]", "+", "0.5", "*", "anchor_heights", "\n", "\n", "for", "j", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "classification", "=", "classifications", "[", "j", ",", ":", ",", ":", "]", "\n", "regression", "=", "regressions", "[", "j", ",", ":", ",", ":", "]", "\n", "\n", "boxes", "=", "annotations", "[", "j", "]", "[", "'boxes'", "]", "\n", "labels", "=", "annotations", "[", "j", "]", "[", "'labels'", "]", ".", "unsqueeze", "(", "0", ")", ".", "T", "-", "1", "\n", "bbox_annotation", "=", "torch", ".", "cat", "(", "(", "boxes", ",", "labels", ")", ",", "-", "1", ")", "\n", "excluded", "=", "bbox_annotation", "[", "bbox_annotation", "[", ":", ",", "4", "]", "==", "-", "1", "]", "\n", "bbox_annotation", "=", "bbox_annotation", "[", "bbox_annotation", "[", ":", ",", "4", "]", "!=", "-", "1", "]", "\n", "\n", "\n", "\n", "classification", "=", "torch", ".", "clamp", "(", "classification", ",", "1e-4", ",", "1.0", "-", "1e-4", ")", "\n", "\n", "if", "bbox_annotation", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "\n", "                    ", "alpha_factor", "=", "torch", ".", "ones_like", "(", "classification", ")", "*", "alpha", "\n", "alpha_factor", "=", "alpha_factor", ".", "cuda", "(", ")", "\n", "alpha_factor", "=", "1.", "-", "alpha_factor", "\n", "focal_weight", "=", "classification", "\n", "focal_weight", "=", "alpha_factor", "*", "torch", ".", "pow", "(", "focal_weight", ",", "gamma", ")", "\n", "\n", "bce", "=", "-", "(", "torch", ".", "log", "(", "1.0", "-", "classification", ")", ")", "\n", "\n", "cls_loss", "=", "focal_weight", "*", "bce", "\n", "\n", "regression_losses", ".", "append", "(", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "dtype", ")", ".", "cuda", "(", ")", ")", "\n", "classification_losses", ".", "append", "(", "cls_loss", ".", "sum", "(", ")", ")", "\n", "", "else", ":", "\n", "\n", "                    ", "alpha_factor", "=", "torch", ".", "ones_like", "(", "classification", ")", "*", "alpha", "\n", "alpha_factor", "=", "1.", "-", "alpha_factor", "\n", "focal_weight", "=", "classification", "\n", "focal_weight", "=", "alpha_factor", "*", "torch", ".", "pow", "(", "focal_weight", ",", "gamma", ")", "\n", "\n", "bce", "=", "-", "(", "torch", ".", "log", "(", "1.0", "-", "classification", ")", ")", "\n", "\n", "cls_loss", "=", "focal_weight", "*", "bce", "\n", "\n", "regression_losses", ".", "append", "(", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "dtype", ")", ")", "\n", "classification_losses", ".", "append", "(", "cls_loss", ".", "sum", "(", ")", ")", "\n", "\n", "", "continue", "\n", "\n", "", "IoU", "=", "calc_iou", "(", "anchor", "[", ":", ",", ":", "]", ",", "bbox_annotation", "[", ":", ",", ":", "4", "]", ")", "\n", "\n", "IoU_max", ",", "IoU_argmax", "=", "torch", ".", "max", "(", "IoU", ",", "dim", "=", "1", ")", "\n", "\n", "# compute the loss for classification", "\n", "targets", "=", "torch", ".", "ones_like", "(", "classification", ")", "*", "-", "1", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "\n", "", "targets", "[", "torch", ".", "lt", "(", "IoU_max", ",", "0.4", ")", ",", ":", "]", "=", "0", "\n", "\n", "positive_indices", "=", "torch", ".", "ge", "(", "IoU_max", ",", "0.5", ")", "\n", "\n", "num_positive_anchors", "=", "positive_indices", ".", "sum", "(", ")", "\n", "\n", "assigned_annotations", "=", "bbox_annotation", "[", "IoU_argmax", ",", ":", "]", "\n", "\n", "targets", "[", "positive_indices", ",", ":", "]", "=", "0", "\n", "targets", "[", "positive_indices", ",", "assigned_annotations", "[", "positive_indices", ",", "4", "]", ".", "long", "(", ")", "]", "=", "1", "\n", "\n", "alpha_factor", "=", "torch", ".", "ones_like", "(", "targets", ")", "*", "alpha", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "alpha_factor", "=", "alpha_factor", ".", "cuda", "(", ")", "\n", "\n", "", "alpha_factor", "=", "torch", ".", "where", "(", "torch", ".", "eq", "(", "targets", ",", "1.", ")", ",", "alpha_factor", ",", "1.", "-", "alpha_factor", ")", "\n", "focal_weight", "=", "torch", ".", "where", "(", "torch", ".", "eq", "(", "targets", ",", "1.", ")", ",", "1.", "-", "classification", ",", "classification", ")", "\n", "focal_weight", "=", "alpha_factor", "*", "torch", ".", "pow", "(", "focal_weight", ",", "gamma", ")", "\n", "\n", "bce", "=", "-", "(", "targets", "*", "torch", ".", "log", "(", "classification", ")", "+", "(", "1.0", "-", "targets", ")", "*", "torch", ".", "log", "(", "1.0", "-", "classification", ")", ")", "\n", "\n", "cls_loss", "=", "focal_weight", "*", "bce", "\n", "\n", "zeros", "=", "torch", ".", "zeros_like", "(", "cls_loss", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "zeros", "=", "zeros", ".", "cuda", "(", ")", "\n", "", "cls_loss", "=", "torch", ".", "where", "(", "torch", ".", "ne", "(", "targets", ",", "-", "1.0", ")", ",", "cls_loss", ",", "zeros", ")", "\n", "\n", "classification_losses", ".", "append", "(", "cls_loss", ".", "sum", "(", ")", "/", "torch", ".", "clamp", "(", "num_positive_anchors", ".", "to", "(", "dtype", ")", ",", "min", "=", "1.0", ")", ")", "\n", "\n", "# print(positive_indices)", "\n", "if", "positive_indices", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "assigned_annotations", "=", "assigned_annotations", "[", "positive_indices", ",", ":", "]", "\n", "\n", "anchor_widths_pi", "=", "anchor_widths", "[", "positive_indices", "]", "\n", "anchor_heights_pi", "=", "anchor_heights", "[", "positive_indices", "]", "\n", "anchor_ctr_x_pi", "=", "anchor_ctr_x", "[", "positive_indices", "]", "\n", "anchor_ctr_y_pi", "=", "anchor_ctr_y", "[", "positive_indices", "]", "\n", "\n", "gt_widths", "=", "assigned_annotations", "[", ":", ",", "2", "]", "-", "assigned_annotations", "[", ":", ",", "0", "]", "\n", "gt_heights", "=", "assigned_annotations", "[", ":", ",", "3", "]", "-", "assigned_annotations", "[", ":", ",", "1", "]", "\n", "gt_ctr_x", "=", "assigned_annotations", "[", ":", ",", "0", "]", "+", "0.5", "*", "gt_widths", "\n", "gt_ctr_y", "=", "assigned_annotations", "[", ":", ",", "1", "]", "+", "0.5", "*", "gt_heights", "\n", "\n", "# efficientdet style", "\n", "gt_widths", "=", "torch", ".", "clamp", "(", "gt_widths", ",", "min", "=", "1", ")", "\n", "gt_heights", "=", "torch", ".", "clamp", "(", "gt_heights", ",", "min", "=", "1", ")", "\n", "\n", "targets_dx", "=", "(", "gt_ctr_x", "-", "anchor_ctr_x_pi", ")", "/", "anchor_widths_pi", "\n", "targets_dy", "=", "(", "gt_ctr_y", "-", "anchor_ctr_y_pi", ")", "/", "anchor_heights_pi", "\n", "targets_dw", "=", "torch", ".", "log", "(", "gt_widths", "/", "anchor_widths_pi", ")", "\n", "targets_dh", "=", "torch", ".", "log", "(", "gt_heights", "/", "anchor_heights_pi", ")", "\n", "\n", "targets", "=", "torch", ".", "stack", "(", "(", "targets_dy", ",", "targets_dx", ",", "targets_dh", ",", "targets_dw", ")", ")", "\n", "targets", "=", "targets", ".", "t", "(", ")", "\n", "\n", "regression_diff", "=", "torch", ".", "abs", "(", "targets", "-", "regression", "[", "positive_indices", ",", ":", "]", ")", "\n", "\n", "regression_loss", "=", "torch", ".", "where", "(", "\n", "torch", ".", "le", "(", "regression_diff", ",", "1.0", "/", "9.0", ")", ",", "\n", "0.5", "*", "9.0", "*", "torch", ".", "pow", "(", "regression_diff", ",", "2", ")", ",", "\n", "regression_diff", "-", "0.5", "/", "9.0", "\n", ")", "\n", "regression_losses", ".", "append", "(", "regression_loss", ".", "mean", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "regression_losses", ".", "append", "(", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "dtype", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "regression_losses", ".", "append", "(", "torch", ".", "tensor", "(", "0", ")", ".", "to", "(", "dtype", ")", ")", "\n", "\n", "# debug", "\n", "", "", "", "imgs", "=", "kwargs", ".", "get", "(", "'imgs'", ",", "None", ")", "\n", "if", "imgs", "is", "not", "None", ":", "\n", "            ", "regressBoxes", "=", "BBoxTransform", "(", ")", "\n", "clipBoxes", "=", "ClipBoxes", "(", ")", "\n", "obj_list", "=", "kwargs", ".", "get", "(", "'obj_list'", ",", "None", ")", "\n", "out", "=", "postprocess", "(", "imgs", ".", "detach", "(", ")", ",", "\n", "torch", ".", "stack", "(", "[", "anchors", "[", "0", "]", "]", "*", "imgs", ".", "shape", "[", "0", "]", ",", "0", ")", ".", "detach", "(", ")", ",", "regressions", ".", "detach", "(", ")", ",", "classifications", ".", "detach", "(", ")", ",", "\n", "regressBoxes", ",", "clipBoxes", ",", "\n", "0.5", ",", "0.3", ")", "\n", "imgs", "=", "imgs", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "imgs", "=", "(", "(", "imgs", "*", "[", "0.229", ",", "0.224", ",", "0.225", "]", "+", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imgs", "=", "[", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "for", "img", "in", "imgs", "]", "\n", "display", "(", "out", ",", "imgs", ",", "obj_list", ",", "imshow", "=", "False", ",", "imwrite", "=", "True", ")", "\n", "\n", "", "return", "torch", ".", "stack", "(", "classification_losses", ")", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ",", "torch", ".", "stack", "(", "regression_losses", ")", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "*", "50", "# https://github.com/google/automl/blob/6fdd1de778408625c1faf368a327fe36ecd41bf7/efficientdet/hparams_config.py#L233", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.loss.calc_iou": [[10, 25], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.min", "torch.min", "torch.max", "torch.max", "torch.min", "torch.min", "torch.max", "torch.max", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max"], ["def", "calc_iou", "(", "a", ",", "b", ")", ":", "\n", "# a(anchor) [boxes, (y1, x1, y2, x2)]", "\n", "# b(gt, coco-style) [boxes, (x1, y1, x2, y2)]", "\n", "\n", "    ", "area", "=", "(", "b", "[", ":", ",", "2", "]", "-", "b", "[", ":", ",", "0", "]", ")", "*", "(", "b", "[", ":", ",", "3", "]", "-", "b", "[", ":", ",", "1", "]", ")", "\n", "iw", "=", "torch", ".", "min", "(", "torch", ".", "unsqueeze", "(", "a", "[", ":", ",", "3", "]", ",", "dim", "=", "1", ")", ",", "b", "[", ":", ",", "2", "]", ")", "-", "torch", ".", "max", "(", "torch", ".", "unsqueeze", "(", "a", "[", ":", ",", "1", "]", ",", "1", ")", ",", "b", "[", ":", ",", "0", "]", ")", "\n", "ih", "=", "torch", ".", "min", "(", "torch", ".", "unsqueeze", "(", "a", "[", ":", ",", "2", "]", ",", "dim", "=", "1", ")", ",", "b", "[", ":", ",", "3", "]", ")", "-", "torch", ".", "max", "(", "torch", ".", "unsqueeze", "(", "a", "[", ":", ",", "0", "]", ",", "1", ")", ",", "b", "[", ":", ",", "1", "]", ")", "\n", "iw", "=", "torch", ".", "clamp", "(", "iw", ",", "min", "=", "0", ")", "\n", "ih", "=", "torch", ".", "clamp", "(", "ih", ",", "min", "=", "0", ")", "\n", "ua", "=", "torch", ".", "unsqueeze", "(", "(", "a", "[", ":", ",", "2", "]", "-", "a", "[", ":", ",", "0", "]", ")", "*", "(", "a", "[", ":", ",", "3", "]", "-", "a", "[", ":", ",", "1", "]", ")", ",", "dim", "=", "1", ")", "+", "area", "-", "iw", "*", "ih", "\n", "ua", "=", "torch", ".", "clamp", "(", "ua", ",", "min", "=", "1e-8", ")", "\n", "intersection", "=", "iw", "*", "ih", "\n", "IoU", "=", "intersection", "/", "ua", "\n", "\n", "return", "IoU", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.SeparableConvBlock.__init__": [[19, 41], ["torch.Module.__init__", "models.efficientdet.efficientnet.utils_extra.Conv2dStaticSamePadding", "models.efficientdet.efficientnet.utils_extra.Conv2dStaticSamePadding", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.efficientdet.efficientnet.utils.MemoryEfficientSwish", "models.efficientdet.efficientnet.utils.Swish"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", "=", "None", ",", "norm", "=", "True", ",", "activation", "=", "False", ",", "onnx_export", "=", "False", ")", ":", "\n", "        ", "super", "(", "SeparableConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "out_channels", "is", "None", ":", "\n", "            ", "out_channels", "=", "in_channels", "\n", "\n", "# Q: whether separate conv", "\n", "#  share bias between depthwise_conv and pointwise_conv", "\n", "#  or just pointwise_conv apply bias.", "\n", "# A: Confirmed, just pointwise_conv applies bias, depthwise_conv has no bias.", "\n", "\n", "", "self", ".", "depthwise_conv", "=", "Conv2dStaticSamePadding", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "pointwise_conv", "=", "Conv2dStaticSamePadding", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "norm", "=", "norm", "\n", "if", "self", ".", "norm", ":", "\n", "# Warning: pytorch momentum is different from tensorflow's, momentum_pytorch = 1 - momentum_tensorflow", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_channels", ",", "momentum", "=", "0.01", ",", "eps", "=", "1e-3", ")", "\n", "\n", "", "self", ".", "activation", "=", "activation", "\n", "if", "self", ".", "activation", ":", "\n", "            ", "self", ".", "swish", "=", "MemoryEfficientSwish", "(", ")", "if", "not", "onnx_export", "else", "Swish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.SeparableConvBlock.forward": [[42, 53], ["model.SeparableConvBlock.depthwise_conv", "model.SeparableConvBlock.pointwise_conv", "model.SeparableConvBlock.bn", "model.SeparableConvBlock.swish"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "depthwise_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise_conv", "(", "x", ")", "\n", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "self", ".", "swish", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.BiFPN.__init__": [[60, 162], ["torch.Module.__init__", "model.SeparableConvBlock", "model.SeparableConvBlock", "model.SeparableConvBlock", "model.SeparableConvBlock", "model.SeparableConvBlock", "model.SeparableConvBlock", "model.SeparableConvBlock", "model.SeparableConvBlock", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "models.efficientdet.efficientnet.utils_extra.MaxPool2dStaticSamePadding", "models.efficientdet.efficientnet.utils_extra.MaxPool2dStaticSamePadding", "models.efficientdet.efficientnet.utils_extra.MaxPool2dStaticSamePadding", "models.efficientdet.efficientnet.utils_extra.MaxPool2dStaticSamePadding", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "model.SeparableConvBlock", "model.SeparableConvBlock", "torch.Upsample", "torch.Upsample", "models.efficientdet.efficientnet.utils_extra.MaxPool2dStaticSamePadding", "models.efficientdet.efficientnet.utils.MemoryEfficientSwish", "models.efficientdet.efficientnet.utils.Swish", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "models.efficientdet.efficientnet.utils_extra.Conv2dStaticSamePadding", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.efficientdet.efficientnet.utils_extra.Conv2dStaticSamePadding", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.efficientdet.efficientnet.utils_extra.Conv2dStaticSamePadding", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.efficientdet.efficientnet.utils_extra.Conv2dStaticSamePadding", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.efficientdet.efficientnet.utils_extra.MaxPool2dStaticSamePadding", "models.efficientdet.efficientnet.utils_extra.MaxPool2dStaticSamePadding", "torch.Sequential", "torch.Sequential", "models.efficientdet.efficientnet.utils_extra.Conv2dStaticSamePadding", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.efficientdet.efficientnet.utils_extra.Conv2dStaticSamePadding", "torch.BatchNorm2d", "torch.BatchNorm2d", "models.efficientdet.efficientnet.utils_extra.MaxPool2dStaticSamePadding"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["def", "__init__", "(", "self", ",", "num_channels", ",", "conv_channels", ",", "first_time", "=", "False", ",", "epsilon", "=", "1e-4", ",", "onnx_export", "=", "False", ",", "attention", "=", "True", ",", "\n", "use_p8", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            num_channels:\n            conv_channels:\n            first_time: whether the input comes directly from the efficientnet,\n                        if True, downchannel it first, and downsample P5 to generate P6 then P7\n            epsilon: epsilon of fast weighted attention sum of BiFPN, not the BN's epsilon\n            onnx_export: if True, use Swish instead of MemoryEfficientSwish\n        \"\"\"", "\n", "super", "(", "BiFPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "use_p8", "=", "use_p8", "\n", "\n", "# Conv layers", "\n", "self", ".", "conv6_up", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv5_up", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv4_up", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv3_up", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv4_down", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv5_down", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv6_down", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv7_down", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "if", "use_p8", ":", "\n", "            ", "self", ".", "conv7_up", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv8_down", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "\n", "# Feature scaling layers", "\n", "", "self", ".", "p6_upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "p5_upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "p4_upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "p3_upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "self", ".", "p4_downsample", "=", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", "self", ".", "p5_downsample", "=", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", "self", ".", "p6_downsample", "=", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", "self", ".", "p7_downsample", "=", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", "if", "use_p8", ":", "\n", "            ", "self", ".", "p7_upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "p8_downsample", "=", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", "\n", "", "self", ".", "swish", "=", "MemoryEfficientSwish", "(", ")", "if", "not", "onnx_export", "else", "Swish", "(", ")", "\n", "\n", "self", ".", "first_time", "=", "first_time", "\n", "if", "self", ".", "first_time", ":", "\n", "            ", "self", ".", "p5_down_channel", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dStaticSamePadding", "(", "conv_channels", "[", "2", "]", ",", "num_channels", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", ",", "momentum", "=", "0.01", ",", "eps", "=", "1e-3", ")", ",", "\n", ")", "\n", "self", ".", "p4_down_channel", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dStaticSamePadding", "(", "conv_channels", "[", "1", "]", ",", "num_channels", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", ",", "momentum", "=", "0.01", ",", "eps", "=", "1e-3", ")", ",", "\n", ")", "\n", "self", ".", "p3_down_channel", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dStaticSamePadding", "(", "conv_channels", "[", "0", "]", ",", "num_channels", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", ",", "momentum", "=", "0.01", ",", "eps", "=", "1e-3", ")", ",", "\n", ")", "\n", "\n", "self", ".", "p5_to_p6", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dStaticSamePadding", "(", "conv_channels", "[", "2", "]", ",", "num_channels", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", ",", "momentum", "=", "0.01", ",", "eps", "=", "1e-3", ")", ",", "\n", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", ")", "\n", "self", ".", "p6_to_p7", "=", "nn", ".", "Sequential", "(", "\n", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", ")", "\n", "if", "use_p8", ":", "\n", "                ", "self", ".", "p7_to_p8", "=", "nn", ".", "Sequential", "(", "\n", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", ")", "\n", "\n", "", "self", ".", "p4_down_channel_2", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dStaticSamePadding", "(", "conv_channels", "[", "1", "]", ",", "num_channels", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", ",", "momentum", "=", "0.01", ",", "eps", "=", "1e-3", ")", ",", "\n", ")", "\n", "self", ".", "p5_down_channel_2", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dStaticSamePadding", "(", "conv_channels", "[", "2", "]", ",", "num_channels", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", ",", "momentum", "=", "0.01", ",", "eps", "=", "1e-3", ")", ",", "\n", ")", "\n", "\n", "# Weight", "\n", "", "self", ".", "p6_w1", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p6_w1_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "p5_w1", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p5_w1_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "p4_w1", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p4_w1_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "p3_w1", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p3_w1_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "p4_w2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "3", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p4_w2_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "p5_w2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "3", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p5_w2_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "p6_w2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "3", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p6_w2_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "p7_w2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p7_w2_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "attention", "=", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.BiFPN.forward": [[163, 193], ["model.BiFPN._forward_fast_attention", "model.BiFPN._forward"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.BiFPN._forward_fast_attention", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.BiFPN._forward"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        illustration of a minimal bifpn unit\n            P7_0 -------------------------> P7_2 -------->\n               |-------------|                \u2191\n                             \u2193                |\n            P6_0 ---------> P6_1 ---------> P6_2 -------->\n               |-------------|--------------\u2191 \u2191\n                             \u2193                |\n            P5_0 ---------> P5_1 ---------> P5_2 -------->\n               |-------------|--------------\u2191 \u2191\n                             \u2193                |\n            P4_0 ---------> P4_1 ---------> P4_2 -------->\n               |-------------|--------------\u2191 \u2191\n                             |--------------\u2193 |\n            P3_0 -------------------------> P3_2 -------->\n        \"\"\"", "\n", "\n", "# downsample channels using same-padding conv2d to target phase's if not the same", "\n", "# judge: same phase as target,", "\n", "# if same, pass;", "\n", "# elif earlier phase, downsample to target phase's by pooling", "\n", "# elif later phase, upsample to target phase's by nearest interpolation", "\n", "\n", "if", "self", ".", "attention", ":", "\n", "            ", "outs", "=", "self", ".", "_forward_fast_attention", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "outs", "=", "self", ".", "_forward", "(", "inputs", ")", "\n", "\n", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.BiFPN._forward_fast_attention": [[194, 267], ["model.BiFPN.p6_w1_relu", "model.BiFPN.conv6_up", "model.BiFPN.p5_w1_relu", "model.BiFPN.conv5_up", "model.BiFPN.p4_w1_relu", "model.BiFPN.conv4_up", "model.BiFPN.p3_w1_relu", "model.BiFPN.conv3_up", "model.BiFPN.p4_w2_relu", "model.BiFPN.conv4_down", "model.BiFPN.p5_w2_relu", "model.BiFPN.conv5_down", "model.BiFPN.p6_w2_relu", "model.BiFPN.conv6_down", "model.BiFPN.p7_w2_relu", "model.BiFPN.conv7_down", "model.BiFPN.p5_to_p6", "model.BiFPN.p6_to_p7", "model.BiFPN.p3_down_channel", "model.BiFPN.p4_down_channel", "model.BiFPN.p5_down_channel", "model.BiFPN.swish", "model.BiFPN.swish", "model.BiFPN.swish", "model.BiFPN.swish", "model.BiFPN.p4_down_channel_2", "model.BiFPN.p5_down_channel_2", "model.BiFPN.swish", "model.BiFPN.swish", "model.BiFPN.swish", "model.BiFPN.swish", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model.BiFPN.p6_upsample", "model.BiFPN.p5_upsample", "model.BiFPN.p4_upsample", "model.BiFPN.p3_upsample", "model.BiFPN.p4_downsample", "model.BiFPN.p5_downsample", "model.BiFPN.p6_downsample", "model.BiFPN.p7_downsample"], "methods", ["None"], ["", "def", "_forward_fast_attention", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "first_time", ":", "\n", "            ", "p3", ",", "p4", ",", "p5", "=", "inputs", "\n", "\n", "p6_in", "=", "self", ".", "p5_to_p6", "(", "p5", ")", "\n", "p7_in", "=", "self", ".", "p6_to_p7", "(", "p6_in", ")", "\n", "\n", "p3_in", "=", "self", ".", "p3_down_channel", "(", "p3", ")", "\n", "p4_in", "=", "self", ".", "p4_down_channel", "(", "p4", ")", "\n", "p5_in", "=", "self", ".", "p5_down_channel", "(", "p5", ")", "\n", "\n", "", "else", ":", "\n", "# P3_0, P4_0, P5_0, P6_0 and P7_0", "\n", "            ", "p3_in", ",", "p4_in", ",", "p5_in", ",", "p6_in", ",", "p7_in", "=", "inputs", "\n", "\n", "# P7_0 to P7_2", "\n", "\n", "# Weights for P6_0 and P7_0 to P6_1", "\n", "", "p6_w1", "=", "self", ".", "p6_w1_relu", "(", "self", ".", "p6_w1", ")", "\n", "weight", "=", "p6_w1", "/", "(", "torch", ".", "sum", "(", "p6_w1", ",", "dim", "=", "0", ")", "+", "self", ".", "epsilon", ")", "\n", "# Connections for P6_0 and P7_0 to P6_1 respectively", "\n", "p6_up", "=", "self", ".", "conv6_up", "(", "self", ".", "swish", "(", "weight", "[", "0", "]", "*", "p6_in", "+", "weight", "[", "1", "]", "*", "self", ".", "p6_upsample", "(", "p7_in", ")", ")", ")", "\n", "\n", "# Weights for P5_0 and P6_1 to P5_1", "\n", "p5_w1", "=", "self", ".", "p5_w1_relu", "(", "self", ".", "p5_w1", ")", "\n", "weight", "=", "p5_w1", "/", "(", "torch", ".", "sum", "(", "p5_w1", ",", "dim", "=", "0", ")", "+", "self", ".", "epsilon", ")", "\n", "# Connections for P5_0 and P6_1 to P5_1 respectively", "\n", "p5_up", "=", "self", ".", "conv5_up", "(", "self", ".", "swish", "(", "weight", "[", "0", "]", "*", "p5_in", "+", "weight", "[", "1", "]", "*", "self", ".", "p5_upsample", "(", "p6_up", ")", ")", ")", "\n", "\n", "# Weights for P4_0 and P5_1 to P4_1", "\n", "p4_w1", "=", "self", ".", "p4_w1_relu", "(", "self", ".", "p4_w1", ")", "\n", "weight", "=", "p4_w1", "/", "(", "torch", ".", "sum", "(", "p4_w1", ",", "dim", "=", "0", ")", "+", "self", ".", "epsilon", ")", "\n", "# Connections for P4_0 and P5_1 to P4_1 respectively", "\n", "p4_up", "=", "self", ".", "conv4_up", "(", "self", ".", "swish", "(", "weight", "[", "0", "]", "*", "p4_in", "+", "weight", "[", "1", "]", "*", "self", ".", "p4_upsample", "(", "p5_up", ")", ")", ")", "\n", "\n", "# Weights for P3_0 and P4_1 to P3_2", "\n", "p3_w1", "=", "self", ".", "p3_w1_relu", "(", "self", ".", "p3_w1", ")", "\n", "weight", "=", "p3_w1", "/", "(", "torch", ".", "sum", "(", "p3_w1", ",", "dim", "=", "0", ")", "+", "self", ".", "epsilon", ")", "\n", "# Connections for P3_0 and P4_1 to P3_2 respectively", "\n", "p3_out", "=", "self", ".", "conv3_up", "(", "self", ".", "swish", "(", "weight", "[", "0", "]", "*", "p3_in", "+", "weight", "[", "1", "]", "*", "self", ".", "p3_upsample", "(", "p4_up", ")", ")", ")", "\n", "\n", "if", "self", ".", "first_time", ":", "\n", "            ", "p4_in", "=", "self", ".", "p4_down_channel_2", "(", "p4", ")", "\n", "p5_in", "=", "self", ".", "p5_down_channel_2", "(", "p5", ")", "\n", "\n", "# Weights for P4_0, P4_1 and P3_2 to P4_2", "\n", "", "p4_w2", "=", "self", ".", "p4_w2_relu", "(", "self", ".", "p4_w2", ")", "\n", "weight", "=", "p4_w2", "/", "(", "torch", ".", "sum", "(", "p4_w2", ",", "dim", "=", "0", ")", "+", "self", ".", "epsilon", ")", "\n", "# Connections for P4_0, P4_1 and P3_2 to P4_2 respectively", "\n", "p4_out", "=", "self", ".", "conv4_down", "(", "\n", "self", ".", "swish", "(", "weight", "[", "0", "]", "*", "p4_in", "+", "weight", "[", "1", "]", "*", "p4_up", "+", "weight", "[", "2", "]", "*", "self", ".", "p4_downsample", "(", "p3_out", ")", ")", ")", "\n", "\n", "# Weights for P5_0, P5_1 and P4_2 to P5_2", "\n", "p5_w2", "=", "self", ".", "p5_w2_relu", "(", "self", ".", "p5_w2", ")", "\n", "weight", "=", "p5_w2", "/", "(", "torch", ".", "sum", "(", "p5_w2", ",", "dim", "=", "0", ")", "+", "self", ".", "epsilon", ")", "\n", "# Connections for P5_0, P5_1 and P4_2 to P5_2 respectively", "\n", "p5_out", "=", "self", ".", "conv5_down", "(", "\n", "self", ".", "swish", "(", "weight", "[", "0", "]", "*", "p5_in", "+", "weight", "[", "1", "]", "*", "p5_up", "+", "weight", "[", "2", "]", "*", "self", ".", "p5_downsample", "(", "p4_out", ")", ")", ")", "\n", "\n", "# Weights for P6_0, P6_1 and P5_2 to P6_2", "\n", "p6_w2", "=", "self", ".", "p6_w2_relu", "(", "self", ".", "p6_w2", ")", "\n", "weight", "=", "p6_w2", "/", "(", "torch", ".", "sum", "(", "p6_w2", ",", "dim", "=", "0", ")", "+", "self", ".", "epsilon", ")", "\n", "# Connections for P6_0, P6_1 and P5_2 to P6_2 respectively", "\n", "p6_out", "=", "self", ".", "conv6_down", "(", "\n", "self", ".", "swish", "(", "weight", "[", "0", "]", "*", "p6_in", "+", "weight", "[", "1", "]", "*", "p6_up", "+", "weight", "[", "2", "]", "*", "self", ".", "p6_downsample", "(", "p5_out", ")", ")", ")", "\n", "\n", "# Weights for P7_0 and P6_2 to P7_2", "\n", "p7_w2", "=", "self", ".", "p7_w2_relu", "(", "self", ".", "p7_w2", ")", "\n", "weight", "=", "p7_w2", "/", "(", "torch", ".", "sum", "(", "p7_w2", ",", "dim", "=", "0", ")", "+", "self", ".", "epsilon", ")", "\n", "# Connections for P7_0 and P6_2 to P7_2", "\n", "p7_out", "=", "self", ".", "conv7_down", "(", "self", ".", "swish", "(", "weight", "[", "0", "]", "*", "p7_in", "+", "weight", "[", "1", "]", "*", "self", ".", "p7_downsample", "(", "p6_out", ")", ")", ")", "\n", "\n", "return", "p3_out", ",", "p4_out", ",", "p5_out", ",", "p6_out", ",", "p7_out", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.BiFPN._forward": [[268, 342], ["model.BiFPN.conv5_up", "model.BiFPN.conv4_up", "model.BiFPN.conv3_up", "model.BiFPN.conv4_down", "model.BiFPN.conv5_down", "model.BiFPN.conv6_down", "model.BiFPN.p5_to_p6", "model.BiFPN.p6_to_p7", "model.BiFPN.p3_down_channel", "model.BiFPN.p4_down_channel", "model.BiFPN.p5_down_channel", "model.BiFPN.conv7_up", "model.BiFPN.conv6_up", "model.BiFPN.conv6_up", "model.BiFPN.swish", "model.BiFPN.swish", "model.BiFPN.swish", "model.BiFPN.p4_down_channel_2", "model.BiFPN.p5_down_channel_2", "model.BiFPN.swish", "model.BiFPN.swish", "model.BiFPN.swish", "model.BiFPN.conv7_down", "model.BiFPN.conv8_down", "model.BiFPN.conv7_down", "model.BiFPN.p7_to_p8", "model.BiFPN.swish", "model.BiFPN.swish", "model.BiFPN.swish", "model.BiFPN.swish", "model.BiFPN.swish", "model.BiFPN.swish", "model.BiFPN.p5_upsample", "model.BiFPN.p4_upsample", "model.BiFPN.p3_upsample", "model.BiFPN.p4_downsample", "model.BiFPN.p5_downsample", "model.BiFPN.p6_downsample", "model.BiFPN.p7_upsample", "model.BiFPN.p6_upsample", "model.BiFPN.p6_upsample", "model.BiFPN.p7_downsample", "model.BiFPN.p8_downsample", "model.BiFPN.p7_downsample"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "first_time", ":", "\n", "            ", "p3", ",", "p4", ",", "p5", "=", "inputs", "\n", "\n", "p6_in", "=", "self", ".", "p5_to_p6", "(", "p5", ")", "\n", "p7_in", "=", "self", ".", "p6_to_p7", "(", "p6_in", ")", "\n", "if", "self", ".", "use_p8", ":", "\n", "                ", "p8_in", "=", "self", ".", "p7_to_p8", "(", "p7_in", ")", "\n", "\n", "", "p3_in", "=", "self", ".", "p3_down_channel", "(", "p3", ")", "\n", "p4_in", "=", "self", ".", "p4_down_channel", "(", "p4", ")", "\n", "p5_in", "=", "self", ".", "p5_down_channel", "(", "p5", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "use_p8", ":", "\n", "# P3_0, P4_0, P5_0, P6_0, P7_0 and P8_0", "\n", "                ", "p3_in", ",", "p4_in", ",", "p5_in", ",", "p6_in", ",", "p7_in", ",", "p8_in", "=", "inputs", "\n", "", "else", ":", "\n", "# P3_0, P4_0, P5_0, P6_0 and P7_0", "\n", "                ", "p3_in", ",", "p4_in", ",", "p5_in", ",", "p6_in", ",", "p7_in", "=", "inputs", "\n", "\n", "", "", "if", "self", ".", "use_p8", ":", "\n", "# P8_0 to P8_2", "\n", "\n", "# Connections for P7_0 and P8_0 to P7_1 respectively", "\n", "            ", "p7_up", "=", "self", ".", "conv7_up", "(", "self", ".", "swish", "(", "p7_in", "+", "self", ".", "p7_upsample", "(", "p8_in", ")", ")", ")", "\n", "\n", "# Connections for P6_0 and P7_0 to P6_1 respectively", "\n", "p6_up", "=", "self", ".", "conv6_up", "(", "self", ".", "swish", "(", "p6_in", "+", "self", ".", "p6_upsample", "(", "p7_up", ")", ")", ")", "\n", "", "else", ":", "\n", "# P7_0 to P7_2", "\n", "\n", "# Connections for P6_0 and P7_0 to P6_1 respectively", "\n", "            ", "p6_up", "=", "self", ".", "conv6_up", "(", "self", ".", "swish", "(", "p6_in", "+", "self", ".", "p6_upsample", "(", "p7_in", ")", ")", ")", "\n", "\n", "# Connections for P5_0 and P6_1 to P5_1 respectively", "\n", "", "p5_up", "=", "self", ".", "conv5_up", "(", "self", ".", "swish", "(", "p5_in", "+", "self", ".", "p5_upsample", "(", "p6_up", ")", ")", ")", "\n", "\n", "# Connections for P4_0 and P5_1 to P4_1 respectively", "\n", "p4_up", "=", "self", ".", "conv4_up", "(", "self", ".", "swish", "(", "p4_in", "+", "self", ".", "p4_upsample", "(", "p5_up", ")", ")", ")", "\n", "\n", "# Connections for P3_0 and P4_1 to P3_2 respectively", "\n", "p3_out", "=", "self", ".", "conv3_up", "(", "self", ".", "swish", "(", "p3_in", "+", "self", ".", "p3_upsample", "(", "p4_up", ")", ")", ")", "\n", "\n", "if", "self", ".", "first_time", ":", "\n", "            ", "p4_in", "=", "self", ".", "p4_down_channel_2", "(", "p4", ")", "\n", "p5_in", "=", "self", ".", "p5_down_channel_2", "(", "p5", ")", "\n", "\n", "# Connections for P4_0, P4_1 and P3_2 to P4_2 respectively", "\n", "", "p4_out", "=", "self", ".", "conv4_down", "(", "\n", "self", ".", "swish", "(", "p4_in", "+", "p4_up", "+", "self", ".", "p4_downsample", "(", "p3_out", ")", ")", ")", "\n", "\n", "# Connections for P5_0, P5_1 and P4_2 to P5_2 respectively", "\n", "p5_out", "=", "self", ".", "conv5_down", "(", "\n", "self", ".", "swish", "(", "p5_in", "+", "p5_up", "+", "self", ".", "p5_downsample", "(", "p4_out", ")", ")", ")", "\n", "\n", "# Connections for P6_0, P6_1 and P5_2 to P6_2 respectively", "\n", "p6_out", "=", "self", ".", "conv6_down", "(", "\n", "self", ".", "swish", "(", "p6_in", "+", "p6_up", "+", "self", ".", "p6_downsample", "(", "p5_out", ")", ")", ")", "\n", "\n", "if", "self", ".", "use_p8", ":", "\n", "# Connections for P7_0, P7_1 and P6_2 to P7_2 respectively", "\n", "            ", "p7_out", "=", "self", ".", "conv7_down", "(", "\n", "self", ".", "swish", "(", "p7_in", "+", "p7_up", "+", "self", ".", "p7_downsample", "(", "p6_out", ")", ")", ")", "\n", "\n", "# Connections for P8_0 and P7_2 to P8_2", "\n", "p8_out", "=", "self", ".", "conv8_down", "(", "self", ".", "swish", "(", "p8_in", "+", "self", ".", "p8_downsample", "(", "p7_out", ")", ")", ")", "\n", "\n", "return", "p3_out", ",", "p4_out", ",", "p5_out", ",", "p6_out", ",", "p7_out", ",", "p8_out", "\n", "", "else", ":", "\n", "# Connections for P7_0 and P6_2 to P7_2", "\n", "            ", "p7_out", "=", "self", ".", "conv7_down", "(", "self", ".", "swish", "(", "p7_in", "+", "self", ".", "p7_downsample", "(", "p6_out", ")", ")", ")", "\n", "\n", "return", "p3_out", ",", "p4_out", ",", "p5_out", ",", "p6_out", ",", "p7_out", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.Regressor.__init__": [[349, 360], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model.SeparableConvBlock", "models.efficientdet.efficientnet.utils.MemoryEfficientSwish", "models.efficientdet.efficientnet.utils.Swish", "model.SeparableConvBlock", "torch.ModuleList", "torch.ModuleList", "range", "range", "torch.BatchNorm2d", "torch.BatchNorm2d", "range"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_anchors", ",", "num_layers", ",", "pyramid_levels", "=", "5", ",", "onnx_export", "=", "False", ")", ":", "\n", "        ", "super", "(", "Regressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "self", ".", "conv_list", "=", "nn", ".", "ModuleList", "(", "\n", "[", "SeparableConvBlock", "(", "in_channels", ",", "in_channels", ",", "norm", "=", "False", ",", "activation", "=", "False", ")", "for", "i", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "self", ".", "bn_list", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm2d", "(", "in_channels", ",", "momentum", "=", "0.01", ",", "eps", "=", "1e-3", ")", "for", "i", "in", "range", "(", "num_layers", ")", "]", ")", "for", "j", "in", "\n", "range", "(", "pyramid_levels", ")", "]", ")", "\n", "self", ".", "header", "=", "SeparableConvBlock", "(", "in_channels", ",", "num_anchors", "*", "4", ",", "norm", "=", "False", ",", "activation", "=", "False", ")", "\n", "self", ".", "swish", "=", "MemoryEfficientSwish", "(", ")", "if", "not", "onnx_export", "else", "Swish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.Regressor.forward": [[361, 378], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "zip", "model.Regressor.header", "model.Regressor.permute", "model.Regressor.contiguous().view", "torch.cat.append", "torch.cat.append", "range", "conv", "bn", "model.Regressor.swish", "model.Regressor.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "feats", "=", "[", "]", "\n", "for", "feat", ",", "bn_list", "in", "zip", "(", "inputs", ",", "self", ".", "bn_list", ")", ":", "\n", "            ", "for", "i", ",", "bn", ",", "conv", "in", "zip", "(", "range", "(", "self", ".", "num_layers", ")", ",", "bn_list", ",", "self", ".", "conv_list", ")", ":", "\n", "                ", "feat", "=", "conv", "(", "feat", ")", "\n", "feat", "=", "bn", "(", "feat", ")", "\n", "feat", "=", "self", ".", "swish", "(", "feat", ")", "\n", "", "feat", "=", "self", ".", "header", "(", "feat", ")", "\n", "\n", "feat", "=", "feat", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "feat", "=", "feat", ".", "contiguous", "(", ")", ".", "view", "(", "feat", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "4", ")", "\n", "\n", "feats", ".", "append", "(", "feat", ")", "\n", "\n", "", "feats", "=", "torch", ".", "cat", "(", "feats", ",", "dim", "=", "1", ")", "\n", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.Classifier.__init__": [[385, 397], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model.SeparableConvBlock", "models.efficientdet.efficientnet.utils.MemoryEfficientSwish", "models.efficientdet.efficientnet.utils.Swish", "model.SeparableConvBlock", "torch.ModuleList", "torch.ModuleList", "range", "range", "torch.BatchNorm2d", "torch.BatchNorm2d", "range"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_anchors", ",", "num_classes", ",", "num_layers", ",", "pyramid_levels", "=", "5", ",", "onnx_export", "=", "False", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_anchors", "=", "num_anchors", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "conv_list", "=", "nn", ".", "ModuleList", "(", "\n", "[", "SeparableConvBlock", "(", "in_channels", ",", "in_channels", ",", "norm", "=", "False", ",", "activation", "=", "False", ")", "for", "i", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "self", ".", "bn_list", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "ModuleList", "(", "[", "nn", ".", "BatchNorm2d", "(", "in_channels", ",", "momentum", "=", "0.01", ",", "eps", "=", "1e-3", ")", "for", "i", "in", "range", "(", "num_layers", ")", "]", ")", "for", "j", "in", "\n", "range", "(", "pyramid_levels", ")", "]", ")", "\n", "self", ".", "header", "=", "SeparableConvBlock", "(", "in_channels", ",", "num_anchors", "*", "num_classes", ",", "norm", "=", "False", ",", "activation", "=", "False", ")", "\n", "self", ".", "swish", "=", "MemoryEfficientSwish", "(", ")", "if", "not", "onnx_export", "else", "Swish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.Classifier.forward": [[398, 418], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feats.sigmoid.sigmoid.sigmoid", "zip", "model.Classifier.header", "model.Classifier.permute", "model.Classifier.contiguous().view", "model.Classifier.contiguous().view", "feats.sigmoid.sigmoid.append", "range", "conv", "bn", "model.Classifier.swish", "model.Classifier.contiguous", "model.Classifier.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "feats", "=", "[", "]", "\n", "for", "feat", ",", "bn_list", "in", "zip", "(", "inputs", ",", "self", ".", "bn_list", ")", ":", "\n", "            ", "for", "i", ",", "bn", ",", "conv", "in", "zip", "(", "range", "(", "self", ".", "num_layers", ")", ",", "bn_list", ",", "self", ".", "conv_list", ")", ":", "\n", "                ", "feat", "=", "conv", "(", "feat", ")", "\n", "feat", "=", "bn", "(", "feat", ")", "\n", "feat", "=", "self", ".", "swish", "(", "feat", ")", "\n", "", "feat", "=", "self", ".", "header", "(", "feat", ")", "\n", "\n", "feat", "=", "feat", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "feat", "=", "feat", ".", "contiguous", "(", ")", ".", "view", "(", "feat", ".", "shape", "[", "0", "]", ",", "feat", ".", "shape", "[", "1", "]", ",", "feat", ".", "shape", "[", "2", "]", ",", "self", ".", "num_anchors", ",", "\n", "self", ".", "num_classes", ")", "\n", "feat", "=", "feat", ".", "contiguous", "(", ")", ".", "view", "(", "feat", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "num_classes", ")", "\n", "\n", "feats", ".", "append", "(", "feat", ")", "\n", "\n", "", "feats", "=", "torch", ".", "cat", "(", "feats", ",", "dim", "=", "1", ")", "\n", "feats", "=", "feats", ".", "sigmoid", "(", ")", "\n", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.EfficientNet.__init__": [[425, 435], ["torch.Module.__init__", "models.efficientdet.efficientnet.EfficientNet.from_pretrained", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.EfficientNet.from_pretrained"], ["def", "__init__", "(", "self", ",", "compound_coef", ",", "load_weights", "=", "False", ")", ":", "\n", "        ", "super", "(", "EfficientNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "model", "=", "EffNet", ".", "from_pretrained", "(", "f'efficientnet-b{compound_coef}'", ",", "load_weights", ")", "\n", "del", "model", ".", "_conv_head", "\n", "del", "model", ".", "_bn1", "\n", "del", "model", ".", "_avg_pooling", "\n", "del", "model", ".", "_dropout", "\n", "del", "model", ".", "_fc", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "bottleneck", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.EfficientNet.forward": [[437, 471], ["model.EfficientNet.model._conv_stem", "model.EfficientNet.model._bn0", "model.EfficientNet.model._swish", "enumerate", "block", "feature_maps.append", "float", "len", "model.EfficientNet.bottleneck", "feature_maps.append", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# print(\"Input size: \", x.shape)", "\n", "        ", "x", "=", "self", ".", "model", ".", "_conv_stem", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "_bn0", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "_swish", "(", "x", ")", "\n", "feature_maps", "=", "[", "]", "\n", "\n", "# TODO: temporarily storing extra tensor last_x and del it later might not be a good idea,", "\n", "#  try recording stride changing when creating efficientnet,", "\n", "#  and then apply it here.", "\n", "num_bottlenecks", "=", "0", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "model", ".", "_blocks", ")", ":", "\n", "            ", "drop_connect_rate", "=", "self", ".", "model", ".", "_global_params", ".", "drop_connect_rate", "\n", "if", "drop_connect_rate", ":", "\n", "                ", "drop_connect_rate", "*=", "float", "(", "idx", ")", "/", "len", "(", "self", ".", "model", ".", "_blocks", ")", "\n", "\n", "", "if", "block", ".", "_depthwise_conv", ".", "stride", "==", "[", "2", ",", "2", "]", ":", "\n", "                ", "num_bottlenecks", "+=", "1", "\n", "if", "num_bottlenecks", "==", "3", ":", "\n", "# print(idx, \"Applying bottleneck: \", x.shape)", "\n", "                    ", "x", "=", "self", ".", "bottleneck", "(", "x", ")", "\n", "# print(idx, \"After bottleneck\", x.shape)", "\n", "", "if", "num_bottlenecks", ">=", "3", ":", "\n", "# print(idx, \"Saving feature\")", "\n", "                    ", "feature_maps", ".", "append", "(", "x", ")", "\n", "\n", "", "", "x", "=", "block", "(", "x", ",", "drop_connect_rate", "=", "drop_connect_rate", ")", "\n", "\n", "\n", "if", "idx", "==", "len", "(", "self", ".", "model", ".", "_blocks", ")", "-", "1", ":", "\n", "# print(idx, \"Saving feature\")", "\n", "                ", "feature_maps", ".", "append", "(", "x", ")", "\n", "\n", "", "", "return", "feature_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.nms": [[10, 12], ["torchvision.ops.boxes.nms"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.model.nms"], ["def", "nms", "(", "dets", ",", "thresh", ")", ":", "\n", "    ", "return", "nms_torch", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "dets", "[", ":", ",", "4", "]", ",", "thresh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.backbone.EfficientDetBackbone.__init__": [[20, 78], ["torch.nn.Module.__init__", "models.efficientdet.loss.FocalLoss", "kwargs.get", "len", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Sequential", "models.efficientdet.model.Regressor", "models.efficientdet.model.Classifier", "models.efficientdet.model_utils.Anchors", "models.efficientdet.model.EfficientNet", "kwargs.get", "len", "models.efficientdet.model.BiFPN", "range", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "80", ",", "compound_coef", "=", "0", ",", "load_weights", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EfficientDetBackbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "compound_coef", "=", "compound_coef", "\n", "self", ".", "criterion", "=", "FocalLoss", "(", ")", "\n", "self", ".", "backbone_compound_coef", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "6", ",", "7", "]", "\n", "self", ".", "fpn_num_filters", "=", "[", "64", ",", "88", ",", "112", ",", "160", ",", "224", ",", "288", ",", "384", ",", "384", ",", "384", "]", "\n", "self", ".", "fpn_cell_repeats", "=", "[", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "7", ",", "8", ",", "8", ",", "8", "]", "\n", "self", ".", "input_sizes", "=", "[", "512", ",", "640", ",", "768", ",", "896", ",", "1024", ",", "1280", ",", "1280", ",", "1536", ",", "1536", "]", "\n", "self", ".", "box_class_repeats", "=", "[", "3", ",", "3", ",", "3", ",", "4", ",", "4", ",", "4", ",", "5", ",", "5", ",", "5", "]", "\n", "self", ".", "pyramid_levels", "=", "[", "5", ",", "5", ",", "5", ",", "5", ",", "5", ",", "5", ",", "5", ",", "5", ",", "6", "]", "\n", "self", ".", "anchor_scale", "=", "[", "4.", ",", "4.", ",", "4.", ",", "4.", ",", "4.", ",", "4.", ",", "4.", ",", "5.", ",", "4.", "]", "\n", "self", ".", "aspect_ratios", "=", "kwargs", ".", "get", "(", "'ratios'", ",", "[", "(", "1.0", ",", "1.0", ")", ",", "(", "1.4", ",", "0.7", ")", ",", "(", "0.7", ",", "1.4", ")", "]", ")", "\n", "self", ".", "num_scales", "=", "len", "(", "kwargs", ".", "get", "(", "'scales'", ",", "[", "2", "**", "0", ",", "2", "**", "(", "1.0", "/", "3.0", ")", ",", "2", "**", "(", "2.0", "/", "3.0", ")", "]", ")", ")", "\n", "self", ".", "input_size", "=", "self", ".", "input_sizes", "[", "self", ".", "compound_coef", "]", "\n", "self", ".", "distill_backbone_only", "=", "False", "\n", "self", ".", "fully_slimmable", "=", "False", "\n", "\n", "self", ".", "p3", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "p4", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "p5", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "\n", "conv_channel_coef", "=", "{", "\n", "# the channels of P3/P4/P5.", "\n", "0", ":", "[", "40", ",", "112", ",", "320", "]", ",", "\n", "1", ":", "[", "40", ",", "112", ",", "320", "]", ",", "\n", "2", ":", "[", "48", ",", "120", ",", "352", "]", ",", "\n", "3", ":", "[", "48", ",", "136", ",", "384", "]", ",", "\n", "4", ":", "[", "56", ",", "160", ",", "448", "]", ",", "\n", "5", ":", "[", "64", ",", "176", ",", "512", "]", ",", "\n", "6", ":", "[", "72", ",", "200", ",", "576", "]", ",", "\n", "7", ":", "[", "72", ",", "200", ",", "576", "]", ",", "\n", "8", ":", "[", "80", ",", "224", ",", "640", "]", ",", "\n", "}", "\n", "\n", "num_anchors", "=", "len", "(", "self", ".", "aspect_ratios", ")", "*", "self", ".", "num_scales", "\n", "\n", "self", ".", "bifpn", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "BiFPN", "(", "self", ".", "fpn_num_filters", "[", "self", ".", "compound_coef", "]", ",", "\n", "conv_channel_coef", "[", "compound_coef", "]", ",", "\n", "True", "if", "_", "==", "0", "else", "False", ",", "\n", "attention", "=", "True", "if", "compound_coef", "<", "6", "else", "False", ",", "\n", "use_p8", "=", "compound_coef", ">", "7", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "fpn_cell_repeats", "[", "compound_coef", "]", ")", "]", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "regressor", "=", "Regressor", "(", "in_channels", "=", "self", ".", "fpn_num_filters", "[", "self", ".", "compound_coef", "]", ",", "num_anchors", "=", "num_anchors", ",", "\n", "num_layers", "=", "self", ".", "box_class_repeats", "[", "self", ".", "compound_coef", "]", ",", "\n", "pyramid_levels", "=", "self", ".", "pyramid_levels", "[", "self", ".", "compound_coef", "]", ")", "\n", "self", ".", "classifier", "=", "Classifier", "(", "in_channels", "=", "self", ".", "fpn_num_filters", "[", "self", ".", "compound_coef", "]", ",", "num_anchors", "=", "num_anchors", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_layers", "=", "self", ".", "box_class_repeats", "[", "self", ".", "compound_coef", "]", ",", "\n", "pyramid_levels", "=", "self", ".", "pyramid_levels", "[", "self", ".", "compound_coef", "]", ")", "\n", "\n", "self", ".", "anchors", "=", "Anchors", "(", "anchor_scale", "=", "self", ".", "anchor_scale", "[", "compound_coef", "]", ",", "\n", "pyramid_levels", "=", "(", "torch", ".", "arange", "(", "self", ".", "pyramid_levels", "[", "self", ".", "compound_coef", "]", ")", "+", "3", ")", ".", "tolist", "(", ")", ",", "\n", "**", "kwargs", ")", "\n", "\n", "self", ".", "backbone_net", "=", "EfficientNet", "(", "self", ".", "backbone_compound_coef", "[", "compound_coef", "]", ",", "load_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.backbone.EfficientDetBackbone.forward": [[79, 133], ["models.efficientdet.model_utils.BBoxTransform", "models.efficientdet.model_utils.ClipBoxes", "isinstance", "models.efficientdet.utils.utils.preprocess", "torch.from_numpy", "framed_imgs.permute.permute.permute", "framed_imgs.permute.permute.to", "backbone.EfficientDetBackbone.backbone_net", "backbone.EfficientDetBackbone.p3", "backbone.EfficientDetBackbone.p4", "backbone.EfficientDetBackbone.p5", "backbone.EfficientDetBackbone.bifpn", "backbone.EfficientDetBackbone.regressor", "backbone.EfficientDetBackbone.classifier", "backbone.EfficientDetBackbone.anchors", "numpy.array", "backbone.EfficientDetBackbone.criterion", "models.efficientdet.utils.utils.postprocess", "models.efficientdet.utils.utils.invert_affine", "detection.append", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.preprocess", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.postprocess", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.invert_affine"], ["", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ")", ":", "\n", "        ", "regressBoxes", "=", "BBoxTransform", "(", ")", "\n", "clipBoxes", "=", "ClipBoxes", "(", ")", "\n", "\n", "input_sizes", "=", "[", "512", ",", "640", ",", "768", ",", "896", ",", "1024", ",", "1280", ",", "1280", ",", "1536", ",", "1536", "]", "\n", "if", "isinstance", "(", "images", ",", "list", ")", ":", "\n", "            ", "device", "=", "images", "[", "0", "]", ".", "device", "\n", "", "else", ":", "\n", "            ", "device", "=", "images", ".", "device", "\n", "", "ori_imgs", ",", "framed_imgs", ",", "framed_metas", "=", "preprocess", "(", "images", ",", "max_size", "=", "input_sizes", "[", "self", ".", "compound_coef", "]", ")", "\n", "\n", "framed_imgs", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "framed_imgs", ")", ")", "\n", "framed_imgs", "=", "framed_imgs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "images", "=", "framed_imgs", ".", "to", "(", "device", ")", "\n", "p3", ",", "p4", ",", "p5", "=", "self", ".", "backbone_net", "(", "images", ")", "\n", "\n", "p3", "=", "self", ".", "p3", "(", "p3", ")", "\n", "p4", "=", "self", ".", "p4", "(", "p4", ")", "\n", "p5", "=", "self", ".", "p5", "(", "p5", ")", "\n", "\n", "features", "=", "(", "p3", ",", "p4", ",", "p5", ")", "\n", "if", "self", ".", "distill_backbone_only", ":", "\n", "            ", "return", "features", "\n", "\n", "", "features", "=", "self", ".", "bifpn", "(", "features", ")", "\n", "\n", "regression", "=", "self", ".", "regressor", "(", "features", ")", "\n", "classification", "=", "self", ".", "classifier", "(", "features", ")", "\n", "anchors", "=", "self", ".", "anchors", "(", "images", ",", "images", ".", "dtype", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "cls_loss", ",", "reg_loss", "=", "self", ".", "criterion", "(", "classification", ",", "regression", ",", "anchors", ",", "targets", ")", "\n", "loss_dict", "=", "{", "\n", "'cls_loss'", ":", "cls_loss", ",", "\n", "'reg_loss'", ":", "reg_loss", ",", "\n", "}", "\n", "return", "loss_dict", "\n", "\n", "", "else", ":", "\n", "            ", "preds", "=", "postprocess", "(", "framed_imgs", ",", "anchors", ",", "regression", ",", "classification", ",", "\n", "regressBoxes", ",", "clipBoxes", ",", "\n", "threshold", "=", "0.05", ",", "iou_threshold", "=", "0.5", ")", "\n", "if", "not", "preds", ":", "\n", "                ", "return", "{", "}", "\n", "", "preds", "=", "invert_affine", "(", "framed_metas", ",", "preds", ")", "\n", "detection", "=", "[", "]", "\n", "for", "p", "in", "preds", ":", "\n", "                ", "d", "=", "{", "\n", "'boxes'", ":", "torch", ".", "tensor", "(", "p", "[", "'rois'", "]", ")", ",", "\n", "'labels'", ":", "torch", ".", "tensor", "(", "p", "[", "'class_ids'", "]", ")", "+", "1", ",", "\n", "'scores'", ":", "torch", ".", "tensor", "(", "p", "[", "'scores'", "]", ")", "\n", "}", "\n", "detection", ".", "append", "(", "d", ")", "\n", "", "return", "detection", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.backbone.EfficientDetBackbone.init_backbone": [[134, 141], ["torch.load", "backbone.EfficientDetBackbone.load_state_dict", "print", "print", "str"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict"], ["", "", "def", "init_backbone", "(", "self", ",", "path", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "path", ")", "\n", "try", ":", "\n", "            ", "ret", "=", "self", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "ret", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "print", "(", "'Ignoring '", "+", "str", "(", "e", ")", "+", "'\"'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.backbone.EfficientDetBackbone.load_and_patch_state_dict": [[142, 149], ["super().load_state_dict", "enumerate", "isinstance", "backbone.EfficientDetBackbone.patch_state_dict_block"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.backbone.EfficientDetBackbone.patch_state_dict_block"], ["", "", "def", "load_and_patch_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "fully_slimmable", ":", "\n", "            ", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "backbone_net", ".", "model", ".", "_blocks", ")", ":", "\n", "                ", "if", "isinstance", "(", "block", ",", "USMBConvBlock", ")", "and", "block", ".", "fully_slimmable", ":", "\n", "                    ", "state_dict", "=", "self", ".", "patch_state_dict_block", "(", "state_dict", ",", "idx", ",", "block", ")", "\n", "pass", "\n", "", "", "", "super", "(", ")", ".", "load_state_dict", "(", "state_dict", ",", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.backbone.EfficientDetBackbone.patch_state_dict_block": [[150, 167], ["backbone.EfficientDetBackbone.patch_state_dict_block.patch_bn"], "methods", ["None"], ["", "def", "patch_state_dict_block", "(", "self", ",", "state_dict", ",", "idx", ",", "block", ")", ":", "\n", "        ", "def", "patch_bn", "(", "bn_idx", ")", ":", "\n", "            ", "prefix", "=", "'backbone_net.model._blocks.{}._bn{}.'", ".", "format", "(", "idx", ",", "bn_idx", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "block", ".", "width_mult_list", ")", ")", ":", "\n", "                ", "num_features", "=", "len", "(", "state_dict", "[", "prefix", "+", "'weight'", "]", ")", "\n", "size", "=", "int", "(", "round", "(", "num_features", "*", "block", ".", "width_mult_list", "[", "i", "]", ")", ")", "\n", "# state_dict[prefix + 'bn.{}.'.format(i) + 'weight'] = state_dict[prefix + 'weight'][:size]", "\n", "# state_dict[prefix + 'bn.{}.'.format(i) + 'bias'] = state_dict[prefix + 'bias'][:size]", "\n", "state_dict", "[", "prefix", "+", "'bn.{}.'", ".", "format", "(", "i", ")", "+", "'running_mean'", "]", "=", "state_dict", "[", "prefix", "+", "'running_mean'", "]", "[", ":", "size", "]", "\n", "state_dict", "[", "prefix", "+", "'bn.{}.'", ".", "format", "(", "i", ")", "+", "'running_var'", "]", "=", "state_dict", "[", "prefix", "+", "'running_var'", "]", "[", ":", "size", "]", "\n", "state_dict", "[", "prefix", "+", "'bn.{}.'", ".", "format", "(", "i", ")", "+", "'num_batches_tracked'", "]", "=", "state_dict", "[", "\n", "prefix", "+", "'num_batches_tracked'", "]", "\n", "\n", "", "", "patch_bn", "(", "0", ")", "\n", "patch_bn", "(", "1", ")", "\n", "patch_bn", "(", "2", ")", "\n", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.backbone.get_mimic_layer": [[169, 180], ["None"], "function", ["None"], ["", "", "def", "get_mimic_layer", "(", "config", ",", "bottleneck_transformer", ")", ":", "\n", "    ", "constructor", "=", "{", "\n", "\"Bottlenet4EfficientDet\"", ":", "Bottlenet4EfficientDet", ",", "\n", "\"BottleneckIdentity\"", ":", "BottleneckIdentity", ",", "\n", "\"SlimmableBottlenet4EfficientDet\"", ":", "SlimmableBottlenet4EfficientDet", ",", "\n", "\"MBConvBlockEfficientDet\"", ":", "MBConvBlockEfficientDet", ",", "\n", "\"MBConvBlockDecoderOnlyEfficientDet\"", ":", "MBConvBlockDecoderOnlyEfficientDet", ",", "\n", "\"Bottleneck4EfficientDet\"", ":", "Bottleneck4EfficientDet", ",", "\n", "\"ChannelSelect\"", ":", "ChannelSelect", ",", "\n", "}", "\n", "return", "constructor", "[", "config", "[", "'bottleneck'", "]", "[", "'name'", "]", "]", "(", "config", ",", "bottleneck_transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.backbone.patch_slimmable_layers": [[182, 205], ["torch.nn.ModuleList", "enumerate", "nn.ModuleList.append", "models.slimmable.slimmable_ops.USMBConvBlock", "nn.ModuleList.append"], "function", ["None"], ["", "def", "patch_slimmable_layers", "(", "model", ",", "config", ")", ":", "\n", "    ", "global_params", "=", "model", ".", "backbone_net", ".", "model", ".", "_global_params", "\n", "new_blocks", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "num_bottlenecks", "=", "0", "\n", "slimmable_input", "=", "False", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "model", ".", "backbone_net", ".", "model", ".", "_blocks", ")", ":", "\n", "        ", "if", "block", ".", "_depthwise_conv", ".", "stride", "==", "[", "2", ",", "2", "]", ":", "\n", "            ", "num_bottlenecks", "+=", "1", "\n", "\n", "", "if", "num_bottlenecks", "==", "0", "or", "num_bottlenecks", ">=", "3", ":", "\n", "            ", "new_blocks", ".", "append", "(", "block", ")", "\n", "", "else", ":", "\n", "            ", "new_block", "=", "USMBConvBlock", "(", "block", ".", "_block_args", ",", "global_params", ",", "\n", "config", "[", "'width_mult_list'", "]", ",", "\n", "fully_slimmable", "=", "True", ",", "\n", "slimmable_input", "=", "slimmable_input", ",", "\n", "slimmable_output", "=", "True", ")", "\n", "new_blocks", ".", "append", "(", "new_block", ")", "\n", "slimmable_input", "=", "True", "\n", "\n", "", "", "model", ".", "backbone_net", ".", "model", ".", "_blocks", "=", "new_blocks", "\n", "model", ".", "fully_slimmable", "=", "True", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.backbone.get_model": [[207, 238], ["backbone.EfficientDetBackbone", "patch_slimmable_layers.backbone_net.model._global_params._replace", "print", "backbone.patch_slimmable_layers", "backbone.get_mimic_layer", "patch_slimmable_layers.load_and_patch_state_dict", "patch_slimmable_layers.load_state_dict", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.backbone.patch_slimmable_layers", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.backbone.get_mimic_layer", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientdet.backbone.EfficientDetBackbone.load_and_patch_state_dict", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict"], ["", "def", "get_model", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "backbone_params_config", "=", "kwargs", "[", "'backbone_config'", "]", "[", "'params'", "]", "\n", "bottleneck_transformer", "=", "kwargs", "[", "'bottleneck_transformer'", "]", "\n", "compound_coef", "=", "backbone_params_config", "[", "'compound_coef'", "]", "\n", "\n", "anchors_scales", "=", "[", "2", "**", "0", ",", "2", "**", "(", "1.0", "/", "3.0", ")", ",", "2", "**", "(", "2.0", "/", "3.0", ")", "]", "\n", "anchors_ratios", "=", "[", "(", "1.0", ",", "1.0", ")", ",", "(", "1.4", ",", "0.7", ")", ",", "(", "0.7", ",", "1.4", ")", "]", "\n", "\n", "model", "=", "EfficientDetBackbone", "(", "compound_coef", "=", "compound_coef", ",", "num_classes", "=", "90", ",", "\n", "ratios", "=", "anchors_ratios", ",", "scales", "=", "anchors_scales", ")", "\n", "\n", "if", "'drop_connect'", "in", "backbone_params_config", ":", "\n", "        ", "model", ".", "backbone_net", ".", "model", ".", "_global_params", "=", "model", ".", "backbone_net", ".", "model", ".", "_global_params", ".", "_replace", "(", "\n", "drop_connect_rate", "=", "backbone_params_config", "[", "'drop_connect'", "]", ")", "\n", "\n", "", "if", "'fully_slimmable'", "in", "backbone_params_config", ":", "\n", "        ", "print", "(", "\"Patching Slimmable Layers\"", ")", "\n", "model", "=", "patch_slimmable_layers", "(", "model", ",", "backbone_params_config", ")", "\n", "\n", "", "if", "backbone_params_config", "[", "'pretrained'", "]", ":", "\n", "        ", "if", "model", ".", "fully_slimmable", ":", "\n", "            ", "model", ".", "load_and_patch_state_dict", "(", "torch", ".", "load", "(", "backbone_params_config", "[", "'weights'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "backbone_params_config", "[", "'weights'", "]", ")", ")", "\n", "\n", "", "", "if", "'bottleneck'", "in", "backbone_params_config", ":", "\n", "        ", "bottleneck", "=", "get_mimic_layer", "(", "backbone_params_config", ",", "bottleneck_transformer", ")", "\n", "model", ".", "backbone_net", ".", "bottleneck", "=", "bottleneck", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[64, 68], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 48], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.replicate.patch_replication_callback": [[70, 95], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.SyncMaster.__init__": [[67, 77], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.SyncMaster.__getstate__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.SyncMaster.__setstate__": [[81, 83], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.SyncMaster.register_slave": [[84, 101], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.DataLogger.clear"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n\n        Args:\n            identifier: an identifier, usually is the device id.\n\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.SyncMaster.run_master": [[102, 134], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n\n        Returns: the message to be sent back to the master device.\n\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.SyncMaster.nr_slaves": [[135, 138], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[16, 29], ["float", "unittest.TorchTestCase.assertTrue", "float", "torch.allclose"], "methods", ["None"], ["    ", "def", "assertTensorClose", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "adiff", "=", "float", "(", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "if", "(", "y", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "rdiff", "=", "'NaN'", "\n", "", "else", ":", "\n", "            ", "rdiff", "=", "float", "(", "(", "adiff", "/", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "", "message", "=", "(", "\n", "'Tensor close check failed\\n'", "\n", "'adiff={}\\n'", "\n", "'rdiff={}\\n'", "\n", ")", ".", "format", "(", "adiff", ",", "rdiff", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "x", ",", "y", ")", ",", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[52, 62], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "SyncMaster"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "assert", "ReduceAddCoalesced", "is", "not", "None", ",", "'Can not use Synchronized Batch Normalization without CUDA support.'", "\n", "\n", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ")", "\n", "\n", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[63, 94], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[95, 104], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[105, 127], ["sorted", "sum", "ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[128, 146], ["hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "if", "hasattr", "(", "torch", ",", "'no_grad'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[204, 209], ["super()._check_input_dim", "ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm1d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[267, 272], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm2d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[331, 336], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm3d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._sum_ft": [[37, 40], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm._unsqueeze_ft": [[42, 45], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dimensions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm.patch_sync_batchnorm": [[338, 351], ["None"], "function", ["None"], ["", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "patch_sync_batchnorm", "(", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "backup", "=", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "\n", "\n", "nn", ".", "BatchNorm1d", "=", "SynchronizedBatchNorm1d", "\n", "nn", ".", "BatchNorm2d", "=", "SynchronizedBatchNorm2d", "\n", "nn", ".", "BatchNorm3d", "=", "SynchronizedBatchNorm3d", "\n", "\n", "yield", "\n", "\n", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "=", "backup", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm.convert_model": [[353, 395], ["isinstance", "zip", "module.named_children", "batchnorm.convert_model", "DataParallelWithCallback", "isinstance", "sync_module.add_module", "sync_module", "batchnorm.convert_model", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm.convert_model"], ["", "def", "convert_model", "(", "module", ")", ":", "\n", "    ", "\"\"\"Traverse the input module and its child recursively\n       and replace all instance of torch.nn.modules.batchnorm.BatchNorm*N*d\n       to SynchronizedBatchNorm*N*d\n\n    Args:\n        module: the input module needs to be convert to SyncBN model\n\n    Examples:\n        >>> import torch.nn as nn\n        >>> import torchvision\n        >>> # m is a standard pytorch model\n        >>> m = torchvision.models.resnet18(True)\n        >>> m = nn.DataParallel(m)\n        >>> # after convert, m is using SyncBN\n        >>> m = convert_model(m)\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "mod", "=", "module", ".", "module", "\n", "mod", "=", "convert_model", "(", "mod", ")", "\n", "mod", "=", "DataParallelWithCallback", "(", "mod", ",", "device_ids", "=", "module", ".", "device_ids", ")", "\n", "return", "mod", "\n", "\n", "", "mod", "=", "module", "\n", "for", "pth_module", ",", "sync_module", "in", "zip", "(", "[", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm1d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm2d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm3d", "]", ",", "\n", "[", "SynchronizedBatchNorm1d", ",", "\n", "SynchronizedBatchNorm2d", ",", "\n", "SynchronizedBatchNorm3d", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "pth_module", ")", ":", "\n", "            ", "mod", "=", "sync_module", "(", "module", ".", "num_features", ",", "module", ".", "eps", ",", "module", ".", "momentum", ",", "module", ".", "affine", ")", "\n", "mod", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "mod", ".", "running_var", "=", "module", ".", "running_var", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "mod", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mod", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "add_module", "(", "name", ",", "convert_model", "(", "child", ")", ")", "\n", "\n", "", "return", "mod", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__": [[27, 38], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats": [[39, 42], ["batchnorm_reimpl.BatchNorm2dReimpl.running_mean.zero_", "batchnorm_reimpl.BatchNorm2dReimpl.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters": [[43, 47], ["batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.forward": [[48, 74], ["input_.permute().contiguous().view.permute().contiguous().view.size", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input_.permute().contiguous().view.permute().contiguous().view.sum", "input_.permute().contiguous().view.permute().contiguous().view.pow().sum", "output.view().permute().contiguous", "batchnorm_reimpl.BatchNorm2dReimpl.bias.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_.permute().contiguous().view.permute().contiguous().view.pow", "mean.detach", "unbias_var.detach", "batchnorm_reimpl.BatchNorm2dReimpl.weight.unsqueeze", "output.view().permute", "inv_std.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute", "mean.unsqueeze", "output.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "input_", ".", "size", "(", ")", "\n", "numel", "=", "batchsize", "*", "height", "*", "width", "\n", "input_", "=", "input_", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channels", ",", "numel", ")", "\n", "sum_", "=", "input_", ".", "sum", "(", "1", ")", "\n", "sum_of_square", "=", "input_", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "mean", "=", "sum_", "/", "numel", "\n", "sumvar", "=", "sum_of_square", "-", "sum_", "*", "mean", "\n", "\n", "self", ".", "running_mean", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "\n", "+", "self", ".", "momentum", "*", "mean", ".", "detach", "(", ")", "\n", ")", "\n", "unbias_var", "=", "sumvar", "/", "(", "numel", "-", "1", ")", "\n", "self", ".", "running_var", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "\n", "+", "self", ".", "momentum", "*", "unbias_var", ".", "detach", "(", ")", "\n", ")", "\n", "\n", "bias_var", "=", "sumvar", "/", "numel", "\n", "inv_std", "=", "1", "/", "(", "bias_var", "+", "self", ".", "eps", ")", ".", "pow", "(", "0.5", ")", "\n", "output", "=", "(", "\n", "(", "input_", "-", "mean", ".", "unsqueeze", "(", "1", ")", ")", "*", "inv_std", ".", "unsqueeze", "(", "1", ")", "*", "\n", "self", ".", "weight", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "channels", ",", "batchsize", ",", "height", ",", "width", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils_extra.Conv2dStaticSamePadding.__init__": [[15, 34], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "isinstance", "isinstance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "bias", "=", "True", ",", "groups", "=", "1", ",", "\n", "depthwise", "=", "False", ",", "dilation", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "groups", "=", "in_channels", "if", "depthwise", "else", "groups", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "bias", "=", "bias", ",", "groups", "=", "groups", ")", "\n", "self", ".", "stride", "=", "self", ".", "conv", ".", "stride", "\n", "self", ".", "kernel_size", "=", "self", ".", "conv", ".", "kernel_size", "\n", "self", ".", "dilation", "=", "self", ".", "conv", ".", "dilation", "\n", "\n", "if", "isinstance", "(", "self", ".", "stride", ",", "int", ")", ":", "\n", "            ", "self", ".", "stride", "=", "[", "self", ".", "stride", "]", "*", "2", "\n", "", "elif", "len", "(", "self", ".", "stride", ")", "==", "1", ":", "\n", "            ", "self", ".", "stride", "=", "[", "self", ".", "stride", "[", "0", "]", "]", "*", "2", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "kernel_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "kernel_size", "=", "[", "self", ".", "kernel_size", "]", "*", "2", "\n", "", "elif", "len", "(", "self", ".", "kernel_size", ")", "==", "1", ":", "\n", "            ", "self", ".", "kernel_size", "=", "[", "self", ".", "kernel_size", "[", "0", "]", "]", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils_extra.Conv2dStaticSamePadding.forward": [[35, 50], ["torch.pad", "utils_extra.Conv2dStaticSamePadding.conv", "math.ceil", "math.ceil"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", ",", "w", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "extra_h", "=", "(", "math", ".", "ceil", "(", "w", "/", "self", ".", "stride", "[", "1", "]", ")", "-", "1", ")", "*", "self", ".", "stride", "[", "1", "]", "-", "w", "+", "self", ".", "kernel_size", "[", "1", "]", "\n", "extra_v", "=", "(", "math", ".", "ceil", "(", "h", "/", "self", ".", "stride", "[", "0", "]", ")", "-", "1", ")", "*", "self", ".", "stride", "[", "0", "]", "-", "h", "+", "self", ".", "kernel_size", "[", "0", "]", "\n", "\n", "left", "=", "extra_h", "//", "2", "\n", "right", "=", "extra_h", "-", "left", "\n", "top", "=", "extra_v", "//", "2", "\n", "bottom", "=", "extra_v", "-", "top", "\n", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "[", "left", ",", "right", ",", "top", ",", "bottom", "]", ")", "\n", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils_extra.MaxPool2dStaticSamePadding.__init__": [[59, 74], ["torch.nn.Module.__init__", "torch.nn.MaxPool2d", "isinstance", "isinstance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "stride", "=", "self", ".", "pool", ".", "stride", "\n", "self", ".", "kernel_size", "=", "self", ".", "pool", ".", "kernel_size", "\n", "\n", "if", "isinstance", "(", "self", ".", "stride", ",", "int", ")", ":", "\n", "            ", "self", ".", "stride", "=", "[", "self", ".", "stride", "]", "*", "2", "\n", "", "elif", "len", "(", "self", ".", "stride", ")", "==", "1", ":", "\n", "            ", "self", ".", "stride", "=", "[", "self", ".", "stride", "[", "0", "]", "]", "*", "2", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "kernel_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "kernel_size", "=", "[", "self", ".", "kernel_size", "]", "*", "2", "\n", "", "elif", "len", "(", "self", ".", "kernel_size", ")", "==", "1", ":", "\n", "            ", "self", ".", "kernel_size", "=", "[", "self", ".", "kernel_size", "[", "0", "]", "]", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils_extra.MaxPool2dStaticSamePadding.forward": [[75, 90], ["torch.pad", "utils_extra.MaxPool2dStaticSamePadding.pool", "math.ceil", "math.ceil"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", ",", "w", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "extra_h", "=", "(", "math", ".", "ceil", "(", "w", "/", "self", ".", "stride", "[", "1", "]", ")", "-", "1", ")", "*", "self", ".", "stride", "[", "1", "]", "-", "w", "+", "self", ".", "kernel_size", "[", "1", "]", "\n", "extra_v", "=", "(", "math", ".", "ceil", "(", "h", "/", "self", ".", "stride", "[", "0", "]", ")", "-", "1", ")", "*", "self", ".", "stride", "[", "0", "]", "-", "h", "+", "self", ".", "kernel_size", "[", "0", "]", "\n", "\n", "left", "=", "extra_h", "//", "2", "\n", "right", "=", "extra_h", "-", "left", "\n", "top", "=", "extra_v", "//", "2", "\n", "bottom", "=", "extra_v", "-", "top", "\n", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "[", "left", ",", "right", ",", "top", ",", "bottom", "]", ")", "\n", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.MBConvBlock.__init__": [[29, 66], ["torch.nn.Module.__init__", "utils.get_same_padding_conv2d", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "utils.MemoryEfficientSwish", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "max", "utils.get_same_padding_conv2d.", "utils.get_same_padding_conv2d.", "int"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max"], ["", "self", ".", "depthwise_conv", "=", "Conv2dStaticSamePadding", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "pointwise_conv", "=", "Conv2dStaticSamePadding", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "norm", "=", "norm", "\n", "if", "self", ".", "norm", ":", "\n", "# Warning: pytorch momentum is different from tensorflow's, momentum_pytorch = 1 - momentum_tensorflow", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_channels", ",", "momentum", "=", "0.01", ",", "eps", "=", "1e-3", ")", "\n", "\n", "", "self", ".", "activation", "=", "activation", "\n", "if", "self", ".", "activation", ":", "\n", "            ", "self", ".", "swish", "=", "MemoryEfficientSwish", "(", ")", "if", "not", "onnx_export", "else", "Swish", "(", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "depthwise_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise_conv", "(", "x", ")", "\n", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "self", ".", "swish", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n", "\n", "", "", "class", "BiFPN", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    modified by Zylo117\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "num_channels", ",", "conv_channels", ",", "first_time", "=", "False", ",", "epsilon", "=", "1e-4", ",", "onnx_export", "=", "False", ",", "attention", "=", "True", ",", "\n", "use_p8", "=", "False", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.MBConvBlock.forward": [[67, 104], ["model.MBConvBlock._depthwise_conv", "model.MBConvBlock._bn1", "model.MBConvBlock._swish", "model.MBConvBlock._project_conv", "model.MBConvBlock._bn2", "model.MBConvBlock._expand_conv", "model.MBConvBlock._bn0", "model.MBConvBlock._swish", "torch.nn.functional.adaptive_avg_pool2d", "model.MBConvBlock._se_reduce", "model.MBConvBlock._swish", "model.MBConvBlock._se_expand", "torch.sigmoid", "utils.drop_connect"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.drop_connect"], ["\n", "super", "(", "BiFPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "use_p8", "=", "use_p8", "\n", "\n", "# Conv layers", "\n", "self", ".", "conv6_up", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv5_up", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv4_up", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv3_up", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv4_down", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv5_down", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv6_down", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv7_down", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "if", "use_p8", ":", "\n", "            ", "self", ".", "conv7_up", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "self", ".", "conv8_down", "=", "SeparableConvBlock", "(", "num_channels", ",", "onnx_export", "=", "onnx_export", ")", "\n", "\n", "# Feature scaling layers", "\n", "", "self", ".", "p6_upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "p5_upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "p4_upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "p3_upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "self", ".", "p4_downsample", "=", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", "self", ".", "p5_downsample", "=", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", "self", ".", "p6_downsample", "=", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", "self", ".", "p7_downsample", "=", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", "if", "use_p8", ":", "\n", "            ", "self", ".", "p7_upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "p8_downsample", "=", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", "\n", "", "self", ".", "swish", "=", "MemoryEfficientSwish", "(", ")", "if", "not", "onnx_export", "else", "Swish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.MBConvBlock.set_swish": [[105, 108], ["utils.MemoryEfficientSwish", "utils.Swish"], "methods", ["None"], ["self", ".", "first_time", "=", "first_time", "\n", "if", "self", ".", "first_time", ":", "\n", "            ", "self", ".", "p5_down_channel", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dStaticSamePadding", "(", "conv_channels", "[", "2", "]", ",", "num_channels", ",", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.EfficientNet.__init__": [[123, 172], ["torch.nn.Module.__init__", "isinstance", "utils.get_same_padding_conv2d", "utils.round_filters", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "torch.nn.ModuleList", "utils.round_filters", "utils.get_same_padding_conv2d.", "torch.nn.BatchNorm2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Dropout", "torch.nn.Linear", "utils.MemoryEfficientSwish", "len", "block_args._replace._replace._replace", "model.EfficientNet._blocks.append", "range", "model.MBConvBlock", "block_args._replace._replace._replace", "model.EfficientNet._blocks.append", "utils.round_filters", "utils.round_filters", "utils.round_repeats", "model.MBConvBlock"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.round_filters", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.round_filters", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.round_filters", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.round_filters", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.round_repeats"], ["MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", ")", "\n", "self", ".", "p6_to_p7", "=", "nn", ".", "Sequential", "(", "\n", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", ")", "\n", "if", "use_p8", ":", "\n", "                ", "self", ".", "p7_to_p8", "=", "nn", ".", "Sequential", "(", "\n", "MaxPool2dStaticSamePadding", "(", "3", ",", "2", ")", "\n", ")", "\n", "\n", "", "self", ".", "p4_down_channel_2", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dStaticSamePadding", "(", "conv_channels", "[", "1", "]", ",", "num_channels", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", ",", "momentum", "=", "0.01", ",", "eps", "=", "1e-3", ")", ",", "\n", ")", "\n", "self", ".", "p5_down_channel_2", "=", "nn", ".", "Sequential", "(", "\n", "Conv2dStaticSamePadding", "(", "conv_channels", "[", "2", "]", ",", "num_channels", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "num_channels", ",", "momentum", "=", "0.01", ",", "eps", "=", "1e-3", ")", ",", "\n", ")", "\n", "\n", "# Weight", "\n", "", "self", ".", "p6_w1", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p6_w1_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "p5_w1", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p5_w1_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "p4_w1", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p4_w1_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "p3_w1", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p3_w1_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "p4_w2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "3", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p4_w2_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "p5_w2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "3", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p5_w2_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "p6_w2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "3", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p6_w2_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "p7_w2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "2", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "p7_w2_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "attention", "=", "attention", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.EfficientNet.set_swish": [[173, 178], ["utils.MemoryEfficientSwish", "utils.Swish", "block.set_swish"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.USMBConvBlock.set_swish"], []], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.EfficientNet.extract_features": [[180, 197], ["model.EfficientNet._swish", "enumerate", "model.EfficientNet._swish", "model.EfficientNet._bn0", "block", "model.EfficientNet._bn1", "model.EfficientNet._conv_stem", "model.EfficientNet._conv_head", "float", "len"], "methods", ["None"], ["\n", "# downsample channels using same-padding conv2d to target phase's if not the same", "\n", "# judge: same phase as target,", "\n", "# if same, pass;", "\n", "# elif earlier phase, downsample to target phase's by pooling", "\n", "# elif later phase, upsample to target phase's by nearest interpolation", "\n", "\n", "if", "self", ".", "attention", ":", "\n", "            ", "outs", "=", "self", ".", "_forward_fast_attention", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "outs", "=", "self", ".", "_forward", "(", "inputs", ")", "\n", "\n", "", "return", "outs", "\n", "\n", "", "def", "_forward_fast_attention", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "first_time", ":", "\n", "            ", "p3", ",", "p4", ",", "p5", "=", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.EfficientNet.forward": [[198, 210], ["inputs.size", "model.EfficientNet.extract_features", "model.EfficientNet._avg_pooling", "model.EfficientNet.view", "model.EfficientNet._dropout", "model.EfficientNet._fc"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.EfficientNet.extract_features"], ["p6_in", "=", "self", ".", "p5_to_p6", "(", "p5", ")", "\n", "p7_in", "=", "self", ".", "p6_to_p7", "(", "p6_in", ")", "\n", "\n", "p3_in", "=", "self", ".", "p3_down_channel", "(", "p3", ")", "\n", "p4_in", "=", "self", ".", "p4_down_channel", "(", "p4", ")", "\n", "p5_in", "=", "self", ".", "p5_down_channel", "(", "p5", ")", "\n", "\n", "", "else", ":", "\n", "# P3_0, P4_0, P5_0, P6_0 and P7_0", "\n", "            ", "p3_in", ",", "p4_in", ",", "p5_in", ",", "p6_in", ",", "p7_in", "=", "inputs", "\n", "\n", "# P7_0 to P7_2", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.EfficientNet.from_name": [[211, 216], ["cls._check_model_name_is_valid", "utils.get_model_params", "cls"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.EfficientNet._check_model_name_is_valid", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.get_model_params"], ["# Weights for P6_0 and P7_0 to P6_1", "\n", "", "p6_w1", "=", "self", ".", "p6_w1_relu", "(", "self", ".", "p6_w1", ")", "\n", "weight", "=", "p6_w1", "/", "(", "torch", ".", "sum", "(", "p6_w1", ",", "dim", "=", "0", ")", "+", "self", ".", "epsilon", ")", "\n", "# Connections for P6_0 and P7_0 to P6_1 respectively", "\n", "p6_up", "=", "self", ".", "conv6_up", "(", "self", ".", "swish", "(", "weight", "[", "0", "]", "*", "p6_in", "+", "weight", "[", "1", "]", "*", "self", ".", "p6_upsample", "(", "p7_in", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.EfficientNet.from_pretrained": [[217, 227], ["cls.from_name", "utils.load_pretrained_weights", "utils.get_same_padding_conv2d", "utils.round_filters", "utils.get_same_padding_conv2d."], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.EfficientNet.from_name", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.load_pretrained_weights", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.round_filters"], ["# Weights for P5_0 and P6_1 to P5_1", "\n", "p5_w1", "=", "self", ".", "p5_w1_relu", "(", "self", ".", "p5_w1", ")", "\n", "weight", "=", "p5_w1", "/", "(", "torch", ".", "sum", "(", "p5_w1", ",", "dim", "=", "0", ")", "+", "self", ".", "epsilon", ")", "\n", "# Connections for P5_0 and P6_1 to P5_1 respectively", "\n", "p5_up", "=", "self", ".", "conv5_up", "(", "self", ".", "swish", "(", "weight", "[", "0", "]", "*", "p5_in", "+", "weight", "[", "1", "]", "*", "self", ".", "p5_upsample", "(", "p6_up", ")", ")", ")", "\n", "\n", "# Weights for P4_0 and P5_1 to P4_1", "\n", "p4_w1", "=", "self", ".", "p4_w1_relu", "(", "self", ".", "p4_w1", ")", "\n", "weight", "=", "p4_w1", "/", "(", "torch", ".", "sum", "(", "p4_w1", ",", "dim", "=", "0", ")", "+", "self", ".", "epsilon", ")", "\n", "# Connections for P4_0 and P5_1 to P4_1 respectively", "\n", "p4_up", "=", "self", ".", "conv4_up", "(", "self", ".", "swish", "(", "weight", "[", "0", "]", "*", "p4_in", "+", "weight", "[", "1", "]", "*", "self", ".", "p4_upsample", "(", "p5_up", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.EfficientNet.get_image_size": [[228, 233], ["cls._check_model_name_is_valid", "utils.efficientnet_params"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.EfficientNet._check_model_name_is_valid", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.efficientnet_params"], ["\n", "# Weights for P3_0 and P4_1 to P3_2", "\n", "p3_w1", "=", "self", ".", "p3_w1_relu", "(", "self", ".", "p3_w1", ")", "\n", "weight", "=", "p3_w1", "/", "(", "torch", ".", "sum", "(", "p3_w1", ",", "dim", "=", "0", ")", "+", "self", ".", "epsilon", ")", "\n", "# Connections for P3_0 and P4_1 to P3_2 respectively", "\n", "p3_out", "=", "self", ".", "conv3_up", "(", "self", ".", "swish", "(", "weight", "[", "0", "]", "*", "p3_in", "+", "weight", "[", "1", "]", "*", "self", ".", "p3_upsample", "(", "p4_up", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.model.EfficientNet._check_model_name_is_valid": [[234, 240], ["ValueError", "str", "range"], "methods", ["None"], ["\n", "if", "self", ".", "first_time", ":", "\n", "            ", "p4_in", "=", "self", ".", "p4_down_channel_2", "(", "p4", ")", "\n", "p5_in", "=", "self", ".", "p5_down_channel_2", "(", "p5", ")", "\n", "\n", "# Weights for P4_0, P4_1 and P3_2 to P4_2", "\n", "", "p4_w2", "=", "self", ".", "p4_w2_relu", "(", "self", ".", "p4_w2", ")", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.SwishImplementation.forward": [[39, 44], ["ctx.save_for_backward", "torch.sigmoid"], "methods", ["None"], ["\n", "\n", "", "def", "aspectaware_resize_padding", "(", "image", ",", "width", ",", "height", ",", "interpolation", "=", "None", ",", "means", "=", "None", ")", ":", "\n", "    ", "old_h", ",", "old_w", ",", "c", "=", "image", ".", "shape", "\n", "if", "old_w", ">", "old_h", ":", "\n", "        ", "new_w", "=", "width", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.SwishImplementation.backward": [[45, 50], ["torch.sigmoid"], "methods", ["None"], ["new_h", "=", "int", "(", "width", "/", "old_w", "*", "old_h", ")", "\n", "", "else", ":", "\n", "        ", "new_w", "=", "int", "(", "height", "/", "old_h", "*", "old_w", ")", "\n", "new_h", "=", "height", "\n", "\n", "", "canvas", "=", "np", ".", "zeros", "(", "(", "height", ",", "height", ",", "c", ")", ",", "np", ".", "float32", ")", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.MemoryEfficientSwish.forward": [[53, 55], ["SwishImplementation.apply"], "methods", ["None"], ["\n", "", "if", "new_w", "!=", "old_w", "or", "new_h", "!=", "old_h", ":", "\n", "        ", "if", "interpolation", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.Swish.forward": [[58, 60], ["torch.sigmoid"], "methods", ["None"], ["            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "new_w", ",", "new_h", ")", ",", "interpolation", "=", "interpolation", ")", "\n", "\n", "", "", "padding_h", "=", "height", "-", "new_h", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.Conv2dDynamicSamePadding.__init__": [[109, 112], ["torch.nn.Conv2d.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["            ", "out", ".", "append", "(", "{", "\n", "'rois'", ":", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ")", ",", "\n", "'class_ids'", ":", "np", ".", "empty", "(", "0", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "'scores'", ":", "np", ".", "empty", "(", "0", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.Conv2dDynamicSamePadding.forward": [[113, 123], ["max", "max", "torch.nn.functional.conv2d", "torch.nn.functional.pad.size", "utils.Conv2dDynamicSamePadding.weight.size", "math.ceil", "math.ceil", "torch.nn.functional.pad"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max"], ["}", ")", "\n", "continue", "\n", "\n", "", "classification_per", "=", "classification", "[", "i", ",", "scores_over_thresh", "[", "i", ",", ":", "]", ",", "...", "]", ".", "permute", "(", "1", ",", "0", ")", "\n", "transformed_anchors_per", "=", "transformed_anchors", "[", "i", ",", "scores_over_thresh", "[", "i", ",", ":", "]", ",", "...", "]", "\n", "scores_per", "=", "scores", "[", "i", ",", "scores_over_thresh", "[", "i", ",", ":", "]", ",", "...", "]", "\n", "scores_", ",", "classes_", "=", "classification_per", ".", "max", "(", "dim", "=", "0", ")", "\n", "anchors_nms_idx", "=", "batched_nms", "(", "transformed_anchors_per", ",", "scores_per", "[", ":", ",", "0", "]", ",", "classes_", ",", "iou_threshold", "=", "iou_threshold", ")", "\n", "\n", "if", "anchors_nms_idx", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "classes_", "=", "classes_", "[", "anchors_nms_idx", "]", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.Identity.__init__": [[126, 128], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["\n", "out", ".", "append", "(", "{", "\n", "'rois'", ":", "boxes_", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.Identity.forward": [[129, 131], ["None"], "methods", ["None"], ["'class_ids'", ":", "classes_", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'scores'", ":", "scores_", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.BlockDecoder._decode_block_string": [[159, 185], ["isinstance", "block_string.split", "BlockArgs", "re.split", "len", "int", "int", "int", "int", "int", "len", "len", "float", "int"], "methods", ["None"], ["\n", "", "if", "imwrite", ":", "\n", "            ", "os", ".", "makedirs", "(", "'test/'", ",", "exist_ok", "=", "True", ")", "\n", "cv2", ".", "imwrite", "(", "f'test/{uuid.uuid4().hex}.jpg'", ",", "imgs", "[", "i", "]", ")", "\n", "\n", "\n", "", "", "", "def", "replace_w_sync_bn", "(", "m", ")", ":", "\n", "    ", "for", "var_name", "in", "dir", "(", "m", ")", ":", "\n", "        ", "target_attr", "=", "getattr", "(", "m", ",", "var_name", ")", "\n", "if", "type", "(", "target_attr", ")", "==", "torch", ".", "nn", ".", "BatchNorm2d", ":", "\n", "            ", "num_features", "=", "target_attr", ".", "num_features", "\n", "eps", "=", "target_attr", ".", "eps", "\n", "momentum", "=", "target_attr", ".", "momentum", "\n", "affine", "=", "target_attr", ".", "affine", "\n", "\n", "# get parameters", "\n", "running_mean", "=", "target_attr", ".", "running_mean", "\n", "running_var", "=", "target_attr", ".", "running_var", "\n", "if", "affine", ":", "\n", "                ", "weight", "=", "target_attr", ".", "weight", "\n", "bias", "=", "target_attr", ".", "bias", "\n", "\n", "", "setattr", "(", "m", ",", "var_name", ",", "\n", "SynchronizedBatchNorm2d", "(", "num_features", ",", "eps", ",", "momentum", ",", "affine", ")", ")", "\n", "\n", "target_attr", "=", "getattr", "(", "m", ",", "var_name", ")", "\n", "# set parameters", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.BlockDecoder._encode_block_string": [[186, 202], ["args.append", "args.append"], "methods", ["None"], ["target_attr", ".", "running_mean", "=", "running_mean", "\n", "target_attr", ".", "running_var", "=", "running_var", "\n", "if", "affine", ":", "\n", "                ", "target_attr", ".", "weight", "=", "weight", "\n", "target_attr", ".", "bias", "=", "bias", "\n", "\n", "", "", "", "for", "var_name", ",", "children", "in", "m", ".", "named_children", "(", ")", ":", "\n", "        ", "replace_w_sync_bn", "(", "children", ")", "\n", "\n", "\n", "", "", "class", "CustomDataParallel", "(", "nn", ".", "DataParallel", ")", ":", "\n", "    ", "\"\"\"\n    force splitting data to all gpus instead of sending all data to cuda:0 and then moving around.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "module", ",", "num_gpus", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "module", ")", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.BlockDecoder.decode": [[203, 216], ["isinstance", "blocks_args.append", "utils.BlockDecoder._decode_block_string"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.BlockDecoder._decode_block_string"], ["self", ".", "num_gpus", "=", "num_gpus", "\n", "\n", "", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "# More like scatter and data prep at the same time. The point is we prep the data in such a way", "\n", "# that no scatter is necessary, and there's no need to shuffle stuff around different GPUs.", "\n", "        ", "devices", "=", "[", "'cuda:'", "+", "str", "(", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_gpus", ")", "]", "\n", "splits", "=", "inputs", "[", "0", "]", ".", "shape", "[", "0", "]", "//", "self", ".", "num_gpus", "\n", "\n", "if", "splits", "==", "0", ":", "\n", "            ", "raise", "Exception", "(", "'Batchsize must be greater than num_gpus.'", ")", "\n", "\n", "", "return", "[", "(", "inputs", "[", "0", "]", "[", "splits", "*", "device_idx", ":", "splits", "*", "(", "device_idx", "+", "1", ")", "]", ".", "to", "(", "f'cuda:{device_idx}'", ",", "non_blocking", "=", "True", ")", ",", "\n", "inputs", "[", "1", "]", "[", "splits", "*", "device_idx", ":", "splits", "*", "(", "device_idx", "+", "1", ")", "]", ".", "to", "(", "f'cuda:{device_idx}'", ",", "non_blocking", "=", "True", ")", ")", "\n", "for", "device_idx", "in", "range", "(", "len", "(", "devices", ")", ")", "]", ","]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.BlockDecoder.encode": [[217, 229], ["block_strings.append", "utils.BlockDecoder._encode_block_string"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.BlockDecoder._encode_block_string"], ["[", "kwargs", "]", "*", "len", "(", "devices", ")", "\n", "\n", "\n", "", "", "def", "get_last_weights", "(", "weights_path", ")", ":", "\n", "    ", "weights_path", "=", "glob", "(", "weights_path", "+", "f'/*.pth'", ")", "\n", "weights_path", "=", "sorted", "(", "weights_path", ",", "\n", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "rsplit", "(", "'_'", ")", "[", "-", "1", "]", ".", "rsplit", "(", "'.'", ")", "[", "0", "]", ")", ",", "\n", "reverse", "=", "True", ")", "[", "0", "]", "\n", "print", "(", "f'using weights {weights_path}'", ")", "\n", "return", "weights_path", "\n", "\n", "\n", "", "def", "init_weights", "(", "model", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.round_filters": [[62, 75], ["max", "int", "int"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max"], ["\n", "if", "c", ">", "1", ":", "\n", "        ", "canvas", "[", ":", "new_h", ",", ":", "new_w", "]", "=", "image", "\n", "", "else", ":", "\n", "        ", "if", "len", "(", "image", ".", "shape", ")", "==", "2", ":", "\n", "            ", "canvas", "[", ":", "new_h", ",", ":", "new_w", ",", "0", "]", "=", "image", "\n", "", "else", ":", "\n", "            ", "canvas", "[", ":", "new_h", ",", ":", "new_w", "]", "=", "image", "\n", "\n", "", "", "return", "canvas", ",", "new_w", ",", "new_h", ",", "old_w", ",", "old_h", ",", "padding_w", ",", "padding_h", ",", "\n", "\n", "\n", "", "def", "preprocess", "(", "ori_imgs", ",", "max_size", "=", "512", ",", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.round_repeats": [[77, 83], ["int", "math.ceil"], "function", ["None"], ["# print(ori_imgs[0].permute(1, 2, 0).cpu().numpy().shape)", "\n", "    ", "ori_imgs", "=", "[", "img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "img", "in", "ori_imgs", "]", "\n", "ori_imgs", "=", "[", "255", "*", "img", "[", "...", ",", ":", ":", "-", "1", "]", "for", "img", "in", "ori_imgs", "]", "\n", "\n", "normalized_imgs", "=", "[", "(", "img", "[", "...", ",", ":", ":", "-", "1", "]", "/", "255", "-", "mean", ")", "/", "std", "for", "img", "in", "ori_imgs", "]", "\n", "imgs_meta", "=", "[", "aspectaware_resize_padding", "(", "img", ",", "max_size", ",", "max_size", ",", "\n", "means", "=", "None", ")", "for", "img", "in", "normalized_imgs", "]", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.drop_connect": [[85, 95], ["torch.rand", "torch.floor"], "function", ["None"], ["framed_metas", "=", "[", "img_meta", "[", "1", ":", "]", "for", "img_meta", "in", "imgs_meta", "]", "\n", "\n", "return", "ori_imgs", ",", "framed_imgs", ",", "framed_metas", "\n", "\n", "\n", "", "def", "preprocess_video", "(", "*", "frame_from_video", ",", "max_size", "=", "512", ",", "mean", "=", "(", "0.406", ",", "0.456", ",", "0.485", ")", ",", "std", "=", "(", "0.225", ",", "0.224", ",", "0.229", ")", ")", ":", "\n", "    ", "ori_imgs", "=", "frame_from_video", "\n", "normalized_imgs", "=", "[", "(", "img", "[", "...", ",", ":", ":", "-", "1", "]", "/", "255", "-", "mean", ")", "/", "std", "for", "img", "in", "ori_imgs", "]", "\n", "imgs_meta", "=", "[", "aspectaware_resize_padding", "(", "img", ",", "max_size", ",", "max_size", ",", "\n", "means", "=", "None", ")", "for", "img", "in", "normalized_imgs", "]", "\n", "framed_imgs", "=", "[", "img_meta", "[", "0", "]", "for", "img_meta", "in", "imgs_meta", "]", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.get_same_padding_conv2d": [[97, 104], ["functools.partial"], "function", ["None"], ["\n", "return", "ori_imgs", ",", "framed_imgs", ",", "framed_metas", "\n", "\n", "\n", "", "def", "postprocess", "(", "x", ",", "anchors", ",", "regression", ",", "classification", ",", "regressBoxes", ",", "clipBoxes", ",", "threshold", ",", "iou_threshold", ")", ":", "\n", "    ", "transformed_anchors", "=", "regressBoxes", "(", "anchors", ",", "regression", ")", "\n", "transformed_anchors", "=", "clipBoxes", "(", "transformed_anchors", ",", "x", ")", "\n", "scores", "=", "torch", ".", "max", "(", "classification", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.efficientnet_params": [[138, 154], ["None"], "function", ["None"], ["\n", "", "", "return", "out", "\n", "\n", "\n", "", "def", "display", "(", "preds", ",", "imgs", ",", "obj_list", ",", "imshow", "=", "True", ",", "imwrite", "=", "False", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "imgs", ")", ")", ":", "\n", "        ", "if", "len", "(", "preds", "[", "i", "]", "[", "'rois'", "]", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "imgs", "[", "i", "]", "=", "imgs", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "preds", "[", "i", "]", "[", "'rois'", "]", ")", ")", ":", "\n", "            ", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "=", "preds", "[", "i", "]", "[", "'rois'", "]", "[", "j", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "obj", "=", "obj_list", "[", "preds", "[", "i", "]", "[", "'class_ids'", "]", "[", "j", "]", "]", "\n", "score", "=", "float", "(", "preds", "[", "i", "]", "[", "'scores'", "]", "[", "j", "]", ")", "\n", "\n", "plot_one_box", "(", "imgs", "[", "i", "]", ",", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "label", "=", "obj", ",", "score", "=", "score", ",", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.efficientnet": [[231, 258], ["utils.BlockDecoder.decode", "GlobalParams"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.BlockDecoder.decode"], ["        ", "is_conv_layer", "=", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", "\n", "if", "is_conv_layer", ":", "\n", "            ", "print", "(", "\"Initializing module: {}\"", ".", "format", "(", "name", ")", ")", "\n", "if", "\"conv_list\"", "or", "\"header\"", "in", "name", ":", "\n", "                ", "variance_scaling_", "(", "module", ".", "weight", ".", "data", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "module", ".", "weight", ".", "data", ")", "\n", "\n", "", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "if", "\"classifier.header\"", "in", "name", ":", "\n", "                    ", "bias_value", "=", "-", "np", ".", "log", "(", "(", "1", "-", "0.01", ")", "/", "0.01", ")", "\n", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias_value", ")", "\n", "", "else", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "print", "(", "\"Initializing module: {}\"", ".", "format", "(", "name", ")", ")", "\n", "module", ".", "reset_parameters", "(", ")", "\n", "\n", "\n", "", "", "", "def", "variance_scaling_", "(", "tensor", ",", "gain", "=", "1.", ")", ":", "\n", "# type: (Tensor, float) -> Tensor", "\n", "    ", "r\"\"\"\n    initializer for SeparableConv in Regressor/Classifier\n    reference: https://keras.io/zh/initializers/  VarianceScaling\n    \"\"\"", "\n", "fan_in", ",", "fan_out", "=", "_calculate_fan_in_and_fan_out", "(", "tensor", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "gain", "/", "float", "(", "fan_in", ")", ")", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.get_model_params": [[260, 273], ["model_name.startswith", "utils.efficientnet_params", "utils.efficientnet", "NotImplementedError", "global_params._replace._replace"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.efficientnet_params", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.efficientnet"], ["return", "_no_grad_normal_", "(", "tensor", ",", "0.", ",", "std", ")", "\n", "\n", "\n", "", "STANDARD_COLORS", "=", "[", "\n", "'LawnGreen'", ",", "'Chartreuse'", ",", "'Aqua'", ",", "'Beige'", ",", "'Azure'", ",", "'BlanchedAlmond'", ",", "'Bisque'", ",", "\n", "'Aquamarine'", ",", "'BlueViolet'", ",", "'BurlyWood'", ",", "'CadetBlue'", ",", "'AntiqueWhite'", ",", "\n", "'Chocolate'", ",", "'Coral'", ",", "'CornflowerBlue'", ",", "'Cornsilk'", ",", "'Crimson'", ",", "'Cyan'", ",", "\n", "'DarkCyan'", ",", "'DarkGoldenRod'", ",", "'DarkGrey'", ",", "'DarkKhaki'", ",", "'DarkOrange'", ",", "\n", "'DarkOrchid'", ",", "'DarkSalmon'", ",", "'DarkSeaGreen'", ",", "'DarkTurquoise'", ",", "'DarkViolet'", ",", "\n", "'DeepPink'", ",", "'DeepSkyBlue'", ",", "'DodgerBlue'", ",", "'FireBrick'", ",", "'FloralWhite'", ",", "\n", "'ForestGreen'", ",", "'Fuchsia'", ",", "'Gainsboro'", ",", "'GhostWhite'", ",", "'Gold'", ",", "'GoldenRod'", ",", "\n", "'Salmon'", ",", "'Tan'", ",", "'HoneyDew'", ",", "'HotPink'", ",", "'IndianRed'", ",", "'Ivory'", ",", "'Khaki'", ",", "\n", "'Lavender'", ",", "'LavenderBlush'", ",", "'AliceBlue'", ",", "'LemonChiffon'", ",", "'LightBlue'", ",", "\n", "'LightCoral'", ",", "'LightCyan'", ",", "'LightGoldenRodYellow'", ",", "'LightGray'", ",", "'LightGrey'", ",", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.load_pretrained_weights": [[299, 314], ["torch.utils.model_zoo.load_url", "print", "model.load_state_dict", "print", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model.load_state_dict", "torch.device", "set", "set"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict"], ["        ", "standard", ".", "append", "(", "from_colorname_to_bgr", "(", "list_color_name", "[", "i", "]", ")", ")", "\n", "", "return", "standard", "\n", "\n", "\n", "", "def", "get_index_label", "(", "label", ",", "obj_list", ")", ":", "\n", "    ", "index", "=", "int", "(", "obj_list", ".", "index", "(", "label", ")", ")", "\n", "return", "index", "\n", "\n", "\n", "", "def", "plot_one_box", "(", "img", ",", "coord", ",", "label", "=", "None", ",", "score", "=", "None", ",", "color", "=", "None", ",", "line_thickness", "=", "None", ")", ":", "\n", "    ", "tl", "=", "line_thickness", "or", "int", "(", "round", "(", "0.001", "*", "max", "(", "img", ".", "shape", "[", "0", ":", "2", "]", ")", ")", ")", "# line thickness", "\n", "color", "=", "color", "\n", "c1", ",", "c2", "=", "(", "int", "(", "coord", "[", "0", "]", ")", ",", "int", "(", "coord", "[", "1", "]", ")", ")", ",", "(", "int", "(", "coord", "[", "2", "]", ")", ",", "int", "(", "coord", "[", "3", "]", ")", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "c1", ",", "c2", ",", "color", ",", "thickness", "=", "tl", ")", "\n", "if", "label", ":", "\n", "        ", "tf", "=", "max", "(", "tl", "-", "2", ",", "1", ")", "# font thickness", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.CustomResNet.__init__": [[8, 77], ["torch.nn.Module.__init__", "resnet.CustomResNet.modules", "len", "ValueError", "resnet.CustomResNet._make_layer0", "resnet.CustomResNet._make_layer", "resnet.CustomResNet._make_layer", "resnet.CustomResNet._make_layer", "resnet.CustomResNet._make_layer", "isinstance", "resnet.CustomResNet.modules", "torch.nn.init.kaiming_normal_", "isinstance", "isinstance", "torch.nn.init.constant_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.CustomResNet._make_layer0", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.CustomResNet._make_layer", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.CustomResNet._make_layer", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.CustomResNet._make_layer", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.CustomResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "layer0", "=", "None", ",", "layer1", "=", "None", ",", "layer2", "=", "None", ",", "layer3", "=", "None", ",", "layer4", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "\n", "# TODO conv1 slimmable = layer0 configurable", "\n", "\n", "if", "layer0", "is", "None", ":", "\n", "            ", "self", ".", "layer0", "=", "self", ".", "_make_layer0", "(", "norm_layer", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer0", "=", "layer0", "\n", "\n", "", "if", "layer1", "is", "None", ":", "\n", "            ", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer1", "=", "layer1", "\n", "self", ".", "inplanes", "=", "64", "*", "block", ".", "expansion", "\n", "\n", "", "if", "layer2", "is", "None", ":", "\n", "            ", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer2", "=", "layer2", "\n", "self", ".", "inplanes", "=", "128", "*", "block", ".", "expansion", "\n", "\n", "", "if", "layer3", "is", "None", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer3", "=", "layer3", "\n", "self", ".", "inplanes", "=", "256", "*", "block", ".", "expansion", "\n", "\n", "", "if", "layer4", "is", "None", ":", "\n", "            ", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer4", "=", "layer4", "\n", "self", ".", "inplanes", "=", "512", "*", "block", ".", "expansion", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "if", "m", ".", "affine", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.CustomResNet._make_layer0": [[78, 91], ["torch.nn.Conv2d", "norm_layer", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.Sequential"], "methods", ["None"], ["", "", "", "", "def", "_make_layer0", "(", "self", ",", "norm_layer", ")", ":", "\n", "        ", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "_norm_layer", "=", "norm_layer", "\n", "\n", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "layers", "=", "[", "conv1", ",", "bn1", ",", "relu", ",", "maxpool", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.CustomResNet._make_layer": [[94, 116], ["list", "list.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "list.append", "torchvision.models.resnet.conv1x1", "norm_layer", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "list", "(", ")", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.CustomResNet.forward": [[117, 124], ["resnet.CustomResNet.layer0", "resnet.CustomResNet.layer1", "resnet.CustomResNet.layer2", "resnet.CustomResNet.layer3", "resnet.CustomResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet._custom_resnet": [[126, 133], ["resnet.CustomResNet", "print", "torchvision.models.utils.load_state_dict_from_url", "CustomResNet.load_state_dict", "torchvision.models.resnet.BasicBlock", "torchvision.models.resnet.BasicBlock", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck", "torchvision.models.resnet.Bottleneck"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict"], ["", "", "def", "_custom_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "strict", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "CustomResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "print", "(", "'Loading pretrained state dict of {}'", ".", "format", "(", "arch", ")", ")", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "strict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.custom_resnet18": [[135, 143], ["resnet._custom_resnet"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet._custom_resnet"], ["", "def", "custom_resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_custom_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.custom_resnet34": [[145, 153], ["resnet._custom_resnet"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet._custom_resnet"], ["", "def", "custom_resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_custom_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.custom_resnet50": [[155, 163], ["resnet._custom_resnet"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet._custom_resnet"], ["", "def", "custom_resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_custom_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.custom_resnet101": [[165, 173], ["resnet._custom_resnet"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet._custom_resnet"], ["", "def", "custom_resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_custom_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.custom_resnet152": [[175, 183], ["resnet._custom_resnet"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet._custom_resnet"], ["", "def", "custom_resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_custom_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.custom_resnext50_32x4d": [[185, 195], ["resnet._custom_resnet"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet._custom_resnet"], ["", "def", "custom_resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_custom_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.cusom_resnext101_32x8d": [[197, 207], ["resnet._custom_resnet"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet._custom_resnet"], ["", "def", "cusom_resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_custom_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.custom_wide_resnet50_2": [[209, 222], ["resnet._custom_resnet"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet._custom_resnet"], ["", "def", "custom_wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_custom_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet.custom_wide_resnet101_2": [[224, 237], ["resnet._custom_resnet"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.custom.resnet._custom_resnet"], ["", "def", "custom_wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_custom_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.__init__.get_ext_fpn_backbone": [[4, 20], ["models.ext.backbone.ExtBackboneWithFPN", "base_backbone.named_parameters", "parameter.requires_grad_"], "function", ["None"], []], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.ExtIntermediateLayerGetter.__init__": [[48, 66], ["collections.OrderedDict", "model.named_children", "torch.nn.ModuleDict.__init__", "set().issubset", "ValueError", "return_layers.items", "set", "model.named_children"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["5", ":", "[", "64", ",", "176", ",", "512", "]", ",", "\n", "6", ":", "[", "72", ",", "200", ",", "576", "]", ",", "\n", "7", ":", "[", "72", ",", "200", ",", "576", "]", ",", "\n", "8", ":", "[", "80", ",", "224", ",", "640", "]", ",", "\n", "}", "\n", "\n", "num_anchors", "=", "len", "(", "self", ".", "aspect_ratios", ")", "*", "self", ".", "num_scales", "\n", "\n", "self", ".", "bifpn", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "BiFPN", "(", "self", ".", "fpn_num_filters", "[", "self", ".", "compound_coef", "]", ",", "\n", "conv_channel_coef", "[", "compound_coef", "]", ",", "\n", "True", "if", "_", "==", "0", "else", "False", ",", "\n", "attention", "=", "True", "if", "compound_coef", "<", "6", "else", "False", ",", "\n", "use_p8", "=", "compound_coef", ">", "7", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "fpn_cell_repeats", "[", "compound_coef", "]", ")", "]", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "regressor", "=", "Regressor", "(", "in_channels", "=", "self", ".", "fpn_num_filters", "[", "self", ".", "compound_coef", "]", ",", "num_anchors", "=", "num_anchors", ",", "\n", "num_layers", "=", "self", ".", "box_class_repeats", "[", "self", ".", "compound_coef", "]", ",", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.ExtIntermediateLayerGetter.get_ext_classifier": [[67, 72], ["backbone.ExtIntermediateLayerGetter.items", "backbone.check_if_includes_ext", "module.get_ext_classifier"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.check_if_includes_ext", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier"], ["pyramid_levels", "=", "self", ".", "pyramid_levels", "[", "self", ".", "compound_coef", "]", ")", "\n", "self", ".", "classifier", "=", "Classifier", "(", "in_channels", "=", "self", ".", "fpn_num_filters", "[", "self", ".", "compound_coef", "]", ",", "num_anchors", "=", "num_anchors", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "num_layers", "=", "self", ".", "box_class_repeats", "[", "self", ".", "compound_coef", "]", ",", "\n", "pyramid_levels", "=", "self", ".", "pyramid_levels", "[", "self", ".", "compound_coef", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.ExtIntermediateLayerGetter.forward": [[73, 89], ["collections.OrderedDict", "backbone.ExtIntermediateLayerGetter.items", "module", "backbone.check_if_includes_ext"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.check_if_includes_ext"], ["self", ".", "anchors", "=", "Anchors", "(", "anchor_scale", "=", "self", ".", "anchor_scale", "[", "compound_coef", "]", ",", "\n", "pyramid_levels", "=", "(", "torch", ".", "arange", "(", "self", ".", "pyramid_levels", "[", "self", ".", "compound_coef", "]", ")", "+", "3", ")", ".", "tolist", "(", ")", ",", "\n", "**", "kwargs", ")", "\n", "\n", "self", ".", "backbone_net", "=", "EfficientNet", "(", "self", ".", "backbone_compound_coef", "[", "compound_coef", "]", ",", "load_weights", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ")", ":", "\n", "        ", "regressBoxes", "=", "BBoxTransform", "(", ")", "\n", "clipBoxes", "=", "ClipBoxes", "(", ")", "\n", "\n", "input_sizes", "=", "[", "512", ",", "640", ",", "768", ",", "896", ",", "1024", ",", "1280", ",", "1280", ",", "1536", ",", "1536", "]", "\n", "if", "isinstance", "(", "images", ",", "list", ")", ":", "\n", "            ", "device", "=", "images", "[", "0", "]", ".", "device", "\n", "", "else", ":", "\n", "            ", "device", "=", "images", ".", "device", "\n", "", "ori_imgs", ",", "framed_imgs", ",", "framed_metas", "=", "preprocess", "(", "images", ",", "max_size", "=", "input_sizes", "[", "self", ".", "compound_coef", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.ExtBackboneWithFPN.__init__": [[92, 105], ["torch.nn.Module.__init__", "ext_config.get", "backbone.ExtIntermediateLayerGetter", "torchvision.ops.feature_pyramid_network.FeaturePyramidNetwork", "myutils.pytorch.module_util.freeze_module_params", "torchvision.ops.feature_pyramid_network.LastLevelMaxPool"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get"], ["images", "=", "framed_imgs", ".", "to", "(", "device", ")", "\n", "p3", ",", "p4", ",", "p5", "=", "self", ".", "backbone_net", "(", "images", ")", "\n", "\n", "p3", "=", "self", ".", "p3", "(", "p3", ")", "\n", "p4", "=", "self", ".", "p4", "(", "p4", ")", "\n", "p5", "=", "self", ".", "p5", "(", "p5", ")", "\n", "\n", "features", "=", "(", "p3", ",", "p4", ",", "p5", ")", "\n", "if", "self", ".", "distill_backbone_only", ":", "\n", "            ", "return", "features", "\n", "\n", "", "features", "=", "self", ".", "bifpn", "(", "features", ")", "\n", "\n", "regression", "=", "self", ".", "regressor", "(", "features", ")", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.ExtBackboneWithFPN.forward": [[106, 117], ["backbone.ExtBackboneWithFPN.body", "backbone.ExtBackboneWithFPN.body", "backbone.ExtBackboneWithFPN.fpn", "backbone.ExtBackboneWithFPN.fpn"], "methods", ["None"], ["classification", "=", "self", ".", "classifier", "(", "features", ")", "\n", "anchors", "=", "self", ".", "anchors", "(", "images", ",", "images", ".", "dtype", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "cls_loss", ",", "reg_loss", "=", "self", ".", "criterion", "(", "classification", ",", "regression", ",", "anchors", ",", "targets", ")", "\n", "loss_dict", "=", "{", "\n", "'cls_loss'", ":", "cls_loss", ",", "\n", "'reg_loss'", ":", "reg_loss", ",", "\n", "}", "\n", "return", "loss_dict", "\n", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.has_only_empty_bbox": [[11, 13], ["all", "any"], "function", ["None"], ["from", "models", ".", "efficientdet", ".", "loss", "import", "FocalLoss", "\n", "from", "models", ".", "mimic", ".", "base", "import", "BottleneckIdentity", "\n", "from", "models", ".", "mimic", ".", "efficientdet_layer", "import", "Bottlenet4EfficientDet", ","]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.count_visible_keypoints": [[15, 17], ["sum", "sum"], "function", ["None"], ["Bottleneck4EfficientDet", ",", "ChannelSelect", "\n", "from", "models", ".", "slimmable", ".", "slimmable_ops", "import", "USMBConvBlock", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.check_if_valid_target": [[19, 35], ["backbone.has_only_empty_bbox", "len", "backbone.count_visible_keypoints"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.has_only_empty_bbox", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.count_visible_keypoints"], ["class", "EfficientDetBackbone", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "80", ",", "compound_coef", "=", "0", ",", "load_weights", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EfficientDetBackbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "compound_coef", "=", "compound_coef", "\n", "self", ".", "criterion", "=", "FocalLoss", "(", ")", "\n", "self", ".", "backbone_compound_coef", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "6", ",", "7", "]", "\n", "self", ".", "fpn_num_filters", "=", "[", "64", ",", "88", ",", "112", ",", "160", ",", "224", ",", "288", ",", "384", ",", "384", ",", "384", "]", "\n", "self", ".", "fpn_cell_repeats", "=", "[", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "7", ",", "8", ",", "8", ",", "8", "]", "\n", "self", ".", "input_sizes", "=", "[", "512", ",", "640", ",", "768", ",", "896", ",", "1024", ",", "1280", ",", "1280", ",", "1536", ",", "1536", "]", "\n", "self", ".", "box_class_repeats", "=", "[", "3", ",", "3", ",", "3", ",", "4", ",", "4", ",", "4", ",", "5", ",", "5", ",", "5", "]", "\n", "self", ".", "pyramid_levels", "=", "[", "5", ",", "5", ",", "5", ",", "5", ",", "5", ",", "5", ",", "5", ",", "5", ",", "6", "]", "\n", "self", ".", "anchor_scale", "=", "[", "4.", ",", "4.", ",", "4.", ",", "4.", ",", "4.", ",", "4.", ",", "4.", ",", "5.", ",", "4.", "]", "\n", "self", ".", "aspect_ratios", "=", "kwargs", ".", "get", "(", "'ratios'", ",", "[", "(", "1.0", ",", "1.0", ")", ",", "(", "1.4", ",", "0.7", ")", ",", "(", "0.7", ",", "1.4", ")", "]", ")", "\n", "self", ".", "num_scales", "=", "len", "(", "kwargs", ".", "get", "(", "'scales'", ",", "[", "2", "**", "0", ",", "2", "**", "(", "1.0", "/", "3.0", ")", ",", "2", "**", "(", "2.0", "/", "3.0", ")", "]", ")", ")", "\n", "self", ".", "input_size", "=", "self", ".", "input_sizes", "[", "self", ".", "compound_coef", "]", "\n", "self", ".", "distill_backbone_only", "=", "False", "\n", "self", ".", "fully_slimmable", "=", "False", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.backbone.check_if_includes_ext": [[37, 39], ["isinstance", "isinstance"], "function", ["None"], ["self", ".", "p3", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "p4", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "p5", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.classifier.BaseExtClassifier.__init__": [[8, 11], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ext_idx", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ext_idx", "=", "ext_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.classifier.BaseExtClassifier.forward": [[12, 14], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'forward function is not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.classifier.Ext4ResNet.__init__": [[17, 33], ["classifier.BaseExtClassifier.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channel", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "ext_idx", "=", "0", ")", "\n", "self", ".", "extractor", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "64", ",", "64", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_channel", ",", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "16", ",", "kernel_size", "=", "2", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "8", ",", "8", ")", ")", "\n", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "16", "*", "8", "*", "8", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.classifier.Ext4ResNet.forward": [[34, 38], ["classifier.Ext4ResNet.extractor", "classifier.Ext4ResNet.linear", "classifier.Ext4ResNet.flatten", "classifier.Ext4ResNet.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "extractor", "(", "x", ")", "\n", "z", "=", "self", ".", "linear", "(", "z", ".", "flatten", "(", "1", ")", ")", "\n", "return", "z", "if", "self", ".", "training", "else", "z", ".", "softmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.ext.classifier.get_ext_classifier": [[40, 44], ["isinstance", "ValueError", "classifier.Ext4ResNet", "type"], "function", ["None"], ["", "", "def", "get_ext_classifier", "(", "backbone", ")", ":", "\n", "    ", "if", "isinstance", "(", "backbone", ",", "(", "ResNet", ",", "CustomResNet", ")", ")", ":", "\n", "        ", "return", "Ext4ResNet", "(", "backbone", ")", "\n", "", "raise", "ValueError", "(", "'type of backbone `{}` is not expected'", ".", "format", "(", "type", "(", "backbone", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.USChannelDrop.__init__": [[58, 63], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "strategy", "=", "'naive'", ")", ":", "\n", "        ", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "width_mult", "=", "1.0", "\n", "self", ".", "strategy", "=", "strategy", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.USChannelDrop.forward": [[64, 81], ["int", "round", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "range", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "channels", "=", "int", "(", "round", "(", "self", ".", "num_channels", "*", "self", ".", "width_mult", ",", "0", ")", ")", "\n", "\n", "if", "self", ".", "strategy", "==", "'naive'", ":", "\n", "            ", "y", "=", "input", "[", ":", ",", ":", "channels", ",", ":", ",", ":", "]", "\n", "\n", "", "elif", "self", ".", "strategy", "==", "'magnitude'", ":", "\n", "            ", "magnitude", "=", "torch", ".", "sum", "(", "torch", ".", "square", "(", "input", ")", ",", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "sorted", "=", "torch", ".", "sort", "(", "magnitude", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "[", "0", "]", "\n", "threshold", "=", "sorted", "[", ":", ",", "channels", "-", "1", "]", "\n", "mask", "=", "magnitude", ">", "threshold", "\n", "y", "=", "input", "\n", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "y", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "if", "not", "mask", "[", "i", ",", "j", "]", ":", "\n", "                        ", "y", "[", "i", "]", "[", "j", "]", "=", "torch", ".", "zeros", "(", "y", ".", "shape", "[", "2", ":", "4", "]", ")", "\n", "", "", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.USChannelRestore.__init__": [[83, 88], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channels", ",", "strategy", "=", "'naive'", ")", ":", "\n", "        ", "self", ".", "output_channels", "=", "output_channels", "\n", "self", ".", "width_mult", "=", "1.0", "\n", "self", ".", "strategy", "=", "strategy", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.USChannelRestore.forward": [[89, 97], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "strategy", "==", "'naive'", ":", "\n", "            ", "s", "=", "input", ".", "shape", "\n", "zeros", "=", "torch", ".", "zeros", "(", "(", "s", "[", "0", "]", ",", "self", ".", "output_channels", "-", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", ")", ",", "device", "=", "input", ".", "device", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "input", ",", "zeros", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "strategy", "==", "'magnitude'", ":", "\n", "            ", "y", "=", "input", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.USConv2d.__init__": [[104, 123], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "depthwise", "=", "False", ",", "bias", "=", "True", ",", "\n", "us", "=", "[", "True", ",", "True", "]", ",", "ratio", "=", "[", "1", ",", "1", "]", ",", "\n", "slimmable_input", "=", "True", ",", "slimmable_output", "=", "True", ")", ":", "\n", "        ", "in_channels_max", "=", "in_channels", "\n", "out_channels_max", "=", "out_channels", "\n", "groups", "=", "in_channels_max", "if", "depthwise", "else", "1", "\n", "super", "(", "USConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels_max", ",", "out_channels_max", ",", "\n", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "depthwise", "=", "depthwise", "\n", "self", ".", "in_channels_basic", "=", "in_channels", "\n", "self", ".", "out_channels_basic", "=", "out_channels", "\n", "self", ".", "width_mult", "=", "1.0", "\n", "self", ".", "us", "=", "us", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "slimmable_input", "=", "slimmable_input", "\n", "self", ".", "slimmable_output", "=", "slimmable_output", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.USConv2d.forward": [[124, 148], ["torch.functional.conv2d", "torch.functional.conv2d", "torch.functional.conv2d", "int", "int", "round", "round"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "in_channels", "=", "self", ".", "in_channels_basic", "\n", "out_channels", "=", "self", ".", "out_channels_basic", "\n", "\n", "if", "self", ".", "slimmable_input", ":", "\n", "            ", "in_channels", "=", "int", "(", "round", "(", "self", ".", "in_channels_basic", "*", "self", ".", "width_mult", ",", "0", ")", ")", "\n", "", "if", "self", ".", "slimmable_output", ":", "\n", "            ", "out_channels", "=", "int", "(", "round", "(", "self", ".", "out_channels_basic", "*", "self", ".", "width_mult", ",", "0", ")", ")", "\n", "\n", "", "self", ".", "groups", "=", "in_channels", "if", "self", ".", "depthwise", "else", "1", "\n", "weight", "=", "self", ".", "weight", "[", ":", "out_channels", ",", ":", "in_channels", ",", ":", ",", ":", "]", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "self", ".", "bias", "[", ":", "out_channels", "]", "\n", "", "else", ":", "\n", "            ", "bias", "=", "self", ".", "bias", "\n", "\n", "", "y", "=", "nn", ".", "functional", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", ",", "\n", "self", ".", "stride", ",", "self", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "# if getattr(FLAGS, 'conv_averaged', False):", "\n", "#     y = y * (max(self.in_channels_list)/self.in_channels)", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.USBatchNorm2d.__init__": [[151, 167], ["int", "torch.BatchNorm2d.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "round", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "int", "round"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "width_mult_list", ",", "ratio", "=", "1", ",", "eps", "=", "1e-05", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "\n", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "num_features_max", "=", "int", "(", "round", "(", "num_features", ",", "0", ")", ")", "\n", "super", "(", "USBatchNorm2d", ",", "self", ")", ".", "__init__", "(", "num_features_max", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ",", "eps", "=", "eps", ",", "\n", "track_running_stats", "=", "track_running_stats", ")", "\n", "self", ".", "num_features_basic", "=", "num_features", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "# for tracking log during training", "\n", "self", ".", "bn", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "BatchNorm2d", "(", "i", ",", "affine", "=", "False", ")", "\n", "for", "i", "in", "[", "int", "(", "round", "(", "num_features", "*", "width_mult", ")", ")", "for", "width_mult", "in", "width_mult_list", "]", "\n", "]", "\n", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "width_mult", "=", "1.0", "\n", "self", ".", "ignore_model_profiling", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.USBatchNorm2d.forward": [[168, 195], ["int", "slimmable_ops.float_index", "round", "torch.functional.batch_norm", "torch.functional.batch_norm", "torch.functional.batch_norm", "torch.functional.batch_norm", "torch.functional.batch_norm", "torch.functional.batch_norm"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.float_index"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "weight", "=", "self", ".", "weight", "\n", "bias", "=", "self", ".", "bias", "\n", "c", "=", "int", "(", "round", "(", "self", ".", "num_features_basic", "*", "self", ".", "width_mult", ",", "0", ")", ")", "\n", "idx", "=", "float_index", "(", "self", ".", "width_mult", ",", "self", ".", "width_mult_list", ")", "\n", "\n", "if", "idx", "is", "not", "None", ":", "\n", "            ", "y", "=", "nn", ".", "functional", ".", "batch_norm", "(", "\n", "input", ",", "\n", "self", ".", "bn", "[", "idx", "]", ".", "running_mean", "[", ":", "c", "]", ",", "\n", "self", ".", "bn", "[", "idx", "]", ".", "running_var", "[", ":", "c", "]", ",", "\n", "weight", "[", ":", "c", "]", ",", "\n", "bias", "[", ":", "c", "]", ",", "\n", "self", ".", "training", ",", "\n", "self", ".", "momentum", ",", "\n", "self", ".", "eps", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "nn", ".", "functional", ".", "batch_norm", "(", "\n", "input", ",", "\n", "self", ".", "running_mean", ",", "\n", "self", ".", "running_var", ",", "\n", "weight", "[", ":", "c", "]", ",", "\n", "bias", "[", ":", "c", "]", ",", "\n", "self", ".", "training", ",", "\n", "self", ".", "momentum", ",", "\n", "self", ".", "eps", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.USConv2dStaticSamePadding.__init__": [[201, 237], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "isinstance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "bias", "=", "True", ",", "groups", "=", "1", ",", "dilation", "=", "1", ",", "depthwise", "=", "False", ",", "\n", "slimmable_input", "=", "True", ",", "slimmable_output", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "in_channels_max", "=", "in_channels", "\n", "out_channels_max", "=", "out_channels", "\n", "groups", "=", "in_channels_max", "if", "depthwise", "else", "groups", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels_max", ",", "out_channels_max", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "bias", "=", "bias", ",", "groups", "=", "groups", ")", "\n", "\n", "self", ".", "stride", "=", "self", ".", "conv", ".", "stride", "\n", "self", ".", "kernel_size", "=", "self", ".", "conv", ".", "kernel_size", "\n", "self", ".", "dilation", "=", "self", ".", "conv", ".", "dilation", "\n", "self", ".", "in_channels_basic", "=", "in_channels", "\n", "self", ".", "out_channels_basic", "=", "out_channels", "\n", "self", ".", "slimmable_input", "=", "slimmable_input", "\n", "self", ".", "slimmable_output", "=", "slimmable_output", "\n", "self", ".", "width_mult", "=", "1.0", "\n", "self", ".", "depthwise", "=", "depthwise", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "groups", "=", "groups", "\n", "\n", "if", "self", ".", "depthwise", ":", "\n", "            ", "self", ".", "slimmable_input", "=", "True", "\n", "self", ".", "slimmable_output", "=", "True", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "stride", ",", "int", ")", ":", "\n", "            ", "self", ".", "stride", "=", "[", "self", ".", "stride", "]", "*", "2", "\n", "", "elif", "len", "(", "self", ".", "stride", ")", "==", "1", ":", "\n", "            ", "self", ".", "stride", "=", "[", "self", ".", "stride", "[", "0", "]", "]", "*", "2", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "kernel_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "kernel_size", "=", "[", "self", ".", "kernel_size", "]", "*", "2", "\n", "", "elif", "len", "(", "self", ".", "kernel_size", ")", "==", "1", ":", "\n", "            ", "self", ".", "kernel_size", "=", "[", "self", ".", "kernel_size", "[", "0", "]", "]", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.USConv2dStaticSamePadding.forward": [[238, 271], ["torch.pad", "torch.pad", "torch.pad", "torch.functional.conv2d", "torch.functional.conv2d", "torch.functional.conv2d", "int", "int", "round", "round", "math.ceil", "math.ceil"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", ",", "w", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "in_channels", "=", "self", ".", "in_channels_basic", "\n", "out_channels", "=", "self", ".", "out_channels_basic", "\n", "\n", "if", "self", ".", "slimmable_input", ":", "\n", "            ", "in_channels", "=", "int", "(", "round", "(", "self", ".", "in_channels_basic", "*", "self", ".", "width_mult", ",", "0", ")", ")", "\n", "", "if", "self", ".", "slimmable_output", ":", "\n", "            ", "out_channels", "=", "int", "(", "round", "(", "self", ".", "out_channels_basic", "*", "self", ".", "width_mult", ",", "0", ")", ")", "\n", "\n", "", "extra_h", "=", "(", "math", ".", "ceil", "(", "w", "/", "self", ".", "stride", "[", "1", "]", ")", "-", "1", ")", "*", "self", ".", "stride", "[", "1", "]", "-", "w", "+", "self", ".", "kernel_size", "[", "1", "]", "\n", "extra_v", "=", "(", "math", ".", "ceil", "(", "h", "/", "self", ".", "stride", "[", "0", "]", ")", "-", "1", ")", "*", "self", ".", "stride", "[", "0", "]", "-", "h", "+", "self", ".", "kernel_size", "[", "0", "]", "\n", "\n", "left", "=", "extra_h", "//", "2", "\n", "right", "=", "extra_h", "-", "left", "\n", "top", "=", "extra_v", "//", "2", "\n", "bottom", "=", "extra_v", "-", "top", "\n", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "[", "left", ",", "right", ",", "top", ",", "bottom", "]", ")", "\n", "\n", "weight", "=", "self", ".", "conv", ".", "weight", "[", ":", "out_channels", ",", ":", "in_channels", ",", ":", ",", ":", "]", "\n", "\n", "if", "self", ".", "conv", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "self", ".", "conv", ".", "bias", "[", ":", "out_channels", "]", "\n", "", "else", ":", "\n", "            ", "bias", "=", "self", ".", "conv", ".", "bias", "\n", "\n", "", "self", ".", "groups", "=", "in_channels", "if", "self", ".", "depthwise", "else", "1", "\n", "y", "=", "nn", ".", "functional", ".", "conv2d", "(", "x", ",", "weight", ",", "bias", ",", "\n", "self", ".", "stride", ",", "self", ".", "conv", ".", "padding", ",", "\n", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.USMBConvBlock.__init__": [[285, 347], ["torch.Module.__init__", "models.efficientdet.efficientnet.utils.get_same_padding_conv2d", "functools.partial", "models.efficientdet.efficientnet.utils.get_same_padding_conv2d.", "functools.partial.", "models.efficientdet.efficientnet.utils.MemoryEfficientSwish", "functools.partial.", "slimmable_ops.USBatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "max", "models.efficientdet.efficientnet.utils.get_same_padding_conv2d.", "models.efficientdet.efficientnet.utils.get_same_padding_conv2d.", "slimmable_ops.USBatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "slimmable_ops.USBatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "int"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.get_same_padding_conv2d", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max"], ["def", "__init__", "(", "self", ",", "block_args", ",", "global_params", ",", "width_mult_list", ",", "\n", "fully_slimmable", "=", "False", ",", "slimmable_input", "=", "True", ",", "slimmable_output", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fully_slimmable", "=", "fully_slimmable", "\n", "self", ".", "_block_args", "=", "block_args", "\n", "self", ".", "width_mult_list", "=", "width_mult_list", "\n", "self", ".", "_bn_mom", "=", "1", "-", "global_params", ".", "batch_norm_momentum", "\n", "self", ".", "_bn_eps", "=", "global_params", ".", "batch_norm_epsilon", "\n", "self", ".", "has_se", "=", "(", "self", ".", "_block_args", ".", "se_ratio", "is", "not", "None", ")", "and", "(", "0", "<", "self", ".", "_block_args", ".", "se_ratio", "<=", "1", ")", "\n", "self", ".", "id_skip", "=", "block_args", ".", "id_skip", "# skip connection and drop connect", "\n", "\n", "# Get static or dynamic convolution depending on image size", "\n", "\n", "Conv2d", "=", "get_same_padding_conv2d", "(", "image_size", "=", "global_params", ".", "image_size", ")", "\n", "USConv2d", "=", "partial", "(", "USConv2dStaticSamePadding", ",", "image_size", "=", "global_params", ".", "image_size", ")", "\n", "if", "fully_slimmable", ":", "\n", "            ", "Conv2d", "=", "USConv2d", "\n", "\n", "# Expansion phase", "\n", "", "inp", "=", "self", ".", "_block_args", ".", "input_filters", "# number of input channels", "\n", "oup", "=", "self", ".", "_block_args", ".", "input_filters", "*", "self", ".", "_block_args", ".", "expand_ratio", "# number of output channels", "\n", "k", "=", "self", ".", "_block_args", ".", "kernel_size", "\n", "s", "=", "self", ".", "_block_args", ".", "stride", "\n", "if", "self", ".", "_block_args", ".", "expand_ratio", "!=", "1", ":", "\n", "            ", "self", ".", "_expand_conv", "=", "USConv2d", "(", "in_channels", "=", "inp", ",", "out_channels", "=", "oup", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "\n", "slimmable_input", "=", "slimmable_input", ",", "slimmable_output", "=", "fully_slimmable", ")", "\n", "if", "fully_slimmable", ":", "\n", "                ", "self", ".", "_bn0", "=", "USBatchNorm2d", "(", "num_features", "=", "oup", ",", "width_mult_list", "=", "width_mult_list", ",", "\n", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_bn0", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "oup", ",", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "\n", "", "", "self", ".", "_depthwise_conv", "=", "Conv2d", "(", "\n", "in_channels", "=", "oup", ",", "out_channels", "=", "oup", ",", "groups", "=", "oup", ",", "depthwise", "=", "True", ",", "\n", "kernel_size", "=", "k", ",", "stride", "=", "s", ",", "bias", "=", "False", ")", "\n", "\n", "if", "fully_slimmable", ":", "\n", "            ", "self", ".", "_bn1", "=", "USBatchNorm2d", "(", "num_features", "=", "oup", ",", "width_mult_list", "=", "width_mult_list", ",", "\n", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "oup", ",", "\n", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "\n", "# Squeeze and Excitation layer, if desired", "\n", "", "if", "self", ".", "has_se", ":", "\n", "            ", "num_squeezed_channels", "=", "max", "(", "1", ",", "int", "(", "self", ".", "_block_args", ".", "input_filters", "*", "self", ".", "_block_args", ".", "se_ratio", ")", ")", "\n", "self", ".", "_se_reduce", "=", "Conv2d", "(", "in_channels", "=", "oup", ",", "out_channels", "=", "num_squeezed_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "_se_expand", "=", "Conv2d", "(", "in_channels", "=", "num_squeezed_channels", ",", "out_channels", "=", "oup", ",", "kernel_size", "=", "1", ")", "\n", "\n", "# Output phase", "\n", "", "final_oup", "=", "self", ".", "_block_args", ".", "output_filters", "\n", "self", ".", "_project_conv", "=", "USConv2d", "(", "in_channels", "=", "oup", ",", "out_channels", "=", "final_oup", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ",", "\n", "slimmable_output", "=", "slimmable_output", ",", "slimmable_input", "=", "fully_slimmable", ")", "\n", "\n", "if", "slimmable_output", ":", "\n", "            ", "self", ".", "_bn2", "=", "USBatchNorm2d", "(", "num_features", "=", "final_oup", ",", "width_mult_list", "=", "width_mult_list", ",", "\n", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "final_oup", ",", "\n", "momentum", "=", "self", ".", "_bn_mom", ",", "eps", "=", "self", ".", "_bn_eps", ")", "\n", "\n", "", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.USMBConvBlock.forward": [[348, 385], ["slimmable_ops.USMBConvBlock._depthwise_conv", "slimmable_ops.USMBConvBlock._bn1", "slimmable_ops.USMBConvBlock._swish", "slimmable_ops.USMBConvBlock._project_conv", "slimmable_ops.USMBConvBlock._bn2", "slimmable_ops.USMBConvBlock._expand_conv", "slimmable_ops.USMBConvBlock._bn0", "slimmable_ops.USMBConvBlock._swish", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "slimmable_ops.USMBConvBlock._se_reduce", "slimmable_ops.USMBConvBlock._swish", "slimmable_ops.USMBConvBlock._se_expand", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "print", "models.efficientdet.efficientnet.utils.drop_connect"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.drop_connect"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "drop_connect_rate", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: input tensor\n        :param drop_connect_rate: drop connect rate (float, between 0 and 1)\n        :return: output of block\n        \"\"\"", "\n", "\n", "# Expansion and Depthwise Convolution", "\n", "x", "=", "inputs", "\n", "if", "self", ".", "_block_args", ".", "expand_ratio", "!=", "1", ":", "\n", "            ", "x", "=", "self", ".", "_expand_conv", "(", "inputs", ")", "\n", "x", "=", "self", ".", "_bn0", "(", "x", ")", "\n", "x", "=", "self", ".", "_swish", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "_depthwise_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "_bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "_swish", "(", "x", ")", "\n", "\n", "# Squeeze and Excitation", "\n", "if", "self", ".", "has_se", ":", "\n", "            ", "x_squeezed", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "1", ")", "\n", "x_squeezed", "=", "self", ".", "_se_reduce", "(", "x_squeezed", ")", "\n", "x_squeezed", "=", "self", ".", "_swish", "(", "x_squeezed", ")", "\n", "x_squeezed", "=", "self", ".", "_se_expand", "(", "x_squeezed", ")", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x_squeezed", ")", "*", "x", "\n", "\n", "", "x", "=", "self", ".", "_project_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "_bn2", "(", "x", ")", "\n", "\n", "# Skip connection and drop connect", "\n", "input_filters", ",", "output_filters", "=", "self", ".", "_block_args", ".", "input_filters", ",", "self", ".", "_block_args", ".", "output_filters", "\n", "if", "self", ".", "id_skip", "and", "self", ".", "_block_args", ".", "stride", "==", "1", "and", "input_filters", "==", "output_filters", ":", "\n", "            ", "if", "drop_connect_rate", ":", "\n", "                ", "print", "(", "\"Drop Connect: Shouldnt happen\"", ")", "\n", "x", "=", "drop_connect", "(", "x", ",", "p", "=", "drop_connect_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "x", "+", "inputs", "# skip connection", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.USMBConvBlock.set_swish": [[386, 389], ["models.efficientdet.efficientnet.utils.MemoryEfficientSwish", "models.efficientdet.efficientnet.utils.Swish"], "methods", ["None"], ["", "def", "set_swish", "(", "self", ",", "memory_efficient", "=", "True", ")", ":", "\n", "        ", "\"\"\"Sets swish function as memory efficient (for training) or standard (for export)\"\"\"", "\n", "self", ".", "_swish", "=", "MemoryEfficientSwish", "(", ")", "if", "memory_efficient", "else", "Swish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.float_index": [[27, 35], ["numpy.isclose().nonzero", "len", "len", "numpy.isclose"], "function", ["None"], ["def", "float_index", "(", "a", ",", "floats", ",", "**", "kwargs", ")", ":", "\n", "    ", "l", "=", "np", ".", "isclose", "(", "a", ",", "floats", ",", "rtol", "=", "0.01", ",", "**", "kwargs", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "if", "len", "(", "l", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "if", "len", "(", "l", ")", "==", "1", ":", "\n", "        ", "return", "l", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.make_divisible": [[37, 52], ["max", "int"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.SmoothedValue.max"], ["", "", "def", "make_divisible", "(", "v", ",", "divisor", "=", "3", ",", "min_value", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    forked from slim:\n    https://github.com/tensorflow/models/blob/\\\n    0344c5503ee55e24f0de7f37336a6e08f10976fd/\\\n    research/slim/nets/mobilenet/mobilenet.py#L62-L69\n    \"\"\"", "\n", "if", "min_value", "is", "None", ":", "\n", "        ", "min_value", "=", "divisor", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "        ", "new_v", "+=", "divisor", "\n", "\n", "", "return", "new_v", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.slimmable_ops.close_to_any": [[54, 56], ["numpy.any", "numpy.isclose"], "function", ["None"], ["", "def", "close_to_any", "(", "a", ",", "floats", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "np", ".", "any", "(", "np", ".", "isclose", "(", "a", ",", "floats", ",", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.compute_post_bn.adjust_bn_layers": [[9, 33], ["isinstance", "module.reset_running_stats"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["def", "adjust_bn_layers", "(", "module", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "# Removing the stats computed using exponential running average", "\n", "# and resetting count", "\n", "        ", "try", ":", "\n", "            ", "module", ".", "reset_running_stats", "(", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "# Doing this so that we can restore it later", "\n", "", "module", ".", "_old_momentum", "=", "module", ".", "momentum", "\n", "\n", "# Switching to cumulutive running average", "\n", "module", ".", "momentum", "=", "0.1", "\n", "\n", "# This is necessary -- because otherwise the", "\n", "# newly observed batches will not be considered", "\n", "module", ".", "_old_training", "=", "module", ".", "training", "\n", "module", ".", "_old_track_running_stats", "=", "module", ".", "track_running_stats", "\n", "\n", "module", ".", "training", "=", "True", "\n", "# module.affine = True", "\n", "module", ".", "track_running_stats", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.compute_post_bn.restore_original_settings_of_bn_layers": [[34, 42], ["isinstance"], "function", ["None"], ["", "", "def", "restore_original_settings_of_bn_layers", "(", "module", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\n", "# Restoring old settings", "\n", "        ", "module", ".", "momentum", "=", "module", ".", "_old_momentum", "\n", "module", ".", "training", "=", "module", ".", "_old_training", "\n", "module", ".", "track_running_stats", "=", "module", ".", "_old_track_running_stats", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.compute_post_bn.adjust_momentum": [[43, 46], ["isinstance"], "function", ["None"], ["", "", "def", "adjust_momentum", "(", "module", ",", "t", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "module", ".", "momentum", "=", "1", "/", "(", "t", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.compute_post_bn.ComputeBN": [[47, 66], ["print", "time.time", "net.train", "net.apply", "net.apply", "net.eval", "print", "torch.no_grad", "torch.no_grad", "enumerate", "time.time", "net.apply", "net", "i.cuda", "compute_post_bn.adjust_momentum", "v.cuda", "t.items"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.src.coco_runner.train", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.compute_post_bn.adjust_momentum"], ["", "", "def", "ComputeBN", "(", "net", ",", "postloader", ",", "num_batch", "=", "1000", ")", ":", "\n", "    ", "print", "(", "\"Computing Batch Norm\"", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "net", ".", "train", "(", ")", "\n", "net", ".", "apply", "(", "adjust_bn_layers", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "postloader", ")", ":", "\n", "            ", "net", ".", "apply", "(", "lambda", "m", ":", "adjust_momentum", "(", "m", ",", "batch_idx", ")", ")", "\n", "inputs", "=", "[", "i", ".", "cuda", "(", ")", "for", "i", "in", "inputs", "[", "0", ":", "1", "]", "]", "\n", "targets", "=", "[", "{", "k", ":", "v", ".", "cuda", "(", ")", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", "}", "for", "t", "in", "targets", "[", "0", ":", "1", "]", "]", "\n", "_", "=", "net", "(", "inputs", ",", "targets", ")", "\n", "if", "not", "batch_idx", "<", "num_batch", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "net", ".", "apply", "(", "restore_original_settings_of_bn_layers", ")", "\n", "net", ".", "eval", "(", ")", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "print", "(", "\"Batch Norm Computed {}\"", ".", "format", "(", "elapsed", ")", ")", "\n", "return", "net", "", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.save_ckpt": [[11, 18], ["myutils.common.file_util.make_parent_dirs", "utils.misc_util.save_on_master", "isinstance", "model.module.state_dict", "model.state_dict", "optimizer.state_dict", "lr_scheduler.state_dict"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.misc_util.save_on_master"], []], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.load_ckpt": [[20, 36], ["torch.load", "myutils.common.file_util.check_if_exists", "print", "print", "model.load_state_dict", "print", "optimizer.load_state_dict", "print", "lr_scheduler.load_state_dict", "torch.load.get"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.FasterRCNN.load_state_dict", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get"], []], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.get_model": [[38, 58], ["__init__.load_ckpt", "rcnn.get_model.to", "models.org.rcnn.get_model", "ValueError", "structure.transformer.get_bottleneck_transformer", "__init__.load_ckpt", "rcnn.get_model.backbone.body.get_ext_classifier"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.load_ckpt", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.get_model", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.get_bottleneck_transformer", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.load_ckpt", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier"], []], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.get_iou_types": [[60, 71], ["isinstance", "isinstance", "isinstance", "iou_type_list.append", "iou_type_list.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.resnet_layer.Bottleneck4SmallResNet.__init__": [[8, 35], ["torch.nn.Sequential", "torch.nn.Sequential", "models.mimic.base.ExtEncoder", "models.mimic.base.BottleneckBase4Ext.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "models.ext.classifier.Ext4ResNet"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bottleneck_channel", ",", "ext_config", ",", "bottleneck_transformer", ")", ":", "\n", "        ", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "256", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "bottleneck_channel", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "bottleneck_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "bottleneck_channel", ",", "64", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "encoder", "=", "ExtEncoder", "(", "encoder", ",", "Ext4ResNet", "(", "64", ")", "if", "ext_config", "is", "not", "None", "else", "None", ",", "ext_config", ")", "\n", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ",", "decoder", "=", "decoder", ",", "bottleneck_transformer", "=", "bottleneck_transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.resnet_layer.Bottleneck4SmallResNet.get_ext_classifier": [[36, 38], ["resnet_layer.Bottleneck4SmallResNet.encoder.get_ext_classifier"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier"], ["", "def", "get_ext_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "get_ext_classifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.resnet_layer.Bottleneck4LargeResNet.__init__": [[41, 68], ["torch.nn.Sequential", "torch.nn.Sequential", "models.mimic.base.ExtEncoder", "models.mimic.base.BottleneckBase4Ext.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "models.ext.classifier.Ext4ResNet"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bottleneck_channel", ",", "ext_config", ",", "bottleneck_transformer", ")", ":", "\n", "        ", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "256", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "bottleneck_channel", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "bottleneck_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "bottleneck_channel", ",", "64", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "encoder", "=", "ExtEncoder", "(", "encoder", ",", "Ext4ResNet", "(", "64", ")", "if", "ext_config", "is", "not", "None", "else", "None", ",", "ext_config", ")", "\n", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ",", "decoder", "=", "decoder", ",", "bottleneck_transformer", "=", "bottleneck_transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.resnet_layer.Bottleneck4LargeResNet.get_ext_classifier": [[69, 71], ["resnet_layer.Bottleneck4LargeResNet.encoder.get_ext_classifier"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier"], ["", "def", "get_ext_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "get_ext_classifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.resnet_layer.SlimmableBottleneck4LargeResNet.__init__": [[73, 102], ["torch.nn.Sequential", "torch.nn.Sequential", "models.mimic.base.ExtEncoder", "models.mimic.base.BottleneckBase4Ext.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "models.slimmable.slimmable_ops.USConv2d", "models.slimmable.slimmable_ops.USBatchNorm2d", "torch.nn.ReLU", "models.slimmable.slimmable_ops.USConv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "models.ext.classifier.Ext4ResNet"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "width_mult_list", ",", "ext_config", ",", "bottleneck_transformer", ")", ":", "\n", "        ", "bottleneck_channel", "=", "12", "\n", "\n", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "256", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "USConv2d", "(", "64", ",", "bottleneck_channel", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "slimmable_input", "=", "False", ")", "\n", ")", "\n", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "USBatchNorm2d", "(", "bottleneck_channel", ",", "width_mult_list", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "USConv2d", "(", "bottleneck_channel", ",", "64", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ",", "slimmable_output", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "encoder", "=", "ExtEncoder", "(", "encoder", ",", "Ext4ResNet", "(", "64", ")", "if", "ext_config", "is", "not", "None", "else", "None", ",", "ext_config", ")", "\n", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ",", "decoder", "=", "decoder", ",", "bottleneck_transformer", "=", "bottleneck_transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.resnet_layer.SlimmableBottleneck4LargeResNet.get_ext_classifier": [[103, 105], ["resnet_layer.SlimmableBottleneck4LargeResNet.encoder.get_ext_classifier"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier"], ["", "def", "get_ext_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "get_ext_classifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.resnet_layer.FullySlimmableBottleneck4LargeResNet.__init__": [[108, 137], ["torch.nn.Sequential", "torch.nn.Sequential", "models.mimic.base.ExtEncoder", "models.mimic.base.BottleneckBase4Ext.__init__", "models.slimmable.slimmable_ops.USConv2d", "models.slimmable.slimmable_ops.USBatchNorm2d", "models.slimmable.slimmable_ops.USConv2d", "models.slimmable.slimmable_ops.USBatchNorm2d", "torch.nn.ReLU", "models.slimmable.slimmable_ops.USConv2d", "models.slimmable.slimmable_ops.USBatchNorm2d", "models.slimmable.slimmable_ops.USConv2d", "models.slimmable.slimmable_ops.USBatchNorm2d", "torch.nn.ReLU", "models.slimmable.slimmable_ops.USConv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "models.ext.classifier.Ext4ResNet"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "width_mult_list", ",", "ext_config", ",", "bottleneck_transformer", ")", ":", "\n", "        ", "bottleneck_channel", "=", "12", "\n", "\n", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "USConv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "USBatchNorm2d", "(", "64", ",", "width_mult_list", ")", ",", "\n", "USConv2d", "(", "64", ",", "256", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "USBatchNorm2d", "(", "256", ",", "width_mult_list", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "USConv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "USBatchNorm2d", "(", "64", ",", "width_mult_list", ")", ",", "\n", "USConv2d", "(", "64", ",", "bottleneck_channel", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "USBatchNorm2d", "(", "bottleneck_channel", ",", "width_mult_list", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "USConv2d", "(", "bottleneck_channel", ",", "64", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ",", "slimmable_output", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "encoder", "=", "ExtEncoder", "(", "encoder", ",", "Ext4ResNet", "(", "64", ")", "if", "ext_config", "is", "not", "None", "else", "None", ",", "ext_config", ")", "\n", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ",", "decoder", "=", "decoder", ",", "bottleneck_transformer", "=", "bottleneck_transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.resnet_layer.FullySlimmableBottleneck4LargeResNet.get_ext_classifier": [[138, 140], ["resnet_layer.FullySlimmableBottleneck4LargeResNet.encoder.get_ext_classifier"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier"], ["", "def", "get_ext_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "get_ext_classifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.resnet_layer.FullySlimmableLayer0.__init__": [[144, 152], ["torch.nn.Module.__init__", "models.slimmable.slimmable_ops.USConv2d", "models.slimmable.slimmable_ops.USBatchNorm2d", "torch.nn.ReLU", "torch.nn.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "width_mult_list", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "USConv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ",", "slimmable_input", "=", "False", ")", "\n", "self", ".", "bn1", "=", "USBatchNorm2d", "(", "self", ".", "inplanes", ",", "width_mult_list", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.resnet_layer.FullySlimmableLayer0.forward": [[153, 159], ["resnet_layer.FullySlimmableLayer0.conv1", "resnet_layer.FullySlimmableLayer0.bn1", "resnet_layer.FullySlimmableLayer0.relu", "resnet_layer.FullySlimmableLayer0.maxpool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.resnet_layer.get_mimic_layers": [[161, 195], ["backbone_params_config.get", "backbone_params_config.get", "backbone_config.get", "resnet_layer.FullySlimmableLayer0", "ValueError", "resnet_layer.Bottleneck4LargeResNet", "resnet_layer.Bottleneck4LargeResNet", "resnet_layer.SlimmableBottleneck4LargeResNet", "resnet_layer.FullySlimmableBottleneck4LargeResNet", "models.mimic.base.BottleneckIdentity", "ValueError"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.sync_batchnorm.comm.FutureResult.get"], ["", "", "def", "get_mimic_layers", "(", "backbone_name", ",", "backbone_config", ",", "bottleneck_transformer", "=", "None", ")", ":", "\n", "    ", "layer0", ",", "layer1", ",", "layer2", ",", "layer3", ",", "layer4", "=", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "backbone_params_config", "=", "backbone_config", "[", "'params'", "]", "\n", "layer0_config", "=", "backbone_params_config", ".", "get", "(", "'layer0'", ",", "None", ")", "\n", "layer1_config", "=", "backbone_params_config", ".", "get", "(", "'layer1'", ",", "None", ")", "\n", "\n", "if", "layer0_config", "is", "not", "None", ":", "\n", "        ", "layer0_name", "=", "layer0_config", "[", "'name'", "]", "\n", "if", "layer0_name", "==", "'FullySlimmableLayer0'", ":", "\n", "            ", "layer0", "=", "FullySlimmableLayer0", "(", "layer0_config", "[", "'width_mult_list'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'layer1_name `{}` is not expected'", ".", "format", "(", "layer0_name", ")", ")", "\n", "\n", "", "", "if", "layer1_config", "is", "not", "None", ":", "\n", "        ", "layer1_name", "=", "layer1_config", "[", "'name'", "]", "\n", "ext_config", "=", "backbone_config", ".", "get", "(", "'ext_config'", ",", "None", ")", "\n", "if", "layer1_name", "==", "'Bottleneck4SmallResNet'", "and", "backbone_name", "in", "{", "'custom_resnet18'", ",", "'custom_resnet34'", "}", ":", "\n", "            ", "layer1", "=", "Bottleneck4LargeResNet", "(", "layer1_config", "[", "'bottleneck_channel'", "]", ",", "ext_config", ",", "bottleneck_transformer", ")", "\n", "", "elif", "layer1_name", "==", "'Bottleneck4LargeResNet'", "and", "backbone_name", "in", "{", "'custom_resnet50'", ",", "'custom_resnet101'", ",", "'custom_resnet152'", "}", ":", "\n", "            ", "layer1", "=", "Bottleneck4LargeResNet", "(", "layer1_config", "[", "'bottleneck_channel'", "]", ",", "ext_config", ",", "bottleneck_transformer", ")", "\n", "", "elif", "layer1_name", "==", "'SlimmableBottleneck4LargeResNet'", "and", "backbone_name", "in", "{", "'custom_resnet50'", ",", "'custom_resnet101'", ",", "'custom_resnet152'", "}", ":", "\n", "            ", "layer1", "=", "SlimmableBottleneck4LargeResNet", "(", "layer1_config", "[", "'width_mult_list'", "]", ",", "ext_config", ",", "bottleneck_transformer", ")", "\n", "", "elif", "layer1_name", "==", "'FullySlimmableBottleneck4LargeResNet'", "and", "backbone_name", "in", "{", "'custom_resnet50'", ",", "'custom_resnet101'", ",", "'custom_resnet152'", "}", ":", "\n", "            ", "layer1", "=", "FullySlimmableBottleneck4LargeResNet", "(", "layer1_config", "[", "'width_mult_list'", "]", ",", "ext_config", ",", "bottleneck_transformer", ")", "\n", "", "elif", "layer1_name", "==", "'BottleneckIdentity'", "and", "backbone_name", "in", "{", "'custom_resnet50'", ",", "'custom_resnet101'", ",", "'custom_resnet152'", "}", ":", "\n", "            ", "layer1", "=", "BottleneckIdentity", "(", "backbone_config", ",", "bottleneck_transformer", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'layer1_name `{}` is not expected'", ".", "format", "(", "layer1_name", ")", ")", "\n", "", "", "return", "layer0", ",", "layer1", ",", "layer2", ",", "layer3", ",", "layer4", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.ExtEncoder.__init__": [[7, 12], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "ext_classifier", "=", "None", ",", "ext_config", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "ext_classifier", "=", "ext_classifier", "\n", "self", ".", "threshold", "=", "ext_config", "[", "'threshold'", "]", "if", "ext_config", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.ExtEncoder.forward_with_ext": [[13, 20], ["base.ExtEncoder.ext_classifier", "base.ExtEncoder.encoder"], "methods", ["None"], ["", "def", "forward_with_ext", "(", "self", ",", "x", ")", ":", "\n", "        ", "ext_z", "=", "self", ".", "ext_classifier", "(", "x", ")", "\n", "if", "not", "self", ".", "training", "and", "ext_z", ".", "shape", "[", "0", "]", "==", "1", "and", "ext_z", "[", "0", "]", "[", "1", "]", "<", "self", ".", "threshold", ":", "\n", "            ", "return", "None", ",", "ext_z", "\n", "\n", "", "z", "=", "self", ".", "encoder", "(", "x", ")", "\n", "return", "z", ",", "ext_z", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.ExtEncoder.forward": [[21, 23], ["base.ExtEncoder.encoder", "base.ExtEncoder.forward_with_ext"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.ExtEncoder.forward_with_ext"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "x", ")", "if", "self", ".", "ext_classifier", "is", "None", "else", "self", ".", "forward_with_ext", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.ExtEncoder.get_ext_classifier": [[24, 26], ["None"], "methods", ["None"], ["", "def", "get_ext_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ext_classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.BottleneckBase4Ext.__init__": [[29, 37], ["torch.nn.Module.__init__", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ",", "bottleneck_transformer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "bottleneck_transformer", "=", "bottleneck_transformer", "\n", "self", ".", "data_logging", "=", "isinstance", "(", "self", ".", "bottleneck_transformer", ",", "DataLogger", ")", "\n", "self", ".", "uses_ext_encoder", "=", "isinstance", "(", "encoder", ",", "ExtEncoder", ")", "and", "encoder", ".", "ext_classifier", "is", "not", "None", "\n", "self", ".", "use_bottleneck_transformer", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.BottleneckBase4Ext.forward_ext": [[38, 49], ["base.BottleneckBase4Ext.decoder", "base.BottleneckBase4Ext.bottleneck_transformer", "base.BottleneckBase4Ext.bottleneck_transformer", "z.to.to.to"], "methods", ["None"], ["", "def", "forward_ext", "(", "self", ",", "z", ")", ":", "\n", "        ", "z", ",", "ext_z", "=", "z", "\n", "if", "z", "is", "None", ":", "\n", "            ", "if", "self", ".", "data_logging", ":", "\n", "                ", "self", ".", "bottleneck_transformer", "(", "None", ",", "target", "=", "None", ")", "\n", "", "return", "z", ",", "ext_z", "\n", "", "elif", "not", "self", ".", "training", "and", "self", ".", "bottleneck_transformer", "is", "not", "None", "and", "self", ".", "use_bottleneck_transformer", ":", "\n", "            ", "device", "=", "z", ".", "device", "\n", "z", ",", "_", "=", "self", ".", "bottleneck_transformer", "(", "z", ",", "target", "=", "None", ")", "\n", "z", "=", "z", ".", "to", "(", "device", ")", "\n", "", "return", "self", ".", "decoder", "(", "z", ")", ",", "ext_z", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.BottleneckBase4Ext.forward": [[50, 59], ["base.BottleneckBase4Ext.encoder", "base.BottleneckBase4Ext.decoder", "base.BottleneckBase4Ext.forward_ext", "base.BottleneckBase4Ext.bottleneck_transformer", "z.to.to.to"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.BottleneckBase4Ext.forward_ext"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "encoder", "(", "x", ")", "\n", "if", "self", ".", "uses_ext_encoder", ":", "\n", "            ", "return", "self", ".", "forward_ext", "(", "z", ")", "\n", "", "elif", "not", "self", ".", "training", "and", "self", ".", "bottleneck_transformer", "is", "not", "None", "and", "self", ".", "use_bottleneck_transformer", ":", "\n", "            ", "device", "=", "z", ".", "device", "\n", "z", ",", "_", "=", "self", ".", "bottleneck_transformer", "(", "z", ",", "target", "=", "None", ")", "\n", "z", "=", "z", ".", "to", "(", "device", ")", "\n", "", "return", "self", ".", "decoder", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.BottleneckBase4Ext.get_ext_classifier": [[60, 62], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_ext_classifier", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'get_ext_classifier function is not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.BottleneckIdentity.__init__": [[65, 73], ["torch.nn.Sequential", "torch.nn.Sequential", "base.BottleneckBase4Ext.__init__", "torch.nn.Identity", "torch.nn.Identity"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bottleneck_transformer", "=", "None", ")", ":", "\n", "        ", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Identity", "(", ")", "\n", ")", "\n", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Identity", "(", ")", "\n", ")", "\n", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ",", "decoder", "=", "decoder", ",", "bottleneck_transformer", "=", "bottleneck_transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.set_module_width": [[75, 78], ["isinstance"], "function", ["None"], ["", "", "def", "set_module_width", "(", "module", ",", "width", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "(", "USBatchNorm2d", ",", "USConv2d", ",", "USConv2dStaticSamePadding", ")", ")", ":", "\n", "        ", "module", ".", "width_mult", "=", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.set_width": [[79, 84], ["module.apply", "base.set_module_width"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.set_module_width"], ["", "", "def", "set_width", "(", "module", ",", "width", ")", ":", "\n", "    ", "def", "_set_width", "(", "m", ")", ":", "\n", "        ", "set_module_width", "(", "m", ",", "width", ")", "\n", "\n", "", "module", ".", "apply", "(", "_set_width", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.split_rcnn.RcnnHead.__init__": [[14, 22], ["torch.nn.Module.__init__", "torch.nn.Sequential"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rcnn_model", ",", "bottleneck_transformer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "backbone", "=", "rcnn_model", ".", "backbone", "\n", "self", ".", "transform", "=", "rcnn_model", ".", "transform", "\n", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "backbone", ".", "body", ".", "conv1", ",", "backbone", ".", "body", ".", "bn1", ",", "backbone", ".", "body", ".", "relu", ",", "backbone", ".", "body", ".", "maxpool", ")", "\n", "self", ".", "layer1_encoder", "=", "backbone", ".", "body", ".", "layer1", ".", "encoder", "\n", "self", ".", "bottleneck_transformer", "=", "bottleneck_transformer", "\n", "del", "backbone", ".", "body", ".", "conv1", ",", "backbone", ".", "body", ".", "bn1", ",", "backbone", ".", "body", ".", "relu", ",", "backbone", ".", "body", ".", "maxpool", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.split_rcnn.RcnnHead.forward": [[23, 38], ["split_rcnn.RcnnHead.transform", "split_rcnn.RcnnHead.layer0", "split_rcnn.RcnnHead.layer1_encoder", "split_rcnn.RcnnHead.bottleneck_transformer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ")", ":", "\n", "# Keep transform inside the head just to make input of forward function simple", "\n", "        ", "original_image_sizes", "=", "[", "img", ".", "shape", "[", "-", "2", ":", "]", "for", "img", "in", "images", "]", "\n", "images", ",", "targets", "=", "self", ".", "transform", "(", "images", ",", "targets", ")", "\n", "z", "=", "self", ".", "layer0", "(", "images", ".", "tensors", ")", "\n", "z", "=", "self", ".", "layer1_encoder", "(", "z", ")", "\n", "if", "self", ".", "layer1_encoder", ".", "ext_classifier", "is", "not", "None", ":", "\n", "            ", "z", ",", "ext_z", "=", "z", "\n", "if", "z", "is", "None", ":", "\n", "# Stop inference since it is decided that there is no object we are interested in", "\n", "                ", "return", "None", "\n", "\n", "", "", "if", "self", ".", "bottleneck_transformer", "is", "not", "None", ":", "\n", "            ", "z", ",", "_", "=", "self", ".", "bottleneck_transformer", "(", "z", ",", "targets", ")", "\n", "", "return", "z", ",", "images", ".", "tensors", ".", "shape", ",", "images", ".", "image_sizes", ",", "original_image_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.split_rcnn.ModifiedIntermediateLayerGetter.__init__": [[47, 63], ["collections.OrderedDict", "model.named_children", "torch.nn.ModuleDict.__init__", "set().issubset", "ValueError", "return_layers.items", "set", "model.named_children"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "return_layers", ")", ":", "\n", "        ", "if", "not", "set", "(", "return_layers", ")", ".", "issubset", "(", "[", "name", "for", "name", ",", "_", "in", "model", ".", "named_children", "(", ")", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"return_layers are not present in model\"", ")", "\n", "\n", "", "orig_return_layers", "=", "return_layers", "\n", "return_layers", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "return_layers", ".", "items", "(", ")", "}", "\n", "layers", "=", "OrderedDict", "(", ")", "\n", "for", "name", ",", "module", "in", "model", ".", "named_children", "(", ")", ":", "\n", "            ", "layers", "[", "name", "]", "=", "module", "\n", "if", "name", "in", "return_layers", ":", "\n", "                ", "del", "return_layers", "[", "name", "]", "\n", "", "if", "not", "return_layers", ":", "\n", "                ", "break", "\n", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "layers", ")", "\n", "self", ".", "return_layers", "=", "orig_return_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.split_rcnn.ModifiedIntermediateLayerGetter.forward": [[64, 74], ["collections.OrderedDict", "split_rcnn.ModifiedIntermediateLayerGetter.items", "module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "layer1_output", ")", ":", "\n", "        ", "out", "=", "OrderedDict", "(", ")", "\n", "out", "[", "0", "]", "=", "layer1_output", "\n", "x", "=", "layer1_output", "\n", "for", "name", ",", "module", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "if", "name", "in", "self", ".", "return_layers", ":", "\n", "                ", "out_name", "=", "self", ".", "return_layers", "[", "name", "]", "\n", "out", "[", "out_name", "]", "=", "x", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.split_rcnn.ModifiedAnchorGenerator.__init__": [[82, 94], ["torchvision.models.detection.rpn.AnchorGenerator.__init__", "isinstance", "tuple", "isinstance", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sizes", "=", "(", "128", ",", "256", ",", "512", ")", ",", "\n", "aspect_ratios", "=", "(", "0.5", ",", "1.0", ",", "2.0", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "sizes", ",", "aspect_ratios", ")", "\n", "if", "not", "isinstance", "(", "sizes", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# TODO change this", "\n", "            ", "sizes", "=", "tuple", "(", "(", "s", ",", ")", "for", "s", "in", "sizes", ")", "\n", "", "if", "not", "isinstance", "(", "aspect_ratios", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "aspect_ratios", "=", "(", "aspect_ratios", ",", ")", "*", "len", "(", "sizes", ")", "\n", "", "assert", "len", "(", "sizes", ")", "==", "len", "(", "aspect_ratios", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.split_rcnn.ModifiedAnchorGenerator.forward": [[95, 109], ["list", "tuple", "split_rcnn.ModifiedAnchorGenerator.set_cell_anchors", "split_rcnn.ModifiedAnchorGenerator.cached_grid_anchors", "torch.jit.annotate", "enumerate", "torch.jit.annotate.append", "torch.cat", "anchors_in_image.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image_sizes", ",", "tensors_shape", ",", "feature_maps", ")", ":", "\n", "        ", "grid_sizes", "=", "list", "(", "[", "feature_map", ".", "shape", "[", "-", "2", ":", "]", "for", "feature_map", "in", "feature_maps", "]", ")", "\n", "image_size", "=", "tensors_shape", "[", "-", "2", ":", "]", "\n", "strides", "=", "tuple", "(", "(", "image_size", "[", "0", "]", "/", "g", "[", "0", "]", ",", "image_size", "[", "1", "]", "/", "g", "[", "1", "]", ")", "for", "g", "in", "grid_sizes", ")", "\n", "self", ".", "set_cell_anchors", "(", "feature_maps", "[", "0", "]", ".", "device", ")", "\n", "anchors_over_all_feature_maps", "=", "self", ".", "cached_grid_anchors", "(", "grid_sizes", ",", "strides", ")", "\n", "anchors", "=", "torch", ".", "jit", ".", "annotate", "(", "List", "[", "List", "[", "torch", ".", "Tensor", "]", "]", ",", "[", "]", ")", "\n", "for", "i", ",", "(", "image_height", ",", "image_width", ")", "in", "enumerate", "(", "image_sizes", ")", ":", "\n", "            ", "anchors_in_image", "=", "[", "]", "\n", "for", "anchors_per_feature_map", "in", "anchors_over_all_feature_maps", ":", "\n", "                ", "anchors_in_image", ".", "append", "(", "anchors_per_feature_map", ")", "\n", "", "anchors", ".", "append", "(", "anchors_in_image", ")", "\n", "", "anchors", "=", "[", "torch", ".", "cat", "(", "anchors_per_image", ")", "for", "anchors_per_image", "in", "anchors", "]", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.split_rcnn.ModifiedRegionProposalNetwork.__init__": [[120, 130], ["torchvision.models.detection.rpn.RegionProposalNetwork.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["def", "__init__", "(", "self", ",", "\n", "anchor_generator", ",", "\n", "head", ",", "\n", "#", "\n", "fg_iou_thresh", ",", "bg_iou_thresh", ",", "\n", "batch_size_per_image", ",", "positive_fraction", ",", "\n", "#", "\n", "pre_nms_top_n", ",", "post_nms_top_n", ",", "nms_thresh", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "anchor_generator", ",", "head", ",", "fg_iou_thresh", ",", "bg_iou_thresh", ",", "batch_size_per_image", ",", "positive_fraction", ",", "\n", "pre_nms_top_n", ",", "post_nms_top_n", ",", "nms_thresh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.split_rcnn.ModifiedRegionProposalNetwork.forward": [[131, 160], ["list", "split_rcnn.ModifiedRegionProposalNetwork.head", "split_rcnn.ModifiedRegionProposalNetwork.anchor_generator", "len", "torchvision.models.detection.rpn.concat_box_prediction_layers", "split_rcnn.ModifiedRegionProposalNetwork.box_coder.decode", "proposals.view.view.view", "split_rcnn.ModifiedRegionProposalNetwork.filter_proposals", "list.values", "o[].numel", "pred_bbox_deltas.detach", "split_rcnn.ModifiedRegionProposalNetwork.assign_targets_to_anchors", "split_rcnn.ModifiedRegionProposalNetwork.box_coder.encode", "split_rcnn.ModifiedRegionProposalNetwork.compute_loss"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.BlockDecoder.decode", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.BlockDecoder.encode"], ["", "def", "forward", "(", "self", ",", "image_sizes", ",", "tensors_shape", ",", "features", ",", "targets", "=", "None", ")", ":", "\n", "# RPN uses all feature maps that are available", "\n", "        ", "features", "=", "list", "(", "features", ".", "values", "(", ")", ")", "\n", "objectness", ",", "pred_bbox_deltas", "=", "self", ".", "head", "(", "features", ")", "\n", "anchors", "=", "self", ".", "anchor_generator", "(", "image_sizes", ",", "tensors_shape", ",", "features", ")", "\n", "\n", "num_images", "=", "len", "(", "anchors", ")", "\n", "num_anchors_per_level", "=", "[", "o", "[", "0", "]", ".", "numel", "(", ")", "for", "o", "in", "objectness", "]", "\n", "objectness", ",", "pred_bbox_deltas", "=", "concat_box_prediction_layers", "(", "objectness", ",", "pred_bbox_deltas", ")", "\n", "# apply pred_bbox_deltas to anchors to obtain the decoded proposals", "\n", "# note that we detach the deltas because Faster R-CNN do not backprop through", "\n", "# the proposals", "\n", "proposals", "=", "self", ".", "box_coder", ".", "decode", "(", "pred_bbox_deltas", ".", "detach", "(", ")", ",", "anchors", ")", "\n", "proposals", "=", "proposals", ".", "view", "(", "num_images", ",", "-", "1", ",", "4", ")", "\n", "boxes", ",", "scores", "=", "self", ".", "filter_proposals", "(", "proposals", ",", "objectness", ",", "image_sizes", ",", "num_anchors_per_level", ")", "\n", "\n", "losses", "=", "{", "}", "\n", "if", "self", ".", "training", ":", "\n", "            ", "assert", "targets", "is", "not", "None", "\n", "labels", ",", "matched_gt_boxes", "=", "self", ".", "assign_targets_to_anchors", "(", "anchors", ",", "targets", ")", "\n", "regression_targets", "=", "self", ".", "box_coder", ".", "encode", "(", "matched_gt_boxes", ",", "anchors", ")", "\n", "loss_objectness", ",", "loss_rpn_box_reg", "=", "self", ".", "compute_loss", "(", "\n", "objectness", ",", "pred_bbox_deltas", ",", "labels", ",", "regression_targets", ")", "\n", "losses", "=", "{", "\n", "\"loss_objectness\"", ":", "loss_objectness", ",", "\n", "\"loss_rpn_box_reg\"", ":", "loss_rpn_box_reg", ",", "\n", "}", "\n", "", "return", "boxes", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.split_rcnn.RcnnTail.__init__": [[163, 185], ["torch.nn.Module.__init__", "isinstance", "backbone.body.return_layers.pop", "split_rcnn.ModifiedIntermediateLayerGetter", "split_rcnn.ModifiedAnchorGenerator", "split_rcnn.ModifiedRegionProposalNetwork"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rcnn_model", ",", "bottleneck_transformer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bottleneck_transformer", "=", "bottleneck_transformer", "\n", "self", ".", "layer1_decoder", "=", "rcnn_model", ".", "backbone", ".", "body", ".", "layer1", ".", "decoder", "\n", "del", "rcnn_model", ".", "backbone", ".", "body", ".", "layer1", "\n", "backbone", "=", "rcnn_model", ".", "backbone", "\n", "if", "isinstance", "(", "backbone", ",", "ExtBackboneWithFPN", ")", ":", "\n", "            ", "backbone", ".", "split", "=", "True", "\n", "\n", "", "backbone", ".", "body", ".", "return_layers", ".", "pop", "(", "'layer1'", ")", "\n", "backbone", ".", "body", "=", "ModifiedIntermediateLayerGetter", "(", "backbone", ".", "body", ",", "backbone", ".", "body", ".", "return_layers", ")", "\n", "self", ".", "sub_backbone", "=", "backbone", "\n", "# Anchor Generator and RPN do not use tensors of images, thus they are modified so that we can split RCNN", "\n", "rpn", "=", "rcnn_model", ".", "rpn", "\n", "anchor_generator", "=", "ModifiedAnchorGenerator", "(", "rpn", ".", "anchor_generator", ".", "sizes", ",", "rpn", ".", "anchor_generator", ".", "aspect_ratios", ")", "\n", "self", ".", "rpn", "=", "ModifiedRegionProposalNetwork", "(", "anchor_generator", ",", "rpn", ".", "head", ",", "rpn", ".", "proposal_matcher", ".", "high_threshold", ",", "\n", "rpn", ".", "proposal_matcher", ".", "low_threshold", ",", "rpn", ".", "fg_bg_sampler", ".", "batch_size_per_image", ",", "\n", "rpn", ".", "fg_bg_sampler", ".", "positive_fraction", ",", "rpn", ".", "_pre_nms_top_n", ",", "rpn", ".", "_post_nms_top_n", ",", "\n", "rpn", ".", "nms_thresh", ")", "\n", "self", ".", "roi_heads", "=", "rcnn_model", ".", "roi_heads", "\n", "self", ".", "transform", "=", "rcnn_model", ".", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.split_rcnn.RcnnTail.forward": [[186, 213], ["split_rcnn.RcnnTail.layer1_decoder", "split_rcnn.RcnnTail.sub_backbone", "dict", "isinstance", "isinstance", "split_rcnn.RcnnTail.rpn", "split_rcnn.RcnnTail.roi_heads", "split_rcnn.RcnnTail.transform.postprocess", "split_rcnn.RcnnTail.bottleneck_transformer", "collections.OrderedDict", "dict.update", "dict.update", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.utils.postprocess", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update"], ["", "def", "forward", "(", "self", ",", "z", ",", "tensors_shape", ",", "image_sizes", ",", "original_image_sizes", ",", "targets", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "bottleneck_transformer", "is", "not", "None", ":", "\n", "            ", "z", ",", "_", "=", "self", ".", "bottleneck_transformer", "(", "z", ",", "targets", ")", "\n", "\n", "", "layer1_feature", "=", "self", ".", "layer1_decoder", "(", "z", ")", "\n", "features", "=", "self", ".", "sub_backbone", "(", "layer1_feature", ")", "\n", "loss_dict", "=", "dict", "(", ")", "\n", "if", "isinstance", "(", "self", ".", "sub_backbone", ".", "body", ",", "ExtIntermediateLayerGetter", ")", ":", "\n", "            ", "sub_features", ",", "ext_logits", "=", "features", "\n", "if", "not", "self", ".", "training", "and", "sub_features", "is", "None", ":", "\n", "                ", "height", ",", "width", "=", "image_sizes", "[", "0", "]", "\n", "pred_dict", "=", "{", "'boxes'", ":", "torch", ".", "empty", "(", "0", ",", "4", ")", ",", "'labels'", ":", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "int64", ")", ",", "\n", "'scores'", ":", "torch", ".", "empty", "(", "0", ")", ",", "'masks'", ":", "torch", ".", "zeros", "(", "100", ",", "3", ",", "height", ",", "width", ")", ",", "\n", "'keypoints'", ":", "torch", ".", "empty", "(", "0", ",", "17", ",", "3", ")", ",", "'keypoints_scores'", ":", "torch", ".", "empty", "(", "0", ",", "17", ")", "}", "\n", "return", "[", "pred_dict", "]", "\n", "\n", "", "", "if", "isinstance", "(", "features", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "features", "=", "OrderedDict", "(", "[", "(", "0", ",", "features", ")", "]", ")", "\n", "\n", "", "proposals", ",", "proposal_losses", "=", "self", ".", "rpn", "(", "image_sizes", ",", "tensors_shape", ",", "features", ",", "targets", ")", "\n", "detections", ",", "detector_losses", "=", "self", ".", "roi_heads", "(", "features", ",", "proposals", ",", "image_sizes", ",", "targets", ")", "\n", "detections", "=", "self", ".", "transform", ".", "postprocess", "(", "detections", ",", "image_sizes", ",", "original_image_sizes", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "loss_dict", ".", "update", "(", "detector_losses", ")", "\n", "loss_dict", ".", "update", "(", "proposal_losses", ")", "\n", "return", "loss_dict", "\n", "", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.split_rcnn.split_rcnn_model": [[215, 222], ["split_rcnn.RcnnHead", "split_rcnn.RcnnTail", "structure.transformer.Compose", "structure.transformer.Compose", "structure.transformer.Quantizer", "structure.transformer.Dequantizer"], "function", ["None"], ["", "", "def", "split_rcnn_model", "(", "model", ",", "quantization", ")", ":", "\n", "    ", "encoder_transformer", "=", "None", "if", "quantization", "is", "None", "else", "Compose", "(", "[", "Quantizer", "(", "num_bits", "=", "quantization", ")", "]", ")", "\n", "decoder_transformer", "=", "None", "if", "quantization", "is", "None", "else", "Compose", "(", "[", "Dequantizer", "(", "num_bits", "=", "quantization", ")", "]", ")", "\n", "head_model", "=", "RcnnHead", "(", "model", ",", "bottleneck_transformer", "=", "encoder_transformer", ")", "\n", "tail_model", "=", "RcnnTail", "(", "model", ",", "bottleneck_transformer", "=", "decoder_transformer", ")", "\n", "del", "model", "\n", "return", "head_model", ",", "tail_model", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.ChannelSelect.__init__": [[20, 28], ["efficientdet_layer.get_channel_number", "models.slimmable.slimmable_ops.USChannelDrop", "models.slimmable.slimmable_ops.USChannelRestore", "models.mimic.base.BottleneckBase4Ext.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.get_channel_number", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bottleneck_transformer", "=", "None", ")", ":", "\n", "        ", "bottleneck_channel", "=", "config", "[", "'bottleneck'", "]", "[", "'bottleneck_channel'", "]", "\n", "strategy", "=", "config", "[", "'bottleneck'", "]", "[", "'strategy'", "]", "\n", "compound_coef", "=", "config", "[", "'compound_coef'", "]", "\n", "original_channels", "=", "get_channel_number", "(", "compound_coef", ")", "\n", "encoder", "=", "USChannelDrop", "(", "bottleneck_channel", ",", "strategy", "=", "strategy", ")", "\n", "decoder", "=", "USChannelRestore", "(", "original_channels", ",", "strategy", "=", "strategy", ")", "\n", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ",", "decoder", "=", "decoder", ",", "bottleneck_transformer", "=", "bottleneck_transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.ChannelSelect.get_ext_classifier": [[29, 31], ["efficientdet_layer.ChannelSelect.encoder.get_ext_classifier"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier"], ["", "def", "get_ext_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "get_ext_classifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottlenet4EfficientDet.__init__": [[34, 57], ["efficientdet_layer.get_channel_number", "torch.nn.Sequential", "torch.nn.Sequential", "models.mimic.base.BottleneckBase4Ext.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.get_channel_number", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bottleneck_transformer", "=", "None", ")", ":", "\n", "        ", "bottleneck_channel", "=", "config", "[", "'bottleneck'", "]", "[", "'bottleneck_channel'", "]", "\n", "compound_coef", "=", "config", "[", "'compound_coef'", "]", "\n", "original_channels", "=", "get_channel_number", "(", "compound_coef", ")", "\n", "activation", "=", "config", "[", "'bottleneck'", "]", "[", "'activation'", "]", "\n", "activation_fn", "=", "activation_dict", "[", "activation", "]", "\n", "\n", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "original_channels", ",", "original_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "original_channels", ")", ",", "\n", "activation_fn", ",", "\n", "nn", ".", "Conv2d", "(", "original_channels", ",", "bottleneck_channel", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "bottleneck_channel", ")", ",", "\n", "activation_fn", ",", "\n", ")", "\n", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "bottleneck_channel", ",", "original_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "original_channels", ")", ",", "\n", "activation_fn", ",", "\n", "nn", ".", "Conv2d", "(", "original_channels", ",", "original_channels", ",", "kernel_size", "=", "3", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "original_channels", ")", ",", "\n", ")", "\n", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ",", "decoder", "=", "decoder", ",", "bottleneck_transformer", "=", "bottleneck_transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottlenet4EfficientDet.get_ext_classifier": [[58, 60], ["efficientdet_layer.Bottlenet4EfficientDet.encoder.get_ext_classifier"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier"], ["", "def", "get_ext_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "get_ext_classifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.SlimmableBottlenet4EfficientDet.__init__": [[63, 88], ["efficientdet_layer.get_channel_number", "torch.nn.Sequential", "torch.nn.Sequential", "models.mimic.base.BottleneckBase4Ext.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "models.slimmable.slimmable_ops.USConv2d", "models.slimmable.slimmable_ops.USBatchNorm2d", "models.slimmable.slimmable_ops.USConv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.get_channel_number", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bottleneck_transformer", "=", "None", ")", ":", "\n", "        ", "bottleneck_channel", "=", "config", "[", "'bottleneck'", "]", "[", "'bottleneck_channel'", "]", "\n", "compound_coef", "=", "config", "[", "'compound_coef'", "]", "\n", "original_channels", "=", "get_channel_number", "(", "compound_coef", ")", "\n", "width_mult_list", "=", "config", "[", "'width_mult_list'", "]", "\n", "activation", "=", "config", "[", "'bottleneck'", "]", "[", "'activation'", "]", "\n", "activation_fn", "=", "activation_dict", "[", "activation", "]", "\n", "\n", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "original_channels", ",", "original_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "original_channels", ")", ",", "\n", "activation_fn", ",", "\n", "USConv2d", "(", "original_channels", ",", "bottleneck_channel", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ",", "slimmable_input", "=", "False", ")", ",", "\n", "USBatchNorm2d", "(", "bottleneck_channel", ",", "width_mult_list", ")", ",", "\n", "activation_fn", "\n", ")", "\n", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "USConv2d", "(", "bottleneck_channel", ",", "original_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ",", "\n", "slimmable_output", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "bottleneck_channel", ")", ",", "\n", "activation_fn", ",", "\n", "nn", ".", "Conv2d", "(", "original_channels", ",", "original_channels", ",", "kernel_size", "=", "3", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "original_channels", ")", ",", "\n", ")", "\n", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ",", "decoder", "=", "decoder", ",", "bottleneck_transformer", "=", "bottleneck_transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.SlimmableBottlenet4EfficientDet.get_ext_classifier": [[89, 91], ["efficientdet_layer.SlimmableBottlenet4EfficientDet.encoder.get_ext_classifier"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier"], ["", "def", "get_ext_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "get_ext_classifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.MBConvBlockDecoderOnlyEfficientDet.__init__": [[97, 115], ["efficientdet_layer.get_channel_number", "models.efficientdet.efficientnet.utils.efficientnet_params", "models.efficientdet.efficientnet.utils.efficientnet", "block_args._replace", "models.slimmable.slimmable_ops.USChannelDrop", "models.efficientdet.efficientnet.model.MBConvBlock", "models.mimic.base.BottleneckBase4Ext.__init__", "models.efficientdet.efficientnet.utils.round_repeats"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.get_channel_number", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.efficientnet_params", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.efficientnet", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.round_repeats"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bottleneck_transformer", "=", "None", ")", ":", "\n", "        ", "bottleneck_channel", "=", "config", "[", "'bottleneck'", "]", "[", "'bottleneck_channel'", "]", "\n", "compound_coef", "=", "config", "[", "'compound_coef'", "]", "\n", "original_channels", "=", "get_channel_number", "(", "compound_coef", ")", "\n", "\n", "w", ",", "d", ",", "s", ",", "p", "=", "efficientnet_params", "(", "\"efficientnet-b{}\"", ".", "format", "(", "compound_coef", ")", ")", "\n", "blocks_args", ",", "global_params", "=", "efficientnet", "(", "width_coefficient", "=", "w", ",", "depth_coefficient", "=", "d", ",", "\n", "dropout_rate", "=", "p", ",", "image_size", "=", "s", ")", "\n", "block_args", "=", "blocks_args", "[", "4", "]", "\n", "block_args_decoder", "=", "block_args", ".", "_replace", "(", "\n", "input_filters", "=", "bottleneck_channel", ",", "\n", "output_filters", "=", "original_channels", ",", "\n", "num_repeat", "=", "round_repeats", "(", "block_args", ".", "num_repeat", ",", "global_params", ")", "\n", ")", "\n", "\n", "encoder", "=", "USChannelDrop", "(", "bottleneck_channel", ")", "\n", "decoder", "=", "MBConvBlock", "(", "block_args_decoder", ",", "global_params", ")", "\n", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ",", "decoder", "=", "decoder", ",", "bottleneck_transformer", "=", "bottleneck_transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.MBConvBlockDecoderOnlyEfficientDet.get_ext_classifier": [[116, 118], ["efficientdet_layer.MBConvBlockDecoderOnlyEfficientDet.encoder.get_ext_classifier"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier"], ["", "def", "get_ext_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "get_ext_classifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.MBConvBlockEfficientDet.__init__": [[121, 156], ["efficientdet_layer.get_channel_number", "models.efficientdet.efficientnet.utils.efficientnet_params", "models.efficientdet.efficientnet.utils.efficientnet", "block_args._replace", "block_args._replace", "models.mimic.base.BottleneckBase4Ext.__init__", "print", "models.slimmable.slimmable_ops.USMBConvBlock", "models.slimmable.slimmable_ops.USMBConvBlock", "models.efficientdet.efficientnet.model.MBConvBlock", "models.efficientdet.efficientnet.model.MBConvBlock", "models.efficientdet.efficientnet.utils.round_repeats", "models.efficientdet.efficientnet.utils.round_repeats"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.get_channel_number", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.efficientnet_params", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.efficientnet", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.round_repeats", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.efficientnet.utils.round_repeats"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bottleneck_transformer", "=", "None", ")", ":", "\n", "        ", "bottleneck_channel", "=", "config", "[", "'bottleneck'", "]", "[", "'bottleneck_channel'", "]", "\n", "compound_coef", "=", "config", "[", "'compound_coef'", "]", "\n", "original_channels", "=", "get_channel_number", "(", "compound_coef", ")", "\n", "slimmable", "=", "(", "'slimmable'", "in", "config", ")", "\n", "\n", "w", ",", "d", ",", "s", ",", "p", "=", "efficientnet_params", "(", "\"efficientnet-b{}\"", ".", "format", "(", "compound_coef", ")", ")", "\n", "blocks_args", ",", "global_params", "=", "efficientnet", "(", "width_coefficient", "=", "w", ",", "depth_coefficient", "=", "d", ",", "\n", "dropout_rate", "=", "p", ",", "image_size", "=", "s", ")", "\n", "block_args", "=", "blocks_args", "[", "4", "]", "\n", "block_args_encoder", "=", "block_args", ".", "_replace", "(", "\n", "input_filters", "=", "original_channels", ",", "\n", "output_filters", "=", "bottleneck_channel", ",", "\n", "num_repeat", "=", "round_repeats", "(", "block_args", ".", "num_repeat", ",", "global_params", ")", "\n", ")", "\n", "block_args_decoder", "=", "block_args", ".", "_replace", "(", "\n", "input_filters", "=", "bottleneck_channel", ",", "\n", "output_filters", "=", "original_channels", ",", "\n", "num_repeat", "=", "round_repeats", "(", "block_args", ".", "num_repeat", ",", "global_params", ")", "\n", ")", "\n", "\n", "if", "slimmable", ":", "\n", "            ", "fully_slimmable", "=", "False", "\n", "if", "'fully_slimmable'", "in", "config", ":", "\n", "                ", "fully_slimmable", "=", "config", "[", "'fully_slimmable'", "]", "\n", "", "width_mult_list", "=", "config", "[", "'width_mult_list'", "]", "\n", "print", "(", "\"fully_slimmable\"", ",", "fully_slimmable", ")", "\n", "encoder", "=", "USMBConvBlock", "(", "block_args_encoder", ",", "global_params", ",", "width_mult_list", ",", "\n", "slimmable_input", "=", "fully_slimmable", ",", "fully_slimmable", "=", "fully_slimmable", ")", "\n", "decoder", "=", "USMBConvBlock", "(", "block_args_decoder", ",", "global_params", ",", "width_mult_list", ",", "\n", "slimmable_output", "=", "False", ",", "fully_slimmable", "=", "fully_slimmable", ")", "\n", "", "else", ":", "\n", "            ", "encoder", "=", "MBConvBlock", "(", "block_args_encoder", ",", "global_params", ")", "\n", "decoder", "=", "MBConvBlock", "(", "block_args_decoder", ",", "global_params", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ",", "decoder", "=", "decoder", ",", "bottleneck_transformer", "=", "bottleneck_transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.MBConvBlockEfficientDet.get_ext_classifier": [[157, 159], ["efficientdet_layer.MBConvBlockEfficientDet.encoder.get_ext_classifier"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier"], ["", "def", "get_ext_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "get_ext_classifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.__init__": [[162, 193], ["efficientdet_layer.get_channel_number", "torch.nn.Sequential", "torch.nn.Sequential", "models.mimic.base.BottleneckBase4Ext.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.get_channel_number", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bottleneck_transformer", "=", "None", ")", ":", "\n", "        ", "bottleneck_channel", "=", "config", "[", "'bottleneck'", "]", "[", "'bottleneck_channel'", "]", "\n", "compound_coef", "=", "config", "[", "'compound_coef'", "]", "\n", "original_channels", "=", "get_channel_number", "(", "compound_coef", ")", "\n", "activation", "=", "config", "[", "'bottleneck'", "]", "[", "'activation'", "]", "\n", "activation_fn", "=", "activation_dict", "[", "activation", "]", "\n", "\n", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "original_channels", ",", "64", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "256", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "activation_fn", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "bottleneck_channel", ",", "kernel_size", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", ")", "\n", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "bottleneck_channel", ")", ",", "\n", "activation_fn", ",", "\n", "nn", ".", "Conv2d", "(", "bottleneck_channel", ",", "64", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "activation_fn", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "original_channels", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "original_channels", ")", ",", "\n", ")", "\n", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ",", "decoder", "=", "decoder", ",", "bottleneck_transformer", "=", "bottleneck_transformer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier": [[194, 196], ["efficientdet_layer.Bottleneck4EfficientDet.encoder.get_ext_classifier"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.Bottleneck4EfficientDet.get_ext_classifier"], ["", "def", "get_ext_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "encoder", ".", "get_ext_classifier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.efficientdet_layer.get_channel_number": [[15, 18], ["None"], "function", ["None"], ["def", "get_channel_number", "(", "compound_coef", ")", ":", "\n", "    ", "channels", "=", "[", "40", ",", "40", ",", "48", ",", "48", ",", "56", ",", "64", ",", "72", ",", "72", ",", "80", "]", "\n", "return", "channels", "[", "compound_coef", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.encoder.FasterRCNNEncoder.__init__": [[5, 13], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "student_model", ")", ":", "\n", "        ", "super", "(", "FasterRCNNEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "student_model", "=", "student_model", ".", "backbone", ".", "body", "\n", "self", ".", "layer0", "=", "student_model", ".", "layer0", "\n", "self", ".", "encoder", "=", "student_model", ".", "layer1", ".", "encoder", "\n", "self", ".", "output_shape", "=", "None", "\n", "self", ".", "original_output_shape", "=", "None", "\n", "self", ".", "use_encoder", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.encoder.FasterRCNNEncoder.forward": [[14, 22], ["encoder.FasterRCNNEncoder.layer0", "encoder.FasterRCNNEncoder.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ")", ":", "\n", "        ", "x", "=", "images", "\n", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "self", ".", "original_output_shape", "=", "x", ".", "shape", "\n", "if", "self", ".", "use_encoder", ":", "\n", "            ", "x", "=", "self", ".", "encoder", "(", "x", ")", "\n", "", "self", ".", "output_shape", "=", "x", ".", "shape", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.encoder.EfficientDetEncoder.__init__": [[24, 44], ["torch.nn.Module.__init__", "enumerate", "torch.nn.Sequential", "encoder.EfficientDetEncoder._blocks.append"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "student_model", ")", ":", "\n", "        ", "super", "(", "EfficientDetEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "effnet", "=", "student_model", ".", "backbone_net", "\n", "self", ".", "_conv_stem", "=", "effnet", ".", "model", ".", "_conv_stem", "\n", "self", ".", "_bn0", "=", "effnet", ".", "model", ".", "_bn0", "\n", "self", ".", "encoder", "=", "effnet", ".", "bottleneck", ".", "encoder", "\n", "\n", "self", ".", "original_output_shape", "=", "None", "\n", "self", ".", "output_shape", "=", "None", "\n", "self", ".", "use_encoder", "=", "True", "\n", "\n", "self", ".", "_blocks", "=", "[", "]", "\n", "num_bottlenecks", "=", "0", "\n", "for", "idx", ",", "block", "in", "enumerate", "(", "effnet", ".", "model", ".", "_blocks", ")", ":", "\n", "            ", "if", "block", ".", "_depthwise_conv", ".", "stride", "==", "[", "2", ",", "2", "]", ":", "\n", "                ", "num_bottlenecks", "+=", "1", "\n", "if", "num_bottlenecks", "==", "3", ":", "\n", "                    ", "break", "\n", "", "", "self", ".", "_blocks", ".", "append", "(", "block", ")", "\n", "", "self", ".", "_blocks", "=", "torch", ".", "nn", ".", "Sequential", "(", "*", "self", ".", "_blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.encoder.EfficientDetEncoder.forward": [[45, 55], ["encoder.EfficientDetEncoder._conv_stem", "encoder.EfficientDetEncoder._bn0", "encoder.EfficientDetEncoder._blocks", "encoder.EfficientDetEncoder.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ")", ":", "\n", "        ", "x", "=", "images", "\n", "x", "=", "self", ".", "_conv_stem", "(", "x", ")", "\n", "x", "=", "self", ".", "_bn0", "(", "x", ")", "\n", "x", "=", "self", ".", "_blocks", "(", "x", ")", "\n", "self", ".", "original_output_shape", "=", "x", ".", "shape", "\n", "if", "self", ".", "use_encoder", ":", "\n", "            ", "x", "=", "self", ".", "encoder", "(", "x", ")", "\n", "", "self", ".", "output_shape", "=", "x", ".", "shape", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.encoder.full_encoder": [[56, 63], ["None"], "function", ["None"], ["", "", "def", "full_encoder", "(", "student_model", ",", "student_model_config", ")", ":", "\n", "    ", "encoders", "=", "{", "\n", "\"efficientdet\"", ":", "EfficientDetEncoder", ",", "\n", "\"faster_rcnn\"", ":", "FasterRCNNEncoder", ",", "\n", "\"mask_rcnn\"", ":", "FasterRCNNEncoder", ",", "\n", "}", "\n", "return", "encoders", "[", "student_model_config", "[", "'name'", "]", "]", "(", "student_model", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.analysis.HiddenPrints.__enter__": [[21, 24], ["open"], "methods", ["None"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_original_stdout", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.analysis.HiddenPrints.__exit__": [[25, 28], ["sys.stdout.close"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "close", "(", ")", "\n", "sys", ".", "stdout", "=", "self", ".", "_original_stdout", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.analysis.hide_prints": [[15, 20], ["None"], "function", ["None"], ["def", "hide_prints", "(", "debug", "=", "False", ")", ":", "\n", "    ", "if", "debug", ":", "\n", "        ", "return", "nullcontext", "\n", "", "else", ":", "\n", "        ", "return", "HiddenPrints", "\n", "", "", "class", "HiddenPrints", ":", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.analysis.get_trainable_modules": [[30, 46], ["list", "student_model.modules", "myutils.pytorch.module_util.get_module", "modules.append", "myutils.pytorch.module_util.get_module", "trainable_modules.append", "myutils.pytorch.module_util.get_module"], "function", ["None"], ["", "", "def", "get_trainable_modules", "(", "student_model", ",", "student_model_config", ")", ":", "\n", "    ", "if", "'frozen_modules'", "in", "student_model_config", ":", "\n", "        ", "all_modules", "=", "list", "(", "student_model", ".", "modules", "(", ")", ")", "\n", "modules", "=", "[", "]", "\n", "for", "student_path", "in", "student_model_config", "[", "'frozen_modules'", "]", ":", "\n", "            ", "m", "=", "module_util", ".", "get_module", "(", "student_model", ",", "student_path", ")", "\n", "modules", ".", "append", "(", "module_util", ".", "get_module", "(", "student_model", ",", "student_path", ")", ")", "\n", "\n", "", "trainable_modules", "=", "[", "m", "for", "m", "in", "all_modules", "if", "m", "not", "in", "modules", "]", "\n", "return", "trainable_modules", "\n", "\n", "", "elif", "'unfrozen_modules'", "in", "student_model_config", ":", "\n", "        ", "trainable_modules", "=", "[", "]", "\n", "for", "student_path", "in", "student_model_config", "[", "'unfrozen_modules'", "]", ":", "\n", "            ", "trainable_modules", ".", "append", "(", "module_util", ".", "get_module", "(", "student_model", ",", "student_path", ")", ")", "\n", "", "return", "trainable_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.analysis.jpeg_size_example": [[47, 57], ["Image.open", "im1.resize.resize", "BytesIO", "im1.resize.save", "BytesIO.seek", "BytesIO.tell"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.org.rcnn.CustomRCNNTransform.resize"], ["", "", "def", "jpeg_size_example", "(", "input_size", ")", ":", "\n", "    ", "from", "io", "import", "BytesIO", "\n", "from", "PIL", "import", "Image", "\n", "im1", "=", "Image", ".", "open", "(", "\"resource/stock_photo.jpg\"", ")", "\n", "im1", "=", "im1", ".", "resize", "(", "(", "input_size", ",", "input_size", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "buffer", "=", "BytesIO", "(", ")", "\n", "im1", ".", "save", "(", "buffer", ",", "format", "=", "\"JPEG\"", ",", "quality", "=", "95", ")", "\n", "buffer", ".", "seek", "(", "0", ",", "os", ".", "SEEK_END", ")", "\n", "size", "=", "buffer", ".", "tell", "(", ")", "\n", "return", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.analysis.model_analysis": [[59, 142], ["torch.device", "models.get_model", "analyzer.encoder.full_encoder", "analysis.jpeg_size_example", "print", "models.mimic.base.set_width", "sum", "copy.deepcopy", "float", "torch.rand", "ptflops.get_model_complexity_info", "ptflops.get_model_complexity_info", "ptflops.get_model_complexity_info", "int", "numpy.prod", "torch.cuda.is_available", "analysis.hide_prints", "p.numel", "numpy.prod", "int", "numpy.prod", "analyzer.encoder.full_encoder.encoder.parameters", "next", "models.get_model.parameters"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.slimmable.__init__.get_model", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.encoder.full_encoder", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.analysis.jpeg_size_example", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.set_width", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.analysis.hide_prints"], ["", "def", "model_analysis", "(", "config", ",", "device", ",", "setting", "=", "1.0", ",", "debug", "=", "False", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "device", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "# BoilerPlate", "\n", "custom_module_mapping", "=", "{", "\n", "USConv2d", ":", "usconv_flops_counter_hook", ",", "\n", "USConv2dStaticSamePadding", ":", "usconv_flops_counter_hook", ",", "\n", "USBatchNorm2d", ":", "bn_flops_counter_hook", ",", "\n", "}", "\n", "\n", "student_model_config", "=", "config", "[", "'student_model'", "]", "\n", "if", "setting", "==", "'Teacher'", ":", "\n", "        ", "width", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "width", "=", "float", "(", "setting", ")", "\n", "\n", "", "num_bits", "=", "config", "[", "'student_model'", "]", "[", "'bottleneck_transformer'", "]", "[", "'components'", "]", "[", "'quantizer'", "]", "[", "'params'", "]", "[", "'num_bits'", "]", "\n", "\n", "# Build Model", "\n", "student_model", "=", "get_model", "(", "student_model_config", ",", "device", ",", "strict", "=", "False", ")", "\n", "encoder", "=", "full_encoder", "(", "student_model", ",", "student_model_config", ")", "\n", "\n", "# Analyze", "\n", "results", "=", "{", "}", "\n", "size", "=", "student_model", ".", "input_size", "\n", "jpeg_size", "=", "jpeg_size_example", "(", "size", ")", "\n", "print", "(", "\"Width = {}\"", ".", "format", "(", "width", ")", ")", "\n", "set_width", "(", "student_model", ",", "width", ")", "\n", "\n", "def", "input_constructor", "(", "input_res", ")", ":", "\n", "        ", "batch", "=", "torch", ".", "rand", "(", "(", "1", ",", "*", "input_res", ")", ",", "dtype", "=", "next", "(", "student_model", ".", "parameters", "(", ")", ")", ".", "dtype", ",", "\n", "device", "=", "device", ")", "\n", "return", "{", "\"images\"", ":", "batch", "}", "\n", "\n", "\n", "\n", "", "with", "hide_prints", "(", "debug", ")", "(", ")", ":", "\n", "        ", "encoder", ".", "use_encoder", "=", "False", "\n", "macs_base_encoder", ",", "params_base_encoder", "=", "get_model_complexity_info", "(", "encoder", ",", "(", "3", ",", "size", ",", "size", ")", ",", "\n", "as_strings", "=", "False", ",", "\n", "print_per_layer_stat", "=", "False", ",", "\n", "input_constructor", "=", "input_constructor", ",", "\n", "custom_modules_hooks", "=", "custom_module_mapping", ")", "\n", "encoder", ".", "use_encoder", "=", "True", "\n", "macs_encoder", ",", "params_encoder", "=", "get_model_complexity_info", "(", "encoder", ",", "(", "3", ",", "size", ",", "size", ")", ",", "as_strings", "=", "False", ",", "\n", "print_per_layer_stat", "=", "False", ",", "verbose", "=", "False", ",", "\n", "input_constructor", "=", "input_constructor", ",", "\n", "custom_modules_hooks", "=", "custom_module_mapping", ")", "\n", "\n", "macs_full", ",", "params_full", "=", "get_model_complexity_info", "(", "student_model", ",", "(", "3", ",", "size", ",", "size", ")", ",", "as_strings", "=", "False", ",", "\n", "print_per_layer_stat", "=", "False", ",", "verbose", "=", "False", ",", "\n", "input_constructor", "=", "input_constructor", ",", "\n", "custom_modules_hooks", "=", "custom_module_mapping", ")", "\n", "\n", "\n", "### Hotfix??? ####", "\n", "", "params_encoder", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "encoder", ".", "encoder", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "params_encoder", "+=", "params_base_encoder", "\n", "####################", "\n", "\n", "results", "[", "'input_size'", "]", "=", "size", "\n", "results", "[", "\"jpeg_size\"", "]", "=", "jpeg_size", "\n", "results", "[", "\"output_shape\"", "]", "=", "[", "int", "(", "x", ")", "for", "x", "in", "encoder", ".", "output_shape", "]", "\n", "results", "[", "\"compression\"", "]", "=", "np", ".", "prod", "(", "results", "[", "\"output_shape\"", "]", ")", "/", "(", "size", "*", "size", "*", "3", ")", "\n", "results", "[", "'output_size'", "]", "=", "np", ".", "prod", "(", "results", "[", "\"output_shape\"", "]", ")", "*", "num_bits", "/", "8.0", "\n", "results", "[", "\"jpeg_compression\"", "]", "=", "jpeg_size", "/", "(", "size", "*", "size", "*", "3", ")", "\n", "results", "[", "\"macs_base_encoder\"", "]", "=", "macs_base_encoder", "\n", "results", "[", "\"params_base_encoder\"", "]", "=", "params_base_encoder", "\n", "results", "[", "\"macs_compressor\"", "]", "=", "macs_encoder", "-", "macs_base_encoder", "\n", "results", "[", "\"params_compressor\"", "]", "=", "params_encoder", "-", "params_base_encoder", "\n", "results", "[", "\"macs_decoder\"", "]", "=", "macs_full", "-", "macs_encoder", "\n", "results", "[", "\"params_decoder\"", "]", "=", "params_full", "-", "params_encoder", "\n", "\n", "if", "setting", "==", "'Teacher'", ":", "\n", "        ", "results", "[", "\"output_shape\"", "]", "=", "[", "int", "(", "x", ")", "for", "x", "in", "encoder", ".", "original_output_shape", "]", "\n", "results", "[", "\"compression\"", "]", "=", "np", ".", "prod", "(", "results", "[", "\"output_shape\"", "]", ")", "/", "(", "size", "*", "size", "*", "3", ")", "\n", "results", "[", "\"macs_compressor\"", "]", "=", "0.0", "\n", "results", "[", "\"params_compressor\"", "]", "=", "0.0", "\n", "\n", "", "del", "student_model", "\n", "del", "encoder", "\n", "\n", "return", "deepcopy", "(", "results", ")", "", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.hooks.bn_flops_counter_hook": [[6, 13], ["numpy.prod", "int"], "function", ["None"], ["def", "bn_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "\n", "batch_flops", "=", "np", ".", "prod", "(", "input", ".", "shape", ")", "\n", "if", "module", ".", "affine", ":", "\n", "        ", "batch_flops", "*=", "2", "\n", "", "module", ".", "__flops__", "+=", "int", "(", "batch_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.analyzer.hooks.usconv_flops_counter_hook": [[15, 57], ["list", "list", "print", "print", "print", "print", "print", "int", "hasattr", "int", "int", "int", "conv_module.conv.register_forward_hook", "round", "round", "int", "numpy.prod", "numpy.prod"], "function", ["None"], ["", "def", "usconv_flops_counter_hook", "(", "conv_module", ",", "input", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "input", "=", "input", "[", "0", "]", "\n", "batch_size", "=", "input", ".", "shape", "[", "0", "]", "\n", "output_dims", "=", "list", "(", "output", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "kernel_dims", "=", "list", "(", "conv_module", ".", "kernel_size", ")", "\n", "\n", "in_channels", "=", "conv_module", ".", "in_channels_basic", "\n", "out_channels", "=", "conv_module", ".", "out_channels_basic", "\n", "\n", "if", "conv_module", ".", "slimmable_input", ":", "\n", "        ", "in_channels", "=", "int", "(", "round", "(", "conv_module", ".", "in_channels_basic", "*", "conv_module", ".", "width_mult", ",", "0", ")", ")", "\n", "", "if", "conv_module", ".", "slimmable_output", ":", "\n", "        ", "out_channels", "=", "int", "(", "round", "(", "conv_module", ".", "out_channels_basic", "*", "conv_module", ".", "width_mult", ",", "0", ")", ")", "\n", "\n", "", "print", "(", "\"conv_module.in_channels_basic\"", ",", "conv_module", ".", "in_channels_basic", ")", "\n", "print", "(", "\"conv_module.out_channels_basic\"", ",", "conv_module", ".", "out_channels_basic", ")", "\n", "print", "(", "\"in_channels\"", ",", "in_channels", ")", "\n", "print", "(", "\"out_channels\"", ",", "out_channels", ")", "\n", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "print", "(", "\"groups\"", ",", "groups", ")", "\n", "\n", "filters_per_channel", "=", "out_channels", "//", "groups", "\n", "conv_per_position_flops", "=", "int", "(", "np", ".", "prod", "(", "kernel_dims", ")", ")", "*", "in_channels", "*", "filters_per_channel", "\n", "active_elements_count", "=", "batch_size", "*", "int", "(", "np", ".", "prod", "(", "output_dims", ")", ")", "\n", "overall_conv_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "bias_flops", "=", "0", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "bias_flops", "=", "out_channels", "*", "active_elements_count", "\n", "\n", "", "overall_flops", "=", "overall_conv_flops", "+", "bias_flops", "\n", "conv_module", ".", "__flops__", "+=", "int", "(", "overall_flops", ")", "\n", "\n", "def", "empty_flops_counter_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "        ", "module", ".", "__flops__", "=", "0", "\n", "\n", "# conv_module.conv.__flops_handle__.remove()", "\n", "", "if", "hasattr", "(", "conv_module", ",", "'conv'", ")", ":", "\n", "        ", "conv_module", ".", "conv", ".", "register_forward_hook", "(", "empty_flops_counter_hook", ")", "\n", "# if conv_module.depthwise:", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler.GroupedBatchSampler.__init__": [[28, 37], ["isinstance", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ",", "group_ids", ",", "batch_size", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "sampler", ",", "Sampler", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'sampler should be an instance of '", "\n", "'torch.utils.data.Sampler, but got sampler={}'", ".", "format", "(", "sampler", ")", "\n", ")", "\n", "", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "group_ids", "=", "group_ids", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler.GroupedBatchSampler.__iter__": [[38, 73], ["collections.defaultdict", "collections.defaultdict", "len", "buffer_per_group[].append", "samples_per_group[].append", "sorted", "len", "len", "collections.defaultdict.items", "buffer_per_group[].extend", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "buffer_per_group", "=", "defaultdict", "(", "list", ")", "\n", "samples_per_group", "=", "defaultdict", "(", "list", ")", "\n", "\n", "num_batches", "=", "0", "\n", "for", "idx", "in", "self", ".", "sampler", ":", "\n", "            ", "group_id", "=", "self", ".", "group_ids", "[", "idx", "]", "\n", "buffer_per_group", "[", "group_id", "]", ".", "append", "(", "idx", ")", "\n", "samples_per_group", "[", "group_id", "]", ".", "append", "(", "idx", ")", "\n", "if", "len", "(", "buffer_per_group", "[", "group_id", "]", ")", "==", "self", ".", "batch_size", ":", "\n", "                ", "yield", "buffer_per_group", "[", "group_id", "]", "\n", "num_batches", "+=", "1", "\n", "del", "buffer_per_group", "[", "group_id", "]", "\n", "", "assert", "len", "(", "buffer_per_group", "[", "group_id", "]", ")", "<", "self", ".", "batch_size", "\n", "\n", "# now we have run out of elements that satisfy", "\n", "# the group criteria, let's return the remaining", "\n", "# elements so that the size of the sampler is", "\n", "# deterministic", "\n", "", "expected_num_batches", "=", "len", "(", "self", ")", "\n", "num_remaining", "=", "expected_num_batches", "-", "num_batches", "\n", "if", "num_remaining", ">", "0", ":", "\n", "# for the remaining batches, take first the buffers with largest number", "\n", "# of elements", "\n", "            ", "for", "group_id", ",", "_", "in", "sorted", "(", "buffer_per_group", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "1", "]", ")", ",", "reverse", "=", "True", ")", ":", "\n", "                ", "remaining", "=", "self", ".", "batch_size", "-", "len", "(", "buffer_per_group", "[", "group_id", "]", ")", "\n", "buffer_per_group", "[", "group_id", "]", ".", "extend", "(", "\n", "samples_per_group", "[", "group_id", "]", "[", ":", "remaining", "]", ")", "\n", "assert", "len", "(", "buffer_per_group", "[", "group_id", "]", ")", "==", "self", ".", "batch_size", "\n", "yield", "buffer_per_group", "[", "group_id", "]", "\n", "num_remaining", "-=", "1", "\n", "if", "num_remaining", "==", "0", ":", "\n", "                    ", "break", "\n", "", "", "", "assert", "num_remaining", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler.GroupedBatchSampler.__len__": [[74, 76], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sampler", ")", "//", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._SubsetSampler.__init__": [[79, 81], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._SubsetSampler.__iter__": [[82, 84], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._SubsetSampler.__len__": [[85, 87], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._compute_aspect_ratios_slow": [[89, 110], ["print", "sampler._SubsetSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "torch.utils.model_zoo.tqdm", "enumerate", "len", "pbar.update", "aspect_ratios.append", "len", "float", "float"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.utils.coco_eval_util.CocoEvaluator.update"], ["", "", "def", "_compute_aspect_ratios_slow", "(", "dataset", ",", "indices", "=", "None", ")", ":", "\n", "    ", "print", "(", "'Your dataset doesn\\'t support the fast path for '", "\n", "'computing the aspect ratios, so will iterate over '", "\n", "'the full dataset and load every image instead. '", "\n", "'This might take some time...'", ")", "\n", "if", "indices", "is", "None", ":", "\n", "        ", "indices", "=", "range", "(", "len", "(", "dataset", ")", ")", "\n", "\n", "", "sampler", "=", "_SubsetSampler", "(", "indices", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "14", ",", "# you might want to increase it for faster processing", "\n", "collate_fn", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "aspect_ratios", "=", "[", "]", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "dataset", ")", ")", "as", "pbar", ":", "\n", "        ", "for", "_i", ",", "(", "img", ",", "_", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "pbar", ".", "update", "(", "1", ")", "\n", "height", ",", "width", "=", "img", ".", "shape", "[", "-", "2", ":", "]", "\n", "aspect_ratio", "=", "float", "(", "width", ")", "/", "float", "(", "height", ")", "\n", "aspect_ratios", ".", "append", "(", "aspect_ratio", ")", "\n", "", "", "return", "aspect_ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._compute_aspect_ratios_custom_dataset": [[112, 121], ["range", "dataset.get_height_and_width", "aspect_ratios.append", "len", "float", "float"], "function", ["None"], ["", "def", "_compute_aspect_ratios_custom_dataset", "(", "dataset", ",", "indices", "=", "None", ")", ":", "\n", "    ", "if", "indices", "is", "None", ":", "\n", "        ", "indices", "=", "range", "(", "len", "(", "dataset", ")", ")", "\n", "", "aspect_ratios", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "        ", "height", ",", "width", "=", "dataset", ".", "get_height_and_width", "(", "i", ")", "\n", "aspect_ratio", "=", "float", "(", "width", ")", "/", "float", "(", "height", ")", "\n", "aspect_ratios", ".", "append", "(", "aspect_ratio", ")", "\n", "", "return", "aspect_ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._compute_aspect_ratios_coco_dataset": [[123, 132], ["range", "aspect_ratios.append", "len", "float", "float"], "function", ["None"], ["", "def", "_compute_aspect_ratios_coco_dataset", "(", "dataset", ",", "indices", "=", "None", ")", ":", "\n", "    ", "if", "indices", "is", "None", ":", "\n", "        ", "indices", "=", "range", "(", "len", "(", "dataset", ")", ")", "\n", "", "aspect_ratios", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "        ", "img_info", "=", "dataset", ".", "coco", ".", "imgs", "[", "dataset", ".", "ids", "[", "i", "]", "]", "\n", "aspect_ratio", "=", "float", "(", "img_info", "[", "'width'", "]", ")", "/", "float", "(", "img_info", "[", "'height'", "]", ")", "\n", "aspect_ratios", ".", "append", "(", "aspect_ratio", ")", "\n", "", "return", "aspect_ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._compute_aspect_ratios_voc_dataset": [[134, 144], ["range", "aspect_ratios.append", "len", "PIL.Image.open", "float", "float"], "function", ["None"], ["", "def", "_compute_aspect_ratios_voc_dataset", "(", "dataset", ",", "indices", "=", "None", ")", ":", "\n", "    ", "if", "indices", "is", "None", ":", "\n", "        ", "indices", "=", "range", "(", "len", "(", "dataset", ")", ")", "\n", "", "aspect_ratios", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "# this doesn't load the data into memory, because PIL loads it lazily", "\n", "        ", "width", ",", "height", "=", "Image", ".", "open", "(", "dataset", ".", "images", "[", "i", "]", ")", ".", "size", "\n", "aspect_ratio", "=", "float", "(", "width", ")", "/", "float", "(", "height", ")", "\n", "aspect_ratios", ".", "append", "(", "aspect_ratio", ")", "\n", "", "return", "aspect_ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._compute_aspect_ratios_subset_dataset": [[146, 152], ["sampler.compute_aspect_ratios", "range", "len"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler.compute_aspect_ratios"], ["", "def", "_compute_aspect_ratios_subset_dataset", "(", "dataset", ",", "indices", "=", "None", ")", ":", "\n", "    ", "if", "indices", "is", "None", ":", "\n", "        ", "indices", "=", "range", "(", "len", "(", "dataset", ")", ")", "\n", "\n", "", "ds_indices", "=", "[", "dataset", ".", "indices", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "return", "compute_aspect_ratios", "(", "dataset", ".", "dataset", ",", "ds_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler.compute_aspect_ratios": [[154, 169], ["hasattr", "isinstance", "isinstance", "isinstance", "sampler._compute_aspect_ratios_slow", "sampler._compute_aspect_ratios_custom_dataset", "sampler._compute_aspect_ratios_coco_dataset", "sampler._compute_aspect_ratios_voc_dataset", "sampler._compute_aspect_ratios_subset_dataset"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._compute_aspect_ratios_slow", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._compute_aspect_ratios_custom_dataset", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._compute_aspect_ratios_coco_dataset", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._compute_aspect_ratios_voc_dataset", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._compute_aspect_ratios_subset_dataset"], ["", "def", "compute_aspect_ratios", "(", "dataset", ",", "indices", "=", "None", ")", ":", "\n", "    ", "if", "hasattr", "(", "dataset", ",", "'get_height_and_width'", ")", ":", "\n", "        ", "return", "_compute_aspect_ratios_custom_dataset", "(", "dataset", ",", "indices", ")", "\n", "\n", "", "if", "isinstance", "(", "dataset", ",", "torchvision", ".", "datasets", ".", "CocoDetection", ")", ":", "\n", "        ", "return", "_compute_aspect_ratios_coco_dataset", "(", "dataset", ",", "indices", ")", "\n", "\n", "", "if", "isinstance", "(", "dataset", ",", "torchvision", ".", "datasets", ".", "VOCDetection", ")", ":", "\n", "        ", "return", "_compute_aspect_ratios_voc_dataset", "(", "dataset", ",", "indices", ")", "\n", "\n", "", "if", "isinstance", "(", "dataset", ",", "torch", ".", "utils", ".", "data", ".", "Subset", ")", ":", "\n", "        ", "return", "_compute_aspect_ratios_subset_dataset", "(", "dataset", ",", "indices", ")", "\n", "\n", "# slow path", "\n", "", "return", "_compute_aspect_ratios_slow", "(", "dataset", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._quantize": [[171, 176], ["copy.deepcopy", "sorted", "list", "map", "bisect.bisect_right"], "function", ["None"], ["", "def", "_quantize", "(", "x", ",", "bins", ")", ":", "\n", "    ", "bins", "=", "copy", ".", "deepcopy", "(", "bins", ")", "\n", "bins", "=", "sorted", "(", "bins", ")", "\n", "quantized", "=", "list", "(", "map", "(", "lambda", "y", ":", "bisect", ".", "bisect_right", "(", "bins", ",", "y", ")", ",", "x", ")", ")", "\n", "return", "quantized", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler.create_aspect_ratio_groups": [[178, 188], ["sampler.compute_aspect_ratios", "sampler._quantize", "print", "print", "numpy.unique", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler.compute_aspect_ratios", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.sampler._quantize"], ["", "def", "create_aspect_ratio_groups", "(", "dataset", ",", "k", "=", "0", ")", ":", "\n", "    ", "aspect_ratios", "=", "compute_aspect_ratios", "(", "dataset", ")", "\n", "bins", "=", "(", "2", "**", "np", ".", "linspace", "(", "-", "1", ",", "1", ",", "2", "*", "k", "+", "1", ")", ")", ".", "tolist", "(", ")", "if", "k", ">", "0", "else", "[", "1.0", "]", "\n", "groups", "=", "_quantize", "(", "aspect_ratios", ",", "bins", ")", "\n", "# count number of elements per group", "\n", "counts", "=", "np", ".", "unique", "(", "groups", ",", "return_counts", "=", "True", ")", "[", "1", "]", "\n", "fbins", "=", "[", "0", "]", "+", "bins", "+", "[", "np", ".", "inf", "]", "\n", "print", "(", "'Using {} as bins for aspect ratio quantization'", ".", "format", "(", "fbins", ")", ")", "\n", "print", "(", "'Count of instances per bin: {}'", ".", "format", "(", "counts", ")", ")", "\n", "return", "groups", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.Compose.__init__": [[23, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.Compose.__call__": [[26, 30], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "image", ",", "target", "=", "t", "(", "image", ",", "target", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.RandomHorizontalFlip.__init__": [[33, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.RandomHorizontalFlip.__call__": [[36, 50], ["random.random", "image.flip.flip.flip", "target[].flip", "transformer._flip_coco_person_keypoints"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer._flip_coco_person_keypoints"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "height", ",", "width", "=", "image", ".", "shape", "[", "-", "2", ":", "]", "\n", "image", "=", "image", ".", "flip", "(", "-", "1", ")", "\n", "bbox", "=", "target", "[", "'boxes'", "]", "\n", "bbox", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "width", "-", "bbox", "[", ":", ",", "[", "2", ",", "0", "]", "]", "\n", "target", "[", "'boxes'", "]", "=", "bbox", "\n", "if", "'masks'", "in", "target", ":", "\n", "                ", "target", "[", "'masks'", "]", "=", "target", "[", "'masks'", "]", ".", "flip", "(", "-", "1", ")", "\n", "", "if", "'keypoints'", "in", "target", ":", "\n", "                ", "keypoints", "=", "target", "[", "'keypoints'", "]", "\n", "keypoints", "=", "_flip_coco_person_keypoints", "(", "keypoints", ",", "width", ")", "\n", "target", "[", "'keypoints'", "]", "=", "keypoints", "\n", "", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.ToTensor.__call__": [[53, 56], ["torchvision.transforms.functional.to_tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "image", "=", "functional", ".", "to_tensor", "(", "image", ")", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.DataLogger.__init__": [[59, 65], ["list", "list", "list", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_bits", "=", "8", ")", ":", "\n", "        ", "self", ".", "num_bits4quant", "=", "num_bits", "\n", "self", ".", "data_size_list", "=", "list", "(", ")", "\n", "self", ".", "fp16_data_size_list", "=", "list", "(", ")", "\n", "self", ".", "quantized_data_size_list", "=", "list", "(", ")", "\n", "self", ".", "tensor_shape_list", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.DataLogger.get_data": [[66, 69], ["transformer.DataLogger.data_size_list.copy", "transformer.DataLogger.quantized_data_size_list.copy", "transformer.DataLogger.tensor_shape_list.copy"], "methods", ["None"], ["", "def", "get_data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_size_list", ".", "copy", "(", ")", ",", "self", ".", "fp16_data_size_list", ",", "self", ".", "quantized_data_size_list", ".", "copy", "(", ")", ",", "self", ".", "tensor_shape_list", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.DataLogger.clear": [[70, 75], ["transformer.DataLogger.data_size_list.clear", "transformer.DataLogger.fp16_data_size_list.clear", "transformer.DataLogger.quantized_data_size_list.clear", "transformer.DataLogger.tensor_shape_list.clear"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.DataLogger.clear", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.DataLogger.clear", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.DataLogger.clear", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.DataLogger.clear"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "data_size_list", ".", "clear", "(", ")", "\n", "self", ".", "fp16_data_size_list", ".", "clear", "(", ")", "\n", "self", ".", "quantized_data_size_list", ".", "clear", "(", ")", "\n", "self", ".", "tensor_shape_list", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.DataLogger.__call__": [[76, 92], ["transformer.DataLogger.data_size_list.append", "transformer.DataLogger.fp16_data_size_list.append", "transformer.DataLogger.quantized_data_size_list.append", "transformer.DataLogger.tensor_shape_list.append", "myutils.common.file_util.get_binary_object_size", "myutils.common.file_util.get_binary_object_size", "myutils.common.file_util.get_binary_object_size", "isinstance", "z.short", "isinstance", "myutils.pytorch.tensor_util.quantize_tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "z", ",", "target", ")", ":", "\n", "        ", "if", "z", "is", "None", ":", "\n", "            ", "data_size", "=", "0.0", "\n", "fp16_data_size", "=", "0.0", "\n", "quantized_data_size", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "data_size", "=", "file_util", ".", "get_binary_object_size", "(", "z", ")", "\n", "fp16_data_size", "=", "None", "if", "not", "isinstance", "(", "z", ",", "torch", ".", "Tensor", ")", "else", "file_util", ".", "get_binary_object_size", "(", "z", ".", "short", "(", ")", ")", "\n", "quantized_data_size", "=", "None", "if", "not", "isinstance", "(", "z", ",", "torch", ".", "Tensor", ")", "else", "file_util", ".", "get_binary_object_size", "(", "tensor_util", ".", "quantize_tensor", "(", "z", ",", "num_bits", "=", "self", ".", "num_bits4quant", ")", ")", "\n", "\n", "", "self", ".", "data_size_list", ".", "append", "(", "data_size", ")", "\n", "self", ".", "fp16_data_size_list", ".", "append", "(", "fp16_data_size", ")", "\n", "self", ".", "quantized_data_size_list", ".", "append", "(", "quantized_data_size", ")", "\n", "self", ".", "tensor_shape_list", ".", "append", "(", "[", "0", ",", "0", ",", "0", "]", "if", "z", "is", "None", "else", "[", "z", ".", "shape", "[", "1", "]", ",", "z", ".", "shape", "[", "2", "]", ",", "z", ".", "shape", "[", "3", "]", "]", ")", "\n", "return", "z", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.JpegCompressor.__init__": [[95, 99], ["myutils.common.file_util.make_dirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "jpeg_quality", "=", "95", ",", "tmp_dir_path", "=", "'./tmp/'", ")", ":", "\n", "        ", "self", ".", "jpeg_quality", "=", "jpeg_quality", "\n", "self", ".", "tmp_dir_path", "=", "tmp_dir_path", "\n", "file_util", ".", "make_dirs", "(", "tmp_dir_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.JpegCompressor.save_image": [[100, 105], ["myutils.pytorch.tensor_util.quantize_tensor", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "myutils.pytorch.tensor_util.quantize_tensor.tensor.permute().cpu().numpy", "myutils.pytorch.tensor_util.quantize_tensor.tensor.permute().cpu", "myutils.pytorch.tensor_util.quantize_tensor.tensor.permute"], "methods", ["None"], ["", "def", "save_image", "(", "self", ",", "z", ",", "output_file_path", ")", ":", "\n", "        ", "qz", "=", "tensor_util", ".", "quantize_tensor", "(", "z", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "qz", ".", "tensor", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "img", ".", "save", "(", "output_file_path", ",", "format", "=", "'jpeg'", ",", "quality", "=", "self", ".", "jpeg_quality", ")", "\n", "return", "qz", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.JpegCompressor.__call__": [[106, 115], ["os.path.join", "transformer.JpegCompressor.save_image", "z.squeeze.squeeze.dim", "z.squeeze.squeeze.squeeze", "z.squeeze.squeeze.dim", "z.squeeze.squeeze.dim", "hash"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.JpegCompressor.save_image"], ["", "def", "__call__", "(", "self", ",", "z", ",", "target", ")", ":", "\n", "        ", "if", "(", "z", ".", "dim", "(", ")", "==", "3", "and", "z", ".", "shape", "[", "0", "]", "==", "3", ")", "or", "(", "z", ".", "dim", "(", ")", "==", "4", "and", "z", ".", "shape", "[", "0", "]", "==", "1", "and", "z", ".", "shape", "[", "1", "]", "==", "3", ")", ":", "\n", "            ", "if", "z", ".", "dim", "(", ")", "==", "4", ":", "\n", "                ", "z", "=", "z", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmp_dir_path", ",", "'{}.jpg'", ".", "format", "(", "hash", "(", "z", ")", ")", ")", "\n", "qz", "=", "self", ".", "save_image", "(", "z", ",", "file_path", ")", "\n", "return", "(", "file_path", ",", "qz", ")", ",", "target", "\n", "", "return", "z", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.JpegDecompressor.__init__": [[118, 121], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tmp_dir_path", "=", "'./tmp/'", ",", "target_dim", "=", "4", ")", ":", "\n", "        ", "self", ".", "tmp_dir_path", "=", "tmp_dir_path", "\n", "self", ".", "target_dim", "=", "target_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.JpegDecompressor.__call__": [[122, 129], ["isinstance", "isinstance", "PIL.Image.open().convert", "PIL.Image.open", "PIL.Image.open().convert.unsqueeze", "torchvision.transforms.functional.to_tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "z", ",", "target", ")", ":", "\n", "        ", "if", "isinstance", "(", "z", ",", "tuple", ")", "and", "isinstance", "(", "z", "[", "0", "]", ",", "str", ")", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "z", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "qz", "=", "z", "[", "1", "]", "\n", "img", "=", "qz", ".", "scale", "*", "(", "functional", ".", "to_tensor", "(", "img", ")", "*", "255.0", "-", "qz", ".", "zero_point", ")", "\n", "return", "img", "if", "self", ".", "target_dim", "!=", "4", "else", "img", ".", "unsqueeze", "(", "0", ")", ",", "target", "\n", "", "return", "z", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.Quantizer.__init__": [[132, 134], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_bits", "=", "8", ")", ":", "\n", "        ", "self", ".", "num_bits", "=", "num_bits", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.Quantizer.__call__": [[135, 141], ["myutils.pytorch.tensor_util.quantize_tensor", "z.half"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "z", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "num_bits", "==", "16", ":", "\n", "            ", "return", "z", ".", "half", "(", ")", ",", "target", "\n", "\n", "", "qz", "=", "tensor_util", ".", "quantize_tensor", "(", "z", ",", "num_bits", "=", "self", ".", "num_bits", ")", "\n", "return", "qz", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.Dequantizer.__init__": [[144, 147], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_bits", "=", "8", ")", ":", "\n", "# num_bits should be the same as Quantizer", "\n", "        ", "self", ".", "num_bits", "=", "num_bits", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.Dequantizer.__call__": [[148, 154], ["myutils.pytorch.tensor_util.dequantize_tensor", "qz.float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "qz", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "num_bits", "==", "16", ":", "\n", "            ", "return", "qz", ".", "float", "(", ")", ",", "target", "\n", "\n", "", "z", "=", "tensor_util", ".", "dequantize_tensor", "(", "qz", ")", "\n", "return", "z", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer._flip_coco_person_keypoints": [[12, 20], ["None"], "function", ["None"], ["def", "_flip_coco_person_keypoints", "(", "kps", ",", "width", ")", ":", "\n", "    ", "flip_inds", "=", "[", "0", ",", "2", ",", "1", ",", "4", ",", "3", ",", "6", ",", "5", ",", "8", ",", "7", ",", "10", ",", "9", ",", "12", ",", "11", ",", "14", ",", "13", ",", "16", ",", "15", "]", "\n", "flipped_data", "=", "kps", "[", ":", ",", "flip_inds", "]", "\n", "flipped_data", "[", "...", ",", "0", "]", "=", "width", "-", "flipped_data", "[", "...", ",", "0", "]", "\n", "# Maintain COCO convention that if visibility == 0, then x, y = 0", "\n", "inds", "=", "flipped_data", "[", "...", ",", "2", "]", "==", "0", "\n", "flipped_data", "[", "inds", "]", "=", "0", "\n", "return", "flipped_data", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.structure.transformer.get_bottleneck_transformer": [[164, 175], ["list", "list.append", "transformer.Compose", "KeyError", "obj_class", "len"], "function", ["None"], ["def", "get_bottleneck_transformer", "(", "transformer_config", ")", ":", "\n", "    ", "component_list", "=", "list", "(", ")", "\n", "components_config", "=", "transformer_config", "[", "'components'", "]", "\n", "for", "component_name", "in", "transformer_config", "[", "'order'", "]", ":", "\n", "        ", "param_config", "=", "components_config", "[", "component_name", "]", "[", "'params'", "]", "\n", "if", "component_name", "not", "in", "TRANSFORMER_CLASS_DICT", ":", "\n", "            ", "raise", "KeyError", "(", "'transformer `{}` is not expected'", ".", "format", "(", "component_name", ")", ")", "\n", "\n", "", "obj_class", "=", "TRANSFORMER_CLASS_DICT", "[", "component_name", "]", "\n", "component_list", ".", "append", "(", "obj_class", "(", "**", "param_config", ")", ")", "\n", "", "return", "Compose", "(", "component_list", ")", "if", "len", "(", "component_list", ")", ">", "0", "else", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.tool.DistillationBox.__init__": [[15, 43], ["torch.nn.Module.__init__", "list", "criterion_config[].items", "distillation.loss.get_loss", "isinstance", "isinstance", "isinstance", "tool.DistillationBox.target_module_pairs.append", "myutils.pytorch.module_util.get_module", "myutils.pytorch.module_util.get_module", "myutils.pytorch.module_util.get_module.register_forward_hook", "myutils.pytorch.module_util.get_module.register_forward_hook"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.get_loss"], ["    ", "def", "__init__", "(", "self", ",", "teacher_model", ",", "student_model", ",", "criterion_config", ",", "student_config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "teacher_model", "=", "teacher_model", "\n", "self", ".", "student_model", "=", "student_model", "\n", "self", ".", "target_module_pairs", "=", "list", "(", ")", "\n", "self", ".", "slimmable", "=", "(", "'slimmable'", "in", "student_config", "[", "'backbone'", "]", "[", "'params'", "]", ")", "\n", "self", ".", "student_config", "=", "student_config", "\n", "\n", "def", "extract_output", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "            ", "self", ".", "__dict__", "[", "'distillation_box'", "]", "[", "'output'", "]", "=", "output", "\n", "\n", "", "teacher_model_without_dp", "=", "teacher_model", ".", "module", "if", "isinstance", "(", "teacher_model", ",", "DataParallel", ")", "else", "teacher_model", "\n", "student_model_without_ddp", "=", "student_model", ".", "module", "if", "isinstance", "(", "student_model", ",", "DistributedDataParallel", ")", "else", "student_model", "\n", "for", "loss_name", ",", "loss_config", "in", "criterion_config", "[", "'terms'", "]", ".", "items", "(", ")", ":", "\n", "            ", "teacher_path", ",", "student_path", "=", "loss_config", "[", "'ts_modules'", "]", "\n", "self", ".", "target_module_pairs", ".", "append", "(", "(", "teacher_path", ",", "student_path", ")", ")", "\n", "teacher_module", "=", "module_util", ".", "get_module", "(", "teacher_model_without_dp", ",", "teacher_path", ")", "\n", "student_module", "=", "module_util", ".", "get_module", "(", "student_model_without_ddp", ",", "student_path", ")", "\n", "teacher_module", ".", "__dict__", "[", "'distillation_box'", "]", "=", "{", "'loss_name'", ":", "loss_name", ",", "'path_from_root'", ":", "teacher_path", ",", "\n", "'is_teacher'", ":", "True", "}", "\n", "student_module", ".", "__dict__", "[", "'distillation_box'", "]", "=", "{", "'loss_name'", ":", "loss_name", ",", "'path_from_root'", ":", "student_path", ",", "\n", "'is_teacher'", ":", "False", "}", "\n", "teacher_module", ".", "register_forward_hook", "(", "extract_output", ")", "\n", "student_module", ".", "register_forward_hook", "(", "extract_output", ")", "\n", "\n", "", "self", ".", "criterion", "=", "get_loss", "(", "criterion_config", ")", "\n", "self", ".", "require_adjustment", "=", "isinstance", "(", "student_model_without_ddp", ",", "KeypointRCNN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.tool.DistillationBox.forward": [[45, 88], ["tool.DistillationBox.teacher_model", "isinstance", "isinstance", "width_mult_list.sort", "range", "train_widths.append", "models.mimic.base.set_width", "tool.DistillationBox.student_model", "dict", "tool.DistillationBox.criterion", "myutils.pytorch.module_util.get_module", "myutils.pytorch.module_util.get_module", "train_widths.append", "myutils.pytorch.module_util.get_module", "myutils.pytorch.module_util.get_module", "random.choice", "random.choice", "random.choice", "random.choice"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.mimic.base.set_width"], ["", "def", "forward", "(", "self", ",", "images", ",", "targets", ")", ":", "\n", "        ", "teacher_model_without_dp", "=", "self", ".", "teacher_model", ".", "module", "if", "isinstance", "(", "self", ".", "teacher_model", ",", "DataParallel", ")", "else", "self", ".", "teacher_model", "\n", "student_model_without_ddp", "=", "self", ".", "student_model", ".", "module", "if", "isinstance", "(", "self", ".", "student_model", ",", "DistributedDataParallel", ")", "else", "self", ".", "student_model", "\n", "\n", "self", ".", "teacher_model", "(", "images", ")", "\n", "total_loss", "=", "0", "\n", "\n", "train_widths", "=", "[", "1.0", "]", "\n", "if", "self", ".", "slimmable", ":", "\n", "            ", "width_mult_list", "=", "self", ".", "student_config", "[", "'backbone'", "]", "[", "'params'", "]", "[", "'width_mult_list'", "]", "\n", "width_copies", "=", "self", ".", "student_config", "[", "'backbone'", "]", "[", "'params'", "]", "[", "'width_copies'", "]", "\n", "width_mult_list", ".", "sort", "(", ")", "\n", "train_widths", "=", "[", "width_mult_list", "[", "0", "]", "]", "\n", "for", "i", "in", "range", "(", "width_copies", "-", "2", ")", ":", "\n", "                ", "train_widths", ".", "append", "(", "random", ".", "choice", "(", "width_mult_list", ")", ")", "\n", "", "train_widths", ".", "append", "(", "width_mult_list", "[", "-", "1", "]", ")", "\n", "\n", "", "for", "width_mult", "in", "train_widths", ":", "\n", "            ", "set_width", "(", "self", ".", "student_model", ",", "width_mult", ")", "\n", "org_loss_dict", "=", "self", ".", "student_model", "(", "images", ",", "targets", ")", "\n", "output_dict", "=", "dict", "(", ")", "\n", "for", "teacher_path", ",", "student_path", "in", "self", ".", "target_module_pairs", ":", "\n", "                ", "partial_teacher_module", "=", "module_util", ".", "get_module", "(", "teacher_model_without_dp", ",", "teacher_path", ")", "\n", "partial_student_module", "=", "module_util", ".", "get_module", "(", "student_model_without_ddp", ",", "student_path", ")", "\n", "teacher_dict", "=", "partial_teacher_module", ".", "__dict__", "[", "'distillation_box'", "]", "\n", "student_dict", "=", "partial_student_module", ".", "__dict__", "[", "'distillation_box'", "]", "\n", "output_dict", "[", "teacher_dict", "[", "'loss_name'", "]", "]", "=", "(", "(", "teacher_dict", "[", "'path_from_root'", "]", ",", "teacher_dict", "[", "'output'", "]", ")", ",", "\n", "(", "student_dict", "[", "'path_from_root'", "]", ",", "student_dict", "[", "'output'", "]", ")", ")", "\n", "\n", "", "total_loss", "+=", "self", ".", "criterion", "(", "output_dict", ",", "org_loss_dict", ")", "\n", "\n", "# Free up memory", "\n", "", "for", "teacher_path", ",", "student_path", "in", "self", ".", "target_module_pairs", ":", "\n", "            ", "partial_teacher_module", "=", "module_util", ".", "get_module", "(", "teacher_model_without_dp", ",", "teacher_path", ")", "\n", "partial_student_module", "=", "module_util", ".", "get_module", "(", "student_model_without_ddp", ",", "student_path", ")", "\n", "teacher_dict", "=", "partial_teacher_module", ".", "__dict__", "[", "'distillation_box'", "]", "\n", "student_dict", "=", "partial_student_module", ".", "__dict__", "[", "'distillation_box'", "]", "\n", "partial_teacher_module", ".", "__dict__", "[", "'distillation_box'", "]", "[", "'output'", "]", "=", "None", "\n", "partial_student_module", ".", "__dict__", "[", "'distillation_box'", "]", "[", "'output'", "]", "=", "None", "\n", "\n", "", "return", "total_loss", "", "", "", ""]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.CustomLoss.__init__": [[7, 16], ["torch.nn.Module.__init__", "dict", "criterion_config[].items", "myutils.pytorch.func_util.get_loss"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__", "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.get_loss"], ["from", "models", ".", "efficientdet", ".", "utils", ".", "utils", "import", "postprocess", ",", "invert_affine", ",", "display", "\n", "\n", "\n", "def", "calc_iou", "(", "a", ",", "b", ")", ":", "\n", "# a(anchor) [boxes, (y1, x1, y2, x2)]", "\n", "# b(gt, coco-style) [boxes, (x1, y1, x2, y2)]", "\n", "\n", "    ", "area", "=", "(", "b", "[", ":", ",", "2", "]", "-", "b", "[", ":", ",", "0", "]", ")", "*", "(", "b", "[", ":", ",", "3", "]", "-", "b", "[", ":", ",", "1", "]", ")", "\n", "iw", "=", "torch", ".", "min", "(", "torch", ".", "unsqueeze", "(", "a", "[", ":", ",", "3", "]", ",", "dim", "=", "1", ")", ",", "b", "[", ":", ",", "2", "]", ")", "-", "torch", ".", "max", "(", "torch", ".", "unsqueeze", "(", "a", "[", ":", ",", "1", "]", ",", "1", ")", ",", "b", "[", ":", ",", "0", "]", ")", "\n", "ih", "=", "torch", ".", "min", "(", "torch", ".", "unsqueeze", "(", "a", "[", ":", ",", "2", "]", ",", "dim", "=", "1", ")", ",", "b", "[", ":", ",", "3", "]", ")", "-", "torch", ".", "max", "(", "torch", ".", "unsqueeze", "(", "a", "[", ":", ",", "0", "]", ",", "1", ")", ",", "b", "[", ":", ",", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.CustomLoss.forward": [[17, 19], ["NotImplementedError"], "methods", ["None"], ["iw", "=", "torch", ".", "clamp", "(", "iw", ",", "min", "=", "0", ")", "\n", "ih", "=", "torch", ".", "clamp", "(", "ih", ",", "min", "=", "0", ")", "\n", "ua", "=", "torch", ".", "unsqueeze", "(", "(", "a", "[", ":", ",", "2", "]", "-", "a", "[", ":", ",", "0", "]", ")", "*", "(", "a", "[", ":", ",", "3", "]", "-", "a", "[", ":", ",", "1", "]", ")", ",", "dim", "=", "1", ")", "+", "area", "-", "iw", "*", "ih", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__": [[22, 24], ["loss.CustomLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.__init__"], ["IoU", "=", "intersection", "/", "ua", "\n", "\n", "return", "IoU", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.GeneralizedCustomLoss.forward": [[25, 35], ["dict", "output_dict.items", "sum", "criterion", "sum", "dict.values", "org_loss_dict.values"], "methods", ["None"], ["\n", "\n", "", "class", "FocalLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "classifications", ",", "regressions", ",", "anchors", ",", "annotations", ",", "**", "kwargs", ")", ":", "\n", "        ", "alpha", "=", "0.25", "\n", "gamma", "=", "2.0", "\n", "batch_size", "=", "classifications", ".", "shape", "[", "0", "]", "\n", "classification_losses", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.jsiloto_adaptive-cob.distillation.loss.get_loss": [[42, 47], ["ValueError"], "function", ["None"], ["anchor_heights", "=", "anchor", "[", ":", ",", "2", "]", "-", "anchor", "[", ":", ",", "0", "]", "\n", "anchor_ctr_x", "=", "anchor", "[", ":", ",", "1", "]", "+", "0.5", "*", "anchor_widths", "\n", "anchor_ctr_y", "=", "anchor", "[", ":", ",", "0", "]", "+", "0.5", "*", "anchor_heights", "\n", "\n", "for", "j", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "classification", "=", "classifications", "[", "j", ",", ":", ",", ":", "]", "\n"]]}