{"home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.query.get_wiki_search_result": [[14, 19], ["wikipedia.search", "wikipedia.search"], "function", ["None"], ["def", "get_wiki_search_result", "(", "term", ",", "mode", "=", "0", ")", ":", "\n", "    ", "if", "mode", "==", "0", ":", "\n", "        ", "return", "wikipedia", ".", "search", "(", "f\"\\\"{term}\\\"\"", ")", "\n", "", "else", ":", "\n", "        ", "return", "wikipedia", ".", "search", "(", "term", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.query.get_wiki_search_result_batch": [[20, 33], ["os.path.exists", "os.makedirs", "open", "print", "query.get_wiki_search_result"], "function", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.query.get_wiki_search_result"], ["", "", "def", "get_wiki_search_result_batch", "(", "terms", ",", "mode", "=", "0", ")", ":", "\n", "    ", "dirs", "=", "\"tmp\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirs", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirs", ")", "\n", "\n", "", "with", "open", "(", "f\"{dirs}/phrase-wiki-search-results-{mode}-query.txt\"", ",", "'w'", ")", "as", "fw", ":", "\n", "        ", "for", "w", "in", "terms", ":", "\n", "            ", "rets", "=", "[", "]", "\n", "try", ":", "\n", "                ", "rets", "=", "get_wiki_search_result", "(", "w", ",", "mode", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "print", "(", "w", ",", "'\\t'", ".", "join", "(", "rets", ")", ",", "sep", "=", "'\\t'", ",", "file", "=", "fw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.query.print_results": [[34, 37], ["print"], "function", ["None"], ["", "", "", "def", "print_results", "(", "terms", ",", "scores", ",", "phrase_id", ")", ":", "\n", "    ", "for", "w", "in", "terms", ":", "\n", "        ", "print", "(", "f\"{w}: {scores[phrase_id[w]]}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.query.get_term_graph_with_query": [[39, 103], ["lemmatizer.NLTKLemmatizer", "set", "SparseTensor", "A.to_symmetric.to_symmetric", "open", "open.readlines", "open.close", "open", "open.close", "line.split.split", "row.append", "col.append", "torch.LongTensor", "torch.LongTensor", "line.split.split", "utils.process_category", "utils.process_category", "row.append", "col.append", "phrase_link_tmp_store[].append", "row.append", "col.append"], "function", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.process_category", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.process_category"], ["", "", "def", "get_term_graph_with_query", "(", "core_nodes", ",", "phrase_id", ",", "domain", ",", "max_in_degree", "=", "5", ",", "additional_link", "=", "True", ")", ":", "\n", "    ", "lemmatizer", "=", "NLTKLemmatizer", "(", ")", "\n", "\n", "core_nodes", "=", "set", "(", "core_nodes", ")", "\n", "phrase_link_tmp_store", "=", "{", "}", "\n", "\n", "if", "additional_link", ":", "\n", "        ", "files", "=", "[", "f\"wikipedia/ranking-results/phrase-wiki-search-results-1-{domain}.txt\"", ",", "f\"tmp/phrase-wiki-search-results-1-query.txt\"", "]", "\n", "for", "filename", "in", "files", ":", "\n", "            ", "f", "=", "open", "(", "filename", ")", "\n", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "w1", "=", "line", "[", "0", "]", "\n", "k", "=", "0", "\n", "for", "w2", "in", "line", "[", "1", ":", "]", ":", "\n", "                    ", "if", "k", ">=", "max_in_degree", ":", "\n", "                        ", "break", "\n", "", "w2", "=", "process_category", "(", "w2", ",", "lemmatizer", ")", "\n", "if", "w1", "!=", "w2", "and", "w2", "in", "phrase_id", "and", "phrase_id", "[", "w2", "]", "in", "core_nodes", ":", "\n", "                        ", "if", "w1", "in", "phrase_link_tmp_store", ":", "\n", "                            ", "phrase_link_tmp_store", "[", "w1", "]", ".", "append", "(", "w2", ")", "\n", "", "else", ":", "\n", "                            ", "phrase_link_tmp_store", "[", "w1", "]", "=", "[", "w2", "]", "\n", "", "k", "+=", "1", "\n", "", "", "", "f", ".", "close", "(", ")", "\n", "\n", "", "", "row", "=", "[", "]", "\n", "col", "=", "[", "]", "\n", "files", "=", "[", "f\"wikipedia/ranking-results/phrase-wiki-search-results-0-{domain}.txt\"", ",", "f\"tmp/phrase-wiki-search-results-0-query.txt\"", "]", "\n", "for", "filename", "in", "files", ":", "\n", "        ", "f", "=", "open", "(", "filename", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "w1", "=", "line", "[", "0", "]", "\n", "k", "=", "0", "\n", "\n", "# add self-link", "\n", "row", ".", "append", "(", "phrase_id", "[", "w1", "]", ")", "\n", "col", ".", "append", "(", "phrase_id", "[", "w1", "]", ")", "\n", "\n", "for", "w2", "in", "line", "[", "1", ":", "]", ":", "\n", "                ", "if", "k", ">=", "max_in_degree", ":", "\n", "                    ", "break", "\n", "", "w2", "=", "process_category", "(", "w2", ",", "lemmatizer", ")", "\n", "if", "w1", "!=", "w2", "and", "w2", "in", "phrase_id", "and", "phrase_id", "[", "w2", "]", "in", "core_nodes", ":", "\n", "                    ", "row", ".", "append", "(", "phrase_id", "[", "w2", "]", ")", "\n", "col", ".", "append", "(", "phrase_id", "[", "w1", "]", ")", "\n", "k", "+=", "1", "\n", "", "", "if", "additional_link", "and", "k", "<", "5", ":", "\n", "                ", "if", "w1", "in", "phrase_link_tmp_store", ":", "\n", "                    ", "for", "w2", "in", "phrase_link_tmp_store", "[", "w1", "]", ":", "\n", "                        ", "if", "k", ">=", "max_in_degree", ":", "\n", "                            ", "break", "\n", "", "if", "w2", "not", "in", "line", "[", "1", ":", "]", ":", "\n", "                            ", "row", ".", "append", "(", "phrase_id", "[", "w2", "]", ")", "\n", "col", ".", "append", "(", "phrase_id", "[", "w1", "]", ")", "\n", "k", "+=", "1", "\n", "", "", "", "", "", "f", ".", "close", "(", ")", "\n", "\n", "", "A", "=", "SparseTensor", "(", "row", "=", "torch", ".", "LongTensor", "(", "row", ")", ",", "col", "=", "torch", ".", "LongTensor", "(", "col", ")", ")", "\n", "A", "=", "A", ".", "to_symmetric", "(", ")", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.query.parse_args": [[105, 126], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.run.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Run baselines.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--domain'", ",", "choices", "=", "[", "'cs'", ",", "'phy'", ",", "'math'", "]", ",", "\n", "help", "=", "'The target domain.'", ")", "\n", "parser", ".", "add_argument", "(", "'--narrow'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Training and evaluating on the corresponding subdomains.'", ")", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "choices", "=", "[", "'cfl'", ",", "'hicfl'", "]", ",", "\n", "help", "=", "'The learning method.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pu'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'PU setting.'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'Hyperparameter to balance the global and local information (HiCFL).'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--num_layers'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_channels'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.query.main": [[128, 322], ["print", "print", "torch.device", "lemmatizer.NLTKLemmatizer", "enumerate", "utils.get_phrases", "len", "query.get_wiki_search_result_batch", "query.get_wiki_search_result_batch", "query.main.train_test_split_full"], "function", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_phrases", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.query.get_wiki_search_result_batch", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.query.get_wiki_search_result_batch"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "query_terms", "=", "[", "\n", "\"machine learning\"", ",", "\n", "\"few-shot learning\"", ",", "\n", "\"long-short term memory\"", ",", "\n", "\"social network\"", ",", "\n", "\"frequency assignment problem\"", ",", "\n", "\"data sparseness\"", ",", "\n", "\"large neighborhood search\"", ",", "\n", "\"multi-hop wireless networks\"", ",", "\n", "\"signal prediction\"", ",", "\n", "\"molecule\"", ",", "\n", "\"gravity\"", ",", "\n", "\"animism\"", ",", "\n", "\"backflow\"", ",", "\n", "\"calcite\"", ",", "\n", "\"supply and demand\"", ",", "\n", "\"hellbent on compromise\"", ",", "\n", "\"anatahan\"", "\n", "]", "\n", "\n", "print", "(", "\"Domain:\"", ",", "args", ".", "domain", ")", "\n", "print", "(", "\"Method:\"", ",", "args", ".", "method", ")", "\n", "\n", "device", "=", "f'cuda:{args.device}'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "\n", "domain", "=", "args", ".", "domain", "\n", "\n", "lemmatizer", "=", "NLTKLemmatizer", "(", ")", "\n", "for", "i", ",", "term", "in", "enumerate", "(", "query_terms", ")", ":", "\n", "        ", "query_terms", "[", "i", "]", "=", "process_category", "(", "term", ",", "lemmatizer", ")", "\n", "\n", "# load seed terms", "\n", "", "phrase_id", ",", "phrases", "=", "get_phrases", "(", "f\"term-candidates/arxiv-phrases-filtering-{domain}.txt\"", ")", "\n", "\n", "# include query terms", "\n", "TID", "=", "len", "(", "phrases", ")", "\n", "tid", "=", "TID", "\n", "for", "w", "in", "query_terms", ":", "\n", "        ", "if", "w", "not", "in", "phrase_id", ":", "\n", "            ", "phrase_id", "[", "w", "]", "=", "tid", "\n", "phrases", ".", "append", "(", "w", ")", "\n", "tid", "+=", "1", "\n", "\n", "", "", "get_wiki_search_result_batch", "(", "phrases", "[", "TID", ":", "]", ",", "mode", "=", "0", ")", "\n", "get_wiki_search_result_batch", "(", "phrases", "[", "TID", ":", "]", ",", "mode", "=", "1", ")", "\n", "\n", "# load label information (automatic annotation)", "\n", "cp", "=", "f\"wikipedia/core-categories/phrase-core-categories-{domain}.txt\"", "\n", "cm", "=", "f\"wikipedia/core-categories/phrase-core-categories-media-{domain}.txt\"", "\n", "path_gold_subcategories", "=", "\"wikipedia/gold-subcategories\"", "\n", "if", "domain", "==", "\"cs\"", ":", "\n", "        ", "seed_labels_1", "=", "get_core_phrase_label", "(", "\"computer science\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Subfields_of_computer_science-3.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "seed_labels_2", "=", "get_core_phrase_label", "(", "\"artificial intelligence\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Artificial_intelligence-2.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "seed_labels_3", "=", "get_core_phrase_label", "(", "\"machine learning\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Machine_learning-2.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "", "elif", "domain", "==", "\"phy\"", ":", "\n", "        ", "seed_labels_1", "=", "get_core_phrase_label", "(", "\"physics\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Subfields_of_physics-3.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "seed_labels_2", "=", "get_core_phrase_label", "(", "\"mechanics\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Mechanics-2.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "seed_labels_3", "=", "get_core_phrase_label", "(", "\"quantum mechanics\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Quantum_mechanics-2.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "", "elif", "domain", "==", "\"math\"", ":", "\n", "        ", "seed_labels_1", "=", "get_core_phrase_label", "(", "\"mathematics\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Fields_of_mathematics-3.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "seed_labels_2", "=", "get_core_phrase_label", "(", "\"algebra\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Algebra-2.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "seed_labels_3", "=", "get_core_phrase_label", "(", "\"abstract algebra\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Abstract_algebra-2.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "\n", "", "if", "args", ".", "narrow", ":", "# narrow domains: ml/qm/aa", "\n", "        ", "list_seed_labels", "=", "[", "seed_labels_1", ",", "seed_labels_2", ",", "seed_labels_3", "]", "\n", "seed_labels", "=", "list_seed_labels", "[", "-", "1", "]", "\n", "", "else", ":", "# broad domains: cs/phy/math", "\n", "        ", "list_seed_labels", "=", "[", "seed_labels_1", "]", "\n", "seed_labels", "=", "list_seed_labels", "[", "0", "]", "\n", "\n", "\n", "# split", "\n", "", "def", "train_test_split_full", "(", "seed_labels", ",", "seed", "=", "0", ")", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "split_idx", "=", "{", "}", "\n", "split_y", "=", "{", "}", "\n", "\n", "candicates", "=", "list", "(", "seed_labels", ".", "keys", "(", ")", ")", "\n", "random", ".", "shuffle", "(", "candicates", ")", "\n", "n", "=", "len", "(", "candicates", ")", "\n", "\n", "# use all core terms for training, ugly implementation", "\n", "split_idx", "[", "\"train\"", "]", "=", "candicates", "[", ":", "]", "\n", "split_idx", "[", "\"valid\"", "]", "=", "candicates", "[", ":", "]", "\n", "split_idx", "[", "\"test\"", "]", "=", "candicates", "[", ":", "]", "\n", "\n", "split_y", "[", "\"train\"", "]", "=", "[", "seed_labels", "[", "i", "]", "for", "i", "in", "split_idx", "[", "\"train\"", "]", "]", "\n", "split_y", "[", "\"valid\"", "]", "=", "[", "seed_labels", "[", "i", "]", "for", "i", "in", "split_idx", "[", "\"valid\"", "]", "]", "\n", "split_y", "[", "\"test\"", "]", "=", "[", "seed_labels", "[", "i", "]", "for", "i", "in", "split_idx", "[", "\"test\"", "]", "]", "\n", "\n", "return", "split_idx", ",", "split_y", "\n", "\n", "# load train/valid/test split", "\n", "# split_idx, split_y = load_train_valid_test_split(seed_labels, domain) # normal train/valid/test split", "\n", "", "split_idx", ",", "split_y", "=", "train_test_split_full", "(", "seed_labels", ")", "# use all core terms for training", "\n", "\n", "if", "args", ".", "pu", ":", "# PU setting", "\n", "        ", "assert", "len", "(", "list_seed_labels", ")", ">=", "2", "\n", "pu_positives", "=", "[", "]", "\n", "with", "open", "(", "f\"train-valid-test/{domain}/pu_positives.txt\"", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "pu_positives", ".", "append", "(", "int", "(", "line", ")", ")", "\n", "", "", "pu_idx", ",", "pu_y", "=", "train_test_split_for_pu", "(", "split_idx", "[", "\"train\"", "]", ",", "split_y", "[", "\"train\"", "]", ",", "list_seed_labels", "[", "-", "2", "]", ",", "pu_positives", ")", "\n", "split_idx_pu", ",", "split_y_pu", "=", "split_idx", ".", "copy", "(", ")", ",", "split_y", ".", "copy", "(", ")", "\n", "split_idx_pu", "[", "\"train\"", "]", ",", "split_y_pu", "[", "\"train\"", "]", "=", "pu_idx", ",", "pu_y", "\n", "\n", "", "for", "key", ",", "value", "in", "split_y", ".", "items", "(", ")", ":", "\n", "        ", "split_y", "[", "key", "]", "=", "torch", ".", "LongTensor", "(", "value", ")", ".", "to", "(", "device", ")", "\n", "", "if", "args", ".", "pu", ":", "\n", "        ", "for", "key", ",", "value", "in", "split_y_pu", ".", "items", "(", ")", ":", "\n", "            ", "split_y_pu", "[", "key", "]", "=", "torch", ".", "LongTensor", "(", "value", ")", ".", "to", "(", "device", ")", "\n", "\n", "# process train/valid/test split for HiCFL", "\n", "", "", "if", "args", ".", "method", "==", "\"hicfl\"", ":", "\n", "        ", "list_split_y", "=", "[", "]", "\n", "num_hierarchy", "=", "len", "(", "list_seed_labels", ")", "\n", "\n", "for", "d", "in", "list_seed_labels", ":", "\n", "# idx_, y_ = load_train_valid_test_split(d, domain)", "\n", "            ", "idx_", ",", "y_", "=", "train_test_split_full", "(", "seed_labels", ")", "# use all core terms for training", "\n", "for", "key", ",", "value", "in", "y_", ".", "items", "(", ")", ":", "\n", "                ", "y_", "[", "key", "]", "=", "torch", ".", "LongTensor", "(", "value", ")", ".", "to", "(", "device", ")", "\n", "", "list_split_y", ".", "append", "(", "y_", ")", "\n", "\n", "", "if", "args", ".", "pu", ":", "\n", "            ", "list_split_y", "[", "-", "1", "]", "=", "split_y_pu", "\n", "\n", "# load compositional GloVe embeddings", "\n", "", "", "X", "=", "load_embeddings_glove", "(", "'features/glove.6B.100d.txt'", ",", "phrases", ")", "# C", "\n", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "num_features", "=", "X", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "# build core-anchored semantic graph for CFL/HiCFL", "\n", "# A = get_term_graph_with_query(split_idx[\"train\"], phrase_id, domain)", "\n", "A", "=", "get_term_graph_with_query", "(", "seed_labels", ".", "keys", "(", ")", ",", "phrase_id", ",", "domain", ")", "\n", "A", "=", "A", ".", "to", "(", "device", ")", "\n", "\n", "dirs", "=", "\"model\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirs", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirs", ")", "\n", "\n", "", "if", "args", ".", "method", "==", "\"cfl\"", ":", "\n", "        ", "model", "=", "CFL", "(", "num_features", ",", "args", ".", "hidden_channels", ",", "args", ".", "num_classes", ",", "args", ".", "num_layers", ",", "args", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "f'model/cfl-{domain}-c.pt'", ")", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f'model/cfl-{domain}-c.pt'", ")", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "reset_parameters", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "1", ",", "1", "+", "args", ".", "epochs", ")", ")", ":", "\n", "                ", "if", "args", ".", "pu", ":", "\n", "                    ", "loss", "=", "train_cfl", "(", "model", ",", "X", ",", "A", ",", "split_idx_pu", ",", "split_y_pu", ",", "optimizer", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "train_cfl", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "split_y", ",", "optimizer", ")", "\n", "", "aucs", ",", "aps", "=", "test_cfl", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "split_y", ")", "\n", "train_auc", ",", "valid_auc", ",", "test_auc", "=", "aucs", "\n", "train_ap", ",", "valid_ap", ",", "test_ap", "=", "aps", "\n", "\n", "print", "(", "f\"Epoch: {epoch}, AUC-ROC: {aucs}, AUC-PR: {aps}\"", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "f\"model/cfl-{domain}-c.pt\"", ")", "\n", "\n", "y_scores", "=", "predict_cfl", "(", "model", ",", "X", ",", "A", ")", "\n", "y_scores", "=", "y_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "elif", "args", ".", "method", "==", "\"hicfl\"", ":", "\n", "        ", "model", "=", "HiCFL", "(", "num_features", ",", "args", ".", "hidden_channels", ",", "args", ".", "num_classes", ",", "args", ".", "num_layers", ",", "num_hierarchy", ",", "args", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "f'model/hicfl-{domain}-c.pt'", ")", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "f\"model/hicfl-{domain}-c.pt\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "reset_parameters", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "1", ",", "1", "+", "args", ".", "epochs", ")", ")", ":", "\n", "                ", "if", "args", ".", "pu", ":", "\n", "                    ", "loss", "=", "train_hicfl_pu", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "split_idx_pu", ",", "list_split_y", ",", "optimizer", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "train_hicfl", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "list_split_y", ",", "optimizer", ")", "\n", "", "aucs", ",", "aps", "=", "test_hicfl", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "split_y", ",", "args", ".", "alpha", ")", "\n", "train_auc", ",", "valid_auc", ",", "test_auc", "=", "aucs", "\n", "train_ap", ",", "valid_ap", ",", "test_ap", "=", "aps", "\n", "\n", "print", "(", "f\"Epoch: {epoch}, AUC-ROC: {aucs}, AUC-PR: {aps}\"", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "f\"model/hicfl-{domain}-c.pt\"", ")", "\n", "\n", "y_scores", "=", "predict_hicfl", "(", "model", ",", "X", ",", "A", ",", "args", ".", "alpha", ")", "\n", "y_scores", "=", "y_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "print_results", "(", "query_terms", ",", "y_scores", ",", "phrase_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.CFL.__init__": [[10, 24], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "model.CFL.convs.append", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "model.CFL.bns.append", "range", "model.CFL.convs.append", "torch_geometric.nn.GCNConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "model.CFL.convs.append", "model.CFL.bns.append", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.lemmatizer.NLTKLemmatizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "out_channels", ",", "num_layers", ",", "\n", "dropout", ")", ":", "\n", "        ", "super", "(", "CFL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convs", ".", "append", "(", "GCNConv", "(", "in_channels", ",", "hidden_channels", ",", "cached", "=", "True", ")", ")", "\n", "self", ".", "bns", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bns", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ")", ")", "\n", "for", "_", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "\n", "GCNConv", "(", "hidden_channels", ",", "hidden_channels", ",", "cached", "=", "True", ")", ")", "\n", "self", ".", "bns", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ")", ")", "\n", "", "self", ".", "convs", ".", "append", "(", "GCNConv", "(", "hidden_channels", ",", "out_channels", ",", "cached", "=", "True", ")", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.CFL.reset_parameters": [[25, 30], ["conv.reset_parameters", "bn.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "conv", ".", "reset_parameters", "(", ")", "\n", "", "for", "bn", "in", "self", ".", "bns", ":", "\n", "            ", "bn", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.CFL.forward": [[31, 39], ["enumerate", "torch.dropout.log_softmax", "conv", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "adj_t", ")", ":", "\n", "        ", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs", "[", ":", "-", "1", "]", ")", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "adj_t", ")", "\n", "x", "=", "self", ".", "bns", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "self", ".", "convs", "[", "-", "1", "]", "(", "x", ",", "adj_t", ")", "\n", "return", "x", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.HiCFL.__init__": [[85, 118], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "model.HiCFL.convs.append", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "model.HiCFL.bns.append", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "model.HiCFL.fcs_g.append", "model.HiCFL.bns_g.append", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch_geometric.nn.GCNConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "model.HiCFL.convs.append", "model.HiCFL.bns.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "model.HiCFL.fcs_g.append", "model.HiCFL.bns_g.append", "model.HiCFL.fcs_l.append", "model.HiCFL.bns_l.append", "model.HiCFL.out_l.append", "torch_geometric.nn.GCNConv", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.lemmatizer.NLTKLemmatizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "out_channels", ",", "num_layers", ",", "num_hierarchy", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "HiCFL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convs", ".", "append", "(", "GCNConv", "(", "in_channels", ",", "hidden_channels", ",", "cached", "=", "True", ")", ")", "\n", "self", ".", "bns", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bns", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ")", ")", "\n", "for", "_", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "\n", "GCNConv", "(", "hidden_channels", ",", "hidden_channels", ",", "cached", "=", "True", ")", ")", "\n", "self", ".", "bns", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ")", ")", "\n", "\n", "", "self", ".", "fcs_g", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bns_g", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "fcs_g", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "bns_g", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ")", ")", "\n", "for", "_", "in", "range", "(", "num_hierarchy", "-", "1", ")", ":", "\n", "            ", "self", ".", "fcs_g", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", "*", "2", ",", "hidden_channels", ")", ")", "\n", "self", ".", "bns_g", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ")", ")", "\n", "\n", "", "self", ".", "fcs_l", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bns_l", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "num_hierarchy", ")", ":", "\n", "            ", "self", ".", "fcs_l", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "bns_l", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ")", ")", "\n", "\n", "", "self", ".", "out_g", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "out_channels", ")", "\n", "\n", "self", ".", "out_l", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "num_hierarchy", ")", ":", "\n", "            ", "self", ".", "out_l", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "out_channels", ")", ")", "\n", "\n", "", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.HiCFL.reset_parameters": [[119, 135], ["model.HiCFL.out_g.reset_parameters", "conv.reset_parameters", "bn.reset_parameters", "fc.reset_parameters", "fc.reset_parameters", "fc.reset_parameters", "bn.reset_parameters", "bn.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "conv", ".", "reset_parameters", "(", ")", "\n", "", "for", "bn", "in", "self", ".", "bns", ":", "\n", "            ", "bn", ".", "reset_parameters", "(", ")", "\n", "", "for", "fc", "in", "self", ".", "fcs_l", ":", "\n", "            ", "fc", ".", "reset_parameters", "(", ")", "\n", "", "for", "fc", "in", "self", ".", "fcs_g", ":", "\n", "            ", "fc", ".", "reset_parameters", "(", ")", "\n", "", "self", ".", "out_g", ".", "reset_parameters", "(", ")", "\n", "for", "fc", "in", "self", ".", "out_l", ":", "\n", "            ", "fc", ".", "reset_parameters", "(", ")", "\n", "", "for", "bn", "in", "self", ".", "bns_g", ":", "\n", "            ", "bn", ".", "reset_parameters", "(", ")", "\n", "", "for", "bn", "in", "self", ".", "bns_l", ":", "\n", "            ", "bn", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.HiCFL.forward": [[136, 168], ["enumerate", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "hg.append", "enumerate", "model.HiCFL.out_g", "range", "conv", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fc", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "hg.append", "len", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "ol.append", "model.HiCFL.log_softmax", "o.log_softmax"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "adj_t", ")", ":", "\n", "        ", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs", ")", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "adj_t", ")", "\n", "x", "=", "self", ".", "bns", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "hg", "=", "[", "]", "\n", "xg", "=", "self", ".", "fcs_g", "[", "0", "]", "(", "x", ")", "\n", "xg", "=", "self", ".", "bns_g", "[", "0", "]", "(", "xg", ")", "\n", "xg", "=", "F", ".", "relu", "(", "xg", ")", "\n", "xg", "=", "F", ".", "dropout", "(", "xg", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "hg", ".", "append", "(", "xg", ")", "\n", "for", "i", ",", "fc", "in", "enumerate", "(", "self", ".", "fcs_g", "[", "1", ":", "]", ")", ":", "\n", "            ", "xg", "=", "torch", ".", "cat", "(", "[", "hg", "[", "i", "]", ",", "x", "]", ",", "-", "1", ")", "\n", "xg", "=", "fc", "(", "xg", ")", "\n", "xg", "=", "self", ".", "bns_g", "[", "i", "+", "1", "]", "(", "xg", ")", "\n", "xg", "=", "F", ".", "relu", "(", "xg", ")", "\n", "xg", "=", "F", ".", "dropout", "(", "xg", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "hg", ".", "append", "(", "xg", ")", "\n", "\n", "", "og", "=", "self", ".", "out_g", "(", "hg", "[", "-", "1", "]", ")", "\n", "\n", "ol", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fcs_l", ")", ")", ":", "\n", "            ", "hl", "=", "self", ".", "fcs_l", "[", "i", "]", "(", "hg", "[", "i", "]", ")", "\n", "hl", "=", "self", ".", "bns_l", "[", "i", "]", "(", "hl", ")", "\n", "hl", "=", "F", ".", "relu", "(", "hl", ")", "\n", "hl", "=", "F", ".", "dropout", "(", "hl", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "ol", ".", "append", "(", "self", ".", "out_l", "[", "i", "]", "(", "hl", ")", ")", "\n", "\n", "", "return", "og", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", ",", "[", "o", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", "for", "o", "in", "ol", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MLP.__init__": [[250, 266], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "model.MLP.fcs.append", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "model.MLP.bns.append", "range", "model.MLP.fcs.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "model.MLP.fcs.append", "model.MLP.bns.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.lemmatizer.NLTKLemmatizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "out_channels", ",", "num_layers", ",", "\n", "dropout", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fcs", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "fcs", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "hidden_channels", ")", ")", "\n", "\n", "self", ".", "bns", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bns", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "            ", "self", ".", "fcs", ".", "append", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "hidden_channels", ")", ")", "\n", "self", ".", "bns", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ")", ")", "\n", "", "self", ".", "fcs", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", ",", "out_channels", ")", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MLP.reset_parameters": [[267, 272], ["fc.reset_parameters", "bn.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "fc", "in", "self", ".", "fcs", ":", "\n", "            ", "fc", ".", "reset_parameters", "(", ")", "\n", "", "for", "bn", "in", "self", ".", "bns", ":", "\n", "            ", "bn", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MLP.forward": [[273, 281], ["enumerate", "torch.dropout.log_softmax", "fc", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "fc", "in", "enumerate", "(", "self", ".", "fcs", "[", ":", "-", "1", "]", ")", ":", "\n", "            ", "x", "=", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "bns", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "self", ".", "fcs", "[", "-", "1", "]", "(", "x", ")", "\n", "return", "x", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.__init__": [[341, 355], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.lemmatizer.NLTKLemmatizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "hidden_channels", ",", "out_channels", ",", "num_layers", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "MC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "hidden_channels", ")", "\n", "self", ".", "fc2", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "hidden_channels", ")", "\n", "self", ".", "fc3", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "hidden_channels", ")", "\n", "self", ".", "fc_o", "=", "torch", ".", "nn", ".", "Linear", "(", "hidden_channels", "*", "3", ",", "out_channels", ")", "\n", "\n", "self", ".", "bns1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ")", "\n", "self", ".", "bns2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ")", "\n", "self", ".", "bns3", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ")", "\n", "self", ".", "bns4", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_channels", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters": [[356, 366], ["model.MC.fc1.reset_parameters", "model.MC.fc2.reset_parameters", "model.MC.fc3.reset_parameters", "model.MC.fc_o.reset_parameters", "model.MC.bns1.reset_parameters", "model.MC.bns2.reset_parameters", "model.MC.bns3.reset_parameters", "model.MC.bns4.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "fc1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "fc2", ".", "reset_parameters", "(", ")", "\n", "self", ".", "fc3", ".", "reset_parameters", "(", ")", "\n", "self", ".", "fc_o", ".", "reset_parameters", "(", ")", "\n", "\n", "self", ".", "bns1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "bns2", ".", "reset_parameters", "(", ")", "\n", "self", ".", "bns3", ".", "reset_parameters", "(", ")", "\n", "self", ".", "bns4", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.forward": [[367, 392], ["model.MC.fc1", "model.MC.bns1", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "model.MC.fc2", "model.MC.bns2", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "model.MC.fc3", "model.MC.bns3", "torch.relu", "torch.relu", "model.MC.fc3", "model.MC.bns4", "torch.relu", "torch.relu", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.dropout", "torch.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.MC.fc_o", "model.MC.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_general", ")", ":", "\n", "        ", "h1", "=", "self", ".", "fc1", "(", "x", ")", "\n", "h1", "=", "self", ".", "bns1", "(", "h1", ")", "\n", "h1", "=", "F", ".", "relu", "(", "h1", ")", "\n", "h1", "=", "F", ".", "dropout", "(", "h1", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "h2", "=", "self", ".", "fc2", "(", "x_general", ")", "\n", "h2", "=", "self", ".", "bns2", "(", "h2", ")", "\n", "h2", "=", "F", ".", "relu", "(", "h2", ")", "\n", "h2", "=", "F", ".", "dropout", "(", "h2", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "h3a", "=", "self", ".", "fc3", "(", "x", ")", "\n", "h3a", "=", "self", ".", "bns3", "(", "h3a", ")", "\n", "h3a", "=", "F", ".", "relu", "(", "h3a", ")", "\n", "h3b", "=", "self", ".", "fc3", "(", "x_general", ")", "\n", "# h3b = self.bns3(h3b)", "\n", "h3b", "=", "self", ".", "bns4", "(", "h3b", ")", "\n", "h3b", "=", "F", ".", "relu", "(", "h3b", ")", "\n", "d", "=", "torch", ".", "abs", "(", "h3a", "-", "h3b", ")", "\n", "d", "=", "F", ".", "dropout", "(", "d", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "h_c", "=", "torch", ".", "cat", "(", "[", "h1", ",", "h2", ",", "d", "]", ",", "-", "1", ")", "\n", "h_o", "=", "self", ".", "fc_o", "(", "h_c", ")", "\n", "\n", "return", "h_o", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_cfl": [[40, 50], ["model.train", "optimizer.zero_grad", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "F.nll_loss.item", "model"], "function", ["None"], ["", "", "def", "train_cfl", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "split_y", ",", "optimizer", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "model", "(", "X", ",", "A", ")", "[", "split_idx", "[", "\"train\"", "]", "]", "\n", "loss", "=", "F", ".", "nll_loss", "(", "out", ",", "split_y", "[", "\"train\"", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.test_cfl": [[51, 73], ["torch.no_grad", "torch.no_grad", "model.eval", "model", "torch.softmax", "split_y[].cpu", "y_scores[].cpu", "sklearn.metrics.roc_auc_score", "aucs.append", "split_y[].cpu", "y_scores[].cpu", "sklearn.metrics.average_precision_score", "aps.append"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_cfl", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "split_y", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "out", "=", "model", "(", "X", ",", "A", ")", "\n", "y_scores", "=", "F", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "\n", "aucs", "=", "[", "]", "\n", "for", "key", "in", "split_idx", ":", "\n", "        ", "y_true_", "=", "split_y", "[", "key", "]", ".", "cpu", "(", ")", "\n", "y_scores_", "=", "y_scores", "[", "split_idx", "[", "key", "]", "]", ".", "cpu", "(", ")", "\n", "auc", "=", "roc_auc_score", "(", "y_true_", ",", "y_scores_", ")", "\n", "aucs", ".", "append", "(", "auc", ")", "\n", "\n", "", "aps", "=", "[", "]", "\n", "for", "key", "in", "split_idx", ":", "\n", "        ", "y_true_", "=", "split_y", "[", "key", "]", ".", "cpu", "(", ")", "\n", "y_scores_", "=", "y_scores", "[", "split_idx", "[", "key", "]", "]", ".", "cpu", "(", ")", "\n", "ap", "=", "average_precision_score", "(", "y_true_", ",", "y_scores_", ")", "\n", "aps", ".", "append", "(", "ap", ")", "\n", "\n", "", "return", "aucs", ",", "aps", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.predict_cfl": [[74, 82], ["torch.no_grad", "torch.no_grad", "model.eval", "model", "torch.softmax"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "predict_cfl", "(", "model", ",", "X", ",", "A", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "out", "=", "model", "(", "X", ",", "A", ")", "\n", "y_scores", "=", "F", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "\n", "return", "y_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_hicfl": [[169, 183], ["model.train", "optimizer.zero_grad", "model", "torch.nll_loss", "enumerate", "F.nll_loss.backward", "optimizer.step", "F.nll_loss.item", "torch.nll_loss"], "function", ["None"], ["", "", "def", "train_hicfl", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "list_split_y", ",", "optimizer", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "og", ",", "ol", "=", "model", "(", "X", ",", "A", ")", "\n", "\n", "loss", "=", "F", ".", "nll_loss", "(", "og", "[", "split_idx", "[", "\"train\"", "]", "]", ",", "list_split_y", "[", "-", "1", "]", "[", "\"train\"", "]", ")", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "ol", ")", ":", "\n", "        ", "loss", "+=", "F", ".", "nll_loss", "(", "o", "[", "split_idx", "[", "\"train\"", "]", "]", ",", "list_split_y", "[", "i", "]", "[", "\"train\"", "]", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_hicfl_pu": [[184, 200], ["model.train", "optimizer.zero_grad", "model", "torch.nll_loss", "enumerate", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "F.nll_loss.item", "torch.nll_loss"], "function", ["None"], ["", "def", "train_hicfl_pu", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "split_idx_pu", ",", "list_split_y", ",", "optimizer", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "og", ",", "ol", "=", "model", "(", "X", ",", "A", ")", "\n", "\n", "loss", "=", "F", ".", "nll_loss", "(", "og", "[", "split_idx_pu", "[", "\"train\"", "]", "]", ",", "list_split_y", "[", "-", "1", "]", "[", "\"train\"", "]", ")", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "ol", "[", ":", "-", "1", "]", ")", ":", "\n", "        ", "loss", "+=", "F", ".", "nll_loss", "(", "o", "[", "split_idx", "[", "\"train\"", "]", "]", ",", "list_split_y", "[", "i", "]", "[", "\"train\"", "]", ")", "\n", "\n", "", "loss", "+=", "F", ".", "nll_loss", "(", "ol", "[", "-", "1", "]", "[", "split_idx_pu", "[", "\"train\"", "]", "]", ",", "list_split_y", "[", "-", "1", "]", "[", "\"train\"", "]", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.test_hicfl": [[201, 231], ["torch.no_grad", "torch.no_grad", "model.eval", "model", "torch.softmax", "split_y[].cpu", "y_scores[].cpu", "sklearn.metrics.roc_auc_score", "aucs.append", "split_y[].cpu", "y_scores[].cpu", "sklearn.metrics.average_precision_score", "aps.append", "torch.softmax"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_hicfl", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "split_y", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "og", ",", "ol", "=", "model", "(", "X", ",", "A", ")", "\n", "\n", "y_ols", "=", "[", "F", ".", "softmax", "(", "o", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "for", "o", "in", "ol", "]", "\n", "y_ol", "=", "y_ols", "[", "0", "]", "\n", "for", "y_", "in", "y_ols", "[", "1", ":", "]", ":", "\n", "        ", "y_ol", "*=", "y_", "\n", "\n", "", "y_og", "=", "F", ".", "softmax", "(", "og", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "\n", "y_scores", "=", "alpha", "*", "y_og", "+", "(", "1", "-", "alpha", ")", "*", "y_ol", "\n", "\n", "aucs", "=", "[", "]", "\n", "for", "key", "in", "split_idx", ":", "\n", "        ", "y_true_", "=", "split_y", "[", "key", "]", ".", "cpu", "(", ")", "\n", "y_scores_", "=", "y_scores", "[", "split_idx", "[", "key", "]", "]", ".", "cpu", "(", ")", "\n", "auc", "=", "roc_auc_score", "(", "y_true_", ",", "y_scores_", ")", "\n", "aucs", ".", "append", "(", "auc", ")", "\n", "\n", "", "aps", "=", "[", "]", "\n", "for", "key", "in", "split_idx", ":", "\n", "        ", "y_true_", "=", "split_y", "[", "key", "]", ".", "cpu", "(", ")", "\n", "y_scores_", "=", "y_scores", "[", "split_idx", "[", "key", "]", "]", ".", "cpu", "(", ")", "\n", "ap", "=", "average_precision_score", "(", "y_true_", ",", "y_scores_", ")", "\n", "aps", ".", "append", "(", "ap", ")", "\n", "\n", "", "return", "aucs", ",", "aps", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.predict_hicfl": [[232, 247], ["torch.no_grad", "torch.no_grad", "model.eval", "model", "torch.softmax", "torch.softmax"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "predict_hicfl", "(", "model", ",", "X", ",", "A", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "og", ",", "ol", "=", "model", "(", "X", ",", "A", ")", "\n", "\n", "y_ols", "=", "[", "F", ".", "softmax", "(", "o", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "for", "o", "in", "ol", "]", "\n", "y_ol", "=", "y_ols", "[", "0", "]", "\n", "for", "y_", "in", "y_ols", "[", "1", ":", "]", ":", "\n", "        ", "y_ol", "*=", "y_", "\n", "\n", "", "y_og", "=", "F", ".", "softmax", "(", "og", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "y_scores", "=", "alpha", "*", "y_og", "+", "(", "1", "-", "alpha", ")", "*", "y_ol", "\n", "\n", "return", "y_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_mlp": [[282, 292], ["model.train", "optimizer.zero_grad", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "F.nll_loss.item", "model"], "function", ["None"], ["", "", "def", "train_mlp", "(", "model", ",", "X", ",", "split_idx", ",", "split_y", ",", "optimizer", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "model", "(", "X", ")", "[", "split_idx", "[", "\"train\"", "]", "]", "\n", "loss", "=", "F", ".", "nll_loss", "(", "out", ",", "split_y", "[", "\"train\"", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_mlp_minibatch": [[293, 306], ["model.train", "optimizer.zero_grad", "model", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "len", "F.nll_loss.item", "x.size"], "function", ["None"], ["", "def", "train_mlp_minibatch", "(", "model", ",", "train_loader", ",", "optimizer", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "total_loss", "=", "0", "\n", "for", "x", ",", "y", "in", "train_loader", ":", "\n", "# x, y = x.to(device), y.to(device)", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "out", "=", "model", "(", "x", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "out", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "x", ".", "size", "(", "0", ")", "\n", "", "return", "total_loss", "/", "len", "(", "train_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.test_mlp": [[307, 329], ["torch.no_grad", "torch.no_grad", "model.eval", "model", "torch.softmax", "split_y[].cpu", "y_scores[].cpu", "sklearn.metrics.roc_auc_score", "aucs.append", "split_y[].cpu", "y_scores[].cpu", "sklearn.metrics.average_precision_score", "aps.append"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_mlp", "(", "model", ",", "X", ",", "split_idx", ",", "split_y", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "out", "=", "model", "(", "X", ")", "\n", "y_scores", "=", "F", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "\n", "aucs", "=", "[", "]", "\n", "for", "key", "in", "split_idx", ":", "\n", "        ", "y_true_", "=", "split_y", "[", "key", "]", ".", "cpu", "(", ")", "\n", "y_scores_", "=", "y_scores", "[", "split_idx", "[", "key", "]", "]", ".", "cpu", "(", ")", "\n", "auc", "=", "roc_auc_score", "(", "y_true_", ",", "y_scores_", ")", "\n", "aucs", ".", "append", "(", "auc", ")", "\n", "\n", "", "aps", "=", "[", "]", "\n", "for", "key", "in", "split_idx", ":", "\n", "        ", "y_true_", "=", "split_y", "[", "key", "]", ".", "cpu", "(", ")", "\n", "y_scores_", "=", "y_scores", "[", "split_idx", "[", "key", "]", "]", ".", "cpu", "(", ")", "\n", "ap", "=", "average_precision_score", "(", "y_true_", ",", "y_scores_", ")", "\n", "aps", ".", "append", "(", "ap", ")", "\n", "\n", "", "return", "aucs", ",", "aps", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.predict_mlp": [[330, 338], ["torch.no_grad", "torch.no_grad", "model.eval", "model", "torch.softmax"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "predict_mlp", "(", "model", ",", "X", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "out", "=", "model", "(", "X", ")", "\n", "y_scores", "=", "F", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "\n", "return", "y_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_mc": [[393, 403], ["model.train", "optimizer.zero_grad", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "F.nll_loss.item", "model"], "function", ["None"], ["", "", "def", "train_mc", "(", "model", ",", "X", ",", "X_general", ",", "split_idx", ",", "split_y", ",", "optimizer", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "model", "(", "X", ",", "X_general", ")", "[", "split_idx", "[", "\"train\"", "]", "]", "\n", "loss", "=", "F", ".", "nll_loss", "(", "out", ",", "split_y", "[", "\"train\"", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_mc_minibatch": [[404, 417], ["model.train", "optimizer.zero_grad", "model", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "len", "F.nll_loss.item", "xl.size"], "function", ["None"], ["", "def", "train_mc_minibatch", "(", "model", ",", "train_loader", ",", "optimizer", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "total_loss", "=", "0", "\n", "for", "xl", ",", "xg", ",", "y", "in", "train_loader", ":", "\n", "# x, y = x.to(device), y.to(device)", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "out", "=", "model", "(", "xl", ",", "xg", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "out", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "xl", ".", "size", "(", "0", ")", "\n", "", "return", "total_loss", "/", "len", "(", "train_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.test_mc": [[418, 440], ["torch.no_grad", "torch.no_grad", "model.eval", "model", "torch.softmax", "split_y[].cpu", "y_scores[].cpu", "sklearn.metrics.roc_auc_score", "aucs.append", "split_y[].cpu", "y_scores[].cpu", "sklearn.metrics.average_precision_score", "aps.append"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_mc", "(", "model", ",", "X", ",", "X_general", ",", "split_idx", ",", "split_y", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "out", "=", "model", "(", "X", ",", "X_general", ")", "\n", "y_scores", "=", "F", ".", "softmax", "(", "out", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "\n", "aucs", "=", "[", "]", "\n", "for", "key", "in", "split_idx", ":", "\n", "        ", "y_true_", "=", "split_y", "[", "key", "]", ".", "cpu", "(", ")", "\n", "y_scores_", "=", "y_scores", "[", "split_idx", "[", "key", "]", "]", ".", "cpu", "(", ")", "\n", "auc", "=", "roc_auc_score", "(", "y_true_", ",", "y_scores_", ")", "\n", "aucs", ".", "append", "(", "auc", ")", "\n", "\n", "", "aps", "=", "[", "]", "\n", "for", "key", "in", "split_idx", ":", "\n", "        ", "y_true_", "=", "split_y", "[", "key", "]", ".", "cpu", "(", ")", "\n", "y_scores_", "=", "y_scores", "[", "split_idx", "[", "key", "]", "]", ".", "cpu", "(", ")", "\n", "ap", "=", "average_precision_score", "(", "y_true_", ",", "y_scores_", ")", "\n", "aps", ".", "append", "(", "ap", ")", "\n", "\n", "", "return", "aucs", ",", "aps", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_test_lr": [[442, 461], ["sklearn.linear_model.LogisticRegression().fit", "X[].cpu", "split_y[].cpu", "LogisticRegression().fit.predict_proba", "split_y[].cpu", "sklearn.metrics.roc_auc_score", "aucs.append", "split_y[].cpu", "sklearn.metrics.average_precision_score", "aps.append", "sklearn.linear_model.LogisticRegression", "X.cpu"], "function", ["None"], ["", "def", "train_test_lr", "(", "X", ",", "split_idx", ",", "split_y", ")", ":", "\n", "    ", "clf", "=", "LogisticRegression", "(", "solver", "=", "'lbfgs'", ")", ".", "fit", "(", "X", "[", "split_idx", "[", "'train'", "]", "]", ".", "cpu", "(", ")", ",", "split_y", "[", "'train'", "]", ".", "cpu", "(", ")", ")", "\n", "y_proba", "=", "clf", ".", "predict_proba", "(", "X", ".", "cpu", "(", ")", ")", "[", ":", ",", "1", "]", "\n", "\n", "aucs", "=", "[", "]", "\n", "for", "key", "in", "split_idx", ":", "\n", "        ", "y_true_", "=", "split_y", "[", "key", "]", ".", "cpu", "(", ")", "\n", "y_proba_", "=", "y_proba", "[", "split_idx", "[", "key", "]", "]", "\n", "auc", "=", "roc_auc_score", "(", "y_true_", ",", "y_proba_", ")", "\n", "aucs", ".", "append", "(", "auc", ")", "\n", "\n", "", "aps", "=", "[", "]", "\n", "for", "key", "in", "split_idx", ":", "\n", "        ", "y_true_", "=", "split_y", "[", "key", "]", ".", "cpu", "(", ")", "\n", "y_proba_", "=", "y_proba", "[", "split_idx", "[", "key", "]", "]", "\n", "ap", "=", "average_precision_score", "(", "y_true_", ",", "y_proba_", ")", "\n", "aps", ".", "append", "(", "ap", ")", "\n", "\n", "", "return", "aucs", "[", "-", "1", "]", ",", "aps", "[", "-", "1", "]", "", "", ""]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.run.parse_args": [[11, 33], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.run.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Run baselines.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--domain'", ",", "choices", "=", "[", "'cs'", ",", "'phy'", ",", "'math'", "]", ",", "\n", "help", "=", "'The target domain.'", ")", "\n", "parser", ".", "add_argument", "(", "'--narrow'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Training and evaluating on the corresponding subdomains.'", ")", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "choices", "=", "[", "'lr'", ",", "'mlp'", ",", "'mc'", ",", "'cfl'", ",", "'hicfl'", "]", ",", "\n", "help", "=", "'The learning method.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pu'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'PU setting.'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'Hyperparameter to balance the global and local information (HiCFL).'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--num_layers'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_channels'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "500", ")", "\n", "parser", ".", "add_argument", "(", "'--runs'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.run.main": [[35, 242], ["print", "print", "torch.device", "utils.get_phrases", "utils.load_train_valid_test_split", "split_y.items", "utils.load_embeddings.to", "range", "print", "print", "torch.cuda.is_available", "utils.get_core_phrase_label", "utils.get_core_phrase_label", "utils.get_core_phrase_label", "utils.train_test_split_for_pu", "torch.LongTensor().to", "split_y_pu.items", "len", "utils.load_embeddings", "utils.load_embeddings", "utils.load_embeddings.size", "utils.load_embeddings", "X_general.to.to", "utils.get_term_graph", "A.to.to", "print", "print", "print", "print", "test_aucs.append", "test_aps.append", "utils.get_core_phrase_label", "utils.get_core_phrase_label", "utils.get_core_phrase_label", "len", "open", "split_idx.copy", "split_y.copy", "torch.LongTensor().to", "utils.load_train_valid_test_split", "y_.items", "list_split_y.append", "utils.get_core_phrase_label", "utils.get_core_phrase_label", "utils.get_core_phrase_label", "pu_positives.append", "torch.LongTensor", "torch.LongTensor().to", "model.train_test_lr", "model.train_test_lr", "model.MLP().to", "HiCFL().to.reset_parameters", "torch.optim.Adam", "tqdm.tqdm", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "int", "torch.LongTensor", "HiCFL().to.parameters", "range", "model.test_mlp", "model.MC().to", "HiCFL().to.reset_parameters", "torch.optim.Adam", "tqdm.tqdm", "torch.LongTensor", "model.MLP", "model.train_mlp", "model.train_mlp", "HiCFL().to.parameters", "range", "model.test_mc", "model.CFL().to", "HiCFL().to.reset_parameters", "torch.optim.Adam", "tqdm.tqdm", "model.predict_cfl", "y_scores.cpu().numpy.cpu().numpy", "model.MC", "model.train_mc", "model.train_mc", "HiCFL().to.parameters", "range", "model.test_cfl", "model.HiCFL().to", "HiCFL().to.reset_parameters", "torch.optim.Adam", "tqdm.tqdm", "model.predict_hicfl", "y_scores.cpu().numpy.cpu().numpy", "model.CFL", "model.train_cfl", "model.train_cfl", "y_scores.cpu().numpy.cpu", "HiCFL().to.parameters", "range", "model.test_hicfl", "model.HiCFL", "model.train_hicfl_pu", "model.train_hicfl", "y_scores.cpu().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_phrases", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.load_train_valid_test_split", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_core_phrase_label", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_core_phrase_label", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_core_phrase_label", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.train_test_split_for_pu", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.load_embeddings", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.load_embeddings", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.load_embeddings", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_term_graph", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_core_phrase_label", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_core_phrase_label", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_core_phrase_label", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.load_train_valid_test_split", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_core_phrase_label", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_core_phrase_label", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_core_phrase_label", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_test_lr", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_test_lr", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.test_mlp", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_mlp", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_mlp", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.test_mc", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.predict_cfl", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_mc", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_mc", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.test_cfl", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.MC.reset_parameters", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.predict_hicfl", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_cfl", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_cfl", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.test_hicfl", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_hicfl_pu", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.model.train_hicfl"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "\"Domain:\"", ",", "args", ".", "domain", ")", "\n", "print", "(", "\"Method:\"", ",", "args", ".", "method", ")", "\n", "\n", "device", "=", "f'cuda:{args.device}'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "\n", "domain", "=", "args", ".", "domain", "\n", "\n", "# load seed terms", "\n", "phrase_id", ",", "phrases", "=", "get_phrases", "(", "f\"term-candidates/arxiv-phrases-filtering-{domain}.txt\"", ")", "\n", "\n", "# load label information (automatic annotation)", "\n", "cp", "=", "f\"wikipedia/core-categories/phrase-core-categories-{domain}.txt\"", "\n", "cm", "=", "f\"wikipedia/core-categories/phrase-core-categories-media-{domain}.txt\"", "\n", "path_gold_subcategories", "=", "\"wikipedia/gold-subcategories\"", "\n", "if", "domain", "==", "\"cs\"", ":", "\n", "        ", "seed_labels_1", "=", "get_core_phrase_label", "(", "\"computer science\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Subfields_of_computer_science-3.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "seed_labels_2", "=", "get_core_phrase_label", "(", "\"artificial intelligence\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Artificial_intelligence-2.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "seed_labels_3", "=", "get_core_phrase_label", "(", "\"machine learning\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Machine_learning-2.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "", "elif", "domain", "==", "\"phy\"", ":", "\n", "        ", "seed_labels_1", "=", "get_core_phrase_label", "(", "\"physics\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Subfields_of_physics-3.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "seed_labels_2", "=", "get_core_phrase_label", "(", "\"mechanics\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Mechanics-2.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "seed_labels_3", "=", "get_core_phrase_label", "(", "\"quantum mechanics\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Quantum_mechanics-2.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "", "elif", "domain", "==", "\"math\"", ":", "\n", "        ", "seed_labels_1", "=", "get_core_phrase_label", "(", "\"mathematics\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Fields_of_mathematics-3.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "seed_labels_2", "=", "get_core_phrase_label", "(", "\"algebra\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Algebra-2.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "seed_labels_3", "=", "get_core_phrase_label", "(", "\"abstract algebra\"", ",", "f\"{path_gold_subcategories}/wikipedia-category-Abstract_algebra-2.txt\"", ",", "phrase_id", ",", "cp", ",", "cm", ")", "\n", "\n", "", "if", "args", ".", "narrow", ":", "# narrow domains: ml/qm/aa", "\n", "        ", "list_seed_labels", "=", "[", "seed_labels_1", ",", "seed_labels_2", ",", "seed_labels_3", "]", "\n", "seed_labels", "=", "list_seed_labels", "[", "-", "1", "]", "\n", "", "else", ":", "# broad domains: cs/phy/math", "\n", "        ", "list_seed_labels", "=", "[", "seed_labels_1", "]", "\n", "seed_labels", "=", "list_seed_labels", "[", "0", "]", "\n", "\n", "# load train/valid/test split", "\n", "", "split_idx", ",", "split_y", "=", "load_train_valid_test_split", "(", "seed_labels", ",", "domain", ")", "\n", "\n", "if", "args", ".", "pu", ":", "# PU setting", "\n", "        ", "assert", "len", "(", "list_seed_labels", ")", ">=", "2", "\n", "pu_positives", "=", "[", "]", "\n", "with", "open", "(", "f\"train-valid-test/{domain}/pu_positives.txt\"", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "pu_positives", ".", "append", "(", "int", "(", "line", ")", ")", "\n", "", "", "pu_idx", ",", "pu_y", "=", "train_test_split_for_pu", "(", "split_idx", "[", "\"train\"", "]", ",", "split_y", "[", "\"train\"", "]", ",", "list_seed_labels", "[", "-", "2", "]", ",", "pu_positives", ")", "\n", "split_idx_pu", ",", "split_y_pu", "=", "split_idx", ".", "copy", "(", ")", ",", "split_y", ".", "copy", "(", ")", "\n", "split_idx_pu", "[", "\"train\"", "]", ",", "split_y_pu", "[", "\"train\"", "]", "=", "pu_idx", ",", "pu_y", "\n", "\n", "", "for", "key", ",", "value", "in", "split_y", ".", "items", "(", ")", ":", "\n", "        ", "split_y", "[", "key", "]", "=", "torch", ".", "LongTensor", "(", "value", ")", ".", "to", "(", "device", ")", "\n", "", "if", "args", ".", "pu", ":", "\n", "        ", "for", "key", ",", "value", "in", "split_y_pu", ".", "items", "(", ")", ":", "\n", "            ", "split_y_pu", "[", "key", "]", "=", "torch", ".", "LongTensor", "(", "value", ")", ".", "to", "(", "device", ")", "\n", "\n", "# process train/valid/test split for HiCFL", "\n", "", "", "if", "args", ".", "method", "==", "\"hicfl\"", ":", "\n", "        ", "list_split_y", "=", "[", "]", "\n", "num_hierarchy", "=", "len", "(", "list_seed_labels", ")", "\n", "\n", "for", "d", "in", "list_seed_labels", ":", "\n", "            ", "idx_", ",", "y_", "=", "load_train_valid_test_split", "(", "d", ",", "domain", ")", "\n", "for", "key", ",", "value", "in", "y_", ".", "items", "(", ")", ":", "\n", "                ", "y_", "[", "key", "]", "=", "torch", ".", "LongTensor", "(", "value", ")", ".", "to", "(", "device", ")", "\n", "", "list_split_y", ".", "append", "(", "y_", ")", "\n", "\n", "", "if", "args", ".", "pu", ":", "\n", "            ", "list_split_y", "[", "-", "1", "]", "=", "split_y_pu", "\n", "\n", "", "", "if", "args", ".", "method", "==", "\"mc\"", ":", "\n", "        ", "X", "=", "load_embeddings", "(", "f'features/{domain}.wordvectors'", ",", "phrases", ")", "\n", "", "else", ":", "\n", "        ", "X", "=", "load_embeddings", "(", "'features/general.wordvectors'", ",", "phrases", ")", "# G", "\n", "# X = load_embeddings(f'features/{domain}.wordvectors', phrases)  # S", "\n", "# X = torch.cat([load_embeddings(f'features/{domain}.wordvectors', phrases),\\", "\n", "# load_embeddings('features/general.wordvectors', phrases)],dim=-1)  # SG", "\n", "\n", "", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "num_features", "=", "X", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "if", "args", ".", "method", "==", "\"mc\"", ":", "\n", "        ", "X_general", "=", "load_embeddings", "(", "'features/general.wordvectors'", ",", "phrases", ")", "\n", "X_general", "=", "X_general", ".", "to", "(", "device", ")", "\n", "\n", "# build core-anchored semantic graph for CFL/HiCFL", "\n", "", "if", "args", ".", "method", "in", "[", "\"cfl\"", ",", "\"hicfl\"", "]", ":", "\n", "        ", "A", "=", "get_term_graph", "(", "split_idx", "[", "\"train\"", "]", ",", "phrase_id", ",", "domain", ")", "\n", "A", "=", "A", ".", "to", "(", "device", ")", "\n", "\n", "\n", "", "test_aucs", "=", "[", "]", "\n", "test_aps", "=", "[", "]", "\n", "best_auc_epochs", "=", "[", "]", "\n", "best_ap_epochs", "=", "[", "]", "\n", "\n", "for", "run", "in", "range", "(", "1", ",", "args", ".", "runs", "+", "1", ")", ":", "\n", "        ", "print", "(", "\"Run:\"", ",", "run", ")", "\n", "\n", "best_valid_auc", "=", "0", "\n", "best_valid_ap", "=", "0", "\n", "best_test_auc", "=", "0", "\n", "best_test_ap", "=", "0", "\n", "\n", "best_auc_epoch", "=", "0", "\n", "best_ap_epoch", "=", "0", "\n", "\n", "if", "args", ".", "method", "==", "\"lr\"", ":", "\n", "            ", "if", "args", ".", "pu", ":", "\n", "                ", "rets", "=", "train_test_lr", "(", "X", ",", "split_idx_pu", ",", "split_y_pu", ")", "\n", "", "else", ":", "\n", "                ", "rets", "=", "train_test_lr", "(", "X", ",", "split_idx", ",", "split_y", ")", "\n", "", "best_test_auc", ",", "best_test_ap", "=", "rets", "\n", "\n", "", "elif", "args", ".", "method", "==", "\"mlp\"", ":", "\n", "            ", "model", "=", "MLP", "(", "num_features", ",", "args", ".", "hidden_channels", ",", "args", ".", "num_classes", ",", "args", ".", "num_layers", ",", "args", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "reset_parameters", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "1", ",", "1", "+", "args", ".", "epochs", ")", ")", ":", "\n", "                ", "if", "args", ".", "pu", ":", "\n", "                    ", "loss", "=", "train_mlp", "(", "model", ",", "X", ",", "split_idx_pu", ",", "split_y_pu", ",", "optimizer", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "train_mlp", "(", "model", ",", "X", ",", "split_idx", ",", "split_y", ",", "optimizer", ")", "\n", "", "aucs", ",", "aps", "=", "test_mlp", "(", "model", ",", "X", ",", "split_idx", ",", "split_y", ")", "\n", "train_auc", ",", "valid_auc", ",", "test_auc", "=", "aucs", "\n", "train_ap", ",", "valid_ap", ",", "test_ap", "=", "aps", "\n", "\n", "if", "valid_auc", ">", "best_valid_auc", ":", "\n", "                    ", "best_valid_auc", ",", "best_test_auc", "=", "valid_auc", ",", "test_auc", "\n", "best_auc_epoch", "=", "epoch", "\n", "", "if", "valid_ap", ">", "best_valid_ap", ":", "\n", "                    ", "best_valid_ap", ",", "best_test_ap", "=", "valid_ap", ",", "test_ap", "\n", "best_ap_epoch", "=", "epoch", "\n", "\n", "", "", "", "elif", "args", ".", "method", "==", "\"mc\"", ":", "\n", "            ", "model", "=", "MC", "(", "num_features", ",", "args", ".", "hidden_channels", ",", "args", ".", "num_classes", ",", "args", ".", "num_layers", ",", "args", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "reset_parameters", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "1", ",", "1", "+", "args", ".", "epochs", ")", ")", ":", "\n", "                ", "if", "args", ".", "pu", ":", "\n", "                    ", "loss", "=", "train_mc", "(", "model", ",", "X", ",", "X_general", ",", "split_idx_pu", ",", "split_y_pu", ",", "optimizer", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "train_mc", "(", "model", ",", "X", ",", "X_general", ",", "split_idx", ",", "split_y", ",", "optimizer", ")", "\n", "", "aucs", ",", "aps", "=", "test_mc", "(", "model", ",", "X", ",", "X_general", ",", "split_idx", ",", "split_y", ")", "\n", "train_auc", ",", "valid_auc", ",", "test_auc", "=", "aucs", "\n", "train_ap", ",", "valid_ap", ",", "test_ap", "=", "aps", "\n", "\n", "if", "valid_auc", ">", "best_valid_auc", ":", "\n", "                    ", "best_valid_auc", ",", "best_test_auc", "=", "valid_auc", ",", "test_auc", "\n", "best_auc_epoch", "=", "epoch", "\n", "", "if", "valid_ap", ">", "best_valid_ap", ":", "\n", "                    ", "best_valid_ap", ",", "best_test_ap", "=", "valid_ap", ",", "test_ap", "\n", "best_ap_epoch", "=", "epoch", "\n", "\n", "", "", "", "elif", "args", ".", "method", "==", "\"cfl\"", ":", "\n", "            ", "model", "=", "CFL", "(", "num_features", ",", "args", ".", "hidden_channels", ",", "args", ".", "num_classes", ",", "args", ".", "num_layers", ",", "args", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "reset_parameters", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "1", ",", "1", "+", "args", ".", "epochs", ")", ")", ":", "\n", "                ", "if", "args", ".", "pu", ":", "\n", "                    ", "loss", "=", "train_cfl", "(", "model", ",", "X", ",", "A", ",", "split_idx_pu", ",", "split_y_pu", ",", "optimizer", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "train_cfl", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "split_y", ",", "optimizer", ")", "\n", "", "aucs", ",", "aps", "=", "test_cfl", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "split_y", ")", "\n", "train_auc", ",", "valid_auc", ",", "test_auc", "=", "aucs", "\n", "train_ap", ",", "valid_ap", ",", "test_ap", "=", "aps", "\n", "\n", "if", "valid_auc", ">", "best_valid_auc", ":", "\n", "                    ", "best_valid_auc", ",", "best_test_auc", "=", "valid_auc", ",", "test_auc", "\n", "best_auc_epoch", "=", "epoch", "\n", "", "if", "valid_ap", ">", "best_valid_ap", ":", "\n", "                    ", "best_valid_ap", ",", "best_test_ap", "=", "valid_ap", ",", "test_ap", "\n", "best_ap_epoch", "=", "epoch", "\n", "\n", "", "", "y_scores", "=", "predict_cfl", "(", "model", ",", "X", ",", "A", ")", "\n", "y_scores", "=", "y_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "elif", "args", ".", "method", "==", "\"hicfl\"", ":", "\n", "            ", "model", "=", "HiCFL", "(", "num_features", ",", "args", ".", "hidden_channels", ",", "args", ".", "num_classes", ",", "args", ".", "num_layers", ",", "num_hierarchy", ",", "args", ".", "dropout", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "reset_parameters", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "1", ",", "1", "+", "args", ".", "epochs", ")", ")", ":", "\n", "                ", "if", "args", ".", "pu", ":", "\n", "                    ", "loss", "=", "train_hicfl_pu", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "split_idx_pu", ",", "list_split_y", ",", "optimizer", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "train_hicfl", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "list_split_y", ",", "optimizer", ")", "\n", "", "aucs", ",", "aps", "=", "test_hicfl", "(", "model", ",", "X", ",", "A", ",", "split_idx", ",", "split_y", ",", "args", ".", "alpha", ")", "\n", "train_auc", ",", "valid_auc", ",", "test_auc", "=", "aucs", "\n", "train_ap", ",", "valid_ap", ",", "test_ap", "=", "aps", "\n", "\n", "if", "valid_auc", ">", "best_valid_auc", ":", "\n", "                    ", "best_valid_auc", ",", "best_test_auc", "=", "valid_auc", ",", "test_auc", "\n", "best_auc_epoch", "=", "epoch", "\n", "", "if", "valid_ap", ">", "best_valid_ap", ":", "\n", "                    ", "best_valid_ap", ",", "best_test_ap", "=", "valid_ap", ",", "test_ap", "\n", "best_ap_epoch", "=", "epoch", "\n", "\n", "", "", "y_scores", "=", "predict_hicfl", "(", "model", ",", "X", ",", "A", ",", "args", ".", "alpha", ")", "\n", "y_scores", "=", "y_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "\"ROC-AUC:\"", ",", "\"%.3f\"", "%", "np", ".", "mean", "(", "best_test_auc", ")", ",", "end", "=", "\"; \"", ")", "\n", "print", "(", "\"PR-AUC:\"", ",", "\"%.3f\"", "%", "np", ".", "mean", "(", "best_test_ap", ")", ")", "\n", "print", "(", "\"Epoch:\"", ",", "best_auc_epoch", ",", "best_ap_epoch", ")", "\n", "test_aucs", ".", "append", "(", "best_test_auc", ")", "\n", "test_aps", ".", "append", "(", "best_test_ap", ")", "\n", "\n", "", "print", "(", "\"ROC-AUC:\"", ",", "\"%.3f (%.3f)\"", "%", "(", "np", ".", "mean", "(", "test_aucs", ")", ",", "np", ".", "std", "(", "test_aucs", ")", ")", ")", "\n", "print", "(", "\"PR-AUC: \"", ",", "\"%.3f (%.3f)\"", "%", "(", "np", ".", "mean", "(", "test_aps", ")", ",", "np", ".", "std", "(", "test_aps", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_phrases": [[10, 21], ["open", "fr.readlines", "line.split", "phrases.append"], "function", ["None"], ["def", "get_phrases", "(", "path", ")", ":", "\n", "    ", "phrase_id", "=", "{", "}", "\n", "phrases", "=", "[", "]", "\n", "with", "open", "(", "path", ")", "as", "fr", ":", "\n", "        ", "tid", "=", "0", "\n", "for", "line", "in", "fr", ".", "readlines", "(", ")", ":", "\n", "            ", "w", ",", "v", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "phrase_id", "[", "w", "]", "=", "tid", "\n", "phrases", ".", "append", "(", "w", ")", "\n", "tid", "+=", "1", "\n", "", "", "return", "phrase_id", ",", "phrases", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.load_embeddings": [[23, 37], ["gensim.models.KeyedVectors.load", "len", "torch.FloatTensor", "phrase.replace.replace", "torch.FloatTensor.append", "torch.FloatTensor.append", "phrases[].replace", "numpy.random.rand"], "function", ["None"], ["", "def", "load_embeddings", "(", "path", ",", "phrases", ")", ":", "\n", "    ", "wv", "=", "KeyedVectors", ".", "load", "(", "path", ")", "\n", "X", "=", "[", "]", "\n", "dim", "=", "len", "(", "wv", "[", "phrases", "[", "0", "]", ".", "replace", "(", "' '", ",", "'_'", ")", "]", ")", "\n", "\n", "for", "phrase", "in", "phrases", ":", "\n", "        ", "phrase", "=", "phrase", ".", "replace", "(", "' '", ",", "'_'", ")", "\n", "if", "phrase", "in", "wv", ":", "\n", "            ", "X", ".", "append", "(", "wv", "[", "phrase", "]", ")", "\n", "", "else", ":", "\n", "            ", "X", ".", "append", "(", "np", ".", "random", ".", "rand", "(", "dim", ")", ")", "\n", "\n", "", "", "X", "=", "torch", ".", "FloatTensor", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.load_embeddings_glove": [[39, 60], ["len", "torch.FloatTensor", "open", "phrase.split", "numpy.zeros", "torch.FloatTensor.append", "line.split.split", "numpy.array", "float"], "function", ["None"], ["", "def", "load_embeddings_glove", "(", "path", ",", "phrases", ")", ":", "\n", "    ", "gloveModel", "=", "{", "}", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", ")", "\n", "word", "=", "line", "[", "0", "]", "\n", "emb", "=", "np", ".", "array", "(", "[", "float", "(", "v", ")", "for", "v", "in", "line", "[", "1", ":", "]", "]", ")", "\n", "gloveModel", "[", "word", "]", "=", "emb", "\n", "\n", "", "", "dim", "=", "len", "(", "emb", ")", "\n", "X", "=", "[", "]", "\n", "for", "phrase", "in", "phrases", ":", "\n", "        ", "ws", "=", "phrase", ".", "split", "(", "' '", ")", "\n", "emb", "=", "np", ".", "zeros", "(", "dim", ")", "\n", "\n", "for", "w", "in", "ws", ":", "\n", "            ", "if", "w", "in", "gloveModel", ":", "\n", "                ", "emb", "+=", "gloveModel", "[", "w", "]", "\n", "", "", "X", ".", "append", "(", "emb", ")", "\n", "", "X", "=", "torch", ".", "FloatTensor", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.load_train_valid_test_split": [[62, 82], ["utils.load_train_valid_test_split.load_ids"], "function", ["None"], ["", "def", "load_train_valid_test_split", "(", "seed_labels", ",", "domain", ")", ":", "\n", "    ", "def", "load_ids", "(", "path", ")", ":", "\n", "        ", "ids", "=", "[", "]", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "ids", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "", "return", "ids", "\n", "\n", "", "split_idx", "=", "{", "}", "\n", "split_y", "=", "{", "}", "\n", "\n", "split_idx", "[", "\"train\"", "]", "=", "load_ids", "(", "f'train-valid-test/{domain}/train.txt'", ")", "\n", "split_idx", "[", "\"valid\"", "]", "=", "load_ids", "(", "f'train-valid-test/{domain}/valid.txt'", ")", "\n", "split_idx", "[", "\"test\"", "]", "=", "load_ids", "(", "f'train-valid-test/{domain}/test.txt'", ")", "\n", "\n", "split_y", "[", "\"train\"", "]", "=", "[", "seed_labels", "[", "i", "]", "for", "i", "in", "split_idx", "[", "\"train\"", "]", "]", "\n", "split_y", "[", "\"valid\"", "]", "=", "[", "seed_labels", "[", "i", "]", "for", "i", "in", "split_idx", "[", "\"valid\"", "]", "]", "\n", "split_y", "[", "\"test\"", "]", "=", "[", "seed_labels", "[", "i", "]", "for", "i", "in", "split_idx", "[", "\"test\"", "]", "]", "\n", "\n", "return", "split_idx", ",", "split_y", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.train_test_split_for_pu": [[84, 107], ["random.seed", "enumerate", "set", "set", "random.sample", "ret_idx.append", "ret_y.append", "idx_pos.append", "ret_idx.append", "ret_y.append"], "function", ["None"], ["", "def", "train_test_split_for_pu", "(", "idx", ",", "y", ",", "core_labels_p", ",", "positives", "=", "None", ",", "k", "=", "20", ",", "seed", "=", "10", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "if", "positives", "==", "None", ":", "\n", "        ", "idx_pos", "=", "[", "]", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "y", ")", ":", "\n", "            ", "if", "c", ":", "\n", "                ", "idx_pos", ".", "append", "(", "idx", "[", "i", "]", ")", "\n", "", "", "idxs_pos_sample", "=", "set", "(", "random", ".", "sample", "(", "idx_pos", ",", "k", ")", ")", "\n", "", "else", ":", "\n", "        ", "idxs_pos_sample", "=", "set", "(", "positives", ")", "\n", "\n", "", "ret_idx", "=", "[", "]", "\n", "ret_y", "=", "[", "]", "\n", "for", "wid", "in", "idx", ":", "\n", "        ", "if", "wid", "in", "idxs_pos_sample", ":", "\n", "            ", "ret_idx", ".", "append", "(", "wid", ")", "\n", "ret_y", ".", "append", "(", "1", ")", "\n", "", "elif", "not", "core_labels_p", "[", "wid", "]", ":", "\n", "            ", "ret_idx", ".", "append", "(", "wid", ")", "\n", "ret_y", ".", "append", "(", "0", ")", "\n", "\n", "", "", "return", "ret_idx", ",", "ret_y", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.process_category": [[109, 114], ["lemmatizer.lemmatize_phrase", "lemmatizer.lemmatize_phrase.lower", "lemmatizer.lemmatize_phrase.find"], "function", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.lemmatizer.NLTKLemmatizer.lemmatize_phrase"], ["", "def", "process_category", "(", "c", ",", "lemmatizer", ")", ":", "\n", "    ", "if", "'('", "in", "c", ":", "\n", "        ", "c", "=", "c", "[", ":", "c", ".", "find", "(", "'('", ")", "-", "1", "]", "\n", "", "c", "=", "lemmatizer", ".", "lemmatize_phrase", "(", "c", ".", "lower", "(", ")", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_core_phrase_label": [[116, 185], ["lemmatizer.NLTKLemmatizer", "set", "utils.process_category", "set.add", "open", "open", "open", "line.split.split", "utils.process_category", "set.add", "line.split.split", "line.split.split", "pedia_label.items", "utils.process_category", "utils.process_category", "true_category_count.get"], "function", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.process_category", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.process_category", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.process_category", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.process_category"], ["", "def", "get_core_phrase_label", "(", "root", ",", "wc_path", ",", "phrase_id", ",", "category_pedia", ",", "category_media", ",", "seed_option", "=", "\"combine\"", ")", ":", "\n", "# root = \"computer science\"", "\n", "# wc_path = \"wikipedia-category-Subfields_of_computer_science-3.txt\"", "\n", "    ", "assert", "seed_option", "in", "[", "\"media\"", ",", "\"category\"", ",", "\"combine\"", "]", "\n", "\n", "lemmatizer", "=", "NLTKLemmatizer", "(", ")", "\n", "true_category_count", "=", "{", "}", "\n", "\n", "gold_terms", "=", "set", "(", ")", "\n", "root", "=", "process_category", "(", "root", ",", "lemmatizer", ")", "\n", "gold_terms", ".", "add", "(", "root", ")", "\n", "with", "open", "(", "wc_path", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "level", ",", "w", "=", "line", ".", "split", "(", "'#'", ")", "\n", "w", "=", "process_category", "(", "w", ",", "lemmatizer", ")", "\n", "gold_terms", ".", "add", "(", "w", ")", "\n", "\n", "", "", "pedia_label", "=", "{", "}", "\n", "pedia_label", "[", "phrase_id", "[", "root", "]", "]", "=", "1", "\n", "with", "open", "(", "category_pedia", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "w", "=", "line", "[", "0", "]", "\n", "categories", "=", "line", "[", "1", ":", "]", "\n", "\n", "label", "=", "0", "\n", "if", "w", "in", "gold_terms", ":", "\n", "                ", "label", "=", "1", "\n", "", "else", ":", "\n", "                ", "for", "c", "in", "categories", ":", "\n", "                    ", "c", "=", "process_category", "(", "c", ",", "lemmatizer", ")", "\n", "if", "c", "in", "gold_terms", ":", "\n", "                        ", "true_category_count", "[", "c", "]", "=", "true_category_count", ".", "get", "(", "c", ",", "0", ")", "+", "1", "\n", "label", "=", "1", "\n", "break", "\n", "", "", "", "pedia_label", "[", "phrase_id", "[", "w", "]", "]", "=", "label", "\n", "\n", "", "", "media_label", "=", "{", "}", "\n", "media_label", "[", "phrase_id", "[", "root", "]", "]", "=", "1", "\n", "with", "open", "(", "category_media", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "w", "=", "line", "[", "0", "]", "\n", "categories", "=", "line", "[", "1", ":", "]", "\n", "\n", "label", "=", "0", "\n", "if", "w", "in", "gold_terms", ":", "\n", "                ", "label", "=", "1", "\n", "", "else", ":", "\n", "                ", "for", "c", "in", "categories", ":", "\n", "                    ", "c", "=", "process_category", "(", "c", ",", "lemmatizer", ")", "\n", "if", "c", "in", "gold_terms", ":", "\n", "                        ", "label", "=", "1", "\n", "break", "\n", "", "", "", "media_label", "[", "phrase_id", "[", "w", "]", "]", "=", "label", "\n", "\n", "", "", "seed_labels", "=", "{", "}", "\n", "if", "seed_option", "==", "\"media\"", ":", "\n", "        ", "seed_labels", "=", "media_label", "\n", "", "elif", "seed_option", "==", "\"category\"", ":", "\n", "        ", "seed_labels", "=", "pedia_label", "\n", "", "elif", "seed_option", "==", "\"combine\"", ":", "\n", "        ", "for", "w", ",", "c1", "in", "pedia_label", ".", "items", "(", ")", ":", "\n", "            ", "if", "w", "in", "media_label", ":", "\n", "                ", "seed_labels", "[", "w", "]", "=", "c1", "or", "media_label", "[", "w", "]", "\n", "", "else", ":", "\n", "                ", "seed_labels", "[", "w", "]", "=", "c1", "\n", "\n", "", "", "", "return", "seed_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.get_term_graph": [[187, 243], ["lemmatizer.NLTKLemmatizer", "set", "torch_sparse.tensor.SparseTensor", "A.to_symmetric.to_symmetric", "open", "f.readlines", "open", "line.split.split", "row.append", "col.append", "torch.LongTensor", "torch.LongTensor", "line.split.split", "utils.process_category", "utils.process_category", "row.append", "col.append", "phrase_link_tmp_store[].append", "row.append", "col.append"], "function", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.process_category", "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.utils.process_category"], ["", "def", "get_term_graph", "(", "core_nodes", ",", "phrase_id", ",", "domain", ",", "max_in_degree", "=", "5", ",", "additional_link", "=", "True", ")", ":", "\n", "    ", "lemmatizer", "=", "NLTKLemmatizer", "(", ")", "\n", "\n", "core_nodes", "=", "set", "(", "core_nodes", ")", "\n", "phrase_link_tmp_store", "=", "{", "}", "\n", "\n", "if", "additional_link", ":", "\n", "        ", "with", "open", "(", "f\"wikipedia/ranking-results/phrase-wiki-search-results-1-{domain}.txt\"", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "w1", "=", "line", "[", "0", "]", "\n", "k", "=", "0", "\n", "for", "w2", "in", "line", "[", "1", ":", "]", ":", "\n", "                    ", "if", "k", ">=", "max_in_degree", ":", "\n", "                        ", "break", "\n", "", "w2", "=", "process_category", "(", "w2", ",", "lemmatizer", ")", "\n", "if", "w1", "!=", "w2", "and", "w2", "in", "phrase_id", "and", "phrase_id", "[", "w2", "]", "in", "core_nodes", ":", "\n", "                        ", "if", "w1", "in", "phrase_link_tmp_store", ":", "\n", "                            ", "phrase_link_tmp_store", "[", "w1", "]", ".", "append", "(", "w2", ")", "\n", "", "else", ":", "\n", "                            ", "phrase_link_tmp_store", "[", "w1", "]", "=", "[", "w2", "]", "\n", "", "k", "+=", "1", "\n", "\n", "", "", "", "", "", "row", "=", "[", "]", "\n", "col", "=", "[", "]", "\n", "with", "open", "(", "f\"wikipedia/ranking-results/phrase-wiki-search-results-0-{domain}.txt\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "w1", "=", "line", "[", "0", "]", "\n", "k", "=", "0", "\n", "\n", "# add self-link", "\n", "row", ".", "append", "(", "phrase_id", "[", "w1", "]", ")", "\n", "col", ".", "append", "(", "phrase_id", "[", "w1", "]", ")", "\n", "\n", "for", "w2", "in", "line", "[", "1", ":", "]", ":", "\n", "                ", "if", "k", ">=", "max_in_degree", ":", "\n", "                    ", "break", "\n", "", "w2", "=", "process_category", "(", "w2", ",", "lemmatizer", ")", "\n", "if", "w1", "!=", "w2", "and", "w2", "in", "phrase_id", "and", "phrase_id", "[", "w2", "]", "in", "core_nodes", ":", "\n", "                    ", "row", ".", "append", "(", "phrase_id", "[", "w2", "]", ")", "\n", "col", ".", "append", "(", "phrase_id", "[", "w1", "]", ")", "\n", "k", "+=", "1", "\n", "", "", "if", "additional_link", "and", "k", "<", "5", ":", "\n", "                ", "if", "w1", "in", "phrase_link_tmp_store", ":", "\n", "                    ", "for", "w2", "in", "phrase_link_tmp_store", "[", "w1", "]", ":", "\n", "                        ", "if", "k", ">=", "max_in_degree", ":", "\n", "                            ", "break", "\n", "", "if", "w2", "not", "in", "line", "[", "1", ":", "]", ":", "\n", "                            ", "row", ".", "append", "(", "phrase_id", "[", "w2", "]", ")", "\n", "col", ".", "append", "(", "phrase_id", "[", "w1", "]", ")", "\n", "k", "+=", "1", "\n", "\n", "", "", "", "", "", "", "A", "=", "SparseTensor", "(", "row", "=", "torch", ".", "LongTensor", "(", "row", ")", ",", "col", "=", "torch", ".", "LongTensor", "(", "col", ")", ")", "\n", "A", "=", "A", ".", "to_symmetric", "(", ")", "\n", "return", "A", "\n", "", ""]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.lemmatizer.NLTKLemmatizer.__init__": [[4, 8], ["nltk.WordNetLemmatizer", "nltk.data.load", "set", "nltk.corpus.stopwords.words"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "lemmatizer", "=", "nltk", ".", "WordNetLemmatizer", "(", ")", "\n", "self", ".", "tokenizer", "=", "nltk", ".", "data", ".", "load", "(", "'tokenizers/punkt/english.pickle'", ")", "\n", "self", ".", "stopwords", "=", "set", "(", "nltk", ".", "corpus", ".", "stopwords", ".", "words", "(", "'english'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.lemmatizer.NLTKLemmatizer.get_wordnet_pos": [[9, 17], ["pos[].upper", "tag_dict.get"], "methods", ["None"], ["", "def", "get_wordnet_pos", "(", "self", ",", "pos", ")", ":", "\n", "        ", "\"\"\"Map POS tag to first character lemmatize() accepts\"\"\"", "\n", "tag", "=", "pos", "[", "0", "]", ".", "upper", "(", ")", "\n", "tag_dict", "=", "{", "\"J\"", ":", "\"a\"", ",", "\n", "\"N\"", ":", "\"n\"", ",", "\n", "\"V\"", ":", "\"v\"", ",", "\n", "\"R\"", ":", "\"r\"", "}", "\n", "return", "tag_dict", ".", "get", "(", "tag", ",", "nltk", ".", "wordnet", ".", "NOUN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.lemmatizer.NLTKLemmatizer.lemmatize_sentence": [[18, 21], ["nltk.word_tokenize", "lemmatizer.NLTKLemmatizer.lemmatizer.lemmatize"], "methods", ["None"], ["", "def", "lemmatize_sentence", "(", "self", ",", "sent", ")", ":", "\n", "        ", "words", "=", "nltk", ".", "word_tokenize", "(", "sent", ")", "\n", "return", "[", "self", ".", "lemmatizer", ".", "lemmatize", "(", "w", ")", "for", "w", "in", "words", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.lemmatizer.NLTKLemmatizer.lemmatize_paragraph": [[22, 30], ["lemmatizer.NLTKLemmatizer.tokenizer.tokenize", "lemmatizer.NLTKLemmatizer.lemmatize_sentence", "res_filtered.append"], "methods", ["home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.lemmatizer.NLTKLemmatizer.lemmatize_sentence"], ["", "def", "lemmatize_paragraph", "(", "self", ",", "para", ")", ":", "\n", "        ", "sentences", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "para", ")", "\n", "for", "sent", "in", "sentences", ":", "\n", "            ", "res", "=", "self", ".", "lemmatize_sentence", "(", "sent", ")", "\n", "res_filtered", "=", "[", "]", "\n", "for", "w", "in", "res", ":", "\n", "                ", "res_filtered", ".", "append", "(", "w", ")", "\n", "", "yield", "res_filtered", "\n", "\n"]], "home.repos.pwc.inspect_result.jeffhj_domain-relevance.None.lemmatizer.NLTKLemmatizer.lemmatize_phrase": [[31, 34], ["lemmatizer.NLTKLemmatizer.lemmatizer.lemmatize", "phrase.split"], "methods", ["None"], ["", "", "def", "lemmatize_phrase", "(", "self", ",", "phrase", ")", ":", "\n", "        ", "lemma", "=", "\" \"", ".", "join", "(", "[", "self", ".", "lemmatizer", ".", "lemmatize", "(", "w", ")", "for", "w", "in", "phrase", ".", "split", "(", ")", "]", ")", "\n", "return", "lemma", "\n", "", "", ""]]}