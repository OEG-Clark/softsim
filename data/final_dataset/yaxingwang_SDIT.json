{"home.repos.pwc.inspect_result.yaxingwang_SDIT.None.main.str2bool": [[8, 10], ["v.lower"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "return", "v", ".", "lower", "(", ")", "in", "(", "'true'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.main.main": [[11, 70], ["solver.Solver", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "data_loader.get_loader", "data_loader.get_loader", "solver.Solver.train", "solver.Solver.train_multi", "solver.Solver.test", "solver.Solver.test_multi", "solver.Solver.test_attention", "solver.Solver.test_attention_multi", "solver.Solver.test_save_test_image", "solver.Solver.test_save_test_image", "solver.Solver.test_inter", "solver.Solver.test_inter"], "function", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.data_loader.get_loader", "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.data_loader.get_loader"], ["", "def", "main", "(", "config", ")", ":", "\n", "# For fast training.", "\n", "    ", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Create directories if not exist.", "\n", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "config", ".", "log_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "model_save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "config", ".", "model_save_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "sample_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "config", ".", "sample_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "result_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "config", ".", "result_dir", ")", "\n", "\n", "\n", "# Data loader.", "\n", "", "celeba_loader", "=", "None", "\n", "rafd_loader", "=", "None", "\n", "\n", "if", "config", ".", "dataset", "in", "[", "'CelebA'", ",", "'Both'", "]", ":", "\n", "        ", "celeba_loader", "=", "get_loader", "(", "config", ".", "celeba_image_dir", ",", "config", ".", "attr_path", ",", "config", ".", "selected_attrs", ",", "\n", "config", ".", "celeba_crop_size", ",", "config", ".", "image_size", ",", "config", ".", "batch_size", ",", "\n", "'CelebA'", ",", "config", ".", "mode", ",", "config", ".", "num_workers", ")", "\n", "", "if", "config", ".", "dataset", "in", "[", "'RaFD'", ",", "'Both'", "]", ":", "\n", "        ", "rafd_loader", "=", "get_loader", "(", "config", ".", "rafd_image_dir", ",", "None", ",", "None", ",", "\n", "config", ".", "rafd_crop_size", ",", "config", ".", "image_size", ",", "config", ".", "batch_size", ",", "\n", "'RaFD'", ",", "config", ".", "mode", ",", "config", ".", "num_workers", ")", "\n", "\n", "\n", "# Solver for training and testing StarGAN.", "\n", "", "solver", "=", "Solver", "(", "celeba_loader", ",", "rafd_loader", ",", "config", ")", "\n", "\n", "if", "config", ".", "mode", "==", "'train'", ":", "\n", "        ", "if", "config", ".", "dataset", "in", "[", "'CelebA'", ",", "'RaFD'", "]", ":", "\n", "            ", "solver", ".", "train", "(", ")", "\n", "", "elif", "config", ".", "dataset", "in", "[", "'Both'", "]", ":", "\n", "            ", "solver", ".", "train_multi", "(", ")", "\n", "", "", "elif", "config", ".", "mode", "==", "'test'", ":", "\n", "        ", "if", "config", ".", "dataset", "in", "[", "'CelebA'", ",", "'RaFD'", "]", ":", "\n", "            ", "solver", ".", "test", "(", ")", "\n", "", "elif", "config", ".", "dataset", "in", "[", "'Both'", "]", ":", "\n", "            ", "solver", ".", "test_multi", "(", ")", "\n", "", "", "elif", "config", ".", "mode", "==", "'test_attention'", ":", "\n", "        ", "if", "config", ".", "dataset", "in", "[", "'CelebA'", ",", "'RaFD'", "]", ":", "\n", "            ", "solver", ".", "test_attention", "(", ")", "\n", "", "elif", "config", ".", "dataset", "in", "[", "'Both'", "]", ":", "\n", "            ", "solver", ".", "test_attention_multi", "(", ")", "\n", "", "", "elif", "config", ".", "mode", "==", "'test_save_test_image'", ":", "\n", "        ", "if", "config", ".", "dataset", "in", "[", "'CelebA'", ",", "'RaFD'", "]", ":", "\n", "            ", "solver", ".", "test_save_test_image", "(", ")", "\n", "", "elif", "config", ".", "dataset", "in", "[", "'Both'", "]", ":", "\n", "            ", "solver", ".", "test_save_test_image", "(", ")", "\n", "", "", "elif", "config", ".", "mode", "==", "'test_inter'", ":", "\n", "        ", "if", "config", ".", "dataset", "in", "[", "'CelebA'", ",", "'RaFD'", "]", ":", "\n", "            ", "solver", ".", "test_inter", "(", ")", "\n", "", "elif", "config", ".", "dataset", "in", "[", "'Both'", "]", ":", "\n", "            ", "solver", ".", "test_inter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.data_loader.CelebA.__init__": [[13, 30], ["data_loader.CelebA.preprocess", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.data_loader.CelebA.preprocess"], ["def", "__init__", "(", "self", ",", "image_dir", ",", "attr_path", ",", "selected_attrs", ",", "transform", ",", "mode", ")", ":", "\n", "        ", "\"\"\"Initialize and preprocess the CelebA dataset.\"\"\"", "\n", "self", ".", "image_dir", "=", "image_dir", "\n", "self", ".", "attr_path", "=", "attr_path", "\n", "self", ".", "selected_attrs", "=", "selected_attrs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "train_dataset", "=", "[", "]", "\n", "self", ".", "test_dataset", "=", "[", "]", "\n", "self", ".", "attr2idx", "=", "{", "}", "\n", "self", ".", "idx2attr", "=", "{", "}", "\n", "self", ".", "preprocess", "(", ")", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "num_images", "=", "len", "(", "self", ".", "train_dataset", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_images", "=", "len", "(", "self", ".", "test_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.data_loader.CelebA.preprocess": [[31, 58], ["lines[].split", "enumerate", "random.seed", "random.shuffle", "enumerate", "print", "line.rstrip", "line.split", "open", "label.append", "data_loader.CelebA.test_dataset.append", "data_loader.CelebA.train_dataset.append"], "methods", ["None"], ["", "", "def", "preprocess", "(", "self", ")", ":", "\n", "        ", "\"\"\"Preprocess the CelebA attribute file.\"\"\"", "\n", "lines", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "self", ".", "attr_path", ",", "'r'", ")", "]", "\n", "all_attr_names", "=", "lines", "[", "1", "]", ".", "split", "(", ")", "\n", "for", "i", ",", "attr_name", "in", "enumerate", "(", "all_attr_names", ")", ":", "\n", "            ", "self", ".", "attr2idx", "[", "attr_name", "]", "=", "i", "\n", "self", ".", "idx2attr", "[", "i", "]", "=", "attr_name", "\n", "\n", "", "lines", "=", "lines", "[", "2", ":", "]", "\n", "random", ".", "seed", "(", "1234", ")", "\n", "random", ".", "shuffle", "(", "lines", ")", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "split", "=", "line", ".", "split", "(", ")", "\n", "filename", "=", "split", "[", "0", "]", "\n", "values", "=", "split", "[", "1", ":", "]", "\n", "\n", "label", "=", "[", "]", "\n", "for", "attr_name", "in", "self", ".", "selected_attrs", ":", "\n", "                ", "idx", "=", "self", ".", "attr2idx", "[", "attr_name", "]", "\n", "label", ".", "append", "(", "values", "[", "idx", "]", "==", "'1'", ")", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "<", "20000", ":", "\n", "                ", "self", ".", "test_dataset", ".", "append", "(", "[", "filename", ",", "label", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_dataset", ".", "append", "(", "[", "filename", ",", "label", "]", ")", "\n", "\n", "", "", "print", "(", "'Finished preprocessing the CelebA dataset...'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.data_loader.CelebA.__getitem__": [[59, 65], ["PIL.Image.open", "os.path.join", "data_loader.CelebA.transform", "torch.FloatTensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return one image and its corresponding attribute label.\"\"\"", "\n", "dataset", "=", "self", ".", "train_dataset", "if", "self", ".", "mode", "==", "'train'", "else", "self", ".", "test_dataset", "\n", "filename", ",", "label", "=", "dataset", "[", "index", "]", "\n", "image", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "filename", ")", ")", "\n", "return", "self", ".", "transform", "(", "image", ")", ",", "torch", ".", "FloatTensor", "(", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.data_loader.CelebA.__len__": [[66, 69], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the number of images.\"\"\"", "\n", "return", "self", ".", "num_images", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.data_loader.get_loader": [[71, 93], ["T.Compose.append", "T.Compose.append", "T.Compose.append", "T.Compose.append", "torchvision.transforms.Compose", "torch.utils.data.DataLoader", "T.Compose.append", "torchvision.transforms.CenterCrop", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "data_loader.CelebA", "torchvision.transforms.RandomHorizontalFlip", "torchvision.datasets.ImageFolder"], "function", ["None"], ["", "", "def", "get_loader", "(", "image_dir", ",", "attr_path", ",", "selected_attrs", ",", "crop_size", "=", "178", ",", "image_size", "=", "128", ",", "\n", "batch_size", "=", "16", ",", "dataset", "=", "'CelebA'", ",", "mode", "=", "'train'", ",", "num_workers", "=", "1", ")", ":", "\n", "    ", "\"\"\"Build and return a data loader.\"\"\"", "\n", "transform", "=", "[", "]", "\n", "if", "mode", "==", "'train'", ":", "\n", "        ", "transform", ".", "append", "(", "T", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "", "transform", ".", "append", "(", "T", ".", "CenterCrop", "(", "crop_size", ")", ")", "\n", "transform", ".", "append", "(", "T", ".", "Resize", "(", "image_size", ")", ")", "\n", "transform", ".", "append", "(", "T", ".", "ToTensor", "(", ")", ")", "\n", "transform", ".", "append", "(", "T", ".", "Normalize", "(", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", ")", "\n", "transform", "=", "T", ".", "Compose", "(", "transform", ")", "\n", "\n", "if", "dataset", "==", "'CelebA'", ":", "\n", "        ", "dataset", "=", "CelebA", "(", "image_dir", ",", "attr_path", ",", "selected_attrs", ",", "transform", ",", "mode", ")", "\n", "", "elif", "dataset", "==", "'RaFD'", ":", "\n", "        ", "dataset", "=", "ImageFolder", "(", "image_dir", ",", "transform", ")", "\n", "\n", "", "data_loader", "=", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "(", "mode", "==", "'train'", ")", ",", "\n", "num_workers", "=", "num_workers", ")", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.logger.Logger.__init__": [[7, 10], ["tensorflow.summary.FileWriter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "\"\"\"Initialize summary writer.\"\"\"", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.logger.Logger.scalar_summary": [[11, 15], ["tensorflow.Summary", "logger.Logger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Add scalar summary.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.AdaptiveInstanceNorm2d.__init__": [[10, 21], ["torch.Module.__init__", "model.AdaptiveInstanceNorm2d.register_buffer", "model.AdaptiveInstanceNorm2d.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "AdaptiveInstanceNorm2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "# weight and bias are dynamically assigned", "\n", "self", ".", "weight", "=", "None", "\n", "self", ".", "bias", "=", "None", "\n", "# just dummy buffers, not used", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.AdaptiveInstanceNorm2d.forward": [[22, 36], ["model.AdaptiveInstanceNorm2d.running_mean.repeat", "model.AdaptiveInstanceNorm2d.running_var.repeat", "x.contiguous().view", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm.view", "x.size", "x.size", "x.contiguous", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "self", ".", "weight", "is", "not", "None", "and", "self", ".", "bias", "is", "not", "None", ",", "\"Please assign weight and bias before calling AdaIN!\"", "\n", "b", ",", "c", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "running_mean", "=", "self", ".", "running_mean", ".", "repeat", "(", "b", ")", "\n", "running_var", "=", "self", ".", "running_var", ".", "repeat", "(", "b", ")", "\n", "\n", "# Apply instance norm", "\n", "x_reshaped", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "b", "*", "c", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "out", "=", "F", ".", "batch_norm", "(", "\n", "x_reshaped", ",", "running_mean", ",", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "True", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "return", "out", ".", "view", "(", "b", ",", "c", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.ResBlocks_AdaIN.__init__": [[38, 44], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.ResBlock_AdaIN"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "dim", ",", "norm", "=", "'in'", ",", "activation", "=", "'relu'", ",", "pad_type", "=", "'zero'", ")", ":", "\n", "        ", "super", "(", "ResBlocks_AdaIN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "self", ".", "model", "+=", "[", "ResBlock_AdaIN", "(", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.ResBlocks_AdaIN.forward": [[45, 47], ["model.ResBlocks_AdaIN.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "", "class", "ResBlock_AdaIN", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.ResBlock_AdaIN.__init__": [[48, 55], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.Conv2dBlock", "model.Conv2dBlock"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "norm", "=", "'in'", ",", "activation", "=", "'relu'", ",", "pad_type", "=", "'zero'", ")", ":", "\n", "        ", "super", "(", "ResBlock_AdaIN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model", "=", "[", "]", "\n", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activation", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "'none'", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.ResBlock_AdaIN.forward": [[56, 61], ["model.ResBlock_AdaIN.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "model", "(", "x", ")", "\n", "out", "+=", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Conv2dBlock.__init__": [[64, 115], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "SpectralNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "torch.ZeroPad2d", "LayerNorm", "torch.PReLU", "torch.PReLU", "torch.PReLU", "model.AdaptiveInstanceNorm2d", "torch.SELU", "torch.SELU", "torch.SELU", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "0", ",", "norm", "=", "'none'", ",", "activation", "=", "'relu'", ",", "pad_type", "=", "'zero'", ")", ":", "\n", "        ", "super", "(", "Conv2dBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_bias", "=", "True", "\n", "# initialize padding", "\n", "if", "pad_type", "==", "'reflect'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "padding", ")", "\n", "", "elif", "pad_type", "==", "'replicate'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ReplicationPad2d", "(", "padding", ")", "\n", "", "elif", "pad_type", "==", "'zero'", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "padding", ")", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported padding type: {}\"", ".", "format", "(", "pad_type", ")", "\n", "\n", "# initialize normalization", "\n", "", "norm_dim", "=", "output_dim", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "#self.norm = nn.InstanceNorm2d(norm_dim, track_running_stats=True)", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'ln'", ":", "\n", "            ", "self", ".", "norm", "=", "LayerNorm", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'adain'", ":", "\n", "            ", "self", ".", "norm", "=", "AdaptiveInstanceNorm2d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'none'", "or", "norm", "==", "'sn'", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported normalization: {}\"", ".", "format", "(", "norm", ")", "\n", "\n", "# initialize activation", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'lrelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'selu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'none'", ":", "\n", "            ", "self", ".", "activation", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported activation: {}\"", ".", "format", "(", "activation", ")", "\n", "\n", "# initialize convolution", "\n", "", "if", "norm", "==", "'sn'", ":", "\n", "            ", "self", ".", "conv", "=", "SpectralNorm", "(", "nn", ".", "Conv2d", "(", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "bias", "=", "self", ".", "use_bias", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "output_dim", ",", "kernel_size", ",", "stride", ",", "bias", "=", "self", ".", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Conv2dBlock.forward": [[116, 123], ["model.Conv2dBlock.conv", "model.Conv2dBlock.pad", "model.Conv2dBlock.norm", "model.Conv2dBlock.activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "self", ".", "pad", "(", "x", ")", ")", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.LinearBlock.__init__": [[125, 162], ["torch.Module.__init__", "SpectralNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.InstanceNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "LayerNorm", "torch.PReLU", "torch.PReLU", "torch.PReLU", "torch.SELU", "torch.SELU", "torch.SELU", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "norm", "=", "'none'", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "LinearBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "use_bias", "=", "True", "\n", "# initialize fully connected layer", "\n", "if", "norm", "==", "'sn'", ":", "\n", "            ", "self", ".", "fc", "=", "SpectralNorm", "(", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "use_bias", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "use_bias", ")", "\n", "\n", "# initialize normalization", "\n", "", "norm_dim", "=", "output_dim", "\n", "if", "norm", "==", "'bn'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "BatchNorm1d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "            ", "self", ".", "norm", "=", "nn", ".", "InstanceNorm1d", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'ln'", ":", "\n", "            ", "self", ".", "norm", "=", "LayerNorm", "(", "norm_dim", ")", "\n", "", "elif", "norm", "==", "'none'", "or", "norm", "==", "'sn'", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported normalization: {}\"", ".", "format", "(", "norm", ")", "\n", "\n", "# initialize activation", "\n", "", "if", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'lrelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'prelu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "PReLU", "(", ")", "\n", "", "elif", "activation", "==", "'selu'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "SELU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'none'", ":", "\n", "            ", "self", ".", "activation", "=", "None", "\n", "", "else", ":", "\n", "            ", "assert", "0", ",", "\"Unsupported activation: {}\"", ".", "format", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.LinearBlock.forward": [[163, 170], ["model.LinearBlock.fc", "model.LinearBlock.norm", "model.LinearBlock.activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "fc", "(", "x", ")", "\n", "if", "self", ".", "norm", ":", "\n", "            ", "out", "=", "self", ".", "norm", "(", "out", ")", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "out", "=", "self", ".", "activation", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.ResidualBlock_attention_last_layer.__init__": [[174, 179], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__"], ["def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ")", ":", "\n", "        ", "super", "(", "ResidualBlock_attention_last_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim_out", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.ResidualBlock_attention_last_layer.forward": [[180, 182], ["model.ResidualBlock_attention_last_layer.main"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.main.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "", "", "class", "ResidualBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.ResidualBlock.__init__": [[184, 192], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__"], ["def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim_out", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "dim_out", ",", "dim_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim_out", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.ResidualBlock.forward": [[193, 195], ["model.ResidualBlock.main"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.main.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_encoder.__init__": [[199, 221], ["torch.Module.__init__", "layers.append", "layers.append", "layers.append", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "layers.append", "layers.append", "layers.append", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.ResidualBlock"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__"], ["def", "__init__", "(", "self", ",", "conv_dim", "=", "64", ",", "c_dim", "=", "5", ",", "repeat_num", "=", "6", ",", "n_res", "=", "4", ",", "dim", "=", "64", ",", "style_dim", "=", "8", ",", "mlp_dim", "=", "256", ",", "activ", "=", "'relu'", ",", "pad_type", "=", "'reflect'", ",", "res_norm", "=", "'adain'", ")", ":", "\n", "        ", "super", "(", "Generator_encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#self.enc_style = StyleEncoder(4, input_dim, dim, style_dim, norm='none', activ=activ, pad_type=pad_type)", "\n", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "3", "+", "c_dim", ",", "conv_dim", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "conv_dim", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "# Down-sampling layers.", "\n", "curr_dim", "=", "conv_dim", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "curr_dim", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "curr_dim", "*", "2", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "curr_dim", "=", "curr_dim", "*", "2", "\n", "\n", "# Bottleneck layers.", "\n", "", "for", "i", "in", "range", "(", "repeat_num", ")", ":", "\n", "            ", "layers", ".", "append", "(", "ResidualBlock", "(", "dim_in", "=", "curr_dim", ",", "dim_out", "=", "curr_dim", ")", ")", "\n", "", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_encoder.forward": [[222, 226], ["model.Generator_encoder.main"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.main.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Replicate spatially and concatenate domain information.", "\n", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "", "", "class", "Generator_attention", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_attention.__init__": [[228, 243], ["torch.Module.__init__", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "range", "range", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "model.ResidualBlock_attention_last_layer", "model.ResidualBlock"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__"], ["def", "__init__", "(", "self", ",", "conv_dim", "=", "64", ",", "c_dim", "=", "5", ",", "repeat_num", "=", "6", ",", "n_res", "=", "4", ",", "dim", "=", "64", ",", "style_dim", "=", "8", ",", "mlp_dim", "=", "256", ",", "activ", "=", "'relu'", ",", "pad_type", "=", "'reflect'", ",", "res_norm", "=", "'adain'", ")", ":", "\n", "        ", "super", "(", "Generator_attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "activation", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "layers", "=", "[", "]", "\n", "# Down-sampling layers.", "\n", "curr_dim", "=", "conv_dim", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "curr_dim", "=", "curr_dim", "*", "2", "\n", "\n", "", "for", "i", "in", "range", "(", "repeat_num", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "ResidualBlock", "(", "dim_in", "=", "curr_dim", ",", "dim_out", "=", "curr_dim", ")", ")", "\n", "\n", "", "layers", ".", "append", "(", "ResidualBlock_attention_last_layer", "(", "dim_in", "=", "curr_dim", ",", "dim_out", "=", "1", ")", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_attention.forward": [[244, 248], ["model.Generator_attention.main", "model.Generator_attention.activation"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.main.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Replicate spatially and concatenate domain information.", "\n", "        ", "x", "=", "self", ".", "main", "(", "x", ")", "\n", "return", "self", ".", "activation", "(", "x", ")", "\n", "", "", "class", "Generator_AdaIN", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_AdaIN.__init__": [[250, 267], ["torch.Module.__init__", "model.ResBlocks_AdaIN", "model.MLP", "range", "model.ResBlocks_AdaIN", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.Generator_AdaIN.get_num_adain_params"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__", "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_wo_att.get_num_adain_params"], ["def", "__init__", "(", "self", ",", "conv_dim", "=", "64", ",", "c_dim", "=", "5", ",", "repeat_num", "=", "6", ",", "n_res", "=", "4", ",", "dim", "=", "64", ",", "style_dim", "=", "8", ",", "mlp_dim", "=", "256", ",", "activ", "=", "'relu'", ",", "pad_type", "=", "'reflect'", ",", "res_norm", "=", "'adain'", ")", ":", "\n", "        ", "super", "(", "Generator_AdaIN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#self.enc_style = StyleEncoder(4, input_dim, dim, style_dim, norm='none', activ=activ, pad_type=pad_type)", "\n", "self", ".", "dec", "=", "ResBlocks_AdaIN", "(", "n_res", ",", "dim", ",", "res_norm", ",", "activ", ",", "pad_type", "=", "pad_type", ")", "\n", "self", ".", "mlp", "=", "MLP", "(", "style_dim", ",", "self", ".", "get_num_adain_params", "(", "self", ".", "dec", ")", ",", "mlp_dim", ",", "3", ",", "norm", "=", "'none'", ",", "activ", "=", "activ", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "# Down-sampling layers.", "\n", "curr_dim", "=", "conv_dim", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "curr_dim", "=", "curr_dim", "*", "2", "\n", "\n", "# AdaIN residual blocks", "\n", "", "self", ".", "ResBlocks_AdaIN_tv", "=", "ResBlocks_AdaIN", "(", "n_res", ",", "curr_dim", ",", "res_norm", ",", "activ", ",", "pad_type", "=", "pad_type", ")", "# Using tv is to initize the AdaIN", "\n", "layers", "+=", "[", "self", ".", "ResBlocks_AdaIN_tv", "]", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_AdaIN.forward": [[268, 273], ["model.Generator_AdaIN.mlp", "model.Generator_AdaIN.assign_adain_params", "model.Generator_AdaIN.main"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_wo_att.assign_adain_params", "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.main.main"], ["", "def", "forward", "(", "self", ",", "x", ",", "style", ")", ":", "\n", "# Replicate spatially and concatenate domain information.", "\n", "        ", "adain_params", "=", "self", ".", "mlp", "(", "style", ")", "\n", "self", ".", "assign_adain_params", "(", "adain_params", ",", "self", ".", "ResBlocks_AdaIN_tv", ")", "\n", "return", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_AdaIN.get_num_adain_params": [[274, 281], ["model.modules"], "methods", ["None"], ["", "def", "get_num_adain_params", "(", "self", ",", "model", ")", ":", "\n", "# return the number of AdaIN parameters needed by the model", "\n", "        ", "num_adain_params", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "m", ".", "__class__", ".", "__name__", "==", "\"AdaptiveInstanceNorm2d\"", ":", "\n", "                ", "num_adain_params", "+=", "2", "*", "m", ".", "num_features", "\n", "", "", "return", "num_adain_params", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_AdaIN.assign_adain_params": [[282, 292], ["model.modules", "mean.contiguous().view", "std.contiguous().view", "adain_params.size", "mean.contiguous", "std.contiguous"], "methods", ["None"], ["", "def", "assign_adain_params", "(", "self", ",", "adain_params", ",", "model", ")", ":", "\n", "# assign the adain_params to the AdaIN layers in model", "\n", "        ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "m", ".", "__class__", ".", "__name__", "==", "\"AdaptiveInstanceNorm2d\"", ":", "\n", "                ", "mean", "=", "adain_params", "[", ":", ",", ":", "m", ".", "num_features", "]", "\n", "std", "=", "adain_params", "[", ":", ",", "m", ".", "num_features", ":", "2", "*", "m", ".", "num_features", "]", "\n", "m", ".", "bias", "=", "mean", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "m", ".", "weight", "=", "std", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "adain_params", ".", "size", "(", "1", ")", ">", "2", "*", "m", ".", "num_features", ":", "\n", "                    ", "adain_params", "=", "adain_params", "[", ":", ",", "2", "*", "m", ".", "num_features", ":", "]", "\n", "", "", "", "", "", "class", "Generator_w_att", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_w_att.__init__": [[294, 317], ["torch.Module.__init__", "model.Generator_encoder", "model.Generator_AdaIN", "model.Generator_attention", "torch.Upsample", "torch.Upsample", "torch.Upsample", "range", "range", "layers.append", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__"], ["def", "__init__", "(", "self", ",", "conv_dim", "=", "64", ",", "c_dim", "=", "5", ",", "repeat_num", "=", "6", ",", "n_res", "=", "4", ",", "dim", "=", "64", ",", "style_dim", "=", "8", ",", "mlp_dim", "=", "256", ",", "activ", "=", "'relu'", ",", "pad_type", "=", "'reflect'", ",", "res_norm", "=", "'adain'", ")", ":", "\n", "        ", "super", "(", "Generator_w_att", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "self", ".", "enc", "=", "Generator_encoder", "(", "conv_dim", ",", "c_dim", ",", "repeat_num", ",", "n_res", ",", "dim", ",", "style_dim", ",", "mlp_dim", ",", "activ", ",", "pad_type", ",", "res_norm", ")", "\n", "self", ".", "ada", "=", "Generator_AdaIN", "(", "conv_dim", ",", "c_dim", ",", "repeat_num", ",", "n_res", ",", "dim", ",", "style_dim", ",", "mlp_dim", ",", "activ", ",", "pad_type", ",", "res_norm", ")", "\n", "self", ".", "att", "=", "Generator_attention", "(", "conv_dim", ",", "c_dim", ",", "repeat_num", ",", "n_res", ",", "dim", ",", "style_dim", ",", "mlp_dim", ",", "activ", ",", "pad_type", ",", "res_norm", ")", "\n", "self", ".", "up_sample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "4", ",", "mode", "=", "'bilinear'", ")", "\n", "layers", "=", "[", "]", "\n", "# Down-sampling layers.", "\n", "curr_dim", "=", "conv_dim", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "curr_dim", "=", "curr_dim", "*", "2", "\n", "# Up-sampling layers.", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "curr_dim", ",", "curr_dim", "//", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "curr_dim", "//", "2", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "curr_dim", "=", "curr_dim", "//", "2", "\n", "\n", "", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "3", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "c", ",", "style", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_w_att.forward": [[317, 330], ["c.repeat.repeat.view", "c.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Generator_w_att.enc", "model.Generator_w_att.ada", "model.Generator_w_att.att", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "model.Generator_w_att.up_sample", "c.repeat.repeat.size", "c.repeat.repeat.size", "torch.mul.size", "torch.mul.size", "torch.mul.size", "torch.mul.size", "torch.mul.size", "torch.mul.size", "model.Generator_w_att.main", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.main.main"], ["", "def", "forward", "(", "self", ",", "x", ",", "c", ",", "style", ")", ":", "\n", "# Replicate spatially and concatenate domain information.", "\n", "        ", "c", "=", "c", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "c", "=", "c", ".", "repeat", "(", "1", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "c", "]", ",", "dim", "=", "1", ")", "\n", "enc", "=", "self", ".", "enc", "(", "x", ")", "\n", "ada", "=", "self", ".", "ada", "(", "enc", ",", "style", ")", "\n", "att", "=", "self", ".", "att", "(", "enc", ")", "\n", "x", "=", "torch", ".", "mul", "(", "att", ",", "ada", ")", "\n", "output_att", "=", "torch", ".", "cat", "(", "[", "att", ",", "att", ",", "att", "]", ",", "dim", "=", "1", ")", "*", "2", "-", "1", "\n", "output_att", "=", "self", ".", "up_sample", "(", "output_att", ")", "\n", "\n", "return", "self", ".", "main", "(", "x", ")", ",", "output_att", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_w_att.encode": [[331, 336], ["model.Generator_w_att.enc_style", "model.Generator_w_att.enc_content"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "images", ")", ":", "\n", "# encode an image to its content and style codes", "\n", "        ", "style_fake", "=", "self", ".", "enc_style", "(", "images", ")", "\n", "content", "=", "self", ".", "enc_content", "(", "images", ")", "\n", "return", "content", ",", "style_fake", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_wo_att.__init__": [[339, 376], ["torch.Module.__init__", "model.ResBlocks_AdaIN", "model.MLP", "layers.append", "layers.append", "layers.append", "range", "range", "model.ResBlocks_AdaIN", "range", "layers.append", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.Generator_wo_att.get_num_adain_params", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model.ResidualBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__", "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_wo_att.get_num_adain_params"], ["def", "__init__", "(", "self", ",", "conv_dim", "=", "64", ",", "c_dim", "=", "5", ",", "repeat_num", "=", "6", ",", "n_res", "=", "4", ",", "dim", "=", "64", ",", "style_dim", "=", "8", ",", "mlp_dim", "=", "256", ",", "activ", "=", "'relu'", ",", "pad_type", "=", "'reflect'", ",", "res_norm", "=", "'adain'", ")", ":", "\n", "        ", "super", "(", "Generator_wo_att", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#self.enc_style = StyleEncoder(4, input_dim, dim, style_dim, norm='none', activ=activ, pad_type=pad_type)", "\n", "self", ".", "dec", "=", "ResBlocks_AdaIN", "(", "n_res", ",", "dim", ",", "res_norm", ",", "activ", ",", "pad_type", "=", "pad_type", ")", "\n", "self", ".", "mlp", "=", "MLP", "(", "style_dim", ",", "self", ".", "get_num_adain_params", "(", "self", ".", "dec", ")", ",", "mlp_dim", ",", "3", ",", "norm", "=", "'none'", ",", "activ", "=", "activ", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "3", "+", "c_dim", ",", "conv_dim", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "conv_dim", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "# Down-sampling layers.", "\n", "curr_dim", "=", "conv_dim", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "curr_dim", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "curr_dim", "*", "2", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "curr_dim", "=", "curr_dim", "*", "2", "\n", "\n", "# Bottleneck layers.", "\n", "", "for", "i", "in", "range", "(", "repeat_num", ")", ":", "\n", "            ", "layers", ".", "append", "(", "ResidualBlock", "(", "dim_in", "=", "curr_dim", ",", "dim_out", "=", "curr_dim", ")", ")", "\n", "\n", "# AdaIN residual blocks", "\n", "", "self", ".", "ResBlocks_AdaIN_tv", "=", "ResBlocks_AdaIN", "(", "n_res", ",", "curr_dim", ",", "res_norm", ",", "activ", ",", "pad_type", "=", "pad_type", ")", "# Using tv is to initize the AdaIN", "\n", "layers", "+=", "[", "self", ".", "ResBlocks_AdaIN_tv", "]", "\n", "# Up-sampling layers.", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "ConvTranspose2d", "(", "curr_dim", ",", "curr_dim", "//", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "InstanceNorm2d", "(", "curr_dim", "//", "2", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "curr_dim", "=", "curr_dim", "//", "2", "\n", "\n", "", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "3", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_wo_att.forward": [[377, 386], ["c.repeat.repeat.view", "c.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Generator_wo_att.mlp", "model.Generator_wo_att.assign_adain_params", "c.repeat.repeat.size", "c.repeat.repeat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "model.Generator_wo_att.main"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_wo_att.assign_adain_params", "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.main.main"], ["", "def", "forward", "(", "self", ",", "x", ",", "c", ",", "style", ")", ":", "\n", "# Replicate spatially and concatenate domain information.", "\n", "        ", "c", "=", "c", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "c", "=", "c", ".", "repeat", "(", "1", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "c", "]", ",", "dim", "=", "1", ")", "\n", "\n", "adain_params", "=", "self", ".", "mlp", "(", "style", ")", "\n", "self", ".", "assign_adain_params", "(", "adain_params", ",", "self", ".", "ResBlocks_AdaIN_tv", ")", "\n", "return", "self", ".", "main", "(", "x", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_wo_att.get_num_adain_params": [[387, 394], ["model.modules"], "methods", ["None"], ["", "def", "get_num_adain_params", "(", "self", ",", "model", ")", ":", "\n", "# return the number of AdaIN parameters needed by the model", "\n", "        ", "num_adain_params", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "m", ".", "__class__", ".", "__name__", "==", "\"AdaptiveInstanceNorm2d\"", ":", "\n", "                ", "num_adain_params", "+=", "2", "*", "m", ".", "num_features", "\n", "", "", "return", "num_adain_params", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_wo_att.assign_adain_params": [[395, 405], ["model.modules", "mean.contiguous().view", "std.contiguous().view", "adain_params.size", "mean.contiguous", "std.contiguous"], "methods", ["None"], ["", "def", "assign_adain_params", "(", "self", ",", "adain_params", ",", "model", ")", ":", "\n", "# assign the adain_params to the AdaIN layers in model", "\n", "        ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "m", ".", "__class__", ".", "__name__", "==", "\"AdaptiveInstanceNorm2d\"", ":", "\n", "                ", "mean", "=", "adain_params", "[", ":", ",", ":", "m", ".", "num_features", "]", "\n", "std", "=", "adain_params", "[", ":", ",", "m", ".", "num_features", ":", "2", "*", "m", ".", "num_features", "]", "\n", "m", ".", "bias", "=", "mean", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "m", ".", "weight", "=", "std", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "adain_params", ".", "size", "(", "1", ")", ">", "2", "*", "m", ".", "num_features", ":", "\n", "                    ", "adain_params", "=", "adain_params", "[", ":", ",", "2", "*", "m", ".", "num_features", ":", "]", "\n", "", "", "", "", "def", "encode", "(", "self", ",", "images", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Generator_wo_att.encode": [[405, 410], ["model.Generator_wo_att.enc_style", "model.Generator_wo_att.enc_content"], "methods", ["None"], ["", "", "", "", "def", "encode", "(", "self", ",", "images", ")", ":", "\n", "# encode an image to its content and style codes", "\n", "        ", "style_fake", "=", "self", ".", "enc_style", "(", "images", ")", "\n", "content", "=", "self", ".", "enc_content", "(", "images", ")", "\n", "return", "content", ",", "style_fake", "\n", "", "", "class", "StyleEncoder", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.StyleEncoder.__init__": [[411, 424], ["torch.Module.__init__", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.Conv2dBlock", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.Conv2dBlock", "model.Conv2dBlock"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_downsample", ",", "input_dim", ",", "dim", ",", "style_dim", ",", "norm", ",", "activ", ",", "pad_type", ")", ":", "\n", "        ", "super", "(", "StyleEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "[", "]", "\n", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "input_dim", ",", "dim", ",", "7", ",", "1", ",", "3", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "2", "*", "dim", ",", "4", ",", "2", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "dim", "*=", "2", "\n", "", "for", "i", "in", "range", "(", "n_downsample", "-", "2", ")", ":", "\n", "            ", "self", ".", "model", "+=", "[", "Conv2dBlock", "(", "dim", ",", "dim", ",", "4", ",", "2", ",", "1", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ",", "pad_type", "=", "pad_type", ")", "]", "\n", "", "self", ".", "model", "+=", "[", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "]", "# global average pooling", "\n", "self", ".", "model", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "style_dim", ",", "1", ",", "1", ",", "0", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ")", "\n", "self", ".", "output_dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.StyleEncoder.forward": [[425, 427], ["model.StyleEncoder.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "", "class", "MLP", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.MLP.__init__": [[428, 437], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.LinearBlock", "model.LinearBlock", "model.LinearBlock"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "dim", ",", "n_blk", ",", "norm", "=", "'none'", ",", "activ", "=", "'relu'", ")", ":", "\n", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "[", "]", "\n", "self", ".", "model", "+=", "[", "LinearBlock", "(", "input_dim", ",", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ")", "]", "\n", "for", "i", "in", "range", "(", "n_blk", "-", "2", ")", ":", "\n", "            ", "self", ".", "model", "+=", "[", "LinearBlock", "(", "dim", ",", "dim", ",", "norm", "=", "norm", ",", "activation", "=", "activ", ")", "]", "\n", "", "self", ".", "model", "+=", "[", "LinearBlock", "(", "dim", ",", "output_dim", ",", "norm", "=", "'none'", ",", "activation", "=", "'none'", ")", "]", "# no output activations", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.MLP.forward": [[438, 440], ["model.MLP.model", "x.view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__": [[445, 465], ["torch.Module.__init__", "layers.append", "layers.append", "range", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.MLP", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.append", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.__init__"], ["def", "__init__", "(", "self", ",", "image_size", "=", "128", ",", "conv_dim", "=", "64", ",", "c_dim", "=", "5", ",", "repeat_num", "=", "6", ",", "output_dim", "=", "8", ",", "style_dim", "=", "8", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "3", ",", "conv_dim", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.01", ")", ")", "\n", "\n", "curr_dim", "=", "conv_dim", "\n", "for", "i", "in", "range", "(", "1", ",", "repeat_num", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "curr_dim", ",", "curr_dim", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "LeakyReLU", "(", "0.01", ")", ")", "\n", "curr_dim", "=", "curr_dim", "*", "2", "\n", "\n", "", "kernel_size", "=", "int", "(", "image_size", "/", "np", ".", "power", "(", "2", ",", "repeat_num", ")", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "curr_dim", ",", "1", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "curr_dim", ",", "c_dim", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "curr_dim", ",", "style_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "mlp", "=", "MLP", "(", "32", ",", "style_dim", ",", "style_dim", ",", "2", ",", "norm", "=", "'none'", ",", "activ", "=", "'relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaxingwang_SDIT.None.model.Discriminator.forward": [[466, 473], ["model.Discriminator.main", "model.Discriminator.conv1", "model.Discriminator.conv2", "model.Discriminator.conv3", "model.Discriminator.mlp", "model.Discriminator.view", "model.Discriminator.size", "model.Discriminator.size"], "methods", ["home.repos.pwc.inspect_result.yaxingwang_SDIT.None.main.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "main", "(", "x", ")", "\n", "out_src", "=", "self", ".", "conv1", "(", "h", ")", "\n", "out_cls", "=", "self", ".", "conv2", "(", "h", ")", "\n", "out_noise", "=", "self", ".", "conv3", "(", "h", ")", "\n", "out_noise", "=", "self", ".", "mlp", "(", "out_noise", ")", "\n", "return", "out_src", ",", "out_cls", ".", "view", "(", "out_cls", ".", "size", "(", "0", ")", ",", "out_cls", ".", "size", "(", "1", ")", ")", ",", "out_noise", "\n", "", "", ""]]}