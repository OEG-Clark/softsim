{"home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.None.test_python_docs.main": [[8, 19], ["docx.Document", "print", "print", "enumerate", "len", "len", "print"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\t", "document", "=", "Document", "(", "'GDPR-EN-Europe-converted.docx'", ")", "\n", "\n", "sections", "=", "document", ".", "sections", "\n", "print", "(", "\"Section Size:\"", ",", "len", "(", "sections", ")", ")", "\n", "\n", "paragraphs", "=", "document", ".", "paragraphs", "\n", "print", "(", "\"Paragraphs Size:\"", ",", "len", "(", "paragraphs", ")", ")", "\n", "\n", "for", "idx", ",", "p", "in", "enumerate", "(", "paragraphs", "[", ":", "20", "]", ")", ":", "\n", "\t\t", "print", "(", "f\"Line {idx}: {p.text}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.doc_sim.load_bert_model": [[32, 40], ["sentence_transformers.models.Transformer", "sentence_transformers.models.Pooling", "sentence_transformers.SentenceTransformer", "models.Transformer.get_word_embedding_dimension"], "function", ["None"], ["", "def", "load_bert_model", "(", "path", ")", ":", "\n", "    ", "word_embedding_model", "=", "models", ".", "Transformer", "(", "path", ")", "\n", "pooling_model", "=", "models", ".", "Pooling", "(", "word_embedding_model", ".", "get_word_embedding_dimension", "(", ")", ",", "\n", "pooling_mode_mean_tokens", "=", "True", ",", "\n", "pooling_mode_cls_token", "=", "False", ",", "\n", "pooling_mode_max_tokens", "=", "False", ")", "\n", "\n", "return", "SentenceTransformer", "(", "modules", "=", "[", "word_embedding_model", ",", "pooling_model", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.doc_sim.elu_dist": [[41, 43], ["numpy.sqrt", "numpy.sum"], "function", ["None"], ["", "def", "elu_dist", "(", "x", ",", "y", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "x", "-", "y", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.doc_sim.load_glove_vectors": [[44, 52], ["open", "line.split", "float"], "function", ["None"], ["", "def", "load_glove_vectors", "(", "glove_file", "=", "\"/home/yaguang/pretrained_models/glove.6B.50d.txt\"", ")", ":", "\n", "    ", "\"\"\"Load the glove word vectors\"\"\"", "\n", "word_vectors", "=", "{", "}", "\n", "with", "open", "(", "glove_file", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "split", "=", "line", ".", "split", "(", ")", "\n", "word_vectors", "[", "split", "[", "0", "]", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "split", "[", "1", ":", "]", "]", "\n", "", "", "return", "word_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.doc_sim.load_fasttext_vectors": [[53, 62], ["open", "f.readline", "line.split", "float"], "function", ["None"], ["", "def", "load_fasttext_vectors", "(", "ft_file", "=", "\"/home/yaguang/pretrained_models/wiki-news-300d-1M.vec\"", ")", ":", "\n", "    ", "\"\"\"Load the fasttext vectors\"\"\"", "\n", "word_vectors", "=", "{", "}", "\n", "with", "open", "(", "ft_file", ")", "as", "f", ":", "\n", "        ", "f", ".", "readline", "(", ")", "\n", "for", "line", "in", "f", ":", "\n", "            ", "split", "=", "line", ".", "split", "(", ")", "\n", "word_vectors", "[", "split", "[", "0", "]", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "split", "[", "1", ":", "]", "]", "\n", "", "", "return", "word_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.doc_sim.filter_tokens": [[63, 76], ["set", "tknzr.tokenize", "lemmatizer.lemmatize.strip().lower", "lemmatizer.lemmatize", "tmp.append", "lemmatizer.lemmatize.strip"], "function", ["None"], ["", "def", "filter_tokens", "(", "sentence", ")", ":", "\n", "    ", "tmp", "=", "[", "]", "\n", "exclude", "=", "set", "(", "string", ".", "punctuation", ")", "\n", "for", "t", "in", "tknzr", ".", "tokenize", "(", "sentence", ")", ":", "\n", "        ", "t", "=", "t", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "t", "=", "''", ".", "join", "(", "ch", "for", "ch", "in", "t", "if", "ch", "not", "in", "exclude", ")", "\n", "t", "=", "lemmatizer", ".", "lemmatize", "(", "t", ")", "\n", "if", "not", "t", ":", "\n", "            ", "continue", "\n", "", "if", "t", "in", "stop_words", ":", "\n", "            ", "continue", "\n", "", "tmp", ".", "append", "(", "t", ")", "\n", "", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.doc_sim.get_word_embedding": [[77, 79], ["list", "numpy.random.uniform"], "function", ["None"], ["", "def", "get_word_embedding", "(", "word", ",", "emb_size", ",", "model", ")", ":", "\n", "    ", "return", "model", "[", "word", "]", "if", "word", "in", "model", "else", "list", "(", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "emb_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.doc_sim.get_bert_embeddings": [[80, 83], ["model.encode().tolist", "model.encode"], "function", ["None"], ["", "def", "get_bert_embeddings", "(", "sentences", ",", "model", ")", ":", "\n", "    ", "sentence_embeddings", "=", "model", ".", "encode", "(", "sentences", ")", ".", "tolist", "(", ")", "\n", "return", "sentence_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.doc_sim.tokens_to_embeddings": [[84, 91], ["numpy.sum", "numpy.mean", "doc_sim.get_word_embedding", "doc_sim.get_word_embedding"], "function", ["home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.get_word_embedding", "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.get_word_embedding"], ["", "def", "tokens_to_embeddings", "(", "tokens", ",", "model", ")", ":", "\n", "    ", "if", "embedding_method", "==", "EmbeddingMethod", ".", "glove", ":", "\n", "#return np.mean([get_word_embedding(token, 50, model) for token in tokens], 0)", "\n", "        ", "return", "np", ".", "sum", "(", "[", "get_word_embedding", "(", "token", ",", "50", ",", "model", ")", "for", "token", "in", "tokens", "]", ",", "0", ")", "\n", "\n", "", "if", "embedding_method", "==", "EmbeddingMethod", ".", "fasttext", ":", "\n", "        ", "return", "np", ".", "mean", "(", "[", "get_word_embedding", "(", "token", ",", "300", ",", "model", ")", "for", "token", "in", "tokens", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.doc_sim.get_embeddings": [[92, 120], ["pandas.read_csv().drop_duplicates", "open", "df[].str.lower", "pd.read_csv().drop_duplicates.iterrows", "doc_sim.get_bert_embeddings", "doc_sim.get_bert_embeddings", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "doc_sim.filter_tokens", "recitals.append", "glove_embeddings.append", "pandas.read_csv", "article_dic[].append", "len", "doc_sim.tokens_to_embeddings"], "function", ["home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.get_bert_embeddings", "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.get_bert_embeddings", "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.filter_tokens", "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.tokens_to_embeddings"], ["", "", "def", "get_embeddings", "(", "glove_model", ",", "siamese_model", ",", "bert_model", ",", "filename", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "filename", ")", ".", "drop_duplicates", "(", ")", "\n", "chapter_dic", ",", "section_dic", ",", "article_dic", "=", "collections", ".", "defaultdict", "(", "list", ")", ",", "collections", ".", "defaultdict", "(", "list", ")", ",", "collections", ".", "defaultdict", "(", "list", ")", "\n", "recitals", "=", "[", "]", "\n", "texts", "=", "[", "]", "\n", "glove_embeddings", "=", "[", "]", "\n", "f", "=", "open", "(", "filename", ")", "\n", "count", "=", "0", "\n", "df", "[", "'recital'", "]", "=", "df", "[", "'recital'", "]", ".", "str", ".", "lower", "(", ")", "\n", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "#fact = fact.encode('ascii', errors='ignore').decode().replace(\"\\n\", \". \")", "\n", "        ", "chapter", ",", "section", ",", "article", ",", "recital", "=", "row", "[", "'chapter'", "]", ",", "row", "[", "'section'", "]", ",", "row", "[", "'article'", "]", ",", "row", "[", "'recital'", "]", "\n", "if", "not", "recital", ":", "\n", "            ", "continue", "\n", "", "if", "recital", "==", "\"undefined\"", ":", "\n", "            ", "continue", "\n", "", "if", "article", "!=", "\"undefined\"", ":", "\n", "            ", "article_dic", "[", "article", "]", ".", "append", "(", "count", ")", "\n", "", "tokens", "=", "filter_tokens", "(", "recital", ")", "\n", "if", "len", "(", "tokens", ")", "<=", "1", ":", "\n", "            ", "continue", "\n", "", "recitals", ".", "append", "(", "recital", ")", "\n", "glove_embeddings", ".", "append", "(", "tokens_to_embeddings", "(", "tokens", ",", "glove_model", ")", ")", "\n", "count", "+=", "1", "\n", "", "bert_embeddings", "=", "get_bert_embeddings", "(", "recitals", ",", "bert_model", ")", "\n", "siamese_embeddings", "=", "get_bert_embeddings", "(", "recitals", ",", "siamese_model", ")", "\n", "#embeddings.append(np.mean(sentence_embeddings, 0))", "\n", "return", "article_dic", ",", "recitals", ",", "glove_embeddings", ",", "bert_embeddings", ",", "siamese_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.doc_sim.cos_sim": [[121, 129], ["numpy.linalg.norm", "print", "print", "numpy.linalg.norm", "print", "print", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "cos_sim", "(", "a", ",", "b", ")", ":", "\n", "    ", "if", "norm", "(", "a", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"a is \"", ")", "\n", "print", "(", "a", ")", "\n", "", "if", "norm", "(", "b", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"b is \"", ")", "\n", "print", "(", "b", ")", "\n", "", "return", "dot", "(", "a", ",", "b", ")", "/", "(", "norm", "(", "a", ")", "*", "norm", "(", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.doc_sim.sentence_process": [[130, 144], ["open", "open.write", "range", "open.close", "len", "range", "temp.sort", "len", "doc_sim.cos_sim", "temp.append", "open.write", "str"], "function", ["home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.cos_sim"], ["", "def", "sentence_process", "(", "filename", ",", "gdpr_embeddings", ",", "bdpr_embeddings", ")", ":", "\n", "    ", "w", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "w", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "\"gdpr recital\"", ",", "\"bdpr recital\"", ",", "\"similarity\"", "]", ")", "+", "\"\\n\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gdpr_embeddings", ")", ")", ":", "\n", "        ", "temp", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "bdpr_embeddings", ")", ")", ":", "\n", "#sim = 1 - spatial.distance.cosine(gdpr_embeddings[i], bdpr_embeddings[j])", "\n", "            ", "sim", "=", "cos_sim", "(", "gdpr_embeddings", "[", "i", "]", ",", "bdpr_embeddings", "[", "j", "]", ")", "\n", "temp", ".", "append", "(", "(", "sim", ",", "i", ",", "j", ")", ")", "\n", "", "temp", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "temp", "=", "temp", "[", ":", "30", "]", "\n", "for", "val", "in", "temp", ":", "\n", "            ", "w", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "gdpr_text", "[", "val", "[", "1", "]", "]", ",", "bdpr_text", "[", "val", "[", "2", "]", "]", ",", "str", "(", "val", "[", "0", "]", ")", "]", ")", "+", "\"\\n\"", ")", "\n", "", "", "w", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.doc_sim.article_process": [[145, 166], ["open", "open.write", "open.close", "temp.sort", "numpy.sum", "numpy.sum", "temp.append", "open.write", "scipy.spatial.distance.cosine", "str"], "function", ["None"], ["", "def", "article_process", "(", "filename", ",", "gdpr_article_dic", ",", "bdpr_article_dic", ",", "gdpr_embeddings", ",", "bdpr_embeddings", ")", ":", "\n", "    ", "w", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "w", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "\"gdpr article\"", ",", "\"bdpr article\"", ",", "\"similarity\"", "]", ")", "+", "\"\\n\"", ")", "\n", "for", "key2", "in", "gdpr_article_dic", ":", "\n", "        ", "temp", "=", "[", "]", "\n", "for", "key1", "in", "bdpr_article_dic", ":", "\n", "            ", "b_idx", "=", "bdpr_article_dic", "[", "key1", "]", "\n", "b_texts", "=", "\".\"", ".", "join", "(", "[", "key1", "]", "+", "[", "bdpr_text", "[", "idx", "]", "for", "idx", "in", "b_idx", "]", ")", "\n", "b_sum", "=", "np", ".", "sum", "(", "[", "bdpr_embeddings", "[", "idx", "]", "for", "idx", "in", "b_idx", "]", ",", "0", ")", "\n", "\n", "g_idx", "=", "gdpr_article_dic", "[", "key2", "]", "\n", "g_texts", "=", "\".\"", ".", "join", "(", "[", "key2", "]", "+", "[", "gdpr_text", "[", "idx", "]", "for", "idx", "in", "g_idx", "]", ")", "\n", "g_sum", "=", "np", ".", "sum", "(", "[", "gdpr_embeddings", "[", "idx", "]", "for", "idx", "in", "g_idx", "]", ",", "0", ")", "\n", "\n", "sim", "=", "1", "-", "spatial", ".", "distance", ".", "cosine", "(", "b_sum", ",", "g_sum", ")", "\n", "temp", ".", "append", "(", "(", "sim", ",", "g_texts", ",", "b_texts", ")", ")", "\n", "", "temp", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "temp", "=", "temp", "[", ":", "30", "]", "\n", "for", "val", "in", "temp", ":", "\n", "            ", "w", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "val", "[", "1", "]", ",", "val", "[", "2", "]", ",", "str", "(", "val", "[", "0", "]", ")", "]", ")", "+", "\"\\n\"", ")", "\n", "", "", "w", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.docx2csv.read_docx": [[19, 35], ["docx.Document", "print", "print", "len", "len", "p.text.strip"], "function", ["None"], ["def", "read_docx", "(", "filepath", ")", ":", "\n", "\t", "\"\"\" Read docx file and return all lines of texts\n\t\"\"\"", "\n", "\n", "document", "=", "Document", "(", "filepath", ")", "\n", "\n", "sections", "=", "document", ".", "sections", "\n", "print", "(", "\"Section Size:\"", ",", "len", "(", "sections", ")", ")", "\n", "\n", "paragraphs", "=", "document", ".", "paragraphs", "\n", "print", "(", "\"Paragraphs Size:\"", ",", "len", "(", "paragraphs", ")", ")", "\n", "\n", "# stripe spaces", "\n", "p_lines", "=", "[", "p", ".", "text", ".", "strip", "(", ")", "for", "p", "in", "paragraphs", "]", "\n", "\n", "return", "p_lines", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.docx2csv.extract_gdpr_eu": [[37, 120], ["docx2csv.read_docx", "enumerate", "pandas.DataFrame", "range", "print", "len", "lines[].strip", "lines[].strip.startswith", "lines[].strip.startswith", "lines[].strip.startswith", "len", "chapters.append", "lines[].strip.strip", "tmp_str.strip", "sections.append", "tmp_str.strip", "lines[].strip.strip", "articles.append", "tmp_str.strip", "tmp_str.strip", "lines[].strip.strip", "lines[].strip.strip", "len"], "function", ["home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.docx2csv.read_docx"], ["", "def", "extract_gdpr_eu", "(", "filepath", ":", "str", ")", ":", "\n", "\t", "\"\"\"\tExtract natural language on GDPR European version\n\t\tto smaller components including \"chapter\", \"section\", \"article\" and \"recital\"\n\t\"\"\"", "\n", "\n", "# read docx to lines", "\n", "lines", "=", "read_docx", "(", "filepath", ")", "\n", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "lines", "[", ":", "20", "]", ")", ":", "\n", "\t\t", "print", "(", "f\"Line {idx}: {line}\"", ")", "\n", "\n", "", "chapters", "=", "[", "\"undefined\"", "]", "\n", "articles", "=", "[", "\"undefined\"", "]", "\n", "sections", "=", "[", "\"undefined\"", "]", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "\"chapter\"", ",", "\"section\"", ",", "\"article\"", ",", "\"recital\"", "]", ")", "\n", "\n", "processing_chapter", "=", "False", "\n", "processing_section", "=", "False", "\n", "processing_article", "=", "False", "\n", "# processing_recital = False", "\n", "\n", "tmp_str", "=", "\"\"", "\n", "for", "idx", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "\t\t", "line", "=", "lines", "[", "idx", "]", ".", "strip", "(", ")", "\n", "\n", "if", "line", ".", "startswith", "(", "\"CHAPTER \"", ")", ":", "\n", "# chapters.append(line.strip())", "\n", "\t\t\t", "processing_chapter", "=", "True", "\n", "processing_section", "=", "False", "\n", "processing_article", "=", "False", "\n", "tmp_str", "=", "line", "\n", "\n", "# start new articles and sections", "\n", "articles", "=", "[", "\"undefined\"", "]", "\n", "sections", "=", "[", "\"undefined\"", "]", "\n", "\n", "", "elif", "line", ".", "startswith", "(", "\"Section \"", ")", ":", "\n", "\t\t\t", "processing_chapter", "=", "False", "\n", "processing_section", "=", "True", "\n", "processing_article", "=", "False", "\n", "tmp_str", "=", "line", "\n", "\n", "", "elif", "line", ".", "startswith", "(", "\"Article \"", ")", ":", "\n", "\t\t\t", "processing_chapter", "=", "False", "\n", "processing_section", "=", "False", "\n", "processing_article", "=", "True", "\n", "\n", "", "elif", "len", "(", "line", ")", ":", "\n", "\t\t\t", "if", "processing_chapter", ":", "\n", "\t\t\t\t", "tmp_str", "=", "tmp_str", ".", "strip", "(", ")", "+", "\" \"", "+", "line", ".", "strip", "(", ")", "\n", "", "elif", "processing_section", ":", "\n", "\t\t\t\t", "tmp_str", "=", "tmp_str", ".", "strip", "(", ")", "+", "\" \"", "+", "line", ".", "strip", "(", ")", "\n", "# sections.append(line.strip())", "\n", "", "elif", "processing_article", ":", "\n", "\t\t\t\t", "processing_chapter", "=", "False", "\n", "processing_section", "=", "False", "\n", "processing_article", "=", "False", "\n", "articles", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "row", "=", "[", "chapters", "[", "-", "1", "]", ",", "sections", "[", "-", "1", "]", ",", "articles", "[", "-", "1", "]", ",", "line", ".", "strip", "(", ")", "]", "\n", "df", ".", "loc", "[", "len", "(", "df", ".", "index", ")", "]", "=", "row", "\n", "", "", "else", ":", "# len(line) <= 0", "\n", "\t\t\t", "if", "processing_chapter", ":", "\n", "\t\t\t\t", "processing_chapter", "=", "False", "\n", "processing_section", "=", "False", "\n", "processing_article", "=", "False", "\n", "chapters", ".", "append", "(", "tmp_str", ".", "strip", "(", ")", ")", "\n", "# print(\"Chapter:\", tmp_str.strip())", "\n", "tmp_str", "=", "\"\"", "\n", "", "elif", "processing_section", ":", "\n", "\t\t\t\t", "processing_chapter", "=", "False", "\n", "processing_section", "=", "False", "\n", "processing_article", "=", "False", "\n", "sections", ".", "append", "(", "tmp_str", ".", "strip", "(", ")", ")", "\n", "# print(\"Chapter:\", tmp_str.strip())", "\n", "tmp_str", "=", "\"\"", "\n", "# elif processing_article:", "\n", "# \tprocessing_article = False", "\n", "# \tarticles.append(tmp_str.strip())", "\n", "# \ttmp_str = \"\"", "\n", "\n", "", "", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.docx2csv.extract_gdpr_indian": [[122, 208], ["docx2csv.read_docx", "enumerate", "pandas.DataFrame", "range", "print", "len", "lines[].strip", "re.compile", "re.sub.startswith", "re.compile.match", "re.sub", "len", "chapters.append", "len", "re.compile", "re.sub.strip", "re.compile.match", "chapters.append", "re.compile", "chapters.append", "re.sub.index", "re.sub.strip", "tmp_str.strip", "re.compile.match", "re.sub.strip", "tmp_str.strip", "clauses.append", "tmp_str.strip", "len", "tmp_str.strip", "re.sub.index"], "function", ["home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.docx2csv.read_docx"], ["", "def", "extract_gdpr_indian", "(", "filepath", ":", "str", ",", "start_line", "=", "185", ")", ":", "\n", "\t", "\"\"\"\tExtract natural language on GDPR Indian version\n\t\tto smaller components including \"chapter\", \"clause\", and \"recital\"\n\t\"\"\"", "\n", "\n", "# read docx to lines", "\n", "lines", "=", "read_docx", "(", "filepath", ")", "\n", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "lines", "[", "185", ":", "210", "]", ")", ":", "\n", "\t\t", "print", "(", "f\"Line {idx}: {line}\"", ")", "\n", "\n", "", "chapters", "=", "[", "\"undefined\"", "]", "\n", "clauses", "=", "[", "\"undefined\"", "]", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "\"chapter\"", ",", "\"clause\"", ",", "\"recital\"", "]", ")", "\n", "\n", "processing_chapter", "=", "False", "\n", "processing_clause", "=", "False", "\n", "\n", "tmp_str", "=", "\"\"", "\n", "for", "idx", "in", "range", "(", "start_line", ",", "len", "(", "lines", ")", ")", ":", "\n", "\t\t", "line", "=", "lines", "[", "idx", "]", ".", "strip", "(", ")", "\n", "\n", "# Some lines include line number with indent", "\n", "pattern", "=", "re", ".", "compile", "(", "r\"^\\d+\\t+.+\"", ")", "\n", "if", "pattern", ".", "match", "(", "line", ")", "is", "not", "None", ":", "\n", "\t\t\t", "line", "=", "re", ".", "sub", "(", "r\"\\t+\"", ",", "\"\\t\"", ",", "line", ")", "\n", "line", "=", "line", "[", "line", ".", "index", "(", "\"\\t\"", ")", "+", "1", ":", "]", "\n", "\n", "# Capture the chapter", "\n", "", "if", "line", ".", "startswith", "(", "\"CHAPTER \"", ")", ":", "\n", "\n", "# if chapter name is in the same line", "\n", "\t\t\t", "if", "len", "(", "line", ")", ">", "12", ":", "\n", "\t\t\t\t", "processing_chapter", "=", "False", "\n", "processing_clause", "=", "False", "\n", "chapters", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "tmp_str", "=", "\"\"", "\n", "\n", "# if chapter name is in the next line", "\n", "", "else", ":", "\n", "\t\t\t\t", "processing_chapter", "=", "True", "\n", "processing_clause", "=", "False", "\n", "tmp_str", "=", "line", "\n", "\n", "# start new clause", "\n", "", "clause", "=", "[", "\"undefined\"", "]", "\n", "\n", "", "elif", "len", "(", "line", ")", ">", "5", ":", "\n", "\n", "# some special exception", "\n", "# e.g. 53 of 2005.", "\n", "\t\t\t", "pattern", "=", "re", ".", "compile", "(", "r'^\\d+ of \\d+\\.( \\d+)?$'", ")", "\n", "if", "pattern", ".", "match", "(", "line", ")", "is", "not", "None", ":", "\n", "\t\t\t\t", "continue", "\n", "\n", "# add chapter name to the chapter list", "\n", "", "if", "processing_chapter", ":", "\n", "\t\t\t\t", "tmp_str", "=", "tmp_str", ".", "strip", "(", ")", "+", "\" \"", "+", "line", ".", "strip", "(", ")", "\n", "processing_chapter", "=", "False", "\n", "processing_clause", "=", "False", "\n", "chapters", ".", "append", "(", "tmp_str", ".", "strip", "(", ")", ")", "\n", "tmp_str", "=", "\"\"", "\n", "\n", "# add recital to dataframe", "\n", "", "else", ":", "\n", "# some exceptions", "\n", "\t\t\t\t", "pattern", "=", "re", ".", "compile", "(", "r\"^\\d+ .+$\"", ")", "\n", "if", "pattern", ".", "match", "(", "line", ")", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "line", "=", "line", "[", "line", ".", "index", "(", "\" \"", ")", "+", "1", ":", "]", "\n", "\n", "", "row", "=", "[", "chapters", "[", "-", "1", "]", ",", "clauses", "[", "-", "1", "]", ",", "line", ".", "strip", "(", ")", "]", "\n", "df", ".", "loc", "[", "len", "(", "df", ".", "index", ")", "]", "=", "row", "\n", "", "", "else", ":", "# len(line) <= 0", "\n", "\t\t\t", "if", "processing_chapter", ":", "\n", "\t\t\t\t", "processing_chapter", "=", "False", "\n", "processing_clause", "=", "False", "\n", "chapters", ".", "append", "(", "tmp_str", ".", "strip", "(", ")", ")", "\n", "tmp_str", "=", "\"\"", "\n", "", "elif", "processing_clause", ":", "\n", "\t\t\t\t", "processing_chapter", "=", "False", "\n", "processing_clause", "=", "False", "\n", "clauses", ".", "append", "(", "tmp_str", ".", "strip", "(", ")", ")", "\n", "tmp_str", "=", "\"\"", "\n", "\n", "", "", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.docx2csv.extract_gdpr_espn": [[210, 302], ["docx2csv.read_docx", "pandas.DataFrame", "range", "len", "lines[].strip", "lines[].strip.startswith", "lines[].strip.startswith", "lines[].strip.startswith", "chapters.append", "articles.append", "len", "tmp_str.strip", "sections.append", "lines[].strip.strip", "tmp_str.strip", "chapters.append", "lines[].strip.strip", "tmp_str.strip", "sections.append", "tmp_str.strip", "lines[].strip.strip", "lines[].strip.strip", "tmp_str.strip", "tmp_str.strip", "len"], "function", ["home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.docx2csv.read_docx"], ["", "def", "extract_gdpr_espn", "(", "filepath", ":", "str", ",", "start_line", "=", "None", ")", ":", "\n", "\t", "\"\"\"\tExtract natural language on LGPD Spanish version\n\t\tto smaller components including \"chapter\", \"section\", \"article\" and \"recital\"\n\t\"\"\"", "\n", "\n", "# read docx to lines", "\n", "lines", "=", "read_docx", "(", "filepath", ")", "\n", "\n", "# for idx, line in enumerate(lines[:20]):", "\n", "# \tprint(f\"Line {idx}: {line}\")", "\n", "\n", "chapters", "=", "[", "\"undefined\"", "]", "\n", "articles", "=", "[", "\"undefined\"", "]", "\n", "sections", "=", "[", "\"undefined\"", "]", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "\"chapter\"", ",", "\"section\"", ",", "\"article\"", ",", "\"recital\"", "]", ")", "\n", "\n", "processing_chapter", "=", "False", "\n", "processing_section", "=", "False", "\n", "processing_article", "=", "False", "\n", "# processing_recital = False", "\n", "\n", "tmp_str", "=", "\"\"", "\n", "for", "idx", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "\t\t", "line", "=", "lines", "[", "idx", "]", ".", "strip", "(", ")", "\n", "\n", "if", "line", ".", "startswith", "(", "\"CHAPTER \"", ")", ":", "\n", "# chapters.append(line.strip())", "\n", "\t\t\t", "processing_chapter", "=", "True", "\n", "processing_section", "=", "False", "\n", "processing_article", "=", "False", "\n", "tmp_str", "=", "line", "\n", "\n", "# start new articles and sections", "\n", "articles", "=", "[", "\"undefined\"", "]", "\n", "sections", "=", "[", "\"undefined\"", "]", "\n", "\n", "", "elif", "line", ".", "startswith", "(", "\"Section \"", ")", ":", "\n", "\t\t\t", "if", "processing_chapter", ":", "\n", "\t\t\t\t", "chapters", ".", "append", "(", "tmp_str", ".", "strip", "(", ")", ")", "\n", "tmp_str", "=", "\"\"", "\n", "\n", "", "processing_chapter", "=", "False", "\n", "processing_section", "=", "True", "\n", "processing_article", "=", "False", "\n", "tmp_str", "=", "line", "\n", "\n", "", "elif", "line", ".", "startswith", "(", "\"Art. \"", ")", ":", "\n", "\t\t\t", "if", "processing_section", ":", "\n", "\t\t\t\t", "sections", ".", "append", "(", "tmp_str", ".", "strip", "(", ")", ")", "\n", "tmp_str", "=", "\"\"", "\n", "\n", "", "processing_chapter", "=", "False", "\n", "processing_section", "=", "False", "\n", "processing_article", "=", "True", "\n", "articles", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "\n", "", "elif", "len", "(", "line", ")", ":", "\n", "\t\t\t", "if", "processing_chapter", ":", "\n", "\t\t\t\t", "tmp_str", "=", "tmp_str", ".", "strip", "(", ")", "+", "\" \"", "+", "line", ".", "strip", "(", ")", "\n", "", "elif", "processing_section", ":", "\n", "\t\t\t\t", "tmp_str", "=", "tmp_str", ".", "strip", "(", ")", "+", "\" \"", "+", "line", ".", "strip", "(", ")", "\n", "# sections.append(line.strip())", "\n", "# elif processing_article:", "\n", "# \tprocessing_chapter = False", "\n", "# \tprocessing_section = False", "\n", "# \tprocessing_article = False", "\n", "# \tarticles.append(line.strip())", "\n", "", "else", ":", "\n", "\t\t\t\t", "row", "=", "[", "chapters", "[", "-", "1", "]", ",", "sections", "[", "-", "1", "]", ",", "articles", "[", "-", "1", "]", ",", "line", ".", "strip", "(", ")", "]", "\n", "df", ".", "loc", "[", "len", "(", "df", ".", "index", ")", "]", "=", "row", "\n", "", "", "else", ":", "# len(line) <= 0", "\n", "\t\t\t", "if", "processing_chapter", ":", "\n", "\t\t\t\t", "processing_chapter", "=", "False", "\n", "processing_section", "=", "False", "\n", "processing_article", "=", "False", "\n", "chapters", ".", "append", "(", "tmp_str", ".", "strip", "(", ")", ")", "\n", "# print(\"Chapter:\", tmp_str.strip())", "\n", "tmp_str", "=", "\"\"", "\n", "", "elif", "processing_section", ":", "\n", "\t\t\t\t", "processing_chapter", "=", "False", "\n", "processing_section", "=", "False", "\n", "processing_article", "=", "False", "\n", "sections", ".", "append", "(", "tmp_str", ".", "strip", "(", ")", ")", "\n", "# print(\"Chapter:\", tmp_str.strip())", "\n", "tmp_str", "=", "\"\"", "\n", "# elif processing_article:", "\n", "# \tprocessing_article = False", "\n", "# \tarticles.append(tmp_str.strip())", "\n", "# \ttmp_str = \"\"", "\n", "\n", "", "", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.docx2csv.main": [[304, 321], ["docx2csv.extract_gdpr_espn", "extract_gdpr_espn.to_csv"], "function", ["home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.docx2csv.extract_gdpr_espn"], ["", "def", "main", "(", ")", ":", "\n", "# filepath = \"GDPR-EN-Europe-converted.docx\"", "\n", "# filepath = \"GDPR-EN-Indian-converted.docx\"", "\n", "\t", "filepath", "=", "\"LGPD-ES-Brazil-converted.docx\"", "\n", "# target_filepath = \"GDPR-EN-Europe-converted.csv\"", "\n", "# target_filepath = \"GDPR-EN-Indian-converted.csv\"", "\n", "target_filepath", "=", "\"LGPD-ES-Brazil-converted.csv\"", "\n", "\n", "# df = extract_gdpr_eu(filepath)", "\n", "# df = extract_gdpr_indian(filepath)", "\n", "df", "=", "extract_gdpr_espn", "(", "filepath", ")", "\n", "\n", "# print(\"Dataframe Size:\", df.shape)", "\n", "# print(df.head(30))", "\n", "\n", "# Write to file", "\n", "df", ".", "to_csv", "(", "target_filepath", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.load_bert_model": [[36, 44], ["sentence_transformers.models.Transformer", "sentence_transformers.models.Pooling", "sentence_transformers.SentenceTransformer", "models.Transformer.get_word_embedding_dimension"], "function", ["None"], ["", "def", "load_bert_model", "(", "path", ")", ":", "\n", "    ", "word_embedding_model", "=", "models", ".", "Transformer", "(", "path", ")", "\n", "pooling_model", "=", "models", ".", "Pooling", "(", "word_embedding_model", ".", "get_word_embedding_dimension", "(", ")", ",", "\n", "pooling_mode_mean_tokens", "=", "True", ",", "\n", "pooling_mode_cls_token", "=", "False", ",", "\n", "pooling_mode_max_tokens", "=", "False", ")", "\n", "\n", "return", "SentenceTransformer", "(", "modules", "=", "[", "word_embedding_model", ",", "pooling_model", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.elu_dist": [[45, 47], ["numpy.sqrt", "numpy.sum"], "function", ["None"], ["", "def", "elu_dist", "(", "x", ",", "y", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "x", "-", "y", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.load_glove_vectors": [[48, 56], ["open", "line.split", "float"], "function", ["None"], ["", "def", "load_glove_vectors", "(", "glove_file", "=", "\"/home/yaguang/pretrained_models/glove.6B.50d.txt\"", ")", ":", "\n", "    ", "\"\"\"Load the glove word vectors\"\"\"", "\n", "word_vectors", "=", "{", "}", "\n", "with", "open", "(", "glove_file", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "split", "=", "line", ".", "split", "(", ")", "\n", "word_vectors", "[", "split", "[", "0", "]", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "split", "[", "1", ":", "]", "]", "\n", "", "", "return", "word_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.load_fasttext_vectors": [[57, 66], ["open", "f.readline", "line.split", "float"], "function", ["None"], ["", "def", "load_fasttext_vectors", "(", "ft_file", "=", "\"/home/yaguang/pretrained_models/wiki-news-300d-1M.vec\"", ")", ":", "\n", "    ", "\"\"\"Load the fasttext vectors\"\"\"", "\n", "word_vectors", "=", "{", "}", "\n", "with", "open", "(", "ft_file", ")", "as", "f", ":", "\n", "        ", "f", ".", "readline", "(", ")", "\n", "for", "line", "in", "f", ":", "\n", "            ", "split", "=", "line", ".", "split", "(", ")", "\n", "word_vectors", "[", "split", "[", "0", "]", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "split", "[", "1", ":", "]", "]", "\n", "", "", "return", "word_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.filter_tokens": [[67, 79], ["set", "nltk.tokenize.word_tokenize", "t.strip().lower.strip().lower", "tmp.append", "t.strip().lower.strip"], "function", ["None"], ["", "def", "filter_tokens", "(", "sentence", ")", ":", "\n", "    ", "tmp", "=", "[", "]", "\n", "exclude", "=", "set", "(", "string", ".", "punctuation", ")", "\n", "for", "t", "in", "word_tokenize", "(", "sentence", ")", ":", "\n", "        ", "t", "=", "t", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "t", "=", "''", ".", "join", "(", "ch", "for", "ch", "in", "t", "if", "ch", "not", "in", "exclude", ")", "\n", "if", "not", "t", ":", "\n", "            ", "continue", "\n", "#if t in stop_words:", "\n", "#   continue", "\n", "", "tmp", ".", "append", "(", "t", ")", "\n", "", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.get_word_embedding": [[80, 82], ["list", "numpy.random.uniform"], "function", ["None"], ["", "def", "get_word_embedding", "(", "word", ",", "emb_size", ",", "model", ")", ":", "\n", "    ", "return", "model", "[", "word", "]", "if", "word", "in", "model", "else", "list", "(", "np", ".", "random", ".", "uniform", "(", "-", "0.25", ",", "0.25", ",", "emb_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.get_bert_embeddings": [[83, 86], ["model.encode().tolist", "model.encode"], "function", ["None"], ["", "def", "get_bert_embeddings", "(", "sentences", ",", "model", ")", ":", "\n", "    ", "sentence_embeddings", "=", "model", ".", "encode", "(", "sentences", ")", ".", "tolist", "(", ")", "\n", "return", "sentence_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.tokens_to_embeddings": [[87, 94], ["numpy.sum", "numpy.mean", "other_sim.get_word_embedding", "other_sim.get_word_embedding"], "function", ["home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.get_word_embedding", "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.get_word_embedding"], ["", "def", "tokens_to_embeddings", "(", "tokens", ",", "model", ")", ":", "\n", "    ", "if", "embedding_method", "==", "EmbeddingMethod", ".", "glove", ":", "\n", "#return np.mean([get_word_embedding(token, 50, model) for token in tokens], 0)", "\n", "        ", "return", "np", ".", "sum", "(", "[", "get_word_embedding", "(", "token", ",", "50", ",", "model", ")", "for", "token", "in", "tokens", "]", ",", "0", ")", "\n", "\n", "", "if", "embedding_method", "==", "EmbeddingMethod", ".", "fasttext", ":", "\n", "        ", "return", "np", ".", "mean", "(", "[", "get_word_embedding", "(", "token", ",", "300", ",", "model", ")", "for", "token", "in", "tokens", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.get_embeddings": [[95, 116], ["pandas.read_csv().drop_duplicates", "df[].str.lower", "pd.read_csv().drop_duplicates.iterrows", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "other_sim.filter_tokens", "recitals.append", "pandas.read_csv", "article_dic[].append", "len"], "function", ["home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.filter_tokens"], ["", "", "def", "get_embeddings", "(", "filename", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "filename", ")", ".", "drop_duplicates", "(", ")", "\n", "chapter_dic", ",", "section_dic", ",", "article_dic", "=", "collections", ".", "defaultdict", "(", "list", ")", ",", "collections", ".", "defaultdict", "(", "list", ")", ",", "collections", ".", "defaultdict", "(", "list", ")", "\n", "recitals", "=", "[", "]", "\n", "texts", "=", "[", "]", "\n", "count", "=", "0", "\n", "df", "[", "'recital'", "]", "=", "df", "[", "'recital'", "]", ".", "str", ".", "lower", "(", ")", "\n", "for", "index", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "chapter", ",", "section", ",", "article", ",", "recital", "=", "row", "[", "'chapter'", "]", ",", "row", "[", "'section'", "]", ",", "row", "[", "'article'", "]", ",", "row", "[", "'recital'", "]", "\n", "if", "not", "recital", ":", "\n", "            ", "continue", "\n", "", "if", "recital", "==", "\"undefined\"", ":", "\n", "            ", "continue", "\n", "", "if", "article", "!=", "\"undefined\"", ":", "\n", "            ", "article_dic", "[", "article", "]", ".", "append", "(", "count", ")", "\n", "", "tokens", "=", "filter_tokens", "(", "recital", ")", "\n", "if", "len", "(", "tokens", ")", "<=", "1", ":", "\n", "            ", "continue", "\n", "", "recitals", ".", "append", "(", "recital", ")", "\n", "count", "+=", "1", "\n", "", "return", "article_dic", ",", "recitals", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.cos_sim": [[117, 125], ["numpy.linalg.norm", "print", "print", "numpy.linalg.norm", "print", "print", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "cos_sim", "(", "a", ",", "b", ")", ":", "\n", "    ", "if", "norm", "(", "a", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"a is \"", ")", "\n", "print", "(", "a", ")", "\n", "", "if", "norm", "(", "b", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"b is \"", ")", "\n", "print", "(", "b", ")", "\n", "", "return", "dot", "(", "a", ",", "b", ")", "/", "(", "norm", "(", "a", ")", "*", "norm", "(", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.sentence_process": [[126, 140], ["open", "open.write", "range", "open.close", "len", "range", "temp.sort", "len", "other_sim.cos_sim", "temp.append", "open.write", "str"], "function", ["home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.cos_sim"], ["", "def", "sentence_process", "(", "filename", ",", "gdpr_embeddings", ",", "bdpr_embeddings", ")", ":", "\n", "    ", "w", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "w", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "\"gdpr recital\"", ",", "\"bdpr recital\"", ",", "\"similarity\"", "]", ")", "+", "\"\\n\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gdpr_embeddings", ")", ")", ":", "\n", "        ", "temp", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "bdpr_embeddings", ")", ")", ":", "\n", "#sim = 1 - spatial.distance.cosine(gdpr_embeddings[i], bdpr_embeddings[j])", "\n", "            ", "sim", "=", "cos_sim", "(", "gdpr_embeddings", "[", "i", "]", ",", "bdpr_embeddings", "[", "j", "]", ")", "\n", "temp", ".", "append", "(", "(", "sim", ",", "i", ",", "j", ")", ")", "\n", "", "temp", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "temp", "=", "temp", "[", ":", "30", "]", "\n", "for", "val", "in", "temp", ":", "\n", "            ", "w", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "gdpr_text", "[", "val", "[", "1", "]", "]", ",", "bdpr_text", "[", "val", "[", "2", "]", "]", ",", "str", "(", "val", "[", "0", "]", ")", "]", ")", "+", "\"\\n\"", ")", "\n", "", "", "w", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.other_sim.article_process": [[141, 162], ["open", "open.write", "open.close", "temp.sort", "numpy.sum", "numpy.sum", "temp.append", "open.write", "scipy.spatial.distance.cosine", "str"], "function", ["None"], ["", "def", "article_process", "(", "filename", ",", "gdpr_article_dic", ",", "bdpr_article_dic", ",", "gdpr_embeddings", ",", "bdpr_embeddings", ")", ":", "\n", "    ", "w", "=", "open", "(", "filename", ",", "'w'", ")", "\n", "w", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "\"gdpr article\"", ",", "\"bdpr article\"", ",", "\"similarity\"", "]", ")", "+", "\"\\n\"", ")", "\n", "for", "key2", "in", "gdpr_article_dic", ":", "\n", "        ", "temp", "=", "[", "]", "\n", "for", "key1", "in", "bdpr_article_dic", ":", "\n", "            ", "b_idx", "=", "bdpr_article_dic", "[", "key1", "]", "\n", "b_texts", "=", "\".\"", ".", "join", "(", "[", "key1", "]", "+", "[", "bdpr_text", "[", "idx", "]", "for", "idx", "in", "b_idx", "]", ")", "\n", "b_sum", "=", "np", ".", "sum", "(", "[", "bdpr_embeddings", "[", "idx", "]", "for", "idx", "in", "b_idx", "]", ",", "0", ")", "\n", "\n", "g_idx", "=", "gdpr_article_dic", "[", "key2", "]", "\n", "g_texts", "=", "\".\"", ".", "join", "(", "[", "key2", "]", "+", "[", "gdpr_text", "[", "idx", "]", "for", "idx", "in", "g_idx", "]", ")", "\n", "g_sum", "=", "np", ".", "sum", "(", "[", "gdpr_embeddings", "[", "idx", "]", "for", "idx", "in", "g_idx", "]", ",", "0", ")", "\n", "\n", "sim", "=", "1", "-", "spatial", ".", "distance", ".", "cosine", "(", "b_sum", ",", "g_sum", ")", "\n", "temp", ".", "append", "(", "(", "sim", ",", "g_texts", ",", "b_texts", ")", ")", "\n", "", "temp", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "temp", "=", "temp", "[", ":", "30", "]", "\n", "for", "val", "in", "temp", ":", "\n", "            ", "w", ".", "write", "(", "\"\\t\"", ".", "join", "(", "[", "val", "[", "1", "]", ",", "val", "[", "2", "]", ",", "str", "(", "val", "[", "0", "]", ")", "]", ")", "+", "\"\\n\"", ")", "\n", "", "", "w", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.get_top_k_each_article.main": [[18, 34], ["pandas.read_csv", "print", "print", "pd.read_csv.groupby().head().reset_index", "df.groupby().head().reset_index.to_csv", "pd.read_csv.groupby().head", "pd.read_csv.groupby"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\t", "k", "=", "1", "\n", "\n", "for", "method", "in", "[", "\"tfidf\"", ",", "\"glove\"", ",", "\"bert\"", ",", "\"siamese\"", "]", ":", "\n", "\t\t", "input_filepath", "=", "\"data/simi_article_{}.csv\"", ".", "format", "(", "method", ")", "\n", "output_filepath", "=", "\"top_k_each_article/simi_article_{}_top{}.csv\"", ".", "format", "(", "method", ",", "k", ")", "\n", "\n", "df", "=", "pd", ".", "read_csv", "(", "input_filepath", ",", "sep", "=", "\"~\"", ")", "\n", "print", "(", "f\"Columns: {df.columns}\"", ")", "\n", "print", "(", "f\"There are {df.shape} pairs.\"", ")", "\n", "\n", "# Get top K of each article", "\n", "df_top_k", "=", "df", ".", "groupby", "(", "'gdpr article'", ")", ".", "head", "(", "k", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "# Write to file", "\n", "df_top_k", ".", "to_csv", "(", "output_filepath", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kornosk_GDPR-similarity-comparison.src.get_top_k_each_recital.main": [[18, 34], ["pandas.read_csv", "print", "print", "pd.read_csv.groupby().head().reset_index", "df.groupby().head().reset_index.to_csv", "pd.read_csv.groupby().head", "pd.read_csv.groupby"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "\t", "k", "=", "1", "\n", "\n", "for", "method", "in", "[", "\"tfidf\"", ",", "\"glove\"", ",", "\"bert\"", ",", "\"siamese\"", "]", ":", "\n", "\t\t", "input_filepath", "=", "\"data/simi_sentence_{}.csv\"", ".", "format", "(", "method", ")", "\n", "output_filepath", "=", "\"top_k_each_sentence/simi_sentence_{}_top{}.csv\"", ".", "format", "(", "method", ",", "k", ")", "\n", "\n", "df", "=", "pd", ".", "read_csv", "(", "input_filepath", ",", "sep", "=", "\"~\"", ")", "\n", "print", "(", "f\"Columns: {df.columns}\"", ")", "\n", "print", "(", "f\"There are {df.shape} pairs.\"", ")", "\n", "\n", "# Get top K of each recital", "\n", "df_top_k", "=", "df", ".", "groupby", "(", "'gdpr recital'", ")", ".", "head", "(", "k", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "# Write to file", "\n", "df_top_k", ".", "to_csv", "(", "output_filepath", ",", "index", "=", "False", ")", "\n", "\n"]]}