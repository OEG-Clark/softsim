{"home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.dotted_tree.escape_node_name": [[13, 16], ["node_name.replace().replace", "node_name.replace"], "function", ["None"], ["def", "escape_node_name", "(", "node_name", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"Escapes any special characters in an ontology node name\"\"\"", "\n", "return", "node_name", ".", "replace", "(", "r\"|\"", ",", "r\"\\|\"", ")", ".", "replace", "(", "r\".\"", ",", "r\"\\.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.dotted_tree.unescape_node_name": [[18, 21], ["node_name.replace().replace", "node_name.replace"], "function", ["None"], ["", "def", "unescape_node_name", "(", "node_name", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"Unescapes any special characters in an ontology node name\"\"\"", "\n", "return", "node_name", ".", "replace", "(", "r\"\\|\"", ",", "r\"|\"", ")", ".", "replace", "(", "r\"\\.\"", ",", "r\".\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.dotted_tree.format_node_helper": [[23, 42], ["len", "len", "format_node_name_fn"], "function", ["None"], ["", "def", "format_node_helper", "(", "\n", "path", ":", "List", "[", "TreeNode", "]", ",", "indent_level", ":", "int", ",", "num_unprinted", ":", "int", ",", "format_node_name_fn", ":", "Callable", "\n", ")", "->", "str", ":", "\n", "    ", "\"\"\"Node formatting helper for `pretty_print_tree`\n    Formats a tree path, appropriately indented and already printed prefix omitted.\n    Args:\n        path: list of `TreeNode`s in path\n        indent_level: indentation level. The number of whitespaces\n                      is usually a mulple of this\n        num_unprinted: number of path elements not already printed as a suffix\n        format_node_name_fn: function called to format node name\n    \"\"\"", "\n", "msg", "=", "\" \"", "*", "(", "4", "*", "indent_level", ")", "\n", "unprinted", "=", "path", "[", "-", "num_unprinted", ":", "]", "\n", "if", "len", "(", "unprinted", ")", "!=", "len", "(", "path", ")", ":", "\n", "        ", "msg", "+=", "\".\"", "\n", "\n", "", "msg", "+=", "\".\"", ".", "join", "(", "[", "format_node_name_fn", "(", "node", ")", "for", "node", "in", "unprinted", "]", ")", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.dotted_tree.default_format_node": [[44, 54], ["dotted_tree.format_node_helper", "dotted_tree.escape_node_name", "str"], "function", ["home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.dotted_tree.format_node_helper", "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.dotted_tree.escape_node_name"], ["", "def", "default_format_node", "(", "path", ":", "List", "[", "TreeNode", "]", ",", "indent_level", ":", "int", ",", "num_unprinted", ":", "int", ")", "->", "str", ":", "\n", "    ", "\"\"\"Default node formatter for `pretty_print_tree`\n    Delegates to `format_node_helper`, using the node name\n    without any further formatting.\n    \"\"\"", "\n", "\n", "def", "format_name", "(", "node", ")", ":", "\n", "        ", "return", "escape_node_name", "(", "str", "(", "node", ".", "name", ")", ")", "\n", "\n", "", "return", "format_node_helper", "(", "path", ",", "indent_level", ",", "num_unprinted", ",", "format_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.dotted_tree.pretty_print_tree": [[56, 86], ["dotted_tree.pretty_print_tree.go"], "function", ["None"], ["", "def", "pretty_print_tree", "(", "\n", "root_node", ":", "TreeNode", ",", "format_node_fn", ":", "Callable", "=", "default_format_node", ",", "sort_key", ":", "Callable", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"Transforms a boring data structure into a stunning string*\n    *: Depends on your choice of formatting function\n    Args:\n        root_node: root `TreeNode`\n        format_node_fn: node formatter, default is `default_format_node`\n        sort_key: key function to customize the sort order, default is None\n    Return:\n        a pretty string\n    \"\"\"", "\n", "lines", "=", "[", "]", "\n", "\n", "def", "go", "(", "node", ",", "prefix", ",", "prefix_num_unprinted", ",", "indent", ")", ":", "\n", "# global msg", "\n", "        ", "path", "=", "prefix", "+", "[", "node", "]", "\n", "num_unprinted", "=", "prefix_num_unprinted", "+", "1", "\n", "new_indent", "=", "indent", "\n", "\n", "if", "len", "(", "node", ".", "children", ")", "!=", "1", ":", "\n", "            ", "lines", ".", "append", "(", "format_node_fn", "(", "path", ",", "indent", ",", "num_unprinted", ")", ")", "\n", "new_indent", "=", "indent", "+", "1", "\n", "num_unprinted", "=", "0", "\n", "\n", "", "for", "child_name", "in", "sorted", "(", "node", ".", "children", ".", "keys", "(", ")", ",", "key", "=", "sort_key", ")", ":", "\n", "            ", "go", "(", "node", ".", "children", "[", "child_name", "]", ",", "path", ",", "num_unprinted", ",", "new_indent", ")", "\n", "\n", "", "", "go", "(", "root_node", ",", "[", "]", ",", "0", ",", "0", ")", "\n", "return", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.dotted_tree.debug_print": [[88, 111], ["open", "enumerate", "f.readlines", "json.loads", "print", "enumerate", "print", "print", "print", "dotted_tree.pretty_print_tree", "print", "dotted_tree.pretty_print_tree", "print", "print", "tree.TreeNode.from_dict", "tree.TreeNode.from_dict", "das.append", "dotted_tree.pretty_print_tree", "tree.TreeNode.from_dict"], "function", ["home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.dotted_tree.pretty_print_tree", "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.dotted_tree.pretty_print_tree", "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.from_dict", "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.from_dict", "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.dotted_tree.pretty_print_tree", "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.from_dict"], ["", "def", "debug_print", "(", "input_f", ":", "str", ",", "limit", ":", "int", "=", "50", ")", "->", "None", ":", "\n", "    ", "with", "open", "(", "input_f", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "lid", ",", "line", "in", "enumerate", "(", "f", ".", "readlines", "(", ")", ")", ":", "\n", "            ", "if", "lid", ">=", "limit", ":", "\n", "                ", "break", "\n", "", "data", "=", "json", ".", "loads", "(", "line", ")", "\n", "print", "(", "f\"********Conversation {lid+1}********\"", ")", "\n", "for", "tid", ",", "turn", "in", "enumerate", "(", "data", "[", "\"turns\"", "]", ")", ":", "\n", "                ", "print", "(", "f\"***Turn {tid}***\"", ")", "\n", "utterance", "=", "turn", "[", "\"utterance\"", "]", "\n", "print", "(", "f\"Utterance: {utterance}\"", ")", "\n", "if", "tid", ">", "0", ":", "\n", "                    ", "input_ds", "=", "pretty_print_tree", "(", "TreeNode", ".", "from_dict", "(", "turn", "[", "\"input_dialog_state\"", "]", ")", ")", "\n", "print", "(", "f\"Last dialog state:\\n{input_ds}\\n\"", ")", "\n", "input_das", "=", "turn", "[", "\"input_system_acts\"", "]", "\n", "das", "=", "[", "]", "\n", "for", "da", "in", "input_das", ":", "\n", "                        ", "das", ".", "append", "(", "pretty_print_tree", "(", "TreeNode", ".", "from_dict", "(", "da", "[", "\"paths\"", "]", ")", ")", ")", "\n", "", "das", "=", "\"\\n\"", ".", "join", "(", "das", ")", "\n", "print", "(", "f\"Last system acts:\\n{das}\\n\"", ")", "\n", "", "target_ds", "=", "pretty_print_tree", "(", "TreeNode", ".", "from_dict", "(", "turn", "[", "\"target_dialog_state\"", "]", ")", ")", "\n", "print", "(", "f\"Target dialog state:\\n{target_ds}\\n\"", ")", "\n", "", "print", "(", "\"********End of Conversation********\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.dotted_tree.main": [[113, 119], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "dotted_tree.debug_print"], "function", ["home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.dotted_tree.debug_print"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"input_file\"", ",", "type", "=", "Path", ")", "\n", "parser", ".", "add_argument", "(", "\"--limit\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "debug_print", "(", "args", ".", "input_file", ",", "args", ".", "limit", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.__init__": [[26, 43], ["tree.TreeNode._children_to_map"], "methods", ["home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode._children_to_map"], ["def", "__init__", "(", "\n", "self", ":", "SelfType", ",", "name", ":", "NodeName", ",", "child_list_or_map", ":", "Union", "[", "List", ",", "Dict", "]", "=", "None", ",", "data", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Constructor\n        Args:\n            name: name of node\n            child_list_or_map: children of this node. Can be given as a list\n                               of `TreeNode`s, or a dictionary where the values\n                               are `TreeNode`s, and the keys are the associated\n                               node names. Optional\n            data: optional dict of additional data (if representing a protobuf\n                  node, the keys should correspond to attributes). Will be\n                  initialised as an empty dictionary if not given\n        \"\"\"", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "children", "=", "self", ".", "_children_to_map", "(", "child_list_or_map", ")", "\n", "self", ".", "data", "=", "{", "}", "if", "data", "is", "None", "else", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode._children_to_map": [[44, 54], ["isinstance", "dict"], "methods", ["None"], ["", "def", "_children_to_map", "(", "self", ",", "children", ":", "Union", "[", "List", ",", "None", ",", "Dict", "]", ")", "->", "Dict", ":", "\n", "        ", "\"\"\"If the children are given in a list this method\n        converts them into a dict\"\"\"", "\n", "\n", "if", "isinstance", "(", "children", ",", "list", ")", ":", "\n", "            ", "return", "dict", "(", "(", "child", ".", "name", ",", "child", ")", "for", "child", "in", "children", ")", "\n", "", "elif", "children", "is", "None", ":", "\n", "            ", "return", "{", "}", "\n", "", "else", ":", "\n", "            ", "return", "children", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.to_dict": [[55, 76], ["tree.TreeNode.to_dict.go"], "methods", ["None"], ["", "", "def", "to_dict", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "\"\"\"Converts a TreeNode into a dict\n        Return:\n            A nested dictionary structure representing the tree. For example :\n            {'name' : 'Root',\n             'children' : [ {\n                                'name' : 'calendar'\n                                'children' : [ ... ]\n                            },\n                            {\n                                'name' : 'dialog'\n                                'children' : [ .... ]\n                            }]\n            }\n        \"\"\"", "\n", "\n", "def", "go", "(", "node", ")", ":", "\n", "            ", "children", "=", "[", "go", "(", "child", ")", "for", "child_name", ",", "child", "in", "node", ".", "children", ".", "items", "(", ")", "]", "\n", "return", "{", "\"name\"", ":", "node", ".", "name", ",", "\"children\"", ":", "children", "}", "\n", "\n", "", "return", "go", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.from_dict": [[77, 93], ["tree.TreeNode.to_dict.go"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "tree_dict", ":", "Dict", ")", "->", "\"TreeNode\"", ":", "\n", "        ", "\"\"\"Build a tree from a nested dictionary structure\n        Args:\n            tree_dict: nested dictionary, for example\n            those produced by the to_dict method\n        Return:\n            a root TreeNode\n        \"\"\"", "\n", "\n", "def", "go", "(", "d", ")", ":", "\n", "            ", "children", "=", "[", "go", "(", "child", ")", "for", "child", "in", "d", "[", "\"children\"", "]", "]", "\n", "data", "=", "dict", "(", "d", "[", "\"data\"", "]", ")", "if", "\"data\"", "in", "d", "else", "None", "\n", "return", "cls", "(", "d", "[", "\"name\"", "]", ",", "children", ",", "data", "=", "data", ")", "\n", "\n", "", "return", "go", "(", "tree_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.descendants": [[94, 106], ["itertools.chain.from_iterable", "child.descendants", "tree.TreeNode.children.items"], "methods", ["home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.descendants"], ["", "def", "descendants", "(", "self", ":", "SelfType", ",", "include_self", "=", "False", ")", "->", "Iterable", "[", "SelfType", "]", ":", "\n", "        ", "\"\"\"Yield the descendants of this node\n        Args:\n            include_self: include current node as a descendant.\n                          Defaults to `False`.\n        Return:\n            a generator for the descendant nodes\n        \"\"\"", "\n", "if", "include_self", ":", "\n", "            ", "yield", "(", "self", ")", "\n", "", "yield", "from", "chain", ".", "from_iterable", "(", "\n", "child", ".", "descendants", "(", "include_self", "=", "True", ")", "for", "child_name", ",", "child", "in", "self", ".", "children", ".", "items", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.dfs": [[108, 129], ["itertools.chain.from_iterable", "child.dfs", "tree.TreeNode.children.values"], "methods", ["home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.dfs"], ["", "def", "dfs", "(", "self", ",", "prefix", ":", "List", "=", "None", ",", "include_self", ":", "bool", "=", "False", ")", "->", "Iterable", "[", "List", "]", ":", "\n", "        ", "\"\"\"Yield paths for descendants of this node\n         as discovered in depth-first search (DFS).\n        Path for a node is a list of TreeNode instances leading up to the node.\n        The first element of the list is the TreeNode that `dfs` was invoked on\n        and the last element is the node itself.\n        For efficiency reasons the same list object is reused for the\n        path in all yielded pairs. To preserve it a copy will need to be made.\n        Args:\n            include_self: include current node as a descendant.\n                          Defaults to `False`.\n            prefix: the nodes that have occurred before the current node\n        Return:\n            a generator for the descendent paths\n        \"\"\"", "\n", "\n", "p", "=", "prefix", "if", "prefix", "else", "[", "]", "\n", "if", "include_self", ":", "\n", "            ", "yield", "p", "+", "[", "self", "]", "\n", "", "yield", "from", "chain", ".", "from_iterable", "(", "\n", "child", ".", "dfs", "(", "prefix", "=", "p", "+", "[", "self", "]", ",", "include_self", "=", "True", ")", "for", "child", "in", "self", ".", "children", ".", "values", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.leaves": [[131, 134], ["tree.TreeNode.descendants", "len"], "methods", ["home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.descendants"], ["", "def", "leaves", "(", "self", ":", "SelfType", ")", "->", "List", "[", "SelfType", "]", ":", "\n", "        ", "\"\"\"Yield all the leaves in the tree.\"\"\"", "\n", "return", "[", "node", "for", "node", "in", "self", ".", "descendants", "(", "include_self", "=", "True", ")", "if", "len", "(", "node", ".", "children", ")", "==", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.__copy__": [[135, 154], ["object.__new__", "dir", "getattr", "callable", "setattr", "setattr", "copy.copy", "getattr.items"], "methods", ["None"], ["", "def", "__copy__", "(", "self", ":", "SelfType", ")", "->", "SelfType", ":", "\n", "        ", "\"\"\"Copy subtree rooted at this node\n        A shallow copy is made of the name and data of the node.\n        shallow copy is recursively invoked on child nodes.\n        Return:\n            the shallow copy\n        \"\"\"", "\n", "clone", "=", "object", ".", "__new__", "(", "self", ".", "__class__", ")", "\n", "for", "member", "in", "dir", "(", "self", ")", ":", "\n", "            ", "attribute", "=", "getattr", "(", "self", ",", "member", ")", "\n", "if", "callable", "(", "attribute", ")", "or", "member", "[", ":", "2", "]", "==", "\"__\"", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "member", "==", "\"children\"", ":", "\n", "                ", "copied_value", "=", "{", "k", ":", "copy", ".", "copy", "(", "child", ")", "for", "k", ",", "child", "in", "attribute", ".", "items", "(", ")", "}", "\n", "setattr", "(", "clone", ",", "member", ",", "copied_value", ")", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "clone", ",", "member", ",", "attribute", ")", "\n", "", "", "return", "clone", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.__repr__": [[155, 157], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"<TreeNode name={} with {} children>\"", ".", "format", "(", "self", ".", "name", ",", "len", "(", "self", ".", "children", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.__eq__": [[158, 163], ["isinstance", "NotImplementedError", "type"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ":", "Any", ")", "->", "bool", ":", "\n", "        ", "if", "not", "isinstance", "(", "other", ",", "TreeNode", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"Comparing TreeNode to {type(other)}\"", ")", "\n", "", "return", "(", "\n", "self", ".", "name", "==", "other", ".", "name", "and", "self", ".", "children", "==", "other", ".", "children", "and", "self", ".", "data", "==", "other", ".", "data", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.__hash__": [[165, 167], ["TypeError"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"unhashable type: TreeNode\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.canonicalise_order": [[168, 178], ["tree.TreeNode.children.values", "child.canonicalise_order", "sorted", "tree.TreeNode.children.keys", "str"], "methods", ["home.repos.pwc.inspect_result.apple_ml-tree-dst.utils.tree.TreeNode.canonicalise_order"], ["", "def", "canonicalise_order", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Recursively sort the child nodes in a consistent order.\n        The structure is modified in place.\n        \"\"\"", "\n", "for", "child", "in", "self", ".", "children", ".", "values", "(", ")", ":", "\n", "            ", "child", ".", "canonicalise_order", "(", ")", "\n", "\n", "", "self", ".", "children", "=", "{", "\n", "name", ":", "self", ".", "children", "[", "name", "]", "\n", "for", "name", "in", "sorted", "(", "self", ".", "children", ".", "keys", "(", ")", ",", "key", "=", "lambda", "name", ":", "str", "(", "name", ")", ")", "\n", "}", "\n"]]}