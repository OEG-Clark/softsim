{"home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.eval_vgg.compute_loss_accuracy": [[16, 31], ["torch.CrossEntropyLoss", "tqdm.tqdm", "enumerate", "net", "torch.max", "torch.sum().item", "nn.CrossEntropyLoss.", "criterion.item", "data[].to", "data[].to", "labels.size", "torch.sum"], "function", ["None"], ["def", "compute_loss_accuracy", "(", "net", ",", "loader", ",", "device", ")", ":", "\n", "    ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'sum'", ")", "\n", "correct_acc", "=", "0.0", "\n", "num", "=", "0", "\n", "tot_loss", "=", "0.0", "\n", "for", "i", ",", "data", "in", "tqdm", "(", "enumerate", "(", "loader", ",", "0", ")", ")", ":", "\n", "        ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "acc", "=", "(", "predicted", "==", "labels", ")", ".", "squeeze", "(", ")", "\n", "correct_acc", "+=", "torch", ".", "sum", "(", "acc", ")", ".", "item", "(", ")", "\n", "num", "+=", "labels", ".", "size", "(", ")", "[", "0", "]", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "tot_loss", "+=", "loss", ".", "item", "(", ")", "\n", "", "return", "correct_acc", "/", "num", ",", "tot_loss", "/", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.eval_vgg.test_on_cifar": [[33, 50], ["torchvision.Compose", "torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "eval_vgg.compute_loss_accuracy", "eval_vgg.compute_loss_accuracy", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.eval_lenet.compute_loss_accuracy", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.eval_lenet.compute_loss_accuracy"], ["", "def", "test_on_cifar", "(", "net", ",", "device", ")", ":", "\n", "    ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "\n", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "128", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "\n", "train_acc", ",", "train_loss", "=", "compute_loss_accuracy", "(", "net", ",", "trainloader", ",", "device", ")", "\n", "test_acc", ",", "test_loss", "=", "compute_loss_accuracy", "(", "net", ",", "testloader", ",", "device", ")", "\n", "return", "(", "train_acc", ",", "train_loss", ")", ",", "(", "test_acc", ",", "test_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.eval_vgg.test_vgg": [[51, 63], ["models.VGG", "deep_model.to.to", "deep_model.to.load_state_dict", "eval_vgg.test_on_cifar", "results.append", "torch.load"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.eval_lenet.test_on_cifar"], ["", "def", "test_vgg", "(", "current_exp", ",", "mod_name", ",", "device", ")", ":", "\n", "# Initialize the network", "\n", "# Sample random parameters from an alpha-stable rv.", "\n", "    ", "results", "=", "[", "]", "\n", "\n", "deep_model", "=", "VGG", "(", "mod_name", ",", "True", ")", "\n", "deep_model", "=", "deep_model", ".", "to", "(", "device", ")", "\n", "deep_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "current_exp", ")", ")", "\n", "\n", "r", "=", "test_on_cifar", "(", "deep_model", ",", "device", ")", "\n", "results", ".", "append", "(", "r", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.eval_vgg.test_models": [[64, 77], ["click.command", "click.option", "glob.glob", "sorted", "torch.device", "eval_vgg.test_vgg", "open", "pickle.dump", "[].split", "[].split", "exp.split"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.eval_vgg.test_vgg"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "\"--model_folder\"", ")", "\n", "def", "test_models", "(", "model_folder", ")", ":", "\n", "    ", "exps", "=", "glob", ".", "glob", "(", "'{}/*'", ".", "format", "(", "model_folder", ")", ")", "\n", "exps", "=", "sorted", "(", "exps", ")", "\n", "res", "=", "{", "}", "\n", "for", "exp", "in", "exps", ":", "\n", "        ", "mod_name", "=", "exp", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'__'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "# This code will run on GPU, set to CPU if no GPU available", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "res", "[", "exp", "]", "=", "test_vgg", "(", "current_exp", ",", "mod_name", ",", "device", ")", "\n", "", "with", "open", "(", "\"test_accuracy_{}.bn\"", ".", "format", "(", "model_folder", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "res", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.VGG.__init__": [[28, 35], ["torch.Module.__init__", "models.VGG._make_layers", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily.__init__", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ",", "with_bias", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ",", "with_bias", ")", "\n", "if", "vgg_name", "in", "filter_nums", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "filter_nums", "[", "vgg_name", "]", ",", "10", ",", "bias", "=", "with_bias", ")", "\n", "", "else", ":", "\n", "             ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "10", ",", "bias", "=", "with_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.VGG.forward": [[36, 41], ["models.VGG.features", "models.VGG.view", "models.VGG.classifier", "models.VGG.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.VGG._make_layers": [[42, 54], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ",", "with_bias", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "with_bias", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.VGG.count_parameters": [[55, 60], ["models.VGG.parameters", "numpy.prod", "list"], "methods", ["None"], ["", "def", "count_parameters", "(", "self", ")", ":", "\n", "        ", "param_count", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param_count", "+=", "np", ".", "prod", "(", "list", "(", "p", ".", "shape", ")", ")", "\n", "", "return", "param_count", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.LeNetFamily.__init__": [[63, 66], ["torch.Module.__init__", "models.LeNetFamily._make_layers"], "methods", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily.__init__", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_convs", ",", "num_linear", ")", ":", "\n", "        ", "super", "(", "LeNetFamily", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_make_layers", "(", "num_convs", ",", "num_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.LeNetFamily._make_layers": [[67, 99], ["torch.Linear", "torch.Linear", "torch.Linear", "ValueError", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "models.LeNetFamily.linears.append", "models.LeNetFamily.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "num_convs", ",", "num_linear", ")", ":", "\n", "        ", "if", "num_convs", "not", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Number of convolutional layers is either 1 or 2\"", ")", "\n", "\n", "", "self", ".", "num_convs", "=", "num_convs", "\n", "if", "num_convs", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "out_dim", "=", "16", "*", "5", "*", "5", "\n", "\n", "", "if", "num_convs", "==", "1", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "8", ",", "5", ")", "\n", "out_dim", "=", "8", "*", "14", "*", "14", "\n", "\n", "", "if", "num_convs", "==", "0", ":", "\n", "            ", "out_dim", "=", "32", "*", "32", "*", "3", "\n", "\n", "", "if", "num_linear", "==", "1", ":", "\n", "            ", "self", ".", "linears", "=", "[", "]", "\n", "final_dim", "=", "out_dim", "\n", "", "else", ":", "\n", "            ", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "out_dim", ",", "120", ")", "]", ")", "\n", "if", "num_linear", "==", "2", ":", "\n", "                ", "final_dim", "=", "120", "\n", "", "else", ":", "\n", "                ", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "120", ",", "84", ")", ")", "\n", "final_dim", "=", "84", "\n", "\n", "", "", "if", "num_linear", ">", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_linear", "-", "3", ")", ":", "\n", "                ", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "84", ",", "84", ")", ")", "\n", "", "", "self", ".", "final_linear", "=", "nn", ".", "Linear", "(", "final_dim", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.LeNetFamily.forward": [[100, 114], ["torch.relu.view", "models.LeNetFamily.final_linear", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu.size", "torch.relu", "torch.relu", "torch.relu", "models.LeNetFamily.conv1", "models.LeNetFamily.conv2", "linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_convs", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "", "if", "self", ".", "num_convs", "==", "2", ":", "\n", "            ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "", "if", "self", ".", "num_convs", "==", "0", ":", "\n", "            ", "out", "=", "x", "\n", "", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "for", "linear", "in", "self", ".", "linears", ":", "\n", "            ", "out", "=", "F", ".", "relu", "(", "linear", "(", "out", ")", ")", "\n", "", "out", "=", "self", ".", "final_linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.LeNetFamily.count_parameters": [[115, 120], ["models.LeNetFamily.parameters", "numpy.prod", "list"], "methods", ["None"], ["", "def", "count_parameters", "(", "self", ")", ":", "\n", "        ", "param_count", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param_count", "+=", "np", ".", "prod", "(", "list", "(", "p", ".", "shape", ")", ")", "\n", "", "return", "param_count", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily.__init__": [[137, 140], ["torch.Module.__init__", "models.WideMLPFamily._make_layers"], "methods", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily.__init__", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_parameters", ")", ":", "\n", "        ", "super", "(", "WideMLPFamily", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_make_layers", "(", "num_layers", ",", "num_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily._solve_for_l3": [[141, 150], ["int", "numpy.ceil", "int", "f", "f", "numpy.ceil", "int", "f", "fp", "numpy.ceil"], "methods", ["None"], ["", "def", "_solve_for_l3", "(", "self", ",", "i", ",", "o", ",", "p", ")", ":", "\n", "        ", "f", "=", "lambda", "h", ":", "i", "*", "h", "*", "h", "+", "h", "*", "h", "*", "h", "+", "o", "*", "h", "-", "p", "\n", "fp", "=", "lambda", "h", ":", "2", "*", "i", "*", "h", "+", "3", "*", "h", "*", "h", "+", "o", "\n", "h", "=", "int", "(", "np", ".", "ceil", "(", "p", "/", "(", "i", "+", "o", ")", ")", ")", "\n", "itera", "=", "0", "\n", "while", "f", "(", "h", ")", ">", "10", "or", "itera", "<", "100", ":", "\n", "            ", "h", "=", "h", "-", "(", "f", "(", "h", ")", ")", "/", "(", "fp", "(", "h", ")", ")", "\n", "itera", "+=", "1", "\n", "", "return", "int", "(", "np", ".", "ceil", "(", "h", ")", ")", ",", "f", "(", "int", "(", "np", ".", "ceil", "(", "h", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily._parameter_count_to_layers": [[151, 163], ["ValueError", "int", "models.WideMLPFamily._solve_for_l3", "int", "numpy.ceil", "numpy.floor"], "methods", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily._solve_for_l3"], ["", "def", "_parameter_count_to_layers", "(", "self", ",", "num_parameters", ",", "num_layers", ",", "num_input", ",", "num_output", ")", ":", "\n", "        ", "if", "num_layers", ">", "3", "or", "num_layers", "<", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"Num Layers is either 2 or 3\"", ")", "\n", "", "if", "num_layers", "==", "2", ":", "\n", "# i->h->o", "\n", "            ", "hidden_count", "=", "int", "(", "np", ".", "ceil", "(", "num_parameters", "/", "(", "num_input", "+", "num_output", ")", ")", ")", "\n", "return", "[", "num_input", ",", "hidden_count", ",", "num_output", "]", "\n", "", "if", "num_layers", "==", "3", ":", "\n", "# i->h^2->h->o", "\n", "            ", "h", ",", "err", "=", "self", ".", "_solve_for_l3", "(", "num_input", ",", "num_output", ",", "num_parameters", ")", "\n", "upd", "=", "int", "(", "np", ".", "floor", "(", "err", "/", "(", "num_input", "+", "num_output", "+", "h", "+", "h", "*", "h", ")", ")", ")", "\n", "return", "[", "num_input", ",", "h", "*", "h", ",", "h", ",", "num_output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily._make_layers": [[164, 169], ["models.WideMLPFamily._parameter_count_to_layers", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "models.WideMLPFamily.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "len", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily._parameter_count_to_layers"], ["", "", "def", "_make_layers", "(", "self", ",", "num_layers", ",", "num_parameters", ")", ":", "\n", "        ", "layers", "=", "self", ".", "_parameter_count_to_layers", "(", "num_parameters", ",", "num_layers", ",", "32", "*", "32", ",", "10", ")", "\n", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "layers", "[", "0", "]", ",", "layers", "[", "1", "]", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layers", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "layers", "[", "i", "]", ",", "layers", "[", "i", "+", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily.forward": [[170, 176], ["x.mean", "torch.relu.view", "torch.relu.size", "torch.relu", "torch.relu", "torch.relu", "linear"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", ".", "mean", "(", "dim", "=", "1", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "for", "linear", "in", "self", ".", "linears", ":", "\n", "            ", "out", "=", "F", ".", "relu", "(", "linear", "(", "out", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily.count_parameters": [[177, 182], ["models.WideMLPFamily.parameters", "numpy.prod", "list"], "methods", ["None"], ["", "def", "count_parameters", "(", "self", ")", ":", "\n", "        ", "param_count", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param_count", "+=", "np", ".", "prod", "(", "list", "(", "p", ".", "shape", ")", ")", "\n", "", "return", "param_count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.test": [[122, 132], ["cfg.keys", "print", "models.VGG", "torch.randn", "torch.randn", "torch.randn", "VGG.", "print", "print", "print", "models.VGG.count_parameters", "net.size"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.models.WideMLPFamily.count_parameters"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "for", "netname", "in", "cfg", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "netname", ")", "\n", "for", "bias", "in", "[", "True", ",", "False", "]", ":", "\n", "            ", "net", "=", "VGG", "(", "netname", ",", "bias", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "bias", ")", "\n", "print", "(", "net", ".", "count_parameters", "(", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.eval_lenet.compute_loss_accuracy": [[13, 28], ["torch.CrossEntropyLoss", "tqdm.tqdm", "enumerate", "net", "torch.max", "torch.max", "torch.sum().item", "torch.sum().item", "nn.CrossEntropyLoss.", "criterion.item", "data[].to", "data[].to", "labels.size", "torch.sum", "torch.sum"], "function", ["None"], ["def", "compute_loss_accuracy", "(", "net", ",", "loader", ",", "device", ")", ":", "\n", "    ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'sum'", ")", "\n", "correct_acc", "=", "0.0", "\n", "num", "=", "0", "\n", "tot_loss", "=", "0.0", "\n", "for", "i", ",", "data", "in", "tqdm", "(", "enumerate", "(", "loader", ",", "0", ")", ")", ":", "\n", "        ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "acc", "=", "(", "predicted", "==", "labels", ")", ".", "squeeze", "(", ")", "\n", "correct_acc", "+=", "torch", ".", "sum", "(", "acc", ")", ".", "item", "(", ")", "\n", "num", "+=", "labels", ".", "size", "(", ")", "[", "0", "]", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "tot_loss", "+=", "loss", ".", "item", "(", ")", "\n", "", "return", "correct_acc", "/", "num", ",", "tot_loss", "/", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.eval_lenet.test_on_cifar": [[30, 47], ["torchvision.Compose", "torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "eval_lenet.compute_loss_accuracy", "eval_lenet.compute_loss_accuracy", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.eval_lenet.compute_loss_accuracy", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.eval_lenet.compute_loss_accuracy"], ["", "def", "test_on_cifar", "(", "net", ",", "device", ")", ":", "\n", "    ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "\n", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "128", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "\n", "train_acc", ",", "train_loss", "=", "compute_loss_accuracy", "(", "net", ",", "trainloader", ",", "device", ")", "\n", "test_acc", ",", "test_loss", "=", "compute_loss_accuracy", "(", "net", ",", "testloader", ",", "device", ")", "\n", "return", "(", "train_acc", ",", "train_loss", ")", ",", "(", "test_acc", ",", "test_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.eval_lenet.test_models": [[49, 69], ["click.command", "click.option", "glob.glob", "sorted", "list", "range", "map", "len", "int", "int", "models.LeNetFamily", "torch.device", "torch.device", "net.to.to", "net.to.load_state_dict", "eval_lenet.test_on_cifar", "open", "pickle.dump", "torch.load", "torch.load", "list", "map", "[].split", "x.split", "y.split"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.eval_lenet.test_on_cifar"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "\"--model_folder\"", ")", "\n", "def", "test_models", "(", "model_folder", ")", ":", "\n", "    ", "exps", "=", "glob", ".", "glob", "(", "'{}/*'", ".", "format", "(", "model_folder", ")", ")", "\n", "exps", "=", "sorted", "(", "exps", ")", "\n", "model_params", "=", "list", "(", "map", "(", "lambda", "y", ":", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", ",", "y", ".", "split", "(", "'/'", ")", "[", "1", "]", ".", "split", "(", "'__'", ")", ")", ")", ",", "exps", ")", ")", "\n", "\n", "results", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "model_params", ")", ")", ":", "\n", "        ", "nc", "=", "int", "(", "model_params", "[", "i", "]", "[", "0", "]", "[", "1", "]", ")", "\n", "nl", "=", "int", "(", "model_params", "[", "i", "]", "[", "1", "]", "[", "1", "]", ")", "\n", "net", "=", "LeNetFamily", "(", "nc", ",", "nl", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "net", "=", "net", ".", "to", "(", "device", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "models", "[", "i", "]", ")", ")", "\n", "\n", "results", "[", "models", "[", "i", "]", "]", "=", "test_on_cifar", "(", "net", ",", "device", ")", "\n", "\n", "", "with", "open", "(", "\"test_accuracy_{}.bn\"", ".", "format", "(", "model_folder", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "res", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha_estimator_vgg.get_5_good_fiv": [[25, 35], ["int", "range", "numpy.floor", "len", "alpha_estimator_vgg.get_5_good_fiv", "numpy.sqrt", "div.append", "int", "numpy.ceil", "len"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha_estimator_vgg.get_5_good_fiv"], ["def", "get_5_good_fiv", "(", "x", ")", ":", "\n", "    ", "rs", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "sqrt", "(", "x", ")", ")", ")", "\n", "div", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ",", "rs", ")", ":", "\n", "        ", "if", "x", "%", "i", "==", "0", ":", "\n", "            ", "div", ".", "append", "(", "i", ")", "\n", "", "", "if", "len", "(", "div", ")", ">", "5", ":", "\n", "        ", "return", "x", ",", "div", "[", ":", ":", "int", "(", "np", ".", "ceil", "(", "len", "(", "div", ")", "/", "4", ")", ")", "]", "+", "[", "div", "[", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "        ", "return", "get_5_good_fiv", "(", "x", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha_estimator_vgg.peek_model_size": [[36, 48], ["model.parameters", "model_sizes.append", "numpy.prod", "len", "numpy.prod"], "function", ["None"], ["", "", "def", "peek_model_size", "(", "model", ")", ":", "\n", "    ", "model_sizes", "=", "[", "]", "\n", "# Input is mode", "\n", "full_size", "=", "0", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "(", "len", "(", "p", ".", "shape", ")", "<", "2", ")", ":", "\n", "            ", "full_size", "+=", "p", ".", "shape", "[", "0", "]", "\n", "continue", "\n", "", "model_sizes", ".", "append", "(", "np", ".", "prod", "(", "p", ".", "shape", ")", ")", "\n", "full_size", "+=", "np", ".", "prod", "(", "p", ".", "shape", ")", "\n", "#model_sizes.append(full_size)", "\n", "", "return", "model_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha_estimator_vgg.get_ms": [[49, 58], ["alpha_estimator_vgg.get_5_good_fiv", "sorted", "ValueError"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha_estimator_vgg.get_5_good_fiv"], ["", "def", "get_ms", "(", "iter_size", ",", "mod_size", ")", ":", "\n", "    ", "if", "iter_size", "in", "resolutions", ":", "\n", "        ", "iter_set", "=", "resolutions", "[", "iter_size", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not a valid iteration size\"", ")", "\n", "", "mod_set", "=", "get_5_good_fiv", "(", "mod_size", ")", "\n", "full_size", "=", "iter_set", "[", "0", "]", "*", "mod_set", "[", "0", "]", "\n", "all_ms", "=", "sorted", "(", "[", "a", "*", "b", "for", "a", "in", "iter_set", "[", "1", "]", "for", "b", "in", "mod_set", "[", "1", "]", "]", ")", "\n", "return", "full_size", ",", "all_ms", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha_estimator_vgg.estimator_vector_full": [[59, 72], ["print", "print", "print", "numpy.median", "torch.mean().view", "len", "utils.alpha_estimator().item", "torch.mean", "utils.alpha_estimator"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.alpha_estimator"], ["", "def", "estimator_vector_full", "(", "iterate_matrix", ")", ":", "\n", "    ", "iter_nums", "=", "iterate_matrix", ".", "shape", "[", "0", "]", "\n", "dim", "=", "iterate_matrix", ".", "shape", "[", "1", "]", "\n", "sz", ",", "ms", "=", "resolutions", "[", "iter_nums", "]", "\n", "\n", "iterate_matrix_zm", "=", "iterate_matrix", "-", "torch", ".", "mean", "(", "iterate_matrix", ",", "axis", "=", "0", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "print", "(", "sz", ",", "ms", ",", "iter_nums", ",", "dim", ")", "\n", "print", "(", "iterate_matrix_zm", "[", "-", "1", "*", "sz", ":", ",", ":", "]", ".", "shape", ")", "\n", "print", "(", "len", "(", "iterate_matrix_zm", "[", "-", "1", "*", "sz", ":", ",", ":", "]", ")", ")", "\n", "est", "=", "[", "alpha_estimator", "(", "mm", ",", "iterate_matrix_zm", "[", "-", "1", "*", "sz", ":", ",", ":", "]", ")", ".", "item", "(", ")", "for", "mm", "in", "ms", "]", "\n", "\n", "return", "np", ".", "median", "(", "est", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha_estimator_vgg.estimator_vector_projected": [[73, 92], ["range", "torch.mean().view", "numpy.random.randn", "torch.from_numpy().float", "torch.mm", "proj_alpha.append", "numpy.median", "numpy.max", "numpy.linalg.norm", "utils.alpha_estimator().item", "numpy.median", "torch.mean", "torch.from_numpy", "utils.alpha_estimator"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.alpha_estimator"], ["", "def", "estimator_vector_projected", "(", "iterate_matrix", ")", ":", "\n", "    ", "iter_nums", "=", "iterate_matrix", ".", "shape", "[", "0", "]", "\n", "dim", "=", "iterate_matrix", ".", "shape", "[", "1", "]", "\n", "sz", ",", "ms", "=", "resolutions", "[", "iter_nums", "]", "\n", "\n", "iterate_matrix_zm", "=", "iterate_matrix", "-", "torch", ".", "mean", "(", "iterate_matrix", ",", "axis", "=", "0", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "proj_alpha", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "rand_direction", "=", "np", ".", "random", ".", "randn", "(", "dim", ",", "1", ")", "\n", "rand_direction", "=", "rand_direction", "/", "np", ".", "linalg", ".", "norm", "(", "rand_direction", ")", "\n", "rand_direction_t", "=", "torch", ".", "from_numpy", "(", "rand_direction", ")", ".", "float", "(", ")", "\n", "\n", "projected", "=", "torch", ".", "mm", "(", "iterate_matrix_zm", ",", "rand_direction_t", ")", "\n", "\n", "cur_alpha_est", "=", "[", "alpha_estimator", "(", "mm", ",", "projected", "[", "-", "1", "*", "sz", ":", ",", ":", "]", ")", ".", "item", "(", ")", "for", "mm", "in", "ms", "]", "\n", "\n", "proj_alpha", ".", "append", "(", "np", ".", "median", "(", "cur_alpha_est", ")", ")", "\n", "", "return", "np", ".", "median", "(", "proj_alpha", ")", ",", "np", ".", "max", "(", "proj_alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha_estimator_vgg.estimator_vector_mean": [[93, 104], ["torch.mean", "mean_over_iters_zm.view.view", "alpha_estimator_vgg.get_5_good_fiv", "numpy.median", "torch.mean", "utils.alpha_estimator().item", "utils.alpha_estimator"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha_estimator_vgg.get_5_good_fiv", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.alpha_estimator"], ["", "def", "estimator_vector_mean", "(", "iterate_matrix", ")", ":", "\n", "    ", "iter_nums", "=", "iterate_matrix", ".", "shape", "[", "0", "]", "\n", "dim", "=", "iterate_matrix", ".", "shape", "[", "1", "]", "\n", "\n", "mean_over_iters", "=", "torch", ".", "mean", "(", "iterate_matrix", ",", "axis", "=", "0", ")", "\n", "mean_over_iters_zm", "=", "mean_over_iters", "-", "torch", ".", "mean", "(", "mean_over_iters", ")", "\n", "mean_over_iters_zm", "=", "mean_over_iters_zm", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "sz", ",", "ms", "=", "get_5_good_fiv", "(", "dim", ")", "\n", "\n", "estimate_mean", "=", "[", "alpha_estimator", "(", "mm", ",", "mean_over_iters_zm", "[", "-", "1", "*", "sz", ":", ",", ":", "]", ")", ".", "item", "(", ")", "for", "mm", "in", "ms", "]", "\n", "return", "np", ".", "median", "(", "estimate_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha_estimator_vgg.estimator_scalar": [[105, 115], ["alpha_estimator_vgg.get_ms", "iterate_matrix.view", "numpy.median", "torch.mean", "utils.alpha_estimator"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.get_ms", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.alpha_estimator"], ["", "def", "estimator_scalar", "(", "iterate_matrix", ")", ":", "\n", "    ", "iter_nums", "=", "iterate_matrix", ".", "shape", "[", "0", "]", "\n", "dim", "=", "iterate_matrix", ".", "shape", "[", "1", "]", "\n", "\n", "sz", ",", "ms", "=", "get_ms", "(", "iter_nums", ",", "dim", ")", "\n", "iterate_matrix_vec", "=", "iterate_matrix", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "iterate_matrix_vec_zm", "=", "iterate_matrix_vec", "-", "torch", ".", "mean", "(", "iterate_matrix_vec", ")", "\n", "estimate", "=", "[", "alpha_estimator", "(", "mm", ",", "iterate_matrix_vec_zm", "[", "-", "1", "*", "sz", ":", ",", ":", "]", ")", "for", "mm", "in", "ms", "[", ":", ":", "4", "]", "]", "\n", "\n", "return", "np", ".", "median", "(", "estimate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha_estimator_vgg.estimate_experiment": [[116, 172], ["torch.device", "glob.glob", "sorted", "len", "models.VGG", "deep_model.to.to", "deep_model.to.load_state_dict", "alpha_estimator_vgg.peek_model_size", "enumerate", "torch.load", "print", "parameter_arrays.append", "models.VGG", "deep_model.to.to", "deep_model.to.load_state_dict", "deep_model.to.parameters", "alpha_estimator_vgg.estimator_vector_full", "alpha_full_est.append", "alpha_estimator_vgg.estimator_vector_projected", "alpha_proj_med_est.append", "alpha_proj_max_est.append", "alpha_estimator_vgg.estimator_vector_mean", "alpha_mean_est.append", "alpha_estimator_vgg.estimator_scalar", "alpha_scalar_est.append", "torch.zeros", "torch.load", "p.data.cpu().view", "int", "len", "p.data.cpu", "x.split", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.peek_model_size", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimator_vector_full", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimator_vector_projected", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimator_vector_mean", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimator_scalar"], ["", "def", "estimate_experiment", "(", "exp_name", ",", "mod_name", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n", "models", "=", "glob", ".", "glob", "(", "'{}/*'", ".", "format", "(", "exp_name", ")", ")", "\n", "models", "=", "sorted", "(", "models", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", ")", "\n", "iter_num", "=", "len", "(", "models", ")", "\n", "\n", "# Peek for the model size to be used later", "\n", "deep_model", "=", "VGG", "(", "mod_name", ",", "True", ")", "\n", "deep_model", "=", "deep_model", ".", "to", "(", "device", ")", "\n", "deep_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "models", "[", "0", "]", ")", ")", "\n", "ms", "=", "peek_model_size", "(", "deep_model", ")", "\n", "\n", "parameter_arrays", "=", "[", "]", "\n", "for", "mod_size", "in", "ms", ":", "\n", "        ", "print", "(", "\"ozan\"", ",", "iter_num", ",", "mod_size", ")", "\n", "parameter_arrays", ".", "append", "(", "torch", ".", "zeros", "(", "iter_num", ",", "mod_size", ")", ")", "\n", "\n", "", "for", "i", ",", "model", "in", "enumerate", "(", "models", ")", ":", "\n", "        ", "deep_model", "=", "VGG", "(", "mod_name", ",", "True", ")", "\n", "deep_model", "=", "deep_model", ".", "to", "(", "device", ")", "\n", "deep_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model", ")", ")", "\n", "\n", "read_mem_cnt", "=", "0", "\n", "read_param_cnt", "=", "0", "\n", "for", "p", "in", "deep_model", ".", "parameters", "(", ")", ":", "\n", "            ", "cpu_data", "=", "p", ".", "data", ".", "cpu", "(", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "if", "len", "(", "p", ".", "shape", ")", "<", "2", ":", "\n", "# Not the weight mat, so append to full one and go on", "\n", "#parameter_arrays[-1][i,read_param_cnt:read_param_cnt+p.shape[0]] = cpu_data", "\n", "#read_param_cnt+=p.shape[0]", "\n", "                ", "continue", "\n", "", "parameter_arrays", "[", "read_mem_cnt", "]", "[", "i", ",", "0", ":", "np", ".", "prod", "(", "p", ".", "shape", ")", "]", "=", "cpu_data", "\n", "read_mem_cnt", "+=", "1", "\n", "\n", "# All models are stored in the memory, so we need to call estimators", "\n", "", "", "alpha_full_est", "=", "[", "]", "\n", "alpha_proj_med_est", "=", "[", "]", "\n", "alpha_proj_max_est", "=", "[", "]", "\n", "alpha_mean_est", "=", "[", "]", "\n", "alpha_scalar_est", "=", "[", "]", "\n", "for", "param", "in", "parameter_arrays", ":", "\n", "        ", "alpha_full", "=", "estimator_vector_full", "(", "param", ")", "\n", "alpha_full_est", ".", "append", "(", "alpha_full", ")", "\n", "\n", "alpha_proj_med", ",", "alpha_proj_max", "=", "estimator_vector_projected", "(", "param", ")", "\n", "alpha_proj_med_est", ".", "append", "(", "alpha_proj_med", ")", "\n", "alpha_proj_max_est", ".", "append", "(", "alpha_proj_max", ")", "\n", "\n", "alpha_mean", "=", "estimator_vector_mean", "(", "param", ")", "\n", "alpha_mean_est", ".", "append", "(", "alpha_mean", ")", "\n", "\n", "alpha_scalar", "=", "estimator_scalar", "(", "param", ")", "\n", "alpha_scalar_est", ".", "append", "(", "alpha_scalar", ")", "\n", "", "return", "{", "\"full\"", ":", "alpha_full_est", ",", "\"proj_med\"", ":", "alpha_proj_med_est", ",", "\"proj_max\"", ":", "alpha_proj_max_est", ",", "\n", "\"mean\"", ":", "alpha_mean_est", ",", "\"scalar\"", ":", "alpha_scalar_est", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha_estimator_vgg.estimate": [[173, 186], ["click.command", "click.option", "glob.glob", "sorted", "alpha_estimator_vgg.estimate_experiment", "open", "pickle.dump", "current_exp.split"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimate_experiment"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--model_folder'", ")", "\n", "def", "estimate", "(", "model_folder", ")", ":", "\n", "    ", "exps", "=", "glob", ".", "glob", "(", "'{}/*/*/*'", ".", "format", "(", "model_folder", ")", ")", "\n", "exps", "=", "sorted", "(", "exps", ")", "\n", "\n", "alpha", "=", "{", "}", "\n", "for", "current_exp", "in", "exps", ":", "\n", "        ", "mod_name", "=", "'VGG'", "+", "current_exp", ".", "split", "(", "'/'", ")", "[", "1", "]", "[", "1", ":", "]", "\n", "alpha", "[", "current_exp", "]", "=", "estimate_experiment", "(", "current_exp", ",", "mod_name", ")", "\n", "\n", "", "with", "open", "(", "\"vgg16_alpha_{}.bn\"", ".", "format", "(", "exp_id", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "alpha", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.peek_model_size": [[36, 48], ["model.parameters", "model_sizes.append", "model_sizes.append", "numpy.prod", "len", "numpy.prod"], "function", ["None"], ["def", "peek_model_size", "(", "model", ")", ":", "\n", "    ", "model_sizes", "=", "[", "]", "\n", "# Input is mode", "\n", "full_size", "=", "0", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "(", "len", "(", "p", ".", "shape", ")", "<", "2", ")", ":", "\n", "            ", "full_size", "+=", "p", ".", "shape", "[", "0", "]", "\n", "continue", "\n", "", "model_sizes", ".", "append", "(", "np", ".", "prod", "(", "p", ".", "shape", ")", ")", "\n", "full_size", "+=", "np", ".", "prod", "(", "p", ".", "shape", ")", "\n", "", "model_sizes", ".", "append", "(", "full_size", ")", "\n", "return", "model_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.get_ms": [[49, 61], ["sorted", "ValueError", "ValueError"], "function", ["None"], ["", "def", "get_ms", "(", "iter_size", ",", "mod_size", ")", ":", "\n", "    ", "if", "iter_size", "in", "[", "1563", ",", "196", ",", "782", ",", "391", "]", ":", "\n", "        ", "iter_set", "=", "resolutions", "[", "iter_size", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not a valid iteration size\"", ")", "\n", "", "if", "mod_size", "in", "net_sizes_div", ":", "\n", "        ", "mod_set", "=", "net_sizes_div", "[", "mod_size", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not a valid model size\"", ")", "\n", "", "full_size", "=", "iter_set", "[", "0", "]", "*", "mod_set", "[", "0", "]", "\n", "all_ms", "=", "sorted", "(", "[", "a", "*", "b", "for", "a", "in", "iter_set", "[", "1", "]", "for", "b", "in", "mod_set", "[", "1", "]", "]", ")", "\n", "return", "full_size", ",", "all_ms", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimator_vector_full": [[62, 72], ["numpy.median", "torch.mean().view", "utils.alpha_estimator().item", "torch.mean", "utils.alpha_estimator"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.alpha_estimator"], ["", "def", "estimator_vector_full", "(", "iterate_matrix", ")", ":", "\n", "    ", "iter_nums", "=", "iterate_matrix", ".", "shape", "[", "0", "]", "\n", "dim", "=", "iterate_matrix", ".", "shape", "[", "1", "]", "\n", "sz", ",", "ms", "=", "resolutions", "[", "iter_nums", "]", "\n", "\n", "iterate_matrix_zm", "=", "iterate_matrix", "-", "torch", ".", "mean", "(", "iterate_matrix", ",", "axis", "=", "0", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "est", "=", "[", "alpha_estimator", "(", "mm", ",", "iterate_matrix_zm", "[", "-", "1", "*", "sz", ":", ",", ":", "]", ")", ".", "item", "(", ")", "for", "mm", "in", "ms", "]", "\n", "\n", "return", "np", ".", "median", "(", "est", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimator_vector_projected": [[73, 92], ["range", "torch.mean().view", "numpy.random.randn", "torch.from_numpy().float", "torch.mm", "proj_alpha.append", "numpy.median", "numpy.max", "numpy.linalg.norm", "utils.alpha_estimator().item", "numpy.median", "torch.mean", "torch.from_numpy", "utils.alpha_estimator"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.alpha_estimator"], ["", "def", "estimator_vector_projected", "(", "iterate_matrix", ")", ":", "\n", "    ", "iter_nums", "=", "iterate_matrix", ".", "shape", "[", "0", "]", "\n", "dim", "=", "iterate_matrix", ".", "shape", "[", "1", "]", "\n", "sz", ",", "ms", "=", "resolutions", "[", "iter_nums", "]", "\n", "\n", "iterate_matrix_zm", "=", "iterate_matrix", "-", "torch", ".", "mean", "(", "iterate_matrix", ",", "axis", "=", "0", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "proj_alpha", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "rand_direction", "=", "np", ".", "random", ".", "randn", "(", "dim", ",", "1", ")", "\n", "rand_direction", "=", "rand_direction", "/", "np", ".", "linalg", ".", "norm", "(", "rand_direction", ")", "\n", "rand_direction_t", "=", "torch", ".", "from_numpy", "(", "rand_direction", ")", ".", "float", "(", ")", "\n", "\n", "projected", "=", "torch", ".", "mm", "(", "iterate_matrix_zm", ",", "rand_direction_t", ")", "\n", "\n", "cur_alpha_est", "=", "[", "alpha_estimator", "(", "mm", ",", "projected", "[", "-", "1", "*", "sz", ":", ",", ":", "]", ")", ".", "item", "(", ")", "for", "mm", "in", "ms", "]", "\n", "\n", "proj_alpha", ".", "append", "(", "np", ".", "median", "(", "cur_alpha_est", ")", ")", "\n", "", "return", "np", ".", "median", "(", "proj_alpha", ")", ",", "np", ".", "max", "(", "proj_alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimator_vector_mean": [[93, 104], ["torch.mean", "mean_over_iters_zm.view.view", "numpy.median", "torch.mean", "utils.alpha_estimator().item", "utils.alpha_estimator"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.alpha_estimator"], ["", "def", "estimator_vector_mean", "(", "iterate_matrix", ")", ":", "\n", "    ", "iter_nums", "=", "iterate_matrix", ".", "shape", "[", "0", "]", "\n", "dim", "=", "iterate_matrix", ".", "shape", "[", "1", "]", "\n", "\n", "mean_over_iters", "=", "torch", ".", "mean", "(", "iterate_matrix", ",", "axis", "=", "0", ")", "\n", "mean_over_iters_zm", "=", "mean_over_iters", "-", "torch", ".", "mean", "(", "mean_over_iters", ")", "\n", "mean_over_iters_zm", "=", "mean_over_iters_zm", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "sz", ",", "ms", "=", "net_sizes_div", "[", "dim", "]", "\n", "\n", "estimate_mean", "=", "[", "alpha_estimator", "(", "mm", ",", "mean_over_iters_zm", "[", "-", "1", "*", "sz", ":", ",", ":", "]", ")", ".", "item", "(", ")", "for", "mm", "in", "ms", "]", "\n", "return", "np", ".", "median", "(", "estimate_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimator_scalar": [[105, 115], ["alpha.get_ms", "iterate_matrix.view", "numpy.median", "torch.mean", "utils.alpha_estimator"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.get_ms", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.alpha_estimator"], ["", "def", "estimator_scalar", "(", "iterate_matrix", ")", ":", "\n", "    ", "iter_nums", "=", "iterate_matrix", ".", "shape", "[", "0", "]", "\n", "dim", "=", "iterate_matrix", ".", "shape", "[", "1", "]", "\n", "\n", "sz", ",", "ms", "=", "get_ms", "(", "iter_nums", ",", "dim", ")", "\n", "iterate_matrix_vec", "=", "iterate_matrix", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "iterate_matrix_vec_zm", "=", "iterate_matrix_vec", "-", "torch", ".", "mean", "(", "iterate_matrix_vec", ")", "\n", "estimate", "=", "[", "alpha_estimator", "(", "mm", ",", "iterate_matrix_vec_zm", "[", "-", "1", "*", "sz", ":", ",", ":", "]", ")", "for", "mm", "in", "ms", "[", ":", ":", "4", "]", "]", "\n", "\n", "return", "np", ".", "median", "(", "estimate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimate_experiment": [[116, 171], ["torch.device", "glob.glob", "sorted", "len", "models.LeNetFamily", "deep_model.to.to", "deep_model.to.load_state_dict", "alpha.peek_model_size", "enumerate", "torch.load", "parameter_arrays.append", "models.LeNetFamily", "deep_model.to.to", "deep_model.to.load_state_dict", "deep_model.to.parameters", "alpha.estimator_vector_full", "alpha_full_est.append", "alpha.estimator_vector_projected", "alpha_proj_med_est.append", "alpha_proj_max_est.append", "alpha.estimator_vector_mean", "alpha_mean_est.append", "alpha.estimator_scalar", "alpha_scalar_est.append", "torch.zeros", "torch.load", "p.data.cpu().view", "len", "p.data.cpu", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.peek_model_size", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimator_vector_full", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimator_vector_projected", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimator_vector_mean", "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimator_scalar"], ["", "def", "estimate_experiment", "(", "exp_name", ",", "ncl", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n", "models", "=", "glob", ".", "glob", "(", "'{}/*'", ".", "format", "(", "exp_name", ")", ")", "\n", "models", "=", "sorted", "(", "models", ")", "\n", "iter_num", "=", "len", "(", "models", ")", "\n", "\n", "# Peek for the model size to be used later", "\n", "deep_model", "=", "LeNetFamily", "(", "ncl", "[", "0", "]", ",", "ncl", "[", "1", "]", ")", "\n", "deep_model", "=", "deep_model", ".", "to", "(", "device", ")", "\n", "deep_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "models", "[", "0", "]", ")", ")", "\n", "ms", "=", "peek_model_size", "(", "deep_model", ")", "\n", "\n", "parameter_arrays", "=", "[", "]", "\n", "for", "mod_size", "in", "ms", ":", "\n", "        ", "parameter_arrays", ".", "append", "(", "torch", ".", "zeros", "(", "iter_num", ",", "mod_size", ")", ")", "\n", "\n", "", "for", "i", ",", "model", "in", "enumerate", "(", "models", ")", ":", "\n", "        ", "deep_model", "=", "LeNetFamily", "(", "ncl", "[", "0", "]", ",", "ncl", "[", "1", "]", ")", "\n", "deep_model", "=", "deep_model", ".", "to", "(", "device", ")", "\n", "deep_model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model", ")", ")", "\n", "\n", "read_mem_cnt", "=", "0", "\n", "read_param_cnt", "=", "0", "\n", "for", "p", "in", "deep_model", ".", "parameters", "(", ")", ":", "\n", "            ", "cpu_data", "=", "p", ".", "data", ".", "cpu", "(", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "if", "len", "(", "p", ".", "shape", ")", "<", "2", ":", "\n", "# Not the weight mat, so append to full one and go on", "\n", "                ", "parameter_arrays", "[", "-", "1", "]", "[", "i", ",", "read_param_cnt", ":", "read_param_cnt", "+", "p", ".", "shape", "[", "0", "]", "]", "=", "cpu_data", "\n", "read_param_cnt", "+=", "p", ".", "shape", "[", "0", "]", "\n", "continue", "\n", "", "parameter_arrays", "[", "read_mem_cnt", "]", "[", "i", ",", "0", ":", "np", ".", "prod", "(", "p", ".", "shape", ")", "]", "=", "cpu_data", "\n", "read_mem_cnt", "+=", "1", "\n", "\n", "# All models are stored in the memory, so we need to call estimators", "\n", "", "", "alpha_full_est", "=", "[", "]", "\n", "alpha_proj_med_est", "=", "[", "]", "\n", "alpha_proj_max_est", "=", "[", "]", "\n", "alpha_mean_est", "=", "[", "]", "\n", "alpha_scalar_est", "=", "[", "]", "\n", "for", "param", "in", "parameter_arrays", ":", "\n", "        ", "alpha_full", "=", "estimator_vector_full", "(", "param", ")", "\n", "alpha_full_est", ".", "append", "(", "alpha_full", ")", "\n", "\n", "alpha_proj_med", ",", "alpha_proj_max", "=", "estimator_vector_projected", "(", "param", ")", "\n", "alpha_proj_med_est", ".", "append", "(", "alpha_proj_med", ")", "\n", "alpha_proj_max_est", ".", "append", "(", "alpha_proj_max", ")", "\n", "\n", "alpha_mean", "=", "estimator_vector_mean", "(", "param", ")", "\n", "alpha_mean_est", ".", "append", "(", "alpha_mean", ")", "\n", "\n", "alpha_scalar", "=", "estimator_scalar", "(", "param", ")", "\n", "alpha_scalar_est", ".", "append", "(", "alpha_scalar", ")", "\n", "", "return", "{", "\"full\"", ":", "alpha_full_est", ",", "\"proj_med\"", ":", "alpha_proj_med_est", ",", "\"proj_max\"", ":", "alpha_proj_max_est", ",", "\n", "\"mean\"", ":", "alpha_mean_est", ",", "\"scalar\"", ":", "alpha_scalar_est", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimate": [[172, 186], ["click.command", "click.option", "glob.glob", "sorted", "alpha.estimate_experiment", "[].split", "int", "int", "open", "pickle.dump", "int", "ncl[].split", "ncl[].split", "current_exp.split"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.alpha.estimate_experiment"], ["", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--exp_id'", ")", "\n", "def", "estimate", "(", "exp_id", ")", ":", "\n", "    ", "exps", "=", "glob", ".", "glob", "(", "'last_epoch_results/*/'", ")", "\n", "exps", "=", "sorted", "(", "exps", ")", "\n", "current_exp", "=", "exps", "[", "int", "(", "exp_id", ")", "]", "\n", "\n", "ncl", "=", "current_exp", ".", "split", "(", "'/'", ")", "[", "1", "]", ".", "split", "(", "'__'", ")", "[", "0", ":", "2", "]", "\n", "ncl", "=", "[", "int", "(", "ncl", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", ",", "int", "(", "ncl", "[", "1", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "]", "\n", "\n", "alpha", "=", "estimate_experiment", "(", "current_exp", ",", "ncl", ")", "\n", "\n", "with", "open", "(", "\"alpha_{}.bn\"", ".", "format", "(", "exp_id", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "{", "\"alpha\"", ":", "alpha", ",", "\"exp\"", ":", "current_exp", "}", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.get_layerWise_norms": [[9, 17], ["net.parameters", "w.append", "g.append", "p.view().norm", "p.grad.view().norm", "p.view", "p.grad.view"], "function", ["None"], ["def", "get_layerWise_norms", "(", "net", ")", ":", "\n", "    ", "w", "=", "[", "]", "\n", "g", "=", "[", "]", "\n", "for", "p", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "requires_grad", ":", "\n", "            ", "w", ".", "append", "(", "p", ".", "view", "(", "-", "1", ")", ".", "norm", "(", ")", ")", "\n", "g", ".", "append", "(", "p", ".", "grad", ".", "view", "(", "-", "1", ")", ".", "norm", "(", ")", ")", "\n", "", "", "return", "w", ",", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.linear_hinge_loss": [[18, 25], ["output.new_empty().fill_", "range", "delta.mean", "len", "output.new_empty", "output.size"], "function", ["None"], ["", "def", "linear_hinge_loss", "(", "output", ",", "target", ")", ":", "\n", "    ", "binary_target", "=", "output", ".", "new_empty", "(", "*", "output", ".", "size", "(", ")", ")", ".", "fill_", "(", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "target", ")", ")", ":", "\n", "        ", "binary_target", "[", "i", ",", "target", "[", "i", "]", "]", "=", "1", "\n", "", "delta", "=", "1", "-", "binary_target", "*", "output", "\n", "delta", "[", "delta", "<=", "0", "]", "=", "0", "\n", "return", "delta", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.get_grads": [[26, 34], ["model.parameters", "torch.cat", "res.append", "p.grad.view"], "function", ["None"], ["", "def", "get_grads", "(", "model", ")", ":", "\n", "# wrt data at the current step", "\n", "    ", "res", "=", "[", "]", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "p", ".", "requires_grad", ":", "\n", "            ", "res", ".", "append", "(", "p", ".", "grad", ".", "view", "(", "-", "1", ")", ")", "\n", "", "", "grad_flat", "=", "torch", ".", "cat", "(", "res", ")", "\n", "return", "grad_flat", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.alpha_estimator": [[36, 46], ["len", "int", "torch.sum", "numpy.spacing", "torch.log().mean", "torch.log().mean", "X.view", "math.log", "torch.log", "torch.log", "torch.sum.norm", "X.norm"], "function", ["None"], ["", "def", "alpha_estimator", "(", "m", ",", "X", ")", ":", "\n", "# X is N by d matrix", "\n", "    ", "N", "=", "len", "(", "X", ")", "\n", "n", "=", "int", "(", "N", "/", "m", ")", "# must be an integer", "\n", "Y", "=", "torch", ".", "sum", "(", "X", ".", "view", "(", "n", ",", "m", ",", "-", "1", ")", ",", "1", ")", "\n", "eps", "=", "np", ".", "spacing", "(", "1", ")", "\n", "Y_log_norm", "=", "torch", ".", "log", "(", "Y", ".", "norm", "(", "dim", "=", "1", ")", "+", "eps", ")", ".", "mean", "(", ")", "\n", "X_log_norm", "=", "torch", ".", "log", "(", "X", ".", "norm", "(", "dim", "=", "1", ")", "+", "eps", ")", ".", "mean", "(", ")", "\n", "diff", "=", "(", "Y_log_norm", "-", "X_log_norm", ")", "/", "math", ".", "log", "(", "m", ")", "\n", "return", "1", "/", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.alpha_estimator2": [[48, 65], ["len", "int", "torch.sum", "numpy.spacing", "torch.log", "torch.log", "X.view", "math.log", "torch.sum.norm", "X.norm", "torch.sort", "torch.sort"], "function", ["None"], ["", "def", "alpha_estimator2", "(", "m", ",", "k", ",", "X", ")", ":", "\n", "# X is N by d matrix", "\n", "    ", "N", "=", "len", "(", "X", ")", "\n", "n", "=", "int", "(", "N", "/", "m", ")", "# must be an integer", "\n", "Y", "=", "torch", ".", "sum", "(", "X", ".", "view", "(", "n", ",", "m", ",", "-", "1", ")", ",", "1", ")", "\n", "eps", "=", "np", ".", "spacing", "(", "1", ")", "\n", "Y_log_norm", "=", "torch", ".", "log", "(", "Y", ".", "norm", "(", "dim", "=", "1", ")", "+", "eps", ")", "\n", "X_log_norm", "=", "torch", ".", "log", "(", "X", ".", "norm", "(", "dim", "=", "1", ")", "+", "eps", ")", "\n", "\n", "# This can be implemented more efficiently by using ", "\n", "# the np.partition function, which currently doesn't ", "\n", "# exist in pytorch: may consider passing the tensor to np", "\n", "\n", "Yk", "=", "torch", ".", "sort", "(", "Y_log_norm", ")", "[", "0", "]", "[", "k", "-", "1", "]", "\n", "Xk", "=", "torch", ".", "sort", "(", "X_log_norm", ")", "[", "0", "]", "[", "m", "*", "k", "-", "1", "]", "\n", "diff", "=", "(", "Yk", "-", "Xk", ")", "/", "math", ".", "log", "(", "m", ")", "\n", "return", "1", "/", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.accuracy": [[66, 70], ["out.max", "pred.eq", "y.size", "pred.eq.sum().float", "pred.eq.sum"], "function", ["None"], ["", "def", "accuracy", "(", "out", ",", "y", ")", ":", "\n", "    ", "_", ",", "pred", "=", "out", ".", "max", "(", "1", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "y", ")", "\n", "return", "100", "*", "correct", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "y", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.utils.get_data": [[71, 141], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "getattr", "getattr", "t.type", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "ValueError", "torch.get_default_dtype"], "function", ["None"], ["", "def", "get_data", "(", "args", ")", ":", "\n", "\n", "# mean/std stats", "\n", "    ", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "data_class", "=", "'CIFAR10'", "\n", "num_classes", "=", "10", "\n", "stats", "=", "{", "\n", "'mean'", ":", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "\n", "'std'", ":", "[", "0.247", ",", "0.243", ",", "0.262", "]", "\n", "}", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "data_class", "=", "'CIFAR100'", "\n", "num_classes", "=", "100", "\n", "stats", "=", "{", "\n", "'mean'", ":", "[", "0.5071", ",", "0.4867", ",", "0.4408", "]", ",", "\n", "'std'", ":", "[", "0.2675", ",", "0.2565", ",", "0.2761", "]", "\n", "}", "\n", "", "elif", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "data_class", "=", "'MNIST'", "\n", "num_classes", "=", "10", "\n", "stats", "=", "{", "\n", "'mean'", ":", "[", "0.1307", "]", ",", "\n", "'std'", ":", "[", "0.3081", "]", "\n", "}", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"unknown dataset\"", ")", "\n", "\n", "# input transformation w/o preprocessing for now", "\n", "\n", "", "trans", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "lambda", "t", ":", "t", ".", "type", "(", "torch", ".", "get_default_dtype", "(", ")", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "stats", ")", "\n", "]", "\n", "\n", "# get tr and te data with the same normalization", "\n", "tr_data", "=", "getattr", "(", "datasets", ",", "data_class", ")", "(", "\n", "root", "=", "args", ".", "path", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "trans", ")", "\n", ")", "\n", "\n", "te_data", "=", "getattr", "(", "datasets", ",", "data_class", ")", "(", "\n", "root", "=", "args", ".", "path", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "trans", ")", "\n", ")", "\n", "\n", "# get tr_loader for train/eval and te_loader for eval", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "tr_data", ",", "\n", "batch_size", "=", "args", ".", "batch_size_train", ",", "\n", "shuffle", "=", "False", ",", "\n", ")", "\n", "\n", "train_loader_eval", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "tr_data", ",", "\n", "batch_size", "=", "args", ".", "batch_size_eval", ",", "\n", "shuffle", "=", "False", ",", "\n", ")", "\n", "\n", "test_loader_eval", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "te_data", ",", "\n", "batch_size", "=", "args", ".", "batch_size_eval", ",", "\n", "shuffle", "=", "False", ",", "\n", ")", "\n", "\n", "return", "train_loader", ",", "test_loader_eval", ",", "train_loader_eval", ",", "num_classes", "", "", ""]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.train_vgg.train_model_vgg": [[16, 53], ["torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.VGG", "net.to.to", "torch.CrossEntropyLoss", "torch.SGD", "range", "net.to.parameters", "enumerate", "torchvision.ToTensor", "torchvision.Normalize", "optim.SGD.zero_grad", "net.to.", "nn.CrossEntropyLoss.", "criterion.backward", "optim.SGD.step", "criterion.item", "torch.save", "torch.save", "data[].to", "data[].to", "print", "torch.save", "torch.save", "net.to.state_dict", "net.to.state_dict"], "function", ["None"], ["def", "train_model_vgg", "(", "vgg_name", ",", "l_rate", ",", "batch_size", ",", "device", ")", ":", "\n", "    ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "net", "=", "VGG", "(", "vgg_name", ",", "True", ")", "\n", "net", "=", "net", ".", "to", "(", "device", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "l_rate", ",", "momentum", "=", "0.9", ")", "\n", "model_name", "=", "\"vgg_{}__bs_{}__lr_{}\"", ".", "format", "(", "vgg_name", ",", "batch_size", ",", "l_rate", ")", "\n", "path", "=", "\"{}{}\"", ".", "format", "(", "\"./models/\"", ",", "model_name", ")", "\n", "\n", "\n", "EITER", "=", "5", "\n", "for", "epoch", "in", "range", "(", "81", ")", ":", "\n", "        ", "model_path", "=", "\"{}__epoch_{}.pth\"", ".", "format", "(", "path", ",", "epoch", ")", "\n", "running_loss", "=", "0.0", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "trainloader", ",", "0", ")", ":", "\n", "            ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "last_path", "=", "\"{}__last_epoch__step_{}\"", ".", "format", "(", "path", ",", "i", ")", "\n", "if", "i", "%", "EITER", "==", "1", ":", "\n", "                ", "print", "(", "\"Loss @ [Epoch:{} Inter:{}] is {}\"", ".", "format", "(", "epoch", ",", "i", ",", "running_loss", "/", "EITER", ")", ")", "\n", "running_loss", "=", "0.0", "\n", "", "if", "epoch", ">", "79", ":", "\n", "                ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "last_path", ")", "\n", "", "", "if", "epoch", "%", "20", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.train_vgg.train_lenet": [[54, 64], ["click.command", "click.option", "click.option", "torch.device", "torch.device", "print", "train_vgg.train_model_vgg", "float", "int", "float", "int"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.train_vgg.train_model_vgg"], ["", "", "", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--lr'", ",", "help", "=", "\"Learning Rate\"", ")", "\n", "@", "click", ".", "option", "(", "'--bs'", ",", "help", "=", "\"Batch Size\"", ")", "\n", "def", "train_lenet", "(", "lr", ",", "bs", ")", ":", "\n", "# This code will run on GPU, set to CPU if no GPU available", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n", "for", "lay_nums", "in", "[", "'VGG4'", ",", "'VGG5'", ",", "'VGG6'", ",", "'VGG7'", ",", "'VGG8'", ",", "'VGG11'", ",", "'VGG13'", ",", "'VGG16'", ",", "'VGG19'", "]", ":", "\n", "        ", "print", "(", "\"Running with {} {} {}\"", ".", "format", "(", "lay_nums", ",", "float", "(", "lr", ")", ",", "int", "(", "bs", ")", ")", ")", "\n", "train_model_vgg", "(", "lay_nums", ",", "float", "(", "lr", ")", ",", "int", "(", "bs", ")", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.train_lenet.train_model_lenet": [[13, 51], ["torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.LeNetFamily", "net.to.to", "torch.CrossEntropyLoss", "torch.SGD", "range", "net.to.parameters", "enumerate", "torchvision.ToTensor", "torchvision.Normalize", "optim.SGD.zero_grad", "net.to.", "nn.CrossEntropyLoss.", "criterion.backward", "optim.SGD.step", "criterion.item", "torch.save", "torch.save", "data[].to", "data[].to", "print", "torch.save", "torch.save", "net.to.state_dict", "net.to.state_dict"], "function", ["None"], ["def", "train_model_lenet", "(", "num_convs", ",", "num_linear", ",", "l_rate", ",", "batch_size", ",", "device", ")", ":", "\n", "    ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "]", ")", "\n", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "\n", "net", "=", "LeNetFamily", "(", "num_convs", ",", "num_linear", ")", "\n", "net", "=", "net", ".", "to", "(", "device", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "l_rate", ",", "momentum", "=", "0.9", ")", "\n", "\n", "model_name", "=", "\"nc_{}__nl_{}__bs_{}__lr_{}\"", ".", "format", "(", "num_convs", ",", "num_linear", ",", "batch_size", ",", "l_rate", ")", "\n", "path", "=", "\"{}{}\"", ".", "format", "(", "\"./models/\"", ",", "model_name", ")", "\n", "\n", "\n", "EITER", "=", "500", "\n", "for", "epoch", "in", "range", "(", "51", ")", ":", "\n", "        ", "model_path", "=", "\"{}__epoch_{}.pth\"", ".", "format", "(", "path", ",", "epoch", ")", "\n", "running_loss", "=", "0.0", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "trainloader", ",", "0", ")", ":", "\n", "            ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "last_path", "=", "\"{}__last_epoch__step_{}\"", ".", "format", "(", "path", ",", "i", ")", "\n", "if", "i", "%", "EITER", "==", "1", ":", "\n", "                ", "print", "(", "\"Loss @ [Epoch:{} Inter:{}] is {}\"", ".", "format", "(", "epoch", ",", "i", ",", "running_loss", "/", "EITER", ")", ")", "\n", "running_loss", "=", "0.0", "\n", "", "if", "epoch", ">", "49", ":", "\n", "                ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "last_path", ")", "\n", "", "", "if", "epoch", "%", "5", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.train_lenet.train_lenet": [[52, 64], ["click.command", "click.option", "click.option", "torch.device", "torch.device", "print", "train_lenet.train_model_lenet", "float", "int", "float", "int"], "function", ["home.repos.pwc.inspect_result.umutsimsekli_Hausdorff-Dimension-and-Generalization.src.train_lenet.train_model_lenet"], ["", "", "", "@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--lr'", ",", "help", "=", "\"Learning Rate\"", ")", "\n", "@", "click", ".", "option", "(", "'--bs'", ",", "help", "=", "\"Batch Size\"", ")", "\n", "def", "train_lenet", "(", "lr", ",", "bs", ")", ":", "\n", "# This code will run on GPU, set to CPU if no GPU available", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "\n", "for", "lay_nums", "in", "[", "(", "0", ",", "8", ")", ",", "(", "0", ",", "4", ")", ",", "(", "0", ",", "2", ")", ",", "(", "2", ",", "8", ")", ",", "(", "2", ",", "4", ")", ",", "(", "2", ",", "2", ")", ",", "(", "2", ",", "1", ")", "]", ":", "\n", "        ", "nc", "=", "lay_nums", "[", "0", "]", "\n", "nl", "=", "lay_nums", "[", "1", "]", "\n", "print", "(", "\"Training with {} {} {} {}\"", ".", "format", "(", "nc", ",", "nl", ",", "float", "(", "lr", ")", ",", "int", "(", "bs", ")", ")", ")", "\n", "train_model_lenet", "(", "nc", ",", "nl", ",", "float", "(", "lr", ")", ",", "int", "(", "bs", ")", ",", "device", ")", "\n", "\n"]]}