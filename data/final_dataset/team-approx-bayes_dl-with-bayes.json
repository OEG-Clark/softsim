{"home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.classification.main.main": [[19, 250], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "vars", "torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "train_transforms.append", "val_transforms.append", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "dataset_class", "dataset_class", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "getattr.", "setattr", "model.to.to", "print", "vars().items", "print", "shutil.copy", "torchsso.utils.Logger", "torchsso.utils.Logger.start", "range", "vars.update", "torch.cuda.is_available", "torch.cuda.is_available", "train_transforms.append", "train_transforms.append", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "train_transforms.append", "val_transforms.append", "getattr", "os.path.splitext", "os.path.dirname", "importlib.import_module", "getattr", "torchsso.optim.SecondOrderOptimizer", "getattr", "getattr.", "print", "os.path.exists", "torch.load", "torch.load", "model.to.load_state_dict", "os.path.isdir", "os.makedirs", "os.path.realpath", "shutil.copy", "shutil.copy", "main.train", "main.validate", "torchsso.utils.Logger.write", "dict", "dict", "open", "json.load", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "parser.parse_args.arch_file.replace", "torchsso.optim.VIOptimizer", "getattr", "getattr.", "getattr", "vars", "print", "print", "print", "print", "len", "optim_class.param_groups[].get", "os.path.join", "torch.save", "torch.save", "os.path.basename().replace", "model.to.parameters", "model.to.state_dict", "optim_class.state_dict", "len", "len", "len", "os.path.basename", "os.path.split"], "function", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.classification.main.train", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.classification.main.validate"], ["\n", "DATASET_CIFAR10", "=", "'CIFAR-10'", "\n", "DATASET_CIFAR100", "=", "'CIFAR-100'", "\n", "DATASET_IMAGENET", "=", "'ImageNet'", "\n", "\n", "\n", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# Data", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "DATASET_CIFAR10", ",", "DATASET_CIFAR100", ",", "DATASET_IMAGENET", "]", ",", "\n", "default", "=", "DATASET_CIFAR10", ",", "\n", "help", "=", "'name of dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ",", "default", "=", "'./data'", ",", "\n", "help", "=", "'root of dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_root'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'root of train dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_root'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'root of validate dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'number of epochs to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'input batch size for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'input batch size for valing'", ")", "\n", "parser", ".", "add_argument", "(", "'--normalizing_data'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'[data pre processing] normalizing data'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_crop'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'[data augmentation] random crop'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_resized_crop'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'[data augmentation] random resised crop'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_horizontal_flip'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'[data augmentation] random horizontal flip'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_size_scale'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "\n", "help", "=", "'ratio multiplied to the actual dataset size'", ")", "\n", "# Training Settings", "\n", "parser", ".", "add_argument", "(", "'--arch_file'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'name of file which defines the architecture'", ")", "\n", "parser", ".", "add_argument", "(", "'--arch_name'", ",", "type", "=", "str", ",", "default", "=", "'LeNet5'", ",", "\n", "help", "=", "'name of the architecture'", ")", "\n", "parser", ".", "add_argument", "(", "'--arch_args'", ",", "type", "=", "json", ".", "loads", ",", "default", "=", "None", ",", "\n", "help", "=", "'[JSON] arguments for the architecture'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_name'", ",", "type", "=", "str", ",", "default", "=", "DistributedSecondOrderOptimizer", ".", "__name__", ",", "\n", "help", "=", "'name of the optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_args'", ",", "type", "=", "json", ".", "loads", ",", "default", "=", "None", ",", "\n", "help", "=", "'[JSON] arguments for the optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--curv_args'", ",", "type", "=", "json", ".", "loads", ",", "default", "=", "dict", "(", ")", ",", "\n", "help", "=", "'[JSON] arguments for the curvature'", ")", "\n", "parser", ".", "add_argument", "(", "'--fisher_args'", ",", "type", "=", "json", ".", "loads", ",", "default", "=", "dict", "(", ")", ",", "\n", "help", "=", "'[JSON] arguments for the fisher'", ")", "\n", "parser", ".", "add_argument", "(", "'--scheduler_name'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'name of the learning rate scheduler'", ")", "\n", "parser", ".", "add_argument", "(", "'--scheduler_args'", ",", "type", "=", "json", ".", "loads", ",", "default", "=", "None", ",", "\n", "help", "=", "'[JSON] arguments for the scheduler'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_epochs'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'number of epochs for warmup lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_scheduler_name'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'name of the learning rate scheduler'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_scheduler_args'", ",", "type", "=", "json", ".", "loads", ",", "default", "=", "None", ",", "\n", "help", "=", "'[JSON] arguments for the wamup scheduler'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum_correction'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if True, momentum/LR ratio is kept to be constant'", ")", "\n", "parser", ".", "add_argument", "(", "'--non_wd_for_bn'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'(FirstOrderOptimizer only) if True, weight decay is not applied for BatchNorm'", ")", "\n", "parser", ".", "add_argument", "(", "'--lars'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if True, LARS is applied for first-order optimizer'", ")", "\n", "# Options", "\n", "parser", ".", "add_argument", "(", "'--download'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'if True, downloads the dataset (CIFAR-10 or 100) from the internet'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'number of sub processes for data loading'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_file_name'", ",", "type", "=", "str", ",", "default", "=", "'log'", ",", "\n", "help", "=", "'log file name'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_interval'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'how many epochs to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'checkpoint path for resume training'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "type", "=", "str", ",", "default", "=", "'result'", ",", "\n", "help", "=", "'dir to save output files'", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "default", "=", "None", ",", "\n", "help", "=", "'config file path'", ")", "\n", "# [COMM]", "\n", "parser", ".", "add_argument", "(", "'--dist_init_method'", ",", "type", "=", "str", ",", "\n", "help", "=", "'torch.distributed init_method'", ")", "\n", "parser", ".", "add_argument", "(", "'--size_data_group'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'size of the process groups in which input data are shared'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_mc_groups'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'number of the process groups in which mc sampled params are shared'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "dict_args", "=", "vars", "(", "args", ")", "\n", "\n", "# Load config file", "\n", "if", "args", ".", "config", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "config", ")", "as", "f", ":", "\n", "            ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "dict_args", ".", "update", "(", "config", ")", "\n", "\n", "# Set random seed", "\n", "", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# [COMM] Initialize process group", "\n", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "size", "=", "comm", ".", "Get_size", "(", ")", "\n", "ranks", "=", "list", "(", "range", "(", "size", ")", ")", "\n", "rank", "=", "comm", ".", "Get_rank", "(", ")", "\n", "n_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "device", "=", "rank", "%", "n_per_node", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "init_method", "=", "'tcp://{}:23456'", ".", "format", "(", "args", ".", "dist_init_method", ")", "\n", "dist", ".", "init_process_group", "(", "'nccl'", ",", "init_method", "=", "init_method", ",", "world_size", "=", "size", ",", "rank", "=", "rank", ")", "\n", "\n", "# [COMM] Setup process group for MC sample parallel", "\n", "size_data_group", "=", "args", ".", "size_data_group", "\n", "assert", "size", "%", "size_data_group", "==", "0", "\n", "num_mc_groups", "=", "args", ".", "num_mc_groups", "\n", "assert", "size", "%", "num_mc_groups", "==", "0", "\n", "\n", "if", "size_data_group", ">", "1", ":", "\n", "        ", "num_data_group", "=", "size", "/", "size_data_group", "\n", "data_group_id", "=", "rank", "%", "num_data_group", "\n", "data_group_ranks", "=", "ranks", "[", "data_group_id", ":", "size", ":", "num_data_group", "]", "\n", "data_group", "=", "dist", ".", "new_group", "(", "data_group_ranks", ")", "\n", "\n", "master_ranks", "=", "ranks", "[", "0", ":", "num_data_group", "]", "\n", "master_group", "=", "dist", ".", "new_group", "(", "master_ranks", ")", "\n", "", "else", ":", "\n", "        ", "num_data_group", "=", "size", "\n", "data_group_id", "=", "rank", "\n", "data_group", "=", "None", "\n", "master_group", "=", "dist", ".", "new_group", "(", "ranks", ")", "\n", "\n", "", "if", "num_mc_groups", ">", "1", ":", "\n", "        ", "size_mc_group", "=", "int", "(", "size", "/", "num_mc_groups", ")", "\n", "mc_group_id", "=", "int", "(", "rank", "/", "size_mc_group", ")", "\n", "", "else", ":", "\n", "        ", "size_mc_group", "=", "size", "\n", "mc_group_id", "=", "0", "\n", "\n", "# Setup data augmentation & data pre processing", "\n", "", "train_transforms", ",", "val_transforms", "=", "[", "]", ",", "[", "]", "\n", "\n", "if", "args", ".", "dataset", "in", "[", "DATASET_CIFAR10", ",", "DATASET_CIFAR100", "]", ":", "\n", "# CIFAR-10/100", "\n", "        ", "if", "args", ".", "random_crop", ":", "\n", "            ", "train_transforms", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ")", "\n", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "\n", "", "else", ":", "\n", "# ImageNet", "\n", "        ", "if", "args", ".", "random_resized_crop", ":", "\n", "            ", "train_transforms", ".", "append", "(", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ")", "\n", "", "else", ":", "\n", "            ", "train_transforms", ".", "append", "(", "transforms", ".", "Resize", "(", "256", ")", ")", "\n", "if", "args", ".", "random_crop", ":", "\n", "                ", "train_transforms", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "224", ")", ")", "\n", "", "else", ":", "\n", "                ", "train_transforms", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "224", ")", ")", "\n", "\n", "", "", "normalize", "=", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "Resize", "(", "256", ")", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "224", ")", ")", "\n", "\n", "", "if", "args", ".", "random_horizontal_flip", ":", "\n", "        ", "train_transforms", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "\n", "", "train_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "if", "args", ".", "normalizing_data", ":", "\n", "        ", "train_transforms", ".", "append", "(", "normalize", ")", "\n", "val_transforms", ".", "append", "(", "normalize", ")", "\n", "\n", "", "train_transform", "=", "transforms", ".", "Compose", "(", "train_transforms", ")", "\n", "val_transform", "=", "transforms", ".", "Compose", "(", "val_transforms", ")", "\n", "\n", "# Setup data loader", "\n", "if", "args", ".", "dataset", "==", "DATASET_IMAGENET", ":", "\n", "# ImageNet", "\n", "        ", "num_classes", "=", "1000", "\n", "\n", "train_root", "=", "args", ".", "root", "if", "args", ".", "train_root", "is", "None", "else", "args", ".", "train_root", "\n", "val_root", "=", "args", ".", "root", "if", "args", ".", "val_root", "is", "None", "else", "args", ".", "val_root", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "train_root", ",", "transform", "=", "train_transform", ")", "\n", "val_dataset", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "val_root", ",", "transform", "=", "val_transform", ")", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "dataset", "==", "DATASET_CIFAR10", ":", "\n", "# CIFAR-10", "\n", "            ", "num_classes", "=", "10", "\n", "dataset_class", "=", "datasets", ".", "CIFAR10", "\n", "", "else", ":", "\n", "# CIFAR-100", "\n", "            ", "num_classes", "=", "100", "\n", "dataset_class", "=", "datasets", ".", "CIFAR100", "\n", "\n", "", "train_dataset", "=", "dataset_class", "(", "\n", "root", "=", "args", ".", "root", ",", "train", "=", "True", ",", "download", "=", "args", ".", "download", ",", "transform", "=", "train_transform", ")", "\n", "val_dataset", "=", "dataset_class", "(", "\n", "root", "=", "args", ".", "root", ",", "train", "=", "False", ",", "download", "=", "args", ".", "download", ",", "transform", "=", "val_transform", ")", "\n", "\n", "# [COMM] Setup distributed sampler for data parallel & MC sample parallel", "\n", "", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "train_dataset", ",", "num_replicas", "=", "num_data_group", ",", "rank", "=", "data_group_id", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "# [COMM] Setup distributed sampler for data parallel", "\n", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "args", ".", "val_batch_size", ",", "shuffle", "=", "False", ",", "\n", "sampler", "=", "val_sampler", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "# Setup model", "\n", "if", "args", ".", "arch_file", "is", "None", ":", "\n", "        ", "arch_class", "=", "getattr", "(", "models", ",", "args", ".", "arch_name", ")", "\n", "", "else", ":", "\n", "        ", "_", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "args", ".", "arch_file", ")", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "arch_file", ")", "\n", "\n", "if", "dirname", "==", "''", ":", "\n", "            ", "module_path", "=", "args", ".", "arch_file", ".", "replace", "(", "ext", ",", "''", ")", "\n", "", "elif", "dirname", "==", "'.'", ":", "\n", "            ", "module_path", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "arch_file", ")", ".", "replace", "(", "ext", ",", "''", ")", "\n", "", "else", ":", "\n", "            ", "module_path", "=", "'.'", ".", "join", "(", "os", ".", "path", ".", "split", "(", "args", ".", "arch_file", ")", ")", ".", "replace", "(", "ext", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.classification.main.train": [[252, 354], ["model.train", "len", "len", "enumerate", "getattr", "main.train.scheduler_type"], "function", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.classification.main.train"], ["arch_class", "=", "getattr", "(", "module", ",", "args", ".", "arch_name", ")", "\n", "\n", "", "arch_kwargs", "=", "{", "}", "if", "args", ".", "arch_args", "is", "None", "else", "args", ".", "arch_args", "\n", "arch_kwargs", "[", "'num_classes'", "]", "=", "num_classes", "\n", "\n", "model", "=", "arch_class", "(", "**", "arch_kwargs", ")", "\n", "setattr", "(", "model", ",", "'num_classes'", ",", "num_classes", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "# [COMM] Broadcast model parameters", "\n", "for", "param", "in", "list", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "dist", ".", "broadcast", "(", "param", ".", "data", ",", "src", "=", "0", ")", "\n", "\n", "# Setup optimizer", "\n", "", "optim_kwargs", "=", "{", "}", "if", "args", ".", "optim_args", "is", "None", "else", "args", ".", "optim_args", "\n", "acc_steps", "=", "optim_kwargs", ".", "get", "(", "'acc_steps'", ",", "1", ")", "\n", "global_batch_size", "=", "num_data_group", "*", "args", ".", "batch_size", "*", "acc_steps", "\n", "total_steps", "=", "math", ".", "ceil", "(", "args", ".", "epochs", "*", "len", "(", "train_loader", ".", "dataset", ")", "/", "global_batch_size", ")", "\n", "\n", "# Setup optimizer", "\n", "if", "args", ".", "optim_name", "==", "DistributedVIOptimizer", ".", "__name__", ":", "\n", "        ", "optimizer", "=", "DistributedVIOptimizer", "(", "model", ",", "\n", "mc_group_id", "=", "mc_group_id", ",", "\n", "dataset_size", "=", "len", "(", "train_loader", ".", "dataset", ")", "*", "args", ".", "dataset_size_scale", ",", "\n", "total_steps", "=", "total_steps", ",", "\n", "seed", "=", "args", ".", "seed", ",", "\n", "**", "optim_kwargs", ",", "curv_kwargs", "=", "args", ".", "curv_args", ")", "\n", "", "else", ":", "\n", "        ", "assert", "args", ".", "num_mc_groups", "==", "1", ",", "'You cannot use MC sample groups with non-VI optimizers.'", "\n", "if", "args", ".", "optim_name", "==", "DistributedSecondOrderOptimizer", ".", "__name__", ":", "\n", "            ", "optimizer", "=", "DistributedSecondOrderOptimizer", "(", "model", ",", "**", "optim_kwargs", ",", "curv_kwargs", "=", "args", ".", "curv_args", ")", "\n", "", "else", ":", "\n", "            ", "if", "args", ".", "non_wd_for_bn", ":", "\n", "                ", "group", ",", "group_non_wd", "=", "{", "'params'", ":", "[", "]", "}", ",", "{", "'params'", ":", "[", "]", ",", "'non_wd'", ":", "True", "}", "\n", "for", "m", "in", "model", ".", "children", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "                        ", "group_non_wd", "[", "'params'", "]", ".", "extend", "(", "m", ".", "parameters", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "group", "[", "'params'", "]", ".", "extend", "(", "m", ".", "parameters", "(", ")", ")", "\n", "\n", "", "", "params", "=", "[", "group", ",", "group_non_wd", "]", "\n", "", "else", ":", "\n", "                ", "params", "=", "model", ".", "parameters", "(", ")", "\n", "\n", "", "optim_class", "=", "getattr", "(", "torch", ".", "optim", ",", "args", ".", "optim_name", ")", "\n", "optimizer", "=", "optim_class", "(", "params", ",", "**", "optim_kwargs", ")", "\n", "\n", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "if", "group", ".", "get", "(", "'non_wd'", ",", "False", ")", ":", "\n", "                    ", "group", "[", "'weight_decay'", "]", "=", "0", "\n", "\n", "", "", "optimizer", "=", "DistributedFirstOrderOptimizer", "(", "optimizer", ",", "model", ",", "dist", ",", "lars", "=", "args", ".", "lars", ")", "\n", "\n", "# Setup lr scheduler", "\n", "", "", "def", "get_scheduler", "(", "name", ",", "kwargs", ")", ":", "\n", "        ", "scheduler_class", "=", "getattr", "(", "torchsso", ".", "optim", ".", "lr_scheduler", ",", "name", ",", "None", ")", "\n", "if", "scheduler_class", "is", "None", ":", "\n", "            ", "scheduler_class", "=", "getattr", "(", "torch", ".", "optim", ".", "lr_scheduler", ",", "name", ")", "\n", "", "scheduler_kwargs", "=", "{", "}", "if", "kwargs", "is", "None", "else", "kwargs", "\n", "_scheduler", "=", "scheduler_class", "(", "optimizer", ",", "**", "scheduler_kwargs", ")", "\n", "if", "args", ".", "momentum_correction", ":", "\n", "            ", "_scheduler", "=", "MomentumCorrectionLR", "(", "_scheduler", ")", "\n", "", "return", "_scheduler", "\n", "\n", "", "if", "args", ".", "scheduler_name", "is", "None", ":", "\n", "        ", "main_scheduler", "=", "None", "\n", "", "else", ":", "\n", "        ", "main_scheduler", "=", "get_scheduler", "(", "args", ".", "scheduler_name", ",", "args", ".", "scheduler_args", ")", "\n", "\n", "", "if", "args", ".", "warmup_scheduler_name", "is", "None", ":", "\n", "        ", "warmup_scheduler", "=", "main_scheduler", "\n", "", "else", ":", "\n", "        ", "warmup_scheduler", "=", "get_scheduler", "(", "args", ".", "warmup_scheduler_name", ",", "args", ".", "warmup_scheduler_args", ")", "\n", "\n", "", "logger", "=", "None", "\n", "start_epoch", "=", "1", "\n", "\n", "# Load checkpoint", "\n", "if", "args", ".", "resume", "is", "not", "None", ":", "\n", "        ", "print", "(", "'==> Resuming from checkpoint..'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "args", ".", "resume", ")", ",", "'Error: no checkpoint file found'", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "\n", "# All config", "\n", "        ", "print", "(", "'==========================='", ")", "\n", "print", "(", "'dataset: {}'", ".", "format", "(", "vars", "(", "args", ")", "[", "'dataset'", "]", ")", ")", "\n", "print", "(", "'train data size: {}'", ".", "format", "(", "len", "(", "train_loader", ".", "dataset", ")", ")", ")", "\n", "print", "(", "'val data size: {}'", ".", "format", "(", "len", "(", "val_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "print", "(", "'MPI.COMM_WORLD size: {}'", ".", "format", "(", "size", ")", ")", "\n", "print", "(", "'global mini-batch size: {}'", ".", "format", "(", "global_batch_size", ")", ")", "\n", "print", "(", "'steps/epoch: {}'", ".", "format", "(", "math", ".", "ceil", "(", "len", "(", "train_loader", ".", "dataset", ")", "/", "global_batch_size", ")", ")", ")", "\n", "\n", "num_mc_samples", "=", "optim_kwargs", ".", "get", "(", "'num_mc_samples'", ",", "None", ")", "\n", "if", "num_mc_samples", "is", "not", "None", ":", "\n", "            ", "print", "(", "'global num MC samples: {}'", ".", "format", "(", "num_mc_groups", "*", "num_mc_samples", ")", ")", "\n", "print", "(", "'MC sample group: {} processes/group x {} group'", ".", "format", "(", "size_mc_group", ",", "num_mc_groups", ")", ")", "\n", "print", "(", "'data group: {} processes/group x {} group'", ".", "format", "(", "size_data_group", ",", "num_data_group", ")", ")", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.classification.main.validate": [[356, 382], ["model.eval", "len", "print", "torch.no_grad", "torch.no_grad", "len", "isinstance", "torch.cross_entropy().item", "model.argmax", "output.argmax.eq().sum().item", "len", "data.to", "target.to", "optimizer.prediction", "model", "torch.cross_entropy", "output.argmax.eq().sum", "output.argmax.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.alexnet.AlexNetMCDropout.prediction"], ["", "if", "hasattr", "(", "optimizer", ",", "'indices'", ")", ":", "\n", "            ", "print", "(", "'layer assignment: {}'", ".", "format", "(", "optimizer", ".", "indices", ")", ")", "\n", "\n", "", "print", "(", "'---------------------------'", ")", "\n", "\n", "for", "key", ",", "val", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "==", "'dataset'", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "print", "(", "'{}: {}'", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "", "", "print", "(", "'==========================='", ")", "\n", "\n", "# Copy this file & config to args.out", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "out", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "out", ")", "\n", "", "try", ":", "\n", "            ", "shutil", ".", "copy", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ",", "args", ".", "out", ")", "\n", "", "except", "shutil", ".", "SameFileError", ":", "\n", "            ", "pass", "\n", "", "if", "args", ".", "config", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "shutil", ".", "copy", "(", "args", ".", "config", ",", "args", ".", "out", ")", "\n", "", "except", "shutil", ".", "SameFileError", ":", "\n", "                ", "pass", "\n", "", "", "if", "args", ".", "arch_file", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "shutil", ".", "copy", "(", "args", ".", "arch_file", ",", "args", ".", "out", ")", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.vgg.VGG.__init__": [[15, 19], ["torch.Module.__init__", "vgg.VGG._make_layers", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.vgg.VGG._make_layers"], ["class", "VGG", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "vgg_name", "=", "'VGG19'", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.vgg.VGG.forward": [[20, 25], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.vgg.VGG._make_layers": [[26, 39], ["torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["\n", "", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.vgg.VGG19.__init__": [[44, 79], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "VGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1_1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1_2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2_1", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2_2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3_1", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3_2", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3_3", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv3_4", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3_4", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4_1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4_2", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4_3", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv4_4", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4_4", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv5_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn5_1", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn5_2", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv5_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn5_3", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "conv5_4", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn5_4", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.vgg.VGG19.forward": [[80, 105], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "h.view.view.view", "vgg.VGG19.fc", "vgg.VGG19.bn1_1", "vgg.VGG19.bn1_2", "vgg.VGG19.bn2_1", "vgg.VGG19.bn2_2", "vgg.VGG19.bn3_1", "vgg.VGG19.bn3_2", "vgg.VGG19.bn3_3", "vgg.VGG19.bn3_4", "vgg.VGG19.bn4_1", "vgg.VGG19.bn4_2", "vgg.VGG19.bn4_3", "vgg.VGG19.bn4_4", "vgg.VGG19.bn5_1", "vgg.VGG19.bn5_2", "vgg.VGG19.bn5_3", "vgg.VGG19.bn5_4", "h.view.view.size", "vgg.VGG19.conv1_1", "vgg.VGG19.conv1_2", "vgg.VGG19.conv2_1", "vgg.VGG19.conv2_2", "vgg.VGG19.conv3_1", "vgg.VGG19.conv3_2", "vgg.VGG19.conv3_3", "vgg.VGG19.conv3_4", "vgg.VGG19.conv4_1", "vgg.VGG19.conv4_2", "vgg.VGG19.conv4_3", "vgg.VGG19.conv4_4", "vgg.VGG19.conv5_1", "vgg.VGG19.conv5_2", "vgg.VGG19.conv5_3", "vgg.VGG19.conv5_4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "F", ".", "relu", "(", "self", ".", "bn1_1", "(", "self", ".", "conv1_1", "(", "x", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn1_2", "(", "self", ".", "conv1_2", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn2_1", "(", "self", ".", "conv2_1", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn2_2", "(", "self", ".", "conv2_2", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn3_1", "(", "self", ".", "conv3_1", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn3_2", "(", "self", ".", "conv3_2", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn3_3", "(", "self", ".", "conv3_3", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn3_4", "(", "self", ".", "conv3_4", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn4_1", "(", "self", ".", "conv4_1", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn4_2", "(", "self", ".", "conv4_2", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn4_3", "(", "self", ".", "conv4_3", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn4_4", "(", "self", ".", "conv4_4", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn5_1", "(", "self", ".", "conv5_1", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn5_2", "(", "self", ".", "conv5_2", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn5_3", "(", "self", ".", "conv5_3", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn5_4", "(", "self", ".", "conv5_4", "(", "h", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "h", "=", "h", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "h", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.vgg.VGG19MCDropout.__init__": [[109, 113], ["vgg.VGG19.__init__"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "dropout_ratio", "=", "0.1", ",", "val_mc", "=", "10", ")", ":", "\n", "        ", "super", "(", "VGG19MCDropout", ",", "self", ")", ".", "__init__", "(", "num_classes", ")", "\n", "self", ".", "dropout_ratio", "=", "dropout_ratio", "\n", "self", ".", "val_mc", "=", "val_mc", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.vgg.VGG19MCDropout.forward": [[114, 140], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "h.view.view.view", "torch.dropout", "torch.dropout", "vgg.VGG19MCDropout.bn1_1", "vgg.VGG19MCDropout.bn1_2", "vgg.VGG19MCDropout.bn2_1", "vgg.VGG19MCDropout.bn2_2", "vgg.VGG19MCDropout.bn3_1", "vgg.VGG19MCDropout.bn3_2", "vgg.VGG19MCDropout.bn3_3", "vgg.VGG19MCDropout.bn3_4", "vgg.VGG19MCDropout.bn4_1", "vgg.VGG19MCDropout.bn4_2", "vgg.VGG19MCDropout.bn4_3", "vgg.VGG19MCDropout.bn4_4", "vgg.VGG19MCDropout.bn5_1", "vgg.VGG19MCDropout.bn5_2", "vgg.VGG19MCDropout.bn5_3", "vgg.VGG19MCDropout.bn5_4", "h.view.view.size", "vgg.VGG19MCDropout.fc", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "vgg.VGG19MCDropout.conv1_1", "vgg.VGG19MCDropout.conv1_2", "vgg.VGG19MCDropout.conv2_1", "vgg.VGG19MCDropout.conv2_2", "vgg.VGG19MCDropout.conv3_1", "vgg.VGG19MCDropout.conv3_2", "vgg.VGG19MCDropout.conv3_3", "vgg.VGG19MCDropout.conv3_4", "vgg.VGG19MCDropout.conv4_1", "vgg.VGG19MCDropout.conv4_2", "vgg.VGG19MCDropout.conv4_3", "vgg.VGG19MCDropout.conv4_4", "vgg.VGG19MCDropout.conv5_1", "vgg.VGG19MCDropout.conv5_2", "vgg.VGG19MCDropout.conv5_3", "vgg.VGG19MCDropout.conv5_4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "p", "=", "self", ".", "dropout_ratio", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn1_1", "(", "F", ".", "dropout", "(", "self", ".", "conv1_1", "(", "x", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn1_2", "(", "F", ".", "dropout", "(", "self", ".", "conv1_2", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn2_1", "(", "F", ".", "dropout", "(", "self", ".", "conv2_1", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn2_2", "(", "F", ".", "dropout", "(", "self", ".", "conv2_2", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn3_1", "(", "F", ".", "dropout", "(", "self", ".", "conv3_1", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn3_2", "(", "F", ".", "dropout", "(", "self", ".", "conv3_2", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn3_3", "(", "F", ".", "dropout", "(", "self", ".", "conv3_3", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn3_4", "(", "F", ".", "dropout", "(", "self", ".", "conv3_4", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn4_1", "(", "F", ".", "dropout", "(", "self", ".", "conv4_1", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn4_2", "(", "F", ".", "dropout", "(", "self", ".", "conv4_2", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn4_3", "(", "F", ".", "dropout", "(", "self", ".", "conv4_3", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn4_4", "(", "F", ".", "dropout", "(", "self", ".", "conv4_4", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn5_1", "(", "F", ".", "dropout", "(", "self", ".", "conv5_1", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn5_2", "(", "F", ".", "dropout", "(", "self", ".", "conv5_2", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn5_3", "(", "F", ".", "dropout", "(", "self", ".", "conv5_3", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn5_4", "(", "F", ".", "dropout", "(", "self", ".", "conv5_4", "(", "h", ")", ",", "p", ")", ")", ",", "inplace", "=", "True", ")", "\n", "h", "=", "F", ".", "max_pool2d", "(", "h", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "h", "=", "h", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "dropout", "(", "self", ".", "fc", "(", "h", ")", ",", "p", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.vgg.VGG19MCDropout.mc_prediction": [[141, 154], ["torchsso.utils.accumulator.TensorAccumulator", "range", "torchsso.utils.accumulator.TensorAccumulator.get", "vgg.VGG19MCDropout.forward", "torch.softmax", "torch.softmax", "torchsso.utils.accumulator.TensorAccumulator.update"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.forward"], ["", "def", "mc_prediction", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "acc_prob", "=", "TensorAccumulator", "(", ")", "\n", "m", "=", "self", ".", "val_mc", "\n", "\n", "for", "_", "in", "range", "(", "m", ")", ":", "\n", "            ", "output", "=", "self", ".", "forward", "(", "x", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "acc_prob", ".", "update", "(", "prob", ",", "scale", "=", "1", "/", "m", ")", "\n", "\n", "", "prob", "=", "acc_prob", ".", "get", "(", ")", "\n", "\n", "return", "prob", "\n", "", "", ""]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.BasicBlock.__init__": [[32, 47], ["torch.Module.__init__", "resnet_b.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet_b.conv3x3", "norm_layer", "ValueError"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.conv3x3", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "norm_layer", "=", "None", ",", "norm_stat_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ",", "momentum", "=", "norm_stat_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ",", "momentum", "=", "norm_stat_momentum", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.BasicBlock.forward": [[48, 65], ["resnet_b.BasicBlock.conv1", "resnet_b.BasicBlock.bn1", "resnet_b.BasicBlock.relu", "resnet_b.BasicBlock.conv2", "resnet_b.BasicBlock.bn2", "resnet_b.BasicBlock.relu", "resnet_b.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.Bottleneck.__init__": [[70, 86], ["torch.Module.__init__", "resnet_b.conv1x1", "norm_layer", "resnet_b.conv3x3", "norm_layer", "resnet_b.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.conv1x1", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.conv3x3", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "norm_layer", "=", "None", ",", "norm_stat_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ",", "momentum", "=", "norm_stat_momentum", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ",", "momentum", "=", "norm_stat_momentum", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ",", "momentum", "=", "norm_stat_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.Bottleneck.forward": [[87, 108], ["resnet_b.Bottleneck.conv1", "resnet_b.Bottleneck.bn1", "resnet_b.Bottleneck.relu", "resnet_b.Bottleneck.conv2", "resnet_b.Bottleneck.bn2", "resnet_b.Bottleneck.relu", "resnet_b.Bottleneck.conv3", "resnet_b.Bottleneck.bn3", "resnet_b.Bottleneck.relu", "resnet_b.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.ResNet.__init__": [[112, 153], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_b.ResNet._make_layer", "resnet_b.ResNet._make_layer", "resnet_b.ResNet._make_layer", "resnet_b.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet_b.ResNet.modules", "isinstance", "resnet_b.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "norm_layer", "=", "None", ",", "norm_stat_momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ",", "momentum", "=", "norm_stat_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "norm_stat_momentum", "=", "norm_stat_momentum", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "norm_stat_momentum", "=", "norm_stat_momentum", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "norm_stat_momentum", "=", "norm_stat_momentum", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "norm_stat_momentum", "=", "norm_stat_momentum", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.ResNet._make_layer": [[154, 174], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_b.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "norm_layer", "=", "None", ",", "norm_stat_momentum", "=", "0.1", ")", ":", "\n", "        ", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "norm_stat_momentum", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "norm_layer", ",", "norm_stat_momentum", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "norm_layer", "=", "norm_layer", ",", "norm_stat_momentum", "=", "norm_stat_momentum", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.ResNet.forward": [[175, 191], ["resnet_b.ResNet.conv1", "resnet_b.ResNet.bn1", "resnet_b.ResNet.relu", "resnet_b.ResNet.maxpool", "resnet_b.ResNet.layer1", "resnet_b.ResNet.layer2", "resnet_b.ResNet.layer3", "resnet_b.ResNet.layer4", "resnet_b.ResNet.avgpool", "resnet_b.ResNet.view", "resnet_b.ResNet.fc", "resnet_b.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.conv3x3": [[18, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.conv1x1": [[24, 27], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.resnet18": [[193, 203], ["resnet_b.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.resnet34": [[205, 215], ["resnet_b.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.resnet50": [[217, 227], ["resnet_b.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.resnet101": [[229, 239], ["resnet_b.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.resnet152": [[241, 251], ["resnet_b.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.resnext50_32x4d": [[253, 258], ["resnet_b.ResNet"], "function", ["None"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "groups", "=", "32", ",", "width_per_group", "=", "4", ",", "**", "kwargs", ")", "\n", "# if pretrained:", "\n", "#     model.load_state_dict(model_zoo.load_url(model_urls['resnext50_32x4d']))", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet_b.resnext101_32x8d": [[260, 265], ["resnet_b.ResNet"], "function", ["None"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "groups", "=", "32", ",", "width_per_group", "=", "8", ",", "**", "kwargs", ")", "\n", "# if pretrained:", "\n", "#     model.load_state_dict(model_zoo.load_url(model_urls['resnext101_32x8d']))", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.lenet.LeNet5.__init__": [[8, 15], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.lenet.LeNet5.forward": [[16, 26], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "lenet.LeNet5.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lenet.LeNet5.fc3", "lenet.LeNet5.conv1", "lenet.LeNet5.conv2", "lenet.LeNet5.size", "lenet.LeNet5.fc1", "lenet.LeNet5.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.lenet.LeNet5MCDropout.__init__": [[30, 34], ["lenet.LeNet5.__init__"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "dropout_ratio", "=", "0.1", ",", "val_mc", "=", "10", ")", ":", "\n", "        ", "super", "(", "LeNet5MCDropout", ",", "self", ")", ".", "__init__", "(", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "dropout_ratio", "=", "dropout_ratio", "\n", "self", ".", "val_mc", "=", "val_mc", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.lenet.LeNet5MCDropout.forward": [[35, 46], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.dropout.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.size", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "lenet.LeNet5MCDropout.fc2", "lenet.LeNet5MCDropout.conv1", "lenet.LeNet5MCDropout.conv2", "lenet.LeNet5MCDropout.fc1", "lenet.LeNet5MCDropout.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "p", "=", "self", ".", "dropout_ratio", "\n", "out", "=", "F", ".", "relu", "(", "F", ".", "dropout", "(", "self", ".", "conv1", "(", "x", ")", ",", "p", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "F", ".", "relu", "(", "F", ".", "dropout", "(", "self", ".", "conv2", "(", "out", ")", ",", "p", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "F", ".", "dropout", "(", "self", ".", "fc1", "(", "out", ")", ",", "p", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "F", ".", "dropout", "(", "self", ".", "fc2", "(", "out", ")", ",", "p", ")", ")", "\n", "out", "=", "F", ".", "dropout", "(", "self", ".", "fc3", "(", "out", ")", ",", "p", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.lenet.LeNet5MCDropout.mc_prediction": [[47, 60], ["torchsso.utils.accumulator.TensorAccumulator", "range", "torchsso.utils.accumulator.TensorAccumulator.get", "lenet.LeNet5MCDropout.forward", "torch.softmax", "torch.softmax", "torchsso.utils.accumulator.TensorAccumulator.update"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.forward"], ["", "def", "mc_prediction", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "acc_prob", "=", "TensorAccumulator", "(", ")", "\n", "m", "=", "self", ".", "val_mc", "\n", "\n", "for", "_", "in", "range", "(", "m", ")", ":", "\n", "            ", "output", "=", "self", ".", "forward", "(", "x", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "acc_prob", ".", "update", "(", "prob", ",", "scale", "=", "1", "/", "m", ")", "\n", "\n", "", "prob", "=", "acc_prob", ".", "get", "(", ")", "\n", "\n", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.lenet.LeNet5BatchNorm.__init__": [[63, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "affine", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "6", ",", "affine", "=", "affine", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "16", ",", "affine", "=", "affine", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "120", ",", "affine", "=", "affine", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "84", ",", "affine", "=", "affine", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.lenet.LeNet5BatchNorm.forward": [[75, 85], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "lenet.LeNet5BatchNorm.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lenet.LeNet5BatchNorm.fc3", "lenet.LeNet5BatchNorm.bn1", "lenet.LeNet5BatchNorm.bn2", "lenet.LeNet5BatchNorm.size", "lenet.LeNet5BatchNorm.bn3", "lenet.LeNet5BatchNorm.bn4", "lenet.LeNet5BatchNorm.conv1", "lenet.LeNet5BatchNorm.conv2", "lenet.LeNet5BatchNorm.fc1", "lenet.LeNet5BatchNorm.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "fc1", "(", "out", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "fc2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet.BasicBlock.__init__": [[17, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "track_running_stats", "=", "False", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet.BasicBlock.forward": [[31, 37], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet.Bottleneck.__init__": [[42, 56], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "track_running_stats", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet.Bottleneck.forward": [[58, 65], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet.ResNet.__init__": [[68, 79], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet.ResNet._make_layer": [[80, 87], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet.ResNet.forward": [[88, 98], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet.ResNet18": [[100, 102], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet.ResNet34": [[103, 105], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet.ResNet50": [[106, 108], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet.ResNet101": [[109, 111], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet.ResNet152": [[112, 114], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "num_classe", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet.test": [[116, 120], ["resnet.ResNet18", "ResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.alexnet.AlexNet.__init__": [[15, 23], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "256", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.alexnet.AlexNet.forward": [[24, 36], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "alexnet.AlexNet.view", "alexnet.AlexNet.fc", "alexnet.AlexNet.conv1", "alexnet.AlexNet.conv2", "alexnet.AlexNet.conv3", "alexnet.AlexNet.conv4", "alexnet.AlexNet.conv5", "alexnet.AlexNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv4", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv5", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.alexnet.AlexNet2.__init__": [[40, 58], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "AlexNet2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "5", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "256", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.alexnet.AlexNet2.forward": [[59, 64], ["alexnet.AlexNet2.features", "alexnet.AlexNet2.view", "alexnet.AlexNet2.classifier", "alexnet.AlexNet2.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.alexnet.AlexNetMCDropout.__init__": [[42, 46], ["alexnet.AlexNet.__init__"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__"], ["self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "5", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.alexnet.AlexNetMCDropout.forward": [[47, 60], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "alexnet.AlexNetMCDropout.view", "alexnet.AlexNetMCDropout.fc", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "alexnet.AlexNetMCDropout.size", "alexnet.AlexNetMCDropout.conv1", "alexnet.AlexNetMCDropout.conv2", "alexnet.AlexNetMCDropout.conv3", "alexnet.AlexNetMCDropout.conv4", "alexnet.AlexNetMCDropout.conv5"], "methods", ["None"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "256", ",", "num_classes", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.alexnet.AlexNetMCDropout.mc_prediction": [[87, 100], ["torchsso.utils.accumulator.TensorAccumulator", "range", "torchsso.utils.accumulator.TensorAccumulator.get", "alexnet.AlexNetMCDropout.forward", "torch.softmax", "torch.softmax", "torchsso.utils.accumulator.TensorAccumulator.update"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.forward"], ["", "def", "mc_prediction", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "acc_prob", "=", "TensorAccumulator", "(", ")", "\n", "m", "=", "self", ".", "val_mc", "\n", "\n", "for", "_", "in", "range", "(", "m", ")", ":", "\n", "            ", "output", "=", "self", ".", "forward", "(", "x", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "acc_prob", ".", "update", "(", "prob", ",", "scale", "=", "1", "/", "m", ")", "\n", "\n", "", "prob", "=", "acc_prob", ".", "get", "(", ")", "\n", "\n", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.alexnet.alexnet": [[76, 82], ["alexnet.AlexNet"], "function", ["None"], ["x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "F", ".", "dropout", "(", "self", ".", "conv2", "(", "x", ")", ",", "p", "=", "dropout_ratio", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "F", ".", "dropout", "(", "self", ".", "conv3", "(", "x", ")", ",", "p", "=", "dropout_ratio", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "F", ".", "dropout", "(", "self", ".", "conv4", "(", "x", ")", ",", "p", "=", "dropout_ratio", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "F", ".", "dropout", "(", "self", ".", "conv5", "(", "x", ")", ",", "p", "=", "dropout_ratio", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.alexnet.alexnet_mcdropout": [[84, 87], ["alexnet.AlexNetMCDropout"], "function", ["None"], ["x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "def", "mc_prediction", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.Block.__init__": [[14, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "cardinality", "*", "bottleneck_width", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "group_width", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.Block.forward": [[31, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn3", "resnext.Block.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn1", "resnext.Block.bn2", "resnext.Block.conv3", "resnext.Block.conv1", "resnext.Block.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt.__init__": [[41, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "cardinality", ",", "bottleneck_width", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", "# self.layer4 = self._make_layer(num_blocks[3], 2)", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cardinality", "*", "bottleneck_width", "*", "8", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt._make_layer": [[55, 64], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "resnext.Block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "Block", "(", "self", ".", "in_planes", ",", "self", ".", "cardinality", ",", "self", ".", "bottleneck_width", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "Block", ".", "expansion", "*", "self", ".", "cardinality", "*", "self", ".", "bottleneck_width", "\n", "# Increase bottleneck_width by 2 after each stage.", "\n", "", "self", ".", "bottleneck_width", "*=", "2", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt.forward": [[65, 75], ["torch.relu", "torch.relu", "torch.relu", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnext.ResNeXt.view", "resnext.ResNeXt.linear", "resnext.ResNeXt.bn1", "resnext.ResNeXt.size", "resnext.ResNeXt.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# out = self.layer4(out)", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt29_2x64d": [[77, 79], ["resnext.ResNeXt"], "function", ["None"], ["", "", "def", "ResNeXt29_2x64d", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "2", ",", "bottleneck_width", "=", "64", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt29_4x64d": [[80, 82], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_4x64d", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "4", ",", "bottleneck_width", "=", "64", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt29_8x64d": [[83, 85], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_8x64d", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "8", ",", "bottleneck_width", "=", "64", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt29_32x4d": [[86, 88], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_32x4d", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.test_resnext": [[89, 94], ["resnext.ResNeXt29_2x64d", "torch.randn", "torch.randn", "torch.randn", "ResNeXt29_2x64d.", "print", "net.size"], "function", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.resnext.ResNeXt29_2x64d"], ["", "def", "test_resnext", "(", ")", ":", "\n", "    ", "net", "=", "ResNeXt29_2x64d", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.vgg.test": [[41, 46], ["vgg.VGG", "torch.randn", "torch.randn", "VGG.", "print", "net.size"], "function", ["None"], ["\n", "", "", "class", "VGG19", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "VGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.mlp.MLP.__init__": [[10, 17], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "n_hid", "=", "1000", "\n", "n_out", "=", "10", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "28", "*", "28", ",", "n_hid", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_hid", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Linear", "(", "n_hid", ",", "n_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.mlp.MLP.forward": [[18, 24], ["mlp.MLP.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mlp.MLP.l3", "mlp.MLP.l1", "mlp.MLP.l2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "[", "-", "1", ",", "28", "*", "28", "]", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "l2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "l3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.mlp.mlp": [[26, 29], ["mlp.MLP"], "function", ["None"], ["", "", "def", "mlp", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "MLP", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.alexnet.AlexNetMCDropout.prediction": [[61, 74], ["torchsso.utils.accumulator.TensorAccumulator", "range", "torchsso.utils.accumulator.TensorAccumulator.get", "alexnet.AlexNetMCDropout.forward", "torch.softmax", "torch.softmax", "torchsso.utils.accumulator.TensorAccumulator.update"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.forward"], ["x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "AlexNetMCDropout", "(", "AlexNet", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "dropout_ratio", "=", "0.5", ",", "val_mc", "=", "10", ")", ":", "\n", "        ", "super", "(", "AlexNetMCDropout", ",", "self", ")", ".", "__init__", "(", "num_classes", ")", "\n", "self", ".", "dropout_ratio", "=", "dropout_ratio", "\n", "self", ".", "val_mc", "=", "val_mc", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "dropout_ratio", "=", "self", ".", "dropout_ratio", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__": [[233, 264], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "zip", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "ValueError", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.__init__"], ["val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "batch_size", "=", "args", ".", "val_batch_size", ",", "shuffle", "=", "False", ",", "\n", "sampler", "=", "val_sampler", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "# Setup model", "\n", "if", "args", ".", "arch_file", "is", "None", ":", "\n", "        ", "arch_class", "=", "getattr", "(", "models", ",", "args", ".", "arch_name", ")", "\n", "", "else", ":", "\n", "        ", "_", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "args", ".", "arch_file", ")", "\n", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "arch_file", ")", "\n", "\n", "if", "dirname", "==", "''", ":", "\n", "            ", "module_path", "=", "args", ".", "arch_file", ".", "replace", "(", "ext", ",", "''", ")", "\n", "", "elif", "dirname", "==", "'.'", ":", "\n", "            ", "module_path", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "arch_file", ")", ".", "replace", "(", "ext", ",", "''", ")", "\n", "", "else", ":", "\n", "            ", "module_path", "=", "'.'", ".", "join", "(", "os", ".", "path", ".", "split", "(", "args", ".", "arch_file", ")", ")", ".", "replace", "(", "ext", ",", "''", ")", "\n", "\n", "", "module", "=", "import_module", "(", "module_path", ")", "\n", "arch_class", "=", "getattr", "(", "module", ",", "args", ".", "arch_name", ")", "\n", "\n", "", "arch_kwargs", "=", "{", "}", "if", "args", ".", "arch_args", "is", "None", "else", "args", ".", "arch_args", "\n", "arch_kwargs", "[", "'num_classes'", "]", "=", "num_classes", "\n", "\n", "model", "=", "arch_class", "(", "**", "arch_kwargs", ")", "\n", "setattr", "(", "model", ",", "'num_classes'", ",", "num_classes", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "# [COMM] Broadcast model parameters", "\n", "for", "param", "in", "list", "(", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "dist", ".", "broadcast", "(", "param", ".", "data", ",", "src", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.MLP.forward": [[265, 276], ["x.view.view.view", "main.MLP.output_layer", "main.MLP.act", "torch.squeeze().view", "torch.squeeze().view", "torch.squeeze().view", "torch.squeeze().view", "layer", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["None"], ["# Setup optimizer", "\n", "", "optim_kwargs", "=", "{", "}", "if", "args", ".", "optim_args", "is", "None", "else", "args", ".", "optim_args", "\n", "acc_steps", "=", "optim_kwargs", ".", "get", "(", "'acc_steps'", ",", "1", ")", "\n", "global_batch_size", "=", "num_data_group", "*", "args", ".", "batch_size", "*", "acc_steps", "\n", "total_steps", "=", "math", ".", "ceil", "(", "args", ".", "epochs", "*", "len", "(", "train_loader", ".", "dataset", ")", "/", "global_batch_size", ")", "\n", "\n", "# Setup optimizer", "\n", "if", "args", ".", "optim_name", "==", "DistributedVIOptimizer", ".", "__name__", ":", "\n", "        ", "optimizer", "=", "DistributedVIOptimizer", "(", "model", ",", "\n", "mc_group_id", "=", "mc_group_id", ",", "\n", "dataset_size", "=", "len", "(", "train_loader", ".", "dataset", ")", "*", "args", ".", "dataset_size_scale", ",", "\n", "total_steps", "=", "total_steps", ",", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.main": [[20, 222], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.device", "torch.device", "sklearn.datasets.make_blobs", "numpy.meshgrid", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "dict", "main.MLP", "model1.to.to", "torch.optim.Adam", "torch.optim.Adam", "pickle.loads", "model2.to.to", "torchsso.optim.VOGN", "print", "print", "model1.to.children", "print", "vars().items", "print", "print", "print", "print", "range", "imageio.mimsave", "torch.cuda.is_available", "torch.cuda.is_available", "numpy.arange", "numpy.arange", "model1.to.parameters", "pickle.dumps", "print", "print", "model1.to.train", "model2.to.train", "print", "images.append", "X[].min", "X[].max", "X[].min", "X[].max", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "vars", "torch.optim.Adam.step", "torchsso.optim.VOGN.step", "imageio.imread", "os.remove", "data.to", "target.to", "torch.optim.Adam.zero_grad", "model1.to.", "torch.binary_cross_entropy_with_logits", "F.binary_cross_entropy_with_logits.backward", "torchsso.optim.VOGN.zero_grad", "model2.to.", "torch.binary_cross_entropy_with_logits", "F.binary_cross_entropy_with_logits.backward", "matplotlib.figure", "plt.figure.add_gridspec", "plt.figure.add_subplot", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_title", "plt.figure.add_subplot", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_title", "plt.figure.add_subplot", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_title", "model1.to.eval", "model2.to.eval", "torch.sigmoid().view", "torch.sigmoid().view", "main.get_entropy", "torch.round().detach().cpu().numpy", "torch.round().detach().cpu().numpy", "fig.add_subplot.contour", "ax1.contour.collections[].set_label", "fig.add_subplot.pcolormesh", "plt.figure.colorbar", "torchsso.optim.VOGN.prediction", "optimizer2.prediction().view.view", "main.get_entropy", "fig.add_subplot.pcolormesh", "plt.figure.colorbar", "torchsso.optim.VOGN.prediction().view", "torch.round().detach().cpu().numpy", "torch.round().detach().cpu().numpy", "fig.add_subplot.contour", "ax1.contour.collections[].set_label", "zip", "fig.add_subplot.grid", "fig.add_subplot.grid", "fig.add_subplot.grid", "fig.add_subplot.set_yticks", "fig.add_subplot.set_yticks", "fig.add_subplot.set_yticks", "fig.add_subplot.legend", "fig.add_subplot.set_aspect", "matplotlib.tight_layout", "os.path.join", "plt.figure.savefig", "matplotlib.close", "figpaths.append", "int", "int", "torch.from_numpy", "torch.from_numpy", "torch.round().detach().cpu().numpy().reshape", "torch.round().detach().cpu().numpy().reshape", "fig.add_subplot.contour", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "os.path.isdir", "os.makedirs", "torch.sigmoid", "torch.sigmoid", "torch.round().detach().cpu", "torch.round().detach().cpu", "torchsso.optim.VOGN.prediction", "torch.round().detach().cpu", "torch.round().detach().cpu", "model1.to.", "torch.round().detach().cpu().numpy", "torch.round().detach().cpu().numpy", "torch.round().detach", "torch.round().detach", "torch.round().detach", "torch.round().detach", "xx.ravel", "yy.ravel", "len", "torch.round().detach().cpu", "torch.round().detach().cpu", "len", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round().detach", "torch.round().detach", "torch.round", "torch.round"], "function", ["home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.classification.main.train", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.classification.main.train", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.get_entropy", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.alexnet.AlexNetMCDropout.prediction", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.get_entropy", "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.models.alexnet.AlexNetMCDropout.prediction"], ["DATASET_CIFAR10", "=", "'CIFAR-10'", "\n", "DATASET_CIFAR100", "=", "'CIFAR-100'", "\n", "DATASET_IMAGENET", "=", "'ImageNet'", "\n", "\n", "\n", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# Data", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "DATASET_CIFAR10", ",", "DATASET_CIFAR100", ",", "DATASET_IMAGENET", "]", ",", "\n", "default", "=", "DATASET_CIFAR10", ",", "\n", "help", "=", "'name of dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ",", "default", "=", "'./data'", ",", "\n", "help", "=", "'root of dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_root'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'root of train dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_root'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'root of validate dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'number of epochs to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'input batch size for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "'input batch size for valing'", ")", "\n", "parser", ".", "add_argument", "(", "'--normalizing_data'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'[data pre processing] normalizing data'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_crop'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'[data augmentation] random crop'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_resized_crop'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'[data augmentation] random resised crop'", ")", "\n", "parser", ".", "add_argument", "(", "'--random_horizontal_flip'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'[data augmentation] random horizontal flip'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_size_scale'", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "\n", "help", "=", "'ratio multiplied to the actual dataset size'", ")", "\n", "# Training Settings", "\n", "parser", ".", "add_argument", "(", "'--arch_file'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'name of file which defines the architecture'", ")", "\n", "parser", ".", "add_argument", "(", "'--arch_name'", ",", "type", "=", "str", ",", "default", "=", "'LeNet5'", ",", "\n", "help", "=", "'name of the architecture'", ")", "\n", "parser", ".", "add_argument", "(", "'--arch_args'", ",", "type", "=", "json", ".", "loads", ",", "default", "=", "None", ",", "\n", "help", "=", "'[JSON] arguments for the architecture'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_name'", ",", "type", "=", "str", ",", "default", "=", "DistributedSecondOrderOptimizer", ".", "__name__", ",", "\n", "help", "=", "'name of the optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim_args'", ",", "type", "=", "json", ".", "loads", ",", "default", "=", "None", ",", "\n", "help", "=", "'[JSON] arguments for the optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--curv_args'", ",", "type", "=", "json", ".", "loads", ",", "default", "=", "dict", "(", ")", ",", "\n", "help", "=", "'[JSON] arguments for the curvature'", ")", "\n", "parser", ".", "add_argument", "(", "'--fisher_args'", ",", "type", "=", "json", ".", "loads", ",", "default", "=", "dict", "(", ")", ",", "\n", "help", "=", "'[JSON] arguments for the fisher'", ")", "\n", "parser", ".", "add_argument", "(", "'--scheduler_name'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'name of the learning rate scheduler'", ")", "\n", "parser", ".", "add_argument", "(", "'--scheduler_args'", ",", "type", "=", "json", ".", "loads", ",", "default", "=", "None", ",", "\n", "help", "=", "'[JSON] arguments for the scheduler'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_epochs'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'number of epochs for warmup lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_scheduler_name'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'name of the learning rate scheduler'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_scheduler_args'", ",", "type", "=", "json", ".", "loads", ",", "default", "=", "None", ",", "\n", "help", "=", "'[JSON] arguments for the wamup scheduler'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum_correction'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if True, momentum/LR ratio is kept to be constant'", ")", "\n", "parser", ".", "add_argument", "(", "'--non_wd_for_bn'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'(FirstOrderOptimizer only) if True, weight decay is not applied for BatchNorm'", ")", "\n", "parser", ".", "add_argument", "(", "'--lars'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if True, LARS is applied for first-order optimizer'", ")", "\n", "# Options", "\n", "parser", ".", "add_argument", "(", "'--download'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'if True, downloads the dataset (CIFAR-10 or 100) from the internet'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'number of sub processes for data loading'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_file_name'", ",", "type", "=", "str", ",", "default", "=", "'log'", ",", "\n", "help", "=", "'log file name'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_interval'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'how many epochs to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'checkpoint path for resume training'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "type", "=", "str", ",", "default", "=", "'result'", ",", "\n", "help", "=", "'dir to save output files'", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "default", "=", "None", ",", "\n", "help", "=", "'config file path'", ")", "\n", "# [COMM]", "\n", "parser", ".", "add_argument", "(", "'--dist_init_method'", ",", "type", "=", "str", ",", "\n", "help", "=", "'torch.distributed init_method'", ")", "\n", "parser", ".", "add_argument", "(", "'--size_data_group'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'size of the process groups in which input data are shared'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_mc_groups'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'number of the process groups in which mc sampled params are shared'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "dict_args", "=", "vars", "(", "args", ")", "\n", "\n", "# Load config file", "\n", "if", "args", ".", "config", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "config", ")", "as", "f", ":", "\n", "            ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "dict_args", ".", "update", "(", "config", ")", "\n", "\n", "# Set random seed", "\n", "", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# [COMM] Initialize process group", "\n", "comm", "=", "MPI", ".", "COMM_WORLD", "\n", "size", "=", "comm", ".", "Get_size", "(", ")", "\n", "ranks", "=", "list", "(", "range", "(", "size", ")", ")", "\n", "rank", "=", "comm", ".", "Get_rank", "(", ")", "\n", "n_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "device", "=", "rank", "%", "n_per_node", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "init_method", "=", "'tcp://{}:23456'", ".", "format", "(", "args", ".", "dist_init_method", ")", "\n", "dist", ".", "init_process_group", "(", "'nccl'", ",", "init_method", "=", "init_method", ",", "world_size", "=", "size", ",", "rank", "=", "rank", ")", "\n", "\n", "# [COMM] Setup process group for MC sample parallel", "\n", "size_data_group", "=", "args", ".", "size_data_group", "\n", "assert", "size", "%", "size_data_group", "==", "0", "\n", "num_mc_groups", "=", "args", ".", "num_mc_groups", "\n", "assert", "size", "%", "num_mc_groups", "==", "0", "\n", "\n", "if", "size_data_group", ">", "1", ":", "\n", "        ", "num_data_group", "=", "size", "/", "size_data_group", "\n", "data_group_id", "=", "rank", "%", "num_data_group", "\n", "data_group_ranks", "=", "ranks", "[", "data_group_id", ":", "size", ":", "num_data_group", "]", "\n", "data_group", "=", "dist", ".", "new_group", "(", "data_group_ranks", ")", "\n", "\n", "master_ranks", "=", "ranks", "[", "0", ":", "num_data_group", "]", "\n", "master_group", "=", "dist", ".", "new_group", "(", "master_ranks", ")", "\n", "", "else", ":", "\n", "        ", "num_data_group", "=", "size", "\n", "data_group_id", "=", "rank", "\n", "data_group", "=", "None", "\n", "master_group", "=", "dist", ".", "new_group", "(", "ranks", ")", "\n", "\n", "", "if", "num_mc_groups", ">", "1", ":", "\n", "        ", "size_mc_group", "=", "int", "(", "size", "/", "num_mc_groups", ")", "\n", "mc_group_id", "=", "int", "(", "rank", "/", "size_mc_group", ")", "\n", "", "else", ":", "\n", "        ", "size_mc_group", "=", "size", "\n", "mc_group_id", "=", "0", "\n", "\n", "# Setup data augmentation & data pre processing", "\n", "", "train_transforms", ",", "val_transforms", "=", "[", "]", ",", "[", "]", "\n", "\n", "if", "args", ".", "dataset", "in", "[", "DATASET_CIFAR10", ",", "DATASET_CIFAR100", "]", ":", "\n", "# CIFAR-10/100", "\n", "        ", "if", "args", ".", "random_crop", ":", "\n", "            ", "train_transforms", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ")", "\n", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "\n", "", "else", ":", "\n", "# ImageNet", "\n", "        ", "if", "args", ".", "random_resized_crop", ":", "\n", "            ", "train_transforms", ".", "append", "(", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ")", "\n", "", "else", ":", "\n", "            ", "train_transforms", ".", "append", "(", "transforms", ".", "Resize", "(", "256", ")", ")", "\n", "if", "args", ".", "random_crop", ":", "\n", "                ", "train_transforms", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "224", ")", ")", "\n", "", "else", ":", "\n", "                ", "train_transforms", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "224", ")", ")", "\n", "\n", "", "", "normalize", "=", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "Resize", "(", "256", ")", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "224", ")", ")", "\n", "\n", "", "if", "args", ".", "random_horizontal_flip", ":", "\n", "        ", "train_transforms", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "\n", "", "train_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "\n", "if", "args", ".", "normalizing_data", ":", "\n", "        ", "train_transforms", ".", "append", "(", "normalize", ")", "\n", "val_transforms", ".", "append", "(", "normalize", ")", "\n", "\n", "", "train_transform", "=", "transforms", ".", "Compose", "(", "train_transforms", ")", "\n", "val_transform", "=", "transforms", ".", "Compose", "(", "val_transforms", ")", "\n", "\n", "# Setup data loader", "\n", "if", "args", ".", "dataset", "==", "DATASET_IMAGENET", ":", "\n", "# ImageNet", "\n", "        ", "num_classes", "=", "1000", "\n", "\n", "train_root", "=", "args", ".", "root", "if", "args", ".", "train_root", "is", "None", "else", "args", ".", "train_root", "\n", "val_root", "=", "args", ".", "root", "if", "args", ".", "val_root", "is", "None", "else", "args", ".", "val_root", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "train_root", ",", "transform", "=", "train_transform", ")", "\n", "val_dataset", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "val_root", ",", "transform", "=", "val_transform", ")", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "dataset", "==", "DATASET_CIFAR10", ":", "\n", "# CIFAR-10", "\n", "            ", "num_classes", "=", "10", "\n", "dataset_class", "=", "datasets", ".", "CIFAR10", "\n", "", "else", ":", "\n", "# CIFAR-100", "\n", "            ", "num_classes", "=", "100", "\n", "dataset_class", "=", "datasets", ".", "CIFAR100", "\n", "\n", "", "train_dataset", "=", "dataset_class", "(", "\n", "root", "=", "args", ".", "root", ",", "train", "=", "True", ",", "download", "=", "args", ".", "download", ",", "transform", "=", "train_transform", ")", "\n", "val_dataset", "=", "dataset_class", "(", "\n", "root", "=", "args", ".", "root", ",", "train", "=", "False", ",", "download", "=", "args", ".", "download", ",", "transform", "=", "val_transform", ")", "\n"]], "home.repos.pwc.inspect_result.team-approx-bayes_dl-with-bayes.toy_example.main.get_entropy": [[224, 230], ["entropy.detach().cpu().numpy.detach().cpu().numpy", "torch.log", "torch.log", "torch.log", "torch.log", "entropy.detach().cpu().numpy.detach().cpu", "entropy.detach().cpu().numpy.detach"], "function", ["None"], ["# [COMM] Setup distributed sampler for data parallel & MC sample parallel", "\n", "", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "train_dataset", ",", "num_replicas", "=", "num_data_group", ",", "rank", "=", "data_group_id", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n"]]}