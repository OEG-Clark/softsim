{"home.repos.pwc.inspect_result.yaodongyu_projnorm.None.load_data.load_cifar10_image": [[8, 64], ["torchvision.Compose", "torchvision.CIFAR10", "torch.manual_seed", "torch.cuda.manual_seed", "torch.randperm", "numpy.array", "torch.utils.data.Subset.targets[].tolist", "os.path.join", "os.path.join", "list", "torch.utils.data.Subset", "print", "torch.utils.data.Subset", "print", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "numpy.load", "int", "int", "torch.randperm", "len", "torch.randperm", "len", "numpy.load"], "function", ["None"], ["def", "load_cifar10_image", "(", "corruption_type", ",", "\n", "clean_cifar_path", ",", "\n", "corruption_cifar_path", ",", "\n", "corruption_severity", "=", "0", ",", "\n", "datatype", "=", "'test'", ",", "\n", "num_samples", "=", "50000", ",", "\n", "seed", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Returns:\n        pytorch dataset object\n    \"\"\"", "\n", "assert", "datatype", "==", "'test'", "or", "datatype", "==", "'train'", "\n", "training_flag", "=", "True", "if", "datatype", "==", "'train'", "else", "False", "\n", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", ")", "\n", "\n", "dataset", "=", "datasets", ".", "CIFAR10", "(", "clean_cifar_path", ",", "\n", "train", "=", "training_flag", ",", "\n", "transform", "=", "transform", ",", "\n", "download", "=", "True", ")", "\n", "\n", "if", "corruption_severity", ">", "0", ":", "\n", "        ", "assert", "not", "training_flag", "\n", "path_images", "=", "os", ".", "path", ".", "join", "(", "corruption_cifar_path", ",", "corruption_type", "+", "'.npy'", ")", "\n", "path_labels", "=", "os", ".", "path", ".", "join", "(", "corruption_cifar_path", ",", "'labels.npy'", ")", "\n", "\n", "dataset", ".", "data", "=", "np", ".", "load", "(", "path_images", ")", "[", "(", "corruption_severity", "-", "1", ")", "*", "10000", ":", "corruption_severity", "*", "10000", "]", "\n", "dataset", ".", "targets", "=", "list", "(", "np", ".", "load", "(", "path_labels", ")", "[", "(", "corruption_severity", "-", "1", ")", "*", "10000", ":", "corruption_severity", "*", "10000", "]", ")", "\n", "dataset", ".", "targets", "=", "[", "int", "(", "item", ")", "for", "item", "in", "dataset", ".", "targets", "]", "\n", "\n", "# randomly permute data", "\n", "", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "number_samples", "=", "dataset", ".", "data", ".", "shape", "[", "0", "]", "\n", "index_permute", "=", "torch", ".", "randperm", "(", "number_samples", ")", "\n", "dataset", ".", "data", "=", "dataset", ".", "data", "[", "index_permute", "]", "\n", "dataset", ".", "targets", "=", "np", ".", "array", "(", "[", "int", "(", "item", ")", "for", "item", "in", "dataset", ".", "targets", "]", ")", "\n", "dataset", ".", "targets", "=", "dataset", ".", "targets", "[", "index_permute", "]", ".", "tolist", "(", ")", "\n", "\n", "# randomly subsample data", "\n", "if", "datatype", "==", "'train'", "and", "num_samples", "<", "50000", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "50000", ")", "[", ":", "num_samples", "]", "\n", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "dataset", ",", "indices", ")", "\n", "print", "(", "'number of training data: '", ",", "len", "(", "dataset", ")", ")", "\n", "", "if", "datatype", "==", "'test'", "and", "num_samples", "<", "10000", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "10000", ")", "[", ":", "num_samples", "]", "\n", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "dataset", ",", "indices", ")", "\n", "print", "(", "'number of test data: '", ",", "len", "(", "dataset", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.yaodongyu_projnorm.None.projnorm.ProjNorm.__init__": [[28, 34], ["super().__init__", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.yaodongyu_projnorm.None.projnorm.ProjNorm.__init__"], ["def", "__init__", "(", "self", ",", "base_model", ")", ":", "\n", "        ", "super", "(", "ProjNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_model", "=", "copy", ".", "deepcopy", "(", "base_model", ")", "\n", "self", ".", "reference_model", "=", "copy", ".", "deepcopy", "(", "base_model", ")", "\n", "self", ".", "pseudo_model", "=", "None", "\n", "self", ".", "max_epochs", "=", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.yaodongyu_projnorm.None.projnorm.ProjNorm.update_pseudo_model": [[35, 81], ["torch.SGD", "torch.SGD", "torch.SGD", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "iter", "range", "pseudo_model.eval", "copy.deepcopy", "print", "pseudo_model.parameters", "pseudo_model.train", "inputs.cuda.cuda.cuda", "projnorm.ProjNorm.base_model().max", "pseudo_labels.detach.detach.detach", "torch.SGD.zero_grad", "pseudo_model", "torch.CrossEntropyLoss().cuda.", "nn.CrossEntropyLoss().cuda.backward", "torch.SGD.step", "torch.lr_scheduler.CosineAnnealingLR.step", "pseudo_model.max", "pseudo_labels.detach.detach.size", "predicted.eq().sum().item", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "next", "print", "nn.CrossEntropyLoss().cuda.item", "inputs.cuda.cuda.size", "print", "iter", "next", "projnorm.ProjNorm.base_model", "predicted.eq().sum", "predicted.eq"], "methods", ["home.repos.pwc.inspect_result.yaodongyu_projnorm.None.init_ref_model.train"], ["", "def", "update_pseudo_model", "(", "self", ",", "data_loader", ",", "pseudo_model", ",", "lr", ",", "pseudo_iters", ")", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "pseudo_model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "pseudo_iters", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "trainloader_iterator", "=", "iter", "(", "data_loader", ")", "\n", "\n", "for", "iteration", "in", "range", "(", "1", ",", "pseudo_iters", "+", "1", ")", ":", "\n", "            ", "pseudo_model", ".", "train", "(", ")", "\n", "\n", "try", ":", "\n", "                ", "inputs", ",", "targets", "=", "next", "(", "trainloader_iterator", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "trainloader_iterator", "=", "iter", "(", "data_loader", ")", "\n", "inputs", ",", "targets", "=", "next", "(", "trainloader_iterator", ")", "\n", "", "if", "iteration", "==", "1", ":", "\n", "                ", "print", "(", "'targets[:10]:'", ",", "targets", "[", ":", "10", "]", ")", "\n", "\n", "", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "# pseudo-label by base_model", "\n", "_", ",", "pseudo_labels", "=", "self", ".", "base_model", "(", "inputs", ")", ".", "max", "(", "1", ")", "\n", "pseudo_labels", "=", "pseudo_labels", ".", "detach", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "pseudo_model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "pseudo_labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "train_loss", "=", "loss", ".", "item", "(", ")", "*", "inputs", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "=", "pseudo_labels", ".", "size", "(", "0", ")", "\n", "correct", "=", "predicted", ".", "eq", "(", "pseudo_labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "iteration", "%", "20", "==", "0", ":", "\n", "                ", "current_lr", "=", "0.0", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "current_lr", "=", "param_group", "[", "'lr'", "]", "\n", "", "print", "(", "'iteration {}: train loss: {:.6f}, train acc: {:.6f}, current lr: {:.6f}'", ".", "format", "(", "iteration", ",", "\n", "train_loss", "/", "total", ",", "\n", "correct", "/", "total", ",", "\n", "current_lr", ")", ")", "\n", "", "", "pseudo_model", ".", "eval", "(", ")", "\n", "self", ".", "pseudo_model", "=", "copy", ".", "deepcopy", "(", "pseudo_model", ")", "\n", "print", "(", "'========Pseudo-training finished========'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaodongyu_projnorm.None.projnorm.ProjNorm.update_ref_model": [[82, 124], ["torch.SGD", "torch.SGD", "torch.SGD", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.lr_scheduler.CosineAnnealingLR", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "torch.CrossEntropyLoss().cuda", "iter", "range", "ref_model.eval", "copy.deepcopy", "print", "ref_model.parameters", "ref_model.train", "torch.SGD.zero_grad", "ref_model", "torch.CrossEntropyLoss().cuda.", "nn.CrossEntropyLoss().cuda.backward", "torch.SGD.step", "torch.lr_scheduler.CosineAnnealingLR.step", "ref_model.max", "targets.size", "predicted.eq().sum().item", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "next", "print", "inputs.cuda", "targets.cuda", "nn.CrossEntropyLoss().cuda.item", "inputs.size", "print", "iter", "next", "predicted.eq().sum", "predicted.eq"], "methods", ["home.repos.pwc.inspect_result.yaodongyu_projnorm.None.init_ref_model.train"], ["", "def", "update_ref_model", "(", "self", ",", "data_loader", ",", "ref_model", ",", "lr", ",", "pseudo_iters", ")", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "ref_model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "0.0", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "pseudo_iters", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "trainloader_iterator", "=", "iter", "(", "data_loader", ")", "\n", "\n", "for", "iteration", "in", "range", "(", "1", ",", "pseudo_iters", "+", "1", ")", ":", "\n", "            ", "ref_model", ".", "train", "(", ")", "\n", "try", ":", "\n", "                ", "inputs", ",", "targets", "=", "next", "(", "trainloader_iterator", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "trainloader_iterator", "=", "iter", "(", "data_loader", ")", "\n", "inputs", ",", "targets", "=", "next", "(", "trainloader_iterator", ")", "\n", "", "if", "iteration", "==", "1", ":", "\n", "                ", "print", "(", "'targets[:10]:'", ",", "targets", "[", ":", "10", "]", ")", "\n", "", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "ref_model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "train_loss", "=", "loss", ".", "item", "(", ")", "*", "inputs", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "iteration", "%", "20", "==", "0", ":", "\n", "                ", "current_lr", "=", "0.0", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "current_lr", "=", "param_group", "[", "'lr'", "]", "\n", "", "print", "(", "'iteration {}: train loss: {:.6f}, train acc: {:.6f}, current lr: {:.6f}'", ".", "format", "(", "iteration", ",", "\n", "train_loss", "/", "total", ",", "\n", "correct", "/", "total", ",", "\n", "current_lr", ")", ")", "\n", "", "", "ref_model", ".", "eval", "(", ")", "\n", "self", ".", "reference_model", "=", "copy", ".", "deepcopy", "(", "ref_model", ")", "\n", "print", "(", "'========Pseudo-training (reference model) finished========'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaodongyu_projnorm.None.projnorm.ProjNorm.compute_projnorm": [[125, 127], ["projnorm._weight_diff_norm_init"], "methods", ["home.repos.pwc.inspect_result.yaodongyu_projnorm.None.projnorm._weight_diff_norm_init"], ["", "def", "compute_projnorm", "(", "self", ",", "model_ref", ",", "model_ood", ")", ":", "\n", "        ", "return", "_weight_diff_norm_init", "(", "model_ref", ",", "model_ood", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yaodongyu_projnorm.None.projnorm._weight_diff_norm_init": [[8, 22], ["list", "list", "range", "numpy.sqrt", "net.parameters", "net_baseline.parameters", "len", "list", "net.parameters", "torch.norm", "torch.norm", "torch.norm", "param1.flatten", "param2.flatten"], "function", ["None"], ["def", "_weight_diff_norm_init", "(", "net", ",", "net_baseline", ")", ":", "\n", "    ", "\"\"\"\n    Returns:\n        the l2 norm difference the two networks\n    \"\"\"", "\n", "params1", "=", "list", "(", "net", ".", "parameters", "(", ")", ")", "\n", "params2", "=", "list", "(", "net_baseline", ".", "parameters", "(", ")", ")", "\n", "\n", "diff", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "list", "(", "net", ".", "parameters", "(", ")", ")", ")", ")", ":", "\n", "        ", "param1", "=", "params1", "[", "i", "]", "\n", "param2", "=", "params2", "[", "i", "]", "\n", "diff", "+=", "(", "torch", ".", "norm", "(", "param1", ".", "flatten", "(", ")", "-", "param2", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "np", ".", "sqrt", "(", "diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaodongyu_projnorm.None.model.ResNet18": [[6, 12], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torchvision.resnet18", "torch.Linear"], "function", ["None"], ["def", "ResNet18", "(", "num_classes", "=", "10", ",", "seed", "=", "123", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "resnet18", "=", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "resnet18", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "return", "resnet18", "\n", "\n"]], "home.repos.pwc.inspect_result.yaodongyu_projnorm.None.model.ResNet50": [[14, 20], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torchvision.resnet50().cuda", "torch.Linear().cuda", "torchvision.resnet50", "torch.Linear"], "function", ["None"], ["", "def", "ResNet50", "(", "num_classes", "=", "10", ",", "seed", "=", "123", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "resnet50", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", ".", "cuda", "(", ")", "\n", "resnet50", ".", "fc", "=", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", ".", "cuda", "(", ")", "\n", "return", "resnet50", "\n", "", ""]], "home.repos.pwc.inspect_result.yaodongyu_projnorm.None.utils.evaluation": [[5, 21], ["net.eval", "torch.CrossEntropyLoss", "torch.no_grad", "torch.no_grad", "enumerate", "net", "nn.CrossEntropyLoss.", "net.max", "predicted.eq().sum().item", "targets.size", "inputs.cuda", "targets.cuda", "criterion.item", "inputs.size", "predicted.eq().sum", "predicted.eq"], "function", ["None"], ["def", "evaluation", "(", "net", ",", "testloader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "*", "inputs", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "", "", "return", "test_loss", "/", "total", ",", "100.", "*", "correct", "/", "total", "", "", ""]], "home.repos.pwc.inspect_result.yaodongyu_projnorm.None.init_ref_model.train": [[23, 55], ["net.train", "optim.SGD", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.CrossEntropyLoss", "range", "net.eval", "net.parameters", "enumerate", "optim.SGD.zero_grad", "net", "nn.CrossEntropyLoss.", "criterion.backward", "optim.SGD.step", "criterion.item", "net.max", "targets.size", "predicted.eq().sum().item", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "len", "inputs.cuda", "targets.cuda", "print", "predicted.eq().sum", "len", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.yaodongyu_projnorm.None.init_ref_model.train"], ["def", "train", "(", "net", ",", "trainloader", ")", ":", "\n", "    ", "net", ".", "train", "(", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", "[", "'lr'", "]", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.0", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "\n", "T_max", "=", "args", "[", "'train_epoch'", "]", "*", "len", "(", "trainloader", ")", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", "[", "'train_epoch'", "]", ")", ":", "\n", "        ", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "batch_idx", "%", "20", "==", "0", ":", "\n", "                ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                    ", "current_lr", "=", "param_group", "[", "'lr'", "]", "\n", "", "print", "(", "'Epoch: '", ",", "epoch", ",", "'('", ",", "batch_idx", ",", "'/'", ",", "len", "(", "trainloader", ")", ",", "')'", ",", "\n", "'Loss: %.3f | Acc: %.3f%% (%d/%d)| Lr: %.5f'", "%", "(", "\n", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ",", "current_lr", ")", ")", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "", "", "net", ".", "eval", "(", ")", "\n", "\n", "return", "net", "\n", "\n"]]}