{"home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_log_10": [[28, 39], ["tensorflow.div", "tensorflow.log", "tensorflow.log"], "function", ["None"], ["def", "tf_log_10", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Common logarithm with base 10 for TensorFlow.\n\n    :param x: Input tensor\n    :type x: tf.Tensor\n\n    :returns: Result of logarithm with base 10\n    :rtype: tf.Tensor\n    \"\"\"", "\n", "return", "tf", ".", "div", "(", "tf", ".", "log", "(", "x", ")", ",", "tf", ".", "log", "(", "10.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_psnr": [[41, 75], ["TypeError", "tensorflow.variable_scope", "utilities.tf_mse", "tensorflow.mul", "tensorflow.pow", "utilities.tf_log_10", "tensorflow.reduce_mean", "tensorflow.div"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_mse", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_log_10"], ["", "def", "tf_psnr", "(", "image_i", ",", "image_k", ",", "reduce_mean", "=", "True", ",", "name", "=", "'psnr'", ")", ":", "\n", "    ", "\"\"\"\n    Peak signal-to-noise ratio for TensorFlow.\n\n    :param image_i: Noise free reference image\n    :type image_i: tf.Tensor\n    :param image_k: Noisy image version of image_i\n    :type image_k: tf.Tensor\n    :param reduce_mean: If tensor with PSNRs is reduced by mean\n    :type reduce_mean: Bool\n    :param name: variable scope name\n    :type name: String\n\n    :returns: PSNR between noisy and reference image\n    :rtype: tf.Tensor\n    \"\"\"", "\n", "if", "image_i", ".", "dtype", "is", "not", "image_k", ".", "dtype", ":", "\n", "        ", "raise", "TypeError", "(", "'PSNR images must have same data type.'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "# TODO: make more robust", "\n", "        ", "if", "image_i", ".", "dtype", "is", "tf", ".", "uint8", ":", "\n", "            ", "max_pos_2", "=", "tf", ".", "pow", "(", "255.0", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "max_pos_2", "=", "1.0", "\n", "\n", "", "mse_i_k", "=", "tf_mse", "(", "image_i", ",", "image_k", ",", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "psnr_tensor", "=", "tf", ".", "mul", "(", "10.0", ",", "tf_log_10", "(", "tf", ".", "div", "(", "max_pos_2", ",", "mse_i_k", ")", ")", ")", "\n", "\n", "if", "reduce_mean", ":", "\n", "            ", "return", "tf", ".", "reduce_mean", "(", "psnr_tensor", ")", "\n", "", "else", ":", "\n", "            ", "return", "psnr_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_mse": [[77, 96], ["tensorflow.variable_scope", "tensorflow.reduce_mean", "tensorflow.pow", "tensorflow.sub"], "function", ["None"], ["", "", "", "def", "tf_mse", "(", "a", ",", "b", ",", "reduction_indices", "=", "None", ",", "name", "=", "'mse'", ")", ":", "\n", "    ", "\"\"\"\n    Mean squared error for TensorFlow.\n\n    :param a: First input tensor\n    :type b: tf.Tensor\n    :param a: Second input tensor\n    :type b: tf.Tensor\n    :param reduction_indices: Dimensions to reduce. If None all dimensions are reduced.\n    :type reduction_indices: List or None\n    :param name: Variable scope name\n    :type reduction_indices: String\n\n    :returns: MSE between a and b\n    :rtype: tf.Tensor\n    \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "pow", "(", "tf", ".", "sub", "(", "a", ",", "b", ")", ",", "2", ")", ",", "\n", "reduction_indices", "=", "reduction_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_add_gaussian_noise": [[98, 116], ["tensorflow.to_float", "tensorflow.random_normal", "tensorflow.clip_by_value", "tensorflow.add"], "function", ["None"], ["", "", "def", "tf_add_gaussian_noise", "(", "image", ",", "shape", ",", "stddev", ")", ":", "\n", "    ", "\"\"\"\n    Add randomly distributed Gaussian noise to an image.\n\n    :param image: Input image\n    :type image: tf.Tensor\n    :param shape: Runtime shape of the input image\n    :type shape: 1D tf.Tensor or Python array\n    :param stddev: Standard deviation of the noise.\n    :type stddev: 0D tf.Tensor or Python array (float32)\n\n    :returns: Image with Gaussian noise\n    :rtype: tf.Tensor\n    \"\"\"", "\n", "image", "=", "tf", ".", "to_float", "(", "image", ")", "\n", "noise", "=", "tf", ".", "random_normal", "(", "shape", ",", "mean", "=", "0.0", ",", "stddev", "=", "stddev", ")", "\n", "image", "=", "tf", ".", "clip_by_value", "(", "tf", ".", "add", "(", "image", ",", "noise", ")", ",", "0", ",", "1.", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_add_local_gaussian_noise": [[118, 148], ["tensorflow.to_float", "list", "tensorflow.random_normal", "tensorflow.clip_by_value", "print", "exit", "tensorflow.add", "tensorflow.image.resize_images"], "function", ["None"], ["", "def", "tf_add_local_gaussian_noise", "(", "image", ",", "shape", ",", "stddev", ",", "locality", ")", ":", "\n", "    ", "\"\"\"\n    Add randomly distributed Gaussian noise with local resemblance to an image\n\n    :param image: Input image\n    :type image: tf.Tensor\n    :param shape: Runtime shape of the input image\n    :type shape: 1D tf.Tensor or Python array\n    :param stddev: Standard deviation of the noise.\n    :type stddev: 0D tf.Tensor or Python array (float32)\n    :param locality: Resemblance factor\n    :type locality: Int\n\n    :returns: Image with Gaussian noise\n    :rtype: tf.Tensor\n    \"\"\"", "\n", "if", "shape", "[", "0", "]", "%", "locality", "!=", "0", "or", "shape", "[", "1", "]", "%", "locality", "!=", "0", ":", "\n", "        ", "print", "(", "\"For local Gaussian noise division of the image dimensions by \"", "\n", "\"the locality must be without rest.\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "image", "=", "tf", ".", "to_float", "(", "image", ")", "\n", "base_shape", "=", "list", "(", "shape", ")", "\n", "base_shape", "[", "0", "]", "//=", "locality", "\n", "base_shape", "[", "1", "]", "//=", "locality", "\n", "noise", "=", "tf", ".", "random_normal", "(", "base_shape", ",", "mean", "=", "0.0", ",", "stddev", "=", "stddev", ")", "\n", "image", "=", "tf", ".", "clip_by_value", "(", "tf", ".", "add", "(", "image", ",", "tf", ".", "image", ".", "resize_images", "(", "noise", ",", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ")", ",", "\n", "0.0", ",", "\n", "1.0", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_add_random_sigma_gaussian_noise": [[150, 169], ["tensorflow.random_uniform", "utilities.tf_add_gaussian_noise"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_add_gaussian_noise"], ["", "def", "tf_add_random_sigma_gaussian_noise", "(", "image", ",", "shape", ",", "min_sigma", ",", "max_sigma", ")", ":", "\n", "    ", "\"\"\"\n    Add randomly distributed Gaussian noise with random standard deviation\n    (between min_sigma and max_sigma) to an image.\n\n    :param image: Input image\n    :type image: tf.Tensor\n    :param shape: Runtime shape of the input image\n    :type shape: 1D tf.Tensor or Python array\n    :param min_sigma: Minimum standard deviation of the noise.\n    :type min_sigma: 0D tf.Tensor or Python array (float32)\n    :param max_sigma: Maximum standard deviation of the noise.\n    :type max_sigma: 0D tf.Tensor or Python array (float32)\n\n    :returns: Image with Gaussian noise\n    :rtype: tf.Tensor\n    \"\"\"", "\n", "sigma_noise", "=", "tf", ".", "random_uniform", "(", "(", "1", ",", ")", ",", "minval", "=", "min_sigma", ",", "maxval", "=", "max_sigma", ")", "\n", "return", "tf_add_gaussian_noise", "(", "datum", ",", "shape", ",", "sigma_noise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_add_poisson_noise": [[171, 189], ["tensorflow.to_float", "tensorflow.random_normal", "tensorflow.mul", "tensorflow.add", "tensorflow.clip_by_value", "tensorflow.sqrt", "tensorflow.add"], "function", ["None"], ["", "def", "tf_add_poisson_noise", "(", "image", ",", "shape", ")", ":", "\n", "    ", "\"\"\"\n    Add randomly distributed (fake) Poisson noise to image.\n\n    :param image: Input image\n    :type image: tf.Tensor\n    :param shape: Runtime shape of the input image\n    :type shape: 1D tf.Tensor or Python array\n\n    :returns: Image with Gaussian noise\n    :rtype: tf.Tensor\n    \"\"\"", "\n", "image", "=", "tf", ".", "to_float", "(", "image", ")", "\n", "noise", "=", "tf", ".", "random_normal", "(", "shape", ",", "mean", "=", "0.0", ",", "stddev", "=", "1.0", ")", "\n", "tf", ".", "mul", "(", "noise", ",", "tf", ".", "sqrt", "(", "image", ")", ")", "\n", "tf", ".", "add", "(", "noise", ",", "image", ")", "\n", "image", "=", "tf", ".", "clip_by_value", "(", "tf", ".", "add", "(", "image", ",", "noise", ")", ",", "0", ",", "1.", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_add_gaussian_noise_and_random_blur": [[191, 238], ["tensorflow.random_uniform", "blur_kernel.astype.astype", "numpy.repeat", "tensorflow.Variable", "tensorflow.expand_dims", "convolve", "tensorflow.squeeze", "utilities.tf_add_gaussian_noise", "numpy.exp", "numpy.sum", "numpy.array", "tensorflow.convert_to_tensor", "tensorflow.nn.depthwise_conv2d"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_add_gaussian_noise"], ["", "def", "tf_add_gaussian_noise_and_random_blur", "(", "datum", ",", "shape", ",", "sigma_noise", ",", "\n", "min_sigma_blur", ",", "max_sigma_blur", ",", "\n", "kernel_len", ")", ":", "\n", "    ", "\"\"\"\n    Add randomly distributed Gaussian noise (fixed standard deviation) and\n    blur with a random standard deviation (between min_sigma_blur and\n    max_sigma_blur) to an image.\n\n    :param datum: Input datum (image)\n    :type datum: tf.Tensor\n    :param shape: Runtime shape of the input datum\n    :type shape: 1D tf.Tensor or Python array\n    :param sigma_noise: Standard deviation of the noise.\n    :type sigma_noise: 0D tf.Tensor or Python array (float32)\n    :param min_sigma_blur: Minimum standard deviation of the blur.\n    :type min_sigma_blur: 0D tf.Tensor or Python array (float32)\n    :param max_sigma_blur: Maximum standard deviation of the blur.\n    :type max_sigma_blur: 0D tf.Tensor or Python array (float32)\n    :param kernel_len: Length of the squared kernel.\n    :type kernel_len: Int\n\n    :returns: Datum (image) with Gaussian noise and blur\n    :rtype: tf.Tensor\n    \"\"\"", "\n", "sigma_blur", "=", "tf", ".", "random_uniform", "(", "(", "1", ",", ")", ",", "\n", "minval", "=", "min_sigma_blur", ",", "\n", "maxval", "=", "max_sigma_blur", ")", "\n", "\n", "# no random blur for now", "\n", "sigma_blur", "=", "2.0", "\n", "# gaussian blur kernel", "\n", "radius", "=", "kernel_len", "/", "2.0", "#int(truncate * sigma_blur + 0.5)", "\n", "x", ",", "y", "=", "np", ".", "mgrid", "[", "-", "radius", ":", "radius", ",", "-", "radius", ":", "radius", "]", "\n", "k", "=", "2", "*", "np", ".", "exp", "(", "-", "0.5", "*", "(", "x", "**", "2", "+", "y", "**", "2", ")", "/", "sigma_blur", "**", "2", ")", "\n", "blur_kernel", "=", "k", "/", "np", ".", "sum", "(", "k", ")", "\n", "blur_kernel", "=", "blur_kernel", ".", "astype", "(", "np", ".", "float32", ")", "\n", "blur_filter", "=", "np", ".", "array", "(", "blur_kernel", ",", "dtype", "=", "np", ".", "float32", ")", "[", "...", ",", "None", ",", "None", "]", "\n", "blur_filter", "=", "np", ".", "repeat", "(", "blur_filter", ",", "shape", "[", "-", "1", "]", ",", "axis", "=", "2", ")", "\n", "tf_blur_filter", "=", "tf", ".", "Variable", "(", "tf", ".", "convert_to_tensor", "(", "blur_filter", ")", ",", "name", "=", "\"blur_kernel\"", ")", "\n", "\n", "convolve", "=", "lambda", "i", ",", "k", ":", "tf", ".", "nn", ".", "depthwise_conv2d", "(", "i", ",", "k", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "datum", "=", "tf", ".", "expand_dims", "(", "datum", ",", "0", ")", "\n", "datum", "=", "convolve", "(", "datum", ",", "tf_blur_filter", ")", "\n", "datum", "=", "tf", ".", "squeeze", "(", "datum", ",", "[", "0", "]", ")", "\n", "datum", "=", "tf_add_gaussian_noise", "(", "datum", ",", "shape", ",", "sigma_noise", ")", "\n", "return", "datum", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_print_trainable_variables": [[240, 251], ["tensorflow.trainable_variables", "print", "functools.reduce", "print", "print", "functools.reduce", "var.get_shape", "var.get_shape"], "function", ["None"], ["", "def", "tf_print_trainable_variables", "(", ")", ":", "\n", "    ", "\"\"\"\n    Prints info name and shapes of trainable model variables which are\n    available in the current session.\n    \"\"\"", "\n", "trainable_vars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "print", "(", "'Trainable variables:'", ")", "\n", "for", "var", "in", "trainable_vars", ":", "\n", "        ", "print", "(", "'Variable: %s with shape %s'", "%", "(", "var", ".", "name", ",", "var", ".", "get_shape", "(", ")", ")", ")", "\n", "", "total_num_vars", "=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "[", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "y", ",", "var", ".", "get_shape", "(", ")", ")", "for", "var", "in", "trainable_vars", "]", ")", "\n", "print", "(", "'Total number of variables: %s'", "%", "total_num_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_shuffle_batch_join": [[253, 332], ["tensorflow.python.training.input._as_tensor_list_list", "tensorflow.python.framework.ops.name_scope", "tensorflow.python.training.input._validate_join", "tensorflow.python.training.input._store_sparse_tensors_join", "tensorflow.python.training.input._dtypes", "tensorflow.python.training.input._shapes", "tensorflow.python.ops.data_flow_ops.RandomShuffleQueue", "tensorflow.python.training.input._enqueue_join", "tensorflow.python.summary.scalar", "tensorflow.cond", "tensorflow.python.training.input._flatten", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.training.input._restore_sparse_tensors", "tensorflow.python.training.input._as_original_type", "tensorflow.python.ops.math_ops.maximum", "data_flow_ops.RandomShuffleQueue.dequeue_up_to", "data_flow_ops.RandomShuffleQueue.dequeue_many", "data_flow_ops.RandomShuffleQueue.size", "tensorflow.constant", "tensorflow.select", "tensorflow.less", "tensorflow.ones", "data_flow_ops.RandomShuffleQueue.size", "t.get_shape().as_list", "t.get_shape"], "function", ["None"], ["", "def", "tf_shuffle_batch_join", "(", "tensors_list", ",", "batch_size", ",", "capacity", ",", "do_dequeue", ",", "\n", "min_after_dequeue", ",", "seed", "=", "None", ",", "enqueue_many", "=", "False", ",", "\n", "shapes", "=", "None", ",", "allow_smaller_final_batch", "=", "False", ",", "\n", "shared_name", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Custom version of tf.train.tf_shuffle_batch which correctly queues and\n    dequeues data from the given pipeline depending on a tf.cond switch.\n\n    :param tensors_list: Data pipeline tensors.\n    :type tensors_list: List of Dict\n    :param batch_size: Train and test batch size.\n    :type batch_size: Int\n    :param capacity: The maximum number of elements in the queue.\n    :type capacity: Int\n    :param do_dequeue: Switch for dequeuing\n    :type do_dequeue: tf.Bool\n    :param min_after_dequeue: Minimum number elements in the queue after a dequeue.\n    :type min_after_dequeue: Int\n    :param seed: Seed for the random shuffling within the queue.\n    :type seed: Int\n    :param enqueue_many: Whether each tensor in tensor_list is a single example.\n    :type enqueue_many: Bool\n    :param shapes:  The shapes for each example. Defaults to the inferred shapes for tensor_list.\n    :type shapes: List\n    :param allow_smaller_final_batch: Allow the final batch to be smaller if there are insufficient items left in the queue.\n    :type allow_smaller_final_batch: Bool\n    :param shared_name: If set, this queue will be shared under the given name across multiple sessions.\n    :type shared_name: String\n    :param name: A name for the operations.\n    :type name: String\n\n    :returns: A list or dictionary of tensors with the types as tensors_list\n    :rtype: List or Dict\n    \"\"\"", "\n", "tensor_list_list", "=", "_as_tensor_list_list", "(", "tensors_list", ")", "\n", "with", "ops", ".", "name_scope", "(", "name", ",", "\"shuffle_batch_join\"", ",", "_flatten", "(", "tensor_list_list", ")", ")", "as", "name", ":", "\n", "        ", "tensor_list_list", "=", "_validate_join", "(", "tensor_list_list", ")", "\n", "tensor_list_list", ",", "sparse_info", "=", "_store_sparse_tensors_join", "(", "\n", "tensor_list_list", ",", "enqueue_many", ")", "\n", "types", "=", "_dtypes", "(", "tensor_list_list", ")", "\n", "shapes", "=", "_shapes", "(", "tensor_list_list", ",", "shapes", ",", "enqueue_many", ")", "\n", "queue", "=", "data_flow_ops", ".", "RandomShuffleQueue", "(", "\n", "capacity", "=", "capacity", ",", "min_after_dequeue", "=", "min_after_dequeue", ",", "seed", "=", "seed", ",", "\n", "dtypes", "=", "types", ",", "shapes", "=", "shapes", ",", "shared_name", "=", "shared_name", ")", "\n", "_enqueue_join", "(", "queue", ",", "tensor_list_list", ",", "enqueue_many", ")", "\n", "full", "=", "(", "math_ops", ".", "cast", "(", "math_ops", ".", "maximum", "(", "0", ",", "queue", ".", "size", "(", ")", "-", "min_after_dequeue", ")", ",", "\n", "dtypes", ".", "float32", ")", "*", "(", "1.", "/", "(", "capacity", "-", "min_after_dequeue", ")", ")", ")", "\n", "summary_name", "=", "(", "\n", "\"queue/%sfraction_over_%d_of_%d_full\"", "%", "\n", "(", "name", ",", "min_after_dequeue", ",", "capacity", "-", "min_after_dequeue", ")", ")", "\n", "summary", ".", "scalar", "(", "summary_name", ",", "full", ")", "\n", "\n", "def", "do_dequeue_func", "(", ")", ":", "\n", "            ", "if", "allow_smaller_final_batch", ":", "\n", "                ", "dequeued", "=", "queue", ".", "dequeue_up_to", "(", "batch_size", ")", "\n", "", "else", ":", "\n", "                ", "dequeued", "=", "queue", ".", "dequeue_many", "(", "batch_size", ",", "name", "=", "name", ")", "\n", "", "dequeued", "=", "_restore_sparse_tensors", "(", "dequeued", ",", "sparse_info", ")", "\n", "return", "_as_original_type", "(", "tensors_list", "[", "0", "]", ",", "dequeued", ")", "\n", "\n", "", "def", "do_not_dequeue_func", "(", ")", ":", "\n", "# dequeued = queue.dequeue_up_to(batch_size)", "\n", "# queue.enqueue_many(dequeued)", "\n", "            ", "if", "allow_smaller_final_batch", ":", "\n", "                ", "queue_size", "=", "queue", ".", "size", "(", ")", "\n", "batch_size_tensor", "=", "tf", ".", "constant", "(", "batch_size", ")", "\n", "dequeued_batch_size", "=", "tf", ".", "select", "(", "tf", ".", "less", "(", "queue_size", ",", "batch_size_tensor", ")", ",", "\n", "queue_size", ",", "\n", "batch_size_tensor", ")", "\n", "# return [tf.ones() for t in tensors_list[0]]", "\n", "", "else", ":", "\n", "                ", "return", "[", "tf", ".", "ones", "(", "shape", "=", "[", "batch_size", "]", "+", "t", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "for", "t", "in", "tensors_list", "[", "0", "]", "]", "\n", "\n", "", "", "dequeued", "=", "tf", ".", "cond", "(", "do_dequeue", ",", "\n", "do_dequeue_func", ",", "\n", "do_not_dequeue_func", ")", "\n", "\n", "return", "dequeued", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.unpickle": [[334, 348], ["open", "pickle.load", "open.close"], "function", ["None"], ["", "", "def", "unpickle", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    Unpickle binary file at file_path.\n\n    :param file_path: Path to binary pickle file.\n    :type file_path: String\n\n    :returns: Unpickled content of file.\n    :rtype: Dict\n    \"\"\"", "\n", "file_out", "=", "open", "(", "file_path", ",", "'rb'", ")", "\n", "data_dict", "=", "pickle", ".", "load", "(", "file_out", ")", "\n", "file_out", ".", "close", "(", ")", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.pickle_load_all_to_list": [[350, 373], ["pickle.load", "isinstance", "content.extend", "content.append"], "function", ["None"], ["", "def", "pickle_load_all_to_list", "(", "f", ")", ":", "\n", "    ", "\"\"\"\n    Load everything of a pickled file and return as list of dictionaries.\n\n    :param f: Already opened file.\n    :type f: file\n\n    :returns: Content of the file.\n    :rtype: List\n    \"\"\"", "\n", "content", "=", "[", "]", "\n", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "l", "=", "pickle", ".", "load", "(", "f", ")", "\n", "if", "isinstance", "(", "l", ",", "list", ")", ":", "\n", "                ", "content", ".", "extend", "(", "l", ")", "\n", "", "else", ":", "\n", "                ", "content", ".", "append", "(", "l", ")", "\n", "", "", "except", "EOFError", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "content", "\n", "", ""]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNN.__init__": [[18, 62], ["tensorflow.variable_scope", "tensorflow.to_float", "tf_networks.DNCNN.init_network", "tensorflow.clip_by_value", "tensorflow.cond", "tensorflow.cond", "tensorflow.to_float", "tensorflow.constant", "tensorflow.subtract", "tf_networks.DNCNN.init_loss", "tf_networks.DNCNN.init_train_opt_and_learning_rate", "tf_networks.DNCNN.init_metrics", "tensorflow.cond.get_shape"], "methods", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNN.init_network", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNNTV.init_loss", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNN.init_train_opt_and_learning_rate", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNN.init_metrics"], ["def", "__init__", "(", "self", ",", "pipelines", "=", "None", ",", "data", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Class constructor.\n\n        :param pipelines:  Used for training.\n        :type pipelines: Pipelines\n        :param data: Used for deployment.\n        :type data: tf.placeholder\n        \"\"\"", "\n", "assert", "not", "(", "pipelines", "is", "None", "and", "data", "is", "None", ")", ",", "\"At least one network input must not be None.\"", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "\n", "            ", "def", "return_and_enqueue", "(", "return_arg", ",", "enqueue_arg", ")", ":", "\n", "\n", "                ", "return", "return_arg", "\n", "", "if", "pipelines", "is", "not", "None", ":", "\n", "                ", "self", ".", "is_train", "=", "pipelines", ".", "is_train", "# tf.placeholder(tf.bool, name='is_train')", "\n", "data", "=", "tf", ".", "cond", "(", "self", ".", "is_train", ",", "\n", "lambda", ":", "pipelines", ".", "train", ".", "data", ",", "\n", "lambda", ":", "pipelines", ".", "test", ".", "data", ")", "\n", "labels", "=", "tf", ".", "cond", "(", "self", ".", "is_train", ",", "\n", "lambda", ":", "pipelines", ".", "train", ".", "labels", ",", "\n", "lambda", ":", "pipelines", ".", "test", ".", "labels", ")", "\n", "self", ".", "labels", "=", "tf", ".", "to_float", "(", "labels", ")", "\n", "self", ".", "channels", "=", "pipelines", ".", "input_shape", "[", "2", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "is_train", "=", "tf", ".", "constant", "(", "False", ")", "\n", "self", ".", "channels", "=", "data", ".", "get_shape", "(", ")", "[", "3", "]", "\n", "\n", "", "self", ".", "data", "=", "tf", ".", "to_float", "(", "data", ")", "\n", "# Output is the residual and clipped output is the denoised image.", "\n", "self", ".", "output", "=", "self", ".", "init_network", "(", ")", "\n", "# TODO: try scale and offset instead clipping", "\n", "self", ".", "output_clipped", "=", "tf", ".", "clip_by_value", "(", "tf", ".", "subtract", "(", "self", ".", "data", ",", "self", ".", "output", ")", ",", "0.", ",", "1.", ",", "name", "=", "'output_clipped'", ")", "\n", "\n", "# pipeline train variables", "\n", "if", "pipelines", "is", "not", "None", ":", "\n", "                ", "self", ".", "loss", "=", "self", ".", "init_loss", "(", ")", "\n", "self", ".", "total_num_steps", "=", "pipelines", ".", "train", ".", "epochs", "*", "pipelines", ".", "train", ".", "num", "/", "pipelines", ".", "train", ".", "batch_size", "\n", "self", ".", "train_opt", ",", "self", ".", "learning_rate", "=", "self", ".", "init_train_opt_and_learning_rate", "(", ")", "\n", "\n", "self", ".", "metrics", "=", "self", ".", "init_metrics", "(", ")", "\n", "# self.init_summaries()", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNN.init_train_opt_and_learning_rate": [[64, 89], ["tensorflow.Variable", "tensorflow.train.exponential_decay", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.compute_gradients", "tensorflow.train.AdamOptimizer.apply_gradients"], "methods", ["None"], ["", "", "", "def", "init_train_opt_and_learning_rate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialize all the necessary training operations and a stepwise\n        decreasing learning rate. Only necessary for training i.e. if data\n        pipelines are provided.\n        \"\"\"", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "name", "=", "\"global_step\"", ")", "\n", "start_learning_rate", "=", "0.001", "\n", "decay_steps", "=", "self", ".", "total_num_steps", "\n", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "start_learning_rate", ",", "\n", "global_step", ",", "\n", "decay_steps", ",", "\n", "0.1", ",", "\n", "staircase", "=", "False", ")", "\n", "\n", "# optimizer = tf.train.MomentumOptimizer(learning_rate=learning_rate, momentum=0.9)", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learning_rate", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", "\n", "\n", "grads", "=", "optimizer", ".", "compute_gradients", "(", "self", ".", "loss", ")", "\n", "\n", "# with tf.variable_scope('gradient_clipping'):", "\n", "#     grads = [(tf.clip_by_value(grad, -0.005, 0.005), var) for grad, var in grads]", "\n", "\n", "train_opt", "=", "optimizer", ".", "apply_gradients", "(", "grads", ",", "global_step", "=", "global_step", ")", "\n", "return", "train_opt", ",", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNN.init_loss": [[90, 102], ["tensorflow.variable_scope", "tensorflow.subtract", "tensorflow.square", "tensorflow.reduce_sum", "tensorflow.div", "tensorflow.subtract", "tensorflow.shape", "tensorflow.to_float", "tensorflow.multiply"], "methods", ["None"], ["", "def", "init_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialize a residual loss with normalized batches. Only necessary for\n        training i.e. if data pipelines are provided.\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "'batch_normed_residual_loss'", ")", ":", "\n", "            ", "residual", "=", "tf", ".", "subtract", "(", "self", ".", "data", ",", "self", ".", "labels", ")", "\n", "error_squared", "=", "tf", ".", "square", "(", "tf", ".", "subtract", "(", "self", ".", "output", ",", "residual", ")", ")", "\n", "error_sum", "=", "tf", ".", "reduce_sum", "(", "error_squared", ")", "\n", "\n", "dynamic_batch_size", "=", "tf", ".", "shape", "(", "self", ".", "data", ")", "[", "0", "]", "\n", "return", "tf", ".", "div", "(", "error_sum", ",", "tf", ".", "to_float", "(", "tf", ".", "multiply", "(", "dynamic_batch_size", ",", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNN.init_metrics": [[103, 110], ["utilities.tf_psnr", "utilities.tf_psnr"], "methods", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_psnr", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_psnr"], ["", "", "def", "init_metrics", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialize data-labels and output-labels metrics (PSNR).\n        \"\"\"", "\n", "metrics", "=", "{", "'psnr_data'", ":", "tf_psnr", "(", "self", ".", "data", ",", "self", ".", "labels", ",", "name", "=", "'psnr_data'", ")", ",", "\n", "'psnr_output'", ":", "tf_psnr", "(", "self", ".", "output_clipped", ",", "self", ".", "labels", ",", "name", "=", "'psnr_output'", ")", "}", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNN.init_summaries": [[111, 131], ["tensorflow.summary.scalar", "hasattr", "tensorflow.get_collection", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.scalar", "tensorflow.summary.histogram"], "methods", ["None"], ["", "def", "init_summaries", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialize summaries for TensorBoard.\n        \"\"\"", "\n", "# train", "\n", "# for v in tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES):", "\n", "#    tf.histogram_summary(v.name, v, collections=['train'], name='variables')", "\n", "tf", ".", "summary", ".", "scalar", "(", "'LOSS/batch_train_loss'", ",", "self", ".", "loss", ",", "collections", "=", "[", "'train'", "]", ")", "\n", "if", "hasattr", "(", "self", ",", "'learning_rate'", ")", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "self", ".", "learning_rate", ",", "collections", "=", "[", "'train'", "]", ")", "\n", "\n", "# test", "\n", "", "for", "v", "in", "tf", ".", "get_collection", "(", "'moving_avgs'", ")", ":", "\n", "            ", "tf", ".", "summary", ".", "histogram", "(", "v", ".", "name", ",", "v", ",", "collections", "=", "[", "'test'", "]", ",", "name", "=", "'moving_avgs'", ")", "\n", "\n", "# images", "\n", "", "nb_imgs", "=", "3", "\n", "tf", ".", "summary", ".", "image", "(", "'data'", ",", "self", ".", "data", ",", "max_outputs", "=", "nb_imgs", ",", "collections", "=", "[", "'images'", "]", ")", "\n", "tf", ".", "summary", ".", "image", "(", "'output'", ",", "self", ".", "output_clipped", ",", "max_outputs", "=", "nb_imgs", ",", "collections", "=", "[", "'images'", "]", ")", "\n", "tf", ".", "summary", ".", "image", "(", "'label'", ",", "self", ".", "labels", ",", "max_outputs", "=", "nb_imgs", ",", "collections", "=", "[", "'images'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNN.init_network": [[132, 188], ["tensorflow.contrib.layers.variance_scaling_initializer", "tensorflow.contrib.layers.l2_regularizer", "tf_networks.DNCNN.convolution", "range", "tf_networks.DNCNN.convolution", "tf_networks.DNCNN.convolution", "str", "str"], "methods", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNN.convolution", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNN.convolution", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNN.convolution"], ["", "def", "init_network", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialize entire network graph. The self.depth attribute specifies\n        the number of convolution layers.\n\n        Batch normalization is disabled.\n        \"\"\"", "\n", "# CNN weights", "\n", "weights_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "variance_scaling_initializer", "(", "factor", "=", "2.0", ",", "\n", "mode", "=", "'FAN_IN'", ",", "\n", "uniform", "=", "False", ")", "\n", "weights_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "0.0001", ")", "\n", "\n", "# Batch normalization", "\n", "# Disabled because network was not trainable.", "\n", "# factor 9 division to calculate stddev with 9*64 (paper) instead of 64 (tensorflow) incoming nodes.", "\n", "# gamma_initializer = tf.contrib.layers.variance_scaling_initializer(factor=2.0 / 9.0,", "\n", "#                                                                    mode='FAN_IN',", "\n", "#                                                                    uniform=False)", "\n", "# batch_norm_initializers = {'gamma': gamma_initializer,", "\n", "#                            'beta': tf.zeros_initializer,", "\n", "#                            'moving_mean': tf.zeros_initializer,", "\n", "#                            'moving_variance': tf.constant_initializer(0.01)}", "\n", "\n", "# batch_norm_params = {'initializers': batch_norm_initializers,", "\n", "#                      'scale': True,", "\n", "#                      'is_training': self.is_train,", "\n", "#                      'variables_collections': {'moving_mean': ['moving_avgs'], 'moving_variance': ['moving_avgs']},", "\n", "#                      'updates_collections': ['update_ops']}", "\n", "\n", "# Network architecture", "\n", "net", "=", "self", ".", "data", "\n", "net", "=", "self", ".", "convolution", "(", "'conv1'", ",", "\n", "net", ",", "64", ",", "[", "3", ",", "3", "]", ",", "\n", "biases_initializer", "=", "tf", ".", "zeros_initializer", ",", "\n", "weights_initializer", "=", "weights_initializer", ",", "\n", "weights_regularizer", "=", "weights_regularizer", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "for", "i", "in", "range", "(", "2", ",", "self", ".", "depth", ")", ":", "\n", "            ", "net", "=", "self", ".", "convolution", "(", "'conv'", "+", "str", "(", "i", ")", ",", "\n", "net", ",", "64", ",", "[", "3", ",", "3", "]", ",", "\n", "# normalizer_fn=tf.contrib.layers.batch_norm,", "\n", "# normalizer_params=batch_norm_params,", "\n", "biases_initializer", "=", "tf", ".", "zeros_initializer", ",", "\n", "weights_initializer", "=", "weights_initializer", ",", "\n", "weights_regularizer", "=", "weights_regularizer", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "", "net", "=", "self", ".", "convolution", "(", "'conv'", "+", "str", "(", "self", ".", "depth", ")", ",", "\n", "net", ",", "self", ".", "channels", ",", "[", "3", ",", "3", "]", ",", "\n", "biases_initializer", "=", "tf", ".", "zeros_initializer", ",", "\n", "weights_initializer", "=", "weights_initializer", ",", "\n", "weights_regularizer", "=", "weights_regularizer", ",", "\n", "activation_fn", "=", "None", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNN.convolution": [[189, 207], ["tensorflow.variable_scope", "tensorflow.contrib.layers.convolution2d"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "convolution", "(", "name", ",", "*", "args", ",", "**", "params", ")", ":", "\n", "        ", "\"\"\"\n        Helper function to initialize namescoped convolution layers.\n\n        :param name:\n        type: name: String\n        :param *args: Args for tf.contrib.layers.convolution2d\n        :type *args: List or Tuple\n        :param **params: Kwargs for tf.contrib.layers.convolution2d, except scope\n        :type **params: Dict\n\n        :returns: Tensor with convolution applied to it.\n        :rtype: tf.Tensor\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", "as", "scope", ":", "\n", "            ", "out", "=", "tf", ".", "contrib", ".", "layers", ".", "convolution2d", "(", "scope", "=", "scope", ",", "*", "args", ",", "**", "params", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNNTV.init_loss": [[227, 249], ["tensorflow.variable_scope", "tensorflow.subtract", "tensorflow.square", "tensorflow.reduce_sum", "numpy.array", "numpy.repeat", "tensorflow.nn.depthwise_conv2d", "tensorflow.multiply", "tensorflow.div", "tensorflow.subtract", "tensorflow.shape", "tensorflow.subtract", "tensorflow.constant", "tensorflow.reduce_sum", "tensorflow.subtract", "tensorflow.to_float", "tensorflow.square", "tensorflow.multiply"], "methods", ["None"], ["def", "init_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialize a residual loss with normalized batches. This loss also\n        penalizes a low TV norm. Only necessary for training i.e. if data\n        pipelines are provided.\n        \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "'batch_normed_residual_loss'", ")", ":", "\n", "            ", "residual", "=", "tf", ".", "subtract", "(", "self", ".", "data", ",", "self", ".", "labels", ")", "\n", "error_squared", "=", "tf", ".", "square", "(", "tf", ".", "subtract", "(", "self", ".", "output", ",", "residual", ")", ")", "\n", "error_sum", "=", "tf", ".", "reduce_sum", "(", "error_squared", ")", "\n", "\n", "dynamic_batch_size", "=", "tf", ".", "shape", "(", "self", ".", "data", ")", "[", "0", "]", "\n", "x_y_grad_kernel", "=", "np", ".", "array", "(", "[", "[", "[", "[", "1.0", ",", "1.0", "]", "]", ",", "[", "[", "-", "1.0", ",", "0.0", "]", "]", "]", ",", "[", "[", "[", "0.0", ",", "-", "1.0", "]", "]", ",", "[", "[", "0.0", ",", "0.0", "]", "]", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "grad_kernel", "=", "np", ".", "repeat", "(", "x_y_grad_kernel", ",", "self", ".", "channels", ",", "axis", "=", "2", ")", "\n", "grad", "=", "tf", ".", "nn", ".", "depthwise_conv2d", "(", "tf", ".", "subtract", "(", "self", ".", "data", ",", "self", ".", "output", ")", ",", "\n", "tf", ".", "constant", "(", "grad_kernel", ")", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "\"SAME\"", ")", "\n", "tv_norm", "=", "tf", ".", "multiply", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "grad", ")", ")", ",", "0.05", ")", "\n", "return", "tf", ".", "div", "(", "tf", ".", "subtract", "(", "error_sum", ",", "tv_norm", ")", ",", "\n", "tf", ".", "to_float", "(", "tf", ".", "multiply", "(", "dynamic_batch_size", ",", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.Pipelines.__init__": [[121, 158], ["tensorflow.placeholder", "data.Pipelines.init_file_lists", "data.Pipelines.tf_data_pipeline", "data.Pipelines.tf_data_pipeline", "collections.namedtuple", "collections.namedtuple.", "collections.namedtuple."], "methods", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.BSDS500Pipelines.init_file_lists", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.Pipelines.tf_data_pipeline", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.Pipelines.tf_data_pipeline"], ["def", "__init__", "(", "self", ",", "opt", ",", "test_epochs", ")", ":", "\n", "        ", "\"\"\"\n        Class constructor.\n\n        :param opt: Option flags.\n        :type opt: tf.app.flags.FLAGS\n        :param test_epochs: Number of test_epochs. Usually None for 1 entire epoch.\n        :type test_epochs: Int\n        \"\"\"", "\n", "self", ".", "input_shape", "=", "(", "self", ".", "patch_size", ",", "self", ".", "patch_size", ",", "opt", ".", "channels", ")", "\n", "self", ".", "train_shape", "=", "(", "self", ".", "patch_size", ",", "self", ".", "patch_size", ",", "opt", ".", "channels", ")", "\n", "self", ".", "test_shape", "=", "(", "self", ".", "patch_size", ",", "self", ".", "patch_size", ",", "opt", ".", "channels", ")", "\n", "self", ".", "sigma_noise", "=", "opt", ".", "sigma_noise", "\n", "self", ".", "noise_type", "=", "opt", ".", "noise_type", "\n", "self", ".", "batch_size", "=", "opt", ".", "batch_size", "\n", "self", ".", "img_decoder", "=", "tf", ".", "image", ".", "decode_jpeg", "\n", "self", ".", "is_train", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "name", "=", "'is_train'", ")", "\n", "\n", "train_files", ",", "test_files", "=", "self", ".", "init_file_lists", "(", ")", "\n", "train_pipe", "=", "self", ".", "tf_data_pipeline", "(", "train_files", "*", "self", ".", "train_set_multiplier", ",", "\n", "self", ".", "train_shape", ",", "\n", "'train_pipeline'", ",", "\n", "opt", ".", "train_epochs", ")", "\n", "test_pipe", "=", "self", ".", "tf_data_pipeline", "(", "test_files", "*", "self", ".", "test_set_multiplier", ",", "\n", "self", ".", "test_shape", ",", "\n", "'test_pipeline'", ",", "\n", "test_epochs", ",", "\n", "train", "=", "False", ")", "\n", "\n", "Pipeline", "=", "namedtuple", "(", "'Pipeline'", ",", "\n", "[", "'data'", ",", "'labels'", ",", "'num'", ",", "'epochs'", ",", "'batch_size'", "]", ")", "\n", "self", ".", "train", "=", "Pipeline", "(", "*", "train_pipe", ",", "\n", "epochs", "=", "opt", ".", "train_epochs", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ")", "\n", "self", ".", "test", "=", "Pipeline", "(", "*", "test_pipe", ",", "\n", "epochs", "=", "test_epochs", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.Pipelines.init_file_lists": [[159, 167], ["None"], "methods", ["None"], ["", "def", "init_file_lists", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Implement to inject a specific dataset.\n\n        :returns: Two lists of train and test file paths.\n        :rtype: Tuple\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.Pipelines.tf_data_pipeline": [[168, 242], ["multiprocessing.cpu_count", "tensorflow.variable_scope", "tensorflow.train.string_input_producer", "utilities.tf_shuffle_batch_join", "tensorflow.WholeFileReader", "tensorflow.WholeFileReader.read", "data.Pipelines.img_decoder", "tensorflow.to_float", "tensorflow.div", "tensorflow.random_crop", "tensorflow.identity", "data.Pipelines.tf_data_pipeline.prepare_data"], "methods", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_shuffle_batch_join"], ["", "def", "tf_data_pipeline", "(", "self", ",", "file_paths", ",", "input_shape", ",", "name", ",", "\n", "num_epochs", "=", "None", ",", "train", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Build data pipeline for denoising data and label pairs. The pipeline\n        includes batch-sampling, multiple noise models, data augmentation and\n        data preprocessing.\n\n        :param file_paths: File paths\n        :type file_paths: List of String\n        :param input_shape: Runtime shape of the input image\n        :type input_shape: 1D tf.Tensor or Python array\n        :param name: variable scope name\n        :type name: String\n        :param num_epochs: Number of epochs the pipeline should provide\n        :type num_epochs: Int\n        :param train: If it is a training pipeline i.e. with data augmentation\n        :type train: Bool\n\n        :returns: Data batch, label batch and number of total files\n        :rtype: Tuple including tf.Tensor and Int\n        \"\"\"", "\n", "n_jobs", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "filename_queue", "=", "tf", ".", "train", ".", "string_input_producer", "(", "file_paths", ",", "\n", "num_epochs", "=", "num_epochs", ")", "\n", "\n", "def", "prepare_data", "(", ")", ":", "\n", "                ", "reader", "=", "tf", ".", "WholeFileReader", "(", ")", "\n", "_", ",", "value", "=", "reader", ".", "read", "(", "filename_queue", ")", "\n", "datum", "=", "self", ".", "img_decoder", "(", "value", ",", "channels", "=", "input_shape", "[", "2", "]", ")", "\n", "datum", "=", "tf", ".", "to_float", "(", "datum", ")", "\n", "datum", "=", "tf", ".", "div", "(", "datum", ",", "255.", ")", "\n", "if", "train", ":", "\n", "                    ", "datum", "=", "tf", ".", "image", ".", "random_flip_up_down", "(", "datum", ")", "\n", "datum", "=", "tf", ".", "image", ".", "random_flip_left_right", "(", "datum", ")", "\n", "datum", "=", "tf", ".", "image", ".", "rot90", "(", "datum", ",", "k", "=", "random", ".", "randint", "(", "0", ",", "3", ")", ")", "\n", "", "datum", "=", "tf", ".", "random_crop", "(", "datum", ",", "input_shape", ")", "\n", "label", "=", "tf", ".", "identity", "(", "datum", ")", "\n", "\n", "if", "self", ".", "noise_type", "==", "'gaussian'", ":", "\n", "                    ", "datum", "=", "tf_add_gaussian_noise", "(", "datum", ",", "input_shape", ",", "self", ".", "sigma_noise", ")", "\n", "", "elif", "self", ".", "noise_type", "==", "'local_gaussian'", ":", "\n", "                    ", "datum", "=", "tf_add_local_gaussian_noise", "(", "datum", ",", "input_shape", ",", "self", ".", "sigma_noise", ",", "2", ")", "\n", "", "elif", "self", ".", "noise_type", "==", "'random_sigma_gaussian'", ":", "\n", "                    ", "datum", "=", "tf_add_random_sigma_gaussian_noise", "(", "datum", ",", "input_shape", ",", "0.0", ",", "0.22", ")", "\n", "", "elif", "self", ".", "noise_type", "==", "'poisson'", ":", "\n", "                    ", "datum", "=", "tf_add_poisson_noise", "(", "datum", ",", "input_shape", ")", "\n", "", "elif", "self", ".", "noise_type", "==", "'gaussian_random_blur'", ":", "\n", "                    ", "datum", "=", "tf_add_gaussian_noise_and_random_blur", "(", "datum", ",", "\n", "input_shape", ",", "\n", "self", ".", "sigma_noise", ",", "\n", "1.0", ",", "\n", "4.0", ",", "\n", "25", ")", "\n", "", "return", "datum", ",", "label", "\n", "\n", "", "data_list", "=", "[", "prepare_data", "(", ")", "for", "_", "in", "range", "(", "n_jobs", ")", "]", "\n", "\n", "if", "train", ":", "\n", "                ", "do_dequeue", "=", "self", ".", "is_train", "\n", "min_after_dequeue", "=", "10", "*", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "                ", "do_dequeue", "=", "tf", ".", "logical_not", "(", "self", ".", "is_train", ")", "\n", "min_after_dequeue", "=", "0", "\n", "", "capacity", "=", "min_after_dequeue", "+", "3", "*", "self", ".", "batch_size", "\n", "data_batch", ",", "labels_batch", "=", "tf_shuffle_batch_join", "(", "data_list", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "capacity", "=", "capacity", ",", "\n", "do_dequeue", "=", "do_dequeue", ",", "\n", "allow_smaller_final_batch", "=", "False", ",", "\n", "min_after_dequeue", "=", "min_after_dequeue", ")", "\n", "\n", "return", "data_batch", ",", "labels_batch", ",", "len", "(", "file_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.BSDS500Pipelines.init_file_lists": [[252, 275], ["os.path.join", "glob.glob.glob", "glob.glob.glob", "os.path.join", "os.path.join", "glob.glob.glob", "glob.glob.glob", "glob.glob.glob", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["def", "init_file_lists", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load and split the BSDS500 dataset.\n\n        :returns: Two lists of train and test file paths.\n        :rtype: Tuple\n        \"\"\"", "\n", "if", "self", ".", "noise_type", "==", "'gaussian_random_sigma'", ":", "\n", "            ", "self", ".", "patch_size", "=", "50", "\n", "self", ".", "train_set_multiplier", "=", "960", "# to have 128 * 3000 patches in one epoche", "\n", "\n", "", "data_path", "=", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'data/bsds_500'", ")", "\n", "if", "self", ".", "grayscale", ":", "\n", "            ", "train_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"greyscale_images/train/*.png\"", ")", ")", "\n", "test_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"greyscale_images/test/*.png\"", ")", ")", "\n", "self", ".", "img_decoder", "=", "tf", ".", "image", ".", "decode_png", "\n", "", "else", ":", "\n", "            ", "train_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'color_images/train/*.jpg'", ")", ")", "+", "glob", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'color_images/test/*.jpg'", ")", ")", "\n", "train_files", "=", "train_files", "[", ":", "400", "]", "\n", "test_files", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'data/color_images/val/*.jpg'", ")", ")", "[", ":", "68", "]", "\n", "\n", "", "return", "train_files", ",", "test_files", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.load_image": [[26, 44], ["skimage.data.imread", "skimage.data.imread.astype"], "function", ["None"], ["def", "load_image", "(", "path", ")", ":", "\n", "    ", "\"\"\"Open, load and normalize an image.\n\n    :param path: Image path.\n    :type path: String\n\n    :returns: Normalized image.\n    :rtype: np.ndarray\n    \"\"\"", "\n", "img", "=", "skimage", ".", "data", ".", "imread", "(", "path", ")", "\n", "\n", "if", "img", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "        ", "normalizer", "=", "255.", "\n", "", "else", ":", "\n", "        ", "normalizer", "=", "65535.", "\n", "\n", "", "img", "=", "img", "/", "normalizer", "\n", "return", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.load_deblurring_grey_data": [[46, 84], ["os.path.join", "experiments_data.items", "os.path.basename", "data.load_image", "load_image.sum", "os.path.basename", "glob.glob", "os.path.join", "print", "data.load_image", "data.load_image", "glob.glob", "os.path.isdir", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.load_image", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.load_image", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.load_image"], ["", "def", "load_deblurring_grey_data", "(", "experiment_name", "=", "None", ",", "image_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Load the data for the grayscale deblurring experiments on 11 standard test\n    images first conducted in [A machine learning approach for non-blind image deconvolution](http://www.cv-foundation.org/openaccess/content_cvpr_2013/papers/Schuler_A_Machine_Learning_2013_CVPR_paper.pdf).\n\n    :param experiment_name: Name of the experiment a-e: experiment_*\n    :type experiment_name: String\n    :param image_name: Name of the image\n    :type image_name: String\n\n    :returns: Experiment data as Dict or single Tuple\n    :rtype: Tuple\n    \"\"\"", "\n", "crop", "=", "12", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'data/deblurring_grey'", ")", "\n", "experiments_data", "=", "{", "os", ".", "path", ".", "basename", "(", "experiment_dir", ")", ":", "\n", "{", "os", ".", "path", ".", "basename", "(", "image_dir", ")", ":", "\n", "{", "'f'", ":", "load_image", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "'blurred_observation.png'", ")", ")", ",", "\n", "'img'", ":", "load_image", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "'original.png'", ")", ")", "}", "\n", "for", "image_dir", "in", "glob", "(", "experiment_dir", "+", "'/*'", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "image_dir", ")", "}", "\n", "for", "experiment_dir", "in", "glob", "(", "data_dir", "+", "'/*'", ")", "}", "\n", "\n", "for", "experiment", ",", "experiment_images", "in", "experiments_data", ".", "items", "(", ")", ":", "\n", "        ", "kernel_img", "=", "load_image", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "experiment", "+", "'/kernel.png'", ")", ")", "\n", "kernel_img", "/=", "kernel_img", ".", "sum", "(", ")", "\n", "experiment_images", "[", "'kernel_img'", "]", "=", "kernel_img", "\n", "\n", "", "if", "experiment_name", "is", "not", "None", ":", "\n", "        ", "experiment_data", "=", "experiments_data", "[", "experiment_name", "]", "\n", "if", "image_name", "is", "not", "None", ":", "\n", "            ", "image_data", "=", "experiment_data", "[", "image_name", "]", "\n", "return", "(", "image_data", "[", "'f'", "]", ",", "image_data", "[", "'img'", "]", ",", "experiment_data", "[", "'kernel_img'", "]", ",", "crop", ")", "\n", "", "return", "experiment_data", ",", "crop", "\n", "", "else", ":", "\n", "        ", "if", "image_name", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Specifying only an image is not possible.\"", ")", "\n", "", "return", "experiments_data", ",", "crop", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.load_demosaicking_data": [[86, 112], ["glob.glob", "os.path.join", "dataset.lower", "os.path.splitext", "os.path.splitext", "data.load_image", "sorted", "os.path.basename", "os.path.basename", "str().lower", "str"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.load_image"], ["", "", "def", "load_demosaicking_data", "(", "image_name", "=", "None", ",", "dataset", "=", "\"mc_master\"", ")", ":", "\n", "    ", "\"\"\"\n    Load McMaster or Kodak demosaicking data.\n\n    :param image_name: Name of a particular image\n    :type image_name: String\n\n    :return test_images: Experiment data as Dict or single Tuple\n    :rtype test_images: Tuple\n    \"\"\"", "\n", "crop", "=", "5", "\n", "image_paths", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "\n", "\"data/demosaicking\"", ",", "\n", "dataset", ".", "lower", "(", ")", ",", "\n", "\"*\"", ")", ")", "\n", "\n", "def", "sort_key", "(", "d", ")", ":", "return", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "d", ")", ")", "[", "0", "]", "\n", "data", "=", "{", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "d", ")", ")", "[", "0", "]", ":", "\n", "{", "'img'", ":", "load_image", "(", "d", ")", "}", "\n", "for", "d", "in", "sorted", "(", "image_paths", ",", "key", "=", "sort_key", ")", "}", "\n", "\n", "if", "image_name", "is", "not", "None", ":", "\n", "        ", "return", "(", "data", "[", "str", "(", "image_name", ")", ".", "lower", "(", ")", "]", "[", "'img'", "]", ",", "\n", "crop", ")", "\n", "", "else", ":", "\n", "        ", "return", "data", ",", "crop", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.elemental_config": [[25, 33], ["None"], "function", ["None"], ["@", "elemental_ingredient", ".", "config", "\n", "def", "elemental_config", "(", ")", ":", "\n", "    ", "\"\"\"\n    Automatically updates the default elemental configuration.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "channels", "=", "3", "\n", "scale", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.optimal_BM3D": [[35, 50], ["None"], "function", ["None"], ["", "@", "elemental_ingredient", ".", "named_config", "\n", "def", "optimal_BM3D", "(", ")", ":", "\n", "    ", "\"\"\"\n    Updated experimental configuration.\n    Corresponds to FlexISP*.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "denoising_prior", "=", "'BM3D'", "\n", "\n", "sigma", "=", "15.0", "\n", "sigma_scale", "=", "1.0", "\n", "\n", "alpha_data", "=", "8000.0", "\n", "alpha_tv", "=", "0.1", "\n", "alpha_cross", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.optimal_DNCNN": [[53, 67], ["None"], "function", ["None"], ["", "@", "elemental_ingredient", ".", "named_config", "\n", "def", "optimal_DNCNN", "(", ")", ":", "\n", "    ", "\"\"\"\n    Updated experimental configuration.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "denoising_prior", "=", "'CNN'", "\n", "cnn_model_path", "=", "'models/DNCNN__gaussian_0.02__40-40-3__128/model.ckpt'", "\n", "\n", "sigma", "=", "1.0", "\n", "\n", "alpha_data", "=", "90.0", "\n", "alpha_tv", "=", "0.01", "\n", "alpha_cross", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.init_grid_params": [[73, 105], ["numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "list", "list", "list", "numpy.arange", "numpy.arange", "list", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "@", "ex", ".", "capture", "\n", "def", "init_grid_params", "(", "elemental", ")", ":", "\n", "    ", "\"\"\"\n    Returns the prior-specific hyper parameters for a grid search optimization.\n    The parameters are given as ranges.\n\n    :param elemental: General experiment configuration parameters\n    :type elemental: Dict of List\n\n    :returns: Update parameters for all grid configurations\n    :rtype: Dict\n    \"\"\"", "\n", "grid_params", "=", "{", "}", "\n", "if", "elemental", "[", "'denoising_prior'", "]", "==", "'NLM'", ":", "\n", "        ", "grid_params", "[", "'sigma'", "]", "=", "np", ".", "arange", "(", "5", ",", "105", ",", "5", ")", "\n", "grid_params", "[", "'sigma_scale'", "]", "=", "np", ".", "arange", "(", "1", ",", "11", ",", "1", ")", "\n", "grid_params", "[", "'alpha_data'", "]", "=", "np", ".", "arange", "(", "4800", ",", "12800", ",", "800", ")", "\n", "grid_params", "[", "'alpha_tv'", "]", "=", "np", ".", "arange", "(", "0.1", ",", "1.1", ",", "0.1", ")", "\n", "# grid_params['alpha_cross'] = [10]", "\n", "", "elif", "elemental", "[", "'denoising_prior'", "]", "==", "'BM3D'", ":", "\n", "        ", "grid_params", "[", "'sigma'", "]", "=", "[", "1", ",", "5", ",", "10", ",", "15", "]", "+", "list", "(", "np", ".", "arange", "(", "20", ",", "120", ",", "20", ")", ")", "\n", "grid_params", "[", "'sigma_scale'", "]", "=", "[", "1", "]", "+", "list", "(", "np", ".", "arange", "(", "5", ",", "15", ",", "5", ")", ")", "\n", "grid_params", "[", "'alpha_data'", "]", "=", "[", "400", "]", "+", "list", "(", "np", ".", "arange", "(", "800", ",", "4800", ",", "800", ")", ")", "+", "[", "6000", ",", "8000", ",", "12000", ",", "20000", "]", "\n", "grid_params", "[", "'alpha_tv'", "]", "=", "np", ".", "arange", "(", "0.0", ",", "0.6", ",", "0.1", ")", "\n", "grid_params", "[", "'alpha_cross'", "]", "=", "[", "0.0", ",", "0.1", "]", "# + list(np.arange(0.1, 1.1, 0.1))", "\n", "", "elif", "elemental", "[", "'denoising_prior'", "]", "==", "'CNN'", ":", "\n", "        ", "grid_params", "[", "'sigma'", "]", "=", "[", "1.0", "]", "#[1, 5, 10] + list(np.arange(20, 120, 20))", "\n", "grid_params", "[", "'alpha_data'", "]", "=", "list", "(", "np", ".", "arange", "(", "1", ",", "151", ",", "1", ")", ")", "#[200] + list(np.arange(600, 575, 4600)) + [10000]", "\n", "grid_params", "[", "'alpha_tv'", "]", "=", "[", "0.0", "]", "# + list(np.arange(0.1, 0.6, 0.1))", "\n", "grid_params", "[", "'alpha_cross'", "]", "=", "[", "0.0", "]", "# [0.0, 0.3]  # + list(np.arange(0.1, 1.1, 0.1))", "\n", "\n", "", "return", "grid_params", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.channelwise_metric": [[107, 126], ["experiment_ingredients.init_metric", "experiment_ingredients.init_metric.eval", "experiment_demosaicking.channelwise_metric.metric_c"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_metric"], ["", "def", "channelwise_metric", "(", "ref", ",", "u", ",", "crop", ")", ":", "\n", "    ", "\"\"\"\n    Computes the channel-wise PSNR between the given reference and input images.\n\n    :param ref: Uncorrupted reference image\n    :type ref: np.ndarray\n    :param u: Input image\n    :type u: np.ndarray\n    :param crop: Amount of pixels that will be cropped at each side.\n    :type crop: Int\n\n    :returns: PSNR values for each image channel\n    :rtype: List\n    \"\"\"", "\n", "def", "metric_c", "(", "c", ")", ":", "\n", "        ", "metric", "=", "init_metric", "(", "ref", "[", "...", ",", "c", "]", ",", "pad", "=", "(", "crop", ",", "crop", ")", ")", "\n", "return", "metric", ".", "eval", "(", "u", "[", "...", ",", "c", "]", ")", "\n", "\n", "", "return", "[", "metric_c", "(", "c", ")", "for", "c", "in", "range", "(", "ref", ".", "shape", "[", "-", "1", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.experiment_wrapper": [[128, 160], ["elemental.copy", "elemental.copy.update", "experiment_demosaicking.x0_demosaic", "experiment_ingredients.init_metric", "experiment_demosaicking.solver", "experiment_demosaicking.channelwise_metric", "numpy.mean", "experiment_demosaicking.bayer_mask"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.x0_demosaic", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_metric", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.solver", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.channelwise_metric", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.bayer_mask"], ["", "def", "experiment_wrapper", "(", "img", ",", "crop", ",", "cnn_func", ",", "grid_params", ",", "elemental", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper function which is passed to start_grid_search and handles a grid\n    search for a single image and set of grid_params.\n\n    :param img: Uncorrupted input image\n    :type img: np.ndarray\n    :param crop: Amount of pixels that will be cropped at each side.\n    :type crop: Int\n    :param cnn_func: Preinitialized deployment CNN\n    :type cnn_func: function\n    :param grid_params: Update parameters for specific grid configuration\n    :type grid_params: Dict\n    :param elemental: General experiment configuration parameters\n    :type elemental: Dict\n\n    :returns: Average (over all channels) PSNR result\n    :rtype: Float\n    \"\"\"", "\n", "# pylint:disable=no-value-for-parameter", "\n", "elemental_copy", "=", "elemental", ".", "copy", "(", ")", "\n", "elemental_copy", ".", "update", "(", "grid_params", ")", "\n", "\n", "f_bayer", "=", "img", "*", "bayer_mask", "(", "img", ".", "shape", ")", "\n", "x0", "=", "x0_demosaic", "(", "f_bayer", ")", "\n", "\n", "metric", "=", "init_metric", "(", "img", ",", "pad", "=", "(", "crop", ",", "crop", ")", ")", "\n", "u", "=", "solver", "(", "f_bayer", ",", "x0", ",", "metric", ",", "cnn_func", ",", "elemental_copy", ")", "\n", "\n", "psnrs", "=", "channelwise_metric", "(", "img", ",", "u", ",", "crop", ")", "\n", "# keep channel-wise values", "\n", "return", "np", ".", "mean", "(", "psnrs", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.grid_search": [[162, 185], ["ex.command", "data.load_demosaicking_data", "experiment_demosaicking.init_grid_params", "experiment_ingredients.start_grid_search"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.load_demosaicking_data", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.init_grid_params", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.start_grid_search"], ["", "@", "ex", ".", "command", "(", "unobserved", "=", "True", ")", "\n", "def", "grid_search", "(", "image_name", ",", "dataset", ",", "elemental", ")", ":", "\n", "    ", "\"\"\"\n    CML command which starts a grid search for a specific image.\n\n    :param image_name: Image name from dataset\n    :type image_name: String\n    :param dataset: Dataset name\n    :type dataset: String\n    :param elemental: General experiment configuration parameters\n    :type elemental: Dict\n    \"\"\"", "\n", "# pylint:disable=no-value-for-parameter", "\n", "# pylint:disable=unused-variable", "\n", "img", ",", "_", ",", "crop", "=", "load_demosaicking_data", "(", "image_name", ",", "dataset", ")", "\n", "wrapper_args", "=", "img", ",", "crop", "\n", "grid_params", "=", "init_grid_params", "(", ")", "\n", "\n", "experiment_info", "=", "'__'", ".", "join", "(", "[", "ex", ".", "path", ",", "image_name", "]", ")", "\n", "start_grid_search", "(", "experiment_info", ",", "\n", "experiment_wrapper", ",", "\n", "wrapper_args", ",", "\n", "grid_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.experiment_all_images_wrapper": [[187, 219], ["elemental.copy", "elemental.copy.update", "data.load_demosaicking_data", "numpy.mean", "experiment_demosaicking.x0_demosaic", "experiment_ingredients.init_metric", "experiment_demosaicking.solver", "experiment_demosaicking.channelwise_metric", "experiment_demosaicking.experiment_all_images_wrapper.evaluate"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.load_demosaicking_data", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.x0_demosaic", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_metric", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.solver", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.channelwise_metric"], ["", "def", "experiment_all_images_wrapper", "(", "dataset", ",", "cnn_func", ",", "grid_params", ",", "elemental", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper function which is passed to start_grid_search and handles a grid\n    search for all images and a single a single set of grid_params.\n\n    :param cnn_func: Preinitialized deployment CNN\n    :type cnn_func: function\n    :param grid_params: Update parameters for specific grid configuration\n    :type grid_params: Dict\n    :param elemental: General experiment configuration parameters\n    :type elemental: Dict\n\n    :returns: Average (over all images) PSNR result\n    :rtype: Float\n    \"\"\"", "\n", "# pylint:disable=no-value-for-parameter", "\n", "elemental_copy", "=", "elemental", ".", "copy", "(", ")", "\n", "elemental_copy", ".", "update", "(", "grid_params", ")", "\n", "data", ",", "crop", "=", "load_demosaicking_data", "(", "dataset", "=", "dataset", ")", "\n", "\n", "def", "evaluate", "(", "img", ")", ":", "\n", "        ", "f_bayer", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "*", "bayer_mask", "(", "img", ".", "shape", ")", "\n", "x0", "=", "x0_demosaic", "(", "f_bayer", ")", "\n", "metric", "=", "init_metric", "(", "img", ",", "pad", "=", "(", "crop", ",", "crop", ")", ")", "\n", "u", "=", "solver", "(", "f_bayer", ",", "x0", ",", "metric", ",", "cnn_func", ",", "elemental_copy", ")", "\n", "\n", "return", "channelwise_metric", "(", "img", ",", "u", ",", "crop", ")", "\n", "\n", "", "results", "=", "[", "evaluate", "(", "datum", "[", "'img'", "]", ")", "for", "datum", "in", "data", ".", "values", "(", ")", "]", "\n", "\n", "#average_rgb = np.mean(results, axis=0)", "\n", "return", "np", ".", "mean", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.grid_search_all_images": [[221, 235], ["ex.command", "experiment_demosaicking.init_grid_params", "experiment_ingredients.start_grid_search"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.init_grid_params", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.start_grid_search"], ["", "@", "ex", ".", "command", "(", "unobserved", "=", "True", ")", "\n", "def", "grid_search_all_images", "(", "dataset", ",", "elemental", ")", ":", "\n", "    ", "\"\"\"\n    CML command which starts a grid search for a all images of the dataset.\n\n    :param dataset: Dataset name\n    :type dataset: String\n    :param elemental: General experiment configuration parameters\n    :type elemental: Dict\n    \"\"\"", "\n", "# pylint:disable=no-value-for-parameter", "\n", "# pylint:disable=unused-variable", "\n", "grid_params", "=", "init_grid_params", "(", ")", "\n", "start_grid_search", "(", "ex", ".", "path", ",", "experiment_all_images_wrapper", ",", "[", "dataset", "]", ",", "grid_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.config": [[241, 250], ["None"], "function", ["None"], ["", "@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "\"\"\"\n    Default experiment configuration.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "image_name", "=", "'1'", "# [\"1\", ..., \"18\"]", "\n", "dataset", "=", "'mc_master'", "# [\"mc_master\", \"kodak\"]", "\n", "bayer_pattern", "=", "'rggb'", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.solver": [[252, 309], ["proximal.cg_options", "proximal.Variable", "experiment_demosaicking.bayer_mask", "proximal.mul_elemwise", "proximal.sum_squares", "experiment_ingredients.init_denoising_prior", "experiment_ingredients.init_problem", "experiment_ingredients.solve_problem", "numpy.clip", "proximal.norm1", "proximal.grad", "numpy.array().reshape", "proximal.reshape", "proximal.vstack", "proximal.vstack", "proximal.norm1", "proximal.grad", "proximal.hstack", "proximal.grad", "numpy.array", "proximal.mul_elemwise", "proximal.mul_elemwise", "proximal.mul_elemwise", "proximal.mul_elemwise", "numpy.roll", "numpy.roll", "numpy.roll", "numpy.roll"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.bayer_mask", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_denoising_prior", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_problem", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.solve_problem"], ["", "@", "ex", ".", "capture", "\n", "def", "solver", "(", "f", ",", "x0", ",", "metric", ",", "cnn_func", ",", "elemental", ")", ":", "\n", "    ", "\"\"\"\n    Solves the demosaicking problem for the given input.\n\n    :param f: Corrupted input image\n    :type f: np.ndarray\n    :param x0: Predemosaicked initialization image\n    :type x0: np.ndarray\n    :param metric: Preinitialized metric\n    :type metric: proximal.utils.metrics\n    :param cnn_func: Preinitialized deployment CNN\n    :type cnn_func: function\n    :param elemental: General experiment configuration parameters\n    :type elemental: Dict\n\n    :returns: Reconstructed output image\n    :rtype: np.ndarray\n    \"\"\"", "\n", "# pylint:disable=no-value-for-parameter", "\n", "options", "=", "px", ".", "cg_options", "(", "tol", "=", "1e-4", ",", "num_iters", "=", "100", ",", "verbose", "=", "True", ")", "\n", "\n", "u", "=", "px", ".", "Variable", "(", "f", ".", "shape", ")", "\n", "A", "=", "bayer_mask", "(", "f", ".", "shape", ")", "\n", "A_u", "=", "px", ".", "mul_elemwise", "(", "A", ",", "u", ")", "\n", "\n", "alpha_sumsquare", "=", "elemental", "[", "'alpha_data'", "]", "/", "2.0", "\n", "data", "=", "px", ".", "sum_squares", "(", "A_u", "-", "f", ",", "alpha", "=", "alpha_sumsquare", ")", "\n", "\n", "prox_fns", "=", "data", "\n", "if", "elemental", "[", "'alpha_tv'", "]", ">", "0.0", ":", "\n", "        ", "prox_fns", "+=", "px", ".", "norm1", "(", "elemental", "[", "'alpha_tv'", "]", "*", "px", ".", "grad", "(", "u", ",", "dims", "=", "2", ")", ")", "\n", "\n", "", "if", "elemental", "[", "'alpha_cross'", "]", ">", "0.0", ":", "\n", "        ", "grad_u", "=", "px", ".", "grad", "(", "u", ",", "dims", "=", "2", ")", "\n", "grad_x0", "=", "px", ".", "grad", "(", "x0", ",", "dims", "=", "2", ")", ".", "value", "\n", "x0_stacked", "=", "np", ".", "array", "(", "[", "x0", ",", "x0", "]", ")", ".", "reshape", "(", "x0", ".", "shape", "+", "(", "2", ",", ")", ")", "\n", "u_stacked", "=", "px", ".", "reshape", "(", "px", ".", "hstack", "(", "[", "u", ",", "u", "]", ")", ",", "x0", ".", "shape", "+", "(", "2", ",", ")", ")", "\n", "cross_1", "=", "px", ".", "vstack", "(", "[", "px", ".", "mul_elemwise", "(", "np", ".", "roll", "(", "x0_stacked", ",", "1", ",", "2", ")", ",", "grad_u", ")", ",", "\n", "px", ".", "mul_elemwise", "(", "np", ".", "roll", "(", "x0_stacked", ",", "2", ",", "2", ")", ",", "grad_u", ")", "]", ")", "\n", "cross_2", "=", "px", ".", "vstack", "(", "[", "px", ".", "mul_elemwise", "(", "np", ".", "roll", "(", "grad_x0", ",", "1", ",", "2", ")", ",", "u_stacked", ")", ",", "\n", "px", ".", "mul_elemwise", "(", "np", ".", "roll", "(", "grad_x0", ",", "2", ",", "2", ")", ",", "u_stacked", ")", "]", ")", "\n", "\n", "prox_fns", "+=", "px", ".", "norm1", "(", "0.5", "*", "elemental", "[", "'alpha_cross'", "]", "*", "(", "cross_1", "-", "cross_2", ")", ")", "\n", "\n", "", "prox_fns", "+=", "init_denoising_prior", "(", "u", ",", "\n", "cnn_func", ",", "\n", "sigma", "=", "elemental", "[", "'sigma'", "]", ",", "\n", "sigma_scale", "=", "elemental", "[", "'sigma_scale'", "]", ")", "\n", "\n", "prob", "=", "init_problem", "(", "prox_fns", ")", "\n", "solve_problem", "(", "prob", ",", "\n", "x0", "=", "x0", ",", "\n", "metric", "=", "metric", ",", "\n", "sigma", "=", "elemental", "[", "'sigma'", "]", ",", "\n", "lin_solver_options", "=", "options", ")", "\n", "return", "np", ".", "clip", "(", "u", ".", "value", ",", "0.0", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.bayer_mask": [[311, 341], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array().transpose", "_log.error", "exit", "numpy.array"], "function", ["None"], ["", "@", "ex", ".", "capture", "\n", "def", "bayer_mask", "(", "shape", ",", "bayer_pattern", ",", "_log", ")", ":", "\n", "    ", "\"\"\"\n    Compute a Bayer mask which multiplied with an image produces a Bayer image\n    with the given pattern.\n\n    :param shape: Shape of the resulting mask\n    :type shape: Tuple\n    :param bayer_pattern: Pattern of Bayer mask\n    :type bayer_pattern: String\n    :param _log: Sacred logging module\n    :type _log: Logger\n\n    :returns: Bayer mask\n    :rtype: np.ndarray\n    \"\"\"", "\n", "red_mask", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", "\n", "green_mask", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", "\n", "blue_mask", "=", "np", ".", "zeros", "(", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", "\n", "\n", "if", "bayer_pattern", "==", "'rggb'", ":", "\n", "        ", "red_mask", "[", ":", ":", "2", ",", ":", ":", "2", "]", "=", "1", "\n", "green_mask", "[", "1", ":", ":", "2", ",", ":", ":", "2", "]", "=", "1", "\n", "green_mask", "[", ":", ":", "2", ",", "1", ":", ":", "2", "]", "=", "1", "\n", "blue_mask", "[", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", "=", "1", "\n", "", "else", ":", "\n", "        ", "_log", ".", "error", "(", "'No valid bayer pattern selected.'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "red_mask", ",", "green_mask", ",", "blue_mask", "]", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.x0_demosaic": [[343, 359], ["numpy.clip", "colour_demosaicing.demosaicing_CFA_Bayer_Malvar2004", "numpy.sum"], "function", ["None"], ["", "@", "ex", ".", "capture", "\n", "def", "x0_demosaic", "(", "f_bayer", ",", "bayer_pattern", ")", ":", "\n", "    ", "\"\"\"\n    Applies a simple demosaicking step to\n\n    :param f_bayer: Input bayer image\n    :type f_bayer: np.ndarray\n    :param bayer_pattern: Pattern of the f_bayer image\n    :type bayer_pattern: String\n\n    :returns: Demosaicked output\n    :rtype: np.ndarray\n    \"\"\"", "\n", "x0", "=", "np", ".", "clip", "(", "demosaicing_CFA_Bayer_Malvar2004", "(", "np", ".", "sum", "(", "f_bayer", ",", "axis", "=", "2", ")", ",", "\n", "pattern", "=", "bayer_pattern", ")", ",", "0.0", ",", "1.0", ")", "\n", "return", "x0", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.main": [[361, 412], ["data.load_demosaicking_data", "experiment_demosaicking.x0_demosaic", "experiment_ingredients.init_metric", "experiment_demosaicking.solver", "experiment_ingredients.print_config", "_log.info", "_log.info", "_log.info", "experiment_demosaicking.channelwise_metric", "enumerate", "img.astype", "experiment_demosaicking.bayer_mask", "experiment_ingredients.init_cnn_func", "_log.info", "plt.figure", "plt.figure.add_subplot", "plt.figure.add_subplot", "plt.figure.add_subplot", "fig.add_subplot.imshow", "fig.add_subplot.imshow", "fig.add_subplot.imshow", "plt.show", "experiment_ingredients.init_metric.eval", "experiment_ingredients.init_metric.eval", "experiment_ingredients.init_metric.eval"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.load_demosaicking_data", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.x0_demosaic", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_metric", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.solver", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.print_config", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.channelwise_metric", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_demosaicking.bayer_mask", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_cnn_func"], ["", "@", "ex", ".", "automain", "\n", "def", "main", "(", "image_name", ",", "dataset", ",", "elemental", ",", "_log", ")", ":", "\n", "    ", "\"\"\"\n    Default command which solves the demosaicking problem for the given dataset\n    and image_name.\n\n    :param image_name: Name of the image\n    :type image_name: String\n    :param dataset: Dataset name\n    :type dataset: String\n    :param elemental: General experiment configuration parameters\n    :type elemental: Dict\n    :param _log: Sacred logging module\n    :type _log: Logger\n    \"\"\"", "\n", "# pylint:disable=no-value-for-parameter", "\n", "img", ",", "crop", "=", "load_demosaicking_data", "(", "image_name", ",", "dataset", ")", "\n", "f_bayer", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "*", "bayer_mask", "(", "img", ".", "shape", ")", "\n", "x0", "=", "x0_demosaic", "(", "f_bayer", ")", "\n", "\n", "cnn_func", "=", "init_cnn_func", "(", ")", "if", "elemental", "[", "'denoising_prior'", "]", "==", "'CNN'", "else", "None", "\n", "metric", "=", "init_metric", "(", "img", ",", "pad", "=", "(", "crop", ",", "crop", ")", ")", "\n", "\n", "# TODO: refactor", "\n", "# edgetaper to better handle circular boundary condition", "\n", "# f_bayer += 1", "\n", "# x0 += 1.0", "\n", "u", "=", "solver", "(", "f_bayer", ",", "x0", ",", "metric", ",", "cnn_func", ")", "\n", "# f_bayer -= 1", "\n", "# x0 -= 1.0", "\n", "# u -= 1.0", "\n", "\n", "print_config", "(", ")", "\n", "\n", "_log", ".", "info", "(", "\"Input f_bayer PSNR: %f\"", "%", "metric", ".", "eval", "(", "f_bayer", ")", ")", "\n", "_log", ".", "info", "(", "\"Input x0 PSNR: %f\"", "%", "metric", ".", "eval", "(", "x0", ")", ")", "\n", "_log", ".", "info", "(", "\"Final PSNR: %f\"", "%", "metric", ".", "eval", "(", "u", ")", ")", "\n", "\n", "psnrs", "=", "channelwise_metric", "(", "img", ",", "u", ",", "crop", ")", "\n", "for", "c", ",", "psnr", "in", "enumerate", "(", "psnrs", ")", ":", "\n", "        ", "_log", ".", "info", "(", "\"Final PSNR Channel %i: %f\"", "%", "(", "c", ",", "psnr", ")", ")", "\n", "\n", "", "if", "elemental", "[", "'show_plot'", "]", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "5", ")", ")", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "131", ")", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "132", ")", "\n", "ax3", "=", "fig", ".", "add_subplot", "(", "133", ")", "\n", "ax1", ".", "imshow", "(", "img", ")", "\n", "ax2", ".", "imshow", "(", "f_bayer", ")", "\n", "ax3", ".", "imshow", "(", "u", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Deployer.__init__": [[48, 78], ["tensorflow.reset_default_graph", "tensorflow.placeholder", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.global_variables_initializer", "tf_solver.Deployer.sess.run", "[].split", "tensorflow.device", "tensorflow.train.Saver", "tensorflow.train.Saver.restore", "os.path.split", "os.path.dirname"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "shape", ",", "opt", "=", "FLAGS", ")", ":", "\n", "        ", "\"\"\"Class constructor.\n\n        :param shape: Runtime shape of the input image\n        :type shape: 1D tf.Tensor or Python array\n        :param opt: Option flags.\n        :type opt: tf.app.flags.FLAGS\n        \"\"\"", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "data", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "(", "None", ",", "None", ",", "None", ",", "opt", ".", "channels", ")", ",", "\n", "name", "=", "'data'", ")", "\n", "opt", ".", "network", "=", "os", ".", "path", ".", "split", "(", "os", ".", "path", ".", "dirname", "(", "opt", ".", "model_path", ")", ")", "[", "1", "]", ".", "split", "(", "'__'", ")", "[", "0", "]", "\n", "\n", "with", "tf", ".", "device", "(", "opt", ".", "device_name", ")", ":", "\n", "            ", "self", ".", "net", "=", "NETWORKS", "[", "opt", ".", "network", "]", "(", "data", "=", "data", ")", "\n", "\n", "", "sess_config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "sess_config", ".", "gpu_options", ".", "allow_growth", "=", "not", "opt", ".", "fill_gpu", "\n", "sess_config", ".", "allow_soft_placement", "=", "True", "\n", "# sess_config.log_device_placement = True", "\n", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "opt", ".", "device_name", "[", "-", "1", "]", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "sess_config", ")", "\n", "init_op", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init_op", ")", "\n", "\n", "if", "opt", ".", "model_path", ":", "\n", "            ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "self", ".", "sess", ",", "opt", ".", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Deployer.deploy": [[79, 96], ["numpy.array", "tf_solver.Deployer.sess.run"], "methods", ["None"], ["", "", "def", "deploy", "(", "self", ",", "images", ")", ":", "\n", "        ", "\"\"\"\n        Deploy and denoise an array of images.\n\n        :param images: Input images\n        :type images: List of np.ndarray\n\n        :returns: Output (residual) and clipped output (denoised image) of the network.\n        :rtype: Dict of List\n        \"\"\"", "\n", "images", "=", "np", ".", "array", "(", "images", ")", "\n", "\n", "feed_dict", "=", "{", "self", ".", "net", ".", "data", ":", "images", "}", "\n", "op_dict", "=", "{", "'output'", ":", "self", ".", "net", ".", "output", ",", "\n", "'output_clipped'", ":", "self", ".", "net", ".", "output_clipped", "}", "\n", "res", "=", "self", ".", "sess", ".", "run", "(", "op_dict", ",", "feed_dict", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Deployer.print_trainable_variables": [[97, 105], ["tf_solver.Deployer.sess.run", "utilities.tf_print_trainable_variables", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_print_trainable_variables"], ["", "def", "print_trainable_variables", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Prints info name and shapes of trainable model variables which are\n        available in the current session.\n        \"\"\"", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "tf_print_trainable_variables", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Solver.__init__": [[110, 159], ["tensorflow.reset_default_graph", "os.path.join", "tensorflow.summary.merge_all", "tensorflow.summary.merge_all", "tensorflow.summary.merge_all", "tensorflow.summary.merge_all", "collections.deque", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.summary.FileWriter", "tensorflow.train.Saver", "tf_solver.Solver.sess.run", "tf_solver.Solver.sess.run", "utilities.tf_print_trainable_variables", "tensorflow.device", "tf_solver.Solver.net.init_summaries", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tf_solver.Solver.saver.restore", "str", "str", "time.strftime", "str"], "methods", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.tf_print_trainable_variables", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_networks.DNCNN.init_summaries"], ["def", "__init__", "(", "self", ",", "opt", "=", "FLAGS", ")", ":", "\n", "        ", "\"\"\"\n        Class constructor.\n\n        :param opt: Option flags.\n        :type opt: tf.app.flags.FLAGS\n        \"\"\"", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n", "with", "tf", ".", "device", "(", "opt", ".", "device_name", ")", ":", "\n", "            ", "pipelines", "=", "PIPELINES", "[", "opt", ".", "pipelines", "]", "(", "opt", ",", "test_epochs", "=", "None", ")", "\n", "self", ".", "net", "=", "NETWORKS", "[", "opt", ".", "network", "]", "(", "pipelines", ")", "\n", "self", ".", "net", ".", "init_summaries", "(", ")", "\n", "\n", "", "noise_str", "=", "opt", ".", "noise_type", "\n", "if", "opt", ".", "noise_type", "in", "[", "\"gaussian\"", ",", "\"local_gaussian\"", "]", ":", "\n", "            ", "noise_str", "+=", "\"_\"", "+", "str", "(", "opt", ".", "sigma_noise", ")", "\n", "", "opt", ".", "data_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "data_dir", ",", "'__'", ".", "join", "(", "[", "self", ".", "net", ".", "name", ",", "\n", "noise_str", ",", "\n", "'-'", ".", "join", "(", "[", "str", "(", "s", ")", "for", "s", "in", "pipelines", ".", "input_shape", "]", ")", ",", "\n", "str", "(", "opt", ".", "batch_size", ")", ",", "\n", "time", ".", "strftime", "(", "'%Y_%m_%d_%H_%M'", ")", "]", ")", ")", "\n", "\n", "self", ".", "train_summaries", "=", "tf", ".", "summary", ".", "merge_all", "(", "'train'", ")", "\n", "self", ".", "test_summaries", "=", "tf", ".", "summary", ".", "merge_all", "(", "'test'", ")", "\n", "self", ".", "image_summaries", "=", "tf", ".", "summary", ".", "merge_all", "(", "'images'", ")", "\n", "self", ".", "queue_summaries", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n", "self", ".", "min_test_loss", "=", "None", "\n", "self", ".", "pipelines", "=", "pipelines", "\n", "self", ".", "train_loss_queue", "=", "deque", "(", "[", "]", ",", "opt", ".", "average_train_loss_size", ")", "\n", "\n", "sess_config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "sess_config", ".", "gpu_options", ".", "allow_growth", "=", "not", "opt", ".", "fill_gpu", "\n", "sess_config", ".", "allow_soft_placement", "=", "True", "\n", "# sess_config.log_device_placement = True", "\n", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "opt", ".", "device_name", "[", "-", "1", "]", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "sess_config", ")", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "opt", ".", "data_dir", ",", "self", ".", "sess", ".", "graph", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "tf_print_trainable_variables", "(", ")", "\n", "\n", "if", "not", "opt", ".", "model_path", "==", "''", ":", "\n", "            ", "self", ".", "saver", ".", "restore", "(", "self", ".", "sess", ",", "opt", ".", "model_path", ")", "\n", "", "self", ".", "opt", "=", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Solver.train_step": [[160, 193], ["op_dict.update", "tf_solver.Solver.sess.run", "tf_solver.Solver.writer.add_summary", "tf_solver.Solver.writer.add_summary", "tf_solver.Solver.train_loss_queue.append", "tensorflow.Summary", "tensorflow.Summary.value.add", "tf_solver.Solver.writer.add_summary", "tensorflow.get_collection", "sum", "len", "print", "range"], "methods", ["None"], ["", "def", "train_step", "(", "self", ",", "step", ")", ":", "\n", "        ", "\"\"\"\n        Execute a training step including parameter updates and logging.\n\n        :param step: Global iteration step.\n        :type step: Int\n        \"\"\"", "\n", "op_dict", "=", "{", "'loss'", ":", "self", ".", "net", ".", "loss", ",", "\n", "'learning_rate'", ":", "self", ".", "net", ".", "learning_rate", ",", "\n", "'train_summaries'", ":", "self", ".", "train_summaries", ",", "\n", "'queue_summaries'", ":", "self", ".", "queue_summaries", "}", "\n", "op_dict", ".", "update", "(", "self", ".", "net", ".", "metrics", ")", "\n", "\n", "feed_dict", "=", "{", "self", ".", "net", ".", "is_train", ":", "True", "}", "\n", "if", "step", "!=", "0", ":", "\n", "            ", "op_dict", "[", "'update_ops'", "]", "=", "tf", ".", "get_collection", "(", "'update_ops'", ")", "\n", "op_dict", "[", "'train_op'", "]", "=", "self", ".", "net", ".", "train_opt", "\n", "\n", "", "res", "=", "self", ".", "sess", ".", "run", "(", "op_dict", ",", "feed_dict", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "res", "[", "'train_summaries'", "]", ",", "step", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "res", "[", "'queue_summaries'", "]", ",", "step", ")", "\n", "\n", "# avg_train_loss summary", "\n", "self", ".", "train_loss_queue", ".", "append", "(", "res", "[", "'loss'", "]", ")", "\n", "avg_train_loss", "=", "sum", "(", "self", ".", "train_loss_queue", ")", "/", "len", "(", "self", ".", "train_loss_queue", ")", "\n", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "summary", ".", "value", ".", "add", "(", "tag", "=", "'LOSS/running_batch_train'", ",", "simple_value", "=", "avg_train_loss", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n", "# train log", "\n", "if", "step", "%", "50", "==", "0", "or", "step", "in", "range", "(", "1", ",", "11", ")", ":", "\n", "            ", "print", "(", "'Iteration: %i Batch training loss: %f Batch PSNR: %f Learning rate: %f'", "%", "\n", "(", "step", ",", "res", "[", "'loss'", "]", ",", "res", "[", "'psnr_output'", "]", ",", "res", "[", "'learning_rate'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Solver.start_test": [[194, 263], ["print", "int", "range", "tensorflow.Summary", "tensorflow.Summary.value.add", "tensorflow.Summary.value.add", "tensorflow.Summary.value.add", "tf_solver.Solver.writer.add_summary", "tf_solver.Solver.print_info", "print", "print", "print", "math.ceil", "op_dict.update", "tf_solver.Solver.sess.run", "tf_solver.Solver.writer.add_summary", "tf_solver.Solver.save_model"], "methods", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Solver.print_info", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Solver.save_model"], ["", "", "def", "start_test", "(", "self", ",", "global_step", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Start a testing step over the entire test set and log the results.\n        If the model yields superior results it is saved.\n\n        :param global_step: Global iteration step.\n        :type global_step: Int\n\n        :returns: Average test loss.\n        :rtype: Float\n        \"\"\"", "\n", "print", "(", "'Start testing.'", ")", "\n", "\n", "avg_loss", "=", "avg_psnr_output", "=", "avg_psnr_data", "=", "0", "\n", "\n", "steps", "=", "int", "(", "math", ".", "ceil", "(", "self", ".", "pipelines", ".", "test", ".", "num", "/", "self", ".", "opt", ".", "batch_size", ")", ")", "\n", "feed_dict", "=", "{", "self", ".", "net", ".", "is_train", ":", "False", "}", "\n", "for", "step", "in", "range", "(", "steps", ")", ":", "\n", "            ", "op_dict", "=", "{", "'loss'", ":", "self", ".", "net", ".", "loss", ",", "\n", "# 'test_summaries': self.test_summaries,", "\n", "'image_summaries'", ":", "self", ".", "image_summaries", "}", "\n", "op_dict", ".", "update", "(", "self", ".", "net", ".", "metrics", ")", "\n", "res", "=", "self", ".", "sess", ".", "run", "(", "op_dict", ",", "feed_dict", ")", "\n", "\n", "avg_loss", "+=", "res", "[", "'loss'", "]", "\n", "avg_psnr_data", "+=", "res", "[", "'psnr_data'", "]", "\n", "avg_psnr_output", "+=", "res", "[", "'psnr_output'", "]", "\n", "\n", "# steps = 0", "\n", "# try:", "\n", "#     while not test_coord.should_stop():", "\n", "#         steps += 1", "\n", "#         op_list = [self.net.loss, self.psnr_data, self.psnr_output, self.image_summaries]", "\n", "#         test_loss, psnr_data, psnr_output, summaries = self.sess.run(op_list, feed_dict={self.net.is_train: False})", "\n", "#         avg_test_loss += test_loss", "\n", "#         avg_psnr_data += psnr_data", "\n", "#         avg_psnr_output += psnr_output", "\n", "#", "\n", "# except tf.errors.OutOfRangeError:", "\n", "#     print 'Done testing.'", "\n", "# finally:", "\n", "#     test_coord.request_stop()", "\n", "\n", "", "avg_loss", "/=", "steps", "\n", "avg_psnr_data", "/=", "steps", "\n", "avg_psnr_output", "/=", "steps", "\n", "\n", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "summary", ".", "value", ".", "add", "(", "tag", "=", "'LOSS/avg_test'", ",", "simple_value", "=", "avg_loss", ")", "\n", "summary", ".", "value", ".", "add", "(", "tag", "=", "'PSNR/avg_data'", ",", "simple_value", "=", "avg_psnr_data", ")", "\n", "summary", ".", "value", ".", "add", "(", "tag", "=", "'PSNR/avg_output'", ",", "simple_value", "=", "avg_psnr_output", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "global_step", ")", "\n", "# self.writer.add_summary(res['test_summaries'], global_step)", "\n", "\n", "# save model with lowest test loss", "\n", "if", "self", ".", "min_test_loss", "is", "None", "or", "avg_loss", "<", "self", ".", "min_test_loss", ":", "\n", "            ", "self", ".", "min_test_loss", "=", "avg_loss", "\n", "self", ".", "writer", ".", "add_summary", "(", "res", "[", "'image_summaries'", "]", ",", "global_step", ")", "\n", "if", "global_step", ">", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "global_step", ")", "\n", "\n", "# test log", "\n", "", "", "self", ".", "print_info", "(", "global_step", ")", "\n", "\n", "print", "(", "'Average test loss: %g'", "%", "avg_loss", ")", "\n", "print", "(", "'Average data PSNR: %g'", "%", "avg_psnr_data", ")", "\n", "print", "(", "'Average output PSNR: %g'", "%", "avg_psnr_output", ")", "\n", "\n", "return", "avg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Solver.start_train": [[264, 289], ["tensorflow.train.Coordinator", "tensorflow.train.start_queue_runners", "tf_solver.Solver.start_test", "tf_solver.Solver.writer.close", "print", "tensorflow.train.Coordinator.request_stop", "tensorflow.train.Coordinator.should_stop", "tf_solver.Solver.train_step", "tensorflow.train.Coordinator.request_stop", "print", "tf_solver.Solver.start_test"], "methods", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Solver.start_test", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Solver.train_step", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Solver.start_test"], ["", "def", "start_train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Start the training of a model including epoch-wise testing.\n        \"\"\"", "\n", "coord", "=", "tf", ".", "train", ".", "Coordinator", "(", ")", "\n", "tf", ".", "train", ".", "start_queue_runners", "(", "sess", "=", "self", ".", "sess", ",", "coord", "=", "coord", ")", "\n", "\n", "step", "=", "0", "\n", "self", ".", "start_test", "(", "step", ")", "\n", "try", ":", "\n", "            ", "print", "(", "'Start training %i epochs.'", "%", "self", ".", "opt", ".", "train_epochs", ")", "\n", "while", "not", "coord", ".", "should_stop", "(", ")", ":", "\n", "                ", "step", "+=", "1", "\n", "self", ".", "train_step", "(", "step", ")", "\n", "num_epochs", "=", "(", "self", ".", "opt", ".", "batch_size", "*", "step", ")", "/", "self", ".", "pipelines", ".", "train", ".", "num", "\n", "# TODO Make work for any batch_size step combination", "\n", "if", "num_epochs", "%", "0.25", "==", "0.0", ":", "\n", "                    ", "self", ".", "start_test", "(", "step", ")", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "coord", ".", "request_stop", "(", "e", ")", "\n", "print", "(", "'Done training (train_epochs reached).'", ")", "\n", "", "finally", ":", "\n", "            ", "coord", ".", "request_stop", "(", ")", "\n", "\n", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Solver.save_model": [[290, 303], ["os.path.join", "tf_solver.Solver.saver.save", "print", "tf_solver.Solver.saver.save", "os.path.join", "str"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "step", ")", ":", "\n", "        ", "\"\"\"\n        Saves graph model in self.opt.data_dir\n\n        :param step: Global iteration step.\n        :type step: Int\n        \"\"\"", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "data_dir", ",", "\n", "\"model_\"", "+", "str", "(", "step", ")", "+", "\".ckpt\"", ")", "\n", "save_path", "=", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "model_path", ")", "\n", "print", "(", "'Model saved in file: %s'", "%", "save_path", ")", "\n", "# save best model in non step size related format", "\n", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "os", ".", "path", ".", "join", "(", "self", ".", "opt", ".", "data_dir", ",", "\"model.ckpt\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Solver.print_info": [[305, 318], ["print", "print"], "methods", ["None"], ["", "def", "print_info", "(", "self", ",", "step", ")", ":", "\n", "        ", "\"\"\"\n        Prints training related info on how many samples are already processed.\n\n        :param step: Global iteration step.\n        :type step: Int\n        \"\"\"", "\n", "num_images", "=", "self", ".", "opt", ".", "batch_size", "*", "step", "\n", "num_epochs", "=", "num_images", "/", "self", ".", "pipelines", ".", "train", ".", "num", "\n", "print", "(", "'Train data: %g/%g images and therefore %g/%g epochs.'", "%", "\n", "(", "num_images", ",", "self", ".", "pipelines", ".", "train", ".", "num", ",", "num_epochs", ",", "self", ".", "opt", ".", "train_epochs", ")", ")", "\n", "print", "(", "'Test data: %g images with batch size %g.'", "%", "\n", "(", "self", ".", "pipelines", ".", "test", ".", "num", ",", "self", ".", "opt", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.main": [[320, 324], ["tf_solver.Solver", "tf_solver.Solver.start_train"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Solver.start_train"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Main wrapper function.\"\"\"", "\n", "solver", "=", "Solver", "(", ")", "\n", "solver", ".", "start_train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.elemental_config": [[48, 93], ["None"], "function", ["None"], ["@", "elemental_ingredient", ".", "config", "\n", "def", "elemental_config", "(", ")", ":", "\n", "    ", "\"\"\"\n    Default experiment configuration.\n\n    Remark: The notation of the alpha_* is different than in our paper but in\n    consistence with the interface of the ProxImal framework.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "sigma", "=", "1.0", "\n", "sigma_scale", "=", "6.0", "# default proximal value", "\n", "tau", "=", "None", "\n", "theta", "=", "None", "\n", "alpha_data", "=", "1.0", "\n", "alpha_tv", "=", "0.0", "\n", "alpha_cross", "=", "0.0", "\n", "alpha_denoising", "=", "1.0", "\n", "\n", "max_iters", "=", "30", "\n", "conv_check", "=", "1", "# check convergence each conv_check iteration", "\n", "eps_rel", "=", "1e-3", "\n", "eps_abs", "=", "1e-3", "\n", "scale", "=", "True", "\n", "try_split", "=", "True", "\n", "absorb", "=", "True", "\n", "merge", "=", "True", "\n", "metric_type", "=", "\"PSNR\"", "# [\"PSNR\", \"SSIM\"]", "\n", "metric_decimals", "=", "4", "\n", "conv_mode", "=", "\"metric\"", "# [\"residual\", \"metric\", \"metric_all_iter\"]", "\n", "verbose", "=", "0", "# [0, 1, 2]", "\n", "print_config", "=", "True", "\n", "implem", "=", "'numpy'", "# [\"halide\", \"numpy\"]", "\n", "show_plot", "=", "False", "\n", "denoising_prior", "=", "'CNN'", "# [\"CNN\", \"NLM\", \"BM3D\"]", "\n", "cnn_model_path", "=", "\"\"", "# \"XXX/model.ckpt\"", "\n", "\n", "patch_size", "=", "4", "\n", "nlm_search_window_size", "=", "15", "\n", "channels", "=", "1", "# [1, 3]", "\n", "\n", "if", "CUDA_AVAILABLE", ":", "\n", "        ", "device_name", "=", "'/gpu:0'", "# if cuda is available \"/cpu:0\" else \"/gpu:0\"", "\n", "", "else", ":", "\n", "        ", "device_name", "=", "'/cpu:0'", "\n", "", "img_log_dir", "=", "\"data/experiment_log\"", "# path for logging intermediate img results if verbose > 1", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.print_config": [[95, 108], ["elemental_ingredient.command", "sacred.commands.print_config", "_log.getEffectiveLevel"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.print_config"], ["", "@", "elemental_ingredient", ".", "command", "(", "unobserved", "=", "True", ")", "\n", "def", "print_config", "(", "print_config", ",", "_run", ",", "_log", ")", ":", "\n", "    ", "\"\"\"\n    Prints configuration parameters.\n\n    :param _run: Sacred Run object\n    :type _run: Sacred.Run\n    :param _log: Sacred logging module\n    :type _log: Logger\n    \"\"\"", "\n", "# print config only for levels lower than warning", "\n", "if", "print_config", "and", "_log", ".", "getEffectiveLevel", "(", ")", "<", "30", ":", "\n", "        ", "sacred", ".", "commands", ".", "print_config", "(", "_run", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_denoising_prior": [[110, 159], ["proximal.prox_black_box", "proximal.patch_NLM", "proximal.patch_BM3D", "_log.error", "exit", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "", "@", "elemental_ingredient", ".", "capture", "\n", "def", "init_denoising_prior", "(", "u", ",", "cnn_func", ",", "denoising_prior", ",", "sigma", ",", "\n", "sigma_scale", ",", "patch_size", ",", "nlm_search_window_size", ",", "\n", "alpha_denoising", ",", "_log", ")", ":", "\n", "    ", "\"\"\"\n    Initializes the specified denoising prior which then can be integrated into\n    the problem.\n\n    :param u: Input variable that later contains the solution\n    :type u: proximal.Variable\n    :param cnn_func: Preinitialized deployment CNN\n    :type cnn_func: function\n    :param denoising_prior: Specified the type of denoising prior i.e. denoising operation\n    :type denoising_prior: String\n    :param sigma: Expected noise standard deviation\n    :type sigma: Float\n    :param sigma_scale: Scale for the noise standard deviation\n    :type sigma_scale: Float\n    :param patch_size: NLM and BM3D denoising patch size\n    :type patch_size: Int\n    :param nlm_search_window_size: Size of the NLM search window\n    :type nlm_search_window_size: Int\n    :param alpha_denoising: Weight coefficient for the denoising prior\n    :type alpha_denoising: Float\n    :param _log: Sacred logging module\n    :type _log: Logger\n\n    :returns: Prior in form of a proxable function.\n    :rtype: proximal.ProxFn\n    \"\"\"", "\n", "if", "denoising_prior", "==", "'CNN'", ":", "\n", "        ", "return", "px", ".", "prox_black_box", "(", "u", ",", "cnn_func", ",", "alpha", "=", "alpha_denoising", ")", "\n", "", "elif", "denoising_prior", "==", "'NLM'", ":", "\n", "        ", "return", "px", ".", "patch_NLM", "(", "u", ",", "\n", "alpha", "=", "alpha_denoising", ",", "\n", "sigma_fixed", "=", "np", ".", "sqrt", "(", "1.", "/", "sigma", ")", ",", "\n", "sigma_scale", "=", "sigma_scale", ",", "\n", "templateWindowSizeNLM", "=", "patch_size", ",", "\n", "searchWindowSizeNLM", "=", "nlm_search_window_size", ",", "\n", "prior", "=", "0", ")", "\n", "", "elif", "denoising_prior", "==", "'BM3D'", ":", "\n", "        ", "return", "px", ".", "patch_BM3D", "(", "u", ",", "\n", "sigma_fixed", "=", "np", ".", "sqrt", "(", "1.", "/", "sigma", ")", ",", "\n", "sigma_scale", "=", "sigma_scale", ",", "\n", "patch_size", "=", "patch_size", ",", "\n", "alpha", "=", "alpha_denoising", ")", "\n", "", "else", ":", "\n", "        ", "_log", ".", "error", "(", "'No valid denoising_prior selected.'", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_cnn_func": [[161, 203], ["tf_solver.Deployer", "_log.error", "exit", "numpy.squeeze", "len", "len", "_log.error", "exit", "tf_solver.Deployer.deploy"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.tf_solver.Deployer.deploy"], ["", "", "@", "elemental_ingredient", ".", "capture", "\n", "def", "init_cnn_func", "(", "cnn_model_path", ",", "device_name", ",", "channels", ",", "_log", ")", ":", "\n", "    ", "\"\"\"\n    Initializes the denoising CNN function which reduces the overhead during\n    grid searches.\n\n    :param cnn_model_path: File path to the trained denoising model\n    :type cnn_model_path: String\n    :param device_name: Name of the device the model is loaded to.\n    :type device_name: String\n    :param channels: Number of image channels. Must be given for the comp graph.\n    :type channels: Int\n    :param _log: Sacred logging module\n    :type _log: Logger\n\n    :returns: Preinitialized deployment CNN\n    :rtype: function\n    \"\"\"", "\n", "if", "not", "cnn_model_path", ":", "\n", "        ", "_log", ".", "error", "(", "'No cnn_model_path given.'", ")", "\n", "exit", "(", ")", "\n", "", "FLAGS", ".", "device_name", "=", "device_name", "\n", "FLAGS", ".", "model_path", "=", "cnn_model_path", "\n", "FLAGS", ".", "channels", "=", "channels", "\n", "nn_deployer", "=", "Deployer", "(", "FLAGS", ")", "\n", "\n", "def", "cnn", "(", "x", ")", ":", "\n", "        ", "if", "len", "(", "x", ".", "shape", ")", "==", "2", ":", "\n", "            ", "x", "=", "x", "[", "np", ".", "newaxis", ",", "...", ",", "np", ".", "newaxis", "]", "\n", "", "elif", "len", "(", "x", ".", "shape", ")", "==", "3", ":", "\n", "# x = x[np.newaxis, ...].transpose((3, 1, 2, 0))", "\n", "# res = nn_deployer.deploy(x)['output_clipped']", "\n", "# res = np.squeeze(res.transpose((3, 1, 2, 0)))", "\n", "            ", "x", "=", "x", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "else", ":", "\n", "            ", "_log", ".", "error", "(", "'No valid data dimension.'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "res", "=", "np", ".", "squeeze", "(", "nn_deployer", ".", "deploy", "(", "x", ")", "[", "'output_clipped'", "]", ")", "\n", "return", "res", "\n", "\n", "", "return", "cnn", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_metric": [[205, 231], ["proximal.utils.metrics.psnr_metric", "proximal.utils.metrics.ssim_metric", "_log.error", "exit"], "function", ["None"], ["", "@", "elemental_ingredient", ".", "capture", "\n", "def", "init_metric", "(", "ref", ",", "pad", ",", "metric_decimals", ",", "metric_type", ",", "_log", ")", ":", "\n", "    ", "\"\"\"\n    Initializes a metric function.\n\n    :param ref: Uncorrupted reference image\n    :type ref: np.ndarray\n    :param pad: Right-Left and Up-Down padding\n    :type pad: Tuple\n    :param metric_decimals: Number of printed decimals\n    :type metric_decimals: Int\n    :param metric_type: Specified metric type (\"PSNR\" or \"SSIM\")\n    :type metric_type: String\n    :param _log: Sacred logging module\n    :type _log: Logger\n\n    :returns: Preinitialized metric\n    :rtype: proximal.utils.metrics\n    \"\"\"", "\n", "if", "metric_type", "==", "\"PSNR\"", ":", "\n", "        ", "return", "psnr_metric", "(", "ref", ",", "pad", "=", "pad", ",", "decimals", "=", "metric_decimals", ")", "\n", "", "elif", "metric_type", "==", "\"SSIM\"", ":", "\n", "        ", "return", "ssim_metric", "(", "ref", ",", "pad", "=", "pad", ",", "decimals", "=", "metric_decimals", ")", "\n", "", "else", ":", "\n", "        ", "_log", ".", "error", "(", "'No valid metric selected.'", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_problem": [[234, 263], ["proximal.Problem"], "function", ["None"], ["", "", "@", "elemental_ingredient", ".", "capture", "\n", "def", "init_problem", "(", "prox_fns", ",", "implem", ",", "scale", ",", "try_split", ",", "merge", ",", "absorb", ")", ":", "\n", "    ", "\"\"\"\n    Initializes a problem.\n\n    :param prox_fns: Proxable functions which define the problem.\n    :type prox_fns: List\n    :param implem: Implementation modus (\"halide\" or \"numpy\")\n    :type implem: String\n    :param scale: If the problem should be scaled\n    :type scale: Bool\n    :param try_split: If a problem split should be tried\n    :type try_split: Bool\n    :param merge: If problem should be merged\n    :type merge: Bool\n    :param absorb: If linear operators should be absorbed\n    :type absorb: Bool\n\n    :returns: Initialized problem\n    :rtype: proximal.Problem\n    \"\"\"", "\n", "prob", "=", "px", ".", "Problem", "(", "prox_fns", ",", "\n", "implem", "=", "Impl", "[", "implem", "]", ",", "\n", "scale", "=", "scale", ",", "\n", "try_split", "=", "try_split", ",", "\n", "merge", "=", "merge", ",", "\n", "absorb", "=", "absorb", ")", "\n", "\n", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.solve_problem": [[265, 312], ["problem.solve"], "function", ["None"], ["", "@", "elemental_ingredient", ".", "capture", "\n", "def", "solve_problem", "(", "problem", ",", "x0", ",", "lin_solver_options", ",", "metric", ",", "conv_mode", ",", "tau", ",", "sigma", ",", "\n", "theta", ",", "max_iters", ",", "conv_check", ",", "eps_abs", ",", "eps_rel", ",", "verbose", ",", "img_log_dir", ")", ":", "\n", "    ", "\"\"\"\n    Solve a previously initialized problem.\n\n    :param problem: Previously initialized problem\n    :type problem: proximal.Problem\n    :param x0: Initialization for the first iterate\n    :type x0: np.ndarray\n    :param metric: Preinitialized metric\n    :type metric: proximal.utils.metrics\n    :param conv_mode: Convergence mode for the solver. (\"residual\", \"metric\" or \"metric_all_iter\")\n    :type conv_mode: String\n    :param tau: Step size for the dual variable\n    :type tau: Float\n    :param sigma:  Step size for the primal variable\n    :type sigma: Float\n    :param theta: Step size for the interpolation step\n    :param theta: Float\n    :param max_iters: Maximum number of iterations\n    :type max_iters: Int\n    :param conv_check: Check convergence each conv_check iteration\n    :type conv_check: Int\n    :param eps_abs: Absolute error epsilon for residual convergence\n    :type eps_abs: Float\n    :param eps_rel: Relative error epsilon for residual convergence\n    :type eps_rel: Float\n    :param verbose: Logging verbosity (0,1 or 2)\n    :type verbose: Int\n    :param img_log_dir: Path to directory for logging intermediate iteration results.\n    :type img_log_dir: String\n    \"\"\"", "\n", "problem", ".", "solve", "(", "solver", "=", "\"pc\"", ",", "\n", "tau", "=", "tau", ",", "\n", "sigma", "=", "sigma", ",", "\n", "theta", "=", "theta", ",", "\n", "max_iters", "=", "max_iters", ",", "\n", "conv_check", "=", "conv_check", ",", "\n", "eps_abs", "=", "eps_abs", ",", "\n", "eps_rel", "=", "eps_rel", ",", "\n", "x0", "=", "x0", ",", "\n", "lin_solver_options", "=", "lin_solver_options", ",", "\n", "metric", "=", "metric", ",", "\n", "verbose", "=", "verbose", ",", "\n", "img_log_dir", "=", "img_log_dir", ",", "\n", "conv_mode", "=", "conv_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.grid_config": [[318, 328], ["None"], "function", ["None"], ["@", "grid_ingredient", ".", "config", "\n", "def", "grid_config", "(", ")", ":", "\n", "    ", "\"\"\"\n    Grid search configuration.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "log_path", "=", "None", "\n", "param_dicts_file_path", "=", "None", "# plot or continue previous grid search", "\n", "info_msg", "=", "''", "\n", "n_jobs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.plot": [[330, 369], ["grid_ingredient.command", "zip", "print", "numpy.argmax", "print", "print", "plt.figure", "plt.figure.add_subplot", "fig.add_subplot.plot", "plt.show", "_log.error", "exit", "open", "utilities.pickle_load_all_to_list", "data[].keys", "changed_keys_order.append"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.plot", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.pickle_load_all_to_list"], ["", "@", "grid_ingredient", ".", "command", "(", "unobserved", "=", "True", ")", "\n", "def", "plot", "(", "param_dicts_file_path", ",", "_log", ")", ":", "\n", "    ", "\"\"\"\n    Plot a previous grid search.\n\n    :param param_dicts_file_path: Path to pickled file with previous parameters and results\n    :type param_dicts_file_path: String\n    :param _log: Sacred logging module\n    :type _log: Logger\n    \"\"\"", "\n", "if", "param_dicts_file_path", "is", "None", ":", "\n", "        ", "_log", ".", "error", "(", "'No grid search param_dicts_file_path specified.'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "with", "open", "(", "param_dicts_file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data", "=", "pickle_load_all_to_list", "(", "f", ")", "\n", "", "psnrs", "=", "[", "d", "[", "'psnr'", "]", "for", "d", "in", "data", "]", "\n", "\n", "keys", "=", "[", "k", "for", "k", "in", "data", "[", "0", "]", ".", "keys", "(", ")", "if", "k", "!=", "'psnr'", "]", "\n", "changed_keys_order", "=", "[", "]", "\n", "for", "d", ",", "next_d", "in", "zip", "(", "data", ",", "data", "[", "1", ":", "]", ")", ":", "\n", "        ", "for", "key", "in", "keys", ":", "\n", "            ", "if", "d", "[", "key", "]", "!=", "next_d", "[", "key", "]", ":", "\n", "                ", "if", "key", "not", "in", "changed_keys_order", ":", "\n", "                    ", "changed_keys_order", ".", "append", "(", "key", ")", "\n", "break", "\n", "\n", "", "", "", "", "print", "(", "\"Order of changed grid params first to last: %s\"", "%", "changed_keys_order", ")", "\n", "max_id", "=", "np", ".", "argmax", "(", "psnrs", ")", "\n", "print", "(", "\"Max id: %i\"", "%", "max_id", ")", "\n", "print", "(", "\"Max params: %s\"", "%", "data", "[", "max_id", "]", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "8", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "ax", ".", "plot", "(", "psnrs", ")", "\n", "# for x, y in enumerate(psnrs):", "\n", "#     circl = plt.Circle((x, y), 1.0)", "\n", "#     ax.add_patch(circl)", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.grid_search_wrapper": [[371, 401], ["experiment_wrapper", "open", "pickle.dump", "dict"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.experiment_wrapper"], ["", "def", "grid_search_wrapper", "(", "experiment_wrapper", ",", "experiment_wrapper_args", ",", "cnn_func", ",", "\n", "grid_params", ",", "elemental", ",", "param_dicts_save_path", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper for each call of the experiment_wrapper in start_grid_search which\n    executes the grid search for a particular parameter set and saves the result\n    in the file at param_dicts_save_path.\n\n    :param experiment_wrapper: Experiment specific wrapper functions\n    :type experiment_wrapper: function\n    :param experiment_wrapper_args: Arguments for experiment_wrapper\n    :type experiment_wrapper_args: Tuple or List\n    :param cnn_func: Preinitialized deployment CNN\n    :type cnn_func: function\n    :param grid_params: Update parameters for specific grid configuration\n    :type grid_params: Dict\n    :param elemental: General experiment configuration parameters\n    :type elemental: Dict\n    :param param_dicts_save_path: Path to the current file with parameters and results\n    :type param_dicts_save_path: String\n\n    :returns: PSNR result\n    :rtype: Float\n    \"\"\"", "\n", "psnr", "=", "experiment_wrapper", "(", "*", "experiment_wrapper_args", ",", "\n", "cnn_func", "=", "cnn_func", ",", "\n", "grid_params", "=", "grid_params", ",", "\n", "elemental", "=", "elemental", ")", "\n", "with", "open", "(", "param_dicts_save_path", ",", "'a+b'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "dict", "(", "grid_params", ",", "**", "{", "'psnr'", ":", "psnr", "}", ")", ",", "f", ")", "\n", "", "return", "psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.start_grid_search": [[403, 536], ["os.path.join", "grid_params.items", "_log.info", "numpy.argmax", "_log.info", "multiprocessing.cpu_count", "experiment_ingredients.init_cnn_func", "os.path.join", "sorted", "open", "f.write", "_log.info", "joblib.Parallel", "open", "f.write", "str", "list", "grid_params.items", "itertools.product", "len", "info_str.replace", "open", "utilities.pickle_load_all_to_list", "_log.error", "exit", "open", "joblib.delayed", "set", "enumerate", "len", "pickle.dump", "str", "elemental[].lower", "grid_params.keys", "grid_params.values", "res_dict.items", "prev_params_iter[].keys", "grid_params.keys", "experiment_ingredients.start_grid_search.is_dict_in"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_cnn_func", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.utilities.pickle_load_all_to_list"], ["", "@", "grid_ingredient", ".", "capture", "\n", "def", "start_grid_search", "(", "experiment_info", ",", "experiment_wrapper", ",", "experiment_wrapper_args", ",", "\n", "grid_params", ",", "info_msg", ",", "log_path", ",", "param_dicts_file_path", ",", "\n", "n_jobs", ",", "_seed", ",", "_log", ",", "_config", ")", ":", "\n", "    ", "\"\"\"\n    Starts a grid search.\n\n    :param experiment_info: Info about the experiment which will be logged.\n    :type experiment_info: String\n    :param experiment_wrapper: Experiment specific wrapper functions\n    :type experiment_wrapper: function\n    :param experiment_wrapper_args: Arguments for experiment_wrapper\n    :type experiment_wrapper_args: Tuple or List\n    :param grid_params: Update parameters for specific grid configuration\n    :type grid_params: Dict\n    :param info_msg: Additional info message which will be logged.\n    :type info_msg: String\n    :param log_path: Path to text file where final results will be logged.\n    :type log_path: String\n    :param param_dicts_file_path: Path to pickled file with previous parameters and results\n    :type param_dicts_file_path: String\n    :param n_jobs: Number of jobs (threads) for parallel grid search.\n    :param _seed: Run specific random integer.\n    :type _seed: Int\n    :param _log: Sacred logging module\n    :type _log: Logger\n    :param _config: Entire configuration space.\n    :type _config: Dict\n\n    :returns: PSNR result\n    :rtype: Float\n    \"\"\"", "\n", "# pylint:disable=no-value-for-parameter", "\n", "# TODO: refactor", "\n", "elemental", "=", "_config", "[", "'elemental'", "]", "\n", "n_jobs", "=", "multiprocessing", ".", "cpu_count", "(", ")", "if", "n_jobs", "is", "None", "else", "n_jobs", "\n", "cnn_func", "=", "init_cnn_func", "(", ")", "if", "elemental", "[", "'denoising_prior'", "]", "==", "'CNN'", "else", "None", "\n", "param_dicts_save_path", "=", "os", ".", "path", ".", "join", "(", "'data/grid_search/param_dicts'", ",", "\n", "str", "(", "_seed", ")", "+", "'.p'", ")", "\n", "\n", "if", "log_path", "is", "None", ":", "\n", "        ", "log_path", "=", "os", ".", "path", ".", "join", "(", "\"data/grid_search\"", ",", "\n", "experiment_info", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "+", "\"_\"", "+", "elemental", "[", "'denoising_prior'", "]", ".", "lower", "(", ")", "+", "\".txt\"", ")", "\n", "\n", "# uniquify grid param sets", "\n", "", "grid_params", "=", "{", "k", ":", "sorted", "(", "list", "(", "set", "(", "v", ")", ")", ")", "for", "k", ",", "v", "in", "grid_params", ".", "items", "(", ")", "}", "\n", "params_iter", "=", "[", "{", "k", ":", "p", "[", "i", "]", "for", "i", ",", "k", "in", "enumerate", "(", "grid_params", ".", "keys", "(", ")", ")", "}", "\n", "for", "p", "in", "itertools", ".", "product", "(", "*", "grid_params", ".", "values", "(", ")", ")", "]", "\n", "\n", "#", "\n", "# logging", "\n", "#", "\n", "info_str", "=", "(", "\"\\n\\tExperiment: %s\\n\"", "\n", "\"\\tDenoising prior: %s\\n\"", "\n", "\"\\tinfo_msg: %s\\n\"", "\n", "\"\\tseed: %i\\n\"", "\n", "\"\\tElemental config: %s\\n\"", "\n", "\"\\tNumber of parameter sets to iterate: %i\\n\"", ")", "%", "(", "experiment_info", ",", "\n", "elemental", "[", "'denoising_prior'", "]", ",", "\n", "info_msg", ",", "\n", "_seed", ",", "\n", "elemental", ",", "\n", "len", "(", "params_iter", ")", ")", "\n", "for", "name", ",", "values", "in", "grid_params", ".", "items", "(", ")", ":", "\n", "        ", "info_str", "+=", "\"\\t%s: [%f, ..., %f]\\n\"", "%", "(", "name", ",", "values", "[", "0", "]", ",", "values", "[", "-", "1", "]", ")", "\n", "\n", "", "_log", ".", "info", "(", "info_str", ")", "\n", "with", "open", "(", "log_path", ",", "'a+'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "info_str", ".", "replace", "(", "'\\t'", ",", "''", ")", ")", "\n", "\n", "#", "\n", "# search", "\n", "#", "\n", "\n", "# continue previous search", "\n", "", "if", "param_dicts_file_path", "is", "not", "None", ":", "\n", "\n", "        ", "def", "is_dict_in", "(", "dict", ",", "dict_list", ")", ":", "\n", "            ", "for", "d", "in", "dict_list", ":", "\n", "                ", "if", "False", "not", "in", "[", "dict", "[", "k", "]", "==", "v", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "]", ":", "\n", "                    ", "return", "True", "\n", "", "", "return", "False", "\n", "\n", "", "with", "open", "(", "param_dicts_file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "prev_results", "=", "pickle_load_all_to_list", "(", "f", ")", "\n", "", "prev_psnrs", "=", "[", "res_dict", "[", "'psnr'", "]", "for", "res_dict", "in", "prev_results", "]", "\n", "prev_params_iter", "=", "[", "{", "k", ":", "v", "for", "k", ",", "v", "in", "res_dict", ".", "items", "(", ")", "if", "k", "!=", "'psnr'", "}", "\n", "for", "res_dict", "in", "prev_results", "]", "\n", "\n", "#for param in prev_params_iter:", "\n", "#    param[\"alpha_data\"] *= 4", "\n", "\n", "if", "False", "in", "[", "k", "in", "prev_params_iter", "[", "0", "]", ".", "keys", "(", ")", "for", "k", "in", "grid_params", ".", "keys", "(", ")", "]", ":", "\n", "            ", "_log", ".", "error", "(", "\"Previous and current param keys are not equal.\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "params_iter", "=", "[", "params", "for", "params", "in", "params_iter", "\n", "if", "not", "is_dict_in", "(", "params", ",", "prev_params_iter", ")", "]", "\n", "_log", ".", "info", "(", "\"Number of parameter sets without previous: %i\"", "%", "len", "(", "params_iter", ")", ")", "\n", "\n", "# save previous results in new param dicts file", "\n", "with", "open", "(", "param_dicts_save_path", ",", "'a+b'", ")", "as", "f", ":", "\n", "            ", "for", "r_dict", "in", "prev_results", ":", "\n", "                ", "pickle", ".", "dump", "(", "r_dict", ",", "f", ")", "\n", "", "", "", "else", ":", "\n", "        ", "prev_psnrs", "=", "[", "]", "\n", "prev_params_iter", "=", "[", "]", "\n", "\n", "", "jobs", "=", "[", "delayed", "(", "grid_search_wrapper", ")", "(", "experiment_wrapper", ",", "experiment_wrapper_args", ",", "cnn_func", ",", "params", ",", "elemental", ",", "param_dicts_save_path", ")", "\n", "for", "params", "in", "params_iter", "]", "\n", "psnrs", "=", "Parallel", "(", "backend", "=", "\"threading\"", ",", "n_jobs", "=", "n_jobs", ",", "verbose", "=", "11", ")", "(", "jobs", ")", "\n", "\n", "psnrs", "+=", "prev_psnrs", "\n", "params_iter", "+=", "prev_params_iter", "\n", "max_idx", "=", "np", ".", "argmax", "(", "psnrs", ")", "\n", "\n", "#", "\n", "# logging", "\n", "#", "\n", "result_str", "=", "'PSNR: %f PARAMS: %s'", "%", "(", "psnrs", "[", "max_idx", "]", ",", "params_iter", "[", "max_idx", "]", ")", "\n", "_log", ".", "info", "(", "result_str", ")", "\n", "\n", "with", "open", "(", "log_path", ",", "'a+'", ")", "as", "f", ":", "\n", "        ", "if", "elemental", "[", "'denoising_prior'", "]", "!=", "\"CNN\"", "and", "\"sigma_scale\"", "in", "params_iter", "[", "max_idx", "]", ":", "\n", "            ", "effective_noise_sigma", "=", "np", ".", "sqrt", "(", "1", "/", "params_iter", "[", "max_idx", "]", "[", "'sigma'", "]", ")", "/", "30", "*", "params_iter", "[", "max_idx", "]", "[", "'sigma_scale'", "]", "\n", "result_str", "+=", "\" effective_noise_sigma: %s\\n\"", "%", "str", "(", "effective_noise_sigma", ")", "\n", "", "f", ".", "write", "(", "result_str", "+", "'\\n'", ")", "\n", "", "return", "psnrs", "[", "max_idx", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.optimal_BM3D_experiment_a": [[24, 37], ["None"], "function", ["None"], ["@", "elemental_ingredient", ".", "named_config", "\n", "def", "optimal_BM3D_experiment_a", "(", ")", ":", "\n", "    ", "\"\"\"\n    Updated experimental configuration.\n    Corresponds to FlexISP*.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "denoising_prior", "=", "'BM3D'", "\n", "sigma", "=", "20.0", "\n", "sigma_scale", "=", "1.0", "\n", "\n", "alpha_data", "=", "200.0", "\n", "alpha_tv", "=", "0.3", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.optimal_BM3D_experiment_b": [[39, 52], ["None"], "function", ["None"], ["", "@", "elemental_ingredient", ".", "named_config", "\n", "def", "optimal_BM3D_experiment_b", "(", ")", ":", "\n", "    ", "\"\"\"\n    Updated experimental configuration.\n    Corresponds to FlexISP*.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "denoising_prior", "=", "'BM3D'", "\n", "sigma", "=", "5.", "\n", "sigma_scale", "=", "20.0", "\n", "\n", "alpha_data", "=", "1400.0", "\n", "alpha_tv", "=", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.optimal_BM3D_experiment_c": [[54, 67], ["None"], "function", ["None"], ["", "@", "elemental_ingredient", ".", "named_config", "\n", "def", "optimal_BM3D_experiment_c", "(", ")", ":", "\n", "    ", "\"\"\"\n    Updated experimental configuration.\n    Corresponds to FlexISP*.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "denoising_prior", "=", "'BM3D'", "\n", "sigma", "=", "1.0", "\n", "sigma_scale", "=", "1.0", "\n", "\n", "alpha_data", "=", "40.0", "\n", "alpha_tv", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.optimal_BM3D_experiment_d": [[69, 82], ["None"], "function", ["None"], ["", "@", "elemental_ingredient", ".", "named_config", "\n", "def", "optimal_BM3D_experiment_d", "(", ")", ":", "\n", "    ", "\"\"\"\n    Updated experimental configuration.\n    Corresponds to FlexISP*.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "denoising_prior", "=", "'BM3D'", "\n", "sigma", "=", "10.0", "\n", "sigma_scale", "=", "15.0", "\n", "\n", "alpha_data", "=", "600.0", "\n", "alpha_tv", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.optimal_BM3D_experiment_e": [[84, 97], ["None"], "function", ["None"], ["", "@", "elemental_ingredient", ".", "named_config", "\n", "def", "optimal_BM3D_experiment_e", "(", ")", ":", "\n", "    ", "\"\"\"\n    Updated experimental configuration.\n    Corresponds to FlexISP*.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "denoising_prior", "=", "'BM3D'", "\n", "sigma", "=", "5.", "\n", "sigma_scale", "=", "1.0", "\n", "\n", "alpha_data", "=", "150.0", "\n", "alpha_tv", "=", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.optimal_DNCNN_experiment_a": [[99, 110], ["None"], "function", ["None"], ["", "@", "elemental_ingredient", ".", "named_config", "\n", "def", "optimal_DNCNN_experiment_a", "(", ")", ":", "\n", "    ", "\"\"\"\n    Updated experimental configuration.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "denoising_prior", "=", "'CNN'", "\n", "cnn_model_path", "=", "'models/DNCNN__gaussian_0.02__40-40-1__128/model.ckpt'", "\n", "sigma", "=", "1.0", "\n", "alpha_data", "=", "2.0", "\n", "alpha_tv", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.optimal_DNCNN_experiment_b": [[112, 123], ["None"], "function", ["None"], ["", "@", "elemental_ingredient", ".", "named_config", "\n", "def", "optimal_DNCNN_experiment_b", "(", ")", ":", "\n", "    ", "\"\"\"\n    Updated experimental configuration.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "denoising_prior", "=", "'CNN'", "\n", "cnn_model_path", "=", "'models/DNCNN__gaussian_0.02__40-40-1__128/model.ckpt'", "\n", "sigma", "=", "1.0", "\n", "alpha_data", "=", "75.0", "\n", "alpha_tv", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.optimal_DNCNN_experiment_c": [[125, 136], ["None"], "function", ["None"], ["", "@", "elemental_ingredient", ".", "named_config", "\n", "def", "optimal_DNCNN_experiment_c", "(", ")", ":", "\n", "    ", "\"\"\"\n    Updated experimental configuration.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "denoising_prior", "=", "'CNN'", "\n", "cnn_model_path", "=", "'models/DNCNN__gaussian_0.02__40-40-1__128/model.ckpt'", "\n", "sigma", "=", "1.0", "\n", "alpha_data", "=", "4.0", "\n", "alpha_tv", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.optimal_DNCNN_experiment_d": [[138, 149], ["None"], "function", ["None"], ["", "@", "elemental_ingredient", ".", "named_config", "\n", "def", "optimal_DNCNN_experiment_d", "(", ")", ":", "\n", "    ", "\"\"\"\n    Updated experimental configuration.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "denoising_prior", "=", "'CNN'", "\n", "cnn_model_path", "=", "'models/DNCNN__gaussian_0.02__40-40-1__128/model.ckpt'", "\n", "sigma", "=", "1.0", "\n", "alpha_data", "=", "73.0", "\n", "alpha_tv", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.optimal_DNCNN_experiment_e": [[151, 162], ["None"], "function", ["None"], ["", "@", "elemental_ingredient", ".", "named_config", "\n", "def", "optimal_DNCNN_experiment_e", "(", ")", ":", "\n", "    ", "\"\"\"\n    Updated experimental configuration.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "denoising_prior", "=", "'CNN'", "\n", "cnn_model_path", "=", "'models/DNCNN__gaussian_0.02__40-40-1__128/model.ckpt'", "\n", "sigma", "=", "1.0", "\n", "alpha_data", "=", "23.0", "\n", "alpha_tv", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.experiment_wrapper": [[168, 216], ["elemental.copy", "elemental.copy.update", "data.load_deblurring_grey_data", "data.values", "numpy.squeeze", "experiment_ingredients.init_metric", "experiment_deblurring.solver", "experiment_ingredients.init_metric.eval", "collections.OrderedDict", "numpy.mean", "averages.append", "numpy.mean", "list", "collections.OrderedDict.values", "experiment_deblurring.experiment_wrapper.evaluate"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.load_deblurring_grey_data", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_metric", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.solver"], ["", "def", "experiment_wrapper", "(", "experiment_name", ",", "image_name", ",", "cnn_func", ",", "grid_params", ",", "elemental", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper function which is passed to start_grid_search and handles a grid\n    search for a single a single set of grid_params.\n\n    :param experiment_name: Name of the experiment a-e: experiment_*\n    :type experiment_name: String\n    :param image_name: Name of the image\n    :type image_name: String\n    :param cnn_func: Preinitialized deployment CNN\n    :type cnn_func: function\n    :param grid_params: Update parameters for specific grid configuration\n    :type grid_params: Dict\n    :param elemental: General experiment configuration parameters\n    :type elemental: Dict\n\n    :returns: Average (image- and experiment-wise) PSNR result\n    :rtype: Float\n    \"\"\"", "\n", "# pylint:disable=no-value-for-parameter", "\n", "elemental_copy", "=", "elemental", ".", "copy", "(", ")", "\n", "elemental_copy", ".", "update", "(", "grid_params", ")", "\n", "data", ",", "crop", "=", "load_deblurring_grey_data", "(", ")", "\n", "\n", "def", "evaluate", "(", "image_name", ",", "images", ",", "kernel_img", ")", ":", "\n", "        ", "metric", "=", "init_metric", "(", "images", "[", "'img'", "]", ",", "pad", "=", "(", "crop", ",", "crop", ")", ")", "\n", "\n", "u", "=", "solver", "(", "images", "[", "'f'", "]", ",", "kernel_img", ",", "metric", ",", "cnn_func", ",", "elemental_copy", ")", "\n", "return", "metric", ".", "eval", "(", "u", ")", "\n", "\n", "", "if", "experiment_name", "is", "not", "None", ":", "\n", "        ", "data", "=", "{", "experiment_name", ":", "data", "[", "experiment_name", "]", "}", "\n", "if", "image_name", "is", "not", "None", ":", "\n", "            ", "data", "[", "experiment_name", "]", "=", "{", "image_name", ":", "data", "[", "experiment_name", "]", "[", "image_name", "]", ",", "\n", "'kernel_img'", ":", "data", "[", "experiment_name", "]", "[", "'kernel_img'", "]", "}", "\n", "\n", "", "", "averages", "=", "[", "]", "\n", "for", "experiment_images", "in", "data", ".", "values", "(", ")", ":", "\n", "        ", "kernel_img", "=", "experiment_images", "[", "'kernel_img'", "]", "\n", "results", "=", "collections", ".", "OrderedDict", "(", "(", "name", ",", "evaluate", "(", "name", ",", "images", ",", "kernel_img", ")", ")", "\n", "for", "name", ",", "images", "in", "experiment_images", ".", "items", "(", ")", "\n", "if", "not", "name", "==", "'kernel_img'", ")", "\n", "\n", "average", "=", "np", ".", "mean", "(", "list", "(", "results", ".", "values", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "averages", ".", "append", "(", "average", ")", "\n", "\n", "", "average", "=", "np", ".", "squeeze", "(", "np", ".", "mean", "(", "averages", ",", "axis", "=", "0", ")", ")", "\n", "return", "average", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.grid_search": [[218, 279], ["ex.command", "_log.error", "exit", "psnrs.append", "len", "print", "list", "list", "list", "list", "list", "list", "list", "list", "experiment_ingredients.start_grid_search", "numpy.mean", "numpy.arange", "numpy.arange", "list", "numpy.arange", "numpy.arange", "numpy.arange", "list", "numpy.arange", "numpy.arange", "list", "filter", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.start_grid_search"], ["", "@", "ex", ".", "command", "(", "unobserved", "=", "True", ")", "\n", "def", "grid_search", "(", "experiment_name", ",", "image_name", ",", "elemental", ",", "_log", ")", ":", "\n", "    ", "\"\"\"\n    CML command which starts a grid search. If image_name can not be set without\n    experiment_name.\n\n    :param experiment_name: Name of the experiment a-e: experiment_*\n    :type experiment_name: String\n    :param image_name: Name of the image\n    :type image_name: String\n    :param elemental: General experiment configuration parameters\n    :type elemental: Dict\n    :param _log: Sacred logging module\n    :type _log: Logger\n    \"\"\"", "\n", "# pylint:disable=no-value-for-parameter", "\n", "# pylint:disable=unused-variable", "\n", "grid_params", "=", "{", "}", "\n", "if", "elemental", "[", "'denoising_prior'", "]", "==", "'NLM'", ":", "\n", "        ", "grid_params", "[", "'sigma'", "]", "=", "[", "1", ",", "5", "]", "+", "list", "(", "np", ".", "arange", "(", "10", ",", "110", ",", "10", ")", ")", "\n", "grid_params", "[", "'sigma_scale'", "]", "=", "[", "1", "]", "+", "list", "(", "np", ".", "arange", "(", "5", ",", "25", ",", "5", ")", ")", "\n", "grid_params", "[", "'alpha_data'", "]", "=", "[", "20", ",", "60", "]", "+", "list", "(", "np", ".", "arange", "(", "100", ",", "900", ",", "100", ")", ")", "+", "[", "1200", ",", "1600", ",", "2000", ",", "4000", ",", "6000", "]", "#, 8000, 10000]", "\n", "grid_params", "[", "'alpha_tv'", "]", "=", "[", "0.0", "]", "+", "list", "(", "np", ".", "arange", "(", "0.1", ",", "0.6", ",", "0.1", ")", ")", "\n", "", "if", "elemental", "[", "'denoising_prior'", "]", "==", "'BM3D'", ":", "\n", "        ", "grid_params", "[", "'sigma'", "]", "=", "[", "1", ",", "5", "]", "+", "list", "(", "np", ".", "arange", "(", "10", ",", "110", ",", "10", ")", ")", "\n", "grid_params", "[", "'sigma_scale'", "]", "=", "[", "1", "]", "+", "list", "(", "np", ".", "arange", "(", "5", ",", "20", ",", "5", ")", ")", "\n", "grid_params", "[", "'alpha_data'", "]", "=", "[", "20", ",", "60", "]", "+", "list", "(", "np", ".", "arange", "(", "100", ",", "900", ",", "100", ")", ")", "+", "[", "1200", ",", "1600", ",", "2000", ",", "4000", ",", "6000", "]", "#, 8000, 10000]", "\n", "grid_params", "[", "'alpha_tv'", "]", "=", "[", "0.0", "]", "+", "list", "(", "np", ".", "arange", "(", "0.1", ",", "0.8", ",", "0.1", ")", ")", "\n", "", "elif", "elemental", "[", "'denoising_prior'", "]", "==", "'CNN'", ":", "\n", "        ", "grid_params", "[", "'sigma'", "]", "=", "[", "1", "]", "#, 2, 3, 4] + list(np.arange(5, 105, 5))", "\n", "grid_params", "[", "'alpha_data'", "]", "=", "list", "(", "np", ".", "arange", "(", "1", ",", "201", ",", "1", ")", ")", "#+ list(np.arange(20, 10020, 20)) #[20, 60] + list(np.arange(100, 900, 100)) + [1200, 1600, 2000, 4000, 6000, 8000, 10000]", "\n", "grid_params", "[", "'alpha_tv'", "]", "=", "[", "0.0", "]", "+", "list", "(", "np", ".", "arange", "(", "0.1", ",", "1.1", ",", "0.1", ")", ")", "#, 0.05] + list(np.arange(0.1, 0.6, 0.1))", "\n", "\n", "# image-wise searches only for specific experiments", "\n", "", "if", "experiment_name", "is", "None", "and", "image_name", "is", "not", "None", ":", "\n", "        ", "_log", ".", "error", "(", "\"Specify experiment_name for image_name.\"", ")", "\n", "exit", "(", ")", "\n", "\n", "# if no experiment is specified search for all experiments (individually)", "\n", "", "if", "experiment_name", "is", "None", ":", "\n", "        ", "experiment_names", "=", "[", "\"experiment_\"", "+", "end", "for", "end", "in", "[", "'a'", ",", "'b'", ",", "'c'", ",", "'d'", ",", "'e'", "]", "]", "\n", "", "else", ":", "\n", "        ", "experiment_names", "=", "[", "experiment_name", "]", "\n", "\n", "", "psnrs", "=", "[", "]", "\n", "# TODO: grid search on all experiments and images jointly.", "\n", "for", "experiment_name", "in", "experiment_names", ":", "\n", "        ", "wrapper_args", "=", "[", "experiment_name", ",", "image_name", "]", "\n", "experiment_info", "=", "\"__\"", ".", "join", "(", "list", "(", "filter", "(", "None", ".", "__ne__", ",", "[", "ex", ".", "path", ",", "\n", "experiment_name", ",", "\n", "image_name", "]", ")", ")", ")", "\n", "psnrs", ".", "append", "(", "start_grid_search", "(", "experiment_info", ",", "\n", "experiment_wrapper", ",", "\n", "wrapper_args", ",", "\n", "grid_params", ")", ")", "\n", "\n", "# TODO: move experiment wise search and final printing to wrapper.", "\n", "# no average of averages for single experiment searches", "\n", "", "if", "len", "(", "psnrs", ")", ">", "1", ":", "\n", "        ", "msg", "=", "\"AVG of AVGS: %f\"", "%", "np", ".", "mean", "(", "psnrs", ")", "\n", "print", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.config": [[285, 298], ["None"], "function", ["None"], ["", "", "@", "ex", ".", "config", "\n", "def", "config", "(", ")", ":", "\n", "    ", "\"\"\"\n    Default experiment configuration.\n    \"\"\"", "\n", "# pylint:disable=unused-variable", "\n", "experiment_name", "=", "None", "# [\"experiment_a\", ..., \"experiment_e\"]", "\n", "image_name", "=", "None", "# ['barbara', 'boat', 'cameraman', 'couple', 'fingerprint', 'hill', 'house', 'lena', 'man', 'montage', 'peppers']", "\n", "mlp_psnrs", "=", "{", "\"experiment_a\"", ":", "24.76", ",", "\n", "\"experiment_b\"", ":", "27.23", ",", "\n", "\"experiment_c\"", ":", "22.20", ",", "\n", "\"experiment_d\"", ":", "22.75", ",", "\n", "\"experiment_e\"", ":", "29.42", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.solver": [[299, 342], ["proximal.cg_options", "proximal.Variable", "proximal.conv", "proximal.sum_squares", "experiment_ingredients.init_denoising_prior", "experiment_ingredients.init_problem", "experiment_ingredients.solve_problem", "numpy.clip", "proximal.norm1", "f.copy", "proximal.grad"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_denoising_prior", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_problem", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.solve_problem"], ["", "@", "ex", ".", "capture", "\n", "def", "solver", "(", "f", ",", "kernel_img", ",", "metric", ",", "cnn_func", ",", "elemental", ")", ":", "\n", "    ", "\"\"\"\n    Solves the deblurring problem for the given input and kernel image.\n\n    :param f: Corrupted input image\n    :type f: np.ndarray\n    :param kernel_img: Blur kernel\n    :type kernel_img: np.ndarray\n    :param metric: Preinitialized metric\n    :type metric: proximal.utils.metrics\n    :param cnn_func: Preinitialized deployment CNN\n    :type cnn_func: function\n    :param elemental: General experiment configuration parameters\n    :type elemental: Dict\n\n    :returns: Reconstructed output image\n    :rtype: np.ndarray\n    \"\"\"", "\n", "# pylint:disable=no-value-for-parameter", "\n", "options", "=", "px", ".", "cg_options", "(", "tol", "=", "1e-4", ",", "num_iters", "=", "100", ",", "verbose", "=", "True", ")", "\n", "\n", "u", "=", "px", ".", "Variable", "(", "f", ".", "shape", ")", "\n", "\n", "alpha_sumsquare", "=", "elemental", "[", "'alpha_data'", "]", "/", "2.0", "\n", "A_u", "=", "px", ".", "conv", "(", "kernel_img", ",", "u", ")", "\n", "\n", "prox_fns", "=", "px", ".", "sum_squares", "(", "A_u", "-", "f", ",", "alpha", "=", "alpha_sumsquare", ")", "\n", "if", "elemental", "[", "'alpha_tv'", "]", ">", "0.0", ":", "\n", "        ", "prox_fns", "+=", "px", ".", "norm1", "(", "elemental", "[", "'alpha_tv'", "]", "*", "px", ".", "grad", "(", "u", ")", ")", "\n", "", "prox_fns", "+=", "init_denoising_prior", "(", "u", ",", "\n", "cnn_func", ",", "\n", "sigma", "=", "elemental", "[", "'sigma'", "]", ",", "\n", "sigma_scale", "=", "elemental", "[", "'sigma_scale'", "]", ")", "\n", "\n", "prob", "=", "init_problem", "(", "prox_fns", ")", "\n", "solve_problem", "(", "prob", ",", "\n", "x0", "=", "f", ".", "copy", "(", ")", ",", "\n", "metric", "=", "metric", ",", "\n", "sigma", "=", "elemental", "[", "'sigma'", "]", ",", "\n", "lin_solver_options", "=", "options", ")", "\n", "\n", "return", "np", ".", "clip", "(", "u", ".", "value", ",", "0.0", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.main": [[344, 386], ["data.load_deblurring_grey_data", "experiment_ingredients.init_metric", "experiment_deblurring.solver", "experiment_ingredients.print_config", "_log.info", "_log.info", "_log.error", "exit", "experiment_ingredients.init_cnn_func", "plt.figure", "plt.figure.add_subplot", "plt.figure.add_subplot", "plt.figure.add_subplot", "fig.add_subplot.set_title", "fig.add_subplot.set_title", "fig.add_subplot.set_title", "fig.add_subplot.imshow", "fig.add_subplot.imshow", "fig.add_subplot.imshow", "plt.show", "experiment_ingredients.init_metric.eval", "experiment_ingredients.init_metric.eval"], "function", ["home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.data.load_deblurring_grey_data", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_metric", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_deblurring.solver", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.print_config", "home.repos.pwc.inspect_result.tum-vision_learn_prox_ops.src.experiment_ingredients.init_cnn_func"], ["", "@", "ex", ".", "automain", "\n", "def", "main", "(", "experiment_name", ",", "image_name", ",", "elemental", ",", "_log", ")", ":", "\n", "    ", "\"\"\"\n    Default command which solves the given deblurring experiment for image_name.\n\n    :param experiment_name: Name of the experiment a-e: experiment_*\n    :type experiment_name: String\n    :param image_name: Name of the image\n    :type image_name: String\n    :param elemental: General experiment configuration parameters\n    :type elemental: Dict\n    :param _log: Sacred logging module\n    :type _log: Logger\n    \"\"\"", "\n", "# pylint:disable=no-value-for-parameter", "\n", "if", "experiment_name", "is", "None", "and", "image_name", "is", "not", "None", ":", "\n", "        ", "_log", ".", "error", "(", "\"Specify experiment_name for image_name.\"", ")", "\n", "exit", "(", ")", "\n", "", "f", ",", "img", ",", "kernel_img", ",", "crop", "=", "load_deblurring_grey_data", "(", "experiment_name", ",", "\n", "image_name", ")", "\n", "\n", "cnn_func", "=", "init_cnn_func", "(", ")", "if", "elemental", "[", "'denoising_prior'", "]", "==", "'CNN'", "else", "None", "\n", "metric", "=", "init_metric", "(", "img", ",", "pad", "=", "(", "crop", ",", "crop", ")", ")", "\n", "u", "=", "solver", "(", "f", ",", "kernel_img", ",", "metric", ",", "cnn_func", ")", "\n", "\n", "print_config", "(", ")", "\n", "\n", "_log", ".", "info", "(", "\"Input PSNR: %f\"", "%", "metric", ".", "eval", "(", "f", ")", ")", "\n", "_log", ".", "info", "(", "\"Final PSNR: %f\"", "%", "metric", ".", "eval", "(", "u", ")", ")", "\n", "\n", "if", "elemental", "[", "'show_plot'", "]", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "5", ")", ")", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "141", ")", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "142", ")", "\n", "ax3", "=", "fig", ".", "add_subplot", "(", "143", ")", "\n", "ax1", ".", "set_title", "(", "'image'", ")", "\n", "ax2", ".", "set_title", "(", "'f'", ")", "\n", "ax3", ".", "set_title", "(", "'our'", ")", "\n", "ax1", ".", "imshow", "(", "img", ",", "cmap", "=", "'gray'", ")", "\n", "ax2", ".", "imshow", "(", "f", ",", "cmap", "=", "'gray'", ")", "\n", "ax3", ".", "imshow", "(", "u", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "", ""]]}