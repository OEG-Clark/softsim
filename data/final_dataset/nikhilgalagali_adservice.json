{"home.repos.pwc.inspect_result.nikhilgalagali_adservice.None.main.plot_data": [[20, 101], ["main.missing_timestamp_imputation", "pandas.read_csv", "pd.concat.set_index", "pandas.to_datetime", "main.missing_timestamp_imputation", "pandas.concat", "pd.concat.drop", "matplotlib.figure", "plt.figure.add_subplot", "matplotlib.rcParams.update", "matplotlib.subplots_adjust", "fig.add_subplot.plot_date", "fig.add_subplot.plot_date", "fig.add_subplot.plot_date", "fig.add_subplot.set_title", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylim", "fig.add_subplot.set_xlim", "matplotlib.savefig", "missing_timestamp_imputation.index.to_pydatetime", "pd.concat.index.to_pydatetime", "df_test_zone.index.to_pydatetime", "pandas.tseries.offsets.Minute", "fig.add_subplot.xaxis.set_minor_locator", "fig.add_subplot.xaxis.set_major_locator", "fig.add_subplot.yaxis.grid", "fig.add_subplot.xaxis.set_major_formatter", "fig.add_subplot.grid", "fig.add_subplot.grid", "pandas.tseries.offsets.Minute", "matplotlib.DayLocator", "matplotlib.DayLocator", "matplotlib.DateFormatter", "fig.add_subplot.xaxis.set_major_locator", "fig.add_subplot.xaxis.set_minor_locator", "fig.add_subplot.yaxis.grid", "fig.add_subplot.xaxis.set_major_formatter", "fig.add_subplot.grid", "fig.add_subplot.grid", "pandas.tseries.offsets.Day", "matplotlib.HourLocator", "matplotlib.HourLocator", "matplotlib.DateFormatter", "len", "len", "pandas.tseries.offsets.Hour", "pandas.tseries.offsets.Day", "pandas.tseries.offsets.MonthBegin"], "function", ["home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.missing_timestamp_imputation", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.missing_timestamp_imputation"], ["def", "plot_data", "(", "file_id", ",", "df_actual", ",", "truth_file", ",", "data_frequency", ",", "training_window", ",", "test_window", ",", "min_plotWindow", ",", "max_plotWindow", ",", "plottingYlim", ")", ":", "\n", "\n", "    ", "df_actual", "=", "missing_timestamp_imputation", "(", "df_actual", ",", "data_frequency", ")", "\n", "df_actual", "=", "df_actual", ".", "loc", "[", "training_window", "[", "0", "]", ":", "]", "\n", "\n", "truth_df", "=", "pd", ".", "read_csv", "(", "truth_file", ")", "\n", "truth_df", ".", "set_index", "(", "'timestamp'", ",", "inplace", "=", "True", ")", "\n", "truth_df", ".", "index", "=", "pd", ".", "to_datetime", "(", "truth_df", ".", "index", ")", "\n", "\n", "truth_df", "=", "missing_timestamp_imputation", "(", "truth_df", ",", "data_frequency", ")", "\n", "truth_df", "=", "truth_df", ".", "loc", "[", "training_window", "[", "0", "]", ":", "]", "\n", "\n", "truth_df", "=", "pd", ".", "concat", "(", "[", "truth_df", ",", "df_actual", "]", ",", "axis", "=", "1", ")", "\n", "\n", "truth_df", ".", "loc", "[", "truth_df", "[", "'label'", "]", "==", "0", ",", "'Actual'", "]", "=", "np", ".", "nan", "\n", "truth_df", ".", "drop", "(", "'label'", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "8", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'font.size'", ":", "14", ",", "'axes.titlesize'", ":", "14", "}", ")", "\n", "\n", "plt", ".", "subplots_adjust", "(", "bottom", "=", "0.2", ")", "\n", "\n", "ax", ".", "plot_date", "(", "df_actual", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_actual", "[", "'Actual'", "]", ",", "'o-'", ",", "color", "=", "'blue'", ")", "\n", "ax", ".", "plot_date", "(", "truth_df", ".", "index", ".", "to_pydatetime", "(", ")", ",", "truth_df", "[", "'Actual'", "]", ",", "color", "=", "'r'", ",", "marker", "=", "'o'", ")", "\n", "\n", "df_test_zone", "=", "truth_df", ".", "iloc", "[", "[", "len", "(", "truth_df", ".", "loc", "[", "training_window", "[", "0", "]", ":", "test_window", "]", ")", ",", "len", "(", "truth_df", ".", "loc", "[", "training_window", "[", "0", "]", ":", "test_window", "]", ")", "]", ",", "0", "]", "\n", "\n", "df_test_zone", "[", "0", "]", "=", "min_plotWindow", "-", "plottingYlim", "*", "(", "max_plotWindow", "-", "min_plotWindow", ")", "\n", "df_test_zone", "[", "1", "]", "=", "max_plotWindow", "+", "plottingYlim", "*", "(", "max_plotWindow", "-", "min_plotWindow", ")", "\n", "\n", "ax", ".", "plot_date", "(", "df_test_zone", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_test_zone", ",", "'-'", ",", "linewidth", "=", "2", ",", "color", "=", "'black'", ",", "label", "=", "''", ",", "alpha", "=", "0.4", ")", "\n", "\n", "ax", ".", "set_title", "(", "r'TRUE LABELS File {}'", ".", "format", "(", "file_id", ")", ",", "fontsize", "=", "16", ")", "\n", "ax", ".", "set_xlabel", "(", "'Time'", ",", "fontsize", "=", "16", ")", "\n", "\n", "# Set Y-lim        ", "\n", "ax", ".", "set_ylim", "(", "[", "min_plotWindow", "-", "plottingYlim", "*", "(", "max_plotWindow", "-", "min_plotWindow", ")", ",", "max_plotWindow", "+", "plottingYlim", "*", "(", "max_plotWindow", "-", "min_plotWindow", ")", "]", ")", "\n", "# Set X-lim", "\n", "if", "data_frequency", "==", "'minutely'", ":", "\n", "        ", "offset", "=", "Minute", "(", ")", "\n", "", "elif", "data_frequency", "==", "'5minutely'", ":", "\n", "        ", "offset", "=", "Minute", "(", "5", ")", "\n", "", "elif", "data_frequency", "==", "'daily'", ":", "\n", "        ", "offset", "=", "Day", "(", ")", "\n", "", "elif", "data_frequency", "==", "'hourly'", ":", "\n", "        ", "offset", "=", "Hour", "(", ")", "\n", "", "elif", "data_frequency", "==", "'weekly'", ":", "\n", "        ", "offset", "=", "Day", "(", "7", ")", "\n", "", "else", ":", "\n", "        ", "offset", "=", "MonthBegin", "(", ")", "\n", "\n", "", "ax", ".", "set_xlim", "(", "[", "training_window", "[", "0", "]", "-", "offset", ",", "truth_df", ".", "index", "[", "-", "1", "]", "+", "offset", "]", ")", "\n", "\n", "# Formatting the axes tick locations for both types of anomalies", "\n", "if", "data_frequency", "==", "'hourly'", ":", "\n", "\n", "        ", "ax", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "DayLocator", "(", "interval", "=", "1", ")", ")", "\n", "ax", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "DayLocator", "(", "interval", "=", "7", ")", ")", "\n", "ax", ".", "yaxis", ".", "grid", "(", ")", "\n", "\n", "ax", ".", "xaxis", ".", "set_major_formatter", "(", "dates", ".", "DateFormatter", "(", "'%D'", ")", ")", "\n", "\n", "ax", ".", "grid", "(", "b", "=", "1", ",", "axis", "=", "'x'", ",", "which", "=", "'both'", ")", "\n", "ax", ".", "grid", "(", "axis", "=", "'y'", ")", "\n", "\n", "", "elif", "data_frequency", "==", "'minutely'", "or", "data_frequency", "==", "'5minutely'", ":", "\n", "\n", "        ", "ax", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "HourLocator", "(", "interval", "=", "24", ")", ")", "\n", "ax", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "HourLocator", "(", "interval", "=", "6", ")", ")", "\n", "ax", ".", "yaxis", ".", "grid", "(", ")", "\n", "\n", "ax", ".", "xaxis", ".", "set_major_formatter", "(", "dates", ".", "DateFormatter", "(", "'%H'", ")", ")", "\n", "\n", "ax", ".", "grid", "(", "b", "=", "1", ",", "axis", "=", "'x'", ",", "which", "=", "'both'", ")", "\n", "ax", ".", "grid", "(", "axis", "=", "'y'", ")", "\n", "\n", "", "plt", ".", "savefig", "(", "\"figures/actual_data_{}\"", ".", "format", "(", "file_id", ")", "+", "\".png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.None.main.get_range_proba": [[103, 126], ["numpy.array", "len", "numpy.where", "min", "min"], "function", ["None"], ["", "def", "get_range_proba", "(", "predict", ",", "label", ",", "delay", "=", "7", ")", ":", "\n", "    ", "splits", "=", "np", ".", "where", "(", "label", "[", "1", ":", "]", "!=", "label", "[", ":", "-", "1", "]", ")", "[", "0", "]", "+", "1", "\n", "is_anomaly", "=", "label", "[", "0", "]", "==", "1", "\n", "new_predict", "=", "np", ".", "array", "(", "predict", ")", "\n", "pos", "=", "0", "\n", "\n", "for", "sp", "in", "splits", ":", "\n", "        ", "if", "is_anomaly", ":", "\n", "            ", "if", "1", "in", "predict", "[", "pos", ":", "min", "(", "pos", "+", "delay", "+", "1", ",", "sp", ")", "]", ":", "\n", "                ", "new_predict", "[", "pos", ":", "sp", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "new_predict", "[", "pos", ":", "sp", "]", "=", "0", "\n", "", "", "is_anomaly", "=", "not", "is_anomaly", "\n", "pos", "=", "sp", "\n", "", "sp", "=", "len", "(", "label", ")", "\n", "\n", "if", "is_anomaly", ":", "# anomaly in the end", "\n", "        ", "if", "1", "in", "predict", "[", "pos", ":", "min", "(", "pos", "+", "delay", "+", "1", ",", "sp", ")", "]", ":", "\n", "            ", "new_predict", "[", "pos", ":", "sp", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "new_predict", "[", "pos", ":", "sp", "]", "=", "0", "\n", "\n", "", "", "return", "new_predict", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.None.main.get_range_proba_trend": [[127, 150], ["numpy.array", "len", "numpy.where"], "function", ["None"], ["", "def", "get_range_proba_trend", "(", "predict", ",", "label", ",", "delay", "=", "7", ")", ":", "\n", "    ", "splits", "=", "np", ".", "where", "(", "label", "[", "1", ":", "]", "!=", "label", "[", ":", "-", "1", "]", ")", "[", "0", "]", "+", "1", "\n", "is_anomaly", "=", "label", "[", "0", "]", "==", "1", "\n", "new_predict", "=", "np", ".", "array", "(", "predict", ")", "\n", "pos", "=", "0", "\n", "\n", "for", "sp", "in", "splits", ":", "\n", "        ", "if", "is_anomaly", ":", "\n", "            ", "if", "1", "in", "predict", "[", "pos", ":", "pos", "+", "delay", "+", "1", "]", ":", "\n", "                ", "new_predict", "[", "pos", ":", "sp", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "new_predict", "[", "pos", ":", "sp", "]", "=", "0", "\n", "", "", "is_anomaly", "=", "not", "is_anomaly", "\n", "pos", "=", "sp", "\n", "", "sp", "=", "len", "(", "label", ")", "\n", "\n", "if", "is_anomaly", ":", "# anomaly in the end", "\n", "        ", "if", "1", "in", "predict", "[", "pos", ":", "pos", "+", "delay", "+", "1", "]", ":", "\n", "            ", "new_predict", "[", "pos", ":", "sp", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "new_predict", "[", "pos", ":", "sp", "]", "=", "0", "\n", "\n", "", "", "return", "new_predict", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.None.main.missing_timestamp_imputation": [[152, 192], ["df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.index[].weekday", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.index[].weekday", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample().mean", "print", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.index[].weekday", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.index[].weekday", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.index[].weekday", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.index[].weekday", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.index[].weekday", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.resample"], "function", ["None"], ["", "def", "missing_timestamp_imputation", "(", "df_complete_data", ",", "data_frequency", ")", ":", "\n", "\n", "# This function checks if there is any missing timestamp and", "\n", "# imputes it with NAN; note missing data (NAN) is handled by ", "\n", "# models", "\n", "\n", "    ", "if", "data_frequency", "==", "'minutely'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'T'", ")", ".", "mean", "(", ")", "\n", "\n", "", "elif", "data_frequency", "==", "'5minutely'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'5T'", ")", ".", "mean", "(", ")", "\n", "\n", "", "elif", "data_frequency", "==", "'daily'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'D'", ")", ".", "mean", "(", ")", "\n", "\n", "", "elif", "data_frequency", "==", "'weekly'", ":", "\n", "\n", "        ", "if", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "0", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-MON'", ")", ".", "mean", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "1", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-TUE'", ")", ".", "mean", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "2", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-WED'", ")", ".", "mean", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "3", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-THU'", ")", ".", "mean", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "4", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-FRI'", ")", ".", "mean", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "5", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-SAT'", ")", ".", "mean", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "6", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-SUN'", ")", ".", "mean", "(", ")", "\n", "\n", "", "", "elif", "data_frequency", "==", "'monthly'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'MS'", ")", ".", "mean", "(", ")", "\n", "", "elif", "data_frequency", "==", "'hourly'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'H'", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Data frequency not expected\\n Continuing without timestamp imputatation\\n'", ")", "\n", "\n", "", "return", "df_complete_data", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.None.main.label_evaluation": [[194, 230], ["pd.read_csv.set_index", "pandas.to_datetime", "main.missing_timestamp_imputation", "json.dumps", "pandas.read_csv", "pandas.read_csv", "missing_timestamp_imputation.set_index", "pandas.to_datetime", "main.missing_timestamp_imputation", "missing_timestamp_imputation.fillna", "numpy.zeros", "main.get_range_proba", "main.get_range_proba_trend", "result_df[].as_matrix"], "function", ["home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.missing_timestamp_imputation", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.missing_timestamp_imputation", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.None.main.get_range_proba", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.None.main.get_range_proba_trend"], ["", "def", "label_evaluation", "(", "truth_file", ",", "result_file", ",", "data_frequency", ",", "test_window", ",", "delay", "=", "7", ",", "type_of_anomaly", "=", "'POINT'", ")", ":", "\n", "\n", "    ", "if", "result_file", "[", "-", "4", ":", "]", "!=", "'.csv'", ":", "\n", "        ", "data", "[", "'message'", "]", "=", "\"predictions not provided ina csv file\"", "\n", "return", "json", ".", "dumps", "(", "data", ",", "ensure_ascii", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "result_df", "=", "pd", ".", "read_csv", "(", "result_file", ")", "\n", "\n", "", "result_df", ".", "set_index", "(", "'timestamp'", ",", "inplace", "=", "True", ")", "\n", "result_df", ".", "index", "=", "pd", ".", "to_datetime", "(", "result_df", ".", "index", ")", "\n", "\n", "try", ":", "\n", "\n", "        ", "truth_df", "=", "pd", ".", "read_csv", "(", "truth_file", ")", "\n", "truth_df", ".", "set_index", "(", "'timestamp'", ",", "inplace", "=", "True", ")", "\n", "truth_df", ".", "index", "=", "pd", ".", "to_datetime", "(", "truth_df", ".", "index", ")", "\n", "truth_df", "=", "missing_timestamp_imputation", "(", "truth_df", ",", "data_frequency", ")", "\n", "truth_df", "=", "truth_df", ".", "loc", "[", "truth_df", ".", "index", ">", "test_window", "]", "\n", "# replace all NANs with 0", "\n", "truth_df", ".", "fillna", "(", "0", ",", "inplace", "=", "True", ")", "\n", "y_true", "=", "truth_df", "[", "'label'", "]", ".", "values", "\n", "\n", "", "except", ":", "\n", "        ", "y_true", "=", "np", ".", "zeros", "(", "result_df", "[", "'label'", "]", ".", "as_matrix", "(", ")", ".", "shape", ")", "\n", "\n", "", "result_df", "=", "missing_timestamp_imputation", "(", "result_df", ",", "data_frequency", ")", "\n", "result_df", "=", "result_df", ".", "loc", "[", "result_df", ".", "index", ">", "test_window", "]", "\n", "y_pred", "=", "result_df", "[", "'label'", "]", ".", "values", "\n", "\n", "if", "delay", ">", "0", ":", "\n", "        ", "if", "type_of_anomaly", "==", "'POINT'", ":", "\n", "            ", "y_pred", "=", "get_range_proba", "(", "y_pred", ",", "y_true", ",", "delay", ")", "\n", "", "elif", "type_of_anomaly", "==", "'TREND'", ":", "\n", "            ", "y_pred", "=", "get_range_proba_trend", "(", "y_pred", ",", "y_true", ",", "delay", ")", "\n", "\n", "", "", "return", "[", "y_pred", ",", "y_true", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.None.main.adservice_dataset_evaluation": [[231, 357], ["pandas.read_csv", "enumerate", "pd.read_csv.copy().set_index", "pandas.to_datetime", "len", "pandas.to_datetime", "len", "print", "print", "print", "print", "print", "str", "str", "datetime.datetime.strptime", "logging.debug", "logging.debug", "model.perform_AD", "predict_label.to_csv", "int", "len", "pandas.DataFrame().to_csv", "pd.read_csv.copy", "pandas.to_datetime", "pandas.to_datetime", "pandas.to_datetime", "pandas.to_datetime", "len", "predict_label.to_csv", "main.plot_data", "main.label_evaluation", "sklearn.metrics.f1_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "sum", "sum", "pandas.DataFrame", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.univariate_AD.perform_AD", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.None.main.plot_data", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.None.main.label_evaluation"], ["", "def", "adservice_dataset_evaluation", "(", "args", ")", ":", "\n", "\n", "    ", "file_id", "=", "args", "[", "0", "]", "\n", "operation_mode", "=", "args", "[", "1", "]", "\n", "model_type", "=", "args", "[", "2", "]", "\n", "dataset", "=", "args", "[", "3", "]", "\n", "perform_point_anomaly", "=", "args", "[", "4", "]", "\n", "perform_trend_anomaly", "=", "args", "[", "5", "]", "\n", "delay", "=", "args", "[", "6", "]", "\n", "\n", "y_pred", "=", "0", "\n", "y_true", "=", "0", "\n", "\n", "time_series_data", "=", "pd", ".", "read_csv", "(", "'datasets/AIOPS_dataset/KPI_{}.csv'", ".", "format", "(", "file_id", ")", ")", "\n", "\n", "if", "dataset", "==", "'AIOPS'", ":", "\n", "\n", "        ", "time_series_data", ".", "columns", "=", "[", "0", ",", "3", "]", "\n", "ts", "=", "time_series_data", ".", "copy", "(", ")", ".", "set_index", "(", "0", ")", "\n", "ts", ".", "index", "=", "pd", ".", "to_datetime", "(", "ts", ".", "index", ")", "\n", "\n", "numData", "=", "len", "(", "time_series_data", ")", "\n", "\n", "if", "int", "(", "numData", "/", "2", ")", ">", "20160", ":", "\n", "            ", "training_window", "=", "[", "pd", ".", "to_datetime", "(", "time_series_data", "[", "0", "]", ".", "iloc", "[", "-", "20160", "-", "int", "(", "numData", "/", "2", ")", "]", ")", ",", "pd", ".", "to_datetime", "(", "time_series_data", "[", "0", "]", ".", "iloc", "[", "-", "320", "-", "int", "(", "numData", "/", "2", ")", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "training_window", "=", "[", "pd", ".", "to_datetime", "(", "time_series_data", "[", "0", "]", ".", "iloc", "[", "0", "]", ")", ",", "pd", ".", "to_datetime", "(", "time_series_data", "[", "0", "]", ".", "iloc", "[", "-", "320", "-", "int", "(", "numData", "/", "2", ")", "]", ")", "]", "\n", "\n", "", "test_window", "=", "pd", ".", "to_datetime", "(", "time_series_data", "[", "0", "]", ".", "iloc", "[", "-", "int", "(", "numData", "/", "2", ")", "]", ")", "\n", "\n", "length_of_training_window", "=", "len", "(", "ts", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", "\n", "length_of_forecast_error_window", "=", "len", "(", "ts", ".", "loc", "[", "training_window", "[", "0", "]", ":", "test_window", "]", ")", "-", "length_of_training_window", "\n", "length_of_evaluation_window", "=", "len", "(", "ts", ".", "loc", "[", "training_window", "[", "0", "]", ":", "]", ")", "-", "length_of_forecast_error_window", "-", "length_of_training_window", "\n", "\n", "print", "(", "'File id'", ",", "file_id", ")", "\n", "print", "(", "'Total number of data points'", ",", "numData", ")", "\n", "print", "(", "'Number of training data points: '", ",", "length_of_training_window", ")", "\n", "print", "(", "'Number of data points for forecast error estimation: '", ",", "length_of_forecast_error_window", ")", "\n", "print", "(", "'Number of data points on which detection accuracy estimated'", ",", "length_of_evaluation_window", ")", "\n", "\n", "# Pass the entire time series data", "\n", "n", "=", "numData", "-", "1", "\n", "\n", "app_name", "=", "str", "(", "file_id", ")", "\n", "kpi_name", "=", "str", "(", "file_id", ")", "\n", "\n", "alertingDate", "=", "dt", ".", "datetime", ".", "strptime", "(", "time_series_data", ".", "loc", "[", "time_series_data", ".", "index", "[", "n", "]", ",", "0", "]", ",", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "\n", "logging", ".", "debug", "(", "'Anomaly detection on {} {}'", ".", "format", "(", "app_name", ",", "kpi_name", ")", ")", "\n", "logging", ".", "debug", "(", "'Running ML model'", ")", "\n", "\n", "returnedDataFrame", "=", "univariate_AD", ".", "perform_AD", "(", "operation_mode", ",", "model_type", ",", "time_series_data", ",", "app_name", ",", "kpi_name", ",", "perform_point_anomaly", ",", "delay", ",", "perform_trend_anomaly", ",", "training_window", ",", "test_window", ",", "database", "=", "False", ",", "alertingDate", "=", "alertingDate", ")", "\n", "\n", "predict_label_group", "=", "returnedDataFrame", ".", "iloc", "[", "0", ",", "0", "]", "\n", "predict_label", "=", "returnedDataFrame", ".", "iloc", "[", "0", ",", "1", "]", "\n", "predict_label", ".", "to_csv", "(", "'datasets/AIOPS_dataset/predict_label_{}.csv'", ".", "format", "(", "file_id", ")", ",", "index", "=", "False", ")", "\n", "actual", "=", "returnedDataFrame", ".", "iloc", "[", "0", ",", "2", "]", "\n", "mean_square_error", "=", "returnedDataFrame", ".", "iloc", "[", "0", ",", "3", "]", "\n", "threshold", "=", "returnedDataFrame", ".", "iloc", "[", "0", ",", "4", "]", "\n", "data_frequency", "=", "returnedDataFrame", ".", "iloc", "[", "0", ",", "5", "]", "\n", "min_plotWindow", "=", "returnedDataFrame", ".", "iloc", "[", "0", ",", "6", "]", "\n", "max_plotWindow", "=", "returnedDataFrame", ".", "iloc", "[", "0", ",", "7", "]", "\n", "plottingYlim", "=", "returnedDataFrame", ".", "iloc", "[", "0", ",", "8", "]", "\n", "\n", "", "confidence_band_collection", "=", "[", "'3-sigma'", ",", "'3.5-sigma'", ",", "'4-sigma'", ",", "'4.5-sigma'", ",", "'5-sigma'", ",", "'5.5-sigma'", ",", "'6-sigma'", "]", "\n", "for", "ind", ",", "confidence", "in", "enumerate", "(", "confidence_band_collection", ")", ":", "\n", "\n", "        ", "if", "dataset", "in", "[", "'AIOPS'", "]", ":", "\n", "\n", "# Save predicted labels", "\n", "            ", "predict_label", "=", "predict_label_group", "[", "ind", "]", "\n", "if", "dataset", "==", "'AIOPS'", ":", "\n", "\n", "                ", "predict_label", ".", "to_csv", "(", "'datasets/AIOPS_dataset/predict_label_{}_{}.csv'", ".", "format", "(", "file_id", ",", "confidence", ")", ",", "index", "=", "False", ")", "\n", "\n", "# Plotting true data", "\n", "plot_data", "(", "file_id", ",", "actual", ",", "'datasets/AIOPS_dataset/labels_{}.csv'", ".", "format", "(", "file_id", ")", ",", "data_frequency", ",", "training_window", ",", "test_window", ",", "min_plotWindow", ",", "max_plotWindow", ",", "plottingYlim", ")", "\n", "\n", "# Perform label adjustment according to delayed detection criteria", "\n", "[", "y_pred", ",", "y_true", "]", "=", "label_evaluation", "(", "'datasets/AIOPS_dataset/labels_{}.csv'", ".", "format", "(", "file_id", ")", ",", "'datasets/AIOPS_dataset/predict_label_{}_{}.csv'", ".", "format", "(", "file_id", ",", "confidence", ")", ",", "data_frequency", ",", "test_window", ",", "delay", "=", "delay", ",", "type_of_anomaly", "=", "'POINT'", ")", "\n", "\n", "## AIOPS dataset has minutely, 5-minutely frequency, so the delay above is taken to be 7 (as in the Micfosoft paper)", "\n", "\n", "", "y_true_list", "=", "[", "y_true", "]", "\n", "y_pred_list", "=", "[", "y_pred", "]", "\n", "\n", "# Save results to file", "\n", "\n", "data", "=", "{", "}", "\n", "try", ":", "\n", "\n", "                ", "fscore", "=", "f1_score", "(", "np", ".", "concatenate", "(", "y_true_list", ")", ",", "np", ".", "concatenate", "(", "y_pred_list", ")", ")", "\n", "precisionscore", "=", "precision_score", "(", "np", ".", "concatenate", "(", "y_true_list", ")", ",", "np", ".", "concatenate", "(", "y_pred_list", ")", ")", "\n", "recallscore", "=", "recall_score", "(", "np", ".", "concatenate", "(", "y_true_list", ")", ",", "np", ".", "concatenate", "(", "y_pred_list", ")", ")", "\n", "data", "[", "'message'", "]", "=", "[", "'delay allowed: {}'", ".", "format", "(", "delay", ")", "]", "\n", "data", "[", "'fscore'", "]", "=", "[", "fscore", "]", "\n", "data", "[", "'precisionscore'", "]", "=", "[", "precisionscore", "]", "\n", "data", "[", "'recallscore'", "]", "=", "[", "recallscore", "]", "\n", "data", "[", "'file'", "]", "=", "[", "file_id", "]", "\n", "data", "[", "'true_anomalies'", "]", "=", "[", "sum", "(", "y_true", ")", "]", "\n", "data", "[", "'true_predictions'", "]", "=", "[", "sum", "(", "y_pred", ")", "]", "\n", "data", "[", "'threshold'", "]", "=", "[", "confidence", "]", "\n", "if", "perform_point_anomaly", ":", "\n", "                    ", "data", "[", "'type'", "]", "=", "[", "'POINT'", "]", "\n", "", "elif", "perform_trend_anomaly", ":", "\n", "                    ", "data", "[", "'type'", "]", "=", "[", "'TREND'", "]", "\n", "\n", "", "", "except", ":", "\n", "\n", "                ", "data", "[", "'file'", "]", "=", "[", "file_id", "]", "\n", "data", "[", "'message'", "]", "=", "[", "\"failed evaluation of metrics\"", "]", "\n", "\n", "", "", "if", "dataset", "==", "'AIOPS'", ":", "\n", "            ", "pd", ".", "DataFrame", "(", "data", ")", ".", "to_csv", "(", "'output_data/AIOPS/{}_{}.csv'", ".", "format", "(", "file_id", ",", "confidence", ")", ")", "\n", "\n", "", "", "y_pred", "=", "0", "\n", "y_true", "=", "0", "\n", "return", "[", "y_pred", ",", "y_true", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.None.main.adservice": [[359, 443], ["logging.basicConfig", "time.time", "logging.debug", "logging.debug", "logging.debug", "multiprocessing.Pool", "range", "time.time", "logging.debug", "logging.debug", "exit", "multiprocessing.cpu_count", "range", "len", "main.adservice_dataset_evaluation", "int", "int", "int", "list_of_inputs.append", "logging.debug", "logging.debug", "logging.debug"], "function", ["home.repos.pwc.inspect_result.nikhilgalagali_adservice.None.main.adservice_dataset_evaluation"], ["", "def", "adservice", "(", ")", ":", "\n", "\n", "    ", "format_string", "=", "'\\ntimestamp=\"%(asctime)s\"\\nlevel=\"INFO\"\\nmessage=\"%(message)s'", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ",", "filemode", "=", "'a'", ",", "format", "=", "format_string", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "perform_point_anomaly", "=", "True", "\n", "perform_trend_anomaly", "=", "True", "\n", "\n", "# GLOBAL VARIABLE CONFIGURATION", "\n", "try", ":", "\n", "\n", "        ", "dataset", "=", "sys", ".", "argv", "[", "1", "]", "\n", "if", "dataset", "in", "[", "'AIOPS'", "]", ":", "\n", "\n", "# Model type to use", "\n", "            ", "try", ":", "\n", "                ", "model_type", "=", "sys", ".", "argv", "[", "2", "]", "\n", "if", "not", "model_type", "in", "[", "'whistler_batch'", "]", ":", "\n", "                    ", "model_type", "=", "'whistler_batch'", "\n", "", "", "except", ":", "\n", "                ", "model_type", "=", "'whistler_batch'", "\n", "logging", ".", "debug", "(", "'Model type not specified'", ")", "\n", "\n", "# Read the type of anomaly detection to be performed", "\n", "", "try", ":", "\n", "                ", "mode", "=", "sys", ".", "argv", "[", "3", "]", "\n", "if", "mode", "==", "'POINT'", ":", "\n", "                    ", "perform_trend_anomaly", "=", "False", "\n", "", "elif", "mode", "==", "'TREND'", ":", "\n", "                    ", "perform_point_anomaly", "=", "False", "\n", "", "", "except", ":", "\n", "                ", "perform_trend_anomaly", "=", "False", "\n", "logging", ".", "debug", "(", "'Anomaly det type not specified. Continuing with default POINT and TREND'", ")", "\n", "\n", "# Read the delay allowed in detection    ", "\n", "", "try", ":", "\n", "                ", "delay", "=", "int", "(", "sys", ".", "argv", "[", "4", "]", ")", "\n", "", "except", ":", "\n", "                ", "delay", "=", "0", "\n", "\n", "# Read the datasets to evaluate        ", "\n", "", "try", ":", "\n", "                ", "dataset_range_l", "=", "int", "(", "sys", ".", "argv", "[", "5", "]", ")", "\n", "dataset_range_u", "=", "int", "(", "sys", ".", "argv", "[", "6", "]", ")", "\n", "", "except", ":", "\n", "                ", "dataset_range_l", "=", "1", "\n", "dataset_range_u", "=", "2", "\n", "logging", ".", "debug", "(", "'Range of datasets for evaluation not provided. Default 1'", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "dataset", "=", "None", "\n", "logging", ".", "debug", "(", "'Data set not specified.'", ")", "\n", "\n", "", "", "except", ":", "\n", "\n", "        ", "logging", ".", "debug", "(", "'Data set not specified. Continuing in non-evaluation mode'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "logging", ".", "debug", "(", "'START TIME {}'", ".", "format", "(", "start_time", ")", ")", "\n", "logging", ".", "debug", "(", "'Number of CPUs {}'", ".", "format", "(", "multiprocessing", ".", "cpu_count", "(", ")", ")", ")", "\n", "\n", "if", "dataset", "in", "[", "'AIOPS'", "]", ":", "\n", "\n", "        ", "which_model", "=", "[", "univariate_AD", "]", "\n", "operation_mode", "=", "'validation'", "\n", "\n", "pool", "=", "Pool", "(", "5", ")", "\n", "\n", "list_of_inputs", "=", "[", "]", "\n", "\n", "if", "dataset", "in", "[", "'AIOPS'", "]", ":", "\n", "\n", "            ", "for", "file_id", "in", "range", "(", "dataset_range_l", ",", "dataset_range_u", ")", ":", "\n", "                ", "list_of_inputs", ".", "append", "(", "(", "file_id", ",", "operation_mode", ",", "model_type", ",", "dataset", ",", "perform_point_anomaly", ",", "perform_trend_anomaly", ",", "delay", ")", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "list_of_inputs", ")", ")", ":", "\n", "            ", "adservice_dataset_evaluation", "(", "list_of_inputs", "[", "i", "]", ")", "\n", "\n", "#pool.map(adservice_dataset_evaluation,list_of_inputs)", "\n", "\n", "", "", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "logging", ".", "debug", "(", "'EXECUTION TIME {}'", ".", "format", "(", "elapsed_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.plot_settings.update_plot_annotation": [[7, 312], ["range", "range", "ax[].set_ylabel", "isinstance", "ax[].set_xlabel", "ax[].set_ylim", "isinstance", "ax[].legend", "isinstance", "isinstance", "pandas.tseries.offsets.Minute", "ax[].set_xlim", "ax[].set_xlim", "ax[].grid", "ax[].grid", "int", "ax[].plot_date", "ax[].plot_date", "isinstance", "ax[].annotate", "pandas.tseries.offsets.Minute", "len", "ax[].xaxis.set_minor_locator", "ax[].xaxis.set_major_locator", "plt.setp", "plt.setp", "plt.setp", "ax[].xaxis.label.set_visible", "ax[].grid", "ax[].grid", "df_training_zone.index.to_pydatetime", "df_test_zone.index.to_pydatetime", "ax[].plot_date", "ax[].plot_date", "ax[].annotate", "pandas.tseries.offsets.Day", "matplotlib.DayLocator", "matplotlib.WeekdayLocator", "len", "ax[].xaxis.set_minor_locator", "ax[].xaxis.set_major_locator", "ax[].xaxis.set_minor_locator", "ax[].xaxis.set_major_locator", "len", "ax[].xaxis.set_minor_formatter", "ax[].xaxis.set_major_formatter", "ax[].xaxis.set_major_formatter", "ax[].get_xticklabels", "ax[].get_xticklabels", "ax[].get_xticklabels", "len", "ax[].xaxis.set_minor_locator", "ax[].xaxis.set_major_locator", "ax[].yaxis.grid", "ax[].grid", "ax[].grid", "ax[].plot_date", "df_training_zone.index.to_pydatetime", "df_test_zone.index.to_pydatetime", "pandas.tseries.offsets.Hour", "matplotlib.DayLocator", "matplotlib.MonthLocator", "matplotlib.DayLocator", "matplotlib.MonthLocator", "matplotlib.DateFormatter", "matplotlib.DateFormatter", "matplotlib.DateFormatter", "df_new.index[].weekday", "ax[].xaxis.set_major_locator", "ax[].xaxis.set_major_formatter", "plt.setp", "plt.setp", "plt.setp", "ax[].xaxis.label.set_visible", "df_new.index[].weekday", "ax[].xaxis.set_minor_locator", "ax[].xaxis.set_major_locator", "ax[].xaxis.set_major_formatter", "plt.setp", "plt.setp", "plt.setp", "ax[].xaxis.label.set_visible", "matplotlib.MonthLocator", "matplotlib.YearLocator", "ax[].xaxis.set_minor_formatter", "ax[].xaxis.set_major_formatter", "plt.setp", "plt.setp", "plt.setp", "ax[].xaxis.label.set_visible", "ax[].xaxis.set_minor_locator", "ax[].xaxis.set_major_locator", "ax[].yaxis.grid", "ax[].grid", "ax[].grid", "df_training_zone.index.to_pydatetime", "ax[].plot_date", "dict", "pandas.tseries.offsets.Day", "pandas.tseries.offsets.MonthBegin", "matplotlib.WeekdayLocator", "df_new.index[].weekday", "ax[].xaxis.set_major_locator", "matplotlib.DateFormatter", "ax[].get_xticklabels", "ax[].get_xticklabels", "ax[].get_xticklabels", "matplotlib.WeekdayLocator", "matplotlib.WeekdayLocator", "df_new.index[].weekday", "ax[].xaxis.set_minor_locator", "ax[].xaxis.set_major_locator", "matplotlib.DateFormatter", "ax[].get_xticklabels", "ax[].get_xticklabels", "ax[].get_xticklabels", "matplotlib.DateFormatter", "matplotlib.DateFormatter", "ax[].get_xticklabels", "ax[].get_xticklabels", "ax[].get_xticklabels", "matplotlib.DayLocator", "matplotlib.DayLocator", "ax[].xaxis.set_major_formatter", "plt.setp", "ax[].xaxis.label.set_visible", "ax[].xaxis.set_major_locator", "ax[].xaxis.set_minor_locator", "ax[].yaxis.grid", "ax[].grid", "ax[].grid", "int", "int", "len", "len", "len", "len", "df_training_zone.index.to_pydatetime", "matplotlib.WeekdayLocator", "df_new.index[].weekday", "ax[].xaxis.set_major_locator", "matplotlib.WeekdayLocator", "matplotlib.WeekdayLocator", "df_new.index[].weekday", "ax[].xaxis.set_minor_locator", "ax[].xaxis.set_major_locator", "matplotlib.DateFormatter", "ax[].get_xticklabels", "matplotlib.HourLocator", "matplotlib.HourLocator", "ax[].xaxis.set_major_formatter", "plt.setp", "ax[].xaxis.label.set_visible", "int", "int", "matplotlib.WeekdayLocator", "df_new.index[].weekday", "ax[].xaxis.set_major_locator", "matplotlib.WeekdayLocator", "matplotlib.WeekdayLocator", "df_new.index[].weekday", "ax[].xaxis.set_minor_locator", "ax[].xaxis.set_major_locator", "matplotlib.DateFormatter", "ax[].get_xticklabels", "len", "len", "int", "matplotlib.WeekdayLocator", "df_new.index[].weekday", "ax[].xaxis.set_major_locator", "matplotlib.WeekdayLocator", "matplotlib.WeekdayLocator", "df_new.index[].weekday", "ax[].xaxis.set_minor_locator", "ax[].xaxis.set_major_locator", "int", "int", "len", "len", "matplotlib.WeekdayLocator", "df_new.index[].weekday", "ax[].xaxis.set_major_locator", "matplotlib.WeekdayLocator", "matplotlib.WeekdayLocator", "df_new.index[].weekday", "ax[].xaxis.set_minor_locator", "ax[].xaxis.set_major_locator", "len", "matplotlib.WeekdayLocator", "df_new.index[].weekday", "ax[].xaxis.set_major_locator", "matplotlib.WeekdayLocator", "matplotlib.WeekdayLocator", "df_new.index[].weekday", "ax[].xaxis.set_minor_locator", "ax[].xaxis.set_major_locator", "len", "len", "matplotlib.WeekdayLocator", "matplotlib.WeekdayLocator", "matplotlib.WeekdayLocator"], "function", ["None"], ["def", "update_plot_annotation", "(", "operation_mode", ",", "df_new", ",", "df_training", ",", "df_test", ",", "time_series_file_name", ",", "plt", ",", "fig", ",", "ax", ",", "plottingWindow", ",", "plottingYlim", ",", "min_plotWindow", ",", "max_plotWindow", ",", "threshold", ",", "threshold_probability", ",", "confidence_band", ",", "data_frequency", ",", "numberOfColumns", ",", "training_window", ",", "test_window", ",", "data_scale", ",", "rule_based", ",", "trend_boundaries", ",", "decision_point_anomaly", ",", "perform_point_anomaly", ")", ":", "\n", "\n", "    ", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "\n", "\n", "######", "\n", "### Plot settings", "\n", "######", "\n", "\n", "# Y labels", "\n", "        ", "ax", "[", "c", "-", "1", "]", ".", "set_ylabel", "(", "r'Count ($\\times 10^{{{}}}$)'", ".", "format", "(", "int", "(", "data_scale", "[", "c", "-", "1", "]", ")", ")", ",", "fontsize", "=", "16", ")", "\n", "\n", "### Plotting boundaries of the training and test sets", "\n", "\n", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "\n", "            ", "df_training_zone", "=", "df_new", ".", "iloc", "[", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "1", ",", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "1", "]", ",", "0", "]", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "df_training_zone", "=", "df_new", ".", "iloc", "[", "[", "len", "(", "df_new", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", "-", "1", ",", "len", "(", "df_new", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", "-", "1", "]", ",", "0", "]", "\n", "\n", "df_test_zone", "=", "df_new", ".", "iloc", "[", "[", "len", "(", "df_new", ".", "loc", "[", "training_window", "[", "0", "]", ":", "test_window", "]", ")", "-", "1", ",", "len", "(", "df_new", ".", "loc", "[", "training_window", "[", "0", "]", ":", "test_window", "]", ")", "-", "1", "]", ",", "0", "]", "\n", "\n", "df_test_zone", "[", "0", "]", "=", "min_plotWindow", "[", "c", "-", "1", "]", "-", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", "\n", "df_test_zone", "[", "1", "]", "=", "max_plotWindow", "[", "c", "-", "1", "]", "+", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", "\n", "\n", "", "df_training_zone", "[", "0", "]", "=", "min_plotWindow", "[", "c", "-", "1", "]", "-", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", "\n", "df_training_zone", "[", "1", "]", "=", "max_plotWindow", "[", "c", "-", "1", "]", "+", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", "\n", "\n", "\n", "# Mute the training window boundary line", "\n", "if", "operation_mode", "==", "'validation'", ":", "\n", "\n", "            ", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "\n", "                ", "if", "perform_point_anomaly", ":", "\n", "\n", "                    ", "if", "training_window", "<", "1.0", ":", "\n", "                        ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_training_zone", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_training_zone", ",", "'-'", ",", "linewidth", "=", "2", ",", "color", "=", "'black'", ",", "label", "=", "''", ",", "alpha", "=", "0.4", ")", "\n", "\n", "", "", "", "else", ":", "\n", "\n", "                ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_training_zone", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_training_zone", ",", "'-'", ",", "linewidth", "=", "2", ",", "color", "=", "'black'", ",", "label", "=", "''", ",", "alpha", "=", "0.4", ")", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_test_zone", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_test_zone", ",", "'-'", ",", "linewidth", "=", "2", ",", "color", "=", "'black'", ",", "label", "=", "''", ",", "alpha", "=", "0.4", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "            ", "if", "decision_point_anomaly", ":", "\n", "\n", "                ", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "\n", "                    ", "if", "perform_point_anomaly", ":", "\n", "\n", "                        ", "if", "training_window", "<", "1.0", ":", "\n", "                            ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_training_zone", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_training_zone", ",", "'-'", ",", "linewidth", "=", "2", ",", "color", "=", "'black'", ",", "label", "=", "''", ",", "alpha", "=", "0.4", ")", "\n", "\n", "", "", "", "else", ":", "\n", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_training_zone", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_training_zone", ",", "'-'", ",", "linewidth", "=", "2", ",", "color", "=", "'black'", ",", "label", "=", "''", ",", "alpha", "=", "0.4", ")", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_test_zone", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_test_zone", ",", "'-'", ",", "linewidth", "=", "2", ",", "color", "=", "'black'", ",", "label", "=", "''", ",", "alpha", "=", "0.4", ")", "\n", "\n", "", "", "", "ax", "[", "c", "-", "1", "]", ".", "set_xlabel", "(", "'Time'", ",", "fontsize", "=", "16", ")", "\n", "\n", "\n", "if", "not", "rule_based", ":", "\n", "\n", "            ", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "\n", "                ", "if", "plottingWindow", "<", "1.0", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "annotate", "(", "''", ",", "xytext", "=", "(", "df_training", ".", "index", "[", "-", "int", "(", "0.9", "*", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", "]", ",", "min_plotWindow", "[", "c", "-", "1", "]", "-", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", "/", "2", ")", ",", "xy", "=", "(", "df_training", ".", "index", "[", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", "]", ",", "min_plotWindow", "[", "c", "-", "1", "]", "-", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", "/", "2", ")", ",", "arrowprops", "=", "dict", "(", "arrowstyle", "=", "\"->\"", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "annotate", "(", "'Training'", ",", "xy", "=", "(", "df_training", ".", "index", "[", "-", "int", "(", "0.9", "*", "plottingWindow", "*", "len", "(", "df_training", ")", ")", "]", ",", "min_plotWindow", "[", "c", "-", "1", "]", "-", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", "/", "2", ")", ")", "\n", "#ax[c-1].annotate('Test',\\", "\n", "#            xy=(df_test.index[-int(0.9*plottingWindow*len(df_test))],\\", "\n", "#                   min_plotWindow[c-1]-plottingYlim*(max_plotWindow[c-1]-min_plotWindow[c-1])/2))", "\n", "\n", "\n", "\n", "# Set Y-lim        ", "\n", "", "", "ax", "[", "c", "-", "1", "]", ".", "set_ylim", "(", "[", "min_plotWindow", "[", "c", "-", "1", "]", "-", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", ",", "max_plotWindow", "[", "c", "-", "1", "]", "+", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", "]", ")", "\n", "# Set X-lim", "\n", "if", "data_frequency", "==", "'minutely'", ":", "\n", "            ", "offset", "=", "Minute", "(", ")", "\n", "", "elif", "data_frequency", "==", "'5minutely'", ":", "\n", "            ", "offset", "=", "Minute", "(", "5", ")", "\n", "", "elif", "data_frequency", "==", "'daily'", ":", "\n", "            ", "offset", "=", "Day", "(", ")", "\n", "", "elif", "data_frequency", "==", "'hourly'", ":", "\n", "            ", "offset", "=", "Hour", "(", ")", "\n", "", "elif", "data_frequency", "==", "'weekly'", ":", "\n", "            ", "offset", "=", "Day", "(", "7", ")", "\n", "", "else", ":", "\n", "            ", "offset", "=", "MonthBegin", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "            ", "ax", "[", "c", "-", "1", "]", ".", "set_xlim", "(", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", "]", "-", "offset", ",", "df_new", ".", "index", "[", "-", "1", "]", "+", "offset", "]", ")", "\n", "", "else", ":", "\n", "            ", "ax", "[", "c", "-", "1", "]", ".", "set_xlim", "(", "[", "training_window", "[", "0", "]", "-", "offset", ",", "df_new", ".", "index", "[", "-", "1", "]", "+", "offset", "]", ")", "\n", "\n", "\n", "# Combined legend", "\n", "", "ax", "[", "c", "-", "1", "]", ".", "legend", "(", "loc", "=", "'upper left'", ",", "ncol", "=", "3", ",", "fontsize", "=", "12", ")", "\n", "\n", "\n", "# This part applies to all anomaly types", "\n", "", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "\n", "\n", "# Formatting the axes tick locations for both types of anomalies", "\n", "        ", "if", "data_frequency", "==", "'daily'", ":", "\n", "\n", "            ", "if", "len", "(", "df_new", ")", "<", "200", ":", "\n", "                ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "DayLocator", "(", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "SU", ",", "\n", "interval", "=", "2", ")", ")", "\n", "", "elif", "len", "(", "df_new", ")", "<", "300", ":", "\n", "                ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "DayLocator", "(", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "MonthLocator", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "DayLocator", "(", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "MonthLocator", "(", "interval", "=", "2", ")", ")", "\n", "\n", "\n", "", "if", "c", "==", "(", "numberOfColumns", "-", "1", ")", ":", "\n", "                ", "if", "len", "(", "df_new", ")", "<", "200", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_formatter", "(", "dates", ".", "DateFormatter", "(", "'%d'", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_formatter", "(", "dates", ".", "DateFormatter", "(", "'%d\\n%b-%y'", ")", ")", "\n", "", "else", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_formatter", "(", "dates", ".", "DateFormatter", "(", "'%b\\n%y'", ")", ")", "\n", "\n", "", "plt", ".", "setp", "(", "ax", "[", "c", "-", "1", "]", ".", "get_xticklabels", "(", "which", "=", "'major'", ")", ",", "rotation", "=", "0", ")", "\n", "plt", ".", "setp", "(", "ax", "[", "c", "-", "1", "]", ".", "get_xticklabels", "(", "which", "=", "'minor'", ")", ",", "visible", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "                ", "plt", ".", "setp", "(", "ax", "[", "c", "-", "1", "]", ".", "get_xticklabels", "(", "which", "=", "'both'", ")", ",", "visible", "=", "False", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "label", ".", "set_visible", "(", "False", ")", "\n", "\n", "\n", "", "ax", "[", "c", "-", "1", "]", ".", "grid", "(", "b", "=", "1", ",", "axis", "=", "'x'", ",", "which", "=", "'major'", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "grid", "(", "axis", "=", "'y'", ")", "\n", "\n", "\n", "", "elif", "data_frequency", "==", "'weekly'", ":", "\n", "\n", "            ", "if", "len", "(", "df_new", ")", "<", "40", ":", "\n", "\n", "                ", "if", "df_new", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "0", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "MO", ",", "interval", "=", "1", ")", ")", "\n", "", "elif", "df_new", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "1", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "TU", ",", "interval", "=", "1", ")", ")", "\n", "", "elif", "df_new", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "2", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "WE", ",", "interval", "=", "1", ")", ")", "\n", "", "elif", "df_new", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "3", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "TH", ",", "interval", "=", "1", ")", ")", "\n", "", "elif", "df_new", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "4", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "FR", ",", "interval", "=", "1", ")", ")", "\n", "", "elif", "df_new", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "5", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "SA", ",", "interval", "=", "1", ")", ")", "\n", "", "elif", "df_new", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "6", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "SU", ",", "interval", "=", "1", ")", ")", "\n", "\n", "\n", "", "if", "c", "==", "(", "numberOfColumns", "-", "1", ")", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_formatter", "(", "dates", ".", "DateFormatter", "(", "'%d\\n%b-%y'", ")", ")", "\n", "\n", "plt", ".", "setp", "(", "ax", "[", "c", "-", "1", "]", ".", "get_xticklabels", "(", "which", "=", "'major'", ")", ",", "rotation", "=", "0", ")", "\n", "plt", ".", "setp", "(", "ax", "[", "c", "-", "1", "]", ".", "get_xticklabels", "(", "which", "=", "'minor'", ")", ",", "visible", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "plt", ".", "setp", "(", "ax", "[", "c", "-", "1", "]", ".", "get_xticklabels", "(", "which", "=", "'both'", ")", ",", "visible", "=", "False", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "label", ".", "set_visible", "(", "False", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "                ", "if", "df_new", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "0", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "MO", ",", "interval", "=", "1", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "MO", ",", "interval", "=", "8", ")", ")", "\n", "", "elif", "df_new", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "1", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "TU", ",", "interval", "=", "1", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "TU", ",", "interval", "=", "8", ")", ")", "\n", "", "elif", "df_new", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "2", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "WE", ",", "interval", "=", "1", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "WE", ",", "interval", "=", "8", ")", ")", "\n", "", "elif", "df_new", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "3", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "TH", ",", "interval", "=", "1", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "TH", ",", "interval", "=", "8", ")", ")", "\n", "", "elif", "df_new", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "4", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "FR", ",", "interval", "=", "1", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "FR", ",", "interval", "=", "8", ")", ")", "\n", "", "elif", "df_new", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "5", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "SA", ",", "interval", "=", "1", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "SA", ",", "interval", "=", "8", ")", ")", "\n", "", "elif", "df_new", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "6", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "SU", ",", "interval", "=", "1", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "WeekdayLocator", "(", "byweekday", "=", "SU", ",", "interval", "=", "8", ")", ")", "\n", "\n", "\n", "", "if", "c", "==", "(", "numberOfColumns", "-", "1", ")", ":", "\n", "                    ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_formatter", "(", "dates", ".", "DateFormatter", "(", "'%d\\n%b-%y'", ")", ")", "\n", "\n", "plt", ".", "setp", "(", "ax", "[", "c", "-", "1", "]", ".", "get_xticklabels", "(", "which", "=", "'major'", ")", ",", "rotation", "=", "0", ")", "\n", "plt", ".", "setp", "(", "ax", "[", "c", "-", "1", "]", ".", "get_xticklabels", "(", "which", "=", "'minor'", ")", ",", "visible", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "plt", ".", "setp", "(", "ax", "[", "c", "-", "1", "]", ".", "get_xticklabels", "(", "which", "=", "'both'", ")", ",", "visible", "=", "False", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "label", ".", "set_visible", "(", "False", ")", "\n", "\n", "\n", "", "", "ax", "[", "c", "-", "1", "]", ".", "grid", "(", "b", "=", "1", ",", "axis", "=", "'x'", ",", "which", "=", "'major'", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "grid", "(", "axis", "=", "'y'", ")", "\n", "\n", "\n", "", "elif", "data_frequency", "==", "'monthly'", ":", "\n", "\n", "            ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "MonthLocator", "(", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "YearLocator", "(", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "yaxis", ".", "grid", "(", ")", "\n", "\n", "if", "c", "==", "(", "numberOfColumns", "-", "1", ")", ":", "\n", "\n", "                ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_formatter", "(", "dates", ".", "DateFormatter", "(", "'%m'", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_formatter", "(", "dates", ".", "DateFormatter", "(", "'%b-%y'", ")", ")", "\n", "plt", ".", "setp", "(", "ax", "[", "c", "-", "1", "]", ".", "get_xticklabels", "(", "which", "=", "'major'", ")", ",", "rotation", "=", "0", ")", "\n", "plt", ".", "setp", "(", "ax", "[", "c", "-", "1", "]", ".", "get_xticklabels", "(", "which", "=", "'minor'", ")", ",", "visible", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "                ", "plt", ".", "setp", "(", "ax", "[", "c", "-", "1", "]", ".", "get_xticklabels", "(", "which", "=", "'both'", ")", ",", "visible", "=", "False", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "label", ".", "set_visible", "(", "False", ")", "\n", "\n", "\n", "", "ax", "[", "c", "-", "1", "]", ".", "grid", "(", "b", "=", "1", ",", "axis", "=", "'x'", ",", "which", "=", "'major'", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "grid", "(", "axis", "=", "'y'", ")", "\n", "\n", "\n", "", "elif", "data_frequency", "==", "'hourly'", ":", "\n", "\n", "            ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "DayLocator", "(", "interval", "=", "1", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "DayLocator", "(", "interval", "=", "7", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "yaxis", ".", "grid", "(", ")", "\n", "\n", "if", "c", "==", "(", "numberOfColumns", "-", "1", ")", ":", "\n", "#ax[c-1].xaxis.set_minor_formatter(dates.DateFormatter('%H'))", "\n", "                ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_formatter", "(", "dates", ".", "DateFormatter", "(", "'%D'", ")", ")", "\n", "#plt.setp(ax[c-1].get_xticklabels(which='major'), rotation=0)", "\n", "#plt.setp(ax[c-1].get_xticklabels(which='minor'), visible=False)", "\n", "\n", "", "else", ":", "\n", "                ", "plt", ".", "setp", "(", "ax", "[", "c", "-", "1", "]", ".", "get_xticklabels", "(", "which", "=", "'both'", ")", ",", "visible", "=", "False", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "label", ".", "set_visible", "(", "False", ")", "\n", "\n", "\n", "", "ax", "[", "c", "-", "1", "]", ".", "grid", "(", "b", "=", "1", ",", "axis", "=", "'x'", ",", "which", "=", "'both'", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "grid", "(", "axis", "=", "'y'", ")", "\n", "\n", "", "elif", "data_frequency", "==", "'minutely'", "or", "data_frequency", "==", "'5minutely'", ":", "\n", "\n", "#if data_frequency=='minutely':", "\n", "#    ax[c-1].xaxis.set_minor_locator(dates.MinuteLocator())", "\n", "#else:", "\n", "#    ax[c-1].xaxis.set_minor_locator(dates.MinuteLocator(interval=5))", "\n", "\n", "            ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_locator", "(", "dates", ".", "HourLocator", "(", "interval", "=", "24", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_minor_locator", "(", "dates", ".", "HourLocator", "(", "interval", "=", "6", ")", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "yaxis", ".", "grid", "(", ")", "\n", "\n", "if", "c", "==", "(", "numberOfColumns", "-", "1", ")", ":", "\n", "#ax[c-1].xaxis.set_minor_formatter(dates.DateFormatter('%M'))", "\n", "                ", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "set_major_formatter", "(", "dates", ".", "DateFormatter", "(", "'%H'", ")", ")", "\n", "#plt.setp(ax[c-1].get_xticklabels(which='major'), rotation=0)", "\n", "#plt.setp(ax[c-1].get_xticklabels(which='minor'), visible=False)", "\n", "\n", "", "else", ":", "\n", "                ", "plt", ".", "setp", "(", "ax", "[", "c", "-", "1", "]", ".", "get_xticklabels", "(", "which", "=", "'both'", ")", ",", "visible", "=", "False", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "xaxis", ".", "label", ".", "set_visible", "(", "False", ")", "\n", "\n", "\n", "", "ax", "[", "c", "-", "1", "]", ".", "grid", "(", "b", "=", "1", ",", "axis", "=", "'x'", ",", "which", "=", "'both'", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "grid", "(", "axis", "=", "'y'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.long_term_seasonal_plus_trend.long_term_seasonal_plus_trend": [[9, 55], ["pandas.DataFrame", "range", "tools.extract_seasonal_plus_trend.extract_seasonal", "pandas.concat", "ValueError", "range", "len", "tools.extract_seasonal_plus_trend.extract_trend", "trend_dataframe.append.append", "len", "min", "all_data.append", "len", "len", "all_data.append"], "function", ["home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.extract_seasonal_plus_trend.extract_seasonal", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.extract_seasonal_plus_trend.extract_trend"], ["def", "long_term_seasonal_plus_trend", "(", "df", ",", "cycle_period", ",", "longterm", "=", "True", ",", "\n", "piecewise_median_period_weeks", "=", "2", ")", ":", "\n", "\n", "    ", "if", "piecewise_median_period_weeks", "<", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"piecewise_median_period_weeks must be greater than equal to 2 periods\"", ")", "\n", "\n", "# Preparing data for trend extraction    ", "\n", "", "if", "longterm", ":", "\n", "\n", "# The plus 1 here is because STL requires more than 2 period of data", "\n", "        ", "num_obs_in_each_window", "=", "cycle_period", "*", "piecewise_median_period_weeks", "+", "1", "\n", "\n", "all_data", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "0", ",", "len", "(", "df", ".", "Date", ")", ",", "num_obs_in_each_window", ")", ":", "\n", "\n", "            ", "start_index", "=", "j", "\n", "end_index", "=", "min", "(", "start_index", "+", "num_obs_in_each_window", ",", "len", "(", "df", ".", "Date", ")", ")", "\n", "\n", "if", "(", "start_index", "+", "2", "*", "num_obs_in_each_window", ">", "len", "(", "df", ".", "Date", ")", ")", ":", "\n", "                ", "sub_df", "=", "df", "[", "start_index", ":", "]", "\n", "all_data", ".", "append", "(", "sub_df", ")", "\n", "break", "\n", "", "else", ":", "\n", "                ", "sub_df", "=", "df", ".", "iloc", "[", "start_index", ":", "end_index", "]", "\n", "", "all_data", ".", "append", "(", "sub_df", ")", "\n", "", "", "else", ":", "\n", "        ", "all_data", "=", "[", "df", "]", "\n", "\n", "# Trend extraction: uses piecewise median            ", "\n", "", "trend_dataframe", "=", "DataFrame", "(", "columns", "=", "[", "'trend'", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "all_data", ")", ")", ":", "\n", "\n", "        ", "data_decomp", "=", "extract_trend", "(", "all_data", "[", "i", "]", ",", "num_obs_per_period", "=", "cycle_period", ")", "\n", "trend_dataframe", "=", "trend_dataframe", ".", "append", "(", "data_decomp", ")", "\n", "\n", "# Seasonal component extraction", "\n", "", "seasonal_dataframe", "=", "extract_seasonal", "(", "df", ",", "num_obs_per_period", "=", "cycle_period", ")", "\n", "\n", "seasonal_plus_trend", "=", "pd", ".", "concat", "(", "[", "trend_dataframe", ",", "seasonal_dataframe", "]", ",", "axis", "=", "1", ")", "\n", "\n", "return", "{", "\n", "'plot'", ":", "None", ",", "\n", "'seasonal_plus_trend'", ":", "seasonal_plus_trend", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.parameter_loader.load_parameters": [[8, 179], ["logging.debug", "model_json[].replace", "pandas.to_datetime", "model_json[].split", "logging.debug", "logging.debug", "logging.debug", "json.dumps", "print", "logging.debug", "logging.debug", "json.dumps", "print", "logging.debug", "range", "model_json[].replace", "str", "model_json[].replace", "pandas.to_datetime", "model_json[].split", "logging.debug", "str", "str", "logging.debug", "logging.debug", "str", "str", "logging.debug", "logging.debug", "len", "logging.debug", "json.dumps", "print", "logging.debug", "logging.debug", "json.dumps", "print", "logging.debug", "range", "model_json[].replace", "str", "str", "str", "logging.debug", "logging.debug", "str", "str", "logging.debug", "logging.debug", "len", "freq_seasonal[].items", "str", "freq_seasonal[].items"], "function", ["None"], ["def", "load_parameters", "(", "operation_mode", ",", "model_json", ",", "kpi_name", ",", "type_of_anomaly", ")", ":", "\n", "\n", "# Default initialization", "\n", "    ", "loader_status", "=", "True", "\n", "json_string", "=", "None", "\n", "freq_seasonal", "=", "None", "\n", "selected_trend_model", "=", "None", "\n", "autoregressive_order", "=", "None", "\n", "cycle_period", "=", "None", "\n", "model_params", "=", "None", "\n", "model_summary", "=", "None", "\n", "training_data_start_time", "=", "None", "\n", "data_scale", "=", "None", "\n", "exog_input_base_columns", "=", "None", "\n", "\n", "if", "operation_mode", "==", "'tester'", ":", "\n", "\n", "        ", "logging", ".", "debug", "(", "'{}: LOADING PARAMETERS FOR TESTER EXECUTION'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "try", ":", "\n", "\n", "            ", "prev_evaluation_status", "=", "model_json", "[", "'evaluation_status'", "]", "\n", "\n", "if", "prev_evaluation_status", "==", "'FAILURE'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: MODEL JSON NOT SUPPLIED'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "param_dict", "=", "{", "\n", "\"evaluation_status\"", ":", "str", "(", "'FAILURE'", ")", ",", "\n", "\"status_description\"", ":", "str", "(", "'MODEL JSON SUPPLIED FROM FAILED TRAINING'", ")", ",", "\n", "\"model_json\"", ":", "model_json", "\n", "\n", "}", "\n", "\n", "json_string", "=", "json", ".", "dumps", "(", "param_dict", ",", "separators", "=", "(", "','", ",", "':'", ")", ")", "\n", "\n", "## Output the model coefficients as a JSON string", "\n", "print", "(", "'output#'", "+", "json_string", ")", "\n", "\n", "logging", ".", "debug", "(", "'{}: json_string {}'", ".", "format", "(", "kpi_name", ",", "json_string", ")", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                    ", "logging", ".", "debug", "(", "'{}: Ending Python script FAILURE {}'", ".", "format", "(", "kpi_name", ",", "type_of_anomaly", ")", ")", "\n", "", "else", ":", "\n", "                    ", "logging", ".", "debug", "(", "'Ending Python script FAILURE'", ")", "\n", "\n", "", "loader_status", "=", "False", "\n", "\n", "", "", "except", ":", "\n", "\n", "                ", "logging", ".", "debug", "(", "'{}: PREVIOUS EVAL STATUS NOT PROVIDED'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "param_dict", "=", "{", "\n", "\"evaluation_status\"", ":", "str", "(", "'FAILURE'", ")", ",", "\n", "\"status_description\"", ":", "str", "(", "'PREVIOUS EVAL STATUS NOT PROVIDED'", ")", ",", "\n", "\"model_json\"", ":", "model_json", "\n", "}", "\n", "\n", "json_string", "=", "json", ".", "dumps", "(", "param_dict", ",", "separators", "=", "(", "','", ",", "':'", ")", ")", "\n", "\n", "## Output the model coefficients as a JSON string", "\n", "print", "(", "'output#'", "+", "json_string", ")", "\n", "\n", "logging", ".", "debug", "(", "'{}: json_string {}'", ".", "format", "(", "kpi_name", ",", "json_string", ")", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                    ", "logging", ".", "debug", "(", "'{}: Ending Python script FAILURE {}'", ".", "format", "(", "kpi_name", ",", "type_of_anomaly", ")", ")", "\n", "", "else", ":", "\n", "                    ", "logging", ".", "debug", "(", "'Ending Python script FAILURE'", ")", "\n", "\n", "", "loader_status", "=", "False", "\n", "\n", "\n", "", "if", "loader_status", ":", "\n", "\n", "            ", "cycle_period", "=", "model_json", "[", "'cycle_period'", "]", "\n", "model_params", "=", "model_json", "[", "'model_params'", "]", "\n", "selected_trend_model", "=", "model_json", "[", "'selected_trend_model'", "]", "\n", "freq_seasonal", "=", "model_json", "[", "'freq_seasonal'", "]", "\n", "if", "freq_seasonal", "!=", "None", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "freq_seasonal", ")", ")", ":", "\n", "                    ", "freq_seasonal", "[", "i", "]", "=", "{", "str", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "freq_seasonal", "[", "i", "]", ".", "items", "(", ")", "}", "\n", "\n", "", "", "model_summary", "=", "model_json", "[", "'model_summary'", "]", ".", "replace", "(", "'+'", ",", "' '", ")", "\n", "autoregressive_order", "=", "model_json", "[", "'autoregressive_order'", "]", "\n", "\n", "training_data_start_time", "=", "pd", ".", "to_datetime", "(", "model_json", "[", "'training_data_start_time'", "]", ".", "replace", "(", "'+'", ",", "' '", ")", ")", "\n", "data_scale", "=", "model_json", "[", "'data_scale'", "]", "\n", "exog_input_base_columns", "=", "model_json", "[", "'exog_input_base_columns'", "]", ".", "split", "(", "'+'", ")", "\n", "\n", "logging", ".", "debug", "(", "'{}: model_params {}'", ".", "format", "(", "kpi_name", ",", "model_params", ")", ")", "\n", "\n", "\n", "", "", "elif", "operation_mode", "==", "'executor'", ":", "\n", "\n", "        ", "logging", ".", "debug", "(", "'{}: LOADING PARAMETERS FOR EXECUTOR EXECUTION'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "prev_evaluation_status", "=", "model_json", "[", "'evaluation_status'", "]", "\n", "\n", "if", "prev_evaluation_status", "==", "'FAILURE'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: MODEL JSON NOT SUPPLIED'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "param_dict", "=", "{", "\n", "\"evaluation_status\"", ":", "str", "(", "'FAILURE'", ")", ",", "\n", "\"status_description\"", ":", "str", "(", "'MODEL JSON SUPPLIED FROM FAILED TRAINING'", ")", ",", "\n", "\"model_json\"", ":", "model_json", "\n", "}", "\n", "\n", "json_string", "=", "json", ".", "dumps", "(", "param_dict", ",", "separators", "=", "(", "','", ",", "':'", ")", ")", "\n", "\n", "## Output the model coefficients as a JSON string", "\n", "print", "(", "'output#'", "+", "json_string", ")", "\n", "\n", "logging", ".", "debug", "(", "'{}: json_string {}'", ".", "format", "(", "kpi_name", ",", "json_string", ")", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                    ", "logging", ".", "debug", "(", "'{}: Ending Python script FAILURE {}'", ".", "format", "(", "kpi_name", ",", "type_of_anomaly", ")", ")", "\n", "", "else", ":", "\n", "                    ", "logging", ".", "debug", "(", "'Ending Python script FAILURE'", ")", "\n", "\n", "", "loader_status", "=", "False", "\n", "\n", "", "", "except", ":", "\n", "\n", "                ", "logging", ".", "debug", "(", "'{}: PREVIOUS EVAL STATUS NOT PROVIDED'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "param_dict", "=", "{", "\n", "\"evaluation_status\"", ":", "str", "(", "'FAILURE'", ")", ",", "\n", "\"status_description\"", ":", "str", "(", "'PREVIOUS EVAL STATUS NOT PROVIDED'", ")", ",", "\n", "\"model_json\"", ":", "model_json", "\n", "}", "\n", "\n", "json_string", "=", "json", ".", "dumps", "(", "param_dict", ",", "separators", "=", "(", "','", ",", "':'", ")", ")", "\n", "\n", "## Output the model coefficients as a JSON string", "\n", "print", "(", "'output#'", "+", "json_string", ")", "\n", "\n", "logging", ".", "debug", "(", "'{}: json_string {}'", ".", "format", "(", "kpi_name", ",", "json_string", ")", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                    ", "logging", ".", "debug", "(", "'{}: Ending Python script FAILURE {}'", ".", "format", "(", "kpi_name", ",", "type_of_anomaly", ")", ")", "\n", "", "else", ":", "\n", "                    ", "logging", ".", "debug", "(", "'Ending Python script FAILURE'", ")", "\n", "\n", "", "loader_status", "=", "False", "\n", "\n", "\n", "", "if", "loader_status", ":", "\n", "\n", "            ", "cycle_period", "=", "model_json", "[", "'cycle_period'", "]", "\n", "model_params", "=", "model_json", "[", "'model_params'", "]", "\n", "selected_trend_model", "=", "str", "(", "model_json", "[", "'selected_trend_model'", "]", ")", "\n", "freq_seasonal", "=", "model_json", "[", "'freq_seasonal'", "]", "\n", "# Convert to non-unicode", "\n", "if", "freq_seasonal", "!=", "None", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "freq_seasonal", ")", ")", ":", "\n", "                    ", "freq_seasonal", "[", "i", "]", "=", "{", "str", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "freq_seasonal", "[", "i", "]", ".", "items", "(", ")", "}", "\n", "\n", "\n", "", "", "model_summary", "=", "model_json", "[", "'model_summary'", "]", ".", "replace", "(", "'+'", ",", "' '", ")", "\n", "autoregressive_order", "=", "model_json", "[", "'autoregressive_order'", "]", "\n", "training_data_start_time", "=", "pd", ".", "to_datetime", "(", "model_json", "[", "'training_data_start_time'", "]", ".", "replace", "(", "'+'", ",", "' '", ")", ")", "\n", "data_scale", "=", "model_json", "[", "'data_scale'", "]", "\n", "exog_input_base_columns", "=", "model_json", "[", "'exog_input_base_columns'", "]", ".", "split", "(", "'+'", ")", "\n", "\n", "\n", "logging", ".", "debug", "(", "'{}: model_params {}'", ".", "format", "(", "kpi_name", ",", "model_params", ")", ")", "\n", "\n", "\n", "", "", "return", "loader_status", ",", "json_string", ",", "freq_seasonal", ",", "selected_trend_model", ",", "autoregressive_order", ",", "cycle_period", ",", "model_params", ",", "model_summary", ",", "training_data_start_time", ",", "data_scale", ",", "exog_input_base_columns", "\n", "", ""]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.normalize_data.normalize_data": [[5, 14], ["len", "range", "data_scale.append", "numpy.floor", "numpy.log10", "numpy.abs().max", "numpy.abs"], "function", ["None"], ["def", "normalize_data", "(", "df_complete_data", ")", ":", "\n", "\n", "    ", "numberOfColumns", "=", "len", "(", "df_complete_data", ".", "columns", ")", "\n", "data_scale", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "        ", "data_scale", ".", "append", "(", "np", ".", "floor", "(", "np", ".", "log10", "(", "np", ".", "abs", "(", "df_complete_data", "[", "'KPI_{}'", ".", "format", "(", "c", ")", "]", ")", ".", "max", "(", ")", ")", ")", ")", "\n", "df_complete_data", "[", "'KPI_{}'", ".", "format", "(", "c", ")", "]", "=", "df_complete_data", "[", "'KPI_{}'", ".", "format", "(", "c", ")", "]", "/", "10", "**", "data_scale", "[", "c", "-", "1", "]", "\n", "\n", "", "return", "data_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.normalize_data.pred_normalize_data": [[16, 21], ["len", "range"], "function", ["None"], ["", "def", "pred_normalize_data", "(", "df_complete_data", ",", "data_scale", ")", ":", "\n", "\n", "    ", "numberOfColumns", "=", "len", "(", "df_complete_data", ".", "columns", ")", "\n", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "        ", "df_complete_data", "[", "'KPI_{}'", ".", "format", "(", "c", ")", "]", "=", "df_complete_data", "[", "'KPI_{}'", ".", "format", "(", "c", ")", "]", "/", "10", "**", "data_scale", "[", "c", "-", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_transformer.log_transform": [[18, 24], ["len", "range", "numpy.log"], "function", ["None"], ["def", "log_transform", "(", "df_complete_data", ",", "log_transform", ")", ":", "\n", "\n", "    ", "numberOfColumns", "=", "len", "(", "log_transform", ")", "\n", "for", "c", "in", "range", "(", "numberOfColumns", "-", "1", ")", ":", "\n", "        ", "if", "log_transform", "[", "c", "]", "==", "1", ":", "\n", "            ", "df_complete_data", ".", "iloc", "[", ":", ",", "c", "]", "=", "np", ".", "log", "(", "df_complete_data", ".", "iloc", "[", ":", ",", "c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_transformer.exponentiate": [[26, 36], ["len", "range", "numpy.exp", "numpy.exp", "numpy.exp"], "function", ["None"], ["", "", "", "def", "exponentiate", "(", "df_complete_data", ",", "log_transform", ")", ":", "\n", "\n", "    ", "numberOfColumns", "=", "len", "(", "log_transform", ")", "\n", "\n", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "        ", "if", "log_transform", "[", "c", "-", "1", "]", "==", "1", ":", "\n", "# Retransform data to original scale", "\n", "            ", "df_new", ".", "loc", "[", ":", ",", "'KPI_{}'", ".", "format", "(", "c", ")", "]", "=", "np", ".", "exp", "(", "df_new", ".", "loc", "[", ":", ",", "'KPI_{}'", ".", "format", "(", "c", ")", "]", ")", "\n", "df_new", ".", "loc", "[", ":", ",", "'Expected_{}'", ".", "format", "(", "c", ")", "]", "=", "np", ".", "exp", "(", "df_new", ".", "loc", "[", ":", ",", "'Expected_{}'", ".", "format", "(", "c", ")", "]", ")", "\n", "df_new", ".", "loc", "[", ":", ",", "'forecast_test_{}'", ".", "format", "(", "c", ")", "]", "=", "np", ".", "exp", "(", "df_new", ".", "loc", "[", ":", ",", "'forecast_test_{}'", ".", "format", "(", "c", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_transformer.data_transformer": [[38, 158], ["len", "range", "time_series_metadata.missing_timestamp_imputation.set_index", "pandas.to_datetime", "logging.debug", "logging.debug", "tools.pred_normalize_data", "tools.normalize_data", "logging.debug", "logging.debug", "time_series_metadata.missing_label_imputation.set_index", "pandas.to_datetime", "isinstance", "logging.debug", "logging.debug", "tools.production_data_frequency", "tools.data_frequency", "tools.missing_timestamp_imputation", "columnNames.append", "columnNames.append", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "tools.missing_label_imputation", "logging.debug", "logging.debug", "pandas.to_datetime", "pandas.to_datetime", "pandas.to_datetime", "pandas.to_datetime", "int", "len", "float", "float", "float", "float", "len"], "function", ["home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.normalize_data.pred_normalize_data", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.normalize_data.normalize_data", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.production_data_frequency", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.data_frequency", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.missing_timestamp_imputation", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.missing_label_imputation"], ["", "", "", "def", "data_transformer", "(", "df_complete_data", ",", "df_label_data", ",", "operation_mode", ",", "data_scale", ",", "training_window", ",", "test_window", ",", "kpi_name", ",", "perform_point_anomaly", ",", "misc_values", ",", "trend_anomaly_window", ",", "data_frequency", ")", ":", "\n", "\n", "    ", "originalColumnNames", "=", "df_complete_data", ".", "columns", "\n", "numberOfColumns", "=", "len", "(", "df_complete_data", ".", "columns", ")", "\n", "\n", "columnNames", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "numberOfColumns", ")", ":", "\n", "        ", "if", "c", "==", "0", ":", "\n", "            ", "columnNames", ".", "append", "(", "'Date'", ")", "\n", "", "else", ":", "\n", "            ", "columnNames", ".", "append", "(", "'KPI_{}'", ".", "format", "(", "c", ")", ")", "\n", "\n", "", "", "df_complete_data", ".", "columns", "=", "columnNames", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: Normalizing data'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'Normalizing data'", ")", "\n", "\n", "# Normalize dataset", "\n", "", "if", "(", "operation_mode", "==", "'executor'", "or", "operation_mode", "==", "'tester'", ")", "and", "perform_point_anomaly", ":", "\n", "        ", "normalize_data", ".", "pred_normalize_data", "(", "df_complete_data", ",", "data_scale", ")", "\n", "", "else", ":", "\n", "        ", "data_scale", "=", "normalize_data", ".", "normalize_data", "(", "df_complete_data", ")", "\n", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: SUCCESS Normalizing data'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'SUCCESS Normalizing data'", ")", "\n", "\n", "#########################################################", "\n", "## TRANSFORM df-complete-data from dataframe to timeseries dataframe", "\n", "#########################################################", "\n", "\n", "", "df_complete_data", ".", "set_index", "(", "'Date'", ",", "inplace", "=", "True", ",", "drop", "=", "True", ")", "\n", "df_complete_data", ".", "index", "=", "pd", ".", "to_datetime", "(", "df_complete_data", ".", "index", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "df_label_data", ".", "columns", "=", "columnNames", "\n", "df_label_data", ".", "set_index", "(", "'Date'", ",", "inplace", "=", "True", ",", "drop", "=", "True", ")", "\n", "df_label_data", ".", "index", "=", "pd", ".", "to_datetime", "(", "df_label_data", ".", "index", ")", "\n", "\n", "###########################################", "\n", "## UPDATE TO TRAINING WINDOW END TIMESTAMP", "\n", "###########################################", "\n", "\n", "", "if", "(", "not", "isinstance", "(", "training_window", ",", "float", ")", ")", ":", "\n", "        ", "training_window", "[", "1", "]", "=", "df_complete_data", ".", "index", "[", "int", "(", "0.8", "*", "len", "(", "df_complete_data", ".", "loc", "[", ":", "test_window", "]", ")", ")", "]", "\n", "\n", "# TBD", "\n", "#data_transformation.log_transform(df_complete_data,log_transform)", "\n", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: Extracting frequency, seasonal periods and harmonics'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'Extracting frequency, seasonal periods and harmonics'", ")", "\n", "\n", "# Determine data frequency and cycle period", "\n", "", "if", "operation_mode", "in", "[", "'trainer'", ",", "'tester'", ",", "'executor'", "]", ":", "\n", "        ", "df_complete_data", ",", "data_frequency", ",", "cycle_period", ",", "seasonal_periods", ",", "harmonics", "=", "time_series_metadata", ".", "production_data_frequency", "(", "df_complete_data", ",", "data_frequency", ",", "training_window", ",", "operation_mode", ",", "kpi_name", ")", "\n", "", "else", ":", "\n", "        ", "df_complete_data", ",", "data_frequency", ",", "training_window", ",", "test_window", ",", "cycle_period", ",", "seasonal_periods", ",", "harmonics", "=", "time_series_metadata", ".", "data_frequency", "(", "df_complete_data", ",", "data_frequency", ",", "training_window", ",", "test_window", ",", "operation_mode", ",", "kpi_name", ")", "\n", "\n", "\n", "# Number data points in which to display trend anomalies", "\n", "", "if", "trend_anomaly_window", "==", "None", ":", "\n", "        ", "trend_anomaly_window", "=", "4", "*", "cycle_period", "\n", "\n", "", "if", "data_frequency", "!=", "None", ":", "\n", "\n", "        ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "            ", "logging", ".", "debug", "(", "'{}: SUCCESS Extracting frequency, seasonal periods and harmonics'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "'SUCCESS Extracting frequency, seasonal periods and harmonics'", ")", "\n", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "            ", "logging", ".", "debug", "(", "'{}: Missing time stamp imputation'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "'Missing time stamp imputation'", ")", "\n", "\n", "# Missing time stamp imputation", "\n", "", "df_complete_data", "=", "time_series_metadata", ".", "missing_timestamp_imputation", "(", "df_complete_data", ",", "data_frequency", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "            ", "df_label_data", "=", "time_series_metadata", ".", "missing_label_imputation", "(", "df_label_data", ",", "data_frequency", ")", "\n", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "            ", "logging", ".", "debug", "(", "'{}: SUCCESS Missing time stamp imputation'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "'SUCCESS Missing time stamp imputation'", ")", "\n", "\n", "", "if", "len", "(", "misc_values", ")", ">", "0", "and", "data_frequency", "==", "'daily'", ":", "\n", "            ", "misc_values", "[", "'prev_christmas'", "]", "[", "'date'", "]", "=", "pd", ".", "to_datetime", "(", "misc_values", "[", "'prev_christmas'", "]", "[", "'date'", "]", ")", "\n", "misc_values", "[", "'prev_DAT'", "]", "[", "'date'", "]", "=", "pd", ".", "to_datetime", "(", "misc_values", "[", "'prev_DAT'", "]", "[", "'date'", "]", ")", "\n", "misc_values", "[", "'prev_major_iOS_release'", "]", "[", "'date'", "]", "=", "pd", ".", "to_datetime", "(", "misc_values", "[", "'prev_major_iOS_release'", "]", "[", "'date'", "]", ")", "\n", "misc_values", "[", "'prev_major_iPhone_release'", "]", "[", "'date'", "]", "=", "pd", ".", "to_datetime", "(", "misc_values", "[", "'prev_major_iPhone_release'", "]", "[", "'date'", "]", ")", "\n", "\n", "misc_values", "[", "'prev_christmas'", "]", "[", "'value'", "]", "=", "float", "(", "misc_values", "[", "'prev_christmas'", "]", "[", "'value'", "]", ")", "/", "10", "**", "data_scale", "[", "0", "]", "\n", "\n", "misc_values", "[", "'prev_DAT'", "]", "[", "'value'", "]", "=", "float", "(", "misc_values", "[", "'prev_DAT'", "]", "[", "'value'", "]", ")", "/", "10", "**", "data_scale", "[", "0", "]", "\n", "\n", "misc_values", "[", "'prev_major_iOS_release'", "]", "[", "'value'", "]", "=", "float", "(", "misc_values", "[", "'prev_major_iOS_release'", "]", "[", "'value'", "]", ")", "/", "10", "**", "data_scale", "[", "0", "]", "\n", "\n", "misc_values", "[", "'prev_major_iPhone_release'", "]", "[", "'value'", "]", "=", "float", "(", "misc_values", "[", "'prev_major_iPhone_release'", "]", "[", "'value'", "]", ")", "/", "10", "**", "data_scale", "[", "0", "]", "\n", "\n", "\n", "\n", "", "", "return", "df_complete_data", ",", "df_label_data", ",", "data_scale", ",", "training_window", ",", "test_window", ",", "data_frequency", ",", "cycle_period", ",", "seasonal_periods", ",", "harmonics", ",", "trend_anomaly_window", ",", "originalColumnNames", ",", "numberOfColumns", ",", "misc_values", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_transformer.prior_outlier_detection": [[159, 306], ["isinstance", "len", "isinstance", "isinstance", "df_display_training[].isnull", "tools.long_term_seasonal_plus_trend.long_term_seasonal_plus_trend", "range", "int", "logging.debug", "logging.debug", "df_training[].reset_index", "logging.debug", "logging.debug", "len", "int", "len", "int", "int", "logging.debug", "logging.debug", "len", "numpy.abs", "len", "len", "len", "numpy.abs().median", "isinstance", "isinstance", "isinstance", "numpy.abs", "int", "int", "df_anom_training.append.append", "df_anom_training.append.append", "int", "int", "df_anom_training.append.append", "df_anom_training.append.append", "int", "int", "df_anom_training.append.append", "df_anom_training.append.append", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.long_term_seasonal_plus_trend.long_term_seasonal_plus_trend"], ["", "def", "prior_outlier_detection", "(", "df_complete_data", ",", "df_label_data", ",", "us_holiday_flag", ",", "chinese_holiday_flag", ",", "operation_mode", ",", "kpi_name", ",", "training_window", ",", "cycle_period", ",", "plottingWindow", ",", "model_type", ")", ":", "\n", "# This function does the prior outlier detection", "\n", "\n", "    ", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "\n", "        ", "df_training", "=", "df_complete_data", ".", "iloc", "[", ":", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", "]", "\n", "\n", "# outliers in training data and within display window based on past info", "\n", "df_display_training", "=", "df_training", ".", "iloc", "[", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ":", "]", "\n", "\n", "", "elif", "isinstance", "(", "training_window", ",", "list", ")", ":", "\n", "\n", "        ", "df_training", "=", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", "\n", "\n", "# outliers in training data and within display window based on past info", "\n", "df_display_training", "=", "df_training", ".", "loc", "[", "training_window", "[", "0", "]", ":", "]", "\n", "\n", "", "df_anom_training", "=", "df_display_training", "[", "df_display_training", "[", "'KPI_1'", "]", ".", "isnull", "(", ")", "]", "\n", "count_of_anomalies_training", "=", "len", "(", "df_anom_training", ")", "\n", "\n", "if", "model_type", "not", "in", "[", "'sr'", ",", "'sr_batch'", "]", ":", "\n", "\n", "# Automatic prior outlier identification requires atleast two cycles of data", "\n", "        ", "try", ":", "\n", "\n", "            ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: STL computation'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'STL computation'", ")", "\n", "\n", "", "decomp", "=", "long_term_seasonal_plus_trend", "(", "df_training", "[", "'KPI_1'", "]", ".", "reset_index", "(", ")", ",", "cycle_period", ")", "\n", "seasonal_plus_trend", "=", "decomp", "[", "'seasonal_plus_trend'", "]", "\n", "diff_array", "=", "df_training", "[", "'KPI_1'", "]", "-", "seasonal_plus_trend", "[", "'trend'", "]", "-", "seasonal_plus_trend", "[", "'seasonal'", "]", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: SUCCESS STL computation'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'SUCCESS STL computation'", ")", "\n", "\n", "", "for", "t", "in", "range", "(", "len", "(", "df_training", ")", ")", ":", "\n", "\n", "                ", "if", "np", ".", "abs", "(", "diff_array", "[", "t", "]", ")", "/", "(", "6", "*", "np", ".", "abs", "(", "diff_array", ")", ".", "median", "(", ")", ")", ">", "1", ":", "\n", "\n", "# Check if user has provided any feedback", "\n", "                        ", "if", "(", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ")", "and", "(", "df_label_data", ".", "loc", "[", "df_training", ".", "index", "[", "t", "]", "]", "!=", "'N'", ")", "[", "0", "]", ":", "\n", "\n", "                            ", "if", "(", "df_label_data", ".", "loc", "[", "df_training", ".", "index", "[", "t", "]", "]", "==", "'Y'", ")", "[", "0", "]", ":", "# User sets the datapoint as anomaly", "\n", "\n", "                                ", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "\n", "                                    ", "if", "t", ">=", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ":", "\n", "\n", "                                        ", "if", "count_of_anomalies_training", "==", "0", ":", "\n", "                                            ", "df_anom_training", "=", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                                            ", "df_anom_training", "=", "df_anom_training", ".", "append", "(", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", ")", "\n", "\n", "", "count_of_anomalies_training", "=", "count_of_anomalies_training", "+", "1", "\n", "\n", "", "", "else", ":", "\n", "\n", "                                    ", "if", "df_training", ".", "index", "[", "t", "]", ">=", "training_window", "[", "0", "]", ":", "\n", "\n", "                                        ", "if", "count_of_anomalies_training", "==", "0", ":", "\n", "                                            ", "df_anom_training", "=", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                                            ", "df_anom_training", "=", "df_anom_training", ".", "append", "(", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", ")", "\n", "\n", "", "count_of_anomalies_training", "=", "count_of_anomalies_training", "+", "1", "\n", "\n", "", "", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "", "elif", "(", "us_holiday_flag", ".", "iloc", "[", "t", "]", "==", "0", "and", "chinese_holiday_flag", ".", "iloc", "[", "t", "]", "==", "0", ")", ":", "# not special, can be outlier", "\n", "\n", "                                ", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "\n", "                                    ", "if", "t", ">=", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ":", "\n", "\n", "                                        ", "if", "count_of_anomalies_training", "==", "0", ":", "\n", "                                            ", "df_anom_training", "=", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                                            ", "df_anom_training", "=", "df_anom_training", ".", "append", "(", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", ")", "\n", "\n", "", "count_of_anomalies_training", "=", "count_of_anomalies_training", "+", "1", "\n", "\n", "", "", "else", ":", "\n", "\n", "                                    ", "if", "df_training", ".", "index", "[", "t", "]", ">=", "training_window", "[", "0", "]", ":", "\n", "\n", "                                        ", "if", "count_of_anomalies_training", "==", "0", ":", "\n", "                                            ", "df_anom_training", "=", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                                            ", "df_anom_training", "=", "df_anom_training", ".", "append", "(", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", ")", "\n", "\n", "", "count_of_anomalies_training", "=", "count_of_anomalies_training", "+", "1", "\n", "\n", "", "", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "", "", "else", ":", "\n", "\n", "\n", "                            ", "if", "(", "us_holiday_flag", ".", "iloc", "[", "t", "]", "==", "0", "and", "chinese_holiday_flag", ".", "iloc", "[", "t", "]", "==", "0", ")", ":", "# not special, can be outlier", "\n", "\n", "                                ", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "\n", "                                    ", "if", "t", ">=", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ":", "\n", "\n", "                                        ", "if", "count_of_anomalies_training", "==", "0", ":", "\n", "                                            ", "df_anom_training", "=", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                                            ", "df_anom_training", "=", "df_anom_training", ".", "append", "(", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", ")", "\n", "\n", "", "count_of_anomalies_training", "=", "count_of_anomalies_training", "+", "1", "\n", "\n", "", "", "else", ":", "\n", "\n", "                                    ", "if", "df_training", ".", "index", "[", "t", "]", ">=", "training_window", "[", "0", "]", ":", "\n", "\n", "                                        ", "if", "count_of_anomalies_training", "==", "0", ":", "\n", "                                            ", "df_anom_training", "=", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                                            ", "df_anom_training", "=", "df_anom_training", ".", "append", "(", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", ")", "\n", "\n", "", "count_of_anomalies_training", "=", "count_of_anomalies_training", "+", "1", "\n", "\n", "\n", "", "", "df_training", ".", "loc", "[", "df_training", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "", "", "", "", "", "except", ":", "\n", "\n", "            ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: STL computation FAILED. Ignoring automatic outlier detection'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'STL computation FAILED. Ignoring automatic outlier detection'", ")", "\n", "\n", "", "", "", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "        ", "df_test", "=", "df_complete_data", ".", "iloc", "[", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ":", "]", "\n", "", "else", ":", "\n", "        ", "df_test", "=", "df_complete_data", ".", "iloc", "[", "len", "(", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", ":", "]", "\n", "\n", "", "return", "df_training", ",", "df_test", ",", "df_anom_training", ",", "count_of_anomalies_training", "", "", ""]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.extract_seasonal_plus_trend.extract_seasonal": [[5, 25], ["data.set_index.set_index", "rstl.STL", "pandas.DataFrame", "ps.DataFrame.set_index", "ValueError", "list", "pandas.to_numeric", "pandas.Series"], "function", ["None"], ["def", "extract_seasonal", "(", "data", ",", "num_obs_per_period", "=", "None", ")", ":", "\n", "\n", "    ", "if", "num_obs_per_period", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"must supply period length for time series decomposition\"", ")", "\n", "\n", "", "if", "list", "(", "data", ".", "columns", ".", "values", ")", "!=", "[", "\"timestamp\"", ",", "\"value\"", "]", ":", "\n", "        ", "data", ".", "columns", "=", "[", "\"timestamp\"", ",", "\"value\"", "]", "\n", "\n", "", "data", "=", "data", ".", "set_index", "(", "'timestamp'", ")", "\n", "decomp", "=", "STL", "(", "data", ".", "value", ",", "num_obs_per_period", ",", "\"periodic\"", ",", "robust", "=", "True", ")", "\n", "\n", "p", "=", "{", "\n", "'timestamp'", ":", "data", ".", "index", ",", "\n", "'seasonal'", ":", "ps", ".", "to_numeric", "(", "ps", ".", "Series", "(", "decomp", ".", "seasonal", ")", ")", "\n", "}", "\n", "\n", "data_seasonal_component", "=", "ps", ".", "DataFrame", "(", "p", ")", "\n", "data_seasonal_component", ".", "set_index", "(", "'timestamp'", ",", "inplace", "=", "True", ")", "\n", "\n", "return", "data_seasonal_component", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.extract_seasonal_plus_trend.extract_trend": [[27, 46], ["data.set_index.set_index", "pandas.DataFrame", "ps.DataFrame.set_index", "ValueError", "list", "pandas.to_numeric", "pandas.Series", "numpy.repeat", "data.set_index.value.median", "len"], "function", ["None"], ["", "def", "extract_trend", "(", "data", ",", "num_obs_per_period", "=", "None", ")", ":", "\n", "\n", "    ", "if", "num_obs_per_period", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"must supply period length for time series decomposition\"", ")", "\n", "\n", "", "if", "list", "(", "data", ".", "columns", ".", "values", ")", "!=", "[", "\"timestamp\"", ",", "\"value\"", "]", ":", "\n", "        ", "data", ".", "columns", "=", "[", "\"timestamp\"", ",", "\"value\"", "]", "\n", "\n", "", "data", "=", "data", ".", "set_index", "(", "'timestamp'", ")", "\n", "\n", "p", "=", "{", "\n", "'timestamp'", ":", "data", ".", "index", ",", "\n", "'trend'", ":", "ps", ".", "to_numeric", "(", "ps", ".", "Series", "(", "np", ".", "repeat", "(", "data", ".", "value", ".", "median", "(", ")", ",", "len", "(", "data", ")", ")", ")", ")", ",", "\n", "}", "\n", "\n", "data_trend_component", "=", "ps", ".", "DataFrame", "(", "p", ")", "\n", "data_trend_component", ".", "set_index", "(", "'timestamp'", ",", "inplace", "=", "True", ")", "\n", "\n", "return", "data_trend_component", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_extractor_nonProd.data_extractor.__init__": [[11, 41], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "app_name", ",", "kpi_name", ",", "date", ")", ":", "\n", "        ", "self", ".", "name", "=", "app_name", "\n", "self", ".", "kpi_name", "=", "kpi_name", "\n", "self", ".", "data", "=", "None", "\n", "self", ".", "date", "=", "date", "\n", "self", ".", "weights", "=", "[", "]", "\n", "self", ".", "credentials", "=", "None", "\n", "self", ".", "db_properties", "=", "None", "\n", "self", ".", "filename", "=", "None", "\n", "self", ".", "ip", "=", "None", "\n", "self", ".", "port", "=", "None", "\n", "self", ".", "SID", "=", "None", "\n", "self", ".", "dsn_tns", "=", "None", "\n", "self", ".", "properties", "=", "None", "\n", "self", ".", "res", "=", "None", "\n", "self", ".", "cur", "=", "None", "\n", "self", ".", "df_list", "=", "None", "\n", "self", ".", "thresh", "=", "None", "\n", "self", ".", "df", "=", "None", "\n", "self", ".", "final_weights", "=", "None", "\n", "self", ".", "result", "=", "None", "\n", "self", ".", "final", "=", "None", "\n", "self", ".", "first_level", "=", "None", "\n", "self", ".", "second_level", "=", "None", "\n", "self", ".", "third_level", "=", "None", "\n", "self", ".", "prev_deviations", "=", "None", "\n", "self", ".", "deviations", "=", "None", "\n", "self", ".", "new_res", "=", "None", "\n", "self", ".", "domain", "=", "None", "\n", "self", ".", "dimension", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_extractor_nonProd.load_data": [[42, 533], ["logging.debug", "data_extractor().get_data", "print", "pd.read_csv.sort_values", "logging.debug", "base64.b64decode().decode", "json.loads", "logging.debug", "pandas.DataFrame", "logging.debug", "pd.read_csv.head", "base64.b64decode().decode.replace().replace", "data_extractor_nonProd.adhoc_json_to_list", "base64.b64decode().decode", "json.loads", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "pandas.DataFrame", "pd.read_csv.sort_values", "pandas.DataFrame", "pd.DataFrame.sort_values", "bool", "data_extractor_nonProd.data_extractor", "base64.b64decode", "json.loads", "base64.b64decode().decode.replace().replace", "logging.debug", "data_extractor_nonProd.json_to_list", "data_extractor_nonProd.labels_from_json", "logging.debug", "base64.b64decode().decode", "json.loads", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "pandas.DataFrame", "pd.read_csv.sort_values", "pandas.DataFrame", "pd.DataFrame.sort_values", "bool", "base64.b64decode().decode.replace", "base64.b64decode().decode", "base64.b64decode", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "json.loads", "logging.debug", "logging.debug", "base64.b64decode().decode.replace().replace", "logging.debug", "base64.b64decode().decode", "base64.b64decode().deocde.replace", "json.loads", "data_extractor_nonProd.json_to_list", "data_extractor_nonProd.labels_from_json", "base64.b64decode().decode", "json.loads", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "pandas.DataFrame", "pd.read_csv.sort_values", "pandas.DataFrame", "pd.DataFrame.sort_values", "bool", "logging.debug", "base64.b64decode().decode.replace", "base64.b64decode().decode", "base64.b64decode", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "json.loads", "logging.debug", "base64.b64decode().decode.replace().replace", "logging.debug", "data_extractor_nonProd.json_to_list", "data_extractor_nonProd.labels_from_json", "base64.b64decode().deocde", "base64.b64decode().deocde.replace", "json.loads", "logging.debug", "data_source.copy", "pandas.to_datetime", "pd.read_csv.set_index", "pd.read_csv.reset_index", "pd.read_csv.sort_values", "logging.debug", "logging.debug", "pandas.read_csv", "pd.read_csv.sort_values", "logging.debug", "base64.b64decode", "base64.b64decode().decode.replace", "base64.b64decode().decode", "base64.b64decode", "base64.b64decode", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "json.loads", "logging.debug", "base64.b64decode", "base64.b64decode().decode.replace", "base64.b64decode().decode", "base64.b64decode", "base64.b64decode", "base64.b64decode"], "function", ["home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_extractor_nonProd.adhoc_json_to_list", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_extractor_nonProd.json_to_list", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_extractor_nonProd.labels_from_json", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_extractor_nonProd.json_to_list", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_extractor_nonProd.labels_from_json", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_extractor_nonProd.json_to_list", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_extractor_nonProd.labels_from_json"], ["", "", "def", "load_data", "(", "operation_mode", ",", "model_type", ",", "data_source", ",", "model_json", ",", "kpi_name", ",", "database", ",", "alertingDate", ")", ":", "\n", "\n", "# Read input data into a data frame", "\n", "# Convert the date column into date type and index", "\n", "    ", "if", "database", "==", "False", ":", "\n", "\n", "# production modes", "\n", "        ", "if", "operation_mode", "==", "'fast'", ":", "\n", "\n", "            ", "data_arg", "=", "base64", ".", "b64decode", "(", "data_source", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "data", "=", "json", ".", "loads", "(", "data_arg", ".", "replace", "(", "'#'", ",", "' '", ")", ".", "replace", "(", "'\\''", ",", "' '", ")", ")", "\n", "\n", "logging", ".", "debug", "(", "'data is {}'", ".", "format", "(", "data", ")", ")", "\n", "\n", "# KPI values", "\n", "df_complete_data", "=", "pd", ".", "DataFrame", "(", "adhoc_json_to_list", "(", "data", ")", ",", "columns", "=", "[", "'Date'", ",", "'value'", "]", ")", "\n", "\n", "data_frequency", "=", "data", "[", "'frequency'", "]", "\n", "df_label_data", "=", "None", "\n", "model_name", "=", "None", "\n", "kpi_name", "=", "None", "\n", "app_name", "=", "None", "\n", "model_json", "=", "None", "\n", "user_defined", "=", "None", "\n", "misc_values", "=", "None", "\n", "type_of_anomaly", "=", "None", "\n", "trend_anomaly_window", "=", "None", "\n", "threshold_probability", "=", "None", "\n", "confidence_band", "=", "None", "\n", "trendPrior", "=", "None", "\n", "\n", "# trend likelihood values", "\n", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "likelihoodHashmap", "=", "json", ".", "loads", "(", "base64", ".", "b64decode", "(", "kpi", "[", "'trendADLikelihood'", "]", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "", "", "except", ":", "\n", "                ", "likelihoodHashmap", "=", "{", "}", "\n", "", "logging", ".", "debug", "(", "'{}: TREND LIKELIHOOD VALUES RECEIVED {}'", ".", "format", "(", "kpi_name", ",", "likelihoodHashmap", ")", ")", "\n", "\n", "", "elif", "operation_mode", "==", "'trainer'", ":", "\n", "\n", "            ", "data_arg", "=", "base64", ".", "b64decode", "(", "data_source", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "data", "=", "json", ".", "loads", "(", "data_arg", ".", "replace", "(", "'#'", ",", "' '", ")", ".", "replace", "(", "'\\''", ",", "' '", ")", ")", "\n", "model_name", "=", "data", "[", "'modelName'", "]", "\n", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                ", "kpi_name", "=", "kpi", "[", "'kpiName'", "]", "\n", "\n", "", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "app_name", "=", "kpi", "[", "'appName'", "]", "\n", "", "", "except", ":", "\n", "                ", "app_name", "=", "None", "\n", "logging", ".", "debug", "(", "'{}: APP NAME NOT PROVIDED'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "# Read data frequency provided    ", "\n", "", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "data_frequency", "=", "kpi", "[", "'kpiFreq'", "]", "\n", "", "", "except", ":", "\n", "                ", "data_frequency", "=", "None", "\n", "logging", ".", "debug", "(", "'{}: DATA FREQUENCY NOT PROVIDED'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "\n", "#try:", "\n", "#    for kpi in data['kpiList']:", "\n", "#        trend_anomaly_window=kpi['trendWindow']      ", "\n", "#except:", "\n", "#    trend_anomaly_window=None", "\n", "#    logging.debug('{}: TREND WINDOW NOT PROVIDED'.format(kpi_name))  ", "\n", "", "trend_anomaly_window", "=", "None", "\n", "\n", "# Read trend threshold probability   ", "\n", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "threshold_probability", "=", "kpi", "[", "'trendThreshold'", "]", "\n", "", "assert", "0", "<=", "threshold_probability", "<=", "1", "\n", "", "except", ":", "\n", "                ", "threshold_probability", "=", "0.95", "\n", "", "logging", ".", "debug", "(", "'{}: THRESHOLD PROBABILITY NOT PROVIDED OR INCORRECT FORMAT OR OUTSIDE RANGE. DEFAULT SET'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "# Read point threshold probability", "\n", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "if", "kpi", "[", "'pointThreshold'", "]", "==", "1.0", ":", "\n", "                        ", "confidence_band", "=", "'1-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "2.0", ":", "\n", "                        ", "confidence_band", "=", "'2-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "2.5", ":", "\n", "                        ", "confidence_band", "=", "'2.5-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "3.0", ":", "\n", "                        ", "confidence_band", "=", "'3-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "3.5", ":", "\n", "                        ", "confidence_band", "=", "'3.5-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "4.0", ":", "\n", "                        ", "confidence_band", "=", "'4-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "4.5", ":", "\n", "                        ", "confidence_band", "=", "'4.5-sigma'", "\n", "", "", "assert", "kpi", "[", "'pointThreshold'", "]", "in", "[", "1", ",", "2", ",", "2.5", ",", "3", ",", "3.5", ",", "4", ",", "4.5", "]", "\n", "", "except", ":", "\n", "                ", "confidence_band", "=", "'3-sigma'", "\n", "logging", ".", "debug", "(", "'{}: THRESHOLD NOT PROVIDED. DEFAULT SET'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "\n", "# Read trend prior probability    ", "\n", "", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "trendPrior", "=", "kpi", "[", "'trendPrior'", "]", "\n", "", "", "except", ":", "\n", "                ", "trendPrior", "=", "0.5", "\n", "logging", ".", "debug", "(", "'{}: TREND PRIOR NOT PROVIDED. DEFAULT SET'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "# trend likelihood values", "\n", "", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "likelihoodHashmap", "=", "json", ".", "loads", "(", "base64", ".", "b64decode", "(", "kpi", "[", "'trendADLikelihood'", "]", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "", "", "except", ":", "\n", "                ", "likelihoodHashmap", "=", "{", "}", "\n", "", "logging", ".", "debug", "(", "'{}: TREND LIKELIHOOD VALUES RECEIVED {}'", ".", "format", "(", "kpi_name", ",", "likelihoodHashmap", ")", ")", "\n", "\n", "\n", "try", ":", "\n", "                ", "type_of_anomaly", "=", "data", "[", "'type_of_anomaly'", "]", "\n", "logging", ".", "debug", "(", "'{}: TYPE OF ANOMALY PROVIDED: {}'", ".", "format", "(", "kpi_name", ",", "type_of_anomaly", ")", ")", "\n", "", "except", ":", "\n", "                ", "type_of_anomaly", "=", "None", "\n", "logging", ".", "debug", "(", "'{}: TYPE OF ANOMALY NOT PROVIDED. DEFAULT (POINT AND TREND) SET'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "\n", "", "logging", ".", "debug", "(", "'{}: KPI name is {}'", ".", "format", "(", "kpi_name", ",", "kpi_name", ")", ")", "\n", "logging", ".", "debug", "(", "'{}: data is {}'", ".", "format", "(", "kpi_name", ",", "data", ")", ")", "\n", "\n", "# KPI values", "\n", "df_complete_data", "=", "pd", ".", "DataFrame", "(", "json_to_list", "(", "data", ")", ",", "columns", "=", "[", "'Date'", ",", "'KPI'", "]", ")", "\n", "df_complete_data", ".", "sort_values", "(", "by", "=", "'Date'", ",", "inplace", "=", "True", ")", "\n", "\n", "# labels", "\n", "df_label_data", "=", "pd", ".", "DataFrame", "(", "labels_from_json", "(", "data", ")", ",", "columns", "=", "[", "'Date'", ",", "'Labels'", "]", ")", "\n", "df_label_data", ".", "sort_values", "(", "by", "=", "'Date'", ",", "inplace", "=", "True", ")", "\n", "\n", "# model_json created only after training", "\n", "model_json", "=", "None", "\n", "\n", "# dataset defined by user", "\n", "user_defined", "=", "bool", "(", "data", "[", "'kpiList'", "]", "[", "0", "]", "[", "'userOverride'", "]", ")", "\n", "\n", "# miscellaneous values such previous Christmas, Day-after-Thanksgiving, major iPhone release,", "\n", "# major iOS release", "\n", "misc_values", "=", "{", "}", "\n", "try", ":", "\n", "                ", "misc_values", "[", "'prev_christmas'", "]", "=", "data", "[", "'kpiList'", "]", "[", "0", "]", "[", "'prev_christmas'", "]", "\n", "misc_values", "[", "'prev_DAT'", "]", "=", "data", "[", "'kpiList'", "]", "[", "0", "]", "[", "'prev_DAT'", "]", "\n", "misc_values", "[", "'prev_major_iOS_release'", "]", "=", "data", "[", "'kpiList'", "]", "[", "0", "]", "[", "'prev_major_iOS_release'", "]", "\n", "misc_values", "[", "'prev_major_iPhone_release'", "]", "=", "data", "[", "'kpiList'", "]", "[", "0", "]", "[", "'prev_major_iPhone_release'", "]", "\n", "\n", "logging", ".", "debug", "(", "'{}: SUCCESSFULLY READ PREVIOUS CHRISTMAS, THANKSGIVING, iOS RELEASE, AND iPHONE RELEASE DATA'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "", "except", ":", "\n", "\n", "                ", "logging", ".", "debug", "(", "'{}: PREVIOUS CHRISTMAS, THANKSGIVING, iOS RELEASE, AND iPHONE RELEASE DATA NOT PROVIDED, PROCEEDING WITHOUT THEM'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "", "", "elif", "operation_mode", "==", "'tester'", ":", "\n", "\n", "            ", "data_arg", "=", "base64", ".", "b64decode", "(", "data_source", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "data", "=", "json", ".", "loads", "(", "data_arg", ".", "replace", "(", "'#'", ",", "' '", ")", ".", "replace", "(", "'\\''", ",", "' '", ")", ")", "\n", "model_name", "=", "data", "[", "'modelName'", "]", "\n", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                ", "kpi_name", "=", "kpi", "[", "'kpiName'", "]", "\n", "\n", "", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "app_name", "=", "kpi", "[", "'appName'", "]", "\n", "", "", "except", ":", "\n", "                ", "app_name", "=", "None", "\n", "logging", ".", "debug", "(", "'{}: APP NAME NOT PROVIDED'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "# Read data frequency provided    ", "\n", "", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "data_frequency", "=", "kpi", "[", "'kpiFreq'", "]", "\n", "", "", "except", ":", "\n", "                ", "data_frequency", "=", "None", "\n", "logging", ".", "debug", "(", "'{}: DATA FREQUENCY NOT PROVIDED'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "\n", "#try:", "\n", "#    for kpi in data['kpiList']:", "\n", "#        trend_anomaly_window=kpi['trendWindow']      ", "\n", "#except:", "\n", "#    trend_anomaly_window=None", "\n", "#    logging.debug('{}: TREND WINDOW NOT PROVIDED'.format(kpi_name)) ", "\n", "", "trend_anomaly_window", "=", "None", "\n", "\n", "# Read trend threshold probability   ", "\n", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "threshold_probability", "=", "kpi", "[", "'trendThreshold'", "]", "\n", "", "assert", "0", "<=", "threshold_probability", "<=", "1", "\n", "", "except", ":", "\n", "                ", "threshold_probability", "=", "0.95", "\n", "", "logging", ".", "debug", "(", "'{}: THRESHOLD PROBABILITY NOT PROVIDED OR INCORRECT FORMAT OR OUTSIDE RANGE. DEFAULT SET'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "# Read point threshold probability", "\n", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "if", "kpi", "[", "'pointThreshold'", "]", "==", "1.0", ":", "\n", "                        ", "confidence_band", "=", "'1-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "2.0", ":", "\n", "                        ", "confidence_band", "=", "'2-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "2.5", ":", "\n", "                        ", "confidence_band", "=", "'2.5-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "3.0", ":", "\n", "                        ", "confidence_band", "=", "'3-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "3.5", ":", "\n", "                        ", "confidence_band", "=", "'3.5-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "4.0", ":", "\n", "                        ", "confidence_band", "=", "'4-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "4.5", ":", "\n", "                        ", "confidence_band", "=", "'4.5-sigma'", "\n", "", "", "assert", "kpi", "[", "'pointThreshold'", "]", "in", "[", "1", ",", "2", ",", "2.5", ",", "3", ",", "3.5", ",", "4", ",", "4.5", "]", "\n", "", "except", ":", "\n", "                ", "confidence_band", "=", "'3-sigma'", "\n", "logging", ".", "debug", "(", "'{}: THRESHOLD NOT PROVIDED. DEFAULT SET'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "# Read trend prior probability    ", "\n", "", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "trendPrior", "=", "kpi", "[", "'trendPrior'", "]", "\n", "", "", "except", ":", "\n", "                ", "trendPrior", "=", "0.5", "\n", "logging", ".", "debug", "(", "'{}: TREND PRIOR NOT PROVIDED. DEFAULT SET'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "# trend likelihood values", "\n", "", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "likelihoodHashmap", "=", "json", ".", "loads", "(", "base64", ".", "b64decode", "(", "kpi", "[", "'trendADLikelihood'", "]", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "", "", "except", ":", "\n", "                ", "likelihoodHashmap", "=", "{", "}", "\n", "", "logging", ".", "debug", "(", "'{}: TREND LIKELIHOOD VALUES RECEIVED {}'", ".", "format", "(", "kpi_name", ",", "likelihoodHashmap", ")", ")", "\n", "\n", "try", ":", "\n", "\n", "                ", "type_of_anomaly", "=", "data", "[", "'type_of_anomaly'", "]", "\n", "logging", ".", "debug", "(", "'{}: TYPE OF ANOMALY PROVIDED: {}'", ".", "format", "(", "kpi_name", ",", "type_of_anomaly", ")", ")", "\n", "\n", "", "except", ":", "\n", "\n", "                ", "type_of_anomaly", "=", "None", "\n", "logging", ".", "debug", "(", "'{}: TYPE OF ANOMALY NOT PROVIDED. DEFAULT (POINT AND TREND) SET'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "\n", "", "logging", ".", "debug", "(", "'{}: KPI name is {}'", ".", "format", "(", "kpi_name", ",", "kpi_name", ")", ")", "\n", "logging", ".", "debug", "(", "'{}: data is {}'", ".", "format", "(", "kpi_name", ",", "data", ")", ")", "\n", "\n", "# Reading a JSON from file", "\n", "if", "type_of_anomaly", "==", "'TREND'", ":", "\n", "                ", "model_json", "=", "None", "\n", "", "else", ":", "\n", "                ", "model_arg", "=", "base64", ".", "b64decode", "(", "model_json", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "model_raw", "=", "model_arg", ".", "replace", "(", "'\\''", ",", "' '", ")", "\n", "model_json", "=", "json", ".", "loads", "(", "model_raw", ")", "\n", "\n", "", "logging", ".", "debug", "(", "'{}: model_json is {}'", ".", "format", "(", "kpi_name", ",", "model_json", ")", ")", "\n", "\n", "# KPI values", "\n", "df_complete_data", "=", "pd", ".", "DataFrame", "(", "json_to_list", "(", "data", ")", ",", "columns", "=", "[", "'Date'", ",", "'KPI'", "]", ")", "\n", "df_complete_data", ".", "sort_values", "(", "by", "=", "'Date'", ",", "inplace", "=", "True", ")", "\n", "\n", "# labels", "\n", "df_label_data", "=", "pd", ".", "DataFrame", "(", "labels_from_json", "(", "data", ")", ",", "columns", "=", "[", "'Date'", ",", "'Labels'", "]", ")", "\n", "df_label_data", ".", "sort_values", "(", "by", "=", "'Date'", ",", "inplace", "=", "True", ")", "\n", "\n", "# dataset defined by user", "\n", "user_defined", "=", "bool", "(", "data", "[", "'kpiList'", "]", "[", "0", "]", "[", "'userOverride'", "]", ")", "\n", "\n", "", "elif", "operation_mode", "==", "'executor'", ":", "\n", "\n", "            ", "data_arg", "=", "base64", ".", "b64decode", "(", "data_source", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "data", "=", "json", ".", "loads", "(", "data_arg", ".", "replace", "(", "'#'", ",", "' '", ")", ".", "replace", "(", "'\\''", ",", "' '", ")", ")", "\n", "\n", "# Read model name", "\n", "model_name", "=", "data", "[", "'modelName'", "]", "\n", "\n", "# Read KPI name", "\n", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                ", "kpi_name", "=", "kpi", "[", "'kpiName'", "]", "\n", "\n", "# Read App name    ", "\n", "", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "app_name", "=", "kpi", "[", "'appName'", "]", "\n", "", "", "except", ":", "\n", "                ", "app_name", "=", "None", "\n", "logging", ".", "debug", "(", "'{}: APP NAME NOT PROVIDED'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "# Read data frequency provided    ", "\n", "", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "data_frequency", "=", "kpi", "[", "'kpiFreq'", "]", "\n", "", "", "except", ":", "\n", "                ", "data_frequency", "=", "None", "\n", "logging", ".", "debug", "(", "'{}: DATA FREQUENCY NOT PROVIDED'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "\n", "\n", "# Read trend window    ", "\n", "#try:", "\n", "#    for kpi in data['kpiList']:", "\n", "#        trend_anomaly_window=kpi['trendWindow']      ", "\n", "#except:", "\n", "#    trend_anomaly_window=None", "\n", "#    logging.debug('{}: TREND WINDOW NOT PROVIDED'.format(kpi_name)) ", "\n", "", "trend_anomaly_window", "=", "None", "# default will be determined later", "\n", "\n", "# Read trend threshold probability   ", "\n", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "threshold_probability", "=", "kpi", "[", "'trendThreshold'", "]", "\n", "", "assert", "0", "<=", "threshold_probability", "<=", "1", "\n", "", "except", ":", "\n", "                ", "threshold_probability", "=", "0.95", "\n", "", "logging", ".", "debug", "(", "'{}: THRESHOLD PROBABILITY NOT PROVIDED OR INCORRECT FORMAT OR OUTSIDE RANGE. DEFAULT SET'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "# Read point threshold probability", "\n", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "if", "kpi", "[", "'pointThreshold'", "]", "==", "1.0", ":", "\n", "                        ", "confidence_band", "=", "'1-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "2.0", ":", "\n", "                        ", "confidence_band", "=", "'2-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "2.5", ":", "\n", "                        ", "confidence_band", "=", "'2.5-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "3.0", ":", "\n", "                        ", "confidence_band", "=", "'3-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "3.5", ":", "\n", "                        ", "confidence_band", "=", "'3.5-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "4.0", ":", "\n", "                        ", "confidence_band", "=", "'4-sigma'", "\n", "", "elif", "kpi", "[", "'pointThreshold'", "]", "==", "4.5", ":", "\n", "                        ", "confidence_band", "=", "'4.5-sigma'", "\n", "", "", "assert", "kpi", "[", "'pointThreshold'", "]", "in", "[", "1", ",", "2", ",", "2.5", ",", "3", ",", "3.5", ",", "4", ",", "4.5", "]", "\n", "", "except", ":", "\n", "                ", "confidence_band", "=", "'3-sigma'", "\n", "logging", ".", "debug", "(", "'{}: THRESHOLD NOT PROVIDED. DEFAULT SET'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "# Read trend prior probability    ", "\n", "", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "trendPrior", "=", "kpi", "[", "'trendPrior'", "]", "\n", "", "", "except", ":", "\n", "                ", "trendPrior", "=", "0.5", "\n", "logging", ".", "debug", "(", "'{}: TREND PRIOR NOT PROVIDED. DEFAULT SET'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "# trend likelihood values", "\n", "", "try", ":", "\n", "                ", "for", "kpi", "in", "data", "[", "'kpiList'", "]", ":", "\n", "                    ", "likelihoodHashmap", "=", "json", ".", "loads", "(", "base64", ".", "b64decode", "(", "kpi", "[", "'trendADLikelihood'", "]", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "", "", "except", ":", "\n", "                ", "likelihoodHashmap", "=", "{", "}", "\n", "", "logging", ".", "debug", "(", "'{}: TREND LIKELIHOOD VALUES RECEIVED {}'", ".", "format", "(", "kpi_name", ",", "likelihoodHashmap", ")", ")", "\n", "\n", "# Read type of anomaly    ", "\n", "try", ":", "\n", "                ", "type_of_anomaly", "=", "data", "[", "'type_of_anomaly'", "]", "\n", "logging", ".", "debug", "(", "'{}: TYPE OF ANOMALY PROVIDED: {}'", ".", "format", "(", "kpi_name", ",", "type_of_anomaly", ")", ")", "\n", "\n", "", "except", ":", "\n", "                ", "type_of_anomaly", "=", "None", "\n", "logging", ".", "debug", "(", "'{}: TYPE OF ANOMALY NOT PROVIDED. DEFAULT (POINT AND TREND) SET'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "\n", "", "logging", ".", "debug", "(", "'{}: KPI name is {}'", ".", "format", "(", "kpi_name", ",", "kpi_name", ")", ")", "\n", "logging", ".", "debug", "(", "'{}: data is {}'", ".", "format", "(", "kpi_name", ",", "data", ")", ")", "\n", "\n", "time_series_file_name", "=", "kpi_name", "\n", "\n", "# KPI values", "\n", "df_complete_data", "=", "pd", ".", "DataFrame", "(", "json_to_list", "(", "data", ")", ",", "columns", "=", "[", "'Date'", ",", "'KPI'", "]", ")", "\n", "df_complete_data", ".", "sort_values", "(", "by", "=", "'Date'", ",", "inplace", "=", "True", ")", "\n", "\n", "# labels", "\n", "df_label_data", "=", "pd", ".", "DataFrame", "(", "labels_from_json", "(", "data", ")", ",", "columns", "=", "[", "'Date'", ",", "'Labels'", "]", ")", "\n", "df_label_data", ".", "sort_values", "(", "by", "=", "'Date'", ",", "inplace", "=", "True", ")", "\n", "\n", "\n", "# dataset defined by user", "\n", "user_defined", "=", "bool", "(", "data", "[", "'kpiList'", "]", "[", "0", "]", "[", "'userOverride'", "]", ")", "\n", "\n", "# input : time series data file", "\n", "# output : forecast value for today", "\n", "# Reading a JSON from file", "\n", "if", "type_of_anomaly", "==", "'TREND'", ":", "\n", "                ", "model_json", "=", "None", "\n", "", "else", ":", "\n", "                ", "model_arg", "=", "base64", ".", "b64decode", "(", "model_json", ")", ".", "deocde", "(", "'utf-8'", ")", "\n", "model_raw", "=", "model_arg", ".", "replace", "(", "'\\''", ",", "' '", ")", "\n", "model_json", "=", "json", ".", "loads", "(", "model_raw", ")", "\n", "\n", "", "logging", ".", "debug", "(", "'{}: model_json is {}'", ".", "format", "(", "kpi_name", ",", "model_json", ")", ")", "\n", "\n", "", "elif", "operation_mode", "==", "'validation'", ":", "\n", "\n", "# This is the mode where validation is performed on passed data file", "\n", "\n", "            ", "logging", ".", "debug", "(", "'KPI name is {}'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "df_complete_data", "=", "data_source", ".", "copy", "(", ")", "\n", "df_complete_data", "[", "0", "]", "=", "pd", ".", "to_datetime", "(", "df_complete_data", "[", "0", "]", ")", "\n", "df_complete_data", ".", "set_index", "(", "0", ",", "inplace", "=", "True", ")", "\n", "df_complete_data", "=", "df_complete_data", ".", "loc", "[", ":", "alertingDate", "]", "\n", "df_complete_data", ".", "reset_index", "(", "inplace", "=", "True", ")", "\n", "df_complete_data", ".", "sort_values", "(", "by", "=", "[", "0", "]", ",", "inplace", "=", "True", ")", "\n", "\n", "\n", "\n", "df_label_data", "=", "None", "\n", "model_name", "=", "None", "\n", "kpi_name", "=", "kpi_name", "\n", "app_name", "=", "model_json", "\n", "trend_anomaly_window", "=", "None", "\n", "threshold_probability", "=", "0.95", "\n", "trendPrior", "=", "0.5", "\n", "type_of_anomaly", "=", "None", "\n", "model_json", "=", "None", "\n", "user_defined", "=", "None", "\n", "misc_values", "=", "{", "}", "\n", "data_frequency", "=", "None", "\n", "likelihoodHashmap", "=", "{", "}", "\n", "confidence_band", "=", "'4-sigma'", "\n", "\n", "logging", ".", "debug", "(", "'{}: DATA READ FROM FILE'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "\n", "", "else", ":", "\n", "\n", "# This is the mode where test is performed on passed data file", "\n", "\n", "            ", "logging", ".", "debug", "(", "'KPI name is {}'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "df_complete_data", "=", "pd", ".", "read_csv", "(", "data_source", ",", "header", "=", "None", ")", "\n", "df_complete_data", ".", "sort_values", "(", "by", "=", "[", "0", "]", ",", "inplace", "=", "True", ")", "\n", "\n", "df_label_data", "=", "None", "\n", "model_name", "=", "None", "\n", "kpi_name", "=", "kpi_name", "\n", "app_name", "=", "model_json", "\n", "trend_anomaly_window", "=", "None", "\n", "threshold_probability", "=", "0.95", "\n", "trendPrior", "=", "0.5", "\n", "type_of_anomaly", "=", "None", "\n", "model_json", "=", "None", "\n", "user_defined", "=", "None", "\n", "misc_values", "=", "{", "}", "\n", "data_frequency", "=", "None", "\n", "likelihoodHashmap", "=", "{", "}", "\n", "confidence_band", "=", "'3-sigma'", "\n", "\n", "logging", ".", "debug", "(", "'{}: DATA READ FROM FILE'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "# iReporter validation", "\n", "# test and validation modes called with connection to database    ", "\n", "        ", "logging", ".", "debug", "(", "'KPI name is {}'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "df_complete_data", "=", "data_extractor", "(", "model_json", ",", "kpi_name", ",", "alertingDate", ")", ".", "get_data", "(", "model_type", ")", "\n", "\n", "print", "(", "df_complete_data", ".", "head", "(", ")", ")", "\n", "\n", "df_complete_data", "=", "df_complete_data", ".", "loc", "[", ":", ",", "df_complete_data", ".", "columns", "[", "[", "0", ",", "3", "]", "]", "]", "\n", "df_complete_data", ".", "sort_values", "(", "by", "=", "[", "0", "]", ",", "inplace", "=", "True", ")", "\n", "\n", "df_label_data", "=", "None", "\n", "model_name", "=", "None", "\n", "kpi_name", "=", "kpi_name", "\n", "app_name", "=", "model_json", "\n", "trend_anomaly_window", "=", "None", "\n", "threshold_probability", "=", "0.95", "\n", "trendPrior", "=", "0.5", "\n", "type_of_anomaly", "=", "None", "\n", "model_json", "=", "None", "\n", "user_defined", "=", "None", "\n", "misc_values", "=", "{", "}", "\n", "data_frequency", "=", "None", "\n", "likelihoodHashmap", "=", "{", "}", "\n", "confidence_band", "=", "'3-sigma'", "\n", "\n", "logging", ".", "debug", "(", "'{}: DATA SUCCESSFULLY READ FROM DATABASE'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "", "return", "df_complete_data", ",", "df_label_data", ",", "likelihoodHashmap", ",", "model_name", ",", "kpi_name", ",", "app_name", ",", "model_json", ",", "user_defined", ",", "misc_values", ",", "type_of_anomaly", ",", "trend_anomaly_window", ",", "confidence_band", ",", "threshold_probability", ",", "trendPrior", ",", "data_frequency", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_extractor_nonProd.adhoc_json_to_list": [[534, 542], ["my_list.append", "my_list.append"], "function", ["None"], ["", "def", "adhoc_json_to_list", "(", "data", ")", ":", "\n", "    ", "my_list", "=", "[", "]", "\n", "for", "payload", "in", "data", "[", "'timeseriesdata'", "]", ":", "\n", "        ", "try", ":", "\n", "            ", "my_list", ".", "append", "(", "(", "payload", "[", "'timestamp'", "]", ",", "payload", "[", "'value'", "]", ")", ")", "\n", "", "except", ":", "\n", "            ", "my_list", ".", "append", "(", "(", "payload", "[", "'timestamp'", "]", ",", "None", ")", ")", "\n", "", "", "return", "my_list", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_extractor_nonProd.json_to_list": [[544, 550], ["my_list.append"], "function", ["None"], ["", "def", "json_to_list", "(", "data", ")", ":", "\n", "    ", "my_list", "=", "[", "]", "\n", "for", "kpiName", "in", "data", "[", "'kpiList'", "]", ":", "\n", "        ", "for", "payload", "in", "kpiName", "[", "'valuePayload'", "]", ":", "\n", "            ", "my_list", ".", "append", "(", "(", "payload", "[", "'date'", "]", ",", "payload", "[", "'value'", "]", ")", ")", "\n", "", "", "return", "my_list", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_extractor_nonProd.labels_from_json": [[551, 557], ["my_list.append"], "function", ["None"], ["", "def", "labels_from_json", "(", "data", ")", ":", "\n", "    ", "my_list", "=", "[", "]", "\n", "for", "kpiName", "in", "data", "[", "'kpiList'", "]", ":", "\n", "        ", "for", "payload", "in", "kpiName", "[", "'labelPayload'", "]", ":", "\n", "            ", "my_list", ".", "append", "(", "(", "payload", "[", "'date'", "]", ",", "payload", "[", "'value'", "]", ")", ")", "\n", "", "", "return", "my_list", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.production_data_frequency": [[14, 120], ["int", "int", "int", "int", "int", "int", "len", "int", "numpy.floor", "numpy.floor", "numpy.floor", "int", "int", "int", "int", "int", "int", "int", "int", "len", "int", "numpy.floor", "numpy.floor", "int", "len", "int", "numpy.floor", "numpy.floor", "int", "int", "int", "int", "int", "int", "df_complete_data.shift.shift", "logging.debug", "len", "numpy.floor", "len", "numpy.floor", "len", "numpy.floor", "numpy.floor", "numpy.floor", "int", "int", "int", "int", "int", "int", "int", "len", "numpy.floor", "numpy.floor", "int", "len", "int", "numpy.floor", "numpy.floor", "int", "int", "len", "numpy.floor", "len", "numpy.floor", "len", "numpy.floor"], "function", ["None"], ["def", "production_data_frequency", "(", "df_complete_data", ",", "data_frequency", ",", "training_window", ",", "operation_mode", ",", "kpi_name", ")", ":", "\n", "\n", "# Determine the data frequency", "\n", "\n", "    ", "if", "data_frequency", "==", "'MIN'", ":", "\n", "\n", "        ", "data_frequency", "=", "'minutely'", "\n", "cycle_period", "=", "60", "\n", "\n", "\n", "if", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "30", "+", "int", "(", "1440.0", "/", "128", ")", "+", "int", "(", "1440.0", "*", "7.0", "/", "128", ")", "+", "10", ")", ":", "#(hourly,daily,weekly)", "\n", "\n", "            ", "seasonal_periods", "=", "[", "60.0", ",", "1440.0", ",", "1440.0", "*", "7", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "60.0", "/", "4", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "1440.0", "/", "128", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "1440.0", "*", "7.0", "/", "128", ")", ")", "]", "\n", "\n", "", "elif", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "30", "+", "int", "(", "1440.0", "/", "128", ")", "+", "10", ")", ":", "\n", "\n", "            ", "seasonal_periods", "=", "[", "60.0", ",", "1440.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "60.0", "/", "4", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "1440.0", "/", "128", ")", ")", "]", "\n", "\n", "", "elif", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "30", "+", "10", ")", ":", "\n", "\n", "            ", "seasonal_periods", "=", "[", "60.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "60.0", "/", "4", ")", ")", "]", "\n", "\n", "", "else", ":", "\n", "            ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "data_frequency", "==", "'H'", ":", "\n", "        ", "data_frequency", "=", "'hourly'", "\n", "cycle_period", "=", "24", "\n", "\n", "if", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "24", "+", "int", "(", "168.0", "/", "32", ")", "+", "10", ")", ":", "\n", "            ", "seasonal_periods", "=", "[", "24.0", ",", "168.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "24.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "168.0", "/", "32", ")", ")", "]", "\n", "\n", "", "elif", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "24", "+", "10", ")", ":", "\n", "            ", "seasonal_periods", "=", "[", "24.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "24.0", "/", "2", ")", ")", "]", "\n", "\n", "", "else", ":", "\n", "            ", "sesaonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "data_frequency", "==", "'D'", ":", "\n", "        ", "data_frequency", "=", "'daily'", "\n", "cycle_period", "=", "7", "\n", "\n", "\n", "if", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "7", "+", "31.0", "+", "366.0", "+", "10", ")", ":", "# weekly, monthly, yearly seasonality", "\n", "            ", "seasonal_periods", "=", "[", "7.0", ",", "30.5", ",", "365.5", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "7.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "30.5", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "365.5", "/", "2", ")", ")", "]", "\n", "\n", "", "elif", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "7", "+", "31", "+", "10", ")", ":", "# weekly, monthly seasonality", "\n", "            ", "seasonal_periods", "=", "[", "7.0", ",", "30.5", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "7.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "30.5", "/", "2", ")", ")", "]", "\n", "\n", "", "elif", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "7", "+", "10", ")", ":", "# weekly seasonality", "\n", "            ", "seasonal_periods", "=", "[", "7.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "7.0", "/", "2", ")", ")", "]", "\n", "\n", "", "else", ":", "# no seasonality", "\n", "            ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "data_frequency", "==", "'W'", ":", "\n", "        ", "data_frequency", "=", "'weekly'", "\n", "cycle_period", "=", "4", "\n", "\n", "if", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "4", "+", "int", "(", "365.5", "/", "7", ")", "+", "10", ")", ":", "\n", "            ", "seasonal_periods", "=", "[", "4.0", ",", "365.5", "/", "7", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "4.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "365.5", "/", "7", "/", "8", ")", ")", "]", "\n", "\n", "", "elif", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "4", "+", "10", ")", ":", "\n", "            ", "seasonal_periods", "=", "[", "4.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "4.0", "/", "2", ")", ")", "]", "\n", "\n", "", "else", ":", "\n", "            ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "data_frequency", "==", "'M'", ":", "\n", "        ", "data_frequency", "=", "'monthly'", "\n", "# Transforming date to first day of month", "\n", "df_complete_data", "=", "df_complete_data", ".", "shift", "(", "-", "1", ",", "freq", "=", "'MS'", ")", "\n", "cycle_period", "=", "12", "\n", "\n", "if", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "12", "+", "10", ")", ":", "\n", "            ", "seasonal_periods", "=", "[", "12.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "12.0", "/", "2", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "else", ":", "\n", "\n", "        ", "logging", ".", "debug", "(", "'{}: FAILED DATA FREQUENCY DETERMINATION. PASSED DATA FREQUENCY NOT AMONG W,H,D,M,MIN'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "# Setting null values    ", "\n", "data_frequency", "=", "None", "\n", "cycle_period", "=", "0", "\n", "seasonal_periods", "=", "None", "\n", "harmonics", "=", "None", "\n", "\n", "", "return", "df_complete_data", ",", "data_frequency", ",", "cycle_period", ",", "seasonal_periods", ",", "harmonics", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.data_frequency": [[122, 414], ["isinstance", "int", "len", "df_complete_data.shift.tshift", "int", "int", "int", "int", "int", "df_complete_data.shift.tshift", "int", "int", "len", "len", "len", "int", "numpy.floor", "numpy.floor", "numpy.floor", "int", "int", "int", "df_complete_data.shift.tshift", "int", "int", "int", "int", "int", "int", "numpy.floor", "numpy.floor", "int", "df_complete_data.shift.tshift", "int", "int", "len", "len", "int", "len", "int", "numpy.floor", "numpy.floor", "int", "len", "int", "numpy.floor", "numpy.floor", "numpy.floor", "int", "int", "int", "df_complete_data.shift.tshift", "int", "int", "int", "int", "numpy.floor", "int", "numpy.floor", "numpy.floor", "int", "df_complete_data.shift.tshift", "int", "int", "len", "len", "len", "numpy.floor", "int", "len", "int", "numpy.floor", "numpy.floor", "int", "len", "int", "numpy.floor", "numpy.floor", "int", "df_complete_data.shift.tshift", "int", "int", "int", "int", "int", "df_complete_data.shift.shift", "numpy.floor", "int", "numpy.floor", "numpy.floor", "int", "df_complete_data.shift.tshift", "int", "int", "int", "len", "len", "df_complete_data.shift.shift", "len", "numpy.floor", "len", "numpy.floor", "len", "numpy.floor", "numpy.floor", "numpy.floor", "int", "int", "int", "df_complete_data.shift.tshift", "int", "int", "int", "int", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "int", "int", "len", "df_complete_data.shift.tshift", "int", "int", "len", "pandas.tseries.offsets.MonthBegin", "pandas.tseries.offsets.MonthBegin", "pandas.tseries.offsets.MonthBegin", "len", "len", "numpy.floor", "numpy.floor", "int", "len", "int", "numpy.floor", "numpy.floor", "int", "df_complete_data.shift.tshift", "int", "int", "logging.debug", "logging.debug", "numpy.floor", "numpy.floor", "int", "int", "numpy.floor", "numpy.floor", "int", "df_complete_data.shift.tshift", "int", "len", "logging.debug", "logging.debug", "len", "numpy.floor", "len", "numpy.floor", "len", "numpy.floor", "df_complete_data.shift.tshift", "int", "numpy.floor", "numpy.floor", "numpy.floor", "df_complete_data.shift.tshift", "int", "len", "numpy.floor", "numpy.floor"], "function", ["None"], ["", "def", "data_frequency", "(", "df_complete_data", ",", "data_frequency", ",", "training_window", ",", "test_window", ",", "operation_mode", ",", "kpi_name", ")", ":", "\n", "\n", "# Determine the data frequency", "\n", "\n", "    ", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "\n", "\n", "# TRAINING WINDOW IN TERMS OF FRACTION OF THE DATA TIME SPANS", "\n", "\n", "        ", "if", "df_complete_data", ".", "index", "[", "1", "]", "==", "df_complete_data", ".", "tshift", "(", "1", ",", "freq", "=", "'T'", ")", ".", "index", "[", "0", "]", ":", "\n", "\n", "            ", "data_frequency", "=", "'minutely'", "\n", "cycle_period", "=", "60", "\n", "\n", "# +10 is for all other parameters besides seasonality", "\n", "if", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "30", "+", "int", "(", "1440.0", "/", "128", ")", "+", "int", "(", "1440.0", "*", "7.0", "/", "128", ")", "+", "10", ")", ":", "#(hourly,daily,weekly)", "\n", "\n", "                ", "seasonal_periods", "=", "[", "60.0", ",", "1440.0", ",", "1440.0", "*", "7", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "60.0", "/", "4", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "1440.0", "/", "128", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "1440.0", "*", "7.0", "/", "128", ")", ")", "]", "\n", "\n", "", "elif", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "30", "+", "int", "(", "1440.0", "/", "128", ")", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "60.0", ",", "1440.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "60.0", "/", "4", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "1440.0", "/", "128", ")", ")", "]", "\n", "\n", "", "elif", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "30", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "60.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "60.0", "/", "4", ")", ")", "]", "\n", "\n", "", "else", ":", "\n", "                ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "df_complete_data", ".", "index", "[", "1", "]", "==", "df_complete_data", ".", "tshift", "(", "1", ",", "freq", "=", "'5T'", ")", ".", "index", "[", "0", "]", ":", "\n", "\n", "            ", "data_frequency", "=", "'5minutely'", "\n", "cycle_period", "=", "12", "\n", "\n", "if", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "12", "+", "int", "(", "288.0", "/", "24", ")", "+", "int", "(", "288.0", "*", "7.0", "/", "24", ")", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "12.0", ",", "288.0", ",", "288.0", "*", "7", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "12.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "288.0", "/", "24", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "288.0", "*", "7.0", "/", "24", ")", ")", "]", "\n", "\n", "", "elif", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "12", "+", "int", "(", "288.0", "/", "24", ")", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "12.0", ",", "288.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "12.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "288.0", "/", "24", ")", ")", "]", "\n", "\n", "", "elif", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "12", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "12.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "12.0", "/", "2", ")", ")", "]", "\n", "\n", "", "else", ":", "\n", "                ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "df_complete_data", ".", "index", "[", "1", "]", "==", "df_complete_data", ".", "tshift", "(", "1", ",", "freq", "=", "'H'", ")", ".", "index", "[", "0", "]", ":", "\n", "            ", "data_frequency", "=", "'hourly'", "\n", "cycle_period", "=", "24", "\n", "\n", "if", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "24", "+", "int", "(", "168.0", "/", "32", ")", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "24.0", ",", "168.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "24.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "168.0", "/", "32", ")", ")", "]", "\n", "\n", "", "elif", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "24", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "24.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "24.0", "/", "2", ")", ")", "]", "\n", "\n", "", "else", ":", "\n", "                ", "sesaonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "\n", "", "", "elif", "df_complete_data", ".", "index", "[", "1", "]", "==", "df_complete_data", ".", "tshift", "(", "1", ",", "freq", "=", "'D'", ")", ".", "index", "[", "0", "]", ":", "\n", "            ", "data_frequency", "=", "'daily'", "\n", "cycle_period", "=", "7", "\n", "\n", "# +10 is for all other parameters except the seasonality parameters ", "\n", "if", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "7", "+", "31", "+", "366.0", "+", "10", ")", ":", "# weekly, monthly, yearly seasonality", "\n", "                ", "seasonal_periods", "=", "[", "7.0", ",", "30.5", ",", "365.5", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "7.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "30.5", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "365.5", "/", "2", ")", ")", "]", "\n", "\n", "", "elif", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "7", "+", "31", "+", "10", ")", ":", "# weekly, monthly seasonality", "\n", "                ", "seasonal_periods", "=", "[", "7.0", ",", "30.5", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "7.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "30.5", "/", "2", ")", ")", "]", "\n", "\n", "", "elif", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "7", "+", "10", ")", ":", "# weekly seasonality", "\n", "                ", "seasonal_periods", "=", "[", "7.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "7.0", "/", "2", ")", ")", "]", "\n", "\n", "", "else", ":", "# no seasonality", "\n", "                ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "df_complete_data", ".", "index", "[", "1", "]", "==", "df_complete_data", ".", "tshift", "(", "1", ",", "freq", "=", "'7D'", ")", ".", "index", "[", "0", "]", ":", "\n", "            ", "data_frequency", "=", "'weekly'", "\n", "cycle_period", "=", "4", "\n", "\n", "if", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "4", "+", "int", "(", "365.5", "/", "7", ")", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "4.0", ",", "365.5", "/", "7", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "4.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "365.5", "/", "7", "/", "2", ")", ")", "]", "\n", "\n", "", "elif", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "4", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "4.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "4.0", "/", "2", ")", ")", "]", "\n", "\n", "", "else", ":", "\n", "                ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "df_complete_data", ".", "index", "[", "1", "]", "==", "df_complete_data", ".", "tshift", "(", "1", ",", "freq", "=", "'M'", ")", ".", "index", "[", "0", "]", ":", "\n", "            ", "data_frequency", "=", "'monthly'", "\n", "# Transforming date to first day of month", "\n", "df_complete_data", "=", "df_complete_data", ".", "shift", "(", "-", "1", ",", "freq", "=", "'MS'", ")", "\n", "cycle_period", "=", "12", "\n", "\n", "if", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "12", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "12.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "12.0", "/", "2", ")", ")", "]", "\n", "", "else", ":", "\n", "                ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "df_complete_data", ".", "index", "[", "1", "]", "==", "df_complete_data", ".", "tshift", "(", "1", ",", "freq", "=", "'MS'", ")", ".", "index", "[", "0", "]", ":", "\n", "            ", "data_frequency", "=", "'monthly'", "\n", "cycle_period", "=", "12", "\n", "\n", "if", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", ">", "(", "12", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "12.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "12.0", "/", "2", ")", ")", "]", "\n", "", "else", ":", "\n", "                ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: FAILED DATA FREQUENCY DETERMINATION. FIRST TWO TIMESTAMPS NOT AT AN ALLOWED INTERVAL.'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'FAILED DATA FREQUENCY DETERMINATION. FIRST TWO TIMESTAMPS NOT AT AN ALLOWED INTERVAL.'", ")", "\n", "\n", "# Setting null values    ", "\n", "", "data_frequency", "=", "None", "\n", "cycle_period", "=", "0", "\n", "seasonal_periods", "=", "None", "\n", "harmonics", "=", "None", "\n", "\n", "", "", "else", ":", "\n", "\n", "# TRAINING WINDOW IN TERMS oF TIME STAMPS", "\n", "\n", "        ", "if", "df_complete_data", ".", "index", "[", "1", "]", "==", "df_complete_data", ".", "tshift", "(", "1", ",", "freq", "=", "'T'", ")", ".", "index", "[", "0", "]", ":", "\n", "\n", "            ", "data_frequency", "=", "'minutely'", "\n", "cycle_period", "=", "60", "\n", "'''\n            if len(df_complete_data.loc[training_window[0]:training_window[1]])>(30+int(1440.0/128)+int(1440.0*7.0/128)+10):  #(hourly,daily,weekly)\n            \n                seasonal_periods=[60.0,1440.0,1440.0*7]\n                harmonics=[int(np.floor(60.0/4)),int(np.floor(1440.0/128)),int(np.floor(1440.0*7.0/128))] \n            \n            el\n            '''", "\n", "if", "len", "(", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", ">", "(", "30", "+", "int", "(", "1440.0", "/", "128", ")", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "60.0", ",", "1440.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "60.0", "/", "4", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "1440.0", "/", "128", ")", ")", "]", "\n", "\n", "", "elif", "len", "(", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", ">", "(", "30", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "60.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "60.0", "/", "4", ")", ")", "]", "\n", "\n", "", "else", ":", "\n", "                ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "df_complete_data", ".", "index", "[", "1", "]", "==", "df_complete_data", ".", "tshift", "(", "1", ",", "freq", "=", "'5T'", ")", ".", "index", "[", "0", "]", ":", "\n", "\n", "            ", "data_frequency", "=", "'5minutely'", "\n", "cycle_period", "=", "12", "\n", "'''\n            if len(df_complete_data.loc[training_window[0]:training_window[1]])>(12+int(288.0/24)+int(288.0*7.0/24)+10):   \n                seasonal_periods=[12.0,288.0,288.0*7]\n                harmonics=[int(np.floor(12.0/2)),int(np.floor(288.0/24)),int(np.floor(288.0*7.0/24))]\n            \n            el\n            '''", "\n", "if", "len", "(", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", ">", "(", "12", "+", "int", "(", "288.0", "/", "24", ")", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "12.0", ",", "288.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "12.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "288.0", "/", "24", ")", ")", "]", "\n", "\n", "", "elif", "len", "(", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", ">", "(", "12", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "12.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "12.0", "/", "2", ")", ")", "]", "\n", "\n", "", "else", ":", "\n", "                ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "df_complete_data", ".", "index", "[", "1", "]", "==", "df_complete_data", ".", "tshift", "(", "1", ",", "freq", "=", "'H'", ")", ".", "index", "[", "0", "]", ":", "\n", "            ", "data_frequency", "=", "'hourly'", "\n", "cycle_period", "=", "24", "\n", "\n", "if", "len", "(", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", ">", "(", "24", "+", "int", "(", "168.0", "/", "32", ")", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "24.0", ",", "168.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "24.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "168.0", "/", "32", ")", ")", "]", "\n", "\n", "", "elif", "len", "(", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", ">", "(", "24", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "24.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "24.0", "/", "2", ")", ")", "]", "\n", "\n", "", "else", ":", "\n", "                ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "df_complete_data", ".", "index", "[", "1", "]", "==", "df_complete_data", ".", "tshift", "(", "1", ",", "freq", "=", "'D'", ")", ".", "index", "[", "0", "]", ":", "\n", "            ", "data_frequency", "=", "'daily'", "\n", "cycle_period", "=", "7", "\n", "\n", "\n", "if", "len", "(", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", ">", "(", "7", "+", "31", "+", "366.0", "+", "10", ")", ":", "# weekly, monthly, yearly seasonality", "\n", "                ", "seasonal_periods", "=", "[", "7.0", ",", "30.5", ",", "365.5", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "7.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "30.5", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "365.5", "/", "2", ")", ")", "]", "\n", "\n", "", "elif", "len", "(", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", ">", "(", "7", "+", "31", "+", "10", ")", ":", "# weekly, monthly seasonality", "\n", "                ", "seasonal_periods", "=", "[", "7.0", ",", "30.5", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "7.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "30.5", "/", "2", ")", ")", "]", "\n", "\n", "", "elif", "len", "(", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", ">", "(", "7", "+", "10", ")", ":", "# weekly seasonality", "\n", "                ", "seasonal_periods", "=", "[", "7.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "7.0", "/", "2", ")", ")", "]", "\n", "\n", "", "else", ":", "# no seasonality", "\n", "                ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "df_complete_data", ".", "index", "[", "1", "]", "==", "df_complete_data", ".", "tshift", "(", "1", ",", "freq", "=", "'7D'", ")", ".", "index", "[", "0", "]", ":", "\n", "            ", "data_frequency", "=", "'weekly'", "\n", "cycle_period", "=", "4", "\n", "\n", "if", "len", "(", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", ">", "(", "4", "+", "int", "(", "365.5", "/", "7", ")", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "4.0", ",", "365.5", "/", "7", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "4.0", "/", "2", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "365.5", "/", "7", "/", "2", ")", ")", "]", "\n", "\n", "", "elif", "len", "(", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", ">", "(", "4", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "4.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "4.0", "/", "2", ")", ")", "]", "\n", "\n", "", "else", ":", "\n", "                ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "df_complete_data", ".", "index", "[", "1", "]", "==", "df_complete_data", ".", "tshift", "(", "1", ",", "freq", "=", "'M'", ")", ".", "index", "[", "0", "]", ":", "\n", "            ", "data_frequency", "=", "'monthly'", "\n", "\n", "# Transforming date to first day of month", "\n", "df_complete_data", "=", "df_complete_data", ".", "shift", "(", "-", "1", ",", "freq", "=", "'MS'", ")", "\n", "\n", "training_window", "[", "0", "]", "=", "training_window", "[", "0", "]", "-", "MonthBegin", "(", ")", "\n", "training_window", "[", "1", "]", "=", "training_window", "[", "1", "]", "-", "MonthBegin", "(", ")", "\n", "test_window", "=", "test_window", "-", "MonthBegin", "(", ")", "\n", "\n", "cycle_period", "=", "12", "\n", "\n", "if", "len", "(", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", ">", "(", "12", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "12.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "12.0", "/", "2", ")", ")", "]", "\n", "", "else", ":", "\n", "                ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "elif", "df_complete_data", ".", "index", "[", "1", "]", "==", "df_complete_data", ".", "tshift", "(", "1", ",", "freq", "=", "'MS'", ")", ".", "index", "[", "0", "]", ":", "\n", "            ", "data_frequency", "=", "'monthly'", "\n", "cycle_period", "=", "12", "\n", "\n", "if", "len", "(", "df_complete_data", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", ">", "(", "12", "+", "10", ")", ":", "\n", "                ", "seasonal_periods", "=", "[", "12.0", "]", "\n", "harmonics", "=", "[", "int", "(", "np", ".", "floor", "(", "12.0", "/", "2", ")", ")", "]", "\n", "", "else", ":", "\n", "                ", "seasonal_periods", "=", "[", "]", "\n", "harmonics", "=", "[", "]", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: FAILED DATA FREQUENCY DETERMINATION. FIRST TWO TIMESTAMPS NOT AT AN ALLOWED INTERVAL.'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'FAILED DATA FREQUENCY DETERMINATION. FIRST TWO TIMESTAMPS NOT AT AN ALLOWED INTERVAL.'", ")", "\n", "\n", "# Setting null values    ", "\n", "", "data_frequency", "=", "None", "\n", "cycle_period", "=", "0", "\n", "seasonal_periods", "=", "None", "\n", "harmonics", "=", "None", "\n", "\n", "\n", "", "", "return", "df_complete_data", ",", "data_frequency", ",", "training_window", ",", "test_window", ",", "cycle_period", ",", "seasonal_periods", ",", "harmonics", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.missing_timestamp_imputation": [[415, 456], ["df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.index[].weekday", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.index[].weekday", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample().mean", "print", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.index[].weekday", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.index[].weekday", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.index[].weekday", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.index[].weekday", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.index[].weekday", "df_complete_data.resample().mean.resample().mean", "df_complete_data.resample().mean.resample", "df_complete_data.resample().mean.resample"], "function", ["None"], ["", "def", "missing_timestamp_imputation", "(", "df_complete_data", ",", "data_frequency", ")", ":", "\n", "\n", "# This function checks if there is any missing timestamp and", "\n", "# imputes it with NAN; note missing data (NAN) is handled by ", "\n", "# models", "\n", "\n", "    ", "if", "data_frequency", "==", "'minutely'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'T'", ")", ".", "mean", "(", ")", "\n", "\n", "", "elif", "data_frequency", "==", "'5minutely'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'5T'", ")", ".", "mean", "(", ")", "\n", "\n", "", "elif", "data_frequency", "==", "'daily'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'D'", ")", ".", "mean", "(", ")", "\n", "\n", "", "elif", "data_frequency", "==", "'weekly'", ":", "\n", "\n", "        ", "if", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "0", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-MON'", ")", ".", "mean", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "1", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-TUE'", ")", ".", "mean", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "2", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-WED'", ")", ".", "mean", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "3", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-THU'", ")", ".", "mean", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "4", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-FRI'", ")", ".", "mean", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "5", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-SAT'", ")", ".", "mean", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "6", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-SUN'", ")", ".", "mean", "(", ")", "\n", "\n", "", "", "elif", "data_frequency", "==", "'monthly'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'MS'", ")", ".", "mean", "(", ")", "\n", "", "elif", "data_frequency", "==", "'hourly'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'H'", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Data frequency not expected\\n Continuing without timestamp imputatation\\n'", ")", "\n", "\n", "\n", "", "return", "df_complete_data", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.missing_label_imputation": [[457, 497], ["df_complete_data.resample().first.resample().first", "df_complete_data.resample().first.resample().first", "df_complete_data.resample().first.resample", "df_complete_data.resample().first.resample().first", "df_complete_data.resample().first.resample", "df_complete_data.resample().first.resample", "df_complete_data.resample().first.index[].weekday", "df_complete_data.resample().first.resample().first", "df_complete_data.resample().first.resample().first", "df_complete_data.resample().first.index[].weekday", "df_complete_data.resample().first.resample().first", "df_complete_data.resample().first.resample().first", "print", "df_complete_data.resample().first.resample", "df_complete_data.resample().first.index[].weekday", "df_complete_data.resample().first.resample().first", "df_complete_data.resample().first.resample", "df_complete_data.resample().first.resample", "df_complete_data.resample().first.index[].weekday", "df_complete_data.resample().first.resample().first", "df_complete_data.resample().first.resample", "df_complete_data.resample().first.resample", "df_complete_data.resample().first.index[].weekday", "df_complete_data.resample().first.resample().first", "df_complete_data.resample().first.resample", "df_complete_data.resample().first.index[].weekday", "df_complete_data.resample().first.resample().first", "df_complete_data.resample().first.resample", "df_complete_data.resample().first.index[].weekday", "df_complete_data.resample().first.resample().first", "df_complete_data.resample().first.resample", "df_complete_data.resample().first.resample"], "function", ["None"], ["", "def", "missing_label_imputation", "(", "df_complete_data", ",", "data_frequency", ")", ":", "\n", "\n", "# This function checks if there is any missing timestamp and", "\n", "# imputes it with its expected value, the label value is imputed with NAN;", "\n", "# note missing data (NAN) is handled by models", "\n", "\n", "    ", "if", "data_frequency", "==", "'minutely'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'T'", ")", ".", "first", "(", ")", "\n", "\n", "", "elif", "data_frequency", "==", "'5minutely'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'5T'", ")", ".", "first", "(", ")", "\n", "\n", "", "elif", "data_frequency", "==", "'daily'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'D'", ")", ".", "first", "(", ")", "\n", "\n", "", "elif", "data_frequency", "==", "'weekly'", ":", "\n", "\n", "        ", "if", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "0", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-MON'", ")", ".", "first", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "1", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-TUE'", ")", ".", "first", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "2", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-WED'", ")", ".", "first", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "3", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-THU'", ")", ".", "first", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "4", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-FRI'", ")", ".", "first", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "5", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-SAT'", ")", ".", "first", "(", ")", "\n", "", "elif", "df_complete_data", ".", "index", "[", "0", "]", ".", "weekday", "(", ")", "==", "6", ":", "\n", "            ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'W-SUN'", ")", ".", "first", "(", ")", "\n", "\n", "", "", "elif", "data_frequency", "==", "'monthly'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'MS'", ")", ".", "first", "(", ")", "\n", "", "elif", "data_frequency", "==", "'hourly'", ":", "\n", "        ", "df_complete_data", "=", "df_complete_data", ".", "resample", "(", "'H'", ")", ".", "first", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Data frequency not expected\\n Continuing without timestamp imputatation\\n'", ")", "\n", "\n", "", "return", "df_complete_data", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.get_holiday_flag": [[498, 571], ["holidays.UnitedStates", "workalendar.asia.China", "pandas.DataFrame", "chinese_holidays.append.append", "pandas.to_datetime", "chinese_holidays.append.set_index", "df_complete_data.copy", "df_complete_data.copy", "workalendar.asia.China.holidays", "pandas.DataFrame", "holidays.UnitedStates", "range", "workalendar.asia.China", "pandas.DataFrame", "chinese_holidays.append.append", "pandas.to_datetime", "chinese_holidays.append.set_index", "workalendar.asia.China.holidays", "workalendar.asia.China.holidays", "pandas.DataFrame", "pandas.date_range().isin().any", "pandas.date_range().isin().any", "len", "datetime.datetime", "workalendar.asia.China.holidays", "pandas.date_range().isin", "pandas.date_range().isin", "pandas.date_range", "pandas.date_range", "pandas.tseries.offsets.Day", "pandas.tseries.offsets.Day", "time_series_metadata.data_frequency"], "function", ["home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.data_frequency"], ["", "def", "get_holiday_flag", "(", "df_complete_data", ",", "data_frequency", ",", "holidays_and_releases", ",", "misc_values", ")", ":", "\n", "\n", "    ", "us_holiday_flag", "=", "df_complete_data", ".", "copy", "(", ")", ".", "iloc", "[", ":", ",", "0", "]", "\n", "us_holiday_flag", ".", "name", "=", "'US_holidays'", "\n", "chinese_holiday_flag", "=", "df_complete_data", ".", "copy", "(", ")", ".", "iloc", "[", ":", ",", "0", "]", "\n", "chinese_holiday_flag", ".", "name", "=", "'Chinese_holidays'", "\n", "\n", "if", "data_frequency", "==", "'daily'", "and", "holidays_and_releases", ":", "\n", "\n", "# reading us and chinese holidays", "\n", "        ", "us_holidays", "=", "holidays", ".", "UnitedStates", "(", ")", "\n", "cal", "=", "China", "(", ")", "\n", "\n", "chinese_holidays", "=", "pd", ".", "DataFrame", "(", "cal", ".", "holidays", "(", "2018", ")", ",", "columns", "=", "[", "'Date'", ",", "'Name'", "]", ")", "\n", "chinese_holidays", "=", "chinese_holidays", ".", "append", "(", "pd", ".", "DataFrame", "(", "cal", ".", "holidays", "(", "2019", ")", ",", "columns", "=", "[", "'Date'", ",", "'Name'", "]", ")", ")", "\n", "chinese_holidays", ".", "Date", "=", "pd", ".", "to_datetime", "(", "chinese_holidays", ".", "Date", ")", "\n", "chinese_holidays", ".", "set_index", "(", "'Date'", ",", "inplace", "=", "True", ")", "\n", "\n", "for", "t", "in", "df_complete_data", ".", "index", ":", "\n", "\n", "            ", "if", "t", "in", "us_holidays", ":", "\n", "# Christmas and Day after Thanksgiving are treated in a special manner", "\n", "                ", "if", "len", "(", "misc_values", ")", ">", "0", ":", "\n", "                    ", "if", "t", "!=", "misc_values", "[", "'prev_christmas'", "]", "[", "'date'", "]", "and", "t", "!=", "misc_values", "[", "'prev_DAT'", "]", "[", "'date'", "]", ":", "\n", "                        ", "us_holiday_flag", ".", "loc", "[", "t", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "us_holiday_flag", ".", "loc", "[", "t", "]", "=", "0", "\n", "", "", "else", ":", "\n", "                    ", "us_holiday_flag", ".", "loc", "[", "t", "]", "=", "1", "\n", "", "", "else", ":", "\n", "                ", "us_holiday_flag", ".", "loc", "[", "t", "]", "=", "0", "\n", "\n", "", "if", "t", "in", "chinese_holidays", ".", "index", ":", "\n", "                ", "chinese_holiday_flag", ".", "loc", "[", "t", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "chinese_holiday_flag", ".", "loc", "[", "t", "]", "=", "0", "\n", "\n", "", "", "", "elif", "data_frequency", "==", "'weekly'", "and", "holidays_and_releases", ":", "\n", "\n", "# reading us and chinese holidays", "\n", "        ", "us_holidays", "=", "holidays", ".", "UnitedStates", "(", ")", "\n", "# Adding years to the us_holidays object        ", "\n", "for", "year", "in", "range", "(", "2000", ",", "2030", ")", ":", "\n", "            ", "datetime", "(", "year", ",", "1", ",", "1", ")", "in", "us_holidays", "\n", "", "cal", "=", "China", "(", ")", "\n", "\n", "chinese_holidays", "=", "pd", ".", "DataFrame", "(", "cal", ".", "holidays", "(", "2018", ")", ",", "columns", "=", "[", "'Date'", ",", "'Name'", "]", ")", "\n", "chinese_holidays", "=", "chinese_holidays", ".", "append", "(", "pd", ".", "DataFrame", "(", "cal", ".", "holidays", "(", "2019", ")", ",", "columns", "=", "[", "'Date'", ",", "'Name'", "]", ")", ")", "\n", "chinese_holidays", ".", "Date", "=", "pd", ".", "to_datetime", "(", "chinese_holidays", ".", "Date", ")", "\n", "chinese_holidays", ".", "set_index", "(", "'Date'", ",", "inplace", "=", "True", ")", "\n", "\n", "for", "t", "in", "df_complete_data", ".", "index", ":", "\n", "\n", "# check if there was a holiday in the week, assuming date t refers to the end of the week            ", "\n", "            ", "if", "pd", ".", "date_range", "(", "t", "-", "6", "*", "Day", "(", ")", ",", "periods", "=", "7", ",", "freq", "=", "'D'", ")", ".", "isin", "(", "us_holidays", ")", ".", "any", "(", ")", ":", "\n", "                ", "us_holiday_flag", ".", "loc", "[", "t", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "us_holiday_flag", ".", "loc", "[", "t", "]", "=", "0", "\n", "\n", "", "if", "pd", ".", "date_range", "(", "t", "-", "6", "*", "Day", "(", ")", ",", "periods", "=", "7", ",", "freq", "=", "'D'", ")", ".", "isin", "(", "chinese_holidays", ".", "index", ")", ".", "any", "(", ")", ":", "\n", "                ", "chinese_holiday_flag", ".", "loc", "[", "t", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "chinese_holiday_flag", ".", "loc", "[", "t", "]", "=", "0", "\n", "\n", "\n", "", "", "", "else", ":", "\n", "\n", "        ", "us_holiday_flag", "[", ":", "]", "=", "0", "\n", "chinese_holiday_flag", "[", ":", "]", "=", "0", "\n", "\n", "\n", "", "return", "[", "us_holiday_flag", ",", "chinese_holiday_flag", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.construct_seasonal_inputs_": [[573, 637], ["time.time", "df.copy", "range", "time.time", "pandas.DataFrame", "range", "Minute", "len", "len", "range", "numpy.array", "numpy.append", "Minute", "curr_t_inputs.append", "curr_t_inputs.append", "numpy.array", "pandas.tseries.offsets.Hour", "numpy.cos", "numpy.sin", "seasonal_params_names.append", "seasonal_params_names.append", "pandas.tseries.offsets.Day", "pandas.tseries.offsets.Day", "pandas.tseries.offsets.MonthBegin"], "function", ["None"], ["", "def", "construct_seasonal_inputs_", "(", "df", ",", "seasonal_periods", ",", "harmonics", ",", "training_data_start_time", "=", "None", ",", "data_frequency", "=", "None", ")", ":", "\n", "# seasonal_periods: all seasonalities that are considered", "\n", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "df_complete_data", "=", "df", ".", "copy", "(", ")", "\n", "\n", "time_start", "=", "0", "\n", "\n", "# This is required when the prediction is required on dataset not used for training", "\n", "if", "training_data_start_time", "!=", "None", ":", "\n", "\n", "        ", "if", "data_frequency", "==", "'minutely'", ":", "\n", "                ", "offset", "=", "Minute", "(", ")", "\n", "", "elif", "data_frequency", "==", "'5minutely'", ":", "\n", "                ", "offset", "=", "Minute", "(", "5", ")", "\n", "", "elif", "data_frequency", "==", "'hourly'", ":", "\n", "                ", "offset", "=", "Hour", "(", ")", "\n", "", "elif", "data_frequency", "==", "'daily'", ":", "\n", "                ", "offset", "=", "Day", "(", ")", "\n", "", "elif", "data_frequency", "==", "'weekly'", ":", "\n", "                ", "offset", "=", "Day", "(", "7", ")", "\n", "", "elif", "data_frequency", "==", "'monthly'", ":", "\n", "                ", "offset", "=", "MonthBegin", "(", ")", "\n", "\n", "", "while", "training_data_start_time", "+", "time_start", "*", "offset", "!=", "df_complete_data", ".", "index", "[", "0", "]", ":", "\n", "            ", "time_start", "=", "time_start", "+", "1", "\n", "\n", "\n", "", "", "seasonal_params_names", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "time_start", ",", "len", "(", "df_complete_data", ")", "+", "time_start", ")", ":", "\n", "\n", "#print t", "\n", "\n", "        ", "curr_t_inputs", "=", "[", "]", "\n", "for", "n_s", "in", "range", "(", "len", "(", "seasonal_periods", ")", ")", ":", "\n", "\n", "# Keeping a higher parameter granularity for the first seasonlity period", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "harmonics", "[", "n_s", "]", "+", "1", ")", ":", "\n", "\n", "                ", "lambda_j", "=", "(", "2.0", "*", "np", ".", "pi", "*", "j", ")", "/", "(", "seasonal_periods", "[", "n_s", "]", ")", "\n", "\n", "curr_t_inputs", ".", "append", "(", "np", ".", "cos", "(", "lambda_j", "*", "t", ")", ")", "\n", "curr_t_inputs", ".", "append", "(", "np", ".", "sin", "(", "lambda_j", "*", "t", ")", ")", "\n", "\n", "if", "t", "==", "time_start", ":", "\n", "                    ", "seasonal_params_names", ".", "append", "(", "'Seasonality_{}_harmonic_{}_cos'", ".", "format", "(", "seasonal_periods", "[", "n_s", "]", ",", "j", ")", ")", "\n", "seasonal_params_names", ".", "append", "(", "'Seasonality_{}_harmonic_{}_sin'", ".", "format", "(", "seasonal_periods", "[", "n_s", "]", ",", "j", ")", ")", "\n", "\n", "#print np.cos(lambda_j*t).shape    ", "\n", "\n", "#print curr_t_inputs", "\n", "\n", "", "", "", "if", "t", "==", "time_start", ":", "\n", "            ", "seasonal_inputs", "=", "np", ".", "array", "(", "[", "curr_t_inputs", "]", ")", "\n", "", "else", ":", "\n", "            ", "seasonal_inputs", "=", "np", ".", "append", "(", "seasonal_inputs", ",", "np", ".", "array", "(", "[", "curr_t_inputs", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "#print 'Time difference',end_time-start_time", "\n", "\n", "return", "pd", ".", "DataFrame", "(", "seasonal_inputs", ",", "index", "=", "df_complete_data", ".", "index", ",", "columns", "=", "seasonal_params_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.construct_seasonal_inputs": [[639, 703], ["time.time", "df.copy", "len", "numpy.zeros", "pandas.DataFrame", "range", "numpy.matmul", "numpy.cos().ravel", "numpy.sin().ravel", "numpy.c_[].reshape", "time.time", "pandas.DataFrame", "Minute", "len", "range", "numpy.arange", "Minute", "len", "numpy.append", "seasonal_params_names.append", "seasonal_params_names.append", "numpy.cos", "numpy.sin", "pandas.tseries.offsets.Hour", "len", "pandas.tseries.offsets.Day", "numpy.arange", "pandas.tseries.offsets.Day", "numpy.arange", "pandas.tseries.offsets.MonthBegin"], "function", ["None"], ["", "def", "construct_seasonal_inputs", "(", "df", ",", "seasonal_periods", ",", "harmonics", ",", "training_data_start_time", "=", "None", ",", "data_frequency", "=", "None", ")", ":", "\n", "# seasonal_periods: all seasonalities that are considered", "\n", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "df_complete_data", "=", "df", ".", "copy", "(", ")", "\n", "\n", "time_start", "=", "0", "\n", "\n", "# This is required when the prediction is required on dataset not used for training", "\n", "if", "training_data_start_time", "!=", "None", ":", "\n", "\n", "        ", "if", "data_frequency", "==", "'minutely'", ":", "\n", "                ", "offset", "=", "Minute", "(", ")", "\n", "", "elif", "data_frequency", "==", "'5minutely'", ":", "\n", "                ", "offset", "=", "Minute", "(", "5", ")", "\n", "", "elif", "data_frequency", "==", "'hourly'", ":", "\n", "                ", "offset", "=", "Hour", "(", ")", "\n", "", "elif", "data_frequency", "==", "'daily'", ":", "\n", "                ", "offset", "=", "Day", "(", ")", "\n", "", "elif", "data_frequency", "==", "'weekly'", ":", "\n", "                ", "offset", "=", "Day", "(", "7", ")", "\n", "", "elif", "data_frequency", "==", "'monthly'", ":", "\n", "                ", "offset", "=", "MonthBegin", "(", ")", "\n", "\n", "", "while", "training_data_start_time", "+", "time_start", "*", "offset", "!=", "df_complete_data", ".", "index", "[", "0", "]", ":", "\n", "            ", "time_start", "=", "time_start", "+", "1", "\n", "\n", "\n", "", "", "seasonal_params_names", "=", "[", "]", "\n", "\n", "if", "len", "(", "seasonal_periods", ")", "==", "0", ":", "# no seasonal periods (no seasonality)", "\n", "\n", "        ", "seasonal_inputs", "=", "np", ".", "zeros", "(", "(", "len", "(", "df_complete_data", ")", ",", "0", ")", ")", "\n", "return", "pd", ".", "DataFrame", "(", "seasonal_inputs", ",", "index", "=", "df_complete_data", ".", "index", ",", "columns", "=", "seasonal_params_names", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "flag", "=", "0", "\n", "for", "n_s", "in", "range", "(", "len", "(", "seasonal_periods", ")", ")", ":", "\n", "\n", "# Keeping a higher parameter granularity for the first seasonlity period", "\n", "            ", "if", "flag", "==", "0", ":", "\n", "                ", "lambda_vector", "=", "(", "2.0", "*", "np", ".", "pi", "*", "np", ".", "arange", "(", "1", ",", "harmonics", "[", "n_s", "]", "+", "1", ")", ")", "/", "(", "seasonal_periods", "[", "n_s", "]", ")", "\n", "flag", "=", "1", "\n", "", "else", ":", "\n", "                ", "lambda_vector", "=", "np", ".", "append", "(", "lambda_vector", ",", "(", "2.0", "*", "np", ".", "pi", "*", "np", ".", "arange", "(", "1", ",", "harmonics", "[", "n_s", "]", "+", "1", ")", ")", "/", "(", "seasonal_periods", "[", "n_s", "]", ")", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "1", ",", "harmonics", "[", "n_s", "]", "+", "1", ")", ":", "\n", "                ", "seasonal_params_names", ".", "append", "(", "'Seasonality_{}_harmonic_{}_cos'", ".", "format", "(", "seasonal_periods", "[", "n_s", "]", ",", "j", ")", ")", "\n", "seasonal_params_names", ".", "append", "(", "'Seasonality_{}_harmonic_{}_sin'", ".", "format", "(", "seasonal_periods", "[", "n_s", "]", ",", "j", ")", ")", "\n", "\n", "", "", "times_column", "=", "np", ".", "arange", "(", "time_start", ",", "len", "(", "df_complete_data", ")", "+", "time_start", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "lambda_vector", "=", "lambda_vector", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "lambda_matrix", "=", "np", ".", "matmul", "(", "times_column", ",", "lambda_vector", ")", "\n", "\n", "lambda_matrix_cos", "=", "np", ".", "cos", "(", "lambda_matrix", ")", ".", "ravel", "(", ")", "\n", "lambda_matrix_sin", "=", "np", ".", "sin", "(", "lambda_matrix", ")", ".", "ravel", "(", ")", "\n", "\n", "seasonal_inputs", "=", "np", ".", "c_", "[", "lambda_matrix_cos", ",", "lambda_matrix_sin", "]", ".", "reshape", "(", "lambda_matrix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "return", "pd", ".", "DataFrame", "(", "seasonal_inputs", ",", "index", "=", "df_complete_data", ".", "index", ",", "columns", "=", "seasonal_params_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.construct_trend_inputs": [[708, 749], ["df.copy", "range", "pandas.DataFrame", "range", "Minute", "len", "curr_t_inputs.append", "numpy.array", "numpy.append", "Minute", "numpy.power", "numpy.array", "pandas.tseries.offsets.Hour", "range", "pandas.tseries.offsets.Day", "pandas.tseries.offsets.Day", "pandas.tseries.offsets.MonthBegin"], "function", ["None"], ["", "", "def", "construct_trend_inputs", "(", "df", ",", "trend_order", ",", "training_data_start_time", "=", "None", ",", "data_frequency", "=", "None", ")", ":", "\n", "# trend_order is the highest degree polynomial that are considered", "\n", "\n", "    ", "df_complete_data", "=", "df", ".", "copy", "(", ")", "\n", "\n", "time_start", "=", "0", "\n", "\n", "# This is required when the prediction is required on dataset not used for training", "\n", "if", "training_data_start_time", "!=", "None", ":", "\n", "\n", "        ", "if", "data_frequency", "==", "'minutely'", ":", "\n", "                ", "offset", "=", "Minute", "(", ")", "\n", "", "elif", "data_frequency", "==", "'5minutely'", ":", "\n", "                ", "offset", "=", "Minute", "(", "5", ")", "\n", "", "elif", "data_frequency", "==", "'hourly'", ":", "\n", "                ", "offset", "=", "Hour", "(", ")", "\n", "", "elif", "data_frequency", "==", "'daily'", ":", "\n", "                ", "offset", "=", "Day", "(", ")", "\n", "", "elif", "data_frequency", "==", "'weekly'", ":", "\n", "                ", "offset", "=", "Day", "(", "7", ")", "\n", "", "elif", "data_frequency", "==", "'monthly'", ":", "\n", "                ", "offset", "=", "MonthBegin", "(", ")", "\n", "\n", "", "while", "training_data_start_time", "+", "time_start", "*", "offset", "!=", "df_complete_data", ".", "index", "[", "0", "]", ":", "\n", "            ", "time_start", "=", "time_start", "+", "1", "\n", "\n", "", "", "for", "t", "in", "range", "(", "time_start", ",", "len", "(", "df_complete_data", ")", "+", "time_start", ")", ":", "\n", "\n", "        ", "curr_t_inputs", "=", "[", "]", "\n", "\n", "for", "degree", "in", "range", "(", "1", ",", "trend_order", "+", "1", ")", ":", "\n", "            ", "curr_t_inputs", ".", "append", "(", "np", ".", "power", "(", "t", ",", "degree", ")", ")", "\n", "\n", "\n", "", "if", "t", "==", "time_start", ":", "\n", "            ", "trend_inputs", "=", "np", ".", "array", "(", "[", "curr_t_inputs", "]", ")", "\n", "", "else", ":", "\n", "            ", "trend_inputs", "=", "np", ".", "append", "(", "trend_inputs", ",", "np", ".", "array", "(", "[", "curr_t_inputs", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "\n", "", "", "return", "pd", ".", "DataFrame", "(", "trend_inputs", ",", "index", "=", "df_complete_data", ".", "index", ",", "columns", "=", "[", "'Trend_polynomial_degree_{}'", ".", "format", "(", "i", "+", "1", ")", "for", "i", "in", "range", "(", "trend_inputs", ".", "shape", "[", "1", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.get_holidays_and_release_features": [[750, 803], ["time_series_metadata.get_holiday_flag", "pandas.DataFrame", "len", "isinstance", "pandas.concat", "pandas.concat", "pandas.concat", "pandas.concat", "pandas.concat", "pandas.concat", "int", "int", "len", "len"], "function", ["home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.get_holiday_flag"], ["", "def", "get_holidays_and_release_features", "(", "df_complete_data", ",", "data_frequency", ",", "holidays_and_releases", ",", "kpi_name", ",", "training_window", ",", "operation_mode", ",", "misc_values", ",", "training_data_start_time", "=", "None", ",", "exog_input_base_columns", "=", "None", ")", ":", "\n", "\n", "# Get holiday flags", "\n", "    ", "[", "us_holiday_flag", ",", "chinese_holiday_flag", "]", "=", "get_holiday_flag", "(", "df_complete_data", ",", "data_frequency", ",", "holidays_and_releases", ",", "misc_values", ")", "\n", "\n", "# Combining all exog inputs", "\n", "exog_input", "=", "pd", ".", "DataFrame", "(", "[", "]", ",", "index", "=", "df_complete_data", ".", "index", ")", "\n", "\n", "\n", "if", "(", "operation_mode", "!=", "'executor'", "and", "operation_mode", "!=", "'tester'", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "\n", "# US holidays (want atleast two instances of these in training data)", "\n", "            ", "if", "(", "us_holiday_flag", ".", "iloc", "[", ":", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", "]", "==", "1", ")", ".", "sum", "(", ")", ">", "1", ":", "\n", "                ", "exog_input", "=", "pd", ".", "concat", "(", "[", "exog_input", ",", "us_holiday_flag", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# Chinese holidays (want atleast two instances of these in training data)    ", "\n", "", "if", "(", "chinese_holiday_flag", ".", "iloc", "[", ":", "int", "(", "training_window", "*", "len", "(", "df_complete_data", ")", ")", "]", "==", "1", ")", ".", "sum", "(", ")", ">", "1", ":", "\n", "                ", "exog_input", "=", "pd", ".", "concat", "(", "[", "exog_input", ",", "chinese_holiday_flag", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "# US holidays (want atleast two instances of these in training data)", "\n", "            ", "if", "(", "us_holiday_flag", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", "==", "1", ")", ".", "sum", "(", ")", ">", "1", ":", "\n", "                ", "exog_input", "=", "pd", ".", "concat", "(", "[", "exog_input", ",", "us_holiday_flag", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# Chinese holidays (want atleast two instances of these in training data)    ", "\n", "", "if", "(", "chinese_holiday_flag", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", "==", "1", ")", ".", "sum", "(", ")", ">", "1", ":", "\n", "                ", "exog_input", "=", "pd", ".", "concat", "(", "[", "exog_input", ",", "chinese_holiday_flag", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "", "else", ":", "\n", "\n", "# NO CONSTRAINTS ON THE NUMBER OF INSTANCES IN EXEXUTOR MODE", "\n", "\n", "        ", "if", "exog_input_base_columns", "!=", "[", "''", "]", "and", "exog_input_base_columns", "!=", "None", ":", "\n", "# US holidays ", "\n", "            ", "exog_input", "=", "pd", ".", "concat", "(", "[", "exog_input", ",", "us_holiday_flag", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# Chinese holidays     ", "\n", "exog_input", "=", "pd", ".", "concat", "(", "[", "exog_input", ",", "chinese_holiday_flag", "]", ",", "axis", "=", "1", ")", "\n", "\n", "\n", "exog_input", "=", "exog_input", ".", "loc", "[", ":", ",", "exog_input_base_columns", "]", "\n", "\n", "\n", "# This is the number of non-trend, non-seasonal regressors", "\n", "", "", "num_spec_reg", "=", "len", "(", "exog_input", ".", "columns", ")", "\n", "\n", "\n", "return", "exog_input", ",", "num_spec_reg", ",", "us_holiday_flag", ",", "chinese_holiday_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.plot_generator.generate_plot": [[7, 439], ["matplotlib.figure", "matplotlib.rcParams.update", "matplotlib.subplots_adjust", "range", "isinstance", "tools.update_plot_annotation", "ax.append", "isinstance", "range", "pandas.tseries.offsets.Minute", "plt.figure.add_subplot", "range", "range", "df_anom[].min", "df_anom[].max", "range", "range", "range", "range", "range", "range", "range", "range", "pandas.tseries.offsets.Minute", "range", "ax[].plot_date", "ax[].plot_date", "ax[].plot_date", "ax[].plot_date", "df_anom_training.loc[].min", "df_anom_training.loc[].max", "range", "range", "min", "max", "min", "max", "df_anom_training.loc[].min", "df_anom_training.loc[].max", "range", "range", "min", "max", "min", "max", "pandas.tseries.offsets.Day", "reversed", "pd.Series.index.to_pydatetime", "pd.Series.index.to_pydatetime", "pd.Series.index.to_pydatetime", "pd.Series.index.to_pydatetime", "df_new.loc[].min", "df_new.loc[].min", "df_new.loc[].max", "df_new.loc[].max", "df_new.loc[].min", "df_new.loc[].max", "df_new.loc[].min", "df_new.loc[].min", "df_new.loc[].max", "df_new.loc[].max", "df_new.loc[].min", "df_new.loc[].max", "pandas.tseries.offsets.Hour", "range", "range", "range", "range", "ax[].plot_date", "ax[].fill_between", "ax[].plot_date", "ax[].fill_between", "ax[].plot_date", "ax[].fill_between", "ax[].plot_date", "ax[].fill_between", "pandas.tseries.offsets.Day", "pandas.tseries.offsets.MonthBegin", "len", "numpy.isnan", "reversed", "ax[].plot_date", "int", "int", "pd.Series.index.to_pydatetime", "pd.Series.index.to_pydatetime", "int", "int", "pd.Series.index.to_pydatetime", "pd.Series.index.to_pydatetime", "numpy.isnan", "ax[].text", "range", "df_anom[].index.to_pydatetime", "ax[].plot_date", "ax[].plot_date", "ax[].plot_date", "ax[].plot_date", "ax[].plot_date", "df_training_zone.index[].strftime", "len", "ax[].plot_date", "ax[].text", "reversed", "ax[].plot_date", "ax[].plot_date", "changepoint_desc.KPI_1.isnull", "len", "pandas.Series", "pandas.Series", "pandas.Series", "pandas.Series", "pandas.Series", "pandas.Series", "ax[].plot_date", "ax[].fill_between", "ax[].plot_date", "ax[].fill_between", "df_anom_training[].index.to_pydatetime", "df_anom_training[].index.to_pydatetime", "df_anom.loc[].index.to_pydatetime", "len", "len", "int", "int", "int", "int", "int", "int", "len", "len", "kpi_name.replace().replace", "len", "kpi_name.replace().replace", "df_training_zone.index.to_pydatetime", "df_training_zone.index.to_pydatetime", "df_training_zone.index.to_pydatetime", "df_training_zone.index[].strftime", "range", "df_training_zone.index.to_pydatetime", "df_training_zone.index.to_pydatetime", "pd.Series.index.to_pydatetime", "pd.Series.index.to_pydatetime", "changepoint_desc.KPI_1.isnull", "len", "pandas.Series", "pandas.Series", "pandas.Series", "pandas.Series", "pandas.Series", "pandas.Series", "ax[].plot_date", "ax[].fill_between", "ax[].plot_date", "ax[].fill_between", "len", "len", "len", "len", "len", "len", "kpi_name.replace", "kpi_name.replace", "len", "pd.Series.index.to_pydatetime", "pd.Series.index.to_pydatetime", "int", "int", "int", "int", "len", "len", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.plot_settings.update_plot_annotation"], ["def", "generate_plot", "(", "operation_mode", ",", "model_type", ",", "df_new", ",", "df_training", ",", "df_test", ",", "df_anom_training", ",", "df_anom", ",", "time_series_file_name", ",", "kpi_name", ",", "numberOfColumns", ",", "data_frequency", ",", "training_window", ",", "test_window", ",", "plottingWindow", ",", "plottingYlim", ",", "decision_point_anomaly", ",", "perform_point_anomaly", ",", "perform_trend_anomaly", ",", "count_of_anomalies_training", ",", "count_of_anomalies", ",", "display_trend_anomaly", ",", "display_all_anomalies", ",", "display_all_trend_anomalies", ",", "trend_boundaries", ",", "confidence_band", ",", "threshold", ",", "threshold_probability", ",", "onlyData", ",", "data_scale", ",", "rule_based", ",", "changepoint_desc", ",", "trend_anomaly_window", ",", "list_of_trend_anomalies", ")", ":", "\n", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "15", ",", "8", ")", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'font.size'", ":", "14", ",", "'axes.titlesize'", ":", "14", "}", ")", "\n", "\n", "plt", ".", "subplots_adjust", "(", "bottom", "=", "0.2", ")", "\n", "\n", "ax", "=", "[", "]", "\n", "\n", "######################################", "\n", "# PLOT DATA AND PREDICTIONS", "\n", "######################################", "\n", "\n", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "\n", "        ", "ax", ".", "append", "(", "fig", ".", "add_subplot", "(", "numberOfColumns", "-", "1", ",", "1", ",", "c", ")", ")", "\n", "\n", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "# training window in terms of float fraction", "\n", "\n", "# SR model does not produce predictions", "\n", "            ", "if", "(", "not", "onlyData", ")", "and", "(", "model_type", "!=", "'sr'", ")", "and", "(", "model_type", "!=", "'sr_batch'", ")", ":", "\n", "\n", "                ", "s", "=", "df_new", "[", "[", "'Actual'", "]", "]", ".", "iloc", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "s", ".", "index", ".", "to_pydatetime", "(", ")", ",", "s", ",", "'o-'", ",", "color", "=", "'blue'", ",", "label", "=", "'Data ('", "+", "data_frequency", "+", "')'", ")", "\n", "\n", "# If there is a point anomaly", "\n", "if", "(", "operation_mode", "==", "'test'", "or", "operation_mode", "==", "'validation'", ")", ":", "\n", "\n", "                    ", "if", "perform_point_anomaly", ":", "\n", "\n", "                        ", "s", "=", "df_new", "[", "[", "'ML prediction'", "]", "]", ".", "iloc", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "s", ".", "index", ".", "to_pydatetime", "(", ")", ",", "s", ",", "'o-'", ",", "color", "=", "'green'", ",", "label", "=", "'Model prediction'", ")", "\n", "\n", "# Confidence interval", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "fill_between", "(", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", ",", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", ",", "'forecast_test_LL'", "]", ",", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", ",", "'forecast_test_UL'", "]", ",", "color", "=", "'g'", ",", "alpha", "=", "0.2", ",", "label", "=", "'{} band'", ".", "format", "(", "confidence_band", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "                    ", "if", "decision_point_anomaly", ":", "\n", "\n", "                        ", "s", "=", "df_new", "[", "[", "'ML prediction'", "]", "]", ".", "iloc", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "s", ".", "index", ".", "to_pydatetime", "(", ")", ",", "s", ",", "'o-'", ",", "color", "=", "'green'", ",", "label", "=", "'Model prediction'", ")", "\n", "\n", "# Confidence interval", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "fill_between", "(", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", ",", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", ",", "'forecast_test_LL'", "]", ",", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", ",", "'forecast_test_UL'", "]", ",", "color", "=", "'g'", ",", "alpha", "=", "0.2", ",", "label", "=", "'{} band'", ".", "format", "(", "confidence_band", ")", ")", "\n", "\n", "\n", "", "", "", "else", ":", "\n", "\n", "                ", "s", "=", "df_new", "[", "[", "'Actual'", "]", "]", ".", "iloc", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "s", ".", "index", ".", "to_pydatetime", "(", ")", ",", "s", ",", "'o-'", ",", "color", "=", "'blue'", ",", "label", "=", "kpi_name", ".", "replace", "(", "'.'", ",", "' '", ")", ".", "replace", "(", "'_'", ",", "' '", ")", "+", "'('", "+", "data_frequency", "+", "')'", ")", "\n", "\n", "", "", "else", ":", "# training window in terms of time windows", "\n", "\n", "# SR model does not produce predictions", "\n", "            ", "if", "(", "not", "onlyData", ")", "and", "(", "model_type", "!=", "'sr'", ")", "and", "(", "model_type", "!=", "'sr_batch'", ")", ":", "\n", "\n", "                ", "s", "=", "df_new", "[", "[", "'Actual'", "]", "]", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "s", ".", "index", ".", "to_pydatetime", "(", ")", ",", "s", ",", "'o-'", ",", "color", "=", "'blue'", ",", "label", "=", "'Data ('", "+", "data_frequency", "+", "')'", ")", "\n", "\n", "# If there is a point anomaly", "\n", "if", "(", "operation_mode", "==", "'test'", "or", "operation_mode", "==", "'validation'", ")", ":", "\n", "\n", "                    ", "if", "perform_point_anomaly", ":", "\n", "\n", "                        ", "s", "=", "df_new", ".", "loc", "[", "df_new", ".", "index", ">", "test_window", ",", "'ML prediction'", "]", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "s", ".", "index", ".", "to_pydatetime", "(", ")", ",", "s", ",", "'o-'", ",", "color", "=", "'green'", ",", "label", "=", "'Model prediction'", ")", "\n", "\n", "# Confidence interval", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "fill_between", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", ">", "test_window", "]", ".", "index", ",", "df_new", ".", "loc", "[", "df_new", ".", "index", ">", "test_window", ",", "'forecast_test_LL'", "]", ",", "df_new", ".", "loc", "[", "df_new", ".", "index", ">", "test_window", ",", "'forecast_test_UL'", "]", ",", "color", "=", "'g'", ",", "alpha", "=", "0.2", ",", "label", "=", "'{} band'", ".", "format", "(", "confidence_band", ")", ")", "\n", "\n", "\n", "", "", "else", ":", "\n", "\n", "                    ", "if", "decision_point_anomaly", ":", "\n", "\n", "                        ", "s", "=", "df_new", "[", "[", "'ML prediction'", "]", "]", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "s", ".", "index", ".", "to_pydatetime", "(", ")", ",", "s", ",", "'o-'", ",", "color", "=", "'green'", ",", "label", "=", "'Model prediction'", ")", "\n", "\n", "# Confidence interval", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "fill_between", "(", "df_new", ".", "index", "[", "len", "(", "df_training", ")", ":", "]", ",", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "len", "(", "df_training", ")", ":", "]", ",", "'forecast_test_LL'", "]", ",", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "len", "(", "df_training", ")", ":", "]", ",", "'forecast_test_UL'", "]", ",", "color", "=", "'g'", ",", "alpha", "=", "0.2", ",", "label", "=", "'{} band'", ".", "format", "(", "confidence_band", ")", ")", "\n", "\n", "", "", "", "else", ":", "\n", "\n", "                ", "s", "=", "df_new", "[", "[", "'Actual'", "]", "]", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "s", ".", "index", ".", "to_pydatetime", "(", ")", ",", "s", ",", "'o-'", ",", "color", "=", "'blue'", ",", "label", "=", "kpi_name", ".", "replace", "(", "'.'", ",", "' '", ")", ".", "replace", "(", "'_'", ",", "' '", ")", "+", "'('", "+", "data_frequency", "+", "')'", ")", "\n", "\n", "#######################################################", "\n", "## DETERMINE PLOTTING METADATA", "\n", "#######################################################", "\n", "\n", "# Determining plotting boundaries ", "\n", "", "", "", "min_value_anom", "=", "[", "1E12", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", "]", "\n", "max_value_anom", "=", "[", "-", "1E12", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", "]", "\n", "if", "count_of_anomalies", ">", "0", ":", "\n", "        ", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "\n", "            ", "min_value_anom", "[", "c", "-", "1", "]", "=", "df_anom", "[", "'KPI_{}'", ".", "format", "(", "c", ")", "]", ".", "min", "(", ")", "\n", "max_value_anom", "[", "c", "-", "1", "]", "=", "df_anom", "[", "'KPI_{}'", ".", "format", "(", "c", ")", "]", ".", "max", "(", ")", "\n", "\n", "", "", "min_value_anom_training", "=", "[", "1E12", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", "]", "\n", "max_value_anom_training", "=", "[", "-", "1E12", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", "]", "\n", "\n", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "\n", "        ", "if", "count_of_anomalies_training", ">", "0", ":", "\n", "            ", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "\n", "                ", "min_value_anom_training", "[", "c", "-", "1", "]", "=", "df_anom_training", ".", "loc", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", "]", ":", ",", "'KPI_{}'", ".", "format", "(", "c", ")", "]", ".", "min", "(", ")", "\n", "max_value_anom_training", "[", "c", "-", "1", "]", "=", "df_anom_training", ".", "loc", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", "]", ":", ",", "'KPI_{}'", ".", "format", "(", "c", ")", "]", ".", "max", "(", ")", "\n", "\n", "", "", "min_plotWindow", "=", "[", "1E12", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", "]", "\n", "max_plotWindow", "=", "[", "-", "1E12", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", "]", "\n", "\n", "if", "perform_point_anomaly", "and", "model_type", "not", "in", "[", "'sr'", ",", "'sr_batch'", "]", ":", "\n", "\n", "            ", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "                ", "min_plotWindow", "[", "c", "-", "1", "]", "=", "min", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", ",", "'forecast_test_LL'", "]", ".", "min", "(", ")", ",", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", ",", "'Actual'", "]", ".", "min", "(", ")", ",", "min_value_anom", "[", "c", "-", "1", "]", ",", "min_value_anom_training", "[", "c", "-", "1", "]", ")", "\n", "\n", "max_plotWindow", "[", "c", "-", "1", "]", "=", "max", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", ",", "'forecast_test_UL'", "]", ".", "max", "(", ")", ",", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", ",", "'Actual'", "]", ".", "max", "(", ")", ",", "max_value_anom", "[", "c", "-", "1", "]", ",", "max_value_anom_training", "[", "c", "-", "1", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "            ", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "                ", "min_plotWindow", "[", "c", "-", "1", "]", "=", "min", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", ",", "'Actual'", "]", ".", "min", "(", ")", ",", "min_value_anom", "[", "c", "-", "1", "]", ",", "min_value_anom_training", "[", "c", "-", "1", "]", ")", "\n", "\n", "max_plotWindow", "[", "c", "-", "1", "]", "=", "max", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "-", "int", "(", "plottingWindow", "*", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", ",", "'Actual'", "]", ".", "max", "(", ")", ",", "max_value_anom", "[", "c", "-", "1", "]", ",", "max_value_anom_training", "[", "c", "-", "1", "]", ")", "\n", "\n", "", "", "", "else", ":", "\n", "\n", "        ", "if", "count_of_anomalies_training", ">", "0", ":", "\n", "            ", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "\n", "                ", "min_value_anom_training", "[", "c", "-", "1", "]", "=", "df_anom_training", ".", "loc", "[", ":", ",", "'KPI_{}'", ".", "format", "(", "c", ")", "]", ".", "min", "(", ")", "\n", "max_value_anom_training", "[", "c", "-", "1", "]", "=", "df_anom_training", ".", "loc", "[", ":", ",", "'KPI_{}'", ".", "format", "(", "c", ")", "]", ".", "max", "(", ")", "\n", "\n", "", "", "min_plotWindow", "=", "[", "1E12", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", "]", "\n", "max_plotWindow", "=", "[", "-", "1E12", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", "]", "\n", "\n", "if", "perform_point_anomaly", "and", "model_type", "not", "in", "[", "'sr'", ",", "'sr_batch'", "]", ":", "\n", "\n", "            ", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "                ", "min_plotWindow", "[", "c", "-", "1", "]", "=", "min", "(", "df_new", ".", "loc", "[", ":", ",", "'forecast_test_LL'", "]", ".", "min", "(", ")", ",", "df_new", ".", "loc", "[", ":", ",", "'Actual'", "]", ".", "min", "(", ")", ",", "min_value_anom", "[", "c", "-", "1", "]", ",", "min_value_anom_training", "[", "c", "-", "1", "]", ")", "\n", "\n", "max_plotWindow", "[", "c", "-", "1", "]", "=", "max", "(", "df_new", ".", "loc", "[", ":", ",", "'forecast_test_UL'", "]", ".", "max", "(", ")", ",", "df_new", ".", "loc", "[", ":", ",", "'Actual'", "]", ".", "max", "(", ")", ",", "max_value_anom", "[", "c", "-", "1", "]", ",", "max_value_anom_training", "[", "c", "-", "1", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "            ", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "                ", "min_plotWindow", "[", "c", "-", "1", "]", "=", "min", "(", "df_new", ".", "loc", "[", ":", ",", "'Actual'", "]", ".", "min", "(", ")", ",", "min_value_anom", "[", "c", "-", "1", "]", ",", "min_value_anom_training", "[", "c", "-", "1", "]", ")", "\n", "\n", "max_plotWindow", "[", "c", "-", "1", "]", "=", "max", "(", "df_new", ".", "loc", "[", ":", ",", "'Actual'", "]", ".", "max", "(", ")", ",", "max_value_anom", "[", "c", "-", "1", "]", ",", "max_value_anom_training", "[", "c", "-", "1", "]", ")", "\n", "###########################", "\n", "# PLOTTING TREND ANOMALIES", "\n", "###########################", "\n", "\n", "", "", "", "if", "data_frequency", "==", "'minutely'", ":", "\n", "        ", "offset", "=", "Minute", "(", ")", "\n", "", "elif", "data_frequency", "==", "'5minutely'", ":", "\n", "        ", "offset", "=", "Minute", "(", "5", ")", "\n", "", "elif", "data_frequency", "==", "'daily'", ":", "\n", "        ", "offset", "=", "Day", "(", ")", "\n", "", "elif", "data_frequency", "==", "'hourly'", ":", "\n", "        ", "offset", "=", "Hour", "(", ")", "\n", "", "elif", "data_frequency", "==", "'weekly'", ":", "\n", "        ", "offset", "=", "Day", "(", "7", ")", "\n", "", "else", ":", "\n", "        ", "offset", "=", "MonthBegin", "(", ")", "\n", "\n", "", "if", "perform_trend_anomaly", ":", "# Display trend anomalies if required", "\n", "\n", "        ", "if", "display_trend_anomaly", ":", "\n", "\n", "            ", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "\n", "### Plotting boundaries of different trends", "\n", "                ", "legend_display", "=", "True", "\n", "for", "n", "in", "reversed", "(", "range", "(", "len", "(", "trend_boundaries", ")", ")", ")", ":", "\n", "\n", "\n", "                    ", "if", "not", "display_all_trend_anomalies", ":", "# if only expected to return the last and penultimate anomalies", "\n", "\n", "# only display anomalies in the trend anomaly window", "\n", "                        ", "if", "np", ".", "isnan", "(", "trend_boundaries", ".", "iloc", "[", "n", ",", "c", "-", "1", "]", ")", "and", "trend_boundaries", ".", "index", "[", "n", "]", ">=", "(", "df_new", ".", "index", "[", "-", "1", "]", "-", "(", "trend_anomaly_window", ")", "*", "offset", ")", "and", "trend_boundaries", ".", "index", "[", "n", "]", "<", "(", "df_new", ".", "index", "[", "-", "1", "]", ")", ":", "\n", "\n", "                            ", "df_training_zone", "=", "df_new", ".", "loc", "[", "[", "trend_boundaries", ".", "index", "[", "n", "]", ",", "trend_boundaries", ".", "index", "[", "n", "]", "]", ",", "df_new", ".", "columns", "[", "c", "-", "1", "]", "]", "\n", "df_training_zone", "[", "0", "]", "=", "min_plotWindow", "[", "c", "-", "1", "]", "-", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", "\n", "df_training_zone", "[", "1", "]", "=", "max_plotWindow", "[", "c", "-", "1", "]", "+", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", "\n", "\n", "if", "legend_display", ":", "\n", "                                ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_training_zone", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_training_zone", ",", "'--'", ",", "linewidth", "=", "3", ",", "color", "=", "'magenta'", ",", "label", "=", "'Trend anomaly'", ")", "\n", "legend_display", "=", "False", "\n", "", "else", ":", "\n", "                                ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_training_zone", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_training_zone", ",", "'--'", ",", "linewidth", "=", "3", ",", "color", "=", "'magenta'", ",", "label", "=", "''", ")", "\n", "\n", "# Date annotation for trend anomaly", "\n", "\n", "", "ax", "[", "c", "-", "1", "]", ".", "text", "(", "df_training_zone", ".", "index", "[", "0", "]", "+", "offset", ",", "df_training_zone", "[", "1", "]", "-", "0.5", "*", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", ",", "df_training_zone", ".", "index", "[", "0", "]", ".", "strftime", "(", "'%d-%b-%y'", ")", ",", "fontsize", "=", "12", ")", "\n", "\n", "\n", "# Also display penultimate trend anomaly", "\n", "if", "len", "(", "list_of_trend_anomalies", ")", ">", "1", ":", "\n", "                                ", "df_training_zone", "=", "df_new", ".", "loc", "[", "[", "list_of_trend_anomalies", ".", "index", "[", "-", "2", "]", ",", "list_of_trend_anomalies", ".", "index", "[", "-", "2", "]", "]", ",", "df_new", ".", "columns", "[", "c", "-", "1", "]", "]", "\n", "\n", "df_training_zone", "[", "0", "]", "=", "min_plotWindow", "[", "c", "-", "1", "]", "-", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", "\n", "df_training_zone", "[", "1", "]", "=", "max_plotWindow", "[", "c", "-", "1", "]", "+", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", "\n", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_training_zone", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_training_zone", ",", "'--'", ",", "linewidth", "=", "3", ",", "color", "=", "'magenta'", ",", "label", "=", "''", ")", "\n", "\n", "# Date annotation for trend anomaly", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "text", "(", "df_training_zone", ".", "index", "[", "0", "]", "+", "offset", ",", "df_training_zone", "[", "1", "]", "-", "0.5", "*", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", ",", "df_training_zone", ".", "index", "[", "0", "]", ".", "strftime", "(", "'%d-%b-%y'", ")", ",", "fontsize", "=", "12", ")", "\n", "\n", "\n", "#plotting prediction if only performing trend anomaly detection", "\n", "\n", "", "if", "decision_point_anomaly", "==", "False", ":", "\n", "\n", "# Extract the non null datetimes", "\n", "                                ", "first_timestamp", "=", "changepoint_desc", ".", "index", "[", "0", "]", "\n", "changepoint_desc", "=", "changepoint_desc", "[", "changepoint_desc", ".", "KPI_1", ".", "isnull", "(", ")", "]", "\n", "\n", "legend_display", "=", "True", "\n", "for", "l", "in", "reversed", "(", "range", "(", "len", "(", "changepoint_desc", ")", ")", ")", ":", "\n", "\n", "                                    ", "if", "len", "(", "changepoint_desc", ")", "-", "l", ">", "2", ":", "\n", "                                        ", "break", "\n", "\n", "", "if", "l", "==", "0", ":", "\n", "                                        ", "s", "=", "pd", ".", "Series", "(", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'prediction'", "]", "[", ":", ",", "0", "]", ",", "index", "=", "df_new", ".", "loc", "[", ":", "(", "changepoint_desc", ".", "index", "[", "l", "]", ")", "]", ".", "index", ")", "\n", "\n", "u", "=", "pd", ".", "Series", "(", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'prediction'", "]", "[", ":", ",", "0", "]", "+", "3", "*", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'std'", "]", "[", ":", ",", "0", "]", ",", "index", "=", "df_new", ".", "loc", "[", ":", "(", "changepoint_desc", ".", "index", "[", "l", "]", ")", "]", ".", "index", ")", "\n", "\n", "l", "=", "pd", ".", "Series", "(", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'prediction'", "]", "[", ":", ",", "0", "]", "-", "3", "*", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'std'", "]", "[", ":", ",", "0", "]", ",", "index", "=", "df_new", ".", "loc", "[", ":", "(", "changepoint_desc", ".", "index", "[", "l", "]", ")", "]", ".", "index", ")", "\n", "\n", "\n", "\n", "", "else", ":", "\n", "                                        ", "s", "=", "pd", ".", "Series", "(", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'prediction'", "]", "[", ":", ",", "0", "]", ",", "index", "=", "df_new", ".", "loc", "[", "changepoint_desc", ".", "index", "[", "l", "-", "1", "]", "+", "offset", ":", "(", "changepoint_desc", ".", "index", "[", "l", "]", ")", "]", ".", "index", ")", "\n", "\n", "u", "=", "pd", ".", "Series", "(", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'prediction'", "]", "[", ":", ",", "0", "]", "+", "3", "*", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'std'", "]", "[", ":", ",", "0", "]", ",", "index", "=", "df_new", ".", "loc", "[", "changepoint_desc", ".", "index", "[", "l", "-", "1", "]", "+", "offset", ":", "(", "changepoint_desc", ".", "index", "[", "l", "]", ")", "]", ".", "index", ")", "\n", "\n", "l", "=", "pd", ".", "Series", "(", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'prediction'", "]", "[", ":", ",", "0", "]", "-", "3", "*", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'std'", "]", "[", ":", ",", "0", "]", ",", "index", "=", "df_new", ".", "loc", "[", "changepoint_desc", ".", "index", "[", "l", "-", "1", "]", "+", "offset", ":", "(", "changepoint_desc", ".", "index", "[", "l", "]", ")", "]", ".", "index", ")", "\n", "\n", "\n", "", "if", "legend_display", ":", "\n", "                                        ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "s", ".", "index", ".", "to_pydatetime", "(", ")", ",", "s", ",", "'--'", ",", "color", "=", "'green'", ",", "\n", "linewidth", "=", "2", ",", "label", "=", "'Model-based prediction'", ")", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "fill_between", "(", "s", ".", "index", ",", "l", ",", "u", ",", "\n", "color", "=", "'g'", ",", "alpha", "=", "0.2", ",", "label", "=", "'{} band'", ".", "format", "(", "confidence_band", ")", ")", "\n", "\n", "legend_display", "=", "False", "\n", "", "else", ":", "\n", "                                        ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "s", ".", "index", ".", "to_pydatetime", "(", ")", ",", "s", ",", "'--'", ",", "color", "=", "'green'", ",", "\n", "linewidth", "=", "2", ",", "label", "=", "''", ")", "\n", "ax", "[", "c", "-", "1", "]", ".", "fill_between", "(", "s", ".", "index", ",", "l", ",", "u", ",", "\n", "color", "=", "'g'", ",", "alpha", "=", "0.2", ",", "label", "=", "''", ")", "\n", "\n", "\n", "", "", "", "break", "\n", "\n", "", "", "else", ":", "# if expected to return all anomalies", "\n", "\n", "                        ", "if", "np", ".", "isnan", "(", "trend_boundaries", ".", "iloc", "[", "n", ",", "c", "-", "1", "]", ")", ":", "\n", "\n", "                            ", "df_training_zone", "=", "df_new", ".", "loc", "[", "[", "trend_boundaries", ".", "index", "[", "n", "]", ",", "trend_boundaries", ".", "index", "[", "n", "]", "]", ",", "df_new", ".", "columns", "[", "c", "-", "1", "]", "]", "\n", "df_training_zone", "[", "0", "]", "=", "min_plotWindow", "[", "c", "-", "1", "]", "-", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", "\n", "df_training_zone", "[", "1", "]", "=", "max_plotWindow", "[", "c", "-", "1", "]", "+", "plottingYlim", "*", "(", "max_plotWindow", "[", "c", "-", "1", "]", "-", "min_plotWindow", "[", "c", "-", "1", "]", ")", "\n", "\n", "if", "legend_display", ":", "\n", "                                ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_training_zone", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_training_zone", ",", "'--'", ",", "linewidth", "=", "3", ",", "color", "=", "'magenta'", ",", "label", "=", "'Trend anomaly'", ")", "\n", "legend_display", "=", "False", "\n", "", "else", ":", "\n", "                                ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_training_zone", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_training_zone", ",", "'--'", ",", "linewidth", "=", "3", ",", "color", "=", "'magenta'", ",", "label", "=", "''", ")", "\n", "\n", "# if display all trend anomalies, one time plotting of model predictions                        ", "\n", "", "", "", "", "if", "decision_point_anomaly", "==", "False", ":", "# If no point anomaly identified", "\n", "\n", "                    ", "if", "display_all_trend_anomalies", ":", "\n", "\n", "                        ", "first_timestamp", "=", "changepoint_desc", ".", "index", "[", "0", "]", "\n", "changepoint_desc", "=", "changepoint_desc", "[", "changepoint_desc", ".", "KPI_1", ".", "isnull", "(", ")", "]", "\n", "\n", "legend_display", "=", "True", "\n", "for", "l", "in", "reversed", "(", "range", "(", "len", "(", "changepoint_desc", ")", ")", ")", ":", "\n", "\n", "                            ", "if", "l", "==", "0", ":", "\n", "\n", "                                ", "s", "=", "pd", ".", "Series", "(", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'prediction'", "]", "[", ":", ",", "0", "]", ",", "index", "=", "df_new", ".", "loc", "[", ":", "(", "changepoint_desc", ".", "index", "[", "l", "]", ")", "]", ".", "index", ")", "\n", "\n", "u", "=", "pd", ".", "Series", "(", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'prediction'", "]", "[", ":", ",", "0", "]", "+", "3", "*", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'std'", "]", "[", ":", ",", "0", "]", ",", "index", "=", "df_new", ".", "loc", "[", ":", "(", "changepoint_desc", ".", "index", "[", "l", "]", ")", "]", ".", "index", ")", "\n", "\n", "l", "=", "pd", ".", "Series", "(", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'prediction'", "]", "[", ":", ",", "0", "]", "-", "3", "*", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'std'", "]", "[", ":", ",", "0", "]", ",", "index", "=", "df_new", ".", "loc", "[", ":", "(", "changepoint_desc", ".", "index", "[", "l", "]", ")", "]", ".", "index", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                                ", "s", "=", "pd", ".", "Series", "(", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'prediction'", "]", "[", ":", ",", "0", "]", ",", "index", "=", "df_new", ".", "loc", "[", "changepoint_desc", ".", "index", "[", "l", "-", "1", "]", "+", "offset", ":", "(", "changepoint_desc", ".", "index", "[", "l", "]", ")", "]", ".", "index", ")", "\n", "\n", "u", "=", "pd", ".", "Series", "(", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'prediction'", "]", "[", ":", ",", "0", "]", "+", "3", "*", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'std'", "]", "[", ":", ",", "0", "]", ",", "index", "=", "df_new", ".", "loc", "[", "changepoint_desc", ".", "index", "[", "l", "-", "1", "]", "+", "offset", ":", "(", "changepoint_desc", ".", "index", "[", "l", "]", ")", "]", ".", "index", ")", "\n", "\n", "l", "=", "pd", ".", "Series", "(", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'prediction'", "]", "[", ":", ",", "0", "]", "-", "3", "*", "changepoint_desc", ".", "iloc", "[", "l", "]", "[", "'std'", "]", "[", ":", ",", "0", "]", ",", "index", "=", "df_new", ".", "loc", "[", "changepoint_desc", ".", "index", "[", "l", "-", "1", "]", "+", "offset", ":", "(", "changepoint_desc", ".", "index", "[", "l", "]", ")", "]", ".", "index", ")", "\n", "\n", "", "if", "legend_display", ":", "\n", "                                ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "s", ".", "index", ".", "to_pydatetime", "(", ")", ",", "s", ",", "'--'", ",", "color", "=", "'green'", ",", "\n", "linewidth", "=", "2", ",", "label", "=", "'Model-based prediction'", ")", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "fill_between", "(", "s", ".", "index", ",", "l", ",", "u", ",", "\n", "color", "=", "'g'", ",", "alpha", "=", "0.2", ",", "label", "=", "'{} band'", ".", "format", "(", "confidence_band", ")", ")", "\n", "\n", "\n", "legend_display", "=", "False", "\n", "", "else", ":", "\n", "                                ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "s", ".", "index", ".", "to_pydatetime", "(", ")", ",", "s", ",", "'--'", ",", "color", "=", "'green'", ",", "\n", "linewidth", "=", "2", ",", "label", "=", "''", ")", "\n", "\n", "ax", "[", "c", "-", "1", "]", ".", "fill_between", "(", "s", ".", "index", ",", "l", ",", "u", ",", "color", "=", "'g'", ",", "alpha", "=", "0.2", ",", "label", "=", "''", ")", "\n", "\n", "###########################", "\n", "# PLOTTING POINT ANOMALIES", "\n", "###########################", "\n", "\n", "", "", "", "", "", "", "", "if", "perform_point_anomaly", ":", "# Display point anomalies if required", "\n", "\n", "        ", "if", "not", "onlyData", ":", "\n", "            ", "if", "display_all_anomalies", ":", "\n", "\n", "                ", "if", "count_of_anomalies", ">", "0", ":", "\n", "                    ", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "                        ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_anom", "[", "[", "'KPI_{}'", ".", "format", "(", "c", ")", "]", "]", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_anom", "[", "[", "'KPI_{}'", ".", "format", "(", "c", ")", "]", "]", ",", "color", "=", "'r'", ",", "marker", "=", "'o'", ",", "label", "=", "'Point anomaly'", ")", "\n", "\n", "\n", "", "", "if", "count_of_anomalies_training", ">", "0", ":", "\n", "                    ", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "                        ", "if", "count_of_anomalies", ">", "0", ":", "\n", "                            ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_anom_training", "[", "[", "'KPI_{}'", ".", "format", "(", "c", ")", "]", "]", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_anom_training", "[", "[", "'KPI_{}'", ".", "format", "(", "c", ")", "]", "]", ",", "color", "=", "'r'", ",", "marker", "=", "'o'", ")", "\n", "", "else", ":", "\n", "                            ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_anom_training", "[", "[", "'KPI_{}'", ".", "format", "(", "c", ")", "]", "]", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_anom_training", "[", "[", "'KPI_{}'", ".", "format", "(", "c", ")", "]", "]", ",", "color", "=", "'r'", ",", "marker", "=", "'o'", ",", "label", "=", "'Point anomaly'", ")", "\n", "", "", "", "", "else", ":", "\n", "# only show last anomaly if its at the last time point", "\n", "                ", "if", "count_of_anomalies", ">", "0", "and", "decision_point_anomaly", ":", "\n", "                    ", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "                        ", "if", "df_anom", ".", "index", "[", "-", "1", "]", "==", "df_new", ".", "index", "[", "-", "1", "]", ":", "\n", "                            ", "ax", "[", "c", "-", "1", "]", ".", "plot_date", "(", "df_anom", ".", "loc", "[", "df_anom", ".", "index", "[", "-", "1", ":", "]", ",", "'KPI_{}'", ".", "format", "(", "c", ")", "]", ".", "index", ".", "to_pydatetime", "(", ")", ",", "df_anom", ".", "loc", "[", "df_anom", ".", "index", "[", "-", "1", "]", ",", "'KPI_{}'", ".", "format", "(", "c", ")", "]", ",", "color", "=", "'r'", ",", "marker", "=", "'o'", ",", "label", "=", "'Point anomaly'", ")", "\n", "\n", "#########################                        ", "\n", "# UPDATE PLOT ANNOTATION", "\n", "#########################", "\n", "", "", "", "", "", "", "plot_settings", ".", "update_plot_annotation", "(", "operation_mode", ",", "df_new", ",", "df_training", ",", "df_test", ",", "time_series_file_name", ",", "plt", ",", "fig", ",", "ax", ",", "plottingWindow", ",", "plottingYlim", ",", "min_plotWindow", ",", "max_plotWindow", ",", "threshold", ",", "threshold_probability", ",", "confidence_band", ",", "\n", "data_frequency", ",", "numberOfColumns", ",", "training_window", ",", "test_window", ",", "data_scale", ",", "rule_based", ",", "trend_boundaries", ",", "decision_point_anomaly", ",", "perform_point_anomaly", ")", "\n", "\n", "return", "plt", ",", "min_plotWindow", ",", "max_plotWindow", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.prediction_error.prediction_error": [[8, 77], ["isinstance", "int", "len", "len", "len", "len", "len", "sm.tsa.UnobservedComponents.filter", "range", "len", "statsmodels.tsa.UnobservedComponents", "statsmodels.tsa.UnobservedComponents", "model_new.filter.get_prediction", "numpy.isnan", "numpy.square", "numpy.square", "numpy.exp"], "function", ["None"], ["def", "prediction_error", "(", "df_new", ",", "df_training", ",", "training_window", ",", "test_window", ",", "AIC", ",", "model_result", ",", "AR_order", ",", "diff_order", ",", "MA_order", ",", "AR_seasonal_order", ",", "freq_seasonal", ",", "MA_seasonal_order", ",", "cycle_period", ",", "enforce_invertibility", ",", "enforce_stationarity", ",", "trend_model", ",", "deterministic_order", ",", "exog_input", ",", "numberOfColumns", ",", "logarithmize", ",", "classical", ")", ":", "\n", "\n", "    ", "avg_pred_error", "=", "0.0", "\n", "\n", "# forecasting for future date: We use one-step ahead prediction", "\n", "\n", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "\n", "# the test set is all points after the training window excluding the last data point", "\n", "        ", "prediction_start", "=", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "\n", "prediction_end", "=", "len", "(", "df_new", ")", "-", "1", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "prediction_start", "=", "len", "(", "df_new", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", "\n", "\n", "if", "test_window", "==", "None", ":", "\n", "            ", "prediction_end", "=", "len", "(", "df_new", ")", "-", "1", "\n", "", "else", ":", "\n", "            ", "prediction_end", "=", "len", "(", "df_new", ".", "loc", "[", "training_window", "[", "0", "]", ":", "test_window", "]", ")", "\n", "\n", "", "", "if", "numberOfColumns", "<=", "2", ":", "\n", "\n", "        ", "if", "classical", ":", "# Univariate classical model", "\n", "\n", "\n", "            ", "if", "not", "AIC", ":", "\n", "\n", "                ", "if", "len", "(", "exog_input", ".", "columns", ")", ">", "0", ":", "\n", "\n", "                    ", "model_new", "=", "sm", ".", "tsa", ".", "UnobservedComponents", "(", "df_new", "[", "'KPI_1'", "]", ",", "exog", "=", "exog_input", ",", "autoregressive", "=", "AR_order", ",", "level", "=", "trend_model", ",", "freq_seasonal", "=", "freq_seasonal", ")", "\n", "", "else", ":", "\n", "\n", "                    ", "model_new", "=", "sm", ".", "tsa", ".", "UnobservedComponents", "(", "df_new", "[", "'KPI_1'", "]", ",", "autoregressive", "=", "AR_order", ",", "level", "=", "trend_model", ",", "freq_seasonal", "=", "freq_seasonal", ")", "\n", "\n", "", "resB", "=", "model_new", ".", "filter", "(", "model_result", ".", "params", ")", "\n", "\n", "for", "t", "in", "range", "(", "prediction_start", ",", "prediction_end", ")", ":", "\n", "\n", "                    ", "f", "=", "resB", ".", "get_prediction", "(", "start", "=", "df_new", ".", "index", "[", "t", "]", ",", "end", "=", "df_new", ".", "index", "[", "t", "]", ")", "\n", "\n", "# prediction error calculated over all non-NAN and non-zero data points", "\n", "if", "(", "not", "np", ".", "isnan", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_original_1'", "]", ")", ")", "and", "(", "not", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_original_1'", "]", "==", "0.0", ")", ")", ":", "\n", "\n", "                        ", "if", "logarithmize", ":", "\n", "\n", "                            ", "avg_pred_error", "=", "avg_pred_error", "+", "np", ".", "square", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_original_1'", "]", "-", "np", ".", "exp", "(", "f", ".", "predicted_mean", ".", "iloc", "[", "0", "]", "+", "f", ".", "var_pred_mean", "[", "0", "]", "/", "2.0", ")", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                            ", "avg_pred_error", "=", "avg_pred_error", "+", "np", ".", "square", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_original_1'", "]", "-", "f", ".", "predicted_mean", ".", "values", ")", "\n", "\n", "", "", "", "return", "avg_pred_error", "\n", "\n", "\n", "\n", "", "else", ":", "\n", "\n", "                ", "return", "model_result", ".", "aic", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.model_selection.get_powerset": [[12, 34], ["list_seas.append", "list_har.append", "model_selection.get_powerset", "copy.deepcopy", "copy.deepcopy", "range", "list_seas.append", "list_seas.extend", "range", "list_har.append", "list_har.extend", "len", "list_seas[].append", "len", "list_har[].append"], "function", ["home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.model_selection.get_powerset"], ["def", "get_powerset", "(", "list_seas", ",", "list_har", ",", "n", ",", "seasonal_periods", ",", "harmonics", ")", ":", "\n", "\n", "    ", "if", "n", "==", "1", ":", "\n", "        ", "list_seas", ".", "append", "(", "[", "seasonal_periods", "[", "n", "-", "1", "]", "]", ")", "\n", "list_har", ".", "append", "(", "[", "harmonics", "[", "n", "-", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "get_powerset", "(", "list_seas", ",", "list_har", ",", "n", "-", "1", ",", "seasonal_periods", ",", "harmonics", ")", "\n", "\n", "s_copy", "=", "copy", ".", "deepcopy", "(", "list_seas", ")", "\n", "h_copy", "=", "copy", ".", "deepcopy", "(", "list_har", ")", "\n", "\n", "for", "l", "in", "range", "(", "len", "(", "list_seas", ")", ")", ":", "\n", "            ", "list_seas", "[", "l", "]", ".", "append", "(", "seasonal_periods", "[", "n", "-", "1", "]", ")", "\n", "", "list_seas", ".", "append", "(", "[", "seasonal_periods", "[", "n", "-", "1", "]", "]", ")", "\n", "\n", "list_seas", ".", "extend", "(", "s_copy", ")", "\n", "\n", "for", "l", "in", "range", "(", "len", "(", "list_har", ")", ")", ":", "\n", "            ", "list_har", "[", "l", "]", ".", "append", "(", "harmonics", "[", "n", "-", "1", "]", ")", "\n", "", "list_har", ".", "append", "(", "[", "harmonics", "[", "n", "-", "1", "]", "]", ")", "\n", "\n", "list_har", ".", "extend", "(", "h_copy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.model_selection.select_best_model": [[36, 324], ["exog_input.copy", "df_new.copy.copy", "comb_seasonalities.append", "comb_harmonics.append", "logging.debug", "len", "model_selection.get_powerset", "sm.tsa.UnobservedComponents.fit", "len", "range", "df_new.copy.copy", "df_training.copy", "numpy.log", "numpy.log", "range", "range", "len", "statsmodels.tsa.UnobservedComponents", "statsmodels.tsa.UnobservedComponents", "len", "statsmodels.tsa.UnobservedComponents", "statsmodels.tsa.UnobservedComponents", "zip", "df_training[].isnull", "range", "range", "isinstance", "range", "zip", "len", "freq_seasonal.append", "len", "range", "range", "isinstance", "range", "len", "freq_seasonal.append", "len", "range", "int", "len", "statsmodels.tsa.UnobservedComponents", "statsmodels.tsa.UnobservedComponents", "sm.tsa.UnobservedComponents.fit", "tools.prediction_error.prediction_error", "logging.debug", "logging.debug", "logging.debug", "int", "len", "statsmodels.tsa.UnobservedComponents", "statsmodels.tsa.UnobservedComponents", "sm.tsa.UnobservedComponents.fit", "tools.prediction_error.prediction_error", "logging.debug", "logging.debug", "logging.debug", "len", "len"], "function", ["home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.model_selection.get_powerset", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.prediction_error.prediction_error", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.prediction_error.prediction_error"], ["", "", "def", "select_best_model", "(", "df_new", ",", "df_training", ",", "model_suite", ",", "exog_input", ",", "enable_seasonality", ",", "trend_models", ",", "max_AR_order", ",", "max_MA_order", ",", "\n", "max_seasonal_AR_order", ",", "max_seasonal_MA_order", ",", "cycle_period", ",", "seasonal_periods", ",", "harmonics", ",", "\n", "enforce_invertibility", ",", "enforce_stationarity", ",", "training_window", ",", "test_window", ",", "numberOfColumns", ",", "operation_mode", ",", "kpi_name", ")", ":", "\n", "\n", "### TRAINING", "\n", "\n", "## Model selection", "\n", "        ", "model_number", "=", "0", "\n", "min_model_sel_criterion", "=", "1E15", "\n", "exog_input_base", "=", "exog_input", ".", "copy", "(", ")", "\n", "current_best_model", "=", "None", "\n", "selected_width", "=", "None", "\n", "\n", "# Generate combinations of possible seasonalities", "\n", "comb_seasonalities", "=", "[", "]", "\n", "comb_harmonics", "=", "[", "]", "\n", "\n", "# NAN all zero values", "\n", "df_new", "=", "df_new", ".", "copy", "(", ")", "\n", "df_new", ".", "loc", "[", "df_new", "[", "'KPI_1'", "]", "==", "0.0", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "if", "len", "(", "seasonal_periods", ")", ">", "0", ":", "\n", "            ", "get_powerset", "(", "comb_seasonalities", ",", "comb_harmonics", ",", "len", "(", "seasonal_periods", ")", ",", "seasonal_periods", ",", "harmonics", ")", "\n", "\n", "", "comb_seasonalities", ".", "append", "(", "[", "]", ")", "\n", "comb_harmonics", ".", "append", "(", "[", "]", ")", "\n", "\n", "if", "'classical'", "in", "model_suite", ":", "\n", "\n", "# CLASSICAL TIME SERIES MODELS WITH RAW DATA", "\n", "\n", "            ", "for", "trend_model", "in", "trend_models", ":", "# model selection runs for all polynomial of degree < max_trend", "\n", "\n", "# This function calculates the regressors needed to model the trend in time series", "\n", "                ", "for", "p", "in", "range", "(", "max_AR_order", ")", ":", "\n", "                    ", "for", "q", "in", "range", "(", "max_MA_order", ")", ":", "\n", "\n", "                        ", "for", "(", "seas", ",", "harm", ")", "in", "zip", "(", "comb_seasonalities", ",", "comb_harmonics", ")", ":", "\n", "\n", "# Construct list of periods and harmonics", "\n", "                            ", "freq_seasonal", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "len", "(", "seas", ")", ")", ":", "\n", "                                ", "freq_seasonal", ".", "append", "(", "{", "'period'", ":", "seas", "[", "s", "]", ",", "'harmonics'", ":", "harm", "[", "s", "]", "}", ")", "\n", "\n", "", "if", "len", "(", "freq_seasonal", ")", "==", "0", ":", "\n", "                                ", "freq_seasonal", "=", "None", "\n", "\n", "", "exog", "=", "exog_input_base", "\n", "\n", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "                                ", "exog_training", "=", "exog", ".", "iloc", "[", ":", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "]", "\n", "", "else", ":", "\n", "                                ", "exog_training", "=", "exog", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", "\n", "\n", "\n", "", "for", "p_seasonal", "in", "range", "(", "max_seasonal_AR_order", ")", ":", "\n", "                                ", "for", "q_seasonal", "in", "range", "(", "max_seasonal_MA_order", ")", ":", "\n", "\n", "                                    ", "if", "len", "(", "exog_training", ".", "columns", ")", ">", "0", ":", "\n", "\n", "                                        ", "model", "=", "sm", ".", "tsa", ".", "UnobservedComponents", "(", "df_training", "[", "'KPI_1'", "]", ",", "autoregressive", "=", "p", ",", "level", "=", "trend_model", ",", "exog", "=", "exog_training", ",", "freq_seasonal", "=", "freq_seasonal", ")", "\n", "\n", "\n", "", "else", ":", "\n", "\n", "                                        ", "model", "=", "sm", ".", "tsa", ".", "UnobservedComponents", "(", "df_training", "[", "'KPI_1'", "]", ",", "autoregressive", "=", "p", ",", "level", "=", "trend_model", ",", "freq_seasonal", "=", "freq_seasonal", ")", "\n", "\n", "\n", "# Fit the data", "\n", "", "flag_model", "=", "1", "\n", "try", ":", "\n", "\n", "                                        ", "model_result", "=", "model", ".", "fit", "(", "disp", "=", "0", ")", "\n", "\n", "try", ":", "\n", "                                            ", "params_list", "=", "model_result", ".", "params", "\n", "", "except", ":", "\n", "                                            ", "flag_model", "=", "0", "\n", "\n", "", "", "except", ":", "\n", "                                        ", "flag_model", "=", "0", "\n", "\n", "# Evaluate model selection criterion", "\n", "", "if", "flag_model", ":", "\n", "\n", "                                        ", "model_sel_criterion", "=", "prediction_error", "(", "df_new", ",", "df_training", ",", "training_window", ",", "test_window", ",", "AIC", "=", "False", ",", "model_result", "=", "model_result", ",", "AR_order", "=", "p", ",", "diff_order", "=", "0", ",", "MA_order", "=", "q", ",", "AR_seasonal_order", "=", "p_seasonal", ",", "freq_seasonal", "=", "freq_seasonal", ",", "MA_seasonal_order", "=", "q_seasonal", ",", "cycle_period", "=", "cycle_period", ",", "enforce_invertibility", "=", "enforce_invertibility", ",", "enforce_stationarity", "=", "enforce_stationarity", ",", "trend_model", "=", "trend_model", ",", "deterministic_order", "=", "None", ",", "exog_input", "=", "exog", ",", "numberOfColumns", "=", "numberOfColumns", ",", "logarithmize", "=", "False", ",", "classical", "=", "True", ")", "\n", "\n", "logging", ".", "debug", "(", "\n", "'Model selection: non-logarithmized, seasonal={} trend_model=\"{}\" AR_order={} MA_order={} seas=\"{}\" harms=\"{}\" seasonal_AR_order={} seasonal_MA_order={} pred_error={}'", ".", "\n", "format", "(", "freq_seasonal", ",", "trend_model", ",", "p", ",", "q", ",", "seas", ",", "harm", ",", "p_seasonal", ",", "q_seasonal", ",", "model_sel_criterion", ")", "\n", ")", "\n", "\n", "if", "model_sel_criterion", "<", "min_model_sel_criterion", ":", "\n", "                                            ", "current_best_model", "=", "model_result", "\n", "selected_trend_model", "=", "trend_model", "\n", "AR_order", "=", "p", "\n", "MA_order", "=", "q", "\n", "diff_seasonal_order", "=", "freq_seasonal", "\n", "AR_seasonal_order", "=", "p_seasonal", "\n", "MA_seasonal_order", "=", "q_seasonal", "\n", "min_model_sel_criterion", "=", "model_sel_criterion", "\n", "exog_input", "=", "exog", "\n", "exog_input_training", "=", "exog_training", "\n", "logarithmize", "=", "False", "\n", "classical", "=", "True", "\n", "selected_width", "=", "None", "\n", "\n", "", "", "model_number", "=", "model_number", "+", "1", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                                        ", "logging", ".", "debug", "(", "'{}: BEGIN MODEL SELECTION. EVALUATION OF MODEL NUMBER {}'", ".", "format", "(", "kpi_name", ",", "model_number", ")", ")", "\n", "", "else", ":", "\n", "                                        ", "logging", ".", "debug", "(", "'{}: BEGIN MODEL SELECTION. EVALUATION OF MODEL NUMBER {}'", ".", "format", "(", "kpi_name", ",", "model_number", ")", ")", "\n", "\n", "# CLASSICAL TIME SERIES MODELS WITH LOGARITHMIZED DATA", "\n", "\n", "# Check if all training data points are >=0 and hence amenable to logarithm transformation", "\n", "\n", "", "", "", "", "", "", "", "if", "(", "(", "df_training", "[", "'KPI_original_1'", "]", ">=", "0.0", ")", "|", "(", "df_training", "[", "'KPI_original_1'", "]", ".", "isnull", "(", ")", ")", ")", ".", "all", "(", ")", ":", "\n", "\n", "# Data", "\n", "                ", "df_log_new", "=", "df_new", ".", "copy", "(", ")", "\n", "df_log_training", "=", "df_training", ".", "copy", "(", ")", "\n", "\n", "df_log_new", "[", "'KPI_1'", "]", "=", "np", ".", "log", "(", "df_log_new", "[", "'KPI_1'", "]", ")", "\n", "df_log_training", "[", "'KPI_1'", "]", "=", "np", ".", "log", "(", "df_log_training", "[", "'KPI_1'", "]", ")", "\n", "\n", "for", "trend_model", "in", "trend_models", ":", "# model selection runs for all polynomial of degree < max_trend", "\n", "\n", "# This function calculates the regressors needed to model the trend in time series", "\n", "                    ", "for", "p", "in", "range", "(", "max_AR_order", ")", ":", "\n", "                        ", "for", "q", "in", "range", "(", "max_MA_order", ")", ":", "\n", "\n", "                            ", "for", "(", "seas", ",", "harm", ")", "in", "zip", "(", "comb_seasonalities", ",", "comb_harmonics", ")", ":", "\n", "\n", "# Construct list of periods and harmonics", "\n", "                                ", "freq_seasonal", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "len", "(", "seas", ")", ")", ":", "\n", "                                    ", "freq_seasonal", ".", "append", "(", "{", "'period'", ":", "seas", "[", "s", "]", ",", "'harmonics'", ":", "harm", "[", "s", "]", "}", ")", "\n", "\n", "", "if", "len", "(", "freq_seasonal", ")", "==", "0", ":", "\n", "                                    ", "freq_seasonal", "=", "None", "\n", "\n", "", "exog", "=", "exog_input_base", "\n", "\n", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "                                    ", "exog_training", "=", "exog", ".", "iloc", "[", ":", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "]", "\n", "", "else", ":", "\n", "                                    ", "exog_training", "=", "exog", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", "\n", "\n", "", "for", "p_seasonal", "in", "range", "(", "max_seasonal_AR_order", ")", ":", "\n", "                                    ", "for", "q_seasonal", "in", "range", "(", "max_seasonal_MA_order", ")", ":", "\n", "\n", "                                        ", "if", "len", "(", "exog_training", ".", "columns", ")", ">", "0", ":", "\n", "\n", "                                            ", "model", "=", "sm", ".", "tsa", ".", "UnobservedComponents", "(", "df_log_training", "[", "'KPI_1'", "]", ",", "autoregressive", "=", "p", ",", "level", "=", "trend_model", ",", "exog", "=", "exog_training", ",", "freq_seasonal", "=", "freq_seasonal", ")", "\n", "\n", "\n", "", "else", ":", "\n", "\n", "                                            ", "model", "=", "sm", ".", "tsa", ".", "UnobservedComponents", "(", "df_log_training", "[", "'KPI_1'", "]", ",", "autoregressive", "=", "p", ",", "level", "=", "trend_model", ",", "freq_seasonal", "=", "freq_seasonal", ")", "\n", "\n", "# Fit the data", "\n", "", "flag_model", "=", "1", "\n", "try", ":", "\n", "                                            ", "model_result", "=", "model", ".", "fit", "(", "disp", "=", "0", ")", "\n", "\n", "try", ":", "\n", "                                                ", "params_list", "=", "model_result", ".", "params", "\n", "", "except", ":", "\n", "                                                ", "flag_model", "=", "0", "\n", "\n", "", "", "except", ":", "\n", "                                            ", "flag_model", "=", "0", "\n", "\n", "# Evaluate model selection criterion", "\n", "", "if", "flag_model", ":", "\n", "\n", "                                            ", "model_sel_criterion", "=", "prediction_error", "(", "df_log_new", ",", "df_log_training", ",", "training_window", ",", "test_window", ",", "AIC", "=", "False", ",", "\n", "model_result", "=", "model_result", ",", "AR_order", "=", "p", ",", "diff_order", "=", "0", ",", "MA_order", "=", "q", ",", "AR_seasonal_order", "=", "p_seasonal", ",", "\n", "freq_seasonal", "=", "freq_seasonal", ",", "MA_seasonal_order", "=", "q_seasonal", ",", "\n", "cycle_period", "=", "cycle_period", ",", "enforce_invertibility", "=", "enforce_invertibility", ",", "enforce_stationarity", "=", "enforce_stationarity", ",", "trend_model", "=", "trend_model", ",", "deterministic_order", "=", "None", ",", "exog_input", "=", "exog", ",", "numberOfColumns", "=", "numberOfColumns", ",", "logarithmize", "=", "True", ",", "classical", "=", "True", ")", "\n", "\n", "logging", ".", "debug", "(", "\n", "'Model selection logarithmized, seasonal {} trend_model=\"{}\" AR_order={} MA_order={} seas=\"{}\" harms=\"{}\" seasonal_AR_order={} seasonal_MA_order={} pred_error={}'", ".", "\n", "format", "(", "freq_seasonal", ",", "trend_model", ",", "p", ",", "q", ",", "seas", ",", "harm", ",", "p_seasonal", ",", "q_seasonal", ",", "model_sel_criterion", ")", "\n", ")", "\n", "\n", "if", "model_sel_criterion", "<", "min_model_sel_criterion", ":", "\n", "                                                ", "current_best_model", "=", "model_result", "\n", "selected_trend_model", "=", "trend_model", "\n", "AR_order", "=", "p", "\n", "MA_order", "=", "q", "\n", "diff_seasonal_order", "=", "freq_seasonal", "\n", "AR_seasonal_order", "=", "p_seasonal", "\n", "MA_seasonal_order", "=", "q_seasonal", "\n", "min_model_sel_criterion", "=", "model_sel_criterion", "\n", "exog_input", "=", "exog", "\n", "exog_input_training", "=", "exog_training", "\n", "logarithmize", "=", "True", "\n", "classical", "=", "True", "\n", "selected_width", "=", "None", "\n", "\n", "", "", "model_number", "=", "model_number", "+", "1", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                                            ", "logging", ".", "debug", "(", "'{}: BEGIN MODEL SELECTION. EVALUATION OF MODEL NUMBER {}'", ".", "format", "(", "kpi_name", ",", "model_number", ")", ")", "\n", "", "else", ":", "\n", "                                            ", "logging", ".", "debug", "(", "\n", "'{}: BEGIN MODEL SELECTION. EVALUATION OF MODEL NUMBER {}'", ".", "format", "(", "kpi_name", ",", "\n", "model_number", ")", ")", "\n", "\n", "", "", "", "", "", "", "", "", "", "logging", ".", "debug", "(", "\n", "'{} Selected model: classical={} logarithmize={} width {} trend_model=\"{}\" AR_order={} MA_order={} seas=\"{}\" seasonal_AR_order={} seasonal_MA_order={} pred_error={}'", ".", "\n", "format", "(", "kpi_name", ",", "classical", ",", "logarithmize", ",", "selected_width", ",", "selected_trend_model", ",", "AR_order", ",", "MA_order", ",", "diff_seasonal_order", ",", "AR_seasonal_order", ",", "\n", "MA_seasonal_order", ",", "min_model_sel_criterion", ")", ")", "\n", "\n", "# PARAMETER ESTIMATION", "\n", "if", "classical", ":", "\n", "\n", "            ", "if", "logarithmize", ":", "\n", "\n", "                ", "if", "len", "(", "exog_input_training", ".", "columns", ")", ">", "0", ":", "\n", "\n", "                    ", "model", "=", "sm", ".", "tsa", ".", "UnobservedComponents", "(", "df_log_training", "[", "'KPI_1'", "]", ",", "autoregressive", "=", "AR_order", ",", "level", "=", "selected_trend_model", ",", "exog", "=", "exog_input_training", ",", "freq_seasonal", "=", "diff_seasonal_order", ")", "\n", "\n", "\n", "", "else", ":", "\n", "\n", "\n", "                    ", "model", "=", "sm", ".", "tsa", ".", "UnobservedComponents", "(", "df_log_training", "[", "'KPI_1'", "]", ",", "autoregressive", "=", "AR_order", ",", "level", "=", "selected_trend_model", ",", "freq_seasonal", "=", "diff_seasonal_order", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "                ", "if", "len", "(", "exog_input_training", ".", "columns", ")", ">", "0", ":", "\n", "\n", "                    ", "model", "=", "sm", ".", "tsa", ".", "UnobservedComponents", "(", "df_training", "[", "'KPI_1'", "]", ",", "autoregressive", "=", "AR_order", ",", "level", "=", "selected_trend_model", ",", "exog", "=", "exog_input_training", ",", "freq_seasonal", "=", "diff_seasonal_order", ")", "\n", "\n", "\n", "", "else", ":", "\n", "\n", "                    ", "model", "=", "sm", ".", "tsa", ".", "UnobservedComponents", "(", "df_training", "[", "'KPI_1'", "]", ",", "autoregressive", "=", "AR_order", ",", "level", "=", "selected_trend_model", ",", "freq_seasonal", "=", "diff_seasonal_order", ")", "\n", "\n", "\n", "\n", "# Fit the data", "\n", "", "", "model_result", "=", "model", ".", "fit", "(", "disp", "=", "0", ")", "\n", "current_best_model", "=", "model_result", "\n", "\n", "", "return", "[", "current_best_model", ",", "selected_trend_model", ",", "AR_order", ",", "MA_order", ",", "diff_seasonal_order", ",", "AR_seasonal_order", ",", "MA_seasonal_order", ",", "\n", "exog_input", ",", "logarithmize", ",", "classical", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.univariate_AD.pointanomalyThreshold": [[20, 22], ["scipy.stats.norm.cdf", "float", "confidence_band.split"], "function", ["None"], ["def", "pointanomalyThreshold", "(", "confidence_band", ")", ":", "\n", "    ", "return", "2", "*", "(", "1", "-", "norm", ".", "cdf", "(", "float", "(", "confidence_band", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", ",", "loc", "=", "0", ",", "scale", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.univariate_AD.perform_AD": [[23, 1194], ["datetime.datetime.now", "data_extractor.load_data", "time.time", "univariate_AD.pointanomalyThreshold", "tools.data_transformer", "df_complete_data.copy", "range", "tools.prior_outlier_detection", "pandas.concat", "time.time", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "isinstance", "pandas.to_datetime", "len", "json.dumps", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "json.dumps", "logging.debug", "json.dumps", "logging.debug", "logging.debug", "logging.debug", "tools.get_holidays_and_release_features", "exog_input.columns.tolist", "logging.debug", "logging.debug", "df_complete_data.loc[].copy", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "float", "df_training[].count", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "time.time", "logging.debug", "logging.debug", "isinstance", "len", "df_new[].iloc[].isnull().sum", "time.time", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "pandas.to_datetime", "logging.debug", "logging.debug", "str", "str", "logging.debug", "logging.debug", "json.dumps", "logging.debug", "logging.debug", "logging.debug", "str", "str", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "tools.get_holidays_and_release_features", "tools.get_holidays_and_release_features", "time.time", "model.model_selection.select_best_model", "int", "len", "time.time", "pd.concat.rename", "pandas.DataFrame", "time.time", "tools.plot_generator.generate_plot", "logging.debug", "len", "len", "logging.debug", "logging.debug", "str", "str", "logging.debug", "logging.debug", "str", "str", "str", "str", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "time.time", "logging.debug", "logging.debug", "df_new[].iloc[].isnull", "df_new[].iloc[].isnull", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "isinstance", "json.dumps", "logging.debug", "time.time", "logging.debug", "logging.debug", "numpy.zeros", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "time.time", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "json.dumps", "logging.debug", "pandas.DataFrame", "len", "len", "model_result.summary", "len", "df_anom.append.append", "pd.concat.copy", "numpy.log", "df_training.copy", "numpy.log", "logging.debug", "logging.debug", "numpy.abs", "numpy.square", "str", "np.square.mean", "logging.debug", "logging.debug", "numpy.isnan", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "logging.debug", "str", "str", "logging.debug", "logging.debug", "pandas.DataFrame", "range", "createTFDataset", "numpy.array", "numpy.array", "range", "range", "createTFDataset", "numpy.array", "numpy.array", "range", "numpy.isnan().all", "len", "len", "len", "plt.savefig", "plt.savefig", "len", "statsmodels.tsa.UnobservedComponents", "statsmodels.tsa.UnobservedComponents", "sm.tsa.UnobservedComponents.smooth", "sm.tsa.UnobservedComponents.smooth", "resPoint.extend.get_prediction", "resPoint.extend.extend", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "deepnetwork.defineModel", "deepnetwork.defineModel.set_weights", "deepnetwork.defineModel.numpy", "print", "len", "numpy.append", "numpy.append", "numpy.exp", "numpy.exp", "numpy.exp", "numpy.exp", "len", "statsmodels.tsa.UnobservedComponents", "statsmodels.tsa.UnobservedComponents", "sm.tsa.UnobservedComponents.smooth", "sm.tsa.UnobservedComponents.smooth", "resPoint.extend.get_prediction", "resPoint.extend.extend", "numpy.sqrt", "deepnetwork.defineModel", "deepnetwork.defineModel.set_weights", "deepnetwork.defineModel.numpy", "print", "len", "numpy.append", "numpy.append", "numpy.floor", "len", "round", "numpy.isnan", "pandas.concat", "predict_label.reset_index.reset_index", "predict_label[].map", "df_new[].to_frame", "pandas.DataFrame", "pandas.DataFrame", "plt.savefig", "plt.savefig", "plt.savefig", "plt.savefig", "numpy.sqrt", "resPoint.get_prediction.t_test", "model_result.get_weights", "numpy.ones", "numpy.std", "resPoint.get_prediction.t_test", "model_result.get_weights", "numpy.ones", "numpy.std", "numpy.log10", "numpy.isnan", "numpy.isnan", "predict_label_conf.reset_index.reset_index", "predict_label_conf[].map", "predict_label_group.append", "numpy.isnan", "predict_label.reset_index.reset_index", "predict_label[].map", "df_new[].to_frame", "pandas.DataFrame", "int", "int", "numpy.exp", "numpy.exp", "deepnetwork.defineModel.", "scipy.stats.norm.interval", "scipy.stats.norm.interval", "numpy.exp", "numpy.exp", "int", "int", "resPoint.get_prediction.conf_int", "resPoint.get_prediction.conf_int", "deepnetwork.defineModel.", "len", "scipy.stats.norm.interval", "scipy.stats.norm.interval", "numpy.isnan", "int", "len", "pandas.DataFrame", "pandas.DataFrame", "resPoint.get_prediction.conf_int", "resPoint.get_prediction.conf_int", "df_anom.append.append", "df_anom.append.append", "numpy.square", "df_anom.append.append", "df_anom.append.append", "df_anom.append.append", "df_anom.append.append", "scipy.stats.norm.interval", "scipy.stats.norm.interval", "df_anom.append.append", "df_anom.append.append", "numpy.abs().max", "numpy.isnan", "int", "numpy.isnan", "numpy.isnan", "int", "scipy.stats.norm.interval", "scipy.stats.norm.interval", "resPoint.get_prediction.conf_int", "resPoint.get_prediction.conf_int", "numpy.sqrt", "numpy.sqrt().max", "resPoint.get_prediction.conf_int", "resPoint.get_prediction.conf_int", "univariate_AD.pointanomalyThreshold", "univariate_AD.pointanomalyThreshold", "int", "int", "numpy.abs", "alertingDate.strftime", "alertingDate.strftime", "np.square.mean", "univariate_AD.pointanomalyThreshold", "univariate_AD.pointanomalyThreshold", "univariate_AD.pointanomalyThreshold", "univariate_AD.pointanomalyThreshold", "numpy.sqrt", "alertingDate.strftime", "alertingDate.strftime", "univariate_AD.pointanomalyThreshold", "univariate_AD.pointanomalyThreshold", "len", "len"], "function", ["home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_extractor_nonProd.load_data", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.univariate_AD.pointanomalyThreshold", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_transformer.data_transformer", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.data_transformer.prior_outlier_detection", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.get_holidays_and_release_features", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.get_holidays_and_release_features", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.time_series_metadata.get_holidays_and_release_features", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.model_selection.select_best_model", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.tools.plot_generator.generate_plot", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.univariate_AD.pointanomalyThreshold", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.univariate_AD.pointanomalyThreshold", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.univariate_AD.pointanomalyThreshold", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.univariate_AD.pointanomalyThreshold", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.univariate_AD.pointanomalyThreshold", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.univariate_AD.pointanomalyThreshold", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.univariate_AD.pointanomalyThreshold", "home.repos.pwc.inspect_result.nikhilgalagali_adservice.model.univariate_AD.pointanomalyThreshold"], ["", "def", "perform_AD", "(", "operation_mode", ",", "model_type", ",", "data_source", ",", "model_json", ",", "kpi_name", ",", "perform_point_anomaly", ",", "delay", ",", "perform_trend_anomaly", ",", "training_window", ",", "test_window", ",", "database", "=", "False", ",", "alertingDate", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ":", "\n", "\n", "#start_time=time.time()", "\n", "\n", "######################", "\n", "# Global parameters", "\n", "######################", "\n", "    ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", "or", "operation_mode", "==", "'fast'", ":", "# production  ", "\n", "        ", "import", "tools", ".", "data_extractor", "as", "data_extractor", "\n", "", "else", ":", "\n", "        ", "import", "tools", ".", "data_extractor_nonProd", "as", "data_extractor", "\n", "\n", "", "autoregressive_order", "=", "0", "\n", "MA_order", "=", "0", "\n", "plottingWindow", "=", "1.0", "\n", "plottingYlim", "=", "0.2", "\n", "data_scale", "=", "0", "\n", "onlyData", "=", "False", "\n", "if", "operation_mode", "==", "'test'", ":", "\n", "        ", "write_to_file", "=", "True", "\n", "", "else", ":", "\n", "        ", "write_to_file", "=", "False", "\n", "", "rule_based", "=", "False", "\n", "enforce_stationarity", "=", "False", "\n", "enforce_invertibility", "=", "False", "\n", "enable_seasonality", "=", "True", "\n", "confidence_band_collection", "=", "[", "'3-sigma'", ",", "'3.5-sigma'", ",", "'4-sigma'", ",", "'4.5-sigma'", ",", "'5-sigma'", ",", "'5.5-sigma'", ",", "'6-sigma'", "]", "\n", "\n", "\n", "# THESE ARE DEFAULT VALUES   ", "\n", "\n", "display_trend_anomaly", "=", "True", "\n", "if", "operation_mode", "==", "'validation'", ":", "\n", "        ", "display_all_anomalies", "=", "True", "\n", "", "else", ":", "\n", "        ", "display_all_anomalies", "=", "False", "# point", "\n", "", "display_all_trend_anomalies", "=", "False", "# trend", "\n", "\n", "holidays_and_releases", "=", "True", "\n", "# Used to defined the training set when user defines it from dashboard", "\n", "user_defined", "=", "False", "\n", "\n", "logarithmize", "=", "False", "\n", "model_suite", "=", "[", "'classical'", "]", "\n", "trend_models", "=", "[", "'deterministic trend'", ",", "'local level'", ",", "'local linear trend'", "]", "\n", "\n", "max_AR_order", "=", "3", "\n", "max_MA_order", "=", "1", "\n", "\n", "max_seasonal_AR_order", "=", "1", "\n", "max_seasonal_MA_order", "=", "1", "\n", "\n", "start_time", "=", "0", "\n", "\n", "##############################", "\n", "## EXTRACT DATA", "\n", "############################## ", "\n", "\n", "df_complete_data", ",", "df_label_data", ",", "likelihoodHashmap", ",", "model_name", ",", "kpi_name", ",", "app_name", ",", "model_json", ",", "user_defined", ",", "misc_values", ",", "type_of_anomaly", ",", "trend_anomaly_window", ",", "confidence_band", ",", "threshold_probability", ",", "trendPrior", ",", "data_frequency", "=", "data_extractor", ".", "load_data", "(", "operation_mode", ",", "model_type", ",", "data_source", ",", "model_json", ",", "kpi_name", ",", "database", ",", "alertingDate", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: START TIME {}'", ".", "format", "(", "kpi_name", ",", "start_time", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'START TIME {}'", ".", "format", "(", "start_time", ")", ")", "\n", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: SUCCESS LOADING DATA. NUMBER OF DATA POINTS PROVIDED {}'", ".", "format", "(", "kpi_name", ",", "len", "(", "df_complete_data", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'SUCCESS LOADING DATA. NUMBER OF DATA POINTS PROVIDED {}'", ".", "format", "(", "len", "(", "df_complete_data", ")", ")", ")", "\n", "\n", "##############################################################################", "\n", "###### SET POINT ANOMALY DETECTION THRESHOLD BASED ON CONFIDENCE LEVEL DESIRED", "\n", "##############################################################################", "\n", "", "threshold", "=", "pointanomalyThreshold", "(", "confidence_band", ")", "\n", "\n", "#####################################################", "\n", "## UPDATE ANOMALY DETECTION TYPE IF PASSED BY INVOKER", "\n", "#####################################################         ", "\n", "\n", "if", "type_of_anomaly", "!=", "None", ":", "# If explicit invocation of a specific type of anomaly detection", "\n", "\n", "        ", "if", "type_of_anomaly", "==", "'POINT'", ":", "\n", "\n", "            ", "perform_trend_anomaly", "=", "False", "\n", "\n", "", "elif", "type_of_anomaly", "==", "'TREND'", ":", "\n", "\n", "            ", "perform_point_anomaly", "=", "False", "\n", "\n", "# IF ONLY TREND ANOMALY DETECTION IN TRAINER MODE, RETURN IMMEDIATELY", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", ":", "\n", "\n", "                ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                    ", "logging", ".", "debug", "(", "'{}: TRAINER/TESTER INVOKED WITH TREND ANOMALY DETECTION. EXITING'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                    ", "logging", ".", "debug", "(", "'TRAINER/TESTER INVOKED WITH TREND ANOMALY DETECTION. EXITING'", ")", "\n", "\n", "", "param_dict", "=", "{", "\n", "\"evaluation_status\"", ":", "str", "(", "'FAILURE'", ")", ",", "\n", "\"status_description\"", ":", "str", "(", "'TRAINER/TESTER INVOKED WITH TREND ANOMALY DETECTION'", ")", "\n", "}", "\n", "\n", "json_string", "=", "json", ".", "dumps", "(", "param_dict", ",", "separators", "=", "(", "','", ",", "':'", ")", ")", "\n", "\n", "## Output the model coefficients as a JSON string", "\n", "# print('output#'+json_string)", "\n", "\n", "logging", ".", "debug", "(", "'{}: json_string {}'", ".", "format", "(", "kpi_name", ",", "json_string", ")", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                    ", "logging", ".", "debug", "(", "'{}: Ending Python script FAILURE {}'", ".", "format", "(", "kpi_name", ",", "type_of_anomaly", ")", ")", "\n", "", "else", ":", "\n", "                    ", "logging", ".", "debug", "(", "'Ending Python script FAILURE'", ")", "\n", "\n", "", "return", "json_string", "\n", "\n", "#################################################################", "\n", "## DATASET TRIMMING IN CASE TRAINING WINDOW PASSED AS TIME STAMPS", "\n", "################################################################# ", "\n", "\n", "", "", "", "if", "not", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "        ", "df_complete_data", ".", "loc", "[", ":", ",", "0", "]", "=", "pd", ".", "to_datetime", "(", "df_complete_data", ".", "loc", "[", ":", ",", "0", "]", ")", "\n", "df_complete_data", "=", "df_complete_data", ".", "loc", "[", "df_complete_data", ".", "loc", "[", ":", ",", "0", "]", ">=", "training_window", "[", "0", "]", "]", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "            ", "df_label_data", ".", "loc", "[", ":", ",", "0", "]", "=", "pd", ".", "to_datetime", "(", "df_label_data", ".", "loc", "[", ":", ",", "0", "]", ")", "\n", "df_label_data", "=", "df_label_data", ".", "loc", "[", "df_label_data", ".", "loc", "[", ":", ",", "0", "]", ">=", "training_window", "[", "0", "]", "]", "\n", "\n", "#########################################################################################", "\n", "### DATA INTEGRITY CHECK: CHECK MINIMUM DATASET PROVIDED", "\n", "#########################################################################################", "\n", "\n", "", "", "if", "len", "(", "df_complete_data", ")", "<", "24", ":", "# based on the min number of data needed to learn min set of parameters", "\n", "\n", "        ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "            ", "logging", ".", "debug", "(", "'{}: FAILED SUFFICIENT DATA NOT PROVIDED. EXITING'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "'FAILED SUFFICIENT DATA NOT PROVIDED. EXITING'", ")", "\n", "\n", "", "param_dict", "=", "{", "\n", "\"evaluation_status\"", ":", "str", "(", "'FAILURE'", ")", ",", "\n", "\"status_description\"", ":", "str", "(", "'SUFFICIENT DATA NOT PROVIDED'", ")", "\n", "}", "\n", "\n", "json_string", "=", "json", ".", "dumps", "(", "param_dict", ",", "separators", "=", "(", "','", ",", "':'", ")", ")", "\n", "\n", "## Output the model coefficients as a JSON string", "\n", "# print('output#'+json_string)", "\n", "\n", "logging", ".", "debug", "(", "'{}: json_string {}'", ".", "format", "(", "kpi_name", ",", "json_string", ")", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "            ", "logging", ".", "debug", "(", "'{}: Ending Python script FAILURE {}'", ".", "format", "(", "kpi_name", ",", "type_of_anomaly", ")", ")", "\n", "return", "json_string", "\n", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "'Ending Python script FAILURE'", ")", "\n", "\n", "if", "operation_mode", "==", "'validation'", ":", "\n", "\n", "# If batch evaluation failed because of insufficient data return None", "\n", "                ", "if", "model_type", "==", "'whistler_batch'", ":", "\n", "                    ", "return", "pd", ".", "DataFrame", "(", "[", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "return", "\n", "\n", "##############################", "\n", "### TRANSFORM DATA", "\n", "##############################", "\n", "\n", "", "", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: TRANSFORMING DATA'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'TRANSFORMING DATA'", ")", "\n", "\n", "", "df_complete_data", ",", "df_label_data", ",", "data_scale", ",", "training_window", ",", "test_window", ",", "data_frequency", ",", "cycle_period", ",", "seasonal_periods", ",", "harmonics", ",", "trend_anomaly_window", ",", "originalColumnNames", ",", "numberOfColumns", ",", "misc_values", "=", "data_transformer", ".", "data_transformer", "(", "df_complete_data", ",", "df_label_data", ",", "operation_mode", ",", "data_scale", ",", "training_window", ",", "test_window", ",", "kpi_name", ",", "perform_point_anomaly", ",", "misc_values", ",", "trend_anomaly_window", ",", "data_frequency", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: SUCCESS TRANSFORMING DATA'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'SUCCESS TRANSFORMING DATA'", ")", "\n", "\n", "#########################################################################################", "\n", "### DATA INTEGRITY CHECK: CHECK MINIMUM DATASET PROVIDED FOR BATCH EVALUATION", "\n", "#########################################################################################", "\n", "\n", "", "if", "(", "model_type", "in", "[", "'whistler_batch'", "]", ")", ":", "\n", "\n", "        ", "if", "(", "data_frequency", "==", "'weekly'", "and", "(", "len", "(", "df_complete_data", ")", "<", "48", ")", ")", "or", "(", "data_frequency", "==", "'monthly'", "and", "(", "len", "(", "df_complete_data", ")", "<", "36", ")", ")", ":", "\n", "\n", "# This is based on the minimum number of data needed to learn minimum set of parameters", "\n", "\n", "            ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: FAILED SUFFICIENT DATA NOT PROVIDED. EXITING'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'FAILED SUFFICIENT DATA NOT PROVIDED. EXITING'", ")", "\n", "\n", "", "param_dict", "=", "{", "\n", "\"evaluation_status\"", ":", "str", "(", "'FAILURE'", ")", ",", "\n", "\"status_description\"", ":", "str", "(", "'SUFFICIENT DATA NOT PROVIDED'", ")", "\n", "}", "\n", "\n", "json_string", "=", "json", ".", "dumps", "(", "param_dict", ",", "separators", "=", "(", "','", ",", "':'", ")", ")", "\n", "\n", "## Output the model coefficients as a JSON string", "\n", "# print('output#'+json_string)", "\n", "\n", "logging", ".", "debug", "(", "'{}: json_string {}'", ".", "format", "(", "kpi_name", ",", "json_string", ")", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: Ending Python script FAILURE {}'", ".", "format", "(", "kpi_name", ",", "type_of_anomaly", ")", ")", "\n", "return", "json_string", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'Ending Python script FAILURE'", ")", "\n", "\n", "if", "operation_mode", "==", "'validation'", ":", "\n", "\n", "# If batch evaluation failed because of insufficient data return None", "\n", "                    ", "if", "model_type", "==", "'whistler_batch'", ":", "\n", "                        ", "return", "pd", ".", "DataFrame", "(", "[", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "return", "\n", "\n", "\n", "#############################################################", "\n", "### DATA INTERGRITY CHECK: CHECK IF DEGENERATE DATASET PASSED", "\n", "#############################################################", "\n", "\n", "", "", "", "", "if", "data_scale", "[", "0", "]", "==", "-", "np", ".", "inf", ":", "\n", "\n", "        ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "            ", "logging", ".", "debug", "(", "'{}: ONLY ZEROS PASSED. EXITING'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "'ONLY ZEROS PASSED. EXITING'", ")", "\n", "\n", "", "param_dict", "=", "{", "\n", "\"evaluation_status\"", ":", "str", "(", "'FAILURE'", ")", ",", "\n", "\"status_description\"", ":", "str", "(", "'ONLY ZEROS PASSED'", ")", "\n", "}", "\n", "\n", "\n", "json_string", "=", "json", ".", "dumps", "(", "param_dict", ",", "separators", "=", "(", "','", ",", "':'", ")", ")", "\n", "\n", "## Output the model coefficients as a JSON string", "\n", "# print('output#'+json_string)", "\n", "\n", "logging", ".", "debug", "(", "'{}: json_string {}'", ".", "format", "(", "kpi_name", ",", "json_string", ")", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "            ", "logging", ".", "debug", "(", "'{}: Ending Python script FAILURE {}'", ".", "format", "(", "kpi_name", ",", "type_of_anomaly", ")", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "'Ending Python script FAILURE'", ")", "\n", "\n", "", "return", "json_string", "\n", "\n", "############################################################", "\n", "### DATA INTEGRITY CHECK: DATA FREQUENCY AVAILABILITY", "\n", "############################################################", "\n", "\n", "", "if", "data_frequency", "==", "None", ":", "\n", "\n", "        ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "            ", "logging", ".", "debug", "(", "'{}: DATA FREQUENCY PROVIDED NOT AMONG W, D, H, M, MIN. EXITING'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "param_dict", "=", "{", "\n", "\"evaluation_status\"", ":", "str", "(", "'FAILURE'", ")", ",", "\n", "\"status_description\"", ":", "str", "(", "'DATA FREQUENCY PROVIDED NOT AMONG W, D, H, M, MIN.'", ")", "\n", "}", "\n", "\n", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "'FAILED COULD NOT DETERMINE DATA FREQUENCY. EXITING'", ")", "\n", "\n", "param_dict", "=", "{", "\n", "\"evaluation_status\"", ":", "str", "(", "'FAILURE'", ")", ",", "\n", "\"status_description\"", ":", "str", "(", "'COULD NOT DETERMINE DATA FREQUENCY'", ")", "\n", "}", "\n", "\n", "", "json_string", "=", "json", ".", "dumps", "(", "param_dict", ",", "separators", "=", "(", "','", ",", "':'", ")", ")", "\n", "\n", "## Output the model coefficients as a JSON string", "\n", "# print('output#'+json_string)", "\n", "\n", "logging", ".", "debug", "(", "'{}: json_string {}'", ".", "format", "(", "kpi_name", ",", "json_string", ")", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "            ", "logging", ".", "debug", "(", "'{}: Ending Python script FAILURE {}'", ".", "format", "(", "kpi_name", ",", "type_of_anomaly", ")", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "'Ending Python script FAILURE'", ")", "\n", "\n", "", "return", "json_string", "\n", "\n", "##################################", "\n", "## GENERATE EXOGENOUS VARIABLES      ", "\n", "##################################    ", "\n", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: GENERATING EXOGENOUS VARIABLES'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'GENERATING EXOGENOUS VARIABLES'", ")", "\n", "\n", "", "if", "(", "operation_mode", "!=", "'executor'", "and", "operation_mode", "!=", "'tester'", ")", ":", "\n", "\n", "# trainer,test,validation", "\n", "\n", "        ", "[", "exog_input", ",", "num_spec_reg", ",", "us_holiday_flag", ",", "chinese_holiday_flag", "]", "=", "time_series_metadata", ".", "get_holidays_and_release_features", "(", "df_complete_data", ",", "data_frequency", ",", "holidays_and_releases", ",", "kpi_name", ",", "training_window", ",", "operation_mode", ",", "misc_values", ")", "\n", "\n", "exog_input_base_columns", "=", "exog_input", ".", "columns", ".", "tolist", "(", ")", "\n", "\n", "", "else", ":", "\n", "\n", "# tester,executor", "\n", "\n", "        ", "if", "perform_point_anomaly", ":", "\n", "            ", "[", "exog_input", ",", "num_spec_reg", ",", "us_holiday_flag", ",", "chinese_holiday_flag", "]", "=", "time_series_metadata", ".", "get_holidays_and_release_features", "(", "df_complete_data", ",", "data_frequency", ",", "holidays_and_releases", ",", "kpi_name", ",", "training_window", ",", "operation_mode", ",", "misc_values", ",", "training_data_start_time", ",", "exog_input_base_columns", ")", "\n", "", "else", ":", "\n", "            ", "[", "exog_input", ",", "num_spec_reg", ",", "us_holiday_flag", ",", "chinese_holiday_flag", "]", "=", "time_series_metadata", ".", "get_holidays_and_release_features", "(", "df_complete_data", ",", "data_frequency", ",", "holidays_and_releases", ",", "kpi_name", ",", "training_window", ",", "operation_mode", ",", "misc_values", ")", "\n", "\n", "\n", "", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: SUCCESS GENERATING EXOGENOUS VARIABLES. NAMES: {}, LIST: {}'", ".", "format", "(", "kpi_name", ",", "exog_input", ".", "columns", ",", "exog_input", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'SUCCESS GENERATING EXOGENOUS VARIABLES. NAMES: {}, LIST: {}'", ".", "format", "(", "exog_input", ".", "columns", ",", "exog_input", ")", ")", "\n", "\n", "\n", "######################################", "\n", "### GENERATE A COPY OF ORIGINAL DATA", "\n", "######################################", "\n", "\n", "# Initialize trend_boundaries as a dataframe", "\n", "", "trend_boundaries", "=", "df_complete_data", ".", "copy", "(", ")", "\n", "trend_boundaries", "[", ":", "]", "=", "0.0", "\n", "\n", "# Keep a copy of the orginal data column", "\n", "for", "c", "in", "range", "(", "1", ",", "numberOfColumns", ")", ":", "\n", "        ", "df_complete_data", ".", "loc", "[", ":", ",", "'KPI_original_{}'", ".", "format", "(", "c", ")", "]", "=", "df_complete_data", ".", "loc", "[", ":", ",", "'KPI_{}'", ".", "format", "(", "c", ")", "]", ".", "copy", "(", ")", "\n", "\n", "\n", "##############################", "\n", "### FEEDBACK ASSIMILATION", "\n", "##############################", "\n", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: ASSIMILATING FEEDBACK'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'ASSIMILATING FEEDBACK'", ")", "\n", "\n", "# Any postive anomaly label provided by user    ", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "df_complete_data", ".", "loc", "[", "df_label_data", "[", "'KPI_1'", "]", "==", "'Y'", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: SUCCESS ASSIMILATING FEEDBACK'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'SUCCESS ASSIMILATING FEEDBACK'", ")", "\n", "\n", "#####################################################################", "\n", "### PRELIMINARY OUTLIER DETECTION", "\n", "#####################################################################", "\n", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: AUTOMATIC OUTLIER DETECTION'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'AUTOMATIC OUTLIER DETECTION'", ")", "\n", "\n", "# Raw data", "\n", "", "[", "df_training", ",", "df_test", ",", "df_anom_training", ",", "count_of_anomalies_training", "]", "=", "data_transformer", ".", "prior_outlier_detection", "(", "df_complete_data", ",", "df_label_data", ",", "us_holiday_flag", ",", "chinese_holiday_flag", ",", "operation_mode", ",", "kpi_name", ",", "training_window", ",", "cycle_period", ",", "plottingWindow", ",", "model_type", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: SUCCESS AUTOMATIC OUTLIER DETECTION'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'SUCCESS AUTOMATIC OUTLIER DETECTION'", ")", "\n", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: ZERO VALUE ANOMALY DETECTION'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'ZERO VALUE ANOMALY DETECTION'", ")", "\n", "\n", "", "fraction_of_zeros", "=", "float", "(", "(", "df_training", "[", "'KPI_1'", "]", "==", "0.0", ")", ".", "sum", "(", ")", ")", "/", "(", "df_training", "[", "'KPI_1'", "]", ")", ".", "count", "(", ")", "\n", "df_training", ".", "loc", "[", "df_training", "[", "'KPI_1'", "]", "==", "0.0", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: SUCCESS ZERO VALUE ANOMALY DETECTION'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'SUCCESS ZERO VALUE ANOMALY DETECTION'", ")", "\n", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: COMBINING TRAINING AND TEST DATA'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'COMBINING TRAINING AND TEST DATA'", ")", "\n", "\n", "# combine (modified) training and test data", "\n", "", "df_new", "=", "pd", ".", "concat", "(", "[", "df_training", ",", "df_test", "]", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{}: SUCCESS COMBINING TRAINING AND TEST DATA'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'SUCCESS COMBINING TRAINING AND TEST DATA'", ")", "\n", "\n", "#############################", "\n", "## RECORD PREPROCESSING EXECUTION TIME", "\n", "#############################", "\n", "\n", "", "elapsed_time_preprocessing", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{} {}: PREPROCESSING EXECUTION TIME {}'", ".", "format", "(", "app_name", ",", "kpi_name", ",", "elapsed_time_preprocessing", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'PREPROCESSING EXECUTION TIME {}'", ".", "format", "(", "elapsed_time_preprocessing", ")", ")", "\n", "\n", "\n", "########################################", "\n", "#### TRAINING (POINT ANOMALY DETECTION)", "\n", "########################################", "\n", "", "if", "operation_mode", "!=", "'tester'", "and", "operation_mode", "!=", "'executor'", ":", "\n", "\n", "        ", "if", "perform_point_anomaly", ":", "\n", "\n", "#-----------", "\n", "### TRAINING", "\n", "#-----------", "\n", "            ", "start_time_pointAD", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: BEGIN MODEL SELECTION'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'BEGIN MODEL SELECTION'", ")", "\n", "\n", "## Model selection", "\n", "", "[", "model_result", ",", "selected_trend_model", ",", "autoregressive_order", ",", "MA_order", ",", "freq_seasonal", ",", "AR_seasonal_order", ",", "MA_seasonal_order", ",", "exog_input", ",", "logarithmize", ",", "classical", "]", "=", "select_best_model", "(", "df_new", ",", "df_training", ",", "model_suite", ",", "exog_input", ",", "enable_seasonality", ",", "trend_models", ",", "max_AR_order", ",", "max_MA_order", ",", "max_seasonal_AR_order", ",", "max_seasonal_MA_order", ",", "cycle_period", ",", "seasonal_periods", ",", "harmonics", ",", "enforce_invertibility", ",", "enforce_stationarity", ",", "training_window", ",", "test_window", ",", "numberOfColumns", ",", "operation_mode", ",", "kpi_name", ")", "\n", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: SUCCESS BEGIN MODEL SELECTION'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'SUCCESS BEGIN MODEL SELECTION'", ")", "\n", "\n", "#-------------------    ", "\n", "# Save trained model", "\n", "#-------------------", "\n", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: SAVING TRAINED MODEL'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'SAVING TRAINED MODEL'", ")", "\n", "\n", "", "", "if", "operation_mode", "==", "'production'", "or", "operation_mode", "==", "'test'", "or", "operation_mode", "==", "'validation'", ":", "\n", "\n", "            ", "if", "perform_point_anomaly", ":", "\n", "                ", "logging", ".", "debug", "(", "model_result", ".", "summary", "(", ")", ")", "\n", "\n", "", "", "if", "perform_point_anomaly", ":", "\n", "\n", "            ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: SUCCESS SAVING TRAINED MODEL'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'SUCCESS SAVING TRAINED MODEL'", ")", "\n", "\n", "#############################", "\n", "## RECORD TRAINING EXECUTION TIME", "\n", "#############################", "\n", "\n", "", "elapsed_time_pointAD", "=", "time", ".", "time", "(", ")", "-", "start_time_pointAD", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{} {}: POINT ANOMALY TRAINING EXECUTION TIME {}'", ".", "format", "(", "app_name", ",", "kpi_name", ",", "elapsed_time_pointAD", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'POINT ANOMALY TRAINING EXECUTION TIME {}'", ".", "format", "(", "elapsed_time_pointAD", ")", ")", "\n", "\n", "####################################################            ", "\n", "# EVALUATION/SERVE", "\n", "####################################################", "\n", "", "", "", "evaluation_start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "operation_mode", "!=", "'trainer'", ":", "\n", "\n", "        ", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "            ", "prediction_start", "=", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", "\n", "", "else", ":", "\n", "            ", "prediction_start", "=", "len", "(", "df_new", ".", "loc", "[", "training_window", "[", "0", "]", ":", "training_window", "[", "1", "]", "]", ")", "\n", "", "prediction_end", "=", "len", "(", "df_new", ")", "\n", "\n", "# count of anomalies in test data", "\n", "count_of_anomalies", "=", "df_new", "[", "'KPI_1'", "]", ".", "iloc", "[", "prediction_start", ":", "]", ".", "isnull", "(", ")", ".", "sum", "(", ")", "\n", "df_anom", "=", "df_new", ".", "iloc", "[", "prediction_start", ":", "]", ".", "loc", "[", "df_new", "[", "'KPI_1'", "]", ".", "iloc", "[", "prediction_start", ":", "]", ".", "isnull", "(", ")", "]", "\n", "\n", "##################################", "\n", "# POINT ANOMALY DETECTION", "\n", "##################################", "\n", "\n", "if", "perform_point_anomaly", ":", "# ", "\n", "\n", "############################################################################", "\n", "# RECORD POINT ANOMALY SERVING START TIME", "\n", "############################################################################", "\n", "\n", "            ", "start_time_pointAD", "=", "time", ".", "time", "(", ")", "\n", "\n", "#####################################################################################    ", "\n", "#### FORECASTING CODE BEGINS    ", "\n", "#####################################################################################    ", "\n", "# forecasting for future date: We use one-step ahead prediction", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: EVALUATING FORECASTS'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'EVALUATING FORECASTS'", ")", "\n", "\n", "", "if", "True", ":", "\n", "\n", "# Anomalies because value is zero", "\n", "                ", "if", "fraction_of_zeros", "<", "0.0027", ":", "# 99.63%", "\n", "                    ", "count_of_anomalies", "=", "count_of_anomalies", "+", "(", "df_new", "[", "'KPI_1'", "]", ".", "iloc", "[", "prediction_start", ":", "]", "==", "0.0", ")", ".", "sum", "(", ")", "\n", "df_anom", "=", "df_anom", ".", "append", "(", "df_new", ".", "iloc", "[", "prediction_start", ":", "]", ".", "loc", "[", "df_new", "[", "'KPI_1'", "]", ".", "iloc", "[", "prediction_start", ":", "]", "==", "0.0", "]", ")", "\n", "", "df_new", ".", "loc", "[", "df_new", "[", "'KPI_1'", "]", "==", "0.0", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "\n", "if", "logarithmize", ":", "# logarithmic prediction", "\n", "\n", "#################################", "\n", "## Apply logarithm transformation", "\n", "#################################", "\n", "\n", "                    ", "df_log_new", "=", "df_new", ".", "copy", "(", ")", "\n", "df_log_new", "[", "'KPI_1'", "]", "=", "np", ".", "log", "(", "df_log_new", "[", "'KPI_1'", "]", ")", "\n", "\n", "df_log_training", "=", "df_training", ".", "copy", "(", ")", "\n", "df_log_training", "[", "'KPI_1'", "]", "=", "np", ".", "log", "(", "df_log_training", "[", "'KPI_1'", "]", ")", "\n", "\n", "# -----------------------------------", "\n", "\n", "if", "classical", ":", "\n", "\n", "# Initialize the model used for forecasting", "\n", "\n", "# Point anomaly detection", "\n", "                        ", "if", "len", "(", "exog_input", ".", "columns", ")", ">", "0", ":", "\n", "                            ", "model_new", "=", "sm", ".", "tsa", ".", "UnobservedComponents", "(", "df_log_training", "[", "'KPI_1'", "]", ",", "autoregressive", "=", "int", "(", "autoregressive_order", ")", ",", "\n", "level", "=", "selected_trend_model", ",", "freq_seasonal", "=", "freq_seasonal", ",", "exog", "=", "exog_input", ")", "\n", "\n", "", "else", ":", "\n", "                            ", "model_new", "=", "sm", ".", "tsa", ".", "UnobservedComponents", "(", "df_log_training", "[", "'KPI_1'", "]", ",", "autoregressive", "=", "int", "(", "autoregressive_order", ")", ",", "level", "=", "selected_trend_model", ",", "freq_seasonal", "=", "freq_seasonal", ")", "\n", "\n", "", "if", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                            ", "resPoint", "=", "model_new", ".", "smooth", "(", "model_params", ")", "\n", "", "else", ":", "\n", "                            ", "resPoint", "=", "model_new", ".", "smooth", "(", "model_result", ".", "params", ")", "\n", "\n", "", "for", "t", "in", "range", "(", "prediction_start", ",", "prediction_end", ")", ":", "\n", "\n", "# Point anomaly detection", "\n", "                            ", "f", "=", "resPoint", ".", "get_prediction", "(", "start", "=", "df_new", ".", "index", "[", "t", "]", ",", "end", "=", "df_new", ".", "index", "[", "t", "]", ")", "\n", "resPoint", "=", "resPoint", ".", "extend", "(", "df_log_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", ")", "\n", "\n", "# Point anomaly detection", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test'", "]", "=", "np", ".", "exp", "(", "f", ".", "predicted_mean", ".", "iloc", "[", "0", "]", "+", "f", ".", "var_pred_mean", "[", "0", "]", "/", "2.0", ")", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_std'", "]", "=", "np", ".", "exp", "(", "np", ".", "sqrt", "(", "f", ".", "var_pred_mean", "[", "0", "]", ")", ")", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_LL'", "]", "=", "np", ".", "exp", "(", "f", ".", "conf_int", "(", "alpha", "=", "threshold", ")", ".", "iloc", "[", "0", ",", "0", "]", ")", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_UL'", "]", "=", "np", ".", "exp", "(", "f", ".", "conf_int", "(", "alpha", "=", "threshold", ")", ".", "iloc", "[", "0", ",", "1", "]", ")", "\n", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'p_value'", "]", "=", "f", ".", "t_test", "(", "value", "=", "df_log_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", ")", "[", "1", "]", "\n", "\n", "# Anomalies for confidence band collection", "\n", "if", "operation_mode", "==", "'validation'", ":", "\n", "\n", "                                ", "for", "confidence", "in", "confidence_band_collection", ":", "\n", "\n", "                                    ", "ll", "=", "np", ".", "exp", "(", "f", ".", "conf_int", "(", "alpha", "=", "pointanomalyThreshold", "(", "confidence", ")", ")", ".", "iloc", "[", "0", ",", "0", "]", ")", "\n", "ul", "=", "np", ".", "exp", "(", "f", ".", "conf_int", "(", "alpha", "=", "pointanomalyThreshold", "(", "confidence", ")", ")", ".", "iloc", "[", "0", ",", "1", "]", ")", "\n", "\n", "if", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", ">", "ul", ")", "or", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", "<", "ll", ")", ":", "\n", "                                        ", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_{}'", ".", "format", "(", "confidence", ")", "]", "=", "np", ".", "nan", "\n", "", "else", ":", "\n", "                                        ", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_{}'", ".", "format", "(", "confidence", ")", "]", "=", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "\n", "\n", "# ML based anomalies", "\n", "", "", "", "if", "(", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ")", "and", "(", "df_label_data", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", "]", "!=", "'N'", ")", "[", "0", "]", ":", "\n", "\n", "                                ", "if", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", ">", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_UL'", "]", ")", "or", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", "<", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_LL'", "]", ")", ":", "\n", "                                    ", "count_of_anomalies", "=", "count_of_anomalies", "+", "1", "\n", "if", "count_of_anomalies", "==", "1", ":", "\n", "                                        ", "df_anom", "=", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                                        ", "df_anom", "=", "df_anom", ".", "append", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", ")", "\n", "", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "\n", "", "", "else", ":", "\n", "\n", "\n", "                                ", "if", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", ">", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_UL'", "]", ")", "or", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", "<", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_LL'", "]", ")", ":", "\n", "                                    ", "count_of_anomalies", "=", "count_of_anomalies", "+", "1", "\n", "if", "count_of_anomalies", "==", "1", ":", "\n", "                                        ", "df_anom", "=", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                                        ", "df_anom", "=", "df_anom", ".", "append", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", ")", "\n", "", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "", "", "", "", "else", ":", "\n", "\n", "                        ", "_", ",", "_", ",", "predictDataset", "=", "createTFDataset", "(", "df_log_new", ",", "exog_input", ",", "df_log_training", ",", "[", "]", ",", "trainStart", "=", "None", ",", "valStart", "=", "None", ",", "predictStart", "=", "prediction_start", ")", "\n", "\n", "predicted_mean", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "predicted_stddev", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "count", "=", "0", "\n", "for", "inputs", ",", "label", "in", "predictDataset", ":", "\n", "\n", "#print('PREDICTION')", "\n", "#print(inputs)", "\n", "\n", "                            ", "model", "=", "deepnetwork", ".", "defineModel", "(", "inputs", ".", "shape", "[", "1", "]", ",", "inputs", ".", "shape", "[", "2", "]", ",", "\n", "model_result", ".", "layers", "[", "1", "]", ".", "units", ",", "\n", "init_state", "=", "model_result", ".", "layers", "[", "1", "]", ".", "states", ")", "\n", "model", ".", "set_weights", "(", "model_result", ".", "get_weights", "(", ")", ")", "\n", "\n", "m", "=", "model", "(", "inputs", ")", ".", "numpy", "(", ")", "\n", "s", "=", "np", ".", "ones", "(", "m", ".", "shape", ")", "*", "np", ".", "std", "(", "label", "-", "m", ")", "\n", "\n", "print", "(", "inputs", ".", "shape", ")", "\n", "count", "+=", "len", "(", "inputs", ")", "\n", "\n", "predicted_mean", "=", "np", ".", "append", "(", "predicted_mean", ",", "m", ")", "\n", "predicted_stddev", "=", "np", ".", "append", "(", "predicted_stddev", ",", "s", ")", "\n", "\n", "#print('Mean',predicted_mean)", "\n", "#print('Standard deviation',s)", "\n", "\n", "", "for", "t", "in", "range", "(", "prediction_start", ",", "prediction_end", ")", ":", "\n", "\n", "                            ", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test'", "]", "=", "np", ".", "exp", "(", "predicted_mean", "[", "t", "-", "prediction_start", "]", "+", "np", ".", "square", "(", "predicted_stddev", "[", "t", "-", "prediction_start", "]", ")", "/", "2.0", ")", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_std'", "]", "=", "np", ".", "exp", "(", "predicted_stddev", "[", "t", "-", "prediction_start", "]", ")", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_LL'", "]", "=", "np", ".", "exp", "(", "norm", ".", "interval", "(", "1", "-", "threshold", ",", "loc", "=", "predicted_mean", "[", "t", "-", "prediction_start", "]", ",", "scale", "=", "predicted_stddev", "[", "t", "-", "prediction_start", "]", ")", "[", "0", "]", ")", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_UL'", "]", "=", "np", ".", "exp", "(", "norm", ".", "interval", "(", "1", "-", "threshold", ",", "loc", "=", "predicted_mean", "[", "t", "-", "prediction_start", "]", ",", "scale", "=", "predicted_stddev", "[", "t", "-", "prediction_start", "]", ")", "[", "1", "]", ")", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'p_value'", "]", "=", "1.0", "# just setting a dummy for now", "\n", "\n", "# Anomalies for confidence band collection", "\n", "if", "operation_mode", "==", "'validation'", ":", "\n", "\n", "                                ", "for", "confidence", "in", "confidence_band_collection", ":", "\n", "\n", "                                    ", "ll", "=", "np", ".", "exp", "(", "norm", ".", "interval", "(", "1", "-", "pointanomalyThreshold", "(", "confidence", ")", ",", "loc", "=", "predicted_mean", "[", "t", "-", "prediction_start", "]", ",", "scale", "=", "predicted_stddev", "[", "t", "-", "prediction_start", "]", ")", "[", "0", "]", ")", "\n", "ul", "=", "np", ".", "exp", "(", "norm", ".", "interval", "(", "1", "-", "pointanomalyThreshold", "(", "confidence", ")", ",", "loc", "=", "predicted_mean", "[", "t", "-", "prediction_start", "]", ",", "scale", "=", "predicted_stddev", "[", "t", "-", "prediction_start", "]", ")", "[", "1", "]", ")", "\n", "\n", "if", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", ">", "ul", ")", "or", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", "<", "ll", ")", ":", "\n", "                                        ", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_{}'", ".", "format", "(", "confidence", ")", "]", "=", "np", ".", "nan", "\n", "", "else", ":", "\n", "                                        ", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_{}'", ".", "format", "(", "confidence", ")", "]", "=", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "\n", "\n", "# ML based anomalies", "\n", "", "", "", "if", "(", "\n", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ")", "and", "(", "df_label_data", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", "]", "!=", "'N'", ")", "[", "0", "]", ":", "\n", "\n", "                                ", "if", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", ">", "df_new", ".", "loc", "[", "\n", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_UL'", "]", ")", "or", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", "<", "df_new", ".", "loc", "[", "\n", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_LL'", "]", ")", ":", "\n", "                                    ", "count_of_anomalies", "=", "count_of_anomalies", "+", "1", "\n", "if", "count_of_anomalies", "==", "1", ":", "\n", "                                        ", "df_anom", "=", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                                        ", "df_anom", "=", "df_anom", ".", "append", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", ")", "\n", "", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "", "", "else", ":", "\n", "\n", "                                ", "if", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", ">", "df_new", ".", "loc", "[", "\n", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_UL'", "]", ")", "or", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", "<", "df_new", ".", "loc", "[", "\n", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_LL'", "]", ")", ":", "\n", "                                    ", "count_of_anomalies", "=", "count_of_anomalies", "+", "1", "\n", "if", "count_of_anomalies", "==", "1", ":", "\n", "                                        ", "df_anom", "=", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                                        ", "df_anom", "=", "df_anom", ".", "append", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", ")", "\n", "", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "", "", "", "", "", "else", ":", "# non-logarithmic prediction", "\n", "\n", "                    ", "if", "classical", ":", "\n", "\n", "# Point anomaly detection", "\n", "                        ", "if", "len", "(", "exog_input", ".", "columns", ")", ">", "0", ":", "\n", "                            ", "model_new", "=", "sm", ".", "tsa", ".", "UnobservedComponents", "(", "df_training", "[", "'KPI_1'", "]", ",", "autoregressive", "=", "int", "(", "autoregressive_order", ")", ",", "\n", "level", "=", "selected_trend_model", ",", "freq_seasonal", "=", "freq_seasonal", ",", "exog", "=", "exog_input", ")", "\n", "\n", "", "else", ":", "\n", "                            ", "model_new", "=", "sm", ".", "tsa", ".", "UnobservedComponents", "(", "df_training", "[", "'KPI_1'", "]", ",", "autoregressive", "=", "int", "(", "autoregressive_order", ")", ",", "level", "=", "selected_trend_model", ",", "freq_seasonal", "=", "freq_seasonal", ")", "\n", "\n", "", "if", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                            ", "resPoint", "=", "model_new", ".", "smooth", "(", "model_params", ")", "\n", "", "else", ":", "\n", "                            ", "resPoint", "=", "model_new", ".", "smooth", "(", "model_result", ".", "params", ")", "\n", "\n", "", "for", "t", "in", "range", "(", "prediction_start", ",", "prediction_end", ")", ":", "\n", "\n", "# Point anomaly detection", "\n", "                            ", "f", "=", "resPoint", ".", "get_prediction", "(", "start", "=", "df_new", ".", "index", "[", "t", "]", ",", "end", "=", "df_new", ".", "index", "[", "t", "]", ")", "\n", "resPoint", "=", "resPoint", ".", "extend", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", ")", "\n", "\n", "# Regular prediction", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test'", "]", "=", "f", ".", "predicted_mean", ".", "iloc", "[", "0", "]", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_std'", "]", "=", "np", ".", "sqrt", "(", "f", ".", "var_pred_mean", "[", "0", "]", ")", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_LL'", "]", "=", "f", ".", "conf_int", "(", "alpha", "=", "threshold", ")", ".", "iloc", "[", "0", ",", "0", "]", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_UL'", "]", "=", "f", ".", "conf_int", "(", "alpha", "=", "threshold", ")", ".", "iloc", "[", "0", ",", "1", "]", "\n", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'p_value'", "]", "=", "f", ".", "t_test", "(", "value", "=", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", ")", "[", "1", "]", "\n", "\n", "# Anomalies for confidence band collection", "\n", "if", "operation_mode", "==", "'validation'", ":", "\n", "\n", "                                ", "for", "confidence", "in", "confidence_band_collection", ":", "\n", "\n", "# point anomaly detection", "\n", "                                    ", "ll", "=", "f", ".", "conf_int", "(", "alpha", "=", "pointanomalyThreshold", "(", "confidence", ")", ")", ".", "iloc", "[", "0", ",", "0", "]", "\n", "ul", "=", "f", ".", "conf_int", "(", "alpha", "=", "pointanomalyThreshold", "(", "confidence", ")", ")", ".", "iloc", "[", "0", ",", "1", "]", "\n", "\n", "if", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", ">", "ul", ")", "or", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", "<", "ll", ")", ":", "\n", "                                        ", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_{}'", ".", "format", "(", "confidence", ")", "]", "=", "np", ".", "nan", "\n", "", "else", ":", "\n", "                                        ", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_{}'", ".", "format", "(", "confidence", ")", "]", "=", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "\n", "\n", "# ML based anomalies", "\n", "", "", "", "if", "(", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ")", "and", "(", "df_label_data", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", "]", "!=", "'N'", ")", "[", "0", "]", ":", "\n", "\n", "                                ", "if", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", ">", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_UL'", "]", ")", "or", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", "<", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_LL'", "]", ")", ":", "\n", "                                    ", "count_of_anomalies", "=", "count_of_anomalies", "+", "1", "\n", "if", "count_of_anomalies", "==", "1", ":", "\n", "                                        ", "df_anom", "=", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                                        ", "df_anom", "=", "df_anom", ".", "append", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", ")", "\n", "", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "\n", "", "", "else", ":", "\n", "\n", "                                ", "if", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", ">", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_UL'", "]", ")", "or", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", "<", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_LL'", "]", ")", ":", "\n", "                                    ", "count_of_anomalies", "=", "count_of_anomalies", "+", "1", "\n", "if", "count_of_anomalies", "==", "1", ":", "\n", "                                        ", "df_anom", "=", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                                        ", "df_anom", "=", "df_anom", ".", "append", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", ")", "\n", "", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "", "", "", "", "else", ":", "\n", "\n", "                        ", "_", ",", "_", ",", "predictDataset", "=", "createTFDataset", "(", "df_new", ",", "exog_input", ",", "df_training", ",", "[", "]", ",", "trainStart", "=", "None", ",", "valStart", "=", "None", ",", "predictStart", "=", "prediction_start", ")", "\n", "\n", "predicted_mean", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "predicted_stddev", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "count", "=", "0", "\n", "for", "inputs", ",", "label", "in", "predictDataset", ":", "\n", "\n", "\n", "                            ", "model", "=", "deepnetwork", ".", "defineModel", "(", "inputs", ".", "shape", "[", "1", "]", ",", "inputs", ".", "shape", "[", "2", "]", ",", "\n", "model_result", ".", "layers", "[", "1", "]", ".", "units", ",", "\n", "init_state", "=", "model_result", ".", "layers", "[", "1", "]", ".", "states", ")", "\n", "model", ".", "set_weights", "(", "model_result", ".", "get_weights", "(", ")", ")", "\n", "\n", "\n", "m", "=", "model", "(", "inputs", ")", ".", "numpy", "(", ")", "\n", "s", "=", "np", ".", "ones", "(", "m", ".", "shape", ")", "*", "np", ".", "std", "(", "label", "-", "m", ")", "\n", "\n", "print", "(", "inputs", ".", "shape", ")", "\n", "count", "+=", "len", "(", "inputs", ")", "\n", "\n", "predicted_mean", "=", "np", ".", "append", "(", "predicted_mean", ",", "m", ")", "\n", "predicted_stddev", "=", "np", ".", "append", "(", "predicted_stddev", ",", "s", ")", "\n", "\n", "", "for", "t", "in", "range", "(", "prediction_start", ",", "prediction_end", ")", ":", "\n", "\n", "                            ", "if", "len", "(", "misc_values", ")", "==", "0", "or", "data_frequency", "!=", "'daily'", ":", "\n", "                                ", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test'", "]", "=", "predicted_mean", "[", "t", "-", "prediction_start", "]", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_std'", "]", "=", "predicted_stddev", "[", "t", "-", "prediction_start", "]", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_LL'", "]", "=", "norm", ".", "interval", "(", "1", "-", "threshold", ",", "loc", "=", "predicted_mean", "[", "t", "-", "prediction_start", "]", ",", "scale", "=", "predicted_stddev", "[", "t", "-", "prediction_start", "]", ")", "[", "0", "]", "\n", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_UL'", "]", "=", "norm", ".", "interval", "(", "1", "-", "threshold", ",", "loc", "=", "predicted_mean", "[", "t", "-", "prediction_start", "]", ",", "scale", "=", "predicted_stddev", "[", "t", "-", "prediction_start", "]", ")", "[", "1", "]", "\n", "\n", "", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'p_value'", "]", "=", "1.0", "# just setting a dummy for now", "\n", "\n", "# Anomalies for confidence band collection", "\n", "if", "operation_mode", "==", "'validation'", ":", "\n", "\n", "                                ", "for", "confidence", "in", "confidence_band_collection", ":", "\n", "\n", "                                    ", "ll", "=", "norm", ".", "interval", "(", "1", "-", "pointanomalyThreshold", "(", "confidence", ")", ",", "loc", "=", "predicted_mean", "[", "t", "-", "prediction_start", "]", ",", "scale", "=", "predicted_stddev", "[", "t", "-", "prediction_start", "]", ")", "[", "0", "]", "\n", "ul", "=", "norm", ".", "interval", "(", "1", "-", "pointanomalyThreshold", "(", "confidence", ")", ",", "loc", "=", "predicted_mean", "[", "t", "-", "prediction_start", "]", ",", "scale", "=", "predicted_stddev", "[", "t", "-", "prediction_start", "]", ")", "[", "1", "]", "\n", "\n", "if", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", ">", "ul", ")", "or", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", "<", "ll", ")", ":", "\n", "                                        ", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_{}'", ".", "format", "(", "confidence", ")", "]", "=", "np", ".", "nan", "\n", "", "else", ":", "\n", "                                        ", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_{}'", ".", "format", "(", "confidence", ")", "]", "=", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "\n", "\n", "# ML based anomalies", "\n", "", "", "", "if", "(", "\n", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ")", "and", "(", "df_label_data", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", "]", "!=", "'N'", ")", "[", "0", "]", ":", "\n", "\n", "                                ", "if", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", ">", "df_new", ".", "loc", "[", "\n", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_UL'", "]", ")", "or", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", "<", "df_new", ".", "loc", "[", "\n", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_LL'", "]", ")", ":", "\n", "                                    ", "count_of_anomalies", "=", "count_of_anomalies", "+", "1", "\n", "if", "count_of_anomalies", "==", "1", ":", "\n", "                                        ", "df_anom", "=", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                                        ", "df_anom", "=", "df_anom", ".", "append", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", ")", "\n", "", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "", "", "else", ":", "\n", "\n", "                                ", "if", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", ">", "df_new", ".", "loc", "[", "\n", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_UL'", "]", ")", "or", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", "]", ",", "'KPI_1'", "]", "<", "df_new", ".", "loc", "[", "\n", "df_new", ".", "index", "[", "t", "]", ",", "'forecast_test_LL'", "]", ")", ":", "\n", "                                    ", "count_of_anomalies", "=", "count_of_anomalies", "+", "1", "\n", "if", "count_of_anomalies", "==", "1", ":", "\n", "                                        ", "df_anom", "=", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", "\n", "", "else", ":", "\n", "                                        ", "df_anom", "=", "df_anom", ".", "append", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", "]", ")", "\n", "", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "t", ":", "t", "+", "1", "]", ",", "'KPI_1'", "]", "=", "np", ".", "nan", "\n", "\n", "\n", "", "", "", "", "", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: SUCCESS EVALUATING FORECASTS'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'SUCCESS EVALUATING FORECASTS'", ")", "\n", "\n", "#####################################################################################    ", "\n", "#### FORECASTING CODE ENDS  ", "\n", "#####################################################################################                 ", "\n", "\n", "", "df_new", ".", "rename", "(", "columns", "=", "{", "'KPI_original_1'", ":", "'Actual'", ",", "'forecast_test'", ":", "'ML prediction'", "}", ",", "inplace", "=", "True", ")", "\n", "# Setting ML prediction of zero values to be zero", "\n", "df_new", ".", "loc", "[", "df_new", "[", "'Actual'", "]", "==", "0.0", ",", "'ML prediction'", "]", "=", "0.0", "\n", "\n", "######################################", "\n", "### TEST ERROR COMPUTATION", "\n", "######################################", "\n", "\n", "if", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'validation'", ":", "\n", "\n", "                ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                    ", "logging", ".", "debug", "(", "'{}: EVALUATING TEST ERROR'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                    ", "logging", ".", "debug", "(", "'EVALUATING TEST ERROR'", ")", "\n", "\n", "# Error computation", "\n", "", "if", "isinstance", "(", "training_window", ",", "float", ")", ":", "\n", "                    ", "df_test_error", "=", "np", ".", "abs", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", ",", "'ML prediction'", "]", "-", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "int", "(", "training_window", "*", "len", "(", "df_new", ")", ")", ":", "]", ",", "'Actual'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "rescaling_factor", "=", "10", "**", "data_scale", "[", "0", "]", "/", "10", "**", "np", ".", "floor", "(", "np", ".", "log10", "(", "np", ".", "abs", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", ">", "test_window", ",", "'Actual'", "]", ")", ".", "max", "(", ")", "*", "10", "**", "data_scale", "[", "0", "]", ")", ")", "\n", "df_test_error", "=", "np", ".", "square", "(", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", ">", "test_window", ",", "'ML prediction'", "]", "-", "df_new", ".", "loc", "[", "df_new", ".", "index", ">", "test_window", ",", "'Actual'", "]", ")", "*", "rescaling_factor", ")", "\n", "\n", "", "df_forecast_error", "=", "0", "\n", "\n", "error_dict", "=", "{", "\n", "\"evaluation_status\"", ":", "str", "(", "'SUCCESS'", ")", ",", "\n", "\"model_name\"", ":", "model_name", ",", "\n", "\"kpi_name\"", ":", "kpi_name", ",", "\n", "\"app_name\"", ":", "app_name", ",", "\n", "\"forecast_error\"", ":", "df_forecast_error", ",", "\n", "\"test_error\"", ":", "df_test_error", ".", "mean", "(", ")", "\n", "}", "\n", "json_string", "=", "json", ".", "dumps", "(", "error_dict", ",", "separators", "=", "(", "','", ",", "':'", ")", ")", "\n", "# print('output#'+json_string)", "\n", "\n", "logging", ".", "debug", "(", "'{}: error_json {}'", ".", "format", "(", "kpi_name", ",", "error_dict", ")", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                    ", "logging", ".", "debug", "(", "'{}: SUCCESS EVALUATING TEST ERROR'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                    ", "logging", ".", "debug", "(", "'SUCCESS EVALUATING TEST ERROR'", ")", "\n", "\n", "#############################", "\n", "## RECORD POINT ANOMALY SERVING EXECUTION TIME", "\n", "#############################", "\n", "\n", "", "", "elapsed_time_pointAD", "=", "time", ".", "time", "(", ")", "-", "start_time_pointAD", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{} {}: POINT ANOMALY SERVING EXECUTION TIME {}'", ".", "format", "(", "app_name", ",", "kpi_name", ",", "elapsed_time_pointAD", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'POINT ANOMALY SERVING EXECUTION TIME {}'", ".", "format", "(", "elapsed_time_pointAD", ")", ")", "\n", "\n", "", "", "if", "operation_mode", "!=", "'tester'", ":", "\n", "\n", "            ", "df_changepoint", "=", "pd", ".", "DataFrame", "(", "np", ".", "zeros", "(", "(", "len", "(", "df_new", ")", "-", "1", ",", "1", ")", ")", ",", "index", "=", "df_new", ".", "index", "[", ":", "-", "1", "]", ",", "columns", "=", "[", "'probability'", "]", ")", "\n", "changepoint_desc", "=", "df_changepoint", "\n", "list_of_trend_anomalies", "=", "[", "]", "\n", "test_meanTrend", "=", "[", "]", "\n", "test_stdTrend", "=", "[", "]", "\n", "start_time_postprocessing", "=", "time", ".", "time", "(", ")", "\n", "\n", "###########", "\n", "# DECISION", "\n", "###########", "\n", "\n", "if", "perform_point_anomaly", ":", "\n", "                ", "decision_point_anomaly", "=", "(", "not", "np", ".", "isnan", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "-", "cycle_period", "-", "1", ":", "-", "1", "]", ",", "'KPI_1'", "]", ")", ".", "all", "(", ")", ")", "and", "np", ".", "isnan", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "-", "1", "]", ",", "'KPI_1'", "]", ")", "\n", "", "else", ":", "\n", "                ", "decision_point_anomaly", "=", "False", "\n", "\n", "##########################", "\n", "### PLOTTING", "\n", "##########################", "\n", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: PLOTTING'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'PLOTTING'", ")", "\n", "\n", "", "plt", ",", "min_plotWindow", ",", "max_plotWindow", "=", "generate_plot", "(", "operation_mode", ",", "model_type", ",", "df_new", ",", "df_training", ",", "df_test", ",", "df_anom_training", ",", "df_anom", ",", "data_source", ",", "kpi_name", ",", "numberOfColumns", ",", "data_frequency", ",", "training_window", ",", "test_window", ",", "plottingWindow", ",", "plottingYlim", ",", "decision_point_anomaly", ",", "perform_point_anomaly", ",", "perform_trend_anomaly", ",", "count_of_anomalies_training", ",", "count_of_anomalies", ",", "display_trend_anomaly", ",", "display_all_anomalies", ",", "display_all_trend_anomalies", ",", "trend_boundaries", ",", "confidence_band", ",", "threshold", ",", "threshold_probability", ",", "onlyData", ",", "data_scale", ",", "rule_based", ",", "changepoint_desc", ",", "trend_anomaly_window", ",", "list_of_trend_anomalies", ")", "\n", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{}: SUCCESS PLOTTING'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'SUCCESS PLOTTING'", ")", "\n", "\n", "################################################", "\n", "### GENERATION OF FINAL RESULTS", "\n", "################################################", "\n", "\n", "", "if", "True", ":", "\n", "\n", "                ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                    ", "logging", ".", "debug", "(", "'{}: GENERATING FINAL RESULTS'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                    ", "logging", ".", "debug", "(", "'GENERATING FINAL RESULTS'", ")", "\n", "\n", "################", "\n", "# Model summary", "\n", "################", "\n", "\n", "", "logging", ".", "debug", "(", "'\\n\\nModel summary\\n============\\n'", ")", "\n", "logging", ".", "debug", "(", "'Total number of data points {}'", ".", "format", "(", "len", "(", "df_complete_data", ")", ")", ")", "\n", "logging", ".", "debug", "(", "'Total number of training data points {}'", ".", "format", "(", "len", "(", "df_training", ")", ")", ")", "\n", "logging", ".", "debug", "(", "'Total number of prediction data points {}'", ".", "format", "(", "len", "(", "df_test", ")", ")", ")", "\n", "logging", ".", "debug", "(", "'Data frequency: {}'", ".", "format", "(", "data_frequency", ")", ")", "\n", "logging", ".", "debug", "(", "'Plotting window size (fraction of training): {}'", ".", "format", "(", "plottingWindow", ")", ")", "\n", "\n", "if", "perform_point_anomaly", ":", "\n", "\n", "                    ", "logging", ".", "debug", "(", "'Selected trend model: {}'", ".", "format", "(", "selected_trend_model", ")", ")", "\n", "logging", ".", "debug", "(", "'Selected autoregressive order: {}'", ".", "format", "(", "autoregressive_order", ")", ")", "\n", "logging", ".", "debug", "(", "'Selected moving average order: {}'", ".", "format", "(", "MA_order", ")", ")", "\n", "logging", ".", "debug", "(", "'Possible seasonal periods for point anomaly detection: {}'", ".", "format", "(", "seasonal_periods", ")", ")", "\n", "logging", ".", "debug", "(", "'Selected seasonal and harmonics for point anomaly detection: {}'", ".", "format", "(", "freq_seasonal", ")", ")", "\n", "logging", ".", "debug", "(", "'Selected seasonal autoregressive order: {}'", ".", "format", "(", "AR_seasonal_order", ")", ")", "\n", "logging", ".", "debug", "(", "'Selected seasonal moving average order: {}'", ".", "format", "(", "MA_seasonal_order", ")", ")", "\n", "logging", ".", "debug", "(", "'Point anomaly threshold: {}'", ".", "format", "(", "confidence_band", ")", ")", "\n", "logging", ".", "debug", "(", "'Logarithmize: {}'", ".", "format", "(", "logarithmize", ")", ")", "\n", "\n", "logging", ".", "debug", "(", "'p-value: {}'", ".", "format", "(", "round", "(", "1", "-", "df_new", "[", "'p_value'", "]", ".", "iloc", "[", "-", "1", "]", ",", "3", ")", ")", ")", "\n", "logging", ".", "debug", "(", "'{}'", ".", "format", "(", "kpi_name", ")", ")", "\n", "\n", "##############", "\n", "\n", "############################################    ", "\n", "# save the anomaly prediction plot to a file", "\n", "############################################", "\n", "", "if", "operation_mode", "==", "'validation'", ":", "\n", "\n", "\n", "                        ", "if", "onlyData", "==", "False", ":", "\n", "                            ", "plt", ".", "savefig", "(", "\"figures/univariateML\"", "+", "alertingDate", ".", "strftime", "(", "'%d-%b-%Y %H:%M'", ")", "+", "'_'", "+", "app_name", "+", "kpi_name", "+", "\".png\"", ")", "\n", "", "else", ":", "\n", "                            ", "plt", ".", "savefig", "(", "\"figures/univariateML\"", "+", "alertingDate", ".", "strftime", "(", "'%d-%b-%Y %H:%M'", ")", "+", "'_'", "+", "app_name", "+", "kpi_name", "+", "\".png\"", ")", "\n", "\n", "############################################", "\n", "# return anomaly status at last date", "\n", "############################################", "\n", "\n", "", "if", "perform_point_anomaly", ":", "# only point anomaly detection", "\n", "\n", "                            ", "if", "model_type", "==", "'whistler_batch'", ":", "\n", "\n", "# Saving prediction results                            ", "\n", "                                ", "predict_label", "=", "np", ".", "isnan", "(", "df_new", "[", "'KPI_1'", "]", ")", "\n", "predict_label", ".", "loc", "[", "np", ".", "isnan", "(", "df_new", "[", "'Actual'", "]", ")", "]", "=", "False", "\n", "# Anomalies in data=0.0", "\n", "if", "fraction_of_zeros", ">=", "0.0027", ":", "\n", "                                    ", "predict_label", ".", "loc", "[", "df_new", "[", "'Actual'", "]", "==", "0.0", "]", "=", "False", "\n", "", "predict_label", "=", "pd", ".", "concat", "(", "[", "predict_label", ",", "df_new", "[", "'p_value'", "]", "]", ",", "axis", "=", "1", ")", "\n", "predict_label", "=", "predict_label", ".", "reset_index", "(", ")", "\n", "\n", "predict_label", ".", "columns", "=", "[", "'timestamp'", ",", "'label'", ",", "'score'", "]", "\n", "\n", "predict_label", "[", "'label'", "]", "=", "predict_label", "[", "'label'", "]", ".", "map", "(", "lambda", "x", ":", "int", "(", "x", ")", ")", "\n", "actual", "=", "df_new", "[", "'Actual'", "]", ".", "to_frame", "(", ")", "\n", "\n", "thres", "=", "threshold", "\n", "\n", "predict_label_group", "=", "[", "]", "\n", "for", "confidence", "in", "confidence_band_collection", ":", "\n", "\n", "# Saving prediction results for each confidence interval in confidence_band_collection", "\n", "                                    ", "predict_label_conf", "=", "np", ".", "isnan", "(", "df_new", "[", "'KPI_{}'", ".", "format", "(", "confidence", ")", "]", ")", "\n", "predict_label_conf", ".", "loc", "[", "np", ".", "isnan", "(", "df_new", "[", "'Actual'", "]", ")", "]", "=", "False", "\n", "# Anomalies in data=0.0", "\n", "if", "fraction_of_zeros", ">=", "0.0027", ":", "\n", "                                        ", "predict_label_conf", ".", "loc", "[", "df_new", "[", "'Actual'", "]", "==", "0.0", "]", "=", "False", "\n", "\n", "", "predict_label_conf", "=", "predict_label_conf", ".", "reset_index", "(", ")", "\n", "\n", "predict_label_conf", ".", "columns", "=", "[", "'timestamp'", ",", "'label'", "]", "\n", "\n", "predict_label_conf", "[", "'label'", "]", "=", "predict_label_conf", "[", "'label'", "]", ".", "map", "(", "lambda", "x", ":", "int", "(", "x", ")", ")", "\n", "\n", "predict_label_group", ".", "append", "(", "predict_label_conf", ")", "\n", "\n", "", "return", "pd", ".", "DataFrame", "(", "[", "[", "predict_label_group", ",", "predict_label", ",", "actual", ",", "(", "np", ".", "sqrt", "(", "df_test_error", ".", "mean", "(", ")", ")", ",", "np", ".", "sqrt", "(", "df_test_error", ")", ".", "max", "(", ")", ")", ",", "confidence_band", ",", "data_frequency", ",", "min_plotWindow", "[", "0", "]", ",", "max_plotWindow", "[", "0", "]", ",", "plottingYlim", "]", "]", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                                ", "return", "pd", ".", "DataFrame", "(", "[", "[", "df_new", ".", "index", "[", "-", "1", "]", ",", "np", ".", "isnan", "(", "df_new", ".", "loc", "[", "df_new", ".", "index", "[", "-", "1", "]", ",", "'KPI_1'", "]", ")", ",", "np", ".", "nan", ",", "trendPrior", ",", "kpi_name", "]", "]", ",", "columns", "=", "[", "'Date'", ",", "'Anomaly'", ",", "'Time of trend anomaly'", ",", "'Trend anomaly prior probability'", ",", "'KPI'", "]", ")", "\n", "\n", "", "", "elif", "perform_trend_anomaly", ":", "# only trend anomaly detection", "\n", "\n", "# Saving prediction results", "\n", "\n", "                            ", "if", "model_type", "==", "'whistler_batch'", ":", "\n", "\n", "                                ", "predict_label", "=", "np", ".", "isnan", "(", "trend_boundaries", "[", "'KPI_1'", "]", ")", "\n", "predict_label", ".", "iloc", "[", "-", "1", "]", "=", "False", "\n", "predict_label", ".", "loc", "[", "np", ".", "isnan", "(", "df_new", "[", "'Actual'", "]", ")", "]", "=", "False", "\n", "predict_label", "=", "predict_label", ".", "reset_index", "(", ")", "\n", "\n", "predict_label", ".", "columns", "=", "[", "'timestamp'", ",", "'label'", "]", "\n", "predict_label", "[", "'label'", "]", "=", "predict_label", "[", "'label'", "]", ".", "map", "(", "lambda", "x", ":", "int", "(", "x", ")", ")", "\n", "actual", "=", "df_new", "[", "'Actual'", "]", ".", "to_frame", "(", ")", "\n", "\n", "return", "pd", ".", "DataFrame", "(", "[", "[", "None", ",", "predict_label", ",", "actual", ",", "None", ",", "threshold_probability", ",", "data_frequency", ",", "min_plotWindow", "[", "0", "]", ",", "max_plotWindow", "[", "0", "]", ",", "plottingYlim", "]", "]", ")", "\n", "\n", "", "else", ":", "\n", "\n", "                                ", "if", "len", "(", "list_of_trend_anomalies", ")", ">", "0", ":", "\n", "                                    ", "return", "pd", ".", "DataFrame", "(", "[", "[", "df_new", ".", "index", "[", "-", "1", "]", ",", "np", ".", "nan", ",", "list_of_trend_anomalies", ".", "index", "[", "-", "1", "]", ",", "trendPrior", ",", "kpi_name", "]", "]", ",", "columns", "=", "[", "'Date'", ",", "'Anomaly'", ",", "'Time of trend anomaly'", ",", "'Trend anomaly prior probability'", ",", "'KPI'", "]", ")", "\n", "", "else", ":", "\n", "                                    ", "return", "pd", ".", "DataFrame", "(", "[", "[", "df_new", ".", "index", "[", "-", "1", "]", ",", "np", ".", "nan", ",", "np", ".", "nan", ",", "trendPrior", ",", "kpi_name", "]", "]", ",", "columns", "=", "[", "'Date'", ",", "'Anomaly'", ",", "'Time of trend anomaly'", ",", "'Trend anomaly prior probability'", ",", "'KPI'", "]", ")", "\n", "\n", "\n", "", "", "", "", "else", ":", "\n", "\n", "#print time.time()-start_time", "\n", "\n", "                    ", "if", "database", ":", "\n", "                        ", "if", "onlyData", "==", "False", ":", "\n", "                            ", "plt", ".", "savefig", "(", "\"figures/\"", "+", "alertingDate", ".", "strftime", "(", "'%d-%b-%Y %H:%M'", ")", "+", "'_'", "+", "app_name", "+", "kpi_name", "+", "\".png\"", ")", "\n", "", "else", ":", "\n", "                            ", "plt", ".", "savefig", "(", "\"figures/onlyData/data_\"", "+", "alertingDate", ".", "strftime", "(", "'%d-%b-%Y %H:%M'", ")", "+", "'_'", "+", "app_name", "+", "kpi_name", "+", "\".png\"", ")", "\n", "\n", "", "", "else", ":", "\n", "                        ", "if", "onlyData", "==", "False", ":", "\n", "                            ", "plt", ".", "savefig", "(", "\"figures/\"", "+", "app_name", "[", ":", "-", "4", "]", "+", "\".png\"", ")", "\n", "", "else", ":", "\n", "                            ", "plt", ".", "savefig", "(", "\"figures/data_\"", "+", "app_name", "[", ":", "-", "4", "]", "+", "\".png\"", ")", "\n", "\n", "", "", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                    ", "logging", ".", "debug", "(", "'{}: SUCCESS GENERATING FINAL RESULTS'", ".", "format", "(", "kpi_name", ")", ")", "\n", "", "else", ":", "\n", "                    ", "logging", ".", "debug", "(", "'SUCCESS GENERATING FINAL RESULTS'", ")", "\n", "\n", "#############################", "\n", "## RECORD POSTPROCESSING EXECUTION TIME", "\n", "#############################", "\n", "\n", "", "", "elapsed_time_postprocessing", "=", "time", ".", "time", "(", ")", "-", "start_time_postprocessing", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{} {}: POSTPROCESSING EXECUTION TIME {}'", ".", "format", "(", "app_name", ",", "kpi_name", ",", "elapsed_time_postprocessing", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'POSTPROCESSING EXECUTION TIME {}'", ".", "format", "(", "elapsed_time_postprocessing", ")", ")", "\n", "\n", "\n", "#############################", "\n", "## RECORD POINT ANOMALY EXECUTION TIME", "\n", "#############################    ", "\n", "", "", "", "if", "perform_point_anomaly", ":", "\n", "\n", "        ", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "            ", "if", "operation_mode", "==", "'executor'", ":", "\n", "                ", "logging", ".", "debug", "(", "'{} {}: POINT ANOMALY EXECUTION TIME {}'", ".", "format", "(", "app_name", ",", "kpi_name", ",", "elapsed_time_preprocessing", "+", "elapsed_time_pointAD", "+", "elapsed_time_postprocessing", ")", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "debug", "(", "'{} {}: POINT ANOMALY EXECUTION TIME {}'", ".", "format", "(", "app_name", ",", "kpi_name", ",", "elapsed_time_preprocessing", "+", "elapsed_time_pointAD", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "'POINT ANOMALY EXECUTION TIME {}'", ".", "format", "(", "elapsed_time_preprocessing", "+", "elapsed_time_pointAD", "+", "elapsed_time_postprocessing", ")", ")", "\n", "\n", "#############################", "\n", "## RECORD OVERALL EXECUTION TIME", "\n", "#############################", "\n", "\n", "", "", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{} {}: EXECUTION TIME {}'", ".", "format", "(", "app_name", ",", "kpi_name", ",", "elapsed_time", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'EXECUTION TIME {}'", ".", "format", "(", "elapsed_time", ")", ")", "\n", "\n", "#############################", "\n", "# LOG EXIT MESSAGE        ", "\n", "#############################", "\n", "\n", "", "if", "operation_mode", "==", "'trainer'", "or", "operation_mode", "==", "'tester'", "or", "operation_mode", "==", "'executor'", ":", "\n", "        ", "logging", ".", "debug", "(", "'{} {}: Ending Python script SUCCESS {}'", ".", "format", "(", "app_name", ",", "kpi_name", ",", "type_of_anomaly", ")", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "debug", "(", "'Ending Python script SUCCESS'", ")", "\n", "\n", "############################################", "\n", "# RETURN OUTPUT JSON BACK TO MAIN_UNIVARIATE", "\n", "############################################", "\n", "", "return", "json_string", "\n", "", ""]]}